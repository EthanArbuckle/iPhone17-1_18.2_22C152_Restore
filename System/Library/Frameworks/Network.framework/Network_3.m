void sub_183280EBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, void *a19, void *a20,void *a21)
{
  void *v21;
  void *v22;
  void *v23;
  void *v24;

  _Unwind_Resume(a1);
}

NWConcrete_nw_path_evaluator *nw_path_create_evaluator_for_endpoint(void *a1, void *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  evaluator_for_endpoint_no_evaluate = nw_path_create_evaluator_for_endpoint_no_evaluate(a1, a2);
  v3 = evaluator_for_endpoint_no_evaluate;
  if (evaluator_for_endpoint_no_evaluate
    && (nw_path_evaluator_evaluate(evaluator_for_endpoint_no_evaluate, 0) & 1) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v4 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v16 = "nw_path_create_evaluator_for_endpoint";
    v5 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v13 = 0;
    if (__nwlog_fault(v5, &type, &v13))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v6 = (id)gLogObj;
        os_log_type_t v7 = type;
        if (os_log_type_enabled(v6, type))
        {
          *(_DWORD *)buf = 136446210;
          v16 = "nw_path_create_evaluator_for_endpoint";
          _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s nw_path_evaluator_evaluate failed", buf, 0xCu);
        }
      }
      else if (v13)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v6 = (id)gLogObj;
        os_log_type_t v10 = type;
        BOOL v11 = os_log_type_enabled(v6, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446466;
            v16 = "nw_path_create_evaluator_for_endpoint";
            __int16 v17 = 2082;
            v18 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v6, v10, "%{public}s nw_path_evaluator_evaluate failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          if (!v5) {
            goto LABEL_10;
          }
          goto LABEL_9;
        }
        if (v11)
        {
          *(_DWORD *)buf = 136446210;
          v16 = "nw_path_create_evaluator_for_endpoint";
          _os_log_impl(&dword_1830D4000, v6, v10, "%{public}s nw_path_evaluator_evaluate failed, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v6 = (id)gLogObj;
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v6, type))
        {
          *(_DWORD *)buf = 136446210;
          v16 = "nw_path_create_evaluator_for_endpoint";
          _os_log_impl(&dword_1830D4000, v6, v12, "%{public}s nw_path_evaluator_evaluate failed, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
    if (!v5)
    {
LABEL_10:

      return 0;
    }
LABEL_9:
    free(v5);
    goto LABEL_10;
  }
  return v3;
}

void sub_1832812F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

NWConcrete_nw_path_evaluator *nw_path_create_evaluator_for_endpoint_no_evaluate(void *a1, void *a2)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  id v4 = a1;
  id v5 = a2;
  v6 = objc_alloc_init(NWConcrete_nw_path_evaluator);
  os_log_type_t v7 = v6;
  if (v6)
  {
    if (v5)
    {
      objc_storeStrong((id *)v6 + 1, a2);
      v8 = (id *)v5;
      v9 = (id *)v8[19];

      if (v9)
      {
        v9 = v9;
        id v10 = v9[3];

        if (v10 && nw_protocol_options_is_custom_ip(v10)) {
          *((unsigned char *)v7 + 106) = nw_custom_ip_options_get_protocol(v10);
        }
      }
      if (!v4) {
        goto LABEL_20;
      }
    }
    else
    {
      v15 = [NWConcrete_nw_parameters alloc];
      v16 = objc_alloc_init(NWConcrete_nw_protocol_stack);
      __int16 v17 = -[NWConcrete_nw_parameters initWithStack:]((id *)&v15->super.isa, v16);

      v18 = (void *)*((void *)v7 + 1);
      *((void *)v7 + 1) = v17;

      if (!v4) {
        goto LABEL_20;
      }
    }
    id v19 = v4;
    int v20 = [v19 type];

    if (v20 == 4)
    {
      BOOL v21 = nw_endpoint_copy_host_port_endpoint_for_url(v19);
      v22 = (void *)*((void *)v7 + 2);
      *((void *)v7 + 2) = v21;

      nw_parameters_set_url_endpoint(*((void **)v7 + 1), v19);
LABEL_22:
      *((unsigned char *)v7 + 107) |= 0x40u;
      v23 = v7;
      goto LABEL_23;
    }
LABEL_20:
    objc_storeStrong((id *)v7 + 2, a1);
    if (v4 == 0 && v5 == 0) {
      *((unsigned char *)v7 + 107) |= 1u;
    }
    goto LABEL_22;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v11 = (id)gLogObj;
  *(_DWORD *)buf = 136446210;
  v32 = "nw_path_create_evaluator_for_endpoint_no_evaluate";
  os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v29 = 0;
  if (__nwlog_fault(v12, &type, &v29))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      char v13 = (id)gLogObj;
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v32 = "nw_path_create_evaluator_for_endpoint_no_evaluate";
        _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_path_evaluator) alloc] init] failed", buf, 0xCu);
      }
    }
    else if (v29)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      char v13 = (id)gLogObj;
      os_log_type_t v26 = type;
      BOOL v27 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v27)
        {
          *(_DWORD *)buf = 136446466;
          v32 = "nw_path_create_evaluator_for_endpoint_no_evaluate";
          __int16 v33 = 2082;
          v34 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v13, v26, "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_path_evaluator) alloc] init] failed, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        if (v12) {
          goto LABEL_16;
        }
        goto LABEL_23;
      }
      if (v27)
      {
        *(_DWORD *)buf = 136446210;
        v32 = "nw_path_create_evaluator_for_endpoint_no_evaluate";
        _os_log_impl(&dword_1830D4000, v13, v26, "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_path_evaluator) alloc] init] failed, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      char v13 = (id)gLogObj;
      os_log_type_t v28 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v32 = "nw_path_create_evaluator_for_endpoint_no_evaluate";
        _os_log_impl(&dword_1830D4000, v13, v28, "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_path_evaluator) alloc] init] failed, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
  if (v12) {
LABEL_16:
  }
    free(v12);
LABEL_23:

  return v7;
}

void sub_183281778(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_protocol_options_is_custom_ip(void *a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = (id *)v1;
    id v4 = v3[1];

    if (nw_protocol_copy_custom_ip_definition(void)::onceToken != -1) {
      dispatch_once(&nw_protocol_copy_custom_ip_definition(void)::onceToken, &__block_literal_global_7_53383);
    }
    BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v4, nw_protocol_copy_custom_ip_definition(void)::definition);

    goto LABEL_5;
  }
  os_log_type_t v7 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v18 = "nw_protocol_options_is_custom_ip";
  v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_protocol_options_is_custom_ip";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null options", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v9 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          v18 = "nw_protocol_options_is_custom_ip";
          __int16 v19 = 2082;
          int v20 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_protocol_options_is_custom_ip";
        _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      v9 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_protocol_options_is_custom_ip";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_22:
  if (v8) {
    free(v8);
  }
  BOOL is_equal_unsafe = 0;
LABEL_5:

  return is_equal_unsafe;
}

void sub_183281AA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_parameters_set_multipath_service(nw_parameters_t parameters, nw_multipath_service_t multipath_service)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  nw_parameters_t v3 = parameters;
  nw_parameters_t v4 = v3;
  if (v3)
  {
    *(_DWORD *)((char *)v3[13].isa + 103) = multipath_service;
    goto LABEL_3;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_parameters_set_multipath_service";
  v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_set_multipath_service";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_parameters_set_multipath_service";
          __int16 v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_set_multipath_service";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_set_multipath_service";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
LABEL_3:
}

void sub_183282070(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1832821E0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL nw_endpoint_copy_host_port_endpoint_for_url(void *a1)
{
  *(void *)&v41[13] = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  v2 = v1;
  if (!v1)
  {
    BOOL v27 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v39 = "nw_endpoint_copy_host_port_endpoint_for_url";
    os_log_type_t v28 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v36 = 0;
    if (__nwlog_fault(v28, &type, &v36))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        char v29 = __nwlog_obj();
        os_log_type_t v30 = type;
        if (os_log_type_enabled(v29, type))
        {
          *(_DWORD *)buf = 136446210;
          v39 = "nw_endpoint_copy_host_port_endpoint_for_url";
          _os_log_impl(&dword_1830D4000, v29, v30, "%{public}s called with null endpoint", buf, 0xCu);
        }
      }
      else if (v36)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        char v29 = __nwlog_obj();
        os_log_type_t v32 = type;
        BOOL v33 = os_log_type_enabled(v29, type);
        if (backtrace_string)
        {
          if (v33)
          {
            *(_DWORD *)buf = 136446466;
            v39 = "nw_endpoint_copy_host_port_endpoint_for_url";
            __int16 v40 = 2082;
            *(void *)v41 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v29, v32, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_42;
        }
        if (v33)
        {
          *(_DWORD *)buf = 136446210;
          v39 = "nw_endpoint_copy_host_port_endpoint_for_url";
          _os_log_impl(&dword_1830D4000, v29, v32, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        char v29 = __nwlog_obj();
        os_log_type_t v34 = type;
        if (os_log_type_enabled(v29, type))
        {
          *(_DWORD *)buf = 136446210;
          v39 = "nw_endpoint_copy_host_port_endpoint_for_url";
          _os_log_impl(&dword_1830D4000, v29, v34, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_42:
    if (!v28) {
      goto LABEL_12;
    }
    char v15 = (char *)v28;
    goto LABEL_11;
  }
  id v3 = v1;
  int v4 = [v3 type];

  if (v4 != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v7 = (id)gLogObj;
    id v8 = v3;
    int v9 = [v8 type];

    *(_DWORD *)buf = 136446466;
    v39 = "nw_endpoint_copy_host_port_endpoint_for_url";
    __int16 v40 = 1024;
    *(_DWORD *)v41 = v9;
    LODWORD(v35) = 18;
    os_log_type_t v10 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v36 = 0;
    if (__nwlog_fault(v10, &type, &v36))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v11 = (id)gLogObj;
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          id v13 = v8;
          int v14 = objc_msgSend(v13, "type", buf, v35);

          *(_DWORD *)buf = 136446466;
          v39 = "nw_endpoint_copy_host_port_endpoint_for_url";
          __int16 v40 = 1024;
          *(_DWORD *)v41 = v14;
          _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s incorrect endpoint type %u", buf, 0x12u);
        }
      }
      else if (v36)
      {
        __int16 v17 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v11 = (id)gLogObj;
        os_log_type_t v18 = type;
        BOOL v19 = os_log_type_enabled(v11, type);
        if (v17)
        {
          if (v19)
          {
            id v20 = v8;
            int v21 = objc_msgSend(v20, "type", buf, v35);

            *(_DWORD *)buf = 136446722;
            v39 = "nw_endpoint_copy_host_port_endpoint_for_url";
            __int16 v40 = 1024;
            *(_DWORD *)v41 = v21;
            v41[2] = 2082;
            *(void *)&v41[3] = v17;
            _os_log_impl(&dword_1830D4000, v11, v18, "%{public}s incorrect endpoint type %u, dumping backtrace:%{public}s", buf, 0x1Cu);
          }

          free(v17);
          if (!v10) {
            goto LABEL_12;
          }
LABEL_10:
          char v15 = (char *)v10;
LABEL_11:
          free(v15);
          goto LABEL_12;
        }
        if (v19)
        {
          id v25 = v8;
          int v26 = objc_msgSend(v25, "type", buf, v35);

          *(_DWORD *)buf = 136446466;
          v39 = "nw_endpoint_copy_host_port_endpoint_for_url";
          __int16 v40 = 1024;
          *(_DWORD *)v41 = v26;
          _os_log_impl(&dword_1830D4000, v11, v18, "%{public}s incorrect endpoint type %u, no backtrace", buf, 0x12u);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v11 = (id)gLogObj;
        os_log_type_t v22 = type;
        if (os_log_type_enabled(v11, type))
        {
          id v23 = v8;
          int v24 = objc_msgSend(v23, "type", buf, v35);

          *(_DWORD *)buf = 136446466;
          v39 = "nw_endpoint_copy_host_port_endpoint_for_url";
          __int16 v40 = 1024;
          *(_DWORD *)v41 = v24;
          _os_log_impl(&dword_1830D4000, v11, v22, "%{public}s incorrect endpoint type %u, backtrace limit exceeded", buf, 0x12u);
        }
      }
    }
    if (!v10)
    {
LABEL_12:
      BOOL host_with_numeric_port = 0;
      goto LABEL_13;
    }
    goto LABEL_10;
  }
  id v5 = (const char **)v3;
  BOOL host_with_numeric_port = nw_endpoint_create_host_with_numeric_port(v5[33], bswap32(*((unsigned __int16 *)v5 + 120)) >> 16);
  nw_endpoint_copy_properties(v5, (void *)host_with_numeric_port);

LABEL_13:
  return host_with_numeric_port;
}

void sub_183282818(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_protocol_disconnected_is_valid(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v2 = *(void *)(a1 + 24);
    if (v2) {
      LODWORD(v2) = *(void *)(v2 + 48) != 0;
    }
  }
  else
  {
    LODWORD(v2) = 0;
  }
  if (a2) {
    return v2;
  }
  else {
    return 0;
  }
}

void nw_protocol_socket_set_necp_attributes(uint64_t a1, NWConcrete_nw_parameters *a2, const char **a3)
{
  uint64_t v187 = *MEMORY[0x1E4F143B8];
  BOOL domain_for_policy = nw_endpoint_get_domain_for_policy(a3);
  id v7 = (const char *)domain_for_policy;
  if (domain_for_policy) {
    socklen_t v8 = strlen((const char *)domain_for_policy) + 6;
  }
  else {
    socklen_t v8 = 0;
  }
  account_id = (const char *)nw_parameters_get_account_id(a2);
  os_log_type_t v10 = account_id;
  if (account_id) {
    v8 += strlen(account_id) + 6;
  }
  if (a3)
  {
    BOOL v11 = a3[12];
    if (v11)
    {
      char v12 = 0;
      v8 += strlen(a3[12]) + 6;
      goto LABEL_11;
    }
  }
  else
  {
    BOOL v11 = 0;
  }
  char v12 = 1;
LABEL_11:
  attribution_context = (const char *)nw_parameters_get_attribution_context(a2);
  int v14 = attribution_context;
  if (attribution_context) {
    v8 += strlen(attribution_context) + 6;
  }
  if (a3)
  {
    char v15 = a3[11];
    if (v15)
    {
      char v173 = 0;
      int v16 = v8 + strlen(a3[11]);
      socklen_t v8 = v16 + 6;
      if (v16 == -6) {
        return;
      }
      goto LABEL_19;
    }
  }
  else
  {
    char v15 = 0;
  }
  char v173 = 1;
  if (!v8) {
    return;
  }
LABEL_19:
  v170 = a2;
  uint64_t v171 = a1;
  v167 = a3;
  unint64_t v17 = v8;
  os_log_type_t v18 = (void *)nw_calloc_type<unsigned char>(v8);
  v174 = v18;
  v175 = (char *)v18 + v8;
  BOOL v19 = (char *)v18;
  v172 = v15;
  if (!v7) {
    goto LABEL_42;
  }
  int v20 = strlen(v7);
  if (v18)
  {
    socklen_t v168 = v8;
    int v21 = v14;
    char v22 = v12;
    size_t v23 = (v20 + 1);
    if (v23 + 5 <= v17)
    {
      *(unsigned char *)os_log_type_t v18 = 7;
      *(_DWORD *)((char *)v18 + 1) = v23;
      if (v20 != -1) {
        memcpy((char *)v18 + 5, v7, v23);
      }
      BOOL v19 = (char *)v18 + v23 + 5;
      goto LABEL_41;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136447490;
    v179 = "nw_necp_append_tlv";
    __int16 v180 = 2048;
    *(void *)v181 = v18;
    *(_WORD *)&v181[8] = 2048;
    *(void *)v182 = v23 + 5;
    *(_WORD *)&v182[8] = 2048;
    *(void *)&v182[10] = v175;
    *(_WORD *)&v182[18] = 1024;
    *(_DWORD *)&v182[20] = 7;
    *(_WORD *)&v182[24] = 1024;
    *(_DWORD *)&v182[26] = v23;
    int v24 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v176 = 0;
    if (__nwlog_fault(v24, &type, &v176))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v25 = gLogObj;
        os_log_type_t v26 = type;
        if (os_log_type_enabled((os_log_t)gLogObj, type))
        {
          *(_DWORD *)buf = 136447490;
          v179 = "nw_necp_append_tlv";
          __int16 v180 = 2048;
          *(void *)v181 = v174;
          *(_WORD *)&v181[8] = 2048;
          *(void *)v182 = v23 + 5;
          *(_WORD *)&v182[8] = 2048;
          *(void *)&v182[10] = v175;
          *(_WORD *)&v182[18] = 1024;
          *(_DWORD *)&v182[20] = 7;
          *(_WORD *)&v182[24] = 1024;
          *(_DWORD *)&v182[26] = v23;
          BOOL v27 = "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u";
LABEL_36:
          os_log_type_t v32 = v25;
          os_log_type_t v33 = v26;
LABEL_37:
          _os_log_impl(&dword_1830D4000, v32, v33, v27, buf, 0x36u);
        }
      }
      else if (v176)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        char v29 = gLogObj;
        os_log_type_t v30 = type;
        BOOL v31 = os_log_type_enabled((os_log_t)gLogObj, type);
        if (backtrace_string)
        {
          if (v31)
          {
            *(_DWORD *)buf = 136447746;
            v179 = "nw_necp_append_tlv";
            __int16 v180 = 2048;
            *(void *)v181 = v174;
            *(_WORD *)&v181[8] = 2048;
            *(void *)v182 = v23 + 5;
            *(_WORD *)&v182[8] = 2048;
            *(void *)&v182[10] = v175;
            *(_WORD *)&v182[18] = 1024;
            *(_DWORD *)&v182[20] = 7;
            *(_WORD *)&v182[24] = 1024;
            *(_DWORD *)&v182[26] = v23;
            *(_WORD *)&v182[30] = 2082;
            *(void *)&v182[32] = backtrace_string;
            _os_log_impl(&dword_1830D4000, v29, v30, "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, dumping backtrace:%{public}s", buf, 0x40u);
          }
          free(backtrace_string);
          goto LABEL_38;
        }
        if (v31)
        {
          *(_DWORD *)buf = 136447490;
          v179 = "nw_necp_append_tlv";
          __int16 v180 = 2048;
          *(void *)v181 = v174;
          *(_WORD *)&v181[8] = 2048;
          *(void *)v182 = v23 + 5;
          *(_WORD *)&v182[8] = 2048;
          *(void *)&v182[10] = v175;
          *(_WORD *)&v182[18] = 1024;
          *(_DWORD *)&v182[20] = 7;
          *(_WORD *)&v182[24] = 1024;
          *(_DWORD *)&v182[26] = v23;
          BOOL v27 = "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, no backtrace";
          os_log_type_t v32 = v29;
          os_log_type_t v33 = v30;
          goto LABEL_37;
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v25 = gLogObj;
        os_log_type_t v26 = type;
        if (os_log_type_enabled((os_log_t)gLogObj, type))
        {
          *(_DWORD *)buf = 136447490;
          v179 = "nw_necp_append_tlv";
          __int16 v180 = 2048;
          *(void *)v181 = v174;
          *(_WORD *)&v181[8] = 2048;
          *(void *)v182 = v23 + 5;
          *(_WORD *)&v182[8] = 2048;
          *(void *)&v182[10] = v175;
          *(_WORD *)&v182[18] = 1024;
          *(_DWORD *)&v182[20] = 7;
          *(_WORD *)&v182[24] = 1024;
          *(_DWORD *)&v182[26] = v23;
          BOOL v27 = "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, backtrace limit exceeded";
          goto LABEL_36;
        }
      }
    }
LABEL_38:
    if (v24) {
      free(v24);
    }
    BOOL v19 = 0;
    os_log_type_t v18 = v174;
    char v15 = v172;
LABEL_41:
    char v12 = v22;
    int v14 = v21;
    socklen_t v8 = v168;
LABEL_42:
    if (v10) {
      goto LABEL_43;
    }
LABEL_114:
    char v36 = v175;
    if (v12) {
      goto LABEL_139;
    }
    goto LABEL_115;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v179 = "nw_necp_append_tlv";
  v48 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v176 = 0;
  if (__nwlog_fault(v48, &type, &v176))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v49 = __nwlog_obj();
      os_log_type_t v50 = type;
      if (!os_log_type_enabled(v49, type)) {
        goto LABEL_111;
      }
      *(_DWORD *)buf = 136446210;
      v179 = "nw_necp_append_tlv";
      v51 = "%{public}s called with null tlv_start";
LABEL_110:
      _os_log_impl(&dword_1830D4000, v49, v50, v51, buf, 0xCu);
      goto LABEL_111;
    }
    if (!v176)
    {
      v49 = __nwlog_obj();
      os_log_type_t v50 = type;
      if (!os_log_type_enabled(v49, type)) {
        goto LABEL_111;
      }
      *(_DWORD *)buf = 136446210;
      v179 = "nw_necp_append_tlv";
      v51 = "%{public}s called with null tlv_start, backtrace limit exceeded";
      goto LABEL_110;
    }
    v58 = (char *)__nw_create_backtrace_string();
    v49 = __nwlog_obj();
    os_log_type_t v50 = type;
    BOOL v59 = os_log_type_enabled(v49, type);
    if (!v58)
    {
      char v15 = v172;
      if (!v59) {
        goto LABEL_111;
      }
      *(_DWORD *)buf = 136446210;
      v179 = "nw_necp_append_tlv";
      v51 = "%{public}s called with null tlv_start, no backtrace";
      goto LABEL_110;
    }
    if (v59)
    {
      *(_DWORD *)buf = 136446466;
      v179 = "nw_necp_append_tlv";
      __int16 v180 = 2082;
      *(void *)v181 = v58;
      _os_log_impl(&dword_1830D4000, v49, v50, "%{public}s called with null tlv_start, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v58);
    char v15 = v172;
  }
LABEL_111:
  if (v48) {
    free(v48);
  }
  BOOL v19 = 0;
  os_log_type_t v18 = v174;
  if (!v10) {
    goto LABEL_114;
  }
LABEL_43:
  int v34 = strlen(v10);
  if (v19)
  {
    char v169 = v12;
    size_t v35 = (v34 + 1);
    char v36 = v175;
    if (v19 < v175)
    {
      if (v175 - v19 >= v35 + 5)
      {
        *BOOL v19 = 8;
        *(_DWORD *)(v19 + 1) = v35;
        if (v34 != -1) {
          memcpy(v19 + 5, v10, v35);
        }
        v19 += v35 + 5;
LABEL_67:
        char v15 = v172;
        if (v169) {
          goto LABEL_139;
        }
        goto LABEL_115;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      *(_DWORD *)buf = 136447490;
      v179 = "nw_necp_append_tlv";
      __int16 v180 = 2048;
      *(void *)v181 = v19;
      *(_WORD *)&v181[8] = 2048;
      *(void *)v182 = v35 + 5;
      *(_WORD *)&v182[8] = 2048;
      *(void *)&v182[10] = v175;
      *(_WORD *)&v182[18] = 1024;
      *(_DWORD *)&v182[20] = 8;
      *(_WORD *)&v182[24] = 1024;
      *(_DWORD *)&v182[26] = v35;
      v37 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v176 = 0;
      if (__nwlog_fault(v37, &type, &v176))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v38 = gLogObj;
          os_log_type_t v39 = type;
          if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
            goto LABEL_64;
          }
          *(_DWORD *)buf = 136447490;
          v179 = "nw_necp_append_tlv";
          __int16 v180 = 2048;
          *(void *)v181 = v19;
          *(_WORD *)&v181[8] = 2048;
          *(void *)v182 = v35 + 5;
          *(_WORD *)&v182[8] = 2048;
          *(void *)&v182[10] = v175;
          *(_WORD *)&v182[18] = 1024;
          *(_DWORD *)&v182[20] = 8;
          *(_WORD *)&v182[24] = 1024;
          *(_DWORD *)&v182[26] = v35;
          __int16 v40 = "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u";
LABEL_61:
          v45 = v38;
          os_log_type_t v46 = v39;
LABEL_62:
          uint32_t v47 = 54;
LABEL_63:
          _os_log_impl(&dword_1830D4000, v45, v46, v40, buf, v47);
          goto LABEL_64;
        }
        if (!v176)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v38 = gLogObj;
          os_log_type_t v39 = type;
          if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
            goto LABEL_64;
          }
          *(_DWORD *)buf = 136447490;
          v179 = "nw_necp_append_tlv";
          __int16 v180 = 2048;
          *(void *)v181 = v19;
          *(_WORD *)&v181[8] = 2048;
          *(void *)v182 = v35 + 5;
          *(_WORD *)&v182[8] = 2048;
          *(void *)&v182[10] = v175;
          *(_WORD *)&v182[18] = 1024;
          *(_DWORD *)&v182[20] = 8;
          *(_WORD *)&v182[24] = 1024;
          *(_DWORD *)&v182[26] = v35;
          __int16 v40 = "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, backtrace limit exceeded";
          goto LABEL_61;
        }
        v41 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v42 = gLogObj;
        os_log_type_t v43 = type;
        BOOL v44 = os_log_type_enabled((os_log_t)gLogObj, type);
        if (v41)
        {
          if (v44)
          {
            *(_DWORD *)buf = 136447746;
            v179 = "nw_necp_append_tlv";
            __int16 v180 = 2048;
            *(void *)v181 = v19;
            *(_WORD *)&v181[8] = 2048;
            *(void *)v182 = v35 + 5;
            *(_WORD *)&v182[8] = 2048;
            *(void *)&v182[10] = v175;
            *(_WORD *)&v182[18] = 1024;
            *(_DWORD *)&v182[20] = 8;
            *(_WORD *)&v182[24] = 1024;
            *(_DWORD *)&v182[26] = v35;
            *(_WORD *)&v182[30] = 2082;
            *(void *)&v182[32] = v41;
            _os_log_impl(&dword_1830D4000, v42, v43, "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, dumping backtrace:%{public}s", buf, 0x40u);
          }
          free(v41);
          if (!v37) {
            goto LABEL_66;
          }
          goto LABEL_65;
        }
        if (v44)
        {
          *(_DWORD *)buf = 136447490;
          v179 = "nw_necp_append_tlv";
          __int16 v180 = 2048;
          *(void *)v181 = v19;
          *(_WORD *)&v181[8] = 2048;
          *(void *)v182 = v35 + 5;
          *(_WORD *)&v182[8] = 2048;
          *(void *)&v182[10] = v175;
          *(_WORD *)&v182[18] = 1024;
          *(_DWORD *)&v182[20] = 8;
          *(_WORD *)&v182[24] = 1024;
          *(_DWORD *)&v182[26] = v35;
          __int16 v40 = "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, no backtrace";
          v45 = v42;
          os_log_type_t v46 = v43;
          goto LABEL_62;
        }
      }
LABEL_64:
      if (!v37)
      {
LABEL_66:
        BOOL v19 = 0;
        os_log_type_t v18 = v174;
        char v36 = v175;
        goto LABEL_67;
      }
LABEL_65:
      free(v37);
      goto LABEL_66;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136447234;
    v179 = "nw_necp_append_tlv";
    __int16 v180 = 2048;
    *(void *)v181 = v19;
    *(_WORD *)&v181[8] = 2048;
    *(void *)v182 = v175;
    *(_WORD *)&v182[8] = 1024;
    *(_DWORD *)&v182[10] = 8;
    *(_WORD *)&v182[14] = 1024;
    *(_DWORD *)&v182[16] = v35;
    v37 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v176 = 0;
    if (!__nwlog_fault(v37, &type, &v176)) {
      goto LABEL_64;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      v56 = __nwlog_obj();
      os_log_type_t v57 = type;
      if (!os_log_type_enabled(v56, type)) {
        goto LABEL_64;
      }
      *(_DWORD *)buf = 136447234;
      v179 = "nw_necp_append_tlv";
      __int16 v180 = 2048;
      *(void *)v181 = v19;
      *(_WORD *)&v181[8] = 2048;
      *(void *)v182 = v175;
      *(_WORD *)&v182[8] = 1024;
      *(_DWORD *)&v182[10] = 8;
      *(_WORD *)&v182[14] = 1024;
      *(_DWORD *)&v182[16] = v35;
      __int16 v40 = "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u";
    }
    else
    {
      if (v176)
      {
        v62 = (char *)__nw_create_backtrace_string();
        v63 = __nwlog_obj();
        os_log_type_t v64 = type;
        BOOL v65 = os_log_type_enabled(v63, type);
        if (v62)
        {
          if (v65)
          {
            *(_DWORD *)buf = 136447490;
            v179 = "nw_necp_append_tlv";
            __int16 v180 = 2048;
            *(void *)v181 = v19;
            *(_WORD *)&v181[8] = 2048;
            *(void *)v182 = v175;
            *(_WORD *)&v182[8] = 1024;
            *(_DWORD *)&v182[10] = 8;
            *(_WORD *)&v182[14] = 1024;
            *(_DWORD *)&v182[16] = v35;
            *(_WORD *)&v182[20] = 2082;
            *(void *)&v182[22] = v62;
            _os_log_impl(&dword_1830D4000, v63, v64, "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, dumping backtrace:%{public}s", buf, 0x36u);
          }
          free(v62);
          goto LABEL_64;
        }
        if (!v65) {
          goto LABEL_64;
        }
        *(_DWORD *)buf = 136447234;
        v179 = "nw_necp_append_tlv";
        __int16 v180 = 2048;
        *(void *)v181 = v19;
        *(_WORD *)&v181[8] = 2048;
        *(void *)v182 = v175;
        *(_WORD *)&v182[8] = 1024;
        *(_DWORD *)&v182[10] = 8;
        *(_WORD *)&v182[14] = 1024;
        *(_DWORD *)&v182[16] = v35;
        __int16 v40 = "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, no backtrace";
        v45 = v63;
        os_log_type_t v46 = v64;
LABEL_107:
        uint32_t v47 = 44;
        goto LABEL_63;
      }
      v56 = __nwlog_obj();
      os_log_type_t v57 = type;
      if (!os_log_type_enabled(v56, type)) {
        goto LABEL_64;
      }
      *(_DWORD *)buf = 136447234;
      v179 = "nw_necp_append_tlv";
      __int16 v180 = 2048;
      *(void *)v181 = v19;
      *(_WORD *)&v181[8] = 2048;
      *(void *)v182 = v175;
      *(_WORD *)&v182[8] = 1024;
      *(_DWORD *)&v182[10] = 8;
      *(_WORD *)&v182[14] = 1024;
      *(_DWORD *)&v182[16] = v35;
      __int16 v40 = "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, backtrace limit exceeded";
    }
    v45 = v56;
    os_log_type_t v46 = v57;
    goto LABEL_107;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v179 = "nw_necp_append_tlv";
  v52 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v176 = 0;
  if (__nwlog_fault(v52, &type, &v176))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v53 = __nwlog_obj();
      os_log_type_t v54 = type;
      if (!os_log_type_enabled(v53, type)) {
        goto LABEL_307;
      }
      *(_DWORD *)buf = 136446210;
      v179 = "nw_necp_append_tlv";
      v55 = "%{public}s called with null tlv_start";
LABEL_306:
      _os_log_impl(&dword_1830D4000, v53, v54, v55, buf, 0xCu);
      goto LABEL_307;
    }
    if (!v176)
    {
      v53 = __nwlog_obj();
      os_log_type_t v54 = type;
      char v15 = v172;
      if (!os_log_type_enabled(v53, type)) {
        goto LABEL_307;
      }
      *(_DWORD *)buf = 136446210;
      v179 = "nw_necp_append_tlv";
      v55 = "%{public}s called with null tlv_start, backtrace limit exceeded";
      goto LABEL_306;
    }
    v60 = (char *)__nw_create_backtrace_string();
    v53 = __nwlog_obj();
    os_log_type_t v54 = type;
    BOOL v61 = os_log_type_enabled(v53, type);
    if (!v60)
    {
      char v15 = v172;
      if (!v61) {
        goto LABEL_307;
      }
      *(_DWORD *)buf = 136446210;
      v179 = "nw_necp_append_tlv";
      v55 = "%{public}s called with null tlv_start, no backtrace";
      goto LABEL_306;
    }
    if (v61)
    {
      *(_DWORD *)buf = 136446466;
      v179 = "nw_necp_append_tlv";
      __int16 v180 = 2082;
      *(void *)v181 = v60;
      _os_log_impl(&dword_1830D4000, v53, v54, "%{public}s called with null tlv_start, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v60);
    char v15 = v172;
  }
LABEL_307:
  if (v52) {
    free(v52);
  }
  BOOL v19 = 0;
  os_log_type_t v18 = v174;
  char v36 = v175;
  if (v12) {
    goto LABEL_139;
  }
LABEL_115:
  int v66 = strlen(v11);
  if (!v19)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v179 = "nw_necp_append_tlv";
    v134 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v176 = 0;
    if (__nwlog_fault(v134, &type, &v176))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v135 = __nwlog_obj();
        os_log_type_t v136 = type;
        if (os_log_type_enabled(v135, type))
        {
          *(_DWORD *)buf = 136446210;
          v179 = "nw_necp_append_tlv";
          v137 = "%{public}s called with null tlv_start";
LABEL_324:
          _os_log_impl(&dword_1830D4000, v135, v136, v137, buf, 0xCu);
        }
      }
      else if (v176)
      {
        v152 = (char *)__nw_create_backtrace_string();
        v135 = __nwlog_obj();
        os_log_type_t v136 = type;
        BOOL v153 = os_log_type_enabled(v135, type);
        if (v152)
        {
          if (v153)
          {
            *(_DWORD *)buf = 136446466;
            v179 = "nw_necp_append_tlv";
            __int16 v180 = 2082;
            *(void *)v181 = v152;
            _os_log_impl(&dword_1830D4000, v135, v136, "%{public}s called with null tlv_start, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v152);
          char v15 = v172;
          goto LABEL_325;
        }
        char v15 = v172;
        if (v153)
        {
          *(_DWORD *)buf = 136446210;
          v179 = "nw_necp_append_tlv";
          v137 = "%{public}s called with null tlv_start, no backtrace";
          goto LABEL_324;
        }
      }
      else
      {
        v135 = __nwlog_obj();
        os_log_type_t v136 = type;
        char v15 = v172;
        if (os_log_type_enabled(v135, type))
        {
          *(_DWORD *)buf = 136446210;
          v179 = "nw_necp_append_tlv";
          v137 = "%{public}s called with null tlv_start, backtrace limit exceeded";
          goto LABEL_324;
        }
      }
    }
LABEL_325:
    if (v134) {
      free(v134);
    }
    BOOL v19 = 0;
    os_log_type_t v18 = v174;
    char v36 = v175;
    goto LABEL_139;
  }
  size_t v67 = (v66 + 1);
  if (v19 >= v36)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136447234;
    v179 = "nw_necp_append_tlv";
    __int16 v180 = 2048;
    *(void *)v181 = v19;
    *(_WORD *)&v181[8] = 2048;
    *(void *)v182 = v36;
    *(_WORD *)&v182[8] = 1024;
    *(_DWORD *)&v182[10] = 11;
    *(_WORD *)&v182[14] = 1024;
    *(_DWORD *)&v182[16] = v67;
    v68 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v176 = 0;
    if (!__nwlog_fault(v68, &type, &v176)) {
      goto LABEL_136;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      v142 = __nwlog_obj();
      os_log_type_t v143 = type;
      if (!os_log_type_enabled(v142, type)) {
        goto LABEL_136;
      }
      *(_DWORD *)buf = 136447234;
      v179 = "nw_necp_append_tlv";
      __int16 v180 = 2048;
      *(void *)v181 = v19;
      *(_WORD *)&v181[8] = 2048;
      *(void *)v182 = v175;
      *(_WORD *)&v182[8] = 1024;
      *(_DWORD *)&v182[10] = 11;
      *(_WORD *)&v182[14] = 1024;
      *(_DWORD *)&v182[16] = v67;
      v71 = "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u";
    }
    else
    {
      if (v176)
      {
        v156 = (char *)__nw_create_backtrace_string();
        v157 = __nwlog_obj();
        os_log_type_t v158 = type;
        BOOL v159 = os_log_type_enabled(v157, type);
        if (v156)
        {
          if (v159)
          {
            *(_DWORD *)buf = 136447490;
            v179 = "nw_necp_append_tlv";
            __int16 v180 = 2048;
            *(void *)v181 = v19;
            *(_WORD *)&v181[8] = 2048;
            *(void *)v182 = v175;
            *(_WORD *)&v182[8] = 1024;
            *(_DWORD *)&v182[10] = 11;
            *(_WORD *)&v182[14] = 1024;
            *(_DWORD *)&v182[16] = v67;
            *(_WORD *)&v182[20] = 2082;
            *(void *)&v182[22] = v156;
            _os_log_impl(&dword_1830D4000, v157, v158, "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, dumping backtrace:%{public}s", buf, 0x36u);
          }
          free(v156);
          goto LABEL_136;
        }
        if (!v159) {
          goto LABEL_136;
        }
        *(_DWORD *)buf = 136447234;
        v179 = "nw_necp_append_tlv";
        __int16 v180 = 2048;
        *(void *)v181 = v19;
        *(_WORD *)&v181[8] = 2048;
        *(void *)v182 = v175;
        *(_WORD *)&v182[8] = 1024;
        *(_DWORD *)&v182[10] = 11;
        *(_WORD *)&v182[14] = 1024;
        *(_DWORD *)&v182[16] = v67;
        v71 = "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, no backtrace";
        v76 = v157;
        os_log_type_t v77 = v158;
LABEL_299:
        uint32_t v78 = 44;
        goto LABEL_135;
      }
      v142 = __nwlog_obj();
      os_log_type_t v143 = type;
      if (!os_log_type_enabled(v142, type)) {
        goto LABEL_136;
      }
      *(_DWORD *)buf = 136447234;
      v179 = "nw_necp_append_tlv";
      __int16 v180 = 2048;
      *(void *)v181 = v19;
      *(_WORD *)&v181[8] = 2048;
      *(void *)v182 = v175;
      *(_WORD *)&v182[8] = 1024;
      *(_DWORD *)&v182[10] = 11;
      *(_WORD *)&v182[14] = 1024;
      *(_DWORD *)&v182[16] = v67;
      v71 = "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, backtrace limit exceeded";
    }
    v76 = v142;
    os_log_type_t v77 = v143;
    goto LABEL_299;
  }
  if (v36 - v19 < v67 + 5)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136447490;
    v179 = "nw_necp_append_tlv";
    __int16 v180 = 2048;
    *(void *)v181 = v19;
    *(_WORD *)&v181[8] = 2048;
    *(void *)v182 = v67 + 5;
    *(_WORD *)&v182[8] = 2048;
    *(void *)&v182[10] = v36;
    *(_WORD *)&v182[18] = 1024;
    *(_DWORD *)&v182[20] = 11;
    *(_WORD *)&v182[24] = 1024;
    *(_DWORD *)&v182[26] = v67;
    v68 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v176 = 0;
    if (!__nwlog_fault(v68, &type, &v176)) {
      goto LABEL_136;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v69 = gLogObj;
      os_log_type_t v70 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_136;
      }
      *(_DWORD *)buf = 136447490;
      v179 = "nw_necp_append_tlv";
      __int16 v180 = 2048;
      *(void *)v181 = v19;
      *(_WORD *)&v181[8] = 2048;
      *(void *)v182 = v67 + 5;
      *(_WORD *)&v182[8] = 2048;
      *(void *)&v182[10] = v175;
      *(_WORD *)&v182[18] = 1024;
      *(_DWORD *)&v182[20] = 11;
      *(_WORD *)&v182[24] = 1024;
      *(_DWORD *)&v182[26] = v67;
      v71 = "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u";
LABEL_133:
      v76 = v69;
      os_log_type_t v77 = v70;
LABEL_134:
      uint32_t v78 = 54;
LABEL_135:
      _os_log_impl(&dword_1830D4000, v76, v77, v71, buf, v78);
      goto LABEL_136;
    }
    if (!v176)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v69 = gLogObj;
      os_log_type_t v70 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_136;
      }
      *(_DWORD *)buf = 136447490;
      v179 = "nw_necp_append_tlv";
      __int16 v180 = 2048;
      *(void *)v181 = v19;
      *(_WORD *)&v181[8] = 2048;
      *(void *)v182 = v67 + 5;
      *(_WORD *)&v182[8] = 2048;
      *(void *)&v182[10] = v175;
      *(_WORD *)&v182[18] = 1024;
      *(_DWORD *)&v182[20] = 11;
      *(_WORD *)&v182[24] = 1024;
      *(_DWORD *)&v182[26] = v67;
      v71 = "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, backtrace limit exceeded";
      goto LABEL_133;
    }
    v72 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v73 = gLogObj;
    os_log_type_t v74 = type;
    BOOL v75 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (v72)
    {
      if (v75)
      {
        *(_DWORD *)buf = 136447746;
        v179 = "nw_necp_append_tlv";
        __int16 v180 = 2048;
        *(void *)v181 = v19;
        *(_WORD *)&v181[8] = 2048;
        *(void *)v182 = v67 + 5;
        *(_WORD *)&v182[8] = 2048;
        *(void *)&v182[10] = v175;
        *(_WORD *)&v182[18] = 1024;
        *(_DWORD *)&v182[20] = 11;
        *(_WORD *)&v182[24] = 1024;
        *(_DWORD *)&v182[26] = v67;
        *(_WORD *)&v182[30] = 2082;
        *(void *)&v182[32] = v72;
        _os_log_impl(&dword_1830D4000, v73, v74, "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, dumping backtrace:%{public}s", buf, 0x40u);
      }
      free(v72);
      if (!v68) {
        goto LABEL_138;
      }
      goto LABEL_137;
    }
    if (v75)
    {
      *(_DWORD *)buf = 136447490;
      v179 = "nw_necp_append_tlv";
      __int16 v180 = 2048;
      *(void *)v181 = v19;
      *(_WORD *)&v181[8] = 2048;
      *(void *)v182 = v67 + 5;
      *(_WORD *)&v182[8] = 2048;
      *(void *)&v182[10] = v175;
      *(_WORD *)&v182[18] = 1024;
      *(_DWORD *)&v182[20] = 11;
      *(_WORD *)&v182[24] = 1024;
      *(_DWORD *)&v182[26] = v67;
      v71 = "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, no backtrace";
      v76 = v73;
      os_log_type_t v77 = v74;
      goto LABEL_134;
    }
LABEL_136:
    if (!v68)
    {
LABEL_138:
      BOOL v19 = 0;
      os_log_type_t v18 = v174;
      char v36 = v175;
      char v15 = v172;
      goto LABEL_139;
    }
LABEL_137:
    free(v68);
    goto LABEL_138;
  }
  *BOOL v19 = 11;
  *(_DWORD *)(v19 + 1) = v67;
  if (v66 != -1) {
    memcpy(v19 + 5, v11, v67);
  }
  v19 += v67 + 5;
LABEL_139:
  if (!v14) {
    goto LABEL_165;
  }
  int v79 = strlen(v14);
  if (!v19)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v179 = "nw_necp_append_tlv";
    v128 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v176 = 0;
    if (!__nwlog_fault(v128, &type, &v176)) {
      goto LABEL_316;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      v129 = __nwlog_obj();
      os_log_type_t v130 = type;
      if (!os_log_type_enabled(v129, type)) {
        goto LABEL_316;
      }
      *(_DWORD *)buf = 136446210;
      v179 = "nw_necp_append_tlv";
      v131 = "%{public}s called with null tlv_start";
    }
    else if (v176)
    {
      v146 = (char *)__nw_create_backtrace_string();
      v129 = __nwlog_obj();
      os_log_type_t v130 = type;
      BOOL v147 = os_log_type_enabled(v129, type);
      if (v146)
      {
        if (v147)
        {
          *(_DWORD *)buf = 136446466;
          v179 = "nw_necp_append_tlv";
          __int16 v180 = 2082;
          *(void *)v181 = v146;
          _os_log_impl(&dword_1830D4000, v129, v130, "%{public}s called with null tlv_start, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v146);
        char v15 = v172;
LABEL_316:
        if (v128) {
          free(v128);
        }
        BOOL v19 = 0;
        os_log_type_t v18 = v174;
        char v36 = v175;
        if (v173) {
          goto LABEL_186;
        }
        goto LABEL_166;
      }
      char v15 = v172;
      if (!v147) {
        goto LABEL_316;
      }
      *(_DWORD *)buf = 136446210;
      v179 = "nw_necp_append_tlv";
      v131 = "%{public}s called with null tlv_start, no backtrace";
    }
    else
    {
      v129 = __nwlog_obj();
      os_log_type_t v130 = type;
      char v15 = v172;
      if (!os_log_type_enabled(v129, type)) {
        goto LABEL_316;
      }
      *(_DWORD *)buf = 136446210;
      v179 = "nw_necp_append_tlv";
      v131 = "%{public}s called with null tlv_start, backtrace limit exceeded";
    }
    _os_log_impl(&dword_1830D4000, v129, v130, v131, buf, 0xCu);
    goto LABEL_316;
  }
  size_t v80 = (v79 + 1);
  if (v19 >= v36)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136447234;
    v179 = "nw_necp_append_tlv";
    __int16 v180 = 2048;
    *(void *)v181 = v19;
    *(_WORD *)&v181[8] = 2048;
    *(void *)v182 = v36;
    *(_WORD *)&v182[8] = 1024;
    *(_DWORD *)&v182[10] = 13;
    *(_WORD *)&v182[14] = 1024;
    *(_DWORD *)&v182[16] = v80;
    v81 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v176 = 0;
    if (!__nwlog_fault(v81, &type, &v176)) {
      goto LABEL_162;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      v132 = __nwlog_obj();
      os_log_type_t v133 = type;
      if (!os_log_type_enabled(v132, type)) {
        goto LABEL_162;
      }
      *(_DWORD *)buf = 136447234;
      v179 = "nw_necp_append_tlv";
      __int16 v180 = 2048;
      *(void *)v181 = v19;
      *(_WORD *)&v181[8] = 2048;
      *(void *)v182 = v175;
      *(_WORD *)&v182[8] = 1024;
      *(_DWORD *)&v182[10] = 13;
      *(_WORD *)&v182[14] = 1024;
      *(_DWORD *)&v182[16] = v80;
      v84 = "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u";
    }
    else
    {
      if (v176)
      {
        v148 = (char *)__nw_create_backtrace_string();
        v149 = __nwlog_obj();
        os_log_type_t v150 = type;
        BOOL v151 = os_log_type_enabled(v149, type);
        if (v148)
        {
          if (v151)
          {
            *(_DWORD *)buf = 136447490;
            v179 = "nw_necp_append_tlv";
            __int16 v180 = 2048;
            *(void *)v181 = v19;
            *(_WORD *)&v181[8] = 2048;
            *(void *)v182 = v175;
            *(_WORD *)&v182[8] = 1024;
            *(_DWORD *)&v182[10] = 13;
            *(_WORD *)&v182[14] = 1024;
            *(_DWORD *)&v182[16] = v80;
            *(_WORD *)&v182[20] = 2082;
            *(void *)&v182[22] = v148;
            _os_log_impl(&dword_1830D4000, v149, v150, "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, dumping backtrace:%{public}s", buf, 0x36u);
          }
          free(v148);
          goto LABEL_162;
        }
        if (!v151) {
          goto LABEL_162;
        }
        *(_DWORD *)buf = 136447234;
        v179 = "nw_necp_append_tlv";
        __int16 v180 = 2048;
        *(void *)v181 = v19;
        *(_WORD *)&v181[8] = 2048;
        *(void *)v182 = v175;
        *(_WORD *)&v182[8] = 1024;
        *(_DWORD *)&v182[10] = 13;
        *(_WORD *)&v182[14] = 1024;
        *(_DWORD *)&v182[16] = v80;
        v84 = "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, no backtrace";
        v89 = v149;
        os_log_type_t v90 = v150;
LABEL_291:
        uint32_t v91 = 44;
        goto LABEL_161;
      }
      v132 = __nwlog_obj();
      os_log_type_t v133 = type;
      if (!os_log_type_enabled(v132, type)) {
        goto LABEL_162;
      }
      *(_DWORD *)buf = 136447234;
      v179 = "nw_necp_append_tlv";
      __int16 v180 = 2048;
      *(void *)v181 = v19;
      *(_WORD *)&v181[8] = 2048;
      *(void *)v182 = v175;
      *(_WORD *)&v182[8] = 1024;
      *(_DWORD *)&v182[10] = 13;
      *(_WORD *)&v182[14] = 1024;
      *(_DWORD *)&v182[16] = v80;
      v84 = "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, backtrace limit exceeded";
    }
    v89 = v132;
    os_log_type_t v90 = v133;
    goto LABEL_291;
  }
  if (v36 - v19 < v80 + 5)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136447490;
    v179 = "nw_necp_append_tlv";
    __int16 v180 = 2048;
    *(void *)v181 = v19;
    *(_WORD *)&v181[8] = 2048;
    *(void *)v182 = v80 + 5;
    *(_WORD *)&v182[8] = 2048;
    *(void *)&v182[10] = v36;
    *(_WORD *)&v182[18] = 1024;
    *(_DWORD *)&v182[20] = 13;
    *(_WORD *)&v182[24] = 1024;
    *(_DWORD *)&v182[26] = v80;
    v81 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v176 = 0;
    if (!__nwlog_fault(v81, &type, &v176)) {
      goto LABEL_162;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v82 = gLogObj;
      os_log_type_t v83 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_162;
      }
      *(_DWORD *)buf = 136447490;
      v179 = "nw_necp_append_tlv";
      __int16 v180 = 2048;
      *(void *)v181 = v19;
      *(_WORD *)&v181[8] = 2048;
      *(void *)v182 = v80 + 5;
      *(_WORD *)&v182[8] = 2048;
      *(void *)&v182[10] = v175;
      *(_WORD *)&v182[18] = 1024;
      *(_DWORD *)&v182[20] = 13;
      *(_WORD *)&v182[24] = 1024;
      *(_DWORD *)&v182[26] = v80;
      v84 = "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u";
LABEL_159:
      v89 = v82;
      os_log_type_t v90 = v83;
LABEL_160:
      uint32_t v91 = 54;
LABEL_161:
      _os_log_impl(&dword_1830D4000, v89, v90, v84, buf, v91);
      goto LABEL_162;
    }
    if (!v176)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v82 = gLogObj;
      os_log_type_t v83 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_162;
      }
      *(_DWORD *)buf = 136447490;
      v179 = "nw_necp_append_tlv";
      __int16 v180 = 2048;
      *(void *)v181 = v19;
      *(_WORD *)&v181[8] = 2048;
      *(void *)v182 = v80 + 5;
      *(_WORD *)&v182[8] = 2048;
      *(void *)&v182[10] = v175;
      *(_WORD *)&v182[18] = 1024;
      *(_DWORD *)&v182[20] = 13;
      *(_WORD *)&v182[24] = 1024;
      *(_DWORD *)&v182[26] = v80;
      v84 = "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, backtrace limit exceeded";
      goto LABEL_159;
    }
    v85 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v86 = gLogObj;
    os_log_type_t v87 = type;
    BOOL v88 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (v85)
    {
      if (v88)
      {
        *(_DWORD *)buf = 136447746;
        v179 = "nw_necp_append_tlv";
        __int16 v180 = 2048;
        *(void *)v181 = v19;
        *(_WORD *)&v181[8] = 2048;
        *(void *)v182 = v80 + 5;
        *(_WORD *)&v182[8] = 2048;
        *(void *)&v182[10] = v175;
        *(_WORD *)&v182[18] = 1024;
        *(_DWORD *)&v182[20] = 13;
        *(_WORD *)&v182[24] = 1024;
        *(_DWORD *)&v182[26] = v80;
        *(_WORD *)&v182[30] = 2082;
        *(void *)&v182[32] = v85;
        _os_log_impl(&dword_1830D4000, v86, v87, "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, dumping backtrace:%{public}s", buf, 0x40u);
      }
      free(v85);
      if (!v81) {
        goto LABEL_164;
      }
      goto LABEL_163;
    }
    if (v88)
    {
      *(_DWORD *)buf = 136447490;
      v179 = "nw_necp_append_tlv";
      __int16 v180 = 2048;
      *(void *)v181 = v19;
      *(_WORD *)&v181[8] = 2048;
      *(void *)v182 = v80 + 5;
      *(_WORD *)&v182[8] = 2048;
      *(void *)&v182[10] = v175;
      *(_WORD *)&v182[18] = 1024;
      *(_DWORD *)&v182[20] = 13;
      *(_WORD *)&v182[24] = 1024;
      *(_DWORD *)&v182[26] = v80;
      v84 = "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, no backtrace";
      v89 = v86;
      os_log_type_t v90 = v87;
      goto LABEL_160;
    }
LABEL_162:
    if (!v81)
    {
LABEL_164:
      BOOL v19 = 0;
      os_log_type_t v18 = v174;
      char v36 = v175;
      char v15 = v172;
LABEL_165:
      if (v173) {
        goto LABEL_186;
      }
      goto LABEL_166;
    }
LABEL_163:
    free(v81);
    goto LABEL_164;
  }
  *BOOL v19 = 13;
  *(_DWORD *)(v19 + 1) = v80;
  if (v79 != -1) {
    memcpy(v19 + 5, v14, v80);
  }
  v19 += v80 + 5;
  if (v173) {
    goto LABEL_186;
  }
LABEL_166:
  int v92 = strlen(v15);
  if (!v19)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v179 = "nw_necp_append_tlv";
    v138 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v176 = 0;
    if (!__nwlog_fault(v138, &type, &v176)) {
      goto LABEL_332;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      v139 = __nwlog_obj();
      os_log_type_t v140 = type;
      if (!os_log_type_enabled(v139, type)) {
        goto LABEL_332;
      }
      *(_DWORD *)buf = 136446210;
      v179 = "nw_necp_append_tlv";
      v141 = "%{public}s called with null tlv_start";
    }
    else if (v176)
    {
      v154 = (char *)__nw_create_backtrace_string();
      v139 = __nwlog_obj();
      os_log_type_t v140 = type;
      BOOL v155 = os_log_type_enabled(v139, type);
      if (v154)
      {
        if (v155)
        {
          *(_DWORD *)buf = 136446466;
          v179 = "nw_necp_append_tlv";
          __int16 v180 = 2082;
          *(void *)v181 = v154;
          _os_log_impl(&dword_1830D4000, v139, v140, "%{public}s called with null tlv_start, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v154);
        goto LABEL_332;
      }
      if (!v155) {
        goto LABEL_332;
      }
      *(_DWORD *)buf = 136446210;
      v179 = "nw_necp_append_tlv";
      v141 = "%{public}s called with null tlv_start, no backtrace";
    }
    else
    {
      v139 = __nwlog_obj();
      os_log_type_t v140 = type;
      if (!os_log_type_enabled(v139, type)) {
        goto LABEL_332;
      }
      *(_DWORD *)buf = 136446210;
      v179 = "nw_necp_append_tlv";
      v141 = "%{public}s called with null tlv_start, backtrace limit exceeded";
    }
    v164 = v139;
    os_log_type_t v165 = v140;
    uint32_t v166 = 12;
    goto LABEL_331;
  }
  size_t v93 = (v92 + 1);
  if (v19 >= v36)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136447234;
    v179 = "nw_necp_append_tlv";
    __int16 v180 = 2048;
    *(void *)v181 = v19;
    *(_WORD *)&v181[8] = 2048;
    *(void *)v182 = v36;
    *(_WORD *)&v182[8] = 1024;
    *(_DWORD *)&v182[10] = 12;
    *(_WORD *)&v182[14] = 1024;
    *(_DWORD *)&v182[16] = v93;
    v138 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v176 = 0;
    if (__nwlog_fault(v138, &type, &v176))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v144 = __nwlog_obj();
        os_log_type_t v145 = type;
        if (os_log_type_enabled(v144, type))
        {
          *(_DWORD *)buf = 136447234;
          v179 = "nw_necp_append_tlv";
          __int16 v180 = 2048;
          *(void *)v181 = v19;
          *(_WORD *)&v181[8] = 2048;
          *(void *)v182 = v175;
          *(_WORD *)&v182[8] = 1024;
          *(_DWORD *)&v182[10] = 12;
          *(_WORD *)&v182[14] = 1024;
          *(_DWORD *)&v182[16] = v93;
          v141 = "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u";
LABEL_302:
          v164 = v144;
          os_log_type_t v165 = v145;
LABEL_303:
          uint32_t v166 = 44;
LABEL_331:
          _os_log_impl(&dword_1830D4000, v164, v165, v141, buf, v166);
        }
      }
      else if (v176)
      {
        v160 = (char *)__nw_create_backtrace_string();
        v161 = __nwlog_obj();
        os_log_type_t v162 = type;
        BOOL v163 = os_log_type_enabled(v161, type);
        if (v160)
        {
          if (v163)
          {
            *(_DWORD *)buf = 136447490;
            v179 = "nw_necp_append_tlv";
            __int16 v180 = 2048;
            *(void *)v181 = v19;
            *(_WORD *)&v181[8] = 2048;
            *(void *)v182 = v175;
            *(_WORD *)&v182[8] = 1024;
            *(_DWORD *)&v182[10] = 12;
            *(_WORD *)&v182[14] = 1024;
            *(_DWORD *)&v182[16] = v93;
            *(_WORD *)&v182[20] = 2082;
            *(void *)&v182[22] = v160;
            _os_log_impl(&dword_1830D4000, v161, v162, "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, dumping backtrace:%{public}s", buf, 0x36u);
          }
          free(v160);
          goto LABEL_332;
        }
        if (v163)
        {
          *(_DWORD *)buf = 136447234;
          v179 = "nw_necp_append_tlv";
          __int16 v180 = 2048;
          *(void *)v181 = v19;
          *(_WORD *)&v181[8] = 2048;
          *(void *)v182 = v175;
          *(_WORD *)&v182[8] = 1024;
          *(_DWORD *)&v182[10] = 12;
          *(_WORD *)&v182[14] = 1024;
          *(_DWORD *)&v182[16] = v93;
          v141 = "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, no backtrace";
          v164 = v161;
          os_log_type_t v165 = v162;
          goto LABEL_303;
        }
      }
      else
      {
        v144 = __nwlog_obj();
        os_log_type_t v145 = type;
        if (os_log_type_enabled(v144, type))
        {
          *(_DWORD *)buf = 136447234;
          v179 = "nw_necp_append_tlv";
          __int16 v180 = 2048;
          *(void *)v181 = v19;
          *(_WORD *)&v181[8] = 2048;
          *(void *)v182 = v175;
          *(_WORD *)&v182[8] = 1024;
          *(_DWORD *)&v182[10] = 12;
          *(_WORD *)&v182[14] = 1024;
          *(_DWORD *)&v182[16] = v93;
          v141 = "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, backtrace limit exceeded";
          goto LABEL_302;
        }
      }
    }
LABEL_332:
    if (v138) {
      free(v138);
    }
    os_log_type_t v18 = v174;
    goto LABEL_186;
  }
  if (v36 - v19 < v93 + 5)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136447490;
    v179 = "nw_necp_append_tlv";
    __int16 v180 = 2048;
    *(void *)v181 = v19;
    *(_WORD *)&v181[8] = 2048;
    *(void *)v182 = v93 + 5;
    *(_WORD *)&v182[8] = 2048;
    *(void *)&v182[10] = v36;
    *(_WORD *)&v182[18] = 1024;
    *(_DWORD *)&v182[20] = 12;
    *(_WORD *)&v182[24] = 1024;
    *(_DWORD *)&v182[26] = v93;
    v94 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v176 = 0;
    if (!__nwlog_fault(v94, &type, &v176)) {
      goto LABEL_184;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v95 = gLogObj;
      os_log_type_t v96 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_184;
      }
      *(_DWORD *)buf = 136447490;
      v179 = "nw_necp_append_tlv";
      __int16 v180 = 2048;
      *(void *)v181 = v19;
      *(_WORD *)&v181[8] = 2048;
      *(void *)v182 = v93 + 5;
      *(_WORD *)&v182[8] = 2048;
      *(void *)&v182[10] = v175;
      *(_WORD *)&v182[18] = 1024;
      *(_DWORD *)&v182[20] = 12;
      *(_WORD *)&v182[24] = 1024;
      *(_DWORD *)&v182[26] = v93;
      v97 = "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u";
    }
    else
    {
      if (v176)
      {
        v98 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v99 = gLogObj;
        os_log_type_t v100 = type;
        BOOL v101 = os_log_type_enabled((os_log_t)gLogObj, type);
        if (v98)
        {
          if (v101)
          {
            *(_DWORD *)buf = 136447746;
            v179 = "nw_necp_append_tlv";
            __int16 v180 = 2048;
            *(void *)v181 = v19;
            *(_WORD *)&v181[8] = 2048;
            *(void *)v182 = v93 + 5;
            *(_WORD *)&v182[8] = 2048;
            *(void *)&v182[10] = v175;
            *(_WORD *)&v182[18] = 1024;
            *(_DWORD *)&v182[20] = 12;
            *(_WORD *)&v182[24] = 1024;
            *(_DWORD *)&v182[26] = v93;
            *(_WORD *)&v182[30] = 2082;
            *(void *)&v182[32] = v98;
            _os_log_impl(&dword_1830D4000, v99, v100, "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, dumping backtrace:%{public}s", buf, 0x40u);
          }
          free(v98);
          goto LABEL_184;
        }
        if (!v101)
        {
LABEL_184:
          os_log_type_t v18 = v174;
          if (v94) {
            free(v94);
          }
          goto LABEL_186;
        }
        *(_DWORD *)buf = 136447490;
        v179 = "nw_necp_append_tlv";
        __int16 v180 = 2048;
        *(void *)v181 = v19;
        *(_WORD *)&v181[8] = 2048;
        *(void *)v182 = v93 + 5;
        *(_WORD *)&v182[8] = 2048;
        *(void *)&v182[10] = v175;
        *(_WORD *)&v182[18] = 1024;
        *(_DWORD *)&v182[20] = 12;
        *(_WORD *)&v182[24] = 1024;
        *(_DWORD *)&v182[26] = v93;
        v97 = "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, no backtrace";
        v102 = v99;
        os_log_type_t v103 = v100;
LABEL_183:
        _os_log_impl(&dword_1830D4000, v102, v103, v97, buf, 0x36u);
        goto LABEL_184;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v95 = gLogObj;
      os_log_type_t v96 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_184;
      }
      *(_DWORD *)buf = 136447490;
      v179 = "nw_necp_append_tlv";
      __int16 v180 = 2048;
      *(void *)v181 = v19;
      *(_WORD *)&v181[8] = 2048;
      *(void *)v182 = v93 + 5;
      *(_WORD *)&v182[8] = 2048;
      *(void *)&v182[10] = v175;
      *(_WORD *)&v182[18] = 1024;
      *(_DWORD *)&v182[20] = 12;
      *(_WORD *)&v182[24] = 1024;
      *(_DWORD *)&v182[26] = v93;
      v97 = "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, backtrace limit exceeded";
    }
    v102 = v95;
    os_log_type_t v103 = v96;
    goto LABEL_183;
  }
  *BOOL v19 = 12;
  *(_DWORD *)(v19 + 1) = v93;
  if (v92 != -1) {
    memcpy(v19 + 5, v15, v93);
  }
LABEL_186:
  if ((setsockopt(*(_DWORD *)(v171 + 172), 0xFFFF, 4361, v18, v8) & 0x80000000) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG) || gLogFDOverride != -1)
    {
      v104 = nw_parameters_copy_description_internal(v170, 1);
      if ((*(_WORD *)(v171 + 301) & 0x80) == 0)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        v105 = gconnectionLogObj;
        if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
        {
          int v106 = *(_DWORD *)(v171 + 172);
          logging_description = nw_endpoint_get_logging_description(v167);
          if (v167)
          {
            v108 = v167[11];
            v109 = v167[12];
          }
          else
          {
            v108 = 0;
            v109 = 0;
          }
          *(_DWORD *)buf = 136448258;
          v179 = "nw_protocol_socket_set_necp_attributes";
          __int16 v180 = 2082;
          *(void *)v181 = v171 + 308;
          *(_WORD *)&v181[8] = 1024;
          *(_DWORD *)v182 = v106;
          *(_WORD *)&v182[4] = 2082;
          *(void *)&v182[6] = v104;
          *(_WORD *)&v182[14] = 2082;
          *(void *)&v182[16] = logging_description;
          *(_WORD *)&v182[24] = 2080;
          *(void *)&v182[26] = v108;
          *(_WORD *)&v182[34] = 2080;
          *(void *)&v182[36] = v109;
          __int16 v183 = 1040;
          socklen_t v184 = v8;
          __int16 v185 = 2096;
          v186 = v174;
          _os_log_impl(&dword_1830D4000, v105, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s setsockopt %d SO_NECP_ATTRIBUTES\nparameters: %{public}s, endpoint: %{public}s %s %s\n%{network:data}.*P", buf, 0x54u);
        }
      }
      os_log_type_t v18 = v174;
      if (v104) {
        free(v104);
      }
    }
LABEL_215:
    if (!v18) {
      return;
    }
    goto LABEL_216;
  }
  int v110 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
  if (v110 == 22 || v110 == 42)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v111 = gLogObj;
    if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR)) {
      goto LABEL_215;
    }
    int v112 = *(_DWORD *)(v171 + 172);
    *(_DWORD *)buf = 136447234;
    v179 = "nw_protocol_socket_set_necp_attributes";
    __int16 v180 = 1024;
    *(_DWORD *)v181 = v112;
    *(_WORD *)&v181[4] = 1040;
    *(_DWORD *)&v181[6] = v8;
    *(_WORD *)v182 = 2096;
    *(void *)&v182[2] = v18;
    *(_WORD *)&v182[10] = 1024;
    *(_DWORD *)&v182[12] = v110;
    _os_log_impl(&dword_1830D4000, v111, OS_LOG_TYPE_ERROR, "%{public}s setsockopt %d SO_NECP_ATTRIBUTES failed:\n%{network:data}.*P %{darwin.errno}d", buf, 0x28u);
    if (!v18) {
      return;
    }
LABEL_216:
    free(v18);
    return;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  int v113 = *(_DWORD *)(v171 + 172);
  *(_DWORD *)buf = 136447234;
  v179 = "nw_protocol_socket_set_necp_attributes";
  __int16 v180 = 1024;
  *(_DWORD *)v181 = v113;
  *(_WORD *)&v181[4] = 1040;
  *(_DWORD *)&v181[6] = v8;
  *(_WORD *)v182 = 2096;
  *(void *)&v182[2] = v18;
  *(_WORD *)&v182[10] = 1024;
  *(_DWORD *)&v182[12] = v110;
  v114 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v176 = 0;
  if (__nwlog_fault(v114, &type, &v176))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v115 = gLogObj;
      os_log_type_t v116 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_226;
      }
      int v117 = *(_DWORD *)(v171 + 172);
      *(_DWORD *)buf = 136447234;
      v179 = "nw_protocol_socket_set_necp_attributes";
      __int16 v180 = 1024;
      *(_DWORD *)v181 = v117;
      *(_WORD *)&v181[4] = 1040;
      *(_DWORD *)&v181[6] = v8;
      *(_WORD *)v182 = 2096;
      *(void *)&v182[2] = v174;
      *(_WORD *)&v182[10] = 1024;
      *(_DWORD *)&v182[12] = v110;
      v118 = "%{public}s setsockopt %d SO_NECP_ATTRIBUTES failed:\n%{network:data}.*P %{darwin.errno}d";
LABEL_224:
      v125 = v115;
      os_log_type_t v126 = v116;
LABEL_225:
      _os_log_impl(&dword_1830D4000, v125, v126, v118, buf, 0x28u);
      goto LABEL_226;
    }
    if (!v176)
    {
      v115 = __nwlog_obj();
      os_log_type_t v116 = type;
      if (!os_log_type_enabled(v115, type)) {
        goto LABEL_226;
      }
      int v124 = *(_DWORD *)(v171 + 172);
      *(_DWORD *)buf = 136447234;
      v179 = "nw_protocol_socket_set_necp_attributes";
      __int16 v180 = 1024;
      *(_DWORD *)v181 = v124;
      *(_WORD *)&v181[4] = 1040;
      *(_DWORD *)&v181[6] = v8;
      *(_WORD *)v182 = 2096;
      *(void *)&v182[2] = v174;
      *(_WORD *)&v182[10] = 1024;
      *(_DWORD *)&v182[12] = v110;
      v118 = "%{public}s setsockopt %d SO_NECP_ATTRIBUTES failed:\n"
             "%{network:data}.*P %{darwin.errno}d, backtrace limit exceeded";
      goto LABEL_224;
    }
    v119 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v120 = gLogObj;
    os_log_type_t v121 = type;
    BOOL v122 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (v119)
    {
      if (v122)
      {
        int v123 = *(_DWORD *)(v171 + 172);
        *(_DWORD *)buf = 136447490;
        v179 = "nw_protocol_socket_set_necp_attributes";
        __int16 v180 = 1024;
        *(_DWORD *)v181 = v123;
        *(_WORD *)&v181[4] = 1040;
        *(_DWORD *)&v181[6] = v8;
        *(_WORD *)v182 = 2096;
        *(void *)&v182[2] = v174;
        *(_WORD *)&v182[10] = 1024;
        *(_DWORD *)&v182[12] = v110;
        *(_WORD *)&v182[16] = 2082;
        *(void *)&v182[18] = v119;
        _os_log_impl(&dword_1830D4000, v120, v121, "%{public}s setsockopt %d SO_NECP_ATTRIBUTES failed:\n%{network:data}.*P %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x32u);
      }
      free(v119);
    }
    else if (v122)
    {
      int v127 = *(_DWORD *)(v171 + 172);
      *(_DWORD *)buf = 136447234;
      v179 = "nw_protocol_socket_set_necp_attributes";
      __int16 v180 = 1024;
      *(_DWORD *)v181 = v127;
      *(_WORD *)&v181[4] = 1040;
      *(_DWORD *)&v181[6] = v8;
      *(_WORD *)v182 = 2096;
      *(void *)&v182[2] = v174;
      *(_WORD *)&v182[10] = 1024;
      *(_DWORD *)&v182[12] = v110;
      v118 = "%{public}s setsockopt %d SO_NECP_ATTRIBUTES failed:\n%{network:data}.*P %{darwin.errno}d, no backtrace";
      v125 = v120;
      os_log_type_t v126 = v121;
      goto LABEL_225;
    }
  }
LABEL_226:
  if (v114) {
    free(v114);
  }
  os_log_type_t v18 = v174;
  if (v174) {
    goto LABEL_216;
  }
}

uint64_t nw_parameters_get_account_id(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = *(void *)(*((void *)v1 + 13) + 112);
    goto LABEL_3;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  int v16 = "nw_parameters_get_account_id";
  v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        int v16 = "nw_parameters_get_account_id";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          int v16 = "nw_parameters_get_account_id";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        int v16 = "nw_parameters_get_account_id";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        int v16 = "nw_parameters_get_account_id";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_parameters_get_attribution_context(void *a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (!v1)
  {
    id v5 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v17 = "nw_parameters_get_attribution_context";
    v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (__nwlog_fault(v6, &type, &v14))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        id v7 = __nwlog_obj();
        os_log_type_t v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v17 = "nw_parameters_get_attribution_context";
          _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
        }
      }
      else if (v14)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        id v7 = __nwlog_obj();
        os_log_type_t v10 = type;
        BOOL v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446466;
            __int16 v17 = "nw_parameters_get_attribution_context";
            __int16 v18 = 2082;
            uint64_t v19 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_20;
        }
        if (v11)
        {
          *(_DWORD *)buf = 136446210;
          __int16 v17 = "nw_parameters_get_attribution_context";
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        id v7 = __nwlog_obj();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v17 = "nw_parameters_get_attribution_context";
          _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_20:
    if (v6) {
      free(v6);
    }
    goto LABEL_22;
  }
  uint64_t v3 = *((void *)v1 + 13);
  if (!*(unsigned char *)(v3 + 102))
  {
LABEL_22:
    uint64_t v4 = 0;
    goto LABEL_23;
  }
  uint64_t v4 = *(void *)(v3 + 120);
LABEL_23:

  return v4;
}

BOOL nw_endpoint_flow_pre_attach_protocols(void *a1, nw_protocol *a2)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  uint64_t v4 = v3;
  if (!v3)
  {
    char v36 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v53 = "nw_endpoint_flow_pre_attach_protocols";
    char v13 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v50 = 0;
    if (__nwlog_fault(v13, &type, &v50))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        char v14 = __nwlog_obj();
        os_log_type_t v37 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)buf = 136446210;
          v53 = "nw_endpoint_flow_pre_attach_protocols";
          _os_log_impl(&dword_1830D4000, v14, v37, "%{public}s called with null handler", buf, 0xCu);
        }
      }
      else if (v50)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        char v14 = __nwlog_obj();
        os_log_type_t v43 = type;
        BOOL v44 = os_log_type_enabled(v14, type);
        if (backtrace_string)
        {
          if (v44)
          {
            *(_DWORD *)buf = 136446466;
            v53 = "nw_endpoint_flow_pre_attach_protocols";
            __int16 v54 = 2082;
            v55 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v14, v43, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          if (!v13) {
            goto LABEL_56;
          }
          goto LABEL_55;
        }
        if (v44)
        {
          *(_DWORD *)buf = 136446210;
          v53 = "nw_endpoint_flow_pre_attach_protocols";
          _os_log_impl(&dword_1830D4000, v14, v43, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        char v14 = __nwlog_obj();
        os_log_type_t v48 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)buf = 136446210;
          v53 = "nw_endpoint_flow_pre_attach_protocols";
          _os_log_impl(&dword_1830D4000, v14, v48, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
        }
      }
      goto LABEL_53;
    }
LABEL_54:
    if (!v13)
    {
LABEL_56:
      BOOL v10 = 0;
      goto LABEL_57;
    }
LABEL_55:
    free(v13);
    goto LABEL_56;
  }
  id v5 = (NWConcrete_nw_endpoint_handler *)v3;
  uint64_t mode = v5->mode;

  if (mode != 2)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v11 = (id)gLogObj;
    if (mode > 5) {
      os_log_type_t v12 = "unknown-mode";
    }
    else {
      os_log_type_t v12 = off_1E523FB08[mode];
    }
    *(_DWORD *)buf = 136446722;
    v53 = "nw_endpoint_flow_pre_attach_protocols";
    __int16 v54 = 2082;
    v55 = (void *)v12;
    __int16 v56 = 2082;
    os_log_type_t v57 = "flow";
    char v13 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v50 = 0;
    if (__nwlog_fault(v13, &type, &v50))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        char v14 = (id)gLogObj;
        os_log_type_t v15 = type;
        if (os_log_type_enabled(v14, type))
        {
          if (mode > 5) {
            int v16 = "unknown-mode";
          }
          else {
            int v16 = off_1E523FB08[mode];
          }
          *(_DWORD *)buf = 136446722;
          v53 = "nw_endpoint_flow_pre_attach_protocols";
          __int16 v54 = 2082;
          v55 = (void *)v16;
          __int16 v56 = 2082;
          os_log_type_t v57 = "flow";
          _os_log_impl(&dword_1830D4000, v14, v15, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
        }
      }
      else if (v50)
      {
        __int16 v17 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        char v14 = (id)gLogObj;
        os_log_type_t v18 = type;
        BOOL v19 = os_log_type_enabled(v14, type);
        if (v17)
        {
          if (v19)
          {
            if (mode > 5) {
              uint64_t v20 = "unknown-mode";
            }
            else {
              uint64_t v20 = off_1E523FB08[mode];
            }
            *(_DWORD *)buf = 136446978;
            v53 = "nw_endpoint_flow_pre_attach_protocols";
            __int16 v54 = 2082;
            v55 = (void *)v20;
            __int16 v56 = 2082;
            os_log_type_t v57 = "flow";
            __int16 v58 = 2082;
            BOOL v59 = v17;
            _os_log_impl(&dword_1830D4000, v14, v18, "%{public}s Handler is in mode %{public}s, expected %{public}s, dumping backtrace:%{public}s", buf, 0x2Au);
          }

          free(v17);
          if (!v13) {
            goto LABEL_56;
          }
          goto LABEL_55;
        }
        if (v19)
        {
          if (mode > 5) {
            os_log_type_t v32 = "unknown-mode";
          }
          else {
            os_log_type_t v32 = off_1E523FB08[mode];
          }
          *(_DWORD *)buf = 136446722;
          v53 = "nw_endpoint_flow_pre_attach_protocols";
          __int16 v54 = 2082;
          v55 = (void *)v32;
          __int16 v56 = 2082;
          os_log_type_t v57 = "flow";
          _os_log_impl(&dword_1830D4000, v14, v18, "%{public}s Handler is in mode %{public}s, expected %{public}s, no backtrace", buf, 0x20u);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        char v14 = (id)gLogObj;
        os_log_type_t v29 = type;
        if (os_log_type_enabled(v14, type))
        {
          if (mode > 5) {
            os_log_type_t v30 = "unknown-mode";
          }
          else {
            os_log_type_t v30 = off_1E523FB08[mode];
          }
          *(_DWORD *)buf = 136446722;
          v53 = "nw_endpoint_flow_pre_attach_protocols";
          __int16 v54 = 2082;
          v55 = (void *)v30;
          __int16 v56 = 2082;
          os_log_type_t v57 = "flow";
          _os_log_impl(&dword_1830D4000, v14, v29, "%{public}s Handler is in mode %{public}s, expected %{public}s, backtrace limit exceeded", buf, 0x20u);
        }
      }
LABEL_53:

      goto LABEL_54;
    }
    goto LABEL_54;
  }
  id v7 = nw_endpoint_handler_copy_flow(v5);
  if ((*((unsigned char *)v7 + 32) & 2) == 0)
  {
    uint64_t v38 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v53 = "nw_endpoint_flow_pre_attach_protocols";
    os_log_type_t v39 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v50 = 0;
    if (__nwlog_fault(v39, &type, &v50))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __int16 v40 = __nwlog_obj();
        os_log_type_t v41 = type;
        if (os_log_type_enabled(v40, type))
        {
          *(_DWORD *)buf = 136446210;
          v53 = "nw_endpoint_flow_pre_attach_protocols";
          _os_log_impl(&dword_1830D4000, v40, v41, "%{public}s called with null endpoint_flow->is_leaf_flow_handler", buf, 0xCu);
        }
      }
      else if (v50)
      {
        v45 = (char *)__nw_create_backtrace_string();
        __int16 v40 = __nwlog_obj();
        os_log_type_t v46 = type;
        BOOL v47 = os_log_type_enabled(v40, type);
        if (v45)
        {
          if (v47)
          {
            *(_DWORD *)buf = 136446466;
            v53 = "nw_endpoint_flow_pre_attach_protocols";
            __int16 v54 = 2082;
            v55 = v45;
            _os_log_impl(&dword_1830D4000, v40, v46, "%{public}s called with null endpoint_flow->is_leaf_flow_handler, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v45);
          goto LABEL_91;
        }
        if (v47)
        {
          *(_DWORD *)buf = 136446210;
          v53 = "nw_endpoint_flow_pre_attach_protocols";
          _os_log_impl(&dword_1830D4000, v40, v46, "%{public}s called with null endpoint_flow->is_leaf_flow_handler, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __int16 v40 = __nwlog_obj();
        os_log_type_t v49 = type;
        if (os_log_type_enabled(v40, type))
        {
          *(_DWORD *)buf = 136446210;
          v53 = "nw_endpoint_flow_pre_attach_protocols";
          _os_log_impl(&dword_1830D4000, v40, v49, "%{public}s called with null endpoint_flow->is_leaf_flow_handler, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_91:
    if (v39) {
      free(v39);
    }
    BOOL v10 = 0;
    goto LABEL_43;
  }
  nw_endpoint_handler_initialize_association(v5);
  nw_endpoint_flow_initialize_protocol(v5, (uint64_t)v7 + 376, *((unsigned char *)v7 + 32) & 1);
  if (!a2)
  {
    int v21 = v5;
    os_unfair_lock_lock(&v21->lock);
    char v22 = v21->current_path;
    os_unfair_lock_unlock(&v21->lock);

    size_t v23 = v21;
    int v24 = v23->parameters;

    if (nw_endpoint_flow_should_add_filter(v24, v22))
    {
      double Helper_x8__ne_filter_protocol_identifier = gotLoadHelper_x8__ne_filter_protocol_identifier(v25);
      if (*(void *)(v27 + 2112)) {
        uint64_t inited = ne_filter_protocol_identifier_delayInitStub(Helper_x8__ne_filter_protocol_identifier);
      }
      else {
        uint64_t inited = 0;
      }
      BOOL v31 = inited != 0;
      if ((*((_DWORD *)v7 + 225) & 0x80000000) == 0) {
        goto LABEL_40;
      }
    }
    else
    {
      BOOL v31 = 1;
      if ((*((_DWORD *)v7 + 225) & 0x80000000) == 0) {
        goto LABEL_40;
      }
    }
    if (v31 && v22 && nw_path_uses_nexus_internal(v22, 0))
    {
      int v33 = *((unsigned __int8 *)v7 + 34);
      *((unsigned char *)v7 + 33) = ~(32 * v33) & 0x40 | *((unsigned char *)v7 + 33) & 0xBF;
      if ((~(32 * v33) & 0x40) != 0)
      {
        uint64_t v34 = nw_endpoint_flow_setup_channel(v23);
LABEL_42:
        BOOL v10 = v34;

        goto LABEL_43;
      }
LABEL_41:
      uint64_t v34 = nw_endpoint_flow_setup_protocols(v23, 0, 0, 0, 0);
      goto LABEL_42;
    }
LABEL_40:
    *((unsigned char *)v7 + 33) &= ~0x40u;
    goto LABEL_41;
  }
  *((unsigned char *)v7 + 34) |= 0x40u;
  nw_endpoint_t v8 = nw_endpoint_handler_copy_endpoint(v5);
  int v9 = (void *)*((void *)v7 + 121);
  *((void *)v7 + 121) = v8;

  BOOL v10 = nw_endpoint_flow_setup_protocols(v5, 0, a2, 0, 1);
LABEL_43:

LABEL_57:
  return v10;
}

void sub_183286584(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_endpoint_flow_setup_protocols(NWConcrete_nw_endpoint_handler *a1, nw_protocol *a2, nw_protocol *a3, int a4, int a5)
{
  uint64_t v308 = *MEMORY[0x1E4F143B8];
  nw_endpoint_t v8 = a1;
  int v9 = v8;
  if (!v8)
  {
    v218 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v292 = "nw_endpoint_handler_get_mode";
    v219 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(v307) = 16;
    LOBYTE(v289) = 0;
    if (__nwlog_fault(v219, &v307, &v289))
    {
      if (v307 == 17)
      {
        v220 = __nwlog_obj();
        os_log_type_t v221 = v307;
        if (os_log_type_enabled(v220, (os_log_type_t)v307))
        {
          *(_DWORD *)buf = 136446210;
          v292 = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_1830D4000, v220, v221, "%{public}s called with null handler", buf, 0xCu);
        }
      }
      else if ((_BYTE)v289)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        v220 = __nwlog_obj();
        os_log_type_t v223 = v307;
        BOOL v224 = os_log_type_enabled(v220, (os_log_type_t)v307);
        if (backtrace_string)
        {
          if (v224)
          {
            *(_DWORD *)buf = 136446466;
            v292 = "nw_endpoint_handler_get_mode";
            __int16 v293 = 2082;
            v294 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v220, v223, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_275;
        }
        if (v224)
        {
          *(_DWORD *)buf = 136446210;
          v292 = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_1830D4000, v220, v223, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        v220 = __nwlog_obj();
        os_log_type_t v225 = v307;
        if (os_log_type_enabled(v220, (os_log_type_t)v307))
        {
          *(_DWORD *)buf = 136446210;
          v292 = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_1830D4000, v220, v225, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_275:
    if (v219) {
      free(v219);
    }
    unsigned int mode = 0;
LABEL_278:
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v234 = (id)gLogObj;
    if (mode > 5) {
      v235 = "unknown-mode";
    }
    else {
      v235 = off_1E523FB08[mode];
    }
    *(_DWORD *)buf = 136446722;
    v292 = "nw_endpoint_flow_setup_protocols";
    __int16 v293 = 2082;
    v294 = (char *)v235;
    __int16 v295 = 2082;
    v296 = (nw_protocol *)"flow";
    v236 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(v307) = 16;
    LOBYTE(v289) = 0;
    if (__nwlog_fault(v236, &v307, &v289))
    {
      if (v307 == 17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v237 = (id)gLogObj;
        os_log_type_t v238 = v307;
        if (os_log_type_enabled(v237, (os_log_type_t)v307))
        {
          if (mode > 5) {
            v239 = "unknown-mode";
          }
          else {
            v239 = off_1E523FB08[mode];
          }
          *(_DWORD *)buf = 136446722;
          v292 = "nw_endpoint_flow_setup_protocols";
          __int16 v293 = 2082;
          v294 = (char *)v239;
          __int16 v295 = 2082;
          v296 = (nw_protocol *)"flow";
          _os_log_impl(&dword_1830D4000, v237, v238, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
        }
      }
      else if ((_BYTE)v289)
      {
        v240 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v237 = (id)gLogObj;
        os_log_type_t v241 = v307;
        BOOL v242 = os_log_type_enabled(v237, (os_log_type_t)v307);
        if (v240)
        {
          if (v242)
          {
            if (mode > 5) {
              v243 = "unknown-mode";
            }
            else {
              v243 = off_1E523FB08[mode];
            }
            *(_DWORD *)buf = 136446978;
            v292 = "nw_endpoint_flow_setup_protocols";
            __int16 v293 = 2082;
            v294 = (char *)v243;
            __int16 v295 = 2082;
            v296 = (nw_protocol *)"flow";
            __int16 v297 = 2082;
            v298 = v240;
            _os_log_impl(&dword_1830D4000, v237, v241, "%{public}s Handler is in mode %{public}s, expected %{public}s, dumping backtrace:%{public}s", buf, 0x2Au);
          }

          free(v240);
          if (!v236) {
            goto LABEL_312;
          }
          goto LABEL_311;
        }
        if (v242)
        {
          if (mode > 5) {
            v246 = "unknown-mode";
          }
          else {
            v246 = off_1E523FB08[mode];
          }
          *(_DWORD *)buf = 136446722;
          v292 = "nw_endpoint_flow_setup_protocols";
          __int16 v293 = 2082;
          v294 = (char *)v246;
          __int16 v295 = 2082;
          v296 = (nw_protocol *)"flow";
          _os_log_impl(&dword_1830D4000, v237, v241, "%{public}s Handler is in mode %{public}s, expected %{public}s, no backtrace", buf, 0x20u);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v237 = (id)gLogObj;
        os_log_type_t v244 = v307;
        if (os_log_type_enabled(v237, (os_log_type_t)v307))
        {
          if (mode > 5) {
            v245 = "unknown-mode";
          }
          else {
            v245 = off_1E523FB08[mode];
          }
          *(_DWORD *)buf = 136446722;
          v292 = "nw_endpoint_flow_setup_protocols";
          __int16 v293 = 2082;
          v294 = (char *)v245;
          __int16 v295 = 2082;
          v296 = (nw_protocol *)"flow";
          _os_log_impl(&dword_1830D4000, v237, v244, "%{public}s Handler is in mode %{public}s, expected %{public}s, backtrace limit exceeded", buf, 0x20u);
        }
      }
    }
    if (!v236)
    {
LABEL_312:
      BOOL v60 = 0;
      goto LABEL_313;
    }
LABEL_311:
    free(v236);
    goto LABEL_312;
  }
  unsigned int mode = v8->mode;

  if (mode != 2) {
    goto LABEL_278;
  }
  int v281 = a4;
  id v11 = nw_endpoint_handler_copy_flow(v9);
  v286 = v11;
  if (*((unsigned char *)v11 + 35))
  {
    os_log_type_t v12 = v9;
    char v13 = *((unsigned char *)v12 + 268);

    if (!a2)
    {
      if ((v13 & 0x20) != 0)
      {
        BOOL v60 = 1;
      }
      else
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        double v25 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
        {
          os_log_type_t v26 = v12;

          uint64_t v27 = v26;
          char v28 = *((unsigned char *)v12 + 268);

          if (v28) {
            os_log_type_t v29 = "dry-run ";
          }
          else {
            os_log_type_t v29 = "";
          }
          nw_endpoint_t v30 = nw_endpoint_handler_copy_endpoint(v27);
          logging_description = nw_endpoint_get_logging_description(v30);
          id_str = v26->id_str;
          os_log_type_t v32 = v27;
          int v33 = v32;
          uint64_t v34 = v32[30];
          if (v34 > 5) {
            size_t v35 = "unknown-state";
          }
          else {
            size_t v35 = off_1E523FB38[v34];
          }

          os_log_type_t v39 = v33;
          __int16 v40 = v39;
          os_log_type_t v41 = "path";
          switch(v9->mode)
          {
            case 0:
              break;
            case 1:
              os_log_type_t v41 = "resolver";
              break;
            case 2:
              os_log_type_t v41 = nw_endpoint_flow_mode_string(v39[31]);
              break;
            case 3:
              os_log_type_t v41 = "proxy";
              break;
            case 4:
              os_log_type_t v41 = "fallback";
              break;
            case 5:
              os_log_type_t v41 = "transform";
              break;
            default:
              os_log_type_t v41 = "unknown-mode";
              break;
          }

          v108 = v40;
          os_unfair_lock_lock((os_unfair_lock_t)v108 + 28);
          id v109 = v108[8];
          os_unfair_lock_unlock((os_unfair_lock_t)v108 + 28);

          *(_DWORD *)buf = 136447746;
          v292 = "nw_endpoint_flow_setup_protocols";
          __int16 v293 = 2082;
          v294 = id_str;
          __int16 v295 = 2082;
          v296 = (nw_protocol *)v29;
          __int16 v297 = 2082;
          v298 = (void *)logging_description;
          __int16 v299 = 2082;
          v300 = (void *)v35;
          __int16 v301 = 2082;
          v302 = v41;
          __int16 v303 = 2114;
          id v304 = v109;
          _os_log_impl(&dword_1830D4000, v25, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] already in setup protocols, skipping", buf, 0x48u);
        }
        BOOL v60 = 1;
        id v11 = v286;
      }
      goto LABEL_247;
    }
    if ((v13 & 0x20) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      char v14 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
      {
        os_log_type_t v15 = v12;

        int v16 = v15;
        char v17 = *((unsigned char *)v12 + 268);

        if (v17) {
          os_log_type_t v18 = "dry-run ";
        }
        else {
          os_log_type_t v18 = "";
        }
        nw_endpoint_t v19 = nw_endpoint_handler_copy_endpoint(v16);
        uint64_t v20 = nw_endpoint_get_logging_description(v19);
        v273 = v15->id_str;
        int v21 = v16;
        char v22 = v21;
        uint64_t v23 = v21[30];
        if (v23 > 5) {
          int v24 = "unknown-state";
        }
        else {
          int v24 = off_1E523FB38[v23];
        }
        os_log_t log = (os_log_t)v24;

        char v36 = v22;
        os_log_type_t v37 = v36;
        v277 = a3;
        uint64_t v38 = "path";
        switch(v9->mode)
        {
          case 0:
            break;
          case 1:
            uint64_t v38 = "resolver";
            break;
          case 2:
            uint64_t v38 = nw_endpoint_flow_mode_string(v36[31]);
            break;
          case 3:
            uint64_t v38 = "proxy";
            break;
          case 4:
            uint64_t v38 = "fallback";
            break;
          case 5:
            uint64_t v38 = "transform";
            break;
          default:
            uint64_t v38 = "unknown-mode";
            break;
        }

        v42 = v37;
        os_unfair_lock_lock((os_unfair_lock_t)v42 + 28);
        id v43 = v42[8];
        os_unfair_lock_unlock((os_unfair_lock_t)v42 + 28);

        *(_DWORD *)buf = 136448002;
        v292 = "nw_endpoint_flow_setup_protocols";
        __int16 v293 = 2082;
        v294 = v273;
        __int16 v295 = 2082;
        v296 = (nw_protocol *)v18;
        __int16 v297 = 2082;
        v298 = (void *)v20;
        __int16 v299 = 2082;
        v300 = log;
        __int16 v301 = 2082;
        v302 = v38;
        __int16 v303 = 2114;
        id v304 = v43;
        __int16 v305 = 2048;
        v306[0] = a2;
        _os_log_impl(&dword_1830D4000, v14, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] re-entered with attach_protocol %p, continuing", buf, 0x52u);

        a3 = v277;
      }

      id v11 = v286;
    }
  }
  if (_nw_signposts_once != -1) {
    dispatch_once(&_nw_signposts_once, &__block_literal_global_81595);
  }
  if (_nw_signposts_enabled && kdebug_is_enabled()) {
    kdebug_trace();
  }
  *((unsigned char *)v11 + 35) |= 1u;
  if ((*((unsigned char *)v11 + 32) & 0x40) != 0)
  {
    BOOL v61 = v9;
    BOOL v62 = (*((unsigned char *)v61 + 268) & 0x20) == 0;

    id v11 = v286;
    if (v62)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      v63 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v63, OS_LOG_TYPE_DEBUG))
      {
        os_log_type_t v64 = v61;

        BOOL v65 = v64;
        BOOL v66 = (*((unsigned char *)v61 + 268) & 1) == 0;

        if (v66) {
          size_t v67 = "";
        }
        else {
          size_t v67 = "dry-run ";
        }
        nw_endpoint_t v68 = nw_endpoint_handler_copy_endpoint(v65);
        uint64_t v69 = nw_endpoint_get_logging_description(v68);
        os_log_type_t v70 = v65;
        v71 = v70;
        uint64_t v72 = v70[30];
        if (v72 > 5) {
          v73 = "unknown-state";
        }
        else {
          v73 = off_1E523FB38[v72];
        }

        os_log_type_t v74 = v71;
        BOOL v75 = "path";
        switch(v9->mode)
        {
          case 0:
            break;
          case 1:
            BOOL v75 = "resolver";
            break;
          case 2:
            BOOL v75 = nw_endpoint_flow_mode_string(v74[31]);
            break;
          case 3:
            BOOL v75 = "proxy";
            break;
          case 4:
            BOOL v75 = "fallback";
            break;
          case 5:
            BOOL v75 = "transform";
            break;
          default:
            BOOL v75 = "unknown-mode";
            break;
        }
        v278 = v75;

        v94 = v9;
        nw_endpoint_t v95 = v68;
        os_log_type_t v96 = v73;
        v97 = v69;
        v98 = (nw_protocol *)v67;
        v99 = v74;
        os_unfair_lock_lock((os_unfair_lock_t)v99 + 28);
        id v100 = v99[8];
        os_unfair_lock_unlock((os_unfair_lock_t)v99 + 28);

        BOOL v101 = v97;
        nw_endpoint_t v102 = v95;
        int v9 = v94;
        *(_DWORD *)buf = 136447746;
        v292 = "nw_endpoint_flow_setup_protocols";
        __int16 v293 = 2082;
        v294 = v64->id_str;
        __int16 v295 = 2082;
        v296 = v98;
        __int16 v297 = 2082;
        v298 = (void *)v101;
        __int16 v299 = 2082;
        v300 = (void *)v96;
        __int16 v301 = 2082;
        v302 = v278;
        __int16 v303 = 2114;
        id v304 = v100;
        _os_log_impl(&dword_1830D4000, v63, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] already set up", buf, 0x48u);
      }
      id v11 = v286;
    }
    if (!v281) {
      goto LABEL_241;
    }
    goto LABEL_130;
  }
  if ((*((unsigned char *)v11 + 32) & 4) == 0 && (a5 & 1) == 0 && !*((void *)v11 + 104))
  {
    BOOL v44 = v9;
    id v45 = v44[4];

    int upper_transport_protocol = nw_parameters_get_upper_transport_protocol(v45);
    BOOL v47 = v44;
    os_log_type_t v48 = (void **)v47[7];

    LODWORD(v307) = 0;
    if (v48)
    {
      os_log_type_t v49 = nw_path_evaluator_create_flow_inner(v48[3], upper_transport_protocol == 253, 0, 0, 0, 0, 0, 0, &v307);
      char v50 = (void *)*((void *)v286 + 104);
      *((void *)v286 + 104) = v49;
    }
    if (!*((void *)v286 + 104) && (*((unsigned char *)v286 + 34) & 2) == 0)
    {
      if ((nw_endpoint_handler_get_logging_disabled(v47) & 1) == 0)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        v51 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
        {
          id_string = nw_endpoint_handler_get_id_string(v47);
          v53 = nw_endpoint_handler_dry_run_string(v47);
          nw_endpoint_t v284 = nw_endpoint_handler_copy_endpoint(v47);
          __int16 v54 = nw_endpoint_get_logging_description(v284);
          v55 = nw_endpoint_handler_state_string(v47);
          __int16 v56 = nw_endpoint_handler_mode_string(v47);
          id v57 = nw_endpoint_handler_copy_current_path(v47);
          *(_DWORD *)buf = 136447746;
          v292 = "nw_endpoint_flow_setup_protocols";
          __int16 v293 = 2082;
          v294 = (char *)id_string;
          __int16 v295 = 2082;
          v296 = (nw_protocol *)v53;
          __int16 v297 = 2082;
          v298 = (void *)v54;
          __int16 v299 = 2082;
          v300 = (void *)v55;
          __int16 v301 = 2082;
          v302 = v56;
          __int16 v303 = 2114;
          id v304 = v57;
          _os_log_impl(&dword_1830D4000, v51, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] failed to request add flow", buf, 0x48u);
        }
      }
      if (v307 && !*((void *)v286 + 109))
      {
        posix_error = nw_error_create_posix_error(v307);
        BOOL v59 = (void *)*((void *)v286 + 109);
        *((void *)v286 + 109) = posix_error;
      }
      nw_endpoint_flow_failed_with_error(v47, 1, 0);

      BOOL v60 = 0;
      id v11 = v286;
      goto LABEL_242;
    }

    id v11 = v286;
  }
  v76 = (void *)*((void *)v11 + 104);
  if (v76)
  {
    long long v307 = 0uLL;
    os_log_type_t v77 = v76;
    if (!uuid_is_null(v77 + 32)) {
      long long v307 = *((_OWORD *)v77 + 2);
    }

    *(_OWORD *)((char *)v286 + 376) = v307;
    if (a2) {
      *(_OWORD *)a2->flow_id = v307;
    }
    if (nw_endpoint_handler_get_minimize_logging(v9))
    {
      if (nw_endpoint_handler_get_logging_disabled(v9)) {
        goto LABEL_128;
      }
      v226 = a3;
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      size_t v80 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v80, OS_LOG_TYPE_DEBUG))
      {
        v227 = nw_endpoint_handler_get_id_string(v9);
        v228 = nw_endpoint_handler_dry_run_string(v9);
        nw_endpoint_t v229 = nw_endpoint_handler_copy_endpoint(v9);
        v230 = nw_endpoint_get_logging_description(v229);
        v231 = nw_endpoint_handler_state_string(v9);
        v232 = nw_endpoint_handler_mode_string(v9);
        id v233 = nw_endpoint_handler_copy_current_path(v9);
        *(_DWORD *)buf = 136448258;
        v292 = "nw_endpoint_flow_setup_protocols";
        __int16 v293 = 2082;
        v294 = (char *)v227;
        __int16 v295 = 2082;
        v296 = (nw_protocol *)v228;
        __int16 v297 = 2082;
        v298 = (void *)v230;
        __int16 v299 = 2082;
        v300 = (void *)v231;
        __int16 v301 = 2082;
        v302 = v232;
        __int16 v303 = 2114;
        id v304 = v233;
        __int16 v305 = 1042;
        LODWORD(v306[0]) = 16;
        WORD2(v306[0]) = 2098;
        *(void *)((char *)v306 + 6) = (char *)v286 + 376;
        _os_log_impl(&dword_1830D4000, v80, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] setup flow id %{public,uuid_t}.16P", buf, 0x58u);

        a3 = v226;
      }
      goto LABEL_127;
    }
    uint32_t v78 = v9;
    BOOL v79 = (*((unsigned char *)v78 + 268) & 0x20) == 0;

    if (v79)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      size_t v80 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v80, OS_LOG_TYPE_INFO))
      {
        v81 = v78;

        uint64_t v82 = v81;
        BOOL v83 = (*((unsigned char *)v78 + 268) & 1) == 0;

        if (v83) {
          v84 = "";
        }
        else {
          v84 = "dry-run ";
        }
        nw_endpoint_t v85 = nw_endpoint_handler_copy_endpoint(v82);
        v86 = nw_endpoint_get_logging_description(v85);
        os_log_type_t v87 = v82;
        BOOL v88 = v87;
        uint64_t v89 = v87[30];
        if (v89 > 5) {
          os_log_type_t v90 = "unknown-state";
        }
        else {
          os_log_type_t v90 = off_1E523FB38[v89];
        }

        uint32_t v91 = v88;
        int v92 = v91;
        v274 = "path";
        switch(v9->mode)
        {
          case 0:
            goto LABEL_111;
          case 1:
            size_t v93 = "resolver";
            goto LABEL_110;
          case 2:
            v274 = nw_endpoint_flow_mode_string(v91[31]);
            goto LABEL_111;
          case 3:
            size_t v93 = "proxy";
            goto LABEL_110;
          case 4:
            size_t v93 = "fallback";
            goto LABEL_110;
          case 5:
            size_t v93 = "transform";
            goto LABEL_110;
          default:
            size_t v93 = "unknown-mode";
LABEL_110:
            v274 = v93;
LABEL_111:

            loga = v80;
            os_log_type_t v103 = v86;
            v104 = a3;
            v105 = v92;
            os_unfair_lock_lock((os_unfair_lock_t)v105 + 28);
            id v106 = v105[8];
            os_unfair_lock_unlock((os_unfair_lock_t)v105 + 28);

            v107 = v103;
            size_t v80 = loga;
            a3 = v104;
            *(_DWORD *)buf = 136448258;
            v292 = "nw_endpoint_flow_setup_protocols";
            __int16 v293 = 2082;
            v294 = v81->id_str;
            __int16 v295 = 2082;
            v296 = (nw_protocol *)v84;
            __int16 v297 = 2082;
            v298 = (void *)v107;
            __int16 v299 = 2082;
            v300 = (void *)v90;
            __int16 v301 = 2082;
            v302 = v274;
            __int16 v303 = 2114;
            id v304 = v106;
            __int16 v305 = 1042;
            LODWORD(v306[0]) = 16;
            WORD2(v306[0]) = 2098;
            *(void *)((char *)v306 + 6) = (char *)v286 + 376;
            _os_log_impl(&dword_1830D4000, loga, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] setup flow id %{public,uuid_t}.16P", buf, 0x58u);

            break;
        }
      }
LABEL_127:

      goto LABEL_128;
    }
    goto LABEL_128;
  }
  if (!a5) {
    goto LABEL_128;
  }
  os_unfair_lock_lock((os_unfair_lock_t)&nw_uuid_generate_insecure(unsigned char *)::uuid_lock);
  if (uuid_is_null((const unsigned __int8 *)&nw_uuid_generate_insecure(unsigned char *)::last_used_uuid)) {
    goto LABEL_120;
  }
  if ((void)nw_uuid_generate_insecure(unsigned char *)::last_used_uuid != -1)
  {
    *(void *)&nw_uuid_generate_insecure(unsigned char *)::last_used_uuid = nw_uuid_generate_insecure(unsigned char *)::last_used_uuid
                                                                           + 1;
    goto LABEL_121;
  }
  if (*((void *)&nw_uuid_generate_insecure(unsigned char *)::last_used_uuid + 1) == -1)
  {
LABEL_120:
    uuid_generate_random((unsigned __int8 *)&nw_uuid_generate_insecure(unsigned char *)::last_used_uuid);
    BYTE9(nw_uuid_generate_insecure(unsigned char *)::last_used_uuid) = -1;
  }
  else
  {
    ++*((void *)&nw_uuid_generate_insecure(unsigned char *)::last_used_uuid + 1);
  }
LABEL_121:
  *(_OWORD *)((char *)v286 + 376) = nw_uuid_generate_insecure(unsigned char *)::last_used_uuid;
  os_unfair_lock_unlock((os_unfair_lock_t)&nw_uuid_generate_insecure(unsigned char *)::uuid_lock);
  if (nw_endpoint_handler_get_minimize_logging(v9))
  {
    if ((nw_endpoint_handler_get_logging_disabled(v9) & 1) == 0)
    {
      v259 = a3;
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      v260 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v260, OS_LOG_TYPE_DEBUG))
      {
        v261 = nw_endpoint_handler_get_id_string(v9);
        v262 = nw_endpoint_handler_dry_run_string(v9);
        nw_endpoint_t v263 = nw_endpoint_handler_copy_endpoint(v9);
        v264 = nw_endpoint_get_logging_description(v263);
        v265 = nw_endpoint_handler_state_string(v9);
        v266 = nw_endpoint_handler_mode_string(v9);
        id v267 = nw_endpoint_handler_copy_current_path(v9);
        *(_DWORD *)buf = 136448258;
        v292 = "nw_endpoint_flow_setup_protocols";
        __int16 v293 = 2082;
        v294 = (char *)v261;
        __int16 v295 = 2082;
        v296 = (nw_protocol *)v262;
        __int16 v297 = 2082;
        v298 = (void *)v264;
        __int16 v299 = 2082;
        v300 = (void *)v265;
        __int16 v301 = 2082;
        v302 = v266;
        __int16 v303 = 2114;
        id v304 = v267;
        __int16 v305 = 1042;
        LODWORD(v306[0]) = 16;
        WORD2(v306[0]) = 2098;
        *(void *)((char *)v306 + 6) = (char *)v286 + 376;
        _os_log_impl(&dword_1830D4000, v260, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] generated flow id %{public,uuid_t}.16P", buf, 0x58u);
      }
      a3 = v259;
    }
    goto LABEL_128;
  }
  int v110 = v9;
  BOOL v111 = (*((unsigned char *)v110 + 268) & 0x20) == 0;

  if (v111)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
    }
    size_t v80 = (id)gconnectionLogObj;
    if (os_log_type_enabled(v80, OS_LOG_TYPE_INFO))
    {
      int v112 = nw_endpoint_handler_get_id_string(v110);
      int v113 = nw_endpoint_handler_dry_run_string(v110);
      nw_endpoint_t v114 = nw_endpoint_handler_copy_endpoint(v110);
      v279 = a3;
      v115 = nw_endpoint_get_logging_description(v114);
      os_log_type_t v116 = nw_endpoint_handler_state_string(v110);
      int v117 = nw_endpoint_handler_mode_string(v110);
      id v118 = nw_endpoint_handler_copy_current_path(v110);
      *(_DWORD *)buf = 136448258;
      v292 = "nw_endpoint_flow_setup_protocols";
      __int16 v293 = 2082;
      v294 = (char *)v112;
      __int16 v295 = 2082;
      v296 = (nw_protocol *)v113;
      __int16 v297 = 2082;
      v298 = (void *)v115;
      __int16 v299 = 2082;
      v300 = (void *)v116;
      __int16 v301 = 2082;
      v302 = v117;
      __int16 v303 = 2114;
      id v304 = v118;
      __int16 v305 = 1042;
      LODWORD(v306[0]) = 16;
      WORD2(v306[0]) = 2098;
      *(void *)((char *)v306 + 6) = (char *)v286 + 376;
      _os_log_impl(&dword_1830D4000, v80, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] generated flow id %{public,uuid_t}.16P", buf, 0x58u);

      a3 = v279;
    }
    goto LABEL_127;
  }
LABEL_128:
  id v11 = v286;
  if (!nw_endpoint_flow_attach_protocols(v9, a2, a3))
  {
    BOOL v60 = 0;
    int v137 = v281;
LABEL_238:
    if (!v60 && v137)
    {
      nw_endpoint_flow_failed_with_error(v9, 1, 0);
      BOOL v60 = 0;
    }
    goto LABEL_242;
  }
  *((unsigned char *)v286 + 32) |= 0x40u;
  if (!v281) {
    goto LABEL_241;
  }
LABEL_130:
  char v119 = *((unsigned char *)v11 + 32);
  v120 = v9;
  os_log_type_t v121 = v120;
  v280 = v120;
  if ((v119 & 2) != 0)
  {
    BOOL v138 = (*((unsigned char *)v120 + 268) & 0x20) == 0;

    id v11 = v286;
    if (v138)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      v139 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v139, OS_LOG_TYPE_DEBUG))
      {
        os_log_type_t v140 = v280;

        v141 = v140;
        BOOL v142 = (*((unsigned char *)v280 + 268) & 1) == 0;

        if (v142) {
          os_log_type_t v143 = "";
        }
        else {
          os_log_type_t v143 = "dry-run ";
        }
        nw_endpoint_t v144 = nw_endpoint_handler_copy_endpoint(v141);
        os_log_type_t v145 = nw_endpoint_get_logging_description(v144);
        v146 = v141;
        BOOL v147 = v146;
        uint64_t v148 = v146[30];
        if (v148 > 5) {
          v149 = "unknown-state";
        }
        else {
          v149 = off_1E523FB38[v148];
        }

        BOOL v159 = v147;
        v160 = "path";
        switch(v9->mode)
        {
          case 0:
            break;
          case 1:
            v160 = "resolver";
            break;
          case 2:
            v160 = nw_endpoint_flow_mode_string(v159[31]);
            break;
          case 3:
            v160 = "proxy";
            break;
          case 4:
            v160 = "fallback";
            break;
          case 5:
            v160 = "transform";
            break;
          default:
            v160 = "unknown-mode";
            break;
        }
        v276 = v160;

        uint64_t v171 = v159;
        os_unfair_lock_lock((os_unfair_lock_t)v171 + 28);
        id v172 = v171[8];
        os_unfair_lock_unlock((os_unfair_lock_t)v171 + 28);

        *(_DWORD *)buf = 136447746;
        v292 = "nw_endpoint_flow_setup_protocols";
        __int16 v293 = 2082;
        v294 = v140 + 168;
        __int16 v295 = 2082;
        v296 = (nw_protocol *)v143;
        __int16 v297 = 2082;
        v298 = (void *)v145;
        __int16 v299 = 2082;
        v300 = (void *)v149;
        __int16 v301 = 2082;
        v302 = v276;
        __int16 v303 = 2114;
        id v304 = v172;
        _os_log_impl(&dword_1830D4000, v139, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] leaf flow starting", buf, 0x48u);
      }
      goto LABEL_193;
    }
    goto LABEL_194;
  }
  BOOL v122 = v120->endpoint;

  int v123 = (void *)*((void *)v286 + 121);
  *((void *)v286 + 121) = v122;

  id v11 = v286;
  if (*((void *)v286 + 117))
  {
    int v124 = v280;
    BOOL v125 = (*((unsigned char *)v124 + 268) & 0x20) == 0;

    id v11 = v286;
    if (v125)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      os_log_type_t v126 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v126, OS_LOG_TYPE_DEBUG))
      {
        int v127 = v124;

        v128 = v127;
        BOOL v129 = (*((unsigned char *)v124 + 268) & 1) == 0;

        if (v129) {
          os_log_type_t v130 = "";
        }
        else {
          os_log_type_t v130 = "dry-run ";
        }
        nw_endpoint_t v131 = nw_endpoint_handler_copy_endpoint(v128);
        v132 = nw_endpoint_get_logging_description(v131);
        os_log_type_t v133 = v128;
        v134 = v133;
        uint64_t v135 = v133[30];
        if (v135 > 5) {
          os_log_type_t v136 = "unknown-state";
        }
        else {
          os_log_type_t v136 = off_1E523FB38[v135];
        }
        v275 = v136;

        socklen_t v168 = v134;
        char v169 = v168;
        v170 = "path";
        switch(v9->mode)
        {
          case 0:
            break;
          case 1:
            v170 = "resolver";
            break;
          case 2:
            v170 = nw_endpoint_flow_mode_string(v168[31]);
            break;
          case 3:
            v170 = "proxy";
            break;
          case 4:
            v170 = "fallback";
            break;
          case 5:
            v170 = "transform";
            break;
          default:
            v170 = "unknown-mode";
            break;
        }

        v181 = v169;
        os_unfair_lock_lock((os_unfair_lock_t)v181 + 28);
        id v182 = v181[8];
        os_unfair_lock_unlock((os_unfair_lock_t)v181 + 28);

        *(_DWORD *)buf = 136447746;
        v292 = "nw_endpoint_flow_setup_protocols";
        __int16 v293 = 2082;
        v294 = v127 + 168;
        __int16 v295 = 2082;
        v296 = (nw_protocol *)v130;
        __int16 v297 = 2082;
        v298 = (void *)v132;
        __int16 v299 = 2082;
        v300 = (void *)v275;
        __int16 v301 = 2082;
        v302 = v170;
        __int16 v303 = 2114;
        id v304 = v182;
        _os_log_impl(&dword_1830D4000, v126, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] child flow connected, starting", buf, 0x48u);
      }
LABEL_192:

LABEL_193:
      id v11 = v286;
      goto LABEL_194;
    }
    goto LABEL_194;
  }
  if (*((unsigned char *)v286 + 33))
  {
    if ((nw_endpoint_handler_get_logging_disabled(v280) & 1) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      os_log_type_t v126 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v126, OS_LOG_TYPE_DEBUG))
      {
        v161 = nw_endpoint_handler_get_id_string(v280);
        os_log_type_t v162 = nw_endpoint_handler_dry_run_string(v280);
        nw_endpoint_t v163 = nw_endpoint_handler_copy_endpoint(v280);
        v164 = nw_endpoint_get_logging_description(v163);
        os_log_type_t v165 = nw_endpoint_handler_state_string(v280);
        uint32_t v166 = nw_endpoint_handler_mode_string(v280);
        id v167 = nw_endpoint_handler_copy_current_path(v280);
        *(_DWORD *)buf = 136447746;
        v292 = "nw_endpoint_flow_setup_protocols";
        __int16 v293 = 2082;
        v294 = (char *)v161;
        __int16 v295 = 2082;
        v296 = (nw_protocol *)v162;
        __int16 v297 = 2082;
        v298 = (void *)v164;
        __int16 v299 = 2082;
        v300 = (void *)v165;
        __int16 v301 = 2082;
        v302 = v166;
        __int16 v303 = 2114;
        id v304 = v167;
        _os_log_impl(&dword_1830D4000, v126, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] joined protocol stack, starting", buf, 0x48u);
      }
      goto LABEL_192;
    }
    goto LABEL_194;
  }
  if (!*((void *)v286 + 116))
  {
    if ((nw_endpoint_handler_get_logging_disabled(v280) & 1) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      char v173 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v173, OS_LOG_TYPE_DEBUG))
      {
        v174 = nw_endpoint_handler_get_id_string(v280);
        v175 = nw_endpoint_handler_dry_run_string(v280);
        nw_endpoint_t v176 = nw_endpoint_handler_copy_endpoint(v280);
        v177 = nw_endpoint_get_logging_description(v176);
        v178 = nw_endpoint_handler_state_string(v280);
        v179 = nw_endpoint_handler_mode_string(v280);
        id v180 = nw_endpoint_handler_copy_current_path(v280);
        *(_DWORD *)buf = 136447746;
        v292 = "nw_endpoint_flow_setup_protocols";
        __int16 v293 = 2082;
        v294 = (char *)v174;
        __int16 v295 = 2082;
        v296 = (nw_protocol *)v175;
        __int16 v297 = 2082;
        v298 = (void *)v177;
        __int16 v299 = 2082;
        v300 = (void *)v178;
        __int16 v301 = 2082;
        v302 = v179;
        __int16 v303 = 2114;
        id v304 = v180;
        _os_log_impl(&dword_1830D4000, v173, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] persistent protocol stack, starting", buf, 0x48u);
      }
      id v11 = v286;
    }
    *((unsigned char *)v11 + 35) |= 8u;
    goto LABEL_194;
  }
  uint64_t v150 = *((void *)v286 + 118);
  char logging_disabled = nw_endpoint_handler_get_logging_disabled(v280);
  if (v150)
  {
    if ((logging_disabled & 1) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      os_log_type_t v126 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v126, OS_LOG_TYPE_DEBUG))
      {
        v152 = nw_endpoint_handler_get_id_string(v280);
        BOOL v153 = nw_endpoint_handler_dry_run_string(v280);
        nw_endpoint_t v154 = nw_endpoint_handler_copy_endpoint(v280);
        BOOL v155 = nw_endpoint_get_logging_description(v154);
        v156 = nw_endpoint_handler_state_string(v280);
        v157 = nw_endpoint_handler_mode_string(v280);
        id v158 = nw_endpoint_handler_copy_current_path(v280);
        *(_DWORD *)buf = 136447746;
        v292 = "nw_endpoint_flow_setup_protocols";
        __int16 v293 = 2082;
        v294 = (char *)v152;
        __int16 v295 = 2082;
        v296 = (nw_protocol *)v153;
        __int16 v297 = 2082;
        v298 = (void *)v155;
        __int16 v299 = 2082;
        v300 = (void *)v156;
        __int16 v301 = 2082;
        v302 = v157;
        __int16 v303 = 2114;
        id v304 = v158;
        _os_log_impl(&dword_1830D4000, v126, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] has candidate children, starting", buf, 0x48u);
      }
      goto LABEL_192;
    }
LABEL_194:
    if ((*((char *)v11 + 32) & 0x80000000) == 0)
    {
      if (!a2)
      {
        int v137 = v281;
        if (nw_endpoint_flow_connect(v280))
        {
LABEL_223:
          *((unsigned char *)v11 + 32) |= 0x80u;
          goto LABEL_236;
        }
        goto LABEL_208;
      }
      handle = a2->handle;
      int v137 = v281;
      if (handle == &nw_protocol_ref_counted_handle)
      {
        callbacks = a2[1].callbacks;
        if (callbacks) {
          a2[1].callbacks = (nw_protocol_callbacks *)((char *)&callbacks->add_input_handler + 1);
        }
        *(void *)&long long v307 = a2;
        char v184 = BYTE8(v307) | 1;
      }
      else
      {
        *(void *)&long long v307 = a2;
        char v184 = BYTE8(v307) & 0xFE;
      }
      BYTE8(v307) = v184;
      v199 = (void *)*((void *)v11 + 52);
      if (v199 == &nw_protocol_ref_counted_handle)
      {
        uint64_t v201 = *((void *)v11 + 58);
        if (v201) {
          *((void *)v11 + 58) = v201 + 1;
        }
        uint64_t v289 = (uint64_t)v11 + 376;
        char v200 = v290 | 1;
      }
      else
      {
        uint64_t v289 = (uint64_t)v11 + 376;
        char v200 = v290 & 0xFE;
      }
      char v290 = v200;
      v202 = a2->callbacks;
      if (v202)
      {
        connect = (uint64_t (*)(void))v202->connect;
        if (connect)
        {
          char v204 = connect();
          if (v199 != &nw_protocol_ref_counted_handle) {
            goto LABEL_221;
          }
          goto LABEL_220;
        }
      }
      v248 = __nwlog_obj();
      identifier = a2->identifier;
      *(_DWORD *)buf = 136446722;
      v292 = "__nw_protocol_connect";
      if (!identifier) {
        identifier = (nw_protocol_identifier *)"invalid";
      }
      __int16 v293 = 2082;
      v294 = (char *)identifier;
      __int16 v295 = 2048;
      v296 = a2;
      v250 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v287 = 0;
      if (__nwlog_fault(v250, &type, &v287))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          v251 = __nwlog_obj();
          os_log_type_t v252 = type;
          if (os_log_type_enabled(v251, type))
          {
            v253 = a2->identifier;
            if (!v253) {
              v253 = (nw_protocol_identifier *)"invalid";
            }
            *(_DWORD *)buf = 136446722;
            v292 = "__nw_protocol_connect";
            __int16 v293 = 2082;
            v294 = (char *)v253;
            __int16 v295 = 2048;
            v296 = a2;
            _os_log_impl(&dword_1830D4000, v251, v252, "%{public}s protocol %{public}s (%p) has invalid connect callback", buf, 0x20u);
          }
LABEL_322:

          goto LABEL_349;
        }
        if (!v287)
        {
          v251 = __nwlog_obj();
          os_log_type_t v268 = type;
          if (os_log_type_enabled(v251, type))
          {
            v269 = a2->identifier;
            if (!v269) {
              v269 = (nw_protocol_identifier *)"invalid";
            }
            *(_DWORD *)buf = 136446722;
            v292 = "__nw_protocol_connect";
            __int16 v293 = 2082;
            v294 = (char *)v269;
            __int16 v295 = 2048;
            v296 = a2;
            _os_log_impl(&dword_1830D4000, v251, v268, "%{public}s protocol %{public}s (%p) has invalid connect callback, backtrace limit exceeded", buf, 0x20u);
          }
          goto LABEL_322;
        }
        v254 = (char *)__nw_create_backtrace_string();
        v255 = __nwlog_obj();
        os_log_type_t v256 = type;
        BOOL v257 = os_log_type_enabled(v255, type);
        if (v254)
        {
          if (v257)
          {
            v258 = a2->identifier;
            if (!v258) {
              v258 = (nw_protocol_identifier *)"invalid";
            }
            *(_DWORD *)buf = 136446978;
            v292 = "__nw_protocol_connect";
            __int16 v293 = 2082;
            v294 = (char *)v258;
            __int16 v295 = 2048;
            v296 = a2;
            __int16 v297 = 2082;
            v298 = v254;
            _os_log_impl(&dword_1830D4000, v255, v256, "%{public}s protocol %{public}s (%p) has invalid connect callback, dumping backtrace:%{public}s", buf, 0x2Au);
          }

          free(v254);
        }
        else
        {
          if (v257)
          {
            v270 = a2->identifier;
            if (!v270) {
              v270 = (nw_protocol_identifier *)"invalid";
            }
            *(_DWORD *)buf = 136446722;
            v292 = "__nw_protocol_connect";
            __int16 v293 = 2082;
            v294 = (char *)v270;
            __int16 v295 = 2048;
            v296 = a2;
            _os_log_impl(&dword_1830D4000, v255, v256, "%{public}s protocol %{public}s (%p) has invalid connect callback, no backtrace", buf, 0x20u);
          }
        }
      }
LABEL_349:
      if (v250) {
        free(v250);
      }
      char v204 = 0;
      id v11 = v286;
      int v137 = v281;
      if (v199 != &nw_protocol_ref_counted_handle)
      {
LABEL_221:
        if (handle == &nw_protocol_ref_counted_handle)
        {
          nw::release_if_needed<nw_protocol *>((uint64_t *)&v307);
          if (v204) {
            goto LABEL_223;
          }
        }
        else if (v204)
        {
          goto LABEL_223;
        }
LABEL_208:
        BOOL v60 = 0;
        goto LABEL_238;
      }
LABEL_220:
      nw::release_if_needed<nw_protocol *>(&v289);
      goto LABEL_221;
    }
    __int16 v185 = v280;
    BOOL v186 = (*((unsigned char *)v185 + 268) & 0x20) == 0;

    id v11 = v286;
    if (!v186) {
      goto LABEL_236;
    }
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
    }
    uint64_t v187 = (id)gconnectionLogObj;
    if (os_log_type_enabled(v187, OS_LOG_TYPE_DEBUG))
    {
      v188 = v185;

      v189 = v188;
      BOOL v190 = (*((unsigned char *)v185 + 268) & 1) == 0;

      if (v190) {
        v191 = "";
      }
      else {
        v191 = "dry-run ";
      }
      nw_endpoint_t v192 = nw_endpoint_handler_copy_endpoint(v189);
      v193 = nw_endpoint_get_logging_description(v192);
      v194 = v189;
      v195 = v194;
      uint64_t v196 = v194[30];
      if (v196 > 5) {
        v197 = "unknown-state";
      }
      else {
        v197 = off_1E523FB38[v196];
      }
      v285 = v197;

      v205 = v195;
      v206 = v205;
      v207 = "path";
      switch(v9->mode)
      {
        case 0:
          break;
        case 1:
          v207 = "resolver";
          break;
        case 2:
          v207 = nw_endpoint_flow_mode_string(v205[31]);
          break;
        case 3:
          v207 = "proxy";
          break;
        case 4:
          v207 = "fallback";
          break;
        case 5:
          v207 = "transform";
          break;
        default:
          v207 = "unknown-mode";
          break;
      }

      v208 = v206;
      os_unfair_lock_lock((os_unfair_lock_t)v208 + 28);
      id v209 = v208[8];
      os_unfair_lock_unlock((os_unfair_lock_t)v208 + 28);

      *(_DWORD *)buf = 136447746;
      v292 = "nw_endpoint_flow_setup_protocols";
      __int16 v293 = 2082;
      v294 = v188 + 168;
      __int16 v295 = 2082;
      v296 = (nw_protocol *)v191;
      __int16 v297 = 2082;
      v298 = (void *)v193;
      __int16 v299 = 2082;
      v300 = (void *)v285;
      __int16 v301 = 2082;
      v302 = v207;
      __int16 v303 = 2114;
      id v304 = v209;
      _os_log_impl(&dword_1830D4000, v187, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] already started", buf, 0x48u);
    }
    goto LABEL_235;
  }
  if ((logging_disabled & 1) == 0)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
    }
    uint64_t v187 = (id)gconnectionLogObj;
    if (os_log_type_enabled(v187, OS_LOG_TYPE_DEBUG))
    {
      v211 = nw_endpoint_handler_get_id_string(v280);
      v212 = nw_endpoint_handler_dry_run_string(v280);
      nw_endpoint_t v213 = nw_endpoint_handler_copy_endpoint(v280);
      v214 = nw_endpoint_get_logging_description(v213);
      v215 = nw_endpoint_handler_state_string(v280);
      v216 = nw_endpoint_handler_mode_string(v280);
      id v217 = nw_endpoint_handler_copy_current_path(v280);
      *(_DWORD *)buf = 136447746;
      v292 = "nw_endpoint_flow_setup_protocols";
      __int16 v293 = 2082;
      v294 = (char *)v211;
      __int16 v295 = 2082;
      v296 = (nw_protocol *)v212;
      __int16 v297 = 2082;
      v298 = (void *)v214;
      __int16 v299 = 2082;
      v300 = (void *)v215;
      __int16 v301 = 2082;
      v302 = v216;
      __int16 v303 = 2114;
      id v304 = v217;
      _os_log_impl(&dword_1830D4000, v187, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] not doing anything yet, no connected endpoint handler", buf, 0x48u);
    }
LABEL_235:

    id v11 = v286;
  }
LABEL_236:
  char v210 = *((unsigned char *)v11 + 35);
  if ((v210 & 0x18) == 8)
  {
    *((unsigned char *)v11 + 35) = v210 & 0xF7;
    nw_endpoint_flow_start_child(v280);
    int v137 = v281;
    BOOL v60 = *((void *)v11 + 116) != 0;
    goto LABEL_238;
  }
LABEL_241:
  BOOL v60 = 1;
LABEL_242:
  *((unsigned char *)v11 + 35) &= ~1u;
  if (_nw_signposts_once != -1) {
    dispatch_once(&_nw_signposts_once, &__block_literal_global_81595);
  }
  if (_nw_signposts_enabled && kdebug_is_enabled()) {
    kdebug_trace();
  }
LABEL_247:

LABEL_313:
  return v60;
}

void sub_183288D84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  _Unwind_Resume(a1);
}

uint64_t nw_parameters_get_upper_transport_protocol(void *a1)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (!v1)
  {
    int v9 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    int v21 = "nw_parameters_get_upper_transport_protocol";
    BOOL v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v18 = 0;
    if (__nwlog_fault(v10, &type, &v18))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        id v11 = __nwlog_obj();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          int v21 = "nw_parameters_get_upper_transport_protocol";
          _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s called with null parameters", buf, 0xCu);
        }
      }
      else if (v18)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        id v11 = __nwlog_obj();
        os_log_type_t v14 = type;
        BOOL v15 = os_log_type_enabled(v11, type);
        if (backtrace_string)
        {
          if (v15)
          {
            *(_DWORD *)buf = 136446466;
            int v21 = "nw_parameters_get_upper_transport_protocol";
            __int16 v22 = 2082;
            uint64_t v23 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v11, v14, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_30;
        }
        if (v15)
        {
          *(_DWORD *)buf = 136446210;
          int v21 = "nw_parameters_get_upper_transport_protocol";
          _os_log_impl(&dword_1830D4000, v11, v14, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        id v11 = __nwlog_obj();
        os_log_type_t v16 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          int v21 = "nw_parameters_get_upper_transport_protocol";
          _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_30:
    if (v10) {
      free(v10);
    }
    goto LABEL_32;
  }
  uint64_t v3 = v1[19];
  if (!v3) {
    goto LABEL_32;
  }
  uint64_t v4 = *(void **)(v3 + 24);
  if (!v4) {
    goto LABEL_32;
  }
  id v5 = v4;
  if (nw_protocol_setup_udp_definition(void)::onceToken[0] != -1) {
    dispatch_once(nw_protocol_setup_udp_definition(void)::onceToken, &__block_literal_global_45806);
  }
  BOOL v6 = nw_protocol_options_matches_definition(v5, (void *)g_udp_definition);

  id v7 = *(void **)(v2[19] + 24);
  if (!v6)
  {
    if (!nw_protocol_options_is_tcp(v7)
      && !nw_protocol_options_is_custom_ip(*(void **)(v2[19] + 24))
      && nw_protocol_options_is_quic(*(nw_protocol_options_t *)(v2[19] + 24)))
    {
      unsigned __int8 v8 = -3;
      goto LABEL_33;
    }
LABEL_32:
    unsigned __int8 v8 = 0;
    goto LABEL_33;
  }
  if (nw_udp_options_get_use_quic_stats(v7)) {
    unsigned __int8 v8 = -3;
  }
  else {
    unsigned __int8 v8 = 0;
  }
LABEL_33:

  return v8;
}

void sub_1832892C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_endpoint_flow_connect(void *a1)
{
  uint64_t v82 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = nw_endpoint_handler_copy_flow(v1);
  if (!v2)
  {
    uint64_t v38 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v69 = "nw_endpoint_flow_connect";
    os_log_type_t v39 = (char *)_os_log_send_and_compose_impl();

    v66[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v64) = 0;
    if (__nwlog_fault(v39, v66, &v64))
    {
      if (v66[0] == OS_LOG_TYPE_FAULT)
      {
        __int16 v40 = __nwlog_obj();
        os_log_type_t v41 = v66[0];
        if (os_log_type_enabled(v40, v66[0]))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v69 = "nw_endpoint_flow_connect";
          _os_log_impl(&dword_1830D4000, v40, v41, "%{public}s called with null endpoint_flow", buf, 0xCu);
        }
      }
      else if ((_BYTE)v64)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __int16 v40 = __nwlog_obj();
        os_log_type_t v47 = v66[0];
        BOOL v48 = os_log_type_enabled(v40, v66[0]);
        if (backtrace_string)
        {
          if (v48)
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v69 = "nw_endpoint_flow_connect";
            __int16 v70 = 2082;
            v71 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v40, v47, "%{public}s called with null endpoint_flow, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_98;
        }
        if (v48)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v69 = "nw_endpoint_flow_connect";
          _os_log_impl(&dword_1830D4000, v40, v47, "%{public}s called with null endpoint_flow, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __int16 v40 = __nwlog_obj();
        os_log_type_t v58 = v66[0];
        if (os_log_type_enabled(v40, v66[0]))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v69 = "nw_endpoint_flow_connect";
          _os_log_impl(&dword_1830D4000, v40, v58, "%{public}s called with null endpoint_flow, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_98:
    if (v39) {
      free(v39);
    }
    uint64_t v26 = 0;
    goto LABEL_94;
  }
  if (_nw_signposts_once != -1) {
    dispatch_once(&_nw_signposts_once, &__block_literal_global_81595);
  }
  if (_nw_signposts_enabled && kdebug_is_enabled()) {
    kdebug_trace();
  }
  v1->event = (nw_endpoint_handler_event_s)196611;
  nw_endpoint_handler_report(v1, 0, &v1->event.domain, 0);
  uint64_t v3 = (const char *)*((void *)v2 + 51);
  if (!v3)
  {
    if (nw_endpoint_handler_get_minimize_logging(v1))
    {
      if (nw_endpoint_handler_get_logging_disabled(v1)) {
        goto LABEL_43;
      }
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      unsigned __int8 v8 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      {
        id_string = nw_endpoint_handler_get_id_string(v1);
        char v50 = nw_endpoint_handler_dry_run_string(v1);
        nw_endpoint_t v51 = nw_endpoint_handler_copy_endpoint(v1);
        logging_description = nw_endpoint_get_logging_description(v51);
        v53 = nw_endpoint_handler_state_string(v1);
        __int16 v54 = nw_endpoint_handler_mode_string(v1);
        id v55 = nw_endpoint_handler_copy_current_path(v1);
        *(_DWORD *)buf = 136447746;
        uint64_t v69 = "nw_endpoint_flow_connect";
        __int16 v70 = 2082;
        v71 = (void *)id_string;
        __int16 v72 = 2082;
        v73 = v50;
        __int16 v74 = 2082;
        BOOL v75 = (void *)logging_description;
        __int16 v76 = 2082;
        os_log_type_t v77 = v53;
        __int16 v78 = 2082;
        BOOL v79 = v54;
        __int16 v80 = 2114;
        id v81 = v55;
        _os_log_impl(&dword_1830D4000, v8, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] connect bottom protocol", buf, 0x48u);
      }
    }
    else
    {
      BOOL v6 = v1;
      char v7 = *((unsigned char *)v6 + 268);

      if ((v7 & 0x20) != 0)
      {
LABEL_43:
        uint64_t v26 = 1;
        goto LABEL_94;
      }
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      unsigned __int8 v8 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        int v9 = v6;

        BOOL v10 = v9;
        char v11 = *((unsigned char *)v6 + 268);

        if (v11) {
          os_log_type_t v12 = "dry-run ";
        }
        else {
          os_log_type_t v12 = "";
        }
        nw_endpoint_t v13 = nw_endpoint_handler_copy_endpoint(v10);
        os_log_type_t v14 = nw_endpoint_get_logging_description(v13);
        id_str = v9->id_str;
        os_log_type_t v16 = v10;
        char v17 = v16;
        uint64_t v18 = v16[30];
        if (v18 > 5) {
          nw_endpoint_t v19 = "unknown-state";
        }
        else {
          nw_endpoint_t v19 = off_1E523FB38[v18];
        }
        BOOL v61 = v19;

        uint64_t v27 = v17;
        char v28 = v27;
        os_log_type_t v29 = "path";
        switch(*((_DWORD *)v27 + 29))
        {
          case 0:
            break;
          case 1:
            os_log_type_t v29 = "resolver";
            break;
          case 2:
            os_log_type_t v29 = nw_endpoint_flow_mode_string(v27[31]);
            break;
          case 3:
            os_log_type_t v29 = "proxy";
            break;
          case 4:
            os_log_type_t v29 = "fallback";
            break;
          case 5:
            os_log_type_t v29 = "transform";
            break;
          default:
            os_log_type_t v29 = "unknown-mode";
            break;
        }

        nw_endpoint_t v30 = v28;
        os_unfair_lock_lock((os_unfair_lock_t)v30 + 28);
        id v31 = v30[8];
        os_unfair_lock_unlock((os_unfair_lock_t)v30 + 28);

        *(_DWORD *)buf = 136447746;
        uint64_t v69 = "nw_endpoint_flow_connect";
        __int16 v70 = 2082;
        v71 = id_str;
        __int16 v72 = 2082;
        v73 = v12;
        __int16 v74 = 2082;
        BOOL v75 = (void *)v14;
        __int16 v76 = 2082;
        os_log_type_t v77 = v61;
        __int16 v78 = 2082;
        BOOL v79 = v29;
        __int16 v80 = 2114;
        id v81 = v31;
        _os_log_impl(&dword_1830D4000, v8, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] connect bottom protocol", buf, 0x48u);
      }
    }

    goto LABEL_43;
  }
  uint64_t v4 = (void *)*((void *)v3 + 5);
  if (v4 == &nw_protocol_ref_counted_handle)
  {
    uint64_t v20 = *((void *)v3 + 11);
    if (v20) {
      *((void *)v3 + 11) = v20 + 1;
    }
    char v5 = -1;
  }
  else
  {
    char v5 = 0;
  }
  *(void *)BOOL v66 = v3;
  char v67 = v5;
  int v21 = (void *)*((void *)v2 + 52);
  if (v21 == &nw_protocol_ref_counted_handle)
  {
    uint64_t v23 = *((void *)v2 + 58);
    if (v23) {
      *((void *)v2 + 58) = v23 + 1;
    }
    char v22 = -1;
  }
  else
  {
    char v22 = 0;
  }
  uint64_t v64 = (uint64_t)v2 + 376;
  char v65 = v22;
  uint64_t v24 = *((void *)v3 + 3);
  if (v24)
  {
    double v25 = *(uint64_t (**)(const char *, char *))(v24 + 24);
    if (v25)
    {
      uint64_t v26 = v25(v3, (char *)v2 + 376);
      if (v21 != &nw_protocol_ref_counted_handle) {
        goto LABEL_31;
      }
      goto LABEL_92;
    }
  }
  os_log_type_t v32 = __nwlog_obj();
  int v33 = (const char *)*((void *)v3 + 2);
  *(_DWORD *)buf = 136446722;
  uint64_t v69 = "__nw_protocol_connect";
  if (!v33) {
    int v33 = "invalid";
  }
  __int16 v70 = 2082;
  v71 = (void *)v33;
  __int16 v72 = 2048;
  v73 = v3;
  uint64_t v34 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v62 = 0;
  if (__nwlog_fault(v34, &type, &v62))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      size_t v35 = __nwlog_obj();
      os_log_type_t v36 = type;
      if (os_log_type_enabled(v35, type))
      {
        os_log_type_t v37 = (const char *)*((void *)v3 + 2);
        if (!v37) {
          os_log_type_t v37 = "invalid";
        }
        *(_DWORD *)buf = 136446722;
        uint64_t v69 = "__nw_protocol_connect";
        __int16 v70 = 2082;
        v71 = (void *)v37;
        __int16 v72 = 2048;
        v73 = v3;
        _os_log_impl(&dword_1830D4000, v35, v36, "%{public}s protocol %{public}s (%p) has invalid connect callback", buf, 0x20u);
      }
LABEL_88:

      goto LABEL_89;
    }
    if (!v62)
    {
      size_t v35 = __nwlog_obj();
      os_log_type_t v56 = type;
      if (os_log_type_enabled(v35, type))
      {
        id v57 = (const char *)*((void *)v3 + 2);
        if (!v57) {
          id v57 = "invalid";
        }
        *(_DWORD *)buf = 136446722;
        uint64_t v69 = "__nw_protocol_connect";
        __int16 v70 = 2082;
        v71 = (void *)v57;
        __int16 v72 = 2048;
        v73 = v3;
        _os_log_impl(&dword_1830D4000, v35, v56, "%{public}s protocol %{public}s (%p) has invalid connect callback, backtrace limit exceeded", buf, 0x20u);
      }
      goto LABEL_88;
    }
    v42 = (char *)__nw_create_backtrace_string();
    size_t v35 = __nwlog_obj();
    os_log_type_t v43 = type;
    BOOL v44 = os_log_type_enabled(v35, type);
    if (!v42)
    {
      if (v44)
      {
        BOOL v59 = (const char *)*((void *)v3 + 2);
        if (!v59) {
          BOOL v59 = "invalid";
        }
        *(_DWORD *)buf = 136446722;
        uint64_t v69 = "__nw_protocol_connect";
        __int16 v70 = 2082;
        v71 = (void *)v59;
        __int16 v72 = 2048;
        v73 = v3;
        _os_log_impl(&dword_1830D4000, v35, v43, "%{public}s protocol %{public}s (%p) has invalid connect callback, no backtrace", buf, 0x20u);
      }
      goto LABEL_88;
    }
    if (v44)
    {
      id v45 = (const char *)*((void *)v3 + 2);
      if (!v45) {
        id v45 = "invalid";
      }
      *(_DWORD *)buf = 136446978;
      uint64_t v69 = "__nw_protocol_connect";
      __int16 v70 = 2082;
      v71 = (void *)v45;
      __int16 v72 = 2048;
      v73 = v3;
      __int16 v74 = 2082;
      BOOL v75 = v42;
      _os_log_impl(&dword_1830D4000, v35, v43, "%{public}s protocol %{public}s (%p) has invalid connect callback, dumping backtrace:%{public}s", buf, 0x2Au);
    }

    free(v42);
  }
LABEL_89:
  if (v34) {
    free(v34);
  }
  uint64_t v26 = 0;
  if (v21 != &nw_protocol_ref_counted_handle)
  {
LABEL_31:
    if (v4 == &nw_protocol_ref_counted_handle) {
      goto LABEL_93;
    }
    goto LABEL_94;
  }
LABEL_92:
  nw::release_if_needed<nw_protocol *>(&v64);
  if (v4 == &nw_protocol_ref_counted_handle) {
LABEL_93:
  }
    nw::release_if_needed<nw_protocol *>((uint64_t *)v66);
LABEL_94:

  return v26;
}

void sub_183289D00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_udp_options_get_use_quic_stats(void *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (nw_protocol_options_is_udp(v1))
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000;
    char v16 = 0;
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_udp_options_get_use_quic_stats_block_invoke;
    v12[3] = &unk_1E5248E90;
    v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    BOOL v2 = *(unsigned char *)(*(void *)&buf[8] + 24) != 0;
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  uint64_t v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_udp_options_get_use_quic_stats";
  char v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_udp_options_get_use_quic_stats";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_options_is_udp(options)", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_udp_options_get_use_quic_stats";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_udp(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_udp_options_get_use_quic_stats";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_udp(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_udp_options_get_use_quic_stats";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_options_is_udp(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
  BOOL v2 = 0;
LABEL_3:

  return v2;
}

void sub_18328A08C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

uint64_t ___ZL34nw_endpoint_transform_add_childrenP30NWConcrete_nw_endpoint_handler_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v139 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v122 = 0;
  int v123 = (id *)&v122;
  uint64_t v124 = 0x3032000000;
  BOOL v125 = __Block_byref_object_copy__79114;
  os_log_type_t v126 = __Block_byref_object_dispose__79115;
  id v127 = nw_protocol_transform_copy_endpoint(v4);
  uint64_t v118 = 0;
  char v119 = &v118;
  uint64_t v120 = 0x2020000000;
  char v121 = 0;
  id v5 = nw_parameters_copy_url_endpoint(*(void **)(a1 + 32));
  if (!v5) {
    id v5 = *(id *)(*(void *)(a1 + 40) + 56);
  }
  if (!nw_protocol_transform_supports_endpoint(v4, v5))
  {
    *((unsigned char *)v119 + 24) = 1;
    if (gLogDatapath)
    {
      if ((nw_endpoint_handler_get_logging_disabled(*(void **)(a1 + 48)) & 1) == 0)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        BOOL v61 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v61, OS_LOG_TYPE_DEBUG))
        {
          id_string = nw_endpoint_handler_get_id_string(*(void **)(a1 + 48));
          v63 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 48));
          uint64_t v64 = id_string;
          nw_endpoint_t v102 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 48));
          logging_description = nw_endpoint_get_logging_description(v102);
          BOOL v66 = nw_endpoint_handler_state_string(*(void **)(a1 + 48));
          char v67 = nw_endpoint_handler_mode_string(*(void **)(a1 + 48));
          id v68 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 48));
          *(_DWORD *)buf = 136447746;
          *(void *)&uint8_t buf[4] = "nw_endpoint_transform_add_children_block_invoke";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v64;
          __int16 v129 = 2082;
          os_log_type_t v130 = v63;
          __int16 v131 = 2082;
          v132 = logging_description;
          __int16 v133 = 2082;
          v134 = v66;
          __int16 v135 = 2082;
          os_log_type_t v136 = v67;
          __int16 v137 = 2114;
          id v138 = v68;
          _os_log_impl(&dword_1830D4000, v61, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Skipping transform due to unsupported endpoint", buf, 0x48u);
        }
      }
    }
  }
  if (!*((unsigned char *)v119 + 24))
  {
    if (v123[5]) {
      goto LABEL_96;
    }
    nw_endpoint_t v19 = *(void **)(*(void *)(a1 + 40) + 56);
    v112[0] = MEMORY[0x1E4F143A8];
    v112[1] = 3221225472;
    v112[2] = ___ZL34nw_endpoint_transform_add_childrenP30NWConcrete_nw_endpoint_handler_block_invoke_97;
    v112[3] = &unk_1E5249718;
    os_log_type_t v116 = &v122;
    id v113 = v4;
    int v117 = &v118;
    id v114 = *(id *)(a1 + 48);
    id v115 = *(id *)(a1 + 40);
    nw_endpoint_enumerate_alternatives(v19, v112);

    if (!*((unsigned char *)v119 + 24))
    {
LABEL_96:
      if (nw_protocol_transform_get_prohibit_direct(v4)) {
        *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = 0;
      }
      if (!v123[5]) {
        objc_storeStrong(v123 + 5, *(id *)(*(void *)(a1 + 40) + 56));
      }
      id v6 = *(id *)(a1 + 32);
      os_log_type_t v7 = (NWConcrete_nw_parameters *)-[NWConcrete_nw_parameters initWithParameters:stripConnected:shallowCopy:]((id *)[NWConcrete_nw_parameters alloc], v6, 0, 0);

      nw_protocol_transform_modify_parameters(v4, v7);
      if (nw_parameters_get_upper_transport_protocol(v7) != 253)
      {
        int is_above_failure_threshold = 0;
        goto LABEL_36;
      }
      id v8 = nw_endpoint_handler_copy_association(*(void **)(a1 + 48), 0);
      BOOL v101 = v8;
      if (!v8)
      {
        int is_above_failure_threshold = 0;
        goto LABEL_28;
      }
      LOBYTE(v108) = 0;
      int is_above_failure_threshold = nw_quic_is_above_failure_threshold(v8, &v108);
      if (!is_above_failure_threshold)
      {
LABEL_28:
        BOOL v20 = networkd_settings_get_BOOL((const char *)nw_setting_disable_quic_race);
        BOOL v21 = networkd_settings_get_BOOL((const char *)nw_setting_disable_quic);
        if (!v20 && !v21)
        {
          char v22 = *(void **)(a1 + 56);
          BOOL has_custom_proxy_configs = nw_parameters_has_custom_proxy_configs(*(void **)(a1 + 32));
          if (!nw_path_should_use_proxy(v22, has_custom_proxy_configs))
          {
LABEL_35:

LABEL_36:
            *(void *)buf = 0;
            *(void *)&buf[8] = 0;
            if (nw_path_get_client_id(*(void **)(a1 + 56), buf)) {
              nw_parameters_set_parent_id_inner(v7, buf, 0);
            }
            inner = nw_endpoint_handler_create_inner(v123[5], v7, nw_endpoint_transform_receive_report, *(void **)(a1 + 48), *(void **)(a1 + 48), 0, 0);
            uint64_t v26 = *(void *)(a1 + 40);
            if (*(void *)(v26 + 8))
            {
              if (!*(void *)(v26 + 24)) {
                goto LABEL_42;
              }
            }
            else
            {
              BOOL v27 = nw_array_create();
              uint64_t v28 = *(void *)(a1 + 40);
              os_log_type_t v29 = *(void **)(v28 + 8);
              *(void *)(v28 + 8) = v27;

              if (!*(void *)(*(void *)(a1 + 40) + 24))
              {
LABEL_42:
                xpc_object_t v30 = xpc_array_create(0, 0);
                uint64_t v31 = *(void *)(a1 + 40);
                os_log_type_t v32 = *(void **)(v31 + 24);
                *(void *)(v31 + 24) = v30;
              }
            }
            fallback_unsigned int mode = nw_protocol_transform_get_fallback_mode(v4);
            if (is_above_failure_threshold)
            {
              if (!*(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 40))
              {
                BOOL v34 = nw_array_create();
                uint64_t v35 = *(void *)(*(void *)(a1 + 72) + 8);
                os_log_type_t v36 = *(void **)(v35 + 40);
                *(void *)(v35 + 40) = v34;
              }
              if (!*(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 40))
              {
                xpc_object_t v37 = xpc_array_create(0, 0);
                uint64_t v38 = *(void *)(*(void *)(a1 + 80) + 8);
                os_log_type_t v39 = *(void **)(v38 + 40);
                *(void *)(v38 + 40) = v37;
              }
              nw_array_append(*(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 40), inner);
              __int16 v40 = (xpc_object_t *)(*(void *)(*(void *)(a1 + 80) + 8) + 40);
            }
            else
            {
              nw_array_append(*(void *)(*(void *)(a1 + 40) + 8), inner);
              __int16 v40 = (xpc_object_t *)(*(void *)(a1 + 40) + 24);
            }
            xpc_array_set_int64(*v40, 0xFFFFFFFFFFFFFFFFLL, fallback_mode);

            goto LABEL_59;
          }
          uint64_t v24 = (atomic_uchar *)nw_parameters_copy_custom_proxy_configs(*(void **)(a1 + 32));
          if (!v24) {
            uint64_t v24 = (atomic_uchar *)nw_path_copy_proxy_configs(*(void **)(a1 + 56));
          }
          uint64_t v108 = 0;
          id v109 = &v108;
          uint64_t v110 = 0x2020000000;
          char v111 = 0;
          v103[0] = MEMORY[0x1E4F143A8];
          v103[1] = 3221225472;
          v103[2] = ___ZL34nw_endpoint_transform_add_childrenP30NWConcrete_nw_endpoint_handler_block_invoke_99;
          v103[3] = &unk_1E5249740;
          id v106 = &v122;
          v104 = v7;
          id v105 = *(id *)(a1 + 56);
          v107 = &v108;
          nw_array_apply(v24, (uint64_t)v103);
          if (*((unsigned char *)v109 + 24))
          {

            _Block_object_dispose(&v108, 8);
            goto LABEL_35;
          }
          int minimize_logging = nw_endpoint_handler_get_minimize_logging(*(void **)(a1 + 48));
          char logging_disabled = nw_endpoint_handler_get_logging_disabled(*(void **)(a1 + 48));
          if (minimize_logging)
          {
            if (logging_disabled) {
              goto LABEL_69;
            }
            id v100 = v7;
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
            }
            os_log_t log = (id)gconnectionLogObj;
            if (os_log_type_enabled(log, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v89 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 48));
              __int16 v80 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 48));
              nw_endpoint_t v81 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 48));
              uint64_t v82 = nw_endpoint_get_logging_description(v81);
              BOOL v83 = nw_endpoint_handler_state_string(*(void **)(a1 + 48));
              v84 = nw_endpoint_handler_mode_string(*(void **)(a1 + 48));
              id v85 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 48));
              *(_DWORD *)buf = 136447746;
              *(void *)&uint8_t buf[4] = "nw_endpoint_transform_add_children_block_invoke_2";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = v89;
              __int16 v129 = 2082;
              os_log_type_t v130 = v80;
              __int16 v131 = 2082;
              v132 = v82;
              __int16 v133 = 2082;
              v134 = v83;
              __int16 v135 = 2082;
              os_log_type_t v136 = v84;
              __int16 v137 = 2114;
              id v138 = v85;
              _os_log_impl(&dword_1830D4000, log, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Non-QUIC proxies detected, denying QUIC attempt", buf, 0x48u);

              os_log_type_t v7 = v100;
            }
          }
          else
          {
            if (logging_disabled)
            {
LABEL_69:
              *(unsigned char *)(*(void *)(a1 + 40) + 94) = 1;

              _Block_object_dispose(&v108, 8);
              goto LABEL_59;
            }
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
            }
            __int16 v54 = (id)gconnectionLogObj;
            if (!os_log_type_enabled(v54, OS_LOG_TYPE_INFO))
            {
LABEL_68:

              goto LABEL_69;
            }
            id v55 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 48));
            os_log_type_t v87 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 48));
            os_log_t log = v54;
            v97 = v7;
            nw_endpoint_t v56 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 48));
            id v57 = nw_endpoint_get_logging_description(v56);
            os_log_type_t v58 = nw_endpoint_handler_state_string(*(void **)(a1 + 48));
            BOOL v59 = nw_endpoint_handler_mode_string(*(void **)(a1 + 48));
            id v60 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 48));
            *(_DWORD *)buf = 136447746;
            *(void *)&uint8_t buf[4] = "nw_endpoint_transform_add_children_block_invoke";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v55;
            __int16 v129 = 2082;
            os_log_type_t v130 = v87;
            __int16 v131 = 2082;
            v132 = v57;
            __int16 v133 = 2082;
            v134 = v58;
            __int16 v135 = 2082;
            os_log_type_t v136 = v59;
            __int16 v137 = 2114;
            id v138 = v60;
            _os_log_impl(&dword_1830D4000, log, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Non-QUIC proxies detected, denying QUIC attempt", buf, 0x48u);

            os_log_type_t v7 = v97;
          }
          __int16 v54 = log;
          goto LABEL_68;
        }
        int v41 = nw_endpoint_handler_get_minimize_logging(*(void **)(a1 + 48));
        char v42 = nw_endpoint_handler_get_logging_disabled(*(void **)(a1 + 48));
        if (v41)
        {
          if (v42) {
            goto LABEL_58;
          }
          v98 = v7;
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          os_log_type_t v43 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v43, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v69 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 48));
            logc = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 48));
            nw_endpoint_t v70 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 48));
            v71 = nw_endpoint_get_logging_description(v70);
            __int16 v72 = nw_endpoint_handler_state_string(*(void **)(a1 + 48));
            v73 = nw_endpoint_handler_mode_string(*(void **)(a1 + 48));
            id v74 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 48));
            *(_DWORD *)buf = 136447746;
            *(void *)&uint8_t buf[4] = "nw_endpoint_transform_add_children_block_invoke";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v69;
            __int16 v129 = 2082;
            os_log_type_t v130 = logc;
            __int16 v131 = 2082;
            v132 = v71;
            __int16 v133 = 2082;
            v134 = v72;
            __int16 v135 = 2082;
            os_log_type_t v136 = v73;
            __int16 v137 = 2114;
            id v138 = v74;
            _os_log_impl(&dword_1830D4000, v43, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] QUIC disabled, denying race attempt", buf, 0x48u);

            os_log_type_t v7 = v98;
          }
        }
        else
        {
          if (v42)
          {
LABEL_58:
            *(unsigned char *)(*(void *)(a1 + 40) + 94) = 1;

LABEL_59:
            goto LABEL_60;
          }
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          os_log_type_t v43 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
          {
            os_log_type_t v96 = v7;
            BOOL v44 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 48));
            id v45 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 48));
            logb = v43;
            nw_endpoint_t v46 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 48));
            os_log_type_t v47 = nw_endpoint_get_logging_description(v46);
            BOOL v48 = nw_endpoint_handler_state_string(*(void **)(a1 + 48));
            os_log_type_t v49 = nw_endpoint_handler_mode_string(*(void **)(a1 + 48));
            id v50 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 48));
            *(_DWORD *)buf = 136447746;
            *(void *)&uint8_t buf[4] = "nw_endpoint_transform_add_children_block_invoke";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v44;
            __int16 v129 = 2082;
            os_log_type_t v130 = v45;
            __int16 v131 = 2082;
            v132 = v47;
            __int16 v133 = 2082;
            v134 = v48;
            __int16 v135 = 2082;
            os_log_type_t v136 = v49;
            __int16 v137 = 2114;
            id v138 = v50;
            os_log_type_t v43 = logb;
            _os_log_impl(&dword_1830D4000, logb, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] QUIC disabled, denying race attempt", buf, 0x48u);

            os_log_type_t v7 = v96;
          }
        }

        goto LABEL_58;
      }
      int v10 = nw_endpoint_handler_get_minimize_logging(*(void **)(a1 + 48));
      char v11 = nw_endpoint_handler_get_logging_disabled(*(void **)(a1 + 48));
      if (v10)
      {
        if (v11) {
          goto LABEL_21;
        }
        v99 = v7;
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        os_log_type_t v12 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
        {
          logd = nw_endpoint_handler_get_id_string(*(void **)(a1 + 48));
          BOOL v88 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 48));
          nw_endpoint_t v75 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 48));
          __int16 v76 = nw_endpoint_get_logging_description(v75);
          os_log_type_t v77 = nw_endpoint_handler_state_string(*(void **)(a1 + 48));
          __int16 v78 = nw_endpoint_handler_mode_string(*(void **)(a1 + 48));
          id v79 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 48));
          *(_DWORD *)buf = 136447746;
          *(void *)&uint8_t buf[4] = "nw_endpoint_transform_add_children_block_invoke";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = logd;
          __int16 v129 = 2082;
          os_log_type_t v130 = v88;
          __int16 v131 = 2082;
          v132 = v76;
          __int16 v133 = 2082;
          v134 = v77;
          __int16 v135 = 2082;
          os_log_type_t v136 = v78;
          __int16 v137 = 2114;
          id v138 = v79;
          _os_log_impl(&dword_1830D4000, v12, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] QUIC is beyond failure threshold, deferring", buf, 0x48u);

          os_log_type_t v7 = v99;
        }
      }
      else
      {
        if (v11)
        {
LABEL_21:
          uint64_t v18 = 92;
          if ((_BYTE)v108) {
            uint64_t v18 = 93;
          }
          *(unsigned char *)(*(void *)(a1 + 40) + v18) = 1;
          goto LABEL_28;
        }
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        os_log_type_t v12 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
        {
          char v13 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 48));
          nw_endpoint_t v95 = v7;
          v86 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 48));
          os_log_t loga = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 48));
          os_log_type_t v14 = nw_endpoint_get_logging_description(loga);
          BOOL v15 = nw_endpoint_handler_state_string(*(void **)(a1 + 48));
          char v16 = nw_endpoint_handler_mode_string(*(void **)(a1 + 48));
          id v17 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 48));
          *(_DWORD *)buf = 136447746;
          *(void *)&uint8_t buf[4] = "nw_endpoint_transform_add_children_block_invoke";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v13;
          __int16 v129 = 2082;
          os_log_type_t v130 = v86;
          __int16 v131 = 2082;
          v132 = v14;
          __int16 v133 = 2082;
          v134 = v15;
          __int16 v135 = 2082;
          os_log_type_t v136 = v16;
          __int16 v137 = 2114;
          id v138 = v17;
          _os_log_impl(&dword_1830D4000, v12, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] QUIC is beyond failure threshold, deferring", buf, 0x48u);

          os_log_type_t v7 = v95;
        }
      }

      goto LABEL_21;
    }
  }
LABEL_60:

  _Block_object_dispose(&v118, 8);
  _Block_object_dispose(&v122, 8);

  return 1;
}

void sub_18328AF50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,id a44)
{
  _Block_object_dispose(&a22, 8);
  _Block_object_dispose(&a35, 8);
  _Block_object_dispose(&a39, 8);

  _Unwind_Resume(a1);
}

id nw_parameters_copy_url_endpoint(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  BOOL v2 = v1;
  if (v1)
  {
    id v3 = v1[25];
    goto LABEL_3;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v16 = "nw_parameters_copy_url_endpoint";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_parameters_copy_url_endpoint";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          char v16 = "nw_parameters_copy_url_endpoint";
          __int16 v17 = 2082;
          uint64_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_parameters_copy_url_endpoint";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_parameters_copy_url_endpoint";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  id v3 = 0;
LABEL_3:

  return v3;
}

void nw_parameters_set_parent_id_inner(NWConcrete_nw_parameters *a1, const unsigned __int8 *a2, int a3)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = v5;
  if (!v5)
  {
    os_log_type_t v12 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v29 = "nw_parameters_set_parent_id_inner";
    char v13 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (!__nwlog_fault(v13, &type, &v26)) {
      goto LABEL_43;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v29 = "nw_parameters_set_parent_id_inner";
        _os_log_impl(&dword_1830D4000, v14, v15, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v26)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v14 = __nwlog_obj();
      os_log_type_t v19 = type;
      BOOL v20 = os_log_type_enabled(v14, type);
      if (backtrace_string)
      {
        if (v20)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v29 = "nw_parameters_set_parent_id_inner";
          __int16 v30 = 2082;
          uint64_t v31 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v14, v19, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_43:
        if (!v13) {
          goto LABEL_9;
        }
LABEL_44:
        free(v13);
        goto LABEL_9;
      }
      if (v20)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v29 = "nw_parameters_set_parent_id_inner";
        _os_log_impl(&dword_1830D4000, v14, v19, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v14 = __nwlog_obj();
      os_log_type_t v24 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v29 = "nw_parameters_set_parent_id_inner";
        _os_log_impl(&dword_1830D4000, v14, v24, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_42:

    goto LABEL_43;
  }
  if (a2)
  {
    *(_OWORD *)v5->value.parent_id = *(_OWORD *)a2;
    if (a3)
    {
      required_interface = v5->path_parameters->required_interface;
      if (required_interface)
      {
        if (*((void *)required_interface + 16))
        {
          os_log_type_t v8 = (void *)*((void *)required_interface + 17);
          if (!v8)
          {
            xpc_object_t v9 = xpc_array_create(0, 0);
            os_log_type_t v10 = v6->path_parameters->required_interface;
            BOOL v11 = (void *)*((void *)v10 + 17);
            *((void *)v10 + 17) = v9;

            os_log_type_t v8 = (void *)*((void *)v6->path_parameters->required_interface + 17);
          }
          xpc_array_set_uuid(v8, 0xFFFFFFFFFFFFFFFFLL, a2);
        }
      }
    }
    goto LABEL_9;
  }
  char v16 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v29 = "nw_parameters_set_parent_id_inner";
  char v13 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v26 = 0;
  if (!__nwlog_fault(v13, &type, &v26)) {
    goto LABEL_43;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    os_log_type_t v14 = __nwlog_obj();
    os_log_type_t v17 = type;
    if (os_log_type_enabled(v14, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v29 = "nw_parameters_set_parent_id_inner";
      _os_log_impl(&dword_1830D4000, v14, v17, "%{public}s called with null parent_id", buf, 0xCu);
    }
    goto LABEL_42;
  }
  if (!v26)
  {
    os_log_type_t v14 = __nwlog_obj();
    os_log_type_t v25 = type;
    if (os_log_type_enabled(v14, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v29 = "nw_parameters_set_parent_id_inner";
      _os_log_impl(&dword_1830D4000, v14, v25, "%{public}s called with null parent_id, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_42;
  }
  BOOL v21 = (char *)__nw_create_backtrace_string();
  os_log_type_t v14 = __nwlog_obj();
  os_log_type_t v22 = type;
  BOOL v23 = os_log_type_enabled(v14, type);
  if (!v21)
  {
    if (v23)
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v29 = "nw_parameters_set_parent_id_inner";
      _os_log_impl(&dword_1830D4000, v14, v22, "%{public}s called with null parent_id, no backtrace", buf, 0xCu);
    }
    goto LABEL_42;
  }
  if (v23)
  {
    *(_DWORD *)buf = 136446466;
    os_log_type_t v29 = "nw_parameters_set_parent_id_inner";
    __int16 v30 = 2082;
    uint64_t v31 = v21;
    _os_log_impl(&dword_1830D4000, v14, v22, "%{public}s called with null parent_id, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v21);
  if (v13) {
    goto LABEL_44;
  }
LABEL_9:
}

void sub_18328B87C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id nw_protocol_transform_copy_endpoint(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  BOOL v2 = v1;
  if (v1)
  {
    id v3 = v1[4];
    goto LABEL_3;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v16 = "nw_protocol_transform_copy_endpoint";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_protocol_transform_copy_endpoint";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null transform", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          char v16 = "nw_protocol_transform_copy_endpoint";
          __int16 v17 = 2082;
          uint64_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null transform, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_protocol_transform_copy_endpoint";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null transform, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_protocol_transform_copy_endpoint";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null transform, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  id v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_protocol_transform_get_prohibit_direct(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  BOOL v2 = v1;
  if (v1)
  {
    uint64_t v3 = (v1[8] >> 4) & 1;
    goto LABEL_3;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v16 = "nw_protocol_transform_get_prohibit_direct";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_protocol_transform_get_prohibit_direct";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null transform", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          char v16 = "nw_protocol_transform_get_prohibit_direct";
          __int16 v17 = 2082;
          uint64_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null transform, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_protocol_transform_get_prohibit_direct";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null transform, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_protocol_transform_get_prohibit_direct";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null transform, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_protocol_transform_get_fallback_mode(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  BOOL v2 = v1;
  if (v1)
  {
    uint64_t v3 = v1[4];
    goto LABEL_3;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v16 = "nw_protocol_transform_get_fallback_mode";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_protocol_transform_get_fallback_mode";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null transform", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          char v16 = "nw_protocol_transform_get_fallback_mode";
          __int16 v17 = 2082;
          uint64_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null transform, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_protocol_transform_get_fallback_mode";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null transform, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_protocol_transform_get_fallback_mode";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null transform, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_quic_is_above_failure_threshold(void *a1, unsigned char *a2)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  if (v3)
  {
    if (a2)
    {
      if (nw_protocol_copy_quic_connection_definition::onceToken != -1) {
        dispatch_once(&nw_protocol_copy_quic_connection_definition::onceToken, &__block_literal_global_55981);
      }
      id v4 = (id)nw_protocol_copy_quic_connection_definition::quic_definition;
      if (v4)
      {
        cached_content_for_protocol = (_DWORD *)nw_association_get_cached_content_for_protocol(v3, v4);
        if (cached_content_for_protocol)
        {
          int64_t int64_with_default = networkd_settings_get_int64_with_default((const char *)nw_setting_quic_failure_threshold, 10);
          int64_t v7 = networkd_settings_get_int64_with_default((const char *)nw_setting_quic_application_failure_threshold, 3);
          if (cached_content_for_protocol[6]
            || int64_with_default >= cached_content_for_protocol[7]
            && int64_with_default >= cached_content_for_protocol[8])
          {
            uint64_t v8 = 0;
          }
          else
          {
            *a2 = 0;
            if (gLogDatapath)
            {
              int64_t v35 = v7;
              os_log_type_t v36 = __nwlog_obj();
              if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
              {
                int v37 = cached_content_for_protocol[6];
                int v38 = cached_content_for_protocol[7];
                int v39 = cached_content_for_protocol[8];
                *(_DWORD *)buf = 136446978;
                BOOL v44 = "nw_quic_is_above_failure_threshold";
                __int16 v45 = 1024;
                *(_DWORD *)nw_endpoint_t v46 = v37;
                *(_WORD *)&v46[4] = 1024;
                *(_DWORD *)&v46[6] = v38;
                __int16 v47 = 1024;
                int v48 = v39;
                _os_log_impl(&dword_1830D4000, v36, OS_LOG_TYPE_DEBUG, "%{public}s QUIC above failure threshold (success: %u, fail: %u, cancel: %u)", buf, 0x1Eu);
              }

              uint64_t v8 = 1;
              int64_t v7 = v35;
            }
            else
            {
              uint64_t v8 = 1;
            }
          }
          int64_t v9 = cached_content_for_protocol[10];
          if (cached_content_for_protocol[9] < v9 && v7 < v9)
          {
            uint64_t v8 = 1;
            *a2 = 1;
            if (gLogDatapath)
            {
              BOOL v11 = __nwlog_obj();
              if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
              {
                int v12 = cached_content_for_protocol[9];
                int v13 = cached_content_for_protocol[10];
                *(_DWORD *)buf = 136446722;
                BOOL v44 = "nw_quic_is_above_failure_threshold";
                __int16 v45 = 1024;
                *(_DWORD *)nw_endpoint_t v46 = v12;
                *(_WORD *)&v46[4] = 1024;
                *(_DWORD *)&v46[6] = v13;
                _os_log_impl(&dword_1830D4000, v11, OS_LOG_TYPE_DEBUG, "%{public}s QUIC above application failure threshold (success: %u, fail: %u)", buf, 0x18u);
              }
            }
          }
          goto LABEL_79;
        }
LABEL_78:
        uint64_t v8 = 0;
LABEL_79:

        goto LABEL_80;
      }
      BOOL v20 = __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      BOOL v44 = "nw_quic_is_above_failure_threshold";
      BOOL v21 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v41 = 0;
      if (__nwlog_fault(v21, &type, &v41))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          os_log_type_t v22 = __nwlog_obj();
          os_log_type_t v23 = type;
          if (os_log_type_enabled(v22, type))
          {
            *(_DWORD *)buf = 136446210;
            BOOL v44 = "nw_quic_is_above_failure_threshold";
            _os_log_impl(&dword_1830D4000, v22, v23, "%{public}s called with null definition", buf, 0xCu);
          }
        }
        else if (v41)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          os_log_type_t v22 = __nwlog_obj();
          os_log_type_t v30 = type;
          BOOL v31 = os_log_type_enabled(v22, type);
          if (backtrace_string)
          {
            if (v31)
            {
              *(_DWORD *)buf = 136446466;
              BOOL v44 = "nw_quic_is_above_failure_threshold";
              __int16 v45 = 2082;
              *(void *)nw_endpoint_t v46 = backtrace_string;
              _os_log_impl(&dword_1830D4000, v22, v30, "%{public}s called with null definition, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(backtrace_string);
            goto LABEL_76;
          }
          if (v31)
          {
            *(_DWORD *)buf = 136446210;
            BOOL v44 = "nw_quic_is_above_failure_threshold";
            _os_log_impl(&dword_1830D4000, v22, v30, "%{public}s called with null definition, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          os_log_type_t v22 = __nwlog_obj();
          os_log_type_t v34 = type;
          if (os_log_type_enabled(v22, type))
          {
            *(_DWORD *)buf = 136446210;
            BOOL v44 = "nw_quic_is_above_failure_threshold";
            _os_log_impl(&dword_1830D4000, v22, v34, "%{public}s called with null definition, backtrace limit exceeded", buf, 0xCu);
          }
        }
      }
LABEL_76:
      if (v21) {
        free(v21);
      }
      goto LABEL_78;
    }
    uint64_t v18 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v44 = "nw_quic_is_above_failure_threshold";
    os_log_type_t v15 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v41 = 0;
    if (__nwlog_fault(v15, &type, &v41))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        char v16 = __nwlog_obj();
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v16, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v44 = "nw_quic_is_above_failure_threshold";
          _os_log_impl(&dword_1830D4000, v16, v19, "%{public}s called with null application", buf, 0xCu);
        }
LABEL_69:

        goto LABEL_70;
      }
      if (!v41)
      {
        char v16 = __nwlog_obj();
        os_log_type_t v33 = type;
        if (os_log_type_enabled(v16, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v44 = "nw_quic_is_above_failure_threshold";
          _os_log_impl(&dword_1830D4000, v16, v33, "%{public}s called with null application, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_69;
      }
      os_log_type_t v24 = (char *)__nw_create_backtrace_string();
      char v16 = __nwlog_obj();
      os_log_type_t v27 = type;
      BOOL v28 = os_log_type_enabled(v16, type);
      if (!v24)
      {
        if (v28)
        {
          *(_DWORD *)buf = 136446210;
          BOOL v44 = "nw_quic_is_above_failure_threshold";
          _os_log_impl(&dword_1830D4000, v16, v27, "%{public}s called with null application, no backtrace", buf, 0xCu);
        }
        goto LABEL_69;
      }
      if (v28)
      {
        *(_DWORD *)buf = 136446466;
        BOOL v44 = "nw_quic_is_above_failure_threshold";
        __int16 v45 = 2082;
        *(void *)nw_endpoint_t v46 = v24;
        _os_log_impl(&dword_1830D4000, v16, v27, "%{public}s called with null application, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_46;
    }
  }
  else
  {
    os_log_type_t v14 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v44 = "nw_quic_is_above_failure_threshold";
    os_log_type_t v15 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v41 = 0;
    if (__nwlog_fault(v15, &type, &v41))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        char v16 = __nwlog_obj();
        os_log_type_t v17 = type;
        if (os_log_type_enabled(v16, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v44 = "nw_quic_is_above_failure_threshold";
          _os_log_impl(&dword_1830D4000, v16, v17, "%{public}s called with null association", buf, 0xCu);
        }
        goto LABEL_69;
      }
      if (!v41)
      {
        char v16 = __nwlog_obj();
        os_log_type_t v32 = type;
        if (os_log_type_enabled(v16, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v44 = "nw_quic_is_above_failure_threshold";
          _os_log_impl(&dword_1830D4000, v16, v32, "%{public}s called with null association, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_69;
      }
      os_log_type_t v24 = (char *)__nw_create_backtrace_string();
      char v16 = __nwlog_obj();
      os_log_type_t v25 = type;
      BOOL v26 = os_log_type_enabled(v16, type);
      if (!v24)
      {
        if (v26)
        {
          *(_DWORD *)buf = 136446210;
          BOOL v44 = "nw_quic_is_above_failure_threshold";
          _os_log_impl(&dword_1830D4000, v16, v25, "%{public}s called with null association, no backtrace", buf, 0xCu);
        }
        goto LABEL_69;
      }
      if (v26)
      {
        *(_DWORD *)buf = 136446466;
        BOOL v44 = "nw_quic_is_above_failure_threshold";
        __int16 v45 = 2082;
        *(void *)nw_endpoint_t v46 = v24;
        _os_log_impl(&dword_1830D4000, v16, v25, "%{public}s called with null association, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_46:

      free(v24);
    }
  }
LABEL_70:
  if (v15) {
    free(v15);
  }
  uint64_t v8 = 0;
LABEL_80:

  return v8;
}

void sub_18328C8D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id nw_endpoint_handler_copy_association(void *a1, int a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    if (a2) {
      nw_endpoint_handler_initialize_association(v3);
    }
    id v5 = v4[7];
    goto LABEL_5;
  }
  int64_t v7 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v18 = "nw_endpoint_handler_copy_association";
  uint64_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      int64_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v18 = "nw_endpoint_handler_copy_association";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null handler", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int64_t v9 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v18 = "nw_endpoint_handler_copy_association";
          __int16 v19 = 2082;
          BOOL v20 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v18 = "nw_endpoint_handler_copy_association";
        _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null handler, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int64_t v9 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v18 = "nw_endpoint_handler_copy_association";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_22:
  if (v8) {
    free(v8);
  }
  id v5 = 0;
LABEL_5:

  return v5;
}

void sub_18328CB94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_association_force_update(void *a1, void *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  if (v3)
  {
    if ((*((unsigned char *)v3 + 76) & 2) == 0)
    {
      *((unsigned char *)v3 + 76) |= 2u;
      nw_path_evaluator_force_update(*((void **)v3 + 3), v4);
      *((unsigned char *)v3 + 76) &= ~2u;
    }
    goto LABEL_4;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v16 = "nw_association_force_update";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      int64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_association_force_update";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null association", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int64_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          char v16 = "nw_association_force_update";
          __int16 v17 = 2082;
          uint64_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null association, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_21;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_association_force_update";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null association, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int64_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_association_force_update";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null association, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_21:
  if (v6) {
    free(v6);
  }
LABEL_4:
}

void sub_18328CE68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_path_evaluator_force_update(void *a1, void *a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  if (v3)
  {
    os_unfair_lock_lock((os_unfair_lock_t)v3 + 24);
    unsigned int v5 = *((_DWORD *)v3 + 25);
    os_unfair_lock_unlock((os_unfair_lock_t)v3 + 24);
    id v6 = nw_parameters_copy_context(*((void **)v3 + 1));
    nw_path_necp_check_for_updates(v6, (_OWORD *)v3 + 5, v5);

    goto LABEL_3;
  }
  int64_t v7 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v18 = "nw_path_evaluator_force_update";
  os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      int64_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v18 = "nw_path_evaluator_force_update";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null evaluator", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int64_t v9 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v18 = "nw_path_evaluator_force_update";
          __int16 v19 = 2082;
          BOOL v20 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null evaluator, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v18 = "nw_path_evaluator_force_update";
        _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null evaluator, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int64_t v9 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v18 = "nw_path_evaluator_force_update";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null evaluator, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v8) {
    free(v8);
  }
LABEL_3:
}

void sub_18328D14C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_path_necp_check_for_updates(void *a1, _OWORD *a2, unsigned int a3)
{
  uint64_t v152 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  pthread_once(&nw_settings_setup_atfork::pOnce, (void (*)(void))nw_settings_setup_atfork_inner);
  id v139 = v5;
  unsigned int v135 = a3;
  size_t size = (a3 << 9) + 1024;
  BOOL globals_for_path = nw_context_get_globals_for_path(v5);
  lock = (os_unfair_lock_s *)(globals_for_path + 124);
  memset(uu, 0, sizeof(uu));
  __int16 v137 = a2;
  if (!a2) {
    goto LABEL_4;
  }
  *(_OWORD *)uuid_t uu = *a2;
  while (1)
  {
    bzero(v149, 0xC00uLL);
    nw_path_shared_necp_fd(v139);
    unsigned int v6 = necp_client_action();
    int64_t v7 = 0;
    os_log_type_t v8 = v149;
    if ((int)v6 > 0)
    {
LABEL_21:
      os_log_type_t v140 = v7;
      unint64_t v13 = v6;
      if (v6 < 5)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v14 = (id)gLogObj;
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_path_parse_necp_client_id";
        *(_WORD *)&buf[12] = 2048;
        *(void *)&buf[14] = v6;
        char v15 = (void *)_os_log_send_and_compose_impl();

        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v147 = 0;
        if (__nwlog_fault((const char *)v15, &type, &v147))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            char v16 = (id)gLogObj;
            os_log_type_t v17 = type;
            if (os_log_type_enabled(v16, type))
            {
              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_path_parse_necp_client_id";
              *(_WORD *)&buf[12] = 2048;
              *(void *)&buf[14] = v6;
              _os_log_impl(&dword_1830D4000, v16, v17, "%{public}s NECP buffer too short %zu", buf, 0x16u);
            }
          }
          else if (v147)
          {
            backtrace_string = (char *)__nw_create_backtrace_string();
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            char v16 = (id)gLogObj;
            os_log_type_t v41 = type;
            BOOL v42 = os_log_type_enabled(v16, type);
            if (backtrace_string)
            {
              if (v42)
              {
                *(_DWORD *)buf = 136446722;
                *(void *)&uint8_t buf[4] = "nw_path_parse_necp_client_id";
                *(_WORD *)&buf[12] = 2048;
                *(void *)&buf[14] = v6;
                *(_WORD *)&unsigned char buf[22] = 2082;
                *(void *)&unsigned char buf[24] = backtrace_string;
                _os_log_impl(&dword_1830D4000, v16, v41, "%{public}s NECP buffer too short %zu, dumping backtrace:%{public}s", buf, 0x20u);
              }

              free(backtrace_string);
              if (!v15)
              {
LABEL_105:
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                id v54 = (id)gLogObj;
                *(_DWORD *)buf = 136446466;
                *(void *)&uint8_t buf[4] = "nw_path_message_request_in_process_flow_divert";
                *(_WORD *)&buf[12] = 2048;
                *(void *)&buf[14] = v6;
                id v55 = (char *)_os_log_send_and_compose_impl();

                os_log_type_t type = OS_LOG_TYPE_ERROR;
                char v147 = 0;
                if ((__nwlog_fault(v55, &type, &v147) & 1) == 0) {
                  goto LABEL_122;
                }
                if (type == OS_LOG_TYPE_FAULT)
                {
                  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                  networkd_settings_init();
                  nw_endpoint_t v56 = (id)gLogObj;
                  os_log_type_t v57 = type;
                  if (os_log_type_enabled(v56, type))
                  {
                    *(_DWORD *)buf = 136446466;
                    *(void *)&uint8_t buf[4] = "nw_path_message_request_in_process_flow_divert";
                    *(_WORD *)&buf[12] = 2048;
                    *(void *)&buf[14] = v6;
                    _os_log_impl(&dword_1830D4000, v56, v57, "%{public}s NECP buffer too short %zu", buf, 0x16u);
                  }
                }
                else if (v147)
                {
                  os_log_type_t v58 = (char *)__nw_create_backtrace_string();
                  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                  networkd_settings_init();
                  nw_endpoint_t v56 = (id)gLogObj;
                  os_log_type_t v59 = type;
                  BOOL v60 = os_log_type_enabled(v56, type);
                  if (v58)
                  {
                    if (v60)
                    {
                      *(_DWORD *)buf = 136446722;
                      *(void *)&uint8_t buf[4] = "nw_path_message_request_in_process_flow_divert";
                      *(_WORD *)&buf[12] = 2048;
                      *(void *)&buf[14] = v6;
                      *(_WORD *)&unsigned char buf[22] = 2082;
                      *(void *)&unsigned char buf[24] = v58;
                      _os_log_impl(&dword_1830D4000, v56, v59, "%{public}s NECP buffer too short %zu, dumping backtrace:%{public}s", buf, 0x20u);
                    }

                    free(v58);
                    if (!v55) {
                      goto LABEL_199;
                    }
                    goto LABEL_123;
                  }
                  if (v60)
                  {
                    *(_DWORD *)buf = 136446466;
                    *(void *)&uint8_t buf[4] = "nw_path_message_request_in_process_flow_divert";
                    *(_WORD *)&buf[12] = 2048;
                    *(void *)&buf[14] = v6;
                    _os_log_impl(&dword_1830D4000, v56, v59, "%{public}s NECP buffer too short %zu, no backtrace", buf, 0x16u);
                  }
                }
                else
                {
                  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                  networkd_settings_init();
                  nw_endpoint_t v56 = (id)gLogObj;
                  os_log_type_t v61 = type;
                  if (os_log_type_enabled(v56, type))
                  {
                    *(_DWORD *)buf = 136446466;
                    *(void *)&uint8_t buf[4] = "nw_path_message_request_in_process_flow_divert";
                    *(_WORD *)&buf[12] = 2048;
                    *(void *)&buf[14] = v6;
                    _os_log_impl(&dword_1830D4000, v56, v61, "%{public}s NECP buffer too short %zu, backtrace limit exceeded", buf, 0x16u);
                  }
                }
LABEL_121:

                goto LABEL_122;
              }
LABEL_104:
              free(v15);
              goto LABEL_105;
            }
            if (v42)
            {
              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_path_parse_necp_client_id";
              *(_WORD *)&buf[12] = 2048;
              *(void *)&buf[14] = v6;
              _os_log_impl(&dword_1830D4000, v16, v41, "%{public}s NECP buffer too short %zu, no backtrace", buf, 0x16u);
            }
          }
          else
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            char v16 = (id)gLogObj;
            os_log_type_t v50 = type;
            if (os_log_type_enabled(v16, type))
            {
              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_path_parse_necp_client_id";
              *(_WORD *)&buf[12] = 2048;
              *(void *)&buf[14] = v6;
              _os_log_impl(&dword_1830D4000, v16, v50, "%{public}s NECP buffer too short %zu, backtrace limit exceeded", buf, 0x16u);
            }
          }
        }
        if (!v15) {
          goto LABEL_105;
        }
        goto LABEL_104;
      }
      unint64_t v18 = 0;
      unint64_t v19 = v6 - 5;
      BOOL v20 = v8 + 1;
      id v138 = v8 + 5;
      uint64_t v21 = (void *)globals_for_path;
      unint64_t v143 = v19;
      nw_endpoint_t v144 = v8;
      BOOL v142 = v8 + 1;
      while (1)
      {
        if (v18 > v19)
        {
          unint64_t v34 = v18;
          if (v18 == v6) {
            goto LABEL_134;
          }
          goto LABEL_225;
        }
        int v22 = v8[v18];
        uint64_t v23 = *(unsigned int *)&v20[v18];
        if (!v23)
        {
          os_log_type_t v29 = 0;
          goto LABEL_57;
        }
        if (v23 <= 0xFFFFFFF9
          && v6 >= (unint64_t)(v23 + 5)
          && (unint64_t)v6 - (v23 + 5) >= v18)
        {
          os_log_type_t v29 = &v138[v18];
          goto LABEL_57;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v25 = (id)gLogObj;
        *(_DWORD *)buf = 136446978;
        *(void *)&uint8_t buf[4] = "nw_necp_buffer_get_tlv_value";
        *(_WORD *)&buf[12] = 2048;
        *(void *)&buf[14] = v18;
        *(_WORD *)&unsigned char buf[22] = 2048;
        *(void *)&unsigned char buf[24] = v6;
        *(_WORD *)&buf[32] = 1024;
        *(_DWORD *)&buf[34] = v23;
        BOOL v26 = (void *)_os_log_send_and_compose_impl();

        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v147 = 0;
        if (__nwlog_fault((const char *)v26, &type, &v147))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            os_log_type_t v27 = (id)gLogObj;
            os_log_type_t v28 = type;
            if (os_log_type_enabled(v27, type))
            {
              *(_DWORD *)buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_necp_buffer_get_tlv_value";
              *(_WORD *)&buf[12] = 2048;
              *(void *)&buf[14] = v18;
              *(_WORD *)&unsigned char buf[22] = 2048;
              *(void *)&unsigned char buf[24] = v6;
              *(_WORD *)&buf[32] = 1024;
              *(_DWORD *)&buf[34] = v23;
              _os_log_impl(&dword_1830D4000, v27, v28, "%{public}s buffer too short tlv_offset=%zu buffer_length=%zu value_length=%u", buf, 0x26u);
            }
          }
          else if (v147)
          {
            os_log_type_t v30 = (char *)__nw_create_backtrace_string();
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            os_log_type_t v27 = (id)gLogObj;
            os_log_type_t v31 = type;
            BOOL v32 = os_log_type_enabled(v27, type);
            if (v30)
            {
              if (v32)
              {
                *(_DWORD *)buf = 136447234;
                *(void *)&uint8_t buf[4] = "nw_necp_buffer_get_tlv_value";
                *(_WORD *)&buf[12] = 2048;
                *(void *)&buf[14] = v18;
                *(_WORD *)&unsigned char buf[22] = 2048;
                *(void *)&unsigned char buf[24] = v6;
                *(_WORD *)&buf[32] = 1024;
                *(_DWORD *)&buf[34] = v23;
                *(_WORD *)&buf[38] = 2082;
                *(void *)&buf[40] = v30;
                _os_log_impl(&dword_1830D4000, v27, v31, "%{public}s buffer too short tlv_offset=%zu buffer_length=%zu value_length=%u, dumping backtrace:%{public}s", buf, 0x30u);
              }

              free(v30);
              if (!v26) {
                goto LABEL_56;
              }
LABEL_55:
              free(v26);
              goto LABEL_56;
            }
            if (v32)
            {
              *(_DWORD *)buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_necp_buffer_get_tlv_value";
              *(_WORD *)&buf[12] = 2048;
              *(void *)&buf[14] = v18;
              *(_WORD *)&unsigned char buf[22] = 2048;
              *(void *)&unsigned char buf[24] = v6;
              *(_WORD *)&buf[32] = 1024;
              *(_DWORD *)&buf[34] = v23;
              _os_log_impl(&dword_1830D4000, v27, v31, "%{public}s buffer too short tlv_offset=%zu buffer_length=%zu value_length=%u, no backtrace", buf, 0x26u);
            }
          }
          else
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            os_log_type_t v27 = (id)gLogObj;
            os_log_type_t v33 = type;
            if (os_log_type_enabled(v27, type))
            {
              *(_DWORD *)buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_necp_buffer_get_tlv_value";
              *(_WORD *)&buf[12] = 2048;
              *(void *)&buf[14] = v18;
              *(_WORD *)&unsigned char buf[22] = 2048;
              *(void *)&unsigned char buf[24] = v6;
              *(_WORD *)&buf[32] = 1024;
              *(_DWORD *)&buf[34] = v23;
              _os_log_impl(&dword_1830D4000, v27, v33, "%{public}s buffer too short tlv_offset=%zu buffer_length=%zu value_length=%u, backtrace limit exceeded", buf, 0x26u);
            }
          }
        }
        if (v26) {
          goto LABEL_55;
        }
LABEL_56:
        os_log_type_t v29 = 0;
        uint64_t v21 = (void *)globals_for_path;
        BOOL v20 = v142;
        unint64_t v19 = v6 - 5;
        os_log_type_t v8 = (unsigned __int8 *)v144;
LABEL_57:
        unint64_t v34 = v23 + 5 + v18;
        if (v34 > v6)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          id v43 = (id)gLogObj;
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_path_parse_necp_client_id";
          *(_WORD *)&buf[12] = 2048;
          *(void *)&buf[14] = v23 + 5;
          *(_WORD *)&unsigned char buf[22] = 2048;
          *(void *)&unsigned char buf[24] = v18;
          *(_WORD *)&buf[32] = 2048;
          *(void *)&buf[34] = v6;
          BOOL v44 = (void *)_os_log_send_and_compose_impl();

          os_log_type_t type = OS_LOG_TYPE_ERROR;
          char v147 = 0;
          if (__nwlog_fault((const char *)v44, &type, &v147))
          {
            if (type == OS_LOG_TYPE_FAULT)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              __int16 v45 = (id)gLogObj;
              os_log_type_t v46 = type;
              if (os_log_type_enabled(v45, type))
              {
                *(_DWORD *)buf = 136446978;
                *(void *)&uint8_t buf[4] = "nw_path_parse_necp_client_id";
                *(_WORD *)&buf[12] = 2048;
                *(void *)&buf[14] = v23 + 5;
                *(_WORD *)&unsigned char buf[22] = 2048;
                *(void *)&unsigned char buf[24] = v18;
                *(_WORD *)&buf[32] = 2048;
                *(void *)&buf[34] = v6;
                _os_log_impl(&dword_1830D4000, v45, v46, "%{public}s TLV length (%zu) at offset %zu goes beyond total length (%zu)", buf, 0x2Au);
              }
              goto LABEL_130;
            }
            if (v147)
            {
              nw_endpoint_t v51 = (char *)__nw_create_backtrace_string();
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              __int16 v45 = (id)gLogObj;
              os_log_type_t v52 = type;
              BOOL v53 = os_log_type_enabled(v45, type);
              if (v51)
              {
                if (v53)
                {
                  *(_DWORD *)buf = 136447234;
                  *(void *)&uint8_t buf[4] = "nw_path_parse_necp_client_id";
                  *(_WORD *)&buf[12] = 2048;
                  *(void *)&buf[14] = v23 + 5;
                  *(_WORD *)&unsigned char buf[22] = 2048;
                  *(void *)&unsigned char buf[24] = v18;
                  *(_WORD *)&buf[32] = 2048;
                  *(void *)&buf[34] = v6;
                  *(_WORD *)&buf[42] = 2082;
                  *(void *)&buf[44] = v51;
                  _os_log_impl(&dword_1830D4000, v45, v52, "%{public}s TLV length (%zu) at offset %zu goes beyond total length (%zu), dumping backtrace:%{public}s", buf, 0x34u);
                }

                free(v51);
                if (!v44)
                {
LABEL_133:
                  unint64_t v19 = v6 - 5;
                  os_log_type_t v8 = (unsigned __int8 *)v144;
                  BOOL v20 = v142;
                  if (v34 == v6) {
                    goto LABEL_134;
                  }
LABEL_225:
                  id v105 = __nwlog_obj();
                  *(_DWORD *)buf = 136446722;
                  *(void *)&uint8_t buf[4] = "nw_path_parse_necp_client_id";
                  *(_WORD *)&buf[12] = 2048;
                  *(void *)&buf[14] = v34;
                  *(_WORD *)&unsigned char buf[22] = 2048;
                  *(void *)&unsigned char buf[24] = v6;
                  id v106 = (char *)_os_log_send_and_compose_impl();

                  os_log_type_t type = OS_LOG_TYPE_ERROR;
                  char v147 = 0;
                  if (__nwlog_fault(v106, &type, &v147))
                  {
                    if (type == OS_LOG_TYPE_FAULT)
                    {
                      v107 = __nwlog_obj();
                      os_log_type_t v108 = type;
                      if (os_log_type_enabled(v107, type))
                      {
                        *(_DWORD *)buf = 136446722;
                        *(void *)&uint8_t buf[4] = "nw_path_parse_necp_client_id";
                        *(_WORD *)&buf[12] = 2048;
                        *(void *)&buf[14] = v34;
                        *(_WORD *)&unsigned char buf[22] = 2048;
                        *(void *)&unsigned char buf[24] = v6;
                        _os_log_impl(&dword_1830D4000, v107, v108, "%{public}s cursor has unexpected value %zu != %zu", buf, 0x20u);
                      }
                      goto LABEL_286;
                    }
                    if (v147)
                    {
                      uint64_t v118 = (char *)__nw_create_backtrace_string();
                      v107 = __nwlog_obj();
                      os_log_type_t v119 = type;
                      BOOL v120 = os_log_type_enabled(v107, type);
                      if (v118)
                      {
                        if (v120)
                        {
                          *(_DWORD *)buf = 136446978;
                          *(void *)&uint8_t buf[4] = "nw_path_parse_necp_client_id";
                          *(_WORD *)&buf[12] = 2048;
                          *(void *)&buf[14] = v34;
                          *(_WORD *)&unsigned char buf[22] = 2048;
                          *(void *)&unsigned char buf[24] = v6;
                          *(_WORD *)&buf[32] = 2082;
                          *(void *)&buf[34] = v118;
                          _os_log_impl(&dword_1830D4000, v107, v119, "%{public}s cursor has unexpected value %zu != %zu, dumping backtrace:%{public}s", buf, 0x2Au);
                        }

                        free(v118);
                        goto LABEL_287;
                      }
                      if (v120)
                      {
                        *(_DWORD *)buf = 136446722;
                        *(void *)&uint8_t buf[4] = "nw_path_parse_necp_client_id";
                        *(_WORD *)&buf[12] = 2048;
                        *(void *)&buf[14] = v34;
                        *(_WORD *)&unsigned char buf[22] = 2048;
                        *(void *)&unsigned char buf[24] = v6;
                        _os_log_impl(&dword_1830D4000, v107, v119, "%{public}s cursor has unexpected value %zu != %zu, no backtrace", buf, 0x20u);
                      }
                    }
                    else
                    {
                      v107 = __nwlog_obj();
                      os_log_type_t v132 = type;
                      if (os_log_type_enabled(v107, type))
                      {
                        *(_DWORD *)buf = 136446722;
                        *(void *)&uint8_t buf[4] = "nw_path_parse_necp_client_id";
                        *(_WORD *)&buf[12] = 2048;
                        *(void *)&buf[14] = v34;
                        *(_WORD *)&unsigned char buf[22] = 2048;
                        *(void *)&unsigned char buf[24] = v6;
                        _os_log_impl(&dword_1830D4000, v107, v132, "%{public}s cursor has unexpected value %zu != %zu, backtrace limit exceeded", buf, 0x20u);
                      }
                    }
LABEL_286:
                  }
LABEL_287:
                  if (v106) {
                    free(v106);
                  }
                  unint64_t v19 = v6 - 5;
                  os_log_type_t v8 = (unsigned __int8 *)v144;
                  BOOL v20 = v142;
LABEL_134:
                  unint64_t v63 = 0;
                  while (2)
                  {
                    int v64 = v8[v63];
                    uint64_t v65 = *(unsigned int *)&v20[v63];
                    if (!v65
                      || v65 <= 0xFFFFFFF9
                      && (v13 >= v65 + 5 ? (BOOL v66 = v13 - (v65 + 5) >= v63) : (BOOL v66 = 0), v66))
                    {
LABEL_161:
                      uint64_t v75 = v65 + 5;
                      unint64_t v76 = v65 + 5 + v63;
                      if (v76 > v13)
                      {
                        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                        networkd_settings_init();
                        id v77 = (id)gLogObj;
                        *(_DWORD *)buf = 136446978;
                        *(void *)&uint8_t buf[4] = "nw_path_message_request_in_process_flow_divert";
                        *(_WORD *)&buf[12] = 2048;
                        *(void *)&buf[14] = v65 + 5;
                        *(_WORD *)&unsigned char buf[22] = 2048;
                        *(void *)&unsigned char buf[24] = v63;
                        *(_WORD *)&buf[32] = 2048;
                        *(void *)&buf[34] = v13;
                        __int16 v78 = (void *)_os_log_send_and_compose_impl();

                        os_log_type_t type = OS_LOG_TYPE_ERROR;
                        char v147 = 0;
                        if (__nwlog_fault((const char *)v78, &type, &v147))
                        {
                          if (type == OS_LOG_TYPE_FAULT)
                          {
                            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                            networkd_settings_init();
                            id v79 = (id)gLogObj;
                            os_log_type_t v80 = type;
                            if (os_log_type_enabled(v79, type))
                            {
                              *(_DWORD *)buf = 136446978;
                              *(void *)&uint8_t buf[4] = "nw_path_message_request_in_process_flow_divert";
                              *(_WORD *)&buf[12] = 2048;
                              *(void *)&buf[14] = v75;
                              *(_WORD *)&unsigned char buf[22] = 2048;
                              *(void *)&unsigned char buf[24] = v63;
                              *(_WORD *)&buf[32] = 2048;
                              *(void *)&buf[34] = v13;
                              _os_log_impl(&dword_1830D4000, v79, v80, "%{public}s TLV length (%zu) at offset %zu goes beyond total length (%zu)", buf, 0x2Au);
                            }
                            goto LABEL_195;
                          }
                          if (v147)
                          {
                            uint64_t v89 = (char *)__nw_create_backtrace_string();
                            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                            networkd_settings_init();
                            id v79 = (id)gLogObj;
                            os_log_type_t v90 = type;
                            BOOL v91 = os_log_type_enabled(v79, type);
                            if (v89)
                            {
                              if (v91)
                              {
                                *(_DWORD *)buf = 136447234;
                                *(void *)&uint8_t buf[4] = "nw_path_message_request_in_process_flow_divert";
                                *(_WORD *)&buf[12] = 2048;
                                *(void *)&buf[14] = v75;
                                *(_WORD *)&unsigned char buf[22] = 2048;
                                *(void *)&unsigned char buf[24] = v63;
                                *(_WORD *)&buf[32] = 2048;
                                *(void *)&buf[34] = v13;
                                *(_WORD *)&buf[42] = 2082;
                                *(void *)&buf[44] = v89;
                                _os_log_impl(&dword_1830D4000, v79, v90, "%{public}s TLV length (%zu) at offset %zu goes beyond total length (%zu), dumping backtrace:%{public}s", buf, 0x34u);
                              }

                              free(v89);
                              if (!v78)
                              {
LABEL_198:
                                if (v76 == v13) {
                                  goto LABEL_199;
                                }
                                char v111 = __nwlog_obj();
                                *(_DWORD *)buf = 136446722;
                                *(void *)&uint8_t buf[4] = "nw_path_message_request_in_process_flow_divert";
                                *(_WORD *)&buf[12] = 2048;
                                *(void *)&buf[14] = v76;
                                *(_WORD *)&unsigned char buf[22] = 2048;
                                *(void *)&unsigned char buf[24] = v13;
                                id v55 = (char *)_os_log_send_and_compose_impl();

                                os_log_type_t type = OS_LOG_TYPE_ERROR;
                                char v147 = 0;
                                if (__nwlog_fault(v55, &type, &v147))
                                {
                                  if (type == OS_LOG_TYPE_FAULT)
                                  {
                                    nw_endpoint_t v56 = __nwlog_obj();
                                    os_log_type_t v112 = type;
                                    if (os_log_type_enabled(v56, type))
                                    {
                                      *(_DWORD *)buf = 136446722;
                                      *(void *)&uint8_t buf[4] = "nw_path_message_request_in_process_flow_divert";
                                      *(_WORD *)&buf[12] = 2048;
                                      *(void *)&buf[14] = v76;
                                      *(_WORD *)&unsigned char buf[22] = 2048;
                                      *(void *)&unsigned char buf[24] = v13;
                                      _os_log_impl(&dword_1830D4000, v56, v112, "%{public}s cursor has unexpected value %zu != %zu", buf, 0x20u);
                                    }
                                    goto LABEL_121;
                                  }
                                  if (!v147)
                                  {
                                    nw_endpoint_t v56 = __nwlog_obj();
                                    os_log_type_t v133 = type;
                                    if (os_log_type_enabled(v56, type))
                                    {
                                      *(_DWORD *)buf = 136446722;
                                      *(void *)&uint8_t buf[4] = "nw_path_message_request_in_process_flow_divert";
                                      *(_WORD *)&buf[12] = 2048;
                                      *(void *)&buf[14] = v76;
                                      *(_WORD *)&unsigned char buf[22] = 2048;
                                      *(void *)&unsigned char buf[24] = v13;
                                      _os_log_impl(&dword_1830D4000, v56, v133, "%{public}s cursor has unexpected value %zu != %zu, backtrace limit exceeded", buf, 0x20u);
                                    }
                                    goto LABEL_121;
                                  }
                                  __int16 v129 = (char *)__nw_create_backtrace_string();
                                  nw_endpoint_t v56 = __nwlog_obj();
                                  os_log_type_t v130 = type;
                                  BOOL v131 = os_log_type_enabled(v56, type);
                                  if (!v129)
                                  {
                                    if (v131)
                                    {
                                      *(_DWORD *)buf = 136446722;
                                      *(void *)&uint8_t buf[4] = "nw_path_message_request_in_process_flow_divert";
                                      *(_WORD *)&buf[12] = 2048;
                                      *(void *)&buf[14] = v76;
                                      *(_WORD *)&unsigned char buf[22] = 2048;
                                      *(void *)&unsigned char buf[24] = v13;
                                      _os_log_impl(&dword_1830D4000, v56, v130, "%{public}s cursor has unexpected value %zu != %zu, no backtrace", buf, 0x20u);
                                    }
                                    goto LABEL_121;
                                  }
                                  if (v131)
                                  {
                                    *(_DWORD *)buf = 136446978;
                                    *(void *)&uint8_t buf[4] = "nw_path_message_request_in_process_flow_divert";
                                    *(_WORD *)&buf[12] = 2048;
                                    *(void *)&buf[14] = v76;
                                    *(_WORD *)&unsigned char buf[22] = 2048;
                                    *(void *)&unsigned char buf[24] = v13;
                                    *(_WORD *)&buf[32] = 2082;
                                    *(void *)&buf[34] = v129;
                                    _os_log_impl(&dword_1830D4000, v56, v130, "%{public}s cursor has unexpected value %zu != %zu, dumping backtrace:%{public}s", buf, 0x2Au);
                                  }

                                  free(v129);
                                  if (v55) {
                                    goto LABEL_123;
                                  }
LABEL_199:
                                  size_t v93 = v137;
                                  v94 = v140;
                                  if (v140) {
LABEL_200:
                                  }
                                    free(v94);
                                  goto LABEL_201;
                                }
LABEL_122:
                                if (!v55) {
                                  goto LABEL_199;
                                }
LABEL_123:
                                free(v55);
                                goto LABEL_199;
                              }
LABEL_197:
                              free(v78);
                              goto LABEL_198;
                            }
                            if (v91)
                            {
                              *(_DWORD *)buf = 136446978;
                              *(void *)&uint8_t buf[4] = "nw_path_message_request_in_process_flow_divert";
                              *(_WORD *)&buf[12] = 2048;
                              *(void *)&buf[14] = v75;
                              *(_WORD *)&unsigned char buf[22] = 2048;
                              *(void *)&unsigned char buf[24] = v63;
                              *(_WORD *)&buf[32] = 2048;
                              *(void *)&buf[34] = v13;
                              _os_log_impl(&dword_1830D4000, v79, v90, "%{public}s TLV length (%zu) at offset %zu goes beyond total length (%zu), no backtrace", buf, 0x2Au);
                            }
                          }
                          else
                          {
                            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                            networkd_settings_init();
                            id v79 = (id)gLogObj;
                            os_log_type_t v92 = type;
                            if (os_log_type_enabled(v79, type))
                            {
                              *(_DWORD *)buf = 136446978;
                              *(void *)&uint8_t buf[4] = "nw_path_message_request_in_process_flow_divert";
                              *(_WORD *)&buf[12] = 2048;
                              *(void *)&buf[14] = v75;
                              *(_WORD *)&unsigned char buf[22] = 2048;
                              *(void *)&unsigned char buf[24] = v63;
                              *(_WORD *)&buf[32] = 2048;
                              *(void *)&buf[34] = v13;
                              _os_log_impl(&dword_1830D4000, v79, v92, "%{public}s TLV length (%zu) at offset %zu goes beyond total length (%zu), backtrace limit exceeded", buf, 0x2Au);
                            }
                          }
LABEL_195:
                        }
                        if (!v78) {
                          goto LABEL_198;
                        }
                        goto LABEL_197;
                      }
                      if (v64 == 20)
                      {
                        if (nw_context_copy_implicit_context::onceToken != -1) {
                          dispatch_once(&nw_context_copy_implicit_context::onceToken, &__block_literal_global_18);
                        }
                        id v81 = (id)nw_context_copy_implicit_context::implicit_context;
                        BOOL v82 = v81 == v139;

                        if (v82)
                        {
                          os_log_type_t type = OS_LOG_TYPE_DEFAULT;
                          int v83 = nw_path_create_bridged_flow_director(v139, &type);
                          if (type) {
                            int v84 = v83;
                          }
                          else {
                            int v84 = 0;
                          }
                          if (v84 == 1)
                          {
                            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                            networkd_settings_init();
                            id v85 = (id)gLogObj;
                            if (os_log_type_enabled(v85, OS_LOG_TYPE_DEFAULT))
                            {
                              *(_DWORD *)buf = 136446210;
                              *(void *)&uint8_t buf[4] = "nw_path_necp_check_for_updates";
                              v86 = "%{public}s In-process flow divert director created";
                              os_log_type_t v87 = v85;
                              os_log_type_t v88 = OS_LOG_TYPE_DEFAULT;
                              goto LABEL_191;
                            }
                          }
                          else
                          {
                            if (v83) {
                              goto LABEL_199;
                            }
                            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                            networkd_settings_init();
                            id v85 = (id)gLogObj;
                            if (os_log_type_enabled(v85, OS_LOG_TYPE_ERROR))
                            {
                              *(_DWORD *)buf = 136446210;
                              *(void *)&uint8_t buf[4] = "nw_path_necp_check_for_updates";
                              v86 = "%{public}s Failed to create in-process flow divert director";
                              os_log_type_t v87 = v85;
                              os_log_type_t v88 = OS_LOG_TYPE_ERROR;
LABEL_191:
                              _os_log_impl(&dword_1830D4000, v87, v88, v86, buf, 0xCu);
                            }
                          }

                          goto LABEL_199;
                        }
                        goto LABEL_199;
                      }
                      v63 += v65 + 5;
                      if (v76 > v19) {
                        goto LABEL_198;
                      }
                      continue;
                    }
                    break;
                  }
                  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                  networkd_settings_init();
                  id v67 = (id)gLogObj;
                  *(_DWORD *)buf = 136446978;
                  *(void *)&uint8_t buf[4] = "nw_necp_buffer_get_tlv_value";
                  *(_WORD *)&buf[12] = 2048;
                  *(void *)&buf[14] = v63;
                  *(_WORD *)&unsigned char buf[22] = 2048;
                  *(void *)&unsigned char buf[24] = v13;
                  *(_WORD *)&buf[32] = 1024;
                  *(_DWORD *)&buf[34] = v65;
                  id v68 = (void *)_os_log_send_and_compose_impl();

                  os_log_type_t type = OS_LOG_TYPE_ERROR;
                  char v147 = 0;
                  if (__nwlog_fault((const char *)v68, &type, &v147))
                  {
                    if (type == OS_LOG_TYPE_FAULT)
                    {
                      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                      networkd_settings_init();
                      uint64_t v69 = (id)gLogObj;
                      os_log_type_t v70 = type;
                      if (os_log_type_enabled(v69, type))
                      {
                        *(_DWORD *)buf = 136446978;
                        *(void *)&uint8_t buf[4] = "nw_necp_buffer_get_tlv_value";
                        *(_WORD *)&buf[12] = 2048;
                        *(void *)&buf[14] = v63;
                        *(_WORD *)&unsigned char buf[22] = 2048;
                        *(void *)&unsigned char buf[24] = v13;
                        *(_WORD *)&buf[32] = 1024;
                        *(_DWORD *)&buf[34] = v65;
                        _os_log_impl(&dword_1830D4000, v69, v70, "%{public}s buffer too short tlv_offset=%zu buffer_length=%zu value_length=%u", buf, 0x26u);
                      }
                      goto LABEL_157;
                    }
                    if (v147)
                    {
                      v71 = (char *)__nw_create_backtrace_string();
                      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                      networkd_settings_init();
                      uint64_t v69 = (id)gLogObj;
                      os_log_type_t v72 = type;
                      BOOL v73 = os_log_type_enabled(v69, type);
                      if (v71)
                      {
                        if (v73)
                        {
                          *(_DWORD *)buf = 136447234;
                          *(void *)&uint8_t buf[4] = "nw_necp_buffer_get_tlv_value";
                          *(_WORD *)&buf[12] = 2048;
                          *(void *)&buf[14] = v63;
                          *(_WORD *)&unsigned char buf[22] = 2048;
                          *(void *)&unsigned char buf[24] = v13;
                          *(_WORD *)&buf[32] = 1024;
                          *(_DWORD *)&buf[34] = v65;
                          *(_WORD *)&buf[38] = 2082;
                          *(void *)&buf[40] = v71;
                          _os_log_impl(&dword_1830D4000, v69, v72, "%{public}s buffer too short tlv_offset=%zu buffer_length=%zu value_length=%u, dumping backtrace:%{public}s", buf, 0x30u);
                        }

                        free(v71);
                        if (!v68)
                        {
LABEL_160:
                          unint64_t v19 = v143;
                          os_log_type_t v8 = (unsigned __int8 *)v144;
                          BOOL v20 = v142;
                          goto LABEL_161;
                        }
LABEL_159:
                        free(v68);
                        goto LABEL_160;
                      }
                      if (v73)
                      {
                        *(_DWORD *)buf = 136446978;
                        *(void *)&uint8_t buf[4] = "nw_necp_buffer_get_tlv_value";
                        *(_WORD *)&buf[12] = 2048;
                        *(void *)&buf[14] = v63;
                        *(_WORD *)&unsigned char buf[22] = 2048;
                        *(void *)&unsigned char buf[24] = v13;
                        *(_WORD *)&buf[32] = 1024;
                        *(_DWORD *)&buf[34] = v65;
                        _os_log_impl(&dword_1830D4000, v69, v72, "%{public}s buffer too short tlv_offset=%zu buffer_length=%zu value_length=%u, no backtrace", buf, 0x26u);
                      }
                    }
                    else
                    {
                      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                      networkd_settings_init();
                      uint64_t v69 = (id)gLogObj;
                      os_log_type_t v74 = type;
                      if (os_log_type_enabled(v69, type))
                      {
                        *(_DWORD *)buf = 136446978;
                        *(void *)&uint8_t buf[4] = "nw_necp_buffer_get_tlv_value";
                        *(_WORD *)&buf[12] = 2048;
                        *(void *)&buf[14] = v63;
                        *(_WORD *)&unsigned char buf[22] = 2048;
                        *(void *)&unsigned char buf[24] = v13;
                        *(_WORD *)&buf[32] = 1024;
                        *(_DWORD *)&buf[34] = v65;
                        _os_log_impl(&dword_1830D4000, v69, v74, "%{public}s buffer too short tlv_offset=%zu buffer_length=%zu value_length=%u, backtrace limit exceeded", buf, 0x26u);
                      }
                    }
LABEL_157:
                  }
                  if (!v68) {
                    goto LABEL_160;
                  }
                  goto LABEL_159;
                }
LABEL_132:
                free(v44);
                goto LABEL_133;
              }
              if (v53)
              {
                *(_DWORD *)buf = 136446978;
                *(void *)&uint8_t buf[4] = "nw_path_parse_necp_client_id";
                *(_WORD *)&buf[12] = 2048;
                *(void *)&buf[14] = v23 + 5;
                *(_WORD *)&unsigned char buf[22] = 2048;
                *(void *)&unsigned char buf[24] = v18;
                *(_WORD *)&buf[32] = 2048;
                *(void *)&buf[34] = v6;
                _os_log_impl(&dword_1830D4000, v45, v52, "%{public}s TLV length (%zu) at offset %zu goes beyond total length (%zu), no backtrace", buf, 0x2Au);
              }
            }
            else
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              __int16 v45 = (id)gLogObj;
              os_log_type_t v62 = type;
              if (os_log_type_enabled(v45, type))
              {
                *(_DWORD *)buf = 136446978;
                *(void *)&uint8_t buf[4] = "nw_path_parse_necp_client_id";
                *(_WORD *)&buf[12] = 2048;
                *(void *)&buf[14] = v23 + 5;
                *(_WORD *)&unsigned char buf[22] = 2048;
                *(void *)&unsigned char buf[24] = v18;
                *(_WORD *)&buf[32] = 2048;
                *(void *)&buf[34] = v6;
                _os_log_impl(&dword_1830D4000, v45, v62, "%{public}s TLV length (%zu) at offset %zu goes beyond total length (%zu), backtrace limit exceeded", buf, 0x2Au);
              }
            }
LABEL_130:
          }
          if (!v44) {
            goto LABEL_133;
          }
          goto LABEL_132;
        }
        BOOL v36 = v23 == 16 && v29 != 0 && v22 == 1;
        v18 += v23 + 5;
        if (v36)
        {
          *(_OWORD *)uuid_t uu = *(_OWORD *)v29;
          os_unfair_lock_lock(lock);
          if (*v21 == *(void *)uu && v21[1] == *(void *)&uu[8])
          {
            uint64_t v37 = v21[6];
            int v38 = (atomic_uchar *)nw_array_create();
            int v39 = v38;
            if (v37)
            {
              if (v38 == (atomic_uchar *)v37) {
                int v39 = (atomic_uchar *)v37;
              }
              else {
                std::vector<nw_object_wrapper_t>::__assign_with_size[abi:nn180100]<nw_object_wrapper_t*,nw_object_wrapper_t*>((uint64_t)(v38 + 16), *(void ***)(v37 + 16), *(void ***)(v37 + 24), (uint64_t)(*(void *)(v37 + 24) - *(void *)(v37 + 16)) >> 3);
              }
            }
            os_unfair_lock_unlock(lock);
            *(void *)buf = 0;
            *(void *)&buf[8] = buf;
            *(void *)&buf[16] = 0x2020000000;
            unsigned char buf[24] = 1;
            v145[0] = MEMORY[0x1E4F143A8];
            v145[1] = 3221225472;
            v145[2] = ___ZL30nw_path_necp_check_for_updatesPU24objcproto13OS_nw_context8NSObjectPA16_hj_block_invoke_2;
            v145[3] = &unk_1E52484B0;
            v145[5] = uu;
            v145[6] = v144;
            unsigned int v146 = v6;
            v145[4] = buf;
            nw_array_apply(v39, (uint64_t)v145);
            _Block_object_dispose(buf, 8);
          }
          else if (v21[4])
          {
            memset(buf, 0, 37);
            uuid_unparse(uu, (char *)buf);
            __int16 v47 = nw_dictionary_copy_value(v21[4], (uint64_t)buf);
            int v48 = v47;
            if (v47 && v47[10] == *(void *)uu && v47[11] == *(void *)&uu[8])
            {
              uint64_t v49 = v47;
              os_unfair_lock_unlock(lock);
              nw_path_necp_update_evaluator(v49, v144, v6, 1);
            }
            else
            {
              os_unfair_lock_unlock(lock);
              uint64_t v49 = 0;
            }
          }
          else
          {
            os_unfair_lock_unlock(lock);
          }
          goto LABEL_199;
        }
      }
    }
    unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    int v10 = **(_DWORD **)(StatusReg + 8);
    if (v135 < 5 || v10 != 22) {
      goto LABEL_15;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v11 = (id)gLogObj;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_path_necp_check_for_updates";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v135;
      _os_log_impl(&dword_1830D4000, v11, OS_LOG_TYPE_INFO, "%{public}s Trying to copy result again for %u flows", buf, 0x12u);
    }

    if (!size)
    {
      id v113 = __nwlog_obj();
      os_log_type_enabled(v113, OS_LOG_TYPE_ERROR);
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "strict_calloc";
      id v114 = (void *)_os_log_send_and_compose_impl();

      if (__nwlog_abort((uint64_t)v114)) {
        goto LABEL_293;
      }
      free(v114);
    }
    int64_t v7 = (char *)malloc_type_calloc(1uLL, size, 0xEAFB8F1AuLL);
    if (!v7)
    {
      id v115 = __nwlog_obj();
      os_log_type_enabled(v115, OS_LOG_TYPE_ERROR);
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "strict_calloc";
      *(_WORD *)&buf[12] = 2048;
      *(void *)&buf[14] = 1;
      *(_WORD *)&unsigned char buf[22] = 2048;
      *(void *)&unsigned char buf[24] = size;
      os_log_type_t v116 = (void *)_os_log_send_and_compose_impl();

      if (__nwlog_abort((uint64_t)v116))
      {
LABEL_293:
        __break(1u);
        return;
      }
      free(v116);
      int64_t v7 = 0;
    }
    nw_path_shared_necp_fd(v139);
    unsigned int v6 = necp_client_action();
    if ((int)v6 <= 0) {
      break;
    }
LABEL_20:
    os_log_type_t v8 = (unsigned __int8 *)v7;
    if (v7) {
      goto LABEL_21;
    }
    v98 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_path_parse_necp_client_id";
    v99 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v147 = 0;
    if (__nwlog_fault(v99, &type, &v147))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        id v100 = __nwlog_obj();
        os_log_type_t v101 = type;
        if (os_log_type_enabled(v100, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_path_parse_necp_client_id";
          _os_log_impl(&dword_1830D4000, v100, v101, "%{public}s called with null result", buf, 0xCu);
        }
LABEL_251:

        goto LABEL_252;
      }
      if (!v147)
      {
        id v100 = __nwlog_obj();
        os_log_type_t v117 = type;
        if (os_log_type_enabled(v100, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_path_parse_necp_client_id";
          _os_log_impl(&dword_1830D4000, v100, v117, "%{public}s called with null result, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_251;
      }
      nw_endpoint_t v102 = (char *)__nw_create_backtrace_string();
      id v100 = __nwlog_obj();
      os_log_type_t v103 = type;
      BOOL v104 = os_log_type_enabled(v100, type);
      if (!v102)
      {
        if (v104)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_path_parse_necp_client_id";
          _os_log_impl(&dword_1830D4000, v100, v103, "%{public}s called with null result, no backtrace", buf, 0xCu);
        }
        goto LABEL_251;
      }
      if (v104)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_path_parse_necp_client_id";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v102;
        _os_log_impl(&dword_1830D4000, v100, v103, "%{public}s called with null result, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(v102);
    }
LABEL_252:
    if (v99) {
      free(v99);
    }
    char v121 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_path_message_request_in_process_flow_divert";
    uint64_t v122 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v147 = 0;
    if (__nwlog_fault(v122, &type, &v147))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        int v123 = __nwlog_obj();
        os_log_type_t v124 = type;
        if (os_log_type_enabled(v123, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_path_message_request_in_process_flow_divert";
          _os_log_impl(&dword_1830D4000, v123, v124, "%{public}s called with null result", buf, 0xCu);
        }
LABEL_269:

        goto LABEL_270;
      }
      if (!v147)
      {
        int v123 = __nwlog_obj();
        os_log_type_t v128 = type;
        if (os_log_type_enabled(v123, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_path_message_request_in_process_flow_divert";
          _os_log_impl(&dword_1830D4000, v123, v128, "%{public}s called with null result, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_269;
      }
      BOOL v125 = (char *)__nw_create_backtrace_string();
      int v123 = __nwlog_obj();
      os_log_type_t v126 = type;
      BOOL v127 = os_log_type_enabled(v123, type);
      if (!v125)
      {
        if (v127)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_path_message_request_in_process_flow_divert";
          _os_log_impl(&dword_1830D4000, v123, v126, "%{public}s called with null result, no backtrace", buf, 0xCu);
        }
        goto LABEL_269;
      }
      if (v127)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_path_message_request_in_process_flow_divert";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v125;
        _os_log_impl(&dword_1830D4000, v123, v126, "%{public}s called with null result, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(v125);
    }
LABEL_270:
    size_t v93 = v137;
    if (v122)
    {
      v94 = (char *)v122;
      goto LABEL_200;
    }
LABEL_201:
    if (v93) {
      goto LABEL_214;
    }
    memset(uu, 0, sizeof(uu));
LABEL_4:
    uuid_clear(uu);
  }
  int v10 = **(_DWORD **)(StatusReg + 8);
  if (v7) {
    free(v7);
  }
LABEL_15:
  if (v10 != 22) {
    goto LABEL_210;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_t v12 = (id)gLogObj;
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_path_necp_check_for_updates";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 48;
    _os_log_impl(&dword_1830D4000, v12, OS_LOG_TYPE_INFO, "%{public}s Trying to copy result again for %u flows (max)", buf, 0x12u);
  }

  int64_t v7 = (char *)malloc_type_calloc(1uLL, 0x6400uLL, 0xEAFB8F1AuLL);
  if (!v7)
  {
    id v109 = __nwlog_obj();
    os_log_type_enabled(v109, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446722;
    *(void *)&uint8_t buf[4] = "strict_calloc";
    *(_WORD *)&buf[12] = 2048;
    *(void *)&buf[14] = 1;
    *(_WORD *)&unsigned char buf[22] = 2048;
    *(void *)&unsigned char buf[24] = 25600;
    uint64_t v110 = (void *)_os_log_send_and_compose_impl();

    if (__nwlog_abort((uint64_t)v110)) {
      goto LABEL_293;
    }
    free(v110);
    int64_t v7 = 0;
  }
  nw_path_shared_necp_fd(v139);
  unsigned int v6 = necp_client_action();
  if ((int)v6 > 0) {
    goto LABEL_20;
  }
  int v10 = **(_DWORD **)(StatusReg + 8);
  if (v7) {
    free(v7);
  }
  if (v10 == 22)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    nw_endpoint_t v95 = (id)gLogObj;
    if (os_log_type_enabled(v95, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_path_necp_check_for_updates";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 22;
      os_log_type_t v96 = v95;
      os_log_type_t v97 = OS_LOG_TYPE_ERROR;
      goto LABEL_212;
    }
  }
  else
  {
LABEL_210:
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    nw_endpoint_t v95 = (id)gLogObj;
    if (os_log_type_enabled(v95, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_path_necp_check_for_updates";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v10;
      os_log_type_t v96 = v95;
      os_log_type_t v97 = OS_LOG_TYPE_DEBUG;
LABEL_212:
      _os_log_impl(&dword_1830D4000, v96, v97, "%{public}s Failed to copy updated result (%d)", buf, 0x12u);
    }
  }

LABEL_214:
}

void sub_18328F824()
{
  JUMPOUT(0x18328F848);
}

void sub_18328F844(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22)
{
  _Unwind_Resume(a1);
}

uint64_t nw_socket_get_path(nw_protocol *a1)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    id v25 = "nw_socket_get_path";
    id v14 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (!__nwlog_fault(v14, &type, &v22)) {
      goto LABEL_56;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v15 = __nwlog_obj();
      os_log_type_t v16 = type;
      if (!os_log_type_enabled(v15, type)) {
        goto LABEL_56;
      }
      *(_DWORD *)buf = 136446210;
      id v25 = "nw_socket_get_path";
      os_log_type_t v17 = "%{public}s called with null protocol";
    }
    else
    {
      if (!v22)
      {
        char v15 = __nwlog_obj();
        os_log_type_t v16 = type;
        if (!os_log_type_enabled(v15, type)) {
          goto LABEL_56;
        }
        *(_DWORD *)buf = 136446210;
        id v25 = "nw_socket_get_path";
        os_log_type_t v17 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_55;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      char v15 = __nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v19 = os_log_type_enabled(v15, type);
      if (backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446466;
          id v25 = "nw_socket_get_path";
          __int16 v26 = 2082;
          os_log_type_t v27 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v15, v16, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        if (!v14) {
          return 0;
        }
        goto LABEL_57;
      }
      if (!v19) {
        goto LABEL_56;
      }
      *(_DWORD *)buf = 136446210;
      id v25 = "nw_socket_get_path";
      os_log_type_t v17 = "%{public}s called with null protocol, no backtrace";
    }
LABEL_55:
    _os_log_impl(&dword_1830D4000, v15, v16, v17, buf, 0xCu);
    goto LABEL_56;
  }
  if (a1->handle != &nw_protocol_ref_counted_handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    id v25 = "nw_socket_get_path";
    id v14 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (!__nwlog_fault(v14, &type, &v22)) {
      goto LABEL_56;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v15 = __nwlog_obj();
      os_log_type_t v16 = type;
      if (!os_log_type_enabled(v15, type)) {
        goto LABEL_56;
      }
      *(_DWORD *)buf = 136446210;
      id v25 = "nw_socket_get_path";
      os_log_type_t v17 = "%{public}s called with null socket_handler";
      goto LABEL_55;
    }
    if (!v22)
    {
      char v15 = __nwlog_obj();
      os_log_type_t v16 = type;
      if (!os_log_type_enabled(v15, type)) {
        goto LABEL_56;
      }
      *(_DWORD *)buf = 136446210;
      id v25 = "nw_socket_get_path";
      os_log_type_t v17 = "%{public}s called with null socket_handler, backtrace limit exceeded";
      goto LABEL_55;
    }
    BOOL v20 = (char *)__nw_create_backtrace_string();
    char v15 = __nwlog_obj();
    os_log_type_t v16 = type;
    BOOL v21 = os_log_type_enabled(v15, type);
    if (!v20)
    {
      if (!v21) {
        goto LABEL_56;
      }
      *(_DWORD *)buf = 136446210;
      id v25 = "nw_socket_get_path";
      os_log_type_t v17 = "%{public}s called with null socket_handler, no backtrace";
      goto LABEL_55;
    }
    if (v21)
    {
      *(_DWORD *)buf = 136446466;
      id v25 = "nw_socket_get_path";
      __int16 v26 = 2082;
      os_log_type_t v27 = v20;
      _os_log_impl(&dword_1830D4000, v15, v16, "%{public}s called with null socket_handler, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v20);
LABEL_56:
    if (!v14) {
      return 0;
    }
LABEL_57:
    free(v14);
    return 0;
  }
  identifier = a1[2].identifier;
  if (!identifier)
  {
    if ((*(_WORD *)&a1[6].flow_id[13] & 0x80) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      int64_t v7 = gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        id v25 = "nw_socket_get_path";
        __int16 v26 = 2082;
        os_log_type_t v27 = (char *)&a1[6].identifier + 4;
        _os_log_impl(&dword_1830D4000, v7, OS_LOG_TYPE_ERROR, "%{public}s %{public}s No input handler", buf, 0x16u);
      }
    }
    return 0;
  }
  uint64_t v3 = *(void *)&identifier->name[24];
  if (!v3) {
    return 0;
  }
  id v4 = *(uint64_t (**)(nw_protocol_identifier *))(v3 + 120);
  if (!v4) {
    return 0;
  }
  if (*(_UNKNOWN **)identifier[1].name == &nw_protocol_ref_counted_handle)
  {
    uint64_t v9 = *(void *)&identifier[2].name[8];
    if (v9) {
      *(void *)&identifier[2].name[8] = v9 + 1;
    }
    uint64_t v8 = v4(identifier);
    if (*(_UNKNOWN **)identifier[1].name == &nw_protocol_ref_counted_handle)
    {
      uint64_t v10 = *(void *)&identifier[2].name[8];
      if (v10)
      {
        uint64_t v11 = v10 - 1;
        *(void *)&identifier[2].name[8] = v11;
        if (!v11)
        {
          os_log_type_t v12 = *(void (***)(void))&identifier[1].name[24];
          if (v12)
          {
            *(void *)&identifier[1].name[24] = 0;
            v12[2](v12);
            _Block_release(v12);
          }
          if (identifier[1].level)
          {
            unint64_t v13 = *(const void **)&identifier[1].name[24];
            if (v13) {
              _Block_release(v13);
            }
          }
          free(identifier);
        }
      }
    }
    return v8;
  }
  id v5 = a1[2].identifier;

  return v4(v5);
}

void nw_connection_increment_estimated_bytes(void *a1, char a2, uint64_t a3)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  unsigned int v6 = v5;
  if (!v5)
  {
    int64_t v7 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v24 = "nw_connection_increment_estimated_bytes";
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (!__nwlog_fault(v8, &type, &v21)) {
      goto LABEL_38;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v24 = "nw_connection_increment_estimated_bytes";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v21)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v24 = "nw_connection_increment_estimated_bytes";
          __int16 v25 = 2082;
          __int16 v26 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v8) {
          goto LABEL_4;
        }
LABEL_39:
        free(v8);
        goto LABEL_4;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v24 = "nw_connection_increment_estimated_bytes";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v24 = "nw_connection_increment_estimated_bytes";
        _os_log_impl(&dword_1830D4000, v9, v19, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_37:

    goto LABEL_38;
  }
  if (a3)
  {
    nw_connection_modify_estimated_bytes(v5, a2, 1, a3);
    goto LABEL_4;
  }
  uint64_t v11 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v24 = "nw_connection_increment_estimated_bytes";
  uint64_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v21 = 0;
  if (!__nwlog_fault(v8, &type, &v21)) {
    goto LABEL_38;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    uint64_t v9 = __nwlog_obj();
    os_log_type_t v12 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v24 = "nw_connection_increment_estimated_bytes";
      _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null estimated_bytes", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (!v21)
  {
    uint64_t v9 = __nwlog_obj();
    os_log_type_t v20 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v24 = "nw_connection_increment_estimated_bytes";
      _os_log_impl(&dword_1830D4000, v9, v20, "%{public}s called with null estimated_bytes, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_37;
  }
  os_log_type_t v16 = (char *)__nw_create_backtrace_string();
  uint64_t v9 = __nwlog_obj();
  os_log_type_t v17 = type;
  BOOL v18 = os_log_type_enabled(v9, type);
  if (!v16)
  {
    if (v18)
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v24 = "nw_connection_increment_estimated_bytes";
      _os_log_impl(&dword_1830D4000, v9, v17, "%{public}s called with null estimated_bytes, no backtrace", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (v18)
  {
    *(_DWORD *)buf = 136446466;
    os_log_type_t v24 = "nw_connection_increment_estimated_bytes";
    __int16 v25 = 2082;
    __int16 v26 = v16;
    _os_log_impl(&dword_1830D4000, v9, v17, "%{public}s called with null estimated_bytes, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v16);
  if (v8) {
    goto LABEL_39;
  }
LABEL_4:
}

void sub_183290294(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_endpoint_handler_stack_uses_tls(void *a1)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  BOOL v2 = v1;
  if (!v1)
  {
    int64_t v35 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v47 = "nw_endpoint_handler_stack_uses_tls";
    BOOL v36 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v44 = 0;
    if (__nwlog_fault(v36, &type, &v44))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v37 = __nwlog_obj();
        os_log_type_t v38 = type;
        if (os_log_type_enabled(v37, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v47 = "nw_endpoint_handler_stack_uses_tls";
          _os_log_impl(&dword_1830D4000, v37, v38, "%{public}s called with null handler", buf, 0xCu);
        }
      }
      else if (v44)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        uint64_t v37 = __nwlog_obj();
        os_log_type_t v40 = type;
        BOOL v41 = os_log_type_enabled(v37, type);
        if (backtrace_string)
        {
          if (v41)
          {
            *(_DWORD *)buf = 136446466;
            __int16 v47 = "nw_endpoint_handler_stack_uses_tls";
            __int16 v48 = 2082;
            uint64_t v49 = (os_unfair_lock_s *)backtrace_string;
            _os_log_impl(&dword_1830D4000, v37, v40, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_87;
        }
        if (v41)
        {
          *(_DWORD *)buf = 136446210;
          __int16 v47 = "nw_endpoint_handler_stack_uses_tls";
          _os_log_impl(&dword_1830D4000, v37, v40, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        uint64_t v37 = __nwlog_obj();
        os_log_type_t v42 = type;
        if (os_log_type_enabled(v37, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v47 = "nw_endpoint_handler_stack_uses_tls";
          _os_log_impl(&dword_1830D4000, v37, v42, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_87:
    if (v36) {
      free(v36);
    }
    goto LABEL_48;
  }
  os_unfair_lock_lock(v1 + 28);
  if (v2[29]._os_unfair_lock_opaque == 2)
  {
    uint64_t v3 = v2;
    uint64_t os_unfair_lock_opaque = v2[29]._os_unfair_lock_opaque;

    if (os_unfair_lock_opaque == 2)
    {
      id v5 = nw_endpoint_handler_copy_flow(v3);
      os_unfair_lock_lock((os_unfair_lock_t)v5 + 220);
      if (*((unsigned char *)v5 + 32) & 2) != 0 || (*((unsigned char *)v5 + 33))
      {
        os_log_type_t v16 = v3;
        id v17 = v16[4];

        if (v17) {
          uint64_t tls = nw_parameters_get_tls(v17);
        }
        else {
          uint64_t tls = 0;
        }
      }
      else if (*((void *)v5 + 117))
      {
        uint64_t tls = nw_endpoint_handler_stack_uses_tls();
      }
      else
      {
        uint64_t tls = 0;
      }
      os_unfair_lock_unlock((os_unfair_lock_t)v5 + 220);

      goto LABEL_69;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v14 = (id)gLogObj;
    if (os_unfair_lock_opaque > 5) {
      BOOL v15 = "unknown-mode";
    }
    else {
      BOOL v15 = off_1E523FB08[os_unfair_lock_opaque];
    }
    *(_DWORD *)buf = 136446722;
    __int16 v47 = "nw_endpoint_flow_stack_uses_tls";
    __int16 v48 = 2082;
    uint64_t v49 = (os_unfair_lock_s *)v15;
    __int16 v50 = 2082;
    nw_endpoint_t v51 = "flow";
    BOOL v18 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v44 = 0;
    if (__nwlog_fault(v18, &type, &v44))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v19 = (id)gLogObj;
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v19, type))
        {
          if (os_unfair_lock_opaque > 5) {
            char v21 = "unknown-mode";
          }
          else {
            char v21 = off_1E523FB08[os_unfair_lock_opaque];
          }
          *(_DWORD *)buf = 136446722;
          __int16 v47 = "nw_endpoint_flow_stack_uses_tls";
          __int16 v48 = 2082;
          uint64_t v49 = (os_unfair_lock_s *)v21;
          __int16 v50 = 2082;
          nw_endpoint_t v51 = "flow";
          _os_log_impl(&dword_1830D4000, v19, v20, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
        }
      }
      else if (v44)
      {
        char v22 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v19 = (id)gLogObj;
        os_log_type_t v23 = type;
        BOOL v24 = os_log_type_enabled(v19, type);
        if (v22)
        {
          if (v24)
          {
            if (os_unfair_lock_opaque > 5) {
              __int16 v25 = "unknown-mode";
            }
            else {
              __int16 v25 = off_1E523FB08[os_unfair_lock_opaque];
            }
            *(_DWORD *)buf = 136446978;
            __int16 v47 = "nw_endpoint_flow_stack_uses_tls";
            __int16 v48 = 2082;
            uint64_t v49 = (os_unfair_lock_s *)v25;
            __int16 v50 = 2082;
            nw_endpoint_t v51 = "flow";
            __int16 v52 = 2082;
            BOOL v53 = v22;
            _os_log_impl(&dword_1830D4000, v19, v23, "%{public}s Handler is in mode %{public}s, expected %{public}s, dumping backtrace:%{public}s", buf, 0x2Au);
          }

          free(v22);
          if (!v18) {
            goto LABEL_68;
          }
          goto LABEL_67;
        }
        if (v24)
        {
          if (os_unfair_lock_opaque > 5) {
            os_log_type_t v33 = "unknown-mode";
          }
          else {
            os_log_type_t v33 = off_1E523FB08[os_unfair_lock_opaque];
          }
          *(_DWORD *)buf = 136446722;
          __int16 v47 = "nw_endpoint_flow_stack_uses_tls";
          __int16 v48 = 2082;
          uint64_t v49 = (os_unfair_lock_s *)v33;
          __int16 v50 = 2082;
          nw_endpoint_t v51 = "flow";
          _os_log_impl(&dword_1830D4000, v19, v23, "%{public}s Handler is in mode %{public}s, expected %{public}s, no backtrace", buf, 0x20u);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v19 = (id)gLogObj;
        os_log_type_t v29 = type;
        if (os_log_type_enabled(v19, type))
        {
          if (os_unfair_lock_opaque > 5) {
            os_log_type_t v30 = "unknown-mode";
          }
          else {
            os_log_type_t v30 = off_1E523FB08[os_unfair_lock_opaque];
          }
          *(_DWORD *)buf = 136446722;
          __int16 v47 = "nw_endpoint_flow_stack_uses_tls";
          __int16 v48 = 2082;
          uint64_t v49 = (os_unfair_lock_s *)v30;
          __int16 v50 = 2082;
          nw_endpoint_t v51 = "flow";
          _os_log_impl(&dword_1830D4000, v19, v29, "%{public}s Handler is in mode %{public}s, expected %{public}s, backtrace limit exceeded", buf, 0x20u);
        }
      }
    }
    if (!v18)
    {
LABEL_68:
      uint64_t tls = 0;
LABEL_69:

      os_unfair_lock_unlock(v2 + 28);
      goto LABEL_70;
    }
LABEL_67:
    free(v18);
    goto LABEL_68;
  }
  os_unfair_lock_unlock(v2 + 28);
  if ((v2[67]._os_unfair_lock_opaque & 0x20) == 0)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
    }
    int64_t v7 = (id)gconnectionLogObj;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      if (v2[67]._os_unfair_lock_opaque) {
        uint64_t v8 = "dry-run ";
      }
      else {
        uint64_t v8 = "";
      }
      nw_endpoint_t v9 = nw_endpoint_handler_copy_endpoint(v2);
      logging_description = nw_endpoint_get_logging_description(v9);
      uint64_t v11 = v2[30]._os_unfair_lock_opaque;
      os_log_type_t v12 = logging_description;
      if (v11 > 5) {
        unint64_t v13 = "unknown-state";
      }
      else {
        unint64_t v13 = off_1E523FB38[v11];
      }
      id v43 = v13;
      __int16 v26 = v2;
      uint64_t v27 = v26;
      uint64_t v28 = "path";
      switch(v2[29]._os_unfair_lock_opaque)
      {
        case 0u:
          break;
        case 1u:
          uint64_t v28 = "resolver";
          break;
        case 2u:
          uint64_t v28 = nw_endpoint_flow_mode_string(v26[31]);
          break;
        case 3u:
          uint64_t v28 = "proxy";
          break;
        case 4u:
          uint64_t v28 = "fallback";
          break;
        case 5u:
          uint64_t v28 = "transform";
          break;
        default:
          uint64_t v28 = "unknown-mode";
          break;
      }

      os_log_type_t v31 = v27;
      os_unfair_lock_lock(v2 + 28);
      id v32 = v31[8];
      os_unfair_lock_unlock(v2 + 28);

      *(_DWORD *)buf = 136447746;
      __int16 v47 = "nw_endpoint_handler_stack_uses_tls";
      __int16 v48 = 2082;
      uint64_t v49 = v2 + 42;
      __int16 v50 = 2082;
      nw_endpoint_t v51 = v8;
      __int16 v52 = 2082;
      BOOL v53 = (char *)v12;
      __int16 v54 = 2082;
      id v55 = v43;
      __int16 v56 = 2082;
      os_log_type_t v57 = v28;
      __int16 v58 = 2114;
      id v59 = v32;
      _os_log_impl(&dword_1830D4000, v7, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Endpoint handler is not flow", buf, 0x48u);
    }
  }
LABEL_48:
  uint64_t tls = 0;
LABEL_70:

  return tls;
}

void sub_183290B7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_quic_connection_set_keepalive_handler(void *a1, void *a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  if (nw_protocol_metadata_is_quic_connection(v3))
  {
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 3221225472;
    v13[2] = __nw_quic_connection_set_keepalive_handler_block_invoke;
    v13[3] = &unk_1E5248ED8;
    id v14 = v4;
    nw_protocol_metadata_access_handle((uint64_t)v3, (uint64_t)v13);

    goto LABEL_3;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v18 = "nw_quic_connection_set_keepalive_handler";
  unsigned int v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v6, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      int64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v18 = "nw_quic_connection_set_keepalive_handler";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata)", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int64_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v18 = "nw_quic_connection_set_keepalive_handler";
          __int16 v19 = 2082;
          os_log_type_t v20 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v18 = "nw_quic_connection_set_keepalive_handler";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int64_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v18 = "nw_quic_connection_set_keepalive_handler";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
LABEL_3:
}

void sub_183290EB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_set_keepalive_handler_block_invoke(uint64_t a1, uint64_t a2)
{
  id v4 = (os_unfair_lock_s *)(a2 + 212);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 212));
  id v5 = _Block_copy(*(const void **)(a1 + 32));
  unsigned int v6 = *(void **)(a2 + 160);
  *(void *)(a2 + 160) = v5;

  os_unfair_lock_unlock(v4);
  return 1;
}

void nw_quic_connection_get_remote_max_streams_unidirectional_handler(void *a1, void *a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  if (nw_protocol_metadata_is_quic_connection(v3))
  {
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 3221225472;
    v13[2] = __nw_quic_connection_get_remote_max_streams_unidirectional_handler_block_invoke;
    v13[3] = &unk_1E5248ED8;
    id v14 = v4;
    nw_protocol_metadata_access_handle((uint64_t)v3, (uint64_t)v13);

    goto LABEL_3;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v18 = "nw_quic_connection_get_remote_max_streams_unidirectional_handler";
  unsigned int v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v6, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      int64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v18 = "nw_quic_connection_get_remote_max_streams_unidirectional_handler";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata)", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int64_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v18 = "nw_quic_connection_get_remote_max_streams_unidirectional_handler";
          __int16 v19 = 2082;
          os_log_type_t v20 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v18 = "nw_quic_connection_get_remote_max_streams_unidirectional_handler";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int64_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v18 = "nw_quic_connection_get_remote_max_streams_unidirectional_handler";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
LABEL_3:
}

void sub_18329123C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_get_remote_max_streams_unidirectional_handler_block_invoke(uint64_t a1, uint64_t a2)
{
  id v4 = (os_unfair_lock_s *)(a2 + 212);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 212));
  id v5 = _Block_copy(*(const void **)(a1 + 32));
  unsigned int v6 = *(void **)(a2 + 136);
  *(void *)(a2 + 136) = v5;

  os_unfair_lock_unlock(v4);
  return 1;
}

void nw_quic_connection_set_application_result_handler(void *a1, void *a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  if (nw_protocol_metadata_is_quic_connection(v3))
  {
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 3221225472;
    v13[2] = __nw_quic_connection_set_application_result_handler_block_invoke;
    v13[3] = &unk_1E5248ED8;
    id v14 = v4;
    nw_protocol_metadata_access_handle((uint64_t)v3, (uint64_t)v13);

    goto LABEL_3;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v18 = "nw_quic_connection_set_application_result_handler";
  unsigned int v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v6, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      int64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v18 = "nw_quic_connection_set_application_result_handler";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata)", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int64_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v18 = "nw_quic_connection_set_application_result_handler";
          __int16 v19 = 2082;
          os_log_type_t v20 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v18 = "nw_quic_connection_set_application_result_handler";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int64_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v18 = "nw_quic_connection_set_application_result_handler";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
LABEL_3:
}

void sub_1832915C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_set_application_result_handler_block_invoke(uint64_t a1, uint64_t a2)
{
  id v4 = (os_unfair_lock_s *)(a2 + 212);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 212));
  id v5 = _Block_copy(*(const void **)(a1 + 32));
  unsigned int v6 = *(void **)(a2 + 184);
  *(void *)(a2 + 184) = v5;

  os_unfair_lock_unlock(v4);
  return 1;
}

void nw_quic_connection_get_remote_max_streams_bidirectional_handler(void *a1, void *a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  if (nw_protocol_metadata_is_quic_connection(v3))
  {
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 3221225472;
    v13[2] = __nw_quic_connection_get_remote_max_streams_bidirectional_handler_block_invoke;
    v13[3] = &unk_1E5248ED8;
    id v14 = v4;
    nw_protocol_metadata_access_handle((uint64_t)v3, (uint64_t)v13);

    goto LABEL_3;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v18 = "nw_quic_connection_get_remote_max_streams_bidirectional_handler";
  unsigned int v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v6, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      int64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v18 = "nw_quic_connection_get_remote_max_streams_bidirectional_handler";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata)", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int64_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v18 = "nw_quic_connection_get_remote_max_streams_bidirectional_handler";
          __int16 v19 = 2082;
          os_log_type_t v20 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v18 = "nw_quic_connection_get_remote_max_streams_bidirectional_handler";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int64_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v18 = "nw_quic_connection_get_remote_max_streams_bidirectional_handler";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
LABEL_3:
}

void sub_183291944(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_get_remote_max_streams_bidirectional_handler_block_invoke(uint64_t a1, uint64_t a2)
{
  id v4 = (os_unfair_lock_s *)(a2 + 212);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 212));
  id v5 = _Block_copy(*(const void **)(a1 + 32));
  unsigned int v6 = *(void **)(a2 + 128);
  *(void *)(a2 + 128) = v5;

  os_unfair_lock_unlock(v4);
  return 1;
}

void nw_quic_connection_set_close_with_error_handler(void *a1, void *a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  if (nw_protocol_metadata_is_quic_connection(v3))
  {
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 3221225472;
    v13[2] = __nw_quic_connection_set_close_with_error_handler_block_invoke;
    v13[3] = &unk_1E5248ED8;
    id v14 = v4;
    nw_protocol_metadata_access_handle((uint64_t)v3, (uint64_t)v13);

    goto LABEL_3;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v18 = "nw_quic_connection_set_close_with_error_handler";
  unsigned int v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v6, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      int64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v18 = "nw_quic_connection_set_close_with_error_handler";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata)", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int64_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v18 = "nw_quic_connection_set_close_with_error_handler";
          __int16 v19 = 2082;
          os_log_type_t v20 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v18 = "nw_quic_connection_set_close_with_error_handler";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int64_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v18 = "nw_quic_connection_set_close_with_error_handler";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
LABEL_3:
}

void sub_183291CC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_set_close_with_error_handler_block_invoke(uint64_t a1, uint64_t a2)
{
  id v4 = (os_unfair_lock_s *)(a2 + 212);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 212));
  id v5 = _Block_copy(*(const void **)(a1 + 32));
  unsigned int v6 = *(void **)(a2 + 144);
  *(void *)(a2 + 144) = v5;

  os_unfair_lock_unlock(v4);
  return 1;
}

void nw_quic_connection_set_link_flow_controlled_handler(void *a1, void *a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  if (nw_protocol_metadata_is_quic_connection(v3))
  {
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 3221225472;
    v13[2] = __nw_quic_connection_set_link_flow_controlled_handler_block_invoke;
    v13[3] = &unk_1E5248ED8;
    id v14 = v4;
    nw_protocol_metadata_access_handle((uint64_t)v3, (uint64_t)v13);

    goto LABEL_3;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v18 = "nw_quic_connection_set_link_flow_controlled_handler";
  unsigned int v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v6, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      int64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v18 = "nw_quic_connection_set_link_flow_controlled_handler";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata)", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int64_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v18 = "nw_quic_connection_set_link_flow_controlled_handler";
          __int16 v19 = 2082;
          os_log_type_t v20 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v18 = "nw_quic_connection_set_link_flow_controlled_handler";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int64_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v18 = "nw_quic_connection_set_link_flow_controlled_handler";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
LABEL_3:
}

void sub_18329204C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_set_link_flow_controlled_handler_block_invoke(uint64_t a1, uint64_t a2)
{
  id v4 = (os_unfair_lock_s *)(a2 + 212);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 212));
  id v5 = _Block_copy(*(const void **)(a1 + 32));
  unsigned int v6 = *(void **)(a2 + 200);
  *(void *)(a2 + 200) = v5;

  os_unfair_lock_unlock(v4);
  return 1;
}

void nw_quic_connection_report_application_result(void *a1, char a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  if (nw_protocol_metadata_is_quic_connection(v3))
  {
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_quic_connection_report_application_result_block_invoke;
    v12[3] = &__block_descriptor_33_e9_B16__0_v8l;
    char v13 = a2;
    nw_protocol_metadata_access_handle((uint64_t)v3, (uint64_t)v12);
    goto LABEL_3;
  }
  id v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  id v17 = "nw_quic_connection_report_application_result";
  id v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      unsigned int v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        id v17 = "nw_quic_connection_report_application_result";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata)", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      unsigned int v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          id v17 = "nw_quic_connection_report_application_result";
          __int16 v18 = 2082;
          __int16 v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        id v17 = "nw_quic_connection_report_application_result";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      unsigned int v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        id v17 = "nw_quic_connection_report_application_result";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
LABEL_3:
}

void sub_1832923B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_report_application_result_block_invoke(uint64_t a1, uint64_t a2)
{
  id v4 = (os_unfair_lock_s *)(a2 + 212);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 212));
  uint64_t v5 = *(void *)(a2 + 184);
  if (v5) {
    (*(void (**)(uint64_t, void))(v5 + 16))(v5, *(unsigned __int8 *)(a1 + 32));
  }
  os_unfair_lock_unlock(v4);
  return 1;
}

void nw_quic_connection_set_keepalive(void *a1, __int16 a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  if (nw_protocol_metadata_is_quic_connection(v3))
  {
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_quic_connection_set_keepalive_block_invoke;
    v12[3] = &__block_descriptor_34_e9_B16__0_v8l;
    __int16 v13 = a2;
    nw_protocol_metadata_access_handle((uint64_t)v3, (uint64_t)v12);
    goto LABEL_3;
  }
  id v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  id v17 = "nw_quic_connection_set_keepalive";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      unsigned int v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        id v17 = "nw_quic_connection_set_keepalive";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata)", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      unsigned int v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          id v17 = "nw_quic_connection_set_keepalive";
          __int16 v18 = 2082;
          __int16 v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        id v17 = "nw_quic_connection_set_keepalive";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      unsigned int v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        id v17 = "nw_quic_connection_set_keepalive";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
LABEL_3:
}

void sub_18329270C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_set_keepalive_block_invoke(uint64_t a1, uint64_t a2)
{
  id v4 = (os_unfair_lock_s *)(a2 + 212);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 212));
  uint64_t v5 = *(void *)(a2 + 160);
  if (v5) {
    (*(void (**)(uint64_t, void))(v5 + 16))(v5, *(unsigned __int16 *)(a1 + 32));
  }
  os_unfair_lock_unlock(v4);
  return 1;
}

uint64_t nw_quic_connection_get_application_error(void *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (nw_protocol_metadata_is_quic_connection(v1))
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000;
    uint64_t v16 = 0;
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_quic_connection_get_application_error_block_invoke;
    v12[3] = &unk_1E5248E90;
    void v12[4] = buf;
    nw_protocol_metadata_access_handle((uint64_t)v1, (uint64_t)v12);
    uint64_t v2 = *(void *)(*(void *)&buf[8] + 24);
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  id v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_quic_connection_get_application_error";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      unsigned int v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_application_error";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata)", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      unsigned int v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_quic_connection_get_application_error";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_application_error";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      unsigned int v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_application_error";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
  uint64_t v2 = 0;
LABEL_3:

  return v2;
}

void sub_183292A94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_get_application_error_block_invoke(uint64_t a1, void *a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *a2;
  return 1;
}

uint64_t nw_protocol_metadata_create_reply(void *a1)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (!v1)
  {
    os_log_type_t v7 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v24 = "nw_protocol_metadata_create_reply";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (!__nwlog_fault(v8, &type, &v21)) {
      goto LABEL_38;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v24 = "nw_protocol_metadata_create_reply";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null metadata", buf, 0xCu);
      }
      goto LABEL_37;
    }
    if (!v21)
    {
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v24 = "nw_protocol_metadata_create_reply";
        _os_log_impl(&dword_1830D4000, v9, v18, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_37;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v9 = __nwlog_obj();
    os_log_type_t v14 = type;
    BOOL v15 = os_log_type_enabled(v9, type);
    if (!backtrace_string)
    {
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v24 = "nw_protocol_metadata_create_reply";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
      goto LABEL_37;
    }
    if (v15)
    {
      *(_DWORD *)buf = 136446466;
      BOOL v24 = "nw_protocol_metadata_create_reply";
      __int16 v25 = 2082;
      __int16 v26 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_25;
  }
  uint64_t v3 = *((void *)v1 + 1);
  if (!v3)
  {
    os_log_type_t v11 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v24 = "nw_protocol_metadata_create_reply";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (!__nwlog_fault(v8, &type, &v21)) {
      goto LABEL_38;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v24 = "nw_protocol_metadata_create_reply";
        _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null metadata->definition", buf, 0xCu);
      }
LABEL_37:

LABEL_38:
      if (v8) {
        free(v8);
      }
      goto LABEL_40;
    }
    if (!v21)
    {
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v24 = "nw_protocol_metadata_create_reply";
        _os_log_impl(&dword_1830D4000, v9, v19, "%{public}s called with null metadata->definition, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_37;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v9 = __nwlog_obj();
    os_log_type_t v16 = type;
    BOOL v17 = os_log_type_enabled(v9, type);
    if (!backtrace_string)
    {
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v24 = "nw_protocol_metadata_create_reply";
        _os_log_impl(&dword_1830D4000, v9, v16, "%{public}s called with null metadata->definition, no backtrace", buf, 0xCu);
      }
      goto LABEL_37;
    }
    if (v17)
    {
      *(_DWORD *)buf = 136446466;
      BOOL v24 = "nw_protocol_metadata_create_reply";
      __int16 v25 = 2082;
      __int16 v26 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v9, v16, "%{public}s called with null metadata->definition, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_25:

    free(backtrace_string);
    goto LABEL_38;
  }
  uint64_t v4 = *(void *)(v3 + 72);
  if (!v4 || (uint64_t v5 = *(uint64_t (**)(id))(v4 + 24)) == 0)
  {
LABEL_40:
    uint64_t v6 = 0;
    goto LABEL_41;
  }
  uint64_t v6 = v5(v1);
LABEL_41:

  return v6;
}

void sub_183292F90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id *nw_quic_metadata_create_reply(void *a1)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    if (nw_protocol_metadata_is_quic_connection(v1))
    {
      uint64_t v3 = v2;
      *(_OWORD *)buf = v3[1];

      buf[9] |= 1u;
      if (nw_protocol_copy_quic_connection_definition::onceToken != -1) {
        dispatch_once(&nw_protocol_copy_quic_connection_definition::onceToken, &__block_literal_global_55981);
      }
      uint64_t v4 = nw_protocol_metadata_create((void *)nw_protocol_copy_quic_connection_definition::quic_definition, buf);
      if (v4)
      {
        v23[0] = MEMORY[0x1E4F143A8];
        v23[1] = 3221225472;
        v23[2] = ___ZL29nw_quic_metadata_create_replyPU34objcproto23OS_nw_protocol_metadata8NSObject_block_invoke;
        v23[3] = &unk_1E5248F68;
        uint64_t v5 = v3;
        id v24 = v5;
        uint64_t v6 = (uint64_t)v4[4];
        if (v6)
        {
          ___ZL29nw_quic_metadata_create_replyPU34objcproto23OS_nw_protocol_metadata8NSObject_block_invoke((uint64_t)v23, v6);
          os_log_type_t v7 = v24;
        }
        else
        {
          os_log_type_t v7 = v5;
        }
        os_log_type_t v8 = v4;
      }
      goto LABEL_11;
    }
    os_log_type_t v14 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_quic_metadata_create_reply";
    os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (__nwlog_fault(v11, &type, &v25))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v12 = __nwlog_obj();
        os_log_type_t v15 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_quic_metadata_create_reply";
          _os_log_impl(&dword_1830D4000, v12, v15, "%{public}s called with null nw_protocol_metadata_is_quic_connection(original_metadata)", buf, 0xCu);
        }
LABEL_43:

        goto LABEL_44;
      }
      if (!v25)
      {
        os_log_type_t v12 = __nwlog_obj();
        os_log_type_t v22 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_quic_metadata_create_reply";
          _os_log_impl(&dword_1830D4000, v12, v22, "%{public}s called with null nw_protocol_metadata_is_quic_connection(original_metadata), backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_43;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v19 = type;
      BOOL v20 = os_log_type_enabled(v12, type);
      if (!backtrace_string)
      {
        if (v20)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_quic_metadata_create_reply";
          _os_log_impl(&dword_1830D4000, v12, v19, "%{public}s called with null nw_protocol_metadata_is_quic_connection(original_metadata), no backtrace", buf, 0xCu);
        }
        goto LABEL_43;
      }
      if (v20)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_quic_metadata_create_reply";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v12, v19, "%{public}s called with null nw_protocol_metadata_is_quic_connection(original_metadata), dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_31;
    }
  }
  else
  {
    os_log_type_t v10 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_quic_metadata_create_reply";
    os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (__nwlog_fault(v11, &type, &v25))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v12 = __nwlog_obj();
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_quic_metadata_create_reply";
          _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s called with null original_metadata", buf, 0xCu);
        }
        goto LABEL_43;
      }
      if (!v25)
      {
        os_log_type_t v12 = __nwlog_obj();
        os_log_type_t v21 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_quic_metadata_create_reply";
          _os_log_impl(&dword_1830D4000, v12, v21, "%{public}s called with null original_metadata, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_43;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v17 = type;
      BOOL v18 = os_log_type_enabled(v12, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_quic_metadata_create_reply";
          _os_log_impl(&dword_1830D4000, v12, v17, "%{public}s called with null original_metadata, no backtrace", buf, 0xCu);
        }
        goto LABEL_43;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_quic_metadata_create_reply";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v12, v17, "%{public}s called with null original_metadata, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_31:

      free(backtrace_string);
    }
  }
LABEL_44:
  if (v11) {
    free(v11);
  }
  uint64_t v4 = 0;
LABEL_11:

  return v4;
}

void sub_183293518(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL29nw_quic_metadata_create_replyPU34objcproto23OS_nw_protocol_metadata8NSObject_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1;
}

uint64_t nw_protocol_metadata_copy_message_options(void *a1)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (!v1)
  {
    os_log_type_t v7 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    id v24 = "nw_protocol_metadata_copy_message_options";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (!__nwlog_fault(v8, &type, &v21)) {
      goto LABEL_38;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        id v24 = "nw_protocol_metadata_copy_message_options";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null metadata", buf, 0xCu);
      }
      goto LABEL_37;
    }
    if (!v21)
    {
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        id v24 = "nw_protocol_metadata_copy_message_options";
        _os_log_impl(&dword_1830D4000, v9, v18, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_37;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v9 = __nwlog_obj();
    os_log_type_t v14 = type;
    BOOL v15 = os_log_type_enabled(v9, type);
    if (!backtrace_string)
    {
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        id v24 = "nw_protocol_metadata_copy_message_options";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
      goto LABEL_37;
    }
    if (v15)
    {
      *(_DWORD *)buf = 136446466;
      id v24 = "nw_protocol_metadata_copy_message_options";
      __int16 v25 = 2082;
      __int16 v26 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_25;
  }
  uint64_t v3 = *((void *)v1 + 1);
  if (!v3)
  {
    os_log_type_t v11 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    id v24 = "nw_protocol_metadata_copy_message_options";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (!__nwlog_fault(v8, &type, &v21)) {
      goto LABEL_38;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        id v24 = "nw_protocol_metadata_copy_message_options";
        _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null metadata->definition", buf, 0xCu);
      }
LABEL_37:

LABEL_38:
      if (v8) {
        free(v8);
      }
      goto LABEL_40;
    }
    if (!v21)
    {
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        id v24 = "nw_protocol_metadata_copy_message_options";
        _os_log_impl(&dword_1830D4000, v9, v19, "%{public}s called with null metadata->definition, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_37;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v9 = __nwlog_obj();
    os_log_type_t v16 = type;
    BOOL v17 = os_log_type_enabled(v9, type);
    if (!backtrace_string)
    {
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        id v24 = "nw_protocol_metadata_copy_message_options";
        _os_log_impl(&dword_1830D4000, v9, v16, "%{public}s called with null metadata->definition, no backtrace", buf, 0xCu);
      }
      goto LABEL_37;
    }
    if (v17)
    {
      *(_DWORD *)buf = 136446466;
      id v24 = "nw_protocol_metadata_copy_message_options";
      __int16 v25 = 2082;
      __int16 v26 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v9, v16, "%{public}s called with null metadata->definition, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_25:

    free(backtrace_string);
    goto LABEL_38;
  }
  uint64_t v4 = *(void *)(v3 + 72);
  if (!v4 || (uint64_t v5 = *(uint64_t (**)(id))(v4 + 48)) == 0)
  {
LABEL_40:
    uint64_t v6 = 0;
    goto LABEL_41;
  }
  uint64_t v6 = v5(v1);
LABEL_41:

  return v6;
}

void sub_183293A14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id nw_quic_metadata_copy_stream_options(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (nw_protocol_metadata_is_quic_connection(v1))
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x3032000000;
    os_log_type_t v16 = __Block_byref_object_copy__55989;
    BOOL v17 = __Block_byref_object_dispose__55990;
    id v18 = 0;
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_quic_metadata_copy_stream_options_block_invoke;
    v12[3] = &unk_1E5248E90;
    void v12[4] = buf;
    nw_protocol_metadata_access_handle((uint64_t)v1, (uint64_t)v12);
    id v2 = *(id *)(*(void *)&buf[8] + 40);
    _Block_object_dispose(buf, 8);

    goto LABEL_3;
  }
  uint64_t v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_quic_metadata_copy_stream_options";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_metadata_copy_stream_options";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata)", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_quic_metadata_copy_stream_options";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_metadata_copy_stream_options";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_metadata_copy_stream_options";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
  id v2 = 0;
LABEL_3:

  return v2;
}

void sub_183293D70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);

  _Unwind_Resume(a1);
}

uint64_t __nw_quic_metadata_copy_stream_options_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1;
}

void nw_quic_connection_metadata_set_stream_options(void *a1, void *a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  if (nw_protocol_metadata_is_quic_connection(v3))
  {
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 3221225472;
    v13[2] = __nw_quic_connection_metadata_set_stream_options_block_invoke;
    v13[3] = &unk_1E5248F68;
    id v14 = v4;
    nw_protocol_metadata_access_handle((uint64_t)v3, (uint64_t)v13);

    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  id v18 = "nw_quic_connection_metadata_set_stream_options";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v6, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        id v18 = "nw_quic_connection_metadata_set_stream_options";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null nw_protocol_metadata_is_quic_connection(connection_metadata)", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          id v18 = "nw_quic_connection_metadata_set_stream_options";
          __int16 v19 = 2082;
          BOOL v20 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null nw_protocol_metadata_is_quic_connection(connection_metadata), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        id v18 = "nw_quic_connection_metadata_set_stream_options";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null nw_protocol_metadata_is_quic_connection(connection_metadata), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        id v18 = "nw_quic_connection_metadata_set_stream_options";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null nw_protocol_metadata_is_quic_connection(connection_metadata), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
LABEL_3:
}

void sub_1832940D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

void nw_quic_connection_set_stream_metadata(void *a1, void *a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  if (nw_protocol_metadata_is_quic_connection(v3))
  {
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 3221225472;
    v13[2] = __nw_quic_connection_set_stream_metadata_block_invoke;
    v13[3] = &unk_1E5248F68;
    id v14 = v4;
    nw_protocol_metadata_access_handle((uint64_t)v3, (uint64_t)v13);

    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  id v18 = "nw_quic_connection_set_stream_metadata";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v6, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        id v18 = "nw_quic_connection_set_stream_metadata";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null nw_protocol_metadata_is_quic_connection(connection_metadata)", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          id v18 = "nw_quic_connection_set_stream_metadata";
          __int16 v19 = 2082;
          BOOL v20 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null nw_protocol_metadata_is_quic_connection(connection_metadata), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        id v18 = "nw_quic_connection_set_stream_metadata";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null nw_protocol_metadata_is_quic_connection(connection_metadata), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        id v18 = "nw_quic_connection_set_stream_metadata";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null nw_protocol_metadata_is_quic_connection(connection_metadata), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
LABEL_3:
}

void sub_1832943FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

id nw_quic_connection_copy_stream_metadata(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (nw_protocol_metadata_is_quic_connection(v1))
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x3032000000;
    os_log_type_t v16 = __Block_byref_object_copy__55989;
    BOOL v17 = __Block_byref_object_dispose__55990;
    id v18 = 0;
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_quic_connection_copy_stream_metadata_block_invoke;
    v12[3] = &unk_1E5248E90;
    void v12[4] = buf;
    nw_protocol_metadata_access_handle((uint64_t)v1, (uint64_t)v12);
    id v2 = *(id *)(*(void *)&buf[8] + 40);
    _Block_object_dispose(buf, 8);

    goto LABEL_3;
  }
  id v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_quic_connection_copy_stream_metadata";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_copy_stream_metadata";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_metadata_is_quic_connection(connection_metadata)", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_quic_connection_copy_stream_metadata";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_metadata_is_quic_connection(connection_metadata), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_copy_stream_metadata";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_metadata_is_quic_connection(connection_metadata), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_copy_stream_metadata";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_metadata_is_quic_connection(connection_metadata), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
  id v2 = 0;
LABEL_3:

  return v2;
}

void sub_183294770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);

  _Unwind_Resume(a1);
}

BOOL nw_protocol_metadata_is_quic_connection(void *a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    id v3 = (id *)v1;
    id v4 = v3[1];

    if (nw_protocol_copy_quic_connection_definition::onceToken != -1) {
      dispatch_once(&nw_protocol_copy_quic_connection_definition::onceToken, &__block_literal_global_55981);
    }
    BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v4, nw_protocol_copy_quic_connection_definition::quic_definition);

    goto LABEL_5;
  }
  os_log_type_t v7 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  id v18 = "nw_protocol_metadata_is_quic_connection";
  os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        id v18 = "nw_protocol_metadata_is_quic_connection";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null metadata", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          id v18 = "nw_protocol_metadata_is_quic_connection";
          __int16 v19 = 2082;
          BOOL v20 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        id v18 = "nw_protocol_metadata_is_quic_connection";
        _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        id v18 = "nw_protocol_metadata_is_quic_connection";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_22:
  if (v8) {
    free(v8);
  }
  BOOL is_equal_unsafe = 0;
LABEL_5:

  return is_equal_unsafe;
}

void sub_183294A8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_copy_stream_metadata_block_invoke(uint64_t a1, uint64_t a2)
{
  id v4 = (os_unfair_lock_s *)(a2 + 212);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 212));
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), *(id *)(a2 + 40));
  os_unfair_lock_unlock(v4);
  return 1;
}

uint64_t __nw_quic_connection_set_stream_metadata_block_invoke(uint64_t a1, uint64_t a2)
{
  id v4 = (os_unfair_lock_s *)(a2 + 212);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 212));
  objc_storeStrong((id *)(a2 + 40), *(id *)(a1 + 32));
  os_unfair_lock_unlock(v4);
  return 1;
}

uint64_t __nw_quic_connection_metadata_set_stream_options_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1;
}

void __33__nw_listener_inbox_socket_start__block_invoke(uint64_t a1)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  int v1 = *(_DWORD *)(a1 + 40);
  id v2 = (id *)*(id *)(a1 + 32);
  BOOL v3 = *((unsigned char *)v2 + 88) == 17 && nw_array_create();
  while ((objc_msgSend(v2[1], "canHandleNewConnection:", v2, v21, v22) & 1) != 0)
  {
    long long v41 = 0u;
    long long v42 = 0u;
    long long v40 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    sockaddr address = (sockaddr)0;
    socklen_t v25 = 128;
    int v4 = *((unsigned __int8 *)v2 + 88);
    if (v4 == 17)
    {
      int v26 = -1;
      *(_DWORD *)buf = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      BOOL v7 = nw_listener_inbox_accept_udp((uint64_t)v2);
      int v8 = v26;
      if (v26 != -1)
      {
        nw_endpoint_t v9 = nw_endpoint_create_address(&address);
        nw_listener_inbox_socket_handle_new_socket(v2, v8, v9, (void *)v7, *(int *)buf, (void *)v3);
      }
      BOOL v10 = type == OS_LOG_TYPE_DEFAULT;

      if (v10) {
        goto LABEL_39;
      }
    }
    else
    {
      if (v4 != 6) {
        goto LABEL_39;
      }
      int v5 = accept(v1, &address, &v25);
      int v26 = v5;
      if (v5 == -1) {
        goto LABEL_39;
      }
      if (v25 && v25 >= address.sa_len)
      {
        nw_endpoint_t v6 = nw_endpoint_create_address(&address);
        nw_listener_inbox_socket_handle_new_socket(v2, v5, v6, 0, 0, (void *)v3);
      }
      else
      {
        if (!v25) {
          goto LABEL_23;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v11 = (id)gLogObj;
        *(_DWORD *)buf = 136446722;
        uint64_t v28 = "nw_listener_inbox_socket_handle_accept_event";
        __int16 v29 = 1024;
        socklen_t v30 = v25;
        __int16 v31 = 1024;
        int sa_len = address.sa_len;
        LODWORD(v22) = 24;
        uint64_t v21 = buf;
        os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v23 = 0;
        if (!__nwlog_fault(v12, &type, &v23)) {
          goto LABEL_21;
        }
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          BOOL v13 = (id)gLogObj;
          os_log_type_t v14 = type;
          if (os_log_type_enabled(v13, type))
          {
            *(_DWORD *)buf = 136446722;
            uint64_t v28 = "nw_listener_inbox_socket_handle_accept_event";
            __int16 v29 = 1024;
            socklen_t v30 = v25;
            __int16 v31 = 1024;
            int sa_len = address.sa_len;
            _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s Bad sockaddr length from kernel: slen = %u, ss.ss_len = %u", buf, 0x18u);
          }
          goto LABEL_20;
        }
        if (!v23)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          BOOL v13 = (id)gLogObj;
          os_log_type_t v19 = type;
          if (os_log_type_enabled(v13, type))
          {
            *(_DWORD *)buf = 136446722;
            uint64_t v28 = "nw_listener_inbox_socket_handle_accept_event";
            __int16 v29 = 1024;
            socklen_t v30 = v25;
            __int16 v31 = 1024;
            int sa_len = address.sa_len;
            _os_log_impl(&dword_1830D4000, v13, v19, "%{public}s Bad sockaddr length from kernel: slen = %u, ss.ss_len = %u, backtrace limit exceeded", buf, 0x18u);
          }
LABEL_20:

LABEL_21:
          if (!v12) {
            goto LABEL_23;
          }
LABEL_22:
          free(v12);
          goto LABEL_23;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v16 = (id)gLogObj;
        os_log_type_t v17 = type;
        BOOL v18 = os_log_type_enabled(v16, type);
        if (!backtrace_string)
        {
          if (v18)
          {
            *(_DWORD *)buf = 136446722;
            uint64_t v28 = "nw_listener_inbox_socket_handle_accept_event";
            __int16 v29 = 1024;
            socklen_t v30 = v25;
            __int16 v31 = 1024;
            int sa_len = address.sa_len;
            _os_log_impl(&dword_1830D4000, v16, v17, "%{public}s Bad sockaddr length from kernel: slen = %u, ss.ss_len = %u, no backtrace", buf, 0x18u);
          }

          goto LABEL_21;
        }
        if (v18)
        {
          *(_DWORD *)buf = 136446978;
          uint64_t v28 = "nw_listener_inbox_socket_handle_accept_event";
          __int16 v29 = 1024;
          socklen_t v30 = v25;
          __int16 v31 = 1024;
          int sa_len = address.sa_len;
          __int16 v33 = 2082;
          unint64_t v34 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v16, v17, "%{public}s Bad sockaddr length from kernel: slen = %u, ss.ss_len = %u, dumping backtrace:%{public}s", buf, 0x22u);
        }

        free(backtrace_string);
        if (v12) {
          goto LABEL_22;
        }
LABEL_23:
        close(v5);
        int v26 = -1;
      }
    }
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  BOOL v20 = (id)gLogObj;
  if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)&address.int sa_len = 136446210;
    *(void *)&address.sa_data[2] = "nw_listener_inbox_socket_handle_accept_event";
    _os_log_impl(&dword_1830D4000, v20, OS_LOG_TYPE_INFO, "%{public}s exceeded new connection limit", &address.sa_len, 0xCu);
  }

LABEL_39:
}

void sub_183295134(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_listener_inbox_socket_handle_new_socket(void *a1, int a2, void *a3, void *a4, int a5, void *a6)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  id v11 = a1;
  id v12 = a3;
  id v33 = a4;
  id v32 = a6;
  int v34 = 1;
  BOOL v13 = nw_fd_wrapper_create(a2);
  if (!setsockopt(a2, 0xFFFF, 4130, &v34, 4u))
  {
    os_log_type_t v17 = nw_endpoint_create_with_sock_name(a2);
    id v18 = v11[6];
    os_log_type_t v19 = -[NWConcrete_nw_parameters initWithParameters:stripConnected:shallowCopy:]((id *)[NWConcrete_nw_parameters alloc], v18, 0, 0);

    nw_parameters_set_server_mode(v19, 1);
    if (v17) {
      nw_parameters_set_local_endpoint(v19, v17);
    }
    id v20 = nw_parameters_copy_context(v19);
    id v21 = nw_context_copy_registered_endpoint(v20, v12);

    uint64_t v22 = nw_endpoint_copy_association_with_evaluator(v21, v19, 0);
    char v23 = v22;
    if (v22)
    {
      id v24 = nw_association_copy_current_path(v22, v19);
      if (nw_parameters_get_local_only((nw_parameters_t)v11[6]))
      {
        if (!v24)
        {
          socklen_t v25 = 0;
          goto LABEL_24;
        }
        socklen_t v25 = v24;
        BOOL v26 = (v25[473] & 0x20) == 0;

        if (v26)
        {
LABEL_24:
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          __int16 v29 = (id)gLogObj;
          if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
          {
          }
          else
          {
            BOOL v30 = gLogFDOverride == -1;

            if (v30)
            {
LABEL_30:
              os_log_type_t v16 = 0;
LABEL_31:

              id v12 = v21;
              goto LABEL_32;
            }
          }
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          __int16 v31 = (id)gLogObj;
          if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136446466;
            long long v36 = "nw_listener_inbox_socket_handle_new_socket";
            __int16 v37 = 2114;
            long long v38 = (const char *)v21;
            _os_log_impl(&dword_1830D4000, v31, OS_LOG_TYPE_DEBUG, "%{public}s Ignoring non-local connection from %{public}@", buf, 0x16u);
          }

          goto LABEL_30;
        }
      }
      else
      {
        socklen_t v25 = v24;
      }
    }
    else
    {
      socklen_t v25 = 0;
      if (nw_parameters_get_local_only((nw_parameters_t)v11[6])) {
        goto LABEL_24;
      }
    }
    [v11[1] updateParametersForNewConnection:v19];
    uint64_t v27 = (char *)[v11[1] getPeerDeviceID];
    if (v27)
    {
      nw_endpoint_set_device_id(v21, v27);
      free(v27);
    }
    uint64_t v28 = nw_connection_create_with_connected_socket_internal(v13, v19, v17, v21, 1);
    os_log_type_t v16 = v28;
    if (v28)
    {
      if (v33) {
        nw_connection_add_initial_inbound_data(v28, v33, a5);
      }
      [v11[1] handleInbound:v16 addProtocolInbox:nw_parameters_get_attach_protocol_listener(v19)];
      if (v32) {
        nw_array_append((uint64_t)v32, v16);
      }
    }
    goto LABEL_31;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_t v14 = (id)gLogObj;
  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    logging_description = nw_endpoint_get_logging_description(v12);
    *(_DWORD *)buf = 136446466;
    long long v36 = "nw_listener_inbox_socket_handle_new_socket";
    __int16 v37 = 2082;
    long long v38 = logging_description;
    _os_log_impl(&dword_1830D4000, v14, OS_LOG_TYPE_INFO, "%{public}s Failed to set SO_NOSIGPIPE on new connection from %{public}s", buf, 0x16u);
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_t v16 = (id)gLogObj;
  if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446210;
    long long v36 = "nw_listener_inbox_socket_handle_new_socket";
    _os_log_impl(&dword_1830D4000, v16, OS_LOG_TYPE_ERROR, "%{public}s Failed to set SO_NOSIGPIPE on new connection from <nw_redacted>", buf, 0xCu);
  }
LABEL_32:
}

void sub_183295600(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  _Unwind_Resume(a1);
}

void nw_parameters_set_local_endpoint(nw_parameters_t parameters, nw_endpoint_t local_endpoint)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  nw_parameters_t v3 = parameters;
  int v4 = local_endpoint;
  int v5 = v4;
  if (v3)
  {
    if (v4 && (v6 = v4, int v7 = [v6 type], v6, v7 == 1))
    {
      objc_storeStrong((id *)v3[13].isa + 20, local_endpoint);
    }
    else
    {
      Class isa = v3[13].isa;
      nw_endpoint_t v9 = (void *)*((void *)isa + 20);
      *((void *)isa + 20) = 0;
    }
    goto LABEL_6;
  }
  BOOL v10 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  id v21 = "nw_parameters_set_local_endpoint";
  id v11 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v18 = 0;
  if (__nwlog_fault(v11, &type, &v18))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v12 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        id v21 = "nw_parameters_set_local_endpoint";
        _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v18)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v12 = __nwlog_obj();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v12, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          id v21 = "nw_parameters_set_local_endpoint";
          __int16 v22 = 2082;
          char v23 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v12, v15, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        id v21 = "nw_parameters_set_local_endpoint";
        _os_log_impl(&dword_1830D4000, v12, v15, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v12 = __nwlog_obj();
      os_log_type_t v17 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        id v21 = "nw_parameters_set_local_endpoint";
        _os_log_impl(&dword_1830D4000, v12, v17, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_23:
  if (v11) {
    free(v11);
  }
LABEL_6:
}

void sub_18329597C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_DWORD *nw_fd_wrapper_create(int a1)
{
  *(void *)&v18[13] = *MEMORY[0x1E4F143B8];
  if (a1 < 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v4 = (id)gLogObj;
    *(_DWORD *)buf = 136446466;
    BOOL v16 = "nw_fd_wrapper_create";
    __int16 v17 = 1024;
    *(_DWORD *)char v18 = a1;
    int v5 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v13 = 0;
    if (__nwlog_fault(v5, &type, &v13))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        nw_endpoint_t v6 = (id)gLogObj;
        os_log_type_t v7 = type;
        if (os_log_type_enabled(v6, type))
        {
          *(_DWORD *)buf = 136446466;
          BOOL v16 = "nw_fd_wrapper_create";
          __int16 v17 = 1024;
          *(_DWORD *)char v18 = a1;
          _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with invalid fd %d", buf, 0x12u);
        }
      }
      else if (v13)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        nw_endpoint_t v6 = (id)gLogObj;
        os_log_type_t v10 = type;
        BOOL v11 = os_log_type_enabled(v6, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446722;
            BOOL v16 = "nw_fd_wrapper_create";
            __int16 v17 = 1024;
            *(_DWORD *)char v18 = a1;
            v18[2] = 2082;
            *(void *)&v18[3] = backtrace_string;
            _os_log_impl(&dword_1830D4000, v6, v10, "%{public}s called with invalid fd %d, dumping backtrace:%{public}s", buf, 0x1Cu);
          }

          free(backtrace_string);
          if (!v5) {
            return 0;
          }
          goto LABEL_11;
        }
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v16 = "nw_fd_wrapper_create";
          __int16 v17 = 1024;
          *(_DWORD *)char v18 = a1;
          _os_log_impl(&dword_1830D4000, v6, v10, "%{public}s called with invalid fd %d, no backtrace", buf, 0x12u);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        nw_endpoint_t v6 = (id)gLogObj;
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v6, type))
        {
          *(_DWORD *)buf = 136446466;
          BOOL v16 = "nw_fd_wrapper_create";
          __int16 v17 = 1024;
          *(_DWORD *)char v18 = a1;
          _os_log_impl(&dword_1830D4000, v6, v12, "%{public}s called with invalid fd %d, backtrace limit exceeded", buf, 0x12u);
        }
      }
    }
    if (!v5) {
      return 0;
    }
LABEL_11:
    free(v5);
    return 0;
  }
  id v2 = -[NWConcrete_nw_fd_wrapper initWithFileDescriptor:]([NWConcrete_nw_fd_wrapper alloc], a1);
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  nw_parameters_t v3 = (id)gLogObj;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136446466;
    BOOL v16 = "nw_fd_wrapper_create";
    __int16 v17 = 2114;
    *(void *)char v18 = v2;
    _os_log_impl(&dword_1830D4000, v3, OS_LOG_TYPE_DEBUG, "%{public}s Created %{public}@", buf, 0x16u);
  }

  return v2;
}

void sub_183296040(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183296258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t nw_parameters_get_attach_protocol_listener(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  int v1 = a1;
  id v2 = v1;
  if (v1)
  {
    uint64_t v3 = (v1[98] >> 6) & 1;
    goto LABEL_3;
  }
  int v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v16 = "nw_parameters_get_attach_protocol_listener";
  nw_endpoint_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_parameters_get_attach_protocol_listener";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v16 = "nw_parameters_get_attach_protocol_listener";
          __int16 v17 = 2082;
          char v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_parameters_get_attach_protocol_listener";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_parameters_get_attach_protocol_listener";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

void nw_parameters_set_server_mode(void *a1, char a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1;
  id v4 = v3;
  if (v3)
  {
    if (a2)
    {
      *(_DWORD *)(v3[13] + 84) = 0;
      unint64_t v5 = v3[12] & 0xFFFFFFFFFFFFFF3FLL | 0x80;
      uint64_t v6 = 0x8000;
    }
    else
    {
      uint64_t v6 = 0;
      unint64_t v5 = v3[12];
    }
    v3[12] = v5 & 0xFFFFFFFFFFFF7FFFLL | v6;
    goto LABEL_6;
  }
  os_log_type_t v7 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v18 = "nw_parameters_set_server_mode";
  os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      nw_endpoint_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        char v18 = "nw_parameters_set_server_mode";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      nw_endpoint_t v9 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          char v18 = "nw_parameters_set_server_mode";
          __int16 v19 = 2082;
          id v20 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        char v18 = "nw_parameters_set_server_mode";
        _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      nw_endpoint_t v9 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        char v18 = "nw_parameters_set_server_mode";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_23:
  if (v8) {
    free(v8);
  }
LABEL_6:
}

void *nw_connection_create_with_connected_socket_internal(void *a1, void *a2, void *a3, void *a4, int a5)
{
  uint64_t v155 = *MEMORY[0x1E4F143B8];
  id v10 = a1;
  id v11 = a2;
  os_log_type_t v136 = a3;
  id v138 = a4;
  nw_allow_use_of_dispatch_internal();
  __int16 v137 = v10;
  if (!v11)
  {
    os_log_type_t v80 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_connection_create_with_connected_socket_internal";
    id v81 = (char *)_os_log_send_and_compose_impl();

    v149[0] = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v81, v149, &type)) {
      goto LABEL_196;
    }
    if (v149[0] == 17)
    {
      BOOL v82 = __nwlog_obj();
      os_log_type_t v83 = v149[0];
      if (os_log_type_enabled(v82, (os_log_type_t)v149[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_create_with_connected_socket_internal";
        _os_log_impl(&dword_1830D4000, v82, v83, "%{public}s called with null parameters", buf, 0xCu);
      }
      goto LABEL_179;
    }
    if (type == OS_LOG_TYPE_DEFAULT)
    {
      BOOL v82 = __nwlog_obj();
      os_log_type_t v114 = v149[0];
      if (os_log_type_enabled(v82, (os_log_type_t)v149[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_create_with_connected_socket_internal";
        _os_log_impl(&dword_1830D4000, v82, v114, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_179;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    size_t v93 = __nwlog_obj();
    os_log_type_t v94 = v149[0];
    BOOL v95 = os_log_type_enabled(v93, (os_log_type_t)v149[0]);
    if (backtrace_string)
    {
      if (v95)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_connection_create_with_connected_socket_internal";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v93, v94, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
      if (!v81) {
        goto LABEL_198;
      }
      goto LABEL_197;
    }
    if (v95)
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_connection_create_with_connected_socket_internal";
      _os_log_impl(&dword_1830D4000, v93, v94, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
    }
    goto LABEL_195;
  }
  if (!v10)
  {
    int v84 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_connection_create_with_connected_socket_internal";
    id v81 = (char *)_os_log_send_and_compose_impl();

    v149[0] = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v81, v149, &type)) {
      goto LABEL_196;
    }
    if (v149[0] == 17)
    {
      BOOL v82 = __nwlog_obj();
      os_log_type_t v85 = v149[0];
      if (os_log_type_enabled(v82, (os_log_type_t)v149[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_create_with_connected_socket_internal";
        _os_log_impl(&dword_1830D4000, v82, v85, "%{public}s called with null fd_wrapper", buf, 0xCu);
      }
LABEL_179:

      goto LABEL_196;
    }
    if (type == OS_LOG_TYPE_DEFAULT)
    {
      BOOL v82 = __nwlog_obj();
      os_log_type_t v115 = v149[0];
      if (os_log_type_enabled(v82, (os_log_type_t)v149[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_create_with_connected_socket_internal";
        _os_log_impl(&dword_1830D4000, v82, v115, "%{public}s called with null fd_wrapper, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_179;
    }
    os_log_type_t v96 = (char *)__nw_create_backtrace_string();
    size_t v93 = __nwlog_obj();
    os_log_type_t v97 = v149[0];
    BOOL v98 = os_log_type_enabled(v93, (os_log_type_t)v149[0]);
    if (v96)
    {
      if (v98)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_connection_create_with_connected_socket_internal";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v96;
        _os_log_impl(&dword_1830D4000, v93, v97, "%{public}s called with null fd_wrapper, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(v96);
LABEL_196:
      if (!v81)
      {
LABEL_198:
        BOOL v73 = 0;
        goto LABEL_121;
      }
LABEL_197:
      free(v81);
      goto LABEL_198;
    }
    if (v98)
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_connection_create_with_connected_socket_internal";
      _os_log_impl(&dword_1830D4000, v93, v97, "%{public}s called with null fd_wrapper, no backtrace", buf, 0xCu);
    }
LABEL_195:

    goto LABEL_196;
  }
  if (a5)
  {
    os_log_type_t v12 = v11;
    id v13 = *(id *)(v12[13] + 136);

    nw_context_assert_queue(v13);
  }
  os_log_type_t v14 = v11;
  v14[12] = v14[12] & 0xFFFFFFFFFFFFFF3FLL | 0x80;

  char v15 = v14;
  uint64_t v16 = v14[12];

  if ((v16 & 0x1000000) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    __int16 v17 = (id)gLogObj;
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_connection_create_with_connected_socket_internal";
      *(_WORD *)&buf[12] = 2114;
      *(void *)&buf[14] = v137;
      _os_log_impl(&dword_1830D4000, v17, OS_LOG_TYPE_DEBUG, "%{public}s prohibit joining for connection to connected fd %{public}@", buf, 0x16u);
    }

    char v18 = v15;
    v14[12] |= 0x800000uLL;
  }
  if (!v138)
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x3032000000;
    *(void *)&unsigned char buf[24] = __Block_byref_object_copy__24353;
    *(void *)nw_endpoint_t v144 = __Block_byref_object_dispose__24354;
    *(void *)&v144[8] = 0;
    v140[0] = MEMORY[0x1E4F143A8];
    v140[1] = 3221225472;
    v140[2] = ___ZL51nw_connection_create_with_connected_socket_internalPU27objcproto16OS_nw_fd_wrapper8NSObjectPU27objcproto16OS_nw_parametersS_PU25objcproto14OS_nw_endpointS_S5_b_block_invoke;
    v140[3] = &unk_1E524A270;
    v140[4] = buf;
    int fd = nw_fd_wrapper_get_fd(v137, v140);
    id v138 = (fd & 1) != 0 ? *(id *)(*(void *)&buf[8] + 40) : 0;
    _Block_object_dispose(buf, 8);

    if (!fd) {
      goto LABEL_198;
    }
  }
  id v20 = v136;
  if (v136) {
    goto LABEL_16;
  }
  *(void *)buf = 0;
  *(void *)&buf[8] = buf;
  *(void *)&buf[16] = 0x3032000000;
  *(void *)&unsigned char buf[24] = __Block_byref_object_copy__24353;
  *(void *)nw_endpoint_t v144 = __Block_byref_object_dispose__24354;
  *(void *)&v144[8] = 0;
  v139[0] = MEMORY[0x1E4F143A8];
  v139[1] = 3221225472;
  v139[2] = ___ZL51nw_connection_create_with_connected_socket_internalPU27objcproto16OS_nw_fd_wrapper8NSObjectPU27objcproto16OS_nw_parametersS_PU25objcproto14OS_nw_endpointS_S5_b_block_invoke_2;
  v139[3] = &unk_1E524A270;
  v139[4] = buf;
  nw_fd_wrapper_get_fd(v137, v139);
  id v20 = *(id *)(*(void *)&buf[8] + 40);
  _Block_object_dispose(buf, 8);

  if (v20) {
LABEL_16:
  }
    nw_parameters_set_local_endpoint(v15, v20);
  os_log_type_t v136 = v20;
  uint64_t v21 = -[NWConcrete_nw_connection initWithEndpoint:parameters:identifier:]((void **)[NWConcrete_nw_connection alloc], v138, v15, 0);
  uint64_t v22 = v21;
  if (!v21)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v35 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_connection_create_with_connected_socket_internal";
    long long v36 = (char *)_os_log_send_and_compose_impl();

    v149[0] = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v36, v149, &type)) {
      goto LABEL_117;
    }
    if (v149[0] == 17)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      __int16 v37 = (id)gLogObj;
      os_log_type_t v38 = v149[0];
      if (os_log_type_enabled(v37, (os_log_type_t)v149[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_create_with_connected_socket_internal";
        _os_log_impl(&dword_1830D4000, v37, v38, "%{public}s [nw_connection initWithEndpoint:parameters:] failed", buf, 0xCu);
      }
      goto LABEL_113;
    }
    if (type == OS_LOG_TYPE_DEFAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      __int16 v37 = (id)gLogObj;
      os_log_type_t v62 = v149[0];
      if (os_log_type_enabled(v37, (os_log_type_t)v149[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_create_with_connected_socket_internal";
        _os_log_impl(&dword_1830D4000, v37, v62, "%{public}s [nw_connection initWithEndpoint:parameters:] failed, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_113;
    }
    __int16 v48 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v49 = (id)gLogObj;
    os_log_type_t v50 = v149[0];
    BOOL v51 = os_log_type_enabled(v49, (os_log_type_t)v149[0]);
    if (v48)
    {
      if (v51)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_connection_create_with_connected_socket_internal";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v48;
        _os_log_impl(&dword_1830D4000, v49, v50, "%{public}s [nw_connection initWithEndpoint:parameters:] failed, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_109:

      free(v48);
      if (!v36) {
        goto LABEL_119;
      }
      goto LABEL_118;
    }
    if (v51)
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_connection_create_with_connected_socket_internal";
      _os_log_impl(&dword_1830D4000, v49, v50, "%{public}s [nw_connection initWithEndpoint:parameters:] failed, no backtrace", buf, 0xCu);
    }
LABEL_116:

LABEL_117:
    if (!v36)
    {
LABEL_119:
      BOOL v73 = 0;
      goto LABEL_120;
    }
LABEL_118:
    free(v36);
    goto LABEL_119;
  }
  char v23 = *(void **)(v21 + 16);
  unsigned int v24 = *(_DWORD *)(v21 + 448);
  id v25 = *(id *)(v21 + 8);
  id v26 = v23;
  id v135 = v137;
  uint64_t v27 = (id)v22;
  os_log_type_t v133 = v26;
  v134 = v25;
  if (!v25)
  {
    v86 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_endpoint_handler_create_with_connected_socket";
    os_log_type_t v87 = (char *)_os_log_send_and_compose_impl();

    v149[0] = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v87, v149, &type)) {
      goto LABEL_211;
    }
    if (v149[0] == 17)
    {
      os_log_type_t v88 = __nwlog_obj();
      os_log_type_t v89 = v149[0];
      if (os_log_type_enabled(v88, (os_log_type_t)v149[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_endpoint_handler_create_with_connected_socket";
        _os_log_impl(&dword_1830D4000, v88, v89, "%{public}s called with null endpoint", buf, 0xCu);
      }
      goto LABEL_204;
    }
    if (type == OS_LOG_TYPE_DEFAULT)
    {
      os_log_type_t v88 = __nwlog_obj();
      os_log_type_t v124 = v149[0];
      if (os_log_type_enabled(v88, (os_log_type_t)v149[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_endpoint_handler_create_with_connected_socket";
        _os_log_impl(&dword_1830D4000, v88, v124, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_204;
    }
    v107 = (char *)__nw_create_backtrace_string();
    os_log_type_t v108 = __nwlog_obj();
    os_log_type_t v109 = v149[0];
    BOOL v110 = os_log_type_enabled(v108, (os_log_type_t)v149[0]);
    if (v107)
    {
      if (v110)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_endpoint_handler_create_with_connected_socket";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v107;
        _os_log_impl(&dword_1830D4000, v108, v109, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(v107);
      if (!v87) {
        goto LABEL_213;
      }
      goto LABEL_212;
    }
    if (v110)
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_endpoint_handler_create_with_connected_socket";
      _os_log_impl(&dword_1830D4000, v108, v109, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
    }
    goto LABEL_210;
  }
  if (!v26)
  {
    os_log_type_t v90 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_endpoint_handler_create_with_connected_socket";
    os_log_type_t v87 = (char *)_os_log_send_and_compose_impl();

    v149[0] = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v87, v149, &type)) {
      goto LABEL_211;
    }
    if (v149[0] == 17)
    {
      os_log_type_t v88 = __nwlog_obj();
      os_log_type_t v91 = v149[0];
      if (os_log_type_enabled(v88, (os_log_type_t)v149[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_endpoint_handler_create_with_connected_socket";
        _os_log_impl(&dword_1830D4000, v88, v91, "%{public}s called with null parameters", buf, 0xCu);
      }
LABEL_204:

      goto LABEL_211;
    }
    if (type == OS_LOG_TYPE_DEFAULT)
    {
      os_log_type_t v88 = __nwlog_obj();
      os_log_type_t v125 = v149[0];
      if (os_log_type_enabled(v88, (os_log_type_t)v149[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_endpoint_handler_create_with_connected_socket";
        _os_log_impl(&dword_1830D4000, v88, v125, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_204;
    }
    char v111 = (char *)__nw_create_backtrace_string();
    os_log_type_t v108 = __nwlog_obj();
    os_log_type_t v112 = v149[0];
    BOOL v113 = os_log_type_enabled(v108, (os_log_type_t)v149[0]);
    if (v111)
    {
      if (v113)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_endpoint_handler_create_with_connected_socket";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v111;
        _os_log_impl(&dword_1830D4000, v108, v112, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(v111);
LABEL_211:
      if (!v87)
      {
LABEL_213:
        __int16 v47 = 0;
        goto LABEL_91;
      }
LABEL_212:
      free(v87);
      goto LABEL_213;
    }
    if (v113)
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_endpoint_handler_create_with_connected_socket";
      _os_log_impl(&dword_1830D4000, v108, v112, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
    }
LABEL_210:

    goto LABEL_211;
  }
  uint64_t v28 = -[NWConcrete_nw_endpoint_handler initWithEndpoint:parameters:reportCallback:context:parent:identifier:]((id *)[NWConcrete_nw_endpoint_handler alloc], v25, v26, nw_connection_endpoint_report_on_nw_queue, v27, 0, v24);
  __int16 v29 = v28;
  if (!v28)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v39 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_endpoint_handler_create_with_connected_socket";
    long long v40 = (char *)_os_log_send_and_compose_impl();

    v149[0] = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if ((__nwlog_fault(v40, v149, &type) & 1) == 0) {
      goto LABEL_76;
    }
    if (v149[0] == 17)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      long long v41 = (id)gLogObj;
      os_log_type_t v42 = v149[0];
      if (os_log_type_enabled(v41, (os_log_type_t)v149[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_endpoint_handler_create_with_connected_socket";
        _os_log_impl(&dword_1830D4000, v41, v42, "%{public}s [nw_endpoint_handler initWithEndpoint:parameters:] failed", buf, 0xCu);
      }
    }
    else
    {
      if (type)
      {
        __int16 v52 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v53 = (id)gLogObj;
        os_log_type_t v54 = v149[0];
        BOOL v55 = os_log_type_enabled(v53, (os_log_type_t)v149[0]);
        if (v52)
        {
          if (v55)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_endpoint_handler_create_with_connected_socket";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v52;
            _os_log_impl(&dword_1830D4000, v53, v54, "%{public}s [nw_endpoint_handler initWithEndpoint:parameters:] failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v52);
          if (!v40) {
            goto LABEL_89;
          }
          goto LABEL_77;
        }
        if (v55)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_handler_create_with_connected_socket";
          _os_log_impl(&dword_1830D4000, v53, v54, "%{public}s [nw_endpoint_handler initWithEndpoint:parameters:] failed, no backtrace", buf, 0xCu);
        }

LABEL_76:
        if (!v40)
        {
LABEL_89:
          __int16 v47 = 0;
          goto LABEL_90;
        }
LABEL_77:
        free(v40);
        goto LABEL_89;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      long long v41 = (id)gLogObj;
      os_log_type_t v63 = v149[0];
      if (os_log_type_enabled(v41, (os_log_type_t)v149[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_endpoint_handler_create_with_connected_socket";
        _os_log_impl(&dword_1830D4000, v41, v63, "%{public}s [nw_endpoint_handler initWithEndpoint:parameters:] failed, backtrace limit exceeded", buf, 0xCu);
      }
    }

    goto LABEL_76;
  }
  *((_DWORD *)v28 + 29) = 2;
  id v30 = v28[9];
  __int16 v31 = objc_alloc_init(NWConcrete_nw_endpoint_flow);
  *((unsigned char *)v31 + 32) = *((unsigned char *)v31 + 32) & 0xFC | (v30 == 0) | 2;
  id v32 = v29[31];
  v29[31] = v31;

  if (a5)
  {
    id v33 = v133;
    BOOL v34 = (*(_WORD *)(v33[13] + 100) & 0x10) == 0;
  }
  else
  {
    BOOL v34 = 0;
  }
  id v43 = v29[31];
  id v44 = v135;
  if (v43)
  {
    *(void *)buf = MEMORY[0x1E4F143A8];
    *(void *)&buf[8] = 3221225472;
    *(void *)&buf[16] = __nw_endpoint_flow_set_pre_connected_fd_block_invoke;
    *(void *)&unsigned char buf[24] = &unk_1E524A220;
    id v45 = v43;
    *(void *)nw_endpoint_t v144 = v45;
    if (nw_fd_wrapper_get_fd(v44, buf))
    {
      *((unsigned char *)v45 + 34) |= 0x40u;
      objc_storeStrong((id *)v45 + 111, a1);
      if (v34) {
        char v46 = 64;
      }
      else {
        char v46 = 0;
      }
      *((unsigned char *)v45 + 35) = *((unsigned char *)v45 + 35) & 0xBF | v46;
LABEL_40:

      goto LABEL_41;
    }
    os_log_type_t v103 = __nwlog_obj();
    *(_DWORD *)v149 = 136446466;
    uint64_t v150 = "nw_endpoint_flow_set_pre_connected_fd";
    __int16 v151 = 2114;
    id v152 = v44;
    os_log_type_t v132 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v141 = 0;
    BOOL v104 = (char *)v132;
    if ((__nwlog_fault(v132, &type, &v141) & 1) == 0)
    {
LABEL_230:
      if (v104) {
        free(v104);
      }
      goto LABEL_40;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v105 = __nwlog_obj();
      os_log_type_t v106 = type;
      if (os_log_type_enabled(v105, type))
      {
        *(_DWORD *)v149 = 136446466;
        uint64_t v150 = "nw_endpoint_flow_set_pre_connected_fd";
        __int16 v151 = 2114;
        id v152 = v44;
        _os_log_impl(&dword_1830D4000, v105, v106, "%{public}s invalid pre_connected_fd: %{public}@", v149, 0x16u);
      }
    }
    else
    {
      if (v141)
      {
        BOOL v120 = (char *)__nw_create_backtrace_string();
        char v121 = __nwlog_obj();
        os_log_type_t v122 = type;
        BOOL v123 = os_log_type_enabled(v121, type);
        if (v120)
        {
          if (v123)
          {
            *(_DWORD *)v149 = 136446722;
            uint64_t v150 = "nw_endpoint_flow_set_pre_connected_fd";
            __int16 v151 = 2114;
            id v152 = v44;
            __int16 v153 = 2082;
            nw_endpoint_t v154 = v120;
            _os_log_impl(&dword_1830D4000, v121, v122, "%{public}s invalid pre_connected_fd: %{public}@, dumping backtrace:%{public}s", v149, 0x20u);
          }

          free(v120);
        }
        else
        {
          if (v123)
          {
            *(_DWORD *)v149 = 136446466;
            uint64_t v150 = "nw_endpoint_flow_set_pre_connected_fd";
            __int16 v151 = 2114;
            id v152 = v44;
            _os_log_impl(&dword_1830D4000, v121, v122, "%{public}s invalid pre_connected_fd: %{public}@, no backtrace", v149, 0x16u);
          }
        }
        goto LABEL_229;
      }
      id v105 = __nwlog_obj();
      os_log_type_t v127 = type;
      if (os_log_type_enabled(v105, type))
      {
        *(_DWORD *)v149 = 136446466;
        uint64_t v150 = "nw_endpoint_flow_set_pre_connected_fd";
        __int16 v151 = 2114;
        id v152 = v44;
        _os_log_impl(&dword_1830D4000, v105, v127, "%{public}s invalid pre_connected_fd: %{public}@, backtrace limit exceeded", v149, 0x16u);
      }
    }

LABEL_229:
    BOOL v104 = (char *)v132;
    goto LABEL_230;
  }
  v99 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_endpoint_flow_set_pre_connected_fd";
  BOOL v131 = (const char *)_os_log_send_and_compose_impl();

  v149[0] = 16;
  os_log_type_t type = OS_LOG_TYPE_DEFAULT;
  id v100 = (char *)v131;
  if (__nwlog_fault(v131, v149, &type))
  {
    if (v149[0] == 17)
    {
      os_log_type_t v101 = __nwlog_obj();
      os_log_type_t v102 = v149[0];
      if (os_log_type_enabled(v101, (os_log_type_t)v149[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_endpoint_flow_set_pre_connected_fd";
        _os_log_impl(&dword_1830D4000, v101, v102, "%{public}s called with null endpoint_flow", buf, 0xCu);
      }
    }
    else
    {
      if (type)
      {
        os_log_type_t v116 = (char *)__nw_create_backtrace_string();
        os_log_type_t v117 = __nwlog_obj();
        os_log_type_t v118 = v149[0];
        BOOL v119 = os_log_type_enabled(v117, (os_log_type_t)v149[0]);
        if (v116)
        {
          if (v119)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_endpoint_flow_set_pre_connected_fd";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v116;
            _os_log_impl(&dword_1830D4000, v117, v118, "%{public}s called with null endpoint_flow, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v116);
        }
        else
        {
          if (v119)
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_endpoint_flow_set_pre_connected_fd";
            _os_log_impl(&dword_1830D4000, v117, v118, "%{public}s called with null endpoint_flow, no backtrace", buf, 0xCu);
          }
        }
        goto LABEL_223;
      }
      os_log_type_t v101 = __nwlog_obj();
      os_log_type_t v126 = v149[0];
      if (os_log_type_enabled(v101, (os_log_type_t)v149[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_endpoint_flow_set_pre_connected_fd";
        _os_log_impl(&dword_1830D4000, v101, v126, "%{public}s called with null endpoint_flow, backtrace limit exceeded", buf, 0xCu);
      }
    }

LABEL_223:
    id v100 = (char *)v131;
  }
  if (v100) {
    free(v100);
  }
LABEL_41:

  if (a5 && !nw_endpoint_flow_pre_attach_protocols(v29, 0))
  {
    if ((*((unsigned char *)v29 + 268) & 0x20) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      __int16 v56 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
      {
        if (*((unsigned char *)v29 + 268)) {
          os_log_type_t v57 = "dry-run ";
        }
        else {
          os_log_type_t v57 = "";
        }
        nw_endpoint_t v58 = nw_endpoint_handler_copy_endpoint(v29);
        logging_description = nw_endpoint_get_logging_description(v58);
        uint64_t v60 = *((unsigned int *)v29 + 30);
        os_log_type_t v130 = v57;
        __int16 v129 = logging_description;
        if (v60 > 5) {
          os_log_type_t v61 = "unknown-state";
        }
        else {
          os_log_type_t v61 = off_1E523FB38[v60];
        }
        os_log_type_t v128 = v61;
        int v64 = v29;
        uint64_t v65 = "path";
        switch(*((_DWORD *)v29 + 29))
        {
          case 0:
            break;
          case 1:
            uint64_t v65 = "resolver";
            break;
          case 2:
            uint64_t v65 = nw_endpoint_flow_mode_string(v29[31]);
            break;
          case 3:
            uint64_t v65 = "proxy";
            break;
          case 4:
            uint64_t v65 = "fallback";
            break;
          case 5:
            uint64_t v65 = "transform";
            break;
          default:
            uint64_t v65 = "unknown-mode";
            break;
        }

        BOOL v66 = v64 + 28;
        id v67 = v64;
        os_unfair_lock_lock(v64 + 28);
        id v68 = v67[8];
        os_unfair_lock_unlock(v66);

        *(_DWORD *)buf = 136447746;
        *(void *)&uint8_t buf[4] = "nw_endpoint_handler_create_with_connected_socket";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v29 + 21;
        *(_WORD *)&unsigned char buf[22] = 2082;
        *(void *)&unsigned char buf[24] = v130;
        *(_WORD *)nw_endpoint_t v144 = 2082;
        *(void *)&v144[2] = v129;
        *(_WORD *)&v144[10] = 2082;
        *(void *)&v144[12] = v128;
        __int16 v145 = 2082;
        unsigned int v146 = v65;
        __int16 v147 = 2114;
        id v148 = v68;
        _os_log_impl(&dword_1830D4000, v56, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] nw_endpoint_flow_pre_attach_protocols", buf, 0x48u);
      }
    }
    nw_endpoint_handler_cancel(v29, 1, 0);
    goto LABEL_89;
  }
  __int16 v47 = v29;
LABEL_90:

LABEL_91:
  uint64_t v69 = (void *)v27[18];
  v27[18] = v47;

  uint64_t v70 = *(void *)(v22 + 16);
  if (v70 && !nw_path_parameters_get_logging_disabled(*(void *)(v70 + 104)))
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
    }
    v71 = (id)gconnectionLogObj;
    if (os_log_type_enabled(v71, OS_LOG_TYPE_INFO))
    {
      int v72 = *(_DWORD *)(v22 + 448);
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "nw_connection_create_with_connected_socket_internal";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v72;
      *(_WORD *)&buf[18] = 2114;
      *(void *)&buf[20] = v135;
      _os_log_impl(&dword_1830D4000, v71, OS_LOG_TYPE_INFO, "%{public}s [C%u] create connection to connected fd %{public}@", buf, 0x1Cu);
    }
  }
  if (!v27[18])
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v74 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_connection_create_with_connected_socket_internal";
    long long v36 = (char *)_os_log_send_and_compose_impl();

    v149[0] = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v36, v149, &type)) {
      goto LABEL_117;
    }
    if (v149[0] == 17)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      __int16 v37 = (id)gLogObj;
      os_log_type_t v75 = v149[0];
      if (os_log_type_enabled(v37, (os_log_type_t)v149[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_create_with_connected_socket_internal";
        _os_log_impl(&dword_1830D4000, v37, v75, "%{public}s nw_endpoint_handler_create_with_connected_socket failed", buf, 0xCu);
      }
LABEL_113:

      goto LABEL_117;
    }
    if (type == OS_LOG_TYPE_DEFAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      __int16 v37 = (id)gLogObj;
      os_log_type_t v78 = v149[0];
      if (os_log_type_enabled(v37, (os_log_type_t)v149[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_create_with_connected_socket_internal";
        _os_log_impl(&dword_1830D4000, v37, v78, "%{public}s nw_endpoint_handler_create_with_connected_socket failed, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_113;
    }
    __int16 v48 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v49 = (id)gLogObj;
    os_log_type_t v76 = v149[0];
    BOOL v77 = os_log_type_enabled(v49, (os_log_type_t)v149[0]);
    if (v48)
    {
      if (v77)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_connection_create_with_connected_socket_internal";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v48;
        _os_log_impl(&dword_1830D4000, v49, v76, "%{public}s nw_endpoint_handler_create_with_connected_socket failed, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_109;
    }
    if (v77)
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_connection_create_with_connected_socket_internal";
      _os_log_impl(&dword_1830D4000, v49, v76, "%{public}s nw_endpoint_handler_create_with_connected_socket failed, no backtrace", buf, 0xCu);
    }
    goto LABEL_116;
  }
  BOOL v73 = v27;
LABEL_120:

LABEL_121:
  return v73;
}

void sub_1832984B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, void *a19, uint64_t a20,void *a21,void *a22,void *a23)
{
  _Unwind_Resume(a1);
}

BOOL nw_parameters_get_local_only(nw_parameters_t parameters)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  nw_parameters_t v1 = parameters;
  nw_parameters_t v2 = v1;
  if (v1)
  {
    BOOL v3 = (BYTE1(v1[12].isa) >> 6) & 1;
    goto LABEL_3;
  }
  unint64_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v16 = "nw_parameters_get_local_only";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v16 = "nw_parameters_get_local_only";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v16 = "nw_parameters_get_local_only";
          __int16 v17 = 2082;
          char v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v16 = "nw_parameters_get_local_only";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v16 = "nw_parameters_get_local_only";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  LOBYTE(v3) = 0;
LABEL_3:

  return v3;
}

void sub_1832989DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id a26)
{
  _Block_object_dispose(&a21, 8);
  _Unwind_Resume(a1);
}

void nw_protocol_connected_quiet(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v3 = *(void *)(a1 + 24);
    if (v3)
    {
      if (a2)
      {
        unint64_t v5 = *(void (**)(uint64_t, uint64_t))(v3 + 40);
        if (v5)
        {
          uint64_t v6 = *(void **)(a1 + 40);
          if (v6 == &nw_protocol_ref_counted_handle)
          {
            uint64_t v7 = *(void *)(a1 + 88);
            if (v7) {
              *(void *)(a1 + 88) = v7 + 1;
            }
          }
          if (*(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
          {
            uint64_t v8 = *(void *)(a2 + 88);
            if (v8) {
              *(void *)(a2 + 88) = v8 + 1;
            }
            v5(a1, a2);
            if (*(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
            {
              uint64_t v9 = *(void *)(a2 + 88);
              if (v9)
              {
                uint64_t v10 = v9 - 1;
                *(void *)(a2 + 88) = v10;
                if (!v10)
                {
                  BOOL v11 = *(void (***)(void))(a2 + 64);
                  if (v11)
                  {
                    *(void *)(a2 + 64) = 0;
                    v11[2](v11);
                    _Block_release(v11);
                  }
                  if (*(unsigned char *)(a2 + 72))
                  {
                    os_log_type_t v12 = *(const void **)(a2 + 64);
                    if (v12) {
                      _Block_release(v12);
                    }
                  }
                  free((void *)a2);
                }
              }
            }
          }
          else
          {
            v5(a1, a2);
          }
          if (v6 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
          {
            uint64_t v13 = *(void *)(a1 + 88);
            if (v13)
            {
              uint64_t v14 = v13 - 1;
              *(void *)(a1 + 88) = v14;
              if (!v14)
              {
                char v15 = *(void (***)(void))(a1 + 64);
                if (v15)
                {
                  *(void *)(a1 + 64) = 0;
                  v15[2](v15);
                  _Block_release(v15);
                }
                if (*(unsigned char *)(a1 + 72))
                {
                  uint64_t v16 = *(const void **)(a1 + 64);
                  if (v16) {
                    _Block_release(v16);
                  }
                }
                free((void *)a1);
              }
            }
          }
        }
      }
    }
  }
}

NWConcrete_nw_data_transfer_report *nw_data_transfer_report_create_from_dictionary(void *a1)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  nw_parameters_t v2 = v1;
  if (!v1)
  {
    __int16 v17 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v42 = "nw_data_transfer_report_create_from_dictionary";
    char v18 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v39 = 0;
    if (!__nwlog_fault(v18, &type, &v39)) {
      goto LABEL_64;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v19 = __nwlog_obj();
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v42 = "nw_data_transfer_report_create_from_dictionary";
        _os_log_impl(&dword_1830D4000, v19, v20, "%{public}s called with null dictionary", buf, 0xCu);
      }
    }
    else if (v39)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v19 = __nwlog_obj();
      os_log_type_t v28 = type;
      BOOL v29 = os_log_type_enabled(v19, type);
      if (backtrace_string)
      {
        if (v29)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v42 = "nw_data_transfer_report_create_from_dictionary";
          __int16 v43 = 2082;
          id v44 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v19, v28, "%{public}s called with null dictionary, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        if (!v18) {
          goto LABEL_66;
        }
        goto LABEL_65;
      }
      if (v29)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v42 = "nw_data_transfer_report_create_from_dictionary";
        _os_log_impl(&dword_1830D4000, v19, v28, "%{public}s called with null dictionary, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v19 = __nwlog_obj();
      os_log_type_t v36 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v42 = "nw_data_transfer_report_create_from_dictionary";
        _os_log_impl(&dword_1830D4000, v19, v36, "%{public}s called with null dictionary, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_63;
  }
  Class Class = object_getClass(v1);
  id v4 = (objc_class *)MEMORY[0x1E4F14590];
  if (Class != (Class)MEMORY[0x1E4F14590])
  {
    uint64_t v21 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v42 = "nw_data_transfer_report_create_from_dictionary";
    char v18 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v39 = 0;
    if (!__nwlog_fault(v18, &type, &v39)) {
      goto LABEL_64;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v19 = __nwlog_obj();
      os_log_type_t v22 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v42 = "nw_data_transfer_report_create_from_dictionary";
        _os_log_impl(&dword_1830D4000, v19, v22, "%{public}s called with null (xpc_get_type(dictionary) == (&_xpc_type_dictionary))", buf, 0xCu);
      }
    }
    else if (v39)
    {
      id v30 = (char *)__nw_create_backtrace_string();
      uint64_t v19 = __nwlog_obj();
      os_log_type_t v31 = type;
      BOOL v32 = os_log_type_enabled(v19, type);
      if (v30)
      {
        if (v32)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v42 = "nw_data_transfer_report_create_from_dictionary";
          __int16 v43 = 2082;
          id v44 = v30;
          _os_log_impl(&dword_1830D4000, v19, v31, "%{public}s called with null (xpc_get_type(dictionary) == (&_xpc_type_dictionary)), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v30);
LABEL_64:
        if (!v18)
        {
LABEL_66:
          uint64_t v6 = 0;
          goto LABEL_8;
        }
LABEL_65:
        free(v18);
        goto LABEL_66;
      }
      if (v32)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v42 = "nw_data_transfer_report_create_from_dictionary";
        _os_log_impl(&dword_1830D4000, v19, v31, "%{public}s called with null (xpc_get_type(dictionary) == (&_xpc_type_dictionary)), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v19 = __nwlog_obj();
      os_log_type_t v37 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v42 = "nw_data_transfer_report_create_from_dictionary";
        _os_log_impl(&dword_1830D4000, v19, v37, "%{public}s called with null (xpc_get_type(dictionary) == (&_xpc_type_dictionary)), backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_63:

    goto LABEL_64;
  }
  unint64_t v5 = objc_alloc_init(NWConcrete_nw_data_transfer_report);
  uint64_t v6 = v5;
  if (!v5)
  {
    char v23 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v42 = "nw_data_transfer_report_create_from_dictionary";
    unsigned int v24 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v39 = 0;
    if (__nwlog_fault(v24, &type, &v39))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        id v25 = __nwlog_obj();
        os_log_type_t v26 = type;
        if (os_log_type_enabled(v25, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v42 = "nw_data_transfer_report_create_from_dictionary";
          _os_log_impl(&dword_1830D4000, v25, v26, "%{public}s called with null report", buf, 0xCu);
        }
      }
      else if (v39)
      {
        id v33 = (char *)__nw_create_backtrace_string();
        id v25 = __nwlog_obj();
        os_log_type_t v34 = type;
        BOOL v35 = os_log_type_enabled(v25, type);
        if (v33)
        {
          if (v35)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v42 = "nw_data_transfer_report_create_from_dictionary";
            __int16 v43 = 2082;
            id v44 = v33;
            _os_log_impl(&dword_1830D4000, v25, v34, "%{public}s called with null report, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v33);
          goto LABEL_70;
        }
        if (v35)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v42 = "nw_data_transfer_report_create_from_dictionary";
          _os_log_impl(&dword_1830D4000, v25, v34, "%{public}s called with null report, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        id v25 = __nwlog_obj();
        os_log_type_t v38 = type;
        if (os_log_type_enabled(v25, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v42 = "nw_data_transfer_report_create_from_dictionary";
          _os_log_impl(&dword_1830D4000, v25, v38, "%{public}s called with null report, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_70:
    if (v24) {
      free(v24);
    }
    goto LABEL_7;
  }
  *((_DWORD *)v5 + 13) = 2;
  *((void *)v5 + 2) = xpc_dictionary_get_uint64(v2, "duration_milliseconds");
  if (object_getClass(v2) == v4)
  {
    xpc_object_t value = xpc_dictionary_get_value(v2, "primary_path");
    uint64_t v7 = value;
    if (!value) {
      goto LABEL_6;
    }
    if (object_getClass(value) == v4)
    {
      xpc_object_t v11 = xpc_retain(v7);
      uint64_t v7 = v11;
      if (v11)
      {
        *((_DWORD *)v6 + 11) = 1;
        *((void *)v6 + 7) = xpc_dictionary_get_uint64(v11, "total_received_ip_packet_count");
        *((void *)v6 + 29) = xpc_dictionary_get_uint64(v7, "incremental_received_ip_packet_count");
        *((void *)v6 + 8) = xpc_dictionary_get_uint64(v7, "total_received_ip_ect1_packet_count");
        *((void *)v6 + 30) = xpc_dictionary_get_uint64(v7, "incremental_received_ip_ect1_packet_count");
        *((void *)v6 + 9) = xpc_dictionary_get_uint64(v7, "total_received_ip_ect0_packet_count");
        *((void *)v6 + 31) = xpc_dictionary_get_uint64(v7, "incremental_received_ip_ect0_packet_count");
        *((void *)v6 + 10) = xpc_dictionary_get_uint64(v7, "total_received_ip_ce_packet_count");
        *((void *)v6 + 32) = xpc_dictionary_get_uint64(v7, "incremental_received_ip_ce_packet_count");
        *((void *)v6 + 11) = xpc_dictionary_get_uint64(v7, "total_sent_ip_packet_count");
        *((void *)v6 + 33) = xpc_dictionary_get_uint64(v7, "incremental_sent_ip_packet_count");
        *((void *)v6 + 12) = xpc_dictionary_get_uint64(v7, "total_received_transport_byte_count");
        *((void *)v6 + 34) = xpc_dictionary_get_uint64(v7, "incremental_received_transport_byte_count");
        *((void *)v6 + 13) = xpc_dictionary_get_uint64(v7, "total_received_transport_duplicate_byte_count");
        *((void *)v6 + 35) = xpc_dictionary_get_uint64(v7, "incremental_received_transport_duplicate_byte_count");
        *((void *)v6 + 14) = xpc_dictionary_get_uint64(v7, "total_received_transport_out_of_order_byte_count");
        *((void *)v6 + 36) = xpc_dictionary_get_uint64(v7, "incremental_received_transport_out_of_order_byte_count");
        *((void *)v6 + 15) = xpc_dictionary_get_uint64(v7, "total_sent_transport_byte_count");
        *((void *)v6 + 37) = xpc_dictionary_get_uint64(v7, "incremental_sent_transport_byte_count");
        *((void *)v6 + 16) = xpc_dictionary_get_uint64(v7, "total_sent_transport_retransmitted_byte_count");
        *((void *)v6 + 38) = xpc_dictionary_get_uint64(v7, "incremental_sent_transport_retransmitted_byte_count");
        *((void *)v6 + 17) = xpc_dictionary_get_uint64(v7, "total_sent_transport_ecn_capable_packet_count");
        *((void *)v6 + 39) = xpc_dictionary_get_uint64(v7, "incremental_sent_transport_ecn_capable_packet_count");
        *((void *)v6 + 18) = xpc_dictionary_get_uint64(v7, "total_sent_transport_ecn_capable_acked_packet_count");
        *((void *)v6 + 40) = xpc_dictionary_get_uint64(v7, "incremental_sent_transport_ecn_capable_acked_packet_count");
        *((void *)v6 + 19) = xpc_dictionary_get_uint64(v7, "total_sent_transport_ecn_capable_marked_packet_count");
        *((void *)v6 + 41) = xpc_dictionary_get_uint64(v7, "incremental_sent_transport_ecn_capable_marked_packet_count");
        *((void *)v6 + 20) = xpc_dictionary_get_uint64(v7, "total_sent_transport_ecn_capable_lost_packet_count");
        *((void *)v6 + 42) = xpc_dictionary_get_uint64(v7, "incremental_sent_transport_ecn_capable_lost_packet_count");
        *((void *)v6 + 21) = xpc_dictionary_get_uint64(v7, "total_transport_smoothed_rtt_milliseconds");
        *((void *)v6 + 43) = xpc_dictionary_get_uint64(v7, "incremental_transport_smoothed_rtt_milliseconds");
        *((void *)v6 + 22) = xpc_dictionary_get_uint64(v7, "total_transport_minimum_rtt_milliseconds");
        *((void *)v6 + 44) = xpc_dictionary_get_uint64(v7, "incremental_transport_minimum_rtt_milliseconds");
        *((void *)v6 + 23) = xpc_dictionary_get_uint64(v7, "total_transport_current_rtt_milliseconds");
        *((void *)v6 + 45) = xpc_dictionary_get_uint64(v7, "incremental_transport_current_rtt_milliseconds");
        *((void *)v6 + 24) = xpc_dictionary_get_uint64(v7, "total_transport_rtt_variance");
        *((void *)v6 + 46) = xpc_dictionary_get_uint64(v7, "incremental_transport_rtt_variance");
        *((void *)v6 + 25) = xpc_dictionary_get_uint64(v7, "total_transport_congestion_window");
        *((void *)v6 + 47) = xpc_dictionary_get_uint64(v7, "incremental_transport_congestion_window");
        *((void *)v6 + 26) = xpc_dictionary_get_uint64(v7, "total_transport_slow_start_threshold");
        *((void *)v6 + 48) = xpc_dictionary_get_uint64(v7, "incremental_transport_slow_start_threshold");
        *((void *)v6 + 27) = xpc_dictionary_get_uint64(v7, "total_received_application_byte_count");
        *((void *)v6 + 49) = xpc_dictionary_get_uint64(v7, "incremental_received_application_byte_count");
        *((void *)v6 + 28) = xpc_dictionary_get_uint64(v7, "total_sent_application_byte_count");
        *((void *)v6 + 50) = xpc_dictionary_get_uint64(v7, "incremental_sent_application_byte_count");
        if (object_getClass(v7) == v4
          && (xpc_object_t v13 = xpc_dictionary_get_value(v7, "interface")) != 0
          && (uint64_t v14 = v13, object_getClass(v13) == v4))
        {
          id v12 = v14;
          char v15 = nw_interface_create_from_dictionary(v12);
          uint64_t v16 = (void *)*((void *)v6 + 51);
          *((void *)v6 + 51) = v15;
        }
        else
        {
          id v12 = 0;
        }
      }
      goto LABEL_6;
    }
  }
  uint64_t v7 = 0;
LABEL_6:
  uint64_t v8 = v6;

LABEL_7:
LABEL_8:

  return v6;
}

void sub_1832996C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_establishment_report_create_from_dictionary_block_invoke_4(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  Class Class = object_getClass(v4);
  uint64_t v6 = (objc_class *)MEMORY[0x1E4F14590];
  if (Class == (Class)MEMORY[0x1E4F14590])
  {
    uint64_t v7 = objc_alloc_init(NWConcrete_nw_resolution_report);
    v7->milliseconds = xpc_dictionary_get_uint64(v4, "milliseconds");
    if (!v4) {
      goto LABEL_6;
    }
    if (object_getClass(v4) == v6
      && (xpc_object_t value = xpc_dictionary_get_value(v4, "successful_endpoint")) != 0
      && (id v12 = value, object_getClass(value) == v6))
    {
      id v8 = v12;
      xpc_object_t v13 = nw_endpoint_create_from_dictionary(v8);
      successful_endpoint = v7->successful_endpoint;
      v7->successful_endpoint = (OS_nw_endpoint *)v13;
    }
    else
    {
      id v8 = 0;
    }

    if (object_getClass(v4) == v6
      && (xpc_object_t v15 = xpc_dictionary_get_value(v4, "preferred_endpoint")) != 0
      && (uint64_t v16 = v15, object_getClass(v15) == v6))
    {
      id v9 = v16;
      __int16 v17 = nw_endpoint_create_from_dictionary(v9);
      preferred_endpoint = v7->preferred_endpoint;
      v7->preferred_endpoint = (OS_nw_endpoint *)v17;
    }
    else
    {
LABEL_6:
      id v9 = 0;
    }

    v7->endpoint_count = xpc_dictionary_get_uint64(v4, "endpoint_count");
    v7->source = xpc_dictionary_get_uint64(v4, "source");
    nw_array_append(*(void *)(*(void *)(a1 + 32) + 72), v7);
  }
  return 1;
}

void sub_183299B18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_endpoint_get_parent_endpoint_domain(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    id v1 = *(void **)(a1 + 112);
    return nw_endpoint_get_domain_for_policy(v1);
  }
  uint64_t v3 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v14 = "nw_endpoint_get_parent_endpoint_domain";
  id v4 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (__nwlog_fault(v4, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      unint64_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v14 = "nw_endpoint_get_parent_endpoint_domain";
        _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s called with null endpoint", buf, 0xCu);
      }
    }
    else if (v11)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      unint64_t v5 = __nwlog_obj();
      os_log_type_t v8 = type;
      BOOL v9 = os_log_type_enabled(v5, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v14 = "nw_endpoint_get_parent_endpoint_domain";
          __int16 v15 = 2082;
          uint64_t v16 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v5, v8, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_21;
      }
      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v14 = "nw_endpoint_get_parent_endpoint_domain";
        _os_log_impl(&dword_1830D4000, v5, v8, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      unint64_t v5 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v14 = "nw_endpoint_get_parent_endpoint_domain";
        _os_log_impl(&dword_1830D4000, v5, v10, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_21:
  if (v4) {
    free(v4);
  }
  return 0;
}

uint64_t __nw_establishment_report_copy_dictionary_block_invoke_4(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  xpc_object_t v5 = xpc_dictionary_create(0, 0, 0);
  os_log_type_t v6 = v5;
  uint64_t v7 = *((void *)v4 + 1);
  if (v7) {
    xpc_dictionary_set_uint64(v5, "milliseconds", v7);
  }
  os_log_type_t v8 = (void *)[*((id *)v4 + 4) copyDictionary];
  if (v8) {
    xpc_dictionary_set_value(v6, "successful_endpoint", v8);
  }

  BOOL v9 = (void *)[*((id *)v4 + 5) copyDictionary];
  if (v9) {
    xpc_dictionary_set_value(v6, "preferred_endpoint", v9);
  }

  uint64_t v10 = v4[14];
  if (v10) {
    xpc_dictionary_set_uint64(v6, "endpoint_count", v10);
  }
  uint64_t v11 = v4[15];
  if (v11) {
    xpc_dictionary_set_uint64(v6, "source", v11);
  }
  xpc_array_append_value(*(xpc_object_t *)(a1 + 32), v6);

  return 1;
}

void sub_18329A1E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18329A218()
{
}

NSObject *nw_endpoint_create_from_dictionary(void *a1)
{
  uint64_t v93 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  nw_parameters_t v2 = v1;
  if (!v1)
  {
    BOOL v77 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_endpoint_create_from_dictionary";
    char v23 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(length[0]) = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v23, length, &type))
    {
      if (LOBYTE(length[0]) == 17)
      {
        os_log_type_t v78 = __nwlog_obj();
        os_log_type_t v79 = length[0];
        if (os_log_type_enabled(v78, length[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_create_from_dictionary";
          _os_log_impl(&dword_1830D4000, v78, v79, "%{public}s called with null dictionary", buf, 0xCu);
        }
      }
      else if (type)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v78 = __nwlog_obj();
        os_log_type_t v80 = length[0];
        BOOL v81 = os_log_type_enabled(v78, length[0]);
        if (backtrace_string)
        {
          if (v81)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_endpoint_create_from_dictionary";
            __int16 v88 = 2082;
            os_log_type_t v89 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v78, v80, "%{public}s called with null dictionary, dumping backtrace:%{public}s", buf, 0x16u);
          }

          goto LABEL_55;
        }
        if (v81)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_create_from_dictionary";
          _os_log_impl(&dword_1830D4000, v78, v80, "%{public}s called with null dictionary, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        os_log_type_t v78 = __nwlog_obj();
        os_log_type_t v82 = length[0];
        if (os_log_type_enabled(v78, length[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_create_from_dictionary";
          _os_log_impl(&dword_1830D4000, v78, v82, "%{public}s called with null dictionary, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_90:
    if (!v23)
    {
LABEL_92:
      os_log_type_t v38 = 0;
      goto LABEL_93;
    }
LABEL_91:
    free(v23);
    goto LABEL_92;
  }
  uint64_t uint64 = xpc_dictionary_get_uint64(v1, "type");
  switch(uint64)
  {
    case 1uLL:
      length[0] = 0;
      data = (const sockaddr *)xpc_dictionary_get_data(v2, "address", length);
      if (data && length[0] >= 2 && length[0] >= data->sa_len)
      {
        nw_endpoint_t address = nw_endpoint_create_address(data);
        goto LABEL_15;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v5 = (id)gLogObj;
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_endpoint_create_from_dictionary";
      os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v85 = 0;
      if (!__nwlog_fault(v6, &type, &v85)) {
        goto LABEL_97;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v7 = (id)gLogObj;
        os_log_type_t v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_create_from_dictionary";
          _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s invalid sockaddr in dictionary", buf, 0xCu);
        }
      }
      else if (v85)
      {
        int v64 = __nw_create_backtrace_string();
        if (v64)
        {
          uint64_t v65 = (char *)v64;
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          BOOL v66 = (id)gLogObj;
          os_log_type_t v67 = type;
          if (os_log_type_enabled(v66, type))
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_endpoint_create_from_dictionary";
            __int16 v88 = 2082;
            os_log_type_t v89 = v65;
            _os_log_impl(&dword_1830D4000, v66, v67, "%{public}s invalid sockaddr in dictionary, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v65);
          if (!v6) {
            goto LABEL_99;
          }
          goto LABEL_98;
        }
        uint64_t v7 = __nwlog_obj();
        os_log_type_t v75 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_create_from_dictionary";
          _os_log_impl(&dword_1830D4000, v7, v75, "%{public}s invalid sockaddr in dictionary, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v7 = (id)gLogObj;
        os_log_type_t v72 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_create_from_dictionary";
          _os_log_impl(&dword_1830D4000, v7, v72, "%{public}s invalid sockaddr in dictionary, backtrace limit exceeded", buf, 0xCu);
        }
      }

LABEL_97:
      if (!v6)
      {
LABEL_99:
        nw_endpoint_t v17 = 0;
        goto LABEL_16;
      }
LABEL_98:
      free(v6);
      goto LABEL_99;
    case 2uLL:
      string = xpc_dictionary_get_string(v2, "hostname");
      unsigned int v10 = xpc_dictionary_get_uint64(v2, "port");
      nw_endpoint_t address = (nw_endpoint_t)nw_endpoint_create_host_with_numeric_port(string, bswap32(v10) >> 16);
      goto LABEL_15;
    case 3uLL:
      id v12 = xpc_dictionary_get_string(v2, "bonjour_name");
      xpc_object_t v13 = xpc_dictionary_get_string(v2, "bonjour_type");
      uint64_t v14 = xpc_dictionary_get_string(v2, "bonjour_domain");
      nw_endpoint_t address = nw_endpoint_create_bonjour_service(v12, v13, v14);
      goto LABEL_15;
    case 4uLL:
      __int16 v15 = xpc_dictionary_get_string(v2, "url");
      nw_endpoint_t address = nw_endpoint_create_url(v15);
      goto LABEL_15;
    case 5uLL:
      uint64_t v16 = xpc_dictionary_get_string(v2, "srv_name");
      nw_endpoint_t address = (nw_endpoint_t)nw_endpoint_create_srv(v16);
LABEL_15:
      nw_endpoint_t v17 = address;
      goto LABEL_16;
    case 6uLL:
      id v42 = v2;
      __int16 v43 = xpc_dictionary_get_string(v42, "application_service_name");
      id v44 = xpc_dictionary_get_string(v42, "application_service_alias");
      uuid = xpc_dictionary_get_uuid(v42, "service_identifier");
      length[0] = 0;
      length[1] = 0;
      if (uuid) {
        *(_OWORD *)length = *(_OWORD *)uuid;
      }
      char v46 = xpc_dictionary_get_string(v42, "device_name");
      __int16 v47 = xpc_dictionary_get_string(v42, "device_model");
      int int64 = xpc_dictionary_get_int64(v42, "device_color");
      int v49 = xpc_dictionary_get_int64(v42, "route");
      os_log_type_t v50 = xpc_dictionary_get_string(v42, "contact_id");
      BOOL v51 = -[NWConcrete_nw_application_service_endpoint initWithApplicationService:alias:serviceUUID:deviceName:deviceModel:contactID:]([NWConcrete_nw_application_service_endpoint alloc], v43, v44, (const unsigned __int8 *)length, v46, v47, v50);
      nw_endpoint_t v17 = (nw_endpoint_t)v51;
      if (v51)
      {
        nw_endpoint_set_device_color((void *)v51, int64);
        nw_endpoint_set_advertised_route(v17, v49);
        __int16 v52 = v17;
        goto LABEL_108;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v60 = (id)gLogObj;
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_endpoint_create_application_service_from_dictionary";
      os_log_type_t v61 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v85 = 0;
      if ((__nwlog_fault(v61, &type, &v85) & 1) == 0) {
        goto LABEL_106;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v62 = (id)gLogObj;
        os_log_type_t v63 = type;
        if (os_log_type_enabled(v62, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_create_application_service_from_dictionary";
          _os_log_impl(&dword_1830D4000, v62, v63, "%{public}s NWOSApplicationServiceEndpoint alloc/init failed", buf, 0xCu);
        }
LABEL_105:

LABEL_106:
        if (v61) {
          goto LABEL_107;
        }
        goto LABEL_108;
      }
      if (!v85)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v62 = (id)gLogObj;
        os_log_type_t v76 = type;
        if (os_log_type_enabled(v62, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_create_application_service_from_dictionary";
          _os_log_impl(&dword_1830D4000, v62, v76, "%{public}s NWOSApplicationServiceEndpoint alloc/init failed, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_105;
      }
      uint64_t v69 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v62 = (id)gLogObj;
      os_log_type_t v70 = type;
      BOOL v71 = os_log_type_enabled(v62, type);
      if (!v69)
      {
        if (v71)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_create_application_service_from_dictionary";
          _os_log_impl(&dword_1830D4000, v62, v70, "%{public}s NWOSApplicationServiceEndpoint alloc/init failed, no backtrace", buf, 0xCu);
        }
        goto LABEL_105;
      }
      if (v71)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_endpoint_create_application_service_from_dictionary";
        __int16 v88 = 2082;
        os_log_type_t v89 = v69;
        _os_log_impl(&dword_1830D4000, v62, v70, "%{public}s NWOSApplicationServiceEndpoint alloc/init failed, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(v69);
      if (v61) {
LABEL_107:
      }
        free(v61);
LABEL_108:

LABEL_16:
      if (!v17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v22 = (id)gLogObj;
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_endpoint_create_from_dictionary";
        char v23 = (char *)_os_log_send_and_compose_impl();

        LOBYTE(length[0]) = 16;
        os_log_type_t type = OS_LOG_TYPE_DEFAULT;
        if (!__nwlog_fault(v23, length, &type)) {
          goto LABEL_90;
        }
        if (LOBYTE(length[0]) == 17)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          unsigned int v24 = (id)gLogObj;
          os_log_type_t v25 = length[0];
          if (os_log_type_enabled(v24, length[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_endpoint_create_from_dictionary";
            _os_log_impl(&dword_1830D4000, v24, v25, "%{public}s invalid dictionary", buf, 0xCu);
          }
LABEL_73:

          goto LABEL_90;
        }
        if (type == OS_LOG_TYPE_DEFAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          unsigned int v24 = (id)gLogObj;
          os_log_type_t v59 = length[0];
          if (os_log_type_enabled(v24, length[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_endpoint_create_from_dictionary";
            _os_log_impl(&dword_1830D4000, v24, v59, "%{public}s invalid dictionary, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_73;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        unsigned int v24 = (id)gLogObj;
        os_log_type_t v40 = length[0];
        BOOL v41 = os_log_type_enabled(v24, length[0]);
        if (!backtrace_string)
        {
          if (v41)
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_endpoint_create_from_dictionary";
            _os_log_impl(&dword_1830D4000, v24, v40, "%{public}s invalid dictionary, no backtrace", buf, 0xCu);
          }
          goto LABEL_73;
        }
        if (v41)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_endpoint_create_from_dictionary";
          __int16 v88 = 2082;
          os_log_type_t v89 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v24, v40, "%{public}s invalid dictionary, dumping backtrace:%{public}s", buf, 0x16u);
        }

LABEL_55:
        free(backtrace_string);
        if (!v23) {
          goto LABEL_92;
        }
        goto LABEL_91;
      }
      HIBYTE(v17[28].isa) = HIBYTE(v17[28].isa) & 0xFE | xpc_dictionary_get_BOOL(v2, "is_local_domain");
      char v18 = xpc_dictionary_get_uuid(v2, "agent_identifier");
      if (v18) {
        *(_OWORD *)((char *)&v17[3].isa + 4) = *(_OWORD *)v18;
      }
      Class Class = object_getClass(v2);
      os_log_type_t v20 = (objc_class *)MEMORY[0x1E4F14590];
      if (Class == (Class)MEMORY[0x1E4F14590] && (xpc_object_t value = xpc_dictionary_get_value(v2, "interface")) != 0)
      {
        xpc_object_t v27 = value;
        if (object_getClass(value) == v20) {
          uint64_t v21 = v27;
        }
        else {
          uint64_t v21 = 0;
        }
      }
      else
      {
        uint64_t v21 = 0;
      }
      id v28 = v21;
      BOOL v29 = nw_interface_create_from_dictionary(v28);
      Class isa = v17[2].isa;
      v17[2].Class isa = (Class)v29;

      WORD2(v17[28].isa) = xpc_dictionary_get_uint64(v2, "alternate_port");
      uint64_t v31 = xpc_dictionary_get_value(v2, "signature");
      Class v32 = v17[24].isa;
      v17[24].Class isa = (Class)v31;

      id v33 = xpc_dictionary_get_string(v2, "device_id");
      nw_endpoint_set_device_id(v17, v33);
      *(void *)buf = 0;
      os_log_type_t v34 = (const uint8_t *)xpc_dictionary_get_data(v2, "txt_record", (size_t *)buf);
      if (v34 && *(void *)buf)
      {
        nw_txt_record_t v35 = nw_txt_record_create_with_bytes(v34, *(size_t *)buf);
        Class v36 = v17[23].isa;
        v17[23].Class isa = (Class)v35;
      }
      os_log_type_t v37 = xpc_dictionary_get_array(v2, "public_keys");
      if (v37)
      {
        applier[0] = MEMORY[0x1E4F143A8];
        applier[1] = 3221225472;
        applier[2] = __nw_endpoint_create_from_dictionary_block_invoke;
        applier[3] = &unk_1E524B4A0;
        int v84 = v17;
        xpc_array_apply(v37, applier);
      }
      os_log_type_t v38 = v17;

LABEL_93:
      return v38;
    default:
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v53 = (id)gLogObj;
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_endpoint_create_from_dictionary";
      __int16 v88 = 2048;
      os_log_type_t v89 = (char *)uint64;
      char v23 = (char *)_os_log_send_and_compose_impl();

      LOBYTE(length[0]) = 16;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      if (!__nwlog_fault(v23, length, &type)) {
        goto LABEL_90;
      }
      if (LOBYTE(length[0]) == 17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v54 = (id)gLogObj;
        os_log_type_t v55 = length[0];
        if (os_log_type_enabled(v54, length[0]))
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_endpoint_create_from_dictionary";
          __int16 v88 = 2048;
          os_log_type_t v89 = (char *)uint64;
          _os_log_impl(&dword_1830D4000, v54, v55, "%{public}s incorrect endpoint type %llu", buf, 0x16u);
        }
      }
      else if (type)
      {
        __int16 v56 = __nw_create_backtrace_string();
        if (v56)
        {
          backtrace_string = (char *)v56;
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v57 = (id)gLogObj;
          os_log_type_t v58 = length[0];
          if (os_log_type_enabled(v57, length[0]))
          {
            *(_DWORD *)buf = 136446722;
            *(void *)&uint8_t buf[4] = "nw_endpoint_create_from_dictionary";
            __int16 v88 = 2048;
            os_log_type_t v89 = (char *)uint64;
            __int16 v90 = 2082;
            os_log_type_t v91 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v57, v58, "%{public}s incorrect endpoint type %llu, dumping backtrace:%{public}s", buf, 0x20u);
          }

          goto LABEL_55;
        }
        os_log_type_t v54 = __nwlog_obj();
        os_log_type_t v73 = length[0];
        if (os_log_type_enabled(v54, length[0]))
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_endpoint_create_from_dictionary";
          __int16 v88 = 2048;
          os_log_type_t v89 = (char *)uint64;
          _os_log_impl(&dword_1830D4000, v54, v73, "%{public}s incorrect endpoint type %llu, no backtrace", buf, 0x16u);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v54 = (id)gLogObj;
        os_log_type_t v68 = length[0];
        if (os_log_type_enabled(v54, length[0]))
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_endpoint_create_from_dictionary";
          __int16 v88 = 2048;
          os_log_type_t v89 = (char *)uint64;
          _os_log_impl(&dword_1830D4000, v54, v68, "%{public}s incorrect endpoint type %llu, backtrace limit exceeded", buf, 0x16u);
        }
      }

      goto LABEL_90;
  }
}

void sub_18329BDE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

NWConcrete_nw_interface *nw_interface_create_from_dictionary(void *a1)
{
  id v1 = a1;
  if (v1)
  {
    nw_parameters_t v2 = objc_alloc_init(NWConcrete_nw_interface);
    if (v2)
    {
      v2->os_log_type_t type = xpc_dictionary_get_uint64(v1, "type");
      v2->subos_log_type_t type = xpc_dictionary_get_uint64(v1, "subtype");
      v2->index = xpc_dictionary_get_uint64(v1, "index");
      v2->generation = xpc_dictionary_get_uint64(v1, "generation");
      v2->delegate_index = xpc_dictionary_get_uint64(v1, "delegate_index");
      string = (unsigned __int8 *)xpc_dictionary_get_string(v1, "name");
      if (string)
      {
        int v4 = *string;
        v2->name[0] = v4;
        if (v4)
        {
          int v5 = string[1];
          v2->name[1] = v5;
          if (v5)
          {
            int v6 = string[2];
            v2->name[2] = v6;
            if (v6)
            {
              int v7 = string[3];
              v2->name[3] = v7;
              if (v7)
              {
                int v8 = string[4];
                v2->name[4] = v8;
                if (v8)
                {
                  int v9 = string[5];
                  v2->name[5] = v9;
                  if (v9)
                  {
                    int v10 = string[6];
                    v2->name[6] = v10;
                    if (v10)
                    {
                      int v11 = string[7];
                      v2->name[7] = v11;
                      if (v11)
                      {
                        int v12 = string[8];
                        v2->name[8] = v12;
                        if (v12)
                        {
                          int v13 = string[9];
                          v2->name[9] = v13;
                          if (v13)
                          {
                            int v14 = string[10];
                            v2->name[10] = v14;
                            if (v14)
                            {
                              int v15 = string[11];
                              v2->name[11] = v15;
                              if (v15)
                              {
                                int v16 = string[12];
                                v2->name[12] = v16;
                                if (v16)
                                {
                                  int v17 = string[13];
                                  v2->name[13] = v17;
                                  if (v17)
                                  {
                                    int v18 = string[14];
                                    v2->name[14] = v18;
                                    if (v18)
                                    {
                                      int v19 = string[15];
                                      v2->name[15] = v19;
                                      if (v19)
                                      {
                                        int v20 = string[16];
                                        v2->name[16] = v20;
                                        if (v20)
                                        {
                                          int v21 = string[17];
                                          v2->name[17] = v21;
                                          if (v21)
                                          {
                                            int v22 = string[18];
                                            v2->name[18] = v22;
                                            if (v22)
                                            {
                                              int v23 = string[19];
                                              v2->name[19] = v23;
                                              if (v23)
                                              {
                                                int v24 = string[20];
                                                v2->name[20] = v24;
                                                if (v24)
                                                {
                                                  int v25 = string[21];
                                                  v2->name[21] = v25;
                                                  if (v25)
                                                  {
                                                    int v26 = string[22];
                                                    v2->name[22] = v26;
                                                    if (v26)
                                                    {
                                                      int v27 = string[23];
                                                      v2->name[23] = v27;
                                                      if (v27) {
                                                        v2->name[24] = 0;
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      size_t length = 0;
      data = xpc_dictionary_get_data(v1, "details", &length);
      if (data && length == 76)
      {
        *(_OWORD *)v2->details.ipv4_signature.signature = *data;
        long long v29 = data[1];
        long long v30 = data[2];
        long long v31 = data[3];
        *(_OWORD *)&v2->details.ipv4_netmask = *(_OWORD *)((char *)data + 60);
        *(_OWORD *)&v2->details.mtu = v31;
        *(_OWORD *)&v2->details.ipv6_signature.signature[8] = v30;
        *(_OWORD *)&v2->details.ipv4_signature.signature[16] = v29;
      }
    }
  }
  else
  {
    nw_parameters_t v2 = 0;
  }

  return v2;
}

void sub_18329C0E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18329C7DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18329C88C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_protocol_stack_prepend_application_protocol(nw_protocol_stack_t stack, nw_protocol_options_t protocol)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  nw_protocol_stack_t v3 = stack;
  int v4 = protocol;
  int v5 = v4;
  if (!v3)
  {
    int v10 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    int v27 = "nw_protocol_stack_prepend_application_protocol";
    int v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (!__nwlog_fault(v11, &type, &v24)) {
      goto LABEL_42;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v12 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        int v27 = "nw_protocol_stack_prepend_application_protocol";
        _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s called with null stack", buf, 0xCu);
      }
    }
    else if (v24)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v12 = __nwlog_obj();
      os_log_type_t v17 = type;
      BOOL v18 = os_log_type_enabled(v12, type);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446466;
          int v27 = "nw_protocol_stack_prepend_application_protocol";
          __int16 v28 = 2082;
          long long v29 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v12, v17, "%{public}s called with null stack, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_42:
        if (!v11) {
          goto LABEL_8;
        }
LABEL_43:
        free(v11);
        goto LABEL_8;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        int v27 = "nw_protocol_stack_prepend_application_protocol";
        _os_log_impl(&dword_1830D4000, v12, v17, "%{public}s called with null stack, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int v12 = __nwlog_obj();
      os_log_type_t v22 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        int v27 = "nw_protocol_stack_prepend_application_protocol";
        _os_log_impl(&dword_1830D4000, v12, v22, "%{public}s called with null stack, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_41:

    goto LABEL_42;
  }
  if (v4)
  {
    p_uint64_t isa = (void **)&v3[1].isa;
    uint64_t isa = (uint64_t)v3[1].isa;
    if (!isa)
    {
      if (nw_protocol_options_are_persistent(v5) || (p_uint64_t isa = (void **)&v3[2].isa, (uint64_t isa = (uint64_t)v3[2].isa) == 0))
      {
        BOOL v8 = nw_array_create();
        int v9 = *p_isa;
        *p_uint64_t isa = (void *)v8;

        uint64_t isa = (uint64_t)*p_isa;
      }
    }
    nw_array_prepend(isa, v5);
    goto LABEL_8;
  }
  int v14 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  int v27 = "nw_protocol_stack_prepend_application_protocol";
  int v11 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v24 = 0;
  if (!__nwlog_fault(v11, &type, &v24)) {
    goto LABEL_42;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    int v12 = __nwlog_obj();
    os_log_type_t v15 = type;
    if (os_log_type_enabled(v12, type))
    {
      *(_DWORD *)buf = 136446210;
      int v27 = "nw_protocol_stack_prepend_application_protocol";
      _os_log_impl(&dword_1830D4000, v12, v15, "%{public}s called with null protocol", buf, 0xCu);
    }
    goto LABEL_41;
  }
  if (!v24)
  {
    int v12 = __nwlog_obj();
    os_log_type_t v23 = type;
    if (os_log_type_enabled(v12, type))
    {
      *(_DWORD *)buf = 136446210;
      int v27 = "nw_protocol_stack_prepend_application_protocol";
      _os_log_impl(&dword_1830D4000, v12, v23, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_41;
  }
  int v19 = (char *)__nw_create_backtrace_string();
  int v12 = __nwlog_obj();
  os_log_type_t v20 = type;
  BOOL v21 = os_log_type_enabled(v12, type);
  if (!v19)
  {
    if (v21)
    {
      *(_DWORD *)buf = 136446210;
      int v27 = "nw_protocol_stack_prepend_application_protocol";
      _os_log_impl(&dword_1830D4000, v12, v20, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
    }
    goto LABEL_41;
  }
  if (v21)
  {
    *(_DWORD *)buf = 136446466;
    int v27 = "nw_protocol_stack_prepend_application_protocol";
    __int16 v28 = 2082;
    long long v29 = v19;
    _os_log_impl(&dword_1830D4000, v12, v20, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v19);
  if (v11) {
    goto LABEL_43;
  }
LABEL_8:
}

void nw_array_prepend(uint64_t a1, void *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  int v4 = a2;
  if (a1 && a2)
  {
    int v2 = a1 + 40;
    LOBYTE(v2) = atomic_load_explicit((atomic_uchar *volatile)(a1 + 40), memory_order_acquire);
    if (v2)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
      int v5 = 136446210;
      int v6 = "nw_array_prepend";
      nw_protocol_stack_t v3 = (void *)_os_log_send_and_compose_impl();
      if (__nwlog_abort((uint64_t)v3)) {
        __break(1u);
      }
      else {
        free(v3);
      }
    }
    else
    {
      std::vector<nw_object_wrapper_t>::emplace<nw_object *&>((unint64_t *)(a1 + 16), *(void *)(a1 + 16), &v4);
    }
  }
}

void std::vector<nw_object_wrapper_t>::emplace<nw_object *&>(unint64_t *a1, uint64_t a2, void **a3)
{
  unint64_t v6 = *a1;
  unint64_t v5 = a1[1];
  uint64_t v7 = a2 - *a1;
  uint64_t v8 = v7 >> 3;
  unint64_t v9 = *a1 + (v7 & 0xFFFFFFFFFFFFFFF8);
  unint64_t v10 = a1[2];
  if (v5 < v10)
  {
    if (*a3) {
      int v11 = os_retain(*a3);
    }
    else {
      int v11 = 0;
    }
    unint64_t v16 = v9 + 8;
    if (v9 == v5)
    {
      *(void *)unint64_t v9 = v11;
      a1[1] = v16;
      return;
    }
    unint64_t v17 = a1[1];
    uint64_t v18 = v17 - v16;
    int v19 = (_OWORD *)(v17 - 8);
    if (v17 - 8 >= v17)
    {
      long long v31 = (void *)a1[1];
    }
    else
    {
      unint64_t v20 = (v7 & 0xFFFFFFFFFFFFFFF8) + v18;
      unint64_t v21 = v20 + v6;
      unint64_t v22 = v20 + v6 + 8;
      if (v17 > v22) {
        unint64_t v22 = a1[1];
      }
      unint64_t v23 = v22 + ~v6 - v20;
      if (v23 > 0xE7
        && (v17 < v21 + (v23 & 0xFFFFFFFFFFFFFFF8) + 8
          ? (BOOL v24 = (unint64_t)v19 >= (v23 & 0xFFFFFFFFFFFFFFF8) + v17 + 8)
          : (BOOL v24 = 1),
            v24))
      {
        uint64_t v25 = (v23 >> 3) + 1;
        uint64_t v26 = 8 * (v25 & 0x3FFFFFFFFFFFFFFCLL);
        int v27 = (void *)((char *)v19 + v26);
        __int16 v28 = (_OWORD *)(v17 + 16);
        uint64_t v29 = v25 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v30 = v19[1];
          *(v28 - 1) = *v19;
          *__int16 v28 = v30;
          *int v19 = 0uLL;
          v19[1] = 0uLL;
          v19 += 2;
          v28 += 2;
          v29 -= 4;
        }
        while (v29);
        long long v31 = (void *)(v17 + v26);
        if (v25 == (v25 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_38;
        }
      }
      else
      {
        int v27 = (void *)(v17 - 8);
        long long v31 = (void *)a1[1];
      }
      do
      {
        *v31++ = *v27;
        *v27++ = 0;
      }
      while ((unint64_t)v27 < v17);
    }
LABEL_38:
    a1[1] = (unint64_t)v31;
    if (v17 != v16)
    {
      nw_txt_record_t v35 = (void **)(v17 - 8);
      uint64_t v36 = 8 * (v18 >> 3);
      uint64_t v37 = v6 + 8 * v8 - 8;
      do
      {
        if (*v35) {
          os_release(*v35);
        }
        *v35-- = *(void **)(v37 + v36);
        *(void *)(v37 + v36) = 0;
        v36 -= 8;
      }
      while (v36);
    }
    if (*(void *)v9) {
      os_release(*(void **)v9);
    }
    *(void *)unint64_t v9 = v11;
    return;
  }
  unint64_t v12 = ((uint64_t)(v5 - v6) >> 3) + 1;
  if (v12 >> 61) {
    abort();
  }
  uint64_t v13 = v10 - v6;
  if (v13 >> 2 > v12) {
    unint64_t v12 = v13 >> 2;
  }
  if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v14 = v12;
  }
  if (v14)
  {
    if (v14 >> 61) {
      goto LABEL_87;
    }
    os_log_type_t v15 = (char *)operator new(8 * v14);
  }
  else
  {
    os_log_type_t v15 = 0;
  }
  Class v32 = &v15[8 * v8];
  id v33 = &v15[8 * v14];
  if (v8 != v14) {
    goto LABEL_52;
  }
  if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFF8) >= 1)
  {
    unint64_t v34 = v8 + 2;
    if (v8 >= -1) {
      unint64_t v34 = v8 + 1;
    }
    v32 -= 8 * (v34 >> 1);
    goto LABEL_52;
  }
  if ((unint64_t)v7 < 8) {
    unint64_t v38 = 1;
  }
  else {
    unint64_t v38 = (v7 >> 2) & 0xFFFFFFFFFFFFFFFELL;
  }
  if (v38 >> 61) {
LABEL_87:
  }
    std::__throw_bad_array_new_length[abi:nn180100]();
  uint64_t v39 = 8 * v38;
  os_log_type_t v40 = (char *)operator new(8 * v38);
  Class v32 = &v40[8 * (v38 >> 2)];
  id v33 = &v40[v39];
  if (v15) {
    operator delete(v15);
  }
LABEL_52:
  BOOL v41 = *a3;
  if (*a3) {
    BOOL v41 = os_retain(v41);
  }
  *(void *)Class v32 = v41;
  id v42 = v32 + 8;
  __int16 v43 = (void *)*a1;
  id v44 = v32;
  if (*a1 != v9)
  {
    unint64_t v45 = (v7 & 0xFFFFFFFFFFFFFFF8) + v6 - (void)v43 - 8;
    char v46 = (void *)v9;
    id v44 = v32;
    if (v45 < 0x88) {
      goto LABEL_90;
    }
    if ((unint64_t)&v32[-(v45 & 0xFFFFFFFFFFFFFFF8) - 8] < v9)
    {
      char v46 = (void *)v9;
      id v44 = v32;
      if ((v7 & 0xFFFFFFFFFFFFFFF8) - (v45 & 0xFFFFFFFFFFFFFFF8) + v6 - 8 < (unint64_t)v32) {
        goto LABEL_90;
      }
    }
    uint64_t v47 = (v45 >> 3) + 1;
    char v46 = (void *)(v9 - 8 * (v47 & 0x3FFFFFFFFFFFFFFCLL));
    __int16 v48 = v32 - 16;
    int v49 = (_OWORD *)(v6 + 8 * v8 - 32);
    uint64_t v50 = v47 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v51 = v49[1];
      *((_OWORD *)v48 - 1) = *v49;
      *(_OWORD *)__int16 v48 = v51;
      _OWORD *v49 = 0uLL;
      v49[1] = 0uLL;
      v49 -= 2;
      v48 -= 32;
      v50 -= 4;
    }
    while (v50);
    id v44 = &v32[-8 * (v47 & 0x3FFFFFFFFFFFFFFCLL)];
    if (v47 != (v47 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_90:
      do
      {
        uint64_t v52 = *--v46;
        *((void *)v44 - 1) = v52;
        v44 -= 8;
        *char v46 = 0;
      }
      while (v46 != v43);
    }
  }
  id v53 = (void *)a1[1];
  if (v53 == (void *)v9) {
    goto LABEL_75;
  }
  unint64_t v54 = (v7 & 0xFFFFFFFFFFFFFFF8) + v6;
  unint64_t v55 = (unint64_t)v53 - v54 - 8;
  if (v55 >= 0x88)
  {
    if ((unint64_t)v42 >= v54 + (v55 & 0xFFFFFFFFFFFFFFF8) + 8
      || v9 >= (unint64_t)v42 + (v55 & 0xFFFFFFFFFFFFFFF8) + 8)
    {
      uint64_t v58 = (v55 >> 3) + 1;
      uint64_t v59 = 8 * (v58 & 0x3FFFFFFFFFFFFFFCLL);
      __int16 v56 = (void *)(v9 + v59);
      id v60 = v32 + 24;
      uint64_t v61 = v58 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v62 = *(_OWORD *)(v9 + 16);
        *(v60 - 1) = *(_OWORD *)v9;
        _OWORD *v60 = v62;
        *(_OWORD *)unint64_t v9 = 0uLL;
        *(_OWORD *)(v9 + 16) = 0uLL;
        v9 += 32;
        v60 += 2;
        v61 -= 4;
      }
      while (v61);
      id v42 = (void *)((char *)v42 + v59);
      if (v58 == (v58 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_74;
      }
    }
    else
    {
      __int16 v56 = (void *)v9;
    }
  }
  else
  {
    __int16 v56 = (void *)v9;
  }
  do
  {
    *v42++ = *v56;
    *v56++ = 0;
  }
  while (v56 != v53);
LABEL_74:
  unint64_t v9 = a1[1];
LABEL_75:
  unint64_t v63 = *a1;
  *a1 = (unint64_t)v44;
  a1[1] = (unint64_t)v42;
  a1[2] = (unint64_t)v33;
  if (v9 != v63)
  {
    unint64_t v64 = v9;
    do
    {
      BOOL v66 = *(void **)(v64 - 8);
      v64 -= 8;
      uint64_t v65 = v66;
      if (v66) {
        os_release(v65);
      }
      *(void *)(v9 - 8) = 0;
      unint64_t v9 = v64;
    }
    while (v64 != v63);
    unint64_t v9 = v63;
  }
  if (v9)
  {
    operator delete((void *)v9);
  }
}

void sub_18329D3A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_resolver_config_get_class(void *a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  int v2 = v1;
  if (v1)
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    int v20 = 0;
    *(void *)&buf[16] = 0x2020000000;
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 3221225472;
    v14[2] = __nw_resolver_config_get_class_block_invoke;
    v14[3] = &unk_1E524B978;
    unint64_t v16 = buf;
    os_log_type_t v15 = (os_unfair_lock_s *)v1;
    nw_protocol_stack_t v3 = v15 + 22;
    os_unfair_lock_lock(v15 + 22);
    __nw_resolver_config_get_class_block_invoke((uint64_t)v14);
    os_unfair_lock_unlock(v3);
    uint64_t v4 = *(unsigned int *)(*(void *)&buf[8] + 24);

    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  unint64_t v6 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_resolver_config_get_class";
  uint64_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v17 = 0;
  if (__nwlog_fault(v7, &type, &v17))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_resolver_config_get_class";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v8 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_resolver_config_get_class";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_resolver_config_get_class";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_resolver_config_get_class";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v7) {
    free(v7);
  }
  uint64_t v4 = 0;
LABEL_3:

  return v4;
}

void sub_18329D6EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __nw_resolver_config_get_class_block_invoke(uint64_t a1)
{
  id v2 = *(id *)(*(void *)(a1 + 32) + 8);
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = xpc_dictionary_get_int64(v2, "Class");
}

void sub_18329D77C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18329D7E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)NWConcrete_nw_path_flow_registration;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void nw_path_flow_registration_close(void *a1)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  id v2 = v1;
  if (!v1)
  {
    long long v31 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v48 = "nw_path_flow_registration_close";
    Class v32 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v45 = 0;
    if (!__nwlog_fault(v32, &type, &v45)) {
      goto LABEL_88;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v33 = __nwlog_obj();
      os_log_type_t v34 = type;
      if (os_log_type_enabled(v33, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v48 = "nw_path_flow_registration_close";
        _os_log_impl(&dword_1830D4000, v33, v34, "%{public}s called with null registration", buf, 0xCu);
      }
    }
    else if (v45)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v33 = __nwlog_obj();
      os_log_type_t v38 = type;
      BOOL v39 = os_log_type_enabled(v33, type);
      if (backtrace_string)
      {
        if (v39)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v48 = "nw_path_flow_registration_close";
          __int16 v49 = 2082;
          *(void *)uint64_t v50 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v33, v38, "%{public}s called with null registration, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_88:
        if (!v32) {
          goto LABEL_46;
        }
LABEL_89:
        free(v32);
        goto LABEL_46;
      }
      if (v39)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v48 = "nw_path_flow_registration_close";
        _os_log_impl(&dword_1830D4000, v33, v38, "%{public}s called with null registration, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v33 = __nwlog_obj();
      os_log_type_t v43 = type;
      if (os_log_type_enabled(v33, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v48 = "nw_path_flow_registration_close";
        _os_log_impl(&dword_1830D4000, v33, v43, "%{public}s called with null registration, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_87:

    goto LABEL_88;
  }
  if ((v1[148] & 1) == 0) {
    goto LABEL_46;
  }
  uint64_t v3 = *((void *)v1 + 1);
  if (v3)
  {
    id v4 = nw_parameters_copy_context(*(void **)(v3 + 8));
    int v5 = nw_path_shared_necp_fd(v4);

    if (v5 < 0 || uuid_is_null(v2 + 32)) {
      goto LABEL_6;
    }
    *((void *)v2 + 8) = 0;
    if (necp_client_action())
    {
      int v12 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v13 = (id)gLogObj;
      *(_DWORD *)buf = 136446466;
      __int16 v48 = "nw_path_flow_registration_close";
      __int16 v49 = 1024;
      *(_DWORD *)uint64_t v50 = v12;
      unint64_t v14 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v45 = 0;
      if (!__nwlog_fault(v14, &type, &v45)) {
        goto LABEL_53;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v15 = (id)gLogObj;
        os_log_type_t v16 = type;
        if (os_log_type_enabled(v15, type))
        {
          *(_DWORD *)buf = 136446466;
          __int16 v48 = "nw_path_flow_registration_close";
          __int16 v49 = 1024;
          *(_DWORD *)uint64_t v50 = v12;
          _os_log_impl(&dword_1830D4000, v15, v16, "%{public}s NECP_CLIENT_ACTION_REMOVE_FLOW error %{darwin.errno}d", buf, 0x12u);
        }
LABEL_52:

LABEL_53:
        if (!v14) {
          goto LABEL_6;
        }
        goto LABEL_54;
      }
      if (!v45)
      {
        os_log_type_t v15 = __nwlog_obj();
        os_log_type_t v30 = type;
        if (os_log_type_enabled(v15, type))
        {
          *(_DWORD *)buf = 136446466;
          __int16 v48 = "nw_path_flow_registration_close";
          __int16 v49 = 1024;
          *(_DWORD *)uint64_t v50 = v12;
          _os_log_impl(&dword_1830D4000, v15, v30, "%{public}s NECP_CLIENT_ACTION_REMOVE_FLOW error %{darwin.errno}d, backtrace limit exceeded", buf, 0x12u);
        }
        goto LABEL_52;
      }
      unint64_t v22 = (char *)__nw_create_backtrace_string();
      os_log_type_t v15 = __nwlog_obj();
      os_log_type_t v23 = type;
      BOOL v24 = os_log_type_enabled(v15, type);
      if (!v22)
      {
        if (v24)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v48 = "nw_path_flow_registration_close";
          __int16 v49 = 1024;
          *(_DWORD *)uint64_t v50 = v12;
          _os_log_impl(&dword_1830D4000, v15, v23, "%{public}s NECP_CLIENT_ACTION_REMOVE_FLOW error %{darwin.errno}d, no backtrace", buf, 0x12u);
        }
        goto LABEL_52;
      }
      if (v24)
      {
        *(_DWORD *)buf = 136446722;
        __int16 v48 = "nw_path_flow_registration_close";
        __int16 v49 = 1024;
        *(_DWORD *)uint64_t v50 = v12;
        *(_WORD *)&v50[4] = 2082;
        *(void *)&v50[6] = v22;
        _os_log_impl(&dword_1830D4000, v15, v23, "%{public}s NECP_CLIENT_ACTION_REMOVE_FLOW error %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x1Cu);
      }

      free(v22);
      if (v14) {
LABEL_54:
      }
        free(v14);
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v20 = (id)gLogObj;
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v21 = *((void *)v2 + 1) + 80;
        *(_DWORD *)buf = 136447234;
        __int16 v48 = "nw_path_flow_registration_close";
        __int16 v49 = 1042;
        *(_DWORD *)uint64_t v50 = 16;
        *(_WORD *)&v50[4] = 2098;
        *(void *)&v50[6] = v2 + 32;
        __int16 v51 = 1042;
        int v52 = 16;
        __int16 v53 = 2098;
        uint64_t v54 = v21;
        _os_log_impl(&dword_1830D4000, v20, OS_LOG_TYPE_DEBUG, "%{public}s Removed flow %{public,uuid_t}.16P from %{public,uuid_t}.16P", buf, 0x2Cu);
      }
    }
LABEL_6:
    v2[148] &= ~1u;
    os_unfair_lock_lock((os_unfair_lock_t)(*((void *)v2 + 1) + 96));
    uint64_t v6 = *((void *)v2 + 1);
    int v7 = *(_DWORD *)(v6 + 100);
    if (v7)
    {
      *(_DWORD *)(v6 + 100) = v7 - 1;
      goto LABEL_42;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v8 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    __int16 v48 = "nw_path_flow_registration_close";
    os_log_type_t v9 = (void *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v45 = 0;
    if (__nwlog_fault((const char *)v9, &type, &v45))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        unint64_t v10 = (id)gLogObj;
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v48 = "nw_path_flow_registration_close";
          _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s Path evaluator flow count unexpectedly 0 when closing flow", buf, 0xCu);
        }
      }
      else if (v45)
      {
        char v17 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        unint64_t v10 = (id)gLogObj;
        os_log_type_t v18 = type;
        BOOL v19 = os_log_type_enabled(v10, type);
        if (v17)
        {
          if (v19)
          {
            *(_DWORD *)buf = 136446466;
            __int16 v48 = "nw_path_flow_registration_close";
            __int16 v49 = 2082;
            *(void *)uint64_t v50 = v17;
            _os_log_impl(&dword_1830D4000, v10, v18, "%{public}s Path evaluator flow count unexpectedly 0 when closing flow, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v17);
          if (!v9) {
            goto LABEL_42;
          }
LABEL_41:
          free(v9);
LABEL_42:
          os_unfair_lock_unlock((os_unfair_lock_t)(*((void *)v2 + 1) + 96));
          id v26 = nw_parameters_copy_context(*(void **)(*((void *)v2 + 1) + 8));
          uint64_t globals_for_path = nw_context_get_globals_for_path(v26);

          os_unfair_lock_lock((os_unfair_lock_t)(globals_for_path + 124));
          uint64_t v28 = *(void *)(globals_for_path + 40);
          if (v28)
          {
            BOOL node = nw_hash_table_get_node(v28, (uint64_t)(v2 + 32), 16);
            if (node) {
              nw_hash_table_remove_node(*(void *)(globals_for_path + 40), node);
            }
          }
          os_unfair_lock_unlock((os_unfair_lock_t)(globals_for_path + 124));
          goto LABEL_46;
        }
        if (v19)
        {
          *(_DWORD *)buf = 136446210;
          __int16 v48 = "nw_path_flow_registration_close";
          _os_log_impl(&dword_1830D4000, v10, v18, "%{public}s Path evaluator flow count unexpectedly 0 when closing flow, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        unint64_t v10 = (id)gLogObj;
        os_log_type_t v25 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v48 = "nw_path_flow_registration_close";
          _os_log_impl(&dword_1830D4000, v10, v25, "%{public}s Path evaluator flow count unexpectedly 0 when closing flow, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
    if (!v9) {
      goto LABEL_42;
    }
    goto LABEL_41;
  }
  nw_txt_record_t v35 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v48 = "nw_path_flow_registration_close";
  Class v32 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v45 = 0;
  if (!__nwlog_fault(v32, &type, &v45)) {
    goto LABEL_88;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    id v33 = __nwlog_obj();
    os_log_type_t v36 = type;
    if (os_log_type_enabled(v33, type))
    {
      *(_DWORD *)buf = 136446210;
      __int16 v48 = "nw_path_flow_registration_close";
      _os_log_impl(&dword_1830D4000, v33, v36, "%{public}s called with null registration->parent_evaluator", buf, 0xCu);
    }
    goto LABEL_87;
  }
  if (!v45)
  {
    id v33 = __nwlog_obj();
    os_log_type_t v44 = type;
    if (os_log_type_enabled(v33, type))
    {
      *(_DWORD *)buf = 136446210;
      __int16 v48 = "nw_path_flow_registration_close";
      _os_log_impl(&dword_1830D4000, v33, v44, "%{public}s called with null registration->parent_evaluator, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_87;
  }
  os_log_type_t v40 = (char *)__nw_create_backtrace_string();
  id v33 = __nwlog_obj();
  os_log_type_t v41 = type;
  BOOL v42 = os_log_type_enabled(v33, type);
  if (!v40)
  {
    if (v42)
    {
      *(_DWORD *)buf = 136446210;
      __int16 v48 = "nw_path_flow_registration_close";
      _os_log_impl(&dword_1830D4000, v33, v41, "%{public}s called with null registration->parent_evaluator, no backtrace", buf, 0xCu);
    }
    goto LABEL_87;
  }
  if (v42)
  {
    *(_DWORD *)buf = 136446466;
    __int16 v48 = "nw_path_flow_registration_close";
    __int16 v49 = 2082;
    *(void *)uint64_t v50 = v40;
    _os_log_impl(&dword_1830D4000, v33, v41, "%{public}s called with null registration->parent_evaluator, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v40);
  if (v32) {
    goto LABEL_89;
  }
LABEL_46:
}

void sub_18329E364(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_flow_passthrough_add_input_handler(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (a2)
    {
      nw_protocol_set_input_handler((uint64_t)a1, (uint64_t)a2);
      if (!nw_protocols_are_equal(a2->identifier->name, &g_replay_protocol_identifier) && !a2->output_handler) {
        nw_protocol_set_output_handler((uint64_t)a2, (uint64_t)a1);
      }
      output_handler = a1->output_handler;
      if (output_handler)
      {
        callbacks = output_handler->callbacks;
        if (callbacks)
        {
          notify = (void (*)(void))callbacks->notify;
          if (notify) {
            notify();
          }
        }
      }
      return 1;
    }
    id v13 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v21 = "nw_flow_passthrough_add_input_handler";
    os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v18 = 0;
    if (__nwlog_fault(v9, &type, &v18))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        unint64_t v10 = __nwlog_obj();
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v21 = "nw_flow_passthrough_add_input_handler";
          int v12 = "%{public}s called with null input_protocol";
          goto LABEL_38;
        }
        goto LABEL_39;
      }
      if (!v18)
      {
        unint64_t v10 = __nwlog_obj();
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v21 = "nw_flow_passthrough_add_input_handler";
          int v12 = "%{public}s called with null input_protocol, backtrace limit exceeded";
          goto LABEL_38;
        }
        goto LABEL_39;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      unint64_t v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v17 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v21 = "nw_flow_passthrough_add_input_handler";
          int v12 = "%{public}s called with null input_protocol, no backtrace";
          goto LABEL_38;
        }
        goto LABEL_39;
      }
      if (!v17) {
        goto LABEL_29;
      }
      *(_DWORD *)buf = 136446466;
      uint64_t v21 = "nw_flow_passthrough_add_input_handler";
      __int16 v22 = 2082;
      os_log_type_t v23 = backtrace_string;
      os_log_type_t v16 = "%{public}s called with null input_protocol, dumping backtrace:%{public}s";
LABEL_28:
      _os_log_impl(&dword_1830D4000, v10, v11, v16, buf, 0x16u);
LABEL_29:

      free(backtrace_string);
    }
  }
  else
  {
    id v8 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v21 = "nw_flow_passthrough_add_input_handler";
    os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v18 = 0;
    if (__nwlog_fault(v9, &type, &v18))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        unint64_t v10 = __nwlog_obj();
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v21 = "nw_flow_passthrough_add_input_handler";
          int v12 = "%{public}s called with null protocol";
LABEL_38:
          _os_log_impl(&dword_1830D4000, v10, v11, v12, buf, 0xCu);
        }
LABEL_39:

        goto LABEL_40;
      }
      if (!v18)
      {
        unint64_t v10 = __nwlog_obj();
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v21 = "nw_flow_passthrough_add_input_handler";
          int v12 = "%{public}s called with null protocol, backtrace limit exceeded";
          goto LABEL_38;
        }
        goto LABEL_39;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      unint64_t v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v15 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v21 = "nw_flow_passthrough_add_input_handler";
          int v12 = "%{public}s called with null protocol, no backtrace";
          goto LABEL_38;
        }
        goto LABEL_39;
      }
      if (!v15) {
        goto LABEL_29;
      }
      *(_DWORD *)buf = 136446466;
      uint64_t v21 = "nw_flow_passthrough_add_input_handler";
      __int16 v22 = 2082;
      os_log_type_t v23 = backtrace_string;
      os_log_type_t v16 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
      goto LABEL_28;
    }
  }
LABEL_40:
  if (v9) {
    free(v9);
  }
  return 0;
}

void nw_protocol_set_output_handler(uint64_t a1, uint64_t a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4 != a2)
    {
      if (v4)
      {
        if (*(_UNKNOWN **)(v4 + 40) == &nw_protocol_ref_counted_handle)
        {
          uint64_t v6 = *(void *)(v4 + 88);
          if (v6)
          {
            uint64_t v7 = v6 - 1;
            *(void *)(v4 + 88) = v7;
            if (!v7)
            {
              id v8 = *(void (***)(void))(v4 + 64);
              if (v8)
              {
                *(void *)(v4 + 64) = 0;
                v8[2](v8);
                _Block_release(v8);
              }
              if (*(unsigned char *)(v4 + 72))
              {
                os_log_type_t v9 = *(const void **)(v4 + 64);
                if (v9) {
                  _Block_release(v9);
                }
              }
              free((void *)v4);
            }
          }
        }
      }
      *(void *)(a1 + 32) = a2;
      if (a2 && *(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
      {
        uint64_t v5 = *(void *)(a2 + 88);
        if (v5) {
          *(void *)(a2 + 88) = v5 + 1;
        }
      }
    }
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v19 = "__nw_protocol_set_output_handler";
  unint64_t v10 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (__nwlog_fault(v10, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (!os_log_type_enabled(v11, type)) {
        goto LABEL_32;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v19 = "__nw_protocol_set_output_handler";
      id v13 = "%{public}s called with null protocol";
      goto LABEL_31;
    }
    if (!v16)
    {
      os_log_type_t v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (!os_log_type_enabled(v11, type)) {
        goto LABEL_32;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v19 = "__nw_protocol_set_output_handler";
      id v13 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_31;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v11 = __nwlog_obj();
    os_log_type_t v12 = type;
    BOOL v15 = os_log_type_enabled(v11, type);
    if (backtrace_string)
    {
      if (v15)
      {
        *(_DWORD *)buf = 136446466;
        BOOL v19 = "__nw_protocol_set_output_handler";
        __int16 v20 = 2082;
        uint64_t v21 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_32;
    }
    if (v15)
    {
      *(_DWORD *)buf = 136446210;
      BOOL v19 = "__nw_protocol_set_output_handler";
      id v13 = "%{public}s called with null protocol, no backtrace";
LABEL_31:
      _os_log_impl(&dword_1830D4000, v11, v12, v13, buf, 0xCu);
    }
  }
LABEL_32:
  if (v10) {
    free(v10);
  }
}

void nw_protocol_set_input_handler(uint64_t a1, uint64_t a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v4 = *(void *)(a1 + 48);
    if (v4 != a2)
    {
      if (v4)
      {
        if (*(_UNKNOWN **)(v4 + 40) == &nw_protocol_ref_counted_handle)
        {
          uint64_t v6 = *(void *)(v4 + 88);
          if (v6)
          {
            uint64_t v7 = v6 - 1;
            *(void *)(v4 + 88) = v7;
            if (!v7)
            {
              id v8 = *(void (***)(void))(v4 + 64);
              if (v8)
              {
                *(void *)(v4 + 64) = 0;
                v8[2](v8);
                _Block_release(v8);
              }
              if (*(unsigned char *)(v4 + 72))
              {
                os_log_type_t v9 = *(const void **)(v4 + 64);
                if (v9) {
                  _Block_release(v9);
                }
              }
              free((void *)v4);
            }
          }
        }
      }
      *(void *)(a1 + 48) = a2;
      if (a2 && *(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
      {
        uint64_t v5 = *(void *)(a2 + 88);
        if (v5) {
          *(void *)(a2 + 88) = v5 + 1;
        }
      }
    }
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v19 = "__nw_protocol_set_input_handler";
  unint64_t v10 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (__nwlog_fault(v10, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (!os_log_type_enabled(v11, type)) {
        goto LABEL_32;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v19 = "__nw_protocol_set_input_handler";
      id v13 = "%{public}s called with null protocol";
      goto LABEL_31;
    }
    if (!v16)
    {
      os_log_type_t v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (!os_log_type_enabled(v11, type)) {
        goto LABEL_32;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v19 = "__nw_protocol_set_input_handler";
      id v13 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_31;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v11 = __nwlog_obj();
    os_log_type_t v12 = type;
    BOOL v15 = os_log_type_enabled(v11, type);
    if (backtrace_string)
    {
      if (v15)
      {
        *(_DWORD *)buf = 136446466;
        BOOL v19 = "__nw_protocol_set_input_handler";
        __int16 v20 = 2082;
        uint64_t v21 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_32;
    }
    if (v15)
    {
      *(_DWORD *)buf = 136446210;
      BOOL v19 = "__nw_protocol_set_input_handler";
      id v13 = "%{public}s called with null protocol, no backtrace";
LABEL_31:
      _os_log_impl(&dword_1830D4000, v11, v12, v13, buf, 0xCu);
    }
  }
LABEL_32:
  if (v10) {
    free(v10);
  }
}

void nw_flow_passthrough_notify(uint64_t a1, nw_protocol *a2, unsigned int a3, unsigned __int8 *a4, uint64_t a5)
{
  uint64_t v9 = a1;
  uint64_t v168 = *MEMORY[0x1E4F143B8];
  id v10 = *(id *)(*(void *)(a1 + 40) + 160);
  os_log_type_t v11 = v10;
  if (v10)
  {
    os_log_type_t v12 = (NWConcrete_nw_endpoint_handler *)v10;
    uint64_t mode = v12->mode;

    if (mode != 2)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      unint64_t v14 = (NWConcrete_nw_endpoint_mode_handler *)(id)gLogObj;
      if (os_log_type_enabled((os_log_t)v14, OS_LOG_TYPE_DEFAULT))
      {
        if (mode > 5) {
          BOOL v17 = "unknown-mode";
        }
        else {
          BOOL v17 = off_1E523FB08[mode];
        }
        *(_DWORD *)buf = 136446722;
        __int16 v153 = "nw_flow_passthrough_notify";
        __int16 v154 = 2082;
        uint64_t v155 = (void *)v17;
        __int16 v156 = 2082;
        v157 = "flow";
        _os_log_impl(&dword_1830D4000, (os_log_t)v14, OS_LOG_TYPE_DEFAULT, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
      }
      goto LABEL_74;
    }
    unint64_t v14 = nw_endpoint_handler_copy_flow(v12);
    BOOL v15 = v12;
    int state = v15->state;

    unsigned int v146 = v15;
    if (state == 5)
    {
      switch(a3)
      {
        case 7u:
        case 0x15u:
          goto LABEL_74;
        case 0xDu:
        case 0xFu:
        case 0x10u:
          goto LABEL_35;
        case 0x13u:
          goto LABEL_52;
        case 0x16u:
          goto LABEL_37;
        case 0x17u:
          goto LABEL_46;
        case 0x19u:
          goto LABEL_51;
        default:
          goto LABEL_70;
      }
      goto LABEL_74;
    }
    if (nw_endpoint_handler_get_minimize_logging(v15))
    {
      if (nw_endpoint_handler_get_logging_disabled(v15)) {
        goto LABEL_34;
      }
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      os_log_t log = (id)gconnectionLogObj;
      if (os_log_type_enabled(log, OS_LOG_TYPE_DEBUG))
      {
        id_string = nw_endpoint_handler_get_id_string(v15);
        os_log_type_t v128 = nw_endpoint_handler_dry_run_string(v15);
        nw_endpoint_t v141 = nw_endpoint_handler_copy_endpoint(v15);
        logging_description = nw_endpoint_get_logging_description(v141);
        os_log_type_t v124 = nw_endpoint_handler_state_string(v15);
        BOOL v110 = nw_endpoint_handler_mode_string(v15);
        id v111 = nw_endpoint_handler_copy_current_path(v15);
        os_log_type_t v112 = v111;
        if (a3 > 0x1A) {
          BOOL v113 = "unknown";
        }
        else {
          BOOL v113 = off_1E5241E58[a3];
        }
        *(_DWORD *)buf = 136448002;
        __int16 v153 = "nw_flow_passthrough_notify";
        __int16 v154 = 2082;
        uint64_t v155 = (void *)id_string;
        __int16 v156 = 2082;
        v157 = v128;
        __int16 v158 = 2082;
        BOOL v159 = logging_description;
        __int16 v160 = 2082;
        v161 = v124;
        __int16 v162 = 2082;
        nw_endpoint_t v163 = v110;
        __int16 v164 = 2114;
        id v165 = v111;
        __int16 v166 = 2082;
        id v167 = v113;
        _os_log_impl(&dword_1830D4000, log, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] received notification %{public}s", buf, 0x52u);
      }
    }
    else
    {
      char v18 = v15;
      char v19 = *((unsigned char *)v18 + 268);

      if ((v19 & 0x20) != 0)
      {
LABEL_34:
        switch(a3)
        {
          case 7u:
          case 0x15u:
            goto LABEL_74;
          case 0xCu:
            int v75 = *((char *)v14 + 34);
            if ((v75 & 0x80000000) == 0)
            {
              *((unsigned char *)v14 + 34) = v75 | 0x80;
              v146->event = (nw_endpoint_handler_event_s)524291;
              nw_endpoint_handler_report(v146, 0, &v146->event.domain, 0);
            }
            goto LABEL_70;
          case 0xDu:
          case 0xFu:
          case 0x10u:
LABEL_35:
            uint64_t v38 = *(void *)(v9 + 32);
            if (!v38) {
              goto LABEL_74;
            }
            goto LABEL_71;
          case 0x13u:
LABEL_52:
            nw_endpoint_flow_rebuild_stack(v146, a2);
            goto LABEL_74;
          case 0x16u:
LABEL_37:
            if (*((_DWORD *)v14 + 251) <= 0x13u)
            {
              int minimize_logging = nw_endpoint_handler_get_minimize_logging(v146);
              char logging_disabled = nw_endpoint_handler_get_logging_disabled(v146);
              if (minimize_logging)
              {
                if (logging_disabled) {
                  goto LABEL_45;
                }
                uint64_t v114 = v9;
                __int16 v137 = v14;
                if (__nwlog_connection_log::onceToken != -1) {
                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
                }
                os_log_type_t v41 = (id)gconnectionLogObj;
                if (os_log_type_enabled(v41, OS_LOG_TYPE_DEBUG))
                {
                  logc = nw_endpoint_handler_get_id_string(v146);
                  os_log_type_t v115 = nw_endpoint_handler_dry_run_string(v146);
                  nw_endpoint_t v116 = nw_endpoint_handler_copy_endpoint(v146);
                  os_log_type_t v117 = nw_endpoint_get_logging_description(v116);
                  os_log_type_t v118 = nw_endpoint_handler_state_string(v146);
                  BOOL v119 = nw_endpoint_handler_mode_string(v146);
                  id v120 = nw_endpoint_handler_copy_current_path(v146);
                  int v121 = *((_DWORD *)v137 + 251);
                  *(_DWORD *)buf = 136448002;
                  __int16 v153 = "nw_flow_passthrough_notify";
                  __int16 v154 = 2082;
                  uint64_t v155 = (void *)logc;
                  __int16 v156 = 2082;
                  v157 = v115;
                  __int16 v158 = 2082;
                  BOOL v159 = v117;
                  __int16 v160 = 2082;
                  v161 = v118;
                  __int16 v162 = 2082;
                  nw_endpoint_t v163 = v119;
                  unint64_t v14 = v137;
                  __int16 v164 = 2114;
                  id v165 = v120;
                  __int16 v166 = 1024;
                  LODWORD(v167) = v121;
                  _os_log_impl(&dword_1830D4000, v41, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] received restart with count %u, rebuilding stack", buf, 0x4Eu);

                  uint64_t v9 = v114;
                }
              }
              else
              {
                if (logging_disabled)
                {
LABEL_45:
                  ++*((_DWORD *)v14 + 251);
                  nw_endpoint_flow_rebuild_stack(v146, (nw_protocol *)v9);
                  v146->event = (nw_endpoint_handler_event_s)262147;
                  nw_endpoint_handler_report(v146, 0, &v146->event.domain, 0);
                  goto LABEL_74;
                }
                if (__nwlog_connection_log::onceToken != -1) {
                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
                }
                os_log_type_t v41 = (id)gconnectionLogObj;
                if (os_log_type_enabled(v41, OS_LOG_TYPE_INFO))
                {
                  os_log_t loga = v41;
                  BOOL v42 = nw_endpoint_handler_get_id_string(v146);
                  os_log_type_t v43 = nw_endpoint_handler_dry_run_string(v146);
                  nw_endpoint_t v44 = nw_endpoint_handler_copy_endpoint(v146);
                  uint64_t v139 = v9;
                  char v45 = v14;
                  char v46 = nw_endpoint_get_logging_description(v44);
                  uint64_t v47 = nw_endpoint_handler_state_string(v146);
                  __int16 v48 = nw_endpoint_handler_mode_string(v146);
                  id v49 = nw_endpoint_handler_copy_current_path(v146);
                  int v50 = *((_DWORD *)v45 + 251);
                  *(_DWORD *)buf = 136448002;
                  __int16 v153 = "nw_flow_passthrough_notify";
                  __int16 v154 = 2082;
                  uint64_t v155 = (void *)v42;
                  __int16 v156 = 2082;
                  v157 = v43;
                  __int16 v158 = 2082;
                  BOOL v159 = v46;
                  __int16 v160 = 2082;
                  v161 = v47;
                  __int16 v162 = 2082;
                  nw_endpoint_t v163 = v48;
                  unint64_t v14 = v45;
                  __int16 v164 = 2114;
                  id v165 = v49;
                  __int16 v166 = 1024;
                  LODWORD(v167) = v50;
                  os_log_type_t v41 = loga;
                  _os_log_impl(&dword_1830D4000, loga, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] received restart with count %u, rebuilding stack", buf, 0x4Eu);

                  uint64_t v9 = v139;
                }
              }

              goto LABEL_45;
            }
            if (nw_endpoint_handler_get_logging_disabled(v146)) {
              goto LABEL_108;
            }
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
            }
            id v57 = (id)gconnectionLogObj;
            uint64_t v58 = nw_endpoint_handler_get_id_string(v146);
            uint64_t v59 = nw_endpoint_handler_dry_run_string(v146);
            os_log_type_t v136 = v14;
            nw_endpoint_t v60 = nw_endpoint_handler_copy_endpoint(v146);
            uint64_t v140 = v9;
            uint64_t v61 = nw_endpoint_get_logging_description(v60);
            long long v62 = nw_endpoint_handler_state_string(v146);
            unint64_t v63 = nw_endpoint_handler_mode_string(v146);
            id v64 = nw_endpoint_handler_copy_current_path(v146);
            *(_DWORD *)buf = 136447746;
            __int16 v153 = "nw_flow_passthrough_notify";
            __int16 v154 = 2082;
            uint64_t v155 = (void *)v58;
            __int16 v156 = 2082;
            v157 = v59;
            __int16 v158 = 2082;
            BOOL v159 = v61;
            __int16 v160 = 2082;
            v161 = v62;
            __int16 v162 = 2082;
            nw_endpoint_t v163 = v63;
            __int16 v164 = 2114;
            id v165 = v64;
            uint64_t v65 = (char *)_os_log_send_and_compose_impl();

            unint64_t v14 = v136;
            uint64_t v9 = v140;

            os_log_type_t type = OS_LOG_TYPE_ERROR;
            char v150 = 0;
            if ((__nwlog_fault(v65, &type, &v150) & 1) == 0) {
              goto LABEL_106;
            }
            if (type == OS_LOG_TYPE_FAULT)
            {
              if (__nwlog_connection_log::onceToken != -1) {
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
              }
              BOOL v66 = (id)gconnectionLogObj;
              os_log_type_t v67 = type;
              if (os_log_type_enabled(v66, type))
              {
                os_log_type_t v130 = v65;
                os_log_type_t v68 = nw_endpoint_handler_get_id_string(v146);
                uint64_t v69 = nw_endpoint_handler_dry_run_string(v146);
                nw_endpoint_t v70 = nw_endpoint_handler_copy_endpoint(v146);
                BOOL v71 = nw_endpoint_get_logging_description(v70);
                os_log_type_t v72 = nw_endpoint_handler_state_string(v146);
                os_log_type_t v73 = nw_endpoint_handler_mode_string(v146);
                id v74 = nw_endpoint_handler_copy_current_path(v146);
                *(_DWORD *)buf = 136447746;
                __int16 v153 = "nw_flow_passthrough_notify";
                __int16 v154 = 2082;
                uint64_t v155 = (void *)v68;
                __int16 v156 = 2082;
                v157 = v69;
                __int16 v158 = 2082;
                BOOL v159 = v71;
                __int16 v160 = 2082;
                v161 = v72;
                __int16 v162 = 2082;
                nw_endpoint_t v163 = v73;
                __int16 v164 = 2114;
                id v165 = v74;
                _os_log_impl(&dword_1830D4000, v66, v67, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] received restart without connecting too many times, failing flow", buf, 0x48u);

                unint64_t v14 = v136;
                uint64_t v9 = v140;
                uint64_t v65 = v130;
              }
            }
            else if (v150)
            {
              backtrace_string = __nw_create_backtrace_string();
              if (backtrace_string)
              {
                int v84 = (char *)backtrace_string;
                if (__nwlog_connection_log::onceToken != -1) {
                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
                }
                char v85 = (id)gconnectionLogObj;
                os_log_type_t v86 = type;
                if (os_log_type_enabled(v85, type))
                {
                  BOOL v131 = v65;
                  os_log_type_t v87 = nw_endpoint_handler_get_id_string(v146);
                  logb = nw_endpoint_handler_dry_run_string(v146);
                  nw_endpoint_t v88 = nw_endpoint_handler_copy_endpoint(v146);
                  os_log_type_t v89 = nw_endpoint_get_logging_description(v88);
                  __int16 v90 = nw_endpoint_handler_state_string(v146);
                  os_log_type_t v91 = nw_endpoint_handler_mode_string(v146);
                  id v92 = nw_endpoint_handler_copy_current_path(v146);
                  *(_DWORD *)buf = 136448002;
                  __int16 v153 = "nw_flow_passthrough_notify";
                  __int16 v154 = 2082;
                  uint64_t v155 = (void *)v87;
                  __int16 v156 = 2082;
                  v157 = logb;
                  __int16 v158 = 2082;
                  BOOL v159 = v89;
                  __int16 v160 = 2082;
                  v161 = v90;
                  __int16 v162 = 2082;
                  nw_endpoint_t v163 = v91;
                  __int16 v164 = 2114;
                  id v165 = v92;
                  __int16 v166 = 2082;
                  id v167 = v84;
                  _os_log_impl(&dword_1830D4000, v85, v86, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] received restart without connecting too many times, failing flow, dumping backtrace:%{public}s", buf, 0x52u);

                  unint64_t v14 = v136;
                  uint64_t v9 = v140;
                  uint64_t v65 = v131;
                }
                free(v84);
                goto LABEL_106;
              }
              if (__nwlog_connection_log::onceToken != -1) {
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
              }
              BOOL v66 = (id)gconnectionLogObj;
              os_log_type_t v102 = type;
              if (os_log_type_enabled(v66, type))
              {
                os_log_type_t v133 = v65;
                os_log_type_t v103 = nw_endpoint_handler_get_id_string(v146);
                BOOL v104 = nw_endpoint_handler_dry_run_string(v146);
                nw_endpoint_t v105 = nw_endpoint_handler_copy_endpoint(v146);
                os_log_type_t v106 = nw_endpoint_get_logging_description(v105);
                v107 = nw_endpoint_handler_state_string(v146);
                os_log_type_t v108 = nw_endpoint_handler_mode_string(v146);
                id v109 = nw_endpoint_handler_copy_current_path(v146);
                *(_DWORD *)buf = 136447746;
                __int16 v153 = "nw_flow_passthrough_notify";
                __int16 v154 = 2082;
                uint64_t v155 = (void *)v103;
                __int16 v156 = 2082;
                v157 = v104;
                __int16 v158 = 2082;
                BOOL v159 = v106;
                __int16 v160 = 2082;
                v161 = v107;
                __int16 v162 = 2082;
                nw_endpoint_t v163 = v108;
                __int16 v164 = 2114;
                id v165 = v109;
                _os_log_impl(&dword_1830D4000, v66, v102, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] received restart without connecting too many times, failing flow, no backtrace", buf, 0x48u);

                unint64_t v14 = v136;
                uint64_t v9 = v140;
                uint64_t v65 = v133;
              }
            }
            else
            {
              if (__nwlog_connection_log::onceToken != -1) {
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
              }
              BOOL v66 = (id)gconnectionLogObj;
              os_log_type_t v94 = type;
              if (os_log_type_enabled(v66, type))
              {
                os_log_type_t v132 = v65;
                BOOL v95 = nw_endpoint_handler_get_id_string(v146);
                os_log_type_t v96 = nw_endpoint_handler_dry_run_string(v146);
                nw_endpoint_t v97 = nw_endpoint_handler_copy_endpoint(v146);
                BOOL v98 = nw_endpoint_get_logging_description(v97);
                v99 = nw_endpoint_handler_state_string(v146);
                id v100 = nw_endpoint_handler_mode_string(v146);
                id v101 = nw_endpoint_handler_copy_current_path(v146);
                *(_DWORD *)buf = 136447746;
                __int16 v153 = "nw_flow_passthrough_notify";
                __int16 v154 = 2082;
                uint64_t v155 = (void *)v95;
                __int16 v156 = 2082;
                v157 = v96;
                __int16 v158 = 2082;
                BOOL v159 = v98;
                __int16 v160 = 2082;
                v161 = v99;
                __int16 v162 = 2082;
                nw_endpoint_t v163 = v100;
                __int16 v164 = 2114;
                id v165 = v101;
                _os_log_impl(&dword_1830D4000, v66, v94, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] received restart without connecting too many times, failing flow, backtrace limit exceeded", buf, 0x48u);

                unint64_t v14 = v136;
                uint64_t v9 = v140;
                uint64_t v65 = v132;
              }
            }

LABEL_106:
            if (v65) {
              free(v65);
            }
LABEL_108:
            nw_protocol_disconnected((void *)v9, *(void *)(v9 + 32));
LABEL_74:

            goto LABEL_75;
          case 0x17u:
LABEL_46:
            if (a4 && a5 == 1)
            {
              int v51 = *a4;
              char v52 = *((unsigned char *)v14 + 35);
              *((unsigned char *)v14 + 35) = v52 & 0xEF | (16 * v51);
              if (!v51 && (v52 & 8) != 0)
              {
                *((unsigned char *)v14 + 35) = v52 & 0xE7 | (16 * v51);
                nw_endpoint_flow_start_child(v146);
              }
              goto LABEL_74;
            }
            __int16 v53 = __nwlog_obj();
            *(_DWORD *)buf = 136446210;
            __int16 v153 = "nw_flow_passthrough_notify";
            uint64_t v54 = (char *)_os_log_send_and_compose_impl();

            os_log_type_t type = OS_LOG_TYPE_ERROR;
            char v150 = 0;
            if (!__nwlog_fault(v54, &type, &v150)) {
              goto LABEL_99;
            }
            if (type == OS_LOG_TYPE_FAULT)
            {
              uint64_t v55 = __nwlog_obj();
              os_log_type_t v56 = type;
              if (os_log_type_enabled(v55, type))
              {
                *(_DWORD *)buf = 136446210;
                __int16 v153 = "nw_flow_passthrough_notify";
                _os_log_impl(&dword_1830D4000, v55, v56, "%{public}s Invalid argument passed to nw_protocol_notification_type_delay_child", buf, 0xCu);
              }
            }
            else
            {
              if (v150)
              {
                os_log_type_t v78 = v14;
                os_log_type_t v79 = (char *)__nw_create_backtrace_string();
                os_log_type_t v80 = __nwlog_obj();
                os_log_type_t v81 = type;
                BOOL v82 = os_log_type_enabled(v80, type);
                if (v79)
                {
                  if (v82)
                  {
                    *(_DWORD *)buf = 136446466;
                    __int16 v153 = "nw_flow_passthrough_notify";
                    __int16 v154 = 2082;
                    uint64_t v155 = v79;
                    _os_log_impl(&dword_1830D4000, v80, v81, "%{public}s Invalid argument passed to nw_protocol_notification_type_delay_child, dumping backtrace:%{public}s", buf, 0x16u);
                  }

                  unint64_t v14 = v78;
                  free(v79);
                }
                else
                {
                  if (v82)
                  {
                    *(_DWORD *)buf = 136446210;
                    __int16 v153 = "nw_flow_passthrough_notify";
                    _os_log_impl(&dword_1830D4000, v80, v81, "%{public}s Invalid argument passed to nw_protocol_notification_type_delay_child, no backtrace", buf, 0xCu);
                  }

                  unint64_t v14 = v78;
                }
LABEL_99:
                if (v54) {
                  free(v54);
                }
                goto LABEL_74;
              }
              uint64_t v55 = __nwlog_obj();
              os_log_type_t v93 = type;
              if (os_log_type_enabled(v55, type))
              {
                *(_DWORD *)buf = 136446210;
                __int16 v153 = "nw_flow_passthrough_notify";
                _os_log_impl(&dword_1830D4000, v55, v93, "%{public}s Invalid argument passed to nw_protocol_notification_type_delay_child, backtrace limit exceeded", buf, 0xCu);
              }
            }

            goto LABEL_99;
          case 0x19u:
LABEL_51:
            v147[0] = MEMORY[0x1E4F143A8];
            v147[1] = 3221225472;
            v147[2] = ___ZL26nw_flow_passthrough_notifyP11nw_protocolS0_31nw_protocol_notification_type_tPvm_block_invoke;
            v147[3] = &unk_1E523CBD8;
            uint64_t v149 = v9;
            id v148 = v146;
            nw_endpoint_handler_access_parent_flow_handler(v148, v147);

            goto LABEL_74;
          default:
LABEL_70:
            uint64_t v38 = *(void *)(v9 + 48);
            if (v38)
            {
LABEL_71:
              uint64_t v76 = *(void *)(v38 + 24);
              if (v76)
              {
                BOOL v77 = *(void (**)(void))(v76 + 160);
                if (v77) {
                  v77();
                }
              }
            }
            goto LABEL_74;
        }
      }
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      __int16 v20 = (id)gconnectionLogObj;
      if (!os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
      {
LABEL_33:

        goto LABEL_34;
      }
      uint64_t v138 = v9;
      os_log_t log = v20;
      id v135 = v14;
      uint64_t v21 = v18;

      uint64_t v22 = v21;
      char v23 = *((unsigned char *)v18 + 268);

      if (v23) {
        uint64_t v24 = "dry-run ";
      }
      else {
        uint64_t v24 = "";
      }
      nw_endpoint_t v25 = nw_endpoint_handler_copy_endpoint(v22);
      __int16 v129 = nw_endpoint_get_logging_description(v25);
      id v26 = v22;
      int v27 = v26;
      uint64_t v28 = v146->state;
      os_log_type_t v127 = v24;
      if (v28 > 5) {
        uint64_t v29 = "unknown-state";
      }
      else {
        uint64_t v29 = off_1E523FB38[v28];
      }
      os_log_type_t v125 = v29;
      BOOL v123 = v21 + 168;

      os_log_type_t v30 = v27;
      long long v31 = v30;
      nw_endpoint_t v122 = v25;
      Class v32 = "path";
      switch(v12->mode)
      {
        case 0:
          break;
        case 1:
          Class v32 = "resolver";
          break;
        case 2:
          Class v32 = nw_endpoint_flow_mode_string(v30[31]);
          break;
        case 3:
          Class v32 = "proxy";
          break;
        case 4:
          Class v32 = "fallback";
          break;
        case 5:
          Class v32 = "transform";
          break;
        default:
          Class v32 = "unknown-mode";
          break;
      }

      id v33 = v31;
      os_unfair_lock_lock((os_unfair_lock_t)v33 + 28);
      id v34 = v33[8];
      os_unfair_lock_unlock((os_unfair_lock_t)v33 + 28);

      id v35 = v34;
      os_log_type_t v36 = v35;
      if (a3 > 0x1A) {
        uint64_t v37 = "unknown";
      }
      else {
        uint64_t v37 = off_1E5241E58[a3];
      }
      unint64_t v14 = v135;
      uint64_t v9 = v138;
      *(_DWORD *)buf = 136448002;
      __int16 v153 = "nw_flow_passthrough_notify";
      __int16 v154 = 2082;
      uint64_t v155 = v123;
      __int16 v156 = 2082;
      v157 = v127;
      __int16 v158 = 2082;
      BOOL v159 = v129;
      __int16 v160 = 2082;
      v161 = v125;
      __int16 v162 = 2082;
      nw_endpoint_t v163 = v32;
      __int16 v164 = 2114;
      id v165 = v35;
      __int16 v166 = 2082;
      id v167 = v37;
      _os_log_impl(&dword_1830D4000, log, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] received notification %{public}s", buf, 0x52u);
    }
    __int16 v20 = log;
    goto LABEL_33;
  }
LABEL_75:
}

void sub_1832A000C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

void nw_protocol_default_notify(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v17 = "nw_protocol_default_notify";
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (!__nwlog_fault(v6, &type, &v14)) {
      goto LABEL_43;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_43;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v17 = "nw_protocol_default_notify";
      uint64_t v9 = "%{public}s called with null protocol";
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v17 = "nw_protocol_default_notify";
          __int16 v18 = 2082;
          char v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_43:
        if (!v6) {
          return;
        }
LABEL_44:
        free(v6);
        return;
      }
      if (!v11) {
        goto LABEL_43;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v17 = "nw_protocol_default_notify";
      uint64_t v9 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_43;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v17 = "nw_protocol_default_notify";
      uint64_t v9 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
LABEL_42:
    _os_log_impl(&dword_1830D4000, v7, v8, v9, buf, 0xCu);
    goto LABEL_43;
  }
  if (a2)
  {
    if (a3 <= 0x15)
    {
      if (((1 << a3) & 0x1A000) != 0)
      {
        uint64_t v3 = *(void *)(a1 + 32);
        if (!v3) {
          return;
        }
LABEL_10:
        uint64_t v4 = *(void *)(v3 + 24);
        if (v4)
        {
          uint64_t v5 = *(void (**)(void))(v4 + 160);
          if (v5)
          {
            v5();
          }
        }
        return;
      }
      if (((1 << a3) & 0x200080) != 0) {
        return;
      }
    }
    uint64_t v3 = *(void *)(a1 + 48);
    if (!v3) {
      return;
    }
    goto LABEL_10;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v17 = "nw_protocol_default_notify";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (!__nwlog_fault(v6, &type, &v14)) {
    goto LABEL_43;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    uint64_t v7 = __nwlog_obj();
    os_log_type_t v8 = type;
    if (!os_log_type_enabled(v7, type)) {
      goto LABEL_43;
    }
    *(_DWORD *)buf = 136446210;
    BOOL v17 = "nw_protocol_default_notify";
    uint64_t v9 = "%{public}s called with null other_protocol";
    goto LABEL_42;
  }
  if (!v14)
  {
    uint64_t v7 = __nwlog_obj();
    os_log_type_t v8 = type;
    if (!os_log_type_enabled(v7, type)) {
      goto LABEL_43;
    }
    *(_DWORD *)buf = 136446210;
    BOOL v17 = "nw_protocol_default_notify";
    uint64_t v9 = "%{public}s called with null other_protocol, backtrace limit exceeded";
    goto LABEL_42;
  }
  os_log_type_t v12 = (char *)__nw_create_backtrace_string();
  uint64_t v7 = __nwlog_obj();
  os_log_type_t v8 = type;
  BOOL v13 = os_log_type_enabled(v7, type);
  if (!v12)
  {
    if (!v13) {
      goto LABEL_43;
    }
    *(_DWORD *)buf = 136446210;
    BOOL v17 = "nw_protocol_default_notify";
    uint64_t v9 = "%{public}s called with null other_protocol, no backtrace";
    goto LABEL_42;
  }
  if (v13)
  {
    *(_DWORD *)buf = 136446466;
    BOOL v17 = "nw_protocol_default_notify";
    __int16 v18 = 2082;
    char v19 = v12;
    _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null other_protocol, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v12);
  if (v6) {
    goto LABEL_44;
  }
}

void nw_protocol_ipv4_notify(uint64_t a1, uint64_t a2, unsigned int a3, unsigned char *a4, uint64_t a5)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    id v49 = "nw_protocol_ipv4_notify";
    uint64_t v22 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v46 = 0;
    if (!__nwlog_fault(v22, &type, &v46)) {
      goto LABEL_131;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v23 = __nwlog_obj();
      os_log_type_t v24 = type;
      if (!os_log_type_enabled(v23, type)) {
        goto LABEL_131;
      }
      *(_DWORD *)buf = 136446210;
      id v49 = "nw_protocol_ipv4_notify";
      nw_endpoint_t v25 = "%{public}s called with null protocol";
    }
    else if (v46)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      char v23 = __nwlog_obj();
      os_log_type_t v24 = type;
      BOOL v27 = os_log_type_enabled(v23, type);
      if (backtrace_string)
      {
        if (v27)
        {
          *(_DWORD *)buf = 136446466;
          id v49 = "nw_protocol_ipv4_notify";
          __int16 v50 = 2082;
          int v51 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v23, v24, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_131:
        if (!v22) {
          return;
        }
        goto LABEL_132;
      }
      if (!v27) {
        goto LABEL_131;
      }
      *(_DWORD *)buf = 136446210;
      id v49 = "nw_protocol_ipv4_notify";
      nw_endpoint_t v25 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      char v23 = __nwlog_obj();
      os_log_type_t v24 = type;
      if (!os_log_type_enabled(v23, type)) {
        goto LABEL_131;
      }
      *(_DWORD *)buf = 136446210;
      id v49 = "nw_protocol_ipv4_notify";
      nw_endpoint_t v25 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    goto LABEL_130;
  }
  if (*(_UNKNOWN **)(a1 + 40) != &nw_protocol_ref_counted_handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    id v49 = "nw_protocol_ipv4_notify";
    uint64_t v22 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v46 = 0;
    if (!__nwlog_fault(v22, &type, &v46)) {
      goto LABEL_131;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v46)
      {
        char v23 = __nwlog_obj();
        os_log_type_t v24 = type;
        if (!os_log_type_enabled(v23, type)) {
          goto LABEL_131;
        }
        *(_DWORD *)buf = 136446210;
        id v49 = "nw_protocol_ipv4_notify";
        nw_endpoint_t v25 = "%{public}s called with null ipv4, backtrace limit exceeded";
        goto LABEL_130;
      }
      uint64_t v28 = (char *)__nw_create_backtrace_string();
      char v23 = __nwlog_obj();
      os_log_type_t v24 = type;
      BOOL v29 = os_log_type_enabled(v23, type);
      if (!v28)
      {
        if (!v29) {
          goto LABEL_131;
        }
        *(_DWORD *)buf = 136446210;
        id v49 = "nw_protocol_ipv4_notify";
        nw_endpoint_t v25 = "%{public}s called with null ipv4, no backtrace";
        goto LABEL_130;
      }
      if (!v29) {
        goto LABEL_99;
      }
      *(_DWORD *)buf = 136446466;
      id v49 = "nw_protocol_ipv4_notify";
      __int16 v50 = 2082;
      int v51 = v28;
      os_log_type_t v30 = "%{public}s called with null ipv4, dumping backtrace:%{public}s";
      goto LABEL_98;
    }
    char v23 = __nwlog_obj();
    os_log_type_t v24 = type;
    if (!os_log_type_enabled(v23, type)) {
      goto LABEL_131;
    }
    *(_DWORD *)buf = 136446210;
    id v49 = "nw_protocol_ipv4_notify";
    nw_endpoint_t v25 = "%{public}s called with null ipv4";
LABEL_130:
    _os_log_impl(&dword_1830D4000, v23, v24, v25, buf, 0xCu);
    goto LABEL_131;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    id v49 = "nw_protocol_ipv4_notify";
    uint64_t v22 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v46 = 0;
    if (!__nwlog_fault(v22, &type, &v46)) {
      goto LABEL_131;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v46)
      {
        char v23 = __nwlog_obj();
        os_log_type_t v24 = type;
        if (!os_log_type_enabled(v23, type)) {
          goto LABEL_131;
        }
        *(_DWORD *)buf = 136446210;
        id v49 = "nw_protocol_ipv4_notify";
        nw_endpoint_t v25 = "%{public}s called with null other_protocol, backtrace limit exceeded";
        goto LABEL_130;
      }
      uint64_t v28 = (char *)__nw_create_backtrace_string();
      char v23 = __nwlog_obj();
      os_log_type_t v24 = type;
      BOOL v31 = os_log_type_enabled(v23, type);
      if (!v28)
      {
        if (!v31) {
          goto LABEL_131;
        }
        *(_DWORD *)buf = 136446210;
        id v49 = "nw_protocol_ipv4_notify";
        nw_endpoint_t v25 = "%{public}s called with null other_protocol, no backtrace";
        goto LABEL_130;
      }
      if (!v31) {
        goto LABEL_99;
      }
      *(_DWORD *)buf = 136446466;
      id v49 = "nw_protocol_ipv4_notify";
      __int16 v50 = 2082;
      int v51 = v28;
      os_log_type_t v30 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
      goto LABEL_98;
    }
    char v23 = __nwlog_obj();
    os_log_type_t v24 = type;
    if (!os_log_type_enabled(v23, type)) {
      goto LABEL_131;
    }
    *(_DWORD *)buf = 136446210;
    id v49 = "nw_protocol_ipv4_notify";
    nw_endpoint_t v25 = "%{public}s called with null other_protocol";
    goto LABEL_130;
  }
  uint64_t v8 = a1 + 96;
  if (a3 == 17)
  {
    if (*(void *)(a1 + 32) != a2) {
      goto LABEL_13;
    }
    os_log_type_t v12 = *(void **)(a2 + 40);
    if (v12 == &nw_protocol_ref_counted_handle)
    {
      uint64_t v13 = *(void *)(a2 + 88);
      if (v13) {
        *(void *)(a2 + 88) = v13 + 1;
      }
    }
    uint64_t v14 = *(void *)(a2 + 24);
    if (v14)
    {
      BOOL v15 = *(uint64_t (**)(uint64_t))(v14 + 200);
      if (v15)
      {
        char v16 = v15(a2);
        if (v12 != &nw_protocol_ref_counted_handle)
        {
LABEL_22:
          if (v16)
          {
            if (nw_endpoint_get_address_family(v16) == 2)
            {
              *(_DWORD *)(a1 + 152) = *(_DWORD *)&nw_endpoint_get_address(v16)->sa_data[2];
              if ((*(unsigned char *)(a1 + 232) & 1) == 0)
              {
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                BOOL v17 = gLogObj;
                if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
                {
                  *(_DWORD *)buf = 136446978;
                  id v49 = "nw_protocol_ipv4_notify";
                  __int16 v50 = 2082;
                  int v51 = (void *)(a1 + 233);
                  __int16 v52 = 2080;
                  __int16 v53 = " ";
                  __int16 v54 = 2048;
                  uint64_t v55 = (char *)v8;
                  _os_log_impl(&dword_1830D4000, v17, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s%p updated local address", buf, 0x2Au);
                }
              }
            }
          }
          goto LABEL_13;
        }
LABEL_21:
        if (*(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
        {
          uint64_t v18 = *(void *)(a2 + 88);
          if (v18)
          {
            uint64_t v19 = v18 - 1;
            *(void *)(a2 + 88) = v19;
            if (!v19)
            {
              uint64_t v20 = *(void (***)(void))(a2 + 64);
              if (v20)
              {
                *(void *)(a2 + 64) = 0;
                v20[2](v20);
                _Block_release(v20);
              }
              if (*(unsigned char *)(a2 + 72))
              {
                uint64_t v21 = *(const void **)(a2 + 64);
                if (v21) {
                  _Block_release(v21);
                }
              }
              free((void *)a2);
            }
          }
        }
        goto LABEL_22;
      }
    }
    __nwlog_obj();
    Class v32 = *(const char **)(a2 + 16);
    *(_DWORD *)buf = 136446722;
    id v49 = "__nw_protocol_get_output_local_endpoint";
    if (!v32) {
      Class v32 = "invalid";
    }
    __int16 v50 = 2082;
    int v51 = (void *)v32;
    __int16 v52 = 2048;
    __int16 v53 = (const char *)a2;
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v46 = 0;
    char v45 = (char *)_os_log_send_and_compose_impl();
    if (__nwlog_fault(v45, &type, &v46))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        id v33 = __nwlog_obj();
        os_log_type_t v34 = type;
        if (!os_log_type_enabled(v33, type)) {
          goto LABEL_138;
        }
        id v35 = *(const char **)(a2 + 16);
        if (!v35) {
          id v35 = "invalid";
        }
        *(_DWORD *)buf = 136446722;
        id v49 = "__nw_protocol_get_output_local_endpoint";
        __int16 v50 = 2082;
        int v51 = (void *)v35;
        __int16 v52 = 2048;
        __int16 v53 = (const char *)a2;
        os_log_type_t v36 = "%{public}s protocol %{public}s (%p) has invalid get_output_local_endpoint callback";
LABEL_137:
        _os_log_impl(&dword_1830D4000, v33, v34, v36, buf, 0x20u);
        goto LABEL_138;
      }
      if (!v46)
      {
        id v33 = __nwlog_obj();
        os_log_type_t v34 = type;
        if (!os_log_type_enabled(v33, type)) {
          goto LABEL_138;
        }
        os_log_type_t v43 = *(const char **)(a2 + 16);
        if (!v43) {
          os_log_type_t v43 = "invalid";
        }
        *(_DWORD *)buf = 136446722;
        id v49 = "__nw_protocol_get_output_local_endpoint";
        __int16 v50 = 2082;
        int v51 = (void *)v43;
        __int16 v52 = 2048;
        __int16 v53 = (const char *)a2;
        os_log_type_t v36 = "%{public}s protocol %{public}s (%p) has invalid get_output_local_endpoint callback, backtrace limit exceeded";
        goto LABEL_137;
      }
      os_log_type_t v40 = (char *)__nw_create_backtrace_string();
      id v33 = __nwlog_obj();
      os_log_type_t v34 = type;
      BOOL v41 = os_log_type_enabled(v33, type);
      if (!v40)
      {
        uint64_t v8 = a1 + 96;
        if (!v41) {
          goto LABEL_138;
        }
        nw_endpoint_t v44 = *(const char **)(a2 + 16);
        if (!v44) {
          nw_endpoint_t v44 = "invalid";
        }
        *(_DWORD *)buf = 136446722;
        id v49 = "__nw_protocol_get_output_local_endpoint";
        __int16 v50 = 2082;
        int v51 = (void *)v44;
        __int16 v52 = 2048;
        __int16 v53 = (const char *)a2;
        os_log_type_t v36 = "%{public}s protocol %{public}s (%p) has invalid get_output_local_endpoint callback, no backtrace";
        goto LABEL_137;
      }
      if (v41)
      {
        BOOL v42 = *(const char **)(a2 + 16);
        if (!v42) {
          BOOL v42 = "invalid";
        }
        *(_DWORD *)buf = 136446978;
        id v49 = "__nw_protocol_get_output_local_endpoint";
        __int16 v50 = 2082;
        int v51 = (void *)v42;
        __int16 v52 = 2048;
        __int16 v53 = (const char *)a2;
        __int16 v54 = 2082;
        uint64_t v55 = v40;
        _os_log_impl(&dword_1830D4000, v33, v34, "%{public}s protocol %{public}s (%p) has invalid get_output_local_endpoint callback, dumping backtrace:%{public}s", buf, 0x2Au);
      }
      free(v40);
      uint64_t v8 = a1 + 96;
    }
LABEL_138:
    if (v45) {
      free(v45);
    }
    char v16 = 0;
    if (v12 != &nw_protocol_ref_counted_handle) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }
  if (a3 != 14)
  {
LABEL_13:
    nw_protocol_common_notify(a1, a2, a3);
    return;
  }
  if (*(void *)(a1 + 48) != a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    id v49 = "nw_protocol_ipv4_notify";
    uint64_t v22 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v46 = 0;
    if (!__nwlog_fault(v22, &type, &v46)) {
      goto LABEL_131;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v46)
      {
        char v23 = __nwlog_obj();
        os_log_type_t v24 = type;
        if (!os_log_type_enabled(v23, type)) {
          goto LABEL_131;
        }
        *(_DWORD *)buf = 136446210;
        id v49 = "nw_protocol_ipv4_notify";
        nw_endpoint_t v25 = "%{public}s called with null (other_protocol == nw_protocol_get_input_handler(&ipv4->protocol)), backtrace limit exceeded";
        goto LABEL_130;
      }
      uint64_t v28 = (char *)__nw_create_backtrace_string();
      char v23 = __nwlog_obj();
      os_log_type_t v24 = type;
      BOOL v37 = os_log_type_enabled(v23, type);
      if (!v28)
      {
        if (!v37) {
          goto LABEL_131;
        }
        *(_DWORD *)buf = 136446210;
        id v49 = "nw_protocol_ipv4_notify";
        nw_endpoint_t v25 = "%{public}s called with null (other_protocol == nw_protocol_get_input_handler(&ipv4->protocol)), no backtrace";
        goto LABEL_130;
      }
      if (!v37) {
        goto LABEL_99;
      }
      *(_DWORD *)buf = 136446466;
      id v49 = "nw_protocol_ipv4_notify";
      __int16 v50 = 2082;
      int v51 = v28;
      os_log_type_t v30 = "%{public}s called with null (other_protocol == nw_protocol_get_input_handler(&ipv4->protocol)), dumping back"
            "trace:%{public}s";
      goto LABEL_98;
    }
    char v23 = __nwlog_obj();
    os_log_type_t v24 = type;
    if (!os_log_type_enabled(v23, type)) {
      goto LABEL_131;
    }
    *(_DWORD *)buf = 136446210;
    id v49 = "nw_protocol_ipv4_notify";
    nw_endpoint_t v25 = "%{public}s called with null (other_protocol == nw_protocol_get_input_handler(&ipv4->protocol))";
    goto LABEL_130;
  }
  if (!a4)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    id v49 = "nw_protocol_ipv4_notify";
    uint64_t v22 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v46 = 0;
    if (!__nwlog_fault(v22, &type, &v46)) {
      goto LABEL_131;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v23 = __nwlog_obj();
      os_log_type_t v24 = type;
      if (!os_log_type_enabled(v23, type)) {
        goto LABEL_131;
      }
      *(_DWORD *)buf = 136446210;
      id v49 = "nw_protocol_ipv4_notify";
      nw_endpoint_t v25 = "%{public}s called with null (val != nil)";
      goto LABEL_130;
    }
    if (!v46)
    {
      char v23 = __nwlog_obj();
      os_log_type_t v24 = type;
      if (!os_log_type_enabled(v23, type)) {
        goto LABEL_131;
      }
      *(_DWORD *)buf = 136446210;
      id v49 = "nw_protocol_ipv4_notify";
      nw_endpoint_t v25 = "%{public}s called with null (val != nil), backtrace limit exceeded";
      goto LABEL_130;
    }
    uint64_t v28 = (char *)__nw_create_backtrace_string();
    char v23 = __nwlog_obj();
    os_log_type_t v24 = type;
    BOOL v38 = os_log_type_enabled(v23, type);
    if (!v28)
    {
      if (!v38) {
        goto LABEL_131;
      }
      *(_DWORD *)buf = 136446210;
      id v49 = "nw_protocol_ipv4_notify";
      nw_endpoint_t v25 = "%{public}s called with null (val != nil), no backtrace";
      goto LABEL_130;
    }
    if (!v38) {
      goto LABEL_99;
    }
    *(_DWORD *)buf = 136446466;
    id v49 = "nw_protocol_ipv4_notify";
    __int16 v50 = 2082;
    int v51 = v28;
    os_log_type_t v30 = "%{public}s called with null (val != nil), dumping backtrace:%{public}s";
LABEL_98:
    _os_log_impl(&dword_1830D4000, v23, v24, v30, buf, 0x16u);
    goto LABEL_99;
  }
  if (a5 != 1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    id v49 = "nw_protocol_ipv4_notify";
    uint64_t v22 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v46 = 0;
    if (!__nwlog_fault(v22, &type, &v46)) {
      goto LABEL_131;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v23 = __nwlog_obj();
      os_log_type_t v24 = type;
      if (!os_log_type_enabled(v23, type)) {
        goto LABEL_131;
      }
      *(_DWORD *)buf = 136446210;
      id v49 = "nw_protocol_ipv4_notify";
      nw_endpoint_t v25 = "%{public}s called with null (len == sizeof(BOOL))";
      goto LABEL_130;
    }
    if (!v46)
    {
      char v23 = __nwlog_obj();
      os_log_type_t v24 = type;
      if (!os_log_type_enabled(v23, type)) {
        goto LABEL_131;
      }
      *(_DWORD *)buf = 136446210;
      id v49 = "nw_protocol_ipv4_notify";
      nw_endpoint_t v25 = "%{public}s called with null (len == sizeof(BOOL)), backtrace limit exceeded";
      goto LABEL_130;
    }
    uint64_t v28 = (char *)__nw_create_backtrace_string();
    char v23 = __nwlog_obj();
    os_log_type_t v24 = type;
    BOOL v39 = os_log_type_enabled(v23, type);
    if (!v28)
    {
      if (!v39) {
        goto LABEL_131;
      }
      *(_DWORD *)buf = 136446210;
      id v49 = "nw_protocol_ipv4_notify";
      nw_endpoint_t v25 = "%{public}s called with null (len == sizeof(BOOL)), no backtrace";
      goto LABEL_130;
    }
    if (v39)
    {
      *(_DWORD *)buf = 136446466;
      id v49 = "nw_protocol_ipv4_notify";
      __int16 v50 = 2082;
      int v51 = v28;
      os_log_type_t v30 = "%{public}s called with null (len == sizeof(BOOL)), dumping backtrace:%{public}s";
      goto LABEL_98;
    }
LABEL_99:
    free(v28);
    if (!v22) {
      return;
    }
LABEL_132:
    free(v22);
    return;
  }
  char v9 = *(unsigned char *)(a1 + 232);
  *(unsigned char *)(a1 + 232) = v9 & 0xFB | (4 * *a4);
  if ((v9 & 1) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v10 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
    {
      int v11 = (*(unsigned __int8 *)(a1 + 232) >> 2) & 1;
      *(_DWORD *)buf = 136447234;
      id v49 = "nw_protocol_ipv4_notify";
      __int16 v50 = 2082;
      int v51 = (void *)(a1 + 233);
      __int16 v52 = 2080;
      __int16 v53 = " ";
      __int16 v54 = 2048;
      uint64_t v55 = (char *)(a1 + 96);
      __int16 v56 = 1024;
      int v57 = v11;
      _os_log_impl(&dword_1830D4000, v10, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s%p segmentation offload notify enable %d", buf, 0x30u);
    }
  }
}

void nw_protocol_common_notify(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    nw_endpoint_t v44 = "nw_protocol_common_notify";
    char v9 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v41 = 0;
    if (!__nwlog_fault(v9, &type, &v41)) {
      goto LABEL_79;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (v41)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        id v10 = __nwlog_obj();
        os_log_type_t v11 = type;
        BOOL v38 = os_log_type_enabled(v10, type);
        if (backtrace_string)
        {
          if (v38)
          {
            *(_DWORD *)buf = 136446466;
            nw_endpoint_t v44 = "nw_protocol_common_notify";
            __int16 v45 = 2082;
            char v46 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(backtrace_string);
        }
        else if (v38)
        {
          *(_DWORD *)buf = 136446210;
          nw_endpoint_t v44 = "nw_protocol_common_notify";
          os_log_type_t v12 = "%{public}s called with null protocol, no backtrace";
          goto LABEL_77;
        }
      }
      else
      {
        id v10 = __nwlog_obj();
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          nw_endpoint_t v44 = "nw_protocol_common_notify";
          os_log_type_t v12 = "%{public}s called with null protocol, backtrace limit exceeded";
          goto LABEL_77;
        }
      }
      goto LABEL_79;
    }
    id v10 = __nwlog_obj();
    os_log_type_t v11 = type;
    if (!os_log_type_enabled(v10, type)) {
      goto LABEL_79;
    }
    *(_DWORD *)buf = 136446210;
    nw_endpoint_t v44 = "nw_protocol_common_notify";
    os_log_type_t v12 = "%{public}s called with null protocol";
    goto LABEL_77;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    nw_endpoint_t v44 = "nw_protocol_common_notify";
    char v9 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v41 = 0;
    if (!__nwlog_fault(v9, &type, &v41)) {
      goto LABEL_79;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v41)
      {
        id v10 = __nwlog_obj();
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          nw_endpoint_t v44 = "nw_protocol_common_notify";
          os_log_type_t v12 = "%{public}s called with null other_protocol, backtrace limit exceeded";
          goto LABEL_77;
        }
        goto LABEL_79;
      }
      Class v32 = (char *)__nw_create_backtrace_string();
      id v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v39 = os_log_type_enabled(v10, type);
      if (!v32)
      {
        if (v39)
        {
          *(_DWORD *)buf = 136446210;
          nw_endpoint_t v44 = "nw_protocol_common_notify";
          os_log_type_t v12 = "%{public}s called with null other_protocol, no backtrace";
          goto LABEL_77;
        }
        goto LABEL_79;
      }
      if (v39)
      {
        *(_DWORD *)buf = 136446466;
        nw_endpoint_t v44 = "nw_protocol_common_notify";
        __int16 v45 = 2082;
        char v46 = v32;
        os_log_type_t v34 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
LABEL_68:
        _os_log_impl(&dword_1830D4000, v10, v11, v34, buf, 0x16u);
      }
LABEL_69:
      free(v32);
      if (!v9) {
        return;
      }
      goto LABEL_80;
    }
    id v10 = __nwlog_obj();
    os_log_type_t v11 = type;
    if (!os_log_type_enabled(v10, type)) {
      goto LABEL_79;
    }
    *(_DWORD *)buf = 136446210;
    nw_endpoint_t v44 = "nw_protocol_common_notify";
    os_log_type_t v12 = "%{public}s called with null other_protocol";
LABEL_77:
    id v35 = v10;
    os_log_type_t v36 = v11;
LABEL_78:
    _os_log_impl(&dword_1830D4000, v35, v36, v12, buf, 0xCu);
    goto LABEL_79;
  }
  if (a3 > 0x15)
  {
LABEL_29:
    uint64_t v4 = *(void *)(a1 + 48);
    if (v4)
    {
      uint64_t v18 = *(void *)(v4 + 24);
      if (!v18) {
        return;
      }
      uint64_t v19 = *(void (**)(uint64_t, uint64_t))(v18 + 160);
      if (!v19) {
        return;
      }
      uint64_t v7 = *(void **)(v4 + 40);
      if (v7 == &nw_protocol_ref_counted_handle)
      {
        uint64_t v20 = *(void *)(v4 + 88);
        if (v20) {
          *(void *)(v4 + 88) = v20 + 1;
        }
      }
      uint64_t v21 = *(void **)(a2 + 40);
      if (v21 == &nw_protocol_ref_counted_handle)
      {
        uint64_t v22 = *(void *)(a2 + 88);
        if (v22) {
          *(void *)(a2 + 88) = v22 + 1;
        }
      }
      v19(v4, a2);
      if (v21 != &nw_protocol_ref_counted_handle) {
        goto LABEL_40;
      }
      goto LABEL_39;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446210;
    nw_endpoint_t v44 = "nw_protocol_common_notify";
    char v9 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v41 = 0;
    if (!__nwlog_fault(v9, &type, &v41)) {
      goto LABEL_79;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (!os_log_type_enabled(v10, type)) {
        goto LABEL_79;
      }
      *(_DWORD *)buf = 136446210;
      nw_endpoint_t v44 = "nw_protocol_common_notify";
      os_log_type_t v12 = "%{public}s notify requires a default input handler";
      goto LABEL_77;
    }
    if (!v41)
    {
      id v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (!os_log_type_enabled(v10, type)) {
        goto LABEL_79;
      }
      *(_DWORD *)buf = 136446210;
      nw_endpoint_t v44 = "nw_protocol_common_notify";
      os_log_type_t v12 = "%{public}s notify requires a default input handler, backtrace limit exceeded";
      goto LABEL_77;
    }
    Class v32 = (char *)__nw_create_backtrace_string();
    id v10 = __nwlog_obj();
    os_log_type_t v11 = type;
    BOOL v33 = os_log_type_enabled(v10, type);
    if (!v32)
    {
      if (!v33) {
        goto LABEL_79;
      }
      *(_DWORD *)buf = 136446210;
      nw_endpoint_t v44 = "nw_protocol_common_notify";
      os_log_type_t v12 = "%{public}s notify requires a default input handler, no backtrace";
      goto LABEL_77;
    }
    if (!v33) {
      goto LABEL_69;
    }
    *(_DWORD *)buf = 136446466;
    nw_endpoint_t v44 = "nw_protocol_common_notify";
    __int16 v45 = 2082;
    char v46 = v32;
    os_log_type_t v34 = "%{public}s notify requires a default input handler, dumping backtrace:%{public}s";
    goto LABEL_68;
  }
  if (((1 << a3) & 0x200080) != 0) {
    return;
  }
  if (((1 << a3) & 0x1A000) == 0)
  {
    if (a3) {
      goto LABEL_29;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    nw_endpoint_t v44 = "nw_protocol_common_notify";
    char v9 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v41 = 0;
    if (!__nwlog_fault(v9, &type, &v41)) {
      goto LABEL_79;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        nw_endpoint_t v44 = "nw_protocol_common_notify";
        os_log_type_t v12 = "%{public}s called with null type";
        goto LABEL_77;
      }
LABEL_79:
      if (!v9) {
        return;
      }
      goto LABEL_80;
    }
    if (!v41)
    {
      id v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        nw_endpoint_t v44 = "nw_protocol_common_notify";
        os_log_type_t v12 = "%{public}s called with null type, backtrace limit exceeded";
        goto LABEL_77;
      }
      goto LABEL_79;
    }
    Class v32 = (char *)__nw_create_backtrace_string();
    id v10 = __nwlog_obj();
    os_log_type_t v11 = type;
    BOOL v40 = os_log_type_enabled(v10, type);
    if (!v32)
    {
      if (v40)
      {
        *(_DWORD *)buf = 136446210;
        nw_endpoint_t v44 = "nw_protocol_common_notify";
        os_log_type_t v12 = "%{public}s called with null type, no backtrace";
        goto LABEL_77;
      }
      goto LABEL_79;
    }
    if (v40)
    {
      *(_DWORD *)buf = 136446466;
      nw_endpoint_t v44 = "nw_protocol_common_notify";
      __int16 v45 = 2082;
      char v46 = v32;
      os_log_type_t v34 = "%{public}s called with null type, dumping backtrace:%{public}s";
      goto LABEL_68;
    }
    goto LABEL_69;
  }
  uint64_t v4 = *(void *)(a1 + 32);
  if (!v4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446210;
    nw_endpoint_t v44 = "nw_protocol_common_notify";
    char v9 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v41 = 0;
    if (!__nwlog_fault(v9, &type, &v41)) {
      goto LABEL_79;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v10 = gLogObj;
      os_log_type_t v11 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_79;
      }
      *(_DWORD *)buf = 136446210;
      nw_endpoint_t v44 = "nw_protocol_common_notify";
      os_log_type_t v12 = "%{public}s notify requires an output handler";
      goto LABEL_77;
    }
    if (!v41)
    {
      id v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (!os_log_type_enabled(v10, type)) {
        goto LABEL_79;
      }
      *(_DWORD *)buf = 136446210;
      nw_endpoint_t v44 = "nw_protocol_common_notify";
      os_log_type_t v12 = "%{public}s notify requires an output handler, backtrace limit exceeded";
      goto LABEL_77;
    }
    uint64_t v14 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v15 = gLogObj;
    os_log_type_t v16 = type;
    BOOL v17 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!v14)
    {
      if (!v17) {
        goto LABEL_79;
      }
      *(_DWORD *)buf = 136446210;
      nw_endpoint_t v44 = "nw_protocol_common_notify";
      os_log_type_t v12 = "%{public}s notify requires an output handler, no backtrace";
      id v35 = v15;
      os_log_type_t v36 = v16;
      goto LABEL_78;
    }
    if (v17)
    {
      *(_DWORD *)buf = 136446466;
      nw_endpoint_t v44 = "nw_protocol_common_notify";
      __int16 v45 = 2082;
      char v46 = v14;
      _os_log_impl(&dword_1830D4000, v15, v16, "%{public}s notify requires an output handler, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v14);
    if (!v9) {
      return;
    }
LABEL_80:
    BOOL v27 = (char *)v9;
LABEL_81:
    free(v27);
    return;
  }
  uint64_t v5 = *(void *)(v4 + 24);
  if (!v5) {
    return;
  }
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v5 + 160);
  if (!v6) {
    return;
  }
  uint64_t v7 = *(void **)(v4 + 40);
  if (v7 == &nw_protocol_ref_counted_handle)
  {
    uint64_t v8 = *(void *)(v4 + 88);
    if (v8) {
      *(void *)(v4 + 88) = v8 + 1;
    }
  }
  if (*(_UNKNOWN **)(a2 + 40) != &nw_protocol_ref_counted_handle)
  {
    v6(v4, a2);
    goto LABEL_40;
  }
  uint64_t v13 = *(void *)(a2 + 88);
  if (v13) {
    *(void *)(a2 + 88) = v13 + 1;
  }
  v6(v4, a2);
LABEL_39:
  if (*(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
  {
    uint64_t v28 = *(void *)(a2 + 88);
    if (v28)
    {
      uint64_t v29 = v28 - 1;
      *(void *)(a2 + 88) = v29;
      if (!v29)
      {
        os_log_type_t v30 = *(void (***)(void))(a2 + 64);
        if (v30)
        {
          *(void *)(a2 + 64) = 0;
          v30[2](v30);
          _Block_release(v30);
        }
        if (*(unsigned char *)(a2 + 72))
        {
          BOOL v31 = *(const void **)(a2 + 64);
          if (v31) {
            _Block_release(v31);
          }
        }
        free((void *)a2);
      }
    }
  }
LABEL_40:
  if (v7 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(v4 + 40) == &nw_protocol_ref_counted_handle)
  {
    uint64_t v23 = *(void *)(v4 + 88);
    if (v23)
    {
      uint64_t v24 = v23 - 1;
      *(void *)(v4 + 88) = v24;
      if (!v24)
      {
        nw_endpoint_t v25 = *(void (***)(void))(v4 + 64);
        if (v25)
        {
          *(void *)(v4 + 64) = 0;
          v25[2](v25);
          _Block_release(v25);
        }
        if (*(unsigned char *)(v4 + 72))
        {
          id v26 = *(const void **)(v4 + 64);
          if (v26) {
            _Block_release(v26);
          }
        }
        BOOL v27 = (char *)v4;
        goto LABEL_81;
      }
    }
  }
}

uint64_t __nw_copy_current_audit_token_block_invoke()
{
  mach_msg_type_number_t task_info_outCnt = 8;
  uint64_t result = task_info(*MEMORY[0x1E4F14960], 0xFu, (task_info_t)&nw_copy_current_audit_token::my_audit_token, &task_info_outCnt);
  nw_copy_current_audit_token::valid = result == 0;
  return result;
}

xpc_object_t nw_network_agent_copy_dictionary_from_necp()
{
  MEMORY[0x1F4188790]();
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if (necp_client_action())
  {
    int v0 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v1 = gLogObj;
    if (v0 == 2)
    {
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v23 = "nw_network_agent_copy_dictionary_from_necp";
        __int16 v24 = 1024;
        LODWORD(v25[0]) = 2;
        _os_log_impl(&dword_1830D4000, v1, OS_LOG_TYPE_DEBUG, "%{public}s NECP_CLIENT_ACTION_COPY_AGENT %{darwin.errno}d", buf, 0x12u);
      }
      return 0;
    }
    *(_DWORD *)buf = 136446466;
    uint64_t v23 = "nw_network_agent_copy_dictionary_from_necp";
    __int16 v24 = 1024;
    LODWORD(v25[0]) = v0;
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (__nwlog_fault(v4, &type, &v20))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v5 = gLogObj;
        os_log_type_t v6 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
          goto LABEL_35;
        }
        *(_DWORD *)buf = 136446466;
        uint64_t v23 = "nw_network_agent_copy_dictionary_from_necp";
        __int16 v24 = 1024;
        LODWORD(v25[0]) = v0;
        uint64_t v7 = "%{public}s NECP_CLIENT_ACTION_COPY_AGENT %{darwin.errno}d";
        goto LABEL_29;
      }
      if (!v20)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v5 = gLogObj;
        os_log_type_t v6 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
          goto LABEL_35;
        }
        *(_DWORD *)buf = 136446466;
        uint64_t v23 = "nw_network_agent_copy_dictionary_from_necp";
        __int16 v24 = 1024;
        LODWORD(v25[0]) = v0;
        uint64_t v7 = "%{public}s NECP_CLIENT_ACTION_COPY_AGENT %{darwin.errno}d, backtrace limit exceeded";
        goto LABEL_29;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v5 = gLogObj;
      os_log_type_t v6 = type;
      BOOL v9 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446722;
          uint64_t v23 = "nw_network_agent_copy_dictionary_from_necp";
          __int16 v24 = 1024;
          LODWORD(v25[0]) = v0;
          WORD2(v25[0]) = 2082;
          *(void *)((char *)v25 + 6) = backtrace_string;
          _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s NECP_CLIENT_ACTION_COPY_AGENT %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x1Cu);
        }
        free(backtrace_string);
        goto LABEL_35;
      }
      if (v9)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v23 = "nw_network_agent_copy_dictionary_from_necp";
        __int16 v24 = 1024;
        LODWORD(v25[0]) = v0;
        uint64_t v7 = "%{public}s NECP_CLIENT_ACTION_COPY_AGENT %{darwin.errno}d, no backtrace";
LABEL_29:
        os_log_type_t v16 = v5;
        os_log_type_t v17 = v6;
        uint32_t v18 = 18;
LABEL_34:
        _os_log_impl(&dword_1830D4000, v16, v17, v7, buf, v18);
      }
    }
LABEL_35:
    if (v4) {
      free(v4);
    }
    return 0;
  }
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  if (!v2)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446210;
    uint64_t v23 = "nw_network_agent_copy_dictionary_from_necp";
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (!__nwlog_fault(v4, &type, &v20)) {
      goto LABEL_35;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v10 = gLogObj;
      os_log_type_t v11 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_35;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v23 = "nw_network_agent_copy_dictionary_from_necp";
      uint64_t v7 = "%{public}s xpc_dictionary_create failed";
    }
    else
    {
      if (v20)
      {
        os_log_type_t v12 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v13 = gLogObj;
        os_log_type_t v14 = type;
        BOOL v15 = os_log_type_enabled((os_log_t)gLogObj, type);
        if (v12)
        {
          if (v15)
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v23 = "nw_network_agent_copy_dictionary_from_necp";
            __int16 v24 = 2082;
            v25[0] = v12;
            _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s xpc_dictionary_create failed, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v12);
          goto LABEL_35;
        }
        if (!v15) {
          goto LABEL_35;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v23 = "nw_network_agent_copy_dictionary_from_necp";
        uint64_t v7 = "%{public}s xpc_dictionary_create failed, no backtrace";
        os_log_type_t v16 = v13;
        os_log_type_t v17 = v14;
LABEL_33:
        uint32_t v18 = 12;
        goto LABEL_34;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v10 = gLogObj;
      os_log_type_t v11 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_35;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v23 = "nw_network_agent_copy_dictionary_from_necp";
      uint64_t v7 = "%{public}s xpc_dictionary_create failed, backtrace limit exceeded";
    }
    os_log_type_t v16 = v10;
    os_log_type_t v17 = v11;
    goto LABEL_33;
  }
  xpc_object_t v3 = v2;
  xpc_dictionary_set_data(v2, "data", bytes, v27 + 216);
  return v3;
}

uint64_t nw_establishment_report_get_handshake_ms_for_protocol(void *a1, void *a2, void *a3)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a1;
  id v6 = a2;
  id v7 = a3;
  if (v6)
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000;
    uint64_t v25 = 0;
    enumerate_block[0] = MEMORY[0x1E4F143A8];
    enumerate_block[1] = 3221225472;
    enumerate_block[2] = ___ZL53nw_establishment_report_get_handshake_ms_for_protocolPU37objcproto26OS_nw_establishment_report8NSObjectPU36objcproto25OS_nw_protocol_definitionS_S3__block_invoke;
    enumerate_block[3] = &unk_1E5249C20;
    id v19 = v6;
    id v20 = v7;
    uint64_t v21 = buf;
    nw_establishment_report_enumerate_protocols(v5, enumerate_block);
    uint64_t v8 = *(void *)(*(void *)&buf[8] + 24);

    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  uint64_t v10 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_establishment_report_get_handshake_ms_for_protocol";
  os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v22 = 0;
  if (__nwlog_fault(v11, &type, &v22))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_establishment_report_get_handshake_ms_for_protocol";
        _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s called with null match_protocol", buf, 0xCu);
      }
    }
    else if (v22)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v12, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_establishment_report_get_handshake_ms_for_protocol";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v12, v15, "%{public}s called with null match_protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_establishment_report_get_handshake_ms_for_protocol";
        _os_log_impl(&dword_1830D4000, v12, v15, "%{public}s called with null match_protocol, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v17 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_establishment_report_get_handshake_ms_for_protocol";
        _os_log_impl(&dword_1830D4000, v12, v17, "%{public}s called with null match_protocol, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v11) {
    free(v11);
  }
  uint64_t v8 = 0;
LABEL_3:

  return v8;
}

void nw_establishment_report_enumerate_protocols(nw_establishment_report_t report, nw_report_protocol_enumerator_t enumerate_block)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  nw_establishment_report_t v3 = report;
  nw_report_protocol_enumerator_t v4 = enumerate_block;
  uint64_t v5 = v4;
  if (!v3)
  {
    id v7 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v26 = "nw_establishment_report_enumerate_protocols";
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (!__nwlog_fault(v8, &type, &v23)) {
      goto LABEL_38;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v26 = "nw_establishment_report_enumerate_protocols";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null report", buf, 0xCu);
      }
    }
    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v9 = __nwlog_obj();
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v26 = "nw_establishment_report_enumerate_protocols";
          __int16 v27 = 2082;
          uint64_t v28 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null report, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v8) {
          goto LABEL_4;
        }
LABEL_39:
        free(v8);
        goto LABEL_4;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v26 = "nw_establishment_report_enumerate_protocols";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null report, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v9 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v26 = "nw_establishment_report_enumerate_protocols";
        _os_log_impl(&dword_1830D4000, v9, v19, "%{public}s called with null report, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_37:

    goto LABEL_38;
  }
  if (v4)
  {
    uint64_t isa = (atomic_uchar *)v3[8].isa;
    v21[0] = MEMORY[0x1E4F143A8];
    v21[1] = 3221225472;
    v21[2] = __nw_establishment_report_enumerate_protocols_block_invoke;
    v21[3] = &unk_1E524AE90;
    id v22 = v4;
    nw_array_apply(isa, (uint64_t)v21);

    goto LABEL_4;
  }
  os_log_type_t v11 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v26 = "nw_establishment_report_enumerate_protocols";
  uint64_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v23 = 0;
  if (!__nwlog_fault(v8, &type, &v23)) {
    goto LABEL_38;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    BOOL v9 = __nwlog_obj();
    os_log_type_t v12 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v26 = "nw_establishment_report_enumerate_protocols";
      _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null enumerate_block", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (!v23)
  {
    BOOL v9 = __nwlog_obj();
    os_log_type_t v20 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v26 = "nw_establishment_report_enumerate_protocols";
      _os_log_impl(&dword_1830D4000, v9, v20, "%{public}s called with null enumerate_block, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_37;
  }
  BOOL v16 = (char *)__nw_create_backtrace_string();
  BOOL v9 = __nwlog_obj();
  os_log_type_t v17 = type;
  BOOL v18 = os_log_type_enabled(v9, type);
  if (!v16)
  {
    if (v18)
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v26 = "nw_establishment_report_enumerate_protocols";
      _os_log_impl(&dword_1830D4000, v9, v17, "%{public}s called with null enumerate_block, no backtrace", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (v18)
  {
    *(_DWORD *)buf = 136446466;
    uint64_t v26 = "nw_establishment_report_enumerate_protocols";
    __int16 v27 = 2082;
    uint64_t v28 = v16;
    _os_log_impl(&dword_1830D4000, v9, v17, "%{public}s called with null enumerate_block, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v16);
  if (v8) {
    goto LABEL_39;
  }
LABEL_4:
}

uint64_t nw_context_get_identifier(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  xpc_object_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = *((void *)v1 + 2);
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v16 = "nw_context_get_identifier";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_context_get_identifier";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null context", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v16 = "nw_context_get_identifier";
          __int16 v17 = 2082;
          BOOL v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null context, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_context_get_identifier";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null context, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_context_get_identifier";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null context, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

void ___ZL28nw_context_start_purge_timerP21NWConcrete_nw_context_block_invoke(uint64_t a1)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  xpc_object_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    uint64_t globals_for_channel = nw_context_get_globals_for_channel(v2);
    nw_report_protocol_enumerator_t v4 = (os_unfair_lock_s *)(globals_for_channel + 16);
    os_unfair_lock_lock((os_unfair_lock_t)(globals_for_channel + 16));
    uint64_t v5 = *(void *)globals_for_channel;
    if (*(void *)globals_for_channel)
    {
      *(void *)os_log_type_t type = 0;
      BOOL v16 = type;
      uint64_t v17 = 0x2000000000;
      uint64_t v18 = 0;
      *(void *)buf = MEMORY[0x1E4F143A8];
      *(void *)&buf[8] = 0x40000000;
      *(void *)&buf[16] = __nw_channel_purge_idle_block_invoke;
      uint64_t v21 = &unk_1E524B4E8;
      id v22 = type;
      nw_dictionary_apply(v5, (uint64_t)buf);
      os_unfair_lock_unlock(v4);
      id v6 = (atomic_uchar *)*((void *)v16 + 3);
      if (v6)
      {
        nw_array_apply(v6, (uint64_t)&__block_literal_global_88206);
        id v7 = (void *)*((void *)v16 + 3);
        if (v7)
        {
          os_release(v7);
          *((void *)v16 + 3) = 0;
        }
      }
      _Block_object_dispose(type, 8);
    }
    else
    {
      os_unfair_lock_unlock(v4);
    }
    goto LABEL_8;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_channel_purge_idle";
  BOOL v9 = (char *)_os_log_send_and_compose_impl();
  type[0] = OS_LOG_TYPE_ERROR;
  char v19 = 0;
  if (__nwlog_fault(v9, type, &v19))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v10 = gLogObj;
      os_log_type_t v11 = type[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, type[0])) {
        goto LABEL_25;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_channel_purge_idle";
      os_log_type_t v12 = "%{public}s called with null context";
      goto LABEL_24;
    }
    if (!v19)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v10 = gLogObj;
      os_log_type_t v11 = type[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, type[0])) {
        goto LABEL_25;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_channel_purge_idle";
      os_log_type_t v12 = "%{public}s called with null context, backtrace limit exceeded";
      goto LABEL_24;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v10 = gLogObj;
    os_log_type_t v11 = type[0];
    BOOL v14 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
    if (backtrace_string)
    {
      if (v14)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_channel_purge_idle";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null context, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_25;
    }
    if (v14)
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_channel_purge_idle";
      os_log_type_t v12 = "%{public}s called with null context, no backtrace";
LABEL_24:
      _os_log_impl(&dword_1830D4000, v10, v11, v12, buf, 0xCu);
    }
  }
LABEL_25:
  if (v9) {
    free(v9);
  }
LABEL_8:
  os_log_type_t v8 = *(NWConcrete_nw_context **)(a1 + 32);

  nw_context_purge_endpoints(v8, 0);
}

BOOL nw_dictionary_apply(uint64_t a1, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v17 = "nw_dictionary_apply";
    nw_report_protocol_enumerator_t v4 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v15 = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (!__nwlog_fault(v4, &v15, &v14)) {
      goto LABEL_45;
    }
    if (v15 == OS_LOG_TYPE_FAULT)
    {
      uint64_t v5 = __nwlog_obj();
      os_log_type_t v6 = v15;
      if (!os_log_type_enabled(v5, v15)) {
        goto LABEL_45;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v17 = "nw_dictionary_apply";
      id v7 = "%{public}s called with null dictionary";
LABEL_44:
      _os_log_impl(&dword_1830D4000, v5, v6, v7, buf, 0xCu);
      goto LABEL_45;
    }
    if (!v14)
    {
      uint64_t v5 = __nwlog_obj();
      os_log_type_t v6 = v15;
      if (os_log_type_enabled(v5, v15))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_dictionary_apply";
        id v7 = "%{public}s called with null dictionary, backtrace limit exceeded";
        goto LABEL_44;
      }
      goto LABEL_45;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v5 = __nwlog_obj();
    os_log_type_t v6 = v15;
    BOOL v9 = os_log_type_enabled(v5, v15);
    if (!backtrace_string)
    {
      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_dictionary_apply";
        id v7 = "%{public}s called with null dictionary, no backtrace";
        goto LABEL_44;
      }
      goto LABEL_45;
    }
    if (!v9) {
      goto LABEL_31;
    }
    *(_DWORD *)buf = 136446466;
    uint64_t v17 = "nw_dictionary_apply";
    __int16 v18 = 2082;
    char v19 = backtrace_string;
    os_log_type_t v10 = "%{public}s called with null dictionary, dumping backtrace:%{public}s";
LABEL_30:
    _os_log_impl(&dword_1830D4000, v5, v6, v10, buf, 0x16u);
    goto LABEL_31;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v17 = "nw_dictionary_apply";
    nw_report_protocol_enumerator_t v4 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v15 = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (!__nwlog_fault(v4, &v15, &v14)) {
      goto LABEL_45;
    }
    if (v15 == OS_LOG_TYPE_FAULT)
    {
      uint64_t v5 = __nwlog_obj();
      os_log_type_t v6 = v15;
      if (!os_log_type_enabled(v5, v15)) {
        goto LABEL_45;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v17 = "nw_dictionary_apply";
      id v7 = "%{public}s called with null applier";
      goto LABEL_44;
    }
    if (!v14)
    {
      uint64_t v5 = __nwlog_obj();
      os_log_type_t v6 = v15;
      if (os_log_type_enabled(v5, v15))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_dictionary_apply";
        id v7 = "%{public}s called with null applier, backtrace limit exceeded";
        goto LABEL_44;
      }
      goto LABEL_45;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v5 = __nwlog_obj();
    os_log_type_t v6 = v15;
    BOOL v11 = os_log_type_enabled(v5, v15);
    if (!backtrace_string)
    {
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_dictionary_apply";
        id v7 = "%{public}s called with null applier, no backtrace";
        goto LABEL_44;
      }
      goto LABEL_45;
    }
    if (!v11) {
      goto LABEL_31;
    }
    *(_DWORD *)buf = 136446466;
    uint64_t v17 = "nw_dictionary_apply";
    __int16 v18 = 2082;
    char v19 = backtrace_string;
    os_log_type_t v10 = "%{public}s called with null applier, dumping backtrace:%{public}s";
    goto LABEL_30;
  }
  xpc_object_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    applier[0] = MEMORY[0x1E4F143A8];
    applier[1] = 0x40000000;
    applier[2] = __nw_dictionary_apply_block_invoke;
    applier[3] = &unk_1E5242C68;
    void applier[4] = a2;
    applier[5] = a1;
    return xpc_dictionary_apply(v2, applier);
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v17 = "nw_dictionary_apply";
  nw_report_protocol_enumerator_t v4 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t v15 = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (!__nwlog_fault(v4, &v15, &v14)) {
    goto LABEL_45;
  }
  if (v15 != OS_LOG_TYPE_FAULT)
  {
    if (!v14)
    {
      uint64_t v5 = __nwlog_obj();
      os_log_type_t v6 = v15;
      if (os_log_type_enabled(v5, v15))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_dictionary_apply";
        id v7 = "%{public}s called with null dictionary->xpc_object, backtrace limit exceeded";
        goto LABEL_44;
      }
      goto LABEL_45;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v5 = __nwlog_obj();
    os_log_type_t v6 = v15;
    BOOL v12 = os_log_type_enabled(v5, v15);
    if (!backtrace_string)
    {
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_dictionary_apply";
        id v7 = "%{public}s called with null dictionary->xpc_object, no backtrace";
        goto LABEL_44;
      }
      goto LABEL_45;
    }
    if (v12)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v17 = "nw_dictionary_apply";
      __int16 v18 = 2082;
      char v19 = backtrace_string;
      os_log_type_t v10 = "%{public}s called with null dictionary->xpc_object, dumping backtrace:%{public}s";
      goto LABEL_30;
    }
LABEL_31:
    free(backtrace_string);
    goto LABEL_45;
  }
  uint64_t v5 = __nwlog_obj();
  os_log_type_t v6 = v15;
  if (os_log_type_enabled(v5, v15))
  {
    *(_DWORD *)buf = 136446210;
    uint64_t v17 = "nw_dictionary_apply";
    id v7 = "%{public}s called with null dictionary->xpc_object";
    goto LABEL_44;
  }
LABEL_45:
  if (v4) {
    free(v4);
  }
  return 0;
}

void nw_path_parameters_copy_verbose_description(NWConcrete_nw_path_parameters *a1, char *a2)
{
  out[7] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1;
  uint64_t v476 = 0;
  v477 = &v476;
  uint64_t v478 = 0x2020000000;
  v479 = a2;
  uint64_t v472 = 0;
  v473 = &v472;
  uint64_t v474 = 0x2020000000;
  uint64_t v475 = 512;
  uint64_t v468 = 0;
  v469 = &v468;
  uint64_t v470 = 0x2020000000;
  char v471 = 0;
  attributed_bundle = v3->attributed_bundle;
  if (attributed_bundle)
  {
    uint64_t v5 = attributed_bundle;
    os_log_type_t v6 = (const char *)*((void *)v5 + 2);

    if (v6)
    {
      id v7 = (char *)v477[3];
      size_t v8 = v473[3];
      if (v7 == a2) {
        BOOL v9 = "";
      }
      else {
        BOOL v9 = ", ";
      }
      unsigned int v10 = nw_context_get_privacy_level(v3->attributed_bundle) - 1;
      if (v10 > 3) {
        BOOL v11 = "unknown";
      }
      else {
        BOOL v11 = off_1E523AA88[v10];
      }
      int v12 = snprintf(v7, v8, "%scontext: %s (%s)", v9, v6, v11);
      char v13 = v473;
      unint64_t v14 = v473[3];
      BOOL v15 = v14 > v12;
      unint64_t v16 = v14 - v12;
      if (v15)
      {
        if (v12 >= 1)
        {
          v477[3] += v12;
          v13[3] = v16;
        }
      }
      else
      {
        *(unsigned char *)v477[3] = 0;
        *((unsigned char *)v469 + 24) = 1;
      }
    }
  }
  if (!*((unsigned char *)v469 + 24))
  {
    memset(out, 0, 37);
    uuid_unparse(v3->process_path_value.proc_uuid, (char *)out);
    uint64_t v17 = (char *)v477[3];
    if (v17 == a2) {
      __int16 v18 = "";
    }
    else {
      __int16 v18 = ", ";
    }
    int v19 = snprintf(v17, v473[3], "%sproc: %s", v18, (const char *)out);
    uint64_t v20 = v473;
    unint64_t v21 = v473[3];
    BOOL v15 = v21 > v19;
    unint64_t v22 = v21 - v19;
    if (v15)
    {
      if (v19 >= 1)
      {
        v477[3] += v19;
        v20[3] = v22;
      }
    }
    else
    {
      *(unsigned char *)v477[3] = 0;
      *((unsigned char *)v469 + 24) = 1;
    }
    if (!*((unsigned char *)v469 + 24) && uuid_compare(v3->process_path_value.proc_uuid, v3->process_path_value.e_proc_uuid))
    {
      memset(out, 0, 37);
      uuid_unparse(v3->process_path_value.e_proc_uuid, (char *)out);
      uint64_t v29 = (char *)v477[3];
      if (v29 == a2) {
        os_log_type_t v30 = "";
      }
      else {
        os_log_type_t v30 = ", ";
      }
      int v31 = snprintf(v29, v473[3], "%seffective proc: %s", v30, (const char *)out);
      Class v32 = v473;
      unint64_t v33 = v473[3];
      BOOL v15 = v33 > v31;
      unint64_t v34 = v33 - v31;
      if (v15)
      {
        if (v31 >= 1)
        {
          v477[3] += v31;
          v32[3] = v34;
        }
      }
      else
      {
        *(unsigned char *)v477[3] = 0;
        *((unsigned char *)v469 + 24) = 1;
      }
    }
  }
  if (!*((unsigned char *)v469 + 24) && !uuid_is_null(v3->process_path_value.persona_id))
  {
    memset(out, 0, 37);
    uuid_unparse(v3->process_path_value.persona_id, (char *)out);
    uint64_t v23 = (char *)v477[3];
    __int16 v24 = ", ";
    if (v23 == a2) {
      __int16 v24 = "";
    }
    int v25 = snprintf(v23, v473[3], "%spersona: %s", v24, (const char *)out);
    uint64_t v26 = v473;
    unint64_t v27 = v473[3];
    BOOL v15 = v27 > v25;
    unint64_t v28 = v27 - v25;
    if (v15)
    {
      if (v25 >= 1)
      {
        v477[3] += v25;
        v26[3] = v28;
      }
    }
    else
    {
      *(unsigned char *)v477[3] = 0;
      *((unsigned char *)v469 + 24) = 1;
    }
  }
  if (!*((unsigned char *)v469 + 24))
  {
    delegated_uint pid = v3->process_path_value.delegated_upid;
    if (delegated_upid)
    {
      os_log_type_t v43 = (char *)v477[3];
      nw_endpoint_t v44 = ", ";
      if (v43 == a2) {
        nw_endpoint_t v44 = "";
      }
      int v45 = snprintf(v43, v473[3], "%sdelegated upid: %llu", v44, delegated_upid);
      char v46 = v473;
      unint64_t v47 = v473[3];
      BOOL v15 = v47 > v45;
      unint64_t v48 = v47 - v45;
      if (v15)
      {
        if (v45 >= 1)
        {
          v477[3] += v45;
          v46[3] = v48;
        }
      }
      else
      {
        *(unsigned char *)v477[3] = 0;
        *((unsigned char *)v469 + 24) = 1;
      }
    }
  }
  if (!*((unsigned char *)v469 + 24))
  {
    unsigned int traffic_class = v3->path_value.traffic_class;
    if (traffic_class)
    {
      __int16 v50 = (char *)v477[3];
      int v51 = ", ";
      if (v50 == a2) {
        int v51 = "";
      }
      int v52 = snprintf(v50, v473[3], "%straffic class: %u", v51, traffic_class);
      __int16 v53 = v473;
      unint64_t v54 = v473[3];
      BOOL v15 = v54 > v52;
      unint64_t v55 = v54 - v52;
      if (v15)
      {
        if (v52 >= 1)
        {
          v477[3] += v52;
          v53[3] = v55;
        }
      }
      else
      {
        *(unsigned char *)v477[3] = 0;
        *((unsigned char *)v469 + 24) = 1;
      }
    }
  }
  if (!*((unsigned char *)v469 + 24))
  {
    int pid = v3->process_path_value.pid;
    if (pid != getpid())
    {
      os_log_type_t v36 = (char *)v477[3];
      BOOL v37 = "";
      if (v36 != a2) {
        BOOL v37 = ", ";
      }
      int v38 = snprintf(v36, v473[3], "%spid: %d", v37, v3->process_path_value.pid);
      BOOL v39 = v473;
      unint64_t v40 = v473[3];
      BOOL v15 = v40 > v38;
      unint64_t v41 = v40 - v38;
      if (v15)
      {
        if (v38 >= 1)
        {
          v477[3] += v38;
          v39[3] = v41;
        }
      }
      else
      {
        *(unsigned char *)v477[3] = 0;
        *((unsigned char *)v469 + 24) = 1;
      }
    }
  }
  if (!*((unsigned char *)v469 + 24))
  {
    unsigned int uid = v3->process_path_value.uid;
    if (uid != getuid())
    {
      int v57 = (char *)v477[3];
      uint64_t v58 = "";
      if (v57 != a2) {
        uint64_t v58 = ", ";
      }
      int v59 = snprintf(v57, v473[3], "%suid: %u", v58, v3->process_path_value.uid);
      nw_endpoint_t v60 = v473;
      unint64_t v61 = v473[3];
      BOOL v15 = v61 > v59;
      unint64_t v62 = v61 - v59;
      if (v15)
      {
        if (v59 >= 1)
        {
          v477[3] += v59;
          v60[3] = v62;
        }
      }
      else
      {
        *(unsigned char *)v477[3] = 0;
        *((unsigned char *)v469 + 24) = 1;
      }
    }
  }
  if (!*((unsigned char *)v469 + 24))
  {
    required_interface_os_log_type_t type = v3->path_value.required_interface_type;
    if (required_interface_type)
    {
      if (required_interface_type > 4) {
        nw_endpoint_t v70 = "unknown";
      }
      else {
        nw_endpoint_t v70 = off_1E524BC28[required_interface_type];
      }
      BOOL v95 = (char *)v477[3];
      os_log_type_t v96 = ", ";
      if (v95 == a2) {
        os_log_type_t v96 = "";
      }
      int v97 = snprintf(v95, v473[3], "%srequired interface type: %s", v96, v70);
      BOOL v98 = v473;
      unint64_t v99 = v473[3];
      BOOL v15 = v99 > v97;
      unint64_t v100 = v99 - v97;
      if (v15)
      {
        if (v97 >= 1)
        {
          v477[3] += v97;
          v98[3] = v100;
        }
      }
      else
      {
        *(unsigned char *)v477[3] = 0;
        *((unsigned char *)v469 + 24) = 1;
      }
    }
  }
  if (!*((unsigned char *)v469 + 24))
  {
    required_interface_subos_log_type_t type = v3->path_value.required_interface_subtype;
    if (required_interface_subtype <= 1001)
    {
      if (!required_interface_subtype) {
        goto LABEL_72;
      }
      if (required_interface_subtype == 1001)
      {
        os_log_type_t v72 = "wifi_infrastructure";
        goto LABEL_411;
      }
    }
    else
    {
      switch(required_interface_subtype)
      {
        case 1002:
          os_log_type_t v72 = "wifi_awdl";
          goto LABEL_411;
        case 4001:
          os_log_type_t v72 = "coprocessor";
          goto LABEL_411;
        case 5001:
          os_log_type_t v72 = "companion";
LABEL_411:
          __int16 v301 = (char *)v477[3];
          v302 = ", ";
          if (v301 == a2) {
            v302 = "";
          }
          int v303 = snprintf(v301, v473[3], "%srequired interface subtype: %s", v302, v72);
          id v304 = v473;
          unint64_t v305 = v473[3];
          BOOL v15 = v305 > v303;
          unint64_t v306 = v305 - v303;
          if (v15)
          {
            if (v303 >= 1)
            {
              v477[3] += v303;
              v304[3] = v306;
            }
          }
          else
          {
            *(unsigned char *)v477[3] = 0;
            *((unsigned char *)v469 + 24) = 1;
          }
          goto LABEL_72;
      }
    }
    os_log_type_t v72 = "unknown";
    goto LABEL_411;
  }
LABEL_72:
  if (!*((unsigned char *)v469 + 24))
  {
    next_hop_required_interface_os_log_type_t type = v3->path_value.next_hop_required_interface_type;
    if (next_hop_required_interface_type)
    {
      if (next_hop_required_interface_type > 4) {
        id v74 = "unknown";
      }
      else {
        id v74 = off_1E524BC28[next_hop_required_interface_type];
      }
      id v101 = (char *)v477[3];
      os_log_type_t v102 = ", ";
      if (v101 == a2) {
        os_log_type_t v102 = "";
      }
      int v103 = snprintf(v101, v473[3], "%snext hop interface type: %s", v102, v74);
      BOOL v104 = v473;
      unint64_t v105 = v473[3];
      BOOL v15 = v105 > v103;
      unint64_t v106 = v105 - v103;
      if (v15)
      {
        if (v103 >= 1)
        {
          v477[3] += v103;
          v104[3] = v106;
        }
      }
      else
      {
        *(unsigned char *)v477[3] = 0;
        *((unsigned char *)v469 + 24) = 1;
      }
    }
  }
  if (!*((unsigned char *)v469 + 24))
  {
    next_hop_required_interface_subos_log_type_t type = v3->path_value.next_hop_required_interface_subtype;
    if (next_hop_required_interface_subtype <= 1001)
    {
      if (!next_hop_required_interface_subtype) {
        goto LABEL_74;
      }
      if (next_hop_required_interface_subtype == 1001)
      {
        uint64_t v76 = "wifi_infrastructure";
        goto LABEL_418;
      }
    }
    else
    {
      switch(next_hop_required_interface_subtype)
      {
        case 1002:
          uint64_t v76 = "wifi_awdl";
          goto LABEL_418;
        case 4001:
          uint64_t v76 = "coprocessor";
          goto LABEL_418;
        case 5001:
          uint64_t v76 = "companion";
LABEL_418:
          long long v307 = (char *)v477[3];
          uint64_t v308 = ", ";
          if (v307 == a2) {
            uint64_t v308 = "";
          }
          int v309 = snprintf(v307, v473[3], "%snext hop interface subtype: %s", v308, v76);
          v310 = v473;
          unint64_t v311 = v473[3];
          BOOL v15 = v311 > v309;
          unint64_t v312 = v311 - v309;
          if (v15)
          {
            if (v309 >= 1)
            {
              v477[3] += v309;
              v310[3] = v312;
            }
          }
          else
          {
            *(unsigned char *)v477[3] = 0;
            *((unsigned char *)v469 + 24) = 1;
          }
          goto LABEL_74;
      }
    }
    uint64_t v76 = "unknown";
    goto LABEL_418;
  }
LABEL_74:
  if (!*((unsigned char *)v469 + 24))
  {
    int v77 = *(_DWORD *)((char *)&v3->path_value + 31);
    switch(v77)
    {
      case 0:
        break;
      case 1:
        os_log_type_t v78 = "handover";
        goto LABEL_389;
      case 2:
        os_log_type_t v78 = "interactive";
        goto LABEL_389;
      case 3:
        os_log_type_t v78 = "aggregate";
        goto LABEL_389;
      default:
        os_log_type_t v78 = "?";
LABEL_389:
        if (v77 == 100) {
          os_log_type_t v78 = "target-based";
        }
        if (v77 == 101) {
          v292 = "pure handover";
        }
        else {
          v292 = v78;
        }
        __int16 v293 = (char *)v477[3];
        v294 = ", ";
        if (v293 == a2) {
          v294 = "";
        }
        int v295 = snprintf(v293, v473[3], "%smultipath service: %s", v294, v292);
        v296 = v473;
        unint64_t v297 = v473[3];
        BOOL v15 = v297 > v295;
        unint64_t v298 = v297 - v295;
        if (v15)
        {
          if (v295 >= 1)
          {
            v477[3] += v295;
            v296[3] = v298;
          }
        }
        else
        {
          *(unsigned char *)v477[3] = 0;
          *((unsigned char *)v469 + 24) = 1;
        }
        break;
    }
  }
  if (!*((unsigned char *)v469 + 24))
  {
    int companion_preference = v3->path_value.companion_preference;
    if (companion_preference)
    {
      os_log_type_t v80 = (char *)v477[3];
      os_log_type_t v81 = ", ";
      if (v80 == a2) {
        os_log_type_t v81 = "";
      }
      if (companion_preference == 1) {
        BOOL v82 = "prefer";
      }
      else {
        BOOL v82 = "avoid";
      }
      int v83 = snprintf(v80, v473[3], "%scompanion preference: %s", v81, v82);
      int v84 = v473;
      unint64_t v85 = v473[3];
      BOOL v15 = v85 > v83;
      unint64_t v86 = v85 - v83;
      if (v15)
      {
        if (v83 >= 1)
        {
          v477[3] += v83;
          v84[3] = v86;
        }
      }
      else
      {
        *(unsigned char *)v477[3] = 0;
        *((unsigned char *)v469 + 24) = 1;
      }
    }
  }
  if (!*((unsigned char *)v469 + 24))
  {
    int companion_link_upgrade_preference = v3->path_value.companion_link_upgrade_preference;
    if (companion_link_upgrade_preference)
    {
      nw_endpoint_t v88 = (char *)v477[3];
      os_log_type_t v89 = ", ";
      if (v88 == a2) {
        os_log_type_t v89 = "";
      }
      if (companion_link_upgrade_preference == 1) {
        __int16 v90 = "bt";
      }
      else {
        __int16 v90 = "wifi";
      }
      int v91 = snprintf(v88, v473[3], "%scompanion link upgrade preference: %s", v89, v90);
      id v92 = v473;
      unint64_t v93 = v473[3];
      BOOL v15 = v93 > v91;
      unint64_t v94 = v93 - v91;
      if (v15)
      {
        if (v91 >= 1)
        {
          v477[3] += v91;
          v92[3] = v94;
        }
      }
      else
      {
        *(unsigned char *)v477[3] = 0;
        *((unsigned char *)v469 + 24) = 1;
      }
    }
  }
  if (!*((unsigned char *)v469 + 24) && (*((_WORD *)&v3->path_value + 14) & 1) != 0)
  {
    unint64_t v63 = (char *)v477[3];
    id v64 = ", ";
    if (v63 == a2) {
      id v64 = "";
    }
    int v65 = snprintf(v63, v473[3], "%sprohibit expensive", v64);
    BOOL v66 = v473;
    unint64_t v67 = v473[3];
    BOOL v15 = v67 > v65;
    unint64_t v68 = v67 - v65;
    if (v15)
    {
      if (v65 >= 1)
      {
        v477[3] += v65;
        v66[3] = v68;
      }
    }
    else
    {
      *(unsigned char *)v477[3] = 0;
      *((unsigned char *)v469 + 24) = 1;
    }
  }
  if (!*((unsigned char *)v469 + 24) && (*((_WORD *)&v3->path_value + 14) & 2) != 0)
  {
    v107 = (char *)v477[3];
    os_log_type_t v108 = ", ";
    if (v107 == a2) {
      os_log_type_t v108 = "";
    }
    int v109 = snprintf(v107, v473[3], "%sprohibit constrained", v108);
    BOOL v110 = v473;
    unint64_t v111 = v473[3];
    BOOL v15 = v111 > v109;
    unint64_t v112 = v111 - v109;
    if (v15)
    {
      if (v109 >= 1)
      {
        v477[3] += v109;
        v110[3] = v112;
      }
    }
    else
    {
      *(unsigned char *)v477[3] = 0;
      *((unsigned char *)v469 + 24) = 1;
    }
  }
  if (!*((unsigned char *)v469 + 24) && (*((_WORD *)&v3->path_value + 14) & 4) != 0)
  {
    BOOL v113 = (char *)v477[3];
    uint64_t v114 = ", ";
    if (v113 == a2) {
      uint64_t v114 = "";
    }
    int v115 = snprintf(v113, v473[3], "%sallow ultra constrained", v114);
    nw_endpoint_t v116 = v473;
    unint64_t v117 = v473[3];
    BOOL v15 = v117 > v115;
    unint64_t v118 = v117 - v115;
    if (v15)
    {
      if (v115 >= 1)
      {
        v477[3] += v115;
        v116[3] = v118;
      }
    }
    else
    {
      *(unsigned char *)v477[3] = 0;
      *((unsigned char *)v469 + 24) = 1;
    }
  }
  if (!*((unsigned char *)v469 + 24) && (*((_WORD *)&v3->path_value + 14) & 8) != 0)
  {
    BOOL v119 = (char *)v477[3];
    id v120 = ", ";
    if (v119 == a2) {
      id v120 = "";
    }
    int v121 = snprintf(v119, v473[3], "%sprohibit roaming", v120);
    nw_endpoint_t v122 = v473;
    unint64_t v123 = v473[3];
    BOOL v15 = v123 > v121;
    unint64_t v124 = v123 - v121;
    if (v15)
    {
      if (v121 >= 1)
      {
        v477[3] += v121;
        v122[3] = v124;
      }
    }
    else
    {
      *(unsigned char *)v477[3] = 0;
      *((unsigned char *)v469 + 24) = 1;
    }
  }
  if (!*((unsigned char *)v469 + 24) && (v3->joinable_path_value.multipath_service & 2) != 0)
  {
    os_log_type_t v125 = (char *)v477[3];
    os_log_type_t v126 = ", ";
    if (v125 == a2) {
      os_log_type_t v126 = "";
    }
    int v127 = snprintf(v125, v473[3], "%sno proxy", v126);
    os_log_type_t v128 = v473;
    unint64_t v129 = v473[3];
    BOOL v15 = v129 > v127;
    unint64_t v130 = v129 - v127;
    if (v15)
    {
      if (v127 >= 1)
      {
        v477[3] += v127;
        v128[3] = v130;
      }
    }
    else
    {
      *(unsigned char *)v477[3] = 0;
      *((unsigned char *)v469 + 24) = 1;
    }
  }
  if (!*((unsigned char *)v469 + 24) && (v3->joinable_path_value.multipath_service & 4) != 0)
  {
    BOOL v131 = (char *)v477[3];
    os_log_type_t v132 = ", ";
    if (v131 == a2) {
      os_log_type_t v132 = "";
    }
    int v133 = snprintf(v131, v473[3], "%sno transport", v132);
    v134 = v473;
    unint64_t v135 = v473[3];
    BOOL v15 = v135 > v133;
    unint64_t v136 = v135 - v133;
    if (v15)
    {
      if (v133 >= 1)
      {
        v477[3] += v133;
        v134[3] = v136;
      }
    }
    else
    {
      *(unsigned char *)v477[3] = 0;
      *((unsigned char *)v469 + 24) = 1;
    }
  }
  if (!*((unsigned char *)v469 + 24) && (v3->joinable_path_value.multipath_service & 8) != 0)
  {
    __int16 v137 = (char *)v477[3];
    uint64_t v138 = ", ";
    if (v137 == a2) {
      uint64_t v138 = "";
    }
    int v139 = snprintf(v137, v473[3], "%suse awdl", v138);
    uint64_t v140 = v473;
    unint64_t v141 = v473[3];
    BOOL v15 = v141 > v139;
    unint64_t v142 = v141 - v139;
    if (v15)
    {
      if (v139 >= 1)
      {
        v477[3] += v139;
        v140[3] = v142;
      }
    }
    else
    {
      *(unsigned char *)v477[3] = 0;
      *((unsigned char *)v469 + 24) = 1;
    }
  }
  if (!*((unsigned char *)v469 + 24) && (v3->joinable_path_value.multipath_service & 0x10) != 0)
  {
    unint64_t v143 = (char *)v477[3];
    nw_endpoint_t v144 = ", ";
    if (v143 == a2) {
      nw_endpoint_t v144 = "";
    }
    int v145 = snprintf(v143, v473[3], "%suse p2p", v144);
    unsigned int v146 = v473;
    unint64_t v147 = v473[3];
    BOOL v15 = v147 > v145;
    unint64_t v148 = v147 - v145;
    if (v15)
    {
      if (v145 >= 1)
      {
        v477[3] += v145;
        v146[3] = v148;
      }
    }
    else
    {
      *(unsigned char *)v477[3] = 0;
      *((unsigned char *)v469 + 24) = 1;
    }
  }
  if (!*((unsigned char *)v469 + 24) && (v3->joinable_path_value.multipath_service & 0x20) != 0)
  {
    uint64_t v149 = (char *)v477[3];
    char v150 = ", ";
    if (v149 == a2) {
      char v150 = "";
    }
    int v151 = snprintf(v149, v473[3], "%sprohibit fallback", v150);
    id v152 = v473;
    unint64_t v153 = v473[3];
    BOOL v15 = v153 > v151;
    unint64_t v154 = v153 - v151;
    if (v15)
    {
      if (v151 >= 1)
      {
        v477[3] += v151;
        v152[3] = v154;
      }
    }
    else
    {
      *(unsigned char *)v477[3] = 0;
      *((unsigned char *)v469 + 24) = 1;
    }
  }
  if (!*((unsigned char *)v469 + 24) && (v3->joinable_path_value.multipath_service & 0x40) != 0)
  {
    uint64_t v155 = (char *)v477[3];
    __int16 v156 = ", ";
    if (v155 == a2) {
      __int16 v156 = "";
    }
    int v157 = snprintf(v155, v473[3], "%sprohibit cellular fallback", v156);
    __int16 v158 = v473;
    unint64_t v159 = v473[3];
    BOOL v15 = v159 > v157;
    unint64_t v160 = v159 - v157;
    if (v15)
    {
      if (v157 >= 1)
      {
        v477[3] += v157;
        v158[3] = v160;
      }
    }
    else
    {
      *(unsigned char *)v477[3] = 0;
      *((unsigned char *)v469 + 24) = 1;
    }
  }
  if (!*((unsigned char *)v469 + 24) && (v3->joinable_path_value.multipath_service & 0x80) != 0)
  {
    v161 = (char *)v477[3];
    __int16 v162 = ", ";
    if (v161 == a2) {
      __int16 v162 = "";
    }
    int v163 = snprintf(v161, v473[3], "%sno wake from sleep", v162);
    __int16 v164 = v473;
    unint64_t v165 = v473[3];
    BOOL v15 = v165 > v163;
    unint64_t v166 = v165 - v163;
    if (v15)
    {
      if (v163 >= 1)
      {
        v477[3] += v163;
        v164[3] = v166;
      }
    }
    else
    {
      *(unsigned char *)v477[3] = 0;
      *((unsigned char *)v469 + 24) = 1;
    }
  }
  if (!*((unsigned char *)v469 + 24) && (v3->joinable_path_value.multipath_service & 1) != 0)
  {
    id v167 = (char *)v477[3];
    uint64_t v168 = ", ";
    if (v167 == a2) {
      uint64_t v168 = "";
    }
    int v169 = snprintf(v167, v473[3], "%sdiscretionary", v168);
    v170 = v473;
    unint64_t v171 = v473[3];
    BOOL v15 = v171 > v169;
    unint64_t v172 = v171 - v169;
    if (v15)
    {
      if (v169 >= 1)
      {
        v477[3] += v169;
        v170[3] = v172;
      }
    }
    else
    {
      *(unsigned char *)v477[3] = 0;
      *((unsigned char *)v469 + 24) = 1;
    }
  }
  if (!*((unsigned char *)v469 + 24) && (*((_WORD *)&v3->path_value + 14) & 0x10) != 0)
  {
    char v173 = (char *)v477[3];
    v174 = ", ";
    if (v173 == a2) {
      v174 = "";
    }
    int v175 = snprintf(v173, v473[3], "%sallow socket access", v174);
    nw_endpoint_t v176 = v473;
    unint64_t v177 = v473[3];
    BOOL v15 = v177 > v175;
    unint64_t v178 = v177 - v175;
    if (v15)
    {
      if (v175 >= 1)
      {
        v477[3] += v175;
        v176[3] = v178;
      }
    }
    else
    {
      *(unsigned char *)v477[3] = 0;
      *((unsigned char *)v469 + 24) = 1;
    }
  }
  if (!*((unsigned char *)v469 + 24) && (*((_WORD *)&v3->path_value + 14) & 0x20) != 0)
  {
    v179 = (char *)v477[3];
    id v180 = ", ";
    if (v179 == a2) {
      id v180 = "";
    }
    int v181 = snprintf(v179, v473[3], "%sonly primary requires type", v180);
    id v182 = v473;
    unint64_t v183 = v473[3];
    BOOL v15 = v183 > v181;
    unint64_t v184 = v183 - v181;
    if (v15)
    {
      if (v181 >= 1)
      {
        v477[3] += v181;
        v182[3] = v184;
      }
    }
    else
    {
      *(unsigned char *)v477[3] = 0;
      *((unsigned char *)v469 + 24) = 1;
    }
  }
  if (!*((unsigned char *)v469 + 24) && (v3->joinable_path_value.multipath_service & 0x100) != 0)
  {
    __int16 v185 = (char *)v477[3];
    BOOL v186 = ", ";
    if (v185 == a2) {
      BOOL v186 = "";
    }
    int v187 = snprintf(v185, v473[3], "%sprefer no proxy", v186);
    v188 = v473;
    unint64_t v189 = v473[3];
    BOOL v15 = v189 > v187;
    unint64_t v190 = v189 - v187;
    if (v15)
    {
      if (v187 >= 1)
      {
        v477[3] += v187;
        v188[3] = v190;
      }
    }
    else
    {
      *(unsigned char *)v477[3] = 0;
      *((unsigned char *)v469 + 24) = 1;
    }
  }
  if (!*((unsigned char *)v469 + 24) && (v3->joinable_path_value.multipath_service & 0x200) != 0)
  {
    v191 = (char *)v477[3];
    nw_endpoint_t v192 = ", ";
    if (v191 == a2) {
      nw_endpoint_t v192 = "";
    }
    int v193 = snprintf(v191, v473[3], "%sno proxy path selection", v192);
    v194 = v473;
    unint64_t v195 = v473[3];
    BOOL v15 = v195 > v193;
    unint64_t v196 = v195 - v193;
    if (v15)
    {
      if (v193 >= 1)
      {
        v477[3] += v193;
        v194[3] = v196;
      }
    }
    else
    {
      *(unsigned char *)v477[3] = 0;
      *((unsigned char *)v469 + 24) = 1;
    }
  }
  if (!*((unsigned char *)v469 + 24) && (*((_WORD *)&v3->path_value + 14) & 0x40) != 0)
  {
    v197 = (char *)v477[3];
    v198 = ", ";
    if (v197 == a2) {
      v198 = "";
    }
    int v199 = snprintf(v197, v473[3], "%sproxy fail closed", v198);
    char v200 = v473;
    unint64_t v201 = v473[3];
    BOOL v15 = v201 > v199;
    unint64_t v202 = v201 - v199;
    if (v15)
    {
      if (v199 >= 1)
      {
        v477[3] += v199;
        v200[3] = v202;
      }
    }
    else
    {
      *(unsigned char *)v477[3] = 0;
      *((unsigned char *)v469 + 24) = 1;
    }
  }
  if (!*((unsigned char *)v469 + 24) && (v3->joinable_path_value.multipath_service & 0x400) != 0)
  {
    v203 = (char *)v477[3];
    char v204 = ", ";
    if (v203 == a2) {
      char v204 = "";
    }
    int v205 = snprintf(v203, v473[3], "%sproxy fail closed for unreachable", v204);
    v206 = v473;
    unint64_t v207 = v473[3];
    BOOL v15 = v207 > v205;
    unint64_t v208 = v207 - v205;
    if (v15)
    {
      if (v205 >= 1)
      {
        v477[3] += v205;
        v206[3] = v208;
      }
    }
    else
    {
      *(unsigned char *)v477[3] = 0;
      *((unsigned char *)v469 + 24) = 1;
    }
  }
  if (!*((unsigned char *)v469 + 24) && (*((_WORD *)&v3->path_value + 14) & 0x80) != 0)
  {
    id v209 = (char *)v477[3];
    char v210 = ", ";
    if (v209 == a2) {
      char v210 = "";
    }
    int v211 = snprintf(v209, v473[3], "%sprohibit privacy proxy", v210);
    v212 = v473;
    unint64_t v213 = v473[3];
    BOOL v15 = v213 > v211;
    unint64_t v214 = v213 - v211;
    if (v15)
    {
      if (v211 >= 1)
      {
        v477[3] += v211;
        v212[3] = v214;
      }
    }
    else
    {
      *(unsigned char *)v477[3] = 0;
      *((unsigned char *)v469 + 24) = 1;
    }
  }
  if (!*((unsigned char *)v469 + 24) && (v3->joinable_path_value.multipath_service & 0x4000) != 0)
  {
    v215 = (char *)v477[3];
    v216 = ", ";
    if (v215 == a2) {
      v216 = "";
    }
    int v217 = snprintf(v215, v473[3], "%sknown tracker", v216);
    v218 = v473;
    unint64_t v219 = v473[3];
    BOOL v15 = v219 > v217;
    unint64_t v220 = v219 - v217;
    if (v15)
    {
      if (v217 >= 1)
      {
        v477[3] += v217;
        v218[3] = v220;
      }
    }
    else
    {
      *(unsigned char *)v477[3] = 0;
      *((unsigned char *)v469 + 24) = 1;
    }
  }
  if (!*((unsigned char *)v469 + 24) && (v3->joinable_path_value.multipath_service & 0x8000) != 0)
  {
    os_log_type_t v221 = (char *)v477[3];
    v222 = ", ";
    if (v221 == a2) {
      v222 = "";
    }
    int v223 = snprintf(v221, v473[3], "%sthird party web content", v222);
    BOOL v224 = v473;
    unint64_t v225 = v473[3];
    BOOL v15 = v225 > v223;
    unint64_t v226 = v225 - v223;
    if (v15)
    {
      if (v223 >= 1)
      {
        v477[3] += v223;
        v224[3] = v226;
      }
    }
    else
    {
      *(unsigned char *)v477[3] = 0;
      *((unsigned char *)v469 + 24) = 1;
    }
  }
  if (!*((unsigned char *)v469 + 24)
    && ((LOWORD(v3->joinable_path_value.multipath_service) | (BYTE2(v3->joinable_path_value.multipath_service) << 16)) & 0x10000) != 0)
  {
    v227 = (char *)v477[3];
    v228 = ", ";
    if (v227 == a2) {
      v228 = "";
    }
    int v229 = snprintf(v227, v473[3], "%sapproved app domain", v228);
    v230 = v473;
    unint64_t v231 = v473[3];
    BOOL v15 = v231 > v229;
    unint64_t v232 = v231 - v229;
    if (v15)
    {
      if (v229 >= 1)
      {
        v477[3] += v229;
        v230[3] = v232;
      }
    }
    else
    {
      *(unsigned char *)v477[3] = 0;
      *((unsigned char *)v469 + 24) = 1;
    }
  }
  if (!*((unsigned char *)v469 + 24)
    && ((LOWORD(v3->joinable_path_value.multipath_service) | (BYTE2(v3->joinable_path_value.multipath_service) << 16)) & 0x20000) != 0)
  {
    id v233 = (char *)v477[3];
    id v234 = ", ";
    if (v233 == a2) {
      id v234 = "";
    }
    int v235 = snprintf(v233, v473[3], "%senhanced privacy", v234);
    v236 = v473;
    unint64_t v237 = v473[3];
    BOOL v15 = v237 > v235;
    unint64_t v238 = v237 - v235;
    if (v15)
    {
      if (v235 >= 1)
      {
        v477[3] += v235;
        v236[3] = v238;
      }
    }
    else
    {
      *(unsigned char *)v477[3] = 0;
      *((unsigned char *)v469 + 24) = 1;
    }
  }
  if (!*((unsigned char *)v469 + 24)
    && ((LOWORD(v3->joinable_path_value.multipath_service) | (BYTE2(v3->joinable_path_value.multipath_service) << 16)) & 0x40000) != 0)
  {
    v239 = (char *)v477[3];
    v240 = ", ";
    if (v239 == a2) {
      v240 = "";
    }
    int v241 = snprintf(v239, v473[3], "%sweb-search", v240);
    BOOL v242 = v473;
    unint64_t v243 = v473[3];
    BOOL v15 = v243 > v241;
    unint64_t v244 = v243 - v241;
    if (v15)
    {
      if (v241 >= 1)
      {
        v477[3] += v241;
        v242[3] = v244;
      }
    }
    else
    {
      *(unsigned char *)v477[3] = 0;
      *((unsigned char *)v469 + 24) = 1;
    }
  }
  if (!*((unsigned char *)v469 + 24)
    && ((LOWORD(v3->joinable_path_value.multipath_service) | (BYTE2(v3->joinable_path_value.multipath_service) << 16)) & 0x80000) != 0)
  {
    v245 = (char *)v477[3];
    v246 = ", ";
    if (v245 == a2) {
      v246 = "";
    }
    int v247 = snprintf(v245, v473[3], "%suse persona", v246);
    v248 = v473;
    unint64_t v249 = v473[3];
    BOOL v15 = v249 > v247;
    unint64_t v250 = v249 - v247;
    if (v15)
    {
      if (v247 >= 1)
      {
        v477[3] += v247;
        v248[3] = v250;
      }
    }
    else
    {
      *(unsigned char *)v477[3] = 0;
      *((unsigned char *)v469 + 24) = 1;
    }
  }
  if (!*((unsigned char *)v469 + 24) && *(void *)&v3->joinable_path_value.fallback_mode)
  {
    v251 = v3->attributed_bundle;
    os_log_type_t v252 = v251;
    if (v251 && (int v253 = *((_DWORD *)v251 + 31), (v253 - 2) >= 2))
    {
      if (v253 == 1)
      {

LABEL_402:
        int v299 = snprintf((char *)v477[3], v473[3], "%saccount id: %s");
        goto LABEL_570;
      }
    }
    else
    {
      if (nwlog_get_sensitive_redacted::onceToken != -1) {
        dispatch_once(&nwlog_get_sensitive_redacted::onceToken, &__block_literal_global_75);
      }
      BOOL v254 = nwlog_get_sensitive_redacted::sensitiveRedacted == 0;

      if (v254) {
        goto LABEL_402;
      }
    }
    LOBYTE(out[1]) = 0;
    out[0] = 0;
    v425 = (char *)v477[3];
    size_t v426 = v473[3];
    size_t v427 = strlen(*(const char **)&v3->joinable_path_value.fallback_mode);
    __nwlog_salted_hash(*(const void **)&v3->joinable_path_value.fallback_mode, v427, (char *)out);
    int v299 = snprintf(v425, v426, "%saccount id: %s");
LABEL_570:
    v428 = v473;
    unint64_t v429 = v473[3];
    BOOL v15 = v429 > v299;
    unint64_t v430 = v429 - v299;
    if (v15)
    {
      if (v299 >= 1)
      {
        v477[3] += v299;
        v428[3] = v430;
      }
    }
    else
    {
      *(unsigned char *)v477[3] = 0;
      *((unsigned char *)v469 + 24) = 1;
    }
  }
  if (!*((unsigned char *)v469 + 24))
  {
    internet_options = v3->internet_options;
    if (internet_options)
    {
      os_log_type_t v256 = (char *)v477[3];
      size_t v257 = v473[3];
      v258 = internet_options;
      uint64_t v480 = 0;
      v481 = &v480;
      uint64_t v482 = 0x2020000000;
      v259 = v258 + 45;
      uint64_t v483 = 0;
      out[0] = MEMORY[0x1E4F143A8];
      out[1] = 3221225472;
      out[2] = __nw_endpoint_get_description_block_invoke;
      out[3] = &unk_1E524B978;
      v260 = v258;
      out[4] = v260;
      out[5] = &v480;
      os_unfair_lock_lock(v259);
      ((void (*)(void *))out[2])(out);
      os_unfair_lock_unlock(v259);
      v261 = (const char *)v481[3];

      _Block_object_dispose(&v480, 8);
      v262 = ", ";
      if (v256 == a2) {
        v262 = "";
      }
      int v263 = snprintf(v256, v257, "%slocal address: %s", v262, v261);
      v264 = v473;
      unint64_t v265 = v473[3];
      BOOL v15 = v265 > v263;
      unint64_t v266 = v265 - v263;
      if (v15)
      {
        if (v263 >= 1)
        {
          v477[3] += v263;
          v264[3] = v266;
        }
      }
      else
      {
        *(unsigned char *)v477[3] = 0;
        *((unsigned char *)v469 + 24) = 1;
      }
    }
  }
  if (!*((unsigned char *)v469 + 24))
  {
    local_nw_endpoint_t address = v3->local_address;
    if (local_address)
    {
      os_log_type_t v268 = (char *)v477[3];
      v269 = ", ";
      if (v268 == a2) {
        v269 = "";
      }
      int v270 = snprintf(v268, v473[3], "%srequired interface: %s(%u)", v269, (const char *)local_address + 104, *((_DWORD *)local_address + 2));
      v271 = v473;
      unint64_t v272 = v473[3];
      BOOL v15 = v272 > v270;
      unint64_t v273 = v272 - v270;
      if (v15)
      {
        if (v270 >= 1)
        {
          v477[3] += v270;
          v271[3] = v273;
        }
      }
      else
      {
        *(unsigned char *)v477[3] = 0;
        *((unsigned char *)v469 + 24) = 1;
      }
    }
  }
  if (!*((unsigned char *)v469 + 24) && v3->account_id)
  {
    v274 = v3->attributed_bundle;
    v275 = v274;
    if (v274 && (int v276 = *((_DWORD *)v274 + 31), (v276 - 2) >= 2))
    {
      if (v276 == 1)
      {

LABEL_405:
        int v300 = snprintf((char *)v477[3], v473[3], "%sattribution context: %s");
        goto LABEL_576;
      }
    }
    else
    {
      if (nwlog_get_sensitive_redacted::onceToken != -1) {
        dispatch_once(&nwlog_get_sensitive_redacted::onceToken, &__block_literal_global_75);
      }
      BOOL v277 = nwlog_get_sensitive_redacted::sensitiveRedacted == 0;

      if (v277) {
        goto LABEL_405;
      }
    }
    LOBYTE(out[1]) = 0;
    out[0] = 0;
    v431 = (char *)v477[3];
    size_t v432 = v473[3];
    size_t v433 = strlen(v3->account_id);
    __nwlog_salted_hash(v3->account_id, v433, (char *)out);
    int v300 = snprintf(v431, v432, "%sattribution context: #%s");
LABEL_576:
    v434 = v473;
    unint64_t v435 = v473[3];
    BOOL v15 = v435 > v300;
    unint64_t v436 = v435 - v300;
    if (v15)
    {
      if (v300 >= 1)
      {
        v477[3] += v300;
        v434[3] = v436;
      }
    }
    else
    {
      *(unsigned char *)v477[3] = 0;
      *((unsigned char *)v469 + 24) = 1;
    }
  }
  if (!*((unsigned char *)v469 + 24))
  {
    attribution_context = v3->attribution_context;
    if (attribution_context)
    {
      v279 = (char *)v477[3];
      v280 = ", ";
      if (v279 == a2) {
        v280 = "";
      }
      int v281 = snprintf(v279, v473[3], "%sattributed bundle: %s", v280, attribution_context);
      v282 = v473;
      unint64_t v283 = v473[3];
      BOOL v15 = v283 > v281;
      unint64_t v284 = v283 - v281;
      if (v15)
      {
        if (v281 >= 1)
        {
          v477[3] += v281;
          v282[3] = v284;
        }
      }
      else
      {
        *(unsigned char *)v477[3] = 0;
        *((unsigned char *)v469 + 24) = 1;
      }
    }
  }
  if (!*((unsigned char *)v469 + 24))
  {
    required_interface = (xpc_object_t *)v3->required_interface;
    if (required_interface)
    {
      if (*required_interface && xpc_array_get_count(*required_interface))
      {
        v286 = (char *)v477[3];
        char v287 = ", ";
        if (v286 == a2) {
          char v287 = "";
        }
        int v288 = snprintf(v286, v473[3], "%sprohibited types: ", v287);
        uint64_t v289 = v473;
        unint64_t v290 = v473[3];
        BOOL v15 = v290 > v288;
        unint64_t v291 = v290 - v288;
        if (v15)
        {
          if (v288 >= 1)
          {
            v477[3] += v288;
            v289[3] = v291;
          }
        }
        else
        {
          *(unsigned char *)v477[3] = 0;
          *((unsigned char *)v469 + 24) = 1;
        }
        v313 = *(void **)v3->required_interface;
        applier[0] = MEMORY[0x1E4F143A8];
        applier[1] = 3221225472;
        applier[2] = ___ZL43nw_path_parameters_copy_verbose_descriptionP29NWConcrete_nw_path_parametersPcm_block_invoke;
        applier[3] = &unk_1E523D340;
        void applier[4] = &v476;
        applier[5] = &v472;
        void applier[6] = &v468;
        xpc_array_apply(v313, applier);
      }
      if (!*((unsigned char *)v469 + 24))
      {
        v320 = (void *)*((void *)v3->required_interface + 1);
        if (v320)
        {
          if (xpc_array_get_count(v320))
          {
            v321 = (char *)v477[3];
            v322 = ", ";
            if (v321 == a2) {
              v322 = "";
            }
            int v323 = snprintf(v321, v473[3], "%sprohibited subtypes: ", v322);
            v324 = v473;
            unint64_t v325 = v473[3];
            BOOL v15 = v325 > v323;
            unint64_t v326 = v325 - v323;
            if (v15)
            {
              if (v323 >= 1)
              {
                v477[3] += v323;
                v324[3] = v326;
              }
            }
            else
            {
              *(unsigned char *)v477[3] = 0;
              *((unsigned char *)v469 + 24) = 1;
            }
            v437 = (void *)*((void *)v3->required_interface + 1);
            v466[0] = MEMORY[0x1E4F143A8];
            v466[1] = 3221225472;
            v466[2] = ___ZL43nw_path_parameters_copy_verbose_descriptionP29NWConcrete_nw_path_parametersPcm_block_invoke_2;
            v466[3] = &unk_1E523D340;
            v466[4] = &v476;
            v466[5] = &v472;
            v466[6] = &v468;
            xpc_array_apply(v437, v466);
          }
        }
      }
      if (!*((unsigned char *)v469 + 24))
      {
        v327 = (void *)*((void *)v3->required_interface + 2);
        if (v327)
        {
          if (xpc_array_get_count(v327))
          {
            v328 = (char *)v477[3];
            v329 = ", ";
            if (v328 == a2) {
              v329 = "";
            }
            int v330 = snprintf(v328, v473[3], "%spreferred subtypes: ", v329);
            v331 = v473;
            unint64_t v332 = v473[3];
            BOOL v15 = v332 > v330;
            unint64_t v333 = v332 - v330;
            if (v15)
            {
              if (v330 >= 1)
              {
                v477[3] += v330;
                v331[3] = v333;
              }
            }
            else
            {
              *(unsigned char *)v477[3] = 0;
              *((unsigned char *)v469 + 24) = 1;
            }
            v438 = (void *)*((void *)v3->required_interface + 2);
            v465[0] = MEMORY[0x1E4F143A8];
            v465[1] = 3221225472;
            v465[2] = ___ZL43nw_path_parameters_copy_verbose_descriptionP29NWConcrete_nw_path_parametersPcm_block_invoke_3;
            v465[3] = &unk_1E523D340;
            v465[4] = &v476;
            v465[5] = &v472;
            v465[6] = &v468;
            xpc_array_apply(v438, v465);
          }
        }
      }
      if (!*((unsigned char *)v469 + 24))
      {
        v334 = (void *)*((void *)v3->required_interface + 3);
        if (v334)
        {
          if (xpc_array_get_count(v334))
          {
            v335 = (char *)v477[3];
            v336 = ", ";
            if (v335 == a2) {
              v336 = "";
            }
            int v337 = snprintf(v335, v473[3], "%sprohibited interfaces: ", v336);
            v338 = v473;
            unint64_t v339 = v473[3];
            BOOL v15 = v339 > v337;
            unint64_t v340 = v339 - v337;
            if (v15)
            {
              if (v337 >= 1)
              {
                v477[3] += v337;
                v338[3] = v340;
              }
            }
            else
            {
              *(unsigned char *)v477[3] = 0;
              *((unsigned char *)v469 + 24) = 1;
            }
            v439 = (void *)*((void *)v3->required_interface + 3);
            v464[0] = MEMORY[0x1E4F143A8];
            v464[1] = 3221225472;
            v464[2] = ___ZL43nw_path_parameters_copy_verbose_descriptionP29NWConcrete_nw_path_parametersPcm_block_invoke_4;
            v464[3] = &unk_1E523D340;
            v464[4] = &v476;
            v464[5] = &v472;
            v464[6] = &v468;
            xpc_array_apply(v439, v464);
          }
        }
      }
      if (!*((unsigned char *)v469 + 24))
      {
        v341 = (void *)*((void *)v3->required_interface + 4);
        if (v341)
        {
          if (xpc_array_get_count(v341))
          {
            v342 = (char *)v477[3];
            v343 = ", ";
            if (v342 == a2) {
              v343 = "";
            }
            int v344 = snprintf(v342, v473[3], "%sprohibited netagent domains: ", v343);
            v345 = v473;
            unint64_t v346 = v473[3];
            BOOL v15 = v346 > v344;
            unint64_t v347 = v346 - v344;
            if (v15)
            {
              if (v344 >= 1)
              {
                v477[3] += v344;
                v345[3] = v347;
              }
            }
            else
            {
              *(unsigned char *)v477[3] = 0;
              *((unsigned char *)v469 + 24) = 1;
            }
            v440 = (void *)*((void *)v3->required_interface + 4);
            v463[0] = MEMORY[0x1E4F143A8];
            v463[1] = 3221225472;
            v463[2] = ___ZL43nw_path_parameters_copy_verbose_descriptionP29NWConcrete_nw_path_parametersPcm_block_invoke_5;
            v463[3] = &unk_1E523D340;
            v463[4] = &v476;
            v463[5] = &v472;
            v463[6] = &v468;
            xpc_array_apply(v440, v463);
          }
        }
      }
      if (!*((unsigned char *)v469 + 24))
      {
        v348 = (void *)*((void *)v3->required_interface + 5);
        if (v348)
        {
          if (xpc_array_get_count(v348))
          {
            v349 = (char *)v477[3];
            v350 = ", ";
            if (v349 == a2) {
              v350 = "";
            }
            int v351 = snprintf(v349, v473[3], "%sprohibited netagent types: ", v350);
            v352 = v473;
            unint64_t v353 = v473[3];
            BOOL v15 = v353 > v351;
            unint64_t v354 = v353 - v351;
            if (v15)
            {
              if (v351 >= 1)
              {
                v477[3] += v351;
                v352[3] = v354;
              }
            }
            else
            {
              *(unsigned char *)v477[3] = 0;
              *((unsigned char *)v469 + 24) = 1;
            }
            v441 = (void *)*((void *)v3->required_interface + 5);
            v462[0] = MEMORY[0x1E4F143A8];
            v462[1] = 3221225472;
            v462[2] = ___ZL43nw_path_parameters_copy_verbose_descriptionP29NWConcrete_nw_path_parametersPcm_block_invoke_6;
            v462[3] = &unk_1E523D340;
            v462[4] = &v476;
            v462[5] = &v472;
            v462[6] = &v468;
            xpc_array_apply(v441, v462);
          }
        }
      }
      if (!*((unsigned char *)v469 + 24))
      {
        v355 = (void *)*((void *)v3->required_interface + 6);
        if (v355)
        {
          if (xpc_array_get_count(v355))
          {
            v356 = (char *)v477[3];
            v357 = ", ";
            if (v356 == a2) {
              v357 = "";
            }
            int v358 = snprintf(v356, v473[3], "%sprohibited netagent uuids: ", v357);
            v359 = v473;
            unint64_t v360 = v473[3];
            BOOL v15 = v360 > v358;
            unint64_t v361 = v360 - v358;
            if (v15)
            {
              if (v358 >= 1)
              {
                v477[3] += v358;
                v359[3] = v361;
              }
            }
            else
            {
              *(unsigned char *)v477[3] = 0;
              *((unsigned char *)v469 + 24) = 1;
            }
            v442 = (void *)*((void *)v3->required_interface + 6);
            v461[0] = MEMORY[0x1E4F143A8];
            v461[1] = 3221225472;
            v461[2] = ___ZL43nw_path_parameters_copy_verbose_descriptionP29NWConcrete_nw_path_parametersPcm_block_invoke_7;
            v461[3] = &unk_1E523D340;
            v461[4] = &v476;
            v461[5] = &v472;
            v461[6] = &v468;
            xpc_array_apply(v442, v461);
          }
        }
      }
      if (!*((unsigned char *)v469 + 24))
      {
        v362 = (void *)*((void *)v3->required_interface + 7);
        if (v362)
        {
          if (xpc_array_get_count(v362))
          {
            v363 = (char *)v477[3];
            v364 = ", ";
            if (v363 == a2) {
              v364 = "";
            }
            int v365 = snprintf(v363, v473[3], "%srequired netagent domains: ", v364);
            v366 = v473;
            unint64_t v367 = v473[3];
            BOOL v15 = v367 > v365;
            unint64_t v368 = v367 - v365;
            if (v15)
            {
              if (v365 >= 1)
              {
                v477[3] += v365;
                v366[3] = v368;
              }
            }
            else
            {
              *(unsigned char *)v477[3] = 0;
              *((unsigned char *)v469 + 24) = 1;
            }
            v443 = (void *)*((void *)v3->required_interface + 7);
            v460[0] = MEMORY[0x1E4F143A8];
            v460[1] = 3221225472;
            v460[2] = ___ZL43nw_path_parameters_copy_verbose_descriptionP29NWConcrete_nw_path_parametersPcm_block_invoke_8;
            v460[3] = &unk_1E523D340;
            v460[4] = &v476;
            v460[5] = &v472;
            v460[6] = &v468;
            xpc_array_apply(v443, v460);
          }
        }
      }
      if (!*((unsigned char *)v469 + 24))
      {
        v369 = (void *)*((void *)v3->required_interface + 8);
        if (v369)
        {
          if (xpc_array_get_count(v369))
          {
            v370 = (char *)v477[3];
            v371 = ", ";
            if (v370 == a2) {
              v371 = "";
            }
            int v372 = snprintf(v370, v473[3], "%srequired netagent types: ", v371);
            v373 = v473;
            unint64_t v374 = v473[3];
            BOOL v15 = v374 > v372;
            unint64_t v375 = v374 - v372;
            if (v15)
            {
              if (v372 >= 1)
              {
                v477[3] += v372;
                v373[3] = v375;
              }
            }
            else
            {
              *(unsigned char *)v477[3] = 0;
              *((unsigned char *)v469 + 24) = 1;
            }
            v444 = (void *)*((void *)v3->required_interface + 8);
            v459[0] = MEMORY[0x1E4F143A8];
            v459[1] = 3221225472;
            v459[2] = ___ZL43nw_path_parameters_copy_verbose_descriptionP29NWConcrete_nw_path_parametersPcm_block_invoke_9;
            v459[3] = &unk_1E523D340;
            v459[4] = &v476;
            v459[5] = &v472;
            v459[6] = &v468;
            xpc_array_apply(v444, v459);
          }
        }
      }
      if (!*((unsigned char *)v469 + 24))
      {
        v376 = (void *)*((void *)v3->required_interface + 9);
        if (v376)
        {
          if (xpc_array_get_count(v376))
          {
            v377 = (char *)v477[3];
            v378 = ", ";
            if (v377 == a2) {
              v378 = "";
            }
            int v379 = snprintf(v377, v473[3], "%srequired netagent uuids: ", v378);
            v380 = v473;
            unint64_t v381 = v473[3];
            BOOL v15 = v381 > v379;
            unint64_t v382 = v381 - v379;
            if (v15)
            {
              if (v379 >= 1)
              {
                v477[3] += v379;
                v380[3] = v382;
              }
            }
            else
            {
              *(unsigned char *)v477[3] = 0;
              *((unsigned char *)v469 + 24) = 1;
            }
            v445 = (void *)*((void *)v3->required_interface + 9);
            v458[0] = MEMORY[0x1E4F143A8];
            v458[1] = 3221225472;
            v458[2] = ___ZL43nw_path_parameters_copy_verbose_descriptionP29NWConcrete_nw_path_parametersPcm_block_invoke_10;
            v458[3] = &unk_1E523D340;
            v458[4] = &v476;
            v458[5] = &v472;
            v458[6] = &v468;
            xpc_array_apply(v445, v458);
          }
        }
      }
      if (!*((unsigned char *)v469 + 24))
      {
        v383 = (void *)*((void *)v3->required_interface + 10);
        if (v383)
        {
          if (xpc_array_get_count(v383))
          {
            v384 = (char *)v477[3];
            v385 = ", ";
            if (v384 == a2) {
              v385 = "";
            }
            int v386 = snprintf(v384, v473[3], "%spreferred netagent domains: ", v385);
            v387 = v473;
            unint64_t v388 = v473[3];
            BOOL v15 = v388 > v386;
            unint64_t v389 = v388 - v386;
            if (v15)
            {
              if (v386 >= 1)
              {
                v477[3] += v386;
                v387[3] = v389;
              }
            }
            else
            {
              *(unsigned char *)v477[3] = 0;
              *((unsigned char *)v469 + 24) = 1;
            }
            v446 = (void *)*((void *)v3->required_interface + 10);
            v457[0] = MEMORY[0x1E4F143A8];
            v457[1] = 3221225472;
            v457[2] = ___ZL43nw_path_parameters_copy_verbose_descriptionP29NWConcrete_nw_path_parametersPcm_block_invoke_11;
            v457[3] = &unk_1E523D340;
            v457[4] = &v476;
            v457[5] = &v472;
            v457[6] = &v468;
            xpc_array_apply(v446, v457);
          }
        }
      }
      if (!*((unsigned char *)v469 + 24))
      {
        v390 = (void *)*((void *)v3->required_interface + 11);
        if (v390)
        {
          if (xpc_array_get_count(v390))
          {
            v391 = (char *)v477[3];
            v392 = ", ";
            if (v391 == a2) {
              v392 = "";
            }
            int v393 = snprintf(v391, v473[3], "%spreferred netagent types: ", v392);
            v394 = v473;
            unint64_t v395 = v473[3];
            BOOL v15 = v395 > v393;
            unint64_t v396 = v395 - v393;
            if (v15)
            {
              if (v393 >= 1)
              {
                v477[3] += v393;
                v394[3] = v396;
              }
            }
            else
            {
              *(unsigned char *)v477[3] = 0;
              *((unsigned char *)v469 + 24) = 1;
            }
            v447 = (void *)*((void *)v3->required_interface + 11);
            v456[0] = MEMORY[0x1E4F143A8];
            v456[1] = 3221225472;
            v456[2] = ___ZL43nw_path_parameters_copy_verbose_descriptionP29NWConcrete_nw_path_parametersPcm_block_invoke_12;
            v456[3] = &unk_1E523D340;
            v456[4] = &v476;
            v456[5] = &v472;
            v456[6] = &v468;
            xpc_array_apply(v447, v456);
          }
        }
      }
      if (!*((unsigned char *)v469 + 24))
      {
        v397 = (void *)*((void *)v3->required_interface + 12);
        if (v397)
        {
          if (xpc_array_get_count(v397))
          {
            v398 = (char *)v477[3];
            v399 = ", ";
            if (v398 == a2) {
              v399 = "";
            }
            int v400 = snprintf(v398, v473[3], "%spreferred netagent uuids: ", v399);
            v401 = v473;
            unint64_t v402 = v473[3];
            BOOL v15 = v402 > v400;
            unint64_t v403 = v402 - v400;
            if (v15)
            {
              if (v400 >= 1)
              {
                v477[3] += v400;
                v401[3] = v403;
              }
            }
            else
            {
              *(unsigned char *)v477[3] = 0;
              *((unsigned char *)v469 + 24) = 1;
            }
            v448 = (void *)*((void *)v3->required_interface + 12);
            v455[0] = MEMORY[0x1E4F143A8];
            v455[1] = 3221225472;
            v455[2] = ___ZL43nw_path_parameters_copy_verbose_descriptionP29NWConcrete_nw_path_parametersPcm_block_invoke_13;
            v455[3] = &unk_1E523D340;
            v455[4] = &v476;
            v455[5] = &v472;
            v455[6] = &v468;
            xpc_array_apply(v448, v455);
          }
        }
      }
      if (!*((unsigned char *)v469 + 24))
      {
        v404 = (void *)*((void *)v3->required_interface + 13);
        if (v404)
        {
          if (xpc_array_get_count(v404))
          {
            v405 = (char *)v477[3];
            v406 = ", ";
            if (v405 == a2) {
              v406 = "";
            }
            int v407 = snprintf(v405, v473[3], "%savoided netagent domains: ", v406);
            v408 = v473;
            unint64_t v409 = v473[3];
            BOOL v15 = v409 > v407;
            unint64_t v410 = v409 - v407;
            if (v15)
            {
              if (v407 >= 1)
              {
                v477[3] += v407;
                v408[3] = v410;
              }
            }
            else
            {
              *(unsigned char *)v477[3] = 0;
              *((unsigned char *)v469 + 24) = 1;
            }
            v449 = (void *)*((void *)v3->required_interface + 13);
            v454[0] = MEMORY[0x1E4F143A8];
            v454[1] = 3221225472;
            v454[2] = ___ZL43nw_path_parameters_copy_verbose_descriptionP29NWConcrete_nw_path_parametersPcm_block_invoke_14;
            v454[3] = &unk_1E523D340;
            v454[4] = &v476;
            v454[5] = &v472;
            v454[6] = &v468;
            xpc_array_apply(v449, v454);
          }
        }
      }
      if (!*((unsigned char *)v469 + 24))
      {
        v411 = (void *)*((void *)v3->required_interface + 14);
        if (v411)
        {
          if (xpc_array_get_count(v411))
          {
            v412 = (char *)v477[3];
            v413 = ", ";
            if (v412 == a2) {
              v413 = "";
            }
            int v414 = snprintf(v412, v473[3], "%savoided netagent types: ", v413);
            v415 = v473;
            unint64_t v416 = v473[3];
            BOOL v15 = v416 > v414;
            unint64_t v417 = v416 - v414;
            if (v15)
            {
              if (v414 >= 1)
              {
                v477[3] += v414;
                v415[3] = v417;
              }
            }
            else
            {
              *(unsigned char *)v477[3] = 0;
              *((unsigned char *)v469 + 24) = 1;
            }
            v450 = (void *)*((void *)v3->required_interface + 14);
            v453[0] = MEMORY[0x1E4F143A8];
            v453[1] = 3221225472;
            v453[2] = ___ZL43nw_path_parameters_copy_verbose_descriptionP29NWConcrete_nw_path_parametersPcm_block_invoke_15;
            v453[3] = &unk_1E523D340;
            v453[4] = &v476;
            v453[5] = &v472;
            v453[6] = &v468;
            xpc_array_apply(v450, v453);
          }
        }
      }
      if (!*((unsigned char *)v469 + 24))
      {
        v418 = (void *)*((void *)v3->required_interface + 15);
        if (v418)
        {
          if (xpc_array_get_count(v418))
          {
            v419 = (char *)v477[3];
            v420 = ", ";
            if (v419 == a2) {
              v420 = "";
            }
            int v421 = snprintf(v419, v473[3], "%savoided netagent uuids: ", v420);
            v422 = v473;
            unint64_t v423 = v473[3];
            BOOL v15 = v423 > v421;
            unint64_t v424 = v423 - v421;
            if (v15)
            {
              if (v421 >= 1)
              {
                v477[3] += v421;
                v422[3] = v424;
              }
            }
            else
            {
              *(unsigned char *)v477[3] = 0;
              *((unsigned char *)v469 + 24) = 1;
            }
            v451 = (void *)*((void *)v3->required_interface + 15);
            v452[0] = MEMORY[0x1E4F143A8];
            v452[1] = 3221225472;
            v452[2] = ___ZL43nw_path_parameters_copy_verbose_descriptionP29NWConcrete_nw_path_parametersPcm_block_invoke_16;
            v452[3] = &unk_1E523D340;
            v452[4] = &v476;
            v452[5] = &v472;
            v452[6] = &v468;
            xpc_array_apply(v451, v452);
          }
        }
      }
      if (!*((unsigned char *)v469 + 24) && *((void *)v3->required_interface + 16))
      {
        v314 = (char *)v477[3];
        v315 = ", ";
        if (v314 == a2) {
          v315 = "";
        }
        int v316 = snprintf(v314, v473[3], "%shas demux", v315);
        v317 = v473;
        unint64_t v318 = v473[3];
        BOOL v15 = v318 > v316;
        unint64_t v319 = v318 - v316;
        if (v15)
        {
          if (v316 >= 1)
          {
            v477[3] += v316;
            v317[3] = v319;
          }
        }
        else
        {
          *(unsigned char *)v477[3] = 0;
          *((unsigned char *)v469 + 24) = 1;
        }
      }
    }
  }
  _Block_object_dispose(&v468, 8);
  _Block_object_dispose(&v472, 8);
  _Block_object_dispose(&v476, 8);
}

void sub_1832A6EEC(_Unwind_Exception *a1)
{
  _Block_object_dispose(&STACK[0x3A0], 8);
  _Block_object_dispose((const void *)(v2 - 256), 8);
  _Block_object_dispose((const void *)(v2 - 224), 8);

  _Unwind_Resume(a1);
}

uint64_t nw_context_get_privacy_level(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    if ((v1[34]._os_unfair_lock_opaque & 0x48) == 0x40 && !dispatch_workloop_is_current())
    {
      os_unfair_lock_lock(v2 + 20);
      uint64_t os_unfair_lock_opaque = v2[31]._os_unfair_lock_opaque;
      os_unfair_lock_unlock(v2 + 20);
    }
    else
    {
      uint64_t os_unfair_lock_opaque = v2[31]._os_unfair_lock_opaque;
    }
    goto LABEL_6;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  unint64_t v16 = "nw_context_get_privacy_level";
  os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        unint64_t v16 = "nw_context_get_privacy_level";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null context", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          unint64_t v16 = "nw_context_get_privacy_level";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null context, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        unint64_t v16 = "nw_context_get_privacy_level";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null context, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        unint64_t v16 = "nw_context_get_privacy_level";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null context, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_23:
  if (v6) {
    free(v6);
  }
  uint64_t os_unfair_lock_opaque = 1;
LABEL_6:

  return os_unfair_lock_opaque;
}

void nw_endpoint_transform_start_next_child(NWConcrete_nw_endpoint_handler *a1)
{
  uint64_t v254 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (!v1)
  {
    int v83 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    unint64_t v237 = "nw_endpoint_transform_start_next_child";
    int v84 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v235 = OS_LOG_TYPE_ERROR;
    char v234 = 0;
    if (__nwlog_fault(v84, &v235, &v234))
    {
      if (v235 == OS_LOG_TYPE_FAULT)
      {
        unint64_t v85 = __nwlog_obj();
        os_log_type_t v86 = v235;
        if (os_log_type_enabled(v85, v235))
        {
          *(_DWORD *)buf = 136446210;
          unint64_t v237 = "nw_endpoint_transform_start_next_child";
          _os_log_impl(&dword_1830D4000, v85, v86, "%{public}s called with null handler", buf, 0xCu);
        }
      }
      else if (v234)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        unint64_t v85 = __nwlog_obj();
        os_log_type_t v91 = v235;
        BOOL v92 = os_log_type_enabled(v85, v235);
        if (backtrace_string)
        {
          if (v92)
          {
            *(_DWORD *)buf = 136446466;
            unint64_t v237 = "nw_endpoint_transform_start_next_child";
            __int16 v238 = 2082;
            id_str = backtrace_string;
            _os_log_impl(&dword_1830D4000, v85, v91, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_186;
        }
        if (v92)
        {
          *(_DWORD *)buf = 136446210;
          unint64_t v237 = "nw_endpoint_transform_start_next_child";
          _os_log_impl(&dword_1830D4000, v85, v91, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        unint64_t v85 = __nwlog_obj();
        os_log_type_t v93 = v235;
        if (os_log_type_enabled(v85, v235))
        {
          *(_DWORD *)buf = 136446210;
          unint64_t v237 = "nw_endpoint_transform_start_next_child";
          _os_log_impl(&dword_1830D4000, v85, v93, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_186:
    if (v84) {
      free(v84);
    }
    goto LABEL_90;
  }
  uint64_t v3 = v1;
  uint64_t mode = v3->mode;

  if (mode == 5)
  {
    uint64_t v5 = nw_endpoint_handler_copy_transform(v3);
    os_log_type_t v6 = v5;
    uint64_t v7 = *((void *)v5 + 1);
    if (!v7 || *(void *)(v7 + 24) == *(void *)(v7 + 16))
    {
      nw_endpoint_handler_handle_failure(v3);
      unint64_t v16 = -[NWConcrete_nw_error initWithDomain:code:]([NWConcrete_nw_error alloc], 1, 22);
      v3->event = (nw_endpoint_handler_event_s)131079;
      nw_endpoint_handler_report(v3, 0, &v3->event.domain, v16);

LABEL_89:
      goto LABEL_90;
    }
    unint64_t v8 = *((unsigned int *)v5 + 10);
    BOOL v9 = v3;
    uint64_t v10 = v3->mode;

    v227 = v6;
    size_t v225 = v8;
    if (v10 != 5)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      __int16 v17 = (id)gLogObj;
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        if (v10 > 5) {
          __int16 v18 = "unknown-mode";
        }
        else {
          __int16 v18 = off_1E523FB08[v10];
        }
        *(_DWORD *)buf = 136446722;
        unint64_t v237 = "nw_endpoint_transform_get_child_at_index";
        __int16 v238 = 2082;
        id_str = (char *)v18;
        __int16 v240 = 2082;
        int v241 = "transform";
        _os_log_impl(&dword_1830D4000, v17, OS_LOG_TYPE_DEFAULT, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
      }

      goto LABEL_36;
    }
    BOOL v11 = nw_endpoint_handler_copy_transform(v9);
    uint64_t v12 = *((void *)v11 + 1);
    if (v12)
    {
      uint64_t v13 = *(void *)(v12 + 24) - *(void *)(v12 + 16);
      if (v13)
      {
        if (v8 < v13 >> 3)
        {
          nw_array_get_object_at_index(v12, v8);
          id v228 = (id)objc_claimAutoreleasedReturnValue();
          goto LABEL_25;
        }
        if (gLogDatapath && (nw_endpoint_handler_get_logging_disabled(v9) & 1) == 0)
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          int v145 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v145, OS_LOG_TYPE_DEBUG))
          {
            id_string = nw_endpoint_handler_get_id_string(v9);
            int v229 = nw_endpoint_handler_dry_run_string(v9);
            nw_endpoint_t v147 = nw_endpoint_handler_copy_endpoint(v9);
            logging_description = nw_endpoint_get_logging_description(v147);
            unint64_t v148 = nw_endpoint_handler_state_string(v9);
            uint64_t v149 = nw_endpoint_handler_mode_string(v9);
            id v150 = nw_endpoint_handler_copy_current_path(v9);
            *(_DWORD *)buf = 136448002;
            unint64_t v237 = "nw_endpoint_transform_get_child_at_index";
            __int16 v238 = 2082;
            id_str = (char *)id_string;
            __int16 v240 = 2082;
            int v241 = v229;
            __int16 v242 = 2082;
            unint64_t v243 = logging_description;
            __int16 v244 = 2082;
            v245 = v148;
            __int16 v246 = 2082;
            int v247 = v149;
            __int16 v248 = 2114;
            id v249 = v150;
            __int16 v250 = 1024;
            LODWORD(v251) = v225;
            _os_log_impl(&dword_1830D4000, v145, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] no child at index %u", buf, 0x4Eu);
          }
        }
      }
    }
    id v228 = 0;
LABEL_25:

    if (v228)
    {
      uint64_t v19 = *((void *)v227 + 8);
      if (v19)
      {
        nw_queue_cancel_source(v19);
        *((void *)v227 + 8) = 0;
      }
      uint64_t v20 = (void *)*((void *)v227 + 3);
      if (v20 && xpc_array_get_count(v20) > v225)
      {
        int64_t int64 = xpc_array_get_int64(*((xpc_object_t *)v227 + 3), v225);
        if (int64 == 2) {
          int v22 = 2;
        }
        else {
          int v22 = 1;
        }
        if (int64 == 3) {
          int v23 = 3;
        }
        else {
          int v23 = v22;
        }
      }
      else
      {
        int v23 = 1;
      }
      ++*((_DWORD *)v227 + 10);
      if (!v225)
      {
        BOOL v37 = (id *)v228;
        id v38 = v37[4];

        if (v38)
        {
          int upper_transport_protocol = nw_parameters_get_upper_transport_protocol(v38);
          if (upper_transport_protocol != 253) {
            int upper_transport_protocol = nw_parameters_get_ip_protocol(v38);
          }
          *((_DWORD *)v227 + 20) = upper_transport_protocol;
        }
      }
      nw_endpoint_handler_start(v228);
      unint64_t v40 = v9;
      int state = v40->state;

      if ((state & 0xFFFFFFFE) == 4)
      {
        if (nw_endpoint_handler_get_minimize_logging(v40))
        {
          if (nw_endpoint_handler_get_logging_disabled(v40)) {
            goto LABEL_87;
          }
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          uint64_t v26 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v138 = nw_endpoint_handler_get_id_string(v40);
            int v139 = nw_endpoint_handler_dry_run_string(v40);
            nw_endpoint_t v140 = nw_endpoint_handler_copy_endpoint(v40);
            unint64_t v141 = nw_endpoint_get_logging_description(v140);
            unint64_t v142 = nw_endpoint_handler_state_string(v40);
            unint64_t v143 = nw_endpoint_handler_mode_string(v40);
            id v144 = nw_endpoint_handler_copy_current_path(v40);
            *(_DWORD *)buf = 136447746;
            unint64_t v237 = "nw_endpoint_transform_start_next_child";
            __int16 v238 = 2082;
            id_str = (char *)v138;
            __int16 v240 = 2082;
            int v241 = v139;
            __int16 v242 = 2082;
            unint64_t v243 = v141;
            __int16 v244 = 2082;
            v245 = v142;
            __int16 v246 = 2082;
            int v247 = v143;
            __int16 v248 = 2114;
            id v249 = v144;
            _os_log_impl(&dword_1830D4000, v26, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Not starting next child timer, handler cancelled or failed", buf, 0x48u);
          }
          goto LABEL_86;
        }
        BOOL v42 = v40;
        BOOL v43 = (*((unsigned char *)v42 + 268) & 0x20) == 0;

        if (v43)
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          uint64_t v26 = (id)gconnectionLogObj;
          if (!os_log_type_enabled(v26, OS_LOG_TYPE_INFO)) {
            goto LABEL_86;
          }
          nw_endpoint_t v44 = nw_endpoint_handler_get_id_string(v42);
          int v45 = nw_endpoint_handler_dry_run_string(v42);
          nw_endpoint_t v46 = nw_endpoint_handler_copy_endpoint(v42);
          unint64_t v47 = nw_endpoint_get_logging_description(v46);
          unint64_t v48 = nw_endpoint_handler_state_string(v42);
          id v49 = nw_endpoint_handler_mode_string(v42);
          id v50 = nw_endpoint_handler_copy_current_path(v42);
          *(_DWORD *)buf = 136447746;
          unint64_t v237 = "nw_endpoint_transform_start_next_child";
          __int16 v238 = 2082;
          id_str = (char *)v44;
          __int16 v240 = 2082;
          int v241 = v45;
          __int16 v242 = 2082;
          unint64_t v243 = v47;
          __int16 v244 = 2082;
          v245 = v48;
          __int16 v246 = 2082;
          int v247 = v49;
          __int16 v248 = 2114;
          id v249 = v50;
          int v51 = v26;
          _os_log_impl(&dword_1830D4000, v26, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Not starting next child timer, handler cancelled or failed", buf, 0x48u);

          goto LABEL_79;
        }
        goto LABEL_87;
      }
      __int16 v56 = v40;
      int v57 = v3->mode;

      if (v57 != 5)
      {
        int minimize_logging = nw_endpoint_handler_get_minimize_logging(v56);
        char logging_disabled = nw_endpoint_handler_get_logging_disabled(v56);
        if (minimize_logging)
        {
          if (logging_disabled) {
            goto LABEL_87;
          }
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          uint64_t v26 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
          {
            int v151 = nw_endpoint_handler_get_id_string(v56);
            id v152 = nw_endpoint_handler_dry_run_string(v56);
            nw_endpoint_t v153 = nw_endpoint_handler_copy_endpoint(v56);
            unint64_t v154 = nw_endpoint_get_logging_description(v153);
            uint64_t v155 = nw_endpoint_handler_state_string(v56);
            __int16 v156 = nw_endpoint_handler_mode_string(v56);
            id v157 = nw_endpoint_handler_copy_current_path(v56);
            *(_DWORD *)buf = 136447746;
            unint64_t v237 = "nw_endpoint_transform_start_next_child";
            __int16 v238 = 2082;
            id_str = (char *)v151;
            __int16 v240 = 2082;
            int v241 = v152;
            __int16 v242 = 2082;
            unint64_t v243 = v154;
            __int16 v244 = 2082;
            v245 = v155;
            __int16 v246 = 2082;
            int v247 = v156;
            __int16 v248 = 2114;
            id v249 = v157;
            _os_log_impl(&dword_1830D4000, v26, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Not starting next child timer, no longer transform mode", buf, 0x48u);
          }
          goto LABEL_86;
        }
        if ((logging_disabled & 1) == 0)
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          uint64_t v26 = (id)gconnectionLogObj;
          if (!os_log_type_enabled(v26, OS_LOG_TYPE_INFO)) {
            goto LABEL_86;
          }
          BOOL v71 = nw_endpoint_handler_get_id_string(v56);
          os_log_type_t v72 = nw_endpoint_handler_dry_run_string(v56);
          nw_endpoint_t v73 = nw_endpoint_handler_copy_endpoint(v56);
          id v74 = nw_endpoint_get_logging_description(v73);
          int v75 = nw_endpoint_handler_state_string(v56);
          uint64_t v76 = nw_endpoint_handler_mode_string(v56);
          id v77 = nw_endpoint_handler_copy_current_path(v56);
          *(_DWORD *)buf = 136447746;
          unint64_t v237 = "nw_endpoint_transform_start_next_child";
          __int16 v238 = 2082;
          id_str = (char *)v71;
          __int16 v240 = 2082;
          int v241 = v72;
          __int16 v242 = 2082;
          unint64_t v243 = v74;
          __int16 v244 = 2082;
          v245 = v75;
          __int16 v246 = 2082;
          int v247 = v76;
          __int16 v248 = 2114;
          id v249 = v77;
          int v51 = v26;
          _os_log_impl(&dword_1830D4000, v26, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Not starting next child timer, no longer transform mode", buf, 0x48u);

LABEL_79:
          uint64_t v26 = v51;
LABEL_86:
        }
LABEL_87:

LABEL_88:
        os_log_type_t v6 = v227;
        goto LABEL_89;
      }
      if (*((void *)v227 + 6)) {
        goto LABEL_87;
      }
      if (v23 == 3)
      {
        id v80 = nw_endpoint_handler_copy_context(v56);
        v230[0] = MEMORY[0x1E4F143A8];
        v230[1] = 3221225472;
        v230[2] = ___ZL38nw_endpoint_transform_start_next_childP30NWConcrete_nw_endpoint_handler_block_invoke_105;
        v230[3] = &unk_1E524BAA8;
        unint64_t v231 = v56;
        nw_queue_context_async(v80, v230);

        uint64_t v26 = v231;
        goto LABEL_86;
      }
      if (v23 != 2) {
        goto LABEL_87;
      }
      uint64_t v58 = v56;
      id v228 = v228;
      int64_t v59 = 100 * networkd_settings_get_int64_with_default((const char *)nw_setting_transform_rtt_delay_factor, 2);
      unsigned int v60 = nw_endpoint_handler_get_mode(v58);
      unint64_t v226 = v58;
      if (v60 != 5)
      {
        unsigned int v81 = v60;
        uint64_t v61 = __nwlog_obj();
        if (os_log_type_enabled((os_log_t)v61, OS_LOG_TYPE_DEFAULT))
        {
          if (v81 > 5) {
            BOOL v82 = "unknown-mode";
          }
          else {
            BOOL v82 = off_1E523FB08[v81];
          }
          *(_DWORD *)buf = 136446722;
          unint64_t v237 = "nw_endpoint_transform_get_next_child_scale_percentage";
          __int16 v238 = 2082;
          id_str = (char *)v82;
          __int16 v240 = 2082;
          int v241 = "transform";
          _os_log_impl(&dword_1830D4000, (os_log_t)v61, OS_LOG_TYPE_DEFAULT, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
        }
        goto LABEL_154;
      }
      uint64_t v61 = (uint64_t)nw_endpoint_handler_copy_transform(v58);
      unint64_t v62 = *(unsigned int *)(v61 + 40);
      unint64_t v63 = v58;
      unsigned int v64 = nw_endpoint_handler_get_mode(v63);
      if (v64 != 5)
      {
        unsigned int v87 = v64;
        nw_endpoint_t v88 = __nwlog_obj();
        if (os_log_type_enabled(v88, OS_LOG_TYPE_DEFAULT))
        {
          if (v87 > 5) {
            os_log_type_t v89 = "unknown-mode";
          }
          else {
            os_log_type_t v89 = off_1E523FB08[v87];
          }
          *(_DWORD *)buf = 136446722;
          unint64_t v237 = "nw_endpoint_transform_get_child_at_index";
          __int16 v238 = 2082;
          id_str = (char *)v89;
          __int16 v240 = 2082;
          int v241 = "transform";
          _os_log_impl(&dword_1830D4000, v88, OS_LOG_TYPE_DEFAULT, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
        }

LABEL_126:
        if (gLogDatapath && (nw_endpoint_handler_get_logging_disabled(v63) & 1) == 0)
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          unint64_t v68 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v68, OS_LOG_TYPE_DEBUG))
          {
            unint64_t v213 = nw_endpoint_handler_get_id_string(v63);
            unint64_t v208 = nw_endpoint_handler_dry_run_string(v63);
            nw_endpoint_t v221 = nw_endpoint_handler_copy_endpoint(v63);
            unint64_t v100 = nw_endpoint_get_logging_description(v221);
            id v101 = nw_endpoint_handler_state_string(v63);
            os_log_type_t v102 = nw_endpoint_handler_mode_string(v63);
            id v103 = nw_endpoint_handler_copy_current_path(v63);
            *(_DWORD *)buf = 136448002;
            unint64_t v237 = "nw_endpoint_transform_get_next_child_scale_percentage";
            __int16 v238 = 2082;
            id_str = (char *)v213;
            __int16 v240 = 2082;
            int v241 = v208;
            __int16 v242 = 2082;
            unint64_t v243 = v100;
            __int16 v244 = 2082;
            v245 = v101;
            __int16 v246 = 2082;
            int v247 = v102;
            __int16 v248 = 2114;
            id v249 = v103;
            __int16 v250 = 1024;
            LODWORD(v251) = v62;
            _os_log_impl(&dword_1830D4000, v68, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] no child at index %u", buf, 0x4Eu);
          }
          goto LABEL_153;
        }
LABEL_154:

        unint64_t v114 = nw_endpoint_handler_get_child_timeout_nanos(v228) * v59;
        int v115 = v226;
        int v116 = nw_endpoint_handler_get_minimize_logging(v226);
        char v117 = nw_endpoint_handler_get_logging_disabled(v226);
        unint64_t v222 = v114 / 0x5F5E100;
        unint64_t v118 = v227;
        unint64_t v216 = v114;
        if (v116)
        {
          if (v117)
          {
LABEL_161:
            *((void *)v118 + 9) = v222;
            id v127 = nw_endpoint_handler_copy_context(v115);
            v232[0] = MEMORY[0x1E4F143A8];
            v232[1] = 3221225472;
            v232[2] = ___ZL38nw_endpoint_transform_start_next_childP30NWConcrete_nw_endpoint_handler_block_invoke;
            v232[3] = &unk_1E524BAA8;
            id v233 = v115;
            *((void *)v118 + 8) = nw_queue_context_create_source(v127, 2, 3, 0, v232, 0);

            uint64_t v128 = *((void *)v118 + 8);
            if (v128)
            {
              dispatch_time_t v129 = dispatch_time(0x8000000000000000, v216 / 0x64);
              nw_queue_set_timer_values(v128, v129, 0xFFFFFFFFFFFFFFFFLL, 0xF4240uLL);
              nw_queue_activate_source(*((void *)v227 + 8));
LABEL_163:
              uint64_t v26 = v233;
              goto LABEL_86;
            }
            unint64_t v130 = __nwlog_obj();
            *(_DWORD *)buf = 136446210;
            unint64_t v237 = "nw_endpoint_transform_start_next_child";
            BOOL v131 = (char *)_os_log_send_and_compose_impl();

            os_log_type_t v235 = OS_LOG_TYPE_ERROR;
            char v234 = 0;
            if (__nwlog_fault(v131, &v235, &v234))
            {
              if (v235 == OS_LOG_TYPE_FAULT)
              {
                os_log_type_t v132 = __nwlog_obj();
                os_log_type_t v133 = v235;
                if (os_log_type_enabled(v132, v235))
                {
                  *(_DWORD *)buf = 136446210;
                  unint64_t v237 = "nw_endpoint_transform_start_next_child";
                  _os_log_impl(&dword_1830D4000, v132, v133, "%{public}s nw_queue_context_create_source(timer) failed", buf, 0xCu);
                }
LABEL_179:

                goto LABEL_180;
              }
              if (!v234)
              {
                os_log_type_t v132 = __nwlog_obj();
                os_log_type_t v137 = v235;
                if (os_log_type_enabled(v132, v235))
                {
                  *(_DWORD *)buf = 136446210;
                  unint64_t v237 = "nw_endpoint_transform_start_next_child";
                  _os_log_impl(&dword_1830D4000, v132, v137, "%{public}s nw_queue_context_create_source(timer) failed, backtrace limit exceeded", buf, 0xCu);
                }
                goto LABEL_179;
              }
              v134 = (char *)__nw_create_backtrace_string();
              os_log_type_t v132 = __nwlog_obj();
              os_log_type_t v135 = v235;
              BOOL v136 = os_log_type_enabled(v132, v235);
              if (!v134)
              {
                if (v136)
                {
                  *(_DWORD *)buf = 136446210;
                  unint64_t v237 = "nw_endpoint_transform_start_next_child";
                  _os_log_impl(&dword_1830D4000, v132, v135, "%{public}s nw_queue_context_create_source(timer) failed, no backtrace", buf, 0xCu);
                }
                goto LABEL_179;
              }
              if (v136)
              {
                *(_DWORD *)buf = 136446466;
                unint64_t v237 = "nw_endpoint_transform_start_next_child";
                __int16 v238 = 2082;
                id_str = v134;
                _os_log_impl(&dword_1830D4000, v132, v135, "%{public}s nw_queue_context_create_source(timer) failed, dumping backtrace:%{public}s", buf, 0x16u);
              }

              free(v134);
            }
LABEL_180:
            if (v131)
            {
              free(v131);
              uint64_t v26 = v233;
              goto LABEL_86;
            }
            goto LABEL_163;
          }
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          BOOL v119 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v119, OS_LOG_TYPE_DEBUG))
          {
            int v211 = nw_endpoint_handler_get_id_string(v226);
            __int16 v158 = nw_endpoint_handler_dry_run_string(v226);
            nw_endpoint_t v159 = nw_endpoint_handler_copy_endpoint(v226);
            unint64_t v160 = nw_endpoint_get_logging_description(v159);
            v161 = nw_endpoint_handler_state_string(v226);
            __int16 v162 = nw_endpoint_handler_mode_string(v226);
            id v163 = nw_endpoint_handler_copy_current_path(v226);
            *(_DWORD *)buf = 136448002;
            unint64_t v237 = "nw_endpoint_transform_start_next_child";
            __int16 v238 = 2082;
            id_str = (char *)v211;
            __int16 v240 = 2082;
            int v241 = v158;
            __int16 v242 = 2082;
            unint64_t v243 = v160;
            __int16 v244 = 2082;
            v245 = v161;
            __int16 v246 = 2082;
            int v247 = v162;
            __int16 v248 = 2114;
            id v249 = v163;
            __int16 v250 = 2048;
            unint64_t v251 = v222;
            _os_log_impl(&dword_1830D4000, v119, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] starting next child endpoint in %llums", buf, 0x52u);
          }
        }
        else
        {
          if (v117) {
            goto LABEL_161;
          }
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          BOOL v119 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v119, OS_LOG_TYPE_INFO))
          {
            id v120 = nw_endpoint_handler_get_id_string(v226);
            int v121 = nw_endpoint_handler_dry_run_string(v226);
            nw_endpoint_t v122 = nw_endpoint_handler_copy_endpoint(v226);
            unint64_t v123 = nw_endpoint_get_logging_description(v122);
            unint64_t v124 = nw_endpoint_handler_state_string(v226);
            os_log_type_t v125 = nw_endpoint_handler_mode_string(v226);
            id v126 = nw_endpoint_handler_copy_current_path(v226);
            *(_DWORD *)buf = 136448002;
            unint64_t v237 = "nw_endpoint_transform_start_next_child";
            __int16 v238 = 2082;
            id_str = (char *)v120;
            __int16 v240 = 2082;
            int v241 = v121;
            __int16 v242 = 2082;
            unint64_t v243 = v123;
            __int16 v244 = 2082;
            v245 = v124;
            __int16 v246 = 2082;
            int v247 = v125;
            __int16 v248 = 2114;
            id v249 = v126;
            __int16 v250 = 2048;
            unint64_t v251 = v222;
            _os_log_impl(&dword_1830D4000, v119, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] starting next child endpoint in %llums", buf, 0x52u);
          }
        }

        unint64_t v118 = v227;
        int v115 = v226;
        goto LABEL_161;
      }
      int v65 = nw_endpoint_handler_copy_transform(v63);
      uint64_t v66 = *((void *)v65 + 1);
      if (v66)
      {
        uint64_t v67 = *(void *)(v66 + 24) - *(void *)(v66 + 16);
        if (v67)
        {
          if (v62 < v67 >> 3)
          {
            unint64_t v68 = nw_array_get_object_at_index(v66, v62);
            goto LABEL_118;
          }
          if (gLogDatapath && (nw_endpoint_handler_get_logging_disabled(v63) & 1) == 0)
          {
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
            }
            BOOL v186 = (id)gconnectionLogObj;
            if (os_log_type_enabled(v186, OS_LOG_TYPE_DEBUG))
            {
              v218 = nw_endpoint_handler_get_id_string(v63);
              v212 = nw_endpoint_handler_dry_run_string(v63);
              nw_endpoint_t v224 = nw_endpoint_handler_copy_endpoint(v63);
              unint64_t v207 = nw_endpoint_get_logging_description(v224);
              int v187 = nw_endpoint_handler_state_string(v63);
              v188 = nw_endpoint_handler_mode_string(v63);
              id v189 = nw_endpoint_handler_copy_current_path(v63);
              *(_DWORD *)buf = 136448002;
              unint64_t v237 = "nw_endpoint_transform_get_child_at_index";
              __int16 v238 = 2082;
              id_str = (char *)v218;
              __int16 v240 = 2082;
              int v241 = v212;
              __int16 v242 = 2082;
              unint64_t v243 = v207;
              __int16 v244 = 2082;
              v245 = v187;
              __int16 v246 = 2082;
              int v247 = v188;
              __int16 v248 = 2114;
              unint64_t v190 = v189;
              id v249 = v189;
              __int16 v250 = 1024;
              LODWORD(v251) = v62;
              _os_log_impl(&dword_1830D4000, v186, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] no child at index %u", buf, 0x4Eu);
            }
          }
        }
      }
      unint64_t v68 = 0;
LABEL_118:

      if (v68)
      {
        id v94 = nw_endpoint_handler_copy_parameters(v228);
        unint64_t v220 = v94;
        if (v94)
        {
          BOOL v95 = v94;
          id v96 = nw_endpoint_handler_copy_parameters(v68);
          if (v96)
          {
            if (nw_parameters_get_upper_transport_protocol(v95) != 253)
            {
LABEL_151:

LABEL_152:
LABEL_153:

              goto LABEL_154;
            }
            int v97 = nw_parameters_get_upper_transport_protocol_options(v95);
            BOOL v98 = v97;
            if (v97)
            {
              if (nw_protocol_options_is_quic(v97))
              {
                if (nw_protocol_options_is_quic_stream(v98))
                {
                  BOOL is_speculative_attempt = nw_quic_get_is_speculative_attempt(v98);
                }
                else
                {
                  if (!nw_protocol_options_is_quic_connection(v98)) {
                    goto LABEL_142;
                  }
                  BOOL is_speculative_attempt = nw_quic_connection_get_is_speculative_attempt(v98);
                }
                if (is_speculative_attempt)
                {
                  if ((nw_endpoint_handler_get_logging_disabled(v63) & 1) == 0)
                  {
                    if (__nwlog_connection_log::onceToken != -1) {
                      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
                    }
                    BOOL v104 = (id)gconnectionLogObj;
                    if (os_log_type_enabled(v104, OS_LOG_TYPE_DEBUG))
                    {
                      unint64_t v105 = nw_endpoint_handler_get_id_string(v63);
                      unint64_t v214 = nw_endpoint_handler_dry_run_string(v63);
                      nw_endpoint_t v106 = nw_endpoint_handler_copy_endpoint(v63);
                      id v209 = nw_endpoint_get_logging_description(v106);
                      int v205 = nw_endpoint_handler_state_string(v63);
                      v203 = nw_endpoint_handler_mode_string(v63);
                      id v107 = nw_endpoint_handler_copy_current_path(v63);
                      os_log_type_t v108 = nw_endpoint_handler_get_id_string(v228);
                      *(_DWORD *)buf = 136448002;
                      unint64_t v237 = "nw_endpoint_transform_get_next_child_scale_percentage";
                      __int16 v238 = 2082;
                      id_str = (char *)v105;
                      __int16 v240 = 2082;
                      int v241 = v214;
                      __int16 v242 = 2082;
                      unint64_t v243 = v209;
                      __int16 v244 = 2082;
                      v245 = v205;
                      __int16 v246 = 2082;
                      int v247 = v203;
                      __int16 v248 = 2114;
                      id v249 = v107;
                      __int16 v250 = 2080;
                      unint64_t v251 = (unint64_t)v108;
                      _os_log_impl(&dword_1830D4000, v104, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] quic [C%s] is speculative attempt, using shorter timeout percentage", buf, 0x52u);
                    }
                  }
                  *(unsigned char *)(v61 + 97) = 1;
                  int64_t v59 = 50;
LABEL_150:

                  goto LABEL_151;
                }
LABEL_142:
                if (nw_parameters_get_upper_transport_protocol(v96) != 253)
                {
                  if ((nw_endpoint_handler_get_logging_disabled(v63) & 1) == 0)
                  {
                    if (__nwlog_connection_log::onceToken != -1) {
                      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
                    }
                    int v109 = (id)gconnectionLogObj;
                    if (os_log_type_enabled(v109, OS_LOG_TYPE_DEBUG))
                    {
                      v215 = nw_endpoint_handler_get_id_string(v63);
                      char v210 = nw_endpoint_handler_dry_run_string(v63);
                      nw_endpoint_t v110 = nw_endpoint_handler_copy_endpoint(v63);
                      v206 = nw_endpoint_get_logging_description(v110);
                      char v204 = nw_endpoint_handler_state_string(v63);
                      unint64_t v202 = nw_endpoint_handler_mode_string(v63);
                      id v111 = nw_endpoint_handler_copy_current_path(v63);
                      unint64_t v112 = nw_endpoint_handler_get_id_string(v228);
                      BOOL v113 = nw_endpoint_handler_get_id_string(v68);
                      *(_DWORD *)buf = 136448258;
                      unint64_t v237 = "nw_endpoint_transform_get_next_child_scale_percentage";
                      __int16 v238 = 2082;
                      id_str = (char *)v215;
                      __int16 v240 = 2082;
                      int v241 = v210;
                      __int16 v242 = 2082;
                      unint64_t v243 = v206;
                      __int16 v244 = 2082;
                      v245 = v204;
                      __int16 v246 = 2082;
                      int v247 = v202;
                      __int16 v248 = 2114;
                      id v249 = v111;
                      __int16 v250 = 2080;
                      unint64_t v251 = (unint64_t)v112;
                      __int16 v252 = 2080;
                      int v253 = v113;
                      _os_log_impl(&dword_1830D4000, v109, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] quic [C%s] is not speculative, using shorter timeout percentage for non-quic next child [C%s]", buf, 0x5Cu);
                    }
                  }
                  int64_t v59 = 100;
                }
                goto LABEL_150;
              }
              id v217 = v96;
              unint64_t v184 = __nwlog_obj();
              *(_DWORD *)buf = 136446210;
              unint64_t v237 = "nw_endpoint_transform_get_next_child_scale_percentage";
              int v181 = (char *)_os_log_send_and_compose_impl();

              os_log_type_t v235 = OS_LOG_TYPE_ERROR;
              char v234 = 0;
              if (__nwlog_fault(v181, &v235, &v234))
              {
                if (v235 == OS_LOG_TYPE_FAULT)
                {
                  id v182 = __nwlog_obj();
                  os_log_type_t v185 = v235;
                  if (os_log_type_enabled(v182, v235))
                  {
                    *(_DWORD *)buf = 136446210;
                    unint64_t v237 = "nw_endpoint_transform_get_next_child_scale_percentage";
                    _os_log_impl(&dword_1830D4000, v182, v185, "%{public}s called with null nw_protocol_options_is_quic(current_quic_options)", buf, 0xCu);
                  }
LABEL_277:

                  goto LABEL_284;
                }
                if (!v234)
                {
                  id v182 = __nwlog_obj();
                  os_log_type_t v201 = v235;
                  if (os_log_type_enabled(v182, v235))
                  {
                    *(_DWORD *)buf = 136446210;
                    unint64_t v237 = "nw_endpoint_transform_get_next_child_scale_percentage";
                    _os_log_impl(&dword_1830D4000, v182, v201, "%{public}s called with null nw_protocol_options_is_quic(current_quic_options), backtrace limit exceeded", buf, 0xCu);
                  }
                  goto LABEL_277;
                }
                unint64_t v195 = (char *)__nw_create_backtrace_string();
                nw_endpoint_t v192 = __nwlog_obj();
                os_log_type_t v196 = v235;
                BOOL v197 = os_log_type_enabled(v192, v235);
                if (v195)
                {
                  if (v197)
                  {
                    *(_DWORD *)buf = 136446466;
                    unint64_t v237 = "nw_endpoint_transform_get_next_child_scale_percentage";
                    __int16 v238 = 2082;
                    id_str = v195;
                    _os_log_impl(&dword_1830D4000, v192, v196, "%{public}s called with null nw_protocol_options_is_quic(current_quic_options), dumping backtrace:%{public}s", buf, 0x16u);
                  }

                  free(v195);
                  if (!v181) {
                    goto LABEL_286;
                  }
                  goto LABEL_285;
                }
                if (v197)
                {
                  *(_DWORD *)buf = 136446210;
                  unint64_t v237 = "nw_endpoint_transform_get_next_child_scale_percentage";
                  _os_log_impl(&dword_1830D4000, v192, v196, "%{public}s called with null nw_protocol_options_is_quic(current_quic_options), no backtrace", buf, 0xCu);
                }
                goto LABEL_283;
              }
            }
            else
            {
              id v217 = v96;
              id v180 = __nwlog_obj();
              *(_DWORD *)buf = 136446210;
              unint64_t v237 = "nw_endpoint_transform_get_next_child_scale_percentage";
              int v181 = (char *)_os_log_send_and_compose_impl();

              os_log_type_t v235 = OS_LOG_TYPE_ERROR;
              char v234 = 0;
              if (!__nwlog_fault(v181, &v235, &v234)) {
                goto LABEL_284;
              }
              if (v235 == OS_LOG_TYPE_FAULT)
              {
                id v182 = __nwlog_obj();
                os_log_type_t v183 = v235;
                if (os_log_type_enabled(v182, v235))
                {
                  *(_DWORD *)buf = 136446210;
                  unint64_t v237 = "nw_endpoint_transform_get_next_child_scale_percentage";
                  _os_log_impl(&dword_1830D4000, v182, v183, "%{public}s called with null current_quic_options", buf, 0xCu);
                }
                goto LABEL_277;
              }
              if (!v234)
              {
                id v182 = __nwlog_obj();
                os_log_type_t v200 = v235;
                if (os_log_type_enabled(v182, v235))
                {
                  *(_DWORD *)buf = 136446210;
                  unint64_t v237 = "nw_endpoint_transform_get_next_child_scale_percentage";
                  _os_log_impl(&dword_1830D4000, v182, v200, "%{public}s called with null current_quic_options, backtrace limit exceeded", buf, 0xCu);
                }
                goto LABEL_277;
              }
              v191 = (char *)__nw_create_backtrace_string();
              nw_endpoint_t v192 = __nwlog_obj();
              os_log_type_t v193 = v235;
              BOOL v194 = os_log_type_enabled(v192, v235);
              if (!v191)
              {
                if (v194)
                {
                  *(_DWORD *)buf = 136446210;
                  unint64_t v237 = "nw_endpoint_transform_get_next_child_scale_percentage";
                  _os_log_impl(&dword_1830D4000, v192, v193, "%{public}s called with null current_quic_options, no backtrace", buf, 0xCu);
                }
LABEL_283:

                goto LABEL_284;
              }
              if (v194)
              {
                *(_DWORD *)buf = 136446466;
                unint64_t v237 = "nw_endpoint_transform_get_next_child_scale_percentage";
                __int16 v238 = 2082;
                id_str = v191;
                _os_log_impl(&dword_1830D4000, v192, v193, "%{public}s called with null current_quic_options, dumping backtrace:%{public}s", buf, 0x16u);
              }

              free(v191);
            }
LABEL_284:
            if (!v181)
            {
LABEL_286:

LABEL_287:
              id v96 = v217;
              goto LABEL_151;
            }
LABEL_285:
            free(v181);
            goto LABEL_286;
          }
          id v217 = 0;
          uint64_t v168 = __nwlog_obj();
          *(_DWORD *)buf = 136446210;
          unint64_t v237 = "nw_endpoint_transform_get_next_child_scale_percentage";
          int v169 = (char *)_os_log_send_and_compose_impl();

          os_log_type_t v235 = OS_LOG_TYPE_ERROR;
          char v234 = 0;
          if (__nwlog_fault(v169, &v235, &v234))
          {
            if (v235 == OS_LOG_TYPE_FAULT)
            {
              v170 = __nwlog_obj();
              os_log_type_t v171 = v235;
              if (os_log_type_enabled(v170, v235))
              {
                *(_DWORD *)buf = 136446210;
                unint64_t v237 = "nw_endpoint_transform_get_next_child_scale_percentage";
                _os_log_impl(&dword_1830D4000, v170, v171, "%{public}s called with null next_parameters", buf, 0xCu);
              }
            }
            else
            {
              if (v234)
              {
                nw_endpoint_t v176 = (char *)__nw_create_backtrace_string();
                unint64_t v177 = __nwlog_obj();
                os_log_type_t v178 = v235;
                BOOL v179 = os_log_type_enabled(v177, v235);
                if (v176)
                {
                  if (v179)
                  {
                    *(_DWORD *)buf = 136446466;
                    unint64_t v237 = "nw_endpoint_transform_get_next_child_scale_percentage";
                    __int16 v238 = 2082;
                    id_str = v176;
                    _os_log_impl(&dword_1830D4000, v177, v178, "%{public}s called with null next_parameters, dumping backtrace:%{public}s", buf, 0x16u);
                  }

                  free(v176);
                }
                else
                {
                  if (v179)
                  {
                    *(_DWORD *)buf = 136446210;
                    unint64_t v237 = "nw_endpoint_transform_get_next_child_scale_percentage";
                    _os_log_impl(&dword_1830D4000, v177, v178, "%{public}s called with null next_parameters, no backtrace", buf, 0xCu);
                  }
                }
                goto LABEL_270;
              }
              v170 = __nwlog_obj();
              os_log_type_t v199 = v235;
              if (os_log_type_enabled(v170, v235))
              {
                *(_DWORD *)buf = 136446210;
                unint64_t v237 = "nw_endpoint_transform_get_next_child_scale_percentage";
                _os_log_impl(&dword_1830D4000, v170, v199, "%{public}s called with null next_parameters, backtrace limit exceeded", buf, 0xCu);
              }
            }
          }
LABEL_270:
          if (v169) {
            free(v169);
          }
          goto LABEL_287;
        }
        __int16 v164 = __nwlog_obj();
        *(_DWORD *)buf = 136446210;
        unint64_t v237 = "nw_endpoint_transform_get_next_child_scale_percentage";
        unint64_t v165 = (char *)_os_log_send_and_compose_impl();

        os_log_type_t v235 = OS_LOG_TYPE_ERROR;
        char v234 = 0;
        if (__nwlog_fault(v165, &v235, &v234))
        {
          if (v235 == OS_LOG_TYPE_FAULT)
          {
            unint64_t v166 = __nwlog_obj();
            os_log_type_t v167 = v235;
            if (os_log_type_enabled(v166, v235))
            {
              *(_DWORD *)buf = 136446210;
              unint64_t v237 = "nw_endpoint_transform_get_next_child_scale_percentage";
              _os_log_impl(&dword_1830D4000, v166, v167, "%{public}s called with null current_parameters", buf, 0xCu);
            }
          }
          else
          {
            if (v234)
            {
              unint64_t v172 = (char *)__nw_create_backtrace_string();
              char v173 = __nwlog_obj();
              os_log_type_t v174 = v235;
              BOOL v175 = os_log_type_enabled(v173, v235);
              if (v172)
              {
                if (v175)
                {
                  *(_DWORD *)buf = 136446466;
                  unint64_t v237 = "nw_endpoint_transform_get_next_child_scale_percentage";
                  __int16 v238 = 2082;
                  id_str = v172;
                  _os_log_impl(&dword_1830D4000, v173, v174, "%{public}s called with null current_parameters, dumping backtrace:%{public}s", buf, 0x16u);
                }

                free(v172);
              }
              else
              {
                if (v175)
                {
                  *(_DWORD *)buf = 136446210;
                  unint64_t v237 = "nw_endpoint_transform_get_next_child_scale_percentage";
                  _os_log_impl(&dword_1830D4000, v173, v174, "%{public}s called with null current_parameters, no backtrace", buf, 0xCu);
                }
              }
              goto LABEL_265;
            }
            unint64_t v166 = __nwlog_obj();
            os_log_type_t v198 = v235;
            if (os_log_type_enabled(v166, v235))
            {
              *(_DWORD *)buf = 136446210;
              unint64_t v237 = "nw_endpoint_transform_get_next_child_scale_percentage";
              _os_log_impl(&dword_1830D4000, v166, v198, "%{public}s called with null current_parameters, backtrace limit exceeded", buf, 0xCu);
            }
          }
        }
LABEL_265:
        if (v165) {
          free(v165);
        }
        goto LABEL_152;
      }
      goto LABEL_126;
    }
LABEL_36:
    __int16 v24 = v9;
    BOOL v25 = (*((unsigned char *)v24 + 268) & 0x20) == 0;

    if (!v25)
    {

      goto LABEL_88;
    }
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
    }
    uint64_t v26 = (id)gconnectionLogObj;
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      unint64_t v219 = v26;
      unint64_t v27 = v24;

      unint64_t v28 = v27;
      BOOL v29 = (*((unsigned char *)v24 + 268) & 1) == 0;

      if (v29) {
        os_log_type_t v30 = "";
      }
      else {
        os_log_type_t v30 = "dry-run ";
      }
      nw_endpoint_t v31 = nw_endpoint_handler_copy_endpoint(v28);
      Class v32 = nw_endpoint_get_logging_description(v31);
      unint64_t v33 = v28;
      unint64_t v34 = v33;
      uint64_t v35 = v33[30];
      if (v35 > 5) {
        os_log_type_t v36 = "unknown-state";
      }
      else {
        os_log_type_t v36 = off_1E523FB38[v35];
      }

      int v52 = v34;
      __int16 v53 = v52;
      int v54 = v3->mode;
      unint64_t v55 = "path";
      switch(v54)
      {
        case 0:
          break;
        case 1:
          unint64_t v55 = "resolver";
          break;
        case 2:
          unint64_t v55 = nw_endpoint_flow_mode_string(v52[31]);
          break;
        case 3:
          unint64_t v55 = "proxy";
          break;
        case 4:
          unint64_t v55 = "fallback";
          break;
        case 5:
          unint64_t v55 = "transform";
          break;
        default:
          unint64_t v55 = "unknown-mode";
          break;
      }

      os_log_type_t v78 = v53;
      os_unfair_lock_lock((os_unfair_lock_t)v78 + 28);
      id v79 = v78[8];
      os_unfair_lock_unlock((os_unfair_lock_t)v78 + 28);

      *(_DWORD *)buf = 136448002;
      unint64_t v237 = "nw_endpoint_transform_start_next_child";
      __int16 v238 = 2082;
      id_str = v27->id_str;
      __int16 v240 = 2082;
      int v241 = v30;
      __int16 v242 = 2082;
      unint64_t v243 = v32;
      __int16 v244 = 2082;
      v245 = v36;
      __int16 v246 = 2082;
      int v247 = v55;
      __int16 v248 = 2114;
      id v249 = v79;
      __int16 v250 = 1024;
      LODWORD(v251) = v225;
      _os_log_impl(&dword_1830D4000, v219, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] no child at index %u", buf, 0x4Eu);

      id v228 = 0;
      uint64_t v26 = v219;
    }
    else
    {
      id v228 = 0;
    }
    goto LABEL_86;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  unint64_t v14 = (id)gLogObj;
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    if (mode > 5) {
      BOOL v15 = "unknown-mode";
    }
    else {
      BOOL v15 = off_1E523FB08[mode];
    }
    *(_DWORD *)buf = 136446722;
    unint64_t v237 = "nw_endpoint_transform_start_next_child";
    __int16 v238 = 2082;
    id_str = (char *)v15;
    __int16 v240 = 2082;
    int v241 = "transform";
    _os_log_impl(&dword_1830D4000, v14, OS_LOG_TYPE_DEFAULT, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
  }

LABEL_90:
}

void sub_1832A9734(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21,uint64_t a22,uint64_t a23,void *a24,void *a25)
{
  _Unwind_Resume(a1);
}

uint64_t nw_endpoint_transform_receive_report(void *a1, uint64_t a2, unsigned int a3, _WORD *a4, void *a5, void *a6)
{
  uint64_t v163 = *MEMORY[0x1E4F143B8];
  id v129 = a1;
  id v128 = a5;
  id v10 = a6;
  unint64_t v130 = v10;
  if (!v10)
  {
    id v96 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_endpoint_transform_receive_report";
    int v97 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v139 = 0;
    if (__nwlog_fault(v97, &type, &v139))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        BOOL v98 = __nwlog_obj();
        os_log_type_t v99 = type;
        if (os_log_type_enabled(v98, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_transform_receive_report";
          _os_log_impl(&dword_1830D4000, v98, v99, "%{public}s called with null handler", buf, 0xCu);
        }
      }
      else if (v139)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        BOOL v98 = __nwlog_obj();
        os_log_type_t v101 = type;
        BOOL v102 = os_log_type_enabled(v98, type);
        if (backtrace_string)
        {
          if (v102)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_endpoint_transform_receive_report";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = backtrace_string;
            _os_log_impl(&dword_1830D4000, v98, v101, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_124;
        }
        if (v102)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_transform_receive_report";
          _os_log_impl(&dword_1830D4000, v98, v101, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        BOOL v98 = __nwlog_obj();
        os_log_type_t v103 = type;
        if (os_log_type_enabled(v98, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_transform_receive_report";
          _os_log_impl(&dword_1830D4000, v98, v103, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_124:
    if (v97) {
      free(v97);
    }
    goto LABEL_18;
  }
  BOOL v11 = (unsigned int *)v10;
  uint64_t v12 = v11[29];

  if (v12 == 5)
  {
    id obj = a1;
    unsigned int v125 = a3;
    uint64_t v13 = v11;
    char v14 = *((unsigned char *)v13 + 268);

    id v126 = v13;
    if ((v14 & 0x20) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      BOOL v15 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
      {
        unint64_t v16 = v13;

        __int16 v17 = v16;
        char v18 = *((unsigned char *)v13 + 268);

        if (v18) {
          uint64_t v19 = "dry-run ";
        }
        else {
          uint64_t v19 = "";
        }
        os_log_t log = v15;
        nw_endpoint_t v121 = nw_endpoint_handler_copy_endpoint(v17);
        logging_description = nw_endpoint_get_logging_description(v121);
        unint64_t v21 = v17;
        int v22 = v21;
        uint64_t v23 = v21[30];
        if (v23 > 5) {
          __int16 v24 = "unknown-state";
        }
        else {
          __int16 v24 = off_1E523FB38[v23];
        }
        id v120 = v24;

        unint64_t v28 = v22;
        BOOL v29 = "path";
        switch(v11[29])
        {
          case 0u:
            break;
          case 1u:
            BOOL v29 = "resolver";
            break;
          case 2u:
            BOOL v29 = nw_endpoint_flow_mode_string(v28[31]);
            break;
          case 3u:
            BOOL v29 = "proxy";
            break;
          case 4u:
            BOOL v29 = "fallback";
            break;
          case 5u:
            BOOL v29 = "transform";
            break;
          default:
            BOOL v29 = "unknown-mode";
            break;
        }
        BOOL v119 = v29;

        os_log_type_t v30 = v28;
        os_unfair_lock_lock((os_unfair_lock_t)v30 + 28);
        id v31 = v30[8];
        os_unfair_lock_unlock((os_unfair_lock_t)v30 + 28);

        id v32 = v31;
        id_string = nw_endpoint_handler_get_id_string(v129);
        unint64_t v33 = nw_endpoint_handler_dry_run_string(v129);
        nw_endpoint_t v34 = nw_endpoint_handler_copy_endpoint(v129);
        uint64_t v35 = logging_description;
        os_log_type_t v36 = v19;
        BOOL v37 = nw_endpoint_get_logging_description(v34);
        id v38 = (char *)(v16 + 42);
        BOOL v39 = nw_endpoint_handler_state_string(v129);
        unint64_t v40 = nw_endpoint_handler_mode_string(v129);
        id v41 = nw_endpoint_handler_copy_current_path(v129);
        *(_DWORD *)buf = 136449282;
        *(void *)&uint8_t buf[4] = "nw_endpoint_transform_receive_report";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = v38;
        *(_WORD *)&unsigned char buf[22] = 2082;
        unint64_t v142 = v36;
        __int16 v143 = 2082;
        id v144 = v35;
        __int16 v145 = 2082;
        unsigned int v146 = v120;
        __int16 v147 = 2082;
        unint64_t v148 = v119;
        __int16 v149 = 2114;
        id v150 = v32;
        __int16 v151 = 2082;
        id v152 = id_string;
        __int16 v153 = 2082;
        unint64_t v154 = v33;
        __int16 v155 = 2082;
        __int16 v156 = v37;
        __int16 v157 = 2082;
        __int16 v158 = v39;
        __int16 v159 = 2082;
        unint64_t v160 = v40;
        __int16 v161 = 2114;
        id v162 = v41;
        BOOL v15 = log;
        _os_log_impl(&dword_1830D4000, log, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] received child report: [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] ", buf, 0x84u);
      }
      uint64_t v13 = v126;
    }
    BOOL v42 = v129;
    nw_endpoint_handler_report(v13, v129, a4, v128);
    BOOL v43 = nw_endpoint_handler_copy_transform((NWConcrete_nw_endpoint_handler *)v13);
    nw_endpoint_t v44 = v43;
    nw_endpoint_t v46 = (id *)((char *)v43 + 48);
    id v45 = (id)*((void *)v43 + 6);
    if (v45 == v129)
    {
      int64_t v59 = v13;
      v59[30] = v125;

      nw_endpoint_handler_report(v59, 0, a4, 0);
    }
    else
    {
      uint64_t v47 = *((void *)v43 + 1);
      if (!v47 || !v129) {
        goto LABEL_85;
      }
      id v49 = *(id **)(v47 + 16);
      unint64_t v48 = *(id **)(v47 + 24);
      if (v49 != v48)
      {
        while (*v49 != v129)
        {
          if (++v49 == v48)
          {
            id v49 = v48;
            break;
          }
        }
      }
      if (v49 == v48) {
        goto LABEL_85;
      }
      if (*((void *)v43 + 4)) {
        BOOL v50 = a4 == 0;
      }
      else {
        BOOL v50 = 1;
      }
      BOOL v51 = !v50 && v45 == 0;
      if (v51 && *a4 == 2 && a4[1] == 8)
      {
        id v61 = *((id *)v43 + 7);
        nw_endpoint_t v62 = nw_endpoint_handler_copy_endpoint(v129);
        id v63 = nw_endpoint_handler_copy_endpoint_for_alternatives(v129);
        if (v63 && nw_endpoint_is_equal(v61, v62, 8) && (nw_endpoint_is_equal(v61, v63, 8) & 1) == 0)
        {
          os_log_t loga = v62;
          *(void *)buf = 0;
          *(void *)&buf[8] = buf;
          *(void *)&buf[16] = 0x2020000000;
          LOBYTE(v142) = 0;
          v135[0] = MEMORY[0x1E4F143A8];
          v135[1] = 3221225472;
          v135[2] = ___ZL36nw_endpoint_transform_receive_reportP30NWConcrete_nw_endpoint_handler26nw_endpoint_handler_mode_t21nw_connection_state_tP27nw_endpoint_handler_event_sPU22objcproto11OS_nw_error8NSObjectPU23objcproto12OS_nw_objectS5__block_invoke;
          v135[3] = &unk_1E5249790;
          unsigned int v64 = v44;
          BOOL v136 = v64;
          int v65 = v13;
          os_log_type_t v137 = v65;
          uint64_t v138 = buf;
          nw_endpoint_enumerate_alternatives(v63, v135);
          if (*(unsigned char *)(*(void *)&buf[8] + 24))
          {
            v65->event = (nw_endpoint_handler_event_s)196615;
            nw_endpoint_handler_report(v65, 0, &v65->event.domain, 0);
            [(NWConcrete_nw_endpoint_mode_handler *)v64 cancelWithHandler:v65 forced:1];
            objc_storeStrong((id *)v44 + 7, v63);
            nw_endpoint_transform_add_children(v65);
            nw_endpoint_transform_start_next_child(v65);
          }

          _Block_object_dispose(buf, 8);
          nw_endpoint_t v62 = loga;
        }

        BOOL v42 = v129;
        uint64_t v13 = v126;
      }
      if (v125 == 3)
      {
        objc_storeStrong(v46, obj);
        int v52 = v126;
        v52[30] = 3;
LABEL_46:

        __int16 v53 = v126;
        nw_endpoint_handler_report(v126, 0, a4, 0);
        uint64_t v54 = *((void *)v44 + 8);
        if (v54)
        {
          nw_queue_cancel_source(v54);
          *((void *)v44 + 8) = 0;
        }
        id v55 = nw_endpoint_handler_copy_parameters(v129);
        id v56 = v55;
        if (v55)
        {
          if (nw_parameters_get_upper_transport_protocol(v55) == 253)
          {
            *((_DWORD *)v44 + 21) = 253;
            int v57 = v126;
            id v58 = v57[7];

            if (v58) {
              nw_quic_report_race_result_on_queue(v58, 1, 0);
            }

            __int16 v53 = v126;
          }
          else
          {
            *((_DWORD *)v44 + 21) = nw_parameters_get_ip_protocol(v56);
          }
        }
        id v74 = (atomic_uchar *)*((void *)v44 + 1);
        v131[0] = MEMORY[0x1E4F143A8];
        v131[1] = 3221225472;
        v131[2] = ___ZL36nw_endpoint_transform_receive_reportP30NWConcrete_nw_endpoint_handler26nw_endpoint_handler_mode_t21nw_connection_state_tP27nw_endpoint_handler_event_sPU22objcproto11OS_nw_error8NSObjectPU23objcproto12OS_nw_objectS5__block_invoke_103;
        v131[3] = &unk_1E52497B8;
        os_log_type_t v132 = v44;
        id v133 = v129;
        v134 = v53;
        nw_array_apply(v74, (uint64_t)v131);

        goto LABEL_84;
      }
      if (v125 == 2 && a4)
      {
        if (*a4 != 3 || a4[1] != 5) {
          goto LABEL_85;
        }
        id v60 = v42;
        int v52 = (unsigned int *)*v46;
        *nw_endpoint_t v46 = v60;
        goto LABEL_46;
      }
      if (v125 == 4)
      {
        uint64_t v66 = *((void *)v44 + 2);
        if (v66)
        {
          unint64_t v68 = *(void ***)(v66 + 16);
          uint64_t v67 = *(void ***)(v66 + 24);
          if (v68 != v67)
          {
            while (*v68 != v42)
            {
              if (++v68 == v67)
              {
                unint64_t v68 = *(void ***)(v66 + 24);
                break;
              }
            }
          }
          if (v68 != v67)
          {
LABEL_78:
            id v56 = nw_endpoint_handler_copy_parameters(v42);
            if (nw_parameters_get_upper_transport_protocol(v56) == 253)
            {
              id v71 = nw_endpoint_handler_copy_association(v13, 0);
              nw_quic_report_race_result_on_queue(v71, 0, 0);

              uint64_t v13 = v126;
            }
            uint64_t v72 = *((void *)v44 + 2);
            if (v72) {
              uint64_t v73 = (uint64_t)(*(void *)(v72 + 24) - *(void *)(v72 + 16)) >> 3;
            }
            else {
              uint64_t v73 = 0;
            }
            uint64_t v76 = *((void *)v44 + 1);
            if (v76) {
              uint64_t v77 = (uint64_t)(*(void *)(v76 + 24) - *(void *)(v76 + 16)) >> 3;
            }
            else {
              uint64_t v77 = 0;
            }
            int minimize_logging = nw_endpoint_handler_get_minimize_logging(v13);
            char logging_disabled = nw_endpoint_handler_get_logging_disabled(v13);
            if (v73 == v77)
            {
              if (minimize_logging)
              {
                if (logging_disabled) {
                  goto LABEL_99;
                }
                if (__nwlog_connection_log::onceToken != -1) {
                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
                }
                id v80 = (id)gconnectionLogObj;
                if (os_log_type_enabled(v80, OS_LOG_TYPE_DEBUG))
                {
                  BOOL v104 = nw_endpoint_handler_get_id_string(v126);
                  unint64_t v105 = nw_endpoint_handler_dry_run_string(v126);
                  nw_endpoint_t v106 = nw_endpoint_handler_copy_endpoint(v126);
                  id v107 = nw_endpoint_get_logging_description(v106);
                  os_log_type_t v108 = nw_endpoint_handler_state_string(v126);
                  int v109 = nw_endpoint_handler_mode_string(v126);
                  id v110 = nw_endpoint_handler_copy_current_path(v126);
                  *(_DWORD *)buf = 136447746;
                  *(void *)&uint8_t buf[4] = "nw_endpoint_transform_receive_report";
                  *(_WORD *)&unsigned char buf[12] = 2082;
                  *(void *)&buf[14] = v104;
                  *(_WORD *)&unsigned char buf[22] = 2082;
                  unint64_t v142 = v105;
                  __int16 v143 = 2082;
                  id v144 = v107;
                  __int16 v145 = 2082;
                  unsigned int v146 = v108;
                  __int16 v147 = 2082;
                  unint64_t v148 = v109;
                  __int16 v149 = 2114;
                  id v150 = v110;
                  _os_log_impl(&dword_1830D4000, v80, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] all children failed", buf, 0x48u);
                }
              }
              else
              {
                if (logging_disabled)
                {
LABEL_99:
                  nw_endpoint_handler_handle_failure(v13);
                  v13[20] = 131079;
                  nw_endpoint_handler_report(v13, 0, (_WORD *)v13 + 40, 0);
LABEL_84:

                  goto LABEL_85;
                }
                if (__nwlog_connection_log::onceToken != -1) {
                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
                }
                id v80 = (id)gconnectionLogObj;
                if (os_log_type_enabled(v80, OS_LOG_TYPE_INFO))
                {
                  unsigned int v81 = nw_endpoint_handler_get_id_string(v13);
                  BOOL v82 = nw_endpoint_handler_dry_run_string(v13);
                  nw_endpoint_t v83 = nw_endpoint_handler_copy_endpoint(v13);
                  int v84 = nw_endpoint_get_logging_description(v83);
                  unint64_t v85 = nw_endpoint_handler_state_string(v13);
                  os_log_type_t v86 = nw_endpoint_handler_mode_string(v13);
                  id v87 = nw_endpoint_handler_copy_current_path(v13);
                  *(_DWORD *)buf = 136447746;
                  *(void *)&uint8_t buf[4] = "nw_endpoint_transform_receive_report";
                  *(_WORD *)&unsigned char buf[12] = 2082;
                  *(void *)&buf[14] = v81;
                  *(_WORD *)&unsigned char buf[22] = 2082;
                  unint64_t v142 = v82;
                  __int16 v143 = 2082;
                  id v144 = v84;
                  __int16 v145 = 2082;
                  unsigned int v146 = v85;
                  __int16 v147 = 2082;
                  unint64_t v148 = v86;
                  __int16 v149 = 2114;
                  id v150 = v87;
                  _os_log_impl(&dword_1830D4000, v80, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] all children failed", buf, 0x48u);
                }
              }

              uint64_t v13 = v126;
              goto LABEL_99;
            }
            if (minimize_logging)
            {
              if (logging_disabled) {
                goto LABEL_107;
              }
              if (__nwlog_connection_log::onceToken != -1) {
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
              }
              nw_endpoint_t v88 = (id)gconnectionLogObj;
              if (os_log_type_enabled(v88, OS_LOG_TYPE_DEBUG))
              {
                id v111 = nw_endpoint_handler_get_id_string(v126);
                unint64_t v112 = nw_endpoint_handler_dry_run_string(v126);
                nw_endpoint_t v113 = nw_endpoint_handler_copy_endpoint(v126);
                unint64_t v114 = nw_endpoint_get_logging_description(v113);
                int v115 = nw_endpoint_handler_state_string(v126);
                int v116 = nw_endpoint_handler_mode_string(v126);
                id v117 = nw_endpoint_handler_copy_current_path(v126);
                *(_DWORD *)buf = 136447746;
                *(void *)&uint8_t buf[4] = "nw_endpoint_transform_receive_report";
                *(_WORD *)&unsigned char buf[12] = 2082;
                *(void *)&buf[14] = v111;
                *(_WORD *)&unsigned char buf[22] = 2082;
                unint64_t v142 = v112;
                __int16 v143 = 2082;
                id v144 = v114;
                __int16 v145 = 2082;
                unsigned int v146 = v115;
                __int16 v147 = 2082;
                unint64_t v148 = v116;
                __int16 v149 = 2114;
                id v150 = v117;
                _os_log_impl(&dword_1830D4000, v88, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] all started children failed, start next child.", buf, 0x48u);
              }
            }
            else
            {
              if (logging_disabled)
              {
LABEL_107:
                nw_endpoint_transform_start_next_child((NWConcrete_nw_endpoint_handler *)v13);
                goto LABEL_84;
              }
              if (__nwlog_connection_log::onceToken != -1) {
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
              }
              nw_endpoint_t v88 = (id)gconnectionLogObj;
              if (os_log_type_enabled(v88, OS_LOG_TYPE_INFO))
              {
                os_log_type_t v89 = nw_endpoint_handler_get_id_string(v13);
                __int16 v90 = nw_endpoint_handler_dry_run_string(v13);
                nw_endpoint_t v91 = nw_endpoint_handler_copy_endpoint(v13);
                BOOL v92 = nw_endpoint_get_logging_description(v91);
                os_log_type_t v93 = nw_endpoint_handler_state_string(v13);
                id v94 = nw_endpoint_handler_mode_string(v13);
                id v95 = nw_endpoint_handler_copy_current_path(v13);
                *(_DWORD *)buf = 136447746;
                *(void *)&uint8_t buf[4] = "nw_endpoint_transform_receive_report";
                *(_WORD *)&unsigned char buf[12] = 2082;
                *(void *)&buf[14] = v89;
                *(_WORD *)&unsigned char buf[22] = 2082;
                unint64_t v142 = v90;
                __int16 v143 = 2082;
                id v144 = v92;
                __int16 v145 = 2082;
                unsigned int v146 = v93;
                __int16 v147 = 2082;
                unint64_t v148 = v94;
                __int16 v149 = 2114;
                id v150 = v95;
                _os_log_impl(&dword_1830D4000, v88, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] all started children failed, start next child.", buf, 0x48u);
              }
            }

            uint64_t v13 = v126;
            goto LABEL_107;
          }
        }
        else
        {
          BOOL v69 = nw_array_create();
          nw_endpoint_t v70 = (void *)*((void *)v44 + 2);
          *((void *)v44 + 2) = v69;

          uint64_t v66 = *((void *)v44 + 2);
          BOOL v42 = v129;
          uint64_t v13 = v126;
        }
        nw_array_append(v66, v42);
        goto LABEL_78;
      }
    }
LABEL_85:

    uint64_t v27 = 1;
    goto LABEL_86;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  BOOL v25 = (id)gLogObj;
  if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
  {
    if (v12 > 5) {
      uint64_t v26 = "unknown-mode";
    }
    else {
      uint64_t v26 = off_1E523FB08[v12];
    }
    *(_DWORD *)buf = 136446722;
    *(void *)&uint8_t buf[4] = "nw_endpoint_transform_receive_report";
    *(_WORD *)&unsigned char buf[12] = 2082;
    *(void *)&buf[14] = v26;
    *(_WORD *)&unsigned char buf[22] = 2082;
    unint64_t v142 = "transform";
    _os_log_impl(&dword_1830D4000, v25, OS_LOG_TYPE_DEFAULT, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
  }

LABEL_18:
  uint64_t v27 = 0;
LABEL_86:

  return v27;
}

void sub_1832AAA00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,void *a22)
{
  _Unwind_Resume(a1);
}

NWConcrete_nw_endpoint_mode_handler *nw_endpoint_handler_copy_transform(NWConcrete_nw_endpoint_handler *a1)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1->mode == 5)
  {
    uint64_t v3 = v1->mode_handler;
  }
  else
  {
    if ((*((unsigned char *)v1 + 268) & 0x20) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      nw_report_protocol_enumerator_t v4 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        if (*((unsigned char *)v2 + 268)) {
          uint64_t v5 = "dry-run ";
        }
        else {
          uint64_t v5 = "";
        }
        nw_endpoint_t v6 = nw_endpoint_handler_copy_endpoint(v2);
        logging_description = nw_endpoint_get_logging_description(v6);
        uint64_t state = v2->state;
        BOOL v9 = logging_description;
        if (state > 5) {
          id v10 = "unknown-state";
        }
        else {
          id v10 = off_1E523FB38[state];
        }
        int v22 = v10;
        BOOL v11 = v2;
        uint64_t v12 = (os_unfair_lock_s *)v11;
        uint64_t v13 = "path";
        switch(v2->mode)
        {
          case 0:
            break;
          case 1:
            uint64_t v13 = "resolver";
            break;
          case 2:
            uint64_t v13 = nw_endpoint_flow_mode_string(v11->mode_handler);
            break;
          case 3:
            uint64_t v13 = "proxy";
            break;
          case 4:
            uint64_t v13 = "fallback";
            break;
          case 5:
            uint64_t v13 = "transform";
            break;
          default:
            uint64_t v13 = "unknown-mode";
            break;
        }

        char v14 = v12 + 28;
        BOOL v15 = v12;
        os_unfair_lock_lock(v12 + 28);
        id v16 = v15[8];
        os_unfair_lock_unlock(v14);

        id v17 = v16;
        char v18 = v15;
        uint64_t v19 = v18;
        uint64_t v20 = "path";
        switch(v2->mode)
        {
          case 0:
            break;
          case 1:
            uint64_t v20 = "resolver";
            break;
          case 2:
            uint64_t v20 = nw_endpoint_flow_mode_string(v18[31]);
            break;
          case 3:
            uint64_t v20 = "proxy";
            break;
          case 4:
            uint64_t v20 = "fallback";
            break;
          case 5:
            uint64_t v20 = "transform";
            break;
          default:
            uint64_t v20 = "unknown-mode";
            break;
        }

        *(_DWORD *)buf = 136448002;
        __int16 v24 = "nw_endpoint_handler_copy_transform";
        __int16 v25 = 2082;
        id_str = v2->id_str;
        __int16 v27 = 2082;
        unint64_t v28 = v5;
        __int16 v29 = 2082;
        os_log_type_t v30 = v9;
        __int16 v31 = 2082;
        id v32 = v22;
        __int16 v33 = 2082;
        nw_endpoint_t v34 = v13;
        __int16 v35 = 2114;
        id v36 = v17;
        __int16 v37 = 2082;
        id v38 = v20;
        _os_log_impl(&dword_1830D4000, v4, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Endpoint handler is %{public}s, not transform", buf, 0x52u);
      }
    }
    uint64_t v3 = 0;
  }

  return v3;
}

void sub_1832AAE8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_endpoint_handler_get_mode(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = v1[29];
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  id v16 = "nw_endpoint_handler_get_mode";
  nw_endpoint_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        id v16 = "nw_endpoint_handler_get_mode";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null handler", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          id v16 = "nw_endpoint_handler_get_mode";
          __int16 v17 = 2082;
          char v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        id v16 = "nw_endpoint_handler_get_mode";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null handler, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        id v16 = "nw_endpoint_handler_get_mode";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

BOOL nw_quic_connection_get_is_speculative_attempt(void *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (nw_protocol_options_is_quic_connection(v1))
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000;
    char v16 = 0;
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_quic_connection_get_is_speculative_attempt_block_invoke;
    v12[3] = &unk_1E5248E90;
    void v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    BOOL v2 = *(unsigned char *)(*(void *)&buf[8] + 24) != 0;
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  nw_report_protocol_enumerator_t v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_quic_connection_get_is_speculative_attempt";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      nw_endpoint_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_is_speculative_attempt";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_options_is_quic_connection(options)", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      nw_endpoint_t v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_quic_connection_get_is_speculative_attempt";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_is_speculative_attempt";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      nw_endpoint_t v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_is_speculative_attempt";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
  BOOL v2 = 0;
LABEL_3:

  return v2;
}

void sub_1832AB464(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

void nw_quic_report_race_result_on_queue(void *a1, int a2, int a3)
{
  uint64_t v95 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  if (!v5)
  {
    int64_t v59 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v86 = "nw_quic_report_race_result_on_queue";
    id v60 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v83 = 0;
    if (__nwlog_fault(v60, &type, &v83))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        id v61 = __nwlog_obj();
        os_log_type_t v62 = type;
        if (os_log_type_enabled(v61, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v86 = "nw_quic_report_race_result_on_queue";
          _os_log_impl(&dword_1830D4000, v61, v62, "%{public}s called with null association", buf, 0xCu);
        }
      }
      else if (v83)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        id v61 = __nwlog_obj();
        os_log_type_t v68 = type;
        BOOL v69 = os_log_type_enabled(v61, type);
        if (backtrace_string)
        {
          if (v69)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v86 = "nw_quic_report_race_result_on_queue";
            __int16 v87 = 2082;
            nw_endpoint_t v88 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v61, v68, "%{public}s called with null association, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_119;
        }
        if (v69)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v86 = "nw_quic_report_race_result_on_queue";
          _os_log_impl(&dword_1830D4000, v61, v68, "%{public}s called with null association, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        id v61 = __nwlog_obj();
        os_log_type_t v77 = type;
        if (os_log_type_enabled(v61, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v86 = "nw_quic_report_race_result_on_queue";
          _os_log_impl(&dword_1830D4000, v61, v77, "%{public}s called with null association, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_119:
    if (v60) {
      free(v60);
    }
    goto LABEL_77;
  }
  if (nw_protocol_copy_quic_connection_definition::onceToken != -1) {
    dispatch_once(&nw_protocol_copy_quic_connection_definition::onceToken, &__block_literal_global_55981);
  }
  id v6 = (id)nw_protocol_copy_quic_connection_definition::quic_definition;
  if (!v6)
  {
    id v63 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v86 = "nw_quic_report_race_result_on_queue";
    unsigned int v64 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v83 = 0;
    if (!__nwlog_fault(v64, &type, &v83)) {
      goto LABEL_130;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v65 = __nwlog_obj();
      os_log_type_t v66 = type;
      if (os_log_type_enabled(v65, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v86 = "nw_quic_report_race_result_on_queue";
        _os_log_impl(&dword_1830D4000, v65, v66, "%{public}s called with null definition", buf, 0xCu);
      }
    }
    else if (v83)
    {
      nw_endpoint_t v70 = (char *)__nw_create_backtrace_string();
      int v65 = __nwlog_obj();
      os_log_type_t v71 = type;
      BOOL v72 = os_log_type_enabled(v65, type);
      if (v70)
      {
        if (v72)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v86 = "nw_quic_report_race_result_on_queue";
          __int16 v87 = 2082;
          nw_endpoint_t v88 = v70;
          _os_log_impl(&dword_1830D4000, v65, v71, "%{public}s called with null definition, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v70);
LABEL_130:
        if (!v64) {
          goto LABEL_76;
        }
LABEL_131:
        free(v64);
        goto LABEL_76;
      }
      if (v72)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v86 = "nw_quic_report_race_result_on_queue";
        _os_log_impl(&dword_1830D4000, v65, v71, "%{public}s called with null definition, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int v65 = __nwlog_obj();
      os_log_type_t v78 = type;
      if (os_log_type_enabled(v65, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v86 = "nw_quic_report_race_result_on_queue";
        _os_log_impl(&dword_1830D4000, v65, v78, "%{public}s called with null definition, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_129:

    goto LABEL_130;
  }
  cached_content_for_protocol = (unsigned int *)nw_association_get_cached_content_for_protocol(v5, v6);
  if (cached_content_for_protocol
    || (cached_content_for_protocol = (unsigned int *)malloc_type_calloc(1uLL, 0x30uLL, 0xEAFB8F1AuLL)) != 0)
  {
    if (a2)
    {
      uint64_t v8 = cached_content_for_protocol[6] + 1;
      uint64_t v9 = v8 << 31 >> 31;
      cached_content_for_protocol[6] = v8;
      if (v9 == v8 && (v9 & 0x8000000000000000) == 0) {
        goto LABEL_75;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v10 = (id)gLogObj;
      uint64_t v11 = cached_content_for_protocol[6];
      *(_DWORD *)buf = 136446978;
      os_log_type_t v86 = "nw_quic_report_race_result_on_queue";
      __int16 v87 = 2082;
      nw_endpoint_t v88 = "association_cache->success_count";
      __int16 v89 = 2048;
      uint64_t v90 = 1;
      __int16 v91 = 2048;
      uint64_t v92 = v11;
      os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v83 = 0;
      if (__nwlog_fault(v12, &type, &v83))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          char v13 = (id)gLogObj;
          os_log_type_t v14 = type;
          if (os_log_type_enabled(v13, type))
          {
            uint64_t v15 = cached_content_for_protocol[6];
            *(_DWORD *)buf = 136446978;
            os_log_type_t v86 = "nw_quic_report_race_result_on_queue";
            __int16 v87 = 2082;
            nw_endpoint_t v88 = "association_cache->success_count";
            __int16 v89 = 2048;
            uint64_t v90 = 1;
            __int16 v91 = 2048;
            uint64_t v92 = v15;
            _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s Overflow: %{public}s, increment %llu, result %llu", buf, 0x2Au);
          }
        }
        else if (v83)
        {
          id v32 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          char v13 = (id)gLogObj;
          os_log_type_t v33 = type;
          BOOL v34 = os_log_type_enabled(v13, type);
          if (v32)
          {
            if (v34)
            {
              uint64_t v35 = cached_content_for_protocol[6];
              *(_DWORD *)buf = 136447234;
              os_log_type_t v86 = "nw_quic_report_race_result_on_queue";
              __int16 v87 = 2082;
              nw_endpoint_t v88 = "association_cache->success_count";
              __int16 v89 = 2048;
              uint64_t v90 = 1;
              __int16 v91 = 2048;
              uint64_t v92 = v35;
              __int16 v93 = 2082;
              id v94 = v32;
              _os_log_impl(&dword_1830D4000, v13, v33, "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
            }

            free(v32);
            if (!v12) {
              goto LABEL_56;
            }
            goto LABEL_55;
          }
          if (v34)
          {
            uint64_t v48 = cached_content_for_protocol[6];
            *(_DWORD *)buf = 136446978;
            os_log_type_t v86 = "nw_quic_report_race_result_on_queue";
            __int16 v87 = 2082;
            nw_endpoint_t v88 = "association_cache->success_count";
            __int16 v89 = 2048;
            uint64_t v90 = 1;
            __int16 v91 = 2048;
            uint64_t v92 = v48;
            _os_log_impl(&dword_1830D4000, v13, v33, "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace", buf, 0x2Au);
          }
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          char v13 = (id)gLogObj;
          os_log_type_t v46 = type;
          if (os_log_type_enabled(v13, type))
          {
            uint64_t v47 = cached_content_for_protocol[6];
            *(_DWORD *)buf = 136446978;
            os_log_type_t v86 = "nw_quic_report_race_result_on_queue";
            __int16 v87 = 2082;
            nw_endpoint_t v88 = "association_cache->success_count";
            __int16 v89 = 2048;
            uint64_t v90 = 1;
            __int16 v91 = 2048;
            uint64_t v92 = v47;
            _os_log_impl(&dword_1830D4000, v13, v46, "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded", buf, 0x2Au);
          }
        }
      }
      if (!v12)
      {
LABEL_56:
        cached_content_for_protocol[6] = -1;
LABEL_75:
        int64_t int64_with_default = networkd_settings_get_int64_with_default((const char *)nw_setting_quic_failure_cache_seconds, 1800);
        time_t v58 = time(0);
        nw_association_set_cached_content_for_protocol(v5, v6, (uint64_t)cached_content_for_protocol, v58 + int64_with_default);
LABEL_76:

LABEL_77:
        return;
      }
LABEL_55:
      free(v12);
      goto LABEL_56;
    }
    if (a3)
    {
      uint64_t v16 = cached_content_for_protocol[8] + 1;
      uint64_t v17 = v16 << 31 >> 31;
      cached_content_for_protocol[8] = v16;
      if (v17 == v16 && (v17 & 0x8000000000000000) == 0) {
        goto LABEL_75;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v18 = (id)gLogObj;
      uint64_t v19 = cached_content_for_protocol[8];
      *(_DWORD *)buf = 136446978;
      os_log_type_t v86 = "nw_quic_report_race_result_on_queue";
      __int16 v87 = 2082;
      nw_endpoint_t v88 = "association_cache->cancelled_count";
      __int16 v89 = 2048;
      uint64_t v90 = 1;
      __int16 v91 = 2048;
      uint64_t v92 = v19;
      uint64_t v20 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v83 = 0;
      if (__nwlog_fault(v20, &type, &v83))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          unint64_t v21 = (id)gLogObj;
          os_log_type_t v22 = type;
          if (os_log_type_enabled(v21, type))
          {
            uint64_t v23 = cached_content_for_protocol[8];
            *(_DWORD *)buf = 136446978;
            os_log_type_t v86 = "nw_quic_report_race_result_on_queue";
            __int16 v87 = 2082;
            nw_endpoint_t v88 = "association_cache->cancelled_count";
            __int16 v89 = 2048;
            uint64_t v90 = 1;
            __int16 v91 = 2048;
            uint64_t v92 = v23;
            _os_log_impl(&dword_1830D4000, v21, v22, "%{public}s Overflow: %{public}s, increment %llu, result %llu", buf, 0x2Au);
          }
        }
        else if (v83)
        {
          id v36 = __nw_create_backtrace_string();
          if (v36)
          {
            __int16 v37 = (char *)v36;
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            id v38 = (id)gLogObj;
            os_log_type_t v39 = type;
            if (os_log_type_enabled(v38, type))
            {
              uint64_t v40 = cached_content_for_protocol[8];
              *(_DWORD *)buf = 136447234;
              os_log_type_t v86 = "nw_quic_report_race_result_on_queue";
              __int16 v87 = 2082;
              nw_endpoint_t v88 = "association_cache->cancelled_count";
              __int16 v89 = 2048;
              uint64_t v90 = 1;
              __int16 v91 = 2048;
              uint64_t v92 = v40;
              __int16 v93 = 2082;
              id v94 = v37;
              _os_log_impl(&dword_1830D4000, v38, v39, "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
            }

            free(v37);
            if (!v20) {
              goto LABEL_68;
            }
            goto LABEL_67;
          }
          unint64_t v21 = __nwlog_obj();
          os_log_type_t v53 = type;
          if (os_log_type_enabled(v21, type))
          {
            uint64_t v54 = cached_content_for_protocol[8];
            *(_DWORD *)buf = 136446978;
            os_log_type_t v86 = "nw_quic_report_race_result_on_queue";
            __int16 v87 = 2082;
            nw_endpoint_t v88 = "association_cache->cancelled_count";
            __int16 v89 = 2048;
            uint64_t v90 = 1;
            __int16 v91 = 2048;
            uint64_t v92 = v54;
            _os_log_impl(&dword_1830D4000, v21, v53, "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace", buf, 0x2Au);
          }
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          unint64_t v21 = (id)gLogObj;
          os_log_type_t v49 = type;
          if (os_log_type_enabled(v21, type))
          {
            uint64_t v50 = cached_content_for_protocol[8];
            *(_DWORD *)buf = 136446978;
            os_log_type_t v86 = "nw_quic_report_race_result_on_queue";
            __int16 v87 = 2082;
            nw_endpoint_t v88 = "association_cache->cancelled_count";
            __int16 v89 = 2048;
            uint64_t v90 = 1;
            __int16 v91 = 2048;
            uint64_t v92 = v50;
            _os_log_impl(&dword_1830D4000, v21, v49, "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded", buf, 0x2Au);
          }
        }
      }
      if (!v20)
      {
LABEL_68:
        cached_content_for_protocol[8] = -1;
        goto LABEL_75;
      }
LABEL_67:
      free(v20);
      goto LABEL_68;
    }
    uint64_t v24 = cached_content_for_protocol[7] + 1;
    uint64_t v25 = v24 << 31 >> 31;
    cached_content_for_protocol[7] = v24;
    if (v25 == v24 && (v25 & 0x8000000000000000) == 0) {
      goto LABEL_75;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v26 = (id)gLogObj;
    uint64_t v27 = cached_content_for_protocol[7];
    *(_DWORD *)buf = 136446978;
    os_log_type_t v86 = "nw_quic_report_race_result_on_queue";
    __int16 v87 = 2082;
    nw_endpoint_t v88 = "association_cache->failure_count";
    __int16 v89 = 2048;
    uint64_t v90 = 1;
    __int16 v91 = 2048;
    uint64_t v92 = v27;
    unint64_t v28 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v83 = 0;
    if (__nwlog_fault(v28, &type, &v83))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        __int16 v29 = (id)gLogObj;
        os_log_type_t v30 = type;
        if (os_log_type_enabled(v29, type))
        {
          uint64_t v31 = cached_content_for_protocol[7];
          *(_DWORD *)buf = 136446978;
          os_log_type_t v86 = "nw_quic_report_race_result_on_queue";
          __int16 v87 = 2082;
          nw_endpoint_t v88 = "association_cache->failure_count";
          __int16 v89 = 2048;
          uint64_t v90 = 1;
          __int16 v91 = 2048;
          uint64_t v92 = v31;
          _os_log_impl(&dword_1830D4000, v29, v30, "%{public}s Overflow: %{public}s, increment %llu, result %llu", buf, 0x2Au);
        }
      }
      else if (v83)
      {
        id v41 = __nw_create_backtrace_string();
        if (v41)
        {
          BOOL v42 = (char *)v41;
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          BOOL v43 = (id)gLogObj;
          os_log_type_t v44 = type;
          if (os_log_type_enabled(v43, type))
          {
            uint64_t v45 = cached_content_for_protocol[7];
            *(_DWORD *)buf = 136447234;
            os_log_type_t v86 = "nw_quic_report_race_result_on_queue";
            __int16 v87 = 2082;
            nw_endpoint_t v88 = "association_cache->failure_count";
            __int16 v89 = 2048;
            uint64_t v90 = 1;
            __int16 v91 = 2048;
            uint64_t v92 = v45;
            __int16 v93 = 2082;
            id v94 = v42;
            _os_log_impl(&dword_1830D4000, v43, v44, "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
          }

          free(v42);
          if (!v28) {
            goto LABEL_74;
          }
          goto LABEL_73;
        }
        __int16 v29 = __nwlog_obj();
        os_log_type_t v55 = type;
        if (os_log_type_enabled(v29, type))
        {
          uint64_t v56 = cached_content_for_protocol[7];
          *(_DWORD *)buf = 136446978;
          os_log_type_t v86 = "nw_quic_report_race_result_on_queue";
          __int16 v87 = 2082;
          nw_endpoint_t v88 = "association_cache->failure_count";
          __int16 v89 = 2048;
          uint64_t v90 = 1;
          __int16 v91 = 2048;
          uint64_t v92 = v56;
          _os_log_impl(&dword_1830D4000, v29, v55, "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace", buf, 0x2Au);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        __int16 v29 = (id)gLogObj;
        os_log_type_t v51 = type;
        if (os_log_type_enabled(v29, type))
        {
          uint64_t v52 = cached_content_for_protocol[7];
          *(_DWORD *)buf = 136446978;
          os_log_type_t v86 = "nw_quic_report_race_result_on_queue";
          __int16 v87 = 2082;
          nw_endpoint_t v88 = "association_cache->failure_count";
          __int16 v89 = 2048;
          uint64_t v90 = 1;
          __int16 v91 = 2048;
          uint64_t v92 = v52;
          _os_log_impl(&dword_1830D4000, v29, v51, "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded", buf, 0x2Au);
        }
      }
    }
    if (!v28)
    {
LABEL_74:
      cached_content_for_protocol[7] = -1;
      goto LABEL_75;
    }
LABEL_73:
    free(v28);
    goto LABEL_74;
  }
  uint64_t v73 = __nwlog_obj();
  os_log_type_enabled(v73, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  os_log_type_t v86 = "strict_calloc";
  __int16 v87 = 2048;
  nw_endpoint_t v88 = (char *)1;
  __int16 v89 = 2048;
  uint64_t v90 = 48;
  id v74 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v74))
  {
    free(v74);
    int v75 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v86 = "nw_quic_report_race_result_on_queue";
    unsigned int v64 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v83 = 0;
    if (!__nwlog_fault(v64, &type, &v83)) {
      goto LABEL_130;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v65 = __nwlog_obj();
      os_log_type_t v76 = type;
      if (os_log_type_enabled(v65, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v86 = "nw_quic_report_race_result_on_queue";
        _os_log_impl(&dword_1830D4000, v65, v76, "%{public}s called with null association_cache", buf, 0xCu);
      }
    }
    else if (v83)
    {
      id v79 = (char *)__nw_create_backtrace_string();
      int v65 = __nwlog_obj();
      os_log_type_t v80 = type;
      BOOL v81 = os_log_type_enabled(v65, type);
      if (v79)
      {
        if (v81)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v86 = "nw_quic_report_race_result_on_queue";
          __int16 v87 = 2082;
          nw_endpoint_t v88 = v79;
          _os_log_impl(&dword_1830D4000, v65, v80, "%{public}s called with null association_cache, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v79);
        if (!v64) {
          goto LABEL_76;
        }
        goto LABEL_131;
      }
      if (v81)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v86 = "nw_quic_report_race_result_on_queue";
        _os_log_impl(&dword_1830D4000, v65, v80, "%{public}s called with null association_cache, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int v65 = __nwlog_obj();
      os_log_type_t v82 = type;
      if (os_log_type_enabled(v65, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v86 = "nw_quic_report_race_result_on_queue";
        _os_log_impl(&dword_1830D4000, v65, v82, "%{public}s called with null association_cache, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_129;
  }
  __break(1u);
}

void sub_1832AC728(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_protocol_definition_set_traffic_mgmt_update(void *a1, void *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1;
  nw_report_protocol_enumerator_t v4 = v3;
  if (v3)
  {
    nw_protocol_definition_initialize_extended_state(v3);
    v4->extended_state->var19 = a2;
    goto LABEL_3;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v16 = "nw_protocol_definition_set_traffic_mgmt_update";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v16 = "nw_protocol_definition_set_traffic_mgmt_update";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null definition", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v16 = "nw_protocol_definition_set_traffic_mgmt_update";
          __int16 v17 = 2082;
          id v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null definition, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v16 = "nw_protocol_definition_set_traffic_mgmt_update";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null definition, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v16 = "nw_protocol_definition_set_traffic_mgmt_update";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null definition, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
LABEL_3:
}

void sub_1832ACCC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_protocol_definition_set_link_state_update(void *a1, void *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1;
  nw_report_protocol_enumerator_t v4 = v3;
  if (v3)
  {
    nw_protocol_definition_initialize_extended_state(v3);
    v4->extended_state->var17 = a2;
    goto LABEL_3;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v16 = "nw_protocol_definition_set_link_state_update";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v16 = "nw_protocol_definition_set_link_state_update";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null definition", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v16 = "nw_protocol_definition_set_link_state_update";
          __int16 v17 = 2082;
          id v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null definition, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v16 = "nw_protocol_definition_set_link_state_update";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null definition, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v16 = "nw_protocol_definition_set_link_state_update";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null definition, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
LABEL_3:
}

void sub_1832ACF78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_protocol_definition_set_handle_inbound(void *a1, void *a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1;
  nw_report_protocol_enumerator_t v4 = v3;
  if (!v3)
  {
    id v5 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v22 = "nw_protocol_definition_set_handle_inbound";
    id v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (!__nwlog_fault(v6, &type, &v19)) {
      goto LABEL_38;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v22 = "nw_protocol_definition_set_handle_inbound";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null definition", buf, 0xCu);
      }
    }
    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v22 = "nw_protocol_definition_set_handle_inbound";
          __int16 v23 = 2082;
          uint64_t v24 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null definition, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v6) {
          goto LABEL_4;
        }
LABEL_39:
        free(v6);
        goto LABEL_4;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v22 = "nw_protocol_definition_set_handle_inbound";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null definition, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v17 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v22 = "nw_protocol_definition_set_handle_inbound";
        _os_log_impl(&dword_1830D4000, v7, v17, "%{public}s called with null definition, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_37:

    goto LABEL_38;
  }
  if (a2)
  {
    nw_protocol_definition_initialize_extended_state(v3);
    v4->extended_state->var7 = a2;
    goto LABEL_4;
  }
  uint64_t v9 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v22 = "nw_protocol_definition_set_handle_inbound";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v19 = 0;
  if (!__nwlog_fault(v6, &type, &v19)) {
    goto LABEL_38;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    os_log_type_t v7 = __nwlog_obj();
    os_log_type_t v10 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v22 = "nw_protocol_definition_set_handle_inbound";
      _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null function", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (!v19)
  {
    os_log_type_t v7 = __nwlog_obj();
    os_log_type_t v18 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v22 = "nw_protocol_definition_set_handle_inbound";
      _os_log_impl(&dword_1830D4000, v7, v18, "%{public}s called with null function, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_37;
  }
  os_log_type_t v14 = (char *)__nw_create_backtrace_string();
  os_log_type_t v7 = __nwlog_obj();
  os_log_type_t v15 = type;
  BOOL v16 = os_log_type_enabled(v7, type);
  if (!v14)
  {
    if (v16)
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v22 = "nw_protocol_definition_set_handle_inbound";
      _os_log_impl(&dword_1830D4000, v7, v15, "%{public}s called with null function, no backtrace", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (v16)
  {
    *(_DWORD *)buf = 136446466;
    os_log_type_t v22 = "nw_protocol_definition_set_handle_inbound";
    __int16 v23 = 2082;
    uint64_t v24 = v14;
    _os_log_impl(&dword_1830D4000, v7, v15, "%{public}s called with null function, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v14);
  if (v6) {
    goto LABEL_39;
  }
LABEL_4:
}

void sub_1832AD440(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_protocol_definition_set_copy_quic_info(void *a1, void *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1;
  nw_report_protocol_enumerator_t v4 = v3;
  if (v3)
  {
    nw_protocol_definition_initialize_extended_state(v3);
    v4->extended_state->var25 = a2;
    goto LABEL_3;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v16 = "nw_protocol_definition_set_copy_quic_info";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_protocol_definition_set_copy_quic_info";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null definition", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v16 = "nw_protocol_definition_set_copy_quic_info";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null definition, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_protocol_definition_set_copy_quic_info";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null definition, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_protocol_definition_set_copy_quic_info";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null definition, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
LABEL_3:
}

void sub_1832AD6EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_protocol_definition_set_outbound_events(void *a1, void *a2, void *a3, void *a4)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  os_log_type_t v7 = a1;
  os_log_type_t v8 = v7;
  if (v7)
  {
    nw_protocol_definition_initialize_extended_state(v7);
    v8->extended_state->var12 = a2;
    v8->extended_state->var13 = a3;
    v8->extended_state->var14 = a4;
    goto LABEL_3;
  }
  uint64_t v9 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v20 = "nw_protocol_definition_set_outbound_events";
  os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v17 = 0;
  if (__nwlog_fault(v10, &type, &v17))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v20 = "nw_protocol_definition_set_outbound_events";
        _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s called with null definition", buf, 0xCu);
      }
    }
    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v11 = __nwlog_obj();
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v20 = "nw_protocol_definition_set_outbound_events";
          __int16 v21 = 2082;
          os_log_type_t v22 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v11, v14, "%{public}s called with null definition, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v20 = "nw_protocol_definition_set_outbound_events";
        _os_log_impl(&dword_1830D4000, v11, v14, "%{public}s called with null definition, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v11 = __nwlog_obj();
      os_log_type_t v16 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v20 = "nw_protocol_definition_set_outbound_events";
        _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s called with null definition, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v10) {
    free(v10);
  }
LABEL_3:
}

void sub_1832AD9B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_protocol_definition_set_maximum_message_size_update(void *a1, void *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1;
  nw_report_protocol_enumerator_t v4 = v3;
  if (v3)
  {
    nw_protocol_definition_initialize_extended_state(v3);
    v4->extended_state->var20 = a2;
    goto LABEL_3;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_protocol_definition_set_maximum_message_size_update";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_protocol_definition_set_maximum_message_size_update";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null definition", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_protocol_definition_set_maximum_message_size_update";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null definition, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_protocol_definition_set_maximum_message_size_update";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null definition, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_protocol_definition_set_maximum_message_size_update";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null definition, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
LABEL_3:
}

void sub_1832ADC64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __nw_protocol_copy_quic_stream_definition_block_invoke()
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  named = nw_protocol_definition_create_named(3, "quic");
  id v1 = (void *)nw_protocol_copy_quic_stream_definition::quic_definition;
  nw_protocol_copy_quic_stream_definition::quic_definition = (uint64_t)named;

  nw_protocol_definition_set_options_allocator((void *)nw_protocol_copy_quic_stream_definition::quic_definition, (uint64_t)nw_quic_stream_allocate_options, (uint64_t)nw_quic_stream_copy_options, (uint64_t)nw_quic_stream_deallocate_options);
  nw_protocol_definition_set_options_comparator((void *)nw_protocol_copy_quic_stream_definition::quic_definition, (uint64_t)nw_quic_stream_option_compare);
  nw_protocol_definition_set_options_serializer((void *)nw_protocol_copy_quic_stream_definition::quic_definition, 0, (uint64_t)nw_quic_stream_serialize_options, (uint64_t)nw_quic_stream_deserialize_options);
  nw_protocol_definition_set_metadata_initializer((void *)nw_protocol_copy_quic_stream_definition::quic_definition, 0x30u, nw_quic_stream_initialize_metadata, nw_quic_stream_finalize_metadata);
  id v2 = (id)nw_protocol_copy_quic_stream_definition::quic_definition;
  uint64_t v3 = v2;
  if (v2)
  {
    *((unsigned char *)v2 + 184) |= 8u;
    goto LABEL_3;
  }
  os_log_type_t v7 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v18 = "nw_protocol_definition_set_receive_single_message";
  os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v18 = "nw_protocol_definition_set_receive_single_message";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null definition", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v18 = "nw_protocol_definition_set_receive_single_message";
          __int16 v19 = 2082;
          uint64_t v20 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null definition, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_28;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v18 = "nw_protocol_definition_set_receive_single_message";
        _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null definition, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v18 = "nw_protocol_definition_set_receive_single_message";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null definition, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_28:
  if (v8) {
    free(v8);
  }
LABEL_3:

  id v4 = (id)nw_protocol_copy_quic_stream_definition::quic_definition;
  id v5 = v4;
  if (quic_fillout_definition_callbacks_override)
  {
    quic_fillout_definition_callbacks_override(v4);
LABEL_7:

    nw_protocol_definition_register((void *)nw_protocol_copy_quic_stream_definition::quic_definition);
    goto LABEL_8;
  }
  if (MEMORY[0x1E4FBA960])
  {
    quic_fillout_definition_callbacks();
    goto LABEL_7;
  }

LABEL_8:
  id v6 = (void *)nw_protocol_copy_quic_stream_definition::quic_definition;

  nw_protocol_definition_set_options_should_serialize(v6, (uint64_t)nw_quic_stream_should_serialize_options);
}

void sub_1832AE048(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_protocol_definition_set_options_serializer(void *a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  id v7 = a1;
  os_log_type_t v8 = v7;
  if (!v7)
  {
    uint64_t v9 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v31 = "nw_protocol_definition_set_options_serializer";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v28 = 0;
    if (!__nwlog_fault(v10, &type, &v28)) {
      goto LABEL_55;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v31 = "nw_protocol_definition_set_options_serializer";
        _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s called with null definition", buf, 0xCu);
      }
    }
    else if (v28)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v11 = __nwlog_obj();
      os_log_type_t v18 = type;
      BOOL v19 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v31 = "nw_protocol_definition_set_options_serializer";
          __int16 v32 = 2082;
          os_log_type_t v33 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v11, v18, "%{public}s called with null definition, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_55:
        if (!v10) {
          goto LABEL_5;
        }
LABEL_56:
        free(v10);
        goto LABEL_5;
      }
      if (v19)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v31 = "nw_protocol_definition_set_options_serializer";
        _os_log_impl(&dword_1830D4000, v11, v18, "%{public}s called with null definition, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v11 = __nwlog_obj();
      os_log_type_t v25 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v31 = "nw_protocol_definition_set_options_serializer";
        _os_log_impl(&dword_1830D4000, v11, v25, "%{public}s called with null definition, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_54:

    goto LABEL_55;
  }
  if (!a3)
  {
    BOOL v13 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v31 = "nw_protocol_definition_set_options_serializer";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v28 = 0;
    if (!__nwlog_fault(v10, &type, &v28)) {
      goto LABEL_55;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v11 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v31 = "nw_protocol_definition_set_options_serializer";
        _os_log_impl(&dword_1830D4000, v11, v14, "%{public}s called with null serialize_function", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!v28)
    {
      BOOL v11 = __nwlog_obj();
      os_log_type_t v26 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v31 = "nw_protocol_definition_set_options_serializer";
        _os_log_impl(&dword_1830D4000, v11, v26, "%{public}s called with null serialize_function, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    uint64_t v20 = (char *)__nw_create_backtrace_string();
    BOOL v11 = __nwlog_obj();
    os_log_type_t v21 = type;
    BOOL v22 = os_log_type_enabled(v11, type);
    if (!v20)
    {
      if (v22)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v31 = "nw_protocol_definition_set_options_serializer";
        _os_log_impl(&dword_1830D4000, v11, v21, "%{public}s called with null serialize_function, no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v22)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v31 = "nw_protocol_definition_set_options_serializer";
      __int16 v32 = 2082;
      os_log_type_t v33 = v20;
      _os_log_impl(&dword_1830D4000, v11, v21, "%{public}s called with null serialize_function, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_35;
  }
  if (!a4)
  {
    char v15 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v31 = "nw_protocol_definition_set_options_serializer";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v28 = 0;
    if (!__nwlog_fault(v10, &type, &v28)) {
      goto LABEL_55;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v11 = __nwlog_obj();
      os_log_type_t v16 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v31 = "nw_protocol_definition_set_options_serializer";
        _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s called with null deserialize_function", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!v28)
    {
      BOOL v11 = __nwlog_obj();
      os_log_type_t v27 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v31 = "nw_protocol_definition_set_options_serializer";
        _os_log_impl(&dword_1830D4000, v11, v27, "%{public}s called with null deserialize_function, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    uint64_t v20 = (char *)__nw_create_backtrace_string();
    BOOL v11 = __nwlog_obj();
    os_log_type_t v23 = type;
    BOOL v24 = os_log_type_enabled(v11, type);
    if (!v20)
    {
      if (v24)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v31 = "nw_protocol_definition_set_options_serializer";
        _os_log_impl(&dword_1830D4000, v11, v23, "%{public}s called with null deserialize_function, no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v24)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v31 = "nw_protocol_definition_set_options_serializer";
      __int16 v32 = 2082;
      os_log_type_t v33 = v20;
      _os_log_impl(&dword_1830D4000, v11, v23, "%{public}s called with null deserialize_function, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_35:

    free(v20);
    if (!v10) {
      goto LABEL_5;
    }
    goto LABEL_56;
  }
  *((unsigned char *)v7 + 185) = *((unsigned char *)v7 + 185) & 0xFE | a2;
  *((void *)v7 + 16) = a3;
  *((void *)v7 + 17) = a4;
LABEL_5:
}

void nw_protocol_definition_set_options_comparator(void *a1, uint64_t a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = v3;
  if (!v3)
  {
    id v5 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v22 = "nw_protocol_definition_set_options_comparator";
    id v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (!__nwlog_fault(v6, &type, &v19)) {
      goto LABEL_38;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v22 = "nw_protocol_definition_set_options_comparator";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null definition", buf, 0xCu);
      }
    }
    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v22 = "nw_protocol_definition_set_options_comparator";
          __int16 v23 = 2082;
          BOOL v24 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null definition, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v6) {
          goto LABEL_4;
        }
LABEL_39:
        free(v6);
        goto LABEL_4;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v22 = "nw_protocol_definition_set_options_comparator";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null definition, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v7 = __nwlog_obj();
      os_log_type_t v17 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v22 = "nw_protocol_definition_set_options_comparator";
        _os_log_impl(&dword_1830D4000, v7, v17, "%{public}s called with null definition, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_37:

    goto LABEL_38;
  }
  if (a2)
  {
    *((void *)v3 + 15) = a2;
    goto LABEL_4;
  }
  uint64_t v9 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v22 = "nw_protocol_definition_set_options_comparator";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v19 = 0;
  if (!__nwlog_fault(v6, &type, &v19)) {
    goto LABEL_38;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    id v7 = __nwlog_obj();
    os_log_type_t v10 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446210;
      BOOL v22 = "nw_protocol_definition_set_options_comparator";
      _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null comparator_function", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (!v19)
  {
    id v7 = __nwlog_obj();
    os_log_type_t v18 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446210;
      BOOL v22 = "nw_protocol_definition_set_options_comparator";
      _os_log_impl(&dword_1830D4000, v7, v18, "%{public}s called with null comparator_function, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_37;
  }
  os_log_type_t v14 = (char *)__nw_create_backtrace_string();
  id v7 = __nwlog_obj();
  os_log_type_t v15 = type;
  BOOL v16 = os_log_type_enabled(v7, type);
  if (!v14)
  {
    if (v16)
    {
      *(_DWORD *)buf = 136446210;
      BOOL v22 = "nw_protocol_definition_set_options_comparator";
      _os_log_impl(&dword_1830D4000, v7, v15, "%{public}s called with null comparator_function, no backtrace", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (v16)
  {
    *(_DWORD *)buf = 136446466;
    BOOL v22 = "nw_protocol_definition_set_options_comparator";
    __int16 v23 = 2082;
    BOOL v24 = v14;
    _os_log_impl(&dword_1830D4000, v7, v15, "%{public}s called with null comparator_function, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v14);
  if (v6) {
    goto LABEL_39;
  }
LABEL_4:
}

void nw_protocol_definition_set_probe_connectivity_update(void *a1, void *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    nw_protocol_definition_initialize_extended_state(v3);
    v4->extended_state->var21 = a2;
    goto LABEL_3;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v16 = "nw_protocol_definition_set_probe_connectivity_update";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_protocol_definition_set_probe_connectivity_update";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null definition", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v16 = "nw_protocol_definition_set_probe_connectivity_update";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null definition, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_protocol_definition_set_probe_connectivity_update";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null definition, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_protocol_definition_set_probe_connectivity_update";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null definition, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
LABEL_3:
}

void sub_1832AEE68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_protocol_definition_set_metadata_initializer(void *a1, unsigned int a2, void *a3, void *a4)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  id v7 = a1;
  os_log_type_t v8 = v7;
  if (!v7)
  {
    os_log_type_t v10 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v32 = "nw_protocol_definition_set_metadata_initializer";
    BOOL v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v29 = 0;
    if (!__nwlog_fault(v11, &type, &v29)) {
      goto LABEL_55;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v32 = "nw_protocol_definition_set_metadata_initializer";
        _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s called with null definition", buf, 0xCu);
      }
    }
    else if (v29)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v19 = type;
      BOOL v20 = os_log_type_enabled(v12, type);
      if (backtrace_string)
      {
        if (v20)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v32 = "nw_protocol_definition_set_metadata_initializer";
          __int16 v33 = 2082;
          uint64_t v34 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v12, v19, "%{public}s called with null definition, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_55:
        if (!v11) {
          goto LABEL_5;
        }
LABEL_56:
        free(v11);
        goto LABEL_5;
      }
      if (v20)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v32 = "nw_protocol_definition_set_metadata_initializer";
        _os_log_impl(&dword_1830D4000, v12, v19, "%{public}s called with null definition, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v26 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v32 = "nw_protocol_definition_set_metadata_initializer";
        _os_log_impl(&dword_1830D4000, v12, v26, "%{public}s called with null definition, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_54:

    goto LABEL_55;
  }
  if (!a3)
  {
    os_log_type_t v14 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v32 = "nw_protocol_definition_set_metadata_initializer";
    BOOL v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v29 = 0;
    if (!__nwlog_fault(v11, &type, &v29)) {
      goto LABEL_55;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v32 = "nw_protocol_definition_set_metadata_initializer";
        _os_log_impl(&dword_1830D4000, v12, v15, "%{public}s called with null initialize_function", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!v29)
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v27 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v32 = "nw_protocol_definition_set_metadata_initializer";
        _os_log_impl(&dword_1830D4000, v12, v27, "%{public}s called with null initialize_function, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    os_log_type_t v21 = (char *)__nw_create_backtrace_string();
    os_log_type_t v12 = __nwlog_obj();
    os_log_type_t v22 = type;
    BOOL v23 = os_log_type_enabled(v12, type);
    if (!v21)
    {
      if (v23)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v32 = "nw_protocol_definition_set_metadata_initializer";
        _os_log_impl(&dword_1830D4000, v12, v22, "%{public}s called with null initialize_function, no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v23)
    {
      *(_DWORD *)buf = 136446466;
      __int16 v32 = "nw_protocol_definition_set_metadata_initializer";
      __int16 v33 = 2082;
      uint64_t v34 = v21;
      _os_log_impl(&dword_1830D4000, v12, v22, "%{public}s called with null initialize_function, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_35;
  }
  if (!a4)
  {
    BOOL v16 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v32 = "nw_protocol_definition_set_metadata_initializer";
    BOOL v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v29 = 0;
    if (!__nwlog_fault(v11, &type, &v29)) {
      goto LABEL_55;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v17 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v32 = "nw_protocol_definition_set_metadata_initializer";
        _os_log_impl(&dword_1830D4000, v12, v17, "%{public}s called with null finalize_function", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!v29)
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v28 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v32 = "nw_protocol_definition_set_metadata_initializer";
        _os_log_impl(&dword_1830D4000, v12, v28, "%{public}s called with null finalize_function, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    os_log_type_t v21 = (char *)__nw_create_backtrace_string();
    os_log_type_t v12 = __nwlog_obj();
    os_log_type_t v24 = type;
    BOOL v25 = os_log_type_enabled(v12, type);
    if (!v21)
    {
      if (v25)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v32 = "nw_protocol_definition_set_metadata_initializer";
        _os_log_impl(&dword_1830D4000, v12, v24, "%{public}s called with null finalize_function, no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v25)
    {
      *(_DWORD *)buf = 136446466;
      __int16 v32 = "nw_protocol_definition_set_metadata_initializer";
      __int16 v33 = 2082;
      uint64_t v34 = v21;
      _os_log_impl(&dword_1830D4000, v12, v24, "%{public}s called with null finalize_function, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_35:

    free(v21);
    if (!v11) {
      goto LABEL_5;
    }
    goto LABEL_56;
  }
  nw_protocol_definition_initialize_extended_state(v7);
  extended_uint64_t state = v8->extended_state;
  extended_state->var33 = a2;
  extended_state->var29 = a3;
  v8->extended_state->var30 = a4;
LABEL_5:
}

void sub_1832AF548(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_protocol_definition_set_flow_state_allocator(void *a1, void *a2, void *a3, void *a4)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  id v7 = a1;
  os_log_type_t v8 = v7;
  if (!v7)
  {
    uint64_t v9 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    id v36 = "nw_protocol_definition_set_flow_state_allocator";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v33 = 0;
    if (!__nwlog_fault(v10, &type, &v33)) {
      goto LABEL_72;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        id v36 = "nw_protocol_definition_set_flow_state_allocator";
        _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s called with null definition", buf, 0xCu);
      }
    }
    else if (v33)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v11 = __nwlog_obj();
      os_log_type_t v20 = type;
      BOOL v21 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v21)
        {
          *(_DWORD *)buf = 136446466;
          id v36 = "nw_protocol_definition_set_flow_state_allocator";
          __int16 v37 = 2082;
          id v38 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v11, v20, "%{public}s called with null definition, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_72:
        if (!v10) {
          goto LABEL_6;
        }
LABEL_73:
        free(v10);
        goto LABEL_6;
      }
      if (v21)
      {
        *(_DWORD *)buf = 136446210;
        id v36 = "nw_protocol_definition_set_flow_state_allocator";
        _os_log_impl(&dword_1830D4000, v11, v20, "%{public}s called with null definition, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v11 = __nwlog_obj();
      os_log_type_t v29 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        id v36 = "nw_protocol_definition_set_flow_state_allocator";
        _os_log_impl(&dword_1830D4000, v11, v29, "%{public}s called with null definition, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_71:

    goto LABEL_72;
  }
  if (!a2)
  {
    os_log_type_t v13 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    id v36 = "nw_protocol_definition_set_flow_state_allocator";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v33 = 0;
    if (!__nwlog_fault(v10, &type, &v33)) {
      goto LABEL_72;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v11 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        id v36 = "nw_protocol_definition_set_flow_state_allocator";
        _os_log_impl(&dword_1830D4000, v11, v14, "%{public}s called with null allocate_function", buf, 0xCu);
      }
      goto LABEL_71;
    }
    if (!v33)
    {
      BOOL v11 = __nwlog_obj();
      os_log_type_t v30 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        id v36 = "nw_protocol_definition_set_flow_state_allocator";
        _os_log_impl(&dword_1830D4000, v11, v30, "%{public}s called with null allocate_function, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_71;
    }
    os_log_type_t v22 = (char *)__nw_create_backtrace_string();
    BOOL v11 = __nwlog_obj();
    os_log_type_t v23 = type;
    BOOL v24 = os_log_type_enabled(v11, type);
    if (!v22)
    {
      if (v24)
      {
        *(_DWORD *)buf = 136446210;
        id v36 = "nw_protocol_definition_set_flow_state_allocator";
        _os_log_impl(&dword_1830D4000, v11, v23, "%{public}s called with null allocate_function, no backtrace", buf, 0xCu);
      }
      goto LABEL_71;
    }
    if (v24)
    {
      *(_DWORD *)buf = 136446466;
      id v36 = "nw_protocol_definition_set_flow_state_allocator";
      __int16 v37 = 2082;
      id v38 = v22;
      _os_log_impl(&dword_1830D4000, v11, v23, "%{public}s called with null allocate_function, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_46;
  }
  if (!a3)
  {
    os_log_type_t v15 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    id v36 = "nw_protocol_definition_set_flow_state_allocator";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v33 = 0;
    if (!__nwlog_fault(v10, &type, &v33)) {
      goto LABEL_72;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v11 = __nwlog_obj();
      os_log_type_t v16 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        id v36 = "nw_protocol_definition_set_flow_state_allocator";
        _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s called with null deallocate_function", buf, 0xCu);
      }
      goto LABEL_71;
    }
    if (!v33)
    {
      BOOL v11 = __nwlog_obj();
      os_log_type_t v31 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        id v36 = "nw_protocol_definition_set_flow_state_allocator";
        _os_log_impl(&dword_1830D4000, v11, v31, "%{public}s called with null deallocate_function, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_71;
    }
    os_log_type_t v22 = (char *)__nw_create_backtrace_string();
    BOOL v11 = __nwlog_obj();
    os_log_type_t v25 = type;
    BOOL v26 = os_log_type_enabled(v11, type);
    if (!v22)
    {
      if (v26)
      {
        *(_DWORD *)buf = 136446210;
        id v36 = "nw_protocol_definition_set_flow_state_allocator";
        _os_log_impl(&dword_1830D4000, v11, v25, "%{public}s called with null deallocate_function, no backtrace", buf, 0xCu);
      }
      goto LABEL_71;
    }
    if (v26)
    {
      *(_DWORD *)buf = 136446466;
      id v36 = "nw_protocol_definition_set_flow_state_allocator";
      __int16 v37 = 2082;
      id v38 = v22;
      _os_log_impl(&dword_1830D4000, v11, v25, "%{public}s called with null deallocate_function, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_46;
  }
  if (!a4)
  {
    os_log_type_t v17 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    id v36 = "nw_protocol_definition_set_flow_state_allocator";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v33 = 0;
    if (!__nwlog_fault(v10, &type, &v33)) {
      goto LABEL_72;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v11 = __nwlog_obj();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        id v36 = "nw_protocol_definition_set_flow_state_allocator";
        _os_log_impl(&dword_1830D4000, v11, v18, "%{public}s called with null replace_function", buf, 0xCu);
      }
      goto LABEL_71;
    }
    if (!v33)
    {
      BOOL v11 = __nwlog_obj();
      os_log_type_t v32 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        id v36 = "nw_protocol_definition_set_flow_state_allocator";
        _os_log_impl(&dword_1830D4000, v11, v32, "%{public}s called with null replace_function, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_71;
    }
    os_log_type_t v22 = (char *)__nw_create_backtrace_string();
    BOOL v11 = __nwlog_obj();
    os_log_type_t v27 = type;
    BOOL v28 = os_log_type_enabled(v11, type);
    if (!v22)
    {
      if (v28)
      {
        *(_DWORD *)buf = 136446210;
        id v36 = "nw_protocol_definition_set_flow_state_allocator";
        _os_log_impl(&dword_1830D4000, v11, v27, "%{public}s called with null replace_function, no backtrace", buf, 0xCu);
      }
      goto LABEL_71;
    }
    if (v28)
    {
      *(_DWORD *)buf = 136446466;
      id v36 = "nw_protocol_definition_set_flow_state_allocator";
      __int16 v37 = 2082;
      id v38 = v22;
      _os_log_impl(&dword_1830D4000, v11, v27, "%{public}s called with null replace_function, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_46:

    free(v22);
    if (!v10) {
      goto LABEL_6;
    }
    goto LABEL_73;
  }
  nw_protocol_definition_initialize_extended_state(v7);
  v8->extended_state->var2 = a2;
  v8->extended_state->var3 = a3;
  v8->extended_state->var4 = a4;
LABEL_6:
}

void sub_1832AFE38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_protocol_definition_initialize_extended_state(NWConcrete_nw_protocol_definition *a1)
{
  id v1 = a1;
  if (v1->extended_state) {
    goto LABEL_4;
  }
  id v2 = (nw_protocol_definition_extended_state *)malloc_type_calloc(1uLL, 0x108uLL, 0xEAFB8F1AuLL);
  if (v2)
  {
LABEL_3:
    v1->extended_uint64_t state = v2;
LABEL_4:

    return;
  }
  id v3 = __nwlog_obj();
  os_log_type_enabled(v3, OS_LOG_TYPE_ERROR);
  id v4 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v4))
  {
    free(v4);
    goto LABEL_3;
  }
  __break(1u);
}

void sub_1832AFF84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_protocol_definition_register(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    BOOL v3 = nw_protocol_register_handle((uint64_t)v1 + 8, v1, (uint64_t)nw_protocol_implementation_create, (uint64_t)nw_protocol_implementation_accept);
    goto LABEL_3;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_protocol_definition_register";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_protocol_definition_register";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null definition", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_protocol_definition_register";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null definition, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_protocol_definition_register";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null definition, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_protocol_definition_register";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null definition, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  BOOL v3 = 0;
LABEL_3:

  return v3;
}

BOOL nw_protocol_register_handle(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  nw_allow_use_of_dispatch_internal();
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    id v41 = "nw_protocol_register_handle";
    BOOL v28 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v38 = 0;
    if (!__nwlog_fault(v28, &type, &v38)) {
      goto LABEL_77;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v38)
      {
        os_log_type_t v29 = __nwlog_obj();
        os_log_type_t v30 = type;
        if (!os_log_type_enabled(v29, type)) {
          goto LABEL_77;
        }
        *(_DWORD *)buf = 136446210;
        id v41 = "nw_protocol_register_handle";
        os_log_type_t v31 = "%{public}s called with null handle, backtrace limit exceeded";
        goto LABEL_76;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v29 = __nwlog_obj();
      os_log_type_t v30 = type;
      BOOL v35 = os_log_type_enabled(v29, type);
      if (!backtrace_string)
      {
        if (!v35) {
          goto LABEL_77;
        }
        *(_DWORD *)buf = 136446210;
        id v41 = "nw_protocol_register_handle";
        os_log_type_t v31 = "%{public}s called with null handle, no backtrace";
        goto LABEL_76;
      }
      if (v35)
      {
        *(_DWORD *)buf = 136446466;
        id v41 = "nw_protocol_register_handle";
        __int16 v42 = 2082;
        uint64_t v43 = (uint64_t)backtrace_string;
        id v36 = "%{public}s called with null handle, dumping backtrace:%{public}s";
LABEL_66:
        _os_log_impl(&dword_1830D4000, v29, v30, v36, buf, 0x16u);
      }
LABEL_67:
      free(backtrace_string);
      goto LABEL_77;
    }
    os_log_type_t v29 = __nwlog_obj();
    os_log_type_t v30 = type;
    if (!os_log_type_enabled(v29, type)) {
      goto LABEL_77;
    }
    *(_DWORD *)buf = 136446210;
    id v41 = "nw_protocol_register_handle";
    os_log_type_t v31 = "%{public}s called with null handle";
LABEL_76:
    _os_log_impl(&dword_1830D4000, v29, v30, v31, buf, 0xCu);
LABEL_77:
    if (v28) {
      free(v28);
    }
    return 0;
  }
  if (!a3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    id v41 = "nw_protocol_register_handle";
    BOOL v28 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v38 = 0;
    if (!__nwlog_fault(v28, &type, &v38)) {
      goto LABEL_77;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v29 = __nwlog_obj();
      os_log_type_t v30 = type;
      if (!os_log_type_enabled(v29, type)) {
        goto LABEL_77;
      }
      *(_DWORD *)buf = 136446210;
      id v41 = "nw_protocol_register_handle";
      os_log_type_t v31 = "%{public}s called with null create_handle_function";
      goto LABEL_76;
    }
    if (!v38)
    {
      os_log_type_t v29 = __nwlog_obj();
      os_log_type_t v30 = type;
      if (!os_log_type_enabled(v29, type)) {
        goto LABEL_77;
      }
      *(_DWORD *)buf = 136446210;
      id v41 = "nw_protocol_register_handle";
      os_log_type_t v31 = "%{public}s called with null create_handle_function, backtrace limit exceeded";
      goto LABEL_76;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v29 = __nwlog_obj();
    os_log_type_t v30 = type;
    BOOL v37 = os_log_type_enabled(v29, type);
    if (backtrace_string)
    {
      if (v37)
      {
        *(_DWORD *)buf = 136446466;
        id v41 = "nw_protocol_register_handle";
        __int16 v42 = 2082;
        uint64_t v43 = (uint64_t)backtrace_string;
        id v36 = "%{public}s called with null create_handle_function, dumping backtrace:%{public}s";
        goto LABEL_66;
      }
      goto LABEL_67;
    }
    if (!v37) {
      goto LABEL_77;
    }
    *(_DWORD *)buf = 136446210;
    id v41 = "nw_protocol_register_handle";
    os_log_type_t v31 = "%{public}s called with null create_handle_function, no backtrace";
    goto LABEL_76;
  }
  if (*(_DWORD *)(a1 + 36) == 2) {
    uint64_t v8 = a4;
  }
  else {
    uint64_t v8 = 0;
  }
  os_unfair_lock_lock(&nw_protocol_registrar_lock);
  uint64_t v9 = &g_registration_list;
  while (1)
  {
    uint64_t v9 = (uint64_t *)*v9;
    BOOL v10 = v9 == 0;
    if (!v9) {
      break;
    }
    if (*(void *)a1 == v9[4]
      && *(void *)(a1 + 8) == v9[5]
      && *(void *)(a1 + 16) == v9[6]
      && *(void *)(a1 + 24) == v9[7]
      && *(void *)(a1 + 32) == v9[8])
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      *(_DWORD *)buf = 136446466;
      id v41 = "nw_protocol_register_handle";
      __int16 v42 = 2082;
      uint64_t v43 = a1;
      os_log_type_t v15 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v38 = 0;
      if (!__nwlog_fault(v15, &type, &v38)) {
        goto LABEL_44;
      }
      if (type != OS_LOG_TYPE_FAULT)
      {
        if (v38)
        {
          os_log_type_t v25 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v16 = gLogObj;
          os_log_type_t v17 = type;
          BOOL v26 = os_log_type_enabled((os_log_t)gLogObj, type);
          if (v25)
          {
            if (v26)
            {
              *(_DWORD *)buf = 136446722;
              id v41 = "nw_protocol_register_handle";
              __int16 v42 = 2082;
              uint64_t v43 = a1;
              __int16 v44 = 2082;
              uint64_t v45 = (uint64_t)v25;
              _os_log_impl(&dword_1830D4000, v16, v17, "%{public}s Protocol identifier %{public}s is already registered, dumping backtrace:%{public}s", buf, 0x20u);
            }
            free(v25);
            goto LABEL_44;
          }
          if (!v26) {
            goto LABEL_44;
          }
          *(_DWORD *)buf = 136446466;
          id v41 = "nw_protocol_register_handle";
          __int16 v42 = 2082;
          uint64_t v43 = a1;
          os_log_type_t v18 = "%{public}s Protocol identifier %{public}s is already registered, no backtrace";
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v16 = gLogObj;
          os_log_type_t v17 = type;
          if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
            goto LABEL_44;
          }
          *(_DWORD *)buf = 136446466;
          id v41 = "nw_protocol_register_handle";
          __int16 v42 = 2082;
          uint64_t v43 = a1;
          os_log_type_t v18 = "%{public}s Protocol identifier %{public}s is already registered, backtrace limit exceeded";
        }
LABEL_43:
        _os_log_impl(&dword_1830D4000, v16, v17, v18, buf, 0x16u);
        goto LABEL_44;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v16 = gLogObj;
      os_log_type_t v17 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        *(_DWORD *)buf = 136446466;
        id v41 = "nw_protocol_register_handle";
        __int16 v42 = 2082;
        uint64_t v43 = a1;
        os_log_type_t v18 = "%{public}s Protocol identifier %{public}s is already registered";
        goto LABEL_43;
      }
LABEL_44:
      if (v15) {
        free(v15);
      }
LABEL_46:
      os_unfair_lock_unlock(&nw_protocol_registrar_lock);
      return v10;
    }
  }
  uint64_t v19 = malloc_type_calloc(1uLL, 0x78uLL, 0xEAFB8F1AuLL);
  if (v19)
  {
LABEL_27:
    long long v20 = *(_OWORD *)a1;
    long long v21 = *(_OWORD *)(a1 + 16);
    v19[8] = *(void *)(a1 + 32);
    *((_OWORD *)v19 + 2) = v20;
    *((_OWORD *)v19 + 3) = v21;
    v19[12] = a3;
    os_log_type_t v22 = os_retain(a2);
    v19[13] = v8;
    v19[14] = v22;
    uint64_t v23 = g_registration_list;
    *uint64_t v19 = g_registration_list;
    if (v23) {
      *(void *)(v23 + 8) = v19;
    }
    g_registration_list = (uint64_t)v19;
    v19[1] = &g_registration_list;
    if (v8)
    {
      uint64_t v24 = g_many_to_one_list;
      v19[2] = g_many_to_one_list;
      if (v24) {
        *(void *)(v24 + 24) = v19 + 2;
      }
      g_many_to_one_list = (uint64_t)v19;
      v19[3] = &g_many_to_one_list;
    }
    v19[9] = nw_array_create();
    goto LABEL_46;
  }
  os_log_type_t v32 = __nwlog_obj();
  os_log_type_enabled(v32, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  id v41 = "strict_calloc";
  __int16 v42 = 2048;
  uint64_t v43 = 1;
  __int16 v44 = 2048;
  uint64_t v45 = 120;
  char v33 = (void *)_os_log_send_and_compose_impl();
  BOOL result = __nwlog_abort((uint64_t)v33);
  if (!result)
  {
    free(v33);
    goto LABEL_27;
  }
  __break(1u);
  return result;
}

void ____nwlog_tcp_log_block_invoke()
{
  if ((gHasForked & 1) == 0) {
    gtcpLogObj = (uint64_t)os_log_create((const char *)nw_oslog_subsystem, "tcp");
  }
}

BOOL nw_establishment_report_get_used_proxy(nw_establishment_report_t report)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  nw_establishment_report_t v1 = report;
  nw_establishment_report_t v2 = v1;
  if (v1)
  {
    BOOL v3 = (BYTE4(v1[10].isa) >> 1) & 1;
    goto LABEL_3;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_establishment_report_get_used_proxy";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_establishment_report_get_used_proxy";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null report", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_establishment_report_get_used_proxy";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null report, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_establishment_report_get_used_proxy";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null report, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_establishment_report_get_used_proxy";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null report, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  LOBYTE(v3) = 0;
LABEL_3:

  return v3;
}

id nw_connection_copy_tcp_info(void *a1)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  nw_establishment_report_t v1 = a1;
  nw_establishment_report_t v2 = v1;
  if (v1)
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x3032000000;
    uint64_t v19 = __Block_byref_object_copy__79980;
    long long v20 = __Block_byref_object_dispose__79981;
    id v21 = 0;
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 3221225472;
    v13[2] = __nw_connection_copy_tcp_info_block_invoke;
    v13[3] = &unk_1E524B978;
    os_log_type_t v14 = v1;
    os_log_type_t v15 = buf;
    os_unfair_lock_lock(v2 + 34);
    __nw_connection_copy_tcp_info_block_invoke((uint64_t)v13);
    os_unfair_lock_unlock(v2 + 34);
    id v3 = *(id *)(*(void *)&buf[8] + 40);

    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_connection_copy_tcp_info";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (__nwlog_fault(v6, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_copy_tcp_info";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_connection_copy_tcp_info";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_copy_tcp_info";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_copy_tcp_info";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  id v3 = 0;
LABEL_3:

  return v3;
}

void __nw_connection_copy_tcp_info_block_invoke(uint64_t a1)
{
  buf.var97 = *MEMORY[0x1E4F143B8];
  nw_establishment_report_t v2 = *(void **)(a1 + 32);
  if (v2[18])
  {
    id v3 = v2;
    id v4 = v3[2];

    if (nw_parameters_get_multipath(v4))
    {
      int is_multipath = nw_endpoint_handler_is_multipath(*(void **)(*(void *)(a1 + 32) + 144));

      if (is_multipath)
      {
        id v6 = nw_endpoint_handler_copy_multipath_tcp_info(*(void **)(*(void *)(a1 + 32) + 144));
        uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8);
        os_log_type_t v8 = *(void **)(v7 + 40);
        *(void *)(v7 + 40) = v6;

        return;
      }
    }
    else
    {
    }
    memset(&buf, 0, 408);
    if (!nw_connection_get_tcp_info_for_connected_endpoint_locked(*(NWConcrete_nw_connection **)(a1 + 32), &buf)) {
      return;
    }
    uint64_t v12 = nw_endpoint_handler_copy_connected_path(*(void **)(*(void *)(a1 + 32) + 144));
    char v13 = (void *)v12;
    if (v12) {
      os_log_type_t v14 = (char *)*(id *)(v12 + 96);
    }
    else {
      os_log_type_t v14 = 0;
    }
    xpc_object_t v15 = xpc_dictionary_create(0, 0, 0);
    uint64_t v16 = *(void *)(*(void *)(a1 + 40) + 8);
    __int16 v17 = *(void **)(v16 + 40);
    *(void *)(v16 + 40) = v15;

    os_log_type_t v18 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
    if (v18)
    {
      if (v14) {
        uint64_t v19 = v14 + 104;
      }
      else {
        uint64_t v19 = "unknown";
      }
      xpc_dictionary_set_data(v18, v19, &buf, 0x198uLL);
      goto LABEL_31;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v20 = (id)gLogObj;
    *(_DWORD *)os_log_type_t v30 = 136446210;
    os_log_type_t v31 = "nw_connection_copy_tcp_info_block_invoke";
    id v21 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v28 = 0;
    if (__nwlog_fault(v21, &type, &v28))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v22 = (id)gLogObj;
        os_log_type_t v23 = type;
        if (os_log_type_enabled(v22, type))
        {
          *(_DWORD *)os_log_type_t v30 = 136446210;
          os_log_type_t v31 = "nw_connection_copy_tcp_info_block_invoke";
          _os_log_impl(&dword_1830D4000, v22, v23, "%{public}s xpc_dictionary_create failed", v30, 0xCu);
        }
      }
      else if (v28)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        uint64_t v22 = __nwlog_obj();
        os_log_type_t v25 = type;
        BOOL v26 = os_log_type_enabled(v22, type);
        if (backtrace_string)
        {
          if (v26)
          {
            *(_DWORD *)os_log_type_t v30 = 136446466;
            os_log_type_t v31 = "nw_connection_copy_tcp_info_block_invoke";
            __int16 v32 = 2082;
            char v33 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v22, v25, "%{public}s xpc_dictionary_create failed, dumping backtrace:%{public}s", v30, 0x16u);
          }

          free(backtrace_string);
          if (!v21) {
            goto LABEL_31;
          }
          goto LABEL_30;
        }
        if (v26)
        {
          *(_DWORD *)os_log_type_t v30 = 136446210;
          os_log_type_t v31 = "nw_connection_copy_tcp_info_block_invoke";
          _os_log_impl(&dword_1830D4000, v22, v25, "%{public}s xpc_dictionary_create failed, no backtrace", v30, 0xCu);
        }
      }
      else
      {
        uint64_t v22 = __nwlog_obj();
        os_log_type_t v27 = type;
        if (os_log_type_enabled(v22, type))
        {
          *(_DWORD *)os_log_type_t v30 = 136446210;
          os_log_type_t v31 = "nw_connection_copy_tcp_info_block_invoke";
          _os_log_impl(&dword_1830D4000, v22, v27, "%{public}s xpc_dictionary_create failed, backtrace limit exceeded", v30, 0xCu);
        }
      }
    }
    if (!v21)
    {
LABEL_31:

      return;
    }
LABEL_30:
    free(v21);
    goto LABEL_31;
  }
  uint64_t v9 = v2[2];
  if (v9 && !nw_path_parameters_get_logging_disabled(*(void *)(v9 + 104)))
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
    }
    os_log_type_t v10 = (id)gconnectionLogObj;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      unsigned int v11 = *(_DWORD *)(*(void *)(a1 + 32) + 448);
      *(_DWORD *)&buf.var0 = 136446466;
      *(void *)&buf.var4 = "nw_connection_copy_tcp_info_block_invoke";
      LOWORD(buf.var6) = 1024;
      *(unsigned int *)((char *)&buf.var6 + 2) = v11;
      _os_log_impl(&dword_1830D4000, v10, OS_LOG_TYPE_INFO, "%{public}s [C%u] No parent endpoint handler", &buf.var0, 0x12u);
    }
  }
}

void sub_1832B154C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1832B155C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_connection_used_tfo(void *a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  nw_establishment_report_t v1 = a1;
  nw_establishment_report_t v2 = v1;
  if (v1)
  {
    *(void *)tcp_info buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000;
    char v19 = 0;
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 3221225472;
    v13[2] = __nw_connection_used_tfo_block_invoke;
    v13[3] = &unk_1E524B978;
    os_log_type_t v14 = v1;
    xpc_object_t v15 = buf;
    os_unfair_lock_lock(v2 + 34);
    __nw_connection_used_tfo_block_invoke((uint64_t)v13);
    os_unfair_lock_unlock(v2 + 34);
    BOOL v3 = *(unsigned char *)(*(void *)&buf[8] + 24) != 0;

    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)tcp_info buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_connection_used_tfo";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (__nwlog_fault(v6, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_used_tfo";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_connection_used_tfo";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_used_tfo";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_used_tfo";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  BOOL v3 = 0;
LABEL_3:

  return v3;
}

void __nw_connection_used_tfo_block_invoke(uint64_t a1)
{
  buf.var97 = *MEMORY[0x1E4F143B8];
  nw_establishment_report_t v1 = *(unsigned char **)(a1 + 32);
  if ((v1[109] & 0x40) != 0)
  {
    BOOL v3 = v1;
    id v4 = v3[2];

    if (nw_parameters_get_multipath(v4))
    {
      int is_multipath = nw_endpoint_handler_is_multipath(*(void **)(*(void *)(a1 + 32) + 144));

      if (is_multipath)
      {
        id v6 = nw_endpoint_handler_copy_multipath_tcp_info(*(void **)(*(void *)(a1 + 32) + 144));
        uint64_t v7 = v6;
        if (v6)
        {
          applier[0] = MEMORY[0x1E4F143A8];
          applier[1] = 3221225472;
          applier[2] = __nw_connection_used_tfo_block_invoke_2;
          applier[3] = &unk_1E5249BA8;
          void applier[4] = *(void *)(a1 + 40);
          xpc_dictionary_apply(v6, applier);
        }
        goto LABEL_26;
      }
    }
    else
    {
    }
    uint64_t v8 = nw_endpoint_handler_copy_connected_path(*(void **)(*(void *)(a1 + 32) + 144));
    uint64_t v7 = (void *)v8;
    if (v8)
    {
      uint64_t v9 = *(id *)(v8 + 96);
      if (v9)
      {
        os_log_type_t v10 = v9;
        memset(&buf, 0, 408);
        if (nw_connection_get_tcp_info_for_connected_endpoint_locked(*(NWConcrete_nw_connection **)(a1 + 32), &buf)) {
          *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = (buf.var43 & 0x1000000000) != 0;
        }
      }
      else
      {
        uint64_t v13 = *(void *)(*(void *)(a1 + 32) + 16);
        if (v13 && !nw_path_parameters_get_logging_disabled(*(void *)(v13 + 104)))
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          os_log_type_t v14 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
          {
            unsigned int v15 = *(_DWORD *)(*(void *)(a1 + 32) + 448);
            *(_DWORD *)&buf.var0 = 136446466;
            *(void *)&buf.var4 = "nw_connection_used_tfo_block_invoke";
            LOWORD(buf.var6) = 1024;
            *(unsigned int *)((char *)&buf.var6 + 2) = v15;
            _os_log_impl(&dword_1830D4000, v14, OS_LOG_TYPE_ERROR, "%{public}s [C%u] No connected interface", &buf.var0, 0x12u);
          }
        }
        os_log_type_t v10 = 0;
      }
    }
    else
    {
      uint64_t v11 = *(void *)(*(void *)(a1 + 32) + 16);
      if (!v11 || nw_path_parameters_get_logging_disabled(*(void *)(v11 + 104)))
      {
        uint64_t v7 = 0;
        goto LABEL_26;
      }
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      os_log_type_t v10 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        unsigned int v12 = *(_DWORD *)(*(void *)(a1 + 32) + 448);
        *(_DWORD *)&buf.var0 = 136446466;
        *(void *)&buf.var4 = "nw_connection_used_tfo_block_invoke";
        LOWORD(buf.var6) = 1024;
        *(unsigned int *)((char *)&buf.var6 + 2) = v12;
        _os_log_impl(&dword_1830D4000, v10, OS_LOG_TYPE_ERROR, "%{public}s [C%u] No connected path", &buf.var0, 0x12u);
      }
    }

LABEL_26:
  }
}

void sub_1832B1BCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_connection_get_tcp_info_for_connected_endpoint_locked(NWConcrete_nw_connection *a1, tcp_info *a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  BOOL v3 = a1;
  id v4 = v3;
  if (v3)
  {
    if (a2)
    {
      id v5 = v3;
      BOOL v6 = nw_parameters_get_ip_protocol(v5[2]) == 6 && nw_endpoint_handler_fillout_tcp_info(v5[18], a2);

      goto LABEL_7;
    }
    unsigned int v12 = __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    uint64_t v24 = "nw_connection_get_tcp_info_for_connected_endpoint_locked";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (__nwlog_fault(v9, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v10 = __nwlog_obj();
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          uint64_t v24 = "nw_connection_get_tcp_info_for_connected_endpoint_locked";
          _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null tcp_info", buf, 0xCu);
        }
LABEL_39:

        goto LABEL_40;
      }
      if (!v21)
      {
        os_log_type_t v10 = __nwlog_obj();
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          uint64_t v24 = "nw_connection_get_tcp_info_for_connected_endpoint_locked";
          _os_log_impl(&dword_1830D4000, v10, v20, "%{public}s called with null tcp_info, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_39;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v17 = type;
      BOOL v18 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)tcp_info buf = 136446210;
          uint64_t v24 = "nw_connection_get_tcp_info_for_connected_endpoint_locked";
          _os_log_impl(&dword_1830D4000, v10, v17, "%{public}s called with null tcp_info, no backtrace", buf, 0xCu);
        }
        goto LABEL_39;
      }
      if (v18)
      {
        *(_DWORD *)tcp_info buf = 136446466;
        uint64_t v24 = "nw_connection_get_tcp_info_for_connected_endpoint_locked";
        __int16 v25 = 2082;
        BOOL v26 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v10, v17, "%{public}s called with null tcp_info, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_27;
    }
  }
  else
  {
    uint64_t v8 = __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    uint64_t v24 = "nw_connection_get_tcp_info_for_connected_endpoint_locked";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (__nwlog_fault(v9, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v10 = __nwlog_obj();
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          uint64_t v24 = "nw_connection_get_tcp_info_for_connected_endpoint_locked";
          _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null connection", buf, 0xCu);
        }
        goto LABEL_39;
      }
      if (!v21)
      {
        os_log_type_t v10 = __nwlog_obj();
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          uint64_t v24 = "nw_connection_get_tcp_info_for_connected_endpoint_locked";
          _os_log_impl(&dword_1830D4000, v10, v19, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_39;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)tcp_info buf = 136446210;
          uint64_t v24 = "nw_connection_get_tcp_info_for_connected_endpoint_locked";
          _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null connection, no backtrace", buf, 0xCu);
        }
        goto LABEL_39;
      }
      if (v16)
      {
        *(_DWORD *)tcp_info buf = 136446466;
        uint64_t v24 = "nw_connection_get_tcp_info_for_connected_endpoint_locked";
        __int16 v25 = 2082;
        BOOL v26 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_27:

      free(backtrace_string);
    }
  }
LABEL_40:
  if (v9) {
    free(v9);
  }
  BOOL v6 = 0;
LABEL_7:

  return v6;
}

void sub_1832B20D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_endpoint_resolver_update(void *a1, void *a2, unsigned int a3)
{
  uint64_t v390 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  BOOL v6 = a2;
  unint64_t v368 = v5;
  if (!v5)
  {
    os_log_type_t v71 = __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_update";
    BOOL v72 = (char *)_os_log_send_and_compose_impl();

    v377[0] = 16;
    type[0] = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v72, v377, type))
    {
      if (v377[0] == 17)
      {
        uint64_t v73 = __nwlog_obj();
        os_log_type_t v74 = v377[0];
        if (os_log_type_enabled(v73, (os_log_type_t)v377[0]))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_update";
          _os_log_impl(&dword_1830D4000, v73, v74, "%{public}s called with null handler", buf, 0xCu);
        }
      }
      else if (type[0])
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        uint64_t v73 = __nwlog_obj();
        os_log_type_t v76 = v377[0];
        BOOL v77 = os_log_type_enabled(v73, (os_log_type_t)v377[0]);
        if (backtrace_string)
        {
          if (v77)
          {
            *(_DWORD *)tcp_info buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_update";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = backtrace_string;
            _os_log_impl(&dword_1830D4000, v73, v76, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_94;
        }
        if (v77)
        {
          *(_DWORD *)tcp_info buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_update";
          _os_log_impl(&dword_1830D4000, v73, v76, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        uint64_t v73 = __nwlog_obj();
        os_log_type_t v85 = v377[0];
        if (os_log_type_enabled(v73, (os_log_type_t)v377[0]))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_update";
          _os_log_impl(&dword_1830D4000, v73, v85, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_94:
    if (v72) {
      free(v72);
    }
    goto LABEL_337;
  }
  uint64_t v7 = (unsigned int *)v5;
  uint64_t v8 = v7[29];

  if (v8 != 1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v13 = (id)gLogObj;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      if (v8 > 5) {
        __int16 v25 = "unknown-mode";
      }
      else {
        __int16 v25 = off_1E523FB08[v8];
      }
      *(_DWORD *)tcp_info buf = 136446722;
      *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_update";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = v25;
      *(_WORD *)&unsigned char buf[22] = 2082;
      v380 = "resolver";
      _os_log_impl(&dword_1830D4000, v13, OS_LOG_TYPE_DEFAULT, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
    }
    goto LABEL_82;
  }
  uint64_t v9 = v7;
  int state = v9->state;

  if ((state & 0xFFFFFFFE) != 4)
  {
    v363 = nw_endpoint_handler_copy_resolver(v9);
    v366 = v6;
    if (*((char **)v363 + 1) != v6)
    {
      if (nw_endpoint_handler_get_minimize_logging(v9))
      {
        if ((nw_endpoint_handler_get_logging_disabled(v9) & 1) == 0)
        {
          v352 = v9;
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          char v28 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
          {
            id_string = nw_endpoint_handler_get_id_string(v9);
            __int16 v87 = nw_endpoint_handler_dry_run_string(v9);
            nw_endpoint_t v88 = nw_endpoint_handler_copy_endpoint(v9);
            logging_description = nw_endpoint_get_logging_description(v88);
            uint64_t v90 = nw_endpoint_handler_state_string(v9);
            __int16 v91 = nw_endpoint_handler_mode_string(v352);
            uint64_t v92 = (OS_nw_path *)nw_endpoint_handler_copy_current_path(v352);
            __int16 v93 = (const char *)*((void *)v363 + 1);
            *(_DWORD *)tcp_info buf = 136448258;
            *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_update";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = id_string;
            *(_WORD *)&unsigned char buf[22] = 2082;
            v380 = v87;
            *(_WORD *)unint64_t v381 = 2082;
            *(void *)&v381[2] = logging_description;
            *(_WORD *)&v381[10] = 2082;
            *(void *)&v381[12] = v90;
            __int16 v382 = 2082;
            v383 = v91;
            __int16 v384 = 2114;
            v385 = v92;
            __int16 v386 = 2048;
            v387 = v93;
            __int16 v388 = 2048;
            unint64_t v389 = v366;
            _os_log_impl(&dword_1830D4000, v28, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] ignoring update from old resolver object (%p != %p)", buf, 0x5Cu);
          }
          goto LABEL_335;
        }
      }
      else
      {
        BOOL v26 = v9;
        char v27 = *((unsigned char *)v26 + 268);

        if ((v27 & 0x20) == 0)
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          char v28 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
          {
            os_log_type_t v29 = v7;
            os_log_type_t v30 = v26;

            os_log_type_t v31 = v30;
            char v32 = *((unsigned char *)v26 + 268);

            if (v32) {
              char v33 = "dry-run ";
            }
            else {
              char v33 = "";
            }
            nw_endpoint_t v34 = nw_endpoint_handler_copy_endpoint(v31);
            BOOL v35 = nw_endpoint_get_logging_description(v34);
            id_str = v30->id_str;
            BOOL v37 = v31;
            char v38 = v37;
            uint64_t v39 = v9->state;
            if (v39 > 5) {
              uint64_t v40 = "unknown-state";
            }
            else {
              uint64_t v40 = off_1E523FB38[v39];
            }

            id v63 = v38;
            unsigned int v64 = v63;
            int v65 = "path";
            switch(v29[29])
            {
              case 0u:
                break;
              case 1u:
                int v65 = "resolver";
                break;
              case 2u:
                int v65 = nw_endpoint_flow_mode_string(v63[31]);
                break;
              case 3u:
                int v65 = "proxy";
                break;
              case 4u:
                int v65 = "fallback";
                break;
              case 5u:
                int v65 = "transform";
                break;
              default:
                int v65 = "unknown-mode";
                break;
            }

            os_log_type_t v68 = v64;
            os_unfair_lock_lock((os_unfair_lock_t)v68 + 28);
            BOOL v69 = v68[8];
            os_unfair_lock_unlock((os_unfair_lock_t)v68 + 28);

            nw_endpoint_t v70 = (const char *)*((void *)v363 + 1);
            *(_DWORD *)tcp_info buf = 136448258;
            *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_update";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = id_str;
            *(_WORD *)&unsigned char buf[22] = 2082;
            v380 = v33;
            *(_WORD *)unint64_t v381 = 2082;
            *(void *)&v381[2] = v35;
            *(_WORD *)&v381[10] = 2082;
            *(void *)&v381[12] = v40;
            __int16 v382 = 2082;
            v383 = v65;
            __int16 v384 = 2114;
            v385 = v69;
            __int16 v386 = 2048;
            v387 = v70;
            __int16 v388 = 2048;
            unint64_t v389 = v366;
            _os_log_impl(&dword_1830D4000, v28, OS_LOG_TYPE_DEFAULT, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] ignoring update from old resolver object (%p != %p)", buf, 0x5Cu);
          }
          goto LABEL_335;
        }
      }
LABEL_336:

      BOOL v6 = (char *)v366;
      goto LABEL_337;
    }
    id v41 = v9;
    __int16 v42 = v41->parameters;

    uint64_t v43 = v42;
    unint64_t v346 = v43;
    v350 = v9;
    if (v43)
    {
      Class isa = v43[12].isa;

      if (((unint64_t)isa & 0x400000000) != 0)
      {
        v377[0] = 0;
        nw_resolver_get_svcb_report(*((void **)v363 + 1), 0, v377, 0);
        if (v377[0])
        {
          if (nw_endpoint_handler_get_minimize_logging(v41))
          {
            if (nw_endpoint_handler_get_logging_disabled(v41)) {
              goto LABEL_41;
            }
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
            }
            uint64_t v47 = (id)gconnectionLogObj;
            if (os_log_type_enabled(v47, OS_LOG_TYPE_DEBUG))
            {
              os_log_type_t v101 = nw_endpoint_handler_get_id_string(v41);
              BOOL v102 = nw_endpoint_handler_dry_run_string(v41);
              nw_endpoint_t v103 = nw_endpoint_handler_copy_endpoint(v41);
              BOOL v104 = nw_endpoint_get_logging_description(v103);
              unint64_t v105 = nw_endpoint_handler_state_string(v41);
              nw_endpoint_t v106 = nw_endpoint_handler_mode_string(v41);
              id v107 = (OS_nw_path *)nw_endpoint_handler_copy_current_path(v41);
              *(_DWORD *)tcp_info buf = 136447746;
              *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_update";
              *(_WORD *)&unsigned char buf[12] = 2082;
              *(void *)&buf[14] = v101;
              *(_WORD *)&unsigned char buf[22] = 2082;
              v380 = v102;
              *(_WORD *)unint64_t v381 = 2082;
              *(void *)&v381[2] = v104;
              *(_WORD *)&v381[10] = 2082;
              *(void *)&v381[12] = v105;
              __int16 v382 = 2082;
              v383 = v106;
              __int16 v384 = 2114;
              v385 = v107;
              _os_log_impl(&dword_1830D4000, v47, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] received SVCB, and required to fail", buf, 0x48u);
            }
          }
          else
          {
            uint64_t v45 = v41;
            BOOL v46 = (*((unsigned char *)v45 + 268) & 0x20) == 0;

            if (!v46)
            {
LABEL_41:
              os_log_type_t v55 = nw_endpoint_handler_copy_endpoint(v41);
              nw_endpoint_type_t v56 = nw_endpoint_get_type(v55);
              if (v56 == (nw_endpoint_type_url|nw_endpoint_type_address)) {
                __int16 v57 = 7;
              }
              else {
                __int16 v57 = 2;
              }
              if (v56 == nw_endpoint_type_bonjour_service) {
                __int16 v58 = 4;
              }
              else {
                __int16 v58 = v57;
              }

              nw_endpoint_handler_handle_failure(v41);
              int64_t v59 = -[NWConcrete_nw_error initWithDomain:code:]([NWConcrete_nw_error alloc], 2, -65571);
              v41->event.domain = 2;
              v41->event.event = v58;
              nw_endpoint_handler_report(v41, 0, &v41->event.domain, v59);

              goto LABEL_334;
            }
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
            }
            uint64_t v47 = (id)gconnectionLogObj;
            if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v48 = nw_endpoint_handler_get_id_string(v45);
              os_log_type_t v49 = nw_endpoint_handler_dry_run_string(v45);
              nw_endpoint_t v50 = nw_endpoint_handler_copy_endpoint(v45);
              os_log_type_t v51 = nw_endpoint_get_logging_description(v50);
              uint64_t v52 = nw_endpoint_handler_state_string(v45);
              os_log_type_t v53 = nw_endpoint_handler_mode_string(v45);
              uint64_t v54 = (OS_nw_path *)nw_endpoint_handler_copy_current_path(v45);
              *(_DWORD *)tcp_info buf = 136447746;
              *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_update";
              *(_WORD *)&unsigned char buf[12] = 2082;
              *(void *)&buf[14] = v48;
              *(_WORD *)&unsigned char buf[22] = 2082;
              v380 = v49;
              *(_WORD *)unint64_t v381 = 2082;
              *(void *)&v381[2] = v51;
              *(_WORD *)&v381[10] = 2082;
              *(void *)&v381[12] = v52;
              __int16 v382 = 2082;
              v383 = v53;
              __int16 v384 = 2114;
              v385 = v54;
              _os_log_impl(&dword_1830D4000, v47, OS_LOG_TYPE_DEFAULT, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] received SVCB, and required to fail", buf, 0x48u);
            }
          }

          goto LABEL_41;
        }
      }
LABEL_120:
      if (*((void *)v363 + 4))
      {
        if (nw_endpoint_handler_get_minimize_logging(v41))
        {
          if (nw_endpoint_handler_get_logging_disabled(v41)) {
            goto LABEL_334;
          }
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          id v111 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v111, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v308 = nw_endpoint_handler_get_id_string(v41);
            int v309 = nw_endpoint_handler_dry_run_string(v41);
            nw_endpoint_t v310 = nw_endpoint_handler_copy_endpoint(v41);
            unint64_t v311 = nw_endpoint_get_logging_description(v310);
            unint64_t v312 = nw_endpoint_handler_state_string(v41);
            v313 = nw_endpoint_handler_mode_string(v41);
            v314 = (OS_nw_path *)nw_endpoint_handler_copy_current_path(v41);
            *(_DWORD *)tcp_info buf = 136447746;
            *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_update";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = v308;
            *(_WORD *)&unsigned char buf[22] = 2082;
            v380 = v309;
            *(_WORD *)unint64_t v381 = 2082;
            *(void *)&v381[2] = v311;
            *(_WORD *)&v381[10] = 2082;
            *(void *)&v381[12] = v312;
            __int16 v382 = 2082;
            v383 = v313;
            __int16 v384 = 2114;
            v385 = v314;
            _os_log_impl(&dword_1830D4000, v111, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] already connected, ignoring update from resolver", buf, 0x48u);
          }
        }
        else
        {
          int v109 = v41;
          BOOL v110 = (*((unsigned char *)v109 + 268) & 0x20) == 0;

          if (!v110)
          {
LABEL_334:
            char v28 = v346;
LABEL_335:

            goto LABEL_336;
          }
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          id v111 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v111, OS_LOG_TYPE_INFO))
          {
            unint64_t v112 = v109;

            nw_endpoint_t v113 = v112;
            BOOL v114 = (*((unsigned char *)v109 + 268) & 1) == 0;

            if (v114) {
              int v115 = "";
            }
            else {
              int v115 = "dry-run ";
            }
            nw_endpoint_t v116 = nw_endpoint_handler_copy_endpoint(v113);
            id v117 = nw_endpoint_get_logging_description(v116);
            unint64_t v118 = v113;
            BOOL v119 = v118;
            uint64_t v120 = v9->state;
            if (v120 > 5) {
              nw_endpoint_t v121 = "unknown-state";
            }
            else {
              nw_endpoint_t v121 = off_1E523FB38[v120];
            }

            v134 = v119;
            os_log_type_t v135 = v134;
            BOOL v136 = "path";
            switch(v7[29])
            {
              case 0u:
                break;
              case 1u:
                BOOL v136 = "resolver";
                break;
              case 2u:
                BOOL v136 = nw_endpoint_flow_mode_string(v134[31]);
                break;
              case 3u:
                BOOL v136 = "proxy";
                break;
              case 4u:
                BOOL v136 = "fallback";
                break;
              case 5u:
                BOOL v136 = "transform";
                break;
              default:
                BOOL v136 = "unknown-mode";
                break;
            }

            unint64_t v291 = v135;
            os_unfair_lock_lock((os_unfair_lock_t)v291 + 28);
            v292 = v291[8];
            os_unfair_lock_unlock((os_unfair_lock_t)v291 + 28);

            *(_DWORD *)tcp_info buf = 136447746;
            *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_update";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = v112->id_str;
            *(_WORD *)&unsigned char buf[22] = 2082;
            v380 = v115;
            *(_WORD *)unint64_t v381 = 2082;
            *(void *)&v381[2] = v117;
            *(_WORD *)&v381[10] = 2082;
            *(void *)&v381[12] = v121;
            __int16 v382 = 2082;
            v383 = v136;
            __int16 v384 = 2114;
            v385 = v292;
            _os_log_impl(&dword_1830D4000, v111, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] already connected, ignoring update from resolver", buf, 0x48u);
          }
        }

        goto LABEL_334;
      }
      unint64_t v347 = v7;
      unsigned int v339 = a3;
      *((_DWORD *)v363 + 4) = a3;
      nw_endpoint_t v122 = v41;
      BOOL v123 = (*((unsigned char *)v122 + 268) & 0x20) == 0;
      unint64_t v367 = v122;

      if (v123)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        unint64_t v124 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v124, OS_LOG_TYPE_DEBUG))
        {
          unsigned int v125 = nw_endpoint_handler_get_id_string(v367);
          id v126 = nw_endpoint_handler_dry_run_string(v367);
          nw_endpoint_t v127 = nw_endpoint_handler_copy_endpoint(v367);
          id v128 = nw_endpoint_get_logging_description(v127);
          id v129 = nw_endpoint_handler_state_string(v367);
          unint64_t v130 = nw_endpoint_handler_mode_string(v367);
          id v131 = nw_endpoint_handler_copy_current_path(v367);
          os_log_type_t v132 = v131;
          if (v339 > 2) {
            id v133 = "unknown";
          }
          else {
            id v133 = off_1E523F980[v339];
          }
          *(_DWORD *)tcp_info buf = 136448002;
          *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_update";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v125;
          *(_WORD *)&unsigned char buf[22] = 2082;
          v380 = v126;
          *(_WORD *)unint64_t v381 = 2082;
          *(void *)&v381[2] = v128;
          *(_WORD *)&v381[10] = 2082;
          *(void *)&v381[12] = v129;
          __int16 v382 = 2082;
          v383 = v130;
          __int16 v384 = 2114;
          v385 = (OS_nw_path *)v131;
          __int16 v386 = 2082;
          v387 = v133;
          _os_log_impl(&dword_1830D4000, v124, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] resolver is %{public}s", buf, 0x52u);
        }
      }
      os_log_type_t v137 = v363;
      uint64_t v138 = *((id *)v363 + 12);
      char v139 = v138;
      nw_endpoint_t v140 = (void *)*((void *)v363 + 11);
      if (v140)
      {
        combined_array = nw_array_create_combined_array(v138, v140);

        char v139 = combined_array;
        os_log_type_t v137 = v363;
      }
      unint64_t v340 = v139;
      if (v139)
      {
        if (v139[3] != v139[2])
        {
          uint64_t v142 = *((void *)v137 + 8);
          if (v142)
          {
            nw_queue_cancel_source(v142);
            *((void *)v137 + 8) = 0;
          }
        }
      }
      if (v339 - 1 > 1)
      {
LABEL_333:

        goto LABEL_334;
      }
      object = v139;
      BOOL obj = nw_array_create();
      uint64_t v143 = *((void *)v363 + 5);
      location = (uint64_t *)((char *)v363 + 40);
      if (v143)
      {
        unint64_t v144 = *((unsigned int *)v363 + 5);
        if (v144 > (uint64_t)(*(void *)(v143 + 24) - *(void *)(v143 + 16)) >> 3) {
          unint64_t v144 = (uint64_t)(*(void *)(v143 + 24) - *(void *)(v143 + 16)) >> 3;
        }
      }
      else
      {
        LODWORD(v144) = *((_DWORD *)v363 + 5);
        if (v144) {
          LODWORD(v144) = 0;
        }
      }
      if (v144)
      {
        unint64_t v145 = 0;
        uint64_t v348 = v144;
        lock = &v367->lock;
        while (1)
        {
          uint64_t v146 = nw_array_get_object_at_index(*location, v145);
          nw_array_append(obj, (void *)v146);
          int v358 = (void *)v146;
          __int16 v147 = nw_endpoint_handler_copy_endpoint((void *)v146);
          *(void *)tcp_info buf = MEMORY[0x1E4F143A8];
          *(void *)&buf[8] = 3221225472;
          *(void *)&buf[16] = ___ZL44nw_endpoint_resolver_array_contains_endpointPU22objcproto11OS_nw_array8NSObjectPU25objcproto14OS_nw_endpointS__block_invoke;
          v380 = (const char *)&unk_1E524AE18;
          *(void *)unint64_t v381 = v147;
          unint64_t v148 = v147;
          LOBYTE(v146) = nw_array_apply(object, (uint64_t)buf);

          if ((v146 & 1) == 0) {
            break;
          }
          if (nw_endpoint_handler_get_minimize_logging(v367))
          {
            if (nw_endpoint_handler_get_logging_disabled(v367)) {
              goto LABEL_198;
            }
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
            }
            os_log_t log = (id)gconnectionLogObj;
            if (os_log_type_enabled(log, OS_LOG_TYPE_DEBUG))
            {
              BOOL v194 = nw_endpoint_handler_get_id_string(v367);
              unint64_t v195 = nw_endpoint_handler_dry_run_string(v367);
              nw_endpoint_t v342 = nw_endpoint_handler_copy_endpoint(v367);
              os_log_type_t v196 = nw_endpoint_get_logging_description(v342);
              BOOL v197 = nw_endpoint_handler_state_string(v367);
              os_log_type_t v198 = nw_endpoint_handler_mode_string(v367);
              os_log_type_t v199 = (OS_nw_path *)nw_endpoint_handler_copy_current_path(v367);
              os_log_type_t v200 = nw_endpoint_get_logging_description(v148);
              *(_DWORD *)tcp_info buf = 136448002;
              *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_update";
              *(_WORD *)&unsigned char buf[12] = 2082;
              *(void *)&buf[14] = v194;
              *(_WORD *)&unsigned char buf[22] = 2082;
              v380 = v195;
              *(_WORD *)unint64_t v381 = 2082;
              *(void *)&v381[2] = v196;
              *(_WORD *)&v381[10] = 2082;
              *(void *)&v381[12] = v197;
              __int16 v382 = 2082;
              v383 = v198;
              __int16 v384 = 2114;
              v385 = v199;
              __int16 v386 = 2082;
              v387 = v200;
              _os_log_impl(&dword_1830D4000, log, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Started endpoint %{public}s is no longer resolved", buf, 0x52u);

              goto LABEL_196;
            }
            __int16 v151 = log;
            goto LABEL_197;
          }
          __int16 v149 = v367;
          BOOL v150 = (*((unsigned char *)v367 + 268) & 0x20) == 0;

          if (v150)
          {
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
            }
            __int16 v151 = (id)gconnectionLogObj;
            if (os_log_type_enabled(v151, OS_LOG_TYPE_INFO))
            {
              os_log_t log = v151;
              id v152 = v149;

              __int16 v153 = v152;
              LODWORD(v152) = (*((unsigned char *)v367 + 268) & 1) == 0;

              if (v152) {
                unint64_t v154 = "";
              }
              else {
                unint64_t v154 = "dry-run ";
              }
              nw_endpoint_t v155 = nw_endpoint_handler_copy_endpoint(v153);
              __int16 v156 = nw_endpoint_get_logging_description(v155);
              __int16 v157 = v153;
              __int16 v158 = v157;
              uint64_t v159 = v350->state;
              unint64_t v160 = "unknown-state";
              if (v159 <= 5) {
                unint64_t v160 = off_1E523FB38[v159];
              }

              __int16 v161 = v158;
              id v162 = "path";
              switch(v347[29])
              {
                case 0u:
                  break;
                case 1u:
                  id v162 = "resolver";
                  break;
                case 2u:
                  id v162 = nw_endpoint_flow_mode_string(v367->mode_handler);
                  break;
                case 3u:
                  id v162 = "proxy";
                  break;
                case 4u:
                  id v162 = "fallback";
                  break;
                case 5u:
                  id v162 = "transform";
                  break;
                default:
                  id v162 = "unknown-mode";
                  break;
              }

              unint64_t v190 = v161;
              os_unfair_lock_lock(lock);
              v191 = v367->current_path;
              os_unfair_lock_unlock(lock);

              nw_endpoint_t v192 = v191;
              os_log_type_t v193 = nw_endpoint_get_logging_description(v148);
              *(_DWORD *)tcp_info buf = 136448002;
              *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_update";
              *(_WORD *)&unsigned char buf[12] = 2082;
              *(void *)&buf[14] = v367->id_str;
              *(_WORD *)&unsigned char buf[22] = 2082;
              v380 = v154;
              *(_WORD *)unint64_t v381 = 2082;
              *(void *)&v381[2] = v156;
              *(_WORD *)&v381[10] = 2082;
              *(void *)&v381[12] = v160;
              __int16 v382 = 2082;
              v383 = v162;
              __int16 v384 = 2114;
              v385 = v192;
              __int16 v386 = 2082;
              v387 = v193;
              _os_log_impl(&dword_1830D4000, log, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Started endpoint %{public}s is no longer resolved", buf, 0x52u);

              goto LABEL_196;
            }
            goto LABEL_197;
          }
LABEL_198:

          if (v348 == ++v145) {
            goto LABEL_226;
          }
        }
        uint64_t v163 = object;
        __int16 v164 = v148;
        os_log_t log = v163;
        unint64_t v353 = v164;
        if (v164)
        {
          unint64_t v165 = v164;
          BOOL v166 = nw_array_create();
          *(void *)tcp_info buf = MEMORY[0x1E4F143A8];
          *(void *)&buf[8] = 3221225472;
          *(void *)&buf[16] = ___ZL53nw_endpoint_resolver_duplicate_array_without_endpointPU22objcproto11OS_nw_array8NSObjectPU25objcproto14OS_nw_endpointS__block_invoke;
          v380 = (const char *)&unk_1E5247FB8;
          *(void *)unint64_t v381 = v165;
          id v167 = (id)v166;
          *(void *)&v381[8] = v167;
          nw_array_apply(v163, (uint64_t)buf);
          uint64_t v168 = *(void **)&v381[8];
          object = (atomic_uchar *)v167;

          goto LABEL_172;
        }
        os_log_type_t v201 = __nwlog_obj();
        *(_DWORD *)v377 = 136446210;
        *(void *)&v377[4] = "nw_endpoint_resolver_duplicate_array_without_endpoint";
        int v337 = 12;
        v336 = v377;
        unint64_t v202 = (char *)_os_log_send_and_compose_impl();

        type[0] = OS_LOG_TYPE_ERROR;
        char v376 = 0;
        if (__nwlog_fault(v202, type, &v376))
        {
          if (type[0] == OS_LOG_TYPE_FAULT)
          {
            v203 = __nwlog_obj();
            os_log_type_t v204 = type[0];
            if (os_log_type_enabled(v203, type[0]))
            {
              *(_DWORD *)v377 = 136446210;
              *(void *)&v377[4] = "nw_endpoint_resolver_duplicate_array_without_endpoint";
              _os_log_impl(&dword_1830D4000, v203, v204, "%{public}s called with null remove_endpoint", v377, 0xCu);
            }
          }
          else if (v376)
          {
            int v205 = (char *)__nw_create_backtrace_string();
            v203 = __nwlog_obj();
            os_log_type_t v206 = type[0];
            BOOL v207 = os_log_type_enabled(v203, type[0]);
            if (v205)
            {
              if (v207)
              {
                *(_DWORD *)v377 = 136446466;
                *(void *)&v377[4] = "nw_endpoint_resolver_duplicate_array_without_endpoint";
                *(_WORD *)&v377[12] = 2082;
                *(void *)&v377[14] = v205;
                _os_log_impl(&dword_1830D4000, v203, v206, "%{public}s called with null remove_endpoint, dumping backtrace:%{public}s", v377, 0x16u);
              }

              free(v205);
              goto LABEL_222;
            }
            if (v207)
            {
              *(_DWORD *)v377 = 136446210;
              *(void *)&v377[4] = "nw_endpoint_resolver_duplicate_array_without_endpoint";
              _os_log_impl(&dword_1830D4000, v203, v206, "%{public}s called with null remove_endpoint, no backtrace", v377, 0xCu);
            }
          }
          else
          {
            v203 = __nwlog_obj();
            os_log_type_t v208 = type[0];
            if (os_log_type_enabled(v203, type[0]))
            {
              *(_DWORD *)v377 = 136446210;
              *(void *)&v377[4] = "nw_endpoint_resolver_duplicate_array_without_endpoint";
              _os_log_impl(&dword_1830D4000, v203, v208, "%{public}s called with null remove_endpoint, backtrace limit exceeded", v377, 0xCu);
            }
          }
        }
LABEL_222:
        if (v202) {
          free(v202);
        }
        object = 0;
LABEL_172:

        int v169 = v367;
        BOOL v170 = (*((unsigned char *)v367 + 268) & 0x20) == 0;

        if (v170)
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          os_log_type_t v171 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v171, OS_LOG_TYPE_DEBUG))
          {
            unint64_t v172 = v169;

            char v173 = v172;
            BOOL v174 = (*((unsigned char *)v367 + 268) & 1) == 0;

            if (v174) {
              BOOL v175 = "";
            }
            else {
              BOOL v175 = "dry-run ";
            }
            nw_endpoint_t v341 = nw_endpoint_handler_copy_endpoint(v173);
            nw_endpoint_t v176 = nw_endpoint_get_logging_description(v341);
            unint64_t v177 = v173;
            os_log_type_t v178 = v177;
            uint64_t v179 = v350->state;
            id v180 = "unknown-state";
            if (v179 <= 5) {
              id v180 = off_1E523FB38[v179];
            }

            int v181 = v178;
            id v182 = "path";
            switch(v347[29])
            {
              case 0u:
                break;
              case 1u:
                id v182 = "resolver";
                break;
              case 2u:
                id v182 = nw_endpoint_flow_mode_string(v367->mode_handler);
                break;
              case 3u:
                id v182 = "proxy";
                break;
              case 4u:
                id v182 = "fallback";
                break;
              case 5u:
                id v182 = "transform";
                break;
              default:
                id v182 = "unknown-mode";
                break;
            }

            os_log_type_t v183 = v148;
            unint64_t v184 = v180;
            os_log_type_t v185 = v181;
            os_unfair_lock_lock(lock);
            BOOL v186 = v367->current_path;
            os_unfair_lock_unlock(lock);

            int v187 = v184;
            unint64_t v148 = v183;
            v188 = v186;
            id v189 = nw_endpoint_get_logging_description(v353);
            *(_DWORD *)tcp_info buf = 136448002;
            *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_update";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = v367->id_str;
            *(_WORD *)&unsigned char buf[22] = 2082;
            v380 = v175;
            *(_WORD *)unint64_t v381 = 2082;
            *(void *)&v381[2] = v176;
            *(_WORD *)&v381[10] = 2082;
            *(void *)&v381[12] = v187;
            __int16 v382 = 2082;
            v383 = v182;
            __int16 v384 = 2114;
            v385 = v188;
            __int16 v386 = 2082;
            v387 = v189;
            _os_log_impl(&dword_1830D4000, v171, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Keeping started endpoint %{public}s", buf, 0x52u);
          }
        }
LABEL_196:
        __int16 v151 = log;
LABEL_197:

        goto LABEL_198;
      }
LABEL_226:
      objc_storeStrong((id *)location, (id)obj);
      uint64_t v209 = *location;
      if (*location) {
        uint64_t v209 = (uint64_t)(*(void *)(v209 + 24) - *(void *)(v209 + 16)) >> 3;
      }
      char v210 = v367;
      *((_DWORD *)v363 + 5) = v209;
      if (object)
      {
        uint64_t v211 = *((void *)object + 3) - *((void *)object + 2);
        if (v211)
        {
          unint64_t v212 = 0;
          uint64_t v213 = v211 >> 3;
          p_lock = &v367->lock;
          uint64_t v354 = v211 >> 3;
          while (1)
          {
            unint64_t v214 = nw_array_get_object_at_index((uint64_t)object, v212);
            BOOL child_parameters = nw_endpoint_resolver_create_child_parameters(v210);
            if (nw_endpoint_get_is_approved_app_domain(v214)) {
              nw_parameters_set_is_approved_app_domain((void *)child_parameters);
            }
            inner = nw_endpoint_handler_create_inner(v214, (void *)child_parameters, nw_endpoint_resolver_receive_report, v210, v210, 0, 0);
            if (!inner) {
              goto LABEL_257;
            }
            if (nw_endpoint_handler_get_minimize_logging(v210)) {
              break;
            }
            id v217 = v210;
            BOOL v218 = (*((unsigned char *)v210 + 268) & 0x20) == 0;

            if (v218)
            {
              if (__nwlog_connection_log::onceToken != -1) {
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
              }
              unint64_t v219 = (id)gconnectionLogObj;
              if (os_log_type_enabled(v219, OS_LOG_TYPE_DEFAULT))
              {
                os_log_t loga = v219;
                unint64_t v220 = v217;

                nw_endpoint_t v221 = v220;
                BOOL v222 = (*((unsigned char *)v367 + 268) & 1) == 0;

                if (v222) {
                  int v223 = "";
                }
                else {
                  int v223 = "dry-run ";
                }
                nw_endpoint_t v359 = nw_endpoint_handler_copy_endpoint(v221);
                nw_endpoint_t v224 = nw_endpoint_get_logging_description(v359);
                v355 = v223;
                size_t v225 = v221;
                unint64_t v226 = v225;
                uint64_t v227 = v350->state;
                id v228 = "unknown-state";
                if (v227 <= 5) {
                  id v228 = off_1E523FB38[v227];
                }

                int v229 = v226;
                v230 = "path";
                switch(v347[29])
                {
                  case 0u:
                    break;
                  case 1u:
                    v230 = "resolver";
                    break;
                  case 2u:
                    v230 = nw_endpoint_flow_mode_string(v367->mode_handler);
                    break;
                  case 3u:
                    v230 = "proxy";
                    break;
                  case 4u:
                    v230 = "fallback";
                    break;
                  case 5u:
                    v230 = "transform";
                    break;
                  default:
                    v230 = "unknown-mode";
                    break;
                }

                unint64_t v231 = v229;
                os_unfair_lock_lock(p_lock);
                unint64_t v232 = v367->current_path;
                uint64_t v213 = v354;
                os_unfair_lock_unlock(p_lock);

                id v233 = v232;
                char v234 = nw_endpoint_get_logging_description(v214);
                int is_known_tracker = nw_parameters_get_is_known_tracker((void *)child_parameters);
                *(_DWORD *)tcp_info buf = 136448258;
                v236 = "";
                if (is_known_tracker) {
                  v236 = ", tracker";
                }
                *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_update";
                *(_WORD *)&unsigned char buf[12] = 2082;
                *(void *)&buf[14] = v367->id_str;
                *(_WORD *)&unsigned char buf[22] = 2082;
                v380 = v355;
                *(_WORD *)unint64_t v381 = 2082;
                *(void *)&v381[2] = v224;
                *(_WORD *)&v381[10] = 2082;
                *(void *)&v381[12] = v228;
                __int16 v382 = 2082;
                v383 = v230;
                __int16 v384 = 2114;
                v385 = v233;
                __int16 v386 = 2082;
                v387 = v234;
                __int16 v388 = 2080;
                unint64_t v389 = v236;
                _os_log_impl(&dword_1830D4000, loga, OS_LOG_TYPE_DEFAULT, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Adding endpoint handler for %{public}s%s", buf, 0x5Cu);

                goto LABEL_254;
              }
              goto LABEL_255;
            }
LABEL_256:
            nw_array_append(*location, inner);
LABEL_257:

            ++v212;
            char v210 = v367;
            if (v213 == v212) {
              goto LABEL_267;
            }
          }
          if (nw_endpoint_handler_get_logging_disabled(v210)) {
            goto LABEL_256;
          }
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          os_log_t loga = (id)gconnectionLogObj;
          if (os_log_type_enabled(loga, OS_LOG_TYPE_DEBUG))
          {
            unint64_t v237 = nw_endpoint_handler_get_id_string(v367);
            v356 = nw_endpoint_handler_dry_run_string(v367);
            nw_endpoint_t v360 = nw_endpoint_handler_copy_endpoint(v367);
            v343 = nw_endpoint_get_logging_description(v360);
            __int16 v238 = nw_endpoint_handler_state_string(v367);
            v239 = nw_endpoint_handler_mode_string(v367);
            __int16 v240 = (OS_nw_path *)nw_endpoint_handler_copy_current_path(v367);
            int v241 = nw_endpoint_get_logging_description(v214);
            int v242 = nw_parameters_get_is_known_tracker((void *)child_parameters);
            *(_DWORD *)tcp_info buf = 136448258;
            unint64_t v243 = "";
            if (v242) {
              unint64_t v243 = ", tracker";
            }
            *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_update";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = v237;
            *(_WORD *)&unsigned char buf[22] = 2082;
            v380 = v356;
            *(_WORD *)unint64_t v381 = 2082;
            *(void *)&v381[2] = v343;
            *(_WORD *)&v381[10] = 2082;
            *(void *)&v381[12] = v238;
            __int16 v382 = 2082;
            v383 = v239;
            __int16 v384 = 2114;
            v385 = v240;
            __int16 v386 = 2082;
            v387 = v241;
            __int16 v388 = 2080;
            unint64_t v389 = v243;
            _os_log_impl(&dword_1830D4000, loga, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Adding endpoint handler for %{public}s%s", buf, 0x5Cu);

            uint64_t v213 = v354;
          }
          else
          {
            uint64_t v213 = v354;
          }
LABEL_254:
          unint64_t v219 = loga;
LABEL_255:

          goto LABEL_256;
        }
      }
LABEL_267:
      __int16 v244 = __nwlog_obj();
      if (os_log_type_enabled(v244, OS_LOG_TYPE_DEBUG))
      {

        v245 = v367;
        __int16 v246 = (void *)&unk_183D5C000;
      }
      else
      {
        BOOL v247 = gLogFDOverride == -1;

        v245 = v367;
        __int16 v246 = &unk_183D5C000;
        if (v247) {
          goto LABEL_279;
        }
      }
      *(void *)v377 = 0;
      *(void *)&v377[8] = v377;
      *(void *)&v377[16] = 0x2020000000;
      char v378 = 1;
      *(void *)os_log_type_t type = 0;
      v373 = type;
      uint64_t v374 = 0x2020000000;
      unint64_t v375 = 0;
      asprintf(&v375, "", v336, v337);
      __int16 v248 = (atomic_uchar *)*location;
      v371[0] = MEMORY[0x1E4F143A8];
      v371[1] = v246[310];
      v371[2] = ___ZL27nw_endpoint_resolver_updateP30NWConcrete_nw_endpoint_handlerPU25objcproto14OS_nw_resolver8NSObject20nw_resolver_status_t_block_invoke;
      v371[3] = &unk_1E5248260;
      v371[4] = type;
      v371[5] = v377;
      nw_array_apply(v248, (uint64_t)v371);
      if ((nw_endpoint_handler_get_logging_disabled(v245) & 1) == 0)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        id v249 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v249, OS_LOG_TYPE_DEBUG))
        {
          __int16 v250 = nw_endpoint_handler_get_id_string(v367);
          unint64_t v251 = nw_endpoint_handler_dry_run_string(v367);
          nw_endpoint_t v252 = nw_endpoint_handler_copy_endpoint(v367);
          int v253 = nw_endpoint_get_logging_description(v252);
          uint64_t v254 = nw_endpoint_handler_state_string(v367);
          v255 = nw_endpoint_handler_mode_string(v367);
          os_log_type_t v256 = (OS_nw_path *)nw_endpoint_handler_copy_current_path(v367);
          size_t v257 = (const char *)*((void *)v373 + 3);
          *(_DWORD *)tcp_info buf = 136448002;
          *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_update";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v250;
          *(_WORD *)&unsigned char buf[22] = 2082;
          v380 = v251;
          *(_WORD *)unint64_t v381 = 2082;
          *(void *)&v381[2] = v253;
          *(_WORD *)&v381[10] = 2082;
          *(void *)&v381[12] = v254;
          __int16 v382 = 2082;
          v383 = v255;
          __int16 v384 = 2114;
          v385 = v256;
          __int16 v386 = 2082;
          v387 = v257;
          _os_log_impl(&dword_1830D4000, v249, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Updated endpoint list is (%{public}s)", buf, 0x52u);
        }
        v245 = v367;
      }
      v258 = (void *)*((void *)v373 + 3);
      if (v258)
      {
        free(v258);
        *((void *)v373 + 3) = 0;
      }
      _Block_object_dispose(type, 8);
      _Block_object_dispose(v377, 8);
LABEL_279:
      v259 = nw_endpoint_handler_copy_endpoint(v245);
      nw_endpoint_type_t v260 = nw_endpoint_get_type(v259);
      if (v260 == (nw_endpoint_type_url|nw_endpoint_type_address)) {
        __int16 v261 = 7;
      }
      else {
        __int16 v261 = 2;
      }
      if (v260 == nw_endpoint_type_bonjour_service) {
        __int16 v262 = 4;
      }
      else {
        __int16 v262 = v261;
      }

      uint64_t v263 = *location;
      if (*location)
      {
        uint64_t v266 = v263 + 16;
        uint64_t v264 = *(void *)(v263 + 16);
        uint64_t v265 = *(void *)(v266 + 8);
        uint64_t v267 = v265 - v264;
        if (v265 != v264)
        {
          os_log_type_t v268 = v367;
          v367->event.domain = 2;
          v367->event.event = v262;
          nw_endpoint_handler_report(v367, 0, &v367->event.domain, 0);
          uint64_t v269 = *((void *)v363 + 6);
          if (v269) {
            uint64_t v269 = (uint64_t)(*(void *)(v269 + 24) - *(void *)(v269 + 16)) >> 3;
          }
          if (v339 == 2 && v267 >> 3 == v269)
          {
            int minimize_logging = nw_endpoint_handler_get_minimize_logging(v367);
            char logging_disabled = nw_endpoint_handler_get_logging_disabled(v367);
            if (minimize_logging)
            {
              if (logging_disabled) {
                goto LABEL_298;
              }
              if (__nwlog_connection_log::onceToken != -1) {
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
              }
              unint64_t v272 = (id)gconnectionLogObj;
              if (os_log_type_enabled(v272, OS_LOG_TYPE_DEBUG))
              {
                v315 = nw_endpoint_handler_get_id_string(v367);
                int v316 = nw_endpoint_handler_dry_run_string(v367);
                nw_endpoint_t v317 = nw_endpoint_handler_copy_endpoint(v367);
                unint64_t v318 = nw_endpoint_get_logging_description(v317);
                unint64_t v319 = nw_endpoint_handler_state_string(v367);
                v320 = nw_endpoint_handler_mode_string(v367);
                v321 = (OS_nw_path *)nw_endpoint_handler_copy_current_path(v367);
                *(_DWORD *)tcp_info buf = 136447746;
                *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_update";
                *(_WORD *)&unsigned char buf[12] = 2082;
                *(void *)&buf[14] = v315;
                *(_WORD *)&unsigned char buf[22] = 2082;
                v380 = v316;
                *(_WORD *)unint64_t v381 = 2082;
                *(void *)&v381[2] = v318;
                *(_WORD *)&v381[10] = 2082;
                *(void *)&v381[12] = v319;
                __int16 v382 = 2082;
                v383 = v320;
                __int16 v384 = 2114;
                v385 = v321;
                _os_log_impl(&dword_1830D4000, v272, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] resolver complete, all children failed", buf, 0x48u);
              }
            }
            else
            {
              if (logging_disabled)
              {
LABEL_298:
                nw_endpoint_handler_handle_failure(v268);
                v268->event = (nw_endpoint_handler_event_s)327682;
                nw_endpoint_handler_report(v268, 0, &v367->event.domain, 0);
LABEL_332:

                goto LABEL_333;
              }
              if (__nwlog_connection_log::onceToken != -1) {
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
              }
              unint64_t v272 = (id)gconnectionLogObj;
              if (os_log_type_enabled(v272, OS_LOG_TYPE_INFO))
              {
                unint64_t v273 = nw_endpoint_handler_get_id_string(v367);
                v274 = nw_endpoint_handler_dry_run_string(v367);
                nw_endpoint_t v275 = nw_endpoint_handler_copy_endpoint(v367);
                int v276 = nw_endpoint_get_logging_description(v275);
                BOOL v277 = nw_endpoint_handler_state_string(v367);
                v278 = nw_endpoint_handler_mode_string(v367);
                v279 = (OS_nw_path *)nw_endpoint_handler_copy_current_path(v367);
                *(_DWORD *)tcp_info buf = 136447746;
                *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_update";
                *(_WORD *)&unsigned char buf[12] = 2082;
                *(void *)&buf[14] = v273;
                *(_WORD *)&unsigned char buf[22] = 2082;
                v380 = v274;
                *(_WORD *)unint64_t v381 = 2082;
                *(void *)&v381[2] = v276;
                *(_WORD *)&v381[10] = 2082;
                *(void *)&v381[12] = v277;
                __int16 v382 = 2082;
                v383 = v278;
                __int16 v384 = 2114;
                v385 = v279;
                _os_log_impl(&dword_1830D4000, v272, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] resolver complete, all children failed", buf, 0x48u);
              }
            }

            os_log_type_t v268 = v367;
            goto LABEL_298;
          }
          uint64_t v293 = *((unsigned int *)v363 + 5);
          if (v293 && v269 != v293 && (*((unsigned char *)v363 + 24) & 2) == 0) {
            goto LABEL_332;
          }
          id v294 = nw_endpoint_handler_copy_context(v367);
          v369[0] = MEMORY[0x1E4F143A8];
          v369[1] = 3221225472;
          v369[2] = ___ZL27nw_endpoint_resolver_updateP30NWConcrete_nw_endpoint_handlerPU25objcproto14OS_nw_resolver8NSObject20nw_resolver_status_t_block_invoke_108;
          v369[3] = &unk_1E524BAA8;
          v370 = v367;
          nw_queue_context_async(v294, v369);

          dns_int error = v370;
LABEL_331:

          goto LABEL_332;
        }
      }
      v280 = v367;
      if (v339 != 2) {
        goto LABEL_332;
      }
      if (nw_endpoint_handler_trigger_agents(v367, 1))
      {
        int v281 = nw_endpoint_handler_get_minimize_logging(v367);
        char v282 = nw_endpoint_handler_get_logging_disabled(v367);
        if (v281)
        {
          if (v282) {
            goto LABEL_308;
          }
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          unint64_t v283 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v283, OS_LOG_TYPE_DEBUG))
          {
            v322 = nw_endpoint_handler_get_id_string(v367);
            int v323 = nw_endpoint_handler_dry_run_string(v367);
            nw_endpoint_t v324 = nw_endpoint_handler_copy_endpoint(v367);
            unint64_t v325 = nw_endpoint_get_logging_description(v324);
            unint64_t v326 = nw_endpoint_handler_state_string(v367);
            v327 = nw_endpoint_handler_mode_string(v367);
            v328 = (OS_nw_path *)nw_endpoint_handler_copy_current_path(v367);
            *(_DWORD *)tcp_info buf = 136447746;
            *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_update";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = v322;
            *(_WORD *)&unsigned char buf[22] = 2082;
            v380 = v323;
            *(_WORD *)unint64_t v381 = 2082;
            *(void *)&v381[2] = v325;
            *(_WORD *)&v381[10] = 2082;
            *(void *)&v381[12] = v326;
            __int16 v382 = 2082;
            v383 = v327;
            __int16 v384 = 2114;
            v385 = v328;
            _os_log_impl(&dword_1830D4000, v283, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] resolution failed, trying to trigger voluntary agents", buf, 0x48u);
          }
        }
        else
        {
          if (v282)
          {
LABEL_308:
            nw_endpoint_handler_reset_mode(v280, 0);
            goto LABEL_332;
          }
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          unint64_t v283 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v283, OS_LOG_TYPE_INFO))
          {
            unint64_t v284 = nw_endpoint_handler_get_id_string(v367);
            v285 = nw_endpoint_handler_dry_run_string(v367);
            nw_endpoint_t v286 = nw_endpoint_handler_copy_endpoint(v367);
            char v287 = nw_endpoint_get_logging_description(v286);
            int v288 = nw_endpoint_handler_state_string(v367);
            uint64_t v289 = nw_endpoint_handler_mode_string(v367);
            unint64_t v290 = (OS_nw_path *)nw_endpoint_handler_copy_current_path(v367);
            *(_DWORD *)tcp_info buf = 136447746;
            *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_update";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = v284;
            *(_WORD *)&unsigned char buf[22] = 2082;
            v380 = v285;
            *(_WORD *)unint64_t v381 = 2082;
            *(void *)&v381[2] = v287;
            *(_WORD *)&v381[10] = 2082;
            *(void *)&v381[12] = v288;
            __int16 v382 = 2082;
            v383 = v289;
            __int16 v384 = 2114;
            v385 = v290;
            _os_log_impl(&dword_1830D4000, v283, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] resolution failed, trying to trigger voluntary agents", buf, 0x48u);
          }
        }

        v280 = v367;
        goto LABEL_308;
      }
      id v296 = nw_endpoint_handler_copy_current_path(v367);
      nw_path_trigger_inactive_cellular_agent_if_necessary(v296);

      unint64_t v297 = v367;
      LODWORD(v296) = nw_endpoint_handler_get_minimize_logging(v367);
      char v298 = nw_endpoint_handler_get_logging_disabled(v367);
      if (v296)
      {
        if (v298) {
          goto LABEL_327;
        }
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        int v299 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v299, OS_LOG_TYPE_DEBUG))
        {
          v329 = nw_endpoint_handler_get_id_string(v367);
          int v330 = nw_endpoint_handler_dry_run_string(v367);
          nw_endpoint_t v331 = nw_endpoint_handler_copy_endpoint(v367);
          unint64_t v332 = nw_endpoint_get_logging_description(v331);
          unint64_t v333 = nw_endpoint_handler_state_string(v367);
          v334 = nw_endpoint_handler_mode_string(v367);
          v335 = (OS_nw_path *)nw_endpoint_handler_copy_current_path(v367);
          *(_DWORD *)tcp_info buf = 136447746;
          *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_update";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v329;
          *(_WORD *)&unsigned char buf[22] = 2082;
          v380 = v330;
          *(_WORD *)unint64_t v381 = 2082;
          *(void *)&v381[2] = v332;
          *(_WORD *)&v381[10] = 2082;
          *(void *)&v381[12] = v333;
          __int16 v382 = 2082;
          v383 = v334;
          __int16 v384 = 2114;
          v385 = v335;
          _os_log_impl(&dword_1830D4000, v299, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] resolution failed", buf, 0x48u);
        }
      }
      else
      {
        if (v298)
        {
LABEL_327:
          int error = nw_resolver_get_error(*((void **)v363 + 1));
          if (error) {
            dns_int error = nw_error_create_dns_error(error);
          }
          else {
            dns_int error = 0;
          }
          nw_endpoint_handler_handle_failure(v297);
          v297->event.domain = 2;
          v297->event.event = v262;
          nw_endpoint_handler_report(v297, 0, &v297->event.domain, dns_error);
          goto LABEL_331;
        }
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        int v299 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v299, OS_LOG_TYPE_INFO))
        {
          int v300 = nw_endpoint_handler_get_id_string(v367);
          __int16 v301 = nw_endpoint_handler_dry_run_string(v367);
          nw_endpoint_t v302 = nw_endpoint_handler_copy_endpoint(v367);
          int v303 = nw_endpoint_get_logging_description(v302);
          id v304 = nw_endpoint_handler_state_string(v367);
          unint64_t v305 = nw_endpoint_handler_mode_string(v367);
          unint64_t v306 = (OS_nw_path *)nw_endpoint_handler_copy_current_path(v367);
          *(_DWORD *)tcp_info buf = 136447746;
          *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_update";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v300;
          *(_WORD *)&unsigned char buf[22] = 2082;
          v380 = v301;
          *(_WORD *)unint64_t v381 = 2082;
          *(void *)&v381[2] = v303;
          *(_WORD *)&v381[10] = 2082;
          *(void *)&v381[12] = v304;
          __int16 v382 = 2082;
          v383 = v305;
          __int16 v384 = 2114;
          v385 = v306;
          _os_log_impl(&dword_1830D4000, v299, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] resolution failed", buf, 0x48u);
        }
      }

      unint64_t v297 = v367;
      goto LABEL_327;
    }
    unsigned int v338 = a3;
    id v94 = __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_parameters_get_fail_if_svcb_received";
    int v337 = 12;
    v336 = buf;
    uint64_t v95 = (char *)_os_log_send_and_compose_impl();

    v377[0] = 16;
    type[0] = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v95, v377, type))
    {
      if (v377[0] == 17)
      {
        id v96 = __nwlog_obj();
        os_log_type_t v97 = v377[0];
        if (os_log_type_enabled(v96, (os_log_type_t)v377[0]))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_parameters_get_fail_if_svcb_received";
          _os_log_impl(&dword_1830D4000, v96, v97, "%{public}s called with null parameters", buf, 0xCu);
        }
      }
      else if (type[0])
      {
        BOOL v98 = (char *)__nw_create_backtrace_string();
        id v96 = __nwlog_obj();
        os_log_type_t v99 = v377[0];
        BOOL v100 = os_log_type_enabled(v96, (os_log_type_t)v377[0]);
        if (v98)
        {
          if (v100)
          {
            *(_DWORD *)tcp_info buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_parameters_get_fail_if_svcb_received";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = v98;
            _os_log_impl(&dword_1830D4000, v96, v99, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v98);
          goto LABEL_117;
        }
        if (v100)
        {
          *(_DWORD *)tcp_info buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_parameters_get_fail_if_svcb_received";
          _os_log_impl(&dword_1830D4000, v96, v99, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        id v96 = __nwlog_obj();
        os_log_type_t v108 = v377[0];
        if (os_log_type_enabled(v96, (os_log_type_t)v377[0]))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_parameters_get_fail_if_svcb_received";
          _os_log_impl(&dword_1830D4000, v96, v108, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_117:
    if (v95) {
      free(v95);
    }
    a3 = v338;
    goto LABEL_120;
  }
  if (nw_endpoint_handler_get_minimize_logging(v9))
  {
    if ((nw_endpoint_handler_get_logging_disabled(v9) & 1) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      os_log_type_t v13 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
      {
        os_log_type_t v78 = nw_endpoint_handler_get_id_string(v9);
        id v79 = nw_endpoint_handler_dry_run_string(v9);
        int v351 = v9;
        nw_endpoint_t v80 = nw_endpoint_handler_copy_endpoint(v9);
        BOOL v81 = nw_endpoint_get_logging_description(v80);
        os_log_type_t v82 = nw_endpoint_handler_state_string(v351);
        char v83 = nw_endpoint_handler_mode_string(v351);
        int v84 = (OS_nw_path *)nw_endpoint_handler_copy_current_path(v351);
        *(_DWORD *)tcp_info buf = 136447746;
        *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_update";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = v78;
        *(_WORD *)&unsigned char buf[22] = 2082;
        v380 = v79;
        *(_WORD *)unint64_t v381 = 2082;
        *(void *)&v381[2] = v81;
        *(_WORD *)&v381[10] = 2082;
        *(void *)&v381[12] = v82;
        __int16 v382 = 2082;
        v383 = v83;
        __int16 v384 = 2114;
        v385 = v84;
        _os_log_impl(&dword_1830D4000, v13, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] ignoring resolver update", buf, 0x48u);
      }
      goto LABEL_82;
    }
  }
  else
  {
    os_log_type_t v11 = v9;
    char v12 = *((unsigned char *)v11 + 268);

    if ((v12 & 0x20) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      os_log_type_t v13 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        os_log_type_t v14 = v11;

        os_log_type_t v15 = v14;
        char v16 = *((unsigned char *)v11 + 268);

        if (v16) {
          os_log_type_t v17 = "dry-run ";
        }
        else {
          os_log_type_t v17 = "";
        }
        nw_endpoint_t v18 = nw_endpoint_handler_copy_endpoint(v15);
        os_log_type_t v19 = nw_endpoint_get_logging_description(v18);
        int v365 = v6;
        os_log_type_t v20 = v14->id_str;
        char v21 = v15;
        uint64_t v22 = v21;
        uint64_t v23 = v9->state;
        if (v23 > 5) {
          uint64_t v24 = "unknown-state";
        }
        else {
          uint64_t v24 = off_1E523FB38[v23];
        }

        id v60 = v22;
        id v61 = v60;
        os_log_type_t v62 = "path";
        switch(v7[29])
        {
          case 0u:
            break;
          case 1u:
            os_log_type_t v62 = "resolver";
            break;
          case 2u:
            os_log_type_t v62 = nw_endpoint_flow_mode_string(v60[31]);
            break;
          case 3u:
            os_log_type_t v62 = "proxy";
            break;
          case 4u:
            os_log_type_t v62 = "fallback";
            break;
          case 5u:
            os_log_type_t v62 = "transform";
            break;
          default:
            os_log_type_t v62 = "unknown-mode";
            break;
        }

        os_log_type_t v66 = v61;
        os_unfair_lock_lock((os_unfair_lock_t)v66 + 28);
        uint64_t v67 = v66[8];
        os_unfair_lock_unlock((os_unfair_lock_t)v66 + 28);

        *(_DWORD *)tcp_info buf = 136447746;
        *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_update";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = v20;
        *(_WORD *)&unsigned char buf[22] = 2082;
        v380 = v17;
        *(_WORD *)unint64_t v381 = 2082;
        *(void *)&v381[2] = v19;
        *(_WORD *)&v381[10] = 2082;
        *(void *)&v381[12] = v24;
        __int16 v382 = 2082;
        v383 = v62;
        __int16 v384 = 2114;
        v385 = v67;
        _os_log_impl(&dword_1830D4000, v13, OS_LOG_TYPE_DEFAULT, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] ignoring resolver update", buf, 0x48u);

        BOOL v6 = v365;
      }
LABEL_82:
    }
  }
LABEL_337:
}

void sub_1832B51C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,_Unwind_Exception *exception_object,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52)
{
  _Unwind_Resume(a1);
}

uint64_t nw_parameters_get_is_known_tracker(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  nw_establishment_report_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = (*(unsigned __int16 *)(*((void *)v1 + 13) + 108) >> 14) & 1;
    goto LABEL_3;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)tcp_info buf = 136446210;
  char v16 = "nw_parameters_get_is_known_tracker";
  BOOL v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        char v16 = "nw_parameters_get_is_known_tracker";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          char v16 = "nw_parameters_get_is_known_tracker";
          __int16 v17 = 2082;
          nw_endpoint_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        char v16 = "nw_parameters_get_is_known_tracker";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        char v16 = "nw_parameters_get_is_known_tracker";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

id nw_endpoint_handler_copy_context(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  nw_establishment_report_t v2 = v1;
  if (v1)
  {
    id v3 = v1[5];
    goto LABEL_3;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)tcp_info buf = 136446210;
  char v16 = "nw_endpoint_handler_copy_context";
  BOOL v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        char v16 = "nw_endpoint_handler_copy_context";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null handler", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          char v16 = "nw_endpoint_handler_copy_context";
          __int16 v17 = 2082;
          nw_endpoint_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        char v16 = "nw_endpoint_handler_copy_context";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null handler, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        char v16 = "nw_endpoint_handler_copy_context";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  id v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_endpoint_get_is_approved_app_domain(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  nw_establishment_report_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = (v1[231] >> 6) & 1;
    goto LABEL_3;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)tcp_info buf = 136446210;
  char v16 = "nw_endpoint_get_is_approved_app_domain";
  BOOL v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        char v16 = "nw_endpoint_get_is_approved_app_domain";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null endpoint", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          char v16 = "nw_endpoint_get_is_approved_app_domain";
          __int16 v17 = 2082;
          nw_endpoint_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        char v16 = "nw_endpoint_get_is_approved_app_domain";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        char v16 = "nw_endpoint_get_is_approved_app_domain";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_resolver_get_error(void *a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  nw_establishment_report_t v2 = v1;
  if (v1)
  {
    os_unfair_lock_lock(v1 + 3);
    uint64_t os_unfair_lock_opaque = v2[21]._os_unfair_lock_opaque;
    if (!os_unfair_lock_opaque)
    {
      if (v2[2]._os_unfair_lock_opaque == 2
        && nw_endpoint_get_type(*(nw_endpoint_t *)&v2[6]._os_unfair_lock_opaque) == nw_endpoint_type_host
        && ((uint64_t v4 = *(void *)&v2[36]._os_unfair_lock_opaque) == 0 || *(void *)(v4 + 24) == *(void *)(v4 + 16))
        && (v2[86]._os_unfair_lock_opaque & 0x100000) == 0
        && (~LOWORD(v2[22]._os_unfair_lock_opaque) & 0xC00) != 0)
      {
        uint64_t os_unfair_lock_opaque = 4294901742;
      }
      else
      {
        uint64_t os_unfair_lock_opaque = 0;
      }
    }
    os_unfair_lock_unlock(v2 + 3);
    goto LABEL_11;
  }
  BOOL v6 = __nwlog_obj();
  *(_DWORD *)tcp_info buf = 136446210;
  __int16 v17 = "nw_resolver_get_error";
  uint64_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        __int16 v17 = "nw_resolver_get_error";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null resolver", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          __int16 v17 = "nw_resolver_get_error";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null resolver, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_29;
      }
      if (v12)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        __int16 v17 = "nw_resolver_get_error";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null resolver, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        __int16 v17 = "nw_resolver_get_error";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null resolver, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_29:
  if (v7) {
    free(v7);
  }
  uint64_t os_unfair_lock_opaque = 0;
LABEL_11:

  return os_unfair_lock_opaque;
}

void sub_1832B60AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_path_trigger_inactive_cellular_agent_if_necessary(void *a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  nw_establishment_report_t v2 = v1;
  if (!v1)
  {
    id v5 = __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_path_trigger_inactive_cellular_agent_if_necessary";
    BOOL v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v17 = 0;
    if (__nwlog_fault(v6, &type, &v17))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v7 = __nwlog_obj();
        os_log_type_t v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_path_trigger_inactive_cellular_agent_if_necessary";
          _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null path", buf, 0xCu);
        }
      }
      else if (v17)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        uint64_t v7 = __nwlog_obj();
        os_log_type_t v10 = type;
        BOOL v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)tcp_info buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_path_trigger_inactive_cellular_agent_if_necessary";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = backtrace_string;
            _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_24;
        }
        if (v11)
        {
          *(_DWORD *)tcp_info buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_path_trigger_inactive_cellular_agent_if_necessary";
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null path, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        uint64_t v7 = __nwlog_obj();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_path_trigger_inactive_cellular_agent_if_necessary";
          _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_24:
    if (v6) {
      free(v6);
    }
    goto LABEL_26;
  }
  if (*((_DWORD *)v1 + 94) != 2 || *((_DWORD *)v1 + 95) != 3)
  {
LABEL_26:
    BOOL v4 = 0;
    goto LABEL_27;
  }
  *(void *)tcp_info buf = 0;
  *(void *)&buf[8] = buf;
  *(void *)&buf[16] = 0x2020000000;
  char v20 = 0;
  uint64_t v3 = (void *)*((void *)v1 + 28);
  if (v3)
  {
    applier[0] = MEMORY[0x1E4F143A8];
    applier[1] = 3221225472;
    applier[2] = __nw_path_trigger_inactive_cellular_agent_if_necessary_block_invoke;
    applier[3] = &unk_1E5248148;
    id v15 = v1;
    char v16 = buf;
    xpc_dictionary_apply(v3, applier);

    BOOL v4 = *(unsigned char *)(*(void *)&buf[8] + 24) != 0;
  }
  else
  {
    BOOL v4 = 0;
  }
  _Block_object_dispose(buf, 8);
LABEL_27:

  return v4;
}

void sub_1832B6410(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

_DWORD *nw_error_create_dns_error(int a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    nw_establishment_report_t v2 = [NWConcrete_nw_error alloc];
    return -[NWConcrete_nw_error initWithDomain:code:](v2, 2, a1);
  }
  BOOL v4 = __nwlog_obj();
  *(_DWORD *)tcp_info buf = 136446210;
  char v14 = "nw_error_create_dns_error";
  id v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (__nwlog_fault(v5, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        char v14 = "nw_error_create_dns_error";
        os_log_type_t v8 = "%{public}s called with null dns_error";
LABEL_18:
        _os_log_impl(&dword_1830D4000, v6, v7, v8, buf, 0xCu);
      }
    }
    else
    {
      if (v11)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        BOOL v6 = __nwlog_obj();
        os_log_type_t v7 = type;
        BOOL v10 = os_log_type_enabled(v6, type);
        if (backtrace_string)
        {
          if (v10)
          {
            *(_DWORD *)tcp_info buf = 136446466;
            char v14 = "nw_error_create_dns_error";
            __int16 v15 = 2082;
            char v16 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null dns_error, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_20;
        }
        if (!v10) {
          goto LABEL_19;
        }
        *(_DWORD *)tcp_info buf = 136446210;
        char v14 = "nw_error_create_dns_error";
        os_log_type_t v8 = "%{public}s called with null dns_error, no backtrace";
        goto LABEL_18;
      }
      BOOL v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        char v14 = "nw_error_create_dns_error";
        os_log_type_t v8 = "%{public}s called with null dns_error, backtrace limit exceeded";
        goto LABEL_18;
      }
    }
LABEL_19:
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
  return 0;
}

nw_protocol *nw_socket_get_output_local(nw_protocol *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (a1->handle == &nw_protocol_ref_counted_handle) {
      return a1[2].default_input_handler;
    }
    __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    os_log_type_t v13 = "nw_socket_get_output_local";
    nw_establishment_report_t v2 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v10 = 0;
    if (!__nwlog_fault(v2, &type, &v10)) {
      goto LABEL_32;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      if (os_log_type_enabled(v3, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v13 = "nw_socket_get_output_local";
        id v5 = "%{public}s called with null socket_handler";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (!v10)
    {
      uint64_t v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      if (os_log_type_enabled(v3, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v13 = "nw_socket_get_output_local";
        id v5 = "%{public}s called with null socket_handler, backtrace limit exceeded";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v3 = __nwlog_obj();
    os_log_type_t v4 = type;
    BOOL v9 = os_log_type_enabled(v3, type);
    if (!backtrace_string)
    {
      if (v9)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v13 = "nw_socket_get_output_local";
        id v5 = "%{public}s called with null socket_handler, no backtrace";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (v9)
    {
      *(_DWORD *)tcp_info buf = 136446466;
      os_log_type_t v13 = "nw_socket_get_output_local";
      __int16 v14 = 2082;
      __int16 v15 = backtrace_string;
      os_log_type_t v8 = "%{public}s called with null socket_handler, dumping backtrace:%{public}s";
      goto LABEL_21;
    }
    goto LABEL_22;
  }
  __nwlog_obj();
  *(_DWORD *)tcp_info buf = 136446210;
  os_log_type_t v13 = "nw_socket_get_output_local";
  nw_establishment_report_t v2 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v10 = 0;
  if (!__nwlog_fault(v2, &type, &v10)) {
    goto LABEL_32;
  }
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v10)
    {
      uint64_t v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      if (os_log_type_enabled(v3, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v13 = "nw_socket_get_output_local";
        id v5 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v3 = __nwlog_obj();
    os_log_type_t v4 = type;
    BOOL v7 = os_log_type_enabled(v3, type);
    if (!backtrace_string)
    {
      if (v7)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v13 = "nw_socket_get_output_local";
        id v5 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (v7)
    {
      *(_DWORD *)tcp_info buf = 136446466;
      os_log_type_t v13 = "nw_socket_get_output_local";
      __int16 v14 = 2082;
      __int16 v15 = backtrace_string;
      os_log_type_t v8 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_21:
      _os_log_impl(&dword_1830D4000, v3, v4, v8, buf, 0x16u);
    }
LABEL_22:
    free(backtrace_string);
    goto LABEL_32;
  }
  uint64_t v3 = __nwlog_obj();
  os_log_type_t v4 = type;
  if (os_log_type_enabled(v3, type))
  {
    *(_DWORD *)tcp_info buf = 136446210;
    os_log_type_t v13 = "nw_socket_get_output_local";
    id v5 = "%{public}s called with null protocol";
LABEL_31:
    _os_log_impl(&dword_1830D4000, v3, v4, v5, buf, 0xCu);
  }
LABEL_32:
  if (v2) {
    free(v2);
  }
  return 0;
}

id nw_protocol_stack_copy_original_proxied_transport_protocol(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  nw_establishment_report_t v2 = v1;
  if (v1)
  {
    id v3 = v1[5];
    goto LABEL_3;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)tcp_info buf = 136446210;
  uint64_t v16 = "nw_protocol_stack_copy_original_proxied_transport_protocol";
  BOOL v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint64_t v16 = "nw_protocol_stack_copy_original_proxied_transport_protocol";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null stack", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          uint64_t v16 = "nw_protocol_stack_copy_original_proxied_transport_protocol";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null stack, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint64_t v16 = "nw_protocol_stack_copy_original_proxied_transport_protocol";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null stack, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint64_t v16 = "nw_protocol_stack_copy_original_proxied_transport_protocol";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null stack, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  id v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_protocol_get_identifier(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (a1) {
    return *(void *)(a1 + 16);
  }
  __nwlog_obj();
  *(_DWORD *)tcp_info buf = 136446210;
  BOOL v11 = "__nw_protocol_get_identifier";
  nw_establishment_report_t v2 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v8 = 0;
  if (__nwlog_fault(v2, &type, &v8))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      if (os_log_type_enabled(v3, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        BOOL v11 = "__nw_protocol_get_identifier";
        id v5 = "%{public}s called with null protocol";
LABEL_17:
        _os_log_impl(&dword_1830D4000, v3, v4, v5, buf, 0xCu);
      }
    }
    else if (v8)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      BOOL v7 = os_log_type_enabled(v3, type);
      if (backtrace_string)
      {
        if (v7)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          BOOL v11 = "__nw_protocol_get_identifier";
          __int16 v12 = 2082;
          char v13 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v3, v4, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_18;
      }
      if (v7)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        BOOL v11 = "__nw_protocol_get_identifier";
        id v5 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_17;
      }
    }
    else
    {
      id v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      if (os_log_type_enabled(v3, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        BOOL v11 = "__nw_protocol_get_identifier";
        id v5 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_17;
      }
    }
  }
LABEL_18:
  if (v2) {
    free(v2);
  }
  return 0;
}

BOOL network_config_register_boringssl_log_debug_updates(void *a1)
{
  id v1 = a1;
  nw_allow_use_of_dispatch_internal();
  BOOL v2 = nw_settings_register_boringssl_log_debug_updates(v1);

  return v2;
}

BOOL nw_settings_register_boringssl_log_debug_updates(void *a1)
{
  nw_allow_use_of_dispatch_internal();
  pthread_mutex_lock(&sSettingsMutex);
  BOOL v2 = (const void *)sBoringSSLUpdateBlock;
  if ((void *)sBoringSSLUpdateBlock != a1)
  {
    if (a1)
    {
      a1 = _Block_copy(a1);
      BOOL v2 = (const void *)sBoringSSLUpdateBlock;
    }
    if (v2) {
      _Block_release(v2);
    }
    sBoringSSLUpdateBlock = (uint64_t)a1;
  }
  pthread_mutex_unlock(&sSettingsMutex);
  id v3 = (const char *)nw_setting_boringssl_log_debug;
  networkd_settings_init();
  if (!sCachedSettings) {
    return 0;
  }
  pthread_mutex_lock(&sSettingsMutex);
  os_log_type_t v4 = (void *)sCachedSettings;
  if (!sCachedSettings) {
    goto LABEL_13;
  }
  Class Class = object_getClass((id)sCachedSettings);
  BOOL v6 = 0;
  if (!v3 || Class != (Class)MEMORY[0x1E4F14590]) {
    goto LABEL_14;
  }
  xpc_object_t value = xpc_dictionary_get_value(v4, v3);
  if (value && (char v8 = value, object_getClass(value) == (Class)MEMORY[0x1E4F14570])) {
    BOOL v6 = xpc_BOOL_get_value(v8);
  }
  else {
LABEL_13:
  }
    BOOL v6 = 0;
LABEL_14:
  pthread_mutex_unlock(&sSettingsMutex);
  return v6;
}

void sub_1832B7A08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _Unwind_Resume(a1);
}

BOOL nw_parameters_get_include_peer_to_peer(nw_parameters_t parameters)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  nw_parameters_t v1 = parameters;
  nw_parameters_t v2 = v1;
  if (v1)
  {
    BOOL v3 = (*((unsigned __int16 *)v1[13].isa + 54) >> 3) & 1;
    goto LABEL_3;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)tcp_info buf = 136446210;
  uint64_t v16 = "nw_parameters_get_include_peer_to_peer";
  BOOL v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint64_t v16 = "nw_parameters_get_include_peer_to_peer";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          uint64_t v16 = "nw_parameters_get_include_peer_to_peer";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint64_t v16 = "nw_parameters_get_include_peer_to_peer";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint64_t v16 = "nw_parameters_get_include_peer_to_peer";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  LOBYTE(v3) = 0;
LABEL_3:

  return v3;
}

void sub_1832B7E54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_parameters_set_url_endpoint(void *a1, void *a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  BOOL v3 = a1;
  id v4 = a2;
  if (!v3)
  {
    os_log_type_t v8 = __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    __int16 v25 = "nw_parameters_set_url_endpoint";
    BOOL v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (!__nwlog_fault(v9, &type, &v22)) {
      goto LABEL_39;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        __int16 v25 = "nw_parameters_set_url_endpoint";
        _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v22)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          __int16 v25 = "nw_parameters_set_url_endpoint";
          __int16 v26 = 2082;
          char v27 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_39:
        if (!v9) {
          goto LABEL_5;
        }
LABEL_40:
        free(v9);
        goto LABEL_5;
      }
      if (v16)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        __int16 v25 = "nw_parameters_set_url_endpoint";
        _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        __int16 v25 = "nw_parameters_set_url_endpoint";
        _os_log_impl(&dword_1830D4000, v10, v20, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_38:

    goto LABEL_39;
  }
  id v5 = v3[25];
  v3[25] = 0;

  if (v4)
  {
    id v6 = v4;
    int v7 = [v6 type];

    if (v7 == 4)
    {
      objc_storeStrong(v3 + 25, a2);
      goto LABEL_5;
    }
    os_log_type_t v12 = __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    __int16 v25 = "nw_parameters_set_url_endpoint";
    BOOL v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (!__nwlog_fault(v9, &type, &v22)) {
      goto LABEL_39;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        __int16 v25 = "nw_parameters_set_url_endpoint";
        _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null (nw_endpoint_get_type(url_endpoint) == nw_endpoint_type_url)", buf, 0xCu);
      }
      goto LABEL_38;
    }
    if (!v22)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v21 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        __int16 v25 = "nw_parameters_set_url_endpoint";
        _os_log_impl(&dword_1830D4000, v10, v21, "%{public}s called with null (nw_endpoint_get_type(url_endpoint) == nw_endpoint_type_url), backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_38;
    }
    __int16 v17 = (char *)__nw_create_backtrace_string();
    os_log_type_t v10 = __nwlog_obj();
    os_log_type_t v18 = type;
    BOOL v19 = os_log_type_enabled(v10, type);
    if (!v17)
    {
      if (v19)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        __int16 v25 = "nw_parameters_set_url_endpoint";
        _os_log_impl(&dword_1830D4000, v10, v18, "%{public}s called with null (nw_endpoint_get_type(url_endpoint) == nw_endpoint_type_url), no backtrace", buf, 0xCu);
      }
      goto LABEL_38;
    }
    if (v19)
    {
      *(_DWORD *)tcp_info buf = 136446466;
      __int16 v25 = "nw_parameters_set_url_endpoint";
      __int16 v26 = 2082;
      char v27 = v17;
      _os_log_impl(&dword_1830D4000, v10, v18, "%{public}s called with null (nw_endpoint_get_type(url_endpoint) == nw_endpoint_type_url), dumping backtrace:%{public}s", buf, 0x16u);
    }

    free(v17);
    if (v9) {
      goto LABEL_40;
    }
  }
LABEL_5:
}

void sub_1832B8530(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1832B9480(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17)
{
  _Unwind_Resume(a1);
}

void nw_endpoint_resolver_update_path_resolver_locked(NWConcrete_nw_endpoint_handler *a1)
{
  uint64_t v71 = *MEMORY[0x1E4F143B8];
  nw_parameters_t v1 = a1;
  nw_parameters_t v2 = v1;
  if (!v1)
  {
    char v32 = __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_endpoint_handler_get_mode";
    char v33 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v66 = 0;
    if (__nwlog_fault(v33, &type, &v66))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        nw_endpoint_t v34 = __nwlog_obj();
        os_log_type_t v35 = type;
        if (os_log_type_enabled(v34, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_1830D4000, v34, v35, "%{public}s called with null handler", buf, 0xCu);
        }
      }
      else if (v66)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        nw_endpoint_t v34 = __nwlog_obj();
        os_log_type_t v37 = type;
        BOOL v38 = os_log_type_enabled(v34, type);
        if (backtrace_string)
        {
          if (v38)
          {
            *(_DWORD *)tcp_info buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_endpoint_handler_get_mode";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = backtrace_string;
            _os_log_impl(&dword_1830D4000, v34, v37, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_54;
        }
        if (v38)
        {
          *(_DWORD *)tcp_info buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_1830D4000, v34, v37, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        nw_endpoint_t v34 = __nwlog_obj();
        os_log_type_t v43 = type;
        if (os_log_type_enabled(v34, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_1830D4000, v34, v43, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_54:
    if (v33) {
      free(v33);
    }
    unsigned int mode = 0;
    goto LABEL_57;
  }
  unsigned int mode = v1->mode;

  if (mode == 1)
  {
    id v4 = v2;
    os_unfair_lock_lock(&v4->lock);
    id v5 = v4->current_path;
    os_unfair_lock_unlock(&v4->lock);

    id v6 = (void **)nw_endpoint_handler_copy_resolver(v4);
    int v7 = v6[1];
    if (!v7)
    {
LABEL_14:
      BOOL v19 = nw_dictionary_create();
      v62[0] = MEMORY[0x1E4F143A8];
      v62[1] = 3221225472;
      v62[2] = ___ZL48nw_endpoint_resolver_update_path_resolver_lockedP30NWConcrete_nw_endpoint_handler_block_invoke;
      v62[3] = &unk_1E523F960;
      os_log_type_t v20 = v6;
      id v63 = v20;
      os_log_type_t v21 = v19;
      id v64 = v21;
      char v22 = v4;
      int v65 = v22;
      nw_path_enumerate_resolve_options(v5, v62);
      objc_storeStrong(v20 + 10, v19);
      uint64_t v23 = v20[11];
      id v24 = nw_path_copy_resolved_endpoints(v5);
      __int16 v25 = v20[11];
      v20[11] = v24;

      if (v23 || v20[11]) {
        goto LABEL_26;
      }
      __int16 v26 = (atomic_uchar *)nw_path_copy_flows(v5);
      char v27 = v26;
      if (v26)
      {
        *(void *)tcp_info buf = 0;
        *(void *)&buf[8] = buf;
        *(void *)&buf[16] = 0x3032000000;
        BOOL v69 = __Block_byref_object_copy__30367;
        *(void *)&long long v70 = __Block_byref_object_dispose__30368;
        *((void *)&v70 + 1) = 0;
        v61[0] = MEMORY[0x1E4F143A8];
        v61[1] = 3221225472;
        v61[2] = ___ZL48nw_endpoint_resolver_update_path_resolver_lockedP30NWConcrete_nw_endpoint_handler_block_invoke_100;
        v61[3] = &unk_1E5248058;
        v61[4] = buf;
        nw_array_apply(v26, (uint64_t)v61);
        if (*(void *)(*(void *)&buf[8] + 40))
        {
          uint64_t v28 = nw_endpoint_handler_copy_endpoint(v22);
          nw_endpoint_type_t v29 = nw_endpoint_get_type(v28);

          nw_endpoint_handler_handle_failure(v22);
          if (v29 == (nw_endpoint_type_url|nw_endpoint_type_address)) {
            __int16 v30 = 7;
          }
          else {
            __int16 v30 = 2;
          }
          if (v29 == nw_endpoint_type_bonjour_service) {
            __int16 v30 = 4;
          }
          os_log_type_t v31 = *(void **)(*(void *)&buf[8] + 40);
          v22->event.domain = 2;
          v22->event.event = v30;
          nw_endpoint_handler_report(v22, 0, &v22->event.domain, v31);
        }
        _Block_object_dispose(buf, 8);
      }
      if (v20[11]) {
LABEL_26:
      }
        nw_endpoint_resolver_update(v22, v6[1], 2u);

      goto LABEL_78;
    }
    os_log_type_t v8 = v7;
    BOOL v9 = v5;
    os_log_type_t v10 = v9;
    if (v9)
    {
      char v11 = v8[346];
      if ((v11 & 0x40) == 0)
      {
        os_log_type_t v12 = v9;
        char v13 = *((unsigned char *)v12 + 473);

        if ((v13 & 0x40) != 0) {
          *((_WORD *)v8 + 44) &= ~1u;
        }
        char v11 = v8[346];
      }
      if ((v11 & 0x80) == 0)
      {
        uint64_t v14 = v10;
        int v15 = *((char *)v14 + 473);

        if (v15 < 0) {
          *((_WORD *)v8 + 44) &= ~2u;
        }
      }
      BOOL v16 = v10;
      char v17 = *((unsigned char *)v16 + 473) & 0x40;

      v8[346] = v8[346] & 0xBF | v17;
      os_log_type_t v18 = v16;
      LOBYTE(v16) = *((unsigned char *)v16 + 473);

      v8[346] = v16 & 0x80 | v8[346] & 0x7F;
LABEL_13:

      goto LABEL_14;
    }
    uint64_t v39 = __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_resolver_update_path";
    uint64_t v40 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v66 = 0;
    if (__nwlog_fault(v40, &type, &v66))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        id v41 = __nwlog_obj();
        os_log_type_t v42 = type;
        if (os_log_type_enabled(v41, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_resolver_update_path";
          _os_log_impl(&dword_1830D4000, v41, v42, "%{public}s called with null path", buf, 0xCu);
        }
      }
      else if (v66)
      {
        __int16 v44 = (char *)__nw_create_backtrace_string();
        id v41 = __nwlog_obj();
        os_log_type_t v45 = type;
        BOOL v46 = os_log_type_enabled(v41, type);
        if (v44)
        {
          if (v46)
          {
            *(_DWORD *)tcp_info buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_resolver_update_path";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = v44;
            _os_log_impl(&dword_1830D4000, v41, v45, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v44);
          goto LABEL_98;
        }
        if (v46)
        {
          *(_DWORD *)tcp_info buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_resolver_update_path";
          _os_log_impl(&dword_1830D4000, v41, v45, "%{public}s called with null path, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        id v41 = __nwlog_obj();
        os_log_type_t v60 = type;
        if (os_log_type_enabled(v41, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_resolver_update_path";
          _os_log_impl(&dword_1830D4000, v41, v60, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_98:
    if (v40) {
      free(v40);
    }
    goto LABEL_13;
  }
LABEL_57:
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v47 = (id)gLogObj;
  if (mode > 5) {
    uint64_t v48 = "unknown-mode";
  }
  else {
    uint64_t v48 = off_1E523FB08[mode];
  }
  *(_DWORD *)tcp_info buf = 136446722;
  *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_update_path_resolver_locked";
  *(_WORD *)&unsigned char buf[12] = 2082;
  *(void *)&buf[14] = v48;
  *(_WORD *)&unsigned char buf[22] = 2082;
  BOOL v69 = (uint64_t (*)(uint64_t, uint64_t))"resolver";
  os_log_type_t v49 = (void *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v66 = 0;
  if (!__nwlog_fault((const char *)v49, &type, &v66))
  {
LABEL_76:
    if (!v49) {
      goto LABEL_78;
    }
LABEL_77:
    free(v49);
    goto LABEL_78;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    nw_endpoint_t v50 = (id)gLogObj;
    os_log_type_t v51 = type;
    if (os_log_type_enabled(v50, type))
    {
      if (mode > 5) {
        uint64_t v52 = "unknown-mode";
      }
      else {
        uint64_t v52 = off_1E523FB08[mode];
      }
      *(_DWORD *)tcp_info buf = 136446722;
      *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_update_path_resolver_locked";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = v52;
      *(_WORD *)&unsigned char buf[22] = 2082;
      BOOL v69 = (uint64_t (*)(uint64_t, uint64_t))"resolver";
      _os_log_impl(&dword_1830D4000, v50, v51, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
    }
LABEL_75:

    goto LABEL_76;
  }
  if (!v66)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    nw_endpoint_t v50 = (id)gLogObj;
    os_log_type_t v57 = type;
    if (os_log_type_enabled(v50, type))
    {
      if (mode > 5) {
        __int16 v58 = "unknown-mode";
      }
      else {
        __int16 v58 = off_1E523FB08[mode];
      }
      *(_DWORD *)tcp_info buf = 136446722;
      *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_update_path_resolver_locked";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = v58;
      *(_WORD *)&unsigned char buf[22] = 2082;
      BOOL v69 = (uint64_t (*)(uint64_t, uint64_t))"resolver";
      _os_log_impl(&dword_1830D4000, v50, v57, "%{public}s Handler is in mode %{public}s, expected %{public}s, backtrace limit exceeded", buf, 0x20u);
    }
    goto LABEL_75;
  }
  os_log_type_t v53 = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  nw_endpoint_t v50 = (id)gLogObj;
  os_log_type_t v54 = type;
  BOOL v55 = os_log_type_enabled(v50, type);
  if (!v53)
  {
    if (v55)
    {
      if (mode > 5) {
        int64_t v59 = "unknown-mode";
      }
      else {
        int64_t v59 = off_1E523FB08[mode];
      }
      *(_DWORD *)tcp_info buf = 136446722;
      *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_update_path_resolver_locked";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = v59;
      *(_WORD *)&unsigned char buf[22] = 2082;
      BOOL v69 = (uint64_t (*)(uint64_t, uint64_t))"resolver";
      _os_log_impl(&dword_1830D4000, v50, v54, "%{public}s Handler is in mode %{public}s, expected %{public}s, no backtrace", buf, 0x20u);
    }
    goto LABEL_75;
  }
  if (v55)
  {
    if (mode > 5) {
      nw_endpoint_type_t v56 = "unknown-mode";
    }
    else {
      nw_endpoint_type_t v56 = off_1E523FB08[mode];
    }
    *(_DWORD *)tcp_info buf = 136446978;
    *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_update_path_resolver_locked";
    *(_WORD *)&unsigned char buf[12] = 2082;
    *(void *)&buf[14] = v56;
    *(_WORD *)&unsigned char buf[22] = 2082;
    BOOL v69 = (uint64_t (*)(uint64_t, uint64_t))"resolver";
    LOWORD(v70) = 2082;
    *(void *)((char *)&v70 + 2) = v53;
    _os_log_impl(&dword_1830D4000, v50, v54, "%{public}s Handler is in mode %{public}s, expected %{public}s, dumping backtrace:%{public}s", buf, 0x2Au);
  }

  free(v53);
  if (v49) {
    goto LABEL_77;
  }
LABEL_78:
}

void sub_1832BA05C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,void *a24,void *a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,id a32)
{
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

void *nw_dictionary_create()
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  objc_opt_class();
  uint64_t v0 = _os_object_alloc();
  if (!v0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)tcp_info buf = 136446210;
    char v27 = "nw_dictionary_create";
    int v7 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (!__nwlog_fault(v7, &type, &v24)) {
      goto LABEL_25;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v8 = gLogObj;
      os_log_type_t v9 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_25;
      }
      *(_DWORD *)tcp_info buf = 136446210;
      char v27 = "nw_dictionary_create";
      os_log_type_t v10 = "%{public}s nw_dictionary_obj_alloc failed";
    }
    else
    {
      if (v24)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v12 = gLogObj;
        os_log_type_t v13 = type;
        BOOL v14 = os_log_type_enabled((os_log_t)gLogObj, type);
        if (backtrace_string)
        {
          if (v14)
          {
            *(_DWORD *)tcp_info buf = 136446466;
            char v27 = "nw_dictionary_create";
            __int16 v28 = 2082;
            nw_endpoint_type_t v29 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s nw_dictionary_obj_alloc failed, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(backtrace_string);
          goto LABEL_25;
        }
        if (!v14)
        {
LABEL_25:
          if (v7) {
            free(v7);
          }
          return 0;
        }
        *(_DWORD *)tcp_info buf = 136446210;
        char v27 = "nw_dictionary_create";
        os_log_type_t v10 = "%{public}s nw_dictionary_obj_alloc failed, no backtrace";
        BOOL v19 = v12;
        os_log_type_t v20 = v13;
LABEL_24:
        _os_log_impl(&dword_1830D4000, v19, v20, v10, buf, 0xCu);
        goto LABEL_25;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v8 = gLogObj;
      os_log_type_t v9 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_25;
      }
      *(_DWORD *)tcp_info buf = 136446210;
      char v27 = "nw_dictionary_create";
      os_log_type_t v10 = "%{public}s nw_dictionary_obj_alloc failed, backtrace limit exceeded";
    }
    BOOL v19 = v8;
    os_log_type_t v20 = v9;
    goto LABEL_24;
  }
  nw_parameters_t v1 = (void *)v0;
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  v1[2] = v2;
  if (!v2)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)tcp_info buf = 136446210;
    char v27 = "nw_dictionary_create";
    BOOL v3 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (__nwlog_fault(v3, &type, &v24))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v4 = gLogObj;
        os_log_type_t v5 = type;
        if (os_log_type_enabled((os_log_t)gLogObj, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          char v27 = "nw_dictionary_create";
          id v6 = "%{public}s xpc_dictionary_create failed";
LABEL_31:
          os_log_type_t v21 = v4;
          os_log_type_t v22 = v5;
LABEL_32:
          _os_log_impl(&dword_1830D4000, v21, v22, v6, buf, 0xCu);
        }
      }
      else if (v24)
      {
        int v15 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v16 = gLogObj;
        os_log_type_t v17 = type;
        BOOL v18 = os_log_type_enabled((os_log_t)gLogObj, type);
        if (v15)
        {
          if (v18)
          {
            *(_DWORD *)tcp_info buf = 136446466;
            char v27 = "nw_dictionary_create";
            __int16 v28 = 2082;
            nw_endpoint_type_t v29 = v15;
            _os_log_impl(&dword_1830D4000, v16, v17, "%{public}s xpc_dictionary_create failed, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v15);
          goto LABEL_33;
        }
        if (v18)
        {
          *(_DWORD *)tcp_info buf = 136446210;
          char v27 = "nw_dictionary_create";
          id v6 = "%{public}s xpc_dictionary_create failed, no backtrace";
          os_log_type_t v21 = v16;
          os_log_type_t v22 = v17;
          goto LABEL_32;
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v4 = gLogObj;
        os_log_type_t v5 = type;
        if (os_log_type_enabled((os_log_t)gLogObj, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          char v27 = "nw_dictionary_create";
          id v6 = "%{public}s xpc_dictionary_create failed, backtrace limit exceeded";
          goto LABEL_31;
        }
      }
    }
LABEL_33:
    if (v3) {
      free(v3);
    }
    os_release(v1);
    return 0;
  }
  return v1;
}

id nw_path_copy_flows(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  nw_parameters_t v1 = a1;
  xpc_object_t v2 = v1;
  if (v1)
  {
    id v3 = v1[9];
    goto LABEL_3;
  }
  os_log_type_t v5 = __nwlog_obj();
  *(_DWORD *)tcp_info buf = 136446210;
  BOOL v16 = "nw_path_copy_flows";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        BOOL v16 = "nw_path_copy_flows";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null path", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          BOOL v16 = "nw_path_copy_flows";
          __int16 v17 = 2082;
          BOOL v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        BOOL v16 = "nw_path_copy_flows";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        BOOL v16 = "nw_path_copy_flows";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  id v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_resolver_set_update_handler(void *a1, void *a2, void *a3)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  id v6 = a1;
  id v7 = a2;
  id v8 = a3;
  os_log_type_t v9 = v8;
  if (v6)
  {
    if (v8)
    {
      os_unfair_lock_lock((os_unfair_lock_t)v6 + 3);
      if (*((void *)v6 + 12))
      {
        os_unfair_lock_unlock((os_unfair_lock_t)v6 + 3);
        uint64_t v10 = 0;
      }
      else
      {
        BOOL v11 = _Block_copy(v9);
        os_log_type_t v12 = (void *)*((void *)v6 + 12);
        *((void *)v6 + 12) = v11;

        objc_storeStrong((id *)v6 + 14, a2);
        *((_WORD *)v6 + 44) = 0;
        objc_storeStrong((id *)v6 + 27, a1);
        os_unfair_lock_unlock((os_unfair_lock_t)v6 + 3);
        char v13 = (void *)*((void *)v6 + 4);
        v28[0] = MEMORY[0x1E4F143A8];
        v28[1] = 3221225472;
        v28[2] = __nw_resolver_set_update_handler_block_invoke;
        v28[3] = &unk_1E524BAA8;
        id v29 = v6;
        nw_queue_context_async_if_needed(v13, v28);

        uint64_t v10 = 1;
      }
      goto LABEL_6;
    }
    uint64_t v19 = __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    char v33 = "nw_resolver_set_update_handler";
    BOOL v16 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v30 = 0;
    if (__nwlog_fault(v16, &type, &v30))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __int16 v17 = __nwlog_obj();
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v17, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          char v33 = "nw_resolver_set_update_handler";
          _os_log_impl(&dword_1830D4000, v17, v20, "%{public}s called with null handler", buf, 0xCu);
        }
LABEL_38:

        goto LABEL_39;
      }
      if (!v30)
      {
        __int16 v17 = __nwlog_obj();
        os_log_type_t v27 = type;
        if (os_log_type_enabled(v17, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          char v33 = "nw_resolver_set_update_handler";
          _os_log_impl(&dword_1830D4000, v17, v27, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_38;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __int16 v17 = __nwlog_obj();
      os_log_type_t v24 = type;
      BOOL v25 = os_log_type_enabled(v17, type);
      if (!backtrace_string)
      {
        if (v25)
        {
          *(_DWORD *)tcp_info buf = 136446210;
          char v33 = "nw_resolver_set_update_handler";
          _os_log_impl(&dword_1830D4000, v17, v24, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
        goto LABEL_38;
      }
      if (v25)
      {
        *(_DWORD *)tcp_info buf = 136446466;
        char v33 = "nw_resolver_set_update_handler";
        __int16 v34 = 2082;
        os_log_type_t v35 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v17, v24, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_26;
    }
  }
  else
  {
    int v15 = __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    char v33 = "nw_resolver_set_update_handler";
    BOOL v16 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v30 = 0;
    if (__nwlog_fault(v16, &type, &v30))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __int16 v17 = __nwlog_obj();
        os_log_type_t v18 = type;
        if (os_log_type_enabled(v17, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          char v33 = "nw_resolver_set_update_handler";
          _os_log_impl(&dword_1830D4000, v17, v18, "%{public}s called with null resolver", buf, 0xCu);
        }
        goto LABEL_38;
      }
      if (!v30)
      {
        __int16 v17 = __nwlog_obj();
        os_log_type_t v26 = type;
        if (os_log_type_enabled(v17, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          char v33 = "nw_resolver_set_update_handler";
          _os_log_impl(&dword_1830D4000, v17, v26, "%{public}s called with null resolver, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_38;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __int16 v17 = __nwlog_obj();
      os_log_type_t v22 = type;
      BOOL v23 = os_log_type_enabled(v17, type);
      if (!backtrace_string)
      {
        if (v23)
        {
          *(_DWORD *)tcp_info buf = 136446210;
          char v33 = "nw_resolver_set_update_handler";
          _os_log_impl(&dword_1830D4000, v17, v22, "%{public}s called with null resolver, no backtrace", buf, 0xCu);
        }
        goto LABEL_38;
      }
      if (v23)
      {
        *(_DWORD *)tcp_info buf = 136446466;
        char v33 = "nw_resolver_set_update_handler";
        __int16 v34 = 2082;
        os_log_type_t v35 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v17, v22, "%{public}s called with null resolver, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_26:

      free(backtrace_string);
    }
  }
LABEL_39:
  if (v16) {
    free(v16);
  }
  uint64_t v10 = 0;
LABEL_6:

  return v10;
}

void sub_1832BAE1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

void nw_path_enumerate_resolve_options(void *a1, void *a2)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  os_log_type_t v5 = v4;
  if (!v3)
  {
    BOOL v11 = __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    os_log_type_t v31 = "nw_path_enumerate_resolve_options";
    os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v28 = 0;
    if (!__nwlog_fault(v12, &type, &v28)) {
      goto LABEL_41;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v31 = "nw_path_enumerate_resolve_options";
        _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s called with null path", buf, 0xCu);
      }
    }
    else if (v28)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      char v13 = __nwlog_obj();
      os_log_type_t v18 = type;
      BOOL v19 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          os_log_type_t v31 = "nw_path_enumerate_resolve_options";
          __int16 v32 = 2082;
          char v33 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v13, v18, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_41:
        if (!v12) {
          goto LABEL_7;
        }
LABEL_42:
        free(v12);
        goto LABEL_7;
      }
      if (v19)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v31 = "nw_path_enumerate_resolve_options";
        _os_log_impl(&dword_1830D4000, v13, v18, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      char v13 = __nwlog_obj();
      os_log_type_t v23 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v31 = "nw_path_enumerate_resolve_options";
        _os_log_impl(&dword_1830D4000, v13, v23, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_40:

    goto LABEL_41;
  }
  if (v4)
  {
    id v6 = v3[3];
    id v7 = v6;
    if (v6)
    {
      id v8 = v6;
      int v9 = [v8 type];

      id v10 = v3[28];
      if (v10)
      {
        applier[0] = MEMORY[0x1E4F143A8];
        applier[1] = 3221225472;
        applier[2] = __nw_path_enumerate_resolve_options_block_invoke;
        applier[3] = &unk_1E5248198;
        int v27 = v9;
        id v26 = v5;
        xpc_dictionary_apply(v10, applier);
      }
    }

    goto LABEL_7;
  }
  int v15 = __nwlog_obj();
  *(_DWORD *)tcp_info buf = 136446210;
  os_log_type_t v31 = "nw_path_enumerate_resolve_options";
  os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v28 = 0;
  if (!__nwlog_fault(v12, &type, &v28)) {
    goto LABEL_41;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    char v13 = __nwlog_obj();
    os_log_type_t v16 = type;
    if (os_log_type_enabled(v13, type))
    {
      *(_DWORD *)tcp_info buf = 136446210;
      os_log_type_t v31 = "nw_path_enumerate_resolve_options";
      _os_log_impl(&dword_1830D4000, v13, v16, "%{public}s called with null enumerate_block", buf, 0xCu);
    }
    goto LABEL_40;
  }
  if (!v28)
  {
    char v13 = __nwlog_obj();
    os_log_type_t v24 = type;
    if (os_log_type_enabled(v13, type))
    {
      *(_DWORD *)tcp_info buf = 136446210;
      os_log_type_t v31 = "nw_path_enumerate_resolve_options";
      _os_log_impl(&dword_1830D4000, v13, v24, "%{public}s called with null enumerate_block, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_40;
  }
  os_log_type_t v20 = (char *)__nw_create_backtrace_string();
  char v13 = __nwlog_obj();
  os_log_type_t v21 = type;
  BOOL v22 = os_log_type_enabled(v13, type);
  if (!v20)
  {
    if (v22)
    {
      *(_DWORD *)tcp_info buf = 136446210;
      os_log_type_t v31 = "nw_path_enumerate_resolve_options";
      _os_log_impl(&dword_1830D4000, v13, v21, "%{public}s called with null enumerate_block, no backtrace", buf, 0xCu);
    }
    goto LABEL_40;
  }
  if (v22)
  {
    *(_DWORD *)tcp_info buf = 136446466;
    os_log_type_t v31 = "nw_path_enumerate_resolve_options";
    __int16 v32 = 2082;
    char v33 = v20;
    _os_log_impl(&dword_1830D4000, v13, v21, "%{public}s called with null enumerate_block, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v20);
  if (v12) {
    goto LABEL_42;
  }
LABEL_7:
}

void sub_1832BB384(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

id nw_path_copy_resolved_endpoints(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  nw_parameters_t v1 = a1;
  xpc_object_t v2 = v1;
  if (v1)
  {
    id v3 = v1[8];
    goto LABEL_3;
  }
  os_log_type_t v5 = __nwlog_obj();
  *(_DWORD *)tcp_info buf = 136446210;
  os_log_type_t v16 = "nw_path_copy_resolved_endpoints";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v16 = "nw_path_copy_resolved_endpoints";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null path", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          os_log_type_t v16 = "nw_path_copy_resolved_endpoints";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v16 = "nw_path_copy_resolved_endpoints";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v16 = "nw_path_copy_resolved_endpoints";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  id v3 = 0;
LABEL_3:

  return v3;
}

BOOL nw_parameters_multipath_fallback_allowed(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  xpc_object_t v2 = v1;
  if (v1)
  {
    BOOL v3 = (*(_DWORD *)(*((void *)v1 + 13) + 103) & 0xFFFFFFFE) == 2;
    goto LABEL_3;
  }
  os_log_type_t v5 = __nwlog_obj();
  *(_DWORD *)tcp_info buf = 136446210;
  os_log_type_t v16 = "nw_parameters_multipath_fallback_allowed";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v16 = "nw_parameters_multipath_fallback_allowed";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          os_log_type_t v16 = "nw_parameters_multipath_fallback_allowed";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v16 = "nw_parameters_multipath_fallback_allowed";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v16 = "nw_parameters_multipath_fallback_allowed";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  BOOL v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_path_evaluator_evaluate(NWConcrete_nw_path_evaluator *a1, int *a2)
{
  uint64_t v80 = *MEMORY[0x1E4F143B8];
  BOOL v3 = a1;
  id v4 = (void *)*((void *)v3 + 1);
  if (v4)
  {
    os_log_type_t v5 = v4;
    id v6 = *(id *)(v5[13] + 136);

    if (nw_path_endpoint_is_always_satisfied(*((void **)v3 + 2)))
    {
      uuid_generate_random((unsigned __int8 *)v3 + 80);
      id v7 = nw_path_create(*((void **)v3 + 2), *((void **)v3 + 1));
      os_log_type_t v8 = (void *)*((void *)v3 + 6);
      *((void *)v3 + 6) = v7;

      uint64_t v9 = *((void *)v3 + 6);
      if (v9)
      {
        objc_storeStrong((id *)(v9 + 32), *((id *)v3 + 3));
        os_log_type_t v10 = (char *)v3 + 48;
        objc_storeStrong((id *)(*((void *)v3 + 6) + 40), *((id *)v3 + 4));
        objc_storeStrong((id *)(*((void *)v3 + 6) + 48), *((id *)v3 + 5));
        *(unsigned char *)(*(void *)v10 + 475) = *(unsigned char *)(*(void *)v10 + 475) & 0xFE | ((*((unsigned char *)v3 + 107) & 2) != 0);
        *(_WORD *)(*(void *)v10 + 384) = *((_WORD *)v3 + 52);
        *(unsigned char *)(*(void *)v10 + 386) = *((unsigned char *)v3 + 106);
        *(unsigned char *)(*(void *)v10 + 475) = *(unsigned char *)(*(void *)v10 + 475) & 0xFD | (*((unsigned char *)v3 + 107) >> 1) & 2;
        *(_OWORD *)(*(void *)v10 + 120) = *((_OWORD *)v3 + 5);
LABEL_67:
        nw_path_snapshot_path(*((NWConcrete_nw_path **)v3 + 6));
        uint64_t v44 = 1;
LABEL_86:

        goto LABEL_87;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v22 = (id)gLogObj;
      *(_DWORD *)os_log_type_t v76 = 136446210;
      BOOL v77 = "nw_path_evaluator_evaluate";
      os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

      buf[0] = 16;
      LOBYTE(v67) = 0;
      if (!__nwlog_fault(v12, buf, &v67))
      {
LABEL_74:
        if (!v12) {
          goto LABEL_85;
        }
        goto LABEL_84;
      }
      if (buf[0] == 17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v23 = (id)gLogObj;
        os_log_type_t v24 = buf[0];
        if (os_log_type_enabled(v23, (os_log_type_t)buf[0]))
        {
          *(_DWORD *)os_log_type_t v76 = 136446210;
          BOOL v77 = "nw_path_evaluator_evaluate";
          _os_log_impl(&dword_1830D4000, v23, v24, "%{public}s nw_path_create failed", v76, 0xCu);
        }
LABEL_73:

        goto LABEL_74;
      }
      if (!(_BYTE)v67)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v23 = (id)gLogObj;
        os_log_type_t v41 = buf[0];
        if (os_log_type_enabled(v23, (os_log_type_t)buf[0]))
        {
          *(_DWORD *)os_log_type_t v76 = 136446210;
          BOOL v77 = "nw_path_evaluator_evaluate";
          _os_log_impl(&dword_1830D4000, v23, v41, "%{public}s nw_path_create failed, backtrace limit exceeded", v76, 0xCu);
        }
        goto LABEL_73;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v23 = (id)gLogObj;
      os_log_type_t v32 = buf[0];
      BOOL v33 = os_log_type_enabled(v23, (os_log_type_t)buf[0]);
      if (!backtrace_string)
      {
        if (v33)
        {
          *(_DWORD *)os_log_type_t v76 = 136446210;
          BOOL v77 = "nw_path_evaluator_evaluate";
          _os_log_impl(&dword_1830D4000, v23, v32, "%{public}s nw_path_create failed, no backtrace", v76, 0xCu);
        }
        goto LABEL_73;
      }
      if (v33)
      {
        *(_DWORD *)os_log_type_t v76 = 136446466;
        BOOL v77 = "nw_path_evaluator_evaluate";
        __int16 v78 = 2082;
        id v79 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v23, v32, "%{public}s nw_path_create failed, dumping backtrace:%{public}s", v76, 0x16u);
      }

LABEL_40:
      free(backtrace_string);
      if (!v12) {
        goto LABEL_85;
      }
      goto LABEL_84;
    }
    uint64_t v67 = 0;
    unsigned int v11 = *((unsigned __int8 *)v3 + 107);
    BYTE2(v64) = (v11 & 8) != 0;
    BYTE1(v64) = (v11 & 4) != 0;
    LOBYTE(v64) = *((unsigned char *)v3 + 106);
    os_log_type_t v12 = (char *)nw_path_create_necp_parameters(&v67, *((void *)v3 + 2), *((void *)v3 + 3), *((void *)v3 + 4), *((void *)v3 + 5), *((void *)v3 + 1), (v11 >> 1) & 1, *((unsigned __int16 *)v3 + 52), v64);
    if (!v12)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v19 = (id)gLogObj;
      *(_DWORD *)os_log_type_t v76 = 136446210;
      BOOL v77 = "nw_path_evaluator_evaluate";
      os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

      buf[0] = 16;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      if (!__nwlog_fault(v12, buf, &type)) {
        goto LABEL_74;
      }
      if (buf[0] == 17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v20 = (id)gLogObj;
        os_log_type_t v21 = buf[0];
        if (os_log_type_enabled(v20, (os_log_type_t)buf[0]))
        {
          *(_DWORD *)os_log_type_t v76 = 136446210;
          BOOL v77 = "nw_path_evaluator_evaluate";
          _os_log_impl(&dword_1830D4000, v20, v21, "%{public}s nw_path_create_necp_parameters failed", v76, 0xCu);
        }
      }
      else if (type)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v20 = (id)gLogObj;
        os_log_type_t v30 = buf[0];
        BOOL v31 = os_log_type_enabled(v20, (os_log_type_t)buf[0]);
        if (backtrace_string)
        {
          if (v31)
          {
            *(_DWORD *)os_log_type_t v76 = 136446466;
            BOOL v77 = "nw_path_evaluator_evaluate";
            __int16 v78 = 2082;
            id v79 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v20, v30, "%{public}s nw_path_create_necp_parameters failed, dumping backtrace:%{public}s", v76, 0x16u);
          }

          goto LABEL_40;
        }
        if (v31)
        {
          *(_DWORD *)os_log_type_t v76 = 136446210;
          BOOL v77 = "nw_path_evaluator_evaluate";
          _os_log_impl(&dword_1830D4000, v20, v30, "%{public}s nw_path_create_necp_parameters failed, no backtrace", v76, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v20 = (id)gLogObj;
        os_log_type_t v40 = buf[0];
        if (os_log_type_enabled(v20, (os_log_type_t)buf[0]))
        {
          *(_DWORD *)os_log_type_t v76 = 136446210;
          BOOL v77 = "nw_path_evaluator_evaluate";
          _os_log_impl(&dword_1830D4000, v20, v40, "%{public}s nw_path_create_necp_parameters failed, backtrace limit exceeded", v76, 0xCu);
        }
      }

      goto LABEL_74;
    }
    char v13 = nw_path_create(*((void **)v3 + 2), *((void **)v3 + 1));
    os_log_type_t v14 = (void *)*((void *)v3 + 6);
    *((void *)v3 + 6) = v13;

    uint64_t v15 = *((void *)v3 + 6);
    if (v15)
    {
      objc_storeStrong((id *)(v15 + 32), *((id *)v3 + 3));
      os_log_type_t v16 = (char *)v3 + 48;
      objc_storeStrong((id *)(*((void *)v3 + 6) + 40), *((id *)v3 + 4));
      objc_storeStrong((id *)(*((void *)v3 + 6) + 48), *((id *)v3 + 5));
      *(unsigned char *)(*(void *)v16 + 475) = *(unsigned char *)(*(void *)v16 + 475) & 0xFE | ((*((unsigned char *)v3 + 107) & 2) != 0);
      *(_WORD *)(*(void *)v16 + 384) = *((_WORD *)v3 + 52);
      *(unsigned char *)(*(void *)v16 + 386) = *((unsigned char *)v3 + 106);
      *(unsigned char *)(*(void *)v16 + 475) = *(unsigned char *)(*(void *)v16 + 475) & 0xFD | (*((unsigned char *)v3 + 107) >> 1) & 2;
      if (nw_path_shared_necp_fd(v6) == -1)
      {
LABEL_66:
        free(v12);
        goto LABEL_67;
      }
      bzero(v76, 0x600uLL);
      if (uuid_is_null((const unsigned __int8 *)v3 + 80) && necp_client_action())
      {
        int v17 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v18 = (id)gLogObj;
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)tcp_info buf = 136446466;
          BOOL v69 = "nw_path_evaluator_evaluate";
          __int16 v70 = 1024;
          *(_DWORD *)uint64_t v71 = v17;
          _os_log_impl(&dword_1830D4000, v18, OS_LOG_TYPE_ERROR, "%{public}s NECP_CLIENT_ACTION_ADD error %{darwin.errno}d", buf, 0x12u);
        }

LABEL_13:
        if (a2) {
          *a2 = v17;
        }
        goto LABEL_84;
      }
      if (uuid_is_null((const unsigned __int8 *)v3 + 80))
      {
        BOOL v34 = 0;
        int v35 = 0;
LABEL_58:
        if (uuid_is_null((const unsigned __int8 *)v3 + 80) || !v35 || !v34)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v42 = (id)gLogObj;
          if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
          {
            os_log_type_t v43 = "failed to parse";
            *(_DWORD *)tcp_info buf = 136447234;
            BOOL v69 = "nw_path_evaluator_evaluate";
            __int16 v70 = 2082;
            if (v34) {
              os_log_type_t v43 = "parsed";
            }
            *(void *)uint64_t v71 = v43;
            *(_WORD *)&v71[8] = 1024;
            *(_DWORD *)&v71[10] = v35;
            __int16 v72 = 1042;
            int v73 = 16;
            __int16 v74 = 2098;
            int v75 = (char *)v3 + 80;
            _os_log_impl(&dword_1830D4000, v42, OS_LOG_TYPE_ERROR, "%{public}s NECP_CLIENT_ACTION_COPY_RESULT %{public}s %d bytes for id %{public,uuid_t}.16P", buf, 0x2Cu);
          }
        }
        goto LABEL_66;
      }
      *(_OWORD *)(*((void *)v3 + 6) + 120) = *((_OWORD *)v3 + 5);
      int v35 = necp_client_action();
      if (v35 > 0)
      {
        BOOL v34 = nw_path_parse_necp_result(*((void **)v3 + 6), (uint64_t)v76, v35);
        goto LABEL_58;
      }
      int v17 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
      uint64_t v48 = __nwlog_obj();
      *(_DWORD *)tcp_info buf = 136446466;
      BOOL v69 = "nw_path_evaluator_evaluate";
      __int16 v70 = 1024;
      *(_DWORD *)uint64_t v71 = v17;
      os_log_type_t v49 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v65 = 0;
      if (__nwlog_fault(v49, &type, &v65))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          nw_endpoint_t v50 = __nwlog_obj();
          os_log_type_t v51 = type;
          if (os_log_type_enabled(v50, type))
          {
            *(_DWORD *)tcp_info buf = 136446466;
            BOOL v69 = "nw_path_evaluator_evaluate";
            __int16 v70 = 1024;
            *(_DWORD *)uint64_t v71 = v17;
            _os_log_impl(&dword_1830D4000, v50, v51, "%{public}s NECP_CLIENT_ACTION_COPY_RESULT %{darwin.errno}d", buf, 0x12u);
          }
        }
        else if (v65)
        {
          uint64_t v52 = (char *)__nw_create_backtrace_string();
          nw_endpoint_t v50 = __nwlog_obj();
          os_log_type_t v53 = type;
          BOOL v54 = os_log_type_enabled(v50, type);
          if (v52)
          {
            if (v54)
            {
              *(_DWORD *)tcp_info buf = 136446722;
              BOOL v69 = "nw_path_evaluator_evaluate";
              __int16 v70 = 1024;
              *(_DWORD *)uint64_t v71 = v17;
              *(_WORD *)&v71[4] = 2082;
              *(void *)&v71[6] = v52;
              _os_log_impl(&dword_1830D4000, v50, v53, "%{public}s NECP_CLIENT_ACTION_COPY_RESULT %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x1Cu);
            }

            free(v52);
            goto LABEL_104;
          }
          if (v54)
          {
            *(_DWORD *)tcp_info buf = 136446466;
            BOOL v69 = "nw_path_evaluator_evaluate";
            __int16 v70 = 1024;
            *(_DWORD *)uint64_t v71 = v17;
            _os_log_impl(&dword_1830D4000, v50, v53, "%{public}s NECP_CLIENT_ACTION_COPY_RESULT %{darwin.errno}d, no backtrace", buf, 0x12u);
          }
        }
        else
        {
          nw_endpoint_t v50 = __nwlog_obj();
          os_log_type_t v55 = type;
          if (os_log_type_enabled(v50, type))
          {
            *(_DWORD *)tcp_info buf = 136446466;
            BOOL v69 = "nw_path_evaluator_evaluate";
            __int16 v70 = 1024;
            *(_DWORD *)uint64_t v71 = v17;
            _os_log_impl(&dword_1830D4000, v50, v55, "%{public}s NECP_CLIENT_ACTION_COPY_RESULT %{darwin.errno}d, backtrace limit exceeded", buf, 0x12u);
          }
        }
      }
LABEL_104:
      if (v49) {
        free(v49);
      }
      goto LABEL_13;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v25 = (id)gLogObj;
    *(_DWORD *)os_log_type_t v76 = 136446210;
    BOOL v77 = "nw_path_evaluator_evaluate";
    id v26 = (char *)_os_log_send_and_compose_impl();

    buf[0] = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v26, buf, &type))
    {
      if (buf[0] == 17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v27 = (id)gLogObj;
        os_log_type_t v28 = buf[0];
        if (os_log_type_enabled(v27, (os_log_type_t)buf[0]))
        {
          *(_DWORD *)os_log_type_t v76 = 136446210;
          BOOL v77 = "nw_path_evaluator_evaluate";
          _os_log_impl(&dword_1830D4000, v27, v28, "%{public}s nw_path_create failed", v76, 0xCu);
        }
      }
      else if (type)
      {
        uint64_t v36 = __nw_create_backtrace_string();
        if (v36)
        {
          os_log_type_t v37 = (char *)v36;
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          BOOL v38 = (id)gLogObj;
          os_log_type_t v39 = buf[0];
          if (os_log_type_enabled(v38, (os_log_type_t)buf[0]))
          {
            *(_DWORD *)os_log_type_t v76 = 136446466;
            BOOL v77 = "nw_path_evaluator_evaluate";
            __int16 v78 = 2082;
            id v79 = v37;
            _os_log_impl(&dword_1830D4000, v38, v39, "%{public}s nw_path_create failed, dumping backtrace:%{public}s", v76, 0x16u);
          }

          free(v37);
          if (!v26) {
            goto LABEL_84;
          }
          goto LABEL_83;
        }
        int v27 = __nwlog_obj();
        os_log_type_t v46 = buf[0];
        if (os_log_type_enabled(v27, (os_log_type_t)buf[0]))
        {
          *(_DWORD *)os_log_type_t v76 = 136446210;
          BOOL v77 = "nw_path_evaluator_evaluate";
          _os_log_impl(&dword_1830D4000, v27, v46, "%{public}s nw_path_create failed, no backtrace", v76, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v27 = (id)gLogObj;
        os_log_type_t v45 = buf[0];
        if (os_log_type_enabled(v27, (os_log_type_t)buf[0]))
        {
          *(_DWORD *)os_log_type_t v76 = 136446210;
          BOOL v77 = "nw_path_evaluator_evaluate";
          _os_log_impl(&dword_1830D4000, v27, v45, "%{public}s nw_path_create failed, backtrace limit exceeded", v76, 0xCu);
        }
      }
    }
    if (!v26)
    {
LABEL_84:
      free(v12);
LABEL_85:
      uint64_t v44 = 0;
      goto LABEL_86;
    }
LABEL_83:
    free(v26);
    goto LABEL_84;
  }
  nw_endpoint_type_t v56 = __nwlog_obj();
  *(_DWORD *)os_log_type_t v76 = 136446210;
  BOOL v77 = "nw_path_evaluator_evaluate";
  os_log_type_t v57 = (char *)_os_log_send_and_compose_impl();

  buf[0] = 16;
  LOBYTE(v67) = 0;
  if (__nwlog_fault(v57, buf, &v67))
  {
    if (buf[0] == 17)
    {
      __int16 v58 = __nwlog_obj();
      os_log_type_t v59 = buf[0];
      if (os_log_type_enabled(v58, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)os_log_type_t v76 = 136446210;
        BOOL v77 = "nw_path_evaluator_evaluate";
        _os_log_impl(&dword_1830D4000, v58, v59, "%{public}s called with null evaluator->parameters", v76, 0xCu);
      }
    }
    else if ((_BYTE)v67)
    {
      os_log_type_t v60 = (char *)__nw_create_backtrace_string();
      __int16 v58 = __nwlog_obj();
      os_log_type_t v61 = buf[0];
      BOOL v62 = os_log_type_enabled(v58, (os_log_type_t)buf[0]);
      if (v60)
      {
        if (v62)
        {
          *(_DWORD *)os_log_type_t v76 = 136446466;
          BOOL v77 = "nw_path_evaluator_evaluate";
          __int16 v78 = 2082;
          id v79 = v60;
          _os_log_impl(&dword_1830D4000, v58, v61, "%{public}s called with null evaluator->parameters, dumping backtrace:%{public}s", v76, 0x16u);
        }

        free(v60);
        goto LABEL_122;
      }
      if (v62)
      {
        *(_DWORD *)os_log_type_t v76 = 136446210;
        BOOL v77 = "nw_path_evaluator_evaluate";
        _os_log_impl(&dword_1830D4000, v58, v61, "%{public}s called with null evaluator->parameters, no backtrace", v76, 0xCu);
      }
    }
    else
    {
      __int16 v58 = __nwlog_obj();
      os_log_type_t v63 = buf[0];
      if (os_log_type_enabled(v58, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)os_log_type_t v76 = 136446210;
        BOOL v77 = "nw_path_evaluator_evaluate";
        _os_log_impl(&dword_1830D4000, v58, v63, "%{public}s called with null evaluator->parameters, backtrace limit exceeded", v76, 0xCu);
      }
    }
  }
LABEL_122:
  if (v57) {
    free(v57);
  }
  uint64_t v44 = 0;
LABEL_87:

  return v44;
}

void sub_1832BC9A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_path_parse_necp_result(void *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v162 = *MEMORY[0x1E4F143B8];
  __int16 v156 = a1;
  if (!v156)
  {
    BOOL v119 = __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_path_parse_necp_result";
    uint64_t v120 = (const char *)_os_log_send_and_compose_impl();

    LOBYTE(v158) = 16;
    char v157 = 0;
    if (!__nwlog_fault(v120, &v158, &v157)) {
      goto LABEL_362;
    }
    if (v158 == 17)
    {
      nw_endpoint_t v121 = __nwlog_obj();
      os_log_type_t v122 = v158;
      if (os_log_type_enabled(v121, (os_log_type_t)v158))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_path_parse_necp_result";
        _os_log_impl(&dword_1830D4000, v121, v122, "%{public}s called with null path", buf, 0xCu);
      }
    }
    else if (v157)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      nw_endpoint_t v121 = __nwlog_obj();
      os_log_type_t v128 = v158;
      BOOL v129 = os_log_type_enabled(v121, (os_log_type_t)v158);
      if (backtrace_string)
      {
        if (v129)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_path_parse_necp_result";
          __int16 v160 = 2082;
          *(void *)__int16 v161 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v121, v128, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_362:
        if (!v120) {
          goto LABEL_271;
        }
        goto LABEL_363;
      }
      if (v129)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_path_parse_necp_result";
        _os_log_impl(&dword_1830D4000, v121, v128, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      nw_endpoint_t v121 = __nwlog_obj();
      os_log_type_t v145 = v158;
      if (os_log_type_enabled(v121, (os_log_type_t)v158))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_path_parse_necp_result";
        _os_log_impl(&dword_1830D4000, v121, v145, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_361:

    goto LABEL_362;
  }
  if (!a2)
  {
    BOOL v123 = __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_path_parse_necp_result";
    uint64_t v120 = (const char *)_os_log_send_and_compose_impl();

    LOBYTE(v158) = 16;
    char v157 = 0;
    if (!__nwlog_fault(v120, &v158, &v157)) {
      goto LABEL_362;
    }
    if (v158 == 17)
    {
      nw_endpoint_t v121 = __nwlog_obj();
      os_log_type_t v124 = v158;
      if (os_log_type_enabled(v121, (os_log_type_t)v158))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_path_parse_necp_result";
        _os_log_impl(&dword_1830D4000, v121, v124, "%{public}s called with null result", buf, 0xCu);
      }
      goto LABEL_361;
    }
    if (!v157)
    {
      nw_endpoint_t v121 = __nwlog_obj();
      os_log_type_t v146 = v158;
      if (os_log_type_enabled(v121, (os_log_type_t)v158))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_path_parse_necp_result";
        _os_log_impl(&dword_1830D4000, v121, v146, "%{public}s called with null result, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_361;
    }
    unint64_t v130 = (char *)__nw_create_backtrace_string();
    nw_endpoint_t v121 = __nwlog_obj();
    os_log_type_t v131 = v158;
    BOOL v132 = os_log_type_enabled(v121, (os_log_type_t)v158);
    if (!v130)
    {
      if (v132)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_path_parse_necp_result";
        _os_log_impl(&dword_1830D4000, v121, v131, "%{public}s called with null result, no backtrace", buf, 0xCu);
      }
      goto LABEL_361;
    }
    if (v132)
    {
      *(_DWORD *)tcp_info buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_path_parse_necp_result";
      __int16 v160 = 2082;
      *(void *)__int16 v161 = v130;
      _os_log_impl(&dword_1830D4000, v121, v131, "%{public}s called with null result, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_332;
  }
  if (!a3)
  {
    unsigned int v125 = __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_path_parse_necp_result";
    uint64_t v120 = (const char *)_os_log_send_and_compose_impl();

    LOBYTE(v158) = 16;
    char v157 = 0;
    if (!__nwlog_fault(v120, &v158, &v157)) {
      goto LABEL_362;
    }
    if (v158 == 17)
    {
      nw_endpoint_t v121 = __nwlog_obj();
      os_log_type_t v126 = v158;
      if (os_log_type_enabled(v121, (os_log_type_t)v158))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_path_parse_necp_result";
        _os_log_impl(&dword_1830D4000, v121, v126, "%{public}s called with null result_length", buf, 0xCu);
      }
      goto LABEL_361;
    }
    if (!v157)
    {
      nw_endpoint_t v121 = __nwlog_obj();
      os_log_type_t v147 = v158;
      if (os_log_type_enabled(v121, (os_log_type_t)v158))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_path_parse_necp_result";
        _os_log_impl(&dword_1830D4000, v121, v147, "%{public}s called with null result_length, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_361;
    }
    unint64_t v130 = (char *)__nw_create_backtrace_string();
    nw_endpoint_t v121 = __nwlog_obj();
    os_log_type_t v135 = v158;
    BOOL v136 = os_log_type_enabled(v121, (os_log_type_t)v158);
    if (!v130)
    {
      if (v136)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_path_parse_necp_result";
        _os_log_impl(&dword_1830D4000, v121, v135, "%{public}s called with null result_length, no backtrace", buf, 0xCu);
      }
      goto LABEL_361;
    }
    if (v136)
    {
      *(_DWORD *)tcp_info buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_path_parse_necp_result";
      __int16 v160 = 2082;
      *(void *)__int16 v161 = v130;
      _os_log_impl(&dword_1830D4000, v121, v135, "%{public}s called with null result_length, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_332:

    free(v130);
    if (!v120) {
      goto LABEL_271;
    }
LABEL_363:
    id v107 = (char *)v120;
    goto LABEL_270;
  }
  if (a3 <= 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v5 = (id)gLogObj;
    *(_DWORD *)tcp_info buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_path_parse_necp_result";
    __int16 v160 = 2048;
    *(void *)__int16 v161 = a3;
    id v6 = (const char *)_os_log_send_and_compose_impl();

    LOBYTE(v158) = 16;
    char v157 = 0;
    if (__nwlog_fault(v6, &v158, &v157))
    {
      if (v158 == 17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v7 = (id)gLogObj;
        os_log_type_t v8 = v158;
        if (os_log_type_enabled(v7, (os_log_type_t)v158))
        {
          *(_DWORD *)tcp_info buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_path_parse_necp_result";
          __int16 v160 = 2048;
          *(void *)__int16 v161 = a3;
          _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s NECP buffer too short %zu", buf, 0x16u);
        }
      }
      else if (v157)
      {
        os_log_type_t v16 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v7 = (id)gLogObj;
        os_log_type_t v17 = v158;
        BOOL v18 = os_log_type_enabled(v7, (os_log_type_t)v158);
        if (v16)
        {
          if (v18)
          {
            *(_DWORD *)tcp_info buf = 136446722;
            *(void *)&uint8_t buf[4] = "nw_path_parse_necp_result";
            __int16 v160 = 2048;
            *(void *)__int16 v161 = a3;
            *(_WORD *)&v161[8] = 2082;
            *(void *)&v161[10] = v16;
            _os_log_impl(&dword_1830D4000, v7, v17, "%{public}s NECP buffer too short %zu, dumping backtrace:%{public}s", buf, 0x20u);
          }

          free(v16);
          if (!v6) {
            goto LABEL_271;
          }
LABEL_269:
          id v107 = (char *)v6;
LABEL_270:
          free(v107);
          goto LABEL_271;
        }
        if (v18)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_path_parse_necp_result";
          __int16 v160 = 2048;
          *(void *)__int16 v161 = a3;
          _os_log_impl(&dword_1830D4000, v7, v17, "%{public}s NECP buffer too short %zu, no backtrace", buf, 0x16u);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v7 = (id)gLogObj;
        os_log_type_t v102 = v158;
        if (os_log_type_enabled(v7, (os_log_type_t)v158))
        {
          *(_DWORD *)tcp_info buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_path_parse_necp_result";
          __int16 v160 = 2048;
          *(void *)__int16 v161 = a3;
          _os_log_impl(&dword_1830D4000, v7, v102, "%{public}s NECP buffer too short %zu, backtrace limit exceeded", buf, 0x16u);
        }
      }
    }
    if (!v6)
    {
LABEL_271:
      uint64_t v108 = 0;
      goto LABEL_300;
    }
    goto LABEL_269;
  }
  os_log_type_t v14 = (necp_client_result_netagent *)malloc_type_malloc(0xA0uLL, 0xF2B69DE5uLL);
  if (!v14)
  {
    id v133 = __nwlog_obj();
    os_log_type_enabled(v133, OS_LOG_TYPE_ERROR);
    *(_DWORD *)tcp_info buf = 136446466;
    *(void *)&uint8_t buf[4] = "strict_malloc";
    __int16 v160 = 2048;
    *(void *)__int16 v161 = 160;
    __int16 v149 = buf;
    v134 = (void *)_os_log_send_and_compose_impl();

    BOOL result = __nwlog_abort((uint64_t)v134);
    if (result)
    {
LABEL_372:
      __break(1u);
      return result;
    }
    free(v134);
  }
  if (a3 == 5)
  {
    __ptr = 0;
    uint64_t v154 = 0;
    nw_endpoint_t v155 = 0;
    unint64_t v15 = 0;
    goto LABEL_280;
  }
  unint64_t v15 = 0;
  uint64_t v154 = 0;
  nw_endpoint_t v155 = 0;
  __ptr = 0;
  uuid_t uu = v156->client_id;
  unsigned int v150 = 0;
  unsigned int v151 = 8;
  while (1)
  {
    int v19 = *(unsigned __int8 *)(a2 + v15);
    unint64_t v20 = *(unsigned int *)(a2 + 1 + v15);
    if (!v20) {
      goto LABEL_40;
    }
    if (v20 > 0xFFFFFFF9 || (a3 >= v20 + 5 ? (BOOL v21 = a3 - (v20 + 5) >= v15) : (BOOL v21 = 0), !v21))
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v22 = (id)gLogObj;
      *(_DWORD *)tcp_info buf = 136446978;
      *(void *)&uint8_t buf[4] = "nw_necp_buffer_get_tlv_value";
      __int16 v160 = 2048;
      *(void *)__int16 v161 = v15;
      *(_WORD *)&v161[8] = 2048;
      *(void *)&v161[10] = a3;
      *(_WORD *)&v161[18] = 1024;
      *(_DWORD *)&v161[20] = v20;
      __int16 v149 = buf;
      os_log_type_t v23 = (char *)_os_log_send_and_compose_impl();

      LOBYTE(v158) = 16;
      char v157 = 0;
      if (__nwlog_fault(v23, &v158, &v157))
      {
        os_log_type_t v24 = v14;
        if (v158 == 17)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          id v25 = (id)gLogObj;
          os_log_type_t v26 = v158;
          if (os_log_type_enabled(v25, (os_log_type_t)v158))
          {
            *(_DWORD *)tcp_info buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_necp_buffer_get_tlv_value";
            __int16 v160 = 2048;
            *(void *)__int16 v161 = v15;
            *(_WORD *)&v161[8] = 2048;
            *(void *)&v161[10] = a3;
            *(_WORD *)&v161[18] = 1024;
            *(_DWORD *)&v161[20] = v20;
            _os_log_impl(&dword_1830D4000, v25, v26, "%{public}s buffer too short tlv_offset=%zu buffer_length=%zu value_length=%u", buf, 0x26u);
          }
LABEL_32:

          goto LABEL_57;
        }
        if (!v157)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          id v25 = (id)gLogObj;
          os_log_type_t v33 = v158;
          if (os_log_type_enabled(v25, (os_log_type_t)v158))
          {
            *(_DWORD *)tcp_info buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_necp_buffer_get_tlv_value";
            __int16 v160 = 2048;
            *(void *)__int16 v161 = v15;
            *(_WORD *)&v161[8] = 2048;
            *(void *)&v161[10] = a3;
            *(_WORD *)&v161[18] = 1024;
            *(_DWORD *)&v161[20] = v20;
            _os_log_impl(&dword_1830D4000, v25, v33, "%{public}s buffer too short tlv_offset=%zu buffer_length=%zu value_length=%u, backtrace limit exceeded", buf, 0x26u);
          }
          goto LABEL_32;
        }
        int v27 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v28 = (id)gLogObj;
        os_log_type_t v29 = v158;
        BOOL v30 = os_log_type_enabled(v28, (os_log_type_t)v158);
        if (!v27)
        {
          if (v30)
          {
            *(_DWORD *)tcp_info buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_necp_buffer_get_tlv_value";
            __int16 v160 = 2048;
            *(void *)__int16 v161 = v15;
            *(_WORD *)&v161[8] = 2048;
            *(void *)&v161[10] = a3;
            *(_WORD *)&v161[18] = 1024;
            *(_DWORD *)&v161[20] = v20;
            _os_log_impl(&dword_1830D4000, v28, v29, "%{public}s buffer too short tlv_offset=%zu buffer_length=%zu value_length=%u, no backtrace", buf, 0x26u);
          }

LABEL_57:
          os_log_type_t v14 = v24;
          if (!v23) {
            goto LABEL_40;
          }
          goto LABEL_39;
        }
        if (v30)
        {
          *(_DWORD *)tcp_info buf = 136447234;
          *(void *)&uint8_t buf[4] = "nw_necp_buffer_get_tlv_value";
          __int16 v160 = 2048;
          *(void *)__int16 v161 = v15;
          *(_WORD *)&v161[8] = 2048;
          *(void *)&v161[10] = a3;
          *(_WORD *)&v161[18] = 1024;
          *(_DWORD *)&v161[20] = v20;
          *(_WORD *)&v161[24] = 2082;
          *(void *)&v161[26] = v27;
          _os_log_impl(&dword_1830D4000, v28, v29, "%{public}s buffer too short tlv_offset=%zu buffer_length=%zu value_length=%u, dumping backtrace:%{public}s", buf, 0x30u);
        }

        os_log_type_t v14 = v24;
        free(v27);
      }
      if (!v23)
      {
LABEL_40:
        unint64_t v31 = 0;
        goto LABEL_41;
      }
LABEL_39:
      free(v23);
      goto LABEL_40;
    }
    unint64_t v31 = a2 + 5 + v15;
LABEL_41:
    v15 += v20 + 5;
    if (v15 > a3) {
      break;
    }
    if (v20) {
      BOOL v32 = v31 == 0;
    }
    else {
      BOOL v32 = 1;
    }
    if (!v32)
    {
      switch(v19)
      {
        case 1:
          long long v158 = 0uLL;
          if (v20 == 16) {
            goto LABEL_48;
          }
          if (v20 < 0x11) {
            break;
          }
          BOOL v69 = __nwlog_obj();
          if (os_log_type_enabled(v69, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)tcp_info buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_path_verify_tlv_length";
            __int16 v160 = 1024;
            *(_DWORD *)__int16 v161 = 1;
            *(_WORD *)&v161[4] = 1024;
            *(_DWORD *)&v161[6] = v20;
            *(_WORD *)&v161[10] = 1024;
            *(_DWORD *)&v161[12] = 16;
            _os_log_impl(&dword_1830D4000, v69, OS_LOG_TYPE_DEBUG, "%{public}s Permitting TLV of type %u with larger length %u, should be %u", buf, 0x1Eu);
          }

LABEL_48:
          long long v158 = *(_OWORD *)v31;
          if (uuid_is_null(uu))
          {
            *(_OWORD *)uuid_t uu = v158;
          }
          else if (*(_OWORD *)v156->client_id != v158)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            flow_result_from_tlv = (id)gLogObj;
            if (os_log_type_enabled(flow_result_from_tlv, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)tcp_info buf = 136447234;
              *(void *)&uint8_t buf[4] = "nw_path_parse_necp_result";
              __int16 v160 = 1042;
              *(_DWORD *)__int16 v161 = 16;
              *(_WORD *)&v161[4] = 2098;
              *(void *)&v161[6] = &v158;
              *(_WORD *)&v161[14] = 1042;
              *(_DWORD *)&v161[16] = 16;
              *(_WORD *)&v161[20] = 2098;
              *(void *)&v161[22] = v156->client_id;
              _os_log_impl(&dword_1830D4000, flow_result_from_tlv, OS_LOG_TYPE_INFO, "%{public}s Client ID from NECP (%{public,uuid_t}.16P) does not match path (%{public,uuid_t}.16P)", buf, 0x2Cu);
            }
LABEL_20:
          }
          break;
        case 2:
          os_log_type_t v53 = v156;
          v156->policy_result.routing_BOOL result = 0;
          if (v20 == 4) {
            goto LABEL_93;
          }
          if (v20 >= 5)
          {
            id v79 = __nwlog_obj();
            if (os_log_type_enabled(v79, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)tcp_info buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_path_verify_tlv_length";
              __int16 v160 = 1024;
              *(_DWORD *)__int16 v161 = 2;
              *(_WORD *)&v161[4] = 1024;
              *(_DWORD *)&v161[6] = v20;
              *(_WORD *)&v161[10] = 1024;
              *(_DWORD *)&v161[12] = 4;
              _os_log_impl(&dword_1830D4000, v79, OS_LOG_TYPE_DEBUG, "%{public}s Permitting TLV of type %u with larger length %u, should be %u", buf, 0x1Eu);
            }

            os_log_type_t v53 = v156;
LABEL_93:
            v53->policy_result.routing_BOOL result = *(_DWORD *)v31;
          }
          break;
        case 3:
          id v47 = v156;
          v156->policy_result.routing_result_parameter.tunnel_interface_index = 0;
          if (v20 == 4) {
            goto LABEL_81;
          }
          if (v20 >= 5)
          {
            int v75 = __nwlog_obj();
            if (os_log_type_enabled(v75, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)tcp_info buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_path_verify_tlv_length";
              __int16 v160 = 1024;
              *(_DWORD *)__int16 v161 = 3;
              *(_WORD *)&v161[4] = 1024;
              *(_DWORD *)&v161[6] = v20;
              *(_WORD *)&v161[10] = 1024;
              *(_DWORD *)&v161[12] = 4;
              _os_log_impl(&dword_1830D4000, v75, OS_LOG_TYPE_DEBUG, "%{public}s Permitting TLV of type %u with larger length %u, should be %u", buf, 0x1Eu);
            }

            id v47 = v156;
LABEL_81:
            v47->policy_result.routing_result_parameter.tunnel_interface_index = *(_DWORD *)v31;
          }
          break;
        case 4:
          os_log_type_t v59 = v156;
          v156->policy_result.filter_control_unit = 0;
          if (v20 == 4) {
            goto LABEL_119;
          }
          if (v20 >= 5)
          {
            char v83 = __nwlog_obj();
            if (os_log_type_enabled(v83, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)tcp_info buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_path_verify_tlv_length";
              __int16 v160 = 1024;
              *(_DWORD *)__int16 v161 = 4;
              *(_WORD *)&v161[4] = 1024;
              *(_DWORD *)&v161[6] = v20;
              *(_WORD *)&v161[10] = 1024;
              *(_DWORD *)&v161[12] = 4;
              _os_log_impl(&dword_1830D4000, v83, OS_LOG_TYPE_DEBUG, "%{public}s Permitting TLV of type %u with larger length %u, should be %u", buf, 0x1Eu);
            }

            os_log_type_t v59 = v156;
LABEL_119:
            v59->policy_result.filter_control_unit = *(_DWORD *)v31;
          }
          break;
        case 5:
          if (v20 == 4) {
            goto LABEL_121;
          }
          if (v20 >= 5)
          {
            int v84 = __nwlog_obj();
            if (os_log_type_enabled(v84, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)tcp_info buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_path_verify_tlv_length";
              __int16 v160 = 1024;
              *(_DWORD *)__int16 v161 = 5;
              *(_WORD *)&v161[4] = 1024;
              *(_DWORD *)&v161[6] = v20;
              *(_WORD *)&v161[10] = 1024;
              *(_DWORD *)&v161[12] = 4;
              _os_log_impl(&dword_1830D4000, v84, OS_LOG_TYPE_DEBUG, "%{public}s Permitting TLV of type %u with larger length %u, should be %u", buf, 0x1Eu);
            }

LABEL_121:
            v156->policy_result.unsigned int routed_interface_index = *(_DWORD *)v31;
          }
          break;
        case 6:
          unsigned int v48 = v151;
          if (HIDWORD(v154) < v151) {
            goto LABEL_86;
          }
          unsigned int v49 = v151 + 8;
          if (v151 != -8) {
            goto LABEL_84;
          }
          __nwlog_obj();
          v89 = nw_endpoint_t v88 = v14;
          os_log_type_enabled(v89, OS_LOG_TYPE_ERROR);
          *(_DWORD *)tcp_info buf = 136446210;
          *(void *)&uint8_t buf[4] = "_strict_reallocf";
          __int16 v149 = buf;
          uint64_t v90 = (void *)_os_log_send_and_compose_impl();

          BOOL result = __nwlog_abort((uint64_t)v90);
          if (result) {
            goto LABEL_372;
          }
          free(v90);
          os_log_type_t v14 = v88;
LABEL_84:
          unsigned int v48 = v151 + 8;
          nw_endpoint_t v50 = (necp_client_result_netagent *)reallocf(v14, 20 * v49);
          if (v50)
          {
            os_log_type_t v14 = v50;
          }
          else
          {
            uint64_t v92 = __nwlog_obj();
            os_log_type_enabled(v92, OS_LOG_TYPE_ERROR);
            *(_DWORD *)tcp_info buf = 136446466;
            *(void *)&uint8_t buf[4] = "_strict_reallocf";
            __int16 v160 = 2048;
            *(void *)__int16 v161 = 20 * v49;
            __int16 v149 = buf;
            __int16 v93 = (void *)_os_log_send_and_compose_impl();

            BOOL result = __nwlog_abort((uint64_t)v93);
            if (result) {
              goto LABEL_372;
            }
            free(v93);
            os_log_type_t v14 = 0;
          }
LABEL_86:
          unsigned int v151 = v48;
          if (v20 == 20) {
            goto LABEL_87;
          }
          if (v20 >= 0x15)
          {
            os_log_type_t v76 = __nwlog_obj();
            if (os_log_type_enabled(v76, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)tcp_info buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_path_verify_tlv_length";
              __int16 v160 = 1024;
              *(_DWORD *)__int16 v161 = 6;
              *(_WORD *)&v161[4] = 1024;
              *(_DWORD *)&v161[6] = v20;
              *(_WORD *)&v161[10] = 1024;
              *(_DWORD *)&v161[12] = 20;
              _os_log_impl(&dword_1830D4000, v76, OS_LOG_TYPE_DEBUG, "%{public}s Permitting TLV of type %u with larger length %u, should be %u", buf, 0x1Eu);
            }

LABEL_87:
            long long v51 = *(_OWORD *)v31;
            uint64_t v52 = (char *)&v14[HIDWORD(v154)];
            *((_DWORD *)v52 + 4) = *(_DWORD *)(v31 + 16);
            *(_OWORD *)uint64_t v52 = v51;
            ++HIDWORD(v154);
          }
          break;
        case 7:
          if (v20 == 4) {
            goto LABEL_95;
          }
          if (v20 < 5) {
            break;
          }
          uint64_t v80 = __nwlog_obj();
          if (os_log_type_enabled(v80, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)tcp_info buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_path_verify_tlv_length";
            __int16 v160 = 1024;
            *(_DWORD *)__int16 v161 = 7;
            *(_WORD *)&v161[4] = 1024;
            *(_DWORD *)&v161[6] = v20;
            *(_WORD *)&v161[10] = 1024;
            *(_DWORD *)&v161[12] = 4;
            _os_log_impl(&dword_1830D4000, v80, OS_LOG_TYPE_DEBUG, "%{public}s Permitting TLV of type %u with larger length %u, should be %u", buf, 0x1Eu);
          }

LABEL_95:
          unsigned int v54 = *(_DWORD *)v31;
          if (*(_DWORD *)v31)
          {
            *((unsigned char *)v156 + 473) |= 0x10u;
            if ((v54 & 2) == 0)
            {
LABEL_97:
              if ((v54 & 4) == 0) {
                goto LABEL_98;
              }
              goto LABEL_143;
            }
          }
          else if ((v54 & 2) == 0)
          {
            goto LABEL_97;
          }
          *((unsigned char *)v156 + 473) |= 0x20u;
          if ((v54 & 4) == 0)
          {
LABEL_98:
            if ((v54 & 8) == 0) {
              goto LABEL_99;
            }
            goto LABEL_144;
          }
LABEL_143:
          *((unsigned char *)v156 + 473) |= 0x40u;
          if ((v54 & 8) == 0)
          {
LABEL_99:
            if ((v54 & 0x2000) == 0) {
              goto LABEL_100;
            }
            goto LABEL_145;
          }
LABEL_144:
          *((unsigned char *)v156 + 473) |= 0x80u;
          if ((v54 & 0x2000) == 0)
          {
LABEL_100:
            if ((v54 & 0x10000) == 0) {
              goto LABEL_101;
            }
            goto LABEL_146;
          }
LABEL_145:
          *((unsigned char *)v156 + 474) |= 1u;
          if ((v54 & 0x10000) == 0)
          {
LABEL_101:
            if ((v54 & 0x20000) == 0) {
              goto LABEL_102;
            }
            goto LABEL_147;
          }
LABEL_146:
          *((unsigned char *)v156 + 476) |= 8u;
          if ((v54 & 0x20000) == 0)
          {
LABEL_102:
            if ((v54 & 0x40000) == 0) {
              goto LABEL_103;
            }
            goto LABEL_148;
          }
LABEL_147:
          *((unsigned char *)v156 + 476) |= 0x10u;
          if ((v54 & 0x40000) == 0)
          {
LABEL_103:
            if ((v54 & 0x80000) == 0) {
              goto LABEL_104;
            }
            goto LABEL_149;
          }
LABEL_148:
          *((unsigned char *)v156 + 476) |= 0x20u;
          if ((v54 & 0x80000) == 0)
          {
LABEL_104:
            if ((v54 & 0x20) == 0) {
              goto LABEL_105;
            }
            goto LABEL_150;
          }
LABEL_149:
          *((unsigned char *)v156 + 476) |= 0x40u;
          if ((v54 & 0x20) == 0)
          {
LABEL_105:
            if ((v54 & 0x100) == 0) {
              goto LABEL_106;
            }
            goto LABEL_151;
          }
LABEL_150:
          *((unsigned char *)v156 + 474) |= 4u;
          if ((v54 & 0x100) == 0)
          {
LABEL_106:
            if ((v54 & 0x800) == 0) {
              goto LABEL_107;
            }
            goto LABEL_152;
          }
LABEL_151:
          *((unsigned char *)v156 + 474) |= 0x20u;
          if ((v54 & 0x800) == 0)
          {
LABEL_107:
            if ((v54 & 0x8000) == 0) {
              break;
            }
            goto LABEL_153;
          }
LABEL_152:
          *((unsigned char *)v156 + 474) |= 0x40u;
          if ((v54 & 0x8000) == 0) {
            break;
          }
LABEL_153:
          *((unsigned char *)v156 + 475) |= 4u;
          break;
        case 8:
          if (v20 == 8) {
            goto LABEL_110;
          }
          if (v20 >= 9)
          {
            BOOL v81 = __nwlog_obj();
            if (os_log_type_enabled(v81, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)tcp_info buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_path_verify_tlv_length";
              __int16 v160 = 1024;
              *(_DWORD *)__int16 v161 = 8;
              *(_WORD *)&v161[4] = 1024;
              *(_DWORD *)&v161[6] = v20;
              *(_WORD *)&v161[10] = 1024;
              *(_DWORD *)&v161[12] = 8;
              _os_log_impl(&dword_1830D4000, v81, OS_LOG_TYPE_DEBUG, "%{public}s Permitting TLV of type %u with larger length %u, should be %u", buf, 0x1Eu);
            }

LABEL_110:
            unsigned int v55 = *(_DWORD *)v31;
            unsigned int v56 = *(_DWORD *)(v31 + 4);
            if (v156->policy_result.direct_interface_index)
            {
              if (!v156->policy_result.delegate_interface_index)
              {
                v156->policy_result.delegate_interface_index = v56;
                v156->policy_result.delegate_interface_generation = v55;
              }
            }
            else
            {
              v156->policy_result.unsigned int direct_interface_index = v56;
              v156->policy_result.direct_interface_generation = v55;
            }
          }
          break;
        case 9:
          if (v20 == 24) {
            goto LABEL_125;
          }
          if (v20 < 0x19) {
            break;
          }
          os_log_type_t v86 = __nwlog_obj();
          if (os_log_type_enabled(v86, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)tcp_info buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_path_verify_tlv_length";
            __int16 v160 = 1024;
            *(_DWORD *)__int16 v161 = 9;
            *(_WORD *)&v161[4] = 1024;
            *(_DWORD *)&v161[6] = v20;
            *(_WORD *)&v161[10] = 1024;
            *(_DWORD *)&v161[12] = 24;
            _os_log_impl(&dword_1830D4000, v86, OS_LOG_TYPE_DEBUG, "%{public}s Permitting TLV of type %u with larger length %u, should be %u", buf, 0x1Eu);
          }

LABEL_125:
          if (v154 < v150) {
            goto LABEL_128;
          }
          unsigned int v60 = v150 + 8;
          if (v150 != -8) {
            goto LABEL_127;
          }
          id v94 = __nwlog_obj();
          os_log_type_enabled(v94, OS_LOG_TYPE_ERROR);
          *(_DWORD *)tcp_info buf = 136446210;
          *(void *)&uint8_t buf[4] = "_strict_reallocf";
          __int16 v149 = buf;
          uint64_t v95 = (void *)_os_log_send_and_compose_impl();

          BOOL result = __nwlog_abort((uint64_t)v95);
          if (result) {
            goto LABEL_372;
          }
          free(v95);
LABEL_127:
          v150 += 8;
          __ptr = (necp_client_interface_option *)reallocf(__ptr, 24 * v60);
          if (__ptr) {
            goto LABEL_128;
          }
          id v96 = __nwlog_obj();
          os_log_type_enabled(v96, OS_LOG_TYPE_ERROR);
          *(_DWORD *)tcp_info buf = 136446466;
          *(void *)&uint8_t buf[4] = "_strict_reallocf";
          __int16 v160 = 2048;
          *(void *)__int16 v161 = 24 * v60;
          __int16 v149 = buf;
          os_log_type_t v97 = (void *)_os_log_send_and_compose_impl();

          BOOL result = __nwlog_abort((uint64_t)v97);
          if (result) {
            goto LABEL_372;
          }
          free(v97);
          __ptr = 0;
LABEL_128:
          long long v61 = *(_OWORD *)v31;
          BOOL v62 = (char *)__ptr + 24 * v154;
          *((void *)v62 + 2) = *(void *)(v31 + 16);
          *(_OWORD *)BOOL v62 = v61;
          LODWORD(v154) = v154 + 1;
          break;
        case 10:
          if (v20 == 4) {
            goto LABEL_123;
          }
          if (v20 >= 5)
          {
            os_log_type_t v85 = __nwlog_obj();
            if (os_log_type_enabled(v85, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)tcp_info buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_path_verify_tlv_length";
              __int16 v160 = 1024;
              *(_DWORD *)__int16 v161 = 10;
              *(_WORD *)&v161[4] = 1024;
              *(_DWORD *)&v161[6] = v20;
              *(_WORD *)&v161[10] = 1024;
              *(_DWORD *)&v161[12] = 4;
              _os_log_impl(&dword_1830D4000, v85, OS_LOG_TYPE_DEBUG, "%{public}s Permitting TLV of type %u with larger length %u, should be %u", buf, 0x1Eu);
            }

LABEL_123:
            v156->effective_mtu = *(_DWORD *)v31;
          }
          break;
        case 11:
          flow_result_from_tlv = nw_path_create_flow_result_from_tlv(v156, (const unsigned __int8 *)v31, v20);
          if (flow_result_from_tlv)
          {
            uint64_t flows = (uint64_t)v156->flows;
            if (!flows)
            {
              BOOL v42 = nw_array_create();
              os_log_type_t v43 = v156->flows;
              v156->uint64_t flows = (OS_nw_array *)v42;

              uint64_t flows = (uint64_t)v156->flows;
            }
            nw_array_append(flows, flow_result_from_tlv);
          }
          goto LABEL_20;
        case 15:
          if (v20 != 1)
          {
            BOOL v77 = __nwlog_obj();
            if (os_log_type_enabled(v77, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)tcp_info buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_path_verify_tlv_length";
              __int16 v160 = 1024;
              *(_DWORD *)__int16 v161 = 15;
              *(_WORD *)&v161[4] = 1024;
              *(_DWORD *)&v161[6] = v20;
              *(_WORD *)&v161[10] = 1024;
              *(_DWORD *)&v161[12] = 1;
              _os_log_impl(&dword_1830D4000, v77, OS_LOG_TYPE_DEBUG, "%{public}s Permitting TLV of type %u with larger length %u, should be %u", buf, 0x1Eu);
            }
          }
          v156->recommended_mss = *(unsigned char *)v31;
          break;
        case 17:
          if (v20 == 4) {
            goto LABEL_77;
          }
          if (v20 >= 5)
          {
            int v73 = __nwlog_obj();
            if (os_log_type_enabled(v73, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)tcp_info buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_path_verify_tlv_length";
              __int16 v160 = 1024;
              *(_DWORD *)__int16 v161 = 17;
              *(_WORD *)&v161[4] = 1024;
              *(_DWORD *)&v161[6] = v20;
              *(_WORD *)&v161[10] = 1024;
              *(_DWORD *)&v161[12] = 4;
              _os_log_impl(&dword_1830D4000, v73, OS_LOG_TYPE_DEBUG, "%{public}s Permitting TLV of type %u with larger length %u, should be %u", buf, 0x1Eu);
            }

LABEL_77:
            v156->interface_time_delta = *(_DWORD *)v31;
          }
          break;
        case 18:
          if (v20 == 4) {
            goto LABEL_62;
          }
          if (v20 >= 5)
          {
            uint64_t v71 = __nwlog_obj();
            if (os_log_type_enabled(v71, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)tcp_info buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_path_verify_tlv_length";
              __int16 v160 = 1024;
              *(_DWORD *)__int16 v161 = 18;
              *(_WORD *)&v161[4] = 1024;
              *(_DWORD *)&v161[6] = v20;
              *(_WORD *)&v161[10] = 1024;
              *(_DWORD *)&v161[12] = 4;
              _os_log_impl(&dword_1830D4000, v71, OS_LOG_TYPE_DEBUG, "%{public}s Permitting TLV of type %u with larger length %u, should be %u", buf, 0x1Eu);
            }

LABEL_62:
            unsigned int v34 = *(_DWORD *)v31 - 1;
            if (v34 <= 5) {
              nw_path_set_reason(v156, dword_183E22610[v34], off_1E5246E78[v34], v9, v10, v11, v12, v13, (char)v149);
            }
          }
          break;
        case 19:
          os_log_type_t v57 = v156;
          v156->policy_result.flow_divert_aggregate_unit = 0;
          if (v20 == 4) {
            goto LABEL_114;
          }
          if (v20 >= 5)
          {
            os_log_type_t v82 = __nwlog_obj();
            if (os_log_type_enabled(v82, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)tcp_info buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_path_verify_tlv_length";
              __int16 v160 = 1024;
              *(_DWORD *)__int16 v161 = 19;
              *(_WORD *)&v161[4] = 1024;
              *(_DWORD *)&v161[6] = v20;
              *(_WORD *)&v161[10] = 1024;
              *(_DWORD *)&v161[12] = 4;
              _os_log_impl(&dword_1830D4000, v82, OS_LOG_TYPE_DEBUG, "%{public}s Permitting TLV of type %u with larger length %u, should be %u", buf, 0x1Eu);
            }

            os_log_type_t v57 = v156;
LABEL_114:
            v57->policy_result.flow_divert_aggregate_unit = *(_DWORD *)v31;
          }
          break;
        case 156:
          if (v155)
          {
            if (v20 == 16) {
              goto LABEL_117;
            }
            if (v20 >= 0x11)
            {
              __int16 v87 = __nwlog_obj();
              if (os_log_type_enabled(v87, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)tcp_info buf = 136446978;
                *(void *)&uint8_t buf[4] = "nw_path_verify_tlv_length";
                __int16 v160 = 1024;
                *(_DWORD *)__int16 v161 = 156;
                *(_WORD *)&v161[4] = 1024;
                *(_DWORD *)&v161[6] = v20;
                *(_WORD *)&v161[10] = 1024;
                *(_DWORD *)&v161[12] = 16;
                _os_log_impl(&dword_1830D4000, v87, OS_LOG_TYPE_DEBUG, "%{public}s Permitting TLV of type %u with larger length %u, should be %u", buf, 0x1Eu);
              }

LABEL_117:
              __int16 v58 = v155;
              *(_OWORD *)((char *)&v58[3].isa + 4) = *(_OWORD *)v31;
              nw_endpoint_t v155 = v58;

              break;
            }
          }
          else
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            os_log_type_t v68 = (id)gLogObj;
            if (os_log_type_enabled(v68, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)tcp_info buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_path_parse_necp_result";
              _os_log_impl(&dword_1830D4000, v68, OS_LOG_TYPE_ERROR, "%{public}s No previous endpoint to apply endpoint agent to", buf, 0xCu);
            }
LABEL_162:

            nw_endpoint_t v155 = 0;
          }
          break;
        case 158:
          if (v155)
          {
            *(void *)tcp_info buf = 0;
            asprintf((char **)buf, "%.*s", v20, (const char *)v31);
            nw_endpoint_set_device_id(v155, *(const char **)buf);
            if (*(void *)buf) {
              free(*(void **)buf);
            }
            break;
          }
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v68 = (id)gLogObj;
          if (os_log_type_enabled(v68, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)tcp_info buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_path_parse_necp_result";
            _os_log_impl(&dword_1830D4000, v68, OS_LOG_TYPE_ERROR, "%{public}s No previous endpoint to apply endpoint device id to", buf, 0xCu);
          }
          goto LABEL_162;
        case 159:
          if (v155)
          {
            os_log_type_t v63 = [MEMORY[0x1E4F1C9B8] dataWithBytes:v31 length:v20];
            nw_endpoint_append_public_key(v155, v63);

            break;
          }
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v68 = (id)gLogObj;
          if (os_log_type_enabled(v68, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)tcp_info buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_path_parse_necp_result";
            _os_log_impl(&dword_1830D4000, v68, OS_LOG_TYPE_ERROR, "%{public}s No previous endpoint to apply public key to", buf, 0xCu);
          }
          goto LABEL_162;
        case 210:
          if (v20 == 4) {
            goto LABEL_60;
          }
          if (v20 >= 5)
          {
            __int16 v70 = __nwlog_obj();
            if (os_log_type_enabled(v70, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)tcp_info buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_path_verify_tlv_length";
              __int16 v160 = 1024;
              *(_DWORD *)__int16 v161 = 210;
              *(_WORD *)&v161[4] = 1024;
              *(_DWORD *)&v161[6] = v20;
              *(_WORD *)&v161[10] = 1024;
              *(_DWORD *)&v161[12] = 4;
              _os_log_impl(&dword_1830D4000, v70, OS_LOG_TYPE_DEBUG, "%{public}s Permitting TLV of type %u with larger length %u, should be %u", buf, 0x1Eu);
            }

LABEL_60:
            v156->effective_unsigned int traffic_class = *(_DWORD *)v31;
          }
          break;
        case 211:
          if (v20 == 4) {
            goto LABEL_91;
          }
          if (v20 >= 5)
          {
            __int16 v78 = __nwlog_obj();
            if (os_log_type_enabled(v78, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)tcp_info buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_path_verify_tlv_length";
              __int16 v160 = 1024;
              *(_DWORD *)__int16 v161 = 211;
              *(_WORD *)&v161[4] = 1024;
              *(_DWORD *)&v161[6] = v20;
              *(_WORD *)&v161[10] = 1024;
              *(_DWORD *)&v161[12] = 4;
              _os_log_impl(&dword_1830D4000, v78, OS_LOG_TYPE_DEBUG, "%{public}s Permitting TLV of type %u with larger length %u, should be %u", buf, 0x1Eu);
            }

LABEL_91:
            *((unsigned char *)v156 + 474) = *((unsigned char *)v156 + 474) & 0xFD | (2 * (*(unsigned char *)v31 & 1));
          }
          break;
        case 212:
          nw_endpoint_t v64 = nw_path_copy_endpoint_from_tlv(212, v20, (void *)v31);

          uint64_t v36 = v64;
          if (v36)
          {
            uint64_t gateways = (uint64_t)v156->gateways;
            if (!gateways)
            {
              BOOL v66 = nw_array_create();
              uint64_t v67 = v156->gateways;
              v156->uint64_t gateways = (OS_nw_array *)v66;

              uint64_t gateways = (uint64_t)v156->gateways;
            }
            nw_array_append(gateways, v36);
          }
          goto LABEL_68;
        case 213:
          nw_endpoint_t v35 = nw_path_copy_endpoint_from_tlv(213, v20, (void *)v31);

          uint64_t v36 = v35;
          if (v36)
          {
            uint64_t group_members = (uint64_t)v156->group_members;
            if (!group_members)
            {
              BOOL v38 = nw_array_create();
              os_log_type_t v39 = v156->group_members;
              v156->uint64_t group_members = (OS_nw_array *)v38;

              uint64_t group_members = (uint64_t)v156->group_members;
            }
            nw_array_append(group_members, v36);
          }
LABEL_68:
          nw_endpoint_t v155 = v36;

          break;
        case 214:
          if (v20 == 80) {
            goto LABEL_79;
          }
          if (v20 >= 0x51)
          {
            __int16 v74 = __nwlog_obj();
            if (os_log_type_enabled(v74, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)tcp_info buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_path_verify_tlv_length";
              __int16 v160 = 1024;
              *(_DWORD *)__int16 v161 = 214;
              *(_WORD *)&v161[4] = 1024;
              *(_DWORD *)&v161[6] = v20;
              *(_WORD *)&v161[10] = 1024;
              *(_DWORD *)&v161[12] = 80;
              _os_log_impl(&dword_1830D4000, v74, OS_LOG_TYPE_DEBUG, "%{public}s Permitting TLV of type %u with larger length %u, should be %u", buf, 0x1Eu);
            }

LABEL_79:
            v156->nat64_prefixes[0].ipv6_prefix = *(in6_addr *)v31;
            long long v44 = *(_OWORD *)(v31 + 16);
            in6_addr v45 = *(in6_addr *)(v31 + 32);
            in6_addr v46 = *(in6_addr *)(v31 + 64);
            *(in6_addr *)((char *)&v156->nat64_prefixes[2].ipv6_prefix + 8) = *(in6_addr *)(v31 + 48);
            *(in6_addr *)((char *)&v156->nat64_prefixes[3].ipv6_prefix + 4) = v46;
            *(_OWORD *)&v156->nat64_prefixes[0].prefix_len = v44;
            *(in6_addr *)((char *)&v156->nat64_prefixes[1].ipv6_prefix + 12) = v45;
          }
          break;
        case 215:
          if (v20 == 2) {
            goto LABEL_75;
          }
          if (v20 >= 3)
          {
            __int16 v72 = __nwlog_obj();
            if (os_log_type_enabled(v72, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)tcp_info buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_path_verify_tlv_length";
              __int16 v160 = 1024;
              *(_DWORD *)__int16 v161 = 215;
              *(_WORD *)&v161[4] = 1024;
              *(_DWORD *)&v161[6] = v20;
              *(_WORD *)&v161[10] = 1024;
              *(_DWORD *)&v161[12] = 2;
              _os_log_impl(&dword_1830D4000, v72, OS_LOG_TYPE_DEBUG, "%{public}s Permitting TLV of type %u with larger length %u, should be %u", buf, 0x1Eu);
            }

LABEL_75:
            v156->estimates = *(necp_client_result_estimated_throughput *)v31;
          }
          break;
        default:
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          flow_result_from_tlv = (id)gLogObj;
          if (os_log_type_enabled(flow_result_from_tlv, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)tcp_info buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_path_parse_necp_result";
            __int16 v160 = 1024;
            *(_DWORD *)__int16 v161 = v19;
            _os_log_impl(&dword_1830D4000, flow_result_from_tlv, OS_LOG_TYPE_ERROR, "%{public}s Received unknown client result TLV (type %d)", buf, 0x12u);
          }
          goto LABEL_20;
      }
    }
    if (v15 >= a3 - 5) {
      goto LABEL_280;
    }
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v98 = (id)gLogObj;
  *(_DWORD *)tcp_info buf = 136446978;
  *(void *)&uint8_t buf[4] = "nw_path_parse_necp_result";
  __int16 v160 = 1024;
  *(_DWORD *)__int16 v161 = v20;
  *(_WORD *)&v161[4] = 2048;
  *(void *)&v161[6] = v15;
  *(_WORD *)&v161[14] = 2048;
  *(void *)&v161[16] = a3;
  os_log_type_t v99 = (char *)_os_log_send_and_compose_impl();

  LOBYTE(v158) = 16;
  char v157 = 0;
  if (!__nwlog_fault(v99, &v158, &v157)) {
    goto LABEL_278;
  }
  if (v158 == 17)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v100 = (id)gLogObj;
    os_log_type_t v101 = v158;
    if (os_log_type_enabled(v100, (os_log_type_t)v158))
    {
      *(_DWORD *)tcp_info buf = 136446978;
      *(void *)&uint8_t buf[4] = "nw_path_parse_necp_result";
      __int16 v160 = 1024;
      *(_DWORD *)__int16 v161 = v20;
      *(_WORD *)&v161[4] = 2048;
      *(void *)&v161[6] = v15;
      *(_WORD *)&v161[14] = 2048;
      *(void *)&v161[16] = a3;
      _os_log_impl(&dword_1830D4000, v100, v101, "%{public}s TLV length (%u) at offset %zu goes beyond total length (%zu)", buf, 0x26u);
    }
    goto LABEL_277;
  }
  if (!v157)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v100 = (id)gLogObj;
    os_log_type_t v109 = v158;
    if (os_log_type_enabled(v100, (os_log_type_t)v158))
    {
      *(_DWORD *)tcp_info buf = 136446978;
      *(void *)&uint8_t buf[4] = "nw_path_parse_necp_result";
      __int16 v160 = 1024;
      *(_DWORD *)__int16 v161 = v20;
      *(_WORD *)&v161[4] = 2048;
      *(void *)&v161[6] = v15;
      *(_WORD *)&v161[14] = 2048;
      *(void *)&v161[16] = a3;
      _os_log_impl(&dword_1830D4000, v100, v109, "%{public}s TLV length (%u) at offset %zu goes beyond total length (%zu), backtrace limit exceeded", buf, 0x26u);
    }
    goto LABEL_277;
  }
  nw_endpoint_t v103 = __nw_create_backtrace_string();
  if (!v103)
  {
    BOOL v100 = __nwlog_obj();
    os_log_type_t v110 = v158;
    if (os_log_type_enabled(v100, (os_log_type_t)v158))
    {
      *(_DWORD *)tcp_info buf = 136446978;
      *(void *)&uint8_t buf[4] = "nw_path_parse_necp_result";
      __int16 v160 = 1024;
      *(_DWORD *)__int16 v161 = v20;
      *(_WORD *)&v161[4] = 2048;
      *(void *)&v161[6] = v15;
      *(_WORD *)&v161[14] = 2048;
      *(void *)&v161[16] = a3;
      _os_log_impl(&dword_1830D4000, v100, v110, "%{public}s TLV length (%u) at offset %zu goes beyond total length (%zu), no backtrace", buf, 0x26u);
    }
LABEL_277:

LABEL_278:
    if (!v99) {
      goto LABEL_280;
    }
    goto LABEL_279;
  }
  BOOL v104 = (char *)v103;
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  unint64_t v105 = (id)gLogObj;
  os_log_type_t v106 = v158;
  if (os_log_type_enabled(v105, (os_log_type_t)v158))
  {
    *(_DWORD *)tcp_info buf = 136447234;
    *(void *)&uint8_t buf[4] = "nw_path_parse_necp_result";
    __int16 v160 = 1024;
    *(_DWORD *)__int16 v161 = v20;
    *(_WORD *)&v161[4] = 2048;
    *(void *)&v161[6] = v15;
    *(_WORD *)&v161[14] = 2048;
    *(void *)&v161[16] = a3;
    *(_WORD *)&v161[24] = 2082;
    *(void *)&v161[26] = v104;
    _os_log_impl(&dword_1830D4000, v105, v106, "%{public}s TLV length (%u) at offset %zu goes beyond total length (%zu), dumping backtrace:%{public}s", buf, 0x30u);
  }

  free(v104);
  if (v99) {
LABEL_279:
  }
    free(v99);
LABEL_280:
  if (v15 == a3) {
    goto LABEL_281;
  }
  os_log_type_t v137 = __nwlog_obj();
  *(_DWORD *)tcp_info buf = 136446722;
  *(void *)&uint8_t buf[4] = "nw_path_parse_necp_result";
  __int16 v160 = 2048;
  *(void *)__int16 v161 = v15;
  *(_WORD *)&v161[8] = 2048;
  *(void *)&v161[10] = a3;
  uint64_t v138 = (char *)_os_log_send_and_compose_impl();

  LOBYTE(v158) = 16;
  char v157 = 0;
  if (__nwlog_fault(v138, &v158, &v157))
  {
    if (v158 == 17)
    {
      char v139 = __nwlog_obj();
      os_log_type_t v140 = v158;
      if (os_log_type_enabled(v139, (os_log_type_t)v158))
      {
        *(_DWORD *)tcp_info buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_path_parse_necp_result";
        __int16 v160 = 2048;
        *(void *)__int16 v161 = v15;
        *(_WORD *)&v161[8] = 2048;
        *(void *)&v161[10] = a3;
        _os_log_impl(&dword_1830D4000, v139, v140, "%{public}s cursor has unexpected value %zu != %zu", buf, 0x20u);
      }
      goto LABEL_338;
    }
    if (v157)
    {
      unint64_t v141 = (char *)__nw_create_backtrace_string();
      uint64_t v142 = __nwlog_obj();
      os_log_type_t v143 = v158;
      BOOL v144 = os_log_type_enabled(v142, (os_log_type_t)v158);
      if (v141)
      {
        if (v144)
        {
          *(_DWORD *)tcp_info buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_path_parse_necp_result";
          __int16 v160 = 2048;
          *(void *)__int16 v161 = v15;
          *(_WORD *)&v161[8] = 2048;
          *(void *)&v161[10] = a3;
          *(_WORD *)&v161[18] = 2082;
          *(void *)&v161[20] = v141;
          _os_log_impl(&dword_1830D4000, v142, v143, "%{public}s cursor has unexpected value %zu != %zu, dumping backtrace:%{public}s", buf, 0x2Au);
        }

        free(v141);
      }
      else
      {
        if (v144)
        {
          *(_DWORD *)tcp_info buf = 136446722;
          *(void *)&uint8_t buf[4] = "nw_path_parse_necp_result";
          __int16 v160 = 2048;
          *(void *)__int16 v161 = v15;
          *(_WORD *)&v161[8] = 2048;
          *(void *)&v161[10] = a3;
          _os_log_impl(&dword_1830D4000, v142, v143, "%{public}s cursor has unexpected value %zu != %zu, no backtrace", buf, 0x20u);
        }
      }
    }
    else
    {
      char v139 = __nwlog_obj();
      os_log_type_t v148 = v158;
      if (os_log_type_enabled(v139, (os_log_type_t)v158))
      {
        *(_DWORD *)tcp_info buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_path_parse_necp_result";
        __int16 v160 = 2048;
        *(void *)__int16 v161 = v15;
        *(_WORD *)&v161[8] = 2048;
        *(void *)&v161[10] = a3;
        _os_log_impl(&dword_1830D4000, v139, v148, "%{public}s cursor has unexpected value %zu != %zu, backtrace limit exceeded", buf, 0x20u);
      }
LABEL_338:
    }
  }
  if (v138) {
    free(v138);
  }
LABEL_281:
  id v111 = v156;
  unsigned int routed_interface_index = v156->policy_result.routed_interface_index;
  if (routed_interface_index)
  {
    unsigned int direct_interface_index = v156->policy_result.direct_interface_index;
    if (direct_interface_index)
    {
      if (routed_interface_index != direct_interface_index)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v114 = (id)gLogObj;
        if (os_log_type_enabled(v114, OS_LOG_TYPE_ERROR))
        {
          unsigned int v115 = v156->policy_result.routed_interface_index;
          unsigned int v116 = v156->policy_result.direct_interface_index;
          *(_DWORD *)tcp_info buf = 136446722;
          *(void *)&uint8_t buf[4] = "nw_path_parse_necp_result";
          __int16 v160 = 1024;
          *(_DWORD *)__int16 v161 = v115;
          *(_WORD *)&v161[4] = 1024;
          *(_DWORD *)&v161[6] = v116;
          _os_log_impl(&dword_1830D4000, v114, OS_LOG_TYPE_ERROR, "%{public}s Mismatch in interface results from NECP (%u != %u)", buf, 0x18u);
        }

        id v111 = v156;
        v156->policy_result.unsigned int routed_interface_index = v156->policy_result.direct_interface_index;
      }
    }
  }
  netagents = v111->policy_result.netagents;
  if (netagents)
  {
    free(netagents);
    v111->policy_result.netagents = 0;
  }
  v111->policy_result.num_netagents = HIDWORD(v154);
  if (HIDWORD(v154))
  {
    v111->policy_result.netagents = v14;
  }
  else if (v14)
  {
    free(v14);
  }
  interface_options = v111->policy_result.interface_options;
  if (interface_options)
  {
    free(interface_options);
    v111->policy_result.interface_options = 0;
  }
  v111->policy_result.num_interface_options = v154;
  if (v154)
  {
    v111->policy_result.interface_options = __ptr;
  }
  else if (__ptr)
  {
    free(__ptr);
  }

  uint64_t v108 = 1;
LABEL_300:

  return v108;
}

void sub_1832BF424(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25)
{
  _Unwind_Resume(a1);
}

BOOL nw_path_create_flow_result_from_tlv(NWConcrete_nw_path *a1, const unsigned __int8 *a2, unint64_t a3)
{
  uint64_t v172 = *MEMORY[0x1E4F143B8];
  __int16 v160 = a1;
  if (a3 <= 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v4 = (id)gLogObj;
    *(_DWORD *)tcp_info buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_path_create_flow_result_from_tlv";
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&buf[14] = a3;
    id v5 = (char *)_os_log_send_and_compose_impl();

    v167[0] = 16;
    LOBYTE(v164) = 0;
    if (!__nwlog_fault(v5, v167, &v164)) {
      goto LABEL_311;
    }
    if (v167[0] == 17)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v6 = (id)gLogObj;
      os_log_type_t v7 = v167[0];
      if (os_log_type_enabled(v6, (os_log_type_t)v167[0]))
      {
        *(_DWORD *)tcp_info buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_path_create_flow_result_from_tlv";
        *(_WORD *)&unsigned char buf[12] = 2048;
        *(void *)&buf[14] = a3;
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s NECP buffer too short %zu", buf, 0x16u);
      }
    }
    else
    {
      if ((_BYTE)v164)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v12 = (id)gLogObj;
        os_log_type_t v13 = v167[0];
        BOOL v14 = os_log_type_enabled(v12, (os_log_type_t)v167[0]);
        if (backtrace_string)
        {
          if (v14)
          {
            *(_DWORD *)tcp_info buf = 136446722;
            *(void *)&uint8_t buf[4] = "nw_path_create_flow_result_from_tlv";
            *(_WORD *)&unsigned char buf[12] = 2048;
            *(void *)&buf[14] = a3;
            *(_WORD *)&unsigned char buf[22] = 2082;
            *(void *)&unsigned char buf[24] = backtrace_string;
            _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s NECP buffer too short %zu, dumping backtrace:%{public}s", buf, 0x20u);
          }

          free(backtrace_string);
          if (!v5) {
            goto LABEL_313;
          }
          goto LABEL_312;
        }
        if (v14)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_path_create_flow_result_from_tlv";
          *(_WORD *)&unsigned char buf[12] = 2048;
          *(void *)&buf[14] = a3;
          _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s NECP buffer too short %zu, no backtrace", buf, 0x16u);
        }

LABEL_311:
        if (!v5)
        {
LABEL_313:
          uint64_t v9 = 0;
LABEL_340:

          return (BOOL)v9;
        }
LABEL_312:
        free(v5);
        goto LABEL_313;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v6 = (id)gLogObj;
      os_log_type_t v15 = v167[0];
      if (os_log_type_enabled(v6, (os_log_type_t)v167[0]))
      {
        *(_DWORD *)tcp_info buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_path_create_flow_result_from_tlv";
        *(_WORD *)&unsigned char buf[12] = 2048;
        *(void *)&buf[14] = a3;
        _os_log_impl(&dword_1830D4000, v6, v15, "%{public}s NECP buffer too short %zu, backtrace limit exceeded", buf, 0x16u);
      }
    }

    goto LABEL_311;
  }
  os_log_type_t v8 = nw_path_flow_create();
  uint64_t v9 = v8;
  if (!v8)
  {
LABEL_339:

    goto LABEL_340;
  }
  __int16 v165 = 0;
  int v164 = 0;
  __int16 v163 = 0;
  int v162 = 0;
  if (a3 == 5)
  {
    uint64_t v158 = 0;
    nw_endpoint_t object = 0;
    unint64_t v10 = 0;
    goto LABEL_328;
  }
  uint64_t v158 = 0;
  nw_endpoint_t object = 0;
  unint64_t v10 = 0;
  __dst = v8->tfo_cookie;
  location = (id *)&v8->local_endpoint;
  uuid_t uu = &v8->nexus_instance[4];
  nw_endpoint_t v155 = &v8->flow_id[4];
  p_nexus_agent_struct = &v8->nexus_agent_struct;
  while (2)
  {
    int v16 = a2[v10];
    size_t v17 = *(unsigned int *)&a2[v10 + 1];
    if (!v17) {
      goto LABEL_48;
    }
    if (v17 <= 0xFFFFFFF9 && a3 >= v17 + 5 && a3 - (v17 + 5) >= v10)
    {
      int v27 = (unsigned __int8 *)&a2[v10 + 5];
      goto LABEL_49;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v19 = (id)gLogObj;
    *(_DWORD *)tcp_info buf = 136446978;
    *(void *)&uint8_t buf[4] = "nw_necp_buffer_get_tlv_value";
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&buf[14] = v10;
    *(_WORD *)&unsigned char buf[22] = 2048;
    *(void *)&unsigned char buf[24] = a3;
    *(_WORD *)&unsigned char buf[32] = 1024;
    *(_DWORD *)&buf[34] = v17;
    unint64_t v20 = (void *)_os_log_send_and_compose_impl();

    v167[0] = 16;
    char v166 = 0;
    if (__nwlog_fault((const char *)v20, v167, &v166))
    {
      if (v167[0] == 17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v21 = (id)gLogObj;
        os_log_type_t v22 = v167[0];
        if (os_log_type_enabled(v21, (os_log_type_t)v167[0]))
        {
          *(_DWORD *)tcp_info buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_necp_buffer_get_tlv_value";
          *(_WORD *)&unsigned char buf[12] = 2048;
          *(void *)&buf[14] = v10;
          *(_WORD *)&unsigned char buf[22] = 2048;
          *(void *)&unsigned char buf[24] = a3;
          *(_WORD *)&unsigned char buf[32] = 1024;
          *(_DWORD *)&buf[34] = v17;
          _os_log_impl(&dword_1830D4000, v21, v22, "%{public}s buffer too short tlv_offset=%zu buffer_length=%zu value_length=%u", buf, 0x26u);
        }
      }
      else
      {
        if (v166)
        {
          os_log_type_t v23 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v24 = (id)gLogObj;
          os_log_type_t v25 = v167[0];
          BOOL v26 = os_log_type_enabled(v24, (os_log_type_t)v167[0]);
          if (v23)
          {
            if (v26)
            {
              *(_DWORD *)tcp_info buf = 136447234;
              *(void *)&uint8_t buf[4] = "nw_necp_buffer_get_tlv_value";
              *(_WORD *)&unsigned char buf[12] = 2048;
              *(void *)&buf[14] = v10;
              *(_WORD *)&unsigned char buf[22] = 2048;
              *(void *)&unsigned char buf[24] = a3;
              *(_WORD *)&unsigned char buf[32] = 1024;
              *(_DWORD *)&buf[34] = v17;
              *(_WORD *)&buf[38] = 2082;
              *(void *)&buf[40] = v23;
              _os_log_impl(&dword_1830D4000, v24, v25, "%{public}s buffer too short tlv_offset=%zu buffer_length=%zu value_length=%u, dumping backtrace:%{public}s", buf, 0x30u);
            }

            free(v23);
            if (!v20) {
              goto LABEL_48;
            }
LABEL_47:
            free(v20);
            goto LABEL_48;
          }
          if (v26)
          {
            *(_DWORD *)tcp_info buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_necp_buffer_get_tlv_value";
            *(_WORD *)&unsigned char buf[12] = 2048;
            *(void *)&buf[14] = v10;
            *(_WORD *)&unsigned char buf[22] = 2048;
            *(void *)&unsigned char buf[24] = a3;
            *(_WORD *)&unsigned char buf[32] = 1024;
            *(_DWORD *)&buf[34] = v17;
            _os_log_impl(&dword_1830D4000, v24, v25, "%{public}s buffer too short tlv_offset=%zu buffer_length=%zu value_length=%u, no backtrace", buf, 0x26u);
          }

          goto LABEL_46;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v21 = (id)gLogObj;
        os_log_type_t v28 = v167[0];
        if (os_log_type_enabled(v21, (os_log_type_t)v167[0]))
        {
          *(_DWORD *)tcp_info buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_necp_buffer_get_tlv_value";
          *(_WORD *)&unsigned char buf[12] = 2048;
          *(void *)&buf[14] = v10;
          *(_WORD *)&unsigned char buf[22] = 2048;
          *(void *)&unsigned char buf[24] = a3;
          *(_WORD *)&unsigned char buf[32] = 1024;
          *(_DWORD *)&buf[34] = v17;
          _os_log_impl(&dword_1830D4000, v21, v28, "%{public}s buffer too short tlv_offset=%zu buffer_length=%zu value_length=%u, backtrace limit exceeded", buf, 0x26u);
        }
      }
    }
LABEL_46:
    if (v20) {
      goto LABEL_47;
    }
LABEL_48:
    int v27 = 0;
LABEL_49:
    v10 += v17 + 5;
    if (v10 > a3)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v119 = (id)gLogObj;
      *(_DWORD *)tcp_info buf = 136446978;
      *(void *)&uint8_t buf[4] = "nw_path_create_flow_result_from_tlv";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = v17;
      *(_WORD *)&buf[18] = 2048;
      *(void *)&buf[20] = v10;
      *(_WORD *)&buf[28] = 2048;
      *(void *)&buf[30] = a3;
      uint64_t v120 = (char *)_os_log_send_and_compose_impl();

      v167[0] = 16;
      char v166 = 0;
      if (!__nwlog_fault(v120, v167, &v166)) {
        goto LABEL_326;
      }
      if (v167[0] == 17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        nw_endpoint_t v121 = (id)gLogObj;
        os_log_type_t v122 = v167[0];
        if (os_log_type_enabled(v121, (os_log_type_t)v167[0]))
        {
          *(_DWORD *)tcp_info buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_path_create_flow_result_from_tlv";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = v17;
          *(_WORD *)&buf[18] = 2048;
          *(void *)&buf[20] = v10;
          *(_WORD *)&buf[28] = 2048;
          *(void *)&buf[30] = a3;
          _os_log_impl(&dword_1830D4000, v121, v122, "%{public}s TLV length (%u) at offset %zu goes beyond total length (%zu)", buf, 0x26u);
        }
      }
      else
      {
        if (v166)
        {
          BOOL v123 = (char *)__nw_create_backtrace_string();
          os_log_type_t v124 = __nwlog_obj();
          os_log_type_t v125 = v167[0];
          BOOL v126 = os_log_type_enabled(v124, (os_log_type_t)v167[0]);
          if (v123)
          {
            if (v126)
            {
              *(_DWORD *)tcp_info buf = 136447234;
              *(void *)&uint8_t buf[4] = "nw_path_create_flow_result_from_tlv";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = v17;
              *(_WORD *)&buf[18] = 2048;
              *(void *)&buf[20] = v10;
              *(_WORD *)&buf[28] = 2048;
              *(void *)&buf[30] = a3;
              *(_WORD *)&buf[38] = 2082;
              *(void *)&buf[40] = v123;
              _os_log_impl(&dword_1830D4000, v124, v125, "%{public}s TLV length (%u) at offset %zu goes beyond total length (%zu), dumping backtrace:%{public}s", buf, 0x30u);
            }

            free(v123);
            if (!v120)
            {
LABEL_328:
              if (v10 == a3)
              {
LABEL_329:
                if ((v158 & 0x100000000) != 0)
                {
                  local_endpoint = v9->local_endpoint;
                  if (local_endpoint
                    && (BOOL v129 = local_endpoint,
                        int v130 = [(OS_nw_endpoint *)v129 type],
                        v129,
                        v130 == 1))
                  {
                    nw_endpoint_t address = nw_endpoint_get_address((nw_endpoint_t)v9->local_endpoint);
                    nw_endpoint_t v132 = nw_endpoint_create_address_with_ethernet(address, &v164);
                    id v133 = v9->local_endpoint;
                    v9->local_endpoint = (OS_nw_endpoint *)v132;
                  }
                  else
                  {
                    *(void *)&buf[8] = 0;
                    *(void *)&buf[2] = 0;
                    *(_WORD *)tcp_info buf = 16;
                    nw_endpoint_t v134 = nw_endpoint_create_address_with_ethernet((const sockaddr *)buf, &v164);
                    os_log_type_t v135 = v9->local_endpoint;
                    v9->local_endpoint = (OS_nw_endpoint *)v134;
                  }
                }
                nw_endpoint_t v136 = object;
                if (v158)
                {
                  remote_endpoint = v9->remote_endpoint;
                  if (remote_endpoint)
                  {
                    uint64_t v138 = remote_endpoint;
                    int v139 = [(OS_nw_endpoint *)v138 type];

                    nw_endpoint_t v136 = object;
                    if (v139 == 1)
                    {
                      os_log_type_t v140 = nw_endpoint_get_address((nw_endpoint_t)v9->remote_endpoint);
                      nw_endpoint_t v141 = nw_endpoint_create_address_with_ethernet(v140, &v162);
                      uint64_t v142 = v9->remote_endpoint;
                      v9->remote_endpoint = (OS_nw_endpoint *)v141;

                      nw_endpoint_clone_parent_endpoint_properties(v9->remote_endpoint, v160->endpoint);
                      nw_endpoint_t v136 = object;
                    }
                  }
                }
                os_log_type_t v143 = v9;

                goto LABEL_339;
              }
              BOOL v144 = __nwlog_obj();
              *(_DWORD *)tcp_info buf = 136446722;
              *(void *)&uint8_t buf[4] = "nw_path_create_flow_result_from_tlv";
              *(_WORD *)&unsigned char buf[12] = 2048;
              *(void *)&buf[14] = v10;
              *(_WORD *)&unsigned char buf[22] = 2048;
              *(void *)&unsigned char buf[24] = a3;
              os_log_type_t v145 = (char *)_os_log_send_and_compose_impl();

              v167[0] = 16;
              char v166 = 0;
              if (__nwlog_fault(v145, v167, &v166))
              {
                if (v167[0] == 17)
                {
                  os_log_type_t v146 = __nwlog_obj();
                  os_log_type_t v147 = v167[0];
                  if (os_log_type_enabled(v146, (os_log_type_t)v167[0]))
                  {
                    *(_DWORD *)tcp_info buf = 136446722;
                    *(void *)&uint8_t buf[4] = "nw_path_create_flow_result_from_tlv";
                    *(_WORD *)&unsigned char buf[12] = 2048;
                    *(void *)&buf[14] = v10;
                    *(_WORD *)&unsigned char buf[22] = 2048;
                    *(void *)&unsigned char buf[24] = a3;
                    _os_log_impl(&dword_1830D4000, v146, v147, "%{public}s cursor has unexpected value %zu != %zu", buf, 0x20u);
                  }
                }
                else
                {
                  if (v166)
                  {
                    os_log_type_t v148 = (char *)__nw_create_backtrace_string();
                    __int16 v149 = __nwlog_obj();
                    os_log_type_t v150 = v167[0];
                    BOOL v151 = os_log_type_enabled(v149, (os_log_type_t)v167[0]);
                    if (v148)
                    {
                      if (v151)
                      {
                        *(_DWORD *)tcp_info buf = 136446978;
                        *(void *)&uint8_t buf[4] = "nw_path_create_flow_result_from_tlv";
                        *(_WORD *)&unsigned char buf[12] = 2048;
                        *(void *)&buf[14] = v10;
                        *(_WORD *)&unsigned char buf[22] = 2048;
                        *(void *)&unsigned char buf[24] = a3;
                        *(_WORD *)&unsigned char buf[32] = 2082;
                        *(void *)&buf[34] = v148;
                        _os_log_impl(&dword_1830D4000, v149, v150, "%{public}s cursor has unexpected value %zu != %zu, dumping backtrace:%{public}s", buf, 0x2Au);
                      }

                      free(v148);
                    }
                    else
                    {
                      if (v151)
                      {
                        *(_DWORD *)tcp_info buf = 136446722;
                        *(void *)&uint8_t buf[4] = "nw_path_create_flow_result_from_tlv";
                        *(_WORD *)&unsigned char buf[12] = 2048;
                        *(void *)&buf[14] = v10;
                        *(_WORD *)&unsigned char buf[22] = 2048;
                        *(void *)&unsigned char buf[24] = a3;
                        _os_log_impl(&dword_1830D4000, v149, v150, "%{public}s cursor has unexpected value %zu != %zu, no backtrace", buf, 0x20u);
                      }
                    }
                    goto LABEL_357;
                  }
                  os_log_type_t v146 = __nwlog_obj();
                  os_log_type_t v152 = v167[0];
                  if (os_log_type_enabled(v146, (os_log_type_t)v167[0]))
                  {
                    *(_DWORD *)tcp_info buf = 136446722;
                    *(void *)&uint8_t buf[4] = "nw_path_create_flow_result_from_tlv";
                    *(_WORD *)&unsigned char buf[12] = 2048;
                    *(void *)&buf[14] = v10;
                    *(_WORD *)&unsigned char buf[22] = 2048;
                    *(void *)&unsigned char buf[24] = a3;
                    _os_log_impl(&dword_1830D4000, v146, v152, "%{public}s cursor has unexpected value %zu != %zu, backtrace limit exceeded", buf, 0x20u);
                  }
                }
              }
LABEL_357:
              if (v145) {
                free(v145);
              }
              goto LABEL_329;
            }
LABEL_327:
            free(v120);
            goto LABEL_328;
          }
          if (v126)
          {
            *(_DWORD *)tcp_info buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_path_create_flow_result_from_tlv";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = v17;
            *(_WORD *)&buf[18] = 2048;
            *(void *)&buf[20] = v10;
            *(_WORD *)&buf[28] = 2048;
            *(void *)&buf[30] = a3;
            _os_log_impl(&dword_1830D4000, v124, v125, "%{public}s TLV length (%u) at offset %zu goes beyond total length (%zu), no backtrace", buf, 0x26u);
          }

LABEL_326:
          if (!v120) {
            goto LABEL_328;
          }
          goto LABEL_327;
        }
        nw_endpoint_t v121 = __nwlog_obj();
        os_log_type_t v127 = v167[0];
        if (os_log_type_enabled(v121, (os_log_type_t)v167[0]))
        {
          *(_DWORD *)tcp_info buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_path_create_flow_result_from_tlv";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = v17;
          *(_WORD *)&buf[18] = 2048;
          *(void *)&buf[20] = v10;
          *(_WORD *)&buf[28] = 2048;
          *(void *)&buf[30] = a3;
          _os_log_impl(&dword_1830D4000, v121, v127, "%{public}s TLV length (%u) at offset %zu goes beyond total length (%zu), backtrace limit exceeded", buf, 0x26u);
        }
      }

      goto LABEL_326;
    }
    if (!v17 || !v27) {
      goto LABEL_21;
    }
    switch(v16)
    {
      case 6:
        if (v17 == 20) {
          goto LABEL_54;
        }
        if (v17 >= 0x15)
        {
          __int16 v93 = __nwlog_obj();
          if (os_log_type_enabled(v93, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)tcp_info buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_path_verify_tlv_length";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 6;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = v17;
            *(_WORD *)&unsigned char buf[24] = 1024;
            *(_DWORD *)&buf[26] = 20;
            _os_log_impl(&dword_1830D4000, v93, OS_LOG_TYPE_DEBUG, "%{public}s Permitting TLV of type %u with larger length %u, should be %u", buf, 0x1Eu);
          }

LABEL_54:
          long long v29 = *(_OWORD *)v27;
          *(_DWORD *)&p_nexus_agent_struct->netagent_uuid[12] = *((_DWORD *)v27 + 4);
          *(_OWORD *)&p_nexus_agent_struct->generation = v29;
        }
        goto LABEL_21;
      case 7:
        if (v17 == 4) {
          goto LABEL_73;
        }
        if (v17 < 5) {
          goto LABEL_21;
        }
        os_log_type_t v97 = __nwlog_obj();
        if (os_log_type_enabled(v97, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)tcp_info buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_path_verify_tlv_length";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 7;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = v17;
          *(_WORD *)&unsigned char buf[24] = 1024;
          *(_DWORD *)&buf[26] = 4;
          _os_log_impl(&dword_1830D4000, v97, OS_LOG_TYPE_DEBUG, "%{public}s Permitting TLV of type %u with larger length %u, should be %u", buf, 0x1Eu);
        }

LABEL_73:
        int v33 = *(_DWORD *)v27;
        if ((*(_DWORD *)v27 & 0x80) != 0)
        {
          BYTE1(v9[1].super.isa) |= 1u;
          if ((v33 & 0x40) == 0)
          {
LABEL_75:
            if ((v33 & 0x200) == 0) {
              goto LABEL_76;
            }
            goto LABEL_133;
          }
        }
        else if ((v33 & 0x40) == 0)
        {
          goto LABEL_75;
        }
        BYTE1(v9[1].super.isa) |= 2u;
        if ((v33 & 0x200) == 0)
        {
LABEL_76:
          if ((v33 & 0x400) == 0) {
            goto LABEL_77;
          }
          goto LABEL_134;
        }
LABEL_133:
        BYTE1(v9[1].super.isa) |= 4u;
        if ((v33 & 0x400) == 0)
        {
LABEL_77:
          if ((v33 & 1) == 0) {
            goto LABEL_78;
          }
          goto LABEL_135;
        }
LABEL_134:
        BYTE1(v9[1].super.isa) |= 8u;
        if ((v33 & 1) == 0)
        {
LABEL_78:
          if ((v33 & 2) == 0) {
            goto LABEL_79;
          }
          goto LABEL_136;
        }
LABEL_135:
        BYTE1(v9[1].super.isa) |= 0x10u;
        if ((v33 & 2) == 0)
        {
LABEL_79:
          if ((v33 & 0x10) == 0) {
            goto LABEL_80;
          }
          goto LABEL_137;
        }
LABEL_136:
        BYTE1(v9[1].super.isa) |= 0x20u;
        if ((v33 & 0x10) == 0)
        {
LABEL_80:
          if ((v33 & 4) == 0) {
            goto LABEL_81;
          }
          goto LABEL_138;
        }
LABEL_137:
        BYTE2(v9[1].super.isa) |= 4u;
        if ((v33 & 4) == 0)
        {
LABEL_81:
          if ((v33 & 8) == 0) {
            goto LABEL_82;
          }
          goto LABEL_139;
        }
LABEL_138:
        BYTE1(v9[1].super.isa) |= 0x40u;
        if ((v33 & 8) == 0)
        {
LABEL_82:
          if ((v33 & 0x2000) == 0) {
            goto LABEL_21;
          }
          goto LABEL_140;
        }
LABEL_139:
        BYTE1(v9[1].super.isa) |= 0x80u;
        if ((v33 & 0x2000) == 0) {
          goto LABEL_21;
        }
LABEL_140:
        BYTE2(v9[1].super.isa) |= 1u;
        goto LABEL_21;
      case 8:
        if (v17 == 8) {
          goto LABEL_101;
        }
        if (v17 >= 9)
        {
          os_log_type_t v99 = __nwlog_obj();
          if (os_log_type_enabled(v99, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)tcp_info buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_path_verify_tlv_length";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 8;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = v17;
            *(_WORD *)&unsigned char buf[24] = 1024;
            *(_DWORD *)&buf[26] = 8;
            _os_log_impl(&dword_1830D4000, v99, OS_LOG_TYPE_DEBUG, "%{public}s Permitting TLV of type %u with larger length %u, should be %u", buf, 0x1Eu);
          }

LABEL_101:
          v9->interface_struct = *(necp_client_result_interface *)v27;
        }
        id v42 = nw_parameters_copy_context(v160->parameters);
        os_log_type_t v43 = nw_path_copy_interface_with_generation(v42, v9->interface_struct.index, v9->interface_struct.generation);
        interface = v9->interface;
        v9->interface = (OS_nw_interface *)v43;

        goto LABEL_21;
      case 12:
        if (v17 == 12) {
          goto LABEL_106;
        }
        if (v17 >= 0xD)
        {
          BOOL v100 = __nwlog_obj();
          if (os_log_type_enabled(v100, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)tcp_info buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_path_verify_tlv_length";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 12;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = v17;
            *(_WORD *)&unsigned char buf[24] = 1024;
            *(_DWORD *)&buf[26] = 12;
            _os_log_impl(&dword_1830D4000, v100, OS_LOG_TYPE_DEBUG, "%{public}s Permitting TLV of type %u with larger length %u, should be %u", buf, 0x1Eu);
          }

LABEL_106:
          int v45 = *((_DWORD *)v27 + 2);
          necp_client_result_interface v46 = *(necp_client_result_interface *)v27;
          BYTE2(v9[1].super.isa) |= 2u;
          *(necp_client_result_interface *)&v9->ctl_command_xpc_object_t value = v46;
          *(_DWORD *)&v9->tfo_cookie_len = v45;
        }
        goto LABEL_21;
      case 13:
        if (v17 <= 0x10)
        {
          memcpy(__dst, v27, v17);
          LOBYTE(v9[1].super.isa) = v17;
          goto LABEL_21;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v61 = (id)gLogObj;
        *(_DWORD *)tcp_info buf = 136447234;
        *(void *)&uint8_t buf[4] = "nw_path_create_flow_result_from_tlv";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 13;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = v17;
        *(_WORD *)&unsigned char buf[24] = 2080;
        *(void *)&buf[26] = "nw_path_create_flow_result_from_tlv";
        *(_WORD *)&buf[34] = 1024;
        *(_DWORD *)&buf[36] = 2413;
        BOOL v62 = (char *)_os_log_send_and_compose_impl();

        v167[0] = 16;
        char v166 = 0;
        if (!__nwlog_fault(v62, v167, &v166)) {
          goto LABEL_219;
        }
        if (v167[0] == 17)
        {
          os_log_type_t v63 = __nwlog_obj();
          os_log_type_t v64 = v167[0];
          if (os_log_type_enabled(v63, (os_log_type_t)v167[0]))
          {
            *(_DWORD *)tcp_info buf = 136447234;
            *(void *)&uint8_t buf[4] = "nw_path_create_flow_result_from_tlv";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 13;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = v17;
            *(_WORD *)&unsigned char buf[24] = 2080;
            *(void *)&buf[26] = "nw_path_create_flow_result_from_tlv";
            *(_WORD *)&buf[34] = 1024;
            *(_DWORD *)&buf[36] = 2413;
            _os_log_impl(&dword_1830D4000, v63, v64, "%{public}s TLV of type %d has invalid length %u (%s:%d)", buf, 0x28u);
          }
          goto LABEL_299;
        }
        if (!v166)
        {
          os_log_type_t v63 = __nwlog_obj();
          os_log_type_t v85 = v167[0];
          if (os_log_type_enabled(v63, (os_log_type_t)v167[0]))
          {
            *(_DWORD *)tcp_info buf = 136447234;
            *(void *)&uint8_t buf[4] = "nw_path_create_flow_result_from_tlv";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 13;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = v17;
            *(_WORD *)&unsigned char buf[24] = 2080;
            *(void *)&buf[26] = "nw_path_create_flow_result_from_tlv";
            *(_WORD *)&buf[34] = 1024;
            *(_DWORD *)&buf[36] = 2413;
            _os_log_impl(&dword_1830D4000, v63, v85, "%{public}s TLV of type %d has invalid length %u (%s:%d), backtrace limit exceeded", buf, 0x28u);
          }
          goto LABEL_299;
        }
        __int16 v72 = (char *)__nw_create_backtrace_string();
        int v73 = __nwlog_obj();
        os_log_type_t v74 = v167[0];
        BOOL v75 = os_log_type_enabled(v73, (os_log_type_t)v167[0]);
        if (!v72)
        {
          if (v75)
          {
            *(_DWORD *)tcp_info buf = 136447234;
            *(void *)&uint8_t buf[4] = "nw_path_create_flow_result_from_tlv";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 13;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = v17;
            *(_WORD *)&unsigned char buf[24] = 2080;
            *(void *)&buf[26] = "nw_path_create_flow_result_from_tlv";
            *(_WORD *)&buf[34] = 1024;
            *(_DWORD *)&buf[36] = 2413;
            _os_log_impl(&dword_1830D4000, v73, v74, "%{public}s TLV of type %d has invalid length %u (%s:%d), no backtrace", buf, 0x28u);
          }
          goto LABEL_218;
        }
        if (v75)
        {
          *(_DWORD *)tcp_info buf = 136447490;
          *(void *)&uint8_t buf[4] = "nw_path_create_flow_result_from_tlv";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 13;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = v17;
          *(_WORD *)&unsigned char buf[24] = 2080;
          *(void *)&buf[26] = "nw_path_create_flow_result_from_tlv";
          *(_WORD *)&buf[34] = 1024;
          *(_DWORD *)&buf[36] = 2413;
          *(_WORD *)&buf[40] = 2082;
          *(void *)&buf[42] = v72;
          _os_log_impl(&dword_1830D4000, v73, v74, "%{public}s TLV of type %d has invalid length %u (%s:%d), dumping backtrace:%{public}s", buf, 0x32u);
        }

        free(v72);
        if (v62) {
          goto LABEL_220;
        }
        goto LABEL_21;
      case 16:
        if (v17 == 16) {
          goto LABEL_90;
        }
        if (v17 >= 0x11)
        {
          id v98 = __nwlog_obj();
          if (os_log_type_enabled(v98, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)tcp_info buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_path_verify_tlv_length";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 16;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = v17;
            *(_WORD *)&unsigned char buf[24] = 1024;
            *(_DWORD *)&buf[26] = 16;
            _os_log_impl(&dword_1830D4000, v98, OS_LOG_TYPE_DEBUG, "%{public}s Permitting TLV of type %u with larger length %u, should be %u", buf, 0x1Eu);
          }

LABEL_90:
          *(_OWORD *)nw_endpoint_t v155 = *(_OWORD *)v27;
        }
        goto LABEL_21;
      case 100:
        uuid_clear(uu);
        if (v17 == 16) {
          goto LABEL_92;
        }
        if (v17 >= 0x11)
        {
          BOOL v104 = __nwlog_obj();
          if (os_log_type_enabled(v104, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)tcp_info buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_path_verify_tlv_length";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 100;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = v17;
            *(_WORD *)&unsigned char buf[24] = 1024;
            *(_DWORD *)&buf[26] = 16;
            _os_log_impl(&dword_1830D4000, v104, OS_LOG_TYPE_DEBUG, "%{public}s Permitting TLV of type %u with larger length %u, should be %u", buf, 0x1Eu);
          }

LABEL_92:
          *(_OWORD *)uuid_t uu = *(_OWORD *)v27;
        }
        goto LABEL_21;
      case 101:
        if (v17 == 2) {
          goto LABEL_112;
        }
        if (v17 < 3)
        {
          v9->ctl_command_code = 0;
        }
        else
        {
          os_log_type_t v101 = __nwlog_obj();
          if (os_log_type_enabled(v101, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)tcp_info buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_path_verify_tlv_length";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 101;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = v17;
            *(_WORD *)&unsigned char buf[24] = 1024;
            *(_DWORD *)&buf[26] = 2;
            _os_log_impl(&dword_1830D4000, v101, OS_LOG_TYPE_DEBUG, "%{public}s Permitting TLV of type %u with larger length %u, should be %u", buf, 0x1Eu);
          }

LABEL_112:
          v9->ctl_command_code = *(unsigned __int16 *)v27;
        }
        goto LABEL_21;
      case 102:
        nexus_key = v9->nexus_key;
        if (nexus_key)
        {
          free(nexus_key);
          v9->nexus_key = 0;
        }
        v9->nexus_flow_index = 0;
        unsigned int v48 = malloc_type_malloc(v17, 0xF2B69DE5uLL);
        if (v48)
        {
          v9->nexus_key = v48;
          memcpy(v48, v27, v17);
          v9->nexus_flow_index = v17;
LABEL_21:
          if (v10 >= a3 - 5) {
            goto LABEL_328;
          }
          continue;
        }
        unint64_t v105 = __nwlog_obj();
        os_log_type_enabled(v105, OS_LOG_TYPE_ERROR);
        *(_DWORD *)tcp_info buf = 136446466;
        *(void *)&uint8_t buf[4] = "strict_malloc";
        *(_WORD *)&unsigned char buf[12] = 2048;
        *(void *)&buf[14] = v17;
        os_log_type_t v106 = (void *)_os_log_send_and_compose_impl();

        BOOL result = __nwlog_abort((uint64_t)v106);
        if (!result)
        {
          free(v106);
          v9->nexus_key = 0;
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          id v108 = (id)gLogObj;
          *(_DWORD *)tcp_info buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_path_create_flow_result_from_tlv";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = v17;
          BOOL v62 = (char *)_os_log_send_and_compose_impl();

          v167[0] = 16;
          char v166 = 0;
          if (__nwlog_fault(v62, v167, &v166))
          {
            if (v167[0] == 17)
            {
              os_log_type_t v63 = __nwlog_obj();
              os_log_type_t v109 = v167[0];
              if (os_log_type_enabled(v63, (os_log_type_t)v167[0]))
              {
                *(_DWORD *)tcp_info buf = 136446466;
                *(void *)&uint8_t buf[4] = "nw_path_create_flow_result_from_tlv";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = v17;
                _os_log_impl(&dword_1830D4000, v63, v109, "%{public}s malloc(%u) failed", buf, 0x12u);
              }
              goto LABEL_299;
            }
            if (v166)
            {
              unint64_t v112 = (char *)__nw_create_backtrace_string();
              int v73 = __nwlog_obj();
              os_log_type_t v113 = v167[0];
              BOOL v114 = os_log_type_enabled(v73, (os_log_type_t)v167[0]);
              if (v112)
              {
                if (v114)
                {
                  *(_DWORD *)tcp_info buf = 136446722;
                  *(void *)&uint8_t buf[4] = "nw_path_create_flow_result_from_tlv";
                  *(_WORD *)&unsigned char buf[12] = 1024;
                  *(_DWORD *)&buf[14] = v17;
                  *(_WORD *)&buf[18] = 2082;
                  *(void *)&buf[20] = v112;
                  _os_log_impl(&dword_1830D4000, v73, v113, "%{public}s malloc(%u) failed, dumping backtrace:%{public}s", buf, 0x1Cu);
                }

                free(v112);
              }
              else
              {
                if (v114)
                {
                  *(_DWORD *)tcp_info buf = 136446466;
                  *(void *)&uint8_t buf[4] = "nw_path_create_flow_result_from_tlv";
                  *(_WORD *)&unsigned char buf[12] = 1024;
                  *(_DWORD *)&buf[14] = v17;
                  _os_log_impl(&dword_1830D4000, v73, v113, "%{public}s malloc(%u) failed, no backtrace", buf, 0x12u);
                }
LABEL_218:
              }
            }
            else
            {
              os_log_type_t v63 = __nwlog_obj();
              os_log_type_t v117 = v167[0];
              if (os_log_type_enabled(v63, (os_log_type_t)v167[0]))
              {
                *(_DWORD *)tcp_info buf = 136446466;
                *(void *)&uint8_t buf[4] = "nw_path_create_flow_result_from_tlv";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = v17;
                _os_log_impl(&dword_1830D4000, v63, v117, "%{public}s malloc(%u) failed, backtrace limit exceeded", buf, 0x12u);
              }
LABEL_299:
            }
          }
LABEL_219:
          if (v62) {
LABEL_220:
          }
            free(v62);
          goto LABEL_21;
        }
        __break(1u);
        return result;
      case 103:
        v9->nexus_port = 0;
        if (v17 == 4) {
          goto LABEL_65;
        }
        if (v17 >= 5)
        {
          uint64_t v95 = __nwlog_obj();
          if (os_log_type_enabled(v95, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)tcp_info buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_path_verify_tlv_length";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 103;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = v17;
            *(_WORD *)&unsigned char buf[24] = 1024;
            *(_DWORD *)&buf[26] = 4;
            _os_log_impl(&dword_1830D4000, v95, OS_LOG_TYPE_DEBUG, "%{public}s Permitting TLV of type %u with larger length %u, should be %u", buf, 0x1Eu);
          }

LABEL_65:
          v9->nexus_port = *(_DWORD *)v27;
        }
        goto LABEL_21;
      case 104:
        goto LABEL_21;
      case 156:
        if (object)
        {
          if (v17 == 16) {
            goto LABEL_88;
          }
          if (v17 >= 0x11)
          {
            os_log_type_t v110 = __nwlog_obj();
            if (os_log_type_enabled(v110, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)tcp_info buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_path_verify_tlv_length";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 156;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v17;
              *(_WORD *)&unsigned char buf[24] = 1024;
              *(_DWORD *)&buf[26] = 16;
              _os_log_impl(&dword_1830D4000, v110, OS_LOG_TYPE_DEBUG, "%{public}s Permitting TLV of type %u with larger length %u, should be %u", buf, 0x1Eu);
            }

LABEL_88:
            unsigned int v34 = object;
            *(_OWORD *)(v34 + 28) = *(_OWORD *)v27;
            nw_endpoint_t object = (nw_endpoint_t)v34;

            goto LABEL_21;
          }
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          char v65 = (id)gLogObj;
          if (os_log_type_enabled(v65, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)tcp_info buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_path_create_flow_result_from_tlv";
            _os_log_impl(&dword_1830D4000, v65, OS_LOG_TYPE_ERROR, "%{public}s No previous endpoint to apply endpoint agent to", buf, 0xCu);
          }
LABEL_158:

          nw_endpoint_t object = 0;
        }
        goto LABEL_21;
      case 158:
        if (object)
        {
          *(void *)tcp_info buf = 0;
          asprintf((char **)buf, "%.*s", v17, (const char *)v27);
          nw_endpoint_set_device_id(object, *(const char **)buf);
          if (*(void *)buf) {
            free(*(void **)buf);
          }
          goto LABEL_21;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        char v65 = (id)gLogObj;
        if (os_log_type_enabled(v65, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_path_create_flow_result_from_tlv";
          _os_log_impl(&dword_1830D4000, v65, OS_LOG_TYPE_ERROR, "%{public}s No previous endpoint to apply endpoint device id to", buf, 0xCu);
        }
        goto LABEL_158;
      case 159:
        if (object)
        {
          BOOL v30 = [MEMORY[0x1E4F1C9B8] dataWithBytes:v27 length:v17];
          nw_endpoint_append_public_key(object, v30);

          goto LABEL_21;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        char v65 = (id)gLogObj;
        if (os_log_type_enabled(v65, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_path_create_flow_result_from_tlv";
          _os_log_impl(&dword_1830D4000, v65, OS_LOG_TYPE_ERROR, "%{public}s No previous endpoint to apply public key to", buf, 0xCu);
        }
        goto LABEL_158;
      case 200:
        nw_endpoint_t v35 = nw_path_copy_endpoint_from_tlv(200, v17, v27);

        nw_endpoint_t object = v35;
        if (object) {
          objc_storeStrong(location, v35);
        }

        goto LABEL_21;
      case 201:
        nw_endpoint_t v36 = nw_path_copy_endpoint_from_tlv(201, v17, v27);

        os_log_type_t v37 = v36;
        nw_endpoint_t object = v37;
        if (v37)
        {
          endpoint = v160->endpoint;
          os_log_type_t v39 = (OS_nw_endpoint *)v37;
          if (endpoint)
          {
            char is_equal = nw_endpoint_is_equal(v37, endpoint, 0);
            os_log_type_t v41 = v160->endpoint;
            if (is_equal)
            {
              os_log_type_t v39 = v160->endpoint;
            }
            else
            {
              os_log_type_t v39 = (OS_nw_endpoint *)object;
              if (v41)
              {
                os_log_type_t v39 = (OS_nw_endpoint *)object;
                nw_endpoint_clone_parent_endpoint_properties(object, v41);
              }
            }
          }
          os_log_type_t v76 = v39;
          BOOL v77 = v9->remote_endpoint;
          v9->remote_endpoint = v76;

          os_log_type_t v37 = object;
        }

        goto LABEL_21;
      case 202:
        nw_endpoint_t v54 = nw_path_copy_endpoint_from_tlv(202, v17, v27);

        unsigned int v55 = v54;
        unint64_t v31 = v55;
        nw_endpoint_t object = v55;
        if (v55)
        {
          nw_endpoint_set_interface(v55, v9->interface);
          uint64_t discovered_endpoints = (uint64_t)v9->discovered_endpoints;
          if (!discovered_endpoints)
          {
            BOOL v57 = nw_array_create();
            __int16 v58 = v9->discovered_endpoints;
            v9->uint64_t discovered_endpoints = (OS_nw_array *)v57;

            uint64_t discovered_endpoints = (uint64_t)v9->discovered_endpoints;
          }
          unint64_t v31 = object;
          nw_array_append(discovered_endpoints, object);
        }
        goto LABEL_20;
      case 203:
        nw_endpoint_t v49 = nw_path_copy_endpoint_from_tlv(203, v17, v27);

        nw_endpoint_t v50 = v49;
        if (v50)
        {
          uint64_t resolved_endpoints = (uint64_t)v9->resolved_endpoints;
          if (!resolved_endpoints)
          {
            BOOL v52 = nw_array_create();
            os_log_type_t v53 = v9->resolved_endpoints;
            v9->uint64_t resolved_endpoints = (OS_nw_array *)v52;

            uint64_t resolved_endpoints = (uint64_t)v9->resolved_endpoints;
          }
          nw_array_append(resolved_endpoints, v50);
        }
        nw_endpoint_t object = v50;

        goto LABEL_21;
      case 204:
        if (v17 == 6) {
          goto LABEL_56;
        }
        if (v17 >= 7)
        {
          id v94 = __nwlog_obj();
          if (os_log_type_enabled(v94, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)tcp_info buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_path_verify_tlv_length";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 204;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = v17;
            *(_WORD *)&unsigned char buf[24] = 1024;
            *(_DWORD *)&buf[26] = 6;
            _os_log_impl(&dword_1830D4000, v94, OS_LOG_TYPE_DEBUG, "%{public}s Permitting TLV of type %u with larger length %u, should be %u", buf, 0x1Eu);
          }

LABEL_56:
          int v164 = *(_DWORD *)v27;
          __int16 v165 = *((_WORD *)v27 + 2);
        }
        BYTE4(v158) = 1;
        goto LABEL_21;
      case 205:
        if (v17 == 6) {
          goto LABEL_70;
        }
        if (v17 >= 7)
        {
          id v96 = __nwlog_obj();
          if (os_log_type_enabled(v96, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)tcp_info buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_path_verify_tlv_length";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 205;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = v17;
            *(_WORD *)&unsigned char buf[24] = 1024;
            *(_DWORD *)&buf[26] = 6;
            _os_log_impl(&dword_1830D4000, v96, OS_LOG_TYPE_DEBUG, "%{public}s Permitting TLV of type %u with larger length %u, should be %u", buf, 0x1Eu);
          }

LABEL_70:
          int v162 = *(_DWORD *)v27;
          __int16 v163 = *((_WORD *)v27 + 2);
        }
        LOBYTE(v158) = 1;
        goto LABEL_21;
      case 216:
        if (v17 == 8) {
          goto LABEL_124;
        }
        os_log_type_t v102 = __nwlog_obj();
        nw_endpoint_t v103 = v102;
        if (v17 >= 9)
        {
          if (os_log_type_enabled(v102, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)tcp_info buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_path_verify_tlv_length";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 216;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = v17;
            *(_WORD *)&unsigned char buf[24] = 1024;
            *(_DWORD *)&buf[26] = 8;
            _os_log_impl(&dword_1830D4000, v103, OS_LOG_TYPE_DEBUG, "%{public}s Permitting TLV of type %u with larger length %u, should be %u", buf, 0x1Eu);
          }

LABEL_124:
          int v59 = *(_DWORD *)v27;
          if (*(_DWORD *)v27 >> 8 == 16776959)
          {
            dns_int error = (OS_nw_error *)nw_error_create_dns_error(v59);
          }
          else if ((v59 + 9899) > 0x63)
          {
            dns_int error = (OS_nw_error *)nw_error_create_posix_error(v59);
          }
          else
          {
            dns_int error = (OS_nw_error *)nw_error_create_tls_error(v59);
          }
          int error = v9->error;
          v9->int error = dns_error;

          goto LABEL_21;
        }
        *(_DWORD *)tcp_info buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_path_create_flow_result_from_tlv";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = v17;
        *(_WORD *)&buf[18] = 2048;
        *(void *)&buf[20] = 8;
        BOOL v62 = (char *)_os_log_send_and_compose_impl();

        v167[0] = 16;
        char v166 = 0;
        if (!__nwlog_fault(v62, v167, &v166)) {
          goto LABEL_219;
        }
        if (v167[0] == 17)
        {
          os_log_type_t v63 = __nwlog_obj();
          os_log_type_t v111 = v167[0];
          if (os_log_type_enabled(v63, (os_log_type_t)v167[0]))
          {
            *(_DWORD *)tcp_info buf = 136446722;
            *(void *)&uint8_t buf[4] = "nw_path_create_flow_result_from_tlv";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = v17;
            *(_WORD *)&buf[18] = 2048;
            *(void *)&buf[20] = 8;
            _os_log_impl(&dword_1830D4000, v63, v111, "%{public}s Invalid length %u for NECP_CLIENT_RESULT_AGENT_ERROR, should be %zu", buf, 0x1Cu);
          }
          goto LABEL_299;
        }
        if (!v166)
        {
          os_log_type_t v63 = __nwlog_obj();
          os_log_type_t v118 = v167[0];
          if (os_log_type_enabled(v63, (os_log_type_t)v167[0]))
          {
            *(_DWORD *)tcp_info buf = 136446722;
            *(void *)&uint8_t buf[4] = "nw_path_create_flow_result_from_tlv";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = v17;
            *(_WORD *)&buf[18] = 2048;
            *(void *)&buf[20] = 8;
            _os_log_impl(&dword_1830D4000, v63, v118, "%{public}s Invalid length %u for NECP_CLIENT_RESULT_AGENT_ERROR, should be %zu, backtrace limit exceeded", buf, 0x1Cu);
          }
          goto LABEL_299;
        }
        os_log_type_t v82 = (char *)__nw_create_backtrace_string();
        int v73 = __nwlog_obj();
        os_log_type_t v115 = v167[0];
        BOOL v116 = os_log_type_enabled(v73, (os_log_type_t)v167[0]);
        if (v82)
        {
          if (v116)
          {
            *(_DWORD *)tcp_info buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_path_create_flow_result_from_tlv";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = v17;
            *(_WORD *)&buf[18] = 2048;
            *(void *)&buf[20] = 8;
            *(_WORD *)&buf[28] = 2082;
            *(void *)&buf[30] = v82;
            _os_log_impl(&dword_1830D4000, v73, v115, "%{public}s Invalid length %u for NECP_CLIENT_RESULT_AGENT_ERROR, should be %zu, dumping backtrace:%{public}s", buf, 0x26u);
          }
          goto LABEL_196;
        }
        if (v116)
        {
          *(_DWORD *)tcp_info buf = 136446722;
          *(void *)&uint8_t buf[4] = "nw_path_create_flow_result_from_tlv";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = v17;
          *(_WORD *)&buf[18] = 2048;
          *(void *)&buf[20] = 8;
          _os_log_impl(&dword_1830D4000, v73, v115, "%{public}s Invalid length %u for NECP_CLIENT_RESULT_AGENT_ERROR, should be %zu, no backtrace", buf, 0x1Cu);
        }
        goto LABEL_218;
      case 222:
        if (v9->assigned_protocol)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          unint64_t v31 = (id)gLogObj;
          if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
          {
            assigned_protocol = v9->assigned_protocol;
            *(_DWORD *)tcp_info buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_path_create_flow_result_from_tlv";
            *(_WORD *)&unsigned char buf[12] = 2112;
            *(void *)&buf[14] = assigned_protocol;
            _os_log_impl(&dword_1830D4000, v31, OS_LOG_TYPE_ERROR, "%{public}s Flow already has protocol %@ assigned, ignoring extra protocol", buf, 0x16u);
          }
LABEL_20:
        }
        else
        {
          if (v17 < 0x2A)
          {
            __int16 v78 = __nwlog_obj();
            *(_DWORD *)tcp_info buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_path_create_flow_result_from_tlv";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = v17;
            BOOL v62 = (char *)_os_log_send_and_compose_impl();

            v167[0] = 16;
            char v166 = 0;
            if (!__nwlog_fault(v62, v167, &v166)) {
              goto LABEL_219;
            }
            if (v167[0] == 17)
            {
              os_log_type_t v63 = __nwlog_obj();
              os_log_type_t v79 = v167[0];
              if (os_log_type_enabled(v63, (os_log_type_t)v167[0]))
              {
                *(_DWORD *)tcp_info buf = 136446466;
                *(void *)&uint8_t buf[4] = "nw_path_create_flow_result_from_tlv";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = v17;
                _os_log_impl(&dword_1830D4000, v63, v79, "%{public}s NW_NECP_CLIENT_PARAMETER_APPLICATION_PROTOCOL has bad length %u", buf, 0x12u);
              }
              goto LABEL_299;
            }
            if (!v166)
            {
              os_log_type_t v63 = __nwlog_obj();
              os_log_type_t v89 = v167[0];
              if (os_log_type_enabled(v63, (os_log_type_t)v167[0]))
              {
                *(_DWORD *)tcp_info buf = 136446466;
                *(void *)&uint8_t buf[4] = "nw_path_create_flow_result_from_tlv";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = v17;
                _os_log_impl(&dword_1830D4000, v63, v89, "%{public}s NW_NECP_CLIENT_PARAMETER_APPLICATION_PROTOCOL has bad length %u, backtrace limit exceeded", buf, 0x12u);
              }
              goto LABEL_299;
            }
            os_log_type_t v82 = (char *)__nw_create_backtrace_string();
            int v73 = __nwlog_obj();
            os_log_type_t v83 = v167[0];
            BOOL v84 = os_log_type_enabled(v73, (os_log_type_t)v167[0]);
            if (!v82)
            {
              if (v84)
              {
                *(_DWORD *)tcp_info buf = 136446466;
                *(void *)&uint8_t buf[4] = "nw_path_create_flow_result_from_tlv";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = v17;
                _os_log_impl(&dword_1830D4000, v73, v83, "%{public}s NW_NECP_CLIENT_PARAMETER_APPLICATION_PROTOCOL has bad length %u, no backtrace", buf, 0x12u);
              }
              goto LABEL_218;
            }
            if (v84)
            {
              *(_DWORD *)tcp_info buf = 136446722;
              *(void *)&uint8_t buf[4] = "nw_path_create_flow_result_from_tlv";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = v17;
              *(_WORD *)&buf[18] = 2082;
              *(void *)&buf[20] = v82;
              _os_log_impl(&dword_1830D4000, v73, v83, "%{public}s NW_NECP_CLIENT_PARAMETER_APPLICATION_PROTOCOL has bad length %u, dumping backtrace:%{public}s", buf, 0x1Cu);
            }
          }
          else
          {
            uint64_t v66 = *((unsigned __int16 *)v27 + 20);
            if (v66 + 42 == v17)
            {
              if (nw_path_flow_load_protocols(void)::onceToken[0] != -1) {
                dispatch_once(nw_path_flow_load_protocols(void)::onceToken, &__block_literal_global_30_59732);
              }
              long long v67 = *((_OWORD *)v27 + 1);
              *(_OWORD *)tcp_info buf = *(_OWORD *)v27;
              *(_OWORD *)&buf[16] = v67;
              *(void *)&unsigned char buf[32] = *((void *)v27 + 4);
              os_log_type_t v68 = nw_protocol_copy_definition_for_identifier(buf);
              BOOL v69 = v68;
              if (v68)
              {
                if (*((_WORD *)v27 + 20)) {
                  deserialized_options = nw_protocol_create_deserialized_options(v68, (uint64_t)(v27 + 42), *((unsigned __int16 *)v27 + 20));
                }
                else {
                  deserialized_options = nw_protocol_create_options(v68);
                }
                p_super = &deserialized_options->super;
                if (deserialized_options)
                {
                  uint64_t v90 = deserialized_options;
                  __int16 v91 = v9->assigned_protocol;
                  v9->assigned_protocol = (OS_nw_protocol_options *)v90;
                }
                else
                {
                  __int16 v91 = __nwlog_obj();
                  if (os_log_type_enabled(v91, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)id v167 = 136446466;
                    uint64_t v168 = "nw_path_create_flow_result_from_tlv";
                    __int16 v169 = 2112;
                    BOOL v170 = v69;
                    _os_log_impl(&dword_1830D4000, v91, OS_LOG_TYPE_DEFAULT, "%{public}s Failed to deserialize options for %@", v167, 0x16u);
                  }
                }
              }
              else
              {
                p_super = __nwlog_obj();
                if (os_log_type_enabled(p_super, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)id v167 = 136446466;
                  uint64_t v168 = "nw_path_create_flow_result_from_tlv";
                  __int16 v169 = 2080;
                  BOOL v170 = buf;
                  _os_log_impl(&dword_1830D4000, p_super, OS_LOG_TYPE_DEFAULT, "%{public}s No protocol definition registered for \"%s\"", v167, 0x16u);
                }
              }

              goto LABEL_21;
            }
            uint64_t v80 = __nwlog_obj();
            *(_DWORD *)tcp_info buf = 136446722;
            *(void *)&uint8_t buf[4] = "nw_path_create_flow_result_from_tlv";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = v66;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = v17;
            BOOL v62 = (char *)_os_log_send_and_compose_impl();

            v167[0] = 16;
            char v166 = 0;
            if (!__nwlog_fault(v62, v167, &v166)) {
              goto LABEL_219;
            }
            if (v167[0] == 17)
            {
              os_log_type_t v63 = __nwlog_obj();
              os_log_type_t v81 = v167[0];
              if (os_log_type_enabled(v63, (os_log_type_t)v167[0]))
              {
                *(_DWORD *)tcp_info buf = 136446722;
                *(void *)&uint8_t buf[4] = "nw_path_create_flow_result_from_tlv";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = v66;
                *(_WORD *)&buf[18] = 1024;
                *(_DWORD *)&buf[20] = v17;
                _os_log_impl(&dword_1830D4000, v63, v81, "%{public}s NW_NECP_CLIENT_PARAMETER_APPLICATION_PROTOCOL has bad options length %u (total %u)", buf, 0x18u);
              }
              goto LABEL_299;
            }
            if (!v166)
            {
              os_log_type_t v63 = __nwlog_obj();
              os_log_type_t v92 = v167[0];
              if (os_log_type_enabled(v63, (os_log_type_t)v167[0]))
              {
                *(_DWORD *)tcp_info buf = 136446722;
                *(void *)&uint8_t buf[4] = "nw_path_create_flow_result_from_tlv";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = v66;
                *(_WORD *)&buf[18] = 1024;
                *(_DWORD *)&buf[20] = v17;
                _os_log_impl(&dword_1830D4000, v63, v92, "%{public}s NW_NECP_CLIENT_PARAMETER_APPLICATION_PROTOCOL has bad options length %u (total %u), backtrace limit exceeded", buf, 0x18u);
              }
              goto LABEL_299;
            }
            os_log_type_t v82 = (char *)__nw_create_backtrace_string();
            int v73 = __nwlog_obj();
            os_log_type_t v86 = v167[0];
            BOOL v87 = os_log_type_enabled(v73, (os_log_type_t)v167[0]);
            if (!v82)
            {
              if (v87)
              {
                *(_DWORD *)tcp_info buf = 136446722;
                *(void *)&uint8_t buf[4] = "nw_path_create_flow_result_from_tlv";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = v66;
                *(_WORD *)&buf[18] = 1024;
                *(_DWORD *)&buf[20] = v17;
                _os_log_impl(&dword_1830D4000, v73, v86, "%{public}s NW_NECP_CLIENT_PARAMETER_APPLICATION_PROTOCOL has bad options length %u (total %u), no backtrace", buf, 0x18u);
              }
              goto LABEL_218;
            }
            if (v87)
            {
              *(_DWORD *)tcp_info buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_path_create_flow_result_from_tlv";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = v66;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v17;
              *(_WORD *)&unsigned char buf[24] = 2082;
              *(void *)&buf[26] = v82;
              _os_log_impl(&dword_1830D4000, v73, v86, "%{public}s NW_NECP_CLIENT_PARAMETER_APPLICATION_PROTOCOL has bad options length %u (total %u), dumping backtrace:%{public}s", buf, 0x22u);
            }
          }
LABEL_196:

          free(v82);
          if (v62) {
            goto LABEL_220;
          }
        }
        goto LABEL_21;
      default:
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        unint64_t v31 = (id)gLogObj;
        if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)tcp_info buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_path_create_flow_result_from_tlv";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = v16;
          _os_log_impl(&dword_1830D4000, v31, OS_LOG_TYPE_ERROR, "%{public}s Received unknown flow result TLV (type %d)", buf, 0x12u);
        }
        goto LABEL_20;
    }
  }
}

void sub_1832C1FB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,void *a32)
{
  _Unwind_Resume(a1);
}

NWConcrete_nw_path_flow *nw_path_flow_create()
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v0 = objc_alloc_init(NWConcrete_nw_path_flow);
  id v1 = v0;
  if (v0)
  {
    v0->ctl_command_code = 0;
    xpc_object_t v2 = v0;
    goto LABEL_10;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v3 = (id)gLogObj;
  *(_DWORD *)tcp_info buf = 136446210;
  os_log_type_t v15 = "nw_path_flow_create";
  id v4 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (!__nwlog_fault(v4, &type, &v12)) {
    goto LABEL_8;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v5 = (id)gLogObj;
    os_log_type_t v6 = type;
    if (os_log_type_enabled(v5, type))
    {
      *(_DWORD *)tcp_info buf = 136446210;
      os_log_type_t v15 = "nw_path_flow_create";
      _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_path_flow) alloc] init] failed", buf, 0xCu);
    }
LABEL_7:

LABEL_8:
    if (!v4) {
      goto LABEL_10;
    }
LABEL_9:
    free(v4);
    goto LABEL_10;
  }
  if (!v12)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v5 = (id)gLogObj;
    os_log_type_t v11 = type;
    if (os_log_type_enabled(v5, type))
    {
      *(_DWORD *)tcp_info buf = 136446210;
      os_log_type_t v15 = "nw_path_flow_create";
      _os_log_impl(&dword_1830D4000, v5, v11, "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_path_flow) alloc] init] failed, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_7;
  }
  backtrace_string = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v5 = (id)gLogObj;
  os_log_type_t v9 = type;
  BOOL v10 = os_log_type_enabled(v5, type);
  if (!backtrace_string)
  {
    if (v10)
    {
      *(_DWORD *)tcp_info buf = 136446210;
      os_log_type_t v15 = "nw_path_flow_create";
      _os_log_impl(&dword_1830D4000, v5, v9, "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_path_flow) alloc] init] failed, no backtrace", buf, 0xCu);
    }
    goto LABEL_7;
  }
  if (v10)
  {
    *(_DWORD *)tcp_info buf = 136446466;
    os_log_type_t v15 = "nw_path_flow_create";
    __int16 v16 = 2082;
    size_t v17 = backtrace_string;
    _os_log_impl(&dword_1830D4000, v5, v9, "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_path_flow) alloc] init] failed, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(backtrace_string);
  if (v4) {
    goto LABEL_9;
  }
LABEL_10:

  return v1;
}

BOOL nw_path_is_equal(nw_path_t path, nw_path_t other_path)
{
  return nw_path_is_equal_inner(path, other_path, 0);
}

void nw_protocol_instance_update_outbound_data_limit(void *a1, uint64_t a2, int a3)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  os_log_type_t v6 = (char *)v5;
  if (v5)
  {
    if (a2)
    {
      os_log_type_t v7 = (void *)v5[15];
      if (v7)
      {
        os_log_type_t v8 = v7;
        os_log_type_t v9 = v8;
        if (((_BYTE)v8[17] & 8) == 0) {
          dispatch_assert_queue_V2(v8[1]);
        }
      }
      if ((v6[402] & 0x40) == 0)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v10 = (id)gLogObj;
        *(_DWORD *)tcp_info buf = 136446210;
        unsigned int v56 = "nw_protocol_instance_update_outbound_data_limit";
        os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();

        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v53 = 0;
        if (!__nwlog_fault(v11, &type, &v53)) {
          goto LABEL_51;
        }
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          char v12 = (id)gLogObj;
          os_log_type_t v13 = type;
          if (os_log_type_enabled(v12, type))
          {
            *(_DWORD *)tcp_info buf = 136446210;
            unsigned int v56 = "nw_protocol_instance_update_outbound_data_limit";
            _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s Outbound data limit updates is not opted in", buf, 0xCu);
          }
LABEL_50:

          goto LABEL_51;
        }
        if (!v53)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          char v12 = (id)gLogObj;
          os_log_type_t v26 = type;
          if (os_log_type_enabled(v12, type))
          {
            *(_DWORD *)tcp_info buf = 136446210;
            unsigned int v56 = "nw_protocol_instance_update_outbound_data_limit";
            _os_log_impl(&dword_1830D4000, v12, v26, "%{public}s Outbound data limit updates is not opted in, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_50;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        char v12 = (id)gLogObj;
        os_log_type_t v24 = type;
        BOOL v25 = os_log_type_enabled(v12, type);
        if (!backtrace_string)
        {
          if (v25)
          {
            *(_DWORD *)tcp_info buf = 136446210;
            unsigned int v56 = "nw_protocol_instance_update_outbound_data_limit";
            _os_log_impl(&dword_1830D4000, v12, v24, "%{public}s Outbound data limit updates is not opted in, no backtrace", buf, 0xCu);
          }
          goto LABEL_50;
        }
        if (v25)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          unsigned int v56 = "nw_protocol_instance_update_outbound_data_limit";
          __int16 v57 = 2082;
          *(void *)__int16 v58 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v12, v24, "%{public}s Outbound data limit updates is not opted in, dumping backtrace:%{public}s", buf, 0x16u);
        }
LABEL_38:

        free(backtrace_string);
        if (!v11) {
          goto LABEL_53;
        }
        goto LABEL_52;
      }
      if (*(_DWORD *)(*((void *)v6 + 1) + 64) == 3)
      {
        BOOL v14 = (char *)*((void *)v6 + 29);
        if (a2 == -1)
        {
          v49[0] = MEMORY[0x1E4F143A8];
          v49[1] = 3221225472;
          v49[2] = __nw_protocol_instance_update_outbound_data_limit_block_invoke;
          v49[3] = &unk_1E523BD60;
          int v52 = a3;
          uint64_t v51 = -1;
          nw_endpoint_t v50 = v6;
          nw_hash_table_apply(v14, (uint64_t)v49);

          goto LABEL_53;
        }
        uint64_t node = nw_hash_table_get_node(*((void *)v6 + 29), a2, 8);
        if (!node)
        {
          if ((v6[405] & 0x80000000) == 0)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            int v27 = (id)gLogObj;
            if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)tcp_info buf = 136446978;
              unsigned int v56 = "nw_protocol_instance_update_outbound_data_limit";
              __int16 v57 = 2082;
              *(void *)__int16 v58 = v6 + 407;
              *(_WORD *)&v58[8] = 2080;
              *(void *)int v59 = " ";
              *(_WORD *)&v59[8] = 2048;
              uint64_t v60 = a2;
              _os_log_impl(&dword_1830D4000, v27, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sCannot set outbound data limit, flow %llx does not exist", buf, 0x2Au);
            }
          }
          goto LABEL_53;
        }
        uint64_t v16 = *(void *)(node + 16);
        if (gLogDatapath)
        {
          uint64_t v45 = node;
          necp_client_result_interface v46 = __nwlog_obj();
          if (os_log_type_enabled(v46, OS_LOG_TYPE_DEBUG))
          {
            int v47 = *(_DWORD *)(v45 + 72);
            *(_DWORD *)tcp_info buf = 136446978;
            unsigned int v56 = "nw_protocol_instance_update_outbound_data_limit";
            __int16 v57 = 1024;
            *(_DWORD *)__int16 v58 = v47;
            *(_WORD *)&v58[4] = 1024;
            *(_DWORD *)&v58[6] = a3;
            *(_WORD *)int v59 = 2048;
            *(void *)&v59[2] = a2;
            _os_log_impl(&dword_1830D4000, v46, OS_LOG_TYPE_DEBUG, "%{public}s Increase current outbound data limit %u to %u bytes for flow %llx", buf, 0x22u);
          }

          uint64_t node = v45;
          *(_DWORD *)(v45 + 72) = a3;
          if (!a3) {
            goto LABEL_53;
          }
        }
        else
        {
          *(_DWORD *)(node + 72) = a3;
          if (!a3) {
            goto LABEL_53;
          }
        }
        __int16 v17 = *(_WORD *)(node + 84);
        if ((v17 & 0x180) != 0x80 || v16 == 0) {
          goto LABEL_53;
        }
        uint64_t v19 = *(void *)(v16 + 24);
        if (!v19 || !*(void *)(v19 + 72)) {
          goto LABEL_53;
        }
        *(_WORD *)(node + 84) = v17 | 0x100;
        char v20 = v6[405];
        goto LABEL_33;
      }
      if (a2 == -1)
      {
        if (gLogDatapath)
        {
          os_log_type_t v39 = __nwlog_obj();
          if (os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG))
          {
            int v40 = *((_DWORD *)v6 + 26);
            *(_DWORD *)tcp_info buf = 136446722;
            unsigned int v56 = "nw_protocol_instance_update_outbound_data_limit";
            __int16 v57 = 1024;
            *(_DWORD *)__int16 v58 = v40;
            *(_WORD *)&v58[4] = 1024;
            *(_DWORD *)&v58[6] = a3;
            _os_log_impl(&dword_1830D4000, v39, OS_LOG_TYPE_DEBUG, "%{public}s Increase current outbound data limit %u to %u bytes for connection", buf, 0x18u);
          }
        }
        *((_DWORD *)v6 + 26) = a3;
        if (!a3) {
          goto LABEL_53;
        }
        if ((v6[404] & 0x80000000) == 0) {
          goto LABEL_53;
        }
        char v20 = v6[405];
        if (v20) {
          goto LABEL_53;
        }
        uint64_t v21 = *((void *)v6 - 6);
        if (!v21) {
          goto LABEL_53;
        }
        uint64_t v22 = *(void *)(v21 + 24);
        if (!v22 || !*(void *)(v22 + 72)) {
          goto LABEL_53;
        }
LABEL_33:
        v6[405] = v20 | 1;
        goto LABEL_53;
      }
      os_log_type_t v37 = __nwlog_obj();
      *(_DWORD *)tcp_info buf = 136446210;
      unsigned int v56 = "nw_protocol_instance_update_outbound_data_limit";
      os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v53 = 0;
      if (__nwlog_fault(v11, &type, &v53))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          char v12 = __nwlog_obj();
          os_log_type_t v38 = type;
          if (os_log_type_enabled(v12, type))
          {
            *(_DWORD *)tcp_info buf = 136446210;
            unsigned int v56 = "nw_protocol_instance_update_outbound_data_limit";
            _os_log_impl(&dword_1830D4000, v12, v38, "%{public}s called with null (flow == NW_PROTOCOL_DEFAULT_FLOW)", buf, 0xCu);
          }
          goto LABEL_50;
        }
        if (!v53)
        {
          char v12 = __nwlog_obj();
          os_log_type_t v48 = type;
          if (os_log_type_enabled(v12, type))
          {
            *(_DWORD *)tcp_info buf = 136446210;
            unsigned int v56 = "nw_protocol_instance_update_outbound_data_limit";
            _os_log_impl(&dword_1830D4000, v12, v48, "%{public}s called with null (flow == NW_PROTOCOL_DEFAULT_FLOW), backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_50;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        char v12 = __nwlog_obj();
        os_log_type_t v43 = type;
        BOOL v44 = os_log_type_enabled(v12, type);
        if (!backtrace_string)
        {
          if (v44)
          {
            *(_DWORD *)tcp_info buf = 136446210;
            unsigned int v56 = "nw_protocol_instance_update_outbound_data_limit";
            _os_log_impl(&dword_1830D4000, v12, v43, "%{public}s called with null (flow == NW_PROTOCOL_DEFAULT_FLOW), no backtrace", buf, 0xCu);
          }
          goto LABEL_50;
        }
        if (v44)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          unsigned int v56 = "nw_protocol_instance_update_outbound_data_limit";
          __int16 v57 = 2082;
          *(void *)__int16 v58 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v12, v43, "%{public}s called with null (flow == NW_PROTOCOL_DEFAULT_FLOW), dumping backtrace:%{public}s", buf, 0x16u);
        }
        goto LABEL_38;
      }
    }
    else
    {
      BOOL v30 = __nwlog_obj();
      *(_DWORD *)tcp_info buf = 136446210;
      unsigned int v56 = "nw_protocol_instance_update_outbound_data_limit";
      os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v53 = 0;
      if (__nwlog_fault(v11, &type, &v53))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          char v12 = __nwlog_obj();
          os_log_type_t v31 = type;
          if (os_log_type_enabled(v12, type))
          {
            *(_DWORD *)tcp_info buf = 136446210;
            unsigned int v56 = "nw_protocol_instance_update_outbound_data_limit";
            _os_log_impl(&dword_1830D4000, v12, v31, "%{public}s called with null flow", buf, 0xCu);
          }
          goto LABEL_50;
        }
        if (!v53)
        {
          char v12 = __nwlog_obj();
          os_log_type_t v42 = type;
          if (os_log_type_enabled(v12, type))
          {
            *(_DWORD *)tcp_info buf = 136446210;
            unsigned int v56 = "nw_protocol_instance_update_outbound_data_limit";
            _os_log_impl(&dword_1830D4000, v12, v42, "%{public}s called with null flow, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_50;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        char v12 = __nwlog_obj();
        os_log_type_t v35 = type;
        BOOL v36 = os_log_type_enabled(v12, type);
        if (!backtrace_string)
        {
          if (v36)
          {
            *(_DWORD *)tcp_info buf = 136446210;
            unsigned int v56 = "nw_protocol_instance_update_outbound_data_limit";
            _os_log_impl(&dword_1830D4000, v12, v35, "%{public}s called with null flow, no backtrace", buf, 0xCu);
          }
          goto LABEL_50;
        }
        if (v36)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          unsigned int v56 = "nw_protocol_instance_update_outbound_data_limit";
          __int16 v57 = 2082;
          *(void *)__int16 v58 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v12, v35, "%{public}s called with null flow, dumping backtrace:%{public}s", buf, 0x16u);
        }
        goto LABEL_38;
      }
    }
  }
  else
  {
    os_log_type_t v28 = __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    unsigned int v56 = "nw_protocol_instance_update_outbound_data_limit";
    os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v53 = 0;
    if (__nwlog_fault(v11, &type, &v53))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        char v12 = __nwlog_obj();
        os_log_type_t v29 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          unsigned int v56 = "nw_protocol_instance_update_outbound_data_limit";
          _os_log_impl(&dword_1830D4000, v12, v29, "%{public}s called with null instance", buf, 0xCu);
        }
        goto LABEL_50;
      }
      if (!v53)
      {
        char v12 = __nwlog_obj();
        os_log_type_t v41 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          unsigned int v56 = "nw_protocol_instance_update_outbound_data_limit";
          _os_log_impl(&dword_1830D4000, v12, v41, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_50;
      }
      BOOL v32 = (char *)__nw_create_backtrace_string();
      char v12 = __nwlog_obj();
      os_log_type_t v33 = type;
      BOOL v34 = os_log_type_enabled(v12, type);
      if (!v32)
      {
        if (v34)
        {
          *(_DWORD *)tcp_info buf = 136446210;
          unsigned int v56 = "nw_protocol_instance_update_outbound_data_limit";
          _os_log_impl(&dword_1830D4000, v12, v33, "%{public}s called with null instance, no backtrace", buf, 0xCu);
        }
        goto LABEL_50;
      }
      if (v34)
      {
        *(_DWORD *)tcp_info buf = 136446466;
        unsigned int v56 = "nw_protocol_instance_update_outbound_data_limit";
        __int16 v57 = 2082;
        *(void *)__int16 v58 = v32;
        _os_log_impl(&dword_1830D4000, v12, v33, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(v32);
    }
  }
LABEL_51:
  if (v11) {
LABEL_52:
  }
    free(v11);
LABEL_53:
}

void sub_1832C3240(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_path_get_sysctls_region()
{
  if (nw_path_get_sysctls_region::sSysctlsRegion != -1) {
    dispatch_once(&nw_path_get_sysctls_region::sSysctlsRegion, &__block_literal_global_305);
  }
  return nw_path_get_sysctls_region::sysctls_region;
}

void nw_quic_connection_set_keepalive_count(void *a1, __int16 a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  if (nw_protocol_options_is_quic_connection(v3))
  {
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_quic_connection_set_keepalive_count_block_invoke;
    v12[3] = &__block_descriptor_34_e9_B16__0_v8l;
    __int16 v13 = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }
  id v4 = __nwlog_obj();
  *(_DWORD *)tcp_info buf = 136446210;
  __int16 v17 = "nw_quic_connection_set_keepalive_count";
  id v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        __int16 v17 = "nw_quic_connection_set_keepalive_count";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_options_is_quic_connection(options)", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          __int16 v17 = "nw_quic_connection_set_keepalive_count";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        __int16 v17 = "nw_quic_connection_set_keepalive_count";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        __int16 v17 = "nw_quic_connection_set_keepalive_count";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
LABEL_3:
}

void sub_1832C3580(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_quic_connection_set_initial_max_streams_unidirectional(void *a1, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  if (nw_protocol_options_is_quic_connection(v3))
  {
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_quic_connection_set_initial_max_streams_unidirectional_block_invoke;
    v12[3] = &__block_descriptor_40_e9_B16__0_v8l;
    void v12[4] = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }
  id v4 = __nwlog_obj();
  *(_DWORD *)tcp_info buf = 136446210;
  uint64_t v16 = "nw_quic_connection_set_initial_max_streams_unidirectional";
  id v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint64_t v16 = "nw_quic_connection_set_initial_max_streams_unidirectional";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_options_is_quic_connection(options)", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          uint64_t v16 = "nw_quic_connection_set_initial_max_streams_unidirectional";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint64_t v16 = "nw_quic_connection_set_initial_max_streams_unidirectional";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint64_t v16 = "nw_quic_connection_set_initial_max_streams_unidirectional";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
LABEL_3:
}

void sub_1832C387C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_quic_connection_set_initial_max_streams_bidirectional(void *a1, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  if (nw_protocol_options_is_quic_connection(v3))
  {
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_quic_connection_set_initial_max_streams_bidirectional_block_invoke;
    v12[3] = &__block_descriptor_40_e9_B16__0_v8l;
    void v12[4] = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }
  id v4 = __nwlog_obj();
  *(_DWORD *)tcp_info buf = 136446210;
  uint64_t v16 = "nw_quic_connection_set_initial_max_streams_bidirectional";
  id v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint64_t v16 = "nw_quic_connection_set_initial_max_streams_bidirectional";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_options_is_quic_connection(options)", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          uint64_t v16 = "nw_quic_connection_set_initial_max_streams_bidirectional";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint64_t v16 = "nw_quic_connection_set_initial_max_streams_bidirectional";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint64_t v16 = "nw_quic_connection_set_initial_max_streams_bidirectional";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
LABEL_3:
}

void sub_1832C3B78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_quic_connection_set_idle_timeout(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  if (nw_protocol_options_is_quic_connection(v3))
  {
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_quic_connection_set_idle_timeout_block_invoke;
    v12[3] = &__block_descriptor_36_e9_B16__0_v8l;
    int v13 = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }
  id v4 = __nwlog_obj();
  *(_DWORD *)tcp_info buf = 136446210;
  __int16 v17 = "nw_quic_connection_set_idle_timeout";
  id v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        __int16 v17 = "nw_quic_connection_set_idle_timeout";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_options_is_quic_connection(options)", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          __int16 v17 = "nw_quic_connection_set_idle_timeout";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        __int16 v17 = "nw_quic_connection_set_idle_timeout";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        __int16 v17 = "nw_quic_connection_set_idle_timeout";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
LABEL_3:
}

void sub_1832C3E74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_protocol_data_set_compression_generation_count(void *a1, int a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    nw_frame_set_compression_generation_count((uint64_t)v3, a2);
    goto LABEL_3;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)tcp_info buf = 136446210;
  uint64_t v16 = "nw_protocol_data_set_compression_generation_count";
  os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint64_t v16 = "nw_protocol_data_set_compression_generation_count";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null data", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          uint64_t v16 = "nw_protocol_data_set_compression_generation_count";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null data, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint64_t v16 = "nw_protocol_data_set_compression_generation_count";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null data, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint64_t v16 = "nw_protocol_data_set_compression_generation_count";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null data, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
LABEL_3:
}

void nw_frame_set_compression_generation_count(uint64_t a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    __int16 v17 = "nw_frame_set_compression_generation_count";
    xpc_object_t v2 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (!__nwlog_fault(v2, &type, &v14)) {
      goto LABEL_18;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      if (!os_log_type_enabled(v3, type)) {
        goto LABEL_18;
      }
      *(_DWORD *)tcp_info buf = 136446210;
      __int16 v17 = "nw_frame_set_compression_generation_count";
      id v5 = "%{public}s called with null frame";
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      BOOL v13 = os_log_type_enabled(v3, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          __int16 v17 = "nw_frame_set_compression_generation_count";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v3, v4, "%{public}s called with null frame, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_18;
      }
      if (!v13) {
        goto LABEL_18;
      }
      *(_DWORD *)tcp_info buf = 136446210;
      __int16 v17 = "nw_frame_set_compression_generation_count";
      id v5 = "%{public}s called with null frame, no backtrace";
    }
    else
    {
      id v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      if (!os_log_type_enabled(v3, type)) {
        goto LABEL_18;
      }
      *(_DWORD *)tcp_info buf = 136446210;
      __int16 v17 = "nw_frame_set_compression_generation_count";
      id v5 = "%{public}s called with null frame, backtrace limit exceeded";
    }
LABEL_16:
    os_log_type_t v10 = v3;
    os_log_type_t v11 = v4;
LABEL_17:
    _os_log_impl(&dword_1830D4000, v10, v11, v5, buf, 0xCu);
    goto LABEL_18;
  }
  if ((*(_WORD *)(a1 + 204) & 0x40) == 0)
  {
    *(_DWORD *)(a1 + 192) = a2;
    return;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)tcp_info buf = 136446210;
  __int16 v17 = "__nw_frame_set_compression_generation_count";
  xpc_object_t v2 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (!__nwlog_fault(v2, &type, &v14))
  {
LABEL_18:
    if (!v2) {
      return;
    }
    goto LABEL_19;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v3 = gLogObj;
    os_log_type_t v4 = type;
    if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
      goto LABEL_18;
    }
    *(_DWORD *)tcp_info buf = 136446210;
    __int16 v17 = "__nw_frame_set_compression_generation_count";
    id v5 = "%{public}s Attempt to set generation-count on a chain-member";
    goto LABEL_16;
  }
  if (!v14)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v3 = gLogObj;
    os_log_type_t v4 = type;
    if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
      goto LABEL_18;
    }
    *(_DWORD *)tcp_info buf = 136446210;
    __int16 v17 = "__nw_frame_set_compression_generation_count";
    id v5 = "%{public}s Attempt to set generation-count on a chain-member, backtrace limit exceeded";
    goto LABEL_16;
  }
  os_log_type_t v6 = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_t v7 = gLogObj;
  os_log_type_t v8 = type;
  BOOL v9 = os_log_type_enabled((os_log_t)gLogObj, type);
  if (!v6)
  {
    if (v9)
    {
      *(_DWORD *)tcp_info buf = 136446210;
      __int16 v17 = "__nw_frame_set_compression_generation_count";
      id v5 = "%{public}s Attempt to set generation-count on a chain-member, no backtrace";
      os_log_type_t v10 = v7;
      os_log_type_t v11 = v8;
      goto LABEL_17;
    }
    goto LABEL_18;
  }
  if (v9)
  {
    *(_DWORD *)tcp_info buf = 136446466;
    __int16 v17 = "__nw_frame_set_compression_generation_count";
    __int16 v18 = 2082;
    uint64_t v19 = v6;
    _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s Attempt to set generation-count on a chain-member, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v6);
  if (v2) {
LABEL_19:
  }
    free(v2);
}

void ___ZL38nw_listener_reconcile_inboxes_on_queueP22NWConcrete_nw_listener_block_invoke_208(uint64_t a1, void *a2, const unsigned __int8 *a3)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  if (uuid_is_null(a3)) {
    goto LABEL_15;
  }
  id v6 = *(id *)(a1 + 32);
  os_log_type_t v7 = &unk_183D5C000;
  if (v6)
  {
    os_log_type_t v8 = v6;
    nw_context_assert_queue(*((void **)v6 + 3));
    *(void *)int v40 = 0;
    *(void *)&v40[8] = v40;
    *(void *)&v40[16] = 0x2020000000;
    char v41 = 0;
    BOOL v9 = (atomic_uchar *)v8[19];
    *(void *)tcp_info buf = MEMORY[0x1E4F143A8];
    *(void *)&buf[8] = 3221225472;
    *(void *)&buf[16] = ___ZL45nw_listener_has_flow_for_nexus_agent_on_queueP22NWConcrete_nw_listenerPh_block_invoke;
    *(void *)&long long v37 = &unk_1E5249D20;
    os_log_type_t v39 = a3;
    os_log_type_t v10 = v8;
    *((void *)&v37 + 1) = v10;
    os_log_type_t v38 = v40;
    nw_array_apply(v9, (uint64_t)buf);
    LODWORD(v9) = *(unsigned char *)(*(void *)&v40[8] + 24) == 0;

    _Block_object_dispose(v40, 8);
    if (!v9) {
      goto LABEL_15;
    }
    goto LABEL_4;
  }
  uint64_t v22 = __nwlog_obj();
  *(_DWORD *)int v40 = 136446210;
  *(void *)&v40[4] = "nw_listener_has_flow_for_nexus_agent_on_queue";
  os_log_type_t v23 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v34 = 0;
  if (__nwlog_fault(v23, &type, &v34))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v24 = __nwlog_obj();
      os_log_type_t v25 = type;
      if (os_log_type_enabled(v24, type))
      {
        *(_DWORD *)int v40 = 136446210;
        *(void *)&v40[4] = "nw_listener_has_flow_for_nexus_agent_on_queue";
        _os_log_impl(&dword_1830D4000, v24, v25, "%{public}s called with null listener", v40, 0xCu);
      }
    }
    else
    {
      if (v34)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        int v27 = __nwlog_obj();
        os_log_type_t v28 = type;
        BOOL v29 = os_log_type_enabled(v27, type);
        if (backtrace_string)
        {
          if (v29)
          {
            *(_DWORD *)int v40 = 136446466;
            *(void *)&v40[4] = "nw_listener_has_flow_for_nexus_agent_on_queue";
            *(_WORD *)&v40[12] = 2082;
            *(void *)&v40[14] = backtrace_string;
            _os_log_impl(&dword_1830D4000, v27, v28, "%{public}s called with null listener, dumping backtrace:%{public}s", v40, 0x16u);
          }

          os_log_type_t v7 = (void *)&unk_183D5C000;
          free(backtrace_string);
        }
        else
        {
          if (v29)
          {
            *(_DWORD *)int v40 = 136446210;
            *(void *)&v40[4] = "nw_listener_has_flow_for_nexus_agent_on_queue";
            _os_log_impl(&dword_1830D4000, v27, v28, "%{public}s called with null listener, no backtrace", v40, 0xCu);
          }

          os_log_type_t v7 = (void *)&unk_183D5C000;
        }
        goto LABEL_32;
      }
      os_log_type_t v24 = __nwlog_obj();
      os_log_type_t v30 = type;
      if (os_log_type_enabled(v24, type))
      {
        *(_DWORD *)int v40 = 136446210;
        *(void *)&v40[4] = "nw_listener_has_flow_for_nexus_agent_on_queue";
        _os_log_impl(&dword_1830D4000, v24, v30, "%{public}s called with null listener, backtrace limit exceeded", v40, 0xCu);
      }
    }
  }
LABEL_32:
  if (v23) {
    free(v23);
  }
LABEL_4:
  *(_OWORD *)int v40 = *(_OWORD *)a3;
  uint64_t v11 = *(void *)(*(void *)(a1 + 32) + 16);
  if (v11 && !nw_path_parameters_get_logging_disabled(*(void *)(v11 + 104)))
  {
    if (__nwlog_listener_log::onceToken != -1) {
      dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_40_44887);
    }
    os_log_type_t v12 = (id)glistenerLogObj;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      id_string = nw_listener_get_id_string(*(void **)(a1 + 32));
      *(_DWORD *)tcp_info buf = 136447234;
      *(void *)&uint8_t buf[4] = "nw_listener_reconcile_inboxes_on_queue_block_invoke";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = id_string;
      *(_WORD *)&unsigned char buf[22] = 1042;
      LODWORD(v37) = 16;
      WORD2(v37) = 2098;
      *(void *)((char *)&v37 + 6) = v40;
      HIWORD(v37) = 2114;
      os_log_type_t v38 = v5;
      _os_log_impl(&dword_1830D4000, v12, OS_LOG_TYPE_INFO, "%{public}s [%{public}s] adding flow registration for nexus %{public,uuid_t}.16P on %{public}@", buf, 0x30u);
    }
  }
  flow_inner = nw_path_evaluator_create_flow_inner(*(void **)(*(void *)(a1 + 32) + 168), 0, 1, 0, 0, v40, 0, 0, 0);
  uint64_t v15 = *(void *)(*(void *)(a1 + 32) + 152);
  if (v15
    || (BOOL v16 = nw_array_create(),
        uint64_t v17 = *(void *)(a1 + 32),
        __int16 v18 = *(void **)(v17 + 152),
        *(void *)(v17 + 152) = v16,
        v18,
        uint64_t v19 = *(void **)(a1 + 32),
        (uint64_t v15 = v19[19]) != 0))
  {
    nw_array_append(v15, flow_inner);
    uint64_t v19 = *(void **)(a1 + 32);
  }
  uint64_t v20 = (void *)v19[3];
  v31[0] = MEMORY[0x1E4F143A8];
  v31[1] = v7[310];
  v31[2] = ___ZL38nw_listener_reconcile_inboxes_on_queueP22NWConcrete_nw_listener_block_invoke_209;
  v31[3] = &unk_1E524B9A0;
  BOOL v32 = v19;
  uint64_t v21 = flow_inner;
  os_log_type_t v33 = v21;
  nw_queue_context_async(v20, v31);

LABEL_15:
}

void sub_1832C4AB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  _Unwind_Resume(a1);
}

uint64_t nw_endpoint_flow_setup_channel(NWConcrete_nw_endpoint_handler *a1)
{
  uint64_t v228 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  xpc_object_t v2 = v1;
  if (!v1)
  {
    os_log_type_t v147 = __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    unint64_t v212 = "nw_endpoint_handler_get_mode";
    os_log_type_t v148 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(v227) = 16;
    LOBYTE(v210) = 0;
    if (__nwlog_fault(v148, &v227, &v210))
    {
      if (v227 == 17)
      {
        __int16 v149 = __nwlog_obj();
        os_log_type_t v150 = v227;
        if (os_log_type_enabled(v149, (os_log_type_t)v227))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          unint64_t v212 = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_1830D4000, v149, v150, "%{public}s called with null handler", buf, 0xCu);
        }
      }
      else if ((_BYTE)v210)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __int16 v149 = __nwlog_obj();
        os_log_type_t v152 = v227;
        BOOL v153 = os_log_type_enabled(v149, (os_log_type_t)v227);
        if (backtrace_string)
        {
          if (v153)
          {
            *(_DWORD *)tcp_info buf = 136446466;
            unint64_t v212 = "nw_endpoint_handler_get_mode";
            __int16 v213 = 2082;
            unint64_t v214 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v149, v152, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_176;
        }
        if (v153)
        {
          *(_DWORD *)tcp_info buf = 136446210;
          unint64_t v212 = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_1830D4000, v149, v152, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __int16 v149 = __nwlog_obj();
        os_log_type_t v154 = v227;
        if (os_log_type_enabled(v149, (os_log_type_t)v227))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          unint64_t v212 = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_1830D4000, v149, v154, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_176:
    if (v148) {
      free(v148);
    }
    unsigned int mode = 0;
    xpc_object_t v2 = 0;
LABEL_179:
    os_log_type_t v146 = v2;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v155 = (id)gLogObj;
    if (mode > 5) {
      __int16 v156 = "unknown-mode";
    }
    else {
      __int16 v156 = off_1E523FB08[mode];
    }
    *(_DWORD *)tcp_info buf = 136446722;
    unint64_t v212 = "nw_endpoint_flow_setup_channel";
    __int16 v213 = 2082;
    unint64_t v214 = (char *)v156;
    __int16 v215 = 2082;
    unint64_t v216 = "flow";
    char v157 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(v227) = 16;
    LOBYTE(v210) = 0;
    if (__nwlog_fault(v157, &v227, &v210))
    {
      if (v227 == 17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v158 = (id)gLogObj;
        os_log_type_t v159 = v227;
        if (os_log_type_enabled(v158, (os_log_type_t)v227))
        {
          if (mode > 5) {
            __int16 v160 = "unknown-mode";
          }
          else {
            __int16 v160 = off_1E523FB08[mode];
          }
          *(_DWORD *)tcp_info buf = 136446722;
          unint64_t v212 = "nw_endpoint_flow_setup_channel";
          __int16 v213 = 2082;
          unint64_t v214 = (char *)v160;
          __int16 v215 = 2082;
          unint64_t v216 = "flow";
          _os_log_impl(&dword_1830D4000, v158, v159, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
        }
      }
      else if ((_BYTE)v210)
      {
        __int16 v161 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v158 = (id)gLogObj;
        os_log_type_t v162 = v227;
        BOOL v163 = os_log_type_enabled(v158, (os_log_type_t)v227);
        if (v161)
        {
          if (v163)
          {
            if (mode > 5) {
              int v164 = "unknown-mode";
            }
            else {
              int v164 = off_1E523FB08[mode];
            }
            *(_DWORD *)tcp_info buf = 136446978;
            unint64_t v212 = "nw_endpoint_flow_setup_channel";
            __int16 v213 = 2082;
            unint64_t v214 = (char *)v164;
            __int16 v215 = 2082;
            unint64_t v216 = "flow";
            __int16 v217 = 2082;
            BOOL v218 = v161;
            _os_log_impl(&dword_1830D4000, v158, v162, "%{public}s Handler is in mode %{public}s, expected %{public}s, dumping backtrace:%{public}s", buf, 0x2Au);
          }

          free(v161);
          if (!v157) {
            goto LABEL_213;
          }
          goto LABEL_212;
        }
        if (v163)
        {
          if (mode > 5) {
            id v167 = "unknown-mode";
          }
          else {
            id v167 = off_1E523FB08[mode];
          }
          *(_DWORD *)tcp_info buf = 136446722;
          unint64_t v212 = "nw_endpoint_flow_setup_channel";
          __int16 v213 = 2082;
          unint64_t v214 = (char *)v167;
          __int16 v215 = 2082;
          unint64_t v216 = "flow";
          _os_log_impl(&dword_1830D4000, v158, v162, "%{public}s Handler is in mode %{public}s, expected %{public}s, no backtrace", buf, 0x20u);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v158 = (id)gLogObj;
        os_log_type_t v165 = v227;
        if (os_log_type_enabled(v158, (os_log_type_t)v227))
        {
          if (mode > 5) {
            char v166 = "unknown-mode";
          }
          else {
            char v166 = off_1E523FB08[mode];
          }
          *(_DWORD *)tcp_info buf = 136446722;
          unint64_t v212 = "nw_endpoint_flow_setup_channel";
          __int16 v213 = 2082;
          unint64_t v214 = (char *)v166;
          __int16 v215 = 2082;
          unint64_t v216 = "flow";
          _os_log_impl(&dword_1830D4000, v158, v165, "%{public}s Handler is in mode %{public}s, expected %{public}s, backtrace limit exceeded", buf, 0x20u);
        }
      }
    }
    if (!v157)
    {
LABEL_213:
      uint64_t v110 = 0;
      goto LABEL_214;
    }
LABEL_212:
    free(v157);
    goto LABEL_213;
  }
  unsigned int mode = v1->mode;

  if (mode != 2) {
    goto LABEL_179;
  }
  os_log_type_t v206 = v2;
  os_log_type_t v4 = nw_endpoint_handler_copy_flow(v2);
  if (_nw_signposts_once != -1) {
    dispatch_once(&_nw_signposts_once, &__block_literal_global_81595);
  }
  if (_nw_signposts_enabled && kdebug_is_enabled()) {
    kdebug_trace();
  }
  if ((*((unsigned char *)v4 + 33) & 0x40) == 0)
  {
    id v5 = v2;
    char v6 = *((unsigned char *)v5 + 268);

    if ((v6 & 0x20) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      os_log_type_t v7 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        os_log_type_t v8 = v5;

        BOOL v9 = v8;
        char v10 = *((unsigned char *)v5 + 268);

        if (v10) {
          uint64_t v11 = "dry-run ";
        }
        else {
          uint64_t v11 = "";
        }
        os_log_type_t v204 = v4;
        nw_endpoint_t v12 = nw_endpoint_handler_copy_endpoint(v9);
        logging_description = nw_endpoint_get_logging_description(v12);
        id_str = v8->id_str;
        uint64_t v15 = v9;
        BOOL v16 = v15;
        uint64_t v17 = v15[30];
        if (v17 > 5) {
          __int16 v18 = "unknown-state";
        }
        else {
          __int16 v18 = off_1E523FB38[v17];
        }

        int v52 = v16;
        char v53 = v52;
        nw_endpoint_t v54 = "path";
        switch(v206->mode)
        {
          case 0:
            break;
          case 1:
            nw_endpoint_t v54 = "resolver";
            break;
          case 2:
            nw_endpoint_t v54 = nw_endpoint_flow_mode_string(v52[31]);
            break;
          case 3:
            nw_endpoint_t v54 = "proxy";
            break;
          case 4:
            nw_endpoint_t v54 = "fallback";
            break;
          case 5:
            nw_endpoint_t v54 = "transform";
            break;
          default:
            nw_endpoint_t v54 = "unknown-mode";
            break;
        }

        id v108 = v53;
        os_unfair_lock_lock((os_unfair_lock_t)v108 + 28);
        os_log_type_t v109 = v108[8];
        os_unfair_lock_unlock((os_unfair_lock_t)v108 + 28);

        *(_DWORD *)tcp_info buf = 136447746;
        unint64_t v212 = "nw_endpoint_flow_setup_channel";
        __int16 v213 = 2082;
        unint64_t v214 = id_str;
        __int16 v215 = 2082;
        unint64_t v216 = v11;
        __int16 v217 = 2082;
        BOOL v218 = (void *)logging_description;
        __int16 v219 = 2082;
        unint64_t v220 = v18;
        __int16 v221 = 2082;
        BOOL v222 = v54;
        __int16 v223 = 2114;
        nw_endpoint_t v224 = v109;
        _os_log_impl(&dword_1830D4000, v7, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] is not a channel flow", buf, 0x48u);

        os_log_type_t v4 = v204;
      }
    }
    uint64_t v110 = 0;
    goto LABEL_157;
  }
  long long v227 = 0uLL;
  int v209 = 0;
  uint64_t v19 = v2;
  p_lock = &v19->lock;
  os_unfair_lock_lock(&v19->lock);
  uint64_t v21 = v19->current_path;
  os_unfair_lock_unlock(&v19->lock);

  uint64_t v22 = (NWConcrete_nw_path_flow_registration *)*((void *)v4 + 104);
  int v205 = v21;
  if (!v22)
  {
    if (*((void *)v4 + 113)) {
      goto LABEL_31;
    }
    v19->event = (nw_endpoint_handler_event_s)65539;
    nw_endpoint_handler_report(v19, 0, &v19->event.domain, 0);
    BOOL v208 = 0;
    long long v210 = 0uLL;
    nw_path_get_nexus_agent_uuid_check_assertion(v21, &v210, &v208);
    if (v208
      && !nw_path_agent_action(v21, (const unsigned __int8 *)&v210, 131)
      && (nw_endpoint_handler_get_logging_disabled(v19) & 1) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      char v65 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v65, OS_LOG_TYPE_ERROR))
      {
        id_string = nw_endpoint_handler_get_id_string(v19);
        long long v67 = nw_endpoint_handler_dry_run_string(v19);
        nw_endpoint_t v68 = nw_endpoint_handler_copy_endpoint(v19);
        BOOL v69 = nw_endpoint_get_logging_description(v68);
        __int16 v70 = nw_endpoint_handler_state_string(v19);
        uint64_t v71 = nw_endpoint_handler_mode_string(v19);
        __int16 v72 = (OS_nw_path *)nw_endpoint_handler_copy_current_path(v19);
        *(_DWORD *)tcp_info buf = 136447746;
        unint64_t v212 = "nw_endpoint_flow_setup_channel";
        __int16 v213 = 2082;
        unint64_t v214 = (char *)id_string;
        __int16 v215 = 2082;
        unint64_t v216 = v67;
        __int16 v217 = 2082;
        BOOL v218 = (void *)v69;
        __int16 v219 = 2082;
        unint64_t v220 = v70;
        __int16 v221 = 2082;
        BOOL v222 = v71;
        __int16 v223 = 2114;
        nw_endpoint_t v224 = v72;
        _os_log_impl(&dword_1830D4000, v65, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] failed to assert nexus agent", buf, 0x48u);
      }
    }
    int v73 = v19;
    os_log_type_t v74 = (void **)v73[7];

    int v207 = 0;
    if (v74)
    {
      BOOL v75 = nw_path_evaluator_create_flow_inner(v74[3], 1, 1, 0, 0, &v210, 0, 0, &v207);
      os_log_type_t v76 = (void *)*((void *)v4 + 104);
      *((void *)v4 + 104) = v75;
    }
    if (!*((void *)v4 + 104))
    {
      if ((nw_endpoint_handler_get_logging_disabled(v73) & 1) == 0)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        os_log_type_t v111 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v111, OS_LOG_TYPE_ERROR))
        {
          unint64_t v112 = nw_endpoint_handler_get_id_string(v73);
          os_log_type_t v113 = nw_endpoint_handler_dry_run_string(v73);
          nw_endpoint_t v203 = nw_endpoint_handler_copy_endpoint(v73);
          BOOL v114 = nw_endpoint_get_logging_description(v203);
          os_log_type_t v115 = nw_endpoint_handler_state_string(v73);
          BOOL v116 = nw_endpoint_handler_mode_string(v73);
          os_log_type_t v117 = (OS_nw_path *)nw_endpoint_handler_copy_current_path(v73);
          *(_DWORD *)tcp_info buf = 136447746;
          unint64_t v212 = "nw_endpoint_flow_setup_channel";
          __int16 v213 = 2082;
          unint64_t v214 = (char *)v112;
          __int16 v215 = 2082;
          unint64_t v216 = v113;
          __int16 v217 = 2082;
          BOOL v218 = (void *)v114;
          __int16 v219 = 2082;
          unint64_t v220 = v115;
          __int16 v221 = 2082;
          BOOL v222 = v116;
          __int16 v223 = 2114;
          nw_endpoint_t v224 = v117;
          _os_log_impl(&dword_1830D4000, v111, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] failed to request add nexus flow", buf, 0x48u);
        }
      }
      if (v207 && !*((void *)v4 + 109))
      {
        posix_int error = nw_error_create_posix_error(v207);
        id v119 = (void *)*((void *)v4 + 109);
        *((void *)v4 + 109) = posix_error;
      }
      nw_endpoint_flow_failed_with_error(v73, 1, 0);

      goto LABEL_113;
    }
    if (nw_endpoint_handler_get_minimize_logging(v73))
    {
      if (nw_endpoint_handler_get_logging_disabled(v73)) {
        goto LABEL_71;
      }
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      os_log_type_t v79 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v79, OS_LOG_TYPE_DEBUG))
      {
        os_log_type_t v183 = nw_endpoint_handler_get_id_string(v73);
        unint64_t v184 = nw_endpoint_handler_dry_run_string(v73);
        nw_endpoint_t v185 = nw_endpoint_handler_copy_endpoint(v73);
        BOOL v186 = nw_endpoint_get_logging_description(v185);
        int v187 = nw_endpoint_handler_state_string(v73);
        v188 = nw_endpoint_handler_mode_string(v73);
        id v189 = (OS_nw_path *)nw_endpoint_handler_copy_current_path(v73);
        *(_DWORD *)tcp_info buf = 136447746;
        unint64_t v212 = "nw_endpoint_flow_setup_channel";
        __int16 v213 = 2082;
        unint64_t v214 = (char *)v183;
        __int16 v215 = 2082;
        unint64_t v216 = v184;
        __int16 v217 = 2082;
        BOOL v218 = (void *)v186;
        __int16 v219 = 2082;
        unint64_t v220 = v187;
        __int16 v221 = 2082;
        BOOL v222 = v188;
        __int16 v223 = 2114;
        nw_endpoint_t v224 = v189;
        _os_log_impl(&dword_1830D4000, v79, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] requested nexus flow", buf, 0x48u);
      }
    }
    else
    {
      BOOL v77 = v73;
      BOOL v78 = (*((unsigned char *)v77 + 268) & 0x20) == 0;

      if (!v78)
      {
LABEL_71:
        nw_association_force_update(v74, *((void **)v4 + 104));

        goto LABEL_124;
      }
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      os_log_type_t v79 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v79, OS_LOG_TYPE_INFO))
      {
        uint64_t v80 = nw_endpoint_handler_get_id_string(v77);
        os_log_type_t v81 = nw_endpoint_handler_dry_run_string(v77);
        nw_endpoint_t v82 = nw_endpoint_handler_copy_endpoint(v77);
        os_log_type_t v83 = v74;
        BOOL v84 = nw_endpoint_get_logging_description(v82);
        os_log_type_t v85 = nw_endpoint_handler_state_string(v77);
        os_log_type_t v86 = nw_endpoint_handler_mode_string(v77);
        BOOL v87 = (OS_nw_path *)nw_endpoint_handler_copy_current_path(v77);
        *(_DWORD *)tcp_info buf = 136447746;
        unint64_t v212 = "nw_endpoint_flow_setup_channel";
        __int16 v213 = 2082;
        unint64_t v214 = (char *)v80;
        __int16 v215 = 2082;
        unint64_t v216 = v81;
        __int16 v217 = 2082;
        BOOL v218 = (void *)v84;
        __int16 v219 = 2082;
        unint64_t v220 = v85;
        __int16 v221 = 2082;
        BOOL v222 = v86;
        __int16 v223 = 2114;
        nw_endpoint_t v224 = v87;
        _os_log_impl(&dword_1830D4000, v79, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] requested nexus flow", buf, 0x48u);

        os_log_type_t v74 = v83;
      }
    }

    goto LABEL_71;
  }
  BOOL nexus_instance = nw_path_flow_registration_get_nexus_instance(v21, v22, &v227, &v209);
  int can_use_nexus = nw_path_flow_registration_can_use_nexus(v21, *((NWConcrete_nw_path_flow_registration **)v4 + 104));
  if (*((void *)v4 + 113))
  {
    if (nexus_instance & can_use_nexus)
    {
      os_log_type_t v25 = v19;
      BOOL v26 = (*((unsigned char *)v25 + 268) & 0x20) == 0;

      if (v26)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        int v27 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
        {
          os_log_type_t v28 = v25;

          BOOL v29 = v28;
          BOOL v30 = (*((unsigned char *)v25 + 268) & 1) == 0;

          if (v30) {
            os_log_type_t v31 = "";
          }
          else {
            os_log_type_t v31 = "dry-run ";
          }
          nw_endpoint_t v32 = nw_endpoint_handler_copy_endpoint(v29);
          os_log_type_t v33 = nw_endpoint_get_logging_description(v32);
          os_log_type_t v199 = v31;
          char v34 = v29;
          os_log_type_t v35 = v34;
          uint64_t v36 = v34[30];
          long long v37 = v33;
          if (v36 > 5) {
            os_log_type_t v38 = "unknown-state";
          }
          else {
            os_log_type_t v38 = off_1E523FB38[v36];
          }
          BOOL v197 = v38;

          uint64_t v120 = v35;
          nw_endpoint_t v121 = v120;
          os_log_type_t v122 = "path";
          switch(v206->mode)
          {
            case 0:
              break;
            case 1:
              os_log_type_t v122 = "resolver";
              break;
            case 2:
              os_log_type_t v122 = nw_endpoint_flow_mode_string(v120[31]);
              break;
            case 3:
              os_log_type_t v122 = "proxy";
              break;
            case 4:
              os_log_type_t v122 = "fallback";
              break;
            case 5:
              os_log_type_t v122 = "transform";
              break;
            default:
              os_log_type_t v122 = "unknown-mode";
              break;
          }

          BOOL v144 = v121;
          os_unfair_lock_lock(p_lock);
          os_log_type_t v145 = v19->current_path;
          os_unfair_lock_unlock(p_lock);

          *(_DWORD *)tcp_info buf = 136447746;
          unint64_t v212 = "nw_endpoint_flow_setup_channel";
          __int16 v213 = 2082;
          unint64_t v214 = v28->id_str;
          __int16 v215 = 2082;
          unint64_t v216 = v199;
          __int16 v217 = 2082;
          BOOL v218 = (void *)v37;
          __int16 v219 = 2082;
          unint64_t v220 = v197;
          __int16 v221 = 2082;
          BOOL v222 = v122;
          __int16 v223 = 2114;
          nw_endpoint_t v224 = v145;
          _os_log_impl(&dword_1830D4000, v27, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] already set up", buf, 0x48u);
        }
      }
      uint64_t v21 = v205;
      nw_endpoint_flow_setup_protocols(v25, 0, 0, (*((unsigned __int8 *)v4 + 32) >> 4) & 1, 0);
      uint64_t v142 = &unk_1EB267000;
      os_log_type_t v143 = &unk_1EB267000;
      goto LABEL_151;
    }
    if (nexus_instance)
    {
      if (nw_endpoint_handler_get_minimize_logging(v19))
      {
        if (nw_endpoint_handler_get_logging_disabled(v19))
        {
LABEL_139:
          uint64_t v21 = v205;
          uint64_t v142 = (unsigned char *)&unk_1EB267000;
          os_log_type_t v143 = (void *)&unk_1EB267000;
          if ((nw_path_allows_multipath(v205) & 1) == 0 && (*((unsigned char *)v4 + 32) & 1) != 0
            || (*((unsigned char *)v4 + 33) & 8) == 0)
          {
            nw_endpoint_flow_failed_with_error(v19, 1, 0);
          }
LABEL_151:
          if (v143[311] == -1)
          {
            if (v142[2432]) {
              goto LABEL_153;
            }
          }
          else
          {
            dispatch_once(&_nw_signposts_once, &__block_literal_global_81595);
            if (v142[2432])
            {
LABEL_153:
              if (kdebug_is_enabled()) {
                kdebug_trace();
              }
            }
          }
          uint64_t v110 = 0;
          goto LABEL_156;
        }
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        __int16 v57 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v57, OS_LOG_TYPE_DEBUG))
        {
          nw_endpoint_t v176 = nw_endpoint_handler_get_id_string(v19);
          unint64_t v177 = nw_endpoint_handler_dry_run_string(v19);
          nw_endpoint_t v178 = nw_endpoint_handler_copy_endpoint(v19);
          uint64_t v179 = nw_endpoint_get_logging_description(v178);
          id v180 = nw_endpoint_handler_state_string(v19);
          int v181 = nw_endpoint_handler_mode_string(v19);
          id v182 = (OS_nw_path *)nw_endpoint_handler_copy_current_path(v19);
          *(_DWORD *)tcp_info buf = 136447746;
          unint64_t v212 = "nw_endpoint_flow_setup_channel";
          __int16 v213 = 2082;
          unint64_t v214 = (char *)v176;
          __int16 v215 = 2082;
          unint64_t v216 = v177;
          __int16 v217 = 2082;
          BOOL v218 = (void *)v179;
          __int16 v219 = 2082;
          unint64_t v220 = v180;
          __int16 v221 = 2082;
          BOOL v222 = v181;
          __int16 v223 = 2114;
          nw_endpoint_t v224 = v182;
          _os_log_impl(&dword_1830D4000, v57, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] nexus no longer supported", buf, 0x48u);
        }
      }
      else
      {
        unsigned int v55 = v19;
        BOOL v56 = (*((unsigned char *)v55 + 268) & 0x20) == 0;

        if (!v56) {
          goto LABEL_139;
        }
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        __int16 v57 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v57, OS_LOG_TYPE_INFO))
        {
          __int16 v58 = nw_endpoint_handler_get_id_string(v55);
          int v59 = nw_endpoint_handler_dry_run_string(v55);
          nw_endpoint_t v60 = nw_endpoint_handler_copy_endpoint(v55);
          uint64_t v61 = nw_endpoint_get_logging_description(v60);
          BOOL v62 = nw_endpoint_handler_state_string(v55);
          os_log_type_t v63 = nw_endpoint_handler_mode_string(v55);
          os_log_type_t v64 = (OS_nw_path *)nw_endpoint_handler_copy_current_path(v55);
          *(_DWORD *)tcp_info buf = 136447746;
          unint64_t v212 = "nw_endpoint_flow_setup_channel";
          __int16 v213 = 2082;
          unint64_t v214 = (char *)v58;
          __int16 v215 = 2082;
          unint64_t v216 = v59;
          __int16 v217 = 2082;
          BOOL v218 = (void *)v61;
          __int16 v219 = 2082;
          unint64_t v220 = v62;
          __int16 v221 = 2082;
          BOOL v222 = v63;
          __int16 v223 = 2114;
          nw_endpoint_t v224 = v64;
          _os_log_impl(&dword_1830D4000, v57, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] nexus no longer supported", buf, 0x48u);
        }
      }
LABEL_138:

      goto LABEL_139;
    }
    if (v209)
    {
      __int16 v57 = nw_error_create_posix_error(v209);
      if (v57)
      {
        os_log_type_t v97 = v19;
        BOOL v98 = (*((unsigned char *)v97 + 268) & 0x20) == 0;

        if (v98)
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          os_log_type_t v99 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v99, OS_LOG_TYPE_ERROR))
          {
            BOOL v100 = nw_endpoint_handler_get_id_string(v97);
            os_log_type_t v101 = nw_endpoint_handler_dry_run_string(v97);
            nw_endpoint_t v201 = nw_endpoint_handler_copy_endpoint(v97);
            os_log_type_t v102 = nw_endpoint_get_logging_description(v201);
            nw_endpoint_t v103 = nw_endpoint_handler_state_string(v97);
            BOOL v104 = nw_endpoint_handler_mode_string(v97);
            unint64_t v105 = (OS_nw_path *)nw_endpoint_handler_copy_current_path(v97);
            *(_DWORD *)tcp_info buf = 136448002;
            unint64_t v212 = "nw_endpoint_flow_setup_channel";
            __int16 v213 = 2082;
            unint64_t v214 = (char *)v100;
            __int16 v215 = 2082;
            unint64_t v216 = v101;
            __int16 v217 = 2082;
            BOOL v218 = (void *)v102;
            __int16 v219 = 2082;
            unint64_t v220 = v103;
            __int16 v221 = 2082;
            BOOL v222 = v104;
            __int16 v223 = 2114;
            nw_endpoint_t v224 = v105;
            __int16 v225 = 2112;
            unint64_t v226 = v57;
            _os_log_impl(&dword_1830D4000, v99, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] lost nexus assignment, error %@", buf, 0x52u);
          }
        }
        if (*((void *)v4 + 109)) {
          goto LABEL_138;
        }
        __int16 v57 = v57;
        char v41 = *((void *)v4 + 109);
        *((void *)v4 + 109) = v57;
        goto LABEL_137;
      }
    }
LABEL_31:
    if (nw_endpoint_handler_get_minimize_logging(v19))
    {
      if ((nw_endpoint_handler_get_logging_disabled(v19) & 1) == 0)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        char v41 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v41, OS_LOG_TYPE_DEBUG))
        {
          __int16 v169 = nw_endpoint_handler_get_id_string(v19);
          BOOL v170 = nw_endpoint_handler_dry_run_string(v19);
          nw_endpoint_t v171 = nw_endpoint_handler_copy_endpoint(v19);
          uint64_t v172 = nw_endpoint_get_logging_description(v171);
          char v173 = nw_endpoint_handler_state_string(v19);
          BOOL v174 = nw_endpoint_handler_mode_string(v19);
          BOOL v175 = (OS_nw_path *)nw_endpoint_handler_copy_current_path(v19);
          *(_DWORD *)tcp_info buf = 136447746;
          unint64_t v212 = "nw_endpoint_flow_setup_channel";
          __int16 v213 = 2082;
          unint64_t v214 = (char *)v169;
          __int16 v215 = 2082;
          unint64_t v216 = v170;
          __int16 v217 = 2082;
          BOOL v218 = (void *)v172;
          __int16 v219 = 2082;
          unint64_t v220 = v173;
          __int16 v221 = 2082;
          BOOL v222 = v174;
          __int16 v223 = 2114;
          nw_endpoint_t v224 = v175;
          _os_log_impl(&dword_1830D4000, v41, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] lost nexus assignment", buf, 0x48u);
        }
        goto LABEL_136;
      }
    }
    else
    {
      os_log_type_t v39 = v19;
      BOOL v40 = (*((unsigned char *)v39 + 268) & 0x20) == 0;

      if (v40)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        char v41 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v41, OS_LOG_TYPE_INFO))
        {
          uint64_t v42 = v39;

          os_log_type_t v43 = v42;
          BOOL v44 = (*((unsigned char *)v39 + 268) & 1) == 0;

          if (v44) {
            uint64_t v45 = "";
          }
          else {
            uint64_t v45 = "dry-run ";
          }
          nw_endpoint_t v46 = nw_endpoint_handler_copy_endpoint(v43);
          int v47 = nw_endpoint_get_logging_description(v46);
          os_log_type_t v48 = v43;
          nw_endpoint_t v49 = v48;
          uint64_t v50 = v48[30];
          if (v50 > 5) {
            uint64_t v51 = "unknown-state";
          }
          else {
            uint64_t v51 = off_1E523FB38[v50];
          }
          unint64_t v202 = v51;

          os_log_type_t v106 = v49;
          id v107 = "path";
          switch(v206->mode)
          {
            case 0:
              break;
            case 1:
              id v107 = "resolver";
              break;
            case 2:
              id v107 = nw_endpoint_flow_mode_string(v106[31]);
              break;
            case 3:
              id v107 = "proxy";
              break;
            case 4:
              id v107 = "fallback";
              break;
            case 5:
              id v107 = "transform";
              break;
            default:
              id v107 = "unknown-mode";
              break;
          }
          os_log_type_t v198 = v107;

          id v133 = v42;
          nw_endpoint_t v134 = v41;
          nw_endpoint_t v135 = v46;
          nw_endpoint_t v136 = v45;
          os_log_type_t v137 = v47;
          uint64_t v138 = v106;
          os_unfair_lock_lock(p_lock);
          int v139 = v19->current_path;
          os_unfair_lock_unlock(p_lock);

          os_log_type_t v140 = v137;
          nw_endpoint_t v141 = v135;
          char v41 = v134;
          *(_DWORD *)tcp_info buf = 136447746;
          unint64_t v212 = "nw_endpoint_flow_setup_channel";
          __int16 v213 = 2082;
          unint64_t v214 = v133->id_str;
          __int16 v215 = 2082;
          unint64_t v216 = v136;
          __int16 v217 = 2082;
          BOOL v218 = (void *)v140;
          __int16 v219 = 2082;
          unint64_t v220 = v202;
          __int16 v221 = 2082;
          BOOL v222 = v198;
          __int16 v223 = 2114;
          nw_endpoint_t v224 = v139;
          _os_log_impl(&dword_1830D4000, v134, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] lost nexus assignment", buf, 0x48u);
        }
LABEL_136:
        __int16 v57 = 0;
LABEL_137:

        goto LABEL_138;
      }
    }
    __int16 v57 = 0;
    goto LABEL_138;
  }
  if (nexus_instance)
  {
    v19->event = (nw_endpoint_handler_event_s)131075;
    nw_endpoint_handler_report(v19, 0, &v19->event.domain, 0);
    nw_endpoint_flow_setup_protocols(v19, 0, 0, (*((unsigned __int8 *)v4 + 32) >> 4) & 1, 0);
    goto LABEL_125;
  }
  if (!v209)
  {
    int minimize_logging = nw_endpoint_handler_get_minimize_logging(v19);
    char logging_disabled = nw_endpoint_handler_get_logging_disabled(v19);
    if (minimize_logging)
    {
      if (logging_disabled)
      {
LABEL_125:
        if (_nw_signposts_once == -1)
        {
          if (_nw_signposts_enabled) {
            goto LABEL_127;
          }
        }
        else
        {
          dispatch_once(&_nw_signposts_once, &__block_literal_global_81595);
          if (_nw_signposts_enabled)
          {
LABEL_127:
            if (kdebug_is_enabled()) {
              kdebug_trace();
            }
          }
        }
        uint64_t v110 = 1;
        goto LABEL_156;
      }
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      os_log_type_t v125 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v125, OS_LOG_TYPE_DEBUG))
      {
        unint64_t v190 = nw_endpoint_handler_get_id_string(v19);
        v191 = nw_endpoint_handler_dry_run_string(v19);
        nw_endpoint_t v192 = nw_endpoint_handler_copy_endpoint(v19);
        os_log_type_t v193 = nw_endpoint_get_logging_description(v192);
        BOOL v194 = nw_endpoint_handler_state_string(v19);
        unint64_t v195 = nw_endpoint_handler_mode_string(v19);
        os_log_type_t v196 = (OS_nw_path *)nw_endpoint_handler_copy_current_path(v19);
        *(_DWORD *)tcp_info buf = 136447746;
        unint64_t v212 = "nw_endpoint_flow_setup_channel";
        __int16 v213 = 2082;
        unint64_t v214 = (char *)v190;
        __int16 v215 = 2082;
        unint64_t v216 = v191;
        __int16 v217 = 2082;
        BOOL v218 = (void *)v193;
        __int16 v219 = 2082;
        unint64_t v220 = v194;
        __int16 v221 = 2082;
        BOOL v222 = v195;
        __int16 v223 = 2114;
        nw_endpoint_t v224 = v196;
        _os_log_impl(&dword_1830D4000, v125, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] already requested nexus, wait", buf, 0x48u);
      }
    }
    else
    {
      if (logging_disabled) {
        goto LABEL_125;
      }
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      os_log_type_t v125 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v125, OS_LOG_TYPE_INFO))
      {
        BOOL v126 = nw_endpoint_handler_get_id_string(v19);
        os_log_type_t v127 = nw_endpoint_handler_dry_run_string(v19);
        nw_endpoint_t v128 = nw_endpoint_handler_copy_endpoint(v19);
        BOOL v129 = nw_endpoint_get_logging_description(v128);
        int v130 = nw_endpoint_handler_state_string(v19);
        os_log_type_t v131 = nw_endpoint_handler_mode_string(v19);
        nw_endpoint_t v132 = (OS_nw_path *)nw_endpoint_handler_copy_current_path(v19);
        *(_DWORD *)tcp_info buf = 136447746;
        unint64_t v212 = "nw_endpoint_flow_setup_channel";
        __int16 v213 = 2082;
        unint64_t v214 = (char *)v126;
        __int16 v215 = 2082;
        unint64_t v216 = v127;
        __int16 v217 = 2082;
        BOOL v218 = (void *)v129;
        __int16 v219 = 2082;
        unint64_t v220 = v130;
        __int16 v221 = 2082;
        BOOL v222 = v131;
        __int16 v223 = 2114;
        nw_endpoint_t v224 = v132;
        _os_log_impl(&dword_1830D4000, v125, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] already requested nexus, wait", buf, 0x48u);
      }
    }

LABEL_124:
    uint64_t v21 = v205;
    goto LABEL_125;
  }
  nw_endpoint_t v88 = nw_error_create_posix_error(v209);
  if ((nw_endpoint_handler_get_logging_disabled(v19) & 1) == 0)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
    }
    os_log_type_t v89 = (id)gconnectionLogObj;
    if (os_log_type_enabled(v89, OS_LOG_TYPE_ERROR))
    {
      os_log_type_t v200 = v88;
      uint64_t v90 = nw_endpoint_handler_get_id_string(v19);
      __int16 v91 = nw_endpoint_handler_dry_run_string(v19);
      nw_endpoint_t v92 = nw_endpoint_handler_copy_endpoint(v19);
      __int16 v93 = nw_endpoint_get_logging_description(v92);
      id v94 = nw_endpoint_handler_state_string(v19);
      uint64_t v95 = nw_endpoint_handler_mode_string(v19);
      id v96 = (OS_nw_path *)nw_endpoint_handler_copy_current_path(v19);
      *(_DWORD *)tcp_info buf = 136448002;
      unint64_t v212 = "nw_endpoint_flow_setup_channel";
      __int16 v213 = 2082;
      unint64_t v214 = (char *)v90;
      __int16 v215 = 2082;
      unint64_t v216 = v91;
      __int16 v217 = 2082;
      BOOL v218 = (void *)v93;
      __int16 v219 = 2082;
      unint64_t v220 = v94;
      __int16 v221 = 2082;
      BOOL v222 = v95;
      __int16 v223 = 2114;
      nw_endpoint_t v224 = v96;
      __int16 v225 = 2112;
      nw_endpoint_t v88 = v200;
      unint64_t v226 = v200;
      _os_log_impl(&dword_1830D4000, v89, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] nexus assignment error %@", buf, 0x52u);
    }
  }
  if (!*((void *)v4 + 109)) {
    objc_storeStrong((id *)v4 + 109, v88);
  }
  nw_endpoint_flow_failed_with_error(v19, 1, 0);

LABEL_113:
  uint64_t v110 = 0;
  uint64_t v21 = v205;
LABEL_156:

LABEL_157:
  os_log_type_t v146 = v206;
LABEL_214:

  return v110;
}

void sub_1832C68D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

NWConcrete_nw_path_flow_registration *nw_path_evaluator_create_flow_inner(void *a1, int a2, int a3, int a4, int a5, _OWORD *a6, void *a7, int a8, _DWORD *a9)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  BOOL v16 = a1;
  id v17 = a7;
  if (!v16)
  {
    BOOL v44 = __nwlog_obj();
    *(_DWORD *)out = 136446210;
    *(void *)&out[4] = "nw_path_evaluator_create_flow_inner";
    uint64_t v45 = (char *)_os_log_send_and_compose_impl();

    buf[0] = 16;
    char v55 = 0;
    if (__nwlog_fault(v45, buf, &v55))
    {
      if (buf[0] == 17)
      {
        nw_endpoint_t v46 = __nwlog_obj();
        os_log_type_t v47 = buf[0];
        if (os_log_type_enabled(v46, (os_log_type_t)buf[0]))
        {
          *(_DWORD *)out = 136446210;
          *(void *)&out[4] = "nw_path_evaluator_create_flow_inner";
          _os_log_impl(&dword_1830D4000, v46, v47, "%{public}s called with null evaluator", out, 0xCu);
        }
      }
      else if (v55)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        nw_endpoint_t v46 = __nwlog_obj();
        os_log_type_t v49 = buf[0];
        BOOL v50 = os_log_type_enabled(v46, (os_log_type_t)buf[0]);
        if (backtrace_string)
        {
          if (v50)
          {
            *(_DWORD *)out = 136446466;
            *(void *)&out[4] = "nw_path_evaluator_create_flow_inner";
            *(_WORD *)&out[12] = 2082;
            *(void *)&out[14] = backtrace_string;
            _os_log_impl(&dword_1830D4000, v46, v49, "%{public}s called with null evaluator, dumping backtrace:%{public}s", out, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_78;
        }
        if (v50)
        {
          *(_DWORD *)out = 136446210;
          *(void *)&out[4] = "nw_path_evaluator_create_flow_inner";
          _os_log_impl(&dword_1830D4000, v46, v49, "%{public}s called with null evaluator, no backtrace", out, 0xCu);
        }
      }
      else
      {
        nw_endpoint_t v46 = __nwlog_obj();
        os_log_type_t v52 = buf[0];
        if (os_log_type_enabled(v46, (os_log_type_t)buf[0]))
        {
          *(_DWORD *)out = 136446210;
          *(void *)&out[4] = "nw_path_evaluator_create_flow_inner";
          _os_log_impl(&dword_1830D4000, v46, v52, "%{public}s called with null evaluator, backtrace limit exceeded", out, 0xCu);
        }
      }
    }
LABEL_78:
    if (v45) {
      free(v45);
    }
    goto LABEL_80;
  }
  id v18 = nw_parameters_copy_context(*((void **)v16 + 1));
  nw_context_assert_queue(v18);

  if (nw_path_endpoint_is_always_satisfied(*((void **)v16 + 2)))
  {
    *(void *)out = 0;
    *(void *)&void out[8] = 0;
    uuid_generate_random(out);
    uint64_t v19 = nw_path_flow_registration_create((NWConcrete_nw_path_evaluator *)v16, out);
    uint64_t v20 = v19;
    if (v19) {
      *((unsigned char *)v19 + 148) |= 1u;
    }
    goto LABEL_81;
  }
  id v21 = nw_parameters_copy_context(*((void **)v16 + 1));
  int v22 = nw_path_shared_necp_fd(v21);

  if (v22 < 0)
  {
LABEL_80:
    uint64_t v20 = 0;
    goto LABEL_81;
  }
  long long v62 = 0u;
  memset(v63, 0, sizeof(v63));
  long long v61 = 0u;
  memset(out, 0, sizeof(out));
  if (!a3)
  {
    int v23 = 0;
    if (!a4) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  int v23 = 1;
  LOWORD(v61) = 1;
  if (a4)
  {
LABEL_10:
    v23 |= 4u;
    LOWORD(v61) = v23;
  }
LABEL_11:
  if (!a5)
  {
    if (!a6) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  v23 |= 8u;
  LOWORD(v61) = v23;
  if (a6) {
LABEL_15:
  }
    *(_OWORD *)out = *a6;
LABEL_16:
  if (!a2)
  {
    uint64_t v25 = 36;
    if (!v17) {
      goto LABEL_38;
    }
    goto LABEL_29;
  }
  WORD1(v61) = 1;
  if (nw_parameters_get_upper_transport_protocol(*((void **)v16 + 1)) == 253)
  {
    int v24 = 3;
LABEL_19:
    DWORD1(v61) = v24;
    *((void *)&v61 + 1) = 0x9800000001;
    goto LABEL_28;
  }
  if ((nw_path_get_nexus_protocol_level(*((void **)v16 + 6)) & 0xFFFFFFFE) == 2)
  {
    int ip_protocol = a8;
    if (!a8) {
      int ip_protocol = nw_parameters_get_ip_protocol(*((void **)v16 + 1));
    }
    if (ip_protocol == 6)
    {
      int v24 = 1;
      goto LABEL_19;
    }
    if (ip_protocol == 17)
    {
      int v24 = 2;
      goto LABEL_19;
    }
  }
LABEL_28:
  uint64_t v25 = 60;
  if (!v17) {
    goto LABEL_38;
  }
LABEL_29:
  int v27 = v17;
  int v28 = [v27 type];

  if (v28 == 1)
  {
    nw_endpoint_t address = nw_endpoint_get_address(v27);
    BOOL v30 = address;
    if (address)
    {
      int sa_family = address->sa_family;
      if (sa_family == 30 || sa_family == 2)
      {
        size_t sa_len = address->sa_len;
        if (sa_len <= 0x1C)
        {
          v25 += sa_len;
          v23 |= 0x10u;
          LOWORD(v61) = v23;
          if (gLogDatapath)
          {
            os_log_t log = __nwlog_obj();
            if (os_log_type_enabled(log, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)tcp_info buf = 136446978;
              __int16 v57 = "nw_path_evaluator_create_flow_inner";
              __int16 v58 = 2112;
              *(void *)int v59 = v27;
              *(_WORD *)&v59[8] = 1024;
              *(_DWORD *)&unsigned char v59[10] = v23;
              *(_WORD *)&v59[14] = 2048;
              *(void *)&v59[16] = v25;
              _os_log_impl(&dword_1830D4000, log, OS_LOG_TYPE_DEBUG, "%{public}s Adding override endpoint %@, flags %x, length %zu", buf, 0x26u);
            }

            size_t sa_len = v30->sa_len;
          }
          uint64_t v33 = 36;
          if (a2) {
            uint64_t v33 = 60;
          }
          memcpy(&out[v33], v30, sa_len);
        }
      }
    }
  }
LABEL_38:
  if (a8)
  {
    LOWORD(v61) = v23 | 0x20;
    v63[24] = a8;
    if (gLogDatapath)
    {
      uint64_t v51 = __nwlog_obj();
      if (os_log_type_enabled(v51, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)tcp_info buf = 136446978;
        __int16 v57 = "nw_path_evaluator_create_flow_inner";
        __int16 v58 = 1024;
        *(_DWORD *)int v59 = a8;
        *(_WORD *)&v59[4] = 1024;
        *(_DWORD *)&v59[6] = v23 | 0x20;
        *(_WORD *)&unsigned char v59[10] = 2048;
        *(void *)&v59[12] = v25;
        _os_log_impl(&dword_1830D4000, v51, OS_LOG_TYPE_DEBUG, "%{public}s Adding override ip protocol %u, flags %x, length %zu", buf, 0x22u);
      }
    }
    out[v25] = a8;
  }
  if (necp_client_action())
  {
    int v34 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    os_log_type_t v35 = v16;
    os_unfair_lock_lock((os_unfair_lock_t)v16 + 24);
    uint64_t v36 = (NWConcrete_nw_parameters *)*((id *)v16 + 1);
    os_unfair_lock_unlock((os_unfair_lock_t)v16 + 24);

    long long v37 = nw_parameters_copy_description_internal(v36, 1);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v38 = (id)gLogObj;
    if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)tcp_info buf = 136446722;
      __int16 v57 = "nw_path_evaluator_create_flow_inner";
      __int16 v58 = 2112;
      *(void *)int v59 = v17;
      *(_WORD *)&v59[8] = 2080;
      *(void *)&unsigned char v59[10] = v37;
      _os_log_impl(&dword_1830D4000, v38, OS_LOG_TYPE_ERROR, "%{public}s failed NECP_CLIENT_ACTION_ADD_FLOW %@ evaluator parameters: %s", buf, 0x20u);
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v39 = (id)gLogObj;
    if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)tcp_info buf = 136446978;
      __int16 v57 = "nw_path_evaluator_create_flow_inner";
      __int16 v58 = 1042;
      *(_DWORD *)int v59 = 16;
      *(_WORD *)&v59[4] = 2098;
      *(void *)&v59[6] = v16 + 80;
      *(_WORD *)&v59[14] = 1024;
      *(_DWORD *)&v59[16] = v34;
      _os_log_impl(&dword_1830D4000, v39, OS_LOG_TYPE_ERROR, "%{public}s NECP_CLIENT_ACTION_ADD_FLOW %{public,uuid_t}.16P %{darwin.errno}d", buf, 0x22u);
    }

    if (v37) {
      free(v37);
    }
    if (a9) {
      *a9 = v34;
    }
    goto LABEL_80;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  BOOL v40 = (id)gLogObj;
  if (os_log_type_enabled(v40, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)tcp_info buf = 136447234;
    __int16 v57 = "nw_path_evaluator_create_flow_inner";
    __int16 v58 = 1042;
    *(_DWORD *)int v59 = 16;
    *(_WORD *)&v59[4] = 2098;
    *(void *)&v59[6] = &out[16];
    *(_WORD *)&v59[14] = 1042;
    *(_DWORD *)&v59[16] = 16;
    *(_WORD *)&v59[20] = 2098;
    *(void *)&v59[22] = v16 + 80;
    _os_log_impl(&dword_1830D4000, v40, OS_LOG_TYPE_DEBUG, "%{public}s Added flow %{public,uuid_t}.16P to %{public,uuid_t}.16P", buf, 0x2Cu);
  }

  char v41 = nw_path_flow_registration_create((NWConcrete_nw_path_evaluator *)v16, &out[16]);
  uint64_t v20 = v41;
  if (!v41) {
    goto LABEL_80;
  }
  char v42 = *((unsigned char *)v41 + 148);
  *((unsigned char *)v41 + 148) = v42 | 1;
  if (a3)
  {
    *((unsigned char *)v41 + 148) = v42 | 5;
    *(_OWORD *)v41->nexus_agent = *(_OWORD *)out;
  }
  if (WORD1(v61))
  {
    os_log_type_t v43 = *(_DWORD **)((char *)&v62 + 4);
    if (*(void *)((char *)&v62 + 4))
    {
      v41->flow_stats_area = *(necp_all_stats **)((char *)&v62 + 4);
      *os_log_type_t v43 = DWORD1(v61);
      v41->flow_stats_area->var0.var0.var0.var1 = DWORD2(v61);
    }
  }
LABEL_81:

  return v20;
}

void sub_1832C7338(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

NWConcrete_nw_path_flow_registration *nw_path_flow_registration_create(NWConcrete_nw_path_evaluator *a1, unsigned __int8 *a2)
{
  *(void *)&v37[13] = *MEMORY[0x1E4F143B8];
  os_log_type_t v4 = a1;
  internal = nw_path_flow_registration_create_internal();
  char v6 = internal;
  if (!internal)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v14 = (id)gLogObj;
    *(_DWORD *)tcp_info buf = 136446210;
    os_log_type_t v35 = "nw_path_flow_registration_create";
    uint64_t v15 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v32 = 0;
    if (__nwlog_fault(v15, &type, &v32))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v16 = (id)gLogObj;
        os_log_type_t v17 = type;
        if (os_log_type_enabled(v16, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          os_log_type_t v35 = "nw_path_flow_registration_create";
          _os_log_impl(&dword_1830D4000, v16, v17, "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_path_flow_registration) alloc] init] failed", buf, 0xCu);
        }
      }
      else if (v32)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v16 = (id)gLogObj;
        os_log_type_t v20 = type;
        BOOL v21 = os_log_type_enabled(v16, type);
        if (backtrace_string)
        {
          if (v21)
          {
            *(_DWORD *)tcp_info buf = 136446466;
            os_log_type_t v35 = "nw_path_flow_registration_create";
            __int16 v36 = 2082;
            *(void *)long long v37 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v16, v20, "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_path_flow_registration) alloc] init] failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          if (!v15) {
            goto LABEL_52;
          }
          goto LABEL_36;
        }
        if (v21)
        {
          *(_DWORD *)tcp_info buf = 136446210;
          os_log_type_t v35 = "nw_path_flow_registration_create";
          _os_log_impl(&dword_1830D4000, v16, v20, "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_path_flow_registration) alloc] init] failed, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v16 = (id)gLogObj;
        os_log_type_t v26 = type;
        if (os_log_type_enabled(v16, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          os_log_type_t v35 = "nw_path_flow_registration_create";
          _os_log_impl(&dword_1830D4000, v16, v26, "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_path_flow_registration) alloc] init] failed, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
    if (!v15)
    {
LABEL_52:
      BOOL v13 = 0;
      goto LABEL_53;
    }
LABEL_36:
    free(v15);
    goto LABEL_52;
  }
  *(_OWORD *)internal->registration_id = *(_OWORD *)a2;
  objc_storeStrong((id *)&internal->parent_evaluator, a1);
  os_unfair_lock_lock((os_unfair_lock_t)v4 + 24);
  unsigned int v7 = *((_DWORD *)v4 + 25);
  *((_DWORD *)v4 + 25) = v7 + 1;
  os_unfair_lock_unlock((os_unfair_lock_t)v4 + 24);
  id v8 = nw_parameters_copy_context(*((void **)v4 + 1));
  uint64_t globals_for_path = nw_context_get_globals_for_path(v8);

  char v10 = (os_unfair_lock_s *)(globals_for_path + 124);
  os_unfair_lock_lock((os_unfair_lock_t)(globals_for_path + 124));
  if (v7 > *(_DWORD *)(globals_for_path + 128)) {
    *(_DWORD *)(globals_for_path + 128) = v7;
  }
  uint64_t v11 = *(void *)(globals_for_path + 40);
  if (!v11)
  {
    uint64_t v11 = nw_hash_table_create_internal(0x11u, 0, (const void *(*)(const void *, unsigned int *))nw_flow_registration_get_key, (unsigned int (*)(const void *, unsigned int))nw_flow_registration_key_hash, (BOOL (*)(const void *, const void *, unsigned int))nw_flow_registration_matches_key, 0);
    if (v11)
    {
      *(_DWORD *)(v11 + 48) &= ~2u;
      *(void *)(globals_for_path + 40) = v11;
      goto LABEL_7;
    }
    *(void *)(globals_for_path + 40) = 0;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v22 = (id)gLogObj;
    *(_DWORD *)tcp_info buf = 136446210;
    os_log_type_t v35 = "nw_path_flow_registration_create";
    int v23 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v32 = 0;
    if (__nwlog_fault(v23, &type, &v32))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v24 = (id)gLogObj;
        os_log_type_t v25 = type;
        if (os_log_type_enabled(v24, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          os_log_type_t v35 = "nw_path_flow_registration_create";
          _os_log_impl(&dword_1830D4000, v24, v25, "%{public}s nw_hash_table_create_no_lock failed", buf, 0xCu);
        }
      }
      else if (v32)
      {
        int v27 = (char *)__nw_create_backtrace_string();
        int v24 = __nwlog_obj();
        os_log_type_t v28 = type;
        BOOL v29 = os_log_type_enabled(v24, type);
        if (v27)
        {
          if (v29)
          {
            *(_DWORD *)tcp_info buf = 136446466;
            os_log_type_t v35 = "nw_path_flow_registration_create";
            __int16 v36 = 2082;
            *(void *)long long v37 = v27;
            _os_log_impl(&dword_1830D4000, v24, v28, "%{public}s nw_hash_table_create_no_lock failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v27);
          if (!v23) {
            goto LABEL_51;
          }
          goto LABEL_50;
        }
        if (v29)
        {
          *(_DWORD *)tcp_info buf = 136446210;
          os_log_type_t v35 = "nw_path_flow_registration_create";
          _os_log_impl(&dword_1830D4000, v24, v28, "%{public}s nw_hash_table_create_no_lock failed, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        int v24 = __nwlog_obj();
        os_log_type_t v30 = type;
        if (os_log_type_enabled(v24, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          os_log_type_t v35 = "nw_path_flow_registration_create";
          _os_log_impl(&dword_1830D4000, v24, v30, "%{public}s nw_hash_table_create_no_lock failed, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
    if (!v23)
    {
LABEL_51:
      os_unfair_lock_unlock(v10);
      goto LABEL_52;
    }
LABEL_50:
    free(v23);
    goto LABEL_51;
  }
LABEL_7:
  os_log_type_t type = OS_LOG_TYPE_DEFAULT;
  BOOL v12 = nw_hash_table_add_object(v11, (uint64_t)v6, (char *)&type);
  os_unfair_lock_unlock(v10);
  if (type == OS_LOG_TYPE_DEFAULT || !v12)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v18 = (id)gLogObj;
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)tcp_info buf = 136446722;
      os_log_type_t v35 = "nw_path_flow_registration_create";
      __int16 v36 = 1042;
      *(_DWORD *)long long v37 = 16;
      v37[2] = 2098;
      *(void *)&v37[3] = v6->registration_id;
      _os_log_impl(&dword_1830D4000, v18, OS_LOG_TYPE_ERROR, "%{public}s Failed to add flow registration for %{public,uuid_t}.16P", buf, 0x1Cu);
    }

    goto LABEL_52;
  }
  BOOL v13 = v6;
LABEL_53:

  return v13;
}

void sub_1832C7AC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

NWConcrete_nw_path_flow_registration *nw_path_flow_registration_create_internal()
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v0 = objc_alloc_init(NWConcrete_nw_path_flow_registration);
  id v1 = v0;
  if (v0)
  {
    xpc_object_t v2 = v0;
    goto LABEL_10;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v3 = (id)gLogObj;
  *(_DWORD *)tcp_info buf = 136446210;
  uint64_t v15 = "nw_path_flow_registration_create_internal";
  os_log_type_t v4 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (!__nwlog_fault(v4, &type, &v12)) {
    goto LABEL_8;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v5 = (id)gLogObj;
    os_log_type_t v6 = type;
    if (os_log_type_enabled(v5, type))
    {
      *(_DWORD *)tcp_info buf = 136446210;
      uint64_t v15 = "nw_path_flow_registration_create_internal";
      _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_path_flow_registration) alloc] init] failed", buf, 0xCu);
    }
LABEL_7:

LABEL_8:
    if (!v4) {
      goto LABEL_10;
    }
LABEL_9:
    free(v4);
    goto LABEL_10;
  }
  if (!v12)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v5 = (id)gLogObj;
    os_log_type_t v11 = type;
    if (os_log_type_enabled(v5, type))
    {
      *(_DWORD *)tcp_info buf = 136446210;
      uint64_t v15 = "nw_path_flow_registration_create_internal";
      _os_log_impl(&dword_1830D4000, v5, v11, "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_path_flow_registration) alloc] init] failed, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_7;
  }
  backtrace_string = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v5 = (id)gLogObj;
  os_log_type_t v9 = type;
  BOOL v10 = os_log_type_enabled(v5, type);
  if (!backtrace_string)
  {
    if (v10)
    {
      *(_DWORD *)tcp_info buf = 136446210;
      uint64_t v15 = "nw_path_flow_registration_create_internal";
      _os_log_impl(&dword_1830D4000, v5, v9, "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_path_flow_registration) alloc] init] failed, no backtrace", buf, 0xCu);
    }
    goto LABEL_7;
  }
  if (v10)
  {
    *(_DWORD *)tcp_info buf = 136446466;
    uint64_t v15 = "nw_path_flow_registration_create_internal";
    __int16 v16 = 2082;
    os_log_type_t v17 = backtrace_string;
    _os_log_impl(&dword_1830D4000, v5, v9, "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_path_flow_registration) alloc] init] failed, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(backtrace_string);
  if (v4) {
    goto LABEL_9;
  }
LABEL_10:

  return v1;
}

uint64_t nw_path_get_nexus_protocol_level(void *a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  xpc_object_t v2 = v1;
  if (!v1)
  {
    os_log_type_t v6 = __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    uint64_t v18 = "nw_path_get_nexus_protocol_level";
    unsigned int v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v15 = 0;
    if (__nwlog_fault(v7, &type, &v15))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        id v8 = __nwlog_obj();
        os_log_type_t v9 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          uint64_t v18 = "nw_path_get_nexus_protocol_level";
          _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null path", buf, 0xCu);
        }
      }
      else if (v15)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        id v8 = __nwlog_obj();
        os_log_type_t v11 = type;
        BOOL v12 = os_log_type_enabled(v8, type);
        if (backtrace_string)
        {
          if (v12)
          {
            *(_DWORD *)tcp_info buf = 136446466;
            uint64_t v18 = "nw_path_get_nexus_protocol_level";
            __int16 v19 = 2082;
            os_log_type_t v20 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_23;
        }
        if (v12)
        {
          *(_DWORD *)tcp_info buf = 136446210;
          uint64_t v18 = "nw_path_get_nexus_protocol_level";
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null path, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        id v8 = __nwlog_obj();
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          uint64_t v18 = "nw_path_get_nexus_protocol_level";
          _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_23:
    if (v7) {
      free(v7);
    }
    goto LABEL_25;
  }
  if (!nw_path_uses_nexus_internal(v1, 0)
    || (uint64_t nexus_agent = nw_path_get_nexus_agent(v2, 0), *(_DWORD *)(nexus_agent + 212) < 0xCCu))
  {
LABEL_25:
    uint64_t v5 = 0;
    goto LABEL_26;
  }
  unsigned int v4 = *(_DWORD *)(nexus_agent + 216);
  if (v4 >= 5) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = v4;
  }
LABEL_26:

  return v5;
}

void sub_1832C8370(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_path_flow_registration_can_use_nexus(NWConcrete_nw_path *a1, NWConcrete_nw_path_flow_registration *a2)
{
  id v2 = nw_path_copy_flow_for_registration(a1, a2);
  id v3 = v2;
  if (!v2)
  {
    uint64_t v9 = 0;
    goto LABEL_15;
  }
  unsigned int v4 = v2;
  uint64_t v5 = (void *)v4[3];
  if (v5
    && (size_t length = 0, (data = xpc_dictionary_get_data(v5, "data", &length)) != 0)
    && length >= 0xD8
    && (unsigned int v7 = data, length == data[53] + 216)
    && ((data[52] & 0xE080) != 0 ? (BOOL v8 = (data[52] & 0x13) == 1) : (BOOL v8 = 1), !v8))
  {

    if (v7[53] >= 0xCCu)
    {
      unsigned int v11 = v7[52];
      unsigned int v12 = (v11 >> 7) & 1;
      unsigned int v13 = (v11 >> 14) & 1;
      if ((*((unsigned char *)v4 + 186) & 8) != 0) {
        uint64_t v9 = v13;
      }
      else {
        uint64_t v9 = v12;
      }
      goto LABEL_13;
    }
  }
  else
  {
  }
  uint64_t v9 = 0;
LABEL_13:

LABEL_15:
  return v9;
}

uint64_t nw_path_get_nexus_agent_uuid_check_assertion(void *a1, _OWORD *a2, BOOL *a3)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a1;
  os_log_type_t v6 = v5;
  if (!v5)
  {
    unsigned int v11 = __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    id v22 = "nw_path_get_nexus_agent_uuid_check_assertion";
    unsigned int v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (__nwlog_fault(v12, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        unsigned int v13 = __nwlog_obj();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          id v22 = "nw_path_get_nexus_agent_uuid_check_assertion";
          _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s called with null path", buf, 0xCu);
        }
      }
      else if (v19)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        unsigned int v13 = __nwlog_obj();
        os_log_type_t v16 = type;
        BOOL v17 = os_log_type_enabled(v13, type);
        if (backtrace_string)
        {
          if (v17)
          {
            *(_DWORD *)tcp_info buf = 136446466;
            id v22 = "nw_path_get_nexus_agent_uuid_check_assertion";
            __int16 v23 = 2082;
            int v24 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v13, v16, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_27;
        }
        if (v17)
        {
          *(_DWORD *)tcp_info buf = 136446210;
          id v22 = "nw_path_get_nexus_agent_uuid_check_assertion";
          _os_log_impl(&dword_1830D4000, v13, v16, "%{public}s called with null path, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        unsigned int v13 = __nwlog_obj();
        os_log_type_t v18 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          id v22 = "nw_path_get_nexus_agent_uuid_check_assertion";
          _os_log_impl(&dword_1830D4000, v13, v18, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_27:
    if (v12) {
      free(v12);
    }
LABEL_6:
    uint64_t v9 = 0;
    goto LABEL_10;
  }
  if (nw_path_uses_nexus_internal(v5, 0))
  {
    uint64_t nexus_agent = nw_path_get_nexus_agent(v6, 0);
    BOOL v8 = (_OWORD *)nexus_agent;
    if (a3) {
      *a3 = (*(_DWORD *)(nexus_agent + 208) & 2) == 0;
    }
    if (!uuid_is_null((const unsigned __int8 *)nexus_agent))
    {
      *a2 = *v8;
      uint64_t v9 = 1;
      goto LABEL_10;
    }
    goto LABEL_6;
  }
  uint64_t v9 = 0;
  if (a3) {
    *a3 = 0;
  }
LABEL_10:

  return v9;
}

void sub_1832C8770(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_protocol_remove_input_handler_is_valid(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v2 = *(void *)(a1 + 24);
    if (v2) {
      LODWORD(v2) = *(void *)(v2 + 8) != 0;
    }
  }
  else
  {
    LODWORD(v2) = 0;
  }
  if (a2) {
    return v2;
  }
  else {
    return 0;
  }
}

uint64_t nw_path_should_probe_connectivity(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = (v1[474] >> 5) & 1;
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)tcp_info buf = 136446210;
  os_log_type_t v16 = "nw_path_should_probe_connectivity";
  os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      unsigned int v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v16 = "nw_path_should_probe_connectivity";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null path", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      unsigned int v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          os_log_type_t v16 = "nw_path_should_probe_connectivity";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v16 = "nw_path_should_probe_connectivity";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      unsigned int v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v16 = "nw_path_should_probe_connectivity";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

void nw_resolver_config_cancel_updates(void *a1, void *a2, void *a3)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  os_log_type_t v8 = v7;
  if (!v5)
  {
    os_log_type_t v12 = __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_resolver_config_cancel_updates";
    char v13 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v36 = 0;
    if (!__nwlog_fault(v13, &type, &v36)) {
      goto LABEL_57;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_resolver_config_cancel_updates";
        _os_log_impl(&dword_1830D4000, v14, v15, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v36)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v14 = __nwlog_obj();
      os_log_type_t v21 = type;
      BOOL v22 = os_log_type_enabled(v14, type);
      if (backtrace_string)
      {
        if (v22)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_resolver_config_cancel_updates";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v14, v21, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_57:
        if (!v13) {
          goto LABEL_7;
        }
LABEL_58:
        free(v13);
        goto LABEL_7;
      }
      if (v22)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_resolver_config_cancel_updates";
        _os_log_impl(&dword_1830D4000, v14, v21, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v14 = __nwlog_obj();
      os_log_type_t v28 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_resolver_config_cancel_updates";
        _os_log_impl(&dword_1830D4000, v14, v28, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_56:

    goto LABEL_57;
  }
  if (!v6)
  {
    os_log_type_t v16 = __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_resolver_config_cancel_updates";
    char v13 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v36 = 0;
    if (!__nwlog_fault(v13, &type, &v36)) {
      goto LABEL_57;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v14 = __nwlog_obj();
      os_log_type_t v17 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_resolver_config_cancel_updates";
        _os_log_impl(&dword_1830D4000, v14, v17, "%{public}s called with null queue", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (!v36)
    {
      os_log_type_t v14 = __nwlog_obj();
      os_log_type_t v29 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_resolver_config_cancel_updates";
        _os_log_impl(&dword_1830D4000, v14, v29, "%{public}s called with null queue, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_56;
    }
    __int16 v23 = (char *)__nw_create_backtrace_string();
    os_log_type_t v14 = __nwlog_obj();
    os_log_type_t v24 = type;
    BOOL v25 = os_log_type_enabled(v14, type);
    if (!v23)
    {
      if (v25)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_resolver_config_cancel_updates";
        _os_log_impl(&dword_1830D4000, v14, v24, "%{public}s called with null queue, no backtrace", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (v25)
    {
      *(_DWORD *)tcp_info buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_resolver_config_cancel_updates";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = v23;
      _os_log_impl(&dword_1830D4000, v14, v24, "%{public}s called with null queue, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_37;
  }
  if (!v7)
  {
    os_log_type_t v18 = __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_resolver_config_cancel_updates";
    char v13 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v36 = 0;
    if (!__nwlog_fault(v13, &type, &v36)) {
      goto LABEL_57;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v14 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_resolver_config_cancel_updates";
        _os_log_impl(&dword_1830D4000, v14, v19, "%{public}s called with null completion", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (!v36)
    {
      os_log_type_t v14 = __nwlog_obj();
      os_log_type_t v30 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_resolver_config_cancel_updates";
        _os_log_impl(&dword_1830D4000, v14, v30, "%{public}s called with null completion, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_56;
    }
    __int16 v23 = (char *)__nw_create_backtrace_string();
    os_log_type_t v14 = __nwlog_obj();
    os_log_type_t v26 = type;
    BOOL v27 = os_log_type_enabled(v14, type);
    if (!v23)
    {
      if (v27)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_resolver_config_cancel_updates";
        _os_log_impl(&dword_1830D4000, v14, v26, "%{public}s called with null completion, no backtrace", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (v27)
    {
      *(_DWORD *)tcp_info buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_resolver_config_cancel_updates";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = v23;
      _os_log_impl(&dword_1830D4000, v14, v26, "%{public}s called with null completion, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_37:

    free(v23);
    if (!v13) {
      goto LABEL_7;
    }
    goto LABEL_58;
  }
  *(void *)tcp_info buf = 0;
  *(void *)&buf[8] = buf;
  *(void *)&buf[16] = 0x2020000000;
  char v39 = 0;
  v31[0] = MEMORY[0x1E4F143A8];
  v31[1] = 3221225472;
  v31[2] = __nw_resolver_config_cancel_updates_block_invoke;
  v31[3] = &unk_1E52440F8;
  uint64_t v9 = (os_unfair_lock_s *)v5;
  char v32 = v9;
  os_log_type_t v10 = v6;
  uint64_t v33 = v10;
  id v11 = v8;
  id v34 = v11;
  os_log_type_t v35 = buf;
  os_unfair_lock_lock(v9 + 22);
  __nw_resolver_config_cancel_updates_block_invoke((uint64_t)v31);
  os_unfair_lock_unlock(v9 + 22);
  if (!*(unsigned char *)(*(void *)&buf[8] + 24)) {
    dispatch_async(v10, v11);
  }

  _Block_object_dispose(buf, 8);
LABEL_7:
}

void sub_1832C91FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void nw_association_set_cached_content_for_protocol(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v87 = *MEMORY[0x1E4F143B8];
  id v7 = a1;
  id v8 = a2;
  uint64_t v9 = v8;
  if (!v7)
  {
    __int16 v58 = __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    BOOL v78 = "nw_association_set_cached_content_for_protocol";
    int v59 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v75 = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v59, &type, &v75)) {
      goto LABEL_133;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      nw_endpoint_t v60 = __nwlog_obj();
      os_log_type_t v61 = type;
      if (os_log_type_enabled(v60, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        BOOL v78 = "nw_association_set_cached_content_for_protocol";
        _os_log_impl(&dword_1830D4000, v60, v61, "%{public}s called with null association", buf, 0xCu);
      }
    }
    else if (v75)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      nw_endpoint_t v60 = __nwlog_obj();
      os_log_type_t v65 = type;
      BOOL v66 = os_log_type_enabled(v60, type);
      if (backtrace_string)
      {
        if (v66)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          BOOL v78 = "nw_association_set_cached_content_for_protocol";
          __int16 v79 = 2082;
          uint64_t v80 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v60, v65, "%{public}s called with null association, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_133:
        if (!v59) {
          goto LABEL_99;
        }
LABEL_134:
        free(v59);
        goto LABEL_99;
      }
      if (v66)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        BOOL v78 = "nw_association_set_cached_content_for_protocol";
        _os_log_impl(&dword_1830D4000, v60, v65, "%{public}s called with null association, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      nw_endpoint_t v60 = __nwlog_obj();
      os_log_type_t v70 = type;
      if (os_log_type_enabled(v60, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        BOOL v78 = "nw_association_set_cached_content_for_protocol";
        _os_log_impl(&dword_1830D4000, v60, v70, "%{public}s called with null association, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_132:

    goto LABEL_133;
  }
  if (v8)
  {
    id v10 = nw_path_parameters_copy_context(*((void **)v7 + 2));
    nw_context_assert_queue(v10);
    uint64_t internal = *((void *)v7 + 7);
    if (!internal)
    {
      uint64_t internal = nw_hash_table_create_internal(5u, 48, (const void *(*)(const void *, unsigned int *))nw_association_get_key, (unsigned int (*)(const void *, unsigned int))nw_association_key_hash, (BOOL (*)(const void *, const void *, unsigned int))nw_association_matches_key, (void (*)(void *))nw_association_release);
      if (!internal)
      {
        *((void *)v7 + 7) = 0;
        goto LABEL_98;
      }
      *(_DWORD *)(internal + 48) &= ~2u;
      *((void *)v7 + 7) = internal;
    }
    BOOL node = nw_hash_table_get_node(internal, (uint64_t)v9, 0);
    if (!node) {
      goto LABEL_44;
    }
    uint64_t v13 = node;
    os_log_type_t v14 = (uint64_t *)(node + 32);
    uint64_t v15 = *(void *)(node + 72);
    if (v15)
    {
      if (v15 == a3)
      {
        *(void *)(node + 64) = a4;
        nw_context_remove_cache_entry(v10, v14);
        nw_context_add_cache_entry(v10, v14);
        goto LABEL_98;
      }
      nw_protocol_definition_deallocate_cache_entry(v9, v15);
    }
    nw_context_remove_cache_entry(v10, v14);
    if (nw_hash_table_remove_node(*((void *)v7 + 7), v13)
      || nw_path_parameters_get_logging_disabled(*((void *)v7 + 2)))
    {
LABEL_44:
      if (a3)
      {
        os_log_type_t type = OS_LOG_TYPE_DEFAULT;
        uint64_t v31 = *((void *)v7 + 7);
        id v32 = v9;
        BOOL v33 = nw_hash_table_add_object(v31, (uint64_t)v32, (char *)&type);
        if (v33)
        {
          id v34 = (char *)v33;
          if (type || nw_path_parameters_get_logging_disabled(*((void *)v7 + 2))) {
            goto LABEL_97;
          }
          uint64_t v73 = a4;
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          id v35 = (id)gconnectionLogObj;
          logging_description = nw_endpoint_get_logging_description(*((void **)v7 + 1));
          *(_DWORD *)tcp_info buf = 136446978;
          BOOL v78 = "nw_association_set_cached_content_for_protocol";
          __int16 v79 = 2082;
          uint64_t v80 = (void *)logging_description;
          __int16 v81 = 2048;
          uint64_t v82 = (uint64_t)v32;
          __int16 v83 = 2048;
          BOOL v84 = v34;
          long long v37 = (char *)_os_log_send_and_compose_impl();

          os_log_type_t v75 = OS_LOG_TYPE_ERROR;
          char v74 = 0;
          if (__nwlog_fault(v37, &v75, &v74))
          {
            if (v75 == OS_LOG_TYPE_FAULT)
            {
              if (__nwlog_connection_log::onceToken != -1) {
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
              }
              os_log_type_t v38 = (id)gconnectionLogObj;
              os_log_type_t v39 = v75;
              if (os_log_type_enabled(v38, v75))
              {
                uint64_t v40 = nw_endpoint_get_logging_description(*((void **)v7 + 1));
                *(_DWORD *)tcp_info buf = 136446978;
                BOOL v78 = "nw_association_set_cached_content_for_protocol";
                __int16 v79 = 2082;
                uint64_t v80 = (void *)v40;
                __int16 v81 = 2048;
                uint64_t v82 = (uint64_t)v32;
                __int16 v83 = 2048;
                BOOL v84 = v34;
                _os_log_impl(&dword_1830D4000, v38, v39, "%{public}s <nw_association %{public}s> failed to add cached content for protocol %p (node %p)", buf, 0x2Au);
              }
            }
            else if (v74)
            {
              os_log_type_t v48 = __nw_create_backtrace_string();
              if (v48)
              {
                os_log_type_t v49 = (char *)v48;
                if (__nwlog_connection_log::onceToken != -1) {
                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
                }
                BOOL v50 = (id)gconnectionLogObj;
                os_log_type_t v51 = v75;
                if (os_log_type_enabled(v50, v75))
                {
                  os_log_type_t v52 = nw_endpoint_get_logging_description(*((void **)v7 + 1));
                  *(_DWORD *)tcp_info buf = 136447234;
                  BOOL v78 = "nw_association_set_cached_content_for_protocol";
                  __int16 v79 = 2082;
                  uint64_t v80 = (void *)v52;
                  __int16 v81 = 2048;
                  uint64_t v82 = (uint64_t)v32;
                  __int16 v83 = 2048;
                  BOOL v84 = v34;
                  __int16 v85 = 2082;
                  os_log_type_t v86 = v49;
                  _os_log_impl(&dword_1830D4000, v50, v51, "%{public}s <nw_association %{public}s> failed to add cached content for protocol %p (node %p), dumping backtrace:%{public}s", buf, 0x34u);
                }

                free(v49);
                if (!v37) {
                  goto LABEL_96;
                }
                goto LABEL_95;
              }
              if (__nwlog_connection_log::onceToken != -1) {
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
              }
              os_log_type_t v38 = (id)gconnectionLogObj;
              os_log_type_t v56 = v75;
              if (os_log_type_enabled(v38, v75))
              {
                __int16 v57 = nw_endpoint_get_logging_description(*((void **)v7 + 1));
                *(_DWORD *)tcp_info buf = 136446978;
                BOOL v78 = "nw_association_set_cached_content_for_protocol";
                __int16 v79 = 2082;
                uint64_t v80 = (void *)v57;
                __int16 v81 = 2048;
                uint64_t v82 = (uint64_t)v32;
                __int16 v83 = 2048;
                BOOL v84 = v34;
                _os_log_impl(&dword_1830D4000, v38, v56, "%{public}s <nw_association %{public}s> failed to add cached content for protocol %p (node %p), no backtrace", buf, 0x2Au);
              }
            }
            else
            {
              if (__nwlog_connection_log::onceToken != -1) {
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
              }
              os_log_type_t v38 = (id)gconnectionLogObj;
              os_log_type_t v54 = v75;
              if (os_log_type_enabled(v38, v75))
              {
                char v55 = nw_endpoint_get_logging_description(*((void **)v7 + 1));
                *(_DWORD *)tcp_info buf = 136446978;
                BOOL v78 = "nw_association_set_cached_content_for_protocol";
                __int16 v79 = 2082;
                uint64_t v80 = (void *)v55;
                __int16 v81 = 2048;
                uint64_t v82 = (uint64_t)v32;
                __int16 v83 = 2048;
                BOOL v84 = v34;
                _os_log_impl(&dword_1830D4000, v38, v54, "%{public}s <nw_association %{public}s> failed to add cached content for protocol %p (node %p), backtrace limit exceeded", buf, 0x2Au);
              }
            }
          }
          if (!v37)
          {
LABEL_96:
            a4 = v73;
LABEL_97:
            *((void *)v34 + 8) = a4;
            *((void *)v34 + 9) = a3;
            nw_context_add_cache_entry(v10, (void *)v34 + 4);
            goto LABEL_98;
          }
LABEL_95:
          free(v37);
          goto LABEL_96;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v41 = (id)gLogObj;
        *(_DWORD *)tcp_info buf = 136446210;
        BOOL v78 = "nw_association_set_cached_content_for_protocol";
        char v42 = (char *)_os_log_send_and_compose_impl();

        os_log_type_t v75 = OS_LOG_TYPE_ERROR;
        char v74 = 0;
        if (__nwlog_fault(v42, &v75, &v74))
        {
          if (v75 == OS_LOG_TYPE_FAULT)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            os_log_type_t v43 = (id)gLogObj;
            os_log_type_t v44 = v75;
            if (os_log_type_enabled(v43, v75))
            {
              *(_DWORD *)tcp_info buf = 136446210;
              BOOL v78 = "nw_association_set_cached_content_for_protocol";
              _os_log_impl(&dword_1830D4000, v43, v44, "%{public}s nw_hash_table_add_object failed", buf, 0xCu);
            }
          }
          else if (v74)
          {
            uint64_t v45 = (char *)__nw_create_backtrace_string();
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            os_log_type_t v43 = (id)gLogObj;
            os_log_type_t v46 = v75;
            BOOL v47 = os_log_type_enabled(v43, v75);
            if (v45)
            {
              if (v47)
              {
                *(_DWORD *)tcp_info buf = 136446466;
                BOOL v78 = "nw_association_set_cached_content_for_protocol";
                __int16 v79 = 2082;
                uint64_t v80 = v45;
                _os_log_impl(&dword_1830D4000, v43, v46, "%{public}s nw_hash_table_add_object failed, dumping backtrace:%{public}s", buf, 0x16u);
              }

              free(v45);
              if (!v42) {
                goto LABEL_98;
              }
              goto LABEL_83;
            }
            if (v47)
            {
              *(_DWORD *)tcp_info buf = 136446210;
              BOOL v78 = "nw_association_set_cached_content_for_protocol";
              _os_log_impl(&dword_1830D4000, v43, v46, "%{public}s nw_hash_table_add_object failed, no backtrace", buf, 0xCu);
            }
          }
          else
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            os_log_type_t v43 = (id)gLogObj;
            os_log_type_t v53 = v75;
            if (os_log_type_enabled(v43, v75))
            {
              *(_DWORD *)tcp_info buf = 136446210;
              BOOL v78 = "nw_association_set_cached_content_for_protocol";
              _os_log_impl(&dword_1830D4000, v43, v53, "%{public}s nw_hash_table_add_object failed, backtrace limit exceeded", buf, 0xCu);
            }
          }
        }
        if (v42) {
LABEL_83:
        }
          free(v42);
      }
LABEL_98:

      goto LABEL_99;
    }
    uint64_t v72 = a4;
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
    }
    id v16 = (id)gconnectionLogObj;
    os_log_type_t v17 = nw_endpoint_get_logging_description(*((void **)v7 + 1));
    *(_DWORD *)tcp_info buf = 136446722;
    BOOL v78 = "nw_association_set_cached_content_for_protocol";
    __int16 v79 = 2082;
    uint64_t v80 = (void *)v17;
    __int16 v81 = 2048;
    uint64_t v82 = v13;
    os_log_type_t v18 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v75 = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v18, &type, &v75))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        os_log_type_t v19 = (id)gconnectionLogObj;
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v19, type))
        {
          os_log_type_t v21 = nw_endpoint_get_logging_description(*((void **)v7 + 1));
          *(_DWORD *)tcp_info buf = 136446722;
          BOOL v78 = "nw_association_set_cached_content_for_protocol";
          __int16 v79 = 2082;
          uint64_t v80 = (void *)v21;
          __int16 v81 = 2048;
          uint64_t v82 = v13;
          _os_log_impl(&dword_1830D4000, v19, v20, "%{public}s <nw_association %{public}s> failed to remove cache entry for node %p", buf, 0x20u);
        }
      }
      else if (v75)
      {
        BOOL v22 = __nw_create_backtrace_string();
        if (v22)
        {
          __int16 v23 = (char *)v22;
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          os_log_type_t v24 = (id)gconnectionLogObj;
          os_log_type_t v25 = type;
          if (os_log_type_enabled(v24, type))
          {
            os_log_type_t v26 = nw_endpoint_get_logging_description(*((void **)v7 + 1));
            *(_DWORD *)tcp_info buf = 136446978;
            BOOL v78 = "nw_association_set_cached_content_for_protocol";
            __int16 v79 = 2082;
            uint64_t v80 = (void *)v26;
            __int16 v81 = 2048;
            uint64_t v82 = v13;
            __int16 v83 = 2082;
            BOOL v84 = v23;
            _os_log_impl(&dword_1830D4000, v24, v25, "%{public}s <nw_association %{public}s> failed to remove cache entry for node %p, dumping backtrace:%{public}s", buf, 0x2Au);
          }

          free(v23);
          if (!v18) {
            goto LABEL_43;
          }
          goto LABEL_42;
        }
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        os_log_type_t v19 = (id)gconnectionLogObj;
        os_log_type_t v29 = type;
        if (os_log_type_enabled(v19, type))
        {
          os_log_type_t v30 = nw_endpoint_get_logging_description(*((void **)v7 + 1));
          *(_DWORD *)tcp_info buf = 136446722;
          BOOL v78 = "nw_association_set_cached_content_for_protocol";
          __int16 v79 = 2082;
          uint64_t v80 = (void *)v30;
          __int16 v81 = 2048;
          uint64_t v82 = v13;
          _os_log_impl(&dword_1830D4000, v19, v29, "%{public}s <nw_association %{public}s> failed to remove cache entry for node %p, no backtrace", buf, 0x20u);
        }
      }
      else
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        os_log_type_t v19 = (id)gconnectionLogObj;
        os_log_type_t v27 = type;
        if (os_log_type_enabled(v19, type))
        {
          os_log_type_t v28 = nw_endpoint_get_logging_description(*((void **)v7 + 1));
          *(_DWORD *)tcp_info buf = 136446722;
          BOOL v78 = "nw_association_set_cached_content_for_protocol";
          __int16 v79 = 2082;
          uint64_t v80 = (void *)v28;
          __int16 v81 = 2048;
          uint64_t v82 = v13;
          _os_log_impl(&dword_1830D4000, v19, v27, "%{public}s <nw_association %{public}s> failed to remove cache entry for node %p, backtrace limit exceeded", buf, 0x20u);
        }
      }
    }
    if (!v18)
    {
LABEL_43:
      a4 = v72;
      goto LABEL_44;
    }
LABEL_42:
    free(v18);
    goto LABEL_43;
  }
  long long v62 = __nwlog_obj();
  *(_DWORD *)tcp_info buf = 136446210;
  BOOL v78 = "nw_association_set_cached_content_for_protocol";
  int v59 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  os_log_type_t v75 = OS_LOG_TYPE_DEFAULT;
  if (!__nwlog_fault(v59, &type, &v75)) {
    goto LABEL_133;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    nw_endpoint_t v60 = __nwlog_obj();
    os_log_type_t v63 = type;
    if (os_log_type_enabled(v60, type))
    {
      *(_DWORD *)tcp_info buf = 136446210;
      BOOL v78 = "nw_association_set_cached_content_for_protocol";
      _os_log_impl(&dword_1830D4000, v60, v63, "%{public}s called with null protocol", buf, 0xCu);
    }
    goto LABEL_132;
  }
  if (v75 == OS_LOG_TYPE_DEFAULT)
  {
    nw_endpoint_t v60 = __nwlog_obj();
    os_log_type_t v71 = type;
    if (os_log_type_enabled(v60, type))
    {
      *(_DWORD *)tcp_info buf = 136446210;
      BOOL v78 = "nw_association_set_cached_content_for_protocol";
      _os_log_impl(&dword_1830D4000, v60, v71, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_132;
  }
  long long v67 = (char *)__nw_create_backtrace_string();
  nw_endpoint_t v60 = __nwlog_obj();
  os_log_type_t v68 = type;
  BOOL v69 = os_log_type_enabled(v60, type);
  if (!v67)
  {
    if (v69)
    {
      *(_DWORD *)tcp_info buf = 136446210;
      BOOL v78 = "nw_association_set_cached_content_for_protocol";
      _os_log_impl(&dword_1830D4000, v60, v68, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
    }
    goto LABEL_132;
  }
  if (v69)
  {
    *(_DWORD *)tcp_info buf = 136446466;
    BOOL v78 = "nw_association_set_cached_content_for_protocol";
    __int16 v79 = 2082;
    uint64_t v80 = v67;
    _os_log_impl(&dword_1830D4000, v60, v68, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v67);
  if (v59) {
    goto LABEL_134;
  }
LABEL_99:
}

void sub_1832CA230(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_proxy_hop_add_token_header_with_agent_type(void *a1, uint64_t a2, const char *a3, const char *a4, const char *a5, const char *a6)
{
  uint64_t v66 = *MEMORY[0x1E4F143B8];
  id v11 = a1;
  os_log_type_t v12 = v11;
  if (!v11)
  {
    os_log_type_t v14 = __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    os_log_type_t v63 = "nw_proxy_hop_add_token_header_with_agent_type";
    uint64_t v15 = (const char *)_os_log_send_and_compose_impl();

    LOBYTE(v60) = 16;
    os_log_type_t v61 = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v15, &v60, &v61)) {
      goto LABEL_142;
    }
    if (v60 == 17)
    {
      id v16 = __nwlog_obj();
      os_log_type_t v17 = v60;
      if (os_log_type_enabled(v16, (os_log_type_t)v60))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v63 = "nw_proxy_hop_add_token_header_with_agent_type";
        _os_log_impl(&dword_1830D4000, v16, v17, "%{public}s called with null hop", buf, 0xCu);
      }
    }
    else if (v61)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v16 = __nwlog_obj();
      os_log_type_t v34 = v60;
      BOOL v35 = os_log_type_enabled(v16, (os_log_type_t)v60);
      if (backtrace_string)
      {
        if (v35)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          os_log_type_t v63 = "nw_proxy_hop_add_token_header_with_agent_type";
          __int16 v64 = 2082;
          os_log_type_t v65 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v16, v34, "%{public}s called with null hop, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_142:
        if (!v15) {
          goto LABEL_11;
        }
        goto LABEL_143;
      }
      if (v35)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v63 = "nw_proxy_hop_add_token_header_with_agent_type";
        _os_log_impl(&dword_1830D4000, v16, v34, "%{public}s called with null hop, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v16 = __nwlog_obj();
      os_log_type_t v51 = v60;
      if (os_log_type_enabled(v16, (os_log_type_t)v60))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v63 = "nw_proxy_hop_add_token_header_with_agent_type";
        _os_log_impl(&dword_1830D4000, v16, v51, "%{public}s called with null hop, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_138:

    goto LABEL_142;
  }
  if (!nw_protocol_options_is_masque(v11[5]))
  {
    os_log_type_t v18 = __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    os_log_type_t v63 = "nw_proxy_hop_add_token_header_with_agent_type";
    uint64_t v15 = (const char *)_os_log_send_and_compose_impl();

    LOBYTE(v60) = 16;
    os_log_type_t v61 = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v15, &v60, &v61)) {
      goto LABEL_142;
    }
    if (v60 == 17)
    {
      id v16 = __nwlog_obj();
      os_log_type_t v19 = v60;
      if (os_log_type_enabled(v16, (os_log_type_t)v60))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v63 = "nw_proxy_hop_add_token_header_with_agent_type";
        _os_log_impl(&dword_1830D4000, v16, v19, "%{public}s called with null nw_protocol_options_is_masque(hop->options)", buf, 0xCu);
      }
      goto LABEL_138;
    }
    if (v61 == OS_LOG_TYPE_DEFAULT)
    {
      id v16 = __nwlog_obj();
      os_log_type_t v52 = v60;
      if (os_log_type_enabled(v16, (os_log_type_t)v60))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v63 = "nw_proxy_hop_add_token_header_with_agent_type";
        _os_log_impl(&dword_1830D4000, v16, v52, "%{public}s called with null nw_protocol_options_is_masque(hop->options), backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_138;
    }
    char v36 = (char *)__nw_create_backtrace_string();
    id v16 = __nwlog_obj();
    os_log_type_t v37 = v60;
    BOOL v38 = os_log_type_enabled(v16, (os_log_type_t)v60);
    if (!v36)
    {
      if (v38)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v63 = "nw_proxy_hop_add_token_header_with_agent_type";
        _os_log_impl(&dword_1830D4000, v16, v37, "%{public}s called with null nw_protocol_options_is_masque(hop->options), no backtrace", buf, 0xCu);
      }
      goto LABEL_138;
    }
    if (v38)
    {
      *(_DWORD *)tcp_info buf = 136446466;
      os_log_type_t v63 = "nw_proxy_hop_add_token_header_with_agent_type";
      __int16 v64 = 2082;
      os_log_type_t v65 = v36;
      _os_log_impl(&dword_1830D4000, v16, v37, "%{public}s called with null nw_protocol_options_is_masque(hop->options), dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_86;
  }
  if (!a2)
  {
    os_log_type_t v20 = __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    os_log_type_t v63 = "nw_proxy_hop_add_token_header_with_agent_type";
    uint64_t v15 = (const char *)_os_log_send_and_compose_impl();

    LOBYTE(v60) = 16;
    os_log_type_t v61 = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v15, &v60, &v61)) {
      goto LABEL_142;
    }
    if (v60 == 17)
    {
      id v16 = __nwlog_obj();
      os_log_type_t v21 = v60;
      if (os_log_type_enabled(v16, (os_log_type_t)v60))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v63 = "nw_proxy_hop_add_token_header_with_agent_type";
        _os_log_impl(&dword_1830D4000, v16, v21, "%{public}s called with null header", buf, 0xCu);
      }
      goto LABEL_138;
    }
    if (v61 == OS_LOG_TYPE_DEFAULT)
    {
      id v16 = __nwlog_obj();
      os_log_type_t v53 = v60;
      if (os_log_type_enabled(v16, (os_log_type_t)v60))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v63 = "nw_proxy_hop_add_token_header_with_agent_type";
        _os_log_impl(&dword_1830D4000, v16, v53, "%{public}s called with null header, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_138;
    }
    char v36 = (char *)__nw_create_backtrace_string();
    id v16 = __nwlog_obj();
    os_log_type_t v39 = v60;
    BOOL v40 = os_log_type_enabled(v16, (os_log_type_t)v60);
    if (!v36)
    {
      if (v40)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v63 = "nw_proxy_hop_add_token_header_with_agent_type";
        _os_log_impl(&dword_1830D4000, v16, v39, "%{public}s called with null header, no backtrace", buf, 0xCu);
      }
      goto LABEL_138;
    }
    if (v40)
    {
      *(_DWORD *)tcp_info buf = 136446466;
      os_log_type_t v63 = "nw_proxy_hop_add_token_header_with_agent_type";
      __int16 v64 = 2082;
      os_log_type_t v65 = v36;
      _os_log_impl(&dword_1830D4000, v16, v39, "%{public}s called with null header, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_86;
  }
  if (!a3)
  {
    BOOL v22 = __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    os_log_type_t v63 = "nw_proxy_hop_add_token_header_with_agent_type";
    uint64_t v15 = (const char *)_os_log_send_and_compose_impl();

    LOBYTE(v60) = 16;
    os_log_type_t v61 = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v15, &v60, &v61)) {
      goto LABEL_142;
    }
    if (v60 == 17)
    {
      id v16 = __nwlog_obj();
      os_log_type_t v23 = v60;
      if (os_log_type_enabled(v16, (os_log_type_t)v60))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v63 = "nw_proxy_hop_add_token_header_with_agent_type";
        _os_log_impl(&dword_1830D4000, v16, v23, "%{public}s called with null value_prefix", buf, 0xCu);
      }
      goto LABEL_138;
    }
    if (v61 == OS_LOG_TYPE_DEFAULT)
    {
      id v16 = __nwlog_obj();
      os_log_type_t v54 = v60;
      if (os_log_type_enabled(v16, (os_log_type_t)v60))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v63 = "nw_proxy_hop_add_token_header_with_agent_type";
        _os_log_impl(&dword_1830D4000, v16, v54, "%{public}s called with null value_prefix, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_138;
    }
    char v36 = (char *)__nw_create_backtrace_string();
    id v16 = __nwlog_obj();
    os_log_type_t v41 = v60;
    BOOL v42 = os_log_type_enabled(v16, (os_log_type_t)v60);
    if (!v36)
    {
      if (v42)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v63 = "nw_proxy_hop_add_token_header_with_agent_type";
        _os_log_impl(&dword_1830D4000, v16, v41, "%{public}s called with null value_prefix, no backtrace", buf, 0xCu);
      }
      goto LABEL_138;
    }
    if (v42)
    {
      *(_DWORD *)tcp_info buf = 136446466;
      os_log_type_t v63 = "nw_proxy_hop_add_token_header_with_agent_type";
      __int16 v64 = 2082;
      os_log_type_t v65 = v36;
      _os_log_impl(&dword_1830D4000, v16, v41, "%{public}s called with null value_prefix, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_86;
  }
  if (!a4)
  {
    os_log_type_t v24 = __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    os_log_type_t v63 = "nw_proxy_hop_add_token_header_with_agent_type";
    uint64_t v15 = (const char *)_os_log_send_and_compose_impl();

    LOBYTE(v60) = 16;
    os_log_type_t v61 = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v15, &v60, &v61)) {
      goto LABEL_142;
    }
    if (v60 == 17)
    {
      id v16 = __nwlog_obj();
      os_log_type_t v25 = v60;
      if (os_log_type_enabled(v16, (os_log_type_t)v60))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v63 = "nw_proxy_hop_add_token_header_with_agent_type";
        _os_log_impl(&dword_1830D4000, v16, v25, "%{public}s called with null value_suffix", buf, 0xCu);
      }
      goto LABEL_138;
    }
    if (v61 == OS_LOG_TYPE_DEFAULT)
    {
      id v16 = __nwlog_obj();
      os_log_type_t v55 = v60;
      if (os_log_type_enabled(v16, (os_log_type_t)v60))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v63 = "nw_proxy_hop_add_token_header_with_agent_type";
        _os_log_impl(&dword_1830D4000, v16, v55, "%{public}s called with null value_suffix, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_138;
    }
    char v36 = (char *)__nw_create_backtrace_string();
    id v16 = __nwlog_obj();
    os_log_type_t v43 = v60;
    BOOL v44 = os_log_type_enabled(v16, (os_log_type_t)v60);
    if (!v36)
    {
      if (v44)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v63 = "nw_proxy_hop_add_token_header_with_agent_type";
        _os_log_impl(&dword_1830D4000, v16, v43, "%{public}s called with null value_suffix, no backtrace", buf, 0xCu);
      }
      goto LABEL_138;
    }
    if (v44)
    {
      *(_DWORD *)tcp_info buf = 136446466;
      os_log_type_t v63 = "nw_proxy_hop_add_token_header_with_agent_type";
      __int16 v64 = 2082;
      os_log_type_t v65 = v36;
      _os_log_impl(&dword_1830D4000, v16, v43, "%{public}s called with null value_suffix, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_86;
  }
  if (!a5)
  {
    os_log_type_t v26 = __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    os_log_type_t v63 = "nw_proxy_hop_add_token_header_with_agent_type";
    uint64_t v15 = (const char *)_os_log_send_and_compose_impl();

    LOBYTE(v60) = 16;
    os_log_type_t v61 = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v15, &v60, &v61)) {
      goto LABEL_142;
    }
    if (v60 == 17)
    {
      id v16 = __nwlog_obj();
      os_log_type_t v27 = v60;
      if (os_log_type_enabled(v16, (os_log_type_t)v60))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v63 = "nw_proxy_hop_add_token_header_with_agent_type";
        _os_log_impl(&dword_1830D4000, v16, v27, "%{public}s called with null agent_domain", buf, 0xCu);
      }
      goto LABEL_138;
    }
    if (v61 == OS_LOG_TYPE_DEFAULT)
    {
      id v16 = __nwlog_obj();
      os_log_type_t v56 = v60;
      if (os_log_type_enabled(v16, (os_log_type_t)v60))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v63 = "nw_proxy_hop_add_token_header_with_agent_type";
        _os_log_impl(&dword_1830D4000, v16, v56, "%{public}s called with null agent_domain, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_138;
    }
    char v36 = (char *)__nw_create_backtrace_string();
    id v16 = __nwlog_obj();
    os_log_type_t v45 = v60;
    BOOL v46 = os_log_type_enabled(v16, (os_log_type_t)v60);
    if (!v36)
    {
      if (v46)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v63 = "nw_proxy_hop_add_token_header_with_agent_type";
        _os_log_impl(&dword_1830D4000, v16, v45, "%{public}s called with null agent_domain, no backtrace", buf, 0xCu);
      }
      goto LABEL_138;
    }
    if (v46)
    {
      *(_DWORD *)tcp_info buf = 136446466;
      os_log_type_t v63 = "nw_proxy_hop_add_token_header_with_agent_type";
      __int16 v64 = 2082;
      os_log_type_t v65 = v36;
      _os_log_impl(&dword_1830D4000, v16, v45, "%{public}s called with null agent_domain, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_86;
  }
  if (!a6)
  {
    os_log_type_t v28 = __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    os_log_type_t v63 = "nw_proxy_hop_add_token_header_with_agent_type";
    uint64_t v15 = (const char *)_os_log_send_and_compose_impl();

    LOBYTE(v60) = 16;
    os_log_type_t v61 = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v15, &v60, &v61)) {
      goto LABEL_142;
    }
    if (v60 == 17)
    {
      id v16 = __nwlog_obj();
      os_log_type_t v29 = v60;
      if (os_log_type_enabled(v16, (os_log_type_t)v60))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v63 = "nw_proxy_hop_add_token_header_with_agent_type";
        _os_log_impl(&dword_1830D4000, v16, v29, "%{public}s called with null agent_type", buf, 0xCu);
      }
      goto LABEL_138;
    }
    if (v61 == OS_LOG_TYPE_DEFAULT)
    {
      id v16 = __nwlog_obj();
      os_log_type_t v57 = v60;
      if (os_log_type_enabled(v16, (os_log_type_t)v60))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v63 = "nw_proxy_hop_add_token_header_with_agent_type";
        _os_log_impl(&dword_1830D4000, v16, v57, "%{public}s called with null agent_type, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_138;
    }
    char v36 = (char *)__nw_create_backtrace_string();
    id v16 = __nwlog_obj();
    os_log_type_t v47 = v60;
    BOOL v48 = os_log_type_enabled(v16, (os_log_type_t)v60);
    if (!v36)
    {
      if (v48)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v63 = "nw_proxy_hop_add_token_header_with_agent_type";
        _os_log_impl(&dword_1830D4000, v16, v47, "%{public}s called with null agent_type, no backtrace", buf, 0xCu);
      }
      goto LABEL_138;
    }
    if (v48)
    {
      *(_DWORD *)tcp_info buf = 136446466;
      os_log_type_t v63 = "nw_proxy_hop_add_token_header_with_agent_type";
      __int16 v64 = 2082;
      os_log_type_t v65 = v36;
      _os_log_impl(&dword_1830D4000, v16, v47, "%{public}s called with null agent_type, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_86:

    goto LABEL_92;
  }
  nw_endpoint_t v60 = 0;
  asprintf(&v60, "%s%s%s%s%s%s%s%s%s%s", a3, "<token=", "{domain=", a5, "}", "[type=", a6, "]", ">", a4);
  if (!v60)
  {
    os_log_type_t v30 = __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    os_log_type_t v63 = "nw_proxy_hop_add_token_header_with_agent_type";
    uint64_t v15 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t v61 = OS_LOG_TYPE_ERROR;
    char v59 = 0;
    if (!__nwlog_fault(v15, &v61, &v59)) {
      goto LABEL_142;
    }
    if (v61 == OS_LOG_TYPE_FAULT)
    {
      uint64_t v31 = __nwlog_obj();
      os_log_type_t v32 = v61;
      if (os_log_type_enabled(v31, v61))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v63 = "nw_proxy_hop_add_token_header_with_agent_type";
        _os_log_impl(&dword_1830D4000, v31, v32, "%{public}s called with null value", buf, 0xCu);
      }
LABEL_141:

      goto LABEL_142;
    }
    if (!v59)
    {
      uint64_t v31 = __nwlog_obj();
      os_log_type_t v58 = v61;
      if (os_log_type_enabled(v31, v61))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v63 = "nw_proxy_hop_add_token_header_with_agent_type";
        _os_log_impl(&dword_1830D4000, v31, v58, "%{public}s called with null value, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_141;
    }
    char v36 = (char *)__nw_create_backtrace_string();
    uint64_t v31 = __nwlog_obj();
    os_log_type_t v49 = v61;
    BOOL v50 = os_log_type_enabled(v31, v61);
    if (!v36)
    {
      if (v50)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v63 = "nw_proxy_hop_add_token_header_with_agent_type";
        _os_log_impl(&dword_1830D4000, v31, v49, "%{public}s called with null value, no backtrace", buf, 0xCu);
      }
      goto LABEL_141;
    }
    if (v50)
    {
      *(_DWORD *)tcp_info buf = 136446466;
      os_log_type_t v63 = "nw_proxy_hop_add_token_header_with_agent_type";
      __int16 v64 = 2082;
      os_log_type_t v65 = v36;
      _os_log_impl(&dword_1830D4000, v31, v49, "%{public}s called with null value, dumping backtrace:%{public}s", buf, 0x16u);
    }

LABEL_92:
    free(v36);
    if (!v15) {
      goto LABEL_11;
    }
LABEL_143:
    uint64_t v13 = (char *)v15;
    goto LABEL_10;
  }
  nw_masque_options_add_extra_header(v12[5], a2, (uint64_t)v60);
  uint64_t v13 = v60;
  if (v60) {
LABEL_10:
  }
    free(v13);
LABEL_11:
}

void sub_1832CB378(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_context_remove_cache_entry(void *a1, uint64_t *a2)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1;
  if (v3)
  {
    unsigned int v4 = v3;
    if (a2)
    {
      id v5 = v3;
      id v6 = v5;
      if (((_BYTE)v5[17] & 8) == 0) {
        dispatch_assert_queue_V2(v5[1]);
      }

      unsigned int v4 = (void *)nw_context_copy_cache_context(v6);
      uint64_t v7 = a2[2];
      if (v7 || a2[3])
      {
        uint64_t v8 = *((void *)v4 + 3);
        int v9 = *(_DWORD *)(v8 + 64);
        if (v9) {
          *(_DWORD *)(v8 + 64) = v9 - 1;
        }
        id v10 = (void *)a2[3];
        if (v7)
        {
          *(void *)(v7 + 24) = v10;
          id v10 = (void *)a2[3];
        }
        else
        {
          *(void *)(v8 + 24) = v10;
        }
        *id v10 = v7;
        a2[2] = 0;
        a2[3] = 0;
      }
      uint64_t v11 = *a2;
      os_log_type_t v12 = (void *)a2[1];
      if (*a2)
      {
        *(void *)(v11 + 8) = v12;
        os_log_type_t v12 = (void *)a2[1];
      }
      else
      {
        *(void *)(*((void *)v4 + 3) + 8) = v12;
      }
      *os_log_type_t v12 = v11;
      *a2 = 0;
      a2[1] = 0;
      uint64_t v13 = *((void *)v4 + 3);
      int v14 = *(_DWORD *)(v13 + 68);
      if (v14) {
        *(_DWORD *)(v13 + 68) = v14 - 1;
      }
      goto LABEL_18;
    }
    os_log_type_t v19 = __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    os_log_type_t v34 = "nw_context_remove_cache_entry";
    os_log_type_t v20 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v31 = 0;
    if (!__nwlog_fault(v20, &type, &v31)) {
      goto LABEL_54;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v21 = __nwlog_obj();
      os_log_type_t v22 = type;
      if (os_log_type_enabled(v21, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v34 = "nw_context_remove_cache_entry";
        _os_log_impl(&dword_1830D4000, v21, v22, "%{public}s called with null cache_entry", buf, 0xCu);
      }
    }
    else if (v31)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v21 = __nwlog_obj();
      os_log_type_t v27 = type;
      BOOL v28 = os_log_type_enabled(v21, type);
      if (backtrace_string)
      {
        if (v28)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          os_log_type_t v34 = "nw_context_remove_cache_entry";
          __int16 v35 = 2082;
          char v36 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v21, v27, "%{public}s called with null cache_entry, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_54;
      }
      if (v28)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v34 = "nw_context_remove_cache_entry";
        _os_log_impl(&dword_1830D4000, v21, v27, "%{public}s called with null cache_entry, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v21 = __nwlog_obj();
      os_log_type_t v30 = type;
      if (os_log_type_enabled(v21, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v34 = "nw_context_remove_cache_entry";
        _os_log_impl(&dword_1830D4000, v21, v30, "%{public}s called with null cache_entry, backtrace limit exceeded", buf, 0xCu);
      }
    }

LABEL_54:
    if (v20) {
      free(v20);
    }
    goto LABEL_18;
  }
  uint64_t v15 = __nwlog_obj();
  *(_DWORD *)tcp_info buf = 136446210;
  os_log_type_t v34 = "nw_context_remove_cache_entry";
  id v16 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v31 = 0;
  if (__nwlog_fault(v16, &type, &v31))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v17 = __nwlog_obj();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v17, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v34 = "nw_context_remove_cache_entry";
        _os_log_impl(&dword_1830D4000, v17, v18, "%{public}s called with null context", buf, 0xCu);
      }
    }
    else if (v31)
    {
      os_log_type_t v23 = (char *)__nw_create_backtrace_string();
      os_log_type_t v17 = __nwlog_obj();
      os_log_type_t v24 = type;
      BOOL v25 = os_log_type_enabled(v17, type);
      if (v23)
      {
        if (v25)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          os_log_type_t v34 = "nw_context_remove_cache_entry";
          __int16 v35 = 2082;
          char v36 = v23;
          _os_log_impl(&dword_1830D4000, v17, v24, "%{public}s called with null context, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v23);
        goto LABEL_48;
      }
      if (v25)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v34 = "nw_context_remove_cache_entry";
        _os_log_impl(&dword_1830D4000, v17, v24, "%{public}s called with null context, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v17 = __nwlog_obj();
      os_log_type_t v29 = type;
      if (os_log_type_enabled(v17, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v34 = "nw_context_remove_cache_entry";
        _os_log_impl(&dword_1830D4000, v17, v29, "%{public}s called with null context, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_48:
  if (v16) {
    free(v16);
  }
  unsigned int v4 = 0;
LABEL_18:
}

void sub_1832CB8D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_protocol_definition_deallocate_cache_entry(void *a1, uint64_t a2)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  unsigned int v4 = v3;
  if (!v3)
  {
    uint64_t v7 = __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    os_log_type_t v29 = "nw_protocol_definition_deallocate_cache_entry";
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (!__nwlog_fault(v8, &type, &v26)) {
      goto LABEL_55;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v29 = "nw_protocol_definition_deallocate_cache_entry";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null definition", buf, 0xCu);
      }
    }
    else if (v26)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v9 = __nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          os_log_type_t v29 = "nw_protocol_definition_deallocate_cache_entry";
          __int16 v30 = 2082;
          char v31 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v16, "%{public}s called with null definition, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_55:
        if (!v8) {
          goto LABEL_5;
        }
LABEL_56:
        free(v8);
        goto LABEL_5;
      }
      if (v17)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v29 = "nw_protocol_definition_deallocate_cache_entry";
        _os_log_impl(&dword_1830D4000, v9, v16, "%{public}s called with null definition, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int v9 = __nwlog_obj();
      os_log_type_t v23 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v29 = "nw_protocol_definition_deallocate_cache_entry";
        _os_log_impl(&dword_1830D4000, v9, v23, "%{public}s called with null definition, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_54:

    goto LABEL_55;
  }
  uint64_t v5 = *((void *)v3 + 9);
  if (!v5)
  {
    uint64_t v11 = __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    os_log_type_t v29 = "nw_protocol_definition_deallocate_cache_entry";
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (!__nwlog_fault(v8, &type, &v26)) {
      goto LABEL_55;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v9 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v29 = "nw_protocol_definition_deallocate_cache_entry";
        _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null definition->common_state", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!v26)
    {
      int v9 = __nwlog_obj();
      os_log_type_t v24 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v29 = "nw_protocol_definition_deallocate_cache_entry";
        _os_log_impl(&dword_1830D4000, v9, v24, "%{public}s called with null definition->common_state, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    os_log_type_t v18 = (char *)__nw_create_backtrace_string();
    int v9 = __nwlog_obj();
    os_log_type_t v19 = type;
    BOOL v20 = os_log_type_enabled(v9, type);
    if (!v18)
    {
      if (v20)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v29 = "nw_protocol_definition_deallocate_cache_entry";
        _os_log_impl(&dword_1830D4000, v9, v19, "%{public}s called with null definition->common_state, no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v20)
    {
      *(_DWORD *)tcp_info buf = 136446466;
      os_log_type_t v29 = "nw_protocol_definition_deallocate_cache_entry";
      __int16 v30 = 2082;
      char v31 = v18;
      _os_log_impl(&dword_1830D4000, v9, v19, "%{public}s called with null definition->common_state, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_35;
  }
  id v6 = *(void (**)(id, uint64_t))(v5 + 56);
  if (!v6)
  {
    uint64_t v13 = __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    os_log_type_t v29 = "nw_protocol_definition_deallocate_cache_entry";
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (!__nwlog_fault(v8, &type, &v26)) {
      goto LABEL_55;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v9 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v29 = "nw_protocol_definition_deallocate_cache_entry";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null definition->common_state->deallocate_cache_entry", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!v26)
    {
      int v9 = __nwlog_obj();
      os_log_type_t v25 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v29 = "nw_protocol_definition_deallocate_cache_entry";
        _os_log_impl(&dword_1830D4000, v9, v25, "%{public}s called with null definition->common_state->deallocate_cache_entry, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    os_log_type_t v18 = (char *)__nw_create_backtrace_string();
    int v9 = __nwlog_obj();
    os_log_type_t v21 = type;
    BOOL v22 = os_log_type_enabled(v9, type);
    if (!v18)
    {
      if (v22)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v29 = "nw_protocol_definition_deallocate_cache_entry";
        _os_log_impl(&dword_1830D4000, v9, v21, "%{public}s called with null definition->common_state->deallocate_cache_entry, no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v22)
    {
      *(_DWORD *)tcp_info buf = 136446466;
      os_log_type_t v29 = "nw_protocol_definition_deallocate_cache_entry";
      __int16 v30 = 2082;
      char v31 = v18;
      _os_log_impl(&dword_1830D4000, v9, v21, "%{public}s called with null definition->common_state->deallocate_cache_entry, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_35:

    free(v18);
    if (!v8) {
      goto LABEL_5;
    }
    goto LABEL_56;
  }
  v6(v3, a2);
LABEL_5:
}

void sub_1832CBFB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_protocol_common_error(uint64_t a1, uint64_t a2)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    os_log_type_t v45 = "nw_protocol_common_error";
    uint64_t v3 = _os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v42 = 0;
    if (!__nwlog_fault((const char *)v3, &type, &v42)) {
      goto LABEL_46;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (!os_log_type_enabled(v14, type)) {
        goto LABEL_46;
      }
      *(_DWORD *)tcp_info buf = 136446210;
      os_log_type_t v45 = "nw_protocol_common_error";
      os_log_type_t v16 = "%{public}s called with null protocol";
      goto LABEL_44;
    }
    if (v42)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      BOOL v37 = os_log_type_enabled(v14, type);
      if (backtrace_string)
      {
        if (!v37) {
          goto LABEL_83;
        }
        *(_DWORD *)tcp_info buf = 136446466;
        os_log_type_t v45 = "nw_protocol_common_error";
        __int16 v46 = 2082;
        os_log_type_t v47 = backtrace_string;
        BOOL v38 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
        goto LABEL_82;
      }
      if (!v37) {
        goto LABEL_46;
      }
      *(_DWORD *)tcp_info buf = 136446210;
      os_log_type_t v45 = "nw_protocol_common_error";
      os_log_type_t v16 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      os_log_type_t v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (!os_log_type_enabled(v14, type)) {
        goto LABEL_46;
      }
      *(_DWORD *)tcp_info buf = 136446210;
      os_log_type_t v45 = "nw_protocol_common_error";
      os_log_type_t v16 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
LABEL_44:
    os_log_type_t v25 = v14;
    os_log_type_t v26 = v15;
LABEL_45:
    _os_log_impl(&dword_1830D4000, v25, v26, v16, buf, 0xCu);
    goto LABEL_46;
  }
  if (a2)
  {
    uint64_t v3 = *(void *)(a1 + 48);
    if (v3)
    {
      unsigned int v4 = *(void **)(v3 + 40);
      if (v4 == &nw_protocol_ref_counted_handle)
      {
        uint64_t v5 = *(void *)(v3 + 88);
        if (v5) {
          *(void *)(v3 + 88) = v5 + 1;
        }
      }
      id v6 = *(void **)(a2 + 40);
      if (v6 == &nw_protocol_ref_counted_handle)
      {
        uint64_t v7 = *(void *)(a2 + 88);
        if (v7) {
          *(void *)(a2 + 88) = v7 + 1;
        }
      }
      uint64_t v8 = *(void *)(v3 + 24);
      if (v8)
      {
        int v9 = *(void (**)(uint64_t, uint64_t))(v8 + 56);
        if (v9)
        {
          v9(v3, a2);
          goto LABEL_13;
        }
      }
      __nwlog_obj();
      os_log_type_t v27 = *(const char **)(v3 + 16);
      *(_DWORD *)tcp_info buf = 136446722;
      os_log_type_t v45 = "__nw_protocol_error";
      if (!v27) {
        os_log_type_t v27 = "invalid";
      }
      __int16 v46 = 2082;
      os_log_type_t v47 = (void *)v27;
      __int16 v48 = 2048;
      uint64_t v49 = v3;
      BOOL v28 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v42 = 0;
      if (__nwlog_fault(v28, &type, &v42))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          os_log_type_t v29 = __nwlog_obj();
          os_log_type_t v30 = type;
          if (!os_log_type_enabled(v29, type)) {
            goto LABEL_98;
          }
          char v31 = *(const char **)(v3 + 16);
          if (!v31) {
            char v31 = "invalid";
          }
          *(_DWORD *)tcp_info buf = 136446722;
          os_log_type_t v45 = "__nw_protocol_error";
          __int16 v46 = 2082;
          os_log_type_t v47 = (void *)v31;
          __int16 v48 = 2048;
          uint64_t v49 = v3;
          uint64_t v32 = "%{public}s protocol %{public}s (%p) has invalid error callback";
          goto LABEL_97;
        }
        if (!v42)
        {
          os_log_type_t v29 = __nwlog_obj();
          os_log_type_t v30 = type;
          if (!os_log_type_enabled(v29, type)) {
            goto LABEL_98;
          }
          BOOL v40 = *(const char **)(v3 + 16);
          if (!v40) {
            BOOL v40 = "invalid";
          }
          *(_DWORD *)tcp_info buf = 136446722;
          os_log_type_t v45 = "__nw_protocol_error";
          __int16 v46 = 2082;
          os_log_type_t v47 = (void *)v40;
          __int16 v48 = 2048;
          uint64_t v49 = v3;
          uint64_t v32 = "%{public}s protocol %{public}s (%p) has invalid error callback, backtrace limit exceeded";
          goto LABEL_97;
        }
        BOOL v33 = (char *)__nw_create_backtrace_string();
        os_log_type_t v29 = __nwlog_obj();
        os_log_type_t v30 = type;
        BOOL v34 = os_log_type_enabled(v29, type);
        if (v33)
        {
          if (v34)
          {
            __int16 v35 = *(const char **)(v3 + 16);
            if (!v35) {
              __int16 v35 = "invalid";
            }
            *(_DWORD *)tcp_info buf = 136446978;
            os_log_type_t v45 = "__nw_protocol_error";
            __int16 v46 = 2082;
            os_log_type_t v47 = (void *)v35;
            __int16 v48 = 2048;
            uint64_t v49 = v3;
            __int16 v50 = 2082;
            os_log_type_t v51 = v33;
            _os_log_impl(&dword_1830D4000, v29, v30, "%{public}s protocol %{public}s (%p) has invalid error callback, dumping backtrace:%{public}s", buf, 0x2Au);
          }
          free(v33);
          goto LABEL_98;
        }
        if (v34)
        {
          os_log_type_t v41 = *(const char **)(v3 + 16);
          if (!v41) {
            os_log_type_t v41 = "invalid";
          }
          *(_DWORD *)tcp_info buf = 136446722;
          os_log_type_t v45 = "__nw_protocol_error";
          __int16 v46 = 2082;
          os_log_type_t v47 = (void *)v41;
          __int16 v48 = 2048;
          uint64_t v49 = v3;
          uint64_t v32 = "%{public}s protocol %{public}s (%p) has invalid error callback, no backtrace";
LABEL_97:
          _os_log_impl(&dword_1830D4000, v29, v30, v32, buf, 0x20u);
        }
      }
LABEL_98:
      if (v28) {
        free(v28);
      }
LABEL_13:
      if (v6 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
      {
        uint64_t v21 = *(void *)(a2 + 88);
        if (v21)
        {
          uint64_t v22 = v21 - 1;
          *(void *)(a2 + 88) = v22;
          if (!v22)
          {
            os_log_type_t v23 = *(void (***)(void))(a2 + 64);
            if (v23)
            {
              *(void *)(a2 + 64) = 0;
              v23[2](v23);
              _Block_release(v23);
            }
            if (*(unsigned char *)(a2 + 72))
            {
              os_log_type_t v24 = *(const void **)(a2 + 64);
              if (v24) {
                _Block_release(v24);
              }
            }
            free((void *)a2);
          }
        }
      }
      if (v4 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(v3 + 40) == &nw_protocol_ref_counted_handle)
      {
        uint64_t v10 = *(void *)(v3 + 88);
        if (v10)
        {
          uint64_t v11 = v10 - 1;
          *(void *)(v3 + 88) = v11;
          if (!v11)
          {
            os_log_type_t v12 = *(void (***)(void))(v3 + 64);
            if (v12)
            {
              *(void *)(v3 + 64) = 0;
              v12[2](v12);
              _Block_release(v12);
            }
            if (*(unsigned char *)(v3 + 72))
            {
              uint64_t v13 = *(const void **)(v3 + 64);
              if (v13) {
                _Block_release(v13);
              }
            }
            goto LABEL_47;
          }
        }
      }
      return;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)tcp_info buf = 136446210;
    os_log_type_t v45 = "nw_protocol_common_error";
    uint64_t v3 = _os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v42 = 0;
    if (__nwlog_fault((const char *)v3, &type, &v42))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v14 = gLogObj;
        os_log_type_t v15 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
          goto LABEL_46;
        }
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v45 = "nw_protocol_common_error";
        os_log_type_t v16 = "%{public}s error requires a default input handler";
        goto LABEL_44;
      }
      if (!v42)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v14 = gLogObj;
        os_log_type_t v15 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
          goto LABEL_46;
        }
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v45 = "nw_protocol_common_error";
        os_log_type_t v16 = "%{public}s error requires a default input handler, backtrace limit exceeded";
        goto LABEL_44;
      }
      BOOL v17 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v18 = gLogObj;
      os_log_type_t v19 = type;
      BOOL v20 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (v17)
      {
        if (v20)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          os_log_type_t v45 = "nw_protocol_common_error";
          __int16 v46 = 2082;
          os_log_type_t v47 = v17;
          _os_log_impl(&dword_1830D4000, v18, v19, "%{public}s error requires a default input handler, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v17);
        if (v3) {
          goto LABEL_47;
        }
        return;
      }
      if (v20)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v45 = "nw_protocol_common_error";
        os_log_type_t v16 = "%{public}s error requires a default input handler, no backtrace";
        os_log_type_t v25 = v18;
        os_log_type_t v26 = v19;
        goto LABEL_45;
      }
    }
LABEL_46:
    if (!v3) {
      return;
    }
    goto LABEL_47;
  }
  __nwlog_obj();
  *(_DWORD *)tcp_info buf = 136446210;
  os_log_type_t v45 = "nw_protocol_common_error";
  uint64_t v3 = _os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v42 = 0;
  if (!__nwlog_fault((const char *)v3, &type, &v42)) {
    goto LABEL_46;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    os_log_type_t v14 = __nwlog_obj();
    os_log_type_t v15 = type;
    if (!os_log_type_enabled(v14, type)) {
      goto LABEL_46;
    }
    *(_DWORD *)tcp_info buf = 136446210;
    os_log_type_t v45 = "nw_protocol_common_error";
    os_log_type_t v16 = "%{public}s called with null other_protocol";
    goto LABEL_44;
  }
  if (!v42)
  {
    os_log_type_t v14 = __nwlog_obj();
    os_log_type_t v15 = type;
    if (!os_log_type_enabled(v14, type)) {
      goto LABEL_46;
    }
    *(_DWORD *)tcp_info buf = 136446210;
    os_log_type_t v45 = "nw_protocol_common_error";
    os_log_type_t v16 = "%{public}s called with null other_protocol, backtrace limit exceeded";
    goto LABEL_44;
  }
  backtrace_string = (char *)__nw_create_backtrace_string();
  os_log_type_t v14 = __nwlog_obj();
  os_log_type_t v15 = type;
  BOOL v39 = os_log_type_enabled(v14, type);
  if (!backtrace_string)
  {
    if (!v39) {
      goto LABEL_46;
    }
    *(_DWORD *)tcp_info buf = 136446210;
    os_log_type_t v45 = "nw_protocol_common_error";
    os_log_type_t v16 = "%{public}s called with null other_protocol, no backtrace";
    goto LABEL_44;
  }
  if (!v39) {
    goto LABEL_83;
  }
  *(_DWORD *)tcp_info buf = 136446466;
  os_log_type_t v45 = "nw_protocol_common_error";
  __int16 v46 = 2082;
  os_log_type_t v47 = backtrace_string;
  BOOL v38 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
LABEL_82:
  _os_log_impl(&dword_1830D4000, v14, v15, v38, buf, 0x16u);
LABEL_83:
  free(backtrace_string);
  if (v3) {
LABEL_47:
  }
    free((void *)v3);
}

uint64_t nw_tcp_options_get_persist_timeout(void *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (nw_protocol_options_is_tcp(v1))
  {
    *(void *)tcp_info buf = 0;
    *(void *)&buf[8] = buf;
    int v16 = 0;
    *(void *)&buf[16] = 0x2020000000;
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_tcp_options_get_persist_timeout_block_invoke;
    v12[3] = &unk_1E5248E90;
    void v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    uint64_t v2 = *(unsigned int *)(*(void *)&buf[8] + 24);
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  unsigned int v4 = __nwlog_obj();
  *(_DWORD *)tcp_info buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_tcp_options_get_persist_timeout";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_tcp_options_get_persist_timeout";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_options_is_tcp(options)", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_tcp_options_get_persist_timeout";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_tcp(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_tcp_options_get_persist_timeout";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_tcp(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_tcp_options_get_persist_timeout";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_options_is_tcp(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
  uint64_t v2 = 0;
LABEL_3:

  return v2;
}

void sub_1832CCC58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

uint64_t ___ZL33nw_endpoint_flow_attach_protocolsP30NWConcrete_nw_endpoint_handlerP11nw_protocolS2__block_invoke(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v316 = *MEMORY[0x1E4F143B8];
  id v8 = a3;
  id v9 = a4;
  uint64_t v293 = v9;
  id v294 = v8;
  if (nw_protocol_options_is_custom_ip(v9))
  {
    int minimize_logging = nw_endpoint_handler_get_minimize_logging(*(void **)(a1 + 32));
    char logging_disabled = nw_endpoint_handler_get_logging_disabled(*(void **)(a1 + 32));
    if (minimize_logging)
    {
      if ((logging_disabled & 1) == 0)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        os_log_type_t v12 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
        {
          id_string = nw_endpoint_handler_get_id_string(*(void **)(a1 + 32));
          uint64_t v211 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 32));
          nw_endpoint_t v212 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 32));
          logging_description = nw_endpoint_get_logging_description(v212);
          unint64_t v214 = nw_endpoint_handler_state_string(*(void **)(a1 + 32));
          __int16 v215 = nw_endpoint_handler_mode_string(*(void **)(a1 + 32));
          id v216 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 32));
          *(_DWORD *)tcp_info buf = 136448002;
          *(void *)&uint8_t buf[4] = "nw_endpoint_flow_attach_protocols_block_invoke";
          __int16 v300 = 2082;
          uint64_t v301 = (uint64_t)id_string;
          __int16 v302 = 2082;
          int v303 = v211;
          __int16 v304 = 2082;
          unint64_t v305 = (void *)logging_description;
          __int16 v306 = 2082;
          long long v307 = v214;
          __int16 v308 = 2082;
          int v309 = v215;
          __int16 v310 = 2114;
          id v311 = v216;
          __int16 v312 = 1024;
          LODWORD(v313) = nw_custom_ip_options_get_protocol(v293);
          _os_log_impl(&dword_1830D4000, v12, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Using custom IP protocol %u as a proxied protocol, not attaching any proxied transport", buf, 0x4Eu);
        }
        goto LABEL_8;
      }
    }
    else if ((logging_disabled & 1) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      os_log_type_t v12 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        char v13 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 32));
        os_log_type_t v14 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 32));
        nw_endpoint_t v15 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 32));
        int v16 = nw_endpoint_get_logging_description(v15);
        uint64_t v17 = nw_endpoint_handler_state_string(*(void **)(a1 + 32));
        os_log_type_t v18 = nw_endpoint_handler_mode_string(*(void **)(a1 + 32));
        id v19 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 32));
        *(_DWORD *)tcp_info buf = 136448002;
        *(void *)&uint8_t buf[4] = "nw_endpoint_flow_attach_protocols_block_invoke";
        __int16 v300 = 2082;
        uint64_t v301 = (uint64_t)v13;
        __int16 v302 = 2082;
        int v303 = v14;
        __int16 v304 = 2082;
        unint64_t v305 = (void *)v16;
        __int16 v306 = 2082;
        long long v307 = v17;
        __int16 v308 = 2082;
        int v309 = v18;
        __int16 v310 = 2114;
        id v311 = v19;
        __int16 v312 = 1024;
        LODWORD(v313) = nw_custom_ip_options_get_protocol(v293);
        _os_log_impl(&dword_1830D4000, v12, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Using custom IP protocol %u as a proxied protocol, not attaching any proxied transport", buf, 0x4Eu);
      }
LABEL_8:

LABEL_9:
      uint64_t v20 = 1;
      id v9 = v293;
      goto LABEL_193;
    }
LABEL_12:
    uint64_t v20 = 1;
    goto LABEL_193;
  }
  if (*(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 24))
  {
    uint64_t protocol_handle = nw_protocol_options_get_protocol_handle(v9);
    if (protocol_handle != *(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 24)) {
      goto LABEL_12;
    }
    *(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 24) = protocol_handle;
    uint64_t v32 = *(const char **)(*(void *)(*(void *)(a1 + 72) + 8) + 24);
    if (v32)
    {
      BOOL v33 = (void *)*((void *)v32 + 5);
      if (v33 == &nw_protocol_ref_counted_handle)
      {
        uint64_t v40 = *((void *)v32 + 11);
        if (v40) {
          *((void *)v32 + 11) = v40 + 1;
        }
        char v34 = -1;
      }
      else
      {
        char v34 = 0;
      }
      *(void *)os_log_type_t type = v32;
      char v297 = v34;
      uint64_t v41 = *((void *)v32 + 3);
      if (v41)
      {
        char v42 = *(void (**)(const char *))(v41 + 136);
        if (v42)
        {
          os_log_type_t v43 = v42(v32);
          if (v33 != &nw_protocol_ref_counted_handle) {
            goto LABEL_40;
          }
          goto LABEL_39;
        }
      }
      __int16 v217 = __nwlog_obj();
      BOOL v218 = (const char *)*((void *)v32 + 2);
      *(_DWORD *)tcp_info buf = 136446722;
      *(void *)&uint8_t buf[4] = "__nw_protocol_get_remote_endpoint";
      if (!v218) {
        BOOL v218 = "invalid";
      }
      __int16 v300 = 2082;
      uint64_t v301 = (uint64_t)v218;
      __int16 v302 = 2048;
      int v303 = v32;
      __int16 v219 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t v298 = OS_LOG_TYPE_ERROR;
      char v295 = 0;
      if (__nwlog_fault(v219, &v298, &v295))
      {
        if (v298 == OS_LOG_TYPE_FAULT)
        {
          unint64_t v220 = __nwlog_obj();
          os_log_type_t v221 = v298;
          if (os_log_type_enabled(v220, v298))
          {
            BOOL v222 = (const char *)*((void *)v32 + 2);
            if (!v222) {
              BOOL v222 = "invalid";
            }
            *(_DWORD *)tcp_info buf = 136446722;
            *(void *)&uint8_t buf[4] = "__nw_protocol_get_remote_endpoint";
            __int16 v300 = 2082;
            uint64_t v301 = (uint64_t)v222;
            __int16 v302 = 2048;
            int v303 = v32;
            _os_log_impl(&dword_1830D4000, v220, v221, "%{public}s protocol %{public}s (%p) has invalid get_remote_endpoint callback", buf, 0x20u);
          }
LABEL_285:

          goto LABEL_348;
        }
        if (!v295)
        {
          unint64_t v220 = __nwlog_obj();
          os_log_type_t v243 = v298;
          if (os_log_type_enabled(v220, v298))
          {
            __int16 v244 = (const char *)*((void *)v32 + 2);
            if (!v244) {
              __int16 v244 = "invalid";
            }
            *(_DWORD *)tcp_info buf = 136446722;
            *(void *)&uint8_t buf[4] = "__nw_protocol_get_remote_endpoint";
            __int16 v300 = 2082;
            uint64_t v301 = (uint64_t)v244;
            __int16 v302 = 2048;
            int v303 = v32;
            _os_log_impl(&dword_1830D4000, v220, v243, "%{public}s protocol %{public}s (%p) has invalid get_remote_endpoint callback, backtrace limit exceeded", buf, 0x20u);
          }
          goto LABEL_285;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        uint64_t v228 = __nwlog_obj();
        os_log_type_t v229 = v298;
        BOOL v230 = os_log_type_enabled(v228, v298);
        if (backtrace_string)
        {
          if (v230)
          {
            unint64_t v231 = (const char *)*((void *)v32 + 2);
            if (!v231) {
              unint64_t v231 = "invalid";
            }
            *(_DWORD *)tcp_info buf = 136446978;
            *(void *)&uint8_t buf[4] = "__nw_protocol_get_remote_endpoint";
            __int16 v300 = 2082;
            uint64_t v301 = (uint64_t)v231;
            __int16 v302 = 2048;
            int v303 = v32;
            __int16 v304 = 2082;
            unint64_t v305 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v228, v229, "%{public}s protocol %{public}s (%p) has invalid get_remote_endpoint callback, dumping backtrace:%{public}s", buf, 0x2Au);
          }

          free(backtrace_string);
        }
        else
        {
          if (v230)
          {
            v258 = (const char *)*((void *)v32 + 2);
            if (!v258) {
              v258 = "invalid";
            }
            *(_DWORD *)tcp_info buf = 136446722;
            *(void *)&uint8_t buf[4] = "__nw_protocol_get_remote_endpoint";
            __int16 v300 = 2082;
            uint64_t v301 = (uint64_t)v258;
            __int16 v302 = 2048;
            int v303 = v32;
            _os_log_impl(&dword_1830D4000, v228, v229, "%{public}s protocol %{public}s (%p) has invalid get_remote_endpoint callback, no backtrace", buf, 0x20u);
          }
        }
      }
LABEL_348:
      if (v219) {
        free(v219);
      }
      os_log_type_t v43 = 0;
      if (v33 != &nw_protocol_ref_counted_handle) {
        goto LABEL_40;
      }
LABEL_39:
      nw::release_if_needed<nw_protocol *>((uint64_t *)type);
LABEL_40:
      if (v43) {
        objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 88) + 8) + 40), v43);
      }
LABEL_42:
      *(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) = 0;

      goto LABEL_9;
    }
    __int16 v223 = __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    *(void *)&uint8_t buf[4] = "__nw_protocol_get_remote_endpoint";
    nw_endpoint_t v224 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t v298 = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v224, type, &v298))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __int16 v225 = __nwlog_obj();
        os_log_type_t v226 = type[0];
        if (os_log_type_enabled(v225, type[0]))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          *(void *)&uint8_t buf[4] = "__nw_protocol_get_remote_endpoint";
          _os_log_impl(&dword_1830D4000, v225, v226, "%{public}s called with null protocol", buf, 0xCu);
        }
      }
      else
      {
        if (v298)
        {
          v239 = (char *)__nw_create_backtrace_string();
          __int16 v240 = __nwlog_obj();
          os_log_type_t v241 = type[0];
          BOOL v242 = os_log_type_enabled(v240, type[0]);
          if (v239)
          {
            if (v242)
            {
              *(_DWORD *)tcp_info buf = 136446466;
              *(void *)&uint8_t buf[4] = "__nw_protocol_get_remote_endpoint";
              __int16 v300 = 2082;
              uint64_t v301 = (uint64_t)v239;
              _os_log_impl(&dword_1830D4000, v240, v241, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(v239);
          }
          else
          {
            if (v242)
            {
              *(_DWORD *)tcp_info buf = 136446210;
              *(void *)&uint8_t buf[4] = "__nw_protocol_get_remote_endpoint";
              _os_log_impl(&dword_1830D4000, v240, v241, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
            }
          }
          goto LABEL_374;
        }
        __int16 v225 = __nwlog_obj();
        os_log_type_t v259 = type[0];
        if (os_log_type_enabled(v225, type[0]))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          *(void *)&uint8_t buf[4] = "__nw_protocol_get_remote_endpoint";
          _os_log_impl(&dword_1830D4000, v225, v259, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_374:
    if (v224) {
      free(v224);
    }
    os_log_type_t v43 = 0;
    goto LABEL_42;
  }
  if (nw_protocol_definition_is_proxy(v8))
  {
    if (a2 && *(unsigned char *)(a1 + 136) && !*(unsigned char *)(*(void *)(*(void *)(a1 + 96) + 8) + 24))
    {
      uint64_t v22 = nw_endpoint_flow_add_one_protocol(*(void **)(a1 + 32), *(long long **)(a1 + 120), 0, 0, *(void **)(*(void *)(*(void *)(a1 + 88) + 8) + 40), *(void **)(a1 + 40), *(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 24));
      if (!v22)
      {
        if (nw_endpoint_handler_get_logging_disabled(*(void **)(a1 + 32))) {
          goto LABEL_192;
        }
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        __int16 v81 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v81, OS_LOG_TYPE_ERROR))
        {
          uint64_t v82 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 32));
          __int16 v83 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 32));
          nw_endpoint_t v84 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 32));
          __int16 v85 = nw_endpoint_get_logging_description(v84);
          os_log_type_t v86 = nw_endpoint_handler_state_string(*(void **)(a1 + 32));
          uint64_t v87 = nw_endpoint_handler_mode_string(*(void **)(a1 + 32));
          id v88 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 32));
          os_log_type_t v89 = *(char **)(a1 + 120);
          *(_DWORD *)tcp_info buf = 136448002;
          *(void *)&uint8_t buf[4] = "nw_endpoint_flow_attach_protocols_block_invoke";
          __int16 v300 = 2082;
          uint64_t v301 = (uint64_t)v82;
          __int16 v302 = 2082;
          int v303 = v83;
          __int16 v304 = 2082;
          unint64_t v305 = (void *)v85;
          __int16 v306 = 2082;
          long long v307 = v86;
          __int16 v308 = 2082;
          int v309 = v87;
          __int16 v310 = 2114;
          id v311 = v88;
          __int16 v312 = 2082;
          v313 = v89;
          _os_log_impl(&dword_1830D4000, v81, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Failed to attach filter protocol %{public}s", buf, 0x52u);
        }
LABEL_191:
        id v9 = v293;
        goto LABEL_192;
      }
      *(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 24) = v22;
      if ((nw_endpoint_handler_get_logging_disabled(*(void **)(a1 + 32)) & 1) == 0)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        os_log_type_t v23 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
        {
          os_log_type_t v24 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 32));
          os_log_type_t v25 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 32));
          nw_endpoint_t v289 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 32));
          os_log_type_t v26 = nw_endpoint_get_logging_description(v289);
          os_log_type_t v27 = nw_endpoint_handler_state_string(*(void **)(a1 + 32));
          BOOL v28 = nw_endpoint_handler_mode_string(*(void **)(a1 + 32));
          id v29 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 32));
          os_log_type_t v30 = *(char **)(a1 + 120);
          *(_DWORD *)tcp_info buf = 136448002;
          *(void *)&uint8_t buf[4] = "nw_endpoint_flow_attach_protocols_block_invoke";
          __int16 v300 = 2082;
          uint64_t v301 = (uint64_t)v24;
          __int16 v302 = 2082;
          int v303 = v25;
          __int16 v304 = 2082;
          unint64_t v305 = (void *)v26;
          __int16 v306 = 2082;
          long long v307 = v27;
          __int16 v308 = 2082;
          int v309 = v28;
          __int16 v310 = 2114;
          id v311 = v29;
          __int16 v312 = 2082;
          v313 = v30;
          _os_log_impl(&dword_1830D4000, v23, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Attached filter protocol: %{public}s", buf, 0x52u);
        }
        id v9 = v293;
      }
      *(unsigned char *)(*(void *)(*(void *)(a1 + 96) + 8) + 24) = 1;
    }
    if (nw_protocol_options_proxy_endpoint_should_override_stack(v9)) {
      char v31 = nw_protocol_options_copy_proxy_endpoint_for_stack(v9);
    }
    else {
      char v31 = nw_endpoint_copy_without_proxy_parent(*(void **)(a1 + 48));
    }
    uint64_t v35 = *(void *)(*(void *)(a1 + 88) + 8);
    char v36 = *(void **)(v35 + 40);
    *(void *)(v35 + 40) = v31;

    id v37 = nw_endpoint_handler_copy_context(*(void **)(a1 + 32));
    BOOL v38 = *(void **)(*(void *)(*(void *)(a1 + 88) + 8) + 40);
    if (*(unsigned char *)(*(void *)(*(void *)(a1 + 112) + 8) + 24)) {
      int v39 = 1;
    }
    else {
      int v39 = nw_parameters_get_use_enhanced_privacy_mode(*(void **)(a1 + 40)) ^ 1;
    }
    id v44 = nw_context_copy_registered_endpoint_internal(v37, v38, v39);
    uint64_t v45 = *(void *)(*(void *)(a1 + 88) + 8);
    __int16 v46 = *(void **)(v45 + 40);
    *(void *)(v45 + 40) = v44;

    *(unsigned char *)(*(void *)(*(void *)(a1 + 112) + 8) + 24) = 1;
    *(unsigned char *)(*(void *)(a1 + 56) + 35) |= 0x20u;

    id v8 = v294;
  }
  identifier = nw_protocol_definition_get_identifier(v8);
  uint64_t registered_endpoint = *(void *)(a1 + 128);
  if (registered_endpoint) {
    goto LABEL_123;
  }
  int v49 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 112) + 8) + 24);
  os_log_type_t v51 = *(void **)(a1 + 40);
  __int16 v50 = *(void **)(a1 + 48);
  uint64_t v52 = *(void **)(*(void *)(*(void *)(a1 + 88) + 8) + 40);
  id v53 = *(id *)(a1 + 32);
  id v287 = v50;
  id v286 = v52;
  id v290 = v51;
  v285 = v53;
  if (!v53)
  {
    unint64_t v232 = __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_endpoint_flow_find_protocol_to_join";
    os_log_type_t v71 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t v298 = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v71, type, &v298)) {
      goto LABEL_119;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      id v233 = __nwlog_obj();
      os_log_type_t v234 = type[0];
      if (os_log_type_enabled(v233, type[0]))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl(&dword_1830D4000, v233, v234, "%{public}s called with null handler", buf, 0xCu);
      }
      goto LABEL_399;
    }
    if (v298 == OS_LOG_TYPE_DEFAULT)
    {
      id v233 = __nwlog_obj();
      os_log_type_t v266 = type[0];
      if (os_log_type_enabled(v233, type[0]))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl(&dword_1830D4000, v233, v266, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_399;
    }
    BOOL v247 = (char *)__nw_create_backtrace_string();
    uint64_t v72 = __nwlog_obj();
    os_log_type_t v248 = type[0];
    BOOL v249 = os_log_type_enabled(v72, type[0]);
    if (!v247)
    {
      if (v249)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl(&dword_1830D4000, v72, v248, "%{public}s called with null handler, no backtrace", buf, 0xCu);
      }
      goto LABEL_118;
    }
    if (v249)
    {
      *(_DWORD *)tcp_info buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_endpoint_flow_find_protocol_to_join";
      __int16 v300 = 2082;
      uint64_t v301 = (uint64_t)v247;
      _os_log_impl(&dword_1830D4000, v72, v248, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_369;
  }
  os_log_type_t v54 = (unsigned int *)v53;
  uint64_t v55 = v54[29];

  if (v55 != 2)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v64 = (id)gLogObj;
    if (v55 > 5) {
      os_log_type_t v65 = "unknown-mode";
    }
    else {
      os_log_type_t v65 = off_1E523FB08[v55];
    }
    *(_DWORD *)tcp_info buf = 136446722;
    *(void *)&uint8_t buf[4] = "nw_endpoint_flow_find_protocol_to_join";
    __int16 v300 = 2082;
    uint64_t v301 = (uint64_t)v65;
    __int16 v302 = 2082;
    int v303 = "flow";
    os_log_type_t v71 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t v298 = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v71, type, &v298))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        uint64_t v72 = __nwlog_obj();
        os_log_type_t v73 = type[0];
        if (os_log_type_enabled(v72, type[0]))
        {
          if (v55 > 5) {
            char v74 = "unknown-mode";
          }
          else {
            char v74 = off_1E523FB08[v55];
          }
          *(_DWORD *)tcp_info buf = 136446722;
          *(void *)&uint8_t buf[4] = "nw_endpoint_flow_find_protocol_to_join";
          __int16 v300 = 2082;
          uint64_t v301 = (uint64_t)v74;
          __int16 v302 = 2082;
          int v303 = "flow";
          _os_log_impl(&dword_1830D4000, v72, v73, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
        }
        goto LABEL_118;
      }
      if (v298 == OS_LOG_TYPE_DEFAULT)
      {
        uint64_t v72 = __nwlog_obj();
        os_log_type_t v79 = type[0];
        if (os_log_type_enabled(v72, type[0]))
        {
          if (v55 > 5) {
            uint64_t v80 = "unknown-mode";
          }
          else {
            uint64_t v80 = off_1E523FB08[v55];
          }
          *(_DWORD *)tcp_info buf = 136446722;
          *(void *)&uint8_t buf[4] = "nw_endpoint_flow_find_protocol_to_join";
          __int16 v300 = 2082;
          uint64_t v301 = (uint64_t)v80;
          __int16 v302 = 2082;
          int v303 = "flow";
          _os_log_impl(&dword_1830D4000, v72, v79, "%{public}s Handler is in mode %{public}s, expected %{public}s, backtrace limit exceeded", buf, 0x20u);
        }
        goto LABEL_118;
      }
      os_log_type_t v75 = (char *)__nw_create_backtrace_string();
      uint64_t v72 = __nwlog_obj();
      os_log_type_t v76 = type[0];
      BOOL v77 = os_log_type_enabled(v72, type[0]);
      if (!v75)
      {
        if (v77)
        {
          if (v55 > 5) {
            uint64_t v90 = "unknown-mode";
          }
          else {
            uint64_t v90 = off_1E523FB08[v55];
          }
          *(_DWORD *)tcp_info buf = 136446722;
          *(void *)&uint8_t buf[4] = "nw_endpoint_flow_find_protocol_to_join";
          __int16 v300 = 2082;
          uint64_t v301 = (uint64_t)v90;
          __int16 v302 = 2082;
          int v303 = "flow";
          _os_log_impl(&dword_1830D4000, v72, v76, "%{public}s Handler is in mode %{public}s, expected %{public}s, no backtrace", buf, 0x20u);
        }
        goto LABEL_118;
      }
      if (v77)
      {
        if (v55 > 5) {
          BOOL v78 = "unknown-mode";
        }
        else {
          BOOL v78 = off_1E523FB08[v55];
        }
        *(_DWORD *)tcp_info buf = 136446978;
        *(void *)&uint8_t buf[4] = "nw_endpoint_flow_find_protocol_to_join";
        __int16 v300 = 2082;
        uint64_t v301 = (uint64_t)v78;
        __int16 v302 = 2082;
        int v303 = "flow";
        __int16 v304 = 2082;
        unint64_t v305 = v75;
        _os_log_impl(&dword_1830D4000, v72, v76, "%{public}s Handler is in mode %{public}s, expected %{public}s, dumping backtrace:%{public}s", buf, 0x2Au);
      }

      free(v75);
    }
LABEL_119:
    if (!v71)
    {
LABEL_121:
      uint64_t registered_endpoint = 0;
      goto LABEL_122;
    }
LABEL_120:
    free(v71);
    goto LABEL_121;
  }
  if (!identifier)
  {
    v245 = __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_endpoint_flow_find_protocol_to_join";
    os_log_type_t v71 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t v298 = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v71, type, &v298)) {
      goto LABEL_119;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      id v233 = __nwlog_obj();
      os_log_type_t v246 = type[0];
      if (os_log_type_enabled(v233, type[0]))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl(&dword_1830D4000, v233, v246, "%{public}s called with null identifier", buf, 0xCu);
      }
      goto LABEL_399;
    }
    if (v298 == OS_LOG_TYPE_DEFAULT)
    {
      id v233 = __nwlog_obj();
      os_log_type_t v268 = type[0];
      if (os_log_type_enabled(v233, type[0]))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl(&dword_1830D4000, v233, v268, "%{public}s called with null identifier, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_399;
    }
    BOOL v247 = (char *)__nw_create_backtrace_string();
    uint64_t v72 = __nwlog_obj();
    os_log_type_t v260 = type[0];
    BOOL v261 = os_log_type_enabled(v72, type[0]);
    if (!v247)
    {
      if (v261)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl(&dword_1830D4000, v72, v260, "%{public}s called with null identifier, no backtrace", buf, 0xCu);
      }
      goto LABEL_118;
    }
    if (v261)
    {
      *(_DWORD *)tcp_info buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_endpoint_flow_find_protocol_to_join";
      __int16 v300 = 2082;
      uint64_t v301 = (uint64_t)v247;
      _os_log_impl(&dword_1830D4000, v72, v260, "%{public}s called with null identifier, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_369;
  }
  if (!v286)
  {
    __int16 v250 = __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_endpoint_flow_find_protocol_to_join";
    os_log_type_t v71 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t v298 = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v71, type, &v298)) {
      goto LABEL_119;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      id v233 = __nwlog_obj();
      os_log_type_t v251 = type[0];
      if (os_log_type_enabled(v233, type[0]))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl(&dword_1830D4000, v233, v251, "%{public}s called with null endpoint", buf, 0xCu);
      }
      goto LABEL_399;
    }
    if (v298 == OS_LOG_TYPE_DEFAULT)
    {
      id v233 = __nwlog_obj();
      os_log_type_t v269 = type[0];
      if (os_log_type_enabled(v233, type[0]))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl(&dword_1830D4000, v233, v269, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_399;
    }
    BOOL v247 = (char *)__nw_create_backtrace_string();
    uint64_t v72 = __nwlog_obj();
    os_log_type_t v262 = type[0];
    BOOL v263 = os_log_type_enabled(v72, type[0]);
    if (!v247)
    {
      if (v263)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl(&dword_1830D4000, v72, v262, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
      goto LABEL_118;
    }
    if (v263)
    {
      *(_DWORD *)tcp_info buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_endpoint_flow_find_protocol_to_join";
      __int16 v300 = 2082;
      uint64_t v301 = (uint64_t)v247;
      _os_log_impl(&dword_1830D4000, v72, v262, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_369:

    free(v247);
    if (!v71) {
      goto LABEL_121;
    }
    goto LABEL_120;
  }
  if (!v290)
  {
    nw_endpoint_t v252 = __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_endpoint_flow_find_protocol_to_join";
    os_log_type_t v71 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t v298 = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v71, type, &v298)) {
      goto LABEL_119;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      id v233 = __nwlog_obj();
      os_log_type_t v253 = type[0];
      if (os_log_type_enabled(v233, type[0]))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl(&dword_1830D4000, v233, v253, "%{public}s called with null parameters", buf, 0xCu);
      }
LABEL_399:

      goto LABEL_119;
    }
    if (v298 == OS_LOG_TYPE_DEFAULT)
    {
      id v233 = __nwlog_obj();
      os_log_type_t v270 = type[0];
      if (os_log_type_enabled(v233, type[0]))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl(&dword_1830D4000, v233, v270, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_399;
    }
    BOOL v247 = (char *)__nw_create_backtrace_string();
    uint64_t v72 = __nwlog_obj();
    os_log_type_t v264 = type[0];
    BOOL v265 = os_log_type_enabled(v72, type[0]);
    if (v247)
    {
      if (v265)
      {
        *(_DWORD *)tcp_info buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_endpoint_flow_find_protocol_to_join";
        __int16 v300 = 2082;
        uint64_t v301 = (uint64_t)v247;
        _os_log_impl(&dword_1830D4000, v72, v264, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_369;
    }
    if (v265)
    {
      *(_DWORD *)tcp_info buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_endpoint_flow_find_protocol_to_join";
      _os_log_impl(&dword_1830D4000, v72, v264, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
    }
LABEL_118:

    goto LABEL_119;
  }
  os_unfair_lock_lock(&nw_protocol_registrar_lock);
  os_log_type_t v56 = &g_registration_list;
  do
  {
    os_log_type_t v56 = (uint64_t *)*v56;
    if (!v56)
    {
      os_unfair_lock_unlock(&nw_protocol_registrar_lock);
      goto LABEL_75;
    }
  }
  while (*(void *)identifier != v56[4]
       || *((void *)identifier + 1) != v56[5]
       || *((void *)identifier + 2) != v56[6]
       || *((void *)identifier + 3) != v56[7]
       || *((void *)identifier + 4) != v56[8]);
  uint64_t v61 = v56[13];
  os_unfair_lock_unlock(&nw_protocol_registrar_lock);
  if (!v61)
  {
LABEL_75:
    if (gLogDatapath && (nw_endpoint_handler_get_logging_disabled(v54) & 1) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      uint64_t v66 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v66, OS_LOG_TYPE_DEBUG))
      {
        unint64_t v283 = nw_endpoint_handler_get_id_string(v54);
        int v281 = nw_endpoint_handler_dry_run_string(v54);
        nw_endpoint_t v67 = nw_endpoint_handler_copy_endpoint(v54);
        v279 = nw_endpoint_get_logging_description(v67);
        os_log_type_t v68 = nw_endpoint_handler_state_string(v54);
        BOOL v69 = nw_endpoint_handler_mode_string(v54);
        id v70 = nw_endpoint_handler_copy_current_path(v54);
        *(_DWORD *)tcp_info buf = 136448258;
        *(void *)&uint8_t buf[4] = "nw_endpoint_flow_find_protocol_to_join";
        __int16 v300 = 2082;
        uint64_t v301 = (uint64_t)v283;
        __int16 v302 = 2082;
        int v303 = v281;
        __int16 v304 = 2082;
        unint64_t v305 = (void *)v279;
        __int16 v306 = 2082;
        long long v307 = v68;
        __int16 v308 = 2082;
        int v309 = v69;
        __int16 v310 = 2114;
        id v311 = v70;
        __int16 v312 = 2080;
        v313 = identifier;
        __int16 v314 = 2048;
        uint64_t v315 = (uint64_t)identifier;
        _os_log_impl(&dword_1830D4000, v66, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] protocol %s (%p) does not have accept function, cannot search for protocol to join", buf, 0x5Cu);
      }
    }
    goto LABEL_121;
  }
  id v62 = v286;
  os_log_type_t v63 = v62;
  while (1)
  {
    uint64_t registered_endpoint = nw_protocol_instance_registrar_search_for_instance_to_join((uint64_t)identifier, a2, v287, v63, v62, v290, v49 != 0);
    if (registered_endpoint) {
      break;
    }
    uint64_t registered_endpoint = (uint64_t)nw_protocol_instance_registrar_copy_next_registered_endpoint(v63, v49 != 0);

    os_log_type_t v63 = (void *)registered_endpoint;
    if (!registered_endpoint) {
      goto LABEL_97;
    }
  }
  if (gLogDatapath && (nw_endpoint_handler_get_logging_disabled(v54) & 1) == 0)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
    }
    v271 = (id)gconnectionLogObj;
    if (os_log_type_enabled(v271, OS_LOG_TYPE_DEBUG))
    {
      char v282 = nw_endpoint_handler_get_id_string(v54);
      v280 = nw_endpoint_handler_dry_run_string(v54);
      nw_endpoint_t v284 = nw_endpoint_handler_copy_endpoint(v54);
      v278 = nw_endpoint_get_logging_description(v284);
      unint64_t v272 = nw_endpoint_handler_state_string(v54);
      unint64_t v273 = nw_endpoint_handler_mode_string(v54);
      id v274 = nw_endpoint_handler_copy_current_path(v54);
      nw_endpoint_t v275 = v274;
      *(void *)&uint8_t buf[4] = "nw_endpoint_flow_find_protocol_to_join";
      int v276 = "invalid";
      BOOL v277 = *(const char **)(registered_endpoint + 16);
      *(_DWORD *)tcp_info buf = 136448258;
      if (v277) {
        int v276 = v277;
      }
      __int16 v300 = 2082;
      uint64_t v301 = (uint64_t)v282;
      __int16 v302 = 2082;
      int v303 = v280;
      __int16 v304 = 2082;
      unint64_t v305 = (void *)v278;
      __int16 v306 = 2082;
      long long v307 = v272;
      __int16 v308 = 2082;
      int v309 = v273;
      __int16 v310 = 2114;
      id v311 = v274;
      __int16 v312 = 2080;
      v313 = (char *)v276;
      __int16 v314 = 2048;
      uint64_t v315 = registered_endpoint;
      _os_log_impl(&dword_1830D4000, v271, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] returning protocol to join %s (%p)", buf, 0x5Cu);
    }
  }
LABEL_97:

LABEL_122:
  if (!registered_endpoint)
  {
LABEL_129:
    id v9 = v293;
    uint64_t protocol_for_definition = nw_endpoint_handler_create_protocol_for_definition((uint64_t)identifier, v294, *(void **)(*(void *)(*(void *)(a1 + 88) + 8) + 40), *(void **)(a1 + 40));
    __int16 v93 = *(void **)(a1 + 32);
    if (!protocol_for_definition)
    {
      if (nw_endpoint_handler_get_logging_disabled(v93)) {
        goto LABEL_192;
      }
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      BOOL v100 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v100, OS_LOG_TYPE_ERROR))
      {
        os_log_type_t v101 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 32));
        os_log_type_t v102 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 32));
        nw_endpoint_t v103 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 32));
        BOOL v104 = nw_endpoint_get_logging_description(v103);
        unint64_t v105 = nw_endpoint_handler_state_string(*(void **)(a1 + 32));
        os_log_type_t v106 = nw_endpoint_handler_mode_string(*(void **)(a1 + 32));
        id v107 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 32));
        *(_DWORD *)tcp_info buf = 136448002;
        *(void *)&uint8_t buf[4] = "nw_endpoint_flow_attach_protocols_block_invoke";
        __int16 v300 = 2082;
        uint64_t v301 = (uint64_t)v101;
        __int16 v302 = 2082;
        int v303 = v102;
        __int16 v304 = 2082;
        unint64_t v305 = (void *)v104;
        __int16 v306 = 2082;
        long long v307 = v105;
        __int16 v308 = 2082;
        int v309 = v106;
        __int16 v310 = 2114;
        id v311 = v107;
        __int16 v312 = 2082;
        v313 = identifier;
        _os_log_impl(&dword_1830D4000, v100, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Failed to create application protocol handler: %{public}s", buf, 0x52u);
      }
      goto LABEL_190;
    }
    nw_endpoint_handler_set_protocol_instance(v93, v293, v294, protocol_for_definition);
    uint64_t v94 = *(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 24);
    if (v94)
    {
      if (protocol_for_definition != v94)
      {
        uint64_t v95 = *(void **)(protocol_for_definition + 24);
        if (v95 && *v95)
        {
          if (nw_protocol_add_input_handler(protocol_for_definition, v94))
          {
            if (nw_protocol_definition_get_message_is_stream(v294))
            {
              uint64_t v96 = *(void *)(a1 + 56);
              if (!*(void *)(v96 + 768))
              {
                objc_storeStrong((id *)(v96 + 768), a3);
                if (*(_UNKNOWN **)(protocol_for_definition + 40) == &nw_protocol_ref_counted_handle)
                {
                  uint64_t v176 = *(void *)(protocol_for_definition + 88);
                  id v9 = v293;
                  if (v176) {
                    *(void *)(protocol_for_definition + 88) = v176 + 1;
                  }
                  *(void *)tcp_info buf = protocol_for_definition;
                  buf[8] |= 1u;
                }
                else
                {
                  *(void *)tcp_info buf = protocol_for_definition;
                  buf[8] &= ~1u;
                  id v9 = v293;
                }
                nw::retained_ptr<nw_protocol *>::operator=(*(void *)(a1 + 56) + 776, (uint64_t)buf);
                if (buf[8]) {
                  nw::release_if_needed<nw_protocol *>((uint64_t *)buf);
                }
                uint64_t v177 = *(void *)(protocol_for_definition + 24);
                if (v177)
                {
                  nw_endpoint_t v178 = *(uint64_t (**)(uint64_t, uint64_t, void))(v177 + 232);
                  if (v178)
                  {
                    uint64_t v179 = *(void *)(a1 + 56) + 440;
                    id v180 = *(void **)(protocol_for_definition + 40);
                    if (v180 == &nw_protocol_ref_counted_handle)
                    {
                      uint64_t v190 = *(void *)(protocol_for_definition + 88);
                      if (v190) {
                        *(void *)(protocol_for_definition + 88) = v190 + 1;
                      }
                      *(void *)tcp_info buf = protocol_for_definition;
                      char v181 = buf[8] | 1;
                    }
                    else
                    {
                      *(void *)tcp_info buf = protocol_for_definition;
                      char v181 = buf[8] & 0xFE;
                    }
                    buf[8] = v181;
                    char v191 = v178(protocol_for_definition, v179, 0);
                    if (v180 == &nw_protocol_ref_counted_handle) {
                      nw::release_if_needed<nw_protocol *>((uint64_t *)buf);
                    }
                    if ((v191 & 1) == 0 && (nw_endpoint_handler_get_logging_disabled(*(void **)(a1 + 32)) & 1) == 0)
                    {
                      if (__nwlog_connection_log::onceToken != -1) {
                        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
                      }
                      nw_endpoint_t v192 = (id)gconnectionLogObj;
                      if (os_log_type_enabled(v192, OS_LOG_TYPE_ERROR))
                      {
                        os_log_type_t v193 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 32));
                        BOOL v194 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 32));
                        nw_endpoint_t v292 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 32));
                        unint64_t v195 = nw_endpoint_get_logging_description(v292);
                        os_log_type_t v196 = nw_endpoint_handler_state_string(*(void **)(a1 + 32));
                        BOOL v197 = nw_endpoint_handler_mode_string(*(void **)(a1 + 32));
                        id v198 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 32));
                        os_log_type_t v199 = v198;
                        os_log_type_t v200 = "invalid";
                        nw_endpoint_t v201 = *(const char **)(*(void *)(a1 + 56) + 392);
                        if (!v201) {
                          nw_endpoint_t v201 = "invalid";
                        }
                        if (*(void *)(protocol_for_definition + 16)) {
                          os_log_type_t v200 = *(const char **)(protocol_for_definition + 16);
                        }
                        *(_DWORD *)tcp_info buf = 136448258;
                        *(void *)&uint8_t buf[4] = "nw_endpoint_flow_attach_protocols_block_invoke";
                        __int16 v300 = 2082;
                        uint64_t v301 = (uint64_t)v193;
                        __int16 v302 = 2082;
                        int v303 = v194;
                        __int16 v304 = 2082;
                        unint64_t v305 = (void *)v195;
                        __int16 v306 = 2082;
                        long long v307 = v196;
                        __int16 v308 = 2082;
                        int v309 = v197;
                        __int16 v310 = 2114;
                        id v311 = v198;
                        __int16 v312 = 2082;
                        v313 = (char *)v201;
                        __int16 v314 = 2082;
                        uint64_t v315 = (uint64_t)v200;
                        _os_log_impl(&dword_1830D4000, v192, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Failed to add protocol %{public}s as a listener to %{public}s", buf, 0x5Cu);
                      }
                      id v9 = v293;
                    }
                  }
                }
              }
            }
            if (*((_DWORD *)identifier + 9) == 2
              && nw_protocol_registrar_get_accept_function_for_identifier(identifier))
            {
              *(void *)(*(void *)(a1 + 56) + 736) = *(void *)(*(void *)(*(void *)(*(void *)(a1 + 80) + 8)
                                                                                + 24)
                                                                    + 32);
            }
            uint64_t v97 = *(void *)(a1 + 56);
            if (!*(void *)(v97 + 744) && *(unsigned char *)(*(void *)(*(void *)(a1 + 112) + 8) + 24)) {
              *(void *)(v97 + 744) = *(void *)(*(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 24) + 32);
            }
            id v98 = *(id *)(a1 + 64);
            if (v98 && v98 == v9)
            {
              os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 56) + 880));
              uint64_t v99 = *(void *)(a1 + 56);
              if (*(void *)(v99 + 720))
              {
                os_unfair_lock_unlock((os_unfair_lock_t)(v99 + 880));
              }
              else
              {
                if (*(_UNKNOWN **)(protocol_for_definition + 40) == &nw_protocol_ref_counted_handle)
                {
                  uint64_t v129 = *(void *)(protocol_for_definition + 88);
                  if (v129)
                  {
                    *(void *)(protocol_for_definition + 88) = v129 + 1;
                    uint64_t v99 = *(void *)(a1 + 56);
                  }
                  *(void *)tcp_info buf = protocol_for_definition;
                  char v128 = buf[8] | 1;
                }
                else
                {
                  *(void *)tcp_info buf = protocol_for_definition;
                  char v128 = buf[8] & 0xFE;
                }
                buf[8] = v128;
                nw::retained_ptr<nw_protocol *>::operator=(v99 + 720, (uint64_t)buf);
                if (buf[8]) {
                  nw::release_if_needed<nw_protocol *>((uint64_t *)buf);
                }
                os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 56) + 880));
                if ((nw_endpoint_handler_get_logging_disabled(*(void **)(a1 + 32)) & 1) == 0)
                {
                  if (__nwlog_connection_log::onceToken != -1) {
                    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
                  }
                  int v130 = (id)gconnectionLogObj;
                  if (os_log_type_enabled(v130, OS_LOG_TYPE_DEBUG))
                  {
                    os_log_type_t v131 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 32));
                    nw_endpoint_t v132 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 32));
                    nw_endpoint_t v133 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 32));
                    nw_endpoint_t v134 = nw_endpoint_get_logging_description(v133);
                    nw_endpoint_t v135 = nw_endpoint_handler_state_string(*(void **)(a1 + 32));
                    nw_endpoint_t v136 = nw_endpoint_handler_mode_string(*(void **)(a1 + 32));
                    id v137 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 32));
                    *(_DWORD *)tcp_info buf = 136448002;
                    *(void *)&uint8_t buf[4] = "nw_endpoint_flow_attach_protocols_block_invoke";
                    __int16 v300 = 2082;
                    uint64_t v301 = (uint64_t)v131;
                    __int16 v302 = 2082;
                    int v303 = v132;
                    __int16 v304 = 2082;
                    unint64_t v305 = (void *)v134;
                    __int16 v306 = 2082;
                    long long v307 = v135;
                    __int16 v308 = 2082;
                    int v309 = v136;
                    __int16 v310 = 2114;
                    id v311 = v137;
                    __int16 v312 = 2082;
                    v313 = identifier;
                    _os_log_impl(&dword_1830D4000, v130, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Saved effective transport protocol: %{public}s", buf, 0x52u);
                  }
                  id v9 = v293;
                }
              }
            }
            *(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 24) = *(void *)(*(void *)(*(void *)(*(void *)(a1 + 80) + 8)
                                                                                                + 24)
                                                                                    + 32);
            uint64_t v138 = *(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 24);
            char v139 = nw_endpoint_handler_get_logging_disabled(*(void **)(a1 + 32));
            if (v138)
            {
              if ((v139 & 1) == 0)
              {
                if (__nwlog_connection_log::onceToken != -1) {
                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
                }
                os_log_type_t v140 = (id)gconnectionLogObj;
                if (os_log_type_enabled(v140, OS_LOG_TYPE_DEBUG))
                {
                  nw_endpoint_t v141 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 32));
                  uint64_t v142 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 32));
                  nw_endpoint_t v143 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 32));
                  BOOL v144 = nw_endpoint_get_logging_description(v143);
                  os_log_type_t v145 = nw_endpoint_handler_state_string(*(void **)(a1 + 32));
                  os_log_type_t v146 = nw_endpoint_handler_mode_string(*(void **)(a1 + 32));
                  id v147 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 32));
                  *(_DWORD *)tcp_info buf = 136448002;
                  *(void *)&uint8_t buf[4] = "nw_endpoint_flow_attach_protocols_block_invoke";
                  __int16 v300 = 2082;
                  uint64_t v301 = (uint64_t)v141;
                  __int16 v302 = 2082;
                  int v303 = v142;
                  __int16 v304 = 2082;
                  unint64_t v305 = (void *)v144;
                  __int16 v306 = 2082;
                  long long v307 = v145;
                  __int16 v308 = 2082;
                  int v309 = v146;
                  __int16 v310 = 2114;
                  id v311 = v147;
                  __int16 v312 = 2082;
                  v313 = identifier;
                  _os_log_impl(&dword_1830D4000, v140, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Attached application protocol: %{public}s", buf, 0x52u);
                }
                goto LABEL_9;
              }
              goto LABEL_12;
            }
            if ((v139 & 1) == 0)
            {
              if (__nwlog_connection_log::onceToken != -1) {
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
              }
              id v148 = (id)gconnectionLogObj;
              __int16 v149 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 32));
              os_log_type_t v150 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 32));
              nw_endpoint_t v151 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 32));
              os_log_type_t v152 = nw_endpoint_get_logging_description(v151);
              BOOL v153 = nw_endpoint_handler_state_string(*(void **)(a1 + 32));
              os_log_type_t v154 = nw_endpoint_handler_mode_string(*(void **)(a1 + 32));
              id v155 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 32));
              *(_DWORD *)tcp_info buf = 136447746;
              *(void *)&uint8_t buf[4] = "nw_endpoint_flow_attach_protocols_block_invoke";
              __int16 v300 = 2082;
              uint64_t v301 = (uint64_t)v149;
              __int16 v302 = 2082;
              int v303 = v150;
              __int16 v304 = 2082;
              unint64_t v305 = (void *)v152;
              __int16 v306 = 2082;
              long long v307 = v153;
              __int16 v308 = 2082;
              int v309 = v154;
              __int16 v310 = 2114;
              id v311 = v155;
              unint64_t v291 = (const char *)_os_log_send_and_compose_impl();

              type[0] = OS_LOG_TYPE_ERROR;
              os_log_type_t v298 = OS_LOG_TYPE_DEFAULT;
              __int16 v156 = (char *)v291;
              if ((__nwlog_fault(v291, type, &v298) & 1) == 0) {
                goto LABEL_269;
              }
              if (type[0] == OS_LOG_TYPE_FAULT)
              {
                if (__nwlog_connection_log::onceToken != -1) {
                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
                }
                char v157 = (id)gconnectionLogObj;
                os_log_type_t v158 = type[0];
                if (os_log_type_enabled(v157, type[0]))
                {
                  os_log_type_t v159 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 32));
                  __int16 v160 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 32));
                  nw_endpoint_t v161 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 32));
                  os_log_type_t v162 = nw_endpoint_get_logging_description(v161);
                  BOOL v163 = nw_endpoint_handler_state_string(*(void **)(a1 + 32));
                  int v164 = nw_endpoint_handler_mode_string(*(void **)(a1 + 32));
                  id v165 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 32));
                  *(_DWORD *)tcp_info buf = 136447746;
                  *(void *)&uint8_t buf[4] = "nw_endpoint_flow_attach_protocols_block_invoke";
                  __int16 v300 = 2082;
                  uint64_t v301 = (uint64_t)v159;
                  __int16 v302 = 2082;
                  int v303 = v160;
                  __int16 v304 = 2082;
                  unint64_t v305 = (void *)v162;
                  __int16 v306 = 2082;
                  long long v307 = v163;
                  __int16 v308 = 2082;
                  int v309 = v164;
                  __int16 v310 = 2114;
                  id v311 = v165;
                  _os_log_impl(&dword_1830D4000, v157, v158, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Next protocol is NULL", buf, 0x48u);
                }
              }
              else if (v298)
              {
                char v166 = __nw_create_backtrace_string();
                if (v166)
                {
                  id v167 = (char *)v166;
                  if (__nwlog_connection_log::onceToken != -1) {
                    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
                  }
                  uint64_t v168 = (id)gconnectionLogObj;
                  os_log_type_t v169 = type[0];
                  if (os_log_type_enabled(v168, type[0]))
                  {
                    BOOL v170 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 32));
                    nw_endpoint_t v171 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 32));
                    nw_endpoint_t v288 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 32));
                    uint64_t v172 = nw_endpoint_get_logging_description(v288);
                    char v173 = nw_endpoint_handler_state_string(*(void **)(a1 + 32));
                    BOOL v174 = nw_endpoint_handler_mode_string(*(void **)(a1 + 32));
                    id v175 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 32));
                    *(_DWORD *)tcp_info buf = 136448002;
                    *(void *)&uint8_t buf[4] = "nw_endpoint_flow_attach_protocols_block_invoke";
                    __int16 v300 = 2082;
                    uint64_t v301 = (uint64_t)v170;
                    __int16 v302 = 2082;
                    int v303 = v171;
                    __int16 v304 = 2082;
                    unint64_t v305 = (void *)v172;
                    __int16 v306 = 2082;
                    long long v307 = v173;
                    __int16 v308 = 2082;
                    int v309 = v174;
                    __int16 v310 = 2114;
                    id v311 = v175;
                    __int16 v312 = 2082;
                    v313 = v167;
                    _os_log_impl(&dword_1830D4000, v168, v169, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Next protocol is NULL, dumping backtrace:%{public}s", buf, 0x52u);
                  }
                  free(v167);
                  goto LABEL_268;
                }
                if (__nwlog_connection_log::onceToken != -1) {
                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
                }
                char v157 = (id)gconnectionLogObj;
                os_log_type_t v202 = type[0];
                if (os_log_type_enabled(v157, type[0]))
                {
                  nw_endpoint_t v203 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 32));
                  os_log_type_t v204 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 32));
                  nw_endpoint_t v205 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 32));
                  os_log_type_t v206 = nw_endpoint_get_logging_description(v205);
                  int v207 = nw_endpoint_handler_state_string(*(void **)(a1 + 32));
                  BOOL v208 = nw_endpoint_handler_mode_string(*(void **)(a1 + 32));
                  id v209 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 32));
                  *(_DWORD *)tcp_info buf = 136447746;
                  *(void *)&uint8_t buf[4] = "nw_endpoint_flow_attach_protocols_block_invoke";
                  __int16 v300 = 2082;
                  uint64_t v301 = (uint64_t)v203;
                  __int16 v302 = 2082;
                  int v303 = v204;
                  __int16 v304 = 2082;
                  unint64_t v305 = (void *)v206;
                  __int16 v306 = 2082;
                  long long v307 = v207;
                  __int16 v308 = 2082;
                  int v309 = v208;
                  __int16 v310 = 2114;
                  id v311 = v209;
                  _os_log_impl(&dword_1830D4000, v157, v202, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Next protocol is NULL, no backtrace", buf, 0x48u);
                }
              }
              else
              {
                if (__nwlog_connection_log::onceToken != -1) {
                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
                }
                char v157 = (id)gconnectionLogObj;
                os_log_type_t v182 = type[0];
                if (os_log_type_enabled(v157, type[0]))
                {
                  os_log_type_t v183 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 32));
                  unint64_t v184 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 32));
                  nw_endpoint_t v185 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 32));
                  BOOL v186 = nw_endpoint_get_logging_description(v185);
                  int v187 = nw_endpoint_handler_state_string(*(void **)(a1 + 32));
                  v188 = nw_endpoint_handler_mode_string(*(void **)(a1 + 32));
                  id v189 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 32));
                  *(_DWORD *)tcp_info buf = 136447746;
                  *(void *)&uint8_t buf[4] = "nw_endpoint_flow_attach_protocols_block_invoke";
                  __int16 v300 = 2082;
                  uint64_t v301 = (uint64_t)v183;
                  __int16 v302 = 2082;
                  int v303 = v184;
                  __int16 v304 = 2082;
                  unint64_t v305 = (void *)v186;
                  __int16 v306 = 2082;
                  long long v307 = v187;
                  __int16 v308 = 2082;
                  int v309 = v188;
                  __int16 v310 = 2114;
                  id v311 = v189;
                  _os_log_impl(&dword_1830D4000, v157, v182, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Next protocol is NULL, backtrace limit exceeded", buf, 0x48u);
                }
              }

LABEL_268:
              __int16 v156 = (char *)v291;
LABEL_269:
              id v9 = v293;
              if (v156) {
                free(v156);
              }
            }
LABEL_192:
            uint64_t v20 = 0;
            *(unsigned char *)(*(void *)(*(void *)(a1 + 104) + 8) + 24) = 1;
            goto LABEL_193;
          }
          goto LABEL_185;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        unint64_t v112 = (id)gLogObj;
        if (os_log_type_enabled(v112, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)tcp_info buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_utilities_add_input_handler";
          __int16 v300 = 2048;
          uint64_t v301 = protocol_for_definition;
          _os_log_impl(&dword_1830D4000, v112, OS_LOG_TYPE_ERROR, "%{public}s Unable to invoke add_input_handler on protocol %p because it is not valid", buf, 0x16u);
        }

        goto LABEL_162;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v108 = (id)gLogObj;
      *(_DWORD *)tcp_info buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_protocol_utilities_add_input_handler";
      __int16 v300 = 2048;
      uint64_t v301 = protocol_for_definition;
      os_log_type_t v109 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      os_log_type_t v298 = OS_LOG_TYPE_DEFAULT;
      if (__nwlog_fault(v109, type, &v298))
      {
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          uint64_t v110 = __nwlog_obj();
          os_log_type_t v111 = type[0];
          if (os_log_type_enabled(v110, type[0]))
          {
            *(_DWORD *)tcp_info buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_protocol_utilities_add_input_handler";
            __int16 v300 = 2048;
            uint64_t v301 = protocol_for_definition;
            _os_log_impl(&dword_1830D4000, v110, v111, "%{public}s Cannot add input handler %p to itself", buf, 0x16u);
          }
        }
        else
        {
          if (v298)
          {
            BOOL v114 = (char *)__nw_create_backtrace_string();
            os_log_type_t v115 = __nwlog_obj();
            os_log_type_t v116 = type[0];
            BOOL v117 = os_log_type_enabled(v115, type[0]);
            if (v114)
            {
              if (v117)
              {
                *(_DWORD *)tcp_info buf = 136446722;
                *(void *)&uint8_t buf[4] = "nw_protocol_utilities_add_input_handler";
                __int16 v300 = 2048;
                uint64_t v301 = protocol_for_definition;
                __int16 v302 = 2082;
                int v303 = v114;
                _os_log_impl(&dword_1830D4000, v115, v116, "%{public}s Cannot add input handler %p to itself, dumping backtrace:%{public}s", buf, 0x20u);
              }

              free(v114);
            }
            else
            {
              if (v117)
              {
                *(_DWORD *)tcp_info buf = 136446466;
                *(void *)&uint8_t buf[4] = "nw_protocol_utilities_add_input_handler";
                __int16 v300 = 2048;
                uint64_t v301 = protocol_for_definition;
                _os_log_impl(&dword_1830D4000, v115, v116, "%{public}s Cannot add input handler %p to itself, no backtrace", buf, 0x16u);
              }
            }
            goto LABEL_183;
          }
          uint64_t v110 = __nwlog_obj();
          os_log_type_t v119 = type[0];
          if (os_log_type_enabled(v110, type[0]))
          {
            *(_DWORD *)tcp_info buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_protocol_utilities_add_input_handler";
            __int16 v300 = 2048;
            uint64_t v301 = protocol_for_definition;
            _os_log_impl(&dword_1830D4000, v110, v119, "%{public}s Cannot add input handler %p to itself, backtrace limit exceeded", buf, 0x16u);
          }
        }
      }
LABEL_183:
      id v9 = v293;
      if (v109) {
        free(v109);
      }
      goto LABEL_185;
    }
    os_log_type_t v235 = __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_utilities_add_input_handler";
    v236 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t v298 = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v236, type, &v298))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        unint64_t v237 = __nwlog_obj();
        os_log_type_t v238 = type[0];
        if (os_log_type_enabled(v237, type[0]))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_utilities_add_input_handler";
          _os_log_impl(&dword_1830D4000, v237, v238, "%{public}s called with null input_protocol", buf, 0xCu);
        }
      }
      else
      {
        if (v298)
        {
          uint64_t v254 = (char *)__nw_create_backtrace_string();
          v255 = __nwlog_obj();
          os_log_type_t v256 = type[0];
          BOOL v257 = os_log_type_enabled(v255, type[0]);
          if (v254)
          {
            if (v257)
            {
              *(_DWORD *)tcp_info buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_protocol_utilities_add_input_handler";
              __int16 v300 = 2082;
              uint64_t v301 = (uint64_t)v254;
              _os_log_impl(&dword_1830D4000, v255, v256, "%{public}s called with null input_protocol, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(v254);
          }
          else
          {
            if (v257)
            {
              *(_DWORD *)tcp_info buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_protocol_utilities_add_input_handler";
              _os_log_impl(&dword_1830D4000, v255, v256, "%{public}s called with null input_protocol, no backtrace", buf, 0xCu);
            }
          }
          goto LABEL_389;
        }
        unint64_t v237 = __nwlog_obj();
        os_log_type_t v267 = type[0];
        if (os_log_type_enabled(v237, type[0]))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_utilities_add_input_handler";
          _os_log_impl(&dword_1830D4000, v237, v267, "%{public}s called with null input_protocol, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_389:
    if (v236) {
      free(v236);
    }
LABEL_162:
    id v9 = v293;
LABEL_185:
    if (nw_endpoint_handler_get_logging_disabled(*(void **)(a1 + 32))) {
      goto LABEL_192;
    }
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
    }
    BOOL v100 = (id)gconnectionLogObj;
    if (os_log_type_enabled(v100, OS_LOG_TYPE_ERROR))
    {
      uint64_t v120 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 32));
      nw_endpoint_t v121 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 32));
      nw_endpoint_t v122 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 32));
      BOOL v123 = nw_endpoint_get_logging_description(v122);
      os_log_type_t v124 = nw_endpoint_handler_state_string(*(void **)(a1 + 32));
      os_log_type_t v125 = nw_endpoint_handler_mode_string(*(void **)(a1 + 32));
      id v126 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 32));
      *(_DWORD *)tcp_info buf = 136448002;
      *(void *)&uint8_t buf[4] = "nw_endpoint_flow_attach_protocols_block_invoke";
      __int16 v300 = 2082;
      uint64_t v301 = (uint64_t)v120;
      __int16 v302 = 2082;
      int v303 = v121;
      __int16 v304 = 2082;
      unint64_t v305 = (void *)v123;
      __int16 v306 = 2082;
      long long v307 = v124;
      __int16 v308 = 2082;
      int v309 = v125;
      __int16 v310 = 2114;
      id v311 = v126;
      __int16 v312 = 2082;
      v313 = identifier;
      _os_log_impl(&dword_1830D4000, v100, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Failed to attach application protocol %{public}s", buf, 0x52u);
    }
LABEL_190:

    goto LABEL_191;
  }
LABEL_123:
  if (!nw_endpoint_flow_join_protocol(*(void **)(a1 + 32), *(void **)(a1 + 40), v293, v294, identifier, a2, registered_endpoint, *(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 24), *(unsigned char *)(*(void *)(*(void *)(a1 + 112) + 8) + 24), (unsigned char *)(*(void *)(*(void *)(a1 + 104) + 8) + 24)))goto LABEL_129; {
  *(void *)(*(void *)(a1 + 56) + 736) = *(void *)(*(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 24)
  }
                                                        + 32);
  *(unsigned char *)(*(void *)(a1 + 56) + 33) |= 1u;
  do
  {
    uint64_t registered_endpoint = *(void *)(registered_endpoint + 32);
    if (!registered_endpoint)
    {
      uint64_t v20 = 0;
      id v9 = v293;
      goto LABEL_193;
    }
  }
  while (*(_DWORD *)(*(void *)(registered_endpoint + 16) + 32) != 3);
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 56) + 880));
  uint64_t v91 = *(void *)(a1 + 56);
  if (*(void *)(v91 + 720))
  {
    id v9 = v293;
  }
  else
  {
    if (*(_UNKNOWN **)(registered_endpoint + 40) == &nw_protocol_ref_counted_handle)
    {
      uint64_t v118 = *(void *)(registered_endpoint + 88);
      if (v118)
      {
        *(void *)(registered_endpoint + 88) = v118 + 1;
        uint64_t v91 = *(void *)(a1 + 56);
      }
      *(void *)tcp_info buf = registered_endpoint;
      char v113 = buf[8] | 1;
    }
    else
    {
      *(void *)tcp_info buf = registered_endpoint;
      char v113 = buf[8] & 0xFE;
    }
    buf[8] = v113;
    id v9 = v293;
    nw::retained_ptr<nw_protocol *>::operator=(v91 + 720, (uint64_t)buf);
    if (buf[8]) {
      nw::release_if_needed<nw_protocol *>((uint64_t *)buf);
    }
    uint64_t v91 = *(void *)(a1 + 56);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(v91 + 880));
  uint64_t v20 = 0;
LABEL_193:

  return v20;
}

void sub_1832CFDB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, void *a19, uint64_t a20,void *a21,uint64_t a22,void *a23,void *a24)
{
  _Unwind_Resume(a1);
}

uint64_t nw_protocol_add_input_handler(uint64_t a1, uint64_t a2)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    unsigned int v4 = *(void **)(a1 + 40);
    if (v4 == &nw_protocol_ref_counted_handle)
    {
      uint64_t v5 = *(void *)(a1 + 88);
      if (v5) {
        *(void *)(a1 + 88) = v5 + 1;
      }
    }
    if (a2)
    {
      id v6 = *(void **)(a2 + 40);
      if (v6 == &nw_protocol_ref_counted_handle)
      {
        uint64_t v7 = *(void *)(a2 + 88);
        if (v7) {
          *(void *)(a2 + 88) = v7 + 1;
        }
      }
      id v8 = *(uint64_t (***)(uint64_t, uint64_t))(a1 + 24);
      if (v8)
      {
        id v9 = *v8;
        if (v9)
        {
          uint64_t v10 = v9(a1, a2);
          if (v6 != &nw_protocol_ref_counted_handle)
          {
LABEL_13:
            if (v4 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
            {
              uint64_t v12 = *(void *)(a1 + 88);
              if (v12)
              {
                uint64_t v13 = v12 - 1;
                *(void *)(a1 + 88) = v13;
                if (!v13)
                {
                  os_log_type_t v14 = *(void (***)(void))(a1 + 64);
                  if (v14)
                  {
                    *(void *)(a1 + 64) = 0;
                    v14[2](v14);
                    _Block_release(v14);
                  }
                  if (*(unsigned char *)(a1 + 72))
                  {
                    nw_endpoint_t v15 = *(const void **)(a1 + 64);
                    if (v15) {
                      _Block_release(v15);
                    }
                  }
                  free((void *)a1);
                }
              }
            }
            return v10;
          }
LABEL_12:
          if (*(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
          {
            uint64_t v16 = *(void *)(a2 + 88);
            if (v16)
            {
              uint64_t v17 = v16 - 1;
              *(void *)(a2 + 88) = v17;
              if (!v17)
              {
                os_log_type_t v18 = *(void (***)(void))(a2 + 64);
                if (v18)
                {
                  *(void *)(a2 + 64) = 0;
                  v18[2](v18);
                  _Block_release(v18);
                }
                if (*(unsigned char *)(a2 + 72))
                {
                  id v19 = *(const void **)(a2 + 64);
                  if (v19) {
                    _Block_release(v19);
                  }
                }
                free((void *)a2);
              }
            }
          }
          goto LABEL_13;
        }
      }
      __nwlog_obj();
      uint64_t v20 = *(const char **)(a1 + 16);
      *(_DWORD *)tcp_info buf = 136446722;
      __int16 v46 = "__nw_protocol_add_input_handler";
      if (!v20) {
        uint64_t v20 = "invalid";
      }
      __int16 v47 = 2082;
      __int16 v48 = (void *)v20;
      __int16 v49 = 2048;
      uint64_t v50 = a1;
      uint64_t v21 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v43 = 0;
      if (__nwlog_fault(v21, &type, &v43))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          uint64_t v22 = __nwlog_obj();
          os_log_type_t v23 = type;
          if (!os_log_type_enabled(v22, type)) {
            goto LABEL_74;
          }
          os_log_type_t v24 = *(const char **)(a1 + 16);
          if (!v24) {
            os_log_type_t v24 = "invalid";
          }
          *(_DWORD *)tcp_info buf = 136446722;
          __int16 v46 = "__nw_protocol_add_input_handler";
          __int16 v47 = 2082;
          __int16 v48 = (void *)v24;
          __int16 v49 = 2048;
          uint64_t v50 = a1;
          os_log_type_t v25 = "%{public}s protocol %{public}s (%p) has invalid add_input_handler callback";
LABEL_73:
          _os_log_impl(&dword_1830D4000, v22, v23, v25, buf, 0x20u);
          goto LABEL_74;
        }
        if (!v43)
        {
          uint64_t v22 = __nwlog_obj();
          os_log_type_t v23 = type;
          if (!os_log_type_enabled(v22, type)) {
            goto LABEL_74;
          }
          uint64_t v41 = *(const char **)(a1 + 16);
          if (!v41) {
            uint64_t v41 = "invalid";
          }
          *(_DWORD *)tcp_info buf = 136446722;
          __int16 v46 = "__nw_protocol_add_input_handler";
          __int16 v47 = 2082;
          __int16 v48 = (void *)v41;
          __int16 v49 = 2048;
          uint64_t v50 = a1;
          os_log_type_t v25 = "%{public}s protocol %{public}s (%p) has invalid add_input_handler callback, backtrace limit exceeded";
          goto LABEL_73;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        uint64_t v22 = __nwlog_obj();
        os_log_type_t v23 = type;
        BOOL v35 = os_log_type_enabled(v22, type);
        if (!backtrace_string)
        {
          if (!v35) {
            goto LABEL_74;
          }
          char v42 = *(const char **)(a1 + 16);
          if (!v42) {
            char v42 = "invalid";
          }
          *(_DWORD *)tcp_info buf = 136446722;
          __int16 v46 = "__nw_protocol_add_input_handler";
          __int16 v47 = 2082;
          __int16 v48 = (void *)v42;
          __int16 v49 = 2048;
          uint64_t v50 = a1;
          os_log_type_t v25 = "%{public}s protocol %{public}s (%p) has invalid add_input_handler callback, no backtrace";
          goto LABEL_73;
        }
        if (v35)
        {
          char v36 = *(const char **)(a1 + 16);
          if (!v36) {
            char v36 = "invalid";
          }
          *(_DWORD *)tcp_info buf = 136446978;
          __int16 v46 = "__nw_protocol_add_input_handler";
          __int16 v47 = 2082;
          __int16 v48 = (void *)v36;
          __int16 v49 = 2048;
          uint64_t v50 = a1;
          __int16 v51 = 2082;
          uint64_t v52 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v22, v23, "%{public}s protocol %{public}s (%p) has invalid add_input_handler callback, dumping backtrace:%{public}s", buf, 0x2Au);
        }
        free(backtrace_string);
      }
LABEL_74:
      if (v21) {
        free(v21);
      }
      uint64_t v10 = 0;
      if (v6 != &nw_protocol_ref_counted_handle) {
        goto LABEL_13;
      }
      goto LABEL_12;
    }
    __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    __int16 v46 = "__nw_protocol_add_input_handler";
    os_log_type_t v30 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v43 = 0;
    if (__nwlog_fault(v30, &type, &v43))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        char v31 = __nwlog_obj();
        os_log_type_t v32 = type;
        if (os_log_type_enabled(v31, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          __int16 v46 = "__nw_protocol_add_input_handler";
          BOOL v33 = "%{public}s called with null input_protocol";
LABEL_90:
          _os_log_impl(&dword_1830D4000, v31, v32, v33, buf, 0xCu);
        }
      }
      else if (v43)
      {
        int v39 = (char *)__nw_create_backtrace_string();
        char v31 = __nwlog_obj();
        os_log_type_t v32 = type;
        BOOL v40 = os_log_type_enabled(v31, type);
        if (v39)
        {
          if (v40)
          {
            *(_DWORD *)tcp_info buf = 136446466;
            __int16 v46 = "__nw_protocol_add_input_handler";
            __int16 v47 = 2082;
            __int16 v48 = v39;
            _os_log_impl(&dword_1830D4000, v31, v32, "%{public}s called with null input_protocol, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v39);
          goto LABEL_91;
        }
        if (v40)
        {
          *(_DWORD *)tcp_info buf = 136446210;
          __int16 v46 = "__nw_protocol_add_input_handler";
          BOOL v33 = "%{public}s called with null input_protocol, no backtrace";
          goto LABEL_90;
        }
      }
      else
      {
        char v31 = __nwlog_obj();
        os_log_type_t v32 = type;
        if (os_log_type_enabled(v31, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          __int16 v46 = "__nw_protocol_add_input_handler";
          BOOL v33 = "%{public}s called with null input_protocol, backtrace limit exceeded";
          goto LABEL_90;
        }
      }
    }
LABEL_91:
    if (v30) {
      free(v30);
    }
    uint64_t v10 = 0;
    goto LABEL_13;
  }
  __nwlog_obj();
  *(_DWORD *)tcp_info buf = 136446210;
  __int16 v46 = "__nw_protocol_add_input_handler";
  os_log_type_t v26 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v43 = 0;
  if (__nwlog_fault(v26, &type, &v43))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v27 = __nwlog_obj();
      os_log_type_t v28 = type;
      if (os_log_type_enabled(v27, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        __int16 v46 = "__nw_protocol_add_input_handler";
        id v29 = "%{public}s called with null protocol";
LABEL_84:
        _os_log_impl(&dword_1830D4000, v27, v28, v29, buf, 0xCu);
      }
    }
    else if (v43)
    {
      id v37 = (char *)__nw_create_backtrace_string();
      os_log_type_t v27 = __nwlog_obj();
      os_log_type_t v28 = type;
      BOOL v38 = os_log_type_enabled(v27, type);
      if (v37)
      {
        if (v38)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          __int16 v46 = "__nw_protocol_add_input_handler";
          __int16 v47 = 2082;
          __int16 v48 = v37;
          _os_log_impl(&dword_1830D4000, v27, v28, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v37);
        goto LABEL_85;
      }
      if (v38)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        __int16 v46 = "__nw_protocol_add_input_handler";
        id v29 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_84;
      }
    }
    else
    {
      os_log_type_t v27 = __nwlog_obj();
      os_log_type_t v28 = type;
      if (os_log_type_enabled(v27, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        __int16 v46 = "__nw_protocol_add_input_handler";
        id v29 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_84;
      }
    }
  }
LABEL_85:
  if (v26) {
    free(v26);
  }
  return 0;
}

uint64_t nw::retained_ptr<nw_protocol *>::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    char v4 = *(unsigned char *)(a1 + 8);
    if (v4)
    {
      nw::release_if_needed<nw_protocol *>((uint64_t *)a1);
      char v4 = *(unsigned char *)(a1 + 8);
    }
    *(void *)a1 = 0;
    *(void *)a1 = *(void *)a2;
    *(unsigned char *)(a1 + 8) = v4 & 0xFE | *(unsigned char *)(a2 + 8) & 1;
    *(void *)a2 = 0;
    *(unsigned char *)(a2 + 8) &= ~1u;
  }
  return a1;
}

uint64_t nw_protocol_implementation_add_input_handler(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v284 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    handle = a1->handle;
    p_output_handler = &a1[1].output_handler;
    if (handle != &nw_protocol_ref_counted_handle) {
      p_output_handler = 0;
    }
    id v6 = p_output_handler;
    uint64_t v7 = v6;
    if (handle == &nw_protocol_ref_counted_handle)
    {
      uint64_t v8 = *((void *)v6 + 1);
      if (v8)
      {
        if (*(void *)(v8 + 80))
        {
          if (a1 != a2)
          {
            if (a2)
            {
              if (!a2->output_handler)
              {
                a2->output_handler = a1;
                if (a1->handle == &nw_protocol_ref_counted_handle)
                {
                  callbacks = a1[1].callbacks;
                  if (callbacks) {
                    a1[1].callbacks = (nw_protocol_callbacks *)((char *)&callbacks->add_input_handler + 1);
                  }
                }
              }
              uint64_t v10 = a2->handle;
              if (v10 == &nw_protocol_ref_counted_handle)
              {
                uint64_t v16 = a2[1].callbacks;
                if (v16) {
                  a2[1].callbacks = (nw_protocol_callbacks *)((char *)&v16->add_input_handler + 1);
                }
                *(void *)os_log_type_t type = a2;
                char v11 = type[8] | 1;
              }
              else
              {
                *(void *)os_log_type_t type = a2;
                char v11 = type[8] & 0xFE;
              }
              os_log_type_t type[8] = v11;
              uint64_t v17 = a2->callbacks;
              if (v17)
              {
                get_parameters = (void (*)(nw_protocol *))v17->get_parameters;
                if (get_parameters)
                {
                  get_parameters(a2);
                  id v19 = (id)objc_claimAutoreleasedReturnValue();

                  if (v10 != &nw_protocol_ref_counted_handle) {
                    goto LABEL_27;
                  }
                  goto LABEL_136;
                }
              }
              os_log_type_t v25 = __nwlog_obj();
              identifier = a2->identifier;
              *(_DWORD *)tcp_info buf = 136446722;
              *(void *)&uint8_t buf[4] = "__nw_protocol_get_parameters";
              if (!identifier) {
                identifier = (nw_protocol_identifier *)"invalid";
              }
              *(_WORD *)&unsigned char buf[12] = 2082;
              *(void *)&buf[14] = identifier;
              __int16 v280 = 2048;
              int v281 = a2;
              os_log_type_t v27 = (char *)_os_log_send_and_compose_impl();

              LOBYTE(v278) = 16;
              LOBYTE(v274) = 0;
              if (__nwlog_fault(v27, &v278, &v274))
              {
                if (v278 == 17)
                {
                  os_log_type_t v28 = __nwlog_obj();
                  os_log_type_t v29 = v278;
                  if (os_log_type_enabled(v28, (os_log_type_t)v278))
                  {
                    os_log_type_t v30 = a2->identifier;
                    if (!v30) {
                      os_log_type_t v30 = (nw_protocol_identifier *)"invalid";
                    }
                    *(_DWORD *)tcp_info buf = 136446722;
                    *(void *)&uint8_t buf[4] = "__nw_protocol_get_parameters";
                    *(_WORD *)&unsigned char buf[12] = 2082;
                    *(void *)&buf[14] = v30;
                    __int16 v280 = 2048;
                    int v281 = a2;
                    _os_log_impl(&dword_1830D4000, v28, v29, "%{public}s protocol %{public}s (%p) has invalid get_parameters callback", buf, 0x20u);
                  }
LABEL_132:

                  goto LABEL_133;
                }
                if (!(_BYTE)v274)
                {
                  os_log_type_t v28 = __nwlog_obj();
                  os_log_type_t v64 = v278;
                  if (os_log_type_enabled(v28, (os_log_type_t)v278))
                  {
                    os_log_type_t v65 = a2->identifier;
                    if (!v65) {
                      os_log_type_t v65 = (nw_protocol_identifier *)"invalid";
                    }
                    *(_DWORD *)tcp_info buf = 136446722;
                    *(void *)&uint8_t buf[4] = "__nw_protocol_get_parameters";
                    *(_WORD *)&unsigned char buf[12] = 2082;
                    *(void *)&buf[14] = v65;
                    __int16 v280 = 2048;
                    int v281 = a2;
                    _os_log_impl(&dword_1830D4000, v28, v64, "%{public}s protocol %{public}s (%p) has invalid get_parameters callback, backtrace limit exceeded", buf, 0x20u);
                  }
                  goto LABEL_132;
                }
                backtrace_string = (char *)__nw_create_backtrace_string();
                os_log_type_t v28 = __nwlog_obj();
                os_log_type_t v47 = v278;
                BOOL v48 = os_log_type_enabled(v28, (os_log_type_t)v278);
                if (!backtrace_string)
                {
                  if (v48)
                  {
                    id v70 = a2->identifier;
                    if (!v70) {
                      id v70 = (nw_protocol_identifier *)"invalid";
                    }
                    *(_DWORD *)tcp_info buf = 136446722;
                    *(void *)&uint8_t buf[4] = "__nw_protocol_get_parameters";
                    *(_WORD *)&unsigned char buf[12] = 2082;
                    *(void *)&buf[14] = v70;
                    __int16 v280 = 2048;
                    int v281 = a2;
                    _os_log_impl(&dword_1830D4000, v28, v47, "%{public}s protocol %{public}s (%p) has invalid get_parameters callback, no backtrace", buf, 0x20u);
                  }
                  goto LABEL_132;
                }
                if (v48)
                {
                  __int16 v49 = a2->identifier;
                  if (!v49) {
                    __int16 v49 = (nw_protocol_identifier *)"invalid";
                  }
                  *(_DWORD *)tcp_info buf = 136446978;
                  *(void *)&uint8_t buf[4] = "__nw_protocol_get_parameters";
                  *(_WORD *)&unsigned char buf[12] = 2082;
                  *(void *)&buf[14] = v49;
                  __int16 v280 = 2048;
                  int v281 = a2;
                  __int16 v282 = 2082;
                  *(void *)unint64_t v283 = backtrace_string;
                  _os_log_impl(&dword_1830D4000, v28, v47, "%{public}s protocol %{public}s (%p) has invalid get_parameters callback, dumping backtrace:%{public}s", buf, 0x2Au);
                }

                free(backtrace_string);
              }
LABEL_133:
              if (v27) {
                free(v27);
              }
              id v19 = 0;
              if (v10 != &nw_protocol_ref_counted_handle)
              {
LABEL_27:
                if (!v19) {
                  goto LABEL_240;
                }
                goto LABEL_137;
              }
LABEL_136:
              nw::release_if_needed<nw_protocol *>((uint64_t *)type);
              if (!v19)
              {
LABEL_240:
                id v88 = 0;
                nw_endpoint_t v92 = 0;
                char v101 = 1;
                goto LABEL_241;
              }
LABEL_137:
              if (!*((void *)v7 + 15))
              {
LABEL_159:
                id v88 = v19;
                id v89 = *(id *)(v88[13] + 136);

                uint64_t v90 = (void *)*((void *)v7 + 15);
                *((void *)v7 + 15) = v89;

                *(_DWORD *)os_log_type_t type = 0;
                uint64_t v91 = nw_parameters_copy_protocol_options(v88, v7, type);
                nw_endpoint_t v92 = v91;
                if (v91)
                {
                  if (!v7[407])
                  {
                    __int16 v93 = v91;
                    v7[407] = 0;
                    unint64_t v94 = 84;
                    uint64_t v95 = 407;
                    while (1)
                    {
                      int v96 = v93[v95 - 359];
                      v7[v95] = v96;
                      if (!v96) {
                        break;
                      }
                      --v94;
                      ++v95;
                      if (v94 <= 1)
                      {
                        v7[v95] = 0;
                        break;
                      }
                    }
                  }
                  if ((v7[404] & 4) == 0)
                  {
                    uint64_t v97 = v92;
                    BOOL v98 = v97[153] == 0;

                    if (!v98)
                    {
                      if ((v7[405] & 0x80000000) == 0)
                      {
                        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                        networkd_settings_init();
                        uint64_t v99 = (id)gLogObj;
                        if (os_log_type_enabled(v99, OS_LOG_TYPE_DEBUG))
                        {
                          *(_DWORD *)tcp_info buf = 136446722;
                          *(void *)&uint8_t buf[4] = "nw_protocol_implementation_add_input_handler";
                          *(_WORD *)&unsigned char buf[12] = 2082;
                          *(void *)&buf[14] = v7 + 407;
                          __int16 v280 = 2080;
                          int v281 = (nw_protocol *)" ";
                          _os_log_impl(&dword_1830D4000, v99, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sProhibit joining set, removing eligibility to join", buf, 0x20u);
                        }
                      }
                      v7[404] |= 4u;
                      nw_protocol_remove_instance((uint64_t)(v7 - 96));
                    }
                  }
                }
                if (!*((_DWORD *)v7 + 94))
                {
                  if (*(_DWORD *)type)
                  {
                    *((_DWORD *)v7 + 94) = *(_DWORD *)type;
                  }
                  else if ((v7[405] & 0x80000000) == 0)
                  {
                    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                    networkd_settings_init();
                    BOOL v100 = (id)gLogObj;
                    if (os_log_type_enabled(v100, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)tcp_info buf = 136446978;
                      *(void *)&uint8_t buf[4] = "nw_protocol_implementation_add_input_handler";
                      *(_WORD *)&unsigned char buf[12] = 2082;
                      *(void *)&buf[14] = v7 + 407;
                      __int16 v280 = 2080;
                      int v281 = (nw_protocol *)" ";
                      __int16 v282 = 2048;
                      *(void *)unint64_t v283 = v7;
                      _os_log_impl(&dword_1830D4000, v100, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sProtocol level is undefined for instance %p", buf, 0x2Au);
                    }
                  }
                }
                char v101 = 0;
LABEL_241:
                if (*(_DWORD *)(*((void *)v7 + 1) + 64) == 3)
                {
                  os_log_type_t v119 = v7;
                  if (nw_protocol_definition_get_message_is_stream(*((void **)v7 + 1))
                    && *((nw_protocol **)v119 - 6) == a2)
                  {
                    uint64_t v120 = -2;
                  }
                  else
                  {
                    uint64_t v120 = (uint64_t)a2;
                  }

                  if (gLogDatapath)
                  {
                    nw_endpoint_t v192 = __nwlog_obj();
                    if (os_log_type_enabled(v192, OS_LOG_TYPE_DEBUG))
                    {
                      *(_DWORD *)tcp_info buf = 136446722;
                      *(void *)&uint8_t buf[4] = "nw_protocol_implementation_add_input_handler";
                      *(_WORD *)&unsigned char buf[12] = 2048;
                      *(void *)&buf[14] = v119;
                      __int16 v280 = 2048;
                      int v281 = (nw_protocol *)v120;
                      _os_log_impl(&dword_1830D4000, v192, OS_LOG_TYPE_DEBUG, "%{public}s Instance %p add input handler for flow %llx", buf, 0x20u);
                    }
                  }
                  uint64_t internal = *((void *)v119 + 29);
                  if (!internal)
                  {
                    uint64_t internal = nw_hash_table_create_internal(0x1Fu, 56, (const void *(*)(const void *, unsigned int *))nw_protocol_get_key, (unsigned int (*)(const void *, unsigned int))nw_protocol_key_hash, (BOOL (*)(const void *, const void *, unsigned int))nw_protocol_matches_key, 0);
                    if (!internal)
                    {
                      *((void *)v119 + 29) = 0;
                      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                      networkd_settings_init();
                      id v162 = (id)gLogObj;
                      *(_DWORD *)tcp_info buf = 136446210;
                      *(void *)&uint8_t buf[4] = "nw_protocol_implementation_add_input_handler";
                      int v130 = (char *)_os_log_send_and_compose_impl();

                      type[0] = 16;
                      LOBYTE(v278) = 0;
                      if (!__nwlog_fault(v130, type, &v278)) {
                        goto LABEL_328;
                      }
                      if (type[0] == 17)
                      {
                        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                        networkd_settings_init();
                        os_log_type_t v131 = (id)gLogObj;
                        os_log_type_t v163 = type[0];
                        if (os_log_type_enabled(v131, (os_log_type_t)type[0]))
                        {
                          *(_DWORD *)tcp_info buf = 136446210;
                          *(void *)&uint8_t buf[4] = "nw_protocol_implementation_add_input_handler";
                          _os_log_impl(&dword_1830D4000, v131, v163, "%{public}s nw_hash_table_create_no_lock failed", buf, 0xCu);
                        }
                      }
                      else if ((_BYTE)v278)
                      {
                        os_log_type_t v169 = (char *)__nw_create_backtrace_string();
                        os_log_type_t v131 = __nwlog_obj();
                        os_log_type_t v170 = type[0];
                        BOOL v171 = os_log_type_enabled(v131, (os_log_type_t)type[0]);
                        if (v169)
                        {
                          if (v171)
                          {
                            *(_DWORD *)tcp_info buf = 136446466;
                            *(void *)&uint8_t buf[4] = "nw_protocol_implementation_add_input_handler";
                            *(_WORD *)&unsigned char buf[12] = 2082;
                            *(void *)&buf[14] = v169;
                            _os_log_impl(&dword_1830D4000, v131, v170, "%{public}s nw_hash_table_create_no_lock failed, dumping backtrace:%{public}s", buf, 0x16u);
                          }

                          free(v169);
                          if (!v130) {
                            goto LABEL_330;
                          }
                          goto LABEL_329;
                        }
                        if (v171)
                        {
                          *(_DWORD *)tcp_info buf = 136446210;
                          *(void *)&uint8_t buf[4] = "nw_protocol_implementation_add_input_handler";
                          _os_log_impl(&dword_1830D4000, v131, v170, "%{public}s nw_hash_table_create_no_lock failed, no backtrace", buf, 0xCu);
                        }
                      }
                      else
                      {
                        os_log_type_t v131 = __nwlog_obj();
                        os_log_type_t v182 = type[0];
                        if (os_log_type_enabled(v131, (os_log_type_t)type[0]))
                        {
                          *(_DWORD *)tcp_info buf = 136446210;
                          *(void *)&uint8_t buf[4] = "nw_protocol_implementation_add_input_handler";
                          _os_log_impl(&dword_1830D4000, v131, v182, "%{public}s nw_hash_table_create_no_lock failed, backtrace limit exceeded", buf, 0xCu);
                        }
                      }
                      goto LABEL_327;
                    }
                    *(_DWORD *)(internal + 48) &= ~2u;
                    *((void *)v119 + 29) = internal;
                  }
                  LOBYTE(v274) = 0;
                  BOOL v122 = nw_hash_table_add_object(internal, (uint64_t)a2, (char *)&v274);
                  if ((_BYTE)v274)
                  {
                    BOOL v273 = v122;
                    if ((v119[405] & 0x80000000) == 0 && gLogDatapath)
                    {
                      os_log_type_t v193 = __nwlog_obj();
                      if (os_log_type_enabled(v193, OS_LOG_TYPE_DEBUG))
                      {
                        uint64_t v194 = nw_protocol_flow_for_protocol((NWConcrete_nw_protocol_instance *)v119, (uint64_t)a2);
                        *(_DWORD *)tcp_info buf = 136447234;
                        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_add_input_handler";
                        *(_WORD *)&unsigned char buf[12] = 2082;
                        *(void *)&buf[14] = v119 + 407;
                        __int16 v280 = 2080;
                        int v281 = (nw_protocol *)" ";
                        __int16 v282 = 2048;
                        *(void *)unint64_t v283 = a2;
                        *(_WORD *)&v283[8] = 2048;
                        *(void *)&v283[10] = v194;
                        _os_log_impl(&dword_1830D4000, v193, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sMultiplexing protocol added protocol %p to hash table for flow %llx", buf, 0x34u);
                      }

                      BOOL v122 = v273;
                      if (a2)
                      {
LABEL_253:
                        a2->output_handler_context = (void *)v122;
                        if (!a2->output_handler)
                        {
                          a2->output_handler = a1;
                          if (a1->handle == &nw_protocol_ref_counted_handle)
                          {
                            BOOL v123 = a1[1].callbacks;
                            if (v123) {
                              a1[1].callbacks = (nw_protocol_callbacks *)((char *)&v123->add_input_handler + 1);
                            }
                          }
                        }
                        if (!a1->default_input_handler)
                        {
                          a1->default_input_handler = a2;
                          if (a2->handle == &nw_protocol_ref_counted_handle)
                          {
                            os_log_type_t v124 = a2[1].callbacks;
                            if (v124) {
                              a2[1].callbacks = (nw_protocol_callbacks *)((char *)&v124->add_input_handler + 1);
                            }
                          }
LABEL_261:
                          nw_protocol_set_flow_id_from_protocol(a1, a2);
                          uint64_t v125 = nw_protocol_instance_copy_path(v119, -1);
                          id v126 = (void *)*((void *)v119 + 36);
                          *((void *)v119 + 36) = v125;

                          BOOL v122 = v273;
                        }
LABEL_262:
                        if (v101)
                        {
                          uint64_t v127 = 0;
                          if ((v119[402] & 2) != 0) {
                            goto LABEL_305;
                          }
                          goto LABEL_295;
                        }
                        os_log_type_t v140 = v88;
                        if (v140)
                        {
                          uint64_t v127 = v140[97] >> 7;
                          goto LABEL_294;
                        }
                        unint64_t v232 = __nwlog_obj();
                        *(_DWORD *)tcp_info buf = 136446210;
                        *(void *)&uint8_t buf[4] = "nw_parameters_get_server_mode";
                        id v233 = (char *)_os_log_send_and_compose_impl();

                        type[0] = 16;
                        LOBYTE(v278) = 0;
                        if (__nwlog_fault(v233, type, &v278))
                        {
                          if (type[0] == 17)
                          {
                            os_log_type_t v234 = __nwlog_obj();
                            os_log_type_t v235 = type[0];
                            if (os_log_type_enabled(v234, (os_log_type_t)type[0]))
                            {
                              *(_DWORD *)tcp_info buf = 136446210;
                              *(void *)&uint8_t buf[4] = "nw_parameters_get_server_mode";
                              _os_log_impl(&dword_1830D4000, v234, v235, "%{public}s called with null parameters", buf, 0xCu);
                            }
                          }
                          else
                          {
                            if ((_BYTE)v278)
                            {
                              os_log_type_t v243 = (char *)__nw_create_backtrace_string();
                              __int16 v244 = __nwlog_obj();
                              os_log_type_t v268 = type[0];
                              BOOL v245 = os_log_type_enabled(v244, (os_log_type_t)type[0]);
                              if (v243)
                              {
                                if (v245)
                                {
                                  *(_DWORD *)tcp_info buf = 136446466;
                                  *(void *)&uint8_t buf[4] = "nw_parameters_get_server_mode";
                                  *(_WORD *)&unsigned char buf[12] = 2082;
                                  *(void *)&buf[14] = v243;
                                  _os_log_impl(&dword_1830D4000, v244, v268, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
                                }

                                free(v243);
                              }
                              else
                              {
                                if (v245)
                                {
                                  *(_DWORD *)tcp_info buf = 136446210;
                                  *(void *)&uint8_t buf[4] = "nw_parameters_get_server_mode";
                                  _os_log_impl(&dword_1830D4000, v244, v268, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
                                }
                              }
                              goto LABEL_560;
                            }
                            os_log_type_t v234 = __nwlog_obj();
                            os_log_type_t v266 = type[0];
                            if (os_log_type_enabled(v234, (os_log_type_t)type[0]))
                            {
                              *(_DWORD *)tcp_info buf = 136446210;
                              *(void *)&uint8_t buf[4] = "nw_parameters_get_server_mode";
                              _os_log_impl(&dword_1830D4000, v234, v266, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
                            }
                          }
                        }
LABEL_560:
                        if (v233) {
                          free(v233);
                        }
                        uint64_t v127 = 0;
                        os_log_type_t v140 = 0;
LABEL_294:

                        BOOL v122 = v273;
                        if ((v119[402] & 2) != 0)
                        {
LABEL_305:
                          uint64_t extra = nw_hash_node_get_extra(v122);
                          *(void *)(extra + 16) = 0;
                          *(void *)(extra + 24) = extra + 16;
                          objc_storeStrong((id *)(extra + 8), v92);
                          int v152 = *(_WORD *)(extra + 52) & 0xFFFE | v127;
                          *(_WORD *)(extra + 52) = v152;
                          unsigned int v153 = v152 & 0xFFFFFFFD | (2 * ((v119[404] >> 1) & 1));
                          *(_WORD *)(extra + 52) = v153;
                          if ((v119[404] & 3) == 1) {
                            *(_WORD *)(extra + 52) = v153 | 8;
                          }
                          uint64_t v154 = *((void *)v7 + 1);
                          if (a2)
                          {
                            if ((*(unsigned char *)(v154 + 184) & 0x20) != 0)
                            {
                              id v155 = a2->callbacks;
                              if (v155)
                              {
                                supports_external_data = (uint64_t (*)(nw_protocol *))v155->supports_external_data;
                                if (supports_external_data)
                                {
                                  char v157 = a2->handle;
                                  if (v157 == &nw_protocol_ref_counted_handle)
                                  {
                                    uint64_t v172 = a2[1].callbacks;
                                    if (v172) {
                                      a2[1].callbacks = (nw_protocol_callbacks *)((char *)&v172->add_input_handler + 1);
                                    }
                                    *(void *)tcp_info buf = a2;
                                    char v158 = buf[8] | 1;
                                  }
                                  else
                                  {
                                    *(void *)tcp_info buf = a2;
                                    char v158 = buf[8] & 0xFE;
                                  }
                                  buf[8] = v158;
                                  int v173 = supports_external_data(a2);
                                  if (v157 == &nw_protocol_ref_counted_handle) {
                                    nw::release_if_needed<nw_protocol *>((uint64_t *)buf);
                                  }
                                  if (v173) {
                                    __int16 v174 = 1024;
                                  }
                                  else {
                                    __int16 v174 = 0;
                                  }
                                  *(_WORD *)(extra + 52) = *(_WORD *)(extra + 52) & 0xFBFF | v174;
                                  uint64_t v154 = *((void *)v7 + 1);
                                }
                              }
                            }
                          }
                          id v175 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v154 + 80) + 16);
                          if (v175) {
                            *(void *)uint64_t extra = v175(v154, v151);
                          }
                          uint64_t v176 = v119;
                          if (nw_protocol_definition_get_message_is_stream(*((void **)v7 + 1))
                            && *((nw_protocol **)v176 - 6) == a2)
                          {
                            a2 = (nw_protocol *)-2;
                          }

                          *((void *)v176 + 31) = a2;
                          uint64_t v177 = *((void *)v176 + 4);
                          if (v177)
                          {
                            nw_queue_cancel_source(v177);
                            *((void *)v176 + 4) = 0;
                          }
LABEL_459:
                          os_log_type_t v221 = v7;
                          BOOL v222 = v221;
                          if ((*(unsigned char *)(*((void *)v7 + 1) + 184) & 0x10) != 0
                            && nw_parameters_get_multipath(v221[6])
                            && *(void *)(*(void *)(*((void *)v7 + 1) + 80) + 208))
                          {
                            BOOL v223 = (*((unsigned char *)v222 + 405) & 4) == 0;

                            if (v223)
                            {
                              nw_endpoint_t v224 = v222[5];
                              if (v224)
                              {
                                if (nw_endpoint_get_type(v224) == nw_endpoint_type_address
                                  && nw_endpoint_get_address_family(v222[5]) == 30
                                  && nw_path_is_eligible_for_CrazyIvan46(v222[36]))
                                {
                                  LODWORD(v278) = nw_path_get_interface_index(v222[36]);
                                  nw_endpoint_t address = nw_endpoint_get_address((nw_endpoint_t)v222[5]);
                                  *(void *)os_log_type_t type = 0;
                                  int v226 = nw_nat64_copy_prefixes((unsigned int *)&v278, type);
                                  if (v226 >= 1)
                                  {
                                    uint64_t v227 = 0;
                                    uint64_t v228 = 16 * v226;
                                    while (1)
                                    {
                                      int v274 = 0;
                                      if (nw_nat64_extract_v4((unsigned int *)(*(void *)type + v227), &address->sa_data[6], (uint64_t)&v274))break; {
                                      v227 += 16;
                                      }
                                      if (v228 == v227) {
                                        goto LABEL_478;
                                      }
                                    }
                                    *(_WORD *)tcp_info buf = 528;
                                    *(_WORD *)&buf[2] = *(_WORD *)address->sa_data;
                                    *(_DWORD *)&uint8_t buf[4] = v274;
                                    *(void *)&buf[8] = 0;
                                    nw_endpoint_t v230 = nw_endpoint_create_address((const sockaddr *)buf);
                                    unint64_t v231 = v222[44];
                                    v222[44] = v230;
                                  }
LABEL_478:
                                  if (*(void *)type) {
                                    free(*(void **)type);
                                  }
                                }
                              }
                            }
                          }
                          else
                          {
                          }
                          uint64_t v24 = 1;
                          goto LABEL_474;
                        }
LABEL_295:
                        if (*(void *)(*(void *)(*((void *)v7 + 1) + 80) + 40))
                        {
                          objc_storeStrong((id *)v119 + 7, v92);
                          long long v278 = 0uLL;
                          nw_protocol_get_flow_id(a2, &v278);
                          id v141 = nw_path_copy_flow_registration(*((void **)v119 + 15), (uint64_t)&v278);
                          uint64_t v142 = (void *)*((void *)v119 + 35);
                          *((void *)v119 + 35) = v141;

                          (*(void (**)(char *, uint64_t))(*(void *)(*((void *)v7 + 1) + 80) + 40))(v119, v127);
                          v119[402] |= 2u;
                          if (v127)
                          {
                            nw_endpoint_t v143 = nw_parameters_copy_local_endpoint(*((nw_parameters_t *)v119 + 6));
                            unsigned int port = nw_endpoint_get_port(v143);
                            *(_OWORD *)&type[4] = 0uLL;
                            uint64_t v277 = 0;
                            *(_WORD *)&type[2] = __rev16(port);
                            *(_WORD *)os_log_type_t type = 7708;
                            nw_endpoint_t v272 = nw_endpoint_create_address((const sockaddr *)type);
                            id v145 = nw_context_copy_registered_endpoint(*((void **)v119 + 15), v272);
                            id v146 = nw_endpoint_copy_registrar_for_identifier(v145, (long long *)a1->identifier->name, 1);
                            id v147 = (void *)*((void *)v119 + 49);
                            *((void *)v119 + 49) = v146;

                            id v148 = (void *)*((void *)v119 + 49);
                            if (v148)
                            {
                              if ((v119[405] & 0x80000000) == 0)
                              {
                                __int16 v149 = __nwlog_obj();
                                if (os_log_type_enabled(v149, OS_LOG_TYPE_DEBUG))
                                {
                                  *(_DWORD *)tcp_info buf = 136446722;
                                  *(void *)&uint8_t buf[4] = "nw_protocol_implementation_add_input_handler";
                                  *(_WORD *)&unsigned char buf[12] = 2082;
                                  *(void *)&buf[14] = v119 + 407;
                                  __int16 v280 = 2080;
                                  int v281 = (nw_protocol *)" ";
                                  _os_log_impl(&dword_1830D4000, v149, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sAdded server protocol to the registrar", buf, 0x20u);
                                }

                                id v148 = (void *)*((void *)v119 + 49);
                              }
                              nw_protocol_instance_registrar_add_instance(v148, (uint64_t)a1);
                            }
                          }
                          BOOL v122 = v273;
                        }
                        goto LABEL_305;
                      }
                    }
                    else if (a2)
                    {
                      goto LABEL_253;
                    }
                    unint64_t v195 = __nwlog_obj();
                    *(_DWORD *)tcp_info buf = 136446210;
                    *(void *)&uint8_t buf[4] = "__nw_protocol_set_output_handler_context";
                    os_log_type_t v196 = (char *)_os_log_send_and_compose_impl();

                    type[0] = 16;
                    LOBYTE(v278) = 0;
                    if (__nwlog_fault(v196, type, &v278))
                    {
                      if (type[0] == 17)
                      {
                        BOOL v197 = __nwlog_obj();
                        os_log_type_t v198 = type[0];
                        if (os_log_type_enabled(v197, (os_log_type_t)type[0]))
                        {
                          *(_DWORD *)tcp_info buf = 136446210;
                          *(void *)&uint8_t buf[4] = "__nw_protocol_set_output_handler_context";
                          _os_log_impl(&dword_1830D4000, v197, v198, "%{public}s called with null protocol", buf, 0xCu);
                        }
LABEL_415:

                        goto LABEL_511;
                      }
                      if (!(_BYTE)v278)
                      {
                        BOOL v197 = __nwlog_obj();
                        os_log_type_t v246 = type[0];
                        if (os_log_type_enabled(v197, (os_log_type_t)type[0]))
                        {
                          *(_DWORD *)tcp_info buf = 136446210;
                          *(void *)&uint8_t buf[4] = "__nw_protocol_set_output_handler_context";
                          _os_log_impl(&dword_1830D4000, v197, v246, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
                        }
                        goto LABEL_415;
                      }
                      v236 = (char *)__nw_create_backtrace_string();
                      unint64_t v237 = __nwlog_obj();
                      os_log_type_t v269 = type[0];
                      BOOL v238 = os_log_type_enabled(v237, (os_log_type_t)type[0]);
                      if (v236)
                      {
                        if (v238)
                        {
                          *(_DWORD *)tcp_info buf = 136446466;
                          *(void *)&uint8_t buf[4] = "__nw_protocol_set_output_handler_context";
                          *(_WORD *)&unsigned char buf[12] = 2082;
                          *(void *)&buf[14] = v236;
                          _os_log_impl(&dword_1830D4000, v237, v269, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
                        }

                        free(v236);
                      }
                      else
                      {
                        if (v238)
                        {
                          *(_DWORD *)tcp_info buf = 136446210;
                          *(void *)&uint8_t buf[4] = "__nw_protocol_set_output_handler_context";
                          _os_log_impl(&dword_1830D4000, v237, v269, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
                        }
                      }
                    }
LABEL_511:
                    if (v196) {
                      free(v196);
                    }
                    __int16 v250 = __nwlog_obj();
                    *(_DWORD *)tcp_info buf = 136446210;
                    *(void *)&uint8_t buf[4] = "__nw_protocol_get_output_handler";
                    os_log_type_t v251 = (char *)_os_log_send_and_compose_impl();

                    type[0] = 16;
                    LOBYTE(v278) = 0;
                    if (__nwlog_fault(v251, type, &v278))
                    {
                      if (type[0] == 17)
                      {
                        nw_endpoint_t v252 = __nwlog_obj();
                        os_log_type_t v253 = type[0];
                        if (os_log_type_enabled(v252, (os_log_type_t)type[0]))
                        {
                          *(_DWORD *)tcp_info buf = 136446210;
                          *(void *)&uint8_t buf[4] = "__nw_protocol_get_output_handler";
                          _os_log_impl(&dword_1830D4000, v252, v253, "%{public}s called with null protocol", buf, 0xCu);
                        }
LABEL_517:

                        goto LABEL_529;
                      }
                      if (!(_BYTE)v278)
                      {
                        nw_endpoint_t v252 = __nwlog_obj();
                        os_log_type_t v257 = type[0];
                        if (os_log_type_enabled(v252, (os_log_type_t)type[0]))
                        {
                          *(_DWORD *)tcp_info buf = 136446210;
                          *(void *)&uint8_t buf[4] = "__nw_protocol_get_output_handler";
                          _os_log_impl(&dword_1830D4000, v252, v257, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
                        }
                        goto LABEL_517;
                      }
                      uint64_t v254 = (char *)__nw_create_backtrace_string();
                      v255 = __nwlog_obj();
                      os_log_type_t v270 = type[0];
                      BOOL v256 = os_log_type_enabled(v255, (os_log_type_t)type[0]);
                      if (v254)
                      {
                        if (v256)
                        {
                          *(_DWORD *)tcp_info buf = 136446466;
                          *(void *)&uint8_t buf[4] = "__nw_protocol_get_output_handler";
                          *(_WORD *)&unsigned char buf[12] = 2082;
                          *(void *)&buf[14] = v254;
                          _os_log_impl(&dword_1830D4000, v255, v270, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
                        }

                        free(v254);
                      }
                      else
                      {
                        if (v256)
                        {
                          *(_DWORD *)tcp_info buf = 136446210;
                          *(void *)&uint8_t buf[4] = "__nw_protocol_get_output_handler";
                          _os_log_impl(&dword_1830D4000, v255, v270, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
                        }
                      }
                    }
LABEL_529:
                    if (v251) {
                      free(v251);
                    }
                    v258 = __nwlog_obj();
                    *(_DWORD *)tcp_info buf = 136446210;
                    *(void *)&uint8_t buf[4] = "__nw_protocol_set_output_handler";
                    os_log_type_t v259 = (char *)_os_log_send_and_compose_impl();

                    type[0] = 16;
                    LOBYTE(v278) = 0;
                    if (__nwlog_fault(v259, type, &v278))
                    {
                      if (type[0] == 17)
                      {
                        os_log_type_t v260 = __nwlog_obj();
                        os_log_type_t v261 = type[0];
                        if (os_log_type_enabled(v260, (os_log_type_t)type[0]))
                        {
                          *(_DWORD *)tcp_info buf = 136446210;
                          *(void *)&uint8_t buf[4] = "__nw_protocol_set_output_handler";
                          _os_log_impl(&dword_1830D4000, v260, v261, "%{public}s called with null protocol", buf, 0xCu);
                        }
LABEL_535:

                        goto LABEL_547;
                      }
                      if (!(_BYTE)v278)
                      {
                        os_log_type_t v260 = __nwlog_obj();
                        os_log_type_t v265 = type[0];
                        if (os_log_type_enabled(v260, (os_log_type_t)type[0]))
                        {
                          *(_DWORD *)tcp_info buf = 136446210;
                          *(void *)&uint8_t buf[4] = "__nw_protocol_set_output_handler";
                          _os_log_impl(&dword_1830D4000, v260, v265, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
                        }
                        goto LABEL_535;
                      }
                      os_log_type_t v262 = (char *)__nw_create_backtrace_string();
                      BOOL v263 = __nwlog_obj();
                      os_log_type_t v271 = type[0];
                      BOOL v264 = os_log_type_enabled(v263, (os_log_type_t)type[0]);
                      if (v262)
                      {
                        if (v264)
                        {
                          *(_DWORD *)tcp_info buf = 136446466;
                          *(void *)&uint8_t buf[4] = "__nw_protocol_set_output_handler";
                          *(_WORD *)&unsigned char buf[12] = 2082;
                          *(void *)&buf[14] = v262;
                          _os_log_impl(&dword_1830D4000, v263, v271, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
                        }

                        free(v262);
                      }
                      else
                      {
                        if (v264)
                        {
                          *(_DWORD *)tcp_info buf = 136446210;
                          *(void *)&uint8_t buf[4] = "__nw_protocol_set_output_handler";
                          _os_log_impl(&dword_1830D4000, v263, v271, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
                        }
                      }
                    }
LABEL_547:
                    if (v259) {
                      free(v259);
                    }
                    BOOL v122 = v273;
                    if (!a1->default_input_handler) {
                      goto LABEL_261;
                    }
                    goto LABEL_262;
                  }
                  *(void *)os_log_type_t type = 0;
                  *(void *)&os_log_type_t type[8] = 0;
                  nw_protocol_get_flow_id(a2, type);
                  if (v119[405] < 0) {
                    goto LABEL_330;
                  }
                  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                  networkd_settings_init();
                  id v134 = (id)gLogObj;
                  nw_endpoint_t v135 = v119 + 407;
                  *(_DWORD *)tcp_info buf = 136447234;
                  *(void *)&uint8_t buf[4] = "nw_protocol_implementation_add_input_handler";
                  *(_WORD *)&unsigned char buf[12] = 2082;
                  *(void *)&buf[14] = v119 + 407;
                  __int16 v280 = 2080;
                  int v281 = (nw_protocol *)" ";
                  __int16 v282 = 1042;
                  *(_DWORD *)unint64_t v283 = 16;
                  *(_WORD *)&v283[4] = 2098;
                  *(void *)&v283[6] = type;
                  int v130 = (char *)_os_log_send_and_compose_impl();

                  LOBYTE(v278) = 16;
                  char v275 = 0;
                  if (!__nwlog_fault(v130, &v278, &v275))
                  {
LABEL_328:
                    if (v130) {
LABEL_329:
                    }
                      free(v130);
LABEL_330:
                    uint64_t v24 = 0;
LABEL_474:

                    goto LABEL_475;
                  }
                  if (v278 == 17)
                  {
                    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                    networkd_settings_init();
                    os_log_type_t v131 = (id)gLogObj;
                    os_log_type_t v136 = v278;
                    if (os_log_type_enabled(v131, (os_log_type_t)v278))
                    {
                      *(_DWORD *)tcp_info buf = 136447234;
                      *(void *)&uint8_t buf[4] = "nw_protocol_implementation_add_input_handler";
                      *(_WORD *)&unsigned char buf[12] = 2082;
                      *(void *)&buf[14] = v135;
                      __int16 v280 = 2080;
                      int v281 = (nw_protocol *)" ";
                      __int16 v282 = 1042;
                      *(_DWORD *)unint64_t v283 = 16;
                      *(_WORD *)&v283[4] = 2098;
                      *(void *)&v283[6] = type;
                      _os_log_impl(&dword_1830D4000, v131, v136, "%{public}s %{public}s%sMultiplexing protocol already has input handler registered for %{public,uuid_t}.16P", buf, 0x30u);
                    }
                  }
                  else if (v275)
                  {
                    os_log_type_t v159 = (char *)__nw_create_backtrace_string();
                    os_log_type_t v131 = __nwlog_obj();
                    os_log_type_t v160 = v278;
                    BOOL v161 = os_log_type_enabled(v131, (os_log_type_t)v278);
                    if (v159)
                    {
                      if (v161)
                      {
                        *(_DWORD *)tcp_info buf = 136447490;
                        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_add_input_handler";
                        *(_WORD *)&unsigned char buf[12] = 2082;
                        *(void *)&buf[14] = v135;
                        __int16 v280 = 2080;
                        int v281 = (nw_protocol *)" ";
                        __int16 v282 = 1042;
                        *(_DWORD *)unint64_t v283 = 16;
                        *(_WORD *)&v283[4] = 2098;
                        *(void *)&v283[6] = type;
                        *(_WORD *)&v283[14] = 2082;
                        *(void *)&v283[16] = v159;
                        _os_log_impl(&dword_1830D4000, v131, v160, "%{public}s %{public}s%sMultiplexing protocol already has input handler registered for %{public,uuid_t}.16P, dumping backtrace:%{public}s", buf, 0x3Au);
                      }

                      free(v159);
                      if (!v130) {
                        goto LABEL_330;
                      }
                      goto LABEL_329;
                    }
                    if (v161)
                    {
                      *(_DWORD *)tcp_info buf = 136447234;
                      *(void *)&uint8_t buf[4] = "nw_protocol_implementation_add_input_handler";
                      *(_WORD *)&unsigned char buf[12] = 2082;
                      *(void *)&buf[14] = v135;
                      __int16 v280 = 2080;
                      int v281 = (nw_protocol *)" ";
                      __int16 v282 = 1042;
                      *(_DWORD *)unint64_t v283 = 16;
                      *(_WORD *)&v283[4] = 2098;
                      *(void *)&v283[6] = type;
                      _os_log_impl(&dword_1830D4000, v131, v160, "%{public}s %{public}s%sMultiplexing protocol already has input handler registered for %{public,uuid_t}.16P, no backtrace", buf, 0x30u);
                    }
                  }
                  else
                  {
                    os_log_type_t v131 = __nwlog_obj();
                    os_log_type_t v178 = v278;
                    if (os_log_type_enabled(v131, (os_log_type_t)v278))
                    {
                      *(_DWORD *)tcp_info buf = 136447234;
                      *(void *)&uint8_t buf[4] = "nw_protocol_implementation_add_input_handler";
                      *(_WORD *)&unsigned char buf[12] = 2082;
                      *(void *)&buf[14] = v135;
                      __int16 v280 = 2080;
                      int v281 = (nw_protocol *)" ";
                      __int16 v282 = 1042;
                      *(_DWORD *)unint64_t v283 = 16;
                      *(_WORD *)&v283[4] = 2098;
                      *(void *)&v283[6] = type;
                      _os_log_impl(&dword_1830D4000, v131, v178, "%{public}s %{public}s%sMultiplexing protocol already has input handler registered for %{public,uuid_t}.16P, backtrace limit exceeded", buf, 0x30u);
                    }
                  }
LABEL_327:

                  goto LABEL_328;
                }
                int v128 = v7[405];
                if (a1->default_input_handler)
                {
                  if (v128 < 0) {
                    goto LABEL_330;
                  }
                  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                  networkd_settings_init();
                  id v129 = (id)gLogObj;
                  *(_DWORD *)tcp_info buf = 136446722;
                  *(void *)&uint8_t buf[4] = "nw_protocol_implementation_add_input_handler";
                  *(_WORD *)&unsigned char buf[12] = 2082;
                  *(void *)&buf[14] = v7 + 407;
                  __int16 v280 = 2080;
                  int v281 = (nw_protocol *)" ";
                  int v130 = (char *)_os_log_send_and_compose_impl();

                  type[0] = 16;
                  LOBYTE(v278) = 0;
                  if (!__nwlog_fault(v130, type, &v278)) {
                    goto LABEL_328;
                  }
                  if (type[0] == 17)
                  {
                    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                    networkd_settings_init();
                    os_log_type_t v131 = (id)gLogObj;
                    os_log_type_t v132 = type[0];
                    if (os_log_type_enabled(v131, (os_log_type_t)type[0]))
                    {
                      *(_DWORD *)tcp_info buf = 136446722;
                      *(void *)&uint8_t buf[4] = "nw_protocol_implementation_add_input_handler";
                      *(_WORD *)&unsigned char buf[12] = 2082;
                      *(void *)&buf[14] = v7 + 407;
                      __int16 v280 = 2080;
                      int v281 = (nw_protocol *)" ";
                      _os_log_impl(&dword_1830D4000, v131, v132, "%{public}s %{public}s%sProtocol instance already has default input handler", buf, 0x20u);
                    }
                  }
                  else if ((_BYTE)v278)
                  {
                    id v137 = (char *)__nw_create_backtrace_string();
                    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                    networkd_settings_init();
                    os_log_type_t v131 = (id)gLogObj;
                    os_log_type_t v138 = type[0];
                    BOOL v139 = os_log_type_enabled(v131, (os_log_type_t)type[0]);
                    if (v137)
                    {
                      if (v139)
                      {
                        *(_DWORD *)tcp_info buf = 136446978;
                        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_add_input_handler";
                        *(_WORD *)&unsigned char buf[12] = 2082;
                        *(void *)&buf[14] = v7 + 407;
                        __int16 v280 = 2080;
                        int v281 = (nw_protocol *)" ";
                        __int16 v282 = 2082;
                        *(void *)unint64_t v283 = v137;
                        _os_log_impl(&dword_1830D4000, v131, v138, "%{public}s %{public}s%sProtocol instance already has default input handler, dumping backtrace:%{public}s", buf, 0x2Au);
                      }

                      free(v137);
                      if (!v130) {
                        goto LABEL_330;
                      }
                      goto LABEL_329;
                    }
                    if (v139)
                    {
                      *(_DWORD *)tcp_info buf = 136446722;
                      *(void *)&uint8_t buf[4] = "nw_protocol_implementation_add_input_handler";
                      *(_WORD *)&unsigned char buf[12] = 2082;
                      *(void *)&buf[14] = v7 + 407;
                      __int16 v280 = 2080;
                      int v281 = (nw_protocol *)" ";
                      _os_log_impl(&dword_1830D4000, v131, v138, "%{public}s %{public}s%sProtocol instance already has default input handler, no backtrace", buf, 0x20u);
                    }
                  }
                  else
                  {
                    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                    networkd_settings_init();
                    os_log_type_t v131 = (id)gLogObj;
                    os_log_type_t v164 = type[0];
                    if (os_log_type_enabled(v131, (os_log_type_t)type[0]))
                    {
                      *(_DWORD *)tcp_info buf = 136446722;
                      *(void *)&uint8_t buf[4] = "nw_protocol_implementation_add_input_handler";
                      *(_WORD *)&unsigned char buf[12] = 2082;
                      *(void *)&buf[14] = v7 + 407;
                      __int16 v280 = 2080;
                      int v281 = (nw_protocol *)" ";
                      _os_log_impl(&dword_1830D4000, v131, v164, "%{public}s %{public}s%sProtocol instance already has default input handler, backtrace limit exceeded", buf, 0x20u);
                    }
                  }
                  goto LABEL_327;
                }
                if ((v128 & 0x80000000) == 0 && gLogDatapath)
                {
                  os_log_type_t v199 = __nwlog_obj();
                  if (os_log_type_enabled(v199, OS_LOG_TYPE_DEBUG))
                  {
                    *(_DWORD *)tcp_info buf = 136446722;
                    *(void *)&uint8_t buf[4] = "nw_protocol_implementation_add_input_handler";
                    *(_WORD *)&unsigned char buf[12] = 2082;
                    *(void *)&buf[14] = v7 + 407;
                    __int16 v280 = 2080;
                    int v281 = (nw_protocol *)" ";
                    _os_log_impl(&dword_1830D4000, v199, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sProtocol add input handler", buf, 0x20u);
                  }

                  default_input_handler = a1->default_input_handler;
                  if (default_input_handler != a2)
                  {
                    if (default_input_handler)
                    {
                      if (default_input_handler->handle == &nw_protocol_ref_counted_handle)
                      {
                        nw_endpoint_t v201 = default_input_handler[1].callbacks;
                        if (v201)
                        {
                          os_log_type_t v202 = (nw_protocol_callbacks *)((char *)v201 - 1);
                          default_input_handler[1].callbacks = v202;
                          if (!v202)
                          {
                            nw_endpoint_t v203 = *(void (***)(void))default_input_handler[1].flow_id;
                            if (v203)
                            {
                              *(void *)default_input_handler[1].flow_id = 0;
                              v203[2](v203);
                              _Block_release(v203);
                            }
                            if (default_input_handler[1].flow_id[8])
                            {
                              os_log_type_t v204 = *(const void **)default_input_handler[1].flow_id;
                              if (v204) {
                                _Block_release(v204);
                              }
                            }
                            free(default_input_handler);
                          }
                        }
                      }
                    }
                    goto LABEL_275;
                  }
                }
                else if (a2)
                {
LABEL_275:
                  a1->default_input_handler = a2;
                  if (a2)
                  {
                    if (a2->handle == &nw_protocol_ref_counted_handle)
                    {
                      nw_endpoint_t v133 = a2[1].callbacks;
                      if (v133) {
                        a2[1].callbacks = (nw_protocol_callbacks *)((char *)&v133->add_input_handler + 1);
                      }
                    }
                    nw_protocol_set_flow_id_from_protocol(a1, a2);
                    goto LABEL_430;
                  }
                  nw_protocol_set_flow_id_from_protocol(a1, 0);
                  goto LABEL_332;
                }
                nw_protocol_set_flow_id_from_protocol(a1, a2);
                if (a2)
                {
LABEL_430:
                  if (!a2->output_handler)
                  {
                    a2->output_handler = a1;
                    if (a1->handle == &nw_protocol_ref_counted_handle)
                    {
                      nw_endpoint_t v205 = a1[1].callbacks;
                      if (v205) {
                        a1[1].callbacks = (nw_protocol_callbacks *)((char *)&v205->add_input_handler + 1);
                      }
                    }
                  }
                  goto LABEL_434;
                }
LABEL_332:
                id v165 = __nwlog_obj();
                *(_DWORD *)tcp_info buf = 136446210;
                *(void *)&uint8_t buf[4] = "__nw_protocol_get_output_handler";
                char v166 = (char *)_os_log_send_and_compose_impl();

                type[0] = 16;
                LOBYTE(v278) = 0;
                if (!__nwlog_fault(v166, type, &v278)) {
                  goto LABEL_385;
                }
                if (type[0] == 17)
                {
                  id v167 = __nwlog_obj();
                  os_log_type_t v168 = type[0];
                  if (os_log_type_enabled(v167, (os_log_type_t)type[0]))
                  {
                    *(_DWORD *)tcp_info buf = 136446210;
                    *(void *)&uint8_t buf[4] = "__nw_protocol_get_output_handler";
                    _os_log_impl(&dword_1830D4000, v167, v168, "%{public}s called with null protocol", buf, 0xCu);
                  }
                }
                else if ((_BYTE)v278)
                {
                  uint64_t v179 = (char *)__nw_create_backtrace_string();
                  id v167 = __nwlog_obj();
                  os_log_type_t v180 = type[0];
                  BOOL v181 = os_log_type_enabled(v167, (os_log_type_t)type[0]);
                  if (v179)
                  {
                    if (v181)
                    {
                      *(_DWORD *)tcp_info buf = 136446466;
                      *(void *)&uint8_t buf[4] = "__nw_protocol_get_output_handler";
                      *(_WORD *)&unsigned char buf[12] = 2082;
                      *(void *)&buf[14] = v179;
                      _os_log_impl(&dword_1830D4000, v167, v180, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
                    }

                    free(v179);
LABEL_385:
                    if (v166) {
                      free(v166);
                    }
                    unint64_t v184 = __nwlog_obj();
                    *(_DWORD *)tcp_info buf = 136446210;
                    *(void *)&uint8_t buf[4] = "__nw_protocol_set_output_handler";
                    nw_endpoint_t v185 = (char *)_os_log_send_and_compose_impl();

                    type[0] = 16;
                    LOBYTE(v278) = 0;
                    if (!__nwlog_fault(v185, type, &v278)) {
                      goto LABEL_403;
                    }
                    if (type[0] == 17)
                    {
                      BOOL v186 = __nwlog_obj();
                      os_log_type_t v187 = type[0];
                      if (os_log_type_enabled(v186, (os_log_type_t)type[0]))
                      {
                        *(_DWORD *)tcp_info buf = 136446210;
                        *(void *)&uint8_t buf[4] = "__nw_protocol_set_output_handler";
                        _os_log_impl(&dword_1830D4000, v186, v187, "%{public}s called with null protocol", buf, 0xCu);
                      }
                    }
                    else if ((_BYTE)v278)
                    {
                      v188 = (char *)__nw_create_backtrace_string();
                      BOOL v186 = __nwlog_obj();
                      os_log_type_t v189 = type[0];
                      BOOL v190 = os_log_type_enabled(v186, (os_log_type_t)type[0]);
                      if (v188)
                      {
                        if (v190)
                        {
                          *(_DWORD *)tcp_info buf = 136446466;
                          *(void *)&uint8_t buf[4] = "__nw_protocol_set_output_handler";
                          *(_WORD *)&unsigned char buf[12] = 2082;
                          *(void *)&buf[14] = v188;
                          _os_log_impl(&dword_1830D4000, v186, v189, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
                        }

                        free(v188);
                        goto LABEL_403;
                      }
                      if (v190)
                      {
                        *(_DWORD *)tcp_info buf = 136446210;
                        *(void *)&uint8_t buf[4] = "__nw_protocol_set_output_handler";
                        _os_log_impl(&dword_1830D4000, v186, v189, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
                      }
                    }
                    else
                    {
                      BOOL v186 = __nwlog_obj();
                      os_log_type_t v191 = type[0];
                      if (os_log_type_enabled(v186, (os_log_type_t)type[0]))
                      {
                        *(_DWORD *)tcp_info buf = 136446210;
                        *(void *)&uint8_t buf[4] = "__nw_protocol_set_output_handler";
                        _os_log_impl(&dword_1830D4000, v186, v191, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
                      }
                    }

LABEL_403:
                    if (v185) {
                      free(v185);
                    }
LABEL_434:
                    uint64_t v206 = nw_protocol_instance_copy_path(v7, -1);
                    int v207 = (void *)*((void *)v7 + 36);
                    *((void *)v7 + 36) = v206;

                    objc_storeStrong((id *)v7 + 7, v92);
                    if ((*(unsigned char *)(*((void *)v7 + 1) + 184) & 0x20) != 0 && a2 != 0)
                    {
                      id v209 = a2->callbacks;
                      if (v209)
                      {
                        long long v210 = (uint64_t (*)(nw_protocol *))v209->supports_external_data;
                        if (v210)
                        {
                          uint64_t v211 = a2->handle;
                          if (v211 == &nw_protocol_ref_counted_handle)
                          {
                            __int16 v213 = a2[1].callbacks;
                            if (v213) {
                              a2[1].callbacks = (nw_protocol_callbacks *)((char *)&v213->add_input_handler + 1);
                            }
                            *(void *)tcp_info buf = a2;
                            char v212 = buf[8] | 1;
                          }
                          else
                          {
                            *(void *)tcp_info buf = a2;
                            char v212 = buf[8] & 0xFE;
                          }
                          buf[8] = v212;
                          int v214 = v210(a2);
                          if (v211 == &nw_protocol_ref_counted_handle) {
                            nw::release_if_needed<nw_protocol *>((uint64_t *)buf);
                          }
                          if (v214) {
                            char v215 = 2;
                          }
                          else {
                            char v215 = 0;
                          }
                          v7[403] = v7[403] & 0xFD | v215;
                        }
                      }
                    }
                    if (v101)
                    {
                      uint64_t v216 = 0;
LABEL_456:
                      if ((v7[402] & 2) == 0 && *(void *)(*(void *)(*((void *)v7 + 1) + 80) + 40))
                      {
                        *(_OWORD *)tcp_info buf = *(_OWORD *)a1->flow_id;
                        id v219 = nw_path_copy_flow_registration(*((void **)v7 + 15), (uint64_t)buf);
                        unint64_t v220 = (void *)*((void *)v7 + 35);
                        *((void *)v7 + 35) = v219;

                        (*(void (**)(char *, uint64_t))(*(void *)(*((void *)v7 + 1) + 80) + 40))(v7, v216);
                        v7[402] |= 2u;
                      }
                      goto LABEL_459;
                    }
                    __int16 v217 = v88;
                    BOOL v218 = v217;
                    if (v217)
                    {
                      uint64_t v216 = *((unsigned __int8 *)v217 + 97) >> 7;
LABEL_455:

                      goto LABEL_456;
                    }
                    v239 = __nwlog_obj();
                    *(_DWORD *)tcp_info buf = 136446210;
                    *(void *)&uint8_t buf[4] = "nw_parameters_get_server_mode";
                    __int16 v240 = (char *)_os_log_send_and_compose_impl();

                    type[0] = 16;
                    LOBYTE(v278) = 0;
                    if (__nwlog_fault(v240, type, &v278))
                    {
                      if (type[0] == 17)
                      {
                        os_log_type_t v241 = __nwlog_obj();
                        os_log_type_t v242 = type[0];
                        if (os_log_type_enabled(v241, (os_log_type_t)type[0]))
                        {
                          *(_DWORD *)tcp_info buf = 136446210;
                          *(void *)&uint8_t buf[4] = "nw_parameters_get_server_mode";
                          _os_log_impl(&dword_1830D4000, v241, v242, "%{public}s called with null parameters", buf, 0xCu);
                        }
                      }
                      else if ((_BYTE)v278)
                      {
                        BOOL v247 = (char *)__nw_create_backtrace_string();
                        os_log_type_t v241 = __nwlog_obj();
                        os_log_type_t v248 = type[0];
                        BOOL v249 = os_log_type_enabled(v241, (os_log_type_t)type[0]);
                        if (v247)
                        {
                          if (v249)
                          {
                            *(_DWORD *)tcp_info buf = 136446466;
                            *(void *)&uint8_t buf[4] = "nw_parameters_get_server_mode";
                            *(_WORD *)&unsigned char buf[12] = 2082;
                            *(void *)&buf[14] = v247;
                            _os_log_impl(&dword_1830D4000, v241, v248, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
                          }

                          free(v247);
                          goto LABEL_566;
                        }
                        if (v249)
                        {
                          *(_DWORD *)tcp_info buf = 136446210;
                          *(void *)&uint8_t buf[4] = "nw_parameters_get_server_mode";
                          _os_log_impl(&dword_1830D4000, v241, v248, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
                        }
                      }
                      else
                      {
                        os_log_type_t v241 = __nwlog_obj();
                        os_log_type_t v267 = type[0];
                        if (os_log_type_enabled(v241, (os_log_type_t)type[0]))
                        {
                          *(_DWORD *)tcp_info buf = 136446210;
                          *(void *)&uint8_t buf[4] = "nw_parameters_get_server_mode";
                          _os_log_impl(&dword_1830D4000, v241, v267, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
                        }
                      }
                    }
LABEL_566:
                    if (v240) {
                      free(v240);
                    }
                    uint64_t v216 = 0;
                    goto LABEL_455;
                  }
                  if (v181)
                  {
                    *(_DWORD *)tcp_info buf = 136446210;
                    *(void *)&uint8_t buf[4] = "__nw_protocol_get_output_handler";
                    _os_log_impl(&dword_1830D4000, v167, v180, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
                  }
                }
                else
                {
                  id v167 = __nwlog_obj();
                  os_log_type_t v183 = type[0];
                  if (os_log_type_enabled(v167, (os_log_type_t)type[0]))
                  {
                    *(_DWORD *)tcp_info buf = 136446210;
                    *(void *)&uint8_t buf[4] = "__nw_protocol_get_output_handler";
                    _os_log_impl(&dword_1830D4000, v167, v183, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
                  }
                }

                goto LABEL_385;
              }
              os_log_type_t v71 = v19;
              uint64_t v72 = (nw_protocol *)*(id *)(v71[13] + 136);

              if (!nw_context_shares_workloop(*((void **)v7 + 15), v72))
              {
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                id v73 = (id)gLogObj;
                uint64_t v74 = *((void *)v7 + 15);
                *(_DWORD *)tcp_info buf = 136446978;
                *(void *)&uint8_t buf[4] = "nw_protocol_implementation_add_input_handler";
                *(_WORD *)&unsigned char buf[12] = 2048;
                *(void *)&buf[14] = a2;
                __int16 v280 = 2112;
                int v281 = v72;
                __int16 v282 = 2112;
                *(void *)unint64_t v283 = v74;
                os_log_type_t v75 = (char *)_os_log_send_and_compose_impl();

                type[0] = 16;
                LOBYTE(v278) = 0;
                if (__nwlog_fault(v75, type, &v278))
                {
                  if (type[0] == 17)
                  {
                    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                    networkd_settings_init();
                    os_log_type_t v76 = (id)gLogObj;
                    os_log_type_t v77 = type[0];
                    if (os_log_type_enabled(v76, (os_log_type_t)type[0]))
                    {
                      uint64_t v78 = *((void *)v7 + 15);
                      *(_DWORD *)tcp_info buf = 136446978;
                      *(void *)&uint8_t buf[4] = "nw_protocol_implementation_add_input_handler";
                      *(_WORD *)&unsigned char buf[12] = 2048;
                      *(void *)&buf[14] = a2;
                      __int16 v280 = 2112;
                      int v281 = v72;
                      __int16 v282 = 2112;
                      *(void *)unint64_t v283 = v78;
                      _os_log_impl(&dword_1830D4000, v76, v77, "%{public}s Incoming stream %p has different workloop on context %@ than original one from protocol create, which had workloop %@", buf, 0x2Au);
                    }
                  }
                  else if ((_BYTE)v278)
                  {
                    os_log_type_t v79 = __nw_create_backtrace_string();
                    if (v79)
                    {
                      uint64_t v80 = (char *)v79;
                      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                      networkd_settings_init();
                      __int16 v81 = (id)gLogObj;
                      os_log_type_t v82 = type[0];
                      if (os_log_type_enabled(v81, (os_log_type_t)type[0]))
                      {
                        uint64_t v83 = *((void *)v7 + 15);
                        *(_DWORD *)tcp_info buf = 136447234;
                        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_add_input_handler";
                        *(_WORD *)&unsigned char buf[12] = 2048;
                        *(void *)&buf[14] = a2;
                        __int16 v280 = 2112;
                        int v281 = v72;
                        __int16 v282 = 2112;
                        *(void *)unint64_t v283 = v83;
                        *(_WORD *)&v283[8] = 2082;
                        *(void *)&v283[10] = v80;
                        _os_log_impl(&dword_1830D4000, v81, v82, "%{public}s Incoming stream %p has different workloop on context %@ than original one from protocol create, which had workloop %@, dumping backtrace:%{public}s", buf, 0x34u);
                      }

                      free(v80);
                      if (!v75) {
                        goto LABEL_158;
                      }
                      goto LABEL_157;
                    }
                    os_log_type_t v76 = __nwlog_obj();
                    os_log_type_t v86 = type[0];
                    if (os_log_type_enabled(v76, (os_log_type_t)type[0]))
                    {
                      uint64_t v87 = *((void *)v7 + 15);
                      *(_DWORD *)tcp_info buf = 136446978;
                      *(void *)&uint8_t buf[4] = "nw_protocol_implementation_add_input_handler";
                      *(_WORD *)&unsigned char buf[12] = 2048;
                      *(void *)&buf[14] = a2;
                      __int16 v280 = 2112;
                      int v281 = v72;
                      __int16 v282 = 2112;
                      *(void *)unint64_t v283 = v87;
                      _os_log_impl(&dword_1830D4000, v76, v86, "%{public}s Incoming stream %p has different workloop on context %@ than original one from protocol create, which had workloop %@, no backtrace", buf, 0x2Au);
                    }
                  }
                  else
                  {
                    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                    networkd_settings_init();
                    os_log_type_t v76 = (id)gLogObj;
                    os_log_type_t v84 = type[0];
                    if (os_log_type_enabled(v76, (os_log_type_t)type[0]))
                    {
                      uint64_t v85 = *((void *)v7 + 15);
                      *(_DWORD *)tcp_info buf = 136446978;
                      *(void *)&uint8_t buf[4] = "nw_protocol_implementation_add_input_handler";
                      *(_WORD *)&unsigned char buf[12] = 2048;
                      *(void *)&buf[14] = a2;
                      __int16 v280 = 2112;
                      int v281 = v72;
                      __int16 v282 = 2112;
                      *(void *)unint64_t v283 = v85;
                      _os_log_impl(&dword_1830D4000, v76, v84, "%{public}s Incoming stream %p has different workloop on context %@ than original one from protocol create, which had workloop %@, backtrace limit exceeded", buf, 0x2Au);
                    }
                  }
                }
                if (v75) {
LABEL_157:
                }
                  free(v75);
              }
LABEL_158:

              goto LABEL_159;
            }
            char v42 = __nwlog_obj();
            *(_DWORD *)tcp_info buf = 136446210;
            *(void *)&uint8_t buf[4] = "__nw_protocol_get_output_handler";
            char v43 = (char *)_os_log_send_and_compose_impl();

            type[0] = 16;
            LOBYTE(v278) = 0;
            if (__nwlog_fault(v43, type, &v278))
            {
              if (type[0] == 17)
              {
                id v44 = __nwlog_obj();
                os_log_type_t v45 = type[0];
                if (os_log_type_enabled(v44, (os_log_type_t)type[0]))
                {
                  *(_DWORD *)tcp_info buf = 136446210;
                  *(void *)&uint8_t buf[4] = "__nw_protocol_get_output_handler";
                  _os_log_impl(&dword_1830D4000, v44, v45, "%{public}s called with null protocol", buf, 0xCu);
                }
LABEL_201:

                goto LABEL_202;
              }
              if (!(_BYTE)v278)
              {
                id v44 = __nwlog_obj();
                os_log_type_t v102 = type[0];
                if (os_log_type_enabled(v44, (os_log_type_t)type[0]))
                {
                  *(_DWORD *)tcp_info buf = 136446210;
                  *(void *)&uint8_t buf[4] = "__nw_protocol_get_output_handler";
                  _os_log_impl(&dword_1830D4000, v44, v102, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
                }
                goto LABEL_201;
              }
              uint64_t v61 = (char *)__nw_create_backtrace_string();
              id v44 = __nwlog_obj();
              os_log_type_t v62 = type[0];
              BOOL v63 = os_log_type_enabled(v44, (os_log_type_t)type[0]);
              if (!v61)
              {
                if (v63)
                {
                  *(_DWORD *)tcp_info buf = 136446210;
                  *(void *)&uint8_t buf[4] = "__nw_protocol_get_output_handler";
                  _os_log_impl(&dword_1830D4000, v44, v62, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
                }
                goto LABEL_201;
              }
              if (v63)
              {
                *(_DWORD *)tcp_info buf = 136446466;
                *(void *)&uint8_t buf[4] = "__nw_protocol_get_output_handler";
                *(_WORD *)&unsigned char buf[12] = 2082;
                *(void *)&buf[14] = v61;
                _os_log_impl(&dword_1830D4000, v44, v62, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
              }

              free(v61);
            }
LABEL_202:
            if (v43) {
              free(v43);
            }
            nw_endpoint_t v103 = __nwlog_obj();
            *(_DWORD *)tcp_info buf = 136446210;
            *(void *)&uint8_t buf[4] = "__nw_protocol_set_output_handler";
            BOOL v104 = (char *)_os_log_send_and_compose_impl();

            type[0] = 16;
            LOBYTE(v278) = 0;
            if (__nwlog_fault(v104, type, &v278))
            {
              if (type[0] == 17)
              {
                unint64_t v105 = __nwlog_obj();
                os_log_type_t v106 = type[0];
                if (os_log_type_enabled(v105, (os_log_type_t)type[0]))
                {
                  *(_DWORD *)tcp_info buf = 136446210;
                  *(void *)&uint8_t buf[4] = "__nw_protocol_set_output_handler";
                  _os_log_impl(&dword_1830D4000, v105, v106, "%{public}s called with null protocol", buf, 0xCu);
                }
LABEL_219:

                goto LABEL_220;
              }
              if (!(_BYTE)v278)
              {
                unint64_t v105 = __nwlog_obj();
                os_log_type_t v110 = type[0];
                if (os_log_type_enabled(v105, (os_log_type_t)type[0]))
                {
                  *(_DWORD *)tcp_info buf = 136446210;
                  *(void *)&uint8_t buf[4] = "__nw_protocol_set_output_handler";
                  _os_log_impl(&dword_1830D4000, v105, v110, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
                }
                goto LABEL_219;
              }
              id v107 = (char *)__nw_create_backtrace_string();
              unint64_t v105 = __nwlog_obj();
              os_log_type_t v108 = type[0];
              BOOL v109 = os_log_type_enabled(v105, (os_log_type_t)type[0]);
              if (!v107)
              {
                if (v109)
                {
                  *(_DWORD *)tcp_info buf = 136446210;
                  *(void *)&uint8_t buf[4] = "__nw_protocol_set_output_handler";
                  _os_log_impl(&dword_1830D4000, v105, v108, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
                }
                goto LABEL_219;
              }
              if (v109)
              {
                *(_DWORD *)tcp_info buf = 136446466;
                *(void *)&uint8_t buf[4] = "__nw_protocol_set_output_handler";
                *(_WORD *)&unsigned char buf[12] = 2082;
                *(void *)&buf[14] = v107;
                _os_log_impl(&dword_1830D4000, v105, v108, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
              }

              free(v107);
            }
LABEL_220:
            if (v104) {
              free(v104);
            }
            os_log_type_t v111 = __nwlog_obj();
            *(_DWORD *)tcp_info buf = 136446210;
            *(void *)&uint8_t buf[4] = "__nw_protocol_get_parameters";
            unint64_t v112 = (char *)_os_log_send_and_compose_impl();

            type[0] = 16;
            LOBYTE(v278) = 0;
            if (!__nwlog_fault(v112, type, &v278)) {
              goto LABEL_238;
            }
            if (type[0] == 17)
            {
              char v113 = __nwlog_obj();
              os_log_type_t v114 = type[0];
              if (os_log_type_enabled(v113, (os_log_type_t)type[0]))
              {
                *(_DWORD *)tcp_info buf = 136446210;
                *(void *)&uint8_t buf[4] = "__nw_protocol_get_parameters";
                _os_log_impl(&dword_1830D4000, v113, v114, "%{public}s called with null protocol", buf, 0xCu);
              }
            }
            else if ((_BYTE)v278)
            {
              os_log_type_t v115 = (char *)__nw_create_backtrace_string();
              char v113 = __nwlog_obj();
              os_log_type_t v116 = type[0];
              BOOL v117 = os_log_type_enabled(v113, (os_log_type_t)type[0]);
              if (v115)
              {
                if (v117)
                {
                  *(_DWORD *)tcp_info buf = 136446466;
                  *(void *)&uint8_t buf[4] = "__nw_protocol_get_parameters";
                  *(_WORD *)&unsigned char buf[12] = 2082;
                  *(void *)&buf[14] = v115;
                  _os_log_impl(&dword_1830D4000, v113, v116, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
                }

                free(v115);
                goto LABEL_238;
              }
              if (v117)
              {
                *(_DWORD *)tcp_info buf = 136446210;
                *(void *)&uint8_t buf[4] = "__nw_protocol_get_parameters";
                _os_log_impl(&dword_1830D4000, v113, v116, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
              }
            }
            else
            {
              char v113 = __nwlog_obj();
              os_log_type_t v118 = type[0];
              if (os_log_type_enabled(v113, (os_log_type_t)type[0]))
              {
                *(_DWORD *)tcp_info buf = 136446210;
                *(void *)&uint8_t buf[4] = "__nw_protocol_get_parameters";
                _os_log_impl(&dword_1830D4000, v113, v118, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
              }
            }

LABEL_238:
            if (v112) {
              free(v112);
            }
            goto LABEL_240;
          }
          if (v6[405] < 0) {
            goto LABEL_43;
          }
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          id v12 = (id)gLogObj;
          *(_DWORD *)tcp_info buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_protocol_implementation_add_input_handler";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v7 + 407;
          __int16 v280 = 2080;
          int v281 = (nw_protocol *)" ";
          __int16 v282 = 2048;
          *(void *)unint64_t v283 = a1;
          uint64_t v13 = (char *)_os_log_send_and_compose_impl();

          type[0] = 16;
          LOBYTE(v278) = 0;
          if (__nwlog_fault(v13, type, &v278))
          {
            if (type[0] == 17)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              os_log_type_t v14 = (id)gLogObj;
              os_log_type_t v15 = type[0];
              if (os_log_type_enabled(v14, (os_log_type_t)type[0]))
              {
                *(_DWORD *)tcp_info buf = 136446978;
                *(void *)&uint8_t buf[4] = "nw_protocol_implementation_add_input_handler";
                *(_WORD *)&unsigned char buf[12] = 2082;
                *(void *)&buf[14] = v7 + 407;
                __int16 v280 = 2080;
                int v281 = (nw_protocol *)" ";
                __int16 v282 = 2048;
                *(void *)unint64_t v283 = a1;
                _os_log_impl(&dword_1830D4000, v14, v15, "%{public}s %{public}s%sCannot add input handler %p to itself", buf, 0x2Au);
              }
            }
            else if ((_BYTE)v278)
            {
              uint64_t v20 = (char *)__nw_create_backtrace_string();
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              os_log_type_t v14 = (id)gLogObj;
              os_log_type_t v21 = type[0];
              BOOL v22 = os_log_type_enabled(v14, (os_log_type_t)type[0]);
              if (v20)
              {
                if (v22)
                {
                  *(_DWORD *)tcp_info buf = 136447234;
                  *(void *)&uint8_t buf[4] = "nw_protocol_implementation_add_input_handler";
                  *(_WORD *)&unsigned char buf[12] = 2082;
                  *(void *)&buf[14] = v7 + 407;
                  __int16 v280 = 2080;
                  int v281 = (nw_protocol *)" ";
                  __int16 v282 = 2048;
                  *(void *)unint64_t v283 = a1;
                  *(_WORD *)&v283[8] = 2082;
                  *(void *)&v283[10] = v20;
                  _os_log_impl(&dword_1830D4000, v14, v21, "%{public}s %{public}s%sCannot add input handler %p to itself, dumping backtrace:%{public}s", buf, 0x34u);
                }

                free(v20);
                if (!v13) {
                  goto LABEL_43;
                }
                goto LABEL_42;
              }
              if (v22)
              {
                *(_DWORD *)tcp_info buf = 136446978;
                *(void *)&uint8_t buf[4] = "nw_protocol_implementation_add_input_handler";
                *(_WORD *)&unsigned char buf[12] = 2082;
                *(void *)&buf[14] = v7 + 407;
                __int16 v280 = 2080;
                int v281 = (nw_protocol *)" ";
                __int16 v282 = 2048;
                *(void *)unint64_t v283 = a1;
                _os_log_impl(&dword_1830D4000, v14, v21, "%{public}s %{public}s%sCannot add input handler %p to itself, no backtrace", buf, 0x2Au);
              }
            }
            else
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              os_log_type_t v14 = (id)gLogObj;
              os_log_type_t v23 = type[0];
              if (os_log_type_enabled(v14, (os_log_type_t)type[0]))
              {
                *(_DWORD *)tcp_info buf = 136446978;
                *(void *)&uint8_t buf[4] = "nw_protocol_implementation_add_input_handler";
                *(_WORD *)&unsigned char buf[12] = 2082;
                *(void *)&buf[14] = v7 + 407;
                __int16 v280 = 2080;
                int v281 = (nw_protocol *)" ";
                __int16 v282 = 2048;
                *(void *)unint64_t v283 = a1;
                _os_log_impl(&dword_1830D4000, v14, v23, "%{public}s %{public}s%sCannot add input handler %p to itself, backtrace limit exceeded", buf, 0x2Au);
              }
            }
          }
LABEL_41:
          if (v13) {
LABEL_42:
          }
            free(v13);
LABEL_43:
          uint64_t v24 = 0;
LABEL_475:

          return v24;
        }
        BOOL v40 = __nwlog_obj();
        *(_DWORD *)tcp_info buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_add_input_handler";
        uint64_t v13 = (char *)_os_log_send_and_compose_impl();

        type[0] = 16;
        LOBYTE(v278) = 0;
        if (!__nwlog_fault(v13, type, &v278)) {
          goto LABEL_41;
        }
        if (type[0] == 17)
        {
          char v36 = __nwlog_obj();
          os_log_type_t v41 = type[0];
          if (os_log_type_enabled(v36, (os_log_type_t)type[0]))
          {
            *(_DWORD *)tcp_info buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_protocol_implementation_add_input_handler";
            _os_log_impl(&dword_1830D4000, v36, v41, "%{public}s called with null instance->parent_definition->extended_state", buf, 0xCu);
          }
          goto LABEL_195;
        }
        if (!(_BYTE)v278)
        {
          char v36 = __nwlog_obj();
          os_log_type_t v69 = type[0];
          if (os_log_type_enabled(v36, (os_log_type_t)type[0]))
          {
            *(_DWORD *)tcp_info buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_protocol_implementation_add_input_handler";
            _os_log_impl(&dword_1830D4000, v36, v69, "%{public}s called with null instance->parent_definition->extended_state, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_195;
        }
        os_log_type_t v56 = (char *)__nw_create_backtrace_string();
        char v36 = __nwlog_obj();
        os_log_type_t v59 = type[0];
        BOOL v60 = os_log_type_enabled(v36, (os_log_type_t)type[0]);
        if (!v56)
        {
          if (v60)
          {
            *(_DWORD *)tcp_info buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_protocol_implementation_add_input_handler";
            _os_log_impl(&dword_1830D4000, v36, v59, "%{public}s called with null instance->parent_definition->extended_state, no backtrace", buf, 0xCu);
          }
          goto LABEL_195;
        }
        if (v60)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_implementation_add_input_handler";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v56;
          _os_log_impl(&dword_1830D4000, v36, v59, "%{public}s called with null instance->parent_definition->extended_state, dumping backtrace:%{public}s", buf, 0x16u);
        }
      }
      else
      {
        BOOL v38 = __nwlog_obj();
        *(_DWORD *)tcp_info buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_add_input_handler";
        uint64_t v13 = (char *)_os_log_send_and_compose_impl();

        type[0] = 16;
        LOBYTE(v278) = 0;
        if (!__nwlog_fault(v13, type, &v278)) {
          goto LABEL_41;
        }
        if (type[0] == 17)
        {
          char v36 = __nwlog_obj();
          os_log_type_t v39 = type[0];
          if (os_log_type_enabled(v36, (os_log_type_t)type[0]))
          {
            *(_DWORD *)tcp_info buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_protocol_implementation_add_input_handler";
            _os_log_impl(&dword_1830D4000, v36, v39, "%{public}s called with null instance->parent_definition", buf, 0xCu);
          }
          goto LABEL_195;
        }
        if (!(_BYTE)v278)
        {
          char v36 = __nwlog_obj();
          os_log_type_t v68 = type[0];
          if (os_log_type_enabled(v36, (os_log_type_t)type[0]))
          {
            *(_DWORD *)tcp_info buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_protocol_implementation_add_input_handler";
            _os_log_impl(&dword_1830D4000, v36, v68, "%{public}s called with null instance->parent_definition, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_195;
        }
        os_log_type_t v56 = (char *)__nw_create_backtrace_string();
        char v36 = __nwlog_obj();
        os_log_type_t v57 = type[0];
        BOOL v58 = os_log_type_enabled(v36, (os_log_type_t)type[0]);
        if (!v56)
        {
          if (v58)
          {
            *(_DWORD *)tcp_info buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_protocol_implementation_add_input_handler";
            _os_log_impl(&dword_1830D4000, v36, v57, "%{public}s called with null instance->parent_definition, no backtrace", buf, 0xCu);
          }
          goto LABEL_195;
        }
        if (v58)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_implementation_add_input_handler";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v56;
          _os_log_impl(&dword_1830D4000, v36, v57, "%{public}s called with null instance->parent_definition, dumping backtrace:%{public}s", buf, 0x16u);
        }
      }

      free(v56);
      if (!v13) {
        goto LABEL_43;
      }
      goto LABEL_42;
    }
    BOOL v35 = __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_implementation_add_input_handler";
    uint64_t v13 = (char *)_os_log_send_and_compose_impl();

    type[0] = 16;
    LOBYTE(v278) = 0;
    if (!__nwlog_fault(v13, type, &v278)) {
      goto LABEL_41;
    }
    if (type[0] == 17)
    {
      char v36 = __nwlog_obj();
      os_log_type_t v37 = type[0];
      if (os_log_type_enabled(v36, (os_log_type_t)type[0]))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_add_input_handler";
        _os_log_impl(&dword_1830D4000, v36, v37, "%{public}s called with null instance", buf, 0xCu);
      }
    }
    else if ((_BYTE)v278)
    {
      uint64_t v53 = (char *)__nw_create_backtrace_string();
      char v36 = __nwlog_obj();
      os_log_type_t v54 = type[0];
      BOOL v55 = os_log_type_enabled(v36, (os_log_type_t)type[0]);
      if (v53)
      {
        if (v55)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_implementation_add_input_handler";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v53;
          _os_log_impl(&dword_1830D4000, v36, v54, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v53);
        goto LABEL_41;
      }
      if (v55)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_add_input_handler";
        _os_log_impl(&dword_1830D4000, v36, v54, "%{public}s called with null instance, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      char v36 = __nwlog_obj();
      os_log_type_t v67 = type[0];
      if (os_log_type_enabled(v36, (os_log_type_t)type[0]))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_add_input_handler";
        _os_log_impl(&dword_1830D4000, v36, v67, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_195:

    goto LABEL_41;
  }
  char v31 = __nwlog_obj();
  *(_DWORD *)tcp_info buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_protocol_implementation_add_input_handler";
  os_log_type_t v32 = (char *)_os_log_send_and_compose_impl();

  type[0] = 16;
  LOBYTE(v278) = 0;
  if (__nwlog_fault(v32, type, &v278))
  {
    if (type[0] == 17)
    {
      BOOL v33 = __nwlog_obj();
      os_log_type_t v34 = type[0];
      if (os_log_type_enabled(v33, (os_log_type_t)type[0]))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_add_input_handler";
        _os_log_impl(&dword_1830D4000, v33, v34, "%{public}s called with null protocol", buf, 0xCu);
      }
    }
    else if ((_BYTE)v278)
    {
      uint64_t v50 = (char *)__nw_create_backtrace_string();
      BOOL v33 = __nwlog_obj();
      os_log_type_t v51 = type[0];
      BOOL v52 = os_log_type_enabled(v33, (os_log_type_t)type[0]);
      if (v50)
      {
        if (v52)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_implementation_add_input_handler";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v50;
          _os_log_impl(&dword_1830D4000, v33, v51, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v50);
        goto LABEL_184;
      }
      if (v52)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_add_input_handler";
        _os_log_impl(&dword_1830D4000, v33, v51, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v33 = __nwlog_obj();
      os_log_type_t v66 = type[0];
      if (os_log_type_enabled(v33, (os_log_type_t)type[0]))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_add_input_handler";
        _os_log_impl(&dword_1830D4000, v33, v66, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_184:
  if (v32) {
    free(v32);
  }
  return 0;
}

void sub_1832D4490(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_protocol_get_flow_id(_OWORD *a1, _OWORD *a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (a2)
    {
      *a2 = *a1;
      return;
    }
    __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    uint64_t v13 = "nw_protocol_get_flow_id";
    uint64_t v2 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v10 = 0;
    if (__nwlog_fault(v2, &type, &v10))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v3 = __nwlog_obj();
        os_log_type_t v4 = type;
        if (!os_log_type_enabled(v3, type)) {
          goto LABEL_33;
        }
        *(_DWORD *)tcp_info buf = 136446210;
        uint64_t v13 = "nw_protocol_get_flow_id";
        uint64_t v5 = "%{public}s called with null destination";
        goto LABEL_32;
      }
      if (!v10)
      {
        uint64_t v3 = __nwlog_obj();
        os_log_type_t v4 = type;
        if (!os_log_type_enabled(v3, type)) {
          goto LABEL_33;
        }
        *(_DWORD *)tcp_info buf = 136446210;
        uint64_t v13 = "nw_protocol_get_flow_id";
        uint64_t v5 = "%{public}s called with null destination, backtrace limit exceeded";
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      BOOL v9 = os_log_type_enabled(v3, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          uint64_t v13 = "nw_protocol_get_flow_id";
          __int16 v14 = 2082;
          os_log_type_t v15 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v3, v4, "%{public}s called with null destination, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        if (v2) {
          goto LABEL_34;
        }
        return;
      }
      if (v9)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint64_t v13 = "nw_protocol_get_flow_id";
        uint64_t v5 = "%{public}s called with null destination, no backtrace";
LABEL_32:
        _os_log_impl(&dword_1830D4000, v3, v4, v5, buf, 0xCu);
      }
    }
  }
  else
  {
    __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    uint64_t v13 = "nw_protocol_get_flow_id";
    uint64_t v2 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v10 = 0;
    if (!__nwlog_fault(v2, &type, &v10)) {
      goto LABEL_33;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      if (!os_log_type_enabled(v3, type)) {
        goto LABEL_33;
      }
      *(_DWORD *)tcp_info buf = 136446210;
      uint64_t v13 = "nw_protocol_get_flow_id";
      uint64_t v5 = "%{public}s called with null protocol";
      goto LABEL_32;
    }
    if (!v10)
    {
      uint64_t v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      if (!os_log_type_enabled(v3, type)) {
        goto LABEL_33;
      }
      *(_DWORD *)tcp_info buf = 136446210;
      uint64_t v13 = "nw_protocol_get_flow_id";
      uint64_t v5 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_32;
    }
    id v6 = (char *)__nw_create_backtrace_string();
    uint64_t v3 = __nwlog_obj();
    os_log_type_t v4 = type;
    BOOL v7 = os_log_type_enabled(v3, type);
    if (!v6)
    {
      if (!v7) {
        goto LABEL_33;
      }
      *(_DWORD *)tcp_info buf = 136446210;
      uint64_t v13 = "nw_protocol_get_flow_id";
      uint64_t v5 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_32;
    }
    if (v7)
    {
      *(_DWORD *)tcp_info buf = 136446466;
      uint64_t v13 = "nw_protocol_get_flow_id";
      __int16 v14 = 2082;
      os_log_type_t v15 = v6;
      _os_log_impl(&dword_1830D4000, v3, v4, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v6);
  }
LABEL_33:
  if (v2) {
LABEL_34:
  }
    free(v2);
}

uint64_t nw_protocol_supports_external_data(uint64_t a1)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    os_log_type_t v32 = "__nw_protocol_supports_external_data";
    os_log_type_t v18 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v29 = 0;
    if (__nwlog_fault(v18, &type, &v29))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        id v19 = __nwlog_obj();
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v19, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          os_log_type_t v32 = "__nw_protocol_supports_external_data";
          os_log_type_t v21 = "%{public}s called with null protocol";
LABEL_59:
          _os_log_impl(&dword_1830D4000, v19, v20, v21, buf, 0xCu);
        }
      }
      else if (v29)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        id v19 = __nwlog_obj();
        os_log_type_t v20 = type;
        BOOL v26 = os_log_type_enabled(v19, type);
        if (backtrace_string)
        {
          if (v26)
          {
            *(_DWORD *)tcp_info buf = 136446466;
            os_log_type_t v32 = "__nw_protocol_supports_external_data";
            __int16 v33 = 2082;
            os_log_type_t v34 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v19, v20, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(backtrace_string);
          goto LABEL_60;
        }
        if (v26)
        {
          *(_DWORD *)tcp_info buf = 136446210;
          os_log_type_t v32 = "__nw_protocol_supports_external_data";
          os_log_type_t v21 = "%{public}s called with null protocol, no backtrace";
          goto LABEL_59;
        }
      }
      else
      {
        id v19 = __nwlog_obj();
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v19, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          os_log_type_t v32 = "__nw_protocol_supports_external_data";
          os_log_type_t v21 = "%{public}s called with null protocol, backtrace limit exceeded";
          goto LABEL_59;
        }
      }
    }
LABEL_60:
    if (v18) {
      free(v18);
    }
    return 0;
  }
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2 == &nw_protocol_ref_counted_handle)
  {
    uint64_t v3 = *(void *)(a1 + 88);
    if (v3) {
      *(void *)(a1 + 88) = v3 + 1;
    }
  }
  uint64_t v4 = *(void *)(a1 + 24);
  if (v4)
  {
    uint64_t v5 = *(uint64_t (**)(uint64_t))(v4 + 176);
    if (v5)
    {
      uint64_t v6 = v5(a1);
      if (v2 != &nw_protocol_ref_counted_handle) {
        return v6;
      }
      goto LABEL_8;
    }
  }
  __nwlog_obj();
  id v12 = *(const char **)(a1 + 16);
  *(_DWORD *)tcp_info buf = 136446722;
  os_log_type_t v32 = "__nw_protocol_supports_external_data";
  if (!v12) {
    id v12 = "invalid";
  }
  __int16 v33 = 2082;
  os_log_type_t v34 = (void *)v12;
  __int16 v35 = 2048;
  uint64_t v36 = a1;
  uint64_t v13 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v29 = 0;
  if (!__nwlog_fault(v13, &type, &v29)) {
    goto LABEL_51;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    __int16 v14 = __nwlog_obj();
    os_log_type_t v15 = type;
    if (!os_log_type_enabled(v14, type)) {
      goto LABEL_51;
    }
    uint64_t v16 = *(const char **)(a1 + 16);
    if (!v16) {
      uint64_t v16 = "invalid";
    }
    *(_DWORD *)tcp_info buf = 136446722;
    os_log_type_t v32 = "__nw_protocol_supports_external_data";
    __int16 v33 = 2082;
    os_log_type_t v34 = (void *)v16;
    __int16 v35 = 2048;
    uint64_t v36 = a1;
    uint64_t v17 = "%{public}s protocol %{public}s (%p) has invalid supports_external_data callback";
LABEL_50:
    _os_log_impl(&dword_1830D4000, v14, v15, v17, buf, 0x20u);
    goto LABEL_51;
  }
  if (!v29)
  {
    __int16 v14 = __nwlog_obj();
    os_log_type_t v15 = type;
    if (!os_log_type_enabled(v14, type)) {
      goto LABEL_51;
    }
    os_log_type_t v27 = *(const char **)(a1 + 16);
    if (!v27) {
      os_log_type_t v27 = "invalid";
    }
    *(_DWORD *)tcp_info buf = 136446722;
    os_log_type_t v32 = "__nw_protocol_supports_external_data";
    __int16 v33 = 2082;
    os_log_type_t v34 = (void *)v27;
    __int16 v35 = 2048;
    uint64_t v36 = a1;
    uint64_t v17 = "%{public}s protocol %{public}s (%p) has invalid supports_external_data callback, backtrace limit exceeded";
    goto LABEL_50;
  }
  BOOL v22 = (char *)__nw_create_backtrace_string();
  __int16 v14 = __nwlog_obj();
  os_log_type_t v15 = type;
  BOOL v23 = os_log_type_enabled(v14, type);
  if (!v22)
  {
    if (!v23) {
      goto LABEL_51;
    }
    os_log_type_t v28 = *(const char **)(a1 + 16);
    if (!v28) {
      os_log_type_t v28 = "invalid";
    }
    *(_DWORD *)tcp_info buf = 136446722;
    os_log_type_t v32 = "__nw_protocol_supports_external_data";
    __int16 v33 = 2082;
    os_log_type_t v34 = (void *)v28;
    __int16 v35 = 2048;
    uint64_t v36 = a1;
    uint64_t v17 = "%{public}s protocol %{public}s (%p) has invalid supports_external_data callback, no backtrace";
    goto LABEL_50;
  }
  if (v23)
  {
    uint64_t v24 = *(const char **)(a1 + 16);
    if (!v24) {
      uint64_t v24 = "invalid";
    }
    *(_DWORD *)tcp_info buf = 136446978;
    os_log_type_t v32 = "__nw_protocol_supports_external_data";
    __int16 v33 = 2082;
    os_log_type_t v34 = (void *)v24;
    __int16 v35 = 2048;
    uint64_t v36 = a1;
    __int16 v37 = 2082;
    BOOL v38 = v22;
    _os_log_impl(&dword_1830D4000, v14, v15, "%{public}s protocol %{public}s (%p) has invalid supports_external_data callback, dumping backtrace:%{public}s", buf, 0x2Au);
  }
  free(v22);
LABEL_51:
  if (v13) {
    free(v13);
  }
  uint64_t v6 = 0;
  if (v2 == &nw_protocol_ref_counted_handle)
  {
LABEL_8:
    if (*(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
    {
      uint64_t v8 = *(void *)(a1 + 88);
      if (v8)
      {
        uint64_t v9 = v8 - 1;
        *(void *)(a1 + 88) = v9;
        if (!v9)
        {
          char v10 = *(void (***)(void))(a1 + 64);
          if (v10)
          {
            *(void *)(a1 + 64) = 0;
            v10[2](v10);
            _Block_release(v10);
          }
          if (*(unsigned char *)(a1 + 72))
          {
            char v11 = *(const void **)(a1 + 64);
            if (v11) {
              _Block_release(v11);
            }
          }
          free((void *)a1);
        }
      }
    }
  }
  return v6;
}

uint64_t nw_protocol_default_supports_external_data(nw_protocol *a1)
{
  return 0;
}

uint64_t nw_path_flow_registration_get_partial_checksum_offload(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = (v1[148] >> 1) & 1;
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)tcp_info buf = 136446210;
  uint64_t v16 = "nw_path_flow_registration_get_partial_checksum_offload";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint64_t v16 = "nw_path_flow_registration_get_partial_checksum_offload";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null flow_registration", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          uint64_t v16 = "nw_path_flow_registration_get_partial_checksum_offload";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null flow_registration, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint64_t v16 = "nw_path_flow_registration_get_partial_checksum_offload";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null flow_registration, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint64_t v16 = "nw_path_flow_registration_get_partial_checksum_offload";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null flow_registration, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_interface_supports_tx_start(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = (*(unsigned __int16 *)(v1 + 85) >> 3) & 1;
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)tcp_info buf = 136446210;
  uint64_t v16 = "nw_interface_supports_tx_start";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint64_t v16 = "nw_interface_supports_tx_start";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null interface", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          uint64_t v16 = "nw_interface_supports_tx_start";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null interface, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint64_t v16 = "nw_interface_supports_tx_start";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null interface, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint64_t v16 = "nw_interface_supports_tx_start";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null interface, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_interface_supports_carrier_aggregation(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = (*(unsigned __int16 *)(v1 + 85) >> 5) & 1;
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)tcp_info buf = 136446210;
  uint64_t v16 = "nw_interface_supports_carrier_aggregation";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint64_t v16 = "nw_interface_supports_carrier_aggregation";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null interface", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          uint64_t v16 = "nw_interface_supports_carrier_aggregation";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null interface, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint64_t v16 = "nw_interface_supports_carrier_aggregation";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null interface, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint64_t v16 = "nw_interface_supports_carrier_aggregation";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null interface, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_interface_supports_ack_priority(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = (*(unsigned __int16 *)(v1 + 85) >> 4) & 1;
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)tcp_info buf = 136446210;
  uint64_t v16 = "nw_interface_supports_ack_priority";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint64_t v16 = "nw_interface_supports_ack_priority";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null interface", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          uint64_t v16 = "nw_interface_supports_ack_priority";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null interface, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint64_t v16 = "nw_interface_supports_ack_priority";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null interface, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint64_t v16 = "nw_interface_supports_ack_priority";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null interface, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

NWConcrete_nw_protocol_options *nw_quic_create_stream_options()
{
  if (nw_protocol_copy_quic_stream_definition::onceToken != -1) {
    dispatch_once(&nw_protocol_copy_quic_stream_definition::onceToken, &__block_literal_global_15_56153);
  }
  uint64_t v0 = (void *)nw_protocol_copy_quic_stream_definition::quic_definition;

  return nw_protocol_create_options(v0);
}

id nw_path_copy_delegate_interface(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    id v3 = v1[13];
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)tcp_info buf = 136446210;
  uint64_t v16 = "nw_path_copy_delegate_interface";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint64_t v16 = "nw_path_copy_delegate_interface";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null path", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          uint64_t v16 = "nw_path_copy_delegate_interface";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint64_t v16 = "nw_path_copy_delegate_interface";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint64_t v16 = "nw_path_copy_delegate_interface";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  id v3 = 0;
LABEL_3:

  return v3;
}

void ___ZL41nw_resolver_create_dns_getaddrinfo_lockedP22NWConcrete_nw_resolverP30NWConcrete_nw_resolver_service_block_invoke_2_203(uint64_t a1, id *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v315 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if (!WeakRetained) {
    goto LABEL_456;
  }
  id v265 = WeakRetained;
  uint64_t v5 = *(void *)(v3 + 32);
  uint64_t v276 = v3;
  if (!v5)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v6 = (id)gLogObj;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)&buf[0].size_t sa_len = 136446466;
      *(void *)&buf[0].sa_data[2] = "nw_resolver_create_dns_getaddrinfo_locked_block_invoke_2";
      *(_WORD *)&buf[0].sa_data[10] = 2048;
      *(void *)&buf[0].sa_data[12] = a3;
      os_log_type_t v8 = "%{public}s Got %zu DNS results";
      uint64_t v9 = v6;
      uint32_t v10 = 22;
LABEL_13:
      _os_log_impl(&dword_1830D4000, v9, OS_LOG_TYPE_INFO, v8, &buf[0].sa_len, v10);
    }
LABEL_14:

    goto LABEL_15;
  }
  if ((*(unsigned char *)(v5 + 346) & 0x20) == 0)
  {
    if (*(unsigned char *)(v5 + 256))
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      uint64_t v6 = (id)gconnectionLogObj;
      if (!os_log_type_enabled(v6, OS_LOG_TYPE_INFO)) {
        goto LABEL_14;
      }
      uint64_t v7 = *(void *)(v3 + 32) + 256;
      *(_DWORD *)&buf[0].size_t sa_len = 136446722;
      *(void *)&buf[0].sa_data[2] = "nw_resolver_create_dns_getaddrinfo_locked_block_invoke";
      *(_WORD *)&buf[0].sa_data[10] = 2082;
      *(void *)&buf[0].sa_data[12] = v7;
      *(_WORD *)&buf[1].sa_data[4] = 2048;
      *(void *)&buf[1].sa_data[6] = a3;
      os_log_type_t v8 = "%{public}s [C%{public}s] Got %zu DNS results";
      uint64_t v9 = v6;
      uint32_t v10 = 32;
      goto LABEL_13;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v6 = (id)gLogObj;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      int v11 = *(_DWORD *)(*(void *)(v3 + 32) + 340);
      *(_DWORD *)&buf[0].size_t sa_len = 136446722;
      *(void *)&buf[0].sa_data[2] = "nw_resolver_create_dns_getaddrinfo_locked_block_invoke";
      *(_WORD *)&buf[0].sa_data[10] = 1024;
      *(_DWORD *)&buf[0].sa_data[12] = v11;
      *(_WORD *)buf[1].sa_data = 2048;
      *(void *)&buf[1].sa_data[2] = a3;
      os_log_type_t v8 = "%{public}s [R%u] Got %zu DNS results";
      uint64_t v9 = v6;
      uint32_t v10 = 28;
      goto LABEL_13;
    }
    goto LABEL_14;
  }
LABEL_15:
  uint64_t v12 = a3;
  if (!a3)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(v3 + 32) + 12));
    goto LABEL_455;
  }
  char v13 = a2;
  do
  {
    id v14 = *v13;
    nw_endpoint_t address = (unsigned __int8 *)dnssd_getaddrinfo_result_get_address();
    uint64_t tracker_hostname = dnssd_getaddrinfo_result_get_tracker_hostname();
    if (nw_parameters_get_sensitive_redacted(*(void **)(*(void *)(v276 + 32) + 16)))
    {
      v301[8] = 0;
      *(void *)uint64_t v301 = 0;
      if (address)
      {
        int v17 = address[1];
        if (v17 == 30)
        {
          if (*((_DWORD *)address + 2)
            || *((_DWORD *)address + 3)
            || *((_DWORD *)address + 4)
            || *((_DWORD *)address + 5))
          {
            os_log_type_t v20 = v301;
            __nwlog_salted_hash(address + 8, 16, v301);
            os_log_type_t v21 = "IPv6#";
          }
          else
          {
            os_log_type_t v21 = "";
            os_log_type_t v20 = "IN6ADDR_ANY";
          }
LABEL_50:
          uint64_t v44 = *(void *)(v276 + 32);
          if (v44)
          {
            if ((*(unsigned char *)(v44 + 346) & 0x20) != 0) {
              goto LABEL_95;
            }
            if (*(unsigned char *)(v44 + 256))
            {
              if (__nwlog_connection_log::onceToken != -1) {
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
              }
              os_log_type_t v45 = (id)gconnectionLogObj;
              if (!os_log_type_enabled(v45, OS_LOG_TYPE_INFO)) {
                goto LABEL_74;
              }
              os_log_type_t v270 = v20;
              uint64_t v46 = *(void *)(v276 + 32);
              unsigned int v47 = dnssd_getaddrinfo_result_get_type() - 1;
              BOOL v48 = "?";
              if (v47 <= 4) {
                BOOL v48 = off_1E523B600[v47];
              }
              int interface_index = dnssd_getaddrinfo_result_get_interface_index();
              uint64_t hostname = dnssd_getaddrinfo_result_get_hostname();
              actual_uint64_t hostname = dnssd_getaddrinfo_result_get_actual_hostname();
              *(_DWORD *)&buf[0].size_t sa_len = 136448259;
              BOOL v52 = "";
              if (tracker_hostname) {
                BOOL v52 = " tracker";
              }
              *(void *)&buf[0].sa_data[2] = "nw_resolver_create_dns_getaddrinfo_locked_block_invoke";
              *(_WORD *)&buf[0].sa_data[10] = 2082;
              *(void *)&buf[0].sa_data[12] = v46 + 256;
              *(_WORD *)&buf[1].sa_data[4] = 2080;
              *(void *)&buf[1].sa_data[6] = v48;
              *(_WORD *)&buf[2].size_t sa_len = 1024;
              *(_DWORD *)buf[2].sa_data = interface_index;
              *(_WORD *)&buf[2].sa_data[4] = 2085;
              *(void *)&buf[2].sa_data[6] = hostname;
              *(_WORD *)&buf[3].size_t sa_len = 2085;
              *(void *)buf[3].sa_data = actual_hostname;
              *(_WORD *)&buf[3].sa_data[8] = 2082;
              *(void *)&buf[3].sa_data[10] = v21;
              *(_WORD *)&buf[4].sa_data[2] = 2082;
              *(void *)&buf[4].sa_data[4] = v270;
              *(_WORD *)&buf[4].sa_data[12] = 2082;
              *(void *)&buf[5].size_t sa_len = v52;
              uint64_t v53 = v45;
              os_log_type_t v54 = "%{public}s [C%{public}s] Got DNS result type %s ifindex=%u %{sensitive}s %{sensitive}s %{public}s%{p"
                    "ublic}s%{public}s";
              uint32_t v55 = 88;
              goto LABEL_73;
            }
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            os_log_type_t v45 = (id)gLogObj;
            if (os_log_type_enabled(v45, OS_LOG_TYPE_INFO))
            {
              os_log_type_t v271 = v20;
              int v62 = *(_DWORD *)(*(void *)(v276 + 32) + 340);
              unsigned int v63 = dnssd_getaddrinfo_result_get_type() - 1;
              os_log_type_t v64 = "?";
              if (v63 <= 4) {
                os_log_type_t v64 = off_1E523B600[v63];
              }
              int v65 = dnssd_getaddrinfo_result_get_interface_index();
              uint64_t v66 = dnssd_getaddrinfo_result_get_hostname();
              uint64_t v67 = dnssd_getaddrinfo_result_get_actual_hostname();
              *(_DWORD *)&buf[0].size_t sa_len = 136448259;
              os_log_type_t v68 = "";
              if (tracker_hostname) {
                os_log_type_t v68 = " tracker";
              }
              *(void *)&buf[0].sa_data[2] = "nw_resolver_create_dns_getaddrinfo_locked_block_invoke";
              *(_WORD *)&buf[0].sa_data[10] = 1024;
              *(_DWORD *)&buf[0].sa_data[12] = v62;
              *(_WORD *)buf[1].sa_data = 2080;
              *(void *)&buf[1].sa_data[2] = v64;
              *(_WORD *)&buf[1].sa_data[10] = 1024;
              *(_DWORD *)&buf[1].sa_data[12] = v65;
              *(_WORD *)buf[2].sa_data = 2085;
              *(void *)&buf[2].sa_data[2] = v66;
              *(_WORD *)&buf[2].sa_data[10] = 2085;
              *(void *)&buf[2].sa_data[12] = v67;
              *(_WORD *)&buf[3].sa_data[4] = 2082;
              *(void *)&buf[3].sa_data[6] = v21;
              *(_WORD *)&buf[4].size_t sa_len = 2082;
              *(void *)buf[4].sa_data = v271;
              *(_WORD *)&buf[4].sa_data[8] = 2082;
              *(void *)&buf[4].sa_data[10] = v68;
              uint64_t v53 = v45;
              os_log_type_t v54 = "%{public}s [R%u] Got DNS result type %s ifindex=%u %{sensitive}s %{sensitive}s %{public}s%{public}s%{public}s";
              uint32_t v55 = 84;
LABEL_73:
              _os_log_impl(&dword_1830D4000, v53, OS_LOG_TYPE_INFO, v54, &buf[0].sa_len, v55);
            }
          }
          else
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            os_log_type_t v45 = (id)gLogObj;
            if (os_log_type_enabled(v45, OS_LOG_TYPE_INFO))
            {
              unsigned int v56 = dnssd_getaddrinfo_result_get_type() - 1;
              os_log_type_t v57 = "?";
              if (v56 <= 4) {
                os_log_type_t v57 = off_1E523B600[v56];
              }
              int v58 = dnssd_getaddrinfo_result_get_interface_index();
              uint64_t v59 = dnssd_getaddrinfo_result_get_hostname();
              uint64_t v60 = dnssd_getaddrinfo_result_get_actual_hostname();
              *(_DWORD *)&buf[0].size_t sa_len = 136448003;
              uint64_t v61 = "";
              if (tracker_hostname) {
                uint64_t v61 = " tracker";
              }
              *(void *)&buf[0].sa_data[2] = "nw_resolver_create_dns_getaddrinfo_locked_block_invoke";
              *(_WORD *)&buf[0].sa_data[10] = 2080;
              *(void *)&buf[0].sa_data[12] = v57;
              *(_WORD *)&buf[1].sa_data[4] = 1024;
              *(_DWORD *)&buf[1].sa_data[6] = v58;
              *(_WORD *)&buf[1].sa_data[10] = 2085;
              *(void *)&buf[1].sa_data[12] = v59;
              *(_WORD *)&buf[2].sa_data[4] = 2085;
              *(void *)&buf[2].sa_data[6] = v60;
              *(_WORD *)&buf[3].size_t sa_len = 2082;
              *(void *)buf[3].sa_data = v21;
              *(_WORD *)&buf[3].sa_data[8] = 2082;
              *(void *)&buf[3].sa_data[10] = v20;
              *(_WORD *)&buf[4].sa_data[2] = 2082;
              *(void *)&buf[4].sa_data[4] = v61;
              uint64_t v53 = v45;
              os_log_type_t v54 = "%{public}s Got DNS result type %s ifindex=%u %{sensitive}s %{sensitive}s %{public}s%{public}s%{public}s";
              uint32_t v55 = 78;
              goto LABEL_73;
            }
          }
LABEL_74:

          goto LABEL_95;
        }
        if (v17 == 2)
        {
          int v19 = *((_DWORD *)address + 1);
          os_log_type_t v18 = address + 4;
          if (v19)
          {
            os_log_type_t v20 = v301;
            __nwlog_salted_hash(v18, 4, v301);
            os_log_type_t v21 = "IPv4#";
          }
          else
          {
            os_log_type_t v21 = "";
            os_log_type_t v20 = "INADDR_ANY";
          }
          goto LABEL_50;
        }
      }
      os_log_type_t v21 = "";
      os_log_type_t v20 = "<NULL>";
      goto LABEL_50;
    }
    uint64_t v22 = *(void *)(v276 + 32);
    if (v22)
    {
      if ((*(unsigned char *)(v22 + 346) & 0x20) != 0) {
        goto LABEL_95;
      }
      if (*(unsigned char *)(v22 + 256))
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        BOOL v23 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
        {
          uint64_t v24 = *(void *)(v276 + 32);
          unsigned int v25 = dnssd_getaddrinfo_result_get_type() - 1;
          BOOL v26 = "?";
          if (v25 <= 4) {
            BOOL v26 = off_1E523B600[v25];
          }
          int v27 = dnssd_getaddrinfo_result_get_interface_index();
          uint64_t v28 = dnssd_getaddrinfo_result_get_hostname();
          uint64_t v29 = dnssd_getaddrinfo_result_get_actual_hostname();
          if (address) {
            int v30 = *address;
          }
          else {
            int v30 = 0;
          }
          *(_DWORD *)&buf[0].size_t sa_len = 136448514;
          os_log_type_t v69 = " tracker=";
          if (!tracker_hostname) {
            os_log_type_t v69 = "";
          }
          *(void *)&buf[0].sa_data[2] = "nw_resolver_create_dns_getaddrinfo_locked_block_invoke";
          if (tracker_hostname) {
            id v70 = (const char *)tracker_hostname;
          }
          else {
            id v70 = "";
          }
          *(_WORD *)&buf[0].sa_data[10] = 2082;
          *(void *)&buf[0].sa_data[12] = v24 + 256;
          *(_WORD *)&buf[1].sa_data[4] = 2080;
          *(void *)&buf[1].sa_data[6] = v26;
          *(_WORD *)&buf[2].size_t sa_len = 1024;
          *(_DWORD *)buf[2].sa_data = v27;
          *(_WORD *)&buf[2].sa_data[4] = 2082;
          *(void *)&buf[2].sa_data[6] = v28;
          *(_WORD *)&buf[3].size_t sa_len = 2082;
          *(void *)buf[3].sa_data = v29;
          *(_WORD *)&buf[3].sa_data[8] = 1040;
          *(_DWORD *)&buf[3].sa_data[10] = v30;
          *(_WORD *)&buf[4].size_t sa_len = 2098;
          *(void *)buf[4].sa_data = address;
          *(_WORD *)&buf[4].sa_data[8] = 2082;
          *(void *)&buf[4].sa_data[10] = v69;
          *(_WORD *)&buf[5].sa_data[2] = 2082;
          *(void *)&buf[5].sa_data[4] = v70;
          _os_log_impl(&dword_1830D4000, v23, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s] Got DNS result type %s ifindex=%u %{public}s %{public}s %{public,network:sockaddr}.*P%{public}s%{public}s", &buf[0].sa_len, 0x5Eu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v23 = (id)gLogObj;
        if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
        {
          int v37 = *(_DWORD *)(*(void *)(v276 + 32) + 340);
          unsigned int v38 = dnssd_getaddrinfo_result_get_type() - 1;
          uint64_t v39 = "?";
          if (v38 <= 4) {
            uint64_t v39 = off_1E523B600[v38];
          }
          int v40 = dnssd_getaddrinfo_result_get_interface_index();
          uint64_t v41 = dnssd_getaddrinfo_result_get_hostname();
          uint64_t v42 = dnssd_getaddrinfo_result_get_actual_hostname();
          if (address) {
            int v43 = *address;
          }
          else {
            int v43 = 0;
          }
          *(_DWORD *)&buf[0].size_t sa_len = 136448514;
          id v73 = "";
          uint64_t v74 = " tracker=";
          if (tracker_hostname) {
            id v73 = (const char *)tracker_hostname;
          }
          else {
            uint64_t v74 = "";
          }
          *(void *)&buf[0].sa_data[2] = "nw_resolver_create_dns_getaddrinfo_locked_block_invoke";
          *(_WORD *)&buf[0].sa_data[10] = 1024;
          *(_DWORD *)&buf[0].sa_data[12] = v37;
          *(_WORD *)buf[1].sa_data = 2080;
          *(void *)&buf[1].sa_data[2] = v39;
          *(_WORD *)&buf[1].sa_data[10] = 1024;
          *(_DWORD *)&buf[1].sa_data[12] = v40;
          *(_WORD *)buf[2].sa_data = 2082;
          *(void *)&buf[2].sa_data[2] = v41;
          *(_WORD *)&buf[2].sa_data[10] = 2082;
          *(void *)&buf[2].sa_data[12] = v42;
          *(_WORD *)&buf[3].sa_data[4] = 1040;
          *(_DWORD *)&buf[3].sa_data[6] = v43;
          *(_WORD *)&buf[3].sa_data[10] = 2098;
          *(void *)&buf[3].sa_data[12] = address;
          *(_WORD *)&buf[4].sa_data[4] = 2082;
          *(void *)&buf[4].sa_data[6] = v74;
          *(_WORD *)&buf[5].size_t sa_len = 2082;
          *(void *)buf[5].sa_data = v73;
          _os_log_impl(&dword_1830D4000, v23, OS_LOG_TYPE_INFO, "%{public}s [R%u] Got DNS result type %s ifindex=%u %{public}s %{public}s %{public,network:sockaddr}.*P%{public}s%{public}s", &buf[0].sa_len, 0x5Au);
        }
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v23 = (id)gLogObj;
      if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
      {
        unsigned int v31 = dnssd_getaddrinfo_result_get_type() - 1;
        os_log_type_t v32 = "?";
        if (v31 <= 4) {
          os_log_type_t v32 = off_1E523B600[v31];
        }
        int v33 = dnssd_getaddrinfo_result_get_interface_index();
        uint64_t v34 = dnssd_getaddrinfo_result_get_hostname();
        uint64_t v35 = dnssd_getaddrinfo_result_get_actual_hostname();
        if (address) {
          int v36 = *address;
        }
        else {
          int v36 = 0;
        }
        *(_DWORD *)&buf[0].size_t sa_len = 136448258;
        os_log_type_t v71 = "";
        uint64_t v72 = " tracker=";
        if (tracker_hostname) {
          os_log_type_t v71 = (const char *)tracker_hostname;
        }
        else {
          uint64_t v72 = "";
        }
        *(void *)&buf[0].sa_data[2] = "nw_resolver_create_dns_getaddrinfo_locked_block_invoke";
        *(_WORD *)&buf[0].sa_data[10] = 2080;
        *(void *)&buf[0].sa_data[12] = v32;
        *(_WORD *)&buf[1].sa_data[4] = 1024;
        *(_DWORD *)&buf[1].sa_data[6] = v33;
        *(_WORD *)&buf[1].sa_data[10] = 2082;
        *(void *)&buf[1].sa_data[12] = v34;
        *(_WORD *)&buf[2].sa_data[4] = 2082;
        *(void *)&buf[2].sa_data[6] = v35;
        *(_WORD *)&buf[3].size_t sa_len = 1040;
        *(_DWORD *)buf[3].sa_data = v36;
        *(_WORD *)&buf[3].sa_data[4] = 2098;
        *(void *)&buf[3].sa_data[6] = address;
        *(_WORD *)&buf[4].size_t sa_len = 2082;
        *(void *)buf[4].sa_data = v72;
        *(_WORD *)&buf[4].sa_data[8] = 2082;
        *(void *)&buf[4].sa_data[10] = v71;
        _os_log_impl(&dword_1830D4000, v23, OS_LOG_TYPE_INFO, "%{public}s Got DNS result type %s ifindex=%u %{public}s %{public}s %{public,network:sockaddr}.*P%{public}s%{public}s", &buf[0].sa_len, 0x54u);
      }
    }

LABEL_95:
    ++v13;
    --v12;
  }
  while (v12);
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(v276 + 32) + 12));
  char v266 = 0;
  os_log_type_t v75 = a2;
  do
  {
    int v274 = v75;
    id v76 = *v75;
    int protocol = dnssd_getaddrinfo_result_get_protocol();
    int v78 = protocol;
    if ((protocol - 1) < 4) {
      *(_DWORD *)(*(void *)(v276 + 32) + 248) = protocol;
    }
    provider_name = (const char *)dnssd_getaddrinfo_result_get_provider_name();
    uint64_t v80 = *(void *)(v276 + 32);
    if ((*(unsigned char *)(v80 + 347) & 0x40) != 0)
    {
      __int16 v81 = *(void **)(v80 + 200);
      v285[0] = MEMORY[0x1E4F143A8];
      v285[1] = 3221225472;
      v285[2] = ___ZL41nw_resolver_create_dns_getaddrinfo_lockedP22NWConcrete_nw_resolverP30NWConcrete_nw_resolver_service_block_invoke_210;
      v285[3] = &unk_1E523B1F8;
      id v286 = (id)v80;
      id v287 = provider_name;
      nw_path_enumerate_resolver_configs(v81, v285);
    }
    if (provider_name)
    {
      if (!strcmp(provider_name, "dns.google")) {
        *(_DWORD *)(*(void *)(v276 + 32) + 252) = 2;
      }
      if (!strcmp(provider_name, "cloudflare-dns.com")) {
        *(_DWORD *)(*(void *)(v276 + 32) + 252) = 1;
      }
      if (!strcmp(provider_name, "dns.quad9.net")) {
        *(_DWORD *)(*(void *)(v276 + 32) + 252) = 3;
      }
    }
    int v82 = dnssd_getaddrinfo_result_get_type();
    if (v82 == 5)
    {
      uint64_t v83 = *(void **)(v276 + 40);
      nw_endpoint_t v272 = (char *)*(id *)(v276 + 32);
      os_log_type_t v268 = v83;
      id v269 = v76;
      if ((dnssd_getaddrinfo_result_service_is_valid() & 1) == 0) {
        goto LABEL_309;
      }
      service_name = (const char *)dnssd_getaddrinfo_result_get_service_name();
      if (!service_name)
      {
        if (v272)
        {
          if ((v272[346] & 0x20) != 0) {
            goto LABEL_309;
          }
          if (v272[256])
          {
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
            }
            os_log_type_t v115 = (id)gconnectionLogObj;
            if (os_log_type_enabled(v115, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)uint64_t v301 = 136446466;
              *(void *)&v301[4] = "nw_resolver_process_service_result";
              *(_WORD *)&v301[12] = 2082;
              *(void *)&v301[14] = v272 + 256;
              _os_log_impl(&dword_1830D4000, v115, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s] Service result did not contain name, ignoring", v301, 0x16u);
            }
          }
          else
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            os_log_type_t v115 = (id)gLogObj;
            if (os_log_type_enabled(v115, OS_LOG_TYPE_ERROR))
            {
              int v166 = *((_DWORD *)v272 + 85);
              *(_DWORD *)uint64_t v301 = 136446466;
              *(void *)&v301[4] = "nw_resolver_process_service_result";
              *(_WORD *)&v301[12] = 1024;
              *(_DWORD *)&v301[14] = v166;
              _os_log_impl(&dword_1830D4000, v115, OS_LOG_TYPE_ERROR, "%{public}s [R%u] Service result did not contain name, ignoring", v301, 0x12u);
            }
          }
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v115 = (id)gLogObj;
          if (os_log_type_enabled(v115, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)uint64_t v301 = 136446210;
            *(void *)&v301[4] = "nw_resolver_process_service_result";
            _os_log_impl(&dword_1830D4000, v115, OS_LOG_TYPE_ERROR, "%{public}s Service result did not contain name, ignoring", v301, 0xCu);
          }
        }

LABEL_309:
        if (!nw_resolver_check_svcb_complete(*(NWConcrete_nw_resolver **)(v276 + 32))) {
          goto LABEL_325;
        }
        uint64_t v208 = *(void *)(v276 + 32);
        if (v208)
        {
          if ((*(unsigned char *)(v208 + 346) & 0x20) != 0)
          {
LABEL_324:
            char v266 = 1;
            goto LABEL_325;
          }
          if (*(unsigned char *)(v208 + 256))
          {
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
            }
            id v209 = (id)gconnectionLogObj;
            if (os_log_type_enabled(v209, OS_LOG_TYPE_INFO))
            {
              uint64_t v210 = *(void *)(v276 + 32) + 256;
              *(_DWORD *)&buf[0].size_t sa_len = 136446466;
              *(void *)&buf[0].sa_data[2] = "nw_resolver_create_dns_getaddrinfo_locked_block_invoke";
              *(_WORD *)&buf[0].sa_data[10] = 2082;
              *(void *)&buf[0].sa_data[12] = v210;
              _os_log_impl(&dword_1830D4000, v209, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s] SVCB queries are complete", &buf[0].sa_len, 0x16u);
            }
          }
          else
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            id v209 = (id)gLogObj;
            if (os_log_type_enabled(v209, OS_LOG_TYPE_INFO))
            {
              int v211 = *(_DWORD *)(*(void *)(v276 + 32) + 340);
              *(_DWORD *)&buf[0].size_t sa_len = 136446466;
              *(void *)&buf[0].sa_data[2] = "nw_resolver_create_dns_getaddrinfo_locked_block_invoke";
              *(_WORD *)&buf[0].sa_data[10] = 1024;
              *(_DWORD *)&buf[0].sa_data[12] = v211;
              _os_log_impl(&dword_1830D4000, v209, OS_LOG_TYPE_INFO, "%{public}s [R%u] SVCB queries are complete", &buf[0].sa_len, 0x12u);
            }
          }
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          id v209 = (id)gLogObj;
          if (os_log_type_enabled(v209, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)&buf[0].size_t sa_len = 136446210;
            *(void *)&buf[0].sa_data[2] = "nw_resolver_create_dns_getaddrinfo_locked_block_invoke";
            _os_log_impl(&dword_1830D4000, v209, OS_LOG_TYPE_INFO, "%{public}s SVCB queries are complete", &buf[0].sa_len, 0xCu);
          }
        }

        goto LABEL_324;
      }
      v272[347] |= 4u;
      size_t v294 = 0;
      ech_config = (const void *)dnssd_getaddrinfo_result_get_ech_config();
      os_log_type_t v86 = (void *)*((void *)v272 + 3);
      unsigned __int16 service_priority = dnssd_getaddrinfo_result_get_service_priority();
      service_int port = dnssd_getaddrinfo_result_get_service_port();
      size_t v89 = v294;
      BOOL sensitive_redacted = nw_parameters_get_sensitive_redacted(*((void **)v272 + 2));
      id v91 = v86;
      nw_endpoint_t v92 = [NWConcrete_nw_resolver_service alloc];
      id v93 = v91;
      if (!v92)
      {
LABEL_418:

        os_log_type_t v251 = __nwlog_obj();
        *(_DWORD *)uint64_t v301 = 136446210;
        *(void *)&v301[4] = "nw_resolver_process_service_result";
        nw_endpoint_t v252 = (char *)_os_log_send_and_compose_impl();

        v309[0] = 16;
        v305[0] = 0;
        if (__nwlog_fault(v252, v309, v305))
        {
          if (v309[0] == 17)
          {
            os_log_type_t v253 = __nwlog_obj();
            os_log_type_t v254 = v309[0];
            if (os_log_type_enabled(v253, (os_log_type_t)v309[0]))
            {
              *(_DWORD *)uint64_t v301 = 136446210;
              *(void *)&v301[4] = "nw_resolver_process_service_result";
              _os_log_impl(&dword_1830D4000, v253, v254, "%{public}s called with null service", v301, 0xCu);
            }
          }
          else if (v305[0])
          {
            backtrace_string = (char *)__nw_create_backtrace_string();
            os_log_type_t v253 = __nwlog_obj();
            os_log_type_t v256 = v309[0];
            BOOL v257 = os_log_type_enabled(v253, (os_log_type_t)v309[0]);
            if (backtrace_string)
            {
              if (v257)
              {
                *(_DWORD *)uint64_t v301 = 136446466;
                *(void *)&v301[4] = "nw_resolver_process_service_result";
                *(_WORD *)&v301[12] = 2082;
                *(void *)&v301[14] = backtrace_string;
                _os_log_impl(&dword_1830D4000, v253, v256, "%{public}s called with null service, dumping backtrace:%{public}s", v301, 0x16u);
              }

              free(backtrace_string);
              goto LABEL_434;
            }
            if (v257)
            {
              *(_DWORD *)uint64_t v301 = 136446210;
              *(void *)&v301[4] = "nw_resolver_process_service_result";
              _os_log_impl(&dword_1830D4000, v253, v256, "%{public}s called with null service, no backtrace", v301, 0xCu);
            }
          }
          else
          {
            os_log_type_t v253 = __nwlog_obj();
            os_log_type_t v258 = v309[0];
            if (os_log_type_enabled(v253, (os_log_type_t)v309[0]))
            {
              *(_DWORD *)uint64_t v301 = 136446210;
              *(void *)&v301[4] = "nw_resolver_process_service_result";
              _os_log_impl(&dword_1830D4000, v253, v258, "%{public}s called with null service, backtrace limit exceeded", v301, 0xCu);
            }
          }
        }
LABEL_434:
        if (v252) {
          free(v252);
        }
        int v128 = 0;
        goto LABEL_308;
      }
      *(void *)int v309 = v92;
      *(void *)&v309[8] = NWConcrete_nw_resolver_service;
      nw_endpoint_t object = (unsigned __int16 *)objc_msgSendSuper2((objc_super *)v309, sel_init);
      if (object)
      {
        if (v93)
        {
          id v94 = v93;
          int v95 = [v94 type];

          if (v95 == 2)
          {
            id v96 = v94;
            uint64_t v97 = (const char *)[v96 hostname];

            if (v97)
            {
              object[16] = service_priority;
              char v98 = object[24] & 0xFE | sensitive_redacted;
              *((unsigned char *)object + 48) = v98;
              char v99 = v98 & 0xFD | (2 * (strcmp(v97, service_name) == 0));
              *((unsigned char *)object + 48) = v99;
              if (service_port)
              {
                id v100 = v96;
                unsigned int v101 = [v100 port];

                os_log_type_t v102 = (void **)object;
                *((unsigned char *)object + 48) = object[24] & 0xFB | (4 * (__rev16(v101) == service_port));
              }
              else
              {
                *((unsigned char *)object + 48) = v99 | 4;
                id v116 = v96;
                unsigned int v117 = [v116 port];

                service_int port = __rev16(v117);
                os_log_type_t v102 = (void **)object;
              }
              *((_WORD *)v102 + 17) = service_port;
              os_log_type_t v118 = service_name;
              os_log_type_t v119 = v102;
              BOOL host_with_numeric_port = nw_endpoint_create_host_with_numeric_port(v118, service_port);
              nw_endpoint_t v121 = v119[1];
              *++os_log_type_t v119 = (void *)host_with_numeric_port;

              BOOL v122 = *v119;
              BOOL v123 = object;
              nw_endpoint_set_priority(v122, object[16]);
              if (!sensitive_redacted) {
                nw_endpoint_set_do_not_redact(*((void **)object + 1));
              }
              if ((object[24] & 4) == 0)
              {
                if (object[16])
                {
                  BOOL v124 = nw_endpoint_create_host_with_numeric_port(v97, object[17]);
                  uint64_t v125 = (void *)*((void *)object + 2);
                  *((void *)object + 2) = v124;

                  BOOL v123 = object;
                  nw_endpoint_set_priority(*((void **)object + 2), object[16]);
                  if (!sensitive_redacted) {
                    nw_endpoint_set_do_not_redact(*((void **)object + 2));
                  }
                }
              }
              if (v89 && ech_config && v123[16])
              {
                dispatch_data_t v126 = dispatch_data_create(ech_config, v89, 0, 0);
                uint64_t v127 = (void *)*((void *)v123 + 5);
                *((void *)v123 + 5) = v126;
              }
              if (v268)
              {
                int v128 = (NWConcrete_nw_resolver_service *)object;
                if (v268[16])
                {
                  if ((v272[346] & 0x20) == 0)
                  {
                    if (v272[256])
                    {
                      if (__nwlog_connection_log::onceToken != -1) {
                        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
                      }
                      id v129 = (id)gconnectionLogObj;
                      if (os_log_type_enabled(v129, OS_LOG_TYPE_ERROR))
                      {
                        *(_DWORD *)uint64_t v301 = 136446978;
                        *(void *)&v301[4] = "nw_resolver_process_service_result";
                        *(_WORD *)&v301[12] = 2082;
                        *(void *)&v301[14] = v272 + 256;
                        *(_WORD *)&v301[22] = 2114;
                        *(void *)&v301[24] = object;
                        *(_WORD *)&v301[32] = 2114;
                        *(void *)&v301[34] = v268;
                        _os_log_impl(&dword_1830D4000, v129, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s] Ignoring service %{public}@ with parent %{public}@, should not receive nested services for non-alias services", v301, 0x2Au);
                      }
                    }
                    else
                    {
                      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                      networkd_settings_init();
                      id v129 = (id)gLogObj;
                      if (os_log_type_enabled(v129, OS_LOG_TYPE_ERROR))
                      {
                        int v146 = *((_DWORD *)v272 + 85);
                        *(_DWORD *)uint64_t v301 = 136446978;
                        *(void *)&v301[4] = "nw_resolver_process_service_result";
                        *(_WORD *)&v301[12] = 1024;
                        *(_DWORD *)&v301[14] = v146;
                        *(_WORD *)&v301[18] = 2114;
                        *(void *)&v301[20] = object;
                        *(_WORD *)&v301[28] = 2114;
                        *(void *)&v301[30] = v268;
                        _os_log_impl(&dword_1830D4000, v129, OS_LOG_TYPE_ERROR, "%{public}s [R%u] Ignoring service %{public}@ with parent %{public}@, should not receive nested services for non-alias services", v301, 0x26u);
                      }
                    }
LABEL_307:

                    int v128 = (NWConcrete_nw_resolver_service *)object;
                    goto LABEL_308;
                  }
                  goto LABEL_308;
                }
                if (!object[16])
                {
                  if ((v272[346] & 0x20) == 0)
                  {
                    if (v272[256])
                    {
                      if (__nwlog_connection_log::onceToken != -1) {
                        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
                      }
                      id v129 = (id)gconnectionLogObj;
                      if (os_log_type_enabled(v129, OS_LOG_TYPE_ERROR))
                      {
                        *(_DWORD *)uint64_t v301 = 136446978;
                        *(void *)&v301[4] = "nw_resolver_process_service_result";
                        *(_WORD *)&v301[12] = 2082;
                        *(void *)&v301[14] = v272 + 256;
                        *(_WORD *)&v301[22] = 2114;
                        *(void *)&v301[24] = object;
                        *(_WORD *)&v301[32] = 2114;
                        *(void *)&v301[34] = v268;
                        _os_log_impl(&dword_1830D4000, v129, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s] Ignoring service %{public}@ with parent %{public}@, only one alias will be followed", v301, 0x2Au);
                      }
                    }
                    else
                    {
                      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                      networkd_settings_init();
                      id v129 = (id)gLogObj;
                      if (os_log_type_enabled(v129, OS_LOG_TYPE_ERROR))
                      {
                        int v205 = *((_DWORD *)v272 + 85);
                        *(_DWORD *)uint64_t v301 = 136446978;
                        *(void *)&v301[4] = "nw_resolver_process_service_result";
                        *(_WORD *)&v301[12] = 1024;
                        *(_DWORD *)&v301[14] = v205;
                        *(_WORD *)&v301[18] = 2114;
                        *(void *)&v301[20] = object;
                        *(_WORD *)&v301[28] = 2114;
                        *(void *)&v301[30] = v268;
                        _os_log_impl(&dword_1830D4000, v129, OS_LOG_TYPE_ERROR, "%{public}s [R%u] Ignoring service %{public}@ with parent %{public}@, only one alias will be followed", v301, 0x26u);
                      }
                    }
                    goto LABEL_307;
                  }
LABEL_308:

                  goto LABEL_309;
                }
LABEL_170:
                os_log_type_t v138 = v272;
                uint64_t v139 = *((void *)v272 + 22);
                if (!v139)
                {
                  BOOL v140 = nw_array_create();
                  id v141 = (void *)*((void *)v272 + 22);
                  *((void *)v272 + 22) = v140;

                  uint64_t v139 = *((void *)v272 + 22);
                  os_log_type_t v138 = v272;
                  int v128 = (NWConcrete_nw_resolver_service *)object;
                }
                nw_array_append(v139, v128);
                if ((v138[346] & 0x20) != 0)
                {
LABEL_188:
                  unsigned int v148 = *((unsigned __int8 *)v128 + 48);
                  if ((v148 & 2) == 0) {
                    goto LABEL_195;
                  }
                  int port = v128->port;
                  os_log_type_t v150 = v272;
                  if (port)
                  {
                    int v151 = (v148 >> 2) & 1;
                    BOOL v152 = nw_array_create();
                    unsigned int v153 = (atomic_uchar *)v150[18];
                    *(void *)int v309 = MEMORY[0x1E4F143A8];
                    *(void *)&v309[8] = 3221225472;
                    *(void *)&v309[16] = ___ZL25nw_resolver_apply_serviceP22NWConcrete_nw_resolvertbt_block_invoke;
                    *(void *)&v309[24] = &unk_1E523B4B0;
                    BOOL v314 = (v148 & 4) != 0;
                    __int16 v312 = port;
                    uint64_t v154 = (id)v152;
                    id v310 = v154;
                    __int16 v313 = port;
                    id v311 = v150;
                    nw_array_apply(v153, (uint64_t)v309);
                    if (v154 && v154[3] != v154[2])
                    {
                      *(void *)os_log_type_t type = 0;
                      id v296 = type;
                      uint64_t v297 = 0x2020000000;
                      char v298 = 0;
                      *(void *)unint64_t v305 = 0;
                      *(void *)&v305[8] = v305;
                      *(void *)&v305[16] = 0x3032000000;
                      __int16 v306 = __Block_byref_object_copy__5653;
                      long long v307 = __Block_byref_object_dispose__5654;
                      BOOL v308 = nw_array_create();
                      id v155 = (atomic_uchar *)v150[18];
                      *(void *)uint64_t v301 = MEMORY[0x1E4F143A8];
                      *(void *)&v301[8] = 3221225472;
                      *(void *)&v301[16] = ___ZL25nw_resolver_apply_serviceP22NWConcrete_nw_resolvertbt_block_invoke_2;
                      *(void *)&v301[24] = &unk_1E523B4D8;
                      __int16 v303 = port;
                      *(void *)&v301[40] = type;
                      __int16 v302 = v305;
                      *(void *)&v301[32] = v154;
                      char v304 = v151;
                      nw_array_apply(v155, (uint64_t)v301);
                      objc_storeStrong(v150 + 18, *(id *)(*(void *)&v305[8] + 40));

                      _Block_object_dispose(v305, 8);
                      _Block_object_dispose(type, 8);
                    }

LABEL_194:
                    int v128 = (NWConcrete_nw_resolver_service *)object;
LABEL_195:
                    __int16 v156 = v128->alternative_origin;
                    uint64_t v288 = MEMORY[0x1E4F143A8];
                    uint64_t v289 = 3221225472;
                    id v290 = ___ZL34nw_resolver_process_service_resultP22NWConcrete_nw_resolverP30NWConcrete_nw_resolver_servicePU38objcproto27OS_dnssd_getaddrinfo_result8NSObject_block_invoke;
                    unint64_t v291 = &unk_1E523B460;
                    char v157 = v272;
                    nw_endpoint_t v292 = v157;
                    char v158 = v156;
                    uint64_t v293 = v158;
                    dnssd_getaddrinfo_result_enumerate_alpn_values();
                    if (v158) {
                      nw_resolver_update_client_alternative(v157, v158, 0);
                    }
                    *(void *)uint64_t v301 = 0;
                    *(void *)&v301[8] = v301;
                    *(void *)&v301[16] = 0x2020000000;
                    v301[24] = 0;
                    *(void *)&buf[0].size_t sa_len = MEMORY[0x1E4F143A8];
                    *(void *)&buf[0].sa_data[6] = 3221225472;
                    *(void *)&buf[1].size_t sa_len = ___ZL34nw_resolver_process_service_resultP22NWConcrete_nw_resolverP30NWConcrete_nw_resolver_servicePU38objcproto27OS_dnssd_getaddrinfo_result8NSObject_block_invoke_225;
                    *(void *)&buf[1].sa_data[6] = &unk_1E523B488;
                    os_log_type_t v159 = v128;
                    *(void *)&buf[2].size_t sa_len = v159;
                    os_log_type_t v160 = v157;
                    *(void *)&buf[2].sa_data[6] = v160;
                    *(void *)&buf[3].size_t sa_len = v269;
                    *(void *)&buf[3].sa_data[6] = v301;
                    dnssd_getaddrinfo_result_enumerate_service_address_hints();
                    uint64_t doh_uri = dnssd_getaddrinfo_result_get_doh_uri();
                    if (!doh_uri)
                    {
LABEL_214:
                      if (*(unsigned char *)(*(void *)&v301[8] + 24) || (*((unsigned char *)v128 + 48) & 2) != 0) {
                        goto LABEL_304;
                      }
                      if ((v272[346] & 0x20) != 0)
                      {
LABEL_303:
                        nw_resolver_create_dns_getaddrinfo_locked(v160, v159);
LABEL_304:

                        _Block_object_dispose(v301, 8);
                        int v128 = v159;
                        goto LABEL_308;
                      }
                      if (*((unsigned char *)v160 + 256))
                      {
                        if (__nwlog_connection_log::onceToken != -1) {
                          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
                        }
                        os_log_type_t v168 = (id)gconnectionLogObj;
                        if (!os_log_type_enabled(v168, OS_LOG_TYPE_INFO)) {
                          goto LABEL_302;
                        }
                        *(_DWORD *)int v309 = 136446722;
                        *(void *)&v309[4] = "nw_resolver_process_service_result";
                        *(_WORD *)&v309[12] = 2082;
                        *(void *)&v309[14] = (char *)v160 + 256;
                        *(_WORD *)&v309[22] = 2114;
                        *(void *)&v309[24] = v159;
                        os_log_type_t v169 = v168;
                        os_log_type_t v170 = "%{public}s [C%{public}s] Starting new gai query for %{public}@";
                        uint32_t v171 = 32;
                      }
                      else
                      {
                        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                        networkd_settings_init();
                        os_log_type_t v168 = (id)gLogObj;
                        if (!os_log_type_enabled(v168, OS_LOG_TYPE_INFO))
                        {
LABEL_302:

                          goto LABEL_303;
                        }
                        int v206 = *((_DWORD *)v160 + 85);
                        *(_DWORD *)int v309 = 136446722;
                        *(void *)&v309[4] = "nw_resolver_process_service_result";
                        *(_WORD *)&v309[12] = 1024;
                        *(_DWORD *)&v309[14] = v206;
                        *(_WORD *)&v309[18] = 2114;
                        *(void *)&v309[20] = v159;
                        os_log_type_t v169 = v168;
                        os_log_type_t v170 = "%{public}s [R%u] Starting new gai query for %{public}@";
                        uint32_t v171 = 28;
                      }
                      _os_log_impl(&dword_1830D4000, v169, OS_LOG_TYPE_INFO, v170, v309, v171);
                      goto LABEL_302;
                    }
                    if ((v272[346] & 0x20) != 0)
                    {
LABEL_213:
                      v272[347] |= 8u;
                      goto LABEL_214;
                    }
                    if (*((unsigned char *)v160 + 256))
                    {
                      if (__nwlog_connection_log::onceToken != -1) {
                        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
                      }
                      id v162 = (id)gconnectionLogObj;
                      if (!os_log_type_enabled(v162, OS_LOG_TYPE_INFO)) {
                        goto LABEL_212;
                      }
                      *(_DWORD *)int v309 = 136446723;
                      *(void *)&v309[4] = "nw_resolver_process_service_result";
                      *(_WORD *)&v309[12] = 2082;
                      *(void *)&v309[14] = (char *)v160 + 256;
                      *(_WORD *)&v309[22] = 2085;
                      *(void *)&v309[24] = doh_uri;
                      os_log_type_t v163 = v162;
                      os_log_type_t v164 = "%{public}s [C%{public}s] DoH URI: %{sensitive}s";
                      uint32_t v165 = 32;
                    }
                    else
                    {
                      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                      networkd_settings_init();
                      id v162 = (id)gLogObj;
                      if (!os_log_type_enabled(v162, OS_LOG_TYPE_INFO))
                      {
LABEL_212:

                        int v128 = (NWConcrete_nw_resolver_service *)object;
                        goto LABEL_213;
                      }
                      int v167 = *((_DWORD *)v160 + 85);
                      *(_DWORD *)int v309 = 136446723;
                      *(void *)&v309[4] = "nw_resolver_process_service_result";
                      *(_WORD *)&v309[12] = 1024;
                      *(_DWORD *)&v309[14] = v167;
                      *(_WORD *)&v309[18] = 2085;
                      *(void *)&v309[20] = doh_uri;
                      os_log_type_t v163 = v162;
                      os_log_type_t v164 = "%{public}s [R%u] DoH URI: %{sensitive}s";
                      uint32_t v165 = 28;
                    }
                    _os_log_impl(&dword_1830D4000, v163, OS_LOG_TYPE_INFO, v164, v309, v165);
                    goto LABEL_212;
                  }
                  os_log_type_t v242 = __nwlog_obj();
                  *(_DWORD *)unint64_t v305 = 136446210;
                  *(void *)&v305[4] = "nw_resolver_apply_service";
                  os_log_type_t v243 = (char *)_os_log_send_and_compose_impl();

                  type[0] = OS_LOG_TYPE_ERROR;
                  char v299 = 0;
                  if (__nwlog_fault(v243, type, &v299))
                  {
                    if (type[0] == OS_LOG_TYPE_FAULT)
                    {
                      __int16 v244 = __nwlog_obj();
                      os_log_type_t v245 = type[0];
                      if (os_log_type_enabled(v244, type[0]))
                      {
                        *(_DWORD *)unint64_t v305 = 136446210;
                        *(void *)&v305[4] = "nw_resolver_apply_service";
                        _os_log_impl(&dword_1830D4000, v244, v245, "%{public}s called with null (priority != 0)", v305, 0xCu);
                      }
                    }
                    else if (v299)
                    {
                      os_log_type_t v259 = (char *)__nw_create_backtrace_string();
                      __int16 v244 = __nwlog_obj();
                      os_log_type_t v260 = type[0];
                      BOOL v261 = os_log_type_enabled(v244, type[0]);
                      if (v259)
                      {
                        if (v261)
                        {
                          *(_DWORD *)unint64_t v305 = 136446466;
                          *(void *)&v305[4] = "nw_resolver_apply_service";
                          *(_WORD *)&v305[12] = 2082;
                          *(void *)&v305[14] = v259;
                          _os_log_impl(&dword_1830D4000, v244, v260, "%{public}s called with null (priority != 0), dumping backtrace:%{public}s", v305, 0x16u);
                        }

                        free(v259);
                        goto LABEL_450;
                      }
                      if (v261)
                      {
                        *(_DWORD *)unint64_t v305 = 136446210;
                        *(void *)&v305[4] = "nw_resolver_apply_service";
                        _os_log_impl(&dword_1830D4000, v244, v260, "%{public}s called with null (priority != 0), no backtrace", v305, 0xCu);
                      }
                    }
                    else
                    {
                      __int16 v244 = __nwlog_obj();
                      os_log_type_t v264 = type[0];
                      if (os_log_type_enabled(v244, type[0]))
                      {
                        *(_DWORD *)unint64_t v305 = 136446210;
                        *(void *)&v305[4] = "nw_resolver_apply_service";
                        _os_log_impl(&dword_1830D4000, v244, v264, "%{public}s called with null (priority != 0), backtrace limit exceeded", v305, 0xCu);
                      }
                    }
                  }
LABEL_450:
                  if (v243) {
                    free(v243);
                  }
                  goto LABEL_194;
                }
                if (v272[256])
                {
                  if (__nwlog_connection_log::onceToken != -1) {
                    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
                  }
                  uint64_t v142 = (id)gconnectionLogObj;
                  if (!os_log_type_enabled(v142, OS_LOG_TYPE_INFO)) {
                    goto LABEL_187;
                  }
                  *(_DWORD *)uint64_t v301 = 136446722;
                  *(void *)&v301[4] = "nw_resolver_process_service_result";
                  *(_WORD *)&v301[12] = 2082;
                  *(void *)&v301[14] = v272 + 256;
                  *(_WORD *)&v301[22] = 2114;
                  *(void *)&v301[24] = v128;
                  nw_endpoint_t v143 = v142;
                  BOOL v144 = "%{public}s [C%{public}s] Received %{public}@";
                  uint32_t v145 = 32;
                }
                else
                {
                  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                  networkd_settings_init();
                  uint64_t v142 = (id)gLogObj;
                  if (!os_log_type_enabled(v142, OS_LOG_TYPE_INFO))
                  {
LABEL_187:

                    int v128 = (NWConcrete_nw_resolver_service *)object;
                    goto LABEL_188;
                  }
                  int v147 = *((_DWORD *)v272 + 85);
                  *(_DWORD *)uint64_t v301 = 136446722;
                  *(void *)&v301[4] = "nw_resolver_process_service_result";
                  *(_WORD *)&v301[12] = 1024;
                  *(_DWORD *)&v301[14] = v147;
                  *(_WORD *)&v301[18] = 2114;
                  *(void *)&v301[20] = v128;
                  nw_endpoint_t v143 = v142;
                  BOOL v144 = "%{public}s [R%u] Received %{public}@";
                  uint32_t v145 = 28;
                }
                _os_log_impl(&dword_1830D4000, v143, OS_LOG_TYPE_INFO, v144, v301, v145);
                goto LABEL_187;
              }
              int v128 = (NWConcrete_nw_resolver_service *)object;
              if (object[16]) {
                goto LABEL_170;
              }
              if ((object[24] & 2) != 0)
              {
                if ((v272[346] & 0x20) == 0)
                {
                  if (v272[256])
                  {
                    if (__nwlog_connection_log::onceToken != -1) {
                      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
                    }
                    id v129 = (id)gconnectionLogObj;
                    if (os_log_type_enabled(v129, OS_LOG_TYPE_INFO))
                    {
                      *(_DWORD *)uint64_t v301 = 136446722;
                      *(void *)&v301[4] = "nw_resolver_process_service_result";
                      *(_WORD *)&v301[12] = 2082;
                      *(void *)&v301[14] = v272 + 256;
                      *(_WORD *)&v301[22] = 2114;
                      *(void *)&v301[24] = object;
                      _os_log_impl(&dword_1830D4000, v129, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s] Ignoring service %{public}@, alias must not match origin", v301, 0x20u);
                    }
                  }
                  else
                  {
                    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                    networkd_settings_init();
                    id v129 = (id)gLogObj;
                    if (os_log_type_enabled(v129, OS_LOG_TYPE_INFO))
                    {
                      int v207 = *((_DWORD *)v272 + 85);
                      *(_DWORD *)uint64_t v301 = 136446722;
                      *(void *)&v301[4] = "nw_resolver_process_service_result";
                      *(_WORD *)&v301[12] = 1024;
                      *(_DWORD *)&v301[14] = v207;
                      *(_WORD *)&v301[18] = 2114;
                      *(void *)&v301[20] = object;
                      _os_log_impl(&dword_1830D4000, v129, OS_LOG_TYPE_INFO, "%{public}s [R%u] Ignoring service %{public}@, alias must not match origin", v301, 0x1Cu);
                    }
                  }
                  goto LABEL_307;
                }
                goto LABEL_308;
              }
              int v130 = (NWConcrete_nw_resolver *)v272;
              uint64_t v131 = *((void *)v272 + 22);
              if (!v131)
              {
                BOOL v132 = nw_array_create();
                nw_endpoint_t v133 = (void *)*((void *)v272 + 22);
                *((void *)v272 + 22) = v132;

                uint64_t v131 = *((void *)v272 + 22);
                int v130 = (NWConcrete_nw_resolver *)v272;
                int v128 = (NWConcrete_nw_resolver_service *)object;
              }
              nw_array_append(v131, v128);
              if ((*((unsigned char *)v130 + 346) & 0x20) != 0)
              {
LABEL_331:
                nw_resolver_create_dns_getaddrinfo_locked(v130, v128);
                goto LABEL_308;
              }
              if (*((unsigned char *)v130 + 256))
              {
                if (__nwlog_connection_log::onceToken != -1) {
                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
                }
                id v134 = (id)gconnectionLogObj;
                if (!os_log_type_enabled(v134, OS_LOG_TYPE_INFO)) {
                  goto LABEL_330;
                }
                *(_DWORD *)uint64_t v301 = 136446722;
                *(void *)&v301[4] = "nw_resolver_process_service_result";
                *(_WORD *)&v301[12] = 2082;
                *(void *)&v301[14] = v272 + 256;
                *(_WORD *)&v301[22] = 2114;
                *(void *)&v301[24] = v128;
                nw_endpoint_t v135 = v134;
                os_log_type_t v136 = "%{public}s [C%{public}s] Starting new gai query for %{public}@";
                uint32_t v137 = 32;
              }
              else
              {
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                id v134 = (id)gLogObj;
                if (!os_log_type_enabled(v134, OS_LOG_TYPE_INFO))
                {
LABEL_330:

                  int v130 = (NWConcrete_nw_resolver *)v272;
                  int v128 = (NWConcrete_nw_resolver_service *)object;
                  goto LABEL_331;
                }
                int v212 = *((_DWORD *)v272 + 85);
                *(_DWORD *)uint64_t v301 = 136446722;
                *(void *)&v301[4] = "nw_resolver_process_service_result";
                *(_WORD *)&v301[12] = 1024;
                *(_DWORD *)&v301[14] = v212;
                *(_WORD *)&v301[18] = 2114;
                *(void *)&v301[20] = v128;
                nw_endpoint_t v135 = v134;
                os_log_type_t v136 = "%{public}s [R%u] Starting new gai query for %{public}@";
                uint32_t v137 = 28;
              }
              _os_log_impl(&dword_1830D4000, v135, OS_LOG_TYPE_INFO, v136, v301, v137);
              goto LABEL_330;
            }
            int v226 = __nwlog_obj();
            *(_DWORD *)uint64_t v301 = 136446210;
            *(void *)&v301[4] = "-[NWConcrete_nw_resolver_service initWithOrigin:priority:serviceName:port:echConfig:ec"
                                  "hConfigLength:sensitiveRedacted:]";
            uint64_t v227 = (char *)_os_log_send_and_compose_impl();

            v305[0] = 16;
            type[0] = OS_LOG_TYPE_DEFAULT;
            if ((__nwlog_fault(v227, v305, type) & 1) == 0) {
              goto LABEL_415;
            }
            if (v305[0] == 17)
            {
              uint64_t v228 = __nwlog_obj();
              os_log_type_t v229 = v305[0];
              if (os_log_type_enabled(v228, (os_log_type_t)v305[0]))
              {
                *(_DWORD *)uint64_t v301 = 136446210;
                *(void *)&v301[4] = "-[NWConcrete_nw_resolver_service initWithOrigin:priority:serviceName:port:echConfi"
                                      "g:echConfigLength:sensitiveRedacted:]";
                _os_log_impl(&dword_1830D4000, v228, v229, "%{public}s called with null origin_name", v301, 0xCu);
              }
            }
            else if (type[0])
            {
              v239 = (char *)__nw_create_backtrace_string();
              uint64_t v228 = __nwlog_obj();
              os_log_type_t v240 = v305[0];
              BOOL v241 = os_log_type_enabled(v228, (os_log_type_t)v305[0]);
              if (v239)
              {
                if (v241)
                {
                  *(_DWORD *)uint64_t v301 = 136446466;
                  *(void *)&v301[4] = "-[NWConcrete_nw_resolver_service initWithOrigin:priority:serviceName:port:echCon"
                                        "fig:echConfigLength:sensitiveRedacted:]";
                  *(_WORD *)&v301[12] = 2082;
                  *(void *)&v301[14] = v239;
                  _os_log_impl(&dword_1830D4000, v228, v240, "%{public}s called with null origin_name, dumping backtrace:%{public}s", v301, 0x16u);
                }

                free(v239);
                goto LABEL_415;
              }
              if (v241)
              {
                *(_DWORD *)uint64_t v301 = 136446210;
                *(void *)&v301[4] = "-[NWConcrete_nw_resolver_service initWithOrigin:priority:serviceName:port:echConfi"
                                      "g:echConfigLength:sensitiveRedacted:]";
                _os_log_impl(&dword_1830D4000, v228, v240, "%{public}s called with null origin_name, no backtrace", v301, 0xCu);
              }
            }
            else
            {
              uint64_t v228 = __nwlog_obj();
              os_log_type_t v249 = v305[0];
              if (os_log_type_enabled(v228, (os_log_type_t)v305[0]))
              {
                *(_DWORD *)uint64_t v301 = 136446210;
                *(void *)&v301[4] = "-[NWConcrete_nw_resolver_service initWithOrigin:priority:serviceName:port:echConfi"
                                      "g:echConfigLength:sensitiveRedacted:]";
                _os_log_impl(&dword_1830D4000, v228, v249, "%{public}s called with null origin_name, backtrace limit exceeded", v301, 0xCu);
              }
            }

LABEL_415:
            __int16 v250 = object;
            if (v227) {
              free(v227);
            }
LABEL_417:

            goto LABEL_418;
          }
          BOOL v222 = __nwlog_obj();
          *(_DWORD *)uint64_t v301 = 136446210;
          *(void *)&v301[4] = "-[NWConcrete_nw_resolver_service initWithOrigin:priority:serviceName:port:echConfig:echC"
                                "onfigLength:sensitiveRedacted:]";
          BOOL v223 = (char *)_os_log_send_and_compose_impl();

          v305[0] = 16;
          type[0] = OS_LOG_TYPE_DEFAULT;
          if (__nwlog_fault(v223, v305, type))
          {
            if (v305[0] == 17)
            {
              nw_endpoint_t v224 = __nwlog_obj();
              os_log_type_t v225 = v305[0];
              if (os_log_type_enabled(v224, (os_log_type_t)v305[0]))
              {
                *(_DWORD *)uint64_t v301 = 136446210;
                *(void *)&v301[4] = "-[NWConcrete_nw_resolver_service initWithOrigin:priority:serviceName:port:echConfi"
                                      "g:echConfigLength:sensitiveRedacted:]";
                _os_log_impl(&dword_1830D4000, v224, v225, "%{public}s called with null (nw_endpoint_get_type(_origin) == nw_endpoint_type_host)", v301, 0xCu);
              }
            }
            else if (type[0])
            {
              v236 = (char *)__nw_create_backtrace_string();
              nw_endpoint_t v224 = __nwlog_obj();
              os_log_type_t v237 = v305[0];
              BOOL v238 = os_log_type_enabled(v224, (os_log_type_t)v305[0]);
              if (v236)
              {
                if (v238)
                {
                  *(_DWORD *)uint64_t v301 = 136446466;
                  *(void *)&v301[4] = "-[NWConcrete_nw_resolver_service initWithOrigin:priority:serviceName:port:echCon"
                                        "fig:echConfigLength:sensitiveRedacted:]";
                  *(_WORD *)&v301[12] = 2082;
                  *(void *)&v301[14] = v236;
                  _os_log_impl(&dword_1830D4000, v224, v237, "%{public}s called with null (nw_endpoint_get_type(_origin) == nw_endpoint_type_host), dumping backtrace:%{public}s", v301, 0x16u);
                }

                free(v236);
                goto LABEL_409;
              }
              if (v238)
              {
                *(_DWORD *)uint64_t v301 = 136446210;
                *(void *)&v301[4] = "-[NWConcrete_nw_resolver_service initWithOrigin:priority:serviceName:port:echConfi"
                                      "g:echConfigLength:sensitiveRedacted:]";
                _os_log_impl(&dword_1830D4000, v224, v237, "%{public}s called with null (nw_endpoint_get_type(_origin) == nw_endpoint_type_host), no backtrace", v301, 0xCu);
              }
            }
            else
            {
              nw_endpoint_t v224 = __nwlog_obj();
              os_log_type_t v248 = v305[0];
              if (os_log_type_enabled(v224, (os_log_type_t)v305[0]))
              {
                *(_DWORD *)uint64_t v301 = 136446210;
                *(void *)&v301[4] = "-[NWConcrete_nw_resolver_service initWithOrigin:priority:serviceName:port:echConfi"
                                      "g:echConfigLength:sensitiveRedacted:]";
                _os_log_impl(&dword_1830D4000, v224, v248, "%{public}s called with null (nw_endpoint_get_type(_origin) == nw_endpoint_type_host), backtrace limit exceeded", v301, 0xCu);
              }
            }
          }
LABEL_409:
          __int16 v250 = object;
          if (v223) {
            free(v223);
          }
          goto LABEL_417;
        }
        BOOL v218 = __nwlog_obj();
        *(_DWORD *)uint64_t v301 = 136446210;
        *(void *)&v301[4] = "-[NWConcrete_nw_resolver_service initWithOrigin:priority:serviceName:port:echConfig:echCon"
                              "figLength:sensitiveRedacted:]";
        id v219 = (char *)_os_log_send_and_compose_impl();

        v305[0] = 16;
        type[0] = OS_LOG_TYPE_DEFAULT;
        if (__nwlog_fault(v219, v305, type))
        {
          if (v305[0] == 17)
          {
            unint64_t v220 = __nwlog_obj();
            os_log_type_t v221 = v305[0];
            if (os_log_type_enabled(v220, (os_log_type_t)v305[0]))
            {
              *(_DWORD *)uint64_t v301 = 136446210;
              *(void *)&v301[4] = "-[NWConcrete_nw_resolver_service initWithOrigin:priority:serviceName:port:echConfig:"
                                    "echConfigLength:sensitiveRedacted:]";
              _os_log_impl(&dword_1830D4000, v220, v221, "%{public}s called with null _origin", v301, 0xCu);
            }
          }
          else if (type[0])
          {
            id v233 = (char *)__nw_create_backtrace_string();
            unint64_t v220 = __nwlog_obj();
            os_log_type_t v234 = v305[0];
            BOOL v235 = os_log_type_enabled(v220, (os_log_type_t)v305[0]);
            if (v233)
            {
              if (v235)
              {
                *(_DWORD *)uint64_t v301 = 136446466;
                *(void *)&v301[4] = "-[NWConcrete_nw_resolver_service initWithOrigin:priority:serviceName:port:echConfi"
                                      "g:echConfigLength:sensitiveRedacted:]";
                *(_WORD *)&v301[12] = 2082;
                *(void *)&v301[14] = v233;
                _os_log_impl(&dword_1830D4000, v220, v234, "%{public}s called with null _origin, dumping backtrace:%{public}s", v301, 0x16u);
              }

              free(v233);
              goto LABEL_403;
            }
            if (v235)
            {
              *(_DWORD *)uint64_t v301 = 136446210;
              *(void *)&v301[4] = "-[NWConcrete_nw_resolver_service initWithOrigin:priority:serviceName:port:echConfig:"
                                    "echConfigLength:sensitiveRedacted:]";
              _os_log_impl(&dword_1830D4000, v220, v234, "%{public}s called with null _origin, no backtrace", v301, 0xCu);
            }
          }
          else
          {
            unint64_t v220 = __nwlog_obj();
            os_log_type_t v247 = v305[0];
            if (os_log_type_enabled(v220, (os_log_type_t)v305[0]))
            {
              *(_DWORD *)uint64_t v301 = 136446210;
              *(void *)&v301[4] = "-[NWConcrete_nw_resolver_service initWithOrigin:priority:serviceName:port:echConfig:"
                                    "echConfigLength:sensitiveRedacted:]";
              _os_log_impl(&dword_1830D4000, v220, v247, "%{public}s called with null _origin, backtrace limit exceeded", v301, 0xCu);
            }
          }
        }
LABEL_403:
        __int16 v250 = object;
        if (v219) {
          free(v219);
        }
        goto LABEL_417;
      }
      int v214 = __nwlog_obj();
      *(_DWORD *)uint64_t v301 = 136446210;
      *(void *)&v301[4] = "-[NWConcrete_nw_resolver_service initWithOrigin:priority:serviceName:port:echConfig:echConfi"
                            "gLength:sensitiveRedacted:]";
      char v215 = (char *)_os_log_send_and_compose_impl();

      v305[0] = 16;
      type[0] = OS_LOG_TYPE_DEFAULT;
      if (__nwlog_fault(v215, v305, type))
      {
        if (v305[0] == 17)
        {
          uint64_t v216 = __nwlog_obj();
          os_log_type_t v217 = v305[0];
          if (os_log_type_enabled(v216, (os_log_type_t)v305[0]))
          {
            *(_DWORD *)uint64_t v301 = 136446210;
            *(void *)&v301[4] = "-[NWConcrete_nw_resolver_service initWithOrigin:priority:serviceName:port:echConfig:ec"
                                  "hConfigLength:sensitiveRedacted:]";
            _os_log_impl(&dword_1830D4000, v216, v217, "%{public}s [super init] failed", v301, 0xCu);
          }
        }
        else if (type[0])
        {
          nw_endpoint_t v230 = (char *)__nw_create_backtrace_string();
          uint64_t v216 = __nwlog_obj();
          os_log_type_t v231 = v305[0];
          BOOL v232 = os_log_type_enabled(v216, (os_log_type_t)v305[0]);
          if (v230)
          {
            if (v232)
            {
              *(_DWORD *)uint64_t v301 = 136446466;
              *(void *)&v301[4] = "-[NWConcrete_nw_resolver_service initWithOrigin:priority:serviceName:port:echConfig:"
                                    "echConfigLength:sensitiveRedacted:]";
              *(_WORD *)&v301[12] = 2082;
              *(void *)&v301[14] = v230;
              _os_log_impl(&dword_1830D4000, v216, v231, "%{public}s [super init] failed, dumping backtrace:%{public}s", v301, 0x16u);
            }

            free(v230);
            goto LABEL_398;
          }
          if (v232)
          {
            *(_DWORD *)uint64_t v301 = 136446210;
            *(void *)&v301[4] = "-[NWConcrete_nw_resolver_service initWithOrigin:priority:serviceName:port:echConfig:ec"
                                  "hConfigLength:sensitiveRedacted:]";
            _os_log_impl(&dword_1830D4000, v216, v231, "%{public}s [super init] failed, no backtrace", v301, 0xCu);
          }
        }
        else
        {
          uint64_t v216 = __nwlog_obj();
          os_log_type_t v246 = v305[0];
          if (os_log_type_enabled(v216, (os_log_type_t)v305[0]))
          {
            *(_DWORD *)uint64_t v301 = 136446210;
            *(void *)&v301[4] = "-[NWConcrete_nw_resolver_service initWithOrigin:priority:serviceName:port:echConfig:ec"
                                  "hConfigLength:sensitiveRedacted:]";
            _os_log_impl(&dword_1830D4000, v216, v246, "%{public}s [super init] failed, backtrace limit exceeded", v301, 0xCu);
          }
        }
      }
LABEL_398:
      if (v215) {
        free(v215);
      }
      goto LABEL_418;
    }
    nw_endpoint_t v103 = (const sockaddr *)dnssd_getaddrinfo_result_get_address();
    int v104 = dnssd_getaddrinfo_result_get_interface_index();
    if (!v103) {
      goto LABEL_324;
    }
    if (v103->sa_len > 0x80u) {
      goto LABEL_324;
    }
    int v105 = v104;
    int sa_family = v103->sa_family;
    if (sa_family != 30 && sa_family != 2) {
      goto LABEL_324;
    }
    memset(buf, 0, sizeof(buf));
    memcpy(buf, v103, v103->sa_len);
    if (!dnssd_getaddrinfo_result_has_extended_dns_error()) {
      goto LABEL_253;
    }
    int extended_dns_error_code = dnssd_getaddrinfo_result_get_extended_dns_error_code();
    extended_dns_error_text = (const char *)dnssd_getaddrinfo_result_get_extended_dns_error_text();
    uint64_t v109 = *(void *)(v276 + 32);
    if (!v109)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v110 = (id)gLogObj;
      if (os_log_type_enabled(v110, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint64_t v301 = 136446722;
        *(void *)&v301[4] = "nw_resolver_create_dns_getaddrinfo_locked_block_invoke";
        *(_WORD *)&v301[12] = 1024;
        *(_DWORD *)&v301[14] = extended_dns_error_code;
        *(_WORD *)&v301[18] = 2082;
        *(void *)&v301[20] = extended_dns_error_text;
        unint64_t v112 = v110;
        char v113 = "%{public}s Got Extended DNS Error: %u %{public}s";
        uint32_t v114 = 28;
LABEL_231:
        _os_log_impl(&dword_1830D4000, v112, OS_LOG_TYPE_INFO, v113, v301, v114);
      }
LABEL_232:

      goto LABEL_233;
    }
    if ((*(unsigned char *)(v109 + 346) & 0x20) == 0)
    {
      if (*(unsigned char *)(v109 + 256))
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        os_log_type_t v110 = (id)gconnectionLogObj;
        if (!os_log_type_enabled(v110, OS_LOG_TYPE_INFO)) {
          goto LABEL_232;
        }
        uint64_t v111 = *(void *)(v276 + 32) + 256;
        *(_DWORD *)uint64_t v301 = 136446978;
        *(void *)&v301[4] = "nw_resolver_create_dns_getaddrinfo_locked_block_invoke";
        *(_WORD *)&v301[12] = 2082;
        *(void *)&v301[14] = v111;
        *(_WORD *)&v301[22] = 1024;
        *(_DWORD *)&v301[24] = extended_dns_error_code;
        *(_WORD *)&v301[28] = 2082;
        *(void *)&v301[30] = extended_dns_error_text;
        unint64_t v112 = v110;
        char v113 = "%{public}s [C%{public}s] Got Extended DNS Error: %u %{public}s";
        uint32_t v114 = 38;
        goto LABEL_231;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v110 = (id)gLogObj;
      if (os_log_type_enabled(v110, OS_LOG_TYPE_INFO))
      {
        int v172 = *(_DWORD *)(*(void *)(v276 + 32) + 340);
        *(_DWORD *)uint64_t v301 = 136446978;
        *(void *)&v301[4] = "nw_resolver_create_dns_getaddrinfo_locked_block_invoke";
        *(_WORD *)&v301[12] = 1024;
        *(_DWORD *)&v301[14] = v172;
        *(_WORD *)&v301[18] = 1024;
        *(_DWORD *)&v301[20] = extended_dns_error_code;
        *(_WORD *)&v301[24] = 2082;
        *(void *)&v301[26] = extended_dns_error_text;
        unint64_t v112 = v110;
        char v113 = "%{public}s [R%u] Got Extended DNS Error: %u %{public}s";
        uint32_t v114 = 34;
        goto LABEL_231;
      }
      goto LABEL_232;
    }
LABEL_233:
    if (!extended_dns_error_code) {
      goto LABEL_253;
    }
    uint64_t v173 = *(void *)(v276 + 32);
    if (!*(_WORD *)(v173 + 344) || v82 == 1)
    {
      *(_WORD *)(v173 + 344) = extended_dns_error_code;
      __int16 v174 = *(void **)(*(void *)(v276 + 32) + 224);
      if (v174)
      {
        free(v174);
        *(void *)(*(void *)(v276 + 32) + 224) = 0;
      }
      if (extended_dns_error_text && (v78 - 3) <= 1)
      {
        id v175 = strdup(extended_dns_error_text);
        if (!v175)
        {
          os_log_type_t v262 = __nwlog_obj();
          os_log_type_enabled(v262, OS_LOG_TYPE_ERROR);
          *(_DWORD *)uint64_t v301 = 136446210;
          *(void *)&v301[4] = "strict_strdup";
          BOOL v263 = (void *)_os_log_send_and_compose_impl();

          if (__nwlog_abort((uint64_t)v263))
          {
            __break(1u);
            return;
          }
          free(v263);
        }
        *(void *)(*(void *)(v276 + 32) + 224) = v175;
      }
    }
    if (extended_dns_error_code != 4)
    {
LABEL_253:
      switch(v82)
      {
        case 1:
          int v191 = 0;
          BOOL v192 = 0;
          int v190 = 2;
          break;
        case 4:
          int v191 = 0;
          BOOL v192 = 0;
          int v190 = -2147483646;
          break;
        case 3:
LABEL_256:
          unsigned int negative_reason = dnssd_getaddrinfo_result_get_negative_reason();
          uint64_t v183 = *(void *)(v276 + 32);
          if (v183)
          {
            if ((*(unsigned char *)(v183 + 346) & 0x20) != 0)
            {
LABEL_285:
              int v190 = 0;
              BOOL v192 = negative_reason - 3 < 2;
              int v191 = -65554;
              int v82 = 3;
              break;
            }
            if (*(unsigned char *)(v183 + 256))
            {
              if (__nwlog_connection_log::onceToken != -1) {
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
              }
              unint64_t v184 = (id)gconnectionLogObj;
              if (!os_log_type_enabled(v184, OS_LOG_TYPE_INFO)) {
                goto LABEL_284;
              }
              nw_endpoint_t v185 = "<unknown reason>";
              if (negative_reason <= 5) {
                nw_endpoint_t v185 = off_1E523B628[negative_reason];
              }
              uint64_t v186 = *(void *)(v276 + 32) + 256;
              *(_DWORD *)uint64_t v301 = 136446722;
              *(void *)&v301[4] = "nw_resolver_create_dns_getaddrinfo_locked_block_invoke";
              *(_WORD *)&v301[12] = 2082;
              *(void *)&v301[14] = v186;
              *(_WORD *)&v301[22] = 2082;
              *(void *)&v301[24] = v185;
              os_log_type_t v187 = v184;
              v188 = "%{public}s [C%{public}s] Got DNS negative reason: %{public}s";
              uint32_t v189 = 32;
              goto LABEL_283;
            }
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            unint64_t v184 = (id)gLogObj;
            if (os_log_type_enabled(v184, OS_LOG_TYPE_INFO))
            {
              uint64_t v194 = "<unknown reason>";
              if (negative_reason <= 5) {
                uint64_t v194 = off_1E523B628[negative_reason];
              }
              int v195 = *(_DWORD *)(*(void *)(v276 + 32) + 340);
              *(_DWORD *)uint64_t v301 = 136446722;
              *(void *)&v301[4] = "nw_resolver_create_dns_getaddrinfo_locked_block_invoke";
              *(_WORD *)&v301[12] = 1024;
              *(_DWORD *)&v301[14] = v195;
              *(_WORD *)&v301[18] = 2082;
              *(void *)&v301[20] = v194;
              os_log_type_t v187 = v184;
              v188 = "%{public}s [R%u] Got DNS negative reason: %{public}s";
              uint32_t v189 = 28;
LABEL_283:
              _os_log_impl(&dword_1830D4000, v187, OS_LOG_TYPE_INFO, v188, v301, v189);
            }
          }
          else
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            unint64_t v184 = (id)gLogObj;
            if (os_log_type_enabled(v184, OS_LOG_TYPE_INFO))
            {
              os_log_type_t v193 = "<unknown reason>";
              if (negative_reason <= 5) {
                os_log_type_t v193 = off_1E523B628[negative_reason];
              }
              *(_DWORD *)uint64_t v301 = 136446466;
              *(void *)&v301[4] = "nw_resolver_create_dns_getaddrinfo_locked_block_invoke";
              *(_WORD *)&v301[12] = 2082;
              *(void *)&v301[14] = v193;
              os_log_type_t v187 = v184;
              v188 = "%{public}s Got DNS negative reason: %{public}s";
              uint32_t v189 = 22;
              goto LABEL_283;
            }
          }
LABEL_284:

          goto LABEL_285;
        default:
LABEL_265:
          int v190 = 0;
          int v191 = 0;
          BOOL v192 = 0;
          break;
      }
      if (dnssd_getaddrinfo_result_is_from_cache()) {
        int v196 = v190 | 0x40000000;
      }
      else {
        int v196 = v190;
      }
      nw_resolver_update_flags_locked(*(NWConcrete_nw_resolver **)(v276 + 32), *(NWConcrete_nw_resolver_service **)(v276 + 40), v196, v191, v103, 0, v192);
      if (v82 == 1 || v82 == 4)
      {
        *(void *)int v309 = 0;
        *(void *)&v309[8] = v309;
        *(void *)&v309[16] = 0x2020000000;
        *(_WORD *)&v309[24] = 0;
        *(void *)uint64_t v301 = 0;
        *(void *)&v301[8] = v301;
        *(void *)&v301[16] = 0x3032000000;
        *(void *)&v301[24] = __Block_byref_object_copy__5653;
        *(void *)&v301[32] = __Block_byref_object_dispose__5654;
        *(void *)&v301[40] = 0;
        BOOL v197 = *(void **)(v276 + 40);
        if (v197)
        {
          os_log_type_t v198 = v197;
          __int16 v199 = v198[17];

          *(_WORD *)(*(void *)&v309[8] + 24) = v199;
          os_log_type_t v200 = nw_resolver_service_copy_ech_config(*(NWConcrete_nw_resolver_service **)(v276 + 40));
          nw_endpoint_t v201 = *(void **)(*(void *)&v301[8] + 40);
          *(void *)(*(void *)&v301[8] + 40) = v200;
        }
        else
        {
          nw_endpoint_t v203 = *(void **)(v276 + 32);
          os_log_type_t v204 = (atomic_uchar *)v203[22];
          v279[0] = MEMORY[0x1E4F143A8];
          v279[1] = 3221225472;
          v279[2] = ___ZL41nw_resolver_create_dns_getaddrinfo_lockedP22NWConcrete_nw_resolverP30NWConcrete_nw_resolver_service_block_invoke_214;
          v279[3] = &unk_1E523B3A8;
          __int16 v282 = v309;
          unint64_t v283 = v301;
          uint64_t v284 = buf;
          __int16 v280 = v203;
          id v281 = v76;
          nw_array_apply(v204, (uint64_t)v279);

          nw_endpoint_t v201 = v280;
        }

        *(_WORD *)buf[0].sa_data = __rev16(nw_endpoint_get_port(*(nw_endpoint_t *)(v276 + 48)));
        nw_resolver_insert_address(*(void **)(v276 + 32), v76, buf, *(unsigned __int16 *)(*(void *)&v309[8] + 24), *(void **)(*(void *)&v301[8] + 40));
        _Block_object_dispose(v301, 8);

        _Block_object_dispose(v309, 8);
      }
      else
      {
        os_log_type_t v202 = *(void **)(v276 + 32);
        v277[0] = MEMORY[0x1E4F143A8];
        v277[1] = 3221225472;
        v277[2] = ___ZL41nw_resolver_create_dns_getaddrinfo_lockedP22NWConcrete_nw_resolverP30NWConcrete_nw_resolver_service_block_invoke_2_215;
        v277[3] = &__block_descriptor_44_e63_B24__0__NSObject_OS_nw_endpoint__8__NSObject_OS_nw_endpoint__16l;
        v277[4] = buf;
        int v278 = v105;
        nw_resolver_remove_endpoint_locked(v202, v277);
      }
      goto LABEL_324;
    }
    if (v82 == 1 || v82 == 3) {
      goto LABEL_256;
    }
    if (v82 != 4) {
      goto LABEL_265;
    }
    uint64_t v176 = *(void *)(v276 + 32);
    if (v176)
    {
      if ((*(unsigned char *)(v176 + 346) & 0x20) != 0) {
        goto LABEL_325;
      }
      if (*(unsigned char *)(v176 + 256))
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        uint64_t v177 = (id)gconnectionLogObj;
        if (!os_log_type_enabled(v177, OS_LOG_TYPE_INFO)) {
          goto LABEL_337;
        }
        uint64_t v178 = *(void *)(v276 + 32) + 256;
        *(_DWORD *)uint64_t v301 = 136446466;
        *(void *)&v301[4] = "nw_resolver_create_dns_getaddrinfo_locked_block_invoke";
        *(_WORD *)&v301[12] = 2082;
        *(void *)&v301[14] = v178;
        uint64_t v179 = v177;
        os_log_type_t v180 = "%{public}s [C%{public}s] Received expired forged answer, ignoring";
        uint32_t v181 = 22;
        goto LABEL_336;
      }
      uint64_t v177 = __nwlog_obj();
      if (os_log_type_enabled(v177, OS_LOG_TYPE_INFO))
      {
        int v213 = *(_DWORD *)(*(void *)(v276 + 32) + 340);
        *(_DWORD *)uint64_t v301 = 136446466;
        *(void *)&v301[4] = "nw_resolver_create_dns_getaddrinfo_locked_block_invoke";
        *(_WORD *)&v301[12] = 1024;
        *(_DWORD *)&v301[14] = v213;
        uint64_t v179 = v177;
        os_log_type_t v180 = "%{public}s [R%u] Received expired forged answer, ignoring";
        uint32_t v181 = 18;
        goto LABEL_336;
      }
    }
    else
    {
      uint64_t v177 = __nwlog_obj();
      if (os_log_type_enabled(v177, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint64_t v301 = 136446210;
        *(void *)&v301[4] = "nw_resolver_create_dns_getaddrinfo_locked_block_invoke";
        uint64_t v179 = v177;
        os_log_type_t v180 = "%{public}s Received expired forged answer, ignoring";
        uint32_t v181 = 12;
LABEL_336:
        _os_log_impl(&dword_1830D4000, v179, OS_LOG_TYPE_INFO, v180, v301, v181);
      }
    }
LABEL_337:

LABEL_325:
    os_log_type_t v75 = v274 + 1;
    --a3;
  }
  while (a3);
  uint64_t v3 = v276;
  if (v266) {
    nw_resolver_update_status_locked(*(void **)(v276 + 32), 0);
  }
LABEL_455:
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(v3 + 32) + 12));
  id WeakRetained = v265;
LABEL_456:
}

void sub_1832D94C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,void *a46)
{
  _Unwind_Resume(a1);
}

BOOL nw_parameters_get_sensitive_redacted(void *a1)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (!v1)
  {
    uint64_t v9 = __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    os_log_type_t v20 = "nw_parameters_get_sensitive_redacted";
    uint32_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v17 = 0;
    if (__nwlog_fault(v10, &type, &v17))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        int v11 = __nwlog_obj();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          os_log_type_t v20 = "nw_parameters_get_sensitive_redacted";
          _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s called with null parameters", buf, 0xCu);
        }
      }
      else if (v17)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        int v11 = __nwlog_obj();
        os_log_type_t v14 = type;
        BOOL v15 = os_log_type_enabled(v11, type);
        if (backtrace_string)
        {
          if (v15)
          {
            *(_DWORD *)tcp_info buf = 136446466;
            os_log_type_t v20 = "nw_parameters_get_sensitive_redacted";
            __int16 v21 = 2082;
            uint64_t v22 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v11, v14, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_34;
        }
        if (v15)
        {
          *(_DWORD *)tcp_info buf = 136446210;
          os_log_type_t v20 = "nw_parameters_get_sensitive_redacted";
          _os_log_impl(&dword_1830D4000, v11, v14, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        int v11 = __nwlog_obj();
        os_log_type_t v16 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          os_log_type_t v20 = "nw_parameters_get_sensitive_redacted";
          _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_34:
    if (v10) {
      free(v10);
    }
    goto LABEL_16;
  }
  uint64_t v3 = *(id *)(v1[13] + 136);
  uint64_t v4 = v3;
  if (!v3 || (int v5 = v3[31], (v5 - 2) < 2))
  {
    if (nwlog_get_sensitive_redacted::onceToken != -1) {
      dispatch_once(&nwlog_get_sensitive_redacted::onceToken, &__block_literal_global_75);
    }
    int v6 = nwlog_get_sensitive_redacted::sensitiveRedacted;

    if (!v6) {
      goto LABEL_10;
    }
LABEL_16:
    BOOL v7 = 1;
    goto LABEL_17;
  }
  if (v5 != 1)
  {

    goto LABEL_16;
  }

LABEL_10:
  if (*(unsigned __int8 *)(v2[13] + 102) - 1 > 1)
  {
    BOOL v7 = 0;
  }
  else
  {
    if (nwlog_get_sensitive_redacted::onceToken != -1) {
      dispatch_once(&nwlog_get_sensitive_redacted::onceToken, &__block_literal_global_75);
    }
    BOOL v7 = nwlog_get_sensitive_redacted::sensitiveRedacted != 0;
  }
LABEL_17:

  return v7;
}

BOOL nw_resolver_remove_endpoint_locked(void *a1, void *a2)
{
  uint64_t v3 = a1;
  id v4 = a2;
  uint64_t v16 = 0;
  char v17 = &v16;
  uint64_t v18 = 0x2020000000;
  char v19 = 0;
  BOOL v5 = nw_array_create();
  int v6 = (atomic_uchar *)v3[18];
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  v11[2] = ___ZL34nw_resolver_remove_endpoint_lockedP22NWConcrete_nw_resolverPU25objcproto14OS_nw_endpoint8NSObjectU13block_pointerFbS3_S3_E_block_invoke;
  v11[3] = &unk_1E523B500;
  id v7 = v4;
  id v14 = v7;
  BOOL v15 = &v16;
  id v12 = 0;
  id v8 = (id)v5;
  id v13 = v8;
  nw_array_apply(v6, (uint64_t)v11);
  int v9 = *((unsigned __int8 *)v17 + 24);
  if (*((unsigned char *)v17 + 24)) {
    objc_storeStrong(v3 + 18, (id)v5);
  }

  _Block_object_dispose(&v16, 8);
  return v9 != 0;
}

BOOL nw_resolver_check_svcb_complete(NWConcrete_nw_resolver *a1)
{
  id v1 = a1;
  uint64_t v7 = 0;
  id v8 = &v7;
  uint64_t v9 = 0x2020000000;
  char v10 = 0;
  uint64_t v2 = (atomic_uchar *)*((void *)v1 + 22);
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  v6[2] = ___ZL31nw_resolver_check_svcb_completeP22NWConcrete_nw_resolver_block_invoke;
  v6[3] = &unk_1E5248058;
  v6[4] = &v7;
  nw_array_apply(v2, (uint64_t)v6);
  int v3 = *((unsigned __int8 *)v8 + 24);
  if (!*((unsigned char *)v8 + 24)) {
    *((_WORD *)v1 + 44) |= 0x80u;
  }
  BOOL v4 = v3 == 0;
  _Block_object_dispose(&v7, 8);

  return v4;
}

void nw_protocol_outbound_data_finalizer(void *a1, int a2, char *a3)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  BOOL v5 = a1;
  if (a2)
  {
    if (gLogDatapath)
    {
      id v8 = __nwlog_obj();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint64_t v18 = "nw_protocol_outbound_data_finalizer";
        _os_log_impl(&dword_1830D4000, v8, OS_LOG_TYPE_DEBUG, "%{public}s Finalizing outbound frame by copying", buf, 0xCu);
      }
    }
    unsigned int v6 = nw_frame_unclaimed_length(v5);
    uint64_t v7 = v6;
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = ___ZL35nw_protocol_outbound_data_finalizerPU22objcproto11OS_nw_frame8NSObjectbPv_block_invoke;
    v12[3] = &unk_1E523C0A0;
    unsigned int v15 = v6;
    id v13 = v5;
    id v14 = a3;
    char v16 = a2;
    nw_protocol_request_outbound_data(v14, 0, v7, v12);
  }
  else
  {
    if ((!a3 || (a3[405] & 0x80000000) == 0) && gLogDatapath)
    {
      uint64_t v9 = __nwlog_obj();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        char v10 = a3 + 407;
        if (!a3) {
          char v10 = "";
        }
        *(_DWORD *)tcp_info buf = 136446978;
        uint64_t v18 = "nw_protocol_outbound_data_finalizer";
        __int16 v19 = 2082;
        os_log_type_t v20 = v10;
        int v11 = " ";
        if (!a3) {
          int v11 = "";
        }
        __int16 v21 = 2080;
        uint64_t v22 = v11;
        __int16 v23 = 2048;
        uint64_t v24 = v5;
        _os_log_impl(&dword_1830D4000, v9, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sFinalizing outbound frame %p without copying (drop)", buf, 0x2Au);
      }
    }
    nw_protocol_data_finalizer(a3, v5, 0, (uint64_t)(a3 + 144));
  }
}

void sub_1832D9E24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_protocol_inbound_data_finalizer(void *a1, uint64_t a2, void *a3)
{
  nw_protocol_data_finalizer(a3, a1, a2, (uint64_t)a3 + 128);
}

void sub_1832D9EAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void nw_protocol_data_finalizer(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = a1;
  id v8 = a2;
  uint64_t v9 = (uint64_t)v8;
  if (!v7)
  {
    uint64_t v22 = __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    uint64_t v46 = "nw_protocol_data_finalizer";
    __int16 v23 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v43 = 0;
    if (!__nwlog_fault(v23, &type, &v43)) {
      goto LABEL_89;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v24 = __nwlog_obj();
      os_log_type_t v25 = type;
      if (os_log_type_enabled(v24, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint64_t v46 = "nw_protocol_data_finalizer";
        _os_log_impl(&dword_1830D4000, v24, v25, "%{public}s called with null instance", buf, 0xCu);
      }
    }
    else if (v43)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v24 = __nwlog_obj();
      os_log_type_t v31 = type;
      BOOL v32 = os_log_type_enabled(v24, type);
      if (backtrace_string)
      {
        if (v32)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          uint64_t v46 = "nw_protocol_data_finalizer";
          __int16 v47 = 2082;
          BOOL v48 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v24, v31, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_89:
        if (!v23) {
          goto LABEL_35;
        }
LABEL_90:
        free(v23);
        goto LABEL_35;
      }
      if (v32)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint64_t v46 = "nw_protocol_data_finalizer";
        _os_log_impl(&dword_1830D4000, v24, v31, "%{public}s called with null instance, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v24 = __nwlog_obj();
      os_log_type_t v40 = type;
      if (os_log_type_enabled(v24, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint64_t v46 = "nw_protocol_data_finalizer";
        _os_log_impl(&dword_1830D4000, v24, v40, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_88:

    goto LABEL_89;
  }
  if (!v8)
  {
    BOOL v26 = __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    uint64_t v46 = "nw_protocol_data_finalizer";
    __int16 v23 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v43 = 0;
    if (!__nwlog_fault(v23, &type, &v43)) {
      goto LABEL_89;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v24 = __nwlog_obj();
      os_log_type_t v27 = type;
      if (os_log_type_enabled(v24, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint64_t v46 = "nw_protocol_data_finalizer";
        _os_log_impl(&dword_1830D4000, v24, v27, "%{public}s called with null frame", buf, 0xCu);
      }
      goto LABEL_88;
    }
    if (!v43)
    {
      uint64_t v24 = __nwlog_obj();
      os_log_type_t v41 = type;
      if (os_log_type_enabled(v24, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint64_t v46 = "nw_protocol_data_finalizer";
        _os_log_impl(&dword_1830D4000, v24, v41, "%{public}s called with null frame, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_88;
    }
    int v33 = (char *)__nw_create_backtrace_string();
    uint64_t v24 = __nwlog_obj();
    os_log_type_t v34 = type;
    BOOL v35 = os_log_type_enabled(v24, type);
    if (!v33)
    {
      if (v35)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint64_t v46 = "nw_protocol_data_finalizer";
        _os_log_impl(&dword_1830D4000, v24, v34, "%{public}s called with null frame, no backtrace", buf, 0xCu);
      }
      goto LABEL_88;
    }
    if (v35)
    {
      *(_DWORD *)tcp_info buf = 136446466;
      uint64_t v46 = "nw_protocol_data_finalizer";
      __int16 v47 = 2082;
      BOOL v48 = v33;
      _os_log_impl(&dword_1830D4000, v24, v34, "%{public}s called with null frame, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_65;
  }
  if (!a4)
  {
    uint64_t v28 = __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    uint64_t v46 = "nw_protocol_data_finalizer";
    __int16 v23 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v43 = 0;
    if (!__nwlog_fault(v23, &type, &v43)) {
      goto LABEL_89;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v24 = __nwlog_obj();
      os_log_type_t v29 = type;
      if (os_log_type_enabled(v24, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint64_t v46 = "nw_protocol_data_finalizer";
        _os_log_impl(&dword_1830D4000, v24, v29, "%{public}s called with null existing_master_array", buf, 0xCu);
      }
      goto LABEL_88;
    }
    if (!v43)
    {
      uint64_t v24 = __nwlog_obj();
      os_log_type_t v42 = type;
      if (os_log_type_enabled(v24, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint64_t v46 = "nw_protocol_data_finalizer";
        _os_log_impl(&dword_1830D4000, v24, v42, "%{public}s called with null existing_master_array, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_88;
    }
    int v33 = (char *)__nw_create_backtrace_string();
    uint64_t v24 = __nwlog_obj();
    os_log_type_t v36 = type;
    BOOL v37 = os_log_type_enabled(v24, type);
    if (!v33)
    {
      if (v37)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint64_t v46 = "nw_protocol_data_finalizer";
        _os_log_impl(&dword_1830D4000, v24, v36, "%{public}s called with null existing_master_array, no backtrace", buf, 0xCu);
      }
      goto LABEL_88;
    }
    if (v37)
    {
      *(_DWORD *)tcp_info buf = 136446466;
      uint64_t v46 = "nw_protocol_data_finalizer";
      __int16 v47 = 2082;
      BOOL v48 = v33;
      _os_log_impl(&dword_1830D4000, v24, v36, "%{public}s called with null existing_master_array, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_65:

    free(v33);
    if (!v23) {
      goto LABEL_35;
    }
    goto LABEL_90;
  }
  __int16 v10 = *((_WORD *)v8 + 102);
  if (v10)
  {
    if ((*((_WORD *)v8 + 102) & 0x100) == 0
      || !g_channel_check_validity
      || g_channel_check_validity(v8, *((void *)v8 + 11)))
    {
      id v13 = *(void **)(v9 + 112);
      if (v13) {
        free(v13);
      }
    }
  }
  else
  {
    uint64_t v11 = *((void *)v8 + 13);
    if (v11)
    {
      if ((*((_WORD *)v8 + 102) & 0x100) != 0
        && g_channel_check_validity
        && !g_channel_check_validity(v8, *((void *)v8 + 11)))
      {
        unint64_t v12 = 0;
      }
      else
      {
        unint64_t v12 = *(void *)(v9 + 112);
      }
      nw_mem_buffer_free(v11, v12);
    }
    else if ((v10 & 2) != 0)
    {
      nw_frame_set_external_data((uint64_t)v8, 0, 0);
    }
  }
  nw_frame_reset(v9, 0, 0, 0, 0);
  *(_WORD *)(v9 + 204) &= ~1u;
  id v14 = *(void **)(v9 + 24);
  unsigned int v15 = (void *)(v9 + 16);
  uint64_t v16 = *(void *)(v9 + 16);
  if (v16)
  {
    *(void *)(v16 + 24) = v14;
    id v14 = *(void **)(v9 + 24);
  }
  else
  {
    *(void *)(a4 + 8) = v14;
  }
  char v17 = 0;
  *id v14 = v16;
  void *v15 = 0;
  *(void *)(v9 + 24) = 0;
  if ((*(_WORD *)(v9 + 204) & 4) != 0)
  {
    char v17 = *(void (***)(void, void))(v9 + 216);
    if (v17) {
      *(void *)(v9 + 216) = 0;
    }
  }
  uint64_t v18 = *((unsigned int *)v7 + 40);
  if (v18 > 0x27)
  {

    if (!v17) {
      goto LABEL_34;
    }
  }
  else
  {
    *(void *)(v9 + 16) = 0;
    __int16 v19 = (uint64_t *)v7[22];
    *(void *)(v9 + 24) = v19;
    *__int16 v19 = v9;
    v7[22] = v15;
    uint64_t v20 = v18 + 1;
    uint64_t v21 = v20 << 31 >> 31;
    *((_DWORD *)v7 + 40) = v20;
    if (v21 != v20 || v21 < 0)
    {
      if (gLogDatapath)
      {
        unsigned int v38 = __nwlog_obj();
        if (os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v39 = *((unsigned int *)v7 + 40);
          *(_DWORD *)tcp_info buf = 136446978;
          uint64_t v46 = "nw_protocol_data_finalizer";
          __int16 v47 = 2082;
          BOOL v48 = "instance->empty_frame_pool_count";
          __int16 v49 = 2048;
          uint64_t v50 = 1;
          __int16 v51 = 2048;
          uint64_t v52 = v39;
          _os_log_impl(&dword_1830D4000, v38, OS_LOG_TYPE_DEBUG, "%{public}s Overflow: %{public}s, increment %llu, result %llu", buf, 0x2Au);
        }
      }
      *((_DWORD *)v7 + 40) = -1;
      if (!v17) {
        goto LABEL_34;
      }
    }
    else if (!v17)
    {
      goto LABEL_34;
    }
  }
  v17[2](v17, a3);
LABEL_34:

LABEL_35:
}

void sub_1832DA784(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id nw_protocol_instance_copy_options(void *a1, uint64_t a2)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  int v3 = a1;
  BOOL v4 = v3;
  if (v3)
  {
    BOOL v5 = (void *)v3[15];
    if (v5)
    {
      unsigned int v6 = v5;
      uint64_t v7 = v6;
      if (((_BYTE)v6[17] & 8) == 0) {
        dispatch_assert_queue_V2(v6[1]);
      }
    }
    if (a2 != -1 && *(_DWORD *)(v4[1] + 64) == 3)
    {
      uint64_t node = nw_hash_table_get_node(v4[29], a2, 8);
      if (node)
      {
        uint64_t v9 = *(void **)(node + 40);
LABEL_12:
        id v10 = v9;
        goto LABEL_13;
      }
LABEL_11:
      uint64_t v9 = (void *)v4[7];
      goto LABEL_12;
    }
    if (a2 == -1) {
      goto LABEL_11;
    }
    uint64_t v16 = __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    uint64_t v28 = "nw_protocol_instance_copy_options";
    id v13 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (__nwlog_fault(v13, &type, &v25))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        id v14 = __nwlog_obj();
        os_log_type_t v17 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          uint64_t v28 = "nw_protocol_instance_copy_options";
          _os_log_impl(&dword_1830D4000, v14, v17, "%{public}s called with null (flow == (_nw_protocol_default_flow))", buf, 0xCu);
        }
LABEL_45:

        goto LABEL_46;
      }
      if (!v25)
      {
        id v14 = __nwlog_obj();
        os_log_type_t v24 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          uint64_t v28 = "nw_protocol_instance_copy_options";
          _os_log_impl(&dword_1830D4000, v14, v24, "%{public}s called with null (flow == (_nw_protocol_default_flow)), backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_45;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v14 = __nwlog_obj();
      os_log_type_t v21 = type;
      BOOL v22 = os_log_type_enabled(v14, type);
      if (!backtrace_string)
      {
        if (v22)
        {
          *(_DWORD *)tcp_info buf = 136446210;
          uint64_t v28 = "nw_protocol_instance_copy_options";
          _os_log_impl(&dword_1830D4000, v14, v21, "%{public}s called with null (flow == (_nw_protocol_default_flow)), no backtrace", buf, 0xCu);
        }
        goto LABEL_45;
      }
      if (v22)
      {
        *(_DWORD *)tcp_info buf = 136446466;
        uint64_t v28 = "nw_protocol_instance_copy_options";
        __int16 v29 = 2082;
        int v30 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v14, v21, "%{public}s called with null (flow == (_nw_protocol_default_flow)), dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_33;
    }
  }
  else
  {
    unint64_t v12 = __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    uint64_t v28 = "nw_protocol_instance_copy_options";
    id v13 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (__nwlog_fault(v13, &type, &v25))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        id v14 = __nwlog_obj();
        os_log_type_t v15 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          uint64_t v28 = "nw_protocol_instance_copy_options";
          _os_log_impl(&dword_1830D4000, v14, v15, "%{public}s called with null instance", buf, 0xCu);
        }
        goto LABEL_45;
      }
      if (!v25)
      {
        id v14 = __nwlog_obj();
        os_log_type_t v23 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          uint64_t v28 = "nw_protocol_instance_copy_options";
          _os_log_impl(&dword_1830D4000, v14, v23, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_45;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v14 = __nwlog_obj();
      os_log_type_t v19 = type;
      BOOL v20 = os_log_type_enabled(v14, type);
      if (!backtrace_string)
      {
        if (v20)
        {
          *(_DWORD *)tcp_info buf = 136446210;
          uint64_t v28 = "nw_protocol_instance_copy_options";
          _os_log_impl(&dword_1830D4000, v14, v19, "%{public}s called with null instance, no backtrace", buf, 0xCu);
        }
        goto LABEL_45;
      }
      if (v20)
      {
        *(_DWORD *)tcp_info buf = 136446466;
        uint64_t v28 = "nw_protocol_instance_copy_options";
        __int16 v29 = 2082;
        int v30 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v14, v19, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_33:

      free(backtrace_string);
    }
  }
LABEL_46:
  if (v13) {
    free(v13);
  }
  id v10 = 0;
LABEL_13:

  return v10;
}

void sub_1832DACB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_path_flow_registration_get_advisory_region(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = *((void *)v1 + 10);
    goto LABEL_3;
  }
  BOOL v5 = __nwlog_obj();
  *(_DWORD *)tcp_info buf = 136446210;
  uint64_t v16 = "nw_path_flow_registration_get_advisory_region";
  unsigned int v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint64_t v16 = "nw_path_flow_registration_get_advisory_region";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null flow_registration", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          uint64_t v16 = "nw_path_flow_registration_get_advisory_region";
          __int16 v17 = 2082;
          uint64_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null flow_registration, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint64_t v16 = "nw_path_flow_registration_get_advisory_region";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null flow_registration, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint64_t v16 = "nw_path_flow_registration_get_advisory_region";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null flow_registration, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

uint64_t ___ZL34nw_resolver_process_service_resultP22NWConcrete_nw_resolverP30NWConcrete_nw_resolver_servicePU38objcproto27OS_dnssd_getaddrinfo_result8NSObject_block_invoke_225(uint64_t a1, const sockaddr *a2)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  size_t sa_len = a2->sa_len;
  if ((sa_len & 0x80u) == 0) {
    size_t v5 = 128 - sa_len;
  }
  else {
    size_t v5 = 0;
  }
  bzero(&__dst + sa_len, v5);
  memcpy(&__dst, a2, sa_len);
  __int16 v41 = __rev16(nw_resolver_service_get_port(*(NWConcrete_nw_resolver_service **)(a1 + 32)));
  int v6 = v40;
  if (v40 != 2)
  {
    if (v40 != 30)
    {
      int v9 = 0;
      uint64_t v7 = *(void *)(a1 + 40);
      goto LABEL_15;
    }
    uint64_t v7 = *(void *)(a1 + 40);
    if (*(char *)(v7 + 346) < 0)
    {
      BOOL v8 = *(_DWORD *)(v7 + 80) == 1;
      goto LABEL_12;
    }
LABEL_9:
    int v9 = 1;
    goto LABEL_15;
  }
  uint64_t v7 = *(void *)(a1 + 40);
  if ((*(unsigned char *)(v7 + 346) & 0x40) == 0) {
    goto LABEL_9;
  }
  BOOL v8 = *(_DWORD *)(v7 + 80) == 2;
LABEL_12:
  int v9 = v8;
LABEL_15:
  if (!nw_parameters_get_sensitive_redacted(*(void **)(v7 + 16)))
  {
    uint64_t v13 = *(void *)(a1 + 40);
    if (v13)
    {
      if ((*(unsigned char *)(v13 + 346) & 0x20) != 0) {
        goto LABEL_66;
      }
      if (*(unsigned char *)(v13 + 256))
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        id v14 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
        {
          uint64_t v15 = *(void *)(a1 + 40) + 256;
          uint64_t v16 = "";
          os_log_type_t v34 = "nw_resolver_process_service_result_block_invoke";
          int v33 = 136447234;
          if (v9) {
            uint64_t v16 = " (ignoring)";
          }
          __int16 v35 = 2082;
          *(void *)os_log_type_t v36 = v15;
          *(_WORD *)&v36[8] = 1040;
          *(_DWORD *)&v36[10] = __dst;
          *(_WORD *)&v36[14] = 2098;
          *(void *)&v36[16] = &__dst;
          *(_WORD *)&v36[24] = 2082;
          *(void *)&v36[26] = v16;
          _os_log_impl(&dword_1830D4000, v14, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s] Address hint: %{public,network:sockaddr}.*P%{public}s", (uint8_t *)&v33, 0x30u);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v14 = (id)gLogObj;
        if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
        {
          int v23 = *(_DWORD *)(*(void *)(a1 + 40) + 340);
          os_log_type_t v24 = "";
          if (v9) {
            os_log_type_t v24 = " (ignoring)";
          }
          int v33 = 136447234;
          os_log_type_t v34 = "nw_resolver_process_service_result_block_invoke";
          __int16 v35 = 1024;
          *(_DWORD *)os_log_type_t v36 = v23;
          *(_WORD *)&v36[4] = 1040;
          *(_DWORD *)&v36[6] = __dst;
          *(_WORD *)&v36[10] = 2098;
          *(void *)&v36[12] = &__dst;
          *(_WORD *)&v36[20] = 2082;
          *(void *)&v36[22] = v24;
          _os_log_impl(&dword_1830D4000, v14, OS_LOG_TYPE_INFO, "%{public}s [R%u] Address hint: %{public,network:sockaddr}.*P%{public}s", (uint8_t *)&v33, 0x2Cu);
        }
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v14 = (id)gLogObj;
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        __int16 v17 = "";
        os_log_type_t v34 = "nw_resolver_process_service_result_block_invoke";
        __int16 v35 = 1040;
        int v33 = 136446978;
        if (v9) {
          __int16 v17 = " (ignoring)";
        }
        *(_DWORD *)os_log_type_t v36 = __dst;
        *(_WORD *)&v36[4] = 2098;
        *(void *)&v36[6] = &__dst;
        *(_WORD *)&v36[14] = 2082;
        *(void *)&v36[16] = v17;
        _os_log_impl(&dword_1830D4000, v14, OS_LOG_TYPE_INFO, "%{public}s Address hint: %{public,network:sockaddr}.*P%{public}s", (uint8_t *)&v33, 0x26u);
      }
    }
    goto LABEL_65;
  }
  char v38 = 0;
  uint64_t v37 = 0;
  if (v6 != 30)
  {
    if (v6 != 2)
    {
      os_log_type_t v10 = "<NULL>";
      BOOL v11 = "";
      uint64_t v12 = *(void *)(a1 + 40);
      if (!v12) {
        goto LABEL_60;
      }
      goto LABEL_40;
    }
    if (v42)
    {
      os_log_type_t v10 = (const char *)&v37;
      __nwlog_salted_hash(&v42, 4, (char *)&v37);
      BOOL v11 = "IPv4#";
      uint64_t v12 = *(void *)(a1 + 40);
      if (!v12) {
        goto LABEL_60;
      }
      goto LABEL_40;
    }
    os_log_type_t v10 = "INADDR_ANY";
LABEL_59:
    BOOL v11 = "";
    uint64_t v12 = *(void *)(a1 + 40);
    if (!v12) {
      goto LABEL_60;
    }
    goto LABEL_40;
  }
  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vtstq_s32(v43[0], v43[0]))) & 1) == 0)
  {
    os_log_type_t v10 = "IN6ADDR_ANY";
    goto LABEL_59;
  }
  os_log_type_t v10 = (const char *)&v37;
  __nwlog_salted_hash(v43, 16, (char *)&v37);
  BOOL v11 = "IPv6#";
  uint64_t v12 = *(void *)(a1 + 40);
  if (!v12)
  {
LABEL_60:
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v14 = (id)gLogObj;
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      os_log_type_t v27 = " (ignoring)";
      os_log_type_t v34 = "nw_resolver_process_service_result_block_invoke";
      int v33 = 136446978;
      if (!v9) {
        os_log_type_t v27 = "";
      }
      __int16 v35 = 2080;
      *(void *)os_log_type_t v36 = v11;
      *(_WORD *)&v36[8] = 2080;
      *(void *)&v36[10] = v10;
      *(_WORD *)&v36[18] = 2082;
      *(void *)&v36[20] = v27;
      BOOL v20 = "%{public}s Address hint: %s%s%{public}s";
      os_log_type_t v21 = v14;
      uint32_t v22 = 42;
LABEL_64:
      _os_log_impl(&dword_1830D4000, v21, OS_LOG_TYPE_INFO, v20, (uint8_t *)&v33, v22);
      goto LABEL_65;
    }
    goto LABEL_65;
  }
LABEL_40:
  if ((*(unsigned char *)(v12 + 346) & 0x20) != 0) {
    goto LABEL_66;
  }
  if (*(unsigned char *)(v12 + 256))
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
    }
    id v14 = (id)gconnectionLogObj;
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_INFO)) {
      goto LABEL_65;
    }
    uint64_t v18 = *(void *)(a1 + 40) + 256;
    os_log_type_t v34 = "nw_resolver_process_service_result_block_invoke";
    uint64_t v19 = " (ignoring)";
    int v33 = 136447234;
    if (!v9) {
      uint64_t v19 = "";
    }
    __int16 v35 = 2082;
    *(void *)os_log_type_t v36 = v18;
    *(_WORD *)&v36[8] = 2080;
    *(void *)&v36[10] = v11;
    *(_WORD *)&v36[18] = 2080;
    *(void *)&v36[20] = v10;
    *(_WORD *)&v36[28] = 2082;
    *(void *)&v36[30] = v19;
    BOOL v20 = "%{public}s [C%{public}s] Address hint: %s%s%{public}s";
    os_log_type_t v21 = v14;
    uint32_t v22 = 52;
    goto LABEL_64;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v14 = (id)gLogObj;
  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    int v25 = *(_DWORD *)(*(void *)(a1 + 40) + 340);
    BOOL v26 = " (ignoring)";
    if (!v9) {
      BOOL v26 = "";
    }
    int v33 = 136447234;
    os_log_type_t v34 = "nw_resolver_process_service_result_block_invoke";
    __int16 v35 = 1024;
    *(_DWORD *)os_log_type_t v36 = v25;
    *(_WORD *)&v36[4] = 2080;
    *(void *)&v36[6] = v11;
    *(_WORD *)&v36[14] = 2080;
    *(void *)&v36[16] = v10;
    *(_WORD *)&v36[24] = 2082;
    *(void *)&v36[26] = v26;
    BOOL v20 = "%{public}s [R%u] Address hint: %s%s%{public}s";
    os_log_type_t v21 = v14;
    uint32_t v22 = 48;
    goto LABEL_64;
  }
LABEL_65:

LABEL_66:
  if ((v9 & 1) == 0)
  {
    nw_resolver_update_flags_locked(*(NWConcrete_nw_resolver **)(a1 + 40), *(NWConcrete_nw_resolver_service **)(a1 + 32), 2, 0, a2, 1, 0);
    __int16 v29 = *(void **)(a1 + 40);
    uint64_t v28 = *(void **)(a1 + 48);
    uint64_t priority = nw_resolver_service_get_priority(*(NWConcrete_nw_resolver_service **)(a1 + 32));
    uint64_t v31 = nw_resolver_service_copy_ech_config(*(NWConcrete_nw_resolver_service **)(a1 + 32));
    nw_resolver_insert_address(v29, v28, (const sockaddr *)&__dst, priority, v31);

    *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = 1;
  }
  return 1;
}

void sub_1832DB67C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_resolver_update_flags_locked(NWConcrete_nw_resolver *a1, NWConcrete_nw_resolver_service *a2, int a3, int a4, const sockaddr *a5, int a6, int a7)
{
  uint64_t v44 = a1;
  uint64_t v13 = a2;
  id v14 = v44;
  __int16 v15 = *((_WORD *)v44 + 44) & 0xFFEF | (16 * (a3 & 1));
  *((_WORD *)v44 + 44) = v15;
  if ((*((unsigned char *)v44 + 347) & 2) == 0)
  {
    v15 |= 0x80u;
    *((_WORD *)v44 + 44) = v15;
  }
  if (!a5) {
    goto LABEL_32;
  }
  int sa_family = a5->sa_family;
  if ((a3 & 0x40000000) != 0 && sa_family == 2)
  {
    char v17 = 4;
LABEL_10:
    *((unsigned char *)v44 + 346) |= v17;
    int sa_family = a5->sa_family;
    goto LABEL_11;
  }
  if ((a3 & 0x40000000) != 0 && sa_family == 30)
  {
    char v17 = 8;
    goto LABEL_10;
  }
LABEL_11:
  if (a3 < 0)
  {
    if (sa_family == 30)
    {
      if (v13)
      {
        v13->flags |= 0x40u;
        goto LABEL_32;
      }
      __int16 v24 = v15 | 0x40;
    }
    else
    {
      if (sa_family != 2) {
        goto LABEL_32;
      }
      if (v13)
      {
        v13->flags |= 0x20u;
        goto LABEL_32;
      }
      __int16 v24 = v15 | 0x20;
    }
    *((_WORD *)v44 + 44) = v24;
  }
  else
  {
    if (sa_family == 2)
    {
      if (v13 || (v15 & 0x20) == 0) {
        goto LABEL_32;
      }
      int v42 = a6;
      int v43 = a7;
      char v18 = 2;
      __int16 v19 = -38;
    }
    else
    {
      if (v13 || sa_family != 30 || (v15 & 0x40) == 0) {
        goto LABEL_32;
      }
      int v42 = a6;
      int v43 = a7;
      char v18 = 30;
      __int16 v19 = -75;
    }
    *((_WORD *)v44 + 44) = v15 & v19;
    BOOL v20 = v44;
    uint64_t v49 = 0;
    uint64_t v50 = &v49;
    uint64_t v51 = 0x2020000000;
    char v52 = 0;
    BOOL v21 = nw_array_create();
    uint32_t v22 = (atomic_uchar *)v20[18];
    v45[0] = MEMORY[0x1E4F143A8];
    v45[1] = 3221225472;
    v45[2] = ___ZL35nw_resolver_remove_sa_family_lockedP22NWConcrete_nw_resolverh_block_invoke;
    v45[3] = &unk_1E523B418;
    char v48 = v18;
    __int16 v47 = &v49;
    id v23 = (id)v21;
    id v46 = v23;
    nw_array_apply(v22, (uint64_t)v45);
    if (*((unsigned char *)v50 + 24)) {
      objc_storeStrong(v20 + 18, (id)v21);
    }

    _Block_object_dispose(&v49, 8);
    id v14 = v44;
    a6 = v42;
    a7 = v43;
  }
LABEL_32:
  int v25 = *((_DWORD *)v14 + 20);
  if (v25 == 1)
  {
    __int16 v26 = 2056;
  }
  else
  {
    if (v25 != 2) {
      goto LABEL_37;
    }
    __int16 v26 = 1028;
  }
  *((_WORD *)v14 + 44) |= v26;
LABEL_37:
  if (!a4)
  {
    if (!a5) {
      goto LABEL_85;
    }
    if (a5->sa_len > 0x80u) {
      goto LABEL_85;
    }
    int v30 = a5->sa_family;
    if (v30 != 30 && v30 != 2) {
      goto LABEL_85;
    }
    if ((a3 & 2) != 0)
    {
      if (v30 == 30)
      {
        if (a6) {
          __int16 v39 = 512;
        }
        else {
          __int16 v39 = 8;
        }
        *((_WORD *)v44 + 44) |= v39;
        if (v13) {
          v13->flags |= 8u;
        }
      }
      else
      {
        if (a6) {
          __int16 v36 = 256;
        }
        else {
          __int16 v36 = 4;
        }
        *((_WORD *)v44 + 44) |= v36;
        if (v13) {
          v13->flags |= 4u;
        }
      }
      goto LABEL_85;
    }
    if (v30 == 30)
    {
      if (v13)
      {
        unsigned __int16 flags = v13->flags;
        __int16 v32 = -11;
        goto LABEL_75;
      }
      char v38 = v44;
      __int16 v40 = *((_WORD *)v44 + 44);
      __int16 v41 = -11;
    }
    else
    {
      if (v13)
      {
        unsigned __int16 flags = v13->flags;
        __int16 v32 = -6;
LABEL_75:
        v13->unsigned __int16 flags = flags & v32;
        goto LABEL_85;
      }
      char v38 = v44;
      __int16 v40 = *((_WORD *)v44 + 44);
      __int16 v41 = -6;
    }
    __int16 v37 = v40 & v41;
    goto LABEL_84;
  }
  if (a4 == -65554 && a5)
  {
    int v27 = a5->sa_family;
    if (v27 == 30)
    {
      if (v13)
      {
        unsigned __int16 v28 = v13->flags;
        v13->unsigned __int16 flags = v28 | 2;
        if (!a7) {
          goto LABEL_85;
        }
        __int16 v29 = 2050;
        goto LABEL_61;
      }
      __int16 v34 = *((_WORD *)v14 + 44);
      *((_WORD *)v14 + 44) = v34 | 2;
      if (a7)
      {
        __int16 v35 = 2050;
        goto LABEL_72;
      }
    }
    else
    {
      if (v27 != 2) {
        goto LABEL_85;
      }
      if (v13)
      {
        unsigned __int16 v28 = v13->flags;
        v13->unsigned __int16 flags = v28 | 1;
        if (!a7) {
          goto LABEL_85;
        }
        __int16 v29 = 1025;
LABEL_61:
        v13->unsigned __int16 flags = v28 | v29;
        goto LABEL_85;
      }
      __int16 v34 = *((_WORD *)v44 + 44);
      *((_WORD *)v44 + 44) = v34 | 1;
      if (a7)
      {
        __int16 v35 = 1025;
LABEL_72:
        __int16 v37 = v34 | v35;
        char v38 = v44;
LABEL_84:
        *((_WORD *)v38 + 44) = v37;
      }
    }
  }
  else
  {
    if (v13)
    {
      v13->flags |= 3u;
      if ((*((_WORD *)v14 + 44) & 0xC) != 0) {
        goto LABEL_85;
      }
    }
    else
    {
      __int16 v33 = *((_WORD *)v14 + 44) | 3;
      *((_WORD *)v14 + 44) = v33;
      if ((v33 & 0xC) != 0) {
        goto LABEL_85;
      }
    }
    *((_DWORD *)v44 + 21) = a4;
  }
LABEL_85:
}

uint64_t nw_resolver_service_get_port(NWConcrete_nw_resolver_service *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t port = v1->port;
    goto LABEL_3;
  }
  size_t v5 = __nwlog_obj();
  *(_DWORD *)tcp_info buf = 136446210;
  uint64_t v16 = "nw_resolver_service_get_port";
  int v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint64_t v16 = "nw_resolver_service_get_port";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null service", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          uint64_t v16 = "nw_resolver_service_get_port";
          __int16 v17 = 2082;
          char v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null service, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint64_t v16 = "nw_resolver_service_get_port";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null service, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint64_t v16 = "nw_resolver_service_get_port";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null service, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t port = 0;
LABEL_3:

  return port;
}

uint64_t ___ZL41nw_resolver_create_dns_getaddrinfo_lockedP22NWConcrete_nw_resolverP30NWConcrete_nw_resolver_service_block_invoke_214(void *a1, uint64_t a2, void *a3)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  BOOL v4 = a3;
  size_t v5 = v4;
  if (!v4)
  {
    uint32_t v22 = __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    __int16 v41 = "nw_resolver_service_is_alias";
    id v23 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v38 = 0;
    if (!__nwlog_fault(v23, &type, &v38)) {
      goto LABEL_26;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int16 v24 = __nwlog_obj();
      os_log_type_t v25 = type;
      if (os_log_type_enabled(v24, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        __int16 v41 = "nw_resolver_service_is_alias";
        _os_log_impl(&dword_1830D4000, v24, v25, "%{public}s called with null service", buf, 0xCu);
      }
    }
    else if (v38)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __int16 v24 = __nwlog_obj();
      os_log_type_t v27 = type;
      BOOL v28 = os_log_type_enabled(v24, type);
      if (backtrace_string)
      {
        if (v28)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          __int16 v41 = "nw_resolver_service_is_alias";
          __int16 v42 = 2082;
          int v43 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v24, v27, "%{public}s called with null service, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_26:
        if (v23) {
          free(v23);
        }
        int v30 = __nwlog_obj();
        *(_DWORD *)tcp_info buf = 136446210;
        __int16 v41 = "nw_resolver_service_host_matches_origin";
        uint64_t v31 = (char *)_os_log_send_and_compose_impl();

        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v38 = 0;
        if (!__nwlog_fault(v31, &type, &v38)) {
          goto LABEL_44;
        }
        if (type == OS_LOG_TYPE_FAULT)
        {
          __int16 v32 = __nwlog_obj();
          os_log_type_t v33 = type;
          if (os_log_type_enabled(v32, type))
          {
            *(_DWORD *)tcp_info buf = 136446210;
            __int16 v41 = "nw_resolver_service_host_matches_origin";
            _os_log_impl(&dword_1830D4000, v32, v33, "%{public}s called with null service", buf, 0xCu);
          }
        }
        else if (v38)
        {
          __int16 v34 = (char *)__nw_create_backtrace_string();
          __int16 v32 = __nwlog_obj();
          os_log_type_t v35 = type;
          BOOL v36 = os_log_type_enabled(v32, type);
          if (v34)
          {
            if (v36)
            {
              *(_DWORD *)tcp_info buf = 136446466;
              __int16 v41 = "nw_resolver_service_host_matches_origin";
              __int16 v42 = 2082;
              int v43 = v34;
              _os_log_impl(&dword_1830D4000, v32, v35, "%{public}s called with null service, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(v34);
            goto LABEL_44;
          }
          if (v36)
          {
            *(_DWORD *)tcp_info buf = 136446210;
            __int16 v41 = "nw_resolver_service_host_matches_origin";
            _os_log_impl(&dword_1830D4000, v32, v35, "%{public}s called with null service, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          __int16 v32 = __nwlog_obj();
          os_log_type_t v37 = type;
          if (os_log_type_enabled(v32, type))
          {
            *(_DWORD *)tcp_info buf = 136446210;
            __int16 v41 = "nw_resolver_service_host_matches_origin";
            _os_log_impl(&dword_1830D4000, v32, v37, "%{public}s called with null service, backtrace limit exceeded", buf, 0xCu);
          }
        }

LABEL_44:
        if (v31) {
          free(v31);
        }
        goto LABEL_9;
      }
      if (v28)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        __int16 v41 = "nw_resolver_service_is_alias";
        _os_log_impl(&dword_1830D4000, v24, v27, "%{public}s called with null service, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __int16 v24 = __nwlog_obj();
      os_log_type_t v29 = type;
      if (os_log_type_enabled(v24, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        __int16 v41 = "nw_resolver_service_is_alias";
        _os_log_impl(&dword_1830D4000, v24, v29, "%{public}s called with null service, backtrace limit exceeded", buf, 0xCu);
      }
    }

    goto LABEL_26;
  }
  int v6 = v4[16];

  if (v6)
  {
    uint64_t v7 = v5;
    char v8 = *((unsigned char *)v7 + 48);

    if ((v8 & 2) != 0)
    {
      int v9 = v7;
      char v10 = *((unsigned char *)v7 + 48);

      if ((v10 & 4) == 0)
      {
        unsigned int port = nw_resolver_service_get_port(v9);
        uint64_t v12 = a1[8];
        *(_WORD *)(v12 + 2) = __rev16(port);
        char v13 = (void *)a1[4];
        id v14 = (void *)a1[5];
        uint64_t priority = nw_resolver_service_get_priority(v9);
        uint64_t v16 = nw_resolver_service_copy_ech_config(v9);
        nw_resolver_insert_address(v13, v14, (const sockaddr *)v12, priority, v16);
LABEL_8:

        goto LABEL_9;
      }
      unsigned int v17 = nw_resolver_service_get_priority(v9);
      uint64_t v18 = *(void *)(a1[6] + 8);
      if (v17 <= (unsigned __int16)(*(_WORD *)(v18 + 24) - 1))
      {
        *(_WORD *)(v18 + 24) = v17;
        uint64_t v19 = nw_resolver_service_copy_ech_config(v9);
        uint64_t v20 = *(void *)(a1[7] + 8);
        uint64_t v16 = *(OS_dispatch_data **)(v20 + 40);
        *(void *)(v20 + 40) = v19;
        goto LABEL_8;
      }
    }
  }
LABEL_9:

  return 1;
}

void sub_1832DC2CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_resolver_service_get_priority(NWConcrete_nw_resolver_service *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t port = v1->port;
    goto LABEL_3;
  }
  size_t v5 = __nwlog_obj();
  *(_DWORD *)tcp_info buf = 136446210;
  uint64_t v16 = "nw_resolver_service_get_priority";
  int v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint64_t v16 = "nw_resolver_service_get_priority";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null service", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          uint64_t v16 = "nw_resolver_service_get_priority";
          __int16 v17 = 2082;
          uint64_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null service, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint64_t v16 = "nw_resolver_service_get_priority";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null service, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint64_t v16 = "nw_resolver_service_get_priority";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null service, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t port = 0;
LABEL_3:

  return port;
}

OS_dispatch_data *nw_resolver_service_copy_ech_config(NWConcrete_nw_resolver_service *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = v1->ech_config;
    goto LABEL_3;
  }
  size_t v5 = __nwlog_obj();
  *(_DWORD *)tcp_info buf = 136446210;
  uint64_t v16 = "nw_resolver_service_copy_ech_config";
  int v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint64_t v16 = "nw_resolver_service_copy_ech_config";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null service", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          uint64_t v16 = "nw_resolver_service_copy_ech_config";
          __int16 v17 = 2082;
          uint64_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null service, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint64_t v16 = "nw_resolver_service_copy_ech_config";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null service, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint64_t v16 = "nw_resolver_service_copy_ech_config";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null service, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

void nw_protocol_disconnected(void *a1, uint64_t a2)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v2 = a2;
    uint64_t v3 = (uint64_t)a1;
    BOOL v4 = (void *)a1[5];
    if (v4 == &nw_protocol_ref_counted_handle)
    {
      uint64_t v5 = a1[11];
      if (v5) {
        a1[11] = v5 + 1;
      }
    }
    if (a2)
    {
      int v6 = *(void **)(a2 + 40);
      if (v6 == &nw_protocol_ref_counted_handle)
      {
        uint64_t v7 = *(void *)(a2 + 88);
        if (v7) {
          *(void *)(a2 + 88) = v7 + 1;
        }
      }
      uint64_t v8 = a1[3];
      if (v8)
      {
        int v9 = *(void (**)(void *, uint64_t))(v8 + 48);
        if (v9)
        {
          v9(a1, a2);
          goto LABEL_12;
        }
      }
      __nwlog_obj();
      uint64_t v18 = *(const char **)(v3 + 16);
      *(_DWORD *)tcp_info buf = 136446722;
      __int16 v42 = "__nw_protocol_disconnected";
      if (!v18) {
        uint64_t v18 = "invalid";
      }
      __int16 v43 = 2082;
      uint64_t v44 = (void *)v18;
      __int16 v45 = 2048;
      uint64_t v46 = v3;
      uint64_t v19 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v39 = 0;
      if (__nwlog_fault(v19, &type, &v39))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          uint64_t v20 = __nwlog_obj();
          os_log_type_t v21 = type;
          if (!os_log_type_enabled(v20, type)) {
            goto LABEL_77;
          }
          uint32_t v22 = *(const char **)(v3 + 16);
          if (!v22) {
            uint32_t v22 = "invalid";
          }
          *(_DWORD *)tcp_info buf = 136446722;
          __int16 v42 = "__nw_protocol_disconnected";
          __int16 v43 = 2082;
          uint64_t v44 = (void *)v22;
          __int16 v45 = 2048;
          uint64_t v46 = v3;
          id v23 = "%{public}s protocol %{public}s (%p) has invalid disconnected callback";
          goto LABEL_76;
        }
        if (!v39)
        {
          uint64_t v20 = __nwlog_obj();
          os_log_type_t v21 = type;
          if (!os_log_type_enabled(v20, type)) {
            goto LABEL_77;
          }
          os_log_type_t v37 = *(const char **)(v3 + 16);
          if (!v37) {
            os_log_type_t v37 = "invalid";
          }
          *(_DWORD *)tcp_info buf = 136446722;
          __int16 v42 = "__nw_protocol_disconnected";
          __int16 v43 = 2082;
          uint64_t v44 = (void *)v37;
          __int16 v45 = 2048;
          uint64_t v46 = v3;
          id v23 = "%{public}s protocol %{public}s (%p) has invalid disconnected callback, backtrace limit exceeded";
          goto LABEL_76;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        uint64_t v20 = __nwlog_obj();
        os_log_type_t v21 = type;
        BOOL v31 = os_log_type_enabled(v20, type);
        if (backtrace_string)
        {
          if (v31)
          {
            __int16 v32 = *(const char **)(v3 + 16);
            if (!v32) {
              __int16 v32 = "invalid";
            }
            *(_DWORD *)tcp_info buf = 136446978;
            __int16 v42 = "__nw_protocol_disconnected";
            __int16 v43 = 2082;
            uint64_t v44 = (void *)v32;
            __int16 v45 = 2048;
            uint64_t v46 = v3;
            __int16 v47 = 2082;
            char v48 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v20, v21, "%{public}s protocol %{public}s (%p) has invalid disconnected callback, dumping backtrace:%{public}s", buf, 0x2Au);
          }
          free(backtrace_string);
          goto LABEL_77;
        }
        if (v31)
        {
          char v38 = *(const char **)(v3 + 16);
          if (!v38) {
            char v38 = "invalid";
          }
          *(_DWORD *)tcp_info buf = 136446722;
          __int16 v42 = "__nw_protocol_disconnected";
          __int16 v43 = 2082;
          uint64_t v44 = (void *)v38;
          __int16 v45 = 2048;
          uint64_t v46 = v3;
          id v23 = "%{public}s protocol %{public}s (%p) has invalid disconnected callback, no backtrace";
LABEL_76:
          _os_log_impl(&dword_1830D4000, v20, v21, v23, buf, 0x20u);
        }
      }
LABEL_77:
      if (v19) {
        free(v19);
      }
LABEL_12:
      if (v6 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(v2 + 40) == &nw_protocol_ref_counted_handle)
      {
        uint64_t v14 = *(void *)(v2 + 88);
        if (v14)
        {
          uint64_t v15 = v14 - 1;
          *(void *)(v2 + 88) = v15;
          if (!v15)
          {
            uint64_t v16 = *(void (***)(void))(v2 + 64);
            if (v16)
            {
              *(void *)(v2 + 64) = 0;
              v16[2](v16);
              _Block_release(v16);
            }
            if (*(unsigned char *)(v2 + 72))
            {
              __int16 v17 = *(const void **)(v2 + 64);
              if (v17) {
                _Block_release(v17);
              }
            }
LABEL_32:
            free((void *)v2);
          }
        }
      }
LABEL_14:
      if (v4 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(v3 + 40) == &nw_protocol_ref_counted_handle)
      {
        uint64_t v10 = *(void *)(v3 + 88);
        if (v10)
        {
          uint64_t v11 = v10 - 1;
          *(void *)(v3 + 88) = v11;
          if (!v11)
          {
            os_log_type_t v12 = *(void (***)(void))(v3 + 64);
            if (v12)
            {
              *(void *)(v3 + 64) = 0;
              v12[2](v12);
              _Block_release(v12);
            }
            if (*(unsigned char *)(v3 + 72))
            {
              char v13 = *(const void **)(v3 + 64);
              if (v13) {
                _Block_release(v13);
              }
            }
            goto LABEL_24;
          }
        }
      }
      return;
    }
    __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    __int16 v42 = "__nw_protocol_disconnected";
    uint64_t v2 = _os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v39 = 0;
    if (__nwlog_fault((const char *)v2, &type, &v39))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v27 = __nwlog_obj();
        os_log_type_t v28 = type;
        if (!os_log_type_enabled(v27, type)) {
          goto LABEL_91;
        }
        *(_DWORD *)tcp_info buf = 136446210;
        __int16 v42 = "__nw_protocol_disconnected";
        os_log_type_t v29 = "%{public}s called with null other_protocol";
        goto LABEL_90;
      }
      if (!v39)
      {
        os_log_type_t v27 = __nwlog_obj();
        os_log_type_t v28 = type;
        if (!os_log_type_enabled(v27, type)) {
          goto LABEL_91;
        }
        *(_DWORD *)tcp_info buf = 136446210;
        __int16 v42 = "__nw_protocol_disconnected";
        os_log_type_t v29 = "%{public}s called with null other_protocol, backtrace limit exceeded";
        goto LABEL_90;
      }
      os_log_type_t v35 = (char *)__nw_create_backtrace_string();
      os_log_type_t v27 = __nwlog_obj();
      os_log_type_t v28 = type;
      BOOL v36 = os_log_type_enabled(v27, type);
      if (v35)
      {
        if (v36)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          __int16 v42 = "__nw_protocol_disconnected";
          __int16 v43 = 2082;
          uint64_t v44 = v35;
          _os_log_impl(&dword_1830D4000, v27, v28, "%{public}s called with null other_protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v35);
        if (v2) {
          goto LABEL_32;
        }
        goto LABEL_14;
      }
      if (v36)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        __int16 v42 = "__nw_protocol_disconnected";
        os_log_type_t v29 = "%{public}s called with null other_protocol, no backtrace";
LABEL_90:
        _os_log_impl(&dword_1830D4000, v27, v28, v29, buf, 0xCu);
      }
    }
LABEL_91:
    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_32;
  }
  __nwlog_obj();
  *(_DWORD *)tcp_info buf = 136446210;
  __int16 v42 = "__nw_protocol_disconnected";
  uint64_t v3 = _os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v39 = 0;
  if (__nwlog_fault((const char *)v3, &type, &v39))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int16 v24 = __nwlog_obj();
      os_log_type_t v25 = type;
      if (!os_log_type_enabled(v24, type)) {
        goto LABEL_86;
      }
      *(_DWORD *)tcp_info buf = 136446210;
      __int16 v42 = "__nw_protocol_disconnected";
      __int16 v26 = "%{public}s called with null protocol";
    }
    else if (v39)
    {
      os_log_type_t v33 = (char *)__nw_create_backtrace_string();
      __int16 v24 = __nwlog_obj();
      os_log_type_t v25 = type;
      BOOL v34 = os_log_type_enabled(v24, type);
      if (v33)
      {
        if (v34)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          __int16 v42 = "__nw_protocol_disconnected";
          __int16 v43 = 2082;
          uint64_t v44 = v33;
          _os_log_impl(&dword_1830D4000, v24, v25, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v33);
        if (v3) {
          goto LABEL_24;
        }
        return;
      }
      if (!v34) {
        goto LABEL_86;
      }
      *(_DWORD *)tcp_info buf = 136446210;
      __int16 v42 = "__nw_protocol_disconnected";
      __int16 v26 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      __int16 v24 = __nwlog_obj();
      os_log_type_t v25 = type;
      if (!os_log_type_enabled(v24, type)) {
        goto LABEL_86;
      }
      *(_DWORD *)tcp_info buf = 136446210;
      __int16 v42 = "__nw_protocol_disconnected";
      __int16 v26 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    _os_log_impl(&dword_1830D4000, v24, v25, v26, buf, 0xCu);
  }
LABEL_86:
  if (v3) {
LABEL_24:
  }
    free((void *)v3);
}

void nw_protocol_default_disconnected(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    default_input_handler = a1->default_input_handler;
    if (default_input_handler)
    {
      callbacks = default_input_handler->callbacks;
      if (callbacks)
      {
        disconnected = (void (*)(void))callbacks->disconnected;
        if (disconnected)
        {
          disconnected();
        }
      }
    }
    return;
  }
  __nwlog_obj();
  *(_DWORD *)tcp_info buf = 136446210;
  uint64_t v14 = "nw_protocol_default_disconnected";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (__nwlog_fault(v5, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (!os_log_type_enabled(v6, type)) {
        goto LABEL_22;
      }
      *(_DWORD *)tcp_info buf = 136446210;
      uint64_t v14 = "nw_protocol_default_disconnected";
      uint64_t v8 = "%{public}s called with null protocol";
      goto LABEL_21;
    }
    if (!v11)
    {
      int v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (!os_log_type_enabled(v6, type)) {
        goto LABEL_22;
      }
      *(_DWORD *)tcp_info buf = 136446210;
      uint64_t v14 = "nw_protocol_default_disconnected";
      uint64_t v8 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_21;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    int v6 = __nwlog_obj();
    os_log_type_t v7 = type;
    BOOL v10 = os_log_type_enabled(v6, type);
    if (backtrace_string)
    {
      if (v10)
      {
        *(_DWORD *)tcp_info buf = 136446466;
        uint64_t v14 = "nw_protocol_default_disconnected";
        __int16 v15 = 2082;
        uint64_t v16 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_22;
    }
    if (v10)
    {
      *(_DWORD *)tcp_info buf = 136446210;
      uint64_t v14 = "nw_protocol_default_disconnected";
      uint64_t v8 = "%{public}s called with null protocol, no backtrace";
LABEL_21:
      _os_log_impl(&dword_1830D4000, v6, v7, v8, buf, 0xCu);
    }
  }
LABEL_22:
  if (v5) {
    free(v5);
  }
}

void nw_quic_connection_set_max_streams_update_block(void *a1, void *a2, void *a3)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  if (nw_protocol_options_is_quic_connection(v5))
  {
    v16[0] = MEMORY[0x1E4F143A8];
    v16[1] = 3221225472;
    v16[2] = __nw_quic_connection_set_max_streams_update_block_block_invoke;
    v16[3] = &unk_1E52491D8;
    id v18 = v6;
    id v17 = v7;
    nw_protocol_options_access_handle(v5, v16);

    goto LABEL_3;
  }
  uint64_t v8 = __nwlog_obj();
  *(_DWORD *)tcp_info buf = 136446210;
  uint32_t v22 = "nw_quic_connection_set_max_streams_update_block";
  int v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v19 = 0;
  if (__nwlog_fault(v9, &type, &v19))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint32_t v22 = "nw_quic_connection_set_max_streams_update_block";
        _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null nw_protocol_options_is_quic_connection(options)", buf, 0xCu);
      }
    }
    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v10 = __nwlog_obj();
      os_log_type_t v13 = type;
      BOOL v14 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          uint32_t v22 = "nw_quic_connection_set_max_streams_update_block";
          __int16 v23 = 2082;
          __int16 v24 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v14)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint32_t v22 = "nw_quic_connection_set_max_streams_update_block";
        _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v10 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint32_t v22 = "nw_quic_connection_set_max_streams_update_block";
        _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v9) {
    free(v9);
  }
LABEL_3:
}

void sub_1832DD54C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  _Unwind_Resume(a1);
}

uint64_t nw_path_get_tso_max_segment_size_v6(void *a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (!v1)
  {
    id v6 = __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    id v18 = "nw_path_get_tso_max_segment_size_v6";
    id v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v15 = 0;
    if (__nwlog_fault(v7, &type, &v15))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v8 = __nwlog_obj();
        os_log_type_t v9 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          id v18 = "nw_path_get_tso_max_segment_size_v6";
          _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null path", buf, 0xCu);
        }
      }
      else if (v15)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        uint64_t v8 = __nwlog_obj();
        os_log_type_t v11 = type;
        BOOL v12 = os_log_type_enabled(v8, type);
        if (backtrace_string)
        {
          if (v12)
          {
            *(_DWORD *)tcp_info buf = 136446466;
            id v18 = "nw_path_get_tso_max_segment_size_v6";
            __int16 v19 = 2082;
            uint64_t v20 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_21;
        }
        if (v12)
        {
          *(_DWORD *)tcp_info buf = 136446210;
          id v18 = "nw_path_get_tso_max_segment_size_v6";
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null path, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        uint64_t v8 = __nwlog_obj();
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          id v18 = "nw_path_get_tso_max_segment_size_v6";
          _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_21:
    if (v7) {
      free(v7);
    }
    goto LABEL_23;
  }
  if (!nw_path_network_is_satisfied_update_reason(v1, 0) || (direct = v2->direct) == 0)
  {
LABEL_23:
    uint64_t v5 = 0;
    goto LABEL_24;
  }
  BOOL v4 = direct;
  uint64_t v5 = *((unsigned int *)v4 + 17);

LABEL_24:
  return v5;
}

void sub_1832DD838(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

const char *nw_parameters_get_url(void *a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (!v1)
  {
    uint64_t v5 = __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    id v17 = "nw_parameters_get_url";
    id v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (__nwlog_fault(v6, &type, &v14))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        id v7 = __nwlog_obj();
        os_log_type_t v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          id v17 = "nw_parameters_get_url";
          _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
        }
      }
      else if (v14)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        id v7 = __nwlog_obj();
        os_log_type_t v10 = type;
        BOOL v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)tcp_info buf = 136446466;
            id v17 = "nw_parameters_get_url";
            __int16 v18 = 2082;
            __int16 v19 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_20;
        }
        if (v11)
        {
          *(_DWORD *)tcp_info buf = 136446210;
          id v17 = "nw_parameters_get_url";
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        id v7 = __nwlog_obj();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          id v17 = "nw_parameters_get_url";
          _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_20:
    if (v6) {
      free(v6);
    }
    goto LABEL_22;
  }
  uint64_t v3 = v1[25];
  if (!v3)
  {
LABEL_22:
    url = 0;
    goto LABEL_23;
  }
  url = nw_endpoint_get_url(v3);
LABEL_23:

  return url;
}

void sub_1832DDB6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

xpc_object_t nw_data_transfer_report_copy_dictionary(void *a1)
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
    *(void *)tcp_info buf = 0;
    *(void *)&sockaddr buf[8] = buf;
    int v68 = 0;
    *(void *)&buf[16] = 0x2020000000;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 3221225472;
    aBlock[2] = __nw_data_transfer_report_copy_dictionary_block_invoke;
    aBlock[3] = &unk_1E524B978;
    os_log_type_t v64 = buf;
    uint64_t v3 = v1;
    unsigned int v63 = v3;
    BOOL v4 = (void (**)(void))_Block_copy(aBlock);
    os_unfair_lock_lock(v1 + 10);
    v4[2](v4);
    os_unfair_lock_unlock(v1 + 10);

    if (*(_DWORD *)(*(void *)&buf[8] + 24) == 2)
    {
      uint64_t v5 = *(void *)&v3[4]._os_unfair_lock_opaque;
      if (v5) {
        xpc_dictionary_set_uint64(v2, "duration_milliseconds", v5);
      }
      if (v3[11]._os_unfair_lock_opaque)
      {
        xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
        id v7 = v6;
        uint64_t v8 = *(void *)&v3[14]._os_unfair_lock_opaque;
        if (v8) {
          xpc_dictionary_set_uint64(v6, "total_received_ip_packet_count", v8);
        }
        uint64_t v9 = *(void *)&v3[58]._os_unfair_lock_opaque;
        if (v9) {
          xpc_dictionary_set_uint64(v7, "incremental_received_ip_packet_count", v9);
        }
        uint64_t v10 = *(void *)&v3[16]._os_unfair_lock_opaque;
        if (v10) {
          xpc_dictionary_set_uint64(v7, "total_received_ip_ect1_packet_count", v10);
        }
        uint64_t v11 = *(void *)&v3[60]._os_unfair_lock_opaque;
        if (v11) {
          xpc_dictionary_set_uint64(v7, "incremental_received_ip_ect1_packet_count", v11);
        }
        uint64_t v12 = *(void *)&v3[18]._os_unfair_lock_opaque;
        if (v12) {
          xpc_dictionary_set_uint64(v7, "total_received_ip_ect0_packet_count", v12);
        }
        uint64_t v13 = *(void *)&v3[62]._os_unfair_lock_opaque;
        if (v13) {
          xpc_dictionary_set_uint64(v7, "incremental_received_ip_ect0_packet_count", v13);
        }
        uint64_t v14 = *(void *)&v3[20]._os_unfair_lock_opaque;
        if (v14) {
          xpc_dictionary_set_uint64(v7, "total_received_ip_ce_packet_count", v14);
        }
        uint64_t v15 = *(void *)&v3[64]._os_unfair_lock_opaque;
        if (v15) {
          xpc_dictionary_set_uint64(v7, "incremental_received_ip_ce_packet_count", v15);
        }
        uint64_t v16 = *(void *)&v3[22]._os_unfair_lock_opaque;
        if (v16) {
          xpc_dictionary_set_uint64(v7, "total_sent_ip_packet_count", v16);
        }
        uint64_t v17 = *(void *)&v3[66]._os_unfair_lock_opaque;
        if (v17) {
          xpc_dictionary_set_uint64(v7, "incremental_sent_ip_packet_count", v17);
        }
        uint64_t v18 = *(void *)&v3[24]._os_unfair_lock_opaque;
        if (v18) {
          xpc_dictionary_set_uint64(v7, "total_received_transport_byte_count", v18);
        }
        uint64_t v19 = *(void *)&v3[68]._os_unfair_lock_opaque;
        if (v19) {
          xpc_dictionary_set_uint64(v7, "incremental_received_transport_byte_count", v19);
        }
        uint64_t v20 = *(void *)&v3[26]._os_unfair_lock_opaque;
        if (v20) {
          xpc_dictionary_set_uint64(v7, "total_received_transport_duplicate_byte_count", v20);
        }
        uint64_t v21 = *(void *)&v3[70]._os_unfair_lock_opaque;
        if (v21) {
          xpc_dictionary_set_uint64(v7, "incremental_received_transport_duplicate_byte_count", v21);
        }
        uint64_t v22 = *(void *)&v3[28]._os_unfair_lock_opaque;
        if (v22) {
          xpc_dictionary_set_uint64(v7, "total_received_transport_out_of_order_byte_count", v22);
        }
        uint64_t v23 = *(void *)&v3[72]._os_unfair_lock_opaque;
        if (v23) {
          xpc_dictionary_set_uint64(v7, "incremental_received_transport_out_of_order_byte_count", v23);
        }
        uint64_t v24 = *(void *)&v3[30]._os_unfair_lock_opaque;
        if (v24) {
          xpc_dictionary_set_uint64(v7, "total_sent_transport_byte_count", v24);
        }
        uint64_t v25 = *(void *)&v3[74]._os_unfair_lock_opaque;
        if (v25) {
          xpc_dictionary_set_uint64(v7, "incremental_sent_transport_byte_count", v25);
        }
        uint64_t v26 = *(void *)&v3[32]._os_unfair_lock_opaque;
        if (v26) {
          xpc_dictionary_set_uint64(v7, "total_sent_transport_retransmitted_byte_count", v26);
        }
        uint64_t v27 = *(void *)&v3[76]._os_unfair_lock_opaque;
        if (v27) {
          xpc_dictionary_set_uint64(v7, "incremental_sent_transport_retransmitted_byte_count", v27);
        }
        uint64_t v28 = *(void *)&v3[34]._os_unfair_lock_opaque;
        if (v28) {
          xpc_dictionary_set_uint64(v7, "total_sent_transport_ecn_capable_packet_count", v28);
        }
        uint64_t v29 = *(void *)&v3[78]._os_unfair_lock_opaque;
        if (v29) {
          xpc_dictionary_set_uint64(v7, "incremental_sent_transport_ecn_capable_packet_count", v29);
        }
        uint64_t v30 = *(void *)&v3[36]._os_unfair_lock_opaque;
        if (v30) {
          xpc_dictionary_set_uint64(v7, "total_sent_transport_ecn_capable_acked_packet_count", v30);
        }
        uint64_t v31 = *(void *)&v3[80]._os_unfair_lock_opaque;
        if (v31) {
          xpc_dictionary_set_uint64(v7, "incremental_sent_transport_ecn_capable_acked_packet_count", v31);
        }
        uint64_t v32 = *(void *)&v3[38]._os_unfair_lock_opaque;
        if (v32) {
          xpc_dictionary_set_uint64(v7, "total_sent_transport_ecn_capable_marked_packet_count", v32);
        }
        uint64_t v33 = *(void *)&v3[82]._os_unfair_lock_opaque;
        if (v33) {
          xpc_dictionary_set_uint64(v7, "incremental_sent_transport_ecn_capable_marked_packet_count", v33);
        }
        uint64_t v34 = *(void *)&v3[40]._os_unfair_lock_opaque;
        if (v34) {
          xpc_dictionary_set_uint64(v7, "total_sent_transport_ecn_capable_lost_packet_count", v34);
        }
        uint64_t v35 = *(void *)&v3[84]._os_unfair_lock_opaque;
        if (v35) {
          xpc_dictionary_set_uint64(v7, "incremental_sent_transport_ecn_capable_lost_packet_count", v35);
        }
        uint64_t v36 = *(void *)&v3[42]._os_unfair_lock_opaque;
        if (v36) {
          xpc_dictionary_set_uint64(v7, "total_transport_smoothed_rtt_milliseconds", v36);
        }
        uint64_t v37 = *(void *)&v3[86]._os_unfair_lock_opaque;
        if (v37) {
          xpc_dictionary_set_uint64(v7, "incremental_transport_smoothed_rtt_milliseconds", v37);
        }
        uint64_t v38 = *(void *)&v3[44]._os_unfair_lock_opaque;
        if (v38) {
          xpc_dictionary_set_uint64(v7, "total_transport_minimum_rtt_milliseconds", v38);
        }
        uint64_t v39 = *(void *)&v3[88]._os_unfair_lock_opaque;
        if (v39) {
          xpc_dictionary_set_uint64(v7, "incremental_transport_minimum_rtt_milliseconds", v39);
        }
        uint64_t v40 = *(void *)&v3[46]._os_unfair_lock_opaque;
        if (v40) {
          xpc_dictionary_set_uint64(v7, "total_transport_current_rtt_milliseconds", v40);
        }
        uint64_t v41 = *(void *)&v3[90]._os_unfair_lock_opaque;
        if (v41) {
          xpc_dictionary_set_uint64(v7, "incremental_transport_current_rtt_milliseconds", v41);
        }
        uint64_t v42 = *(void *)&v3[48]._os_unfair_lock_opaque;
        if (v42) {
          xpc_dictionary_set_uint64(v7, "total_transport_rtt_variance", v42);
        }
        uint64_t v43 = *(void *)&v3[92]._os_unfair_lock_opaque;
        if (v43) {
          xpc_dictionary_set_uint64(v7, "incremental_transport_rtt_variance", v43);
        }
        uint64_t v44 = *(void *)&v3[50]._os_unfair_lock_opaque;
        if (v44) {
          xpc_dictionary_set_uint64(v7, "total_transport_congestion_window", v44);
        }
        uint64_t v45 = *(void *)&v3[94]._os_unfair_lock_opaque;
        if (v45) {
          xpc_dictionary_set_uint64(v7, "incremental_transport_congestion_window", v45);
        }
        uint64_t v46 = *(void *)&v3[52]._os_unfair_lock_opaque;
        if (v46) {
          xpc_dictionary_set_uint64(v7, "total_transport_slow_start_threshold", v46);
        }
        uint64_t v47 = *(void *)&v3[96]._os_unfair_lock_opaque;
        if (v47) {
          xpc_dictionary_set_uint64(v7, "incremental_transport_slow_start_threshold", v47);
        }
        uint64_t v48 = *(void *)&v3[54]._os_unfair_lock_opaque;
        if (v48) {
          xpc_dictionary_set_uint64(v7, "total_received_application_byte_count", v48);
        }
        uint64_t v49 = *(void *)&v3[98]._os_unfair_lock_opaque;
        if (v49) {
          xpc_dictionary_set_uint64(v7, "incremental_received_application_byte_count", v49);
        }
        uint64_t v50 = *(void *)&v3[56]._os_unfair_lock_opaque;
        if (v50) {
          xpc_dictionary_set_uint64(v7, "total_sent_application_byte_count", v50);
        }
        uint64_t v51 = *(void *)&v3[100]._os_unfair_lock_opaque;
        if (v51) {
          xpc_dictionary_set_uint64(v7, "incremental_sent_application_byte_count", v51);
        }
        char v52 = nw_interface_copy_dictionary(*(void **)&v3[102]._os_unfair_lock_opaque);
        if (v52) {
          xpc_dictionary_set_value(v7, "interface", v52);
        }

        xpc_dictionary_set_value(v2, "primary_path", v7);
      }
    }

    _Block_object_dispose(buf, 8);
    goto LABEL_98;
  }
  os_log_type_t v54 = __nwlog_obj();
  *(_DWORD *)tcp_info buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_data_transfer_report_copy_dictionary";
  uint32_t v55 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v65 = 0;
  if (__nwlog_fault(v55, &type, &v65))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      unsigned int v56 = __nwlog_obj();
      os_log_type_t v57 = type;
      if (os_log_type_enabled(v56, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_data_transfer_report_copy_dictionary";
        _os_log_impl(&dword_1830D4000, v56, v57, "%{public}s called with null report", buf, 0xCu);
      }
    }
    else if (v65)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      unsigned int v56 = __nwlog_obj();
      os_log_type_t v59 = type;
      BOOL v60 = os_log_type_enabled(v56, type);
      if (backtrace_string)
      {
        if (v60)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_data_transfer_report_copy_dictionary";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v56, v59, "%{public}s called with null report, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_115;
      }
      if (v60)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_data_transfer_report_copy_dictionary";
        _os_log_impl(&dword_1830D4000, v56, v59, "%{public}s called with null report, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      unsigned int v56 = __nwlog_obj();
      os_log_type_t v61 = type;
      if (os_log_type_enabled(v56, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_data_transfer_report_copy_dictionary";
        _os_log_impl(&dword_1830D4000, v56, v61, "%{public}s called with null report, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_115:
  if (v55) {
    free(v55);
  }
  xpc_object_t v2 = 0;
LABEL_98:

  return v2;
}

void sub_1832DE37C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

xpc_object_t nw_parameters_copy_dictionary(void *a1)
{
  id v1 = a1;
  if (v1)
  {
    xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
    uint64_t v3 = nw_interface_copy_dictionary(*(void **)(*((void *)v1 + 13) + 168));
    if (v3) {
      xpc_dictionary_set_value(v2, "required_interface", v3);
    }
    uint64_t v4 = *((void *)v1 + 13);
    uint64_t v5 = *(unsigned int *)(v4 + 76);
    if (v5)
    {
      xpc_dictionary_set_uint64(v2, "required_interface_type", v5);
      uint64_t v4 = *((void *)v1 + 13);
    }
    xpc_dictionary_set_BOOL(v2, "only_primary_requires_type", (*(_WORD *)(v4 + 100) & 0x20) != 0);
    xpc_object_t v6 = (unsigned int *)*((void *)v1 + 13);
    uint64_t v7 = v6[20];
    if (v7)
    {
      xpc_dictionary_set_uint64(v2, "required_interface_subtype", v7);
      xpc_object_t v6 = (unsigned int *)*((void *)v1 + 13);
    }
    uint64_t v8 = v6[23];
    if (v8)
    {
      xpc_dictionary_set_uint64(v2, "next_hop_required_interface_type", v8);
      xpc_object_t v6 = (unsigned int *)*((void *)v1 + 13);
    }
    uint64_t v9 = v6[24];
    if (v9) {
      xpc_dictionary_set_uint64(v2, "next_hop_required_interface_subtype", v9);
    }
    uint64_t v10 = (const char *)*((void *)v1 + 14);
    if (v10) {
      xpc_dictionary_set_string(v2, "effective_bundle_id", v10);
    }
    long long v39 = *(_OWORD *)(v1 + 40);
    long long v40 = *(_OWORD *)(v1 + 56);
    if ((unint64_t)v39 | *((void *)&v39 + 1) | (unint64_t)v40 | *((void *)&v40 + 1)) {
      xpc_dictionary_set_data(v2, "effective_audit_token", v1 + 40, 0x20uLL);
    }
    uint64_t v11 = *((void *)v1 + 13);
    uint64_t v12 = *(const char **)(v11 + 112);
    if (v12)
    {
      xpc_dictionary_set_string(v2, "account_id", v12);
      uint64_t v11 = *((void *)v1 + 13);
    }
    url = *(const char **)(v11 + 120);
    if (url) {
      xpc_dictionary_set_string(v2, "attribution_context", url);
    }
    uint64_t v14 = *((void *)v1 + 25);
    if (v14)
    {
      url = nw_endpoint_get_url(v14);
      if (url) {
        xpc_dictionary_set_string(v2, "url", url);
      }
    }
    uint64_t v15 = *((void *)v1 + 26);
    if (v15)
    {
      url = nw_endpoint_get_url(v15);
      if (url) {
        xpc_dictionary_set_string(v2, "main_document_url", url);
      }
    }
    uint64_t v16 = objc_msgSend(*(id *)(*((void *)v1 + 13) + 160), "copyDictionary", url, v39, v40);
    if (v16) {
      xpc_dictionary_set_value(v2, "local_address", v16);
    }
    if (v1[97]) {
      xpc_dictionary_set_BOOL(v2, "reuse_local_address", 1);
    }
    xpc_dictionary_set_value(v2, "tls_session_id", *((xpc_object_t *)v1 + 16));
    uint64_t v17 = *((void *)v1 + 13);
    uint64_t v18 = *(unsigned int *)(v17 + 72);
    if (v18)
    {
      xpc_dictionary_set_uint64(v2, "traffic_class", v18);
      uint64_t v17 = *((void *)v1 + 13);
    }
    int64_t v19 = *(int *)(v17 + 64);
    if (v19)
    {
      xpc_dictionary_set_int64(v2, "pid", v19);
      uint64_t v17 = *((void *)v1 + 13);
    }
    int64_t v20 = *(unsigned int *)(v17 + 68);
    if (v20)
    {
      xpc_dictionary_set_int64(v2, "uid", v20);
      uint64_t v17 = *((void *)v1 + 13);
    }
    xpc_dictionary_set_uuid(v2, "proc_uuid", (const unsigned __int8 *)(v17 + 8));
    xpc_dictionary_set_uuid(v2, "e_proc_uuid", (const unsigned __int8 *)(*((void *)v1 + 13) + 24));
    xpc_dictionary_set_uuid(v2, "persona_id", (const unsigned __int8 *)(*((void *)v1 + 13) + 40));
    xpc_dictionary_set_uuid(v2, "parent_id", (const unsigned __int8 *)v1 + 8);
    if (v1[96]) {
      xpc_dictionary_set_BOOL(v2, "dry_run", 1);
    }
    uint64_t v21 = *((void *)v1 + 13);
    __int16 v22 = *(_WORD *)(v21 + 100);
    if (v22)
    {
      xpc_dictionary_set_BOOL(v2, "prohibit_expensive", 1);
      uint64_t v21 = *((void *)v1 + 13);
      __int16 v22 = *(_WORD *)(v21 + 100);
      if ((v22 & 2) == 0)
      {
LABEL_40:
        if ((v22 & 4) == 0) {
          goto LABEL_41;
        }
        goto LABEL_47;
      }
    }
    else if ((v22 & 2) == 0)
    {
      goto LABEL_40;
    }
    xpc_dictionary_set_BOOL(v2, "prohibit_constrained", 1);
    uint64_t v21 = *((void *)v1 + 13);
    __int16 v22 = *(_WORD *)(v21 + 100);
    if ((v22 & 4) == 0)
    {
LABEL_41:
      if ((v22 & 8) == 0) {
        goto LABEL_42;
      }
      goto LABEL_48;
    }
LABEL_47:
    xpc_dictionary_set_BOOL(v2, "allow_ultra_constrained", 1);
    uint64_t v21 = *((void *)v1 + 13);
    if ((*(_WORD *)(v21 + 100) & 8) == 0)
    {
LABEL_42:
      uint64_t v23 = *(xpc_object_t **)(v21 + 176);
      if (!v23)
      {
LABEL_50:
        xpc_dictionary_set_value(v2, "extra_parent_ids", *((xpc_object_t *)v1 + 17));
        uint64_t v24 = *((void *)v1 + 12);
        if ((v24 & 0x200000000000) != 0)
        {
          xpc_dictionary_set_BOOL(v2, "trust_invalid_certs", 1);
          uint64_t v24 = *((void *)v1 + 12);
          if ((v24 & 0x400000000000) == 0)
          {
LABEL_52:
            if ((v24 & 8) == 0) {
              goto LABEL_54;
            }
            goto LABEL_53;
          }
        }
        else if ((v24 & 0x400000000000) == 0)
        {
          goto LABEL_52;
        }
        xpc_dictionary_set_BOOL(v2, "should_skip_probe_sampling", 1);
        if ((*((void *)v1 + 12) & 8) == 0)
        {
LABEL_54:
          __int16 v25 = *(_WORD *)(*((void *)v1 + 13) + 108);
          if ((v25 & 8) != 0)
          {
            xpc_dictionary_set_BOOL(v2, "use_awdl", 1);
            if ((*(_WORD *)(*((void *)v1 + 13) + 108) & 0x10) == 0)
            {
LABEL_56:
              uint64_t v26 = *((void *)v1 + 12);
              if ((v26 & 0x20) == 0) {
                goto LABEL_58;
              }
              goto LABEL_57;
            }
          }
          else if ((v25 & 0x10) == 0)
          {
            goto LABEL_56;
          }
          xpc_dictionary_set_BOOL(v2, "use_p2p", 1);
          uint64_t v26 = *((void *)v1 + 12);
          if ((v26 & 0x20) == 0)
          {
LABEL_58:
            if ((~(_BYTE)v26 & 0xC0) == 0) {
              xpc_dictionary_set_BOOL(v2, "indefinite", 1);
            }
            __int16 v27 = *(_WORD *)(*((void *)v1 + 13) + 108);
            if ((v27 & 2) != 0)
            {
              xpc_dictionary_set_BOOL(v2, "no_proxy", 1);
              __int16 v27 = *(_WORD *)(*((void *)v1 + 13) + 108);
              if ((v27 & 4) == 0)
              {
LABEL_62:
                if ((v27 & 0x20) == 0) {
                  goto LABEL_63;
                }
                goto LABEL_115;
              }
            }
            else if ((v27 & 4) == 0)
            {
              goto LABEL_62;
            }
            xpc_dictionary_set_BOOL(v2, "no_transform", 1);
            if ((*(_WORD *)(*((void *)v1 + 13) + 108) & 0x20) == 0)
            {
LABEL_63:
              if ((v1[97] & 0x80) == 0) {
                goto LABEL_65;
              }
              goto LABEL_64;
            }
LABEL_115:
            xpc_dictionary_set_BOOL(v2, "no_fallback", 1);
            if ((v1[97] & 0x80) == 0)
            {
LABEL_65:
              uint64_t v28 = *(unsigned int *)(*((void *)v1 + 13) + 103);
              if (v28) {
                xpc_dictionary_set_uint64(v2, "multipath_service", v28);
              }
              if (v1[92]) {
                xpc_dictionary_set_uint64(v2, "data_mode", v1[92]);
              }
              uint64_t v29 = *((unsigned int *)v1 + 22);
              if (v29) {
                xpc_dictionary_set_uint64(v2, "sleep_keepalive_interval", v29);
              }
              if ((v1[97] & 8) != 0) {
                xpc_dictionary_set_BOOL(v2, "custom_protocols_only", 1);
              }
              if (*(_WORD *)(*((void *)v1 + 13) + 108))
              {
                xpc_dictionary_set_BOOL(v2, "discretionary", 1);
                uint64_t v30 = *((void *)v1 + 12);
                if ((v30 & 0x4000) == 0)
                {
LABEL_75:
                  if ((v30 & 0x200) == 0) {
                    goto LABEL_76;
                  }
                  goto LABEL_119;
                }
              }
              else
              {
                uint64_t v30 = *((void *)v1 + 12);
                if ((v30 & 0x4000) == 0) {
                  goto LABEL_75;
                }
              }
              xpc_dictionary_set_BOOL(v2, "local_only", 1);
              if ((*((void *)v1 + 12) & 0x200) == 0)
              {
LABEL_76:
                uint64_t v31 = v1[93];
                if (!v1[93]) {
                  goto LABEL_78;
                }
                goto LABEL_77;
              }
LABEL_119:
              xpc_dictionary_set_BOOL(v2, "receive_any_interface", 1);
              uint64_t v31 = v1[93];
              if (!v1[93])
              {
LABEL_78:
                uint64_t v32 = *(unsigned int *)(*((void *)v1 + 13) + 84);
                if (v32) {
                  xpc_dictionary_set_uint64(v2, "companion_preference", v32);
                }
                uint64_t v33 = *((void *)v1 + 18);
                if (v33)
                {
                  xpc_object_t v34 = xpc_data_create_with_dispatch_data(v33);
                  xpc_dictionary_set_value(v2, "initial_data_payload", v34);
                }
                if ((v1[98] & 8) != 0) {
                  xpc_dictionary_set_BOOL(v2, "allow_unusable_addresses", 1);
                }
                if ((*(_WORD *)(*((void *)v1 + 13) + 108) & 0x100) != 0)
                {
                  xpc_dictionary_set_BOOL(v2, "prefer_no_proxy", 1);
                  uint64_t v35 = *((void *)v1 + 12);
                  if ((v35 & 0x100000) == 0)
                  {
LABEL_86:
                    if ((v35 & 0x200000) == 0) {
                      goto LABEL_87;
                    }
                    goto LABEL_123;
                  }
                }
                else
                {
                  uint64_t v35 = *((void *)v1 + 12);
                  if ((v35 & 0x100000) == 0) {
                    goto LABEL_86;
                  }
                }
                xpc_dictionary_set_BOOL(v2, "https_proxy_is_opaque", 1);
                uint64_t v35 = *((void *)v1 + 12);
                if ((v35 & 0x200000) == 0)
                {
LABEL_87:
                  if ((v35 & 0x400000) == 0) {
                    goto LABEL_88;
                  }
                  goto LABEL_124;
                }
LABEL_123:
                xpc_dictionary_set_BOOL(v2, "https_proxy_over_tls", 1);
                uint64_t v35 = *((void *)v1 + 12);
                if ((v35 & 0x400000) == 0)
                {
LABEL_88:
                  if ((v35 & 0x800000) == 0) {
                    goto LABEL_89;
                  }
                  goto LABEL_125;
                }
LABEL_124:
                xpc_dictionary_set_BOOL(v2, "attach_protocol_listener", 1);
                uint64_t v35 = *((void *)v1 + 12);
                if ((v35 & 0x800000) == 0)
                {
LABEL_89:
                  if ((v35 & 0x1000000) == 0) {
                    goto LABEL_90;
                  }
                  goto LABEL_126;
                }
LABEL_125:
                xpc_dictionary_set_BOOL(v2, "prohibit_joining_protocols", 1);
                uint64_t v35 = *((void *)v1 + 12);
                if ((v35 & 0x1000000) == 0)
                {
LABEL_90:
                  if ((v35 & 0x4000000) == 0) {
                    goto LABEL_91;
                  }
                  goto LABEL_127;
                }
LABEL_126:
                xpc_dictionary_set_BOOL(v2, "allow_joining_connected_fd", 1);
                uint64_t v35 = *((void *)v1 + 12);
                if ((v35 & 0x4000000) == 0)
                {
LABEL_91:
                  if ((v35 & 0x8000000) == 0) {
                    goto LABEL_92;
                  }
                  goto LABEL_128;
                }
LABEL_127:
                xpc_dictionary_set_BOOL(v2, "allow_duplicate_state_updates", 1);
                uint64_t v35 = *((void *)v1 + 12);
                if ((v35 & 0x8000000) == 0)
                {
LABEL_92:
                  if ((v35 & 0x10000000) == 0) {
                    goto LABEL_93;
                  }
                  goto LABEL_129;
                }
LABEL_128:
                xpc_dictionary_set_BOOL(v2, "always_open_listener_socket", 1);
                uint64_t v35 = *((void *)v1 + 12);
                if ((v35 & 0x10000000) == 0)
                {
LABEL_93:
                  if ((v35 & 0x20000000) == 0) {
                    goto LABEL_94;
                  }
                  goto LABEL_130;
                }
LABEL_129:
                xpc_dictionary_set_BOOL(v2, "never_open_listener_socket", 1);
                uint64_t v35 = *((void *)v1 + 12);
                if ((v35 & 0x20000000) == 0)
                {
LABEL_94:
                  if ((v35 & 0x40000000) == 0) {
                    goto LABEL_96;
                  }
                  goto LABEL_95;
                }
LABEL_130:
                xpc_dictionary_set_BOOL(v2, "disable_listener_datapath", 1);
                if ((*((void *)v1 + 12) & 0x40000000) == 0)
                {
LABEL_96:
                  uint64_t v36 = *((void *)v1 + 13);
                  if ((*(_WORD *)(v36 + 108) & 0x4000) != 0)
                  {
                    xpc_dictionary_set_BOOL(v2, "known_tracker", 1);
                    uint64_t v36 = *((void *)v1 + 13);
                  }
                  if (*(unsigned char *)(v36 + 102)) {
                    xpc_dictionary_set_uint64(v2, "attribution", *(unsigned __int8 *)(v36 + 102));
                  }
                  uint64_t v37 = *((void *)v1 + 12);
                  if ((v37 & 0x800000000) != 0)
                  {
                    xpc_dictionary_set_BOOL(v2, "include_ble", 1);
                    uint64_t v37 = *((void *)v1 + 12);
                    if ((v37 & 0x1000000000) == 0)
                    {
LABEL_102:
                      if ((v37 & 0x2000000000) == 0) {
                        goto LABEL_103;
                      }
                      goto LABEL_134;
                    }
                  }
                  else if ((v37 & 0x1000000000) == 0)
                  {
                    goto LABEL_102;
                  }
                  xpc_dictionary_set_BOOL(v2, "screen_off", 1);
                  uint64_t v37 = *((void *)v1 + 12);
                  if ((v37 & 0x2000000000) == 0)
                  {
LABEL_103:
                    if ((v37 & 0x4000000000) == 0)
                    {
LABEL_105:
                      xpc_dictionary_set_value(v2, "metadata", *((xpc_object_t *)v1 + 27));

                      goto LABEL_106;
                    }
LABEL_104:
                    xpc_dictionary_set_BOOL(v2, "minimize_logging", 1);
                    goto LABEL_105;
                  }
LABEL_134:
                  xpc_dictionary_set_BOOL(v2, "internet_fallback", 1);
                  if ((*((void *)v1 + 12) & 0x4000000000) == 0) {
                    goto LABEL_105;
                  }
                  goto LABEL_104;
                }
LABEL_95:
                xpc_dictionary_set_BOOL(v2, "requires_dnssec_validation", 1);
                goto LABEL_96;
              }
LABEL_77:
              xpc_dictionary_set_uint64(v2, "ecn_mode", v31);
              goto LABEL_78;
            }
LABEL_64:
            xpc_dictionary_set_BOOL(v2, "server", 1);
            goto LABEL_65;
          }
LABEL_57:
          xpc_dictionary_set_BOOL(v2, "resolve_ptr", 1);
          uint64_t v26 = *((void *)v1 + 12);
          goto LABEL_58;
        }
LABEL_53:
        xpc_dictionary_set_BOOL(v2, "use_long_outstanding_queries", 1);
        goto LABEL_54;
      }
LABEL_49:
      xpc_dictionary_set_value(v2, "prohibited_interface_types", *v23);
      xpc_dictionary_set_value(v2, "prohibited_interface_subtypes", *(xpc_object_t *)(*(void *)(*((void *)v1 + 13) + 176) + 8));
      xpc_dictionary_set_value(v2, "preferred_interface_subtypes", *(xpc_object_t *)(*(void *)(*((void *)v1 + 13) + 176) + 16));
      xpc_dictionary_set_value(v2, "prohibited_interfaces", *(xpc_object_t *)(*(void *)(*((void *)v1 + 13) + 176) + 24));
      xpc_dictionary_set_value(v2, "prohibited_netagent_domains", *(xpc_object_t *)(*(void *)(*((void *)v1 + 13) + 176) + 32));
      xpc_dictionary_set_value(v2, "prohibited_netagent_types", *(xpc_object_t *)(*(void *)(*((void *)v1 + 13) + 176) + 40));
      xpc_dictionary_set_value(v2, "prohibited_netagent_uuids", *(xpc_object_t *)(*(void *)(*((void *)v1 + 13) + 176) + 48));
      xpc_dictionary_set_value(v2, "required_netagent_domains", *(xpc_object_t *)(*(void *)(*((void *)v1 + 13) + 176) + 56));
      xpc_dictionary_set_value(v2, "required_netagent_types", *(xpc_object_t *)(*(void *)(*((void *)v1 + 13) + 176) + 64));
      xpc_dictionary_set_value(v2, "required_netagent_uuids", *(xpc_object_t *)(*(void *)(*((void *)v1 + 13) + 176) + 72));
      xpc_dictionary_set_value(v2, "preferred_netagent_domains", *(xpc_object_t *)(*(void *)(*((void *)v1 + 13) + 176) + 80));
      xpc_dictionary_set_value(v2, "preferred_netagent_types", *(xpc_object_t *)(*(void *)(*((void *)v1 + 13) + 176) + 88));
      xpc_dictionary_set_value(v2, "preferred_netagent_uuids", *(xpc_object_t *)(*(void *)(*((void *)v1 + 13) + 176) + 96));
      xpc_dictionary_set_value(v2, "avoided_netagent_domains", *(xpc_object_t *)(*(void *)(*((void *)v1 + 13) + 176) + 104));
      xpc_dictionary_set_value(v2, "avoided_netagent_types", *(xpc_object_t *)(*(void *)(*((void *)v1 + 13) + 176) + 112));
      xpc_dictionary_set_value(v2, "avoided_netagent_uuids", *(xpc_object_t *)(*(void *)(*((void *)v1 + 13) + 176) + 120));
      goto LABEL_50;
    }
LABEL_48:
    xpc_dictionary_set_BOOL(v2, "prohibit_roaming", 1);
    uint64_t v23 = *(xpc_object_t **)(*((void *)v1 + 13) + 176);
    if (!v23) {
      goto LABEL_50;
    }
    goto LABEL_49;
  }
  xpc_object_t v2 = 0;
LABEL_106:

  return v2;
}

void sub_1832DF4B8(_Unwind_Exception *a1)
{
  xpc_object_t v6 = v5;

  _Unwind_Resume(a1);
}

void *nw_interface_copy_dictionary(void *a1)
{
  id v1 = a1;
  if (v1)
  {
    xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
    uint64_t v3 = v2;
    uint64_t v4 = *((unsigned int *)v1 + 24);
    if (v4) {
      xpc_dictionary_set_uint64(v2, "type", v4);
    }
    uint64_t v5 = *((unsigned int *)v1 + 25);
    if (v5) {
      xpc_dictionary_set_uint64(v3, "subtype", v5);
    }
    xpc_dictionary_set_string(v3, "name", v1 + 104);
    uint64_t v6 = *((unsigned int *)v1 + 2);
    if (v6) {
      xpc_dictionary_set_uint64(v3, "index", v6);
    }
    uint64_t v7 = *((unsigned int *)v1 + 23);
    if (v7) {
      xpc_dictionary_set_uint64(v3, "generation", v7);
    }
    uint64_t v8 = *((unsigned int *)v1 + 22);
    if (v8) {
      xpc_dictionary_set_uint64(v3, "delegate_index", v8);
    }
    xpc_dictionary_set_data(v3, "details", v1 + 12, 0x4CuLL);
  }
  else
  {
    uint64_t v3 = 0;
  }

  return v3;
}

void sub_1832DF600(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

const char *__cdecl nw_endpoint_get_url(nw_endpoint_t endpoint)
{
  *(void *)&v40[13] = *MEMORY[0x1E4F143B8];
  id v1 = endpoint;
  xpc_object_t v2 = v1;
  if (!v1)
  {
    uint64_t v26 = __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    uint64_t v38 = "nw_endpoint_get_url";
    __int16 v27 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v35 = 0;
    if (__nwlog_fault(v27, &type, &v35))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v28 = __nwlog_obj();
        os_log_type_t v29 = type;
        if (os_log_type_enabled(v28, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          uint64_t v38 = "nw_endpoint_get_url";
          _os_log_impl(&dword_1830D4000, v28, v29, "%{public}s called with null endpoint", buf, 0xCu);
        }
      }
      else if (v35)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        uint64_t v28 = __nwlog_obj();
        os_log_type_t v31 = type;
        BOOL v32 = os_log_type_enabled(v28, type);
        if (backtrace_string)
        {
          if (v32)
          {
            *(_DWORD *)tcp_info buf = 136446466;
            uint64_t v38 = "nw_endpoint_get_url";
            __int16 v39 = 2082;
            *(void *)long long v40 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v28, v31, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_42;
        }
        if (v32)
        {
          *(_DWORD *)tcp_info buf = 136446210;
          uint64_t v38 = "nw_endpoint_get_url";
          _os_log_impl(&dword_1830D4000, v28, v31, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        uint64_t v28 = __nwlog_obj();
        os_log_type_t v33 = type;
        if (os_log_type_enabled(v28, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          uint64_t v38 = "nw_endpoint_get_url";
          _os_log_impl(&dword_1830D4000, v28, v33, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_42:
    if (!v27) {
      goto LABEL_24;
    }
    uint64_t v24 = (char *)v27;
    goto LABEL_23;
  }
  uint64_t v3 = v1;
  int v4 = [v3 type];

  if (v4 != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v6 = (id)gLogObj;
    uint64_t v7 = v3;
    int v8 = [v7 type];

    *(_DWORD *)tcp_info buf = 136446466;
    uint64_t v38 = "nw_endpoint_get_url";
    __int16 v39 = 1024;
    *(_DWORD *)long long v40 = v8;
    LODWORD(v34) = 18;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v35 = 0;
    if (__nwlog_fault(v9, &type, &v35))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v10 = (id)gLogObj;
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          uint64_t v12 = v7;
          int v13 = [v12 type];

          *(_DWORD *)tcp_info buf = 136446466;
          uint64_t v38 = "nw_endpoint_get_url";
          __int16 v39 = 1024;
          *(_DWORD *)long long v40 = v13;
          _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s incorrect endpoint type %u", buf, 0x12u);
        }
      }
      else if (v35)
      {
        uint64_t v14 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v10 = (id)gLogObj;
        os_log_type_t v15 = type;
        BOOL v16 = os_log_type_enabled(v10, type);
        if (v14)
        {
          if (v16)
          {
            uint64_t v17 = v7;
            int v18 = [v17 type];

            *(_DWORD *)tcp_info buf = 136446722;
            uint64_t v38 = "nw_endpoint_get_url";
            __int16 v39 = 1024;
            *(_DWORD *)long long v40 = v18;
            v40[2] = 2082;
            *(void *)&v40[3] = v14;
            _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s incorrect endpoint type %u, dumping backtrace:%{public}s", buf, 0x1Cu);
          }

          free(v14);
          if (!v9) {
            goto LABEL_24;
          }
LABEL_22:
          uint64_t v24 = (char *)v9;
LABEL_23:
          free(v24);
          goto LABEL_24;
        }
        if (v16)
        {
          __int16 v22 = v7;
          int v23 = [v22 type];

          *(_DWORD *)tcp_info buf = 136446466;
          uint64_t v38 = "nw_endpoint_get_url";
          __int16 v39 = 1024;
          *(_DWORD *)long long v40 = v23;
          _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s incorrect endpoint type %u, no backtrace", buf, 0x12u);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v10 = (id)gLogObj;
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v10, type))
        {
          int64_t v20 = v7;
          int v21 = [v20 type];

          *(_DWORD *)tcp_info buf = 136446466;
          uint64_t v38 = "nw_endpoint_get_url";
          __int16 v39 = 1024;
          *(_DWORD *)long long v40 = v21;
          _os_log_impl(&dword_1830D4000, v10, v19, "%{public}s incorrect endpoint type %u, backtrace limit exceeded", buf, 0x12u);
        }
      }
    }
    if (!v9)
    {
LABEL_24:
      Class isa = 0;
      goto LABEL_25;
    }
    goto LABEL_22;
  }
  Class isa = (const char *)v3[31].isa;
LABEL_25:

  return isa;
}

void sub_1832DFBF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_data_transfer_report_copy_dictionary_block_invoke(uint64_t result)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(_DWORD *)(*(void *)(result + 32) + 52);
  return result;
}

BOOL nw_nsstring(uint64_t a1)
{
  uint64_t v1 = [NSString stringWithUTF8String:a1];
  if (v1) {
    return v1;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  xpc_object_t v2 = (id)gLogObj;
  os_log_type_enabled(v2, OS_LOG_TYPE_ERROR);
  uint64_t v3 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v3);
  if (!result)
  {
    free(v3);
    return v1;
  }
  __break(1u);
  return result;
}

uint64_t nw_parameters_get_sanitized_url(void *a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  xpc_object_t v2 = v1;
  if (!v1)
  {
    uint64_t v5 = __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    uint64_t v17 = "nw_parameters_get_sanitized_url";
    id v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (__nwlog_fault(v6, &type, &v14))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v7 = __nwlog_obj();
        os_log_type_t v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          uint64_t v17 = "nw_parameters_get_sanitized_url";
          _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
        }
      }
      else if (v14)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        uint64_t v7 = __nwlog_obj();
        os_log_type_t v10 = type;
        BOOL v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)tcp_info buf = 136446466;
            uint64_t v17 = "nw_parameters_get_sanitized_url";
            __int16 v18 = 2082;
            os_log_type_t v19 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_20;
        }
        if (v11)
        {
          *(_DWORD *)tcp_info buf = 136446210;
          uint64_t v17 = "nw_parameters_get_sanitized_url";
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        uint64_t v7 = __nwlog_obj();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          uint64_t v17 = "nw_parameters_get_sanitized_url";
          _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_20:
    if (v6) {
      free(v6);
    }
    goto LABEL_22;
  }
  uint64_t v3 = (void *)*((void *)v1 + 25);
  if (!v3)
  {
LABEL_22:
    uint64_t sanitized_url = 0;
    goto LABEL_23;
  }
  uint64_t sanitized_url = nw_endpoint_get_sanitized_url(v3);
LABEL_23:

  return sanitized_url;
}

void sub_1832E00CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_endpoint_get_sanitized_url(void *a1)
{
  *(void *)&v47[13] = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  xpc_object_t v2 = v1;
  if (!v1)
  {
    os_log_type_t v31 = __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    uint64_t v45 = "nw_endpoint_get_sanitized_url";
    BOOL v32 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v42 = 0;
    if (__nwlog_fault(v32, &type, &v42))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v33 = __nwlog_obj();
        os_log_type_t v34 = type;
        if (os_log_type_enabled(v33, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          uint64_t v45 = "nw_endpoint_get_sanitized_url";
          _os_log_impl(&dword_1830D4000, v33, v34, "%{public}s called with null endpoint", buf, 0xCu);
        }
      }
      else if (v42)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v33 = __nwlog_obj();
        os_log_type_t v36 = type;
        BOOL v37 = os_log_type_enabled(v33, type);
        if (backtrace_string)
        {
          if (v37)
          {
            *(_DWORD *)tcp_info buf = 136446466;
            uint64_t v45 = "nw_endpoint_get_sanitized_url";
            __int16 v46 = 2082;
            *(void *)uint64_t v47 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v33, v36, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_50;
        }
        if (v37)
        {
          *(_DWORD *)tcp_info buf = 136446210;
          uint64_t v45 = "nw_endpoint_get_sanitized_url";
          _os_log_impl(&dword_1830D4000, v33, v36, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        os_log_type_t v33 = __nwlog_obj();
        os_log_type_t v38 = type;
        if (os_log_type_enabled(v33, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          uint64_t v45 = "nw_endpoint_get_sanitized_url";
          _os_log_impl(&dword_1830D4000, v33, v38, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_50:
    if (!v32) {
      goto LABEL_32;
    }
    os_log_type_t v29 = (char *)v32;
    goto LABEL_31;
  }
  id v3 = v1;
  int v4 = [v3 type];

  if (v4 != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v11 = (id)gLogObj;
    id v12 = v3;
    int v13 = [v12 type];

    *(_DWORD *)tcp_info buf = 136446466;
    uint64_t v45 = "nw_endpoint_get_sanitized_url";
    __int16 v46 = 1024;
    *(_DWORD *)uint64_t v47 = v13;
    LODWORD(v39) = 18;
    char v14 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v42 = 0;
    if (__nwlog_fault(v14, &type, &v42))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v15 = (id)gLogObj;
        os_log_type_t v16 = type;
        if (os_log_type_enabled(v15, type))
        {
          id v17 = v12;
          int v18 = objc_msgSend(v17, "type", buf, v39);

          *(_DWORD *)tcp_info buf = 136446466;
          uint64_t v45 = "nw_endpoint_get_sanitized_url";
          __int16 v46 = 1024;
          *(_DWORD *)uint64_t v47 = v18;
          _os_log_impl(&dword_1830D4000, v15, v16, "%{public}s incorrect endpoint type %u", buf, 0x12u);
        }
      }
      else if (v42)
      {
        os_log_type_t v19 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v15 = (id)gLogObj;
        os_log_type_t v20 = type;
        BOOL v21 = os_log_type_enabled(v15, type);
        if (v19)
        {
          if (v21)
          {
            id v22 = v12;
            int v23 = objc_msgSend(v22, "type", buf, v39);

            *(_DWORD *)tcp_info buf = 136446722;
            uint64_t v45 = "nw_endpoint_get_sanitized_url";
            __int16 v46 = 1024;
            *(_DWORD *)uint64_t v47 = v23;
            v47[2] = 2082;
            *(void *)&v47[3] = v19;
            _os_log_impl(&dword_1830D4000, v15, v20, "%{public}s incorrect endpoint type %u, dumping backtrace:%{public}s", buf, 0x1Cu);
          }

          free(v19);
          if (!v14) {
            goto LABEL_32;
          }
LABEL_30:
          os_log_type_t v29 = (char *)v14;
LABEL_31:
          free(v29);
          goto LABEL_32;
        }
        if (v21)
        {
          id v27 = v12;
          int v28 = objc_msgSend(v27, "type", buf, v39);

          *(_DWORD *)tcp_info buf = 136446466;
          uint64_t v45 = "nw_endpoint_get_sanitized_url";
          __int16 v46 = 1024;
          *(_DWORD *)uint64_t v47 = v28;
          _os_log_impl(&dword_1830D4000, v15, v20, "%{public}s incorrect endpoint type %u, no backtrace", buf, 0x12u);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v15 = (id)gLogObj;
        os_log_type_t v24 = type;
        if (os_log_type_enabled(v15, type))
        {
          id v25 = v12;
          int v26 = objc_msgSend(v25, "type", buf, v39);

          *(_DWORD *)tcp_info buf = 136446466;
          uint64_t v45 = "nw_endpoint_get_sanitized_url";
          __int16 v46 = 1024;
          *(_DWORD *)uint64_t v47 = v26;
          _os_log_impl(&dword_1830D4000, v15, v24, "%{public}s incorrect endpoint type %u, backtrace limit exceeded", buf, 0x12u);
        }
      }
    }
    if (!v14)
    {
LABEL_32:
      uint64_t v7 = 0;
      goto LABEL_33;
    }
    goto LABEL_30;
  }
  uint64_t v5 = v3;
  id v6 = v5;
  uint64_t v7 = v5[35];
  if (!v7)
  {
    if (v5[29])
    {
      v40[0] = MEMORY[0x1E4F143A8];
      v40[1] = 3221225472;
      v40[2] = __nw_endpoint_get_sanitized_url_block_invoke;
      v40[3] = &unk_1E524BAA8;
      os_log_type_t v8 = v5;
      uint64_t v41 = v8;
      os_unfair_lock_lock(v8 + 75);
      __nw_endpoint_get_sanitized_url_block_invoke((uint64_t)v40);
      os_unfair_lock_unlock(v8 + 75);
      if (!*(void *)&v8[70]._os_unfair_lock_opaque)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v9 = (id)gLogObj;
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v10 = *(void *)&v8[62]._os_unfair_lock_opaque;
          *(_DWORD *)tcp_info buf = 136446467;
          uint64_t v45 = "nw_endpoint_get_sanitized_url";
          __int16 v46 = 2085;
          *(void *)uint64_t v47 = v10;
          _os_log_impl(&dword_1830D4000, v9, OS_LOG_TYPE_DEBUG, "%{public}s Failed to sanitize url: %{sensitive}s", buf, 0x16u);
        }
      }
      uint64_t v7 = *(void *)&v8[70]._os_unfair_lock_opaque;
    }
    else
    {
      uint64_t v7 = 0;
    }
  }

LABEL_33:
  return v7;
}

void sub_1832E0814(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_endpoint_get_sanitized_url_block_invoke(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if (!*(void *)(v1 + 280))
  {
    uint64_t v2 = result;
    BOOL result = nw_utilities_copy_sanitized_url(*(CFURLRef *)(v1 + 232));
    *(void *)(*(void *)(v2 + 32) + 280) = result;
  }
  return result;
}

uint64_t nw_utilities_copy_sanitized_url(CFURLRef url)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (!url)
  {
    uint64_t v9 = __nwlog_obj();
    *(_DWORD *)os_log_type_t v19 = 136446210;
    *(void *)&v19[4] = "nw_utilities_copy_sanitized_url";
    uint64_t v3 = _os_log_send_and_compose_impl();

    LOBYTE(rangeIncludingSeparators.location) = 16;
    char v18 = 0;
    if (!__nwlog_fault((const char *)v3, &rangeIncludingSeparators, &v18)) {
      goto LABEL_38;
    }
    if (LOBYTE(rangeIncludingSeparators.location) == 17)
    {
      uint64_t v10 = __nwlog_obj();
      os_log_type_t location = rangeIncludingSeparators.location;
      if (os_log_type_enabled(v10, rangeIncludingSeparators.location))
      {
        *(_DWORD *)os_log_type_t v19 = 136446210;
        *(void *)&v19[4] = "nw_utilities_copy_sanitized_url";
        id v12 = "%{public}s called with null absolute_url";
LABEL_36:
        _os_log_impl(&dword_1830D4000, v10, location, v12, v19, 0xCu);
      }
    }
    else
    {
      if (v18)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        uint64_t v10 = __nwlog_obj();
        os_log_type_t location = rangeIncludingSeparators.location;
        BOOL v16 = os_log_type_enabled(v10, rangeIncludingSeparators.location);
        if (backtrace_string)
        {
          if (v16)
          {
            *(_DWORD *)os_log_type_t v19 = 136446466;
            *(void *)&v19[4] = "nw_utilities_copy_sanitized_url";
            *(_WORD *)&v19[12] = 2082;
            *(void *)&v19[14] = backtrace_string;
            _os_log_impl(&dword_1830D4000, v10, location, "%{public}s called with null absolute_url, dumping backtrace:%{public}s", v19, 0x16u);
          }

          free(backtrace_string);
          if (!v3) {
            return 0;
          }
          goto LABEL_12;
        }
        if (!v16) {
          goto LABEL_37;
        }
        *(_DWORD *)os_log_type_t v19 = 136446210;
        *(void *)&v19[4] = "nw_utilities_copy_sanitized_url";
        id v12 = "%{public}s called with null absolute_url, no backtrace";
        goto LABEL_36;
      }
      uint64_t v10 = __nwlog_obj();
      os_log_type_t location = rangeIncludingSeparators.location;
      if (os_log_type_enabled(v10, rangeIncludingSeparators.location))
      {
        *(_DWORD *)os_log_type_t v19 = 136446210;
        *(void *)&v19[4] = "nw_utilities_copy_sanitized_url";
        id v12 = "%{public}s called with null absolute_url, backtrace limit exceeded";
        goto LABEL_36;
      }
    }
LABEL_37:

LABEL_38:
    if (!v3) {
      return 0;
    }
    goto LABEL_12;
  }
  if (gLogDatapath)
  {
    int v13 = __nwlog_obj();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)os_log_type_t v19 = 136446467;
      *(void *)&v19[4] = "nw_utilities_copy_sanitized_url";
      *(_WORD *)&v19[12] = 2117;
      *(void *)&v19[14] = url;
      _os_log_impl(&dword_1830D4000, v13, OS_LOG_TYPE_DEBUG, "%{public}s Sanitizing URL: %{sensitive}@", v19, 0x16u);
    }
  }
  CFIndex v2 = CFURLGetBytes(url, 0, 0);
  uint64_t v3 = nw_calloc_type<unsigned char>(v2 + 1);
  CFURLGetBytes(url, (UInt8 *)v3, v2);
  CFURLGetByteRangeForComponent(url, kCFURLComponentQuery, &rangeIncludingSeparators);
  CFIndex v4 = rangeIncludingSeparators.location;
  if (rangeIncludingSeparators.location != -1
    || (CFURLGetByteRangeForComponent(url, kCFURLComponentFragment, (CFRange *)v19),
        CFIndex v4 = *(void *)v19,
        *(void *)v19 != -1))
  {
    *(unsigned char *)(v3 + v4) = 0;
  }
  CFRange v5 = CFURLGetByteRangeForComponent(url, kCFURLComponentUser, 0);
  CFRange v6 = CFURLGetByteRangeForComponent(url, kCFURLComponentPassword, 0);
  if (v5.location != -1)
  {
    CFIndex v7 = v5.location + v5.length;
    if (v6.location != -1) {
      CFIndex v7 = v6.location + v6.length;
    }
    memmove((void *)(v3 + v5.location), (const void *)(v3 + v7 + 1), v2 - v7);
  }
  if (gLogDatapath)
  {
    char v14 = __nwlog_obj();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)os_log_type_t v19 = 136446466;
      *(void *)&v19[4] = "nw_utilities_copy_sanitized_url";
      *(_WORD *)&v19[12] = 2082;
      *(void *)&v19[14] = v3;
      _os_log_impl(&dword_1830D4000, v14, OS_LOG_TYPE_DEBUG, "%{public}s Sanitized URL: %{public}s", v19, 0x16u);
    }

    if (!*(unsigned char *)v3) {
      goto LABEL_12;
    }
  }
  else if (!*(unsigned char *)v3)
  {
LABEL_12:
    free((void *)v3);
    return 0;
  }
  return v3;
}

id *nw_protocol_implementation_create(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  id v8 = a2;
  id v9 = a3;
  id v10 = a4;
  if (a1)
  {
    if (v8)
    {
      id v11 = v8;
      if (v11[16] == 3)
      {
        if (nw_protocol_instance_multiplex_callbacks(void)::onceToken[0] != -1) {
          dispatch_once(nw_protocol_instance_multiplex_callbacks(void)::onceToken, &__block_literal_global_307);
        }
        id v12 = &nw_protocol_instance_multiplex_callbacks(void)::callbacks;
      }
      else
      {
        if (nw_protocol_instance_one_to_one_callbacks(void)::onceToken != -1) {
          dispatch_once(&nw_protocol_instance_one_to_one_callbacks(void)::onceToken, &__block_literal_global_288);
        }
        id v12 = &nw_protocol_instance_one_to_one_callbacks(void)::callbacks;
      }
      uint64_t v13 = *v12;
      char v14 = (objc_class *)objc_opt_class();
      os_log_type_t v15 = (id *)nw_protocol_new_objc(v14, (uint64_t)v10, (uint64_t)(v11 + 2), v13);
      BOOL v16 = v15;
      if (v15)
      {
        objc_storeStrong(v15 + 5, a3);
        objc_storeStrong(v16 + 6, a4);
        objc_storeStrong(v16 + 1, a2);
        if (nw_parameters_get_logging_disabled((uint64_t)v10)) {
          char v17 = 0x80;
        }
        else {
          char v17 = 0;
        }
        *((unsigned char *)v16 + 405) = v17 & 0x80 | *((unsigned char *)v16 + 405) & 0x7F;
        char v18 = (uint64_t (**)(void))*((void *)v16[1] + 10);
        if (v18)
        {
          os_log_type_t v19 = *v18;
          if (v19) {
            v16[14] = (id)v19();
          }
        }
        uint64_t v20 = v16;
        v20[2] = v20;
        BOOL v21 = v20 - 12;
        goto LABEL_38;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v22 = (id)gLogObj;
      *(_DWORD *)tcp_info buf = 136446210;
      uint64_t v47 = "nw_protocol_implementation_create";
      int v23 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v44 = 0;
      if (__nwlog_fault(v23, &type, &v44))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v24 = (id)gLogObj;
          os_log_type_t v25 = type;
          if (os_log_type_enabled(v24, type))
          {
            *(_DWORD *)tcp_info buf = 136446210;
            uint64_t v47 = "nw_protocol_implementation_create";
            _os_log_impl(&dword_1830D4000, v24, v25, "%{public}s nw_protocol_new_objc failed", buf, 0xCu);
          }
        }
        else if (v44)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v24 = (id)gLogObj;
          os_log_type_t v27 = type;
          BOOL v28 = os_log_type_enabled(v24, type);
          if (backtrace_string)
          {
            if (v28)
            {
              *(_DWORD *)tcp_info buf = 136446466;
              uint64_t v47 = "nw_protocol_implementation_create";
              __int16 v48 = 2082;
              uint64_t v49 = backtrace_string;
              _os_log_impl(&dword_1830D4000, v24, v27, "%{public}s nw_protocol_new_objc failed, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(backtrace_string);
            if (!v23) {
              goto LABEL_37;
            }
            goto LABEL_36;
          }
          if (v28)
          {
            *(_DWORD *)tcp_info buf = 136446210;
            uint64_t v47 = "nw_protocol_implementation_create";
            _os_log_impl(&dword_1830D4000, v24, v27, "%{public}s nw_protocol_new_objc failed, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v24 = (id)gLogObj;
          os_log_type_t v29 = type;
          if (os_log_type_enabled(v24, type))
          {
            *(_DWORD *)tcp_info buf = 136446210;
            uint64_t v47 = "nw_protocol_implementation_create";
            _os_log_impl(&dword_1830D4000, v24, v29, "%{public}s nw_protocol_new_objc failed, backtrace limit exceeded", buf, 0xCu);
          }
        }
      }
      if (!v23)
      {
LABEL_37:
        BOOL v21 = 0;
LABEL_38:

        goto LABEL_39;
      }
LABEL_36:
      free(v23);
      goto LABEL_37;
    }
    char v35 = __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    uint64_t v47 = "nw_protocol_implementation_create";
    BOOL v32 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v44 = 0;
    if (__nwlog_fault(v32, &type, &v44))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v33 = __nwlog_obj();
        os_log_type_t v36 = type;
        if (os_log_type_enabled(v33, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          uint64_t v47 = "nw_protocol_implementation_create";
          _os_log_impl(&dword_1830D4000, v33, v36, "%{public}s called with null handle", buf, 0xCu);
        }
LABEL_71:

        goto LABEL_72;
      }
      if (!v44)
      {
        os_log_type_t v33 = __nwlog_obj();
        os_log_type_t v43 = type;
        if (os_log_type_enabled(v33, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          uint64_t v47 = "nw_protocol_implementation_create";
          _os_log_impl(&dword_1830D4000, v33, v43, "%{public}s called with null handle, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_71;
      }
      BOOL v37 = (char *)__nw_create_backtrace_string();
      os_log_type_t v33 = __nwlog_obj();
      os_log_type_t v40 = type;
      BOOL v41 = os_log_type_enabled(v33, type);
      if (!v37)
      {
        if (v41)
        {
          *(_DWORD *)tcp_info buf = 136446210;
          uint64_t v47 = "nw_protocol_implementation_create";
          _os_log_impl(&dword_1830D4000, v33, v40, "%{public}s called with null handle, no backtrace", buf, 0xCu);
        }
        goto LABEL_71;
      }
      if (v41)
      {
        *(_DWORD *)tcp_info buf = 136446466;
        uint64_t v47 = "nw_protocol_implementation_create";
        __int16 v48 = 2082;
        uint64_t v49 = v37;
        _os_log_impl(&dword_1830D4000, v33, v40, "%{public}s called with null handle, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_59;
    }
  }
  else
  {
    os_log_type_t v31 = __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    uint64_t v47 = "nw_protocol_implementation_create";
    BOOL v32 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v44 = 0;
    if (__nwlog_fault(v32, &type, &v44))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v33 = __nwlog_obj();
        os_log_type_t v34 = type;
        if (os_log_type_enabled(v33, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          uint64_t v47 = "nw_protocol_implementation_create";
          _os_log_impl(&dword_1830D4000, v33, v34, "%{public}s called with null identifier", buf, 0xCu);
        }
        goto LABEL_71;
      }
      if (!v44)
      {
        os_log_type_t v33 = __nwlog_obj();
        os_log_type_t v42 = type;
        if (os_log_type_enabled(v33, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          uint64_t v47 = "nw_protocol_implementation_create";
          _os_log_impl(&dword_1830D4000, v33, v42, "%{public}s called with null identifier, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_71;
      }
      BOOL v37 = (char *)__nw_create_backtrace_string();
      os_log_type_t v33 = __nwlog_obj();
      os_log_type_t v38 = type;
      BOOL v39 = os_log_type_enabled(v33, type);
      if (!v37)
      {
        if (v39)
        {
          *(_DWORD *)tcp_info buf = 136446210;
          uint64_t v47 = "nw_protocol_implementation_create";
          _os_log_impl(&dword_1830D4000, v33, v38, "%{public}s called with null identifier, no backtrace", buf, 0xCu);
        }
        goto LABEL_71;
      }
      if (v39)
      {
        *(_DWORD *)tcp_info buf = 136446466;
        uint64_t v47 = "nw_protocol_implementation_create";
        __int16 v48 = 2082;
        uint64_t v49 = v37;
        _os_log_impl(&dword_1830D4000, v33, v38, "%{public}s called with null identifier, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_59:

      free(v37);
    }
  }
LABEL_72:
  if (v32) {
    free(v32);
  }
  BOOL v21 = 0;
LABEL_39:

  return v21;
}

void sub_1832E1524(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *nw_protocol_new_objc(Class cls, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  if (!cls)
  {
    __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    os_log_type_t v36 = "nw_protocol_new_objc";
    char v17 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v33 = 0;
    if (!__nwlog_fault(v17, &type, &v33)) {
      goto LABEL_67;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v18 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (!os_log_type_enabled(v18, type)) {
        goto LABEL_67;
      }
      *(_DWORD *)tcp_info buf = 136446210;
      os_log_type_t v36 = "nw_protocol_new_objc";
      uint64_t v20 = "%{public}s called with null cls";
    }
    else if (v33)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      char v18 = __nwlog_obj();
      os_log_type_t v19 = type;
      BOOL v26 = os_log_type_enabled(v18, type);
      if (backtrace_string)
      {
        if (v26)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          os_log_type_t v36 = "nw_protocol_new_objc";
          __int16 v37 = 2082;
          os_log_type_t v38 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v18, v19, "%{public}s called with null cls, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_67:
        if (v17) {
          goto LABEL_68;
        }
        return 0;
      }
      if (!v26) {
        goto LABEL_67;
      }
      *(_DWORD *)tcp_info buf = 136446210;
      os_log_type_t v36 = "nw_protocol_new_objc";
      uint64_t v20 = "%{public}s called with null cls, no backtrace";
    }
    else
    {
      char v18 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (!os_log_type_enabled(v18, type)) {
        goto LABEL_67;
      }
      *(_DWORD *)tcp_info buf = 136446210;
      os_log_type_t v36 = "nw_protocol_new_objc";
      uint64_t v20 = "%{public}s called with null cls, backtrace limit exceeded";
    }
    goto LABEL_66;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    os_log_type_t v36 = "nw_protocol_new_objc";
    char v17 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v33 = 0;
    if (!__nwlog_fault(v17, &type, &v33)) {
      goto LABEL_67;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v33)
      {
        char v18 = __nwlog_obj();
        os_log_type_t v19 = type;
        if (!os_log_type_enabled(v18, type)) {
          goto LABEL_67;
        }
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v36 = "nw_protocol_new_objc";
        uint64_t v20 = "%{public}s called with null parameters, backtrace limit exceeded";
        goto LABEL_66;
      }
      os_log_type_t v27 = (char *)__nw_create_backtrace_string();
      char v18 = __nwlog_obj();
      os_log_type_t v19 = type;
      BOOL v28 = os_log_type_enabled(v18, type);
      if (!v27)
      {
        if (!v28) {
          goto LABEL_67;
        }
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v36 = "nw_protocol_new_objc";
        uint64_t v20 = "%{public}s called with null parameters, no backtrace";
        goto LABEL_66;
      }
      if (v28)
      {
        *(_DWORD *)tcp_info buf = 136446466;
        os_log_type_t v36 = "nw_protocol_new_objc";
        __int16 v37 = 2082;
        os_log_type_t v38 = v27;
        os_log_type_t v29 = "%{public}s called with null parameters, dumping backtrace:%{public}s";
LABEL_44:
        _os_log_impl(&dword_1830D4000, v18, v19, v29, buf, 0x16u);
      }
LABEL_45:
      free(v27);
      if (v17)
      {
LABEL_68:
        free(v17);
        return 0;
      }
      return 0;
    }
    char v18 = __nwlog_obj();
    os_log_type_t v19 = type;
    if (!os_log_type_enabled(v18, type)) {
      goto LABEL_67;
    }
    *(_DWORD *)tcp_info buf = 136446210;
    os_log_type_t v36 = "nw_protocol_new_objc";
    uint64_t v20 = "%{public}s called with null parameters";
LABEL_66:
    _os_log_impl(&dword_1830D4000, v18, v19, v20, buf, 0xCu);
    goto LABEL_67;
  }
  {
    nw_protocol_new_objc::_objc_initiateDealloc = (uint64_t)sel_registerName("_objc_initiateDealloc");
  }
  if (!class_getInstanceMethod(cls, (SEL)nw_protocol_new_objc::_objc_initiateDealloc))
  {
    _class_setCustomDeallocInitiation();
    class_addMethod(cls, (SEL)nw_protocol_new_objc::_objc_initiateDealloc, (IMP)nw_protocol_new_objc::$_0::__invoke, 0);
  }
  size_t InstanceSize = class_getInstanceSize(cls);
  id v9 = (void *)nw_protocol_new(InstanceSize, a2, a3, a4);
  if (!v9)
  {
    __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    os_log_type_t v36 = "nw_protocol_new_objc";
    char v17 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v33 = 0;
    if (!__nwlog_fault(v17, &type, &v33)) {
      goto LABEL_67;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v18 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (!os_log_type_enabled(v18, type)) {
        goto LABEL_67;
      }
      *(_DWORD *)tcp_info buf = 136446210;
      os_log_type_t v36 = "nw_protocol_new_objc";
      uint64_t v20 = "%{public}s called with null space";
      goto LABEL_66;
    }
    if (!v33)
    {
      char v18 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (!os_log_type_enabled(v18, type)) {
        goto LABEL_67;
      }
      *(_DWORD *)tcp_info buf = 136446210;
      os_log_type_t v36 = "nw_protocol_new_objc";
      uint64_t v20 = "%{public}s called with null space, backtrace limit exceeded";
      goto LABEL_66;
    }
    os_log_type_t v27 = (char *)__nw_create_backtrace_string();
    char v18 = __nwlog_obj();
    os_log_type_t v19 = type;
    BOOL v30 = os_log_type_enabled(v18, type);
    if (!v27)
    {
      if (!v30) {
        goto LABEL_67;
      }
      *(_DWORD *)tcp_info buf = 136446210;
      os_log_type_t v36 = "nw_protocol_new_objc";
      uint64_t v20 = "%{public}s called with null space, no backtrace";
      goto LABEL_66;
    }
    if (v30)
    {
      *(_DWORD *)tcp_info buf = 136446466;
      os_log_type_t v36 = "nw_protocol_new_objc";
      __int16 v37 = 2082;
      os_log_type_t v38 = v27;
      os_log_type_t v29 = "%{public}s called with null space, dumping backtrace:%{public}s";
      goto LABEL_44;
    }
    goto LABEL_45;
  }
  uint64_t v10 = (uint64_t)v9;
  id v11 = objc_constructInstance(cls, v9);
  if (!v11)
  {
    __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    os_log_type_t v36 = "nw_protocol_new_objc";
    BOOL v21 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v33 = 0;
    if (__nwlog_fault(v21, &type, &v33))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        id v22 = __nwlog_obj();
        os_log_type_t v23 = type;
        if (os_log_type_enabled(v22, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          os_log_type_t v36 = "nw_protocol_new_objc";
          os_log_type_t v24 = "%{public}s called with null obj";
LABEL_71:
          _os_log_impl(&dword_1830D4000, v22, v23, v24, buf, 0xCu);
        }
      }
      else if (v33)
      {
        os_log_type_t v31 = (char *)__nw_create_backtrace_string();
        id v22 = __nwlog_obj();
        os_log_type_t v23 = type;
        BOOL v32 = os_log_type_enabled(v22, type);
        if (v31)
        {
          if (v32)
          {
            *(_DWORD *)tcp_info buf = 136446466;
            os_log_type_t v36 = "nw_protocol_new_objc";
            __int16 v37 = 2082;
            os_log_type_t v38 = v31;
            _os_log_impl(&dword_1830D4000, v22, v23, "%{public}s called with null obj, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v31);
          goto LABEL_72;
        }
        if (v32)
        {
          *(_DWORD *)tcp_info buf = 136446210;
          os_log_type_t v36 = "nw_protocol_new_objc";
          os_log_type_t v24 = "%{public}s called with null obj, no backtrace";
          goto LABEL_71;
        }
      }
      else
      {
        id v22 = __nwlog_obj();
        os_log_type_t v23 = type;
        if (os_log_type_enabled(v22, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          os_log_type_t v36 = "nw_protocol_new_objc";
          os_log_type_t v24 = "%{public}s called with null obj, backtrace limit exceeded";
          goto LABEL_71;
        }
      }
    }
LABEL_72:
    if (v21) {
      free(v21);
    }
    nw_protocol_destroy(v10, 0);
    return 0;
  }
  id v12 = v11;
  if (*(_UNKNOWN **)(v10 - 56) == &nw_protocol_ref_counted_handle)
  {
    uint64_t v13 = *(void *)(v10 - 8);
    if (v13) {
      *(void *)(v10 - 8) = v13 + 1;
    }
  }
  {
    nw_protocol_new_objc::init = (uint64_t)sel_registerName("init");
  }
  char v14 = (const char *)nw_protocol_new_objc::init;
  Class Class = object_getClass(v12);
  if (class_getInstanceMethod(Class, v14)) {
    [v12 v14];
  }
  return v12;
}

uint64_t nw_protocol_udp_create(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (nw_protocol_udp_identifier::onceToken[0] != -1) {
    dispatch_once(nw_protocol_udp_identifier::onceToken, &__block_literal_global_23);
  }
  if (nw_protocol_udp_callbacks(void)::onceToken != -1) {
    dispatch_once(&nw_protocol_udp_callbacks(void)::onceToken, &__block_literal_global_14);
  }
  uint64_t v5 = nw_protocol_new(184, a4, (uint64_t)&nw_protocol_udp_identifier::identifier, nw_protocol_udp_callbacks(void)::callbacks);
  if (v5) {
    return v5 - 96;
  }
  else {
    return 0;
  }
}

uint64_t nw_protocol_ip_create(const nw_protocol_identifier *a1, nw_endpoint *a2, nw_parameters *a3)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  BOOL logging_disabled = nw_parameters_get_logging_disabled((uint64_t)a3);
  int address_family = nw_endpoint_get_address_family(a2);
  if (address_family == 30)
  {
    if (nw_protocol_ip_identifier::onceToken != -1) {
      dispatch_once(&nw_protocol_ip_identifier::onceToken, &__block_literal_global_86959);
    }
    if (nw_protocol_ipv6_callbacks(void)::onceToken != -1) {
      dispatch_once(&nw_protocol_ipv6_callbacks(void)::onceToken, &__block_literal_global_38_86965);
    }
    uint64_t v8 = nw_protocol_new(248, (uint64_t)a3, (uint64_t)&nw_protocol_ip_identifier::identifier, nw_protocol_ipv6_callbacks(void)::callbacks);
    *(void *)(v8 + 88) = 0;
    *(void *)(v8 + 96) = v8 + 88;
    *(void *)(v8 + 104) = 0;
    *(void *)(v8 + 112) = v8 + 104;
    *(void *)(v8 + 120) = 0;
    *(void *)(v8 + 128) = v8 + 120;
    *(_DWORD *)(v8 + 152) = 4000;
    *(unsigned char *)(v8 + 158) = *(unsigned char *)(v8 + 158) & 0xFE | logging_disabled;
    goto LABEL_13;
  }
  int v7 = address_family;
  if (address_family == 2)
  {
    if (nw_protocol_ip_identifier::onceToken != -1) {
      dispatch_once(&nw_protocol_ip_identifier::onceToken, &__block_literal_global_86959);
    }
    if (nw_protocol_ipv4_callbacks(void)::onceToken[0] != -1) {
      dispatch_once(nw_protocol_ipv4_callbacks(void)::onceToken, &__block_literal_global_14_86964);
    }
    uint64_t v8 = nw_protocol_new(224, (uint64_t)a3, (uint64_t)&nw_protocol_ip_identifier::identifier, nw_protocol_ipv4_callbacks(void)::callbacks);
    *(void *)(v8 + 64) = 0;
    *(void *)(v8 + 72) = v8 + 64;
    *(void *)(v8 + 80) = 0;
    *(void *)(v8 + 88) = v8 + 80;
    *(void *)(v8 + 96) = 0;
    *(void *)(v8 + 104) = v8 + 96;
    *(_DWORD *)(v8 + 112) = 4000;
    *(unsigned char *)(v8 + 136) = *(unsigned char *)(v8 + 136) & 0xFE | logging_disabled;
LABEL_13:
    if (v8) {
      return v8 - 96;
    }
    else {
      return 0;
    }
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)tcp_info buf = 136446466;
  os_log_type_t v19 = "nw_protocol_ip_create";
  __int16 v20 = 1024;
  int v21 = v7;
  uint64_t v10 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (__nwlog_fault(v10, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v11 = gLogObj;
      os_log_type_t v12 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        *(_DWORD *)tcp_info buf = 136446466;
        os_log_type_t v19 = "nw_protocol_ip_create";
        __int16 v20 = 1024;
        int v21 = v7;
        uint64_t v13 = "%{public}s Invalid address family %u";
LABEL_29:
        _os_log_impl(&dword_1830D4000, v11, v12, v13, buf, 0x12u);
      }
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v11 = gLogObj;
      os_log_type_t v12 = type;
      BOOL v15 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)tcp_info buf = 136446722;
          os_log_type_t v19 = "nw_protocol_ip_create";
          __int16 v20 = 1024;
          int v21 = v7;
          __int16 v22 = 2082;
          os_log_type_t v23 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s Invalid address family %u, dumping backtrace:%{public}s", buf, 0x1Cu);
        }
        free(backtrace_string);
        goto LABEL_30;
      }
      if (v15)
      {
        *(_DWORD *)tcp_info buf = 136446466;
        os_log_type_t v19 = "nw_protocol_ip_create";
        __int16 v20 = 1024;
        int v21 = v7;
        uint64_t v13 = "%{public}s Invalid address family %u, no backtrace";
        goto LABEL_29;
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v11 = gLogObj;
      os_log_type_t v12 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        *(_DWORD *)tcp_info buf = 136446466;
        os_log_type_t v19 = "nw_protocol_ip_create";
        __int16 v20 = 1024;
        int v21 = v7;
        uint64_t v13 = "%{public}s Invalid address family %u, backtrace limit exceeded";
        goto LABEL_29;
      }
    }
  }
LABEL_30:
  if (v10) {
    free(v10);
  }
  return 0;
}

void *nw_protocol_socket_create(const nw_protocol_identifier *a1, nw_endpoint *a2, nw_parameters *a3)
{
  if (nw_socket_protocol_identifier::onceToken != -1) {
    dispatch_once(&nw_socket_protocol_identifier::onceToken, &__block_literal_global_65117);
  }
  if (nw_socket_protocol_callbacks(void)::onceToken != -1) {
    dispatch_once(&nw_socket_protocol_callbacks(void)::onceToken, &__block_literal_global_17_65122);
  }
  CFIndex v4 = (void *)nw_protocol_new(392, (uint64_t)a3, (uint64_t)&nw_socket_protocol_identifier::identifier, nw_socket_protocol_callbacks(void)::callbacks);
  v4[25] = 0;
  v4 += 25;
  *(v4 - 17) = 0;
  *(v4 - 9) = 0;
  *((_DWORD *)v4 - 7) = -1;
  *((_DWORD *)v4 - 5) = 6159;
  v4[2] = 0;
  v4[3] = v4 + 2;
  v4[4] = 0;
  v4[5] = v4 + 4;
  v4[6] = 0;
  v4[7] = v4 + 6;
  v4[8] = 0;
  v4[9] = v4 + 8;
  v4[10] = 0;
  v4[11] = v4 + 10;
  v4[1] = v4;
  return v4 - 37;
}

uint64_t nw_protocol_new(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    os_log_type_t v25 = "nw_protocol_new";
    uint64_t v10 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (!__nwlog_fault(v10, &type, &v22)) {
      goto LABEL_39;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v25 = "nw_protocol_new";
        uint64_t v13 = "%{public}s called with null instance_size";
LABEL_38:
        _os_log_impl(&dword_1830D4000, v11, v12, v13, buf, 0xCu);
      }
LABEL_39:
      if (v10) {
        free(v10);
      }
      return 0;
    }
    if (!v22)
    {
      id v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v25 = "nw_protocol_new";
        uint64_t v13 = "%{public}s called with null instance_size, backtrace limit exceeded";
        goto LABEL_38;
      }
      goto LABEL_39;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    id v11 = __nwlog_obj();
    os_log_type_t v12 = type;
    BOOL v19 = os_log_type_enabled(v11, type);
    if (!backtrace_string)
    {
      if (v19)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v25 = "nw_protocol_new";
        uint64_t v13 = "%{public}s called with null instance_size, no backtrace";
        goto LABEL_38;
      }
      goto LABEL_39;
    }
    if (v19)
    {
      *(_DWORD *)tcp_info buf = 136446466;
      os_log_type_t v25 = "nw_protocol_new";
      __int16 v26 = 2082;
      uint64_t v27 = (uint64_t)backtrace_string;
      __int16 v20 = "%{public}s called with null instance_size, dumping backtrace:%{public}s";
LABEL_28:
      _os_log_impl(&dword_1830D4000, v11, v12, v20, buf, 0x16u);
    }
LABEL_29:
    free(backtrace_string);
    goto LABEL_39;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    os_log_type_t v25 = "nw_protocol_new";
    uint64_t v10 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (!__nwlog_fault(v10, &type, &v22)) {
      goto LABEL_39;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v25 = "nw_protocol_new";
        uint64_t v13 = "%{public}s called with null parameters";
        goto LABEL_38;
      }
      goto LABEL_39;
    }
    if (!v22)
    {
      id v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v25 = "nw_protocol_new";
        uint64_t v13 = "%{public}s called with null parameters, backtrace limit exceeded";
        goto LABEL_38;
      }
      goto LABEL_39;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    id v11 = __nwlog_obj();
    os_log_type_t v12 = type;
    BOOL v21 = os_log_type_enabled(v11, type);
    if (!backtrace_string)
    {
      if (v21)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v25 = "nw_protocol_new";
        uint64_t v13 = "%{public}s called with null parameters, no backtrace";
        goto LABEL_38;
      }
      goto LABEL_39;
    }
    if (v21)
    {
      *(_DWORD *)tcp_info buf = 136446466;
      os_log_type_t v25 = "nw_protocol_new";
      __int16 v26 = 2082;
      uint64_t v27 = (uint64_t)backtrace_string;
      __int16 v20 = "%{public}s called with null parameters, dumping backtrace:%{public}s";
      goto LABEL_28;
    }
    goto LABEL_29;
  }
  size_t v6 = a1 + 96;
  if (a1 == -96)
  {
    char v14 = __nwlog_obj();
    os_log_type_enabled(v14, OS_LOG_TYPE_ERROR);
    *(_DWORD *)tcp_info buf = 136446210;
    os_log_type_t v25 = "strict_calloc";
    BOOL v15 = (void *)_os_log_send_and_compose_impl();
    uint64_t result = __nwlog_abort((uint64_t)v15);
    if (result) {
      goto LABEL_42;
    }
    free(v15);
  }
  int v7 = malloc_type_calloc(1uLL, v6, 0xEAFB8F1AuLL);
  if (v7)
  {
    v7[3] = 0u;
    v7[4] = 0u;
    v7[1] = 0u;
    v7[2] = 0u;
    *int v7 = 0u;
    *((void *)v7 + 10) = 0;
    *((void *)v7 + 11) = 1;
    *((void *)v7 + 2) = a3;
    *((void *)v7 + 3) = a4;
    uint64_t v8 = (char *)(v7 + 6);
    *((void *)v7 + 5) = &nw_protocol_ref_counted_handle;
    return (uint64_t)v8;
  }
  char v16 = __nwlog_obj();
  os_log_type_enabled(v16, OS_LOG_TYPE_ERROR);
  *(_DWORD *)tcp_info buf = 136446722;
  os_log_type_t v25 = "strict_calloc";
  __int16 v26 = 2048;
  uint64_t v27 = 1;
  __int16 v28 = 2048;
  size_t v29 = v6;
  char v17 = (void *)_os_log_send_and_compose_impl();
  uint64_t result = __nwlog_abort((uint64_t)v17);
  if (!result)
  {
    free(v17);
    uint64_t v8 = 0;
    MEMORY[0x50] = 0;
    MEMORY[0x40] = 0u;
    MEMORY[0x30] = 0u;
    MEMORY[0x20] = 0u;
    MEMORY[0x10] = 0u;
    MEMORY[0] = 0u;
    MEMORY[0x58] = 1;
    nw_protocol_set_identifier(0, a3);
    nw_protocol_set_callbacks(0, a4);
    nw_protocol_set_handle(0, (uint64_t)&nw_protocol_ref_counted_handle);
    if ((_UNKNOWN *)MEMORY[0x28] == &nw_protocol_ref_counted_handle) {
      return 96;
    }
    return (uint64_t)v8;
  }
LABEL_42:
  __break(1u);
  return result;
}

void sub_1832E2C14(_Unwind_Exception *exception_object)
{
}

void __nw_connection_remove_data_transfer_report_block_invoke(uint64_t a1)
{
  BOOL v2 = nw_array_duplicate_array_without_object(*(void *)(*(void *)(a1 + 32) + 424), *(void **)(a1 + 40));
  uint64_t v3 = *(void *)(a1 + 32);
  CFIndex v4 = *(void **)(v3 + 424);
  *(void *)(v3 + 424) = v2;
}

BOOL nw_array_duplicate_array_without_object(uint64_t a1, void *a2)
{
  if (!a1 || *(void *)(a1 + 16) == *(void *)(a1 + 24))
  {
    return nw_array_create();
  }
  else
  {
    uint64_t v4 = nw_array_create();
    uint64_t v5 = v4;
    if (a2)
    {
      std::vector<nw_object_wrapper_t>::reserve(v4 + 16, ((uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 3) - 1);
      int v7 = *(void ***)(a1 + 16);
      size_t v6 = *(void ***)(a1 + 24);
      while (v7 != v6)
      {
        if (*v7 != a2) {
          nw_array_append(v5, *v7);
        }
        ++v7;
      }
    }
    else if (v4 == a1)
    {
      return a1;
    }
    else
    {
      std::vector<nw_object_wrapper_t>::__assign_with_size[abi:nn180100]<nw_object_wrapper_t*,nw_object_wrapper_t*>(v4 + 16, *(void ***)(a1 + 16), *(void ***)(a1 + 24), (uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 3);
    }
    return v5;
  }
}

void std::vector<nw_object_wrapper_t>::reserve(uint64_t a1, unint64_t a2)
{
  BOOL v2 = *(char **)a1;
  if (a2 <= (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) {
    return;
  }
  if (a2 >> 61) {
    abort();
  }
  uint64_t v4 = *(char **)(a1 + 8);
  uint64_t v5 = 8 * a2;
  size_t v6 = (char *)operator new(8 * a2);
  int v7 = &v6[v5];
  uint64_t v8 = v4 - v2;
  unint64_t v9 = (unint64_t)&v6[(v4 - v2) & 0xFFFFFFFFFFFFFFF8];
  if (v4 != v2)
  {
    unint64_t v10 = v8 - 8;
    if ((unint64_t)(v8 - 8) > 0x77)
    {
      BOOL v12 = &v6[(v8 & 0xFFFFFFFFFFFFFFF8) - (v10 & 0xFFFFFFFFFFFFFFF8) - 8] >= v4
         || (unint64_t)&v4[-(v10 & 0xFFFFFFFFFFFFFFF8) - 8] >= v9;
      id v11 = &v6[(v4 - v2) & 0xFFFFFFFFFFFFFFF8];
      if (v12)
      {
        uint64_t v13 = v8 >> 3;
        uint64_t v14 = (v10 >> 3) + 1;
        BOOL v15 = &v6[8 * v13 - 16];
        char v16 = v4 - 32;
        uint64_t v17 = v14 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v18 = *((_OWORD *)v16 + 1);
          *((_OWORD *)v15 - 1) = *(_OWORD *)v16;
          *(_OWORD *)BOOL v15 = v18;
          *(_OWORD *)char v16 = 0uLL;
          *((_OWORD *)v16 + 1) = 0uLL;
          v16 -= 32;
          v15 -= 32;
          v17 -= 4;
        }
        while (v17);
        id v11 = (char *)(v9 - 8 * (v14 & 0x3FFFFFFFFFFFFFFCLL));
        v4 -= 8 * (v14 & 0x3FFFFFFFFFFFFFFCLL);
        if (v14 == (v14 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_16:
          BOOL v2 = *(char **)a1;
          __int16 v20 = *(char **)(a1 + 8);
          *(void *)a1 = v11;
          *(void *)(a1 + 8) = v9;
          *(void *)(a1 + 16) = v7;
          if (v20 != v2)
          {
            BOOL v21 = v20;
            do
            {
              os_log_type_t v23 = (void *)*((void *)v21 - 1);
              v21 -= 8;
              char v22 = v23;
              if (v23) {
                os_release(v22);
              }
              *((void *)v20 - 1) = 0;
              __int16 v20 = v21;
            }
            while (v21 != v2);
          }
          goto LABEL_21;
        }
      }
    }
    else
    {
      id v11 = &v6[(v4 - v2) & 0xFFFFFFFFFFFFFFF8];
    }
    do
    {
      uint64_t v19 = *((void *)v4 - 1);
      v4 -= 8;
      *((void *)v11 - 1) = v19;
      v11 -= 8;
      *(void *)uint64_t v4 = 0;
    }
    while (v4 != v2);
    goto LABEL_16;
  }
  *(void *)a1 = v9;
  *(void *)(a1 + 8) = v9;
  *(void *)(a1 + 16) = v7;
LABEL_21:
  if (v2)
  {
    operator delete(v2);
  }
}

uint64_t __nw_path_evaluator_call_update_handler_block_invoke(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (__nwlog_path_log::onceToken != -1) {
    dispatch_once(&__nwlog_path_log::onceToken, &__block_literal_global_48_44893);
  }
  BOOL v2 = (id)gpathLogObj;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(a1 + 32) + 80;
    int v5 = 136446722;
    size_t v6 = "nw_path_evaluator_call_update_handler_block_invoke";
    __int16 v7 = 1042;
    int v8 = 16;
    __int16 v9 = 2098;
    uint64_t v10 = v3;
    _os_log_impl(&dword_1830D4000, v2, OS_LOG_TYPE_INFO, "%{public}s [%{public,uuid_t}.16P] delivering update", (uint8_t *)&v5, 0x1Cu);
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16))();
}

uint64_t nw_application_id_create_self()
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  int v14 = 0;
  *(_OWORD *)__n = 0u;
  long long v13 = 0u;
  long long v11 = 0u;
  if (nw_context_copy_implicit_context::onceToken != -1) {
    dispatch_once(&nw_context_copy_implicit_context::onceToken, &__block_literal_global_18);
  }
  id v0 = (id)nw_context_copy_implicit_context::implicit_context;
  nw_path_shared_necp_fd(v0);

  if (necp_client_action())
  {
    int v1 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v2 = (id)gLogObj;
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)tcp_info buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_application_id_create_self";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = v1;
      _os_log_impl(&dword_1830D4000, v2, OS_LOG_TYPE_ERROR, "%{public}s NECP_CLIENT_ACTION_GET_SIGNED_CLIENT_ID %{darwin.errno}d", buf, 0x12u);
    }

    return 0;
  }
  else
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v5 = (id)gLogObj;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)tcp_info buf = 136446722;
      *(void *)&uint8_t buf[4] = "nw_application_id_create_self";
      *(_WORD *)&unsigned char buf[12] = 1040;
      *(_DWORD *)&buf[14] = 16;
      __int16 v9 = 2096;
      uint64_t v10 = &v11;
      _os_log_impl(&dword_1830D4000, v5, OS_LOG_TYPE_DEFAULT, "%{public}s Got client UUID=%{uuid_t}.16P", buf, 0x1Cu);
    }

    uint64_t v6 = nw_application_id_create_with_uuid((unsigned __int8 *)&v11);
    uint64_t v3 = v6;
    if (v6)
    {
      size_t v7 = LODWORD(__n[0]);
      if (LODWORD(__n[0]))
      {
        if (LODWORD(__n[0]) <= 0x20)
        {
          *(_DWORD *)(v6 + 32) = __n[0];
          memcpy((void *)(v6 + 36), (char *)__n + 4, v7);
          *(void *)tcp_info buf = 0;
          *(void *)&sockaddr buf[8] = 0;
          if (nw_application_id_get_current_persona(buf)) {
            *(_OWORD *)(v3 + 88) = *(_OWORD *)buf;
          }
        }
      }
    }
  }
  return v3;
}

void sub_1832E322C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_application_id_get_current_persona(unsigned __int8 *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uuid_clear(a1);
  gotLoadHelper_x19__OBJC_CLASS___UMUserManager(v3);
  if (objc_opt_class())
  {
    uint64_t v4 = [*(id *)(v1 + 1776) sharedManager];
    int v5 = [v4 currentPersona];
    uint64_t v6 = [v5 userPersonaUniqueString];

    if (v6)
    {
      size_t v7 = [objc_alloc(MEMORY[0x1E4F29128]) initWithUUIDString:v6];
      int v8 = v7;
      if (v7)
      {
        [v7 getUUIDBytes:a1];
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        __int16 v9 = (id)gLogObj;
        if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
        {
          int v13 = 136446722;
          int v14 = "nw_application_id_get_current_persona";
          __int16 v15 = 1040;
          int v16 = 16;
          __int16 v17 = 2096;
          long long v18 = a1;
          _os_log_impl(&dword_1830D4000, v9, OS_LOG_TYPE_INFO, "%{public}s Current persona id is '%{uuid_t}.16P'", (uint8_t *)&v13, 0x1Cu);
        }

        uint64_t v10 = 1;
        goto LABEL_14;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v8 = (id)gLogObj;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        int v13 = 136446210;
        int v14 = "nw_application_id_get_current_persona";
        long long v11 = "%{public}s Failed to get current persona id, personaUniqueIdentifier is not a valid UUID";
        goto LABEL_12;
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v8 = (id)gLogObj;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        int v13 = 136446210;
        int v14 = "nw_application_id_get_current_persona";
        long long v11 = "%{public}s Failed to get current persona id, no personaUniqueIdentifier set";
LABEL_12:
        _os_log_impl(&dword_1830D4000, v8, OS_LOG_TYPE_ERROR, v11, (uint8_t *)&v13, 0xCu);
      }
    }
    uint64_t v10 = 0;
LABEL_14:

    return v10;
  }
  return 0;
}

void sub_1832E34BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_parameters_copy_application_id(void *a1)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  BOOL v2 = v1;
  if (!v1)
  {
    int v14 = __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_parameters_copy_application_id";
    __int16 v15 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(v29) = 16;
    uu[0] = 0;
    if (__nwlog_fault(v15, &v29, uu))
    {
      if (v29 == 17)
      {
        int v16 = __nwlog_obj();
        os_log_type_t v17 = v29;
        if (os_log_type_enabled(v16, (os_log_type_t)v29))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_parameters_copy_application_id";
          _os_log_impl(&dword_1830D4000, v16, v17, "%{public}s called with null parameters", buf, 0xCu);
        }
      }
      else if (uu[0])
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        int v16 = __nwlog_obj();
        os_log_type_t v20 = v29;
        BOOL v21 = os_log_type_enabled(v16, (os_log_type_t)v29);
        if (backtrace_string)
        {
          if (v21)
          {
            *(_DWORD *)tcp_info buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_parameters_copy_application_id";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = backtrace_string;
            _os_log_impl(&dword_1830D4000, v16, v20, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_51;
        }
        if (v21)
        {
          *(_DWORD *)tcp_info buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_parameters_copy_application_id";
          _os_log_impl(&dword_1830D4000, v16, v20, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        int v16 = __nwlog_obj();
        os_log_type_t v25 = v29;
        if (os_log_type_enabled(v16, (os_log_type_t)v29))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_parameters_copy_application_id";
          _os_log_impl(&dword_1830D4000, v16, v25, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_51:
    if (v15) {
      free(v15);
    }
    id v7 = 0;
    goto LABEL_26;
  }
  long long v29 = 0u;
  long long v30 = 0u;
  double v3 = (char *)v1;
  uint64_t v4 = v3;
  long long v5 = *(_OWORD *)(v3 + 56);
  *(_OWORD *)tcp_info buf = *(_OWORD *)(v3 + 40);
  *(_OWORD *)&buf[16] = v5;
  if (*(void *)buf | *(void *)&buf[8] | (unint64_t)v5 | *((void *)&v5 + 1))
  {
    long long v6 = *(_OWORD *)(v3 + 56);
    long long v29 = *(_OWORD *)(v3 + 40);
    long long v30 = v6;
  }

  v26[2] = v29;
  v26[3] = v30;
  if ((unint64_t)v29 | *((void *)&v29 + 1) | (unint64_t)v30 | *((void *)&v30 + 1))
  {
    v26[0] = v29;
    v26[1] = v30;
    id v7 = (id)nw_application_id_create_with_audit_token(v26);
    if (gLogDatapath)
    {
      int v8 = __nwlog_obj();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)tcp_info buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_parameters_copy_application_id";
        *(_WORD *)&unsigned char buf[12] = 2112;
        *(void *)&buf[14] = v7;
        _os_log_impl(&dword_1830D4000, v8, OS_LOG_TYPE_DEBUG, "%{public}s getting application ID %@ from parameters audit token", buf, 0x16u);
      }
    }
  }
  else
  {
    id v7 = 0;
  }
  *(_OWORD *)uuid_t uu = *(_OWORD *)(*((void *)v4 + 13) + 24);
  if (!uuid_is_null(uu))
  {
    if (v7)
    {
      id v7 = v7;
      *((_OWORD *)v7 + 1) = *(_OWORD *)uu;

      if (!gLogDatapath) {
        goto LABEL_15;
      }
    }
    else
    {
      id v7 = (id)nw_application_id_create_with_uuid(uu);
      if (!gLogDatapath) {
        goto LABEL_15;
      }
    }
    uint64_t v24 = __nwlog_obj();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)tcp_info buf = 136446978;
      *(void *)&uint8_t buf[4] = "nw_parameters_copy_application_id";
      *(_WORD *)&unsigned char buf[12] = 2112;
      *(void *)&buf[14] = v7;
      *(_WORD *)&unsigned char buf[22] = 1040;
      *(_DWORD *)&unsigned char buf[24] = 16;
      *(_WORD *)&buf[28] = 2096;
      *(void *)&buf[30] = uu;
      _os_log_impl(&dword_1830D4000, v24, OS_LOG_TYPE_DEBUG, "%{public}s getting application ID %@ from parameters UUID: %{uuid_t}.16P", buf, 0x26u);
    }
  }
LABEL_15:
  __int16 v9 = (const char *)*((void *)v4 + 14);
  if (!v9) {
    goto LABEL_23;
  }
  if (!v7)
  {
    *(void *)tcp_info buf = 0;
    *(void *)&sockaddr buf[8] = 0;
    id v7 = (id)-[NWConcrete_nw_application_id initWithUUID:auditToken:pid:bundleID:isBundleIDExternal:systemService:]([NWConcrete_nw_application_id alloc], buf, 0, v9, 0);
    if (gLogDatapath)
    {
LABEL_32:
      long long v18 = __nwlog_obj();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)tcp_info buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_parameters_copy_application_id";
        *(_WORD *)&unsigned char buf[12] = 2112;
        *(void *)&buf[14] = v7;
        *(_WORD *)&unsigned char buf[22] = 2080;
        *(void *)&unsigned char buf[24] = v9;
        _os_log_impl(&dword_1830D4000, v18, OS_LOG_TYPE_DEBUG, "%{public}s getting application ID %@ from parameters bundle ID: %s", buf, 0x20u);
      }
    }
LABEL_23:
    *(_OWORD *)tcp_info buf = *(_OWORD *)(*((void *)v4 + 13) + 40);
    uuid_is_null(buf);
    if (v7)
    {
      if (!uuid_is_null(buf))
      {
        BOOL v12 = (char *)v7;
        *(_OWORD *)(v12 + 88) = *(_OWORD *)buf;
      }
    }
LABEL_26:

    return (BOOL)v7;
  }
  id v7 = v7;
  uint64_t v10 = (void *)*((void *)v7 + 10);
  if (v10)
  {
    free(v10);
    *((void *)v7 + 10) = 0;
  }
  long long v11 = strdup(v9);
  if (v11)
  {
LABEL_20:
    *((void *)v7 + 10) = v11;
    *((unsigned char *)v7 + 104) = 0;
    nw_application_id_validate_bundle_id((NWConcrete_nw_application_id *)v7);

    if (gLogDatapath) {
      goto LABEL_32;
    }
    goto LABEL_23;
  }
  char v22 = __nwlog_obj();
  os_log_type_enabled(v22, OS_LOG_TYPE_ERROR);
  *(_DWORD *)tcp_info buf = 136446210;
  *(void *)&uint8_t buf[4] = "strict_strdup";
  os_log_type_t v23 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v23);
  if (!result)
  {
    free(v23);
    goto LABEL_20;
  }
  __break(1u);
  return result;
}

void sub_1832E3B0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1832E3B48(void *a1)
{
  return NWApplicationID.encode(to:)(a1);
}

uint64_t NWApplicationID.encode(to:)(void *a1)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = sub_183D444AC();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  long long v6 = (char *)&v24[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v7 = *v1;
  __swift_project_boxed_opaque_existential_2(a1, a1[3]);
  sub_183D45BDC();
  v24[0] = 0;
  BOOL v8 = nw_application_id_copy_serialized_bytes(v7, v24);
  uint64_t v9 = (uint64_t)v24[0];
  (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, *MEMORY[0x1E4F27730], v3);
  sub_183D4449C();
  if (!v9)
  {
    int v13 = (void (*)(BOOL, void))sub_183D4449C();
    v13(v8, 0);
    swift_release();
    swift_release();
    uint64_t v11 = 0;
    BOOL v12 = (char *)0xC000000000000000;
    goto LABEL_18;
  }
  sub_183D4439C();
  swift_allocObject();
  swift_retain();
  uint64_t v10 = sub_183D4432C();
  if (v9 >= 15)
  {
    if ((unint64_t)v9 >= 0x7FFFFFFF)
    {
      sub_183D444DC();
      uint64_t v11 = swift_allocObject();
      *(void *)(v11 + 16) = 0;
      *(void *)(v11 + 24) = v9;
      swift_release();
      BOOL v12 = (char *)(v10 | 0x8000000000000000);
    }
    else
    {
      swift_release();
      uint64_t v11 = v9 << 32;
      BOOL v12 = (char *)(v10 | 0x4000000000000000);
    }
    goto LABEL_18;
  }
  if (v9 < 0)
  {
    __break(1u);
    goto LABEL_20;
  }
  int v14 = (unsigned char *)sub_183D4434C();
  if (v14)
  {
    uint64_t v15 = sub_183D4437C();
    if (!__OFSUB__(0, v15))
    {
      v14 -= v15;
      goto LABEL_10;
    }
LABEL_20:
    __break(1u);
  }
LABEL_10:
  uint64_t v16 = sub_183D4436C();
  if (v16 >= v9) {
    uint64_t v17 = v9;
  }
  else {
    uint64_t v17 = v16;
  }
  long long v18 = &v14[v17];
  if (v14) {
    uint64_t v19 = v18;
  }
  else {
    uint64_t v19 = 0;
  }
  uint64_t v11 = sub_1834D7CD4(v14, v19);
  uint64_t v21 = v20;
  swift_release();
  swift_release();
  BOOL v12 = (char *)(v21 & 0xFFFFFFFFFFFFFFLL);
LABEL_18:
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  v24[1] = (char *)v11;
  v24[2] = v12;
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v25, v26);
  sub_1832E478C();
  sub_183D458EC();
  sub_1832E5E9C(v11, (unint64_t)v12);
  return __swift_destroy_boxed_opaque_existential_2((uint64_t)v25);
}

uint64_t __swift_mutable_project_boxed_opaque_existential_1(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

BOOL nw_application_id_copy_serialized_bytes(void *a1, char **a2)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1;
  uint64_t v4 = (unsigned __int8 *)v3;
  if (!v3)
  {
    uint64_t v19 = __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    __int16 v37 = "nw_application_id_copy_serialized_bytes";
    uint64_t v20 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v34 = 0;
    if (!__nwlog_fault(v20, &type, &v34)) {
      goto LABEL_64;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v21 = __nwlog_obj();
      os_log_type_t v22 = type;
      if (os_log_type_enabled(v21, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        __int16 v37 = "nw_application_id_copy_serialized_bytes";
        _os_log_impl(&dword_1830D4000, v21, v22, "%{public}s called with null application_id", buf, 0xCu);
      }
      goto LABEL_63;
    }
    if (!v34)
    {
      uint64_t v21 = __nwlog_obj();
      os_log_type_t v30 = type;
      if (os_log_type_enabled(v21, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        __int16 v37 = "nw_application_id_copy_serialized_bytes";
        _os_log_impl(&dword_1830D4000, v21, v30, "%{public}s called with null application_id, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_63;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v21 = __nwlog_obj();
    os_log_type_t v26 = type;
    BOOL v27 = os_log_type_enabled(v21, type);
    if (!backtrace_string)
    {
      if (v27)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        __int16 v37 = "nw_application_id_copy_serialized_bytes";
        _os_log_impl(&dword_1830D4000, v21, v26, "%{public}s called with null application_id, no backtrace", buf, 0xCu);
      }
      goto LABEL_63;
    }
    if (v27)
    {
      *(_DWORD *)tcp_info buf = 136446466;
      __int16 v37 = "nw_application_id_copy_serialized_bytes";
      __int16 v38 = 2082;
      uint64_t v39 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v21, v26, "%{public}s called with null application_id, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_49;
  }
  if (!a2)
  {
    os_log_type_t v23 = __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    __int16 v37 = "nw_application_id_copy_serialized_bytes";
    uint64_t v20 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v34 = 0;
    if (!__nwlog_fault(v20, &type, &v34)) {
      goto LABEL_64;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v21 = __nwlog_obj();
      os_log_type_t v24 = type;
      if (os_log_type_enabled(v21, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        __int16 v37 = "nw_application_id_copy_serialized_bytes";
        _os_log_impl(&dword_1830D4000, v21, v24, "%{public}s called with null length", buf, 0xCu);
      }
LABEL_63:

LABEL_64:
      if (v20) {
        free(v20);
      }
      goto LABEL_5;
    }
    if (!v34)
    {
      uint64_t v21 = __nwlog_obj();
      os_log_type_t v31 = type;
      if (os_log_type_enabled(v21, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        __int16 v37 = "nw_application_id_copy_serialized_bytes";
        _os_log_impl(&dword_1830D4000, v21, v31, "%{public}s called with null length, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_63;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v21 = __nwlog_obj();
    os_log_type_t v28 = type;
    BOOL v29 = os_log_type_enabled(v21, type);
    if (!backtrace_string)
    {
      if (v29)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        __int16 v37 = "nw_application_id_copy_serialized_bytes";
        _os_log_impl(&dword_1830D4000, v21, v28, "%{public}s called with null length, no backtrace", buf, 0xCu);
      }
      goto LABEL_63;
    }
    if (v29)
    {
      *(_DWORD *)tcp_info buf = 136446466;
      __int16 v37 = "nw_application_id_copy_serialized_bytes";
      __int16 v38 = 2082;
      uint64_t v39 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v21, v28, "%{public}s called with null length, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_49:

    free(backtrace_string);
    goto LABEL_64;
  }
  *a2 = 0;
  if (uuid_is_null(v3 + 16) || (uint64_t v5 = *((unsigned int *)v4 + 8), v5 > 0x20))
  {
LABEL_5:
    long long v6 = 0;
LABEL_6:

    return (BOOL)v6;
  }
  BOOL v8 = (char *)(v5 + 36);
  long long v6 = malloc_type_malloc(v5 + 36, 0xF2B69DE5uLL);
  if (v6)
  {
LABEL_8:
    _OWORD *v6 = *((_OWORD *)v4 + 1);
    v6[1] = *(_OWORD *)(v4 + 88);
    size_t v9 = *((unsigned int *)v4 + 8);
    *((_DWORD *)v6 + 8) = v9;
    uint64_t v10 = (char *)v6 + 36;
    if (v9)
    {
      memcpy((char *)v6 + 36, v4 + 36, v9);
      v10 += *((unsigned int *)v4 + 8);
    }
    *a2 = v8;
    if ((char *)(v10 - (char *)v6) == v8) {
      goto LABEL_6;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v11 = (id)gLogObj;
    *(_DWORD *)tcp_info buf = 136447234;
    __int16 v37 = "nw_application_id_copy_serialized_bytes";
    __int16 v38 = 2048;
    uint64_t v39 = v10;
    __int16 v40 = 2048;
    BOOL v41 = v6;
    __int16 v42 = 2048;
    int64_t v43 = v10 - (char *)v6;
    __int16 v44 = 2048;
    uint64_t v45 = v8;
    BOOL v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v34 = 0;
    if (__nwlog_fault(v12, &type, &v34))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v13 = (id)gLogObj;
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)tcp_info buf = 136447234;
          __int16 v37 = "nw_application_id_copy_serialized_bytes";
          __int16 v38 = 2048;
          uint64_t v39 = v10;
          __int16 v40 = 2048;
          BOOL v41 = v6;
          __int16 v42 = 2048;
          int64_t v43 = v10 - (char *)v6;
          __int16 v44 = 2048;
          uint64_t v45 = v8;
          _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s serialized bytes are the wrong size, cursor %p, serialized data %p, difference %ld, length needed %zu", buf, 0x34u);
        }
      }
      else if (v34)
      {
        uint64_t v15 = (char *)__nw_create_backtrace_string();
        int v13 = __nwlog_obj();
        os_log_type_t v16 = type;
        BOOL v17 = os_log_type_enabled(v13, type);
        if (v15)
        {
          if (v17)
          {
            *(_DWORD *)tcp_info buf = 136447490;
            __int16 v37 = "nw_application_id_copy_serialized_bytes";
            __int16 v38 = 2048;
            uint64_t v39 = v10;
            __int16 v40 = 2048;
            BOOL v41 = v6;
            __int16 v42 = 2048;
            int64_t v43 = v10 - (char *)v6;
            __int16 v44 = 2048;
            uint64_t v45 = v8;
            __int16 v46 = 2082;
            uint64_t v47 = v15;
            _os_log_impl(&dword_1830D4000, v13, v16, "%{public}s serialized bytes are the wrong size, cursor %p, serialized data %p, difference %ld, length needed %zu, dumping backtrace:%{public}s", buf, 0x3Eu);
          }

          free(v15);
          if (!v12) {
            goto LABEL_6;
          }
          goto LABEL_29;
        }
        if (v17)
        {
          *(_DWORD *)tcp_info buf = 136447234;
          __int16 v37 = "nw_application_id_copy_serialized_bytes";
          __int16 v38 = 2048;
          uint64_t v39 = v10;
          __int16 v40 = 2048;
          BOOL v41 = v6;
          __int16 v42 = 2048;
          int64_t v43 = v10 - (char *)v6;
          __int16 v44 = 2048;
          uint64_t v45 = v8;
          _os_log_impl(&dword_1830D4000, v13, v16, "%{public}s serialized bytes are the wrong size, cursor %p, serialized data %p, difference %ld, length needed %zu, no backtrace", buf, 0x34u);
        }
      }
      else
      {
        int v13 = __nwlog_obj();
        os_log_type_t v18 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)tcp_info buf = 136447234;
          __int16 v37 = "nw_application_id_copy_serialized_bytes";
          __int16 v38 = 2048;
          uint64_t v39 = v10;
          __int16 v40 = 2048;
          BOOL v41 = v6;
          __int16 v42 = 2048;
          int64_t v43 = v10 - (char *)v6;
          __int16 v44 = 2048;
          uint64_t v45 = v8;
          _os_log_impl(&dword_1830D4000, v13, v18, "%{public}s serialized bytes are the wrong size, cursor %p, serialized data %p, difference %ld, length needed %zu, backtrace limit exceeded", buf, 0x34u);
        }
      }
    }
    if (!v12) {
      goto LABEL_6;
    }
LABEL_29:
    free(v12);
    goto LABEL_6;
  }
  BOOL v32 = __nwlog_obj();
  os_log_type_enabled(v32, OS_LOG_TYPE_ERROR);
  *(_DWORD *)tcp_info buf = 136446466;
  __int16 v37 = "strict_malloc";
  __int16 v38 = 2048;
  uint64_t v39 = v8;
  char v33 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v33);
  if (!result)
  {
    free(v33);
    goto LABEL_8;
  }
  __break(1u);
  return result;
}

void sub_1832E4774(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

unint64_t sub_1832E478C()
{
  unint64_t result = qword_1E8F61EE8;
  if (!qword_1E8F61EE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F61EE8);
  }
  return result;
}

uint64_t sub_1832E47E0@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return NWApplicationID.init(from:)(a1, a2);
}

uint64_t NWApplicationID.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  __swift_project_boxed_opaque_existential_2(a1, a1[3]);
  sub_183D45B9C();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_2((uint64_t)a1);
  }
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v23, v24);
  sub_1832E5D18();
  sub_183D458BC();
  long long v5 = v22[0];
  switch(*((void *)&v22[0] + 1) >> 62)
  {
    case 1:
      if (*(uint64_t *)&v22[0] >> 32 < SLODWORD(v22[0]))
      {
        __break(1u);
LABEL_29:
        __break(1u);
        goto LABEL_30;
      }
      sub_1832E5D6C(*(uint64_t *)&v22[0], *((unint64_t *)&v22[0] + 1));
      uint64_t v7 = sub_183D4434C();
      if (v7)
      {
        uint64_t v8 = v7;
        uint64_t v9 = sub_183D4437C();
        uint64_t v10 = SLODWORD(v22[0]) - v9;
        if (!__OFSUB__(SLODWORD(v22[0]), v9))
        {
          uint64_t v11 = sub_183D4436C();
          if (v11 >= (*(uint64_t *)&v22[0] >> 32) - SLODWORD(v22[0])) {
            unint64_t v12 = (*(uint64_t *)&v22[0] >> 32) - SLODWORD(v22[0]);
          }
          else {
            unint64_t v12 = v11;
          }
          uint64_t v13 = nw_application_id_create_with_serialized_bytes((long long *)(v8 + v10), v12);
          sub_1832E5E9C(*(uint64_t *)&v22[0], *((unint64_t *)&v22[0] + 1));
LABEL_24:
          if (v13)
          {
            sub_1832E5E9C(v5, *((unint64_t *)&v5 + 1));
            __swift_destroy_boxed_opaque_existential_2((uint64_t)v23);
            *a2 = v13;
          }
          else
          {
            sub_1834BDE24((uint64_t)v23, (uint64_t)v22);
            sub_183D4554C();
            swift_allocError();
            sub_183D4551C();
            __swift_destroy_boxed_opaque_existential_2((uint64_t)v22);
            swift_willThrow();
            sub_1832E5E9C(v5, *((unint64_t *)&v5 + 1));
            __swift_destroy_boxed_opaque_existential_2((uint64_t)v23);
          }
          return __swift_destroy_boxed_opaque_existential_2((uint64_t)a1);
        }
LABEL_30:
        __break(1u);
LABEL_31:
        __break(1u);
      }
      uint64_t result = sub_183D4436C();
      __break(1u);
LABEL_33:
      __break(1u);
      return result;
    case 2:
      uint64_t v14 = *(void *)(*(void *)&v22[0] + 16);
      uint64_t v15 = *(void *)(*(void *)&v22[0] + 24);
      swift_retain();
      swift_retain();
      os_log_type_t v16 = (long long *)sub_183D4434C();
      if (!v16) {
        goto LABEL_16;
      }
      uint64_t v17 = sub_183D4437C();
      if (__OFSUB__(v14, v17)) {
        goto LABEL_31;
      }
      os_log_type_t v16 = (long long *)((char *)v16 + v14 - v17);
LABEL_16:
      BOOL v18 = __OFSUB__(v15, v14);
      int64_t v19 = v15 - v14;
      if (v18) {
        goto LABEL_29;
      }
      uint64_t result = sub_183D4436C();
      if (!v16) {
        goto LABEL_33;
      }
      if (result >= v19) {
        unint64_t v21 = v19;
      }
      else {
        unint64_t v21 = result;
      }
      uint64_t v13 = nw_application_id_create_with_serialized_bytes(v16, v21);
      swift_release();
      swift_release();
      goto LABEL_24;
    case 3:
      *(void *)((char *)v22 + 6) = 0;
      *(void *)&v22[0] = 0;
      unint64_t v6 = 0;
      goto LABEL_23;
    default:
      unint64_t v6 = BYTE14(v22[0]);
LABEL_23:
      uint64_t v13 = nw_application_id_create_with_serialized_bytes(v22, v6);
      goto LABEL_24;
  }
}

uint64_t __swift_destroy_boxed_opaque_existential_2(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t nw_application_id_create_with_serialized_bytes(long long *a1, unint64_t a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    uint64_t v8 = __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_application_id_create_with_serialized_bytes";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (!__nwlog_fault(v9, type, &v26)) {
      goto LABEL_56;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      uint64_t v10 = __nwlog_obj();
      os_log_type_t v11 = type[0];
      if (os_log_type_enabled(v10, type[0]))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_application_id_create_with_serialized_bytes";
        _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null data", buf, 0xCu);
      }
      goto LABEL_55;
    }
    if (!v26)
    {
      uint64_t v10 = __nwlog_obj();
      os_log_type_t v23 = type[0];
      if (os_log_type_enabled(v10, type[0]))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_application_id_create_with_serialized_bytes";
        _os_log_impl(&dword_1830D4000, v10, v23, "%{public}s called with null data, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_55;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v10 = __nwlog_obj();
    os_log_type_t v17 = type[0];
    BOOL v18 = os_log_type_enabled(v10, type[0]);
    if (!backtrace_string)
    {
      if (v18)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_application_id_create_with_serialized_bytes";
        _os_log_impl(&dword_1830D4000, v10, v17, "%{public}s called with null data, no backtrace", buf, 0xCu);
      }
      goto LABEL_55;
    }
    if (v18)
    {
      *(_DWORD *)tcp_info buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_application_id_create_with_serialized_bytes";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = backtrace_string;
      _os_log_impl(&dword_1830D4000, v10, v17, "%{public}s called with null data, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_37:

    free(backtrace_string);
    goto LABEL_56;
  }
  if (a2 <= 0x23)
  {
    unint64_t v12 = __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_application_id_create_with_serialized_bytes";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (!__nwlog_fault(v9, type, &v26)) {
      goto LABEL_56;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      uint64_t v10 = __nwlog_obj();
      os_log_type_t v13 = type[0];
      if (os_log_type_enabled(v10, type[0]))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_application_id_create_with_serialized_bytes";
        _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null (length >= (sizeof(uuid_t) + sizeof(uuid_t) + sizeof(uint32_t)))", buf, 0xCu);
      }
      goto LABEL_55;
    }
    if (!v26)
    {
      uint64_t v10 = __nwlog_obj();
      os_log_type_t v24 = type[0];
      if (os_log_type_enabled(v10, type[0]))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_application_id_create_with_serialized_bytes";
        _os_log_impl(&dword_1830D4000, v10, v24, "%{public}s called with null (length >= (sizeof(uuid_t) + sizeof(uuid_t) + sizeof(uint32_t))), backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_55;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v10 = __nwlog_obj();
    os_log_type_t v19 = type[0];
    BOOL v20 = os_log_type_enabled(v10, type[0]);
    if (!backtrace_string)
    {
      if (v20)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_application_id_create_with_serialized_bytes";
        _os_log_impl(&dword_1830D4000, v10, v19, "%{public}s called with null (length >= (sizeof(uuid_t) + sizeof(uuid_t) + sizeof(uint32_t))), no backtrace", buf, 0xCu);
      }
      goto LABEL_55;
    }
    if (v20)
    {
      *(_DWORD *)tcp_info buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_application_id_create_with_serialized_bytes";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = backtrace_string;
      _os_log_impl(&dword_1830D4000, v10, v19, "%{public}s called with null (length >= (sizeof(uuid_t) + sizeof(uuid_t) + sizeof(uint32_t))), dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_37;
  }
  if (a2 < 0x45)
  {
    long long v3 = *a1;
    *(_OWORD *)os_log_type_t type = a1[1];
    *(_OWORD *)tcp_info buf = v3;
    uint64_t v4 = nw_application_id_create_with_uuid(buf);
    uint64_t v5 = v4;
    if (v4)
    {
      *(_OWORD *)(v4 + 88) = *(_OWORD *)type;
      size_t v6 = *((unsigned int *)a1 + 8);
      *(_DWORD *)(v4 + 32) = v6;
      if ((v6 - 1) <= 0x1F) {
        memcpy((void *)(v4 + 36), (char *)a1 + 36, v6);
      }
    }
    return v5;
  }
  uint64_t v14 = __nwlog_obj();
  *(_DWORD *)tcp_info buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_application_id_create_with_serialized_bytes";
  uint64_t v9 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  char v26 = 0;
  if (__nwlog_fault(v9, type, &v26))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      uint64_t v10 = __nwlog_obj();
      os_log_type_t v15 = type[0];
      if (os_log_type_enabled(v10, type[0]))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_application_id_create_with_serialized_bytes";
        _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null (length <= (sizeof(uuid_t) + sizeof(uuid_t) + sizeof(uint32_t) + 32))", buf, 0xCu);
      }
LABEL_55:

      goto LABEL_56;
    }
    if (!v26)
    {
      uint64_t v10 = __nwlog_obj();
      os_log_type_t v25 = type[0];
      if (os_log_type_enabled(v10, type[0]))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_application_id_create_with_serialized_bytes";
        _os_log_impl(&dword_1830D4000, v10, v25, "%{public}s called with null (length <= (sizeof(uuid_t) + sizeof(uuid_t) + sizeof(uint32_t) + 32)), backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_55;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v10 = __nwlog_obj();
    os_log_type_t v21 = type[0];
    BOOL v22 = os_log_type_enabled(v10, type[0]);
    if (!backtrace_string)
    {
      if (v22)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_application_id_create_with_serialized_bytes";
        _os_log_impl(&dword_1830D4000, v10, v21, "%{public}s called with null (length <= (sizeof(uuid_t) + sizeof(uuid_t) + sizeof(uint32_t) + 32)), no backtrace", buf, 0xCu);
      }
      goto LABEL_55;
    }
    if (v22)
    {
      *(_DWORD *)tcp_info buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_application_id_create_with_serialized_bytes";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = backtrace_string;
      _os_log_impl(&dword_1830D4000, v10, v21, "%{public}s called with null (length <= (sizeof(uuid_t) + sizeof(uuid_t) + sizeof(uint32_t) + 32)), dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_37;
  }
LABEL_56:
  if (v9) {
    free(v9);
  }
  return 0;
}

BOOL nw_application_id_create_with_uuid(unsigned __int8 *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (!uuid_is_null(a1))
  {
    uint64_t v2 = [NWConcrete_nw_application_id alloc];
    return -[NWConcrete_nw_application_id initWithUUID:auditToken:pid:bundleID:isBundleIDExternal:systemService:](v2, a1, 0, 0, 0);
  }
  uint64_t v4 = __nwlog_obj();
  *(_DWORD *)tcp_info buf = 136446210;
  uint64_t v14 = "nw_application_id_create_with_uuid";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (__nwlog_fault(v5, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      size_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint64_t v14 = "nw_application_id_create_with_uuid";
        uint64_t v8 = "%{public}s uuid is null";
LABEL_18:
        _os_log_impl(&dword_1830D4000, v6, v7, v8, buf, 0xCu);
      }
    }
    else
    {
      if (v11)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        size_t v6 = __nwlog_obj();
        os_log_type_t v7 = type;
        BOOL v10 = os_log_type_enabled(v6, type);
        if (backtrace_string)
        {
          if (v10)
          {
            *(_DWORD *)tcp_info buf = 136446466;
            uint64_t v14 = "nw_application_id_create_with_uuid";
            __int16 v15 = 2082;
            os_log_type_t v16 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s uuid is null, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_20;
        }
        if (!v10) {
          goto LABEL_19;
        }
        *(_DWORD *)tcp_info buf = 136446210;
        uint64_t v14 = "nw_application_id_create_with_uuid";
        uint64_t v8 = "%{public}s uuid is null, no backtrace";
        goto LABEL_18;
      }
      size_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint64_t v14 = "nw_application_id_create_with_uuid";
        uint64_t v8 = "%{public}s uuid is null, backtrace limit exceeded";
        goto LABEL_18;
      }
    }
LABEL_19:
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
  return 0;
}

void sub_1832E5CE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

unint64_t sub_1832E5D18()
{
  unint64_t result = qword_1E8F61DB0;
  if (!qword_1E8F61DB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8F61DB0);
  }
  return result;
}

uint64_t sub_1832E5D6C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }

  return swift_retain();
}

void sub_1832E5DC4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = *(void (**)(void *, uint64_t, uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  id v10 = a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  v9(a2, a3, a4, a5);
  swift_release();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
}

uint64_t sub_1832E5E74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1835742CC(a1, a2, a3, a4, *(void *)(v4 + 16), *(void *)(v4 + 24));
}

uint64_t sub_1832E5E80(void *a1, uint64_t a2, char a3, uint64_t a4)
{
  return sub_1832E5EF4(a1, a2, a3, a4, *(void (**)(uint64_t, unint64_t, void *, void, unsigned char *))(v4 + 16));
}

uint64_t sub_1832E5E9C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }

  return swift_release();
}

uint64_t sub_1832E5EF4(void *a1, uint64_t a2, char a3, uint64_t a4, void (*a5)(uint64_t, unint64_t, void *, void, unsigned char *))
{
  os_log_type_t v7 = NWCreateNSDataFromDispatchData(a1);
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = sub_183D4453C();
    unint64_t v11 = v10;
  }
  else
  {
    uint64_t v9 = 0;
    unint64_t v11 = 0xF000000000000000;
  }
  unint64_t v12 = swift_unknownObjectRetain();
  os_log_type_t v13 = sub_1832E5FFC(v12);
  uint64_t v14 = swift_unknownObjectRetain();
  sub_1832E6D08(v14, (uint64_t)v16);
  a5(v9, v11, v13, a3 & 1, v16);
  swift_release();

  return sub_1832E669C(v9, v11);
}

void *NWCreateNSDataFromDispatchData(void *a1)
{
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1) {
    id v3 = v1;
  }

  return v2;
}

void *sub_1832E5FFC(NSObject *a1)
{
  type metadata accessor for NWConnection.ContentContext();
  uint64_t v2 = (void *)swift_allocObject();
  id v3 = v2;
  if (a1)
  {
    v2[2] = a1;
    v2[6] = 0;
    v2[7] = 0;
    v2[5] = 0;
    uint64_t v4 = swift_unknownObjectRetain();
    *((unsigned char *)v3 + 64) = nw_content_context_get_is_final(v4);
    nw_content_context_get_identifier(a1);
    uint64_t v5 = sub_183D44C9C();
    uint64_t v7 = v6;
    swift_unknownObjectRelease();
    v3[3] = v5;
    v3[4] = v7;
  }
  else
  {
    swift_deallocPartialClassInstance();
    return 0;
  }
  return v3;
}

BOOL nw_content_context_get_is_final(nw_content_context_t context)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  nw_content_context_t v1 = context;
  nw_content_context_t v2 = v1;
  if (v1)
  {
    BOOL v3 = 0;
    if (v1 != (nw_content_context_t)&__block_literal_global_42249
      && v1 != (nw_content_context_t)&__block_literal_global_10_42276)
    {
      BOOL v3 = 1;
      if (v1 != (nw_content_context_t)&__block_literal_global_6_42258
        && v1 != (nw_content_context_t)&__block_literal_global_8_42267)
      {
        BOOL v3 = BYTE6(v1[14].isa) & 1;
      }
    }
    goto LABEL_7;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)tcp_info buf = 136446210;
  os_log_type_t v16 = "nw_content_context_get_is_final";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v16 = "nw_content_context_get_is_final";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null context", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          os_log_type_t v16 = "nw_content_context_get_is_final";
          __int16 v17 = 2082;
          BOOL v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null context, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_24;
      }
      if (v11)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v16 = "nw_content_context_get_is_final";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null context, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v16 = "nw_content_context_get_is_final";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null context, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_24:
  if (v6) {
    free(v6);
  }
  BOOL v3 = 0;
LABEL_7:

  return v3;
}

const char *__cdecl nw_content_context_get_identifier(nw_content_context_t context)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  nw_content_context_t v1 = context;
  nw_content_context_t v2 = v1;
  if (v1)
  {
    BOOL v3 = "Final Message";
    uint64_t v4 = "Default Stream";
    if (v1 == &__block_literal_global_10_42276) {
      uint64_t v5 = "New Inbound Message";
    }
    else {
      uint64_t v5 = (const char *)&v1[3];
    }
    if (v1 != &__block_literal_global_8_42267) {
      uint64_t v4 = v5;
    }
    if (v1 != &__block_literal_global_6_42258) {
      BOOL v3 = v4;
    }
    if (v1 == &__block_literal_global_42249) {
      uint64_t v6 = "Default Message";
    }
    else {
      uint64_t v6 = v3;
    }
    goto LABEL_12;
  }
  os_log_type_t v8 = __nwlog_obj();
  *(_DWORD *)tcp_info buf = 136446210;
  uint64_t v19 = "nw_content_context_get_identifier";
  uint64_t v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (__nwlog_fault(v9, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint64_t v19 = "nw_content_context_get_identifier";
        _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null context", buf, 0xCu);
      }
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v13 = type;
      BOOL v14 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          uint64_t v19 = "nw_content_context_get_identifier";
          __int16 v20 = 2082;
          os_log_type_t v21 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null context, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_29;
      }
      if (v14)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint64_t v19 = "nw_content_context_get_identifier";
        _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null context, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint64_t v19 = "nw_content_context_get_identifier";
        _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null context, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_29:
  if (v9) {
    free(v9);
  }
  uint64_t v6 = 0;
LABEL_12:

  return v6;
}

uint64_t type metadata accessor for NWConnection.ContentContext()
{
  return self;
}

uint64_t sub_1832E669C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_1832E5E9C(a1, a2);
  }
  return a1;
}

uint64_t ___ZL53nw_endpoint_resolver_duplicate_array_without_endpointPU22objcproto11OS_nw_array8NSObjectPU25objcproto14OS_nw_endpointS__block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if ((nw_endpoint_is_equal(*(void **)(a1 + 32), v4, 1) & 1) == 0) {
    nw_array_append(*(void *)(a1 + 40), v4);
  }

  return 1;
}

void sub_1832E6708(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_utilities_execute_block_as_persona_from_parameters(void *a1, void *a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  uint64_t v5 = v4;
  if (!v3)
  {
    os_log_type_t v10 = __nwlog_obj();
    *(_DWORD *)uuid_t uu = 136446210;
    *(void *)&uu[4] = "nw_utilities_execute_block_as_persona_from_parameters";
    os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (!__nwlog_fault(v11, &type, &v24)) {
      goto LABEL_42;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)uuid_t uu = 136446210;
        *(void *)&uu[4] = "nw_utilities_execute_block_as_persona_from_parameters";
        _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s called with null parameters", uu, 0xCu);
      }
    }
    else if (v24)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v17 = type;
      BOOL v18 = os_log_type_enabled(v12, type);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)uuid_t uu = 136446466;
          *(void *)&uu[4] = "nw_utilities_execute_block_as_persona_from_parameters";
          *(_WORD *)&uu[12] = 2082;
          *(void *)&uu[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v12, v17, "%{public}s called with null parameters, dumping backtrace:%{public}s", uu, 0x16u);
        }

        free(backtrace_string);
LABEL_42:
        if (!v11) {
          goto LABEL_6;
        }
LABEL_43:
        free(v11);
        goto LABEL_6;
      }
      if (v18)
      {
        *(_DWORD *)uuid_t uu = 136446210;
        *(void *)&uu[4] = "nw_utilities_execute_block_as_persona_from_parameters";
        _os_log_impl(&dword_1830D4000, v12, v17, "%{public}s called with null parameters, no backtrace", uu, 0xCu);
      }
    }
    else
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v22 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)uuid_t uu = 136446210;
        *(void *)&uu[4] = "nw_utilities_execute_block_as_persona_from_parameters";
        _os_log_impl(&dword_1830D4000, v12, v22, "%{public}s called with null parameters, backtrace limit exceeded", uu, 0xCu);
      }
    }
LABEL_41:

    goto LABEL_42;
  }
  if (!v4)
  {
    BOOL v14 = __nwlog_obj();
    *(_DWORD *)uuid_t uu = 136446210;
    *(void *)&uu[4] = "nw_utilities_execute_block_as_persona_from_parameters";
    os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (!__nwlog_fault(v11, &type, &v24)) {
      goto LABEL_42;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)uuid_t uu = 136446210;
        *(void *)&uu[4] = "nw_utilities_execute_block_as_persona_from_parameters";
        _os_log_impl(&dword_1830D4000, v12, v15, "%{public}s called with null block", uu, 0xCu);
      }
    }
    else if (v24)
    {
      uint64_t v19 = (char *)__nw_create_backtrace_string();
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v20 = type;
      BOOL v21 = os_log_type_enabled(v12, type);
      if (v19)
      {
        if (v21)
        {
          *(_DWORD *)uuid_t uu = 136446466;
          *(void *)&uu[4] = "nw_utilities_execute_block_as_persona_from_parameters";
          *(_WORD *)&uu[12] = 2082;
          *(void *)&uu[14] = v19;
          _os_log_impl(&dword_1830D4000, v12, v20, "%{public}s called with null block, dumping backtrace:%{public}s", uu, 0x16u);
        }

        free(v19);
        if (!v11) {
          goto LABEL_6;
        }
        goto LABEL_43;
      }
      if (v21)
      {
        *(_DWORD *)uuid_t uu = 136446210;
        *(void *)&uu[4] = "nw_utilities_execute_block_as_persona_from_parameters";
        _os_log_impl(&dword_1830D4000, v12, v20, "%{public}s called with null block, no backtrace", uu, 0xCu);
      }
    }
    else
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v23 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)uuid_t uu = 136446210;
        *(void *)&uu[4] = "nw_utilities_execute_block_as_persona_from_parameters";
        _os_log_impl(&dword_1830D4000, v12, v23, "%{public}s called with null block, backtrace limit exceeded", uu, 0xCu);
      }
    }
    goto LABEL_41;
  }
  *(void *)uuid_t uu = 0;
  *(void *)&uu[8] = 0;
  uint64_t v6 = v3;
  int v7 = *(unsigned __int16 *)(v6[13] + 108) | (*(unsigned __int8 *)(v6[13] + 110) << 16);

  if ((v7 & 0x80000) != 0)
  {
    *(_OWORD *)uuid_t uu = *(_OWORD *)(v6[13] + 40);
    if (!uuid_is_null(uu))
    {
      uint64_t v8 = nw_utilities_execute_block_as_persona(uu, v5);
      goto LABEL_7;
    }
  }
  v5[2](v5);
LABEL_6:
  uint64_t v8 = 0;
LABEL_7:

  return v8;
}

void sub_1832E6C30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1832E6C64(uint64_t a1)
{
  nw_content_context_t v1 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  uint64_t v2 = swift_unknownObjectRetain();
  v1(v2);
  swift_release();

  return swift_unknownObjectRelease();
}

uint64_t sub_1832E6CC8()
{
  nw_content_context_t v1 = *(uint64_t (**)(unsigned char *))(v0 + 16);
  uint64_t v2 = swift_unknownObjectRetain();
  sub_1832E6D08(v2, (uint64_t)v4);
  return v1(v4);
}

NSObject *sub_1832E6D08@<X0>(NSObject *result@<X0>, uint64_t a2@<X8>)
{
  if (result)
  {
    id v3 = result;
    nw_error_domain_t error_domain = nw_error_get_error_domain(result);
    switch(error_domain)
    {
      case nw_error_domain_tls:
        unsigned int error_code = nw_error_get_error_code(v3);
        uint64_t result = swift_unknownObjectRelease();
        uint64_t v6 = error_code | 0x200000000;
        break;
      case nw_error_domain_dns:
        unsigned int v8 = nw_error_get_error_code(v3);
        uint64_t result = swift_unknownObjectRelease();
        uint64_t v6 = v8 | 0x100000000;
        break;
      case nw_error_domain_posix:
        nw_error_get_error_code(v3);
        uint64_t v5 = sub_183D449AC();
        uint64_t result = swift_unknownObjectRelease();
        uint64_t v6 = 22;
        if ((v5 & 0x100000000) == 0) {
          uint64_t v6 = v5;
        }
        break;
      default:
        uint64_t result = swift_unknownObjectRelease();
        uint64_t v6 = 22;
        break;
    }
  }
  else
  {
    uint64_t v6 = 0xFF00000000;
  }
  *(_DWORD *)a2 = v6;
  *(unsigned char *)(a2 + 4) = BYTE4(v6);
  return result;
}

uint64_t sub_1832E6DE0(uint64_t a1)
{
  return sub_1835747D8(a1, *(uint64_t (**)(unsigned char *))(v1 + 16));
}

uint64_t sub_1832E6DEC(NSObject *a1)
{
  return sub_18315A2BC(a1, *(void *)(v1 + 16), *(void (**)(void))(v1 + 24));
}

uint64_t sub_1832E6DF8()
{
  return sub_1832E6E00();
}

uint64_t sub_1832E6E00()
{
  uint64_t v0 = type metadata accessor for NWPath(0);
  MEMORY[0x1F4188790](v0 - 8);
  uint64_t v2 = (char *)&v9 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    id v4 = swift_unknownObjectRetain();
    uint64_t v5 = sub_1831DF470(v4, (uint64_t)v2);
    MEMORY[0x1F4188790](v5);
    *(&v9 - 2) = (uint64_t)v2;
    uint64_t v7 = v6 + *(void *)(*MEMORY[0x1E4FBBAB0] + *(void *)v6 + 16);
    unsigned int v8 = (os_unfair_lock_s *)(v6 + ((*(unsigned int *)(*(void *)v6 + 48) + 3) & 0x1FFFFFFFCLL));
    os_unfair_lock_lock(v8);
    sub_1832E6F74(v7);
    os_unfair_lock_unlock(v8);
    swift_release();
    return sub_1832FF6F4((uint64_t)v2, type metadata accessor for NWPath);
  }
  return result;
}

uint64_t sub_1832E6F74(uint64_t a1)
{
  return sub_183137974(a1, *(void *)(v1 + 16));
}

uint64_t ___ZL30nw_listener_set_state_on_queueP22NWConcrete_nw_listener19nw_listener_state_tPU22objcproto11OS_nw_error8NSObject_block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40)
                                                           + 16))(*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), *(unsigned int *)(a1 + 56), *(void *)(a1 + 32));
}

id nw_protocol_implementation_get_remote(nw_protocol *a1)
{
  uint64_t v80 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    handle = a1->handle;
    p_output_handler = &a1[1].output_handler;
    if (handle != &nw_protocol_ref_counted_handle) {
      p_output_handler = 0;
    }
    id v4 = p_output_handler;
    uint64_t v5 = v4;
    if (handle == &nw_protocol_ref_counted_handle)
    {
      uint64_t v6 = *((void *)v4 + 1);
      if (!v6)
      {
        os_log_type_t v31 = __nwlog_obj();
        *(_DWORD *)tcp_info buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_get_remote";
        os_log_type_t v28 = (char *)_os_log_send_and_compose_impl();

        type[0] = OS_LOG_TYPE_ERROR;
        os_log_type_t v72 = OS_LOG_TYPE_DEFAULT;
        if (!__nwlog_fault(v28, type, &v72)) {
          goto LABEL_154;
        }
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          uint64_t v29 = __nwlog_obj();
          os_log_type_t v32 = type[0];
          if (os_log_type_enabled(v29, type[0]))
          {
            *(_DWORD *)tcp_info buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_protocol_implementation_get_remote";
            _os_log_impl(&dword_1830D4000, v29, v32, "%{public}s called with null instance->parent_definition", buf, 0xCu);
          }
          goto LABEL_153;
        }
        if (v72 == OS_LOG_TYPE_DEFAULT)
        {
          uint64_t v29 = __nwlog_obj();
          os_log_type_t v54 = type[0];
          if (os_log_type_enabled(v29, type[0]))
          {
            *(_DWORD *)tcp_info buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_protocol_implementation_get_remote";
            _os_log_impl(&dword_1830D4000, v29, v54, "%{public}s called with null instance->parent_definition, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_153;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        uint64_t v29 = __nwlog_obj();
        os_log_type_t v42 = type[0];
        BOOL v43 = os_log_type_enabled(v29, type[0]);
        if (!backtrace_string)
        {
          if (v43)
          {
            *(_DWORD *)tcp_info buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_protocol_implementation_get_remote";
            _os_log_impl(&dword_1830D4000, v29, v42, "%{public}s called with null instance->parent_definition, no backtrace", buf, 0xCu);
          }
          goto LABEL_153;
        }
        if (v43)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_implementation_get_remote";
          __int16 v74 = 2082;
          os_log_type_t v75 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v29, v42, "%{public}s called with null instance->parent_definition, dumping backtrace:%{public}s", buf, 0x16u);
        }
        goto LABEL_79;
      }
      if (!*(void *)(v6 + 80))
      {
        char v33 = __nwlog_obj();
        *(_DWORD *)tcp_info buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_get_remote";
        os_log_type_t v28 = (char *)_os_log_send_and_compose_impl();

        type[0] = OS_LOG_TYPE_ERROR;
        os_log_type_t v72 = OS_LOG_TYPE_DEFAULT;
        if (!__nwlog_fault(v28, type, &v72)) {
          goto LABEL_154;
        }
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          uint64_t v29 = __nwlog_obj();
          os_log_type_t v34 = type[0];
          if (os_log_type_enabled(v29, type[0]))
          {
            *(_DWORD *)tcp_info buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_protocol_implementation_get_remote";
            _os_log_impl(&dword_1830D4000, v29, v34, "%{public}s called with null instance->parent_definition->extended_state", buf, 0xCu);
          }
          goto LABEL_153;
        }
        if (v72 == OS_LOG_TYPE_DEFAULT)
        {
          uint64_t v29 = __nwlog_obj();
          os_log_type_t v57 = type[0];
          if (os_log_type_enabled(v29, type[0]))
          {
            *(_DWORD *)tcp_info buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_protocol_implementation_get_remote";
            _os_log_impl(&dword_1830D4000, v29, v57, "%{public}s called with null instance->parent_definition->extended_state, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_153;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        uint64_t v29 = __nwlog_obj();
        os_log_type_t v44 = type[0];
        BOOL v45 = os_log_type_enabled(v29, type[0]);
        if (!backtrace_string)
        {
          if (v45)
          {
            *(_DWORD *)tcp_info buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_protocol_implementation_get_remote";
            _os_log_impl(&dword_1830D4000, v29, v44, "%{public}s called with null instance->parent_definition->extended_state, no backtrace", buf, 0xCu);
          }
          goto LABEL_153;
        }
        if (v45)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_implementation_get_remote";
          __int16 v74 = 2082;
          os_log_type_t v75 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v29, v44, "%{public}s called with null instance->parent_definition->extended_state, dumping backtrace:%{public}s", buf, 0x16u);
        }
        goto LABEL_79;
      }
      if (*((void *)v4 + 40))
      {
        id v7 = *((id *)v4 + 41);
LABEL_9:

        goto LABEL_10;
      }
      if (*(_DWORD *)(v6 + 64) == 3)
      {
        some_uint64_t node = nw_hash_table_get_some_node(*((os_unfair_lock_s **)v4 + 29));
        if (some_node)
        {
          os_log_type_t v10 = *(void **)(some_node + 16);
          if (v10)
          {
            uint64_t v11 = v10[3];
            if (v11)
            {
              os_log_type_t v12 = *(void (**)(void))(v11 + 136);
              if (v12)
              {
                os_log_type_t v13 = (void *)v10[5];
                if (v13 == &nw_protocol_ref_counted_handle)
                {
                  uint64_t v22 = v10[11];
                  if (v22) {
                    v10[11] = v22 + 1;
                  }
                  char v14 = -1;
                }
                else
                {
                  char v14 = 0;
                }
                *(void *)tcp_info buf = v10;
                sockaddr buf[8] = v14;
                v12();
                id v7 = (id)objc_claimAutoreleasedReturnValue();
                if (v13 == &nw_protocol_ref_counted_handle) {
                  nw::release_if_needed<nw_protocol *>((uint64_t *)buf);
                }
                goto LABEL_9;
              }
            }
          }
        }
        else if ((v5[405] & 0x80000000) == 0)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          BOOL v18 = (id)gLogObj;
          if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)tcp_info buf = 136446722;
            *(void *)&uint8_t buf[4] = "nw_protocol_implementation_get_remote";
            __int16 v74 = 2082;
            os_log_type_t v75 = v5 + 407;
            __int16 v76 = 2080;
            os_log_type_t v77 = " ";
            _os_log_impl(&dword_1830D4000, v18, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sFailed to find any flow", buf, 0x20u);
          }
        }
        goto LABEL_27;
      }
      default_input_handler = a1->default_input_handler;
      if (default_input_handler)
      {
        char v16 = default_input_handler->handle;
        if (v16 == &nw_protocol_ref_counted_handle)
        {
          callbacks = default_input_handler[1].callbacks;
          if (callbacks) {
            default_input_handler[1].callbacks = (nw_protocol_callbacks *)((char *)&callbacks->add_input_handler + 1);
          }
          char v17 = -1;
        }
        else
        {
          char v17 = 0;
        }
        *(void *)os_log_type_t type = default_input_handler;
        char v71 = v17;
        os_log_type_t v20 = default_input_handler->callbacks;
        if (v20)
        {
          get_remote_endpoint = (void (*)(nw_protocol *))v20->get_remote_endpoint;
          if (get_remote_endpoint)
          {
            get_remote_endpoint(default_input_handler);
            id v7 = (id)objc_claimAutoreleasedReturnValue();
            if (v16 != &nw_protocol_ref_counted_handle) {
              goto LABEL_9;
            }
LABEL_34:
            nw::release_if_needed<nw_protocol *>((uint64_t *)type);
            goto LABEL_9;
          }
        }
        __int16 v46 = __nwlog_obj();
        name = default_input_handler->identifier->name;
        *(_DWORD *)tcp_info buf = 136446722;
        *(void *)&uint8_t buf[4] = "__nw_protocol_get_remote_endpoint";
        if (!name) {
          name = "invalid";
        }
        __int16 v74 = 2082;
        os_log_type_t v75 = (char *)name;
        __int16 v76 = 2048;
        int v68 = default_input_handler;
        os_log_type_t v77 = (const char *)default_input_handler;
        uint64_t v48 = (char *)_os_log_send_and_compose_impl();

        os_log_type_t v72 = OS_LOG_TYPE_ERROR;
        char v69 = 0;
        if (__nwlog_fault(v48, &v72, &v69))
        {
          if (v72 == OS_LOG_TYPE_FAULT)
          {
            uint64_t v49 = __nwlog_obj();
            os_log_type_t v50 = v72;
            if (os_log_type_enabled(v49, v72))
            {
              uint64_t v51 = v68->identifier->name;
              if (!v51) {
                uint64_t v51 = "invalid";
              }
              *(_DWORD *)tcp_info buf = 136446722;
              *(void *)&uint8_t buf[4] = "__nw_protocol_get_remote_endpoint";
              __int16 v74 = 2082;
              os_log_type_t v75 = (char *)v51;
              __int16 v76 = 2048;
              os_log_type_t v77 = (const char *)v68;
              _os_log_impl(&dword_1830D4000, v49, v50, "%{public}s protocol %{public}s (%p) has invalid get_remote_endpoint callback", buf, 0x20u);
            }
LABEL_143:

            goto LABEL_144;
          }
          if (!v69)
          {
            uint64_t v49 = __nwlog_obj();
            os_log_type_t v64 = v72;
            if (os_log_type_enabled(v49, v72))
            {
              char v65 = v68->identifier->name;
              if (!v65) {
                char v65 = "invalid";
              }
              *(_DWORD *)tcp_info buf = 136446722;
              *(void *)&uint8_t buf[4] = "__nw_protocol_get_remote_endpoint";
              __int16 v74 = 2082;
              os_log_type_t v75 = (char *)v65;
              __int16 v76 = 2048;
              os_log_type_t v77 = (const char *)v68;
              _os_log_impl(&dword_1830D4000, v49, v64, "%{public}s protocol %{public}s (%p) has invalid get_remote_endpoint callback, backtrace limit exceeded", buf, 0x20u);
            }
            goto LABEL_143;
          }
          int v58 = (char *)__nw_create_backtrace_string();
          uint64_t v49 = __nwlog_obj();
          os_log_type_t v59 = v72;
          BOOL v60 = os_log_type_enabled(v49, v72);
          if (!v58)
          {
            if (v60)
            {
              uint64_t v66 = v68->identifier->name;
              if (!v66) {
                uint64_t v66 = "invalid";
              }
              *(_DWORD *)tcp_info buf = 136446722;
              *(void *)&uint8_t buf[4] = "__nw_protocol_get_remote_endpoint";
              __int16 v74 = 2082;
              os_log_type_t v75 = (char *)v66;
              __int16 v76 = 2048;
              os_log_type_t v77 = (const char *)v68;
              _os_log_impl(&dword_1830D4000, v49, v59, "%{public}s protocol %{public}s (%p) has invalid get_remote_endpoint callback, no backtrace", buf, 0x20u);
            }
            goto LABEL_143;
          }
          if (v60)
          {
            os_log_type_t v61 = v68->identifier->name;
            if (!v61) {
              os_log_type_t v61 = "invalid";
            }
            *(_DWORD *)tcp_info buf = 136446978;
            *(void *)&uint8_t buf[4] = "__nw_protocol_get_remote_endpoint";
            __int16 v74 = 2082;
            os_log_type_t v75 = (char *)v61;
            __int16 v76 = 2048;
            os_log_type_t v77 = (const char *)v68;
            __int16 v78 = 2082;
            os_log_type_t v79 = v58;
            _os_log_impl(&dword_1830D4000, v49, v59, "%{public}s protocol %{public}s (%p) has invalid get_remote_endpoint callback, dumping backtrace:%{public}s", buf, 0x2Au);
          }

          free(v58);
        }
LABEL_144:
        if (v48) {
          free(v48);
        }
        id v7 = 0;
        if (v16 != &nw_protocol_ref_counted_handle) {
          goto LABEL_9;
        }
        goto LABEL_34;
      }
      uint32_t v55 = __nwlog_obj();
      *(_DWORD *)tcp_info buf = 136446210;
      *(void *)&uint8_t buf[4] = "__nw_protocol_get_remote_endpoint";
      os_log_type_t v28 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      os_log_type_t v72 = OS_LOG_TYPE_DEFAULT;
      if (__nwlog_fault(v28, type, &v72))
      {
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          uint64_t v29 = __nwlog_obj();
          os_log_type_t v56 = type[0];
          if (os_log_type_enabled(v29, type[0]))
          {
            *(_DWORD *)tcp_info buf = 136446210;
            *(void *)&uint8_t buf[4] = "__nw_protocol_get_remote_endpoint";
            _os_log_impl(&dword_1830D4000, v29, v56, "%{public}s called with null protocol", buf, 0xCu);
          }
LABEL_153:

          goto LABEL_154;
        }
        if (v72 == OS_LOG_TYPE_DEFAULT)
        {
          uint64_t v29 = __nwlog_obj();
          os_log_type_t v67 = type[0];
          if (os_log_type_enabled(v29, type[0]))
          {
            *(_DWORD *)tcp_info buf = 136446210;
            *(void *)&uint8_t buf[4] = "__nw_protocol_get_remote_endpoint";
            _os_log_impl(&dword_1830D4000, v29, v67, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_153;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        uint64_t v29 = __nwlog_obj();
        os_log_type_t v62 = type[0];
        BOOL v63 = os_log_type_enabled(v29, type[0]);
        if (!backtrace_string)
        {
          if (v63)
          {
            *(_DWORD *)tcp_info buf = 136446210;
            *(void *)&uint8_t buf[4] = "__nw_protocol_get_remote_endpoint";
            _os_log_impl(&dword_1830D4000, v29, v62, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
          }
          goto LABEL_153;
        }
        if (v63)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          *(void *)&uint8_t buf[4] = "__nw_protocol_get_remote_endpoint";
          __int16 v74 = 2082;
          os_log_type_t v75 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v29, v62, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
LABEL_79:

        free(backtrace_string);
        if (!v28) {
          goto LABEL_27;
        }
        goto LABEL_155;
      }
    }
    else
    {
      uint64_t v27 = __nwlog_obj();
      *(_DWORD *)tcp_info buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_implementation_get_remote";
      os_log_type_t v28 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      os_log_type_t v72 = OS_LOG_TYPE_DEFAULT;
      if (!__nwlog_fault(v28, type, &v72)) {
        goto LABEL_154;
      }
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        uint64_t v29 = __nwlog_obj();
        os_log_type_t v30 = type[0];
        if (os_log_type_enabled(v29, type[0]))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_implementation_get_remote";
          _os_log_impl(&dword_1830D4000, v29, v30, "%{public}s called with null instance", buf, 0xCu);
        }
        goto LABEL_153;
      }
      if (v72 == OS_LOG_TYPE_DEFAULT)
      {
        uint64_t v29 = __nwlog_obj();
        os_log_type_t v53 = type[0];
        if (os_log_type_enabled(v29, type[0]))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_implementation_get_remote";
          _os_log_impl(&dword_1830D4000, v29, v53, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_153;
      }
      __int16 v38 = (char *)__nw_create_backtrace_string();
      uint64_t v29 = __nwlog_obj();
      os_log_type_t v39 = type[0];
      BOOL v40 = os_log_type_enabled(v29, type[0]);
      if (!v38)
      {
        if (v40)
        {
          *(_DWORD *)tcp_info buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_implementation_get_remote";
          _os_log_impl(&dword_1830D4000, v29, v39, "%{public}s called with null instance, no backtrace", buf, 0xCu);
        }
        goto LABEL_153;
      }
      if (v40)
      {
        *(_DWORD *)tcp_info buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_get_remote";
        __int16 v74 = 2082;
        os_log_type_t v75 = v38;
        _os_log_impl(&dword_1830D4000, v29, v39, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(v38);
    }
LABEL_154:
    if (!v28)
    {
LABEL_27:
      id v7 = 0;
      goto LABEL_9;
    }
LABEL_155:
    free(v28);
    goto LABEL_27;
  }
  os_log_type_t v23 = __nwlog_obj();
  *(_DWORD *)tcp_info buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_protocol_implementation_get_remote";
  char v24 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  os_log_type_t v72 = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v24, type, &v72))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v25 = __nwlog_obj();
      os_log_type_t v26 = type[0];
      if (os_log_type_enabled(v25, type[0]))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_get_remote";
        _os_log_impl(&dword_1830D4000, v25, v26, "%{public}s called with null protocol", buf, 0xCu);
      }
    }
    else if (v72)
    {
      char v35 = (char *)__nw_create_backtrace_string();
      os_log_type_t v25 = __nwlog_obj();
      os_log_type_t v36 = type[0];
      BOOL v37 = os_log_type_enabled(v25, type[0]);
      if (v35)
      {
        if (v37)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_implementation_get_remote";
          __int16 v74 = 2082;
          os_log_type_t v75 = v35;
          _os_log_impl(&dword_1830D4000, v25, v36, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v35);
        goto LABEL_117;
      }
      if (v37)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_get_remote";
        _os_log_impl(&dword_1830D4000, v25, v36, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v25 = __nwlog_obj();
      os_log_type_t v52 = type[0];
      if (os_log_type_enabled(v25, type[0]))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_get_remote";
        _os_log_impl(&dword_1830D4000, v25, v52, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_117:
  if (v24) {
    free(v24);
  }
  id v7 = 0;
LABEL_10:

  return v7;
}

void nw_socket_fillout_socket_properties(nw_protocol *a1)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)&__dst[0].size_t sa_len = 136446210;
    *(void *)&__dst[0].sa_data[2] = "nw_socket_fillout_socket_properties";
    os_log_type_t v31 = (char *)_os_log_send_and_compose_impl();
    buf[0] = 16;
    LOBYTE(v42) = 0;
    if (!__nwlog_fault(v31, buf, &v42)) {
      goto LABEL_106;
    }
    if (buf[0] == 17)
    {
      os_log_type_t v32 = __nwlog_obj();
      os_log_type_t v33 = buf[0];
      if (!os_log_type_enabled(v32, (os_log_type_t)buf[0])) {
        goto LABEL_106;
      }
      *(_DWORD *)&__dst[0].size_t sa_len = 136446210;
      *(void *)&__dst[0].sa_data[2] = "nw_socket_fillout_socket_properties";
      os_log_type_t v34 = "%{public}s called with null protocol";
    }
    else if ((_BYTE)v42)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v32 = __nwlog_obj();
      os_log_type_t v33 = buf[0];
      BOOL v36 = os_log_type_enabled(v32, (os_log_type_t)buf[0]);
      if (backtrace_string)
      {
        if (v36)
        {
          *(_DWORD *)&__dst[0].size_t sa_len = 136446466;
          *(void *)&__dst[0].sa_data[2] = "nw_socket_fillout_socket_properties";
          *(_WORD *)&__dst[0].sa_data[10] = 2082;
          *(void *)&__dst[0].sa_data[12] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v32, v33, "%{public}s called with null protocol, dumping backtrace:%{public}s", &__dst[0].sa_len, 0x16u);
        }
        free(backtrace_string);
LABEL_106:
        if (!v31) {
          return;
        }
LABEL_107:
        free(v31);
        return;
      }
      if (!v36) {
        goto LABEL_106;
      }
      *(_DWORD *)&__dst[0].size_t sa_len = 136446210;
      *(void *)&__dst[0].sa_data[2] = "nw_socket_fillout_socket_properties";
      os_log_type_t v34 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      os_log_type_t v32 = __nwlog_obj();
      os_log_type_t v33 = buf[0];
      if (!os_log_type_enabled(v32, (os_log_type_t)buf[0])) {
        goto LABEL_106;
      }
      *(_DWORD *)&__dst[0].size_t sa_len = 136446210;
      *(void *)&__dst[0].sa_data[2] = "nw_socket_fillout_socket_properties";
      os_log_type_t v34 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
LABEL_105:
    _os_log_impl(&dword_1830D4000, v32, v33, v34, &__dst[0].sa_len, 0xCu);
    goto LABEL_106;
  }
  if (a1->handle == &nw_protocol_ref_counted_handle)
  {
    memset(__dst, 0, sizeof(__dst));
    unsigned int v43 = 0;
    int v2 = *(_DWORD *)&a1[4].flow_id[12];
    if (v2 < 0) {
      return;
    }
    remote = (void *)nw_socket_get_remote(a1);
    if (remote && (id v4 = remote, v5 = [v4 type], v4, v5 == 1))
    {
      int address_family = nw_endpoint_get_address_family(v4);
      int v7 = address_family;
      uint64_t v42 = 0;
      BOOL v8 = address_family == 2;
      if ((address_family == 30 || address_family == 2) && !copyconninfo(v2, 0, &v42))
      {
        uint64_t v9 = v42;
        os_log_type_t v10 = *(unsigned __int8 **)(v42 + 8);
        if (v10)
        {
          size_t v11 = *v10;
          if (v11 >= 0x81)
          {
            unsigned int v43 = *(_DWORD *)(v42 + 4);
          }
          else
          {
            memcpy(__dst, v10, v11);
            os_log_type_t v10 = *(unsigned __int8 **)(v9 + 8);
            unsigned int v43 = *(_DWORD *)(v9 + 4);
            if (!v10) {
              goto LABEL_56;
            }
          }
          free(v10);
          *(void *)(v9 + 8) = 0;
        }
        else
        {
          unsigned int v43 = *(_DWORD *)(v42 + 4);
        }
LABEL_56:
        char v24 = *(void **)(v9 + 16);
        if (v24)
        {
          free(v24);
          *(void *)(v9 + 16) = 0;
        }
        os_log_type_t v25 = *(void **)(v9 + 32);
        if (v25) {
          free(v25);
        }
        goto LABEL_66;
      }
    }
    else
    {
      BOOL v8 = 0;
      int v7 = 0;
      uint64_t v42 = 0;
    }
    if (((*(unsigned __int16 *)&a1[6].flow_id[13] | (a1[6].flow_id[15] << 16)) & 0x20000) != 0)
    {
LABEL_67:
      if (__dst[0].sa_len)
      {
        default_input_handler = a1[2].default_input_handler;
        if (default_input_handler)
        {
          os_release(default_input_handler);
          a1[2].default_input_handler = 0;
        }
        a1[2].default_input_handler = (nw_protocol *)nw_endpoint_create_address(__dst);
      }
      unsigned int v27 = v43;
      if (v43)
      {
        output_handler_context = a1[2].output_handler_context;
        if (output_handler_context)
        {
          os_release(output_handler_context);
          a1[2].output_handler_context = 0;
          unsigned int v27 = v43;
        }
        if (nw_context_copy_implicit_context::onceToken != -1) {
          dispatch_once(&nw_context_copy_implicit_context::onceToken, &__block_literal_global_18);
        }
        id v29 = (id)nw_context_copy_implicit_context::implicit_context;
        os_log_type_t v30 = nw_path_copy_interface_with_generation(v29, v27, 0);

        a1[2].output_handler_context = v30;
      }
      return;
    }
    socklen_t v41 = 128;
    if (getsockname(v2, __dst, &v41))
    {
      int v12 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      os_log_type_t v13 = gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)tcp_info buf = 136446722;
        BOOL v45 = "nw_socket_fillout_socket_properties";
        __int16 v46 = 2080;
        *(void *)uint64_t v47 = (char *)a1 + 404;
        *(_WORD *)&v47[8] = 1024;
        *(_DWORD *)&v47[10] = v12;
        _os_log_impl(&dword_1830D4000, v13, OS_LOG_TYPE_ERROR, "%{public}s %s getsockname failed %{darwin.errno}d", buf, 0x1Cu);
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      *(_DWORD *)tcp_info buf = 136446466;
      BOOL v45 = "nw_socket_fillout_socket_properties";
      __int16 v46 = 1024;
      *(_DWORD *)uint64_t v47 = v12;
      uint64_t v9 = _os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v39 = 0;
      if (__nwlog_fault((const char *)v9, &type, &v39))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          char v14 = gLogObj;
          os_log_type_t v15 = type;
          if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
            goto LABEL_65;
          }
          *(_DWORD *)tcp_info buf = 136446466;
          BOOL v45 = "nw_socket_fillout_socket_properties";
          __int16 v46 = 1024;
          *(_DWORD *)uint64_t v47 = v12;
          char v16 = "%{public}s getsockname failed %{darwin.errno}d";
          goto LABEL_64;
        }
        if (!v39)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          char v14 = gLogObj;
          os_log_type_t v15 = type;
          if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
            goto LABEL_65;
          }
          *(_DWORD *)tcp_info buf = 136446466;
          BOOL v45 = "nw_socket_fillout_socket_properties";
          __int16 v46 = 1024;
          *(_DWORD *)uint64_t v47 = v12;
          char v16 = "%{public}s getsockname failed %{darwin.errno}d, backtrace limit exceeded";
          goto LABEL_64;
        }
        os_log_type_t v20 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        char v14 = gLogObj;
        os_log_type_t v15 = type;
        BOOL v21 = os_log_type_enabled((os_log_t)gLogObj, type);
        if (v20)
        {
          if (v21)
          {
            *(_DWORD *)tcp_info buf = 136446722;
            BOOL v45 = "nw_socket_fillout_socket_properties";
            __int16 v46 = 1024;
            *(_DWORD *)uint64_t v47 = v12;
            *(_WORD *)&v47[4] = 2082;
            *(void *)&v47[6] = v20;
            _os_log_impl(&dword_1830D4000, v14, v15, "%{public}s getsockname failed %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x1Cu);
          }
          free(v20);
          if (!v9) {
            goto LABEL_67;
          }
          goto LABEL_66;
        }
        if (v21)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          BOOL v45 = "nw_socket_fillout_socket_properties";
          __int16 v46 = 1024;
          *(_DWORD *)uint64_t v47 = v12;
          char v16 = "%{public}s getsockname failed %{darwin.errno}d, no backtrace";
LABEL_64:
          _os_log_impl(&dword_1830D4000, v14, v15, v16, buf, 0x12u);
        }
      }
    }
    else
    {
      if (v7 != 30 && v7 != 2) {
        goto LABEL_67;
      }
      socklen_t v41 = 4;
      int v17 = v8 ? 0 : 41;
      if (!getsockopt(v2, v17, 9696, &v43, &v41)) {
        goto LABEL_67;
      }
      int v18 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      uint64_t v19 = gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)tcp_info buf = 136446722;
        BOOL v45 = "nw_socket_fillout_socket_properties";
        __int16 v46 = 2080;
        *(void *)uint64_t v47 = (char *)a1 + 404;
        *(_WORD *)&v47[8] = 1024;
        *(_DWORD *)&v47[10] = v18;
        _os_log_impl(&dword_1830D4000, v19, OS_LOG_TYPE_ERROR, "%{public}s %s getsockopt OUT_IF failed %{darwin.errno}d", buf, 0x1Cu);
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      *(_DWORD *)tcp_info buf = 136446466;
      BOOL v45 = "nw_socket_fillout_socket_properties";
      __int16 v46 = 1024;
      *(_DWORD *)uint64_t v47 = v18;
      uint64_t v9 = _os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v39 = 0;
      if (__nwlog_fault((const char *)v9, &type, &v39))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          char v14 = gLogObj;
          os_log_type_t v15 = type;
          if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
            goto LABEL_65;
          }
          *(_DWORD *)tcp_info buf = 136446466;
          BOOL v45 = "nw_socket_fillout_socket_properties";
          __int16 v46 = 1024;
          *(_DWORD *)uint64_t v47 = v18;
          char v16 = "%{public}s getsockopt OUT_IF failed %{darwin.errno}d";
          goto LABEL_64;
        }
        if (!v39)
        {
          char v14 = __nwlog_obj();
          os_log_type_t v15 = type;
          if (!os_log_type_enabled(v14, type)) {
            goto LABEL_65;
          }
          *(_DWORD *)tcp_info buf = 136446466;
          BOOL v45 = "nw_socket_fillout_socket_properties";
          __int16 v46 = 1024;
          *(_DWORD *)uint64_t v47 = v18;
          char v16 = "%{public}s getsockopt OUT_IF failed %{darwin.errno}d, backtrace limit exceeded";
          goto LABEL_64;
        }
        uint64_t v22 = (char *)__nw_create_backtrace_string();
        char v14 = __nwlog_obj();
        os_log_type_t v15 = type;
        BOOL v23 = os_log_type_enabled(v14, type);
        if (!v22)
        {
          if (!v23) {
            goto LABEL_65;
          }
          *(_DWORD *)tcp_info buf = 136446466;
          BOOL v45 = "nw_socket_fillout_socket_properties";
          __int16 v46 = 1024;
          *(_DWORD *)uint64_t v47 = v18;
          char v16 = "%{public}s getsockopt OUT_IF failed %{darwin.errno}d, no backtrace";
          goto LABEL_64;
        }
        if (v23)
        {
          *(_DWORD *)tcp_info buf = 136446722;
          BOOL v45 = "nw_socket_fillout_socket_properties";
          __int16 v46 = 1024;
          *(_DWORD *)uint64_t v47 = v18;
          *(_WORD *)&v47[4] = 2082;
          *(void *)&v47[6] = v22;
          _os_log_impl(&dword_1830D4000, v14, v15, "%{public}s getsockopt OUT_IF failed %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x1Cu);
        }
        free(v22);
      }
    }
LABEL_65:
    if (v9)
    {
LABEL_66:
      free((void *)v9);
      goto LABEL_67;
    }
    goto LABEL_67;
  }
  __nwlog_obj();
  *(_DWORD *)&__dst[0].size_t sa_len = 136446210;
  *(void *)&__dst[0].sa_data[2] = "nw_socket_fillout_socket_properties";
  os_log_type_t v31 = (char *)_os_log_send_and_compose_impl();
  buf[0] = 16;
  LOBYTE(v42) = 0;
  if (!__nwlog_fault(v31, buf, &v42)) {
    goto LABEL_106;
  }
  if (buf[0] == 17)
  {
    os_log_type_t v32 = __nwlog_obj();
    os_log_type_t v33 = buf[0];
    if (!os_log_type_enabled(v32, (os_log_type_t)buf[0])) {
      goto LABEL_106;
    }
    *(_DWORD *)&__dst[0].size_t sa_len = 136446210;
    *(void *)&__dst[0].sa_data[2] = "nw_socket_fillout_socket_properties";
    os_log_type_t v34 = "%{public}s called with null socket_handler";
    goto LABEL_105;
  }
  if (!(_BYTE)v42)
  {
    os_log_type_t v32 = __nwlog_obj();
    os_log_type_t v33 = buf[0];
    if (!os_log_type_enabled(v32, (os_log_type_t)buf[0])) {
      goto LABEL_106;
    }
    *(_DWORD *)&__dst[0].size_t sa_len = 136446210;
    *(void *)&__dst[0].sa_data[2] = "nw_socket_fillout_socket_properties";
    os_log_type_t v34 = "%{public}s called with null socket_handler, backtrace limit exceeded";
    goto LABEL_105;
  }
  BOOL v37 = (char *)__nw_create_backtrace_string();
  os_log_type_t v32 = __nwlog_obj();
  os_log_type_t v33 = buf[0];
  BOOL v38 = os_log_type_enabled(v32, (os_log_type_t)buf[0]);
  if (!v37)
  {
    if (!v38) {
      goto LABEL_106;
    }
    *(_DWORD *)&__dst[0].size_t sa_len = 136446210;
    *(void *)&__dst[0].sa_data[2] = "nw_socket_fillout_socket_properties";
    os_log_type_t v34 = "%{public}s called with null socket_handler, no backtrace";
    goto LABEL_105;
  }
  if (v38)
  {
    *(_DWORD *)&__dst[0].size_t sa_len = 136446466;
    *(void *)&__dst[0].sa_data[2] = "nw_socket_fillout_socket_properties";
    *(_WORD *)&__dst[0].sa_data[10] = 2082;
    *(void *)&__dst[0].sa_data[12] = v37;
    _os_log_impl(&dword_1830D4000, v32, v33, "%{public}s called with null socket_handler, dumping backtrace:%{public}s", &__dst[0].sa_len, 0x16u);
  }
  free(v37);
  if (v31) {
    goto LABEL_107;
  }
}

void sub_1832E8B08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_socket_get_remote(nw_protocol *a1)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    os_log_type_t v25 = "nw_socket_get_remote";
    char v14 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (!__nwlog_fault(v14, &type, &v22)) {
      goto LABEL_56;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v15 = __nwlog_obj();
      os_log_type_t v16 = type;
      if (!os_log_type_enabled(v15, type)) {
        goto LABEL_56;
      }
      *(_DWORD *)tcp_info buf = 136446210;
      os_log_type_t v25 = "nw_socket_get_remote";
      int v17 = "%{public}s called with null protocol";
    }
    else
    {
      if (!v22)
      {
        os_log_type_t v15 = __nwlog_obj();
        os_log_type_t v16 = type;
        if (!os_log_type_enabled(v15, type)) {
          goto LABEL_56;
        }
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v25 = "nw_socket_get_remote";
        int v17 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_55;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v15 = __nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v19 = os_log_type_enabled(v15, type);
      if (backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          os_log_type_t v25 = "nw_socket_get_remote";
          __int16 v26 = 2082;
          unsigned int v27 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v15, v16, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        if (!v14) {
          return 0;
        }
        goto LABEL_57;
      }
      if (!v19) {
        goto LABEL_56;
      }
      *(_DWORD *)tcp_info buf = 136446210;
      os_log_type_t v25 = "nw_socket_get_remote";
      int v17 = "%{public}s called with null protocol, no backtrace";
    }
LABEL_55:
    _os_log_impl(&dword_1830D4000, v15, v16, v17, buf, 0xCu);
    goto LABEL_56;
  }
  if (a1->handle != &nw_protocol_ref_counted_handle)
  {
    __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    os_log_type_t v25 = "nw_socket_get_remote";
    char v14 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (!__nwlog_fault(v14, &type, &v22)) {
      goto LABEL_56;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v15 = __nwlog_obj();
      os_log_type_t v16 = type;
      if (!os_log_type_enabled(v15, type)) {
        goto LABEL_56;
      }
      *(_DWORD *)tcp_info buf = 136446210;
      os_log_type_t v25 = "nw_socket_get_remote";
      int v17 = "%{public}s called with null socket_handler";
      goto LABEL_55;
    }
    if (!v22)
    {
      os_log_type_t v15 = __nwlog_obj();
      os_log_type_t v16 = type;
      if (!os_log_type_enabled(v15, type)) {
        goto LABEL_56;
      }
      *(_DWORD *)tcp_info buf = 136446210;
      os_log_type_t v25 = "nw_socket_get_remote";
      int v17 = "%{public}s called with null socket_handler, backtrace limit exceeded";
      goto LABEL_55;
    }
    os_log_type_t v20 = (char *)__nw_create_backtrace_string();
    os_log_type_t v15 = __nwlog_obj();
    os_log_type_t v16 = type;
    BOOL v21 = os_log_type_enabled(v15, type);
    if (!v20)
    {
      if (!v21) {
        goto LABEL_56;
      }
      *(_DWORD *)tcp_info buf = 136446210;
      os_log_type_t v25 = "nw_socket_get_remote";
      int v17 = "%{public}s called with null socket_handler, no backtrace";
      goto LABEL_55;
    }
    if (v21)
    {
      *(_DWORD *)tcp_info buf = 136446466;
      os_log_type_t v25 = "nw_socket_get_remote";
      __int16 v26 = 2082;
      unsigned int v27 = v20;
      _os_log_impl(&dword_1830D4000, v15, v16, "%{public}s called with null socket_handler, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v20);
LABEL_56:
    if (!v14) {
      return 0;
    }
LABEL_57:
    free(v14);
    return 0;
  }
  identifier = a1[2].identifier;
  if (!identifier)
  {
    if ((*(_WORD *)&a1[6].flow_id[13] & 0x80) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      int v7 = gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)tcp_info buf = 136446466;
        os_log_type_t v25 = "nw_socket_get_remote";
        __int16 v26 = 2082;
        unsigned int v27 = (char *)&a1[6].identifier + 4;
        _os_log_impl(&dword_1830D4000, v7, OS_LOG_TYPE_ERROR, "%{public}s %{public}s No input handler", buf, 0x16u);
      }
    }
    return 0;
  }
  uint64_t v3 = *(void *)&identifier->name[24];
  if (!v3) {
    return 0;
  }
  id v4 = *(uint64_t (**)(nw_protocol_identifier *))(v3 + 136);
  if (!v4) {
    return 0;
  }
  if (*(_UNKNOWN **)identifier[1].name == &nw_protocol_ref_counted_handle)
  {
    uint64_t v9 = *(void *)&identifier[2].name[8];
    if (v9) {
      *(void *)&identifier[2].name[8] = v9 + 1;
    }
    uint64_t v8 = v4(identifier);
    if (*(_UNKNOWN **)identifier[1].name == &nw_protocol_ref_counted_handle)
    {
      uint64_t v10 = *(void *)&identifier[2].name[8];
      if (v10)
      {
        uint64_t v11 = v10 - 1;
        *(void *)&identifier[2].name[8] = v11;
        if (!v11)
        {
          int v12 = *(void (***)(void))&identifier[1].name[24];
          if (v12)
          {
            *(void *)&identifier[1].name[24] = 0;
            v12[2](v12);
            _Block_release(v12);
          }
          if (identifier[1].level)
          {
            os_log_type_t v13 = *(const void **)&identifier[1].name[24];
            if (v13) {
              _Block_release(v13);
            }
          }
          free(identifier);
        }
      }
    }
    return v8;
  }
  int v5 = a1[2].identifier;

  return v4(v5);
}

uint64_t nw_protocol_get_remote_endpoint(uint64_t a1)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    os_log_type_t v32 = "__nw_protocol_get_remote_endpoint";
    int v18 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v29 = 0;
    if (__nwlog_fault(v18, &type, &v29))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        BOOL v19 = __nwlog_obj();
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v19, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          os_log_type_t v32 = "__nw_protocol_get_remote_endpoint";
          BOOL v21 = "%{public}s called with null protocol";
LABEL_59:
          _os_log_impl(&dword_1830D4000, v19, v20, v21, buf, 0xCu);
        }
      }
      else if (v29)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        BOOL v19 = __nwlog_obj();
        os_log_type_t v20 = type;
        BOOL v26 = os_log_type_enabled(v19, type);
        if (backtrace_string)
        {
          if (v26)
          {
            *(_DWORD *)tcp_info buf = 136446466;
            os_log_type_t v32 = "__nw_protocol_get_remote_endpoint";
            __int16 v33 = 2082;
            os_log_type_t v34 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v19, v20, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(backtrace_string);
          goto LABEL_60;
        }
        if (v26)
        {
          *(_DWORD *)tcp_info buf = 136446210;
          os_log_type_t v32 = "__nw_protocol_get_remote_endpoint";
          BOOL v21 = "%{public}s called with null protocol, no backtrace";
          goto LABEL_59;
        }
      }
      else
      {
        BOOL v19 = __nwlog_obj();
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v19, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          os_log_type_t v32 = "__nw_protocol_get_remote_endpoint";
          BOOL v21 = "%{public}s called with null protocol, backtrace limit exceeded";
          goto LABEL_59;
        }
      }
    }
LABEL_60:
    if (v18) {
      free(v18);
    }
    return 0;
  }
  int v2 = *(void **)(a1 + 40);
  if (v2 == &nw_protocol_ref_counted_handle)
  {
    uint64_t v3 = *(void *)(a1 + 88);
    if (v3) {
      *(void *)(a1 + 88) = v3 + 1;
    }
  }
  uint64_t v4 = *(void *)(a1 + 24);
  if (v4)
  {
    int v5 = *(uint64_t (**)(uint64_t))(v4 + 136);
    if (v5)
    {
      uint64_t v6 = v5(a1);
      if (v2 != &nw_protocol_ref_counted_handle) {
        return v6;
      }
      goto LABEL_8;
    }
  }
  __nwlog_obj();
  int v12 = *(const char **)(a1 + 16);
  *(_DWORD *)tcp_info buf = 136446722;
  os_log_type_t v32 = "__nw_protocol_get_remote_endpoint";
  if (!v12) {
    int v12 = "invalid";
  }
  __int16 v33 = 2082;
  os_log_type_t v34 = (void *)v12;
  __int16 v35 = 2048;
  uint64_t v36 = a1;
  os_log_type_t v13 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v29 = 0;
  if (!__nwlog_fault(v13, &type, &v29)) {
    goto LABEL_51;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    char v14 = __nwlog_obj();
    os_log_type_t v15 = type;
    if (!os_log_type_enabled(v14, type)) {
      goto LABEL_51;
    }
    os_log_type_t v16 = *(const char **)(a1 + 16);
    if (!v16) {
      os_log_type_t v16 = "invalid";
    }
    *(_DWORD *)tcp_info buf = 136446722;
    os_log_type_t v32 = "__nw_protocol_get_remote_endpoint";
    __int16 v33 = 2082;
    os_log_type_t v34 = (void *)v16;
    __int16 v35 = 2048;
    uint64_t v36 = a1;
    int v17 = "%{public}s protocol %{public}s (%p) has invalid get_remote_endpoint callback";
LABEL_50:
    _os_log_impl(&dword_1830D4000, v14, v15, v17, buf, 0x20u);
    goto LABEL_51;
  }
  if (!v29)
  {
    char v14 = __nwlog_obj();
    os_log_type_t v15 = type;
    if (!os_log_type_enabled(v14, type)) {
      goto LABEL_51;
    }
    unsigned int v27 = *(const char **)(a1 + 16);
    if (!v27) {
      unsigned int v27 = "invalid";
    }
    *(_DWORD *)tcp_info buf = 136446722;
    os_log_type_t v32 = "__nw_protocol_get_remote_endpoint";
    __int16 v33 = 2082;
    os_log_type_t v34 = (void *)v27;
    __int16 v35 = 2048;
    uint64_t v36 = a1;
    int v17 = "%{public}s protocol %{public}s (%p) has invalid get_remote_endpoint callback, backtrace limit exceeded";
    goto LABEL_50;
  }
  char v22 = (char *)__nw_create_backtrace_string();
  char v14 = __nwlog_obj();
  os_log_type_t v15 = type;
  BOOL v23 = os_log_type_enabled(v14, type);
  if (!v22)
  {
    if (!v23) {
      goto LABEL_51;
    }
    uint64_t v28 = *(const char **)(a1 + 16);
    if (!v28) {
      uint64_t v28 = "invalid";
    }
    *(_DWORD *)tcp_info buf = 136446722;
    os_log_type_t v32 = "__nw_protocol_get_remote_endpoint";
    __int16 v33 = 2082;
    os_log_type_t v34 = (void *)v28;
    __int16 v35 = 2048;
    uint64_t v36 = a1;
    int v17 = "%{public}s protocol %{public}s (%p) has invalid get_remote_endpoint callback, no backtrace";
    goto LABEL_50;
  }
  if (v23)
  {
    char v24 = *(const char **)(a1 + 16);
    if (!v24) {
      char v24 = "invalid";
    }
    *(_DWORD *)tcp_info buf = 136446978;
    os_log_type_t v32 = "__nw_protocol_get_remote_endpoint";
    __int16 v33 = 2082;
    os_log_type_t v34 = (void *)v24;
    __int16 v35 = 2048;
    uint64_t v36 = a1;
    __int16 v37 = 2082;
    BOOL v38 = v22;
    _os_log_impl(&dword_1830D4000, v14, v15, "%{public}s protocol %{public}s (%p) has invalid get_remote_endpoint callback, dumping backtrace:%{public}s", buf, 0x2Au);
  }
  free(v22);
LABEL_51:
  if (v13) {
    free(v13);
  }
  uint64_t v6 = 0;
  if (v2 == &nw_protocol_ref_counted_handle)
  {
LABEL_8:
    if (*(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
    {
      uint64_t v8 = *(void *)(a1 + 88);
      if (v8)
      {
        uint64_t v9 = v8 - 1;
        *(void *)(a1 + 88) = v9;
        if (!v9)
        {
          uint64_t v10 = *(void (***)(void))(a1 + 64);
          if (v10)
          {
            *(void *)(a1 + 64) = 0;
            v10[2](v10);
            _Block_release(v10);
          }
          if (*(unsigned char *)(a1 + 72))
          {
            uint64_t v11 = *(const void **)(a1 + 64);
            if (v11) {
              _Block_release(v11);
            }
          }
          free((void *)a1);
        }
      }
    }
  }
  return v6;
}

uint64_t nw_protocol_default_get_remote(nw_protocol *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    os_log_type_t v16 = "nw_protocol_default_get_remote";
    int v5 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v13 = 0;
    if (!__nwlog_fault(v5, &type, &v13)) {
      goto LABEL_36;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (!os_log_type_enabled(v6, type)) {
        goto LABEL_36;
      }
      *(_DWORD *)tcp_info buf = 136446210;
      os_log_type_t v16 = "nw_protocol_default_get_remote";
      uint64_t v8 = "%{public}s called with null protocol";
      goto LABEL_35;
    }
    if (!v13)
    {
      uint64_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (!os_log_type_enabled(v6, type)) {
        goto LABEL_36;
      }
      *(_DWORD *)tcp_info buf = 136446210;
      os_log_type_t v16 = "nw_protocol_default_get_remote";
      uint64_t v8 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_35;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v6 = __nwlog_obj();
    os_log_type_t v7 = type;
    BOOL v10 = os_log_type_enabled(v6, type);
    if (!backtrace_string)
    {
      if (!v10) {
        goto LABEL_36;
      }
      *(_DWORD *)tcp_info buf = 136446210;
      os_log_type_t v16 = "nw_protocol_default_get_remote";
      uint64_t v8 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_35;
    }
    if (v10)
    {
      *(_DWORD *)tcp_info buf = 136446466;
      os_log_type_t v16 = "nw_protocol_default_get_remote";
      __int16 v17 = 2082;
      int v18 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(backtrace_string);
LABEL_36:
    if (!v5) {
      return 0;
    }
LABEL_37:
    free(v5);
    return 0;
  }
  default_input_handler = a1->default_input_handler;
  if (!default_input_handler)
  {
    __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    os_log_type_t v16 = "nw_protocol_default_get_remote";
    int v5 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v13 = 0;
    if (!__nwlog_fault(v5, &type, &v13)) {
      goto LABEL_36;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (!os_log_type_enabled(v6, type)) {
        goto LABEL_36;
      }
      *(_DWORD *)tcp_info buf = 136446210;
      os_log_type_t v16 = "nw_protocol_default_get_remote";
      uint64_t v8 = "%{public}s called with null protocol->default_input_handler";
      goto LABEL_35;
    }
    if (!v13)
    {
      uint64_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (!os_log_type_enabled(v6, type)) {
        goto LABEL_36;
      }
      *(_DWORD *)tcp_info buf = 136446210;
      os_log_type_t v16 = "nw_protocol_default_get_remote";
      uint64_t v8 = "%{public}s called with null protocol->default_input_handler, backtrace limit exceeded";
      goto LABEL_35;
    }
    uint64_t v11 = (char *)__nw_create_backtrace_string();
    uint64_t v6 = __nwlog_obj();
    os_log_type_t v7 = type;
    BOOL v12 = os_log_type_enabled(v6, type);
    if (v11)
    {
      if (v12)
      {
        *(_DWORD *)tcp_info buf = 136446466;
        os_log_type_t v16 = "nw_protocol_default_get_remote";
        __int16 v17 = 2082;
        int v18 = v11;
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null protocol->default_input_handler, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v11);
      if (!v5) {
        return 0;
      }
      goto LABEL_37;
    }
    if (v12)
    {
      *(_DWORD *)tcp_info buf = 136446210;
      os_log_type_t v16 = "nw_protocol_default_get_remote";
      uint64_t v8 = "%{public}s called with null protocol->default_input_handler, no backtrace";
LABEL_35:
      _os_log_impl(&dword_1830D4000, v6, v7, v8, buf, 0xCu);
      goto LABEL_36;
    }
    goto LABEL_36;
  }
  callbacks = default_input_handler->callbacks;
  if (!callbacks) {
    return 0;
  }
  get_remote_endpoint = (uint64_t (*)(void))callbacks->get_remote_endpoint;
  if (!get_remote_endpoint) {
    return 0;
  }

  return get_remote_endpoint();
}

uint64_t copyconninfo(int a1, int a2, void *a3)
{
  uint64_t v88 = *MEMORY[0x1E4F143B8];
  if (!a3)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)uint64_t v85 = 136446210;
    *(void *)&v85[4] = "copyconninfo";
    os_log_type_t v7 = (char *)_os_log_send_and_compose_impl();
    buf[0] = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v7, buf, &type)) {
      goto LABEL_52;
    }
    if (buf[0] == 17)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v8 = gLogObj;
      uint8_t v9 = buf[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)buf[0])) {
        goto LABEL_52;
      }
      *(_DWORD *)uint64_t v85 = 136446210;
      *(void *)&v85[4] = "copyconninfo";
      BOOL v10 = "%{public}s called with null cfop";
    }
    else
    {
      if (type)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v16 = gLogObj;
        os_log_type_t v17 = buf[0];
        BOOL v18 = os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)buf[0]);
        if (backtrace_string)
        {
          if (v18)
          {
            *(_DWORD *)uint64_t v85 = 136446466;
            *(void *)&v85[4] = "copyconninfo";
            *(_WORD *)&v85[12] = 2082;
            *(void *)&v85[14] = backtrace_string;
            _os_log_impl(&dword_1830D4000, v16, v17, "%{public}s called with null cfop, dumping backtrace:%{public}s", v85, 0x16u);
          }
          free(backtrace_string);
          goto LABEL_52;
        }
        if (!v18)
        {
LABEL_52:
          if (v7) {
            free(v7);
          }
          goto LABEL_83;
        }
        *(_DWORD *)uint64_t v85 = 136446210;
        *(void *)&v85[4] = "copyconninfo";
        BOOL v10 = "%{public}s called with null cfop, no backtrace";
        __int16 v33 = v16;
        os_log_type_t v34 = v17;
LABEL_51:
        _os_log_impl(&dword_1830D4000, v33, v34, v10, v85, 0xCu);
        goto LABEL_52;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v8 = gLogObj;
      uint8_t v9 = buf[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)buf[0])) {
        goto LABEL_52;
      }
      *(_DWORD *)uint64_t v85 = 136446210;
      *(void *)&v85[4] = "copyconninfo";
      BOOL v10 = "%{public}s called with null cfop, backtrace limit exceeded";
    }
    __int16 v33 = v8;
    os_log_type_t v34 = v9;
    goto LABEL_51;
  }
  if (a1 < 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)uint64_t v85 = 136446466;
    *(void *)&v85[4] = "copyconninfo";
    *(_WORD *)&v85[12] = 1024;
    *(_DWORD *)&v85[14] = a1;
    uint64_t v11 = (char *)_os_log_send_and_compose_impl();
    buf[0] = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v11, buf, &type)) {
      goto LABEL_81;
    }
    if (buf[0] == 17)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v12 = gLogObj;
      os_log_type_t v13 = buf[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)buf[0])) {
        goto LABEL_81;
      }
      *(_DWORD *)uint64_t v85 = 136446466;
      *(void *)&v85[4] = "copyconninfo";
      *(_WORD *)&v85[12] = 1024;
      *(_DWORD *)&v85[14] = a1;
      char v14 = "%{public}s called with null s (%d)";
    }
    else if (type)
    {
      unsigned int v27 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v12 = gLogObj;
      os_log_type_t v13 = buf[0];
      BOOL v28 = os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)buf[0]);
      if (v27)
      {
        if (v28)
        {
          *(_DWORD *)uint64_t v85 = 136446722;
          *(void *)&v85[4] = "copyconninfo";
          *(_WORD *)&v85[12] = 1024;
          *(_DWORD *)&v85[14] = a1;
          *(_WORD *)&v85[18] = 2082;
          *(void *)&v85[20] = v27;
          _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s called with null s (%d), dumping backtrace:%{public}s", v85, 0x1Cu);
        }
        free(v27);
        goto LABEL_81;
      }
      if (!v28)
      {
LABEL_81:
        if (v11) {
          free(v11);
        }
LABEL_83:
        **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8) = 22;
        return 0xFFFFFFFFLL;
      }
      *(_DWORD *)uint64_t v85 = 136446466;
      *(void *)&v85[4] = "copyconninfo";
      *(_WORD *)&v85[12] = 1024;
      *(_DWORD *)&v85[14] = a1;
      char v14 = "%{public}s called with null s (%d), no backtrace";
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v12 = gLogObj;
      os_log_type_t v13 = buf[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)buf[0])) {
        goto LABEL_81;
      }
      *(_DWORD *)uint64_t v85 = 136446466;
      *(void *)&v85[4] = "copyconninfo";
      *(_WORD *)&v85[12] = 1024;
      *(_DWORD *)&v85[14] = a1;
      char v14 = "%{public}s called with null s (%d), backtrace limit exceeded";
    }
    _os_log_impl(&dword_1830D4000, v12, v13, v14, v85, 0x12u);
    goto LABEL_81;
  }
  *(_OWORD *)os_log_type_t v86 = 0u;
  *(_OWORD *)size_t size = 0u;
  memset(v85, 0, sizeof(v85));
  *(_DWORD *)uint64_t v85 = a2;
  if (ioctl(a1, 0xC0407398uLL, v85))
  {
    int v5 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    if ((v5 | 0x10) == 0x16)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v6 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)tcp_info buf = 136446722;
        __int16 v81 = "copyconninfo";
        __int16 v82 = 1024;
        *(_DWORD *)uint64_t v83 = a1;
        *(_WORD *)&v83[4] = 1024;
        *(_DWORD *)&v83[6] = v5;
        _os_log_impl(&dword_1830D4000, v6, OS_LOG_TYPE_ERROR, "%{public}s ioctl(%d,SIOCGCONNINFO_1) %{darwin.errno}d", buf, 0x18u);
      }
      return 0xFFFFFFFFLL;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)tcp_info buf = 136446722;
    __int16 v81 = "copyconninfo";
    __int16 v82 = 1024;
    *(_DWORD *)uint64_t v83 = a1;
    *(_WORD *)&v83[4] = 1024;
    *(_DWORD *)&v83[6] = v5;
    char v29 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v78 = 0;
    if (__nwlog_fault(v29, &type, &v78))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v30 = gLogObj;
        os_log_type_t v31 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
          goto LABEL_106;
        }
        *(_DWORD *)tcp_info buf = 136446722;
        __int16 v81 = "copyconninfo";
        __int16 v82 = 1024;
        *(_DWORD *)uint64_t v83 = a1;
        *(_WORD *)&v83[4] = 1024;
        *(_DWORD *)&v83[6] = v5;
        os_log_type_t v32 = "%{public}s ioctl(%d,SIOCGCONNINFO_1) %{darwin.errno}d";
        goto LABEL_105;
      }
      if (!v78)
      {
        os_log_type_t v30 = __nwlog_obj();
        os_log_type_t v31 = type;
        if (!os_log_type_enabled(v30, type)) {
          goto LABEL_106;
        }
        *(_DWORD *)tcp_info buf = 136446722;
        __int16 v81 = "copyconninfo";
        __int16 v82 = 1024;
        *(_DWORD *)uint64_t v83 = a1;
        *(_WORD *)&v83[4] = 1024;
        *(_DWORD *)&v83[6] = v5;
        os_log_type_t v32 = "%{public}s ioctl(%d,SIOCGCONNINFO_1) %{darwin.errno}d, backtrace limit exceeded";
        goto LABEL_105;
      }
      unsigned int v43 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v30 = gLogObj;
      os_log_type_t v31 = type;
      BOOL v44 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (v43)
      {
        if (v44)
        {
          *(_DWORD *)tcp_info buf = 136446978;
          __int16 v81 = "copyconninfo";
          __int16 v82 = 1024;
          *(_DWORD *)uint64_t v83 = a1;
          *(_WORD *)&v83[4] = 1024;
          *(_DWORD *)&v83[6] = v5;
          LOWORD(v84[0]) = 2082;
          *(void *)((char *)v84 + 2) = v43;
          _os_log_impl(&dword_1830D4000, v30, v31, "%{public}s ioctl(%d,SIOCGCONNINFO_1) %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x22u);
        }
        free(v43);
        goto LABEL_106;
      }
      if (v44)
      {
        *(_DWORD *)tcp_info buf = 136446722;
        __int16 v81 = "copyconninfo";
        __int16 v82 = 1024;
        *(_DWORD *)uint64_t v83 = a1;
        *(_WORD *)&v83[4] = 1024;
        *(_DWORD *)&v83[6] = v5;
        os_log_type_t v32 = "%{public}s ioctl(%d,SIOCGCONNINFO_1) %{darwin.errno}d, no backtrace";
LABEL_105:
        _os_log_impl(&dword_1830D4000, v30, v31, v32, buf, 0x18u);
      }
    }
LABEL_106:
    if (v29) {
      free(v29);
    }
    return 0xFFFFFFFFLL;
  }
  if (*(_DWORD *)&v85[24])
  {
    if (*(_DWORD *)&v85[24] <= 0x1Cu) {
      size_t v19 = 28;
    }
    else {
      size_t v19 = *(unsigned int *)&v85[24];
    }
    *(_DWORD *)&v85[24] = v19;
    os_log_type_t v20 = malloc_type_calloc(1uLL, v19, 0xEAFB8F1AuLL);
    if (!v20)
    {
      char v69 = __nwlog_obj();
      os_log_type_enabled(v69, OS_LOG_TYPE_ERROR);
      *(_DWORD *)tcp_info buf = 136446722;
      __int16 v81 = "strict_calloc";
      __int16 v82 = 2048;
      *(void *)uint64_t v83 = 1;
      *(_WORD *)&v83[8] = 2048;
      v84[0] = v19;
      int v77 = 32;
      id v70 = (void *)_os_log_send_and_compose_impl();
      uint64_t result = __nwlog_abort((uint64_t)v70);
      if (result) {
        goto LABEL_159;
      }
      free(v70);
    }
    *(void *)&v85[16] = v20;
  }
  if (LODWORD(v86[1]))
  {
    if (LODWORD(v86[1]) <= 0x1C) {
      size_t v21 = 28;
    }
    else {
      size_t v21 = LODWORD(v86[1]);
    }
    LODWORD(v86[1]) = v21;
    char v22 = malloc_type_calloc(1uLL, v21, 0xEAFB8F1AuLL);
    if (!v22)
    {
      char v71 = __nwlog_obj();
      os_log_type_enabled(v71, OS_LOG_TYPE_ERROR);
      *(_DWORD *)tcp_info buf = 136446722;
      __int16 v81 = "strict_calloc";
      __int16 v82 = 2048;
      *(void *)uint64_t v83 = 1;
      *(_WORD *)&v83[8] = 2048;
      v84[0] = v21;
      int v77 = 32;
      os_log_type_t v72 = (void *)_os_log_send_and_compose_impl();
      uint64_t result = __nwlog_abort((uint64_t)v72);
      if (result) {
        goto LABEL_159;
      }
      free(v72);
    }
    v86[0] = v22;
  }
  uint64_t v23 = LODWORD(size[1]);
  if (LODWORD(size[1]))
  {
    char v24 = malloc_type_calloc(1uLL, LODWORD(size[1]), 0xEAFB8F1AuLL);
    if (!v24)
    {
      id v73 = __nwlog_obj();
      os_log_type_enabled(v73, OS_LOG_TYPE_ERROR);
      *(_DWORD *)tcp_info buf = 136446722;
      __int16 v81 = "strict_calloc";
      __int16 v82 = 2048;
      *(void *)uint64_t v83 = 1;
      *(_WORD *)&v83[8] = 2048;
      v84[0] = v23;
      int v77 = 32;
      __int16 v74 = (void *)_os_log_send_and_compose_impl();
      uint64_t result = __nwlog_abort((uint64_t)v74);
      if (result) {
        goto LABEL_159;
      }
      free(v74);
    }
    size[0] = (size_t)v24;
  }
  if (ioctl(a1, 0xC0407398uLL, v85, v77))
  {
    int v25 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    if ((v25 | 0x10) == 0x16)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v26 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)tcp_info buf = 136446722;
        __int16 v81 = "copyconninfo";
        __int16 v82 = 1024;
        *(_DWORD *)uint64_t v83 = a1;
        *(_WORD *)&v83[4] = 1024;
        *(_DWORD *)&v83[6] = v25;
        _os_log_impl(&dword_1830D4000, v26, OS_LOG_TYPE_ERROR, "%{public}s ioctl(%d,SIOCGCONNINFO) %{darwin.errno}d", buf, 0x18u);
      }
LABEL_125:
      if (*(void *)&v85[16])
      {
        free(*(void **)&v85[16]);
        *(void *)&v85[16] = 0;
      }
      if (v86[0])
      {
        free(v86[0]);
        v86[0] = 0;
      }
      if (size[0]) {
        free((void *)size[0]);
      }
      *a3 = 0;
      return 0xFFFFFFFFLL;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)tcp_info buf = 136446722;
    __int16 v81 = "copyconninfo";
    __int16 v82 = 1024;
    *(_DWORD *)uint64_t v83 = a1;
    *(_WORD *)&v83[4] = 1024;
    *(_DWORD *)&v83[6] = v25;
    BOOL v45 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v78 = 0;
    if (__nwlog_fault(v45, &type, &v78))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __int16 v46 = __nwlog_obj();
        os_log_type_t v47 = type;
        if (!os_log_type_enabled(v46, type)) {
          goto LABEL_123;
        }
        *(_DWORD *)tcp_info buf = 136446722;
        __int16 v81 = "copyconninfo";
        __int16 v82 = 1024;
        *(_DWORD *)uint64_t v83 = a1;
        *(_WORD *)&v83[4] = 1024;
        *(_DWORD *)&v83[6] = v25;
        uint64_t v48 = "%{public}s ioctl(%d,SIOCGCONNINFO) %{darwin.errno}d";
        goto LABEL_122;
      }
      if (!v78)
      {
        __int16 v46 = __nwlog_obj();
        os_log_type_t v47 = type;
        if (!os_log_type_enabled(v46, type)) {
          goto LABEL_123;
        }
        *(_DWORD *)tcp_info buf = 136446722;
        __int16 v81 = "copyconninfo";
        __int16 v82 = 1024;
        *(_DWORD *)uint64_t v83 = a1;
        *(_WORD *)&v83[4] = 1024;
        *(_DWORD *)&v83[6] = v25;
        uint64_t v48 = "%{public}s ioctl(%d,SIOCGCONNINFO) %{darwin.errno}d, backtrace limit exceeded";
        goto LABEL_122;
      }
      os_log_type_t v57 = (char *)__nw_create_backtrace_string();
      __int16 v46 = __nwlog_obj();
      os_log_type_t v47 = type;
      BOOL v58 = os_log_type_enabled(v46, type);
      if (v57)
      {
        if (v58)
        {
          *(_DWORD *)tcp_info buf = 136446978;
          __int16 v81 = "copyconninfo";
          __int16 v82 = 1024;
          *(_DWORD *)uint64_t v83 = a1;
          *(_WORD *)&v83[4] = 1024;
          *(_DWORD *)&v83[6] = v25;
          LOWORD(v84[0]) = 2082;
          *(void *)((char *)v84 + 2) = v57;
          _os_log_impl(&dword_1830D4000, v46, v47, "%{public}s ioctl(%d,SIOCGCONNINFO) %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x22u);
        }
        free(v57);
        goto LABEL_123;
      }
      if (v58)
      {
        *(_DWORD *)tcp_info buf = 136446722;
        __int16 v81 = "copyconninfo";
        __int16 v82 = 1024;
        *(_DWORD *)uint64_t v83 = a1;
        *(_WORD *)&v83[4] = 1024;
        *(_DWORD *)&v83[6] = v25;
        uint64_t v48 = "%{public}s ioctl(%d,SIOCGCONNINFO) %{darwin.errno}d, no backtrace";
LABEL_122:
        _os_log_impl(&dword_1830D4000, v46, v47, v48, buf, 0x18u);
      }
    }
LABEL_123:
    if (v45) {
      free(v45);
    }
    goto LABEL_125;
  }
  __int16 v35 = malloc_type_calloc(1uLL, 0x28uLL, 0xEAFB8F1AuLL);
  if (v35)
  {
    if (LODWORD(size[1])) {
      goto LABEL_59;
    }
LABEL_57:
    if (size[0])
    {
      free((void *)size[0]);
      size[0] = 0;
    }
LABEL_59:
    uint64_t v36 = *(void **)&v85[16];
    if (!*(_DWORD *)&v85[24])
    {
      if (!*(void *)&v85[16]) {
        goto LABEL_87;
      }
      goto LABEL_86;
    }
    if (*(_DWORD *)&v85[24] >= **(unsigned char **)&v85[16]) {
      goto LABEL_87;
    }
    __nwlog_obj();
    int v37 = **(unsigned char **)&v85[16];
    *(_DWORD *)tcp_info buf = 136446722;
    __int16 v81 = "copyconninfo";
    __int16 v82 = 1024;
    *(_DWORD *)uint64_t v83 = v37;
    *(_WORD *)&v83[4] = 1024;
    *(_DWORD *)&v83[6] = *(_DWORD *)&v85[24];
    BOOL v38 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v78 = 0;
    if (__nwlog_fault(v38, &type, &v78))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v39 = __nwlog_obj();
        os_log_type_t v40 = type;
        if (!os_log_type_enabled(v39, type)) {
          goto LABEL_139;
        }
        int v41 = **(unsigned char **)&v85[16];
        *(_DWORD *)tcp_info buf = 136446722;
        __int16 v81 = "copyconninfo";
        __int16 v82 = 1024;
        *(_DWORD *)uint64_t v83 = v41;
        *(_WORD *)&v83[4] = 1024;
        *(_DWORD *)&v83[6] = *(_DWORD *)&v85[24];
        uint64_t v42 = "%{public}s ioctl SIOCGCONNINFO return invalid source (sa_len=%u > scir_src_len=%u) failed";
LABEL_138:
        _os_log_impl(&dword_1830D4000, v39, v40, v42, buf, 0x18u);
        goto LABEL_139;
      }
      if (!v78)
      {
        uint64_t v39 = __nwlog_obj();
        os_log_type_t v40 = type;
        if (!os_log_type_enabled(v39, type)) {
          goto LABEL_139;
        }
        int v65 = **(unsigned char **)&v85[16];
        *(_DWORD *)tcp_info buf = 136446722;
        __int16 v81 = "copyconninfo";
        __int16 v82 = 1024;
        *(_DWORD *)uint64_t v83 = v65;
        *(_WORD *)&v83[4] = 1024;
        *(_DWORD *)&v83[6] = *(_DWORD *)&v85[24];
        uint64_t v42 = "%{public}s ioctl SIOCGCONNINFO return invalid source (sa_len=%u > scir_src_len=%u) failed, backtrace limit exceeded";
        goto LABEL_138;
      }
      os_log_type_t v59 = (char *)__nw_create_backtrace_string();
      uint64_t v39 = __nwlog_obj();
      os_log_type_t v40 = type;
      BOOL v60 = os_log_type_enabled(v39, type);
      if (!v59)
      {
        if (!v60) {
          goto LABEL_139;
        }
        int v67 = **(unsigned char **)&v85[16];
        *(_DWORD *)tcp_info buf = 136446722;
        __int16 v81 = "copyconninfo";
        __int16 v82 = 1024;
        *(_DWORD *)uint64_t v83 = v67;
        *(_WORD *)&v83[4] = 1024;
        *(_DWORD *)&v83[6] = *(_DWORD *)&v85[24];
        uint64_t v42 = "%{public}s ioctl SIOCGCONNINFO return invalid source (sa_len=%u > scir_src_len=%u) failed, no backtrace";
        goto LABEL_138;
      }
      if (v60)
      {
        int v61 = **(unsigned char **)&v85[16];
        *(_DWORD *)tcp_info buf = 136446978;
        __int16 v81 = "copyconninfo";
        __int16 v82 = 1024;
        *(_DWORD *)uint64_t v83 = v61;
        *(_WORD *)&v83[4] = 1024;
        *(_DWORD *)&v83[6] = *(_DWORD *)&v85[24];
        LOWORD(v84[0]) = 2082;
        *(void *)((char *)v84 + 2) = v59;
        _os_log_impl(&dword_1830D4000, v39, v40, "%{public}s ioctl SIOCGCONNINFO return invalid source (sa_len=%u > scir_src_len=%u) failed, dumping backtrace:%{public}s", buf, 0x22u);
      }
      free(v59);
    }
LABEL_139:
    if (v38) {
      free(v38);
    }
    uint64_t v36 = *(void **)&v85[16];
    if (!*(void *)&v85[16])
    {
LABEL_87:
      os_log_type_t v50 = v86[0];
      if (LODWORD(v86[1]))
      {
        if (LODWORD(v86[1]) < *(unsigned __int8 *)v86[0])
        {
          __nwlog_obj();
          int v51 = *(unsigned __int8 *)v86[0];
          *(_DWORD *)tcp_info buf = 136446722;
          __int16 v81 = "copyconninfo";
          __int16 v82 = 1024;
          *(_DWORD *)uint64_t v83 = v51;
          *(_WORD *)&v83[4] = 1024;
          *(_DWORD *)&v83[6] = v86[1];
          os_log_type_t v52 = (char *)_os_log_send_and_compose_impl();
          os_log_type_t type = OS_LOG_TYPE_ERROR;
          char v78 = 0;
          if (!__nwlog_fault(v52, &type, &v78)) {
            goto LABEL_146;
          }
          if (type == OS_LOG_TYPE_FAULT)
          {
            os_log_type_t v53 = __nwlog_obj();
            os_log_type_t v54 = type;
            if (!os_log_type_enabled(v53, type)) {
              goto LABEL_146;
            }
            int v55 = *(unsigned __int8 *)v86[0];
            *(_DWORD *)tcp_info buf = 136446722;
            __int16 v81 = "copyconninfo";
            __int16 v82 = 1024;
            *(_DWORD *)uint64_t v83 = v55;
            *(_WORD *)&v83[4] = 1024;
            *(_DWORD *)&v83[6] = v86[1];
            os_log_type_t v56 = "%{public}s ioctl SIOCGCONNINFO return invalid destination (sa_len=%u > scir_dst_len=%u) failed";
          }
          else if (v78)
          {
            os_log_type_t v62 = (char *)__nw_create_backtrace_string();
            os_log_type_t v53 = __nwlog_obj();
            os_log_type_t v54 = type;
            BOOL v63 = os_log_type_enabled(v53, type);
            if (v62)
            {
              if (v63)
              {
                int v64 = *(unsigned __int8 *)v86[0];
                *(_DWORD *)tcp_info buf = 136446978;
                __int16 v81 = "copyconninfo";
                __int16 v82 = 1024;
                *(_DWORD *)uint64_t v83 = v64;
                *(_WORD *)&v83[4] = 1024;
                *(_DWORD *)&v83[6] = v86[1];
                LOWORD(v84[0]) = 2082;
                *(void *)((char *)v84 + 2) = v62;
                _os_log_impl(&dword_1830D4000, v53, v54, "%{public}s ioctl SIOCGCONNINFO return invalid destination (sa_len=%u > scir_dst_len=%u) failed, dumping backtrace:%{public}s", buf, 0x22u);
              }
              free(v62);
LABEL_146:
              if (v52) {
                free(v52);
              }
              os_log_type_t v50 = v86[0];
              if (!v86[0]) {
                goto LABEL_95;
              }
              goto LABEL_94;
            }
            if (!v63) {
              goto LABEL_146;
            }
            int v68 = *(unsigned __int8 *)v86[0];
            *(_DWORD *)tcp_info buf = 136446722;
            __int16 v81 = "copyconninfo";
            __int16 v82 = 1024;
            *(_DWORD *)uint64_t v83 = v68;
            *(_WORD *)&v83[4] = 1024;
            *(_DWORD *)&v83[6] = v86[1];
            os_log_type_t v56 = "%{public}s ioctl SIOCGCONNINFO return invalid destination (sa_len=%u > scir_dst_len=%u) failed, no backtrace";
          }
          else
          {
            os_log_type_t v53 = __nwlog_obj();
            os_log_type_t v54 = type;
            if (!os_log_type_enabled(v53, type)) {
              goto LABEL_146;
            }
            int v66 = *(unsigned __int8 *)v86[0];
            *(_DWORD *)tcp_info buf = 136446722;
            __int16 v81 = "copyconninfo";
            __int16 v82 = 1024;
            *(_DWORD *)uint64_t v83 = v66;
            *(_WORD *)&v83[4] = 1024;
            *(_DWORD *)&v83[6] = v86[1];
            os_log_type_t v56 = "%{public}s ioctl SIOCGCONNINFO return invalid destination (sa_len=%u > scir_dst_len=%u) failed, backtr"
                  "ace limit exceeded";
          }
          _os_log_impl(&dword_1830D4000, v53, v54, v56, buf, 0x18u);
          goto LABEL_146;
        }
      }
      else if (v86[0])
      {
LABEL_94:
        free(v50);
        os_log_type_t v50 = 0;
      }
LABEL_95:
      uint64_t result = 0;
      *__int16 v35 = *(void *)&v85[4];
      v35[1] = *(void *)&v85[16];
      v35[2] = v50;
      *((_DWORD *)v35 + 6) = *(_DWORD *)&v85[12];
      *((_DWORD *)v35 + 7) = HIDWORD(v86[1]);
      v35[4] = size[0];
      *a3 = v35;
      return result;
    }
LABEL_86:
    free(v36);
    *(void *)&v85[16] = 0;
    goto LABEL_87;
  }
  os_log_type_t v75 = __nwlog_obj();
  os_log_type_enabled(v75, OS_LOG_TYPE_ERROR);
  *(_DWORD *)tcp_info buf = 136446722;
  __int16 v81 = "strict_calloc";
  __int16 v82 = 2048;
  *(void *)uint64_t v83 = 1;
  *(_WORD *)&v83[8] = 2048;
  v84[0] = 40;
  __int16 v76 = (void *)_os_log_send_and_compose_impl();
  uint64_t result = __nwlog_abort((uint64_t)v76);
  if (!result)
  {
    free(v76);
    if (LODWORD(size[1])) {
      goto LABEL_59;
    }
    goto LABEL_57;
  }
LABEL_159:
  __break(1u);
  return result;
}

void nw_protocol_instance_enumerate_flows(void *a1, void *a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1;
  id v4 = a2;
  if (v3)
  {
    uint64_t v5 = *((void *)v3 + 29);
    if (v5 && *(_DWORD *)(v5 + 40))
    {
      v15[0] = MEMORY[0x1E4F143A8];
      v15[1] = 3221225472;
      v15[2] = __nw_protocol_instance_enumerate_flows_block_invoke;
      v15[3] = &unk_1E523BD88;
      os_log_type_t v16 = v3;
      id v17 = v4;
      nw_hash_table_apply((char *)v5, (uint64_t)v15);
    }
    else if ((v3[405] & 0x80000000) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v6 = (id)gLogObj;
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)tcp_info buf = 136446722;
        size_t v21 = "nw_protocol_instance_enumerate_flows";
        __int16 v22 = 2082;
        uint64_t v23 = v3 + 407;
        __int16 v24 = 2080;
        int v25 = " ";
        _os_log_impl(&dword_1830D4000, v6, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sNo flows to enumerate", buf, 0x20u);
      }
    }
    goto LABEL_9;
  }
  os_log_type_t v7 = __nwlog_obj();
  *(_DWORD *)tcp_info buf = 136446210;
  size_t v21 = "nw_protocol_instance_enumerate_flows";
  uint64_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v18 = 0;
  if (__nwlog_fault(v8, &type, &v18))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint8_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        size_t v21 = "nw_protocol_instance_enumerate_flows";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null instance", buf, 0xCu);
      }
    }
    else if (v18)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint8_t v9 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          size_t v21 = "nw_protocol_instance_enumerate_flows";
          __int16 v22 = 2082;
          uint64_t v23 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_26;
      }
      if (v13)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        size_t v21 = "nw_protocol_instance_enumerate_flows";
        _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null instance, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint8_t v9 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        size_t v21 = "nw_protocol_instance_enumerate_flows";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_26:
  if (v8) {
    free(v8);
  }
LABEL_9:
}

BOOL nw_path_get_rtt_values(void *a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, _DWORD *a5)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  id v9 = a1;
  os_log_type_t v10 = v9;
  if (v9)
  {
    if (a5)
    {
      long long v32 = 0u;
      long long v33 = 0u;
      long long v30 = 0u;
      long long v31 = 0u;
      long long v29 = 0u;
      memset(buf, 0, sizeof(buf));
      BOOL v11 = nw_path_fillout_route_stats(v9, (uint64_t)buf, a5);
      if (v11)
      {
        if (a2) {
          *a2 = DWORD1(v33);
        }
        if (a3) {
          *a3 = DWORD2(v33);
        }
        if (a4) {
          *a4 = HIDWORD(v33);
        }
      }
      else
      {
        if (a2) {
          *a2 = 0;
        }
        if (a3) {
          *a3 = 0;
        }
        if (a4) {
          *a4 = 0;
        }
        *a5 = 0;
      }
      goto LABEL_17;
    }
    id v17 = __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_path_get_rtt_values";
    os_log_type_t v14 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (__nwlog_fault(v14, &type, &v26))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v15 = __nwlog_obj();
        os_log_type_t v18 = type;
        if (os_log_type_enabled(v15, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_path_get_rtt_values";
          _os_log_impl(&dword_1830D4000, v15, v18, "%{public}s called with null route_flags", buf, 0xCu);
        }
LABEL_49:

        goto LABEL_50;
      }
      if (!v26)
      {
        os_log_type_t v15 = __nwlog_obj();
        os_log_type_t v25 = type;
        if (os_log_type_enabled(v15, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_path_get_rtt_values";
          _os_log_impl(&dword_1830D4000, v15, v25, "%{public}s called with null route_flags, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_49;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v15 = __nwlog_obj();
      os_log_type_t v22 = type;
      BOOL v23 = os_log_type_enabled(v15, type);
      if (!backtrace_string)
      {
        if (v23)
        {
          *(_DWORD *)tcp_info buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_path_get_rtt_values";
          _os_log_impl(&dword_1830D4000, v15, v22, "%{public}s called with null route_flags, no backtrace", buf, 0xCu);
        }
        goto LABEL_49;
      }
      if (v23)
      {
        *(_DWORD *)tcp_info buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_path_get_rtt_values";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v15, v22, "%{public}s called with null route_flags, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_37;
    }
  }
  else
  {
    BOOL v13 = __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_path_get_rtt_values";
    os_log_type_t v14 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (__nwlog_fault(v14, &type, &v26))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v15 = __nwlog_obj();
        os_log_type_t v16 = type;
        if (os_log_type_enabled(v15, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_path_get_rtt_values";
          _os_log_impl(&dword_1830D4000, v15, v16, "%{public}s called with null path", buf, 0xCu);
        }
        goto LABEL_49;
      }
      if (!v26)
      {
        os_log_type_t v15 = __nwlog_obj();
        os_log_type_t v24 = type;
        if (os_log_type_enabled(v15, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_path_get_rtt_values";
          _os_log_impl(&dword_1830D4000, v15, v24, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_49;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v15 = __nwlog_obj();
      os_log_type_t v20 = type;
      BOOL v21 = os_log_type_enabled(v15, type);
      if (!backtrace_string)
      {
        if (v21)
        {
          *(_DWORD *)tcp_info buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_path_get_rtt_values";
          _os_log_impl(&dword_1830D4000, v15, v20, "%{public}s called with null path, no backtrace", buf, 0xCu);
        }
        goto LABEL_49;
      }
      if (v21)
      {
        *(_DWORD *)tcp_info buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_path_get_rtt_values";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v15, v20, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_37:

      free(backtrace_string);
    }
  }
LABEL_50:
  if (v14) {
    free(v14);
  }
  BOOL v11 = 0;
LABEL_17:

  return v11;
}

void sub_1832EB708(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_endpoint_resolver_start_next_child(NWConcrete_nw_endpoint_handler *a1)
{
  uint64_t v259 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = a1;
  if (v1)
  {
    BOOL v241 = v1;
    int v2 = v1;
    uint64_t mode = v2->mode;

    if (mode != 1)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      size_t v19 = (id)gLogObj;
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        if (mode > 5) {
          os_log_type_t v20 = "unknown-mode";
        }
        else {
          os_log_type_t v20 = off_1E523FB08[mode];
        }
        *(_DWORD *)tcp_info buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_start_next_child";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = v20;
        __int16 v247 = 2082;
        os_log_type_t v248 = "resolver";
        _os_log_impl(&dword_1830D4000, v19, OS_LOG_TYPE_DEFAULT, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
      }

      goto LABEL_188;
    }
    os_log_type_t v240 = nw_endpoint_handler_copy_resolver(v2);
    id v4 = v2;
    int state = v4->state;

    if ((state & 0xFFFFFFFE) == 4)
    {
      if (nw_endpoint_handler_get_minimize_logging(v4))
      {
        if (nw_endpoint_handler_get_logging_disabled(v4)) {
          goto LABEL_69;
        }
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        uint64_t v8 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
        {
          id_string = nw_endpoint_handler_get_id_string(v4);
          id v162 = nw_endpoint_handler_dry_run_string(v4);
          nw_endpoint_t v163 = nw_endpoint_handler_copy_endpoint(v4);
          logging_description = nw_endpoint_get_logging_description(v163);
          uint32_t v165 = nw_endpoint_handler_state_string(v4);
          int v166 = nw_endpoint_handler_mode_string(v4);
          id v167 = nw_endpoint_handler_copy_current_path(v4);
          *(_DWORD *)tcp_info buf = 136447746;
          *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_start_next_child";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = id_string;
          __int16 v247 = 2082;
          os_log_type_t v248 = v162;
          __int16 v249 = 2082;
          __int16 v250 = logging_description;
          __int16 v251 = 2082;
          nw_endpoint_t v252 = v165;
          __int16 v253 = 2082;
          os_log_type_t v254 = v166;
          __int16 v255 = 2114;
          id v256 = v167;
          _os_log_impl(&dword_1830D4000, v8, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] not starting next child", buf, 0x48u);
        }
      }
      else
      {
        uint64_t v6 = v4;
        char v7 = *((unsigned char *)v6 + 268);

        if ((v7 & 0x20) != 0)
        {
LABEL_69:
          uint64_t v74 = *((void *)v240 + 7);
          if (v74)
          {
            nw_queue_cancel_source(v74);
            *((void *)v240 + 7) = 0;
          }
          uint64_t v75 = *((void *)v240 + 8);
          if (v75)
          {
            nw_queue_cancel_source(v75);
            *((void *)v240 + 8) = 0;
          }
          goto LABEL_187;
        }
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        uint64_t v8 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
        {
          id v9 = v6;

          os_log_type_t v10 = v9;
          char v11 = *((unsigned char *)v6 + 268);

          if (v11) {
            os_log_type_t v12 = "dry-run ";
          }
          else {
            os_log_type_t v12 = "";
          }
          nw_endpoint_t v13 = nw_endpoint_handler_copy_endpoint(v10);
          os_log_type_t v14 = nw_endpoint_get_logging_description(v13);
          id_str = v9->id_str;
          os_log_type_t v15 = v10;
          os_log_type_t v16 = v15;
          uint64_t v17 = v4->state;
          if (v17 > 5) {
            os_log_type_t v18 = "unknown-state";
          }
          else {
            os_log_type_t v18 = off_1E523FB38[v17];
          }

          int v65 = v16;
          int v66 = v65;
          int v67 = "path";
          switch(v2->mode)
          {
            case 0:
              break;
            case 1:
              int v67 = "resolver";
              break;
            case 2:
              int v67 = nw_endpoint_flow_mode_string(v65[31]);
              break;
            case 3:
              int v67 = "proxy";
              break;
            case 4:
              int v67 = "fallback";
              break;
            case 5:
              int v67 = "transform";
              break;
            default:
              int v67 = "unknown-mode";
              break;
          }

          os_log_type_t v72 = v66;
          os_unfair_lock_lock((os_unfair_lock_t)v72 + 28);
          id v73 = v72[8];
          os_unfair_lock_unlock((os_unfair_lock_t)v72 + 28);

          *(_DWORD *)tcp_info buf = 136447746;
          *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_start_next_child";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = id_str;
          __int16 v247 = 2082;
          os_log_type_t v248 = v12;
          __int16 v249 = 2082;
          __int16 v250 = v14;
          __int16 v251 = 2082;
          nw_endpoint_t v252 = v18;
          __int16 v253 = 2082;
          os_log_type_t v254 = v67;
          __int16 v255 = 2114;
          id v256 = v73;
          _os_log_impl(&dword_1830D4000, v8, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] not starting next child", buf, 0x48u);
        }
      }

      goto LABEL_69;
    }
    BOOL v21 = v240;
    if (*((void *)v240 + 4))
    {
      if (nw_endpoint_handler_get_minimize_logging(v4))
      {
        if (nw_endpoint_handler_get_logging_disabled(v4)) {
          goto LABEL_187;
        }
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        os_log_type_t v24 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
        {
          os_log_type_t v169 = nw_endpoint_handler_get_id_string(v4);
          os_log_type_t v170 = nw_endpoint_handler_dry_run_string(v4);
          nw_endpoint_t v171 = nw_endpoint_handler_copy_endpoint(v4);
          int v172 = nw_endpoint_get_logging_description(v171);
          uint64_t v173 = nw_endpoint_handler_state_string(v4);
          __int16 v174 = nw_endpoint_handler_mode_string(v4);
          id v175 = nw_endpoint_handler_copy_current_path(v4);
          *(_DWORD *)tcp_info buf = 136447746;
          *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_start_next_child";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v169;
          __int16 v247 = 2082;
          os_log_type_t v248 = v170;
          __int16 v249 = 2082;
          __int16 v250 = v172;
          __int16 v251 = 2082;
          nw_endpoint_t v252 = v173;
          __int16 v253 = 2082;
          os_log_type_t v254 = v174;
          __int16 v255 = 2114;
          id v256 = v175;
          _os_log_impl(&dword_1830D4000, v24, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] already connected, not starting next child", buf, 0x48u);
        }
      }
      else
      {
        os_log_type_t v22 = v4;
        char v23 = *((unsigned char *)v22 + 268);

        if ((v23 & 0x20) != 0)
        {
LABEL_187:

LABEL_188:
          __int16 v149 = v241;
          goto LABEL_189;
        }
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        os_log_type_t v24 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
        {
          os_log_type_t v25 = v22;

          char v26 = v25;
          char v27 = *((unsigned char *)v22 + 268);

          if (v27) {
            BOOL v28 = "dry-run ";
          }
          else {
            BOOL v28 = "";
          }
          nw_endpoint_t v29 = nw_endpoint_handler_copy_endpoint(v26);
          long long v30 = nw_endpoint_get_logging_description(v29);
          long long v31 = v25->id_str;
          long long v32 = v26;
          long long v33 = v32;
          uint64_t v34 = v4->state;
          if (v34 > 5) {
            __int16 v35 = "unknown-state";
          }
          else {
            __int16 v35 = off_1E523FB38[v34];
          }

          int v68 = v33;
          char v69 = v68;
          int v70 = v2->mode;
          char v71 = "path";
          switch(v70)
          {
            case 0:
              break;
            case 1:
              char v71 = "resolver";
              break;
            case 2:
              char v71 = nw_endpoint_flow_mode_string(v68[31]);
              break;
            case 3:
              char v71 = "proxy";
              break;
            case 4:
              char v71 = "fallback";
              break;
            case 5:
              char v71 = "transform";
              break;
            default:
              char v71 = "unknown-mode";
              break;
          }

          os_log_type_t v79 = v69;
          os_unfair_lock_lock((os_unfair_lock_t)v79 + 28);
          id v80 = v79[8];
          os_unfair_lock_unlock((os_unfair_lock_t)v79 + 28);

          *(_DWORD *)tcp_info buf = 136447746;
          *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_start_next_child";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v31;
          __int16 v247 = 2082;
          os_log_type_t v248 = v28;
          __int16 v249 = 2082;
          __int16 v250 = v30;
          __int16 v251 = 2082;
          nw_endpoint_t v252 = v35;
          __int16 v253 = 2082;
          os_log_type_t v254 = v71;
          __int16 v255 = 2114;
          id v256 = v80;
          _os_log_impl(&dword_1830D4000, v24, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] already connected, not starting next child", buf, 0x48u);
        }
      }

      goto LABEL_187;
    }
    unint64_t v36 = *((unsigned int *)v240 + 5);
    uint64_t v37 = *((void *)v240 + 5);
    if (!v37 || v36 >= (uint64_t)(*(void *)(v37 + 24) - *(void *)(v37 + 16)) >> 3)
    {
      os_log_type_t v52 = v4;
      char v53 = *((unsigned char *)v52 + 268);

      if ((v53 & 0x20) == 0)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        os_log_type_t v54 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v54, OS_LOG_TYPE_DEBUG))
        {
          int v55 = v52;

          os_log_type_t v56 = v55;
          char v57 = *((unsigned char *)v52 + 268);

          if (v57) {
            BOOL v58 = "dry-run ";
          }
          else {
            BOOL v58 = "";
          }
          nw_endpoint_t v59 = nw_endpoint_handler_copy_endpoint(v56);
          BOOL v60 = nw_endpoint_get_logging_description(v59);
          int v61 = v56;
          os_log_type_t v62 = v61;
          uint64_t v63 = v4->state;
          nw_endpoint_t endpointa = v55 + 21;
          if (v63 > 5) {
            int v64 = "unknown-state";
          }
          else {
            int v64 = off_1E523FB38[v63];
          }
          os_log_t loga = v64;

          __int16 v76 = v62;
          int v77 = v76;
          char v78 = "path";
          switch(v2->mode)
          {
            case 0:
              break;
            case 1:
              char v78 = "resolver";
              break;
            case 2:
              char v78 = nw_endpoint_flow_mode_string(v76[31]);
              break;
            case 3:
              char v78 = "proxy";
              break;
            case 4:
              char v78 = "fallback";
              break;
            case 5:
              char v78 = "transform";
              break;
            default:
              char v78 = "unknown-mode";
              break;
          }

          uint64_t v85 = v77;
          os_unfair_lock_lock((os_unfair_lock_t)v85 + 28);
          id v86 = v85[8];
          os_unfair_lock_unlock((os_unfair_lock_t)v85 + 28);

          *(_DWORD *)tcp_info buf = 136448002;
          *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_start_next_child";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = endpointa;
          __int16 v247 = 2082;
          os_log_type_t v248 = v58;
          __int16 v249 = 2082;
          __int16 v250 = v60;
          __int16 v251 = 2082;
          nw_endpoint_t v252 = loga;
          __int16 v253 = 2082;
          os_log_type_t v254 = v78;
          __int16 v255 = 2114;
          id v256 = v86;
          __int16 v257 = 1024;
          LODWORD(v258) = v36;
          _os_log_impl(&dword_1830D4000, v54, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] no child at index %u", buf, 0x4Eu);
        }
      }
      *((unsigned char *)v240 + 24) |= 2u;
      nw_endpoint_resolver_check_desperate_ivan(v52);
      goto LABEL_187;
    }
    *((unsigned char *)v240 + 24) &= ~2u;
    *((_DWORD *)v240 + 5) = v36 + 1;
    uint64_t v38 = *((void *)v240 + 7);
    if (v38)
    {
      nw_queue_cancel_source(v38);
      BOOL v21 = v240;
      *((void *)v240 + 7) = 0;
    }
    uint64_t v39 = *((void *)v21 + 8);
    if (v39)
    {
      nw_queue_cancel_source(v39);
      BOOL v21 = v240;
      *((void *)v240 + 8) = 0;
    }
    v239 = nw_array_get_object_at_index(*((void *)v21 + 5), v36);
    endpoint = nw_endpoint_handler_copy_endpoint(v239);
    if (nw_endpoint_handler_get_minimize_logging(v4))
    {
      if (nw_endpoint_handler_get_logging_disabled(v4))
      {
LABEL_101:
        if (nw_endpoint_handler_get_state(v239) != 5) {
          goto LABEL_109;
        }
        BOOL child_parameters = nw_endpoint_resolver_create_child_parameters(v4);
        if (nw_endpoint_get_is_approved_app_domain(endpoint)) {
          nw_parameters_set_is_approved_app_domain((void *)child_parameters);
        }
        id v91 = v239;
        nw_endpoint_t v92 = v4;
        id v93 = (id)child_parameters;
        id v94 = v93;
        if (v91)
        {
          if (v93)
          {
            if (!v91->parameters)
            {
              objc_storeStrong((id *)&v91->parameters, (id)child_parameters);
              nw_endpoint_handler_inherit_from_parent(v91, v92, 0);
              objc_storeWeak((id *)&v91->callback_context, v92);
              v91->int state = 0;
LABEL_108:

LABEL_109:
              if (nw_endpoint_get_type(endpoint) == nw_endpoint_type_address)
              {
                int v95 = v4;
                os_unfair_lock_lock(&v95->lock);
                id v96 = v95->current_path;
                os_unfair_lock_unlock(&v95->lock);

                *(_DWORD *)os_log_type_t type = 0;
                *(void *)tcp_info buf = 0;
                *(void *)&sockaddr buf[8] = 0;
                p_super = &v96->super;
                if (nw_path_get_vpn_config_uuid(v96, (unsigned __int8 (*)[16])buf, (int *)type, 1, 1))
                {
                  type[0] = OS_LOG_TYPE_DEFAULT;
                  nw_endpoint_t address = nw_endpoint_get_address(endpoint);
                  if (nw_path_voluntary_agent_matches_address(v96, (uint64_t)address))
                  {
                    if (type[0])
                    {
                      if (!nw_endpoint_handler_trigger_agents(v95, 1))
                      {
LABEL_185:

                        goto LABEL_186;
                      }
                      int minimize_logging = nw_endpoint_handler_get_minimize_logging(v95);
                      char logging_disabled = nw_endpoint_handler_get_logging_disabled(v95);
                      if (minimize_logging)
                      {
                        if (logging_disabled) {
                          goto LABEL_121;
                        }
                        if (__nwlog_connection_log::onceToken != -1) {
                          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
                        }
                        unsigned int v101 = (id)gconnectionLogObj;
                        if (os_log_type_enabled(v101, OS_LOG_TYPE_DEBUG))
                        {
                          nw_endpoint_t v224 = nw_endpoint_handler_get_id_string(v95);
                          logd = nw_endpoint_handler_dry_run_string(v95);
                          nw_endpoint_t v225 = nw_endpoint_handler_copy_endpoint(v95);
                          int v226 = nw_endpoint_get_logging_description(v225);
                          uint64_t v227 = nw_endpoint_handler_state_string(v95);
                          uint64_t v228 = nw_endpoint_handler_mode_string(v95);
                          id v229 = nw_endpoint_handler_copy_current_path(v95);
                          *(_DWORD *)tcp_info buf = 136447746;
                          *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_start_next_child";
                          *(_WORD *)&unsigned char buf[12] = 2082;
                          *(void *)&buf[14] = v224;
                          __int16 v247 = 2082;
                          os_log_type_t v248 = logd;
                          __int16 v249 = 2082;
                          __int16 v250 = v226;
                          __int16 v251 = 2082;
                          nw_endpoint_t v252 = v227;
                          __int16 v253 = 2082;
                          os_log_type_t v254 = v228;
                          __int16 v255 = 2114;
                          id v256 = v229;
                          _os_log_impl(&dword_1830D4000, v101, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] child flow requires agent trigger before attempting to connect", buf, 0x48u);
                        }
                      }
                      else
                      {
                        if (logging_disabled)
                        {
LABEL_121:
                          nw_endpoint_handler_reset_mode(v95, 0);
                          goto LABEL_185;
                        }
                        if (__nwlog_connection_log::onceToken != -1) {
                          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
                        }
                        unsigned int v101 = (id)gconnectionLogObj;
                        if (os_log_type_enabled(v101, OS_LOG_TYPE_INFO))
                        {
                          logc = v101;
                          os_log_type_t v102 = nw_endpoint_handler_get_id_string(v95);
                          nw_endpoint_t v103 = nw_endpoint_handler_dry_run_string(v95);
                          nw_endpoint_t v104 = nw_endpoint_handler_copy_endpoint(v95);
                          int v105 = nw_endpoint_get_logging_description(v104);
                          os_log_type_t v106 = nw_endpoint_handler_state_string(v95);
                          id v107 = nw_endpoint_handler_mode_string(v95);
                          id v108 = nw_endpoint_handler_copy_current_path(v95);
                          *(_DWORD *)tcp_info buf = 136447746;
                          *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_start_next_child";
                          *(_WORD *)&unsigned char buf[12] = 2082;
                          *(void *)&buf[14] = v102;
                          __int16 v247 = 2082;
                          os_log_type_t v248 = v103;
                          __int16 v249 = 2082;
                          __int16 v250 = v105;
                          __int16 v251 = 2082;
                          nw_endpoint_t v252 = v106;
                          __int16 v253 = 2082;
                          os_log_type_t v254 = v107;
                          __int16 v255 = 2114;
                          id v256 = v108;
                          _os_log_impl(&dword_1830D4000, logc, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] child flow requires agent trigger before attempting to connect", buf, 0x48u);

                          unsigned int v101 = logc;
                        }
                      }

                      p_super = &v96->super;
                      goto LABEL_121;
                    }
                    nw_endpoint_resolver_setup_trigger_agent_timer(v95, 1);
                  }
                }
              }
              nw_endpoint_handler_start(v239);
              uint64_t v109 = v4;
              int v110 = v4->state;

              if ((v110 & 0xFFFFFFFE) == 4)
              {
                if (nw_endpoint_handler_get_minimize_logging(v109))
                {
                  if (nw_endpoint_handler_get_logging_disabled(v109)) {
                    goto LABEL_186;
                  }
                  if (__nwlog_connection_log::onceToken != -1) {
                    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
                  }
                  int v191 = (id)gconnectionLogObj;
                  if (os_log_type_enabled(v191, OS_LOG_TYPE_DEBUG))
                  {
                    BOOL v192 = nw_endpoint_handler_get_id_string(v109);
                    os_log_type_t v193 = nw_endpoint_handler_dry_run_string(v109);
                    nw_endpoint_t v194 = nw_endpoint_handler_copy_endpoint(v109);
                    int v195 = nw_endpoint_get_logging_description(v194);
                    int v196 = nw_endpoint_handler_state_string(v109);
                    BOOL v197 = nw_endpoint_handler_mode_string(v109);
                    id v198 = nw_endpoint_handler_copy_current_path(v109);
                    *(_DWORD *)tcp_info buf = 136447746;
                    *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_start_next_child";
                    *(_WORD *)&unsigned char buf[12] = 2082;
                    *(void *)&buf[14] = v192;
                    __int16 v247 = 2082;
                    os_log_type_t v248 = v193;
                    __int16 v249 = 2082;
                    __int16 v250 = v195;
                    __int16 v251 = 2082;
                    nw_endpoint_t v252 = v196;
                    __int16 v253 = 2082;
                    os_log_type_t v254 = v197;
                    __int16 v255 = 2114;
                    id v256 = v198;
                    _os_log_impl(&dword_1830D4000, v191, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Not starting next child timer, handler cancelled or failed", buf, 0x48u);
                  }
                  p_super = v191;
                  goto LABEL_185;
                }
                uint64_t v111 = v109;
                BOOL v112 = (*((unsigned char *)v111 + 268) & 0x20) == 0;

                if (v112)
                {
                  if (__nwlog_connection_log::onceToken != -1) {
                    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
                  }
                  p_super = (id)gconnectionLogObj;
                  if (os_log_type_enabled(p_super, OS_LOG_TYPE_INFO))
                  {
                    char v113 = nw_endpoint_handler_get_id_string(v111);
                    uint32_t v114 = nw_endpoint_handler_dry_run_string(v111);
                    nw_endpoint_t v115 = nw_endpoint_handler_copy_endpoint(v111);
                    id v116 = nw_endpoint_get_logging_description(v115);
                    unsigned int v117 = nw_endpoint_handler_state_string(v111);
                    os_log_type_t v118 = nw_endpoint_handler_mode_string(v111);
                    id v119 = nw_endpoint_handler_copy_current_path(v111);
                    *(_DWORD *)tcp_info buf = 136447746;
                    *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_start_next_child";
                    *(_WORD *)&unsigned char buf[12] = 2082;
                    *(void *)&buf[14] = v113;
                    __int16 v247 = 2082;
                    os_log_type_t v248 = v114;
                    __int16 v249 = 2082;
                    __int16 v250 = v116;
                    __int16 v251 = 2082;
                    nw_endpoint_t v252 = v117;
                    __int16 v253 = 2082;
                    os_log_type_t v254 = v118;
                    __int16 v255 = 2114;
                    id v256 = v119;
                    _os_log_impl(&dword_1830D4000, p_super, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Not starting next child timer, handler cancelled or failed", buf, 0x48u);
                  }
                  goto LABEL_185;
                }
LABEL_186:

                goto LABEL_187;
              }
              uint64_t v120 = v109;
              int v121 = v2->mode;

              if (v121 != 1)
              {
                int v123 = nw_endpoint_handler_get_minimize_logging(v120);
                char v124 = nw_endpoint_handler_get_logging_disabled(v120);
                if (v123)
                {
                  if (v124) {
                    goto LABEL_186;
                  }
                  if (__nwlog_connection_log::onceToken != -1) {
                    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
                  }
                  p_super = (id)gconnectionLogObj;
                  if (os_log_type_enabled(p_super, OS_LOG_TYPE_DEBUG))
                  {
                    int v207 = nw_endpoint_handler_get_id_string(v120);
                    uint64_t v208 = nw_endpoint_handler_dry_run_string(v120);
                    nw_endpoint_t v209 = nw_endpoint_handler_copy_endpoint(v120);
                    uint64_t v210 = nw_endpoint_get_logging_description(v209);
                    int v211 = nw_endpoint_handler_state_string(v120);
                    int v212 = nw_endpoint_handler_mode_string(v120);
                    id v213 = nw_endpoint_handler_copy_current_path(v120);
                    *(_DWORD *)tcp_info buf = 136447746;
                    *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_start_next_child";
                    *(_WORD *)&unsigned char buf[12] = 2082;
                    *(void *)&buf[14] = v207;
                    __int16 v247 = 2082;
                    os_log_type_t v248 = v208;
                    __int16 v249 = 2082;
                    __int16 v250 = v210;
                    __int16 v251 = 2082;
                    nw_endpoint_t v252 = v211;
                    __int16 v253 = 2082;
                    os_log_type_t v254 = v212;
                    __int16 v255 = 2114;
                    id v256 = v213;
                    _os_log_impl(&dword_1830D4000, p_super, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Not starting next child timer, no longer resolver mode", buf, 0x48u);
                  }
                  goto LABEL_185;
                }
                if ((v124 & 1) == 0)
                {
                  if (__nwlog_connection_log::onceToken != -1) {
                    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
                  }
                  p_super = (id)gconnectionLogObj;
                  if (os_log_type_enabled(p_super, OS_LOG_TYPE_INFO))
                  {
                    uint64_t v125 = nw_endpoint_handler_get_id_string(v120);
                    dispatch_data_t v126 = nw_endpoint_handler_dry_run_string(v120);
                    nw_endpoint_t v127 = nw_endpoint_handler_copy_endpoint(v120);
                    int v128 = nw_endpoint_get_logging_description(v127);
                    id v129 = nw_endpoint_handler_state_string(v120);
                    int v130 = nw_endpoint_handler_mode_string(v120);
                    id v131 = nw_endpoint_handler_copy_current_path(v120);
                    *(_DWORD *)tcp_info buf = 136447746;
                    *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_start_next_child";
                    *(_WORD *)&unsigned char buf[12] = 2082;
                    *(void *)&buf[14] = v125;
                    __int16 v247 = 2082;
                    os_log_type_t v248 = v126;
                    __int16 v249 = 2082;
                    __int16 v250 = v128;
                    __int16 v251 = 2082;
                    nw_endpoint_t v252 = v129;
                    __int16 v253 = 2082;
                    os_log_type_t v254 = v130;
                    __int16 v255 = 2114;
                    id v256 = v131;
                    _os_log_impl(&dword_1830D4000, p_super, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Not starting next child timer, no longer resolver mode", buf, 0x48u);
                  }
                  goto LABEL_185;
                }
                goto LABEL_186;
              }
              if (*((void *)v240 + 4)) {
                goto LABEL_186;
              }
              BOOL v122 = v240;
              if (*((unsigned char *)v240 + 24)) {
                unint64_t logb = 2000000000;
              }
              else {
                unint64_t logb = nw_endpoint_handler_get_child_timeout_nanos(v239);
              }
              int v132 = nw_endpoint_handler_get_minimize_logging(v120);
              char v133 = nw_endpoint_handler_get_logging_disabled(v120);
              if (v132)
              {
                if (v133)
                {
LABEL_149:
                  id v142 = nw_endpoint_handler_copy_context(v120);
                  v242[0] = MEMORY[0x1E4F143A8];
                  v242[1] = 3221225472;
                  v242[2] = ___ZL37nw_endpoint_resolver_start_next_childP30NWConcrete_nw_endpoint_handler_block_invoke;
                  v242[3] = &unk_1E524BAA8;
                  os_log_type_t v243 = v120;
                  *((void *)v122 + 7) = nw_queue_context_create_source(v142, 2, 3, 0, v242, 0);

                  uint64_t v143 = *((void *)v122 + 7);
                  if (v143)
                  {
                    dispatch_time_t v144 = dispatch_time(0x8000000000000000, logb);
                    nw_queue_set_timer_values(v143, v144, 0xFFFFFFFFFFFFFFFFLL, 0xF4240uLL);
                    nw_queue_activate_source(*((void *)v240 + 7));
LABEL_184:
                    p_super = v243;
                    goto LABEL_185;
                  }
                  uint32_t v145 = __nwlog_obj();
                  *(_DWORD *)tcp_info buf = 136446210;
                  *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_start_next_child";
                  int v146 = (char *)_os_log_send_and_compose_impl();

                  type[0] = OS_LOG_TYPE_ERROR;
                  char v244 = 0;
                  if (__nwlog_fault(v146, type, &v244))
                  {
                    if (type[0] == OS_LOG_TYPE_FAULT)
                    {
                      int v147 = __nwlog_obj();
                      os_log_type_t v148 = type[0];
                      if (os_log_type_enabled(v147, type[0]))
                      {
                        *(_DWORD *)tcp_info buf = 136446210;
                        *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_start_next_child";
                        _os_log_impl(&dword_1830D4000, v147, v148, "%{public}s nw_queue_context_create_source(timer) failed", buf, 0xCu);
                      }
                    }
                    else if (v244)
                    {
                      backtrace_string = (char *)__nw_create_backtrace_string();
                      int v147 = __nwlog_obj();
                      os_log_type_t v155 = type[0];
                      BOOL v156 = os_log_type_enabled(v147, type[0]);
                      if (backtrace_string)
                      {
                        if (v156)
                        {
                          *(_DWORD *)tcp_info buf = 136446466;
                          *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_start_next_child";
                          *(_WORD *)&unsigned char buf[12] = 2082;
                          *(void *)&buf[14] = backtrace_string;
                          _os_log_impl(&dword_1830D4000, v147, v155, "%{public}s nw_queue_context_create_source(timer) failed, dumping backtrace:%{public}s", buf, 0x16u);
                        }

                        free(backtrace_string);
                        goto LABEL_182;
                      }
                      if (v156)
                      {
                        *(_DWORD *)tcp_info buf = 136446210;
                        *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_start_next_child";
                        _os_log_impl(&dword_1830D4000, v147, v155, "%{public}s nw_queue_context_create_source(timer) failed, no backtrace", buf, 0xCu);
                      }
                    }
                    else
                    {
                      int v147 = __nwlog_obj();
                      os_log_type_t v160 = type[0];
                      if (os_log_type_enabled(v147, type[0]))
                      {
                        *(_DWORD *)tcp_info buf = 136446210;
                        *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_start_next_child";
                        _os_log_impl(&dword_1830D4000, v147, v160, "%{public}s nw_queue_context_create_source(timer) failed, backtrace limit exceeded", buf, 0xCu);
                      }
                    }
                  }
LABEL_182:
                  if (v146) {
                    free(v146);
                  }
                  goto LABEL_184;
                }
                if (__nwlog_connection_log::onceToken != -1) {
                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
                }
                id v134 = (id)gconnectionLogObj;
                if (os_log_type_enabled(v134, OS_LOG_TYPE_DEBUG))
                {
                  os_log_type_t v217 = nw_endpoint_handler_get_id_string(v120);
                  BOOL v218 = nw_endpoint_handler_dry_run_string(v120);
                  nw_endpoint_t v219 = nw_endpoint_handler_copy_endpoint(v120);
                  unint64_t v220 = nw_endpoint_get_logging_description(v219);
                  os_log_type_t v221 = nw_endpoint_handler_state_string(v120);
                  BOOL v222 = nw_endpoint_handler_mode_string(v120);
                  id v223 = nw_endpoint_handler_copy_current_path(v120);
                  *(_DWORD *)tcp_info buf = 136448002;
                  *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_start_next_child";
                  *(_WORD *)&unsigned char buf[12] = 2082;
                  *(void *)&buf[14] = v217;
                  __int16 v247 = 2082;
                  os_log_type_t v248 = v218;
                  __int16 v249 = 2082;
                  __int16 v250 = v220;
                  __int16 v251 = 2082;
                  nw_endpoint_t v252 = v221;
                  __int16 v253 = 2082;
                  os_log_type_t v254 = v222;
                  __int16 v255 = 2114;
                  id v256 = v223;
                  __int16 v257 = 2048;
                  unint64_t v258 = logb / 0xF4240;
                  _os_log_impl(&dword_1830D4000, v134, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] starting next child endpoint in %llums", buf, 0x52u);
                }
              }
              else
              {
                if (v133) {
                  goto LABEL_149;
                }
                if (__nwlog_connection_log::onceToken != -1) {
                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
                }
                id v134 = (id)gconnectionLogObj;
                if (os_log_type_enabled(v134, OS_LOG_TYPE_INFO))
                {
                  nw_endpoint_t v135 = nw_endpoint_handler_get_id_string(v120);
                  os_log_type_t v136 = nw_endpoint_handler_dry_run_string(v120);
                  nw_endpoint_t v137 = nw_endpoint_handler_copy_endpoint(v120);
                  os_log_type_t v138 = nw_endpoint_get_logging_description(v137);
                  uint64_t v139 = nw_endpoint_handler_state_string(v120);
                  BOOL v140 = nw_endpoint_handler_mode_string(v120);
                  id v141 = nw_endpoint_handler_copy_current_path(v120);
                  *(_DWORD *)tcp_info buf = 136448002;
                  *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_start_next_child";
                  *(_WORD *)&unsigned char buf[12] = 2082;
                  *(void *)&buf[14] = v135;
                  __int16 v247 = 2082;
                  os_log_type_t v248 = v136;
                  __int16 v249 = 2082;
                  __int16 v250 = v138;
                  __int16 v251 = 2082;
                  nw_endpoint_t v252 = v139;
                  __int16 v253 = 2082;
                  os_log_type_t v254 = v140;
                  __int16 v255 = 2114;
                  id v256 = v141;
                  __int16 v257 = 2048;
                  unint64_t v258 = logb / 0xF4240;
                  _os_log_impl(&dword_1830D4000, v134, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] starting next child endpoint in %llums", buf, 0x52u);
                }
              }

              BOOL v122 = v240;
              goto LABEL_149;
            }
            uint32_t v189 = __nwlog_obj();
            *(_DWORD *)tcp_info buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_endpoint_handler_reinitialize";
            unint64_t v184 = (char *)_os_log_send_and_compose_impl();

            type[0] = OS_LOG_TYPE_ERROR;
            char v244 = 0;
            if (!__nwlog_fault(v184, type, &v244)) {
              goto LABEL_274;
            }
            if (type[0] == OS_LOG_TYPE_FAULT)
            {
              nw_endpoint_t v185 = __nwlog_obj();
              os_log_type_t v190 = type[0];
              if (os_log_type_enabled(v185, type[0]))
              {
                *(_DWORD *)tcp_info buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_endpoint_handler_reinitialize";
                _os_log_impl(&dword_1830D4000, v185, v190, "%{public}s called with null (handler->parameters == nil)", buf, 0xCu);
              }
              goto LABEL_273;
            }
            if (!v244)
            {
              nw_endpoint_t v185 = __nwlog_obj();
              os_log_type_t v216 = type[0];
              if (os_log_type_enabled(v185, type[0]))
              {
                *(_DWORD *)tcp_info buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_endpoint_handler_reinitialize";
                _os_log_impl(&dword_1830D4000, v185, v216, "%{public}s called with null (handler->parameters == nil), backtrace limit exceeded", buf, 0xCu);
              }
              goto LABEL_273;
            }
            os_log_type_t v202 = (char *)__nw_create_backtrace_string();
            nw_endpoint_t v185 = __nwlog_obj();
            os_log_type_t v205 = type[0];
            BOOL v206 = os_log_type_enabled(v185, type[0]);
            if (!v202)
            {
              if (v206)
              {
                *(_DWORD *)tcp_info buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_endpoint_handler_reinitialize";
                _os_log_impl(&dword_1830D4000, v185, v205, "%{public}s called with null (handler->parameters == nil), no backtrace", buf, 0xCu);
              }
              goto LABEL_273;
            }
            if (v206)
            {
              *(_DWORD *)tcp_info buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_endpoint_handler_reinitialize";
              *(_WORD *)&unsigned char buf[12] = 2082;
              *(void *)&buf[14] = v202;
              _os_log_impl(&dword_1830D4000, v185, v205, "%{public}s called with null (handler->parameters == nil), dumping backtrace:%{public}s", buf, 0x16u);
            }
          }
          else
          {
            os_log_type_t v187 = __nwlog_obj();
            *(_DWORD *)tcp_info buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_endpoint_handler_reinitialize";
            unint64_t v184 = (char *)_os_log_send_and_compose_impl();

            type[0] = OS_LOG_TYPE_ERROR;
            char v244 = 0;
            if (!__nwlog_fault(v184, type, &v244)) {
              goto LABEL_274;
            }
            if (type[0] == OS_LOG_TYPE_FAULT)
            {
              nw_endpoint_t v185 = __nwlog_obj();
              os_log_type_t v188 = type[0];
              if (os_log_type_enabled(v185, type[0]))
              {
                *(_DWORD *)tcp_info buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_endpoint_handler_reinitialize";
                _os_log_impl(&dword_1830D4000, v185, v188, "%{public}s called with null parameters", buf, 0xCu);
              }
              goto LABEL_273;
            }
            if (!v244)
            {
              nw_endpoint_t v185 = __nwlog_obj();
              os_log_type_t v215 = type[0];
              if (os_log_type_enabled(v185, type[0]))
              {
                *(_DWORD *)tcp_info buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_endpoint_handler_reinitialize";
                _os_log_impl(&dword_1830D4000, v185, v215, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
              }
              goto LABEL_273;
            }
            os_log_type_t v202 = (char *)__nw_create_backtrace_string();
            nw_endpoint_t v185 = __nwlog_obj();
            os_log_type_t v203 = type[0];
            BOOL v204 = os_log_type_enabled(v185, type[0]);
            if (!v202)
            {
              if (v204)
              {
                *(_DWORD *)tcp_info buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_endpoint_handler_reinitialize";
                _os_log_impl(&dword_1830D4000, v185, v203, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
              }
              goto LABEL_273;
            }
            if (v204)
            {
              *(_DWORD *)tcp_info buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_endpoint_handler_reinitialize";
              *(_WORD *)&unsigned char buf[12] = 2082;
              *(void *)&buf[14] = v202;
              _os_log_impl(&dword_1830D4000, v185, v203, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
            }
          }

          free(v202);
          if (!v184) {
            goto LABEL_108;
          }
          goto LABEL_275;
        }
        uint64_t v183 = __nwlog_obj();
        *(_DWORD *)tcp_info buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_endpoint_handler_reinitialize";
        unint64_t v184 = (char *)_os_log_send_and_compose_impl();

        type[0] = OS_LOG_TYPE_ERROR;
        char v244 = 0;
        if (!__nwlog_fault(v184, type, &v244)) {
          goto LABEL_274;
        }
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          nw_endpoint_t v185 = __nwlog_obj();
          os_log_type_t v186 = type[0];
          if (os_log_type_enabled(v185, type[0]))
          {
            *(_DWORD *)tcp_info buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_endpoint_handler_reinitialize";
            _os_log_impl(&dword_1830D4000, v185, v186, "%{public}s called with null handler", buf, 0xCu);
          }
        }
        else if (v244)
        {
          __int16 v199 = (char *)__nw_create_backtrace_string();
          nw_endpoint_t v185 = __nwlog_obj();
          os_log_type_t v200 = type[0];
          BOOL v201 = os_log_type_enabled(v185, type[0]);
          if (v199)
          {
            if (v201)
            {
              *(_DWORD *)tcp_info buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_endpoint_handler_reinitialize";
              *(_WORD *)&unsigned char buf[12] = 2082;
              *(void *)&buf[14] = v199;
              _os_log_impl(&dword_1830D4000, v185, v200, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(v199);
LABEL_274:
            if (!v184) {
              goto LABEL_108;
            }
LABEL_275:
            free(v184);
            goto LABEL_108;
          }
          if (v201)
          {
            *(_DWORD *)tcp_info buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_endpoint_handler_reinitialize";
            _os_log_impl(&dword_1830D4000, v185, v200, "%{public}s called with null handler, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          nw_endpoint_t v185 = __nwlog_obj();
          os_log_type_t v214 = type[0];
          if (os_log_type_enabled(v185, type[0]))
          {
            *(_DWORD *)tcp_info buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_endpoint_handler_reinitialize";
            _os_log_impl(&dword_1830D4000, v185, v214, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
          }
        }
LABEL_273:

        goto LABEL_274;
      }
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      uint64_t v42 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v42, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v176 = nw_endpoint_handler_get_id_string(v4);
        uint64_t v177 = nw_endpoint_handler_dry_run_string(v4);
        nw_endpoint_t v178 = nw_endpoint_handler_copy_endpoint(v4);
        uint64_t v179 = nw_endpoint_get_logging_description(v178);
        os_log_type_t v180 = nw_endpoint_handler_state_string(v4);
        uint32_t v181 = nw_endpoint_handler_mode_string(v4);
        id v182 = nw_endpoint_handler_copy_current_path(v4);
        *(_DWORD *)tcp_info buf = 136448002;
        *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_start_next_child";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = v176;
        __int16 v247 = 2082;
        os_log_type_t v248 = v177;
        __int16 v249 = 2082;
        __int16 v250 = v179;
        __int16 v251 = 2082;
        nw_endpoint_t v252 = v180;
        __int16 v253 = 2082;
        os_log_type_t v254 = v181;
        __int16 v255 = 2114;
        id v256 = v182;
        __int16 v257 = 2082;
        unint64_t v258 = (unint64_t)nw_endpoint_get_logging_description(endpoint);
        _os_log_impl(&dword_1830D4000, v42, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] starting child endpoint %{public}s", buf, 0x52u);
      }
    }
    else
    {
      os_log_type_t v40 = v4;
      char v41 = *((unsigned char *)v40 + 268);

      if ((v41 & 0x20) != 0) {
        goto LABEL_101;
      }
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      uint64_t v42 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v42, OS_LOG_TYPE_INFO))
      {
        unsigned int v43 = v40;

        BOOL v44 = v43;
        char v45 = *((unsigned char *)v40 + 268);

        if (v45) {
          __int16 v46 = "dry-run ";
        }
        else {
          __int16 v46 = "";
        }
        nw_endpoint_t log = nw_endpoint_handler_copy_endpoint(v44);
        os_log_type_t v47 = nw_endpoint_get_logging_description(log);
        uint64_t v48 = v44;
        uint64_t v49 = v48;
        uint64_t v50 = v4->state;
        if (v50 > 5) {
          int v51 = "unknown-state";
        }
        else {
          int v51 = off_1E523FB38[v50];
        }
        nw_endpoint_t v230 = v51;

        __int16 v81 = v49;
        __int16 v82 = v81;
        uint64_t v83 = v47;
        os_log_type_t v84 = "path";
        switch(v2->mode)
        {
          case 0:
            break;
          case 1:
            os_log_type_t v84 = "resolver";
            break;
          case 2:
            os_log_type_t v84 = nw_endpoint_flow_mode_string(v81[31]);
            break;
          case 3:
            os_log_type_t v84 = "proxy";
            break;
          case 4:
            os_log_type_t v84 = "fallback";
            break;
          case 5:
            os_log_type_t v84 = "transform";
            break;
          default:
            os_log_type_t v84 = "unknown-mode";
            break;
        }

        uint64_t v87 = v82;
        os_unfair_lock_lock((os_unfair_lock_t)v87 + 28);
        id v88 = v87[8];
        os_unfair_lock_unlock((os_unfair_lock_t)v87 + 28);

        id v89 = v88;
        *(_DWORD *)tcp_info buf = 136448002;
        *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_start_next_child";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = v43->id_str;
        __int16 v247 = 2082;
        os_log_type_t v248 = v46;
        __int16 v249 = 2082;
        __int16 v250 = v83;
        __int16 v251 = 2082;
        nw_endpoint_t v252 = v230;
        __int16 v253 = 2082;
        os_log_type_t v254 = v84;
        __int16 v255 = 2114;
        id v256 = v89;
        __int16 v257 = 2082;
        unint64_t v258 = (unint64_t)nw_endpoint_get_logging_description(endpoint);
        _os_log_impl(&dword_1830D4000, v42, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] starting child endpoint %{public}s", buf, 0x52u);
      }
    }

    goto LABEL_101;
  }
  __int16 v149 = 0;
  os_log_type_t v150 = __nwlog_obj();
  *(_DWORD *)tcp_info buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_start_next_child";
  int v151 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  char v244 = 0;
  if (__nwlog_fault(v151, type, &v244))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      BOOL v152 = __nwlog_obj();
      os_log_type_t v153 = type[0];
      if (os_log_type_enabled(v152, type[0]))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_start_next_child";
        _os_log_impl(&dword_1830D4000, v152, v153, "%{public}s called with null handler", buf, 0xCu);
      }
    }
    else if (v244)
    {
      char v157 = (char *)__nw_create_backtrace_string();
      BOOL v152 = __nwlog_obj();
      os_log_type_t v158 = type[0];
      BOOL v159 = os_log_type_enabled(v152, type[0]);
      if (v157)
      {
        if (v159)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_start_next_child";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v157;
          _os_log_impl(&dword_1830D4000, v152, v158, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v157);
        goto LABEL_202;
      }
      if (v159)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_start_next_child";
        _os_log_impl(&dword_1830D4000, v152, v158, "%{public}s called with null handler, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v152 = __nwlog_obj();
      os_log_type_t v168 = type[0];
      if (os_log_type_enabled(v152, type[0]))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_start_next_child";
        _os_log_impl(&dword_1830D4000, v152, v168, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_202:
  if (v151) {
    free(v151);
  }
LABEL_189:
}

void sub_1832EDBD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, void *a18)
{
  _Unwind_Resume(a1);
}

uint64_t nw_endpoint_handler_get_state(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = a1;
  int v2 = v1;
  if (v1)
  {
    uint64_t v3 = v1[30];
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)tcp_info buf = 136446210;
  os_log_type_t v16 = "nw_endpoint_handler_get_state";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v16 = "nw_endpoint_handler_get_state";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null handler", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      char v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          os_log_type_t v16 = "nw_endpoint_handler_get_state";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v16 = "nw_endpoint_handler_get_state";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null handler, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      char v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v16 = "nw_endpoint_handler_get_state";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_endpoint_handler_get_child_timeout_nanos(void *a1)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = a1;
  int v2 = v1;
  if (v1)
  {
    uint64_t v3 = nw_endpoint_handler_copy_endpoint(v1);
    if (nw_endpoint_get_type(v3) == nw_endpoint_type_address) {
      nw_endpoint_t address = nw_endpoint_get_address(v3);
    }
    else {
      nw_endpoint_t address = 0;
    }
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v30 = 0u;
    memset(buf, 0, sizeof(buf));
    uint64_t v5 = v2;
    os_unfair_lock_lock(v2 + 28);
    id v6 = v5[8];
    os_unfair_lock_unlock(v2 + 28);

    if (v6 && nw_path_fillout_route_stats(v6, (uint64_t)buf, 0))
    {
      if (DWORD2(v34))
      {
        LODWORD(v7) = 8 * HIDWORD(v34) + (DWORD2(v34) >> 2);
        if (v7 <= DWORD2(v34)) {
          uint64_t v7 = DWORD2(v34);
        }
        else {
          uint64_t v7 = v7;
        }
        unint64_t v8 = 31250 * (v7 + DWORD2(v34));
        goto LABEL_23;
      }
    }
    else
    {
      long long v33 = 0u;
      long long v34 = 0u;
      long long v31 = 0u;
      long long v32 = 0u;
      long long v30 = 0u;
      memset(buf, 0, sizeof(buf));
    }
    if (address && address->sa_family == 2)
    {
      unint64_t v8 = 250000000;
      id v9 = (const char *)nw_setting_tcpconn_ipv4_delay;
    }
    else
    {
      unint64_t v8 = 250000000;
      id v9 = (const char *)nw_setting_tcpconn_ipv6_delay;
    }
    networkd_settings_init();
    if (sCachedSettings)
    {
      pthread_mutex_lock(&sSettingsMutex);
      if (sCachedSettings)
      {
        int64_t int64 = xpc_dictionary_get_int64((xpc_object_t)sCachedSettings, v9);
        pthread_mutex_unlock(&sSettingsMutex);
        if (int64) {
          unint64_t v8 = 1000000 * int64;
        }
      }
      else
      {
        pthread_mutex_unlock(&sSettingsMutex);
      }
    }
LABEL_23:
    BOOL v11 = (const char *)nw_setting_tcpconn_min_delay;
    networkd_settings_init();
    if (sCachedSettings)
    {
      pthread_mutex_lock(&sSettingsMutex);
      if (sCachedSettings) {
        int64_t v12 = xpc_dictionary_get_int64((xpc_object_t)sCachedSettings, v11);
      }
      else {
        int64_t v12 = 0;
      }
      pthread_mutex_unlock(&sSettingsMutex);
    }
    else
    {
      int64_t v12 = 0;
    }
    char v13 = (const char *)nw_setting_tcpconn_max_delay;
    networkd_settings_init();
    if (sCachedSettings)
    {
      pthread_mutex_lock(&sSettingsMutex);
      if (sCachedSettings) {
        unint64_t v14 = xpc_dictionary_get_int64((xpc_object_t)sCachedSettings, v13);
      }
      else {
        unint64_t v14 = 0;
      }
      pthread_mutex_unlock(&sSettingsMutex);
      unint64_t v15 = 100000000;
      if (v12) {
        unint64_t v15 = v12;
      }
      if (v14) {
        goto LABEL_40;
      }
    }
    else
    {
      unint64_t v15 = 100000000;
      if (v12) {
        unint64_t v15 = v12;
      }
    }
    unint64_t v14 = 2000000000;
LABEL_40:
    if (v8 >= v14) {
      unint64_t v16 = v14;
    }
    else {
      unint64_t v16 = v8;
    }
    if (v8 >= v15) {
      uint64_t v17 = v16;
    }
    else {
      uint64_t v17 = v15;
    }

    goto LABEL_47;
  }
  uint64_t v19 = __nwlog_obj();
  *(_DWORD *)tcp_info buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_endpoint_handler_get_child_timeout_nanos";
  os_log_type_t v20 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v27 = 0;
  if (__nwlog_fault(v20, &type, &v27))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v21 = __nwlog_obj();
      os_log_type_t v22 = type;
      if (os_log_type_enabled(v21, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_endpoint_handler_get_child_timeout_nanos";
        _os_log_impl(&dword_1830D4000, v21, v22, "%{public}s called with null child_handler", buf, 0xCu);
      }
    }
    else if (v27)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v21 = __nwlog_obj();
      os_log_type_t v24 = type;
      BOOL v25 = os_log_type_enabled(v21, type);
      if (backtrace_string)
      {
        if (v25)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_endpoint_handler_get_child_timeout_nanos";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v21, v24, "%{public}s called with null child_handler, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_64;
      }
      if (v25)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_endpoint_handler_get_child_timeout_nanos";
        _os_log_impl(&dword_1830D4000, v21, v24, "%{public}s called with null child_handler, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v21 = __nwlog_obj();
      os_log_type_t v26 = type;
      if (os_log_type_enabled(v21, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_endpoint_handler_get_child_timeout_nanos";
        _os_log_impl(&dword_1830D4000, v21, v26, "%{public}s called with null child_handler, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_64:
  if (v20) {
    free(v20);
  }
  uint64_t v17 = 100000000;
LABEL_47:

  return v17;
}

void sub_1832EE51C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_path_fillout_route_stats(void *a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a1;
  id v6 = v5;
  if (!v5)
  {
    char v27 = __nwlog_obj();
    *(_DWORD *)uint64_t v49 = 136446210;
    *(void *)&void v49[4] = "nw_path_fillout_route_stats";
    BOOL v28 = (char *)_os_log_send_and_compose_impl();

    buf[0] = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v28, buf, &type)) {
      goto LABEL_66;
    }
    if (buf[0] == 17)
    {
      nw_endpoint_t v29 = __nwlog_obj();
      os_log_type_t v30 = buf[0];
      if (os_log_type_enabled(v29, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)uint64_t v49 = 136446210;
        *(void *)&void v49[4] = "nw_path_fillout_route_stats";
        _os_log_impl(&dword_1830D4000, v29, v30, "%{public}s called with null path", v49, 0xCu);
      }
      goto LABEL_65;
    }
    if (type == OS_LOG_TYPE_DEFAULT)
    {
      nw_endpoint_t v29 = __nwlog_obj();
      os_log_type_t v38 = buf[0];
      if (os_log_type_enabled(v29, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)uint64_t v49 = 136446210;
        *(void *)&void v49[4] = "nw_path_fillout_route_stats";
        _os_log_impl(&dword_1830D4000, v29, v38, "%{public}s called with null path, backtrace limit exceeded", v49, 0xCu);
      }
      goto LABEL_65;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    nw_endpoint_t v29 = __nwlog_obj();
    os_log_type_t v34 = buf[0];
    BOOL v35 = os_log_type_enabled(v29, (os_log_type_t)buf[0]);
    if (!backtrace_string)
    {
      if (v35)
      {
        *(_DWORD *)uint64_t v49 = 136446210;
        *(void *)&void v49[4] = "nw_path_fillout_route_stats";
        _os_log_impl(&dword_1830D4000, v29, v34, "%{public}s called with null path, no backtrace", v49, 0xCu);
      }
      goto LABEL_65;
    }
    if (v35)
    {
      *(_DWORD *)uint64_t v49 = 136446466;
      *(void *)&void v49[4] = "nw_path_fillout_route_stats";
      *(_WORD *)&v49[12] = 2082;
      *(void *)&v49[14] = backtrace_string;
      _os_log_impl(&dword_1830D4000, v29, v34, "%{public}s called with null path, dumping backtrace:%{public}s", v49, 0x16u);
    }
    goto LABEL_53;
  }
  if (!a2)
  {
    long long v31 = __nwlog_obj();
    *(_DWORD *)uint64_t v49 = 136446210;
    *(void *)&void v49[4] = "nw_path_fillout_route_stats";
    BOOL v28 = (char *)_os_log_send_and_compose_impl();

    buf[0] = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v28, buf, &type)) {
      goto LABEL_66;
    }
    if (buf[0] == 17)
    {
      nw_endpoint_t v29 = __nwlog_obj();
      os_log_type_t v32 = buf[0];
      if (os_log_type_enabled(v29, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)uint64_t v49 = 136446210;
        *(void *)&void v49[4] = "nw_path_fillout_route_stats";
        _os_log_impl(&dword_1830D4000, v29, v32, "%{public}s called with null return_stats", v49, 0xCu);
      }
LABEL_65:

LABEL_66:
      if (v28) {
        free(v28);
      }
      goto LABEL_68;
    }
    if (type == OS_LOG_TYPE_DEFAULT)
    {
      nw_endpoint_t v29 = __nwlog_obj();
      os_log_type_t v39 = buf[0];
      if (os_log_type_enabled(v29, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)uint64_t v49 = 136446210;
        *(void *)&void v49[4] = "nw_path_fillout_route_stats";
        _os_log_impl(&dword_1830D4000, v29, v39, "%{public}s called with null return_stats, backtrace limit exceeded", v49, 0xCu);
      }
      goto LABEL_65;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    nw_endpoint_t v29 = __nwlog_obj();
    os_log_type_t v36 = buf[0];
    BOOL v37 = os_log_type_enabled(v29, (os_log_type_t)buf[0]);
    if (!backtrace_string)
    {
      if (v37)
      {
        *(_DWORD *)uint64_t v49 = 136446210;
        *(void *)&void v49[4] = "nw_path_fillout_route_stats";
        _os_log_impl(&dword_1830D4000, v29, v36, "%{public}s called with null return_stats, no backtrace", v49, 0xCu);
      }
      goto LABEL_65;
    }
    if (v37)
    {
      *(_DWORD *)uint64_t v49 = 136446466;
      *(void *)&void v49[4] = "nw_path_fillout_route_stats";
      *(_WORD *)&v49[12] = 2082;
      *(void *)&v49[14] = backtrace_string;
      _os_log_impl(&dword_1830D4000, v29, v36, "%{public}s called with null return_stats, dumping backtrace:%{public}s", v49, 0x16u);
    }
LABEL_53:

    free(backtrace_string);
    goto LABEL_66;
  }
  id v7 = nw_parameters_copy_context(v5[2]);
  int v8 = nw_path_shared_necp_fd(v7);

  if (v8 < 0)
  {
LABEL_68:
    BOOL v10 = 0;
    goto LABEL_69;
  }
  uint64_t v52 = 0;
  long long v50 = 0u;
  long long v51 = 0u;
  memset(v49, 0, sizeof(v49));
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  int v9 = necp_client_action();
  BOOL v10 = v9 == 0;
  if (!v9)
  {
    long long v14 = *(_OWORD *)&v49[16];
    *(_OWORD *)a2 = *(_OWORD *)v49;
    *(_OWORD *)(a2 + 16) = v14;
    uint64_t v15 = *(void *)((char *)&v51 + 4);
    *(_DWORD *)(a2 + 108) = HIDWORD(v51);
    *(void *)(a2 + 100) = v15;
    if (a3) {
      *a3 = v52;
    }
    goto LABEL_69;
  }
  int v11 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
  if (v11 == 45 || v11 == 2)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    char v13 = (id)gLogObj;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)tcp_info buf = 136446466;
      BOOL v44 = "nw_path_fillout_route_stats";
      __int16 v45 = 1024;
      int v46 = v11;
      _os_log_impl(&dword_1830D4000, v13, OS_LOG_TYPE_DEBUG, "%{public}s NECP_CLIENT_ACTION_COPY_ROUTE_STATISTICS %{darwin.errno}d", buf, 0x12u);
    }

    goto LABEL_69;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v16 = (id)gLogObj;
  *(_DWORD *)tcp_info buf = 136446466;
  BOOL v44 = "nw_path_fillout_route_stats";
  __int16 v45 = 1024;
  int v46 = v11;
  uint64_t v17 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v41 = 0;
  if (__nwlog_fault(v17, &type, &v41))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v19 = (id)gLogObj;
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)tcp_info buf = 136446466;
        BOOL v44 = "nw_path_fillout_route_stats";
        __int16 v45 = 1024;
        int v46 = v11;
        _os_log_impl(&dword_1830D4000, v19, v20, "%{public}s NECP_CLIENT_ACTION_COPY_ROUTE_STATISTICS %{darwin.errno}d", buf, 0x12u);
      }
    }
    else if (v41)
    {
      BOOL v21 = __nw_create_backtrace_string();
      if (v21)
      {
        os_log_type_t v22 = (char *)v21;
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        char v23 = (id)gLogObj;
        os_log_type_t v24 = type;
        if (os_log_type_enabled(v23, type))
        {
          *(_DWORD *)tcp_info buf = 136446722;
          BOOL v44 = "nw_path_fillout_route_stats";
          __int16 v45 = 1024;
          int v46 = v11;
          __int16 v47 = 2082;
          uint64_t v48 = v22;
          _os_log_impl(&dword_1830D4000, v23, v24, "%{public}s NECP_CLIENT_ACTION_COPY_ROUTE_STATISTICS %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x1Cu);
        }

        free(v22);
        if (v17) {
          goto LABEL_33;
        }
        goto LABEL_69;
      }
      uint64_t v19 = __nwlog_obj();
      os_log_type_t v26 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)tcp_info buf = 136446466;
        BOOL v44 = "nw_path_fillout_route_stats";
        __int16 v45 = 1024;
        int v46 = v11;
        _os_log_impl(&dword_1830D4000, v19, v26, "%{public}s NECP_CLIENT_ACTION_COPY_ROUTE_STATISTICS %{darwin.errno}d, no backtrace", buf, 0x12u);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v19 = (id)gLogObj;
      os_log_type_t v25 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)tcp_info buf = 136446466;
        BOOL v44 = "nw_path_fillout_route_stats";
        __int16 v45 = 1024;
        int v46 = v11;
        _os_log_impl(&dword_1830D4000, v19, v25, "%{public}s NECP_CLIENT_ACTION_COPY_ROUTE_STATISTICS %{darwin.errno}d, backtrace limit exceeded", buf, 0x12u);
      }
    }
  }
  if (v17) {
LABEL_33:
  }
    free(v17);
LABEL_69:

  return v10;
}

void sub_1832EEDE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sa_dst_compare_init_once(void)
{
  mach_timebase_info info = 0;
  uint64_t result = mach_timebase_info(&info);
  cache_timeout = 1000000000 * (unint64_t)info.denom / info.numer;
  return result;
}

void ___ZL34nw_socket_init_socket_event_sourceP9nw_socketj_block_invoke(uint64_t a1)
{
  uint64_t v112 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    int v2 = (_WORD *)(v1 + 301);
    if ((*(_WORD *)(v1 + 301) & 0x4000) != 0) {
      return;
    }
    unsigned int v4 = *(_DWORD *)(v1 + 180) & nw_queue_source_get_data(*(NSObject ***)(v1 + 96));
    if (!v4) {
      return;
    }
    if ((*v2 & 0x80) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      uint64_t v5 = gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)tcp_info buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_socket_handle_socket_event";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = v1 + 308;
        *(_WORD *)&unsigned char buf[22] = 1024;
        LODWORD(v109) = v4;
        _os_log_impl(&dword_1830D4000, v5, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s Event mask: %#x", buf, 0x1Cu);
      }
    }
    char v6 = v4 & 1;
    if ((v4 & 1) == 0)
    {
      int v9 = 0;
      int v8 = 60;
      if ((v4 & 8) == 0)
      {
LABEL_20:
        unsigned int v103 = v9;
        if ((v4 & 0x800) == 0) {
          goto LABEL_118;
        }
LABEL_42:
        if ((*v2 & 0x40) != 0)
        {
          if ((*v2 & 0x80) == 0)
          {
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
            }
            os_log_type_t v34 = gconnectionLogObj;
            if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)tcp_info buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_socket_handle_socket_event";
              *(_WORD *)&unsigned char buf[12] = 2082;
              *(void *)&buf[14] = v1 + 308;
              _os_log_impl(&dword_1830D4000, v34, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}s Socket received CONNECTED event, but ignoring because disconnect has been requested", buf, 0x16u);
            }
          }
LABEL_118:
          if ((v4 & 0x1000) != 0)
          {
            if ((*v2 & 0x80) == 0)
            {
              if (__nwlog_connection_log::onceToken != -1) {
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
              }
              __int16 v76 = gconnectionLogObj;
              if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)os_log_type_t type = 136446466;
                *(void *)&os_log_type_t type[4] = "nw_socket_handle_socket_event";
                *(_WORD *)&type[12] = 2082;
                *(void *)&type[14] = v1 + 308;
                _os_log_impl(&dword_1830D4000, v76, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}s Socket received DISCONNECTED event", type, 0x16u);
              }
            }
            if (_nw_signposts_once == -1)
            {
              if (!_nw_signposts_enabled) {
                goto LABEL_193;
              }
            }
            else
            {
              dispatch_once(&_nw_signposts_once, &__block_literal_global_22_65191);
              if (!_nw_signposts_enabled) {
                goto LABEL_193;
              }
            }
            if (kdebug_is_enabled()) {
              kdebug_trace();
            }
          }
          else if ((v6 & 1) == 0)
          {
            if ((v4 & 2) == 0) {
              goto LABEL_131;
            }
            if ((*v2 & 0x80) == 0)
            {
              if (__nwlog_connection_log::onceToken != -1) {
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
              }
              os_log_type_t v62 = gconnectionLogObj;
              if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)os_log_type_t type = 136446466;
                *(void *)&os_log_type_t type[4] = "nw_socket_handle_socket_event";
                *(_WORD *)&type[12] = 2082;
                *(void *)&type[14] = v1 + 308;
                _os_log_impl(&dword_1830D4000, v62, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}s Socket received READ_CLOSE event", type, 0x16u);
              }
            }
            if (_nw_signposts_once == -1)
            {
              if (_nw_signposts_enabled) {
                goto LABEL_128;
              }
            }
            else
            {
              dispatch_once(&_nw_signposts_once, &__block_literal_global_22_65191);
              if (_nw_signposts_enabled)
              {
LABEL_128:
                if (kdebug_is_enabled()) {
                  kdebug_trace();
                }
              }
            }
            nw_socket_input_finished((nw_protocol *)(v1 - 96), v3);
LABEL_131:
            if ((v4 & 4) == 0) {
              goto LABEL_141;
            }
            if ((*v2 & 0x80) == 0)
            {
              if (__nwlog_connection_log::onceToken != -1) {
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
              }
              uint64_t v63 = gconnectionLogObj;
              if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)os_log_type_t type = 136446466;
                *(void *)&os_log_type_t type[4] = "nw_socket_handle_socket_event";
                *(_WORD *)&type[12] = 2082;
                *(void *)&type[14] = v1 + 308;
                _os_log_impl(&dword_1830D4000, v63, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}s Socket received WRITE_CLOSE event", type, 0x16u);
              }
            }
            if (_nw_signposts_once == -1)
            {
              if (!_nw_signposts_enabled) {
                goto LABEL_141;
              }
            }
            else
            {
              dispatch_once(&_nw_signposts_once, &__block_literal_global_22_65191);
              if (!_nw_signposts_enabled) {
                goto LABEL_141;
              }
            }
            if (kdebug_is_enabled()) {
              kdebug_trace();
            }
LABEL_141:
            if ((~v4 & 6) != 0)
            {
              if ((v4 & 0x100) == 0) {
                goto LABEL_156;
              }
              if ((*v2 & 0x80) == 0)
              {
                if (__nwlog_connection_log::onceToken != -1) {
                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
                }
                int v64 = gconnectionLogObj;
                if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)os_log_type_t type = 136446466;
                  *(void *)&os_log_type_t type[4] = "nw_socket_handle_socket_event";
                  *(_WORD *)&type[12] = 2082;
                  *(void *)&type[14] = v1 + 308;
                  _os_log_impl(&dword_1830D4000, v64, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s Socket received KEEPALIVE event", type, 0x16u);
                }
              }
              if (_nw_signposts_once == -1)
              {
                if (_nw_signposts_enabled) {
                  goto LABEL_150;
                }
              }
              else
              {
                dispatch_once(&_nw_signposts_once, &__block_literal_global_22_65191);
                if (_nw_signposts_enabled)
                {
LABEL_150:
                  if (kdebug_is_enabled()) {
                    kdebug_trace();
                  }
                }
              }
              uint64_t v65 = *(void *)(v1 + 48);
              if (v65)
              {
                uint64_t v66 = *(void *)(v65 + 24);
                if (v66)
                {
                  int v67 = *(void (**)(uint64_t, uint64_t))(v66 + 160);
                  if (v67) {
                    v67(v65, v1 - 96);
                  }
                }
              }
LABEL_156:
              if ((v4 & 0x400) == 0) {
                goto LABEL_170;
              }
              if ((*v2 & 0x80) == 0)
              {
                if (__nwlog_connection_log::onceToken != -1) {
                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
                }
                int v68 = gconnectionLogObj;
                if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)os_log_type_t type = 136446466;
                  *(void *)&os_log_type_t type[4] = "nw_socket_handle_socket_event";
                  *(_WORD *)&type[12] = 2082;
                  *(void *)&type[14] = v1 + 308;
                  _os_log_impl(&dword_1830D4000, v68, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}s Socket received ADAPTIVE_READ_TIMEOUT event", type, 0x16u);
                }
              }
              if (_nw_signposts_once == -1)
              {
                if (_nw_signposts_enabled) {
                  goto LABEL_164;
                }
              }
              else
              {
                dispatch_once(&_nw_signposts_once, &__block_literal_global_22_65191);
                if (_nw_signposts_enabled)
                {
LABEL_164:
                  if (kdebug_is_enabled()) {
                    kdebug_trace();
                  }
                }
              }
              uint64_t v69 = *(void *)(v1 + 48);
              if (v69)
              {
                uint64_t v70 = *(void *)(v69 + 24);
                if (v70)
                {
                  char v71 = *(void (**)(uint64_t, uint64_t))(v70 + 160);
                  if (v71) {
                    v71(v69, v1 - 96);
                  }
                }
              }
LABEL_170:
              if ((v4 & 0x200) == 0) {
                return;
              }
              if ((*v2 & 0x80) == 0)
              {
                if (__nwlog_connection_log::onceToken != -1) {
                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
                }
                os_log_type_t v72 = gconnectionLogObj;
                if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)os_log_type_t type = 136446466;
                  *(void *)&os_log_type_t type[4] = "nw_socket_handle_socket_event";
                  *(_WORD *)&type[12] = 2082;
                  *(void *)&type[14] = v1 + 308;
                  _os_log_impl(&dword_1830D4000, v72, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}s Socket received ADAPTIVE_WRITE_TIMEOUT event", type, 0x16u);
                }
              }
              if (_nw_signposts_once == -1)
              {
                if (_nw_signposts_enabled) {
                  goto LABEL_178;
                }
              }
              else
              {
                dispatch_once(&_nw_signposts_once, &__block_literal_global_22_65191);
                if (_nw_signposts_enabled)
                {
LABEL_178:
                  if (kdebug_is_enabled()) {
                    kdebug_trace();
                  }
                }
              }
              uint64_t v73 = *(void *)(v1 + 48);
              if (v73)
              {
                uint64_t v74 = *(void *)(v73 + 24);
                if (v74)
                {
                  uint64_t v75 = *(void (**)(uint64_t, uint64_t))(v74 + 160);
                  if (v75) {
                    v75(v73, v1 - 96);
                  }
                }
              }
              return;
            }
            goto LABEL_194;
          }
LABEL_193:
          if ((~v4 & 6) != 0) {
            goto LABEL_198;
          }
LABEL_194:
          if (_nw_signposts_once == -1)
          {
            if (!_nw_signposts_enabled) {
              goto LABEL_198;
            }
          }
          else
          {
            dispatch_once(&_nw_signposts_once, &__block_literal_global_22_65191);
            if (!_nw_signposts_enabled) {
              goto LABEL_198;
            }
          }
          if (kdebug_is_enabled()) {
            kdebug_trace();
          }
LABEL_198:
          uint64_t v77 = *(void *)(v1 + 96);
          if (v77)
          {
            nw_queue_cancel_source(v77);
            *(void *)(v1 + 96) = 0;
          }
          socklen_t v106 = 4;
          *(_DWORD *)id v107 = -1;
          if (!getsockopt(*(_DWORD *)(v1 + 172), 0xFFFF, 4103, v107, &v106))
          {
            int v85 = *(_DWORD *)v107;
            if (*(_DWORD *)v107)
            {
              if (__nwlog_connection_log::onceToken != -1) {
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
              }
              uint64_t v86 = gconnectionLogObj;
              if (!os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR)) {
                goto LABEL_232;
              }
              *(_DWORD *)os_log_type_t type = 136446722;
              *(void *)&os_log_type_t type[4] = "nw_socket_handle_socket_event";
              *(_WORD *)&type[12] = 2080;
              *(void *)&type[14] = v1 + 308;
              *(_WORD *)&type[22] = 1024;
              *(_DWORD *)&type[24] = v85;
              uint64_t v87 = "%{public}s %s Socket SO_ERROR %{darwin.errno}d";
              id v88 = v86;
              os_log_type_t v89 = OS_LOG_TYPE_ERROR;
              uint32_t v90 = 28;
            }
            else
            {
              if ((*v2 & 0x80) != 0) {
                goto LABEL_232;
              }
              if (__nwlog_connection_log::onceToken != -1) {
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
              }
              uint64_t v93 = gconnectionLogObj;
              if (!os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEFAULT)) {
                goto LABEL_232;
              }
              *(_DWORD *)os_log_type_t type = 136446466;
              *(void *)&os_log_type_t type[4] = "nw_socket_handle_socket_event";
              *(_WORD *)&type[12] = 2082;
              *(void *)&type[14] = v1 + 308;
              uint64_t v87 = "%{public}s %{public}s Socket SO_ERROR: 0";
              id v88 = v93;
              os_log_type_t v89 = OS_LOG_TYPE_DEFAULT;
              uint32_t v90 = 22;
            }
            _os_log_impl(&dword_1830D4000, v88, v89, v87, type, v90);
LABEL_232:
            uint64_t v94 = *(unsigned int *)v107;
            if (*(_DWORD *)v107 || (uint64_t v94 = v103) != 0) {
              nw_socket_internal_error(v1, v94);
            }
            nw_socket_internal_disconnect(v1);
            return;
          }
          int v78 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
          *(_DWORD *)id v107 = v78;
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          os_log_type_t v79 = gconnectionLogObj;
          if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)os_log_type_t type = 136446722;
            *(void *)&os_log_type_t type[4] = "nw_socket_handle_socket_event";
            *(_WORD *)&type[12] = 2080;
            *(void *)&type[14] = v1 + 308;
            *(_WORD *)&type[22] = 1024;
            *(_DWORD *)&type[24] = v78;
            _os_log_impl(&dword_1830D4000, v79, OS_LOG_TYPE_ERROR, "%{public}s %s getsockopt SO_ERROR failed %{darwin.errno}d", type, 0x1Cu);
          }
          int v80 = *(_DWORD *)v107;
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          *(_DWORD *)os_log_type_t type = 136446466;
          *(void *)&os_log_type_t type[4] = "nw_socket_handle_socket_event";
          *(_WORD *)&type[12] = 1024;
          *(_DWORD *)&type[14] = v80;
          __int16 v81 = (char *)_os_log_send_and_compose_impl();
          os_log_type_t v105 = OS_LOG_TYPE_ERROR;
          char v104 = 0;
          if (__nwlog_fault(v81, &v105, &v104))
          {
            if (v105 == OS_LOG_TYPE_FAULT)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              __int16 v82 = gLogObj;
              os_log_type_t v83 = v105;
              if (!os_log_type_enabled((os_log_t)gLogObj, v105)) {
                goto LABEL_230;
              }
              *(_DWORD *)os_log_type_t type = 136446466;
              *(void *)&os_log_type_t type[4] = "nw_socket_handle_socket_event";
              *(_WORD *)&type[12] = 1024;
              *(_DWORD *)&type[14] = v80;
              os_log_type_t v84 = "%{public}s getsockopt SO_ERROR failed %{darwin.errno}d";
              goto LABEL_229;
            }
            if (!v104)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              __int16 v82 = gLogObj;
              os_log_type_t v83 = v105;
              if (!os_log_type_enabled((os_log_t)gLogObj, v105)) {
                goto LABEL_230;
              }
              *(_DWORD *)os_log_type_t type = 136446466;
              *(void *)&os_log_type_t type[4] = "nw_socket_handle_socket_event";
              *(_WORD *)&type[12] = 1024;
              *(_DWORD *)&type[14] = v80;
              os_log_type_t v84 = "%{public}s getsockopt SO_ERROR failed %{darwin.errno}d, backtrace limit exceeded";
              goto LABEL_229;
            }
            backtrace_string = (char *)__nw_create_backtrace_string();
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            __int16 v82 = gLogObj;
            os_log_type_t v83 = v105;
            BOOL v92 = os_log_type_enabled((os_log_t)gLogObj, v105);
            if (backtrace_string)
            {
              if (v92)
              {
                *(_DWORD *)os_log_type_t type = 136446722;
                *(void *)&os_log_type_t type[4] = "nw_socket_handle_socket_event";
                *(_WORD *)&type[12] = 1024;
                *(_DWORD *)&type[14] = v80;
                *(_WORD *)&type[18] = 2082;
                *(void *)&unsigned char type[20] = backtrace_string;
                _os_log_impl(&dword_1830D4000, v82, v83, "%{public}s getsockopt SO_ERROR failed %{darwin.errno}d, dumping backtrace:%{public}s", type, 0x1Cu);
              }
              free(backtrace_string);
              goto LABEL_230;
            }
            if (v92)
            {
              *(_DWORD *)os_log_type_t type = 136446466;
              *(void *)&os_log_type_t type[4] = "nw_socket_handle_socket_event";
              *(_WORD *)&type[12] = 1024;
              *(_DWORD *)&type[14] = v80;
              os_log_type_t v84 = "%{public}s getsockopt SO_ERROR failed %{darwin.errno}d, no backtrace";
LABEL_229:
              _os_log_impl(&dword_1830D4000, v82, v83, v84, type, 0x12u);
            }
          }
LABEL_230:
          if (v81) {
            free(v81);
          }
          goto LABEL_232;
        }
        if ((*v2 & 0x80) == 0)
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          uint64_t v19 = gconnectionLogObj;
          if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)tcp_info buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_socket_handle_socket_event";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = v1 + 308;
            _os_log_impl(&dword_1830D4000, v19, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}s Socket received CONNECTED event", buf, 0x16u);
          }
        }
        __int16 v20 = *(_WORD *)(v1 + 301);
        int v21 = v20 & 0x7FFF | (*(unsigned __int8 *)(v1 + 303) << 16);
        _WORD *v2 = *v2 & 0x7FFB | 4;
        *(unsigned char *)(v1 + 303) = BYTE2(v21);
        __int16 v102 = v20;
        if (_nw_signposts_once == -1)
        {
          if (!_nw_signposts_enabled) {
            goto LABEL_52;
          }
        }
        else
        {
          dispatch_once(&_nw_signposts_once, &__block_literal_global_22_65191);
          if (!_nw_signposts_enabled) {
            goto LABEL_52;
          }
        }
        if (kdebug_is_enabled()) {
          kdebug_trace();
        }
LABEL_52:
        if (*(_DWORD *)(v1 + 176) != 2 || (*v2 & 0x2000) == 0) {
          goto LABEL_96;
        }
        *(_DWORD *)os_log_type_t type = 0x4000;
        if (!setsockopt(*(_DWORD *)(v1 + 172), 6, 513, type, 4u))
        {
          if ((*v2 & 0x80) != 0) {
            goto LABEL_96;
          }
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          uint64_t v35 = gconnectionLogObj;
          if (!os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_96;
          }
          *(_DWORD *)tcp_info buf = 136446722;
          *(void *)&uint8_t buf[4] = "nw_socket_setup_notsent_lowat";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v1 + 308;
          *(_WORD *)&unsigned char buf[22] = 1024;
          LODWORD(v109) = *(_DWORD *)type;
          BOOL v28 = "%{public}s %{public}s Set TCP_NOTSENT_LOWAT(%u)";
          nw_endpoint_t v29 = v35;
          os_log_type_t v30 = OS_LOG_TYPE_DEBUG;
          uint32_t v31 = 28;
          goto LABEL_80;
        }
        int v22 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        char v23 = gconnectionLogObj;
        if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
        {
          int v24 = *(_DWORD *)(v1 + 172);
          *(_DWORD *)tcp_info buf = 136447234;
          *(void *)&uint8_t buf[4] = "nw_socket_setup_notsent_lowat";
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = v1 + 308;
          *(_WORD *)&unsigned char buf[22] = 1024;
          LODWORD(v109) = *(_DWORD *)type;
          WORD2(v109) = 1024;
          *(_DWORD *)((char *)&v109 + 6) = v24;
          WORD5(v109) = 1024;
          HIDWORD(v109) = v22;
          _os_log_impl(&dword_1830D4000, v23, OS_LOG_TYPE_ERROR, "%{public}s %s setsockopt TCP_NOTSENT_LOWAT(%u) failed on fd %d %{darwin.errno}d", buf, 0x28u);
        }
        os_log_type_t v25 = __nwlog_obj();
        os_log_type_t v26 = v25;
        if (v22 == 22)
        {
          if (!os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
            goto LABEL_96;
          }
          int v27 = *(_DWORD *)(v1 + 172);
          *(_DWORD *)tcp_info buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_socket_setup_notsent_lowat";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = *(_DWORD *)type;
          *(_WORD *)&unsigned char buf[18] = 1024;
          *(_DWORD *)&buf[20] = v27;
          LOWORD(v109) = 1024;
          *(_DWORD *)((char *)&v109 + 2) = 22;
          BOOL v28 = "%{public}s setsockopt TCP_NOTSENT_LOWAT(%u) failed on fd %d %{darwin.errno}d";
          nw_endpoint_t v29 = v26;
          os_log_type_t v30 = OS_LOG_TYPE_ERROR;
          uint32_t v31 = 30;
LABEL_80:
          _os_log_impl(&dword_1830D4000, v29, v30, v28, buf, v31);
LABEL_96:
          *(_DWORD *)(v1 + 180) &= ~0x800u;
          nw_socket_add_socket_events(v1, 1);
          nw_socket_fillout_socket_properties((nw_protocol *)(v1 - 96));
          nw_socket_internal_connect((void *)v1);
          uint64_t v49 = *(void *)(v1 + 48);
          if (v49)
          {
            uint64_t v50 = *(void *)(v49 + 24);
            if (v50)
            {
              long long v51 = *(uint64_t (**)(uint64_t))(v50 + 112);
              if (v51)
              {
                if (*(_UNKNOWN **)(v49 + 40) == &nw_protocol_ref_counted_handle)
                {
                  uint64_t v53 = *(void *)(v49 + 88);
                  if (v53) {
                    *(void *)(v49 + 88) = v53 + 1;
                  }
                  uint64_t v52 = (void *)v51(v49);
                  if (*(_UNKNOWN **)(v49 + 40) == &nw_protocol_ref_counted_handle)
                  {
                    uint64_t v95 = *(void *)(v49 + 88);
                    if (v95)
                    {
                      uint64_t v96 = v95 - 1;
                      *(void *)(v49 + 88) = v96;
                      if (!v96)
                      {
                        uint64_t v97 = *(void (***)(void))(v49 + 64);
                        if (v97)
                        {
                          *(void *)(v49 + 64) = 0;
                          aBlock = v97;
                          v97[2](v97);
                          _Block_release(aBlock);
                        }
                        if (*(unsigned char *)(v49 + 72))
                        {
                          char v98 = *(const void **)(v49 + 64);
                          if (v98) {
                            _Block_release(v98);
                          }
                        }
                        free((void *)v49);
                      }
                    }
                  }
                }
                else
                {
                  uint64_t v52 = (void *)v51(*(void *)(v1 + 48));
                }
                if (v52)
                {
                  os_log_type_t v54 = v52;
                  int v55 = v54[19];

                  nw_protocol_options_t v56 = nw_protocol_stack_copy_transport_protocol(v55);
                  if (v56)
                  {
                    nw_protocol_options_t v57 = v56;
                    if (nw_protocol_options_is_tcp(v56))
                    {
                      maximum_segment_size_t size = nw_tcp_options_get_maximum_segment_size(v57);
                      if (maximum_segment_size) {
                        nw_socket_set_maximum_segment_size(v1, maximum_segment_size);
                      }
                    }
                    os_release(v57);
                  }
                  if (v55) {
                    os_release(v55);
                  }
                }
              }
            }
          }
          if (v102 < 0)
          {
            uint64_t v59 = 0;
            *(void *)os_log_type_t type = 0;
            *(void *)&os_log_type_t type[8] = type;
            *(void *)&os_log_type_t type[16] = 0x2000000000;
            if (*(_UNKNOWN **)(v1 - 56) == &nw_protocol_ref_counted_handle)
            {
              uint64_t v60 = *(void *)(v1 - 8);
              if (v60) {
                *(void *)(v1 - 8) = v60 + 1;
              }
              uint64_t v59 = v1 - 96;
            }
            *(void *)&type[24] = v59;
            int v61 = *(void **)(v1 + 128);
            *(void *)tcp_info buf = MEMORY[0x1E4F143A8];
            *(void *)&sockaddr buf[8] = 0x40000000;
            *(void *)&buf[16] = ___ZL29nw_socket_handle_socket_eventP9nw_socket_block_invoke;
            *(void *)&long long v109 = &unk_1E5247EE0;
            *((void *)&v109 + 1) = type;
            uint64_t v110 = v1;
            nw_queue_context_async(v61, buf);
            _Block_object_dispose(type, 8);
          }
          goto LABEL_118;
        }
        int v36 = *(_DWORD *)(v1 + 172);
        *(_DWORD *)tcp_info buf = 136446978;
        *(void *)&uint8_t buf[4] = "nw_socket_setup_notsent_lowat";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = *(_DWORD *)type;
        *(_WORD *)&unsigned char buf[18] = 1024;
        *(_DWORD *)&buf[20] = v36;
        LOWORD(v109) = 1024;
        *(_DWORD *)((char *)&v109 + 2) = v22;
        v107[0] = OS_LOG_TYPE_ERROR;
        LOBYTE(v106) = 0;
        BOOL v37 = (char *)_os_log_send_and_compose_impl();
        if (__nwlog_fault(v37, v107, &v106))
        {
          if (v107[0] == OS_LOG_TYPE_FAULT)
          {
            os_log_type_t v38 = __nwlog_obj();
            os_log_type_t v39 = v107[0];
            if (!os_log_type_enabled(v38, v107[0])) {
              goto LABEL_94;
            }
            int v40 = *(_DWORD *)(v1 + 172);
            *(_DWORD *)tcp_info buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_socket_setup_notsent_lowat";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = *(_DWORD *)type;
            *(_WORD *)&unsigned char buf[18] = 1024;
            *(_DWORD *)&buf[20] = v40;
            LOWORD(v109) = 1024;
            *(_DWORD *)((char *)&v109 + 2) = v22;
            char v41 = "%{public}s setsockopt TCP_NOTSENT_LOWAT(%u) failed on fd %d %{darwin.errno}d";
LABEL_92:
            __int16 v47 = v38;
            os_log_type_t v48 = v39;
LABEL_93:
            _os_log_impl(&dword_1830D4000, v47, v48, v41, buf, 0x1Eu);
            goto LABEL_94;
          }
          if (!(_BYTE)v106)
          {
            os_log_type_t v38 = __nwlog_obj();
            os_log_type_t v39 = v107[0];
            if (!os_log_type_enabled(v38, v107[0])) {
              goto LABEL_94;
            }
            int v46 = *(_DWORD *)(v1 + 172);
            *(_DWORD *)tcp_info buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_socket_setup_notsent_lowat";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = *(_DWORD *)type;
            *(_WORD *)&unsigned char buf[18] = 1024;
            *(_DWORD *)&buf[20] = v46;
            LOWORD(v109) = 1024;
            *(_DWORD *)((char *)&v109 + 2) = v22;
            char v41 = "%{public}s setsockopt TCP_NOTSENT_LOWAT(%u) failed on fd %d %{darwin.errno}d, backtrace limit exceeded";
            goto LABEL_92;
          }
          uint64_t v42 = (char *)__nw_create_backtrace_string();
          unsigned int v43 = __nwlog_obj();
          os_log_type_t v100 = v107[0];
          BOOL v44 = os_log_type_enabled(v43, v107[0]);
          if (v42)
          {
            if (v44)
            {
              int v45 = *(_DWORD *)(v1 + 172);
              *(_DWORD *)tcp_info buf = 136447234;
              *(void *)&uint8_t buf[4] = "nw_socket_setup_notsent_lowat";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = *(_DWORD *)type;
              *(_WORD *)&unsigned char buf[18] = 1024;
              *(_DWORD *)&buf[20] = v45;
              LOWORD(v109) = 1024;
              *(_DWORD *)((char *)&v109 + 2) = v22;
              WORD3(v109) = 2082;
              *((void *)&v109 + 1) = v42;
              _os_log_impl(&dword_1830D4000, v43, v100, "%{public}s setsockopt TCP_NOTSENT_LOWAT(%u) failed on fd %d %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x28u);
            }
            free(v42);
            goto LABEL_94;
          }
          if (v44)
          {
            int v99 = *(_DWORD *)(v1 + 172);
            *(_DWORD *)tcp_info buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_socket_setup_notsent_lowat";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = *(_DWORD *)type;
            *(_WORD *)&unsigned char buf[18] = 1024;
            *(_DWORD *)&buf[20] = v99;
            LOWORD(v109) = 1024;
            *(_DWORD *)((char *)&v109 + 2) = v22;
            char v41 = "%{public}s setsockopt TCP_NOTSENT_LOWAT(%u) failed on fd %d %{darwin.errno}d, no backtrace";
            __int16 v47 = v43;
            os_log_type_t v48 = v100;
            goto LABEL_93;
          }
        }
LABEL_94:
        if (v37) {
          free(v37);
        }
        goto LABEL_96;
      }
LABEL_32:
      if ((*v2 & 0x80) == 0)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        os_log_type_t v18 = gconnectionLogObj;
        if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)tcp_info buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_socket_handle_socket_event";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v1 + 308;
          _os_log_impl(&dword_1830D4000, v18, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}s Socket received TIMEOUT event", buf, 0x16u);
        }
      }
      if (_nw_signposts_once == -1)
      {
        if (!_nw_signposts_enabled) {
          goto LABEL_41;
        }
      }
      else
      {
        dispatch_once(&_nw_signposts_once, &__block_literal_global_22_65191);
        if (!_nw_signposts_enabled) {
          goto LABEL_41;
        }
      }
      if (kdebug_is_enabled()) {
        kdebug_trace();
      }
LABEL_41:
      char v6 = 1;
      unsigned int v103 = v8;
      if ((v4 & 0x800) == 0) {
        goto LABEL_118;
      }
      goto LABEL_42;
    }
    if ((*v2 & 0x80) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      id v7 = gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)tcp_info buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_socket_handle_socket_event";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = v1 + 308;
        _os_log_impl(&dword_1830D4000, v7, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}s Socket received CONNRESET event", buf, 0x16u);
      }
    }
    if (_nw_signposts_once == -1)
    {
      if (!_nw_signposts_enabled) {
        goto LABEL_19;
      }
    }
    else
    {
      dispatch_once(&_nw_signposts_once, &__block_literal_global_22_65191);
      if (!_nw_signposts_enabled) {
        goto LABEL_19;
      }
    }
    if (kdebug_is_enabled()) {
      kdebug_trace();
    }
LABEL_19:
    int v8 = 54;
    int v9 = 54;
    if ((v4 & 8) == 0) {
      goto LABEL_20;
    }
    goto LABEL_32;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)tcp_info buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_socket_handle_socket_event";
  BOOL v10 = (char *)_os_log_send_and_compose_impl();
  type[0] = 16;
  v107[0] = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v10, type, v107))
  {
    if (type[0] == 17)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v11 = gLogObj;
      os_log_type_t v12 = type[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)type[0])) {
        goto LABEL_66;
      }
      *(_DWORD *)tcp_info buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_socket_handle_socket_event";
      char v13 = "%{public}s called with null socket_handler";
LABEL_64:
      os_log_type_t v32 = v11;
      os_log_type_t v33 = v12;
LABEL_65:
      _os_log_impl(&dword_1830D4000, v32, v33, v13, buf, 0xCu);
      goto LABEL_66;
    }
    if (v107[0] == OS_LOG_TYPE_DEFAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v11 = gLogObj;
      os_log_type_t v12 = type[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)type[0])) {
        goto LABEL_66;
      }
      *(_DWORD *)tcp_info buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_socket_handle_socket_event";
      char v13 = "%{public}s called with null socket_handler, backtrace limit exceeded";
      goto LABEL_64;
    }
    long long v14 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v15 = gLogObj;
    os_log_type_t v16 = type[0];
    BOOL v17 = os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)type[0]);
    if (v14)
    {
      if (v17)
      {
        *(_DWORD *)tcp_info buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_socket_handle_socket_event";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = v14;
        _os_log_impl(&dword_1830D4000, v15, v16, "%{public}s called with null socket_handler, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v14);
      goto LABEL_66;
    }
    if (v17)
    {
      *(_DWORD *)tcp_info buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_socket_handle_socket_event";
      char v13 = "%{public}s called with null socket_handler, no backtrace";
      os_log_type_t v32 = v15;
      os_log_type_t v33 = v16;
      goto LABEL_65;
    }
  }
LABEL_66:
  if (v10) {
    free(v10);
  }
}

NSObject *nw_queue_source_get_data(NSObject **a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t result = *a1;
    if (result) {
      return dispatch_source_get_data(result);
    }
    return result;
  }
  int v2 = __nwlog_obj();
  *(_DWORD *)tcp_info buf = 136446210;
  os_log_type_t v12 = "nw_queue_source_get_data";
  uint64_t v3 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v9 = 0;
  if (__nwlog_fault(v3, &type, &v9))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      unsigned int v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v12 = "nw_queue_source_get_data";
        char v6 = "%{public}s called with null source";
LABEL_18:
        _os_log_impl(&dword_1830D4000, v4, v5, v6, buf, 0xCu);
      }
    }
    else
    {
      if (v9)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        unsigned int v4 = __nwlog_obj();
        os_log_type_t v5 = type;
        BOOL v8 = os_log_type_enabled(v4, type);
        if (backtrace_string)
        {
          if (v8)
          {
            *(_DWORD *)tcp_info buf = 136446466;
            os_log_type_t v12 = "nw_queue_source_get_data";
            __int16 v13 = 2082;
            long long v14 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v4, v5, "%{public}s called with null source, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_20;
        }
        if (!v8) {
          goto LABEL_19;
        }
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v12 = "nw_queue_source_get_data";
        char v6 = "%{public}s called with null source, no backtrace";
        goto LABEL_18;
      }
      unsigned int v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v12 = "nw_queue_source_get_data";
        char v6 = "%{public}s called with null source, backtrace limit exceeded";
        goto LABEL_18;
      }
    }
LABEL_19:
  }
LABEL_20:
  if (v3) {
    free(v3);
  }
  return 0;
}

void nw_flow_input_finished(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  handle = (nw_flow_protocol *)a1->handle;
  uint64_t v3 = handle->handler;
  unsigned int v4 = v3;
  if (v3)
  {
    os_log_type_t v5 = v3;
    uint64_t mode = v5->mode;

    if (mode == 2)
    {
      id v7 = (NWConcrete_nw_endpoint_flow *)nw_endpoint_handler_copy_flow(v5);
      *((_WORD *)handle + 166) |= 0x10u;
      nw_flow_service_reads(v5, v7, handle, 0);
      if (&v7->shared_protocol == handle)
      {
        if (v7->client_queue)
        {
          id read_close_handler = v7->read_close_handler;
          if (read_close_handler)
          {
            uint64_t v11 = _Block_copy(read_close_handler);
            client_queue = v7->client_queue;
            block[0] = MEMORY[0x1E4F143A8];
            block[1] = 3221225472;
            block[2] = ___ZL22nw_flow_input_finishedP11nw_protocolS0__block_invoke;
            block[3] = &unk_1E524AFA8;
            id v23 = v11;
            id v13 = v11;
            dispatch_async(client_queue, block);
          }
        }
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v8 = (id)gLogObj;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        if (mode > 5) {
          char v9 = "unknown-mode";
        }
        else {
          char v9 = off_1E523FB08[mode];
        }
        *(_DWORD *)tcp_info buf = 136446722;
        int v27 = "nw_flow_input_finished";
        __int16 v28 = 2082;
        nw_endpoint_t v29 = (void *)v9;
        __int16 v30 = 2082;
        uint32_t v31 = "flow";
        _os_log_impl(&dword_1830D4000, v8, OS_LOG_TYPE_DEFAULT, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
      }
    }
    goto LABEL_14;
  }
  long long v14 = __nwlog_obj();
  *(_DWORD *)tcp_info buf = 136446210;
  int v27 = "nw_flow_input_finished";
  uint64_t v15 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v24 = 0;
  if (__nwlog_fault(v15, &type, &v24))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v16 = __nwlog_obj();
      os_log_type_t v17 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        int v27 = "nw_flow_input_finished";
        _os_log_impl(&dword_1830D4000, v16, v17, "%{public}s called with null handler", buf, 0xCu);
      }
    }
    else if (v24)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v16 = __nwlog_obj();
      os_log_type_t v19 = type;
      BOOL v20 = os_log_type_enabled(v16, type);
      if (backtrace_string)
      {
        if (v20)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          int v27 = "nw_flow_input_finished";
          __int16 v28 = 2082;
          nw_endpoint_t v29 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v16, v19, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_31;
      }
      if (v20)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        int v27 = "nw_flow_input_finished";
        _os_log_impl(&dword_1830D4000, v16, v19, "%{public}s called with null handler, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v16 = __nwlog_obj();
      os_log_type_t v21 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        int v27 = "nw_flow_input_finished";
        _os_log_impl(&dword_1830D4000, v16, v21, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_31:
  if (v15) {
    free(v15);
  }
LABEL_14:
}

void sub_1832F0EC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_socket_internal_connect(void *a1)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = a1[4];
  uint64_t v3 = mach_continuous_time();
  if (v3 <= 1) {
    uint64_t v4 = 1;
  }
  else {
    uint64_t v4 = v3;
  }
  unint64_t v5 = nw_delta_nanos(v2, v4);
  uint64_t v6 = (v5 / 0xF4240);
  if (v5 > 0xF423FFFFFFFFFLL) {
    uint64_t v6 = 0xFFFFFFFFLL;
  }
  a1[5] = v6;
  uint64_t v7 = a1[6];
  if (v7)
  {
    uint64_t v8 = *(void *)(v7 + 24);
    if (v8)
    {
      char v9 = *(void (**)(uint64_t, void *))(v8 + 40);
      if (v9)
      {
        uint64_t v10 = a1[6];
        v9(v10, a1 - 12);
        return;
      }
    }
    __nwlog_obj();
    uint64_t v11 = *(const char **)(v7 + 16);
    if (!v11) {
      uint64_t v11 = "invalid";
    }
  }
  else
  {
    __nwlog_obj();
    uint64_t v11 = "invalid";
  }
  *(_DWORD *)tcp_info buf = 136446466;
  os_log_type_t v25 = "nw_socket_internal_connect";
  __int16 v26 = 2082;
  int v27 = v11;
  os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v22 = 0;
  if (__nwlog_fault(v12, &type, &v22))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (!os_log_type_enabled(v13, type)) {
        goto LABEL_42;
      }
      uint64_t v15 = "invalid";
      if (v7 && *(void *)(v7 + 16)) {
        uint64_t v15 = *(const char **)(v7 + 16);
      }
      *(_DWORD *)tcp_info buf = 136446466;
      os_log_type_t v25 = "nw_socket_internal_connect";
      __int16 v26 = 2082;
      int v27 = v15;
      os_log_type_t v16 = "%{public}s protocol %{public}s has invalid connected callback";
      goto LABEL_41;
    }
    if (!v22)
    {
      id v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (!os_log_type_enabled(v13, type)) {
        goto LABEL_42;
      }
      BOOL v20 = "invalid";
      if (v7 && *(void *)(v7 + 16)) {
        BOOL v20 = *(const char **)(v7 + 16);
      }
      *(_DWORD *)tcp_info buf = 136446466;
      os_log_type_t v25 = "nw_socket_internal_connect";
      __int16 v26 = 2082;
      int v27 = v20;
      os_log_type_t v16 = "%{public}s protocol %{public}s has invalid connected callback, backtrace limit exceeded";
      goto LABEL_41;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    id v13 = __nwlog_obj();
    os_log_type_t v14 = type;
    BOOL v18 = os_log_type_enabled(v13, type);
    if (backtrace_string)
    {
      if (v18)
      {
        os_log_type_t v19 = "invalid";
        if (v7 && *(void *)(v7 + 16)) {
          os_log_type_t v19 = *(const char **)(v7 + 16);
        }
        *(_DWORD *)tcp_info buf = 136446722;
        os_log_type_t v25 = "nw_socket_internal_connect";
        __int16 v26 = 2082;
        int v27 = v19;
        __int16 v28 = 2082;
        nw_endpoint_t v29 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s protocol %{public}s has invalid connected callback, dumping backtrace:%{public}s", buf, 0x20u);
      }
      free(backtrace_string);
      goto LABEL_42;
    }
    if (v18)
    {
      os_log_type_t v21 = "invalid";
      if (v7 && *(void *)(v7 + 16)) {
        os_log_type_t v21 = *(const char **)(v7 + 16);
      }
      *(_DWORD *)tcp_info buf = 136446466;
      os_log_type_t v25 = "nw_socket_internal_connect";
      __int16 v26 = 2082;
      int v27 = v21;
      os_log_type_t v16 = "%{public}s protocol %{public}s has invalid connected callback, no backtrace";
LABEL_41:
      _os_log_impl(&dword_1830D4000, v13, v14, v16, buf, 0x16u);
    }
  }
LABEL_42:
  if (v12) {
    free(v12);
  }
}

void nw_socket_input_finished(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    os_log_type_t v19 = "nw_socket_input_finished";
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v16 = 0;
    if (!__nwlog_fault(v8, &type, &v16)) {
      goto LABEL_44;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (!os_log_type_enabled(v9, type)) {
        goto LABEL_44;
      }
      *(_DWORD *)tcp_info buf = 136446210;
      os_log_type_t v19 = "nw_socket_input_finished";
      uint64_t v11 = "%{public}s called with null protocol";
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      char v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          os_log_type_t v19 = "nw_socket_input_finished";
          __int16 v20 = 2082;
          os_log_type_t v21 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_44:
        if (!v8) {
          return;
        }
LABEL_45:
        free(v8);
        return;
      }
      if (!v13) {
        goto LABEL_44;
      }
      *(_DWORD *)tcp_info buf = 136446210;
      os_log_type_t v19 = "nw_socket_input_finished";
      uint64_t v11 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      char v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (!os_log_type_enabled(v9, type)) {
        goto LABEL_44;
      }
      *(_DWORD *)tcp_info buf = 136446210;
      os_log_type_t v19 = "nw_socket_input_finished";
      uint64_t v11 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
LABEL_43:
    _os_log_impl(&dword_1830D4000, v9, v10, v11, buf, 0xCu);
    goto LABEL_44;
  }
  if (a1->handle == &nw_protocol_ref_counted_handle)
  {
    identifier = a1[2].identifier;
    int v4 = *(unsigned __int16 *)&a1[6].flow_id[13] | (a1[6].flow_id[15] << 16);
    if (identifier)
    {
      if ((*(_WORD *)&a1[6].flow_id[13] & 0x10) == 0)
      {
        a1[6].flow_id[15] = BYTE2(v4);
        *(_WORD *)&a1[6].flow_id[13] = v4 | 0x10;
        uint64_t v5 = *(void *)&identifier->name[24];
        if (v5)
        {
          uint64_t v6 = *(void (**)(void))(v5 + 184);
          if (v6)
          {
            v6();
          }
        }
      }
    }
    else if ((*(_WORD *)&a1[6].flow_id[13] & 0x80) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      uint64_t v7 = gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)tcp_info buf = 136446466;
        os_log_type_t v19 = "nw_socket_input_finished";
        __int16 v20 = 2082;
        os_log_type_t v21 = (char *)&a1[6].identifier + 4;
        _os_log_impl(&dword_1830D4000, v7, OS_LOG_TYPE_ERROR, "%{public}s %{public}s No input handler", buf, 0x16u);
      }
    }
    return;
  }
  __nwlog_obj();
  *(_DWORD *)tcp_info buf = 136446210;
  os_log_type_t v19 = "nw_socket_input_finished";
  uint64_t v8 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (!__nwlog_fault(v8, &type, &v16)) {
    goto LABEL_44;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    char v9 = __nwlog_obj();
    os_log_type_t v10 = type;
    if (!os_log_type_enabled(v9, type)) {
      goto LABEL_44;
    }
    *(_DWORD *)tcp_info buf = 136446210;
    os_log_type_t v19 = "nw_socket_input_finished";
    uint64_t v11 = "%{public}s called with null socket_handler";
    goto LABEL_43;
  }
  if (!v16)
  {
    char v9 = __nwlog_obj();
    os_log_type_t v10 = type;
    if (!os_log_type_enabled(v9, type)) {
      goto LABEL_44;
    }
    *(_DWORD *)tcp_info buf = 136446210;
    os_log_type_t v19 = "nw_socket_input_finished";
    uint64_t v11 = "%{public}s called with null socket_handler, backtrace limit exceeded";
    goto LABEL_43;
  }
  os_log_type_t v14 = (char *)__nw_create_backtrace_string();
  char v9 = __nwlog_obj();
  os_log_type_t v10 = type;
  BOOL v15 = os_log_type_enabled(v9, type);
  if (!v14)
  {
    if (!v15) {
      goto LABEL_44;
    }
    *(_DWORD *)tcp_info buf = 136446210;
    os_log_type_t v19 = "nw_socket_input_finished";
    uint64_t v11 = "%{public}s called with null socket_handler, no backtrace";
    goto LABEL_43;
  }
  if (v15)
  {
    *(_DWORD *)tcp_info buf = 136446466;
    os_log_type_t v19 = "nw_socket_input_finished";
    __int16 v20 = 2082;
    os_log_type_t v21 = v14;
    _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null socket_handler, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v14);
  if (v8) {
    goto LABEL_45;
  }
}

void nw_protocol_default_input_finished(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    char v16 = "nw_protocol_default_input_finished";
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v13 = 0;
    if (!__nwlog_fault(v5, &type, &v13)) {
      goto LABEL_36;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (!os_log_type_enabled(v6, type)) {
        goto LABEL_36;
      }
      *(_DWORD *)tcp_info buf = 136446210;
      char v16 = "nw_protocol_default_input_finished";
      uint64_t v8 = "%{public}s called with null protocol";
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          char v16 = "nw_protocol_default_input_finished";
          __int16 v17 = 2082;
          BOOL v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_36:
        if (!v5) {
          return;
        }
        goto LABEL_37;
      }
      if (!v10) {
        goto LABEL_36;
      }
      *(_DWORD *)tcp_info buf = 136446210;
      char v16 = "nw_protocol_default_input_finished";
      uint64_t v8 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      uint64_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (!os_log_type_enabled(v6, type)) {
        goto LABEL_36;
      }
      *(_DWORD *)tcp_info buf = 136446210;
      char v16 = "nw_protocol_default_input_finished";
      uint64_t v8 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
LABEL_35:
    _os_log_impl(&dword_1830D4000, v6, v7, v8, buf, 0xCu);
    goto LABEL_36;
  }
  default_input_handler = a1->default_input_handler;
  if (default_input_handler)
  {
    callbacks = default_input_handler->callbacks;
    if (callbacks)
    {
      input_finished = (void (*)(void))callbacks->input_finished;
      if (input_finished)
      {
        input_finished();
      }
    }
    return;
  }
  __nwlog_obj();
  *(_DWORD *)tcp_info buf = 136446210;
  char v16 = "nw_protocol_default_input_finished";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (!__nwlog_fault(v5, &type, &v13)) {
    goto LABEL_36;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    uint64_t v6 = __nwlog_obj();
    os_log_type_t v7 = type;
    if (!os_log_type_enabled(v6, type)) {
      goto LABEL_36;
    }
    *(_DWORD *)tcp_info buf = 136446210;
    char v16 = "nw_protocol_default_input_finished";
    uint64_t v8 = "%{public}s called with null protocol->default_input_handler";
    goto LABEL_35;
  }
  if (!v13)
  {
    uint64_t v6 = __nwlog_obj();
    os_log_type_t v7 = type;
    if (!os_log_type_enabled(v6, type)) {
      goto LABEL_36;
    }
    *(_DWORD *)tcp_info buf = 136446210;
    char v16 = "nw_protocol_default_input_finished";
    uint64_t v8 = "%{public}s called with null protocol->default_input_handler, backtrace limit exceeded";
    goto LABEL_35;
  }
  uint64_t v11 = (char *)__nw_create_backtrace_string();
  uint64_t v6 = __nwlog_obj();
  os_log_type_t v7 = type;
  BOOL v12 = os_log_type_enabled(v6, type);
  if (!v11)
  {
    if (!v12) {
      goto LABEL_36;
    }
    *(_DWORD *)tcp_info buf = 136446210;
    char v16 = "nw_protocol_default_input_finished";
    uint64_t v8 = "%{public}s called with null protocol->default_input_handler, no backtrace";
    goto LABEL_35;
  }
  if (v12)
  {
    *(_DWORD *)tcp_info buf = 136446466;
    char v16 = "nw_protocol_default_input_finished";
    __int16 v17 = 2082;
    BOOL v18 = v11;
    _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null protocol->default_input_handler, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v11);
  if (v5) {
LABEL_37:
  }
    free(v5);
}

void nw_flow_passthrough_input_finished(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    default_input_handler = a1->default_input_handler;
    if (default_input_handler)
    {
      callbacks = default_input_handler->callbacks;
      if (callbacks)
      {
        input_finished = (void (*)(void))callbacks->input_finished;
        if (input_finished)
        {
          input_finished();
        }
      }
    }
    return;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)tcp_info buf = 136446210;
  BOOL v15 = "nw_flow_passthrough_input_finished";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (__nwlog_fault(v6, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        BOOL v15 = "nw_flow_passthrough_input_finished";
        char v9 = "%{public}s called with null protocol";
LABEL_21:
        _os_log_impl(&dword_1830D4000, v7, v8, v9, buf, 0xCu);
      }
    }
    else
    {
      if (v12)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v7 = __nwlog_obj();
        os_log_type_t v8 = type;
        BOOL v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)tcp_info buf = 136446466;
            BOOL v15 = "nw_flow_passthrough_input_finished";
            __int16 v16 = 2082;
            __int16 v17 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_23;
        }
        if (!v11) {
          goto LABEL_22;
        }
        *(_DWORD *)tcp_info buf = 136446210;
        BOOL v15 = "nw_flow_passthrough_input_finished";
        char v9 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_21;
      }
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        BOOL v15 = "nw_flow_passthrough_input_finished";
        char v9 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_21;
      }
    }
LABEL_22:
  }
LABEL_23:
  if (v6) {
    free(v6);
  }
}

BOOL nw_protocol_metadata_is_tls(nw_protocol_metadata_t metadata)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = metadata;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = v1;
    id v4 = v3[1];

    uint64_t v5 = (void *)nw_protocol_boringssl_copy_definition();
    BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v4, (uint64_t)v5);

    goto LABEL_3;
  }
  os_log_type_t v8 = __nwlog_obj();
  *(_DWORD *)tcp_info buf = 136446210;
  uint64_t v19 = "nw_protocol_metadata_is_tls";
  char v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (__nwlog_fault(v9, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint64_t v19 = "nw_protocol_metadata_is_tls";
        _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null metadata", buf, 0xCu);
      }
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v10 = __nwlog_obj();
      os_log_type_t v13 = type;
      BOOL v14 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          uint64_t v19 = "nw_protocol_metadata_is_tls";
          __int16 v20 = 2082;
          os_log_type_t v21 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v14)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint64_t v19 = "nw_protocol_metadata_is_tls";
        _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v10 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint64_t v19 = "nw_protocol_metadata_is_tls";
        _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v9) {
    free(v9);
  }
  BOOL is_equal_unsafe = 0;
LABEL_3:

  return is_equal_unsafe;
}

void sub_1832F20E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_connection_fillout_failed_resolution_report_on_nw_queue(void *a1, void *a2)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1;
  id v4 = a2;
  if (v3)
  {
    nw_context_assert_queue(v3[3]);
    uint64_t v5 = v4;
    if (v5)
    {
      uint64_t v6 = v5;
      int v7 = v5[29];

      if (v7 == 1)
      {
        os_log_type_t v8 = objc_alloc_init(NWConcrete_nw_resolution_report);
        __int16 v56 = WORD2(v6) ^ WORD1(v6) ^ HIWORD(v6) ^ (unsigned __int16)v6;
        nw_endpoint_t v9 = nw_endpoint_handler_copy_endpoint(v6);
        nw_endpoint_t v10 = v9;
        if (v9 && (os_log_type_t v11 = v9, v12 = [v11 type], v11, v12 == 3))
        {
          int v13 = 4;
          int v14 = 3;
        }
        else
        {
          int v13 = 2;
          int v14 = 1;
        }
        int event_milliseconds = nw_connection_get_event_milliseconds(v3, 2, v14, &v56, 0);
        v8->milliseconds = nw_connection_get_event_milliseconds(v3, 2, v13, &v56, 0)
                         - event_milliseconds;
        v8->endpoint_count = nw_endpoint_handler_get_resolved_endpoint_count(v6);
        v8->source = nw_endpoint_handler_get_resolution_source(v6);
        v8->int protocol = nw_endpoint_handler_get_resolution_protocol(v6);
        nw_endpoint_t v24 = nw_endpoint_handler_copy_preferred_resolved_endpoint(v6);
        preferred_endpoint = v8->preferred_endpoint;
        v8->preferred_endpoint = (OS_nw_endpoint *)v24;

        __int16 v26 = (OS_nw_array *)nw_endpoint_handler_copy_resolved_endpoints(v6);
        uint64_t resolved_endpoints = v8->resolved_endpoints;
        v8->uint64_t resolved_endpoints = v26;

        BOOL v55 = 0;
        nw_endpoint_handler_get_svcb_report(v6, 0, &v55, 0);
        *((unsigned char *)v8 + 70) = *((unsigned char *)v8 + 70) & 0xFE | v55;
        *(void *)tcp_info buf = 0;
        nw_endpoint_handler_get_resolution_provider(v6, (uint64_t)buf);
        v8->provider_name = *(char **)buf;
        unsigned __int16 v54 = 0;
        *(void *)os_log_type_t type = 0;
        nw_endpoint_handler_get_extended_dns_error(v6, &v54, (char **)type);
        v8->int extended_dns_error_code = v54;
        v8->extended_dns_error_extra_text = *(char **)type;
        __int16 v28 = v3[54];
        v3[54] = v8;
      }
      else
      {
        os_log_type_t v15 = v6;
        int v16 = v6[29];

        if (v16 == 3 && !v3[54])
        {
          nw_endpoint_t v17 = nw_endpoint_handler_copy_endpoint(v15);
          nw_endpoint_t v18 = v17;
          if (v17)
          {
            uint64_t v19 = v17;
            unsigned int isa = v19[28].isa;

            if (isa)
            {
              os_log_type_t v21 = objc_alloc_init(NWConcrete_nw_resolution_report);
              if (isa < 4) {
                v21->int extended_dns_error_code = isa + 14;
              }
              uint64_t v22 = v3[54];
              v3[54] = v21;
            }
          }
        }
      }
      goto LABEL_17;
    }
    os_log_type_t v33 = __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_endpoint_handler_get_mode";
    os_log_type_t v34 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v56) = 0;
    if (__nwlog_fault(v34, type, &v56))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        uint64_t v35 = __nwlog_obj();
        os_log_type_t v36 = type[0];
        if (os_log_type_enabled(v35, type[0]))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_1830D4000, v35, v36, "%{public}s called with null handler", buf, 0xCu);
        }
LABEL_51:

        goto LABEL_52;
      }
      if (!(_BYTE)v56)
      {
        uint64_t v35 = __nwlog_obj();
        os_log_type_t v44 = type[0];
        if (os_log_type_enabled(v35, type[0]))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_1830D4000, v35, v44, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_51;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v35 = __nwlog_obj();
      os_log_type_t v41 = type[0];
      BOOL v42 = os_log_type_enabled(v35, type[0]);
      if (!backtrace_string)
      {
        if (v42)
        {
          *(_DWORD *)tcp_info buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_1830D4000, v35, v41, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
        goto LABEL_51;
      }
      if (v42)
      {
        *(_DWORD *)tcp_info buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_endpoint_handler_get_mode";
        __int16 v58 = 2082;
        uint64_t v59 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v35, v41, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
LABEL_52:
    if (v34) {
      free(v34);
    }
    int v45 = __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_endpoint_handler_get_mode";
    int v46 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v56) = 0;
    if (!__nwlog_fault(v46, type, &v56)) {
      goto LABEL_70;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __int16 v47 = __nwlog_obj();
      os_log_type_t v48 = type[0];
      if (os_log_type_enabled(v47, type[0]))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_endpoint_handler_get_mode";
        _os_log_impl(&dword_1830D4000, v47, v48, "%{public}s called with null handler", buf, 0xCu);
      }
    }
    else if ((_BYTE)v56)
    {
      uint64_t v49 = (char *)__nw_create_backtrace_string();
      __int16 v47 = __nwlog_obj();
      os_log_type_t v50 = type[0];
      BOOL v51 = os_log_type_enabled(v47, type[0]);
      if (v49)
      {
        if (v51)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_endpoint_handler_get_mode";
          __int16 v58 = 2082;
          uint64_t v59 = v49;
          _os_log_impl(&dword_1830D4000, v47, v50, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v49);
        goto LABEL_70;
      }
      if (v51)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_endpoint_handler_get_mode";
        _os_log_impl(&dword_1830D4000, v47, v50, "%{public}s called with null handler, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __int16 v47 = __nwlog_obj();
      os_log_type_t v52 = type[0];
      if (os_log_type_enabled(v47, type[0]))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_endpoint_handler_get_mode";
        _os_log_impl(&dword_1830D4000, v47, v52, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
      }
    }

LABEL_70:
    if (v46) {
      free(v46);
    }
    goto LABEL_17;
  }
  nw_endpoint_t v29 = __nwlog_obj();
  *(_DWORD *)tcp_info buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_connection_fillout_failed_resolution_report_on_nw_queue";
  uint64_t v30 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  LOBYTE(v56) = 0;
  if (__nwlog_fault(v30, type, &v56))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      uint32_t v31 = __nwlog_obj();
      os_log_type_t v32 = type[0];
      if (os_log_type_enabled(v31, type[0]))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_fillout_failed_resolution_report_on_nw_queue";
        _os_log_impl(&dword_1830D4000, v31, v32, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if ((_BYTE)v56)
    {
      BOOL v37 = (char *)__nw_create_backtrace_string();
      uint32_t v31 = __nwlog_obj();
      os_log_type_t v38 = type[0];
      BOOL v39 = os_log_type_enabled(v31, type[0]);
      if (v37)
      {
        if (v39)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_connection_fillout_failed_resolution_report_on_nw_queue";
          __int16 v58 = 2082;
          uint64_t v59 = v37;
          _os_log_impl(&dword_1830D4000, v31, v38, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v37);
        goto LABEL_47;
      }
      if (v39)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_fillout_failed_resolution_report_on_nw_queue";
        _os_log_impl(&dword_1830D4000, v31, v38, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint32_t v31 = __nwlog_obj();
      os_log_type_t v43 = type[0];
      if (os_log_type_enabled(v31, type[0]))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_fillout_failed_resolution_report_on_nw_queue";
        _os_log_impl(&dword_1830D4000, v31, v43, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_47:
  if (v30) {
    free(v30);
  }
LABEL_17:
}

void sub_1832F298C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_endpoint_handler_get_resolved_endpoint_count(void *a1)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = a1;
  uint64_t v2 = v1;
  if (!v1)
  {
    int v7 = __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    int v27 = "nw_endpoint_handler_get_mode";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (__nwlog_fault(v8, &type, &v24))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        nw_endpoint_t v9 = __nwlog_obj();
        os_log_type_t v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          int v27 = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null handler", buf, 0xCu);
        }
      }
      else if (v24)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        nw_endpoint_t v9 = __nwlog_obj();
        os_log_type_t v12 = type;
        BOOL v13 = os_log_type_enabled(v9, type);
        if (backtrace_string)
        {
          if (v13)
          {
            *(_DWORD *)tcp_info buf = 136446466;
            int v27 = "nw_endpoint_handler_get_mode";
            __int16 v28 = 2082;
            nw_endpoint_t v29 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_23;
        }
        if (v13)
        {
          *(_DWORD *)tcp_info buf = 136446210;
          int v27 = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        nw_endpoint_t v9 = __nwlog_obj();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          int v27 = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_23:
    if (v8) {
      free(v8);
    }
LABEL_25:
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v15 = (id)gLogObj;
    *(_DWORD *)tcp_info buf = 136446210;
    int v27 = "nw_endpoint_handler_get_resolved_endpoint_count";
    int v16 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (__nwlog_fault(v16, &type, &v24))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        nw_endpoint_t v17 = (id)gLogObj;
        os_log_type_t v18 = type;
        if (os_log_type_enabled(v17, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          int v27 = "nw_endpoint_handler_get_resolved_endpoint_count";
          _os_log_impl(&dword_1830D4000, v17, v18, "%{public}s Endpoint handler is not a resolver", buf, 0xCu);
        }
      }
      else if (v24)
      {
        __int16 v20 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        nw_endpoint_t v17 = (id)gLogObj;
        os_log_type_t v21 = type;
        BOOL v22 = os_log_type_enabled(v17, type);
        if (v20)
        {
          if (v22)
          {
            *(_DWORD *)tcp_info buf = 136446466;
            int v27 = "nw_endpoint_handler_get_resolved_endpoint_count";
            __int16 v28 = 2082;
            nw_endpoint_t v29 = v20;
            _os_log_impl(&dword_1830D4000, v17, v21, "%{public}s Endpoint handler is not a resolver, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v20);
          if (!v16) {
            goto LABEL_32;
          }
          goto LABEL_31;
        }
        if (v22)
        {
          *(_DWORD *)tcp_info buf = 136446210;
          int v27 = "nw_endpoint_handler_get_resolved_endpoint_count";
          _os_log_impl(&dword_1830D4000, v17, v21, "%{public}s Endpoint handler is not a resolver, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        nw_endpoint_t v17 = (id)gLogObj;
        os_log_type_t v23 = type;
        if (os_log_type_enabled(v17, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          int v27 = "nw_endpoint_handler_get_resolved_endpoint_count";
          _os_log_impl(&dword_1830D4000, v17, v23, "%{public}s Endpoint handler is not a resolver, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
    if (!v16)
    {
LABEL_32:
      uint64_t v6 = 0;
      goto LABEL_33;
    }
LABEL_31:
    free(v16);
    goto LABEL_32;
  }
  int mode = v1->mode;

  if (mode != 1) {
    goto LABEL_25;
  }
  id v4 = nw_endpoint_handler_copy_resolver(v2);
  uint64_t v5 = *((void *)v4 + 5);
  if (v5) {
    uint64_t v6 = (*(void *)(v5 + 24) - *(void *)(v5 + 16)) >> 3;
  }
  else {
    uint64_t v6 = 0;
  }

LABEL_33:
  return v6;
}

void sub_1832F2F34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_endpoint_handler_get_resolution_source(void *a1)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = a1;
  uint64_t v2 = v1;
  if (!v1)
  {
    os_log_type_t v8 = __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    os_log_type_t v36 = "nw_endpoint_handler_get_mode";
    nw_endpoint_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v33 = 0;
    if (__nwlog_fault(v9, &type, &v33))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v10 = __nwlog_obj();
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          os_log_type_t v36 = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null handler", buf, 0xCu);
        }
      }
      else if (v33)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v10 = __nwlog_obj();
        os_log_type_t v17 = type;
        BOOL v18 = os_log_type_enabled(v10, type);
        if (backtrace_string)
        {
          if (v18)
          {
            *(_DWORD *)tcp_info buf = 136446466;
            os_log_type_t v36 = "nw_endpoint_handler_get_mode";
            __int16 v37 = 2082;
            os_log_type_t v38 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v10, v17, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_36;
        }
        if (v18)
        {
          *(_DWORD *)tcp_info buf = 136446210;
          os_log_type_t v36 = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_1830D4000, v10, v17, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        os_log_type_t v10 = __nwlog_obj();
        os_log_type_t v22 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          os_log_type_t v36 = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_1830D4000, v10, v22, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_36:
    if (v9) {
      free(v9);
    }
LABEL_38:
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v23 = (id)gLogObj;
    *(_DWORD *)tcp_info buf = 136446210;
    os_log_type_t v36 = "nw_endpoint_handler_get_resolution_source";
    char v24 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v33 = 0;
    if (__nwlog_fault(v24, &type, &v33))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v25 = (id)gLogObj;
        os_log_type_t v26 = type;
        if (os_log_type_enabled(v25, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          os_log_type_t v36 = "nw_endpoint_handler_get_resolution_source";
          _os_log_impl(&dword_1830D4000, v25, v26, "%{public}s Endpoint handler is not a resolver", buf, 0xCu);
        }
      }
      else if (v33)
      {
        __int16 v28 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v25 = (id)gLogObj;
        os_log_type_t v29 = type;
        BOOL v30 = os_log_type_enabled(v25, type);
        if (v28)
        {
          if (v30)
          {
            *(_DWORD *)tcp_info buf = 136446466;
            os_log_type_t v36 = "nw_endpoint_handler_get_resolution_source";
            __int16 v37 = 2082;
            os_log_type_t v38 = v28;
            _os_log_impl(&dword_1830D4000, v25, v29, "%{public}s Endpoint handler is not a resolver, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v28);
          if (!v24) {
            goto LABEL_45;
          }
          goto LABEL_44;
        }
        if (v30)
        {
          *(_DWORD *)tcp_info buf = 136446210;
          os_log_type_t v36 = "nw_endpoint_handler_get_resolution_source";
          _os_log_impl(&dword_1830D4000, v25, v29, "%{public}s Endpoint handler is not a resolver, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v25 = (id)gLogObj;
        os_log_type_t v31 = type;
        if (os_log_type_enabled(v25, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          os_log_type_t v36 = "nw_endpoint_handler_get_resolution_source";
          _os_log_impl(&dword_1830D4000, v25, v31, "%{public}s Endpoint handler is not a resolver, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
    if (!v24)
    {
LABEL_45:
      uint64_t v7 = 1;
      goto LABEL_46;
    }
LABEL_44:
    free(v24);
    goto LABEL_45;
  }
  int mode = v1->mode;

  if (mode != 1) {
    goto LABEL_38;
  }
  id v4 = (id *)nw_endpoint_handler_copy_resolver(v2);
  id v5 = v4[1];
  uint64_t v6 = v5;
  if (!v5)
  {
    os_log_type_t v12 = __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    os_log_type_t v36 = "nw_resolver_get_resolution_source";
    BOOL v13 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v33 = 0;
    if (__nwlog_fault(v13, &type, &v33))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v14 = __nwlog_obj();
        os_log_type_t v15 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          os_log_type_t v36 = "nw_resolver_get_resolution_source";
          _os_log_impl(&dword_1830D4000, v14, v15, "%{public}s called with null resolver", buf, 0xCu);
        }
      }
      else if (v33)
      {
        uint64_t v19 = (char *)__nw_create_backtrace_string();
        os_log_type_t v14 = __nwlog_obj();
        os_log_type_t v20 = type;
        BOOL v21 = os_log_type_enabled(v14, type);
        if (v19)
        {
          if (v21)
          {
            *(_DWORD *)tcp_info buf = 136446466;
            os_log_type_t v36 = "nw_resolver_get_resolution_source";
            __int16 v37 = 2082;
            os_log_type_t v38 = v19;
            _os_log_impl(&dword_1830D4000, v14, v20, "%{public}s called with null resolver, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v19);
          goto LABEL_65;
        }
        if (v21)
        {
          *(_DWORD *)tcp_info buf = 136446210;
          os_log_type_t v36 = "nw_resolver_get_resolution_source";
          _os_log_impl(&dword_1830D4000, v14, v20, "%{public}s called with null resolver, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        os_log_type_t v14 = __nwlog_obj();
        os_log_type_t v32 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          os_log_type_t v36 = "nw_resolver_get_resolution_source";
          _os_log_impl(&dword_1830D4000, v14, v32, "%{public}s called with null resolver, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_65:
    if (v13) {
      free(v13);
    }
    uint64_t v7 = 1;
    goto LABEL_9;
  }
  if ((*((_WORD *)v5 + 44) & 0x60) != 0)
  {
    uint64_t v7 = 3;
  }
  else if ((*((unsigned char *)v5 + 346) & 0xE) != 0)
  {
    uint64_t v7 = 2;
  }
  else
  {
    uint64_t v7 = 1;
  }
LABEL_9:

LABEL_46:
  return v7;
}

void sub_1832F36DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_endpoint_handler_get_resolution_protocol(void *a1)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = a1;
  uint64_t v2 = v1;
  if (!v1)
  {
    os_log_type_t v8 = __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    os_log_type_t v36 = "nw_endpoint_handler_get_mode";
    nw_endpoint_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v33 = 0;
    if (__nwlog_fault(v9, &type, &v33))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v10 = __nwlog_obj();
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          os_log_type_t v36 = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null handler", buf, 0xCu);
        }
      }
      else if (v33)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v10 = __nwlog_obj();
        os_log_type_t v17 = type;
        BOOL v18 = os_log_type_enabled(v10, type);
        if (backtrace_string)
        {
          if (v18)
          {
            *(_DWORD *)tcp_info buf = 136446466;
            os_log_type_t v36 = "nw_endpoint_handler_get_mode";
            __int16 v37 = 2082;
            os_log_type_t v38 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v10, v17, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_32;
        }
        if (v18)
        {
          *(_DWORD *)tcp_info buf = 136446210;
          os_log_type_t v36 = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_1830D4000, v10, v17, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        os_log_type_t v10 = __nwlog_obj();
        os_log_type_t v22 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          os_log_type_t v36 = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_1830D4000, v10, v22, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_32:
    if (v9) {
      free(v9);
    }
LABEL_34:
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v23 = (id)gLogObj;
    *(_DWORD *)tcp_info buf = 136446210;
    os_log_type_t v36 = "nw_endpoint_handler_get_resolution_protocol";
    char v24 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v33 = 0;
    if (__nwlog_fault(v24, &type, &v33))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v25 = (id)gLogObj;
        os_log_type_t v26 = type;
        if (os_log_type_enabled(v25, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          os_log_type_t v36 = "nw_endpoint_handler_get_resolution_protocol";
          _os_log_impl(&dword_1830D4000, v25, v26, "%{public}s Endpoint handler is not a resolver", buf, 0xCu);
        }
      }
      else if (v33)
      {
        __int16 v28 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v25 = (id)gLogObj;
        os_log_type_t v29 = type;
        BOOL v30 = os_log_type_enabled(v25, type);
        if (v28)
        {
          if (v30)
          {
            *(_DWORD *)tcp_info buf = 136446466;
            os_log_type_t v36 = "nw_endpoint_handler_get_resolution_protocol";
            __int16 v37 = 2082;
            os_log_type_t v38 = v28;
            _os_log_impl(&dword_1830D4000, v25, v29, "%{public}s Endpoint handler is not a resolver, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v28);
          if (!v24) {
            goto LABEL_41;
          }
          goto LABEL_40;
        }
        if (v30)
        {
          *(_DWORD *)tcp_info buf = 136446210;
          os_log_type_t v36 = "nw_endpoint_handler_get_resolution_protocol";
          _os_log_impl(&dword_1830D4000, v25, v29, "%{public}s Endpoint handler is not a resolver, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v25 = (id)gLogObj;
        os_log_type_t v31 = type;
        if (os_log_type_enabled(v25, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          os_log_type_t v36 = "nw_endpoint_handler_get_resolution_protocol";
          _os_log_impl(&dword_1830D4000, v25, v31, "%{public}s Endpoint handler is not a resolver, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
    if (!v24)
    {
LABEL_41:
      uint64_t v7 = 0;
      goto LABEL_42;
    }
LABEL_40:
    free(v24);
    goto LABEL_41;
  }
  int mode = v1->mode;

  if (mode != 1) {
    goto LABEL_34;
  }
  id v4 = (id *)nw_endpoint_handler_copy_resolver(v2);
  id v5 = (unsigned int *)v4[1];
  uint64_t v6 = v5;
  if (!v5)
  {
    os_log_type_t v12 = __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    os_log_type_t v36 = "nw_resolver_get_resolution_protocol";
    BOOL v13 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v33 = 0;
    if (__nwlog_fault(v13, &type, &v33))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v14 = __nwlog_obj();
        os_log_type_t v15 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          os_log_type_t v36 = "nw_resolver_get_resolution_protocol";
          _os_log_impl(&dword_1830D4000, v14, v15, "%{public}s called with null resolver", buf, 0xCu);
        }
      }
      else if (v33)
      {
        uint64_t v19 = (char *)__nw_create_backtrace_string();
        os_log_type_t v14 = __nwlog_obj();
        os_log_type_t v20 = type;
        BOOL v21 = os_log_type_enabled(v14, type);
        if (v19)
        {
          if (v21)
          {
            *(_DWORD *)tcp_info buf = 136446466;
            os_log_type_t v36 = "nw_resolver_get_resolution_protocol";
            __int16 v37 = 2082;
            os_log_type_t v38 = v19;
            _os_log_impl(&dword_1830D4000, v14, v20, "%{public}s called with null resolver, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v19);
          goto LABEL_61;
        }
        if (v21)
        {
          *(_DWORD *)tcp_info buf = 136446210;
          os_log_type_t v36 = "nw_resolver_get_resolution_protocol";
          _os_log_impl(&dword_1830D4000, v14, v20, "%{public}s called with null resolver, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        os_log_type_t v14 = __nwlog_obj();
        os_log_type_t v32 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          os_log_type_t v36 = "nw_resolver_get_resolution_protocol";
          _os_log_impl(&dword_1830D4000, v14, v32, "%{public}s called with null resolver, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_61:
    if (v13) {
      free(v13);
    }
    uint64_t v7 = 0;
    goto LABEL_5;
  }
  uint64_t v7 = v5[62];
LABEL_5:

LABEL_42:
  return v7;
}

void sub_1832F3E64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_endpoint_handler_get_extended_dns_error(void *a1, _WORD *a2, char **a3)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  uint64_t v6 = v5;
  if (!v5)
  {
    BOOL v13 = __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    BOOL v42 = "nw_endpoint_handler_get_mode";
    os_log_type_t v14 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v39 = 0;
    if (__nwlog_fault(v14, &type, &v39))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v15 = __nwlog_obj();
        os_log_type_t v16 = type;
        if (os_log_type_enabled(v15, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          BOOL v42 = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_1830D4000, v15, v16, "%{public}s called with null handler", buf, 0xCu);
        }
      }
      else if (v39)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v15 = __nwlog_obj();
        os_log_type_t v22 = type;
        BOOL v23 = os_log_type_enabled(v15, type);
        if (backtrace_string)
        {
          if (v23)
          {
            *(_DWORD *)tcp_info buf = 136446466;
            BOOL v42 = "nw_endpoint_handler_get_mode";
            __int16 v43 = 2082;
            os_log_type_t v44 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v15, v22, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_39;
        }
        if (v23)
        {
          *(_DWORD *)tcp_info buf = 136446210;
          BOOL v42 = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_1830D4000, v15, v22, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        os_log_type_t v15 = __nwlog_obj();
        os_log_type_t v29 = type;
        if (os_log_type_enabled(v15, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          BOOL v42 = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_1830D4000, v15, v29, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_39:
    if (v14) {
      free(v14);
    }
LABEL_41:
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v30 = (id)gLogObj;
    *(_DWORD *)tcp_info buf = 136446210;
    BOOL v42 = "nw_endpoint_handler_get_extended_dns_error";
    os_log_type_t v31 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v39 = 0;
    if (__nwlog_fault(v31, &type, &v39))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v32 = (id)gLogObj;
        os_log_type_t v33 = type;
        if (os_log_type_enabled(v32, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          BOOL v42 = "nw_endpoint_handler_get_extended_dns_error";
          _os_log_impl(&dword_1830D4000, v32, v33, "%{public}s Endpoint handler is not a resolver", buf, 0xCu);
        }
      }
      else if (v39)
      {
        os_log_type_t v34 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v32 = (id)gLogObj;
        os_log_type_t v35 = type;
        BOOL v36 = os_log_type_enabled(v32, type);
        if (v34)
        {
          if (v36)
          {
            *(_DWORD *)tcp_info buf = 136446466;
            BOOL v42 = "nw_endpoint_handler_get_extended_dns_error";
            __int16 v43 = 2082;
            os_log_type_t v44 = v34;
            _os_log_impl(&dword_1830D4000, v32, v35, "%{public}s Endpoint handler is not a resolver, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v34);
          if (!v31) {
            goto LABEL_48;
          }
          goto LABEL_47;
        }
        if (v36)
        {
          *(_DWORD *)tcp_info buf = 136446210;
          BOOL v42 = "nw_endpoint_handler_get_extended_dns_error";
          _os_log_impl(&dword_1830D4000, v32, v35, "%{public}s Endpoint handler is not a resolver, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v32 = (id)gLogObj;
        os_log_type_t v37 = type;
        if (os_log_type_enabled(v32, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          BOOL v42 = "nw_endpoint_handler_get_extended_dns_error";
          _os_log_impl(&dword_1830D4000, v32, v37, "%{public}s Endpoint handler is not a resolver, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
    if (!v31) {
      goto LABEL_48;
    }
LABEL_47:
    free(v31);
    goto LABEL_48;
  }
  int mode = v5->mode;

  if (mode != 1) {
    goto LABEL_41;
  }
  os_log_type_t v8 = (id *)nw_endpoint_handler_copy_resolver(v6);
  nw_endpoint_t v9 = (const char **)v8[1];
  os_log_type_t v10 = v9;
  if (!v9)
  {
    os_log_type_t v17 = __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    BOOL v42 = "nw_resolver_get_extended_dns_error";
    BOOL v18 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v39 = 0;
    if (__nwlog_fault(v18, &type, &v39))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v19 = __nwlog_obj();
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v19, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          BOOL v42 = "nw_resolver_get_extended_dns_error";
          _os_log_impl(&dword_1830D4000, v19, v20, "%{public}s called with null resolver", buf, 0xCu);
        }
      }
      else if (v39)
      {
        char v24 = (char *)__nw_create_backtrace_string();
        uint64_t v19 = __nwlog_obj();
        os_log_type_t v25 = type;
        BOOL v26 = os_log_type_enabled(v19, type);
        if (v24)
        {
          if (v26)
          {
            *(_DWORD *)tcp_info buf = 136446466;
            BOOL v42 = "nw_resolver_get_extended_dns_error";
            __int16 v43 = 2082;
            os_log_type_t v44 = v24;
            _os_log_impl(&dword_1830D4000, v19, v25, "%{public}s called with null resolver, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v24);
          goto LABEL_67;
        }
        if (v26)
        {
          *(_DWORD *)tcp_info buf = 136446210;
          BOOL v42 = "nw_resolver_get_extended_dns_error";
          _os_log_impl(&dword_1830D4000, v19, v25, "%{public}s called with null resolver, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        uint64_t v19 = __nwlog_obj();
        os_log_type_t v38 = type;
        if (os_log_type_enabled(v19, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          BOOL v42 = "nw_resolver_get_extended_dns_error";
          _os_log_impl(&dword_1830D4000, v19, v38, "%{public}s called with null resolver, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_67:
    if (v18) {
      free(v18);
    }
    goto LABEL_10;
  }
  if (a2) {
    *a2 = *((_WORD *)v9 + 172);
  }
  if (!a3) {
    goto LABEL_10;
  }
  os_log_type_t v11 = v9[28];
  if (!v11) {
    goto LABEL_10;
  }
  os_log_type_t v12 = strdup(v11);
  if (v12)
  {
LABEL_9:
    *a3 = v12;
LABEL_10:

LABEL_48:
    return;
  }
  int v27 = __nwlog_obj();
  os_log_type_enabled(v27, OS_LOG_TYPE_ERROR);
  *(_DWORD *)tcp_info buf = 136446210;
  BOOL v42 = "strict_strdup";
  __int16 v28 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v28))
  {
    free(v28);
    goto LABEL_9;
  }
  __break(1u);
}

void sub_1832F46A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id nw_endpoint_handler_copy_resolved_endpoints(void *a1)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = a1;
  uint64_t v2 = v1;
  if (!v1)
  {
    nw_endpoint_t v9 = __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    os_log_type_t v31 = "nw_endpoint_handler_get_mode";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v28 = 0;
    if (__nwlog_fault(v10, &type, &v28))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v11 = __nwlog_obj();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          os_log_type_t v31 = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s called with null handler", buf, 0xCu);
        }
      }
      else if (v28)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v11 = __nwlog_obj();
        os_log_type_t v14 = type;
        BOOL v15 = os_log_type_enabled(v11, type);
        if (backtrace_string)
        {
          if (v15)
          {
            *(_DWORD *)tcp_info buf = 136446466;
            os_log_type_t v31 = "nw_endpoint_handler_get_mode";
            __int16 v32 = 2082;
            os_log_type_t v33 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v11, v14, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_24;
        }
        if (v15)
        {
          *(_DWORD *)tcp_info buf = 136446210;
          os_log_type_t v31 = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_1830D4000, v11, v14, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        os_log_type_t v11 = __nwlog_obj();
        os_log_type_t v16 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          os_log_type_t v31 = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_24:
    if (v10) {
      free(v10);
    }
LABEL_26:
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v17 = (id)gLogObj;
    *(_DWORD *)tcp_info buf = 136446210;
    os_log_type_t v31 = "nw_endpoint_handler_copy_resolved_endpoints";
    BOOL v18 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v28 = 0;
    if (__nwlog_fault(v18, &type, &v28))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v19 = (id)gLogObj;
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v19, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          os_log_type_t v31 = "nw_endpoint_handler_copy_resolved_endpoints";
          _os_log_impl(&dword_1830D4000, v19, v20, "%{public}s Endpoint handler is not a resolver", buf, 0xCu);
        }
      }
      else if (v28)
      {
        BOOL v21 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v19 = (id)gLogObj;
        os_log_type_t v22 = type;
        BOOL v23 = os_log_type_enabled(v19, type);
        if (v21)
        {
          if (v23)
          {
            *(_DWORD *)tcp_info buf = 136446466;
            os_log_type_t v31 = "nw_endpoint_handler_copy_resolved_endpoints";
            __int16 v32 = 2082;
            os_log_type_t v33 = v21;
            _os_log_impl(&dword_1830D4000, v19, v22, "%{public}s Endpoint handler is not a resolver, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v21);
          if (!v18) {
            goto LABEL_45;
          }
          goto LABEL_44;
        }
        if (v23)
        {
          *(_DWORD *)tcp_info buf = 136446210;
          os_log_type_t v31 = "nw_endpoint_handler_copy_resolved_endpoints";
          _os_log_impl(&dword_1830D4000, v19, v22, "%{public}s Endpoint handler is not a resolver, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v19 = (id)gLogObj;
        os_log_type_t v24 = type;
        if (os_log_type_enabled(v19, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          os_log_type_t v31 = "nw_endpoint_handler_copy_resolved_endpoints";
          _os_log_impl(&dword_1830D4000, v19, v24, "%{public}s Endpoint handler is not a resolver, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
    if (!v18)
    {
LABEL_45:
      id v8 = 0;
      goto LABEL_46;
    }
LABEL_44:
    free(v18);
    goto LABEL_45;
  }
  int mode = v1->mode;

  if (mode != 1) {
    goto LABEL_26;
  }
  id v4 = nw_endpoint_handler_copy_resolver(v2);
  uint64_t v5 = *((void *)v4 + 5);
  if (!v5 || *(void *)(v5 + 24) == *(void *)(v5 + 16))
  {
    id v8 = 0;
  }
  else
  {
    BOOL v6 = nw_array_create();
    uint64_t v7 = (atomic_uchar *)*((void *)v4 + 5);
    v26[0] = MEMORY[0x1E4F143A8];
    v26[1] = 3221225472;
    v26[2] = __nw_endpoint_handler_copy_resolved_endpoints_block_invoke;
    v26[3] = &unk_1E524AE18;
    id v8 = (id)v6;
    id v27 = v8;
    nw_array_apply(v7, (uint64_t)v26);
  }
LABEL_46:

  return v8;
}

void sub_1832F4C6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

nw_endpoint_t nw_endpoint_handler_copy_preferred_resolved_endpoint(void *a1)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = a1;
  uint64_t v2 = v1;
  if (!v1)
  {
    nw_endpoint_t v9 = __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    os_log_type_t v29 = "nw_endpoint_handler_get_mode";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (__nwlog_fault(v10, &type, &v26))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v11 = __nwlog_obj();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          os_log_type_t v29 = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s called with null handler", buf, 0xCu);
        }
      }
      else if (v26)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v11 = __nwlog_obj();
        os_log_type_t v14 = type;
        BOOL v15 = os_log_type_enabled(v11, type);
        if (backtrace_string)
        {
          if (v15)
          {
            *(_DWORD *)tcp_info buf = 136446466;
            os_log_type_t v29 = "nw_endpoint_handler_get_mode";
            __int16 v30 = 2082;
            os_log_type_t v31 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v11, v14, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_25;
        }
        if (v15)
        {
          *(_DWORD *)tcp_info buf = 136446210;
          os_log_type_t v29 = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_1830D4000, v11, v14, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        os_log_type_t v11 = __nwlog_obj();
        os_log_type_t v16 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          os_log_type_t v29 = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_25:
    if (v10) {
      free(v10);
    }
LABEL_27:
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v17 = (id)gLogObj;
    *(_DWORD *)tcp_info buf = 136446210;
    os_log_type_t v29 = "nw_endpoint_handler_copy_preferred_resolved_endpoint";
    BOOL v18 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (__nwlog_fault(v18, &type, &v26))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v19 = (id)gLogObj;
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v19, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          os_log_type_t v29 = "nw_endpoint_handler_copy_preferred_resolved_endpoint";
          _os_log_impl(&dword_1830D4000, v19, v20, "%{public}s Endpoint handler is not a resolver", buf, 0xCu);
        }
      }
      else if (v26)
      {
        BOOL v21 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v19 = (id)gLogObj;
        os_log_type_t v22 = type;
        BOOL v23 = os_log_type_enabled(v19, type);
        if (v21)
        {
          if (v23)
          {
            *(_DWORD *)tcp_info buf = 136446466;
            os_log_type_t v29 = "nw_endpoint_handler_copy_preferred_resolved_endpoint";
            __int16 v30 = 2082;
            os_log_type_t v31 = v21;
            _os_log_impl(&dword_1830D4000, v19, v22, "%{public}s Endpoint handler is not a resolver, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v21);
          if (!v18) {
            goto LABEL_46;
          }
          goto LABEL_45;
        }
        if (v23)
        {
          *(_DWORD *)tcp_info buf = 136446210;
          os_log_type_t v29 = "nw_endpoint_handler_copy_preferred_resolved_endpoint";
          _os_log_impl(&dword_1830D4000, v19, v22, "%{public}s Endpoint handler is not a resolver, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v19 = (id)gLogObj;
        os_log_type_t v24 = type;
        if (os_log_type_enabled(v19, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          os_log_type_t v29 = "nw_endpoint_handler_copy_preferred_resolved_endpoint";
          _os_log_impl(&dword_1830D4000, v19, v24, "%{public}s Endpoint handler is not a resolver, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
    if (!v18)
    {
LABEL_46:
      nw_endpoint_t v8 = 0;
      goto LABEL_47;
    }
LABEL_45:
    free(v18);
    goto LABEL_46;
  }
  int mode = v1->mode;

  if (mode != 1) {
    goto LABEL_27;
  }
  id v4 = nw_endpoint_handler_copy_resolver(v2);
  uint64_t v5 = *((void *)v4 + 5);
  if (v5
    && *(void *)(v5 + 16) != *(void *)(v5 + 24)
    && (nw_array_get_object_at_index(v5, 0), (BOOL v6 = objc_claimAutoreleasedReturnValue()) != 0))
  {
    uint64_t v7 = v6;
    nw_endpoint_t v8 = nw_endpoint_handler_copy_endpoint(v6);
  }
  else
  {
    nw_endpoint_t v8 = 0;
  }

LABEL_47:
  return v8;
}

void sub_1832F51EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_endpoint_handler_get_resolution_provider(void *a1, uint64_t a2)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1;
  id v4 = v3;
  if (!v3)
  {
    os_log_type_t v11 = __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_endpoint_handler_get_mode";
    os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v36 = 0;
    if (__nwlog_fault(v12, &type, &v36))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        BOOL v13 = __nwlog_obj();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s called with null handler", buf, 0xCu);
        }
      }
      else if (v36)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        BOOL v13 = __nwlog_obj();
        os_log_type_t v20 = type;
        BOOL v21 = os_log_type_enabled(v13, type);
        if (backtrace_string)
        {
          if (v21)
          {
            *(_DWORD *)tcp_info buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_endpoint_handler_get_mode";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = backtrace_string;
            _os_log_impl(&dword_1830D4000, v13, v20, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_36;
        }
        if (v21)
        {
          *(_DWORD *)tcp_info buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_1830D4000, v13, v20, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        BOOL v13 = __nwlog_obj();
        os_log_type_t v25 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_1830D4000, v13, v25, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_36:
    if (v12) {
      free(v12);
    }
LABEL_38:
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v26 = (id)gLogObj;
    *(_DWORD *)tcp_info buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_endpoint_handler_get_resolution_provider";
    id v27 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v36 = 0;
    if (__nwlog_fault(v27, &type, &v36))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        char v28 = (id)gLogObj;
        os_log_type_t v29 = type;
        if (os_log_type_enabled(v28, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_handler_get_resolution_provider";
          _os_log_impl(&dword_1830D4000, v28, v29, "%{public}s Endpoint handler is not a resolver", buf, 0xCu);
        }
      }
      else if (v36)
      {
        os_log_type_t v31 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        char v28 = (id)gLogObj;
        os_log_type_t v32 = type;
        BOOL v33 = os_log_type_enabled(v28, type);
        if (v31)
        {
          if (v33)
          {
            *(_DWORD *)tcp_info buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_endpoint_handler_get_resolution_provider";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = v31;
            _os_log_impl(&dword_1830D4000, v28, v32, "%{public}s Endpoint handler is not a resolver, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v31);
          if (!v27) {
            goto LABEL_45;
          }
          goto LABEL_44;
        }
        if (v33)
        {
          *(_DWORD *)tcp_info buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_handler_get_resolution_provider";
          _os_log_impl(&dword_1830D4000, v28, v32, "%{public}s Endpoint handler is not a resolver, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        char v28 = (id)gLogObj;
        os_log_type_t v34 = type;
        if (os_log_type_enabled(v28, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_handler_get_resolution_provider";
          _os_log_impl(&dword_1830D4000, v28, v34, "%{public}s Endpoint handler is not a resolver, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
    if (!v27)
    {
LABEL_45:
      uint64_t v10 = 0;
      goto LABEL_46;
    }
LABEL_44:
    free(v27);
    goto LABEL_45;
  }
  int mode = v3->mode;

  if (mode != 1) {
    goto LABEL_38;
  }
  BOOL v6 = (id *)nw_endpoint_handler_copy_resolver(v4);
  uint64_t v7 = (const unsigned __int8 *)v6[1];
  nw_endpoint_t v8 = (unsigned __int8 *)v7;
  if (!v7)
  {
    BOOL v15 = __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_resolver_get_resolution_provider";
    os_log_type_t v16 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v36 = 0;
    if (__nwlog_fault(v16, &type, &v36))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        id v17 = __nwlog_obj();
        os_log_type_t v18 = type;
        if (os_log_type_enabled(v17, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_resolver_get_resolution_provider";
          _os_log_impl(&dword_1830D4000, v17, v18, "%{public}s called with null resolver", buf, 0xCu);
        }
      }
      else if (v36)
      {
        os_log_type_t v22 = (char *)__nw_create_backtrace_string();
        id v17 = __nwlog_obj();
        os_log_type_t v23 = type;
        BOOL v24 = os_log_type_enabled(v17, type);
        if (v22)
        {
          if (v24)
          {
            *(_DWORD *)tcp_info buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_resolver_get_resolution_provider";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = v22;
            _os_log_impl(&dword_1830D4000, v17, v23, "%{public}s called with null resolver, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v22);
          goto LABEL_65;
        }
        if (v24)
        {
          *(_DWORD *)tcp_info buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_resolver_get_resolution_provider";
          _os_log_impl(&dword_1830D4000, v17, v23, "%{public}s called with null resolver, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        id v17 = __nwlog_obj();
        os_log_type_t v35 = type;
        if (os_log_type_enabled(v17, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_resolver_get_resolution_provider";
          _os_log_impl(&dword_1830D4000, v17, v35, "%{public}s called with null resolver, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_65:
    if (v16) {
      free(v16);
    }
    uint64_t v10 = 0;
    goto LABEL_9;
  }
  if (a2 && !uuid_is_null(v7 + 232) && ((char)v8[347] & 0x80000000) == 0)
  {
    nw_endpoint_t v9 = (void *)*((void *)v8 + 25);
    *(void *)tcp_info buf = MEMORY[0x1E4F143A8];
    *(void *)&sockaddr buf[8] = 3221225472;
    *(void *)&buf[16] = __nw_resolver_get_resolution_provider_block_invoke;
    char v39 = &unk_1E523B1F8;
    int v40 = v8;
    uint64_t v41 = a2;
    nw_path_enumerate_resolver_configs(v9, buf);
  }
  uint64_t v10 = *((unsigned int *)v8 + 63);
LABEL_9:

LABEL_46:
  return v10;
}

void sub_1832F5A04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  _Unwind_Resume(a1);
}

uint64_t on_frame_send_callback(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  if (gLogDatapath)
  {
    os_log_type_t v29 = __nwlog_obj();
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
    {
      int v30 = *((unsigned __int8 *)a2 + 12);
      int v31 = *((_DWORD *)a2 + 2);
      uint64_t v32 = *a2;
      *(_DWORD *)tcp_info buf = 136446978;
      __int16 v58 = "on_frame_send_callback";
      __int16 v59 = 1024;
      *(_DWORD *)uint64_t v60 = v30;
      *(_WORD *)&v60[4] = 1024;
      *(_DWORD *)&v60[6] = v31;
      *(_WORD *)int v61 = 2048;
      *(void *)&v61[2] = v32;
      _os_log_impl(&dword_1830D4000, v29, OS_LOG_TYPE_DEBUG, "%{public}s called for frame type %u on stream %d length (no header) %zu", buf, 0x22u);
    }
  }
  int v5 = *((unsigned __int8 *)a2 + 12);
  if (v5 == 8)
  {
    if (gLogDatapath)
    {
      BOOL v33 = __nwlog_obj();
      if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
      {
        int v34 = *((_DWORD *)a2 + 2);
        int v35 = *((_DWORD *)a2 + 4);
        *(_DWORD *)tcp_info buf = 136446722;
        __int16 v58 = "on_frame_send_callback";
        __int16 v59 = 1024;
        *(_DWORD *)uint64_t v60 = v34;
        *(_WORD *)&v60[4] = 1024;
        *(_DWORD *)&v60[6] = v35;
        _os_log_impl(&dword_1830D4000, v33, OS_LOG_TYPE_DEBUG, "%{public}s sending window update frame for stream %d, window increment %d", buf, 0x18u);
      }
    }
    int v5 = *((unsigned __int8 *)a2 + 12);
  }
  if (v5) {
    return 0;
  }
  int v7 = *((_DWORD *)a2 + 2);
  if (!v7) {
    return 0;
  }
  if (!a3)
  {
    __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    __int16 v58 = "on_frame_send_callback";
    os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t v56 = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v12, type, &v56)) {
      goto LABEL_41;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      char v36 = __nwlog_obj();
      os_log_type_t v37 = type[0];
      if (!os_log_type_enabled(v36, type[0])) {
        goto LABEL_41;
      }
      *(_DWORD *)tcp_info buf = 136446210;
      __int16 v58 = "on_frame_send_callback";
      BOOL v15 = "%{public}s nghttp2 user data is NULL, not http2_transport";
    }
    else if (v56)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      char v36 = __nwlog_obj();
      os_log_type_t v37 = type[0];
      BOOL v38 = os_log_type_enabled(v36, type[0]);
      if (backtrace_string)
      {
        if (!v38) {
          goto LABEL_24;
        }
        *(_DWORD *)tcp_info buf = 136446466;
        __int16 v58 = "on_frame_send_callback";
        __int16 v59 = 2082;
        *(void *)uint64_t v60 = backtrace_string;
        os_log_type_t v18 = "%{public}s nghttp2 user data is NULL, not http2_transport, dumping backtrace:%{public}s";
        uint64_t v19 = v36;
        os_log_type_t v20 = v37;
        uint32_t v21 = 22;
        goto LABEL_23;
      }
      if (!v38) {
        goto LABEL_41;
      }
      *(_DWORD *)tcp_info buf = 136446210;
      __int16 v58 = "on_frame_send_callback";
      BOOL v15 = "%{public}s nghttp2 user data is NULL, not http2_transport, no backtrace";
    }
    else
    {
      char v36 = __nwlog_obj();
      os_log_type_t v37 = type[0];
      if (!os_log_type_enabled(v36, type[0])) {
        goto LABEL_41;
      }
      *(_DWORD *)tcp_info buf = 136446210;
      __int16 v58 = "on_frame_send_callback";
      BOOL v15 = "%{public}s nghttp2 user data is NULL, not http2_transport, backtrace limit exceeded";
    }
    id v26 = v36;
    os_log_type_t v27 = v37;
    uint32_t v28 = 12;
    goto LABEL_40;
  }
  if (*(void *)(a3 + 120))
  {
    *(void *)os_log_type_t type = 0;
    uint64_t stream_from_id = nw_http2_transport_get_stream_from_id(a3, v7, type);
    if (stream_from_id)
    {
      uint64_t v9 = stream_from_id;
      uint64_t v10 = *(void *)type;
      if (*(void *)type)
      {
        if (*(void *)(stream_from_id + 16))
        {
          nw_http2_transport_drain_next_frame_for_stream(a3, *(uint64_t *)type, stream_from_id, 0);
          return 0;
        }
        if ((*(unsigned char *)(stream_from_id + 36) & 4) != 0)
        {
          if (gLogDatapath)
          {
            BOOL v51 = __nwlog_obj();
            if (os_log_type_enabled(v51, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)tcp_info buf = 136446466;
              __int16 v58 = "on_frame_send_callback";
              __int16 v59 = 2082;
              *(void *)uint64_t v60 = a3 + 205;
              _os_log_impl(&dword_1830D4000, v51, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s sending deferred end stream", buf, 0x16u);
            }
          }
          nw_http2_transport_send_end_stream(a3, v9);
          return 0;
        }
        if (!gLogDatapath) {
          goto LABEL_99;
        }
        char v39 = __nwlog_obj();
        BOOL v40 = os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG);
        uint64_t v10 = *(void *)type;
        if (v40)
        {
          int v41 = *(_DWORD *)(v9 + 32);
          *(_DWORD *)tcp_info buf = 136446978;
          __int16 v58 = "on_frame_send_callback";
          __int16 v59 = 2082;
          *(void *)uint64_t v60 = a3 + 205;
          *(_WORD *)&v60[8] = 2048;
          *(void *)int v61 = *(void *)type;
          *(_WORD *)&v61[8] = 1024;
          int v62 = v41;
          _os_log_impl(&dword_1830D4000, v39, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s no more pending output frames, delivering output available to protocol %p for stream %d", buf, 0x26u);
          uint64_t v10 = *(void *)type;
        }
        if (v10)
        {
LABEL_99:
          uint64_t v24 = *(void *)(v10 + 24);
          if (v24)
          {
            os_log_type_t v25 = *(void (**)(uint64_t, uint64_t))(v24 + 72);
            if (v25)
            {
              v25(v10, a3);
              return 0;
            }
          }
        }
        __nwlog_obj();
        uint64_t v42 = "invalid";
        if (*(void *)type && *(void *)(*(void *)type + 16)) {
          uint64_t v42 = *(const char **)(*(void *)type + 16);
        }
        *(_DWORD *)tcp_info buf = 136446466;
        __int16 v58 = "on_frame_send_callback";
        __int16 v59 = 2082;
        *(void *)uint64_t v60 = v42;
        __int16 v43 = (char *)_os_log_send_and_compose_impl();
        os_log_type_t v56 = OS_LOG_TYPE_ERROR;
        char v54 = 0;
        if (__nwlog_fault(v43, &v56, &v54))
        {
          if (v56 == OS_LOG_TYPE_FAULT)
          {
            os_log_type_t v44 = __nwlog_obj();
            os_log_type_t v45 = v56;
            if (!os_log_type_enabled(v44, v56)) {
              goto LABEL_95;
            }
            int v46 = "invalid";
            if (*(void *)type && *(void *)(*(void *)type + 16)) {
              int v46 = *(const char **)(*(void *)type + 16);
            }
            *(_DWORD *)tcp_info buf = 136446466;
            __int16 v58 = "on_frame_send_callback";
            __int16 v59 = 2082;
            *(void *)uint64_t v60 = v46;
            __int16 v47 = "%{public}s protocol %{public}s has invalid output_available callback";
            goto LABEL_94;
          }
          if (!v54)
          {
            os_log_type_t v44 = __nwlog_obj();
            os_log_type_t v45 = v56;
            if (!os_log_type_enabled(v44, v56)) {
              goto LABEL_95;
            }
            os_log_type_t v52 = "invalid";
            if (*(void *)type && *(void *)(*(void *)type + 16)) {
              os_log_type_t v52 = *(const char **)(*(void *)type + 16);
            }
            *(_DWORD *)tcp_info buf = 136446466;
            __int16 v58 = "on_frame_send_callback";
            __int16 v59 = 2082;
            *(void *)uint64_t v60 = v52;
            __int16 v47 = "%{public}s protocol %{public}s has invalid output_available callback, backtrace limit exceeded";
            goto LABEL_94;
          }
          os_log_type_t v48 = (char *)__nw_create_backtrace_string();
          os_log_type_t v44 = __nwlog_obj();
          os_log_type_t v45 = v56;
          BOOL v49 = os_log_type_enabled(v44, v56);
          if (v48)
          {
            if (v49)
            {
              os_log_type_t v50 = "invalid";
              if (*(void *)type && *(void *)(*(void *)type + 16)) {
                os_log_type_t v50 = *(const char **)(*(void *)type + 16);
              }
              *(_DWORD *)tcp_info buf = 136446722;
              __int16 v58 = "on_frame_send_callback";
              __int16 v59 = 2082;
              *(void *)uint64_t v60 = v50;
              *(_WORD *)&v60[8] = 2082;
              *(void *)int v61 = v48;
              _os_log_impl(&dword_1830D4000, v44, v45, "%{public}s protocol %{public}s has invalid output_available callback, dumping backtrace:%{public}s", buf, 0x20u);
            }
            free(v48);
            goto LABEL_95;
          }
          if (v49)
          {
            uint64_t v53 = "invalid";
            if (*(void *)type && *(void *)(*(void *)type + 16)) {
              uint64_t v53 = *(const char **)(*(void *)type + 16);
            }
            *(_DWORD *)tcp_info buf = 136446466;
            __int16 v58 = "on_frame_send_callback";
            __int16 v59 = 2082;
            *(void *)uint64_t v60 = v53;
            __int16 v47 = "%{public}s protocol %{public}s has invalid output_available callback, no backtrace";
LABEL_94:
            _os_log_impl(&dword_1830D4000, v44, v45, v47, buf, 0x16u);
          }
        }
LABEL_95:
        if (v43) {
          free(v43);
        }
        return 0;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v22 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        int v23 = *(_DWORD *)(v9 + 32);
        *(_DWORD *)tcp_info buf = 136446978;
        __int16 v58 = "on_frame_send_callback";
        __int16 v59 = 2082;
        *(void *)uint64_t v60 = a3 + 205;
        *(_WORD *)&v60[8] = 2048;
        *(void *)int v61 = v9;
        *(_WORD *)&v61[8] = 1024;
        int v62 = v23;
        _os_log_impl(&dword_1830D4000, v22, OS_LOG_TYPE_ERROR, "%{public}s %{public}s stream (%pm %u) did not have protocol extra", buf, 0x26u);
      }
    }
    return 4294966775;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  uint64_t v11 = a3 + 205;
  *(_DWORD *)tcp_info buf = 136446466;
  __int16 v58 = "on_frame_send_callback";
  __int16 v59 = 2082;
  *(void *)uint64_t v60 = a3 + 205;
  os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();
  type[0] = OS_LOG_TYPE_ERROR;
  os_log_type_t v56 = OS_LOG_TYPE_DEFAULT;
  if (!__nwlog_fault(v12, type, &v56)) {
    goto LABEL_41;
  }
  if (type[0] == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v13 = gLogObj;
    os_log_type_t v14 = type[0];
    if (os_log_type_enabled((os_log_t)gLogObj, type[0]))
    {
      *(_DWORD *)tcp_info buf = 136446466;
      __int16 v58 = "on_frame_send_callback";
      __int16 v59 = 2082;
      *(void *)uint64_t v60 = v11;
      BOOL v15 = "%{public}s %{public}s id based hash table has not yet been created, failing connection";
LABEL_39:
      id v26 = v13;
      os_log_type_t v27 = v14;
      uint32_t v28 = 22;
LABEL_40:
      _os_log_impl(&dword_1830D4000, v26, v27, v15, buf, v28);
      goto LABEL_41;
    }
    goto LABEL_41;
  }
  if (v56)
  {
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v13 = gLogObj;
    os_log_type_t v14 = type[0];
    BOOL v17 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
    if (!backtrace_string)
    {
      if (v17)
      {
        *(_DWORD *)tcp_info buf = 136446466;
        __int16 v58 = "on_frame_send_callback";
        __int16 v59 = 2082;
        *(void *)uint64_t v60 = v11;
        BOOL v15 = "%{public}s %{public}s id based hash table has not yet been created, failing connection, no backtrace";
        goto LABEL_39;
      }
      goto LABEL_41;
    }
    if (!v17)
    {
LABEL_24:
      free(backtrace_string);
      goto LABEL_41;
    }
    *(_DWORD *)tcp_info buf = 136446722;
    __int16 v58 = "on_frame_send_callback";
    __int16 v59 = 2082;
    *(void *)uint64_t v60 = v11;
    *(_WORD *)&v60[8] = 2082;
    *(void *)int v61 = backtrace_string;
    os_log_type_t v18 = "%{public}s %{public}s id based hash table has not yet been created, failing connection, dumping backtrace:%{public}s";
    uint64_t v19 = v13;
    os_log_type_t v20 = v14;
    uint32_t v21 = 32;
LABEL_23:
    _os_log_impl(&dword_1830D4000, v19, v20, v18, buf, v21);
    goto LABEL_24;
  }
  BOOL v13 = __nwlog_obj();
  os_log_type_t v14 = type[0];
  if (os_log_type_enabled(v13, type[0]))
  {
    *(_DWORD *)tcp_info buf = 136446466;
    __int16 v58 = "on_frame_send_callback";
    __int16 v59 = 2082;
    *(void *)uint64_t v60 = v11;
    BOOL v15 = "%{public}s %{public}s id based hash table has not yet been created, failing connection, backtrace limit exceeded";
    goto LABEL_39;
  }
LABEL_41:
  if (v12) {
    free(v12);
  }
  return 4294966394;
}

{
  unsigned int v5;
  int v6;
  uint64_t result;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  int v16;
  int v17;
  const char *v18;
  NSObject *v19;
  os_log_type_t v20;
  int v21;
  const char *v22;
  uint64_t v23;
  int v24;
  int v25;
  const char *v26;
  NSObject *v27;
  os_log_type_t v28;
  uint32_t v29;
  char *v30;
  BOOL v31;
  int v32;
  NSObject *v33;
  int v34;
  int v35;
  int v36;
  int v37;
  char *v38;
  unint64_t v39;
  int8x8_t v40;
  uint8x8_t v41;
  unint64_t v42;
  void *v43;
  void *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  int v51;
  NSObject *v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  NSObject *v57;
  int v58;
  int v59;
  uint64_t v60;
  NSObject *v61;
  int v62;
  int v63;
  const char *v64;
  NSObject *v65;
  os_log_type_t v66;
  const char *v67;
  char *backtrace_string;
  BOOL v69;
  NSObject *v70;
  int v71;
  BOOL v72;
  NSObject *v73;
  int v74;
  int v75;
  NSObject *v76;
  uint64_t v77;
  NSObject *v78;
  int v79;
  int v80;
  NSObject *v81;
  int v82;
  int v83;
  os_log_type_t type[15];
  char v85;
  uint8_t buf[4];
  const char *v87;
  __int16 v88;
  unsigned char v89[10];
  unsigned char v90[10];
  unsigned char v91[26];
  uint64_t v92;

  BOOL v92 = *MEMORY[0x1E4F143B8];
  if (gLogDatapath)
  {
    nw_protocol_options_t v57 = __nwlog_obj();
    if (os_log_type_enabled(v57, OS_LOG_TYPE_DEBUG))
    {
      __int16 v58 = *((unsigned __int8 *)a2 + 12);
      __int16 v59 = *((_DWORD *)a2 + 2);
      uint64_t v60 = *a2;
      *(_DWORD *)tcp_info buf = 136446978;
      uint64_t v87 = "on_frame_send_callback";
      id v88 = 1024;
      *(_DWORD *)os_log_type_t v89 = v58;
      *(_WORD *)&v89[4] = 1024;
      *(_DWORD *)&v89[6] = v59;
      *(_WORD *)uint32_t v90 = 2048;
      *(void *)&v90[2] = v60;
      _os_log_impl(&dword_1830D4000, v57, OS_LOG_TYPE_DEBUG, "%{public}s called for frame type %u on stream %d length (no header) %zu", buf, 0x22u);
    }
  }
  int v5 = *((unsigned __int8 *)a2 + 12);
  if (v5 == 8)
  {
    if (gLogDatapath)
    {
      int v61 = __nwlog_obj();
      if (os_log_type_enabled(v61, OS_LOG_TYPE_DEBUG))
      {
        int v62 = *((_DWORD *)a2 + 2);
        uint64_t v63 = *((_DWORD *)a2 + 4);
        *(_DWORD *)tcp_info buf = 136446722;
        uint64_t v87 = "on_frame_send_callback";
        id v88 = 1024;
        *(_DWORD *)os_log_type_t v89 = v62;
        *(_WORD *)&v89[4] = 1024;
        *(_DWORD *)&v89[6] = v63;
        _os_log_impl(&dword_1830D4000, v61, OS_LOG_TYPE_DEBUG, "%{public}s sending window update frame for stream %d, window increment %d", buf, 0x18u);
      }
    }
    int v5 = *((unsigned __int8 *)a2 + 12);
  }
  if (v5 > 1) {
    goto LABEL_73;
  }
  BOOL v6 = *((_DWORD *)a2 + 2);
  if (!v6) {
    return 0;
  }
  if (!a3)
  {
    __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    uint64_t v87 = "on_frame_send_callback";
    int v64 = (const char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    int v85 = 0;
    if (!__nwlog_fault(v64, type, &v85)) {
      goto LABEL_157;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      uint64_t v65 = __nwlog_obj();
      uint64_t v66 = type[0];
      if (os_log_type_enabled(v65, type[0]))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint64_t v87 = "on_frame_send_callback";
        int v67 = "%{public}s nghttp2 user data is NULL, not http2";
LABEL_156:
        _os_log_impl(&dword_1830D4000, v65, v66, v67, buf, 0xCu);
      }
LABEL_157:
      if (!v64) {
        return 4294966394;
      }
      BOOL v38 = (char *)v64;
      goto LABEL_68;
    }
    if (!v85)
    {
      uint64_t v65 = __nwlog_obj();
      uint64_t v66 = type[0];
      if (os_log_type_enabled(v65, type[0]))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint64_t v87 = "on_frame_send_callback";
        int v67 = "%{public}s nghttp2 user data is NULL, not http2, backtrace limit exceeded";
        goto LABEL_156;
      }
      goto LABEL_157;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v65 = __nwlog_obj();
    uint64_t v66 = type[0];
    uint64_t v69 = os_log_type_enabled(v65, type[0]);
    if (!backtrace_string)
    {
      if (v69)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint64_t v87 = "on_frame_send_callback";
        int v67 = "%{public}s nghttp2 user data is NULL, not http2, no backtrace";
        goto LABEL_156;
      }
      goto LABEL_157;
    }
    if (v69) {
      goto LABEL_142;
    }
    goto LABEL_143;
  }
  if (!*(void *)(a3 + 160))
  {
    if (*(__int16 *)(a3 + 388) < 0) {
      return 4294966394;
    }
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
    }
    BOOL v17 = *(_DWORD *)(a3 + 368);
    *(_DWORD *)tcp_info buf = 136446978;
    uint64_t v87 = "on_frame_send_callback";
    id v88 = 2082;
    *(void *)os_log_type_t v89 = a3 + 390;
    *(_WORD *)&v89[8] = 2080;
    *(void *)uint32_t v90 = " ";
    *(_WORD *)&v90[8] = 1024;
    *(_DWORD *)id v91 = v17;
    os_log_type_t v18 = (const char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    int v85 = 0;
    if (__nwlog_fault(v18, type, &v85))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        uint64_t v19 = gconnectionLogObj;
        os_log_type_t v20 = type[0];
        if (os_log_type_enabled((os_log_t)gconnectionLogObj, type[0]))
        {
          uint32_t v21 = *(_DWORD *)(a3 + 368);
          *(_DWORD *)tcp_info buf = 136446978;
          uint64_t v87 = "on_frame_send_callback";
          id v88 = 2082;
          *(void *)os_log_type_t v89 = a3 + 390;
          *(_WORD *)&v89[8] = 2080;
          *(void *)uint32_t v90 = " ";
          *(_WORD *)&v90[8] = 1024;
          *(_DWORD *)id v91 = v21;
          os_log_type_t v22 = "%{public}s %{public}s%s<i%u> id based hash table has not yet been created, failing connection";
LABEL_65:
          _os_log_impl(&dword_1830D4000, v19, v20, v22, buf, 0x26u);
        }
      }
      else if (v85)
      {
        int v30 = (char *)__nw_create_backtrace_string();
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        uint64_t v19 = gconnectionLogObj;
        os_log_type_t v20 = type[0];
        int v31 = os_log_type_enabled((os_log_t)gconnectionLogObj, type[0]);
        if (!v30)
        {
          if (!v31) {
            goto LABEL_66;
          }
          os_log_type_t v37 = *(_DWORD *)(a3 + 368);
          *(_DWORD *)tcp_info buf = 136446978;
          uint64_t v87 = "on_frame_send_callback";
          id v88 = 2082;
          *(void *)os_log_type_t v89 = a3 + 390;
          *(_WORD *)&v89[8] = 2080;
          *(void *)uint32_t v90 = " ";
          *(_WORD *)&v90[8] = 1024;
          *(_DWORD *)id v91 = v37;
          os_log_type_t v22 = "%{public}s %{public}s%s<i%u> id based hash table has not yet been created, failing connection, no backtrace";
          goto LABEL_65;
        }
        if (v31)
        {
          uint64_t v32 = *(_DWORD *)(a3 + 368);
          *(_DWORD *)tcp_info buf = 136447234;
          uint64_t v87 = "on_frame_send_callback";
          id v88 = 2082;
          *(void *)os_log_type_t v89 = a3 + 390;
          *(_WORD *)&v89[8] = 2080;
          *(void *)uint32_t v90 = " ";
          *(_WORD *)&v90[8] = 1024;
          *(_DWORD *)id v91 = v32;
          *(_WORD *)&v91[4] = 2082;
          *(void *)&v91[6] = v30;
          _os_log_impl(&dword_1830D4000, v19, v20, "%{public}s %{public}s%s<i%u> id based hash table has not yet been created, failing connection, dumping backtrace:%{public}s", buf, 0x30u);
        }
        free(v30);
      }
      else
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        uint64_t v19 = gconnectionLogObj;
        os_log_type_t v20 = type[0];
        if (os_log_type_enabled((os_log_t)gconnectionLogObj, type[0]))
        {
          char v36 = *(_DWORD *)(a3 + 368);
          *(_DWORD *)tcp_info buf = 136446978;
          uint64_t v87 = "on_frame_send_callback";
          id v88 = 2082;
          *(void *)os_log_type_t v89 = a3 + 390;
          *(_WORD *)&v89[8] = 2080;
          *(void *)uint32_t v90 = " ";
          *(_WORD *)&v90[8] = 1024;
          *(_DWORD *)id v91 = v36;
          os_log_type_t v22 = "%{public}s %{public}s%s<i%u> id based hash table has not yet been created, failing connection, backtrace limit exceeded";
          goto LABEL_65;
        }
      }
    }
LABEL_66:
    if (v18)
    {
      BOOL v38 = (char *)v18;
LABEL_68:
      free(v38);
    }
    return 4294966394;
  }
  *(void *)os_log_type_t type = 0;
  uint64_t result = nw_http2_get_stream_from_id(a3, v6, type);
  if (result)
  {
    nw_endpoint_t v8 = result;
    if (!*(void *)type)
    {
      if (((*(unsigned __int16 *)(result + 188) | (*(unsigned __int8 *)(result + 190) << 16)) & 0x80000) == 0)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        BOOL v33 = gconnectionLogObj;
        if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
        {
          int v35 = *(_DWORD *)(v8 + 176);
          int v34 = *(_DWORD *)(v8 + 180);
          *(_DWORD *)tcp_info buf = 136447746;
          uint64_t v87 = "on_frame_send_callback";
          id v88 = 2082;
          *(void *)os_log_type_t v89 = v8 + 191;
          *(_WORD *)&v89[8] = 2080;
          *(void *)uint32_t v90 = " ";
          *(_WORD *)&v90[8] = 1024;
          *(_DWORD *)id v91 = v34;
          *(_WORD *)&v91[4] = 1024;
          *(_DWORD *)&v91[6] = v35;
          *(_WORD *)&v91[10] = 2048;
          *(void *)&v91[12] = v8;
          *(_WORD *)&v91[20] = 1024;
          *(_DWORD *)&v91[22] = v35;
          _os_log_impl(&dword_1830D4000, v33, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u:s%d> stream (%pm %d) did not have protocol extra", buf, 0x3Cu);
          return 4294966394;
        }
      }
      return 4294966394;
    }
    uint64_t v9 = *((unsigned __int8 *)a2 + 12);
    if (v9 == 1)
    {
      *(void *)(result + 128) = *(void *)(result + 120);
      nw_http_transaction_metadata_increment_outbound_header_size(*(void **)(result + 96), 9 * ((unint64_t)(*a2 + 0x3FFF) >> 14) + *a2);
      uint64_t v10 = *(unsigned __int16 *)(v8 + 188);
      uint64_t v11 = v10 | (*(unsigned __int8 *)(v8 + 190) << 16);
      if ((v10 & 0x2000) != 0)
      {
        *(unsigned char *)(v8 + 190) = BYTE2(v11);
        *(_WORD *)(v8 + 188) = v11 & 0xDEFF;
        os_log_type_t v12 = *(void **)(v8 + 104);
        if (v12)
        {
          os_release(v12);
          *(void *)(v8 + 104) = 0;
        }
      }
      uint64_t v9 = *((unsigned __int8 *)a2 + 12);
    }
    if (!v9)
    {
      nw_http_transaction_metadata_increment_outbound_body_transfer_size(*(void **)(v8 + 96), *a2 + 9);
      BOOL v13 = *a2;
      os_log_type_t v14 = *(void *)(v8 + 56);
      BOOL v15 = __CFADD__(v14, *a2);
      *(void *)(v8 + 56) = v14 + *a2;
      if (v15)
      {
        if (gLogDatapath)
        {
          __int16 v76 = __nwlog_obj();
          if (os_log_type_enabled(v76, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v77 = *(void *)(v8 + 56);
            *(_DWORD *)tcp_info buf = 136446978;
            uint64_t v87 = "increment_outbound_body_size";
            id v88 = 2082;
            *(void *)os_log_type_t v89 = "outbound_body_size";
            *(_WORD *)&v89[8] = 2048;
            *(void *)uint32_t v90 = v13;
            *(_WORD *)&v90[8] = 2048;
            *(void *)id v91 = v77;
            _os_log_impl(&dword_1830D4000, v76, OS_LOG_TYPE_DEBUG, "%{public}s Overflow: %{public}s, increment %llu, result %llu", buf, 0x2Au);
          }
        }
        *(void *)(v8 + 56) = -1;
      }
    }
    if (*((unsigned char *)a2 + 13))
    {
      if (((*(unsigned __int16 *)(v8 + 188) | (*(unsigned __int8 *)(v8 + 190) << 16)) & 0x80000) == 0 && gLogDatapath)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        uint64_t v73 = gconnectionLogObj;
        if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v75 = *(_DWORD *)(v8 + 176);
          uint64_t v74 = *(_DWORD *)(v8 + 180);
          *(_DWORD *)tcp_info buf = 136447490;
          uint64_t v87 = "on_frame_send_callback";
          id v88 = 2082;
          *(void *)os_log_type_t v89 = v8 + 191;
          *(_WORD *)&v89[8] = 2080;
          *(void *)uint32_t v90 = " ";
          *(_WORD *)&v90[8] = 1024;
          *(_DWORD *)id v91 = v74;
          *(_WORD *)&v91[4] = 1024;
          *(_DWORD *)&v91[6] = v75;
          *(_WORD *)&v91[10] = 1024;
          *(_DWORD *)&v91[12] = v75;
          _os_log_impl(&dword_1830D4000, v73, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%d> stream %d end stream flag set, marking outbound message complete", buf, 0x32u);
        }
      }
      *(_WORD *)(v8 + 188) |= 0x4000u;
      nw_http_transaction_metadata_mark_outbound_message_end(*(void **)(v8 + 96));
      if (*(unsigned char *)(v8 + 48))
      {
        if (*(void *)(v8 + 40) != *(void *)(v8 + 56))
        {
          os_log_type_t v50 = *(unsigned __int16 *)(v8 + 188);
          BOOL v51 = v50 | (*(unsigned __int8 *)(v8 + 190) << 16);
          if ((v50 & 0x40) == 0)
          {
            *(unsigned char *)(v8 + 190) = BYTE2(v51);
            *(_WORD *)(v8 + 188) = v51 | 0x40;
            if ((*(__int16 *)(a3 + 388) & 0x80000000) == 0)
            {
              if (__nwlog_connection_log::onceToken != -1) {
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
              }
              os_log_type_t v52 = gconnectionLogObj;
              if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
              {
                uint64_t v53 = *(_DWORD *)(a3 + 368);
                if (*(unsigned char *)(v8 + 48)) {
                  char v54 = *(void *)(v8 + 40);
                }
                else {
                  char v54 = -1;
                }
                os_log_type_t v56 = *(void *)(v8 + 56);
                *(_DWORD *)tcp_info buf = 136447490;
                uint64_t v87 = "on_frame_send_callback";
                id v88 = 2082;
                *(void *)os_log_type_t v89 = a3 + 390;
                *(_WORD *)&v89[8] = 2080;
                *(void *)uint32_t v90 = " ";
                *(_WORD *)&v90[8] = 1024;
                *(_DWORD *)id v91 = v53;
                *(_WORD *)&v91[4] = 2048;
                *(void *)&v91[6] = v54;
                *(_WORD *)&v91[14] = 2048;
                *(void *)&v91[16] = v56;
                _os_log_impl(&dword_1830D4000, v52, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u> Content length header %llu does not equal body size %llu", buf, 0x3Au);
              }
            }
            nw_protocol_error(*(void **)type, a3);
            nw_protocol_disconnected(*(void **)type, a3);
          }
          return 0;
        }
      }
    }
    if (!*(void *)(v8 + 16))
    {
      os_log_type_t v16 = (*(unsigned __int8 *)(v8 + 190) >> 3) & 1;
      if (!gLogDatapath) {
        LOBYTE(v16) = 1;
      }
      if ((*(_WORD *)(v8 + 188) & 0x10) != 0)
      {
        if ((v16 & 1) == 0)
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          __int16 v81 = gconnectionLogObj;
          if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
          {
            os_log_type_t v83 = *(_DWORD *)(v8 + 176);
            __int16 v82 = *(_DWORD *)(v8 + 180);
            *(_DWORD *)tcp_info buf = 136447234;
            uint64_t v87 = "on_frame_send_callback";
            id v88 = 2082;
            *(void *)os_log_type_t v89 = v8 + 191;
            *(_WORD *)&v89[8] = 2080;
            *(void *)uint32_t v90 = " ";
            *(_WORD *)&v90[8] = 1024;
            *(_DWORD *)id v91 = v82;
            *(_WORD *)&v91[4] = 1024;
            *(_DWORD *)&v91[6] = v83;
            _os_log_impl(&dword_1830D4000, v81, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%d> sending deferred end stream", buf, 0x2Cu);
          }
        }
        nw_http2_send_end_stream(a3, v8);
      }
      else
      {
        if ((v16 & 1) == 0)
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          int v78 = gconnectionLogObj;
          if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
          {
            int v80 = *(_DWORD *)(v8 + 176);
            os_log_type_t v79 = *(_DWORD *)(v8 + 180);
            *(_DWORD *)tcp_info buf = 136447746;
            uint64_t v87 = "on_frame_send_callback";
            id v88 = 2082;
            *(void *)os_log_type_t v89 = v8 + 191;
            *(_WORD *)&v89[8] = 2080;
            *(void *)uint32_t v90 = " ";
            *(_WORD *)&v90[8] = 1024;
            *(_DWORD *)id v91 = v79;
            *(_WORD *)&v91[4] = 1024;
            *(_DWORD *)&v91[6] = v80;
            *(_WORD *)&v91[10] = 2048;
            *(void *)&v91[12] = *(void *)type;
            *(_WORD *)&v91[20] = 1024;
            *(_DWORD *)&v91[22] = v80;
            _os_log_impl(&dword_1830D4000, v78, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%d> no more written output frames, pending output available to protocol %p for stream %d", buf, 0x3Cu);
          }
        }
        nw_http2_set_stream_output_available_pending(a3, v8, 1);
      }
    }
    int v5 = *((unsigned __int8 *)a2 + 12);
LABEL_73:
    if (v5 != 6 || (*((unsigned char *)a2 + 13) & 1) != 0) {
      return 0;
    }
    if (a3)
    {
      char v39 = a2[2];
      if ((*(__int16 *)(a3 + 388) & 0x80000000) == 0 && gLogDatapath)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        uint64_t v70 = gconnectionLogObj;
        if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
        {
          char v71 = *(_DWORD *)(a3 + 368);
          *(_DWORD *)tcp_info buf = 136447234;
          uint64_t v87 = "nw_http2_sending_ping";
          id v88 = 2082;
          *(void *)os_log_type_t v89 = a3 + 390;
          *(_WORD *)&v89[8] = 2080;
          *(void *)uint32_t v90 = " ";
          *(_WORD *)&v90[8] = 1024;
          *(_DWORD *)id v91 = v71;
          *(_WORD *)&v91[4] = 2048;
          *(void *)&v91[6] = v39;
          _os_log_impl(&dword_1830D4000, v70, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> seq %llu", buf, 0x30u);
        }
      }
      BOOL v40 = *(int8x8_t *)(a3 + 320);
      if (v40)
      {
        int v41 = (uint8x8_t)vcnt_s8(v40);
        v41.i16[0] = vaddlv_u8(v41);
        if (v41.u32[0] > 1uLL)
        {
          uint64_t v42 = v39;
          if (*(void *)&v40 <= v39) {
            uint64_t v42 = v39 % *(void *)&v40;
          }
        }
        else
        {
          uint64_t v42 = (*(void *)&v40 - 1) & v39;
        }
        __int16 v43 = *(void **)(*(void *)(a3 + 312) + 8 * v42);
        if (v43)
        {
          os_log_type_t v44 = (void *)*v43;
          if (*v43)
          {
            if (v41.u32[0] < 2uLL)
            {
              os_log_type_t v45 = *(void *)&v40 - 1;
              while (1)
              {
                __int16 v47 = v44[1];
                if (v47 == v39)
                {
                  if (v44[2] == v39) {
                    goto LABEL_113;
                  }
                }
                else if ((v47 & v45) != v42)
                {
                  goto LABEL_98;
                }
                os_log_type_t v44 = (void *)*v44;
                if (!v44) {
                  goto LABEL_98;
                }
              }
            }
            do
            {
              int v46 = v44[1];
              if (v46 == v39)
              {
                if (v44[2] == v39)
                {
LABEL_113:
                  BOOL v55 = mach_continuous_time();
                  uint64_t result = 0;
                  if (v55 <= 1) {
                    BOOL v55 = 1;
                  }
                  v44[3] = v55;
                  return result;
                }
              }
              else
              {
                if (v46 >= *(void *)&v40) {
                  v46 %= *(void *)&v40;
                }
                if (v46 != v42) {
                  break;
                }
              }
              os_log_type_t v44 = (void *)*v44;
            }
            while (v44);
          }
        }
      }
LABEL_98:
      if ((*(__int16 *)(a3 + 388) & 0x80000000) == 0)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        os_log_type_t v48 = gconnectionLogObj;
        uint64_t result = os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR);
        if (!result) {
          return result;
        }
        BOOL v49 = *(_DWORD *)(a3 + 368);
        *(_DWORD *)tcp_info buf = 136447234;
        uint64_t v87 = "nw_http2_sending_ping";
        id v88 = 2082;
        *(void *)os_log_type_t v89 = a3 + 390;
        *(_WORD *)&v89[8] = 2080;
        *(void *)uint32_t v90 = " ";
        *(_WORD *)&v90[8] = 1024;
        *(_DWORD *)id v91 = v49;
        *(_WORD *)&v91[4] = 2048;
        *(void *)&v91[6] = v39;
        id v26 = "%{public}s %{public}s%s<i%u> unrecognized ping data %llu";
        os_log_type_t v27 = v48;
        uint32_t v28 = OS_LOG_TYPE_ERROR;
        os_log_type_t v29 = 48;
        goto LABEL_103;
      }
      return 0;
    }
    __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    uint64_t v87 = "on_frame_send_callback";
    int v64 = (const char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    int v85 = 0;
    if (!__nwlog_fault(v64, type, &v85)) {
      goto LABEL_157;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      uint64_t v65 = __nwlog_obj();
      uint64_t v66 = type[0];
      if (os_log_type_enabled(v65, type[0]))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint64_t v87 = "on_frame_send_callback";
        int v67 = "%{public}s nghttp2 user data is NULL, not http2";
        goto LABEL_156;
      }
      goto LABEL_157;
    }
    if (!v85)
    {
      uint64_t v65 = __nwlog_obj();
      uint64_t v66 = type[0];
      if (os_log_type_enabled(v65, type[0]))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint64_t v87 = "on_frame_send_callback";
        int v67 = "%{public}s nghttp2 user data is NULL, not http2, backtrace limit exceeded";
        goto LABEL_156;
      }
      goto LABEL_157;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v65 = __nwlog_obj();
    uint64_t v66 = type[0];
    os_log_type_t v72 = os_log_type_enabled(v65, type[0]);
    if (!backtrace_string)
    {
      if (v72)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint64_t v87 = "on_frame_send_callback";
        int v67 = "%{public}s nghttp2 user data is NULL, not http2, no backtrace";
        goto LABEL_156;
      }
      goto LABEL_157;
    }
    if (v72)
    {
LABEL_142:
      *(_DWORD *)tcp_info buf = 136446466;
      uint64_t v87 = "on_frame_send_callback";
      id v88 = 2082;
      *(void *)os_log_type_t v89 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v65, v66, "%{public}s nghttp2 user data is NULL, not http2, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_143:
    free(backtrace_string);
    goto LABEL_157;
  }
  if ((*(__int16 *)(a3 + 388) & 0x80000000) == 0 && gLogDatapath)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
    }
    int v23 = gconnectionLogObj;
    uint64_t result = os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG);
    if (result)
    {
      uint64_t v24 = *(_DWORD *)(a3 + 368);
      os_log_type_t v25 = *((_DWORD *)a2 + 2);
      *(_DWORD *)tcp_info buf = 136447234;
      uint64_t v87 = "on_frame_send_callback";
      id v88 = 2082;
      *(void *)os_log_type_t v89 = a3 + 390;
      *(_WORD *)&v89[8] = 2080;
      *(void *)uint32_t v90 = " ";
      *(_WORD *)&v90[8] = 1024;
      *(_DWORD *)id v91 = v24;
      *(_WORD *)&v91[4] = 1024;
      *(_DWORD *)&v91[6] = v25;
      id v26 = "%{public}s %{public}s%s<i%u> failed to find stream %d";
      os_log_type_t v27 = v23;
      uint32_t v28 = OS_LOG_TYPE_DEBUG;
      os_log_type_t v29 = 44;
LABEL_103:
      _os_log_impl(&dword_1830D4000, v27, v28, v26, buf, v29);
      return 0;
    }
  }
  return result;
}

void nw_flow_output_available(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  handle = (nw_flow_protocol *)a1->handle;
  uint64_t v3 = handle->handler;
  id v4 = v3;
  if (!v3)
  {
    uint64_t v10 = __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    os_log_type_t v29 = "nw_flow_output_available";
    uint64_t v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (__nwlog_fault(v11, &type, &v26))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v12 = __nwlog_obj();
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          os_log_type_t v29 = "nw_flow_output_available";
          _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s called with null handler", buf, 0xCu);
        }
      }
      else if (v26)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v12 = __nwlog_obj();
        os_log_type_t v19 = type;
        BOOL v20 = os_log_type_enabled(v12, type);
        if (backtrace_string)
        {
          if (v20)
          {
            *(_DWORD *)tcp_info buf = 136446466;
            os_log_type_t v29 = "nw_flow_output_available";
            __int16 v30 = 2082;
            int v31 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v12, v19, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_39;
        }
        if (v20)
        {
          *(_DWORD *)tcp_info buf = 136446210;
          os_log_type_t v29 = "nw_flow_output_available";
          _os_log_impl(&dword_1830D4000, v12, v19, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        os_log_type_t v12 = __nwlog_obj();
        os_log_type_t v24 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          os_log_type_t v29 = "nw_flow_output_available";
          _os_log_impl(&dword_1830D4000, v12, v24, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_39:
    if (v11) {
      free(v11);
    }
    goto LABEL_12;
  }
  int v5 = v3;
  uint64_t mode = v5->mode;

  if (mode == 2)
  {
    int v7 = nw_endpoint_handler_copy_flow(v5);
    if (v7)
    {
      nw_flow_service_writes(v5, (NWConcrete_nw_endpoint_flow *)v7, handle);
LABEL_5:

      goto LABEL_12;
    }
    os_log_type_t v14 = __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    os_log_type_t v29 = "nw_flow_output_available";
    BOOL v15 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (__nwlog_fault(v15, &type, &v26))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v16 = __nwlog_obj();
        os_log_type_t v17 = type;
        if (os_log_type_enabled(v16, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          os_log_type_t v29 = "nw_flow_output_available";
          _os_log_impl(&dword_1830D4000, v16, v17, "%{public}s called with null endpoint_flow", buf, 0xCu);
        }
      }
      else if (v26)
      {
        uint32_t v21 = (char *)__nw_create_backtrace_string();
        os_log_type_t v16 = __nwlog_obj();
        os_log_type_t v22 = type;
        BOOL v23 = os_log_type_enabled(v16, type);
        if (v21)
        {
          if (v23)
          {
            *(_DWORD *)tcp_info buf = 136446466;
            os_log_type_t v29 = "nw_flow_output_available";
            __int16 v30 = 2082;
            int v31 = v21;
            _os_log_impl(&dword_1830D4000, v16, v22, "%{public}s called with null endpoint_flow, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v21);
          goto LABEL_47;
        }
        if (v23)
        {
          *(_DWORD *)tcp_info buf = 136446210;
          os_log_type_t v29 = "nw_flow_output_available";
          _os_log_impl(&dword_1830D4000, v16, v22, "%{public}s called with null endpoint_flow, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        os_log_type_t v16 = __nwlog_obj();
        os_log_type_t v25 = type;
        if (os_log_type_enabled(v16, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          os_log_type_t v29 = "nw_flow_output_available";
          _os_log_impl(&dword_1830D4000, v16, v25, "%{public}s called with null endpoint_flow, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_47:
    if (v15) {
      free(v15);
    }
    goto LABEL_5;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  nw_endpoint_t v8 = (id)gLogObj;
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    if (mode > 5) {
      uint64_t v9 = "unknown-mode";
    }
    else {
      uint64_t v9 = off_1E523FB08[mode];
    }
    *(_DWORD *)tcp_info buf = 136446722;
    os_log_type_t v29 = "nw_flow_output_available";
    __int16 v30 = 2082;
    int v31 = (void *)v9;
    __int16 v32 = 2082;
    BOOL v33 = "flow";
    _os_log_impl(&dword_1830D4000, v8, OS_LOG_TYPE_DEFAULT, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
  }

LABEL_12:
}

void sub_1832F69E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_protocol_definition_set_supports_discontiguous_data(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    if (a2) {
      char v5 = 32;
    }
    else {
      char v5 = 0;
    }
    *((unsigned char *)v3 + 184) = *((unsigned char *)v3 + 184) & 0xDF | v5;
    goto LABEL_6;
  }
  BOOL v6 = __nwlog_obj();
  *(_DWORD *)tcp_info buf = 136446210;
  os_log_type_t v17 = "nw_protocol_definition_set_supports_discontiguous_data";
  int v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      nw_endpoint_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v17 = "nw_protocol_definition_set_supports_discontiguous_data";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null definition", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      nw_endpoint_t v8 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          os_log_type_t v17 = "nw_protocol_definition_set_supports_discontiguous_data";
          __int16 v18 = 2082;
          os_log_type_t v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null definition, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v12)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v17 = "nw_protocol_definition_set_supports_discontiguous_data";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null definition, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      nw_endpoint_t v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v17 = "nw_protocol_definition_set_supports_discontiguous_data";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null definition, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_23:
  if (v7) {
    free(v7);
  }
LABEL_6:
}

void nw_protocol_definition_set_stop(void *a1, void *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    nw_protocol_definition_initialize_extended_state(v3);
    v4->extended_state->var16 = a2;
    goto LABEL_3;
  }
  char v5 = __nwlog_obj();
  *(_DWORD *)tcp_info buf = 136446210;
  os_log_type_t v16 = "nw_protocol_definition_set_stop";
  BOOL v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v16 = "nw_protocol_definition_set_stop";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null definition", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          os_log_type_t v16 = "nw_protocol_definition_set_stop";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null definition, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v16 = "nw_protocol_definition_set_stop";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null definition, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v16 = "nw_protocol_definition_set_stop";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null definition, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
LABEL_3:
}

void sub_1832F6F4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_protocol_definition_set_start(void *a1, void *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    nw_protocol_definition_initialize_extended_state(v3);
    v4->extended_state->var15 = a2;
    goto LABEL_3;
  }
  char v5 = __nwlog_obj();
  *(_DWORD *)tcp_info buf = 136446210;
  os_log_type_t v16 = "nw_protocol_definition_set_start";
  BOOL v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v16 = "nw_protocol_definition_set_start";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null definition", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          os_log_type_t v16 = "nw_protocol_definition_set_start";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null definition, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v16 = "nw_protocol_definition_set_start";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null definition, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v16 = "nw_protocol_definition_set_start";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null definition, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
LABEL_3:
}

void sub_1832F71FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_protocol_definition_set_path_changed_handler(void *a1, void *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    nw_protocol_definition_initialize_extended_state(v3);
    v4->extended_state->var26 = a2;
    goto LABEL_3;
  }
  char v5 = __nwlog_obj();
  *(_DWORD *)tcp_info buf = 136446210;
  os_log_type_t v16 = "nw_protocol_definition_set_path_changed_handler";
  BOOL v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v16 = "nw_protocol_definition_set_path_changed_handler";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null definition", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          os_log_type_t v16 = "nw_protocol_definition_set_path_changed_handler";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null definition, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v16 = "nw_protocol_definition_set_path_changed_handler";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null definition, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v16 = "nw_protocol_definition_set_path_changed_handler";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null definition, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
LABEL_3:
}

void sub_1832F74AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_protocol_definition_set_message_size_handler(void *a1, void *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    nw_protocol_definition_initialize_extended_state(v3);
    v4->extended_state->var28 = a2;
    goto LABEL_3;
  }
  char v5 = __nwlog_obj();
  *(_DWORD *)tcp_info buf = 136446210;
  os_log_type_t v16 = "nw_protocol_definition_set_message_size_handler";
  BOOL v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v16 = "nw_protocol_definition_set_message_size_handler";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null definition", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          os_log_type_t v16 = "nw_protocol_definition_set_message_size_handler";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null definition, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v16 = "nw_protocol_definition_set_message_size_handler";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null definition, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v16 = "nw_protocol_definition_set_message_size_handler";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null definition, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
LABEL_3:
}

void sub_1832F775C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_protocol_definition_set_link_congestion_state_update(void *a1, void *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    nw_protocol_definition_initialize_extended_state(v3);
    v4->extended_state->var18 = a2;
    goto LABEL_3;
  }
  char v5 = __nwlog_obj();
  *(_DWORD *)tcp_info buf = 136446210;
  os_log_type_t v16 = "nw_protocol_definition_set_link_congestion_state_update";
  BOOL v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v16 = "nw_protocol_definition_set_link_congestion_state_update";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null definition", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          os_log_type_t v16 = "nw_protocol_definition_set_link_congestion_state_update";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null definition, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v16 = "nw_protocol_definition_set_link_congestion_state_update";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null definition, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v16 = "nw_protocol_definition_set_link_congestion_state_update";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null definition, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
LABEL_3:
}

void sub_1832F7A0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_protocol_definition_set_fallback_changed_handler(void *a1, void *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    nw_protocol_definition_initialize_extended_state(v3);
    v4->extended_state->var27 = a2;
    goto LABEL_3;
  }
  char v5 = __nwlog_obj();
  *(_DWORD *)tcp_info buf = 136446210;
  os_log_type_t v16 = "nw_protocol_definition_set_fallback_changed_handler";
  BOOL v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v16 = "nw_protocol_definition_set_fallback_changed_handler";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null definition", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          os_log_type_t v16 = "nw_protocol_definition_set_fallback_changed_handler";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null definition, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v16 = "nw_protocol_definition_set_fallback_changed_handler";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null definition, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v16 = "nw_protocol_definition_set_fallback_changed_handler";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null definition, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
LABEL_3:
}

void sub_1832F7CBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_protocol_definition_set_custom_flow_map_key_size(void *a1, unsigned int a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    nw_protocol_definition_initialize_extended_state(v3);
    v4->extended_state->var32 = a2;
    goto LABEL_3;
  }
  char v5 = __nwlog_obj();
  *(_DWORD *)tcp_info buf = 136446210;
  os_log_type_t v16 = "nw_protocol_definition_set_custom_flow_map_key_size";
  BOOL v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v16 = "nw_protocol_definition_set_custom_flow_map_key_size";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null definition", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          os_log_type_t v16 = "nw_protocol_definition_set_custom_flow_map_key_size";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null definition, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v16 = "nw_protocol_definition_set_custom_flow_map_key_size";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null definition, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v16 = "nw_protocol_definition_set_custom_flow_map_key_size";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null definition, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
LABEL_3:
}

void sub_1832F7F6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_protocol_definition_set_copy_metadata(void *a1, void *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    nw_protocol_definition_initialize_extended_state(v3);
    v4->extended_state->var22 = a2;
    goto LABEL_3;
  }
  char v5 = __nwlog_obj();
  *(_DWORD *)tcp_info buf = 136446210;
  os_log_type_t v16 = "nw_protocol_definition_set_copy_metadata";
  BOOL v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v16 = "nw_protocol_definition_set_copy_metadata";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null definition", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          os_log_type_t v16 = "nw_protocol_definition_set_copy_metadata";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null definition, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v16 = "nw_protocol_definition_set_copy_metadata";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null definition, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v16 = "nw_protocol_definition_set_copy_metadata";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null definition, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
LABEL_3:
}

void sub_1832F821C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_protocol_definition_set_copy_establishment_report(void *a1, void *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    nw_protocol_definition_initialize_extended_state(v3);
    v4->extended_state->var23 = a2;
    goto LABEL_3;
  }
  char v5 = __nwlog_obj();
  *(_DWORD *)tcp_info buf = 136446210;
  os_log_type_t v16 = "nw_protocol_definition_set_copy_establishment_report";
  BOOL v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v16 = "nw_protocol_definition_set_copy_establishment_report";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null definition", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          os_log_type_t v16 = "nw_protocol_definition_set_copy_establishment_report";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null definition, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v16 = "nw_protocol_definition_set_copy_establishment_report";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null definition, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v16 = "nw_protocol_definition_set_copy_establishment_report";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null definition, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
LABEL_3:
}

void sub_1832F84CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_protocol_definition_set_copy_data_transfer_snapshot(void *a1, void *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    nw_protocol_definition_initialize_extended_state(v3);
    v4->extended_state->var24 = a2;
    goto LABEL_3;
  }
  char v5 = __nwlog_obj();
  *(_DWORD *)tcp_info buf = 136446210;
  os_log_type_t v16 = "nw_protocol_definition_set_copy_data_transfer_snapshot";
  BOOL v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v16 = "nw_protocol_definition_set_copy_data_transfer_snapshot";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null definition", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          os_log_type_t v16 = "nw_protocol_definition_set_copy_data_transfer_snapshot";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null definition, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v16 = "nw_protocol_definition_set_copy_data_transfer_snapshot";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null definition, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v16 = "nw_protocol_definition_set_copy_data_transfer_snapshot";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null definition, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
LABEL_3:
}

void sub_1832F877C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *nw_activity_copy_xpc_object(void *a1)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = a1;
  if (v1)
  {
    xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
    id v3 = v2;
    *(void *)os_log_type_t type = v2;
    char v24 = -1;
    if (v2)
    {
      xpc_dictionary_set_uuid(v2, "token", (const unsigned __int8 *)v1 + 8);
      xpc_dictionary_set_uint64(v3, "investigation_identifier", *((void *)v1 + 3));
      xpc_dictionary_set_uint64(v3, "start_time", *((void *)v1 + 4));
      xpc_dictionary_set_uint64(v3, "end_time", *((void *)v1 + 5));
      xpc_dictionary_set_uint64(v3, "fragments_quenched", v1[12]);
      xpc_dictionary_set_uint64(v3, "label", v1[28]);
      xpc_dictionary_set_uint64(v3, "domain", v1[29]);
      xpc_dictionary_set_int64(v3, "underlying_error_domain", (int)v1[31]);
      xpc_dictionary_set_int64(v3, "underlying_error_code", (int)v1[32]);
      xpc_dictionary_set_uint64(v3, "reporting_strategy", v1[33]);
      xpc_dictionary_set_uint64(v3, "completion_reason", v1[34]);
      xpc_dictionary_set_BOOL(v3, "is_retry", v1[35] & 1);
      xpc_dictionary_set_BOOL(v3, "is_lightweight", (v1[35] & 2) != 0);
      xpc_dictionary_set_BOOL(v3, "activated", (v1[35] & 4) != 0);
      xpc_dictionary_set_BOOL(v3, "completed", (v1[35] & 8) != 0);
      id v4 = (const char *)*((void *)v1 + 9);
      if (v4) {
        xpc_dictionary_set_string(v3, "underlying_error_domain_string", v4);
      }
      goto LABEL_5;
    }
    os_log_type_t v10 = __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    os_log_type_t v27 = "nw_activity_copy_xpc_object";
    BOOL v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v25 = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (!__nwlog_fault(v11, &v25, &v22)) {
      goto LABEL_41;
    }
    if (v25 == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v13 = v25;
      if (os_log_type_enabled(v12, v25))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v27 = "nw_activity_copy_xpc_object";
        _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s failed to allocate dictionary", buf, 0xCu);
      }
    }
    else if (v22)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v18 = v25;
      BOOL v19 = os_log_type_enabled(v12, v25);
      if (backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          os_log_type_t v27 = "nw_activity_copy_xpc_object";
          __int16 v28 = 2082;
          os_log_type_t v29 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v12, v18, "%{public}s failed to allocate dictionary, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_41;
      }
      if (v19)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v27 = "nw_activity_copy_xpc_object";
        _os_log_impl(&dword_1830D4000, v12, v18, "%{public}s failed to allocate dictionary, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v21 = v25;
      if (os_log_type_enabled(v12, v25))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v27 = "nw_activity_copy_xpc_object";
        _os_log_impl(&dword_1830D4000, v12, v21, "%{public}s failed to allocate dictionary, backtrace limit exceeded", buf, 0xCu);
      }
    }

LABEL_41:
    if (v11) {
      free(v11);
    }
    goto LABEL_5;
  }
  BOOL v6 = __nwlog_obj();
  *(_DWORD *)tcp_info buf = 136446210;
  os_log_type_t v27 = "nw_activity_copy_xpc_object";
  int v7 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  os_log_type_t v25 = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v7, type, &v25))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = type[0];
      if (os_log_type_enabled(v8, type[0]))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v27 = "nw_activity_copy_xpc_object";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null activity", buf, 0xCu);
      }
    }
    else if (v25)
    {
      char v14 = (char *)__nw_create_backtrace_string();
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v15 = type[0];
      BOOL v16 = os_log_type_enabled(v8, type[0]);
      if (v14)
      {
        if (v16)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          os_log_type_t v27 = "nw_activity_copy_xpc_object";
          __int16 v28 = 2082;
          os_log_type_t v29 = v14;
          _os_log_impl(&dword_1830D4000, v8, v15, "%{public}s called with null activity, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v14);
        goto LABEL_35;
      }
      if (v16)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v27 = "nw_activity_copy_xpc_object";
        _os_log_impl(&dword_1830D4000, v8, v15, "%{public}s called with null activity, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v20 = type[0];
      if (os_log_type_enabled(v8, type[0]))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v27 = "nw_activity_copy_xpc_object";
        _os_log_impl(&dword_1830D4000, v8, v20, "%{public}s called with null activity, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_35:
  if (v7) {
    free(v7);
  }
  id v3 = 0;
LABEL_5:

  return v3;
}

void sub_1832F8DA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  nw::retained_ptr<void({block_pointer} {__strong})(void)>::~retained_ptr((uint64_t)va);

  _Unwind_Resume(a1);
}

void nw_protocol_disconnect_quiet(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v3 = *(void *)(a1 + 24);
    if (v3)
    {
      if (a2)
      {
        char v5 = *(void (**)(uint64_t, uint64_t))(v3 + 32);
        if (v5)
        {
          BOOL v6 = *(void **)(a1 + 40);
          if (v6 == &nw_protocol_ref_counted_handle)
          {
            uint64_t v7 = *(void *)(a1 + 88);
            if (v7) {
              *(void *)(a1 + 88) = v7 + 1;
            }
          }
          if (*(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
          {
            uint64_t v8 = *(void *)(a2 + 88);
            if (v8) {
              *(void *)(a2 + 88) = v8 + 1;
            }
            v5(a1, a2);
            if (*(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
            {
              uint64_t v9 = *(void *)(a2 + 88);
              if (v9)
              {
                uint64_t v10 = v9 - 1;
                *(void *)(a2 + 88) = v10;
                if (!v10)
                {
                  BOOL v11 = *(void (***)(void))(a2 + 64);
                  if (v11)
                  {
                    *(void *)(a2 + 64) = 0;
                    v11[2](v11);
                    _Block_release(v11);
                  }
                  if (*(unsigned char *)(a2 + 72))
                  {
                    os_log_type_t v12 = *(const void **)(a2 + 64);
                    if (v12) {
                      _Block_release(v12);
                    }
                  }
                  free((void *)a2);
                }
              }
            }
          }
          else
          {
            v5(a1, a2);
          }
          if (v6 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
          {
            uint64_t v13 = *(void *)(a1 + 88);
            if (v13)
            {
              uint64_t v14 = v13 - 1;
              *(void *)(a1 + 88) = v14;
              if (!v14)
              {
                os_log_type_t v15 = *(void (***)(void))(a1 + 64);
                if (v15)
                {
                  *(void *)(a1 + 64) = 0;
                  v15[2](v15);
                  _Block_release(v15);
                }
                if (*(unsigned char *)(a1 + 72))
                {
                  BOOL v16 = *(const void **)(a1 + 64);
                  if (v16) {
                    _Block_release(v16);
                  }
                }
                free((void *)a1);
              }
            }
          }
        }
      }
    }
  }
}

void nw_protocol_default_disconnect(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    output_handler = a1->output_handler;
    if (output_handler)
    {
      callbacks = output_handler->callbacks;
      if (callbacks)
      {
        disconnect = (void (*)(void))callbacks->disconnect;
        if (disconnect)
        {
          disconnect();
        }
      }
    }
    return;
  }
  __nwlog_obj();
  *(_DWORD *)tcp_info buf = 136446210;
  uint64_t v14 = "nw_protocol_default_disconnect";
  char v5 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (__nwlog_fault(v5, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (!os_log_type_enabled(v6, type)) {
        goto LABEL_22;
      }
      *(_DWORD *)tcp_info buf = 136446210;
      uint64_t v14 = "nw_protocol_default_disconnect";
      uint64_t v8 = "%{public}s called with null protocol";
      goto LABEL_21;
    }
    if (!v11)
    {
      BOOL v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (!os_log_type_enabled(v6, type)) {
        goto LABEL_22;
      }
      *(_DWORD *)tcp_info buf = 136446210;
      uint64_t v14 = "nw_protocol_default_disconnect";
      uint64_t v8 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_21;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v6 = __nwlog_obj();
    os_log_type_t v7 = type;
    BOOL v10 = os_log_type_enabled(v6, type);
    if (backtrace_string)
    {
      if (v10)
      {
        *(_DWORD *)tcp_info buf = 136446466;
        uint64_t v14 = "nw_protocol_default_disconnect";
        __int16 v15 = 2082;
        BOOL v16 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_22;
    }
    if (v10)
    {
      *(_DWORD *)tcp_info buf = 136446210;
      uint64_t v14 = "nw_protocol_default_disconnect";
      uint64_t v8 = "%{public}s called with null protocol, no backtrace";
LABEL_21:
      _os_log_impl(&dword_1830D4000, v6, v7, v8, buf, 0xCu);
    }
  }
LABEL_22:
  if (v5) {
    free(v5);
  }
}

void nw_channel_disconnect(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    __int16 v28 = "nw_channel_disconnect";
    id v4 = (nw_protocol *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (!__nwlog_fault((const char *)v4, &type, &v25)) {
      goto LABEL_61;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v25)
      {
        os_log_type_t v18 = __nwlog_obj();
        os_log_type_t v19 = type;
        if (!os_log_type_enabled(v18, type)) {
          goto LABEL_61;
        }
        *(_DWORD *)tcp_info buf = 136446210;
        __int16 v28 = "nw_channel_disconnect";
        os_log_type_t v20 = "%{public}s called with null channel_protocol, backtrace limit exceeded";
        goto LABEL_60;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v18 = __nwlog_obj();
      os_log_type_t v19 = type;
      BOOL v22 = os_log_type_enabled(v18, type);
      if (!backtrace_string)
      {
        if (!v22) {
          goto LABEL_61;
        }
        *(_DWORD *)tcp_info buf = 136446210;
        __int16 v28 = "nw_channel_disconnect";
        os_log_type_t v20 = "%{public}s called with null channel_protocol, no backtrace";
        goto LABEL_60;
      }
      if (!v22)
      {
LABEL_50:
        free(backtrace_string);
        if (!v4) {
          return;
        }
LABEL_32:
        free(v4);
        return;
      }
      *(_DWORD *)tcp_info buf = 136446466;
      __int16 v28 = "nw_channel_disconnect";
      __int16 v29 = 2082;
      uint64_t v30 = backtrace_string;
      BOOL v23 = "%{public}s called with null channel_protocol, dumping backtrace:%{public}s";
LABEL_49:
      _os_log_impl(&dword_1830D4000, v18, v19, v23, buf, 0x16u);
      goto LABEL_50;
    }
    os_log_type_t v18 = __nwlog_obj();
    os_log_type_t v19 = type;
    if (!os_log_type_enabled(v18, type)) {
      goto LABEL_61;
    }
    *(_DWORD *)tcp_info buf = 136446210;
    __int16 v28 = "nw_channel_disconnect";
    os_log_type_t v20 = "%{public}s called with null channel_protocol";
LABEL_60:
    _os_log_impl(&dword_1830D4000, v18, v19, v20, buf, 0xCu);
LABEL_61:
    if (!v4) {
      return;
    }
    goto LABEL_32;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    __int16 v28 = "nw_channel_disconnect";
    id v4 = (nw_protocol *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (!__nwlog_fault((const char *)v4, &type, &v25)) {
      goto LABEL_61;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v18 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (!os_log_type_enabled(v18, type)) {
        goto LABEL_61;
      }
      *(_DWORD *)tcp_info buf = 136446210;
      __int16 v28 = "nw_channel_disconnect";
      os_log_type_t v20 = "%{public}s called with null channel";
      goto LABEL_60;
    }
    if (!v25)
    {
      os_log_type_t v18 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (!os_log_type_enabled(v18, type)) {
        goto LABEL_61;
      }
      *(_DWORD *)tcp_info buf = 136446210;
      __int16 v28 = "nw_channel_disconnect";
      os_log_type_t v20 = "%{public}s called with null channel, backtrace limit exceeded";
      goto LABEL_60;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v18 = __nwlog_obj();
    os_log_type_t v19 = type;
    BOOL v24 = os_log_type_enabled(v18, type);
    if (backtrace_string)
    {
      if (!v24) {
        goto LABEL_50;
      }
      *(_DWORD *)tcp_info buf = 136446466;
      __int16 v28 = "nw_channel_disconnect";
      __int16 v29 = 2082;
      uint64_t v30 = backtrace_string;
      BOOL v23 = "%{public}s called with null channel, dumping backtrace:%{public}s";
      goto LABEL_49;
    }
    if (!v24) {
      goto LABEL_61;
    }
    *(_DWORD *)tcp_info buf = 136446210;
    __int16 v28 = "nw_channel_disconnect";
    os_log_type_t v20 = "%{public}s called with null channel, no backtrace";
    goto LABEL_60;
  }
  id v4 = a2;
  if (a2)
  {
    callbacks = a2->callbacks;
    if (callbacks)
    {
      disconnected = (void (*)(nw_protocol *, nw_protocol *))callbacks->disconnected;
      if (disconnected)
      {
        os_log_type_t v7 = a2->handle;
        if (v7 == &nw_protocol_ref_counted_handle)
        {
          uint64_t v8 = a2[1].callbacks;
          if (v8) {
            a2[1].callbacks = (nw_protocol_callbacks *)((char *)&v8->add_input_handler + 1);
          }
        }
        if (handle == &nw_protocol_ref_counted_handle)
        {
          uint64_t v9 = a1[1].callbacks;
          if (v9) {
            a1[1].callbacks = (nw_protocol_callbacks *)((char *)&v9->add_input_handler + 1);
          }
          disconnected(a2, a1);
          if (a1->handle == &nw_protocol_ref_counted_handle)
          {
            BOOL v10 = a1[1].callbacks;
            if (v10)
            {
              char v11 = (nw_protocol_callbacks *)((char *)v10 - 1);
              a1[1].callbacks = v11;
              if (!v11)
              {
                os_log_type_t v12 = *(void (***)(void))a1[1].flow_id;
                if (v12)
                {
                  *(void *)a1[1].flow_id = 0;
                  v12[2](v12);
                  _Block_release(v12);
                }
                if (a1[1].flow_id[8])
                {
                  uint64_t v13 = *(const void **)a1[1].flow_id;
                  if (v13) {
                    _Block_release(v13);
                  }
                }
                free(a1);
              }
            }
          }
        }
        else
        {
          disconnected(a2, a1);
        }
        if (v7 == &nw_protocol_ref_counted_handle && v4->handle == &nw_protocol_ref_counted_handle)
        {
          uint64_t v14 = v4[1].callbacks;
          if (v14)
          {
            __int16 v15 = (nw_protocol_callbacks *)((char *)v14 - 1);
            v4[1].callbacks = v15;
            if (!v15)
            {
              BOOL v16 = *(void (***)(void))v4[1].flow_id;
              if (v16)
              {
                *(void *)v4[1].flow_id = 0;
                v16[2](v16);
                _Block_release(v16);
              }
              if (v4[1].flow_id[8])
              {
                uint64_t v17 = *(const void **)v4[1].flow_id;
                if (v17) {
                  _Block_release(v17);
                }
              }
              goto LABEL_32;
            }
          }
        }
      }
    }
  }
}

void nw_protocol_ipv4_disconnected(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    os_log_type_t v27 = "nw_protocol_ipv4_disconnected";
    uint64_t default_input_handler = _os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (!__nwlog_fault((const char *)default_input_handler, &type, &v24)) {
      goto LABEL_59;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v24)
      {
        uint64_t v17 = __nwlog_obj();
        os_log_type_t v18 = type;
        if (!os_log_type_enabled(v17, type)) {
          goto LABEL_59;
        }
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v27 = "nw_protocol_ipv4_disconnected";
        os_log_type_t v19 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_58;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v17 = __nwlog_obj();
      os_log_type_t v18 = type;
      BOOL v21 = os_log_type_enabled(v17, type);
      if (!backtrace_string)
      {
        if (!v21) {
          goto LABEL_59;
        }
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v27 = "nw_protocol_ipv4_disconnected";
        os_log_type_t v19 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_58;
      }
      if (!v21)
      {
LABEL_48:
        free(backtrace_string);
        if (!default_input_handler) {
          return;
        }
LABEL_30:
        free((void *)default_input_handler);
        return;
      }
      *(_DWORD *)tcp_info buf = 136446466;
      os_log_type_t v27 = "nw_protocol_ipv4_disconnected";
      __int16 v28 = 2082;
      __int16 v29 = backtrace_string;
      BOOL v22 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_47:
      _os_log_impl(&dword_1830D4000, v17, v18, v22, buf, 0x16u);
      goto LABEL_48;
    }
    uint64_t v17 = __nwlog_obj();
    os_log_type_t v18 = type;
    if (!os_log_type_enabled(v17, type)) {
      goto LABEL_59;
    }
    *(_DWORD *)tcp_info buf = 136446210;
    os_log_type_t v27 = "nw_protocol_ipv4_disconnected";
    os_log_type_t v19 = "%{public}s called with null protocol";
LABEL_58:
    _os_log_impl(&dword_1830D4000, v17, v18, v19, buf, 0xCu);
LABEL_59:
    if (!default_input_handler) {
      return;
    }
    goto LABEL_30;
  }
  if (a1->handle != &nw_protocol_ref_counted_handle)
  {
    __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    os_log_type_t v27 = "nw_protocol_ipv4_disconnected";
    uint64_t default_input_handler = _os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (!__nwlog_fault((const char *)default_input_handler, &type, &v24)) {
      goto LABEL_59;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v17 = __nwlog_obj();
      os_log_type_t v18 = type;
      if (!os_log_type_enabled(v17, type)) {
        goto LABEL_59;
      }
      *(_DWORD *)tcp_info buf = 136446210;
      os_log_type_t v27 = "nw_protocol_ipv4_disconnected";
      os_log_type_t v19 = "%{public}s called with null ipv4";
      goto LABEL_58;
    }
    if (!v24)
    {
      uint64_t v17 = __nwlog_obj();
      os_log_type_t v18 = type;
      if (!os_log_type_enabled(v17, type)) {
        goto LABEL_59;
      }
      *(_DWORD *)tcp_info buf = 136446210;
      os_log_type_t v27 = "nw_protocol_ipv4_disconnected";
      os_log_type_t v19 = "%{public}s called with null ipv4, backtrace limit exceeded";
      goto LABEL_58;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v17 = __nwlog_obj();
    os_log_type_t v18 = type;
    BOOL v23 = os_log_type_enabled(v17, type);
    if (backtrace_string)
    {
      if (!v23) {
        goto LABEL_48;
      }
      *(_DWORD *)tcp_info buf = 136446466;
      os_log_type_t v27 = "nw_protocol_ipv4_disconnected";
      __int16 v28 = 2082;
      __int16 v29 = backtrace_string;
      BOOL v22 = "%{public}s called with null ipv4, dumping backtrace:%{public}s";
      goto LABEL_47;
    }
    if (!v23) {
      goto LABEL_59;
    }
    *(_DWORD *)tcp_info buf = 136446210;
    os_log_type_t v27 = "nw_protocol_ipv4_disconnected";
    os_log_type_t v19 = "%{public}s called with null ipv4, no backtrace";
    goto LABEL_58;
  }
  a1[2].identifier = 0;
  uint64_t default_input_handler = (uint64_t)a1->default_input_handler;
  if (default_input_handler)
  {
    uint64_t v4 = *(void *)(default_input_handler + 24);
    if (v4)
    {
      char v5 = *(void (**)(uint64_t, nw_protocol *))(v4 + 48);
      if (v5)
      {
        BOOL v6 = *(void **)(default_input_handler + 40);
        if (v6 == &nw_protocol_ref_counted_handle)
        {
          uint64_t v7 = *(void *)(default_input_handler + 88);
          if (v7) {
            *(void *)(default_input_handler + 88) = v7 + 1;
          }
        }
        callbacks = a1[1].callbacks;
        if (callbacks) {
          a1[1].callbacks = (nw_protocol_callbacks *)((char *)&callbacks->add_input_handler + 1);
        }
        v5(default_input_handler, a1);
        if (a1->handle == &nw_protocol_ref_counted_handle)
        {
          uint64_t v9 = a1[1].callbacks;
          if (v9)
          {
            BOOL v10 = (nw_protocol_callbacks *)((char *)v9 - 1);
            a1[1].callbacks = v10;
            if (!v10)
            {
              char v11 = *(void (***)(void))a1[1].flow_id;
              if (v11)
              {
                *(void *)a1[1].flow_id = 0;
                v11[2](v11);
                _Block_release(v11);
              }
              if (a1[1].flow_id[8])
              {
                os_log_type_t v12 = *(const void **)a1[1].flow_id;
                if (v12) {
                  _Block_release(v12);
                }
              }
              free(a1);
            }
          }
        }
        if (v6 == &nw_protocol_ref_counted_handle
          && *(_UNKNOWN **)(default_input_handler + 40) == &nw_protocol_ref_counted_handle)
        {
          uint64_t v13 = *(void *)(default_input_handler + 88);
          if (v13)
          {
            uint64_t v14 = v13 - 1;
            *(void *)(default_input_handler + 88) = v14;
            if (!v14)
            {
              __int16 v15 = *(void (***)(void))(default_input_handler + 64);
              if (v15)
              {
                *(void *)(default_input_handler + 64) = 0;
                v15[2](v15);
                _Block_release(v15);
              }
              if (*(unsigned char *)(default_input_handler + 72))
              {
                BOOL v16 = *(const void **)(default_input_handler + 64);
                if (v16) {
                  _Block_release(v16);
                }
              }
              goto LABEL_30;
            }
          }
        }
      }
    }
  }
}

nw_protocol_options_t nw_tcp_create_options(void)
{
  if (nw_protocol_setup_tcp_definition(void)::onceToken != -1) {
    dispatch_once(&nw_protocol_setup_tcp_definition(void)::onceToken, &__block_literal_global_64304);
  }
  uint64_t v0 = (void *)g_tcp_definition;

  return (nw_protocol_options_t)nw_protocol_create_options(v0);
}

uint64_t __nw_path_copy_inactive_agent_uuids_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  char v5 = v4;
  size_t length = 0;
  if (v4)
  {
    data = (const unsigned __int8 *)xpc_dictionary_get_data(v4, "data", &length);
    if (data)
    {
      if (length >= 0xD8)
      {
        uint64_t v7 = data;
        if (length == *((unsigned int *)data + 53) + 216)
        {
          int v8 = *((_DWORD *)data + 52);
          if ((v8 & 2) == 0 && ((v8 & 0x10) != 0 || !*(unsigned char *)(a1 + 40)))
          {
            uint64_t v9 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
            if (!v9)
            {
              xpc_object_t v10 = xpc_array_create(0, 0);
              uint64_t v11 = *(void *)(*(void *)(a1 + 32) + 8);
              os_log_type_t v12 = *(void **)(v11 + 40);
              *(void *)(v11 + 40) = v10;

              uint64_t v9 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
            }
            xpc_array_set_uuid(v9, 0xFFFFFFFFFFFFFFFFLL, v7);
          }
        }
      }
    }
  }

  return 1;
}

void sub_1832F9CFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_tcp_options_get_disable_blackhole_detection(void *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (nw_protocol_options_is_tcp(v1))
  {
    *(void *)tcp_info buf = 0;
    *(void *)&sockaddr buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000;
    char v16 = 0;
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_tcp_options_get_disable_blackhole_detection_block_invoke;
    v12[3] = &unk_1E5248E90;
    void v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    BOOL v2 = *(unsigned char *)(*(void *)&buf[8] + 24) != 0;
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  id v4 = __nwlog_obj();
  *(_DWORD *)tcp_info buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_tcp_options_get_disable_blackhole_detection";
  char v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_tcp_options_get_disable_blackhole_detection";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_options_is_tcp(options)", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_tcp_options_get_disable_blackhole_detection";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_tcp(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_tcp_options_get_disable_blackhole_detection";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_tcp(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_tcp_options_get_disable_blackhole_detection";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_options_is_tcp(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
  BOOL v2 = 0;
LABEL_3:

  return v2;
}

void sub_1832FA028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

BOOL nw_activity_create_from_xpc_object(void *a1)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  BOOL v2 = v1;
  if (!v1)
  {
    __int16 v15 = __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    __int16 v43 = "nw_activity_create_from_xpc_object";
    char v16 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(v41.receiver) = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v16, &v41, &type)) {
      goto LABEL_79;
    }
    if (LOBYTE(v41.receiver) == 17)
    {
      uint64_t v17 = __nwlog_obj();
      os_log_type_t receiver = (os_log_type_t)v41.receiver;
      if (os_log_type_enabled(v17, (os_log_type_t)v41.receiver))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        __int16 v43 = "nw_activity_create_from_xpc_object";
        _os_log_impl(&dword_1830D4000, v17, receiver, "%{public}s called with null object", buf, 0xCu);
      }
    }
    else if (type)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v17 = __nwlog_obj();
      os_log_type_t v28 = (os_log_type_t)v41.receiver;
      BOOL v29 = os_log_type_enabled(v17, (os_log_type_t)v41.receiver);
      if (backtrace_string)
      {
        if (v29)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          __int16 v43 = "nw_activity_create_from_xpc_object";
          __int16 v44 = 2082;
          os_log_type_t v45 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v17, v28, "%{public}s called with null object, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        if (!v16) {
          goto LABEL_81;
        }
        goto LABEL_80;
      }
      if (v29)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        __int16 v43 = "nw_activity_create_from_xpc_object";
        _os_log_impl(&dword_1830D4000, v17, v28, "%{public}s called with null object, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v17 = __nwlog_obj();
      os_log_type_t v36 = (os_log_type_t)v41.receiver;
      if (os_log_type_enabled(v17, (os_log_type_t)v41.receiver))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        __int16 v43 = "nw_activity_create_from_xpc_object";
        _os_log_impl(&dword_1830D4000, v17, v36, "%{public}s called with null object, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_78;
  }
  if (object_getClass(v1) != (Class)MEMORY[0x1E4F14590])
  {
    os_log_type_t v19 = __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    __int16 v43 = "nw_activity_create_from_xpc_object";
    char v16 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(v41.receiver) = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v16, &v41, &type)) {
      goto LABEL_79;
    }
    if (LOBYTE(v41.receiver) == 17)
    {
      uint64_t v17 = __nwlog_obj();
      os_log_type_t v20 = (os_log_type_t)v41.receiver;
      if (os_log_type_enabled(v17, (os_log_type_t)v41.receiver))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        __int16 v43 = "nw_activity_create_from_xpc_object";
        _os_log_impl(&dword_1830D4000, v17, v20, "%{public}s called with null (xpc_get_type(object) == (&_xpc_type_dictionary))", buf, 0xCu);
      }
    }
    else if (type)
    {
      uint64_t v30 = (char *)__nw_create_backtrace_string();
      uint64_t v17 = __nwlog_obj();
      os_log_type_t v31 = (os_log_type_t)v41.receiver;
      BOOL v32 = os_log_type_enabled(v17, (os_log_type_t)v41.receiver);
      if (v30)
      {
        if (v32)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          __int16 v43 = "nw_activity_create_from_xpc_object";
          __int16 v44 = 2082;
          os_log_type_t v45 = v30;
          _os_log_impl(&dword_1830D4000, v17, v31, "%{public}s called with null (xpc_get_type(object) == (&_xpc_type_dictionary)), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v30);
LABEL_79:
        if (!v16)
        {
LABEL_81:
          uint64_t v3 = 0;
          goto LABEL_30;
        }
LABEL_80:
        free(v16);
        goto LABEL_81;
      }
      if (v32)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        __int16 v43 = "nw_activity_create_from_xpc_object";
        _os_log_impl(&dword_1830D4000, v17, v31, "%{public}s called with null (xpc_get_type(object) == (&_xpc_type_dictionary)), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v17 = __nwlog_obj();
      os_log_type_t v37 = (os_log_type_t)v41.receiver;
      if (os_log_type_enabled(v17, (os_log_type_t)v41.receiver))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        __int16 v43 = "nw_activity_create_from_xpc_object";
        _os_log_impl(&dword_1830D4000, v17, v37, "%{public}s called with null (xpc_get_type(object) == (&_xpc_type_dictionary)), backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_78:

    goto LABEL_79;
  }
  uint64_t v3 = [NWConcrete_nw_activity alloc];
  id v4 = v2;
  if (!v3)
  {
LABEL_29:

LABEL_30:
    return (BOOL)v3;
  }
  v41.os_log_type_t receiver = v3;
  v41.super_class = (Class)NWConcrete_nw_activity;
  uint64_t v3 = (NWConcrete_nw_activity *)objc_msgSendSuper2(&v41, sel_init);
  if (!v3)
  {
    BOOL v21 = __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    __int16 v43 = "-[NWConcrete_nw_activity initWithXPCObject:]";
    BOOL v22 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v39 = 0;
    if (__nwlog_fault(v22, &type, &v39))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        BOOL v23 = __nwlog_obj();
        os_log_type_t v24 = type;
        if (os_log_type_enabled(v23, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          __int16 v43 = "-[NWConcrete_nw_activity initWithXPCObject:]";
          _os_log_impl(&dword_1830D4000, v23, v24, "%{public}s [super init] failed", buf, 0xCu);
        }
      }
      else if (v39)
      {
        BOOL v33 = (char *)__nw_create_backtrace_string();
        BOOL v23 = __nwlog_obj();
        os_log_type_t v34 = type;
        BOOL v35 = os_log_type_enabled(v23, type);
        if (v33)
        {
          if (v35)
          {
            *(_DWORD *)tcp_info buf = 136446466;
            __int16 v43 = "-[NWConcrete_nw_activity initWithXPCObject:]";
            __int16 v44 = 2082;
            os_log_type_t v45 = v33;
            _os_log_impl(&dword_1830D4000, v23, v34, "%{public}s [super init] failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v33);
          goto LABEL_85;
        }
        if (v35)
        {
          *(_DWORD *)tcp_info buf = 136446210;
          __int16 v43 = "-[NWConcrete_nw_activity initWithXPCObject:]";
          _os_log_impl(&dword_1830D4000, v23, v34, "%{public}s [super init] failed, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        BOOL v23 = __nwlog_obj();
        os_log_type_t v38 = type;
        if (os_log_type_enabled(v23, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          __int16 v43 = "-[NWConcrete_nw_activity initWithXPCObject:]";
          _os_log_impl(&dword_1830D4000, v23, v38, "%{public}s [super init] failed, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_85:
    if (v22) {
      free(v22);
    }
    uint64_t v3 = 0;
    goto LABEL_29;
  }
  *(_OWORD *)v3->token = *(_OWORD *)xpc_dictionary_get_uuid(v4, "token");
  v3->investigation_identifier = xpc_dictionary_get_uint64(v4, "investigation_identifier");
  v3->start_time = xpc_dictionary_get_uint64(v4, "start_time");
  v3->end_time = xpc_dictionary_get_uint64(v4, "end_time");
  v3->fragments_quenched = xpc_dictionary_get_uint64(v4, "fragments_quenched");
  m_BOOL obj = v3->parent.m_obj;
  if ((*((unsigned char *)&v3->parent + 8) & 1) != 0 && m_obj)
  {
    v3->parent.m_BOOL obj = 0;

    m_BOOL obj = v3->parent.m_obj;
  }
  v3->parent.m_BOOL obj = 0;

  BOOL v6 = v3->parent.m_obj;
  v3->parent.m_BOOL obj = 0;

  *((unsigned char *)&v3->parent + 8) |= 1u;
  os_unfair_lock_lock(&v3->description_cache.mutex.m_mutex);
  os_log_type_t v7 = v3->description_cache.description.m_obj;
  if ((*((unsigned char *)&v3->description_cache.description + 8) & 1) != 0 && v7)
  {
    v3->description_cache.description.m_BOOL obj = 0;

    os_log_type_t v7 = v3->description_cache.description.m_obj;
  }
  v3->description_cache.description.m_BOOL obj = 0;

  os_unfair_lock_unlock(&v3->description_cache.mutex.m_mutex);
  v3->label = xpc_dictionary_get_uint64(v4, "label");
  v3->domain = xpc_dictionary_get_uint64(v4, "domain");
  v3->client_metric_count = 0;
  v3->underlying_nw_error_domain_t error_domain = xpc_dictionary_get_int64(v4, "underlying_error_domain");
  v3->underlying_unsigned int error_code = xpc_dictionary_get_int64(v4, "underlying_error_code");
  v3->reporting_strategy = xpc_dictionary_get_uint64(v4, "reporting_strategy");
  v3->completion_reason = xpc_dictionary_get_uint64(v4, "completion_reason");
  *((unsigned char *)v3 + 140) = *((unsigned char *)v3 + 140) & 0xFE | xpc_dictionary_get_BOOL(v4, "is_retry");
  if (xpc_dictionary_get_BOOL(v4, "is_lightweight")) {
    char v8 = 2;
  }
  else {
    char v8 = 0;
  }
  *((unsigned char *)v3 + 140) = *((unsigned char *)v3 + 140) & 0xFD | v8;
  if (xpc_dictionary_get_BOOL(v4, "activated")) {
    char v9 = 4;
  }
  else {
    char v9 = 0;
  }
  *((unsigned char *)v3 + 140) = *((unsigned char *)v3 + 140) & 0xFB | v9;
  if (xpc_dictionary_get_BOOL(v4, "completed")) {
    char v10 = 8;
  }
  else {
    char v10 = 0;
  }
  *((unsigned char *)v3 + 140) = *((unsigned char *)v3 + 140) & 0xF7 | v10;
  string = xpc_dictionary_get_string(v4, "underlying_error_domain_string");
  if (!string) {
    goto LABEL_23;
  }
  os_log_type_t v12 = strndup(string, 0x100uLL);
  if (v12)
  {
LABEL_22:
    v3->underlying_error_domain_string = v12;
LABEL_23:
    if (nw_activity_should_log(v3))
    {
      if (__nwlog_activity_log::onceToken != -1) {
        dispatch_once(&__nwlog_activity_log::onceToken, &__block_literal_global_16_44861);
      }
      char v13 = (id)gactivityLogObj;
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)tcp_info buf = 138543362;
        __int16 v43 = (const char *)v3;
        _os_log_impl(&dword_1830D4000, v13, OS_LOG_TYPE_DEFAULT, "Create activity from XPC object %{public}@", buf, 0xCu);
      }
    }
    goto LABEL_29;
  }
  char v25 = __nwlog_obj();
  os_log_type_enabled(v25, OS_LOG_TYPE_ERROR);
  *(_DWORD *)tcp_info buf = 136446210;
  __int16 v43 = "strict_strndup";
  char v26 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v26);
  if (!result)
  {
    free(v26);
    goto LABEL_22;
  }
  __break(1u);
  return result;
}

void sub_1832FAAD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_quic_stream_get_datagram_context_id(void *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (nw_protocol_options_is_quic_stream(v1))
  {
    *(void *)tcp_info buf = 0;
    *(void *)&sockaddr buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000;
    uint64_t v16 = 0;
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_quic_stream_get_datagram_context_id_block_invoke;
    v12[3] = &unk_1E5248E90;
    void v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    uint64_t v2 = *(void *)(*(void *)&buf[8] + 24);
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  id v4 = __nwlog_obj();
  *(_DWORD *)tcp_info buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_quic_stream_get_datagram_context_id";
  char v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_stream_get_datagram_context_id";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_options_is_quic_stream(options)", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_quic_stream_get_datagram_context_id";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_stream(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_stream_get_datagram_context_id";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_stream(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_stream_get_datagram_context_id";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_options_is_quic_stream(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
  uint64_t v2 = 0;
LABEL_3:

  return v2;
}

void sub_1832FAE1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

uint64_t nw_quic_stream_get_associated_stream_id(void *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (nw_protocol_options_is_quic_stream(v1))
  {
    *(void *)tcp_info buf = 0;
    *(void *)&sockaddr buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000;
    uint64_t v16 = 0;
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_quic_stream_get_associated_stream_id_block_invoke;
    v12[3] = &unk_1E5248E90;
    void v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    uint64_t v2 = *(void *)(*(void *)&buf[8] + 24);
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  id v4 = __nwlog_obj();
  *(_DWORD *)tcp_info buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_quic_stream_get_associated_stream_id";
  char v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_stream_get_associated_stream_id";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_options_is_quic_stream(options)", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_quic_stream_get_associated_stream_id";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_stream(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_stream_get_associated_stream_id";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_stream(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_stream_get_associated_stream_id";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_options_is_quic_stream(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
  uint64_t v2 = 0;
LABEL_3:

  return v2;
}

void sub_1832FB15C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

void __NWCopyInternalQueue_block_invoke()
{
  uint64_t v2 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v0 = dispatch_queue_create("Network.framework", v2);
  id v1 = (void *)NWCopyInternalQueue_nwQueue;
  NWCopyInternalQueue_nwQueue = (uint64_t)v0;
}

void nw_protocol_notify_quiet(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return;
  }
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    return;
  }
  if (!a2) {
    return;
  }
  BOOL v6 = *(void (**)(uint64_t, uint64_t))(v4 + 160);
  if (!v6) {
    return;
  }
  os_log_type_t v7 = *(void **)(a1 + 40);
  if (v7 == &nw_protocol_ref_counted_handle)
  {
    uint64_t v8 = *(void *)(a1 + 88);
    if (v8) {
      *(void *)(a1 + 88) = v8 + 1;
    }
  }
  os_log_type_t v9 = *(void **)(a2 + 40);
  if (v9 == &nw_protocol_ref_counted_handle)
  {
    uint64_t v10 = *(void *)(a2 + 88);
    if (v10) {
      *(void *)(a2 + 88) = v10 + 1;
    }
  }
  if (!a3)
  {
    __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    os_log_type_t v28 = "__nw_protocol_notify";
    os_log_type_t v19 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (!__nwlog_fault(v19, &type, &v25)) {
      goto LABEL_48;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v20 = __nwlog_obj();
      os_log_type_t v21 = type;
      if (!os_log_type_enabled(v20, type)) {
        goto LABEL_48;
      }
      *(_DWORD *)tcp_info buf = 136446210;
      os_log_type_t v28 = "__nw_protocol_notify";
      BOOL v22 = "%{public}s called with null type";
    }
    else if (v25)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v20 = __nwlog_obj();
      os_log_type_t v21 = type;
      BOOL v24 = os_log_type_enabled(v20, type);
      if (backtrace_string)
      {
        if (v24)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          os_log_type_t v28 = "__nw_protocol_notify";
          __int16 v29 = 2082;
          uint64_t v30 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v20, v21, "%{public}s called with null type, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_48;
      }
      if (!v24)
      {
LABEL_48:
        if (v19) {
          free(v19);
        }
        goto LABEL_13;
      }
      *(_DWORD *)tcp_info buf = 136446210;
      os_log_type_t v28 = "__nw_protocol_notify";
      BOOL v22 = "%{public}s called with null type, no backtrace";
    }
    else
    {
      os_log_type_t v20 = __nwlog_obj();
      os_log_type_t v21 = type;
      if (!os_log_type_enabled(v20, type)) {
        goto LABEL_48;
      }
      *(_DWORD *)tcp_info buf = 136446210;
      os_log_type_t v28 = "__nw_protocol_notify";
      BOOL v22 = "%{public}s called with null type, backtrace limit exceeded";
    }
    _os_log_impl(&dword_1830D4000, v20, v21, v22, buf, 0xCu);
    goto LABEL_48;
  }
  v6(a1, a2);
LABEL_13:
  if (v9 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
  {
    uint64_t v11 = *(void *)(a2 + 88);
    if (v11)
    {
      uint64_t v12 = v11 - 1;
      *(void *)(a2 + 88) = v12;
      if (!v12)
      {
        char v13 = *(void (***)(void))(a2 + 64);
        if (v13)
        {
          *(void *)(a2 + 64) = 0;
          v13[2](v13);
          _Block_release(v13);
        }
        if (*(unsigned char *)(a2 + 72))
        {
          uint64_t v14 = *(const void **)(a2 + 64);
          if (v14) {
            _Block_release(v14);
          }
        }
        free((void *)a2);
      }
    }
  }
  if (v7 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
  {
    uint64_t v15 = *(void *)(a1 + 88);
    if (v15)
    {
      uint64_t v16 = v15 - 1;
      *(void *)(a1 + 88) = v16;
      if (!v16)
      {
        uint64_t v17 = *(void (***)(void))(a1 + 64);
        if (v17)
        {
          *(void *)(a1 + 64) = 0;
          v17[2](v17);
          _Block_release(v17);
        }
        if (*(unsigned char *)(a1 + 72))
        {
          os_log_type_t v18 = *(const void **)(a1 + 64);
          if (v18) {
            _Block_release(v18);
          }
        }
        free((void *)a1);
      }
    }
  }
}

BOOL nw_quic_stream_get_is_unidirectional(void *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (nw_protocol_options_is_quic_stream(v1))
  {
    *(void *)tcp_info buf = 0;
    *(void *)&sockaddr buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000;
    char v16 = 0;
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_quic_stream_get_is_unidirectional_block_invoke;
    v12[3] = &unk_1E5248E90;
    void v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    BOOL v2 = *(unsigned char *)(*(void *)&buf[8] + 24) != 0;
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  uint64_t v4 = __nwlog_obj();
  *(_DWORD *)tcp_info buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_quic_stream_get_is_unidirectional";
  char v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_stream_get_is_unidirectional";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_options_is_quic_stream(options)", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_quic_stream_get_is_unidirectional";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_stream(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_stream_get_is_unidirectional";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_stream(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_stream_get_is_unidirectional";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_options_is_quic_stream(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
  BOOL v2 = 0;
LABEL_3:

  return v2;
}

void sub_1832FB888(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

BOOL nw_quic_stream_get_is_datagram(void *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (nw_protocol_options_is_quic_stream(v1))
  {
    *(void *)tcp_info buf = 0;
    *(void *)&sockaddr buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000;
    char v16 = 0;
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_quic_stream_get_is_datagram_block_invoke;
    v12[3] = &unk_1E5248E90;
    void v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    BOOL v2 = *(unsigned char *)(*(void *)&buf[8] + 24) != 0;
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  uint64_t v4 = __nwlog_obj();
  *(_DWORD *)tcp_info buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_quic_stream_get_is_datagram";
  char v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_stream_get_is_datagram";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_options_is_quic_stream(options)", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_quic_stream_get_is_datagram";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_stream(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_stream_get_is_datagram";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_stream(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_stream_get_is_datagram";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_options_is_quic_stream(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
  BOOL v2 = 0;
LABEL_3:

  return v2;
}

void sub_1832FBBD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

uint64_t ___ZL29nw_path_allowed_by_parametersP18NWConcrete_nw_pathb_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  unsigned int value = xpc_uint64_get_value(v4);
  uint64_t v11 = *(void *)(a1 + 32);
  if (*(void *)(v11 + 96) && *(_DWORD *)(a1 + 48) == value || *(void *)(v11 + 104) && *(_DWORD *)(a1 + 52) == value)
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
    if (*(unsigned char *)(a1 + 56))
    {
      if (value > 4) {
        uint64_t v12 = "unknown";
      }
      else {
        uint64_t v12 = off_1E524BC28[value];
      }
      nw_path_set_reason(*(void **)(a1 + 32), 6, "Interface type '%s' is prohibited by parameters", v6, v7, v8, v9, v10, (char)v12);
    }
    uint64_t v13 = 0;
  }
  else
  {
    uint64_t v13 = 1;
  }

  return v13;
}

void sub_1832FBCBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t net_flowhash_jhash(int *a1, unsigned int a2, int a3)
{
  uint64_t result = a2 + a3 - 559038737;
  if ((a1 & 3) != 0)
  {
    if (a1)
    {
      if (a2 >= 0xD)
      {
        int v42 = a2 + a3 - 559038737;
        int v41 = v42;
        do
        {
          int v27 = v42
              + *((unsigned __int8 *)a1 + 4)
              + (*((unsigned __int8 *)a1 + 5) << 8)
              + (*((unsigned __int8 *)a1 + 6) << 16)
              + (*((unsigned __int8 *)a1 + 7) << 24);
          int v28 = result
              + *((unsigned __int8 *)a1 + 8)
              + (*((unsigned __int8 *)a1 + 9) << 8)
              + (*((unsigned __int8 *)a1 + 10) << 16)
              + (*((unsigned __int8 *)a1 + 11) << 24);
          int v29 = (v41
               + *(unsigned __int8 *)a1
               + (*((unsigned __int8 *)a1 + 1) << 8)
               + (*((unsigned __int8 *)a1 + 2) << 16)
               + (*((unsigned __int8 *)a1 + 3) << 24)
               - v28) ^ __ROR4__(v28, 28);
          int v30 = v28 + v27;
          int v31 = (v27 - v29) ^ __ROR4__(v29, 26);
          int v32 = v29 + v30;
          int v33 = (v30 - v31) ^ __ROR4__(v31, 24);
          int v34 = v31 + v32;
          int v35 = (v32 - v33) ^ __ROR4__(v33, 16);
          int v36 = v33 + v34;
          int v37 = (v34 - v35) ^ __ROR4__(v35, 13);
          int v41 = v35 + v36;
          uint64_t result = (v36 - v37) ^ __ROR4__(v37, 28);
          int v42 = v37 + v41;
          a2 -= 12;
          a1 += 3;
        }
        while (a2 > 0xC);
      }
      else
      {
        int v41 = a2 + a3 - 559038737;
        int v42 = v41;
      }
      switch(a2)
      {
        case 0u:
          return result;
        case 1u:
          goto LABEL_34;
        case 2u:
          goto LABEL_33;
        case 3u:
          goto LABEL_32;
        case 4u:
          goto LABEL_31;
        case 5u:
          goto LABEL_30;
        case 6u:
          goto LABEL_29;
        case 7u:
          goto LABEL_28;
        case 8u:
          goto LABEL_27;
        case 9u:
          goto LABEL_26;
        case 0xAu:
          goto LABEL_25;
        case 0xBu:
          goto LABEL_24;
        case 0xCu:
          LODWORD(result) = result + (*((unsigned __int8 *)a1 + 11) << 24);
LABEL_24:
          LODWORD(result) = result + (*((unsigned __int8 *)a1 + 10) << 16);
LABEL_25:
          LODWORD(result) = result + (*((unsigned __int8 *)a1 + 9) << 8);
LABEL_26:
          LODWORD(result) = result + *((unsigned __int8 *)a1 + 8);
LABEL_27:
          v42 += *((unsigned __int8 *)a1 + 7) << 24;
LABEL_28:
          v42 += *((unsigned __int8 *)a1 + 6) << 16;
LABEL_29:
          v42 += *((unsigned __int8 *)a1 + 5) << 8;
LABEL_30:
          v42 += *((unsigned __int8 *)a1 + 4);
LABEL_31:
          v41 += *((unsigned __int8 *)a1 + 3) << 24;
LABEL_32:
          v41 += *((unsigned __int8 *)a1 + 2) << 16;
LABEL_33:
          v41 += *((unsigned __int8 *)a1 + 1) << 8;
LABEL_34:
          v41 += *(unsigned __int8 *)a1;
          break;
        default:
          break;
      }
      HIDWORD(v43) = v42;
      LODWORD(v43) = v42;
      HIDWORD(v43) = (result ^ v42) - (v43 >> 18);
      int v44 = HIDWORD(v43);
      LODWORD(v43) = HIDWORD(v43);
      int v45 = (HIDWORD(v43) ^ v41) - (v43 >> 21);
      HIDWORD(v43) = v45;
      LODWORD(v43) = v45;
      int v46 = (v45 ^ v42) - (v43 >> 7);
      HIDWORD(v43) = v46;
      LODWORD(v43) = v46;
      int v47 = (v46 ^ v44) - (v43 >> 16);
      HIDWORD(v43) = v47;
      LODWORD(v43) = v47;
      HIDWORD(v43) = (v47 ^ v45) - (v43 >> 28);
      LODWORD(v43) = HIDWORD(v43);
      int v48 = v43 >> 18;
      int v49 = HIDWORD(v43) ^ v46;
      goto LABEL_62;
    }
    if (a2 >= 0xD)
    {
      int v40 = a2 + a3 - 559038737;
      int v39 = v40;
      do
      {
        int v5 = a1[1] + v40;
        int v6 = a1[2] + result;
        int v7 = (*a1 + v39 - v6) ^ __ROR4__(v6, 28);
        int v8 = v6 + v5;
        int v9 = (v5 - v7) ^ __ROR4__(v7, 26);
        int v10 = v7 + v8;
        int v11 = (v8 - v9) ^ __ROR4__(v9, 24);
        int v12 = v9 + v10;
        int v13 = (v10 - v11) ^ __ROR4__(v11, 16);
        int v14 = v11 + v12;
        int v15 = (v12 - v13) ^ __ROR4__(v13, 13);
        int v39 = v13 + v14;
        uint64_t result = (v14 - v15) ^ __ROR4__(v15, 28);
        int v40 = v15 + v39;
        a2 -= 12;
        a1 += 3;
      }
      while (a2 > 0xC);
    }
    else
    {
      int v39 = a2 + a3 - 559038737;
      int v40 = v39;
    }
    switch(a2)
    {
      case 0u:
        return result;
      case 1u:
        v39 += *(unsigned __int8 *)a1;
        goto LABEL_61;
      case 2u:
        goto LABEL_48;
      case 3u:
        v39 += *((unsigned __int8 *)a1 + 2) << 16;
LABEL_48:
        v39 += *(unsigned __int16 *)a1;
        goto LABEL_61;
      case 4u:
        goto LABEL_53;
      case 5u:
        int v54 = *((unsigned __int8 *)a1 + 4);
        goto LABEL_52;
      case 6u:
        goto LABEL_51;
      case 7u:
        v40 += *((unsigned __int8 *)a1 + 6) << 16;
LABEL_51:
        int v54 = *((unsigned __int16 *)a1 + 2);
LABEL_52:
        v40 += v54;
        goto LABEL_53;
      case 8u:
        break;
      case 9u:
        int v55 = *((unsigned __int8 *)a1 + 8);
        goto LABEL_57;
      case 0xAu:
        goto LABEL_56;
      case 0xBu:
        LODWORD(result) = result + (*((unsigned __int8 *)a1 + 10) << 16);
LABEL_56:
        int v55 = *((unsigned __int16 *)a1 + 4);
LABEL_57:
        LODWORD(result) = result + v55;
        break;
      case 0xCu:
        goto LABEL_36;
      default:
        goto LABEL_61;
    }
  }
  else
  {
    if (a2 < 0xD)
    {
      int v39 = a2 + a3 - 559038737;
      int v40 = v39;
    }
    else
    {
      int v40 = a2 + a3 - 559038737;
      int v39 = v40;
      do
      {
        int v16 = a1[1] + v40;
        int v17 = a1[2] + result;
        int v18 = (*a1 + v39 - v17) ^ __ROR4__(v17, 28);
        int v19 = v17 + v16;
        int v20 = (v16 - v18) ^ __ROR4__(v18, 26);
        int v21 = v18 + v19;
        int v22 = (v19 - v20) ^ __ROR4__(v20, 24);
        int v23 = v20 + v21;
        int v24 = (v21 - v22) ^ __ROR4__(v22, 16);
        int v25 = v22 + v23;
        int v26 = (v23 - v24) ^ __ROR4__(v24, 13);
        int v39 = v24 + v25;
        uint64_t result = (v25 - v26) ^ __ROR4__(v26, 28);
        int v40 = v26 + v39;
        a2 -= 12;
        a1 += 3;
      }
      while (a2 > 0xC);
    }
    switch(a2)
    {
      case 0u:
        return result;
      case 1u:
        int v38 = *(unsigned __int8 *)a1;
        goto LABEL_60;
      case 2u:
        int v38 = *(unsigned __int16 *)a1;
        goto LABEL_60;
      case 3u:
        int v38 = *a1 & 0xFFFFFF;
        goto LABEL_60;
      case 4u:
        goto LABEL_53;
      case 5u:
        int v51 = *((unsigned __int8 *)a1 + 4);
        goto LABEL_41;
      case 6u:
        int v51 = *((unsigned __int16 *)a1 + 2);
LABEL_41:
        v40 += v51;
LABEL_53:
        int v38 = *a1;
        goto LABEL_60;
      case 7u:
        os_log_type_t v52 = a1;
        int v38 = *a1;
        int v53 = v52[1] & 0xFFFFFF;
        goto LABEL_59;
      case 8u:
        break;
      case 9u:
        int v50 = *((unsigned __int8 *)a1 + 8);
        goto LABEL_46;
      case 0xAu:
        int v50 = *((unsigned __int16 *)a1 + 4);
        goto LABEL_46;
      case 0xBu:
        int v50 = a1[2] & 0xFFFFFF;
        goto LABEL_46;
      case 0xCu:
LABEL_36:
        int v50 = a1[2];
LABEL_46:
        LODWORD(result) = v50 + result;
        break;
      default:
        goto LABEL_61;
    }
  }
  os_log_type_t v56 = a1;
  int v38 = *a1;
  int v53 = v56[1];
LABEL_59:
  v40 += v53;
LABEL_60:
  v39 += v38;
LABEL_61:
  HIDWORD(v57) = v40;
  LODWORD(v57) = v40;
  HIDWORD(v57) = (result ^ v40) - (v57 >> 18);
  int v58 = HIDWORD(v57);
  LODWORD(v57) = HIDWORD(v57);
  int v59 = (HIDWORD(v57) ^ v39) - (v57 >> 21);
  HIDWORD(v57) = v59;
  LODWORD(v57) = v59;
  int v60 = (v59 ^ v40) - (v57 >> 7);
  HIDWORD(v57) = v60;
  LODWORD(v57) = v60;
  int v47 = (v60 ^ v58) - (v57 >> 16);
  HIDWORD(v57) = v47;
  LODWORD(v57) = v47;
  HIDWORD(v57) = (v47 ^ v59) - (v57 >> 28);
  LODWORD(v57) = HIDWORD(v57);
  int v48 = v57 >> 18;
  int v49 = HIDWORD(v57) ^ v60;
LABEL_62:
  HIDWORD(v61) = v49 - v48;
  LODWORD(v61) = v49 - v48;
  return ((v49 - v48) ^ v47) - (v61 >> 8);
}

void nw_protocol_definition_set_multipath(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    if (a2) {
      char v5 = 16;
    }
    else {
      char v5 = 0;
    }
    *((unsigned char *)v3 + 184) = *((unsigned char *)v3 + 184) & 0xEF | v5;
    goto LABEL_6;
  }
  int v6 = __nwlog_obj();
  *(_DWORD *)tcp_info buf = 136446210;
  int v17 = "nw_protocol_definition_set_multipath";
  int v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        int v17 = "nw_protocol_definition_set_multipath";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null definition", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v8 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          int v17 = "nw_protocol_definition_set_multipath";
          __int16 v18 = 2082;
          int v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null definition, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v12)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        int v17 = "nw_protocol_definition_set_multipath";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null definition, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        int v17 = "nw_protocol_definition_set_multipath";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null definition, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_23:
  if (v7) {
    free(v7);
  }
LABEL_6:
}

void __nw_mem_cache_update_set_timer_block_invoke()
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  os_unfair_lock_lock((os_unfair_lock_t)&nw_mem_cache_lock);
  uint64_t v0 = nw_mem_cache_head;
  if (nw_mem_cache_head)
  {
    while (1)
    {
      uint64_t v1 = *(void *)(v0 + 216);
      if (!v1) {
        break;
      }
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 0x40000000;
      int v16 = ___ZL19nw_mem_cache_updateP12nw_mem_cache_block_invoke;
      int v17 = &__block_descriptor_tmp_7_55848;
      uint64_t v18 = v0;
      if (*(void *)(v1 + 272))
      {
        if (dispatch_workloop_is_current()) {
          v16((uint64_t)block);
        }
        else {
          dispatch_async(*(dispatch_queue_t *)(v1 + 272), block);
        }
      }
      else
      {
        ___ZL19nw_mem_cache_updateP12nw_mem_cache_block_invoke((uint64_t)block);
      }
LABEL_4:
      uint64_t v0 = *(void *)(v0 + 80);
      if (!v0) {
        goto LABEL_26;
      }
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)tcp_info buf = 136446210;
    int v22 = "nw_mem_cache_update";
    BOOL v2 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (__nwlog_fault(v2, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v12 = gLogObj;
        os_log_type_t log = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
          goto LABEL_24;
        }
        *(_DWORD *)tcp_info buf = 136446210;
        int v22 = "nw_mem_cache_update";
        id v3 = v12;
        os_log_type_t v4 = log;
        char v5 = "%{public}s called with null nwm->nwm_region";
        goto LABEL_23;
      }
      if (!v19)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        char v14 = gLogObj;
        os_log_type_t logb = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
          goto LABEL_24;
        }
        *(_DWORD *)tcp_info buf = 136446210;
        int v22 = "nw_mem_cache_update";
        id v3 = v14;
        os_log_type_t v4 = logb;
        char v5 = "%{public}s called with null nwm->nwm_region, backtrace limit exceeded";
        goto LABEL_23;
      }
      backtrace_string = __nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_t loga = gLogObj;
      os_log_type_t v8 = type;
      BOOL v6 = os_log_type_enabled((os_log_t)gLogObj, type);
      int v7 = (char *)backtrace_string;
      if (backtrace_string)
      {
        if (v6)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          int v22 = "nw_mem_cache_update";
          __int16 v23 = 2082;
          int v24 = backtrace_string;
          _os_log_impl(&dword_1830D4000, loga, v8, "%{public}s called with null nwm->nwm_region, dumping backtrace:%{public}s", buf, 0x16u);
          int v7 = (char *)backtrace_string;
        }
        free(v7);
        goto LABEL_24;
      }
      if (v6)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        int v22 = "nw_mem_cache_update";
        id v3 = loga;
        os_log_type_t v4 = v8;
        char v5 = "%{public}s called with null nwm->nwm_region, no backtrace";
LABEL_23:
        _os_log_impl(&dword_1830D4000, v3, v4, v5, buf, 0xCu);
      }
    }
LABEL_24:
    if (v2) {
      free(v2);
    }
    goto LABEL_4;
  }
LABEL_26:
  os_unfair_lock_unlock((os_unfair_lock_t)&nw_mem_cache_lock);
  nw_mem_cache_stats_dump();
  nw_mem_cache_update_set_timer::cache_update_timer_set = 0;
  if (nw_mem_cache_operations_during_interval == 1)
  {
    nw_mem_cache_operations_during_interval = 0;
    nw_mem_cache_update_set_timer();
  }
}

void ___ZL19nw_mem_cache_updateP12nw_mem_cache_block_invoke(uint64_t a1)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 32);
  unint64_t v2 = *(void *)(v1 + 8);
  unint64_t v3 = *(void *)(v1 + 280);
  BOOL v4 = (v2 <= 2 * v3 || v3 + 1 >= *(void *)(v1 + 264)) && (v2 >= v3 >> 1 || v3 <= *(void *)(v1 + 256));
  *(void *)(v1 + 364) = *(void *)(v1 + 360);
  *(void *)(v1 + 396) = *(void *)(v1 + 392);
  uint64_t v5 = *(void *)(v1 + 64);
  if (*(void *)(v1 + 232) >= *(void *)(*(void *)(v1 + 336) + 16))
  {
    BOOL v6 = 1;
    *(void *)(v1 + 72) = v5;
    if (v4) {
      goto LABEL_36;
    }
  }
  else
  {
    BOOL v6 = (int)v5 - *(_DWORD *)(v1 + 72) < 4;
    *(void *)(v1 + 72) = v5;
    if (v4) {
      goto LABEL_36;
    }
  }
  unint64_t v7 = *(void *)(v1 + 256);
  if (v7 <= 1 << (flsll(3 * v2 + 4) - 2)) {
    size_t v8 = 1 << (flsll(3 * *(void *)(v1 + 8) + 4) - 2);
  }
  else {
    size_t v8 = *(void *)(v1 + 256);
  }
  if (*(void *)(v1 + 264) >= v8) {
    size_t v9 = v8;
  }
  else {
    size_t v9 = *(void *)(v1 + 264);
  }
  unint64_t v10 = *(void *)(v1 + 280) + 1;
  if (v9 < v10 >> 1 || v9 > 2 * v10)
  {
    BOOL v12 = nw_calloc_type<nw_mem_bufctl_bkt>(v9);
    if (v9)
    {
      if (v9 >= 0xE && (v9 ? (BOOL v13 = (v9 - 1) >> 32 == 0) : (BOOL v13 = 0), v13))
      {
        unint64_t v14 = v9 & 0xFFFFFFFFFFFFFFFCLL;
        int v32 = (_OWORD *)v12;
        unint64_t v33 = v9 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          _OWORD *v32 = 0uLL;
          v32[1] = 0uLL;
          v32 += 2;
          v33 -= 4;
        }
        while (v33);
        int v15 = v9 & 0xFFFFFFFC;
        if (v9 == v14) {
          goto LABEL_31;
        }
      }
      else
      {
        unint64_t v14 = 0;
        int v15 = 0;
      }
      unsigned int v16 = v15 + 1;
      do
      {
        *(void *)(v12 + 8 * v14) = 0;
        unint64_t v14 = v16++;
      }
      while (v9 > v14);
    }
LABEL_31:
    uint64_t v17 = *(void *)(v1 + 280);
    uint64_t v18 = *(void **)(v1 + 288);
    *(void *)(v1 + 280) = v9 - 1;
    *(void *)(v1 + 288) = v12;
    ++*(void *)(v1 + 24);
    unint64_t v19 = v17 + 1;
    if (v17 == -1)
    {
      int v20 = 0;
    }
    else
    {
      uint64_t v28 = 0;
      int v20 = 0;
      do
      {
        int v29 = (void *)v18[v28];
        if (v29)
        {
          uint64_t v30 = *(void *)(v1 + 272);
          do
          {
            v18[v28] = *v29;
            uint64_t v31 = 8 * ((v29[1] >> v30) & (v9 - 1));
            *int v29 = *(void *)(v12 + v31);
            *(void *)(v12 + v31) = v29;
            ++v20;
            int v29 = (void *)v18[v28];
          }
          while (v29);
        }
        ++v28;
      }
      while (v19 > v28);
    }
    if (gLogDatapath)
    {
      int v35 = __nwlog_obj();
      if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)int v39 = 136447234;
        *(void *)&v39[4] = "nw_mem_cache_hash_rescale";
        __int16 v40 = 2048;
        uint64_t v41 = v1;
        __int16 v42 = 1024;
        int v43 = v19;
        __int16 v44 = 1024;
        int v45 = v9;
        __int16 v46 = 1024;
        int v47 = v20;
        _os_log_impl(&dword_1830D4000, v35, OS_LOG_TYPE_DEBUG, "%{public}s nwm %p old_size %u new_size %u [%u moved]", v39, 0x28u);
      }
    }
    if (v18) {
      free(v18);
    }
  }
LABEL_36:
  if (!v6)
  {
    uint64_t v21 = *(void *)(v1 + 336);
    if (*(void *)(v1 + 232) < *(void *)(v21 + 16))
    {
      nw_mem_cache_magazine_purge(v1);
      *(void *)(v1 + 336) = v21 + 88;
      *(void *)(v1 + 72) = *(void *)(v1 + 64) + 0x7FFFFFFFLL;
      if ((*(unsigned char *)(v1 + 176) & 1) == 0)
      {
        *(_DWORD *)(v1 + 560) = *(_DWORD *)(v21 + 88);
        if (gLogDatapath)
        {
          int v36 = __nwlog_obj();
          if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v37 = *(void *)(v1 + 232);
            int v38 = *(_DWORD *)(v1 + 560);
            *(_DWORD *)int v39 = 136446978;
            *(void *)&v39[4] = "nw_mem_cache_magazine_enable";
            __int16 v40 = 2048;
            uint64_t v41 = v1;
            __int16 v42 = 1024;
            int v43 = v37;
            __int16 v44 = 1024;
            int v45 = v38;
            _os_log_impl(&dword_1830D4000, v36, OS_LOG_TYPE_DEBUG, "%{public}s nwm %p chunksize %u magsize %d", v39, 0x22u);
          }
        }
      }
    }
  }
  nw_mem_depot_ws_reap(v1);
  *(void *)int v39 = 0;
  if (!mach_timebase_info((mach_timebase_info_t)v39))
  {
    uint64_t v22 = mach_absolute_time() * *(unsigned int *)v39 / *(unsigned int *)&v39[4];
    unint64_t v23 = v22 / 0x3B9ACA00;
    *(void *)&nw_mem_get_current_time::current_time = v22 / 0x3B9ACA00;
    *((void *)&nw_mem_get_current_time::current_time + 1) = v22 % 0x3B9ACA00;
    uint64_t v24 = *(void *)(v1 + 408);
    if (v24 >= 1 && (uint64_t)(v23 - v24) >= 7)
    {
      nw_mem_cache_magazine_purge(v1);
      if ((*(unsigned char *)(v1 + 176) & 1) == 0)
      {
        *(_DWORD *)(v1 + 560) = **(_DWORD **)(v1 + 336);
        if (gLogDatapath)
        {
          uint64_t v25 = __nwlog_obj();
          if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v26 = *(void *)(v1 + 232);
            int v27 = *(_DWORD *)(v1 + 560);
            *(_DWORD *)int v39 = 136446978;
            *(void *)&v39[4] = "nw_mem_cache_magazine_enable";
            __int16 v40 = 2048;
            uint64_t v41 = v1;
            __int16 v42 = 1024;
            int v43 = v26;
            __int16 v44 = 1024;
            int v45 = v27;
            _os_log_impl(&dword_1830D4000, v25, OS_LOG_TYPE_DEBUG, "%{public}s nwm %p chunksize %u magsize %d", v39, 0x22u);
          }
        }
      }
    }
  }
  os_unfair_lock_lock((os_unfair_lock_t)&nw_mem_region_lock);
  if (g_process_transaction)
  {
    if ((g_transaction_touched & 1) == 0)
    {
      os_release((void *)g_process_transaction);
      g_process_transaction = 0;
      g_transaction_touched = 0;
      if (gLogDatapath)
      {
        int v34 = __nwlog_obj();
        if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)int v39 = 136446210;
          *(void *)&v39[4] = "nw_mem_region_reap_transaction";
          _os_log_impl(&dword_1830D4000, v34, OS_LOG_TYPE_DEBUG, "%{public}s os transaction disabled after idle", v39, 0xCu);
        }
      }
    }
  }
  g_transaction_touched = 0;
  os_unfair_lock_unlock((os_unfair_lock_t)&nw_mem_region_lock);
}

void nw_mem_depot_ws_reap(uint64_t a1)
{
  unsigned int v2 = *(_DWORD *)(a1 + 368);
  unsigned int v3 = *(_DWORD *)(a1 + 364);
  if (v2 >= v3) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = v2;
  }
  if (v4)
  {
    do
    {
      size_t v8 = *(void **)(a1 + 352);
      if (!v8) {
        break;
      }
      *(void *)(a1 + 352) = *v8;
      unsigned int v9 = *(_DWORD *)(a1 + 360) - 1;
      *(_DWORD *)(a1 + 360) = v9;
      if (v9 < *(_DWORD *)(a1 + 364)) {
        *(_DWORD *)(a1 + 364) = v9;
      }
      unint64_t v10 = *(unsigned int **)(a1 + 336);
      ++*(void *)(a1 + 344);
      uint64_t v11 = *v10;
      if ((int)v11 >= 1)
      {
        BOOL v12 = v8 + 1;
        do
        {
          unint64_t v13 = *v12;
          unint64_t v14 = *(void (**)(unint64_t, void))(a1 + 192);
          if (v14) {
            v14(*v12, *(void *)(a1 + 208));
          }
          nw_mem_slab_free(a1, v13);
          ++v12;
          --v11;
        }
        while (v11);
      }
      --v4;
      malloc_zone_free((malloc_zone_t *)g_slab_zone, v8);
    }
    while (v4);
  }
  unsigned int v5 = *(_DWORD *)(a1 + 400);
  unsigned int v6 = *(_DWORD *)(a1 + 396);
  if (v5 >= v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = v5;
  }
  if (v7)
  {
    do
    {
      int v15 = *(void **)(a1 + 384);
      if (!v15) {
        break;
      }
      *(void *)(a1 + 384) = *v15;
      unsigned int v16 = *(_DWORD *)(a1 + 392) - 1;
      *(_DWORD *)(a1 + 392) = v16;
      if (v16 < *(_DWORD *)(a1 + 396)) {
        *(_DWORD *)(a1 + 396) = v16;
      }
      --v7;
      ++*(void *)(a1 + 376);
      malloc_zone_free((malloc_zone_t *)g_slab_zone, v15);
    }
    while (v7);
  }
}

void nw_mem_cache_magazine_purge(uint64_t a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (gLogDatapath)
  {
    unint64_t v14 = __nwlog_obj();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
    {
      int v15 = 136446466;
      unsigned int v16 = "nw_mem_cache_magazine_purge";
      __int16 v17 = 2048;
      uint64_t v18 = a1;
      _os_log_impl(&dword_1830D4000, v14, OS_LOG_TYPE_DEBUG, "%{public}s nwm %p", (uint8_t *)&v15, 0x16u);
    }
  }
  unsigned int v2 = *(unint64_t **)(a1 + 520);
  unsigned int v3 = *(unint64_t **)(a1 + 528);
  uint64_t v4 = *(unsigned int *)(a1 + 552);
  uint64_t v5 = *(unsigned int *)(a1 + 556);
  *(void *)(a1 + 528) = 0;
  *(void *)(a1 + 520) = 0;
  *(_DWORD *)(a1 + 560) = 0;
  *(void *)(a1 + 552) = -1;
  if (v2)
  {
    if ((int)v4 >= 1)
    {
      unsigned int v6 = v2 + 1;
      do
      {
        unint64_t v7 = *v6;
        size_t v8 = *(void (**)(unint64_t, void))(a1 + 192);
        if (v8) {
          v8(*v6, *(void *)(a1 + 208));
        }
        nw_mem_slab_free(a1, v7);
        ++v6;
        --v4;
      }
      while (v4);
    }
    malloc_zone_free((malloc_zone_t *)g_slab_zone, v2);
  }
  if (v3)
  {
    if ((int)v5 >= 1)
    {
      unsigned int v9 = v3 + 1;
      do
      {
        unint64_t v10 = *v9;
        uint64_t v11 = *(void (**)(unint64_t, void))(a1 + 192);
        if (v11) {
          v11(*v9, *(void *)(a1 + 208));
        }
        nw_mem_slab_free(a1, v10);
        ++v9;
        --v5;
      }
      while (v5);
    }
    malloc_zone_free((malloc_zone_t *)g_slab_zone, v3);
  }
  int v12 = *(_DWORD *)(a1 + 360);
  *(_DWORD *)(a1 + 368) = v12;
  *(_DWORD *)(a1 + 364) = v12;
  int v13 = *(_DWORD *)(a1 + 392);
  *(_DWORD *)(a1 + 400) = v13;
  *(_DWORD *)(a1 + 396) = v13;
  nw_mem_depot_ws_reap(a1);
}

void nw_mem_slab_free(uint64_t a1, unint64_t a2)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  ++*(void *)(a1 + 56);
  uint64_t v4 = (void **)(*(void *)(a1 + 288) + 8 * ((a2 >> *(void *)(a1 + 272)) & *(void *)(a1 + 280)));
  uint64_t v5 = v4;
  do
  {
    uint64_t v5 = (void **)*v5;
    if (!v5)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
      *(_DWORD *)uint64_t v31 = 136446722;
      *(void *)&void v31[4] = "nw_mem_slab_free";
      *(_WORD *)&v31[12] = 2048;
      *(void *)&v31[14] = a2;
      *(_WORD *)&v31[22] = 2048;
      *(void *)&v31[24] = a1;
      size_t v8 = (void *)_os_log_send_and_compose_impl();
      if (!__nwlog_abort((uint64_t)v8))
      {
        free(v8);
        uint64_t v5 = 0;
        unint64_t v7 = 0;
        goto LABEL_9;
      }
      goto LABEL_42;
    }
  }
  while (v5[1] != (void *)a2);
  for (i = *v4; i != v5; i = (void *)*i)
    uint64_t v4 = (void **)i;
  *uint64_t v4 = *v5;
  unint64_t v7 = (char *)v5[3];
LABEL_9:
  if (a2 - *((void *)v7 + 3) >= *(void *)(*((void *)v7 + 2) + 248))
  {
    uint64_t v25 = __nwlog_obj();
    os_log_type_enabled(v25, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v31 = 136446466;
    *(void *)&void v31[4] = "nw_mem_slab_free";
    *(_WORD *)&v31[12] = 2082;
    *(void *)&v31[14] = "VERIFY NW_MEM_SLAB_MEMBER(sl, buf) failed";
    uint64_t v26 = (void *)_os_log_send_and_compose_impl();
    if (!__nwlog_abort((uint64_t)v26))
    {
      free(v26);
      if ((*(unsigned char *)(a1 + 176) & 2) != 0) {
        goto LABEL_36;
      }
      goto LABEL_11;
    }
LABEL_42:
    __break(1u);
    return;
  }
  if ((*(unsigned char *)(a1 + 176) & 2) == 0) {
    goto LABEL_11;
  }
LABEL_36:
  *(void *)uint64_t v31 = 0;
  *(void *)&v31[8] = 0;
  gettimeofday((timeval *)v31, 0);
  v5[4] = (void *)(1000 * *(void *)v31 + *(_DWORD *)&v31[8] / 1000);
  *((_DWORD *)v5 + 11) = backtrace((void **)v5 + 6, 16);
LABEL_11:
  unint64_t v10 = (void **)(v7 + 56);
  unsigned int v9 = (void *)*((void *)v7 + 7);
  const char *v5 = v9;
  *((void *)v7 + 7) = v5;
  int v11 = *((_DWORD *)v7 + 16) - 1;
  *((_DWORD *)v7 + 16) = v11;
  if (v11)
  {
    if (!v9)
    {
      uint64_t v12 = *(void *)v7;
      int v13 = (void *)*((void *)v7 + 1);
      if (*(void *)v7)
      {
        *(void *)(v12 + 8) = v13;
        int v13 = (void *)*((void *)v7 + 1);
      }
      else
      {
        *(void *)(a1 + 320) = v13;
      }
      *int v13 = v12;
      uint64_t v17 = *(void *)(a1 + 296);
      *(void *)unint64_t v7 = v17;
      if (v17) {
        uint64_t v18 = (void *)(v17 + 8);
      }
      else {
        uint64_t v18 = (void *)(a1 + 304);
      }
      void *v18 = v7;
      *(void *)(a1 + 296) = v7;
      *((void *)v7 + 1) = a1 + 296;
    }
    return;
  }
  uint64_t v14 = *((unsigned int *)v7 + 17);
  uint64_t v15 = *(void *)v7;
  unsigned int v16 = (void *)*((void *)v7 + 1);
  if (v14 != 1)
  {
    if (!v15)
    {
      *(void *)(a1 + 304) = v16;
      goto LABEL_26;
    }
    goto LABEL_19;
  }
  if (v15)
  {
LABEL_19:
    *(void *)(v15 + 8) = v16;
    unsigned int v16 = (void *)*((void *)v7 + 1);
    goto LABEL_26;
  }
  *(void *)(a1 + 320) = v16;
LABEL_26:
  void *v16 = v15;
  *(void *)(a1 + 8) -= v14;
  ++*(void *)(a1 + 40);
  unint64_t v19 = *((void *)v7 + 3);
  uint64_t v20 = *((void *)v7 + 4);
  if (gLogDatapath)
  {
    int v27 = __nwlog_obj();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t v31 = 136446722;
      *(void *)&void v31[4] = "nw_mem_slab_destroy";
      *(_WORD *)&v31[12] = 2048;
      *(void *)&v31[14] = a1;
      *(_WORD *)&v31[22] = 2048;
      *(void *)&v31[24] = v7;
      _os_log_impl(&dword_1830D4000, v27, OS_LOG_TYPE_DEBUG, "%{public}s nwm %p sl %p", v31, 0x20u);
    }
    if (gLogDatapath)
    {
      uint64_t v28 = __nwlog_obj();
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
      {
        int v29 = *(_DWORD *)(*((void *)v7 + 5) + 40);
        unint64_t v30 = v19 + *(void *)(a1 + 240);
        *(_DWORD *)uint64_t v31 = 136446978;
        *(void *)&void v31[4] = "nw_mem_slab_destroy";
        *(_WORD *)&v31[12] = 1024;
        *(_DWORD *)&v31[14] = v29;
        *(_WORD *)&v31[18] = 2048;
        *(void *)&v31[20] = v19;
        *(_WORD *)&v31[28] = 2048;
        *(void *)&v31[30] = v30;
        _os_log_impl(&dword_1830D4000, v28, OS_LOG_TYPE_DEBUG, "%{public}s   [%u] [%p-%p)", v31, 0x26u);
      }
    }
  }
  uint64_t v21 = *v10;
  if (*v10)
  {
    do
    {
      unint64_t v23 = *v10;
      for (j = v7 + 56; v23 != v21; unint64_t v23 = (void *)*v23)
        j = v23;
      uint64_t v22 = (void *)*v21;
      void *j = *v21;
      malloc_zone_free((malloc_zone_t *)g_slab_zone, v21);
      uint64_t v21 = v22;
    }
    while (v22);
  }
  malloc_zone_free((malloc_zone_t *)g_slab_zone, v7);
  nw_mem_region_free(*(void *)(a1 + 216), v19, v20);
}

void nw_mem_region_free(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(a1 + 360)
     + 16
     * (((a2 >> *(void *)(a1 + 344)) + a2 + (a2 >> (2 * *(void *)(a1 + 344)))) & *(void *)(a1 + 352));
  unint64_t v7 = *(void **)v6;
  do
  {
    if (!v7)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
      *(_DWORD *)tcp_info buf = 136446466;
      uint64_t v31 = "nw_mem_region_free";
      __int16 v32 = 2082;
      *(void *)unint64_t v33 = "VERIFY sg != NULL failed";
      unint64_t v10 = (void *)_os_log_send_and_compose_impl();
      if (!__nwlog_abort((uint64_t)v10))
      {
        free(v10);
        nw_segment_freelist_insert((void *)a1, 0, 0);
        uint64_t v8 = 0;
        goto LABEL_10;
      }
LABEL_35:
      __break(1u);
      return;
    }
    uint64_t v8 = (uint64_t)v7;
    unint64_t v7 = (void *)*v7;
  }
  while (*(void *)(v8 + 24) != a2);
  unsigned int v9 = *(void **)(v8 + 8);
  if (v7)
  {
    v7[1] = v9;
    unsigned int v9 = *(void **)(v8 + 8);
  }
  else
  {
    *(void *)(v6 + 8) = v9;
  }
  void *v9 = v7;
  nw_segment_freelist_insert((void *)a1, v8, 0);
LABEL_10:
  int64x2_t v11 = *(int64x2_t *)(a1 + 8);
  v12.i64[0] = -1;
  v12.i64[1] = -1;
  v13.i64[1] = -1;
  v13.i64[0] = *(void *)(a1 + 88);
  v13.i64[0] = vsubq_s64(v11, v13).u64[0];
  v13.i64[1] = vaddq_s64(v11, v12).i64[1];
  *(int64x2_t *)(a1 + 8) = v13;
  ++*(void *)(a1 + 40);
  os_unfair_lock_lock((os_unfair_lock_t)&nw_mem_region_lock);
  unint64_t v14 = g_total_memory_usage - *(void *)(a1 + 88);
  g_total_memory_usage = v14;
  if (g_process_transaction)
  {
    if (v14 <= 0x8000)
    {
      os_release((void *)g_process_transaction);
      g_process_transaction = 0;
      g_transaction_touched = 0;
      if (gLogDatapath)
      {
        uint64_t v26 = __nwlog_obj();
        if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          uint64_t v31 = "nw_mem_region_free";
          _os_log_impl(&dword_1830D4000, v26, OS_LOG_TYPE_DEBUG, "%{public}s os transaction disabled", buf, 0xCu);
        }
      }
    }
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&nw_mem_region_lock);
  if (gLogDatapath)
  {
    unint64_t v23 = __nwlog_obj();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)tcp_info buf = 136446722;
      uint64_t v31 = "nw_mem_region_free";
      __int16 v32 = 2048;
      *(void *)unint64_t v33 = a1;
      *(_WORD *)&v33[8] = 2048;
      *(void *)&v33[10] = v8;
      _os_log_impl(&dword_1830D4000, v23, OS_LOG_TYPE_DEBUG, "%{public}s nwr %p sg %p", buf, 0x20u);
    }
  }
  uint64_t v15 = *(void *)(a1 + 392);
  if (v15)
  {
    if ((*(_DWORD *)(v15 + 240) & 0x80000000) != 0)
    {
      if (gLogDatapath)
      {
        int v27 = __nwlog_obj();
        if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
        {
          int v28 = *(_DWORD *)(v8 + 40);
          unint64_t v29 = *(void *)(a1 + 88) + a2;
          *(_DWORD *)tcp_info buf = 136447234;
          uint64_t v31 = "nw_mem_region_free";
          __int16 v32 = 1024;
          *(_DWORD *)unint64_t v33 = v28;
          *(_WORD *)&v33[4] = 2048;
          *(void *)&v33[6] = v8;
          *(_WORD *)&v33[14] = 2048;
          *(void *)&v33[16] = a2;
          __int16 v34 = 2048;
          unint64_t v35 = v29;
          unint64_t v19 = "%{public}s   [%u] sg %p [%p-%p) mirrored";
          uint64_t v20 = v27;
          uint32_t v21 = 48;
LABEL_34:
          _os_log_impl(&dword_1830D4000, v20, OS_LOG_TYPE_DEBUG, v19, buf, v21);
        }
      }
    }
    else if (gLogDatapath)
    {
LABEL_19:
      unsigned int v16 = __nwlog_obj();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
      {
        int v17 = *(_DWORD *)(v8 + 40);
        unint64_t v18 = *(void *)(a1 + 88) + a2;
        *(_DWORD *)tcp_info buf = 136446978;
        uint64_t v31 = "nw_mem_region_free";
        __int16 v32 = 1024;
        *(_DWORD *)unint64_t v33 = v17;
        *(_WORD *)&v33[4] = 2048;
        *(void *)&v33[6] = a2;
        *(_WORD *)&v33[14] = 2048;
        *(void *)&v33[16] = v18;
        unint64_t v19 = "%{public}s   [%u] [%p-%p)";
        uint64_t v20 = v16;
        uint32_t v21 = 38;
        goto LABEL_34;
      }
    }
  }
  else if (gLogDatapath)
  {
    goto LABEL_19;
  }
  uint64_t v22 = *(void *)(a1 + 392);
  if (v22) {
    nw_mem_region_free(v22, a3, 0);
  }
  if (*(_DWORD *)(a1 + 384))
  {
    uint64_t v24 = __nwlog_obj();
    os_log_type_enabled(v24, OS_LOG_TYPE_ERROR);
    *(_DWORD *)tcp_info buf = 136446466;
    uint64_t v31 = "nw_mem_region_free";
    __int16 v32 = 2082;
    *(void *)unint64_t v33 = "VERIFY nwr->nwr_seg_waiters == 0 failed";
    uint64_t v25 = (void *)_os_log_send_and_compose_impl();
    if (!__nwlog_abort((uint64_t)v25))
    {
      free(v25);
      return;
    }
    goto LABEL_35;
  }
}

BOOL nw_mem_region_alloc(uint64_t a1, uint64_t *a2, void *a3, void *a4, char a5)
{
  uint64_t v5 = a4;
  uint64_t v6 = a3;
  unint64_t v7 = a2;
  uint64_t v73 = *MEMORY[0x1E4F143B8];
  uint64_t v66 = 0;
  if (a3) {
    *a3 = 0;
  }
  if (a4) {
    *a4 = 0;
  }
  uint64_t v9 = *(void *)(a1 + 368);
  if (v9)
  {
LABEL_6:
    nw_segment_freelist_remove((void *)a1, (uint64_t *)v9, 0);
    unint64_t v10 = *(void *)(v9 + 24);
    int64x2_t v11 = (void *)(*(void *)(a1 + 360)
                   + 16
                   * (((v10 >> *(void *)(a1 + 344)) + v10 + (v10 >> (2 * *(void *)(a1 + 344)))) & *(void *)(a1 + 352)));
    int64x2_t v12 = (void *)*v11;
    *(void *)uint64_t v9 = *v11;
    if (!v12) {
      int64x2_t v12 = v11;
    }
    v12[1] = v9;
    *int64x2_t v11 = v9;
    *(void *)(v9 + 8) = v11;
    unint64_t v13 = *(void *)(a1 + 16) + 1;
    *(void *)(a1 + 16) = v13;
    if (v13 > *(void *)(a1 + 48)) {
      *(void *)(a1 + 48) = v13;
    }
    *(void *)(a1 + 8) += *(void *)(a1 + 88);
    os_unfair_lock_lock((os_unfair_lock_t)&nw_mem_region_lock);
    g_total_memory_usage += *(void *)(a1 + 88);
    if ((unint64_t)g_total_memory_usage >= 0x4B000)
    {
      g_transaction_touched = 1;
      if (!g_process_transaction)
      {
        g_process_transaction = os_transaction_create();
        if (gLogDatapath)
        {
          int v59 = __nwlog_obj();
          if (os_log_type_enabled(v59, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)tcp_info buf = 136446210;
            uint64_t v69 = "nw_mem_region_alloc";
            _os_log_impl(&dword_1830D4000, v59, OS_LOG_TYPE_DEBUG, "%{public}s os transaction enabled", buf, 0xCu);
          }
        }
      }
    }
    os_unfair_lock_unlock((os_unfair_lock_t)&nw_mem_region_lock);
LABEL_14:
    if (gLogDatapath)
    {
      int v54 = __nwlog_obj();
      if (os_log_type_enabled(v54, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)tcp_info buf = 136446722;
        uint64_t v69 = "nw_mem_region_alloc";
        __int16 v70 = 2048;
        *(void *)char v71 = a1;
        *(_WORD *)&v71[8] = 2048;
        *(void *)&v71[10] = v9;
        _os_log_impl(&dword_1830D4000, v54, OS_LOG_TYPE_DEBUG, "%{public}s nwr %p sg %p", buf, 0x20u);
      }
    }
    uint64_t v14 = *(void *)(a1 + 392);
    if (v14)
    {
      if ((*(_DWORD *)(v14 + 240) & 0x80000000) != 0)
      {
        if (!gLogDatapath || (int v55 = __nwlog_obj(), !os_log_type_enabled(v55, OS_LOG_TYPE_DEBUG)))
        {
LABEL_64:
          uint64_t v52 = *(void *)(a1 + 392);
          if (v52) {
            uint64_t v52 = nw_mem_region_alloc(v52, 0, &v66, 0, 3);
          }
          if (v10)
          {
            if (v6) {
              void *v6 = v9;
            }
            if (v5) {
              void *v5 = v66;
            }
          }
LABEL_71:
          if (v7) {
            *unint64_t v7 = v52;
          }
          return v10;
        }
        int v56 = *(_DWORD *)(v9 + 40);
        uint64_t v57 = *(void *)(v9 + 24);
        uint64_t v58 = *(void *)(v9 + 32);
        *(_DWORD *)tcp_info buf = 136447234;
        uint64_t v69 = "nw_mem_region_alloc";
        __int16 v70 = 1024;
        *(_DWORD *)char v71 = v56;
        *(_WORD *)&v71[4] = 2048;
        *(void *)&v71[6] = v9;
        *(_WORD *)&unsigned char v71[14] = 2048;
        *(void *)&v71[16] = v57;
        *(_WORD *)&v71[24] = 2048;
        uint64_t v72 = v58;
        int v49 = "%{public}s   [%u] seg %p [0x%llu-0x%llu) mirrored";
        int v50 = v55;
        uint32_t v51 = 48;
LABEL_81:
        _os_log_impl(&dword_1830D4000, v50, OS_LOG_TYPE_DEBUG, v49, buf, v51);
        goto LABEL_64;
      }
      if (!gLogDatapath) {
        goto LABEL_64;
      }
    }
    else if (!gLogDatapath)
    {
      goto LABEL_64;
    }
    int v45 = __nwlog_obj();
    if (!os_log_type_enabled(v45, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_64;
    }
    int v46 = *(_DWORD *)(v9 + 40);
    uint64_t v47 = *(void *)(v9 + 24);
    uint64_t v48 = *(void *)(v9 + 32);
    *(_DWORD *)tcp_info buf = 136446978;
    uint64_t v69 = "nw_mem_region_alloc";
    __int16 v70 = 1024;
    *(_DWORD *)char v71 = v46;
    *(_WORD *)&v71[4] = 2048;
    *(void *)&v71[6] = v47;
    *(_WORD *)&unsigned char v71[14] = 2048;
    *(void *)&v71[16] = v48;
    int v49 = "%{public}s   [%u] [0x%llu-0x%llu)";
    int v50 = v45;
    uint32_t v51 = 38;
    goto LABEL_81;
  }
  uint64_t v65 = a1 + 160;
  p_cache = NWConcrete_nw_resolution_report.cache;
  unsigned int v16 = (vm_map_t *)MEMORY[0x1E4F14960];
  char v64 = a5;
  while (1)
  {
    mach_vm_address_t address = 0;
    if (*(void *)(a1 + 96) - *(void *)(a1 + 16) >= (unint64_t)*((unsigned int *)p_cache + 739)) {
      uint64_t v17 = *((unsigned int *)p_cache + 739);
    }
    else {
      uint64_t v17 = *(void *)(a1 + 96) - *(void *)(a1 + 16);
    }
    if (v17)
    {
      unint64_t v18 = *(void *)(a1 + 312);
      if (v18)
      {
        uint64_t v19 = 0;
LABEL_26:
        uint64_t v20 = 0;
        unsigned int v21 = 0;
        while (1)
        {
          char v22 = v18 - 1 == v20 ? (*(_DWORD *)(a1 + 96) - 1) & 0x3F : 63;
          unint64_t v23 = (0xFFFFFFFFFFFFFFFFLL >> (v22 ^ 0x3Fu)) & *(void *)(*(void *)(a1 + 304) + 8 * v20);
          if (v23) {
            break;
          }
          uint64_t v20 = ++v21;
          if (v18 <= v21) {
            goto LABEL_42;
          }
        }
        int v24 = __clz(__rbit64(v23));
        int v25 = v24 | (v21 << 6);
        if (mach_vm_allocate(*v16, &address, *(void *)(a1 + 88), 1493172227))
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v26 = gLogObj;
          if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
          {
            uint64_t v27 = *(void *)(a1 + 88);
            uint64_t v28 = *(void *)(a1 + 96);
            *(_DWORD *)tcp_info buf = 136447234;
            uint64_t v69 = "nw_segment_freelist_grow";
            __int16 v70 = 2082;
            *(void *)char v71 = v65;
            *(_WORD *)&v71[8] = 1024;
            *(_DWORD *)&v71[10] = v27;
            *(_WORD *)&unsigned char v71[14] = 1024;
            *(_DWORD *)&v71[16] = v28;
            *(_WORD *)&v71[20] = 1024;
            *(_DWORD *)&v71[22] = v25;
            _os_log_impl(&dword_1830D4000, v26, OS_LOG_TYPE_ERROR, "%{public}s \"%{public}s\": [%u * %u] mach_vm_allocate idx %u failed", buf, 0x28u);
          }
          goto LABEL_42;
        }
        if (*(void *)(a1 + 88) != ((*(void *)(a1 + 88) + *MEMORY[0x1E4F14B00] - 1) & -*MEMORY[0x1E4F14B00]))
        {
          unint64_t v35 = __nwlog_obj();
          os_log_type_enabled(v35, OS_LOG_TYPE_ERROR);
          *(_DWORD *)tcp_info buf = 136446466;
          uint64_t v69 = "nw_segment_create";
          __int16 v70 = 2082;
          *(void *)char v71 = "VERIFY segsize == round_page(segsize) failed";
          uint64_t v36 = (void *)_os_log_send_and_compose_impl();
          BOOL result = __nwlog_abort((uint64_t)v36);
          if (result) {
            goto LABEL_84;
          }
          free(v36);
        }
        uint64_t v29 = *(void *)(a1 + 304);
        uint64_t v30 = v21 & 0x3FFFFFF;
        uint64_t v31 = 1 << v24;
        if ((*(void *)(v29 + 8 * v30) & (1 << v24)) == 0)
        {
          int v38 = __nwlog_obj();
          os_log_type_enabled(v38, OS_LOG_TYPE_ERROR);
          *(_DWORD *)tcp_info buf = 136446466;
          uint64_t v69 = "nw_segment_create";
          __int16 v70 = 2082;
          *(void *)char v71 = "VERIFY bit_test(*bmap, i % BMAPSZ) failed";
          int v39 = (void *)_os_log_send_and_compose_impl();
          BOOL result = __nwlog_abort((uint64_t)v39);
          if (result) {
            goto LABEL_84;
          }
          free(v39);
        }
        __int16 v32 = malloc_type_zone_calloc((malloc_zone_t *)g_slab_zone, 1uLL, 0x38uLL, 0x61BC51D5uLL);
        if (!v32)
        {
          __int16 v40 = __nwlog_obj();
          os_log_type_enabled(v40, OS_LOG_TYPE_ERROR);
          *(_DWORD *)tcp_info buf = 136446722;
          uint64_t v69 = "strict_malloc_zone_calloc";
          __int16 v70 = 2048;
          *(void *)char v71 = 1;
          *(_WORD *)&v71[8] = 2048;
          *(void *)&v71[10] = 56;
          int v60 = (void *)_os_log_send_and_compose_impl();
          BOOL result = __nwlog_abort((uint64_t)v60);
          if (result) {
            goto LABEL_84;
          }
          free(v60);
        }
        v32[2] = a1;
        *((_DWORD *)v32 + 10) = v25;
        *((_DWORD *)v32 + 12) = 1;
        *(void *)(v29 + 8 * v30) &= ~v31;
        mach_vm_address_t v33 = address;
        v32[3] = address;
        mach_vm_address_t v34 = *(void *)(a1 + 88) + v33;
        v32[4] = v34;
        if (!v33 || !v34)
        {
          uint64_t v41 = __nwlog_obj();
          os_log_type_enabled(v41, OS_LOG_TYPE_ERROR);
          *(_DWORD *)tcp_info buf = 136446466;
          uint64_t v69 = "nw_segment_freelist_grow";
          __int16 v70 = 2082;
          *(void *)char v71 = "VERIFY sg->sg_start != 0 && sg->sg_end != 0 failed";
          __int16 v42 = (void *)_os_log_send_and_compose_impl();
          BOOL result = __nwlog_abort((uint64_t)v42);
          if (result) {
            goto LABEL_84;
          }
          free(v42);
        }
        *((_DWORD *)v32 + 12) = 3;
        nw_segment_freelist_insert((void *)a1, (uint64_t)v32, 1);
        ++*(void *)(a1 + 32);
        if (gLogDatapath)
        {
          int v43 = __nwlog_obj();
          if (os_log_type_enabled(v43, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v44 = *(void *)(a1 + 96);
            *(_DWORD *)tcp_info buf = 136446722;
            uint64_t v69 = "nw_segment_freelist_grow";
            __int16 v70 = 1024;
            *(_DWORD *)char v71 = v25 + 1;
            *(_WORD *)&v71[4] = 2048;
            *(void *)&v71[6] = v44;
            _os_log_impl(&dword_1830D4000, v43, OS_LOG_TYPE_DEBUG, "%{public}s sg %u/%zu", buf, 0x1Cu);
          }
        }
LABEL_42:
        while (++v19 != v17)
        {
          unint64_t v18 = *(void *)(a1 + 312);
          if (v18) {
            goto LABEL_26;
          }
        }
        uint64_t v9 = *(void *)(a1 + 368);
        a5 = v64;
        p_cache = (void **)(NWConcrete_nw_resolution_report + 16);
        if (v9)
        {
          uint64_t v5 = a4;
          unint64_t v7 = a2;
          uint64_t v6 = a3;
          goto LABEL_6;
        }
      }
    }
    ++*(void *)(a1 + 56);
    if (a5) {
      break;
    }
    ++*(_DWORD *)(a1 + 384);
  }
  if ((a5 & 2) == 0)
  {
    unint64_t v10 = 0;
    uint64_t v52 = 0;
    unint64_t v7 = a2;
    goto LABEL_71;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
  *(_DWORD *)tcp_info buf = 136446722;
  uint64_t v69 = "nw_mem_region_alloc";
  __int16 v70 = 2082;
  *(void *)char v71 = v65;
  *(_WORD *)&v71[8] = 2048;
  *(void *)&v71[10] = a1;
  int v53 = (void *)_os_log_send_and_compose_impl();
  BOOL result = __nwlog_abort((uint64_t)v53);
  unint64_t v7 = a2;
  if (!result)
  {
    free(v53);
    uint64_t v9 = 0;
    unint64_t v10 = 0;
    uint64_t v6 = a3;
    uint64_t v5 = a4;
    goto LABEL_14;
  }
LABEL_84:
  __break(1u);
  return result;
}

void nw_segment_freelist_insert(void *a1, uint64_t a2, int a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a2 + 48) == 3)
  {
    if (a3) {
      goto LABEL_5;
    }
  }
  else
  {
    uint64_t v9 = __nwlog_obj();
    os_log_type_enabled(v9, OS_LOG_TYPE_ERROR);
    int v16 = 136446466;
    uint64_t v17 = "nw_segment_freelist_insert";
    __int16 v18 = 2082;
    uint64_t v19 = "VERIFY sg->sg_state == NW_SEG_STATE_MAPPED failed";
    unint64_t v10 = (void *)_os_log_send_and_compose_impl();
    if (__nwlog_abort((uint64_t)v10)) {
      goto LABEL_15;
    }
    free(v10);
    if (a3) {
      goto LABEL_5;
    }
  }
  uint64_t v6 = (void (*)(uint64_t, void))a1[36];
  if (v6) {
    v6(a2, a1[33]);
  }
LABEL_5:
  int state = 2;
  if (!mach_vm_purgable_control(*MEMORY[0x1E4F14960], *(void *)(a2 + 24), 0, &state)) {
    goto LABEL_6;
  }
  int64x2_t v11 = __nwlog_obj();
  os_log_type_enabled(v11, OS_LOG_TYPE_ERROR);
  int v16 = 136446466;
  uint64_t v17 = "nw_segment_freelist_insert";
  __int16 v18 = 2082;
  uint64_t v19 = "VERIFY result == 0 failed";
  int64x2_t v12 = (void *)_os_log_send_and_compose_impl();
  if (__nwlog_abort((uint64_t)v12))
  {
LABEL_15:
    __break(1u);
    return;
  }
  free(v12);
LABEL_6:
  *(void *)(a2 + 44) = 0x200000002;
  *(void *)a2 = 0;
  unint64_t v7 = (void *)a1[47];
  *(void *)(a2 + 8) = v7;
  *unint64_t v7 = a2;
  a1[47] = a2;
  unint64_t v8 = a1[40] + 1;
  a1[40] = v8;
  if (v8 > a1[12])
  {
    unint64_t v13 = __nwlog_obj();
    os_log_type_enabled(v13, OS_LOG_TYPE_ERROR);
    int v16 = 136446466;
    uint64_t v17 = "nw_segment_freelist_insert";
    __int16 v18 = 2082;
    uint64_t v19 = "VERIFY nwr->nwr_seg_free_cnt <= nwr->nwr_seg_max_cnt failed";
    uint64_t v14 = (void *)_os_log_send_and_compose_impl();
    if (!__nwlog_abort((uint64_t)v14))
    {
      free(v14);
      return;
    }
    goto LABEL_15;
  }
}

BOOL nw_segment_freelist_remove(void *a1, uint64_t *a2, int a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *a2;
  unint64_t v7 = (void *)a2[1];
  if (*a2)
  {
    *(void *)(v6 + 8) = v7;
    unint64_t v7 = (void *)a2[1];
  }
  else
  {
    a1[47] = v7;
  }
  *unint64_t v7 = v6;
  *a2 = 0;
  a2[1] = 0;
  uint64_t v8 = a1[40];
  if (!v8)
  {
    int64x2_t v11 = __nwlog_obj();
    os_log_type_enabled(v11, OS_LOG_TYPE_ERROR);
    int v18 = 136446466;
    uint64_t v19 = "nw_segment_freelist_remove";
    __int16 v20 = 2082;
    unsigned int v21 = "VERIFY nwr->nwr_seg_free_cnt != 0 failed";
    int64x2_t v12 = (void *)_os_log_send_and_compose_impl();
    BOOL result = __nwlog_abort((uint64_t)v12);
    if (result) {
      goto LABEL_20;
    }
    free(v12);
    uint64_t v8 = a1[40];
  }
  a1[40] = v8 - 1;
  if (a3)
  {
    *((_DWORD *)a2 + 11) = 3;
    return (BOOL)a2;
  }
  if (*((_DWORD *)a2 + 12) != 2)
  {
    unint64_t v13 = __nwlog_obj();
    os_log_type_enabled(v13, OS_LOG_TYPE_ERROR);
    int v18 = 136446466;
    uint64_t v19 = "nw_segment_freelist_remove";
    __int16 v20 = 2082;
    unsigned int v21 = "VERIFY sg->sg_state == NW_SEG_STATE_UNMAPPED failed";
    uint64_t v14 = (void *)_os_log_send_and_compose_impl();
    BOOL result = __nwlog_abort((uint64_t)v14);
    if (result) {
      goto LABEL_20;
    }
    free(v14);
  }
  int state = 0;
  if (!mach_vm_purgable_control(*MEMORY[0x1E4F14960], a2[3], 0, &state))
  {
    uint64_t v9 = (void (*)(uint64_t *, void))a1[35];
    if (!v9)
    {
LABEL_10:
      *(uint64_t *)((char *)a2 + 44) = 0x300000001;
      return (BOOL)a2;
    }
LABEL_9:
    v9(a2, a1[33]);
    goto LABEL_10;
  }
  uint64_t v15 = __nwlog_obj();
  os_log_type_enabled(v15, OS_LOG_TYPE_ERROR);
  int v18 = 136446466;
  uint64_t v19 = "nw_segment_freelist_remove";
  __int16 v20 = 2082;
  unsigned int v21 = "VERIFY result == 0 failed";
  int v16 = (void *)_os_log_send_and_compose_impl();
  BOOL result = __nwlog_abort((uint64_t)v16);
  if (!result)
  {
    free(v16);
    uint64_t v9 = (void (*)(uint64_t *, void))a1[35];
    if (!v9) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
LABEL_20:
  __break(1u);
  return result;
}

void nw_mem_cache_stats_dump(void)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (nw_mem_dump_slab_stats)
  {
    os_unfair_lock_lock((os_unfair_lock_t)&nw_mem_cache_lock);
    uint64_t v0 = (void *)nw_mem_cache_head;
    if (nw_mem_cache_head)
    {
      do
      {
        uint64_t v1 = __nwlog_obj();
        if (os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
        {
          uint64_t v2 = v0[4];
          uint64_t v3 = v0[5];
          uint64_t v4 = v0[67];
          uint64_t v5 = v0[68];
          *(_DWORD *)tcp_info buf = 136447490;
          unint64_t v7 = "nw_mem_cache_stats_dump";
          __int16 v8 = 2082;
          uint64_t v9 = v0 + 12;
          __int16 v10 = 2048;
          uint64_t v11 = v2;
          __int16 v12 = 2048;
          uint64_t v13 = v3;
          __int16 v14 = 2048;
          uint64_t v15 = v4;
          __int16 v16 = 2048;
          uint64_t v17 = v5;
          _os_log_impl(&dword_1830D4000, v1, OS_LOG_TYPE_INFO, "%{public}s \n\n%{public}s: \n\tNumber of Slabs created %llu\n\tNumber of Slabs destroyed %llu\n\tNumber of Cache Allocs %llu\n\tNumber of Cache Frees %llu", buf, 0x3Eu);
        }
        uint64_t v0 = (void *)v0[10];
      }
      while (v0);
    }
    os_unfair_lock_unlock((os_unfair_lock_t)&nw_mem_cache_lock);
    nw_mem_region_stats_dump();
  }
}

void nw_path_enumerate_interfaces(nw_path_t path, nw_path_enumerate_interfaces_block_t enumerate_block)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  nw_path_t v3 = path;
  uint64_t v4 = enumerate_block;
  uint64_t v5 = (uint64_t (**)(void, void))v4;
  if (!v3)
  {
    __int16 v12 = __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    __int16 v32 = "nw_path_enumerate_interfaces";
    uint64_t v13 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v29 = 0;
    if (!__nwlog_fault(v13, &type, &v29)) {
      goto LABEL_48;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int16 v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        __int16 v32 = "nw_path_enumerate_interfaces";
        _os_log_impl(&dword_1830D4000, v14, v15, "%{public}s called with null path", buf, 0xCu);
      }
    }
    else if (v29)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __int16 v14 = __nwlog_obj();
      os_log_type_t v19 = type;
      BOOL v20 = os_log_type_enabled(v14, type);
      if (backtrace_string)
      {
        if (v20)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          __int16 v32 = "nw_path_enumerate_interfaces";
          __int16 v33 = 2082;
          mach_vm_address_t v34 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v14, v19, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_48:
        if (!v13) {
          goto LABEL_7;
        }
        goto LABEL_49;
      }
      if (v20)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        __int16 v32 = "nw_path_enumerate_interfaces";
        _os_log_impl(&dword_1830D4000, v14, v19, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __int16 v14 = __nwlog_obj();
      os_log_type_t v24 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        __int16 v32 = "nw_path_enumerate_interfaces";
        _os_log_impl(&dword_1830D4000, v14, v24, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_47:

    goto LABEL_48;
  }
  if (!v4)
  {
    __int16 v16 = __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    __int16 v32 = "nw_path_enumerate_interfaces";
    uint64_t v13 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v29 = 0;
    if (!__nwlog_fault(v13, &type, &v29)) {
      goto LABEL_48;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int16 v14 = __nwlog_obj();
      os_log_type_t v17 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        __int16 v32 = "nw_path_enumerate_interfaces";
        _os_log_impl(&dword_1830D4000, v14, v17, "%{public}s called with null enumerate_block", buf, 0xCu);
      }
    }
    else if (v29)
    {
      unsigned int v21 = (char *)__nw_create_backtrace_string();
      __int16 v14 = __nwlog_obj();
      os_log_type_t v22 = type;
      BOOL v23 = os_log_type_enabled(v14, type);
      if (v21)
      {
        if (v23)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          __int16 v32 = "nw_path_enumerate_interfaces";
          __int16 v33 = 2082;
          mach_vm_address_t v34 = v21;
          _os_log_impl(&dword_1830D4000, v14, v22, "%{public}s called with null enumerate_block, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v21);
        if (!v13) {
          goto LABEL_7;
        }
LABEL_49:
        free(v13);
        goto LABEL_7;
      }
      if (v23)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        __int16 v32 = "nw_path_enumerate_interfaces";
        _os_log_impl(&dword_1830D4000, v14, v22, "%{public}s called with null enumerate_block, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __int16 v14 = __nwlog_obj();
      os_log_type_t v25 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        __int16 v32 = "nw_path_enumerate_interfaces";
        _os_log_impl(&dword_1830D4000, v14, v25, "%{public}s called with null enumerate_block, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_47;
  }
  if (!v3[12].isa || (v4[2](v4) & 1) != 0)
  {
    unsigned int isa = (atomic_uchar *)v3[9].isa;
    if (isa)
    {
      v26[0] = MEMORY[0x1E4F143A8];
      v26[1] = 3221225472;
      v26[2] = __nw_path_enumerate_interfaces_block_invoke;
      v26[3] = &unk_1E52481C0;
      uint64_t v27 = v3;
      uint64_t v28 = v5;
      nw_array_apply(isa, (uint64_t)v26);
    }
    else if (LODWORD(v3[43].isa))
    {
      uint64_t v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        Class v9 = v3[38].isa;
        id v10 = nw_parameters_copy_context(v3[2].isa);
        uint64_t v11 = nw_path_copy_interface_with_generation(v10, *(_DWORD *)((char *)v9 + v7), *(_DWORD *)((char *)v9 + v7 + 4));

        if (v11)
        {
          if (v11 != (NWConcrete_nw_interface *)v3[12].isa
            && (((uint64_t (**)(void, NWConcrete_nw_interface *))v5)[2](v5, v11) & 1) == 0)
          {
            break;
          }
        }

        ++v8;
        v7 += 24;
        if (v8 >= LODWORD(v3[43].isa)) {
          goto LABEL_7;
        }
      }
    }
  }
LABEL_7:
}

void sub_1832FF0DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1832FF10C(uint64_t a1, uint64_t a2)
{
  nw_path_t v3 = *(uint64_t (**)(uint64_t))(a1 + 32);
  swift_unknownObjectRetain();
  char v4 = v3(a2);
  swift_unknownObjectRelease();
  return v4 & 1;
}

uint64_t sub_1832FF15C(uint64_t a1)
{
  return sub_1832FF190(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t sub_1832FF164()
{
  return (*(uint64_t (**)(void))(v0 + 16))() & 1;
}

uint64_t sub_1832FF190(uint64_t a1, uint64_t (*a2)(void))
{
  return a2() & 1;
}

uint64_t sub_1832FF1BC(uint64_t a1)
{
  return sub_1832FF1C4(a1, *(void ***)(v1 + 16));
}

uint64_t sub_1832FF1C4(uint64_t a1, void **a2)
{
  char v4 = *a2;
  swift_unknownObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a2 = v4;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    char v4 = sub_1832FF278(0, v4[2] + 1, 1, v4);
    *a2 = v4;
  }
  unint64_t v7 = v4[2];
  unint64_t v6 = v4[3];
  if (v7 >= v6 >> 1) {
    char v4 = sub_1832FF278((void *)(v6 > 1), v7 + 1, 1, v4);
  }
  v4[2] = v7 + 1;
  v4[v7 + 4] = a1;
  *a2 = v4;
  return 1;
}

void *sub_1832FF278(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EB266A20);
      id v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      id v10 = (void *)MEMORY[0x1E4FBC860];
      uint64_t v13 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1832FF388(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_1832FF388(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 8 * a1 + 32;
    unint64_t v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_183D4571C();
  __break(1u);
  return result;
}

uint64_t sub_1832FF47C(uint64_t a1)
{
  return sub_1832FF484(a1, *(unint64_t **)(v1 + 16));
}

uint64_t sub_1832FF484(uint64_t a1, unint64_t *a2)
{
  __swift_instantiateConcreteTypeFromMangledName(qword_1EB266A50);
  ((void (*)(void))MEMORY[0x1F4188790])();
  uint64_t v4 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for NWEndpoint();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = ((uint64_t (*)(void))MEMORY[0x1F4188790])();
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  int64_t v11 = (char *)&v18 - v10;
  uint64_t v12 = swift_unknownObjectRetain();
  sub_18315A830(v12, (uint64_t)v4);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_183138A24((uint64_t)v4, qword_1EB266A50);
  }
  else
  {
    sub_183138878((uint64_t)v4, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for NWEndpoint);
    sub_18313829C((uint64_t)v11, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for NWEndpoint);
    unint64_t v13 = *a2;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *a2 = v13;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      unint64_t v13 = sub_1832FFC34(0, *(void *)(v13 + 16) + 1, 1, v13);
      *a2 = v13;
    }
    unint64_t v16 = *(void *)(v13 + 16);
    unint64_t v15 = *(void *)(v13 + 24);
    if (v16 >= v15 >> 1)
    {
      unint64_t v13 = sub_1832FFC34(v15 > 1, v16 + 1, 1, v13);
      *a2 = v13;
    }
    *(void *)(v13 + 16) = v16 + 1;
    sub_183138878((uint64_t)v9, v13+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(void *)(v6 + 72) * v16, (uint64_t (*)(void))type metadata accessor for NWEndpoint);
    sub_1832FF6F4((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for NWEndpoint);
  }
  return 1;
}

uint64_t sub_1832FF6F4(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t destroy for NWPath(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 44);
  uint64_t v5 = type metadata accessor for NWEndpoint();
  uint64_t v6 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48);
  if (!v6(v4, 1, v5))
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        sub_18315E658(*(void *)v4, *(void *)(v4 + 8), *(void *)(v4 + 16), *(unsigned char *)(v4 + 24));
        break;
      case 1u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (*(void *)(v4 + 48) != 1) {
          goto LABEL_14;
        }
        break;
      case 2u:
        swift_bridgeObjectRelease();
        break;
      case 3u:
        uint64_t v9 = sub_183D4447C();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v4, v9);
        break;
      case 4u:
LABEL_14:
        swift_unknownObjectRelease();
        break;
      default:
        break;
    }
  }
  uint64_t v7 = a1 + *(int *)(a2 + 48);
  if (!v6(v7, 1, v5))
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        sub_18315E658(*(void *)v7, *(void *)(v7 + 8), *(void *)(v7 + 16), *(unsigned char *)(v7 + 24));
        break;
      case 1u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (*(void *)(v7 + 48) != 1) {
          goto LABEL_19;
        }
        break;
      case 2u:
        swift_bridgeObjectRelease();
        break;
      case 3u:
        uint64_t v10 = sub_183D4447C();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v7, v10);
        break;
      case 4u:
LABEL_19:
        swift_unknownObjectRelease();
        break;
      default:
        break;
    }
  }

  return swift_unknownObjectRelease();
}

uint64_t sub_1832FF9B0(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(void), uint64_t (*a7)(void))
{
  if (a3)
  {
    unint64_t v11 = *(void *)(a4 + 24);
    uint64_t v12 = v11 >> 1;
    if ((uint64_t)(v11 >> 1) < a2)
    {
      if (v12 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      uint64_t v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v11 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v12 = a2;
      }
    }
  }
  else
  {
    uint64_t v12 = a2;
  }
  uint64_t v13 = *(void *)(a4 + 16);
  if (v12 <= v13) {
    uint64_t v14 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v14 = v12;
  }
  if (!v14)
  {
    uint64_t v18 = (void *)MEMORY[0x1E4FBC860];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  uint64_t v15 = *(void *)(a6(0) - 8);
  uint64_t v16 = *(void *)(v15 + 72);
  unint64_t v17 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  uint64_t v18 = (void *)swift_allocObject();
  size_t v19 = _swift_stdlib_malloc_size(v18);
  if (!v16 || (v19 - v17 == 0x8000000000000000 ? (BOOL v20 = v16 == -1) : (BOOL v20 = 0), v20))
  {
LABEL_29:
    uint64_t result = sub_183D456BC();
    __break(1u);
    return result;
  }
  v18[2] = v13;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v16);
LABEL_19:
  uint64_t v21 = *(void *)(a6(0) - 8);
  unint64_t v22 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  unint64_t v23 = (unint64_t)v18 + v22;
  if (a1)
  {
    if ((unint64_t)v18 < a4 || v23 >= a4 + v22 + *(void *)(v21 + 72) * v13)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v18 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_1832FFC68(0, v13, v23, a4, a7);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v18;
}

uint64_t sub_1832FFC34(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1832FF9B0(a1, a2, a3, a4, (uint64_t *)&unk_1EB266A28, (uint64_t (*)(void))type metadata accessor for NWEndpoint, (uint64_t (*)(void))type metadata accessor for NWEndpoint);
}

uint64_t sub_1832FFC68(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    uint64_t v9 = *(void *)(a5(0) - 8);
    uint64_t v10 = a4 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v11 = *(void *)(v9 + 72);
    unint64_t v12 = v10 + v11 * a1;
    unint64_t v13 = a3 + v11 * v5;
    if (v12 >= v13 || v12 + v11 * v5 <= a3)
    {
      swift_arrayInitWithCopy();
      return v13;
    }
  }
  uint64_t result = sub_183D4571C();
  __break(1u);
  return result;
}

uint64_t sub_1832FFDC4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NWPath(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(a1, 1, v4))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v5 = a1 + *(int *)(v4 + 44);
    uint64_t v6 = type metadata accessor for NWEndpoint();
    uint64_t v7 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48);
    if (!v7(v5, 1, v6))
    {
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          sub_18315E658(*(void *)v5, *(void *)(v5 + 8), *(void *)(v5 + 16), *(unsigned char *)(v5 + 24));
          break;
        case 1u:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (*(void *)(v5 + 48) != 1) {
            goto LABEL_18;
          }
          break;
        case 2u:
          swift_bridgeObjectRelease();
          break;
        case 3u:
          uint64_t v10 = sub_183D4447C();
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v5, v10);
          break;
        case 4u:
LABEL_18:
          swift_unknownObjectRelease();
          break;
        default:
          break;
      }
    }
    uint64_t v8 = a1 + *(int *)(v4 + 48);
    if (!v7(v8, 1, v6))
    {
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          sub_18315E658(*(void *)v8, *(void *)(v8 + 8), *(void *)(v8 + 16), *(unsigned char *)(v8 + 24));
          break;
        case 1u:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (*(void *)(v8 + 48) != 1) {
            goto LABEL_23;
          }
          break;
        case 2u:
          swift_bridgeObjectRelease();
          break;
        case 3u:
          uint64_t v11 = sub_183D4447C();
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v8, v11);
          break;
        case 4u:
LABEL_23:
          swift_unknownObjectRelease();
          break;
        default:
          break;
      }
    }
    swift_unknownObjectRelease();
  }
  if (*(void *)(a1 + *(int *)(a2 + 20))) {
    swift_release();
  }

  swift_bridgeObjectRelease();

  return swift_release();
}

#error "1833000A8: too big function (funcsize=0)"

void sub_1833275B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,void *a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t v74 = (void *)STACK[0x238];
  _Block_object_dispose(&STACK[0x3D8], 8);

  _Block_object_dispose(&STACK[0x408], 8);
  _Block_object_dispose(&STACK[0x428], 8);

  _Unwind_Resume(a1);
}

uint64_t nw_parameters_is_system_proxy_connection(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = (*(unsigned __int16 *)(*((void *)v1 + 13) + 108) >> 13) & 1;
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)tcp_info buf = 136446210;
  uint64_t v16 = "nw_parameters_is_system_proxy_connection";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint64_t v16 = "nw_parameters_is_system_proxy_connection";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          uint64_t v16 = "nw_parameters_is_system_proxy_connection";
          __int16 v17 = 2082;
          uint64_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint64_t v16 = "nw_parameters_is_system_proxy_connection";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint64_t v16 = "nw_parameters_is_system_proxy_connection";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_parameters_is_fallback(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = *((unsigned char *)v1 + 98) & 1;
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)tcp_info buf = 136446210;
  uint64_t v16 = "nw_parameters_is_fallback";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint64_t v16 = "nw_parameters_is_fallback";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          uint64_t v16 = "nw_parameters_is_fallback";
          __int16 v17 = 2082;
          uint64_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint64_t v16 = "nw_parameters_is_fallback";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint64_t v16 = "nw_parameters_is_fallback";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_parameters_get_discretionary(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = *(_WORD *)(*((void *)v1 + 13) + 108) & 1;
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)tcp_info buf = 136446210;
  uint64_t v16 = "nw_parameters_get_discretionary";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint64_t v16 = "nw_parameters_get_discretionary";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          uint64_t v16 = "nw_parameters_get_discretionary";
          __int16 v17 = 2082;
          uint64_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint64_t v16 = "nw_parameters_get_discretionary";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint64_t v16 = "nw_parameters_get_discretionary";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_parameters_get_local_address_preference(void *a1)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (!v1)
  {
    os_log_type_t v8 = __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    BOOL v20 = "nw_parameters_get_local_address_preference";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v17 = 0;
    if (__nwlog_fault(v9, &type, &v17))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v10 = __nwlog_obj();
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          BOOL v20 = "nw_parameters_get_local_address_preference";
          _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null parameters", buf, 0xCu);
        }
      }
      else if (v17)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v10 = __nwlog_obj();
        os_log_type_t v13 = type;
        BOOL v14 = os_log_type_enabled(v10, type);
        if (backtrace_string)
        {
          if (v14)
          {
            *(_DWORD *)tcp_info buf = 136446466;
            BOOL v20 = "nw_parameters_get_local_address_preference";
            __int16 v21 = 2082;
            unint64_t v22 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_24;
        }
        if (v14)
        {
          *(_DWORD *)tcp_info buf = 136446210;
          BOOL v20 = "nw_parameters_get_local_address_preference";
          _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        os_log_type_t v10 = __nwlog_obj();
        os_log_type_t v15 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          BOOL v20 = "nw_parameters_get_local_address_preference";
          _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_24:
    if (v9) {
      free(v9);
    }
    goto LABEL_26;
  }
  uint64_t v3 = *(void **)(v1[19] + 48);
  if (!v3)
  {
LABEL_26:
    uint64_t is_equal_unsafe = 0;
    goto LABEL_27;
  }
  uint64_t v4 = v3;
  id v5 = v4[1];

  if (nw_protocol_setup_ip_definition(void)::onceToken != -1) {
    dispatch_once(&nw_protocol_setup_ip_definition(void)::onceToken, &__block_literal_global_53153);
  }
  id v6 = (id)g_ip_definition;
  uint64_t is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v5, (uint64_t)v6);

  if (is_equal_unsafe) {
    uint64_t is_equal_unsafe = nw_ip_options_get_local_address_preference(*(void **)(v2[19] + 48));
  }

LABEL_27:
  return is_equal_unsafe;
}

void sub_18332838C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_parameters_iterate_parent_ids(void *a1, void *a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1;
  id v4 = a2;
  id v5 = (uint64_t (**)(void, void))v4;
  if (!v3)
  {
    uint64_t v7 = __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    uint64_t v26 = "nw_parameters_iterate_parent_ids";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (!__nwlog_fault(v8, &type, &v23)) {
      goto LABEL_41;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint64_t v26 = "nw_parameters_iterate_parent_ids";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          uint64_t v26 = "nw_parameters_iterate_parent_ids";
          __int16 v27 = 2082;
          uint64_t v28 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_41:
        if (!v8) {
          goto LABEL_7;
        }
LABEL_42:
        free(v8);
        goto LABEL_7;
      }
      if (v15)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint64_t v26 = "nw_parameters_iterate_parent_ids";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint64_t v26 = "nw_parameters_iterate_parent_ids";
        _os_log_impl(&dword_1830D4000, v9, v19, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_40:

    goto LABEL_41;
  }
  if (v4)
  {
    if (uuid_is_null(v3 + 8) || (((uint64_t (**)(void, unsigned __int8 *))v5)[2](v5, v3 + 8) & 1) != 0)
    {
      id v6 = (void *)*((void *)v3 + 17);
      if (v6)
      {
        applier[0] = MEMORY[0x1E4F143A8];
        applier[1] = 3221225472;
        applier[2] = __nw_parameters_iterate_parent_ids_block_invoke;
        applier[3] = &unk_1E5244348;
        unint64_t v22 = v5;
        xpc_array_apply(v6, applier);
      }
    }
    goto LABEL_7;
  }
  os_log_type_t v11 = __nwlog_obj();
  *(_DWORD *)tcp_info buf = 136446210;
  uint64_t v26 = "nw_parameters_iterate_parent_ids";
  os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v23 = 0;
  if (!__nwlog_fault(v8, &type, &v23)) {
    goto LABEL_41;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    uint64_t v9 = __nwlog_obj();
    os_log_type_t v12 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)tcp_info buf = 136446210;
      uint64_t v26 = "nw_parameters_iterate_parent_ids";
      _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null iterator", buf, 0xCu);
    }
    goto LABEL_40;
  }
  if (!v23)
  {
    uint64_t v9 = __nwlog_obj();
    os_log_type_t v20 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)tcp_info buf = 136446210;
      uint64_t v26 = "nw_parameters_iterate_parent_ids";
      _os_log_impl(&dword_1830D4000, v9, v20, "%{public}s called with null iterator, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_40;
  }
  uint64_t v16 = (char *)__nw_create_backtrace_string();
  uint64_t v9 = __nwlog_obj();
  os_log_type_t v17 = type;
  BOOL v18 = os_log_type_enabled(v9, type);
  if (!v16)
  {
    if (v18)
    {
      *(_DWORD *)tcp_info buf = 136446210;
      uint64_t v26 = "nw_parameters_iterate_parent_ids";
      _os_log_impl(&dword_1830D4000, v9, v17, "%{public}s called with null iterator, no backtrace", buf, 0xCu);
    }
    goto LABEL_40;
  }
  if (v18)
  {
    *(_DWORD *)tcp_info buf = 136446466;
    uint64_t v26 = "nw_parameters_iterate_parent_ids";
    __int16 v27 = 2082;
    uint64_t v28 = v16;
    _os_log_impl(&dword_1830D4000, v9, v17, "%{public}s called with null iterator, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v16);
  if (v8) {
    goto LABEL_42;
  }
LABEL_7:
}

void sub_1833288EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

uint64_t nw_parameters_get_web_search_content(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = (*(unsigned __int8 *)(*((void *)v1 + 13) + 110) >> 2) & 1;
    goto LABEL_3;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)tcp_info buf = 136446210;
  uint64_t v16 = "nw_parameters_get_web_search_content";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint64_t v16 = "nw_parameters_get_web_search_content";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          uint64_t v16 = "nw_parameters_get_web_search_content";
          __int16 v17 = 2082;
          BOOL v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint64_t v16 = "nw_parameters_get_web_search_content";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint64_t v16 = "nw_parameters_get_web_search_content";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_parameters_get_use_enhanced_privacy_mode(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = (*(unsigned __int8 *)(*((void *)v1 + 13) + 110) >> 1) & 1;
    goto LABEL_3;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)tcp_info buf = 136446210;
  uint64_t v16 = "nw_parameters_get_use_enhanced_privacy_mode";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint64_t v16 = "nw_parameters_get_use_enhanced_privacy_mode";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          uint64_t v16 = "nw_parameters_get_use_enhanced_privacy_mode";
          __int16 v17 = 2082;
          BOOL v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint64_t v16 = "nw_parameters_get_use_enhanced_privacy_mode";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint64_t v16 = "nw_parameters_get_use_enhanced_privacy_mode";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

BOOL nw_parameters_get_persona(uint64_t a1, unsigned __int8 *uu)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    *(_OWORD *)uuid_t uu = *(_OWORD *)(*(void *)(a1 + 104) + 40);
    return uuid_is_null(uu) == 0;
  }
  uint64_t v3 = __nwlog_obj();
  *(_DWORD *)tcp_info buf = 136446210;
  os_log_type_t v14 = "nw_parameters_get_persona";
  id v4 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (__nwlog_fault(v4, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v14 = "nw_parameters_get_persona";
        _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v11)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v5 = __nwlog_obj();
      os_log_type_t v8 = type;
      BOOL v9 = os_log_type_enabled(v5, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          os_log_type_t v14 = "nw_parameters_get_persona";
          __int16 v15 = 2082;
          uint64_t v16 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v5, v8, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_19;
      }
      if (v9)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v14 = "nw_parameters_get_persona";
        _os_log_impl(&dword_1830D4000, v5, v8, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v5 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        os_log_type_t v14 = "nw_parameters_get_persona";
        _os_log_impl(&dword_1830D4000, v5, v10, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_19:
  if (v4) {
    free(v4);
  }
  return 0;
}

uint64_t nw_parameters_get_only_primary_requires_type(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = (*(unsigned __int16 *)(*((void *)v1 + 13) + 100) >> 5) & 1;
    goto LABEL_3;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)tcp_info buf = 136446210;
  uint64_t v16 = "nw_parameters_get_only_primary_requires_type";
  os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint64_t v16 = "nw_parameters_get_only_primary_requires_type";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          uint64_t v16 = "nw_parameters_get_only_primary_requires_type";
          __int16 v17 = 2082;
          BOOL v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint64_t v16 = "nw_parameters_get_only_primary_requires_type";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint64_t v16 = "nw_parameters_get_only_primary_requires_type";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_parameters_get_no_wake_from_sleep(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = (*(unsigned __int16 *)(*((void *)v1 + 13) + 108) >> 7) & 1;
    goto LABEL_3;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)tcp_info buf = 136446210;
  uint64_t v16 = "nw_parameters_get_no_wake_from_sleep";
  os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint64_t v16 = "nw_parameters_get_no_wake_from_sleep";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          uint64_t v16 = "nw_parameters_get_no_wake_from_sleep";
          __int16 v17 = 2082;
          BOOL v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint64_t v16 = "nw_parameters_get_no_wake_from_sleep";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint64_t v16 = "nw_parameters_get_no_wake_from_sleep";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_parameters_get_next_hop_required_interface_subtype(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = *(unsigned int *)(*((void *)v1 + 13) + 96);
    goto LABEL_3;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)tcp_info buf = 136446210;
  uint64_t v16 = "nw_parameters_get_next_hop_required_interface_subtype";
  os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint64_t v16 = "nw_parameters_get_next_hop_required_interface_subtype";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          uint64_t v16 = "nw_parameters_get_next_hop_required_interface_subtype";
          __int16 v17 = 2082;
          BOOL v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint64_t v16 = "nw_parameters_get_next_hop_required_interface_subtype";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint64_t v16 = "nw_parameters_get_next_hop_required_interface_subtype";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_parameters_get_delegated_unique_pid(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = *(void *)(*((void *)v1 + 13) + 56);
    goto LABEL_3;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)tcp_info buf = 136446210;
  uint64_t v16 = "nw_parameters_get_delegated_unique_pid";
  os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint64_t v16 = "nw_parameters_get_delegated_unique_pid";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          uint64_t v16 = "nw_parameters_get_delegated_unique_pid";
          __int16 v17 = 2082;
          BOOL v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint64_t v16 = "nw_parameters_get_delegated_unique_pid";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint64_t v16 = "nw_parameters_get_delegated_unique_pid";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_parameters_get_attributed_bundle_identifier(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = *(void *)(*((void *)v1 + 13) + 128);
    goto LABEL_3;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)tcp_info buf = 136446210;
  uint64_t v16 = "nw_parameters_get_attributed_bundle_identifier";
  os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint64_t v16 = "nw_parameters_get_attributed_bundle_identifier";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          uint64_t v16 = "nw_parameters_get_attributed_bundle_identifier";
          __int16 v17 = 2082;
          BOOL v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint64_t v16 = "nw_parameters_get_attributed_bundle_identifier";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint64_t v16 = "nw_parameters_get_attributed_bundle_identifier";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

id nw_parameters_copy_prohibited_interfaces(void *a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (!v1)
  {
    id v5 = __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    __int16 v17 = "nw_parameters_copy_prohibited_interfaces";
    os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (__nwlog_fault(v6, &type, &v14))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v7 = __nwlog_obj();
        os_log_type_t v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          __int16 v17 = "nw_parameters_copy_prohibited_interfaces";
          _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
        }
      }
      else if (v14)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        uint64_t v7 = __nwlog_obj();
        os_log_type_t v10 = type;
        BOOL v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)tcp_info buf = 136446466;
            __int16 v17 = "nw_parameters_copy_prohibited_interfaces";
            __int16 v18 = 2082;
            uint64_t v19 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_20;
        }
        if (v11)
        {
          *(_DWORD *)tcp_info buf = 136446210;
          __int16 v17 = "nw_parameters_copy_prohibited_interfaces";
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        uint64_t v7 = __nwlog_obj();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          __int16 v17 = "nw_parameters_copy_prohibited_interfaces";
          _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_20:
    if (v6) {
      free(v6);
    }
    goto LABEL_22;
  }
  uint64_t v3 = *(void *)(*((void *)v1 + 13) + 176);
  if (!v3)
  {
LABEL_22:
    id v4 = 0;
    goto LABEL_23;
  }
  id v4 = *(id *)(v3 + 24);
LABEL_23:

  return v4;
}

id nw_parameters_copy_preferred_netagent_uuids(void *a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (!v1)
  {
    id v5 = __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    __int16 v17 = "nw_parameters_copy_preferred_netagent_uuids";
    os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (__nwlog_fault(v6, &type, &v14))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v7 = __nwlog_obj();
        os_log_type_t v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          __int16 v17 = "nw_parameters_copy_preferred_netagent_uuids";
          _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
        }
      }
      else if (v14)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        uint64_t v7 = __nwlog_obj();
        os_log_type_t v10 = type;
        BOOL v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)tcp_info buf = 136446466;
            __int16 v17 = "nw_parameters_copy_preferred_netagent_uuids";
            __int16 v18 = 2082;
            uint64_t v19 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_20;
        }
        if (v11)
        {
          *(_DWORD *)tcp_info buf = 136446210;
          __int16 v17 = "nw_parameters_copy_preferred_netagent_uuids";
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        uint64_t v7 = __nwlog_obj();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          __int16 v17 = "nw_parameters_copy_preferred_netagent_uuids";
          _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_20:
    if (v6) {
      free(v6);
    }
    goto LABEL_22;
  }
  uint64_t v3 = *(void *)(*((void *)v1 + 13) + 176);
  if (!v3)
  {
LABEL_22:
    id v4 = 0;
    goto LABEL_23;
  }
  id v4 = *(id *)(v3 + 96);
LABEL_23:

  return v4;
}

id nw_parameters_copy_preferred_interface_subtypes(void *a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (!v1)
  {
    id v5 = __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    __int16 v17 = "nw_parameters_copy_preferred_interface_subtypes";
    os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (__nwlog_fault(v6, &type, &v14))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v7 = __nwlog_obj();
        os_log_type_t v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          __int16 v17 = "nw_parameters_copy_preferred_interface_subtypes";
          _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
        }
      }
      else if (v14)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        uint64_t v7 = __nwlog_obj();
        os_log_type_t v10 = type;
        BOOL v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)tcp_info buf = 136446466;
            __int16 v17 = "nw_parameters_copy_preferred_interface_subtypes";
            __int16 v18 = 2082;
            uint64_t v19 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_20;
        }
        if (v11)
        {
          *(_DWORD *)tcp_info buf = 136446210;
          __int16 v17 = "nw_parameters_copy_preferred_interface_subtypes";
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        uint64_t v7 = __nwlog_obj();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          __int16 v17 = "nw_parameters_copy_preferred_interface_subtypes";
          _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_20:
    if (v6) {
      free(v6);
    }
    goto LABEL_22;
  }
  uint64_t v3 = *(void *)(*((void *)v1 + 13) + 176);
  if (!v3)
  {
LABEL_22:
    id v4 = 0;
    goto LABEL_23;
  }
  id v4 = *(id *)(v3 + 16);
LABEL_23:

  return v4;
}

id nw_parameters_copy_channel_demux_options(void *a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (!v1)
  {
    id v5 = __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    __int16 v17 = "nw_parameters_copy_channel_demux_options";
    os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (__nwlog_fault(v6, &type, &v14))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v7 = __nwlog_obj();
        os_log_type_t v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          __int16 v17 = "nw_parameters_copy_channel_demux_options";
          _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
        }
      }
      else if (v14)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        uint64_t v7 = __nwlog_obj();
        os_log_type_t v10 = type;
        BOOL v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)tcp_info buf = 136446466;
            __int16 v17 = "nw_parameters_copy_channel_demux_options";
            __int16 v18 = 2082;
            uint64_t v19 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_20;
        }
        if (v11)
        {
          *(_DWORD *)tcp_info buf = 136446210;
          __int16 v17 = "nw_parameters_copy_channel_demux_options";
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        uint64_t v7 = __nwlog_obj();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          __int16 v17 = "nw_parameters_copy_channel_demux_options";
          _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_20:
    if (v6) {
      free(v6);
    }
    goto LABEL_22;
  }
  uint64_t v3 = *(void *)(*((void *)v1 + 13) + 176);
  if (!v3)
  {
LABEL_22:
    id v4 = 0;
    goto LABEL_23;
  }
  id v4 = *(id *)(v3 + 128);
LABEL_23:

  return v4;
}

xpc_object_t nw_parameters_copy_avoided_netagent_types(void *a1)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  id v4 = v1;
  if (v1)
  {
    path_parameters = v1->path_parameters;
    required_interface = path_parameters->required_interface;
    if (required_interface)
    {
      xpc_object_t v7 = *((id *)required_interface + 14);
      path_parameters = v4->path_parameters;
    }
    else
    {
      xpc_object_t v7 = 0;
    }
    if (path_parameters->path_value.companion_preference == 2)
    {
      int agent_preference = nw_parameters_get_agent_preference(v4, v2, v3);
      if (agent_preference)
      {
        if (agent_preference == 2)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          BOOL v9 = (id)gLogObj;
          if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)tcp_info buf = 136446210;
            char v23 = "nw_parameters_copy_avoided_netagent_types";
            _os_log_impl(&dword_1830D4000, v9, OS_LOG_TYPE_ERROR, "%{public}s Parameters companion_preference is avoid but companion is in preferred array", buf, 0xCu);
          }
        }
      }
      else
      {
        if (v7)
        {
          xpc_object_t v10 = xpc_copy(*((xpc_object_t *)v4->path_parameters->required_interface + 14));

          xpc_object_t v7 = v10;
        }
        else
        {
          xpc_object_t v7 = xpc_array_create(0, 0);
        }
        xpc_array_set_string(v7, 0xFFFFFFFFFFFFFFFFLL, "CompanionProxy");
      }
    }
    goto LABEL_15;
  }
  os_log_type_t v12 = __nwlog_obj();
  *(_DWORD *)tcp_info buf = 136446210;
  char v23 = "nw_parameters_copy_avoided_netagent_types";
  char v13 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v20 = 0;
  if (__nwlog_fault(v13, &type, &v20))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        char v23 = "nw_parameters_copy_avoided_netagent_types";
        _os_log_impl(&dword_1830D4000, v14, v15, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v20)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      char v14 = __nwlog_obj();
      os_log_type_t v17 = type;
      BOOL v18 = os_log_type_enabled(v14, type);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          char v23 = "nw_parameters_copy_avoided_netagent_types";
          __int16 v24 = 2082;
          os_log_type_t v25 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v14, v17, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_32;
      }
      if (v18)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        char v23 = "nw_parameters_copy_avoided_netagent_types";
        _os_log_impl(&dword_1830D4000, v14, v17, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      char v14 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        char v23 = "nw_parameters_copy_avoided_netagent_types";
        _os_log_impl(&dword_1830D4000, v14, v19, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_32:
  if (v13) {
    free(v13);
  }
  xpc_object_t v7 = 0;
LABEL_15:

  return v7;
}

void sub_18332AC50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

xpc_object_t nw_parameters_copy_avoided_netagent_domains(void *a1)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  id v4 = v1;
  if (v1)
  {
    path_parameters = v1->path_parameters;
    required_interface = path_parameters->required_interface;
    if (required_interface)
    {
      xpc_object_t v7 = *((id *)required_interface + 13);
      path_parameters = v4->path_parameters;
    }
    else
    {
      xpc_object_t v7 = 0;
    }
    if (path_parameters->path_value.companion_preference == 2)
    {
      int agent_preference = nw_parameters_get_agent_preference(v4, v2, v3);
      if (agent_preference)
      {
        if (agent_preference == 1)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          BOOL v9 = (id)gLogObj;
          if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)tcp_info buf = 136446210;
            char v23 = "nw_parameters_copy_avoided_netagent_domains";
            _os_log_impl(&dword_1830D4000, v9, OS_LOG_TYPE_ERROR, "%{public}s Parameters companion_preference is avoid but companion is in preferred array", buf, 0xCu);
          }
        }
      }
      else
      {
        if (v7)
        {
          xpc_object_t v10 = xpc_copy(*((xpc_object_t *)v4->path_parameters->required_interface + 13));

          xpc_object_t v7 = v10;
        }
        else
        {
          xpc_object_t v7 = xpc_array_create(0, 0);
        }
        xpc_array_set_string(v7, 0xFFFFFFFFFFFFFFFFLL, "com.apple.networkrelay");
      }
    }
    goto LABEL_15;
  }
  os_log_type_t v12 = __nwlog_obj();
  *(_DWORD *)tcp_info buf = 136446210;
  char v23 = "nw_parameters_copy_avoided_netagent_domains";
  char v13 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v20 = 0;
  if (__nwlog_fault(v13, &type, &v20))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        char v23 = "nw_parameters_copy_avoided_netagent_domains";
        _os_log_impl(&dword_1830D4000, v14, v15, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v20)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      char v14 = __nwlog_obj();
      os_log_type_t v17 = type;
      BOOL v18 = os_log_type_enabled(v14, type);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          char v23 = "nw_parameters_copy_avoided_netagent_domains";
          __int16 v24 = 2082;
          os_log_type_t v25 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v14, v17, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_32;
      }
      if (v18)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        char v23 = "nw_parameters_copy_avoided_netagent_domains";
        _os_log_impl(&dword_1830D4000, v14, v17, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      char v14 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        char v23 = "nw_parameters_copy_avoided_netagent_domains";
        _os_log_impl(&dword_1830D4000, v14, v19, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_32:
  if (v13) {
    free(v13);
  }
  xpc_object_t v7 = 0;
LABEL_15:

  return v7;
}

void sub_18332B004(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

unsigned char *nw_endpoint_get_ethernet_address(void *a1)
{
  *(void *)&v41[13] = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (!v1)
  {
    __int16 v27 = __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    int v39 = "nw_endpoint_get_ethernet_address";
    uint64_t v28 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v36 = 0;
    if (__nwlog_fault(v28, &type, &v36))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v29 = __nwlog_obj();
        os_log_type_t v30 = type;
        if (os_log_type_enabled(v29, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          int v39 = "nw_endpoint_get_ethernet_address";
          _os_log_impl(&dword_1830D4000, v29, v30, "%{public}s called with null endpoint", buf, 0xCu);
        }
      }
      else if (v36)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        uint64_t v29 = __nwlog_obj();
        os_log_type_t v32 = type;
        BOOL v33 = os_log_type_enabled(v29, type);
        if (backtrace_string)
        {
          if (v33)
          {
            *(_DWORD *)tcp_info buf = 136446466;
            int v39 = "nw_endpoint_get_ethernet_address";
            __int16 v40 = 2082;
            *(void *)uint64_t v41 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v29, v32, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_49;
        }
        if (v33)
        {
          *(_DWORD *)tcp_info buf = 136446210;
          int v39 = "nw_endpoint_get_ethernet_address";
          _os_log_impl(&dword_1830D4000, v29, v32, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        uint64_t v29 = __nwlog_obj();
        os_log_type_t v34 = type;
        if (os_log_type_enabled(v29, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          int v39 = "nw_endpoint_get_ethernet_address";
          _os_log_impl(&dword_1830D4000, v29, v34, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_49:
    if (!v28) {
      goto LABEL_31;
    }
    os_log_type_t v25 = (char *)v28;
    goto LABEL_30;
  }
  id v3 = v1;
  int v4 = [v3 type];

  if (v4 != 1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v7 = (id)gLogObj;
    id v8 = v3;
    int v9 = [v8 type];

    *(_DWORD *)tcp_info buf = 136446466;
    int v39 = "nw_endpoint_get_ethernet_address";
    __int16 v40 = 1024;
    *(_DWORD *)uint64_t v41 = v9;
    LODWORD(v35) = 18;
    xpc_object_t v10 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v36 = 0;
    if (__nwlog_fault(v10, &type, &v36))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v11 = (id)gLogObj;
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          id v13 = v8;
          int v14 = objc_msgSend(v13, "type", buf, v35);

          *(_DWORD *)tcp_info buf = 136446466;
          int v39 = "nw_endpoint_get_ethernet_address";
          __int16 v40 = 1024;
          *(_DWORD *)uint64_t v41 = v14;
          _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s incorrect endpoint type %u", buf, 0x12u);
        }
      }
      else if (v36)
      {
        os_log_type_t v15 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v11 = (id)gLogObj;
        os_log_type_t v16 = type;
        BOOL v17 = os_log_type_enabled(v11, type);
        if (v15)
        {
          if (v17)
          {
            id v18 = v8;
            int v19 = objc_msgSend(v18, "type", buf, v35);

            *(_DWORD *)tcp_info buf = 136446722;
            int v39 = "nw_endpoint_get_ethernet_address";
            __int16 v40 = 1024;
            *(_DWORD *)uint64_t v41 = v19;
            v41[2] = 2082;
            *(void *)&v41[3] = v15;
            _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s incorrect endpoint type %u, dumping backtrace:%{public}s", buf, 0x1Cu);
          }

          free(v15);
          if (!v10) {
            goto LABEL_31;
          }
LABEL_29:
          os_log_type_t v25 = (char *)v10;
LABEL_30:
          free(v25);
          goto LABEL_31;
        }
        if (v17)
        {
          id v23 = v8;
          int v24 = objc_msgSend(v23, "type", buf, v35);

          *(_DWORD *)tcp_info buf = 136446466;
          int v39 = "nw_endpoint_get_ethernet_address";
          __int16 v40 = 1024;
          *(_DWORD *)uint64_t v41 = v24;
          _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s incorrect endpoint type %u, no backtrace", buf, 0x12u);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v11 = (id)gLogObj;
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v11, type))
        {
          id v21 = v8;
          int v22 = objc_msgSend(v21, "type", buf, v35);

          *(_DWORD *)tcp_info buf = 136446466;
          int v39 = "nw_endpoint_get_ethernet_address";
          __int16 v40 = 1024;
          *(_DWORD *)uint64_t v41 = v22;
          _os_log_impl(&dword_1830D4000, v11, v20, "%{public}s incorrect endpoint type %u, backtrace limit exceeded", buf, 0x12u);
        }
      }
    }
    if (!v10)
    {
LABEL_31:
      os_log_type_t v6 = 0;
      goto LABEL_32;
    }
    goto LABEL_29;
  }
  id v5 = v3;
  os_log_type_t v6 = v5 + 360;
  if (!v5[360] && !v5[361] && !v5[362] && !v5[363] && !v5[364] && !v5[365]) {
    os_log_type_t v6 = 0;
  }

LABEL_32:
  return v6;
}

void sub_18332B63C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_path_create_necp_parameters_block_invoke_3(uint64_t a1, _OWORD *a2)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  unint64_t v3 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  if (!v3)
  {
    id v18 = __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    char v36 = "nw_necp_append_tlv";
    os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v33 = 0;
    if (!__nwlog_fault(v6, &type, &v33)) {
      goto LABEL_17;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v7 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_81;
      }
      *(_DWORD *)tcp_info buf = 136446210;
      char v36 = "nw_necp_append_tlv";
      os_log_type_t v20 = "%{public}s called with null tlv_start";
      goto LABEL_71;
    }
    if (v33)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v7 = __nwlog_obj();
      os_log_type_t v19 = type;
      BOOL v24 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (!v24) {
          goto LABEL_16;
        }
        *(_DWORD *)tcp_info buf = 136446466;
        char v36 = "nw_necp_append_tlv";
        __int16 v37 = 2082;
        *(void *)int v38 = backtrace_string;
        id v13 = "%{public}s called with null tlv_start, dumping backtrace:%{public}s";
        goto LABEL_48;
      }
      if (!v24) {
        goto LABEL_81;
      }
      *(_DWORD *)tcp_info buf = 136446210;
      char v36 = "nw_necp_append_tlv";
      os_log_type_t v20 = "%{public}s called with null tlv_start, no backtrace";
    }
    else
    {
      id v7 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_81;
      }
      *(_DWORD *)tcp_info buf = 136446210;
      char v36 = "nw_necp_append_tlv";
      os_log_type_t v20 = "%{public}s called with null tlv_start, backtrace limit exceeded";
    }
LABEL_71:
    os_log_type_t v30 = v7;
    os_log_type_t v31 = v19;
    uint32_t v32 = 12;
    goto LABEL_80;
  }
  unint64_t v4 = *(void *)(a1 + 40);
  if (!v4)
  {
    id v21 = __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    char v36 = "nw_necp_append_tlv";
    os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v33 = 0;
    if (!__nwlog_fault(v6, &type, &v33)) {
      goto LABEL_17;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v7 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_81;
      }
      *(_DWORD *)tcp_info buf = 136446210;
      char v36 = "nw_necp_append_tlv";
      os_log_type_t v20 = "%{public}s called with null beyond";
      goto LABEL_71;
    }
    if (v33)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v7 = __nwlog_obj();
      os_log_type_t v19 = type;
      BOOL v25 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (!v25) {
          goto LABEL_16;
        }
        *(_DWORD *)tcp_info buf = 136446466;
        char v36 = "nw_necp_append_tlv";
        __int16 v37 = 2082;
        *(void *)int v38 = backtrace_string;
        id v13 = "%{public}s called with null beyond, dumping backtrace:%{public}s";
LABEL_48:
        int v14 = v7;
        os_log_type_t v15 = v19;
        uint32_t v16 = 22;
LABEL_15:
        _os_log_impl(&dword_1830D4000, v14, v15, v13, buf, v16);
LABEL_16:

        free(backtrace_string);
        goto LABEL_17;
      }
      if (!v25) {
        goto LABEL_81;
      }
      *(_DWORD *)tcp_info buf = 136446210;
      char v36 = "nw_necp_append_tlv";
      os_log_type_t v20 = "%{public}s called with null beyond, no backtrace";
    }
    else
    {
      id v7 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_81;
      }
      *(_DWORD *)tcp_info buf = 136446210;
      char v36 = "nw_necp_append_tlv";
      os_log_type_t v20 = "%{public}s called with null beyond, backtrace limit exceeded";
    }
    goto LABEL_71;
  }
  if (v3 >= v4)
  {
    int v22 = __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136447234;
    char v36 = "nw_necp_append_tlv";
    __int16 v37 = 2048;
    *(void *)int v38 = v3;
    *(_WORD *)&v38[8] = 2048;
    *(void *)int v39 = v4;
    *(_WORD *)&v39[8] = 1024;
    *(_DWORD *)__int16 v40 = 150;
    *(_WORD *)&void v40[4] = 1024;
    *(_DWORD *)&v40[6] = 16;
    os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v33 = 0;
    if (!__nwlog_fault(v6, &type, &v33)) {
      goto LABEL_17;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v7 = __nwlog_obj();
      os_log_type_t v23 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_81;
      }
      *(_DWORD *)tcp_info buf = 136447234;
      char v36 = "nw_necp_append_tlv";
      __int16 v37 = 2048;
      *(void *)int v38 = v3;
      *(_WORD *)&v38[8] = 2048;
      *(void *)int v39 = v4;
      *(_WORD *)&v39[8] = 1024;
      *(_DWORD *)__int16 v40 = 150;
      *(_WORD *)&void v40[4] = 1024;
      *(_DWORD *)&v40[6] = 16;
      os_log_type_t v20 = "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u";
    }
    else if (v33)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v7 = __nwlog_obj();
      os_log_type_t v23 = type;
      BOOL v28 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (!v28) {
          goto LABEL_16;
        }
        *(_DWORD *)tcp_info buf = 136447490;
        char v36 = "nw_necp_append_tlv";
        __int16 v37 = 2048;
        *(void *)int v38 = v3;
        *(_WORD *)&v38[8] = 2048;
        *(void *)int v39 = v4;
        *(_WORD *)&v39[8] = 1024;
        *(_DWORD *)__int16 v40 = 150;
        *(_WORD *)&void v40[4] = 1024;
        *(_DWORD *)&v40[6] = 16;
        *(_WORD *)uint64_t v41 = 2082;
        *(void *)&v41[2] = backtrace_string;
        id v13 = "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, dumping backtrace:%{public}s";
        int v14 = v7;
        os_log_type_t v15 = v23;
        uint32_t v16 = 54;
        goto LABEL_15;
      }
      if (!v28) {
        goto LABEL_81;
      }
      *(_DWORD *)tcp_info buf = 136447234;
      char v36 = "nw_necp_append_tlv";
      __int16 v37 = 2048;
      *(void *)int v38 = v3;
      *(_WORD *)&v38[8] = 2048;
      *(void *)int v39 = v4;
      *(_WORD *)&v39[8] = 1024;
      *(_DWORD *)__int16 v40 = 150;
      *(_WORD *)&void v40[4] = 1024;
      *(_DWORD *)&v40[6] = 16;
      os_log_type_t v20 = "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, no backtrace";
    }
    else
    {
      id v7 = __nwlog_obj();
      os_log_type_t v23 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_81;
      }
      *(_DWORD *)tcp_info buf = 136447234;
      char v36 = "nw_necp_append_tlv";
      __int16 v37 = 2048;
      *(void *)int v38 = v3;
      *(_WORD *)&v38[8] = 2048;
      *(void *)int v39 = v4;
      *(_WORD *)&v39[8] = 1024;
      *(_DWORD *)__int16 v40 = 150;
      *(_WORD *)&void v40[4] = 1024;
      *(_DWORD *)&v40[6] = 16;
      os_log_type_t v20 = "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, backtrace limit exceeded";
    }
    os_log_type_t v30 = v7;
    os_log_type_t v31 = v23;
    uint32_t v32 = 44;
LABEL_80:
    _os_log_impl(&dword_1830D4000, v30, v31, v20, buf, v32);
    goto LABEL_81;
  }
  if (v4 - v3 <= 0x14)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v5 = (id)gLogObj;
    *(_DWORD *)tcp_info buf = 136447490;
    char v36 = "nw_necp_append_tlv";
    __int16 v37 = 2048;
    *(void *)int v38 = v3;
    *(_WORD *)&v38[8] = 2048;
    *(void *)int v39 = 21;
    *(_WORD *)&v39[8] = 2048;
    *(void *)__int16 v40 = v4;
    *(_WORD *)&v40[8] = 1024;
    *(_DWORD *)uint64_t v41 = 150;
    *(_WORD *)&v41[4] = 1024;
    *(_DWORD *)&v41[6] = 16;
    os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v33 = 0;
    if (!__nwlog_fault(v6, &type, &v33)) {
      goto LABEL_17;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v7 = (id)gLogObj;
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_26;
      }
      *(_DWORD *)tcp_info buf = 136447490;
      char v36 = "nw_necp_append_tlv";
      __int16 v37 = 2048;
      *(void *)int v38 = v3;
      *(_WORD *)&v38[8] = 2048;
      *(void *)int v39 = 21;
      *(_WORD *)&v39[8] = 2048;
      *(void *)__int16 v40 = v4;
      *(_WORD *)&v40[8] = 1024;
      *(_DWORD *)uint64_t v41 = 150;
      *(_WORD *)&v41[4] = 1024;
      *(_DWORD *)&v41[6] = 16;
      int v9 = "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u";
      goto LABEL_25;
    }
    if (!v33)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v7 = (id)gLogObj;
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_26;
      }
      *(_DWORD *)tcp_info buf = 136447490;
      char v36 = "nw_necp_append_tlv";
      __int16 v37 = 2048;
      *(void *)int v38 = v3;
      *(_WORD *)&v38[8] = 2048;
      *(void *)int v39 = 21;
      *(_WORD *)&v39[8] = 2048;
      *(void *)__int16 v40 = v4;
      *(_WORD *)&v40[8] = 1024;
      *(_DWORD *)uint64_t v41 = 150;
      *(_WORD *)&v41[4] = 1024;
      *(_DWORD *)&v41[6] = 16;
      int v9 = "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, backtrace limit exceeded";
      goto LABEL_25;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v7 = (id)gLogObj;
    os_log_type_t v8 = type;
    BOOL v12 = os_log_type_enabled(v7, type);
    if (!backtrace_string)
    {
      if (!v12) {
        goto LABEL_26;
      }
      *(_DWORD *)tcp_info buf = 136447490;
      char v36 = "nw_necp_append_tlv";
      __int16 v37 = 2048;
      *(void *)int v38 = v3;
      *(_WORD *)&v38[8] = 2048;
      *(void *)int v39 = 21;
      *(_WORD *)&v39[8] = 2048;
      *(void *)__int16 v40 = v4;
      *(_WORD *)&v40[8] = 1024;
      *(_DWORD *)uint64_t v41 = 150;
      *(_WORD *)&v41[4] = 1024;
      *(_DWORD *)&v41[6] = 16;
      int v9 = "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, no backtrace";
LABEL_25:
      _os_log_impl(&dword_1830D4000, v7, v8, v9, buf, 0x36u);
LABEL_26:

      if (!v6) {
        goto LABEL_19;
      }
      goto LABEL_18;
    }
    if (!v12) {
      goto LABEL_16;
    }
    *(_DWORD *)tcp_info buf = 136447746;
    char v36 = "nw_necp_append_tlv";
    __int16 v37 = 2048;
    *(void *)int v38 = v3;
    *(_WORD *)&v38[8] = 2048;
    *(void *)int v39 = 21;
    *(_WORD *)&v39[8] = 2048;
    *(void *)__int16 v40 = v4;
    *(_WORD *)&v40[8] = 1024;
    *(_DWORD *)uint64_t v41 = 150;
    *(_WORD *)&v41[4] = 1024;
    *(_DWORD *)&v41[6] = 16;
    __int16 v42 = 2082;
    int v43 = backtrace_string;
    id v13 = "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, dumping backtrace:%{public}s";
    int v14 = v7;
    os_log_type_t v15 = v8;
    uint32_t v16 = 64;
    goto LABEL_15;
  }
  *(unsigned char *)unint64_t v3 = -106;
  *(_DWORD *)(v3 + 1) = 16;
  if (!a2)
  {
    uint64_t v26 = __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446722;
    char v36 = "nw_necp_append_tlv";
    __int16 v37 = 1024;
    *(_DWORD *)int v38 = 150;
    *(_WORD *)&v38[4] = 1024;
    *(_DWORD *)&v38[6] = 16;
    os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v33 = 0;
    if (!__nwlog_fault(v6, &type, &v33)) {
      goto LABEL_17;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v7 = __nwlog_obj();
      os_log_type_t v27 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)tcp_info buf = 136446722;
        char v36 = "nw_necp_append_tlv";
        __int16 v37 = 1024;
        *(_DWORD *)int v38 = 150;
        *(_WORD *)&v38[4] = 1024;
        *(_DWORD *)&v38[6] = 16;
        os_log_type_t v20 = "%{public}s type=%u length=%u but value is NULL";
LABEL_79:
        os_log_type_t v30 = v7;
        os_log_type_t v31 = v27;
        uint32_t v32 = 24;
        goto LABEL_80;
      }
    }
    else
    {
      if (v33)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        id v7 = __nwlog_obj();
        os_log_type_t v27 = type;
        BOOL v29 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (!v29) {
            goto LABEL_16;
          }
          *(_DWORD *)tcp_info buf = 136446978;
          char v36 = "nw_necp_append_tlv";
          __int16 v37 = 1024;
          *(_DWORD *)int v38 = 150;
          *(_WORD *)&v38[4] = 1024;
          *(_DWORD *)&v38[6] = 16;
          *(_WORD *)int v39 = 2082;
          *(void *)&v39[2] = backtrace_string;
          id v13 = "%{public}s type=%u length=%u but value is NULL, dumping backtrace:%{public}s";
          int v14 = v7;
          os_log_type_t v15 = v27;
          uint32_t v16 = 34;
          goto LABEL_15;
        }
        if (!v29) {
          goto LABEL_81;
        }
        *(_DWORD *)tcp_info buf = 136446722;
        char v36 = "nw_necp_append_tlv";
        __int16 v37 = 1024;
        *(_DWORD *)int v38 = 150;
        *(_WORD *)&v38[4] = 1024;
        *(_DWORD *)&v38[6] = 16;
        os_log_type_t v20 = "%{public}s type=%u length=%u but value is NULL, no backtrace";
        goto LABEL_79;
      }
      id v7 = __nwlog_obj();
      os_log_type_t v27 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)tcp_info buf = 136446722;
        char v36 = "nw_necp_append_tlv";
        __int16 v37 = 1024;
        *(_DWORD *)int v38 = 150;
        *(_WORD *)&v38[4] = 1024;
        *(_DWORD *)&v38[6] = 16;
        os_log_type_t v20 = "%{public}s type=%u length=%u but value is NULL, backtrace limit exceeded";
        goto LABEL_79;
      }
    }
LABEL_81:

LABEL_17:
    if (!v6)
    {
LABEL_19:
      unint64_t v10 = 0;
      goto LABEL_20;
    }
LABEL_18:
    free(v6);
    goto LABEL_19;
  }
  *(_OWORD *)(v3 + 5) = *a2;
  unint64_t v10 = v3 + 21;
LABEL_20:
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v10;
  return 1;
}

uint64_t nw_interface_type_to_functional_type(unsigned int a1, int a2)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  if (a2 <= 1001)
  {
    if (!a2) {
      goto LABEL_27;
    }
    if (a2 == 1001)
    {
      LOBYTE(v4) = 3;
      return v4;
    }
  }
  else
  {
    switch(a2)
    {
      case 5001:
        LOBYTE(v4) = 7;
        return v4;
      case 4001:
        LOBYTE(v4) = 6;
        return v4;
      case 1002:
        LOBYTE(v4) = 4;
        return v4;
    }
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v5 = (id)gLogObj;
  *(_DWORD *)tcp_info buf = 136446466;
  BOOL v29 = "nw_interface_type_to_functional_type";
  __int16 v30 = 1024;
  unsigned int v31 = a2;
  os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v26 = 0;
  if (__nwlog_fault(v6, &type, &v26))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v7 = (id)gLogObj;
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)tcp_info buf = 136446466;
        BOOL v29 = "nw_interface_type_to_functional_type";
        __int16 v30 = 1024;
        unsigned int v31 = a2;
        int v9 = "%{public}s Unknown interface_subtype %d";
LABEL_22:
        id v13 = v7;
        os_log_type_t v14 = v8;
LABEL_23:
        _os_log_impl(&dword_1830D4000, v13, v14, v9, buf, 0x12u);
      }
    }
    else
    {
      if (v26)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v7 = (id)gLogObj;
        os_log_type_t v11 = type;
        BOOL v12 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v12)
          {
            *(_DWORD *)tcp_info buf = 136446722;
            BOOL v29 = "nw_interface_type_to_functional_type";
            __int16 v30 = 1024;
            unsigned int v31 = a2;
            __int16 v32 = 2082;
            char v33 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v7, v11, "%{public}s Unknown interface_subtype %d, dumping backtrace:%{public}s", buf, 0x1Cu);
          }

          free(backtrace_string);
          goto LABEL_25;
        }
        if (!v12) {
          goto LABEL_24;
        }
        *(_DWORD *)tcp_info buf = 136446466;
        BOOL v29 = "nw_interface_type_to_functional_type";
        __int16 v30 = 1024;
        unsigned int v31 = a2;
        int v9 = "%{public}s Unknown interface_subtype %d, no backtrace";
        id v13 = v7;
        os_log_type_t v14 = v11;
        goto LABEL_23;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v7 = (id)gLogObj;
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)tcp_info buf = 136446466;
        BOOL v29 = "nw_interface_type_to_functional_type";
        __int16 v30 = 1024;
        unsigned int v31 = a2;
        int v9 = "%{public}s Unknown interface_subtype %d, backtrace limit exceeded";
        goto LABEL_22;
      }
    }
LABEL_24:
  }
LABEL_25:
  if (v6) {
    free(v6);
  }
LABEL_27:
  if (a1 < 5) {
    return (0x102050300uLL >> (8 * a1));
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v15 = (id)gLogObj;
  *(_DWORD *)tcp_info buf = 136446466;
  BOOL v29 = "nw_interface_type_to_functional_type";
  __int16 v30 = 1024;
  unsigned int v31 = a1;
  uint32_t v16 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v26 = 0;
  if (!__nwlog_fault(v16, &type, &v26)) {
    goto LABEL_43;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v17 = (id)gLogObj;
    os_log_type_t v18 = type;
    if (os_log_type_enabled(v17, type))
    {
      *(_DWORD *)tcp_info buf = 136446466;
      BOOL v29 = "nw_interface_type_to_functional_type";
      __int16 v30 = 1024;
      unsigned int v31 = a1;
      os_log_type_t v19 = "%{public}s Unknown interface_type %d";
LABEL_40:
      os_log_type_t v23 = v17;
      os_log_type_t v24 = v18;
LABEL_41:
      _os_log_impl(&dword_1830D4000, v23, v24, v19, buf, 0x12u);
    }
  }
  else if (v26)
  {
    os_log_type_t v20 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v17 = (id)gLogObj;
    os_log_type_t v21 = type;
    BOOL v22 = os_log_type_enabled(v17, type);
    if (v20)
    {
      if (v22)
      {
        *(_DWORD *)tcp_info buf = 136446722;
        BOOL v29 = "nw_interface_type_to_functional_type";
        __int16 v30 = 1024;
        unsigned int v31 = a1;
        __int16 v32 = 2082;
        char v33 = v20;
        _os_log_impl(&dword_1830D4000, v17, v21, "%{public}s Unknown interface_type %d, dumping backtrace:%{public}s", buf, 0x1Cu);
      }

      free(v20);
      goto LABEL_43;
    }
    if (v22)
    {
      *(_DWORD *)tcp_info buf = 136446466;
      BOOL v29 = "nw_interface_type_to_functional_type";
      __int16 v30 = 1024;
      unsigned int v31 = a1;
      os_log_type_t v19 = "%{public}s Unknown interface_type %d, no backtrace";
      os_log_type_t v23 = v17;
      os_log_type_t v24 = v21;
      goto LABEL_41;
    }
  }
  else
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v17 = (id)gLogObj;
    os_log_type_t v18 = type;
    if (os_log_type_enabled(v17, type))
    {
      *(_DWORD *)tcp_info buf = 136446466;
      BOOL v29 = "nw_interface_type_to_functional_type";
      __int16 v30 = 1024;
      unsigned int v31 = a1;
      os_log_type_t v19 = "%{public}s Unknown interface_type %d, backtrace limit exceeded";
      goto LABEL_40;
    }
  }

LABEL_43:
  if (v16) {
    free(v16);
  }
  LOBYTE(v4) = 0;
  return v4;
}

void sub_18332CA00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

nw_txt_record_t nw_txt_record_create_with_bytes(const uint8_t *txt_bytes, size_t txt_len)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  if (!txt_bytes)
  {
    BOOL v25 = __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    uint64_t v48 = "nw_txt_record_create_with_bytes";
    char v26 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v45 = 0;
    if (!__nwlog_fault(v26, &type, &v45)) {
      goto LABEL_94;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v27 = __nwlog_obj();
      os_log_type_t v28 = type;
      if (os_log_type_enabled(v27, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint64_t v48 = "nw_txt_record_create_with_bytes";
        _os_log_impl(&dword_1830D4000, v27, v28, "%{public}s called with null (txt_bytes != __null)", buf, 0xCu);
      }
      goto LABEL_93;
    }
    if (!v45)
    {
      os_log_type_t v27 = __nwlog_obj();
      os_log_type_t v42 = type;
      if (os_log_type_enabled(v27, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint64_t v48 = "nw_txt_record_create_with_bytes";
        _os_log_impl(&dword_1830D4000, v27, v42, "%{public}s called with null (txt_bytes != __null), backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_93;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v27 = __nwlog_obj();
    os_log_type_t v36 = type;
    BOOL v37 = os_log_type_enabled(v27, type);
    if (!backtrace_string)
    {
      if (v37)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint64_t v48 = "nw_txt_record_create_with_bytes";
        _os_log_impl(&dword_1830D4000, v27, v36, "%{public}s called with null (txt_bytes != __null), no backtrace", buf, 0xCu);
      }
      goto LABEL_93;
    }
    if (v37)
    {
      *(_DWORD *)tcp_info buf = 136446466;
      uint64_t v48 = "nw_txt_record_create_with_bytes";
      __int16 v49 = 2082;
      size_t v50 = (size_t)backtrace_string;
      _os_log_impl(&dword_1830D4000, v27, v36, "%{public}s called with null (txt_bytes != __null), dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_75:

    free(backtrace_string);
    goto LABEL_94;
  }
  if (!txt_len)
  {
    BOOL v29 = __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    uint64_t v48 = "nw_txt_record_create_with_bytes";
    char v26 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v45 = 0;
    if (!__nwlog_fault(v26, &type, &v45)) {
      goto LABEL_94;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v27 = __nwlog_obj();
      os_log_type_t v30 = type;
      if (os_log_type_enabled(v27, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint64_t v48 = "nw_txt_record_create_with_bytes";
        _os_log_impl(&dword_1830D4000, v27, v30, "%{public}s txt_record cannot have length 0", buf, 0xCu);
      }
      goto LABEL_93;
    }
    if (!v45)
    {
      os_log_type_t v27 = __nwlog_obj();
      os_log_type_t v43 = type;
      if (os_log_type_enabled(v27, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint64_t v48 = "nw_txt_record_create_with_bytes";
        _os_log_impl(&dword_1830D4000, v27, v43, "%{public}s txt_record cannot have length 0, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_93;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v27 = __nwlog_obj();
    os_log_type_t v38 = type;
    BOOL v39 = os_log_type_enabled(v27, type);
    if (!backtrace_string)
    {
      if (v39)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint64_t v48 = "nw_txt_record_create_with_bytes";
        _os_log_impl(&dword_1830D4000, v27, v38, "%{public}s txt_record cannot have length 0, no backtrace", buf, 0xCu);
      }
      goto LABEL_93;
    }
    if (v39)
    {
      *(_DWORD *)tcp_info buf = 136446466;
      uint64_t v48 = "nw_txt_record_create_with_bytes";
      __int16 v49 = 2082;
      size_t v50 = (size_t)backtrace_string;
      _os_log_impl(&dword_1830D4000, v27, v38, "%{public}s txt_record cannot have length 0, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_75;
  }
  if (txt_len >= 0x10000)
  {
    unsigned int v31 = __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    uint64_t v48 = "nw_txt_record_create_with_bytes";
    char v26 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v45 = 0;
    if (__nwlog_fault(v26, &type, &v45))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v27 = __nwlog_obj();
        os_log_type_t v32 = type;
        if (os_log_type_enabled(v27, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          uint64_t v48 = "nw_txt_record_create_with_bytes";
          _os_log_impl(&dword_1830D4000, v27, v32, "%{public}s txt_record cannot have length > 65535", buf, 0xCu);
        }
LABEL_93:

        goto LABEL_94;
      }
      if (!v45)
      {
        os_log_type_t v27 = __nwlog_obj();
        os_log_type_t v44 = type;
        if (os_log_type_enabled(v27, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          uint64_t v48 = "nw_txt_record_create_with_bytes";
          _os_log_impl(&dword_1830D4000, v27, v44, "%{public}s txt_record cannot have length > 65535, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_93;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v27 = __nwlog_obj();
      os_log_type_t v40 = type;
      BOOL v41 = os_log_type_enabled(v27, type);
      if (!backtrace_string)
      {
        if (v41)
        {
          *(_DWORD *)tcp_info buf = 136446210;
          uint64_t v48 = "nw_txt_record_create_with_bytes";
          _os_log_impl(&dword_1830D4000, v27, v40, "%{public}s txt_record cannot have length > 65535, no backtrace", buf, 0xCu);
        }
        goto LABEL_93;
      }
      if (v41)
      {
        *(_DWORD *)tcp_info buf = 136446466;
        uint64_t v48 = "nw_txt_record_create_with_bytes";
        __int16 v49 = 2082;
        size_t v50 = (size_t)backtrace_string;
        _os_log_impl(&dword_1830D4000, v27, v40, "%{public}s txt_record cannot have length > 65535, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_75;
    }
LABEL_94:
    if (v26) {
      free(v26);
    }
    return 0;
  }
  unint64_t v3 = txt_bytes;
  uint64_t v4 = objc_alloc_init(NWConcrete_nw_txt_record);
  if (!v4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v7 = (id)gLogObj;
    *(_DWORD *)tcp_info buf = 136446210;
    uint64_t v48 = "nw_txt_record_create_with_bytes";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v45 = 0;
    if (__nwlog_fault(v8, &type, &v45))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v9 = (id)gLogObj;
        os_log_type_t v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          uint64_t v48 = "nw_txt_record_create_with_bytes";
          _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s [nw_txt_record init] failed", buf, 0xCu);
        }
      }
      else if (v45)
      {
        id v13 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v9 = (id)gLogObj;
        os_log_type_t v14 = type;
        BOOL v15 = os_log_type_enabled(v9, type);
        if (v13)
        {
          if (v15)
          {
            *(_DWORD *)tcp_info buf = 136446466;
            uint64_t v48 = "nw_txt_record_create_with_bytes";
            __int16 v49 = 2082;
            size_t v50 = (size_t)v13;
            _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s [nw_txt_record init] failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v13);
          if (!v8) {
            goto LABEL_42;
          }
          goto LABEL_41;
        }
        if (v15)
        {
          *(_DWORD *)tcp_info buf = 136446210;
          uint64_t v48 = "nw_txt_record_create_with_bytes";
          _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s [nw_txt_record init] failed, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v9 = (id)gLogObj;
        os_log_type_t v23 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          uint64_t v48 = "nw_txt_record_create_with_bytes";
          _os_log_impl(&dword_1830D4000, v9, v23, "%{public}s [nw_txt_record init] failed, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
    if (!v8)
    {
LABEL_42:

      return (nw_txt_record_t)v4;
    }
LABEL_41:
    free(v8);
    goto LABEL_42;
  }
  id v5 = malloc_type_malloc(txt_len, 0xF2B69DE5uLL);
  if (v5)
  {
LABEL_6:
    *((void *)v4 + 1) = v5;
    memcpy(v5, v3, txt_len);
    if (txt_len - 8901 >= 0xFFFFFFFFFFFFDD3CLL)
    {
      size_t v11 = *v3;
      if (txt_len == 1 && !*v3 || v11 + 1 == txt_len)
      {
        BOOL v6 = 1;
      }
      else
      {
        uint32_t v16 = &v3[txt_len];
        unint64_t v17 = (unint64_t)&v3[v11 + 1];
        do
        {
          BOOL v6 = v17 <= (unint64_t)v16;
          if (v17 > (unint64_t)v16) {
            break;
          }
          os_log_type_t v18 = v3;
          unint64_t v3 = (const uint8_t *)v17;
          os_log_type_t v19 = v18 + 1;
          os_log_type_t v20 = (const uint8_t *)memchr((void *)(v18 + 1), 61, v11);
          os_log_type_t v21 = &v18[v11];
          if (v20) {
            os_log_type_t v21 = v20;
          }
          if (v19 < v21)
          {
            BOOL v22 = &v21[~(unint64_t)v18];
            while (*v19 - 127 > 0xFFFFFFA0)
            {
              ++v19;
              if (!--v22) {
                goto LABEL_25;
              }
            }
            goto LABEL_7;
          }
LABEL_25:
          size_t v11 = *v3;
          unint64_t v17 = (unint64_t)&v3[v11 + 1];
          BOOL v6 = 1;
        }
        while ((const uint8_t *)v17 != v16);
      }
    }
    else
    {
LABEL_7:
      BOOL v6 = 0;
    }
    *((unsigned char *)v4 + 36) = *((unsigned char *)v4 + 36) & 0xFE | v6;
    *((void *)v4 + 2) = txt_len;
    *((void *)v4 + 3) = txt_len;
    BOOL v12 = v4;
    goto LABEL_42;
  }
  char v33 = __nwlog_obj();
  os_log_type_enabled(v33, OS_LOG_TYPE_ERROR);
  *(_DWORD *)tcp_info buf = 136446466;
  uint64_t v48 = "strict_malloc";
  __int16 v49 = 2048;
  size_t v50 = txt_len;
  uint64_t v34 = (void *)_os_log_send_and_compose_impl();

  nw_txt_record_t result = (nw_txt_record_t)__nwlog_abort((uint64_t)v34);
  if (!result)
  {
    free(v34);
    goto LABEL_6;
  }
  __break(1u);
  return result;
}

void sub_18332D4D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_context_purge_all_endpoints(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    v11[0] = MEMORY[0x1E4F143A8];
    v11[1] = 3221225472;
    v11[2] = __nw_context_purge_all_endpoints_block_invoke;
    v11[3] = &unk_1E524BAA8;
    id v12 = v1;
    nw_queue_context_async_if_needed(v12, v11);

    goto LABEL_3;
  }
  unint64_t v3 = __nwlog_obj();
  *(_DWORD *)tcp_info buf = 136446210;
  uint32_t v16 = "nw_context_purge_all_endpoints";
  uint64_t v4 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v4, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint32_t v16 = "nw_context_purge_all_endpoints";
        _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s called with null context", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v5 = __nwlog_obj();
      os_log_type_t v8 = type;
      BOOL v9 = os_log_type_enabled(v5, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          uint32_t v16 = "nw_context_purge_all_endpoints";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v5, v8, "%{public}s called with null context, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v9)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint32_t v16 = "nw_context_purge_all_endpoints";
        _os_log_impl(&dword_1830D4000, v5, v8, "%{public}s called with null context, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v5 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        uint32_t v16 = "nw_context_purge_all_endpoints";
        _os_log_impl(&dword_1830D4000, v5, v10, "%{public}s called with null context, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v4) {
    free(v4);
  }
LABEL_3:
}

void sub_18332D7D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

void __nw_context_reset_timer_block_with_time_block_invoke(uint64_t a1)
{
  id v18 = *(id *)(a1 + 32);
  nw_context_assert_queue(v18);
  id v1 = v18;
  uint64_t v2 = (uint64_t *)*((void *)v18 + 4);
  v2[4] = -1;
  uint64_t v3 = *v2;
  if (*v2)
  {
    if (v2[1])
    {
      do
      {
        dispatch_time_t v8 = dispatch_time(0x8000000000000000, 0);
        BOOL v9 = (uint64_t *)*((void *)v18 + 4);
        uint64_t v10 = v9[1];
        dispatch_time_t v11 = *(void *)(v10 + 16);
        if (v11 > v8)
        {
          nw_queue_set_timer_values(*v9, v11, 0xFFFFFFFFFFFFFFFFLL, 0);
          id v1 = v18;
          *(void *)(*((void *)v18 + 4) + 32) = *(void *)(v10 + 16);
          goto LABEL_18;
        }
        id v12 = (void (**)(void))_Block_copy(*(const void **)(v10 + 32));
        char v13 = *(void **)(v10 + 32);
        *(void *)(v10 + 32) = 0;

        char v14 = *(unsigned char *)(v10 + 40) | 1;
        *(unsigned char *)(v10 + 40) = v14;
        if (v12)
        {
          v12[2](v12);
          char v14 = *(unsigned char *)(v10 + 40);
        }
        *(unsigned char *)(v10 + 40) = v14 & 0xFE;
        if (!*(void *)(v10 + 32))
        {
          id v15 = v18;
          if ((*(unsigned char *)(v10 + 40) & 1) == 0)
          {
            uint64_t v16 = *(void *)v10;
            __int16 v17 = *(void **)(v10 + 8);
            if (*(void *)v10)
            {
              *(void *)(v16 + 8) = v17;
              __int16 v17 = *(void **)(v10 + 8);
              uint64_t v4 = v18;
            }
            else
            {
              uint64_t v4 = v18;
              *(void *)(*((void *)v18 + 4) + 16) = v17;
            }
            *__int16 v17 = v16;
            *(void *)uint64_t v10 = 0;
            *(void *)(v10 + 8) = 0;
            BOOL node = nw_hash_table_get_node(*(void *)(v4[4] + 24), *(void *)(v10 + 24), 0);
            nw_hash_table_remove_node(*(void *)(*((void *)v18 + 4) + 24), node);
            os_log_type_t v6 = *(void **)(v10 + 32);
            *(void *)(v10 + 32) = 0;

            free((void *)v10);
          }
        }
        id v7 = (uint64_t *)*((void *)v18 + 4);
      }
      while (v7[1]);
      uint64_t v3 = *v7;
    }
    nw_queue_set_timer_values(v3, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
    nw_context_cleanup_timer((NWConcrete_nw_context *)v18);
    id v1 = v18;
  }
LABEL_18:
}

void sub_18332D9AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void __nw_protocol_instance_schedule_wakeup_block_invoke(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    uint64_t v1 = WeakRetained[33];
    if (v1)
    {
      if ((*((unsigned char *)WeakRetained + 404) & 0x10) != 0) {
        (*(void (**)(uint64_t, void *))(v1 + 16))(v1, WeakRetained);
      }
    }
  }
}

void sub_18332DA40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL46nw_browser_app_svc_update_browse_result_lockedP21NWConcrete_nw_browserPU22objcproto11OS_nw_array8NSObject_block_invoke_2_120(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7 = a3;
  id v8 = a4;
  BOOL v9 = v7;
  id v10 = v8;
  dispatch_time_t v11 = v10;
  if (v9) {
    v9[52] |= 1u;
  }
  if (v10) {
    *((unsigned char *)v10 + 52) |= 1u;
  }
  id v12 = *(void **)(*(void *)(a1 + 32) + 40);
  v17[0] = MEMORY[0x1E4F143A8];
  v17[1] = 3221225472;
  v17[2] = ___ZL46nw_browser_app_svc_update_browse_result_lockedP21NWConcrete_nw_browserPU22objcproto11OS_nw_array8NSObject_block_invoke_3;
  v17[3] = &unk_1E5244700;
  id v20 = *(id *)(a1 + 40);
  char v13 = v9;
  id v18 = v13;
  id v14 = v11;
  id v19 = v14;
  uint64_t v15 = *(void *)(a1 + 48);
  uint64_t v21 = a2;
  uint64_t v22 = v15;
  nw_utilities_execute_block_as_persona_from_parameters(v12, v17);

  return 1;
}

void sub_18332DB84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

id *nw_interpose_client_claim(const unsigned __int8 *a1, void *a2)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  id v4 = a2;
  nw_allow_use_of_dispatch_internal();
  if (uuid_is_null(a1))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v5 = (id)gLogObj;
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
LABEL_5:

      id v7 = 0;
      goto LABEL_18;
    }
    *(_DWORD *)tcp_info buf = 136446466;
    unsigned int v31 = "nw_interpose_client_claim";
    __int16 v32 = 2114;
    char v33 = 0;
    os_log_type_t v6 = "%{public}s [%{public}@] no client UUID";
LABEL_4:
    _os_log_impl(&dword_1830D4000, v5, OS_LOG_TYPE_ERROR, v6, buf, 0x16u);
    goto LABEL_5;
  }
  id v8 = [NWConcrete_nw_interpose alloc];
  id v9 = v4;
  if (!v8)
  {
LABEL_22:

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v5 = (id)gLogObj;
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      goto LABEL_5;
    }
    *(_DWORD *)tcp_info buf = 136446466;
    unsigned int v31 = "nw_interpose_client_claim";
    __int16 v32 = 2114;
    char v33 = 0;
    os_log_type_t v6 = "%{public}s [%{public}@] failed to allocate interpose";
    goto LABEL_4;
  }
  v29.os_log_type_t receiver = v8;
  v29.super_class = (Class)NWConcrete_nw_interpose;
  id v10 = (char *)objc_msgSendSuper2(&v29, sel_init);
  id v7 = (id *)v10;
  if (!v10)
  {
    id v19 = __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    unsigned int v31 = "-[NWConcrete_nw_interpose initWithClientUUID:nw_context:]";
    id v20 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v27 = 0;
    if (__nwlog_fault(v20, &type, &v27))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v21 = __nwlog_obj();
        os_log_type_t v22 = type;
        if (os_log_type_enabled(v21, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          unsigned int v31 = "-[NWConcrete_nw_interpose initWithClientUUID:nw_context:]";
          _os_log_impl(&dword_1830D4000, v21, v22, "%{public}s [super init] failed", buf, 0xCu);
        }
      }
      else if (v27)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        uint64_t v21 = __nwlog_obj();
        os_log_type_t v24 = type;
        BOOL v25 = os_log_type_enabled(v21, type);
        if (backtrace_string)
        {
          if (v25)
          {
            *(_DWORD *)tcp_info buf = 136446466;
            unsigned int v31 = "-[NWConcrete_nw_interpose initWithClientUUID:nw_context:]";
            __int16 v32 = 2082;
            char v33 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v21, v24, "%{public}s [super init] failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_40;
        }
        if (v25)
        {
          *(_DWORD *)tcp_info buf = 136446210;
          unsigned int v31 = "-[NWConcrete_nw_interpose initWithClientUUID:nw_context:]";
          _os_log_impl(&dword_1830D4000, v21, v24, "%{public}s [super init] failed, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        uint64_t v21 = __nwlog_obj();
        os_log_type_t v26 = type;
        if (os_log_type_enabled(v21, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          unsigned int v31 = "-[NWConcrete_nw_interpose initWithClientUUID:nw_context:]";
          _os_log_impl(&dword_1830D4000, v21, v26, "%{public}s [super init] failed, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_40:
    if (v20) {
      free(v20);
    }
    goto LABEL_22;
  }
  *(_OWORD *)(v10 + 12) = *(_OWORD *)a1;
  dispatch_time_t v11 = (void **)(v10 + 64);
  objc_storeStrong((id *)v10 + 8, a2);
  if (!*v11)
  {
    if (nw_context_copy_implicit_context::onceToken != -1) {
      dispatch_once(&nw_context_copy_implicit_context::onceToken, &__block_literal_global_18);
    }
    objc_storeStrong(v7 + 8, (id)nw_context_copy_implicit_context::implicit_context);
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v12 = (id)gLogObj;
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)tcp_info buf = 136446978;
    unsigned int v31 = "-[NWConcrete_nw_interpose initWithClientUUID:nw_context:]";
    __int16 v32 = 2114;
    char v33 = (char *)v7;
    __int16 v34 = 1042;
    int v35 = 16;
    __int16 v36 = 2098;
    BOOL v37 = a1;
    _os_log_impl(&dword_1830D4000, v12, OS_LOG_TYPE_DEBUG, "%{public}s [%{public}@] claiming evaluator with client UUID %{public,uuid_t}.16P", buf, 0x26u);
  }

  evaluator_for_client_id = nw_path_create_evaluator_for_client_id(a1, *v11);
  id v14 = v7[5];
  v7[5] = evaluator_for_client_id;

  id v15 = v7[5];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  uint64_t v16 = (id)gLogObj;
  __int16 v17 = v16;
  if (!v15)
  {
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)tcp_info buf = 136446978;
      unsigned int v31 = "-[NWConcrete_nw_interpose initWithClientUUID:nw_context:]";
      __int16 v32 = 2114;
      char v33 = (char *)v7;
      __int16 v34 = 1042;
      int v35 = 16;
      __int16 v36 = 2098;
      BOOL v37 = a1;
      _os_log_impl(&dword_1830D4000, v17, OS_LOG_TYPE_ERROR, "%{public}s [%{public}@] failed to claim evaluator with client UUID %{public,uuid_t}.16P", buf, 0x26u);
    }

    goto LABEL_22;
  }
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)tcp_info buf = 136446978;
    unsigned int v31 = "-[NWConcrete_nw_interpose initWithClientUUID:nw_context:]";
    __int16 v32 = 2114;
    char v33 = (char *)v7;
    __int16 v34 = 1042;
    int v35 = 16;
    __int16 v36 = 2098;
    BOOL v37 = a1;
    _os_log_impl(&dword_1830D4000, v17, OS_LOG_TYPE_DEBUG, "%{public}s [%{public}@] claimed evaluator with client UUID %{public,uuid_t}.16P", buf, 0x26u);
  }

LABEL_18:
  return v7;
}

void sub_18332E1E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_protocol_instance_add_outbound(void *a1, void *a2, void *a3, uint64_t a4, int a5, int a6)
{
  uint64_t v108 = *MEMORY[0x1E4F143B8];
  dispatch_time_t v11 = a1;
  id v12 = a2;
  char v13 = a3;
  if (!v11)
  {
    BOOL v39 = __nwlog_obj();
    *(_DWORD *)os_log_type_t v105 = 136446210;
    *(void *)&v105[4] = "nw_protocol_instance_add_outbound";
    os_log_type_t v40 = (char *)_os_log_send_and_compose_impl();

    buf[0] = 16;
    type[0] = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v40, buf, type)) {
      goto LABEL_190;
    }
    if (buf[0] == 17)
    {
      BOOL v41 = __nwlog_obj();
      os_log_type_t v42 = buf[0];
      if (os_log_type_enabled(v41, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)os_log_type_t v105 = 136446210;
        *(void *)&v105[4] = "nw_protocol_instance_add_outbound";
        _os_log_impl(&dword_1830D4000, v41, v42, "%{public}s called with null instance", v105, 0xCu);
      }
    }
    else if (type[0])
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v41 = __nwlog_obj();
      os_log_type_t v46 = buf[0];
      BOOL v47 = os_log_type_enabled(v41, (os_log_type_t)buf[0]);
      if (backtrace_string)
      {
        if (v47)
        {
          *(_DWORD *)os_log_type_t v105 = 136446466;
          *(void *)&v105[4] = "nw_protocol_instance_add_outbound";
          *(_WORD *)&v105[12] = 2082;
          *(void *)&v105[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v41, v46, "%{public}s called with null instance, dumping backtrace:%{public}s", v105, 0x16u);
        }

        free(backtrace_string);
LABEL_190:
        if (!v40) {
          goto LABEL_58;
        }
LABEL_191:
        free(v40);
        goto LABEL_58;
      }
      if (v47)
      {
        *(_DWORD *)os_log_type_t v105 = 136446210;
        *(void *)&v105[4] = "nw_protocol_instance_add_outbound";
        _os_log_impl(&dword_1830D4000, v41, v46, "%{public}s called with null instance, no backtrace", v105, 0xCu);
      }
    }
    else
    {
      BOOL v41 = __nwlog_obj();
      os_log_type_t v51 = buf[0];
      if (os_log_type_enabled(v41, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)os_log_type_t v105 = 136446210;
        *(void *)&v105[4] = "nw_protocol_instance_add_outbound";
        _os_log_impl(&dword_1830D4000, v41, v51, "%{public}s called with null instance, backtrace limit exceeded", v105, 0xCu);
      }
    }
LABEL_189:

    goto LABEL_190;
  }
  if (!v12)
  {
    os_log_type_t v43 = __nwlog_obj();
    *(_DWORD *)os_log_type_t v105 = 136446210;
    *(void *)&v105[4] = "nw_protocol_instance_add_outbound";
    os_log_type_t v40 = (char *)_os_log_send_and_compose_impl();

    buf[0] = 16;
    type[0] = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v40, buf, type)) {
      goto LABEL_190;
    }
    if (buf[0] == 17)
    {
      BOOL v41 = __nwlog_obj();
      os_log_type_t v44 = buf[0];
      if (os_log_type_enabled(v41, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)os_log_type_t v105 = 136446210;
        *(void *)&v105[4] = "nw_protocol_instance_add_outbound";
        _os_log_impl(&dword_1830D4000, v41, v44, "%{public}s called with null data", v105, 0xCu);
      }
      goto LABEL_189;
    }
    if (type[0] == OS_LOG_TYPE_DEFAULT)
    {
      BOOL v41 = __nwlog_obj();
      os_log_type_t v52 = buf[0];
      if (os_log_type_enabled(v41, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)os_log_type_t v105 = 136446210;
        *(void *)&v105[4] = "nw_protocol_instance_add_outbound";
        _os_log_impl(&dword_1830D4000, v41, v52, "%{public}s called with null data, backtrace limit exceeded", v105, 0xCu);
      }
      goto LABEL_189;
    }
    uint64_t v48 = (char *)__nw_create_backtrace_string();
    BOOL v41 = __nwlog_obj();
    os_log_type_t v49 = buf[0];
    BOOL v50 = os_log_type_enabled(v41, (os_log_type_t)buf[0]);
    if (!v48)
    {
      if (v50)
      {
        *(_DWORD *)os_log_type_t v105 = 136446210;
        *(void *)&v105[4] = "nw_protocol_instance_add_outbound";
        _os_log_impl(&dword_1830D4000, v41, v49, "%{public}s called with null data, no backtrace", v105, 0xCu);
      }
      goto LABEL_189;
    }
    if (v50)
    {
      *(_DWORD *)os_log_type_t v105 = 136446466;
      *(void *)&v105[4] = "nw_protocol_instance_add_outbound";
      *(_WORD *)&v105[12] = 2082;
      *(void *)&v105[14] = v48;
      _os_log_impl(&dword_1830D4000, v41, v49, "%{public}s called with null data, dumping backtrace:%{public}s", v105, 0x16u);
    }
    goto LABEL_78;
  }
  id v14 = v11[15];
  if (v14)
  {
    id v15 = v14;
    uint64_t v16 = v15;
    if (((_BYTE)v15[17] & 8) == 0) {
      dispatch_assert_queue_V2(v15[1]);
    }
  }
  if (*((char ***)v12 + 11) == v11)
  {
    nw_frame_finalize((uint64_t)v12);
    goto LABEL_58;
  }
  if (v13) {
    nw_frame_set_metadata((uint64_t)v12, v13, 1, a5);
  }
  if (a4) {
    *((void *)v12 + 20) = a4;
  }
  if (!v11[37])
  {
    *((void *)v12 + 4) = 0;
    os_log_type_t v24 = v11[27];
    *((void *)v12 + 5) = v24;
    *(void *)os_log_type_t v24 = v12;
    v11[27] = v12 + 32;
    if ((*((unsigned char *)v11 + 403) & 0x20) != 0 || !a6 || !v11[26]) {
      goto LABEL_58;
    }
    if ((*((char *)v11 + 405) & 0x80000000) == 0 && gLogDatapath)
    {
      uint64_t v74 = __nwlog_obj();
      if (os_log_type_enabled(v74, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)os_log_type_t v105 = 136446722;
        *(void *)&v105[4] = "nw_protocol_instance_add_outbound";
        *(_WORD *)&v105[12] = 2082;
        *(void *)&v105[14] = (char *)v11 + 407;
        *(_WORD *)&v105[22] = 2080;
        socklen_t v106 = " ";
        _os_log_impl(&dword_1830D4000, v74, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sFinalizing outbound frames (one-off)", v105, 0x20u);
      }
    }
    BOOL v25 = *(v11 - 8);
    if (!v25)
    {
      uint64_t v72 = __nwlog_obj();
      *(_DWORD *)os_log_type_t v105 = 136446210;
      *(void *)&v105[4] = "__nw_protocol_finalize_output_frames";
      os_log_type_t v40 = (char *)_os_log_send_and_compose_impl();

      buf[0] = 16;
      type[0] = OS_LOG_TYPE_DEFAULT;
      if (!__nwlog_fault(v40, buf, type)) {
        goto LABEL_190;
      }
      if (buf[0] == 17)
      {
        BOOL v41 = __nwlog_obj();
        os_log_type_t v73 = buf[0];
        if (os_log_type_enabled(v41, (os_log_type_t)buf[0]))
        {
          *(_DWORD *)os_log_type_t v105 = 136446210;
          *(void *)&v105[4] = "__nw_protocol_finalize_output_frames";
          _os_log_impl(&dword_1830D4000, v41, v73, "%{public}s called with null protocol", v105, 0xCu);
        }
        goto LABEL_189;
      }
      if (type[0] == OS_LOG_TYPE_DEFAULT)
      {
        BOOL v41 = __nwlog_obj();
        os_log_type_t v90 = buf[0];
        if (os_log_type_enabled(v41, (os_log_type_t)buf[0]))
        {
          *(_DWORD *)os_log_type_t v105 = 136446210;
          *(void *)&v105[4] = "__nw_protocol_finalize_output_frames";
          _os_log_impl(&dword_1830D4000, v41, v90, "%{public}s called with null protocol, backtrace limit exceeded", v105, 0xCu);
        }
        goto LABEL_189;
      }
      uint64_t v48 = (char *)__nw_create_backtrace_string();
      BOOL v41 = __nwlog_obj();
      os_log_type_t v81 = buf[0];
      BOOL v82 = os_log_type_enabled(v41, (os_log_type_t)buf[0]);
      if (!v48)
      {
        if (v82)
        {
          *(_DWORD *)os_log_type_t v105 = 136446210;
          *(void *)&v105[4] = "__nw_protocol_finalize_output_frames";
          _os_log_impl(&dword_1830D4000, v41, v81, "%{public}s called with null protocol, no backtrace", v105, 0xCu);
        }
        goto LABEL_189;
      }
      if (v82)
      {
        *(_DWORD *)os_log_type_t v105 = 136446466;
        *(void *)&v105[4] = "__nw_protocol_finalize_output_frames";
        *(_WORD *)&v105[12] = 2082;
        *(void *)&v105[14] = v48;
        _os_log_impl(&dword_1830D4000, v41, v81, "%{public}s called with null protocol, dumping backtrace:%{public}s", v105, 0x16u);
      }
      goto LABEL_78;
    }
    os_log_type_t v26 = (void *)*((void *)v25 + 5);
    if (v26 == &nw_protocol_ref_counted_handle)
    {
      uint64_t v36 = *((void *)v25 + 11);
      if (v36) {
        *((void *)v25 + 11) = v36 + 1;
      }
      char v27 = -1;
    }
    else
    {
      char v27 = 0;
    }
    *(void *)tcp_info buf = v25;
    sockaddr buf[8] = v27;
    uint64_t v37 = *((void *)v25 + 3);
    if (v37)
    {
      uint64_t v38 = *(void (**)(const char *, char **))(v37 + 96);
      if (v38)
      {
        v38(v25, v11 + 26);
        if (v26 != &nw_protocol_ref_counted_handle) {
          goto LABEL_58;
        }
        goto LABEL_57;
      }
    }
    BOOL v92 = v26;
    int v59 = __nwlog_obj();
    int v60 = (const char *)*((void *)v25 + 2);
    *(_DWORD *)os_log_type_t v105 = 136446722;
    *(void *)&v105[4] = "__nw_protocol_finalize_output_frames";
    if (!v60) {
      int v60 = "invalid";
    }
    *(_WORD *)&v105[12] = 2082;
    *(void *)&v105[14] = v60;
    *(_WORD *)&v105[22] = 2048;
    socklen_t v106 = v25;
    unint64_t v61 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    char v93 = 0;
    if (!__nwlog_fault(v61, type, &v93)) {
      goto LABEL_174;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      int v62 = __nwlog_obj();
      os_log_type_t v63 = type[0];
      if (os_log_type_enabled(v62, type[0]))
      {
        char v64 = (const char *)*((void *)v25 + 2);
        if (!v64) {
          char v64 = "invalid";
        }
        *(_DWORD *)os_log_type_t v105 = 136446722;
        *(void *)&v105[4] = "__nw_protocol_finalize_output_frames";
        *(_WORD *)&v105[12] = 2082;
        *(void *)&v105[14] = v64;
        *(_WORD *)&v105[22] = 2048;
        socklen_t v106 = v25;
        _os_log_impl(&dword_1830D4000, v62, v63, "%{public}s protocol %{public}s (%p) has invalid finalize_output_frames callback", v105, 0x20u);
      }
    }
    else if (v93)
    {
      uint64_t v75 = (char *)__nw_create_backtrace_string();
      int v62 = __nwlog_obj();
      os_log_type_t v76 = type[0];
      BOOL v77 = os_log_type_enabled(v62, type[0]);
      if (v75)
      {
        if (v77)
        {
          int v78 = (const char *)*((void *)v25 + 2);
          if (!v78) {
            int v78 = "invalid";
          }
          *(_DWORD *)os_log_type_t v105 = 136446978;
          *(void *)&v105[4] = "__nw_protocol_finalize_output_frames";
          *(_WORD *)&v105[12] = 2082;
          *(void *)&v105[14] = v78;
          *(_WORD *)&v105[22] = 2048;
          socklen_t v106 = v25;
          LOWORD(v107) = 2082;
          *(void *)((char *)&v107 + 2) = v75;
          _os_log_impl(&dword_1830D4000, v62, v76, "%{public}s protocol %{public}s (%p) has invalid finalize_output_frames callback, dumping backtrace:%{public}s", v105, 0x2Au);
        }

        free(v75);
LABEL_174:
        if (v61) {
          free(v61);
        }
        if (v92 == &nw_protocol_ref_counted_handle) {
          goto LABEL_57;
        }
        goto LABEL_58;
      }
      if (v77)
      {
        id v88 = (const char *)*((void *)v25 + 2);
        if (!v88) {
          id v88 = "invalid";
        }
        *(_DWORD *)os_log_type_t v105 = 136446722;
        *(void *)&v105[4] = "__nw_protocol_finalize_output_frames";
        *(_WORD *)&v105[12] = 2082;
        *(void *)&v105[14] = v88;
        *(_WORD *)&v105[22] = 2048;
        socklen_t v106 = v25;
        _os_log_impl(&dword_1830D4000, v62, v76, "%{public}s protocol %{public}s (%p) has invalid finalize_output_frames callback, no backtrace", v105, 0x20u);
      }
    }
    else
    {
      int v62 = __nwlog_obj();
      os_log_type_t v85 = type[0];
      if (os_log_type_enabled(v62, type[0]))
      {
        uint64_t v86 = (const char *)*((void *)v25 + 2);
        if (!v86) {
          uint64_t v86 = "invalid";
        }
        *(_DWORD *)os_log_type_t v105 = 136446722;
        *(void *)&v105[4] = "__nw_protocol_finalize_output_frames";
        *(_WORD *)&v105[12] = 2082;
        *(void *)&v105[14] = v86;
        *(_WORD *)&v105[22] = 2048;
        socklen_t v106 = v25;
        _os_log_impl(&dword_1830D4000, v62, v85, "%{public}s protocol %{public}s (%p) has invalid finalize_output_frames callback, backtrace limit exceeded", v105, 0x20u);
      }
    }

    goto LABEL_174;
  }
  __int16 v17 = v11;
  id v18 = v12;
  *(void *)os_log_type_t type = 0;
  uint64_t v95 = type;
  uint64_t v96 = 0x2020000000;
  uint64_t v97 = 0;
  uint64_t v19 = *((void *)v12 + 11);
  id v20 = v11[37];
  if (!v19)
  {
    uint64_t node = nw_hash_table_get_node((uint64_t)v20, *((void *)v17 + 38), 8);
    *((void *)v95 + 3) = node;
    if (node) {
      goto LABEL_15;
    }
LABEL_26:
    if ((v17[405] & 0x80000000) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v28 = (id)gLogObj;
      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)tcp_info buf = 136446978;
        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_lookup_path_by_frame";
        __int16 v99 = 2082;
        os_log_type_t v100 = v17 + 407;
        __int16 v101 = 2080;
        __int16 v102 = " ";
        __int16 v103 = 2048;
        uint64_t v104 = v19;
        _os_log_impl(&dword_1830D4000, v28, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sNo path found for context %p", buf, 0x2Au);
      }
    }
    uint64_t v22 = 0;
    uint64_t extra = 0;
    goto LABEL_31;
  }
  *(void *)os_log_type_t v105 = MEMORY[0x1E4F143A8];
  *(void *)&v105[8] = 3221225472;
  *(void *)&v105[16] = ___ZL47nw_protocol_implementation_lookup_path_by_frameP31NWConcrete_nw_protocol_instancePU22objcproto11OS_nw_frame8NSObjectPm_block_invoke;
  socklen_t v106 = (const char *)&unk_1E523CC48;
  *(void *)&long long v107 = type;
  *((void *)&v107 + 1) = v19;
  nw_hash_table_apply(v20, (uint64_t)v105);
  uint64_t node = *((void *)v95 + 3);
  if (!node) {
    goto LABEL_26;
  }
LABEL_15:
  uint64_t v22 = *(void *)(node + 16);
  uint64_t extra = (void *)nw_hash_node_get_extra(node);
LABEL_31:
  _Block_object_dispose(type, 8);

  if (extra)
  {
    *((void *)v18 + 4) = 0;
    objc_super v29 = (char **)extra[14];
    *((void *)v18 + 5) = v29;
    *objc_super v29 = v18;
    extra[14] = v18 + 32;
    if ((v17[403] & 0x20) != 0 || !a6 || !extra[13]) {
      goto LABEL_58;
    }
    if ((v17[405] & 0x80000000) == 0 && gLogDatapath)
    {
      int v67 = __nwlog_obj();
      if (os_log_type_enabled(v67, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)os_log_type_t v105 = 136446978;
        *(void *)&v105[4] = "nw_protocol_instance_add_outbound";
        *(_WORD *)&v105[12] = 2082;
        *(void *)&v105[14] = v17 + 407;
        *(_WORD *)&v105[22] = 2080;
        socklen_t v106 = " ";
        LOWORD(v107) = 2048;
        *(void *)((char *)&v107 + 2) = v22;
        _os_log_impl(&dword_1830D4000, v67, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sFinalizing outbound frames for %lx (one-off)", v105, 0x2Au);
      }
    }
    uint64_t v30 = extra[4];
    if (v30)
    {
      if (*(_UNKNOWN **)(v30 + 40) == &nw_protocol_ref_counted_handle)
      {
        uint64_t v33 = *(void *)(v30 + 88);
        if (v33) {
          *(void *)(v30 + 88) = v33 + 1;
        }
        char v31 = -1;
      }
      else
      {
        char v31 = 0;
      }
      *(void *)tcp_info buf = v30;
      sockaddr buf[8] = v31;
      uint64_t v34 = *(void *)(v30 + 24);
      if (v34)
      {
        int v35 = *(void (**)(uint64_t, void *))(v34 + 96);
        if (v35)
        {
          v35(v30, extra + 13);
          if ((buf[8] & 1) == 0) {
            goto LABEL_58;
          }
          goto LABEL_57;
        }
      }
      char v91 = v31;
      int v53 = __nwlog_obj();
      int v54 = *(const char **)(v30 + 16);
      *(_DWORD *)os_log_type_t v105 = 136446722;
      *(void *)&v105[4] = "__nw_protocol_finalize_output_frames";
      if (!v54) {
        int v54 = "invalid";
      }
      *(_WORD *)&v105[12] = 2082;
      *(void *)&v105[14] = v54;
      *(_WORD *)&v105[22] = 2048;
      socklen_t v106 = (const char *)v30;
      int v55 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      char v93 = 0;
      if (__nwlog_fault(v55, type, &v93))
      {
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          int v56 = __nwlog_obj();
          os_log_type_t v57 = type[0];
          if (os_log_type_enabled(v56, type[0]))
          {
            uint64_t v58 = *(const char **)(v30 + 16);
            if (!v58) {
              uint64_t v58 = "invalid";
            }
            *(_DWORD *)os_log_type_t v105 = 136446722;
            *(void *)&v105[4] = "__nw_protocol_finalize_output_frames";
            *(_WORD *)&v105[12] = 2082;
            *(void *)&v105[14] = v58;
            *(_WORD *)&v105[22] = 2048;
            socklen_t v106 = (const char *)v30;
            _os_log_impl(&dword_1830D4000, v56, v57, "%{public}s protocol %{public}s (%p) has invalid finalize_output_frames callback", v105, 0x20u);
          }
LABEL_164:

          goto LABEL_165;
        }
        if (!v93)
        {
          int v56 = __nwlog_obj();
          os_log_type_t v83 = type[0];
          if (os_log_type_enabled(v56, type[0]))
          {
            os_log_type_t v84 = *(const char **)(v30 + 16);
            if (!v84) {
              os_log_type_t v84 = "invalid";
            }
            *(_DWORD *)os_log_type_t v105 = 136446722;
            *(void *)&v105[4] = "__nw_protocol_finalize_output_frames";
            *(_WORD *)&v105[12] = 2082;
            *(void *)&v105[14] = v84;
            *(_WORD *)&v105[22] = 2048;
            socklen_t v106 = (const char *)v30;
            _os_log_impl(&dword_1830D4000, v56, v83, "%{public}s protocol %{public}s (%p) has invalid finalize_output_frames callback, backtrace limit exceeded", v105, 0x20u);
          }
          goto LABEL_164;
        }
        int v68 = (char *)__nw_create_backtrace_string();
        int v56 = __nwlog_obj();
        os_log_type_t v69 = type[0];
        BOOL v70 = os_log_type_enabled(v56, type[0]);
        if (!v68)
        {
          if (v70)
          {
            uint64_t v87 = *(const char **)(v30 + 16);
            if (!v87) {
              uint64_t v87 = "invalid";
            }
            *(_DWORD *)os_log_type_t v105 = 136446722;
            *(void *)&v105[4] = "__nw_protocol_finalize_output_frames";
            *(_WORD *)&v105[12] = 2082;
            *(void *)&v105[14] = v87;
            *(_WORD *)&v105[22] = 2048;
            socklen_t v106 = (const char *)v30;
            _os_log_impl(&dword_1830D4000, v56, v69, "%{public}s protocol %{public}s (%p) has invalid finalize_output_frames callback, no backtrace", v105, 0x20u);
          }
          goto LABEL_164;
        }
        if (v70)
        {
          char v71 = *(const char **)(v30 + 16);
          if (!v71) {
            char v71 = "invalid";
          }
          *(_DWORD *)os_log_type_t v105 = 136446978;
          *(void *)&v105[4] = "__nw_protocol_finalize_output_frames";
          *(_WORD *)&v105[12] = 2082;
          *(void *)&v105[14] = v71;
          *(_WORD *)&v105[22] = 2048;
          socklen_t v106 = (const char *)v30;
          LOWORD(v107) = 2082;
          *(void *)((char *)&v107 + 2) = v68;
          _os_log_impl(&dword_1830D4000, v56, v69, "%{public}s protocol %{public}s (%p) has invalid finalize_output_frames callback, dumping backtrace:%{public}s", v105, 0x2Au);
        }

        free(v68);
      }
LABEL_165:
      if (v55) {
        free(v55);
      }
      if ((v91 & 1) == 0) {
        goto LABEL_58;
      }
LABEL_57:
      nw::release_if_needed<nw_protocol *>((uint64_t *)buf);
      goto LABEL_58;
    }
    uint64_t v65 = __nwlog_obj();
    *(_DWORD *)os_log_type_t v105 = 136446210;
    *(void *)&v105[4] = "__nw_protocol_finalize_output_frames";
    os_log_type_t v40 = (char *)_os_log_send_and_compose_impl();

    buf[0] = 16;
    type[0] = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v40, buf, type)) {
      goto LABEL_190;
    }
    if (buf[0] == 17)
    {
      BOOL v41 = __nwlog_obj();
      os_log_type_t v66 = buf[0];
      if (os_log_type_enabled(v41, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)os_log_type_t v105 = 136446210;
        *(void *)&v105[4] = "__nw_protocol_finalize_output_frames";
        _os_log_impl(&dword_1830D4000, v41, v66, "%{public}s called with null protocol", v105, 0xCu);
      }
      goto LABEL_189;
    }
    if (type[0] == OS_LOG_TYPE_DEFAULT)
    {
      BOOL v41 = __nwlog_obj();
      os_log_type_t v89 = buf[0];
      if (os_log_type_enabled(v41, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)os_log_type_t v105 = 136446210;
        *(void *)&v105[4] = "__nw_protocol_finalize_output_frames";
        _os_log_impl(&dword_1830D4000, v41, v89, "%{public}s called with null protocol, backtrace limit exceeded", v105, 0xCu);
      }
      goto LABEL_189;
    }
    uint64_t v48 = (char *)__nw_create_backtrace_string();
    BOOL v41 = __nwlog_obj();
    os_log_type_t v79 = buf[0];
    BOOL v80 = os_log_type_enabled(v41, (os_log_type_t)buf[0]);
    if (!v48)
    {
      if (v80)
      {
        *(_DWORD *)os_log_type_t v105 = 136446210;
        *(void *)&v105[4] = "__nw_protocol_finalize_output_frames";
        _os_log_impl(&dword_1830D4000, v41, v79, "%{public}s called with null protocol, no backtrace", v105, 0xCu);
      }
      goto LABEL_189;
    }
    if (v80)
    {
      *(_DWORD *)os_log_type_t v105 = 136446466;
      *(void *)&v105[4] = "__nw_protocol_finalize_output_frames";
      *(_WORD *)&v105[12] = 2082;
      *(void *)&v105[14] = v48;
      _os_log_impl(&dword_1830D4000, v41, v79, "%{public}s called with null protocol, dumping backtrace:%{public}s", v105, 0x16u);
    }
LABEL_78:

    free(v48);
    if (!v40) {
      goto LABEL_58;
    }
    goto LABEL_191;
  }
  if ((v17[405] & 0x80000000) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    __int16 v32 = (id)gLogObj;
    if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)os_log_type_t v105 = 136446978;
      *(void *)&v105[4] = "nw_protocol_instance_add_outbound";
      *(_WORD *)&v105[12] = 2082;
      *(void *)&v105[14] = v17 + 407;
      *(_WORD *)&v105[22] = 2080;
      socklen_t v106 = " ";
      LOWORD(v107) = 2048;
      *(void *)((char *)&v107 + 2) = v18;
      _os_log_impl(&dword_1830D4000, v32, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sNo path found for frame %p", v105, 0x2Au);
    }
  }
LABEL_58:
}

uint64_t nw_protocol_udp_finalize_output_frames(nw_protocol *a1, nw_frame_array_s *a2)
{
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (a1->handle == &nw_protocol_ref_counted_handle)
    {
      *(void *)os_log_type_t v49 = 0;
      BOOL v50 = v49;
      int v52 = 0;
      uint64_t v51 = 0x2000000000;
      v43[0] = MEMORY[0x1E4F143A8];
      v43[1] = 0x40000000;
      os_log_type_t v44 = ___ZL38nw_protocol_udp_finalize_output_framesP11nw_protocolP16nw_frame_array_s_block_invoke;
      char v45 = &unk_1E523A2D8;
      BOOL v47 = a1;
      p_output_handler = &a1[1].output_handler;
      os_log_type_t v46 = v49;
      tqh_first = a2->tqh_first;
      do
      {
        if (!tqh_first) {
          break;
        }
        id v5 = (nw_frame *)*((void *)tqh_first + 4);
        char v6 = ((uint64_t (*)(void *))v44)(v43);
        tqh_first = v5;
      }
      while ((v6 & 1) != 0);
      if (_nw_signposts_once != -1) {
        dispatch_once(&_nw_signposts_once, &__block_literal_global_17);
      }
      if (_nw_signposts_enabled && kdebug_is_enabled())
      {
        kdebug_trace();
        output_handler = a1->output_handler;
        if (output_handler) {
          goto LABEL_11;
        }
      }
      else
      {
        output_handler = a1->output_handler;
        if (output_handler)
        {
LABEL_11:
          handle = output_handler->handle;
          if (handle == &nw_protocol_ref_counted_handle)
          {
            callbacks = output_handler[1].callbacks;
            if (callbacks) {
              output_handler[1].callbacks = (nw_protocol_callbacks *)((char *)&callbacks->add_input_handler + 1);
            }
          }
          id v10 = output_handler->callbacks;
          if (v10)
          {
            finalize_output_frames = (uint64_t (*)(nw_protocol *, nw_frame_array_s *))v10->finalize_output_frames;
            if (finalize_output_frames)
            {
              uint64_t v12 = finalize_output_frames(output_handler, a2);
              if (handle != &nw_protocol_ref_counted_handle)
              {
LABEL_18:
                _Block_object_dispose(v49, 8);
                return v12;
              }
LABEL_17:
              if (output_handler->handle == &nw_protocol_ref_counted_handle)
              {
                id v14 = output_handler[1].callbacks;
                if (v14)
                {
                  id v15 = (nw_protocol_callbacks *)((char *)v14 - 1);
                  output_handler[1].callbacks = v15;
                  if (!v15)
                  {
                    uint64_t v16 = *(void (***)(void))output_handler[1].flow_id;
                    if (v16)
                    {
                      *(void *)output_handler[1].flow_id = 0;
                      v16[2](v16);
                      _Block_release(v16);
                    }
                    if (output_handler[1].flow_id[8])
                    {
                      __int16 v17 = *(const void **)output_handler[1].flow_id;
                      if (v17) {
                        _Block_release(v17);
                      }
                    }
                    free(output_handler);
                  }
                }
              }
              goto LABEL_18;
            }
          }
          __nwlog_obj();
          name = output_handler->identifier->name;
          *(_DWORD *)tcp_info buf = 136446722;
          int v56 = "__nw_protocol_finalize_output_frames";
          if (!name) {
            name = "invalid";
          }
          __int16 v57 = 2082;
          uint64_t v58 = (void *)name;
          __int16 v59 = 2048;
          int v60 = output_handler;
          uint64_t v19 = (char *)_os_log_send_and_compose_impl();
          os_log_type_t type = OS_LOG_TYPE_ERROR;
          char v53 = 0;
          if (__nwlog_fault(v19, &type, &v53))
          {
            if (type == OS_LOG_TYPE_FAULT)
            {
              id v20 = __nwlog_obj();
              os_log_type_t v21 = type;
              if (!os_log_type_enabled(v20, type)) {
                goto LABEL_80;
              }
              uint64_t v22 = output_handler->identifier->name;
              if (!v22) {
                uint64_t v22 = "invalid";
              }
              *(_DWORD *)tcp_info buf = 136446722;
              int v56 = "__nw_protocol_finalize_output_frames";
              __int16 v57 = 2082;
              uint64_t v58 = (void *)v22;
              __int16 v59 = 2048;
              int v60 = output_handler;
              os_log_type_t v23 = "%{public}s protocol %{public}s (%p) has invalid finalize_output_frames callback";
LABEL_79:
              _os_log_impl(&dword_1830D4000, v20, v21, v23, buf, 0x20u);
              goto LABEL_80;
            }
            if (!v53)
            {
              id v20 = __nwlog_obj();
              os_log_type_t v21 = type;
              if (!os_log_type_enabled(v20, type)) {
                goto LABEL_80;
              }
              BOOL v41 = output_handler->identifier->name;
              if (!v41) {
                BOOL v41 = "invalid";
              }
              *(_DWORD *)tcp_info buf = 136446722;
              int v56 = "__nw_protocol_finalize_output_frames";
              __int16 v57 = 2082;
              uint64_t v58 = (void *)v41;
              __int16 v59 = 2048;
              int v60 = output_handler;
              os_log_type_t v23 = "%{public}s protocol %{public}s (%p) has invalid finalize_output_frames callback, backtrace limit exceeded";
              goto LABEL_79;
            }
            backtrace_string = (char *)__nw_create_backtrace_string();
            id v20 = __nwlog_obj();
            os_log_type_t v21 = type;
            BOOL v29 = os_log_type_enabled(v20, type);
            if (!backtrace_string)
            {
              if (!v29) {
                goto LABEL_80;
              }
              os_log_type_t v42 = output_handler->identifier->name;
              if (!v42) {
                os_log_type_t v42 = "invalid";
              }
              *(_DWORD *)tcp_info buf = 136446722;
              int v56 = "__nw_protocol_finalize_output_frames";
              __int16 v57 = 2082;
              uint64_t v58 = (void *)v42;
              __int16 v59 = 2048;
              int v60 = output_handler;
              os_log_type_t v23 = "%{public}s protocol %{public}s (%p) has invalid finalize_output_frames callback, no backtrace";
              goto LABEL_79;
            }
            if (v29)
            {
              uint64_t v30 = output_handler->identifier->name;
              if (!v30) {
                uint64_t v30 = "invalid";
              }
              *(_DWORD *)tcp_info buf = 136446978;
              int v56 = "__nw_protocol_finalize_output_frames";
              __int16 v57 = 2082;
              uint64_t v58 = (void *)v30;
              __int16 v59 = 2048;
              int v60 = output_handler;
              __int16 v61 = 2082;
              int v62 = backtrace_string;
              _os_log_impl(&dword_1830D4000, v20, v21, "%{public}s protocol %{public}s (%p) has invalid finalize_output_frames callback, dumping backtrace:%{public}s", buf, 0x2Au);
            }
            free(backtrace_string);
          }
LABEL_80:
          if (v19) {
            free(v19);
          }
          uint64_t v12 = 0;
          if (handle != &nw_protocol_ref_counted_handle) {
            goto LABEL_18;
          }
          goto LABEL_17;
        }
      }
      __nwlog_obj();
      *(_DWORD *)tcp_info buf = 136446210;
      int v56 = "__nw_protocol_finalize_output_frames";
      char v31 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v53 = 0;
      if (__nwlog_fault(v31, &type, &v53))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          __int16 v32 = __nwlog_obj();
          os_log_type_t v33 = type;
          if (os_log_type_enabled(v32, type))
          {
            *(_DWORD *)tcp_info buf = 136446210;
            int v56 = "__nw_protocol_finalize_output_frames";
            uint64_t v34 = "%{public}s called with null protocol";
LABEL_100:
            _os_log_impl(&dword_1830D4000, v32, v33, v34, buf, 0xCu);
          }
        }
        else if (v53)
        {
          BOOL v39 = (char *)__nw_create_backtrace_string();
          __int16 v32 = __nwlog_obj();
          os_log_type_t v33 = type;
          BOOL v40 = os_log_type_enabled(v32, type);
          if (v39)
          {
            if (v40)
            {
              *(_DWORD *)tcp_info buf = 136446466;
              int v56 = "__nw_protocol_finalize_output_frames";
              __int16 v57 = 2082;
              uint64_t v58 = v39;
              _os_log_impl(&dword_1830D4000, v32, v33, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
            }
            free(v39);
            goto LABEL_101;
          }
          if (v40)
          {
            *(_DWORD *)tcp_info buf = 136446210;
            int v56 = "__nw_protocol_finalize_output_frames";
            uint64_t v34 = "%{public}s called with null protocol, no backtrace";
            goto LABEL_100;
          }
        }
        else
        {
          __int16 v32 = __nwlog_obj();
          os_log_type_t v33 = type;
          if (os_log_type_enabled(v32, type))
          {
            *(_DWORD *)tcp_info buf = 136446210;
            int v56 = "__nw_protocol_finalize_output_frames";
            uint64_t v34 = "%{public}s called with null protocol, backtrace limit exceeded";
            goto LABEL_100;
          }
        }
      }
LABEL_101:
      if (v31) {
        free(v31);
      }
      uint64_t v12 = 0;
      goto LABEL_18;
    }
    __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    int v56 = "nw_protocol_udp_finalize_output_frames";
    os_log_type_t v24 = (char *)_os_log_send_and_compose_impl();
    v49[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v24, v49, &type)) {
      goto LABEL_95;
    }
    if (v49[0] == OS_LOG_TYPE_FAULT)
    {
      BOOL v25 = __nwlog_obj();
      os_log_type_t v26 = v49[0];
      if (os_log_type_enabled(v25, v49[0]))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        int v56 = "nw_protocol_udp_finalize_output_frames";
        char v27 = "%{public}s called with null udp";
        goto LABEL_94;
      }
      goto LABEL_95;
    }
    if (type == OS_LOG_TYPE_DEFAULT)
    {
      BOOL v25 = __nwlog_obj();
      os_log_type_t v26 = v49[0];
      if (os_log_type_enabled(v25, v49[0]))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        int v56 = "nw_protocol_udp_finalize_output_frames";
        char v27 = "%{public}s called with null udp, backtrace limit exceeded";
        goto LABEL_94;
      }
      goto LABEL_95;
    }
    int v35 = (char *)__nw_create_backtrace_string();
    BOOL v25 = __nwlog_obj();
    os_log_type_t v26 = v49[0];
    BOOL v38 = os_log_type_enabled(v25, v49[0]);
    if (!v35)
    {
      if (v38)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        int v56 = "nw_protocol_udp_finalize_output_frames";
        char v27 = "%{public}s called with null udp, no backtrace";
        goto LABEL_94;
      }
      goto LABEL_95;
    }
    if (v38)
    {
      *(_DWORD *)tcp_info buf = 136446466;
      int v56 = "nw_protocol_udp_finalize_output_frames";
      __int16 v57 = 2082;
      uint64_t v58 = v35;
      uint64_t v37 = "%{public}s called with null udp, dumping backtrace:%{public}s";
      goto LABEL_64;
    }
    goto LABEL_65;
  }
  __nwlog_obj();
  *(_DWORD *)tcp_info buf = 136446210;
  int v56 = "nw_protocol_udp_finalize_output_frames";
  os_log_type_t v24 = (char *)_os_log_send_and_compose_impl();
  v49[0] = OS_LOG_TYPE_ERROR;
  os_log_type_t type = OS_LOG_TYPE_DEFAULT;
  if (!__nwlog_fault(v24, v49, &type)) {
    goto LABEL_95;
  }
  if (v49[0] != OS_LOG_TYPE_FAULT)
  {
    if (type == OS_LOG_TYPE_DEFAULT)
    {
      BOOL v25 = __nwlog_obj();
      os_log_type_t v26 = v49[0];
      if (os_log_type_enabled(v25, v49[0]))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        int v56 = "nw_protocol_udp_finalize_output_frames";
        char v27 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_94;
      }
      goto LABEL_95;
    }
    int v35 = (char *)__nw_create_backtrace_string();
    BOOL v25 = __nwlog_obj();
    os_log_type_t v26 = v49[0];
    BOOL v36 = os_log_type_enabled(v25, v49[0]);
    if (!v35)
    {
      if (v36)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        int v56 = "nw_protocol_udp_finalize_output_frames";
        char v27 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_94;
      }
      goto LABEL_95;
    }
    if (v36)
    {
      *(_DWORD *)tcp_info buf = 136446466;
      int v56 = "nw_protocol_udp_finalize_output_frames";
      __int16 v57 = 2082;
      uint64_t v58 = v35;
      uint64_t v37 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_64:
      _os_log_impl(&dword_1830D4000, v25, v26, v37, buf, 0x16u);
    }
LABEL_65:
    free(v35);
    goto LABEL_95;
  }
  BOOL v25 = __nwlog_obj();
  os_log_type_t v26 = v49[0];
  if (os_log_type_enabled(v25, v49[0]))
  {
    *(_DWORD *)tcp_info buf = 136446210;
    int v56 = "nw_protocol_udp_finalize_output_frames";
    char v27 = "%{public}s called with null protocol";
LABEL_94:
    _os_log_impl(&dword_1830D4000, v25, v26, v27, buf, 0xCu);
  }
LABEL_95:
  if (v24) {
    free(v24);
  }
  return 0;
}

NSObject *nw_parameters_create_quic_connection_with_tls_fallback(void *a1, void *a2, void *a3, void *a4)
{
  uint64_t v136 = *MEMORY[0x1E4F143B8];
  id v7 = a1;
  id v8 = a2;
  id v129 = a3;
  id v9 = a4;
  id v10 = v9;
  if (!v7)
  {
    uint64_t v86 = __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    char v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
    uint64_t v87 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v130 = 0;
    if (!__nwlog_fault(v87, &type, &v130)) {
      goto LABEL_244;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v88 = __nwlog_obj();
      os_log_type_t v89 = type;
      if (os_log_type_enabled(v88, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        char v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
        _os_log_impl(&dword_1830D4000, v88, v89, "%{public}s called with null configure_security", buf, 0xCu);
      }
      goto LABEL_243;
    }
    if (!v130)
    {
      id v88 = __nwlog_obj();
      os_log_type_t v114 = type;
      if (os_log_type_enabled(v88, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        char v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
        _os_log_impl(&dword_1830D4000, v88, v114, "%{public}s called with null configure_security, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_243;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    id v88 = __nwlog_obj();
    os_log_type_t v99 = type;
    BOOL v100 = os_log_type_enabled(v88, type);
    if (!backtrace_string)
    {
      if (v100)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        char v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
        _os_log_impl(&dword_1830D4000, v88, v99, "%{public}s called with null configure_security, no backtrace", buf, 0xCu);
      }
      goto LABEL_243;
    }
    if (v100)
    {
      *(_DWORD *)tcp_info buf = 136446466;
      char v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
      __int16 v134 = 2082;
      nw_endpoint_t v135 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v88, v99, "%{public}s called with null configure_security, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_197;
  }
  if (!v9)
  {
    os_log_type_t v90 = __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    char v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
    uint64_t v87 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v130 = 0;
    if (!__nwlog_fault(v87, &type, &v130)) {
      goto LABEL_244;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v88 = __nwlog_obj();
      os_log_type_t v91 = type;
      if (os_log_type_enabled(v88, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        char v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
        _os_log_impl(&dword_1830D4000, v88, v91, "%{public}s called with null configure_tcp_fallback", buf, 0xCu);
      }
      goto LABEL_243;
    }
    if (!v130)
    {
      id v88 = __nwlog_obj();
      os_log_type_t v115 = type;
      if (os_log_type_enabled(v88, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        char v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
        _os_log_impl(&dword_1830D4000, v88, v115, "%{public}s called with null configure_tcp_fallback, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_243;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    id v88 = __nwlog_obj();
    os_log_type_t v101 = type;
    BOOL v102 = os_log_type_enabled(v88, type);
    if (!backtrace_string)
    {
      if (v102)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        char v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
        _os_log_impl(&dword_1830D4000, v88, v101, "%{public}s called with null configure_tcp_fallback, no backtrace", buf, 0xCu);
      }
      goto LABEL_243;
    }
    if (v102)
    {
      *(_DWORD *)tcp_info buf = 136446466;
      char v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
      __int16 v134 = 2082;
      nw_endpoint_t v135 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v88, v101, "%{public}s called with null configure_tcp_fallback, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_197;
  }
  if (!v8)
  {
    BOOL v92 = __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    char v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
    uint64_t v87 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v130 = 0;
    if (!__nwlog_fault(v87, &type, &v130)) {
      goto LABEL_244;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v88 = __nwlog_obj();
      os_log_type_t v93 = type;
      if (os_log_type_enabled(v88, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        char v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
        _os_log_impl(&dword_1830D4000, v88, v93, "%{public}s called with null configure_quic_connection", buf, 0xCu);
      }
      goto LABEL_243;
    }
    if (!v130)
    {
      id v88 = __nwlog_obj();
      os_log_type_t v116 = type;
      if (os_log_type_enabled(v88, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        char v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
        _os_log_impl(&dword_1830D4000, v88, v116, "%{public}s called with null configure_quic_connection, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_243;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    id v88 = __nwlog_obj();
    os_log_type_t v103 = type;
    BOOL v104 = os_log_type_enabled(v88, type);
    if (!backtrace_string)
    {
      if (v104)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        char v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
        _os_log_impl(&dword_1830D4000, v88, v103, "%{public}s called with null configure_quic_connection, no backtrace", buf, 0xCu);
      }
      goto LABEL_243;
    }
    if (v104)
    {
      *(_DWORD *)tcp_info buf = 136446466;
      char v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
      __int16 v134 = 2082;
      nw_endpoint_t v135 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v88, v103, "%{public}s called with null configure_quic_connection, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_197;
  }
  if (v8 == (void (**)(id, NWConcrete_nw_protocol_options *))&__block_literal_global_19196)
  {
    uint64_t v94 = __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    char v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
    uint64_t v87 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v130 = 0;
    if (!__nwlog_fault(v87, &type, &v130)) {
      goto LABEL_244;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v88 = __nwlog_obj();
      os_log_type_t v95 = type;
      if (os_log_type_enabled(v88, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        char v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
        _os_log_impl(&dword_1830D4000, v88, v95, "%{public}s called with null (configure_quic_connection != (_nw_parameters_configure_protocol_disable))", buf, 0xCu);
      }
      goto LABEL_243;
    }
    if (!v130)
    {
      id v88 = __nwlog_obj();
      os_log_type_t v117 = type;
      if (os_log_type_enabled(v88, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        char v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
        _os_log_impl(&dword_1830D4000, v88, v117, "%{public}s called with null (configure_quic_connection != (_nw_parameters_configure_protocol_disable)), backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_243;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    id v88 = __nwlog_obj();
    os_log_type_t v105 = type;
    BOOL v106 = os_log_type_enabled(v88, type);
    if (!backtrace_string)
    {
      if (v106)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        char v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
        _os_log_impl(&dword_1830D4000, v88, v105, "%{public}s called with null (configure_quic_connection != (_nw_parameters_configure_protocol_disable)), no backtrace", buf, 0xCu);
      }
      goto LABEL_243;
    }
    if (v106)
    {
      *(_DWORD *)tcp_info buf = 136446466;
      char v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
      __int16 v134 = 2082;
      nw_endpoint_t v135 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v88, v105, "%{public}s called with null (configure_quic_connection != (_nw_parameters_configure_protocol_disable)), dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_197:

    free(backtrace_string);
    if (!v87) {
      goto LABEL_246;
    }
    goto LABEL_245;
  }
  if (v9 == (void (**)(id, NWConcrete_nw_protocol_options *))&__block_literal_global_19196)
  {
    uint64_t v96 = __nwlog_obj();
    *(_DWORD *)tcp_info buf = 136446210;
    char v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
    uint64_t v87 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v130 = 0;
    if (!__nwlog_fault(v87, &type, &v130)) {
      goto LABEL_244;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v88 = __nwlog_obj();
      os_log_type_t v97 = type;
      if (os_log_type_enabled(v88, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        char v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
        _os_log_impl(&dword_1830D4000, v88, v97, "%{public}s called with null (configure_tcp_fallback != (_nw_parameters_configure_protocol_disable))", buf, 0xCu);
      }
    }
    else if (v130)
    {
      long long v107 = (char *)__nw_create_backtrace_string();
      id v88 = __nwlog_obj();
      os_log_type_t v108 = type;
      BOOL v109 = os_log_type_enabled(v88, type);
      if (v107)
      {
        if (v109)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          char v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
          __int16 v134 = 2082;
          nw_endpoint_t v135 = v107;
          _os_log_impl(&dword_1830D4000, v88, v108, "%{public}s called with null (configure_tcp_fallback != (_nw_parameters_configure_protocol_disable)), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v107);
LABEL_244:
        if (!v87)
        {
LABEL_246:
          uint64_t v30 = 0;
          goto LABEL_152;
        }
LABEL_245:
        free(v87);
        goto LABEL_246;
      }
      if (v109)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        char v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
        _os_log_impl(&dword_1830D4000, v88, v108, "%{public}s called with null (configure_tcp_fallback != (_nw_parameters_configure_protocol_disable)), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v88 = __nwlog_obj();
      os_log_type_t v118 = type;
      if (os_log_type_enabled(v88, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        char v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
        _os_log_impl(&dword_1830D4000, v88, v118, "%{public}s called with null (configure_tcp_fallback != (_nw_parameters_configure_protocol_disable)), backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_243:

    goto LABEL_244;
  }
  nw_parameters_t v11 = nw_parameters_create();
  if (v11)
  {
    uint64_t v12 = (void *)nw_protocol_boringssl_copy_definition();
    options = nw_protocol_create_options(v12);

    if (options)
    {
      id v14 = options;
      int v128 = v14;
      if (v7 != (void (**)(id, id))&__block_literal_global_101) {
        v7[2](v7, v14);
      }
      if (nw_protocol_copy_quic_connection_definition::onceToken != -1) {
        dispatch_once(&nw_protocol_copy_quic_connection_definition::onceToken, &__block_literal_global_55981);
      }
      id v15 = nw_protocol_create_options((void *)nw_protocol_copy_quic_connection_definition::quic_definition);
      nw_protocol_options_set_prohibit_joining(v15);
      if (v15)
      {
        nw_quic_connection_set_sec_protocol_options(v15, v128);
        uint64_t v16 = v11[19].isa;
        dispatch_data_t v126 = v16;
        if (v16)
        {
          objc_storeStrong(v16 + 3, v15);
          if (v8 != (void (**)(id, NWConcrete_nw_protocol_options *))&__block_literal_global_98) {
            v8[2](v8, v15);
          }
          if (nw_protocol_setup_tcp_definition(void)::onceToken != -1) {
            dispatch_once(&nw_protocol_setup_tcp_definition(void)::onceToken, &__block_literal_global_64304);
          }
          __int16 v17 = nw_protocol_create_options((void *)g_tcp_definition);
          nw_endpoint_t v127 = v17;
          if (v17)
          {
            if (v10 != (void (**)(id, NWConcrete_nw_protocol_options *))&__block_literal_global_98) {
              v10[2](v10, v17);
            }
            uint64_t v125 = objc_alloc_init(NWConcrete_nw_protocol_transform);
            if (v125)
            {
              id v18 = objc_alloc_init(NWConcrete_nw_protocol_transform);
              uint64_t v19 = v18;
              if (v18)
              {
                if (v129)
                {
                  id v20 = v18;
                  id v21 = v129;
                  objc_storeStrong(v20 + 4, a3);
                }
                uint64_t v22 = v125;
                *((unsigned char *)v22 + 8) |= 2u;

                nw_protocol_transform_append_protocol(v22, 3, v15);
                os_log_type_t v23 = v22;
                v23->fallback_uint64_t mode = 2;

                os_log_type_t v24 = v23;
                *((unsigned char *)v22 + 8) |= 0x10u;

                BOOL v25 = v19;
                *((unsigned char *)v25 + 8) |= 2u;

                os_log_type_t v26 = nw_protocol_options_copy(v128);
                nw_protocol_transform_append_protocol(v25, 4, v26);

                nw_protocol_transform_append_protocol(v25, 3, v127);
                char v27 = v25;
                *((unsigned char *)v25 + 8) |= 0x10u;

                BOOL v28 = nw_array_create();
                Class isa = v11[20].isa;
                v11[20].Class isa = (Class)v28;

                nw_array_append((uint64_t)v11[20].isa, v24);
                nw_array_append((uint64_t)v11[20].isa, v27);
                BYTE4(v11[11].isa) = 2;
                uint64_t v30 = v11;
LABEL_145:

                goto LABEL_146;
              }
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              id v68 = (id)gLogObj;
              *(_DWORD *)tcp_info buf = 136446210;
              char v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
              os_log_type_t v69 = (char *)_os_log_send_and_compose_impl();

              os_log_type_t type = OS_LOG_TYPE_ERROR;
              char v130 = 0;
              if (__nwlog_fault(v69, &type, &v130))
              {
                if (type == OS_LOG_TYPE_FAULT)
                {
                  BOOL v70 = __nwlog_obj();
                  os_log_type_t v71 = type;
                  if (os_log_type_enabled(v70, type))
                  {
                    *(_DWORD *)tcp_info buf = 136446210;
                    char v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
                    _os_log_impl(&dword_1830D4000, v70, v71, "%{public}s nw_protocol_transform_create failed", buf, 0xCu);
                  }
                }
                else
                {
                  if (v130)
                  {
                    BOOL v77 = (char *)__nw_create_backtrace_string();
                    int v78 = __nwlog_obj();
                    os_log_type_t v79 = type;
                    os_log_type_t log = v78;
                    BOOL v80 = os_log_type_enabled(v78, type);
                    if (v77)
                    {
                      if (v80)
                      {
                        *(_DWORD *)tcp_info buf = 136446466;
                        char v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
                        __int16 v134 = 2082;
                        nw_endpoint_t v135 = v77;
                        _os_log_impl(&dword_1830D4000, log, v79, "%{public}s nw_protocol_transform_create failed, dumping backtrace:%{public}s", buf, 0x16u);
                      }

                      free(v77);
                    }
                    else
                    {
                      if (v80)
                      {
                        *(_DWORD *)tcp_info buf = 136446210;
                        char v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
                        _os_log_impl(&dword_1830D4000, log, v79, "%{public}s nw_protocol_transform_create failed, no backtrace", buf, 0xCu);
                      }
                    }
                    goto LABEL_142;
                  }
                  BOOL v70 = __nwlog_obj();
                  os_log_type_t v84 = type;
                  if (os_log_type_enabled(v70, type))
                  {
                    *(_DWORD *)tcp_info buf = 136446210;
                    char v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
                    _os_log_impl(&dword_1830D4000, v70, v84, "%{public}s nw_protocol_transform_create failed, backtrace limit exceeded", buf, 0xCu);
                  }
                }
              }
LABEL_142:
              if (v69) {
                free(v69);
              }
              uint64_t v30 = 0;
              goto LABEL_145;
            }
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            id v58 = (id)gLogObj;
            *(_DWORD *)tcp_info buf = 136446210;
            char v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
            __int16 v59 = (char *)_os_log_send_and_compose_impl();

            os_log_type_t type = OS_LOG_TYPE_ERROR;
            char v130 = 0;
            if (__nwlog_fault(v59, &type, &v130))
            {
              if (type == OS_LOG_TYPE_FAULT)
              {
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                int v60 = (id)gLogObj;
                os_log_type_t v61 = type;
                if (os_log_type_enabled(v60, type))
                {
                  *(_DWORD *)tcp_info buf = 136446210;
                  char v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
                  _os_log_impl(&dword_1830D4000, v60, v61, "%{public}s nw_protocol_transform_create failed", buf, 0xCu);
                }
LABEL_71:

                goto LABEL_133;
              }
              if (!v130)
              {
                int v60 = __nwlog_obj();
                os_log_type_t v83 = type;
                if (os_log_type_enabled(v60, type))
                {
                  *(_DWORD *)tcp_info buf = 136446210;
                  char v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
                  _os_log_impl(&dword_1830D4000, v60, v83, "%{public}s nw_protocol_transform_create failed, backtrace limit exceeded", buf, 0xCu);
                }
                goto LABEL_71;
              }
              uint64_t v72 = (char *)__nw_create_backtrace_string();
              os_log_type_t v73 = __nwlog_obj();
              os_log_type_t v74 = type;
              BOOL v75 = os_log_type_enabled(v73, type);
              if (v72)
              {
                if (v75)
                {
                  *(_DWORD *)tcp_info buf = 136446466;
                  char v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
                  __int16 v134 = 2082;
                  nw_endpoint_t v135 = v72;
                  _os_log_impl(&dword_1830D4000, v73, v74, "%{public}s nw_protocol_transform_create failed, dumping backtrace:%{public}s", buf, 0x16u);
                }

                free(v72);
                if (!v59) {
                  goto LABEL_135;
                }
                goto LABEL_134;
              }
              if (v75)
              {
                *(_DWORD *)tcp_info buf = 136446210;
                char v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
                _os_log_impl(&dword_1830D4000, v73, v74, "%{public}s nw_protocol_transform_create failed, no backtrace", buf, 0xCu);
              }
            }
LABEL_133:
            if (!v59)
            {
LABEL_135:
              uint64_t v30 = 0;
LABEL_146:

              os_log_type_t v66 = v127;
              goto LABEL_147;
            }
LABEL_134:
            free(v59);
            goto LABEL_135;
          }
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          id v49 = (id)gLogObj;
          *(_DWORD *)tcp_info buf = 136446210;
          char v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
          BOOL v50 = (char *)_os_log_send_and_compose_impl();

          os_log_type_t type = OS_LOG_TYPE_ERROR;
          char v130 = 0;
          if (__nwlog_fault(v50, &type, &v130))
          {
            if (type == OS_LOG_TYPE_FAULT)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              uint64_t v51 = (id)gLogObj;
              os_log_type_t v52 = type;
              if (os_log_type_enabled(v51, type))
              {
                *(_DWORD *)tcp_info buf = 136446210;
                char v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
                _os_log_impl(&dword_1830D4000, v51, v52, "%{public}s nw_tcp_create_options failed", buf, 0xCu);
              }
LABEL_57:

              goto LABEL_124;
            }
            if (!v130)
            {
              uint64_t v51 = __nwlog_obj();
              os_log_type_t v82 = type;
              if (os_log_type_enabled(v51, type))
              {
                *(_DWORD *)tcp_info buf = 136446210;
                char v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
                _os_log_impl(&dword_1830D4000, v51, v82, "%{public}s nw_tcp_create_options failed, backtrace limit exceeded", buf, 0xCu);
              }
              goto LABEL_57;
            }
            int v62 = (char *)__nw_create_backtrace_string();
            uint64_t v63 = __nwlog_obj();
            os_log_type_t v64 = type;
            BOOL v65 = os_log_type_enabled(v63, type);
            if (v62)
            {
              if (v65)
              {
                *(_DWORD *)tcp_info buf = 136446466;
                char v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
                __int16 v134 = 2082;
                nw_endpoint_t v135 = v62;
                _os_log_impl(&dword_1830D4000, v63, v64, "%{public}s nw_tcp_create_options failed, dumping backtrace:%{public}s", buf, 0x16u);
              }

              free(v62);
              os_log_type_t v66 = 0;
              if (!v50) {
                goto LABEL_126;
              }
              goto LABEL_125;
            }
            if (v65)
            {
              *(_DWORD *)tcp_info buf = 136446210;
              char v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
              _os_log_impl(&dword_1830D4000, v63, v64, "%{public}s nw_tcp_create_options failed, no backtrace", buf, 0xCu);
            }
          }
LABEL_124:
          os_log_type_t v66 = 0;
          if (!v50)
          {
LABEL_126:
            uint64_t v30 = 0;
LABEL_147:

LABEL_148:
            goto LABEL_149;
          }
LABEL_125:
          free(v50);
          goto LABEL_126;
        }
        uint64_t v110 = __nwlog_obj();
        *(_DWORD *)tcp_info buf = 136446210;
        char v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
        uint64_t v111 = (char *)_os_log_send_and_compose_impl();

        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v130 = 0;
        if (__nwlog_fault(v111, &type, &v130))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            uint64_t v112 = __nwlog_obj();
            os_log_type_t v113 = type;
            if (os_log_type_enabled(v112, type))
            {
              *(_DWORD *)tcp_info buf = 136446210;
              char v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
              _os_log_impl(&dword_1830D4000, v112, v113, "%{public}s called with null stack", buf, 0xCu);
            }
          }
          else
          {
            if (v130)
            {
              id v119 = (char *)__nw_create_backtrace_string();
              uint64_t v120 = __nwlog_obj();
              os_log_type_t v121 = type;
              BOOL v122 = os_log_type_enabled(v120, type);
              if (v119)
              {
                if (v122)
                {
                  *(_DWORD *)tcp_info buf = 136446466;
                  char v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
                  __int16 v134 = 2082;
                  nw_endpoint_t v135 = v119;
                  _os_log_impl(&dword_1830D4000, v120, v121, "%{public}s called with null stack, dumping backtrace:%{public}s", buf, 0x16u);
                }

                free(v119);
              }
              else
              {
                if (v122)
                {
                  *(_DWORD *)tcp_info buf = 136446210;
                  char v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
                  _os_log_impl(&dword_1830D4000, v120, v121, "%{public}s called with null stack, no backtrace", buf, 0xCu);
                }
              }
              goto LABEL_253;
            }
            uint64_t v112 = __nwlog_obj();
            os_log_type_t v123 = type;
            if (os_log_type_enabled(v112, type))
            {
              *(_DWORD *)tcp_info buf = 136446210;
              char v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
              _os_log_impl(&dword_1830D4000, v112, v123, "%{public}s called with null stack, backtrace limit exceeded", buf, 0xCu);
            }
          }
        }
LABEL_253:
        if (v111) {
          free(v111);
        }
        uint64_t v30 = 0;
        goto LABEL_148;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v42 = (id)gLogObj;
      *(_DWORD *)tcp_info buf = 136446210;
      char v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
      os_log_type_t v43 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v130 = 0;
      if (__nwlog_fault(v43, &type, &v130))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v44 = (id)gLogObj;
          os_log_type_t v45 = type;
          if (os_log_type_enabled(v44, type))
          {
            *(_DWORD *)tcp_info buf = 136446210;
            char v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
            _os_log_impl(&dword_1830D4000, v44, v45, "%{public}s nw_quic_create_connection_options failed", buf, 0xCu);
          }
        }
        else if (v130)
        {
          char v53 = __nw_create_backtrace_string();
          if (v53)
          {
            int v54 = (char *)v53;
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            int v55 = (id)gLogObj;
            os_log_type_t v56 = type;
            if (os_log_type_enabled(v55, type))
            {
              *(_DWORD *)tcp_info buf = 136446466;
              char v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
              __int16 v134 = 2082;
              nw_endpoint_t v135 = v54;
              _os_log_impl(&dword_1830D4000, v55, v56, "%{public}s nw_quic_create_connection_options failed, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(v54);
            if (!v43) {
              goto LABEL_117;
            }
            goto LABEL_116;
          }
          os_log_type_t v44 = __nwlog_obj();
          os_log_type_t v81 = type;
          if (os_log_type_enabled(v44, type))
          {
            *(_DWORD *)tcp_info buf = 136446210;
            char v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
            _os_log_impl(&dword_1830D4000, v44, v81, "%{public}s nw_quic_create_connection_options failed, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v44 = (id)gLogObj;
          os_log_type_t v76 = type;
          if (os_log_type_enabled(v44, type))
          {
            *(_DWORD *)tcp_info buf = 136446210;
            char v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
            _os_log_impl(&dword_1830D4000, v44, v76, "%{public}s nw_quic_create_connection_options failed, backtrace limit exceeded", buf, 0xCu);
          }
        }
      }
      if (!v43)
      {
LABEL_117:
        uint64_t v30 = 0;
LABEL_149:

        goto LABEL_150;
      }
LABEL_116:
      free(v43);
      goto LABEL_117;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v35 = (id)gLogObj;
    *(_DWORD *)tcp_info buf = 136446210;
    char v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
    BOOL v36 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v130 = 0;
    if (__nwlog_fault(v36, &type, &v130))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v37 = (id)gLogObj;
        os_log_type_t v38 = type;
        if (os_log_type_enabled(v37, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          char v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
          _os_log_impl(&dword_1830D4000, v37, v38, "%{public}s nw_tls_create_options failed", buf, 0xCu);
        }
      }
      else if (v130)
      {
        os_log_type_t v46 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v37 = (id)gLogObj;
        os_log_type_t v47 = type;
        BOOL v48 = os_log_type_enabled(v37, type);
        if (v46)
        {
          if (v48)
          {
            *(_DWORD *)tcp_info buf = 136446466;
            char v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
            __int16 v134 = 2082;
            nw_endpoint_t v135 = v46;
            _os_log_impl(&dword_1830D4000, v37, v47, "%{public}s nw_tls_create_options failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v46);
          if (!v36) {
            goto LABEL_103;
          }
          goto LABEL_102;
        }
        if (v48)
        {
          *(_DWORD *)tcp_info buf = 136446210;
          char v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
          _os_log_impl(&dword_1830D4000, v37, v47, "%{public}s nw_tls_create_options failed, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v37 = (id)gLogObj;
        os_log_type_t v67 = type;
        if (os_log_type_enabled(v37, type))
        {
          *(_DWORD *)tcp_info buf = 136446210;
          char v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
          _os_log_impl(&dword_1830D4000, v37, v67, "%{public}s nw_tls_create_options failed, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
    if (!v36)
    {
LABEL_103:
      uint64_t v30 = 0;
LABEL_150:

      goto LABEL_151;
    }
LABEL_102:
    free(v36);
    goto LABEL_103;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v31 = (id)gLogObj;
  *(_DWORD *)tcp_info buf = 136446210;
  char v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
  __int16 v32 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v130 = 0;
  if (__nwlog_fault(v32, &type, &v130))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v33 = (id)gLogObj;
      os_log_type_t v34 = type;
      if (os_log_type_enabled(v33, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        char v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
        _os_log_impl(&dword_1830D4000, v33, v34, "%{public}s nw_parameters_create failed", buf, 0xCu);
      }
    }
    else if (v130)
    {
      BOOL v39 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v33 = (id)gLogObj;
      os_log_type_t v40 = type;
      BOOL v41 = os_log_type_enabled(v33, type);
      if (v39)
      {
        if (v41)
        {
          *(_DWORD *)tcp_info buf = 136446466;
          char v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
          __int16 v134 = 2082;
          nw_endpoint_t v135 = v39;
          _os_log_impl(&dword_1830D4000, v33, v40, "%{public}s nw_parameters_create failed, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v39);
        if (!v32) {
          goto LABEL_83;
        }
        goto LABEL_82;
      }
      if (v41)
      {
        *(_DWORD *)tcp_info buf = 136446210;
        char v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
        _os_log_impl(&dword_1830D4000, v33, v40, "%{public}s nw_parameters_create failed, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v33 = (id)gLogObj;
      os_log_type_t v57 = type;
      if (os_log_type_enabled(v33, type))
      {
        *(_DWORD *)tcp_info buf = 136446210;
        char v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
        _os_log_impl(&dword_1830D4000, v33, v57, "%{public}s nw_parameters_create failed, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
  if (v32) {
LABEL_82:
  }
    free(v32);
LABEL_83:
  uint64_t v30 = 0;
LABEL_151:

LABEL_152:
  return v30;
}