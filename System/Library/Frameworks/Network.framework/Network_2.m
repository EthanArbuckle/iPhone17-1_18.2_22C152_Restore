uint64_t nw_path_flow_registration_get_id(void *a1, _OWORD *a2)
{
  _OWORD *v3;
  void *v4;
  _OWORD *v5;
  uint64_t v6;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  char *backtrace_string;
  os_log_type_t v13;
  BOOL v14;
  os_log_type_t v15;
  char v16;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  char *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E4F143B8];
  v3 = a1;
  v4 = v3;
  if (!v3)
  {
    v8 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v19 = "nw_path_flow_registration_get_id";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v16 = 0;
    if (__nwlog_fault(v9, &type, &v16))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v10 = __nwlog_obj();
        v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          v19 = "nw_path_flow_registration_get_id";
          _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null registration", buf, 0xCu);
        }
      }
      else if (v16)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        v10 = __nwlog_obj();
        v13 = type;
        v14 = os_log_type_enabled(v10, type);
        if (backtrace_string)
        {
          if (v14)
          {
            *(_DWORD *)buf = 136446466;
            v19 = "nw_path_flow_registration_get_id";
            v20 = 2082;
            v21 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null registration, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_22;
        }
        if (v14)
        {
          *(_DWORD *)buf = 136446210;
          v19 = "nw_path_flow_registration_get_id";
          _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null registration, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        v10 = __nwlog_obj();
        v15 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          v19 = "nw_path_flow_registration_get_id";
          _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null registration, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_22:
    if (v9) {
      free(v9);
    }
    goto LABEL_3;
  }
  v5 = v3 + 2;
  if (!uuid_is_null((const unsigned __int8 *)v3 + 32))
  {
    *a2 = *v5;
    v6 = 1;
    goto LABEL_5;
  }
LABEL_3:
  v6 = 0;
LABEL_5:

  return v6;
}

void sub_1831ED3F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_connection_get_id(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    uint64_t v3 = v1[112];
    goto LABEL_3;
  }
  v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_connection_get_id";
  v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_connection_get_id";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_connection_get_id";
          __int16 v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_connection_get_id";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_connection_get_id";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

void nw_flow_passthrough_output_available(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    default_input_handler = a1->default_input_handler;
    if (default_input_handler)
    {
      callbacks = default_input_handler->callbacks;
      if (callbacks)
      {
        output_available = (void (*)(void))callbacks->output_available;
        if (output_available)
        {
          output_available();
        }
      }
    }
    return;
  }
  v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v15 = "nw_flow_passthrough_output_available";
  v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (__nwlog_fault(v6, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_flow_passthrough_output_available";
        v9 = "%{public}s called with null protocol";
LABEL_21:
        _os_log_impl(&dword_1830D4000, v7, v8, v9, buf, 0xCu);
      }
    }
    else
    {
      if (v12)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        v7 = __nwlog_obj();
        os_log_type_t v8 = type;
        BOOL v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446466;
            v15 = "nw_flow_passthrough_output_available";
            __int16 v16 = 2082;
            __int16 v17 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_23;
        }
        if (!v11) {
          goto LABEL_22;
        }
        *(_DWORD *)buf = 136446210;
        v15 = "nw_flow_passthrough_output_available";
        v9 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_21;
      }
      v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_flow_passthrough_output_available";
        v9 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_21;
      }
    }
LABEL_22:
  }
LABEL_23:
  if (v6) {
    free(v6);
  }
}

void nw_protocol_data_set_ecn_flag(void *a1, char a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  v4 = v3;
  if (v3)
  {
    *((unsigned char *)v3 + 186) = *((unsigned char *)v3 + 186) & 0xFC | a2 & 3;
    goto LABEL_3;
  }
  v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v16 = "nw_protocol_data_set_ecn_flag";
  v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_protocol_data_set_ecn_flag";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null data", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v16 = "nw_protocol_data_set_ecn_flag";
          __int16 v17 = 2082;
          uint64_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null data, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_protocol_data_set_ecn_flag";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null data, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_protocol_data_set_ecn_flag";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null data, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
LABEL_3:
}

void ___ZL38nw_listener_reconcile_inboxes_on_queueP22NWConcrete_nw_listener_block_invoke_209(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if ((*(_DWORD *)(v1 + 128) - 3) >= 2 && (*(unsigned char *)(v1 + 302) & 1) == 0) {
    nw_path_evaluator_force_update(*(void **)(v1 + 168), *(void **)(a1 + 40));
  }
}

void __nw_path_create_necp_parameters_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  size_t __n = 0;
  uint64_t v4 = nw_protocol_options_copy_serialized_bytes(v3, (uint64_t)&__n, 1);
  v5 = (void *)v4;
  if (!v4 || (size_t v6 = __n) == 0)
  {
    if (!v4)
    {
LABEL_10:

      return;
    }
LABEL_9:
    free(v5);
    goto LABEL_10;
  }
  if (__n == -42)
  {
    uint64_t v18 = __nwlog_obj();
    os_log_type_enabled(v18, OS_LOG_TYPE_ERROR);
    int v23 = 136446210;
    v24 = "strict_malloc";
    uint64_t v19 = (void *)_os_log_send_and_compose_impl();

    if (__nwlog_abort((uint64_t)v19)) {
      goto LABEL_15;
    }
    free(v19);
  }
  v7 = malloc_type_malloc(v6 + 42, 0xF2B69DE5uLL);
  if (v7)
  {
LABEL_5:
    nw_protocol_definition_t v8 = nw_protocol_options_copy_definition(v3);
    identifier = nw_protocol_definition_get_identifier(v8);
    uint64_t v10 = *((void *)identifier + 4);
    long long v11 = *((_OWORD *)identifier + 1);
    _OWORD *v7 = *(_OWORD *)identifier;
    v7[1] = v11;
    *((void *)v7 + 4) = v10;
    size_t v12 = __n;
    *((_WORD *)v7 + 20) = __n;
    memcpy((char *)v7 + 42, v5, v12);
    xpc_object_t v13 = xpc_data_create(v7, v6 + 42);
    v14 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
    if (!v14)
    {
      xpc_object_t v15 = xpc_array_create(0, 0);
      uint64_t v16 = *(void *)(*(void *)(a1 + 32) + 8);
      __int16 v17 = *(void **)(v16 + 40);
      *(void *)(v16 + 40) = v15;

      v14 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
    }
    xpc_array_append_value(v14, v13);
    free(v7);
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) += v6 + 47;

    goto LABEL_9;
  }
  v20 = __nwlog_obj();
  os_log_type_enabled(v20, OS_LOG_TYPE_ERROR);
  int v23 = 136446466;
  v24 = "strict_malloc";
  __int16 v25 = 2048;
  size_t v26 = v6 + 42;
  v21 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v21))
  {
    free(v21);
    goto LABEL_5;
  }
LABEL_15:
  __break(1u);
}

void sub_1831EDEB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_protocol_options_copy_serialized_bytes(void *a1, uint64_t a2, int a3)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  v5 = a1;
  size_t v6 = v5;
  if (!v5)
  {
    size_t v12 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v34 = "nw_protocol_options_copy_serialized_bytes";
    xpc_object_t v13 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v31 = 0;
    if (!__nwlog_fault(v13, &type, &v31)) {
      goto LABEL_60;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_protocol_options_copy_serialized_bytes";
        _os_log_impl(&dword_1830D4000, v14, v15, "%{public}s called with null options", buf, 0xCu);
      }
      goto LABEL_59;
    }
    if (!v31)
    {
      v14 = __nwlog_obj();
      os_log_type_t v27 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_protocol_options_copy_serialized_bytes";
        _os_log_impl(&dword_1830D4000, v14, v27, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_59;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v14 = __nwlog_obj();
    os_log_type_t v21 = type;
    BOOL v22 = os_log_type_enabled(v14, type);
    if (!backtrace_string)
    {
      if (v22)
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_protocol_options_copy_serialized_bytes";
        _os_log_impl(&dword_1830D4000, v14, v21, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
      goto LABEL_59;
    }
    if (v22)
    {
      *(_DWORD *)buf = 136446466;
      v34 = "nw_protocol_options_copy_serialized_bytes";
      __int16 v35 = 2082;
      v36 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v14, v21, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_41;
  }
  if (!a2)
  {
    uint64_t v16 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v34 = "nw_protocol_options_copy_serialized_bytes";
    xpc_object_t v13 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v31 = 0;
    if (!__nwlog_fault(v13, &type, &v31)) {
      goto LABEL_60;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      v14 = __nwlog_obj();
      os_log_type_t v17 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_protocol_options_copy_serialized_bytes";
        _os_log_impl(&dword_1830D4000, v14, v17, "%{public}s called with null serialized_length", buf, 0xCu);
      }
      goto LABEL_59;
    }
    if (!v31)
    {
      v14 = __nwlog_obj();
      os_log_type_t v28 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_protocol_options_copy_serialized_bytes";
        _os_log_impl(&dword_1830D4000, v14, v28, "%{public}s called with null serialized_length, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_59;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v14 = __nwlog_obj();
    os_log_type_t v23 = type;
    BOOL v24 = os_log_type_enabled(v14, type);
    if (!backtrace_string)
    {
      if (v24)
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_protocol_options_copy_serialized_bytes";
        _os_log_impl(&dword_1830D4000, v14, v23, "%{public}s called with null serialized_length, no backtrace", buf, 0xCu);
      }
      goto LABEL_59;
    }
    if (v24)
    {
      *(_DWORD *)buf = 136446466;
      v34 = "nw_protocol_options_copy_serialized_bytes";
      __int16 v35 = 2082;
      v36 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v14, v23, "%{public}s called with null serialized_length, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_41;
  }
  uint64_t v7 = v5[1];
  if (!v7)
  {
    uint64_t v18 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v34 = "nw_protocol_options_copy_serialized_bytes";
    xpc_object_t v13 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v31 = 0;
    if (!__nwlog_fault(v13, &type, &v31)) {
      goto LABEL_60;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      v14 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_protocol_options_copy_serialized_bytes";
        _os_log_impl(&dword_1830D4000, v14, v19, "%{public}s called with null options->definition", buf, 0xCu);
      }
LABEL_59:

LABEL_60:
      if (v13) {
        free(v13);
      }
      goto LABEL_62;
    }
    if (!v31)
    {
      v14 = __nwlog_obj();
      os_log_type_t v29 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_protocol_options_copy_serialized_bytes";
        _os_log_impl(&dword_1830D4000, v14, v29, "%{public}s called with null options->definition, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_59;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v14 = __nwlog_obj();
    os_log_type_t v25 = type;
    BOOL v26 = os_log_type_enabled(v14, type);
    if (!backtrace_string)
    {
      if (v26)
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_protocol_options_copy_serialized_bytes";
        _os_log_impl(&dword_1830D4000, v14, v25, "%{public}s called with null options->definition, no backtrace", buf, 0xCu);
      }
      goto LABEL_59;
    }
    if (v26)
    {
      *(_DWORD *)buf = 136446466;
      v34 = "nw_protocol_options_copy_serialized_bytes";
      __int16 v35 = 2082;
      v36 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v14, v25, "%{public}s called with null options->definition, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_41:

    free(backtrace_string);
    goto LABEL_60;
  }
  nw_protocol_definition_t v8 = *(uint64_t (**)(void))(v7 + 128);
  if (!v8) {
    goto LABEL_62;
  }
  if (!a3 || (*(unsigned char *)(v7 + 185) & 1) != 0) {
    goto LABEL_11;
  }
  uint64_t v9 = *(void *)(v7 + 80);
  if (!v9 || (uint64_t v10 = *(unsigned int (**)(void))(v9 + 248)) == 0 || !v10())
  {
LABEL_62:
    uint64_t v11 = 0;
    goto LABEL_63;
  }
  nw_protocol_definition_t v8 = *(uint64_t (**)(void))(v6[1] + 128);
LABEL_11:
  uint64_t v11 = v8();
LABEL_63:

  return v11;
}

void sub_1831EE5D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_904()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267950, (uint64_t)nw::object::_description, 0);
    qword_1EB267950 = v0;
  }
}

void __cxx_global_var_init_86()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267950, (uint64_t)nw::object::_description, 0);
    qword_1EB267950 = v0;
  }
}

void __cxx_global_var_init_475()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267950, (uint64_t)nw::object::_description, 0);
    qword_1EB267950 = v0;
  }
}

void __cxx_global_var_init_4_906()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267920, (uint64_t)nw::object::_destroy, 0);
    qword_1EB267920 = v0;
  }
}

void __cxx_global_var_init_4_88()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267920, (uint64_t)nw::object::_destroy, 0);
    qword_1EB267920 = v0;
  }
}

void __cxx_global_var_init_4_477()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267920, (uint64_t)nw::object::_destroy, 0);
    qword_1EB267920 = v0;
  }
}

void __cxx_global_var_init_4_3778()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267920, (uint64_t)nw::object::_destroy, 0);
    qword_1EB267920 = v0;
  }
}

void __cxx_global_var_init_4_3576()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267920, (uint64_t)nw::object::_destroy, 0);
    qword_1EB267920 = v0;
  }
}

void __cxx_global_var_init_4_3129()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267920, (uint64_t)nw::object::_destroy, 0);
    qword_1EB267920 = v0;
  }
}

void __cxx_global_var_init_4_297()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267920, (uint64_t)nw::object::_destroy, 0);
    qword_1EB267920 = v0;
  }
}

void __cxx_global_var_init_4_2616()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267920, (uint64_t)nw::object::_destroy, 0);
    qword_1EB267920 = v0;
  }
}

void __cxx_global_var_init_4_212()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267920, (uint64_t)nw::object::_destroy, 0);
    qword_1EB267920 = v0;
  }
}

void __cxx_global_var_init_4_1938()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267920, (uint64_t)nw::object::_destroy, 0);
    qword_1EB267920 = v0;
  }
}

void __cxx_global_var_init_4_11472()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267920, (uint64_t)nw::object::_destroy, 0);
    qword_1EB267920 = v0;
  }
}

void __cxx_global_var_init_4_1133()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267920, (uint64_t)nw::object::_destroy, 0);
    qword_1EB267920 = v0;
  }
}

void __cxx_global_var_init_3776()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267950, (uint64_t)nw::object::_description, 0);
    qword_1EB267950 = v0;
  }
}

void __cxx_global_var_init_3574()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267950, (uint64_t)nw::object::_description, 0);
    qword_1EB267950 = v0;
  }
}

void __cxx_global_var_init_3127()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267950, (uint64_t)nw::object::_description, 0);
    qword_1EB267950 = v0;
  }
}

void __cxx_global_var_init_295()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267950, (uint64_t)nw::object::_description, 0);
    qword_1EB267950 = v0;
  }
}

void __cxx_global_var_init_2614()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267950, (uint64_t)nw::object::_description, 0);
    qword_1EB267950 = v0;
  }
}

void __cxx_global_var_init_210()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267950, (uint64_t)nw::object::_description, 0);
    qword_1EB267950 = v0;
  }
}

void __cxx_global_var_init_2_905()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267938, (uint64_t)nw::object::_redacted_description, 0);
    qword_1EB267938 = v0;
  }
}

void __cxx_global_var_init_2_87()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267938, (uint64_t)nw::object::_redacted_description, 0);
    qword_1EB267938 = v0;
  }
}

void __cxx_global_var_init_2_476()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267938, (uint64_t)nw::object::_redacted_description, 0);
    qword_1EB267938 = v0;
  }
}

void __cxx_global_var_init_2_3777()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267938, (uint64_t)nw::object::_redacted_description, 0);
    qword_1EB267938 = v0;
  }
}

void __cxx_global_var_init_2_3575()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267938, (uint64_t)nw::object::_redacted_description, 0);
    qword_1EB267938 = v0;
  }
}

void __cxx_global_var_init_2_3128()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267938, (uint64_t)nw::object::_redacted_description, 0);
    qword_1EB267938 = v0;
  }
}

void __cxx_global_var_init_2_296()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267938, (uint64_t)nw::object::_redacted_description, 0);
    qword_1EB267938 = v0;
  }
}

void __cxx_global_var_init_2_2615()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267938, (uint64_t)nw::object::_redacted_description, 0);
    qword_1EB267938 = v0;
  }
}

void __cxx_global_var_init_2_211()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267938, (uint64_t)nw::object::_redacted_description, 0);
    qword_1EB267938 = v0;
  }
}

void __cxx_global_var_init_2_1937()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267938, (uint64_t)nw::object::_redacted_description, 0);
    qword_1EB267938 = v0;
  }
}

void __cxx_global_var_init_2_11471()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267938, (uint64_t)nw::object::_redacted_description, 0);
    qword_1EB267938 = v0;
  }
}

void __cxx_global_var_init_2_1132()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267938, (uint64_t)nw::object::_redacted_description, 0);
    qword_1EB267938 = v0;
  }
}

void __cxx_global_var_init_1936()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267950, (uint64_t)nw::object::_description, 0);
    qword_1EB267950 = v0;
  }
}

void __cxx_global_var_init_11470()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267950, (uint64_t)nw::object::_description, 0);
    qword_1EB267950 = v0;
  }
}

void __cxx_global_var_init_1131()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267950, (uint64_t)nw::object::_description, 0);
    qword_1EB267950 = v0;
  }
}

nw_endpoint_t nw_endpoint_create_address_with_ethernet(const sockaddr *a1, int *a2)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  nw_endpoint_t address = nw_endpoint_create_address(a1);
  nw_endpoint_t v4 = address;
  if (a2 && address)
  {
    v5 = address;
    int v6 = [v5 type];

    if (v6 == 1)
    {
      int v7 = *a2;
      WORD2(v5[45].isa) = *((_WORD *)a2 + 2);
      LODWORD(v5[45].isa) = v7;
LABEL_12:

      return v4;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v8 = (id)gLogObj;
    uint64_t v9 = v5;
    nw_endpoint_type_t v10 = [v9 type];

    *(_DWORD *)buf = 136446466;
    v30 = "nw_endpoint_set_ethernet_address";
    __int16 v31 = 1024;
    nw_endpoint_type_t v32 = v10;
    LODWORD(v26) = 18;
    uint64_t v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v27 = 0;
    if (__nwlog_fault(v11, &type, &v27))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        size_t v12 = (id)gLogObj;
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v12, type))
        {
          v14 = v9;
          nw_endpoint_type_t v15 = [v14 type];

          *(_DWORD *)buf = 136446466;
          v30 = "nw_endpoint_set_ethernet_address";
          __int16 v31 = 1024;
          nw_endpoint_type_t v32 = v15;
          _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s incorrect endpoint type %u", buf, 0x12u);
        }
      }
      else if (v27)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        size_t v12 = (id)gLogObj;
        os_log_type_t v18 = type;
        BOOL v19 = os_log_type_enabled(v12, type);
        if (backtrace_string)
        {
          if (v19)
          {
            v20 = v9;
            nw_endpoint_type_t v21 = [v20 type];

            *(_DWORD *)buf = 136446722;
            v30 = "nw_endpoint_set_ethernet_address";
            __int16 v31 = 1024;
            nw_endpoint_type_t v32 = v21;
            __int16 v33 = 2082;
            v34 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v12, v18, "%{public}s incorrect endpoint type %u, dumping backtrace:%{public}s", buf, 0x1Cu);
          }

          free(backtrace_string);
          if (!v11) {
            goto LABEL_12;
          }
          goto LABEL_11;
        }
        if (v19)
        {
          nw_endpoint_type_t v25 = nw_endpoint_get_type(v9);
          *(_DWORD *)buf = 136446466;
          v30 = "nw_endpoint_set_ethernet_address";
          __int16 v31 = 1024;
          nw_endpoint_type_t v32 = v25;
          _os_log_impl(&dword_1830D4000, v12, v18, "%{public}s incorrect endpoint type %u, no backtrace", buf, 0x12u);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        size_t v12 = (id)gLogObj;
        os_log_type_t v22 = type;
        if (os_log_type_enabled(v12, type))
        {
          os_log_type_t v23 = v9;
          nw_endpoint_type_t v24 = [v23 type];

          *(_DWORD *)buf = 136446466;
          v30 = "nw_endpoint_set_ethernet_address";
          __int16 v31 = 1024;
          nw_endpoint_type_t v32 = v24;
          _os_log_impl(&dword_1830D4000, v12, v22, "%{public}s incorrect endpoint type %u, backtrace limit exceeded", buf, 0x12u);
        }
      }
    }
    if (!v11) {
      goto LABEL_12;
    }
LABEL_11:
    free(v11);
    goto LABEL_12;
  }
  return v4;
}

void sub_1831F0D20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ____nwlog_path_log_block_invoke()
{
  if ((gHasForked & 1) == 0) {
    gpathLogObj = (uint64_t)os_log_create((const char *)nw_oslog_subsystem, "path");
  }
}

void nw_parameters_set_indefinite(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  nw_endpoint_t v4 = v3;
  if (v3)
  {
    uint64_t v5 = 128;
    if (a2) {
      uint64_t v5 = 192;
    }
    *((void *)v3 + 12) = v5 | *((void *)v3 + 12) & 0xFFFFFFFFFFFFFF3FLL;
    goto LABEL_5;
  }
  int v6 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v17 = "nw_parameters_set_indefinite";
  int v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v17 = "nw_parameters_set_indefinite";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v8 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v17 = "nw_parameters_set_indefinite";
          __int16 v18 = 2082;
          BOOL v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v17 = "nw_parameters_set_indefinite";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v17 = "nw_parameters_set_indefinite";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_22:
  if (v7) {
    free(v7);
  }
LABEL_5:
}

BOOL nw_resolver_cancel(void *a1)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = a1;
  v2 = v1;
  if (v1)
  {
    if ((v1[346] & 0x20) != 0)
    {
LABEL_12:
      os_unfair_lock_lock((os_unfair_lock_t)v2 + 3);
      nw_resolver_cancel_delayed_reporting_timer((NWConcrete_nw_resolver *)v2);
      if (!*((void *)v2 + 16)) {
        nw_resolver_cancel_query_locked((NWConcrete_nw_resolver *)v2, 0);
      }
      id v8 = (void *)*((void *)v2 + 12);
      *((void *)v2 + 12) = 0;

      os_log_type_t v9 = (const void *)*((void *)v2 + 13);
      if (v9)
      {
        nw_endpoint_type_t v10 = _Block_copy(v9);
        os_log_type_t v11 = (void *)*((void *)v2 + 13);
        *((void *)v2 + 13) = 0;

        BOOL v12 = *((void *)v2 + 14);
        if (v12) {
          dispatch_async(v12, v10);
        }
        else {
          nw_queue_context_async(*((void **)v2 + 4), v10);
        }
      }
      os_log_type_t v13 = (void *)*((void *)v2 + 14);
      *((void *)v2 + 14) = 0;

      char v14 = (void *)*((void *)v2 + 27);
      *((void *)v2 + 27) = 0;

      os_unfair_lock_unlock((os_unfair_lock_t)v2 + 3);
      goto LABEL_20;
    }
    if (v1[256])
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      id v3 = (id)gconnectionLogObj;
      if (!os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_11;
      }
      *(_DWORD *)buf = 136446722;
      char v27 = "nw_resolver_cancel";
      __int16 v28 = 2082;
      *(void *)os_log_type_t v29 = v2 + 256;
      *(_WORD *)&v29[8] = 2048;
      *(void *)&v29[10] = v2;
      nw_endpoint_t v4 = "%{public}s [C%{public}s] %p";
      uint64_t v5 = v3;
      uint32_t v6 = 32;
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v3 = (id)gLogObj;
      if (!os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
      {
LABEL_11:

        goto LABEL_12;
      }
      int v7 = *((_DWORD *)v2 + 85);
      *(_DWORD *)buf = 136446722;
      char v27 = "nw_resolver_cancel";
      __int16 v28 = 1024;
      *(_DWORD *)os_log_type_t v29 = v7;
      *(_WORD *)&v29[4] = 2048;
      *(void *)&v29[6] = v2;
      nw_endpoint_t v4 = "%{public}s [R%u] %p";
      uint64_t v5 = v3;
      uint32_t v6 = 28;
    }
    _os_log_impl(&dword_1830D4000, v5, OS_LOG_TYPE_DEBUG, v4, buf, v6);
    goto LABEL_11;
  }
  uint64_t v16 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v27 = "nw_resolver_cancel";
  os_log_type_t v17 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v24 = 0;
  if (__nwlog_fault(v17, &type, &v24))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int16 v18 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)buf = 136446210;
        char v27 = "nw_resolver_cancel";
        _os_log_impl(&dword_1830D4000, v18, v19, "%{public}s called with null resolver", buf, 0xCu);
      }
    }
    else if (v24)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __int16 v18 = __nwlog_obj();
      os_log_type_t v21 = type;
      BOOL v22 = os_log_type_enabled(v18, type);
      if (backtrace_string)
      {
        if (v22)
        {
          *(_DWORD *)buf = 136446466;
          char v27 = "nw_resolver_cancel";
          __int16 v28 = 2082;
          *(void *)os_log_type_t v29 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v18, v21, "%{public}s called with null resolver, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_37;
      }
      if (v22)
      {
        *(_DWORD *)buf = 136446210;
        char v27 = "nw_resolver_cancel";
        _os_log_impl(&dword_1830D4000, v18, v21, "%{public}s called with null resolver, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __int16 v18 = __nwlog_obj();
      os_log_type_t v23 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)buf = 136446210;
        char v27 = "nw_resolver_cancel";
        _os_log_impl(&dword_1830D4000, v18, v23, "%{public}s called with null resolver, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_37:
  if (v17) {
    free(v17);
  }
LABEL_20:

  return v2 != 0;
}

void sub_1831F1510(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_resolver_update_status_locked(void *a1, void *a2)
{
  uint64_t v79 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  if (*((_DWORD *)v3 + 21) || (v3[346] & 2) != 0) {
    goto LABEL_47;
  }
  if (nw_endpoint_get_type(*((nw_endpoint_t *)v3 + 3)) != nw_endpoint_type_host)
  {
    if (nw_endpoint_get_type(*((nw_endpoint_t *)v3 + 3)) == nw_endpoint_type_bonjour_service)
    {
      uint64_t v10 = *((void *)v3 + 18);
      if (v10
        && *(void *)(v10 + 24) != *(void *)(v10 + 16)
        && (nw_parameters_get_indefinite(*((void **)v3 + 2)) & 1) == 0
        && (*((_WORD *)v3 + 44) & 0x10) == 0)
      {
        *((_DWORD *)v3 + 2) = 1;
        nw_resolver_start_query_timer((NWConcrete_nw_resolver *)v3);
        goto LABEL_155;
      }
      goto LABEL_27;
    }
    if (nw_endpoint_get_type(*((nw_endpoint_t *)v3 + 3)) == (nw_endpoint_type_url|nw_endpoint_type_address))
    {
      if ((*((_WORD *)v3 + 44) & 0x10) != 0)
      {
LABEL_27:
        char v11 = 0;
        int v12 = 1;
LABEL_48:
        *((_DWORD *)v3 + 2) = v12;
        goto LABEL_49;
      }
    }
    else if (nw_endpoint_get_type(*((nw_endpoint_t *)v3 + 3)) == nw_endpoint_type_address {
           && nw_parameters_get_resolve_ptr(*((void **)v3 + 2))
    }
           && (*((_WORD *)v3 + 44) & 5) == 0)
    {
      goto LABEL_27;
    }
LABEL_47:
    char v11 = 0;
    int v12 = 2;
    goto LABEL_48;
  }
  __int16 v5 = *((_WORD *)v3 + 44);
  if ((v5 & 0x10) == 0)
  {
    if ((v5 & 0x60) == 0 && (v5 & 0xA) != 0 && (v5 & 5) != 0 && (v5 & 0x80) != 0)
    {
      if (*((void *)v3 + 6)
        && (*((_WORD *)v3 + 44) & 0x802) != 0
        && (*((_WORD *)v3 + 44) & 0x401) != 0
        && (v3[347] & 0xE0) == 0x60)
      {
        if ((v3[346] & 0x20) != 0)
        {
LABEL_76:
          *((_DWORD *)v3 + 2) = 1;
          nw_resolver_cancel_query_locked((NWConcrete_nw_resolver *)v3, 0);
          *((_WORD *)v3 + 44) = 0;
          v3[347] |= 0x80u;
          nw_resolver_create_dns_getaddrinfo_locked((NWConcrete_nw_resolver *)v3, 0);
          char v11 = 0;
          goto LABEL_49;
        }
        if (v3[256])
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          uint32_t v6 = (id)gconnectionLogObj;
          if (!os_log_type_enabled(v6, OS_LOG_TYPE_INFO)) {
            goto LABEL_75;
          }
          *(_DWORD *)buf = 136446466;
          v76 = "nw_resolver_update_status_locked";
          __int16 v77 = 2082;
          *(void *)v78 = v3 + 256;
          int v7 = "%{public}s [C%{public}s] Failed to resolve using oblivious configuration, failing over";
          id v8 = v6;
          uint32_t v9 = 22;
        }
        else
        {
          uint32_t v6 = __nwlog_obj();
          if (!os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
          {
LABEL_75:

            goto LABEL_76;
          }
          int v25 = *((_DWORD *)v3 + 85);
          *(_DWORD *)buf = 136446466;
          v76 = "nw_resolver_update_status_locked";
          __int16 v77 = 1024;
          *(_DWORD *)v78 = v25;
          int v7 = "%{public}s [R%u] Failed to resolve using oblivious configuration, failing over";
          id v8 = v6;
          uint32_t v9 = 18;
        }
        _os_log_impl(&dword_1830D4000, v8, OS_LOG_TYPE_INFO, v7, buf, v9);
        goto LABEL_75;
      }
      *((_DWORD *)v3 + 2) = 2;
      if ((v3[348] & 2) != 0)
      {
        uint64_t v19 = *((void *)v3 + 18);
        if (v19)
        {
          if (*(void *)(v19 + 24) != *(void *)(v19 + 16))
          {
            uint64_t v20 = nw_array_copy(v19);
            os_log_type_t v21 = (void *)v20;
            if (v20) {
              uint64_t v22 = (uint64_t)(*(void *)(v20 + 24) - *(void *)(v20 + 16)) >> 3;
            }
            else {
              uint64_t v22 = 0;
            }
            BOOL v26 = nw_array_create();
            nw_array_append(v26, v21);
            id v27 = nw_storage_copy_shared();
            __int16 v28 = (void *)*((void *)v3 + 3);
            os_log_type_t v29 = (void *)*((void *)v3 + 4);
            v68[0] = MEMORY[0x1E4F143A8];
            v68[1] = 3221225472;
            v68[2] = ___ZL32nw_resolver_update_status_lockedP22NWConcrete_nw_resolverU13block_pointerFvvE_block_invoke;
            v68[3] = &unk_1E52491B0;
            v69 = v3;
            uint64_t v70 = v22;
            nw_storage_store_items(v27, (uint64_t)"dns_cache", (void *)v26, v28, v29, v68);
          }
        }
      }
      goto LABEL_155;
    }
    *((_DWORD *)v3 + 2) = 1;
    if ((v5 & 0x104) != 0 && (v5 & 0x20) == 0 || (v5 & 0x208) != 0 && (v5 & 0x40) == 0) {
      nw_resolver_start_query_timer((NWConcrete_nw_resolver *)v3);
    }
    os_log_type_t v13 = v3;
    if ((v5 & 0x20A) != 0 && (v5 & 0x80) != 0
      || (unint64_t int64_with_default = networkd_settings_get_int64_with_default((const char *)nw_setting_resolver_start_delay, 50)) == 0)
    {

      char v11 = 0;
      goto LABEL_49;
    }
    uint64_t v15 = int64_with_default;
    if ((int64_with_default & 0x8000000000000000) != 0)
    {
      if ((v3[346] & 0x20) == 0)
      {
        if (*((unsigned char *)v13 + 256))
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          uint64_t v16 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446978;
            v76 = "nw_resolver_start_delayed_reporting_timer";
            __int16 v77 = 2082;
            *(void *)v78 = v13 + 32;
            *(_WORD *)&v78[8] = 2048;
            *(void *)&v78[10] = v15;
            *(_WORD *)&v78[18] = 2048;
            uint64_t v15 = 50;
            *(void *)&v78[20] = 50;
            os_log_type_t v17 = "%{public}s [C%{public}s] Invalid resolver reporting delay %lldms, reverting to default value %llums";
            goto LABEL_71;
          }
        }
        else
        {
          uint64_t v16 = __nwlog_obj();
          if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
          {
            int v30 = *((_DWORD *)v13 + 85);
            *(_DWORD *)buf = 136446978;
            v76 = "nw_resolver_start_delayed_reporting_timer";
            __int16 v77 = 1024;
            *(_DWORD *)v78 = v30;
            *(_WORD *)&v78[4] = 2048;
            *(void *)&v78[6] = v15;
            *(_WORD *)&v78[14] = 2048;
            uint64_t v15 = 50;
            *(void *)&v78[16] = 50;
            os_log_type_t v17 = "%{public}s [R%u] Invalid resolver reporting delay %lldms, reverting to default value %llums";
            goto LABEL_84;
          }
        }
        uint64_t v15 = 50;
LABEL_87:

        goto LABEL_88;
      }
      uint64_t v15 = 50;
    }
    else
    {
      if (int64_with_default < 0xEA61) {
        goto LABEL_88;
      }
      if ((v3[346] & 0x20) == 0)
      {
        if (*((unsigned char *)v13 + 256))
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          uint64_t v16 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446978;
            v76 = "nw_resolver_start_delayed_reporting_timer";
            __int16 v77 = 2082;
            *(void *)v78 = v13 + 32;
            *(_WORD *)&v78[8] = 2048;
            *(void *)&v78[10] = v15;
            *(_WORD *)&v78[18] = 2048;
            uint64_t v15 = 60000;
            *(void *)&v78[20] = 60000;
            os_log_type_t v17 = "%{public}s [C%{public}s] Invalid resolver reporting delay %llums, reverting to max value %llums";
LABEL_71:
            os_log_type_t v23 = v16;
            uint32_t v24 = 42;
LABEL_85:
            _os_log_impl(&dword_1830D4000, v23, OS_LOG_TYPE_ERROR, v17, buf, v24);
            goto LABEL_87;
          }
LABEL_86:
          uint64_t v15 = 60000;
          goto LABEL_87;
        }
        uint64_t v16 = __nwlog_obj();
        if (!os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
          goto LABEL_86;
        }
        int v31 = *((_DWORD *)v13 + 85);
        *(_DWORD *)buf = 136446978;
        v76 = "nw_resolver_start_delayed_reporting_timer";
        __int16 v77 = 1024;
        *(_DWORD *)v78 = v31;
        *(_WORD *)&v78[4] = 2048;
        *(void *)&v78[6] = v15;
        *(_WORD *)&v78[14] = 2048;
        uint64_t v15 = 60000;
        *(void *)&v78[16] = 60000;
        os_log_type_t v17 = "%{public}s [R%u] Invalid resolver reporting delay %llums, reverting to max value %llums";
LABEL_84:
        os_log_type_t v23 = v16;
        uint32_t v24 = 38;
        goto LABEL_85;
      }
      uint64_t v15 = 60000;
    }
LABEL_88:
    if (v13[17])
    {
      if ((v3[346] & 0x20) != 0)
      {

        goto LABEL_135;
      }
      if (*((unsigned char *)v13 + 256))
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        nw_endpoint_type_t v32 = (id)gconnectionLogObj;
        if (!os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_116;
        }
        logging_description = nw_endpoint_get_logging_description(*((void **)v3 + 3));
        *(_DWORD *)buf = 136446722;
        v76 = "nw_resolver_start_delayed_reporting_timer";
        __int16 v77 = 2082;
        *(void *)v78 = v13 + 32;
        *(_WORD *)&v78[8] = 2082;
        *(void *)&v78[10] = logging_description;
        v34 = "%{public}s [C%{public}s] Delayed reporting timer already running for %{public}s";
        uint64_t v35 = v32;
        uint32_t v36 = 32;
      }
      else
      {
        nw_endpoint_type_t v32 = __nwlog_obj();
        if (!os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
        {
LABEL_116:

LABEL_135:
          char v11 = 1;
          goto LABEL_49;
        }
        int v47 = *((_DWORD *)v13 + 85);
        v48 = nw_endpoint_get_logging_description(*((void **)v3 + 3));
        *(_DWORD *)buf = 136446722;
        v76 = "nw_resolver_start_delayed_reporting_timer";
        __int16 v77 = 1024;
        *(_DWORD *)v78 = v47;
        *(_WORD *)&v78[4] = 2082;
        *(void *)&v78[6] = v48;
        v34 = "%{public}s [R%u] Delayed reporting timer already running for %{public}s";
        uint64_t v35 = v32;
        uint32_t v36 = 28;
      }
      _os_log_impl(&dword_1830D4000, v35, OS_LOG_TYPE_DEBUG, v34, buf, v36);
      goto LABEL_116;
    }
    if ((v3[346] & 0x20) != 0)
    {
LABEL_133:
      v56 = (void *)v13[4];
      v73[0] = MEMORY[0x1E4F143A8];
      v73[1] = 3221225472;
      v73[2] = ___ZL41nw_resolver_start_delayed_reporting_timerP22NWConcrete_nw_resolverbbb_block_invoke;
      v73[3] = &unk_1E524BAA8;
      v57 = v13;
      v74 = v57;
      BOOL source = nw_queue_context_create_source(v56, 2, 3, 0, v73, 0);
      v13[17] = source;
      if (source)
      {
        dispatch_time_t v59 = dispatch_time(0x8000000000000000, 1000000 * v15);
        nw_queue_set_timer_values(source, v59, 0xFFFFFFFFFFFFFFFFLL, 0xF4240uLL);
        nw_queue_activate_source(v13[17]);

        goto LABEL_135;
      }
      v60 = __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      v76 = "nw_resolver_start_delayed_reporting_timer";
      v61 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v71 = 0;
      if (!__nwlog_fault(v61, &type, &v71)) {
        goto LABEL_152;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        v62 = __nwlog_obj();
        os_log_type_t v63 = type;
        if (os_log_type_enabled(v62, type))
        {
          *(_DWORD *)buf = 136446210;
          v76 = "nw_resolver_start_delayed_reporting_timer";
          _os_log_impl(&dword_1830D4000, v62, v63, "%{public}s nw_queue_context_create_source failed", buf, 0xCu);
        }
      }
      else if (v71)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        v62 = __nwlog_obj();
        os_log_type_t v65 = type;
        BOOL v66 = os_log_type_enabled(v62, type);
        if (backtrace_string)
        {
          if (v66)
          {
            *(_DWORD *)buf = 136446466;
            v76 = "nw_resolver_start_delayed_reporting_timer";
            __int16 v77 = 2082;
            *(void *)v78 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v62, v65, "%{public}s nw_queue_context_create_source failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_152;
        }
        if (v66)
        {
          *(_DWORD *)buf = 136446210;
          v76 = "nw_resolver_start_delayed_reporting_timer";
          _os_log_impl(&dword_1830D4000, v62, v65, "%{public}s nw_queue_context_create_source failed, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        v62 = __nwlog_obj();
        os_log_type_t v67 = type;
        if (os_log_type_enabled(v62, type))
        {
          *(_DWORD *)buf = 136446210;
          v76 = "nw_resolver_start_delayed_reporting_timer";
          _os_log_impl(&dword_1830D4000, v62, v67, "%{public}s nw_queue_context_create_source failed, backtrace limit exceeded", buf, 0xCu);
        }
      }

LABEL_152:
      if (v61) {
        free(v61);
      }

      goto LABEL_155;
    }
    if (*((unsigned char *)v13 + 256))
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      uint64_t v37 = (id)gconnectionLogObj;
      if (!os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_132;
      }
      v38 = nw_endpoint_get_logging_description(*((void **)v3 + 3));
      *(_DWORD *)buf = 136448258;
      v76 = "nw_resolver_start_delayed_reporting_timer";
      v39 = " SVCB";
      __int16 v77 = 2082;
      v40 = "";
      *(void *)v78 = v13 + 32;
      if ((v5 & 0x80) != 0) {
        v41 = "";
      }
      else {
        v41 = " SVCB";
      }
      *(_WORD *)&v78[8] = 2082;
      v42 = " IPv6";
      if ((v5 & 0x80) == 0) {
        v39 = "";
      }
      if ((v5 & 0x20A) != 0) {
        v43 = "";
      }
      else {
        v43 = " IPv6";
      }
      if ((v5 & 0x20A) == 0) {
        v42 = "";
      }
      if ((v5 & 0x105) != 0) {
        v40 = " IPv4";
      }
      *(void *)&v78[10] = v40;
      *(_WORD *)&v78[18] = 2082;
      *(void *)&v78[20] = v42;
      *(_WORD *)&v78[28] = 2082;
      *(void *)&v78[30] = v39;
      *(_WORD *)&v78[38] = 2048;
      *(void *)&v78[40] = v15;
      *(_WORD *)&v78[48] = 2082;
      *(void *)&v78[50] = v43;
      *(_WORD *)&v78[58] = 2082;
      *(void *)&v78[60] = v41;
      *(_WORD *)&v78[68] = 2082;
      *(void *)&v78[70] = v38;
      v44 = "%{public}s [C%{public}s] Received%{public}s%{public}s%{public}s result, delaying reporting: waiting %llums o"
            "n%{public}s%{public}s for %{public}s";
      v45 = v37;
      uint32_t v46 = 92;
    }
    else
    {
      uint64_t v37 = __nwlog_obj();
      if (!os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
      {
LABEL_132:

        goto LABEL_133;
      }
      int v49 = *((_DWORD *)v13 + 85);
      v50 = nw_endpoint_get_logging_description(*((void **)v3 + 3));
      v51 = " SVCB";
      *(_DWORD *)buf = 136448258;
      v76 = "nw_resolver_start_delayed_reporting_timer";
      v52 = "";
      __int16 v77 = 1024;
      *(_DWORD *)v78 = v49;
      if ((v5 & 0x80) != 0) {
        v53 = "";
      }
      else {
        v53 = " SVCB";
      }
      *(_WORD *)&v78[4] = 2082;
      v54 = " IPv6";
      if ((v5 & 0x80) == 0) {
        v51 = "";
      }
      if ((v5 & 0x20A) != 0) {
        v55 = "";
      }
      else {
        v55 = " IPv6";
      }
      if ((v5 & 0x20A) == 0) {
        v54 = "";
      }
      if ((v5 & 0x105) != 0) {
        v52 = " IPv4";
      }
      *(void *)&v78[6] = v52;
      *(_WORD *)&v78[14] = 2082;
      *(void *)&v78[16] = v54;
      *(_WORD *)&v78[24] = 2082;
      *(void *)&v78[26] = v51;
      *(_WORD *)&v78[34] = 2048;
      *(void *)&v78[36] = v15;
      *(_WORD *)&v78[44] = 2082;
      *(void *)&v78[46] = v55;
      *(_WORD *)&v78[54] = 2082;
      *(void *)&v78[56] = v53;
      *(_WORD *)&v78[64] = 2082;
      *(void *)&v78[66] = v50;
      v44 = "%{public}s [R%u] Received%{public}s%{public}s%{public}s result, delaying reporting: waiting %llums on%{publi"
            "c}s%{public}s for %{public}s";
      v45 = v37;
      uint32_t v46 = 88;
    }
    _os_log_impl(&dword_1830D4000, v45, OS_LOG_TYPE_DEBUG, v44, buf, v46);
    goto LABEL_132;
  }
LABEL_155:
  char v11 = 0;
LABEL_49:
  if (*((_DWORD *)v3 + 2) == 2)
  {
    if ((nw_parameters_get_use_long_outstanding_queries(*((void **)v3 + 2)) & 1) == 0) {
      nw_resolver_cancel_query_locked((NWConcrete_nw_resolver *)v3, 0);
    }
    nw_resolver_cancel_delayed_reporting_timer((NWConcrete_nw_resolver *)v3);
    nw_resolver_cancel_query_timer((NWConcrete_nw_resolver *)v3);
  }
  if (*((void *)v3 + 12)) {
    char v18 = v11;
  }
  else {
    char v18 = 1;
  }
  if ((v18 & 1) == 0) {
    nw_resolver_update_client(v3, v4);
  }
}

void sub_1831F227C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_parameters_get_use_long_outstanding_queries(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = a1;
  v2 = v1;
  if (v1)
  {
    uint64_t v3 = (v1[96] >> 3) & 1;
    goto LABEL_3;
  }
  __int16 v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v16 = "nw_parameters_get_use_long_outstanding_queries";
  uint32_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v16 = "nw_parameters_get_use_long_outstanding_queries";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v16 = "nw_parameters_get_use_long_outstanding_queries";
          __int16 v17 = 2082;
          char v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v16 = "nw_parameters_get_use_long_outstanding_queries";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v16 = "nw_parameters_get_use_long_outstanding_queries";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

void nw_resolver_cancel_delayed_reporting_timer(NWConcrete_nw_resolver *a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = a1;
  uint64_t v2 = *((void *)v1 + 17);
  if (!v2) {
    goto LABEL_13;
  }
  if ((*((unsigned char *)v1 + 346) & 0x20) != 0)
  {
LABEL_12:
    nw_queue_cancel_source(v2);
    *((void *)v1 + 17) = 0;
    goto LABEL_13;
  }
  if (!*((unsigned char *)v1 + 256))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v3 = (id)gLogObj;
    if (!os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_11;
    }
    int v8 = *((_DWORD *)v1 + 85);
    logging_description = nw_endpoint_get_logging_description(*((void **)v1 + 3));
    int v10 = 136446722;
    BOOL v11 = "nw_resolver_cancel_delayed_reporting_timer";
    __int16 v12 = 1024;
    *(_DWORD *)char v13 = v8;
    *(_WORD *)&v13[4] = 2082;
    *(void *)&v13[6] = logging_description;
    __int16 v5 = "%{public}s [R%u] Cancelling delayed reporting timer for %{public}s";
    uint32_t v6 = v3;
    uint32_t v7 = 28;
    goto LABEL_10;
  }
  if (__nwlog_connection_log::onceToken != -1) {
    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
  }
  uint64_t v3 = (id)gconnectionLogObj;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    id v4 = nw_endpoint_get_logging_description(*((void **)v1 + 3));
    int v10 = 136446722;
    BOOL v11 = "nw_resolver_cancel_delayed_reporting_timer";
    __int16 v12 = 2082;
    *(void *)char v13 = (char *)v1 + 256;
    *(_WORD *)&v13[8] = 2082;
    *(void *)&v13[10] = v4;
    __int16 v5 = "%{public}s [C%{public}s] Cancelling delayed reporting timer for %{public}s";
    uint32_t v6 = v3;
    uint32_t v7 = 32;
LABEL_10:
    _os_log_impl(&dword_1830D4000, v6, OS_LOG_TYPE_DEBUG, v5, (uint8_t *)&v10, v7);
  }
LABEL_11:

  uint64_t v2 = *((void *)v1 + 17);
  if (v2) {
    goto LABEL_12;
  }
LABEL_13:
}

void sub_1831F2740(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_resolver_cancel_query_locked(NWConcrete_nw_resolver *a1, char a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1;
  if (*((void *)v3 + 6))
  {
    dnssd_getaddrinfo_invalidate();
    id v4 = (void *)*((void *)v3 + 6);
    *((void *)v3 + 6) = 0;
  }
  nw_array_apply(*((atomic_uchar **)v3 + 22), (uint64_t)&__block_literal_global_262);
  if (*((void *)v3 + 8))
  {
    *((void *)v3 + 8) = 0;
    *((void *)v3 + 9) = 0;
    dispatch_group_leave(*((dispatch_group_t *)v3 + 5));
  }
  if ((a2 & 1) == 0)
  {
    __int16 v5 = *((void *)v3 + 15);
    if (v5)
    {
      if ((*((unsigned char *)v3 + 346) & 0x20) != 0)
      {
LABEL_17:
        nw_browser_cancel(v5);
        BOOL v11 = (void *)*((void *)v3 + 15);
        *((void *)v3 + 15) = 0;

        goto LABEL_18;
      }
      if (*((unsigned char *)v3 + 256))
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        uint32_t v6 = (id)gconnectionLogObj;
        if (!os_log_type_enabled(v6, OS_LOG_TYPE_INFO)) {
          goto LABEL_16;
        }
        int v12 = 136446466;
        char v13 = "nw_resolver_cancel_query_locked";
        __int16 v14 = 2082;
        uint64_t v15 = (char *)v3 + 256;
        uint32_t v7 = "%{public}s [C%{public}s] Stopping AWDL trigger browser";
        int v8 = v6;
        uint32_t v9 = 22;
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint32_t v6 = (id)gLogObj;
        if (!os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
        {
LABEL_16:

          __int16 v5 = *((void *)v3 + 15);
          goto LABEL_17;
        }
        int v10 = *((_DWORD *)v3 + 85);
        int v12 = 136446466;
        char v13 = "nw_resolver_cancel_query_locked";
        __int16 v14 = 1024;
        LODWORD(v15) = v10;
        uint32_t v7 = "%{public}s [R%u] Stopping AWDL trigger browser";
        int v8 = v6;
        uint32_t v9 = 18;
      }
      _os_log_impl(&dword_1830D4000, v8, OS_LOG_TYPE_INFO, v7, (uint8_t *)&v12, v9);
      goto LABEL_16;
    }
  }
LABEL_18:
}

void sub_1831F2954(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_resolver_update_client(void *a1, void *a2)
{
  uint64_t v105 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  int v5 = *((_DWORD *)v3 + 2);
  uint32_t v6 = _Block_copy(*((const void **)v3 + 12));
  uint32_t v7 = (atomic_uchar *)*((id *)v3 + 18);
  if ((*((unsigned char *)v3 + 346) & 2) == 0
    && nw_endpoint_get_type(*((nw_endpoint_t *)v3 + 3)) == nw_endpoint_type_host
    && *((_DWORD *)v3 + 2) == 2
    && !*((_DWORD *)v3 + 21))
  {
    int v8 = nw_endpoint_copy_association_with_evaluator(*((void **)v3 + 3), *((void **)v3 + 2), 0);
    if (v8)
    {
      if (!v7 || *((void *)v7 + 3) == *((void *)v7 + 2))
      {
        id v20 = nw_protocol_copy_resolver_definition();
        nw_association_set_cached_content_for_protocol(v8, v20, 0, 0);
      }
      else
      {
        int64_t int64_with_default = networkd_settings_get_int64_with_default((const char *)nw_setting_hostname_cache_seconds, 10);
        id v10 = nw_protocol_copy_resolver_definition();
        uint64_t cached_content_for_protocol = nw_association_get_cached_content_for_protocol(v8, v10);

        if (!cached_content_for_protocol)
        {
          uint64_t cached_content_for_protocol = (uint64_t)malloc_type_calloc(1uLL, 0x20uLL, 0xEAFB8F1AuLL);
          if (!cached_content_for_protocol)
          {
            os_log_type_t v67 = __nwlog_obj();
            os_log_type_enabled(v67, OS_LOG_TYPE_ERROR);
            *(_DWORD *)v101 = 136446722;
            *(void *)&v101[4] = "strict_calloc";
            *(_WORD *)&v101[12] = 2048;
            *(void *)&v101[14] = 1;
            *(_WORD *)&v101[22] = 2048;
            *(void *)&v101[24] = 32;
            v68 = (void *)_os_log_send_and_compose_impl();

            if (__nwlog_abort((uint64_t)v68))
            {
              __break(1u);
              return;
            }
            free(v68);
            uint64_t cached_content_for_protocol = 0;
          }
        }
        *(unsigned char *)(cached_content_for_protocol + 24) = *((unsigned char *)v3 + 347) >> 7;
        uint64_t v12 = nw_array_copy((uint64_t)v7);
        char v13 = *(void **)cached_content_for_protocol;
        *(void *)uint64_t cached_content_for_protocol = v12;

        uint64_t v14 = nw_array_copy(*((void *)v3 + 23));
        uint64_t v15 = *(void **)(cached_content_for_protocol + 8);
        *(void *)(cached_content_for_protocol + 8) = v14;

        uint64_t v16 = nw_array_copy(*((void *)v3 + 24));
        __int16 v17 = *(void **)(cached_content_for_protocol + 16);
        *(void *)(cached_content_for_protocol + 16) = v16;

        id v18 = nw_protocol_copy_resolver_definition();
        time_t v19 = time(0);
        nw_association_set_cached_content_for_protocol(v8, v18, cached_content_for_protocol, v19 + int64_with_default);
      }
    }
  }
  if (!v7 || *((void *)v7 + 3) == *((void *)v7 + 2))
  {
    srv_weighted_variant = 0;
    goto LABEL_70;
  }
  os_log_type_t v21 = v3;
  uint64_t v22 = v7;
  unint64_t v23 = (uint64_t)(*((void *)v7 + 3) - *((void *)v7 + 2)) >> 3;
  int64_t v24 = networkd_settings_get_int64_with_default((const char *)nw_setting_tcpconn_first_address_family_count, 2);
  if (v24 <= 0) {
    unint64_t v25 = 2;
  }
  else {
    unint64_t v25 = v24;
  }
  if (v23 > v25 + 1)
  {
    BOOL v26 = nw_array_get_object_at_index((uint64_t)v22, 0);
    if (nw_endpoint_get_type(v26) != nw_endpoint_type_address)
    {
      uint64_t v35 = v22;
LABEL_33:

      goto LABEL_34;
    }
    char address_family = nw_endpoint_get_address_family(v26);
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000;
    buf[24] = 0;
    uint64_t v91 = 0;
    v92 = &v91;
    uint64_t v93 = 0x2020000000;
    uint64_t v94 = 0;
    uint64_t v95 = 0;
    v96 = &v95;
    uint64_t v97 = 0x3032000000;
    v98 = __Block_byref_object_copy__5653;
    v99 = __Block_byref_object_dispose__5654;
    id v100 = 0;
    uint64_t v79 = MEMORY[0x1E4F143A8];
    uint64_t v80 = 3221225472;
    v81 = ___ZL41nw_resolver_create_happy_eyeballs_variantP22NWConcrete_nw_resolverPU22objcproto11OS_nw_array8NSObject_block_invoke;
    v82 = &unk_1E523B2B8;
    char v86 = address_family;
    v83 = buf;
    v84 = &v91;
    v85 = &v95;
    nw_array_apply(v22, (uint64_t)&v79);
    if (*(unsigned char *)(*(void *)&buf[8] + 24) || v92[3] <= v25)
    {
      uint64_t v35 = v22;
LABEL_32:
      _Block_object_dispose(&v95, 8);

      _Block_object_dispose(&v91, 8);
      _Block_object_dispose(buf, 8);
      goto LABEL_33;
    }
    BOOL v71 = nw_array_create();
    if ((*((unsigned char *)v3 + 346) & 0x20) != 0)
    {
LABEL_80:
      *(void *)v101 = MEMORY[0x1E4F143A8];
      *(void *)&v101[8] = 3221225472;
      *(void *)&v101[16] = ___ZL41nw_resolver_create_happy_eyeballs_variantP22NWConcrete_nw_resolverPU22objcproto11OS_nw_array8NSObject_block_invoke_184;
      *(void *)&v101[24] = &unk_1E523B2E0;
      *(void *)&v101[40] = buf;
      *(void *)&v101[56] = v25;
      os_log_type_t v65 = (atomic_uchar *)(id)v71;
      *(void *)&v101[32] = v65;
      *(void *)&v101[48] = &v95;
      nw_array_apply(v22, (uint64_t)v101);
      if (*(unsigned char *)(*(void *)&buf[8] + 24)) {
        BOOL v66 = v22;
      }
      else {
        BOOL v66 = v65;
      }
      uint64_t v35 = v66;

      goto LABEL_32;
    }
    if (*((unsigned char *)v21 + 256))
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      __int16 v28 = (id)gconnectionLogObj;
      if (!os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_79;
      }
      logging_description = nw_endpoint_get_logging_description((void *)v96[5]);
      uint64_t v30 = v92[3];
      *(_DWORD *)v101 = 136447490;
      *(void *)&v101[4] = "nw_resolver_create_happy_eyeballs_variant";
      *(_WORD *)&v101[12] = 2082;
      *(void *)&v101[14] = v21 + 64;
      *(_WORD *)&v101[22] = 2082;
      *(void *)&v101[24] = logging_description;
      *(_WORD *)&v101[32] = 2048;
      *(void *)&v101[34] = v30;
      *(_WORD *)&v101[42] = 2048;
      *(void *)&v101[44] = v25;
      *(_WORD *)&v101[52] = 2048;
      *(void *)&v101[54] = v23;
      int v31 = "%{public}s [C%{public}s] Happy Eyeballs: reordering %{public}s from position %llu to %llu of %llu";
      nw_endpoint_type_t v32 = v28;
      uint32_t v33 = 62;
    }
    else
    {
      __int16 v28 = __nwlog_obj();
      if (!os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
      {
LABEL_79:

        goto LABEL_80;
      }
      int v70 = v21[85];
      os_log_type_t v63 = nw_endpoint_get_logging_description((void *)v96[5]);
      uint64_t v64 = v92[3];
      *(_DWORD *)v101 = 136447490;
      *(void *)&v101[4] = "nw_resolver_create_happy_eyeballs_variant";
      *(_WORD *)&v101[12] = 1024;
      *(_DWORD *)&v101[14] = v70;
      *(_WORD *)&v101[18] = 2082;
      *(void *)&v101[20] = v63;
      *(_WORD *)&v101[28] = 2048;
      *(void *)&v101[30] = v64;
      *(_WORD *)&v101[38] = 2048;
      *(void *)&v101[40] = v25;
      *(_WORD *)&v101[48] = 2048;
      *(void *)&v101[50] = v23;
      int v31 = "%{public}s [R%u] Happy Eyeballs: reordering %{public}s from position %llu to %llu of %llu";
      nw_endpoint_type_t v32 = v28;
      uint32_t v33 = 58;
    }
    _os_log_impl(&dword_1830D4000, v32, OS_LOG_TYPE_DEBUG, v31, v101, v33);
    goto LABEL_79;
  }
  uint64_t v35 = v22;
LABEL_34:

  uint32_t v36 = (void *)*((void *)v21 + 4);
  uint64_t v37 = v21;
  id v38 = v36;
  v39 = v35;
  v40 = v39;
  if (v39 && *((void *)v39 + 3) - *((void *)v39 + 2) > 0xFuLL)
  {
    v72 = nw_array_get_object_at_index((uint64_t)v39, 0);
    uint64_t v95 = 0;
    v96 = &v95;
    uint64_t v97 = 0x3032000000;
    v98 = __Block_byref_object_copy__5653;
    v99 = __Block_byref_object_dispose__5654;
    id v100 = 0;
    uint64_t v91 = 0;
    v92 = &v91;
    LODWORD(v94) = 0;
    uint64_t v93 = 0x2020000000;
    *(void *)v101 = MEMORY[0x1E4F143A8];
    *(void *)&v101[8] = 3221225472;
    *(void *)&v101[16] = ___ZL43nw_resolver_create_prefer_connected_variantP22NWConcrete_nw_resolverPU24objcproto13OS_nw_context8NSObjectPU22objcproto11OS_nw_arrayS1__block_invoke;
    *(void *)&v101[24] = &unk_1E523D188;
    *(void *)&v101[40] = &v95;
    *(void *)&v101[48] = &v91;
    v41 = v38;
    *(void *)&v101[32] = v41;
    nw_array_apply(v40, (uint64_t)v101);
    uint64_t v87 = 0;
    v88 = &v87;
    uint64_t v89 = 0x2020000000;
    uint64_t v90 = 0;
    if (!*((_DWORD *)v92 + 6))
    {
      v42 = (void *)v96[5];
      v96[5] = 0;

      uint64_t v79 = MEMORY[0x1E4F143A8];
      uint64_t v80 = 3221225472;
      v81 = ___ZL43nw_resolver_create_prefer_connected_variantP22NWConcrete_nw_resolverPU24objcproto13OS_nw_context8NSObjectPU22objcproto11OS_nw_arrayS1__block_invoke_2;
      v82 = &unk_1E523D188;
      v84 = &v95;
      v85 = &v87;
      v83 = v41;
      nw_array_apply(v40, (uint64_t)&v79);

      if (!*((_DWORD *)v92 + 6) && !v88[3]) {
        goto LABEL_66;
      }
    }
    if ((void *)v96[5] != v72)
    {
      BOOL v43 = nw_array_create();
      if (v41 && v41[31] == 4 || (*((unsigned char *)v3 + 346) & 0x20) != 0) {
        goto LABEL_61;
      }
      if (v37[256])
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        v44 = (id)gconnectionLogObj;
        if (!os_log_type_enabled(v44, OS_LOG_TYPE_INFO)) {
          goto LABEL_60;
        }
        v45 = nw_endpoint_get_logging_description((void *)v96[5]);
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_resolver_create_prefer_connected_variant";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v37 + 256;
        *(_WORD *)&buf[22] = 2082;
        *(void *)&buf[24] = v45;
        uint32_t v46 = "%{public}s [C%{public}s] Prefer Connected: reordering %{public}s to be the first endpoint";
        int v47 = v44;
        uint32_t v48 = 32;
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v44 = (id)gLogObj;
        if (!os_log_type_enabled(v44, OS_LOG_TYPE_INFO))
        {
LABEL_60:

LABEL_61:
          nw_array_append(v43, (void *)v96[5]);
          *(void *)buf = MEMORY[0x1E4F143A8];
          *(void *)&buf[8] = 3221225472;
          *(void *)&buf[16] = ___ZL43nw_resolver_create_prefer_connected_variantP22NWConcrete_nw_resolverPU24objcproto13OS_nw_context8NSObjectPU22objcproto11OS_nw_arrayS1__block_invoke_185;
          *(void *)&buf[24] = &unk_1E524A2E8;
          v104 = &v95;
          uint32_t v7 = (atomic_uchar *)(id)v43;
          v103 = v7;
          nw_array_apply(v40, (uint64_t)buf);

LABEL_67:
          _Block_object_dispose(&v87, 8);

          _Block_object_dispose(&v91, 8);
          _Block_object_dispose(&v95, 8);

          goto LABEL_68;
        }
        int v69 = *((_DWORD *)v37 + 85);
        v54 = nw_endpoint_get_logging_description((void *)v96[5]);
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_resolver_create_prefer_connected_variant";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v69;
        *(_WORD *)&buf[18] = 2082;
        *(void *)&buf[20] = v54;
        uint32_t v46 = "%{public}s [R%u] Prefer Connected: reordering %{public}s to be the first endpoint";
        int v47 = v44;
        uint32_t v48 = 28;
      }
      _os_log_impl(&dword_1830D4000, v47, OS_LOG_TYPE_INFO, v46, buf, v48);
      goto LABEL_60;
    }
    if (v41 && v41[31] == 4 || (*((unsigned char *)v3 + 346) & 0x20) != 0)
    {
LABEL_66:
      uint32_t v7 = v40;
      goto LABEL_67;
    }
    if (v37[256])
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      int v49 = (id)gconnectionLogObj;
      if (!os_log_type_enabled(v49, OS_LOG_TYPE_INFO)) {
        goto LABEL_65;
      }
      v50 = nw_endpoint_get_logging_description((void *)v96[5]);
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "nw_resolver_create_prefer_connected_variant";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v37 + 256;
      *(_WORD *)&buf[22] = 2082;
      *(void *)&buf[24] = v50;
      v51 = "%{public}s [C%{public}s] Prefer Connected: %{public}s is already the first endpoint";
      v52 = v49;
      uint32_t v53 = 32;
    }
    else
    {
      int v49 = __nwlog_obj();
      if (!os_log_type_enabled(v49, OS_LOG_TYPE_INFO))
      {
LABEL_65:

        goto LABEL_66;
      }
      int v55 = *((_DWORD *)v37 + 85);
      v56 = nw_endpoint_get_logging_description((void *)v96[5]);
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "nw_resolver_create_prefer_connected_variant";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v55;
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = v56;
      v51 = "%{public}s [R%u] Prefer Connected: %{public}s is already the first endpoint";
      v52 = v49;
      uint32_t v53 = 28;
    }
    _os_log_impl(&dword_1830D4000, v52, OS_LOG_TYPE_INFO, v51, buf, v53);
    goto LABEL_65;
  }
  uint32_t v7 = v39;
LABEL_68:

  if (nw_endpoint_get_type(*((nw_endpoint_t *)v37 + 3)) != (nw_endpoint_type_url|nw_endpoint_type_address))
  {
    srv_weighted_variant = v7;
    goto LABEL_71;
  }
  srv_weighted_variant = (void *)nw_resolver_create_srv_weighted_variant(v7);
LABEL_70:

LABEL_71:
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3221225472;
  aBlock[2] = ___ZL25nw_resolver_update_clientP22NWConcrete_nw_resolverU13block_pointerFvvE_block_invoke;
  aBlock[3] = &unk_1E523B290;
  id v57 = v3;
  id v74 = v57;
  id v58 = v6;
  id v76 = v58;
  int v78 = v5;
  id v59 = srv_weighted_variant;
  id v75 = v59;
  id v60 = v4;
  id v77 = v60;
  v61 = _Block_copy(aBlock);
  v62 = *((void *)v57 + 14);
  if (v62) {
    dispatch_async(v62, v61);
  }
  else {
    nw_queue_context_async(*((void **)v57 + 4), v61);
  }
}

void sub_1831F363C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,id a42)
{
  _Block_object_dispose(&a37, 8);
  _Block_object_dispose(&a33, 8);
  _Block_object_dispose((const void *)(v49 - 176), 8);

  _Unwind_Resume(a1);
}

uint64_t nw_array_copy(uint64_t a1)
{
  uint64_t v2 = nw_array_create();
  uint64_t v3 = v2;
  if (a1)
  {
    if (v2 == a1) {
      return a1;
    }
    else {
      std::vector<nw_object_wrapper_t>::__assign_with_size[abi:nn180100]<nw_object_wrapper_t*,nw_object_wrapper_t*>(v2 + 16, *(void ***)(a1 + 16), *(void ***)(a1 + 24), (uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 3);
    }
  }
  return v3;
}

id nw_protocol_copy_resolver_definition(void)
{
  if (nw_protocol_copy_resolver_definition(void)::onceToken != -1) {
    dispatch_once(&nw_protocol_copy_resolver_definition(void)::onceToken, &__block_literal_global_187);
  }
  uint64_t v0 = (void *)nw_protocol_copy_resolver_definition(void)::resolver_definition;

  return v0;
}

void nw_resolver_cancel_query_timer(NWConcrete_nw_resolver *a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = a1;
  uint64_t v2 = *((void *)v1 + 16);
  if (!v2) {
    goto LABEL_13;
  }
  if ((*((unsigned char *)v1 + 346) & 0x20) != 0)
  {
LABEL_12:
    nw_queue_cancel_source(v2);
    *((void *)v1 + 16) = 0;
    goto LABEL_13;
  }
  if (!*((unsigned char *)v1 + 256))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v3 = (id)gLogObj;
    if (!os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_11;
    }
    int v8 = *((_DWORD *)v1 + 85);
    logging_description = nw_endpoint_get_logging_description(*((void **)v1 + 3));
    int v10 = 136446722;
    BOOL v11 = "nw_resolver_cancel_query_timer";
    __int16 v12 = 1024;
    *(_DWORD *)char v13 = v8;
    *(_WORD *)&v13[4] = 2082;
    *(void *)&v13[6] = logging_description;
    int v5 = "%{public}s [R%u] Cancelling query timer for %{public}s";
    uint32_t v6 = v3;
    uint32_t v7 = 28;
    goto LABEL_10;
  }
  if (__nwlog_connection_log::onceToken != -1) {
    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
  }
  uint64_t v3 = (id)gconnectionLogObj;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    id v4 = nw_endpoint_get_logging_description(*((void **)v1 + 3));
    int v10 = 136446722;
    BOOL v11 = "nw_resolver_cancel_query_timer";
    __int16 v12 = 2082;
    *(void *)char v13 = (char *)v1 + 256;
    *(_WORD *)&v13[8] = 2082;
    *(void *)&v13[10] = v4;
    int v5 = "%{public}s [C%{public}s] Cancelling query timer for %{public}s";
    uint32_t v6 = v3;
    uint32_t v7 = 32;
LABEL_10:
    _os_log_impl(&dword_1830D4000, v6, OS_LOG_TYPE_DEBUG, v5, (uint8_t *)&v10, v7);
  }
LABEL_11:

  uint64_t v2 = *((void *)v1 + 16);
  if (v2) {
    goto LABEL_12;
  }
LABEL_13:
}

void sub_1831F39FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::vector<nw_object_wrapper_t>::__assign_with_size[abi:nn180100]<nw_object_wrapper_t*,nw_object_wrapper_t*>(uint64_t a1, void **a2, void **a3, unint64_t a4)
{
  uint32_t v6 = a2;
  uint64_t v8 = *(void *)(a1 + 16);
  uint32_t v9 = *(void **)a1;
  if (a4 > (v8 - *(void *)a1) >> 3)
  {
    if (v9)
    {
      int v10 = *(void **)(a1 + 8);
      BOOL v11 = *(void **)a1;
      if (v10 != v9)
      {
        __int16 v12 = *(void **)(a1 + 8);
        do
        {
          uint64_t v14 = (void *)*--v12;
          char v13 = v14;
          if (v14) {
            os_release(v13);
          }
          *(v10 - 1) = 0;
          int v10 = v12;
        }
        while (v12 != v9);
        BOOL v11 = *(void **)a1;
      }
      *(void *)(a1 + 8) = v9;
      operator delete(v11);
      uint64_t v8 = 0;
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
    }
    if (a4 >> 61) {
      goto LABEL_47;
    }
    uint64_t v21 = v8 >> 2;
    if (v8 >> 2 <= a4) {
      uint64_t v21 = a4;
    }
    BOOL v22 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8;
    unint64_t v23 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v22) {
      unint64_t v23 = v21;
    }
    if (v23 >> 61) {
LABEL_47:
    }
      abort();
    uint64_t v24 = v23;
    unint64_t v25 = operator new(8 * v23);
    *(void *)a1 = v25;
    *(void *)(a1 + 8) = v25;
    *(void *)(a1 + 16) = &v25[v24];
    while (v6 != a3)
    {
      BOOL v26 = *v6;
      if (*v6) {
        BOOL v26 = os_retain(v26);
      }
      *v25++ = v26;
      ++v6;
    }
    *(void *)(a1 + 8) = v25;
    return;
  }
  uint64_t v15 = *(void **)(a1 + 8);
  unint64_t v16 = v15 - v9;
  if (v16 >= a4)
  {
    if (a2 == a3)
    {
      if (v15 == v9)
      {
LABEL_46:
        *(void *)(a1 + 8) = v9;
        return;
      }
    }
    else
    {
      do
      {
        id v20 = *v6;
        if (*v6) {
          id v20 = os_retain(v20);
        }
        *v9++ = v20;
        ++v6;
      }
      while (v6 != a3);
      uint64_t v15 = *(void **)(a1 + 8);
      if (v15 == v9) {
        goto LABEL_46;
      }
    }
    os_log_type_t v29 = v15;
    do
    {
      int v31 = (void *)*--v29;
      uint64_t v30 = v31;
      if (v31) {
        os_release(v30);
      }
      *(v15 - 1) = 0;
      uint64_t v15 = v29;
    }
    while (v29 != v9);
    goto LABEL_46;
  }
  __int16 v17 = &a2[v16];
  if (v15 != v9)
  {
    uint64_t v18 = 8 * v16;
    do
    {
      time_t v19 = *v6;
      if (*v6) {
        time_t v19 = os_retain(v19);
      }
      *v9++ = v19;
      ++v6;
      v18 -= 8;
    }
    while (v18);
    uint32_t v9 = *(void **)(a1 + 8);
  }
  id v27 = v9;
  if (v17 != a3)
  {
    id v27 = v9;
    do
    {
      __int16 v28 = *v17;
      if (*v17) {
        __int16 v28 = os_retain(v28);
      }
      *v27++ = v28;
      ++v17;
    }
    while (v17 != a3);
  }
  *(void *)(a1 + 8) = v27;
}

void nw_quic_connection_finalize_metadata(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = *(void **)(a2 + 8);
    *(void *)(a2 + 8) = 0;

    id v4 = *(void **)(a2 + 16);
    *(void *)(a2 + 16) = 0;

    int v5 = *(void **)(a2 + 24);
    *(void *)(a2 + 24) = 0;

    uint32_t v6 = *(void **)(a2 + 40);
    *(void *)(a2 + 40) = 0;

    uint32_t v7 = *(void **)(a2 + 32);
    *(void *)(a2 + 32) = 0;

    uint64_t v8 = *(void **)(a2 + 48);
    *(void *)(a2 + 48) = 0;

    uint32_t v9 = *(void **)(a2 + 56);
    *(void *)(a2 + 56) = 0;

    int v10 = *(void **)(a2 + 64);
    *(void *)(a2 + 64) = 0;

    BOOL v11 = *(void **)(a2 + 72);
    *(void *)(a2 + 72) = 0;

    __int16 v12 = *(void **)(a2 + 80);
    *(void *)(a2 + 80) = 0;

    char v13 = *(void **)(a2 + 88);
    *(void *)(a2 + 88) = 0;

    uint64_t v14 = *(void **)(a2 + 96);
    *(void *)(a2 + 96) = 0;

    uint64_t v15 = *(void **)(a2 + 104);
    *(void *)(a2 + 104) = 0;

    unint64_t v16 = *(void **)(a2 + 112);
    *(void *)(a2 + 112) = 0;

    __int16 v17 = *(void **)(a2 + 120);
    *(void *)(a2 + 120) = 0;

    uint64_t v18 = *(void **)(a2 + 128);
    *(void *)(a2 + 128) = 0;

    time_t v19 = *(void **)(a2 + 136);
    *(void *)(a2 + 136) = 0;

    id v20 = *(void **)(a2 + 144);
    *(void *)(a2 + 144) = 0;

    uint64_t v21 = *(void **)(a2 + 176);
    *(void *)(a2 + 176) = 0;

    BOOL v22 = *(void **)(a2 + 152);
    *(void *)(a2 + 152) = 0;

    unint64_t v23 = *(void **)(a2 + 160);
    *(void *)(a2 + 160) = 0;

    uint64_t v24 = *(void **)(a2 + 168);
    *(void *)(a2 + 168) = 0;

    unint64_t v25 = *(void **)(a2 + 200);
    *(void *)(a2 + 200) = 0;

    BOOL v26 = *(void **)(a2 + 8);
  }
}

uint64_t nw_socket_remove_input_handler(nw_protocol *a1, nw_protocol *a2, int a3)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v35 = "nw_socket_remove_input_handler";
    uint64_t v18 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    char v32 = 0;
    if (!__nwlog_fault(v18, type, &v32)) {
      goto LABEL_75;
    }
    if (type[0] != OS_LOG_TYPE_FAULT)
    {
      if (!v32)
      {
        time_t v19 = __nwlog_obj();
        os_log_type_t v20 = type[0];
        if (!os_log_type_enabled(v19, type[0])) {
          goto LABEL_75;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v35 = "nw_socket_remove_input_handler";
        uint64_t v21 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_74;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      time_t v19 = __nwlog_obj();
      os_log_type_t v20 = type[0];
      BOOL v27 = os_log_type_enabled(v19, type[0]);
      if (!backtrace_string)
      {
        if (!v27) {
          goto LABEL_75;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v35 = "nw_socket_remove_input_handler";
        uint64_t v21 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_74;
      }
      if (v27)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v35 = "nw_socket_remove_input_handler";
        __int16 v36 = 2082;
        uint64_t v37 = backtrace_string;
        __int16 v28 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_57:
        _os_log_impl(&dword_1830D4000, v19, v20, v28, buf, 0x16u);
      }
LABEL_58:
      free(backtrace_string);
      goto LABEL_75;
    }
    time_t v19 = __nwlog_obj();
    os_log_type_t v20 = type[0];
    if (!os_log_type_enabled(v19, type[0])) {
      goto LABEL_75;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v35 = "nw_socket_remove_input_handler";
    uint64_t v21 = "%{public}s called with null protocol";
LABEL_74:
    _os_log_impl(&dword_1830D4000, v19, v20, v21, buf, 0xCu);
LABEL_75:
    if (v18) {
      free(v18);
    }
    return 0;
  }
  if (a1->handle != &nw_protocol_ref_counted_handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v35 = "nw_socket_remove_input_handler";
    uint64_t v18 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    char v32 = 0;
    if (!__nwlog_fault(v18, type, &v32)) {
      goto LABEL_75;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      time_t v19 = __nwlog_obj();
      os_log_type_t v20 = type[0];
      if (!os_log_type_enabled(v19, type[0])) {
        goto LABEL_75;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v35 = "nw_socket_remove_input_handler";
      uint64_t v21 = "%{public}s called with null socket_handler";
      goto LABEL_74;
    }
    if (!v32)
    {
      time_t v19 = __nwlog_obj();
      os_log_type_t v20 = type[0];
      if (!os_log_type_enabled(v19, type[0])) {
        goto LABEL_75;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v35 = "nw_socket_remove_input_handler";
      uint64_t v21 = "%{public}s called with null socket_handler, backtrace limit exceeded";
      goto LABEL_74;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    time_t v19 = __nwlog_obj();
    os_log_type_t v20 = type[0];
    BOOL v29 = os_log_type_enabled(v19, type[0]);
    if (backtrace_string)
    {
      if (v29)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v35 = "nw_socket_remove_input_handler";
        __int16 v36 = 2082;
        uint64_t v37 = backtrace_string;
        __int16 v28 = "%{public}s called with null socket_handler, dumping backtrace:%{public}s";
        goto LABEL_57;
      }
      goto LABEL_58;
    }
    if (!v29) {
      goto LABEL_75;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v35 = "nw_socket_remove_input_handler";
    uint64_t v21 = "%{public}s called with null socket_handler, no backtrace";
    goto LABEL_74;
  }
  if (a2)
  {
    if (a2->output_handler == a1)
    {
      callbacks = a1[1].callbacks;
      if (callbacks)
      {
        uint32_t v7 = (nw_protocol_callbacks *)((char *)callbacks - 1);
        a1[1].callbacks = v7;
        if (!v7)
        {
          uint64_t v8 = *(void (***)(void))a1[1].flow_id;
          if (v8)
          {
            *(void *)a1[1].flow_id = 0;
            v8[2](v8);
            _Block_release(v8);
          }
          if (a1[1].flow_id[8])
          {
            uint32_t v9 = *(const void **)a1[1].flow_id;
            if (v9) {
              _Block_release(v9);
            }
          }
          free(a1);
        }
      }
      a2->output_handler = 0;
    }
    goto LABEL_14;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v35 = "__nw_protocol_get_output_handler";
  BOOL v22 = (char *)_os_log_send_and_compose_impl();
  type[0] = OS_LOG_TYPE_ERROR;
  char v32 = 0;
  if (__nwlog_fault(v22, type, &v32))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      unint64_t v23 = __nwlog_obj();
      os_log_type_t v24 = type[0];
      if (!os_log_type_enabled(v23, type[0])) {
        goto LABEL_80;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v35 = "__nw_protocol_get_output_handler";
      unint64_t v25 = "%{public}s called with null protocol";
      goto LABEL_79;
    }
    if (!v32)
    {
      unint64_t v23 = __nwlog_obj();
      os_log_type_t v24 = type[0];
      if (!os_log_type_enabled(v23, type[0])) {
        goto LABEL_80;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v35 = "__nw_protocol_get_output_handler";
      unint64_t v25 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_79;
    }
    uint64_t v30 = (char *)__nw_create_backtrace_string();
    unint64_t v23 = __nwlog_obj();
    os_log_type_t v24 = type[0];
    BOOL v31 = os_log_type_enabled(v23, type[0]);
    if (v30)
    {
      if (v31)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v35 = "__nw_protocol_get_output_handler";
        __int16 v36 = 2082;
        uint64_t v37 = v30;
        _os_log_impl(&dword_1830D4000, v23, v24, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v30);
      goto LABEL_80;
    }
    if (v31)
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v35 = "__nw_protocol_get_output_handler";
      unint64_t v25 = "%{public}s called with null protocol, no backtrace";
LABEL_79:
      _os_log_impl(&dword_1830D4000, v23, v24, v25, buf, 0xCu);
    }
  }
LABEL_80:
  if (v22) {
    free(v22);
  }
LABEL_14:
  if ((nw_protocol *)a1[2].identifier != a2) {
    return 0;
  }
  BOOL v11 = &a1[6].flow_id[13];
  if ((*(_WORD *)&a1[6].flow_id[13] & 0x44) == 4 && LODWORD(a1[4].identifier) == 2)
  {
    *(void *)os_log_type_t type = 1;
    if (setsockopt(*(_DWORD *)&a1[4].flow_id[12], 0xFFFF, 128, type, 8u) < 0)
    {
      int v12 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      char v13 = gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446722;
        uint64_t v35 = "nw_protocol_socket_reset_linger";
        __int16 v36 = 2080;
        uint64_t v37 = (char *)&a1[6].identifier + 4;
        __int16 v38 = 1024;
        int v39 = v12;
        _os_log_impl(&dword_1830D4000, v13, OS_LOG_TYPE_ERROR, "%{public}s %s setsockopt SO_LINGER failed %{darwin.errno}d", buf, 0x1Cu);
      }
    }
  }
  nw_socket_cancel_input_source((uint64_t)&a1[1].output_handler);
  uint64_t v14 = a1[3].callbacks;
  if (v14)
  {
    nw_queue_cancel_source((uint64_t)a1[3].callbacks);
    a1[3].callbacks = 0;
    if ((*(_WORD *)v11 & 0x800) == 0)
    {
      nw_queue_resume_source((uint64_t)v14);
      *(_WORD *)v11 |= 0x800u;
    }
  }
  uint64_t v15 = *(void *)a1[3].flow_id;
  if (v15)
  {
    nw_queue_cancel_source(v15);
    *(void *)a1[3].flow_id = 0;
  }
  a1[2].identifier = 0;
  if (a3)
  {
    nw_protocol_socket_cancel((uint64_t)&a1[1].output_handler);
    if ((uint64_t)a1[3].handle)
    {
      output_handler = a1[3].output_handler;
      if (output_handler) {
        os_release(output_handler);
      }
    }
    a1[3].output_handler = 0;
    if ((uint64_t)a1[2].handle)
    {
      __int16 v17 = a1[2].output_handler;
      if (v17) {
        os_release(v17);
      }
    }
    a1[2].output_handler = 0;
    nw_protocol_destroy((uint64_t)&a1[1].output_handler, 0);
  }
  return 1;
}

void nw_queue_cancel_source(uint64_t a1)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v2 = *(NSObject **)a1;
    if (v2)
    {
      dispatch_set_context(v2, 0);
      uint64_t v3 = *(NSObject **)a1;
      dispatch_source_cancel(v3);
    }
    else
    {
      id v4 = *(void **)(a1 + 8);
      if (v4 && (int v5 = *(void **)(a1 + 16)) != 0)
      {
        if (*(unsigned char *)(a1 + 48)) {
          nw_context_reset_timer_block_with_time(v4, a1, -1, v5);
        }
        else {
          nw_context_dequeue_source_block(v4, *(void **)(a1 + 16));
        }
        id v7 = *(id *)(a1 + 8);
        uint64_t v8 = _Block_copy(*(const void **)(a1 + 24));
        uint32_t v9 = *(void **)(a1 + 8);
        *(void *)(a1 + 8) = 0;

        int v10 = *(void **)(a1 + 16);
        *(void *)(a1 + 16) = 0;

        BOOL v11 = *(void **)(a1 + 24);
        *(void *)(a1 + 24) = 0;

        if (v8) {
          nw_context_queue_block(v7, v8);
        }
        v20[0] = MEMORY[0x1E4F143A8];
        v20[1] = 3221225472;
        v20[2] = __nw_queue_cancel_source_block_invoke;
        v20[3] = &__block_descriptor_40_e5_v8__0l;
        v20[4] = a1;
        nw_context_queue_block(v7, v20);
      }
      else if (gLogDatapath)
      {
        uint32_t v6 = __nwlog_obj();
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v24 = "nw_queue_cancel_source";
          _os_log_impl(&dword_1830D4000, v6, OS_LOG_TYPE_DEBUG, "%{public}s Cancelled, not cancelling again", buf, 0xCu);
        }
      }
    }
    return;
  }
  int v12 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v24 = "nw_queue_cancel_source";
  char v13 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t v22 = OS_LOG_TYPE_ERROR;
  char v21 = 0;
  if (__nwlog_fault(v13, &v22, &v21))
  {
    if (v22 == OS_LOG_TYPE_FAULT)
    {
      uint64_t v14 = __nwlog_obj();
      os_log_type_t v15 = v22;
      if (os_log_type_enabled(v14, v22))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v24 = "nw_queue_cancel_source";
        _os_log_impl(&dword_1830D4000, v14, v15, "%{public}s called with null source", buf, 0xCu);
      }
    }
    else if (v21)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v14 = __nwlog_obj();
      os_log_type_t v17 = v22;
      BOOL v18 = os_log_type_enabled(v14, v22);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v24 = "nw_queue_cancel_source";
          __int16 v25 = 2082;
          BOOL v26 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v14, v17, "%{public}s called with null source, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_35;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v24 = "nw_queue_cancel_source";
        _os_log_impl(&dword_1830D4000, v14, v17, "%{public}s called with null source, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v14 = __nwlog_obj();
      os_log_type_t v19 = v22;
      if (os_log_type_enabled(v14, v22))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v24 = "nw_queue_cancel_source";
        _os_log_impl(&dword_1830D4000, v14, v19, "%{public}s called with null source, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_35:
  if (v13) {
    free(v13);
  }
}

void sub_1831F49E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_protocol_destroy(uint64_t a1, void *aBlock)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (atomic_load_explicit((atomic_ullong *volatile)&nw_protocol_get_zombie_callbacks(void)::once_flag, memory_order_acquire) != -1)
    {
      *(void *)buf = &v16;
      *(void *)os_log_type_t type = buf;
      std::__call_once(&nw_protocol_get_zombie_callbacks(void)::once_flag, type, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<nw_protocol_get_zombie_callbacks(void)::$_0 &&>>);
    }
    *(void *)(a1 - 72) = &nw_protocol_get_zombie_callbacks(void)::callbacks;
    if (aBlock) {
      aBlock = _Block_copy(aBlock);
    }
    char v4 = *(unsigned char *)(a1 - 24);
    if (v4)
    {
      int v5 = *(const void **)(a1 - 32);
      if (v5)
      {
        _Block_release(v5);
        char v4 = *(unsigned char *)(a1 - 24);
      }
    }
    *(void *)(a1 - 32) = aBlock;
    *(unsigned char *)(a1 - 24) = v4 | 1;
    if (*(_UNKNOWN **)(a1 - 56) == &nw_protocol_ref_counted_handle)
    {
      uint64_t v6 = *(void *)(a1 - 8);
      if (v6)
      {
        uint64_t v7 = v6 - 1;
        *(void *)(a1 - 8) = v7;
        if (!v7)
        {
          if (aBlock)
          {
            *(void *)(a1 - 32) = 0;
            (*((void (**)(void *))aBlock + 2))(aBlock);
            _Block_release(aBlock);
            if (*(unsigned char *)(a1 - 24))
            {
              uint64_t v8 = *(const void **)(a1 - 32);
              if (v8) {
                _Block_release(v8);
              }
            }
          }
          *(void *)(a1 - 32) = 0;
          uint32_t v9 = (char *)(a1 - 96);
          goto LABEL_18;
        }
      }
    }
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_protocol_destroy";
  int v10 = (const char *)_os_log_send_and_compose_impl();
  type[0] = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (__nwlog_fault(v10, type, &v16))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      BOOL v11 = __nwlog_obj();
      os_log_type_t v12 = type[0];
      if (!os_log_type_enabled(v11, type[0])) {
        goto LABEL_33;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_destroy";
      char v13 = "%{public}s called with null instance";
LABEL_32:
      _os_log_impl(&dword_1830D4000, v11, v12, v13, buf, 0xCu);
      goto LABEL_33;
    }
    if (!v16)
    {
      BOOL v11 = __nwlog_obj();
      os_log_type_t v12 = type[0];
      if (!os_log_type_enabled(v11, type[0])) {
        goto LABEL_33;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_destroy";
      char v13 = "%{public}s called with null instance, backtrace limit exceeded";
      goto LABEL_32;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v11 = __nwlog_obj();
    os_log_type_t v12 = type[0];
    BOOL v15 = os_log_type_enabled(v11, type[0]);
    if (!backtrace_string)
    {
      if (!v15) {
        goto LABEL_33;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_destroy";
      char v13 = "%{public}s called with null instance, no backtrace";
      goto LABEL_32;
    }
    if (v15)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_protocol_destroy";
      __int16 v19 = 2082;
      os_log_type_t v20 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(backtrace_string);
  }
LABEL_33:
  if (v10)
  {
    uint32_t v9 = (char *)v10;
LABEL_18:
    free(v9);
  }
}

void nw_socket_cancel_input_source(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 112);
  if (v1)
  {
    nw_queue_cancel_source(*(void *)(a1 + 112));
    *(void *)(a1 + 112) = 0;
    uint64_t v3 = (_WORD *)(a1 + 301);
    if ((*(_WORD *)(a1 + 301) & 0x400) != 0)
    {
      if (_nw_signposts_once != -1) {
        dispatch_once(&_nw_signposts_once, &__block_literal_global_22_65191);
      }
      if (_nw_signposts_enabled)
      {
        if (kdebug_is_enabled()) {
          kdebug_trace();
        }
      }
      nw_queue_resume_source(v1);
      int v4 = (unsigned __int16)*v3;
      unsigned int v5 = v4 & 0xFFFFFBFF | (*(unsigned __int8 *)(a1 + 303) << 16);
      *uint64_t v3 = v4 & 0xFBFF;
      *(unsigned char *)(a1 + 303) = BYTE2(v5);
    }
  }
}

void nw_protocol_socket_cancel(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 80);
  if (v2)
  {
    os_release(v2);
    *(void *)(a1 + 80) = 0;
  }
  uint64_t v3 = *(void **)(a1 + 88);
  if (v3)
  {
    os_release(v3);
    *(void *)(a1 + 88) = 0;
  }
  int v4 = *(void **)(a1 + 56);
  if (v4)
  {
    nw_tcp_set_callbacks(v4, 0, 0);
    unsigned int v5 = *(void **)(a1 + 56);
    if (v5)
    {
      os_release(v5);
      *(void *)(a1 + 56) = 0;
    }
  }
  uint64_t v6 = *(void **)(a1 + 104);
  if (v6)
  {
    xpc_release(v6);
    *(void *)(a1 + 104) = 0;
  }
  nw_socket_release_frame_array((nw_frame_array_s *)(a1 + 264));
  nw_socket_release_frame_array((nw_frame_array_s *)(a1 + 216));
  nw_socket_release_frame_array((nw_frame_array_s *)(a1 + 232));
  nw_socket_release_frame_array((nw_frame_array_s *)(a1 + 200));
  nw_socket_release_frame_array((nw_frame_array_s *)(a1 + 248));
  nw_socket_release_frame_array((nw_frame_array_s *)(a1 + 280));
  uint64_t v7 = *(void **)(a1 + 144);
  if (v7)
  {
    os_release(v7);
    *(void *)(a1 + 144) = 0;
  }
  *(_WORD *)(a1 + 301) |= 0x4000u;
}

void sub_1831F4F30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)NWConcrete_nw_protocol_metadata;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void nw_quic_stream_finalize_metadata(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    *(void *)a2 = -1;
    uint64_t v3 = *(void **)(a2 + 24);
    *(void *)(a2 + 24) = 0;

    int v4 = *(void **)(a2 + 32);
    *(void *)(a2 + 32) = 0;
  }
  unsigned int v5 = *(void **)(a2 + 24);
}

void nw_tcp_deallocate_metadata(int a1, void *a2)
{
  if (a2) {
    free(a2);
  }
}

void nw_resolver_start_query_timer(NWConcrete_nw_resolver *a1)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = a1;
  uint64_t v2 = v1;
  if (!*((void *)v1 + 16))
  {
    if ((*((unsigned char *)v1 + 346) & 0x20) != 0) {
      goto LABEL_21;
    }
    if (*((unsigned char *)v1 + 256))
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      uint64_t v8 = (id)gconnectionLogObj;
      if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_20;
      }
      logging_description = nw_endpoint_get_logging_description(*((void **)v2 + 3));
      *(_DWORD *)buf = 136446978;
      uint64_t v37 = "nw_resolver_start_query_timer";
      __int16 v38 = 2082;
      *(void *)int v39 = (char *)v2 + 256;
      *(_WORD *)&v39[8] = 1024;
      *(_DWORD *)&v39[10] = 2;
      *(_WORD *)&v39[14] = 2082;
      *(void *)&v39[16] = logging_description;
      int v10 = "%{public}s [C%{public}s] Starting %us query timer to receive all answers for %{public}s";
      BOOL v11 = v8;
      uint32_t v12 = 38;
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v8 = (id)gLogObj;
      if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      {
LABEL_20:

LABEL_21:
        os_log_type_t v17 = (void *)*((void *)v2 + 4);
        v34[0] = MEMORY[0x1E4F143A8];
        v34[1] = 3221225472;
        v34[2] = ___ZL29nw_resolver_start_query_timerP22NWConcrete_nw_resolver_block_invoke;
        v34[3] = &unk_1E524BAA8;
        uint64_t v35 = v2;
        v32[0] = MEMORY[0x1E4F143A8];
        v32[1] = 3221225472;
        v32[2] = ___ZL29nw_resolver_start_query_timerP22NWConcrete_nw_resolver_block_invoke_180;
        v32[3] = &unk_1E524BAA8;
        uint32_t v33 = v35;
        uint64_t source = nw_queue_context_create_source(v17, 2, 3, 0, v34, v32);
        *((void *)v2 + 16) = source;
        if (source)
        {
          dispatch_time_t v19 = dispatch_time(0x8000000000000000, 2000000000);
          if (*(void *)source)
          {
            dispatch_source_set_timer(*(dispatch_source_t *)source, v19, 0xFFFFFFFFFFFFFFFFLL, 0x989680uLL);
          }
          else
          {
            *(void *)(source + 32) = v19;
            *(void *)(source + 40) = -1;
            if (*(unsigned char *)(source + 48) && *(unsigned char *)(source + 49)) {
              nw_queue_source_run_timer(source);
            }
          }
          nw_queue_activate_source(*((void *)v2 + 16));
          goto LABEL_32;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v20 = (id)gLogObj;
        *(_DWORD *)buf = 136446210;
        uint64_t v37 = "nw_resolver_start_query_timer";
        uint64_t v21 = (char *)_os_log_send_and_compose_impl();

        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v30 = 0;
        if (__nwlog_fault(v21, &type, &v30))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            os_log_type_t v22 = (id)gLogObj;
            os_log_type_t v23 = type;
            if (os_log_type_enabled(v22, type))
            {
              *(_DWORD *)buf = 136446210;
              uint64_t v37 = "nw_resolver_start_query_timer";
              _os_log_impl(&dword_1830D4000, v22, v23, "%{public}s nw_queue_context_create_source failed", buf, 0xCu);
            }
          }
          else if (v30)
          {
            backtrace_string = __nw_create_backtrace_string();
            if (backtrace_string)
            {
              __int16 v25 = (char *)backtrace_string;
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              BOOL v26 = (id)gLogObj;
              os_log_type_t v27 = type;
              if (os_log_type_enabled(v26, type))
              {
                *(_DWORD *)buf = 136446466;
                uint64_t v37 = "nw_resolver_start_query_timer";
                __int16 v38 = 2082;
                *(void *)int v39 = v25;
                _os_log_impl(&dword_1830D4000, v26, v27, "%{public}s nw_queue_context_create_source failed, dumping backtrace:%{public}s", buf, 0x16u);
              }

              free(v25);
              if (!v21) {
                goto LABEL_32;
              }
              goto LABEL_31;
            }
            os_log_type_t v22 = __nwlog_obj();
            os_log_type_t v29 = type;
            if (os_log_type_enabled(v22, type))
            {
              *(_DWORD *)buf = 136446210;
              uint64_t v37 = "nw_resolver_start_query_timer";
              _os_log_impl(&dword_1830D4000, v22, v29, "%{public}s nw_queue_context_create_source failed, no backtrace", buf, 0xCu);
            }
          }
          else
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            os_log_type_t v22 = (id)gLogObj;
            os_log_type_t v28 = type;
            if (os_log_type_enabled(v22, type))
            {
              *(_DWORD *)buf = 136446210;
              uint64_t v37 = "nw_resolver_start_query_timer";
              _os_log_impl(&dword_1830D4000, v22, v28, "%{public}s nw_queue_context_create_source failed, backtrace limit exceeded", buf, 0xCu);
            }
          }
        }
        if (!v21)
        {
LABEL_32:

          uint64_t v3 = v35;
          goto LABEL_33;
        }
LABEL_31:
        free(v21);
        goto LABEL_32;
      }
      int v15 = *((_DWORD *)v2 + 85);
      char v16 = nw_endpoint_get_logging_description(*((void **)v2 + 3));
      *(_DWORD *)buf = 136446978;
      uint64_t v37 = "nw_resolver_start_query_timer";
      __int16 v38 = 1024;
      *(_DWORD *)int v39 = v15;
      *(_WORD *)&v39[4] = 1024;
      *(_DWORD *)&v39[6] = 2;
      *(_WORD *)&v39[10] = 2082;
      *(void *)&v39[12] = v16;
      int v10 = "%{public}s [R%u] Starting %us query timer to receive all answers for %{public}s";
      BOOL v11 = v8;
      uint32_t v12 = 34;
    }
    _os_log_impl(&dword_1830D4000, v11, OS_LOG_TYPE_DEBUG, v10, buf, v12);
    goto LABEL_20;
  }
  if ((*((unsigned char *)v1 + 346) & 0x20) == 0)
  {
    if (*((unsigned char *)v1 + 256))
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      uint64_t v3 = (id)gconnectionLogObj;
      if (!os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_33;
      }
      int v4 = nw_endpoint_get_logging_description(*((void **)v2 + 3));
      *(_DWORD *)buf = 136446722;
      uint64_t v37 = "nw_resolver_start_query_timer";
      __int16 v38 = 2082;
      *(void *)int v39 = (char *)v2 + 256;
      *(_WORD *)&v39[8] = 2082;
      *(void *)&v39[10] = v4;
      unsigned int v5 = "%{public}s [C%{public}s] Query timer already running for %{public}s";
      uint64_t v6 = v3;
      uint32_t v7 = 32;
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v3 = (id)gLogObj;
      if (!os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
      {
LABEL_33:

        goto LABEL_34;
      }
      int v13 = *((_DWORD *)v2 + 85);
      uint64_t v14 = nw_endpoint_get_logging_description(*((void **)v2 + 3));
      *(_DWORD *)buf = 136446722;
      uint64_t v37 = "nw_resolver_start_query_timer";
      __int16 v38 = 1024;
      *(_DWORD *)int v39 = v13;
      *(_WORD *)&v39[4] = 2082;
      *(void *)&v39[6] = v14;
      unsigned int v5 = "%{public}s [R%u] Query timer already running for %{public}s";
      uint64_t v6 = v3;
      uint32_t v7 = 28;
    }
    _os_log_impl(&dword_1830D4000, v6, OS_LOG_TYPE_DEBUG, v5, buf, v7);
    goto LABEL_33;
  }
LABEL_34:
}

void sub_1831F56CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_flow_protocol_release(void *a1)
{
  nw_endpoint_flow_cleanup_protocol(0, (uint64_t)a1, 1);
  uint64_t v2 = (void *)a1[23];
  a1[23] = 0;

  free(a1);
}

void nw_endpoint_handler_cancel_read_write_requests(void *a1, void *a2)
{
  uint64_t v75 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1;
  id v4 = a2;
  if (!v3)
  {
    int v39 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v62 = "nw_endpoint_handler_cancel_read_write_requests";
    os_log_type_t v28 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v59 = 0;
    if (!__nwlog_fault(v28, &type, &v59)) {
      goto LABEL_44;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v40 = __nwlog_obj();
      os_log_type_t v41 = type;
      if (os_log_type_enabled(v40, type))
      {
        *(_DWORD *)buf = 136446210;
        v62 = "nw_endpoint_handler_cancel_read_write_requests";
        _os_log_impl(&dword_1830D4000, v40, v41, "%{public}s called with null handler", buf, 0xCu);
      }
    }
    else
    {
      if (v59)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v29 = __nwlog_obj();
        os_log_type_t v47 = type;
        BOOL v48 = os_log_type_enabled(v29, type);
        if (!backtrace_string)
        {
          if (v48)
          {
            *(_DWORD *)buf = 136446210;
            v62 = "nw_endpoint_handler_cancel_read_write_requests";
            _os_log_impl(&dword_1830D4000, v29, v47, "%{public}s called with null handler, no backtrace", buf, 0xCu);
          }
          goto LABEL_43;
        }
        if (v48)
        {
          *(_DWORD *)buf = 136446466;
          v62 = "nw_endpoint_handler_cancel_read_write_requests";
          __int16 v63 = 2082;
          uint64_t v64 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v29, v47, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_44:
        if (!v28) {
          goto LABEL_46;
        }
LABEL_45:
        free(v28);
        goto LABEL_46;
      }
      uint64_t v40 = __nwlog_obj();
      os_log_type_t v53 = type;
      if (os_log_type_enabled(v40, type))
      {
        *(_DWORD *)buf = 136446210;
        v62 = "nw_endpoint_handler_cancel_read_write_requests";
        _os_log_impl(&dword_1830D4000, v40, v53, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
      }
    }

    goto LABEL_44;
  }
  uint64_t mode = v3->mode;
  if (mode == 2)
  {
    uint64_t v6 = nw_endpoint_handler_copy_flow(v3);
    if (v6)
    {
      uint32_t v7 = v3;
      id v58 = v6;
      uint64_t v8 = v6;
      id v9 = v4;
      if ((nw_endpoint_handler_get_logging_disabled(v7) & 1) == 0)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        int v10 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
        {
          id v56 = v4;
          id v57 = v3;
          id_string = nw_endpoint_handler_get_id_string(v7);
          uint32_t v12 = nw_endpoint_handler_dry_run_string(v7);
          id v55 = v9;
          nw_endpoint_t v13 = nw_endpoint_handler_copy_endpoint(v7);
          logging_description = nw_endpoint_get_logging_description(v13);
          int v15 = nw_endpoint_handler_state_string(v7);
          char v16 = nw_endpoint_handler_mode_string(v7);
          id v17 = nw_endpoint_handler_copy_current_path(v7);
          *(_DWORD *)buf = 136447746;
          v62 = "nw_flow_cancel_read_write_requests";
          __int16 v63 = 2082;
          uint64_t v64 = (void *)id_string;
          __int16 v65 = 2082;
          BOOL v66 = v12;
          __int16 v67 = 2082;
          v68 = (void *)logging_description;
          __int16 v69 = 2082;
          int v70 = v15;
          __int16 v71 = 2082;
          v72 = v16;
          __int16 v73 = 2114;
          id v74 = v17;
          _os_log_impl(&dword_1830D4000, v10, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] cancelling read/write requests", buf, 0x48u);

          id v4 = v56;
          uint64_t v3 = v57;
          id v9 = v55;
        }
      }
      id v18 = v8[74];
      id v19 = v8[74];
      v8[74] = 0;

      id v20 = -[NWConcrete_nw_error initWithDomain:code:]([NWConcrete_nw_error alloc], 1, 89);
      nw_read_request_report_error_with_override(v18, v9, v20);

      id v21 = v8[71];
      id v22 = v8[71];
      v8[71] = 0;

      os_log_type_t v23 = -[NWConcrete_nw_error initWithDomain:code:]([NWConcrete_nw_error alloc], 1, 89);
      nw_write_request_report_error_with_override(v21, v9, v23);

      id v24 = v8[86];
      v8[86] = 0;

      __int16 v25 = v58;
LABEL_11:

      goto LABEL_46;
    }
    __int16 v25 = 0;
    v42 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v62 = "nw_endpoint_handler_cancel_read_write_requests";
    BOOL v43 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v59 = 0;
    if (__nwlog_fault(v43, &type, &v59))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v44 = __nwlog_obj();
        os_log_type_t v45 = type;
        if (os_log_type_enabled(v44, type))
        {
          *(_DWORD *)buf = 136446210;
          v62 = "nw_endpoint_handler_cancel_read_write_requests";
          _os_log_impl(&dword_1830D4000, v44, v45, "%{public}s called with null endpoint_flow", buf, 0xCu);
        }
      }
      else
      {
        if (v59)
        {
          uint64_t v49 = (char *)__nw_create_backtrace_string();
          v50 = __nwlog_obj();
          os_log_type_t v51 = type;
          BOOL v52 = os_log_type_enabled(v50, type);
          if (v49)
          {
            if (v52)
            {
              *(_DWORD *)buf = 136446466;
              v62 = "nw_endpoint_handler_cancel_read_write_requests";
              __int16 v63 = 2082;
              uint64_t v64 = v49;
              _os_log_impl(&dword_1830D4000, v50, v51, "%{public}s called with null endpoint_flow, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(v49);
          }
          else
          {
            if (v52)
            {
              *(_DWORD *)buf = 136446210;
              v62 = "nw_endpoint_handler_cancel_read_write_requests";
              _os_log_impl(&dword_1830D4000, v50, v51, "%{public}s called with null endpoint_flow, no backtrace", buf, 0xCu);
            }
          }
          goto LABEL_79;
        }
        v44 = __nwlog_obj();
        os_log_type_t v54 = type;
        if (os_log_type_enabled(v44, type))
        {
          *(_DWORD *)buf = 136446210;
          v62 = "nw_endpoint_handler_cancel_read_write_requests";
          _os_log_impl(&dword_1830D4000, v44, v54, "%{public}s called with null endpoint_flow, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_79:
    if (v43) {
      free(v43);
    }
    goto LABEL_11;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v26 = (id)gLogObj;
  if (mode > 5) {
    os_log_type_t v27 = "unknown-mode";
  }
  else {
    os_log_type_t v27 = off_1E523FAD8[mode];
  }
  *(_DWORD *)buf = 136446722;
  v62 = "nw_endpoint_handler_cancel_read_write_requests";
  __int16 v63 = 2082;
  uint64_t v64 = (void *)v27;
  __int16 v65 = 2082;
  BOOL v66 = "flow";
  os_log_type_t v28 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v59 = 0;
  if (!__nwlog_fault(v28, &type, &v59)) {
    goto LABEL_44;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v29 = (id)gLogObj;
    os_log_type_t v30 = type;
    if (os_log_type_enabled(v29, type))
    {
      if (mode > 5) {
        BOOL v31 = "unknown-mode";
      }
      else {
        BOOL v31 = off_1E523FB08[mode];
      }
      *(_DWORD *)buf = 136446722;
      v62 = "nw_endpoint_handler_cancel_read_write_requests";
      __int16 v63 = 2082;
      uint64_t v64 = (void *)v31;
      __int16 v65 = 2082;
      BOOL v66 = "flow";
      _os_log_impl(&dword_1830D4000, v29, v30, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
    }
LABEL_43:

    goto LABEL_44;
  }
  if (!v59)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v29 = (id)gLogObj;
    os_log_type_t v36 = type;
    if (os_log_type_enabled(v29, type))
    {
      if (mode > 5) {
        uint64_t v37 = "unknown-mode";
      }
      else {
        uint64_t v37 = off_1E523FB08[mode];
      }
      *(_DWORD *)buf = 136446722;
      v62 = "nw_endpoint_handler_cancel_read_write_requests";
      __int16 v63 = 2082;
      uint64_t v64 = (void *)v37;
      __int16 v65 = 2082;
      BOOL v66 = "flow";
      _os_log_impl(&dword_1830D4000, v29, v36, "%{public}s Handler is in mode %{public}s, expected %{public}s, backtrace limit exceeded", buf, 0x20u);
    }
    goto LABEL_43;
  }
  char v32 = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_t v29 = (id)gLogObj;
  os_log_type_t v33 = type;
  BOOL v34 = os_log_type_enabled(v29, type);
  if (!v32)
  {
    if (v34)
    {
      if (mode > 5) {
        __int16 v38 = "unknown-mode";
      }
      else {
        __int16 v38 = off_1E523FB08[mode];
      }
      *(_DWORD *)buf = 136446722;
      v62 = "nw_endpoint_handler_cancel_read_write_requests";
      __int16 v63 = 2082;
      uint64_t v64 = (void *)v38;
      __int16 v65 = 2082;
      BOOL v66 = "flow";
      _os_log_impl(&dword_1830D4000, v29, v33, "%{public}s Handler is in mode %{public}s, expected %{public}s, no backtrace", buf, 0x20u);
    }
    goto LABEL_43;
  }
  if (v34)
  {
    if (mode > 5) {
      uint64_t v35 = "unknown-mode";
    }
    else {
      uint64_t v35 = off_1E523FB08[mode];
    }
    *(_DWORD *)buf = 136446978;
    v62 = "nw_endpoint_handler_cancel_read_write_requests";
    __int16 v63 = 2082;
    uint64_t v64 = (void *)v35;
    __int16 v65 = 2082;
    BOOL v66 = "flow";
    __int16 v67 = 2082;
    v68 = v32;
    _os_log_impl(&dword_1830D4000, v29, v33, "%{public}s Handler is in mode %{public}s, expected %{public}s, dumping backtrace:%{public}s", buf, 0x2Au);
  }

  free(v32);
  if (v28) {
    goto LABEL_45;
  }
LABEL_46:
}

void sub_1831F61C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void nw_endpoint_flow_cleanup_protocol(void *a1, uint64_t a2, int a3)
{
  uint64_t v94 = *MEMORY[0x1E4F143B8];
  id v4 = a1;
  unsigned int v5 = *(void **)(a2 + 176);
  *(void *)(a2 + 176) = 0;

  uint64_t v6 = *(void **)(a2 + 248);
  *(void *)(a2 + 248) = 0;

  uint32_t v7 = *(void **)(a2 + 232);
  *(void *)(a2 + 232) = 0;

  uint64_t v8 = *(void **)(a2 + 240);
  *(void *)(a2 + 240) = 0;

  id v9 = *(void **)(a2 + 224);
  *(void *)(a2 + 224) = 0;

  *(_WORD *)(a2 + 332) &= ~2u;
  int v10 = *(void **)(a2 + 256);
  *(void *)(a2 + 256) = 0;

  BOOL v11 = *(void **)(a2 + 264);
  *(void *)(a2 + 264) = 0;

  *(_WORD *)(a2 + 332) &= 0xFD2Fu;
  v74[0] = MEMORY[0x1E4F143A8];
  v74[1] = 3221225472;
  uint64_t v75 = __nw_endpoint_flow_cleanup_protocol_block_invoke;
  id v76 = &__block_descriptor_40_e31_B16__0__NSObject_OS_nw_frame__8l;
  uint64_t v77 = a2;
  uint64_t v12 = *(void *)(a2 + 272);
  do
  {
    if (!v12) {
      break;
    }
    uint64_t v13 = *(void *)(v12 + 32);
    char v14 = ((uint64_t (*)(void *))v75)(v74);
    uint64_t v12 = v13;
  }
  while ((v14 & 1) != 0);
  int v15 = *(char **)(a2 + 288);
  if (v15)
  {
    v73[0] = MEMORY[0x1E4F143A8];
    v73[1] = 3221225472;
    v73[2] = __nw_endpoint_flow_cleanup_protocol_block_invoke_2;
    v73[3] = &__block_descriptor_40_e23_B16__0__nw_hash_node__8l;
    void v73[4] = a2;
    nw_hash_table_apply(v15, (uint64_t)v73);
    char v16 = *(os_unfair_lock_s **)(a2 + 288);
    if (v16)
    {
      _nw_hash_table_release(v16);
      *(void *)(a2 + 288) = 0;
    }
  }
  *(_WORD *)(a2 + 332) &= ~0x800u;
  uint64_t v17 = *(void *)(a2 + 296);
  do
  {
    if (!v17) {
      break;
    }
    uint64_t v18 = *(void *)(v17 + 16);
    char v19 = __nw_endpoint_flow_cleanup_protocol_block_invoke_69((uint64_t)&__block_literal_global_16920, v17);
    uint64_t v17 = v18;
  }
  while ((v19 & 1) != 0);
  id v20 = v4;
  if (!v4)
  {
    id v20 = (NWConcrete_nw_endpoint_handler *)*(id *)(a2 + 160);
    if (!v20)
    {
      v72 = 0;
      goto LABEL_20;
    }
  }
  v72 = v20;
  id v21 = nw_endpoint_handler_copy_flow(v20);
  if (!v21 || (*((unsigned char *)v21 + 33) & 8) != 0)
  {

    goto LABEL_20;
  }
  BOOL v22 = (*((unsigned char *)v21 + 32) & 1) == 0;

  if (v22)
  {
LABEL_20:
    char v32 = *(void **)(a2 + 216);
    os_log_type_t v33 = -[NWConcrete_nw_error initWithDomain:code:]([NWConcrete_nw_error alloc], 1, 89);
    nw_read_request_report_error_with_override(v32, 0, v33);

    BOOL v34 = *(void **)(a2 + 216);
    *(void *)(a2 + 216) = 0;

    uint64_t v35 = *(void **)(a2 + 200);
    os_log_type_t v36 = -[NWConcrete_nw_error initWithDomain:code:]([NWConcrete_nw_error alloc], 1, 89);
    nw_write_request_report_error_with_override(v35, 0, v36);

    uint64_t v37 = *(void **)(a2 + 200);
    *(void *)(a2 + 200) = 0;

    __int16 v38 = *(void **)(a2 + 208);
    int v39 = -[NWConcrete_nw_error initWithDomain:code:]([NWConcrete_nw_error alloc], 1, 89);
    nw_write_request_report_error_with_override(v38, 0, v39);

    uint64_t v40 = *(void **)(a2 + 208);
    *(void *)(a2 + 208) = 0;

    os_log_type_t v41 = *(void **)(a2 + 192);
    v42 = -[NWConcrete_nw_error initWithDomain:code:]([NWConcrete_nw_error alloc], 1, 89);
    nw_write_request_report_error_with_override(v41, 0, v42);

    BOOL v43 = *(void **)(a2 + 192);
    *(void *)(a2 + 192) = 0;
LABEL_21:

    goto LABEL_22;
  }
  os_log_type_t v23 = *(void **)(a2 + 200);
  id v24 = -[NWConcrete_nw_error initWithDomain:code:]([NWConcrete_nw_error alloc], 1, 89);
  nw_write_request_report_error_with_override(v23, 0, v24);

  __int16 v25 = *(void **)(a2 + 208);
  if (v25)
  {
    id v26 = v25;
    os_log_type_t v27 = nw_write_request_create_clone(v26);
    BOOL v28 = nw_write_request_list_append(0, v27);

    os_log_type_t v29 = (void *)v26[1];
    if (v29)
    {
      do
      {
        os_log_type_t v30 = nw_write_request_create_clone(v29);
        BOOL v31 = nw_write_request_list_append((void *)v28, v30);

        os_log_type_t v29 = (void *)v29[1];
        BOOL v28 = v31;
      }
      while (v29);
    }
    else
    {
      BOOL v31 = v28;
    }

    BOOL v43 = *(void **)(a2 + 200);
    *(void *)(a2 + 200) = v31;
    goto LABEL_21;
  }
LABEL_22:
  v44 = *(void **)(a2 + 312);
  *(void *)(a2 + 312) = 0;

  os_log_type_t v45 = *(void **)(a2 + 320);
  *(void *)(a2 + 320) = 0;

  uint64_t v46 = *(void *)(a2 + 72);
  if (v46)
  {
    uint64_t v47 = *(void *)(v46 + 24);
    if (v47)
    {
      BOOL v48 = *(uint64_t (**)(void, uint64_t))(v47 + 240);
      if (v48)
      {
        if ((v48(*(void *)(a2 + 72), a2 + 64) & 1) == 0
          && (nw_endpoint_handler_get_logging_disabled(*(void **)(a2 + 160)) & 1) == 0)
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          uint64_t v49 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
          {
            id_string = nw_endpoint_handler_get_id_string(*(void **)(a2 + 160));
            os_log_type_t v51 = nw_endpoint_handler_dry_run_string(*(void **)(a2 + 160));
            nw_endpoint_t v52 = nw_endpoint_handler_copy_endpoint(*(void **)(a2 + 160));
            logging_description = nw_endpoint_get_logging_description(v52);
            os_log_type_t v54 = nw_endpoint_handler_state_string(*(void **)(a2 + 160));
            id v55 = nw_endpoint_handler_mode_string(*(void **)(a2 + 160));
            id v56 = nw_endpoint_handler_copy_current_path(*(void **)(a2 + 160));
            uint64_t v57 = *(void *)(v46 + 16);
            *(_DWORD *)buf = 136448002;
            uint64_t v79 = "nw_endpoint_flow_cleanup_protocol";
            __int16 v80 = 2082;
            v81 = id_string;
            __int16 v82 = 2082;
            v83 = v51;
            __int16 v84 = 2082;
            v85 = logging_description;
            __int16 v86 = 2082;
            uint64_t v87 = v54;
            __int16 v88 = 2082;
            uint64_t v89 = v55;
            __int16 v90 = 2114;
            id v91 = v56;
            __int16 v92 = 2082;
            uint64_t v93 = v57;
            _os_log_impl(&dword_1830D4000, v49, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Failed to remove listen handler %{public}s", buf, 0x52u);
          }
        }
      }
    }
  }
  if (a3)
  {
    uint64_t v58 = *(void *)(a2 + 32);
    if (v58)
    {
      uint64_t v59 = *(void *)(v58 + 24);
      if (v59)
      {
        id v60 = *(uint64_t (**)(void))(v59 + 8);
        if (v60)
        {
          if ((v60() & 1) == 0 && (nw_endpoint_handler_get_logging_disabled(*(void **)(a2 + 160)) & 1) == 0)
          {
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
            }
            v61 = (id)gconnectionLogObj;
            if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
            {
              v62 = nw_endpoint_handler_get_id_string(*(void **)(a2 + 160));
              __int16 v63 = nw_endpoint_handler_dry_run_string(*(void **)(a2 + 160));
              nw_endpoint_t v64 = nw_endpoint_handler_copy_endpoint(*(void **)(a2 + 160));
              __int16 v65 = nw_endpoint_get_logging_description(v64);
              BOOL v66 = nw_endpoint_handler_state_string(*(void **)(a2 + 160));
              __int16 v67 = nw_endpoint_handler_mode_string(*(void **)(a2 + 160));
              id v68 = nw_endpoint_handler_copy_current_path(*(void **)(a2 + 160));
              uint64_t v69 = *(void *)(a2 + 16);
              *(_DWORD *)buf = 136448002;
              uint64_t v79 = "nw_endpoint_flow_cleanup_protocol";
              __int16 v80 = 2082;
              v81 = v62;
              __int16 v82 = 2082;
              v83 = v63;
              __int16 v84 = 2082;
              v85 = v65;
              __int16 v86 = 2082;
              uint64_t v87 = v66;
              __int16 v88 = 2082;
              uint64_t v89 = v67;
              __int16 v90 = 2114;
              id v91 = v68;
              __int16 v92 = 2082;
              uint64_t v93 = v69;
              _os_log_impl(&dword_1830D4000, v61, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Failed to remove protocol %{public}s", buf, 0x52u);
            }
          }
        }
      }
    }
    int v70 = *(void **)(a2 + 160);
    *(void *)(a2 + 160) = 0;
  }
}

void sub_1831F6904(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void nw_write_request_report_error_with_override(void *a1, void *a2, void *a3)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  if (v7)
  {
    while (v5)
    {
      id v8 = v5;
      nw_write_request_report(v8, v6, v7);
      id v5 = (id)nw_write_request_list_remove_head(v8);
    }
    goto LABEL_4;
  }
  id v9 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  id v20 = "nw_write_request_report_error_with_override";
  int v10 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v17 = 0;
  if (__nwlog_fault(v10, &type, &v17))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        id v20 = "nw_write_request_report_error_with_override";
        _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s called with null error", buf, 0xCu);
      }
    }
    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v11 = __nwlog_obj();
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          id v20 = "nw_write_request_report_error_with_override";
          __int16 v21 = 2082;
          BOOL v22 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v11, v14, "%{public}s called with null error, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_21;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        id v20 = "nw_write_request_report_error_with_override";
        _os_log_impl(&dword_1830D4000, v11, v14, "%{public}s called with null error, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v11 = __nwlog_obj();
      os_log_type_t v16 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        id v20 = "nw_write_request_report_error_with_override";
        _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s called with null error, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_21:
  if (v10) {
    free(v10);
  }

LABEL_4:
}

void sub_1831F6F54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1831F82F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_read_request_report_error_with_override(void *a1, void *a2, void *a3)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  if (v7)
  {
    while (v5)
    {
      id v8 = (id *)v5;
      objc_storeStrong(v8 + 19, a3);
      nw_read_request_report(v8, v6);
      id v5 = (id)nw_read_request_list_remove_head(v8);
    }
    goto LABEL_4;
  }
  id v9 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  id v20 = "nw_read_request_report_error_with_override";
  int v10 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v17 = 0;
  if (__nwlog_fault(v10, &type, &v17))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        id v20 = "nw_read_request_report_error_with_override";
        _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s called with null error", buf, 0xCu);
      }
    }
    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v11 = __nwlog_obj();
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          id v20 = "nw_read_request_report_error_with_override";
          __int16 v21 = 2082;
          BOOL v22 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v11, v14, "%{public}s called with null error, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_21;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        id v20 = "nw_read_request_report_error_with_override";
        _os_log_impl(&dword_1830D4000, v11, v14, "%{public}s called with null error, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v11 = __nwlog_obj();
      os_log_type_t v16 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        id v20 = "nw_read_request_report_error_with_override";
        _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s called with null error, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_21:
  if (v10) {
    free(v10);
  }

LABEL_4:
}

void sub_1831F86E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1831F91A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,objc_super a22)
{
  a22.receiver = a12;
  a22.super_class = (Class)NWConcrete_nw_endpoint_handler;
  [(_Unwind_Exception *)&a22 dealloc];
  _Unwind_Resume(a1);
}

void nw_socket_internal_disconnect(uint64_t a1)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 48);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 24);
    if (v2)
    {
      uint64_t v3 = *(void (**)(uint64_t, uint64_t))(v2 + 48);
      if (v3)
      {
        uint64_t v4 = a1 - 96;
        uint64_t v5 = *(void *)(a1 + 48);
        v3(v5, v4);
        return;
      }
    }
    __nwlog_obj();
    id v6 = *(const char **)(v1 + 16);
    if (!v6) {
      id v6 = "invalid";
    }
  }
  else
  {
    __nwlog_obj();
    id v6 = "invalid";
  }
  *(_DWORD *)buf = 136446466;
  id v20 = "nw_socket_internal_disconnect";
  __int16 v21 = 2082;
  BOOL v22 = v6;
  id v7 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v17 = 0;
  if (__nwlog_fault(v7, &type, &v17))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (!os_log_type_enabled(v8, type)) {
        goto LABEL_37;
      }
      int v10 = "invalid";
      if (v1 && *(void *)(v1 + 16)) {
        int v10 = *(const char **)(v1 + 16);
      }
      *(_DWORD *)buf = 136446466;
      id v20 = "nw_socket_internal_disconnect";
      __int16 v21 = 2082;
      BOOL v22 = v10;
      BOOL v11 = "%{public}s protocol %{public}s has invalid disconnected callback";
      goto LABEL_36;
    }
    if (!v17)
    {
      id v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (!os_log_type_enabled(v8, type)) {
        goto LABEL_37;
      }
      BOOL v15 = "invalid";
      if (v1 && *(void *)(v1 + 16)) {
        BOOL v15 = *(const char **)(v1 + 16);
      }
      *(_DWORD *)buf = 136446466;
      id v20 = "nw_socket_internal_disconnect";
      __int16 v21 = 2082;
      BOOL v22 = v15;
      BOOL v11 = "%{public}s protocol %{public}s has invalid disconnected callback, backtrace limit exceeded";
      goto LABEL_36;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    id v8 = __nwlog_obj();
    os_log_type_t v9 = type;
    BOOL v13 = os_log_type_enabled(v8, type);
    if (backtrace_string)
    {
      if (v13)
      {
        os_log_type_t v14 = "invalid";
        if (v1 && *(void *)(v1 + 16)) {
          os_log_type_t v14 = *(const char **)(v1 + 16);
        }
        *(_DWORD *)buf = 136446722;
        id v20 = "nw_socket_internal_disconnect";
        __int16 v21 = 2082;
        BOOL v22 = v14;
        __int16 v23 = 2082;
        id v24 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s protocol %{public}s has invalid disconnected callback, dumping backtrace:%{public}s", buf, 0x20u);
      }
      free(backtrace_string);
      goto LABEL_37;
    }
    if (v13)
    {
      os_log_type_t v16 = "invalid";
      if (v1 && *(void *)(v1 + 16)) {
        os_log_type_t v16 = *(const char **)(v1 + 16);
      }
      *(_DWORD *)buf = 136446466;
      id v20 = "nw_socket_internal_disconnect";
      __int16 v21 = 2082;
      BOOL v22 = v16;
      BOOL v11 = "%{public}s protocol %{public}s has invalid disconnected callback, no backtrace";
LABEL_36:
      _os_log_impl(&dword_1830D4000, v8, v9, v11, buf, 0x16u);
    }
  }
LABEL_37:
  if (v7) {
    free(v7);
  }
}

void nw_socket_disconnect(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v18 = "nw_socket_disconnect";
    id v7 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v15 = 0;
    if (!__nwlog_fault(v7, &type, &v15)) {
      goto LABEL_46;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (!os_log_type_enabled(v8, type)) {
        goto LABEL_46;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v18 = "nw_socket_disconnect";
      int v10 = "%{public}s called with null protocol";
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v18 = "nw_socket_disconnect";
          __int16 v19 = 2082;
          id v20 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_46:
        if (!v7) {
          return;
        }
LABEL_47:
        free(v7);
        return;
      }
      if (!v12) {
        goto LABEL_46;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v18 = "nw_socket_disconnect";
      int v10 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      id v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (!os_log_type_enabled(v8, type)) {
        goto LABEL_46;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v18 = "nw_socket_disconnect";
      int v10 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
LABEL_45:
    _os_log_impl(&dword_1830D4000, v8, v9, v10, buf, 0xCu);
    goto LABEL_46;
  }
  if (a1->handle == &nw_protocol_ref_counted_handle)
  {
    char v3 = *(_WORD *)&a1[6].flow_id[13];
    *(_WORD *)&a1[6].flow_id[13] |= 0x40u;
    if ((v3 & 8) != 0 || *(void *)&a1[5].flow_id[8])
    {
      if (v3 < 0)
      {
        p_output_handler = (char *)&a1[1].output_handler;
        nw_socket_update_output_source(p_output_handler);
      }
      else
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        uint64_t v4 = gconnectionLogObj;
        if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v18 = "nw_socket_disconnect";
          __int16 v19 = 2082;
          id v20 = (char *)&a1[6].identifier + 4;
          _os_log_impl(&dword_1830D4000, v4, OS_LOG_TYPE_INFO, "%{public}s %{public}s Outstanding bytes to send, deferring socket disconnect", buf, 0x16u);
        }
        nw_socket_update_output_source((char *)&a1[1].output_handler);
      }
    }
    else
    {
      id v6 = &a1[1].output_handler;
      nw_socket_internal_disconnect((uint64_t)v6);
    }
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v18 = "nw_socket_disconnect";
  id v7 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (!__nwlog_fault(v7, &type, &v15)) {
    goto LABEL_46;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    id v8 = __nwlog_obj();
    os_log_type_t v9 = type;
    if (!os_log_type_enabled(v8, type)) {
      goto LABEL_46;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v18 = "nw_socket_disconnect";
    int v10 = "%{public}s called with null socket_handler";
    goto LABEL_45;
  }
  if (!v15)
  {
    id v8 = __nwlog_obj();
    os_log_type_t v9 = type;
    if (!os_log_type_enabled(v8, type)) {
      goto LABEL_46;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v18 = "nw_socket_disconnect";
    int v10 = "%{public}s called with null socket_handler, backtrace limit exceeded";
    goto LABEL_45;
  }
  BOOL v13 = (char *)__nw_create_backtrace_string();
  id v8 = __nwlog_obj();
  os_log_type_t v9 = type;
  BOOL v14 = os_log_type_enabled(v8, type);
  if (!v13)
  {
    if (!v14) {
      goto LABEL_46;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v18 = "nw_socket_disconnect";
    int v10 = "%{public}s called with null socket_handler, no backtrace";
    goto LABEL_45;
  }
  if (v14)
  {
    *(_DWORD *)buf = 136446466;
    uint64_t v18 = "nw_socket_disconnect";
    __int16 v19 = 2082;
    id v20 = v13;
    _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null socket_handler, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v13);
  if (v7) {
    goto LABEL_47;
  }
}

uint64_t nw_protocol_implementation_remove_input_handler(nw_protocol *a1, nw_protocol *a2, uint64_t a3)
{
  uint64_t v167 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    handle = a1->handle;
    p_output_handler = &a1[1].output_handler;
    if (handle != &nw_protocol_ref_counted_handle) {
      p_output_handler = 0;
    }
    id v8 = p_output_handler;
    os_log_type_t v9 = v8;
    if (handle == &nw_protocol_ref_counted_handle)
    {
      uint64_t v10 = *((void *)v8 + 1);
      if (v10)
      {
        if (*(void *)(v10 + 80))
        {
          if (a2)
          {
            if (a2->output_handler == a1)
            {
              if (a1->handle == &nw_protocol_ref_counted_handle)
              {
                callbacks = a1[1].callbacks;
                if (callbacks)
                {
                  uint64_t v37 = (nw_protocol_callbacks *)((char *)callbacks - 1);
                  a1[1].callbacks = v37;
                  if (!v37)
                  {
                    __int16 v38 = *(void (***)(void))a1[1].flow_id;
                    if (v38)
                    {
                      *(void *)a1[1].flow_id = 0;
                      v38[2](v38);
                      _Block_release(v38);
                    }
                    if (a1[1].flow_id[8])
                    {
                      int v39 = *(const void **)a1[1].flow_id;
                      if (v39) {
                        _Block_release(v39);
                      }
                    }
                    free(a1);
                  }
                }
              }
              a2->output_handler = 0;
              uint64_t v10 = *((void *)v9 + 1);
            }
            if (*(_DWORD *)(v10 + 64) == 3)
            {
              output_handler_context = a2->output_handler_context;
              if (output_handler_context)
              {
                if ((v9[405] & 0x80000000) == 0)
                {
                  if (!gLogDatapath) {
                    goto LABEL_15;
                  }
                  int v78 = __nwlog_obj();
                  if (os_log_type_enabled(v78, OS_LOG_TYPE_DEBUG))
                  {
                    *(_DWORD *)buf = 136446978;
                    *(void *)&uint8_t buf[4] = "nw_protocol_implementation_remove_input_handler";
                    *(_WORD *)&unsigned char buf[12] = 2082;
                    *(void *)&buf[14] = v9 + 407;
                    *(_WORD *)&buf[22] = 2080;
                    v162 = " ";
                    *(_WORD *)v163 = 2048;
                    *(void *)&v163[2] = nw_protocol_flow_for_protocol((NWConcrete_nw_protocol_instance *)v9, (uint64_t)a2);
                    _os_log_impl(&dword_1830D4000, v78, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sRemove input handler for flow %llx", buf, 0x2Au);
                  }
                }
                if (gLogDatapath)
                {
                  uint64_t v79 = __nwlog_obj();
                  if (os_log_type_enabled(v79, OS_LOG_TYPE_DEBUG))
                  {
                    *(_DWORD *)v166 = 136446210;
                    *(void *)&v166[4] = "nw_protocol_finalize_temp_frame_array";
                    _os_log_impl(&dword_1830D4000, v79, OS_LOG_TYPE_DEBUG, "%{public}s called", v166, 0xCu);
                  }
                }
LABEL_15:
                *(void *)buf = MEMORY[0x1E4F143A8];
                *(void *)&buf[8] = 3221225472;
                *(void *)&buf[16] = ___ZL37nw_protocol_finalize_temp_frame_arrayP16nw_frame_array_sb_block_invoke_11434;
                v162 = (const char *)&__block_descriptor_41_e31_B16__0__NSObject_OS_nw_frame__8l;
                uint64_t v12 = output_handler_context[6];
                *(void *)v163 = output_handler_context + 6;
                v163[8] = 0;
                do
                {
                  if (!v12) {
                    break;
                  }
                  uint64_t v13 = *(void *)(v12 + 32);
                  char v14 = (*(uint64_t (**)(unsigned char *))&buf[16])(buf);
                  uint64_t v12 = v13;
                }
                while ((v14 & 1) != 0);
                char v15 = (void *)output_handler_context[5];
                output_handler_context[4] = 0;
                output_handler_context[5] = 0;

                BOOL v16 = nw_hash_table_remove_node(*((void *)v9 + 29), (uint64_t)output_handler_context);
                char v17 = *(void (**)(void))(*(void *)(*((void *)v9 + 1) + 80) + 24);
                if (v17) {
                  v17();
                }
                if (v16)
                {
                  a2->output_handler_context = 0;
                  int v18 = nw_hash_table_count(*((void *)v9 + 29));
                  if (!v18) {
                    goto LABEL_24;
                  }
                  int v19 = v18;
                  *(void *)buf = 0;
                  *(void *)&buf[8] = buf;
                  *(void *)&buf[16] = 0x2020000000;
                  LOBYTE(v162) = 1;
                  id v20 = (char *)*((void *)v9 + 29);
                  v156[0] = MEMORY[0x1E4F143A8];
                  v156[1] = 3221225472;
                  v156[2] = ___ZL47nw_protocol_implementation_remove_input_handlerP11nw_protocolS0_b_block_invoke;
                  v156[3] = &unk_1E523BE48;
                  v156[4] = buf;
                  nw_hash_table_apply(v20, (uint64_t)v156);
                  int v21 = *(unsigned __int8 *)(*(void *)&buf[8] + 24);
                  _Block_object_dispose(buf, 8);
                  if (!v21)
                  {
                    if ((v9[405] & 0x80000000) == 0 && gLogDatapath)
                    {
                      v147 = __nwlog_obj();
                      if (os_log_type_enabled(v147, OS_LOG_TYPE_DEBUG))
                      {
                        *(_DWORD *)buf = 136447234;
                        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_remove_input_handler";
                        *(_WORD *)&unsigned char buf[12] = 2082;
                        *(void *)&buf[14] = v9 + 407;
                        *(_WORD *)&buf[22] = 2080;
                        v162 = " ";
                        *(_WORD *)v163 = 2048;
                        *(void *)&v163[2] = v9;
                        __int16 v164 = 1024;
                        LODWORD(v165) = v19;
                        _os_log_impl(&dword_1830D4000, v147, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sNot destroying instance %p, still have %u input handlers", buf, 0x30u);
                      }
                    }
                    if (a1->default_input_handler == a2)
                    {
                      v44 = (char *)*((void *)v9 + 29);
                      v151[0] = MEMORY[0x1E4F143A8];
                      v151[1] = 3221225472;
                      v151[2] = ___ZL47nw_protocol_implementation_remove_input_handlerP11nw_protocolS0_b_block_invoke_290;
                      v151[3] = &unk_1E523CB38;
                      v153 = a1;
                      v152 = v9;
                      nw_hash_table_apply(v44, (uint64_t)v151);
                    }
                  }
                  else
                  {
LABEL_24:
                    if ((v9[405] & 0x80000000) == 0 && gLogDatapath)
                    {
                      v85 = __nwlog_obj();
                      if (os_log_type_enabled(v85, OS_LOG_TYPE_DEBUG))
                      {
                        *(_DWORD *)buf = 136446722;
                        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_remove_input_handler";
                        *(_WORD *)&unsigned char buf[12] = 2082;
                        *(void *)&buf[14] = v9 + 407;
                        *(_WORD *)&buf[22] = 2080;
                        v162 = " ";
                        _os_log_impl(&dword_1830D4000, v85, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sNo more input handlers on multiplexing connections, scheduling destroy", buf, 0x20u);
                      }
                    }
                    default_input_handler = a1->default_input_handler;
                    if (default_input_handler)
                    {
                      if (default_input_handler->handle == &nw_protocol_ref_counted_handle)
                      {
                        uint64_t v46 = default_input_handler[1].callbacks;
                        if (v46)
                        {
                          uint64_t v47 = (nw_protocol_callbacks *)((char *)v46 - 1);
                          default_input_handler[1].callbacks = v47;
                          if (!v47)
                          {
                            BOOL v48 = *(void (***)(void))default_input_handler[1].flow_id;
                            if (v48)
                            {
                              *(void *)default_input_handler[1].flow_id = 0;
                              v48[2](v48);
                              _Block_release(v48);
                            }
                            if (default_input_handler[1].flow_id[8])
                            {
                              uint64_t v49 = *(const void **)default_input_handler[1].flow_id;
                              if (v49) {
                                _Block_release(v49);
                              }
                            }
                            free(default_input_handler);
                          }
                        }
                      }
                      a1->default_input_handler = 0;
                    }
                    if ((v9[405] & 0x80000000) == 0 && gLogDatapath)
                    {
                      __int16 v86 = __nwlog_obj();
                      if (os_log_type_enabled(v86, OS_LOG_TYPE_DEBUG))
                      {
                        int v87 = *((_DWORD *)v9 + 40);
                        *(_DWORD *)buf = 136446978;
                        *(void *)&uint8_t buf[4] = "nw_protocol_purge_frame_pool";
                        *(_WORD *)&unsigned char buf[12] = 2082;
                        *(void *)&buf[14] = v9 + 407;
                        *(_WORD *)&buf[22] = 2080;
                        v162 = " ";
                        *(_WORD *)v163 = 1024;
                        *(_DWORD *)&v163[2] = v87;
                        _os_log_impl(&dword_1830D4000, v86, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sPurging %u empty frames", buf, 0x26u);
                      }
                    }
                    *(void *)buf = MEMORY[0x1E4F143A8];
                    *(void *)&buf[8] = 3221225472;
                    *(void *)&buf[16] = ___ZL28nw_protocol_purge_frame_poolP31NWConcrete_nw_protocol_instance_block_invoke;
                    v162 = (const char *)&unk_1E524A298;
                    *(void *)v163 = v9;
                    uint64_t v23 = *((void *)v9 + 21);
                    do
                    {
                      if (!v23) {
                        break;
                      }
                      uint64_t v24 = *(void *)(v23 + 16);
                      char v25 = (*(uint64_t (**)(unsigned char *))&buf[16])(buf);
                      uint64_t v23 = v24;
                    }
                    while ((v25 & 1) != 0);
                    if ((v9[404] & 8) != 0)
                    {
                      nw_protocol_implementation_destroy((NWConcrete_nw_protocol_instance *)v9);
                    }
                    else if ((~v9[402] & 0x18) != 0 || !*((void *)v9 + 3))
                    {
                      if ((v9[405] & 0x80000000) == 0 && gLogDatapath)
                      {
                        v146 = __nwlog_obj();
                        if (os_log_type_enabled(v146, OS_LOG_TYPE_DEBUG))
                        {
                          *(_DWORD *)buf = 136446978;
                          *(void *)&uint8_t buf[4] = "nw_protocol_implementation_remove_input_handler";
                          *(_WORD *)&unsigned char buf[12] = 2082;
                          *(void *)&buf[14] = v9 + 407;
                          *(_WORD *)&buf[22] = 2080;
                          v162 = " ";
                          *(_WORD *)v163 = 2048;
                          *(void *)&v163[2] = v9;
                          _os_log_impl(&dword_1830D4000, v146, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sDestroying instance %p immediately", buf, 0x2Au);
                        }
                      }
                      nw_protocol_implementation_teardown((NWConcrete_nw_protocol_instance *)v9);
                    }
                    else
                    {
                      uint64_t v26 = *((void *)v9 + 4);
                      if (v26)
                      {
                        nw_queue_cancel_source(v26);
                        *((void *)v9 + 4) = 0;
                      }
                      os_log_type_t v27 = (void *)*((void *)v9 + 15);
                      v154[0] = MEMORY[0x1E4F143A8];
                      v154[1] = 3221225472;
                      v154[2] = ___ZL47nw_protocol_implementation_remove_input_handlerP11nw_protocolS0_b_block_invoke_289;
                      v154[3] = &unk_1E524BAA8;
                      BOOL v28 = v9;
                      v155 = v28;
                      *((void *)v9 + 4) = nw_queue_context_create_source(v27, 2, 3, 0, v154, 0);
                      int64_t int64_with_default = networkd_settings_get_int64_with_default((const char *)nw_setting_multiplexing_teardown_delay, 10);
                      uint64_t v30 = *((void *)v9 + 4);
                      dispatch_time_t v31 = dispatch_time(0x8000000000000000, 1000000000 * int64_with_default);
                      nw_queue_set_timer_values(v30, v31, 0xFFFFFFFFFFFFFFFFLL, 1000000 * int64_with_default);
                      nw_queue_activate_source(*((void *)v9 + 4));
                      if ((v9[405] & 0x80000000) == 0 && gLogDatapath)
                      {
                        v149 = __nwlog_obj();
                        if (os_log_type_enabled(v149, OS_LOG_TYPE_DEBUG))
                        {
                          *(_DWORD *)buf = 136447234;
                          *(void *)&uint8_t buf[4] = "nw_protocol_implementation_remove_input_handler";
                          *(_WORD *)&unsigned char buf[12] = 2082;
                          *(void *)&buf[14] = v28 + 407;
                          *(_WORD *)&buf[22] = 2080;
                          v162 = " ";
                          *(_WORD *)v163 = 2048;
                          *(void *)&v163[2] = v28;
                          __int16 v164 = 2048;
                          v165 = (char *)int64_with_default;
                          _os_log_impl(&dword_1830D4000, v149, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sDestroying instance %p after delay of %lld seconds", buf, 0x34u);
                        }
                      }
                    }
                  }
LABEL_255:
                  uint64_t v88 = 1;
LABEL_307:

                  return v88;
                }
                if (v9[405] < 0) {
                  goto LABEL_306;
                }
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                id v32 = (id)gLogObj;
                *(_DWORD *)buf = 136446978;
                *(void *)&uint8_t buf[4] = "nw_protocol_implementation_remove_input_handler";
                *(_WORD *)&unsigned char buf[12] = 2082;
                *(void *)&buf[14] = v9 + 407;
                *(_WORD *)&buf[22] = 2080;
                v162 = " ";
                *(_WORD *)v163 = 2048;
                *(void *)&v163[2] = a2;
                os_log_type_t v33 = (char *)_os_log_send_and_compose_impl();

                v166[0] = 16;
                LOBYTE(v159) = 0;
                if (__nwlog_fault(v33, v166, &v159))
                {
                  if (v166[0] == 17)
                  {
                    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                    networkd_settings_init();
                    BOOL v34 = (id)gLogObj;
                    os_log_type_t v35 = v166[0];
                    if (os_log_type_enabled(v34, (os_log_type_t)v166[0]))
                    {
                      *(_DWORD *)buf = 136446978;
                      *(void *)&uint8_t buf[4] = "nw_protocol_implementation_remove_input_handler";
                      *(_WORD *)&unsigned char buf[12] = 2082;
                      *(void *)&buf[14] = v9 + 407;
                      *(_WORD *)&buf[22] = 2080;
                      v162 = " ";
                      *(_WORD *)v163 = 2048;
                      *(void *)&v163[2] = a2;
                      _os_log_impl(&dword_1830D4000, v34, v35, "%{public}s %{public}s%sFailed to remove protocol node for protocol %p from table", buf, 0x2Au);
                    }
                  }
                  else if ((_BYTE)v159)
                  {
                    backtrace_string = __nw_create_backtrace_string();
                    if (backtrace_string)
                    {
                      os_log_type_t v41 = (char *)backtrace_string;
                      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                      networkd_settings_init();
                      v42 = (id)gLogObj;
                      os_log_type_t v43 = v166[0];
                      if (os_log_type_enabled(v42, (os_log_type_t)v166[0]))
                      {
                        *(_DWORD *)buf = 136447234;
                        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_remove_input_handler";
                        *(_WORD *)&unsigned char buf[12] = 2082;
                        *(void *)&buf[14] = v9 + 407;
                        *(_WORD *)&buf[22] = 2080;
                        v162 = " ";
                        *(_WORD *)v163 = 2048;
                        *(void *)&v163[2] = a2;
                        __int16 v164 = 2082;
                        v165 = v41;
                        _os_log_impl(&dword_1830D4000, v42, v43, "%{public}s %{public}s%sFailed to remove protocol node for protocol %p from table, dumping backtrace:%{public}s", buf, 0x34u);
                      }

                      free(v41);
                      if (!v33) {
                        goto LABEL_306;
                      }
                      goto LABEL_84;
                    }
                    BOOL v34 = __nwlog_obj();
                    os_log_type_t v50 = v166[0];
                    if (os_log_type_enabled(v34, (os_log_type_t)v166[0]))
                    {
                      *(_DWORD *)buf = 136446978;
                      *(void *)&uint8_t buf[4] = "nw_protocol_implementation_remove_input_handler";
                      *(_WORD *)&unsigned char buf[12] = 2082;
                      *(void *)&buf[14] = v9 + 407;
                      *(_WORD *)&buf[22] = 2080;
                      v162 = " ";
                      *(_WORD *)v163 = 2048;
                      *(void *)&v163[2] = a2;
                      _os_log_impl(&dword_1830D4000, v34, v50, "%{public}s %{public}s%sFailed to remove protocol node for protocol %p from table, no backtrace", buf, 0x2Au);
                    }
                  }
                  else
                  {
                    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                    networkd_settings_init();
                    BOOL v34 = (id)gLogObj;
                    os_log_type_t v45 = v166[0];
                    if (os_log_type_enabled(v34, (os_log_type_t)v166[0]))
                    {
                      *(_DWORD *)buf = 136446978;
                      *(void *)&uint8_t buf[4] = "nw_protocol_implementation_remove_input_handler";
                      *(_WORD *)&unsigned char buf[12] = 2082;
                      *(void *)&buf[14] = v9 + 407;
                      *(_WORD *)&buf[22] = 2080;
                      v162 = " ";
                      *(_WORD *)v163 = 2048;
                      *(void *)&v163[2] = a2;
                      _os_log_impl(&dword_1830D4000, v34, v45, "%{public}s %{public}s%sFailed to remove protocol node for protocol %p from table, backtrace limit exceeded", buf, 0x2Au);
                    }
                  }
                  goto LABEL_82;
                }
LABEL_83:
                if (v33) {
LABEL_84:
                }
                  free(v33);
LABEL_306:
                uint64_t v88 = 0;
                goto LABEL_307;
              }
LABEL_302:
              if ((v9[405] & 0x80000000) == 0)
              {
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                v142 = (id)gLogObj;
                if (os_log_type_enabled(v142, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 136446978;
                  *(void *)&uint8_t buf[4] = "nw_protocol_implementation_remove_input_handler";
                  *(_WORD *)&unsigned char buf[12] = 2082;
                  *(void *)&buf[14] = v9 + 407;
                  *(_WORD *)&buf[22] = 2080;
                  v162 = " ";
                  *(_WORD *)v163 = 2048;
                  *(void *)&v163[2] = a2;
                  _os_log_impl(&dword_1830D4000, v142, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sOutput handler context doesn't exist on protocol %p", buf, 0x2Au);
                }
              }
              goto LABEL_306;
            }
LABEL_189:
            if ((v9[405] & 0x80000000) == 0 && gLogDatapath)
            {
              v126 = __nwlog_obj();
              if (os_log_type_enabled(v126, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 136446722;
                *(void *)&uint8_t buf[4] = "nw_protocol_implementation_remove_input_handler";
                *(_WORD *)&unsigned char buf[12] = 2082;
                *(void *)&buf[14] = v9 + 407;
                *(_WORD *)&buf[22] = 2080;
                v162 = " ";
                _os_log_impl(&dword_1830D4000, v126, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sRemove input handler", buf, 0x20u);
              }
            }
            if (a1->default_input_handler != a2) {
              goto LABEL_306;
            }
            if (a2)
            {
              if (a2->handle == &nw_protocol_ref_counted_handle)
              {
                v102 = a2[1].callbacks;
                if (v102)
                {
                  v103 = (nw_protocol_callbacks *)((char *)v102 - 1);
                  a2[1].callbacks = v103;
                  if (!v103)
                  {
                    v104 = *(void (***)(void))a2[1].flow_id;
                    if (v104)
                    {
                      *(void *)a2[1].flow_id = 0;
                      v104[2](v104);
                      _Block_release(v104);
                    }
                    if (a2[1].flow_id[8])
                    {
                      uint64_t v105 = *(const void **)a2[1].flow_id;
                      if (v105) {
                        _Block_release(v105);
                      }
                    }
                    free(a2);
                  }
                }
              }
              a1->default_input_handler = 0;
            }
            if (gLogDatapath)
            {
              v136 = __nwlog_obj();
              if (os_log_type_enabled(v136, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_protocol_finalize_temp_frame_array";
                _os_log_impl(&dword_1830D4000, v136, OS_LOG_TYPE_DEBUG, "%{public}s called", buf, 0xCu);
              }
            }
            *(void *)buf = MEMORY[0x1E4F143A8];
            *(void *)&buf[8] = 3221225472;
            *(void *)&buf[16] = ___ZL37nw_protocol_finalize_temp_frame_arrayP16nw_frame_array_sb_block_invoke_11434;
            v162 = (const char *)&__block_descriptor_41_e31_B16__0__NSObject_OS_nw_frame__8l;
            *(void *)v163 = v9 + 208;
            v163[8] = 0;
            uint64_t v93 = *((void *)v9 + 26);
            do
            {
              if (!v93) {
                break;
              }
              uint64_t v94 = *(void *)(v93 + 32);
              char v95 = (*(uint64_t (**)(unsigned char *))&buf[16])(buf);
              uint64_t v93 = v94;
            }
            while ((v95 & 1) != 0);
            if (gLogDatapath)
            {
              v137 = __nwlog_obj();
              if (os_log_type_enabled(v137, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_protocol_finalize_temp_frame_array";
                _os_log_impl(&dword_1830D4000, v137, OS_LOG_TYPE_DEBUG, "%{public}s called", buf, 0xCu);
              }
            }
            *(void *)buf = MEMORY[0x1E4F143A8];
            *(void *)&buf[8] = 3221225472;
            *(void *)&buf[16] = ___ZL37nw_protocol_finalize_temp_frame_arrayP16nw_frame_array_sb_block_invoke_11434;
            v162 = (const char *)&__block_descriptor_41_e31_B16__0__NSObject_OS_nw_frame__8l;
            *(void *)v163 = v9 + 184;
            v163[8] = 0;
            uint64_t v96 = *((void *)v9 + 23);
            do
            {
              if (!v96) {
                break;
              }
              uint64_t v97 = *(void *)(v96 + 32);
              char v98 = (*(uint64_t (**)(unsigned char *))&buf[16])(buf);
              uint64_t v96 = v97;
            }
            while ((v98 & 1) != 0);
            output_handler = a1->output_handler;
            if (!output_handler)
            {
LABEL_253:
              if (a3) {
                nw_protocol_implementation_teardown((NWConcrete_nw_protocol_instance *)v9);
              }
              goto LABEL_255;
            }
            id v100 = output_handler->handle;
            if (v100 == &nw_protocol_ref_counted_handle)
            {
              v106 = output_handler[1].callbacks;
              if (v106) {
                output_handler[1].callbacks = (nw_protocol_callbacks *)((char *)&v106->add_input_handler + 1);
              }
              char v101 = -1;
            }
            else
            {
              char v101 = 0;
            }
            *(void *)v166 = output_handler;
            v166[8] = v101;
            v107 = a1->handle;
            if (v107 == &nw_protocol_ref_counted_handle)
            {
              v109 = a1[1].callbacks;
              if (v109) {
                a1[1].callbacks = (nw_protocol_callbacks *)((char *)&v109->add_input_handler + 1);
              }
              char v108 = -1;
            }
            else
            {
              char v108 = 0;
            }
            v159 = a1;
            char v160 = v108;
            v110 = output_handler->callbacks;
            if (v110)
            {
              remove_input_handler = (uint64_t (*)(nw_protocol *, nw_protocol *, uint64_t))v110->remove_input_handler;
              if (remove_input_handler)
              {
                char v112 = remove_input_handler(output_handler, a1, a3);
                if (v107 != &nw_protocol_ref_counted_handle) {
                  goto LABEL_226;
                }
                goto LABEL_225;
              }
            }
            v130 = __nwlog_obj();
            name = output_handler->identifier->name;
            *(_DWORD *)buf = 136446722;
            *(void *)&uint8_t buf[4] = "__nw_protocol_remove_input_handler";
            if (!name) {
              name = "invalid";
            }
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = name;
            *(_WORD *)&buf[22] = 2048;
            v162 = (const char *)output_handler;
            v132 = (char *)_os_log_send_and_compose_impl();

            os_log_type_t type = OS_LOG_TYPE_ERROR;
            char v157 = 0;
            if (__nwlog_fault(v132, &type, &v157))
            {
              if (type == OS_LOG_TYPE_FAULT)
              {
                v133 = __nwlog_obj();
                os_log_type_t v134 = type;
                if (os_log_type_enabled(v133, type))
                {
                  v135 = output_handler->identifier->name;
                  if (!v135) {
                    v135 = "invalid";
                  }
                  *(_DWORD *)buf = 136446722;
                  *(void *)&uint8_t buf[4] = "__nw_protocol_remove_input_handler";
                  *(_WORD *)&unsigned char buf[12] = 2082;
                  *(void *)&buf[14] = v135;
                  *(_WORD *)&buf[22] = 2048;
                  v162 = (const char *)output_handler;
                  _os_log_impl(&dword_1830D4000, v133, v134, "%{public}s protocol %{public}s (%p) has invalid remove_input_handler callback", buf, 0x20u);
                }
LABEL_324:

                goto LABEL_325;
              }
              if (!v157)
              {
                v133 = __nwlog_obj();
                os_log_type_t v144 = type;
                if (os_log_type_enabled(v133, type))
                {
                  v145 = output_handler->identifier->name;
                  if (!v145) {
                    v145 = "invalid";
                  }
                  *(_DWORD *)buf = 136446722;
                  *(void *)&uint8_t buf[4] = "__nw_protocol_remove_input_handler";
                  *(_WORD *)&unsigned char buf[12] = 2082;
                  *(void *)&buf[14] = v145;
                  *(_WORD *)&buf[22] = 2048;
                  v162 = (const char *)output_handler;
                  _os_log_impl(&dword_1830D4000, v133, v144, "%{public}s protocol %{public}s (%p) has invalid remove_input_handler callback, backtrace limit exceeded", buf, 0x20u);
                }
                goto LABEL_324;
              }
              v138 = (char *)__nw_create_backtrace_string();
              v133 = __nwlog_obj();
              os_log_type_t v150 = type;
              BOOL v139 = os_log_type_enabled(v133, type);
              if (!v138)
              {
                if (v139)
                {
                  v148 = output_handler->identifier->name;
                  if (!v148) {
                    v148 = "invalid";
                  }
                  *(_DWORD *)buf = 136446722;
                  *(void *)&uint8_t buf[4] = "__nw_protocol_remove_input_handler";
                  *(_WORD *)&unsigned char buf[12] = 2082;
                  *(void *)&buf[14] = v148;
                  *(_WORD *)&buf[22] = 2048;
                  v162 = (const char *)output_handler;
                  _os_log_impl(&dword_1830D4000, v133, v150, "%{public}s protocol %{public}s (%p) has invalid remove_input_handler callback, no backtrace", buf, 0x20u);
                }
                goto LABEL_324;
              }
              if (v139)
              {
                v140 = output_handler->identifier->name;
                if (!v140) {
                  v140 = "invalid";
                }
                *(_DWORD *)buf = 136446978;
                *(void *)&uint8_t buf[4] = "__nw_protocol_remove_input_handler";
                *(_WORD *)&unsigned char buf[12] = 2082;
                *(void *)&buf[14] = v140;
                *(_WORD *)&buf[22] = 2048;
                v162 = (const char *)output_handler;
                *(_WORD *)v163 = 2082;
                *(void *)&v163[2] = v138;
                _os_log_impl(&dword_1830D4000, v133, v150, "%{public}s protocol %{public}s (%p) has invalid remove_input_handler callback, dumping backtrace:%{public}s", buf, 0x2Au);
              }

              free(v138);
            }
LABEL_325:
            if (v132) {
              free(v132);
            }
            char v112 = 0;
            if (v107 != &nw_protocol_ref_counted_handle)
            {
LABEL_226:
              if (v100 == &nw_protocol_ref_counted_handle)
              {
                nw::release_if_needed<nw_protocol *>((uint64_t *)v166);
                if (v112) {
                  goto LABEL_250;
                }
              }
              else if (v112)
              {
LABEL_250:
                v121 = a1->output_handler;
                if (v121)
                {
                  if (v121->handle == &nw_protocol_ref_counted_handle)
                  {
                    v122 = v121[1].callbacks;
                    if (v122)
                    {
                      v123 = (nw_protocol_callbacks *)((char *)v122 - 1);
                      v121[1].callbacks = v123;
                      if (!v123)
                      {
                        v124 = *(void (***)(void))v121[1].flow_id;
                        if (v124)
                        {
                          *(void *)v121[1].flow_id = 0;
                          v124[2](v124);
                          _Block_release(v124);
                        }
                        if (v121[1].flow_id[8])
                        {
                          v125 = *(const void **)v121[1].flow_id;
                          if (v125) {
                            _Block_release(v125);
                          }
                        }
                        free(v121);
                      }
                    }
                  }
                  a1->output_handler = 0;
                }
                goto LABEL_253;
              }
              if (v9[405] < 0) {
                goto LABEL_250;
              }
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              id v113 = (id)gLogObj;
              *(_DWORD *)buf = 136446722;
              *(void *)&uint8_t buf[4] = "nw_protocol_implementation_remove_input_handler";
              *(_WORD *)&unsigned char buf[12] = 2082;
              *(void *)&buf[14] = v9 + 407;
              *(_WORD *)&buf[22] = 2080;
              v162 = " ";
              v114 = (void *)_os_log_send_and_compose_impl();

              v166[0] = 16;
              LOBYTE(v159) = 0;
              if (__nwlog_fault((const char *)v114, v166, &v159))
              {
                if (v166[0] == 17)
                {
                  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                  networkd_settings_init();
                  v115 = (id)gLogObj;
                  os_log_type_t v116 = v166[0];
                  if (os_log_type_enabled(v115, (os_log_type_t)v166[0]))
                  {
                    *(_DWORD *)buf = 136446722;
                    *(void *)&uint8_t buf[4] = "nw_protocol_implementation_remove_input_handler";
                    *(_WORD *)&unsigned char buf[12] = 2082;
                    *(void *)&buf[14] = v9 + 407;
                    *(_WORD *)&buf[22] = 2080;
                    v162 = " ";
                    _os_log_impl(&dword_1830D4000, v115, v116, "%{public}s %{public}s%sUnable to remove output handler", buf, 0x20u);
                  }
                }
                else if ((_BYTE)v159)
                {
                  v117 = (char *)__nw_create_backtrace_string();
                  v115 = __nwlog_obj();
                  os_log_type_t v118 = v166[0];
                  BOOL v119 = os_log_type_enabled(v115, (os_log_type_t)v166[0]);
                  if (v117)
                  {
                    if (v119)
                    {
                      *(_DWORD *)buf = 136446978;
                      *(void *)&uint8_t buf[4] = "nw_protocol_implementation_remove_input_handler";
                      *(_WORD *)&unsigned char buf[12] = 2082;
                      *(void *)&buf[14] = v9 + 407;
                      *(_WORD *)&buf[22] = 2080;
                      v162 = " ";
                      *(_WORD *)v163 = 2082;
                      *(void *)&v163[2] = v117;
                      _os_log_impl(&dword_1830D4000, v115, v118, "%{public}s %{public}s%sUnable to remove output handler, dumping backtrace:%{public}s", buf, 0x2Au);
                    }

                    free(v117);
                    if (!v114) {
                      goto LABEL_250;
                    }
LABEL_249:
                    free(v114);
                    goto LABEL_250;
                  }
                  if (v119)
                  {
                    *(_DWORD *)buf = 136446722;
                    *(void *)&uint8_t buf[4] = "nw_protocol_implementation_remove_input_handler";
                    *(_WORD *)&unsigned char buf[12] = 2082;
                    *(void *)&buf[14] = v9 + 407;
                    *(_WORD *)&buf[22] = 2080;
                    v162 = " ";
                    _os_log_impl(&dword_1830D4000, v115, v118, "%{public}s %{public}s%sUnable to remove output handler, no backtrace", buf, 0x20u);
                  }
                }
                else
                {
                  v115 = __nwlog_obj();
                  os_log_type_t v120 = v166[0];
                  if (os_log_type_enabled(v115, (os_log_type_t)v166[0]))
                  {
                    *(_DWORD *)buf = 136446722;
                    *(void *)&uint8_t buf[4] = "nw_protocol_implementation_remove_input_handler";
                    *(_WORD *)&unsigned char buf[12] = 2082;
                    *(void *)&buf[14] = v9 + 407;
                    *(_WORD *)&buf[22] = 2080;
                    v162 = " ";
                    _os_log_impl(&dword_1830D4000, v115, v120, "%{public}s %{public}s%sUnable to remove output handler, backtrace limit exceeded", buf, 0x20u);
                  }
                }
              }
              if (!v114) {
                goto LABEL_250;
              }
              goto LABEL_249;
            }
LABEL_225:
            nw::release_if_needed<nw_protocol *>((uint64_t *)&v159);
            goto LABEL_226;
          }
          v61 = __nwlog_obj();
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "__nw_protocol_get_output_handler";
          v62 = (char *)_os_log_send_and_compose_impl();

          v166[0] = 16;
          LOBYTE(v159) = 0;
          if (__nwlog_fault(v62, v166, &v159))
          {
            if (v166[0] == 17)
            {
              __int16 v63 = __nwlog_obj();
              os_log_type_t v64 = v166[0];
              if (os_log_type_enabled(v63, (os_log_type_t)v166[0]))
              {
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "__nw_protocol_get_output_handler";
                _os_log_impl(&dword_1830D4000, v63, v64, "%{public}s called with null protocol", buf, 0xCu);
              }
LABEL_180:

              goto LABEL_181;
            }
            if (!(_BYTE)v159)
            {
              __int16 v63 = __nwlog_obj();
              os_log_type_t v84 = v166[0];
              if (os_log_type_enabled(v63, (os_log_type_t)v166[0]))
              {
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "__nw_protocol_get_output_handler";
                _os_log_impl(&dword_1830D4000, v63, v84, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
              }
              goto LABEL_180;
            }
            uint64_t v75 = (char *)__nw_create_backtrace_string();
            __int16 v63 = __nwlog_obj();
            os_log_type_t v76 = v166[0];
            BOOL v77 = os_log_type_enabled(v63, (os_log_type_t)v166[0]);
            if (!v75)
            {
              if (v77)
              {
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "__nw_protocol_get_output_handler";
                _os_log_impl(&dword_1830D4000, v63, v76, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
              }
              goto LABEL_180;
            }
            if (v77)
            {
              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "__nw_protocol_get_output_handler";
              *(_WORD *)&unsigned char buf[12] = 2082;
              *(void *)&buf[14] = v75;
              _os_log_impl(&dword_1830D4000, v63, v76, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(v75);
          }
LABEL_181:
          if (v62) {
            free(v62);
          }
          if (*(_DWORD *)(*((void *)v9 + 1) + 64) != 3) {
            goto LABEL_189;
          }
          uint64_t v89 = __nwlog_obj();
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "__nw_protocol_get_output_handler_context";
          __int16 v90 = (char *)_os_log_send_and_compose_impl();

          v166[0] = 16;
          LOBYTE(v159) = 0;
          if (__nwlog_fault(v90, v166, &v159))
          {
            if (v166[0] == 17)
            {
              id v91 = __nwlog_obj();
              os_log_type_t v92 = v166[0];
              if (os_log_type_enabled(v91, (os_log_type_t)v166[0]))
              {
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "__nw_protocol_get_output_handler_context";
                _os_log_impl(&dword_1830D4000, v91, v92, "%{public}s called with null protocol", buf, 0xCu);
              }
            }
            else if ((_BYTE)v159)
            {
              v127 = (char *)__nw_create_backtrace_string();
              id v91 = __nwlog_obj();
              os_log_type_t v128 = v166[0];
              BOOL v129 = os_log_type_enabled(v91, (os_log_type_t)v166[0]);
              if (v127)
              {
                if (v129)
                {
                  *(_DWORD *)buf = 136446466;
                  *(void *)&uint8_t buf[4] = "__nw_protocol_get_output_handler_context";
                  *(_WORD *)&unsigned char buf[12] = 2082;
                  *(void *)&buf[14] = v127;
                  _os_log_impl(&dword_1830D4000, v91, v128, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
                }

                free(v127);
                goto LABEL_300;
              }
              if (v129)
              {
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "__nw_protocol_get_output_handler_context";
                _os_log_impl(&dword_1830D4000, v91, v128, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
              }
            }
            else
            {
              id v91 = __nwlog_obj();
              os_log_type_t v141 = v166[0];
              if (os_log_type_enabled(v91, (os_log_type_t)v166[0]))
              {
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "__nw_protocol_get_output_handler_context";
                _os_log_impl(&dword_1830D4000, v91, v141, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
              }
            }
          }
LABEL_300:
          if (v90) {
            free(v90);
          }
          goto LABEL_302;
        }
        uint64_t v59 = __nwlog_obj();
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_remove_input_handler";
        os_log_type_t v33 = (char *)_os_log_send_and_compose_impl();

        v166[0] = 16;
        LOBYTE(v159) = 0;
        if (!__nwlog_fault(v33, v166, &v159)) {
          goto LABEL_83;
        }
        if (v166[0] == 17)
        {
          BOOL v34 = __nwlog_obj();
          os_log_type_t v60 = v166[0];
          if (os_log_type_enabled(v34, (os_log_type_t)v166[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_protocol_implementation_remove_input_handler";
            _os_log_impl(&dword_1830D4000, v34, v60, "%{public}s called with null instance->parent_definition->extended_state", buf, 0xCu);
          }
LABEL_82:

          goto LABEL_83;
        }
        if (!(_BYTE)v159)
        {
          BOOL v34 = __nwlog_obj();
          os_log_type_t v83 = v166[0];
          if (os_log_type_enabled(v34, (os_log_type_t)v166[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_protocol_implementation_remove_input_handler";
            _os_log_impl(&dword_1830D4000, v34, v83, "%{public}s called with null instance->parent_definition->extended_state, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_82;
        }
        id v68 = (char *)__nw_create_backtrace_string();
        BOOL v34 = __nwlog_obj();
        os_log_type_t v73 = v166[0];
        BOOL v74 = os_log_type_enabled(v34, (os_log_type_t)v166[0]);
        if (!v68)
        {
          if (v74)
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_protocol_implementation_remove_input_handler";
            _os_log_impl(&dword_1830D4000, v34, v73, "%{public}s called with null instance->parent_definition->extended_state, no backtrace", buf, 0xCu);
          }
          goto LABEL_82;
        }
        if (v74)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_implementation_remove_input_handler";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v68;
          _os_log_impl(&dword_1830D4000, v34, v73, "%{public}s called with null instance->parent_definition->extended_state, dumping backtrace:%{public}s", buf, 0x16u);
        }
      }
      else
      {
        uint64_t v57 = __nwlog_obj();
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_remove_input_handler";
        os_log_type_t v33 = (char *)_os_log_send_and_compose_impl();

        v166[0] = 16;
        LOBYTE(v159) = 0;
        if (!__nwlog_fault(v33, v166, &v159)) {
          goto LABEL_83;
        }
        if (v166[0] == 17)
        {
          BOOL v34 = __nwlog_obj();
          os_log_type_t v58 = v166[0];
          if (os_log_type_enabled(v34, (os_log_type_t)v166[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_protocol_implementation_remove_input_handler";
            _os_log_impl(&dword_1830D4000, v34, v58, "%{public}s called with null instance->parent_definition", buf, 0xCu);
          }
          goto LABEL_82;
        }
        if (!(_BYTE)v159)
        {
          BOOL v34 = __nwlog_obj();
          os_log_type_t v82 = v166[0];
          if (os_log_type_enabled(v34, (os_log_type_t)v166[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_protocol_implementation_remove_input_handler";
            _os_log_impl(&dword_1830D4000, v34, v82, "%{public}s called with null instance->parent_definition, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_82;
        }
        id v68 = (char *)__nw_create_backtrace_string();
        BOOL v34 = __nwlog_obj();
        os_log_type_t v71 = v166[0];
        BOOL v72 = os_log_type_enabled(v34, (os_log_type_t)v166[0]);
        if (!v68)
        {
          if (v72)
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_protocol_implementation_remove_input_handler";
            _os_log_impl(&dword_1830D4000, v34, v71, "%{public}s called with null instance->parent_definition, no backtrace", buf, 0xCu);
          }
          goto LABEL_82;
        }
        if (v72)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_implementation_remove_input_handler";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v68;
          _os_log_impl(&dword_1830D4000, v34, v71, "%{public}s called with null instance->parent_definition, dumping backtrace:%{public}s", buf, 0x16u);
        }
      }
    }
    else
    {
      id v55 = __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_implementation_remove_input_handler";
      os_log_type_t v33 = (char *)_os_log_send_and_compose_impl();

      v166[0] = 16;
      LOBYTE(v159) = 0;
      if (!__nwlog_fault(v33, v166, &v159)) {
        goto LABEL_83;
      }
      if (v166[0] == 17)
      {
        BOOL v34 = __nwlog_obj();
        os_log_type_t v56 = v166[0];
        if (os_log_type_enabled(v34, (os_log_type_t)v166[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_implementation_remove_input_handler";
          _os_log_impl(&dword_1830D4000, v34, v56, "%{public}s called with null instance", buf, 0xCu);
        }
        goto LABEL_82;
      }
      if (!(_BYTE)v159)
      {
        BOOL v34 = __nwlog_obj();
        os_log_type_t v81 = v166[0];
        if (os_log_type_enabled(v34, (os_log_type_t)v166[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_implementation_remove_input_handler";
          _os_log_impl(&dword_1830D4000, v34, v81, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_82;
      }
      id v68 = (char *)__nw_create_backtrace_string();
      BOOL v34 = __nwlog_obj();
      os_log_type_t v69 = v166[0];
      BOOL v70 = os_log_type_enabled(v34, (os_log_type_t)v166[0]);
      if (!v68)
      {
        if (v70)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_implementation_remove_input_handler";
          _os_log_impl(&dword_1830D4000, v34, v69, "%{public}s called with null instance, no backtrace", buf, 0xCu);
        }
        goto LABEL_82;
      }
      if (v70)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_remove_input_handler";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = v68;
        _os_log_impl(&dword_1830D4000, v34, v69, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
      }
    }

    free(v68);
    goto LABEL_83;
  }
  os_log_type_t v51 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_protocol_implementation_remove_input_handler";
  nw_endpoint_t v52 = (char *)_os_log_send_and_compose_impl();

  v166[0] = 16;
  LOBYTE(v159) = 0;
  if (__nwlog_fault(v52, v166, &v159))
  {
    if (v166[0] == 17)
    {
      os_log_type_t v53 = __nwlog_obj();
      os_log_type_t v54 = v166[0];
      if (os_log_type_enabled(v53, (os_log_type_t)v166[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_remove_input_handler";
        _os_log_impl(&dword_1830D4000, v53, v54, "%{public}s called with null protocol", buf, 0xCu);
      }
    }
    else if ((_BYTE)v159)
    {
      __int16 v65 = (char *)__nw_create_backtrace_string();
      os_log_type_t v53 = __nwlog_obj();
      os_log_type_t v66 = v166[0];
      BOOL v67 = os_log_type_enabled(v53, (os_log_type_t)v166[0]);
      if (v65)
      {
        if (v67)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_implementation_remove_input_handler";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v65;
          _os_log_impl(&dword_1830D4000, v53, v66, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v65);
        goto LABEL_166;
      }
      if (v67)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_remove_input_handler";
        _os_log_impl(&dword_1830D4000, v53, v66, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v53 = __nwlog_obj();
      os_log_type_t v80 = v166[0];
      if (os_log_type_enabled(v53, (os_log_type_t)v166[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_remove_input_handler";
        _os_log_impl(&dword_1830D4000, v53, v80, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_166:
  if (v52) {
    free(v52);
  }
  return 0;
}

void sub_1831FBE84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL28nw_protocol_purge_frame_poolP31NWConcrete_nw_protocol_instance_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = v3;
  uint64_t v5 = *((void *)v3 + 2);
  id v6 = (void *)*((void *)v3 + 3);
  if (v5)
  {
    *(void *)(v5 + 24) = v6;
    id v6 = (void *)*((void *)v3 + 3);
  }
  else
  {
    *(void *)(*(void *)(a1 + 32) + 176) = v6;
  }
  void *v6 = v5;
  *((void *)v3 + 2) = 0;
  *((void *)v3 + 3) = 0;
  uint64_t v7 = *(void *)(a1 + 32);
  int v8 = *(_DWORD *)(v7 + 160);
  *(_DWORD *)(v7 + 160) = v8 - 1;
  if (!v8)
  {
    if (gLogDatapath)
    {
      uint64_t v10 = __nwlog_obj();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v11 = *(unsigned int *)(*(void *)(a1 + 32) + 160);
        int v12 = 136446978;
        uint64_t v13 = "nw_protocol_purge_frame_pool_block_invoke";
        __int16 v14 = 2082;
        char v15 = "instance->empty_frame_pool_count";
        __int16 v16 = 2048;
        uint64_t v17 = 1;
        __int16 v18 = 2048;
        uint64_t v19 = v11;
        _os_log_impl(&dword_1830D4000, v10, OS_LOG_TYPE_DEBUG, "%{public}s Underflow: %{public}s, decrement %llu, result %llu", (uint8_t *)&v12, 0x2Au);
      }
    }
    *(_DWORD *)(*(void *)(a1 + 32) + 160) = 0;
  }

  return 1;
}

void nw_endpoint_flow_reset_expected_progress_target(void *a1, uint64_t a2, const unsigned __int8 *a3)
{
  uint64_t v94 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a1;
  id v6 = v5;
  if (!v5)
  {
    v44 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v79 = "nw_endpoint_handler_get_mode";
    os_log_type_t v45 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v76 = 0;
    if (__nwlog_fault(v45, &type, &v76))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v46 = __nwlog_obj();
        os_log_type_t v47 = type;
        if (os_log_type_enabled(v46, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v79 = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_1830D4000, v46, v47, "%{public}s called with null handler", buf, 0xCu);
        }
      }
      else if (v76)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        uint64_t v46 = __nwlog_obj();
        os_log_type_t v49 = type;
        BOOL v50 = os_log_type_enabled(v46, type);
        if (backtrace_string)
        {
          if (v50)
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v79 = "nw_endpoint_handler_get_mode";
            __int16 v80 = 2082;
            os_log_type_t v81 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v46, v49, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_65;
        }
        if (v50)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v79 = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_1830D4000, v46, v49, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        uint64_t v46 = __nwlog_obj();
        os_log_type_t v56 = type;
        if (os_log_type_enabled(v46, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v79 = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_1830D4000, v46, v56, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_65:
    if (v45) {
      free(v45);
    }
    unsigned int mode = 0;
    goto LABEL_68;
  }
  unsigned int mode = v5->mode;

  if (mode == 2)
  {
    int v8 = nw_endpoint_handler_copy_flow(v6);
    os_log_type_t v9 = v8;
    if ((*((unsigned char *)v8 + 32) & 2) == 0)
    {
      os_unfair_lock_lock((os_unfair_lock_t)v8 + 220);
      uint64_t v10 = (void *)*((void *)v9 + 117);
      if (v10)
      {
        uint64_t v11 = v10;
        int v12 = v11;
        int v13 = v11[29];
        if (v13 == 4)
        {
          nw_endpoint_fallback_reset_expected_progress_target(v11, a2);
        }
        else if (v13 == 2)
        {
          nw_endpoint_flow_reset_expected_progress_target(v11, a2, a3);
        }
      }
      dispatch_time_t v31 = (void *)*((void *)v9 + 116);
      if (v31)
      {
        id v32 = v31;
        os_log_type_t v33 = v32;
        int v34 = v32[29];
        if (v34 == 4)
        {
          nw_endpoint_fallback_reset_expected_progress_target(v32, a2);
        }
        else if (v34 == 2)
        {
          nw_endpoint_flow_reset_expected_progress_target(v32, a2, a3);
        }
      }
      os_unfair_lock_unlock((os_unfair_lock_t)v9 + 220);
LABEL_43:

      goto LABEL_102;
    }
    if (nw_endpoint_handler_get_minimize_logging(v6))
    {
      if (nw_endpoint_handler_get_logging_disabled(v6)) {
        goto LABEL_37;
      }
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      __int16 v16 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
      {
        id_string = nw_endpoint_handler_get_id_string(v6);
        loga = nw_endpoint_handler_dry_run_string(v6);
        nw_endpoint_t v51 = nw_endpoint_handler_copy_endpoint(v6);
        logging_description = nw_endpoint_get_logging_description(v51);
        os_log_type_t v53 = nw_endpoint_handler_state_string(v6);
        os_log_type_t v54 = nw_endpoint_handler_mode_string(v6);
        id v55 = nw_endpoint_handler_copy_current_path(v6);
        *(_DWORD *)buf = 136448002;
        uint64_t v79 = "nw_endpoint_flow_reset_expected_progress_target";
        __int16 v80 = 2082;
        os_log_type_t v81 = (void *)id_string;
        __int16 v82 = 2082;
        os_log_type_t v83 = loga;
        __int16 v84 = 2082;
        v85 = (void *)logging_description;
        __int16 v86 = 2082;
        int v87 = v53;
        __int16 v88 = 2082;
        uint64_t v89 = v54;
        __int16 v90 = 2114;
        id v91 = v55;
        __int16 v92 = 2048;
        uint64_t v93 = a2;
        _os_log_impl(&dword_1830D4000, v16, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Resetting progress target to %llu", buf, 0x52u);
      }
    }
    else
    {
      __int16 v14 = v6;
      char v15 = *((unsigned char *)v14 + 268);

      if ((v15 & 0x20) != 0)
      {
LABEL_37:
        *((unsigned char *)v9 + 34) = *((unsigned char *)v9 + 34) & 0xEF | (16 * (a2 != 0));
        *(_OWORD *)((char *)v9 + 1080) = *(_OWORD *)a3;
        uint64_t v37 = (void *)*((void *)v9 + 1);
        if (v37)
        {
          __int16 v38 = v37;
          id v39 = v38[3];

          id v40 = nw_path_copy_parameters(*((void **)v9 + 1));
          nw_connection_report_symptom_internal_on_nw_queue(421898, v39, v40, *((void **)v9 + 1), a2, a3, 0, 0, 0, 0);
        }
        if (*((void *)v9 + 111))
        {
          if (*((char *)v9 + 33) < 0)
          {
            os_log_type_t v41 = v6;
            int state = v41->state;

            if (state == 3)
            {
              os_log_type_t v43 = (void *)*((void *)v9 + 111);
              v75[0] = MEMORY[0x1E4F143A8];
              v75[1] = 3221225472;
              v75[2] = __nw_endpoint_flow_reset_expected_progress_target_block_invoke;
              v75[3] = &__block_descriptor_40_e8_B12__0i8l;
              v75[4] = a2;
              nw_fd_wrapper_get_fd(v43, v75);
            }
          }
        }
        goto LABEL_43;
      }
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      __int16 v16 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
      {
        uint64_t v17 = v14;

        __int16 v18 = v17;
        char v19 = *((unsigned char *)v14 + 268);

        if (v19) {
          uint64_t v20 = "dry-run ";
        }
        else {
          uint64_t v20 = "";
        }
        nw_endpoint_t v21 = nw_endpoint_handler_copy_endpoint(v18);
        BOOL v22 = nw_endpoint_get_logging_description(v21);
        id_str = v17->id_str;
        uint64_t v23 = v18;
        uint64_t v24 = v23;
        uint64_t v25 = v23[30];
        if (v25 > 5) {
          uint64_t v26 = "unknown-state";
        }
        else {
          uint64_t v26 = off_1E523FB38[v25];
        }
        BOOL v70 = v26;
        log = v16;

        os_log_type_t v27 = v24;
        BOOL v28 = v27;
        os_log_type_t v29 = v22;
        uint64_t v30 = "path";
        switch(v6->mode)
        {
          case 0:
            break;
          case 1:
            uint64_t v30 = "resolver";
            break;
          case 2:
            uint64_t v30 = nw_endpoint_flow_mode_string(v27[31]);
            break;
          case 3:
            uint64_t v30 = "proxy";
            break;
          case 4:
            uint64_t v30 = "fallback";
            break;
          case 5:
            uint64_t v30 = "transform";
            break;
          default:
            uint64_t v30 = "unknown-mode";
            break;
        }

        os_log_type_t v35 = v28;
        os_unfair_lock_lock((os_unfair_lock_t)v35 + 28);
        id v36 = v35[8];
        os_unfair_lock_unlock((os_unfair_lock_t)v35 + 28);

        *(_DWORD *)buf = 136448002;
        uint64_t v79 = "nw_endpoint_flow_reset_expected_progress_target";
        __int16 v80 = 2082;
        os_log_type_t v81 = id_str;
        __int16 v82 = 2082;
        os_log_type_t v83 = v20;
        __int16 v84 = 2082;
        v85 = (void *)v29;
        __int16 v86 = 2082;
        int v87 = v70;
        __int16 v88 = 2082;
        uint64_t v89 = v30;
        __int16 v90 = 2114;
        id v91 = v36;
        __int16 v92 = 2048;
        uint64_t v93 = a2;
        __int16 v16 = log;
        _os_log_impl(&dword_1830D4000, log, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Resetting progress target to %llu", buf, 0x52u);
      }
    }

    goto LABEL_37;
  }
LABEL_68:
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v57 = (id)gLogObj;
  if (mode > 5) {
    os_log_type_t v58 = "unknown-mode";
  }
  else {
    os_log_type_t v58 = off_1E523FB08[mode];
  }
  *(_DWORD *)buf = 136446722;
  uint64_t v79 = "nw_endpoint_flow_reset_expected_progress_target";
  __int16 v80 = 2082;
  os_log_type_t v81 = (void *)v58;
  __int16 v82 = 2082;
  os_log_type_t v83 = "flow";
  uint64_t v59 = (void *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v76 = 0;
  if (!__nwlog_fault((const char *)v59, &type, &v76))
  {
LABEL_100:
    if (!v59) {
      goto LABEL_102;
    }
LABEL_101:
    free(v59);
    goto LABEL_102;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v60 = (id)gLogObj;
    os_log_type_t v61 = type;
    if (os_log_type_enabled(v60, type))
    {
      if (mode > 5) {
        v62 = "unknown-mode";
      }
      else {
        v62 = off_1E523FB08[mode];
      }
      *(_DWORD *)buf = 136446722;
      uint64_t v79 = "nw_endpoint_flow_reset_expected_progress_target";
      __int16 v80 = 2082;
      os_log_type_t v81 = (void *)v62;
      __int16 v82 = 2082;
      os_log_type_t v83 = "flow";
      _os_log_impl(&dword_1830D4000, v60, v61, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
    }
LABEL_99:

    goto LABEL_100;
  }
  if (!v76)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v60 = (id)gLogObj;
    os_log_type_t v67 = type;
    if (os_log_type_enabled(v60, type))
    {
      if (mode > 5) {
        id v68 = "unknown-mode";
      }
      else {
        id v68 = off_1E523FB08[mode];
      }
      *(_DWORD *)buf = 136446722;
      uint64_t v79 = "nw_endpoint_flow_reset_expected_progress_target";
      __int16 v80 = 2082;
      os_log_type_t v81 = (void *)v68;
      __int16 v82 = 2082;
      os_log_type_t v83 = "flow";
      _os_log_impl(&dword_1830D4000, v60, v67, "%{public}s Handler is in mode %{public}s, expected %{public}s, backtrace limit exceeded", buf, 0x20u);
    }
    goto LABEL_99;
  }
  __int16 v63 = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_t v60 = (id)gLogObj;
  os_log_type_t v64 = type;
  BOOL v65 = os_log_type_enabled(v60, type);
  if (!v63)
  {
    if (v65)
    {
      if (mode > 5) {
        os_log_type_t v69 = "unknown-mode";
      }
      else {
        os_log_type_t v69 = off_1E523FB08[mode];
      }
      *(_DWORD *)buf = 136446722;
      uint64_t v79 = "nw_endpoint_flow_reset_expected_progress_target";
      __int16 v80 = 2082;
      os_log_type_t v81 = (void *)v69;
      __int16 v82 = 2082;
      os_log_type_t v83 = "flow";
      _os_log_impl(&dword_1830D4000, v60, v64, "%{public}s Handler is in mode %{public}s, expected %{public}s, no backtrace", buf, 0x20u);
    }
    goto LABEL_99;
  }
  if (v65)
  {
    if (mode > 5) {
      os_log_type_t v66 = "unknown-mode";
    }
    else {
      os_log_type_t v66 = off_1E523FB08[mode];
    }
    *(_DWORD *)buf = 136446978;
    uint64_t v79 = "nw_endpoint_flow_reset_expected_progress_target";
    __int16 v80 = 2082;
    os_log_type_t v81 = (void *)v66;
    __int16 v82 = 2082;
    os_log_type_t v83 = "flow";
    __int16 v84 = 2082;
    v85 = v63;
    _os_log_impl(&dword_1830D4000, v60, v64, "%{public}s Handler is in mode %{public}s, expected %{public}s, dumping backtrace:%{public}s", buf, 0x2Au);
  }

  free(v63);
  if (v59) {
    goto LABEL_101;
  }
LABEL_102:
}

void sub_1831FCBB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_frame_check_validity(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v14 = "__nw_frame_check_validity";
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v11 = 0;
    if (__nwlog_fault(v5, &type, &v11))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        id v6 = __nwlog_obj();
        os_log_type_t v7 = type;
        if (os_log_type_enabled(v6, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v14 = "__nw_frame_check_validity";
          int v8 = "%{public}s called with null frame";
LABEL_20:
          _os_log_impl(&dword_1830D4000, v6, v7, v8, buf, 0xCu);
        }
      }
      else if (v11)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        id v6 = __nwlog_obj();
        os_log_type_t v7 = type;
        BOOL v10 = os_log_type_enabled(v6, type);
        if (backtrace_string)
        {
          if (v10)
          {
            *(_DWORD *)buf = 136446466;
            __int16 v14 = "__nw_frame_check_validity";
            __int16 v15 = 2082;
            __int16 v16 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null frame, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(backtrace_string);
          goto LABEL_21;
        }
        if (v10)
        {
          *(_DWORD *)buf = 136446210;
          __int16 v14 = "__nw_frame_check_validity";
          int v8 = "%{public}s called with null frame, no backtrace";
          goto LABEL_20;
        }
      }
      else
      {
        id v6 = __nwlog_obj();
        os_log_type_t v7 = type;
        if (os_log_type_enabled(v6, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v14 = "__nw_frame_check_validity";
          int v8 = "%{public}s called with null frame, backtrace limit exceeded";
          goto LABEL_20;
        }
      }
    }
LABEL_21:
    if (v5) {
      free(v5);
    }
    return 0;
  }
  uint64_t v1 = 1;
  if ((*(_WORD *)(a1 + 204) & 0x100) == 0) {
    return v1;
  }
  uint64_t v2 = g_channel_check_validity;
  if (!g_channel_check_validity) {
    return v1;
  }
  uint64_t v3 = *(void *)(a1 + 88);

  return v2(a1, v3);
}

BOOL __nw_proxy_copy_http_connect_definition_block_invoke()
{
  if (nw_protocol_http_connect_identifier::onceToken != -1) {
    dispatch_once(&nw_protocol_http_connect_identifier::onceToken, &__block_literal_global_35707);
  }
  uint64_t v0 = nw_protocol_definition_create_with_identifier(&g_http_connect_protocol_identifier);
  uint64_t v1 = (void *)nw_proxy_copy_http_connect_definition::proxy_definition;
  nw_proxy_copy_http_connect_definition::proxy_definition = (uint64_t)v0;

  nw_protocol_definition_set_options_allocator((void *)nw_proxy_copy_http_connect_definition::proxy_definition, (uint64_t)nw_proxy_allocate_options, (uint64_t)nw_proxy_copy_options, (uint64_t)nw_proxy_deallocate_options);
  nw_protocol_definition_set_options_equality_check((void *)nw_proxy_copy_http_connect_definition::proxy_definition, (uint64_t)nw_proxy_option_is_equal);
  uint64_t v2 = (void *)nw_proxy_copy_http_connect_definition::proxy_definition;

  return nw_protocol_register_handle((uint64_t)&g_http_connect_protocol_identifier, v2, (uint64_t)nw_protocol_http_connect_create, 0);
}

void ___ZL31nw_protocol_setup_ip_definitionv_block_invoke()
{
  if (nw_protocol_ip_identifier::onceToken != -1) {
    dispatch_once(&nw_protocol_ip_identifier::onceToken, &__block_literal_global_86959);
  }
  uint64_t v0 = nw_protocol_definition_create_with_identifier((long long *)&nw_protocol_ip_identifier::identifier);
  uint64_t v1 = (void *)g_ip_definition;
  g_ip_definition = (uint64_t)v0;

  nw_protocol_definition_set_options_allocator((void *)g_ip_definition, (uint64_t)nw_ip_allocate_options, (uint64_t)nw_ip_copy_options, (uint64_t)nw_ip_deallocate_options);
  nw_protocol_definition_set_options_equality_check((void *)g_ip_definition, (uint64_t)nw_ip_option_is_equal);
  nw_protocol_definition_set_metadata_allocator((void *)g_ip_definition, (uint64_t)nw_ip_allocate_metadata, (uint64_t)nw_ip_deallocate_metadata);
  nw_protocol_definition_set_has_global_definition((void *)g_ip_definition);
  uint64_t v2 = (void *)g_ip_definition;

  nw_protocol_definition_set_options_serializer(v2, 0, (uint64_t)nw_ip_serialize_options, (uint64_t)nw_ip_deserialize_options);
}

NWConcrete_nw_protocol_options *nw_parameters_create_protocol_parameters(long long *a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v1 = nw_protocol_definition_create_with_identifier(a1);
    options = nw_protocol_create_options(v1);

    return options;
  }
  uint64_t v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v15 = "nw_parameters_create_protocol_parameters";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (__nwlog_fault(v5, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v15 = "nw_parameters_create_protocol_parameters";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null protocol_identifier", buf, 0xCu);
      }
    }
    else if (v12)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v15 = "nw_parameters_create_protocol_parameters";
          __int16 v16 = 2082;
          uint64_t v17 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null protocol_identifier, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v15 = "nw_parameters_create_protocol_parameters";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null protocol_identifier, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v15 = "nw_parameters_create_protocol_parameters";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null protocol_identifier, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
  return 0;
}

void sub_1831FD33C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_endpoint_flow_attach_socket_protocol(NWConcrete_nw_endpoint_handler *a1, nw_protocol *a2)
{
  uint64_t v118 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1;
  uint64_t v4 = nw_endpoint_handler_copy_flow(v3);
  parameters = (char *)nw_endpoint_handler_copy_parameters(v3);
  if (nw_socket_protocol_identifier::onceToken != -1) {
    dispatch_once(&nw_socket_protocol_identifier::onceToken, &__block_literal_global_65117);
  }
  nw_endpoint_t v5 = nw_endpoint_handler_copy_endpoint(v3);
  uint64_t internal = nw_protocol_create_internal((uint64_t)&nw_socket_protocol_identifier::identifier, v5, parameters, 1);

  if (internal)
  {
    if (nw_socket_protocol_identifier::onceToken != -1) {
      dispatch_once(&nw_socket_protocol_identifier::onceToken, &__block_literal_global_65117);
    }
    os_log_type_t v7 = nw_protocol_definition_create_with_identifier(&nw_socket_protocol_identifier::identifier);
    int v8 = nw_parameters_copy_default_protocol_stack((nw_parameters_t)parameters);
    os_log_type_t v9 = v8;
    uint64_t v96 = v8;
    uint64_t v97 = v7;
    if (!*((void *)v4 + 90))
    {
      nw_protocol_options_t v10 = nw_protocol_stack_copy_transport_protocol(v8);
      nw_endpoint_handler_set_protocol_instance(v3, v10, v7, internal);
    }
    nw_protocol_options_t v11 = nw_protocol_stack_copy_internet_protocol(v9);
    nw_endpoint_handler_set_protocol_instance(v3, v11, v7, internal);
    *((void *)v4 + 114) = internal;
    os_unfair_lock_lock((os_unfair_lock_t)v4 + 220);
    if (!*((void *)v4 + 90))
    {
      if (*(_UNKNOWN **)(internal + 40) == &nw_protocol_ref_counted_handle)
      {
        uint64_t v23 = *(void *)(internal + 88);
        if (v23) {
          *(void *)(internal + 88) = v23 + 1;
        }
        char v13 = 1;
        char v12 = -1;
      }
      else
      {
        char v12 = 0;
        char v13 = 0;
      }
      *(void *)&buf[0].sa_len = internal;
      buf[0].sa_data[6] = v12;
      char v24 = *((unsigned char *)v4 + 728);
      if (v24)
      {
        nw::release_if_needed<nw_protocol *>((uint64_t *)v4 + 90);
        char v24 = *((unsigned char *)v4 + 728);
      }
      *((void *)v4 + 90) = internal;
      *((unsigned char *)v4 + 728) = v13 | v24 & 0xFE;
    }
    os_unfair_lock_unlock((os_unfair_lock_t)v4 + 220);
    if ((*((_DWORD *)v4 + 225) & 0x80000000) != 0) {
      goto LABEL_74;
    }
    if (*(_UNKNOWN **)(internal + 40) == &nw_protocol_ref_counted_handle)
    {
      if (*(_DWORD *)(internal + 268) != -1)
      {
        if ((*(_WORD *)(internal + 397) & 0x80) == 0)
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          uint64_t v25 = gconnectionLogObj;
          if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
          {
LABEL_47:
            *(_DWORD *)&buf[0].sa_len = 136446466;
            *(void *)&buf[0].sa_data[2] = "nw_socket_set_connected_fd";
            *(_WORD *)&buf[0].sa_data[10] = 2082;
            *(void *)&buf[0].sa_data[12] = internal + 404;
            _os_log_impl(&dword_1830D4000, v25, OS_LOG_TYPE_ERROR, "%{public}s %{public}s Socket protocol already has valid fd", &buf[0].sa_len, 0x16u);
          }
        }
LABEL_74:
        BOOL v48 = (void *)*((void *)v4 + 119);
        if (!v48) {
          goto LABEL_79;
        }
        if (*(_UNKNOWN **)(internal + 40) == &nw_protocol_ref_counted_handle)
        {
          os_log_type_t v49 = *(void **)(internal + 200);
          if (v49)
          {
            xpc_release(v49);
            *(void *)(internal + 200) = 0;
          }
          *(void *)(internal + 200) = xpc_retain(v48);
          goto LABEL_79;
        }
        __nwlog_obj();
        *(_DWORD *)&buf[0].sa_len = 136446210;
        *(void *)&buf[0].sa_data[2] = "nw_socket_set_flow_divert_token";
        BOOL v70 = (char *)_os_log_send_and_compose_impl();
        v102[0] = OS_LOG_TYPE_ERROR;
        v107[0] = 0;
        if (__nwlog_fault(v70, v102, v107))
        {
          if (v102[0] == OS_LOG_TYPE_FAULT)
          {
            os_log_type_t v71 = __nwlog_obj();
            os_log_type_t v72 = v102[0];
            if (!os_log_type_enabled(v71, v102[0])) {
              goto LABEL_165;
            }
            *(_DWORD *)&buf[0].sa_len = 136446210;
            *(void *)&buf[0].sa_data[2] = "nw_socket_set_flow_divert_token";
            os_log_type_t v73 = "%{public}s called with null socket_handler";
LABEL_163:
            __int16 v86 = v71;
LABEL_164:
            _os_log_impl(&dword_1830D4000, v86, v72, v73, &buf[0].sa_len, 0xCu);
            goto LABEL_165;
          }
          if (!v107[0])
          {
            os_log_type_t v71 = __nwlog_obj();
            os_log_type_t v72 = v102[0];
            if (!os_log_type_enabled(v71, v102[0])) {
              goto LABEL_165;
            }
            *(_DWORD *)&buf[0].sa_len = 136446210;
            *(void *)&buf[0].sa_data[2] = "nw_socket_set_flow_divert_token";
            os_log_type_t v73 = "%{public}s called with null socket_handler, backtrace limit exceeded";
            goto LABEL_163;
          }
          backtrace_string = (char *)__nw_create_backtrace_string();
          __int16 v82 = __nwlog_obj();
          os_log_type_t v72 = v102[0];
          logb = v82;
          BOOL v83 = os_log_type_enabled(v82, v102[0]);
          if (backtrace_string)
          {
            if (v83)
            {
              *(_DWORD *)&buf[0].sa_len = 136446466;
              *(void *)&buf[0].sa_data[2] = "nw_socket_set_flow_divert_token";
              *(_WORD *)&buf[0].sa_data[10] = 2082;
              *(void *)&buf[0].sa_data[12] = backtrace_string;
              _os_log_impl(&dword_1830D4000, logb, v72, "%{public}s called with null socket_handler, dumping backtrace:%{public}s", &buf[0].sa_len, 0x16u);
            }
            free(backtrace_string);
            goto LABEL_165;
          }
          if (v83)
          {
            *(_DWORD *)&buf[0].sa_len = 136446210;
            *(void *)&buf[0].sa_data[2] = "nw_socket_set_flow_divert_token";
            os_log_type_t v73 = "%{public}s called with null socket_handler, no backtrace";
            __int16 v86 = logb;
            goto LABEL_164;
          }
        }
LABEL_165:
        if (v70) {
          free(v70);
        }
LABEL_79:
        if (!a2)
        {
          os_log_type_t v64 = __nwlog_obj();
          *(_DWORD *)&buf[0].sa_len = 136446210;
          *(void *)&buf[0].sa_data[2] = "nw_protocol_utilities_add_input_handler";
          BOOL v65 = (const char *)_os_log_send_and_compose_impl();

          os_log_type_t v7 = v97;
          v102[0] = OS_LOG_TYPE_ERROR;
          v107[0] = 0;
          if (__nwlog_fault(v65, v102, v107))
          {
            if (v102[0] == OS_LOG_TYPE_FAULT)
            {
              os_log_type_t v66 = __nwlog_obj();
              os_log_type_t v67 = v102[0];
              if (os_log_type_enabled(v66, v102[0]))
              {
                *(_DWORD *)&buf[0].sa_len = 136446210;
                *(void *)&buf[0].sa_data[2] = "nw_protocol_utilities_add_input_handler";
                _os_log_impl(&dword_1830D4000, v66, v67, "%{public}s called with null input_protocol", &buf[0].sa_len, 0xCu);
              }
            }
            else if (v107[0])
            {
              BOOL v74 = (char *)__nw_create_backtrace_string();
              uint64_t v75 = __nwlog_obj();
              os_log_type_t v76 = v102[0];
              BOOL v77 = os_log_type_enabled(v75, v102[0]);
              if (v74)
              {
                if (v77)
                {
                  *(_DWORD *)&buf[0].sa_len = 136446466;
                  *(void *)&buf[0].sa_data[2] = "nw_protocol_utilities_add_input_handler";
                  *(_WORD *)&buf[0].sa_data[10] = 2082;
                  *(void *)&buf[0].sa_data[12] = v74;
                  _os_log_impl(&dword_1830D4000, v75, v76, "%{public}s called with null input_protocol, dumping backtrace:%{public}s", &buf[0].sa_len, 0x16u);
                }

                os_log_type_t v7 = v97;
                free(v74);
              }
              else
              {
                if (v77)
                {
                  *(_DWORD *)&buf[0].sa_len = 136446210;
                  *(void *)&buf[0].sa_data[2] = "nw_protocol_utilities_add_input_handler";
                  _os_log_impl(&dword_1830D4000, v75, v76, "%{public}s called with null input_protocol, no backtrace", &buf[0].sa_len, 0xCu);
                }

                os_log_type_t v7 = v97;
              }
            }
            else
            {
              __int16 v84 = __nwlog_obj();
              os_log_type_t v85 = v102[0];
              if (os_log_type_enabled(v84, v102[0]))
              {
                *(_DWORD *)&buf[0].sa_len = 136446210;
                *(void *)&buf[0].sa_data[2] = "nw_protocol_utilities_add_input_handler";
                _os_log_impl(&dword_1830D4000, v84, v85, "%{public}s called with null input_protocol, backtrace limit exceeded", &buf[0].sa_len, 0xCu);
              }

              os_log_type_t v7 = v97;
            }
          }
          if (!v65) {
            goto LABEL_114;
          }
          v62 = (char *)v65;
          goto LABEL_113;
        }
        if ((nw_protocol *)internal != a2)
        {
          BOOL v50 = *(void **)(internal + 24);
          if (v50 && *v50)
          {
            if (!nw_protocol_add_input_handler(internal, (uint64_t)a2))
            {
              uint64_t v22 = 0;
              goto LABEL_115;
            }
            int v51 = *((char *)v4 + 33);
            if ((v51 & 0x80000000) == 0)
            {
              uint64_t v22 = 1;
LABEL_115:

              goto LABEL_116;
            }
            if (*(_UNKNOWN **)(internal + 40) == &nw_protocol_ref_counted_handle)
            {
              if (((*(unsigned __int16 *)(internal + 397) | (*(unsigned __int8 *)(internal + 399) << 16)) & 0x20000) != 0)
              {
LABEL_104:
                uint64_t v22 = 1;
                goto LABEL_115;
              }
LABEL_103:
              *((unsigned char *)v4 + 33) = v51 & 0x7F;
              goto LABEL_104;
            }
            __nwlog_obj();
            *(_DWORD *)&buf[0].sa_len = 136446210;
            *(void *)&buf[0].sa_data[2] = "nw_socket_is_multipath";
            int v87 = (char *)_os_log_send_and_compose_impl();
            v102[0] = OS_LOG_TYPE_ERROR;
            v107[0] = 0;
            if (__nwlog_fault(v87, v102, v107))
            {
              if (v102[0] == OS_LOG_TYPE_FAULT)
              {
                __int16 v88 = __nwlog_obj();
                os_log_type_t v89 = v102[0];
                if (os_log_type_enabled(v88, v102[0]))
                {
                  *(_DWORD *)&buf[0].sa_len = 136446210;
                  *(void *)&buf[0].sa_data[2] = "nw_socket_is_multipath";
                  __int16 v90 = "%{public}s called with null socket_handler";
LABEL_184:
                  _os_log_impl(&dword_1830D4000, v88, v89, v90, &buf[0].sa_len, 0xCu);
                }
              }
              else if (v107[0])
              {
                id v91 = (char *)__nw_create_backtrace_string();
                __int16 v88 = __nwlog_obj();
                os_log_type_t v89 = v102[0];
                BOOL v92 = os_log_type_enabled(v88, v102[0]);
                if (v91)
                {
                  if (v92)
                  {
                    *(_DWORD *)&buf[0].sa_len = 136446466;
                    *(void *)&buf[0].sa_data[2] = "nw_socket_is_multipath";
                    *(_WORD *)&buf[0].sa_data[10] = 2082;
                    *(void *)&buf[0].sa_data[12] = v91;
                    _os_log_impl(&dword_1830D4000, v88, v89, "%{public}s called with null socket_handler, dumping backtrace:%{public}s", &buf[0].sa_len, 0x16u);
                  }
                  free(v91);
                  goto LABEL_185;
                }
                if (v92)
                {
                  *(_DWORD *)&buf[0].sa_len = 136446210;
                  *(void *)&buf[0].sa_data[2] = "nw_socket_is_multipath";
                  __int16 v90 = "%{public}s called with null socket_handler, no backtrace";
                  goto LABEL_184;
                }
              }
              else
              {
                __int16 v88 = __nwlog_obj();
                os_log_type_t v89 = v102[0];
                if (os_log_type_enabled(v88, v102[0]))
                {
                  *(_DWORD *)&buf[0].sa_len = 136446210;
                  *(void *)&buf[0].sa_data[2] = "nw_socket_is_multipath";
                  __int16 v90 = "%{public}s called with null socket_handler, backtrace limit exceeded";
                  goto LABEL_184;
                }
              }
            }
LABEL_185:
            if (v87) {
              free(v87);
            }
            LOBYTE(v51) = *((unsigned char *)v4 + 33);
            goto LABEL_103;
          }
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v56 = (id)gLogObj;
          if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)&buf[0].sa_len = 136446466;
            *(void *)&buf[0].sa_data[2] = "nw_protocol_utilities_add_input_handler";
            *(_WORD *)&buf[0].sa_data[10] = 2048;
            *(void *)&buf[0].sa_data[12] = internal;
            _os_log_impl(&dword_1830D4000, v56, OS_LOG_TYPE_ERROR, "%{public}s Unable to invoke add_input_handler on protocol %p because it is not valid", &buf[0].sa_len, 0x16u);
          }

LABEL_114:
          uint64_t v22 = 0;
          goto LABEL_115;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v52 = (id)gLogObj;
        *(_DWORD *)&buf[0].sa_len = 136446466;
        *(void *)&buf[0].sa_data[2] = "nw_protocol_utilities_add_input_handler";
        *(_WORD *)&buf[0].sa_data[10] = 2048;
        *(void *)&buf[0].sa_data[12] = a2;
        os_log_type_t v53 = (const char *)_os_log_send_and_compose_impl();

        os_log_type_t v7 = v97;
        v102[0] = OS_LOG_TYPE_ERROR;
        v107[0] = 0;
        if (!__nwlog_fault(v53, v102, v107)) {
          goto LABEL_111;
        }
        if (v102[0] == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v54 = (id)gLogObj;
          os_log_type_t v55 = v102[0];
          if (os_log_type_enabled(v54, v102[0]))
          {
            *(_DWORD *)&buf[0].sa_len = 136446466;
            *(void *)&buf[0].sa_data[2] = "nw_protocol_utilities_add_input_handler";
            *(_WORD *)&buf[0].sa_data[10] = 2048;
            *(void *)&buf[0].sa_data[12] = a2;
            _os_log_impl(&dword_1830D4000, v54, v55, "%{public}s Cannot add input handler %p to itself", &buf[0].sa_len, 0x16u);
          }
        }
        else
        {
          if (v107[0])
          {
            id v57 = (char *)__nw_create_backtrace_string();
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            os_log_type_t v58 = (id)gLogObj;
            os_log_type_t v59 = v102[0];
            BOOL v60 = os_log_type_enabled(v58, v102[0]);
            if (v57)
            {
              if (v60)
              {
                *(_DWORD *)&buf[0].sa_len = 136446722;
                *(void *)&buf[0].sa_data[2] = "nw_protocol_utilities_add_input_handler";
                *(_WORD *)&buf[0].sa_data[10] = 2048;
                *(void *)&buf[0].sa_data[12] = a2;
                *(_WORD *)&buf[1].sa_data[4] = 2082;
                *(void *)&buf[1].sa_data[6] = v57;
                _os_log_impl(&dword_1830D4000, v58, v59, "%{public}s Cannot add input handler %p to itself, dumping backtrace:%{public}s", &buf[0].sa_len, 0x20u);
              }

              free(v57);
              if (!v53) {
                goto LABEL_114;
              }
LABEL_112:
              v62 = (char *)v53;
LABEL_113:
              free(v62);
              goto LABEL_114;
            }
            if (v60)
            {
              *(_DWORD *)&buf[0].sa_len = 136446466;
              *(void *)&buf[0].sa_data[2] = "nw_protocol_utilities_add_input_handler";
              *(_WORD *)&buf[0].sa_data[10] = 2048;
              *(void *)&buf[0].sa_data[12] = a2;
              _os_log_impl(&dword_1830D4000, v58, v59, "%{public}s Cannot add input handler %p to itself, no backtrace", &buf[0].sa_len, 0x16u);
            }

LABEL_111:
            if (!v53) {
              goto LABEL_114;
            }
            goto LABEL_112;
          }
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v54 = (id)gLogObj;
          os_log_type_t v61 = v102[0];
          if (os_log_type_enabled(v54, v102[0]))
          {
            *(_DWORD *)&buf[0].sa_len = 136446466;
            *(void *)&buf[0].sa_data[2] = "nw_protocol_utilities_add_input_handler";
            *(_WORD *)&buf[0].sa_data[10] = 2048;
            *(void *)&buf[0].sa_data[12] = a2;
            _os_log_impl(&dword_1830D4000, v54, v61, "%{public}s Cannot add input handler %p to itself, backtrace limit exceeded", &buf[0].sa_len, 0x16u);
          }
        }

        goto LABEL_111;
      }
      uint64_t v26 = (void *)*((void *)v4 + 111);
      char v27 = *((unsigned char *)v4 + 35);
      *(void *)v102 = MEMORY[0x1E4F143A8];
      uint64_t v103 = 0x40000000;
      v104 = __nw_socket_set_connected_fd_block_invoke;
      uint64_t v105 = &__block_descriptor_tmp_65066;
      uint64_t v106 = internal + 96;
      if ((nw_fd_wrapper_get_fd(v26, v102) & 1) == 0)
      {
        if ((*(_WORD *)(internal + 397) & 0x80) == 0)
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          uint64_t v25 = gconnectionLogObj;
          if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR)) {
            goto LABEL_47;
          }
        }
        goto LABEL_74;
      }
      if (v26) {
        uint64_t v26 = os_retain(v26);
      }
      char v28 = *(unsigned char *)(internal + 168);
      if (v28)
      {
        os_log_type_t v29 = *(void **)(internal + 160);
        if (v29)
        {
          os_release(v29);
          char v28 = *(unsigned char *)(internal + 168);
        }
      }
      *(void *)(internal + 160) = v26;
      *(unsigned char *)(internal + 168) = v28 | 1;
      *(_DWORD *)(internal + 276) &= ~0x800u;
      if ((v27 & 0x40) != 0)
      {
        if ((nw_fd_wrapper_guard(v26) & 1) == 0 && (*(_WORD *)(internal + 397) & 0x80) == 0)
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          uint64_t v36 = gconnectionLogObj;
          if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)&buf[0].sa_len = 136446466;
            *(void *)&buf[0].sa_data[2] = "nw_socket_set_connected_fd";
            *(_WORD *)&buf[0].sa_data[10] = 2082;
            *(void *)&buf[0].sa_data[12] = internal + 404;
            id v32 = "%{public}s %{public}s Failed to guard socket fd";
            os_log_type_t v33 = v36;
            os_log_type_t v34 = OS_LOG_TYPE_ERROR;
            uint32_t v35 = 22;
            goto LABEL_54;
          }
        }
      }
      else if ((*(_WORD *)(internal + 397) & 0x80) == 0)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        uint64_t v30 = gconnectionLogObj;
        if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEFAULT))
        {
          int v31 = *(_DWORD *)(internal + 268);
          *(_DWORD *)&buf[0].sa_len = 136446722;
          *(void *)&buf[0].sa_data[2] = "nw_socket_set_connected_fd";
          *(_WORD *)&buf[0].sa_data[10] = 2082;
          *(void *)&buf[0].sa_data[12] = internal + 404;
          *(_WORD *)&buf[1].sa_data[4] = 1024;
          *(_DWORD *)&buf[1].sa_data[6] = v31;
          id v32 = "%{public}s %{public}s Not guarding connected fd %d";
          os_log_type_t v33 = v30;
          os_log_type_t v34 = OS_LOG_TYPE_DEFAULT;
          uint32_t v35 = 28;
LABEL_54:
          _os_log_impl(&dword_1830D4000, v33, v34, v32, &buf[0].sa_len, v35);
        }
      }
      *(_WORD *)(internal + 397) |= 4u;
      long long v116 = 0u;
      long long v117 = 0u;
      long long v114 = 0u;
      long long v115 = 0u;
      memset(buf, 0, sizeof(buf));
      socklen_t v101 = 128;
      if (!getsockname(*(_DWORD *)(internal + 268), buf, &v101))
      {
        *(unsigned char *)(internal + 400) = buf[0].sa_family;
        goto LABEL_74;
      }
      int v37 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      *(_DWORD *)v107 = 136446466;
      char v108 = "nw_socket_set_connected_fd";
      __int16 v109 = 1024;
      int v110 = v37;
      __int16 v38 = (void *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v99 = 0;
      if (__nwlog_fault((const char *)v38, &type, &v99))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v39 = gLogObj;
          os_log_type_t v40 = type;
          if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
            goto LABEL_72;
          }
          *(_DWORD *)v107 = 136446466;
          char v108 = "nw_socket_set_connected_fd";
          __int16 v109 = 1024;
          int v110 = v37;
          os_log_type_t v41 = "%{public}s getsockname failed %{darwin.errno}d";
LABEL_69:
          v44 = (sockaddr *)v107;
          os_log_type_t v45 = v39;
LABEL_70:
          os_log_type_t v46 = v40;
          uint32_t v47 = 18;
LABEL_71:
          _os_log_impl(&dword_1830D4000, v45, v46, v41, &v44->sa_len, v47);
          goto LABEL_72;
        }
        if (!v99)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v39 = gLogObj;
          os_log_type_t v40 = type;
          if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
            goto LABEL_72;
          }
          *(_DWORD *)v107 = 136446466;
          char v108 = "nw_socket_set_connected_fd";
          __int16 v109 = 1024;
          int v110 = v37;
          os_log_type_t v41 = "%{public}s getsockname failed %{darwin.errno}d, backtrace limit exceeded";
          goto LABEL_69;
        }
        v42 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v40 = type;
        log = gLogObj;
        BOOL v43 = os_log_type_enabled((os_log_t)gLogObj, type);
        if (v42)
        {
          if (v43)
          {
            *(_DWORD *)v107 = 136446722;
            char v108 = "nw_socket_set_connected_fd";
            __int16 v109 = 1024;
            int v110 = v37;
            __int16 v111 = 2082;
            char v112 = v42;
            _os_log_impl(&dword_1830D4000, log, v40, "%{public}s getsockname failed %{darwin.errno}d, dumping backtrace:%{public}s", v107, 0x1Cu);
          }
          free(v42);
          if (!v38) {
            goto LABEL_74;
          }
LABEL_73:
          free(v38);
          goto LABEL_74;
        }
        if (v43)
        {
          *(_DWORD *)v107 = 136446466;
          char v108 = "nw_socket_set_connected_fd";
          __int16 v109 = 1024;
          int v110 = v37;
          os_log_type_t v41 = "%{public}s getsockname failed %{darwin.errno}d, no backtrace";
          v44 = (sockaddr *)v107;
          os_log_type_t v45 = log;
          goto LABEL_70;
        }
      }
LABEL_72:
      if (!v38) {
        goto LABEL_74;
      }
      goto LABEL_73;
    }
    __nwlog_obj();
    *(_DWORD *)&buf[0].sa_len = 136446210;
    *(void *)&buf[0].sa_data[2] = "nw_socket_set_connected_fd";
    __int16 v38 = (void *)_os_log_send_and_compose_impl();
    v102[0] = OS_LOG_TYPE_ERROR;
    v107[0] = 0;
    if (!__nwlog_fault((const char *)v38, v102, v107)) {
      goto LABEL_72;
    }
    if (v102[0] == OS_LOG_TYPE_FAULT)
    {
      id v68 = __nwlog_obj();
      os_log_type_t v69 = v102[0];
      if (!os_log_type_enabled(v68, v102[0])) {
        goto LABEL_72;
      }
      *(_DWORD *)&buf[0].sa_len = 136446210;
      *(void *)&buf[0].sa_data[2] = "nw_socket_set_connected_fd";
      os_log_type_t v41 = "%{public}s called with null socket_handler";
    }
    else
    {
      if (v107[0])
      {
        int v78 = (char *)__nw_create_backtrace_string();
        uint64_t v79 = __nwlog_obj();
        os_log_type_t v69 = v102[0];
        loga = v79;
        BOOL v80 = os_log_type_enabled(v79, v102[0]);
        if (v78)
        {
          if (v80)
          {
            *(_DWORD *)&buf[0].sa_len = 136446466;
            *(void *)&buf[0].sa_data[2] = "nw_socket_set_connected_fd";
            *(_WORD *)&buf[0].sa_data[10] = 2082;
            *(void *)&buf[0].sa_data[12] = v78;
            _os_log_impl(&dword_1830D4000, loga, v69, "%{public}s called with null socket_handler, dumping backtrace:%{public}s", &buf[0].sa_len, 0x16u);
          }
          free(v78);
          goto LABEL_72;
        }
        if (!v80) {
          goto LABEL_72;
        }
        *(_DWORD *)&buf[0].sa_len = 136446210;
        *(void *)&buf[0].sa_data[2] = "nw_socket_set_connected_fd";
        os_log_type_t v41 = "%{public}s called with null socket_handler, no backtrace";
        v44 = buf;
        os_log_type_t v45 = loga;
LABEL_160:
        os_log_type_t v46 = v69;
        uint32_t v47 = 12;
        goto LABEL_71;
      }
      id v68 = __nwlog_obj();
      os_log_type_t v69 = v102[0];
      if (!os_log_type_enabled(v68, v102[0])) {
        goto LABEL_72;
      }
      *(_DWORD *)&buf[0].sa_len = 136446210;
      *(void *)&buf[0].sa_data[2] = "nw_socket_set_connected_fd";
      os_log_type_t v41 = "%{public}s called with null socket_handler, backtrace limit exceeded";
    }
    v44 = buf;
    os_log_type_t v45 = v68;
    goto LABEL_160;
  }
  if (nw_endpoint_handler_get_logging_disabled(v3))
  {
    uint64_t v22 = 0;
    goto LABEL_117;
  }
  if (__nwlog_connection_log::onceToken != -1) {
    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
  }
  os_log_type_t v7 = (NWConcrete_nw_protocol_definition *)(id)gconnectionLogObj;
  if (os_log_type_enabled(&v7->super, OS_LOG_TYPE_ERROR))
  {
    id_string = nw_endpoint_handler_get_id_string(v3);
    __int16 v15 = nw_endpoint_handler_dry_run_string(v3);
    nw_endpoint_t v16 = nw_endpoint_handler_copy_endpoint(v3);
    p_super = &v7->super;
    logging_description = nw_endpoint_get_logging_description(v16);
    char v19 = nw_endpoint_handler_state_string(v3);
    uint64_t v20 = nw_endpoint_handler_mode_string(v3);
    id v21 = nw_endpoint_handler_copy_current_path(v3);
    *(_DWORD *)&buf[0].sa_len = 136447746;
    *(void *)&buf[0].sa_data[2] = "nw_endpoint_flow_attach_socket_protocol";
    *(_WORD *)&buf[0].sa_data[10] = 2082;
    *(void *)&buf[0].sa_data[12] = id_string;
    *(_WORD *)&buf[1].sa_data[4] = 2082;
    *(void *)&buf[1].sa_data[6] = v15;
    *(_WORD *)&buf[2].sa_len = 2082;
    *(void *)buf[2].sa_data = logging_description;
    *(_WORD *)&buf[2].sa_data[8] = 2082;
    *(void *)&buf[2].sa_data[10] = v19;
    *(_WORD *)&buf[3].sa_data[2] = 2082;
    *(void *)&buf[3].sa_data[4] = v20;
    *(_WORD *)&buf[3].sa_data[12] = 2114;
    *(void *)&long long v114 = v21;
    os_log_type_t v7 = (NWConcrete_nw_protocol_definition *)p_super;
    _os_log_impl(&dword_1830D4000, p_super, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Could not create socket protocol", &buf[0].sa_len, 0x48u);
  }
  uint64_t v22 = 0;
LABEL_116:

LABEL_117:
  return v22;
}

nw_protocol_stack_t nw_parameters_copy_default_protocol_stack(nw_parameters_t parameters)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  nw_parameters_t v1 = parameters;
  nw_parameters_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = v1[19].isa;
    goto LABEL_3;
  }
  nw_endpoint_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  nw_endpoint_t v16 = "nw_parameters_copy_default_protocol_stack";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        nw_endpoint_t v16 = "nw_parameters_copy_default_protocol_stack";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          nw_endpoint_t v16 = "nw_parameters_copy_default_protocol_stack";
          __int16 v17 = 2082;
          uint64_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        nw_endpoint_t v16 = "nw_parameters_copy_default_protocol_stack";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        nw_endpoint_t v16 = "nw_parameters_copy_default_protocol_stack";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

void nw_endpoint_handler_set_protocol_instance(void *a1, void *a2, void *a3, uint64_t a4)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  id v7 = a1;
  id v8 = a2;
  id v9 = a3;
  if (!v7)
  {
    uint64_t v36 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    int v51 = "nw_endpoint_handler_set_protocol_instance";
    uint64_t v25 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v48 = 0;
    if (__nwlog_fault(v25, &type, &v48))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v26 = __nwlog_obj();
        os_log_type_t v37 = type;
        if (os_log_type_enabled(v26, type))
        {
          *(_DWORD *)buf = 136446210;
          int v51 = "nw_endpoint_handler_set_protocol_instance";
          _os_log_impl(&dword_1830D4000, v26, v37, "%{public}s called with null handler", buf, 0xCu);
        }
        goto LABEL_40;
      }
      if (!v48)
      {
        uint64_t v26 = __nwlog_obj();
        os_log_type_t v46 = type;
        if (os_log_type_enabled(v26, type))
        {
          *(_DWORD *)buf = 136446210;
          int v51 = "nw_endpoint_handler_set_protocol_instance";
          _os_log_impl(&dword_1830D4000, v26, v46, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_40;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v26 = __nwlog_obj();
      os_log_type_t v41 = type;
      BOOL v42 = os_log_type_enabled(v26, type);
      if (!backtrace_string)
      {
        if (v42)
        {
          *(_DWORD *)buf = 136446210;
          int v51 = "nw_endpoint_handler_set_protocol_instance";
          _os_log_impl(&dword_1830D4000, v26, v41, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
        goto LABEL_40;
      }
      if (v42)
      {
        *(_DWORD *)buf = 136446466;
        int v51 = "nw_endpoint_handler_set_protocol_instance";
        __int16 v52 = 2082;
        os_log_type_t v53 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v26, v41, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
    goto LABEL_41;
  }
  os_log_type_t v10 = (NWConcrete_nw_endpoint_handler *)v7;
  uint64_t mode = v10->mode;

  if (mode != 2)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v23 = (id)gLogObj;
    if (mode > 5) {
      char v24 = "unknown-mode";
    }
    else {
      char v24 = off_1E523FB08[mode];
    }
    *(_DWORD *)buf = 136446722;
    int v51 = "nw_endpoint_handler_set_protocol_instance";
    __int16 v52 = 2082;
    os_log_type_t v53 = (void *)v24;
    __int16 v54 = 2082;
    os_log_type_t v55 = "flow";
    uint64_t v25 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v48 = 0;
    if (__nwlog_fault(v25, &type, &v48))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v26 = (id)gLogObj;
        os_log_type_t v27 = type;
        if (os_log_type_enabled(v26, type))
        {
          if (mode > 5) {
            char v28 = "unknown-mode";
          }
          else {
            char v28 = off_1E523FB08[mode];
          }
          *(_DWORD *)buf = 136446722;
          int v51 = "nw_endpoint_handler_set_protocol_instance";
          __int16 v52 = 2082;
          os_log_type_t v53 = (void *)v28;
          __int16 v54 = 2082;
          os_log_type_t v55 = "flow";
          _os_log_impl(&dword_1830D4000, v26, v27, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
        }
        goto LABEL_40;
      }
      if (!v48)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v26 = (id)gLogObj;
        os_log_type_t v33 = type;
        if (os_log_type_enabled(v26, type))
        {
          if (mode > 5) {
            os_log_type_t v34 = "unknown-mode";
          }
          else {
            os_log_type_t v34 = off_1E523FB08[mode];
          }
          *(_DWORD *)buf = 136446722;
          int v51 = "nw_endpoint_handler_set_protocol_instance";
          __int16 v52 = 2082;
          os_log_type_t v53 = (void *)v34;
          __int16 v54 = 2082;
          os_log_type_t v55 = "flow";
          _os_log_impl(&dword_1830D4000, v26, v33, "%{public}s Handler is in mode %{public}s, expected %{public}s, backtrace limit exceeded", buf, 0x20u);
        }
        goto LABEL_40;
      }
      os_log_type_t v29 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v26 = (id)gLogObj;
      os_log_type_t v30 = type;
      BOOL v31 = os_log_type_enabled(v26, type);
      if (!v29)
      {
        if (v31)
        {
          if (mode > 5) {
            uint32_t v35 = "unknown-mode";
          }
          else {
            uint32_t v35 = off_1E523FB08[mode];
          }
          *(_DWORD *)buf = 136446722;
          int v51 = "nw_endpoint_handler_set_protocol_instance";
          __int16 v52 = 2082;
          os_log_type_t v53 = (void *)v35;
          __int16 v54 = 2082;
          os_log_type_t v55 = "flow";
          _os_log_impl(&dword_1830D4000, v26, v30, "%{public}s Handler is in mode %{public}s, expected %{public}s, no backtrace", buf, 0x20u);
        }
        goto LABEL_40;
      }
      if (v31)
      {
        if (mode > 5) {
          id v32 = "unknown-mode";
        }
        else {
          id v32 = off_1E523FB08[mode];
        }
        *(_DWORD *)buf = 136446978;
        int v51 = "nw_endpoint_handler_set_protocol_instance";
        __int16 v52 = 2082;
        os_log_type_t v53 = (void *)v32;
        __int16 v54 = 2082;
        os_log_type_t v55 = "flow";
        __int16 v56 = 2082;
        id v57 = v29;
        _os_log_impl(&dword_1830D4000, v26, v30, "%{public}s Handler is in mode %{public}s, expected %{public}s, dumping backtrace:%{public}s", buf, 0x2Au);
      }

      free(v29);
      if (v25) {
        goto LABEL_42;
      }
      goto LABEL_43;
    }
LABEL_41:
    if (!v25) {
      goto LABEL_43;
    }
LABEL_42:
    free(v25);
    goto LABEL_43;
  }
  if (v8)
  {
    os_log_type_t v12 = nw_endpoint_handler_copy_flow(v10);
    char v13 = (unsigned __int16 *)v12;
    int v14 = *((unsigned __int16 *)v12 + 488);
    if (v14 != 0xFFFF) {
      *((_WORD *)v12 + 488) = v14 + 1;
    }
    __int16 v15 = v10;

    int v16 = v13[488];
    __int16 v17 = (char *)v8;
    uint64_t v18 = v17;
    if (v15[168])
    {
      *((_WORD *)v17 + 68) = v16;
      snprintf(v17 + 48, 0x54uLL, "[%s%s:%u]", "C", v15 + 168, v16);
    }

    uint64_t v19 = v15;
    int v20 = *((_DWORD *)v19 + 36);

    id v21 = v18;
    *((_DWORD *)v21 + 33) = v20;

    uint64_t v22 = v21;
    *((void *)v22 + 2) = a4;

    goto LABEL_43;
  }
  __int16 v38 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  int v51 = "nw_endpoint_handler_set_protocol_instance";
  uint64_t v25 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v48 = 0;
  if (!__nwlog_fault(v25, &type, &v48)) {
    goto LABEL_41;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    uint64_t v26 = __nwlog_obj();
    os_log_type_t v39 = type;
    if (os_log_type_enabled(v26, type))
    {
      *(_DWORD *)buf = 136446210;
      int v51 = "nw_endpoint_handler_set_protocol_instance";
      _os_log_impl(&dword_1830D4000, v26, v39, "%{public}s called with null protocol_parameters", buf, 0xCu);
    }
LABEL_40:

    goto LABEL_41;
  }
  if (!v48)
  {
    uint64_t v26 = __nwlog_obj();
    os_log_type_t v47 = type;
    if (os_log_type_enabled(v26, type))
    {
      *(_DWORD *)buf = 136446210;
      int v51 = "nw_endpoint_handler_set_protocol_instance";
      _os_log_impl(&dword_1830D4000, v26, v47, "%{public}s called with null protocol_parameters, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_40;
  }
  BOOL v43 = (char *)__nw_create_backtrace_string();
  uint64_t v26 = __nwlog_obj();
  os_log_type_t v44 = type;
  BOOL v45 = os_log_type_enabled(v26, type);
  if (!v43)
  {
    if (v45)
    {
      *(_DWORD *)buf = 136446210;
      int v51 = "nw_endpoint_handler_set_protocol_instance";
      _os_log_impl(&dword_1830D4000, v26, v44, "%{public}s called with null protocol_parameters, no backtrace", buf, 0xCu);
    }
    goto LABEL_40;
  }
  if (v45)
  {
    *(_DWORD *)buf = 136446466;
    int v51 = "nw_endpoint_handler_set_protocol_instance";
    __int16 v52 = 2082;
    os_log_type_t v53 = v43;
    _os_log_impl(&dword_1830D4000, v26, v44, "%{public}s called with null protocol_parameters, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v43);
  if (v25) {
    goto LABEL_42;
  }
LABEL_43:
}

void sub_1831FF460(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

NWConcrete_nw_protocol_definition *nw_protocol_definition_create_with_identifier(long long *a1)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    nw_parameters_t v2 = objc_alloc_init(NWConcrete_nw_protocol_definition);
    uint64_t v3 = v2;
    if (v2)
    {
      long long v4 = *a1;
      long long v5 = a1[1];
      *(void *)&v2->identifier.level = *((void *)a1 + 4);
      *(_OWORD *)&v2->identifier.name[16] = v5;
      *(_OWORD *)v2->identifier.name = v4;
      if (*((_DWORD *)a1 + 9) == 2) {
        int v6 = 3;
      }
      else {
        int v6 = 2;
      }
      v2->variant = v6;
      id v7 = v2;
      goto LABEL_14;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v8 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    char v28 = "nw_protocol_definition_create_with_identifier";
    id v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (__nwlog_fault(v9, &type, &v25))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v10 = (id)gLogObj;
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          char v28 = "nw_protocol_definition_create_with_identifier";
          _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s [nw_protocol_definition init] failed", buf, 0xCu);
        }
      }
      else if (v25)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v10 = (id)gLogObj;
        os_log_type_t v14 = type;
        BOOL v15 = os_log_type_enabled(v10, type);
        if (backtrace_string)
        {
          if (v15)
          {
            *(_DWORD *)buf = 136446466;
            char v28 = "nw_protocol_definition_create_with_identifier";
            __int16 v29 = 2082;
            os_log_type_t v30 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v10, v14, "%{public}s [nw_protocol_definition init] failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          if (!v9) {
            goto LABEL_14;
          }
          goto LABEL_13;
        }
        if (v15)
        {
          *(_DWORD *)buf = 136446210;
          char v28 = "nw_protocol_definition_create_with_identifier";
          _os_log_impl(&dword_1830D4000, v10, v14, "%{public}s [nw_protocol_definition init] failed, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v10 = (id)gLogObj;
        os_log_type_t v16 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          char v28 = "nw_protocol_definition_create_with_identifier";
          _os_log_impl(&dword_1830D4000, v10, v16, "%{public}s [nw_protocol_definition init] failed, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
    if (!v9)
    {
LABEL_14:

      return v3;
    }
LABEL_13:
    free(v9);
    goto LABEL_14;
  }
  __int16 v17 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v28 = "nw_protocol_definition_create_with_identifier";
  uint64_t v18 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v25 = 0;
  if (__nwlog_fault(v18, &type, &v25))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v19 = __nwlog_obj();
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        char v28 = "nw_protocol_definition_create_with_identifier";
        _os_log_impl(&dword_1830D4000, v19, v20, "%{public}s called with null identifier", buf, 0xCu);
      }
    }
    else if (v25)
    {
      id v21 = (char *)__nw_create_backtrace_string();
      uint64_t v19 = __nwlog_obj();
      os_log_type_t v22 = type;
      BOOL v23 = os_log_type_enabled(v19, type);
      if (v21)
      {
        if (v23)
        {
          *(_DWORD *)buf = 136446466;
          char v28 = "nw_protocol_definition_create_with_identifier";
          __int16 v29 = 2082;
          os_log_type_t v30 = v21;
          _os_log_impl(&dword_1830D4000, v19, v22, "%{public}s called with null identifier, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v21);
        goto LABEL_44;
      }
      if (v23)
      {
        *(_DWORD *)buf = 136446210;
        char v28 = "nw_protocol_definition_create_with_identifier";
        _os_log_impl(&dword_1830D4000, v19, v22, "%{public}s called with null identifier, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v19 = __nwlog_obj();
      os_log_type_t v24 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        char v28 = "nw_protocol_definition_create_with_identifier";
        _os_log_impl(&dword_1830D4000, v19, v24, "%{public}s called with null identifier, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_44:
  if (v18) {
    free(v18);
  }
  return 0;
}

nw_protocol_options_t nw_protocol_stack_copy_internet_protocol(nw_protocol_stack_t stack)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  nw_protocol_stack_t v1 = stack;
  nw_protocol_stack_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = v1[6].isa;
    goto LABEL_3;
  }
  long long v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_protocol_stack_copy_internet_protocol";
  int v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_protocol_stack_copy_internet_protocol";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null stack", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_protocol_stack_copy_internet_protocol";
          __int16 v17 = 2082;
          uint64_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null stack, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_protocol_stack_copy_internet_protocol";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null stack, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_protocol_stack_copy_internet_protocol";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null stack, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_endpoint_handler_create_protocol_for_definition(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v7 && (os_log_type_t v10 = v7, v11 = v10[184], v10, (v11 & 1) != 0))
  {
    char v13 = (uint64_t (*)(uint64_t, unsigned char *, id, char *))nw_protocol_definition_get_framer_create(v10);
    if (!v13)
    {
      uint64_t v14 = 0;
      goto LABEL_7;
    }
    uint64_t internal = v13(a1, v10, v8, v9);
  }
  else
  {
    uint64_t internal = nw_protocol_create_internal(a1, v8, v9, 1);
  }
  uint64_t v14 = internal;
LABEL_7:

  return v14;
}

void sub_1831FFFD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_protocol_create_internal(uint64_t a1, void *a2, const char *a3, int a4)
{
  uint64_t v70 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    nw_allow_use_of_dispatch_internal();
    if (gLogDatapath)
    {
      os_log_type_t v46 = __nwlog_obj();
      if (os_log_type_enabled(v46, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446978;
        os_log_type_t v59 = "nw_protocol_create_internal";
        __int16 v60 = 2080;
        uint64_t v61 = a1;
        __int16 v62 = 2080;
        logging_description = nw_endpoint_get_logging_description(a2);
        __int16 v64 = 2112;
        BOOL v65 = a3;
        _os_log_impl(&dword_1830D4000, v46, OS_LOG_TYPE_DEBUG, "%{public}s creating protocol %s (endpoint: %s, parameters: %@)", buf, 0x2Au);
      }
    }
    os_unfair_lock_lock(&nw_protocol_registrar_lock);
    id v8 = &g_registration_list;
    do
    {
      id v8 = (uint64_t *)*v8;
      if (!v8)
      {
        if (gLogDatapath)
        {
          os_log_type_t v47 = __nwlog_obj();
          if (os_log_type_enabled(v47, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136446722;
            os_log_type_t v59 = "nw_protocol_create_internal";
            __int16 v60 = 2080;
            uint64_t v61 = a1;
            __int16 v62 = 2048;
            logging_description = (const char *)a1;
            _os_log_impl(&dword_1830D4000, v47, OS_LOG_TYPE_DEBUG, "%{public}s failed to find registration for identifier %s (%p)", buf, 0x20u);
          }
        }
        uint64_t v14 = 0;
        goto LABEL_38;
      }
    }
    while (*(void *)a1 != v8[4]
         || *(void *)(a1 + 8) != v8[5]
         || *(void *)(a1 + 16) != v8[6]
         || *(void *)(a1 + 24) != v8[7]
         || *(void *)(a1 + 32) != v8[8]);
    char v13 = (uint64_t (*)(uint64_t, uint64_t, void *, const char *))v8[12];
    if (v13)
    {
      uint64_t v14 = v13(a1, v8[14], a2, a3);
      if (!a3) {
        goto LABEL_37;
      }
LABEL_28:
      if (!a2 || !a4 || !v14 || !v8[13]) {
        goto LABEL_37;
      }
      os_log_type_t v16 = a2;
      BOOL v17 = (v16[231] & 4) == 0;

      if (v17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v18 = nw_endpoint_get_logging_description(v16);
        *(_DWORD *)buf = 136446466;
        os_log_type_t v59 = "nw_protocol_create_internal";
        __int16 v60 = 2080;
        uint64_t v61 = (uint64_t)v18;
        uint64_t v19 = (char *)_os_log_send_and_compose_impl();
        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v56 = 0;
        if (!__nwlog_fault(v19, &type, &v56)) {
          goto LABEL_76;
        }
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v20 = gLogObj;
          os_log_type_t v21 = type;
          if (os_log_type_enabled((os_log_t)gLogObj, type))
          {
            os_log_type_t v22 = nw_endpoint_get_logging_description(v16);
            *(_DWORD *)buf = 136446466;
            os_log_type_t v59 = "nw_protocol_create_internal";
            __int16 v60 = 2080;
            uint64_t v61 = (uint64_t)v22;
            BOOL v23 = "%{public}s endpoint %s is not registered, cannot add instance for joining";
            goto LABEL_69;
          }
          goto LABEL_76;
        }
        if (v56)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v20 = gLogObj;
          os_log_type_t v21 = type;
          BOOL v31 = os_log_type_enabled((os_log_t)gLogObj, type);
          if (backtrace_string)
          {
            if (v31)
            {
              id v32 = nw_endpoint_get_logging_description(v16);
              *(_DWORD *)buf = 136446722;
              os_log_type_t v59 = "nw_protocol_create_internal";
              __int16 v60 = 2080;
              uint64_t v61 = (uint64_t)v32;
              __int16 v62 = 2082;
              logging_description = backtrace_string;
              _os_log_impl(&dword_1830D4000, v20, v21, "%{public}s endpoint %s is not registered, cannot add instance for joining, dumping backtrace:%{public}s", buf, 0x20u);
            }
            free(backtrace_string);
            goto LABEL_76;
          }
          if (v31)
          {
            __int16 v38 = nw_endpoint_get_logging_description(v16);
            *(_DWORD *)buf = 136446466;
            os_log_type_t v59 = "nw_protocol_create_internal";
            __int16 v60 = 2080;
            uint64_t v61 = (uint64_t)v38;
            BOOL v23 = "%{public}s endpoint %s is not registered, cannot add instance for joining, no backtrace";
            goto LABEL_69;
          }
LABEL_76:
          if (!v19) {
            goto LABEL_38;
          }
LABEL_77:
          free(v19);
          goto LABEL_38;
        }
        os_log_type_t v20 = __nwlog_obj();
        os_log_type_t v21 = type;
        if (!os_log_type_enabled(v20, type)) {
          goto LABEL_76;
        }
        uint32_t v35 = nw_endpoint_get_logging_description(v16);
        *(_DWORD *)buf = 136446466;
        os_log_type_t v59 = "nw_protocol_create_internal";
        __int16 v60 = 2080;
        uint64_t v61 = (uint64_t)v35;
        BOOL v23 = "%{public}s endpoint %s is not registered, cannot add instance for joining, backtrace limit exceeded";
LABEL_69:
        os_log_type_t v39 = v20;
        os_log_type_t v40 = v21;
        uint32_t v41 = 22;
LABEL_75:
        _os_log_impl(&dword_1830D4000, v39, v40, v23, buf, v41);
        goto LABEL_76;
      }
      if (gLogDatapath)
      {
        os_log_type_t v53 = __nwlog_obj();
        if (os_log_type_enabled(v53, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v54 = v8[13];
          os_log_type_t v55 = nw_endpoint_get_logging_description(v16);
          *(_DWORD *)buf = 136447234;
          os_log_type_t v59 = "nw_protocol_create_internal";
          __int16 v60 = 2048;
          uint64_t v61 = v14;
          __int16 v62 = 2080;
          logging_description = (const char *)a1;
          __int16 v64 = 2048;
          BOOL v65 = (const char *)v54;
          __int16 v66 = 2080;
          os_log_type_t v67 = v55;
          _os_log_impl(&dword_1830D4000, v53, OS_LOG_TYPE_DEBUG, "%{public}s created protocol instance %p of %s with accept function %p to endpoint %s", buf, 0x34u);
        }
      }
      uint64_t v25 = v8[9];
      if (!v25) {
        goto LABEL_47;
      }
      os_log_type_t v27 = *(void **)(v25 + 16);
      uint64_t v26 = *(void **)(v25 + 24);
      if (v27 != v26)
      {
        while ((unsigned char *)*v27 != v16)
        {
          if (++v27 == v26)
          {
            os_log_type_t v27 = *(void **)(v25 + 24);
            break;
          }
        }
      }
      if (v27 == v26) {
LABEL_47:
      }
        nw_array_append(v25, v16);
      id v28 = nw_endpoint_copy_registrar_for_identifier(v16, (long long *)a1, 1);
      if (v28)
      {
        __int16 v29 = v28;
        nw_protocol_instance_registrar_add_instance(v28, v14);
        os_release(v29);
        goto LABEL_38;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      *(_DWORD *)buf = 136446210;
      os_log_type_t v59 = "nw_protocol_create_internal";
      uint64_t v19 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v56 = 0;
      if (!__nwlog_fault(v19, &type, &v56)) {
        goto LABEL_76;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v33 = __nwlog_obj();
        os_log_type_t v34 = type;
        if (!os_log_type_enabled(v33, type)) {
          goto LABEL_76;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v59 = "nw_protocol_create_internal";
        BOOL v23 = "%{public}s nw_endpoint_get_registrar(endpoint, true) failed";
        goto LABEL_74;
      }
      if (v56)
      {
        uint64_t v36 = (char *)__nw_create_backtrace_string();
        os_log_type_t v33 = __nwlog_obj();
        os_log_type_t v34 = type;
        BOOL v37 = os_log_type_enabled(v33, type);
        if (v36)
        {
          if (v37)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v59 = "nw_protocol_create_internal";
            __int16 v60 = 2082;
            uint64_t v61 = (uint64_t)v36;
            _os_log_impl(&dword_1830D4000, v33, v34, "%{public}s nw_endpoint_get_registrar(endpoint, true) failed, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v36);
          if (v19) {
            goto LABEL_77;
          }
          goto LABEL_38;
        }
        if (!v37) {
          goto LABEL_76;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v59 = "nw_protocol_create_internal";
        BOOL v23 = "%{public}s nw_endpoint_get_registrar(endpoint, true) failed, no backtrace";
      }
      else
      {
        os_log_type_t v33 = __nwlog_obj();
        os_log_type_t v34 = type;
        if (!os_log_type_enabled(v33, type)) {
          goto LABEL_76;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v59 = "nw_protocol_create_internal";
        BOOL v23 = "%{public}s nw_endpoint_get_registrar(endpoint, true) failed, backtrace limit exceeded";
      }
LABEL_74:
      os_log_type_t v39 = v33;
      os_log_type_t v40 = v34;
      uint32_t v41 = 12;
      goto LABEL_75;
    }
    BOOL v15 = (uint64_t (*)(uint64_t, void *, const char *))v8[11];
    if (!v15)
    {
      uint64_t v14 = ((uint64_t (*)(uint64_t))v8[10])(a1);
      if (!a3) {
        goto LABEL_37;
      }
      goto LABEL_28;
    }
    uint64_t v14 = v15(a1, a2, a3);
    if (a3) {
      goto LABEL_28;
    }
LABEL_37:
    if (gLogDatapath)
    {
      BOOL v50 = __nwlog_obj();
      if (os_log_type_enabled(v50, OS_LOG_TYPE_DEBUG))
      {
        int v51 = nw_endpoint_get_logging_description(a2);
        uint64_t v52 = v8[13];
        *(_DWORD *)buf = 136447490;
        os_log_type_t v59 = "nw_protocol_create_internal";
        __int16 v60 = 2080;
        uint64_t v61 = a1;
        __int16 v62 = 2048;
        logging_description = (const char *)v14;
        __int16 v64 = 2080;
        BOOL v65 = v51;
        __int16 v66 = 2048;
        os_log_type_t v67 = a3;
        __int16 v68 = 2048;
        uint64_t v69 = v52;
        _os_log_impl(&dword_1830D4000, v50, OS_LOG_TYPE_DEBUG, "%{public}s protocol %s (%p) not eligible, endpoint %s, parameters %p, accept function %p", buf, 0x3Eu);
      }
    }
LABEL_38:
    os_unfair_lock_unlock(&nw_protocol_registrar_lock);
    return v14;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v59 = "nw_protocol_create_internal";
  BOOL v42 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v56 = 0;
  if (__nwlog_fault(v42, &type, &v56))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v43 = __nwlog_obj();
      os_log_type_t v44 = type;
      if (os_log_type_enabled(v43, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v59 = "nw_protocol_create_internal";
        BOOL v45 = "%{public}s called with null identifier";
LABEL_97:
        _os_log_impl(&dword_1830D4000, v43, v44, v45, buf, 0xCu);
      }
    }
    else if (v56)
    {
      char v48 = (char *)__nw_create_backtrace_string();
      BOOL v43 = __nwlog_obj();
      os_log_type_t v44 = type;
      BOOL v49 = os_log_type_enabled(v43, type);
      if (v48)
      {
        if (v49)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v59 = "nw_protocol_create_internal";
          __int16 v60 = 2082;
          uint64_t v61 = (uint64_t)v48;
          _os_log_impl(&dword_1830D4000, v43, v44, "%{public}s called with null identifier, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v48);
        goto LABEL_98;
      }
      if (v49)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v59 = "nw_protocol_create_internal";
        BOOL v45 = "%{public}s called with null identifier, no backtrace";
        goto LABEL_97;
      }
    }
    else
    {
      BOOL v43 = __nwlog_obj();
      os_log_type_t v44 = type;
      if (os_log_type_enabled(v43, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v59 = "nw_protocol_create_internal";
        BOOL v45 = "%{public}s called with null identifier, backtrace limit exceeded";
        goto LABEL_97;
      }
    }
  }
LABEL_98:
  if (v42) {
    free(v42);
  }
  return 0;
}

uint64_t nw_fd_wrapper_get_fd(void *a1, void *a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1;
  long long v4 = a2;
  if (!v3)
  {
    id v7 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v18 = "nw_fd_wrapper_get_fd";
    id v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v15 = 0;
    if (__nwlog_fault(v8, &type, &v15))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        id v9 = __nwlog_obj();
        os_log_type_t v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v18 = "nw_fd_wrapper_get_fd";
          _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null wrapper", buf, 0xCu);
        }
      }
      else if (v15)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        id v9 = __nwlog_obj();
        os_log_type_t v12 = type;
        BOOL v13 = os_log_type_enabled(v9, type);
        if (backtrace_string)
        {
          if (v13)
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v18 = "nw_fd_wrapper_get_fd";
            __int16 v19 = 2082;
            os_log_type_t v20 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null wrapper, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_23;
        }
        if (v13)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v18 = "nw_fd_wrapper_get_fd";
          _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null wrapper, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        id v9 = __nwlog_obj();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v18 = "nw_fd_wrapper_get_fd";
          _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null wrapper, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_23:
    if (v8) {
      free(v8);
    }
    goto LABEL_5;
  }
  os_unfair_lock_lock(v3 + 3);
  if ((v3[2]._os_unfair_lock_opaque & 0x80000000) != 0)
  {
    os_unfair_lock_unlock(v3 + 3);
LABEL_5:
    uint64_t v5 = 0;
    goto LABEL_6;
  }
  uint64_t v5 = v4[2](v4);
  os_unfair_lock_unlock(v3 + 3);
LABEL_6:

  return v5;
}

void sub_183200D48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_socket_set_connected_fd_block_invoke(uint64_t a1, int a2)
{
  *(_DWORD *)(*(void *)(a1 + 32) + 172) = a2;
  return 1;
}

uint64_t __nw_endpoint_flow_set_pre_connected_fd_block_invoke(uint64_t a1, int a2)
{
  *(_DWORD *)(*(void *)(a1 + 32) + 900) = a2;
  return 1;
}

void nw_protocol_instance_registrar_add_instance(void *a1, uint64_t a2)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1;
  if (!v3)
  {
    uint64_t v5 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_instance_registrar_add_instance";
    int v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (!__nwlog_fault(v6, &type, &v25)) {
      goto LABEL_42;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_instance_registrar_add_instance";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null registrar", buf, 0xCu);
      }
    }
    else if (v25)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v7 = __nwlog_obj();
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_instance_registrar_add_instance";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v14, "%{public}s called with null registrar, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_42:
        if (!v6) {
          goto LABEL_5;
        }
LABEL_43:
        free(v6);
        goto LABEL_5;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_instance_registrar_add_instance";
        _os_log_impl(&dword_1830D4000, v7, v14, "%{public}s called with null registrar, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v7 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_instance_registrar_add_instance";
        _os_log_impl(&dword_1830D4000, v7, v19, "%{public}s called with null registrar, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_41:

    goto LABEL_42;
  }
  if (*(void *)(a2 + 16))
  {
    if (gLogDatapath)
    {
      char v11 = __nwlog_obj();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v12 = *(void *)(a2 + 16);
        *(_DWORD *)buf = 136446978;
        *(void *)&uint8_t buf[4] = "nw_protocol_instance_registrar_add_instance";
        *(_WORD *)&unsigned char buf[12] = 2112;
        *(void *)&buf[14] = v3;
        *(_WORD *)&buf[22] = 2048;
        uint64_t v28 = a2;
        __int16 v29 = 2080;
        uint64_t v30 = v12;
        _os_log_impl(&dword_1830D4000, v11, OS_LOG_TYPE_DEBUG, "%{public}s %@ adding instance %p (%s)", buf, 0x2Au);
      }
    }
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000;
    uint64_t v28 = 0;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 3221225472;
    aBlock[2] = __nw_protocol_instance_registrar_add_instance_block_invoke;
    aBlock[3] = &unk_1E524BAF8;
    BOOL v23 = buf;
    uint64_t v24 = a2;
    os_log_type_t v22 = v3;
    long long v4 = (void (**)(void))_Block_copy(aBlock);
    os_unfair_lock_lock(v3 + 2);
    v4[2](v4);
    os_unfair_lock_unlock(v3 + 2);

    _Block_object_dispose(buf, 8);
    goto LABEL_5;
  }
  id v9 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_protocol_instance_registrar_add_instance";
  int v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v25 = 0;
  if (!__nwlog_fault(v6, &type, &v25)) {
    goto LABEL_42;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    id v7 = __nwlog_obj();
    os_log_type_t v10 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_instance_registrar_add_instance";
      _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null protocol->identifier", buf, 0xCu);
    }
    goto LABEL_41;
  }
  if (!v25)
  {
    id v7 = __nwlog_obj();
    os_log_type_t v20 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_instance_registrar_add_instance";
      _os_log_impl(&dword_1830D4000, v7, v20, "%{public}s called with null protocol->identifier, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_41;
  }
  os_log_type_t v16 = (char *)__nw_create_backtrace_string();
  id v7 = __nwlog_obj();
  os_log_type_t v17 = type;
  BOOL v18 = os_log_type_enabled(v7, type);
  if (!v16)
  {
    if (v18)
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_instance_registrar_add_instance";
      _os_log_impl(&dword_1830D4000, v7, v17, "%{public}s called with null protocol->identifier, no backtrace", buf, 0xCu);
    }
    goto LABEL_41;
  }
  if (v18)
  {
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_protocol_instance_registrar_add_instance";
    *(_WORD *)&unsigned char buf[12] = 2082;
    *(void *)&buf[14] = v16;
    _os_log_impl(&dword_1830D4000, v7, v17, "%{public}s called with null protocol->identifier, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v16);
  if (v6) {
    goto LABEL_43;
  }
LABEL_5:
}

void sub_183201368(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __nw_protocol_instance_registrar_add_instance_block_invoke(void *a1, __n128 a2)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void **)(a1[4] + 16);
  if (!v3) {
    goto LABEL_15;
  }
  char v4 = 0;
  a2.n128_u64[0] = 136447234;
  do
  {
    uint64_t v5 = v3;
    uint64_t v3 = (void *)*v3;
    if (v5[2] == a1[6])
    {
      *(void *)(*(void *)(a1[5] + 8) + 24) = v5;
      if (gLogDatapath)
      {
        __n128 v35 = a2;
        int v6 = __nwlog_obj();
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v7 = a1[4];
          uint64_t v8 = *(void *)(*(void *)(a1[5] + 8) + 24);
          uint64_t v9 = a1[6];
          os_log_type_t v10 = *(char **)(v9 + 16);
          *(_DWORD *)buf = v35.n128_u32[0];
          os_log_type_t v39 = "nw_protocol_instance_registrar_add_instance_block_invoke";
          __int16 v40 = 2112;
          uint64_t v41 = v7;
          __int16 v42 = 2048;
          uint64_t v43 = v8;
          __int16 v44 = 2048;
          uint64_t v45 = v9;
          __int16 v46 = 2080;
          os_log_type_t v47 = v10;
          _os_log_impl(&dword_1830D4000, v6, OS_LOG_TYPE_DEBUG, "%{public}s %@ had existing entry %p for instance %p (%s)", buf, 0x34u);
        }

        char v4 = 1;
        a2 = v35;
      }
      else
      {
        char v4 = 1;
      }
    }
  }
  while (v3);
  if ((v4 & 1) == 0)
  {
LABEL_15:
    os_log_type_t v14 = malloc_type_calloc(1uLL, 0x20uLL, 0xEAFB8F1AuLL);
    if (!v14)
    {
      os_log_type_t v33 = __nwlog_obj();
      os_log_type_enabled(v33, OS_LOG_TYPE_ERROR);
      *(_DWORD *)buf = 136446722;
      os_log_type_t v39 = "strict_calloc";
      __int16 v40 = 2048;
      uint64_t v41 = 1;
      __int16 v42 = 2048;
      uint64_t v43 = 32;
      os_log_type_t v34 = (void *)_os_log_send_and_compose_impl();

      if (__nwlog_abort((uint64_t)v34))
      {
        __break(1u);
        return;
      }
      free(v34);
    }
    v14[2] = a1[6];
    uint64_t v15 = *(void *)(a1[4] + 16);
    void *v14 = v15;
    if (v15) {
      *(void *)(*(void *)(a1[4] + 16) + 8) = v14;
    }
    *(void *)(a1[4] + 16) = v14;
    uint64_t v16 = a1[4];
    v14[1] = v16 + 16;
    uint64_t v17 = *(void *)(v16 + 64);
    uint64_t v18 = v17 + 1;
    uint64_t v19 = v17 == -1;
    uint64_t v20 = v19 << 63 >> 63;
    *(void *)(v16 + 64) = v18;
    if (v20 == v19 && (v20 & 0x8000000000000000) == 0) {
      goto LABEL_32;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v21 = (id)gLogObj;
    uint64_t v22 = *(void *)(a1[4] + 64);
    *(_DWORD *)buf = 136446978;
    os_log_type_t v39 = "nw_protocol_instance_registrar_add_instance_block_invoke";
    __int16 v40 = 2082;
    uint64_t v41 = (uint64_t)"registrar->instance_count";
    __int16 v42 = 2048;
    uint64_t v43 = 1;
    __int16 v44 = 2048;
    uint64_t v45 = v22;
    BOOL v23 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v36 = 0;
    if (__nwlog_fault(v23, &type, &v36))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v24 = (id)gLogObj;
        os_log_type_t v25 = type;
        if (!os_log_type_enabled(v24, type)) {
          goto LABEL_39;
        }
        uint64_t v26 = *(void *)(a1[4] + 64);
        *(_DWORD *)buf = 136446978;
        os_log_type_t v39 = "nw_protocol_instance_registrar_add_instance_block_invoke";
        __int16 v40 = 2082;
        uint64_t v41 = (uint64_t)"registrar->instance_count";
        __int16 v42 = 2048;
        uint64_t v43 = 1;
        __int16 v44 = 2048;
        uint64_t v45 = v26;
        os_log_type_t v27 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
        goto LABEL_38;
      }
      if (!v36)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v24 = (id)gLogObj;
        os_log_type_t v25 = type;
        if (!os_log_type_enabled(v24, type)) {
          goto LABEL_39;
        }
        uint64_t v31 = *(void *)(a1[4] + 64);
        *(_DWORD *)buf = 136446978;
        os_log_type_t v39 = "nw_protocol_instance_registrar_add_instance_block_invoke";
        __int16 v40 = 2082;
        uint64_t v41 = (uint64_t)"registrar->instance_count";
        __int16 v42 = 2048;
        uint64_t v43 = 1;
        __int16 v44 = 2048;
        uint64_t v45 = v31;
        os_log_type_t v27 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
        goto LABEL_38;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v24 = (id)gLogObj;
      os_log_type_t v25 = type;
      BOOL v29 = os_log_type_enabled(v24, type);
      if (!backtrace_string)
      {
        if (!v29) {
          goto LABEL_39;
        }
        uint64_t v32 = *(void *)(a1[4] + 64);
        *(_DWORD *)buf = 136446978;
        os_log_type_t v39 = "nw_protocol_instance_registrar_add_instance_block_invoke";
        __int16 v40 = 2082;
        uint64_t v41 = (uint64_t)"registrar->instance_count";
        __int16 v42 = 2048;
        uint64_t v43 = 1;
        __int16 v44 = 2048;
        uint64_t v45 = v32;
        os_log_type_t v27 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
LABEL_38:
        _os_log_impl(&dword_1830D4000, v24, v25, v27, buf, 0x2Au);
LABEL_39:

        if (!v23) {
          goto LABEL_31;
        }
        goto LABEL_30;
      }
      if (v29)
      {
        uint64_t v30 = *(void *)(a1[4] + 64);
        *(_DWORD *)buf = 136447234;
        os_log_type_t v39 = "nw_protocol_instance_registrar_add_instance_block_invoke";
        __int16 v40 = 2082;
        uint64_t v41 = (uint64_t)"registrar->instance_count";
        __int16 v42 = 2048;
        uint64_t v43 = 1;
        __int16 v44 = 2048;
        uint64_t v45 = v30;
        __int16 v46 = 2082;
        os_log_type_t v47 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v24, v25, "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
      }

      free(backtrace_string);
    }
    if (!v23)
    {
LABEL_31:
      *(void *)(a1[4] + 64) = -1;
LABEL_32:
      *(void *)(*(void *)(a1[5] + 8) + 24) = v14;
      return;
    }
LABEL_30:
    free(v23);
    goto LABEL_31;
  }
  if (gLogDatapath)
  {
    char v11 = __nwlog_obj();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v12 = a1[4];
      uint64_t v13 = a1[6];
      *(_DWORD *)buf = 136446722;
      os_log_type_t v39 = "nw_protocol_instance_registrar_add_instance_block_invoke";
      __int16 v40 = 2112;
      uint64_t v41 = v12;
      __int16 v42 = 2048;
      uint64_t v43 = v13;
      _os_log_impl(&dword_1830D4000, v11, OS_LOG_TYPE_DEBUG, "%{public}s Registrar %@ already has instance for protocol %p", buf, 0x20u);
    }
  }
}

uint64_t __nw_establishment_report_create_from_dictionary_block_invoke_3(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (object_getClass(v4) != (Class)MEMORY[0x1E4F14590]) {
    goto LABEL_21;
  }
  string = xpc_dictionary_get_string(v4, "protocol");
  if (!strcmp(string, "tcp"))
  {
    if (nw_protocol_setup_tcp_definition(void)::onceToken != -1) {
      dispatch_once(&nw_protocol_setup_tcp_definition(void)::onceToken, &__block_literal_global_64304);
    }
    int v6 = &g_tcp_definition;
LABEL_17:
    id v7 = (id)*v6;
    if (!v7) {
      goto LABEL_21;
    }
    goto LABEL_18;
  }
  if (strcmp(string, "tls"))
  {
    if (!strcmp(string, "quic"))
    {
      if (nw_protocol_copy_quic_stream_definition::onceToken != -1) {
        dispatch_once(&nw_protocol_copy_quic_stream_definition::onceToken, &__block_literal_global_15_56153);
      }
      int v6 = &nw_protocol_copy_quic_stream_definition::quic_definition;
    }
    else
    {
      if (strcmp(string, "quic-connection")) {
        goto LABEL_21;
      }
      if (nw_protocol_copy_quic_connection_definition::onceToken != -1) {
        dispatch_once(&nw_protocol_copy_quic_connection_definition::onceToken, &__block_literal_global_55981);
      }
      int v6 = &nw_protocol_copy_quic_connection_definition::quic_definition;
    }
    goto LABEL_17;
  }
  id v7 = (id)nw_protocol_boringssl_copy_definition();
  if (!v7) {
    goto LABEL_21;
  }
LABEL_18:
  uint64_t v8 = objc_alloc_init(NWConcrete_nw_protocol_establishment_report);
  uint64_t v9 = v8;
  if (v8)
  {
    objc_storeStrong((id *)&v8->protocol, v7);
    v9->handshake_milliseconds = xpc_dictionary_get_uint64(v4, "handshake_milliseconds");
    v9->handshake_rtt_milliseconds = xpc_dictionary_get_uint64(v4, "handshake_rtt_milliseconds");
    v9->client_accurate_ecn_int state = xpc_dictionary_get_uint64(v4, "client_accurate_ecn_state");
    v9->server_accurate_ecn_int state = xpc_dictionary_get_uint64(v4, "server_accurate_ecn_state");
    *((unsigned char *)v9 + 40) = *((unsigned char *)v9 + 40) & 0xFE | xpc_dictionary_get_BOOL(v4, "l4s_enabled");
    nw_array_append(*(void *)(*(void *)(a1 + 32) + 64), v9);
  }

LABEL_21:
  return 1;
}

void sub_183201C0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

NWConcrete_nw_protocol_establishment_report *nw_protocol_establishment_report_create(void *a1, unint64_t a2, unint64_t a3)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  id v6 = a1;
  if (v6)
  {
    id v7 = objc_alloc_init(NWConcrete_nw_protocol_establishment_report);
    uint64_t v8 = v7;
    if (v7)
    {
      objc_storeStrong((id *)&v7->protocol, a1);
      v8->handshake_milliseconds = a2;
      v8->handshake_rtt_milliseconds = a3;
      uint64_t v9 = v8;
LABEL_4:

      goto LABEL_5;
    }
    uint64_t v15 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v30 = "nw_protocol_establishment_report_create";
    uint64_t v16 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v27 = 0;
    if (__nwlog_fault(v16, &type, &v27))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v17 = __nwlog_obj();
        os_log_type_t v18 = type;
        if (os_log_type_enabled(v17, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v30 = "nw_protocol_establishment_report_create";
          _os_log_impl(&dword_1830D4000, v17, v18, "%{public}s called with null report", buf, 0xCu);
        }
      }
      else if (v27)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        uint64_t v17 = __nwlog_obj();
        os_log_type_t v23 = type;
        BOOL v24 = os_log_type_enabled(v17, type);
        if (backtrace_string)
        {
          if (v24)
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v30 = "nw_protocol_establishment_report_create";
            __int16 v31 = 2082;
            uint64_t v32 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v17, v23, "%{public}s called with null report, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_41;
        }
        if (v24)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v30 = "nw_protocol_establishment_report_create";
          _os_log_impl(&dword_1830D4000, v17, v23, "%{public}s called with null report, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        uint64_t v17 = __nwlog_obj();
        os_log_type_t v26 = type;
        if (os_log_type_enabled(v17, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v30 = "nw_protocol_establishment_report_create";
          _os_log_impl(&dword_1830D4000, v17, v26, "%{public}s called with null report, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_41:
    if (v16) {
      free(v16);
    }
    goto LABEL_4;
  }
  char v11 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v30 = "nw_protocol_establishment_report_create";
  uint64_t v12 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v27 = 0;
  if (__nwlog_fault(v12, &type, &v27))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v30 = "nw_protocol_establishment_report_create";
        _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s called with null protocol", buf, 0xCu);
      }
    }
    else if (v27)
    {
      uint64_t v19 = (char *)__nw_create_backtrace_string();
      uint64_t v13 = __nwlog_obj();
      os_log_type_t v20 = type;
      BOOL v21 = os_log_type_enabled(v13, type);
      if (v19)
      {
        if (v21)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v30 = "nw_protocol_establishment_report_create";
          __int16 v31 = 2082;
          uint64_t v32 = v19;
          _os_log_impl(&dword_1830D4000, v13, v20, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v19);
        goto LABEL_35;
      }
      if (v21)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v30 = "nw_protocol_establishment_report_create";
        _os_log_impl(&dword_1830D4000, v13, v20, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v13 = __nwlog_obj();
      os_log_type_t v25 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v30 = "nw_protocol_establishment_report_create";
        _os_log_impl(&dword_1830D4000, v13, v25, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_35:
  if (v12) {
    free(v12);
  }
  uint64_t v8 = 0;
LABEL_5:

  return v8;
}

void sub_18320210C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __NWUtilsCreateNSArrayFromXPCArray_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  Class Class = object_getClass(v4);
  if (Class == (Class)MEMORY[0x1E4F14568])
  {
    id v7 = (void *)MEMORY[0x1E4F1CA48];
    id v8 = v4;
    uint64_t v9 = [v7 array];
    uint64_t applier = MEMORY[0x1E4F143A8];
    uint64_t v14 = 3221225472;
    uint64_t v15 = __NWUtilsCreateNSArrayFromXPCArray_block_invoke;
    uint64_t v16 = &unk_1E524B4A0;
    id NSObjectFromSimpleXPCObject = v9;
    id v17 = NSObjectFromSimpleXPCObject;
    xpc_array_apply(v8, &applier);
  }
  else
  {
    if (Class != (Class)MEMORY[0x1E4F14590])
    {
      id NSObjectFromSimpleXPCObject = NWUtilsCreateNSObjectFromSimpleXPCObject(v4);
      if (!NSObjectFromSimpleXPCObject) {
        goto LABEL_9;
      }
      goto LABEL_8;
    }
    os_log_type_t v10 = (void *)MEMORY[0x1E4F1CA60];
    id v8 = v4;
    char v11 = [v10 dictionary];
    uint64_t applier = MEMORY[0x1E4F143A8];
    uint64_t v14 = 3221225472;
    uint64_t v15 = __NWUtilsCreateNSDictionaryFromXPCDictionary_block_invoke;
    uint64_t v16 = &unk_1E52480D0;
    id NSObjectFromSimpleXPCObject = v11;
    id v17 = NSObjectFromSimpleXPCObject;
    xpc_dictionary_apply(v8, &applier);
  }

  if (NSObjectFromSimpleXPCObject) {
LABEL_8:
  }
    [*(id *)(a1 + 32) addObject:NSObjectFromSimpleXPCObject];
LABEL_9:

  return 1;
}

uint64_t ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke(uint64_t a1, int a2)
{
  char v3 = 0;
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = nw_network_agent_ctl_copy_received_agent_message(a2, &v3);
  return 1;
}

uint64_t nw_network_agent_ctl_copy_received_agent_message(int a1, unsigned char *a2)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v61 = "nw_network_agent_ctl_copy_received_agent_message";
    uint64_t v6 = _os_log_send_and_compose_impl();
    v57[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault((const char *)v6, v57, &type)) {
      goto LABEL_78;
    }
    if (v57[0] == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v53 = __nwlog_obj();
      os_log_type_t v54 = v57[0];
      if (!os_log_type_enabled(v53, v57[0])) {
        goto LABEL_78;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v61 = "nw_network_agent_ctl_copy_received_agent_message";
      uint64_t v9 = "%{public}s called with null no_message_available";
    }
    else if (type)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v53 = __nwlog_obj();
      os_log_type_t v54 = v57[0];
      BOOL v55 = os_log_type_enabled(v53, v57[0]);
      if (backtrace_string)
      {
        if (!v55)
        {
LABEL_64:
          free(backtrace_string);
          if (!v6) {
            return 0;
          }
          goto LABEL_79;
        }
        *(_DWORD *)buf = 136446466;
        uint64_t v61 = "nw_network_agent_ctl_copy_received_agent_message";
        __int16 v62 = 2082;
        *(void *)__int16 v63 = backtrace_string;
        uint64_t v32 = "%{public}s called with null no_message_available, dumping backtrace:%{public}s";
        uint64_t v33 = v53;
        os_log_type_t v34 = v54;
        uint32_t v35 = 22;
        goto LABEL_63;
      }
      if (!v55) {
        goto LABEL_78;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v61 = "nw_network_agent_ctl_copy_received_agent_message";
      uint64_t v9 = "%{public}s called with null no_message_available, no backtrace";
    }
    else
    {
      os_log_type_t v53 = __nwlog_obj();
      os_log_type_t v54 = v57[0];
      if (!os_log_type_enabled(v53, v57[0])) {
        goto LABEL_78;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v61 = "nw_network_agent_ctl_copy_received_agent_message";
      uint64_t v9 = "%{public}s called with null no_message_available, backtrace limit exceeded";
    }
    __int16 v38 = v53;
    os_log_type_t v39 = v54;
    uint32_t v40 = 12;
    goto LABEL_77;
  }
  *a2 = 0;
  if (a1 < 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446466;
    uint64_t v61 = "nw_network_agent_ctl_copy_received_agent_message";
    __int16 v62 = 1024;
    *(_DWORD *)__int16 v63 = a1;
    uint64_t v6 = _os_log_send_and_compose_impl();
    v57[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault((const char *)v6, v57, &type)) {
      goto LABEL_78;
    }
    if (v57[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v10 = gLogObj;
      os_log_type_t v11 = v57[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, v57[0])) {
        goto LABEL_78;
      }
      *(_DWORD *)buf = 136446466;
      uint64_t v61 = "nw_network_agent_ctl_copy_received_agent_message";
      __int16 v62 = 1024;
      *(_DWORD *)__int16 v63 = a1;
      uint64_t v9 = "%{public}s Trying to read from invalid network agent socket %d";
    }
    else if (type)
    {
      uint64_t v15 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v10 = gLogObj;
      os_log_type_t v11 = v57[0];
      BOOL v16 = os_log_type_enabled((os_log_t)gLogObj, v57[0]);
      if (v15)
      {
        if (!v16) {
          goto LABEL_35;
        }
        *(_DWORD *)buf = 136446722;
        uint64_t v61 = "nw_network_agent_ctl_copy_received_agent_message";
        __int16 v62 = 1024;
        *(_DWORD *)__int16 v63 = a1;
        *(_WORD *)&v63[4] = 2082;
        *(void *)&v63[6] = v15;
        id v17 = "%{public}s Trying to read from invalid network agent socket %d, dumping backtrace:%{public}s";
        os_log_type_t v18 = v10;
        os_log_type_t v19 = v11;
        uint32_t v20 = 28;
        goto LABEL_34;
      }
      if (!v16) {
        goto LABEL_78;
      }
      *(_DWORD *)buf = 136446466;
      uint64_t v61 = "nw_network_agent_ctl_copy_received_agent_message";
      __int16 v62 = 1024;
      *(_DWORD *)__int16 v63 = a1;
      uint64_t v9 = "%{public}s Trying to read from invalid network agent socket %d, no backtrace";
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v10 = gLogObj;
      os_log_type_t v11 = v57[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, v57[0])) {
        goto LABEL_78;
      }
      *(_DWORD *)buf = 136446466;
      uint64_t v61 = "nw_network_agent_ctl_copy_received_agent_message";
      __int16 v62 = 1024;
      *(_DWORD *)__int16 v63 = a1;
      uint64_t v9 = "%{public}s Trying to read from invalid network agent socket %d, backtrace limit exceeded";
    }
    __int16 v38 = v10;
    os_log_type_t v39 = v11;
LABEL_50:
    uint32_t v40 = 18;
LABEL_77:
    _os_log_impl(&dword_1830D4000, v38, v39, v9, buf, v40);
    goto LABEL_78;
  }
  *(void *)id v57 = 0;
  uint64_t v58 = 0;
  ssize_t v4 = recv(a1, v57, 0x10uLL, 2);
  if (v4 <= 15)
  {
    ssize_t v5 = v4;
    if ((v4 & 0x8000000000000000) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      *(_DWORD *)buf = 136446722;
      uint64_t v61 = "nw_network_agent_ctl_copy_received_agent_message";
      __int16 v62 = 2048;
      *(void *)__int16 v63 = v5;
      *(_WORD *)&v63[8] = 2048;
      *(void *)&v63[10] = 16;
      uint64_t v6 = _os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v56 = 0;
      if (!__nwlog_fault((const char *)v6, &type, &v56)) {
        goto LABEL_78;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v7 = gLogObj;
        os_log_type_t v8 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
          goto LABEL_78;
        }
        *(_DWORD *)buf = 136446722;
        uint64_t v61 = "nw_network_agent_ctl_copy_received_agent_message";
        __int16 v62 = 2048;
        *(void *)__int16 v63 = v5;
        *(_WORD *)&v63[8] = 2048;
        *(void *)&v63[10] = 16;
        uint64_t v9 = "%{public}s Not enough bytes available to read network agent message header (%zd < %zd)";
LABEL_73:
        __int16 v38 = v7;
        os_log_type_t v39 = v8;
        uint32_t v40 = 32;
        goto LABEL_77;
      }
      if (!v56)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v7 = gLogObj;
        os_log_type_t v8 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
          goto LABEL_78;
        }
        *(_DWORD *)buf = 136446722;
        uint64_t v61 = "nw_network_agent_ctl_copy_received_agent_message";
        __int16 v62 = 2048;
        *(void *)__int16 v63 = v5;
        *(_WORD *)&v63[8] = 2048;
        *(void *)&v63[10] = 16;
        uint64_t v9 = "%{public}s Not enough bytes available to read network agent message header (%zd < %zd), backtrace limit exceeded";
        goto LABEL_73;
      }
      uint64_t v15 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v7 = gLogObj;
      os_log_type_t v8 = type;
      BOOL v29 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (!v15)
      {
        if (!v29) {
          goto LABEL_78;
        }
        *(_DWORD *)buf = 136446722;
        uint64_t v61 = "nw_network_agent_ctl_copy_received_agent_message";
        __int16 v62 = 2048;
        *(void *)__int16 v63 = v5;
        *(_WORD *)&v63[8] = 2048;
        *(void *)&v63[10] = 16;
        uint64_t v9 = "%{public}s Not enough bytes available to read network agent message header (%zd < %zd), no backtrace";
        goto LABEL_73;
      }
      if (!v29)
      {
LABEL_35:
        free(v15);
        if (!v6) {
          return 0;
        }
        goto LABEL_79;
      }
      *(_DWORD *)buf = 136446978;
      uint64_t v61 = "nw_network_agent_ctl_copy_received_agent_message";
      __int16 v62 = 2048;
      *(void *)__int16 v63 = v5;
      *(_WORD *)&v63[8] = 2048;
      *(void *)&v63[10] = 16;
      *(_WORD *)&v63[18] = 2082;
      *(void *)&v63[20] = v15;
      id v17 = "%{public}s Not enough bytes available to read network agent message header (%zd < %zd), dumping backtrace:%{public}s";
      os_log_type_t v18 = v7;
      os_log_type_t v19 = v8;
      uint32_t v20 = 42;
LABEL_34:
      _os_log_impl(&dword_1830D4000, v18, v19, v17, buf, v20);
      goto LABEL_35;
    }
    int v28 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    if (v28 == 35)
    {
      uint64_t v6 = 0;
      *a2 = 1;
      return v6;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446466;
    uint64_t v61 = "nw_network_agent_ctl_copy_received_agent_message";
    __int16 v62 = 1024;
    *(_DWORD *)__int16 v63 = v28;
    uint64_t v6 = _os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v56 = 0;
    if (!__nwlog_fault((const char *)v6, &type, &v56)) {
      goto LABEL_78;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      char v36 = gLogObj;
      os_log_type_t v37 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_78;
      }
      *(_DWORD *)buf = 136446466;
      uint64_t v61 = "nw_network_agent_ctl_copy_received_agent_message";
      __int16 v62 = 1024;
      *(_DWORD *)__int16 v63 = v28;
      uint64_t v9 = "%{public}s Read network agent message header failed %{darwin.errno}d";
      goto LABEL_94;
    }
    if (v56)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      char v36 = __nwlog_obj();
      os_log_type_t v37 = type;
      BOOL v44 = os_log_type_enabled(v36, type);
      if (backtrace_string)
      {
        if (!v44) {
          goto LABEL_64;
        }
        *(_DWORD *)buf = 136446722;
        uint64_t v61 = "nw_network_agent_ctl_copy_received_agent_message";
        __int16 v62 = 1024;
        *(_DWORD *)__int16 v63 = v28;
        *(_WORD *)&v63[4] = 2082;
        *(void *)&v63[6] = backtrace_string;
        uint64_t v32 = "%{public}s Read network agent message header failed %{darwin.errno}d, dumping backtrace:%{public}s";
        uint64_t v33 = v36;
        os_log_type_t v34 = v37;
        uint32_t v35 = 28;
        goto LABEL_63;
      }
      if (v44)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v61 = "nw_network_agent_ctl_copy_received_agent_message";
        __int16 v62 = 1024;
        *(_DWORD *)__int16 v63 = v28;
        uint64_t v9 = "%{public}s Read network agent message header failed %{darwin.errno}d, no backtrace";
        goto LABEL_94;
      }
    }
    else
    {
      char v36 = __nwlog_obj();
      os_log_type_t v37 = type;
      if (os_log_type_enabled(v36, type))
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v61 = "nw_network_agent_ctl_copy_received_agent_message";
        __int16 v62 = 1024;
        *(_DWORD *)__int16 v63 = v28;
        uint64_t v9 = "%{public}s Read network agent message header failed %{darwin.errno}d, backtrace limit exceeded";
LABEL_94:
        __int16 v38 = v36;
        os_log_type_t v39 = v37;
        goto LABEL_50;
      }
    }
LABEL_78:
    if (!v6) {
      return 0;
    }
LABEL_79:
    free((void *)v6);
    return 0;
  }
  uint64_t v12 = HIDWORD(v58);
  if (HIDWORD(v58) >= 0x10E9)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446722;
    uint64_t v61 = "nw_network_agent_ctl_copy_received_agent_message";
    __int16 v62 = 1024;
    *(_DWORD *)__int16 v63 = v12;
    *(_WORD *)&v63[4] = 1024;
    *(_DWORD *)&v63[6] = 4328;
    uint64_t v6 = _os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v56 = 0;
    if (!__nwlog_fault((const char *)v6, &type, &v56)) {
      goto LABEL_78;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v13 = gLogObj;
      os_log_type_t v14 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_78;
      }
      *(_DWORD *)buf = 136446722;
      uint64_t v61 = "nw_network_agent_ctl_copy_received_agent_message";
      __int16 v62 = 1024;
      *(_DWORD *)__int16 v63 = v12;
      *(_WORD *)&v63[4] = 1024;
      *(_DWORD *)&v63[6] = 4328;
      uint64_t v9 = "%{public}s kernel returned invalid message payload length %u > %u";
LABEL_76:
      __int16 v38 = v13;
      os_log_type_t v39 = v14;
      uint32_t v40 = 24;
      goto LABEL_77;
    }
    if (!v56)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v13 = gLogObj;
      os_log_type_t v14 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_78;
      }
      *(_DWORD *)buf = 136446722;
      uint64_t v61 = "nw_network_agent_ctl_copy_received_agent_message";
      __int16 v62 = 1024;
      *(_DWORD *)__int16 v63 = v12;
      *(_WORD *)&v63[4] = 1024;
      *(_DWORD *)&v63[6] = 4328;
      uint64_t v9 = "%{public}s kernel returned invalid message payload length %u > %u, backtrace limit exceeded";
      goto LABEL_76;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v13 = gLogObj;
    os_log_type_t v14 = type;
    BOOL v31 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v31) {
        goto LABEL_78;
      }
      *(_DWORD *)buf = 136446722;
      uint64_t v61 = "nw_network_agent_ctl_copy_received_agent_message";
      __int16 v62 = 1024;
      *(_DWORD *)__int16 v63 = v12;
      *(_WORD *)&v63[4] = 1024;
      *(_DWORD *)&v63[6] = 4328;
      uint64_t v9 = "%{public}s kernel returned invalid message payload length %u > %u, no backtrace";
      goto LABEL_76;
    }
    if (!v31) {
      goto LABEL_64;
    }
    *(_DWORD *)buf = 136446978;
    uint64_t v61 = "nw_network_agent_ctl_copy_received_agent_message";
    __int16 v62 = 1024;
    *(_DWORD *)__int16 v63 = v12;
    *(_WORD *)&v63[4] = 1024;
    *(_DWORD *)&v63[6] = 4328;
    *(_WORD *)&v63[10] = 2082;
    *(void *)&v63[12] = backtrace_string;
    uint64_t v32 = "%{public}s kernel returned invalid message payload length %u > %u, dumping backtrace:%{public}s";
    uint64_t v33 = v13;
    os_log_type_t v34 = v14;
    uint32_t v35 = 34;
LABEL_63:
    _os_log_impl(&dword_1830D4000, v33, v34, v32, buf, v35);
    goto LABEL_64;
  }
  int64_t v21 = HIDWORD(v58) + 16;
  uint64_t v6 = nw_calloc_type<unsigned char>(v21);
  ssize_t v22 = recv(a1, (void *)v6, v12 + 16, 0);
  if (v22 < v21)
  {
    ssize_t v23 = v22;
    if ((v22 & 0x8000000000000000) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      *(_DWORD *)buf = 136446722;
      uint64_t v61 = "nw_network_agent_ctl_copy_received_agent_message";
      __int16 v62 = 2048;
      *(void *)__int16 v63 = v23;
      *(_WORD *)&v63[8] = 2048;
      *(void *)&v63[10] = v21;
      BOOL v24 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v56 = 0;
      if (!__nwlog_fault(v24, &type, &v56)) {
        goto LABEL_104;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v25 = gLogObj;
        os_log_type_t v26 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
          goto LABEL_104;
        }
        *(_DWORD *)buf = 136446722;
        uint64_t v61 = "nw_network_agent_ctl_copy_received_agent_message";
        __int16 v62 = 2048;
        *(void *)__int16 v63 = v23;
        *(_WORD *)&v63[8] = 2048;
        *(void *)&v63[10] = v21;
        char v27 = "%{public}s Not enough bytes available to read network agent message (%zd < %zd)";
LABEL_97:
        BOOL v50 = v25;
        os_log_type_t v51 = v26;
        uint32_t v52 = 32;
LABEL_103:
        _os_log_impl(&dword_1830D4000, v50, v51, v27, buf, v52);
        goto LABEL_104;
      }
      if (!v56)
      {
        os_log_type_t v25 = __nwlog_obj();
        os_log_type_t v26 = type;
        if (!os_log_type_enabled(v25, type)) {
          goto LABEL_104;
        }
        *(_DWORD *)buf = 136446722;
        uint64_t v61 = "nw_network_agent_ctl_copy_received_agent_message";
        __int16 v62 = 2048;
        *(void *)__int16 v63 = v23;
        *(_WORD *)&v63[8] = 2048;
        *(void *)&v63[10] = v21;
        char v27 = "%{public}s Not enough bytes available to read network agent message (%zd < %zd), backtrace limit exceeded";
        goto LABEL_97;
      }
      uint64_t v45 = (char *)__nw_create_backtrace_string();
      os_log_type_t v25 = __nwlog_obj();
      os_log_type_t v26 = type;
      BOOL v46 = os_log_type_enabled(v25, type);
      if (!v45)
      {
        if (!v46) {
          goto LABEL_104;
        }
        *(_DWORD *)buf = 136446722;
        uint64_t v61 = "nw_network_agent_ctl_copy_received_agent_message";
        __int16 v62 = 2048;
        *(void *)__int16 v63 = v23;
        *(_WORD *)&v63[8] = 2048;
        *(void *)&v63[10] = v21;
        char v27 = "%{public}s Not enough bytes available to read network agent message (%zd < %zd), no backtrace";
        goto LABEL_97;
      }
      if (v46)
      {
        *(_DWORD *)buf = 136446978;
        uint64_t v61 = "nw_network_agent_ctl_copy_received_agent_message";
        __int16 v62 = 2048;
        *(void *)__int16 v63 = v23;
        *(_WORD *)&v63[8] = 2048;
        *(void *)&v63[10] = v21;
        *(_WORD *)&v63[18] = 2082;
        *(void *)&v63[20] = v45;
        _os_log_impl(&dword_1830D4000, v25, v26, "%{public}s Not enough bytes available to read network agent message (%zd < %zd), dumping backtrace:%{public}s", buf, 0x2Au);
      }
      free(v45);
LABEL_104:
      if (!v24) {
        goto LABEL_106;
      }
      goto LABEL_105;
    }
    int v41 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446722;
    uint64_t v61 = "nw_network_agent_ctl_copy_received_agent_message";
    __int16 v62 = 2048;
    *(void *)__int16 v63 = v12 + 16;
    *(_WORD *)&v63[8] = 1024;
    *(_DWORD *)&v63[10] = v41;
    BOOL v24 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v56 = 0;
    if (!__nwlog_fault(v24, &type, &v56)) {
      goto LABEL_104;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int16 v42 = __nwlog_obj();
      os_log_type_t v43 = type;
      if (!os_log_type_enabled(v42, type)) {
        goto LABEL_104;
      }
      *(_DWORD *)buf = 136446722;
      uint64_t v61 = "nw_network_agent_ctl_copy_received_agent_message";
      __int16 v62 = 2048;
      *(void *)__int16 v63 = v21;
      *(_WORD *)&v63[8] = 1024;
      *(_DWORD *)&v63[10] = v41;
      char v27 = "%{public}s Received read error when reading network agent message (%zd bytes) %{darwin.errno}d";
    }
    else if (v56)
    {
      uint64_t v48 = (char *)__nw_create_backtrace_string();
      __int16 v42 = __nwlog_obj();
      os_log_type_t v43 = type;
      BOOL v49 = os_log_type_enabled(v42, type);
      if (v48)
      {
        if (v49)
        {
          *(_DWORD *)buf = 136446978;
          uint64_t v61 = "nw_network_agent_ctl_copy_received_agent_message";
          __int16 v62 = 2048;
          *(void *)__int16 v63 = v21;
          *(_WORD *)&v63[8] = 1024;
          *(_DWORD *)&v63[10] = v41;
          *(_WORD *)&v63[14] = 2082;
          *(void *)&v63[16] = v48;
          _os_log_impl(&dword_1830D4000, v42, v43, "%{public}s Received read error when reading network agent message (%zd bytes) %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x26u);
        }
        free(v48);
        if (!v24)
        {
LABEL_106:
          if (!v6) {
            return v6;
          }
          goto LABEL_79;
        }
LABEL_105:
        free(v24);
        goto LABEL_106;
      }
      if (!v49) {
        goto LABEL_104;
      }
      *(_DWORD *)buf = 136446722;
      uint64_t v61 = "nw_network_agent_ctl_copy_received_agent_message";
      __int16 v62 = 2048;
      *(void *)__int16 v63 = v21;
      *(_WORD *)&v63[8] = 1024;
      *(_DWORD *)&v63[10] = v41;
      char v27 = "%{public}s Received read error when reading network agent message (%zd bytes) %{darwin.errno}d, no backtrace";
    }
    else
    {
      __int16 v42 = __nwlog_obj();
      os_log_type_t v43 = type;
      if (!os_log_type_enabled(v42, type)) {
        goto LABEL_104;
      }
      *(_DWORD *)buf = 136446722;
      uint64_t v61 = "nw_network_agent_ctl_copy_received_agent_message";
      __int16 v62 = 2048;
      *(void *)__int16 v63 = v21;
      *(_WORD *)&v63[8] = 1024;
      *(_DWORD *)&v63[10] = v41;
      char v27 = "%{public}s Received read error when reading network agent message (%zd bytes) %{darwin.errno}d, backtrace limit exceeded";
    }
    BOOL v50 = v42;
    os_log_type_t v51 = v43;
    uint32_t v52 = 28;
    goto LABEL_103;
  }
  return v6;
}

void nw_parameters_get_e_proc_uuid(void *a1, _OWORD *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  ssize_t v4 = v3;
  if (v3)
  {
    *a2 = *(_OWORD *)(*((void *)v3 + 13) + 24);
    goto LABEL_3;
  }
  ssize_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v16 = "nw_parameters_get_e_proc_uuid";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_parameters_get_e_proc_uuid";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v16 = "nw_parameters_get_e_proc_uuid";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_parameters_get_e_proc_uuid";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_parameters_get_e_proc_uuid";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
LABEL_3:
}

void nw_parameters_get_proc_uuid(void *a1, _OWORD *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  ssize_t v4 = v3;
  if (v3)
  {
    *a2 = *(_OWORD *)(*((void *)v3 + 13) + 8);
    goto LABEL_3;
  }
  ssize_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v16 = "nw_parameters_get_proc_uuid";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_parameters_get_proc_uuid";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v16 = "nw_parameters_get_proc_uuid";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_parameters_get_proc_uuid";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_parameters_get_proc_uuid";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
LABEL_3:
}

BOOL __NWUtilsCreateNSDictionaryFromXPCDictionary_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  uint64_t v6 = v5;
  if (!a2)
  {
    char v36 = __nwlog_obj();
    *(_DWORD *)uint64_t applier = 136446210;
    *(void *)&applier[4] = "NWUtilsCreateNSDictionaryFromXPCDictionary_block_invoke";
    os_log_type_t v37 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v48 = 0;
    if (!__nwlog_fault(v37, &type, &v48)) {
      goto LABEL_69;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int16 v38 = __nwlog_obj();
      os_log_type_t v39 = type;
      if (os_log_type_enabled(v38, type))
      {
        *(_DWORD *)uint64_t applier = 136446210;
        *(void *)&applier[4] = "NWUtilsCreateNSDictionaryFromXPCDictionary_block_invoke";
        uint32_t v40 = "%{public}s called with null key";
LABEL_67:
        _os_log_impl(&dword_1830D4000, v38, v39, v40, applier, 0xCu);
      }
    }
    else if (v48)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __int16 v38 = __nwlog_obj();
      os_log_type_t v39 = type;
      BOOL v43 = os_log_type_enabled(v38, type);
      if (backtrace_string)
      {
        if (v43)
        {
          *(_DWORD *)uint64_t applier = 136446466;
          *(void *)&applier[4] = "NWUtilsCreateNSDictionaryFromXPCDictionary_block_invoke";
          *(_WORD *)&applier[12] = 2082;
          *(void *)&applier[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v38, v39, "%{public}s called with null key, dumping backtrace:%{public}s", applier, 0x16u);
        }

        free(backtrace_string);
LABEL_69:
        if (!v37) {
          goto LABEL_38;
        }
LABEL_70:
        free(v37);
        goto LABEL_38;
      }
      if (v43)
      {
        *(_DWORD *)uint64_t applier = 136446210;
        *(void *)&applier[4] = "NWUtilsCreateNSDictionaryFromXPCDictionary_block_invoke";
        uint32_t v40 = "%{public}s called with null key, no backtrace";
        goto LABEL_67;
      }
    }
    else
    {
      __int16 v38 = __nwlog_obj();
      os_log_type_t v39 = type;
      if (os_log_type_enabled(v38, type))
      {
        *(_DWORD *)uint64_t applier = 136446210;
        *(void *)&applier[4] = "NWUtilsCreateNSDictionaryFromXPCDictionary_block_invoke";
        uint32_t v40 = "%{public}s called with null key, backtrace limit exceeded";
        goto LABEL_67;
      }
    }
LABEL_68:

    goto LABEL_69;
  }
  if (!v5)
  {
    int v41 = __nwlog_obj();
    *(_DWORD *)uint64_t applier = 136446210;
    *(void *)&applier[4] = "NWUtilsCreateNSDictionaryFromXPCDictionary_block_invoke";
    os_log_type_t v37 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v48 = 0;
    if (!__nwlog_fault(v37, &type, &v48)) {
      goto LABEL_69;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int16 v38 = __nwlog_obj();
      os_log_type_t v39 = type;
      if (os_log_type_enabled(v38, type))
      {
        *(_DWORD *)uint64_t applier = 136446210;
        *(void *)&applier[4] = "NWUtilsCreateNSDictionaryFromXPCDictionary_block_invoke";
        uint32_t v40 = "%{public}s called with null value";
        goto LABEL_67;
      }
    }
    else
    {
      if (v48)
      {
        BOOL v44 = (char *)__nw_create_backtrace_string();
        __int16 v38 = __nwlog_obj();
        os_log_type_t v39 = type;
        BOOL v45 = os_log_type_enabled(v38, type);
        if (v44)
        {
          if (v45)
          {
            *(_DWORD *)uint64_t applier = 136446466;
            *(void *)&applier[4] = "NWUtilsCreateNSDictionaryFromXPCDictionary_block_invoke";
            *(_WORD *)&applier[12] = 2082;
            *(void *)&applier[14] = v44;
            _os_log_impl(&dword_1830D4000, v38, v39, "%{public}s called with null value, dumping backtrace:%{public}s", applier, 0x16u);
          }

          free(v44);
          if (!v37) {
            goto LABEL_38;
          }
          goto LABEL_70;
        }
        if (!v45) {
          goto LABEL_68;
        }
        *(_DWORD *)uint64_t applier = 136446210;
        *(void *)&applier[4] = "NWUtilsCreateNSDictionaryFromXPCDictionary_block_invoke";
        uint32_t v40 = "%{public}s called with null value, no backtrace";
        goto LABEL_67;
      }
      __int16 v38 = __nwlog_obj();
      os_log_type_t v39 = type;
      if (os_log_type_enabled(v38, type))
      {
        *(_DWORD *)uint64_t applier = 136446210;
        *(void *)&applier[4] = "NWUtilsCreateNSDictionaryFromXPCDictionary_block_invoke";
        uint32_t v40 = "%{public}s called with null value, backtrace limit exceeded";
        goto LABEL_67;
      }
    }
    goto LABEL_68;
  }
  Class Class = object_getClass(v5);
  if (Class == (Class)MEMORY[0x1E4F14568])
  {
    id v10 = [NSString stringWithUTF8String:a2];
    BOOL v11 = (void *)MEMORY[0x1E4F1CA48];
    id v12 = v6;
    char v13 = [v11 array];
    *(void *)uint64_t applier = MEMORY[0x1E4F143A8];
    *(void *)&applier[8] = 3221225472;
    *(void *)&applier[16] = __NWUtilsCreateNSArrayFromXPCArray_block_invoke;
    os_log_type_t v51 = &unk_1E524B4A0;
    id v14 = v13;
    id v52 = v14;
    xpc_array_apply(v12, applier);

    if (!xpc_array_get_count(v12))
    {
LABEL_36:
      os_log_type_t v25 = *(void **)(a1 + 32);
      id v26 = v14;
      id v27 = v10;
      goto LABEL_37;
    }
    uint64_t v15 = xpc_array_get_value(v12, 0);
    Class v16 = object_getClass(v15);
    if (v16 == (Class)MEMORY[0x1E4F145C0])
    {
      uint64_t v30 = NSString;
      BOOL v31 = @"INT64-";
    }
    else if (v16 == (Class)MEMORY[0x1E4F145F8])
    {
      uint64_t v30 = NSString;
      BOOL v31 = @"UINT64-";
    }
    else
    {
      if (v16 != (Class)MEMORY[0x1E4F14598])
      {
        if (v16 != (Class)MEMORY[0x1E4F14570])
        {
          uint64_t v17 = [NSString stringWithUTF8String:a2];
LABEL_35:
          uint32_t v35 = (void *)v17;

          id v10 = v35;
          goto LABEL_36;
        }
        [NSString stringWithFormat:@"%@%s", @"BOOL-", a2];
        uint64_t v17 = LABEL_34:;
        goto LABEL_35;
      }
      uint64_t v30 = NSString;
      BOOL v31 = @"DOUBLE-";
    }
    [v30 stringWithFormat:@"%@%s", v31, a2];
    goto LABEL_34;
  }
  if (Class != (Class)MEMORY[0x1E4F14590])
  {
    Class v8 = object_getClass(v6);
    if (v8 == (Class)MEMORY[0x1E4F145C0])
    {
      int v28 = NSString;
      BOOL v29 = @"INT64-";
    }
    else if (v8 == (Class)MEMORY[0x1E4F145F8])
    {
      int v28 = NSString;
      BOOL v29 = @"UINT64-";
    }
    else
    {
      if (v8 != (Class)MEMORY[0x1E4F14598])
      {
        if (v8 != (Class)MEMORY[0x1E4F14570])
        {
          uint64_t v9 = [NSString stringWithUTF8String:a2];
LABEL_26:
          uint64_t v32 = (void *)v9;
          id NSObjectFromSimpleXPCObject = NWUtilsCreateNSObjectFromSimpleXPCObject(v6);
          os_log_type_t v34 = NSObjectFromSimpleXPCObject;
          if (v32)
          {
            if (NSObjectFromSimpleXPCObject) {
              [*(id *)(a1 + 32) setObject:NSObjectFromSimpleXPCObject forKeyedSubscript:v32];
            }
          }

          goto LABEL_38;
        }
        [NSString stringWithFormat:@"%@%s", @"BOOL-", a2];
        uint64_t v9 = LABEL_25:;
        goto LABEL_26;
      }
      int v28 = NSString;
      BOOL v29 = @"DOUBLE-";
    }
    [v28 stringWithFormat:@"%@%s", v29, a2];
    goto LABEL_25;
  }
  os_log_type_t v18 = (void *)MEMORY[0x1E4F1CA60];
  id v19 = v6;
  uint32_t v20 = [v18 dictionary];
  *(void *)uint64_t applier = MEMORY[0x1E4F143A8];
  *(void *)&applier[8] = 3221225472;
  *(void *)&applier[16] = __NWUtilsCreateNSDictionaryFromXPCDictionary_block_invoke;
  os_log_type_t v51 = &unk_1E52480D0;
  id v10 = v20;
  id v52 = v10;
  xpc_dictionary_apply(v19, applier);

  int64_t v21 = *(void **)(a1 + 32);
  id v14 = [NSString stringWithUTF8String:a2];
  if (v14) {
    goto LABEL_19;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  ssize_t v22 = (id)gLogObj;
  os_log_type_enabled(v22, OS_LOG_TYPE_ERROR);
  *(_DWORD *)uint64_t applier = 136446466;
  *(void *)&applier[4] = "nw_nsstring";
  *(_WORD *)&applier[12] = 2080;
  *(void *)&applier[14] = a2;
  LODWORD(v47) = 22;
  BOOL v46 = applier;
  ssize_t v23 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v23);
  if (!result)
  {
    free(v23);
LABEL_19:
    os_log_type_t v25 = v21;
    id v26 = v10;
    id v27 = v14;
LABEL_37:
    objc_msgSend(v25, "setObject:forKeyedSubscript:", v26, v27, v46, v47);

LABEL_38:
    return 1;
  }
  __break(1u);
  return result;
}

id NWUtilsCreateNSObjectFromSimpleXPCObject(void *a1)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  Class Class = object_getClass(v1);
  if (Class == (Class)MEMORY[0x1E4F14570])
  {
    BOOL value = xpc_BOOL_get_value(v1);
    id v12 = (void *)MEMORY[0x1E4F1CC28];
    if (value) {
      id v12 = (void *)MEMORY[0x1E4F1CC38];
    }
    id v13 = v12;
  }
  else
  {
    Class v3 = Class;
    if (Class == (Class)MEMORY[0x1E4F145F0])
    {
      string_ptr = xpc_string_get_string_ptr(v1);
      if (!string_ptr)
      {
LABEL_39:
        id v13 = 0;
        goto LABEL_40;
      }
      id v13 = [NSString stringWithUTF8String:string_ptr];
    }
    else if (Class == (Class)MEMORY[0x1E4F14580])
    {
      uint64_t v15 = (void *)MEMORY[0x1E4F1C9B8];
      bytes_ptr = xpc_data_get_bytes_ptr(v1);
      id v13 = [v15 dataWithBytes:bytes_ptr length:xpc_data_get_length(v1)];
    }
    else if (Class == (Class)MEMORY[0x1E4F145C0])
    {
      id v13 = [NSNumber numberWithLongLong:xpc_int64_get_value(v1)];
    }
    else if (Class == (Class)MEMORY[0x1E4F145F8])
    {
      id v13 = [NSNumber numberWithUnsignedLongLong:xpc_uint64_get_value(v1)];
    }
    else if (Class == (Class)MEMORY[0x1E4F14598])
    {
      id v13 = [NSNumber numberWithDouble:xpc_double_get_value(v1)];
    }
    else
    {
      if (Class != (Class)MEMORY[0x1E4F14600])
      {
        ssize_t v4 = (objc_class *)MEMORY[0x1E4F145E0];
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v5 = (id)gLogObj;
        uint64_t v6 = v5;
        if (v3 == v4)
        {
          if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136446210;
            ssize_t v23 = "NWUtilsCreateNSObjectFromSimpleXPCObject";
            _os_log_impl(&dword_1830D4000, v6, OS_LOG_TYPE_DEBUG, "%{public}s Cannot encode pointer types, skipping value", buf, 0xCu);
          }

          goto LABEL_39;
        }
        *(_DWORD *)buf = 136446466;
        ssize_t v23 = "NWUtilsCreateNSObjectFromSimpleXPCObject";
        __int16 v24 = 2048;
        Class v25 = v3;
        uint64_t v7 = (char *)_os_log_send_and_compose_impl();

        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v20 = 0;
        if (!__nwlog_fault(v7, &type, &v20)) {
          goto LABEL_37;
        }
        if (type == OS_LOG_TYPE_FAULT)
        {
          Class v8 = __nwlog_obj();
          os_log_type_t v9 = type;
          if (os_log_type_enabled(v8, type))
          {
            *(_DWORD *)buf = 136446466;
            ssize_t v23 = "NWUtilsCreateNSObjectFromSimpleXPCObject";
            __int16 v24 = 2048;
            Class v25 = v3;
            id v10 = "%{public}s Cannot handle XPC type %p";
LABEL_35:
            _os_log_impl(&dword_1830D4000, v8, v9, v10, buf, 0x16u);
          }
        }
        else if (v20)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          Class v8 = __nwlog_obj();
          os_log_type_t v9 = type;
          BOOL v18 = os_log_type_enabled(v8, type);
          if (backtrace_string)
          {
            if (v18)
            {
              *(_DWORD *)buf = 136446722;
              ssize_t v23 = "NWUtilsCreateNSObjectFromSimpleXPCObject";
              __int16 v24 = 2048;
              Class v25 = v3;
              __int16 v26 = 2082;
              id v27 = backtrace_string;
              _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s Cannot handle XPC type %p, dumping backtrace:%{public}s", buf, 0x20u);
            }

            free(backtrace_string);
            goto LABEL_37;
          }
          if (v18)
          {
            *(_DWORD *)buf = 136446466;
            ssize_t v23 = "NWUtilsCreateNSObjectFromSimpleXPCObject";
            __int16 v24 = 2048;
            Class v25 = v3;
            id v10 = "%{public}s Cannot handle XPC type %p, no backtrace";
            goto LABEL_35;
          }
        }
        else
        {
          Class v8 = __nwlog_obj();
          os_log_type_t v9 = type;
          if (os_log_type_enabled(v8, type))
          {
            *(_DWORD *)buf = 136446466;
            ssize_t v23 = "NWUtilsCreateNSObjectFromSimpleXPCObject";
            __int16 v24 = 2048;
            Class v25 = v3;
            id v10 = "%{public}s Cannot handle XPC type %p, backtrace limit exceeded";
            goto LABEL_35;
          }
        }

LABEL_37:
        if (v7) {
          free(v7);
        }
        goto LABEL_39;
      }
      id v13 = (id)[objc_alloc(MEMORY[0x1E4F29128]) initWithUUIDBytes:xpc_uuid_get_bytes(v1)];
    }
  }
LABEL_40:

  return v13;
}

void sub_183205DE0(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

BOOL nw_protocol_transform_supports_endpoint(void *a1, void *a2)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  Class v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (!v3)
  {
    id v12 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_transform_supports_endpoint";
    id v13 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v27 = 0;
    if (!__nwlog_fault(v13, &type, &v27)) {
      goto LABEL_42;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_transform_supports_endpoint";
        _os_log_impl(&dword_1830D4000, v14, v15, "%{public}s called with null transform", buf, 0xCu);
      }
      goto LABEL_41;
    }
    if (!v27)
    {
      id v14 = __nwlog_obj();
      os_log_type_t v23 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_transform_supports_endpoint";
        _os_log_impl(&dword_1830D4000, v14, v23, "%{public}s called with null transform, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_41;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    id v14 = __nwlog_obj();
    os_log_type_t v19 = type;
    BOOL v20 = os_log_type_enabled(v14, type);
    if (!backtrace_string)
    {
      if (v20)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_transform_supports_endpoint";
        _os_log_impl(&dword_1830D4000, v14, v19, "%{public}s called with null transform, no backtrace", buf, 0xCu);
      }
      goto LABEL_41;
    }
    if (v20)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_protocol_transform_supports_endpoint";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = backtrace_string;
      _os_log_impl(&dword_1830D4000, v14, v19, "%{public}s called with null transform, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_29;
  }
  if (!v4)
  {
    Class v16 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_transform_supports_endpoint";
    id v13 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v27 = 0;
    if (!__nwlog_fault(v13, &type, &v27)) {
      goto LABEL_42;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v14 = __nwlog_obj();
      os_log_type_t v17 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_transform_supports_endpoint";
        _os_log_impl(&dword_1830D4000, v14, v17, "%{public}s called with null endpoint", buf, 0xCu);
      }
LABEL_41:

LABEL_42:
      if (v13) {
        free(v13);
      }
      goto LABEL_44;
    }
    if (!v27)
    {
      id v14 = __nwlog_obj();
      os_log_type_t v24 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_transform_supports_endpoint";
        _os_log_impl(&dword_1830D4000, v14, v24, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_41;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    id v14 = __nwlog_obj();
    os_log_type_t v21 = type;
    BOOL v22 = os_log_type_enabled(v14, type);
    if (!backtrace_string)
    {
      if (v22)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_transform_supports_endpoint";
        _os_log_impl(&dword_1830D4000, v14, v21, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
      goto LABEL_41;
    }
    if (v22)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_protocol_transform_supports_endpoint";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = backtrace_string;
      _os_log_impl(&dword_1830D4000, v14, v21, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_29:

    free(backtrace_string);
    goto LABEL_42;
  }
  if (!v3[6])
  {
    BOOL v11 = 1;
    goto LABEL_45;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  uint64_t v6 = (id)gLogObj;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_transform_supports_endpoint";
    _os_log_impl(&dword_1830D4000, v6, OS_LOG_TYPE_INFO, "%{public}s matching url scheme", buf, 0xCu);
  }

  id v7 = v5;
  int v8 = [v7 type];

  if (v8 != 4 || (uint64_t url_scheme = nw_endpoint_get_url_scheme(v7)) == 0)
  {
LABEL_44:
    BOOL v11 = 0;
    goto LABEL_45;
  }
  *(void *)buf = 0;
  *(void *)&buf[8] = buf;
  *(void *)&buf[16] = 0x2020000000;
  char v30 = 0;
  id v10 = (void *)v3[6];
  applier[0] = MEMORY[0x1E4F143A8];
  applier[1] = 3221225472;
  applier[2] = __nw_protocol_transform_supports_endpoint_block_invoke;
  applier[3] = &unk_1E5248460;
  applier[4] = buf;
  applier[5] = url_scheme;
  xpc_array_apply(v10, applier);
  BOOL v11 = *(unsigned char *)(*(void *)&buf[8] + 24) != 0;
  _Block_object_dispose(buf, 8);
LABEL_45:

  return v11;
}

void sub_18320688C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

uint64_t __nw_endpoint_handler_add_read_request_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t object = nw_hash_node_get_object(a2);
  if (!object) {
    return 1;
  }
  uint64_t v4 = object;
  if ((*(_WORD *)(object + 332) & 0x20) == 0) {
    return 1;
  }
  if ((nw_endpoint_handler_get_logging_disabled(*(void **)(a1 + 32)) & 1) == 0)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
    }
    uint64_t v6 = (id)gconnectionLogObj;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      id_string = nw_endpoint_handler_get_id_string(*(void **)(a1 + 32));
      int v8 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 32));
      nw_endpoint_t v9 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 32));
      logging_description = nw_endpoint_get_logging_description(v9);
      BOOL v11 = nw_endpoint_handler_state_string(*(void **)(a1 + 32));
      id v12 = nw_endpoint_handler_mode_string(*(void **)(a1 + 32));
      id v13 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 32));
      uint64_t v14 = *(void *)(a1 + 40);
      int v15 = 136448258;
      Class v16 = "nw_endpoint_handler_add_read_request_block_invoke";
      __int16 v17 = 2082;
      BOOL v18 = id_string;
      __int16 v19 = 2082;
      BOOL v20 = v8;
      __int16 v21 = 2082;
      BOOL v22 = logging_description;
      __int16 v23 = 2082;
      os_log_type_t v24 = v11;
      __int16 v25 = 2082;
      __int16 v26 = v12;
      __int16 v27 = 2114;
      id v28 = v13;
      __int16 v29 = 2112;
      uint64_t v30 = v14;
      __int16 v31 = 2048;
      uint64_t v32 = v4;
      _os_log_impl(&dword_1830D4000, v6, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Adding new flow read request %@ to %p", (uint8_t *)&v15, 0x5Cu);
    }
  }
  *(_WORD *)(v4 + 332) &= ~0x20u;
  *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = 1;
  *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = nw_flow_add_read_request(*(void **)(a1 + 32), v4, *(void **)(a1 + 40));
  nw_flow_service_reads(*(NWConcrete_nw_endpoint_handler **)(a1 + 32), *(NWConcrete_nw_endpoint_flow **)(a1 + 48), (nw_flow_protocol *)v4, 0);
  return 0;
}

void sub_183206AE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_flow_add_read_request(void *a1, uint64_t a2, void *a3)
{
  uint64_t v259 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    uint64_t v94 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v242 = "nw_flow_add_read_request";
    __int16 v21 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v239 = 0;
    if (!__nwlog_fault(v21, &type, &v239)) {
      goto LABEL_119;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v22 = __nwlog_obj();
      os_log_type_t v95 = type;
      if (os_log_type_enabled(v22, type))
      {
        *(_DWORD *)buf = 136446210;
        v242 = "nw_flow_add_read_request";
        _os_log_impl(&dword_1830D4000, v22, v95, "%{public}s called with null handler", buf, 0xCu);
      }
      goto LABEL_118;
    }
    if (!v239)
    {
      BOOL v22 = __nwlog_obj();
      os_log_type_t v112 = type;
      if (os_log_type_enabled(v22, type))
      {
        *(_DWORD *)buf = 136446210;
        v242 = "nw_flow_add_read_request";
        _os_log_impl(&dword_1830D4000, v22, v112, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_118;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v22 = __nwlog_obj();
    os_log_type_t v99 = type;
    BOOL v100 = os_log_type_enabled(v22, type);
    if (!backtrace_string)
    {
      if (v100)
      {
        *(_DWORD *)buf = 136446210;
        v242 = "nw_flow_add_read_request";
        _os_log_impl(&dword_1830D4000, v22, v99, "%{public}s called with null handler, no backtrace", buf, 0xCu);
      }
      goto LABEL_118;
    }
    if (v100)
    {
      *(_DWORD *)buf = 136446466;
      v242 = "nw_flow_add_read_request";
      __int16 v243 = 2082;
      id_str = backtrace_string;
      _os_log_impl(&dword_1830D4000, v22, v99, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_157;
  }
  id v5 = a1;
  uint64_t mode = v5->mode;

  if (mode == 2)
  {
    if (a3)
    {
      if (_nw_signposts_once != -1) {
        dispatch_once(&_nw_signposts_once, &__block_literal_global_93);
      }
      if (_nw_signposts_enabled && kdebug_is_enabled()) {
        kdebug_trace();
      }
      v234 = a3;
      v238 = nw_endpoint_handler_copy_flow(v5);
      if ((*((unsigned char *)v238 + 34) & 8) != 0)
      {
        if (!nw_endpoint_handler_get_minimize_logging(v5))
        {
          id v7 = v5;
          char v8 = *((unsigned char *)v7 + 268);

          if ((v8 & 0x20) != 0) {
            goto LABEL_59;
          }
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          nw_endpoint_t v9 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
          {
            id v10 = v7;

            BOOL v11 = v10;
            char v12 = *((unsigned char *)v7 + 268);

            if (v12) {
              id v13 = "dry-run ";
            }
            else {
              id v13 = "";
            }
            nw_endpoint_t v226 = nw_endpoint_handler_copy_endpoint(v11);
            logging_description = nw_endpoint_get_logging_description(v226);
            int v15 = v11;
            Class v16 = v15;
            uint64_t v17 = v15[30];
            if (v17 > 5) {
              BOOL v18 = "unknown-state";
            }
            else {
              BOOL v18 = off_1E523FB38[v17];
            }
            v219 = v18;

            __int16 v31 = v16;
            uint64_t v32 = v31;
            uint64_t v33 = "path";
            switch(v5->mode)
            {
              case 0:
                break;
              case 1:
                uint64_t v33 = "resolver";
                break;
              case 2:
                uint64_t v33 = nw_endpoint_flow_mode_string(v31[31]);
                break;
              case 3:
                uint64_t v33 = "proxy";
                break;
              case 4:
                uint64_t v33 = "fallback";
                break;
              case 5:
                uint64_t v33 = "transform";
                break;
              default:
                uint64_t v33 = "unknown-mode";
                break;
            }

            uint32_t v35 = v32;
            os_unfair_lock_lock((os_unfair_lock_t)v35 + 28);
            id v36 = v35[8];
            os_unfair_lock_unlock((os_unfair_lock_t)v35 + 28);

            id v37 = v36;
            *(_DWORD *)buf = 136448258;
            v242 = "nw_flow_add_read_request";
            __int16 v243 = 2082;
            id_str = v10->id_str;
            __int16 v245 = 2082;
            v246 = v13;
            __int16 v247 = 2082;
            v248 = (void *)logging_description;
            __int16 v249 = 2082;
            v250 = v219;
            __int16 v251 = 2082;
            v252 = v33;
            __int16 v253 = 2114;
            id v254 = v37;
            __int16 v255 = 2048;
            next_max_size_t size = nw_read_request_get_next_max_size(v234);
            __int16 v257 = 2048;
            uint64_t maximum_datagram_count = nw_read_request_get_maximum_datagram_count(v234);
            _os_log_impl(&dword_1830D4000, v9, OS_LOG_TYPE_DEFAULT, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Read request submitted: %zu bytes, %zu datagrams", buf, 0x5Cu);
          }
          goto LABEL_58;
        }
        if ((nw_endpoint_handler_get_logging_disabled(v5) & 1) == 0)
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          nw_endpoint_t v9 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
          {
            id_string = nw_endpoint_handler_get_id_string(v5);
            socklen_t v101 = nw_endpoint_handler_dry_run_string(v5);
            nw_endpoint_t v227 = nw_endpoint_handler_copy_endpoint(v5);
            v102 = nw_endpoint_get_logging_description(v227);
            uint64_t v103 = nw_endpoint_handler_state_string(v5);
            v104 = nw_endpoint_handler_mode_string(v5);
            id v105 = nw_endpoint_handler_copy_current_path(v5);
            *(_DWORD *)buf = 136448258;
            v242 = "nw_flow_add_read_request";
            __int16 v243 = 2082;
            id_str = (char *)id_string;
            __int16 v245 = 2082;
            v246 = v101;
            __int16 v247 = 2082;
            v248 = (void *)v102;
            __int16 v249 = 2082;
            v250 = v103;
            __int16 v251 = 2082;
            v252 = v104;
            __int16 v253 = 2114;
            id v254 = v105;
            __int16 v255 = 2048;
            next_max_size_t size = nw_read_request_get_next_max_size(v234);
            __int16 v257 = 2048;
            uint64_t maximum_datagram_count = nw_read_request_get_maximum_datagram_count(v234);
            _os_log_impl(&dword_1830D4000, v9, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Read request submitted: %zu bytes, %zu datagrams", buf, 0x5Cu);
          }
LABEL_58:
        }
      }
LABEL_59:
      if (!nw_flow_has_final_read((nw_flow_protocol *)a2))
      {
        BOOL v43 = v5;
        int state = v43->state;

        if ((state & 0xFFFFFFFE) == 4)
        {
          BOOL v45 = v43;
          BOOL v46 = (*((unsigned char *)v45 + 268) & 0x20) == 0;

          if (v46)
          {
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
            }
            uint64_t v47 = (id)gconnectionLogObj;
            if (os_log_type_enabled(v47, OS_LOG_TYPE_DEBUG))
            {
              char v48 = v45;

              BOOL v49 = v48;
              BOOL v50 = (*((unsigned char *)v45 + 268) & 1) == 0;

              if (v50) {
                os_log_type_t v51 = "";
              }
              else {
                os_log_type_t v51 = "dry-run ";
              }
              nw_endpoint_t v52 = nw_endpoint_handler_copy_endpoint(v49);
              uint64_t v53 = nw_endpoint_get_logging_description(v52);
              os_log_type_t v54 = v49;
              BOOL v55 = v54;
              uint64_t v56 = v43->state;
              if (v56 > 5) {
                id v57 = "unknown-state";
              }
              else {
                id v57 = off_1E523FB38[v56];
              }

              uint64_t v61 = v55;
              __int16 v62 = v61;
              __int16 v63 = "path";
              switch(v5->mode)
              {
                case 0:
                  break;
                case 1:
                  __int16 v63 = "resolver";
                  break;
                case 2:
                  __int16 v63 = nw_endpoint_flow_mode_string(v61[31]);
                  break;
                case 3:
                  __int16 v63 = "proxy";
                  break;
                case 4:
                  __int16 v63 = "fallback";
                  break;
                case 5:
                  __int16 v63 = "transform";
                  break;
                default:
                  __int16 v63 = "unknown-mode";
                  break;
              }

              BOOL v92 = v62;
              os_unfair_lock_lock((os_unfair_lock_t)v92 + 28);
              id v93 = v92[8];
              os_unfair_lock_unlock((os_unfair_lock_t)v92 + 28);

              *(_DWORD *)buf = 136447746;
              v242 = "nw_flow_add_read_request";
              __int16 v243 = 2082;
              id_str = v48 + 168;
              __int16 v245 = 2082;
              v246 = v51;
              __int16 v247 = 2082;
              v248 = (void *)v53;
              __int16 v249 = 2082;
              v250 = v57;
              __int16 v251 = 2082;
              v252 = v63;
              __int16 v253 = 2114;
              id v254 = v93;
              _os_log_impl(&dword_1830D4000, v47, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] cannot accept read requests", buf, 0x48u);
            }
          }
        }
        else
        {
          if ((*(_WORD *)(a2 + 332) & 0x80) == 0)
          {
            BOOL request_list_append = nw_read_request_list_append(*(void **)(a2 + 216), v234);
            os_log_type_t v59 = *(void **)(a2 + 216);
            *(void *)(a2 + 216) = request_list_append;

LABEL_115:
            BOOL v91 = 1;
LABEL_250:

            return v91;
          }
          __int16 v60 = *(void **)(a2 + 320);
          if (v60)
          {
            nw_read_request_report_error_with_override(v234, 0, v60);
          }
          else
          {
            uint64_t v64 = v43;
            BOOL v65 = (*((unsigned char *)v64 + 268) & 0x20) == 0;

            if (v65)
            {
              if (__nwlog_connection_log::onceToken != -1) {
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
              }
              __int16 v66 = (id)gconnectionLogObj;
              if (os_log_type_enabled(v66, OS_LOG_TYPE_ERROR))
              {
                os_log_type_t v67 = nw_endpoint_handler_get_id_string(v64);
                __int16 v68 = nw_endpoint_handler_dry_run_string(v64);
                nw_endpoint_t v69 = nw_endpoint_handler_copy_endpoint(v64);
                uint64_t v70 = nw_endpoint_get_logging_description(v69);
                os_log_type_t v71 = nw_endpoint_handler_state_string(v64);
                os_log_type_t v72 = nw_endpoint_handler_mode_string(v64);
                id v73 = nw_endpoint_handler_copy_current_path(v64);
                *(_DWORD *)buf = 136447746;
                v242 = "nw_flow_add_read_request";
                __int16 v243 = 2082;
                id_str = (char *)v67;
                __int16 v245 = 2082;
                v246 = v68;
                __int16 v247 = 2082;
                v248 = (void *)v70;
                __int16 v249 = 2082;
                v250 = v71;
                __int16 v251 = 2082;
                v252 = v72;
                __int16 v253 = 2114;
                id v254 = v73;
                _os_log_impl(&dword_1830D4000, v66, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] already delivered final read, cannot accept read requests", buf, 0x48u);
              }
            }
            BOOL v74 = -[NWConcrete_nw_error initWithDomain:code:]([NWConcrete_nw_error alloc], 1, 96);
            nw_read_request_report_error_with_override(v234, 0, v74);
          }
        }
LABEL_249:
        BOOL v91 = 0;
        goto LABEL_250;
      }
      if (a2)
      {
        uint64_t v38 = *(void *)(a2 + 312);
        if (v38)
        {
          if (*(void *)(v38 + 16) != *(void *)(v38 + 24))
          {
            uint64_t v39 = nw_array_get_object_at_index(v38, 0);

            if (v39)
            {
              if (!nw_flow_has_final_read((nw_flow_protocol *)a2))
              {
                uint32_t v40 = *(void **)(v39 + 16);
                if (v40
                  && v40 != &__block_literal_global_6_42258
                  && v40 != &__block_literal_global_42249
                  && v40 != &__block_literal_global_8_42267
                  && v40 != &__block_literal_global_10_42276)
                {
                  if (gLogDatapath && (nw_endpoint_handler_get_logging_disabled(v5) & 1) == 0)
                  {
                    if (__nwlog_connection_log::onceToken != -1) {
                      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
                    }
                    v203 = (id)gconnectionLogObj;
                    if (os_log_type_enabled(v203, OS_LOG_TYPE_DEBUG))
                    {
                      v224 = nw_endpoint_handler_get_id_string(v5);
                      v217 = nw_endpoint_handler_dry_run_string(v5);
                      nw_endpoint_t v232 = nw_endpoint_handler_copy_endpoint(v5);
                      locka = nw_endpoint_get_logging_description(v232);
                      v204 = nw_endpoint_handler_state_string(v5);
                      v205 = nw_endpoint_handler_mode_string(v5);
                      id v206 = nw_endpoint_handler_copy_current_path(v5);
                      uint64_t v207 = *(void *)(v39 + 16);
                      *(_DWORD *)buf = 136448002;
                      v242 = "nw_flow_add_read_request";
                      __int16 v243 = 2082;
                      id_str = (char *)v224;
                      __int16 v245 = 2082;
                      v246 = v217;
                      __int16 v247 = 2082;
                      v248 = (void *)locka;
                      __int16 v249 = 2082;
                      v250 = v204;
                      __int16 v251 = 2082;
                      v252 = v205;
                      __int16 v253 = 2114;
                      id v254 = v206;
                      __int16 v255 = 2048;
                      next_max_size_t size = v207;
                      _os_log_impl(&dword_1830D4000, v203, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Setting final on non-static context %p", buf, 0x52u);
                    }
                  }
                  nw_content_context_set_is_final(*(nw_content_context_t *)(v39 + 16), 1);
                }
                if (!*(unsigned char *)(v39 + 25) && *(unsigned char *)(v39 + 24) && !*(void *)(v39 + 32))
                {
                  if (gLogDatapath && (nw_endpoint_handler_get_logging_disabled(v5) & 1) == 0)
                  {
                    if (__nwlog_connection_log::onceToken != -1) {
                      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
                    }
                    v208 = (id)gconnectionLogObj;
                    if (os_log_type_enabled(v208, OS_LOG_TYPE_DEBUG))
                    {
                      v225 = nw_endpoint_handler_get_id_string(v5);
                      v218 = nw_endpoint_handler_dry_run_string(v5);
                      nw_endpoint_t v233 = nw_endpoint_handler_copy_endpoint(v5);
                      lockb = nw_endpoint_get_logging_description(v233);
                      v209 = nw_endpoint_handler_state_string(v5);
                      v210 = nw_endpoint_handler_mode_string(v5);
                      id v211 = nw_endpoint_handler_copy_current_path(v5);
                      *(_DWORD *)buf = 136447746;
                      v242 = "nw_flow_add_read_request";
                      __int16 v243 = 2082;
                      id_str = (char *)v225;
                      __int16 v245 = 2082;
                      v246 = v218;
                      __int16 v247 = 2082;
                      v248 = (void *)lockb;
                      __int16 v249 = 2082;
                      v250 = v209;
                      __int16 v251 = 2082;
                      v252 = v210;
                      __int16 v253 = 2114;
                      id v254 = v211;
                      _os_log_impl(&dword_1830D4000, v208, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Setting is_complete on last final read", buf, 0x48u);
                    }
                  }
                  *(unsigned char *)(v39 + 25) = 1;
                }
              }
              int v41 = *(NSObject **)(v39 + 8);
              if (v41) {
                size_t size = dispatch_data_get_size(v41);
              }
              else {
                size_t size = 0;
              }
              uint64_t v75 = *(void **)(v39 + 16);
              if (!v75) {
                uint64_t v75 = &__block_literal_global_6_42258;
              }
              id v76 = v75;
              BOOL v77 = v234;
              request_receive = nw_read_request_receive(v234, *(void **)(v39 + 8), v76, *(unsigned __int8 *)(v39 + 25), *(void **)(v39 + 32));
              if (size)
              {
                *((void *)v238 + 134) += size;
                if ((*((unsigned char *)v238 + 34) & 0x20) == 0) {
                  nw_context_count_input_bytes(*(void **)(a2 + 184), size);
                }
              }
              if (request_receive)
              {
                if (gLogDatapath && (nw_endpoint_handler_get_logging_disabled(v5) & 1) == 0)
                {
                  if (__nwlog_connection_log::onceToken != -1) {
                    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
                  }
                  uint64_t v118 = (id)gconnectionLogObj;
                  if (os_log_type_enabled(v118, OS_LOG_TYPE_DEBUG))
                  {
                    v221 = nw_endpoint_handler_get_id_string(v5);
                    v215 = nw_endpoint_handler_dry_run_string(v5);
                    nw_endpoint_t v228 = nw_endpoint_handler_copy_endpoint(v5);
                    BOOL v119 = nw_endpoint_get_logging_description(v228);
                    os_log_type_t v120 = nw_endpoint_handler_state_string(v5);
                    v121 = nw_endpoint_handler_mode_string(v5);
                    id v122 = nw_endpoint_handler_copy_current_path(v5);
                    size_t v123 = dispatch_data_get_size(request_receive);
                    *(_DWORD *)buf = 136448258;
                    v242 = "nw_flow_add_read_request";
                    __int16 v243 = 2082;
                    id_str = (char *)v221;
                    __int16 v245 = 2082;
                    v246 = v215;
                    __int16 v247 = 2082;
                    v248 = (void *)v119;
                    __int16 v249 = 2082;
                    v250 = v120;
                    __int16 v251 = 2082;
                    v252 = v121;
                    __int16 v253 = 2114;
                    id v254 = v122;
                    __int16 v255 = 2048;
                    next_max_size_t size = size - v123;
                    __int16 v257 = 2048;
                    uint64_t maximum_datagram_count = size;
                    _os_log_impl(&dword_1830D4000, v118, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Consumed %zu/%zu final bytes", buf, 0x5Cu);
                  }
                }
                uint64_t v79 = *(void **)(v39 + 16);
                int v80 = *(unsigned __int8 *)(v39 + 24);
                int v81 = *(unsigned __int8 *)(v39 + 25);
                __int16 v82 = *(void **)(v39 + 32);
                BOOL v83 = request_receive;
                id v84 = v79;
                id v85 = v82;
                if (!*(void *)(a2 + 312))
                {
                  BOOL v86 = nw_array_create();
                  int v87 = *(void **)(a2 + 312);
                  *(void *)(a2 + 312) = v86;
                }
                __int16 v88 = nw_flow_final_read_create(v83, v84, v80 != 0, v81 != 0, v85);
                nw_array_prepend(*(void *)(a2 + 312), v88);

                BOOL v77 = v234;
              }
              else
              {
                if (gLogDatapath && (nw_endpoint_handler_get_logging_disabled(v5) & 1) == 0)
                {
                  if (__nwlog_connection_log::onceToken != -1) {
                    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
                  }
                  v198 = (id)gconnectionLogObj;
                  if (os_log_type_enabled(v198, OS_LOG_TYPE_DEBUG))
                  {
                    v223 = nw_endpoint_handler_get_id_string(v5);
                    v216 = nw_endpoint_handler_dry_run_string(v5);
                    nw_endpoint_t v231 = nw_endpoint_handler_copy_endpoint(v5);
                    v199 = nw_endpoint_get_logging_description(v231);
                    v200 = nw_endpoint_handler_state_string(v5);
                    v201 = nw_endpoint_handler_mode_string(v5);
                    id v202 = nw_endpoint_handler_copy_current_path(v5);
                    *(_DWORD *)buf = 136448002;
                    v242 = "nw_flow_add_read_request";
                    __int16 v243 = 2082;
                    id_str = (char *)v223;
                    __int16 v245 = 2082;
                    v246 = v216;
                    __int16 v247 = 2082;
                    v248 = (void *)v199;
                    __int16 v249 = 2082;
                    v250 = v200;
                    __int16 v251 = 2082;
                    v252 = v201;
                    __int16 v253 = 2114;
                    id v254 = v202;
                    __int16 v255 = 2048;
                    next_max_size_t size = size;
                    _os_log_impl(&dword_1830D4000, v198, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Consumed all %zu final bytes", buf, 0x52u);
                  }
                  BOOL v77 = v234;
                }
                *(_WORD *)(a2 + 332) |= 0x80u;
              }
              request_list_report = nw_read_request_list_report(v77);
              __int16 v90 = request_list_report;
              if (request_list_report) {
                nw_read_request_fail(request_list_report, 57);
              }

              goto LABEL_115;
            }
          }
        }
LABEL_194:
        v124 = v5;
        BOOL v91 = (*((unsigned char *)v124 + 268) & 0x20) == 0;

        if (!v91) {
          goto LABEL_250;
        }
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        id v125 = (id)gconnectionLogObj;
        v126 = v124;

        v127 = v126;
        BOOL v128 = (*((unsigned char *)v124 + 268) & 1) == 0;

        if (v128) {
          BOOL v129 = "";
        }
        else {
          BOOL v129 = "dry-run ";
        }
        nw_endpoint_t v130 = nw_endpoint_handler_copy_endpoint(v127);
        v131 = nw_endpoint_get_logging_description(v130);
        v132 = v127;
        v133 = v132;
        uint64_t v134 = v132[30];
        if (v134 > 5) {
          v135 = "unknown-state";
        }
        else {
          v135 = off_1E523FB38[v134];
        }
        v235 = v135;

        v136 = v133;
        v137 = "path";
        switch(v5->mode)
        {
          case 0:
            break;
          case 1:
            v137 = "resolver";
            break;
          case 2:
            v137 = nw_endpoint_flow_mode_string(v136[31]);
            break;
          case 3:
            v137 = "proxy";
            break;
          case 4:
            v137 = "fallback";
            break;
          case 5:
            v137 = "transform";
            break;
          default:
            v137 = "unknown-mode";
            break;
        }
        v229 = v137;

        v138 = v126;
        nw_endpoint_t v139 = v130;
        v140 = v124;
        os_log_type_t v141 = v129;
        v142 = v133;
        v143 = v5;
        id v144 = v125;
        v145 = v136;
        os_unfair_lock_lock((os_unfair_lock_t)v145 + 28);
        lock = (os_unfair_lock_s *)(v145 + 14);
        id v146 = v145[8];
        os_unfair_lock_unlock((os_unfair_lock_t)v145 + 28);
        v222 = v145;

        v147 = v144;
        v148 = v143;
        v149 = v142;
        os_log_type_t v150 = v141;
        v151 = v140;
        nw_endpoint_t v152 = v139;
        v153 = v138->id_str;
        *(_DWORD *)buf = 136447746;
        v242 = "nw_flow_add_read_request";
        __int16 v243 = 2082;
        id_str = v138->id_str;
        __int16 v245 = 2082;
        v246 = v150;
        __int16 v247 = 2082;
        v248 = (void *)v131;
        __int16 v249 = 2082;
        v250 = v235;
        __int16 v251 = 2082;
        v252 = v229;
        __int16 v253 = 2114;
        id v254 = v146;
        v154 = (char *)_os_log_send_and_compose_impl();

        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v239 = 0;
        if (!__nwlog_fault(v154, &type, &v239)) {
          goto LABEL_247;
        }
        if (type == OS_LOG_TYPE_FAULT)
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          v155 = (id)gconnectionLogObj;
          os_log_type_t v156 = type;
          if (os_log_type_enabled(v155, type))
          {
            char v157 = v222;

            v158 = v157;
            BOOL v159 = (*((unsigned char *)v151 + 268) & 1) == 0;

            if (v159) {
              char v160 = "";
            }
            else {
              char v160 = "dry-run ";
            }
            nw_endpoint_t v161 = nw_endpoint_handler_copy_endpoint(v158);
            v162 = nw_endpoint_get_logging_description(v161);
            v163 = v158;
            __int16 v164 = v163;
            uint64_t v165 = v149[30];
            if (v165 > 5) {
              v166 = "unknown-state";
            }
            else {
              v166 = off_1E523FB38[v165];
            }
            v237 = v166;

            v185 = v164;
            v186 = "path";
            switch(v148->mode)
            {
              case 0:
                break;
              case 1:
                v186 = "resolver";
                break;
              case 2:
                v186 = nw_endpoint_flow_mode_string(v185[31]);
                break;
              case 3:
                v186 = "proxy";
                break;
              case 4:
                v186 = "fallback";
                break;
              case 5:
                v186 = "transform";
                break;
              default:
                v186 = "unknown-mode";
                break;
            }
            v230 = v186;

            v195 = v185;
            os_unfair_lock_lock(lock);
            id v196 = v222[8];
            os_unfair_lock_unlock(lock);

            *(_DWORD *)buf = 136447746;
            v242 = "nw_flow_add_read_request";
            __int16 v243 = 2082;
            id_str = v153;
            __int16 v245 = 2082;
            v246 = v160;
            __int16 v247 = 2082;
            v248 = (void *)v162;
            __int16 v249 = 2082;
            v250 = v237;
            __int16 v251 = 2082;
            v252 = v230;
            __int16 v253 = 2114;
            id v254 = v196;
            _os_log_impl(&dword_1830D4000, v155, v156, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] No final data returned from nw_flow_remove_next_final_read", buf, 0x48u);
          }
        }
        else if (v239)
        {
          uint64_t v167 = __nw_create_backtrace_string();
          if (v167)
          {
            v168 = (char *)v167;
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
            }
            v169 = (id)gconnectionLogObj;
            os_log_type_t v170 = type;
            if (os_log_type_enabled(v169, type))
            {
              v171 = nw_endpoint_handler_get_id_string(v222);
              v172 = nw_endpoint_handler_dry_run_string(v222);
              nw_endpoint_t v236 = nw_endpoint_handler_copy_endpoint(v222);
              v173 = nw_endpoint_get_logging_description(v236);
              v174 = nw_endpoint_handler_state_string(v222);
              v175 = nw_endpoint_handler_mode_string(v222);
              id v176 = nw_endpoint_handler_copy_current_path(v222);
              *(_DWORD *)buf = 136448002;
              v242 = "nw_flow_add_read_request";
              __int16 v243 = 2082;
              id_str = (char *)v171;
              __int16 v245 = 2082;
              v246 = v172;
              __int16 v247 = 2082;
              v248 = (void *)v173;
              __int16 v249 = 2082;
              v250 = v174;
              __int16 v251 = 2082;
              v252 = v175;
              __int16 v253 = 2114;
              id v254 = v176;
              __int16 v255 = 2082;
              next_max_size_t size = (uint64_t)v168;
              _os_log_impl(&dword_1830D4000, v169, v170, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] No final data returned from nw_flow_remove_next_final_read, dumping backtrace:%{public}s", buf, 0x52u);
            }
            free(v168);
            goto LABEL_247;
          }
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          v155 = (id)gconnectionLogObj;
          os_log_type_t v187 = type;
          if (os_log_type_enabled(v155, type))
          {
            v188 = nw_endpoint_handler_get_id_string(v222);
            v189 = nw_endpoint_handler_dry_run_string(v222);
            nw_endpoint_t v190 = nw_endpoint_handler_copy_endpoint(v222);
            v191 = nw_endpoint_get_logging_description(v190);
            v192 = nw_endpoint_handler_state_string(v222);
            v193 = nw_endpoint_handler_mode_string(v222);
            id v194 = nw_endpoint_handler_copy_current_path(v222);
            *(_DWORD *)buf = 136447746;
            v242 = "nw_flow_add_read_request";
            __int16 v243 = 2082;
            id_str = (char *)v188;
            __int16 v245 = 2082;
            v246 = v189;
            __int16 v247 = 2082;
            v248 = (void *)v191;
            __int16 v249 = 2082;
            v250 = v192;
            __int16 v251 = 2082;
            v252 = v193;
            __int16 v253 = 2114;
            id v254 = v194;
            _os_log_impl(&dword_1830D4000, v155, v187, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] No final data returned from nw_flow_remove_next_final_read, no backtrace", buf, 0x48u);
          }
        }
        else
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          v155 = (id)gconnectionLogObj;
          os_log_type_t v177 = type;
          if (os_log_type_enabled(v155, type))
          {
            v178 = nw_endpoint_handler_get_id_string(v222);
            v179 = nw_endpoint_handler_dry_run_string(v222);
            nw_endpoint_t v180 = nw_endpoint_handler_copy_endpoint(v222);
            v181 = nw_endpoint_get_logging_description(v180);
            v182 = nw_endpoint_handler_state_string(v222);
            v183 = nw_endpoint_handler_mode_string(v222);
            id v184 = nw_endpoint_handler_copy_current_path(v222);
            *(_DWORD *)buf = 136447746;
            v242 = "nw_flow_add_read_request";
            __int16 v243 = 2082;
            id_str = (char *)v178;
            __int16 v245 = 2082;
            v246 = v179;
            __int16 v247 = 2082;
            v248 = (void *)v181;
            __int16 v249 = 2082;
            v250 = v182;
            __int16 v251 = 2082;
            v252 = v183;
            __int16 v253 = 2114;
            id v254 = v184;
            _os_log_impl(&dword_1830D4000, v155, v177, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] No final data returned from nw_flow_remove_next_final_read, backtrace limit exceeded", buf, 0x48u);
          }
        }

LABEL_247:
        if (v154) {
          free(v154);
        }
        goto LABEL_249;
      }
      char v108 = __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      v242 = "nw_flow_remove_next_final_read";
      __int16 v109 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v239 = 0;
      if (__nwlog_fault(v109, &type, &v239))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          int v110 = __nwlog_obj();
          os_log_type_t v111 = type;
          if (os_log_type_enabled(v110, type))
          {
            *(_DWORD *)buf = 136446210;
            v242 = "nw_flow_remove_next_final_read";
            _os_log_impl(&dword_1830D4000, v110, v111, "%{public}s called with null flow_protocol", buf, 0xCu);
          }
        }
        else if (v239)
        {
          id v113 = (char *)__nw_create_backtrace_string();
          int v110 = __nwlog_obj();
          os_log_type_t v114 = type;
          BOOL v115 = os_log_type_enabled(v110, type);
          if (v113)
          {
            if (v115)
            {
              *(_DWORD *)buf = 136446466;
              v242 = "nw_flow_remove_next_final_read";
              __int16 v243 = 2082;
              id_str = v113;
              _os_log_impl(&dword_1830D4000, v110, v114, "%{public}s called with null flow_protocol, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(v113);
            goto LABEL_192;
          }
          if (v115)
          {
            *(_DWORD *)buf = 136446210;
            v242 = "nw_flow_remove_next_final_read";
            _os_log_impl(&dword_1830D4000, v110, v114, "%{public}s called with null flow_protocol, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          int v110 = __nwlog_obj();
          os_log_type_t v117 = type;
          if (os_log_type_enabled(v110, type))
          {
            *(_DWORD *)buf = 136446210;
            v242 = "nw_flow_remove_next_final_read";
            _os_log_impl(&dword_1830D4000, v110, v117, "%{public}s called with null flow_protocol, backtrace limit exceeded", buf, 0xCu);
          }
        }
      }
LABEL_192:
      if (v109) {
        free(v109);
      }
      goto LABEL_194;
    }
    uint64_t v96 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v242 = "nw_flow_add_read_request";
    __int16 v21 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v239 = 0;
    if (__nwlog_fault(v21, &type, &v239))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        BOOL v22 = __nwlog_obj();
        os_log_type_t v97 = type;
        if (os_log_type_enabled(v22, type))
        {
          *(_DWORD *)buf = 136446210;
          v242 = "nw_flow_add_read_request";
          _os_log_impl(&dword_1830D4000, v22, v97, "%{public}s called with null read_request", buf, 0xCu);
        }
LABEL_118:

        goto LABEL_119;
      }
      if (!v239)
      {
        BOOL v22 = __nwlog_obj();
        os_log_type_t v116 = type;
        if (os_log_type_enabled(v22, type))
        {
          *(_DWORD *)buf = 136446210;
          v242 = "nw_flow_add_read_request";
          _os_log_impl(&dword_1830D4000, v22, v116, "%{public}s called with null read_request, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_118;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v22 = __nwlog_obj();
      os_log_type_t v106 = type;
      BOOL v107 = os_log_type_enabled(v22, type);
      if (!backtrace_string)
      {
        if (v107)
        {
          *(_DWORD *)buf = 136446210;
          v242 = "nw_flow_add_read_request";
          _os_log_impl(&dword_1830D4000, v22, v106, "%{public}s called with null read_request, no backtrace", buf, 0xCu);
        }
        goto LABEL_118;
      }
      if (v107)
      {
        *(_DWORD *)buf = 136446466;
        v242 = "nw_flow_add_read_request";
        __int16 v243 = 2082;
        id_str = backtrace_string;
        _os_log_impl(&dword_1830D4000, v22, v106, "%{public}s called with null read_request, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_157:

      free(backtrace_string);
    }
  }
  else
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v19 = (id)gLogObj;
    if (mode > 5) {
      BOOL v20 = "unknown-mode";
    }
    else {
      BOOL v20 = off_1E523FB08[mode];
    }
    *(_DWORD *)buf = 136446722;
    v242 = "nw_flow_add_read_request";
    __int16 v243 = 2082;
    id_str = (char *)v20;
    __int16 v245 = 2082;
    v246 = "flow";
    __int16 v21 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v239 = 0;
    if (__nwlog_fault(v21, &type, &v239))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v22 = (id)gLogObj;
        os_log_type_t v23 = type;
        if (os_log_type_enabled(v22, type))
        {
          if (mode > 5) {
            os_log_type_t v24 = "unknown-mode";
          }
          else {
            os_log_type_t v24 = off_1E523FB08[mode];
          }
          *(_DWORD *)buf = 136446722;
          v242 = "nw_flow_add_read_request";
          __int16 v243 = 2082;
          id_str = (char *)v24;
          __int16 v245 = 2082;
          v246 = "flow";
          _os_log_impl(&dword_1830D4000, v22, v23, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
        }
      }
      else if (v239)
      {
        __int16 v25 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v22 = (id)gLogObj;
        os_log_type_t v26 = type;
        BOOL v27 = os_log_type_enabled(v22, type);
        if (v25)
        {
          if (v27)
          {
            if (mode > 5) {
              id v28 = "unknown-mode";
            }
            else {
              id v28 = off_1E523FB08[mode];
            }
            *(_DWORD *)buf = 136446978;
            v242 = "nw_flow_add_read_request";
            __int16 v243 = 2082;
            id_str = (char *)v28;
            __int16 v245 = 2082;
            v246 = "flow";
            __int16 v247 = 2082;
            v248 = v25;
            _os_log_impl(&dword_1830D4000, v22, v26, "%{public}s Handler is in mode %{public}s, expected %{public}s, dumping backtrace:%{public}s", buf, 0x2Au);
          }

          free(v25);
          if (!v21) {
            return 0;
          }
          goto LABEL_120;
        }
        if (v27)
        {
          if (mode > 5) {
            os_log_type_t v34 = "unknown-mode";
          }
          else {
            os_log_type_t v34 = off_1E523FB08[mode];
          }
          *(_DWORD *)buf = 136446722;
          v242 = "nw_flow_add_read_request";
          __int16 v243 = 2082;
          id_str = (char *)v34;
          __int16 v245 = 2082;
          v246 = "flow";
          _os_log_impl(&dword_1830D4000, v22, v26, "%{public}s Handler is in mode %{public}s, expected %{public}s, no backtrace", buf, 0x20u);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v22 = (id)gLogObj;
        os_log_type_t v29 = type;
        if (os_log_type_enabled(v22, type))
        {
          if (mode > 5) {
            uint64_t v30 = "unknown-mode";
          }
          else {
            uint64_t v30 = off_1E523FB08[mode];
          }
          *(_DWORD *)buf = 136446722;
          v242 = "nw_flow_add_read_request";
          __int16 v243 = 2082;
          id_str = (char *)v30;
          __int16 v245 = 2082;
          v246 = "flow";
          _os_log_impl(&dword_1830D4000, v22, v29, "%{public}s Handler is in mode %{public}s, expected %{public}s, backtrace limit exceeded", buf, 0x20u);
        }
      }
      goto LABEL_118;
    }
  }
LABEL_119:
  if (v21) {
LABEL_120:
  }
    free(v21);
  return 0;
}

void sub_183208D3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19)
{
  _Unwind_Resume(a1);
}

BOOL nw_read_request_list_append(void *a1, void *a2)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  Class v3 = a1;
  uint64_t v4 = a2;
  id v5 = v4;
  if (!v4)
  {
    id v10 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v33 = "nw_read_request_list_append";
    BOOL v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v30 = 0;
    if (__nwlog_fault(v11, &type, &v30))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        char v12 = __nwlog_obj();
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v33 = "nw_read_request_list_append";
          _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s called with null request", buf, 0xCu);
        }
      }
      else if (v30)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        char v12 = __nwlog_obj();
        os_log_type_t v27 = type;
        BOOL v28 = os_log_type_enabled(v12, type);
        if (backtrace_string)
        {
          if (v28)
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v33 = "nw_read_request_list_append";
            __int16 v34 = 2082;
            uint32_t v35 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v12, v27, "%{public}s called with null request, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_36;
        }
        if (v28)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v33 = "nw_read_request_list_append";
          _os_log_impl(&dword_1830D4000, v12, v27, "%{public}s called with null request, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        char v12 = __nwlog_obj();
        os_log_type_t v29 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v33 = "nw_read_request_list_append";
          _os_log_impl(&dword_1830D4000, v12, v29, "%{public}s called with null request, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_36:
    if (v11) {
      free(v11);
    }
    id v19 = 0;
    goto LABEL_20;
  }
  if (!v4[1])
  {
    if (!v4[2]) {
      goto LABEL_4;
    }
LABEL_16:
    uint64_t v17 = __nwlog_obj();
    os_log_type_enabled(v17, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446210;
    uint64_t v33 = "nw_read_request_list_append";
    BOOL v18 = (void *)_os_log_send_and_compose_impl();

    BOOL result = __nwlog_abort((uint64_t)v18);
    if (result) {
      goto LABEL_39;
    }
    free(v18);
    if (v3) {
      goto LABEL_5;
    }
LABEL_18:
    nw_endpoint_t v9 = v5;
    Class v3 = v9;
    if (v5[2]) {
      goto LABEL_19;
    }
    goto LABEL_8;
  }
  uint64_t v14 = __nwlog_obj();
  os_log_type_enabled(v14, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446210;
  uint64_t v33 = "nw_read_request_list_append";
  int v15 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v15);
  if (result) {
    goto LABEL_39;
  }
  free(v15);
  if (v5[2]) {
    goto LABEL_16;
  }
LABEL_4:
  if (!v3) {
    goto LABEL_18;
  }
LABEL_5:
  uint64_t v6 = v3[2];
  if (v6)
  {
    uint64_t v8 = *(void *)(v6 + 8);
    id v7 = (id *)(v6 + 8);
    if (!v8)
    {
LABEL_7:
      objc_storeStrong(v7, a2);
      nw_endpoint_t v9 = 0;
      v3[2] = v5;
LABEL_8:
      v5[2] = v9;
      nw_endpoint_t v9 = v3;
LABEL_19:
      Class v3 = v9;
      id v19 = v3;
LABEL_20:

      return (BOOL)v19;
    }
  }
  else
  {
    BOOL v20 = __nwlog_obj();
    os_log_type_enabled(v20, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446210;
    uint64_t v33 = "nw_read_request_list_append";
    __int16 v21 = (void *)_os_log_send_and_compose_impl();

    BOOL result = __nwlog_abort((uint64_t)v21);
    if (result) {
      goto LABEL_39;
    }
    free(v21);
    uint64_t v22 = v3[2];
    uint64_t v23 = *(void *)(v22 + 8);
    id v7 = (id *)(v22 + 8);
    if (!v23) {
      goto LABEL_7;
    }
  }
  os_log_type_t v24 = __nwlog_obj();
  os_log_type_enabled(v24, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446210;
  uint64_t v33 = "nw_read_request_list_append";
  __int16 v25 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v25);
  if (!result)
  {
    free(v25);
    goto LABEL_7;
  }
LABEL_39:
  __break(1u);
  return result;
}

BOOL nw_flow_has_final_read(nw_flow_protocol *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    Class v3 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v13 = "nw_flow_has_final_read";
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v10 = 0;
    if (!__nwlog_fault(v4, &type, &v10)) {
      goto LABEL_19;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v13 = "nw_flow_has_final_read";
        id v7 = "%{public}s called with null flow_protocol";
LABEL_17:
        _os_log_impl(&dword_1830D4000, v5, v6, v7, buf, 0xCu);
      }
    }
    else
    {
      if (v10)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        id v5 = __nwlog_obj();
        os_log_type_t v6 = type;
        BOOL v9 = os_log_type_enabled(v5, type);
        if (backtrace_string)
        {
          if (v9)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v13 = "nw_flow_has_final_read";
            __int16 v14 = 2082;
            int v15 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s called with null flow_protocol, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_19;
        }
        if (!v9) {
          goto LABEL_18;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v13 = "nw_flow_has_final_read";
        id v7 = "%{public}s called with null flow_protocol, no backtrace";
        goto LABEL_17;
      }
      id v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v13 = "nw_flow_has_final_read";
        id v7 = "%{public}s called with null flow_protocol, backtrace limit exceeded";
        goto LABEL_17;
      }
    }
LABEL_18:

LABEL_19:
    if (v4) {
      free(v4);
    }
    return 0;
  }
  final_read_list = a1->final_read_list;
  if (final_read_list) {
    return final_read_list[2].super.super.isa != final_read_list[3].super.super.isa;
  }
  return 0;
}

void nw_endpoint_handler_service_writes(void *a1)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  nw_protocol_stack_t v2 = v1;
  if (!v1)
  {
    id v19 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v28 = "nw_endpoint_handler_service_writes";
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (__nwlog_fault(v8, &type, &v25))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        BOOL v9 = __nwlog_obj();
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v28 = "nw_endpoint_handler_service_writes";
          _os_log_impl(&dword_1830D4000, v9, v20, "%{public}s called with null handler", buf, 0xCu);
        }
        goto LABEL_35;
      }
      if (!v25)
      {
        BOOL v9 = __nwlog_obj();
        os_log_type_t v24 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v28 = "nw_endpoint_handler_service_writes";
          _os_log_impl(&dword_1830D4000, v9, v24, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_35;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v9 = __nwlog_obj();
      os_log_type_t v22 = type;
      BOOL v23 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (v23)
        {
          *(_DWORD *)buf = 136446210;
          BOOL v28 = "nw_endpoint_handler_service_writes";
          _os_log_impl(&dword_1830D4000, v9, v22, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
        goto LABEL_35;
      }
      if (v23)
      {
        *(_DWORD *)buf = 136446466;
        BOOL v28 = "nw_endpoint_handler_service_writes";
        __int16 v29 = 2082;
        char v30 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v9, v22, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
LABEL_36:
    if (!v8) {
      goto LABEL_38;
    }
LABEL_37:
    free(v8);
    goto LABEL_38;
  }
  Class v3 = (NWConcrete_nw_endpoint_handler *)v1;
  uint64_t mode = v3->mode;

  if (mode == 2)
  {
    id v5 = (NWConcrete_nw_endpoint_flow *)nw_endpoint_handler_copy_flow(v3);
    nw_flow_service_writes(v3, v5, &v5->shared_protocol);

    goto LABEL_38;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v6 = (id)gLogObj;
  if (mode > 5) {
    id v7 = "unknown-mode";
  }
  else {
    id v7 = off_1E523FB08[mode];
  }
  *(_DWORD *)buf = 136446722;
  BOOL v28 = "nw_endpoint_handler_service_writes";
  __int16 v29 = 2082;
  char v30 = (void *)v7;
  __int16 v31 = 2082;
  uint64_t v32 = "flow";
  uint64_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v25 = 0;
  if (!__nwlog_fault(v8, &type, &v25)) {
    goto LABEL_36;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v9 = (id)gLogObj;
    os_log_type_t v10 = type;
    if (os_log_type_enabled(v9, type))
    {
      if (mode > 5) {
        BOOL v11 = "unknown-mode";
      }
      else {
        BOOL v11 = off_1E523FB08[mode];
      }
      *(_DWORD *)buf = 136446722;
      BOOL v28 = "nw_endpoint_handler_service_writes";
      __int16 v29 = 2082;
      char v30 = (void *)v11;
      __int16 v31 = 2082;
      uint64_t v32 = "flow";
      _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
    }
LABEL_35:

    goto LABEL_36;
  }
  if (!v25)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v9 = (id)gLogObj;
    os_log_type_t v16 = type;
    if (os_log_type_enabled(v9, type))
    {
      if (mode > 5) {
        uint64_t v17 = "unknown-mode";
      }
      else {
        uint64_t v17 = off_1E523FB08[mode];
      }
      *(_DWORD *)buf = 136446722;
      BOOL v28 = "nw_endpoint_handler_service_writes";
      __int16 v29 = 2082;
      char v30 = (void *)v17;
      __int16 v31 = 2082;
      uint64_t v32 = "flow";
      _os_log_impl(&dword_1830D4000, v9, v16, "%{public}s Handler is in mode %{public}s, expected %{public}s, backtrace limit exceeded", buf, 0x20u);
    }
    goto LABEL_35;
  }
  char v12 = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  BOOL v9 = (id)gLogObj;
  os_log_type_t v13 = type;
  BOOL v14 = os_log_type_enabled(v9, type);
  if (!v12)
  {
    if (v14)
    {
      if (mode > 5) {
        BOOL v18 = "unknown-mode";
      }
      else {
        BOOL v18 = off_1E523FB08[mode];
      }
      *(_DWORD *)buf = 136446722;
      BOOL v28 = "nw_endpoint_handler_service_writes";
      __int16 v29 = 2082;
      char v30 = (void *)v18;
      __int16 v31 = 2082;
      uint64_t v32 = "flow";
      _os_log_impl(&dword_1830D4000, v9, v13, "%{public}s Handler is in mode %{public}s, expected %{public}s, no backtrace", buf, 0x20u);
    }
    goto LABEL_35;
  }
  if (v14)
  {
    if (mode > 5) {
      int v15 = "unknown-mode";
    }
    else {
      int v15 = off_1E523FB08[mode];
    }
    *(_DWORD *)buf = 136446978;
    BOOL v28 = "nw_endpoint_handler_service_writes";
    __int16 v29 = 2082;
    char v30 = (void *)v15;
    __int16 v31 = 2082;
    uint64_t v32 = "flow";
    __int16 v33 = 2082;
    __int16 v34 = v12;
    _os_log_impl(&dword_1830D4000, v9, v13, "%{public}s Handler is in mode %{public}s, expected %{public}s, dumping backtrace:%{public}s", buf, 0x2Au);
  }

  free(v12);
  if (v8) {
    goto LABEL_37;
  }
LABEL_38:
}

void sub_183209CEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_flow_service_writes(NWConcrete_nw_endpoint_handler *a1, NWConcrete_nw_endpoint_flow *a2, nw_flow_protocol *a3)
{
  uint64_t v347 = *MEMORY[0x1E4F143B8];
  v296 = a1;
  v301 = a2;
  if (!a3)
  {
    v260 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_flow_service_writes";
    v261 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(applier[0]) = 16;
    LOBYTE(foreach_block[0]) = 0;
    if (__nwlog_fault(v261, applier, foreach_block))
    {
      if (LOBYTE(applier[0]) == 17)
      {
        v262 = __nwlog_obj();
        os_log_type_t v263 = applier[0];
        if (os_log_type_enabled(v262, applier[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_flow_service_writes";
          _os_log_impl(&dword_1830D4000, v262, v263, "%{public}s called with null flow_protocol", buf, 0xCu);
        }
      }
      else if (LOBYTE(foreach_block[0]))
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        v262 = __nwlog_obj();
        os_log_type_t v265 = applier[0];
        BOOL v266 = os_log_type_enabled(v262, applier[0]);
        if (backtrace_string)
        {
          if (v266)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_flow_service_writes";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = backtrace_string;
            _os_log_impl(&dword_1830D4000, v262, v265, "%{public}s called with null flow_protocol, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_362;
        }
        if (v266)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_flow_service_writes";
          _os_log_impl(&dword_1830D4000, v262, v265, "%{public}s called with null flow_protocol, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        v262 = __nwlog_obj();
        os_log_type_t v274 = applier[0];
        if (os_log_type_enabled(v262, applier[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_flow_service_writes";
          _os_log_impl(&dword_1830D4000, v262, v274, "%{public}s called with null flow_protocol, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_362:
    if (v261) {
      free(v261);
    }
    goto LABEL_306;
  }
  output_handler = a3->protocol.output_handler;
  if (output_handler)
  {
    __int16 v6 = *((_WORD *)a3 + 166);
    if ((v6 & 8) == 0)
    {
      *((_WORD *)a3 + 166) = v6 | 8;
      uint64_t v320 = 0;
      get_message_properties = (void (*)(nw_protocol *, nw_flow_protocol *, uint64_t *))output_handler->callbacks->get_message_properties;
      if (get_message_properties) {
        get_message_properties(output_handler, a3, &v320);
      }
      v300 = a3;
      v293 = output_handler;
      lock = &v301->lock;
      unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      while (1)
      {
        write_requests = v300->write_requests;
        initial_write_requests = v300->initial_write_requests;
        if (write_requests)
        {
          if (!initial_write_requests)
          {
            os_log_type_t v10 = v300;
            goto LABEL_13;
          }
        }
        else if (!initial_write_requests)
        {
          goto LABEL_338;
        }
        os_log_type_t v10 = v300;
        BOOL v11 = nw_write_request_copy_next_incomplete_request(v300->initial_write_requests, (v320 & 0x200000000) != 0, (*((unsigned __int16 *)v300 + 166) >> 1) & 1, v300->last_output_context);
        if (v11) {
          goto LABEL_14;
        }
        write_requests = v300->write_requests;
        if (!write_requests) {
          goto LABEL_321;
        }
LABEL_13:
        BOOL v11 = nw_write_request_copy_next_incomplete_request(write_requests, (v320 & 0x200000000) != 0, (*((unsigned __int16 *)v10 + 166) >> 1) & 1, v10->last_output_context);
        if (!v11)
        {
LABEL_321:
          if (nw_flow_handle_send_complete(v296, v301, v10))
          {
LABEL_322:

            goto LABEL_338;
          }
          v246 = (OS_nw_write_request *)nw_write_request_list_prune(v300->initial_write_requests);
          __int16 v247 = v300->initial_write_requests;
          v300->initial_write_requests = v246;

          v248 = (OS_nw_write_request *)nw_write_request_list_prune(v300->write_requests);
          __int16 v249 = v300->write_requests;
          v300->write_requests = v248;

          int minimize_logging = nw_endpoint_handler_get_minimize_logging(v296);
          char logging_disabled = nw_endpoint_handler_get_logging_disabled(v296);
          if (minimize_logging)
          {
            if (logging_disabled) {
              goto LABEL_322;
            }
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
            }
            v238 = (id)gconnectionLogObj;
            if (os_log_type_enabled(v238, OS_LOG_TYPE_DEBUG))
            {
              id_string = nw_endpoint_handler_get_id_string(v296);
              v283 = nw_endpoint_handler_dry_run_string(v296);
              nw_endpoint_t v284 = nw_endpoint_handler_copy_endpoint(v296);
              logging_description = nw_endpoint_get_logging_description(v284);
              v286 = nw_endpoint_handler_state_string(v296);
              v287 = nw_endpoint_handler_mode_string(v296);
              id v288 = nw_endpoint_handler_copy_current_path(v296);
              *(_DWORD *)buf = 136447746;
              *(void *)&uint8_t buf[4] = "nw_flow_service_writes";
              *(_WORD *)&unsigned char buf[12] = 2082;
              *(void *)&buf[14] = id_string;
              *(_WORD *)&buf[22] = 2082;
              v339 = v283;
              *(_WORD *)v340 = 2082;
              *(void *)&v340[2] = logging_description;
              *(_WORD *)&v340[10] = 2082;
              *(void *)&v340[12] = v286;
              *(_WORD *)&v340[20] = 2082;
              *(void *)&v340[22] = v287;
              __int16 v341 = 2114;
              id v342 = v288;
              _os_log_impl(&dword_1830D4000, v238, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] No unblocked write requests, stopping servicing writes", buf, 0x48u);
            }
          }
          else
          {
            if (logging_disabled) {
              goto LABEL_322;
            }
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
            }
            v238 = (id)gconnectionLogObj;
            if (os_log_type_enabled(v238, OS_LOG_TYPE_INFO))
            {
              v252 = nw_endpoint_handler_get_id_string(v296);
              __int16 v253 = nw_endpoint_handler_dry_run_string(v296);
              nw_endpoint_t v254 = nw_endpoint_handler_copy_endpoint(v296);
              __int16 v255 = nw_endpoint_get_logging_description(v254);
              v256 = nw_endpoint_handler_state_string(v296);
              __int16 v257 = nw_endpoint_handler_mode_string(v296);
              id v258 = nw_endpoint_handler_copy_current_path(v296);
              *(_DWORD *)buf = 136447746;
              *(void *)&uint8_t buf[4] = "nw_flow_service_writes";
              *(_WORD *)&unsigned char buf[12] = 2082;
              *(void *)&buf[14] = v252;
              *(_WORD *)&buf[22] = 2082;
              v339 = v253;
              *(_WORD *)v340 = 2082;
              *(void *)&v340[2] = v255;
              *(_WORD *)&v340[10] = 2082;
              *(void *)&v340[12] = v256;
              *(_WORD *)&v340[20] = 2082;
              *(void *)&v340[22] = v257;
              __int16 v341 = 2114;
              id v342 = v258;
              _os_log_impl(&dword_1830D4000, v238, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] No unblocked write requests, stopping servicing writes", buf, 0x48u);
            }
          }
          v298 = 0;
          goto LABEL_336;
        }
LABEL_14:
        if ((*((_WORD *)v10 + 166) & 0x800) != 0)
        {
          char v12 = v11;
          char v13 = *((unsigned char *)v12 + 128);
          v298 = v12;

          if ((v13 & 4) == 0)
          {
            int v236 = nw_endpoint_handler_get_minimize_logging(v296);
            char v237 = nw_endpoint_handler_get_logging_disabled(v296);
            if (v236)
            {
              if ((v237 & 1) == 0)
              {
                if (__nwlog_connection_log::onceToken != -1) {
                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
                }
                v238 = (id)gconnectionLogObj;
                if (os_log_type_enabled(v238, OS_LOG_TYPE_DEBUG))
                {
                  v275 = nw_endpoint_handler_get_id_string(v296);
                  v276 = nw_endpoint_handler_dry_run_string(v296);
                  nw_endpoint_t v277 = nw_endpoint_handler_copy_endpoint(v296);
                  v278 = nw_endpoint_get_logging_description(v277);
                  v279 = nw_endpoint_handler_state_string(v296);
                  v280 = nw_endpoint_handler_mode_string(v296);
                  id v281 = nw_endpoint_handler_copy_current_path(v296);
                  *(_DWORD *)buf = 136447746;
                  *(void *)&uint8_t buf[4] = "nw_flow_service_writes";
                  *(_WORD *)&unsigned char buf[12] = 2082;
                  *(void *)&buf[14] = v275;
                  *(_WORD *)&buf[22] = 2082;
                  v339 = v276;
                  *(_WORD *)v340 = 2082;
                  *(void *)&v340[2] = v278;
                  *(_WORD *)&v340[10] = 2082;
                  *(void *)&v340[12] = v279;
                  *(_WORD *)&v340[20] = 2082;
                  *(void *)&v340[22] = v280;
                  __int16 v341 = 2114;
                  id v342 = v281;
                  _os_log_impl(&dword_1830D4000, v238, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Write request is not idempotent, stopping servicing writes", buf, 0x48u);
                }
LABEL_336:
              }
            }
            else if ((v237 & 1) == 0)
            {
              if (__nwlog_connection_log::onceToken != -1) {
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
              }
              v238 = (id)gconnectionLogObj;
              if (os_log_type_enabled(v238, OS_LOG_TYPE_INFO))
              {
                char v239 = nw_endpoint_handler_get_id_string(v296);
                v240 = nw_endpoint_handler_dry_run_string(v296);
                nw_endpoint_t v241 = nw_endpoint_handler_copy_endpoint(v296);
                v242 = nw_endpoint_get_logging_description(v241);
                __int16 v243 = nw_endpoint_handler_state_string(v296);
                v244 = nw_endpoint_handler_mode_string(v296);
                id v245 = nw_endpoint_handler_copy_current_path(v296);
                *(_DWORD *)buf = 136447746;
                *(void *)&uint8_t buf[4] = "nw_flow_service_writes";
                *(_WORD *)&unsigned char buf[12] = 2082;
                *(void *)&buf[14] = v239;
                *(_WORD *)&buf[22] = 2082;
                v339 = v240;
                *(_WORD *)v340 = 2082;
                *(void *)&v340[2] = v242;
                *(_WORD *)&v340[10] = 2082;
                *(void *)&v340[12] = v243;
                *(_WORD *)&v340[20] = 2082;
                *(void *)&v340[22] = v244;
                __int16 v341 = 2114;
                id v342 = v245;
                _os_log_impl(&dword_1830D4000, v238, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Write request is not idempotent, stopping servicing writes", buf, 0x48u);
              }
              goto LABEL_336;
            }
LABEL_337:

            goto LABEL_338;
          }
        }
        char v14 = BYTE4(v320);
        int v15 = v11;
        os_log_type_t v16 = v15[7];
        v298 = v15;
        id v17 = v15[9];
        if ((v14 & 1) == 0)
        {
          if (v16)
          {
            if (!v17)
            {
              size_t size = dispatch_data_get_size(v16);
              id v19 = v298;
LABEL_25:
              if (size <= (unint64_t)v19[14]) {
                LODWORD(v22) = 0;
              }
              else {
                id v22 = v19[14];
              }

              if (size != v22)
              {
                int v23 = -1;
                goto LABEL_48;
              }
LABEL_43:
              os_log_type_t v27 = v298;
              id v28 = v27[8];

              if (v28)
              {
                __int16 v29 = v27;
                id v30 = v27[8];

                LOBYTE(v29) = nw_content_context_has_metadata(v30);
                int v23 = -1;
                if (v29) {
                  goto LABEL_48;
                }
              }
              else
              {
                int v23 = -1;
              }
LABEL_47:
              if (nw_flow_handle_send_complete(v296, v301, v300)) {
                goto LABEL_337;
              }
              goto LABEL_48;
            }
          }
          else if (!v17)
          {

            goto LABEL_43;
          }
          id v19 = v298;
          size_t size = (size_t)v298[12];
          goto LABEL_25;
        }
        if (!v16)
        {
          if (!v17)
          {
            unsigned int v25 = 0;
            __int16 v21 = v298;
            goto LABEL_35;
          }
LABEL_31:
          __int16 v21 = v298;
          size_t v20 = (size_t)v298[12];
          goto LABEL_32;
        }
        if (v17) {
          goto LABEL_31;
        }
        size_t v20 = dispatch_data_get_size(v16);
        __int16 v21 = v298;
LABEL_32:
        size_t v24 = (size_t)v21[14];
        if (v20 <= v24) {
          LODWORD(v24) = 0;
        }
        unsigned int v25 = v20 - v24;
LABEL_35:

        if (v320 && v320 < v25)
        {
          int v23 = 1;
          goto LABEL_48;
        }
        os_log_type_t v26 = v300->initial_write_requests;
        if (!v26) {
          os_log_type_t v26 = v300->write_requests;
        }
        int v23 = nw_write_request_remaining_datagram_count(v26);
        if (!v23) {
          goto LABEL_47;
        }
LABEL_48:
        id v318 = 0;
        v319 = &v318;
        v295 = v300->last_error;
        unsigned int v31 = ((uint64_t (*)(void))v293->callbacks->get_output_frames)();
        if (v23 == -1)
        {
          if (gLogDatapath && (nw_endpoint_handler_get_logging_disabled(v296) & 1) == 0)
          {
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
            }
            uint64_t v32 = (id)gconnectionLogObj;
            if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
            {
              v191 = nw_endpoint_handler_get_id_string(v296);
              v192 = nw_endpoint_handler_dry_run_string(v296);
              nw_endpoint_t v193 = nw_endpoint_handler_copy_endpoint(v296);
              id v194 = nw_endpoint_get_logging_description(v193);
              v195 = nw_endpoint_handler_state_string(v296);
              id v196 = nw_endpoint_handler_mode_string(v296);
              id v197 = nw_endpoint_handler_copy_current_path(v296);
              *(_DWORD *)buf = 136448002;
              *(void *)&uint8_t buf[4] = "nw_flow_service_writes";
              *(_WORD *)&unsigned char buf[12] = 2082;
              *(void *)&buf[14] = v191;
              *(_WORD *)&buf[22] = 2082;
              v339 = v192;
              *(_WORD *)v340 = 2082;
              *(void *)&v340[2] = v194;
              *(_WORD *)&v340[10] = 2082;
              *(void *)&v340[12] = v195;
              *(_WORD *)&v340[20] = 2082;
              *(void *)&v340[22] = v196;
              __int16 v341 = 2114;
              id v342 = v197;
              __int16 v343 = 1024;
              unsigned int v344 = v31;
              _os_log_impl(&dword_1830D4000, v32, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Output handler has %u frames to write", buf, 0x4Eu);
            }
            goto LABEL_285;
          }
        }
        else if (gLogDatapath && (nw_endpoint_handler_get_logging_disabled(v296) & 1) == 0)
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          uint64_t v32 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
          {
            __int16 v33 = nw_endpoint_handler_get_id_string(v296);
            __int16 v34 = nw_endpoint_handler_dry_run_string(v296);
            nw_endpoint_t v35 = nw_endpoint_handler_copy_endpoint(v296);
            uint64_t v36 = nw_endpoint_get_logging_description(v35);
            id v37 = nw_endpoint_handler_state_string(v296);
            uint64_t v38 = nw_endpoint_handler_mode_string(v296);
            id v39 = nw_endpoint_handler_copy_current_path(v296);
            *(_DWORD *)buf = 136448258;
            *(void *)&uint8_t buf[4] = "nw_flow_service_writes";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = v33;
            *(_WORD *)&buf[22] = 2082;
            v339 = v34;
            *(_WORD *)v340 = 2082;
            *(void *)&v340[2] = v36;
            *(_WORD *)&v340[10] = 2082;
            *(void *)&v340[12] = v37;
            *(_WORD *)&v340[20] = 2082;
            *(void *)&v340[22] = v38;
            __int16 v341 = 2114;
            id v342 = v39;
            __int16 v343 = 1024;
            unsigned int v344 = v31;
            __int16 v345 = 1024;
            LODWORD(v346) = v23;
            _os_log_impl(&dword_1830D4000, v32, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Output handler has %u frames to write, request wants %u frames", buf, 0x54u);
          }
LABEL_285:
        }
        if (!v318 || !v31)
        {
          if (v31 && (nw_endpoint_handler_get_logging_disabled(v296) & 1) == 0)
          {
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
            }
            v219 = (id)gconnectionLogObj;
            if (os_log_type_enabled(v219, OS_LOG_TYPE_ERROR))
            {
              v220 = nw_endpoint_handler_get_id_string(v296);
              v221 = nw_endpoint_handler_dry_run_string(v296);
              nw_endpoint_t v222 = nw_endpoint_handler_copy_endpoint(v296);
              v223 = nw_endpoint_get_logging_description(v222);
              v224 = nw_endpoint_handler_state_string(v296);
              v225 = nw_endpoint_handler_mode_string(v296);
              id v226 = nw_endpoint_handler_copy_current_path(v296);
              *(_DWORD *)buf = 136448002;
              *(void *)&uint8_t buf[4] = "nw_flow_service_writes";
              *(_WORD *)&unsigned char buf[12] = 2082;
              *(void *)&buf[14] = v220;
              *(_WORD *)&buf[22] = 2082;
              v339 = v221;
              *(_WORD *)v340 = 2082;
              *(void *)&v340[2] = v223;
              *(_WORD *)&v340[10] = 2082;
              *(void *)&v340[12] = v224;
              *(_WORD *)&v340[20] = 2082;
              *(void *)&v340[22] = v225;
              __int16 v341 = 2114;
              id v342 = v226;
              __int16 v343 = 1024;
              unsigned int v344 = v31;
              _os_log_impl(&dword_1830D4000, v219, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Output handler reported %u frames to write, but array is empty", buf, 0x4Eu);
            }
          }
          last_error = v300->last_error;
          if (last_error)
          {
            if (v295 != last_error)
            {
              nw_endpoint_t v228 = last_error;
              int v229 = *((_DWORD *)v228 + 2);

              if (v229 == 1)
              {
                int error_code = nw_error_get_error_code((nw_error_t)v300->last_error);
                nw_endpoint_t v231 = __nwlog_obj();
                if (os_log_type_enabled(v231, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 136446722;
                  *(void *)&uint8_t buf[4] = "nw_flow_service_writes";
                  *(_WORD *)&unsigned char buf[12] = 2114;
                  *(void *)&buf[14] = v298;
                  *(_WORD *)&buf[22] = 1024;
                  LODWORD(v339) = error_code;
                  _os_log_impl(&dword_1830D4000, v231, OS_LOG_TYPE_ERROR, "%{public}s Failing write request %{public}@ %{darwin.errno}d", buf, 0x1Cu);
                }

                nw_write_request_fail(v298, error_code);
                nw_endpoint_t v232 = (OS_nw_write_request *)nw_write_request_list_prune(v300->initial_write_requests);
                nw_endpoint_t v233 = v300->initial_write_requests;
                v300->initial_write_requests = v232;

                v234 = (OS_nw_write_request *)nw_write_request_list_prune(v300->write_requests);
                v235 = v300->write_requests;
                v300->write_requests = v234;
              }
            }
          }

          goto LABEL_337;
        }
        v297 = v301;
        handle = (id *)v300->protocol.handle;
        id v299 = handle[20];
        uint64_t v331 = 0;
        v332 = &v331;
        uint64_t v330 = 0;
        int v41 = nw_flow_copy_write_request((uint64_t)handle, (uint64_t)&v320, &v330);
        __int16 v42 = v41;
        if (v41)
        {
          BOOL v43 = nw_write_request_copy_data(v41);
          BOOL v44 = v43;
          if (v43)
          {
            size_t v306 = dispatch_data_get_size(v43);
            goto LABEL_63;
          }
        }
        else
        {
          BOOL v44 = 0;
        }
        size_t v306 = 0;
LABEL_63:
        id v45 = v318;
        uint64_t v46 = (uint64_t)v45;
        id v47 = 0;
        uint64_t v317 = (uint64_t)handle;
        if (!v42 || !v45) {
          goto LABEL_251;
        }
        uint64_t v48 = 0;
        BOOL v49 = 0;
        while (1)
        {
          BOOL v50 = *(void **)(v46 + 32);
          if (!v50 && !*(void *)(v46 + 40)) {
            BOOL v50 = 0;
          }
          id v315 = v50;
          os_log_type_t v51 = v42;
          id v52 = v51[9];

          if (v52)
          {
            uint64_t v53 = v44;
            int v54 = *(_DWORD *)(v46 + 52);
            if (v54)
            {
              int v55 = *(_DWORD *)(v46 + 56) + *(_DWORD *)(v46 + 60);
              uint64_t v56 = v51;
              data = 0;
              size_t v57 = (v54 - v55);
              if (v54 != v55 && v51[9])
              {
                uint64_t v58 = v56;
                os_log_type_t v59 = v56[14];
                if ((unsigned char *)v56[12] - v59 >= v57) {
                  uint64_t v60 = (v54 - v55);
                }
                else {
                  uint64_t v60 = (unsigned char *)v56[12] - v59;
                }
                uint64_t v337 = 0;
                alloc = dispatch_data_create_alloc();
                uint64_t v333 = 0;
                v334 = &v333;
                uint64_t v335 = 0x2020000000;
                uint64_t v336 = 0;
                id v62 = v51[9];
                *(void *)buf = MEMORY[0x1E4F143A8];
                *(void *)&buf[8] = 3221225472;
                *(void *)&buf[16] = __nw_write_request_copy_data_from_fd_block_invoke;
                v339 = (const char *)&unk_1E523FDA0;
                *(void *)v340 = &v333;
                *(void *)&v340[8] = v337;
                *(void *)&v340[16] = v60;
                nw_fd_wrapper_get_fd(v62, buf);
                size_t v63 = v334[3];
                if (v63)
                {
                  if (v63 == -1)
                  {
                    posix_error = nw_error_create_posix_error(**(_DWORD **)(StatusReg + 8));
                    nw_write_request_report(v58, 0, posix_error);

                    data = 0;
                  }
                  else
                  {
                    if (v63 >= v57) {
                      dispatch_data_t subrange = alloc;
                    }
                    else {
                      dispatch_data_t subrange = dispatch_data_create_subrange(alloc, 0, v63);
                    }
                    data = subrange;
                  }
                }
                else
                {
                  data = 0;
                  *((unsigned char *)v58 + 128) |= 0x10u;
                }
                _Block_object_dispose(&v333, 8);
              }
            }
            else
            {
              BOOL v65 = v51;
              data = 0;
            }

            os_log_type_t v67 = v51;
            __int16 v68 = v67[7];
            id v69 = v51[9];
            if (v68)
            {
              if (!v69)
              {
                size_t v70 = dispatch_data_get_size(v68);
                goto LABEL_92;
              }
LABEL_91:
              size_t v70 = (size_t)v67[12];
LABEL_92:
              size_t v71 = (size_t)v67[14];
              if (v70 <= v71) {
                size_t v71 = 0;
              }
              size_t v306 = v70 - v71;
            }
            else
            {
              if (v69) {
                goto LABEL_91;
              }
              size_t v306 = 0;
            }

            uint64_t v48 = 0;
            goto LABEL_96;
          }
          data = v44;
LABEL_96:
          if ((*(_WORD *)(v317 + 332) & 0x800) != 0)
          {
            os_log_type_t v72 = v51;
            char v73 = *((unsigned char *)v72 + 128);

            if ((v73 & 4) == 0)
            {
              int v131 = nw_endpoint_handler_get_minimize_logging(v299);
              char v132 = nw_endpoint_handler_get_logging_disabled(v299);
              if (v131)
              {
                if ((v132 & 1) == 0)
                {
                  if (__nwlog_connection_log::onceToken != -1) {
                    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
                  }
                  v133 = (id)gconnectionLogObj;
                  if (os_log_type_enabled(v133, OS_LOG_TYPE_DEBUG))
                  {
                    v198 = nw_endpoint_handler_get_id_string(v299);
                    v199 = nw_endpoint_handler_dry_run_string(v299);
                    nw_endpoint_t v200 = nw_endpoint_handler_copy_endpoint(v299);
                    v201 = nw_endpoint_get_logging_description(v200);
                    v311 = nw_endpoint_handler_state_string(v299);
                    id v202 = nw_endpoint_handler_mode_string(v299);
                    id v203 = nw_endpoint_handler_copy_current_path(v299);
                    *(_DWORD *)buf = 136447746;
                    *(void *)&uint8_t buf[4] = "nw_flow_prepare_output_frames";
                    *(_WORD *)&unsigned char buf[12] = 2082;
                    *(void *)&buf[14] = v198;
                    *(_WORD *)&buf[22] = 2082;
                    v339 = v199;
                    *(_WORD *)v340 = 2082;
                    *(void *)&v340[2] = v201;
                    *(_WORD *)&v340[10] = 2082;
                    *(void *)&v340[12] = v311;
                    *(_WORD *)&v340[20] = 2082;
                    *(void *)&v340[22] = v202;
                    __int16 v341 = 2114;
                    id v342 = v203;
                    _os_log_impl(&dword_1830D4000, v133, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Write request is not idempotent, stopping preparing frames", buf, 0x48u);
                  }
LABEL_222:
                }
              }
              else if ((v132 & 1) == 0)
              {
                if (__nwlog_connection_log::onceToken != -1) {
                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
                }
                v133 = (id)gconnectionLogObj;
                if (os_log_type_enabled(v133, OS_LOG_TYPE_INFO))
                {
                  uint64_t v134 = nw_endpoint_handler_get_id_string(v299);
                  v135 = nw_endpoint_handler_dry_run_string(v299);
                  nw_endpoint_t v136 = nw_endpoint_handler_copy_endpoint(v299);
                  v137 = nw_endpoint_get_logging_description(v136);
                  v308 = nw_endpoint_handler_state_string(v299);
                  v138 = nw_endpoint_handler_mode_string(v299);
                  id v139 = nw_endpoint_handler_copy_current_path(v299);
                  *(_DWORD *)buf = 136447746;
                  *(void *)&uint8_t buf[4] = "nw_flow_prepare_output_frames";
                  *(_WORD *)&unsigned char buf[12] = 2082;
                  *(void *)&buf[14] = v134;
                  *(_WORD *)&buf[22] = 2082;
                  v339 = v135;
                  *(_WORD *)v340 = 2082;
                  *(void *)&v340[2] = v137;
                  *(_WORD *)&v340[10] = 2082;
                  *(void *)&v340[12] = v308;
                  *(_WORD *)&v340[20] = 2082;
                  *(void *)&v340[22] = v138;
                  __int16 v341 = 2114;
                  id v342 = v139;
                  _os_log_impl(&dword_1830D4000, v133, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Write request is not idempotent, stopping preparing frames", buf, 0x48u);
                }
                goto LABEL_222;
              }
              id v47 = v49;
              goto LABEL_246;
            }
          }
          os_log_type_t v72 = v51;
          id v47 = v72[8];

          if (v47)
          {
            BOOL v74 = (os_unfair_lock_s *)v47;
            uint64_t v75 = v74;
            if (v74 == (os_unfair_lock_s *)&__block_literal_global_10_42276
              || v74 == (os_unfair_lock_s *)&__block_literal_global_8_42267
              || v74 == (os_unfair_lock_s *)&__block_literal_global_6_42258
              || v74 == (os_unfair_lock_s *)&__block_literal_global_42249)
            {
            }
            else
            {
              os_unfair_lock_lock(v74 + 28);
              uint64_t v76 = *(void *)&v75[22]._os_unfair_lock_opaque;
              if (v76) {
                uint64_t v76 = (uint64_t)(*(void *)(v76 + 24) - *(void *)(v76 + 16)) >> 3;
              }
              BOOL v77 = v76 == 0;
              os_unfair_lock_unlock(v75 + 28);

              if (!v77)
              {
                int v78 = nw_parameters_copy_default_protocol_stack(*(nw_parameters_t *)(v317 + 176));
                uint64_t v79 = nw_protocol_stack_copy_transport_protocol(v78);
                int v80 = nw_protocol_options_copy_definition(v79);
                nw_protocol_metadata_t v81 = nw_content_context_copy_protocol_metadata((nw_content_context_t)v75, v80);
                __int16 v82 = *(void **)(v317 + 232);
                *(void *)(v317 + 232) = v81;

LABEL_110:
                *(_WORD *)(v317 + 332) |= 2u;
                goto LABEL_111;
              }
            }
            int v78 = *(NSObject **)(v317 + 232);
            *(void *)(v317 + 232) = 0;
            goto LABEL_110;
          }
LABEL_111:
          uint64_t v333 = 0;
          v334 = &v333;
          LODWORD(v336) = 0;
          uint64_t v335 = 0x2020000000;
          if ((*(_WORD *)(v46 + 204) & 2) != 0)
          {
            int v86 = *(_DWORD *)(v46 + 52);
            if (v86)
            {
              unsigned int v87 = v86 - (*(_DWORD *)(v46 + 56) + *(_DWORD *)(v46 + 60));
              if ((v320 & 0x100000000) == 0)
              {
LABEL_125:
                if (!nw_frame_set_external_data(v46, data, (unsigned int *)&v336))
                {
                  char v153 = nw_endpoint_handler_get_logging_disabled(v299);
                  if ((v153 & 1) == 0)
                  {
                    if (__nwlog_connection_log::onceToken != -1) {
                      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
                    }
                    v140 = (id)gconnectionLogObj;
                    if (os_log_type_enabled(v140, OS_LOG_TYPE_ERROR))
                    {
                      v154 = nw_endpoint_handler_get_id_string(v299);
                      v155 = nw_endpoint_handler_dry_run_string(v299);
                      nw_endpoint_t v156 = nw_endpoint_handler_copy_endpoint(v299);
                      char v157 = nw_endpoint_get_logging_description(v156);
                      v309 = nw_endpoint_handler_state_string(v299);
                      v158 = nw_endpoint_handler_mode_string(v299);
                      id v159 = nw_endpoint_handler_copy_current_path(v299);
                      *(_DWORD *)buf = 136447746;
                      *(void *)&uint8_t buf[4] = "nw_flow_prepare_output_frames";
                      *(_WORD *)&unsigned char buf[12] = 2082;
                      *(void *)&buf[14] = v154;
                      *(_WORD *)&buf[22] = 2082;
                      v339 = v155;
                      *(_WORD *)v340 = 2082;
                      *(void *)&v340[2] = v157;
                      *(_WORD *)&v340[10] = 2082;
                      *(void *)&v340[12] = v309;
                      *(_WORD *)&v340[20] = 2082;
                      *(void *)&v340[22] = v158;
                      __int16 v341 = 2114;
                      id v342 = v159;
                      _os_log_impl(&dword_1830D4000, v140, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Data cannot be set in frame", buf, 0x48u);
                    }
                    int v146 = 12;
                    goto LABEL_243;
                  }
                  int v146 = 12;
LABEL_244:
                  uint64_t v130 = v317;
                  nw_write_request_fail(v72, v146);
                  goto LABEL_245;
                }
                goto LABEL_139;
              }
            }
            else
            {
              unsigned int v87 = 0;
              if ((v320 & 0x100000000) == 0) {
                goto LABEL_125;
              }
            }
            if (v306 > v87)
            {
              if (nw_endpoint_handler_get_logging_disabled(v299))
              {
                int v146 = 40;
              }
              else
              {
                if (__nwlog_connection_log::onceToken != -1) {
                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
                }
                v140 = (id)gconnectionLogObj;
                if (os_log_type_enabled(v140, OS_LOG_TYPE_ERROR))
                {
                  os_log_type_t v141 = nw_endpoint_handler_get_id_string(v299);
                  v142 = nw_endpoint_handler_dry_run_string(v299);
                  nw_endpoint_t v143 = nw_endpoint_handler_copy_endpoint(v299);
                  id v144 = nw_endpoint_get_logging_description(v143);
                  v302 = nw_endpoint_handler_state_string(v299);
                  v289 = nw_endpoint_handler_mode_string(v299);
                  id v145 = nw_endpoint_handler_copy_current_path(v299);
                  *(_DWORD *)buf = 136448258;
                  *(void *)&uint8_t buf[4] = "nw_flow_prepare_output_frames";
                  *(_WORD *)&unsigned char buf[12] = 2082;
                  *(void *)&buf[14] = v141;
                  *(_WORD *)&buf[22] = 2082;
                  v339 = v142;
                  *(_WORD *)v340 = 2082;
                  *(void *)&v340[2] = v144;
                  *(_WORD *)&v340[10] = 2082;
                  *(void *)&v340[12] = v302;
                  *(_WORD *)&v340[20] = 2082;
                  *(void *)&v340[22] = v289;
                  __int16 v341 = 2114;
                  id v342 = v145;
                  __int16 v343 = 1024;
                  unsigned int v344 = v87;
                  __int16 v345 = 2048;
                  size_t v346 = v306;
                  _os_log_impl(&dword_1830D4000, v140, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Data won't fit in frame (%u < %zu)", buf, 0x58u);
                }
                int v146 = 40;
LABEL_243:
              }
              goto LABEL_244;
            }
            goto LABEL_125;
          }
          if (!*(void *)(v46 + 112)
            || (*(_WORD *)(v46 + 204) & 0x100) != 0
            && g_channel_check_validity
            && !g_channel_check_validity(v46, *(void *)(v46 + 88)))
          {
            unsigned int v85 = 0;
            uint64_t v88 = 0;
            if ((v320 & 0x100000000) != 0) {
              goto LABEL_129;
            }
          }
          else
          {
            int v84 = *(_DWORD *)(v46 + 52);
            uint64_t v83 = *(unsigned int *)(v46 + 56);
            if (v84) {
              unsigned int v85 = v84 - (v83 + *(_DWORD *)(v46 + 60));
            }
            else {
              unsigned int v85 = 0;
            }
            uint64_t v88 = *(void *)(v46 + 112) + v83;
            if ((v320 & 0x100000000) != 0)
            {
LABEL_129:
              if (v306 > v85)
              {
                if ((nw_endpoint_handler_get_logging_disabled(v299) & 1) == 0)
                {
                  if (__nwlog_connection_log::onceToken != -1) {
                    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
                  }
                  v147 = (id)gconnectionLogObj;
                  if (os_log_type_enabled(v147, OS_LOG_TYPE_ERROR))
                  {
                    v148 = nw_endpoint_handler_get_id_string(v299);
                    v149 = nw_endpoint_handler_dry_run_string(v299);
                    nw_endpoint_t v150 = nw_endpoint_handler_copy_endpoint(v299);
                    v151 = nw_endpoint_get_logging_description(v150);
                    v303 = nw_endpoint_handler_state_string(v299);
                    v290 = nw_endpoint_handler_mode_string(v299);
                    id v152 = nw_endpoint_handler_copy_current_path(v299);
                    *(_DWORD *)buf = 136448258;
                    *(void *)&uint8_t buf[4] = "nw_flow_prepare_output_frames";
                    *(_WORD *)&unsigned char buf[12] = 2082;
                    *(void *)&buf[14] = v148;
                    *(_WORD *)&buf[22] = 2082;
                    v339 = v149;
                    *(_WORD *)v340 = 2082;
                    *(void *)&v340[2] = v151;
                    *(_WORD *)&v340[10] = 2082;
                    *(void *)&v340[12] = v303;
                    *(_WORD *)&v340[20] = 2082;
                    *(void *)&v340[22] = v290;
                    __int16 v341 = 2114;
                    id v342 = v152;
                    __int16 v343 = 1024;
                    unsigned int v344 = v85;
                    __int16 v345 = 2048;
                    size_t v346 = v306;
                    _os_log_impl(&dword_1830D4000, v147, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Data won't fit in frame (%u < %zu)", buf, 0x58u);
                  }
                }
                nw_write_request_fail(v72, 40);
                uint64_t v130 = v317;
                goto LABEL_245;
              }
            }
          }
          __int16 v90 = v72;
          id v91 = v51[9];

          if (v91)
          {
            if (!data) {
              goto LABEL_139;
            }
            BOOL v92 = data;
            int v93 = dispatch_data_get_size(data);
            goto LABEL_138;
          }
          if (v85 >= (int)v306 - (int)v48) {
            int v93 = v306 - v48;
          }
          else {
            int v93 = v85;
          }
          if (data)
          {
            BOOL v92 = data;
LABEL_138:
            applier[0] = MEMORY[0x1E4F143A8];
            applier[1] = 3221225472;
            applier[2] = ___ZL29nw_flow_prepare_output_framesP27NWConcrete_nw_endpoint_flowP11nw_protocolP16nw_frame_array_sjP30nw_protocol_message_properties_block_invoke;
            applier[3] = &unk_1E523CAE8;
            int v329 = v93;
            applier[4] = &v333;
            applier[5] = v48;
            void applier[6] = v88;
            dispatch_data_apply(v92, applier);
          }
LABEL_139:
          if (!nw_frame_claim(v46, v89, *((_DWORD *)v334 + 6), 0)) {
            break;
          }
          uint64_t v94 = v330;
          uint64_t v95 = *((unsigned int *)v334 + 6);
          size_t v96 = (v95 + v48);
          if (v315 && v306 > v96)
          {
            if (nw_write_request_consume_bytes(v72, *((unsigned int *)v334 + 6))) {
              __int16 v97 = 0;
            }
            else {
              __int16 v97 = 2;
            }
            *(_WORD *)(v317 + 332) = *(_WORD *)(v317 + 332) & 0xFFFD | v97;
            __int16 v42 = v72;
            char v98 = *((unsigned char *)v42 + 128);

            v48 += v95;
            BOOL v44 = data;
          }
          else
          {
            if (nw_write_request_consume_bytes(v72, *((unsigned int *)v334 + 6))) {
              __int16 v99 = 0;
            }
            else {
              __int16 v99 = 2;
            }
            *(_WORD *)(v317 + 332) = *(_WORD *)(v317 + 332) & 0xFFFD | v99;
            BOOL v100 = v72;
            char v98 = *((unsigned char *)v100 + 128);

            __int16 v42 = nw_flow_copy_write_request(v317, (uint64_t)&v320, &v330);
            os_unfair_lock_lock(lock);
            unsigned int pending_write_bytes = v301->pending_write_bytes;
            BOOL v102 = pending_write_bytes >= v96;
            unsigned int v103 = pending_write_bytes - v96;
            if (!v102) {
              unsigned int v103 = 0;
            }
            v301->unsigned int pending_write_bytes = v103;
            os_unfair_lock_unlock(lock);
            if (v42)
            {
              BOOL v44 = nw_write_request_copy_data(v42);

              if (v44)
              {
                size_t v306 = dispatch_data_get_size(v44);
                uint64_t v48 = 0;
              }
              else
              {
                uint64_t v48 = 0;
                size_t v306 = 0;
              }
            }
            else
            {

              uint64_t v48 = 0;
              size_t v306 = 0;
              BOOL v44 = 0;
              __int16 v42 = 0;
            }
          }
          v301->sent_application_byte_count += *((unsigned int *)v334 + 6);
          if (v47)
          {
            v104 = v47;
            id v105 = v104;
            if (v104 == (unsigned char *)&__block_literal_global_10_42276
              || v104 == (unsigned char *)&__block_literal_global_8_42267
              || v104 == (unsigned char *)&__block_literal_global_6_42258
              || v104 == (unsigned char *)&__block_literal_global_42249
              || (v104[118] & 8) == 0)
            {
            }
            else
            {

              nw_frame_set_packet_id(v46, v105 + 8);
            }
          }
          if (v94)
          {
            *(_WORD *)(v46 + 204) |= 0x10u;
            *(void *)(v46 + 152) = v94;
            if (!v47) {
              goto LABEL_174;
            }
          }
          else if (!v47)
          {
            goto LABEL_174;
          }
          os_log_type_t v106 = v47;
          if (v106 == (unsigned char *)&__block_literal_global_10_42276
            || v106 == (unsigned char *)&__block_literal_global_8_42267
            || v106 == (unsigned char *)&__block_literal_global_6_42258
            || v106 == (unsigned char *)&__block_literal_global_42249
            || (v106[119] & 1) == 0)
          {
          }
          else
          {
            char v107 = v106[116];
            char v108 = v106[117];

            int v109 = *(unsigned __int16 *)(v46 + 204) | (*(unsigned __int8 *)(v46 + 206) << 16);
            if ((v109 & 0x10000) == 0)
            {
              *(unsigned char *)(v46 + 201) = v107;
              *(unsigned char *)(v46 + 202) = v108;
              *(_WORD *)(v46 + 204) = v109;
              *(unsigned char *)(v46 + 206) = (v109 | 0x10000u) >> 16;
            }
          }
LABEL_174:
          if (v98)
          {
            BOOL v110 = (*(_WORD *)(v317 + 332) & 2) == 0;
            if (!v47) {
              goto LABEL_189;
            }
          }
          else
          {
            BOOL v110 = 0;
            if (!v47) {
              goto LABEL_189;
            }
          }
          os_log_type_t v111 = (os_unfair_lock_s *)v47;
          os_log_type_t v112 = v111;
          if (v111 == (os_unfair_lock_s *)&__block_literal_global_10_42276
            || v111 == (os_unfair_lock_s *)&__block_literal_global_8_42267
            || v111 == (os_unfair_lock_s *)&__block_literal_global_6_42258
            || v111 == (os_unfair_lock_s *)&__block_literal_global_42249)
          {

LABEL_189:
            if (!v110) {
              goto LABEL_198;
            }
            nw_frame_set_metadata(v46, 0, 0, 1);
            if (!v47) {
              goto LABEL_198;
            }
            goto LABEL_191;
          }
          os_unfair_lock_lock(v111 + 28);
          uint64_t v113 = *(void *)&v112[22]._os_unfair_lock_opaque;
          if (v113) {
            uint64_t v113 = (uint64_t)(*(void *)(v113 + 24) - *(void *)(v113 + 16)) >> 3;
          }
          BOOL v114 = v113 == 0;
          os_unfair_lock_unlock(v112 + 28);

          if (v114) {
            goto LABEL_189;
          }
          foreach_block[0] = MEMORY[0x1E4F143A8];
          foreach_block[1] = 3221225472;
          foreach_block[2] = ___ZL29nw_flow_prepare_output_framesP27NWConcrete_nw_endpoint_flowP11nw_protocolP16nw_frame_array_sjP30nw_protocol_message_properties_block_invoke_88;
          foreach_block[3] = &unk_1E523CB10;
          id v326 = (id)v46;
          BOOL v327 = v110;
          nw_content_context_foreach_protocol_metadata((nw_content_context_t)v112, foreach_block);

LABEL_191:
          if (v110)
          {
            BOOL v115 = v47;
            if (v115 == (unsigned char *)&__block_literal_global_42249 || v115 == (unsigned char *)&__block_literal_global_10_42276)
            {

              goto LABEL_198;
            }
            if (v115 == (unsigned char *)&__block_literal_global_6_42258 || v115 == (unsigned char *)&__block_literal_global_8_42267)
            {

LABEL_197:
              *(unsigned char *)(v46 + 186) |= 0x80u;
              goto LABEL_198;
            }
            BOOL v116 = (v115[118] & 1) == 0;

            if (!v116) {
              goto LABEL_197;
            }
          }
LABEL_198:
          nw_frame_collapse(v46);
          nw_frame_unclaim(v46, v117, *((_DWORD *)v334 + 6), 0);
          uint64_t v118 = *(void *)(v46 + 32);
          BOOL v119 = *(void **)(v46 + 40);
          if (v118)
          {
            *(void *)(v118 + 40) = v119;
            BOOL v119 = *(void **)(v46 + 40);
          }
          else
          {
            v319 = *(id **)(v46 + 40);
          }
          *BOOL v119 = v118;
          os_log_type_t v120 = v332;
          *(void *)(v46 + 32) = 0;
          *(void *)(v46 + 40) = v120;
          *os_log_type_t v120 = v46;
          v332 = (uint64_t *)(v46 + 32);

          _Block_object_dispose(&v333, 8);
          if (v42) {
            BOOL v121 = v315 != 0;
          }
          else {
            BOOL v121 = 0;
          }
          BOOL v49 = v47;
          uint64_t v122 = (uint64_t)v315;
          uint64_t v46 = (uint64_t)v315;
          if (!v121) {
            goto LABEL_247;
          }
        }
        if ((nw_endpoint_handler_get_logging_disabled(v299) & 1) == 0)
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          size_t v123 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v123, OS_LOG_TYPE_ERROR))
          {
            v124 = nw_endpoint_handler_get_id_string(v299);
            id v125 = nw_endpoint_handler_dry_run_string(v299);
            nw_endpoint_t v126 = nw_endpoint_handler_copy_endpoint(v299);
            v127 = nw_endpoint_get_logging_description(v126);
            v307 = nw_endpoint_handler_state_string(v299);
            BOOL v128 = nw_endpoint_handler_mode_string(v299);
            id v129 = nw_endpoint_handler_copy_current_path(v299);
            *(_DWORD *)buf = 136447746;
            *(void *)&uint8_t buf[4] = "nw_flow_prepare_output_frames";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = v124;
            *(_WORD *)&buf[22] = 2082;
            v339 = v125;
            *(_WORD *)v340 = 2082;
            *(void *)&v340[2] = v127;
            *(_WORD *)&v340[10] = 2082;
            *(void *)&v340[12] = v307;
            *(_WORD *)&v340[20] = 2082;
            *(void *)&v340[22] = v128;
            __int16 v341 = 2114;
            id v342 = v129;
            _os_log_impl(&dword_1830D4000, v123, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Claiming frame failed", buf, 0x48u);
          }
        }
        nw_write_request_fail(v72, 22);
        uint64_t v130 = v317;
LABEL_245:
        *(_WORD *)(v130 + 332) &= ~2u;
        _Block_object_dispose(&v333, 8);
LABEL_246:

        uint64_t v122 = v46;
        __int16 v42 = v72;
        BOOL v44 = data;
LABEL_247:
        uint64_t v46 = v122;
        if (v47)
        {
          handle = (id *)v317;
          if ((*(_WORD *)(v317 + 332) & 2) != 0)
          {
            objc_storeStrong((id *)(v317 + 224), v47);
            goto LABEL_250;
          }
        }
        else
        {
LABEL_250:
          handle = (id *)v317;
        }
LABEL_251:
        v316 = (void *)v46;
        id v160 = handle[40];
        ((void (*)(void))v300->protocol.output_handler->callbacks->finalize_output_frames)();
        id v161 = handle[40];
        if (!v161) {
          goto LABEL_267;
        }
        if (v160 == v161) {
          goto LABEL_267;
        }
        v162 = v161;
        int v163 = v162[2];

        handle = (id *)v317;
        if (v163 != 1) {
          goto LABEL_267;
        }
        int v164 = nw_error_get_error_code(*(nw_error_t *)(v317 + 320));
        if (v164 == 4) {
          goto LABEL_267;
        }
        int v165 = v164;
        if (v164 == 35) {
          goto LABEL_267;
        }
        if (v164 != 32)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v168 = (id)gLogObj;
          if (os_log_type_enabled(v168, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_flow_prepare_output_frames";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = v165;
            _os_log_impl(&dword_1830D4000, v168, OS_LOG_TYPE_ERROR, "%{public}s Failing the write requests %{darwin.errno}d", buf, 0x12u);
          }
          goto LABEL_265;
        }
        int v166 = nw_endpoint_handler_get_minimize_logging(v299);
        char v167 = nw_endpoint_handler_get_logging_disabled(v299);
        if (v166)
        {
          if (v167) {
            goto LABEL_266;
          }
          id v312 = v160;
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          v168 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v168, OS_LOG_TYPE_DEBUG))
          {
            v204 = nw_endpoint_handler_get_id_string(v299);
            v205 = nw_endpoint_handler_dry_run_string(v299);
            nw_endpoint_t v206 = nw_endpoint_handler_copy_endpoint(v299);
            uint64_t v207 = nw_endpoint_get_logging_description(v206);
            v208 = nw_endpoint_handler_state_string(v299);
            v305 = nw_endpoint_handler_mode_string(v299);
            id v209 = nw_endpoint_handler_copy_current_path(v299);
            *(_DWORD *)buf = 136447746;
            *(void *)&uint8_t buf[4] = "nw_flow_prepare_output_frames";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = v204;
            *(_WORD *)&buf[22] = 2082;
            v339 = v205;
            *(_WORD *)v340 = 2082;
            *(void *)&v340[2] = v207;
            *(_WORD *)&v340[10] = 2082;
            *(void *)&v340[12] = v208;
            *(_WORD *)&v340[20] = 2082;
            *(void *)&v340[22] = v305;
            __int16 v341 = 2114;
            id v342 = v209;
            _os_log_impl(&dword_1830D4000, v168, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Failing the write requests due to the connection being closed", buf, 0x48u);

            id v160 = v312;
          }
LABEL_265:

          handle = (id *)v317;
          goto LABEL_266;
        }
        if ((v167 & 1) == 0)
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          v168 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v168, OS_LOG_TYPE_DEFAULT))
          {
            v169 = nw_endpoint_handler_get_id_string(v299);
            os_log_type_t v170 = nw_endpoint_handler_dry_run_string(v299);
            nw_endpoint_t v171 = nw_endpoint_handler_copy_endpoint(v299);
            v172 = nw_endpoint_get_logging_description(v171);
            v304 = nw_endpoint_handler_state_string(v299);
            v291 = nw_endpoint_handler_mode_string(v299);
            id v173 = nw_endpoint_handler_copy_current_path(v299);
            *(_DWORD *)buf = 136447746;
            *(void *)&uint8_t buf[4] = "nw_flow_prepare_output_frames";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = v169;
            *(_WORD *)&buf[22] = 2082;
            v339 = v170;
            *(_WORD *)v340 = 2082;
            *(void *)&v340[2] = v172;
            *(_WORD *)&v340[10] = 2082;
            *(void *)&v340[12] = v304;
            *(_WORD *)&v340[20] = 2082;
            *(void *)&v340[22] = v291;
            __int16 v341 = 2114;
            id v342 = v173;
            _os_log_impl(&dword_1830D4000, v168, OS_LOG_TYPE_DEFAULT, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Failing the write requests due to the connection being closed", buf, 0x48u);
          }
          goto LABEL_265;
        }
LABEL_266:
        nw_write_request_report_error_with_override(handle[25], 0, handle[40]);
        nw_write_request_report_error_with_override(handle[24], 0, handle[40]);
LABEL_267:
        v174 = nw_write_request_list_prune(handle[25]);
        id v175 = handle[25];
        handle[25] = v174;

        id v176 = nw_write_request_list_prune(*(void **)(v317 + 192));
        os_log_type_t v177 = *(void **)(v317 + 192);
        *(void *)(v317 + 192) = v176;

        v178 = v318;
        if (v318)
        {
          uint64_t v333 = 0;
          v334 = &v333;
          LODWORD(v336) = 0;
          uint64_t v335 = 0x2020000000;
          v321[0] = MEMORY[0x1E4F143A8];
          v321[1] = 3221225472;
          v322 = ___ZL29nw_flow_prepare_output_framesP27NWConcrete_nw_endpoint_flowP11nw_protocolP16nw_frame_array_sjP30nw_protocol_message_properties_block_invoke_90;
          v323 = &unk_1E523CAC0;
          v324 = &v333;
          do
          {
            if (!v178) {
              break;
            }
            v179 = (void *)v178[4];
            char v180 = ((uint64_t (*)(void *))v322)(v321);
            v178 = v179;
          }
          while ((v180 & 1) != 0);
          if ((nw_endpoint_handler_get_logging_disabled(v299) & 1) == 0)
          {
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
            }
            v181 = (id)gconnectionLogObj;
            if (os_log_type_enabled(v181, OS_LOG_TYPE_ERROR))
            {
              id v310 = v160;
              v182 = nw_endpoint_handler_get_id_string(v299);
              v183 = nw_endpoint_handler_dry_run_string(v299);
              dispatch_data_t dataa = v44;
              nw_endpoint_t v184 = nw_endpoint_handler_copy_endpoint(v299);
              v185 = nw_endpoint_get_logging_description(v184);
              v186 = nw_endpoint_handler_state_string(v299);
              os_log_type_t v187 = nw_endpoint_handler_mode_string(v299);
              id v188 = nw_endpoint_handler_copy_current_path(v299);
              unsigned int v189 = *((_DWORD *)v334 + 6);
              *(_DWORD *)buf = 136448002;
              *(void *)&uint8_t buf[4] = "nw_flow_prepare_output_frames";
              *(_WORD *)&unsigned char buf[12] = 2082;
              *(void *)&buf[14] = v182;
              *(_WORD *)&buf[22] = 2082;
              v339 = v183;
              *(_WORD *)v340 = 2082;
              *(void *)&v340[2] = v185;
              *(_WORD *)&v340[10] = 2082;
              *(void *)&v340[12] = v186;
              *(_WORD *)&v340[20] = 2082;
              *(void *)&v340[22] = v187;
              __int16 v341 = 2114;
              id v342 = v188;
              __int16 v343 = 1024;
              unsigned int v344 = v189;
              _os_log_impl(&dword_1830D4000, v181, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Failed to use %u frames, marking as failed", buf, 0x4Eu);

              id v160 = v310;
              BOOL v44 = dataa;
            }
          }
          _Block_object_dispose(&v333, 8);
        }

        char v190 = nw_flow_handle_send_complete(v296, v297, v300);
        if (v190)
        {
LABEL_338:
          *((_WORD *)v300 + 166) &= ~8u;
          uint64_t v218 = 1;
          goto LABEL_339;
        }
      }
    }
    if (gLogDatapath && (nw_endpoint_handler_get_logging_disabled(v296) & 1) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      v210 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v210, OS_LOG_TYPE_DEBUG))
      {
        v267 = nw_endpoint_handler_get_id_string(v296);
        v268 = nw_endpoint_handler_dry_run_string(v296);
        nw_endpoint_t v269 = nw_endpoint_handler_copy_endpoint(v296);
        v270 = nw_endpoint_get_logging_description(v269);
        v271 = nw_endpoint_handler_state_string(v296);
        v272 = nw_endpoint_handler_mode_string(v296);
        id v273 = nw_endpoint_handler_copy_current_path(v296);
        *(_DWORD *)buf = 136447746;
        *(void *)&uint8_t buf[4] = "nw_flow_service_writes";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = v267;
        *(_WORD *)&buf[22] = 2082;
        v339 = v268;
        *(_WORD *)v340 = 2082;
        *(void *)&v340[2] = v270;
        *(_WORD *)&v340[10] = 2082;
        *(void *)&v340[12] = v271;
        *(_WORD *)&v340[20] = 2082;
        *(void *)&v340[22] = v272;
        __int16 v341 = 2114;
        id v342 = v273;
        _os_log_impl(&dword_1830D4000, v210, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Already servicing writes, ignoring...", buf, 0x48u);
      }
LABEL_304:
    }
  }
  else if ((nw_endpoint_handler_get_logging_disabled(v296) & 1) == 0)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
    }
    v210 = (id)gconnectionLogObj;
    if (os_log_type_enabled(v210, OS_LOG_TYPE_ERROR))
    {
      id v211 = nw_endpoint_handler_get_id_string(v296);
      v212 = nw_endpoint_handler_dry_run_string(v296);
      nw_endpoint_t v213 = nw_endpoint_handler_copy_endpoint(v296);
      v214 = nw_endpoint_get_logging_description(v213);
      v215 = nw_endpoint_handler_state_string(v296);
      v216 = nw_endpoint_handler_mode_string(v296);
      id v217 = nw_endpoint_handler_copy_current_path(v296);
      *(_DWORD *)buf = 136447746;
      *(void *)&uint8_t buf[4] = "nw_flow_service_writes";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = v211;
      *(_WORD *)&buf[22] = 2082;
      v339 = v212;
      *(_WORD *)v340 = 2082;
      *(void *)&v340[2] = v214;
      *(_WORD *)&v340[10] = 2082;
      *(void *)&v340[12] = v215;
      *(_WORD *)&v340[20] = 2082;
      *(void *)&v340[22] = v216;
      __int16 v341 = 2114;
      id v342 = v217;
      _os_log_impl(&dword_1830D4000, v210, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] No output handler", buf, 0x48u);
    }
    goto LABEL_304;
  }
LABEL_306:
  uint64_t v218 = 0;
LABEL_339:

  return v218;
}

void sub_18320C6EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35)
{
  _Unwind_Resume(a1);
}

unsigned char *nw_write_request_list_prune(void *a1)
{
  id v1 = a1;
  nw_protocol_stack_t v2 = v1;
  if (v1)
  {
    Class v3 = v1;
    do
    {
      if ((v3[128] & 2) == 0)
      {
        if (*((void *)v3 + 9))
        {
          if ((v3[128] & 0x10) == 0) {
            break;
          }
        }
        else if (*((void *)v3 + 7))
        {
          break;
        }
        if (v3 != v2 && (v3[128] & 8) != 0) {
          break;
        }
        nw_write_request_report(v3, 0, 0);
        if ((v3[128] & 2) == 0) {
          break;
        }
      }
      BOOL v4 = nw_write_request_list_remove_head(v3);

      Class v3 = (unsigned char *)v4;
    }
    while (v4);
  }
  else
  {
    Class v3 = 0;
  }

  return v3;
}

void sub_18320CA9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_frame_collapse(uint64_t a1)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    id v30 = "__nw_frame_collapse";
    __int16 v21 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v27 = 0;
    if (!__nwlog_fault(v21, &type, &v27)) {
      goto LABEL_43;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v22 = __nwlog_obj();
      os_log_type_t v23 = type;
      if (!os_log_type_enabled(v22, type)) {
        goto LABEL_43;
      }
      *(_DWORD *)buf = 136446210;
      id v30 = "__nw_frame_collapse";
      size_t v24 = "%{public}s called with null frame";
    }
    else if (v27)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v22 = __nwlog_obj();
      os_log_type_t v23 = type;
      BOOL v26 = os_log_type_enabled(v22, type);
      if (backtrace_string)
      {
        if (v26)
        {
          *(_DWORD *)buf = 136446466;
          id v30 = "__nw_frame_collapse";
          __int16 v31 = 2082;
          uint64_t v32 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v22, v23, "%{public}s called with null frame, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_43;
      }
      if (!v26)
      {
LABEL_43:
        if (v21) {
          free(v21);
        }
        return;
      }
      *(_DWORD *)buf = 136446210;
      id v30 = "__nw_frame_collapse";
      size_t v24 = "%{public}s called with null frame, no backtrace";
    }
    else
    {
      id v22 = __nwlog_obj();
      os_log_type_t v23 = type;
      if (!os_log_type_enabled(v22, type)) {
        goto LABEL_43;
      }
      *(_DWORD *)buf = 136446210;
      id v30 = "__nw_frame_collapse";
      size_t v24 = "%{public}s called with null frame, backtrace limit exceeded";
    }
    _os_log_impl(&dword_1830D4000, v22, v23, v24, buf, 0xCu);
    goto LABEL_43;
  }
  int v2 = *(_DWORD *)(a1 + 52);
  if (v2)
  {
    uint64_t v4 = *(unsigned int *)(a1 + 56);
    size_t v3 = *(unsigned int *)(a1 + 60);
    uint64_t v5 = (v2 - (v3 + v4));
    if (v2 != v3 + v4)
    {
      if (v3)
      {
        uint64_t v6 = *(void *)(a1 + 112);
        if (v6)
        {
          memmove((void *)(v6 + v4), (const void *)(v6 + v4 + v5), v3);
          int v2 = *(_DWORD *)(a1 + 52);
        }
      }
      *(_DWORD *)(a1 + 52) = v2 - v5;
      if ((*(_WORD *)(a1 + 204) & 0x80) != 0)
      {
        unsigned int v7 = *(unsigned __int16 *)(a1 + 196);
        BOOL v8 = v7 >= v5;
        unsigned int v9 = v7 - v5;
        *(_WORD *)(a1 + 196) = v9;
        if (!v8 || v9 >= 0x10000)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v10 = *(unsigned __int16 *)(a1 + 196);
          *(_DWORD *)buf = 136446978;
          id v30 = "__nw_frame_collapse";
          __int16 v31 = 2082;
          uint64_t v32 = "frame->aggregate_buffer_length";
          __int16 v33 = 2048;
          uint64_t v34 = v5;
          __int16 v35 = 2048;
          uint64_t v36 = v10;
          BOOL v11 = (char *)_os_log_send_and_compose_impl();
          os_log_type_t type = OS_LOG_TYPE_ERROR;
          char v27 = 0;
          if (__nwlog_fault(v11, &type, &v27))
          {
            if (type == OS_LOG_TYPE_FAULT)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              char v12 = gLogObj;
              os_log_type_t v13 = type;
              if (os_log_type_enabled((os_log_t)gLogObj, type))
              {
                uint64_t v14 = *(unsigned __int16 *)(a1 + 196);
                *(_DWORD *)buf = 136446978;
                id v30 = "__nw_frame_collapse";
                __int16 v31 = 2082;
                uint64_t v32 = "frame->aggregate_buffer_length";
                __int16 v33 = 2048;
                uint64_t v34 = v5;
                __int16 v35 = 2048;
                uint64_t v36 = v14;
                int v15 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu";
LABEL_24:
                _os_log_impl(&dword_1830D4000, v12, v13, v15, buf, 0x2Au);
              }
            }
            else if (v27)
            {
              os_log_type_t v16 = (char *)__nw_create_backtrace_string();
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              char v12 = gLogObj;
              os_log_type_t v13 = type;
              BOOL v17 = os_log_type_enabled((os_log_t)gLogObj, type);
              if (v16)
              {
                if (v17)
                {
                  uint64_t v18 = *(unsigned __int16 *)(a1 + 196);
                  *(_DWORD *)buf = 136447234;
                  id v30 = "__nw_frame_collapse";
                  __int16 v31 = 2082;
                  uint64_t v32 = "frame->aggregate_buffer_length";
                  __int16 v33 = 2048;
                  uint64_t v34 = v5;
                  __int16 v35 = 2048;
                  uint64_t v36 = v18;
                  __int16 v37 = 2082;
                  uint64_t v38 = v16;
                  _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s Underflow: %{public}s, decrement %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
                }
                free(v16);
                goto LABEL_25;
              }
              if (v17)
              {
                uint64_t v20 = *(unsigned __int16 *)(a1 + 196);
                *(_DWORD *)buf = 136446978;
                id v30 = "__nw_frame_collapse";
                __int16 v31 = 2082;
                uint64_t v32 = "frame->aggregate_buffer_length";
                __int16 v33 = 2048;
                uint64_t v34 = v5;
                __int16 v35 = 2048;
                uint64_t v36 = v20;
                int v15 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, no backtrace";
                goto LABEL_24;
              }
            }
            else
            {
              char v12 = __nwlog_obj();
              os_log_type_t v13 = type;
              if (os_log_type_enabled(v12, type))
              {
                uint64_t v19 = *(unsigned __int16 *)(a1 + 196);
                *(_DWORD *)buf = 136446978;
                id v30 = "__nw_frame_collapse";
                __int16 v31 = 2082;
                uint64_t v32 = "frame->aggregate_buffer_length";
                __int16 v33 = 2048;
                uint64_t v34 = v5;
                __int16 v35 = 2048;
                uint64_t v36 = v19;
                int v15 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, backtrace limit exceeded";
                goto LABEL_24;
              }
            }
          }
LABEL_25:
          if (v11) {
            free(v11);
          }
          *(_WORD *)(a1 + 196) = 0;
        }
      }
    }
  }
}

BOOL nw_frame_set_external_data(uint64_t a1, dispatch_data_t data, unsigned int *a3)
{
  *(void *)&v30[13] = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if ((*(_WORD *)(a1 + 204) & 2) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v4 = gLogObj;
      BOOL result = os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
      if (result)
      {
        *(_DWORD *)buf = 136446210;
        id v28 = "__nw_frame_set_external_data";
        _os_log_impl(&dword_1830D4000, v4, OS_LOG_TYPE_ERROR, "%{public}s Frame does not use external data", buf, 0xCu);
        return 0;
      }
      return result;
    }
    BOOL v8 = *(void **)(a1 + 96);
    if (v8)
    {
      os_release(v8);
      *(void *)(a1 + 96) = 0;
    }
    *(_DWORD *)(a1 + 56) = 0;
    if (!data
      || ((unsigned int v9 = *(_DWORD *)(a1 + 48) - *(_DWORD *)(a1 + 60), size = dispatch_data_get_size(data), v9 >= size)
        ? (unsigned int v11 = size)
        : (unsigned int v11 = v9),
          !v11))
    {
      *(_DWORD *)(a1 + 52) = 0;
      *(_WORD *)(a1 + 196) = 0;
      return 1;
    }
    dispatch_retain(data);
    *(void *)(a1 + 96) = data;
    *(_DWORD *)(a1 + 52) = *(_DWORD *)(a1 + 60) + v11;
    if ((*(_WORD *)(a1 + 204) & 0x80) == 0)
    {
LABEL_34:
      if (a3) {
        *a3 = v11;
      }
      return 1;
    }
    if (!HIWORD(v11))
    {
      __int16 v12 = v11;
LABEL_33:
      *(_WORD *)(a1 + 196) = v12;
      goto LABEL_34;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446466;
    id v28 = "__nw_frame_set_external_data";
    __int16 v29 = 1024;
    *(_DWORD *)id v30 = v11;
    os_log_type_t v13 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (__nwlog_fault(v13, &type, &v25))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v14 = gLogObj;
        os_log_type_t v15 = type;
        if (os_log_type_enabled((os_log_t)gLogObj, type))
        {
          *(_DWORD *)buf = 136446466;
          id v28 = "__nw_frame_set_external_data";
          __int16 v29 = 1024;
          *(_DWORD *)id v30 = v11;
          os_log_type_t v16 = "%{public}s Frame-length is too big for aggregate_buffer_length: %u";
LABEL_29:
          _os_log_impl(&dword_1830D4000, v14, v15, v16, buf, 0x12u);
        }
      }
      else if (v25)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        uint64_t v14 = __nwlog_obj();
        os_log_type_t v15 = type;
        BOOL v18 = os_log_type_enabled(v14, type);
        if (backtrace_string)
        {
          if (v18)
          {
            *(_DWORD *)buf = 136446722;
            id v28 = "__nw_frame_set_external_data";
            __int16 v29 = 1024;
            *(_DWORD *)id v30 = v11;
            v30[2] = 2082;
            *(void *)&v30[3] = backtrace_string;
            _os_log_impl(&dword_1830D4000, v14, v15, "%{public}s Frame-length is too big for aggregate_buffer_length: %u, dumping backtrace:%{public}s", buf, 0x1Cu);
          }
          free(backtrace_string);
          goto LABEL_30;
        }
        if (v18)
        {
          *(_DWORD *)buf = 136446466;
          id v28 = "__nw_frame_set_external_data";
          __int16 v29 = 1024;
          *(_DWORD *)id v30 = v11;
          os_log_type_t v16 = "%{public}s Frame-length is too big for aggregate_buffer_length: %u, no backtrace";
          goto LABEL_29;
        }
      }
      else
      {
        uint64_t v14 = __nwlog_obj();
        os_log_type_t v15 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)buf = 136446466;
          id v28 = "__nw_frame_set_external_data";
          __int16 v29 = 1024;
          *(_DWORD *)id v30 = v11;
          os_log_type_t v16 = "%{public}s Frame-length is too big for aggregate_buffer_length: %u, backtrace limit exceeded";
          goto LABEL_29;
        }
      }
    }
LABEL_30:
    if (v13) {
      free(v13);
    }
    __int16 v12 = -1;
    goto LABEL_33;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  id v28 = "__nw_frame_set_external_data";
  uint64_t v19 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v25 = 0;
  if (__nwlog_fault(v19, &type, &v25))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v20 = __nwlog_obj();
      os_log_type_t v21 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        id v28 = "__nw_frame_set_external_data";
        id v22 = "%{public}s called with null frame";
LABEL_51:
        _os_log_impl(&dword_1830D4000, v20, v21, v22, buf, 0xCu);
      }
    }
    else if (v25)
    {
      os_log_type_t v23 = (char *)__nw_create_backtrace_string();
      uint64_t v20 = __nwlog_obj();
      os_log_type_t v21 = type;
      BOOL v24 = os_log_type_enabled(v20, type);
      if (v23)
      {
        if (v24)
        {
          *(_DWORD *)buf = 136446466;
          id v28 = "__nw_frame_set_external_data";
          __int16 v29 = 2082;
          *(void *)id v30 = v23;
          _os_log_impl(&dword_1830D4000, v20, v21, "%{public}s called with null frame, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v23);
        goto LABEL_52;
      }
      if (v24)
      {
        *(_DWORD *)buf = 136446210;
        id v28 = "__nw_frame_set_external_data";
        id v22 = "%{public}s called with null frame, no backtrace";
        goto LABEL_51;
      }
    }
    else
    {
      uint64_t v20 = __nwlog_obj();
      os_log_type_t v21 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        id v28 = "__nw_frame_set_external_data";
        id v22 = "%{public}s called with null frame, backtrace limit exceeded";
        goto LABEL_51;
      }
    }
  }
LABEL_52:
  if (v19) {
    free(v19);
  }
  return 0;
}

BOOL nw_write_request_list_remove_head(void *a1)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  int v2 = v1;
  if (!v1)
  {
    unsigned int v7 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v20 = "nw_write_request_list_remove_head";
    BOOL v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v17 = 0;
    if (__nwlog_fault(v8, &type, &v17))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        unsigned int v9 = __nwlog_obj();
        os_log_type_t v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v20 = "nw_write_request_list_remove_head";
          _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null head", buf, 0xCu);
        }
      }
      else if (v17)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        unsigned int v9 = __nwlog_obj();
        os_log_type_t v14 = type;
        BOOL v15 = os_log_type_enabled(v9, type);
        if (backtrace_string)
        {
          if (v15)
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v20 = "nw_write_request_list_remove_head";
            __int16 v21 = 2082;
            id v22 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null head, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_25;
        }
        if (v15)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v20 = "nw_write_request_list_remove_head";
          _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null head, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        unsigned int v9 = __nwlog_obj();
        os_log_type_t v16 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v20 = "nw_write_request_list_remove_head";
          _os_log_impl(&dword_1830D4000, v9, v16, "%{public}s called with null head, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_25:
    if (v8) {
      free(v8);
    }
    size_t v3 = 0;
    goto LABEL_6;
  }
  size_t v3 = *((id *)v1 + 1);
  uint64_t v4 = (void *)v2[1];
  v2[1] = 0;

  if (!v3)
  {
LABEL_5:
    v2[2] = 0;
LABEL_6:

    return (BOOL)v3;
  }
  uint64_t v5 = v2[2];
  if (v5)
  {
LABEL_4:
    v3[2] = v5;
    goto LABEL_5;
  }
  unsigned int v11 = __nwlog_obj();
  os_log_type_enabled(v11, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446210;
  uint64_t v20 = "nw_write_request_list_remove_head";
  __int16 v12 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v12);
  if (!result)
  {
    free(v12);
    uint64_t v5 = v2[2];
    goto LABEL_4;
  }
  __break(1u);
  return result;
}

uint64_t nw_flow_handle_send_complete(NWConcrete_nw_endpoint_handler *a1, NWConcrete_nw_endpoint_flow *a2, nw_flow_protocol *a3)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a1;
  uint64_t v6 = a2;
  output_handler = a3->protocol.output_handler;
  write_requests = a3->write_requests;
  if (write_requests
    && (v9 = write_requests, char v10 = *((unsigned char *)v9 + 128), v9, (v10 & 8) != 0)
    || (unsigned int v11 = a3->initial_write_requests) != 0
    && (__int16 v12 = v11, v13 = *((unsigned char *)v12 + 128), v12, (v13 & 8) != 0))
  {
    initial_write_requests = a3->initial_write_requests;
    if (initial_write_requests) {
      nw_write_request_consume_bytes(initial_write_requests, 0);
    }
    os_log_type_t v16 = a3->write_requests;
    if (v16) {
      nw_write_request_consume_bytes(v16, 0);
    }
    output_finished = (void (*)(nw_protocol *, nw_flow_protocol *))output_handler->callbacks->output_finished;
    if (output_finished)
    {
      output_finished(output_handler, a3);
    }
    else if ((nw_endpoint_handler_get_logging_disabled(v5) & 1) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      BOOL v18 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
      {
        id_string = nw_endpoint_handler_get_id_string(v5);
        __int16 v35 = nw_endpoint_handler_dry_run_string(v5);
        nw_endpoint_t v36 = nw_endpoint_handler_copy_endpoint(v5);
        uint64_t v20 = id_string;
        logging_description = nw_endpoint_get_logging_description(v36);
        id v22 = nw_endpoint_handler_state_string(v5);
        uint64_t v23 = nw_endpoint_handler_mode_string(v5);
        id v24 = nw_endpoint_handler_copy_current_path(v5);
        identifier = output_handler->identifier;
        *(_DWORD *)buf = 136448002;
        uint32_t v40 = "nw_flow_handle_send_complete";
        __int16 v41 = 2082;
        __int16 v42 = v20;
        __int16 v43 = 2082;
        BOOL v44 = v35;
        __int16 v45 = 2082;
        uint64_t v46 = logging_description;
        __int16 v47 = 2082;
        uint64_t v48 = v22;
        __int16 v49 = 2082;
        BOOL v50 = v23;
        __int16 v51 = 2114;
        id v52 = v24;
        __int16 v53 = 2082;
        int v54 = identifier;
        _os_log_impl(&dword_1830D4000, v18, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Protocol %{public}s does not support output_finished", buf, 0x52u);
      }
    }
    BOOL v26 = (OS_nw_write_request *)nw_write_request_list_prune(a3->initial_write_requests);
    char v27 = a3->initial_write_requests;
    a3->initial_write_requests = v26;

    id v28 = (OS_nw_write_request *)nw_write_request_list_prune(a3->write_requests);
    __int16 v29 = a3->write_requests;
    a3->write_requests = v28;

    if (&v6->shared_protocol == a3)
    {
      if (v6->client_queue)
      {
        id write_close_handler = v6->write_close_handler;
        if (write_close_handler)
        {
          uint64_t v32 = _Block_copy(write_close_handler);
          client_queue = v6->client_queue;
          block[0] = MEMORY[0x1E4F143A8];
          block[1] = 3221225472;
          block[2] = ___ZL28nw_flow_handle_send_completeP30NWConcrete_nw_endpoint_handlerP27NWConcrete_nw_endpoint_flowP16nw_flow_protocol_block_invoke;
          block[3] = &unk_1E524AFA8;
          id v38 = v32;
          id v34 = v32;
          dispatch_async(client_queue, block);
        }
      }
    }
    uint64_t v14 = 1;
  }
  else
  {
    uint64_t v14 = 0;
  }

  return v14;
}

void sub_18320DBD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  _Unwind_Resume(a1);
}

dispatch_data_t nw_write_request_copy_data(void *a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  int v2 = v1;
  if (!*((void *)v1 + 9))
  {
    size_t v4 = *((void *)v1 + 14);
    uint64_t v5 = *((void *)v1 + 7);
    if (v4)
    {
      size_t size = dispatch_data_get_size(*((dispatch_data_t *)v1 + 7));
      if (size < v4)
      {
        size_t v7 = size;
        nw_write_request_report(v2, 0, 0);
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v8 = (id)gLogObj;
        if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
        {
          uint64_t v9 = v2[14];
          int v12 = 136446722;
          char v13 = "nw_write_request_copy_data";
          __int16 v14 = 2048;
          size_t v15 = v7;
          __int16 v16 = 2048;
          uint64_t v17 = v9;
          _os_log_impl(&dword_1830D4000, v8, OS_LOG_TYPE_ERROR, "%{public}s Invalid consumed bytes (%zu < %zu)", (uint8_t *)&v12, 0x20u);
        }

        goto LABEL_2;
      }
      dispatch_data_t subrange = dispatch_data_create_subrange(v5, v4, size - v4);
    }
    else
    {
      dispatch_data_t subrange = v5;
    }
    dispatch_data_t v3 = subrange;
    goto LABEL_11;
  }
LABEL_2:
  dispatch_data_t v3 = 0;
LABEL_11:

  return v3;
}

void sub_18320DD68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_flow_passthrough_get_output_frames(nw_protocol *a1, nw_protocol *a2, unsigned int a3, unsigned int a4, unsigned int a5, nw_frame_array_s *a6)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    unsigned int v11 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    id v24 = "nw_flow_passthrough_get_output_frames";
    int v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (!__nwlog_fault(v12, &type, &v21)) {
      goto LABEL_40;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        id v24 = "nw_flow_passthrough_get_output_frames";
        size_t v15 = "%{public}s called with null protocol";
LABEL_38:
        _os_log_impl(&dword_1830D4000, v13, v14, v15, buf, 0xCu);
      }
    }
    else if (v21)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      char v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      BOOL v18 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446466;
          id v24 = "nw_flow_passthrough_get_output_frames";
          __int16 v25 = 2082;
          BOOL v26 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_40:
        if (!v12) {
          return 0;
        }
LABEL_41:
        free(v12);
        return 0;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        id v24 = "nw_flow_passthrough_get_output_frames";
        size_t v15 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_38;
      }
    }
    else
    {
      char v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        id v24 = "nw_flow_passthrough_get_output_frames";
        size_t v15 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_38;
      }
    }
LABEL_39:

    goto LABEL_40;
  }
  output_handler = a1->output_handler;
  if (!output_handler)
  {
    __int16 v16 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    id v24 = "nw_flow_passthrough_get_output_frames";
    int v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (!__nwlog_fault(v12, &type, &v21)) {
      goto LABEL_40;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        id v24 = "nw_flow_passthrough_get_output_frames";
        size_t v15 = "%{public}s called with null protocol->output_handler";
        goto LABEL_38;
      }
    }
    else
    {
      if (v21)
      {
        uint64_t v19 = (char *)__nw_create_backtrace_string();
        char v13 = __nwlog_obj();
        os_log_type_t v14 = type;
        BOOL v20 = os_log_type_enabled(v13, type);
        if (v19)
        {
          if (v20)
          {
            *(_DWORD *)buf = 136446466;
            id v24 = "nw_flow_passthrough_get_output_frames";
            __int16 v25 = 2082;
            BOOL v26 = v19;
            _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s called with null protocol->output_handler, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v19);
          if (!v12) {
            return 0;
          }
          goto LABEL_41;
        }
        if (!v20) {
          goto LABEL_39;
        }
        *(_DWORD *)buf = 136446210;
        id v24 = "nw_flow_passthrough_get_output_frames";
        size_t v15 = "%{public}s called with null protocol->output_handler, no backtrace";
        goto LABEL_38;
      }
      char v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        id v24 = "nw_flow_passthrough_get_output_frames";
        size_t v15 = "%{public}s called with null protocol->output_handler, backtrace limit exceeded";
        goto LABEL_38;
      }
    }
    goto LABEL_39;
  }
  callbacks = output_handler->callbacks;
  if (!callbacks || (get_output_frames = (uint64_t (*)(void))callbacks->get_output_frames) == 0)
  {
    char v10 = __nwlog_obj();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      id v24 = "nw_flow_passthrough_get_output_frames";
      _os_log_impl(&dword_1830D4000, v10, OS_LOG_TYPE_INFO, "%{public}s Output protocol handler does not support get_output_frames", buf, 0xCu);
    }

    return 0;
  }

  return get_output_frames();
}

uint64_t nw_flow_passthrough_finalize_output_frames(nw_protocol *a1, nw_frame_array_s *a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    size_t v7 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v20 = "nw_flow_passthrough_finalize_output_frames";
    BOOL v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v17 = 0;
    if (!__nwlog_fault(v8, &type, &v17)) {
      goto LABEL_40;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v20 = "nw_flow_passthrough_finalize_output_frames";
        unsigned int v11 = "%{public}s called with null protocol";
LABEL_38:
        _os_log_impl(&dword_1830D4000, v9, v10, v11, buf, 0xCu);
      }
    }
    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v14 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v20 = "nw_flow_passthrough_finalize_output_frames";
          __int16 v21 = 2082;
          id v22 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_40:
        if (!v8) {
          return 0;
        }
LABEL_41:
        free(v8);
        return 0;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v20 = "nw_flow_passthrough_finalize_output_frames";
        unsigned int v11 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_38;
      }
    }
    else
    {
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v20 = "nw_flow_passthrough_finalize_output_frames";
        unsigned int v11 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_38;
      }
    }
LABEL_39:

    goto LABEL_40;
  }
  output_handler = a1->output_handler;
  if (!output_handler)
  {
    int v12 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v20 = "nw_flow_passthrough_finalize_output_frames";
    BOOL v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v17 = 0;
    if (!__nwlog_fault(v8, &type, &v17)) {
      goto LABEL_40;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v20 = "nw_flow_passthrough_finalize_output_frames";
        unsigned int v11 = "%{public}s called with null protocol->output_handler";
        goto LABEL_38;
      }
    }
    else
    {
      if (v17)
      {
        size_t v15 = (char *)__nw_create_backtrace_string();
        uint64_t v9 = __nwlog_obj();
        os_log_type_t v10 = type;
        BOOL v16 = os_log_type_enabled(v9, type);
        if (v15)
        {
          if (v16)
          {
            *(_DWORD *)buf = 136446466;
            BOOL v20 = "nw_flow_passthrough_finalize_output_frames";
            __int16 v21 = 2082;
            id v22 = v15;
            _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null protocol->output_handler, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v15);
          if (!v8) {
            return 0;
          }
          goto LABEL_41;
        }
        if (!v16) {
          goto LABEL_39;
        }
        *(_DWORD *)buf = 136446210;
        BOOL v20 = "nw_flow_passthrough_finalize_output_frames";
        unsigned int v11 = "%{public}s called with null protocol->output_handler, no backtrace";
        goto LABEL_38;
      }
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v20 = "nw_flow_passthrough_finalize_output_frames";
        unsigned int v11 = "%{public}s called with null protocol->output_handler, backtrace limit exceeded";
        goto LABEL_38;
      }
    }
    goto LABEL_39;
  }
  callbacks = output_handler->callbacks;
  if (!callbacks || (finalize_output_frames = (uint64_t (*)(void))callbacks->finalize_output_frames) == 0)
  {
    uint64_t v6 = __nwlog_obj();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      BOOL v20 = "nw_flow_passthrough_finalize_output_frames";
      _os_log_impl(&dword_1830D4000, v6, OS_LOG_TYPE_INFO, "%{public}s Output protocol handler does not support finalize_output_frames", buf, 0xCu);
    }

    return 0;
  }

  return finalize_output_frames();
}

BOOL nw_content_context_has_metadata(void *a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  int v2 = v1;
  if (v1)
  {
    BOOL v3 = 0;
    if (v1 != (os_unfair_lock_s *)&__block_literal_global_10_42276
      && v1 != (os_unfair_lock_s *)&__block_literal_global_8_42267
      && v1 != (os_unfair_lock_s *)&__block_literal_global_6_42258
      && v1 != (os_unfair_lock_s *)&__block_literal_global_42249)
    {
      os_unfair_lock_lock(v1 + 28);
      uint64_t v4 = *(void *)&v2[22]._os_unfair_lock_opaque;
      if (v4) {
        BOOL v3 = *(void *)(v4 + 24) != *(void *)(v4 + 16);
      }
      else {
        BOOL v3 = 0;
      }
      os_unfair_lock_unlock(v2 + 28);
    }
    goto LABEL_10;
  }
  uint64_t v6 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v17 = "nw_content_context_has_metadata";
  size_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        char v17 = "nw_content_context_has_metadata";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null context", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v8 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          char v17 = "nw_content_context_has_metadata";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null context, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_27;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        char v17 = "nw_content_context_has_metadata";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null context, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        char v17 = "nw_content_context_has_metadata";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null context, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_27:
  if (v7) {
    free(v7);
  }
  BOOL v3 = 0;
LABEL_10:

  return v3;
}

void nw_protocol_default_output_finished(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v19 = "nw_protocol_default_output_finished";
    BOOL v8 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v16 = 0;
    if (!__nwlog_fault(v8, &type, &v16)) {
      goto LABEL_40;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (!os_log_type_enabled(v9, type)) {
        goto LABEL_40;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v19 = "nw_protocol_default_output_finished";
      os_log_type_t v11 = "%{public}s called with null protocol";
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v19 = "nw_protocol_default_output_finished";
          __int16 v20 = 2082;
          __int16 v21 = (nw_protocol_identifier *)backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_40:
        if (!v8) {
          return;
        }
        goto LABEL_41;
      }
      if (!v13) {
        goto LABEL_40;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v19 = "nw_protocol_default_output_finished";
      os_log_type_t v11 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (!os_log_type_enabled(v9, type)) {
        goto LABEL_40;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v19 = "nw_protocol_default_output_finished";
      os_log_type_t v11 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
LABEL_39:
    _os_log_impl(&dword_1830D4000, v9, v10, v11, buf, 0xCu);
    goto LABEL_40;
  }
  output_handler = a1->output_handler;
  if (output_handler)
  {
    callbacks = output_handler->callbacks;
    if (callbacks && (output_finished = (void (*)(void))callbacks->output_finished) != 0)
    {
      output_finished();
    }
    else
    {
      uint64_t v6 = __nwlog_obj();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      {
        identifier = (nw_protocol_identifier *)"<null>";
        if (a1->identifier) {
          identifier = a1->identifier;
        }
        *(_DWORD *)buf = 136446466;
        uint64_t v19 = "nw_protocol_default_output_finished";
        __int16 v20 = 2082;
        __int16 v21 = identifier;
        _os_log_impl(&dword_1830D4000, v6, OS_LOG_TYPE_DEBUG, "%{public}s Protocol %{public}s does not support output finished", buf, 0x16u);
      }
    }
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v19 = "nw_protocol_default_output_finished";
  BOOL v8 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (!__nwlog_fault(v8, &type, &v16)) {
    goto LABEL_40;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    os_log_type_t v9 = __nwlog_obj();
    os_log_type_t v10 = type;
    if (!os_log_type_enabled(v9, type)) {
      goto LABEL_40;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v19 = "nw_protocol_default_output_finished";
    os_log_type_t v11 = "%{public}s called with null protocol->output_handler";
    goto LABEL_39;
  }
  if (!v16)
  {
    os_log_type_t v9 = __nwlog_obj();
    os_log_type_t v10 = type;
    if (!os_log_type_enabled(v9, type)) {
      goto LABEL_40;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v19 = "nw_protocol_default_output_finished";
    os_log_type_t v11 = "%{public}s called with null protocol->output_handler, backtrace limit exceeded";
    goto LABEL_39;
  }
  char v14 = (char *)__nw_create_backtrace_string();
  os_log_type_t v9 = __nwlog_obj();
  os_log_type_t v10 = type;
  BOOL v15 = os_log_type_enabled(v9, type);
  if (!v14)
  {
    if (!v15) {
      goto LABEL_40;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v19 = "nw_protocol_default_output_finished";
    os_log_type_t v11 = "%{public}s called with null protocol->output_handler, no backtrace";
    goto LABEL_39;
  }
  if (v15)
  {
    *(_DWORD *)buf = 136446466;
    uint64_t v19 = "nw_protocol_default_output_finished";
    __int16 v20 = 2082;
    __int16 v21 = (nw_protocol_identifier *)v14;
    _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null protocol->output_handler, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v14);
  if (v8) {
LABEL_41:
  }
    free(v8);
}

void nw_socket_output_finished(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v27 = "nw_socket_output_finished";
    BOOL v15 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (!__nwlog_fault(v15, &type, &v24)) {
      goto LABEL_67;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v16 = __nwlog_obj();
      os_log_type_t v17 = type;
      if (!os_log_type_enabled(v16, type)) {
        goto LABEL_67;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v27 = "nw_socket_output_finished";
      __int16 v18 = "%{public}s called with null protocol";
      goto LABEL_66;
    }
    if (!v24)
    {
      char v16 = __nwlog_obj();
      os_log_type_t v17 = type;
      if (!os_log_type_enabled(v16, type)) {
        goto LABEL_67;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v27 = "nw_socket_output_finished";
      __int16 v18 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_66;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    char v16 = __nwlog_obj();
    os_log_type_t v17 = type;
    BOOL v20 = os_log_type_enabled(v16, type);
    if (!backtrace_string)
    {
      if (!v20) {
        goto LABEL_67;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v27 = "nw_socket_output_finished";
      __int16 v18 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_66;
    }
    if (v20)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v27 = "nw_socket_output_finished";
      __int16 v28 = 2082;
      __int16 v29 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v16, v17, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(backtrace_string);
LABEL_67:
    if (!v15) {
      return;
    }
    goto LABEL_68;
  }
  if (a1->handle != &nw_protocol_ref_counted_handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v27 = "nw_socket_output_finished";
    BOOL v15 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (!__nwlog_fault(v15, &type, &v24)) {
      goto LABEL_67;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v16 = __nwlog_obj();
      os_log_type_t v17 = type;
      if (!os_log_type_enabled(v16, type)) {
        goto LABEL_67;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v27 = "nw_socket_output_finished";
      __int16 v18 = "%{public}s called with null socket_handler";
      goto LABEL_66;
    }
    if (!v24)
    {
      char v16 = __nwlog_obj();
      os_log_type_t v17 = type;
      if (!os_log_type_enabled(v16, type)) {
        goto LABEL_67;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v27 = "nw_socket_output_finished";
      __int16 v18 = "%{public}s called with null socket_handler, backtrace limit exceeded";
      goto LABEL_66;
    }
    __int16 v21 = (char *)__nw_create_backtrace_string();
    char v16 = __nwlog_obj();
    os_log_type_t v17 = type;
    BOOL v22 = os_log_type_enabled(v16, type);
    if (v21)
    {
      if (v22)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v27 = "nw_socket_output_finished";
        __int16 v28 = 2082;
        __int16 v29 = v21;
        _os_log_impl(&dword_1830D4000, v16, v17, "%{public}s called with null socket_handler, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v21);
      if (!v15) {
        return;
      }
LABEL_68:
      free(v15);
      return;
    }
    if (v22)
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v27 = "nw_socket_output_finished";
      __int16 v18 = "%{public}s called with null socket_handler, no backtrace";
LABEL_66:
      _os_log_impl(&dword_1830D4000, v16, v17, v18, buf, 0xCu);
      goto LABEL_67;
    }
    goto LABEL_67;
  }
  int v3 = *(_DWORD *)&a1[4].flow_id[12];
  if (v3 < 0)
  {
    if ((*(_WORD *)&a1[6].flow_id[13] & 0x80) != 0) {
      return;
    }
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
    }
    uint64_t v4 = gconnectionLogObj;
    if (!os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR)) {
      return;
    }
    *(_DWORD *)buf = 136446466;
    uint64_t v27 = "nw_socket_output_finished";
    __int16 v28 = 2082;
    __int16 v29 = (char *)&a1[6].identifier + 4;
    uint64_t v5 = "%{public}s %{public}s Socket protocol does not have valid fd";
    uint64_t v6 = v4;
    os_log_type_t v7 = OS_LOG_TYPE_ERROR;
LABEL_14:
    uint32_t v8 = 22;
LABEL_15:
    _os_log_impl(&dword_1830D4000, v6, v7, v5, buf, v8);
    return;
  }
  if (a1[4].output_handler_context || *(void *)&a1[5].flow_id[8])
  {
    if ((*(_WORD *)&a1[6].flow_id[13] & 0x80) == 0 && gLogDatapath)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      uint64_t v23 = gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v27 = "nw_socket_output_finished";
        __int16 v28 = 2082;
        __int16 v29 = (char *)&a1[6].identifier + 4;
        _os_log_impl(&dword_1830D4000, v23, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s Waiting for writes to finish, deferring output_finished", buf, 0x16u);
      }
    }
    *(_WORD *)&a1[6].flow_id[13] |= 8u;
    return;
  }
  __int16 v9 = *(_WORD *)&a1[6].flow_id[13];
  int v10 = v9 & 0xFFF7 | (a1[6].flow_id[15] << 16);
  *(_WORD *)&a1[6].flow_id[13] = v9 & 0xFFF7;
  a1[6].flow_id[15] = BYTE2(v10);
  if (LODWORD(a1[4].identifier) != 2)
  {
    if ((v9 & 0x80) != 0) {
      return;
    }
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
    }
    uint64_t v14 = gconnectionLogObj;
    if (!os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG)) {
      return;
    }
    *(_DWORD *)buf = 136446466;
    uint64_t v27 = "nw_socket_output_finished";
    __int16 v28 = 2082;
    __int16 v29 = (char *)&a1[6].identifier + 4;
    uint64_t v5 = "%{public}s %{public}s Ignoring output finished for non-stream socket";
    goto LABEL_28;
  }
  if (!shutdown(v3, 1))
  {
    if ((*(_WORD *)&a1[6].flow_id[13] & 0x80) != 0 || !gLogDatapath) {
      return;
    }
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
    }
    uint64_t v14 = gconnectionLogObj;
    if (!os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG)) {
      return;
    }
    *(_DWORD *)buf = 136446466;
    uint64_t v27 = "nw_socket_output_finished";
    __int16 v28 = 2082;
    __int16 v29 = (char *)&a1[6].identifier + 4;
    uint64_t v5 = "%{public}s %{public}s Closed writes based on output finished";
LABEL_28:
    uint64_t v6 = v14;
    os_log_type_t v7 = OS_LOG_TYPE_DEBUG;
    goto LABEL_14;
  }
  int v11 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
  if (__nwlog_connection_log::onceToken != -1) {
    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
  }
  uint64_t v12 = gconnectionLogObj;
  if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
  {
    int v13 = *(_DWORD *)&a1[4].flow_id[12];
    *(_DWORD *)buf = 136446978;
    uint64_t v27 = "nw_socket_output_finished";
    __int16 v28 = 2080;
    __int16 v29 = (char *)&a1[6].identifier + 4;
    __int16 v30 = 1024;
    int v31 = v13;
    __int16 v32 = 1024;
    int v33 = v11;
    uint64_t v5 = "%{public}s %s shutdown(%d, SHUT_WR) %{darwin.errno}d";
    uint64_t v6 = v12;
    os_log_type_t v7 = OS_LOG_TYPE_ERROR;
    uint32_t v8 = 34;
    goto LABEL_15;
  }
}

uint64_t ___ZL29nw_flow_prepare_output_framesP27NWConcrete_nw_endpoint_flowP11nw_protocolP16nw_frame_array_sjP30nw_protocol_message_properties_block_invoke(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v5 = *(_DWORD *)(a1 + 56) - *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  if (v5)
  {
    unint64_t v7 = *(void *)(a1 + 40);
    if (a5 + a3 > v7)
    {
      unint64_t v8 = v7 - a3;
      if (v7 < a3) {
        unint64_t v8 = 0;
      }
      if (v5 >= (int)a5 - (int)v8) {
        size_t v9 = (a5 - v8);
      }
      else {
        size_t v9 = v5;
      }
      memcpy((void *)(*(void *)(a1 + 48) + a3 - v7 + v8), (const void *)(a4 + v8), v9);
      *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) += v9;
    }
  }
  return 1;
}

uint64_t nw_protocol_implementation_get_output_frames(nw_protocol *a1, nw_protocol *a2, unsigned int a3, unsigned int a4, uint64_t a5, nw_frame_array_s *a6)
{
  uint64_t v164 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    handle = a1->handle;
    p_output_handler = &a1[1].output_handler;
    if (handle != &nw_protocol_ref_counted_handle) {
      p_output_handler = 0;
    }
    int v13 = p_output_handler;
    nw_endpoint_t v143 = v13;
    if (handle == &nw_protocol_ref_counted_handle)
    {
      uint64_t v14 = v13;
      uint64_t v15 = *((void *)v13 + 1);
      if (v15)
      {
        if (*(void *)(v15 + 80))
        {
          if (a2)
          {
            if (a6)
            {
              unsigned int v16 = v13[402];
              unsigned int v17 = *((_DWORD *)v13 + 24);
              if (*(_DWORD *)(v15 + 64) == 3)
              {
                uint64_t v18 = a5;
                output_handler_context = a2->output_handler_context;
                if (!output_handler_context)
                {
                  if (v13[405] < 0)
                  {
LABEL_136:
                    uint64_t v30 = 0;
                    goto LABEL_137;
                  }
                  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                  networkd_settings_init();
                  int v31 = (id)gLogObj;
                  if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)buf = 136446978;
                    v151 = "nw_protocol_implementation_get_output_frames";
                    __int16 v152 = 2082;
                    char v153 = (nw_protocol_identifier *)(v14 + 407);
                    __int16 v154 = 2080;
                    v155 = (nw_protocol *)" ";
                    __int16 v156 = 2048;
                    *(void *)char v157 = a2;
                    _os_log_impl(&dword_1830D4000, v31, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sOutput handler context doesn't exist on protocol %p", buf, 0x2Au);
                  }

                  uint64_t v30 = 0;
LABEL_97:
                  uint64_t v14 = v143;
LABEL_137:

                  return v30;
                }
                unsigned int v20 = *((unsigned __int16 *)output_handler_context + 42);
                if ((v20 & 0x200) != 0)
                {
                  if ((v13[405] & 0x80000000) == 0)
                  {
                    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                    networkd_settings_init();
                    __int16 v32 = (id)gLogObj;
                    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
                    {
                      *(_DWORD *)buf = 136446722;
                      v151 = "nw_protocol_implementation_get_output_frames";
                      __int16 v152 = 2082;
                      char v153 = (nw_protocol_identifier *)(v14 + 407);
                      __int16 v154 = 2080;
                      v155 = (nw_protocol *)" ";
                      _os_log_impl(&dword_1830D4000, v32, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sIgnoring request for output frames from closed flow", buf, 0x20u);
                    }

                    uint64_t v14 = v143;
                  }
                  if (a2->handle == &nw_protocol_ref_counted_handle)
                  {
                    callbacks = a2[1].callbacks;
                    if (callbacks) {
                      a2[1].callbacks = (nw_protocol_callbacks *)((char *)&callbacks->add_input_handler + 1);
                    }
                    char v33 = -1;
                  }
                  else
                  {
                    char v33 = 0;
                  }
                  *(void *)os_log_type_t type = a2;
                  char v149 = v33;
                  if (*((_UNKNOWN **)v14 - 7) == &nw_protocol_ref_counted_handle)
                  {
                    uint64_t v36 = *((void *)v14 - 1);
                    if (v36) {
                      *((void *)v14 - 1) = v36 + 1;
                    }
                    char v35 = -1;
                  }
                  else
                  {
                    char v35 = 0;
                  }
                  int v146 = v14 - 96;
                  char v147 = v35;
                  __int16 v37 = a2->callbacks;
                  if (v37)
                  {
                    error = (void (*)(nw_protocol *, char *, uint64_t))v37->error;
                    if (error)
                    {
                      error(a2, v14 - 96, 57);
LABEL_131:
                      char v35 = v147;
LABEL_132:
                      if (v35) {
                        nw::release_if_needed<nw_protocol *>((uint64_t *)&v146);
                      }
                      if (v149) {
                        nw::release_if_needed<nw_protocol *>((uint64_t *)type);
                      }
                      goto LABEL_136;
                    }
                  }
                  v104 = __nwlog_obj();
                  identifier = a2->identifier;
                  *(_DWORD *)buf = 136446722;
                  v151 = "__nw_protocol_error";
                  if (!identifier) {
                    identifier = (nw_protocol_identifier *)"invalid";
                  }
                  __int16 v152 = 2082;
                  char v153 = identifier;
                  __int16 v154 = 2048;
                  v155 = a2;
                  os_log_type_t v106 = (char *)_os_log_send_and_compose_impl();

                  os_log_type_t v145 = OS_LOG_TYPE_ERROR;
                  char v144 = 0;
                  if (__nwlog_fault(v106, &v145, &v144))
                  {
                    if (v145 == OS_LOG_TYPE_FAULT)
                    {
                      char v107 = __nwlog_obj();
                      os_log_type_t v108 = v145;
                      if (os_log_type_enabled(v107, v145))
                      {
                        int v109 = a2->identifier;
                        if (!v109) {
                          int v109 = (nw_protocol_identifier *)"invalid";
                        }
                        *(_DWORD *)buf = 136446722;
                        v151 = "__nw_protocol_error";
                        __int16 v152 = 2082;
                        char v153 = v109;
                        __int16 v154 = 2048;
                        v155 = a2;
                        _os_log_impl(&dword_1830D4000, v107, v108, "%{public}s protocol %{public}s (%p) has invalid error callback", buf, 0x20u);
                      }
                      goto LABEL_307;
                    }
                    if (!v144)
                    {
                      char v107 = __nwlog_obj();
                      os_log_type_t v131 = v145;
                      if (os_log_type_enabled(v107, v145))
                      {
                        char v132 = a2->identifier;
                        if (!v132) {
                          char v132 = (nw_protocol_identifier *)"invalid";
                        }
                        *(_DWORD *)buf = 136446722;
                        v151 = "__nw_protocol_error";
                        __int16 v152 = 2082;
                        char v153 = v132;
                        __int16 v154 = 2048;
                        v155 = a2;
                        _os_log_impl(&dword_1830D4000, v107, v131, "%{public}s protocol %{public}s (%p) has invalid error callback, backtrace limit exceeded", buf, 0x20u);
                      }
                      goto LABEL_307;
                    }
                    backtrace_string = (char *)__nw_create_backtrace_string();
                    char v107 = __nwlog_obj();
                    os_log_type_t v122 = v145;
                    BOOL v123 = os_log_type_enabled(v107, v145);
                    if (!backtrace_string)
                    {
                      if (v123)
                      {
                        v137 = a2->identifier;
                        if (!v137) {
                          v137 = (nw_protocol_identifier *)"invalid";
                        }
                        *(_DWORD *)buf = 136446722;
                        v151 = "__nw_protocol_error";
                        __int16 v152 = 2082;
                        char v153 = v137;
                        __int16 v154 = 2048;
                        v155 = a2;
                        _os_log_impl(&dword_1830D4000, v107, v122, "%{public}s protocol %{public}s (%p) has invalid error callback, no backtrace", buf, 0x20u);
                      }
                      goto LABEL_307;
                    }
                    if (v123)
                    {
                      v124 = a2->identifier;
                      if (!v124) {
                        v124 = (nw_protocol_identifier *)"invalid";
                      }
                      *(_DWORD *)buf = 136446978;
                      v151 = "__nw_protocol_error";
                      __int16 v152 = 2082;
                      char v153 = v124;
                      __int16 v154 = 2048;
                      v155 = a2;
                      __int16 v156 = 2082;
                      *(void *)char v157 = backtrace_string;
                      _os_log_impl(&dword_1830D4000, v107, v122, "%{public}s protocol %{public}s (%p) has invalid error callback, dumping backtrace:%{public}s", buf, 0x2Au);
                    }
                    goto LABEL_263;
                  }
LABEL_308:
                  uint64_t v14 = v143;
                  if (v106) {
                    free(v106);
                  }
                  goto LABEL_132;
                }
                int v21 = v16 >> 7;
                if ((v20 & 2) == 0)
                {
                  LOBYTE(v16) = v16 | 0x10;
                  v13[402] = v16;
                  unsigned int v20 = *((unsigned __int16 *)output_handler_context + 42);
                }
                os_log_type_t v141 = a2;
                if ((v20 & 0x800) != 0)
                {
                  unsigned int v17 = output_handler_context[19];
                  int v21 = 1;
                  if (v18 == 1 && v17 < a3)
                  {
                    maximum_datagram_size_t size = nw_path_get_maximum_datagram_size(*((void **)v13 + 36));
                    int v23 = output_handler_context[20];
                    if (!v23)
                    {
                      maximum_message_size_t size = nw_protocol_instance_get_maximum_message_size(v14, 0);
                      int v23 = maximum_message_size - v17;
                      if (maximum_message_size <= v17) {
                        int v23 = output_handler_context[20];
                      }
                      else {
                        output_handler_context[20] = v23;
                      }
                    }
                    unsigned int v39 = v23 + v17;
                    unsigned int v40 = maximum_datagram_size - v23;
                    if (maximum_datagram_size > v39) {
                      unsigned int v17 = v40;
                    }
                    unsigned int v20 = *((unsigned __int16 *)output_handler_context + 42);
                    LOBYTE(v16) = v14[402];
                    int v21 = 1;
                  }
                }
                BOOL v26 = (char *)(output_handler_context + 8);
                int v142 = (v20 >> 10) & 1;
                BOOL v25 = v21 != 0;
                if ((v16 & 0x40) != 0)
                {
                  uint64_t v27 = output_handler_context + 18;
                  unsigned int v41 = output_handler_context[18];
                  if (v41 < a3)
                  {
                    if ((v14[405] & 0x80000000) == 0 && gLogDatapath)
                    {
                      v135 = __nwlog_obj();
                      if (os_log_type_enabled(v135, OS_LOG_TYPE_DEBUG))
                      {
                        int v136 = *v27;
                        *(_DWORD *)buf = 136447234;
                        v151 = "nw_protocol_implementation_get_output_frames";
                        __int16 v152 = 2082;
                        char v153 = (nw_protocol_identifier *)(v143 + 407);
                        __int16 v154 = 2080;
                        v155 = (nw_protocol *)" ";
                        __int16 v156 = 1024;
                        *(_DWORD *)char v157 = a3;
                        *(_WORD *)&v157[4] = 1024;
                        *(_DWORD *)&v157[6] = v136;
                        _os_log_impl(&dword_1830D4000, v135, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sFlow is flow controlled below %u bytes (limit %u bytes), returning 0 frames", buf, 0x2Cu);
                      }

                      LOWORD(v20) = *((_WORD *)output_handler_context + 42);
                      uint64_t v14 = v143;
                    }
                    uint64_t v30 = 0;
                    *((_WORD *)output_handler_context + 42) = v20 | 0x80;
                    goto LABEL_137;
                  }
                  *((_WORD *)output_handler_context + 42) = v20 & 0xFF7F;
                  if (v41 >= a4) {
                    unsigned int v28 = a4;
                  }
                  else {
                    unsigned int v28 = v41;
                  }
                }
                else
                {
                  uint64_t v27 = 0;
                  unsigned int v28 = a4;
                }
                a5 = v18;
              }
              else
              {
                os_log_type_t v141 = a2;
                BOOL v25 = (v16 & 0x80u) != 0;
                int v142 = (v13[403] >> 1) & 1;
                if ((v16 & 0x40) != 0)
                {
                  uint64_t v27 = v13 + 104;
                  unsigned int v29 = *((_DWORD *)v13 + 26);
                  if (v29 < a3)
                  {
                    if ((v13[405] & 0x80000000) == 0 && gLogDatapath)
                    {
                      id v125 = __nwlog_obj();
                      if (os_log_type_enabled(v125, OS_LOG_TYPE_DEBUG))
                      {
                        int v126 = *((_DWORD *)v143 + 26);
                        *(_DWORD *)buf = 136447234;
                        v151 = "nw_protocol_implementation_get_output_frames";
                        __int16 v152 = 2082;
                        char v153 = (nw_protocol_identifier *)(v143 + 407);
                        __int16 v154 = 2080;
                        v155 = (nw_protocol *)" ";
                        __int16 v156 = 1024;
                        *(_DWORD *)char v157 = a3;
                        *(_WORD *)&v157[4] = 1024;
                        *(_DWORD *)&v157[6] = v126;
                        _os_log_impl(&dword_1830D4000, v125, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sConnection is flow controlled below %u bytes (limit %u bytes), returning 0 frames", buf, 0x2Cu);
                      }

                      uint64_t v14 = v143;
                    }
                    uint64_t v30 = 0;
                    v14[404] |= 0x80u;
                    goto LABEL_137;
                  }
                  BOOL v26 = 0;
                  v13[404] &= ~0x80u;
                  if (v29 >= a4) {
                    unsigned int v28 = a4;
                  }
                  else {
                    unsigned int v28 = v29;
                  }
                }
                else
                {
                  BOOL v26 = 0;
                  uint64_t v27 = 0;
                  unsigned int v28 = a4;
                }
              }
              uint64_t v42 = *((void *)v14 + 10);
              uint64_t v43 = *((void *)v14 + 11);
              if (*((_OWORD *)v14 + 5) != 0)
              {
                unint64_t v44 = 0xFFFFFFFFLL - (v42 + v43);
                unsigned int v45 = v28 + v42 + v43;
                if (v44 >= v28) {
                  unsigned int v28 = v45;
                }
                else {
                  unsigned int v28 = -1;
                }
              }
              unsigned int v140 = v28;
              if (v25)
              {
                if (v17 + 1 >= 2) {
                  unsigned int v46 = v17;
                }
                else {
                  unsigned int v46 = 9216;
                }
                if (v28 >= v46) {
                  size_t v47 = v46;
                }
                else {
                  size_t v47 = v28;
                }
                if ((int)v47 * (int)a5 < a3)
                {
                  if ((v14[405] & 0x80000000) == 0)
                  {
                    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                    networkd_settings_init();
                    uint64_t v48 = (id)gLogObj;
                    if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
                    {
                      __int16 v49 = "s";
                      *(_DWORD *)buf = 136448002;
                      v151 = "nw_protocol_implementation_get_output_frames";
                      __int16 v152 = 2082;
                      char v153 = (nw_protocol_identifier *)(v14 + 407);
                      v155 = (nw_protocol *)" ";
                      __int16 v154 = 2080;
                      if (a5 == 1) {
                        __int16 v49 = "";
                      }
                      __int16 v156 = 1024;
                      *(_DWORD *)char v157 = v47;
                      *(_WORD *)&v157[4] = 1024;
                      *(_DWORD *)&v157[6] = a3;
                      __int16 v158 = 1024;
                      unsigned int v159 = a4;
                      __int16 v160 = 1024;
                      int v161 = a5;
                      __int16 v162 = 2080;
                      int v163 = v49;
                      _os_log_impl(&dword_1830D4000, v48, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sCannot return %u/%u/%u bytes in %u datagram%s, returning 0 frames", buf, 0x42u);
                    }

                    uint64_t v14 = v143;
                  }
                  if (v26) {
                    *((_WORD *)v26 + 26) |= 0x1000u;
                  }
                  else {
                    v14[403] |= 1u;
                  }
                  if (v141->handle == &nw_protocol_ref_counted_handle)
                  {
                    id v69 = v141[1].callbacks;
                    if (v69) {
                      v141[1].callbacks = (nw_protocol_callbacks *)((char *)&v69->add_input_handler + 1);
                    }
                    char v68 = -1;
                  }
                  else
                  {
                    char v68 = 0;
                  }
                  *(void *)os_log_type_t type = v141;
                  char v149 = v68;
                  if (*((_UNKNOWN **)v14 - 7) == &nw_protocol_ref_counted_handle)
                  {
                    uint64_t v70 = *((void *)v14 - 1);
                    if (v70) {
                      *((void *)v14 - 1) = v70 + 1;
                    }
                    char v35 = -1;
                  }
                  else
                  {
                    char v35 = 0;
                  }
                  int v146 = v14 - 96;
                  char v147 = v35;
                  size_t v71 = v141->callbacks;
                  if (v71)
                  {
                    os_log_type_t v72 = (void (*)(nw_protocol *, char *, uint64_t))v71->error;
                    if (v72)
                    {
                      v72(v141, v14 - 96, 40);
                      goto LABEL_131;
                    }
                  }
                  BOOL v110 = __nwlog_obj();
                  name = v141->identifier->name;
                  *(_DWORD *)buf = 136446722;
                  v151 = "__nw_protocol_error";
                  if (!name) {
                    name = "invalid";
                  }
                  __int16 v152 = 2082;
                  char v153 = (nw_protocol_identifier *)name;
                  __int16 v154 = 2048;
                  v155 = v141;
                  os_log_type_t v106 = (char *)_os_log_send_and_compose_impl();

                  os_log_type_t v145 = OS_LOG_TYPE_ERROR;
                  char v144 = 0;
                  if (__nwlog_fault(v106, &v145, &v144))
                  {
                    if (v145 == OS_LOG_TYPE_FAULT)
                    {
                      char v107 = __nwlog_obj();
                      os_log_type_t v112 = v145;
                      if (os_log_type_enabled(v107, v145))
                      {
                        uint64_t v113 = v141->identifier->name;
                        if (!v113) {
                          uint64_t v113 = "invalid";
                        }
                        *(_DWORD *)buf = 136446722;
                        v151 = "__nw_protocol_error";
                        __int16 v152 = 2082;
                        char v153 = (nw_protocol_identifier *)v113;
                        __int16 v154 = 2048;
                        v155 = v141;
                        _os_log_impl(&dword_1830D4000, v107, v112, "%{public}s protocol %{public}s (%p) has invalid error callback", buf, 0x20u);
                      }
LABEL_307:

                      goto LABEL_308;
                    }
                    if (!v144)
                    {
                      char v107 = __nwlog_obj();
                      os_log_type_t v133 = v145;
                      if (os_log_type_enabled(v107, v145))
                      {
                        uint64_t v134 = v141->identifier->name;
                        if (!v134) {
                          uint64_t v134 = "invalid";
                        }
                        *(_DWORD *)buf = 136446722;
                        v151 = "__nw_protocol_error";
                        __int16 v152 = 2082;
                        char v153 = (nw_protocol_identifier *)v134;
                        __int16 v154 = 2048;
                        v155 = v141;
                        _os_log_impl(&dword_1830D4000, v107, v133, "%{public}s protocol %{public}s (%p) has invalid error callback, backtrace limit exceeded", buf, 0x20u);
                      }
                      goto LABEL_307;
                    }
                    backtrace_string = (char *)__nw_create_backtrace_string();
                    char v107 = __nwlog_obj();
                    os_log_type_t v128 = v145;
                    BOOL v129 = os_log_type_enabled(v107, v145);
                    if (!backtrace_string)
                    {
                      if (v129)
                      {
                        v138 = v141->identifier->name;
                        if (!v138) {
                          v138 = "invalid";
                        }
                        *(_DWORD *)buf = 136446722;
                        v151 = "__nw_protocol_error";
                        __int16 v152 = 2082;
                        char v153 = (nw_protocol_identifier *)v138;
                        __int16 v154 = 2048;
                        v155 = v141;
                        _os_log_impl(&dword_1830D4000, v107, v128, "%{public}s protocol %{public}s (%p) has invalid error callback, no backtrace", buf, 0x20u);
                      }
                      goto LABEL_307;
                    }
                    if (v129)
                    {
                      uint64_t v130 = v141->identifier->name;
                      if (!v130) {
                        uint64_t v130 = "invalid";
                      }
                      *(_DWORD *)buf = 136446978;
                      v151 = "__nw_protocol_error";
                      __int16 v152 = 2082;
                      char v153 = (nw_protocol_identifier *)v130;
                      __int16 v154 = 2048;
                      v155 = v141;
                      __int16 v156 = 2082;
                      *(void *)char v157 = backtrace_string;
                      _os_log_impl(&dword_1830D4000, v107, v128, "%{public}s protocol %{public}s (%p) has invalid error callback, dumping backtrace:%{public}s", buf, 0x2Au);
                    }
LABEL_263:

                    free(backtrace_string);
                    goto LABEL_308;
                  }
                  goto LABEL_308;
                }
                id v139 = v27;
                uint64_t v30 = 0;
                unsigned int v57 = 0;
                if (a5 && v28)
                {
                  LODWORD(v30) = 0;
                  unsigned int v57 = 0;
                  do
                  {
                    uint64_t outbound_data = nw_protocol_create_outbound_data((NWConcrete_nw_protocol_instance *)v14, v47, v142);
                    uint64_t metadata = nw_frame_get_metadata(outbound_data);
                    if (metadata)
                    {
                      uint64_t v61 = (void *)metadata;
                      id v62 = v26;
                      uint64_t v63 = a5;
                      uint64_t v64 = v14;
                      if (nw_protocol_definition_get_message_is_stream(*((void **)v14 + 1))
                        && *((nw_protocol **)v14 - 6) == v141)
                      {
                        uint64_t v65 = -2;
                      }
                      else
                      {
                        uint64_t v65 = (uint64_t)v141;
                      }

                      void *v61 = v65;
                      uint64_t v14 = v143;
                      a5 = v63;
                      BOOL v26 = v62;
                      unsigned int v28 = v140;
                    }
                    if (*((_OWORD *)v14 + 5) != 0) {
                      nw_frame_claim(outbound_data, v60, *((void *)v14 + 10), *((void *)v14 + 11));
                    }
                    *(void *)(outbound_data + 32) = 0;
                    tqh_last = a6->tqh_last;
                    *(void *)(outbound_data + 40) = tqh_last;
                    *tqh_last = (nw_frame *)outbound_data;
                    a6->tqh_last = (nw_frame **)(outbound_data + 32);
                    v57 += v47;
                    uint64_t v30 = (v30 + 1);
                  }
                  while (v30 < a5 && v57 < v28);
                }
                if ((v14[405] & 0x80000000) == 0 && gLogDatapath)
                {
                  v127 = __nwlog_obj();
                  if (os_log_type_enabled(v127, OS_LOG_TYPE_DEBUG))
                  {
                    *(_DWORD *)buf = 136447234;
                    v151 = "nw_protocol_implementation_get_output_frames";
                    __int16 v152 = 2082;
                    char v153 = (nw_protocol_identifier *)(v143 + 407);
                    __int16 v154 = 2080;
                    v155 = (nw_protocol *)" ";
                    __int16 v156 = 1024;
                    *(_DWORD *)char v157 = v30;
                    *(_WORD *)&v157[4] = 1024;
                    *(_DWORD *)&v157[6] = v57;
                    _os_log_impl(&dword_1830D4000, v127, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sCreated %u outbound frames with total of %u bytes", buf, 0x2Cu);
                  }

                  uint64_t v14 = v143;
                  if (v26)
                  {
LABEL_115:
                    *((_WORD *)v26 + 26) &= ~0x1000u;
                    os_log_type_t v67 = v139;
                    if (!v139) {
                      goto LABEL_137;
                    }
                    goto LABEL_255;
                  }
                }
                else if (v26)
                {
                  goto LABEL_115;
                }
                v14[403] &= ~1u;
                os_log_type_t v67 = v139;
                if (!v139) {
                  goto LABEL_137;
                }
LABEL_255:
                if (*v67 != -1) {
                  *v67 -= v57;
                }
                goto LABEL_137;
              }
              uint64_t v50 = nw_protocol_create_outbound_data((NWConcrete_nw_protocol_instance *)v14, v28, v142);
              uint64_t v51 = nw_frame_get_metadata(v50);
              uint64_t v53 = (uint64_t)v141;
              if (v51)
              {
                int v54 = (void *)v51;
                uint64_t v55 = v143;
                if (nw_protocol_definition_get_message_is_stream(*((void **)v143 + 1))
                  && *(v55 - 6) == v141)
                {
                  uint64_t v53 = -2;
                }

                void *v54 = v53;
              }
              if (*((_OWORD *)v143 + 5) != 0) {
                nw_frame_claim(v50, v52, *((void *)v143 + 10), *((void *)v143 + 11));
              }
              *(void *)(v50 + 32) = 0;
              uint64_t v56 = a6->tqh_last;
              *(void *)(v50 + 40) = v56;
              id *v56 = (nw_frame *)v50;
              a6->tqh_last = (nw_frame **)(v50 + 32);
              if ((v143[405] & 0x80000000) == 0 && gLogDatapath)
              {
                BOOL v114 = __nwlog_obj();
                if (os_log_type_enabled(v114, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)buf = 136446978;
                  v151 = "nw_protocol_implementation_get_output_frames";
                  __int16 v152 = 2082;
                  char v153 = (nw_protocol_identifier *)(v143 + 407);
                  __int16 v154 = 2080;
                  v155 = (nw_protocol *)" ";
                  __int16 v156 = 1024;
                  *(_DWORD *)char v157 = v28;
                  _os_log_impl(&dword_1830D4000, v114, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sCreated 1 outbound frame with total of %u bytes", buf, 0x26u);
                }

                if (!v27) {
                  goto LABEL_96;
                }
              }
              else if (!v27)
              {
LABEL_96:

                uint64_t v30 = 1;
                goto LABEL_97;
              }
              if (*v27 != -1) {
                *v27 -= v28;
              }
              goto LABEL_96;
            }
            uint64_t v88 = __nwlog_obj();
            *(_DWORD *)buf = 136446210;
            v151 = "nw_protocol_implementation_get_output_frames";
            uint64_t v79 = (void *)_os_log_send_and_compose_impl();

            type[0] = OS_LOG_TYPE_ERROR;
            LOBYTE(v146) = 0;
            if (!__nwlog_fault((const char *)v79, type, &v146))
            {
LABEL_199:
              uint64_t v14 = v143;
              if (v79) {
                free(v79);
              }
              goto LABEL_136;
            }
            if (type[0] == OS_LOG_TYPE_FAULT)
            {
              int v80 = __nwlog_obj();
              os_log_type_t v89 = type[0];
              if (os_log_type_enabled(v80, type[0]))
              {
                *(_DWORD *)buf = 136446210;
                v151 = "nw_protocol_implementation_get_output_frames";
                _os_log_impl(&dword_1830D4000, v80, v89, "%{public}s called with null return_array", buf, 0xCu);
              }
LABEL_284:

              goto LABEL_199;
            }
            if (!(_BYTE)v146)
            {
              int v80 = __nwlog_obj();
              os_log_type_t v120 = type[0];
              if (os_log_type_enabled(v80, type[0]))
              {
                *(_DWORD *)buf = 136446210;
                v151 = "nw_protocol_implementation_get_output_frames";
                _os_log_impl(&dword_1830D4000, v80, v120, "%{public}s called with null return_array, backtrace limit exceeded", buf, 0xCu);
              }
              goto LABEL_284;
            }
            int v93 = (char *)__nw_create_backtrace_string();
            int v80 = __nwlog_obj();
            os_log_type_t v102 = type[0];
            BOOL v103 = os_log_type_enabled(v80, type[0]);
            if (!v93)
            {
              if (v103)
              {
                *(_DWORD *)buf = 136446210;
                v151 = "nw_protocol_implementation_get_output_frames";
                _os_log_impl(&dword_1830D4000, v80, v102, "%{public}s called with null return_array, no backtrace", buf, 0xCu);
              }
              goto LABEL_284;
            }
            if (v103)
            {
              *(_DWORD *)buf = 136446466;
              v151 = "nw_protocol_implementation_get_output_frames";
              __int16 v152 = 2082;
              char v153 = (nw_protocol_identifier *)v93;
              _os_log_impl(&dword_1830D4000, v80, v102, "%{public}s called with null return_array, dumping backtrace:%{public}s", buf, 0x16u);
            }
          }
          else
          {
            int v86 = __nwlog_obj();
            *(_DWORD *)buf = 136446210;
            v151 = "nw_protocol_implementation_get_output_frames";
            uint64_t v79 = (void *)_os_log_send_and_compose_impl();

            type[0] = OS_LOG_TYPE_ERROR;
            LOBYTE(v146) = 0;
            if (!__nwlog_fault((const char *)v79, type, &v146)) {
              goto LABEL_199;
            }
            if (type[0] == OS_LOG_TYPE_FAULT)
            {
              int v80 = __nwlog_obj();
              os_log_type_t v87 = type[0];
              if (os_log_type_enabled(v80, type[0]))
              {
                *(_DWORD *)buf = 136446210;
                v151 = "nw_protocol_implementation_get_output_frames";
                _os_log_impl(&dword_1830D4000, v80, v87, "%{public}s called with null input_protocol", buf, 0xCu);
              }
              goto LABEL_284;
            }
            if (!(_BYTE)v146)
            {
              int v80 = __nwlog_obj();
              os_log_type_t v119 = type[0];
              if (os_log_type_enabled(v80, type[0]))
              {
                *(_DWORD *)buf = 136446210;
                v151 = "nw_protocol_implementation_get_output_frames";
                _os_log_impl(&dword_1830D4000, v80, v119, "%{public}s called with null input_protocol, backtrace limit exceeded", buf, 0xCu);
              }
              goto LABEL_284;
            }
            int v93 = (char *)__nw_create_backtrace_string();
            int v80 = __nwlog_obj();
            os_log_type_t v100 = type[0];
            BOOL v101 = os_log_type_enabled(v80, type[0]);
            if (!v93)
            {
              if (v101)
              {
                *(_DWORD *)buf = 136446210;
                v151 = "nw_protocol_implementation_get_output_frames";
                _os_log_impl(&dword_1830D4000, v80, v100, "%{public}s called with null input_protocol, no backtrace", buf, 0xCu);
              }
              goto LABEL_284;
            }
            if (v101)
            {
              *(_DWORD *)buf = 136446466;
              v151 = "nw_protocol_implementation_get_output_frames";
              __int16 v152 = 2082;
              char v153 = (nw_protocol_identifier *)v93;
              _os_log_impl(&dword_1830D4000, v80, v100, "%{public}s called with null input_protocol, dumping backtrace:%{public}s", buf, 0x16u);
            }
          }
        }
        else
        {
          int v84 = __nwlog_obj();
          *(_DWORD *)buf = 136446210;
          v151 = "nw_protocol_implementation_get_output_frames";
          uint64_t v79 = (void *)_os_log_send_and_compose_impl();

          type[0] = OS_LOG_TYPE_ERROR;
          LOBYTE(v146) = 0;
          if (!__nwlog_fault((const char *)v79, type, &v146)) {
            goto LABEL_199;
          }
          if (type[0] == OS_LOG_TYPE_FAULT)
          {
            int v80 = __nwlog_obj();
            os_log_type_t v85 = type[0];
            if (os_log_type_enabled(v80, type[0]))
            {
              *(_DWORD *)buf = 136446210;
              v151 = "nw_protocol_implementation_get_output_frames";
              _os_log_impl(&dword_1830D4000, v80, v85, "%{public}s called with null instance->parent_definition->extended_state", buf, 0xCu);
            }
            goto LABEL_284;
          }
          if (!(_BYTE)v146)
          {
            int v80 = __nwlog_obj();
            os_log_type_t v118 = type[0];
            if (os_log_type_enabled(v80, type[0]))
            {
              *(_DWORD *)buf = 136446210;
              v151 = "nw_protocol_implementation_get_output_frames";
              _os_log_impl(&dword_1830D4000, v80, v118, "%{public}s called with null instance->parent_definition->extended_state, backtrace limit exceeded", buf, 0xCu);
            }
            goto LABEL_284;
          }
          int v93 = (char *)__nw_create_backtrace_string();
          int v80 = __nwlog_obj();
          os_log_type_t v98 = type[0];
          BOOL v99 = os_log_type_enabled(v80, type[0]);
          if (!v93)
          {
            if (v99)
            {
              *(_DWORD *)buf = 136446210;
              v151 = "nw_protocol_implementation_get_output_frames";
              _os_log_impl(&dword_1830D4000, v80, v98, "%{public}s called with null instance->parent_definition->extended_state, no backtrace", buf, 0xCu);
            }
            goto LABEL_284;
          }
          if (v99)
          {
            *(_DWORD *)buf = 136446466;
            v151 = "nw_protocol_implementation_get_output_frames";
            __int16 v152 = 2082;
            char v153 = (nw_protocol_identifier *)v93;
            _os_log_impl(&dword_1830D4000, v80, v98, "%{public}s called with null instance->parent_definition->extended_state, dumping backtrace:%{public}s", buf, 0x16u);
          }
        }
      }
      else
      {
        __int16 v82 = __nwlog_obj();
        *(_DWORD *)buf = 136446210;
        v151 = "nw_protocol_implementation_get_output_frames";
        uint64_t v79 = (void *)_os_log_send_and_compose_impl();

        type[0] = OS_LOG_TYPE_ERROR;
        LOBYTE(v146) = 0;
        if (!__nwlog_fault((const char *)v79, type, &v146)) {
          goto LABEL_199;
        }
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          int v80 = __nwlog_obj();
          os_log_type_t v83 = type[0];
          if (os_log_type_enabled(v80, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            v151 = "nw_protocol_implementation_get_output_frames";
            _os_log_impl(&dword_1830D4000, v80, v83, "%{public}s called with null instance->parent_definition", buf, 0xCu);
          }
          goto LABEL_284;
        }
        if (!(_BYTE)v146)
        {
          int v80 = __nwlog_obj();
          os_log_type_t v117 = type[0];
          if (os_log_type_enabled(v80, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            v151 = "nw_protocol_implementation_get_output_frames";
            _os_log_impl(&dword_1830D4000, v80, v117, "%{public}s called with null instance->parent_definition, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_284;
        }
        int v93 = (char *)__nw_create_backtrace_string();
        int v80 = __nwlog_obj();
        os_log_type_t v96 = type[0];
        BOOL v97 = os_log_type_enabled(v80, type[0]);
        if (!v93)
        {
          if (v97)
          {
            *(_DWORD *)buf = 136446210;
            v151 = "nw_protocol_implementation_get_output_frames";
            _os_log_impl(&dword_1830D4000, v80, v96, "%{public}s called with null instance->parent_definition, no backtrace", buf, 0xCu);
          }
          goto LABEL_284;
        }
        if (v97)
        {
          *(_DWORD *)buf = 136446466;
          v151 = "nw_protocol_implementation_get_output_frames";
          __int16 v152 = 2082;
          char v153 = (nw_protocol_identifier *)v93;
          _os_log_impl(&dword_1830D4000, v80, v96, "%{public}s called with null instance->parent_definition, dumping backtrace:%{public}s", buf, 0x16u);
        }
      }
    }
    else
    {
      int v78 = __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      v151 = "nw_protocol_implementation_get_output_frames";
      uint64_t v79 = (void *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(v146) = 0;
      if (!__nwlog_fault((const char *)v79, type, &v146)) {
        goto LABEL_199;
      }
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        int v80 = __nwlog_obj();
        os_log_type_t v81 = type[0];
        if (os_log_type_enabled(v80, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          v151 = "nw_protocol_implementation_get_output_frames";
          _os_log_impl(&dword_1830D4000, v80, v81, "%{public}s called with null instance", buf, 0xCu);
        }
        goto LABEL_284;
      }
      if (!(_BYTE)v146)
      {
        int v80 = __nwlog_obj();
        os_log_type_t v116 = type[0];
        if (os_log_type_enabled(v80, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          v151 = "nw_protocol_implementation_get_output_frames";
          _os_log_impl(&dword_1830D4000, v80, v116, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_284;
      }
      int v93 = (char *)__nw_create_backtrace_string();
      int v80 = __nwlog_obj();
      os_log_type_t v94 = type[0];
      BOOL v95 = os_log_type_enabled(v80, type[0]);
      if (!v93)
      {
        if (v95)
        {
          *(_DWORD *)buf = 136446210;
          v151 = "nw_protocol_implementation_get_output_frames";
          _os_log_impl(&dword_1830D4000, v80, v94, "%{public}s called with null instance, no backtrace", buf, 0xCu);
        }
        goto LABEL_284;
      }
      if (v95)
      {
        *(_DWORD *)buf = 136446466;
        v151 = "nw_protocol_implementation_get_output_frames";
        __int16 v152 = 2082;
        char v153 = (nw_protocol_identifier *)v93;
        _os_log_impl(&dword_1830D4000, v80, v94, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
      }
    }

    free(v93);
    goto LABEL_199;
  }
  BOOL v74 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v151 = "nw_protocol_implementation_get_output_frames";
  uint64_t v75 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  LOBYTE(v146) = 0;
  if (__nwlog_fault(v75, type, &v146))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      uint64_t v76 = __nwlog_obj();
      os_log_type_t v77 = type[0];
      if (os_log_type_enabled(v76, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v151 = "nw_protocol_implementation_get_output_frames";
        _os_log_impl(&dword_1830D4000, v76, v77, "%{public}s called with null protocol", buf, 0xCu);
      }
    }
    else if ((_BYTE)v146)
    {
      __int16 v90 = (char *)__nw_create_backtrace_string();
      uint64_t v76 = __nwlog_obj();
      os_log_type_t v91 = type[0];
      BOOL v92 = os_log_type_enabled(v76, type[0]);
      if (v90)
      {
        if (v92)
        {
          *(_DWORD *)buf = 136446466;
          v151 = "nw_protocol_implementation_get_output_frames";
          __int16 v152 = 2082;
          char v153 = (nw_protocol_identifier *)v90;
          _os_log_impl(&dword_1830D4000, v76, v91, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v90);
        goto LABEL_267;
      }
      if (v92)
      {
        *(_DWORD *)buf = 136446210;
        v151 = "nw_protocol_implementation_get_output_frames";
        _os_log_impl(&dword_1830D4000, v76, v91, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v76 = __nwlog_obj();
      os_log_type_t v115 = type[0];
      if (os_log_type_enabled(v76, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v151 = "nw_protocol_implementation_get_output_frames";
        _os_log_impl(&dword_1830D4000, v76, v115, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_267:
  if (v75) {
    free(v75);
  }
  return 0;
}

void sub_1832112F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

uint64_t nw_protocol_instance_get_flow_for_key(void *a1, uint64_t a2)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  int v3 = a1;
  uint64_t v4 = (char *)v3;
  if (!v3)
  {
    uint64_t v12 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v30 = "nw_protocol_instance_get_flow_for_key";
    int v13 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v27 = 0;
    if (!__nwlog_fault(v13, &type, &v27)) {
      goto LABEL_54;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v30 = "nw_protocol_instance_get_flow_for_key";
        _os_log_impl(&dword_1830D4000, v14, v15, "%{public}s called with null instance", buf, 0xCu);
      }
      goto LABEL_53;
    }
    if (!v27)
    {
      uint64_t v14 = __nwlog_obj();
      os_log_type_t v25 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v30 = "nw_protocol_instance_get_flow_for_key";
        _os_log_impl(&dword_1830D4000, v14, v25, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_53;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v14 = __nwlog_obj();
    os_log_type_t v19 = type;
    BOOL v20 = os_log_type_enabled(v14, type);
    if (!backtrace_string)
    {
      if (v20)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v30 = "nw_protocol_instance_get_flow_for_key";
        _os_log_impl(&dword_1830D4000, v14, v19, "%{public}s called with null instance, no backtrace", buf, 0xCu);
      }
      goto LABEL_53;
    }
    if (v20)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v30 = "nw_protocol_instance_get_flow_for_key";
      __int16 v31 = 2082;
      __int16 v32 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v14, v19, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_38;
  }
  if (!a2)
  {
    unsigned int v16 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v30 = "nw_protocol_instance_get_flow_for_key";
    int v13 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v27 = 0;
    if (!__nwlog_fault(v13, &type, &v27)) {
      goto LABEL_54;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v14 = __nwlog_obj();
      os_log_type_t v17 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v30 = "nw_protocol_instance_get_flow_for_key";
        _os_log_impl(&dword_1830D4000, v14, v17, "%{public}s called with null key", buf, 0xCu);
      }
LABEL_53:

LABEL_54:
      if (v13) {
        free(v13);
      }
      goto LABEL_13;
    }
    if (!v27)
    {
      uint64_t v14 = __nwlog_obj();
      os_log_type_t v26 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v30 = "nw_protocol_instance_get_flow_for_key";
        _os_log_impl(&dword_1830D4000, v14, v26, "%{public}s called with null key, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_53;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v14 = __nwlog_obj();
    os_log_type_t v21 = type;
    BOOL v22 = os_log_type_enabled(v14, type);
    if (!backtrace_string)
    {
      if (v22)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v30 = "nw_protocol_instance_get_flow_for_key";
        _os_log_impl(&dword_1830D4000, v14, v21, "%{public}s called with null key, no backtrace", buf, 0xCu);
      }
      goto LABEL_53;
    }
    if (v22)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v30 = "nw_protocol_instance_get_flow_for_key";
      __int16 v31 = 2082;
      __int16 v32 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v14, v21, "%{public}s called with null key, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_38:

    free(backtrace_string);
    goto LABEL_54;
  }
  uint64_t v5 = v3[30];
  if (!v5 || !*(_DWORD *)(v5 + 40))
  {
    if ((v4[405] & 0x80000000) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      size_t v9 = (id)gLogObj;
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446722;
        uint64_t v30 = "nw_protocol_instance_get_flow_for_key";
        __int16 v31 = 2082;
        __int16 v32 = v4 + 407;
        __int16 v33 = 2080;
        uint64_t v34 = " ";
        _os_log_impl(&dword_1830D4000, v9, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sFlow mapping table is empty", buf, 0x20u);
      }
    }
    goto LABEL_13;
  }
  BOOL node = nw_hash_table_get_node(v5, a2, *(unsigned int *)(*(void *)(*((void *)v4 + 1) + 80) + 256));
  if (!node)
  {
    if ((v4[405] & 0x80000000) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v11 = (id)gLogObj;
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446978;
        uint64_t v30 = "nw_protocol_instance_get_flow_for_key";
        __int16 v31 = 2082;
        __int16 v32 = v4 + 407;
        __int16 v33 = 2080;
        uint64_t v34 = " ";
        __int16 v35 = 2048;
        uint64_t v36 = a2;
        _os_log_impl(&dword_1830D4000, v11, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sNo flow found for key %p", buf, 0x2Au);
      }
    }
LABEL_13:
    uint64_t v8 = 0;
    goto LABEL_14;
  }
  uint64_t v7 = node;
  if ((v4[405] & 0x80000000) == 0 && gLogDatapath)
  {
    int v23 = __nwlog_obj();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v24 = *(void *)(v7 + 32);
      *(_DWORD *)buf = 136447234;
      uint64_t v30 = "nw_protocol_instance_get_flow_for_key";
      __int16 v31 = 2082;
      __int16 v32 = v4 + 407;
      __int16 v33 = 2080;
      uint64_t v34 = " ";
      __int16 v35 = 2048;
      uint64_t v36 = v24;
      __int16 v37 = 2048;
      uint64_t v38 = a2;
      _os_log_impl(&dword_1830D4000, v23, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sFound flow %llx for custom flow mapping key %p", buf, 0x34u);
    }
  }
  uint64_t v8 = *(void *)(v7 + 32);
LABEL_14:

  return v8;
}

void nw_parameters_set_skip_stack_trace_capture(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  uint64_t v4 = v3;
  if (v3)
  {
    uint64_t v5 = 0x8000000000;
    if (!a2) {
      uint64_t v5 = 0;
    }
    *((void *)v3 + 12) = *((void *)v3 + 12) & 0xFFFFFF7FFFFFFFFFLL | v5;
    goto LABEL_5;
  }
  uint64_t v6 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v17 = "nw_parameters_set_skip_stack_trace_capture";
  uint64_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v17 = "nw_parameters_set_skip_stack_trace_capture";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v8 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v17 = "nw_parameters_set_skip_stack_trace_capture";
          __int16 v18 = 2082;
          os_log_type_t v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v17 = "nw_parameters_set_skip_stack_trace_capture";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v17 = "nw_parameters_set_skip_stack_trace_capture";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_22:
  if (v7) {
    free(v7);
  }
LABEL_5:
}

void __nw_activity_activate_block_invoke_54(uint64_t a1)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  id v1 = (NWConcrete_nw_activity *)*(id *)(a1 + 32);
  int v2 = v1;
  if (!v1)
  {
    char v14 = __nwlog_obj();
    LODWORD(v31.investigation_identifier) = 136446210;
    *(unint64_t *)((char *)&v31.investigation_identifier + 4) = (unint64_t)"nw_activity_report_if_selected";
    os_log_type_t v15 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(buf) = 16;
    LOBYTE(v30) = 0;
    if (!__nwlog_fault(v15, &buf, &v30)) {
      goto LABEL_73;
    }
    if (buf == 17)
    {
      unsigned int v16 = __nwlog_obj();
      os_log_type_t v17 = buf;
      if (os_log_type_enabled(v16, (os_log_type_t)buf))
      {
        LODWORD(v31.investigation_identifier) = 136446210;
        *(unint64_t *)((char *)&v31.investigation_identifier + 4) = (unint64_t)"nw_activity_report_if_selected";
        _os_log_impl(&dword_1830D4000, v16, v17, "%{public}s called with null activity", (uint8_t *)&v31, 0xCu);
      }
    }
    else if ((_BYTE)v30)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      unsigned int v16 = __nwlog_obj();
      os_log_type_t v21 = buf;
      BOOL v22 = os_log_type_enabled(v16, (os_log_type_t)buf);
      if (backtrace_string)
      {
        if (v22)
        {
          LODWORD(v31.investigation_identifier) = 136446466;
          *(unint64_t *)((char *)&v31.investigation_identifier + 4) = (unint64_t)"nw_activity_report_if_selected";
          LOWORD(v31.label) = 2082;
          *(void *)((char *)&v31.label + 2) = backtrace_string;
          _os_log_impl(&dword_1830D4000, v16, v21, "%{public}s called with null activity, dumping backtrace:%{public}s", (uint8_t *)&v31, 0x16u);
        }

        free(backtrace_string);
LABEL_73:
        if (!v15) {
          goto LABEL_39;
        }
        goto LABEL_74;
      }
      if (v22)
      {
        LODWORD(v31.investigation_identifier) = 136446210;
        *(unint64_t *)((char *)&v31.investigation_identifier + 4) = (unint64_t)"nw_activity_report_if_selected";
        _os_log_impl(&dword_1830D4000, v16, v21, "%{public}s called with null activity, no backtrace", (uint8_t *)&v31, 0xCu);
      }
    }
    else
    {
      unsigned int v16 = __nwlog_obj();
      os_log_type_t v26 = buf;
      if (os_log_type_enabled(v16, (os_log_type_t)buf))
      {
        LODWORD(v31.investigation_identifier) = 136446210;
        *(unint64_t *)((char *)&v31.investigation_identifier + 4) = (unint64_t)"nw_activity_report_if_selected";
        _os_log_impl(&dword_1830D4000, v16, v26, "%{public}s called with null activity, backtrace limit exceeded", (uint8_t *)&v31, 0xCu);
      }
    }
LABEL_72:

    goto LABEL_73;
  }
  if ((*((unsigned char *)v1 + 140) & 4) == 0)
  {
    __int16 v18 = __nwlog_obj();
    LODWORD(v31.investigation_identifier) = 136446210;
    *(unint64_t *)((char *)&v31.investigation_identifier + 4) = (unint64_t)"nw_activity_report_if_selected";
    os_log_type_t v15 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(buf) = 16;
    LOBYTE(v30) = 0;
    if (!__nwlog_fault(v15, &buf, &v30)) {
      goto LABEL_73;
    }
    if (buf == 17)
    {
      unsigned int v16 = __nwlog_obj();
      os_log_type_t v19 = buf;
      if (os_log_type_enabled(v16, (os_log_type_t)buf))
      {
        LODWORD(v31.investigation_identifier) = 136446210;
        *(unint64_t *)((char *)&v31.investigation_identifier + 4) = (unint64_t)"nw_activity_report_if_selected";
        _os_log_impl(&dword_1830D4000, v16, v19, "%{public}s Cannot report activity before activation", (uint8_t *)&v31, 0xCu);
      }
    }
    else if ((_BYTE)v30)
    {
      int v23 = (char *)__nw_create_backtrace_string();
      unsigned int v16 = __nwlog_obj();
      os_log_type_t v24 = buf;
      BOOL v25 = os_log_type_enabled(v16, (os_log_type_t)buf);
      if (v23)
      {
        if (v25)
        {
          LODWORD(v31.investigation_identifier) = 136446466;
          *(unint64_t *)((char *)&v31.investigation_identifier + 4) = (unint64_t)"nw_activity_report_if_selected";
          LOWORD(v31.label) = 2082;
          *(void *)((char *)&v31.label + 2) = v23;
          _os_log_impl(&dword_1830D4000, v16, v24, "%{public}s Cannot report activity before activation, dumping backtrace:%{public}s", (uint8_t *)&v31, 0x16u);
        }

        free(v23);
        if (!v15) {
          goto LABEL_39;
        }
LABEL_74:
        free(v15);
        goto LABEL_39;
      }
      if (v25)
      {
        LODWORD(v31.investigation_identifier) = 136446210;
        *(unint64_t *)((char *)&v31.investigation_identifier + 4) = (unint64_t)"nw_activity_report_if_selected";
        _os_log_impl(&dword_1830D4000, v16, v24, "%{public}s Cannot report activity before activation, no backtrace", (uint8_t *)&v31, 0xCu);
      }
    }
    else
    {
      unsigned int v16 = __nwlog_obj();
      os_log_type_t v27 = buf;
      if (os_log_type_enabled(v16, (os_log_type_t)buf))
      {
        LODWORD(v31.investigation_identifier) = 136446210;
        *(unint64_t *)((char *)&v31.investigation_identifier + 4) = (unint64_t)"nw_activity_report_if_selected";
        _os_log_impl(&dword_1830D4000, v16, v27, "%{public}s Cannot report activity before activation, backtrace limit exceeded", (uint8_t *)&v31, 0xCu);
      }
    }
    goto LABEL_72;
  }
  if ((v1->token[9] & 1) == 0) {
    goto LABEL_39;
  }
  memset(&v31, 0, sizeof(v31));
  nw_activity_fill_out_activity_report(v1, &v31);
  if (os_variant_has_internal_diagnostics()
    && networkd_settings_get_BOOL((const char *)nw_setting_activity_write_metric_stream_to_log))
  {
    id v3 = v2;
    uint64_t v4 = nw_activity_create_activity_dictionary(v3, &v31);
    uint64_t v30 = 0;
    if (nw_activity_metric_object_is_valid(v4, 0, (const char **)&v30))
    {
      if (__nwlog_metricstream_log::onceToken != -1) {
        dispatch_once(&__nwlog_metricstream_log::onceToken, &__block_literal_global_64);
      }
      uint64_t v5 = (id)gmetricstreamLogObj;
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        int buf = 136446210;
        __int16 v33 = (const char *)v30;
        _os_log_impl(&dword_1830D4000, v5, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
      }

      goto LABEL_34;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v6 = (id)gLogObj;
    int buf = 136446210;
    __int16 v33 = "nw_activity_write_activity_report_to_log";
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v28 = 0;
    if (__nwlog_fault(v7, &type, &v28))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v8 = (id)gLogObj;
        os_log_type_t v9 = type;
        if (os_log_type_enabled(v8, type))
        {
          int buf = 136446210;
          __int16 v33 = "nw_activity_write_activity_report_to_log";
          _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s generated activity dictionary is not valid", (uint8_t *)&buf, 0xCu);
        }
      }
      else if (v28)
      {
        int v10 = (char *)__nw_create_backtrace_string();
        uint64_t v8 = __nwlog_obj();
        os_log_type_t v11 = type;
        BOOL v12 = os_log_type_enabled(v8, type);
        if (v10)
        {
          if (v12)
          {
            int buf = 136446466;
            __int16 v33 = "nw_activity_write_activity_report_to_log";
            __int16 v34 = 2082;
            __int16 v35 = v10;
            _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s generated activity dictionary is not valid, dumping backtrace:%{public}s", (uint8_t *)&buf, 0x16u);
          }

          free(v10);
          if (!v7) {
            goto LABEL_34;
          }
          goto LABEL_33;
        }
        if (v12)
        {
          int buf = 136446210;
          __int16 v33 = "nw_activity_write_activity_report_to_log";
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s generated activity dictionary is not valid, no backtrace", (uint8_t *)&buf, 0xCu);
        }
      }
      else
      {
        uint64_t v8 = __nwlog_obj();
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v8, type))
        {
          int buf = 136446210;
          __int16 v33 = "nw_activity_write_activity_report_to_log";
          _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s generated activity dictionary is not valid, backtrace limit exceeded", (uint8_t *)&buf, 0xCu);
        }
      }
    }
    if (!v7)
    {
LABEL_34:
      if (v30) {
        free(v30);
      }
      if (v4) {

      }
      goto LABEL_39;
    }
LABEL_33:
    free(v7);
    goto LABEL_34;
  }
  if (nw_connection_get_symptom_reporter_handle::once[0] != -1) {
    dispatch_once(nw_connection_get_symptom_reporter_handle::once, &__block_literal_global_79705);
  }
  symptom_new();
  symptom_set_qualifier();
  symptom_set_additional_qualifier();
  symptom_send();
LABEL_39:
}

void sub_18321254C(_Unwind_Exception *a1)
{
  if (v3) {

  }
  _Unwind_Resume(a1);
}

NWConcrete_nw_protocol_options *nw_proxy_create_options(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  int v2 = v1;
  if (v1)
  {
    options = nw_protocol_create_options(v1);
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  unsigned int v16 = "nw_proxy_create_options";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        unsigned int v16 = "nw_proxy_create_options";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null proxy_definition", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          unsigned int v16 = "nw_proxy_create_options";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null proxy_definition, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        unsigned int v16 = "nw_proxy_create_options";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null proxy_definition, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        unsigned int v16 = "nw_proxy_create_options";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null proxy_definition, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  options = 0;
LABEL_3:

  return options;
}

void sub_183212820(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_parameters_set_is_third_party_web_content(void *a1, int a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  uint64_t v4 = v3;
  if (v3)
  {
    uint64_t v5 = *((void *)v3 + 13);
    int v7 = *(unsigned __int16 *)(v5 + 108);
    uint64_t v6 = v5 + 108;
    int v8 = v7 | (*(unsigned __int8 *)(v6 + 2) << 16);
    if (a2) {
      __int16 v9 = 0x8000;
    }
    else {
      __int16 v9 = 0;
    }
    unsigned int v10 = v8 & 0xFFFF7FFF;
    *(_WORD *)uint64_t v6 = v10 | v9;
    *(unsigned char *)(v6 + 2) = BYTE2(v10);
    goto LABEL_6;
  }
  BOOL v11 = __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  BOOL v22 = "nw_parameters_set_is_third_party_web_content";
  os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v19 = 0;
  if (__nwlog_fault(v12, &type, &v19))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v22 = "nw_parameters_set_is_third_party_web_content";
        _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      char v13 = __nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)int buf = 136446466;
          BOOL v22 = "nw_parameters_set_is_third_party_web_content";
          __int16 v23 = 2082;
          os_log_type_t v24 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v13, v16, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v17)
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v22 = "nw_parameters_set_is_third_party_web_content";
        _os_log_impl(&dword_1830D4000, v13, v16, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      char v13 = __nwlog_obj();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v22 = "nw_parameters_set_is_third_party_web_content";
        _os_log_impl(&dword_1830D4000, v13, v18, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_23:
  if (v12) {
    free(v12);
  }
LABEL_6:
}

void sub_183214B64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,void *a27,void *a28)
{
  _Unwind_Resume(a1);
}

BOOL nw_endpoint_flow_should_add_filter(void *a1, void *a2)
{
  id v3 = a1;
  uint64_t v4 = a2;
  uint64_t v5 = v4;
  if (!v4) {
    goto LABEL_9;
  }
  int v6 = v4[68];
  if (!v3)
  {
    if (v6 < 1) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  int v7 = v3;
  __int16 v8 = *(_WORD *)(v7[13] + 100);

  BOOL v9 = 0;
  if ((v8 & 0x10) == 0 && v6 && (v6 & 0x80000000) == 0)
  {
LABEL_8:
    if ((nw_path_uses_interface_subtype(v5, 4001) & 1) == 0)
    {
      BOOL v9 = nw_path_get_nexus_protocol_level(v5) == 2
        || nw_path_get_nexus_protocol_level(v5) == 0;
      goto LABEL_10;
    }
LABEL_9:
    BOOL v9 = 0;
  }
LABEL_10:

  return v9;
}

void sub_183214DD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_path_is_multilayer_packet_logging_enabled(void *a1)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  int v2 = v1;
  if (!v1)
  {
    BOOL v9 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v21 = "nw_path_is_multilayer_packet_logging_enabled";
    unsigned int v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v18 = 0;
    if (__nwlog_fault(v10, &type, &v18))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        BOOL v11 = __nwlog_obj();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v21 = "nw_path_is_multilayer_packet_logging_enabled";
          _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s called with null path", buf, 0xCu);
        }
      }
      else if (v18)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        BOOL v11 = __nwlog_obj();
        os_log_type_t v14 = type;
        BOOL v15 = os_log_type_enabled(v11, type);
        if (backtrace_string)
        {
          if (v15)
          {
            *(_DWORD *)int buf = 136446466;
            os_log_type_t v21 = "nw_path_is_multilayer_packet_logging_enabled";
            __int16 v22 = 2082;
            __int16 v23 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v11, v14, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_23;
        }
        if (v15)
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v21 = "nw_path_is_multilayer_packet_logging_enabled";
          _os_log_impl(&dword_1830D4000, v11, v14, "%{public}s called with null path, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        BOOL v11 = __nwlog_obj();
        os_log_type_t v16 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v21 = "nw_path_is_multilayer_packet_logging_enabled";
          _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_23:
    if (v10) {
      free(v10);
    }
    goto LABEL_25;
  }
  id v3 = (void *)v1[12];
  if (v3)
  {
    uint64_t v4 = v3;
    __int16 v5 = *(_WORD *)(v4 + 85);

    if ((v5 & 0x40) != 0)
    {
      uint64_t v8 = 1;
      goto LABEL_26;
    }
  }
  int v6 = (void *)v2[13];
  if (!v6)
  {
LABEL_25:
    uint64_t v8 = 0;
    goto LABEL_26;
  }
  int v7 = v6;
  uint64_t v8 = (*(unsigned __int16 *)(v7 + 85) >> 6) & 1;

LABEL_26:
  return v8;
}

BOOL nw_endpoint_flow_expected_to_join(NWConcrete_nw_endpoint_handler *a1, NWConcrete_nw_endpoint_flow *a2)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  uint64_t v4 = a2;
  if (v4)
  {
    __int16 v5 = v3;
    int v6 = v5;
    if (v5)
    {
      int v7 = v5->parameters;
LABEL_4:

      *(void *)os_log_type_t type = 0;
      unsigned int v41 = type;
      uint64_t v42 = 0x2020000000;
      uint64_t v43 = 0;
      v38[0] = 0;
      v38[1] = v38;
      v38[2] = 0x2020000000;
      char v39 = 0;
      nw_endpoint_t v8 = nw_endpoint_handler_copy_endpoint(v6);
      *(void *)int buf = 0;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x3032000000;
      unsigned int v45 = __Block_byref_object_copy__81752;
      unsigned int v46 = __Block_byref_object_dispose__81753;
      size_t v47 = v8;
      aBlock[0] = MEMORY[0x1E4F143A8];
      aBlock[1] = 3221225472;
      aBlock[2] = ___ZL33nw_endpoint_flow_expected_to_joinP30NWConcrete_nw_endpoint_handlerP27NWConcrete_nw_endpoint_flow_block_invoke;
      aBlock[3] = &unk_1E524A310;
      __int16 v35 = buf;
      BOOL v9 = v47;
      nw_activity_report_s v31 = v9;
      __int16 v32 = v6;
      uint64_t v36 = v38;
      unsigned int v10 = v7;
      __int16 v33 = v10;
      __int16 v34 = v4;
      __int16 v37 = type;
      BOOL v11 = _Block_copy(aBlock);
      nw_parameters_internal_iterate_protocol_stack(v10, 5, 0, v11);
      if (*((void *)v41 + 3))
      {
        BOOL v12 = 1;
      }
      else
      {
        nw_parameters_internal_iterate_protocol_stack(v10, 4, 0, v11);
        BOOL v12 = *((void *)v41 + 3) != 0;
      }

      _Block_object_dispose(buf, 8);
      _Block_object_dispose(v38, 8);
      _Block_object_dispose(type, 8);

      goto LABEL_8;
    }
    char v18 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_endpoint_handler_copy_parameters";
    char v19 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v38[0]) = 0;
    if (__nwlog_fault(v19, type, v38))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        uint64_t v20 = __nwlog_obj();
        os_log_type_t v21 = type[0];
        if (os_log_type_enabled(v20, type[0]))
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_handler_copy_parameters";
          _os_log_impl(&dword_1830D4000, v20, v21, "%{public}s called with null handler", buf, 0xCu);
        }
      }
      else if (LOBYTE(v38[0]))
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        uint64_t v20 = __nwlog_obj();
        os_log_type_t v26 = type[0];
        BOOL v27 = os_log_type_enabled(v20, type[0]);
        if (backtrace_string)
        {
          if (v27)
          {
            *(_DWORD *)int buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_endpoint_handler_copy_parameters";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = backtrace_string;
            _os_log_impl(&dword_1830D4000, v20, v26, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_44;
        }
        if (v27)
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_handler_copy_parameters";
          _os_log_impl(&dword_1830D4000, v20, v26, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        uint64_t v20 = __nwlog_obj();
        os_log_type_t v29 = type[0];
        if (os_log_type_enabled(v20, type[0]))
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_handler_copy_parameters";
          _os_log_impl(&dword_1830D4000, v20, v29, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_44:
    if (v19) {
      free(v19);
    }
    int v7 = 0;
    goto LABEL_4;
  }
  os_log_type_t v14 = __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_endpoint_flow_expected_to_join";
  BOOL v15 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  LOBYTE(v38[0]) = 0;
  if (__nwlog_fault(v15, type, v38))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v16 = __nwlog_obj();
      os_log_type_t v17 = type[0];
      if (os_log_type_enabled(v16, type[0]))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_endpoint_flow_expected_to_join";
        _os_log_impl(&dword_1830D4000, v16, v17, "%{public}s called with null flow", buf, 0xCu);
      }
    }
    else if (LOBYTE(v38[0]))
    {
      __int16 v22 = (char *)__nw_create_backtrace_string();
      os_log_type_t v16 = __nwlog_obj();
      os_log_type_t v23 = type[0];
      BOOL v24 = os_log_type_enabled(v16, type[0]);
      if (v22)
      {
        if (v24)
        {
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_endpoint_flow_expected_to_join";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v22;
          _os_log_impl(&dword_1830D4000, v16, v23, "%{public}s called with null flow, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v22);
        goto LABEL_38;
      }
      if (v24)
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_endpoint_flow_expected_to_join";
        _os_log_impl(&dword_1830D4000, v16, v23, "%{public}s called with null flow, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v16 = __nwlog_obj();
      os_log_type_t v28 = type[0];
      if (os_log_type_enabled(v16, type[0]))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_endpoint_flow_expected_to_join";
        _os_log_impl(&dword_1830D4000, v16, v28, "%{public}s called with null flow, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_38:
  if (v15) {
    free(v15);
  }
  BOOL v12 = 0;
LABEL_8:

  return v12;
}

void sub_183215728(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a25, 8);
  _Block_object_dispose(&a29, 8);

  _Unwind_Resume(a1);
}

void nw_path_assert_required_agents(void *a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  int v2 = v1;
  if (v1)
  {
    id v3 = (void *)v1[28];
    if (v3)
    {
      applier[0] = MEMORY[0x1E4F143A8];
      applier[1] = 3221225472;
      applier[2] = __nw_path_assert_required_agents_block_invoke;
      applier[3] = &unk_1E52480D0;
      char v13 = v1;
      xpc_dictionary_apply(v3, applier);
    }
    goto LABEL_4;
  }
  uint64_t v4 = __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  os_log_type_t v17 = "nw_path_assert_required_agents";
  __int16 v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v17 = "nw_path_assert_required_agents";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null path", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)int buf = 136446466;
          os_log_type_t v17 = "nw_path_assert_required_agents";
          __int16 v18 = 2082;
          char v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_21;
      }
      if (v10)
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v17 = "nw_path_assert_required_agents";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v17 = "nw_path_assert_required_agents";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_21:
  if (v5) {
    free(v5);
  }
LABEL_4:
}

void sub_183215A98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

BOOL nw_path_is_flow_divert(void *a1)
{
  id v1 = a1;
  if (v1)
  {
    if (v1[88]) {
      BOOL v2 = 1;
    }
    else {
      BOOL v2 = v1[66] == 4;
    }
  }
  else
  {
    BOOL v2 = 0;
  }

  return v2;
}

void ___ZL20nw_flow_disconnectedP11nw_protocolS0__block_invoke(uint64_t a1)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  id v1 = *(void **)(a1 + 32);
  if (v1)
  {
    id v3 = v1;
    uint64_t v4 = v3[29];

    if (v4 == 2)
    {
      uint64_t v5 = *(void *)(a1 + 40);
      if (*(void *)(a1 + 64) == v5 + 376)
      {
        char v19 = *(void **)(a1 + 32);
        uint64_t v20 = *(void **)(a1 + 48);
        nw_endpoint_flow_failed_with_error(v19, 1, v20);
      }
      else
      {
        uint64_t v6 = *(void *)(v5 + 864);
        if (v6)
        {
          if (*(unsigned char *)(a1 + 80))
          {
            BOOL node = nw_hash_table_get_node(v6, *(void *)(a1 + 56), 0);
            if (node
              && !nw_hash_table_remove_node(*(void *)(*(void *)(a1 + 40) + 864), node)
              && (nw_endpoint_handler_get_logging_disabled(*(void **)(a1 + 32)) & 1) == 0)
            {
              if (__nwlog_connection_log::onceToken != -1) {
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
              }
              nw_endpoint_t v8 = (id)gconnectionLogObj;
              if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
              {
                id_string = nw_endpoint_handler_get_id_string(*(void **)(a1 + 32));
                BOOL v10 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 32));
                nw_endpoint_t v11 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 32));
                logging_description = nw_endpoint_get_logging_description(v11);
                char v13 = nw_endpoint_handler_state_string(*(void **)(a1 + 32));
                char v14 = nw_endpoint_handler_mode_string(*(void **)(a1 + 32));
                id v15 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 32));
                uint64_t v16 = *(void *)(a1 + 72);
                *(_DWORD *)int buf = 136448002;
                __int16 v32 = "nw_flow_disconnected_block_invoke";
                __int16 v33 = 2082;
                __int16 v34 = (void *)id_string;
                __int16 v35 = 2082;
                uint64_t v36 = v10;
                __int16 v37 = 2082;
                uint64_t v38 = logging_description;
                __int16 v39 = 2082;
                unsigned int v40 = v13;
                __int16 v41 = 2082;
                uint64_t v42 = v14;
                __int16 v43 = 2114;
                id v44 = v15;
                __int16 v45 = 2048;
                uint64_t v46 = v16;
                _os_log_impl(&dword_1830D4000, v8, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Failed to remove protocol %p from multiplexed table", buf, 0x52u);
              }
            }
          }
        }
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v17 = (id)gLogObj;
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        if (v4 > 5) {
          __int16 v18 = "unknown-mode";
        }
        else {
          __int16 v18 = off_1E523FB08[v4];
        }
        *(_DWORD *)int buf = 136446722;
        __int16 v32 = "nw_flow_disconnected_block_invoke";
        __int16 v33 = 2082;
        __int16 v34 = (void *)v18;
        __int16 v35 = 2082;
        uint64_t v36 = "flow";
        _os_log_impl(&dword_1830D4000, v17, OS_LOG_TYPE_DEFAULT, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
      }
    }
    return;
  }
  os_log_type_t v21 = __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  __int16 v32 = "nw_flow_disconnected_block_invoke";
  __int16 v22 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v29 = 0;
  if (__nwlog_fault(v22, &type, &v29))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v23 = __nwlog_obj();
      os_log_type_t v24 = type;
      if (os_log_type_enabled(v23, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v32 = "nw_flow_disconnected_block_invoke";
        _os_log_impl(&dword_1830D4000, v23, v24, "%{public}s called with null handler", buf, 0xCu);
      }
    }
    else if (v29)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v23 = __nwlog_obj();
      os_log_type_t v26 = type;
      BOOL v27 = os_log_type_enabled(v23, type);
      if (backtrace_string)
      {
        if (v27)
        {
          *(_DWORD *)int buf = 136446466;
          __int16 v32 = "nw_flow_disconnected_block_invoke";
          __int16 v33 = 2082;
          __int16 v34 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v23, v26, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_40;
      }
      if (v27)
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v32 = "nw_flow_disconnected_block_invoke";
        _os_log_impl(&dword_1830D4000, v23, v26, "%{public}s called with null handler, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v23 = __nwlog_obj();
      os_log_type_t v28 = type;
      if (os_log_type_enabled(v23, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v32 = "nw_flow_disconnected_block_invoke";
        _os_log_impl(&dword_1830D4000, v23, v28, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_40:
  if (v22) {
    free(v22);
  }
}

void sub_183216028(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_context_set_privacy_level(void *a1, int a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  uint64_t v4 = v3;
  if (v3)
  {
    nw_context_set_privacy_level_internal(v3, a2, a2 == 4);
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  uint64_t v16 = "nw_context_set_privacy_level";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v16 = "nw_context_set_privacy_level";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null context", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          uint64_t v16 = "nw_context_set_privacy_level";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null context, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v16 = "nw_context_set_privacy_level";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null context, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v16 = "nw_context_set_privacy_level";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null context, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
LABEL_3:
}

void sub_183216790(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_context_set_privacy_level_internal(void *a1, int a2, char a3)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a1;
  id v6 = v5;
  if (v5)
  {
    if ((v5[136] & 0x48) == 0x40 && !dispatch_workloop_is_current())
    {
      v16[0] = MEMORY[0x1E4F143A8];
      v16[1] = 3221225472;
      v16[2] = __nw_context_set_privacy_level_internal_block_invoke;
      v16[3] = &unk_1E523AA18;
      id v17 = v6;
      int v18 = a2;
      char v19 = a3;
      nw_queue_context_async(v17, v16);
    }
    else
    {
      *((_DWORD *)v6 + 31) = a2;
      *((unsigned char *)v6 + 137) = *((unsigned char *)v6 + 137) & 0xFE | a3;
      uint64_t v7 = *((void *)v6 + 5);
      if (v7)
      {
        *(_DWORD *)(v7 + 124) = a2;
        *(unsigned char *)(*((void *)v6 + 5) + 137) = *(unsigned char *)(*((void *)v6 + 5) + 137) & 0xFE | a3;
      }
    }
    goto LABEL_7;
  }
  os_log_type_t v8 = __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  os_log_type_t v23 = "nw_context_set_privacy_level_internal";
  os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v20 = 0;
  if (__nwlog_fault(v9, &type, &v20))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v23 = "nw_context_set_privacy_level_internal";
        _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null context", buf, 0xCu);
      }
    }
    else if (v20)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v13 = type;
      BOOL v14 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)int buf = 136446466;
          os_log_type_t v23 = "nw_context_set_privacy_level_internal";
          __int16 v24 = 2082;
          uint64_t v25 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null context, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_24;
      }
      if (v14)
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v23 = "nw_context_set_privacy_level_internal";
        _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null context, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v23 = "nw_context_set_privacy_level_internal";
        _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null context, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_24:
  if (v9) {
    free(v9);
  }
LABEL_7:
}

void sub_183216AF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

void nw_context_set_isolate_protocol_cache(void *a1, int a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  uint64_t v4 = v3;
  if (!v3)
  {
    os_log_type_t v9 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    char v20 = "nw_context_set_isolate_protocol_cache";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v17 = 0;
    if (__nwlog_fault(v10, &type, &v17))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v11 = __nwlog_obj();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)int buf = 136446210;
          char v20 = "nw_context_set_isolate_protocol_cache";
          _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s called with null context", buf, 0xCu);
        }
      }
      else if (v17)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v11 = __nwlog_obj();
        os_log_type_t v14 = type;
        BOOL v15 = os_log_type_enabled(v11, type);
        if (backtrace_string)
        {
          if (v15)
          {
            *(_DWORD *)int buf = 136446466;
            char v20 = "nw_context_set_isolate_protocol_cache";
            __int16 v21 = 2082;
            __int16 v22 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v11, v14, "%{public}s called with null context, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_26;
        }
        if (v15)
        {
          *(_DWORD *)int buf = 136446210;
          char v20 = "nw_context_set_isolate_protocol_cache";
          _os_log_impl(&dword_1830D4000, v11, v14, "%{public}s called with null context, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        os_log_type_t v11 = __nwlog_obj();
        os_log_type_t v16 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)int buf = 136446210;
          char v20 = "nw_context_set_isolate_protocol_cache";
          _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s called with null context, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_26:
    if (v10) {
      free(v10);
    }
    goto LABEL_9;
  }
  char v5 = v3[136];
  if ((v5 & 0x40) == 0)
  {
LABEL_5:
    if (a2) {
      char v8 = 2;
    }
    else {
      char v8 = 0;
    }
    v4[136] = v5 & 0xFD | v8;
LABEL_9:

    return;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v6 = (id)gLogObj;
  os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
  *(_DWORD *)int buf = 136446210;
  char v20 = "nw_context_set_isolate_protocol_cache";
  uint64_t v7 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v7))
  {
    free(v7);
    char v5 = v4[136];
    goto LABEL_5;
  }
  __break(1u);
}

uint64_t nw_queue_context_target_dispatch_queue(void *a1, void *a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  uint64_t v4 = a2;
  char v5 = v4;
  if (v3)
  {
    if (v4)
    {
      BOOL v6 = nw_context_copy_workloop(v3);
      dispatch_set_target_queue(v5, (dispatch_queue_t)v6);

      uint64_t v7 = 1;
      goto LABEL_4;
    }
    os_log_type_t v13 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v25 = "nw_queue_context_target_dispatch_queue";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (__nwlog_fault(v10, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v11 = __nwlog_obj();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)int buf = 136446210;
          uint64_t v25 = "nw_queue_context_target_dispatch_queue";
          _os_log_impl(&dword_1830D4000, v11, v14, "%{public}s called with null queue", buf, 0xCu);
        }
LABEL_36:

        goto LABEL_37;
      }
      if (!v22)
      {
        os_log_type_t v11 = __nwlog_obj();
        os_log_type_t v21 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)int buf = 136446210;
          uint64_t v25 = "nw_queue_context_target_dispatch_queue";
          _os_log_impl(&dword_1830D4000, v11, v21, "%{public}s called with null queue, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v11 = __nwlog_obj();
      os_log_type_t v18 = type;
      BOOL v19 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)int buf = 136446210;
          uint64_t v25 = "nw_queue_context_target_dispatch_queue";
          _os_log_impl(&dword_1830D4000, v11, v18, "%{public}s called with null queue, no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v19)
      {
        *(_DWORD *)int buf = 136446466;
        uint64_t v25 = "nw_queue_context_target_dispatch_queue";
        __int16 v26 = 2082;
        BOOL v27 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v11, v18, "%{public}s called with null queue, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_24;
    }
  }
  else
  {
    os_log_type_t v9 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v25 = "nw_queue_context_target_dispatch_queue";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (__nwlog_fault(v10, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v11 = __nwlog_obj();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)int buf = 136446210;
          uint64_t v25 = "nw_queue_context_target_dispatch_queue";
          _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s called with null context", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (!v22)
      {
        os_log_type_t v11 = __nwlog_obj();
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)int buf = 136446210;
          uint64_t v25 = "nw_queue_context_target_dispatch_queue";
          _os_log_impl(&dword_1830D4000, v11, v20, "%{public}s called with null context, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v11 = __nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)int buf = 136446210;
          uint64_t v25 = "nw_queue_context_target_dispatch_queue";
          _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s called with null context, no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v17)
      {
        *(_DWORD *)int buf = 136446466;
        uint64_t v25 = "nw_queue_context_target_dispatch_queue";
        __int16 v26 = 2082;
        BOOL v27 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s called with null context, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_24:

      free(backtrace_string);
    }
  }
LABEL_37:
  if (v10) {
    free(v10);
  }
  uint64_t v7 = 0;
LABEL_4:

  return v7;
}

void sub_183217344(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t getMainQueue()
{
  uint64_t v0 = MEMORY[0x1E4F14428];
  id v1 = MEMORY[0x1E4F14428];
  return v0;
}

uint64_t ___ZL25nw_resolver_apply_serviceP22NWConcrete_nw_resolvertbt_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a3;
  if (!nw_endpoint_get_priority(v4) && nw_endpoint_get_type(v4) == nw_endpoint_type_address)
  {
    if (*(unsigned char *)(a1 + 52))
    {
      nw_endpoint_set_priority(v4, *(unsigned __int16 *)(a1 + 48));
      nw_array_append(*(void *)(a1 + 32), v4);
    }
    else
    {
      memset(&v9, 0, 128);
      nw_endpoint_t address = nw_endpoint_get_address(v4);
      memcpy(&v9, address, address->sa_len);
      *(_WORD *)v9.sa_data = bswap32(*(unsigned __int16 *)(a1 + 50)) >> 16;
      nw_endpoint_t v6 = nw_endpoint_create_address(&v9);
      nw_endpoint_set_priority(v6, *(unsigned __int16 *)(a1 + 48));
      nw_endpoint_set_parent_endpoint(v6, *(void **)(*(void *)(a1 + 40) + 24), 0);
      id v7 = nw_endpoint_copy_cname_array(v4);
      if (v7) {
        nw_endpoint_set_cname_array(v6, v7);
      }
      nw_array_append(*(void *)(a1 + 32), v6);
    }
  }

  return 1;
}

void sub_183217558(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL34nw_resolver_insert_endpoint_lockedP22NWConcrete_nw_resolverPU25objcproto14OS_nw_endpoint8NSObjectU13block_pointerFbS3_S3_E_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  if (!(*(unsigned int (**)(void))(*(void *)(a1 + 56) + 16))())
  {
    if (*(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24))
    {
LABEL_45:
      nw_array_append(*(void *)(a1 + 48), v4);
      goto LABEL_46;
    }
    nw_endpoint_t v6 = *(void **)(a1 + 32);
    id v7 = (char *)*(id *)(a1 + 40);
    char v8 = v6;
    sockaddr v9 = v4;
    nw_endpoint_type_t type = nw_endpoint_get_type(v8);
    nw_endpoint_type_t v11 = nw_endpoint_get_type(v9);
    if (type == v11)
    {
      unsigned int priority = nw_endpoint_get_priority(v8);
      unsigned int v13 = nw_endpoint_get_priority(v9);
      if (nw_endpoint_get_type(*((nw_endpoint_t *)v7 + 3)) == (nw_endpoint_type_url|nw_endpoint_type_address))
      {
        if (priority && v13 && priority != v13)
        {
LABEL_22:

          if (priority >= v13) {
            goto LABEL_45;
          }
          goto LABEL_44;
        }
      }
      else if (priority != v13)
      {
        if (priority)
        {

          if (priority > (unsigned __int16)(v13 - 1)) {
            goto LABEL_45;
          }
          goto LABEL_44;
        }
        goto LABEL_36;
      }
      unsigned int priority = nw_endpoint_get_weight(v8);
      unsigned int weight = nw_endpoint_get_weight(v9);
      if (priority)
      {
        unsigned int v13 = weight;
        if (weight)
        {
          if (priority != weight) {
            goto LABEL_22;
          }
        }
      }
      if (type == nw_endpoint_type_address)
      {
        BOOL v19 = nw_endpoint_copy_interface(v8);
        os_log_type_t v20 = nw_endpoint_copy_interface(v9);
        uint64_t v21 = *((void *)v7 + 26);
        if (v21) {
          int required_interface_index = *(_DWORD *)(v21 + 8);
        }
        else {
          int required_interface_index = nw_parameters_get_required_interface_index(*((void **)v7 + 2));
        }
        int v24 = required_interface_index;
        if (v19) {
          int v24 = v19[2];
        }
        char v29 = v19;
        if (v20) {
          int required_interface_index = v20[2];
        }
        nw_endpoint_t address = (sockaddr *)nw_endpoint_get_address(v8);
        __int16 v26 = (sockaddr *)nw_endpoint_get_address(v9);
        int ignore_resolver_stats = nw_parameters_get_ignore_resolver_stats(*((void **)v7 + 2));
        LODWORD(v26) = sa_dst_compare_internal(&address->sa_len, v24, &v26->sa_len, required_interface_index, ignore_resolver_stats ^ 1u);

        if ((int)v26 >= 1)
        {

LABEL_44:
          nw_array_append(*(void *)(a1 + 48), *(void **)(a1 + 32));
          *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = 1;
          goto LABEL_45;
        }
      }
LABEL_36:

      goto LABEL_45;
    }
    if (v7)
    {
      if ((v7[346] & 0x20) != 0) {
        goto LABEL_36;
      }
      if (v7[256])
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        os_log_type_t v14 = (id)gconnectionLogObj;
        if (!os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
          goto LABEL_35;
        }
        *(_DWORD *)int buf = 136446978;
        nw_activity_report_s v31 = "nw_resolver_endpoint_should_be_before";
        __int16 v32 = 2082;
        *(void *)__int16 v33 = v7 + 256;
        *(_WORD *)&v33[8] = 1024;
        *(_DWORD *)__int16 v34 = type;
        *(_WORD *)&void v34[4] = 1024;
        nw_endpoint_type_t v35 = v11;
        BOOL v15 = "%{public}s [C%{public}s] Endpoint types do not match (%u != %u)";
        os_log_type_t v16 = v14;
        uint32_t v17 = 34;
        goto LABEL_34;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v14 = (id)gLogObj;
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        int v23 = *((_DWORD *)v7 + 85);
        *(_DWORD *)int buf = 136446978;
        nw_activity_report_s v31 = "nw_resolver_endpoint_should_be_before";
        __int16 v32 = 1024;
        *(_DWORD *)__int16 v33 = v23;
        *(_WORD *)&v33[4] = 1024;
        *(_DWORD *)&v33[6] = type;
        *(_WORD *)__int16 v34 = 1024;
        *(_DWORD *)&v34[2] = v11;
        BOOL v15 = "%{public}s [R%u] Endpoint types do not match (%u != %u)";
        os_log_type_t v16 = v14;
        uint32_t v17 = 30;
        goto LABEL_34;
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v14 = (id)gLogObj;
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136446722;
        nw_activity_report_s v31 = "nw_resolver_endpoint_should_be_before";
        __int16 v32 = 1024;
        *(_DWORD *)__int16 v33 = type;
        *(_WORD *)&v33[4] = 1024;
        *(_DWORD *)&v33[6] = v11;
        BOOL v15 = "%{public}s Endpoint types do not match (%u != %u)";
        os_log_type_t v16 = v14;
        uint32_t v17 = 24;
LABEL_34:
        _os_log_impl(&dword_1830D4000, v16, OS_LOG_TYPE_ERROR, v15, buf, v17);
      }
    }
LABEL_35:

    goto LABEL_36;
  }
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24))
  {
LABEL_46:
    uint64_t v5 = 1;
    goto LABEL_47;
  }
  uint64_t v5 = 0;
  *(unsigned char *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) = 0;
LABEL_47:

  return v5;
}

void sub_1832179FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

uint64_t nw_endpoint_get_priority(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  BOOL v2 = v1;
  if (v1)
  {
    uint64_t v3 = [v1 priority];
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  os_log_type_t v16 = "nw_endpoint_get_priority";
  nw_endpoint_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v16 = "nw_endpoint_get_priority";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null endpoint", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          os_log_type_t v16 = "nw_endpoint_get_priority";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v16 = "nw_endpoint_get_priority";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v16 = "nw_endpoint_get_priority";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

void sub_183217CE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_endpoint_get_weight(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  BOOL v2 = v1;
  if (v1)
  {
    uint64_t v3 = [v1 weight];
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  os_log_type_t v16 = "nw_endpoint_get_weight";
  nw_endpoint_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v16 = "nw_endpoint_get_weight";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null endpoint", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          os_log_type_t v16 = "nw_endpoint_get_weight";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v16 = "nw_endpoint_get_weight";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v16 = "nw_endpoint_get_weight";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

void sub_183217FA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL ___ZL26nw_resolver_insert_addressP22NWConcrete_nw_resolverPU38objcproto27OS_dnssd_getaddrinfo_result8NSObjectPK8sockaddrtPU27objcproto16OS_dispatch_dataS1__block_invoke(uint64_t a1, void *a2)
{
  uint64_t v3 = a2;
  if (nw_endpoint_address_endpoint_matches_address(v3, *(unsigned __int8 **)(a1 + 32), 0, 1)) {
    BOOL v4 = nw_endpoint_get_port(v3) == bswap32(*(unsigned __int16 *)(*(void *)(a1 + 32) + 2)) >> 16;
  }
  else {
    BOOL v4 = 0;
  }

  return v4;
}

void sub_18321802C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_endpoint_address_endpoint_matches_address(void *a1, unsigned __int8 *a2, int a3, int a4)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  id v7 = a1;
  os_log_type_t v8 = v7;
  if (!v7)
  {
    unsigned int v40 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_endpoint_address_endpoint_matches_address";
    __int16 v41 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v54 = 0;
    if (__nwlog_fault(v41, &type, &v54))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v42 = __nwlog_obj();
        os_log_type_t v43 = type;
        if (os_log_type_enabled(v42, type))
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_address_endpoint_matches_address";
          _os_log_impl(&dword_1830D4000, v42, v43, "%{public}s called with null endpoint", buf, 0xCu);
        }
        goto LABEL_85;
      }
      if (!v54)
      {
        uint64_t v42 = __nwlog_obj();
        os_log_type_t v51 = type;
        if (os_log_type_enabled(v42, type))
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_address_endpoint_matches_address";
          _os_log_impl(&dword_1830D4000, v42, v51, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_85;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v42 = __nwlog_obj();
      os_log_type_t v47 = type;
      BOOL v48 = os_log_type_enabled(v42, type);
      if (!backtrace_string)
      {
        if (v48)
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_address_endpoint_matches_address";
          _os_log_impl(&dword_1830D4000, v42, v47, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
        }
        goto LABEL_85;
      }
      if (v48)
      {
        *(_DWORD *)int buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_endpoint_address_endpoint_matches_address";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v42, v47, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_73:

      free(backtrace_string);
    }
LABEL_86:
    if (!v41) {
      goto LABEL_52;
    }
    uint64_t v38 = (char *)v41;
    goto LABEL_51;
  }
  if (!a2)
  {
    id v44 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_endpoint_address_endpoint_matches_address";
    __int16 v41 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v54 = 0;
    if (__nwlog_fault(v41, &type, &v54))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v42 = __nwlog_obj();
        os_log_type_t v45 = type;
        if (os_log_type_enabled(v42, type))
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_address_endpoint_matches_address";
          _os_log_impl(&dword_1830D4000, v42, v45, "%{public}s called with null addr", buf, 0xCu);
        }
LABEL_85:

        goto LABEL_86;
      }
      if (!v54)
      {
        uint64_t v42 = __nwlog_obj();
        os_log_type_t v52 = type;
        if (os_log_type_enabled(v42, type))
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_address_endpoint_matches_address";
          _os_log_impl(&dword_1830D4000, v42, v52, "%{public}s called with null addr, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_85;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v42 = __nwlog_obj();
      os_log_type_t v49 = type;
      BOOL v50 = os_log_type_enabled(v42, type);
      if (!backtrace_string)
      {
        if (v50)
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_address_endpoint_matches_address";
          _os_log_impl(&dword_1830D4000, v42, v49, "%{public}s called with null addr, no backtrace", buf, 0xCu);
        }
        goto LABEL_85;
      }
      if (v50)
      {
        *(_DWORD *)int buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_endpoint_address_endpoint_matches_address";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v42, v49, "%{public}s called with null addr, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_73;
    }
    goto LABEL_86;
  }
  id v9 = v7;
  int v10 = [v9 type];

  if (v10 != 1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v16 = (id)gLogObj;
    id v17 = v9;
    int v18 = [v17 type];

    *(_DWORD *)int buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_endpoint_address_endpoint_matches_address";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = v18;
    LODWORD(v53) = 18;
    uint64_t v19 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v54 = 0;
    if (__nwlog_fault(v19, &type, &v54))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v20 = (id)gLogObj;
        os_log_type_t v21 = type;
        if (os_log_type_enabled(v20, type))
        {
          id v22 = v17;
          int v23 = objc_msgSend(v22, "type", buf, v53);

          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_endpoint_address_endpoint_matches_address";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = v23;
          _os_log_impl(&dword_1830D4000, v20, v21, "%{public}s incorrect endpoint type %u", buf, 0x12u);
        }
      }
      else if (v54)
      {
        int v24 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v20 = (id)gLogObj;
        os_log_type_t v25 = type;
        BOOL v26 = os_log_type_enabled(v20, type);
        if (v24)
        {
          if (v26)
          {
            id v27 = v17;
            int v28 = objc_msgSend(v27, "type", buf, v53);

            *(_DWORD *)int buf = 136446722;
            *(void *)&uint8_t buf[4] = "nw_endpoint_address_endpoint_matches_address";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = v28;
            *(_WORD *)&buf[18] = 2082;
            *(void *)&buf[20] = v24;
            _os_log_impl(&dword_1830D4000, v20, v25, "%{public}s incorrect endpoint type %u, dumping backtrace:%{public}s", buf, 0x1Cu);
          }

          free(v24);
          if (!v19) {
            goto LABEL_52;
          }
LABEL_50:
          uint64_t v38 = (char *)v19;
LABEL_51:
          free(v38);
          goto LABEL_52;
        }
        if (v26)
        {
          id v36 = v17;
          int v37 = objc_msgSend(v36, "type", buf, v53);

          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_endpoint_address_endpoint_matches_address";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = v37;
          _os_log_impl(&dword_1830D4000, v20, v25, "%{public}s incorrect endpoint type %u, no backtrace", buf, 0x12u);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v20 = (id)gLogObj;
        os_log_type_t v33 = type;
        if (os_log_type_enabled(v20, type))
        {
          id v34 = v17;
          int v35 = objc_msgSend(v34, "type", buf, v53);

          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_endpoint_address_endpoint_matches_address";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = v35;
          _os_log_impl(&dword_1830D4000, v20, v33, "%{public}s incorrect endpoint type %u, backtrace limit exceeded", buf, 0x12u);
        }
      }
    }
    if (!v19)
    {
LABEL_52:
      uint64_t v32 = 0;
      goto LABEL_53;
    }
    goto LABEL_50;
  }
  BOOL v11 = (char *)v9;
  os_log_type_t v12 = v11;
  if (a4)
  {
    char v13 = v11;
    os_log_type_t v14 = v13[2];

    if (v14) {
      int v15 = v14[2];
    }
    else {
      int v15 = 0;
    }
  }
  else
  {
    int v15 = 0;
  }
  if (a2[1] == 30)
  {
    unsigned int v29 = *a2;
    if (v29 == 28)
    {
      uint64_t v30 = v12 + 232;
      if (v12[233] == 2 && !*((_DWORD *)a2 + 2) && !*((_DWORD *)a2 + 3) && *((_DWORD *)a2 + 4) == -65536)
      {
        *(_WORD *)int buf = 528;
        *(_WORD *)&buf[2] = *((_WORD *)a2 + 1);
        *(_DWORD *)&uint8_t buf[4] = *((_DWORD *)a2 + 5);
        *(void *)&buf[8] = 0;
        if (*v30 != 16) {
          goto LABEL_38;
        }
        if (*(void *)v30 != *(void *)buf || *((void *)v12 + 30) != *(void *)&buf[8]) {
          goto LABEL_38;
        }
LABEL_40:
        if (v15 == a3) {
          uint64_t v32 = 1;
        }
        else {
          uint64_t v32 = a4 ^ 1u;
        }
        goto LABEL_39;
      }
      unsigned int v29 = 28;
    }
  }
  else
  {
    unsigned int v29 = *a2;
  }
  if (v12[232] == v29 && !memcmp(v12 + 232, a2, v29)) {
    goto LABEL_40;
  }
LABEL_38:
  uint64_t v32 = 0;
LABEL_39:

LABEL_53:
  return v32;
}

void sub_183218934(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sa_dst_compare_internal(unsigned __int8 *a1, int a2, unsigned __int8 *a3, int a4, int a5)
{
  uint64_t v140 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (a3)
    {
      LODWORD(v6) = a5;
      pthread_once(&nw_settings_setup_atfork::pOnce, (void (*)(void))nw_settings_setup_atfork_inner);
      pthread_once(&cache_init, (void (*)(void))sa_dst_compare_init_once);
      int v10 = a1[1];
      BOOL v11 = v10 == 2 || v10 == 30;
      if (!v11)
      {
        int v18 = a3[1];
LABEL_20:
        int v20 = v18 == 2 || v18 == 30;
        uint64_t v21 = (v20 << 31 >> 31);
LABEL_392:
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v104 = gLogObj;
        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
        {
          int v105 = *a1;
          int v106 = *a3;
          if ((int)v21 >= 0) {
            int v107 = 62;
          }
          else {
            int v107 = 60;
          }
          if (!v21) {
            int v107 = 61;
          }
          *(_DWORD *)os_log_type_t v128 = 136448003;
          *(void *)&v128[4] = "sa_dst_compare_internal";
          *(_WORD *)&v128[12] = 1040;
          *(_DWORD *)&v128[14] = v105;
          *(_WORD *)&v128[18] = 2101;
          *(void *)&v128[20] = a1;
          *(_WORD *)&v128[28] = 1024;
          *(_DWORD *)&v128[30] = a2;
          *(_WORD *)&v128[34] = 1024;
          *(_DWORD *)&v128[36] = v107;
          *(_WORD *)&v128[40] = 1040;
          *(_DWORD *)&v128[42] = v106;
          *(_WORD *)&v128[46] = 2101;
          *(void *)&v128[48] = a3;
          *(_WORD *)&v128[56] = 1024;
          *(_DWORD *)&v128[58] = a4;
          _os_log_impl(&dword_1830D4000, v104, OS_LOG_TYPE_DEBUG, "%{public}s %{sensitive,network:sockaddr}.*P@%u %c %{sensitive,network:sockaddr}.*P@%u", v128, 0x3Eu);
        }
        return v21;
      }
      int v18 = a3[1];
      if (v18 != 2 && v18 != 30)
      {
        uint64_t v21 = 1;
        if (v10 == 2 || v10 == 30) {
          goto LABEL_392;
        }
        goto LABEL_20;
      }
      long long v129 = 0u;
      long long v130 = 0u;
      memset(v128, 0, sizeof(v128));
      long long v126 = 0u;
      long long v127 = 0u;
      memset(type, 0, sizeof(type));
      int v12 = sa_dst_lookup(a1, a2, v128);
      BOOL v13 = sa_dst_lookup(a3, a4, type);
      if (v12)
      {
        int v14 = v13;
        if (v13)
        {
          if (v6)
          {
            if (networkd_settings_get_BOOL((const char *)nw_setting_compare_bypass_stats))
            {
LABEL_14:
              LODWORD(v6) = 0;
              goto LABEL_15;
            }
            char v28 = BYTE12(v130);
            char v29 = BYTE12(v127);
            if (BYTE12(v130))
            {
              if ((BYTE12(v127) & 1) == 0)
              {
                id v16 = __nwlog_obj();
                if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)int buf = 136446210;
                  char v132 = "sa_dst_compare_statistics";
                  id v17 = "%{public}s prefer 1, dst 2 has no route";
                  goto LABEL_389;
                }
LABEL_391:
                uint64_t v21 = 1;
                goto LABEL_392;
              }
              int v59 = (BYTE12(v130) >> 2) & 1;
              int v60 = (BYTE12(v127) >> 2) & 1;
              if (v59 != v60)
              {
                if (v60)
                {
                  id v16 = __nwlog_obj();
                  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
                  {
                    *(_DWORD *)int buf = 136446210;
                    char v132 = "sa_dst_compare_statistics";
                    id v17 = "%{public}s prefer dst 1, dst 2 is p2p, dst 1 is not";
                    goto LABEL_389;
                  }
                  goto LABEL_391;
                }
                if (v59)
                {
                  int v24 = __nwlog_obj();
                  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
                  {
                    *(_DWORD *)int buf = 136446210;
                    char v132 = "sa_dst_compare_statistics";
                    os_log_type_t v25 = "%{public}s prefer dst 2, dst 1 is p2p, dst 2 is not";
                    goto LABEL_357;
                  }
                  goto LABEL_359;
                }
              }
              if (nw_interface_get_loopback_index::onceToken != -1) {
                dispatch_once(&nw_interface_get_loopback_index::onceToken, &__block_literal_global_89857);
              }
              if (HIDWORD(v129) == nw_interface_get_loopback_index::index)
              {
                BOOL v61 = 1;
              }
              else
              {
                BOOL v61 = 0;
                if (v128[1] == 30 && v128[8] == 254) {
                  BOOL v61 = (v128[9] & 0xC0) == 0x80 && *(_DWORD *)&v128[24] == nw_interface_get_loopback_index::index;
                }
              }
              if (HIDWORD(v126) == nw_interface_get_loopback_index::index)
              {
                BOOL v97 = 1;
              }
              else
              {
                BOOL v97 = 0;
                if (type[1] == 30 && type[8] == 254) {
                  BOOL v97 = (type[9] & 0xC0) == 0x80 && *(_DWORD *)&type[24] == nw_interface_get_loopback_index::index;
                }
                if (v61 && !v97)
                {
                  id v16 = __nwlog_obj();
                  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
                  {
                    *(_DWORD *)int buf = 136446210;
                    char v132 = "sa_dst_compare_statistics";
                    id v17 = "%{public}s prefer 1, dst 1 is loopback, dst 2 is not";
                    goto LABEL_389;
                  }
                  goto LABEL_391;
                }
              }
              if (v97 && !v61)
              {
                int v24 = __nwlog_obj();
                if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)int buf = 136446210;
                  char v132 = "sa_dst_compare_statistics";
                  os_log_type_t v25 = "%{public}s prefer 2, dst 2 is loopback, dst 1 is not";
                  goto LABEL_357;
                }
                goto LABEL_359;
              }
              if ((v28 & 2) != 0)
              {
                if ((v29 & 2) == 0)
                {
                  id v16 = __nwlog_obj();
                  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
                  {
                    *(_DWORD *)int buf = 136446210;
                    char v132 = "sa_dst_compare_statistics";
                    id v17 = "%{public}s prefer 1, dst 1 is local, dst 2 is not";
                    goto LABEL_389;
                  }
                  goto LABEL_391;
                }
                if (DWORD2(v129) == DWORD2(v126)) {
                  goto LABEL_14;
                }
              }
              else if ((v29 & 2) != 0)
              {
                int v24 = __nwlog_obj();
                if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)int buf = 136446210;
                  char v132 = "sa_dst_compare_statistics";
                  os_log_type_t v25 = "%{public}s prefer 2, dst 2 is local, dst 1 is not";
                  goto LABEL_357;
                }
                goto LABEL_359;
              }
            }
            else if (BYTE12(v127))
            {
              int v24 = __nwlog_obj();
              if (!os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG)) {
                goto LABEL_359;
              }
              *(_DWORD *)int buf = 136446210;
              char v132 = "sa_dst_compare_statistics";
              os_log_type_t v25 = "%{public}s prefer 2, dst 1 has no route";
              goto LABEL_357;
            }
            LODWORD(v6) = v130;
            unsigned int v30 = v127;
            if (v130)
            {
              if (!v127)
              {
                if (DWORD2(v127)) {
                  goto LABEL_14;
                }
                unint64_t v6 = DWORD1(v127);
                if (!DWORD1(v127)) {
                  goto LABEL_15;
                }
                if (networkd_settings_get_int64_with_default((const char *)nw_setting_compare_failure_threshold, 10) >= v6) {
                  goto LABEL_14;
                }
                uint64_t v79 = __nwlog_obj();
                if (!os_log_type_enabled(v79, OS_LOG_TYPE_DEBUG)) {
                  goto LABEL_391;
                }
                *(_DWORD *)int buf = 136446466;
                char v132 = "sa_dst_compare_statistics";
                __int16 v133 = 1024;
                *(_DWORD *)uint64_t v134 = v6;
                id v17 = "%{public}s prefer 1, dst 2 has no successful connections and %u attempts";
                __int16 v39 = v79;
                uint32_t v40 = 18;
LABEL_390:
                _os_log_impl(&dword_1830D4000, v39, OS_LOG_TYPE_DEBUG, v17, buf, v40);
                goto LABEL_391;
              }
              if (v130 < v127)
              {
                int64_t int64_with_default = networkd_settings_get_int64_with_default((const char *)nw_setting_tcpconn_rtt_leeway, 3200);
                if (int64_with_default <= 31999) {
                  unsigned int v32 = int64_with_default;
                }
                else {
                  unsigned int v32 = 32000;
                }
                unsigned int v122 = v30;
                if (int64_with_default >= 0) {
                  uint64_t v33 = v32;
                }
                else {
                  uint64_t v33 = 3200;
                }
                int64_t v34 = networkd_settings_get_int64_with_default((const char *)nw_setting_tcpconn_rtt_leeway_small, 320);
                if (v34 >= v33) {
                  int v35 = v33;
                }
                else {
                  int v35 = v34;
                }
                if (v34 >= 0) {
                  int v36 = v35;
                }
                else {
                  int v36 = 320;
                }
                if ((int)v33 + (int)v6 < v122)
                {
                  unsigned int v37 = v36;
                  uint64_t v38 = __nwlog_obj();
                  if (!os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG)) {
                    goto LABEL_391;
                  }
                  *(_DWORD *)int buf = 136447234;
                  char v132 = "sa_dst_compare_statistics";
                  __int16 v133 = 2048;
                  *(double *)uint64_t v134 = (double)v6 * 0.03125;
                  *(_WORD *)&v134[8] = 2048;
                  double v135 = (double)v122 * 0.03125;
                  __int16 v136 = 1024;
                  unsigned int v137 = v33 >> 5;
                  __int16 v138 = 1024;
                  unsigned int v139 = v37 >> 5;
                  id v17 = "%{public}s prefering 1, dst1 min rtt %f < dst2 min rtt %f, leeway %u small leeway %u";
                  __int16 v39 = v38;
                  uint32_t v40 = 44;
                  goto LABEL_390;
                }
                unsigned int v117 = v36;
                unsigned int v119 = v36 + v6;
                log = __nwlog_obj();
                BOOL v88 = os_log_type_enabled(log, OS_LOG_TYPE_DEBUG);
                if (v119 < v122)
                {
                  if (v88)
                  {
                    *(_DWORD *)int buf = 136447234;
                    char v132 = "sa_dst_compare_statistics";
                    __int16 v133 = 2048;
                    *(double *)uint64_t v134 = (double)v6 * 0.03125;
                    *(_WORD *)&v134[8] = 2048;
                    double v135 = (double)v122 * 0.03125;
                    __int16 v136 = 1024;
                    unsigned int v137 = v33 >> 5;
                    __int16 v138 = 1024;
                    unsigned int v139 = v117 >> 5;
                    _os_log_impl(&dword_1830D4000, log, OS_LOG_TYPE_DEBUG, "%{public}s prefering 1 slightly, dst1 min rtt %f < dst2 min rtt %f, leeway %u small leeway %u", buf, 0x2Cu);
                  }
                  char v15 = 0;
                  LODWORD(v6) = 1;
                  goto LABEL_16;
                }
                if (!v88) {
                  goto LABEL_14;
                }
                *(_DWORD *)int buf = 136447234;
                char v132 = "sa_dst_compare_statistics";
                __int16 v133 = 2048;
                *(double *)uint64_t v134 = (double)v6 * 0.03125;
                *(_WORD *)&v134[8] = 2048;
                double v135 = (double)v122 * 0.03125;
                __int16 v136 = 1024;
                unsigned int v137 = v33 >> 5;
                __int16 v138 = 1024;
                unsigned int v139 = v117 >> 5;
                os_log_type_t v91 = "%{public}s not prefering 1, dst1 min rtt %f < dst2 min rtt %f, leeway %u small leeway %u";
                BOOL v92 = log;
                goto LABEL_381;
              }
              if (v130 <= v127)
              {
                os_log_type_t v89 = __nwlog_obj();
                if (!os_log_type_enabled(v89, OS_LOG_TYPE_DEBUG)) {
                  goto LABEL_14;
                }
                *(_DWORD *)int buf = 136446466;
                char v132 = "sa_dst_compare_statistics";
                __int16 v133 = 2048;
                *(double *)uint64_t v134 = (double)v6 * 0.03125;
                os_log_type_t v91 = "%{public}s no preference, equal min rtt %f";
                BOOL v92 = v89;
                uint32_t v93 = 22;
                goto LABEL_382;
              }
              int64_t v80 = networkd_settings_get_int64_with_default((const char *)nw_setting_tcpconn_rtt_leeway, 3200);
              if (v80 <= 31999) {
                LODWORD(v81) = v80;
              }
              else {
                LODWORD(v81) = 32000;
              }
              if (v80 >= 0) {
                uint64_t v81 = v81;
              }
              else {
                uint64_t v81 = 3200;
              }
              int64_t v123 = v81;
              int64_t v82 = networkd_settings_get_int64_with_default((const char *)nw_setting_tcpconn_rtt_leeway_small, 320);
              if (v82 >= v123) {
                int v83 = v123;
              }
              else {
                int v83 = v82;
              }
              if (v82 >= 0) {
                int v84 = v83;
              }
              else {
                int v84 = 320;
              }
              if (v6 <= v123 + v30)
              {
                unsigned int v120 = v84;
                unsigned int v121 = v84 + v30;
                os_log_type_t v118 = __nwlog_obj();
                BOOL v98 = os_log_type_enabled(v118, OS_LOG_TYPE_DEBUG);
                if (v6 > v121)
                {
                  if (v98)
                  {
                    *(_DWORD *)int buf = 136447234;
                    char v132 = "sa_dst_compare_statistics";
                    __int16 v133 = 2048;
                    *(double *)uint64_t v134 = (double)v6 * 0.03125;
                    *(_WORD *)&v134[8] = 2048;
                    double v135 = (double)v30 * 0.03125;
                    __int16 v136 = 1024;
                    unsigned int v137 = v123 >> 5;
                    __int16 v138 = 1024;
                    unsigned int v139 = v120 >> 5;
                    _os_log_impl(&dword_1830D4000, v118, OS_LOG_TYPE_DEBUG, "%{public}s prefering 2 slightly, dst1 min rtt %f > dst2 min rtt %f, leeway %u small leeway %u", buf, 0x2Cu);
                  }
                  LODWORD(v6) = 0;
                  char v15 = 1;
                  goto LABEL_16;
                }
                if (!v98) {
                  goto LABEL_14;
                }
                *(_DWORD *)int buf = 136447234;
                char v132 = "sa_dst_compare_statistics";
                __int16 v133 = 2048;
                *(double *)uint64_t v134 = (double)v6 * 0.03125;
                *(_WORD *)&v134[8] = 2048;
                double v135 = (double)v30 * 0.03125;
                __int16 v136 = 1024;
                unsigned int v137 = v123 >> 5;
                __int16 v138 = 1024;
                unsigned int v139 = v120 >> 5;
                os_log_type_t v91 = "%{public}s not prefering 2, dst1 min rtt %f > dst2 min rtt %f, leeway %u small leeway %u";
                BOOL v92 = v118;
LABEL_381:
                uint32_t v93 = 44;
LABEL_382:
                _os_log_impl(&dword_1830D4000, v92, OS_LOG_TYPE_DEBUG, v91, buf, v93);
                goto LABEL_14;
              }
              unsigned int v85 = v84;
              int v86 = __nwlog_obj();
              if (!os_log_type_enabled(v86, OS_LOG_TYPE_DEBUG)) {
                goto LABEL_359;
              }
              *(_DWORD *)int buf = 136447234;
              char v132 = "sa_dst_compare_statistics";
              __int16 v133 = 2048;
              *(double *)uint64_t v134 = (double)v6 * 0.03125;
              *(_WORD *)&v134[8] = 2048;
              double v135 = (double)v30 * 0.03125;
              __int16 v136 = 1024;
              unsigned int v137 = v123 >> 5;
              __int16 v138 = 1024;
              unsigned int v139 = v85 >> 5;
              os_log_type_t v25 = "%{public}s prefering 2, dst1 min rtt %f > dst2 min rtt %f, leeway %u small leeway %u";
              os_log_type_t v72 = v86;
              uint32_t v73 = 44;
LABEL_358:
              _os_log_impl(&dword_1830D4000, v72, OS_LOG_TYPE_DEBUG, v25, buf, v73);
              goto LABEL_359;
            }
            if (!v127)
            {
              char v15 = v130;
              goto LABEL_16;
            }
            char v15 = v130;
            if (DWORD2(v130))
            {
LABEL_16:
              if (v128[37])
              {
                if (!type[37])
                {
                  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                  networkd_settings_init();
                  id v16 = gLogObj;
                  if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
                  {
                    *(_DWORD *)int buf = 136446210;
                    char v132 = "sa_dst_compare_rfc6724";
                    id v17 = "%{public}s Rule 1, prefer d1, d2 is not routable";
LABEL_389:
                    __int16 v39 = v16;
                    uint32_t v40 = 12;
                    goto LABEL_390;
                  }
                  goto LABEL_391;
                }
LABEL_39:
                if (v128[1] == 2)
                {
                  unsigned int v41 = bswap32(*(unsigned int *)&v128[4]);
                  BOOL v27 = (v41 & 0xFFFF0000) == 0xA9FE0000 || HIBYTE(v41) == 127;
                  unsigned int v26 = 14;
                }
                else
                {
                  if (v128[1] != 30)
                  {
                    unsigned int v26 = 0;
                    goto LABEL_75;
                  }
                  if (v128[8] == 255)
                  {
                    unsigned int v66 = (v128[9] & 0xF) - 1;
                    if (v66 >= 5) {
                      unsigned int v26 = 14;
                    }
                    else {
                      unsigned int v26 = dword_183E22628[v66];
                    }
                    goto LABEL_75;
                  }
                  if (v128[8] == 254)
                  {
                    if (v128[9] <= 0xBFu) {
                      unsigned int v26 = 14;
                    }
                    else {
                      unsigned int v26 = 5;
                    }
                    BOOL v27 = (v128[9] & 0xC0) == 128;
                  }
                  else
                  {
                    unsigned int v26 = 14;
                    if (*(void *)&v128[8] | *(void *)&v128[15]) {
                      goto LABEL_75;
                    }
                    BOOL v27 = v128[23] == 1;
                  }
                }
                if (v27) {
                  unsigned int v26 = 2;
                }
LABEL_75:
                if (v128[37] == 2)
                {
                  unsigned int v44 = bswap32(*(unsigned int *)&v128[40]);
                  BOOL v43 = (v44 & 0xFFFF0000) == 0xA9FE0000 || HIBYTE(v44) == 127;
                  unsigned int v42 = 14;
                }
                else
                {
                  if (v128[37] != 30)
                  {
                    unsigned int v42 = 0;
                    goto LABEL_91;
                  }
                  if (v128[44] == 255)
                  {
                    unsigned int v67 = (v128[45] & 0xF) - 1;
                    if (v67 >= 5) {
                      unsigned int v42 = 14;
                    }
                    else {
                      unsigned int v42 = dword_183E22628[v67];
                    }
                    goto LABEL_91;
                  }
                  if (v128[44] == 254)
                  {
                    if (v128[45] <= 0xBFu) {
                      unsigned int v42 = 14;
                    }
                    else {
                      unsigned int v42 = 5;
                    }
                    BOOL v43 = (v128[45] & 0xC0) == 128;
                  }
                  else
                  {
                    unsigned int v42 = 14;
                    if (*(void *)&v128[44] | *(void *)&v128[51]) {
                      goto LABEL_91;
                    }
                    BOOL v43 = v128[59] == 1;
                  }
                }
                if (v43) {
                  unsigned int v42 = 2;
                }
LABEL_91:
                if (v26 != v42) {
                  goto LABEL_128;
                }
                if (type[1] == 2)
                {
                  unsigned int v47 = bswap32(*(unsigned int *)&type[4]);
                  BOOL v46 = (v47 & 0xFFFF0000) == 0xA9FE0000 || HIBYTE(v47) == 127;
                  unsigned int v45 = 14;
                }
                else
                {
                  if (type[1] != 30)
                  {
                    unsigned int v45 = 0;
                    goto LABEL_111;
                  }
                  if (type[8] == 255)
                  {
                    unsigned int v74 = (type[9] & 0xF) - 1;
                    if (v74 >= 5) {
                      unsigned int v45 = 14;
                    }
                    else {
                      unsigned int v45 = dword_183E22628[v74];
                    }
                    goto LABEL_111;
                  }
                  if (type[8] == 254)
                  {
                    if (type[9] <= 0xBFu) {
                      unsigned int v45 = 14;
                    }
                    else {
                      unsigned int v45 = 5;
                    }
                    BOOL v46 = (type[9] & 0xC0) == 128;
                  }
                  else
                  {
                    unsigned int v45 = 14;
                    if (*(void *)&type[8] | *(void *)&type[15]) {
                      goto LABEL_111;
                    }
                    BOOL v46 = type[23] == 1;
                  }
                }
                if (v46) {
                  unsigned int v45 = 2;
                }
LABEL_111:
                if (type[37] == 2)
                {
                  unsigned int v50 = bswap32(*(unsigned int *)&type[40]);
                  BOOL v49 = (v50 & 0xFFFF0000) == 0xA9FE0000 || HIBYTE(v50) == 127;
                  unsigned int v48 = 14;
                }
                else
                {
                  if (type[37] != 30)
                  {
                    unsigned int v48 = 0;
                    goto LABEL_127;
                  }
                  if (type[44] == 255)
                  {
                    unsigned int v75 = (type[45] & 0xF) - 1;
                    if (v75 >= 5) {
                      unsigned int v48 = 14;
                    }
                    else {
                      unsigned int v48 = dword_183E22628[v75];
                    }
                    goto LABEL_127;
                  }
                  if (type[44] == 254)
                  {
                    if (type[45] <= 0xBFu) {
                      unsigned int v48 = 14;
                    }
                    else {
                      unsigned int v48 = 5;
                    }
                    BOOL v49 = (type[45] & 0xC0) == 128;
                  }
                  else
                  {
                    unsigned int v48 = 14;
                    if (*(void *)&type[44] | *(void *)&type[51]) {
                      goto LABEL_127;
                    }
                    BOOL v49 = type[59] == 1;
                  }
                }
                if (v49) {
                  unsigned int v48 = 2;
                }
LABEL_127:
                if (v45 == v48) {
                  goto LABEL_205;
                }
LABEL_128:
                if (v128[1] == 2)
                {
                  unsigned int v53 = bswap32(*(unsigned int *)&v128[4]);
                  BOOL v52 = (v53 & 0xFFFF0000) == 0xA9FE0000 || HIBYTE(v53) == 127;
                  unsigned int v51 = 14;
                }
                else
                {
                  if (v128[1] != 30)
                  {
                    unsigned int v51 = 0;
                    goto LABEL_144;
                  }
                  if (v128[8] == 255)
                  {
                    unsigned int v69 = (v128[9] & 0xF) - 1;
                    if (v69 >= 5) {
                      unsigned int v51 = 14;
                    }
                    else {
                      unsigned int v51 = dword_183E22628[v69];
                    }
                    goto LABEL_144;
                  }
                  if (v128[8] == 254)
                  {
                    if (v128[9] <= 0xBFu) {
                      unsigned int v51 = 14;
                    }
                    else {
                      unsigned int v51 = 5;
                    }
                    BOOL v52 = (v128[9] & 0xC0) == 128;
                  }
                  else
                  {
                    unsigned int v51 = 14;
                    if (*(void *)&v128[8] | *(void *)&v128[15]) {
                      goto LABEL_144;
                    }
                    BOOL v52 = v128[23] == 1;
                  }
                }
                if (v52) {
                  unsigned int v51 = 2;
                }
LABEL_144:
                if (v128[37] == 2)
                {
                  unsigned int v56 = bswap32(*(unsigned int *)&v128[40]);
                  BOOL v55 = (v56 & 0xFFFF0000) == 0xA9FE0000 || HIBYTE(v56) == 127;
                  unsigned int v54 = 14;
                }
                else
                {
                  if (v128[37] != 30)
                  {
                    unsigned int v54 = 0;
                    goto LABEL_160;
                  }
                  if (v128[44] == 255)
                  {
                    unsigned int v70 = (v128[45] & 0xF) - 1;
                    if (v70 >= 5) {
                      unsigned int v54 = 14;
                    }
                    else {
                      unsigned int v54 = dword_183E22628[v70];
                    }
                    goto LABEL_160;
                  }
                  if (v128[44] == 254)
                  {
                    if (v128[45] <= 0xBFu) {
                      unsigned int v54 = 14;
                    }
                    else {
                      unsigned int v54 = 5;
                    }
                    BOOL v55 = (v128[45] & 0xC0) == 128;
                  }
                  else
                  {
                    unsigned int v54 = 14;
                    if (*(void *)&v128[44] | *(void *)&v128[51]) {
                      goto LABEL_160;
                    }
                    BOOL v55 = v128[59] == 1;
                  }
                }
                if (v55) {
                  unsigned int v54 = 2;
                }
LABEL_160:
                if (v51 == v54)
                {
                  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                  networkd_settings_init();
                  id v16 = gLogObj;
                  if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
                  {
                    *(_DWORD *)int buf = 136446210;
                    char v132 = "sa_dst_compare_rfc6724";
                    id v17 = "%{public}s Rule 2, prefer d1, d2 dst scope does not match src scope";
                    goto LABEL_389;
                  }
                  goto LABEL_391;
                }
                if (type[1] == 2)
                {
                  unsigned int v62 = bswap32(*(unsigned int *)&type[4]);
                  BOOL v58 = (v62 & 0xFFFF0000) == 0xA9FE0000 || HIBYTE(v62) == 127;
                  unsigned int v57 = 14;
                }
                else
                {
                  if (type[1] != 30)
                  {
                    unsigned int v57 = 0;
                    goto LABEL_186;
                  }
                  if (type[8] == 255)
                  {
                    unsigned int v77 = (type[9] & 0xF) - 1;
                    if (v77 >= 5) {
                      unsigned int v57 = 14;
                    }
                    else {
                      unsigned int v57 = dword_183E22628[v77];
                    }
                    goto LABEL_186;
                  }
                  if (type[8] == 254)
                  {
                    if (type[9] <= 0xBFu) {
                      unsigned int v57 = 14;
                    }
                    else {
                      unsigned int v57 = 5;
                    }
                    BOOL v58 = (type[9] & 0xC0) == 128;
                  }
                  else
                  {
                    unsigned int v57 = 14;
                    if (*(void *)&type[8] | *(void *)&type[15]) {
                      goto LABEL_186;
                    }
                    BOOL v58 = type[23] == 1;
                  }
                }
                if (v58) {
                  unsigned int v57 = 2;
                }
LABEL_186:
                if (type[37] == 2)
                {
                  unsigned int v65 = bswap32(*(unsigned int *)&type[40]);
                  BOOL v64 = (v65 & 0xFFFF0000) == 0xA9FE0000 || HIBYTE(v65) == 127;
                  unsigned int v63 = 14;
                }
                else
                {
                  if (type[37] != 30)
                  {
                    unsigned int v63 = 0;
                    goto LABEL_202;
                  }
                  if (type[44] == 255)
                  {
                    unsigned int v78 = (type[45] & 0xF) - 1;
                    if (v78 >= 5) {
                      unsigned int v63 = 14;
                    }
                    else {
                      unsigned int v63 = dword_183E22628[v78];
                    }
                    goto LABEL_202;
                  }
                  if (type[44] == 254)
                  {
                    if (type[45] <= 0xBFu) {
                      unsigned int v63 = 14;
                    }
                    else {
                      unsigned int v63 = 5;
                    }
                    BOOL v64 = (type[45] & 0xC0) == 128;
                  }
                  else
                  {
                    unsigned int v63 = 14;
                    if (*(void *)&type[44] | *(void *)&type[51]) {
                      goto LABEL_202;
                    }
                    BOOL v64 = type[59] == 1;
                  }
                }
                if (v64) {
                  unsigned int v63 = 2;
                }
LABEL_202:
                if (v57 == v63)
                {
                  int v24 = __nwlog_obj();
                  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
                  {
                    *(_DWORD *)int buf = 136446210;
                    char v132 = "sa_dst_compare_rfc6724";
                    os_log_type_t v25 = "%{public}s Rule 2, prefer d2, d1 dst scope does not match src scope";
                    goto LABEL_357;
                  }
LABEL_359:
                  uint64_t v21 = 0xFFFFFFFFLL;
                  goto LABEL_392;
                }
LABEL_205:
                if ((v129 & 4) != (v126 & 4))
                {
                  if ((v129 & 4) != 0)
                  {
                    id v16 = __nwlog_obj();
                    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
                    {
                      *(_DWORD *)int buf = 136446210;
                      char v132 = "sa_dst_compare_rfc6724";
                      id v17 = "%{public}s Rule 3, prefer d2, d1 source is deprecated";
                      goto LABEL_389;
                    }
                    goto LABEL_391;
                  }
                  if ((v126 & 4) != 0)
                  {
                    int v24 = __nwlog_obj();
                    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
                    {
                      *(_DWORD *)int buf = 136446210;
                      char v132 = "sa_dst_compare_rfc6724";
                      os_log_type_t v25 = "%{public}s Rule 3, prefer d1, d2 source is deprecated";
                      goto LABEL_357;
                    }
                    goto LABEL_359;
                  }
                }
                if ((v129 & 8) != (v126 & 8))
                {
                  if ((v129 & 8) != 0)
                  {
                    id v16 = __nwlog_obj();
                    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
                    {
                      *(_DWORD *)int buf = 136446210;
                      char v132 = "sa_dst_compare_rfc6724";
                      id v17 = "%{public}s Rule 3a, prefer d2, d1 source is optimistic";
                      goto LABEL_389;
                    }
                    goto LABEL_391;
                  }
                  if ((v126 & 8) != 0)
                  {
                    int v24 = __nwlog_obj();
                    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
                    {
                      *(_DWORD *)int buf = 136446210;
                      char v132 = "sa_dst_compare_rfc6724";
                      os_log_type_t v25 = "%{public}s Rule 3a, prefer d1, d2 source is optimistic";
                      goto LABEL_357;
                    }
                    goto LABEL_359;
                  }
                }
                if (*(unsigned __int16 *)&v128[32] == WORD2(v129))
                {
                  if (*(unsigned __int16 *)&type[32] != WORD2(v126))
                  {
                    id v16 = __nwlog_obj();
                    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
                    {
                      *(_DWORD *)int buf = 136446210;
                      char v132 = "sa_dst_compare_rfc6724";
                      id v17 = "%{public}s Rule 5, prefer d1, d2 dst label does not match src label";
                      goto LABEL_389;
                    }
                    goto LABEL_391;
                  }
                }
                else if (*(unsigned __int16 *)&type[32] == WORD2(v126))
                {
                  int v24 = __nwlog_obj();
                  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
                  {
                    *(_DWORD *)int buf = 136446210;
                    char v132 = "sa_dst_compare_rfc6724";
                    os_log_type_t v25 = "%{public}s Rule 5, prefer d2, d1 dst label does not match src label";
                    goto LABEL_357;
                  }
                  goto LABEL_359;
                }
                if (*(unsigned __int16 *)&v128[34] > *(unsigned __int16 *)&type[34])
                {
                  char v68 = __nwlog_obj();
                  if (!os_log_type_enabled(v68, OS_LOG_TYPE_DEBUG)) {
                    goto LABEL_391;
                  }
                  *(_DWORD *)int buf = 136446722;
                  char v132 = "sa_dst_compare_rfc6724";
                  __int16 v133 = 1024;
                  *(_DWORD *)uint64_t v134 = *(unsigned __int16 *)&v128[34];
                  *(_WORD *)&v134[4] = 1024;
                  *(_DWORD *)&v134[6] = *(unsigned __int16 *)&type[34];
                  id v17 = "%{public}s Rule 6, prefer d1, d1 precedence %d > d2 precedence %d";
                  goto LABEL_233;
                }
                if (*(unsigned __int16 *)&type[34] > *(unsigned __int16 *)&v128[34])
                {
                  uint64_t v76 = __nwlog_obj();
                  if (!os_log_type_enabled(v76, OS_LOG_TYPE_DEBUG)) {
                    goto LABEL_359;
                  }
                  *(_DWORD *)int buf = 136446722;
                  char v132 = "sa_dst_compare_rfc6724";
                  __int16 v133 = 1024;
                  *(_DWORD *)uint64_t v134 = *(unsigned __int16 *)&type[34];
                  *(_WORD *)&v134[4] = 1024;
                  *(_DWORD *)&v134[6] = *(unsigned __int16 *)&v128[34];
                  os_log_type_t v25 = "%{public}s Rule 6, prefer d2, d2 precedence %d > d1 precedence %d";
LABEL_273:
                  os_log_type_t v72 = v76;
                  uint32_t v73 = 24;
                  goto LABEL_358;
                }
                if (v128[37] == 30)
                {
                  if (*(unsigned __int16 *)&v128[44] == 544)
                  {
                    BOOL v87 = 0;
LABEL_324:
                    if (type[37] == 30)
                    {
                      if (*(unsigned __int16 *)&type[44] == 544)
                      {
                        BOOL v94 = 0;
                        goto LABEL_385;
                      }
                      if (*(unsigned __int16 *)&type[44] == 288)
                      {
                        BOOL v94 = *(_WORD *)&type[46] != 0;
LABEL_385:
                        if (v87 && !v94)
                        {
                          id v16 = __nwlog_obj();
                          if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
                          {
                            *(_DWORD *)int buf = 136446210;
                            char v132 = "sa_dst_compare_rfc6724";
                            id v17 = "%{public}s Rule 7, prefer d1, d2 src is not native";
                            goto LABEL_389;
                          }
                          goto LABEL_391;
                        }
                        goto LABEL_329;
                      }
                    }
                    BOOL v94 = 1;
LABEL_329:
                    if (v94 && !v87)
                    {
                      int v24 = __nwlog_obj();
                      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
                      {
                        *(_DWORD *)int buf = 136446210;
                        char v132 = "sa_dst_compare_rfc6724";
                        os_log_type_t v25 = "%{public}s Rule 7, prefer d2, d1 src is not native";
                        goto LABEL_357;
                      }
                      goto LABEL_359;
                    }
                    unsigned int v124 = rfc6724_scope((uint64_t)v128);
                    unsigned int v95 = rfc6724_scope((uint64_t)type);
                    if (v124 < v95)
                    {
                      unsigned int v96 = v95;
                      char v68 = __nwlog_obj();
                      if (!os_log_type_enabled(v68, OS_LOG_TYPE_DEBUG)) {
                        goto LABEL_391;
                      }
                      *(_DWORD *)int buf = 136446722;
                      char v132 = "sa_dst_compare_rfc6724";
                      __int16 v133 = 1024;
                      *(_DWORD *)uint64_t v134 = v124;
                      *(_WORD *)&v134[4] = 1024;
                      *(_DWORD *)&v134[6] = v96;
                      id v17 = "%{public}s Rule 8, prefer d1, d1 scope %d < d2 scope %d";
LABEL_233:
                      __int16 v39 = v68;
                      uint32_t v40 = 24;
                      goto LABEL_390;
                    }
                    if (v95 >= v124)
                    {
                      if (v6) {
                        uint64_t v113 = 1;
                      }
                      else {
                        uint64_t v113 = 0xFFFFFFFFLL;
                      }
                      if ((v6 | v15)) {
                        goto LABEL_414;
                      }
                      int v114 = common_prefix_length((const sockaddr_in_4_6 *)v128, (const sockaddr_in_4_6 *)&v128[36]);
                      int v115 = common_prefix_length((const sockaddr_in_4_6 *)type, (const sockaddr_in_4_6 *)&type[36]);
                      if (v114 && v115)
                      {
                        if (v114 > v115)
                        {
                          id v16 = __nwlog_obj();
                          if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG)) {
                            goto LABEL_391;
                          }
                          *(_DWORD *)int buf = 136446210;
                          char v132 = "sa_dst_compare_rfc6724";
                          id v17 = "%{public}s Rule 9, prefer d1, d1 shares more common prefix";
                          goto LABEL_389;
                        }
                        if (v115 > v114)
                        {
                          int v24 = __nwlog_obj();
                          if (!os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG)) {
                            goto LABEL_359;
                          }
                          *(_DWORD *)int buf = 136446210;
                          char v132 = "sa_dst_compare_rfc6724";
                          os_log_type_t v25 = "%{public}s Rule 9, prefer d2, d2 shares more common prefix";
                          goto LABEL_357;
                        }
                      }
                      if (v12 == 1 && v14 == 2)
                      {
                        id v16 = __nwlog_obj();
                        if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG)) {
                          goto LABEL_391;
                        }
                        *(_DWORD *)int buf = 136446210;
                        char v132 = "sa_dst_compare_internal_wrapper";
                        id v17 = "%{public}s prefer d1, known while d2 not known";
                        goto LABEL_389;
                      }
                      uint64_t v113 = 0;
                      if (v14 != 1)
                      {
LABEL_414:
                        uint64_t v21 = v113;
                        goto LABEL_392;
                      }
                      BOOL v11 = v12 == 2;
                      uint64_t v21 = 0;
                      if (!v11) {
                        goto LABEL_392;
                      }
                      int v24 = __nwlog_obj();
                      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
                      {
                        *(_DWORD *)int buf = 136446210;
                        char v132 = "sa_dst_compare_internal_wrapper";
                        os_log_type_t v25 = "%{public}s prefer d2, known while d1 not known";
                        goto LABEL_357;
                      }
                      goto LABEL_359;
                    }
                    unsigned int v103 = v95;
                    uint64_t v76 = __nwlog_obj();
                    if (!os_log_type_enabled(v76, OS_LOG_TYPE_DEBUG)) {
                      goto LABEL_359;
                    }
                    *(_DWORD *)int buf = 136446722;
                    char v132 = "sa_dst_compare_rfc6724";
                    __int16 v133 = 1024;
                    *(_DWORD *)uint64_t v134 = v103;
                    *(_WORD *)&v134[4] = 1024;
                    *(_DWORD *)&v134[6] = v124;
                    os_log_type_t v25 = "%{public}s Rule 8, prefer d2, d2 scope %d < d1 scope %d";
                    goto LABEL_273;
                  }
                  if (*(unsigned __int16 *)&v128[44] == 288)
                  {
                    BOOL v87 = *(_WORD *)&v128[46] != 0;
                    goto LABEL_324;
                  }
                }
                BOOL v87 = 1;
                goto LABEL_324;
              }
              if (!type[37]) {
                goto LABEL_39;
              }
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              int v24 = gLogObj;
              if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG)) {
                goto LABEL_359;
              }
              *(_DWORD *)int buf = 136446210;
              char v132 = "sa_dst_compare_rfc6724";
              os_log_type_t v25 = "%{public}s Rule 1, prefer d2, d1 is not routable";
LABEL_357:
              os_log_type_t v72 = v24;
              uint32_t v73 = 12;
              goto LABEL_358;
            }
            unint64_t v6 = DWORD1(v130);
            if (DWORD1(v130))
            {
              if (networkd_settings_get_int64_with_default((const char *)nw_setting_compare_failure_threshold, 10) >= v6) {
                goto LABEL_14;
              }
              size_t v71 = __nwlog_obj();
              if (!os_log_type_enabled(v71, OS_LOG_TYPE_DEBUG)) {
                goto LABEL_359;
              }
              *(_DWORD *)int buf = 136446466;
              char v132 = "sa_dst_compare_statistics";
              __int16 v133 = 1024;
              *(_DWORD *)uint64_t v134 = v6;
              os_log_type_t v25 = "%{public}s prefer 2, dst 1 has no successful connections and %u attempts";
              os_log_type_t v72 = v71;
              uint32_t v73 = 18;
              goto LABEL_358;
            }
          }
LABEL_15:
          char v15 = 0;
          goto LABEL_16;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v22 = gLogObj;
        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)int buf = 136446210;
          char v132 = "sa_dst_compare_internal_wrapper";
          int v23 = "%{public}s sa_dst_lookup for dst2 failed";
          goto LABEL_34;
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v22 = gLogObj;
        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)int buf = 136446210;
          char v132 = "sa_dst_compare_internal_wrapper";
          int v23 = "%{public}s sa_dst_lookup for dst1 failed";
LABEL_34:
          _os_log_impl(&dword_1830D4000, v22, OS_LOG_TYPE_DEBUG, v23, buf, 0xCu);
        }
      }
      uint64_t v21 = 0;
      goto LABEL_392;
    }
    __nwlog_obj();
    *(_DWORD *)os_log_type_t v128 = 136446210;
    *(void *)&v128[4] = "sa_dst_compare_internal";
    BOOL v99 = (char *)_os_log_send_and_compose_impl();
    type[0] = 16;
    buf[0] = 0;
    if (!__nwlog_fault(v99, type, buf)) {
      goto LABEL_429;
    }
    if (type[0] == 17)
    {
      os_log_type_t v100 = __nwlog_obj();
      os_log_type_t v101 = type[0];
      if (os_log_type_enabled(v100, (os_log_type_t)type[0]))
      {
        *(_DWORD *)os_log_type_t v128 = 136446210;
        *(void *)&v128[4] = "sa_dst_compare_internal";
        os_log_type_t v102 = "%{public}s called with null dst2";
        goto LABEL_428;
      }
      goto LABEL_429;
    }
    if (!buf[0])
    {
      os_log_type_t v100 = __nwlog_obj();
      os_log_type_t v101 = type[0];
      if (os_log_type_enabled(v100, (os_log_type_t)type[0]))
      {
        *(_DWORD *)os_log_type_t v128 = 136446210;
        *(void *)&v128[4] = "sa_dst_compare_internal";
        os_log_type_t v102 = "%{public}s called with null dst2, backtrace limit exceeded";
        goto LABEL_428;
      }
      goto LABEL_429;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v100 = __nwlog_obj();
    os_log_type_t v101 = type[0];
    BOOL v112 = os_log_type_enabled(v100, (os_log_type_t)type[0]);
    if (!backtrace_string)
    {
      if (v112)
      {
        *(_DWORD *)os_log_type_t v128 = 136446210;
        *(void *)&v128[4] = "sa_dst_compare_internal";
        os_log_type_t v102 = "%{public}s called with null dst2, no backtrace";
        goto LABEL_428;
      }
      goto LABEL_429;
    }
    if (v112)
    {
      *(_DWORD *)os_log_type_t v128 = 136446466;
      *(void *)&v128[4] = "sa_dst_compare_internal";
      *(_WORD *)&v128[12] = 2082;
      *(void *)&v128[14] = backtrace_string;
      os_log_type_t v111 = "%{public}s called with null dst2, dumping backtrace:%{public}s";
      goto LABEL_408;
    }
    goto LABEL_409;
  }
  __nwlog_obj();
  *(_DWORD *)os_log_type_t v128 = 136446210;
  *(void *)&v128[4] = "sa_dst_compare_internal";
  BOOL v99 = (char *)_os_log_send_and_compose_impl();
  type[0] = 16;
  buf[0] = 0;
  if (!__nwlog_fault(v99, type, buf)) {
    goto LABEL_429;
  }
  if (type[0] != 17)
  {
    if (!buf[0])
    {
      os_log_type_t v100 = __nwlog_obj();
      os_log_type_t v101 = type[0];
      if (os_log_type_enabled(v100, (os_log_type_t)type[0]))
      {
        *(_DWORD *)os_log_type_t v128 = 136446210;
        *(void *)&v128[4] = "sa_dst_compare_internal";
        os_log_type_t v102 = "%{public}s called with null dst1, backtrace limit exceeded";
        goto LABEL_428;
      }
      goto LABEL_429;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v100 = __nwlog_obj();
    os_log_type_t v101 = type[0];
    BOOL v110 = os_log_type_enabled(v100, (os_log_type_t)type[0]);
    if (!backtrace_string)
    {
      if (v110)
      {
        *(_DWORD *)os_log_type_t v128 = 136446210;
        *(void *)&v128[4] = "sa_dst_compare_internal";
        os_log_type_t v102 = "%{public}s called with null dst1, no backtrace";
        goto LABEL_428;
      }
      goto LABEL_429;
    }
    if (v110)
    {
      *(_DWORD *)os_log_type_t v128 = 136446466;
      *(void *)&v128[4] = "sa_dst_compare_internal";
      *(_WORD *)&v128[12] = 2082;
      *(void *)&v128[14] = backtrace_string;
      os_log_type_t v111 = "%{public}s called with null dst1, dumping backtrace:%{public}s";
LABEL_408:
      _os_log_impl(&dword_1830D4000, v100, v101, v111, v128, 0x16u);
    }
LABEL_409:
    free(backtrace_string);
    goto LABEL_429;
  }
  os_log_type_t v100 = __nwlog_obj();
  os_log_type_t v101 = type[0];
  if (os_log_type_enabled(v100, (os_log_type_t)type[0]))
  {
    *(_DWORD *)os_log_type_t v128 = 136446210;
    *(void *)&v128[4] = "sa_dst_compare_internal";
    os_log_type_t v102 = "%{public}s called with null dst1";
LABEL_428:
    _os_log_impl(&dword_1830D4000, v100, v101, v102, v128, 0xCu);
  }
LABEL_429:
  if (v99) {
    free(v99);
  }
  return 0;
}

BOOL sa_dst_lookup(unsigned __int8 *a1, int a2, _OWORD *a3)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  pthread_once(&nw_settings_setup_atfork::pOnce, (void (*)(void))nw_settings_setup_atfork_inner);
  pthread_once(&cache_init, (void (*)(void))sa_dst_compare_init_once);
  os_unfair_lock_lock((os_unfair_lock_t)&cache_lock);
  uint64_t v6 = mach_absolute_time();
  id v7 = (void *)cache;
  if (!cache) {
    goto LABEL_28;
  }
  uint64_t v8 = v6;
  char v9 = 0;
  unint64_t v10 = cache_timeout;
  BOOL v11 = &cache;
  do
  {
    while (v8 - *v7 >= v10)
    {
      *BOOL v11 = v7[1];
      free(v7);
      unint64_t v10 = cache_timeout;
      id v7 = (void *)*v11;
      if (!*v11) {
        goto LABEL_26;
      }
    }
    if (v9) {
      goto LABEL_6;
    }
    if (*((_DWORD *)v7 + 22) == a2)
    {
      int v12 = a1[1];
      if (v12 == *((unsigned __int8 *)v7 + 17))
      {
        BOOL v13 = (unsigned __int8 *)(v7 + 2);
        if (v12 == 30)
        {
          BOOL v14 = *((void *)a1 + 1) == v7[3] && *((void *)a1 + 2) == v7[4];
          if (v14 && *((_DWORD *)a1 + 6) == *((_DWORD *)v7 + 10))
          {
LABEL_25:
            long long v16 = *((_OWORD *)v7 + 2);
            *a3 = *(_OWORD *)v13;
            a3[1] = v16;
            long long v17 = *((_OWORD *)v7 + 3);
            long long v18 = *((_OWORD *)v7 + 4);
            long long v19 = *((_OWORD *)v7 + 6);
            a3[4] = *((_OWORD *)v7 + 5);
            a3[5] = v19;
            a3[2] = v17;
            a3[3] = v18;
            id v7 = (void *)*v11;
LABEL_6:
            char v9 = 1;
            goto LABEL_23;
          }
        }
        else if (v12 == 2)
        {
          if (*((_DWORD *)a1 + 1) == *((_DWORD *)v7 + 5)) {
            goto LABEL_25;
          }
        }
        else
        {
          size_t v15 = *a1;
          if (v15 == *v13 && !memcmp(a1, v7 + 2, v15)) {
            goto LABEL_25;
          }
        }
      }
    }
    char v9 = 0;
LABEL_23:
    BOOL v11 = v7 + 1;
    id v7 = (void *)v7[1];
  }
  while (v7);
LABEL_26:
  if (v9)
  {
    uint64_t v20 = 1;
    goto LABEL_34;
  }
LABEL_28:
  if (*a1 >= 0x1Du)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v21 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      int v22 = *a1;
      *(_DWORD *)int buf = 136446466;
      unsigned int v44 = "sa_dst_cache_create";
      __int16 v45 = 1024;
      LODWORD(v46) = v22;
      _os_log_impl(&dword_1830D4000, v21, OS_LOG_TYPE_ERROR, "%{public}s (dst_sa->sa_len %u > sizeof(cache_entry->dce_entry.d_dst.addr))", buf, 0x12u);
    }
    goto LABEL_31;
  }
  int v23 = (char *)malloc_type_calloc(1uLL, 0x70uLL, 0xEAFB8F1AuLL);
  if (v23)
  {
    uint64_t v24 = (uint64_t)v23;
    os_log_type_t v25 = (unsigned __int8 *)(v23 + 16);
    memcpy(v23 + 16, a1, *a1);
    *(_DWORD *)(v24 + 88) = a2;
    sa_dst_fill_netsrc(v25);
    long long v26 = *(_OWORD *)(v24 + 32);
    *a3 = *(_OWORD *)(v24 + 16);
    a3[1] = v26;
    long long v27 = *(_OWORD *)(v24 + 48);
    long long v28 = *(_OWORD *)(v24 + 64);
    long long v29 = *(_OWORD *)(v24 + 96);
    a3[4] = *(_OWORD *)(v24 + 80);
    a3[5] = v29;
    a3[2] = v27;
    a3[3] = v28;
    uint64_t v30 = mach_absolute_time();
    uint64_t v31 = cache;
    *(void *)uint64_t v24 = v30;
    *(void *)(v24 + 8) = v31;
    cache = v24;
    uint64_t v20 = 2;
    goto LABEL_34;
  }
  uint64_t v33 = __nwlog_obj();
  os_log_type_enabled(v33, OS_LOG_TYPE_ERROR);
  *(_DWORD *)int buf = 136446722;
  unsigned int v44 = "strict_calloc";
  __int16 v45 = 2048;
  uint64_t v46 = 1;
  __int16 v47 = 2048;
  uint64_t v48 = 112;
  int64_t v34 = (void *)_os_log_send_and_compose_impl();
  BOOL result = __nwlog_abort((uint64_t)v34);
  if (result)
  {
    __break(1u);
  }
  else
  {
    free(v34);
    __nwlog_obj();
    *(_DWORD *)int buf = 136446466;
    unsigned int v44 = "sa_dst_cache_create";
    __int16 v45 = 2048;
    uint64_t v46 = 112;
    int v35 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v41 = 0;
    if (!__nwlog_fault(v35, &type, &v41)) {
      goto LABEL_50;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (v41)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        int v36 = __nwlog_obj();
        os_log_type_t v37 = type;
        BOOL v40 = os_log_type_enabled(v36, type);
        if (backtrace_string)
        {
          if (v40)
          {
            *(_DWORD *)int buf = 136446722;
            unsigned int v44 = "sa_dst_cache_create";
            __int16 v45 = 2048;
            uint64_t v46 = 112;
            __int16 v47 = 2082;
            uint64_t v48 = (uint64_t)backtrace_string;
            _os_log_impl(&dword_1830D4000, v36, v37, "%{public}s malloc(%zu) failed, dumping backtrace:%{public}s", buf, 0x20u);
          }
          free(backtrace_string);
          goto LABEL_50;
        }
        if (!v40) {
          goto LABEL_50;
        }
        *(_DWORD *)int buf = 136446466;
        unsigned int v44 = "sa_dst_cache_create";
        __int16 v45 = 2048;
        uint64_t v46 = 112;
        uint64_t v38 = "%{public}s malloc(%zu) failed, no backtrace";
      }
      else
      {
        int v36 = __nwlog_obj();
        os_log_type_t v37 = type;
        if (!os_log_type_enabled(v36, type)) {
          goto LABEL_50;
        }
        *(_DWORD *)int buf = 136446466;
        unsigned int v44 = "sa_dst_cache_create";
        __int16 v45 = 2048;
        uint64_t v46 = 112;
        uint64_t v38 = "%{public}s malloc(%zu) failed, backtrace limit exceeded";
      }
LABEL_49:
      _os_log_impl(&dword_1830D4000, v36, v37, v38, buf, 0x16u);
      goto LABEL_50;
    }
    int v36 = __nwlog_obj();
    os_log_type_t v37 = type;
    if (os_log_type_enabled(v36, type))
    {
      *(_DWORD *)int buf = 136446466;
      unsigned int v44 = "sa_dst_cache_create";
      __int16 v45 = 2048;
      uint64_t v46 = 112;
      uint64_t v38 = "%{public}s malloc(%zu) failed";
      goto LABEL_49;
    }
LABEL_50:
    if (v35) {
      free(v35);
    }
LABEL_31:
    uint64_t v20 = 0;
LABEL_34:
    os_unfair_lock_unlock((os_unfair_lock_t)&cache_lock);
    return v20;
  }
  return result;
}

uint64_t rfc6724_scope(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 1);
  if (v2 == 2)
  {
    unsigned int v8 = bswap32(*(_DWORD *)(a1 + 4));
    BOOL v7 = HIWORD(v8) == 43518 || HIBYTE(v8) == 127;
    unsigned int v6 = 14;
    goto LABEL_13;
  }
  if (v2 != 30) {
    return 0;
  }
  int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 == 255)
  {
    unsigned int v10 = (*(unsigned char *)(a1 + 9) & 0xF) - 1;
    if (v10 >= 5) {
      return 14;
    }
    else {
      return dword_183E22628[v10];
    }
  }
  else
  {
    if (v3 == 254)
    {
      unsigned int v4 = *(unsigned __int8 *)(a1 + 9);
      int v5 = v4 & 0xC0;
      if (v4 <= 0xBF) {
        unsigned int v6 = 14;
      }
      else {
        unsigned int v6 = 5;
      }
      BOOL v7 = v5 == 128;
LABEL_13:
      if (v7) {
        return 2;
      }
      else {
        return v6;
      }
    }
    uint64_t v11 = *(void *)(a1 + 15);
    uint64_t result = 14;
    if (!(*(void *)(a1 + 8) | v11))
    {
      if (*(unsigned char *)(a1 + 23) == 1) {
        return 2;
      }
      else {
        return 14;
      }
    }
  }
  return result;
}

uint64_t common_prefix_length(const sockaddr_in_4_6 *a1, const sockaddr_in_4_6 *a2)
{
  if (a1->var0.sa_family != 30 || a2->var0.sa_family != 30) {
    return 0;
  }
  int v2 = a1->var3.sin6_addr.__u6_addr8[0] ^ a2->var3.sin6_addr.__u6_addr8[0];
  if (v2)
  {
    uint64_t result = 0;
  }
  else
  {
    int v2 = a1->var3.sin6_addr.__u6_addr8[1] ^ a2->var3.sin6_addr.__u6_addr8[1];
    if (v2)
    {
      uint64_t result = 8;
    }
    else
    {
      int v2 = a1->var3.sin6_addr.__u6_addr8[2] ^ a2->var3.sin6_addr.__u6_addr8[2];
      if (v2)
      {
        uint64_t result = 16;
      }
      else
      {
        int v2 = a1->var3.sin6_addr.__u6_addr8[3] ^ a2->var3.sin6_addr.__u6_addr8[3];
        if (v2)
        {
          uint64_t result = 24;
        }
        else
        {
          int v2 = a1->var3.sin6_addr.__u6_addr8[4] ^ a2->var3.sin6_addr.__u6_addr8[4];
          if (v2)
          {
            uint64_t result = 32;
          }
          else
          {
            int v2 = a1->var3.sin6_addr.__u6_addr8[5] ^ a2->var3.sin6_addr.__u6_addr8[5];
            if (v2)
            {
              uint64_t result = 40;
            }
            else
            {
              int v2 = a1->var3.sin6_addr.__u6_addr8[6] ^ a2->var3.sin6_addr.__u6_addr8[6];
              if (v2)
              {
                uint64_t result = 48;
              }
              else
              {
                int v2 = a1->var3.sin6_addr.__u6_addr8[7] ^ a2->var3.sin6_addr.__u6_addr8[7];
                if (!v2) {
                  return 64;
                }
                uint64_t result = 56;
              }
            }
          }
        }
      }
    }
  }
  for (; (v2 & 0x80) == 0; v2 *= 2)
    uint64_t result = (result + 1);
  return result;
}

uint64_t nw_parameters_get_ignore_resolver_stats(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  int v2 = v1;
  if (v1)
  {
    uint64_t v3 = (v1[96] >> 4) & 1;
    goto LABEL_3;
  }
  int v5 = __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  long long v16 = "nw_parameters_get_ignore_resolver_stats";
  unsigned int v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        long long v16 = "nw_parameters_get_ignore_resolver_stats";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          long long v16 = "nw_parameters_get_ignore_resolver_stats";
          __int16 v17 = 2082;
          long long v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        long long v16 = "nw_parameters_get_ignore_resolver_stats";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        long long v16 = "nw_parameters_get_ignore_resolver_stats";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

void sa_dst_fill_netsrc(unsigned __int8 *a1)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  int control_socket = sa_dst_fill_netsrc(Destination *)::netsrc_sockfd;
  if (sa_dst_fill_netsrc(Destination *)::netsrc_sockfd < 0)
  {
    int control_socket = nw_create_control_socket((uint64_t)"com.apple.netsrc");
    sa_dst_fill_netsrc(Destination *)::netsrc_sockfd = control_socket;
    if (control_socket < 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "sa_dst_fill_netsrc";
      char v13 = (char *)_os_log_send_and_compose_impl();
      type[0] = OS_LOG_TYPE_ERROR;
      v34[0] = 0;
      if (!__nwlog_fault(v13, type, v34)) {
        goto LABEL_40;
      }
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v14 = gLogObj;
        os_log_type_t v15 = type[0];
        if (!os_log_type_enabled((os_log_t)gLogObj, type[0])) {
          goto LABEL_40;
        }
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "sa_dst_fill_netsrc";
        long long v16 = "%{public}s nw_create_control_socket failed";
      }
      else
      {
        if (v34[0])
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          int v22 = gLogObj;
          os_log_type_t v23 = type[0];
          BOOL v24 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
          if (backtrace_string)
          {
            if (v24)
            {
              *(_DWORD *)int buf = 136446466;
              *(void *)&uint8_t buf[4] = "sa_dst_fill_netsrc";
              *(_WORD *)&unsigned char buf[12] = 2082;
              *(void *)&buf[14] = backtrace_string;
              _os_log_impl(&dword_1830D4000, v22, v23, "%{public}s nw_create_control_socket failed, dumping backtrace:%{public}s", buf, 0x16u);
            }
            free(backtrace_string);
            goto LABEL_40;
          }
          if (!v24)
          {
LABEL_40:
            if (v13) {
              free(v13);
            }
            return;
          }
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "sa_dst_fill_netsrc";
          long long v16 = "%{public}s nw_create_control_socket failed, no backtrace";
          long long v26 = v22;
          os_log_type_t v27 = v23;
LABEL_39:
          _os_log_impl(&dword_1830D4000, v26, v27, v16, buf, 0xCu);
          goto LABEL_40;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v14 = gLogObj;
        os_log_type_t v15 = type[0];
        if (!os_log_type_enabled((os_log_t)gLogObj, type[0])) {
          goto LABEL_40;
        }
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "sa_dst_fill_netsrc";
        long long v16 = "%{public}s nw_create_control_socket failed, backtrace limit exceeded";
      }
      long long v26 = v14;
      os_log_type_t v27 = v15;
      goto LABEL_39;
    }
  }
  memset(v30, 0, sizeof(v30));
  int v31 = 0;
  if (sa_dst_fill_netsrc(Destination *)::version) {
    int v3 = 1;
  }
  else {
    int v3 = 2;
  }
  int v4 = *((_DWORD *)a1 + 18);
  *(_DWORD *)os_log_type_t type = v3;
  int v29 = v4;
  size_t v5 = *a1;
  if (v5 >= 0x1D)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unsigned int v6 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "sa_dst_fill_netsrc";
      _os_log_impl(&dword_1830D4000, v6, OS_LOG_TYPE_DEBUG, "%{public}s sockaddr is too big", buf, 0xCu);
    }
    return;
  }
  memcpy(v30, a1, v5);
  if (send(control_socket, type, 0x24uLL, 0) == 36)
  {
    if (sa_dst_fill_netsrc(Destination *)::version == 1)
    {
      memset(buf, 0, 40);
      if (recv(sa_dst_fill_netsrc(Destination *)::netsrc_sockfd, buf, 0x28uLL, 0) == 40)
      {
        *((_DWORD *)a1 + 8) = *(_DWORD *)&buf[34];
        if (buf[0] <= 0x1CuLL) {
          memcpy(a1 + 36, buf, buf[0]);
        }
        int v7 = *(_DWORD *)&buf[30];
        *((_DWORD *)a1 + 16) = *(unsigned __int16 *)&buf[28];
        *((_DWORD *)a1 + 17) = v7;
        return;
      }
      int v25 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v10 = gLogObj;
      if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG)) {
        return;
      }
      goto LABEL_34;
    }
    uint64_t v33 = 0;
    memset(buf, 0, sizeof(buf));
    if (recv(sa_dst_fill_netsrc(Destination *)::netsrc_sockfd, buf, 0x38uLL, 0) == 56)
    {
      int v17 = *(_DWORD *)&buf[44];
      *((_DWORD *)a1 + 8) = v33;
      *(_OWORD *)(a1 + 36) = *(_OWORD *)buf;
      *((_OWORD *)a1 + 3) = *(_OWORD *)&buf[12];
      int v19 = *(_DWORD *)&buf[36];
      uint8_t v18 = buf[40];
      *((_DWORD *)a1 + 16) = *(_DWORD *)&buf[40];
      *((_DWORD *)a1 + 17) = v17;
      *((_DWORD *)a1 + 19) = WORD2(v33);
      uint64_t v20 = *(void *)&buf[28];
      *((_DWORD *)a1 + 22) = v19;
      *((void *)a1 + 10) = v20;
      a1[92] = a1[92] & 0xF8 | (v18 >> 5);
      return;
    }
    int v25 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v10 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
    {
LABEL_34:
      *(_DWORD *)int64_t v34 = 136446466;
      int v35 = "sa_dst_fill_netsrc";
      __int16 v36 = 1024;
      int v37 = v25;
      BOOL v11 = "%{public}s recv failed %{darwin.errno}d";
      os_log_type_t v12 = v34;
      goto LABEL_35;
    }
  }
  else
  {
    unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    int v9 = **(_DWORD **)(StatusReg + 8);
    if (v9 == 22 && (sa_dst_fill_netsrc(Destination *)::version & 1) == 0)
    {
      sa_dst_fill_netsrc(Destination *)::version = 1;
      sa_dst_fill_netsrc(a1);
      int v9 = **(_DWORD **)(StatusReg + 8);
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v10 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)int buf = 136446466;
      *(void *)&uint8_t buf[4] = "sa_dst_fill_netsrc";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = v9;
      BOOL v11 = "%{public}s send failed %{darwin.errno}d";
      os_log_type_t v12 = buf;
LABEL_35:
      _os_log_impl(&dword_1830D4000, v10, OS_LOG_TYPE_DEBUG, v11, v12, 0x12u);
    }
  }
}

uint64_t nw_create_control_socket(uint64_t a1)
{
  uint64_t v66 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = socket(32, 2, 2);
  uint64_t v3 = v2;
  if ((v2 & 0x80000000) != 0)
  {
    int v4 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)int buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_create_control_socket";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = v4;
    size_t v5 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    v48[0] = 0;
    if (!__nwlog_fault(v5, type, v48)) {
      goto LABEL_33;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v6 = gLogObj;
      os_log_type_t v7 = type[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, type[0])) {
        goto LABEL_33;
      }
      *(_DWORD *)int buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_create_control_socket";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = v4;
      os_log_type_t v8 = "%{public}s socket(PF_SYSTEM, SOCK_DGRAM, SYSPROTO_CONTROL) failed %{darwin.errno}d";
    }
    else if (v48[0])
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v6 = gLogObj;
      os_log_type_t v7 = type[0];
      BOOL v17 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
      if (backtrace_string)
      {
        if (!v17) {
          goto LABEL_25;
        }
        *(_DWORD *)int buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_create_control_socket";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = v4;
        *(_WORD *)&buf[18] = 2082;
        *(void *)&buf[20] = backtrace_string;
        uint8_t v18 = "%{public}s socket(PF_SYSTEM, SOCK_DGRAM, SYSPROTO_CONTROL) failed %{darwin.errno}d, dumping backtrace:%{public}s";
        int v19 = buf;
        uint64_t v20 = v6;
        os_log_type_t v21 = v7;
        uint32_t v22 = 28;
        goto LABEL_24;
      }
      if (!v17) {
        goto LABEL_33;
      }
      *(_DWORD *)int buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_create_control_socket";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = v4;
      os_log_type_t v8 = "%{public}s socket(PF_SYSTEM, SOCK_DGRAM, SYSPROTO_CONTROL) failed %{darwin.errno}d, no backtrace";
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v6 = gLogObj;
      os_log_type_t v7 = type[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, type[0])) {
        goto LABEL_33;
      }
      *(_DWORD *)int buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_create_control_socket";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = v4;
      os_log_type_t v8 = "%{public}s socket(PF_SYSTEM, SOCK_DGRAM, SYSPROTO_CONTROL) failed %{darwin.errno}d, backtrace limit exceeded";
    }
    os_log_type_t v23 = buf;
    BOOL v24 = v6;
    os_log_type_t v25 = v7;
    uint32_t v26 = 18;
LABEL_32:
    _os_log_impl(&dword_1830D4000, v24, v25, v8, v23, v26);
    goto LABEL_33;
  }
  int v51 = 1;
  if (setsockopt(v2, 0xFFFF, 4130, &v51, 4u))
  {
LABEL_3:
    close(v3);
    return 0xFFFFFFFFLL;
  }
  int v65 = 0;
  long long v63 = 0u;
  long long v64 = 0u;
  long long v62 = 0u;
  long long v61 = 0u;
  memset(buf, 0, sizeof(buf));
  if (a1)
  {
LABEL_9:
    uint64_t v9 = 0;
    while (1)
    {
      int v10 = *(unsigned __int8 *)(a1 + v9);
      buf[v9 + 4] = v10;
      if (!v10) {
        break;
      }
      if (++v9 == 95)
      {
        HIBYTE(v65) = 0;
        break;
      }
    }
    if (ioctl(v3, 0xC0644E03uLL, buf, v43) < 0) {
      goto LABEL_3;
    }
    *(_DWORD *)uint64_t v48 = 139296;
    *(_DWORD *)&v48[4] = *(_DWORD *)buf;
    *(_DWORD *)&v48[8] = 0;
    *(void *)&v48[12] = 0;
    uint64_t v49 = 0;
    int v50 = 0;
    if (connect(v3, (const sockaddr *)v48, 0x20u)) {
      goto LABEL_3;
    }
    int v47 = 0x20000;
    if (!setsockopt(v3, 0xFFFF, 4098, &v47, 4u)) {
      goto LABEL_48;
    }
    int v11 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)os_log_type_t type = 136446978;
    unsigned int v53 = "nw_create_control_socket";
    __int16 v54 = 1024;
    int v55 = v3;
    __int16 v56 = 1024;
    int v57 = v47;
    __int16 v58 = 1024;
    LODWORD(v59[0]) = v11;
    LODWORD(v44) = 30;
    os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v46 = OS_LOG_TYPE_ERROR;
    char v45 = 0;
    if (__nwlog_fault(v12, &v46, &v45))
    {
      if (v46 == OS_LOG_TYPE_FAULT)
      {
        char v13 = __nwlog_obj();
        os_log_type_t v14 = v46;
        if (!os_log_type_enabled(v13, v46)) {
          goto LABEL_46;
        }
        *(_DWORD *)os_log_type_t type = 136446978;
        unsigned int v53 = "nw_create_control_socket";
        __int16 v54 = 1024;
        int v55 = v3;
        __int16 v56 = 1024;
        int v57 = v47;
        __int16 v58 = 1024;
        LODWORD(v59[0]) = v11;
        os_log_type_t v15 = "%{public}s setsockopt(%d, SOL_SOCKET, SO_RCVBUF, %d) %{darwin.errno}d";
        goto LABEL_45;
      }
      if (!v45)
      {
        char v13 = __nwlog_obj();
        os_log_type_t v14 = v46;
        if (!os_log_type_enabled(v13, v46)) {
          goto LABEL_46;
        }
        *(_DWORD *)os_log_type_t type = 136446978;
        unsigned int v53 = "nw_create_control_socket";
        __int16 v54 = 1024;
        int v55 = v3;
        __int16 v56 = 1024;
        int v57 = v47;
        __int16 v58 = 1024;
        LODWORD(v59[0]) = v11;
        os_log_type_t v15 = "%{public}s setsockopt(%d, SOL_SOCKET, SO_RCVBUF, %d) %{darwin.errno}d, backtrace limit exceeded";
        goto LABEL_45;
      }
      long long v28 = (char *)__nw_create_backtrace_string();
      char v13 = __nwlog_obj();
      os_log_type_t v14 = v46;
      BOOL v29 = os_log_type_enabled(v13, v46);
      if (v28)
      {
        if (v29)
        {
          *(_DWORD *)os_log_type_t type = 136447234;
          unsigned int v53 = "nw_create_control_socket";
          __int16 v54 = 1024;
          int v55 = v3;
          __int16 v56 = 1024;
          int v57 = v47;
          __int16 v58 = 1024;
          LODWORD(v59[0]) = v11;
          WORD2(v59[0]) = 2082;
          *(void *)((char *)v59 + 6) = v28;
          _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s setsockopt(%d, SOL_SOCKET, SO_RCVBUF, %d) %{darwin.errno}d, dumping backtrace:%{public}s", (uint8_t *)type, 0x28u);
        }
        free(v28);
        goto LABEL_46;
      }
      if (v29)
      {
        *(_DWORD *)os_log_type_t type = 136446978;
        unsigned int v53 = "nw_create_control_socket";
        __int16 v54 = 1024;
        int v55 = v3;
        __int16 v56 = 1024;
        int v57 = v47;
        __int16 v58 = 1024;
        LODWORD(v59[0]) = v11;
        os_log_type_t v15 = "%{public}s setsockopt(%d, SOL_SOCKET, SO_RCVBUF, %d) %{darwin.errno}d, no backtrace";
LABEL_45:
        _os_log_impl(&dword_1830D4000, v13, v14, v15, (uint8_t *)type, 0x1Eu);
      }
    }
LABEL_46:
    if (v12) {
      free(v12);
    }
LABEL_48:
    int v30 = fcntl(v3, 3, 0, v44);
    if (v30 != -1)
    {
      int v31 = v30 | 4;
      if (fcntl(v3, 4, v30 | 4u) != -1) {
        return v3;
      }
      int v32 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
      __nwlog_obj();
      *(_DWORD *)os_log_type_t type = 136446978;
      unsigned int v53 = "nw_create_control_socket";
      __int16 v54 = 1024;
      int v55 = v3;
      __int16 v56 = 1024;
      int v57 = v31;
      __int16 v58 = 1024;
      LODWORD(v59[0]) = v32;
      size_t v5 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t v46 = OS_LOG_TYPE_ERROR;
      char v45 = 0;
      if (!__nwlog_fault(v5, &v46, &v45)) {
        goto LABEL_33;
      }
      if (v46 == OS_LOG_TYPE_FAULT)
      {
        uint64_t v33 = __nwlog_obj();
        os_log_type_t v34 = v46;
        if (os_log_type_enabled(v33, v46))
        {
          *(_DWORD *)os_log_type_t type = 136446978;
          unsigned int v53 = "nw_create_control_socket";
          __int16 v54 = 1024;
          int v55 = v3;
          __int16 v56 = 1024;
          int v57 = v31;
          __int16 v58 = 1024;
          LODWORD(v59[0]) = v32;
          os_log_type_t v8 = "%{public}s fcntl(%d, F_SETFL, %d) %{darwin.errno}d";
LABEL_76:
          os_log_type_t v23 = (uint8_t *)type;
          BOOL v24 = v33;
          os_log_type_t v25 = v34;
          uint32_t v26 = 30;
          goto LABEL_32;
        }
        goto LABEL_33;
      }
      if (!v45)
      {
        uint64_t v33 = __nwlog_obj();
        os_log_type_t v34 = v46;
        if (os_log_type_enabled(v33, v46))
        {
          *(_DWORD *)os_log_type_t type = 136446978;
          unsigned int v53 = "nw_create_control_socket";
          __int16 v54 = 1024;
          int v55 = v3;
          __int16 v56 = 1024;
          int v57 = v31;
          __int16 v58 = 1024;
          LODWORD(v59[0]) = v32;
          os_log_type_t v8 = "%{public}s fcntl(%d, F_SETFL, %d) %{darwin.errno}d, backtrace limit exceeded";
          goto LABEL_76;
        }
LABEL_33:
        if (!v5) {
          return v3;
        }
LABEL_34:
        free(v5);
        return v3;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v33 = __nwlog_obj();
      os_log_type_t v34 = v46;
      BOOL v40 = os_log_type_enabled(v33, v46);
      if (!backtrace_string)
      {
        if (v40)
        {
          *(_DWORD *)os_log_type_t type = 136446978;
          unsigned int v53 = "nw_create_control_socket";
          __int16 v54 = 1024;
          int v55 = v3;
          __int16 v56 = 1024;
          int v57 = v31;
          __int16 v58 = 1024;
          LODWORD(v59[0]) = v32;
          os_log_type_t v8 = "%{public}s fcntl(%d, F_SETFL, %d) %{darwin.errno}d, no backtrace";
          goto LABEL_76;
        }
        goto LABEL_33;
      }
      if (!v40)
      {
LABEL_25:
        free(backtrace_string);
        if (!v5) {
          return v3;
        }
        goto LABEL_34;
      }
      *(_DWORD *)os_log_type_t type = 136447234;
      unsigned int v53 = "nw_create_control_socket";
      __int16 v54 = 1024;
      int v55 = v3;
      __int16 v56 = 1024;
      int v57 = v31;
      __int16 v58 = 1024;
      LODWORD(v59[0]) = v32;
      WORD2(v59[0]) = 2082;
      *(void *)((char *)v59 + 6) = backtrace_string;
      uint8_t v18 = "%{public}s fcntl(%d, F_SETFL, %d) %{darwin.errno}d, dumping backtrace:%{public}s";
      int v19 = (uint8_t *)type;
      uint64_t v20 = v33;
      os_log_type_t v21 = v34;
      uint32_t v22 = 40;
LABEL_24:
      _os_log_impl(&dword_1830D4000, v20, v21, v18, v19, v22);
      goto LABEL_25;
    }
    int v35 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)os_log_type_t type = 136446722;
    unsigned int v53 = "nw_create_control_socket";
    __int16 v54 = 1024;
    int v55 = v3;
    __int16 v56 = 1024;
    int v57 = v35;
    size_t v5 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v46 = OS_LOG_TYPE_ERROR;
    char v45 = 0;
    if (!__nwlog_fault(v5, &v46, &v45)) {
      goto LABEL_33;
    }
    if (v46 == OS_LOG_TYPE_FAULT)
    {
      __int16 v36 = __nwlog_obj();
      os_log_type_t v37 = v46;
      if (!os_log_type_enabled(v36, v46)) {
        goto LABEL_33;
      }
      *(_DWORD *)os_log_type_t type = 136446722;
      unsigned int v53 = "nw_create_control_socket";
      __int16 v54 = 1024;
      int v55 = v3;
      __int16 v56 = 1024;
      int v57 = v35;
      os_log_type_t v8 = "%{public}s fcntl(%d, F_GETFL, 0) %{darwin.errno}d";
    }
    else if (v45)
    {
      uint64_t v38 = (char *)__nw_create_backtrace_string();
      __int16 v36 = __nwlog_obj();
      os_log_type_t v37 = v46;
      BOOL v39 = os_log_type_enabled(v36, v46);
      if (v38)
      {
        if (v39)
        {
          *(_DWORD *)os_log_type_t type = 136446978;
          unsigned int v53 = "nw_create_control_socket";
          __int16 v54 = 1024;
          int v55 = v3;
          __int16 v56 = 1024;
          int v57 = v35;
          __int16 v58 = 2082;
          v59[0] = v38;
          _os_log_impl(&dword_1830D4000, v36, v37, "%{public}s fcntl(%d, F_GETFL, 0) %{darwin.errno}d, dumping backtrace:%{public}s", (uint8_t *)type, 0x22u);
        }
        free(v38);
        goto LABEL_33;
      }
      if (!v39) {
        goto LABEL_33;
      }
      *(_DWORD *)os_log_type_t type = 136446722;
      unsigned int v53 = "nw_create_control_socket";
      __int16 v54 = 1024;
      int v55 = v3;
      __int16 v56 = 1024;
      int v57 = v35;
      os_log_type_t v8 = "%{public}s fcntl(%d, F_GETFL, 0) %{darwin.errno}d, no backtrace";
    }
    else
    {
      __int16 v36 = __nwlog_obj();
      os_log_type_t v37 = v46;
      if (!os_log_type_enabled(v36, v46)) {
        goto LABEL_33;
      }
      *(_DWORD *)os_log_type_t type = 136446722;
      unsigned int v53 = "nw_create_control_socket";
      __int16 v54 = 1024;
      int v55 = v3;
      __int16 v56 = 1024;
      int v57 = v35;
      os_log_type_t v8 = "%{public}s fcntl(%d, F_GETFL, 0) %{darwin.errno}d, backtrace limit exceeded";
    }
    os_log_type_t v23 = (uint8_t *)type;
    BOOL v24 = v36;
    os_log_type_t v25 = v37;
    uint32_t v26 = 24;
    goto LABEL_32;
  }
  char v41 = __nwlog_obj();
  os_log_type_enabled(v41, OS_LOG_TYPE_ERROR);
  *(_DWORD *)os_log_type_t type = 136446210;
  unsigned int v53 = "_strict_strlcpy";
  int v43 = 12;
  unsigned int v42 = (void *)_os_log_send_and_compose_impl();
  uint64_t result = __nwlog_abort((uint64_t)v42);
  if (!result)
  {
    free(v42);
    goto LABEL_9;
  }
  __break(1u);
  return result;
}

void nw_tcp_options_set_no_delay(nw_protocol_options_t options, BOOL no_delay)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = options;
  if (nw_protocol_options_is_tcp(v3))
  {
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_tcp_options_set_no_delay_block_invoke;
    v12[3] = &__block_descriptor_33_e9_B16__0_v8l;
    BOOL v13 = no_delay;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }
  int v4 = __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  BOOL v17 = "nw_tcp_options_set_no_delay";
  size_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v17 = "nw_tcp_options_set_no_delay";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_options_is_tcp(options)", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)int buf = 136446466;
          BOOL v17 = "nw_tcp_options_set_no_delay";
          __int16 v18 = 2082;
          int v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_tcp(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v17 = "nw_tcp_options_set_no_delay";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_tcp(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v17 = "nw_tcp_options_set_no_delay";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_options_is_tcp(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
LABEL_3:
}

void sub_18321C644(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_protocol_transform_modify_parameters(void *a1, void *a2)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1;
  id v4 = a2;
  size_t v5 = v4;
  if (!v3)
  {
    os_log_type_t v23 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v44 = "nw_protocol_transform_modify_parameters";
    BOOL v24 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v42 = OS_LOG_TYPE_ERROR;
    char v41 = 0;
    if (!__nwlog_fault(v24, &v42, &v41)) {
      goto LABEL_69;
    }
    if (v42 == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v25 = __nwlog_obj();
      os_log_type_t v26 = v42;
      if (os_log_type_enabled(v25, v42))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v44 = "nw_protocol_transform_modify_parameters";
        _os_log_impl(&dword_1830D4000, v25, v26, "%{public}s called with null transform", buf, 0xCu);
      }
    }
    else if (v41)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v25 = __nwlog_obj();
      os_log_type_t v30 = v42;
      BOOL v31 = os_log_type_enabled(v25, v42);
      if (backtrace_string)
      {
        if (v31)
        {
          *(_DWORD *)int buf = 136446466;
          uint64_t v44 = "nw_protocol_transform_modify_parameters";
          __int16 v45 = 2082;
          os_log_type_t v46 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v25, v30, "%{public}s called with null transform, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_69:
        if (!v24) {
          goto LABEL_30;
        }
LABEL_70:
        free(v24);
        goto LABEL_30;
      }
      if (v31)
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v44 = "nw_protocol_transform_modify_parameters";
        _os_log_impl(&dword_1830D4000, v25, v30, "%{public}s called with null transform, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v25 = __nwlog_obj();
      os_log_type_t v35 = v42;
      if (os_log_type_enabled(v25, v42))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v44 = "nw_protocol_transform_modify_parameters";
        _os_log_impl(&dword_1830D4000, v25, v35, "%{public}s called with null transform, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_68:

    goto LABEL_69;
  }
  if (v4)
  {
    uint64_t v6 = v4;
    *(_WORD *)(v6[13] + 108) |= 4u;

    unsigned int v7 = *((_DWORD *)v3 + 6);
    if (v7) {
      nw_parameters_set_data_mode(v6, v7);
    }
    if ((v3[8] & 8) != 0)
    {
      os_log_type_t v9 = v6;
      *(_WORD *)(v6[13] + 108) |= 2u;

      if ((v3[9] & 2) == 0)
      {
LABEL_7:
        char v8 = v3[8];
        if ((v8 & 0x20) == 0) {
          goto LABEL_8;
        }
        goto LABEL_12;
      }
    }
    else if ((v3[9] & 2) == 0)
    {
      goto LABEL_7;
    }
    int v10 = *((_DWORD *)v3 + 5);
    os_log_type_t v11 = v6;
    *(_DWORD *)(v6[13] + 103) = v10;

    char v8 = v3[8];
    if ((v8 & 0x20) == 0)
    {
LABEL_8:
      if ((v8 & 0x40) == 0)
      {
LABEL_14:
        if (v3[9]) {
          nw_parameters_set_fast_open_force_enable(v6, 1);
        }
        if (v3[8] < 0)
        {
          uint64_t v20 = v6;
          *(_WORD *)(v6[13] + 108) |= 0x20u;

          if ((v3[9] & 4) == 0)
          {
LABEL_18:
            char v12 = v3[8];
            if ((v12 & 1) == 0) {
              goto LABEL_19;
            }
            goto LABEL_33;
          }
        }
        else if ((v3[9] & 4) == 0)
        {
          goto LABEL_18;
        }
        int v21 = *((_DWORD *)v3 + 3);
        uint32_t v22 = v6;
        *(_DWORD *)(v6[13] + 72) = v21;

        char v12 = v3[8];
        if ((v12 & 1) == 0)
        {
LABEL_19:
          if ((v12 & 2) == 0) {
            goto LABEL_20;
          }
          goto LABEL_34;
        }
LABEL_33:
        nw_parameters_clear_protocol_stack(v6, 5);
        nw_parameters_clear_protocol_stack(v6, 4);
        char v12 = v3[8];
        if ((v12 & 2) == 0)
        {
LABEL_20:
          if ((v12 & 4) == 0)
          {
LABEL_22:
            BOOL v13 = (void *)*((void *)v3 + 5);
            if (v13)
            {
              applier[0] = MEMORY[0x1E4F143A8];
              applier[1] = 3221225472;
              applier[2] = __nw_protocol_transform_modify_parameters_block_invoke;
              applier[3] = &unk_1E524B4A0;
              BOOL v40 = v6;
              xpc_array_apply(v13, applier);
            }
            if (*((void *)v3 + 7))
            {
              char v14 = v6;
              id v15 = v14[19];

              long long v16 = *((void *)v3 + 7);
              iterate_block[0] = MEMORY[0x1E4F143A8];
              iterate_block[1] = 3221225472;
              iterate_block[2] = __nw_protocol_transform_modify_parameters_block_invoke_2;
              iterate_block[3] = &unk_1E5248AE8;
              BOOL v17 = v15;
              uint64_t v38 = v17;
              nw_protocol_stack_iterate_application_protocols(v16, iterate_block);
              __int16 v18 = nw_protocol_stack_copy_transport_protocol(*((nw_protocol_stack_t *)v3 + 7));
              if (v18) {
                nw_protocol_stack_set_transport_protocol(v17, v18);
              }
              nw_protocol_options_t v19 = nw_protocol_stack_copy_internet_protocol(*((nw_protocol_stack_t *)v3 + 7));
              if (v19) {
                nw_protocol_stack_set_internet_protocol(v17, v19);
              }
            }
            goto LABEL_30;
          }
LABEL_21:
          nw_parameters_clear_protocol_stack(v6, 2);
          goto LABEL_22;
        }
LABEL_34:
        nw_parameters_clear_protocol_stack(v6, 3);
        if ((v3[8] & 4) == 0) {
          goto LABEL_22;
        }
        goto LABEL_21;
      }
LABEL_13:
      nw_parameters_set_tfo_no_cookie(v6, 1);
      goto LABEL_14;
    }
LABEL_12:
    nw_parameters_set_tfo(v6, 1);
    if ((v3[8] & 0x40) == 0) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  os_log_type_t v27 = __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  uint64_t v44 = "nw_protocol_transform_modify_parameters";
  BOOL v24 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t v42 = OS_LOG_TYPE_ERROR;
  char v41 = 0;
  if (!__nwlog_fault(v24, &v42, &v41)) {
    goto LABEL_69;
  }
  if (v42 == OS_LOG_TYPE_FAULT)
  {
    os_log_type_t v25 = __nwlog_obj();
    os_log_type_t v28 = v42;
    if (os_log_type_enabled(v25, v42))
    {
      *(_DWORD *)int buf = 136446210;
      uint64_t v44 = "nw_protocol_transform_modify_parameters";
      _os_log_impl(&dword_1830D4000, v25, v28, "%{public}s called with null parameters_to_modify", buf, 0xCu);
    }
    goto LABEL_68;
  }
  if (!v41)
  {
    os_log_type_t v25 = __nwlog_obj();
    os_log_type_t v36 = v42;
    if (os_log_type_enabled(v25, v42))
    {
      *(_DWORD *)int buf = 136446210;
      uint64_t v44 = "nw_protocol_transform_modify_parameters";
      _os_log_impl(&dword_1830D4000, v25, v36, "%{public}s called with null parameters_to_modify, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_68;
  }
  int v32 = (char *)__nw_create_backtrace_string();
  os_log_type_t v25 = __nwlog_obj();
  os_log_type_t v33 = v42;
  BOOL v34 = os_log_type_enabled(v25, v42);
  if (!v32)
  {
    if (v34)
    {
      *(_DWORD *)int buf = 136446210;
      uint64_t v44 = "nw_protocol_transform_modify_parameters";
      _os_log_impl(&dword_1830D4000, v25, v33, "%{public}s called with null parameters_to_modify, no backtrace", buf, 0xCu);
    }
    goto LABEL_68;
  }
  if (v34)
  {
    *(_DWORD *)int buf = 136446466;
    uint64_t v44 = "nw_protocol_transform_modify_parameters";
    __int16 v45 = 2082;
    os_log_type_t v46 = v32;
    _os_log_impl(&dword_1830D4000, v25, v33, "%{public}s called with null parameters_to_modify, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v32);
  if (v24) {
    goto LABEL_70;
  }
LABEL_30:
}

void sub_18321D6F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  _Unwind_Resume(a1);
}

void nw_endpoint_flow_start_child(void *a1)
{
  uint64_t v144 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (!v1)
  {
    os_log_type_t v35 = __nwlog_obj();
    LODWORD(buf[0]) = 136446210;
    *(void *)((char *)buf + 4) = "nw_endpoint_handler_get_mode";
    os_log_type_t v36 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t v140 = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v36, type, &v140))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v37 = __nwlog_obj();
        os_log_type_t v38 = type[0];
        if (os_log_type_enabled(v37, type[0]))
        {
          LODWORD(buf[0]) = 136446210;
          *(void *)((char *)buf + 4) = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_1830D4000, v37, v38, "%{public}s called with null handler", (uint8_t *)buf, 0xCu);
        }
      }
      else if (v140)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v37 = __nwlog_obj();
        os_log_type_t v46 = type[0];
        BOOL v47 = os_log_type_enabled(v37, type[0]);
        if (backtrace_string)
        {
          if (v47)
          {
            LODWORD(buf[0]) = 136446466;
            *(void *)((char *)buf + 4) = "nw_endpoint_handler_get_mode";
            WORD6(buf[0]) = 2082;
            *(void *)((char *)buf + 14) = backtrace_string;
            _os_log_impl(&dword_1830D4000, v37, v46, "%{public}s called with null handler, dumping backtrace:%{public}s", (uint8_t *)buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_65;
        }
        if (v47)
        {
          LODWORD(buf[0]) = 136446210;
          *(void *)((char *)buf + 4) = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_1830D4000, v37, v46, "%{public}s called with null handler, no backtrace", (uint8_t *)buf, 0xCu);
        }
      }
      else
      {
        os_log_type_t v37 = __nwlog_obj();
        os_log_type_t v53 = type[0];
        if (os_log_type_enabled(v37, type[0]))
        {
          LODWORD(buf[0]) = 136446210;
          *(void *)((char *)buf + 4) = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_1830D4000, v37, v53, "%{public}s called with null handler, backtrace limit exceeded", (uint8_t *)buf, 0xCu);
        }
      }
    }
LABEL_65:
    if (v36) {
      free(v36);
    }
    unsigned int v3 = 0;
    uint64_t v2 = 0;
    goto LABEL_68;
  }
  unsigned int v3 = v1[29];

  if (v3 == 2)
  {
    double v135 = v2;
    id v4 = v2;
    char v5 = *((unsigned char *)v4 + 268);

    if ((v5 & 0x20) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      uint64_t v6 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      {
        unsigned int v7 = v4;

        char v8 = v7;
        char v9 = *((unsigned char *)v4 + 268);

        if (v9) {
          int v10 = "dry-run ";
        }
        else {
          int v10 = "";
        }
        uint64_t v134 = v4;
        nw_endpoint_t v11 = nw_endpoint_handler_copy_endpoint(v8);
        logging_description = nw_endpoint_get_logging_description(v11);
        BOOL v13 = v7 + 168;
        char v14 = v8;
        id v15 = v14;
        uint64_t v16 = v14[30];
        if (v16 > 5) {
          BOOL v17 = "unknown-state";
        }
        else {
          BOOL v17 = off_1E523FB38[v16];
        }

        __int16 v18 = v15;
        nw_protocol_options_t v19 = v18;
        uint64_t v20 = "path";
        switch(v135[29])
        {
          case 0:
            break;
          case 1:
            uint64_t v20 = "resolver";
            break;
          case 2:
            uint64_t v20 = nw_endpoint_flow_mode_string(v18[31]);
            break;
          case 3:
            uint64_t v20 = "proxy";
            break;
          case 4:
            uint64_t v20 = "fallback";
            break;
          case 5:
            uint64_t v20 = "transform";
            break;
          default:
            uint64_t v20 = "unknown-mode";
            break;
        }

        int v21 = v19;
        os_unfair_lock_lock((os_unfair_lock_t)v21 + 28);
        id v22 = v21[8];
        os_unfair_lock_unlock((os_unfair_lock_t)v21 + 28);

        LODWORD(buf[0]) = 136447746;
        *(void *)((char *)buf + 4) = "nw_endpoint_flow_start_child";
        WORD6(buf[0]) = 2082;
        *(void *)((char *)buf + 14) = v13;
        WORD3(buf[1]) = 2082;
        *((void *)&buf[1] + 1) = v10;
        LOWORD(buf[2]) = 2082;
        *(void *)((char *)&buf[2] + 2) = logging_description;
        WORD5(buf[2]) = 2082;
        *(void *)((char *)&buf[2] + 12) = v17;
        WORD2(buf[3]) = 2082;
        *(void *)((char *)&buf[3] + 6) = v20;
        HIWORD(buf[3]) = 2114;
        *(void *)&long long v142 = v22;
        _os_log_impl(&dword_1830D4000, v6, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] creating and starting child handler", (uint8_t *)buf, 0x48u);

        id v4 = v134;
      }
    }
    os_log_type_t v23 = nw_endpoint_handler_copy_flow(v4);
    nw_endpoint_t v136 = nw_endpoint_handler_copy_endpoint(v4);
    BOOL v24 = v4;
    id v25 = v24[4];

    id v26 = v25;
    BOOL v27 = -[NWConcrete_nw_parameters initWithParameters:stripConnected:shallowCopy:]((id *)[NWConcrete_nw_parameters alloc], v26, 0, 0);

    os_log_type_t v28 = (void *)*((void *)v23 + 94);
    if (!v28)
    {
LABEL_184:
      nw_parameters_clear_protocol_stack((void *)v27, 5);
      if ((*((unsigned char *)v23 + 35) & 0x20) == 0)
      {
LABEL_190:
        int v107 = v24;
        os_unfair_lock_lock((os_unfair_lock_t)v107 + 28);
        id v108 = v107[8];
        os_unfair_lock_unlock((os_unfair_lock_t)v107 + 28);

        BOOL has_custom_proxy_configs = nw_parameters_has_custom_proxy_configs((void *)v27);
        BOOL should_use_proxy = nw_endpoint_proxy_handler_should_use_proxy(v107, v108, has_custom_proxy_configs);

        if (should_use_proxy)
        {
          if (nw_parameters_get_logging_disabled(v27))
          {
            nw_parameters_set_website_attribution((void *)v27, 0);
          }
          else
          {
            os_log_type_t v111 = v107;
            BOOL v112 = v136;
            id v113 = (id)v27;
            int v114 = v113;
            if (v112 && v113 && (!v112[11].isa || !nw_endpoint_hostname_matches_tracker(v112)))
            {
              int v115 = v112;
              int v116 = [v115 type];

              if (v116 == 2)
              {
                unsigned int v117 = v115;
                __int16 v133 = (const char *)[v117 hostname];

                if (v133)
                {
                  uint64_t v143 = 0;
                  long long v142 = 0u;
                  memset(buf, 0, sizeof(buf));
                  nw_parameters_to_ne_app_context(v114, (uint64_t)buf);
                  *(void *)os_log_type_t type = 0;
                  os_log_type_t v140 = OS_LOG_TYPE_DEFAULT;
                  int disposition = ne_tracker_get_disposition();
                  if (disposition != 1)
                  {
                    nw_parameters_set_is_known_tracker(v114, 1);
                    nw_endpoint_set_tracker_owner(v117, *(const char **)type);
                    nw_endpoint_set_can_block_request(v117, v140);
                    nw_endpoint_set_known_tracker_name(v117, v133);
                    nw_endpoint_set_is_approved_app_domain(v117, disposition == 3);
                  }
                  if (*(void *)type) {
                    free(*(void **)type);
                  }
                }
              }
            }
          }
        }
        inner = nw_endpoint_handler_create_inner(v136, (void *)v27, nw_endpoint_flow_receive_report, v107, v107, 0, 0);
        unsigned int v120 = (void *)*((void *)v23 + 116);
        *((void *)v23 + 116) = inner;

        *((_DWORD *)v107 + 20) = 786435;
        nw_endpoint_handler_report(v107, 0, (_WORD *)v107 + 40, 0);
        nw_endpoint_handler_start(*((void **)v23 + 116));

        int v55 = v135;
        goto LABEL_205;
      }
      nw_parameters_set_use_enhanced_privacy_mode((void *)v27, 0);
      id v105 = nw_parameters_copy_context(v26);
      if (nw_context_get_privacy_level(v105) != 4)
      {
LABEL_189:

        goto LABEL_190;
      }
      int v106 = (id)v27;
      if (v106)
      {
        v106[12] |= 0x100000000000uLL;
LABEL_188:

        goto LABEL_189;
      }
      unsigned int v121 = __nwlog_obj();
      LODWORD(buf[0]) = 136446210;
      *(void *)((char *)buf + 4) = "nw_parameters_set_inherited_from_silent_context";
      unsigned int v122 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      os_log_type_t v140 = OS_LOG_TYPE_DEFAULT;
      if (__nwlog_fault(v122, type, &v140))
      {
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          int64_t v123 = __nwlog_obj();
          os_log_type_t v124 = type[0];
          if (os_log_type_enabled(v123, type[0]))
          {
            LODWORD(buf[0]) = 136446210;
            *(void *)((char *)buf + 4) = "nw_parameters_set_inherited_from_silent_context";
            _os_log_impl(&dword_1830D4000, v123, v124, "%{public}s called with null parameters", (uint8_t *)buf, 0xCu);
          }
        }
        else if (v140)
        {
          id v125 = (char *)__nw_create_backtrace_string();
          int64_t v123 = __nwlog_obj();
          os_log_type_t v126 = type[0];
          BOOL v127 = os_log_type_enabled(v123, type[0]);
          if (v125)
          {
            if (v127)
            {
              LODWORD(buf[0]) = 136446466;
              *(void *)((char *)buf + 4) = "nw_parameters_set_inherited_from_silent_context";
              WORD6(buf[0]) = 2082;
              *(void *)((char *)buf + 14) = v125;
              _os_log_impl(&dword_1830D4000, v123, v126, "%{public}s called with null parameters, dumping backtrace:%{public}s", (uint8_t *)buf, 0x16u);
            }

            free(v125);
            goto LABEL_222;
          }
          if (v127)
          {
            LODWORD(buf[0]) = 136446210;
            *(void *)((char *)buf + 4) = "nw_parameters_set_inherited_from_silent_context";
            _os_log_impl(&dword_1830D4000, v123, v126, "%{public}s called with null parameters, no backtrace", (uint8_t *)buf, 0xCu);
          }
        }
        else
        {
          int64_t v123 = __nwlog_obj();
          os_log_type_t v128 = type[0];
          if (os_log_type_enabled(v123, type[0]))
          {
            LODWORD(buf[0]) = 136446210;
            *(void *)((char *)buf + 4) = "nw_parameters_set_inherited_from_silent_context";
            _os_log_impl(&dword_1830D4000, v123, v128, "%{public}s called with null parameters, backtrace limit exceeded", (uint8_t *)buf, 0xCu);
          }
        }
      }
LABEL_222:
      if (v122) {
        free(v122);
      }
      int v106 = 0;
      goto LABEL_188;
    }
    BOOL v29 = (void *)v28[5];
    if (v29 == &nw_protocol_ref_counted_handle)
    {
      uint64_t v31 = v28[11];
      if (v31) {
        v28[11] = v31 + 1;
      }
      char v30 = -1;
    }
    else
    {
      char v30 = 0;
    }
    *(void *)os_log_type_t type = v28;
    char v139 = v30;
    uint64_t v32 = v28[3];
    if (v32)
    {
      os_log_type_t v33 = *(void (**)(void *))(v32 + 136);
      if (v33)
      {
        BOOL v34 = v33(v28);
        if (v29 != &nw_protocol_ref_counted_handle) {
          goto LABEL_31;
        }
        goto LABEL_116;
      }
    }
    BOOL v39 = __nwlog_obj();
    BOOL v40 = (const char *)v28[2];
    LODWORD(buf[0]) = 136446722;
    *(void *)((char *)buf + 4) = "__nw_protocol_get_remote_endpoint";
    if (!v40) {
      BOOL v40 = "invalid";
    }
    WORD6(buf[0]) = 2082;
    *(void *)((char *)buf + 14) = v40;
    WORD3(buf[1]) = 2048;
    *((void *)&buf[1] + 1) = v28;
    os_log_type_t v131 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t v140 = OS_LOG_TYPE_ERROR;
    char v137 = 0;
    char v41 = (char *)v131;
    if (!__nwlog_fault(v131, &v140, &v137))
    {
LABEL_113:
      if (v41) {
        free(v41);
      }
      BOOL v34 = 0;
      if (v29 != &nw_protocol_ref_counted_handle)
      {
LABEL_31:
        if (!v34)
        {
LABEL_118:
          os_log_type_t v72 = (void *)*((void *)v23 + 94);
          if (v72)
          {
            uint32_t v73 = (void *)v72[5];
            if (v73 == &nw_protocol_ref_counted_handle)
            {
              uint64_t v75 = v72[11];
              if (v75) {
                v72[11] = v75 + 1;
              }
              char v74 = -1;
            }
            else
            {
              char v74 = 0;
            }
            *(void *)os_log_type_t type = v72;
            char v139 = v74;
            uint64_t v76 = v72[3];
            if (v76)
            {
              unsigned int v77 = *(void (**)(void *))(v76 + 112);
              if (v77)
              {
                unsigned int v78 = v77(v72);
                if (v73 != &nw_protocol_ref_counted_handle) {
                  goto LABEL_127;
                }
                goto LABEL_169;
              }
            }
            uint64_t v79 = __nwlog_obj();
            int64_t v80 = (const char *)v72[2];
            LODWORD(buf[0]) = 136446722;
            *(void *)((char *)buf + 4) = "__nw_protocol_get_parameters";
            if (!v80) {
              int64_t v80 = "invalid";
            }
            WORD6(buf[0]) = 2082;
            *(void *)((char *)buf + 14) = v80;
            WORD3(buf[1]) = 2048;
            *((void *)&buf[1] + 1) = v72;
            char v132 = (const char *)_os_log_send_and_compose_impl();

            os_log_type_t v140 = OS_LOG_TYPE_ERROR;
            char v137 = 0;
            uint64_t v81 = (char *)v132;
            if (!__nwlog_fault(v132, &v140, &v137))
            {
LABEL_166:
              if (v81) {
                free(v81);
              }
              unsigned int v78 = 0;
              if (v73 != &nw_protocol_ref_counted_handle)
              {
LABEL_127:
                if (!v78) {
                  goto LABEL_182;
                }
                goto LABEL_170;
              }
LABEL_169:
              nw::release_if_needed<nw_protocol *>((uint64_t *)type);
              if (!v78)
              {
LABEL_182:
                id v99 = 0;
LABEL_183:

                goto LABEL_184;
              }
LABEL_170:
              id v99 = v78;
              BOOL v100 = -[NWConcrete_nw_parameters initWithParameters:stripConnected:shallowCopy:]((id *)[NWConcrete_nw_parameters alloc], v99, 0, 0);

              if (v34)
              {
                id v101 = v34;
                BOOL v102 = (*((unsigned char *)v101 + 231) & 4) == 0;

                if (!v102)
                {
                  id v103 = *((id *)v101 + 1);
                  nw_parameters_set_context((void *)v100, v103);
                }
              }
              BOOL v27 = v100;
              goto LABEL_183;
            }
            if (v140 == OS_LOG_TYPE_FAULT)
            {
              int64_t v82 = __nwlog_obj();
              os_log_type_t v130 = v140;
              if (os_log_type_enabled(v82, v140))
              {
                int v83 = (const char *)v72[2];
                if (!v83) {
                  int v83 = "invalid";
                }
                LODWORD(buf[0]) = 136446722;
                *(void *)((char *)buf + 4) = "__nw_protocol_get_parameters";
                WORD6(buf[0]) = 2082;
                *(void *)((char *)buf + 14) = v83;
                WORD3(buf[1]) = 2048;
                *((void *)&buf[1] + 1) = v72;
                _os_log_impl(&dword_1830D4000, v82, v130, "%{public}s protocol %{public}s (%p) has invalid get_parameters callback", (uint8_t *)buf, 0x20u);
              }
            }
            else
            {
              if (!v137)
              {
                BOOL v94 = __nwlog_obj();
                os_log_type_t v95 = v140;
                unsigned int v96 = v94;
                if (os_log_type_enabled(v94, v140))
                {
                  BOOL v97 = (const char *)v72[2];
                  if (!v97) {
                    BOOL v97 = "invalid";
                  }
                  LODWORD(buf[0]) = 136446722;
                  *(void *)((char *)buf + 4) = "__nw_protocol_get_parameters";
                  WORD6(buf[0]) = 2082;
                  *(void *)((char *)buf + 14) = v97;
                  WORD3(buf[1]) = 2048;
                  *((void *)&buf[1] + 1) = v72;
                  _os_log_impl(&dword_1830D4000, v96, v95, "%{public}s protocol %{public}s (%p) has invalid get_parameters callback, backtrace limit exceeded", (uint8_t *)buf, 0x20u);
                }

                goto LABEL_165;
              }
              BOOL v88 = (char *)__nw_create_backtrace_string();
              int64_t v82 = __nwlog_obj();
              os_log_type_t v129 = v140;
              BOOL v89 = os_log_type_enabled(v82, v140);
              if (v88)
              {
                if (v89)
                {
                  __int16 v90 = (const char *)v72[2];
                  if (!v90) {
                    __int16 v90 = "invalid";
                  }
                  LODWORD(buf[0]) = 136446978;
                  *(void *)((char *)buf + 4) = "__nw_protocol_get_parameters";
                  WORD6(buf[0]) = 2082;
                  *(void *)((char *)buf + 14) = v90;
                  WORD3(buf[1]) = 2048;
                  *((void *)&buf[1] + 1) = v72;
                  LOWORD(buf[2]) = 2082;
                  *(void *)((char *)&buf[2] + 2) = v88;
                  _os_log_impl(&dword_1830D4000, v82, v129, "%{public}s protocol %{public}s (%p) has invalid get_parameters callback, dumping backtrace:%{public}s", (uint8_t *)buf, 0x2Au);
                }

                free(v88);
                goto LABEL_165;
              }
              if (v89)
              {
                BOOL v98 = (const char *)v72[2];
                if (!v98) {
                  BOOL v98 = "invalid";
                }
                LODWORD(buf[0]) = 136446722;
                *(void *)((char *)buf + 4) = "__nw_protocol_get_parameters";
                WORD6(buf[0]) = 2082;
                *(void *)((char *)buf + 14) = v98;
                WORD3(buf[1]) = 2048;
                *((void *)&buf[1] + 1) = v72;
                _os_log_impl(&dword_1830D4000, v82, v129, "%{public}s protocol %{public}s (%p) has invalid get_parameters callback, no backtrace", (uint8_t *)buf, 0x20u);
              }
            }

LABEL_165:
            uint64_t v81 = (char *)v132;
            goto LABEL_166;
          }
          int v84 = __nwlog_obj();
          LODWORD(buf[0]) = 136446210;
          *(void *)((char *)buf + 4) = "__nw_protocol_get_parameters";
          unsigned int v85 = (char *)_os_log_send_and_compose_impl();

          type[0] = OS_LOG_TYPE_ERROR;
          os_log_type_t v140 = OS_LOG_TYPE_DEFAULT;
          if (__nwlog_fault(v85, type, &v140))
          {
            if (type[0] == OS_LOG_TYPE_FAULT)
            {
              int v86 = __nwlog_obj();
              os_log_type_t v87 = type[0];
              if (os_log_type_enabled(v86, type[0]))
              {
                LODWORD(buf[0]) = 136446210;
                *(void *)((char *)buf + 4) = "__nw_protocol_get_parameters";
                _os_log_impl(&dword_1830D4000, v86, v87, "%{public}s called with null protocol", (uint8_t *)buf, 0xCu);
              }
            }
            else if (v140)
            {
              os_log_type_t v91 = (char *)__nw_create_backtrace_string();
              int v86 = __nwlog_obj();
              os_log_type_t v92 = type[0];
              BOOL v93 = os_log_type_enabled(v86, type[0]);
              if (v91)
              {
                if (v93)
                {
                  LODWORD(buf[0]) = 136446466;
                  *(void *)((char *)buf + 4) = "__nw_protocol_get_parameters";
                  WORD6(buf[0]) = 2082;
                  *(void *)((char *)buf + 14) = v91;
                  _os_log_impl(&dword_1830D4000, v86, v92, "%{public}s called with null protocol, dumping backtrace:%{public}s", (uint8_t *)buf, 0x16u);
                }

                free(v91);
                goto LABEL_180;
              }
              if (v93)
              {
                LODWORD(buf[0]) = 136446210;
                *(void *)((char *)buf + 4) = "__nw_protocol_get_parameters";
                _os_log_impl(&dword_1830D4000, v86, v92, "%{public}s called with null protocol, no backtrace", (uint8_t *)buf, 0xCu);
              }
            }
            else
            {
              int v86 = __nwlog_obj();
              os_log_type_t v104 = type[0];
              if (os_log_type_enabled(v86, type[0]))
              {
                LODWORD(buf[0]) = 136446210;
                *(void *)((char *)buf + 4) = "__nw_protocol_get_parameters";
                _os_log_impl(&dword_1830D4000, v86, v104, "%{public}s called with null protocol, backtrace limit exceeded", (uint8_t *)buf, 0xCu);
              }
            }
          }
LABEL_180:
          if (v85) {
            free(v85);
          }
          goto LABEL_182;
        }
LABEL_117:
        size_t v71 = v34;

        nw_endpoint_t v136 = v71;
        goto LABEL_118;
      }
LABEL_116:
      nw::release_if_needed<nw_protocol *>((uint64_t *)type);
      if (!v34) {
        goto LABEL_118;
      }
      goto LABEL_117;
    }
    if (v140 == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v42 = __nwlog_obj();
      os_log_type_t v43 = v140;
      if (os_log_type_enabled(v42, v140))
      {
        uint64_t v44 = (const char *)v28[2];
        if (!v44) {
          uint64_t v44 = "invalid";
        }
        LODWORD(buf[0]) = 136446722;
        *(void *)((char *)buf + 4) = "__nw_protocol_get_remote_endpoint";
        WORD6(buf[0]) = 2082;
        *(void *)((char *)buf + 14) = v44;
        WORD3(buf[1]) = 2048;
        *((void *)&buf[1] + 1) = v28;
        _os_log_impl(&dword_1830D4000, v42, v43, "%{public}s protocol %{public}s (%p) has invalid get_remote_endpoint callback", (uint8_t *)buf, 0x20u);
      }
    }
    else
    {
      if (v137)
      {
        uint64_t v48 = (char *)__nw_create_backtrace_string();
        uint64_t v49 = __nwlog_obj();
        os_log_type_t v50 = v140;
        BOOL v51 = os_log_type_enabled(v49, v140);
        if (v48)
        {
          if (v51)
          {
            BOOL v52 = (const char *)v28[2];
            if (!v52) {
              BOOL v52 = "invalid";
            }
            LODWORD(buf[0]) = 136446978;
            *(void *)((char *)buf + 4) = "__nw_protocol_get_remote_endpoint";
            WORD6(buf[0]) = 2082;
            *(void *)((char *)buf + 14) = v52;
            WORD3(buf[1]) = 2048;
            *((void *)&buf[1] + 1) = v28;
            LOWORD(buf[2]) = 2082;
            *(void *)((char *)&buf[2] + 2) = v48;
            _os_log_impl(&dword_1830D4000, v49, v50, "%{public}s protocol %{public}s (%p) has invalid get_remote_endpoint callback, dumping backtrace:%{public}s", (uint8_t *)buf, 0x2Au);
          }

          free(v48);
        }
        else
        {
          if (v51)
          {
            unsigned int v70 = (const char *)v28[2];
            if (!v70) {
              unsigned int v70 = "invalid";
            }
            LODWORD(buf[0]) = 136446722;
            *(void *)((char *)buf + 4) = "__nw_protocol_get_remote_endpoint";
            WORD6(buf[0]) = 2082;
            *(void *)((char *)buf + 14) = v70;
            WORD3(buf[1]) = 2048;
            *((void *)&buf[1] + 1) = v28;
            _os_log_impl(&dword_1830D4000, v49, v50, "%{public}s protocol %{public}s (%p) has invalid get_remote_endpoint callback, no backtrace", (uint8_t *)buf, 0x20u);
          }
        }
        goto LABEL_112;
      }
      os_log_type_t v42 = __nwlog_obj();
      os_log_type_t v68 = v140;
      if (os_log_type_enabled(v42, v140))
      {
        unsigned int v69 = (const char *)v28[2];
        if (!v69) {
          unsigned int v69 = "invalid";
        }
        LODWORD(buf[0]) = 136446722;
        *(void *)((char *)buf + 4) = "__nw_protocol_get_remote_endpoint";
        WORD6(buf[0]) = 2082;
        *(void *)((char *)buf + 14) = v69;
        WORD3(buf[1]) = 2048;
        *((void *)&buf[1] + 1) = v28;
        _os_log_impl(&dword_1830D4000, v42, v68, "%{public}s protocol %{public}s (%p) has invalid get_remote_endpoint callback, backtrace limit exceeded", (uint8_t *)buf, 0x20u);
      }
    }

LABEL_112:
    char v41 = (char *)v131;
    goto LABEL_113;
  }
LABEL_68:
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v54 = (id)gLogObj;
  int v55 = v2;
  if (v3 > 5) {
    __int16 v56 = "unknown-mode";
  }
  else {
    __int16 v56 = off_1E523FB08[v3];
  }
  LODWORD(buf[0]) = 136446722;
  *(void *)((char *)buf + 4) = "nw_endpoint_flow_start_child";
  WORD6(buf[0]) = 2082;
  *(void *)((char *)buf + 14) = v56;
  WORD3(buf[1]) = 2082;
  *((void *)&buf[1] + 1) = "flow";
  int v57 = (void *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  os_log_type_t v140 = OS_LOG_TYPE_DEFAULT;
  if (!__nwlog_fault((const char *)v57, type, &v140))
  {
LABEL_100:
    if (!v57) {
      goto LABEL_205;
    }
LABEL_101:
    free(v57);
    goto LABEL_205;
  }
  if (type[0] == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    __int16 v58 = (id)gLogObj;
    os_log_type_t v59 = type[0];
    if (os_log_type_enabled(v58, type[0]))
    {
      if (v3 > 5) {
        int v60 = "unknown-mode";
      }
      else {
        int v60 = off_1E523FB08[v3];
      }
      LODWORD(buf[0]) = 136446722;
      *(void *)((char *)buf + 4) = "nw_endpoint_flow_start_child";
      WORD6(buf[0]) = 2082;
      *(void *)((char *)buf + 14) = v60;
      WORD3(buf[1]) = 2082;
      *((void *)&buf[1] + 1) = "flow";
      _os_log_impl(&dword_1830D4000, v58, v59, "%{public}s Handler is in mode %{public}s, expected %{public}s", (uint8_t *)buf, 0x20u);
    }
LABEL_99:

    goto LABEL_100;
  }
  if (v140 == OS_LOG_TYPE_DEFAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    __int16 v58 = (id)gLogObj;
    os_log_type_t v65 = type[0];
    if (os_log_type_enabled(v58, type[0]))
    {
      if (v3 > 5) {
        uint64_t v66 = "unknown-mode";
      }
      else {
        uint64_t v66 = off_1E523FB08[v3];
      }
      LODWORD(buf[0]) = 136446722;
      *(void *)((char *)buf + 4) = "nw_endpoint_flow_start_child";
      WORD6(buf[0]) = 2082;
      *(void *)((char *)buf + 14) = v66;
      WORD3(buf[1]) = 2082;
      *((void *)&buf[1] + 1) = "flow";
      _os_log_impl(&dword_1830D4000, v58, v65, "%{public}s Handler is in mode %{public}s, expected %{public}s, backtrace limit exceeded", (uint8_t *)buf, 0x20u);
    }
    goto LABEL_99;
  }
  long long v61 = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  __int16 v58 = (id)gLogObj;
  os_log_type_t v62 = type[0];
  BOOL v63 = os_log_type_enabled(v58, type[0]);
  if (!v61)
  {
    if (v63)
    {
      if (v3 > 5) {
        unsigned int v67 = "unknown-mode";
      }
      else {
        unsigned int v67 = off_1E523FB08[v3];
      }
      LODWORD(buf[0]) = 136446722;
      *(void *)((char *)buf + 4) = "nw_endpoint_flow_start_child";
      WORD6(buf[0]) = 2082;
      *(void *)((char *)buf + 14) = v67;
      WORD3(buf[1]) = 2082;
      *((void *)&buf[1] + 1) = "flow";
      _os_log_impl(&dword_1830D4000, v58, v62, "%{public}s Handler is in mode %{public}s, expected %{public}s, no backtrace", (uint8_t *)buf, 0x20u);
    }
    goto LABEL_99;
  }
  if (v63)
  {
    if (v3 > 5) {
      long long v64 = "unknown-mode";
    }
    else {
      long long v64 = off_1E523FB08[v3];
    }
    LODWORD(buf[0]) = 136446978;
    *(void *)((char *)buf + 4) = "nw_endpoint_flow_start_child";
    WORD6(buf[0]) = 2082;
    *(void *)((char *)buf + 14) = v64;
    WORD3(buf[1]) = 2082;
    *((void *)&buf[1] + 1) = "flow";
    LOWORD(buf[2]) = 2082;
    *(void *)((char *)&buf[2] + 2) = v61;
    _os_log_impl(&dword_1830D4000, v58, v62, "%{public}s Handler is in mode %{public}s, expected %{public}s, dumping backtrace:%{public}s", (uint8_t *)buf, 0x2Au);
  }

  free(v61);
  if (v57) {
    goto LABEL_101;
  }
LABEL_205:
}

void sub_18321F014(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_parameters_clear_protocol_stack(void *a1, int a2)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  unsigned int v3 = a1;
  id v4 = v3;
  if (v3)
  {
    char v5 = v3[19];
    uint64_t v6 = v5;
    if (v5)
    {
      switch(a2)
      {
        case 2:
          unsigned int v7 = (void *)v5[6];
          v5[6] = 0;
          break;
        case 3:
          int v10 = (void *)v5[3];
          v5[3] = 0;

          unsigned int v7 = (void *)v6[4];
          v6[4] = 0;
          break;
        case 4:
          unsigned int v7 = (void *)v5[2];
          v5[2] = 0;
          break;
        case 5:
          unsigned int v7 = (void *)v5[1];
          v5[1] = 0;
          break;
        default:
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          char v8 = (id)gLogObj;
          if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)int buf = 136446466;
            uint64_t v31 = "nw_parameters_clear_protocol_stack";
            __int16 v32 = 1024;
            LODWORD(v33) = a2;
            _os_log_impl(&dword_1830D4000, v8, OS_LOG_TYPE_ERROR, "%{public}s Unsupported protocol level %u", buf, 0x12u);
          }

          goto LABEL_8;
      }

      uint64_t v9 = 1;
LABEL_13:

      goto LABEL_14;
    }
    uint64_t v16 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v31 = "nw_parameters_clear_protocol_stack";
    BOOL v17 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v28 = 0;
    if (__nwlog_fault(v17, &type, &v28))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __int16 v18 = __nwlog_obj();
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v18, type))
        {
          *(_DWORD *)int buf = 136446210;
          uint64_t v31 = "nw_parameters_clear_protocol_stack";
          _os_log_impl(&dword_1830D4000, v18, v19, "%{public}s called with null stack", buf, 0xCu);
        }
      }
      else if (v28)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __int16 v18 = __nwlog_obj();
        os_log_type_t v24 = type;
        BOOL v25 = os_log_type_enabled(v18, type);
        if (backtrace_string)
        {
          if (v25)
          {
            *(_DWORD *)int buf = 136446466;
            uint64_t v31 = "nw_parameters_clear_protocol_stack";
            __int16 v32 = 2082;
            os_log_type_t v33 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v18, v24, "%{public}s called with null stack, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_50;
        }
        if (v25)
        {
          *(_DWORD *)int buf = 136446210;
          uint64_t v31 = "nw_parameters_clear_protocol_stack";
          _os_log_impl(&dword_1830D4000, v18, v24, "%{public}s called with null stack, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __int16 v18 = __nwlog_obj();
        os_log_type_t v27 = type;
        if (os_log_type_enabled(v18, type))
        {
          *(_DWORD *)int buf = 136446210;
          uint64_t v31 = "nw_parameters_clear_protocol_stack";
          _os_log_impl(&dword_1830D4000, v18, v27, "%{public}s called with null stack, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_50:
    if (v17) {
      free(v17);
    }
LABEL_8:
    uint64_t v9 = 0;
    goto LABEL_13;
  }
  char v12 = __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  uint64_t v31 = "nw_parameters_clear_protocol_stack";
  BOOL v13 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v28 = 0;
  if (__nwlog_fault(v13, &type, &v28))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v31 = "nw_parameters_clear_protocol_stack";
        _os_log_impl(&dword_1830D4000, v14, v15, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v28)
    {
      uint64_t v20 = (char *)__nw_create_backtrace_string();
      char v14 = __nwlog_obj();
      os_log_type_t v21 = type;
      BOOL v22 = os_log_type_enabled(v14, type);
      if (v20)
      {
        if (v22)
        {
          *(_DWORD *)int buf = 136446466;
          uint64_t v31 = "nw_parameters_clear_protocol_stack";
          __int16 v32 = 2082;
          os_log_type_t v33 = v20;
          _os_log_impl(&dword_1830D4000, v14, v21, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v20);
        goto LABEL_44;
      }
      if (v22)
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v31 = "nw_parameters_clear_protocol_stack";
        _os_log_impl(&dword_1830D4000, v14, v21, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      char v14 = __nwlog_obj();
      os_log_type_t v26 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v31 = "nw_parameters_clear_protocol_stack";
        _os_log_impl(&dword_1830D4000, v14, v26, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_44:
  if (v13) {
    free(v13);
  }
  uint64_t v9 = 0;
LABEL_14:

  return v9;
}

void nw_protocol_stack_set_transport_protocol(nw_protocol_stack_t stack, nw_protocol_options_t protocol)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  nw_protocol_stack_t v3 = stack;
  id v4 = protocol;
  if (v3)
  {
    objc_storeStrong((id *)&v3[3].isa, protocol);
    goto LABEL_3;
  }
  char v5 = __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  uint64_t v16 = "nw_protocol_stack_set_transport_protocol";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      unsigned int v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v16 = "nw_protocol_stack_set_transport_protocol";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null stack", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      unsigned int v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          uint64_t v16 = "nw_protocol_stack_set_transport_protocol";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null stack, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v16 = "nw_protocol_stack_set_transport_protocol";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null stack, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      unsigned int v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v16 = "nw_protocol_stack_set_transport_protocol";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null stack, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
LABEL_3:
}

void nw_protocol_stack_set_internet_protocol(void *a1, void *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  nw_protocol_stack_t v3 = a1;
  id v4 = a2;
  if (v3)
  {
    objc_storeStrong(v3 + 6, a2);
    goto LABEL_3;
  }
  char v5 = __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  uint64_t v16 = "nw_protocol_stack_set_internet_protocol";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      unsigned int v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v16 = "nw_protocol_stack_set_internet_protocol";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null stack", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      unsigned int v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          uint64_t v16 = "nw_protocol_stack_set_internet_protocol";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null stack, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v16 = "nw_protocol_stack_set_internet_protocol";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null stack, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      unsigned int v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v16 = "nw_protocol_stack_set_internet_protocol";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null stack, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
LABEL_3:
}

id nw_endpoint_copy_parent_endpoint(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    id v3 = v1[14];
    goto LABEL_3;
  }
  char v5 = __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  uint64_t v16 = "nw_endpoint_copy_parent_endpoint";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      unsigned int v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v16 = "nw_endpoint_copy_parent_endpoint";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null endpoint", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      unsigned int v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          uint64_t v16 = "nw_endpoint_copy_parent_endpoint";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v16 = "nw_endpoint_copy_parent_endpoint";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      unsigned int v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v16 = "nw_endpoint_copy_parent_endpoint";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  id v3 = 0;
LABEL_3:

  return v3;
}

BOOL nw_protocol_create_inbound_data(void *a1, size_t a2, void *a3)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  char v5 = a1;
  id v6 = a3;
  if (!v5)
  {
    uint64_t v20 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    char v41 = "nw_protocol_create_inbound_data";
    os_log_type_t v21 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v38 = 0;
    if (!__nwlog_fault(v21, &type, &v38)) {
      goto LABEL_76;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v22 = __nwlog_obj();
      os_log_type_t v23 = type;
      if (os_log_type_enabled(v22, type))
      {
        *(_DWORD *)int buf = 136446210;
        char v41 = "nw_protocol_create_inbound_data";
        _os_log_impl(&dword_1830D4000, v22, v23, "%{public}s called with null instance", buf, 0xCu);
      }
      goto LABEL_75;
    }
    if (!v38)
    {
      BOOL v22 = __nwlog_obj();
      os_log_type_t v35 = type;
      if (os_log_type_enabled(v22, type))
      {
        *(_DWORD *)int buf = 136446210;
        char v41 = "nw_protocol_create_inbound_data";
        _os_log_impl(&dword_1830D4000, v22, v35, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_75;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v22 = __nwlog_obj();
    os_log_type_t v29 = type;
    BOOL v30 = os_log_type_enabled(v22, type);
    if (!backtrace_string)
    {
      if (v30)
      {
        *(_DWORD *)int buf = 136446210;
        char v41 = "nw_protocol_create_inbound_data";
        _os_log_impl(&dword_1830D4000, v22, v29, "%{public}s called with null instance, no backtrace", buf, 0xCu);
      }
      goto LABEL_75;
    }
    if (v30)
    {
      *(_DWORD *)int buf = 136446466;
      char v41 = "nw_protocol_create_inbound_data";
      __int16 v42 = 2082;
      size_t v43 = (size_t)backtrace_string;
      _os_log_impl(&dword_1830D4000, v22, v29, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_57:

    free(backtrace_string);
    goto LABEL_76;
  }
  unsigned int v7 = *(void **)&v5->protocol_outbound_data_limit;
  if (!v7)
  {
    os_log_type_t v24 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    char v41 = "nw_protocol_create_inbound_data";
    os_log_type_t v21 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v38 = 0;
    if (!__nwlog_fault(v21, &type, &v38)) {
      goto LABEL_76;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v22 = __nwlog_obj();
      os_log_type_t v25 = type;
      if (os_log_type_enabled(v22, type))
      {
        *(_DWORD *)int buf = 136446210;
        char v41 = "nw_protocol_create_inbound_data";
        _os_log_impl(&dword_1830D4000, v22, v25, "%{public}s called with null instance->context", buf, 0xCu);
      }
      goto LABEL_75;
    }
    if (!v38)
    {
      BOOL v22 = __nwlog_obj();
      os_log_type_t v36 = type;
      if (os_log_type_enabled(v22, type))
      {
        *(_DWORD *)int buf = 136446210;
        char v41 = "nw_protocol_create_inbound_data";
        _os_log_impl(&dword_1830D4000, v22, v36, "%{public}s called with null instance->context, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_75;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v22 = __nwlog_obj();
    os_log_type_t v31 = type;
    BOOL v32 = os_log_type_enabled(v22, type);
    if (!backtrace_string)
    {
      if (v32)
      {
        *(_DWORD *)int buf = 136446210;
        char v41 = "nw_protocol_create_inbound_data";
        _os_log_impl(&dword_1830D4000, v22, v31, "%{public}s called with null instance->context, no backtrace", buf, 0xCu);
      }
      goto LABEL_75;
    }
    if (v32)
    {
      *(_DWORD *)int buf = 136446466;
      char v41 = "nw_protocol_create_inbound_data";
      __int16 v42 = 2082;
      size_t v43 = (size_t)backtrace_string;
      _os_log_impl(&dword_1830D4000, v22, v31, "%{public}s called with null instance->context, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_57;
  }
  if (!a2)
  {
LABEL_9:
    uint64_t v10 = 0;
    goto LABEL_10;
  }
  uint64_t buffer_manager_with_context = nw_frame_get_buffer_manager_with_context(v7, a2);
  if (buffer_manager_with_context)
  {
    uint64_t v9 = buffer_manager_with_context;
    uint64_t v10 = nw_mem_buffer_allocate(buffer_manager_with_context);
    if (v10)
    {
LABEL_11:
      if (v6)
      {
        data_from_pool = nw_protocol_create_data_from_pool(v5, 0);
        if (data_from_pool)
        {
          nw_frame_reset((uint64_t)data_from_pool, v10, a2, (uint64_t)nw_protocol_inbound_data_finalizer, (uint64_t)v5);
          int v15 = 0;
          goto LABEL_16;
        }
      }
      uint64_t v16 = nw_frame_create(16 * (v6 != 0), v10, a2, (uint64_t)nw_protocol_inbound_data_finalizer, (uint64_t)v5);
      if (v16)
      {
        data_from_pool = (void *)v16;
        int v15 = 1;
        if (!v6)
        {
LABEL_20:
          if (v9)
          {
            data_from_pool[13] = v9;
          }
          else if (v10)
          {
            *((_WORD *)data_from_pool + 102) |= 1u;
          }
          if (v15) {
            __int16 v18 = data_from_pool;
          }
          data_from_pool[2] = 0;
          context = v5->context;
          data_from_pool[3] = context;
          *(void *)context = data_from_pool;
          v5->context = (OS_nw_context *)(data_from_pool + 2);
LABEL_27:

          return (BOOL)data_from_pool;
        }
LABEL_16:
        if ((*((_WORD *)data_from_pool + 102) & 4) != 0) {
          __int16 v17 = (char *)(data_from_pool + 26);
        }
        else {
          __int16 v17 = 0;
        }
        *((void *)v17 + 1) = _Block_copy(v6);
        goto LABEL_20;
      }
      os_log_type_t v26 = __nwlog_obj();
      *(_DWORD *)int buf = 136446210;
      char v41 = "nw_protocol_create_inbound_data";
      os_log_type_t v21 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v38 = 0;
      if (__nwlog_fault(v21, &type, &v38))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          BOOL v22 = __nwlog_obj();
          os_log_type_t v27 = type;
          if (os_log_type_enabled(v22, type))
          {
            *(_DWORD *)int buf = 136446210;
            char v41 = "nw_protocol_create_inbound_data";
            _os_log_impl(&dword_1830D4000, v22, v27, "%{public}s nw_frame_create failed", buf, 0xCu);
          }
LABEL_75:

          goto LABEL_76;
        }
        if (!v38)
        {
          BOOL v22 = __nwlog_obj();
          os_log_type_t v37 = type;
          if (os_log_type_enabled(v22, type))
          {
            *(_DWORD *)int buf = 136446210;
            char v41 = "nw_protocol_create_inbound_data";
            _os_log_impl(&dword_1830D4000, v22, v37, "%{public}s nw_frame_create failed, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_75;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        BOOL v22 = __nwlog_obj();
        os_log_type_t v33 = type;
        BOOL v34 = os_log_type_enabled(v22, type);
        if (!backtrace_string)
        {
          if (v34)
          {
            *(_DWORD *)int buf = 136446210;
            char v41 = "nw_protocol_create_inbound_data";
            _os_log_impl(&dword_1830D4000, v22, v33, "%{public}s nw_frame_create failed, no backtrace", buf, 0xCu);
          }
          goto LABEL_75;
        }
        if (v34)
        {
          *(_DWORD *)int buf = 136446466;
          char v41 = "nw_protocol_create_inbound_data";
          __int16 v42 = 2082;
          size_t v43 = (size_t)backtrace_string;
          _os_log_impl(&dword_1830D4000, v22, v33, "%{public}s nw_frame_create failed, dumping backtrace:%{public}s", buf, 0x16u);
        }
        goto LABEL_57;
      }
LABEL_76:
      if (v21) {
        free(v21);
      }
      data_from_pool = 0;
      goto LABEL_27;
    }
  }
  uint64_t v10 = (uint64_t)malloc_type_malloc(a2, 0xF2B69DE5uLL);
  if (v10)
  {
LABEL_10:
    uint64_t v9 = 0;
    goto LABEL_11;
  }
  BOOL v11 = __nwlog_obj();
  os_log_type_enabled(v11, OS_LOG_TYPE_ERROR);
  *(_DWORD *)int buf = 136446466;
  char v41 = "strict_malloc";
  __int16 v42 = 2048;
  size_t v43 = a2;
  os_log_type_t v12 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v12);
  if (!result)
  {
    free(v12);
    goto LABEL_9;
  }
  __break(1u);
  return result;
}

void sub_1832207E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_frame_get_buffer_manager_with_context(void *a1, unsigned int a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v12 = "nw_frame_get_buffer_manager_with_context";
    id v3 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v9 = 0;
    if (!__nwlog_fault(v3, &type, &v9)) {
      goto LABEL_45;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      if (!os_log_type_enabled(v4, type)) {
        goto LABEL_45;
      }
      *(_DWORD *)int buf = 136446210;
      os_log_type_t v12 = "nw_frame_get_buffer_manager_with_context";
      id v6 = "%{public}s called with null context";
    }
    else if (v9)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      BOOL v8 = os_log_type_enabled(v4, type);
      if (backtrace_string)
      {
        if (v8)
        {
          *(_DWORD *)int buf = 136446466;
          os_log_type_t v12 = "nw_frame_get_buffer_manager_with_context";
          __int16 v13 = 2082;
          char v14 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v4, v5, "%{public}s called with null context, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_45;
      }
      if (!v8)
      {
LABEL_45:
        if (v3) {
          free(v3);
        }
        return 0;
      }
      *(_DWORD *)int buf = 136446210;
      os_log_type_t v12 = "nw_frame_get_buffer_manager_with_context";
      id v6 = "%{public}s called with null context, no backtrace";
    }
    else
    {
      id v4 = __nwlog_obj();
      os_log_type_t v5 = type;
      if (!os_log_type_enabled(v4, type)) {
        goto LABEL_45;
      }
      *(_DWORD *)int buf = 136446210;
      os_log_type_t v12 = "nw_frame_get_buffer_manager_with_context";
      id v6 = "%{public}s called with null context, backtrace limit exceeded";
    }
    _os_log_impl(&dword_1830D4000, v4, v5, v6, buf, 0xCu);
    goto LABEL_45;
  }
  if (dword_1E8F65118 >= a2)
  {
    return nw_context_2k_buffer_manager(a1);
  }
  else if (dword_1E8F65160 >= a2)
  {
    return nw_context_8k_buffer_manager(a1);
  }
  else if (dword_1E8F651A8 >= a2)
  {
    return nw_context_16k_buffer_manager(a1);
  }
  else if (dword_1E8F651F0 >= a2)
  {
    return nw_context_64k_buffer_manager(a1);
  }
  else if (dword_1E8F65238 >= a2)
  {
    return nw_context_128k_buffer_manager(a1);
  }
  else if (dword_1E8F65280 >= a2)
  {
    return nw_context_512k_buffer_manager(a1);
  }
  else
  {
    if (dword_1E8F652C8 < a2) {
      return 0;
    }
    return nw_context_1024k_buffer_manager(a1);
  }
}

uint64_t nw_context_16k_buffer_manager(void *a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = nw_context_copy_globals_context(v1);

    uint64_t v4 = *(void *)(*(void *)(v3 + 32) + 164);
    if (!v4)
    {
      *(void *)(*(void *)(v3 + 32) + 164) = nw_mem_buffer_manager_initialize(*(NSObject **)(v3 + 8), aNwcontextbuffe_0, dword_1E8F651A8, (unsigned __int16)word_1E8F651AC);
      uint64_t v4 = *(void *)(*(void *)(v3 + 32) + 164);
    }
    goto LABEL_4;
  }
  id v6 = __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  __int16 v17 = "nw_context_16k_buffer_manager";
  unsigned int v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v17 = "nw_context_16k_buffer_manager";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null context", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v8 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)int buf = 136446466;
          __int16 v17 = "nw_context_16k_buffer_manager";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null context, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_21;
      }
      if (v12)
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v17 = "nw_context_16k_buffer_manager";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null context, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v17 = "nw_context_16k_buffer_manager";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null context, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_21:
  if (v7) {
    free(v7);
  }
  uint64_t v3 = 0;
  uint64_t v4 = 0;
LABEL_4:

  return v4;
}

void sub_183220F0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_context_8k_buffer_manager(void *a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = nw_context_copy_globals_context(v1);

    uint64_t v4 = *(void *)(*(void *)(v3 + 32) + 172);
    if (!v4)
    {
      *(void *)(*(void *)(v3 + 32) + 172) = nw_mem_buffer_manager_initialize(*(NSObject **)(v3 + 8), aNwcontextbuffe_1, dword_1E8F65160, (unsigned __int16)word_1E8F65164);
      uint64_t v4 = *(void *)(*(void *)(v3 + 32) + 172);
    }
    goto LABEL_4;
  }
  id v6 = __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  __int16 v17 = "nw_context_8k_buffer_manager";
  unsigned int v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v17 = "nw_context_8k_buffer_manager";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null context", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v8 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)int buf = 136446466;
          __int16 v17 = "nw_context_8k_buffer_manager";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null context, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_21;
      }
      if (v12)
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v17 = "nw_context_8k_buffer_manager";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null context, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v17 = "nw_context_8k_buffer_manager";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null context, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_21:
  if (v7) {
    free(v7);
  }
  uint64_t v3 = 0;
  uint64_t v4 = 0;
LABEL_4:

  return v4;
}

void sub_1832211EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_context_512k_buffer_manager(void *a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = nw_context_copy_globals_context(v1);

    uint64_t v4 = *(void *)(*(void *)(v3 + 32) + 140);
    if (!v4)
    {
      *(void *)(*(void *)(v3 + 32) + 140) = nw_mem_buffer_manager_initialize(*(NSObject **)(v3 + 8), aNwcontextbuffe_2, dword_1E8F65280, (unsigned __int16)word_1E8F65284);
      uint64_t v4 = *(void *)(*(void *)(v3 + 32) + 140);
    }
    goto LABEL_4;
  }
  id v6 = __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  __int16 v17 = "nw_context_512k_buffer_manager";
  unsigned int v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v17 = "nw_context_512k_buffer_manager";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null context", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v8 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)int buf = 136446466;
          __int16 v17 = "nw_context_512k_buffer_manager";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null context, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_21;
      }
      if (v12)
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v17 = "nw_context_512k_buffer_manager";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null context, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v17 = "nw_context_512k_buffer_manager";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null context, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_21:
  if (v7) {
    free(v7);
  }
  uint64_t v3 = 0;
  uint64_t v4 = 0;
LABEL_4:

  return v4;
}

void sub_1832214CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_mem_buffer_manager_initialize(NSObject *a1, const char *a2, uint64_t a3, unint64_t a4)
{
  uint64_t v165 = *MEMORY[0x1E4F143B8];
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    __int16 v156 = "nw_mem_buffer_manager_initialize";
    unsigned int v77 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    char v153 = 0;
    if (!__nwlog_fault(v77, type, &v153)) {
      goto LABEL_213;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      unsigned int v78 = __nwlog_obj();
      os_log_type_t v79 = type[0];
      if (!os_log_type_enabled(v78, type[0])) {
        goto LABEL_213;
      }
      *(_DWORD *)int buf = 136446210;
      __int16 v156 = "nw_mem_buffer_manager_initialize";
      int64_t v80 = "%{public}s called with null name";
    }
    else if (v153)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      unsigned int v78 = __nwlog_obj();
      os_log_type_t v79 = type[0];
      BOOL v136 = os_log_type_enabled(v78, type[0]);
      if (backtrace_string)
      {
        if (v136)
        {
          *(_DWORD *)int buf = 136446466;
          __int16 v156 = "nw_mem_buffer_manager_initialize";
          __int16 v157 = 2082;
          *(void *)__int16 v158 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v78, v79, "%{public}s called with null name, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_213:
        if (!v77) {
          return 0;
        }
LABEL_214:
        free(v77);
        return 0;
      }
      if (!v136) {
        goto LABEL_213;
      }
      *(_DWORD *)int buf = 136446210;
      __int16 v156 = "nw_mem_buffer_manager_initialize";
      int64_t v80 = "%{public}s called with null name, no backtrace";
    }
    else
    {
      unsigned int v78 = __nwlog_obj();
      os_log_type_t v79 = type[0];
      if (!os_log_type_enabled(v78, type[0])) {
        goto LABEL_213;
      }
      *(_DWORD *)int buf = 136446210;
      __int16 v156 = "nw_mem_buffer_manager_initialize";
      int64_t v80 = "%{public}s called with null name, backtrace limit exceeded";
    }
    goto LABEL_212;
  }
  if (!a3)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    __int16 v156 = "nw_mem_buffer_manager_initialize";
    unsigned int v77 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    char v153 = 0;
    if (!__nwlog_fault(v77, type, &v153)) {
      goto LABEL_213;
    }
    if (type[0] != OS_LOG_TYPE_FAULT)
    {
      if (!v153)
      {
        unsigned int v78 = __nwlog_obj();
        os_log_type_t v79 = type[0];
        if (!os_log_type_enabled(v78, type[0])) {
          goto LABEL_213;
        }
        *(_DWORD *)int buf = 136446210;
        __int16 v156 = "nw_mem_buffer_manager_initialize";
        int64_t v80 = "%{public}s called with null (obj_size > 0), backtrace limit exceeded";
        goto LABEL_212;
      }
      char v137 = (char *)__nw_create_backtrace_string();
      unsigned int v78 = __nwlog_obj();
      os_log_type_t v79 = type[0];
      BOOL v138 = os_log_type_enabled(v78, type[0]);
      if (!v137)
      {
        if (!v138) {
          goto LABEL_213;
        }
        *(_DWORD *)int buf = 136446210;
        __int16 v156 = "nw_mem_buffer_manager_initialize";
        int64_t v80 = "%{public}s called with null (obj_size > 0), no backtrace";
        goto LABEL_212;
      }
      if (v138)
      {
        *(_DWORD *)int buf = 136446466;
        __int16 v156 = "nw_mem_buffer_manager_initialize";
        __int16 v157 = 2082;
        *(void *)__int16 v158 = v137;
        char v139 = "%{public}s called with null (obj_size > 0), dumping backtrace:%{public}s";
LABEL_195:
        _os_log_impl(&dword_1830D4000, v78, v79, v139, buf, 0x16u);
      }
LABEL_196:
      free(v137);
      if (!v77) {
        return 0;
      }
      goto LABEL_214;
    }
    unsigned int v78 = __nwlog_obj();
    os_log_type_t v79 = type[0];
    if (!os_log_type_enabled(v78, type[0])) {
      goto LABEL_213;
    }
    *(_DWORD *)int buf = 136446210;
    __int16 v156 = "nw_mem_buffer_manager_initialize";
    int64_t v80 = "%{public}s called with null (obj_size > 0)";
LABEL_212:
    _os_log_impl(&dword_1830D4000, v78, v79, v80, buf, 0xCu);
    goto LABEL_213;
  }
  unint64_t v5 = a4;
  if (!a4)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    __int16 v156 = "nw_mem_buffer_manager_initialize";
    unsigned int v77 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    char v153 = 0;
    if (!__nwlog_fault(v77, type, &v153)) {
      goto LABEL_213;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      unsigned int v78 = __nwlog_obj();
      os_log_type_t v79 = type[0];
      if (!os_log_type_enabled(v78, type[0])) {
        goto LABEL_213;
      }
      *(_DWORD *)int buf = 136446210;
      __int16 v156 = "nw_mem_buffer_manager_initialize";
      int64_t v80 = "%{public}s called with null (obj_cnt > 0)";
      goto LABEL_212;
    }
    if (!v153)
    {
      unsigned int v78 = __nwlog_obj();
      os_log_type_t v79 = type[0];
      if (!os_log_type_enabled(v78, type[0])) {
        goto LABEL_213;
      }
      *(_DWORD *)int buf = 136446210;
      __int16 v156 = "nw_mem_buffer_manager_initialize";
      int64_t v80 = "%{public}s called with null (obj_cnt > 0), backtrace limit exceeded";
      goto LABEL_212;
    }
    char v137 = (char *)__nw_create_backtrace_string();
    unsigned int v78 = __nwlog_obj();
    os_log_type_t v79 = type[0];
    BOOL v140 = os_log_type_enabled(v78, type[0]);
    if (!v137)
    {
      if (!v140) {
        goto LABEL_213;
      }
      *(_DWORD *)int buf = 136446210;
      __int16 v156 = "nw_mem_buffer_manager_initialize";
      int64_t v80 = "%{public}s called with null (obj_cnt > 0), no backtrace";
      goto LABEL_212;
    }
    if (v140)
    {
      *(_DWORD *)int buf = 136446466;
      __int16 v156 = "nw_mem_buffer_manager_initialize";
      __int16 v157 = 2082;
      *(void *)__int16 v158 = v137;
      char v139 = "%{public}s called with null (obj_cnt > 0), dumping backtrace:%{public}s";
      goto LABEL_195;
    }
    goto LABEL_196;
  }
  if (nw_mem_buffer_manager_initialize::onceToken != -1) {
    dispatch_once(&nw_mem_buffer_manager_initialize::onceToken, &__block_literal_global_64681);
  }
  BOOL v8 = malloc_type_calloc(1uLL, 0xA0uLL, 0xEAFB8F1AuLL);
  if (!v8)
  {
    uint64_t v81 = __nwlog_obj();
    os_log_type_enabled(v81, OS_LOG_TYPE_ERROR);
    *(_DWORD *)int buf = 136446722;
    __int16 v156 = "strict_calloc";
    __int16 v157 = 2048;
    *(void *)__int16 v158 = 1;
    *(_WORD *)&v158[8] = 2048;
    *(void *)unsigned int v159 = 160;
    int64_t v82 = (void *)_os_log_send_and_compose_impl();
    BOOL result = __nwlog_abort((uint64_t)v82);
    if (result) {
      goto LABEL_216;
    }
    free(v82);
  }
  *((_OWORD *)v8 + 2) = xmmword_1E523D658;
  *((_OWORD *)v8 + 3) = unk_1E523D668;
  *(_OWORD *)BOOL v8 = nw_mem_regions;
  *((_OWORD *)v8 + 1) = unk_1E523D648;
  *((void *)&v9 + 1) = 0;
  *((_OWORD *)v8 + 4) = xmmword_1E523D678;
  v8[5] = a3;
  v8[6] = v5;
  *((_DWORD *)v8 + 3) = 32 * (nw_mem_debug & 1);
  unint64_t v10 = nw_mem_buf_seg_size;
  v8[2] = nw_mem_buf_seg_size;
  unint64_t v11 = nw_mem_seg_min_buf_cnt;
  if (nw_mem_seg_min_buf_cnt < v5 && v10 / a3 < nw_mem_seg_min_buf_cnt)
  {
    unint64_t v10 = -(uint64_t)(-(nw_mem_seg_min_buf_cnt * a3) & 0xFFFFFFFFFFFFC000);
    v8[2] = v10;
    unint64_t v5 = v11 + v5 / v11 * v11;
  }
  if (!v10 || (v10 & 0x3FFF) != 0)
  {
    id v125 = __nwlog_obj();
    os_log_type_enabled(v125, OS_LOG_TYPE_ERROR);
    *(_DWORD *)int buf = 136446466;
    __int16 v156 = "nw_mem_region_params_config";
    __int16 v157 = 2082;
    *(void *)__int16 v158 = "VERIFY seglim != 0 && (seglim % NW_MEM_PAGE_SIZE) == 0 failed";
    os_log_type_t v126 = (void *)_os_log_send_and_compose_impl();
    BOOL result = __nwlog_abort((uint64_t)v126);
    if (result) {
      goto LABEL_216;
    }
    free(v126);
  }
  if (gLogDatapath)
  {
    int v83 = __nwlog_obj();
    if (os_log_type_enabled(v83, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v84 = *v8;
      *(_DWORD *)int buf = 136447234;
      __int16 v156 = "nw_mem_region_params_config";
      __int16 v157 = 2082;
      *(void *)__int16 v158 = v84;
      *(_WORD *)&v158[8] = 2048;
      *(void *)unsigned int v159 = v10;
      *(_WORD *)&v159[8] = 2048;
      *(void *)&v159[10] = a3;
      *(_WORD *)__int16 v160 = 2048;
      *(void *)&v160[2] = v5;
      _os_log_impl(&dword_1830D4000, v83, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s: seglim %zu objsize %zu objcnt %zu", buf, 0x34u);
    }
  }
  __int16 v152 = a1;
  unint64_t v12 = -(uint64_t)(-a3 & 0xFFFFFFFFFFFFFF80);
  if (v10 > v12)
  {
    *(void *)&long long v9 = 136446978;
    do
    {
      if (!(v10 % v12)) {
        break;
      }
      if (gLogDatapath)
      {
        long long v148 = v9;
        log = __nwlog_obj();
        BOOL v13 = os_log_type_enabled(log, OS_LOG_TYPE_DEBUG);
        long long v9 = v148;
        if (v13)
        {
          uint64_t v14 = *v8;
          *(_DWORD *)int buf = v148;
          __int16 v156 = "nw_mem_region_params_config";
          __int16 v157 = 2082;
          *(void *)__int16 v158 = v14;
          *(_WORD *)&v158[8] = 2048;
          *(void *)unsigned int v159 = v12;
          *(_WORD *)&v159[8] = 2048;
          *(void *)&v159[10] = v12 + 128;
          _os_log_impl(&dword_1830D4000, log, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s: objsize %zu -> %zu", buf, 0x2Au);
          long long v9 = v148;
        }
      }
      v12 += 128;
    }
    while (v12 < v10);
  }
  if (v12 > v10)
  {
    *(void *)&long long v9 = 136446978;
    do
    {
      if (gLogDatapath)
      {
        long long v149 = v9;
        loga = __nwlog_obj();
        BOOL v15 = os_log_type_enabled(loga, OS_LOG_TYPE_DEBUG);
        long long v9 = v149;
        if (v15)
        {
          uint64_t v16 = *v8;
          *(_DWORD *)int buf = v149;
          __int16 v156 = "nw_mem_region_params_config";
          __int16 v157 = 2082;
          *(void *)__int16 v158 = v16;
          *(_WORD *)&v158[8] = 2048;
          *(void *)unsigned int v159 = v10;
          *(_WORD *)&v159[8] = 2048;
          *(void *)&v159[10] = v10 + 0x4000;
          _os_log_impl(&dword_1830D4000, loga, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s: seglim %zu -> %zu", buf, 0x2Au);
          long long v9 = v149;
        }
      }
      v10 += 0x4000;
    }
    while (v12 > v10);
  }
  unint64_t v17 = -(uint64_t)(v5 * v12) & 0xFFFFFFFFFFFFC000;
  unint64_t v18 = -(uint64_t)v17;
  if (v10 <= -(uint64_t)v17)
  {
    if (v10 >= -(uint64_t)v17)
    {
      unint64_t v20 = -(uint64_t)v17;
    }
    else
    {
      unint64_t v25 = v10 + (v10 >> 1);
      *(void *)&long long v9 = 136447746;
      do
      {
        if (v10 >= v18 || !(v18 % v10)) {
          break;
        }
        if (gLogDatapath)
        {
          long long v151 = v9;
          logc = __nwlog_obj();
          BOOL v26 = os_log_type_enabled(logc, OS_LOG_TYPE_DEBUG);
          long long v9 = v151;
          if (v26)
          {
            uint64_t v27 = *v8;
            *(_DWORD *)int buf = v151;
            __int16 v156 = "nw_mem_region_params_config";
            __int16 v157 = 2082;
            *(void *)__int16 v158 = v27;
            *(_WORD *)&v158[8] = 2048;
            *(void *)unsigned int v159 = -(uint64_t)v17;
            *(_WORD *)&v159[8] = 2048;
            *(void *)&v159[10] = v12;
            *(_WORD *)__int16 v160 = 2048;
            *(void *)&v160[2] = v5;
            __int16 v161 = 2048;
            unint64_t v162 = v10;
            __int16 v163 = 2048;
            uint64_t v164 = v10 + 0x4000;
            _os_log_impl(&dword_1830D4000, logc, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s: segsize %zu (%zu*%zu) seglim [+] %zu -> %zu", buf, 0x48u);
            long long v9 = v151;
          }
        }
        v10 += 0x4000;
      }
      while (v10 < v25);
      if (v18 % v10) {
        unint64_t v20 = v10 - v17 - v18 % v10;
      }
      else {
        unint64_t v20 = -(uint64_t)v17;
      }
    }
  }
  else
  {
    if (v18 <= 0x4000) {
      unint64_t v19 = 0x4000;
    }
    else {
      unint64_t v19 = -(uint64_t)v17;
    }
    if (v10 <= v19)
    {
      unint64_t v20 = v10;
    }
    else
    {
      *(void *)&long long v9 = 136447746;
      unint64_t v20 = v10;
      os_log_type_t v21 = "%{public}s %{public}s: segsize %zu (%zu*%zu) seglim [-] %zu -> %zu";
      do
      {
        if (gLogDatapath)
        {
          long long v150 = v9;
          BOOL v22 = v21;
          logb = __nwlog_obj();
          BOOL v23 = os_log_type_enabled(logb, OS_LOG_TYPE_DEBUG);
          os_log_type_t v21 = v22;
          long long v9 = v150;
          if (v23)
          {
            uint64_t v24 = *v8;
            *(_DWORD *)int buf = v150;
            __int16 v156 = "nw_mem_region_params_config";
            __int16 v157 = 2082;
            *(void *)__int16 v158 = v24;
            *(_WORD *)&v158[8] = 2048;
            *(void *)unsigned int v159 = v18;
            *(_WORD *)&v159[8] = 2048;
            *(void *)&v159[10] = v12;
            *(_WORD *)__int16 v160 = 2048;
            *(void *)&v160[2] = v5;
            __int16 v161 = 2048;
            unint64_t v162 = v20;
            __int16 v163 = 2048;
            uint64_t v164 = -(uint64_t)((0x4000 - v20) & 0xFFFFFFFFFFFFC000);
            _os_log_impl(&dword_1830D4000, logb, OS_LOG_TYPE_DEBUG, v22, buf, 0x48u);
            os_log_type_t v21 = v22;
            long long v9 = v150;
          }
        }
        unint64_t v20 = -(uint64_t)((0x4000 - v20) & 0xFFFFFFFFFFFFC000);
        unint64_t v10 = v20;
      }
      while (v19 < v20);
    }
  }
  if (gLogDatapath)
  {
    unsigned int v85 = __nwlog_obj();
    if (os_log_type_enabled(v85, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v86 = *v8;
      *(_DWORD *)int buf = 136446978;
      __int16 v156 = "nw_mem_region_params_config";
      __int16 v157 = 2082;
      *(void *)__int16 v158 = v86;
      *(_WORD *)&v158[8] = 2048;
      *(void *)unsigned int v159 = v20;
      *(_WORD *)&v159[8] = 2048;
      *(void *)&v159[10] = v10;
      _os_log_impl(&dword_1830D4000, v85, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s: segsize %zu seglim %zu", buf, 0x2Au);
    }
  }
  if ((*((unsigned char *)v8 + 12) & 0x10) != 0)
  {
    unint64_t v28 = 1;
  }
  else
  {
    if (v10 <= v20) {
      unint64_t v28 = v20 / v10;
    }
    else {
      unint64_t v28 = 1;
    }
    v20 /= v28;
  }
  if (gLogDatapath)
  {
    os_log_type_t v87 = __nwlog_obj();
    if (os_log_type_enabled(v87, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v88 = *v8;
      *(_DWORD *)int buf = 136446978;
      __int16 v156 = "nw_mem_region_params_config";
      __int16 v157 = 2082;
      *(void *)__int16 v158 = v88;
      *(_WORD *)&v158[8] = 2048;
      *(void *)unsigned int v159 = v28;
      *(_WORD *)&v159[8] = 2048;
      *(void *)&v159[10] = v20;
      _os_log_impl(&dword_1830D4000, v87, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s: segcnt %zu segsize %zu", buf, 0x2Au);
    }
  }
  v8[7] = v12;
  v8[8] = v20 * v28 / v12;
  v8[3] = v20;
  v8[4] = v28;
  if (gLogDatapath)
  {
    BOOL v89 = __nwlog_obj();
    if (os_log_type_enabled(v89, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v90 = *v8;
      *(_DWORD *)int buf = 136447490;
      __int16 v156 = "nw_mem_region_params_config";
      __int16 v157 = 2082;
      *(void *)__int16 v158 = v90;
      *(_WORD *)&v158[8] = 2048;
      *(void *)unsigned int v159 = v12;
      *(_WORD *)&v159[8] = 2048;
      *(void *)&v159[10] = v20 * v28 / v12;
      *(_WORD *)__int16 v160 = 2048;
      *(void *)&v160[2] = v28;
      __int16 v161 = 2048;
      unint64_t v162 = v20;
      _os_log_impl(&dword_1830D4000, v89, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s: objsize %zu objcnt %zu segcnt %zu segsize %zu", buf, 0x3Eu);
    }
    if (gLogDatapath)
    {
      int v91 = *((_DWORD *)v8 + 2);
      os_log_type_t v92 = "";
      if (v91 == 1) {
        os_log_type_t v92 = "REGIONS";
      }
      if (v91) {
        BOOL v93 = v92;
      }
      else {
        BOOL v93 = "BUF";
      }
      snprintf((char *)type, 0x20uLL, "REGION_%s:", v93);
      if (gLogDatapath)
      {
        BOOL v94 = __nwlog_obj();
        if (os_log_type_enabled(v94, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v96 = v8[5];
          uint64_t v95 = v8[6];
          uint64_t v98 = v8[7];
          uint64_t v97 = v8[8];
          *(_DWORD *)int buf = 136447490;
          __int16 v156 = "nw_mem_region_params_config";
          __int16 v157 = 2080;
          *(void *)__int16 v158 = type;
          *(_WORD *)&v158[8] = 1024;
          *(_DWORD *)unsigned int v159 = v95;
          *(_WORD *)&v159[4] = 1024;
          *(_DWORD *)&v159[6] = v96;
          *(_WORD *)&v159[10] = 1024;
          *(_DWORD *)&v159[12] = v97;
          *(_WORD *)&v159[16] = 1024;
          *(_DWORD *)__int16 v160 = v98;
          _os_log_impl(&dword_1830D4000, v94, OS_LOG_TYPE_DEBUG, "%{public}s %-16s o:[%4u x %6u -> %4u x %6u]", buf, 0x2Eu);
        }
        if (gLogDatapath)
        {
          id v99 = __nwlog_obj();
          if (os_log_type_enabled(v99, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v100 = v8[7];
            uint64_t v101 = v8[8];
            uint64_t v102 = v8[5];
            uint64_t v103 = v8[6];
            *(_DWORD *)int buf = 136447234;
            __int16 v156 = "nw_mem_buffer_manager_initialize";
            __int16 v157 = 2048;
            *(void *)__int16 v158 = v100;
            *(_WORD *)&v158[8] = 2048;
            *(void *)unsigned int v159 = v102;
            *(_WORD *)&v159[8] = 2048;
            *(void *)&v159[10] = v101;
            *(_WORD *)__int16 v160 = 2048;
            *(void *)&v160[2] = v103;
            _os_log_impl(&dword_1830D4000, v99, OS_LOG_TYPE_DEBUG, "%{public}s   obj size %6zu (was %6zu) cnt %6zu (was %6zu) for REGION_BUF", buf, 0x34u);
          }
        }
      }
    }
  }
  if (v8[7])
  {
    int v29 = *((_DWORD *)v8 + 3);
    if ((v29 & 0x20) == 0) {
      goto LABEL_64;
    }
    goto LABEL_157;
  }
  os_log_type_t v104 = __nwlog_obj();
  os_log_type_enabled(v104, OS_LOG_TYPE_ERROR);
  *(_DWORD *)int buf = 136446466;
  __int16 v156 = "nw_mem_buffer_manager_initialize";
  __int16 v157 = 2082;
  *(void *)__int16 v158 = "VERIFY buffer_manager->nrp[NW_MEM_REGION_BUF].nrp_c_obj_size != 0 failed";
  id v105 = (void *)_os_log_send_and_compose_impl();
  BOOL result = __nwlog_abort((uint64_t)v105);
  if (result) {
    goto LABEL_216;
  }
  free(v105);
  int v29 = *((_DWORD *)v8 + 3);
  if ((v29 & 0x20) != 0)
  {
LABEL_157:
    int v106 = __nwlog_obj();
    os_log_type_enabled(v106, OS_LOG_TYPE_ERROR);
    *(_DWORD *)int buf = 136446466;
    __int16 v156 = "nw_mem_buffer_manager_initialize";
    __int16 v157 = 2082;
    *(void *)__int16 v158 = "VERIFY !(buffer_manager->nrp[NW_MEM_REGION_BUF].nrp_cflags & NW_MEM_REGION_CR_NOCACHE) failed";
    int v107 = (void *)_os_log_send_and_compose_impl();
    BOOL result = __nwlog_abort((uint64_t)v107);
    if (result) {
      goto LABEL_216;
    }
    free(v107);
    int v29 = *((_DWORD *)v8 + 3);
  }
LABEL_64:
  BOOL v30 = (char *)malloc_type_zone_calloc((malloc_zone_t *)g_slab_zone, 1uLL, 0x190uLL, 0x61BC51D5uLL);
  if (v30)
  {
    if (!v152) {
      goto LABEL_67;
    }
    goto LABEL_66;
  }
  id v108 = __nwlog_obj();
  os_log_type_enabled(v108, OS_LOG_TYPE_ERROR);
  *(_DWORD *)int buf = 136446722;
  __int16 v156 = "strict_malloc_zone_calloc";
  __int16 v157 = 2048;
  *(void *)__int16 v158 = 1;
  *(_WORD *)&v158[8] = 2048;
  *(void *)unsigned int v159 = 400;
  int v109 = (void *)_os_log_send_and_compose_impl();
  BOOL result = __nwlog_abort((uint64_t)v109);
  if (result) {
    goto LABEL_216;
  }
  free(v109);
  if (v152)
  {
LABEL_66:
    dispatch_retain(v152);
    *((void *)v30 + 34) = v152;
  }
LABEL_67:
  *((void *)v30 + 10) = v8[2];
  uint64_t v31 = v8[3];
  *((void *)v30 + 11) = v31;
  uint64_t v32 = v8[4];
  *((void *)v30 + 31) = v32 * v31;
  *((void *)v30 + 37) = v8[3] / v8[7];
  *((void *)v30 + 12) = v32;
  *((void *)v30 + 41) = 32;
  *((void *)v30 + 42) = 4096;
  os_log_type_t v33 = malloc_type_calloc(1uLL, 0x200uLL, 0xEAFB8F1AuLL);
  if (!v33)
  {
    BOOL v110 = __nwlog_obj();
    os_log_type_enabled(v110, OS_LOG_TYPE_ERROR);
    *(_DWORD *)int buf = 136446722;
    __int16 v156 = "strict_calloc";
    __int16 v157 = 2048;
    *(void *)__int16 v158 = 1;
    *(_WORD *)&v158[8] = 2048;
    *(void *)unsigned int v159 = 512;
    os_log_type_t v111 = (void *)_os_log_send_and_compose_impl();
    BOOL result = __nwlog_abort((uint64_t)v111);
    if (result) {
      goto LABEL_216;
    }
    free(v111);
  }
  *((void *)v30 + 44) = *((void *)v30 + 41) - 1;
  *((void *)v30 + 45) = v33;
  *((void *)v30 + 43) = flsll(v8[3]) - 1;
  unint64_t v34 = *((void *)v30 + 44);
  unint64_t v35 = v34 + 1;
  if (v34 != -1)
  {
    uint64_t v36 = *((void *)v30 + 45);
    if (v35 < 8)
    {
      unint64_t v37 = 0;
      int v38 = 0;
LABEL_71:
      unsigned int v39 = v38 + 1;
      do
      {
        BOOL v40 = (void *)(v36 + 16 * v37);
        void *v40 = 0;
        v40[1] = v40;
        unint64_t v37 = v39++;
      }
      while (v35 > v37);
      goto LABEL_73;
    }
    int v38 = 0;
    unint64_t v37 = 0;
    if (v34 == -1) {
      goto LABEL_71;
    }
    if (HIDWORD(v34)) {
      goto LABEL_71;
    }
    unint64_t v37 = v35 & 0xFFFFFFFFFFFFFFFCLL;
    unsigned int v70 = (double *)(v36 + 32);
    long long v71 = 0uLL;
    unint64_t v72 = v35 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      *(void *)&v166.val[1].f64[0] = v70 - 4;
      *(void *)&v166.val[1].f64[1] = v70 - 2;
      uint32_t v73 = v70;
      char v74 = v70 + 2;
      v166.val[0] = 0uLL;
      vst2q_f64(*(double **)&v166.val[1].f64[0], v166);
      vst2q_f64(v70, *(float64x2x2_t *)&v71);
      v70 += 8;
      v72 -= 4;
    }
    while (v72);
    int v38 = v35 & 0xFFFFFFFC;
    if (v35 != v37) {
      goto LABEL_71;
    }
  }
LABEL_73:
  *(_OWORD *)(v30 + 104) = *(_OWORD *)(v8 + 5);
  *(_OWORD *)(v30 + 120) = *(_OWORD *)(v8 + 7);
  *((void *)v30 + 17) = v8[9];
  *((void *)v30 + 33) = 0;
  *(_DWORD *)BOOL v30 = 0;
  *((void *)v30 + 35) = 0;
  *((void *)v30 + 36) = 0;
  *((void *)v30 + 46) = 0;
  *((void *)v30 + 47) = v30 + 368;
  *((_DWORD *)v30 + 18) = *((_DWORD *)v8 + 2);
  uuid_generate_random((unsigned __int8 *)v30 + 224);
  snprintf(v30 + 160, 0x40uLL, "%s.region.%s.%s", "NWSlab", (const char *)*v8, a2);
  if (gLogDatapath)
  {
    BOOL v112 = __nwlog_obj();
    if (os_log_type_enabled(v112, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)int buf = 136446722;
      __int16 v156 = "nw_mem_region_create";
      __int16 v157 = 2082;
      *(void *)__int16 v158 = v30 + 160;
      *(_WORD *)&v158[8] = 2048;
      *(void *)unsigned int v159 = v30;
      _os_log_impl(&dword_1830D4000, v112, OS_LOG_TYPE_DEBUG, "%{public}s \"%{public}s\": nwr %p ", buf, 0x20u);
    }
  }
  *((_DWORD *)v30 + 19) = v29;
  if ((v29 & 0x10) != 0) {
    *((_DWORD *)v30 + 60) |= 0x10u;
  }
  if ((v29 & 0x20) != 0) {
    *((_DWORD *)v30 + 60) |= 0x20u;
  }
  unint64_t v41 = *((void *)v30 + 12) + 63;
  *((void *)v30 + 39) = v41 >> 6;
  size_t v42 = (v41 >> 3) & 0x1FFFFFF8;
  if (!v42)
  {
    id v113 = __nwlog_obj();
    os_log_type_enabled(v113, OS_LOG_TYPE_ERROR);
    *(_DWORD *)int buf = 136446210;
    __int16 v156 = "strict_calloc";
    int v114 = (void *)_os_log_send_and_compose_impl();
    BOOL result = __nwlog_abort((uint64_t)v114);
    if (result) {
      goto LABEL_216;
    }
    free(v114);
  }
  size_t v43 = malloc_type_calloc(1uLL, v42, 0xEAFB8F1AuLL);
  if (!v43)
  {
    int v115 = __nwlog_obj();
    os_log_type_enabled(v115, OS_LOG_TYPE_ERROR);
    *(_DWORD *)int buf = 136446722;
    __int16 v156 = "strict_calloc";
    __int16 v157 = 2048;
    *(void *)__int16 v158 = 1;
    *(_WORD *)&v158[8] = 2048;
    *(void *)unsigned int v159 = v42;
    int v116 = (void *)_os_log_send_and_compose_impl();
    BOOL result = __nwlog_abort((uint64_t)v116);
    if (result) {
      goto LABEL_216;
    }
    free(v116);
  }
  *((void *)v30 + 38) = v43;
  memset(v43, 255, ((*((_DWORD *)v30 + 24) + 63) >> 3) & 0x1FFFFFF8);
  ++*((_DWORD *)v30 + 1);
  os_unfair_lock_lock((os_unfair_lock_t)&nw_mem_region_lock);
  *((void *)v30 + 18) = 0;
  uint64_t v44 = (void *)qword_1EB267348;
  *((void *)v30 + 19) = qword_1EB267348;
  void *v44 = v30;
  qword_1EB267348 = (uint64_t)(v30 + 144);
  os_unfair_lock_unlock((os_unfair_lock_t)&nw_mem_region_lock);
  if (gLogDatapath)
  {
    unsigned int v117 = __nwlog_obj();
    if (os_log_type_enabled(v117, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v118 = *((void *)v30 + 11);
      uint64_t v119 = *((void *)v30 + 12);
      uint64_t v120 = *((void *)v30 + 15);
      uint64_t v121 = *((void *)v30 + 16);
      int v122 = *((_DWORD *)v30 + 19);
      *(_DWORD *)int buf = 136447490;
      __int16 v156 = "nw_mem_region_create";
      __int16 v157 = 1024;
      *(_DWORD *)__int16 v158 = v118;
      *(_WORD *)&v158[4] = 1024;
      *(_DWORD *)&v158[6] = v119;
      *(_WORD *)unsigned int v159 = 1024;
      *(_DWORD *)&v159[2] = v120;
      *(_WORD *)&v159[6] = 1024;
      *(_DWORD *)&v159[8] = v121;
      *(_WORD *)&v159[12] = 1024;
      *(_DWORD *)&v159[14] = v122;
      _os_log_impl(&dword_1830D4000, v117, OS_LOG_TYPE_DEBUG, "%{public}s   [TOTAL] seg (%u*%u) obj (%u*%u) cflags 0x%u", buf, 0x2Au);
    }
  }
  v8[10] = v30;
  uint64_t v45 = v8[7];
  unint64_t v46 = *((void *)v30 + 11);
  BOOL v47 = malloc_type_zone_calloc((malloc_zone_t *)g_slab_zone, 1uLL, 0x308uLL, 0x61BC51D5uLL);
  if (!v47)
  {
    int64_t v123 = __nwlog_obj();
    os_log_type_enabled(v123, OS_LOG_TYPE_ERROR);
    *(_DWORD *)int buf = 136446722;
    __int16 v156 = "strict_malloc_zone_calloc";
    __int16 v157 = 2048;
    *(void *)__int16 v158 = 1;
    *(_WORD *)&v158[8] = 2048;
    *(void *)unsigned int v159 = 776;
    os_log_type_t v124 = (void *)_os_log_send_and_compose_impl();
    BOOL result = __nwlog_abort((uint64_t)v124);
    if (result) {
      goto LABEL_216;
    }
    free(v124);
  }
  unint64_t v48 = (-8 - (void)v47) & 0xFFFFFFFFFFFFFF80;
  *(void *)(v48 ^ 0xFFFFFFFFFFFFFFF8) = v47;
  if (v46 <= 7)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
    *(_DWORD *)int buf = 136446722;
    __int16 v156 = "nw_mem_cache_create";
    __int16 v157 = 2082;
    *(void *)__int16 v158 = "nw_mem_cache_create";
    *(_WORD *)&v158[8] = 2048;
    *(void *)unsigned int v159 = 8;
    uint64_t v49 = (void *)_os_log_send_and_compose_impl();
    BOOL result = __nwlog_abort((uint64_t)v49);
    if (result) {
      goto LABEL_216;
    }
    free(v49);
  }
  uint64_t v51 = -(uint64_t)v48;
  char v52 = nw_mem_debug;
  if (nw_mem_debug) {
    *(_DWORD *)(176 - v48) |= 1u;
  }
  if ((v52 & 2) != 0) {
    *(_DWORD *)(176 - v48) |= 2u;
  }
  snprintf((char *)(96 - v48), 0x40uLL, "NWSlab.mem.%s", a2);
  *(void *)(160 - v48) = v45;
  *(void *)(168 - v48) = 8;
  *(_OWORD *)(184 - v48) = 0u;
  *(_OWORD *)(200 - v48) = 0u;
  *(void *)(248 - v48) = v46;
  *(void *)(216 - v48) = v30;
  ++*((_DWORD *)v30 + 1);
  unint64_t v53 = *((void *)v30 + 15);
  *(void *)(240 - v48) = v53;
  unint64_t v54 = -(uint64_t)(-v45 & 0xFFFFFFFFFFFFFFF8);
  if (v53 >= v54)
  {
LABEL_92:
    *(void *)(232 - v48) = v54;
    *(_DWORD *)(224 - v48) = 0;
    *(void *)(296 - v48) = 0;
    *(void *)(304 - v48) = 296 - v48;
    *(void *)(312 - v48) = 0;
    *(void *)(320 - v48) = 312 - v48;
    *(_OWORD *)(256 - v48) = xmmword_183D5CDC0;
    BOOL v56 = nw_calloc_type<nw_mem_bufctl_bkt>(0x40uLL);
    *(void *)(280 - v48) = *(void *)(256 - v48) - 1;
    *(void *)(288 - v48) = v56;
    *(void *)(272 - v48) = flsll(v54) - 1;
    unint64_t v57 = *(void *)(280 - v48);
    unint64_t v58 = v57 + 1;
    if (v57 != -1)
    {
      uint64_t v59 = *(void *)(288 - v48);
      if (v58 >= 0xA)
      {
        int v61 = 0;
        unint64_t v60 = 0;
        if (v57 != -1 && !HIDWORD(v57))
        {
          unint64_t v60 = v58 & 0xFFFFFFFFFFFFFFFCLL;
          uint64_t v75 = *(_OWORD **)(288 - v48);
          unint64_t v76 = v58 & 0xFFFFFFFFFFFFFFFCLL;
          do
          {
            *uint64_t v75 = 0uLL;
            v75[1] = 0uLL;
            v75 += 2;
            v76 -= 4;
          }
          while (v76);
          int v61 = v58 & 0xFFFFFFFC;
          if (v58 == v60) {
            goto LABEL_97;
          }
        }
      }
      else
      {
        unint64_t v60 = 0;
        int v61 = 0;
      }
      unsigned int v62 = v61 + 1;
      do
      {
        *(void *)(v59 + 8 * v60) = 0;
        unint64_t v60 = v62++;
      }
      while (v58 > v60);
    }
LABEL_97:
    *(_DWORD *)(328 - v48) = 0;
    p_stride = &value witness table for NWEndpoint.stride;
    do
    {
      unint64_t v64 = p_stride[12];
      p_stride += 11;
    }
    while (v64 >= v54);
    *(void *)(336 - v48) = p_stride;
    *(_DWORD *)(512 - v48) = 0;
    *(void *)(552 - v48) = -1;
    os_unfair_lock_lock((os_unfair_lock_t)&nw_mem_cache_lock);
    *(void *)(80 - v48) = 0;
    os_log_type_t v65 = (uint64_t *)qword_1EB267328;
    *(void *)(88 - v48) = qword_1EB267328;
    *os_log_type_t v65 = v51;
    qword_1EB267328 = 80 - v48;
    os_unfair_lock_unlock((os_unfair_lock_t)&nw_mem_cache_lock);
    if (gLogDatapath)
    {
      BOOL v127 = __nwlog_obj();
      if (os_log_type_enabled(v127, OS_LOG_TYPE_DEBUG))
      {
        int v128 = *(_DWORD *)(176 - v48);
        *(_DWORD *)int buf = 136446978;
        __int16 v156 = "nw_mem_cache_create";
        __int16 v157 = 2082;
        *(void *)__int16 v158 = 96 - v48;
        *(_WORD *)&v158[8] = 2048;
        *(void *)unsigned int v159 = -(uint64_t)v48;
        *(_WORD *)&v159[8] = 1024;
        *(_DWORD *)&v159[10] = v128;
        _os_log_impl(&dword_1830D4000, v127, OS_LOG_TYPE_DEBUG, "%{public}s \"%{public}s\": nwm %p mode 0x%X", buf, 0x26u);
      }
      if (gLogDatapath)
      {
        os_log_type_t v129 = __nwlog_obj();
        if (os_log_type_enabled(v129, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v130 = *(void *)(160 - v48);
          uint64_t v131 = *(void *)(168 - v48);
          uint64_t v132 = *(void *)(232 - v48);
          uint64_t v133 = *(void *)(240 - v48);
          uint64_t v134 = *(void *)(248 - v48);
          *(_DWORD *)int buf = 136447490;
          __int16 v156 = "nw_mem_cache_create";
          __int16 v157 = 1024;
          *(_DWORD *)__int16 v158 = v130;
          *(_WORD *)&v158[4] = 1024;
          *(_DWORD *)&v158[6] = v131;
          *(_WORD *)unsigned int v159 = 1024;
          *(_DWORD *)&v159[2] = v132;
          *(_WORD *)&v159[6] = 1024;
          *(_DWORD *)&v159[8] = v133;
          *(_WORD *)&v159[12] = 1024;
          *(_DWORD *)&v159[14] = v134;
          _os_log_impl(&dword_1830D4000, v129, OS_LOG_TYPE_DEBUG, "%{public}s   bufsz %u align %u chunksz %u objsz %u slabsz %u", buf, 0x2Au);
        }
      }
    }
    if (nw_mem_cache_ready == 1 && (*(unsigned char *)(176 - v48) & 1) == 0)
    {
      *(_DWORD *)(560 - v48) = **(_DWORD **)(336 - v48);
      if (gLogDatapath)
      {
        os_log_type_t v141 = __nwlog_obj();
        if (os_log_type_enabled(v141, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v142 = *(void *)(232 - v48);
          int v143 = *(_DWORD *)(560 - v48);
          *(_DWORD *)int buf = 136446978;
          __int16 v156 = "nw_mem_cache_magazine_enable";
          __int16 v157 = 2048;
          *(void *)__int16 v158 = -(uint64_t)v48;
          *(_WORD *)&v158[8] = 1024;
          *(_DWORD *)unsigned int v159 = v142;
          *(_WORD *)&v159[4] = 1024;
          *(_DWORD *)&v159[6] = v143;
          _os_log_impl(&dword_1830D4000, v141, OS_LOG_TYPE_DEBUG, "%{public}s nwm %p chunksize %u magsize %d", buf, 0x22u);
        }
      }
    }
    v8[11] = v51;
    if (v48)
    {
      uint64_t v66 = 0;
      unsigned int v67 = v8 + 12;
      unint64_t v68 = 64;
      while (1)
      {
        int v69 = a2[v66];
        *((unsigned char *)v67 + v66) = v69;
        if (!v69) {
          break;
        }
        --v68;
        ++v66;
        if (v68 <= 1)
        {
          *((unsigned char *)v67 + v66) = 0;
          return (BOOL)v8;
        }
      }
      return (BOOL)v8;
    }
    nw_mem_buffer_manager_close(v8);
    return 0;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
  *(_DWORD *)int buf = 136446978;
  __int16 v156 = "nw_mem_cache_create";
  __int16 v157 = 2048;
  *(void *)__int16 v158 = v45;
  *(_WORD *)&v158[8] = 2048;
  *(void *)unsigned int v159 = -(uint64_t)(-v45 & 0xFFFFFFFFFFFFFFF8);
  *(_WORD *)&v159[8] = 2048;
  *(void *)&v159[10] = v53;
  int v55 = (void *)_os_log_send_and_compose_impl();
  BOOL result = __nwlog_abort((uint64_t)v55);
  if (!result)
  {
    free(v55);
    goto LABEL_92;
  }
LABEL_216:
  __break(1u);
  return result;
}

BOOL nw_calloc_type<nw_mem_bufctl_bkt>(size_t count)
{
  if (!count || count >> 61)
  {
    uint64_t v4 = __nwlog_obj();
    os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
    unint64_t v5 = (void *)_os_log_send_and_compose_impl();
    BOOL result = __nwlog_abort((uint64_t)v5);
    if (result) {
      goto LABEL_9;
    }
    free(v5);
  }
  uint64_t v2 = malloc_type_calloc(count, 8uLL, 0xEAFB8F1AuLL);
  if (v2) {
    return (BOOL)v2;
  }
  id v6 = __nwlog_obj();
  os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
  unsigned int v7 = (void *)_os_log_send_and_compose_impl();
  BOOL result = __nwlog_abort((uint64_t)v7);
  if (!result)
  {
    free(v7);
    return (BOOL)v2;
  }
LABEL_9:
  __break(1u);
  return result;
}

void nw_proxy_options_set_authentication_challenge_handler(void *a1, void *a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  unint64_t v5 = v4;
  if (v3)
  {
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 3221225472;
    v14[2] = __nw_proxy_options_set_authentication_challenge_handler_block_invoke;
    v14[3] = &unk_1E5248ED8;
    id v15 = v4;
    nw_protocol_options_access_handle(v3, v14);

    goto LABEL_3;
  }
  id v6 = __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  unint64_t v19 = "nw_proxy_options_set_authentication_challenge_handler";
  unsigned int v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (__nwlog_fault(v7, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)int buf = 136446210;
        unint64_t v19 = "nw_proxy_options_set_authentication_challenge_handler";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null options", buf, 0xCu);
      }
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v8 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)int buf = 136446466;
          unint64_t v19 = "nw_proxy_options_set_authentication_challenge_handler";
          __int16 v20 = 2082;
          os_log_type_t v21 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v12)
      {
        *(_DWORD *)int buf = 136446210;
        unint64_t v19 = "nw_proxy_options_set_authentication_challenge_handler";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)int buf = 136446210;
        unint64_t v19 = "nw_proxy_options_set_authentication_challenge_handler";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v7) {
    free(v7);
  }
LABEL_3:
}

void sub_1832235CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

void nw_endpoint_handler_path_change(NWConcrete_nw_endpoint_handler *a1)
{
  buf[11] = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  v423 = v1;
  if (!v1)
  {
    v290 = __nwlog_obj();
    LODWORD(buf[0]) = 136446210;
    *(void *)((char *)buf + 4) = "nw_endpoint_handler_path_change";
    v291 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(v435[0]) = 16;
    LOBYTE(v431) = 0;
    if (!__nwlog_fault(v291, v435, &v431)) {
      goto LABEL_455;
    }
    if (LOBYTE(v435[0]) == 17)
    {
      v292 = __nwlog_obj();
      os_log_type_t v293 = v435[0];
      if (os_log_type_enabled(v292, v435[0]))
      {
        LODWORD(buf[0]) = 136446210;
        *(void *)((char *)buf + 4) = "nw_endpoint_handler_path_change";
        _os_log_impl(&dword_1830D4000, v292, v293, "%{public}s called with null handler", (uint8_t *)buf, 0xCu);
      }
    }
    else if ((_BYTE)v431)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v292 = __nwlog_obj();
      os_log_type_t v312 = v435[0];
      BOOL v313 = os_log_type_enabled(v292, v435[0]);
      if (backtrace_string)
      {
        if (v313)
        {
          LODWORD(buf[0]) = 136446466;
          *(void *)((char *)buf + 4) = "nw_endpoint_handler_path_change";
          WORD2(buf[1]) = 2082;
          *(void *)((char *)&buf[1] + 6) = backtrace_string;
          _os_log_impl(&dword_1830D4000, v292, v312, "%{public}s called with null handler, dumping backtrace:%{public}s", (uint8_t *)buf, 0x16u);
        }

        free(backtrace_string);
LABEL_455:
        if (!v291) {
          goto LABEL_242;
        }
LABEL_456:
        free(v291);
        goto LABEL_242;
      }
      if (v313)
      {
        LODWORD(buf[0]) = 136446210;
        *(void *)((char *)buf + 4) = "nw_endpoint_handler_path_change";
        _os_log_impl(&dword_1830D4000, v292, v312, "%{public}s called with null handler, no backtrace", (uint8_t *)buf, 0xCu);
      }
    }
    else
    {
      v292 = __nwlog_obj();
      os_log_type_t v328 = v435[0];
      if (os_log_type_enabled(v292, v435[0]))
      {
        LODWORD(buf[0]) = 136446210;
        *(void *)((char *)buf + 4) = "nw_endpoint_handler_path_change";
        _os_log_impl(&dword_1830D4000, v292, v328, "%{public}s called with null handler, backtrace limit exceeded", (uint8_t *)buf, 0xCu);
      }
    }
LABEL_454:

    goto LABEL_455;
  }
  uint64_t v2 = (uint64_t)v1;
  current_path = v1->current_path;
  if (!current_path)
  {
    v294 = __nwlog_obj();
    LODWORD(buf[0]) = 136446210;
    *(void *)((char *)buf + 4) = "nw_endpoint_handler_path_change";
    v291 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(v435[0]) = 16;
    LOBYTE(v431) = 0;
    if (!__nwlog_fault(v291, v435, &v431)) {
      goto LABEL_455;
    }
    if (LOBYTE(v435[0]) == 17)
    {
      v292 = __nwlog_obj();
      os_log_type_t v295 = v435[0];
      if (os_log_type_enabled(v292, v435[0]))
      {
        LODWORD(buf[0]) = 136446210;
        *(void *)((char *)buf + 4) = "nw_endpoint_handler_path_change";
        _os_log_impl(&dword_1830D4000, v292, v295, "%{public}s called with null handler->current_path", (uint8_t *)buf, 0xCu);
      }
    }
    else if ((_BYTE)v431)
    {
      v314 = (char *)__nw_create_backtrace_string();
      v292 = __nwlog_obj();
      os_log_type_t v315 = v435[0];
      BOOL v316 = os_log_type_enabled(v292, v435[0]);
      if (v314)
      {
        if (v316)
        {
          LODWORD(buf[0]) = 136446466;
          *(void *)((char *)buf + 4) = "nw_endpoint_handler_path_change";
          WORD2(buf[1]) = 2082;
          *(void *)((char *)&buf[1] + 6) = v314;
          _os_log_impl(&dword_1830D4000, v292, v315, "%{public}s called with null handler->current_path, dumping backtrace:%{public}s", (uint8_t *)buf, 0x16u);
        }

        free(v314);
        if (!v291) {
          goto LABEL_242;
        }
        goto LABEL_456;
      }
      if (v316)
      {
        LODWORD(buf[0]) = 136446210;
        *(void *)((char *)buf + 4) = "nw_endpoint_handler_path_change";
        _os_log_impl(&dword_1830D4000, v292, v315, "%{public}s called with null handler->current_path, no backtrace", (uint8_t *)buf, 0xCu);
      }
    }
    else
    {
      v292 = __nwlog_obj();
      os_log_type_t v329 = v435[0];
      if (os_log_type_enabled(v292, v435[0]))
      {
        LODWORD(buf[0]) = 136446210;
        *(void *)((char *)buf + 4) = "nw_endpoint_handler_path_change";
        _os_log_impl(&dword_1830D4000, v292, v329, "%{public}s called with null handler->current_path, backtrace limit exceeded", (uint8_t *)buf, 0xCu);
      }
    }
    goto LABEL_454;
  }
  id v4 = current_path;
  int v5 = *((_DWORD *)v4 + 94);

  char v6 = *(unsigned char *)(v2 + 268);
  if ((v6 & 0x20) == 0)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
    }
    unsigned int v7 = (id)gconnectionLogObj;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      if (*((unsigned char *)v423 + 268)) {
        BOOL v8 = "dry-run ";
      }
      else {
        BOOL v8 = "";
      }
      nw_endpoint_t v9 = nw_endpoint_handler_copy_endpoint(v423);
      logging_description = nw_endpoint_get_logging_description(v9);
      int v421 = v5;
      uint64_t state = v423->state;
      if (state > 5) {
        BOOL v12 = "unknown-state";
      }
      else {
        BOOL v12 = off_1E523FB38[state];
      }
      os_log_type_t v13 = v423;
      uint64_t v14 = (os_unfair_lock_s *)v13;
      id v15 = "path";
      switch(v13->mode)
      {
        case 0:
          break;
        case 1:
          id v15 = "resolver";
          break;
        case 2:
          id v15 = nw_endpoint_flow_mode_string(v13->mode_handler);
          break;
        case 3:
          id v15 = "proxy";
          break;
        case 4:
          id v15 = "fallback";
          break;
        case 5:
          id v15 = "transform";
          break;
        default:
          id v15 = "unknown-mode";
          break;
      }

      char v16 = v14 + 28;
      unint64_t v17 = v14;
      os_unfair_lock_lock(v14 + 28);
      unint64_t v18 = v423->current_path;
      os_unfair_lock_unlock(v16);

      LODWORD(buf[0]) = 136447746;
      *(void *)((char *)buf + 4) = "nw_endpoint_handler_path_change";
      WORD2(buf[1]) = 2082;
      *(void *)((char *)&buf[1] + 6) = v423->id_str;
      HIWORD(buf[2]) = 2082;
      buf[3] = v8;
      LOWORD(buf[4]) = 2082;
      *(void *)((char *)&buf[4] + 2) = logging_description;
      WORD1(buf[5]) = 2082;
      *(void *)((char *)&buf[5] + 4) = v12;
      WORD2(buf[6]) = 2082;
      *(void *)((char *)&buf[6] + 6) = v15;
      HIWORD(buf[7]) = 2114;
      buf[8] = v18;
      _os_log_impl(&dword_1830D4000, v7, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] ", (uint8_t *)buf, 0x48u);

      int v5 = v421;
    }

    uint64_t v2 = (uint64_t)v423;
    char v6 = *((unsigned char *)v423 + 268);
  }
  int v19 = *(_DWORD *)(v2 + 120);
  if (v19 != 2)
  {
    v6 &= ~8u;
    *(unsigned char *)(v2 + 268) = v6;
    if ((v19 & 0xFFFFFFFE) == 4) {
      goto LABEL_442;
    }
  }
  if ((v6 & 2) == 0)
  {
    if (v5 != 3)
    {
      *(unsigned char *)(v2 + 268) = v6 & 0xFD;
      __int16 v20 = *(void **)(v2 + 88);
      *(void *)(v2 + 88) = 0;
      os_log_type_t v21 = (id)v2;

      uint64_t v22 = (void *)v21[12];
      v21[12] = 0;

      BOOL v23 = (void *)v21[13];
      v21[13] = 0;

      uint64_t v2 = (uint64_t)v423;
    }
LABEL_28:
    if (*(_DWORD *)(v2 + 116) == 2 && nw_endpoint_flow_should_ignore_path_result(*(void **)(v2 + 248)))
    {
      int v24 = 0;
      uint64_t v431 = 0;
      v432 = &v431;
      uint64_t v433 = 0x2020000000;
      char v434 = 0;
      int v5 = 1;
LABEL_58:
      if (nw_parameters_get_attribution(*(nw_parameters_t *)(v2 + 32)) == nw_parameters_attribution_developer
        && nw_endpoint_get_type(*(nw_endpoint_t *)(v2 + 24)) == nw_endpoint_type_host)
      {
        memset(buf, 0, 88);
        nw_parameters_to_ne_app_context(*(void **)(v2 + 32), (uint64_t)buf);
        nw_endpoint_get_hostname(*(nw_endpoint_t *)(v2 + 24));
        if (ne_tracker_check_is_hostname_blocked() == 1)
        {
          if ((*(unsigned char *)(v2 + 268) & 0x20) == 0)
          {
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
            }
            uint64_t v51 = (id)gconnectionLogObj;
            if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
            {
              if (*((unsigned char *)v423 + 268)) {
                char v52 = "dry-run ";
              }
              else {
                char v52 = "";
              }
              nw_endpoint_t v53 = nw_endpoint_handler_copy_endpoint(v423);
              unint64_t v54 = nw_endpoint_get_logging_description(v53);
              uint64_t v55 = v423->state;
              if (v55 > 5) {
                BOOL v56 = "unknown-state";
              }
              else {
                BOOL v56 = off_1E523FB38[v55];
              }
              float64x2x2_t v166 = v423;
              char v167 = (os_unfair_lock_s *)v166;
              v168 = "path";
              switch(v423->mode)
              {
                case 0:
                  break;
                case 1:
                  v168 = "resolver";
                  break;
                case 2:
                  v168 = nw_endpoint_flow_mode_string(v166->mode_handler);
                  break;
                case 3:
                  v168 = "proxy";
                  break;
                case 4:
                  v168 = "fallback";
                  break;
                case 5:
                  v168 = "transform";
                  break;
                default:
                  v168 = "unknown-mode";
                  break;
              }

              id v202 = v167 + 28;
              id v203 = v167;
              os_unfair_lock_lock(v167 + 28);
              v204 = v423->current_path;
              os_unfair_lock_unlock(v202);

              LODWORD(v435[0]) = 136447746;
              *(void *)((char *)v435 + 4) = "nw_endpoint_handler_path_change";
              WORD2(v435[1]) = 2082;
              *(void *)((char *)&v435[1] + 6) = v423->id_str;
              HIWORD(v435[2]) = 2082;
              v436 = v52;
              __int16 v437 = 2082;
              v438 = v54;
              __int16 v439 = 2082;
              v440 = v56;
              __int16 v441 = 2082;
              v442 = v168;
              __int16 v443 = 2114;
              v444 = v204;
              _os_log_impl(&dword_1830D4000, v51, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] blocked tracker", (uint8_t *)v435, 0x48u);
            }
            uint64_t v2 = (uint64_t)v423;
          }
          goto LABEL_271;
        }
      }
      if (nw_parameters_get_block_trackers(*(void **)(v2 + 32))
        && nw_parameters_get_is_known_tracker(*(void **)(v2 + 32))
        && nw_endpoint_get_can_block_request(*(void **)(v2 + 24))
        && !nw_endpoint_hostname_matches_tracker(*(void **)(v2 + 24)))
      {
LABEL_271:
        nw_endpoint_handler_handle_failure((void *)v2);
        v205 = -[NWConcrete_nw_error initWithDomain:code:]([NWConcrete_nw_error alloc], 1, 50);
        *(_DWORD *)(v2 + 80) = 589825;
        nw_endpoint_handler_report((void *)v2, 0, (_WORD *)(v2 + 80), v205);

LABEL_440:
        uint64_t v2 = (uint64_t)v423;
        goto LABEL_441;
      }
      BOOL has_custom_proxy_configs = nw_parameters_has_custom_proxy_configs(*(void **)(v2 + 32));
      if (v5 == 3)
      {
        if (nw_endpoint_handler_triggered_agents_updated((NWConcrete_nw_endpoint_handler *)v2))
        {
          unint64_t v58 = (char *)(id)v2;
          uint64_t v59 = v58;
          unint64_t v60 = *(void **)(v2 + 32);
          if (v60)
          {
            int v61 = v60;
            BOOL v62 = (v61[12] & 0x4000000000) == 0;

            if (!v62)
            {
              uint64_t v2 = (uint64_t)v423;
              if ((nw_endpoint_handler_get_logging_disabled(v59) & 1) == 0)
              {
                if (__nwlog_connection_log::onceToken != -1) {
                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
                }
                BOOL v63 = (id)gconnectionLogObj;
                if (os_log_type_enabled(v63, OS_LOG_TYPE_DEBUG))
                {
                  id_string = nw_endpoint_handler_get_id_string(v59);
                  os_log_type_t v65 = nw_endpoint_handler_dry_run_string(v59);
                  nw_endpoint_t v66 = nw_endpoint_handler_copy_endpoint(v59);
                  unsigned int v67 = nw_endpoint_get_logging_description(v66);
                  unint64_t v68 = nw_endpoint_handler_state_string(v59);
                  int v69 = nw_endpoint_handler_mode_string(v59);
                  id v70 = nw_endpoint_handler_copy_current_path(v59);
                  LODWORD(buf[0]) = 136447746;
                  *(void *)((char *)buf + 4) = "nw_endpoint_handler_path_change";
                  WORD2(buf[1]) = 2082;
                  *(void *)((char *)&buf[1] + 6) = id_string;
                  HIWORD(buf[2]) = 2082;
                  buf[3] = v65;
                  LOWORD(buf[4]) = 2082;
                  *(void *)((char *)&buf[4] + 2) = v67;
                  WORD1(buf[5]) = 2082;
                  *(void *)((char *)&buf[5] + 4) = v68;
                  WORD2(buf[6]) = 2082;
                  *(void *)((char *)&buf[6] + 6) = v69;
                  HIWORD(buf[7]) = 2114;
                  buf[8] = v70;
                  _os_log_impl(&dword_1830D4000, v63, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] agents failed to become active", (uint8_t *)buf, 0x48u);
                }
LABEL_252:

                uint64_t v2 = (uint64_t)v423;
                goto LABEL_253;
              }
              goto LABEL_253;
            }
          }
          else
          {
          }
          uint64_t v2 = (uint64_t)v423;
          if ((*((unsigned char *)v423 + 268) & 0x20) == 0)
          {
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
            }
            BOOL v63 = (id)gconnectionLogObj;
            if (os_log_type_enabled(v63, OS_LOG_TYPE_INFO))
            {
              if (*((unsigned char *)v423 + 268)) {
                double v135 = "dry-run ";
              }
              else {
                double v135 = "";
              }
              nw_endpoint_t v136 = nw_endpoint_handler_copy_endpoint(v59);
              char v137 = nw_endpoint_get_logging_description(v136);
              uint64_t v138 = v423->state;
              if (v138 > 5) {
                char v139 = "unknown-state";
              }
              else {
                char v139 = off_1E523FB38[v138];
              }
              v155 = v59;
              __int16 v156 = (os_unfair_lock_s *)v155;
              __int16 v157 = "path";
              switch(v423->mode)
              {
                case 0:
                  break;
                case 1:
                  __int16 v157 = "resolver";
                  break;
                case 2:
                  __int16 v157 = nw_endpoint_flow_mode_string(*((void **)v155 + 31));
                  break;
                case 3:
                  __int16 v157 = "proxy";
                  break;
                case 4:
                  __int16 v157 = "fallback";
                  break;
                case 5:
                  __int16 v157 = "transform";
                  break;
                default:
                  __int16 v157 = "unknown-mode";
                  break;
              }

              id v194 = v156 + 28;
              v195 = v156;
              os_unfair_lock_lock(v156 + 28);
              id v196 = v423->current_path;
              os_unfair_lock_unlock(v194);

              LODWORD(buf[0]) = 136447746;
              *(void *)((char *)buf + 4) = "nw_endpoint_handler_path_change";
              WORD2(buf[1]) = 2082;
              *(void *)((char *)&buf[1] + 6) = v59 + 168;
              HIWORD(buf[2]) = 2082;
              buf[3] = v135;
              LOWORD(buf[4]) = 2082;
              *(void *)((char *)&buf[4] + 2) = v137;
              WORD1(buf[5]) = 2082;
              *(void *)((char *)&buf[5] + 4) = v139;
              WORD2(buf[6]) = 2082;
              *(void *)((char *)&buf[6] + 6) = v157;
              HIWORD(buf[7]) = 2114;
              buf[8] = v196;
              _os_log_impl(&dword_1830D4000, v63, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] agents failed to become active", (uint8_t *)buf, 0x48u);
            }
            goto LABEL_252;
          }
LABEL_253:
          if (*(_DWORD *)(v2 + 120) != 1 || *(_DWORD *)(v2 + 116)) {
            goto LABEL_441;
          }
          goto LABEL_296;
        }
        if (*(_DWORD *)(v2 + 116) == 2 && nw_endpoint_flow_get_is_leaf_handler(*(void **)(v2 + 248)))
        {
          int v82 = *(_DWORD *)(v2 + 120);
          int minimize_logging = nw_endpoint_handler_get_minimize_logging((void *)v2);
          char logging_disabled = nw_endpoint_handler_get_logging_disabled((void *)v2);
          if (v82 == 3)
          {
            if (minimize_logging)
            {
              if (logging_disabled) {
                goto LABEL_351;
              }
              if (__nwlog_connection_log::onceToken != -1) {
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
              }
              unsigned int v85 = (id)gconnectionLogObj;
              if (os_log_type_enabled(v85, OS_LOG_TYPE_DEBUG))
              {
                uint64_t v330 = nw_endpoint_handler_get_id_string(v423);
                uint64_t v331 = nw_endpoint_handler_dry_run_string(v423);
                nw_endpoint_t v332 = nw_endpoint_handler_copy_endpoint(v423);
                uint64_t v333 = nw_endpoint_get_logging_description(v332);
                v334 = nw_endpoint_handler_state_string(v423);
                uint64_t v335 = nw_endpoint_handler_mode_string(v423);
                id v336 = nw_endpoint_handler_copy_current_path(v423);
                LODWORD(buf[0]) = 136447746;
                *(void *)((char *)buf + 4) = "nw_endpoint_handler_path_change";
                WORD2(buf[1]) = 2082;
                *(void *)((char *)&buf[1] + 6) = v330;
                HIWORD(buf[2]) = 2082;
                buf[3] = v331;
                LOWORD(buf[4]) = 2082;
                *(void *)((char *)&buf[4] + 2) = v333;
                WORD1(buf[5]) = 2082;
                *(void *)((char *)&buf[5] + 4) = v334;
                WORD2(buf[6]) = 2082;
                *(void *)((char *)&buf[6] + 6) = v335;
                HIWORD(buf[7]) = 2114;
                buf[8] = v336;
                _os_log_impl(&dword_1830D4000, v85, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] flow was ready previously, handling updated path", (uint8_t *)buf, 0x48u);
              }
              goto LABEL_121;
            }
            if ((logging_disabled & 1) == 0)
            {
              if (__nwlog_connection_log::onceToken != -1) {
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
              }
              unsigned int v85 = (id)gconnectionLogObj;
              if (os_log_type_enabled(v85, OS_LOG_TYPE_INFO))
              {
                uint64_t v86 = nw_endpoint_handler_get_id_string((void *)v2);
                os_log_type_t v87 = nw_endpoint_handler_dry_run_string((void *)v2);
                nw_endpoint_t v88 = nw_endpoint_handler_copy_endpoint((void *)v2);
                BOOL v89 = nw_endpoint_get_logging_description(v88);
                uint64_t v90 = nw_endpoint_handler_state_string((void *)v2);
                int v91 = nw_endpoint_handler_mode_string((void *)v2);
                id v92 = nw_endpoint_handler_copy_current_path((void *)v2);
                LODWORD(buf[0]) = 136447746;
                *(void *)((char *)buf + 4) = "nw_endpoint_handler_path_change";
                WORD2(buf[1]) = 2082;
                *(void *)((char *)&buf[1] + 6) = v86;
                HIWORD(buf[2]) = 2082;
                buf[3] = v87;
                LOWORD(buf[4]) = 2082;
                *(void *)((char *)&buf[4] + 2) = v89;
                WORD1(buf[5]) = 2082;
                *(void *)((char *)&buf[5] + 4) = v90;
                WORD2(buf[6]) = 2082;
                *(void *)((char *)&buf[6] + 6) = v91;
                HIWORD(buf[7]) = 2114;
                buf[8] = v92;
                _os_log_impl(&dword_1830D4000, v85, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] flow was ready previously, handling updated path", (uint8_t *)buf, 0x48u);
              }
LABEL_121:

              uint64_t v2 = (uint64_t)v423;
            }
LABEL_351:
            id v270 = *(id *)(v2 + 248);
            [v270 updatePathWithHandler:v2];

            goto LABEL_440;
          }
          if (!minimize_logging)
          {
            if (logging_disabled)
            {
LABEL_296:
              nw_endpoint_handler_handle_failure((void *)v2);
              nw_endpoint_handler_report((void *)v2, 0, 0, 0);
              goto LABEL_441;
            }
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
            }
            char v180 = (id)gconnectionLogObj;
            if (!os_log_type_enabled(v180, OS_LOG_TYPE_INFO))
            {
LABEL_234:

              uint64_t v2 = (uint64_t)v423;
              goto LABEL_296;
            }
LABEL_233:
            v181 = nw_endpoint_handler_get_id_string((void *)v2);
            v182 = nw_endpoint_handler_dry_run_string((void *)v2);
            nw_endpoint_t v183 = nw_endpoint_handler_copy_endpoint((void *)v2);
            nw_endpoint_t v184 = nw_endpoint_get_logging_description(v183);
            v185 = nw_endpoint_handler_state_string((void *)v2);
            v186 = nw_endpoint_handler_mode_string((void *)v2);
            id v187 = nw_endpoint_handler_copy_current_path((void *)v2);
            LODWORD(buf[0]) = 136447746;
            *(void *)((char *)buf + 4) = "nw_endpoint_handler_path_change";
            WORD2(buf[1]) = 2082;
            *(void *)((char *)&buf[1] + 6) = v181;
            HIWORD(buf[2]) = 2082;
            buf[3] = v182;
            LOWORD(buf[4]) = 2082;
            *(void *)((char *)&buf[4] + 2) = v184;
            WORD1(buf[5]) = 2082;
            *(void *)((char *)&buf[5] + 4) = v185;
            WORD2(buf[6]) = 2082;
            *(void *)((char *)&buf[6] + 6) = v186;
            HIWORD(buf[7]) = 2114;
            buf[8] = v187;
            _os_log_impl(&dword_1830D4000, v180, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] flow is no longer satisfied", (uint8_t *)buf, 0x48u);

            goto LABEL_234;
          }
          if (logging_disabled) {
            goto LABEL_296;
          }
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          char v180 = (id)gconnectionLogObj;
          if (!os_log_type_enabled(v180, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_234;
          }
          goto LABEL_466;
        }
        if (*(int *)(v2 + 120) > 2)
        {
LABEL_441:
          _Block_object_dispose(&v431, 8);
          goto LABEL_442;
        }
        id v93 = (id)v2;
        BOOL v94 = v93;
        uint64_t v95 = *(void **)(v2 + 32);
        if (v95)
        {
          uint64_t v96 = v95;
          BOOL v97 = (v96[12] & 0x4000000000) == 0;

          if (!v97)
          {
            uint64_t v2 = (uint64_t)v423;
            if (nw_endpoint_handler_get_logging_disabled(v94)) {
              goto LABEL_295;
            }
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
            }
            uint64_t v98 = (id)gconnectionLogObj;
            if (os_log_type_enabled(v98, OS_LOG_TYPE_DEBUG))
            {
              id v99 = nw_endpoint_handler_get_id_string(v94);
              uint64_t v100 = nw_endpoint_handler_dry_run_string(v94);
              nw_endpoint_t v101 = nw_endpoint_handler_copy_endpoint(v94);
              uint64_t v102 = nw_endpoint_get_logging_description(v101);
              uint64_t v103 = nw_endpoint_handler_state_string(v94);
              os_log_type_t v104 = nw_endpoint_handler_mode_string(v94);
              id v105 = nw_endpoint_handler_copy_current_path(v94);
              LODWORD(buf[0]) = 136447746;
              *(void *)((char *)buf + 4) = "nw_endpoint_handler_path_change";
              WORD2(buf[1]) = 2082;
              *(void *)((char *)&buf[1] + 6) = v99;
              HIWORD(buf[2]) = 2082;
              buf[3] = v100;
              LOWORD(buf[4]) = 2082;
              *(void *)((char *)&buf[4] + 2) = v102;
              WORD1(buf[5]) = 2082;
              *(void *)((char *)&buf[5] + 4) = v103;
              WORD2(buf[6]) = 2082;
              *(void *)((char *)&buf[6] + 6) = v104;
              HIWORD(buf[7]) = 2114;
              buf[8] = v105;
              _os_log_impl(&dword_1830D4000, v98, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] trying to satisfy agents", (uint8_t *)buf, 0x48u);
            }
            goto LABEL_294;
          }
        }
        else
        {
        }
        uint64_t v2 = (uint64_t)v423;
        if ((*((unsigned char *)v423 + 268) & 0x20) != 0) {
          goto LABEL_295;
        }
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        uint64_t v98 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v98, OS_LOG_TYPE_INFO))
        {
          v169 = v94;

          os_log_type_t v170 = v169;
          BOOL v171 = (*((unsigned char *)v423 + 268) & 1) == 0;

          if (v171) {
            v172 = "";
          }
          else {
            v172 = "dry-run ";
          }
          nw_endpoint_t v173 = nw_endpoint_handler_copy_endpoint(v170);
          v174 = nw_endpoint_get_logging_description(v173);
          id v175 = v170;
          id v176 = v175;
          uint64_t v177 = v423->state;
          v422 = v174;
          v178 = v172;
          if (v177 > 5) {
            v179 = "unknown-state";
          }
          else {
            v179 = off_1E523FB38[v177];
          }

          v191 = v176;
          v192 = v191;
          nw_endpoint_t v193 = "path";
          switch(v423->mode)
          {
            case 0:
              break;
            case 1:
              nw_endpoint_t v193 = "resolver";
              break;
            case 2:
              nw_endpoint_t v193 = nw_endpoint_flow_mode_string(v191[31]);
              break;
            case 3:
              nw_endpoint_t v193 = "proxy";
              break;
            case 4:
              nw_endpoint_t v193 = "fallback";
              break;
            case 5:
              nw_endpoint_t v193 = "transform";
              break;
            default:
              nw_endpoint_t v193 = "unknown-mode";
              break;
          }

          v220 = v192;
          os_unfair_lock_lock(v220 + 28);
          v221 = v423->current_path;
          os_unfair_lock_unlock(v220 + 28);

          LODWORD(buf[0]) = 136447746;
          *(void *)((char *)buf + 4) = "nw_endpoint_handler_path_change";
          WORD2(buf[1]) = 2082;
          *(void *)((char *)&buf[1] + 6) = v169 + 168;
          HIWORD(buf[2]) = 2082;
          buf[3] = v178;
          LOWORD(buf[4]) = 2082;
          *(void *)((char *)&buf[4] + 2) = v422;
          WORD1(buf[5]) = 2082;
          *(void *)((char *)&buf[5] + 4) = v179;
          WORD2(buf[6]) = 2082;
          *(void *)((char *)&buf[6] + 6) = v193;
          HIWORD(buf[7]) = 2114;
          buf[8] = v221;
          _os_log_impl(&dword_1830D4000, v98, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] trying to satisfy agents", (uint8_t *)buf, 0x48u);
        }
LABEL_294:

        uint64_t v2 = (uint64_t)v423;
LABEL_295:
        if ((nw_endpoint_handler_trigger_agents(v94, 0) & 1) == 0) {
          goto LABEL_296;
        }
        goto LABEL_441;
      }
      BOOL v71 = has_custom_proxy_configs;
      int v72 = *(_DWORD *)(v2 + 120);
      if (v72 == 1 && *(_DWORD *)(v2 + 116) == 2 && *(void *)(v2 + 248))
      {
        if (v5 != 1 && !*((unsigned char *)v432 + 24))
        {
          if (v24)
          {
            *(_DWORD *)(v2 + 80) = 393217;
            nw_endpoint_handler_report((void *)v2, 0, (_WORD *)(v2 + 80), 0);
          }
          goto LABEL_260;
        }
        *(_DWORD *)(v2 + 80) = 196609;
        nw_endpoint_handler_report((void *)v2, 0, (_WORD *)(v2 + 80), 0);
        uint32_t v73 = (void **)(id)v2;
        if (*(_DWORD *)(v2 + 120) != 1
          || (int v74 = *(_DWORD *)(v2 + 116)) != 0
          && (v74 != 2 || (nw_endpoint_flow_get_is_leaf_handler(*(void **)(v2 + 248)) & 1) != 0)
          || (*(unsigned char *)(v2 + 268) & 1) != 0)
        {

          uint64_t v2 = (uint64_t)v423;
        }
        else
        {
          BOOL should_fallback = nw_path_should_fallback(*(void **)(v2 + 64), 0);

          uint64_t v2 = (uint64_t)v423;
          if (should_fallback)
          {
LABEL_260:
            uint64_t v199 = mach_continuous_time();
            if (v199 <= 1) {
              uint64_t v200 = 1;
            }
            else {
              uint64_t v200 = v199;
            }
            *(void *)(v2 + 128) = v200;
            id v201 = *(id *)(v2 + 248);
            [v201 startWithHandler:v2];

            goto LABEL_440;
          }
        }
        if (!nw_endpoint_handler_should_transform(v73[3], *(void **)(v2 + 32))
          && !nw_endpoint_proxy_handler_should_use_proxy(v73, *(void **)(v2 + 64), v71)
          && !nw_parameters_has_persistent_protocol_in_stack(*(void **)(v2 + 32))
          && nw_path_can_support_endpoint(*(void **)(v2 + 64), v73[3]))
        {
          nw_endpoint_flow_reset_is_leaf_handler(*(void **)(v2 + 248), 1);
        }
        goto LABEL_260;
      }
      if (v5 == 1 || *((unsigned char *)v432 + 24))
      {
        int v76 = *(_DWORD *)(v2 + 116);
        if (v72 == 1 && !v76)
        {
          *(_DWORD *)(v2 + 80) = 196609;
          nw_endpoint_handler_report((void *)v2, 0, (_WORD *)(v2 + 80), 0);
          if (*(_DWORD *)(v2 + 120) == 5) {
            goto LABEL_441;
          }
          os_unfair_lock_lock((os_unfair_lock_t)(v2 + 112));
          if ((*(unsigned char *)(v2 + 268) & 1) == 0
            && nw_endpoint_handler_has_persistent_application_protocols(v2)
            && !nw_path_can_support_endpoint(*(void **)(v2 + 64), *(void **)(v2 + 24)))
          {
            *(_DWORD *)(v2 + 116) = 2;
            uint64_t v206 = *(void *)(v2 + 72);
            uint64_t v207 = objc_alloc_init(NWConcrete_nw_endpoint_flow);
            *((unsigned char *)v207 + 32) = *((unsigned char *)v207 + 32) & 0xFC | (v206 == 0);
            v208 = *(void **)(v2 + 248);
            *(void *)(v2 + 248) = v207;
LABEL_396:

            __int16 v154 = v423;
            goto LABEL_397;
          }
          unsigned int v77 = (void **)(id)v2;
          unsigned int v78 = v77;
          if (*(_DWORD *)(v2 + 120) != 1
            || (int v79 = *(_DWORD *)(v2 + 116)) != 0
            && (v79 != 2 || (nw_endpoint_flow_get_is_leaf_handler(v77[31]) & 1) != 0)
            || (*(unsigned char *)(v2 + 268) & 1) != 0)
          {
          }
          else
          {
            BOOL v80 = nw_path_should_fallback(*(void **)(v2 + 64), 0);

            if (v80)
            {
              if ((*((unsigned char *)v423 + 268) & 1) != 0 || v78[9])
              {
                v423->uint64_t mode = 4;
                uint64_t v81 = objc_alloc_init(NWConcrete_nw_endpoint_fallback);
LABEL_395:
                v208 = v78[31];
                v78[31] = v81;
                goto LABEL_396;
              }
              goto LABEL_393;
            }
          }
          __int16 v154 = v423;
          if (nw_endpoint_handler_should_transform(v78[3], v423->parameters))
          {
            if ((*((unsigned char *)v423 + 268) & 1) != 0 || v78[9])
            {
              v423->uint64_t mode = 5;
              uint64_t v81 = objc_alloc_init(NWConcrete_nw_endpoint_transform);
              goto LABEL_395;
            }
          }
          else if (nw_endpoint_proxy_handler_should_use_proxy(v78, v423->current_path, v71))
          {
            if ((*((unsigned char *)v423 + 268) & 1) != 0 || v78[9])
            {
              v423->uint64_t mode = 3;
              uint64_t v81 = objc_alloc_init(NWConcrete_nw_endpoint_proxy);
              goto LABEL_395;
            }
          }
          else
          {
            if (nw_path_can_support_endpoint(v423->current_path, v78[3]))
            {
              v423->uint64_t mode = 2;
              id v197 = v78[9];
              uint64_t v81 = objc_alloc_init(NWConcrete_nw_endpoint_flow);
              char v198 = (uint64_t)v81->connected_child & 0xFC | (v197 == 0) | 2;
LABEL_394:
              LOBYTE(v81->connected_child) = v198;
              goto LABEL_395;
            }
            if (!nw_path_can_resolve_endpoint(v423->current_path, v78[3]))
            {
LABEL_397:
              os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 112));
              uint64_t v299 = mach_continuous_time();
              if (v299 <= 1) {
                uint64_t v300 = 1;
              }
              else {
                uint64_t v300 = v299;
              }
              v154->start_time = v300;
              v301 = v154->mode_handler;
              [(NWConcrete_nw_endpoint_mode_handler *)v301 startWithHandler:v154];

              goto LABEL_440;
            }
            if ((*((unsigned char *)v423 + 268) & 1) != 0 || v78[9])
            {
              v423->uint64_t mode = 1;
              uint64_t v81 = objc_alloc_init(NWConcrete_nw_endpoint_resolver);
              goto LABEL_395;
            }
          }
LABEL_393:
          v423->uint64_t mode = 2;
          uint64_t v81 = objc_alloc_init(NWConcrete_nw_endpoint_flow);
          char v198 = (uint64_t)v81->connected_child & 0xFC | 1;
          goto LABEL_394;
        }
        if (v76 != 2 || nw_path_changed_from_previous(*(void **)(v2 + 64)))
        {
          *(_DWORD *)(v2 + 80) = 327681;
          nw_endpoint_handler_report((void *)v2, 0, (_WORD *)(v2 + 80), 0);
          if (*(_DWORD *)(v2 + 120) == 5) {
            goto LABEL_441;
          }
        }
        if (!nw_endpoint_handler_should_reset_for_fallback((NWConcrete_nw_endpoint_handler *)v2)
          || *(void *)(v2 + 136)
          || ((uint64_t v106 = mach_continuous_time(), v106 <= 1) ? (v107 = 1) : (v107 = v106),
              unint64_t v108 = *(void *)(v2 + 128),
              v107 < v108))
        {
LABEL_439:
          id v327 = *(id *)(v2 + 248);
          [v327 updatePathWithHandler:v2];

          goto LABEL_440;
        }
        unint64_t v109 = nw_delta_nanos(v108, v107);
        unint64_t timeout_nanos_for_path = nw_endpoint_fallback_get_timeout_nanos_for_path(*(void **)(v2 + 64));
        BOOL v111 = timeout_nanos_for_path >= v109;
        unint64_t v112 = timeout_nanos_for_path - v109;
        if (v112 == 0 || !v111)
        {
          int v222 = nw_endpoint_handler_get_minimize_logging((void *)v2);
          char v223 = nw_endpoint_handler_get_logging_disabled((void *)v2);
          if (v222)
          {
            if (v223) {
              goto LABEL_305;
            }
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
            }
            v224 = (id)gconnectionLogObj;
            if (os_log_type_enabled(v224, OS_LOG_TYPE_DEBUG))
            {
              v358 = nw_endpoint_handler_get_id_string(v423);
              v359 = nw_endpoint_handler_dry_run_string(v423);
              nw_endpoint_t v360 = nw_endpoint_handler_copy_endpoint(v423);
              v361 = nw_endpoint_get_logging_description(v360);
              v362 = nw_endpoint_handler_state_string(v423);
              v363 = nw_endpoint_handler_mode_string(v423);
              id v364 = nw_endpoint_handler_copy_current_path(v423);
              LODWORD(buf[0]) = 136447746;
              *(void *)((char *)buf + 4) = "nw_endpoint_handler_path_change";
              WORD2(buf[1]) = 2082;
              *(void *)((char *)&buf[1] + 6) = v358;
              HIWORD(buf[2]) = 2082;
              buf[3] = v359;
              LOWORD(buf[4]) = 2082;
              *(void *)((char *)&buf[4] + 2) = v361;
              WORD1(buf[5]) = 2082;
              *(void *)((char *)&buf[5] + 4) = v362;
              WORD2(buf[6]) = 2082;
              *(void *)((char *)&buf[6] + 6) = v363;
              HIWORD(buf[7]) = 2114;
              buf[8] = v364;
              _os_log_impl(&dword_1830D4000, v224, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] fallback became enabled on path and timeout has already passed, resetting", (uint8_t *)buf, 0x48u);
            }
          }
          else
          {
            if (v223)
            {
LABEL_305:
              nw_endpoint_handler_reset_mode((void *)v2, 1);
              goto LABEL_439;
            }
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
            }
            v224 = (id)gconnectionLogObj;
            if (os_log_type_enabled(v224, OS_LOG_TYPE_INFO))
            {
              v225 = nw_endpoint_handler_get_id_string((void *)v2);
              id v226 = nw_endpoint_handler_dry_run_string((void *)v2);
              nw_endpoint_t v227 = nw_endpoint_handler_copy_endpoint((void *)v2);
              nw_endpoint_t v228 = nw_endpoint_get_logging_description(v227);
              int v229 = nw_endpoint_handler_state_string((void *)v2);
              v230 = nw_endpoint_handler_mode_string((void *)v2);
              id v231 = nw_endpoint_handler_copy_current_path((void *)v2);
              LODWORD(buf[0]) = 136447746;
              *(void *)((char *)buf + 4) = "nw_endpoint_handler_path_change";
              WORD2(buf[1]) = 2082;
              *(void *)((char *)&buf[1] + 6) = v225;
              HIWORD(buf[2]) = 2082;
              buf[3] = v226;
              LOWORD(buf[4]) = 2082;
              *(void *)((char *)&buf[4] + 2) = v228;
              WORD1(buf[5]) = 2082;
              *(void *)((char *)&buf[5] + 4) = v229;
              WORD2(buf[6]) = 2082;
              *(void *)((char *)&buf[6] + 6) = v230;
              HIWORD(buf[7]) = 2114;
              buf[8] = v231;
              _os_log_impl(&dword_1830D4000, v224, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] fallback became enabled on path and timeout has already passed, resetting", (uint8_t *)buf, 0x48u);
            }
          }

          uint64_t v2 = (uint64_t)v423;
          goto LABEL_305;
        }
        id v113 = *(void **)(v2 + 40);
        v425[0] = MEMORY[0x1E4F143A8];
        v425[1] = 3221225472;
        v425[2] = ___ZL31nw_endpoint_handler_path_changeP30NWConcrete_nw_endpoint_handler_block_invoke_141;
        v425[3] = &unk_1E524BAA8;
        id v114 = (id)v2;
        id v426 = v114;
        *(void *)(v2 + 136) = nw_queue_context_create_source(v113, 2, 3, 0, v425, 0);
        LODWORD(v113) = nw_endpoint_handler_get_minimize_logging(v114);
        char v115 = nw_endpoint_handler_get_logging_disabled(v114);
        if (v113)
        {
          if (v115)
          {
LABEL_149:
            uint64_t v124 = *(void *)(v2 + 136);
            if (v124)
            {
              dispatch_time_t v125 = dispatch_time(0x8000000000000000, v112);
              nw_queue_set_timer_values(v124, v125, 0xFFFFFFFFFFFFFFFFLL, 0xF4240uLL);
              nw_queue_activate_source(*(void *)(v2 + 136));
LABEL_438:

              uint64_t v2 = (uint64_t)v423;
              goto LABEL_439;
            }
            v271 = __nwlog_obj();
            LODWORD(buf[0]) = 136446210;
            *(void *)((char *)buf + 4) = "nw_endpoint_handler_path_change";
            v272 = (char *)_os_log_send_and_compose_impl();

            LOBYTE(v435[0]) = 16;
            char v424 = 0;
            if (__nwlog_fault(v272, v435, &v424))
            {
              if (LOBYTE(v435[0]) == 17)
              {
                id v273 = __nwlog_obj();
                os_log_type_t v274 = v435[0];
                if (os_log_type_enabled(v273, v435[0]))
                {
                  LODWORD(buf[0]) = 136446210;
                  *(void *)((char *)buf + 4) = "nw_endpoint_handler_path_change";
                  _os_log_impl(&dword_1830D4000, v273, v274, "%{public}s nw_queue_context_create_source(timer) failed", (uint8_t *)buf, 0xCu);
                }
              }
              else if (v424)
              {
                v296 = (char *)__nw_create_backtrace_string();
                id v273 = __nwlog_obj();
                os_log_type_t v297 = v435[0];
                BOOL v298 = os_log_type_enabled(v273, v435[0]);
                if (v296)
                {
                  if (v298)
                  {
                    LODWORD(buf[0]) = 136446466;
                    *(void *)((char *)buf + 4) = "nw_endpoint_handler_path_change";
                    WORD2(buf[1]) = 2082;
                    *(void *)((char *)&buf[1] + 6) = v296;
                    _os_log_impl(&dword_1830D4000, v273, v297, "%{public}s nw_queue_context_create_source(timer) failed, dumping backtrace:%{public}s", (uint8_t *)buf, 0x16u);
                  }

                  free(v296);
                  goto LABEL_436;
                }
                if (v298)
                {
                  LODWORD(buf[0]) = 136446210;
                  *(void *)((char *)buf + 4) = "nw_endpoint_handler_path_change";
                  _os_log_impl(&dword_1830D4000, v273, v297, "%{public}s nw_queue_context_create_source(timer) failed, no backtrace", (uint8_t *)buf, 0xCu);
                }
              }
              else
              {
                id v273 = __nwlog_obj();
                os_log_type_t v317 = v435[0];
                if (os_log_type_enabled(v273, v435[0]))
                {
                  LODWORD(buf[0]) = 136446210;
                  *(void *)((char *)buf + 4) = "nw_endpoint_handler_path_change";
                  _os_log_impl(&dword_1830D4000, v273, v317, "%{public}s nw_queue_context_create_source(timer) failed, backtrace limit exceeded", (uint8_t *)buf, 0xCu);
                }
              }
            }
LABEL_436:
            if (v272) {
              free(v272);
            }
            goto LABEL_438;
          }
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          int v116 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v116, OS_LOG_TYPE_DEBUG))
          {
            v365 = nw_endpoint_handler_get_id_string(v114);
            v366 = nw_endpoint_handler_dry_run_string(v114);
            nw_endpoint_t v367 = nw_endpoint_handler_copy_endpoint(v114);
            v368 = nw_endpoint_get_logging_description(v367);
            v369 = nw_endpoint_handler_state_string(v114);
            v370 = nw_endpoint_handler_mode_string(v114);
            id v371 = nw_endpoint_handler_copy_current_path(v114);
            LODWORD(buf[0]) = 136448002;
            *(void *)((char *)buf + 4) = "nw_endpoint_handler_path_change";
            WORD2(buf[1]) = 2082;
            *(void *)((char *)&buf[1] + 6) = v365;
            HIWORD(buf[2]) = 2082;
            buf[3] = v366;
            LOWORD(buf[4]) = 2082;
            *(void *)((char *)&buf[4] + 2) = v368;
            WORD1(buf[5]) = 2082;
            *(void *)((char *)&buf[5] + 4) = v369;
            WORD2(buf[6]) = 2082;
            *(void *)((char *)&buf[6] + 6) = v370;
            HIWORD(buf[7]) = 2114;
            buf[8] = v371;
            LOWORD(buf[9]) = 2048;
            *(void *)((char *)&buf[9] + 2) = v112 / 0xF4240;
            _os_log_impl(&dword_1830D4000, v116, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] fallback became enabled on path, setting timer for %llums before resetting", (uint8_t *)buf, 0x52u);
          }
        }
        else
        {
          if (v115) {
            goto LABEL_149;
          }
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          int v116 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v116, OS_LOG_TYPE_INFO))
          {
            unsigned int v117 = nw_endpoint_handler_get_id_string(v114);
            uint64_t v118 = nw_endpoint_handler_dry_run_string(v114);
            nw_endpoint_t v119 = nw_endpoint_handler_copy_endpoint(v114);
            uint64_t v120 = nw_endpoint_get_logging_description(v119);
            uint64_t v121 = nw_endpoint_handler_state_string(v114);
            int v122 = nw_endpoint_handler_mode_string(v114);
            id v123 = nw_endpoint_handler_copy_current_path(v114);
            LODWORD(buf[0]) = 136448002;
            *(void *)((char *)buf + 4) = "nw_endpoint_handler_path_change";
            WORD2(buf[1]) = 2082;
            *(void *)((char *)&buf[1] + 6) = v117;
            HIWORD(buf[2]) = 2082;
            buf[3] = v118;
            LOWORD(buf[4]) = 2082;
            *(void *)((char *)&buf[4] + 2) = v120;
            WORD1(buf[5]) = 2082;
            *(void *)((char *)&buf[5] + 4) = v121;
            WORD2(buf[6]) = 2082;
            *(void *)((char *)&buf[6] + 6) = v122;
            HIWORD(buf[7]) = 2114;
            buf[8] = v123;
            LOWORD(buf[9]) = 2048;
            *(void *)((char *)&buf[9] + 2) = v112 / 0xF4240;
            _os_log_impl(&dword_1830D4000, v116, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] fallback became enabled on path, setting timer for %llums before resetting", (uint8_t *)buf, 0x52u);
          }
        }

        uint64_t v2 = (uint64_t)v423;
        goto LABEL_149;
      }
      if (!v24)
      {
        if (nw_endpoint_handler_get_logging_disabled((void *)v2)) {
          goto LABEL_441;
        }
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        __int16 v158 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v158, OS_LOG_TYPE_ERROR))
        {
          unsigned int v159 = nw_endpoint_handler_get_id_string(v423);
          __int16 v160 = nw_endpoint_handler_dry_run_string(v423);
          nw_endpoint_t v161 = nw_endpoint_handler_copy_endpoint(v423);
          unint64_t v162 = nw_endpoint_get_logging_description(v161);
          __int16 v163 = nw_endpoint_handler_state_string(v423);
          uint64_t v164 = nw_endpoint_handler_mode_string(v423);
          id v165 = nw_endpoint_handler_copy_current_path(v423);
          LODWORD(buf[0]) = 136448002;
          *(void *)((char *)buf + 4) = "nw_endpoint_handler_path_change";
          WORD2(buf[1]) = 2082;
          *(void *)((char *)&buf[1] + 6) = v159;
          HIWORD(buf[2]) = 2082;
          buf[3] = v160;
          LOWORD(buf[4]) = 2082;
          *(void *)((char *)&buf[4] + 2) = v162;
          WORD1(buf[5]) = 2082;
          *(void *)((char *)&buf[5] + 4) = v163;
          WORD2(buf[6]) = 2082;
          *(void *)((char *)&buf[6] + 6) = v164;
          HIWORD(buf[7]) = 2114;
          buf[8] = v165;
          LOWORD(buf[9]) = 1024;
          *(_DWORD *)((char *)&buf[9] + 2) = v5;
          _os_log_impl(&dword_1830D4000, v158, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] endpoint handler path in unknown state: %d", (uint8_t *)buf, 0x4Eu);
        }
        goto LABEL_518;
      }
      *(_DWORD *)(v2 + 80) = 393217;
      nw_endpoint_handler_report((void *)v2, 0, (_WORD *)(v2 + 80), 0);
      if (*(_DWORD *)(v2 + 120) == 5) {
        goto LABEL_441;
      }
      if (nw_endpoint_handler_should_start_fallback((NWConcrete_nw_endpoint_handler *)v2))
      {
        int v140 = nw_endpoint_handler_get_minimize_logging((void *)v2);
        char v141 = nw_endpoint_handler_get_logging_disabled((void *)v2);
        if (v140)
        {
          if (v141)
          {
LABEL_184:
            os_unfair_lock_lock((os_unfair_lock_t)(v2 + 112));
            if ((*(unsigned char *)(v2 + 268) & 1) != 0 || *(void *)(v2 + 72))
            {
              *(_DWORD *)(v2 + 116) = 4;
              long long v150 = objc_alloc_init(NWConcrete_nw_endpoint_fallback);
            }
            else
            {
              *(_DWORD *)(v2 + 116) = 2;
              long long v150 = objc_alloc_init(NWConcrete_nw_endpoint_flow);
              LOBYTE(v150->primary_child) = (uint64_t)v150->primary_child & 0xFC | 1;
            }
            long long v151 = *(void **)(v2 + 248);
            *(void *)(v2 + 248) = v150;

            os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 112));
            uint64_t v152 = mach_continuous_time();
            if (v152 <= 1) {
              uint64_t v153 = 1;
            }
            else {
              uint64_t v153 = v152;
            }
LABEL_376:
            v423->start_time = v153;
            v289 = v423->mode_handler;
            [(NWConcrete_nw_endpoint_mode_handler *)v289 startWithHandler:v423];

            goto LABEL_440;
          }
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          uint64_t v142 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v142, OS_LOG_TYPE_DEBUG))
          {
            unsigned int v344 = nw_endpoint_handler_get_id_string(v423);
            __int16 v345 = nw_endpoint_handler_dry_run_string(v423);
            nw_endpoint_t v346 = nw_endpoint_handler_copy_endpoint(v423);
            uint64_t v347 = nw_endpoint_get_logging_description(v346);
            v348 = nw_endpoint_handler_state_string(v423);
            v349 = nw_endpoint_handler_mode_string(v423);
            id v350 = nw_endpoint_handler_copy_current_path(v423);
            LODWORD(buf[0]) = 136447746;
            *(void *)((char *)buf + 4) = "nw_endpoint_handler_path_change";
            WORD2(buf[1]) = 2082;
            *(void *)((char *)&buf[1] + 6) = v344;
            HIWORD(buf[2]) = 2082;
            buf[3] = v345;
            LOWORD(buf[4]) = 2082;
            *(void *)((char *)&buf[4] + 2) = v347;
            WORD1(buf[5]) = 2082;
            *(void *)((char *)&buf[5] + 4) = v348;
            WORD2(buf[6]) = 2082;
            *(void *)((char *)&buf[6] + 6) = v349;
            HIWORD(buf[7]) = 2114;
            buf[8] = v350;
            _os_log_impl(&dword_1830D4000, v142, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] trying fallback with unsatisfied path", (uint8_t *)buf, 0x48u);
          }
        }
        else
        {
          if (v141) {
            goto LABEL_184;
          }
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          uint64_t v142 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v142, OS_LOG_TYPE_INFO))
          {
            int v143 = nw_endpoint_handler_get_id_string((void *)v2);
            uint64_t v144 = nw_endpoint_handler_dry_run_string((void *)v2);
            nw_endpoint_t v145 = nw_endpoint_handler_copy_endpoint((void *)v2);
            int v146 = nw_endpoint_get_logging_description(v145);
            char v147 = nw_endpoint_handler_state_string((void *)v2);
            long long v148 = nw_endpoint_handler_mode_string((void *)v2);
            id v149 = nw_endpoint_handler_copy_current_path((void *)v2);
            LODWORD(buf[0]) = 136447746;
            *(void *)((char *)buf + 4) = "nw_endpoint_handler_path_change";
            WORD2(buf[1]) = 2082;
            *(void *)((char *)&buf[1] + 6) = v143;
            HIWORD(buf[2]) = 2082;
            buf[3] = v144;
            LOWORD(buf[4]) = 2082;
            *(void *)((char *)&buf[4] + 2) = v146;
            WORD1(buf[5]) = 2082;
            *(void *)((char *)&buf[5] + 4) = v147;
            WORD2(buf[6]) = 2082;
            *(void *)((char *)&buf[6] + 6) = v148;
            HIWORD(buf[7]) = 2114;
            buf[8] = v149;
            _os_log_impl(&dword_1830D4000, v142, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] trying fallback with unsatisfied path", (uint8_t *)buf, 0x48u);
          }
        }

        uint64_t v2 = (uint64_t)v423;
        goto LABEL_184;
      }
      int v209 = *(_DWORD *)(v2 + 116);
      if (v209)
      {
LABEL_274:
        if (v209 == 2)
        {
          if (*(_DWORD *)(v2 + 120) == 3 || !nw_endpoint_flow_get_is_leaf_handler(*(void **)(v2 + 248)))
          {
            int v260 = nw_endpoint_handler_get_minimize_logging((void *)v2);
            char v261 = nw_endpoint_handler_get_logging_disabled((void *)v2);
            if (v260)
            {
              if (v261) {
                goto LABEL_351;
              }
              if (__nwlog_connection_log::onceToken != -1) {
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
              }
              v262 = (id)gconnectionLogObj;
              if (os_log_type_enabled(v262, OS_LOG_TYPE_DEBUG))
              {
                v379 = nw_endpoint_handler_get_id_string(v423);
                v380 = nw_endpoint_handler_dry_run_string(v423);
                nw_endpoint_t v381 = nw_endpoint_handler_copy_endpoint(v423);
                v382 = nw_endpoint_get_logging_description(v381);
                v383 = nw_endpoint_handler_state_string(v423);
                v384 = nw_endpoint_handler_mode_string(v423);
                id v385 = nw_endpoint_handler_copy_current_path(v423);
                LODWORD(buf[0]) = 136447746;
                *(void *)((char *)buf + 4) = "nw_endpoint_handler_path_change";
                WORD2(buf[1]) = 2082;
                *(void *)((char *)&buf[1] + 6) = v379;
                HIWORD(buf[2]) = 2082;
                buf[3] = v380;
                LOWORD(buf[4]) = 2082;
                *(void *)((char *)&buf[4] + 2) = v382;
                WORD1(buf[5]) = 2082;
                *(void *)((char *)&buf[5] + 4) = v383;
                WORD2(buf[6]) = 2082;
                *(void *)((char *)&buf[6] + 6) = v384;
                HIWORD(buf[7]) = 2114;
                buf[8] = v385;
                _os_log_impl(&dword_1830D4000, v262, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] flow handling updated path", (uint8_t *)buf, 0x48u);
              }
            }
            else
            {
              if (v261) {
                goto LABEL_351;
              }
              if (__nwlog_connection_log::onceToken != -1) {
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
              }
              v262 = (id)gconnectionLogObj;
              if (os_log_type_enabled(v262, OS_LOG_TYPE_INFO))
              {
                os_log_type_t v263 = nw_endpoint_handler_get_id_string((void *)v2);
                v264 = nw_endpoint_handler_dry_run_string((void *)v2);
                nw_endpoint_t v265 = nw_endpoint_handler_copy_endpoint((void *)v2);
                BOOL v266 = nw_endpoint_get_logging_description(v265);
                v267 = nw_endpoint_handler_state_string((void *)v2);
                v268 = nw_endpoint_handler_mode_string((void *)v2);
                id v269 = nw_endpoint_handler_copy_current_path((void *)v2);
                LODWORD(buf[0]) = 136447746;
                *(void *)((char *)buf + 4) = "nw_endpoint_handler_path_change";
                WORD2(buf[1]) = 2082;
                *(void *)((char *)&buf[1] + 6) = v263;
                HIWORD(buf[2]) = 2082;
                buf[3] = v264;
                LOWORD(buf[4]) = 2082;
                *(void *)((char *)&buf[4] + 2) = v266;
                WORD1(buf[5]) = 2082;
                *(void *)((char *)&buf[5] + 4) = v267;
                WORD2(buf[6]) = 2082;
                *(void *)((char *)&buf[6] + 6) = v268;
                HIWORD(buf[7]) = 2114;
                buf[8] = v269;
                _os_log_impl(&dword_1830D4000, v262, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] flow handling updated path", (uint8_t *)buf, 0x48u);
              }
            }

            uint64_t v2 = (uint64_t)v423;
            goto LABEL_351;
          }
          int v245 = nw_endpoint_handler_get_minimize_logging((void *)v2);
          char v246 = nw_endpoint_handler_get_logging_disabled((void *)v2);
          if (!v245)
          {
            if (v246) {
              goto LABEL_296;
            }
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
            }
            char v180 = (id)gconnectionLogObj;
            if (!os_log_type_enabled(v180, OS_LOG_TYPE_INFO)) {
              goto LABEL_234;
            }
            goto LABEL_233;
          }
          if (v246) {
            goto LABEL_296;
          }
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          char v180 = (id)gconnectionLogObj;
          if (!os_log_type_enabled(v180, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_234;
          }
LABEL_466:
          uint64_t v337 = nw_endpoint_handler_get_id_string(v423);
          v338 = nw_endpoint_handler_dry_run_string(v423);
          nw_endpoint_t v339 = nw_endpoint_handler_copy_endpoint(v423);
          v340 = nw_endpoint_get_logging_description(v339);
          __int16 v341 = nw_endpoint_handler_state_string(v423);
          id v342 = nw_endpoint_handler_mode_string(v423);
          id v343 = nw_endpoint_handler_copy_current_path(v423);
          LODWORD(buf[0]) = 136447746;
          *(void *)((char *)buf + 4) = "nw_endpoint_handler_path_change";
          WORD2(buf[1]) = 2082;
          *(void *)((char *)&buf[1] + 6) = v337;
          HIWORD(buf[2]) = 2082;
          buf[3] = v338;
          LOWORD(buf[4]) = 2082;
          *(void *)((char *)&buf[4] + 2) = v340;
          WORD1(buf[5]) = 2082;
          *(void *)((char *)&buf[5] + 4) = v341;
          WORD2(buf[6]) = 2082;
          *(void *)((char *)&buf[6] + 6) = v342;
          HIWORD(buf[7]) = 2114;
          buf[8] = v343;
          _os_log_impl(&dword_1830D4000, v180, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] flow is no longer satisfied", (uint8_t *)buf, 0x48u);

          goto LABEL_234;
        }
        if (v209 == 3)
        {
          int v210 = nw_endpoint_handler_get_minimize_logging((void *)v2);
          char v211 = nw_endpoint_handler_get_logging_disabled((void *)v2);
          if (v210)
          {
            if (v211) {
              goto LABEL_351;
            }
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
            }
            v212 = (id)gconnectionLogObj;
            if (os_log_type_enabled(v212, OS_LOG_TYPE_DEBUG))
            {
              v372 = nw_endpoint_handler_get_id_string(v423);
              v373 = nw_endpoint_handler_dry_run_string(v423);
              nw_endpoint_t v374 = nw_endpoint_handler_copy_endpoint(v423);
              v375 = nw_endpoint_get_logging_description(v374);
              v376 = nw_endpoint_handler_state_string(v423);
              v377 = nw_endpoint_handler_mode_string(v423);
              id v378 = nw_endpoint_handler_copy_current_path(v423);
              LODWORD(buf[0]) = 136447746;
              *(void *)((char *)buf + 4) = "nw_endpoint_handler_path_change";
              WORD2(buf[1]) = 2082;
              *(void *)((char *)&buf[1] + 6) = v372;
              HIWORD(buf[2]) = 2082;
              buf[3] = v373;
              LOWORD(buf[4]) = 2082;
              *(void *)((char *)&buf[4] + 2) = v375;
              WORD1(buf[5]) = 2082;
              *(void *)((char *)&buf[5] + 4) = v376;
              WORD2(buf[6]) = 2082;
              *(void *)((char *)&buf[6] + 6) = v377;
              HIWORD(buf[7]) = 2114;
              buf[8] = v378;
              _os_log_impl(&dword_1830D4000, v212, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] handling unsatisfied updated path for proxy", (uint8_t *)buf, 0x48u);
            }
          }
          else
          {
            if (v211) {
              goto LABEL_351;
            }
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
            }
            v212 = (id)gconnectionLogObj;
            if (os_log_type_enabled(v212, OS_LOG_TYPE_INFO))
            {
              nw_endpoint_t v213 = nw_endpoint_handler_get_id_string((void *)v2);
              v214 = nw_endpoint_handler_dry_run_string((void *)v2);
              nw_endpoint_t v215 = nw_endpoint_handler_copy_endpoint((void *)v2);
              v216 = nw_endpoint_get_logging_description(v215);
              id v217 = nw_endpoint_handler_state_string((void *)v2);
              uint64_t v218 = nw_endpoint_handler_mode_string((void *)v2);
              id v219 = nw_endpoint_handler_copy_current_path((void *)v2);
              LODWORD(buf[0]) = 136447746;
              *(void *)((char *)buf + 4) = "nw_endpoint_handler_path_change";
              WORD2(buf[1]) = 2082;
              *(void *)((char *)&buf[1] + 6) = v213;
              HIWORD(buf[2]) = 2082;
              buf[3] = v214;
              LOWORD(buf[4]) = 2082;
              *(void *)((char *)&buf[4] + 2) = v216;
              WORD1(buf[5]) = 2082;
              *(void *)((char *)&buf[5] + 4) = v217;
              WORD2(buf[6]) = 2082;
              *(void *)((char *)&buf[6] + 6) = v218;
              HIWORD(buf[7]) = 2114;
              buf[8] = v219;
              _os_log_impl(&dword_1830D4000, v212, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] handling unsatisfied updated path for proxy", (uint8_t *)buf, 0x48u);
            }
          }

          uint64_t v2 = (uint64_t)v423;
          goto LABEL_351;
        }
        if (nw_endpoint_handler_should_perform_CrazyIvan46((NWConcrete_nw_endpoint_handler *)v2)
          || nw_endpoint_handler_should_do_local_only_resolution((NWConcrete_nw_endpoint_handler *)v2))
        {
          int v247 = nw_endpoint_handler_get_minimize_logging((void *)v2);
          char v248 = nw_endpoint_handler_get_logging_disabled((void *)v2);
          if (v247)
          {
            if (v248)
            {
LABEL_338:
              os_unfair_lock_lock((os_unfair_lock_t)(v2 + 112));
              if ((*(unsigned char *)(v2 + 268) & 1) != 0 || *(void *)(v2 + 72))
              {
                *(_DWORD *)(v2 + 116) = 1;
                __int16 v257 = objc_alloc_init(NWConcrete_nw_endpoint_resolver);
              }
              else
              {
                *(_DWORD *)(v2 + 116) = 2;
                __int16 v257 = objc_alloc_init(NWConcrete_nw_endpoint_flow);
                LOBYTE(v257->connected_child) = (uint64_t)v257->connected_child & 0xFC | 1;
              }
              id v258 = *(void **)(v2 + 248);
              *(void *)(v2 + 248) = v257;

              os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 112));
              uint64_t v259 = mach_continuous_time();
              if (v259 <= 1) {
                uint64_t v153 = 1;
              }
              else {
                uint64_t v153 = v259;
              }
              goto LABEL_376;
            }
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
            }
            __int16 v249 = (id)gconnectionLogObj;
            if (os_log_type_enabled(v249, OS_LOG_TYPE_DEBUG))
            {
              v386 = nw_endpoint_handler_get_id_string(v423);
              v387 = nw_endpoint_handler_dry_run_string(v423);
              nw_endpoint_t v388 = nw_endpoint_handler_copy_endpoint(v423);
              v389 = nw_endpoint_get_logging_description(v388);
              v390 = nw_endpoint_handler_state_string(v423);
              v391 = nw_endpoint_handler_mode_string(v423);
              id v392 = nw_endpoint_handler_copy_current_path(v423);
              LODWORD(buf[0]) = 136447746;
              *(void *)((char *)buf + 4) = "nw_endpoint_handler_path_change";
              WORD2(buf[1]) = 2082;
              *(void *)((char *)&buf[1] + 6) = v386;
              HIWORD(buf[2]) = 2082;
              buf[3] = v387;
              LOWORD(buf[4]) = 2082;
              *(void *)((char *)&buf[4] + 2) = v389;
              WORD1(buf[5]) = 2082;
              *(void *)((char *)&buf[5] + 4) = v390;
              WORD2(buf[6]) = 2082;
              *(void *)((char *)&buf[6] + 6) = v391;
              HIWORD(buf[7]) = 2114;
              buf[8] = v392;
              _os_log_impl(&dword_1830D4000, v249, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] trying resolution with unsatisfied path", (uint8_t *)buf, 0x48u);
            }
          }
          else
          {
            if (v248) {
              goto LABEL_338;
            }
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
            }
            __int16 v249 = (id)gconnectionLogObj;
            if (os_log_type_enabled(v249, OS_LOG_TYPE_INFO))
            {
              v250 = nw_endpoint_handler_get_id_string((void *)v2);
              __int16 v251 = nw_endpoint_handler_dry_run_string((void *)v2);
              nw_endpoint_t v252 = nw_endpoint_handler_copy_endpoint((void *)v2);
              __int16 v253 = nw_endpoint_get_logging_description(v252);
              nw_endpoint_t v254 = nw_endpoint_handler_state_string((void *)v2);
              __int16 v255 = nw_endpoint_handler_mode_string((void *)v2);
              id v256 = nw_endpoint_handler_copy_current_path((void *)v2);
              LODWORD(buf[0]) = 136447746;
              *(void *)((char *)buf + 4) = "nw_endpoint_handler_path_change";
              WORD2(buf[1]) = 2082;
              *(void *)((char *)&buf[1] + 6) = v250;
              HIWORD(buf[2]) = 2082;
              buf[3] = v251;
              LOWORD(buf[4]) = 2082;
              *(void *)((char *)&buf[4] + 2) = v253;
              WORD1(buf[5]) = 2082;
              *(void *)((char *)&buf[5] + 4) = v254;
              WORD2(buf[6]) = 2082;
              *(void *)((char *)&buf[6] + 6) = v255;
              HIWORD(buf[7]) = 2114;
              buf[8] = v256;
              _os_log_impl(&dword_1830D4000, v249, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] trying resolution with unsatisfied path", (uint8_t *)buf, 0x48u);
            }
          }

          uint64_t v2 = (uint64_t)v423;
          goto LABEL_338;
        }
        if (!*(_DWORD *)(v2 + 116))
        {
          if (!nw_path_trigger_inactive_cellular_agent_if_necessary(*(void **)(v2 + 64))) {
            goto LABEL_296;
          }
          int v318 = nw_endpoint_handler_get_minimize_logging((void *)v2);
          char v319 = nw_endpoint_handler_get_logging_disabled((void *)v2);
          if (v318)
          {
            uint64_t v2 = (uint64_t)v423;
            if (v319) {
              goto LABEL_296;
            }
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
            }
            char v180 = (id)gconnectionLogObj;
            if (os_log_type_enabled(v180, OS_LOG_TYPE_DEBUG))
            {
              v407 = nw_endpoint_handler_get_id_string(v423);
              v408 = nw_endpoint_handler_dry_run_string(v423);
              nw_endpoint_t v409 = nw_endpoint_handler_copy_endpoint(v423);
              v410 = nw_endpoint_get_logging_description(v409);
              v411 = nw_endpoint_handler_state_string(v423);
              v412 = nw_endpoint_handler_mode_string(v423);
              id v413 = nw_endpoint_handler_copy_current_path(v423);
              LODWORD(buf[0]) = 136447746;
              *(void *)((char *)buf + 4) = "nw_endpoint_handler_path_change";
              WORD2(buf[1]) = 2082;
              *(void *)((char *)&buf[1] + 6) = v407;
              HIWORD(buf[2]) = 2082;
              buf[3] = v408;
              LOWORD(buf[4]) = 2082;
              *(void *)((char *)&buf[4] + 2) = v410;
              WORD1(buf[5]) = 2082;
              *(void *)((char *)&buf[5] + 4) = v411;
              WORD2(buf[6]) = 2082;
              *(void *)((char *)&buf[6] + 6) = v412;
              HIWORD(buf[7]) = 2114;
              buf[8] = v413;
              _os_log_impl(&dword_1830D4000, v180, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] triggering cell", (uint8_t *)buf, 0x48u);
            }
          }
          else
          {
            uint64_t v2 = (uint64_t)v423;
            if (v319) {
              goto LABEL_296;
            }
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
            }
            char v180 = (id)gconnectionLogObj;
            if (os_log_type_enabled(v180, OS_LOG_TYPE_INFO))
            {
              uint64_t v320 = nw_endpoint_handler_get_id_string(v423);
              v321 = nw_endpoint_handler_dry_run_string(v423);
              nw_endpoint_t v322 = nw_endpoint_handler_copy_endpoint(v423);
              v323 = nw_endpoint_get_logging_description(v322);
              v324 = nw_endpoint_handler_state_string(v423);
              v325 = nw_endpoint_handler_mode_string(v423);
              id v326 = nw_endpoint_handler_copy_current_path(v423);
              LODWORD(buf[0]) = 136447746;
              *(void *)((char *)buf + 4) = "nw_endpoint_handler_path_change";
              WORD2(buf[1]) = 2082;
              *(void *)((char *)&buf[1] + 6) = v320;
              HIWORD(buf[2]) = 2082;
              buf[3] = v321;
              LOWORD(buf[4]) = 2082;
              *(void *)((char *)&buf[4] + 2) = v323;
              WORD1(buf[5]) = 2082;
              *(void *)((char *)&buf[5] + 4) = v324;
              WORD2(buf[6]) = 2082;
              *(void *)((char *)&buf[6] + 6) = v325;
              HIWORD(buf[7]) = 2114;
              buf[8] = v326;
              _os_log_impl(&dword_1830D4000, v180, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] triggering cell", (uint8_t *)buf, 0x48u);
            }
          }
          goto LABEL_234;
        }
        int v302 = nw_endpoint_handler_get_minimize_logging((void *)v2);
        char v303 = nw_endpoint_handler_get_logging_disabled((void *)v2);
        if (v302)
        {
          if (v303) {
            goto LABEL_441;
          }
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          __int16 v158 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v158, OS_LOG_TYPE_DEBUG))
          {
            v400 = nw_endpoint_handler_get_id_string(v423);
            v401 = nw_endpoint_handler_dry_run_string(v423);
            nw_endpoint_t v402 = nw_endpoint_handler_copy_endpoint(v423);
            v403 = nw_endpoint_get_logging_description(v402);
            v404 = nw_endpoint_handler_state_string(v423);
            v405 = nw_endpoint_handler_mode_string(v423);
            id v406 = nw_endpoint_handler_copy_current_path(v423);
            LODWORD(buf[0]) = 136447746;
            *(void *)((char *)buf + 4) = "nw_endpoint_handler_path_change";
            WORD2(buf[1]) = 2082;
            *(void *)((char *)&buf[1] + 6) = v400;
            HIWORD(buf[2]) = 2082;
            buf[3] = v401;
            LOWORD(buf[4]) = 2082;
            *(void *)((char *)&buf[4] + 2) = v403;
            WORD1(buf[5]) = 2082;
            *(void *)((char *)&buf[5] + 4) = v404;
            WORD2(buf[6]) = 2082;
            *(void *)((char *)&buf[6] + 6) = v405;
            HIWORD(buf[7]) = 2114;
            buf[8] = v406;
            _os_log_impl(&dword_1830D4000, v158, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] ignoring unsatisfied path", (uint8_t *)buf, 0x48u);
          }
        }
        else
        {
          if (v303) {
            goto LABEL_441;
          }
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          __int16 v158 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v158, OS_LOG_TYPE_INFO))
          {
            v304 = nw_endpoint_handler_get_id_string(v423);
            v305 = nw_endpoint_handler_dry_run_string(v423);
            nw_endpoint_t v306 = nw_endpoint_handler_copy_endpoint(v423);
            v307 = nw_endpoint_get_logging_description(v306);
            v308 = nw_endpoint_handler_state_string(v423);
            v309 = nw_endpoint_handler_mode_string(v423);
            id v310 = nw_endpoint_handler_copy_current_path(v423);
            LODWORD(buf[0]) = 136447746;
            *(void *)((char *)buf + 4) = "nw_endpoint_handler_path_change";
            WORD2(buf[1]) = 2082;
            *(void *)((char *)&buf[1] + 6) = v304;
            HIWORD(buf[2]) = 2082;
            buf[3] = v305;
            LOWORD(buf[4]) = 2082;
            *(void *)((char *)&buf[4] + 2) = v307;
            WORD1(buf[5]) = 2082;
            *(void *)((char *)&buf[5] + 4) = v308;
            WORD2(buf[6]) = 2082;
            *(void *)((char *)&buf[6] + 6) = v309;
            HIWORD(buf[7]) = 2114;
            buf[8] = v310;
            _os_log_impl(&dword_1830D4000, v158, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] ignoring unsatisfied path", (uint8_t *)buf, 0x48u);
          }
        }
LABEL_518:

        goto LABEL_440;
      }
      if (nw_endpoint_handler_should_transform(*(void **)(v2 + 24), *(void **)(v2 + 32)))
      {
        int v232 = nw_endpoint_handler_get_minimize_logging((void *)v2);
        char v233 = nw_endpoint_handler_get_logging_disabled((void *)v2);
        if (v232)
        {
          if (v233)
          {
LABEL_314:
            os_unfair_lock_lock((os_unfair_lock_t)(v2 + 112));
            if ((*(unsigned char *)(v2 + 268) & 1) != 0 || *(void *)(v2 + 72))
            {
              *(_DWORD *)(v2 + 116) = 5;
              v242 = objc_alloc_init(NWConcrete_nw_endpoint_transform);
            }
            else
            {
              *(_DWORD *)(v2 + 116) = 2;
              v242 = objc_alloc_init(NWConcrete_nw_endpoint_flow);
              LOBYTE(v242->blocked_protocols) = (uint64_t)v242->blocked_protocols & 0xFC | 1;
            }
            __int16 v243 = *(void **)(v2 + 248);
            *(void *)(v2 + 248) = v242;

            os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 112));
            uint64_t v244 = mach_continuous_time();
            if (v244 <= 1) {
              uint64_t v153 = 1;
            }
            else {
              uint64_t v153 = v244;
            }
            goto LABEL_376;
          }
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          v234 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v234, OS_LOG_TYPE_DEBUG))
          {
            v393 = nw_endpoint_handler_get_id_string(v423);
            v394 = nw_endpoint_handler_dry_run_string(v423);
            nw_endpoint_t v395 = nw_endpoint_handler_copy_endpoint(v423);
            v396 = nw_endpoint_get_logging_description(v395);
            v397 = nw_endpoint_handler_state_string(v423);
            v398 = nw_endpoint_handler_mode_string(v423);
            id v399 = nw_endpoint_handler_copy_current_path(v423);
            LODWORD(buf[0]) = 136447746;
            *(void *)((char *)buf + 4) = "nw_endpoint_handler_path_change";
            WORD2(buf[1]) = 2082;
            *(void *)((char *)&buf[1] + 6) = v393;
            HIWORD(buf[2]) = 2082;
            buf[3] = v394;
            LOWORD(buf[4]) = 2082;
            *(void *)((char *)&buf[4] + 2) = v396;
            WORD1(buf[5]) = 2082;
            *(void *)((char *)&buf[5] + 4) = v397;
            WORD2(buf[6]) = 2082;
            *(void *)((char *)&buf[6] + 6) = v398;
            HIWORD(buf[7]) = 2114;
            buf[8] = v399;
            _os_log_impl(&dword_1830D4000, v234, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] trying transform with unsatisfied path", (uint8_t *)buf, 0x48u);
          }
        }
        else
        {
          if (v233) {
            goto LABEL_314;
          }
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          v234 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v234, OS_LOG_TYPE_INFO))
          {
            v235 = nw_endpoint_handler_get_id_string((void *)v2);
            int v236 = nw_endpoint_handler_dry_run_string((void *)v2);
            nw_endpoint_t v237 = nw_endpoint_handler_copy_endpoint((void *)v2);
            v238 = nw_endpoint_get_logging_description(v237);
            char v239 = nw_endpoint_handler_state_string((void *)v2);
            v240 = nw_endpoint_handler_mode_string((void *)v2);
            id v241 = nw_endpoint_handler_copy_current_path((void *)v2);
            LODWORD(buf[0]) = 136447746;
            *(void *)((char *)buf + 4) = "nw_endpoint_handler_path_change";
            WORD2(buf[1]) = 2082;
            *(void *)((char *)&buf[1] + 6) = v235;
            HIWORD(buf[2]) = 2082;
            buf[3] = v236;
            LOWORD(buf[4]) = 2082;
            *(void *)((char *)&buf[4] + 2) = v238;
            WORD1(buf[5]) = 2082;
            *(void *)((char *)&buf[5] + 4) = v239;
            WORD2(buf[6]) = 2082;
            *(void *)((char *)&buf[6] + 6) = v240;
            HIWORD(buf[7]) = 2114;
            buf[8] = v241;
            _os_log_impl(&dword_1830D4000, v234, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] trying transform with unsatisfied path", (uint8_t *)buf, 0x48u);
          }
        }

        uint64_t v2 = (uint64_t)v423;
        goto LABEL_314;
      }
      int v209 = *(_DWORD *)(v2 + 116);
      if (v209) {
        goto LABEL_274;
      }
      if (!v71 && !nw_path_has_proxy_settings(*(void **)(v2 + 64))
        || (nw_parameters_get_proxy_applied(*(void **)(v2 + 32)) & 1) != 0
        || (nw_parameters_get_no_proxy(*(void **)(v2 + 32)) & 1) != 0
        || !nw_endpoint_proxy_unsatisfied_handler_should_use_proxy(*(void **)(v2 + 64)))
      {
        int v209 = *(_DWORD *)(v2 + 116);
        goto LABEL_274;
      }
      int v275 = nw_endpoint_handler_get_minimize_logging((void *)v2);
      char v276 = nw_endpoint_handler_get_logging_disabled((void *)v2);
      if (v275)
      {
        if (v276)
        {
LABEL_370:
          os_unfair_lock_lock(&v423->lock);
          if ((*((unsigned char *)v423 + 268) & 1) != 0 || v423->parent_handler)
          {
            v285 = v423;
            v423->uint64_t mode = 3;
            v286 = objc_alloc_init(NWConcrete_nw_endpoint_proxy);
          }
          else
          {
            v285 = v423;
            v423->uint64_t mode = 2;
            v286 = objc_alloc_init(NWConcrete_nw_endpoint_flow);
            LOBYTE(v286->connected_child) = (uint64_t)v286->connected_child & 0xFC | 1;
          }
          mode_handler = v285->mode_handler;
          v285->mode_handler = (NWConcrete_nw_endpoint_mode_handler *)v286;

          os_unfair_lock_unlock(&v423->lock);
          uint64_t v288 = mach_continuous_time();
          if (v288 <= 1) {
            uint64_t v153 = 1;
          }
          else {
            uint64_t v153 = v288;
          }
          goto LABEL_376;
        }
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        nw_endpoint_t v277 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v277, OS_LOG_TYPE_DEBUG))
        {
          v414 = nw_endpoint_handler_get_id_string(v423);
          v415 = nw_endpoint_handler_dry_run_string(v423);
          nw_endpoint_t v416 = nw_endpoint_handler_copy_endpoint(v423);
          v417 = nw_endpoint_get_logging_description(v416);
          v418 = nw_endpoint_handler_state_string(v423);
          v419 = nw_endpoint_handler_mode_string(v423);
          id v420 = nw_endpoint_handler_copy_current_path(v423);
          LODWORD(buf[0]) = 136447746;
          *(void *)((char *)buf + 4) = "nw_endpoint_handler_path_change";
          WORD2(buf[1]) = 2082;
          *(void *)((char *)&buf[1] + 6) = v414;
          HIWORD(buf[2]) = 2082;
          buf[3] = v415;
          LOWORD(buf[4]) = 2082;
          *(void *)((char *)&buf[4] + 2) = v417;
          WORD1(buf[5]) = 2082;
          *(void *)((char *)&buf[5] + 4) = v418;
          WORD2(buf[6]) = 2082;
          *(void *)((char *)&buf[6] + 6) = v419;
          HIWORD(buf[7]) = 2114;
          buf[8] = v420;
          _os_log_impl(&dword_1830D4000, v277, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] trying proxy with unsatisfied path", (uint8_t *)buf, 0x48u);
        }
      }
      else
      {
        if (v276) {
          goto LABEL_370;
        }
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        nw_endpoint_t v277 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v277, OS_LOG_TYPE_INFO))
        {
          v278 = nw_endpoint_handler_get_id_string(v423);
          v279 = nw_endpoint_handler_dry_run_string(v423);
          nw_endpoint_t v280 = nw_endpoint_handler_copy_endpoint(v423);
          id v281 = nw_endpoint_get_logging_description(v280);
          v282 = nw_endpoint_handler_state_string(v423);
          v283 = nw_endpoint_handler_mode_string(v423);
          id v284 = nw_endpoint_handler_copy_current_path(v423);
          LODWORD(buf[0]) = 136447746;
          *(void *)((char *)buf + 4) = "nw_endpoint_handler_path_change";
          WORD2(buf[1]) = 2082;
          *(void *)((char *)&buf[1] + 6) = v278;
          HIWORD(buf[2]) = 2082;
          buf[3] = v279;
          LOWORD(buf[4]) = 2082;
          *(void *)((char *)&buf[4] + 2) = v281;
          WORD1(buf[5]) = 2082;
          *(void *)((char *)&buf[5] + 4) = v282;
          WORD2(buf[6]) = 2082;
          *(void *)((char *)&buf[6] + 6) = v283;
          HIWORD(buf[7]) = 2114;
          buf[8] = v284;
          _os_log_impl(&dword_1830D4000, v277, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] trying proxy with unsatisfied path", (uint8_t *)buf, 0x48u);
        }
      }

      goto LABEL_370;
    }
    uint64_t v431 = 0;
    v432 = &v431;
    uint64_t v433 = 0x2020000000;
    char v434 = 0;
    if (v5 != 2)
    {
      int v24 = 0;
      goto LABEL_58;
    }
    if (!nw_path_may_span_multiple_interfaces(*(void **)(v2 + 64)))
    {
      int v5 = 2;
      int v24 = 1;
      goto LABEL_58;
    }
    v435[0] = 0;
    v435[1] = v435;
    v435[2] = 0x2020000000;
    LOBYTE(v436) = 0;
    unint64_t v25 = *(NSObject **)(v2 + 64);
    enumerate_block[0] = MEMORY[0x1E4F143A8];
    enumerate_block[1] = 3221225472;
    enumerate_block[2] = ___ZL31nw_endpoint_handler_path_changeP30NWConcrete_nw_endpoint_handler_block_invoke;
    enumerate_block[3] = &unk_1E523FAB8;
    BOOL v26 = (void **)(id)v2;
    v428 = v26;
    v429 = v435;
    v430 = &v431;
    nw_path_enumerate_interfaces(v25, enumerate_block);
    if (*((unsigned char *)v432 + 24) || *(unsigned char *)(v435[1] + 24) || !nw_parameters_get_use_awdl(v26[4]))
    {
LABEL_47:

      _Block_object_dispose(v435, 8);
      int v5 = 2;
      int v24 = 1;
      uint64_t v2 = (uint64_t)v423;
      goto LABEL_58;
    }
    uint64_t v27 = nw_interface_create_with_name("awdl0");
    if (!v27 || (nw_path_interface_prohibited_by_parameters(v423->current_path, v27) & 1) != 0)
    {
LABEL_46:

      goto LABEL_47;
    }
    int v28 = nw_endpoint_handler_get_minimize_logging(v26);
    char v29 = nw_endpoint_handler_get_logging_disabled(v26);
    if (v28)
    {
      if (v29) {
        goto LABEL_45;
      }
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      BOOL v30 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
      {
        v351 = nw_endpoint_handler_get_id_string(v26);
        v352 = nw_endpoint_handler_dry_run_string(v26);
        nw_endpoint_t v353 = nw_endpoint_handler_copy_endpoint(v26);
        v354 = nw_endpoint_get_logging_description(v353);
        v355 = nw_endpoint_handler_state_string(v26);
        v356 = nw_endpoint_handler_mode_string(v26);
        id v357 = nw_endpoint_handler_copy_current_path(v26);
        LODWORD(buf[0]) = 136447746;
        *(void *)((char *)buf + 4) = "nw_endpoint_handler_path_change";
        WORD2(buf[1]) = 2082;
        *(void *)((char *)&buf[1] + 6) = v351;
        HIWORD(buf[2]) = 2082;
        buf[3] = v352;
        LOWORD(buf[4]) = 2082;
        *(void *)((char *)&buf[4] + 2) = v354;
        WORD1(buf[5]) = 2082;
        *(void *)((char *)&buf[5] + 4) = v355;
        WORD2(buf[6]) = 2082;
        *(void *)((char *)&buf[6] + 6) = v356;
        HIWORD(buf[7]) = 2114;
        buf[8] = v357;
        _os_log_impl(&dword_1830D4000, v30, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] overriding unsatisfied, awdl eligible", (uint8_t *)buf, 0x48u);
      }
    }
    else
    {
      if (v29)
      {
LABEL_45:
        *((unsigned char *)v432 + 24) = 1;
        goto LABEL_46;
      }
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      BOOL v30 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
      {
        uint64_t v31 = nw_endpoint_handler_get_id_string(v26);
        uint64_t v32 = nw_endpoint_handler_dry_run_string(v26);
        nw_endpoint_t v33 = nw_endpoint_handler_copy_endpoint(v26);
        unint64_t v34 = nw_endpoint_get_logging_description(v33);
        unint64_t v35 = nw_endpoint_handler_state_string(v26);
        uint64_t v36 = nw_endpoint_handler_mode_string(v26);
        id v37 = nw_endpoint_handler_copy_current_path(v26);
        LODWORD(buf[0]) = 136447746;
        *(void *)((char *)buf + 4) = "nw_endpoint_handler_path_change";
        WORD2(buf[1]) = 2082;
        *(void *)((char *)&buf[1] + 6) = v31;
        HIWORD(buf[2]) = 2082;
        buf[3] = v32;
        LOWORD(buf[4]) = 2082;
        *(void *)((char *)&buf[4] + 2) = v34;
        WORD1(buf[5]) = 2082;
        *(void *)((char *)&buf[5] + 4) = v35;
        WORD2(buf[6]) = 2082;
        *(void *)((char *)&buf[6] + 6) = v36;
        HIWORD(buf[7]) = 2114;
        buf[8] = v37;
        _os_log_impl(&dword_1830D4000, v30, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] overriding unsatisfied, awdl eligible", (uint8_t *)buf, 0x48u);
      }
    }

    goto LABEL_45;
  }
  if (nw_endpoint_handler_triggered_agents_updated((NWConcrete_nw_endpoint_handler *)v2)) {
    goto LABEL_28;
  }
  int v38 = (char *)(id)v2;
  unsigned int v39 = v38;
  BOOL v40 = (void *)*((void *)v38 + 4);
  if (v40)
  {
    unint64_t v41 = v40;
    BOOL v42 = (v41[12] & 0x4000000000) == 0;

    if (!v42)
    {
      uint64_t v2 = (uint64_t)v423;
      if ((nw_endpoint_handler_get_logging_disabled(v39) & 1) == 0)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        size_t v43 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v43, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v44 = nw_endpoint_handler_get_id_string(v39);
          uint64_t v45 = nw_endpoint_handler_dry_run_string(v39);
          nw_endpoint_t v46 = nw_endpoint_handler_copy_endpoint(v39);
          BOOL v47 = nw_endpoint_get_logging_description(v46);
          unint64_t v48 = nw_endpoint_handler_state_string(v39);
          uint64_t v49 = nw_endpoint_handler_mode_string(v39);
          id v50 = nw_endpoint_handler_copy_current_path(v39);
          LODWORD(buf[0]) = 136447746;
          *(void *)((char *)buf + 4) = "nw_endpoint_handler_path_change";
          WORD2(buf[1]) = 2082;
          *(void *)((char *)&buf[1] + 6) = v44;
          HIWORD(buf[2]) = 2082;
          buf[3] = v45;
          LOWORD(buf[4]) = 2082;
          *(void *)((char *)&buf[4] + 2) = v47;
          WORD1(buf[5]) = 2082;
          *(void *)((char *)&buf[5] + 4) = v48;
          WORD2(buf[6]) = 2082;
          *(void *)((char *)&buf[6] + 6) = v49;
          HIWORD(buf[7]) = 2114;
          buf[8] = v50;
          _os_log_impl(&dword_1830D4000, v43, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] triggered agents have not yet updated", (uint8_t *)buf, 0x48u);
        }
LABEL_241:

LABEL_242:
        uint64_t v2 = (uint64_t)v423;
        goto LABEL_442;
      }
      goto LABEL_442;
    }
  }
  else
  {
  }
  uint64_t v2 = (uint64_t)v423;
  if ((*((unsigned char *)v423 + 268) & 0x20) == 0)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
    }
    size_t v43 = (id)gconnectionLogObj;
    if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
    {
      if (*((unsigned char *)v423 + 268)) {
        os_log_type_t v126 = "dry-run ";
      }
      else {
        os_log_type_t v126 = "";
      }
      nw_endpoint_t v127 = nw_endpoint_handler_copy_endpoint(v39);
      int v128 = nw_endpoint_get_logging_description(v127);
      uint64_t v129 = v423->state;
      uint64_t v130 = v126;
      if (v129 > 5) {
        uint64_t v131 = "unknown-state";
      }
      else {
        uint64_t v131 = off_1E523FB38[v129];
      }
      uint64_t v132 = v39;
      uint64_t v133 = (os_unfair_lock_s *)v132;
      uint64_t v134 = "path";
      switch(*((_DWORD *)v132 + 29))
      {
        case 0:
          break;
        case 1:
          uint64_t v134 = "resolver";
          break;
        case 2:
          uint64_t v134 = nw_endpoint_flow_mode_string(*((void **)v132 + 31));
          break;
        case 3:
          uint64_t v134 = "proxy";
          break;
        case 4:
          uint64_t v134 = "fallback";
          break;
        case 5:
          uint64_t v134 = "transform";
          break;
        default:
          uint64_t v134 = "unknown-mode";
          break;
      }

      id v188 = v133 + 28;
      unsigned int v189 = v133;
      os_unfair_lock_lock(v133 + 28);
      char v190 = v423->current_path;
      os_unfair_lock_unlock(v188);

      LODWORD(buf[0]) = 136447746;
      *(void *)((char *)buf + 4) = "nw_endpoint_handler_path_change";
      WORD2(buf[1]) = 2082;
      *(void *)((char *)&buf[1] + 6) = v39 + 168;
      HIWORD(buf[2]) = 2082;
      buf[3] = v130;
      LOWORD(buf[4]) = 2082;
      *(void *)((char *)&buf[4] + 2) = v128;
      WORD1(buf[5]) = 2082;
      *(void *)((char *)&buf[5] + 4) = v131;
      WORD2(buf[6]) = 2082;
      *(void *)((char *)&buf[6] + 6) = v134;
      HIWORD(buf[7]) = 2114;
      buf[8] = v190;
      _os_log_impl(&dword_1830D4000, v43, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] triggered agents have not yet updated", (uint8_t *)buf, 0x48u);
    }
    goto LABEL_241;
  }
LABEL_442:
}

void sub_183227A58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

uint64_t nw_parameters_get_block_trackers(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = (v1[100] >> 1) & 1;
    goto LABEL_3;
  }
  int v5 = __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  char v16 = "nw_parameters_get_block_trackers";
  char v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      unsigned int v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        char v16 = "nw_parameters_get_block_trackers";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      unsigned int v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          char v16 = "nw_parameters_get_block_trackers";
          __int16 v17 = 2082;
          unint64_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        char v16 = "nw_parameters_get_block_trackers";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      unsigned int v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        char v16 = "nw_parameters_get_block_trackers";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

BOOL nw_endpoint_handler_should_transform(void *a1, void *a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  int v5 = v4;
  if (!v3)
  {
    os_log_type_t v10 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v27 = "nw_endpoint_handler_should_transform";
    BOOL v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (!__nwlog_fault(v11, &type, &v24)) {
      goto LABEL_37;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v27 = "nw_endpoint_handler_should_transform";
        _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s called with null endpoint", buf, 0xCu);
      }
      goto LABEL_36;
    }
    if (!v24)
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v21 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v27 = "nw_endpoint_handler_should_transform";
        _os_log_impl(&dword_1830D4000, v12, v21, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_36;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v12 = __nwlog_obj();
    os_log_type_t v17 = type;
    BOOL v18 = os_log_type_enabled(v12, type);
    if (!backtrace_string)
    {
      if (v18)
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v27 = "nw_endpoint_handler_should_transform";
        _os_log_impl(&dword_1830D4000, v12, v17, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
      goto LABEL_36;
    }
    if (v18)
    {
      *(_DWORD *)int buf = 136446466;
      uint64_t v27 = "nw_endpoint_handler_should_transform";
      __int16 v28 = 2082;
      char v29 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v12, v17, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_24;
  }
  if (!v4)
  {
    uint64_t v14 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v27 = "nw_endpoint_handler_should_transform";
    BOOL v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (!__nwlog_fault(v11, &type, &v24)) {
      goto LABEL_37;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v27 = "nw_endpoint_handler_should_transform";
        _os_log_impl(&dword_1830D4000, v12, v15, "%{public}s called with null parameters", buf, 0xCu);
      }
LABEL_36:

LABEL_37:
      if (v11) {
        free(v11);
      }
      goto LABEL_39;
    }
    if (!v24)
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v22 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v27 = "nw_endpoint_handler_should_transform";
        _os_log_impl(&dword_1830D4000, v12, v22, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_36;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v12 = __nwlog_obj();
    os_log_type_t v19 = type;
    BOOL v20 = os_log_type_enabled(v12, type);
    if (!backtrace_string)
    {
      if (v20)
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v27 = "nw_endpoint_handler_should_transform";
        _os_log_impl(&dword_1830D4000, v12, v19, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
      goto LABEL_36;
    }
    if (v20)
    {
      *(_DWORD *)int buf = 136446466;
      uint64_t v27 = "nw_endpoint_handler_should_transform";
      __int16 v28 = 2082;
      char v29 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v12, v19, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_24:

    free(backtrace_string);
    goto LABEL_37;
  }
  char v6 = v4;
  __int16 v7 = *(_WORD *)(v6[13] + 108);

  if ((v7 & 4) != 0)
  {
LABEL_39:
    BOOL v9 = 0;
    goto LABEL_40;
  }
  os_log_type_t v8 = v6;
  BOOL v9 = v8[20] != 0;

LABEL_40:
  return v9;
}

BOOL nw_path_can_support_endpoint(void *a1, void *a2)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  int v5 = v4;
  if (!v3)
  {
    BOOL v11 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    __int16 v28 = "nw_path_can_support_endpoint";
    os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (!__nwlog_fault(v12, &type, &v25)) {
      goto LABEL_60;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v28 = "nw_path_can_support_endpoint";
        _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s called with null path", buf, 0xCu);
      }
      goto LABEL_59;
    }
    if (!v25)
    {
      os_log_type_t v13 = __nwlog_obj();
      os_log_type_t v22 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v28 = "nw_path_can_support_endpoint";
        _os_log_impl(&dword_1830D4000, v13, v22, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_59;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v13 = __nwlog_obj();
    os_log_type_t v18 = type;
    BOOL v19 = os_log_type_enabled(v13, type);
    if (!backtrace_string)
    {
      if (v19)
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v28 = "nw_path_can_support_endpoint";
        _os_log_impl(&dword_1830D4000, v13, v18, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
      goto LABEL_59;
    }
    if (v19)
    {
      *(_DWORD *)int buf = 136446466;
      __int16 v28 = "nw_path_can_support_endpoint";
      __int16 v29 = 2082;
      uint64_t v30 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v13, v18, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_47;
  }
  if (!v4)
  {
    os_log_type_t v15 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    __int16 v28 = "nw_path_can_support_endpoint";
    os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (!__nwlog_fault(v12, &type, &v25)) {
      goto LABEL_60;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v13 = __nwlog_obj();
      os_log_type_t v16 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v28 = "nw_path_can_support_endpoint";
        _os_log_impl(&dword_1830D4000, v13, v16, "%{public}s called with null endpoint", buf, 0xCu);
      }
LABEL_59:

LABEL_60:
      if (v12) {
        free(v12);
      }
      goto LABEL_62;
    }
    if (!v25)
    {
      os_log_type_t v13 = __nwlog_obj();
      os_log_type_t v23 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v28 = "nw_path_can_support_endpoint";
        _os_log_impl(&dword_1830D4000, v13, v23, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_59;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v13 = __nwlog_obj();
    os_log_type_t v20 = type;
    BOOL v21 = os_log_type_enabled(v13, type);
    if (!backtrace_string)
    {
      if (v21)
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v28 = "nw_path_can_support_endpoint";
        _os_log_impl(&dword_1830D4000, v13, v20, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
      goto LABEL_59;
    }
    if (v21)
    {
      *(_DWORD *)int buf = 136446466;
      __int16 v28 = "nw_path_can_support_endpoint";
      __int16 v29 = 2082;
      uint64_t v30 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v13, v20, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_47:

    free(backtrace_string);
    goto LABEL_60;
  }
  id v6 = v4;
  int v7 = [v6 type];

  if (!nw_path_uses_nexus_internal(v3, 0))
  {
    if (v3->policy_result.routing_result == 4 && v3->policy_result.routing_result_parameter.tunnel_interface_index)
    {
      BOOL v9 = (v7 - 1) < 2;
      goto LABEL_63;
    }
    BOOL v10 = v7 == 1;
    goto LABEL_25;
  }
  nexus_agent = (_DWORD *)nw_path_get_nexus_agent(v3, 0);
  if (nexus_agent[53] < 0xCCu)
  {
LABEL_62:
    BOOL v9 = 0;
    goto LABEL_63;
  }
  if (nexus_agent[56] == v7
    || nexus_agent[57] == v7
    || nexus_agent[58] == v7
    || nexus_agent[59] == v7
    || nexus_agent[60] == v7
    || nexus_agent[61] == v7
    || nexus_agent[62] == v7
    || nexus_agent[63] == v7
    || nexus_agent[64] == v7
    || nexus_agent[65] == v7
    || nexus_agent[66] == v7
    || nexus_agent[67] == v7
    || nexus_agent[68] == v7
    || nexus_agent[69] == v7
    || nexus_agent[70] == v7)
  {
    BOOL v9 = 1;
    goto LABEL_63;
  }
  BOOL v10 = nexus_agent[71] == v7;
LABEL_25:
  BOOL v9 = v10;
LABEL_63:

  return v9;
}

void sub_183228C58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_endpoint_handler_has_persistent_application_protocols(uint64_t a1)
{
  uint64_t v5 = 0;
  id v6 = &v5;
  uint64_t v7 = 0x2020000000;
  char v8 = 0;
  id v1 = *(void **)(a1 + 32);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = __nw_endpoint_handler_has_persistent_application_protocols_block_invoke;
  v4[3] = &unk_1E523FA40;
  v4[4] = &v5;
  nw_parameters_internal_iterate_protocol_stack(v1, 5, 0, v4);
  uint64_t v2 = *((unsigned __int8 *)v6 + 24);
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_183228D34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void nw_parameters_to_ne_app_context(void *a1, uint64_t a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = v3;
  if (!v3)
  {
    BOOL v11 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_parameters_to_ne_app_context";
    os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (!__nwlog_fault(v12, &type, &v25)) {
      goto LABEL_44;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_parameters_to_ne_app_context";
        _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v25)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v13 = __nwlog_obj();
      os_log_type_t v18 = type;
      BOOL v19 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_parameters_to_ne_app_context";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&void buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v13, v18, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_44:
        if (!v12) {
          goto LABEL_10;
        }
LABEL_45:
        free(v12);
        goto LABEL_10;
      }
      if (v19)
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_parameters_to_ne_app_context";
        _os_log_impl(&dword_1830D4000, v13, v18, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v13 = __nwlog_obj();
      os_log_type_t v23 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_parameters_to_ne_app_context";
        _os_log_impl(&dword_1830D4000, v13, v23, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_43:

    goto LABEL_44;
  }
  if (a2)
  {
    uint64_t v5 = (char *)v3;
    id v6 = v5;
    long long v7 = *(_OWORD *)(v5 + 56);
    *(_OWORD *)int buf = *(_OWORD *)(v5 + 40);
    *(_OWORD *)&buf[16] = v7;
    if (*(void *)buf | *(void *)&buf[8] | (unint64_t)v7 | *((void *)&v7 + 1))
    {
      uint64_t v8 = a2 + 40;
      long long v9 = *(_OWORD *)(v5 + 40);
      *(_OWORD *)(a2 + 56) = *(_OWORD *)(v5 + 56);
      *(_OWORD *)(a2 + 40) = v9;
    }
    else
    {

      uint64_t v8 = 0;
    }
    *(void *)(a2 + 8) = v8;
    if (uuid_is_null((const unsigned __int8 *)(*((void *)v6 + 13) + 24)))
    {
      uint64_t v10 = 0;
    }
    else
    {
      uint64_t v10 = a2 + 72;
      *(_OWORD *)(a2 + 72) = *(_OWORD *)(*((void *)v6 + 13) + 24);
    }
    *(void *)(a2 + 16) = v10;
    *(_DWORD *)(a2 + 24) = *(_DWORD *)(*((void *)v6 + 13) + 64);
    *(void *)a2 = *((void *)v6 + 14);
    goto LABEL_10;
  }
  os_log_type_t v15 = __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_parameters_to_ne_app_context";
  os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v25 = 0;
  if (!__nwlog_fault(v12, &type, &v25)) {
    goto LABEL_44;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    os_log_type_t v13 = __nwlog_obj();
    os_log_type_t v16 = type;
    if (os_log_type_enabled(v13, type))
    {
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_parameters_to_ne_app_context";
      _os_log_impl(&dword_1830D4000, v13, v16, "%{public}s called with null storage", buf, 0xCu);
    }
    goto LABEL_43;
  }
  if (!v25)
  {
    os_log_type_t v13 = __nwlog_obj();
    os_log_type_t v24 = type;
    if (os_log_type_enabled(v13, type))
    {
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_parameters_to_ne_app_context";
      _os_log_impl(&dword_1830D4000, v13, v24, "%{public}s called with null storage, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_43;
  }
  os_log_type_t v20 = (char *)__nw_create_backtrace_string();
  os_log_type_t v13 = __nwlog_obj();
  os_log_type_t v21 = type;
  BOOL v22 = os_log_type_enabled(v13, type);
  if (!v20)
  {
    if (v22)
    {
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_parameters_to_ne_app_context";
      _os_log_impl(&dword_1830D4000, v13, v21, "%{public}s called with null storage, no backtrace", buf, 0xCu);
    }
    goto LABEL_43;
  }
  if (v22)
  {
    *(_DWORD *)int buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_parameters_to_ne_app_context";
    *(_WORD *)&unsigned char buf[12] = 2082;
    *(void *)&void buf[14] = v20;
    _os_log_impl(&dword_1830D4000, v13, v21, "%{public}s called with null storage, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v20);
  if (v12) {
    goto LABEL_45;
  }
LABEL_10:
}

void sub_183229284(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_endpoint_flow_get_is_leaf_handler(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = (v1[32] >> 1) & 1;
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  os_log_type_t v16 = "nw_endpoint_flow_get_is_leaf_handler";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      long long v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v16 = "nw_endpoint_flow_get_is_leaf_handler";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null flow", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      long long v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          os_log_type_t v16 = "nw_endpoint_flow_get_is_leaf_handler";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null flow, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v16 = "nw_endpoint_flow_get_is_leaf_handler";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null flow, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      long long v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v16 = "nw_endpoint_flow_get_is_leaf_handler";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null flow, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

BOOL nw_parameters_has_persistent_protocol_in_stack(void *a1)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    id v3 = v1[19];
    id v4 = v3;
    if (v3)
    {
      uint64_t v5 = *((void *)v3 + 1);
      if (v5)
      {
        BOOL v6 = *(void *)(v5 + 24) != *(void *)(v5 + 16);
LABEL_43:

        goto LABEL_44;
      }
LABEL_42:
      BOOL v6 = 0;
      goto LABEL_43;
    }
    BOOL v11 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v27 = "nw_parameters_has_persistent_protocol_in_stack";
    os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (__nwlog_fault(v12, &type, &v24))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        char v13 = __nwlog_obj();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)int buf = 136446210;
          uint64_t v27 = "nw_parameters_has_persistent_protocol_in_stack";
          _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s called with null stack", buf, 0xCu);
        }
      }
      else if (v24)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        char v13 = __nwlog_obj();
        os_log_type_t v19 = type;
        BOOL v20 = os_log_type_enabled(v13, type);
        if (backtrace_string)
        {
          if (v20)
          {
            *(_DWORD *)int buf = 136446466;
            uint64_t v27 = "nw_parameters_has_persistent_protocol_in_stack";
            __int16 v28 = 2082;
            __int16 v29 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v13, v19, "%{public}s called with null stack, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_40;
        }
        if (v20)
        {
          *(_DWORD *)int buf = 136446210;
          uint64_t v27 = "nw_parameters_has_persistent_protocol_in_stack";
          _os_log_impl(&dword_1830D4000, v13, v19, "%{public}s called with null stack, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        char v13 = __nwlog_obj();
        os_log_type_t v22 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)int buf = 136446210;
          uint64_t v27 = "nw_parameters_has_persistent_protocol_in_stack";
          _os_log_impl(&dword_1830D4000, v13, v22, "%{public}s called with null stack, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_40:
    if (v12) {
      free(v12);
    }
    goto LABEL_42;
  }
  long long v7 = __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  uint64_t v27 = "nw_parameters_has_persistent_protocol_in_stack";
  os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v24 = 0;
  if (__nwlog_fault(v8, &type, &v24))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      long long v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v27 = "nw_parameters_has_persistent_protocol_in_stack";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v24)
    {
      os_log_type_t v15 = (char *)__nw_create_backtrace_string();
      long long v9 = __nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v9, type);
      if (v15)
      {
        if (v17)
        {
          *(_DWORD *)int buf = 136446466;
          uint64_t v27 = "nw_parameters_has_persistent_protocol_in_stack";
          __int16 v28 = 2082;
          __int16 v29 = v15;
          _os_log_impl(&dword_1830D4000, v9, v16, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v15);
        goto LABEL_34;
      }
      if (v17)
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v27 = "nw_parameters_has_persistent_protocol_in_stack";
        _os_log_impl(&dword_1830D4000, v9, v16, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      long long v9 = __nwlog_obj();
      os_log_type_t v21 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v27 = "nw_parameters_has_persistent_protocol_in_stack";
        _os_log_impl(&dword_1830D4000, v9, v21, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_34:
  if (v8) {
    free(v8);
  }
  BOOL v6 = 0;
LABEL_44:

  return v6;
}

BOOL nw_path_can_resolve_endpoint(void *a1, void *a2)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  uint64_t v5 = v4;
  if (!v3)
  {
    os_log_type_t v21 = __nwlog_obj();
    *(_DWORD *)length = 136446210;
    *(void *)&length[4] = "nw_path_can_resolve_endpoint";
    os_log_type_t v22 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v34 = 0;
    if (__nwlog_fault(v22, &type, &v34))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v23 = __nwlog_obj();
        os_log_type_t v24 = type;
        if (os_log_type_enabled(v23, type))
        {
          *(_DWORD *)length = 136446210;
          *(void *)&length[4] = "nw_path_can_resolve_endpoint";
          _os_log_impl(&dword_1830D4000, v23, v24, "%{public}s called with null path", length, 0xCu);
        }
        goto LABEL_55;
      }
      if (!v34)
      {
        os_log_type_t v23 = __nwlog_obj();
        os_log_type_t v32 = type;
        if (os_log_type_enabled(v23, type))
        {
          *(_DWORD *)length = 136446210;
          *(void *)&length[4] = "nw_path_can_resolve_endpoint";
          _os_log_impl(&dword_1830D4000, v23, v32, "%{public}s called with null path, backtrace limit exceeded", length, 0xCu);
        }
        goto LABEL_55;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v23 = __nwlog_obj();
      os_log_type_t v28 = type;
      BOOL v29 = os_log_type_enabled(v23, type);
      if (!backtrace_string)
      {
        if (v29)
        {
          *(_DWORD *)length = 136446210;
          *(void *)&length[4] = "nw_path_can_resolve_endpoint";
          _os_log_impl(&dword_1830D4000, v23, v28, "%{public}s called with null path, no backtrace", length, 0xCu);
        }
        goto LABEL_55;
      }
      if (v29)
      {
        *(_DWORD *)length = 136446466;
        *(void *)&length[4] = "nw_path_can_resolve_endpoint";
        __int16 v37 = 2082;
        int v38 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v23, v28, "%{public}s called with null path, dumping backtrace:%{public}s", length, 0x16u);
      }
LABEL_43:

      free(backtrace_string);
    }
LABEL_56:
    if (v22) {
      free(v22);
    }
    BOOL v12 = 0;
    goto LABEL_23;
  }
  if (!v4)
  {
    char v25 = __nwlog_obj();
    *(_DWORD *)length = 136446210;
    *(void *)&length[4] = "nw_path_can_resolve_endpoint";
    os_log_type_t v22 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v34 = 0;
    if (__nwlog_fault(v22, &type, &v34))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v23 = __nwlog_obj();
        os_log_type_t v26 = type;
        if (os_log_type_enabled(v23, type))
        {
          *(_DWORD *)length = 136446210;
          *(void *)&length[4] = "nw_path_can_resolve_endpoint";
          _os_log_impl(&dword_1830D4000, v23, v26, "%{public}s called with null endpoint", length, 0xCu);
        }
LABEL_55:

        goto LABEL_56;
      }
      if (!v34)
      {
        os_log_type_t v23 = __nwlog_obj();
        os_log_type_t v33 = type;
        if (os_log_type_enabled(v23, type))
        {
          *(_DWORD *)length = 136446210;
          *(void *)&length[4] = "nw_path_can_resolve_endpoint";
          _os_log_impl(&dword_1830D4000, v23, v33, "%{public}s called with null endpoint, backtrace limit exceeded", length, 0xCu);
        }
        goto LABEL_55;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v23 = __nwlog_obj();
      os_log_type_t v30 = type;
      BOOL v31 = os_log_type_enabled(v23, type);
      if (!backtrace_string)
      {
        if (v31)
        {
          *(_DWORD *)length = 136446210;
          *(void *)&length[4] = "nw_path_can_resolve_endpoint";
          _os_log_impl(&dword_1830D4000, v23, v30, "%{public}s called with null endpoint, no backtrace", length, 0xCu);
        }
        goto LABEL_55;
      }
      if (v31)
      {
        *(_DWORD *)length = 136446466;
        *(void *)&length[4] = "nw_path_can_resolve_endpoint";
        __int16 v37 = 2082;
        int v38 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v23, v30, "%{public}s called with null endpoint, dumping backtrace:%{public}s", length, 0x16u);
      }
      goto LABEL_43;
    }
    goto LABEL_56;
  }
  id v6 = v4;
  unsigned int v7 = [v6 type];

  if (v7 >= 0x3E8 && (os_log_type_t v8 = nw_endpoint_copy_custom_resolver_block(v6), v8, v8)
    || (v9 = v6, unsigned int v10 = [v9 type], v9, nw_path_uses_nexus_internal(v3, 0))
    && (uint64_t nexus_agent = nw_path_get_nexus_agent(v3, 0), nw_agent_resolves_type(nexus_agent, v10)))
  {
    BOOL v12 = 1;
  }
  else if (v10 > 5 || (BOOL v12 = 1, ((1 << v10) & 0x2C) == 0))
  {
    char v13 = v3;
    if (v13->policy_result.num_netagents)
    {
      unint64_t v14 = 0;
      uint64_t v15 = 4;
      while (1)
      {
        BOOL v16 = nw_network_agent_copy_dictionary_for_uuid((const unsigned __int8 *)v13->policy_result.netagents + v15);
        BOOL v17 = (void *)v16;
        if (v16)
        {
          *(void *)length = 0;
          data = (unsigned int *)xpc_dictionary_get_data((xpc_object_t)v16, "data", (size_t *)length);
          uint64_t v19 = 0;
          if (data && *(void *)length >= 0xD8uLL)
          {
            if (*(void *)length == data[53] + 216) {
              uint64_t v19 = (uint64_t)data;
            }
            else {
              uint64_t v19 = 0;
            }
          }
          if (nw_agent_resolves_type(v19, v10)) {
            break;
          }
        }

        ++v14;
        v15 += 20;
        if (v14 >= v13->policy_result.num_netagents) {
          goto LABEL_20;
        }
      }

      BOOL v12 = v19 != 0;
    }
    else
    {
LABEL_20:
      BOOL v12 = 0;
    }
  }
LABEL_23:

  return v12;
}

void sub_183229FD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_endpoint_flow_reset_is_leaf_handler(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    if (a2) {
      char v5 = 2;
    }
    else {
      char v5 = 0;
    }
    *((unsigned char *)v3 + 32) = *((unsigned char *)v3 + 32) & 0xFD | v5;
    goto LABEL_6;
  }
  id v6 = __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  BOOL v17 = "nw_endpoint_flow_reset_is_leaf_handler";
  unsigned int v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v17 = "nw_endpoint_flow_reset_is_leaf_handler";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null flow", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)int buf = 136446466;
          BOOL v17 = "nw_endpoint_flow_reset_is_leaf_handler";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null flow, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v12)
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v17 = "nw_endpoint_flow_reset_is_leaf_handler";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null flow, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v17 = "nw_endpoint_flow_reset_is_leaf_handler";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null flow, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_23:
  if (v7) {
    free(v7);
  }
LABEL_6:
}

BOOL nw_agent_resolves_type(uint64_t a1, int a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    id v3 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v13 = "nw_agent_resolves_type";
    id v4 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v10 = 0;
    if (!__nwlog_fault(v4, &type, &v10)) {
      goto LABEL_30;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v13 = "nw_agent_resolves_type";
        unsigned int v7 = "%{public}s called with null netagent";
LABEL_28:
        _os_log_impl(&dword_1830D4000, v5, v6, v7, buf, 0xCu);
      }
    }
    else
    {
      if (v10)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        char v5 = __nwlog_obj();
        os_log_type_t v6 = type;
        BOOL v9 = os_log_type_enabled(v5, type);
        if (backtrace_string)
        {
          if (v9)
          {
            *(_DWORD *)int buf = 136446466;
            os_log_type_t v13 = "nw_agent_resolves_type";
            __int16 v14 = 2082;
            uint64_t v15 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s called with null netagent, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_30;
        }
        if (!v9) {
          goto LABEL_29;
        }
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v13 = "nw_agent_resolves_type";
        unsigned int v7 = "%{public}s called with null netagent, no backtrace";
        goto LABEL_28;
      }
      char v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v13 = "nw_agent_resolves_type";
        unsigned int v7 = "%{public}s called with null netagent, backtrace limit exceeded";
        goto LABEL_28;
      }
    }
LABEL_29:

LABEL_30:
    if (v4) {
      free(v4);
    }
    return 0;
  }
  if ((*(unsigned char *)(a1 + 210) & 1) == 0 || *(_DWORD *)(a1 + 212) < 0xCCu) {
    return 0;
  }
  return *(_DWORD *)(a1 + 288) == a2
      || *(_DWORD *)(a1 + 296) == a2
      || *(_DWORD *)(a1 + 304) == a2
      || *(_DWORD *)(a1 + 312) == a2
      || *(_DWORD *)(a1 + 320) == a2
      || *(_DWORD *)(a1 + 328) == a2
      || *(_DWORD *)(a1 + 336) == a2
      || *(_DWORD *)(a1 + 344) == a2;
}

BOOL __nw_xpc_retain_array_with_validated_types_block_invoke(uint64_t a1, int a2, id a3)
{
  return object_getClass(a3) == *(Class *)(a1 + 32);
}

void nw_connection_set_write_close_handler(void *a1, void *a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  if (v3)
  {
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 3221225472;
    v13[2] = __nw_connection_set_write_close_handler_block_invoke;
    v13[3] = &unk_1E524B950;
    id v14 = v3;
    id v15 = v4;
    nw_connection_async_if_needed(v14, v13);

    goto LABEL_3;
  }
  char v5 = __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  uint64_t v19 = "nw_connection_set_write_close_handler";
  os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t v17 = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (__nwlog_fault(v6, &v17, &v16))
  {
    if (v17 == OS_LOG_TYPE_FAULT)
    {
      unsigned int v7 = __nwlog_obj();
      os_log_type_t v8 = v17;
      if (os_log_type_enabled(v7, v17))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v19 = "nw_connection_set_write_close_handler";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      unsigned int v7 = __nwlog_obj();
      os_log_type_t v10 = v17;
      BOOL v11 = os_log_type_enabled(v7, v17);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          uint64_t v19 = "nw_connection_set_write_close_handler";
          __int16 v20 = 2082;
          os_log_type_t v21 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v19 = "nw_connection_set_write_close_handler";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      unsigned int v7 = __nwlog_obj();
      os_log_type_t v12 = v17;
      if (os_log_type_enabled(v7, v17))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v19 = "nw_connection_set_write_close_handler";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
LABEL_3:
}

void sub_18322AE24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  _Unwind_Resume(a1);
}

void nw_connection_set_viability_changed_handler(nw_connection_t connection, nw_connection_BOOLean_event_handler_t handler)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v3 = connection;
  nw_connection_BOOLean_event_handler_t v4 = handler;
  if (v3)
  {
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 3221225472;
    v13[2] = __nw_connection_set_viability_changed_handler_block_invoke;
    v13[3] = &unk_1E524B950;
    id v14 = v3;
    id v15 = v4;
    nw_connection_async_if_needed(v14, v13);

    goto LABEL_3;
  }
  char v5 = __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  uint64_t v19 = "nw_connection_set_viability_changed_handler";
  os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t v17 = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (__nwlog_fault(v6, &v17, &v16))
  {
    if (v17 == OS_LOG_TYPE_FAULT)
    {
      unsigned int v7 = __nwlog_obj();
      os_log_type_t v8 = v17;
      if (os_log_type_enabled(v7, v17))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v19 = "nw_connection_set_viability_changed_handler";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      unsigned int v7 = __nwlog_obj();
      os_log_type_t v10 = v17;
      BOOL v11 = os_log_type_enabled(v7, v17);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          uint64_t v19 = "nw_connection_set_viability_changed_handler";
          __int16 v20 = 2082;
          os_log_type_t v21 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v19 = "nw_connection_set_viability_changed_handler";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      unsigned int v7 = __nwlog_obj();
      os_log_type_t v12 = v17;
      if (os_log_type_enabled(v7, v17))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v19 = "nw_connection_set_viability_changed_handler";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
LABEL_3:
}

void sub_18322B160(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  _Unwind_Resume(a1);
}

void nw_connection_set_read_close_handler(void *a1, void *a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  if (v3)
  {
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 3221225472;
    v13[2] = __nw_connection_set_read_close_handler_block_invoke;
    v13[3] = &unk_1E524B950;
    id v14 = v3;
    id v15 = v4;
    nw_connection_async_if_needed(v14, v13);

    goto LABEL_3;
  }
  char v5 = __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  uint64_t v19 = "nw_connection_set_read_close_handler";
  os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t v17 = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (__nwlog_fault(v6, &v17, &v16))
  {
    if (v17 == OS_LOG_TYPE_FAULT)
    {
      unsigned int v7 = __nwlog_obj();
      os_log_type_t v8 = v17;
      if (os_log_type_enabled(v7, v17))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v19 = "nw_connection_set_read_close_handler";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      unsigned int v7 = __nwlog_obj();
      os_log_type_t v10 = v17;
      BOOL v11 = os_log_type_enabled(v7, v17);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          uint64_t v19 = "nw_connection_set_read_close_handler";
          __int16 v20 = 2082;
          os_log_type_t v21 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v19 = "nw_connection_set_read_close_handler";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      unsigned int v7 = __nwlog_obj();
      os_log_type_t v12 = v17;
      if (os_log_type_enabled(v7, v17))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v19 = "nw_connection_set_read_close_handler";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
LABEL_3:
}

void sub_18322B49C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  _Unwind_Resume(a1);
}

void nw_connection_set_alternate_path_state_handler(void *a1, void *a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  if (v3)
  {
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 3221225472;
    v13[2] = __nw_connection_set_alternate_path_state_handler_block_invoke;
    v13[3] = &unk_1E524B950;
    id v14 = v3;
    id v15 = v4;
    nw_connection_async_if_needed(v14, v13);

    goto LABEL_3;
  }
  char v5 = __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  uint64_t v19 = "nw_connection_set_alternate_path_state_handler";
  os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t v17 = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (__nwlog_fault(v6, &v17, &v16))
  {
    if (v17 == OS_LOG_TYPE_FAULT)
    {
      unsigned int v7 = __nwlog_obj();
      os_log_type_t v8 = v17;
      if (os_log_type_enabled(v7, v17))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v19 = "nw_connection_set_alternate_path_state_handler";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      unsigned int v7 = __nwlog_obj();
      os_log_type_t v10 = v17;
      BOOL v11 = os_log_type_enabled(v7, v17);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          uint64_t v19 = "nw_connection_set_alternate_path_state_handler";
          __int16 v20 = 2082;
          os_log_type_t v21 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v19 = "nw_connection_set_alternate_path_state_handler";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      unsigned int v7 = __nwlog_obj();
      os_log_type_t v12 = v17;
      if (os_log_type_enabled(v7, v17))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v19 = "nw_connection_set_alternate_path_state_handler";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
LABEL_3:
}

void sub_18322B7D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  _Unwind_Resume(a1);
}

void nw_connection_end_activity(void *a1, void *a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  char v5 = v4;
  if (!v3)
  {
    os_log_type_t v6 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v23 = "nw_connection_end_activity";
    unsigned int v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (!__nwlog_fault(v7, &type, &v20)) {
      goto LABEL_39;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v23 = "nw_connection_end_activity";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v20)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      BOOL v14 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)int buf = 136446466;
          os_log_type_t v23 = "nw_connection_end_activity";
          __int16 v24 = 2082;
          char v25 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_39:
        if (!v7) {
          goto LABEL_5;
        }
LABEL_40:
        free(v7);
        goto LABEL_5;
      }
      if (v14)
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v23 = "nw_connection_end_activity";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v23 = "nw_connection_end_activity";
        _os_log_impl(&dword_1830D4000, v8, v18, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_38:

    goto LABEL_39;
  }
  if (v4)
  {
    nw_activity_activate(v4);
    if (nw_activity_should_log(v5)) {
      nw_connection_add_client_event_internal(v3, 5, 0, v5);
    }
    goto LABEL_5;
  }
  os_log_type_t v10 = __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  os_log_type_t v23 = "nw_connection_end_activity";
  unsigned int v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v20 = 0;
  if (!__nwlog_fault(v7, &type, &v20)) {
    goto LABEL_39;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    os_log_type_t v8 = __nwlog_obj();
    os_log_type_t v11 = type;
    if (os_log_type_enabled(v8, type))
    {
      *(_DWORD *)int buf = 136446210;
      os_log_type_t v23 = "nw_connection_end_activity";
      _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null activity", buf, 0xCu);
    }
    goto LABEL_38;
  }
  if (!v20)
  {
    os_log_type_t v8 = __nwlog_obj();
    os_log_type_t v19 = type;
    if (os_log_type_enabled(v8, type))
    {
      *(_DWORD *)int buf = 136446210;
      os_log_type_t v23 = "nw_connection_end_activity";
      _os_log_impl(&dword_1830D4000, v8, v19, "%{public}s called with null activity, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_38;
  }
  id v15 = (char *)__nw_create_backtrace_string();
  os_log_type_t v8 = __nwlog_obj();
  os_log_type_t v16 = type;
  BOOL v17 = os_log_type_enabled(v8, type);
  if (!v15)
  {
    if (v17)
    {
      *(_DWORD *)int buf = 136446210;
      os_log_type_t v23 = "nw_connection_end_activity";
      _os_log_impl(&dword_1830D4000, v8, v16, "%{public}s called with null activity, no backtrace", buf, 0xCu);
    }
    goto LABEL_38;
  }
  if (v17)
  {
    *(_DWORD *)int buf = 136446466;
    os_log_type_t v23 = "nw_connection_end_activity";
    __int16 v24 = 2082;
    char v25 = v15;
    _os_log_impl(&dword_1830D4000, v8, v16, "%{public}s called with null activity, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v15);
  if (v7) {
    goto LABEL_40;
  }
LABEL_5:
}

void sub_18322BCDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_connection_add_write_request_on_queue(void *a1, void *a2, int a3)
{
  id v5 = a1;
  id v6 = a2;
  nw_context_assert_queue(*((void **)v5 + 3));
  uint64_t v12 = 0;
  os_log_type_t v13 = &v12;
  uint64_t v14 = 0x2020000000;
  char v15 = 0;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = ___ZL40nw_connection_add_write_request_on_queueP24NWConcrete_nw_connectionPU30objcproto19OS_nw_write_request8NSObjectb_block_invoke;
  v9[3] = &unk_1E524B978;
  os_log_type_t v11 = &v12;
  unsigned int v7 = (void **)v5;
  os_log_type_t v10 = v7;
  os_unfair_lock_lock((os_unfair_lock_t)v5 + 34);
  ___ZL40nw_connection_add_write_request_on_queueP24NWConcrete_nw_connectionPU30objcproto19OS_nw_write_request8NSObjectb_block_invoke((uint64_t)v9);
  os_unfair_lock_unlock((os_unfair_lock_t)v5 + 34);
  if (*((unsigned char *)v13 + 24))
  {
    int v8 = 89;
LABEL_8:
    nw_write_request_fail(v6, v8);
    goto LABEL_9;
  }
  if (!nw_endpoint_handler_add_write_request(v7[18], v6))
  {
    int v8 = 57;
    goto LABEL_8;
  }
  if (a3 && (*((unsigned char *)v7 + 109) & 0x40) != 0) {
    nw_endpoint_handler_service_writes(v7[18]);
  }
LABEL_9:

  _Block_object_dispose(&v12, 8);
}

void sub_18322BE34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_endpoint_handler_add_write_request(void *a1, void *a2)
{
  uint64_t v175 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  if (v3)
  {
    id v5 = (NWConcrete_nw_endpoint_handler *)v3;
    uint64_t mode = v5->mode;

    if (mode == 2)
    {
      unsigned int v7 = nw_endpoint_handler_copy_flow(v5);
      if (gLogDatapath && (nw_endpoint_handler_get_logging_disabled(v5) & 1) == 0)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        int v83 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v83, OS_LOG_TYPE_DEBUG))
        {
          id_string = nw_endpoint_handler_get_id_string(v5);
          id v149 = nw_endpoint_handler_dry_run_string(v5);
          nw_endpoint_t v152 = nw_endpoint_handler_copy_endpoint(v5);
          unsigned int v85 = id_string;
          logging_description = nw_endpoint_get_logging_description(v152);
          os_log_type_t v87 = nw_endpoint_handler_state_string(v5);
          nw_endpoint_t v88 = nw_endpoint_handler_mode_string(v5);
          id v89 = nw_endpoint_handler_copy_current_path(v5);
          int v90 = (*((unsigned __int8 *)v7 + 35) >> 1) & 1;
          *(_DWORD *)int buf = 136448002;
          __int16 v156 = "nw_endpoint_handler_add_write_request";
          __int16 v157 = 2082;
          id_str = (char *)v85;
          __int16 v159 = 2082;
          __int16 v160 = v149;
          __int16 v161 = 2082;
          unint64_t v162 = (void *)logging_description;
          __int16 v163 = 2082;
          uint64_t v164 = v87;
          __int16 v165 = 2082;
          float64x2x2_t v166 = v88;
          __int16 v167 = 2114;
          id v168 = v89;
          __int16 v169 = 1024;
          LODWORD(v170) = v90;
          _os_log_impl(&dword_1830D4000, v83, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] connected_child_handles_requests %u", buf, 0x4Eu);
        }
      }
      if ((*((unsigned char *)v7 + 35) & 2) != 0)
      {
        uint64_t v18 = *((void *)v7 + 117);
        if (!v18)
        {
          char v25 = v5;
          BOOL v26 = (*((unsigned char *)v25 + 268) & 0x20) == 0;

          if (v26)
          {
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
            }
            uint64_t v27 = (id)gconnectionLogObj;
            if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
            {
              long long v151 = v27;
              os_log_type_t v28 = v25;

              BOOL v29 = v28;
              BOOL v30 = (*((unsigned char *)v25 + 268) & 1) == 0;

              if (v30) {
                BOOL v31 = "";
              }
              else {
                BOOL v31 = "dry-run ";
              }
              nw_endpoint_t v32 = nw_endpoint_handler_copy_endpoint(v29);
              os_log_type_t v33 = nw_endpoint_get_logging_description(v32);
              char v34 = v29;
              unint64_t v35 = v34;
              uint64_t v36 = v34[30];
              if (v36 > 5) {
                __int16 v37 = "unknown-state";
              }
              else {
                __int16 v37 = off_1E523FB38[v36];
              }

              nw_endpoint_t v53 = v35;
              unint64_t v54 = "path";
              switch(v5->mode)
              {
                case 0:
                  break;
                case 1:
                  unint64_t v54 = "resolver";
                  break;
                case 2:
                  unint64_t v54 = nw_endpoint_flow_mode_string(v53[31]);
                  break;
                case 3:
                  unint64_t v54 = "proxy";
                  break;
                case 4:
                  unint64_t v54 = "fallback";
                  break;
                case 5:
                  unint64_t v54 = "transform";
                  break;
                default:
                  unint64_t v54 = "unknown-mode";
                  break;
              }
              long long v148 = v54;

              unint64_t v60 = v53;
              id v61 = v3;
              BOOL v62 = v7;
              BOOL v63 = v37;
              unint64_t v64 = (id *)v60;
              os_log_type_t v65 = v28;
              id v66 = v4;
              nw_endpoint_t v67 = v32;
              unint64_t v68 = v33;
              int v69 = v31;
              id v70 = v60 + 28;
              os_unfair_lock_lock(v60 + 28);
              id v71 = v64[8];
              int v72 = v70;
              uint32_t v73 = v69;
              int v74 = v68;
              nw_endpoint_t v75 = v67;
              id v4 = v66;
              int v76 = v65;
              unsigned int v77 = v71;
              os_unfair_lock_unlock(v72);

              unsigned int v78 = v63;
              unsigned int v7 = v62;
              id v3 = v61;
              *(_DWORD *)int buf = 136447746;
              __int16 v156 = "nw_endpoint_handler_add_write_request";
              __int16 v157 = 2082;
              id_str = v76->id_str;
              __int16 v159 = 2082;
              __int16 v160 = v73;
              __int16 v161 = 2082;
              unint64_t v162 = (void *)v74;
              __int16 v163 = 2082;
              uint64_t v164 = v78;
              __int16 v165 = 2082;
              float64x2x2_t v166 = v148;
              __int16 v167 = 2114;
              id v168 = v77;
              _os_log_impl(&dword_1830D4000, v151, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Cannot send, no connected handler", buf, 0x48u);

              goto LABEL_90;
            }
LABEL_52:
            uint64_t v24 = 0;
LABEL_178:

            goto LABEL_179;
          }
          goto LABEL_111;
        }
        uint64_t v19 = nw_endpoint_handler_add_write_request(v18, v4);
      }
      else
      {
        if (*((void *)v7 + 96))
        {
          if (*((void *)v7 + 108))
          {
            int v8 = (id *)v4;
            os_log_type_t v9 = v8;
            if (v8)
            {
              long long v151 = v8[13];

              if (v151)
              {
                repliable_uint64_t metadata = nw_content_context_copy_first_repliable_metadata(v151);
                if (repliable_metadata) {
                  uint64_t node = nw_hash_table_get_node(*((void *)v7 + 108), (uint64_t)repliable_metadata, 1);
                }
                else {
                  uint64_t node = 0;
                }

                id v55 = nw_write_request_copy_context(v9);
                if (node)
                {
LABEL_135:
                  uint64_t v103 = *(void ***)(node + 16);
                  if (v103)
                  {
LABEL_137:
                    long long v150 = v55;
                    uint64_t v24 = nw_flow_add_write_request(v5, v103, v9);
                    os_log_type_t v104 = v5;
                    char v105 = *((unsigned char *)v104 + 268);

                    if (v24)
                    {
                      if ((v105 & 0x20) == 0)
                      {
                        if (__nwlog_connection_log::onceToken != -1) {
                          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
                        }
                        uint64_t v106 = (id)gconnectionLogObj;
                        if (os_log_type_enabled(v106, OS_LOG_TYPE_DEBUG))
                        {
                          int v143 = v106;
                          int v146 = v104;

                          unint64_t v107 = v146;
                          BOOL v108 = (*((unsigned char *)v104 + 268) & 1) == 0;

                          unint64_t v109 = "dry-run ";
                          if (v108) {
                            unint64_t v109 = "";
                          }
                          char v139 = v109;
                          nw_endpoint_t v110 = nw_endpoint_handler_copy_endpoint(v107);
                          uint64_t v138 = nw_endpoint_get_logging_description(v110);
                          BOOL v111 = v107;
                          unint64_t v112 = v111;
                          uint64_t v113 = v111[30];
                          nw_endpoint_t v137 = v110;
                          if (v113 > 5) {
                            id v114 = "unknown-state";
                          }
                          else {
                            id v114 = off_1E523FB38[v113];
                          }
                          nw_endpoint_t v136 = v114;

                          dispatch_time_t v125 = v112;
                          os_log_type_t v126 = "path";
                          switch(v5->mode)
                          {
                            case 0:
                              break;
                            case 1:
                              os_log_type_t v126 = "resolver";
                              break;
                            case 2:
                              os_log_type_t v126 = nw_endpoint_flow_mode_string(v125[31]);
                              break;
                            case 3:
                              os_log_type_t v126 = "proxy";
                              break;
                            case 4:
                              os_log_type_t v126 = "fallback";
                              break;
                            case 5:
                              os_log_type_t v126 = "transform";
                              break;
                            default:
                              os_log_type_t v126 = "unknown-mode";
                              break;
                          }
                          double v135 = v126;

                          uint64_t v131 = v125;
                          os_unfair_lock_lock((os_unfair_lock_t)v131 + 28);
                          id v142 = v131[8];
                          os_unfair_lock_unlock((os_unfair_lock_t)v131 + 28);

                          *(_DWORD *)int buf = 136448514;
                          __int16 v156 = "nw_endpoint_handler_add_write_request";
                          __int16 v157 = 2082;
                          id_str = v146->id_str;
                          __int16 v159 = 2082;
                          __int16 v160 = v139;
                          __int16 v161 = 2082;
                          unint64_t v162 = (void *)v138;
                          __int16 v163 = 2082;
                          uint64_t v164 = v136;
                          __int16 v165 = 2082;
                          float64x2x2_t v166 = v135;
                          __int16 v167 = 2114;
                          id v168 = v142;
                          __int16 v169 = 2112;
                          os_log_type_t v170 = v9;
                          __int16 v171 = 2048;
                          v172 = v103;
                          __int16 v173 = 1024;
                          int v174 = 1;
                          _os_log_impl(&dword_1830D4000, v143, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Added write request %@ to flow protocol %p: %u", buf, 0x62u);

                          uint64_t v106 = v143;
                        }
                      }
                      nw_flow_service_writes(v104, (NWConcrete_nw_endpoint_flow *)v7, (nw_flow_protocol *)v103);
                    }
                    else if ((v105 & 0x20) == 0)
                    {
                      if (__nwlog_connection_log::onceToken != -1) {
                        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
                      }
                      char v115 = (id)gconnectionLogObj;
                      if (os_log_type_enabled(v115, OS_LOG_TYPE_ERROR))
                      {
                        int v116 = v104;

                        unsigned int v117 = v116;
                        BOOL v118 = (*((unsigned char *)v104 + 268) & 1) == 0;

                        if (v118) {
                          nw_endpoint_t v119 = "";
                        }
                        else {
                          nw_endpoint_t v119 = "dry-run ";
                        }
                        nw_endpoint_t v120 = nw_endpoint_handler_copy_endpoint(v117);
                        char v147 = nw_endpoint_get_logging_description(v120);
                        uint64_t v121 = v117;
                        int v122 = v121;
                        uint64_t v123 = v121[30];
                        char v141 = v119;
                        nw_endpoint_t v144 = v120;
                        if (v123 > 5) {
                          uint64_t v124 = "unknown-state";
                        }
                        else {
                          uint64_t v124 = off_1E523FB38[v123];
                        }
                        int v140 = v124;

                        nw_endpoint_t v127 = v122;
                        int v128 = v127;
                        int v129 = v5->mode;
                        uint64_t v130 = "path";
                        switch(v129)
                        {
                          case 0:
                            break;
                          case 1:
                            uint64_t v130 = "resolver";
                            break;
                          case 2:
                            uint64_t v130 = nw_endpoint_flow_mode_string(v127[31]);
                            break;
                          case 3:
                            uint64_t v130 = "proxy";
                            break;
                          case 4:
                            uint64_t v130 = "fallback";
                            break;
                          case 5:
                            uint64_t v130 = "transform";
                            break;
                          default:
                            uint64_t v130 = "unknown-mode";
                            break;
                        }

                        uint64_t v132 = v128;
                        os_unfair_lock_lock((os_unfair_lock_t)v132 + 28);
                        id v133 = v132[8];
                        os_unfair_lock_unlock((os_unfair_lock_t)v132 + 28);

                        *(_DWORD *)int buf = 136447746;
                        __int16 v156 = "nw_endpoint_handler_add_write_request";
                        __int16 v157 = 2082;
                        id_str = v116->id_str;
                        __int16 v159 = 2082;
                        __int16 v160 = v141;
                        __int16 v161 = 2082;
                        unint64_t v162 = (void *)v147;
                        __int16 v163 = 2082;
                        uint64_t v164 = v140;
                        __int16 v165 = 2082;
                        float64x2x2_t v166 = v130;
                        __int16 v167 = 2114;
                        id v168 = v133;
                        _os_log_impl(&dword_1830D4000, v115, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Failed to add write request when trying to send", buf, 0x48u);
                      }
                    }

                    goto LABEL_177;
                  }
LABEL_136:
                  uint64_t v103 = (void **)nw_endpoint_handler_register_context_internal(v5, v7, v55);
                  goto LABEL_137;
                }
LABEL_134:
                uint64_t node = nw_hash_table_get_node(*((void *)v7 + 108), (uint64_t)v55, 0);
                if (!node) {
                  goto LABEL_136;
                }
                goto LABEL_135;
              }
LABEL_133:
              id v55 = nw_write_request_copy_context(v9);
              long long v151 = 0;
              goto LABEL_134;
            }
            uint64_t v95 = __nwlog_obj();
            *(_DWORD *)int buf = 136446210;
            __int16 v156 = "nw_write_request_copy_original_message";
            uint64_t v96 = (char *)_os_log_send_and_compose_impl();

            os_log_type_t type = OS_LOG_TYPE_ERROR;
            char v153 = 0;
            if (__nwlog_fault(v96, &type, &v153))
            {
              if (type == OS_LOG_TYPE_FAULT)
              {
                BOOL v97 = __nwlog_obj();
                os_log_type_t v98 = type;
                if (os_log_type_enabled(v97, type))
                {
                  *(_DWORD *)int buf = 136446210;
                  __int16 v156 = "nw_write_request_copy_original_message";
                  _os_log_impl(&dword_1830D4000, v97, v98, "%{public}s called with null request", buf, 0xCu);
                }
              }
              else if (v153)
              {
                backtrace_string = (char *)__nw_create_backtrace_string();
                BOOL v97 = __nwlog_obj();
                os_log_type_t v100 = type;
                BOOL v101 = os_log_type_enabled(v97, type);
                if (backtrace_string)
                {
                  if (v101)
                  {
                    *(_DWORD *)int buf = 136446466;
                    __int16 v156 = "nw_write_request_copy_original_message";
                    __int16 v157 = 2082;
                    id_str = backtrace_string;
                    _os_log_impl(&dword_1830D4000, v97, v100, "%{public}s called with null request, dumping backtrace:%{public}s", buf, 0x16u);
                  }

                  free(backtrace_string);
                  goto LABEL_131;
                }
                if (v101)
                {
                  *(_DWORD *)int buf = 136446210;
                  __int16 v156 = "nw_write_request_copy_original_message";
                  _os_log_impl(&dword_1830D4000, v97, v100, "%{public}s called with null request, no backtrace", buf, 0xCu);
                }
              }
              else
              {
                BOOL v97 = __nwlog_obj();
                os_log_type_t v102 = type;
                if (os_log_type_enabled(v97, type))
                {
                  *(_DWORD *)int buf = 136446210;
                  __int16 v156 = "nw_write_request_copy_original_message";
                  _os_log_impl(&dword_1830D4000, v97, v102, "%{public}s called with null request, backtrace limit exceeded", buf, 0xCu);
                }
              }
            }
LABEL_131:
            if (v96) {
              free(v96);
            }
            goto LABEL_133;
          }
          BOOL v40 = v5;
          BOOL v41 = (*((unsigned char *)v40 + 268) & 0x20) == 0;

          if (v41)
          {
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
            }
            uint64_t v27 = (id)gconnectionLogObj;
            if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
            {
              long long v151 = v27;
              BOOL v42 = v40;

              size_t v43 = v42;
              BOOL v44 = (*((unsigned char *)v40 + 268) & 1) == 0;

              if (v44) {
                uint64_t v45 = "";
              }
              else {
                uint64_t v45 = "dry-run ";
              }
              nw_endpoint_t v46 = nw_endpoint_handler_copy_endpoint(v43);
              BOOL v47 = nw_endpoint_get_logging_description(v46);
              unint64_t v48 = v43;
              uint64_t v49 = v48;
              uint64_t v50 = v48[30];
              if (v50 > 5) {
                uint64_t v51 = "unknown-state";
              }
              else {
                uint64_t v51 = off_1E523FB38[v50];
              }
              nw_endpoint_t v145 = v51;

              BOOL v56 = v49;
              unint64_t v57 = v56;
              int v58 = v5->mode;
              uint64_t v59 = "path";
              switch(v58)
              {
                case 0:
                  break;
                case 1:
                  uint64_t v59 = "resolver";
                  break;
                case 2:
                  uint64_t v59 = nw_endpoint_flow_mode_string(v56[31]);
                  break;
                case 3:
                  uint64_t v59 = "proxy";
                  break;
                case 4:
                  uint64_t v59 = "fallback";
                  break;
                case 5:
                  uint64_t v59 = "transform";
                  break;
                default:
                  uint64_t v59 = "unknown-mode";
                  break;
              }

              int v79 = v57;
              os_unfair_lock_lock((os_unfair_lock_t)v79 + 28);
              id v80 = v79[8];
              os_unfair_lock_unlock((os_unfair_lock_t)v79 + 28);

              *(_DWORD *)int buf = 136447746;
              __int16 v156 = "nw_endpoint_handler_add_write_request";
              __int16 v157 = 2082;
              id_str = v42->id_str;
              __int16 v159 = 2082;
              __int16 v160 = v45;
              __int16 v161 = 2082;
              unint64_t v162 = (void *)v47;
              __int16 v163 = 2082;
              uint64_t v164 = v145;
              __int16 v165 = 2082;
              float64x2x2_t v166 = v59;
              __int16 v167 = 2114;
              id v168 = v80;
              _os_log_impl(&dword_1830D4000, v151, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Cannot send after flow table is released", buf, 0x48u);

LABEL_90:
              uint64_t v24 = 0;
LABEL_177:
              uint64_t v27 = v151;
              goto LABEL_178;
            }
            goto LABEL_52;
          }
LABEL_111:
          uint64_t v24 = 0;
          goto LABEL_179;
        }
        uint64_t v19 = nw_flow_add_write_request(v5, (void **)v7 + 47, v4);
      }
      uint64_t v24 = v19;
LABEL_179:

      goto LABEL_180;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v12 = (id)gLogObj;
    if (mode > 5) {
      os_log_type_t v13 = "unknown-mode";
    }
    else {
      os_log_type_t v13 = off_1E523FB08[mode];
    }
    *(_DWORD *)int buf = 136446722;
    __int16 v156 = "nw_endpoint_handler_add_write_request";
    __int16 v157 = 2082;
    id_str = (char *)v13;
    __int16 v159 = 2082;
    __int16 v160 = "flow";
    uint64_t v14 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v153 = 0;
    if (__nwlog_fault(v14, &type, &v153))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        char v15 = (id)gLogObj;
        os_log_type_t v16 = type;
        if (os_log_type_enabled(v15, type))
        {
          if (mode > 5) {
            BOOL v17 = "unknown-mode";
          }
          else {
            BOOL v17 = off_1E523FB08[mode];
          }
          *(_DWORD *)int buf = 136446722;
          __int16 v156 = "nw_endpoint_handler_add_write_request";
          __int16 v157 = 2082;
          id_str = (char *)v17;
          __int16 v159 = 2082;
          __int16 v160 = "flow";
          _os_log_impl(&dword_1830D4000, v15, v16, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
        }
      }
      else if (v153)
      {
        char v20 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        char v15 = (id)gLogObj;
        os_log_type_t v21 = type;
        BOOL v22 = os_log_type_enabled(v15, type);
        if (v20)
        {
          if (v22)
          {
            if (mode > 5) {
              os_log_type_t v23 = "unknown-mode";
            }
            else {
              os_log_type_t v23 = off_1E523FB08[mode];
            }
            *(_DWORD *)int buf = 136446978;
            __int16 v156 = "nw_endpoint_handler_add_write_request";
            __int16 v157 = 2082;
            id_str = (char *)v23;
            __int16 v159 = 2082;
            __int16 v160 = "flow";
            __int16 v161 = 2082;
            unint64_t v162 = v20;
            _os_log_impl(&dword_1830D4000, v15, v21, "%{public}s Handler is in mode %{public}s, expected %{public}s, dumping backtrace:%{public}s", buf, 0x2Au);
          }

          free(v20);
          if (!v14) {
            goto LABEL_74;
          }
          goto LABEL_73;
        }
        if (v22)
        {
          if (mode > 5) {
            char v52 = "unknown-mode";
          }
          else {
            char v52 = off_1E523FB08[mode];
          }
          *(_DWORD *)int buf = 136446722;
          __int16 v156 = "nw_endpoint_handler_add_write_request";
          __int16 v157 = 2082;
          id_str = (char *)v52;
          __int16 v159 = 2082;
          __int16 v160 = "flow";
          _os_log_impl(&dword_1830D4000, v15, v21, "%{public}s Handler is in mode %{public}s, expected %{public}s, no backtrace", buf, 0x20u);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        char v15 = (id)gLogObj;
        os_log_type_t v38 = type;
        if (os_log_type_enabled(v15, type))
        {
          if (mode > 5) {
            uint64_t v39 = "unknown-mode";
          }
          else {
            uint64_t v39 = off_1E523FB08[mode];
          }
          *(_DWORD *)int buf = 136446722;
          __int16 v156 = "nw_endpoint_handler_add_write_request";
          __int16 v157 = 2082;
          id_str = (char *)v39;
          __int16 v159 = 2082;
          __int16 v160 = "flow";
          _os_log_impl(&dword_1830D4000, v15, v38, "%{public}s Handler is in mode %{public}s, expected %{public}s, backtrace limit exceeded", buf, 0x20u);
        }
      }
LABEL_71:
    }
  }
  else
  {
    uint64_t v81 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    __int16 v156 = "nw_endpoint_handler_add_write_request";
    uint64_t v14 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v153 = 0;
    if (__nwlog_fault(v14, &type, &v153))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        char v15 = __nwlog_obj();
        os_log_type_t v82 = type;
        if (os_log_type_enabled(v15, type))
        {
          *(_DWORD *)int buf = 136446210;
          __int16 v156 = "nw_endpoint_handler_add_write_request";
          _os_log_impl(&dword_1830D4000, v15, v82, "%{public}s called with null handler", buf, 0xCu);
        }
      }
      else if (v153)
      {
        int v91 = (char *)__nw_create_backtrace_string();
        char v15 = __nwlog_obj();
        os_log_type_t v92 = type;
        BOOL v93 = os_log_type_enabled(v15, type);
        if (v91)
        {
          if (v93)
          {
            *(_DWORD *)int buf = 136446466;
            __int16 v156 = "nw_endpoint_handler_add_write_request";
            __int16 v157 = 2082;
            id_str = v91;
            _os_log_impl(&dword_1830D4000, v15, v92, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v91);
          if (!v14) {
            goto LABEL_74;
          }
          goto LABEL_73;
        }
        if (v93)
        {
          *(_DWORD *)int buf = 136446210;
          __int16 v156 = "nw_endpoint_handler_add_write_request";
          _os_log_impl(&dword_1830D4000, v15, v92, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        char v15 = __nwlog_obj();
        os_log_type_t v94 = type;
        if (os_log_type_enabled(v15, type))
        {
          *(_DWORD *)int buf = 136446210;
          __int16 v156 = "nw_endpoint_handler_add_write_request";
          _os_log_impl(&dword_1830D4000, v15, v94, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
        }
      }
      goto LABEL_71;
    }
  }
  if (v14) {
LABEL_73:
  }
    free(v14);
LABEL_74:
  uint64_t v24 = 0;
LABEL_180:

  return v24;
}

void sub_18322D25C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL40nw_connection_add_write_request_on_queueP24NWConcrete_nw_connectionPU30objcproto19OS_nw_write_request8NSObjectb_block_invoke(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + 24) = (*(unsigned char *)(*(void *)(result + 32) + 109) & 8) != 0;
  return result;
}

uint64_t nw_flow_add_write_request(void *a1, void **a2, void *a3)
{
  uint64_t v176 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = a3;
  unsigned int v7 = v5;
  int v8 = v7;
  v155 = v6;
  if (!v7)
  {
    os_log_type_t v100 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    __int16 v159 = "nw_endpoint_handler_get_mode";
    BOOL v101 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v156 = 0;
    if (__nwlog_fault(v101, &type, &v156))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v102 = __nwlog_obj();
        os_log_type_t v103 = type;
        if (os_log_type_enabled(v102, type))
        {
          *(_DWORD *)int buf = 136446210;
          __int16 v159 = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_1830D4000, v102, v103, "%{public}s called with null handler", buf, 0xCu);
        }
      }
      else if (v156)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v102 = __nwlog_obj();
        os_log_type_t v109 = type;
        BOOL v110 = os_log_type_enabled(v102, type);
        if (backtrace_string)
        {
          if (v110)
          {
            *(_DWORD *)int buf = 136446466;
            __int16 v159 = "nw_endpoint_handler_get_mode";
            __int16 v160 = 2082;
            __int16 v161 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v102, v109, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_146;
        }
        if (v110)
        {
          *(_DWORD *)int buf = 136446210;
          __int16 v159 = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_1830D4000, v102, v109, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        os_log_type_t v102 = __nwlog_obj();
        os_log_type_t v118 = type;
        if (os_log_type_enabled(v102, type))
        {
          *(_DWORD *)int buf = 136446210;
          __int16 v159 = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_1830D4000, v102, v118, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_146:
    if (v101) {
      free(v101);
    }
    unsigned int v9 = 0;
    goto LABEL_149;
  }
  unsigned int v9 = v7[29];

  if (v9 != 2)
  {
LABEL_149:
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v125 = (id)gLogObj;
    if (v9 > 5) {
      os_log_type_t v126 = "unknown-mode";
    }
    else {
      os_log_type_t v126 = off_1E523FB08[v9];
    }
    *(_DWORD *)int buf = 136446722;
    __int16 v159 = "nw_flow_add_write_request";
    __int16 v160 = 2082;
    __int16 v161 = (char *)v126;
    __int16 v162 = 2082;
    __int16 v163 = "flow";
    char v105 = (void *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v156 = 0;
    if (!__nwlog_fault((const char *)v105, &type, &v156))
    {
LABEL_181:
      id v6 = v155;
      if (!v105) {
        goto LABEL_183;
      }
LABEL_182:
      free(v105);
      goto LABEL_183;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v106 = (id)gLogObj;
      os_log_type_t v127 = type;
      if (os_log_type_enabled(v106, type))
      {
        if (v9 > 5) {
          int v128 = "unknown-mode";
        }
        else {
          int v128 = off_1E523FB08[v9];
        }
        *(_DWORD *)int buf = 136446722;
        __int16 v159 = "nw_flow_add_write_request";
        __int16 v160 = 2082;
        __int16 v161 = (char *)v128;
        __int16 v162 = 2082;
        __int16 v163 = "flow";
        _os_log_impl(&dword_1830D4000, v106, v127, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
      }
    }
    else if (v156)
    {
      int v129 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v106 = (id)gLogObj;
      os_log_type_t v130 = type;
      BOOL v131 = os_log_type_enabled(v106, type);
      if (v129)
      {
        if (v131)
        {
          if (v9 > 5) {
            uint64_t v132 = "unknown-mode";
          }
          else {
            uint64_t v132 = off_1E523FB08[v9];
          }
          *(_DWORD *)int buf = 136446978;
          __int16 v159 = "nw_flow_add_write_request";
          __int16 v160 = 2082;
          __int16 v161 = (char *)v132;
          __int16 v162 = 2082;
          __int16 v163 = "flow";
          __int16 v164 = 2082;
          __int16 v165 = v129;
          _os_log_impl(&dword_1830D4000, v106, v130, "%{public}s Handler is in mode %{public}s, expected %{public}s, dumping backtrace:%{public}s", buf, 0x2Au);
        }

        free(v129);
        id v6 = v155;
        if (!v105) {
          goto LABEL_183;
        }
        goto LABEL_182;
      }
      if (v131)
      {
        if (v9 > 5) {
          double v135 = "unknown-mode";
        }
        else {
          double v135 = off_1E523FB08[v9];
        }
        *(_DWORD *)int buf = 136446722;
        __int16 v159 = "nw_flow_add_write_request";
        __int16 v160 = 2082;
        __int16 v161 = (char *)v135;
        __int16 v162 = 2082;
        __int16 v163 = "flow";
        _os_log_impl(&dword_1830D4000, v106, v130, "%{public}s Handler is in mode %{public}s, expected %{public}s, no backtrace", buf, 0x20u);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v106 = (id)gLogObj;
      os_log_type_t v133 = type;
      if (os_log_type_enabled(v106, type))
      {
        if (v9 > 5) {
          uint64_t v134 = "unknown-mode";
        }
        else {
          uint64_t v134 = off_1E523FB08[v9];
        }
        *(_DWORD *)int buf = 136446722;
        __int16 v159 = "nw_flow_add_write_request";
        __int16 v160 = 2082;
        __int16 v161 = (char *)v134;
        __int16 v162 = 2082;
        __int16 v163 = "flow";
        _os_log_impl(&dword_1830D4000, v106, v133, "%{public}s Handler is in mode %{public}s, expected %{public}s, backtrace limit exceeded", buf, 0x20u);
      }
    }
LABEL_180:

    goto LABEL_181;
  }
  if (!a2)
  {
    os_log_type_t v104 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    __int16 v159 = "nw_flow_add_write_request";
    char v105 = (void *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v156 = 0;
    if (!__nwlog_fault((const char *)v105, &type, &v156)) {
      goto LABEL_181;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v106 = __nwlog_obj();
      os_log_type_t v107 = type;
      if (os_log_type_enabled(v106, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v159 = "nw_flow_add_write_request";
        _os_log_impl(&dword_1830D4000, v106, v107, "%{public}s called with null flow_protocol", buf, 0xCu);
      }
      goto LABEL_180;
    }
    if (!v156)
    {
      uint64_t v106 = __nwlog_obj();
      os_log_type_t v137 = type;
      if (os_log_type_enabled(v106, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v159 = "nw_flow_add_write_request";
        _os_log_impl(&dword_1830D4000, v106, v137, "%{public}s called with null flow_protocol, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_180;
    }
    uint64_t v113 = (char *)__nw_create_backtrace_string();
    uint64_t v106 = __nwlog_obj();
    os_log_type_t v114 = type;
    BOOL v115 = os_log_type_enabled(v106, type);
    if (!v113)
    {
      if (v115)
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v159 = "nw_flow_add_write_request";
        _os_log_impl(&dword_1830D4000, v106, v114, "%{public}s called with null flow_protocol, no backtrace", buf, 0xCu);
      }
      goto LABEL_180;
    }
    if (v115)
    {
      *(_DWORD *)int buf = 136446466;
      __int16 v159 = "nw_flow_add_write_request";
      __int16 v160 = 2082;
      __int16 v161 = v113;
      _os_log_impl(&dword_1830D4000, v106, v114, "%{public}s called with null flow_protocol, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_132;
  }
  if (!v6)
  {
    BOOL v111 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    __int16 v159 = "nw_flow_add_write_request";
    char v105 = (void *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v156 = 0;
    if (!__nwlog_fault((const char *)v105, &type, &v156)) {
      goto LABEL_181;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v106 = __nwlog_obj();
      os_log_type_t v112 = type;
      if (os_log_type_enabled(v106, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v159 = "nw_flow_add_write_request";
        _os_log_impl(&dword_1830D4000, v106, v112, "%{public}s called with null write_request", buf, 0xCu);
      }
      goto LABEL_180;
    }
    if (!v156)
    {
      uint64_t v106 = __nwlog_obj();
      os_log_type_t v138 = type;
      if (os_log_type_enabled(v106, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v159 = "nw_flow_add_write_request";
        _os_log_impl(&dword_1830D4000, v106, v138, "%{public}s called with null write_request, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_180;
    }
    uint64_t v113 = (char *)__nw_create_backtrace_string();
    uint64_t v106 = __nwlog_obj();
    os_log_type_t v116 = type;
    BOOL v117 = os_log_type_enabled(v106, type);
    if (!v113)
    {
      if (v117)
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v159 = "nw_flow_add_write_request";
        _os_log_impl(&dword_1830D4000, v106, v116, "%{public}s called with null write_request, no backtrace", buf, 0xCu);
      }
      goto LABEL_180;
    }
    if (v117)
    {
      *(_DWORD *)int buf = 136446466;
      __int16 v159 = "nw_flow_add_write_request";
      __int16 v160 = 2082;
      __int16 v161 = v113;
      _os_log_impl(&dword_1830D4000, v106, v116, "%{public}s called with null write_request, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_132:

    free(v113);
    goto LABEL_181;
  }
  if (_nw_signposts_once != -1) {
    dispatch_once(&_nw_signposts_once, &__block_literal_global_93);
  }
  if (_nw_signposts_enabled && kdebug_is_enabled()) {
    kdebug_trace();
  }
  os_log_type_t v10 = v8;
  int state = v10->state;

  if ((state & 0xFFFFFFFE) == 4)
  {
    id v12 = v10;
    char v13 = *((unsigned char *)v12 + 268);

    if ((v13 & 0x20) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      uint64_t v14 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        char v15 = v12;

        os_log_type_t v16 = v15;
        char v17 = *((unsigned char *)v12 + 268);

        if (v17) {
          uint64_t v18 = "dry-run ";
        }
        else {
          uint64_t v18 = "";
        }
        nw_endpoint_t v19 = nw_endpoint_handler_copy_endpoint(v16);
        logging_description = nw_endpoint_get_logging_description(v19);
        log = v15->id_str;
        os_log_type_t v21 = v16;
        BOOL v22 = v21;
        uint64_t v23 = v10->state;
        if (v23 > 5) {
          uint64_t v24 = "unknown-state";
        }
        else {
          uint64_t v24 = off_1E523FB38[v23];
        }

        uint64_t v39 = v22;
        BOOL v40 = v39;
        BOOL v41 = "path";
        switch(v8[29])
        {
          case 0:
            break;
          case 1:
            BOOL v41 = "resolver";
            break;
          case 2:
            BOOL v41 = nw_endpoint_flow_mode_string(v39[31]);
            break;
          case 3:
            BOOL v41 = "proxy";
            break;
          case 4:
            BOOL v41 = "fallback";
            break;
          case 5:
            BOOL v41 = "transform";
            break;
          default:
            BOOL v41 = "unknown-mode";
            break;
        }

        uint64_t v45 = v40;
        os_unfair_lock_lock((os_unfair_lock_t)v45 + 28);
        id v46 = v45[8];
        os_unfair_lock_unlock((os_unfair_lock_t)v45 + 28);

        *(_DWORD *)int buf = 136447746;
        __int16 v159 = "nw_flow_add_write_request";
        __int16 v160 = 2082;
        __int16 v161 = log;
        __int16 v162 = 2082;
        __int16 v163 = v18;
        __int16 v164 = 2082;
        __int16 v165 = (void *)logging_description;
        __int16 v166 = 2082;
        __int16 v167 = v24;
        __int16 v168 = 2082;
        __int16 v169 = v41;
        __int16 v170 = 2114;
        id v171 = v46;
        _os_log_impl(&dword_1830D4000, v14, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] cannot accept write requests", buf, 0x48u);
      }
      uint64_t v47 = 0;
      goto LABEL_101;
    }
LABEL_183:
    uint64_t v47 = 0;
    goto LABEL_184;
  }
  char v25 = nw_endpoint_handler_copy_flow(v10);
  if ((*((unsigned char *)v25 + 34) & 8) != 0)
  {
    if (!nw_endpoint_handler_get_minimize_logging(v10))
    {
      BOOL v26 = v10;
      char v27 = *((unsigned char *)v26 + 268);

      if ((v27 & 0x20) != 0) {
        goto LABEL_61;
      }
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      os_log_type_t v28 = (id)gconnectionLogObj;
      if (!os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_60;
      }
      loga = v28;
      BOOL v29 = v26;

      BOOL v30 = v29;
      char v31 = *((unsigned char *)v26 + 268);

      if (v31) {
        nw_endpoint_t v32 = "dry-run ";
      }
      else {
        nw_endpoint_t v32 = "";
      }
      nw_endpoint_t v33 = nw_endpoint_handler_copy_endpoint(v30);
      char v34 = nw_endpoint_get_logging_description(v33);
      unint64_t v35 = v30;
      uint64_t v36 = v35;
      uint64_t v37 = v10->state;
      if (v37 > 5) {
        os_log_type_t v38 = "unknown-state";
      }
      else {
        os_log_type_t v38 = off_1E523FB38[v37];
      }
      int v143 = v38;
      id_str = v29->id_str;

      BOOL v42 = v36;
      size_t v43 = v42;
      int v146 = v34;
      BOOL v44 = "path";
      switch(v8[29])
      {
        case 0:
          break;
        case 1:
          BOOL v44 = "resolver";
          break;
        case 2:
          BOOL v44 = nw_endpoint_flow_mode_string(v42[31]);
          break;
        case 3:
          BOOL v44 = "proxy";
          break;
        case 4:
          BOOL v44 = "fallback";
          break;
        case 5:
          BOOL v44 = "transform";
          break;
        default:
          BOOL v44 = "unknown-mode";
          break;
      }

      unint64_t v48 = v43;
      os_unfair_lock_lock((os_unfair_lock_t)v48 + 28);
      id v49 = v48[8];
      os_unfair_lock_unlock((os_unfair_lock_t)v48 + 28);

      id v50 = v49;
      uint64_t v51 = v155;
      char v52 = v51[7];
      uint64_t v53 = v51[9];
      nw_endpoint_t v139 = v33;
      if (v52)
      {
        if (!v53)
        {
          size_t size = dispatch_data_get_size(v52);
LABEL_54:
          size_t v55 = v51[14];
          if (size <= v55) {
            size_t v55 = 0;
          }
          size_t v56 = size - v55;
          goto LABEL_57;
        }
      }
      else if (!v53)
      {
        size_t v56 = 0;
LABEL_57:

        unint64_t v57 = v51;
        id v58 = v57[8];

        uint64_t v59 = "not ";
        __int16 v159 = "nw_flow_add_write_request";
        *(_DWORD *)int buf = 136448258;
        if (v58) {
          uint64_t v59 = "";
        }
        __int16 v160 = 2082;
        __int16 v161 = id_str;
        __int16 v162 = 2082;
        __int16 v163 = v32;
        __int16 v164 = 2082;
        __int16 v165 = (void *)v146;
        __int16 v166 = 2082;
        __int16 v167 = v143;
        __int16 v168 = 2082;
        __int16 v169 = v44;
        __int16 v170 = 2114;
        id v171 = v50;
        __int16 v172 = 2048;
        size_t v173 = v56;
        __int16 v174 = 2080;
        uint64_t v175 = v59;
        os_log_type_t v28 = loga;
        _os_log_impl(&dword_1830D4000, loga, OS_LOG_TYPE_DEFAULT, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Write request submitted: %zu bytes, context %spresent", buf, 0x5Cu);

LABEL_60:
        id v6 = v155;
        goto LABEL_61;
      }
      size_t size = v51[12];
      goto LABEL_54;
    }
    if ((nw_endpoint_handler_get_logging_disabled(v10) & 1) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      nw_endpoint_t v119 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v119, OS_LOG_TYPE_DEBUG))
      {
        id_string = nw_endpoint_handler_get_id_string(v10);
        nw_endpoint_t v145 = nw_endpoint_handler_dry_run_string(v10);
        nw_endpoint_t logc = nw_endpoint_handler_copy_endpoint(v10);
        id v142 = nw_endpoint_get_logging_description(logc);
        int v140 = nw_endpoint_handler_state_string(v10);
        nw_endpoint_t v120 = nw_endpoint_handler_mode_string(v10);
        id v121 = nw_endpoint_handler_copy_current_path(v10);
        size_t v122 = nw_write_request_remaining_bytes(v155);
        os_log_type_t v28 = v119;
        id v123 = nw_write_request_copy_context(v155);
        *(_DWORD *)int buf = 136448258;
        __int16 v159 = "nw_flow_add_write_request";
        uint64_t v124 = "";
        __int16 v161 = (char *)id_string;
        __int16 v160 = 2082;
        if (!v123) {
          uint64_t v124 = "not ";
        }
        __int16 v162 = 2082;
        __int16 v163 = v145;
        __int16 v164 = 2082;
        __int16 v165 = (void *)v142;
        __int16 v166 = 2082;
        __int16 v167 = v140;
        __int16 v168 = 2082;
        __int16 v169 = v120;
        __int16 v170 = 2114;
        id v171 = v121;
        __int16 v172 = 2048;
        size_t v173 = v122;
        __int16 v174 = 2080;
        uint64_t v175 = v124;
        _os_log_impl(&dword_1830D4000, v119, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Write request submitted: %zu bytes, context %spresent", buf, 0x5Cu);
      }
      else
      {
        os_log_type_t v28 = v119;
      }
      goto LABEL_60;
    }
  }
LABEL_61:
  unint64_t v60 = v6;
  char v61 = v60[128];

  if ((v61 & 4) == 0)
  {
LABEL_91:
    BOOL v93 = nw_write_request_list_append(a2[24], v60);
    unsigned int v77 = (NWConcrete_nw_write_request *)a2[24];
    a2[24] = (void *)v93;
    goto LABEL_92;
  }
  if ((*((unsigned char *)v25 + 33) & 8) != 0 || a2[24])
  {
    BOOL v62 = v10;
    BOOL v63 = (*((unsigned char *)v62 + 268) & 0x20) == 0;

    if (v63)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      unint64_t v64 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v64, OS_LOG_TYPE_DEBUG))
      {
        os_log_type_t v65 = v62;

        id v66 = v65;
        BOOL v67 = (*((unsigned char *)v62 + 268) & 1) == 0;

        if (v67) {
          unint64_t v68 = "";
        }
        else {
          unint64_t v68 = "dry-run ";
        }
        nw_endpoint_t v69 = nw_endpoint_handler_copy_endpoint(v66);
        char v147 = nw_endpoint_get_logging_description(v69);
        id v70 = v66;
        id v71 = v70;
        uint64_t v72 = v10->state;
        if (v72 > 5) {
          uint32_t v73 = "unknown-state";
        }
        else {
          uint32_t v73 = off_1E523FB38[v72];
        }

        int v74 = v71;
        nw_endpoint_t v75 = v74;
        logb = "path";
        switch(v8[29])
        {
          case 0:
            goto LABEL_89;
          case 1:
            int v76 = "resolver";
            goto LABEL_88;
          case 2:
            logb = nw_endpoint_flow_mode_string(v74[31]);
            goto LABEL_89;
          case 3:
            int v76 = "proxy";
            goto LABEL_88;
          case 4:
            int v76 = "fallback";
            goto LABEL_88;
          case 5:
            int v76 = "transform";
            goto LABEL_88;
          default:
            int v76 = "unknown-mode";
LABEL_88:
            logb = v76;
LABEL_89:

            nw_endpoint_t v144 = v68;
            int v91 = v75;
            os_unfair_lock_lock((os_unfair_lock_t)v91 + 28);
            id v92 = v91[8];
            os_unfair_lock_unlock((os_unfair_lock_t)v91 + 28);

            *(_DWORD *)int buf = 136447746;
            __int16 v159 = "nw_flow_add_write_request";
            __int16 v160 = 2082;
            __int16 v161 = v65->id_str;
            __int16 v162 = 2082;
            __int16 v163 = v144;
            __int16 v164 = 2082;
            __int16 v165 = (void *)v147;
            __int16 v166 = 2082;
            __int16 v167 = v73;
            __int16 v168 = 2082;
            __int16 v169 = logb;
            __int16 v170 = 2114;
            id v171 = v92;
            _os_log_impl(&dword_1830D4000, v64, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] adding idempotent write request", buf, 0x48u);

            break;
        }
      }
    }
    goto LABEL_91;
  }
  unsigned int v77 = nw_write_request_create_clone(v60);
  BOOL v78 = nw_write_request_list_append(a2[26], v77);
  int v79 = a2[26];
  a2[26] = (void *)v78;

  BOOL v80 = nw_write_request_list_append(a2[25], v60);
  uint64_t v81 = a2[25];
  a2[25] = (void *)v80;

  os_log_type_t v82 = v10;
  BOOL v83 = (*((unsigned char *)v82 + 268) & 0x20) == 0;

  if (v83)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
    }
    uint64_t v84 = (id)gconnectionLogObj;
    if (os_log_type_enabled(v84, OS_LOG_TYPE_DEBUG))
    {
      unsigned int v85 = nw_endpoint_handler_get_id_string(v82);
      long long v148 = nw_endpoint_handler_dry_run_string(v82);
      nw_endpoint_t logd = nw_endpoint_handler_copy_endpoint(v82);
      uint64_t v86 = v85;
      os_log_type_t v87 = nw_endpoint_get_logging_description(logd);
      nw_endpoint_t v88 = nw_endpoint_handler_state_string(v82);
      id v89 = nw_endpoint_handler_mode_string(v82);
      id v90 = nw_endpoint_handler_copy_current_path(v82);
      *(_DWORD *)int buf = 136447746;
      __int16 v159 = "nw_flow_add_write_request";
      __int16 v160 = 2082;
      __int16 v161 = (char *)v86;
      __int16 v162 = 2082;
      __int16 v163 = v148;
      __int16 v164 = 2082;
      __int16 v165 = (void *)v87;
      __int16 v166 = 2082;
      __int16 v167 = v88;
      __int16 v168 = 2082;
      __int16 v169 = v89;
      __int16 v170 = 2114;
      id v171 = v90;
      _os_log_impl(&dword_1830D4000, v84, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] adding idempotent initial write request", buf, 0x48u);
    }
  }
LABEL_92:

  os_unfair_lock_lock((os_unfair_lock_t)v25 + 220);
  os_log_type_t v94 = v60;
  uint64_t v95 = v94[7];
  uint64_t v96 = v94[9];
  if (v95)
  {
    if (!v96)
    {
      size_t v97 = dispatch_data_get_size(v95);
LABEL_97:
      size_t v98 = v94[14];
      if (v97 <= v98) {
        LODWORD(v98) = 0;
      }
      int v99 = v97 - v98;
      goto LABEL_100;
    }
LABEL_96:
    size_t v97 = v94[12];
    goto LABEL_97;
  }
  if (v96) {
    goto LABEL_96;
  }
  int v99 = 0;
LABEL_100:

  *((_DWORD *)v25 + 224) += v99;
  os_unfair_lock_unlock((os_unfair_lock_t)v25 + 220);

  uint64_t v47 = 1;
LABEL_101:
  id v6 = v155;
LABEL_184:

  return v47;
}

void sub_18322E960(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

BOOL nw_write_request_list_append(void *a1, void *a2)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (!v4)
  {
    uint64_t v18 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v45 = "nw_write_request_list_append";
    nw_endpoint_t v19 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v42 = 0;
    if (__nwlog_fault(v19, &type, &v42))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        char v20 = __nwlog_obj();
        os_log_type_t v21 = type;
        if (os_log_type_enabled(v20, type))
        {
          *(_DWORD *)int buf = 136446210;
          uint64_t v45 = "nw_write_request_list_append";
          _os_log_impl(&dword_1830D4000, v20, v21, "%{public}s called with null request", buf, 0xCu);
        }
      }
      else if (v42)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        char v20 = __nwlog_obj();
        os_log_type_t v31 = type;
        BOOL v32 = os_log_type_enabled(v20, type);
        if (backtrace_string)
        {
          if (v32)
          {
            *(_DWORD *)int buf = 136446466;
            uint64_t v45 = "nw_write_request_list_append";
            __int16 v46 = 2082;
            uint64_t v47 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v20, v31, "%{public}s called with null request, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_68;
        }
        if (v32)
        {
          *(_DWORD *)int buf = 136446210;
          uint64_t v45 = "nw_write_request_list_append";
          _os_log_impl(&dword_1830D4000, v20, v31, "%{public}s called with null request, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        char v20 = __nwlog_obj();
        os_log_type_t v38 = type;
        if (os_log_type_enabled(v20, type))
        {
          *(_DWORD *)int buf = 136446210;
          uint64_t v45 = "nw_write_request_list_append";
          _os_log_impl(&dword_1830D4000, v20, v38, "%{public}s called with null request, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_68:
    if (v19) {
      free(v19);
    }
    id v11 = 0;
    goto LABEL_32;
  }
  if (!v4[1])
  {
    if (!v4[2]) {
      goto LABEL_4;
    }
    goto LABEL_40;
  }
  BOOL v22 = __nwlog_obj();
  os_log_type_enabled(v22, OS_LOG_TYPE_ERROR);
  *(_DWORD *)int buf = 136446210;
  uint64_t v45 = "nw_write_request_list_append";
  uint64_t v23 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v23);
  if (result) {
    goto LABEL_78;
  }
  free(v23);
  if (*((void *)v5 + 2))
  {
LABEL_40:
    uint64_t v24 = __nwlog_obj();
    os_log_type_enabled(v24, OS_LOG_TYPE_ERROR);
    *(_DWORD *)int buf = 136446210;
    uint64_t v45 = "nw_write_request_list_append";
    char v25 = (void *)_os_log_send_and_compose_impl();

    BOOL result = __nwlog_abort((uint64_t)v25);
    if (result) {
      goto LABEL_78;
    }
    free(v25);
  }
LABEL_4:
  id v6 = (os_unfair_lock_s *)*((id *)v5 + 8);
  unsigned int v7 = v6;
  if (v6)
  {
    if (v6 != (os_unfair_lock_s *)&__block_literal_global_10_42276
      && v6 != (os_unfair_lock_s *)&__block_literal_global_8_42267
      && v6 != (os_unfair_lock_s *)&__block_literal_global_6_42258
      && v6 != (os_unfair_lock_s *)&__block_literal_global_42249)
    {
      os_unfair_lock_lock(v6 + 28);
      if (!*(void *)&v7[18]._os_unfair_lock_opaque)
      {
        *(void *)&v7[18]._os_unfair_lock_opaque = mach_absolute_time();
        int v8 = *(void **)&v7[24]._os_unfair_lock_opaque;
        *(void *)&v7[24]._os_unfair_lock_opaque = 0;
      }
      os_unfair_lock_unlock(v7 + 28);
    }
    goto LABEL_12;
  }
  BOOL v26 = __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  uint64_t v45 = "nw_content_context_mark_enqueue_time";
  char v27 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v42 = 0;
  if (__nwlog_fault(v27, &type, &v42))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v28 = __nwlog_obj();
      os_log_type_t v29 = type;
      if (os_log_type_enabled(v28, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v45 = "nw_content_context_mark_enqueue_time";
        _os_log_impl(&dword_1830D4000, v28, v29, "%{public}s called with null context", buf, 0xCu);
      }
    }
    else if (v42)
    {
      nw_endpoint_t v33 = (char *)__nw_create_backtrace_string();
      os_log_type_t v28 = __nwlog_obj();
      os_log_type_t v34 = type;
      BOOL v35 = os_log_type_enabled(v28, type);
      if (v33)
      {
        if (v35)
        {
          *(_DWORD *)int buf = 136446466;
          uint64_t v45 = "nw_content_context_mark_enqueue_time";
          __int16 v46 = 2082;
          uint64_t v47 = v33;
          _os_log_impl(&dword_1830D4000, v28, v34, "%{public}s called with null context, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v33);
        goto LABEL_74;
      }
      if (v35)
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v45 = "nw_content_context_mark_enqueue_time";
        _os_log_impl(&dword_1830D4000, v28, v34, "%{public}s called with null context, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v28 = __nwlog_obj();
      os_log_type_t v39 = type;
      if (os_log_type_enabled(v28, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v45 = "nw_content_context_mark_enqueue_time";
        _os_log_impl(&dword_1830D4000, v28, v39, "%{public}s called with null context, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_74:
  if (v27) {
    free(v27);
  }
LABEL_12:

  if (!v3)
  {
    if (!*((void *)v5 + 2)) {
      *((void *)v5 + 2) = v5;
    }
    id v11 = v5;
    id v3 = 0;
    goto LABEL_32;
  }
  uint64_t v9 = v3[2];
  if (!v9)
  {
    double v10 = *((double *)v5 + 15);
LABEL_21:
    if (v10 > *((double *)v3 + 15))
    {
      id v12 = (void *)*((void *)v5 + 1);
      *((void *)v5 + 1) = v3;
      char v13 = v3;

      *((void *)v5 + 2) = v3[2];
      v3[2] = 0;

      uint64_t v14 = v5;
LABEL_31:
      id v3 = v14;
      id v11 = v14;
LABEL_32:

      return (BOOL)v11;
    }
    char v15 = (id *)v3;
    while (1)
    {
      os_log_type_t v16 = v15;
      char v15 = (id *)v15[1];
      if (!v15) {
        break;
      }
      if (v10 > *((double *)v15 + 15))
      {
        objc_storeStrong((id *)v5 + 1, v15);
        objc_storeStrong(v16 + 1, a2);
        goto LABEL_30;
      }
    }
    if ((id *)v9 != v16)
    {
      BOOL v40 = __nwlog_obj();
      os_log_type_enabled(v40, OS_LOG_TYPE_ERROR);
      *(_DWORD *)int buf = 136446210;
      uint64_t v45 = "nw_write_request_list_append";
      BOOL v41 = (void *)_os_log_send_and_compose_impl();

      BOOL result = __nwlog_abort((uint64_t)v41);
      if (result) {
        goto LABEL_78;
      }
      free(v41);
    }
    objc_storeStrong(v16 + 1, a2);
LABEL_29:
    v3[2] = v5;
LABEL_30:
    uint64_t v14 = v3;
    goto LABEL_31;
  }
  double v10 = *((double *)v5 + 15);
  if (*(double *)(v9 + 120) < v10) {
    goto LABEL_21;
  }
  if (!*(void *)(v9 + 8))
  {
LABEL_16:
    objc_storeStrong((id *)(v9 + 8), a2);
    goto LABEL_29;
  }
  uint64_t v36 = __nwlog_obj();
  os_log_type_enabled(v36, OS_LOG_TYPE_ERROR);
  *(_DWORD *)int buf = 136446210;
  uint64_t v45 = "nw_write_request_list_append";
  uint64_t v37 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v37);
  if (!result)
  {
    free(v37);
    uint64_t v9 = v3[2];
    goto LABEL_16;
  }
LABEL_78:
  __break(1u);
  return result;
}

void sub_18322F2B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id nw_write_request_copy_context(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    id v3 = v1[8];
    goto LABEL_3;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  os_log_type_t v16 = "nw_write_request_copy_context";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      unsigned int v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v16 = "nw_write_request_copy_context";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null request", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      unsigned int v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          os_log_type_t v16 = "nw_write_request_copy_context";
          __int16 v17 = 2082;
          uint64_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null request, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v16 = "nw_write_request_copy_context";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null request, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      unsigned int v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v16 = "nw_write_request_copy_context";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null request, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  id v3 = 0;
LABEL_3:

  return v3;
}

void nw_path_monitor_start(nw_path_monitor_t monitor)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v1 = monitor;
  uint64_t v2 = v1;
  if (v1)
  {
    nw_path_evaluator_start(v1);
    nw_path_evaluator_call_update_handler(v2);
    goto LABEL_3;
  }
  id v3 = __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  uint64_t v14 = "nw_path_monitor_start";
  id v4 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (__nwlog_fault(v4, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v14 = "nw_path_monitor_start";
        _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s called with null monitor", buf, 0xCu);
      }
    }
    else if (v11)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v5 = __nwlog_obj();
      os_log_type_t v8 = type;
      BOOL v9 = os_log_type_enabled(v5, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)int buf = 136446466;
          uint64_t v14 = "nw_path_monitor_start";
          __int16 v15 = 2082;
          os_log_type_t v16 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v5, v8, "%{public}s called with null monitor, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v9)
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v14 = "nw_path_monitor_start";
        _os_log_impl(&dword_1830D4000, v5, v8, "%{public}s called with null monitor, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v5 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v14 = "nw_path_monitor_start";
        _os_log_impl(&dword_1830D4000, v5, v10, "%{public}s called with null monitor, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v4) {
    free(v4);
  }
LABEL_3:
}

void sub_18322F80C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_channel_create_with_attributes(_DWORD *a1, unsigned __int8 *uu, unsigned int a3, uint64_t a4)
{
  uint64_t v130 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)block = 136446210;
    *(void *)&void block[4] = "nw_channel_create_with_attributes";
    uint64_t v81 = (char *)_os_log_send_and_compose_impl();
    out[0] = 16;
    LOBYTE(v113) = 0;
    if (!__nwlog_fault(v81, out, &v113)) {
      goto LABEL_189;
    }
    if (out[0] == 17)
    {
      os_log_type_t v82 = __nwlog_obj();
      os_log_type_t v83 = out[0];
      if (os_log_type_enabled(v82, (os_log_type_t)out[0]))
      {
        *(_DWORD *)block = 136446210;
        *(void *)&void block[4] = "nw_channel_create_with_attributes";
        uint64_t v84 = "%{public}s called with null context";
LABEL_188:
        _os_log_impl(&dword_1830D4000, v82, v83, v84, block, 0xCu);
      }
LABEL_189:
      if (v81) {
        free(v81);
      }
      return 0;
    }
    if (!(_BYTE)v113)
    {
      os_log_type_t v82 = __nwlog_obj();
      os_log_type_t v83 = out[0];
      if (os_log_type_enabled(v82, (os_log_type_t)out[0]))
      {
        *(_DWORD *)block = 136446210;
        *(void *)&void block[4] = "nw_channel_create_with_attributes";
        uint64_t v84 = "%{public}s called with null context, backtrace limit exceeded";
        goto LABEL_188;
      }
      goto LABEL_189;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v82 = __nwlog_obj();
    os_log_type_t v83 = out[0];
    BOOL v86 = os_log_type_enabled(v82, (os_log_type_t)out[0]);
    if (!backtrace_string)
    {
      if (v86)
      {
        *(_DWORD *)block = 136446210;
        *(void *)&void block[4] = "nw_channel_create_with_attributes";
        uint64_t v84 = "%{public}s called with null context, no backtrace";
        goto LABEL_188;
      }
      goto LABEL_189;
    }
    if (v86)
    {
      *(_DWORD *)block = 136446466;
      *(void *)&void block[4] = "nw_channel_create_with_attributes";
      *(_WORD *)&block[12] = 2082;
      *(void *)&block[14] = backtrace_string;
      os_log_type_t v87 = "%{public}s called with null context, dumping backtrace:%{public}s";
LABEL_174:
      _os_log_impl(&dword_1830D4000, v82, v83, v87, block, 0x16u);
    }
LABEL_175:
    free(backtrace_string);
    goto LABEL_189;
  }
  if (!a4)
  {
    __nwlog_obj();
    *(_DWORD *)block = 136446210;
    *(void *)&void block[4] = "nw_channel_create_with_attributes";
    uint64_t v81 = (char *)_os_log_send_and_compose_impl();
    out[0] = 16;
    LOBYTE(v113) = 0;
    if (!__nwlog_fault(v81, out, &v113)) {
      goto LABEL_189;
    }
    if (out[0] == 17)
    {
      os_log_type_t v82 = __nwlog_obj();
      os_log_type_t v83 = out[0];
      if (os_log_type_enabled(v82, (os_log_type_t)out[0]))
      {
        *(_DWORD *)block = 136446210;
        *(void *)&void block[4] = "nw_channel_create_with_attributes";
        uint64_t v84 = "%{public}s called with null attributes";
        goto LABEL_188;
      }
      goto LABEL_189;
    }
    if (!(_BYTE)v113)
    {
      os_log_type_t v82 = __nwlog_obj();
      os_log_type_t v83 = out[0];
      if (os_log_type_enabled(v82, (os_log_type_t)out[0]))
      {
        *(_DWORD *)block = 136446210;
        *(void *)&void block[4] = "nw_channel_create_with_attributes";
        uint64_t v84 = "%{public}s called with null attributes, backtrace limit exceeded";
        goto LABEL_188;
      }
      goto LABEL_189;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v82 = __nwlog_obj();
    os_log_type_t v83 = out[0];
    BOOL v88 = os_log_type_enabled(v82, (os_log_type_t)out[0]);
    if (!backtrace_string)
    {
      if (v88)
      {
        *(_DWORD *)block = 136446210;
        *(void *)&void block[4] = "nw_channel_create_with_attributes";
        uint64_t v84 = "%{public}s called with null attributes, no backtrace";
        goto LABEL_188;
      }
      goto LABEL_189;
    }
    if (v88)
    {
      *(_DWORD *)block = 136446466;
      *(void *)&void block[4] = "nw_channel_create_with_attributes";
      *(_WORD *)&block[12] = 2082;
      *(void *)&block[14] = backtrace_string;
      os_log_type_t v87 = "%{public}s called with null attributes, dumping backtrace:%{public}s";
      goto LABEL_174;
    }
    goto LABEL_175;
  }
  memset(out, 0, sizeof(out));
  uuid_unparse(uu, out);
  snprintf(&out[36], 0xCuLL, "-%u", a3);
  uint64_t globals_for_channel = nw_context_get_globals_for_channel(a1);
  BOOL v9 = (os_unfair_lock_s *)(globals_for_channel + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(globals_for_channel + 16));
  os_log_type_t v10 = (char *)nw_dictionary_copy_value(*(void *)globals_for_channel, (uint64_t)out);
  if (v10)
  {
LABEL_156:
    os_unfair_lock_unlock(v9);
    return (BOOL)v10;
  }
  char v11 = *(const void **)a4;
  size_t v12 = *(unsigned int *)(a4 + 8);
  char v13 = *(unsigned char *)(a4 + 12);
  if (nw_channel_init(void)::onceToken != -1) {
    dispatch_once(&nw_channel_init(void)::onceToken, &__block_literal_global_48_88379);
  }
  if (_nw_signposts_once != -1) {
    dispatch_once(&_nw_signposts_once, &__block_literal_global_73_88215);
  }
  if (_nw_signposts_enabled && kdebug_is_enabled()) {
    kdebug_trace();
  }
  objc_opt_class();
  uint64_t v14 = _os_object_alloc();
  if (!v14)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_channel_create";
    BOOL v32 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v123) = 0;
    if (!__nwlog_fault(v32, type, &v123)) {
      goto LABEL_91;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v33 = gLogObj;
      os_log_type_t v34 = type[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, type[0])) {
        goto LABEL_91;
      }
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_channel_create";
      BOOL v35 = "%{public}s nw_channel_obj_alloc failed";
    }
    else
    {
      if ((_BYTE)v123)
      {
        BOOL v40 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v41 = gLogObj;
        os_log_type_t v42 = type[0];
        BOOL v43 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
        if (v40)
        {
          if (v43)
          {
            *(_DWORD *)int buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_channel_create";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&void buf[14] = v40;
            _os_log_impl(&dword_1830D4000, v41, v42, "%{public}s nw_channel_obj_alloc failed, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v40);
          goto LABEL_91;
        }
        if (!v43)
        {
LABEL_91:
          if (v32) {
            free(v32);
          }
          goto LABEL_125;
        }
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_channel_create";
        BOOL v35 = "%{public}s nw_channel_obj_alloc failed, no backtrace";
        id v58 = v41;
        os_log_type_t v59 = v42;
LABEL_90:
        _os_log_impl(&dword_1830D4000, v58, v59, v35, buf, 0xCu);
        goto LABEL_91;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v33 = gLogObj;
      os_log_type_t v34 = type[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, type[0])) {
        goto LABEL_91;
      }
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_channel_create";
      BOOL v35 = "%{public}s nw_channel_obj_alloc failed, backtrace limit exceeded";
    }
    id v58 = v33;
    os_log_type_t v59 = v34;
    goto LABEL_90;
  }
  os_log_type_t v10 = (char *)v14;
  *(_OWORD *)(v14 + 88) = *(_OWORD *)uu;
  *(_DWORD *)(v14 + 428) = a3;
  uint64_t v15 = os_channel_attr_create();
  *((void *)v10 + 18) = v15;
  if (!v15)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_channel_create";
    uint64_t v36 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v123) = 0;
    if (!__nwlog_fault(v36, type, &v123)) {
      goto LABEL_122;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v37 = gLogObj;
      os_log_type_t v38 = type[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, type[0])) {
        goto LABEL_122;
      }
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_channel_create";
      os_log_type_t v39 = "%{public}s os_channel_attr_create failed";
    }
    else
    {
      if ((_BYTE)v123)
      {
        uint64_t v47 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v48 = gLogObj;
        os_log_type_t v49 = type[0];
        BOOL v50 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
        if (!v47)
        {
          if (!v50) {
            goto LABEL_122;
          }
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_channel_create";
          os_log_type_t v39 = "%{public}s os_channel_attr_create failed, no backtrace";
          BOOL v63 = v48;
          os_log_type_t v64 = v49;
          goto LABEL_120;
        }
        if (v50)
        {
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_channel_create";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&void buf[14] = v47;
          _os_log_impl(&dword_1830D4000, v48, v49, "%{public}s os_channel_attr_create failed, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v47);
        goto LABEL_122;
      }
      uint64_t v37 = __nwlog_obj();
      os_log_type_t v38 = type[0];
      if (!os_log_type_enabled(v37, type[0])) {
        goto LABEL_122;
      }
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_channel_create";
      os_log_type_t v39 = "%{public}s os_channel_attr_create failed, backtrace limit exceeded";
    }
LABEL_119:
    BOOL v63 = v37;
    os_log_type_t v64 = v38;
LABEL_120:
    uint32_t v67 = 12;
LABEL_121:
    _os_log_impl(&dword_1830D4000, v63, v64, v39, buf, v67);
    goto LABEL_122;
  }
  if (v11) {
    BOOL v16 = v12 == 0;
  }
  else {
    BOOL v16 = 1;
  }
  int v17 = !v16;
  int v100 = v17;
  if (!v16) {
    os_channel_attr_set_key();
  }
  os_channel_attr_set();
  if (v13) {
    os_channel_attr_set();
  }
  if ((v13 & 2) != 0) {
    os_channel_attr_set();
  }
  os_channel_attr_set();
  if (a3 >= 0x10000)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_channel_create";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&void buf[14] = a3;
    uint64_t v36 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v123) = 0;
    if (__nwlog_fault(v36, type, &v123))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        id v89 = __nwlog_obj();
        os_log_type_t v90 = type[0];
        if (os_log_type_enabled(v89, type[0]))
        {
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_channel_create";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&void buf[14] = a3;
          os_log_type_t v39 = "%{public}s port %u > NEXUS_PORT_MAX";
LABEL_210:
          BOOL v63 = v89;
          os_log_type_t v64 = v90;
          uint32_t v67 = 18;
          goto LABEL_121;
        }
      }
      else if ((_BYTE)v123)
      {
        int v91 = (char *)__nw_create_backtrace_string();
        id v89 = __nwlog_obj();
        os_log_type_t v90 = type[0];
        BOOL v92 = os_log_type_enabled(v89, type[0]);
        if (v91)
        {
          if (v92)
          {
            *(_DWORD *)int buf = 136446722;
            *(void *)&uint8_t buf[4] = "nw_channel_create";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&void buf[14] = a3;
            *(_WORD *)&buf[18] = 2082;
            *(void *)&buf[20] = v91;
            _os_log_impl(&dword_1830D4000, v89, v90, "%{public}s port %u > NEXUS_PORT_MAX, dumping backtrace:%{public}s", buf, 0x1Cu);
          }
          free(v91);
          if (!v36) {
            goto LABEL_124;
          }
          goto LABEL_123;
        }
        if (v92)
        {
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_channel_create";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&void buf[14] = a3;
          os_log_type_t v39 = "%{public}s port %u > NEXUS_PORT_MAX, no backtrace";
          goto LABEL_210;
        }
      }
      else
      {
        id v89 = __nwlog_obj();
        os_log_type_t v90 = type[0];
        if (os_log_type_enabled(v89, type[0]))
        {
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_channel_create";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&void buf[14] = a3;
          os_log_type_t v39 = "%{public}s port %u > NEXUS_PORT_MAX, backtrace limit exceeded";
          goto LABEL_210;
        }
      }
    }
LABEL_122:
    if (!v36)
    {
LABEL_124:
      os_release(v10);
      goto LABEL_125;
    }
LABEL_123:
    free(v36);
    goto LABEL_124;
  }
  uint64_t extended = os_channel_create_extended();
  *((void *)v10 + 17) = extended;
  if (!extended)
  {
    int v44 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    BOOL v45 = v44 == 2;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    __int16 v46 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_channel_create";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&void buf[14] = v44;
      _os_log_impl(&dword_1830D4000, v46, OS_LOG_TYPE_ERROR, "%{public}s os_channel_create %{darwin.errno}d", buf, 0x12u);
    }
LABEL_67:
    os_release(v10);
    if (v45)
    {
LABEL_155:
      os_log_type_t v10 = 0;
      goto LABEL_156;
    }
LABEL_125:
    uint64_t v113 = 0;
    uint64_t v114 = (uint64_t)&v113;
    uint64_t v115 = 0x2000000000;
    os_log_type_t v116 = 0;
    uint64_t v68 = *(void *)globals_for_channel;
    v102[0] = MEMORY[0x1E4F143A8];
    v102[1] = 0x40000000;
    v102[2] = __nw_channel_create_with_attributes_block_invoke;
    v102[3] = &unk_1E524B5C0;
    v102[4] = &v113;
    nw_dictionary_apply(v68, (uint64_t)v102);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    nw_endpoint_t v69 = *(const char **)(v114 + 24);
    if (!v69) {
      nw_endpoint_t v69 = "none";
    }
    *(_DWORD *)block = 136446722;
    *(void *)&void block[4] = "nw_channel_create_with_attributes";
    *(_WORD *)&block[12] = 2082;
    *(void *)&block[14] = out;
    *(_WORD *)&block[22] = 2082;
    os_log_type_t v127 = v69;
    id v70 = (char *)_os_log_send_and_compose_impl();
    v106[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v112[0]) = 0;
    if (!__nwlog_fault(v70, v106, v112)) {
      goto LABEL_149;
    }
    if (v106[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v71 = gLogObj;
      os_log_type_t v72 = v106[0];
      if (os_log_type_enabled((os_log_t)gLogObj, v106[0]))
      {
        uint32_t v73 = *(const char **)(v114 + 24);
        if (!v73) {
          uint32_t v73 = "none";
        }
        *(_DWORD *)block = 136446722;
        *(void *)&void block[4] = "nw_channel_create_with_attributes";
        *(_WORD *)&block[12] = 2082;
        *(void *)&block[14] = out;
        *(_WORD *)&block[22] = 2082;
        os_log_type_t v127 = v73;
        int v74 = "%{public}s Channel creation with attributes failed with key: %{public}s, existing channels %{public}s";
LABEL_148:
        _os_log_impl(&dword_1830D4000, v71, v72, v74, block, 0x20u);
      }
    }
    else if (LOBYTE(v112[0]))
    {
      nw_endpoint_t v75 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v71 = gLogObj;
      os_log_type_t v72 = v106[0];
      BOOL v76 = os_log_type_enabled((os_log_t)gLogObj, v106[0]);
      if (v75)
      {
        if (v76)
        {
          unsigned int v77 = *(const char **)(v114 + 24);
          if (!v77) {
            unsigned int v77 = "none";
          }
          *(_DWORD *)block = 136446978;
          *(void *)&void block[4] = "nw_channel_create_with_attributes";
          *(_WORD *)&block[12] = 2082;
          *(void *)&block[14] = out;
          *(_WORD *)&block[22] = 2082;
          os_log_type_t v127 = v77;
          LOWORD(v128) = 2082;
          *(void *)((char *)&v128 + 2) = v75;
          _os_log_impl(&dword_1830D4000, v71, v72, "%{public}s Channel creation with attributes failed with key: %{public}s, existing channels %{public}s, dumping backtrace:%{public}s", block, 0x2Au);
        }
        free(v75);
        goto LABEL_149;
      }
      if (v76)
      {
        int v79 = *(const char **)(v114 + 24);
        if (!v79) {
          int v79 = "none";
        }
        *(_DWORD *)block = 136446722;
        *(void *)&void block[4] = "nw_channel_create_with_attributes";
        *(_WORD *)&block[12] = 2082;
        *(void *)&block[14] = out;
        *(_WORD *)&block[22] = 2082;
        os_log_type_t v127 = v79;
        int v74 = "%{public}s Channel creation with attributes failed with key: %{public}s, existing channels %{public}s, no backtrace";
        goto LABEL_148;
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v71 = gLogObj;
      os_log_type_t v72 = v106[0];
      if (os_log_type_enabled((os_log_t)gLogObj, v106[0]))
      {
        BOOL v78 = *(const char **)(v114 + 24);
        if (!v78) {
          BOOL v78 = "none";
        }
        *(_DWORD *)block = 136446722;
        *(void *)&void block[4] = "nw_channel_create_with_attributes";
        *(_WORD *)&block[12] = 2082;
        *(void *)&block[14] = out;
        *(_WORD *)&block[22] = 2082;
        os_log_type_t v127 = v78;
        int v74 = "%{public}s Channel creation with attributes failed with key: %{public}s, existing channels %{public}s, bac"
              "ktrace limit exceeded";
        goto LABEL_148;
      }
    }
LABEL_149:
    if (v70) {
      free(v70);
    }
    BOOL v80 = *(void **)(v114 + 24);
    if (v80)
    {
      free(v80);
      *(void *)(v114 + 24) = 0;
    }
    unint64_t v60 = &v113;
LABEL_154:
    _Block_object_dispose(v60, 8);
    goto LABEL_155;
  }
  int fd = os_channel_get_fd();
  *((_DWORD *)v10 + 108) = fd;
  if (fd < 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_channel_create";
    uint64_t v36 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v123) = 0;
    if (!__nwlog_fault(v36, type, &v123)) {
      goto LABEL_122;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      uint64_t v37 = __nwlog_obj();
      os_log_type_t v38 = type[0];
      if (!os_log_type_enabled(v37, type[0])) {
        goto LABEL_122;
      }
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_channel_create";
      os_log_type_t v39 = "%{public}s failed to get fd for channel";
    }
    else if ((_BYTE)v123)
    {
      char v61 = (char *)__nw_create_backtrace_string();
      uint64_t v37 = __nwlog_obj();
      os_log_type_t v38 = type[0];
      BOOL v62 = os_log_type_enabled(v37, type[0]);
      if (v61)
      {
        if (v62)
        {
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_channel_create";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&void buf[14] = v61;
          _os_log_impl(&dword_1830D4000, v37, v38, "%{public}s failed to get fd for channel, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v61);
        if (!v36) {
          goto LABEL_124;
        }
        goto LABEL_123;
      }
      if (!v62) {
        goto LABEL_122;
      }
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_channel_create";
      os_log_type_t v39 = "%{public}s failed to get fd for channel, no backtrace";
    }
    else
    {
      uint64_t v37 = __nwlog_obj();
      os_log_type_t v38 = type[0];
      if (!os_log_type_enabled(v37, type[0])) {
        goto LABEL_122;
      }
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_channel_create";
      os_log_type_t v39 = "%{public}s failed to get fd for channel, backtrace limit exceeded";
    }
    goto LABEL_119;
  }
  if (v13) {
    *((_WORD *)v10 + 222) |= 0x1000u;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  char v20 = gLogObj;
  if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
  {
    if ((*((_WORD *)v10 + 222) & 0x1000) != 0) {
      os_log_type_t v21 = "enabled";
    }
    else {
      os_log_type_t v21 = "disabled";
    }
    *(_DWORD *)int buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_channel_create";
    *(_WORD *)&unsigned char buf[12] = 2082;
    *(void *)&void buf[14] = v21;
    _os_log_impl(&dword_1830D4000, v20, OS_LOG_TYPE_DEBUG, "%{public}s Channel user packet pool %{public}s", buf, 0x16u);
  }
  os_channel_ring_id();
  os_channel_ring_id();
  *((void *)v10 + 27) = os_channel_tx_ring();
  *((void *)v10 + 28) = os_channel_rx_ring();
  os_channel_read_attr();
  *(void *)os_log_type_t type = 0;
  os_channel_attr_get();
  *((_DWORD *)v10 + 109) = 0;
  if ((*((_WORD *)v10 + 222) & 0x1000) != 0)
  {
    *(void *)os_log_type_t type = 0;
    os_channel_attr_get();
  }
  BOOL v22 = v10 + 444;
  *((_DWORD *)v10 + 110) = 0;
  uint64_t v123 = 0;
  os_channel_attr_get();
  uint64_t v122 = 0;
  if (!os_channel_attr_get())
  {
    int v23 = (unsigned __int16)*v22;
    unsigned int v24 = v23 & 0xFFFFF7FF | (v10[446] << 16);
    *BOOL v22 = ((v122 & 1) << 11) | v23 & 0xF7FF;
    v10[446] = BYTE2(v24);
  }
  uint64_t v121 = 0;
  os_channel_attr_get();
  if (v100)
  {
    char v25 = malloc_type_malloc(v12, 0xF2B69DE5uLL);
    if (!v25)
    {
      BOOL v93 = __nwlog_obj();
      os_log_type_enabled(v93, OS_LOG_TYPE_ERROR);
      *(_DWORD *)int buf = 136446466;
      *(void *)&uint8_t buf[4] = "strict_malloc";
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&void buf[14] = v12;
      BOOL v101 = (void *)_os_log_send_and_compose_impl();
      BOOL result = __nwlog_abort((uint64_t)v101);
      if (result) {
        goto LABEL_224;
      }
      free(v101);
    }
    *((void *)v10 + 2) = v25;
    memcpy(v25, v11, v12);
    *((_DWORD *)v10 + 106) = v12;
  }
  if (!*((_DWORD *)v10 + 109))
  {
    if (nw_channel_check_defunct((uint64_t)v10))
    {
      BOOL v45 = 1;
      goto LABEL_67;
    }
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_channel_create";
    os_log_type_t v94 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v120 = OS_LOG_TYPE_ERROR;
    char v119 = 0;
    if (!__nwlog_fault(v94, &v120, &v119)) {
      goto LABEL_221;
    }
    if (v120 == OS_LOG_TYPE_FAULT)
    {
      uint64_t v95 = __nwlog_obj();
      os_log_type_t v96 = v120;
      if (os_log_type_enabled(v95, v120))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_channel_create";
        size_t v97 = "%{public}s Channel slot size is 0";
LABEL_220:
        _os_log_impl(&dword_1830D4000, v95, v96, v97, buf, 0xCu);
      }
    }
    else if (v119)
    {
      size_t v98 = (char *)__nw_create_backtrace_string();
      uint64_t v95 = __nwlog_obj();
      os_log_type_t v96 = v120;
      BOOL v99 = os_log_type_enabled(v95, v120);
      if (v98)
      {
        if (v99)
        {
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_channel_create";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&void buf[14] = v98;
          _os_log_impl(&dword_1830D4000, v95, v96, "%{public}s Channel slot size is 0, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v98);
        goto LABEL_221;
      }
      if (v99)
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_channel_create";
        size_t v97 = "%{public}s Channel slot size is 0, no backtrace";
        goto LABEL_220;
      }
    }
    else
    {
      uint64_t v95 = __nwlog_obj();
      os_log_type_t v96 = v120;
      if (os_log_type_enabled(v95, v120))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_channel_create";
        size_t v97 = "%{public}s Channel slot size is 0, backtrace limit exceeded";
        goto LABEL_220;
      }
    }
LABEL_221:
    if (v94) {
      free(v94);
    }
    BOOL v45 = 0;
    goto LABEL_67;
  }
  *((void *)v10 + 38) = 0;
  *((void *)v10 + 39) = v10 + 304;
  *((void *)v10 + 40) = 0;
  *((void *)v10 + 41) = v10 + 320;
  *((void *)v10 + 36) = 0;
  *((void *)v10 + 37) = v10 + 288;
  *((void *)v10 + 42) = 0;
  *((void *)v10 + 43) = v10 + 336;
  os_channel_attr_get();
  os_channel_attr_get();
  *((void *)v10 + 16) = 0;
  os_channel_attr_get();
  unint64_t v26 = *((void *)v10 + 14) + *((void *)v10 + 13);
  if (*((void *)v10 + 16) < v26) {
    *((void *)v10 + 16) = v26;
  }
  nw_channel_allocate_frames(v10);
  *((void *)v10 + 29) = 0x6C656E6E616863;
  *((void *)v10 + 33) = 0x200000000;
  *((void *)v10 + 5) = v10 + 232;
  *((void *)v10 + 6) = &g_channel_protocol_callbacks;
  *((void *)v10 + 8) = v10;
  *((void *)v10 + 48) = 0;
  *((void *)v10 + 49) = v10 + 384;
  *((void *)v10 + 46) = 0;
  *((void *)v10 + 47) = v10 + 368;
  *((void *)v10 + 19) = os_retain(a1);
  char v27 = dispatch_group_create();
  *((void *)v10 + 26) = v27;
  if (v27) {
    goto LABEL_48;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
  *(_DWORD *)int buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_channel_create";
  os_log_type_t v28 = (void *)_os_log_send_and_compose_impl();
  BOOL result = __nwlog_abort((uint64_t)v28);
  if (!result)
  {
    free(v28);
    char v27 = *((void *)v10 + 26);
LABEL_48:
    dispatch_group_enter(v27);
    *(void *)int buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2000000000;
    *(void *)&unsigned char buf[24] = 0;
    *(void *)&unsigned char buf[24] = os_retain(v10);
    BOOL is_inline = nw_context_is_inline(a1);
    if (is_inline)
    {
      if (nw_context_copy_implicit_context::onceToken != -1) {
        dispatch_once(&nw_context_copy_implicit_context::onceToken, &__block_literal_global_18);
      }
      id v31 = (id)nw_context_copy_implicit_context::implicit_context;
    }
    else
    {
      id v31 = a1;
    }
    BOOL v51 = nw_context_copy_workloop(v31);
    uint64_t v52 = *((void *)v10 + 17);
    uint64_t v53 = *((void *)v10 + 26);
    *(void *)block = MEMORY[0x1E4F143A8];
    *(void *)&block[8] = 0x40000000;
    *(void *)&block[16] = ___ZL17nw_channel_createP10nw_contextPhjPvjbbPb_block_invoke;
    os_log_type_t v127 = (const char *)&unk_1E524B680;
    *(void *)&long long v128 = buf;
    *((void *)&v128 + 1) = v52;
    dispatch_group_notify(v53, (dispatch_queue_t)v51, block);
    if (v51) {
      dispatch_release((dispatch_object_t)v51);
    }
    dispatch_group_enter(*((dispatch_group_t *)v10 + 26));
    int v54 = *((_DWORD *)v10 + 108);
    v112[4] = v10;
    uint64_t v113 = MEMORY[0x1E4F143A8];
    uint64_t v114 = 0x40000000;
    uint64_t v115 = (uint64_t)___ZL17nw_channel_createP10nw_contextPhjPvjbbPb_block_invoke_39;
    os_log_type_t v116 = &__block_descriptor_tmp_40_88413;
    BOOL v118 = is_inline;
    BOOL v117 = v10;
    v112[0] = MEMORY[0x1E4F143A8];
    v112[1] = 0x40000000;
    v112[2] = ___ZL17nw_channel_createP10nw_contextPhjPvjbbPb_block_invoke_2;
    v112[3] = &__block_descriptor_tmp_41_88414;
    *((void *)v10 + 21) = nw_queue_context_create_source(a1, v54, 1, 0, &v113, v112);
    networkd_settings_get_BOOL((const char *)nw_setting_channel_enable_qos_override);
    nw_queue_source_set_qos_class_fallback(*((void **)v10 + 21));
    dispatch_group_enter(*((dispatch_group_t *)v10 + 26));
    int v55 = *((_DWORD *)v10 + 108);
    v105[4] = v10;
    *(void *)uint64_t v106 = MEMORY[0x1E4F143A8];
    uint64_t v107 = 0x40000000;
    BOOL v108 = ___ZL17nw_channel_createP10nw_contextPhjPvjbbPb_block_invoke_3;
    os_log_type_t v109 = &__block_descriptor_tmp_42_88415;
    BOOL v111 = is_inline;
    BOOL v110 = v10;
    v105[0] = MEMORY[0x1E4F143A8];
    v105[1] = 0x40000000;
    v105[2] = ___ZL17nw_channel_createP10nw_contextPhjPvjbbPb_block_invoke_4;
    v105[3] = &__block_descriptor_tmp_43_88416;
    *((void *)v10 + 22) = nw_queue_context_create_source(a1, v55, 2, 0, v106, v105);
    if ((*v22 & 0x200) != 0)
    {
      dispatch_group_enter(*((dispatch_group_t *)v10 + 26));
      int v56 = *((_DWORD *)v10 + 108);
      v103[4] = v10;
      v104[0] = MEMORY[0x1E4F143A8];
      v104[1] = 0x40000000;
      v104[2] = ___ZL17nw_channel_createP10nw_contextPhjPvjbbPb_block_invoke_5;
      v104[3] = &__block_descriptor_tmp_44_88417;
      v104[4] = v10;
      v103[0] = MEMORY[0x1E4F143A8];
      v103[1] = 0x40000000;
      v103[2] = ___ZL17nw_channel_createP10nw_contextPhjPvjbbPb_block_invoke_6;
      v103[3] = &__block_descriptor_tmp_45_88418;
      BOOL source = nw_queue_context_create_source(a1, v56, 5, 1u, v104, v103);
      *((void *)v10 + 23) = source;
      nw_queue_activate_source(source);
    }
    nw_queue_activate_source(*((void *)v10 + 21));
    nw_queue_activate_source(*((void *)v10 + 22));
    if (*((void *)v10 + 17))
    {
      if ((((unsigned __int16)*v22 | (v10[446] << 16)) & 0x80000) == 0)
      {
        if (!os_channel_is_defunct())
        {
          _Block_object_dispose(buf, 8);
          nw_dictionary_set_value(*(void *)globals_for_channel, out, v10);
          *v22 |= 0x2000u;
          if (a1[31] != 4)
          {
            os_log_type_t v65 = __nwlog_obj();
            if (os_log_type_enabled(v65, OS_LOG_TYPE_INFO))
            {
              int v66 = *((_DWORD *)v10 + 108);
              *(_DWORD *)block = 136446722;
              *(void *)&void block[4] = "nw_channel_create_with_attributes";
              *(_WORD *)&block[12] = 2082;
              *(void *)&block[14] = out;
              *(_WORD *)&block[22] = 1024;
              LODWORD(v127) = v66;
              _os_log_impl(&dword_1830D4000, v65, OS_LOG_TYPE_INFO, "%{public}s Channel created with key: %{public}s and fd: %d", block, 0x1Cu);
            }
          }
          goto LABEL_156;
        }
        nw_channel_handle_defunct((uint64_t)v10);
      }
    }
    else
    {
      if (_nw_signposts_once != -1) {
        dispatch_once(&_nw_signposts_once, &__block_literal_global_73_88215);
      }
      if (_nw_signposts_enabled && kdebug_is_enabled()) {
        kdebug_trace();
      }
    }
    os_release(v10);
    unint64_t v60 = (uint64_t *)buf;
    goto LABEL_154;
  }
LABEL_224:
  __break(1u);
  return result;
}

uint64_t nw_path_evaluator_set_update_handler(void *a1, void *a2, void *a3)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  os_log_type_t v8 = v7;
  if (v5)
  {
    if (v7)
    {
      nw_allow_use_of_dispatch_internal();
      if (v6) {
        nw_path_evaluator_set_queue(v5, v6);
      }
      id v9 = v8;
      os_log_type_t v10 = v5;
      os_unfair_lock_lock(v5 + 24);
      char v11 = _Block_copy(v9);

      size_t v12 = *(void **)&v10[16]._os_unfair_lock_opaque;
      *(void *)&v10[16]._os_unfair_lock_opaque = v11;

      os_unfair_lock_unlock(v5 + 24);
      nw_path_evaluator_start(v10);
      uint64_t v13 = 1;
      goto LABEL_6;
    }
    uint64_t v19 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    id v31 = "nw_path_evaluator_set_update_handler";
    BOOL v16 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v28 = 0;
    if (__nwlog_fault(v16, &type, &v28))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        int v17 = __nwlog_obj();
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v17, type))
        {
          *(_DWORD *)int buf = 136446210;
          id v31 = "nw_path_evaluator_set_update_handler";
          _os_log_impl(&dword_1830D4000, v17, v20, "%{public}s called with null handler", buf, 0xCu);
        }
LABEL_38:

        goto LABEL_39;
      }
      if (!v28)
      {
        int v17 = __nwlog_obj();
        os_log_type_t v27 = type;
        if (os_log_type_enabled(v17, type))
        {
          *(_DWORD *)int buf = 136446210;
          id v31 = "nw_path_evaluator_set_update_handler";
          _os_log_impl(&dword_1830D4000, v17, v27, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_38;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v17 = __nwlog_obj();
      os_log_type_t v24 = type;
      BOOL v25 = os_log_type_enabled(v17, type);
      if (!backtrace_string)
      {
        if (v25)
        {
          *(_DWORD *)int buf = 136446210;
          id v31 = "nw_path_evaluator_set_update_handler";
          _os_log_impl(&dword_1830D4000, v17, v24, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
        goto LABEL_38;
      }
      if (v25)
      {
        *(_DWORD *)int buf = 136446466;
        id v31 = "nw_path_evaluator_set_update_handler";
        __int16 v32 = 2082;
        uint64_t v33 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v17, v24, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_26;
    }
  }
  else
  {
    uint64_t v15 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    id v31 = "nw_path_evaluator_set_update_handler";
    BOOL v16 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v28 = 0;
    if (__nwlog_fault(v16, &type, &v28))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        int v17 = __nwlog_obj();
        os_log_type_t v18 = type;
        if (os_log_type_enabled(v17, type))
        {
          *(_DWORD *)int buf = 136446210;
          id v31 = "nw_path_evaluator_set_update_handler";
          _os_log_impl(&dword_1830D4000, v17, v18, "%{public}s called with null evaluator", buf, 0xCu);
        }
        goto LABEL_38;
      }
      if (!v28)
      {
        int v17 = __nwlog_obj();
        os_log_type_t v26 = type;
        if (os_log_type_enabled(v17, type))
        {
          *(_DWORD *)int buf = 136446210;
          id v31 = "nw_path_evaluator_set_update_handler";
          _os_log_impl(&dword_1830D4000, v17, v26, "%{public}s called with null evaluator, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_38;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v17 = __nwlog_obj();
      os_log_type_t v22 = type;
      BOOL v23 = os_log_type_enabled(v17, type);
      if (!backtrace_string)
      {
        if (v23)
        {
          *(_DWORD *)int buf = 136446210;
          id v31 = "nw_path_evaluator_set_update_handler";
          _os_log_impl(&dword_1830D4000, v17, v22, "%{public}s called with null evaluator, no backtrace", buf, 0xCu);
        }
        goto LABEL_38;
      }
      if (v23)
      {
        *(_DWORD *)int buf = 136446466;
        id v31 = "nw_path_evaluator_set_update_handler";
        __int16 v32 = 2082;
        uint64_t v33 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v17, v22, "%{public}s called with null evaluator, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_26:

      free(backtrace_string);
    }
  }
LABEL_39:
  if (v16) {
    free(v16);
  }
  uint64_t v13 = 0;
LABEL_6:

  return v13;
}

void sub_18323197C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_path_evaluator_start(void *a1)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  nw_allow_use_of_dispatch_internal();
  if (v1)
  {
    os_unfair_lock_lock((os_unfair_lock_t)v1 + 24);
    if (*((void *)v1 + 6) || (nw_path_evaluator_evaluate((NWConcrete_nw_path_evaluator *)v1, 0) & 1) != 0)
    {
      if ((v1[107] & 0x30) != 0)
      {
LABEL_5:
        os_unfair_lock_unlock((os_unfair_lock_t)v1 + 24);
        goto LABEL_73;
      }
      v1[107] |= 0x10u;
      id v2 = nw_parameters_copy_context(*((void **)v1 + 1));
      nw_path_watch_necp_changes(v2);
      uint64_t globals_for_path = nw_context_get_globals_for_path(v2);
      id v4 = (os_unfair_lock_s *)(globals_for_path + 124);
      os_unfair_lock_lock((os_unfair_lock_t)(globals_for_path + 124));
      if (*(unsigned char *)(globals_for_path + 140))
      {
        uint64_t v5 = *(void *)(globals_for_path + 56);
        if (v5)
        {
          nw_queue_resume_source(v5);
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          id v6 = (id)gLogObj;
          if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)int buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_path_evaluator_start";
            _os_log_impl(&dword_1830D4000, v6, OS_LOG_TYPE_DEBUG, "%{public}s Resuming NECP source", buf, 0xCu);
          }
        }
      }
      if ((v1[107] & 1) == 0)
      {
        memset(buf, 0, 37);
        uuid_unparse((const unsigned __int8 *)v1 + 80, buf);
        uint64_t v7 = *(void *)(globals_for_path + 32);
        if (!v7)
        {
          os_log_type_t v8 = nw_dictionary_create();
          os_log_type_t v10 = *(void **)(globals_for_path + 32);
          id v9 = (uint64_t *)(globals_for_path + 32);
          uint64_t *v9 = (uint64_t)v8;

          uint64_t v7 = *v9;
        }
        nw_dictionary_set_value(v7, buf, v1);
LABEL_64:
        os_unfair_lock_unlock(v4);
        if ((v1[107] & 0x40) != 0)
        {
          uint64_t v34 = nw_parameters_copy_context(*((void **)v1 + 1));
          if (!v34 || (BOOL v35 = v34[31] == 4, v34, !v35))
          {
            if (__nwlog_path_log::onceToken != -1) {
              dispatch_once(&__nwlog_path_log::onceToken, &__block_literal_global_48_44893);
            }
            uint64_t v36 = (id)gpathLogObj;
            if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
            {
              logging_description = nw_endpoint_get_logging_description(*((void **)v1 + 2));
              uint64_t v38 = *((void *)v1 + 1);
              uint64_t v39 = *((void *)v1 + 6);
              *(_DWORD *)int buf = 136447490;
              *(void *)&uint8_t buf[4] = "nw_path_evaluator_start";
              *(_WORD *)&unsigned char buf[12] = 1042;
              *(_DWORD *)&void buf[14] = 16;
              *(_WORD *)&buf[18] = 2098;
              *(void *)&buf[20] = v1 + 80;
              *(_WORD *)&unsigned char buf[28] = 2082;
              *(void *)&buf[30] = logging_description;
              __int16 v52 = 2112;
              uint64_t v53 = v38;
              __int16 v54 = 2112;
              uint64_t v55 = v39;
              _os_log_impl(&dword_1830D4000, v36, OS_LOG_TYPE_DEFAULT, "%{public}s [%{public,uuid_t}.16P %{public}s %@]\n\tpath: %@", buf, 0x3Au);
            }
          }
        }
        os_unfair_lock_unlock((os_unfair_lock_t)v1 + 24);

        goto LABEL_73;
      }
      if (uuid_is_null((const unsigned __int8 *)globals_for_path))
      {
        *(_OWORD *)uint64_t globals_for_path = *((_OWORD *)v1 + 5);
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v15 = (id)gLogObj;
        if (!os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
        {
LABEL_61:

          uint64_t v30 = *(void *)(globals_for_path + 48);
          if (!v30)
          {
            BOOL v31 = nw_array_create();
            uint64_t v33 = *(void **)(globals_for_path + 48);
            __int16 v32 = (uint64_t *)(globals_for_path + 48);
            *__int16 v32 = v31;

            uint64_t v30 = *v32;
          }
          nw_array_append(v30, v1);
          goto LABEL_64;
        }
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_path_evaluator_start";
        BOOL v16 = "%{public}s Registering client as default path evaluator";
LABEL_60:
        _os_log_impl(&dword_1830D4000, v15, OS_LOG_TYPE_DEBUG, v16, buf, 0xCu);
        goto LABEL_61;
      }
      nw_path_shared_necp_fd(v2);
      if (!necp_client_action())
      {
LABEL_56:
        *((_OWORD *)v1 + 5) = *(_OWORD *)globals_for_path;
        uint64_t v29 = *((void *)v1 + 6);
        if (v29) {
          *(_OWORD *)(v29 + 120) = *(_OWORD *)globals_for_path;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v15 = (id)gLogObj;
        if (!os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_61;
        }
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_path_evaluator_start";
        BOOL v16 = "%{public}s Adding client to default path evaluator";
        goto LABEL_60;
      }
      int v20 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v21 = (id)gLogObj;
      *(_DWORD *)int buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_path_evaluator_start";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&void buf[14] = v20;
      os_log_type_t v22 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v49 = 0;
      if (__nwlog_fault(v22, &type, &v49))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          BOOL v23 = __nwlog_obj();
          os_log_type_t v24 = type;
          if (os_log_type_enabled(v23, type))
          {
            *(_DWORD *)int buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_path_evaluator_start";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&void buf[14] = v20;
            _os_log_impl(&dword_1830D4000, v23, v24, "%{public}s NECP_CLIENT_ACTION_REMOVE error %{darwin.errno}d", buf, 0x12u);
          }
        }
        else if (v49)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          BOOL v23 = __nwlog_obj();
          os_log_type_t v48 = type;
          BOOL v27 = os_log_type_enabled(v23, type);
          if (backtrace_string)
          {
            if (v27)
            {
              *(_DWORD *)int buf = 136446722;
              *(void *)&uint8_t buf[4] = "nw_path_evaluator_start";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&void buf[14] = v20;
              *(_WORD *)&buf[18] = 2082;
              *(void *)&buf[20] = backtrace_string;
              _os_log_impl(&dword_1830D4000, v23, v48, "%{public}s NECP_CLIENT_ACTION_REMOVE error %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x1Cu);
            }

            free(backtrace_string);
            goto LABEL_54;
          }
          if (v27)
          {
            *(_DWORD *)int buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_path_evaluator_start";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&void buf[14] = v20;
            _os_log_impl(&dword_1830D4000, v23, v48, "%{public}s NECP_CLIENT_ACTION_REMOVE error %{darwin.errno}d, no backtrace", buf, 0x12u);
          }
        }
        else
        {
          BOOL v23 = __nwlog_obj();
          os_log_type_t v28 = type;
          if (os_log_type_enabled(v23, type))
          {
            *(_DWORD *)int buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_path_evaluator_start";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&void buf[14] = v20;
            _os_log_impl(&dword_1830D4000, v23, v28, "%{public}s NECP_CLIENT_ACTION_REMOVE error %{darwin.errno}d, backtrace limit exceeded", buf, 0x12u);
          }
        }
      }
LABEL_54:
      if (v22) {
        free(v22);
      }
      goto LABEL_56;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v11 = (id)gLogObj;
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_path_evaluator_start";
    size_t v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v49 = 0;
    if (__nwlog_fault(v12, &type, &v49))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v13 = (id)gLogObj;
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_path_evaluator_start";
          _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s nw_path_evaluator_evaluate failed", buf, 0xCu);
        }
      }
      else if (v49)
      {
        int v17 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v13 = (id)gLogObj;
        os_log_type_t v18 = type;
        BOOL v19 = os_log_type_enabled(v13, type);
        if (v17)
        {
          if (v19)
          {
            *(_DWORD *)int buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_path_evaluator_start";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&void buf[14] = v17;
            _os_log_impl(&dword_1830D4000, v13, v18, "%{public}s nw_path_evaluator_evaluate failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v17);
          if (!v12) {
            goto LABEL_5;
          }
          goto LABEL_21;
        }
        if (v19)
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_path_evaluator_start";
          _os_log_impl(&dword_1830D4000, v13, v18, "%{public}s nw_path_evaluator_evaluate failed, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v13 = (id)gLogObj;
        os_log_type_t v25 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_path_evaluator_start";
          _os_log_impl(&dword_1830D4000, v13, v25, "%{public}s nw_path_evaluator_evaluate failed, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
    if (!v12) {
      goto LABEL_5;
    }
LABEL_21:
    free(v12);
    goto LABEL_5;
  }
  BOOL v40 = __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_path_evaluator_start";
  BOOL v41 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v49 = 0;
  if (__nwlog_fault(v41, &type, &v49))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v42 = __nwlog_obj();
      os_log_type_t v43 = type;
      if (os_log_type_enabled(v42, type))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_path_evaluator_start";
        _os_log_impl(&dword_1830D4000, v42, v43, "%{public}s called with null evaluator", buf, 0xCu);
      }
    }
    else if (v49)
    {
      int v44 = (char *)__nw_create_backtrace_string();
      os_log_type_t v42 = __nwlog_obj();
      os_log_type_t v45 = type;
      BOOL v46 = os_log_type_enabled(v42, type);
      if (v44)
      {
        if (v46)
        {
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_path_evaluator_start";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&void buf[14] = v44;
          _os_log_impl(&dword_1830D4000, v42, v45, "%{public}s called with null evaluator, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v44);
        goto LABEL_90;
      }
      if (v46)
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_path_evaluator_start";
        _os_log_impl(&dword_1830D4000, v42, v45, "%{public}s called with null evaluator, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v42 = __nwlog_obj();
      os_log_type_t v47 = type;
      if (os_log_type_enabled(v42, type))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_path_evaluator_start";
        _os_log_impl(&dword_1830D4000, v42, v47, "%{public}s called with null evaluator, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_90:
  if (v41) {
    free(v41);
  }
LABEL_73:
}

void sub_1832324FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_dictionary_set_value(uint64_t a1, const char *a2, void *a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v18 = "nw_dictionary_set_value";
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v15 = 0;
    if (!__nwlog_fault(v7, &type, &v15)) {
      goto LABEL_38;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (!os_log_type_enabled(v8, type)) {
        goto LABEL_38;
      }
      *(_DWORD *)int buf = 136446210;
      os_log_type_t v18 = "nw_dictionary_set_value";
      os_log_type_t v10 = "%{public}s called with null dictionary";
      goto LABEL_37;
    }
    if (!v15)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (!os_log_type_enabled(v8, type)) {
        goto LABEL_38;
      }
      *(_DWORD *)int buf = 136446210;
      os_log_type_t v18 = "nw_dictionary_set_value";
      os_log_type_t v10 = "%{public}s called with null dictionary, backtrace limit exceeded";
      goto LABEL_37;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v8 = __nwlog_obj();
    os_log_type_t v9 = type;
    BOOL v12 = os_log_type_enabled(v8, type);
    if (!backtrace_string)
    {
      if (!v12) {
        goto LABEL_38;
      }
      *(_DWORD *)int buf = 136446210;
      os_log_type_t v18 = "nw_dictionary_set_value";
      os_log_type_t v10 = "%{public}s called with null dictionary, no backtrace";
      goto LABEL_37;
    }
    if (v12)
    {
      *(_DWORD *)int buf = 136446466;
      os_log_type_t v18 = "nw_dictionary_set_value";
      __int16 v19 = 2082;
      int v20 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null dictionary, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(backtrace_string);
LABEL_38:
    if (!v7) {
      return;
    }
    goto LABEL_39;
  }
  if (!*(void *)(a1 + 16))
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v18 = "nw_dictionary_set_value";
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v15 = 0;
    if (!__nwlog_fault(v7, &type, &v15)) {
      goto LABEL_38;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (!os_log_type_enabled(v8, type)) {
        goto LABEL_38;
      }
      *(_DWORD *)int buf = 136446210;
      os_log_type_t v18 = "nw_dictionary_set_value";
      os_log_type_t v10 = "%{public}s called with null dictionary->xpc_object";
      goto LABEL_37;
    }
    if (!v15)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (!os_log_type_enabled(v8, type)) {
        goto LABEL_38;
      }
      *(_DWORD *)int buf = 136446210;
      os_log_type_t v18 = "nw_dictionary_set_value";
      os_log_type_t v10 = "%{public}s called with null dictionary->xpc_object, backtrace limit exceeded";
      goto LABEL_37;
    }
    uint64_t v13 = (char *)__nw_create_backtrace_string();
    os_log_type_t v8 = __nwlog_obj();
    os_log_type_t v9 = type;
    BOOL v14 = os_log_type_enabled(v8, type);
    if (v13)
    {
      if (v14)
      {
        *(_DWORD *)int buf = 136446466;
        os_log_type_t v18 = "nw_dictionary_set_value";
        __int16 v19 = 2082;
        int v20 = v13;
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null dictionary->xpc_object, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v13);
      if (!v7) {
        return;
      }
LABEL_39:
      free(v7);
      return;
    }
    if (v14)
    {
      *(_DWORD *)int buf = 136446210;
      os_log_type_t v18 = "nw_dictionary_set_value";
      os_log_type_t v10 = "%{public}s called with null dictionary->xpc_object, no backtrace";
LABEL_37:
      _os_log_impl(&dword_1830D4000, v8, v9, v10, buf, 0xCu);
      goto LABEL_38;
    }
    goto LABEL_38;
  }
  pointer = (void *)xpc_dictionary_get_pointer();
  if (a3)
  {
    os_retain(a3);
    xpc_dictionary_set_pointer();
    if (!pointer) {
      return;
    }
  }
  else
  {
    xpc_dictionary_set_value(*(xpc_object_t *)(a1 + 16), a2, 0);
    if (!pointer) {
      return;
    }
  }

  os_release(pointer);
}

void nw_channel_allocate_frames(void *a1)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  unint64_t v2 = a1[15];
  unint64_t v1 = a1[16];
  BOOL v3 = v1 > v2;
  unint64_t v4 = v1 - v2;
  if (v3)
  {
    uint64_t v5 = v4 >= 0x20 ? 32 : v4;
    if (v5)
    {
      while (1)
      {
        uint64_t v7 = nw_frame_create(32, 0, 0, 0, 0);
        if (!v7) {
          break;
        }
        *(_WORD *)(v7 + 204) |= 0x100u;
        *(void *)(v7 + 16) = 0;
        os_log_type_t v8 = (uint64_t *)a1[37];
        *(void *)(v7 + 24) = v8;
        *os_log_type_t v8 = v7;
        a1[37] = v7 + 16;
        ++a1[15];
        if (!--v5) {
          return;
        }
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      *(_DWORD *)int buf = 136446210;
      os_log_type_t v22 = "nw_channel_create_frame";
      os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v19 = 0;
      if (!__nwlog_fault(v9, &type, &v19)) {
        goto LABEL_23;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v10 = gLogObj;
        os_log_type_t v11 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
          goto LABEL_23;
        }
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v22 = "nw_channel_create_frame";
        BOOL v12 = "%{public}s nw_frame_create failed";
      }
      else
      {
        if (v19)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          BOOL v14 = gLogObj;
          os_log_type_t v15 = type;
          BOOL v16 = os_log_type_enabled((os_log_t)gLogObj, type);
          if (backtrace_string)
          {
            if (v16)
            {
              *(_DWORD *)int buf = 136446466;
              os_log_type_t v22 = "nw_channel_create_frame";
              __int16 v23 = 2082;
              os_log_type_t v24 = backtrace_string;
              _os_log_impl(&dword_1830D4000, v14, v15, "%{public}s nw_frame_create failed, dumping backtrace:%{public}s", buf, 0x16u);
            }
            free(backtrace_string);
            goto LABEL_23;
          }
          if (!v16)
          {
LABEL_23:
            if (v9) {
              free(v9);
            }
            return;
          }
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v22 = "nw_channel_create_frame";
          BOOL v12 = "%{public}s nw_frame_create failed, no backtrace";
          int v17 = v14;
          os_log_type_t v18 = v15;
LABEL_22:
          _os_log_impl(&dword_1830D4000, v17, v18, v12, buf, 0xCu);
          goto LABEL_23;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v10 = gLogObj;
        os_log_type_t v11 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
          goto LABEL_23;
        }
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v22 = "nw_channel_create_frame";
        BOOL v12 = "%{public}s nw_frame_create failed, backtrace limit exceeded";
      }
      int v17 = v10;
      os_log_type_t v18 = v11;
      goto LABEL_22;
    }
  }
}

void nw_ws_options_set_maximum_message_size(nw_protocol_options_t options, size_t maximum_message_size)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  BOOL v3 = options;
  if (nw_protocol_options_is_ws(v3))
  {
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_ws_options_set_maximum_message_size_block_invoke;
    v12[3] = &__block_descriptor_40_e9_B16__0_v8l;
    void v12[4] = maximum_message_size;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }
  unint64_t v4 = __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  BOOL v16 = "nw_ws_options_set_maximum_message_size";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v16 = "nw_ws_options_set_maximum_message_size";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_options_is_ws(options)", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)int buf = 136446466;
          BOOL v16 = "nw_ws_options_set_maximum_message_size";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_ws(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v16 = "nw_ws_options_set_maximum_message_size";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_ws(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v16 = "nw_ws_options_set_maximum_message_size";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_options_is_ws(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
LABEL_3:
}

void sub_183233498(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_path_evaluator_call_update_handler(void *a1)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  unint64_t v1 = a1;
  unint64_t v2 = v1;
  if (v1)
  {
    os_unfair_lock_lock(v1 + 24);
    id v3 = *(id *)&v2[12]._os_unfair_lock_opaque;
    if (v3 && (unint64_t v4 = *(const void **)&v2[16]._os_unfair_lock_opaque) != 0 && *(void *)&v2[14]._os_unfair_lock_opaque)
    {
      uint64_t v5 = _Block_copy(v4);
      if (__nwlog_path_log::onceToken != -1) {
        dispatch_once(&__nwlog_path_log::onceToken, &__block_literal_global_48_44893);
      }
      id v6 = (id)gpathLogObj;
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)int buf = 136446722;
        os_log_type_t v26 = "nw_path_evaluator_call_update_handler";
        __int16 v27 = 1042;
        *(_DWORD *)os_log_type_t v28 = 16;
        *(_WORD *)&v28[4] = 2098;
        *(void *)&v28[6] = v2 + 20;
        _os_log_impl(&dword_1830D4000, v6, OS_LOG_TYPE_INFO, "%{public}s [%{public,uuid_t}.16P] scheduling update", buf, 0x1Cu);
      }

      os_log_type_t v7 = *(NSObject **)&v2[14]._os_unfair_lock_opaque;
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3221225472;
      block[2] = __nw_path_evaluator_call_update_handler_block_invoke;
      block[3] = &unk_1E5248030;
      int v20 = v2;
      id v22 = v5;
      id v21 = v3;
      os_log_type_t v8 = v5;
      dispatch_async(v7, block);
    }
    else
    {
      if (__nwlog_path_log::onceToken != -1) {
        dispatch_once(&__nwlog_path_log::onceToken, &__block_literal_global_48_44893);
      }
      os_log_type_t v8 = (id)gpathLogObj;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        os_log_type_t v9 = _Block_copy(*(const void **)&v2[16]._os_unfair_lock_opaque);
        uint64_t v10 = *(void *)&v2[14]._os_unfair_lock_opaque;
        *(_DWORD *)int buf = 136447490;
        os_log_type_t v26 = "nw_path_evaluator_call_update_handler";
        __int16 v27 = 1042;
        *(_DWORD *)os_log_type_t v28 = 16;
        *(_WORD *)&v28[4] = 2098;
        *(void *)&v28[6] = v2 + 20;
        __int16 v29 = 2048;
        id v30 = v3;
        __int16 v31 = 2048;
        __int16 v32 = v9;
        __int16 v33 = 2048;
        uint64_t v34 = v10;
        _os_log_impl(&dword_1830D4000, v8, OS_LOG_TYPE_ERROR, "%{public}s [%{public,uuid_t}.16P] not delivering update, path=%p, update_block=%p, client_queue=%p", buf, 0x3Au);
      }
    }

    os_unfair_lock_unlock(v2 + 24);
    goto LABEL_15;
  }
  os_log_type_t v11 = __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  os_log_type_t v26 = "nw_path_evaluator_call_update_handler";
  BOOL v12 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v23 = 0;
  if (__nwlog_fault(v12, &type, &v23))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v26 = "nw_path_evaluator_call_update_handler";
        _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s called with null evaluator", buf, 0xCu);
      }
    }
    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      char v13 = __nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)int buf = 136446466;
          os_log_type_t v26 = "nw_path_evaluator_call_update_handler";
          __int16 v27 = 2082;
          *(void *)os_log_type_t v28 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v13, v16, "%{public}s called with null evaluator, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_32;
      }
      if (v17)
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v26 = "nw_path_evaluator_call_update_handler";
        _os_log_impl(&dword_1830D4000, v13, v16, "%{public}s called with null evaluator, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      char v13 = __nwlog_obj();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v26 = "nw_path_evaluator_call_update_handler";
        _os_log_impl(&dword_1830D4000, v13, v18, "%{public}s called with null evaluator, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_32:
  if (v12) {
    free(v12);
  }
LABEL_15:
}

void nw_parameters_set_protocol_value(void *a1, const char *a2, void *a3)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = a3;
  if (v5)
  {
    os_log_type_t v7 = (id *)v5;
    os_log_type_t v8 = v7 + 5;
    id v9 = v7[5];

    if (!v9 || object_getClass(v9) != (Class)MEMORY[0x1E4F14590])
    {
      xpc_object_t v10 = xpc_dictionary_create(0, 0, 0);

      id v9 = v10;
    }
    xpc_dictionary_set_value(v9, a2, v6);
    os_log_type_t v11 = v7;
    id v12 = v9;
    objc_storeStrong(v8, v9);

    goto LABEL_6;
  }
  char v13 = __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  os_log_type_t v24 = "nw_parameters_set_protocol_value";
  os_log_type_t v14 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v21 = 0;
  if (__nwlog_fault(v14, &type, &v21))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v15 = __nwlog_obj();
      os_log_type_t v16 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v24 = "nw_parameters_set_protocol_value";
        _os_log_impl(&dword_1830D4000, v15, v16, "%{public}s called with null protocol_parameters", buf, 0xCu);
      }
    }
    else if (v21)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v15 = __nwlog_obj();
      os_log_type_t v18 = type;
      BOOL v19 = os_log_type_enabled(v15, type);
      if (backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)int buf = 136446466;
          os_log_type_t v24 = "nw_parameters_set_protocol_value";
          __int16 v25 = 2082;
          os_log_type_t v26 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v15, v18, "%{public}s called with null protocol_parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v19)
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v24 = "nw_parameters_set_protocol_value";
        _os_log_impl(&dword_1830D4000, v15, v18, "%{public}s called with null protocol_parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v15 = __nwlog_obj();
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v24 = "nw_parameters_set_protocol_value";
        _os_log_impl(&dword_1830D4000, v15, v20, "%{public}s called with null protocol_parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_23:
  if (v14) {
    free(v14);
  }
LABEL_6:
}

void sub_183233CAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_endpoint_flow_attach_protocols(NWConcrete_nw_endpoint_handler *a1, nw_protocol *a2, nw_protocol *a3)
{
  uint64_t v379 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = a1;
  v272 = v4;
  if (!v4)
  {
    os_log_type_t v96 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_endpoint_handler_get_mode";
    size_t v97 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    v377[0] = 0;
    if (__nwlog_fault(v97, type, v377))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        size_t v98 = __nwlog_obj();
        os_log_type_t v99 = type[0];
        if (os_log_type_enabled(v98, type[0]))
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_1830D4000, v98, v99, "%{public}s called with null handler", buf, 0xCu);
        }
      }
      else if (v377[0])
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        size_t v98 = __nwlog_obj();
        os_log_type_t v101 = type[0];
        BOOL v102 = os_log_type_enabled(v98, type[0]);
        if (backtrace_string)
        {
          if (v102)
          {
            *(_DWORD *)int buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_endpoint_handler_get_mode";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&void buf[14] = backtrace_string;
            _os_log_impl(&dword_1830D4000, v98, v101, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_171;
        }
        if (v102)
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_1830D4000, v98, v101, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        size_t v98 = __nwlog_obj();
        os_log_type_t v124 = type[0];
        if (os_log_type_enabled(v98, type[0]))
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_1830D4000, v98, v124, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_171:
    if (v97) {
      free(v97);
    }
    unsigned int mode = 0;
LABEL_174:
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v125 = (id)gLogObj;
    if (mode > 5) {
      os_log_type_t v126 = "unknown-mode";
    }
    else {
      os_log_type_t v126 = off_1E523FB08[mode];
    }
    *(_DWORD *)int buf = 136446722;
    *(void *)&uint8_t buf[4] = "nw_endpoint_flow_attach_protocols";
    *(_WORD *)&unsigned char buf[12] = 2082;
    *(void *)&void buf[14] = v126;
    *(_WORD *)&buf[22] = 2082;
    nw_endpoint_t v367 = "flow";
    os_log_type_t v127 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    v377[0] = 0;
    if (__nwlog_fault(v127, type, v377))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        long long v128 = (id)gLogObj;
        os_log_type_t v129 = type[0];
        if (os_log_type_enabled(v128, type[0]))
        {
          if (mode > 5) {
            uint64_t v130 = "unknown-mode";
          }
          else {
            uint64_t v130 = off_1E523FB08[mode];
          }
          *(_DWORD *)int buf = 136446722;
          *(void *)&uint8_t buf[4] = "nw_endpoint_flow_attach_protocols";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&void buf[14] = v130;
          *(_WORD *)&buf[22] = 2082;
          nw_endpoint_t v367 = "flow";
          _os_log_impl(&dword_1830D4000, v128, v129, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
        }
      }
      else if (v377[0])
      {
        BOOL v131 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        long long v128 = (id)gLogObj;
        os_log_type_t v132 = type[0];
        BOOL v133 = os_log_type_enabled(v128, type[0]);
        if (v131)
        {
          if (v133)
          {
            if (mode > 5) {
              uint64_t v134 = "unknown-mode";
            }
            else {
              uint64_t v134 = off_1E523FB08[mode];
            }
            *(_DWORD *)int buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_endpoint_flow_attach_protocols";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&void buf[14] = v134;
            *(_WORD *)&buf[22] = 2082;
            nw_endpoint_t v367 = "flow";
            *(_WORD *)v368 = 2082;
            *(void *)&v368[2] = v131;
            _os_log_impl(&dword_1830D4000, v128, v132, "%{public}s Handler is in mode %{public}s, expected %{public}s, dumping backtrace:%{public}s", buf, 0x2Au);
          }

          free(v131);
          if (!v127) {
            goto LABEL_208;
          }
          goto LABEL_207;
        }
        if (v133)
        {
          if (mode > 5) {
            os_log_type_t v137 = "unknown-mode";
          }
          else {
            os_log_type_t v137 = off_1E523FB08[mode];
          }
          *(_DWORD *)int buf = 136446722;
          *(void *)&uint8_t buf[4] = "nw_endpoint_flow_attach_protocols";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&void buf[14] = v137;
          *(_WORD *)&buf[22] = 2082;
          nw_endpoint_t v367 = "flow";
          _os_log_impl(&dword_1830D4000, v128, v132, "%{public}s Handler is in mode %{public}s, expected %{public}s, no backtrace", buf, 0x20u);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        long long v128 = (id)gLogObj;
        os_log_type_t v135 = type[0];
        if (os_log_type_enabled(v128, type[0]))
        {
          if (mode > 5) {
            nw_endpoint_t v136 = "unknown-mode";
          }
          else {
            nw_endpoint_t v136 = off_1E523FB08[mode];
          }
          *(_DWORD *)int buf = 136446722;
          *(void *)&uint8_t buf[4] = "nw_endpoint_flow_attach_protocols";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&void buf[14] = v136;
          *(_WORD *)&buf[22] = 2082;
          nw_endpoint_t v367 = "flow";
          _os_log_impl(&dword_1830D4000, v128, v135, "%{public}s Handler is in mode %{public}s, expected %{public}s, backtrace limit exceeded", buf, 0x20u);
        }
      }
    }
    if (!v127)
    {
LABEL_208:
      LOBYTE(v64) = 0;
      goto LABEL_209;
    }
LABEL_207:
    free(v127);
    goto LABEL_208;
  }
  unsigned int mode = v4->mode;
  id v6 = v4;

  if (mode != 2) {
    goto LABEL_174;
  }
  nw_endpoint_t v252 = a2;
  os_log_type_t v7 = v6;
  char v8 = *((unsigned char *)v7 + 268);

  char v261 = v7;
  if ((v8 & 0x20) == 0)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
    }
    id v9 = (id)gconnectionLogObj;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      xpc_object_t v10 = v7;

      os_log_type_t v11 = v10;
      char v12 = *((unsigned char *)v7 + 268);

      if (v12) {
        char v13 = "dry-run ";
      }
      else {
        char v13 = "";
      }
      nw_endpoint_t v14 = nw_endpoint_handler_copy_endpoint(v11);
      logging_description = nw_endpoint_get_logging_description(v14);
      os_log_type_t v16 = v10 + 168;
      BOOL v17 = v11;
      os_log_type_t v18 = v17;
      uint64_t v19 = v17[30];
      if (v19 > 5) {
        os_log_type_t v20 = "unknown-state";
      }
      else {
        os_log_type_t v20 = off_1E523FB38[v19];
      }

      char v21 = v18;
      id v22 = v21;
      char v23 = "path";
      switch(v272->mode)
      {
        case 0:
          break;
        case 1:
          char v23 = "resolver";
          break;
        case 2:
          char v23 = nw_endpoint_flow_mode_string(v21[31]);
          break;
        case 3:
          char v23 = "proxy";
          break;
        case 4:
          char v23 = "fallback";
          break;
        case 5:
          char v23 = "transform";
          break;
        default:
          char v23 = "unknown-mode";
          break;
      }

      os_log_type_t v24 = v22;
      os_unfair_lock_lock((os_unfair_lock_t)v24 + 28);
      id v25 = v24[8];
      os_unfair_lock_unlock((os_unfair_lock_t)v24 + 28);

      *(_DWORD *)int buf = 136447746;
      *(void *)&uint8_t buf[4] = "nw_endpoint_flow_attach_protocols";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&void buf[14] = v16;
      *(_WORD *)&buf[22] = 2082;
      nw_endpoint_t v367 = v13;
      *(_WORD *)v368 = 2082;
      *(void *)&v368[2] = logging_description;
      __int16 v369 = 2082;
      v370 = v20;
      __int16 v371 = 2082;
      v372 = v23;
      __int16 v373 = 2114;
      id v374 = v25;
      _os_log_impl(&dword_1830D4000, v9, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] ", buf, 0x48u);
    }
    os_log_type_t v7 = v261;
  }
  v271 = nw_endpoint_handler_copy_flow(v7);
  os_log_type_t v26 = v7;
  id v27 = v26[3];

  *(void *)os_log_type_t type = 0;
  v361 = type;
  uint64_t v362 = 0x3032000000;
  v363 = __Block_byref_object_copy__81752;
  id v364 = __Block_byref_object_dispose__81753;
  id v249 = v27;
  id v365 = v249;
  os_log_type_t v28 = v26;
  id v250 = v28[4];

  __int16 v29 = v28;
  uint64_t v30 = v272->mode;

  if (v30 == 2)
  {
    __int16 v31 = nw_endpoint_handler_copy_flow(v29);
    if ((*((unsigned char *)v31 + 33) & 0x40) != 0)
    {
      uint64_t v38 = v29;
      os_unfair_lock_lock(&v38->lock);
      uint64_t v39 = v38->current_path;
      os_unfair_lock_unlock(&v38->lock);

      int nexus_protocol_level = nw_path_get_nexus_protocol_level(v39);
    }
    else
    {
      int nexus_protocol_level = 4;
    }

    goto LABEL_62;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v32 = (id)gLogObj;
  if (v30 > 5) {
    __int16 v33 = "unknown-mode";
  }
  else {
    __int16 v33 = off_1E523FB08[v30];
  }
  *(_DWORD *)int buf = 136446722;
  *(void *)&uint8_t buf[4] = "nw_endpoint_handler_get_protocol_level";
  *(_WORD *)&unsigned char buf[12] = 2082;
  *(void *)&void buf[14] = v33;
  *(_WORD *)&buf[22] = 2082;
  nw_endpoint_t v367 = "flow";
  uint64_t v34 = (char *)_os_log_send_and_compose_impl();

  v377[0] = 16;
  LOBYTE(v356) = 0;
  if (__nwlog_fault(v34, v377, &v356))
  {
    if (v377[0] == 17)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v35 = (id)gLogObj;
      os_log_type_t v36 = v377[0];
      if (os_log_type_enabled(v35, (os_log_type_t)v377[0]))
      {
        if (v30 > 5) {
          uint64_t v37 = "unknown-mode";
        }
        else {
          uint64_t v37 = off_1E523FB08[v30];
        }
        *(_DWORD *)int buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_endpoint_handler_get_protocol_level";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&void buf[14] = v37;
        *(_WORD *)&buf[22] = 2082;
        nw_endpoint_t v367 = "flow";
        _os_log_impl(&dword_1830D4000, v35, v36, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
      }
    }
    else if ((_BYTE)v356)
    {
      BOOL v40 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v35 = (id)gLogObj;
      os_log_type_t v41 = v377[0];
      BOOL v42 = os_log_type_enabled(v35, (os_log_type_t)v377[0]);
      if (v40)
      {
        if (v42)
        {
          if (v30 > 5) {
            os_log_type_t v43 = "unknown-mode";
          }
          else {
            os_log_type_t v43 = off_1E523FB08[v30];
          }
          *(_DWORD *)int buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_endpoint_handler_get_protocol_level";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&void buf[14] = v43;
          *(_WORD *)&buf[22] = 2082;
          nw_endpoint_t v367 = "flow";
          *(_WORD *)v368 = 2082;
          *(void *)&v368[2] = v40;
          _os_log_impl(&dword_1830D4000, v35, v41, "%{public}s Handler is in mode %{public}s, expected %{public}s, dumping backtrace:%{public}s", buf, 0x2Au);
        }

        free(v40);
        if (!v34) {
          goto LABEL_61;
        }
        goto LABEL_60;
      }
      if (v42)
      {
        if (v30 > 5) {
          BOOL v46 = "unknown-mode";
        }
        else {
          BOOL v46 = off_1E523FB08[v30];
        }
        *(_DWORD *)int buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_endpoint_handler_get_protocol_level";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&void buf[14] = v46;
        *(_WORD *)&buf[22] = 2082;
        nw_endpoint_t v367 = "flow";
        _os_log_impl(&dword_1830D4000, v35, v41, "%{public}s Handler is in mode %{public}s, expected %{public}s, no backtrace", buf, 0x20u);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v35 = (id)gLogObj;
      os_log_type_t v44 = v377[0];
      if (os_log_type_enabled(v35, (os_log_type_t)v377[0]))
      {
        if (v30 > 5) {
          os_log_type_t v45 = "unknown-mode";
        }
        else {
          os_log_type_t v45 = off_1E523FB08[v30];
        }
        *(_DWORD *)int buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_endpoint_handler_get_protocol_level";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&void buf[14] = v45;
        *(_WORD *)&buf[22] = 2082;
        nw_endpoint_t v367 = "flow";
        _os_log_impl(&dword_1830D4000, v35, v44, "%{public}s Handler is in mode %{public}s, expected %{public}s, backtrace limit exceeded", buf, 0x20u);
      }
    }
  }
  if (v34) {
LABEL_60:
  }
    free(v34);
LABEL_61:
  int nexus_protocol_level = 0;
LABEL_62:

  uint64_t v356 = 0;
  id v357 = &v356;
  uint64_t v358 = 0x2020000000;
  v359 = (char *)v271 + 376;
  char v248 = nw_parameters_get_upper_transport_protocol_options(v250);
  __int16 v251 = (NWConcrete_nw_path *)nw_endpoint_flow_copy_path(v29);
  if (nw_endpoint_flow_should_add_filter(v250, v251))
  {
    double Helper_x8__ne_filter_protocol_identifier = gotLoadHelper_x8__ne_filter_protocol_identifier(v47);
    if (*(void *)(v49 + 2112)) {
      inited = (long long *)ne_filter_protocol_identifier_delayInitStub(Helper_x8__ne_filter_protocol_identifier);
    }
    else {
      inited = 0;
    }
    BOOL v51 = inited != 0;
  }
  else
  {
    BOOL v51 = 0;
    inited = 0;
  }
  uint64_t v352 = 0;
  nw_endpoint_t v353 = &v352;
  uint64_t v354 = 0x2020000000;
  char v355 = 0;
  __int16 v52 = (id *)v250;
  uint64_t v53 = v52;
  if (v52)
  {
    __int16 v54 = v52[19];
    if (v54)
    {
      uint64_t v55 = v54;
      *(void *)v377 = 0;
      *(void *)&v377[8] = v377;
      *(void *)&v377[16] = 0x2020000000;
      LOBYTE(v378) = 0;
      *(void *)int buf = MEMORY[0x1E4F143A8];
      *(void *)&buf[8] = 3221225472;
      *(void *)&buf[16] = __nw_parameters_has_proxy_protocol_in_stack_block_invoke;
      nw_endpoint_t v367 = (const char *)&unk_1E5240D88;
      *(void *)v368 = v377;
      nw_protocol_stack_iterate_application_protocols(v54, buf);
      BOOL v56 = *(unsigned char *)(*(void *)&v377[8] + 24) == 0;
      _Block_object_dispose(v377, 8);

      if (!v56)
      {
        BOOL v57 = nw_endpoint_copy_proxy_original_endpoint(*((void **)v361 + 5));
        if (v57)
        {
          objc_storeStrong((id *)v271 + 121, (id)v57);
          objc_storeStrong((id *)v361 + 5, (id)v57);
        }
      }
      goto LABEL_74;
    }
    uint64_t v107 = __nwlog_obj();
    *(_DWORD *)v377 = 136446210;
    *(void *)&v377[4] = "nw_parameters_has_proxy_protocol_in_stack";
    BOOL v108 = (char *)_os_log_send_and_compose_impl();

    v348[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v346[0]) = 0;
    if (!__nwlog_fault(v108, v348, v346)) {
      goto LABEL_232;
    }
    if (v348[0] == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v109 = __nwlog_obj();
      os_log_type_t v110 = v348[0];
      if (os_log_type_enabled(v109, v348[0]))
      {
        *(_DWORD *)v377 = 136446210;
        *(void *)&v377[4] = "nw_parameters_has_proxy_protocol_in_stack";
        _os_log_impl(&dword_1830D4000, v109, v110, "%{public}s called with null stack", v377, 0xCu);
      }
    }
    else if (LOBYTE(v346[0]))
    {
      uint64_t v121 = (char *)__nw_create_backtrace_string();
      os_log_type_t v109 = __nwlog_obj();
      os_log_type_t v122 = v348[0];
      BOOL v123 = os_log_type_enabled(v109, v348[0]);
      if (v121)
      {
        if (v123)
        {
          *(_DWORD *)v377 = 136446466;
          *(void *)&v377[4] = "nw_parameters_has_proxy_protocol_in_stack";
          *(_WORD *)&v377[12] = 2082;
          *(void *)&v377[14] = v121;
          _os_log_impl(&dword_1830D4000, v109, v122, "%{public}s called with null stack, dumping backtrace:%{public}s", v377, 0x16u);
        }

        free(v121);
        goto LABEL_232;
      }
      if (v123)
      {
        *(_DWORD *)v377 = 136446210;
        *(void *)&v377[4] = "nw_parameters_has_proxy_protocol_in_stack";
        _os_log_impl(&dword_1830D4000, v109, v122, "%{public}s called with null stack, no backtrace", v377, 0xCu);
      }
    }
    else
    {
      os_log_type_t v109 = __nwlog_obj();
      os_log_type_t v146 = v348[0];
      if (os_log_type_enabled(v109, v348[0]))
      {
        *(_DWORD *)v377 = 136446210;
        *(void *)&v377[4] = "nw_parameters_has_proxy_protocol_in_stack";
        _os_log_impl(&dword_1830D4000, v109, v146, "%{public}s called with null stack, backtrace limit exceeded", v377, 0xCu);
      }
    }

LABEL_232:
    if (v108) {
      free(v108);
    }

    goto LABEL_74;
  }
  os_log_type_t v103 = __nwlog_obj();
  *(_DWORD *)v377 = 136446210;
  *(void *)&v377[4] = "nw_parameters_has_proxy_protocol_in_stack";
  os_log_type_t v104 = (char *)_os_log_send_and_compose_impl();

  v348[0] = OS_LOG_TYPE_ERROR;
  LOBYTE(v346[0]) = 0;
  if (__nwlog_fault(v104, v348, v346))
  {
    if (v348[0] == OS_LOG_TYPE_FAULT)
    {
      char v105 = __nwlog_obj();
      os_log_type_t v106 = v348[0];
      if (os_log_type_enabled(v105, v348[0]))
      {
        *(_DWORD *)v377 = 136446210;
        *(void *)&v377[4] = "nw_parameters_has_proxy_protocol_in_stack";
        _os_log_impl(&dword_1830D4000, v105, v106, "%{public}s called with null parameters", v377, 0xCu);
      }
    }
    else if (LOBYTE(v346[0]))
    {
      BOOL v118 = (char *)__nw_create_backtrace_string();
      char v105 = __nwlog_obj();
      os_log_type_t v119 = v348[0];
      BOOL v120 = os_log_type_enabled(v105, v348[0]);
      if (v118)
      {
        if (v120)
        {
          *(_DWORD *)v377 = 136446466;
          *(void *)&v377[4] = "nw_parameters_has_proxy_protocol_in_stack";
          *(_WORD *)&v377[12] = 2082;
          *(void *)&v377[14] = v118;
          _os_log_impl(&dword_1830D4000, v105, v119, "%{public}s called with null parameters, dumping backtrace:%{public}s", v377, 0x16u);
        }

        free(v118);
        goto LABEL_226;
      }
      if (v120)
      {
        *(_DWORD *)v377 = 136446210;
        *(void *)&v377[4] = "nw_parameters_has_proxy_protocol_in_stack";
        _os_log_impl(&dword_1830D4000, v105, v119, "%{public}s called with null parameters, no backtrace", v377, 0xCu);
      }
    }
    else
    {
      char v105 = __nwlog_obj();
      os_log_type_t v145 = v348[0];
      if (os_log_type_enabled(v105, v348[0]))
      {
        *(_DWORD *)v377 = 136446210;
        *(void *)&v377[4] = "nw_parameters_has_proxy_protocol_in_stack";
        _os_log_impl(&dword_1830D4000, v105, v145, "%{public}s called with null parameters, backtrace limit exceeded", v377, 0xCu);
      }
    }
  }
LABEL_226:
  if (v104) {
    free(v104);
  }
LABEL_74:
  *((unsigned char *)v271 + 33) &= ~1u;
  *(void *)v377 = 0;
  *(void *)&v377[8] = v377;
  *(void *)&v377[16] = 0x2020000000;
  id v378 = 0;
  if ((nw_protocol *)v357[3] == v252) {
    id v58 = 0;
  }
  else {
    id v58 = v252;
  }
  id v378 = v58;
  *(void *)v348 = 0;
  v349 = v348;
  uint64_t v350 = 0x2020000000;
  char v351 = 0;
  v346[0] = 0;
  v346[1] = v346;
  v346[2] = 0x2020000000;
  char v347 = 0;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3221225472;
  aBlock[2] = ___ZL33nw_endpoint_flow_attach_protocolsP30NWConcrete_nw_endpoint_handlerP11nw_protocolS2__block_invoke;
  aBlock[3] = &unk_1E524A388;
  os_log_type_t v59 = v29;
  nw_endpoint_t v332 = v59;
  uint64_t v337 = v377;
  v338 = &v356;
  nw_endpoint_t v339 = type;
  BOOL v345 = v51;
  v340 = &v352;
  id v343 = inited;
  unint64_t v60 = v53;
  uint64_t v333 = v60;
  __int16 v341 = v348;
  id v61 = v249;
  id v334 = v61;
  id v342 = v346;
  BOOL v62 = v271;
  uint64_t v335 = v62;
  unsigned int v344 = a3;
  id v247 = v248;
  id v336 = v247;
  BOOL v63 = _Block_copy(aBlock);
  nw_parameters_internal_iterate_protocol_stack(v60, 5, 0, v63);
  if (*((unsigned char *)v349 + 24)) {
    goto LABEL_78;
  }
  if (*((unsigned char *)v271 + 33)) {
    goto LABEL_106;
  }
  if ((*((unsigned char *)v62 + 32) & 2) == 0)
  {
    if (v252
      && (identifier = v252->identifier, identifier->level == 4)
      && (identifier ? (name = v252->identifier->name) : (name = "invalid"), strcmp(name, "endpoint_flow")))
    {
      if ((nw_endpoint_handler_get_logging_disabled(v59) & 1) == 0)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        uint32_t v67 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v67, OS_LOG_TYPE_DEBUG))
        {
          id_string = nw_endpoint_handler_get_id_string(v59);
          v238 = v63;
          __int16 v253 = nw_endpoint_handler_dry_run_string(v59);
          nw_endpoint_t v263 = nw_endpoint_handler_copy_endpoint(v59);
          nw_endpoint_t v69 = nw_endpoint_get_logging_description(v263);
          id v70 = nw_endpoint_handler_state_string(v59);
          id v71 = nw_endpoint_handler_mode_string(v59);
          id v72 = nw_endpoint_handler_copy_current_path(v59);
          *(_DWORD *)int buf = 136447746;
          *(void *)&uint8_t buf[4] = "nw_endpoint_flow_attach_protocols";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&void buf[14] = id_string;
          *(_WORD *)&buf[22] = 2082;
          nw_endpoint_t v367 = v253;
          *(_WORD *)v368 = 2082;
          *(void *)&v368[2] = v69;
          __int16 v369 = 2082;
          v370 = v70;
          __int16 v371 = 2082;
          v372 = v71;
          __int16 v373 = 2114;
          id v374 = v72;
          _os_log_impl(&dword_1830D4000, v67, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] attach protocol is at application level, skip joining the first non-persistent protocol", buf, 0x48u);

          BOOL v63 = v238;
        }
      }
    }
    else
    {
      v321[0] = MEMORY[0x1E4F143A8];
      v321[1] = 3221225472;
      void v321[2] = ___ZL33nw_endpoint_flow_attach_protocolsP30NWConcrete_nw_endpoint_handlerP11nw_protocolS2__block_invoke_222;
      v321[3] = &unk_1E524A3B0;
      uint64_t v330 = a3;
      unsigned int v77 = v59;
      nw_endpoint_t v322 = v77;
      id v326 = v346;
      id v323 = v61;
      id v327 = type;
      v324 = v60;
      os_log_type_t v328 = &v356;
      os_log_type_t v329 = v348;
      BOOL v78 = v62;
      v325 = v78;
      nw_parameters_internal_iterate_protocol_stack(v324, 4, 0, v321);
      if ((*((unsigned char *)v271 + 33) & 1) == 0)
      {
        if ((nw_endpoint_handler_get_logging_disabled(v77) & 1) == 0)
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          int v79 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v79, OS_LOG_TYPE_DEBUG))
          {
            BOOL v80 = nw_endpoint_handler_get_id_string(v77);
            char v239 = v63;
            nw_endpoint_t v254 = nw_endpoint_handler_dry_run_string(v77);
            nw_endpoint_t v264 = nw_endpoint_handler_copy_endpoint(v77);
            int v245 = nw_endpoint_get_logging_description(v264);
            uint64_t v81 = nw_endpoint_handler_state_string(v77);
            os_log_type_t v82 = nw_endpoint_handler_mode_string(v77);
            id v83 = nw_endpoint_handler_copy_current_path(v77);
            *(_DWORD *)int buf = 136447746;
            *(void *)&uint8_t buf[4] = "nw_endpoint_flow_attach_protocols";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&void buf[14] = v80;
            *(_WORD *)&buf[22] = 2082;
            nw_endpoint_t v367 = v254;
            *(_WORD *)v368 = 2082;
            *(void *)&v368[2] = v245;
            __int16 v369 = 2082;
            v370 = v81;
            __int16 v371 = 2082;
            v372 = v82;
            __int16 v373 = 2114;
            id v374 = v83;
            _os_log_impl(&dword_1830D4000, v79, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] stopping after adding persistent application protocols", buf, 0x48u);

            BOOL v63 = v239;
          }
        }
        *((void *)v78 + 94) = v357[3];
      }
    }
    goto LABEL_106;
  }
  nw_parameters_internal_iterate_protocol_stack(v60, 4, 0, v63);
  if (!*((unsigned char *)v349 + 24))
  {
    if ((*((unsigned char *)v271 + 33) & 1) == 0)
    {
      uint64_t v317 = 0;
      int v318 = &v317;
      uint64_t v319 = 0x2020000000;
      char v320 = 0;
      v307[0] = MEMORY[0x1E4F143A8];
      v307[1] = 3221225472;
      v307[2] = ___ZL33nw_endpoint_flow_attach_protocolsP30NWConcrete_nw_endpoint_handlerP11nw_protocolS2__block_invoke_223;
      v307[3] = &unk_1E524A3B0;
      BOOL v316 = a3;
      uint32_t v73 = v59;
      v308 = v73;
      os_log_type_t v312 = v346;
      id v74 = v61;
      id v309 = v74;
      BOOL v313 = type;
      nw_endpoint_t v75 = v60;
      id v310 = v75;
      v314 = &v356;
      os_log_type_t v315 = &v317;
      BOOL v76 = v62;
      v311 = v76;
      nw_parameters_internal_iterate_protocol_stack(v75, 3, 1, v307);
      if (*((unsigned char *)v318 + 24))
      {
        LOBYTE(v64) = 0;
LABEL_271:

        _Block_object_dispose(&v317, 8);
        goto LABEL_107;
      }
      if ((*((unsigned char *)v271 + 33) & 1) == 0)
      {
        __int16 v255 = (NWConcrete_nw_path_flow_registration **)v76;
        if (v51 && !*((unsigned char *)v353 + 24) && !nw_parameters_has_proxy_protocol_in_effective_config(v75))
        {
          v240 = v63;
          uint64_t v84 = nw_endpoint_flow_add_one_protocol(v73, inited, 0, 0, *((void **)v361 + 5), v75, v357[3]);
          if (!v84)
          {
            if ((nw_endpoint_handler_get_logging_disabled(v73) & 1) == 0)
            {
              if (__nwlog_connection_log::onceToken != -1) {
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
              }
              nw_endpoint_t v139 = (id)gconnectionLogObj;
              if (os_log_type_enabled(v139, OS_LOG_TYPE_ERROR))
              {
                nw_endpoint_t v265 = nw_endpoint_handler_get_id_string(v73);
                id v256 = nw_endpoint_handler_dry_run_string(v73);
                nw_endpoint_t v140 = nw_endpoint_handler_copy_endpoint(v73);
                char v141 = nw_endpoint_get_logging_description(v140);
                id v142 = nw_endpoint_handler_state_string(v73);
                int v143 = nw_endpoint_handler_mode_string(v73);
                id v144 = nw_endpoint_handler_copy_current_path(v73);
                *(_DWORD *)int buf = 136448002;
                *(void *)&uint8_t buf[4] = "nw_endpoint_flow_attach_protocols";
                *(_WORD *)&unsigned char buf[12] = 2082;
                *(void *)&void buf[14] = v265;
                *(_WORD *)&buf[22] = 2082;
                nw_endpoint_t v367 = v256;
                *(_WORD *)v368 = 2082;
                *(void *)&v368[2] = v141;
                __int16 v369 = 2082;
                v370 = v142;
                __int16 v371 = 2082;
                v372 = v143;
                __int16 v373 = 2114;
                id v374 = v144;
                __int16 v375 = 2082;
                v376 = inited;
                _os_log_impl(&dword_1830D4000, v139, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Failed to attach filter protocol %{public}s", buf, 0x52u);

                BOOL v63 = v240;
LABEL_293:
                LOBYTE(v64) = 0;
                goto LABEL_310;
              }
LABEL_294:
              LOBYTE(v64) = 0;
              BOOL v63 = v240;
              goto LABEL_310;
            }
LABEL_311:
            LOBYTE(v64) = 0;
            BOOL v63 = v240;
            goto LABEL_271;
          }
          unsigned int v85 = v75;
          v357[3] = v84;
          if ((nw_endpoint_handler_get_logging_disabled(v73) & 1) == 0)
          {
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
            }
            BOOL v86 = (id)gconnectionLogObj;
            if (os_log_type_enabled(v86, OS_LOG_TYPE_DEBUG))
            {
              os_log_type_t v87 = nw_endpoint_handler_get_id_string(v73);
              char v233 = nw_endpoint_handler_dry_run_string(v73);
              nw_endpoint_t v88 = nw_endpoint_handler_copy_endpoint(v73);
              nw_endpoint_t v228 = nw_endpoint_get_logging_description(v88);
              v224 = nw_endpoint_handler_state_string(v73);
              v221 = nw_endpoint_handler_mode_string(v73);
              id v89 = nw_endpoint_handler_copy_current_path(v73);
              *(_DWORD *)int buf = 136448002;
              *(void *)&uint8_t buf[4] = "nw_endpoint_flow_attach_protocols";
              *(_WORD *)&unsigned char buf[12] = 2082;
              *(void *)&void buf[14] = v87;
              *(_WORD *)&buf[22] = 2082;
              nw_endpoint_t v367 = v233;
              *(_WORD *)v368 = 2082;
              *(void *)&v368[2] = v228;
              __int16 v369 = 2082;
              v370 = v224;
              __int16 v371 = 2082;
              v372 = v221;
              __int16 v373 = 2114;
              os_log_type_t v90 = v89;
              id v374 = v89;
              __int16 v375 = 2082;
              v376 = inited;
              _os_log_impl(&dword_1830D4000, v86, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Attached filter protocol: %{public}s", buf, 0x52u);

              BOOL v63 = v240;
            }
          }
          *((unsigned char *)v353 + 24) = 1;
          nw_endpoint_t v75 = v85;
        }
        if ((*((unsigned char *)v271 + 33) & 1) == 0)
        {
          if ((nexus_protocol_level - 1) <= 2)
          {
            uint64_t v303 = 0;
            v304 = &v303;
            uint64_t v305 = 0x2020000000;
            char v306 = 0;
            v293[0] = MEMORY[0x1E4F143A8];
            v293[1] = 3221225472;
            v293[2] = ___ZL33nw_endpoint_flow_attach_protocolsP30NWConcrete_nw_endpoint_handlerP11nw_protocolS2__block_invoke_224;
            v293[3] = &unk_1E524A3B0;
            int v302 = a3;
            v234 = v73;
            v294 = v234;
            BOOL v298 = v346;
            id v91 = v74;
            id v295 = v91;
            uint64_t v299 = type;
            BOOL v92 = v75;
            v296 = v92;
            uint64_t v300 = &v356;
            v301 = &v303;
            BOOL v93 = v255;
            os_log_type_t v297 = v93;
            int v94 = nw_parameters_internal_iterate_protocol_stack(v92, 3, 0, v293);
            v225 = v93;
            int v229 = v91;
            if (*((unsigned char *)v304 + 24))
            {
              BOOL v95 = 0;
              LOBYTE(v64) = 0;
            }
            else
            {
              int v64 = *((unsigned __int8 *)v271 + 33);
              BOOL v95 = (v64 & 1) == 0;
              if (((v64 | v94) & 1) == 0)
              {
                id v241 = v63;
                if (nw_endpoint_handler_get_logging_disabled(v234))
                {
                  LOBYTE(v64) = 0;
                  BOOL v95 = 1;
                }
                else
                {
                  if (__nwlog_connection_log::onceToken != -1) {
                    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
                  }
                  BOOL v111 = (id)gconnectionLogObj;
                  if (os_log_type_enabled(v111, OS_LOG_TYPE_ERROR))
                  {
                    id v219 = nw_endpoint_handler_get_id_string(v234);
                    id v217 = nw_endpoint_handler_dry_run_string(v234);
                    nw_endpoint_t v222 = nw_endpoint_handler_copy_endpoint(v234);
                    nw_endpoint_t v215 = nw_endpoint_get_logging_description(v222);
                    v214 = nw_endpoint_handler_state_string(v234);
                    os_log_type_t v112 = nw_endpoint_handler_mode_string(v234);
                    id v113 = nw_endpoint_handler_copy_current_path(v234);
                    *(_DWORD *)int buf = 136447746;
                    *(void *)&uint8_t buf[4] = "nw_endpoint_flow_attach_protocols";
                    *(_WORD *)&unsigned char buf[12] = 2082;
                    *(void *)&void buf[14] = v219;
                    *(_WORD *)&buf[22] = 2082;
                    nw_endpoint_t v367 = v217;
                    *(_WORD *)v368 = 2082;
                    *(void *)&v368[2] = v215;
                    __int16 v369 = 2082;
                    v370 = v214;
                    __int16 v371 = 2082;
                    v372 = v112;
                    __int16 v373 = 2114;
                    id v374 = v113;
                    _os_log_impl(&dword_1830D4000, v111, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] No transport protocols in protocol stack", buf, 0x48u);
                  }
                  BOOL v63 = v241;
                  LOBYTE(v64) = 0;
                  BOOL v95 = 1;
                }
              }
            }

            _Block_object_dispose(&v303, 8);
            if (!v95) {
              goto LABEL_271;
            }
            if ((nexus_protocol_level - 1) <= 1)
            {
              char v223 = v75;
              v242 = v63;
              uint64_t v303 = 0;
              v304 = &v303;
              uint64_t v305 = 0x2020000000;
              char v306 = 0;
              v283[0] = MEMORY[0x1E4F143A8];
              v283[1] = 3221225472;
              v283[2] = ___ZL33nw_endpoint_flow_attach_protocolsP30NWConcrete_nw_endpoint_handlerP11nw_protocolS2__block_invoke_225;
              v283[3] = &unk_1E524A3B0;
              v292 = a3;
              uint64_t v114 = v234;
              id v284 = v114;
              uint64_t v288 = v346;
              id v235 = v229;
              id v285 = v235;
              v289 = type;
              uint64_t v115 = v92;
              v286 = v115;
              v290 = &v356;
              v291 = &v303;
              v230 = v225;
              v287 = v230;
              int v116 = nw_parameters_internal_iterate_protocol_stack(v115, 2, 0, v283);
              if (*((unsigned char *)v304 + 24))
              {
                BOOL v117 = 0;
                LOBYTE(v64) = 0;
              }
              else
              {
                int v147 = *((unsigned __int8 *)v271 + 33);
                BOOL v117 = (v147 & 1) == 0;
                if ((v147 | v116))
                {
                  LOBYTE(v64) = v64 | v147;
                }
                else
                {
                  if ((nw_endpoint_handler_get_logging_disabled(v114) & 1) == 0)
                  {
                    if (__nwlog_connection_log::onceToken != -1) {
                      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
                    }
                    long long v148 = (id)gconnectionLogObj;
                    if (os_log_type_enabled(v148, OS_LOG_TYPE_ERROR))
                    {
                      id v149 = nw_endpoint_handler_get_id_string(v114);
                      id v226 = nw_endpoint_handler_dry_run_string(v114);
                      nw_endpoint_t v150 = nw_endpoint_handler_copy_endpoint(v114);
                      v220 = nw_endpoint_get_logging_description(v150);
                      uint64_t v218 = nw_endpoint_handler_state_string(v114);
                      v216 = nw_endpoint_handler_mode_string(v114);
                      id v151 = nw_endpoint_handler_copy_current_path(v114);
                      *(_DWORD *)int buf = 136447746;
                      *(void *)&uint8_t buf[4] = "nw_endpoint_flow_attach_protocols";
                      *(_WORD *)&unsigned char buf[12] = 2082;
                      *(void *)&void buf[14] = v149;
                      *(_WORD *)&buf[22] = 2082;
                      nw_endpoint_t v367 = v226;
                      *(_WORD *)v368 = 2082;
                      *(void *)&v368[2] = v220;
                      __int16 v369 = 2082;
                      v370 = v218;
                      __int16 v371 = 2082;
                      v372 = v216;
                      __int16 v373 = 2114;
                      nw_endpoint_t v152 = v151;
                      id v374 = v151;
                      _os_log_impl(&dword_1830D4000, v148, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] No internet protocols in protocol stack", buf, 0x48u);
                    }
                  }
                  BOOL v117 = 1;
                }
              }

              BOOL v63 = v242;
              _Block_object_dispose(&v303, 8);
              if (!v117) {
                goto LABEL_271;
              }
              nw_endpoint_t v75 = v223;
              if (nexus_protocol_level == 1)
              {
                uint64_t v303 = 0;
                v304 = &v303;
                uint64_t v305 = 0x2020000000;
                char v306 = 0;
                v273[0] = MEMORY[0x1E4F143A8];
                v273[1] = 3221225472;
                v273[2] = ___ZL33nw_endpoint_flow_attach_protocolsP30NWConcrete_nw_endpoint_handlerP11nw_protocolS2__block_invoke_226;
                v273[3] = &unk_1E524A3B0;
                v282 = a3;
                char v153 = v114;
                os_log_type_t v274 = v153;
                v278 = v346;
                id v275 = v235;
                v279 = type;
                char v276 = v115;
                nw_endpoint_t v280 = &v356;
                id v281 = &v303;
                nw_endpoint_t v277 = v230;
                int v154 = nw_parameters_internal_iterate_protocol_stack(v276, 1, 0, v273);
                if (*((unsigned char *)v304 + 24))
                {
                  BOOL v155 = 0;
                  LOBYTE(v64) = 0;
                }
                else
                {
                  int v156 = *((unsigned __int8 *)v271 + 33);
                  BOOL v155 = (v156 & 1) == 0;
                  if ((v156 | v154))
                  {
                    LOBYTE(v64) = v64 | v156;
                  }
                  else
                  {
                    if ((nw_endpoint_handler_get_logging_disabled(v153) & 1) == 0)
                    {
                      if (__nwlog_connection_log::onceToken != -1) {
                        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
                      }
                      __int16 v157 = (id)gconnectionLogObj;
                      if (os_log_type_enabled(v157, OS_LOG_TYPE_ERROR))
                      {
                        __int16 v158 = nw_endpoint_handler_get_id_string(v153);
                        BOOL v266 = nw_endpoint_handler_dry_run_string(v153);
                        nw_endpoint_t v159 = nw_endpoint_handler_copy_endpoint(v153);
                        int v236 = nw_endpoint_get_logging_description(v159);
                        id v231 = nw_endpoint_handler_state_string(v153);
                        __int16 v160 = nw_endpoint_handler_mode_string(v153);
                        id v161 = nw_endpoint_handler_copy_current_path(v153);
                        *(_DWORD *)int buf = 136447746;
                        *(void *)&uint8_t buf[4] = "nw_endpoint_flow_attach_protocols";
                        *(_WORD *)&unsigned char buf[12] = 2082;
                        *(void *)&void buf[14] = v158;
                        *(_WORD *)&buf[22] = 2082;
                        nw_endpoint_t v367 = v266;
                        *(_WORD *)v368 = 2082;
                        *(void *)&v368[2] = v236;
                        __int16 v369 = 2082;
                        v370 = v231;
                        __int16 v371 = 2082;
                        v372 = v160;
                        __int16 v373 = 2114;
                        id v374 = v161;
                        _os_log_impl(&dword_1830D4000, v157, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] No link protocols in protocol stack", buf, 0x48u);
                      }
                    }
                    BOOL v155 = 1;
                  }
                }

                BOOL v63 = v242;
                _Block_object_dispose(&v303, 8);
                nw_endpoint_t v75 = v223;
                if (!v155) {
                  goto LABEL_271;
                }
              }
            }
          }
          if ((*((unsigned char *)v255 + 34) & 2) == 0)
          {
            v240 = v63;
            if ((*((unsigned char *)v271 + 33) & 0x40) == 0)
            {
              char v162 = nw_endpoint_flow_attach_socket_protocol(v73, (nw_protocol *)v357[3]);
              char logging_disabled = nw_endpoint_handler_get_logging_disabled(v73);
              if (v162)
              {
                if (logging_disabled)
                {
                  LOBYTE(v64) = 1;
                  goto LABEL_271;
                }
                if (__nwlog_connection_log::onceToken != -1) {
                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
                }
                nw_endpoint_t v139 = (id)gconnectionLogObj;
                if (!os_log_type_enabled(v139, OS_LOG_TYPE_DEBUG))
                {
                  LOBYTE(v64) = 1;
                  goto LABEL_310;
                }
                v267 = nw_endpoint_handler_get_id_string(v73);
                __int16 v164 = nw_endpoint_handler_dry_run_string(v73);
                nw_endpoint_t v165 = nw_endpoint_handler_copy_endpoint(v73);
                __int16 v166 = nw_endpoint_get_logging_description(v165);
                __int16 v167 = nw_endpoint_handler_state_string(v73);
                __int16 v168 = nw_endpoint_handler_mode_string(v73);
                id v169 = nw_endpoint_handler_copy_current_path(v73);
                *(_DWORD *)int buf = 136447746;
                *(void *)&uint8_t buf[4] = "nw_endpoint_flow_attach_protocols";
                *(_WORD *)&unsigned char buf[12] = 2082;
                *(void *)&void buf[14] = v267;
                *(_WORD *)&buf[22] = 2082;
                nw_endpoint_t v367 = v164;
                *(_WORD *)v368 = 2082;
                *(void *)&v368[2] = v166;
                __int16 v369 = 2082;
                v370 = v167;
                __int16 v371 = 2082;
                v372 = v168;
                __int16 v373 = 2114;
                id v374 = v169;
                _os_log_impl(&dword_1830D4000, v139, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Attached socket protocol", buf, 0x48u);

                BOOL v63 = v240;
                goto LABEL_269;
              }
              if ((logging_disabled & 1) == 0)
              {
                if (__nwlog_connection_log::onceToken != -1) {
                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
                }
                nw_endpoint_t v139 = (id)gconnectionLogObj;
                if (os_log_type_enabled(v139, OS_LOG_TYPE_ERROR))
                {
                  id v270 = nw_endpoint_handler_get_id_string(v73);
                  id v196 = nw_endpoint_handler_dry_run_string(v73);
                  nw_endpoint_t v197 = nw_endpoint_handler_copy_endpoint(v73);
                  char v198 = nw_endpoint_get_logging_description(v197);
                  uint64_t v199 = nw_endpoint_handler_state_string(v73);
                  uint64_t v200 = nw_endpoint_handler_mode_string(v73);
                  id v201 = nw_endpoint_handler_copy_current_path(v73);
                  *(_DWORD *)int buf = 136447746;
                  *(void *)&uint8_t buf[4] = "nw_endpoint_flow_attach_protocols";
                  *(_WORD *)&unsigned char buf[12] = 2082;
                  *(void *)&void buf[14] = v270;
                  *(_WORD *)&buf[22] = 2082;
                  nw_endpoint_t v367 = v196;
                  *(_WORD *)v368 = 2082;
                  *(void *)&v368[2] = v198;
                  __int16 v369 = 2082;
                  v370 = v199;
                  __int16 v371 = 2082;
                  v372 = v200;
                  __int16 v373 = 2114;
                  id v374 = v201;
                  _os_log_impl(&dword_1830D4000, v139, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Failed to attach socket protocol", buf, 0x48u);

                  BOOL v63 = v240;
                  goto LABEL_293;
                }
                goto LABEL_294;
              }
              goto LABEL_311;
            }
            uint64_t v176 = v75;
            uint64_t v177 = nw_path_flow_registration_copy_assigned_protocol(v251, v255[104]);
            id v269 = v177;
            if (v177)
            {
              v178 = v177;
              nw_protocol_definition_t v179 = nw_protocol_options_copy_definition(v177);
              char v180 = (long long *)nw_protocol_definition_get_identifier(v179);
              v181 = v179;
              uint64_t v182 = nw_endpoint_flow_add_one_protocol(v73, v180, v178, v179, *((void **)v361 + 5), v176, v357[3]);
              if (!v182)
              {
                if ((nw_endpoint_handler_get_logging_disabled(v73) & 1) == 0)
                {
                  if (__nwlog_connection_log::onceToken != -1) {
                    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
                  }
                  v208 = (id)gconnectionLogObj;
                  if (os_log_type_enabled(v208, OS_LOG_TYPE_ERROR))
                  {
                    int v260 = nw_endpoint_handler_get_id_string(v73);
                    char v246 = nw_endpoint_handler_dry_run_string(v73);
                    nw_endpoint_t v209 = nw_endpoint_handler_copy_endpoint(v73);
                    int v210 = nw_endpoint_get_logging_description(v209);
                    char v211 = nw_endpoint_handler_state_string(v73);
                    v212 = nw_endpoint_handler_mode_string(v73);
                    id v213 = nw_endpoint_handler_copy_current_path(v73);
                    *(_DWORD *)int buf = 136447746;
                    *(void *)&uint8_t buf[4] = "nw_endpoint_flow_attach_protocols";
                    *(_WORD *)&unsigned char buf[12] = 2082;
                    *(void *)&void buf[14] = v260;
                    *(_WORD *)&buf[22] = 2082;
                    nw_endpoint_t v367 = v246;
                    *(_WORD *)v368 = 2082;
                    *(void *)&v368[2] = v210;
                    __int16 v369 = 2082;
                    v370 = v211;
                    __int16 v371 = 2082;
                    v372 = v212;
                    __int16 v373 = 2114;
                    id v374 = v213;
                    _os_log_impl(&dword_1830D4000, v208, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Failed to attach flow-assigned protocol", buf, 0x48u);
                  }
                  BOOL v63 = v240;
                  goto LABEL_308;
                }
                goto LABEL_307;
              }
              v357[3] = v182;
              if ((nw_endpoint_handler_get_logging_disabled(v73) & 1) == 0)
              {
                if (__nwlog_connection_log::onceToken != -1) {
                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
                }
                nw_endpoint_t v183 = (id)gconnectionLogObj;
                if (os_log_type_enabled(v183, OS_LOG_TYPE_DEBUG))
                {
                  __int16 v257 = nw_endpoint_handler_get_id_string(v73);
                  nw_endpoint_t v237 = nw_endpoint_handler_dry_run_string(v73);
                  nw_endpoint_t v184 = nw_endpoint_handler_copy_endpoint(v73);
                  int v232 = nw_endpoint_get_logging_description(v184);
                  nw_endpoint_t v227 = nw_endpoint_handler_state_string(v73);
                  v185 = nw_endpoint_handler_mode_string(v73);
                  id v186 = nw_endpoint_handler_copy_current_path(v73);
                  *(_DWORD *)int buf = 136448002;
                  *(void *)&uint8_t buf[4] = "nw_endpoint_flow_attach_protocols";
                  *(_WORD *)&unsigned char buf[12] = 2082;
                  *(void *)&void buf[14] = v257;
                  *(_WORD *)&buf[22] = 2082;
                  nw_endpoint_t v367 = v237;
                  *(_WORD *)v368 = 2082;
                  *(void *)&v368[2] = v232;
                  __int16 v369 = 2082;
                  v370 = v227;
                  __int16 v371 = 2082;
                  v372 = v185;
                  __int16 v373 = 2114;
                  id v374 = v186;
                  __int16 v375 = 2082;
                  v376 = v180;
                  _os_log_impl(&dword_1830D4000, v183, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Attached flow-assigned protocol: %{public}s", buf, 0x52u);
                }
              }
            }
            BOOL v187 = nw_endpoint_flow_attach_channel_protocol(v73, v357[3], nexus_protocol_level);
            char v188 = nw_endpoint_handler_get_logging_disabled(v73);
            if (v187)
            {
              if ((v188 & 1) == 0)
              {
                if (__nwlog_connection_log::onceToken != -1) {
                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
                }
                unsigned int v189 = (id)gconnectionLogObj;
                if (os_log_type_enabled(v189, OS_LOG_TYPE_DEBUG))
                {
                  char v190 = nw_endpoint_handler_get_id_string(v73);
                  id v258 = nw_endpoint_handler_dry_run_string(v73);
                  nw_endpoint_t v191 = nw_endpoint_handler_copy_endpoint(v73);
                  v192 = nw_endpoint_get_logging_description(v191);
                  nw_endpoint_t v193 = nw_endpoint_handler_state_string(v73);
                  id v194 = nw_endpoint_handler_mode_string(v73);
                  id v195 = nw_endpoint_handler_copy_current_path(v73);
                  *(_DWORD *)int buf = 136447746;
                  *(void *)&uint8_t buf[4] = "nw_endpoint_flow_attach_protocols";
                  *(_WORD *)&unsigned char buf[12] = 2082;
                  *(void *)&void buf[14] = v190;
                  *(_WORD *)&buf[22] = 2082;
                  nw_endpoint_t v367 = v258;
                  *(_WORD *)v368 = 2082;
                  *(void *)&v368[2] = v192;
                  __int16 v369 = 2082;
                  v370 = v193;
                  __int16 v371 = 2082;
                  v372 = v194;
                  __int16 v373 = 2114;
                  id v374 = v195;
                  _os_log_impl(&dword_1830D4000, v189, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Attached channel protocol", buf, 0x48u);
                }
                BOOL v63 = v240;
                LOBYTE(v64) = 1;
                goto LABEL_309;
              }
              LOBYTE(v64) = 1;
              goto LABEL_316;
            }
            if (v188)
            {
              LOBYTE(v64) = 0;
LABEL_316:
              BOOL v63 = v240;
              goto LABEL_309;
            }
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
            }
            v181 = (id)gconnectionLogObj;
            if (os_log_type_enabled(v181, OS_LOG_TYPE_ERROR))
            {
              uint64_t v259 = nw_endpoint_handler_get_id_string(v73);
              id v202 = nw_endpoint_handler_dry_run_string(v73);
              nw_endpoint_t v203 = nw_endpoint_handler_copy_endpoint(v73);
              v204 = nw_endpoint_get_logging_description(v203);
              v205 = nw_endpoint_handler_state_string(v73);
              uint64_t v206 = nw_endpoint_handler_mode_string(v73);
              id v207 = nw_endpoint_handler_copy_current_path(v73);
              *(_DWORD *)int buf = 136447746;
              *(void *)&uint8_t buf[4] = "nw_endpoint_flow_attach_protocols";
              *(_WORD *)&unsigned char buf[12] = 2082;
              *(void *)&void buf[14] = v259;
              *(_WORD *)&buf[22] = 2082;
              nw_endpoint_t v367 = v202;
              *(_WORD *)v368 = 2082;
              *(void *)&v368[2] = v204;
              __int16 v369 = 2082;
              v370 = v205;
              __int16 v371 = 2082;
              v372 = v206;
              __int16 v373 = 2114;
              id v374 = v207;
              _os_log_impl(&dword_1830D4000, v181, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Failed to attach channel protocol", buf, 0x48u);

              BOOL v63 = v240;
LABEL_308:

              LOBYTE(v64) = 0;
LABEL_309:
              nw_endpoint_t v139 = v269;
              goto LABEL_310;
            }
LABEL_307:
            BOOL v63 = v240;
            goto LABEL_308;
          }
          if ((nw_endpoint_handler_get_logging_disabled(v73) & 1) == 0)
          {
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
            }
            nw_endpoint_t v139 = (id)gconnectionLogObj;
            if (os_log_type_enabled(v139, OS_LOG_TYPE_DEBUG))
            {
              __int16 v170 = nw_endpoint_handler_get_id_string(v73);
              id v171 = nw_endpoint_handler_dry_run_string(v73);
              __int16 v243 = v63;
              nw_endpoint_t v268 = nw_endpoint_handler_copy_endpoint(v73);
              __int16 v172 = nw_endpoint_get_logging_description(v268);
              size_t v173 = nw_endpoint_handler_state_string(v73);
              __int16 v174 = nw_endpoint_handler_mode_string(v73);
              id v175 = nw_endpoint_handler_copy_current_path(v73);
              *(_DWORD *)int buf = 136447746;
              *(void *)&uint8_t buf[4] = "nw_endpoint_flow_attach_protocols";
              *(_WORD *)&unsigned char buf[12] = 2082;
              *(void *)&void buf[14] = v170;
              *(_WORD *)&buf[22] = 2082;
              nw_endpoint_t v367 = v171;
              *(_WORD *)v368 = 2082;
              *(void *)&v368[2] = v172;
              __int16 v369 = 2082;
              v370 = v173;
              __int16 v371 = 2082;
              v372 = v174;
              __int16 v373 = 2114;
              id v374 = v175;
              _os_log_impl(&dword_1830D4000, v139, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Custom protocols only is set, do not add a bottom level protocol", buf, 0x48u);

              BOOL v63 = v243;
            }
LABEL_269:
            LOBYTE(v64) = 1;
LABEL_310:

            goto LABEL_271;
          }
        }
      }
      LOBYTE(v64) = 1;
      goto LABEL_271;
    }
LABEL_106:
    LOBYTE(v64) = 1;
    goto LABEL_107;
  }
LABEL_78:
  LOBYTE(v64) = 0;
LABEL_107:

  _Block_object_dispose(v346, 8);
  _Block_object_dispose(v348, 8);
  _Block_object_dispose(v377, 8);
  _Block_object_dispose(&v352, 8);

  _Block_object_dispose(&v356, 8);
  _Block_object_dispose(type, 8);

LABEL_209:
  return v64 & 1;
}

void sub_183236A5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,void *a25,void *a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,void *a41,void *a42,void *a43)
{
  _Block_object_dispose(&STACK[0x210], 8);
  _Block_object_dispose(&STACK[0x298], 8);

  _Block_object_dispose(&STACK[0x3B0], 8);
  _Block_object_dispose(&STACK[0x3D0], 8);
  _Block_object_dispose((const void *)(v45 - 160), 8);
  _Block_object_dispose(&STACK[0x3F0], 8);

  _Block_object_dispose(&STACK[0x410], 8);
  _Block_object_dispose(&STACK[0x430], 8);

  _Unwind_Resume(a1);
}

uint64_t nw_parameters_internal_iterate_protocol_stack(void *a1, int a2, char a3, void *a4)
{
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  os_log_type_t v7 = a1;
  id v8 = a4;
  id v9 = (void (**)(void, void, void, void))v8;
  if (v7)
  {
    if (v8)
    {
      xpc_object_t v10 = v7[19];
      os_log_type_t v11 = v10;
      if (v10)
      {
        switch(a2)
        {
          case 1:
            if (v10[7]) {
              goto LABEL_94;
            }
            if (nw_protocol_copy_ethernet_definition::onceToken == -1)
            {
              char v12 = (void *)nw_protocol_copy_ethernet_definition::ethernet_definition;
              if (nw_protocol_copy_ethernet_definition::ethernet_definition)
              {
LABEL_8:
                char v13 = os_retain(v12);
                goto LABEL_93;
              }
            }
            else
            {
              dispatch_once(&nw_protocol_copy_ethernet_definition::onceToken, &__block_literal_global_8_32017);
              char v12 = (void *)nw_protocol_copy_ethernet_definition::ethernet_definition;
              if (nw_protocol_copy_ethernet_definition::ethernet_definition) {
                goto LABEL_8;
              }
            }
            char v13 = 0;
LABEL_93:
            options = nw_protocol_create_options(v13);
            uint64_t v49 = (void *)v11[7];
            v11[7] = options;

LABEL_94:
            if (nw_protocol_copy_ethernet_definition::onceToken == -1)
            {
              BOOL v50 = (void *)nw_protocol_copy_ethernet_definition::ethernet_definition;
              if (nw_protocol_copy_ethernet_definition::ethernet_definition)
              {
LABEL_96:
                id v17 = os_retain(v50);
                goto LABEL_99;
              }
            }
            else
            {
              dispatch_once(&nw_protocol_copy_ethernet_definition::onceToken, &__block_literal_global_8_32017);
              BOOL v50 = (void *)nw_protocol_copy_ethernet_definition::ethernet_definition;
              if (nw_protocol_copy_ethernet_definition::ethernet_definition) {
                goto LABEL_96;
              }
            }
            id v17 = 0;
LABEL_99:
            ((void (**)(void, void, id, void))v9)[2](v9, 0, v17, v11[6]);
            goto LABEL_100;
          case 2:
            os_log_type_t v15 = (void *)v10[6];
            if (!v15) {
              goto LABEL_90;
            }
            os_log_type_t v16 = v15;
            id v17 = v16[1];

            ((void (**)(void, void, id, void))v9)[2](v9, 0, v17, v11[6]);
            goto LABEL_100;
          case 3:
            os_log_type_t v18 = (void *)v10[3];
            if (!v18) {
              goto LABEL_90;
            }
            id v19 = v18;
            if (nw_protocol_setup_tcp_definition(void)::onceToken != -1) {
              dispatch_once(&nw_protocol_setup_tcp_definition(void)::onceToken, &__block_literal_global_64304);
            }
            BOOL v20 = nw_protocol_options_matches_definition(v19, (void *)g_tcp_definition);

            if (v20)
            {
              if (a3) {
                goto LABEL_101;
              }
              goto LABEL_28;
            }
            BOOL is_udp = nw_protocol_options_is_udp((void *)v11[3]);
            if (a3)
            {
              if (!is_udp && nw_protocol_options_is_quic((nw_protocol_options_t)v11[3]))
              {
LABEL_28:
                id v17 = nw_protocol_options_copy_definition((nw_protocol_options_t)v11[3]);
                ((void (**)(void, void, id, void))v9)[2](v9, 0, v17, v11[3]);
                goto LABEL_100;
              }
            }
            else
            {
              if (is_udp || !nw_protocol_options_is_quic((nw_protocol_options_t)v11[3])) {
                goto LABEL_28;
              }
              if (!v11[4])
              {
                nw_protocol_options_t v25 = nw_udp_create_options();
                os_log_type_t v26 = (void *)v11[4];
                v11[4] = v25;

                nw_udp_options_set_no_metadata((void *)v11[4], 1);
              }
              id v17 = nw_protocol_copy_udp_definition();
              ((void (**)(void, uint64_t, id, void))v9)[2](v9, 1, v17, v11[4]);
LABEL_100:
            }
LABEL_101:
            uint64_t v21 = 1;
            break;
          case 4:
            uint64_t v21 = v10[2];
            if (!v21) {
              goto LABEL_102;
            }
            uint64_t v22 = v10[1];
            if (v22) {
              uint64_t v23 = (uint64_t)(*(void *)(v22 + 24) - *(void *)(v22 + 16)) >> 3;
            }
            else {
              uint64_t v23 = 0;
            }
            v52[0] = MEMORY[0x1E4F143A8];
            v52[1] = 3221225472;
            v52[2] = __nw_parameters_internal_iterate_protocol_stack_block_invoke_2;
            v52[3] = &unk_1E523D278;
            uint64_t v53 = v9;
            uint64_t v54 = v23;
            nw_array_apply((atomic_uchar *)v21, (uint64_t)v52);

            goto LABEL_101;
          case 5:
            uint64_t v21 = v10[1];
            if (!v21) {
              goto LABEL_102;
            }
            v55[0] = MEMORY[0x1E4F143A8];
            v55[1] = 3221225472;
            v55[2] = __nw_parameters_internal_iterate_protocol_stack_block_invoke;
            v55[3] = &unk_1E524AE90;
            BOOL v56 = v9;
            nw_array_apply((atomic_uchar *)v21, (uint64_t)v55);

            goto LABEL_101;
          default:
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            nw_endpoint_t v14 = (id)gLogObj;
            if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)int buf = 136446466;
              unint64_t v60 = "nw_parameters_internal_iterate_protocol_stack";
              __int16 v61 = 1024;
              LODWORD(v62) = a2;
              _os_log_impl(&dword_1830D4000, v14, OS_LOG_TYPE_ERROR, "%{public}s Unsupported protocol level %u", buf, 0x12u);
            }

            goto LABEL_90;
        }
        goto LABEL_102;
      }
      __int16 v33 = __nwlog_obj();
      *(_DWORD *)int buf = 136446210;
      unint64_t v60 = "nw_parameters_internal_iterate_protocol_stack";
      uint64_t v34 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t v58 = OS_LOG_TYPE_ERROR;
      char v57 = 0;
      if (__nwlog_fault(v34, &v58, &v57))
      {
        if (v58 == OS_LOG_TYPE_FAULT)
        {
          uint64_t v35 = __nwlog_obj();
          os_log_type_t v36 = v58;
          if (os_log_type_enabled(v35, v58))
          {
            *(_DWORD *)int buf = 136446210;
            unint64_t v60 = "nw_parameters_internal_iterate_protocol_stack";
            _os_log_impl(&dword_1830D4000, v35, v36, "%{public}s called with null stack", buf, 0xCu);
          }
        }
        else if (v57)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          uint64_t v35 = __nwlog_obj();
          os_log_type_t v43 = v58;
          BOOL v44 = os_log_type_enabled(v35, v58);
          if (backtrace_string)
          {
            if (v44)
            {
              *(_DWORD *)int buf = 136446466;
              unint64_t v60 = "nw_parameters_internal_iterate_protocol_stack";
              __int16 v61 = 2082;
              BOOL v62 = backtrace_string;
              _os_log_impl(&dword_1830D4000, v35, v43, "%{public}s called with null stack, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(backtrace_string);
            goto LABEL_88;
          }
          if (v44)
          {
            *(_DWORD *)int buf = 136446210;
            unint64_t v60 = "nw_parameters_internal_iterate_protocol_stack";
            _os_log_impl(&dword_1830D4000, v35, v43, "%{public}s called with null stack, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          uint64_t v35 = __nwlog_obj();
          os_log_type_t v47 = v58;
          if (os_log_type_enabled(v35, v58))
          {
            *(_DWORD *)int buf = 136446210;
            unint64_t v60 = "nw_parameters_internal_iterate_protocol_stack";
            _os_log_impl(&dword_1830D4000, v35, v47, "%{public}s called with null stack, backtrace limit exceeded", buf, 0xCu);
          }
        }
      }
LABEL_88:
      if (v34) {
        free(v34);
      }
LABEL_90:
      uint64_t v21 = 0;
LABEL_102:

      goto LABEL_103;
    }
    __int16 v31 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    unint64_t v60 = "nw_parameters_internal_iterate_protocol_stack";
    os_log_type_t v28 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v58 = OS_LOG_TYPE_ERROR;
    char v57 = 0;
    if (__nwlog_fault(v28, &v58, &v57))
    {
      if (v58 == OS_LOG_TYPE_FAULT)
      {
        __int16 v29 = __nwlog_obj();
        os_log_type_t v32 = v58;
        if (os_log_type_enabled(v29, v58))
        {
          *(_DWORD *)int buf = 136446210;
          unint64_t v60 = "nw_parameters_internal_iterate_protocol_stack";
          _os_log_impl(&dword_1830D4000, v29, v32, "%{public}s called with null iterator", buf, 0xCu);
        }
LABEL_81:

        goto LABEL_82;
      }
      if (!v57)
      {
        __int16 v29 = __nwlog_obj();
        os_log_type_t v46 = v58;
        if (os_log_type_enabled(v29, v58))
        {
          *(_DWORD *)int buf = 136446210;
          unint64_t v60 = "nw_parameters_internal_iterate_protocol_stack";
          _os_log_impl(&dword_1830D4000, v29, v46, "%{public}s called with null iterator, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_81;
      }
      uint64_t v37 = (char *)__nw_create_backtrace_string();
      __int16 v29 = __nwlog_obj();
      os_log_type_t v40 = v58;
      BOOL v41 = os_log_type_enabled(v29, v58);
      if (!v37)
      {
        if (v41)
        {
          *(_DWORD *)int buf = 136446210;
          unint64_t v60 = "nw_parameters_internal_iterate_protocol_stack";
          _os_log_impl(&dword_1830D4000, v29, v40, "%{public}s called with null iterator, no backtrace", buf, 0xCu);
        }
        goto LABEL_81;
      }
      if (v41)
      {
        *(_DWORD *)int buf = 136446466;
        unint64_t v60 = "nw_parameters_internal_iterate_protocol_stack";
        __int16 v61 = 2082;
        BOOL v62 = v37;
        _os_log_impl(&dword_1830D4000, v29, v40, "%{public}s called with null iterator, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_61;
    }
  }
  else
  {
    id v27 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    unint64_t v60 = "nw_parameters_internal_iterate_protocol_stack";
    os_log_type_t v28 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v58 = OS_LOG_TYPE_ERROR;
    char v57 = 0;
    if (__nwlog_fault(v28, &v58, &v57))
    {
      if (v58 == OS_LOG_TYPE_FAULT)
      {
        __int16 v29 = __nwlog_obj();
        os_log_type_t v30 = v58;
        if (os_log_type_enabled(v29, v58))
        {
          *(_DWORD *)int buf = 136446210;
          unint64_t v60 = "nw_parameters_internal_iterate_protocol_stack";
          _os_log_impl(&dword_1830D4000, v29, v30, "%{public}s called with null parameters", buf, 0xCu);
        }
        goto LABEL_81;
      }
      if (!v57)
      {
        __int16 v29 = __nwlog_obj();
        os_log_type_t v45 = v58;
        if (os_log_type_enabled(v29, v58))
        {
          *(_DWORD *)int buf = 136446210;
          unint64_t v60 = "nw_parameters_internal_iterate_protocol_stack";
          _os_log_impl(&dword_1830D4000, v29, v45, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_81;
      }
      uint64_t v37 = (char *)__nw_create_backtrace_string();
      __int16 v29 = __nwlog_obj();
      os_log_type_t v38 = v58;
      BOOL v39 = os_log_type_enabled(v29, v58);
      if (!v37)
      {
        if (v39)
        {
          *(_DWORD *)int buf = 136446210;
          unint64_t v60 = "nw_parameters_internal_iterate_protocol_stack";
          _os_log_impl(&dword_1830D4000, v29, v38, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }
        goto LABEL_81;
      }
      if (v39)
      {
        *(_DWORD *)int buf = 136446466;
        unint64_t v60 = "nw_parameters_internal_iterate_protocol_stack";
        __int16 v61 = 2082;
        BOOL v62 = v37;
        _os_log_impl(&dword_1830D4000, v29, v38, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_61:

      free(v37);
    }
  }
LABEL_82:
  if (v28) {
    free(v28);
  }
  uint64_t v21 = 0;
LABEL_103:

  return v21;
}

void sub_1832378C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_protocol_stack_iterate_application_protocols(nw_protocol_stack_t stack, nw_protocol_stack_iterate_protocols_block_t iterate_block)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  nw_protocol_stack_t v3 = stack;
  nw_protocol_stack_iterate_protocols_block_t v4 = iterate_block;
  id v5 = v4;
  if (v3)
  {
    isa = (atomic_uchar *)v3[1].isa;
    v19[0] = MEMORY[0x1E4F143A8];
    v19[1] = 3221225472;
    v19[2] = __nw_protocol_stack_iterate_application_protocols_block_invoke;
    v19[3] = &unk_1E524AE90;
    id v7 = v4;
    id v20 = v7;
    nw_array_apply(isa, (uint64_t)v19);
    id v8 = (atomic_uchar *)v3[2].isa;
    v17[0] = MEMORY[0x1E4F143A8];
    v17[1] = 3221225472;
    v17[2] = __nw_protocol_stack_iterate_application_protocols_block_invoke_2;
    v17[3] = &unk_1E524AE90;
    id v18 = v7;
    nw_array_apply(v8, (uint64_t)v17);

    goto LABEL_3;
  }
  id v9 = __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  os_log_type_t v24 = "nw_protocol_stack_iterate_application_protocols";
  xpc_object_t v10 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t v22 = OS_LOG_TYPE_ERROR;
  char v21 = 0;
  if (__nwlog_fault(v10, &v22, &v21))
  {
    if (v22 == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v11 = __nwlog_obj();
      os_log_type_t v12 = v22;
      if (os_log_type_enabled(v11, v22))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v24 = "nw_protocol_stack_iterate_application_protocols";
        _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s called with null stack", buf, 0xCu);
      }
    }
    else if (v21)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v11 = __nwlog_obj();
      os_log_type_t v14 = v22;
      BOOL v15 = os_log_type_enabled(v11, v22);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)int buf = 136446466;
          os_log_type_t v24 = "nw_protocol_stack_iterate_application_protocols";
          __int16 v25 = 2082;
          os_log_type_t v26 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v11, v14, "%{public}s called with null stack, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v15)
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v24 = "nw_protocol_stack_iterate_application_protocols";
        _os_log_impl(&dword_1830D4000, v11, v14, "%{public}s called with null stack, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v11 = __nwlog_obj();
      os_log_type_t v16 = v22;
      if (os_log_type_enabled(v11, v22))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v24 = "nw_protocol_stack_iterate_application_protocols";
        _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s called with null stack, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v10) {
    free(v10);
  }
LABEL_3:
}

id nw_path_flow_registration_copy_assigned_protocol(NWConcrete_nw_path *a1, NWConcrete_nw_path_flow_registration *a2)
{
  unint64_t v2 = (id *)nw_path_copy_flow_for_registration(a1, a2);
  nw_protocol_stack_t v3 = v2;
  if (v2) {
    id v4 = v2[9];
  }
  else {
    id v4 = 0;
  }

  return v4;
}

void nw_udp_options_set_no_metadata(void *a1, char a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  if (nw_protocol_options_is_udp(v3))
  {
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_udp_options_set_no_metadata_block_invoke;
    v12[3] = &__block_descriptor_33_e9_B16__0_v8l;
    char v13 = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }
  id v4 = __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  id v17 = "nw_udp_options_set_no_metadata";
  id v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)int buf = 136446210;
        id v17 = "nw_udp_options_set_no_metadata";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_options_is_udp(options)", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)int buf = 136446466;
          id v17 = "nw_udp_options_set_no_metadata";
          __int16 v18 = 2082;
          id v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_udp(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)int buf = 136446210;
        id v17 = "nw_udp_options_set_no_metadata";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_udp(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)int buf = 136446210;
        id v17 = "nw_udp_options_set_no_metadata";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_options_is_udp(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
LABEL_3:
}

void sub_183237F8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

nw_protocol_options_t nw_udp_create_options(void)
{
  if (nw_protocol_setup_udp_definition(void)::onceToken[0] != -1) {
    dispatch_once(nw_protocol_setup_udp_definition(void)::onceToken, &__block_literal_global_45806);
  }
  uint64_t v0 = (void *)g_udp_definition;

  return (nw_protocol_options_t)nw_protocol_create_options(v0);
}

nw_protocol_definition_t nw_protocol_copy_udp_definition(void)
{
  if (nw_protocol_setup_udp_definition(void)::onceToken[0] != -1) {
    dispatch_once(nw_protocol_setup_udp_definition(void)::onceToken, &__block_literal_global_45806);
  }
  uint64_t v0 = (void *)g_udp_definition;

  return (nw_protocol_definition_t)v0;
}

uint64_t ___ZL36nw_protocol_implementation_connectedP11nw_protocolS0__block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t object = nw_hash_node_get_object(a2);
  uint64_t extra = nw_hash_node_get_extra(a2);
  __int16 v6 = *(_WORD *)(extra + 52);
  if ((v6 & 0xC) != 4) {
    return 1;
  }
  if (*(void *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 80) + 120))
  {
    uint64_t v7 = extra;
    *(_WORD *)(extra + 52) = v6 | 8;
    id v8 = *(void ***)(a1 + 32);
    os_log_type_t v9 = *(void (**)(void **, uint64_t, void))(*((void *)v8[1] + 10) + 120);
    BOOL v10 = v8;
    if (nw_protocol_definition_get_message_is_stream(v8[1]))
    {
      if (*(v10 - 6) == (void *)object) {
        uint64_t object = -2;
      }
    }

    v9(v10, object, *(_WORD *)(v7 + 52) & 1);
    return 1;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v12 = (id)gLogObj;
  *(_DWORD *)int buf = 136446210;
  uint64_t v23 = "nw_protocol_implementation_connected_block_invoke_2";
  char v13 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v20 = 0;
  if (__nwlog_fault(v13, &type, &v20))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      char v14 = (id)gLogObj;
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v23 = "nw_protocol_implementation_connected_block_invoke";
        _os_log_impl(&dword_1830D4000, v14, v15, "%{public}s called with null instance->parent_definition->start", buf, 0xCu);
      }
    }
    else if (v20)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      char v14 = (id)gLogObj;
      os_log_type_t v17 = type;
      BOOL v18 = os_log_type_enabled(v14, type);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)int buf = 136446466;
          uint64_t v23 = "nw_protocol_implementation_connected_block_invoke";
          __int16 v24 = 2082;
          __int16 v25 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v14, v17, "%{public}s called with null instance->parent_definition->start, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        if (!v13) {
          return 0;
        }
        goto LABEL_14;
      }
      if (v18)
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v23 = "nw_protocol_implementation_connected_block_invoke";
        _os_log_impl(&dword_1830D4000, v14, v17, "%{public}s called with null instance->parent_definition->start, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      char v14 = (id)gLogObj;
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v23 = "nw_protocol_implementation_connected_block_invoke";
        _os_log_impl(&dword_1830D4000, v14, v19, "%{public}s called with null instance->parent_definition->start, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
  if (v13) {
LABEL_14:
  }
    free(v13);
  return 0;
}

void nw_protocol_instance_report_ready(void *a1, unint64_t a2)
{
  uint64_t v84 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = v3;
  if (!v3)
  {
    os_log_type_t v30 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    unsigned int v77 = "nw_protocol_instance_report_ready";
    __int16 v31 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(p_paths_log_id_num) = 0;
    if (!__nwlog_fault(v31, type, &p_paths_log_id_num)) {
      goto LABEL_119;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v32 = __nwlog_obj();
      os_log_type_t v33 = type[0];
      if (os_log_type_enabled(v32, type[0]))
      {
        *(_DWORD *)int buf = 136446210;
        unsigned int v77 = "nw_protocol_instance_report_ready";
        _os_log_impl(&dword_1830D4000, v32, v33, "%{public}s called with null instance", buf, 0xCu);
      }
    }
    else if ((_BYTE)p_paths_log_id_num)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v32 = __nwlog_obj();
      os_log_type_t v38 = type[0];
      BOOL v39 = os_log_type_enabled(v32, type[0]);
      if (backtrace_string)
      {
        if (v39)
        {
          *(_DWORD *)int buf = 136446466;
          unsigned int v77 = "nw_protocol_instance_report_ready";
          __int16 v78 = 2082;
          int v79 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v32, v38, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_119:
        if (!v31) {
          goto LABEL_46;
        }
        goto LABEL_120;
      }
      if (v39)
      {
        *(_DWORD *)int buf = 136446210;
        unsigned int v77 = "nw_protocol_instance_report_ready";
        _os_log_impl(&dword_1830D4000, v32, v38, "%{public}s called with null instance, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v32 = __nwlog_obj();
      os_log_type_t v56 = type[0];
      if (os_log_type_enabled(v32, type[0]))
      {
        *(_DWORD *)int buf = 136446210;
        unsigned int v77 = "nw_protocol_instance_report_ready";
        _os_log_impl(&dword_1830D4000, v32, v56, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_118:

    goto LABEL_119;
  }
  id v5 = (void *)v3[15];
  if (v5)
  {
    __int16 v6 = v5;
    uint64_t v7 = v6;
    if (((_BYTE)v6[17] & 8) == 0) {
      dispatch_assert_queue_V2(v6[1]);
    }
  }
  if ((*((char *)v4 + 405) & 0x80000000) == 0 && gLogDatapath)
  {
    uint64_t v34 = __nwlog_obj();
    if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)int buf = 136446978;
      unsigned int v77 = "nw_protocol_instance_report_ready";
      __int16 v78 = 2082;
      int v79 = (char *)v4 + 407;
      __int16 v80 = 2080;
      uint64_t v81 = " ";
      __int16 v82 = 2048;
      unint64_t v83 = a2;
      _os_log_impl(&dword_1830D4000, v34, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sReporting flow %llx ready", buf, 0x2Au);
    }
  }
  if (*(_DWORD *)(v4[1] + 64) != 3)
  {
    if (a2 == -1)
    {
      *((unsigned char *)v4 + 402) |= 8u;
      nw_protocol_implementation_report_connected((NWConcrete_nw_protocol_instance *)v4, (nw_protocol *)(v4 - 12), (nw_protocol *)*(v4 - 6), 0xFFFFFFFFFFFFFFFFLL);
      nw_protocol_instance_update_available_paths((NWConcrete_nw_protocol_instance *)v4);
      goto LABEL_46;
    }
    uint64_t v35 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    unsigned int v77 = "nw_protocol_instance_report_ready";
    __int16 v31 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(p_paths_log_id_num) = 0;
    if (!__nwlog_fault(v31, type, &p_paths_log_id_num)) {
      goto LABEL_119;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v32 = __nwlog_obj();
      os_log_type_t v36 = type[0];
      if (os_log_type_enabled(v32, type[0]))
      {
        *(_DWORD *)int buf = 136446210;
        unsigned int v77 = "nw_protocol_instance_report_ready";
        _os_log_impl(&dword_1830D4000, v32, v36, "%{public}s called with null (flow == NW_PROTOCOL_DEFAULT_FLOW)", buf, 0xCu);
      }
    }
    else if ((_BYTE)p_paths_log_id_num)
    {
      BOOL v50 = (char *)__nw_create_backtrace_string();
      os_log_type_t v32 = __nwlog_obj();
      os_log_type_t v51 = type[0];
      BOOL v52 = os_log_type_enabled(v32, type[0]);
      if (v50)
      {
        if (v52)
        {
          *(_DWORD *)int buf = 136446466;
          unsigned int v77 = "nw_protocol_instance_report_ready";
          __int16 v78 = 2082;
          int v79 = v50;
          _os_log_impl(&dword_1830D4000, v32, v51, "%{public}s called with null (flow == NW_PROTOCOL_DEFAULT_FLOW), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v50);
        if (!v31) {
          goto LABEL_46;
        }
LABEL_120:
        free(v31);
        goto LABEL_46;
      }
      if (v52)
      {
        *(_DWORD *)int buf = 136446210;
        unsigned int v77 = "nw_protocol_instance_report_ready";
        _os_log_impl(&dword_1830D4000, v32, v51, "%{public}s called with null (flow == NW_PROTOCOL_DEFAULT_FLOW), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v32 = __nwlog_obj();
      os_log_type_t v60 = type[0];
      if (os_log_type_enabled(v32, type[0]))
      {
        *(_DWORD *)int buf = 136446210;
        unsigned int v77 = "nw_protocol_instance_report_ready";
        _os_log_impl(&dword_1830D4000, v32, v60, "%{public}s called with null (flow == NW_PROTOCOL_DEFAULT_FLOW), backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_118;
  }
  *((unsigned char *)v4 + 402) |= 8u;
  id v8 = (char *)v4[29];
  if (a2 >= 0xFFFFFFFFFFFFFFFELL)
  {
    v67[0] = MEMORY[0x1E4F143A8];
    v67[1] = 3221225472;
    v67[2] = __nw_protocol_instance_report_ready_block_invoke;
    v67[3] = &unk_1E523CB38;
    os_log_type_t v9 = v4;
    uint64_t v68 = v9;
    unint64_t v69 = a2;
    nw_hash_table_apply(v8, (uint64_t)v67);
    nw_protocol_instance_update_available_paths(v9);
    BOOL v10 = (void *)nw_protocol_instance_copy_path(v9, -1);
    id v11 = nw_path_copy_interface(v10);
    if ((*((char *)v4 + 405) & 0x80000000) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v12 = (id)gLogObj;
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)int buf = 136446978;
        unsigned int v77 = "nw_protocol_instance_report_ready";
        __int16 v78 = 2082;
        int v79 = (char *)&v9->flow_in_connected + 7;
        __int16 v80 = 2080;
        uint64_t v81 = " ";
        __int16 v82 = 2112;
        unint64_t v83 = (unint64_t)v11;
        _os_log_impl(&dword_1830D4000, v12, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}s%sCalling notify with interface %@", buf, 0x2Au);
      }
    }
    char v13 = *(const char **)&v9[-1].log_str[41];
    if (v13)
    {
      char v14 = (void *)*((void *)v13 + 5);
      if (v14 == &nw_protocol_ref_counted_handle)
      {
        uint64_t v21 = *((void *)v13 + 11);
        if (v21) {
          *((void *)v13 + 11) = v21 + 1;
        }
        char v15 = -1;
      }
      else
      {
        char v15 = 0;
      }
      *(void *)os_log_type_t type = v13;
      char v75 = v15;
      os_log_type_t v22 = *(void **)&v9[-1].log_str[33];
      if (v22 == &nw_protocol_ref_counted_handle)
      {
        uint64_t v24 = *(void *)&v9[-1].log_str[81];
        if (v24) {
          *(void *)&v9[-1].log_str[81] = v24 + 1;
        }
        char v23 = -1;
      }
      else
      {
        char v23 = 0;
      }
      p_paths_log_id_num = &v9[-1].paths_log_id_num;
      char v73 = v23;
      uint64_t v25 = *((void *)v13 + 3);
      if (v25)
      {
        uint64_t v26 = *(void (**)(const char *, unsigned __int16 *, uint64_t, id, uint64_t))(v25 + 160);
        if (v26)
        {
          v26(v13, &v9[-1].paths_log_id_num, 24, v11, 8);
          goto LABEL_40;
        }
      }
      os_log_type_t v40 = __nwlog_obj();
      BOOL v41 = (const char *)*((void *)v13 + 2);
      *(_DWORD *)int buf = 136446722;
      unsigned int v77 = "__nw_protocol_notify";
      if (!v41) {
        BOOL v41 = "invalid";
      }
      __int16 v78 = 2082;
      int v79 = (char *)v41;
      __int16 v80 = 2048;
      uint64_t v81 = v13;
      BOOL v42 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t v71 = OS_LOG_TYPE_ERROR;
      char v70 = 0;
      if (__nwlog_fault(v42, &v71, &v70))
      {
        if (v71 == OS_LOG_TYPE_FAULT)
        {
          os_log_type_t v43 = __nwlog_obj();
          os_log_type_t v44 = v71;
          if (os_log_type_enabled(v43, v71))
          {
            os_log_type_t v45 = (const char *)*((void *)v13 + 2);
            if (!v45) {
              os_log_type_t v45 = "invalid";
            }
            *(_DWORD *)int buf = 136446722;
            unsigned int v77 = "__nw_protocol_notify";
            __int16 v78 = 2082;
            int v79 = (char *)v45;
            __int16 v80 = 2048;
            uint64_t v81 = v13;
            _os_log_impl(&dword_1830D4000, v43, v44, "%{public}s protocol %{public}s (%p) has invalid notify callback", buf, 0x20u);
          }
        }
        else if (v70)
        {
          uint64_t v53 = (char *)__nw_create_backtrace_string();
          os_log_type_t v43 = __nwlog_obj();
          os_log_type_t v66 = v71;
          BOOL v54 = os_log_type_enabled(v43, v71);
          if (v53)
          {
            if (v54)
            {
              uint64_t v55 = (const char *)*((void *)v13 + 2);
              if (!v55) {
                uint64_t v55 = "invalid";
              }
              *(_DWORD *)int buf = 136446978;
              unsigned int v77 = "__nw_protocol_notify";
              __int16 v78 = 2082;
              int v79 = (char *)v55;
              __int16 v80 = 2048;
              uint64_t v81 = v13;
              __int16 v82 = 2082;
              unint64_t v83 = (unint64_t)v53;
              _os_log_impl(&dword_1830D4000, v43, v66, "%{public}s protocol %{public}s (%p) has invalid notify callback, dumping backtrace:%{public}s", buf, 0x2Au);
            }

            free(v53);
            goto LABEL_126;
          }
          if (v54)
          {
            uint64_t v63 = (const char *)*((void *)v13 + 2);
            if (!v63) {
              uint64_t v63 = "invalid";
            }
            *(_DWORD *)int buf = 136446722;
            unsigned int v77 = "__nw_protocol_notify";
            __int16 v78 = 2082;
            int v79 = (char *)v63;
            __int16 v80 = 2048;
            uint64_t v81 = v13;
            _os_log_impl(&dword_1830D4000, v43, v66, "%{public}s protocol %{public}s (%p) has invalid notify callback, no backtrace", buf, 0x20u);
          }
        }
        else
        {
          os_log_type_t v43 = __nwlog_obj();
          os_log_type_t v61 = v71;
          if (os_log_type_enabled(v43, v71))
          {
            BOOL v62 = (const char *)*((void *)v13 + 2);
            if (!v62) {
              BOOL v62 = "invalid";
            }
            *(_DWORD *)int buf = 136446722;
            unsigned int v77 = "__nw_protocol_notify";
            __int16 v78 = 2082;
            int v79 = (char *)v62;
            __int16 v80 = 2048;
            uint64_t v81 = v13;
            _os_log_impl(&dword_1830D4000, v43, v61, "%{public}s protocol %{public}s (%p) has invalid notify callback, backtrace limit exceeded", buf, 0x20u);
          }
        }
      }
LABEL_126:
      if (v42) {
        free(v42);
      }
LABEL_40:
      if (v22 == &nw_protocol_ref_counted_handle)
      {
        nw::release_if_needed<nw_protocol *>((uint64_t *)&p_paths_log_id_num);
        if (v14 == &nw_protocol_ref_counted_handle) {
LABEL_44:
        }
          nw::release_if_needed<nw_protocol *>((uint64_t *)type);
      }
      else if (v14 == &nw_protocol_ref_counted_handle)
      {
        goto LABEL_44;
      }
LABEL_45:

      goto LABEL_46;
    }
    os_log_type_t v46 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    unsigned int v77 = "__nw_protocol_notify";
    os_log_type_t v47 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(p_paths_log_id_num) = 0;
    if (__nwlog_fault(v47, type, &p_paths_log_id_num))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v48 = __nwlog_obj();
        os_log_type_t v49 = type[0];
        if (os_log_type_enabled(v48, type[0]))
        {
          *(_DWORD *)int buf = 136446210;
          unsigned int v77 = "__nw_protocol_notify";
          _os_log_impl(&dword_1830D4000, v48, v49, "%{public}s called with null protocol", buf, 0xCu);
        }
      }
      else if ((_BYTE)p_paths_log_id_num)
      {
        char v57 = (char *)__nw_create_backtrace_string();
        os_log_type_t v48 = __nwlog_obj();
        os_log_type_t v58 = type[0];
        BOOL v59 = os_log_type_enabled(v48, type[0]);
        if (v57)
        {
          if (v59)
          {
            *(_DWORD *)int buf = 136446466;
            unsigned int v77 = "__nw_protocol_notify";
            __int16 v78 = 2082;
            int v79 = v57;
            _os_log_impl(&dword_1830D4000, v48, v58, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v57);
          goto LABEL_137;
        }
        if (v59)
        {
          *(_DWORD *)int buf = 136446210;
          unsigned int v77 = "__nw_protocol_notify";
          _os_log_impl(&dword_1830D4000, v48, v58, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        os_log_type_t v48 = __nwlog_obj();
        os_log_type_t v64 = type[0];
        if (os_log_type_enabled(v48, type[0]))
        {
          *(_DWORD *)int buf = 136446210;
          unsigned int v77 = "__nw_protocol_notify";
          _os_log_impl(&dword_1830D4000, v48, v64, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_137:
    if (v47) {
      free(v47);
    }
    goto LABEL_45;
  }
  uint64_t node = nw_hash_table_get_node(v4[29], a2, 8);
  if (node)
  {
    uint64_t v17 = node;
    __int16 v18 = *(_WORD *)(node + 84);
    if ((v18 & 0x10) == 0)
    {
      __int16 v19 = v18 | 0x10;
      *(_WORD *)(node + 84) = v18 | 0x10;
      if ((v18 & 4) != 0)
      {
        uint64_t v27 = *(nw_protocol **)(node + 16);
        os_log_type_t v28 = v4;
        if (nw_protocol_definition_get_message_is_stream((void *)v4[1])
          && *(nw_protocol **)&v28[-1].log_str[41] == v27)
        {
          unint64_t v29 = -2;
        }
        else
        {
          unint64_t v29 = (unint64_t)v27;
        }

        nw_protocol_implementation_report_connected(v28, (nw_protocol *)(v4 - 12), v27, v29);
      }
      else
      {
        if ((*((char *)v4 + 405) & 0x80000000) == 0 && gLogDatapath)
        {
          os_log_type_t v65 = __nwlog_obj();
          if (os_log_type_enabled(v65, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)int buf = 136446978;
            unsigned int v77 = "nw_protocol_instance_report_ready";
            __int16 v78 = 2082;
            int v79 = (char *)v4 + 407;
            __int16 v80 = 2080;
            uint64_t v81 = " ";
            __int16 v82 = 2048;
            unint64_t v83 = a2;
            _os_log_impl(&dword_1830D4000, v65, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sDelaying the delivery of connected() on flow %llx", buf, 0x2Au);
          }

          __int16 v19 = *(_WORD *)(v17 + 84);
        }
        *(_WORD *)(v17 + 84) = v19 | 0x20;
      }
    }
  }
  else if ((*((char *)v4 + 405) & 0x80000000) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    char v20 = (id)gLogObj;
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136446978;
      unsigned int v77 = "nw_protocol_instance_report_ready";
      __int16 v78 = 2082;
      int v79 = (char *)v4 + 407;
      __int16 v80 = 2080;
      uint64_t v81 = " ";
      __int16 v82 = 2048;
      unint64_t v83 = a2;
      _os_log_impl(&dword_1830D4000, v20, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sCannot report ready, flow %llx does not exist", buf, 0x2Au);
    }
  }
LABEL_46:
}

void sub_183239294(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_protocol_implementation_copy_info(void *a1, int a2, uint64_t a3)
{
  uint64_t v106 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    __int16 v6 = (void *)a1[5];
    uint64_t v7 = a1 + 12;
    if (v6 != &nw_protocol_ref_counted_handle) {
      uint64_t v7 = 0;
    }
    id v8 = v7;
    os_log_type_t v9 = (char *)v8;
    if (v6 == &nw_protocol_ref_counted_handle)
    {
      uint64_t v10 = v8[1];
      if (v10)
      {
        id v11 = *(void **)(v10 + 80);
        if (v11)
        {
          if (a2 <= 253)
          {
            if (a2 == 4)
            {
              __int16 v19 = (void *)a1[4];
              if (v19)
              {
                uint64_t v20 = v19[3];
                if (v20)
                {
                  uint64_t v21 = *(uint64_t (**)(void))(v20 + 224);
                  if (v21)
                  {
                    os_log_type_t v22 = (void *)v19[5];
                    if (v22 == &nw_protocol_ref_counted_handle)
                    {
                      uint64_t v41 = v19[11];
                      if (v41) {
                        v19[11] = v41 + 1;
                      }
                      char v23 = -1;
                    }
                    else
                    {
                      char v23 = 0;
                    }
                    *(void *)int buf = v19;
                    buf[8] = v23;
                    uint64_t v36 = v21();
                    if (v22 == &nw_protocol_ref_counted_handle) {
                      nw::release_if_needed<nw_protocol *>((uint64_t *)buf);
                    }
                    if (v36) {
                      goto LABEL_187;
                    }
                    id v11 = *(void **)(*((void *)v9 + 1) + 80);
                  }
                }
              }
              BOOL v42 = (uint64_t (*)(char *))v11[25];
              if (v42)
              {
                uint64_t v40 = v42(v9);
                goto LABEL_62;
              }
              goto LABEL_186;
            }
            if (a2 == 5)
            {
              id v12 = (void *)a1[4];
              if (v12 && (uint64_t v13 = v12[3]) != 0 && (v14 = *(uint64_t (**)(void))(v13 + 224)) != 0)
              {
                char v15 = (void *)v12[5];
                if (v15 == &nw_protocol_ref_counted_handle)
                {
                  uint64_t v39 = v12[11];
                  if (v39) {
                    v12[11] = v39 + 1;
                  }
                  char v16 = -1;
                }
                else
                {
                  char v16 = 0;
                }
                *(void *)int buf = v12;
                buf[8] = v16;
                uint64_t v34 = v14();
                if (v15 == &nw_protocol_ref_counted_handle) {
                  nw::release_if_needed<nw_protocol *>((uint64_t *)buf);
                }
                uint64_t v35 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(*((void *)v9 + 1) + 80)
                                                                         + 192);
                if (v35) {
                  goto LABEL_52;
                }
              }
              else
              {
                uint64_t v34 = 0;
                uint64_t v35 = (uint64_t (*)(char *, uint64_t, uint64_t))v11[24];
                if (v35)
                {
LABEL_52:
                  uint64_t v40 = v35(v9, v34, a3);
LABEL_62:
                  uint64_t v36 = v40;
LABEL_187:

                  return v36;
                }
              }
LABEL_186:
              uint64_t v36 = 0;
              goto LABEL_187;
            }
LABEL_35:
            unint64_t v29 = (void *)a1[4];
            if (!v29) {
              goto LABEL_186;
            }
            uint64_t v30 = v29[3];
            if (!v30) {
              goto LABEL_186;
            }
            __int16 v31 = *(uint64_t (**)(void))(v30 + 224);
            if (!v31) {
              goto LABEL_186;
            }
            os_log_type_t v32 = (void *)v29[5];
            if (v32 == &nw_protocol_ref_counted_handle)
            {
              uint64_t v45 = v29[11];
              if (v45) {
                v29[11] = v45 + 1;
              }
              char v33 = -1;
            }
            else
            {
              char v33 = 0;
            }
            *(void *)os_log_type_t type = v29;
            char v98 = v33;
            if (a2)
            {
              uint64_t v36 = v31();
              if (v32 != &nw_protocol_ref_counted_handle) {
                goto LABEL_187;
              }
LABEL_79:
              nw::release_if_needed<nw_protocol *>((uint64_t *)type);
              goto LABEL_187;
            }
            int v94 = v32;
            uint64_t v84 = __nwlog_obj();
            *(_DWORD *)int buf = 136446210;
            *(void *)&uint8_t buf[4] = "__nw_protocol_copy_info";
            unsigned int v85 = (char *)_os_log_send_and_compose_impl();

            os_log_type_t v96 = OS_LOG_TYPE_ERROR;
            char v95 = 0;
            if (__nwlog_fault(v85, &v96, &v95))
            {
              if (v96 == OS_LOG_TYPE_FAULT)
              {
                BOOL v86 = __nwlog_obj();
                os_log_type_t v87 = v96;
                if (os_log_type_enabled(v86, v96))
                {
                  *(_DWORD *)int buf = 136446210;
                  *(void *)&uint8_t buf[4] = "__nw_protocol_copy_info";
                  _os_log_impl(&dword_1830D4000, v86, v87, "%{public}s called with null type", buf, 0xCu);
                }
LABEL_202:

                goto LABEL_203;
              }
              if (!v95)
              {
                BOOL v86 = __nwlog_obj();
                os_log_type_t v93 = v96;
                if (os_log_type_enabled(v86, v96))
                {
                  *(_DWORD *)int buf = 136446210;
                  *(void *)&uint8_t buf[4] = "__nw_protocol_copy_info";
                  _os_log_impl(&dword_1830D4000, v86, v93, "%{public}s called with null type, backtrace limit exceeded", buf, 0xCu);
                }
                goto LABEL_202;
              }
              backtrace_string = (char *)__nw_create_backtrace_string();
              BOOL v86 = __nwlog_obj();
              os_log_type_t v91 = v96;
              BOOL v92 = os_log_type_enabled(v86, v96);
              if (!backtrace_string)
              {
                if (v92)
                {
                  *(_DWORD *)int buf = 136446210;
                  *(void *)&uint8_t buf[4] = "__nw_protocol_copy_info";
                  _os_log_impl(&dword_1830D4000, v86, v91, "%{public}s called with null type, no backtrace", buf, 0xCu);
                }
                goto LABEL_202;
              }
              if (v92)
              {
                *(_DWORD *)int buf = 136446466;
                *(void *)&uint8_t buf[4] = "__nw_protocol_copy_info";
                __int16 v100 = 2082;
                os_log_type_t v101 = backtrace_string;
                _os_log_impl(&dword_1830D4000, v86, v91, "%{public}s called with null type, dumping backtrace:%{public}s", buf, 0x16u);
              }

              free(backtrace_string);
            }
LABEL_203:
            if (v85) {
              free(v85);
            }
            uint64_t v36 = 0;
            if (v94 != &nw_protocol_ref_counted_handle) {
              goto LABEL_187;
            }
            goto LABEL_79;
          }
          if (a2 == 254)
          {
            uint64_t v24 = (void *)a1[4];
            if (v24 && (uint64_t v25 = v24[3]) != 0 && (v26 = *(uint64_t (**)(void))(v25 + 224)) != 0)
            {
              uint64_t v27 = (void *)v24[5];
              if (v27 == &nw_protocol_ref_counted_handle)
              {
                uint64_t v43 = v24[11];
                if (v43) {
                  v24[11] = v43 + 1;
                }
                char v28 = -1;
              }
              else
              {
                char v28 = 0;
              }
              *(void *)int buf = v24;
              buf[8] = v28;
              uint64_t v36 = v26();
              if (v27 == &nw_protocol_ref_counted_handle) {
                nw::release_if_needed<nw_protocol *>((uint64_t *)buf);
              }
              uint64_t v37 = *(uint64_t (**)(char *))(*(void *)(*((void *)v9 + 1) + 80) + 184);
              if (!v37) {
                goto LABEL_187;
              }
            }
            else
            {
              uint64_t v36 = 0;
              uint64_t v37 = (uint64_t (*)(char *))v11[23];
              if (!v37) {
                goto LABEL_187;
              }
            }
            os_log_type_t v44 = (void *)v37(v9);
            if (v44)
            {
              if (!v36) {
                uint64_t v36 = nw_array_create();
              }
              nw_array_append(v36, v44);
            }

            goto LABEL_187;
          }
          if (a2 != 255) {
            goto LABEL_35;
          }
          if (!a3)
          {
            if (v8[32])
            {
              uint64_t v38 = nw_array_create();
              nw_array_append(v38, *((void **)v9 + 32));
              goto LABEL_109;
            }
            goto LABEL_84;
          }
          if (*(_DWORD *)(v10 + 64) != 3)
          {
LABEL_84:
            os_log_type_t v47 = (void *)a1[4];
            if (v47 && (v48 = v47[3]) != 0 && (os_log_type_t v49 = *(uint64_t (**)(void))(v48 + 224)) != 0)
            {
              BOOL v50 = (void *)v47[5];
              if (v50 == &nw_protocol_ref_counted_handle)
              {
                uint64_t v52 = v47[11];
                if (v52) {
                  v47[11] = v52 + 1;
                }
                char v51 = -1;
              }
              else
              {
                char v51 = 0;
              }
              *(void *)int buf = v47;
              buf[8] = v51;
              uint64_t v38 = v49();
              if (v50 == &nw_protocol_ref_counted_handle) {
                nw::release_if_needed<nw_protocol *>((uint64_t *)buf);
              }
            }
            else
            {
              uint64_t v38 = 0;
            }
            uint64_t v18 = -1;
            char v46 = 1;
LABEL_96:
            uint64_t v53 = *(uint64_t (**)(char *, uint64_t))(*(void *)(*((void *)v9 + 1) + 80) + 176);
            if (v53)
            {
              BOOL v54 = (void *)v53(v9, -1);
              if (v54)
              {
                if (!v38) {
                  uint64_t v38 = nw_array_create();
                }
                nw_array_append(v38, v54);
              }
              uint64_t v55 = *(uint64_t (**)(char *, uint64_t))(*(void *)(*((void *)v9 + 1) + 80) + 176);
              if (v46)
              {
                os_log_type_t v56 = (void *)v55(v9, -2);
                if (!v56) {
                  goto LABEL_108;
                }
              }
              else
              {
                os_log_type_t v56 = (void *)v55(v9, v18);
                if (!v56)
                {
LABEL_108:

                  goto LABEL_109;
                }
              }
              if (!v38) {
                uint64_t v38 = nw_array_create();
              }
              nw_array_append(v38, v56);
              goto LABEL_108;
            }
LABEL_109:
            uint64_t v36 = (uint64_t)(id)v38;

            goto LABEL_187;
          }
          if (nw_hash_table_get_node(v8[29], a3, 8))
          {
            uint64_t v17 = v9;
            if (nw_protocol_definition_get_message_is_stream(*((void **)v9 + 1))
              && *((void *)v17 - 6) == a3)
            {
              uint64_t v18 = -2;
            }
            else
            {
              uint64_t v18 = a3;
            }

            if (v9[405] < 0) {
              goto LABEL_82;
            }
          }
          else
          {
            uint64_t v18 = -1;
            if (v9[405] < 0) {
              goto LABEL_82;
            }
          }
          if (gLogDatapath)
          {
            id v89 = __nwlog_obj();
            if (os_log_type_enabled(v89, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)int buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_protocol_implementation_copy_info";
              __int16 v100 = 2082;
              os_log_type_t v101 = v9 + 407;
              __int16 v102 = 2080;
              os_log_type_t v103 = " ";
              __int16 v104 = 2048;
              uint64_t v105 = v18;
              _os_log_impl(&dword_1830D4000, v89, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sCopy metadata for flow %llx", buf, 0x2Au);
            }
          }
LABEL_82:
          if (v18 != -1)
          {
            char v46 = 0;
            uint64_t v38 = 0;
            goto LABEL_96;
          }
          goto LABEL_84;
        }
        uint32_t v67 = __nwlog_obj();
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_copy_info";
        BOOL v62 = (char *)_os_log_send_and_compose_impl();

        type[0] = OS_LOG_TYPE_ERROR;
        os_log_type_t v96 = OS_LOG_TYPE_DEFAULT;
        if (!__nwlog_fault(v62, type, &v96)) {
          goto LABEL_184;
        }
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          uint64_t v63 = __nwlog_obj();
          os_log_type_t v68 = type[0];
          if (os_log_type_enabled(v63, type[0]))
          {
            *(_DWORD *)int buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_protocol_implementation_copy_info";
            _os_log_impl(&dword_1830D4000, v63, v68, "%{public}s called with null instance->parent_definition->extended_state", buf, 0xCu);
          }
          goto LABEL_183;
        }
        if (v96 == OS_LOG_TYPE_DEFAULT)
        {
          uint64_t v63 = __nwlog_obj();
          os_log_type_t v83 = type[0];
          if (os_log_type_enabled(v63, type[0]))
          {
            *(_DWORD *)int buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_protocol_implementation_copy_info";
            _os_log_impl(&dword_1830D4000, v63, v83, "%{public}s called with null instance->parent_definition->extended_state, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_183;
        }
        char v75 = (char *)__nw_create_backtrace_string();
        uint64_t v63 = __nwlog_obj();
        os_log_type_t v78 = type[0];
        BOOL v79 = os_log_type_enabled(v63, type[0]);
        if (!v75)
        {
          if (v79)
          {
            *(_DWORD *)int buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_protocol_implementation_copy_info";
            _os_log_impl(&dword_1830D4000, v63, v78, "%{public}s called with null instance->parent_definition->extended_state, no backtrace", buf, 0xCu);
          }
          goto LABEL_183;
        }
        if (v79)
        {
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_implementation_copy_info";
          __int16 v100 = 2082;
          os_log_type_t v101 = v75;
          _os_log_impl(&dword_1830D4000, v63, v78, "%{public}s called with null instance->parent_definition->extended_state, dumping backtrace:%{public}s", buf, 0x16u);
        }
      }
      else
      {
        os_log_type_t v65 = __nwlog_obj();
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_copy_info";
        BOOL v62 = (char *)_os_log_send_and_compose_impl();

        type[0] = OS_LOG_TYPE_ERROR;
        os_log_type_t v96 = OS_LOG_TYPE_DEFAULT;
        if (!__nwlog_fault(v62, type, &v96)) {
          goto LABEL_184;
        }
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          uint64_t v63 = __nwlog_obj();
          os_log_type_t v66 = type[0];
          if (os_log_type_enabled(v63, type[0]))
          {
            *(_DWORD *)int buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_protocol_implementation_copy_info";
            _os_log_impl(&dword_1830D4000, v63, v66, "%{public}s called with null instance->parent_definition", buf, 0xCu);
          }
          goto LABEL_183;
        }
        if (v96 == OS_LOG_TYPE_DEFAULT)
        {
          uint64_t v63 = __nwlog_obj();
          os_log_type_t v82 = type[0];
          if (os_log_type_enabled(v63, type[0]))
          {
            *(_DWORD *)int buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_protocol_implementation_copy_info";
            _os_log_impl(&dword_1830D4000, v63, v82, "%{public}s called with null instance->parent_definition, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_183;
        }
        char v75 = (char *)__nw_create_backtrace_string();
        uint64_t v63 = __nwlog_obj();
        os_log_type_t v76 = type[0];
        BOOL v77 = os_log_type_enabled(v63, type[0]);
        if (!v75)
        {
          if (v77)
          {
            *(_DWORD *)int buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_protocol_implementation_copy_info";
            _os_log_impl(&dword_1830D4000, v63, v76, "%{public}s called with null instance->parent_definition, no backtrace", buf, 0xCu);
          }
          goto LABEL_183;
        }
        if (v77)
        {
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_implementation_copy_info";
          __int16 v100 = 2082;
          os_log_type_t v101 = v75;
          _os_log_impl(&dword_1830D4000, v63, v76, "%{public}s called with null instance->parent_definition, dumping backtrace:%{public}s", buf, 0x16u);
        }
      }

      free(v75);
      if (!v62) {
        goto LABEL_186;
      }
      goto LABEL_185;
    }
    os_log_type_t v61 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_implementation_copy_info";
    BOOL v62 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t v96 = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v62, type, &v96)) {
      goto LABEL_184;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      uint64_t v63 = __nwlog_obj();
      os_log_type_t v64 = type[0];
      if (os_log_type_enabled(v63, type[0]))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_copy_info";
        _os_log_impl(&dword_1830D4000, v63, v64, "%{public}s called with null instance", buf, 0xCu);
      }
    }
    else if (v96)
    {
      id v72 = (char *)__nw_create_backtrace_string();
      uint64_t v63 = __nwlog_obj();
      os_log_type_t v73 = type[0];
      BOOL v74 = os_log_type_enabled(v63, type[0]);
      if (v72)
      {
        if (v74)
        {
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_implementation_copy_info";
          __int16 v100 = 2082;
          os_log_type_t v101 = v72;
          _os_log_impl(&dword_1830D4000, v63, v73, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v72);
LABEL_184:
        if (!v62) {
          goto LABEL_186;
        }
LABEL_185:
        free(v62);
        goto LABEL_186;
      }
      if (v74)
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_copy_info";
        _os_log_impl(&dword_1830D4000, v63, v73, "%{public}s called with null instance, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v63 = __nwlog_obj();
      os_log_type_t v81 = type[0];
      if (os_log_type_enabled(v63, type[0]))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_copy_info";
        _os_log_impl(&dword_1830D4000, v63, v81, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_183:

    goto LABEL_184;
  }
  char v57 = __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_protocol_implementation_copy_info";
  os_log_type_t v58 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  os_log_type_t v96 = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v58, type, &v96))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      BOOL v59 = __nwlog_obj();
      os_log_type_t v60 = type[0];
      if (os_log_type_enabled(v59, type[0]))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_copy_info";
        _os_log_impl(&dword_1830D4000, v59, v60, "%{public}s called with null protocol", buf, 0xCu);
      }
    }
    else if (v96)
    {
      unint64_t v69 = (char *)__nw_create_backtrace_string();
      BOOL v59 = __nwlog_obj();
      os_log_type_t v70 = type[0];
      BOOL v71 = os_log_type_enabled(v59, type[0]);
      if (v69)
      {
        if (v71)
        {
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_implementation_copy_info";
          __int16 v100 = 2082;
          os_log_type_t v101 = v69;
          _os_log_impl(&dword_1830D4000, v59, v70, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v69);
        goto LABEL_172;
      }
      if (v71)
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_copy_info";
        _os_log_impl(&dword_1830D4000, v59, v70, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v59 = __nwlog_obj();
      os_log_type_t v80 = type[0];
      if (os_log_type_enabled(v59, type[0]))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_copy_info";
        _os_log_impl(&dword_1830D4000, v59, v80, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_172:
  if (v58) {
    free(v58);
  }
  return 0;
}

void sub_18323A2B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_protocol_instance_enumerate_flows_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v77 = *MEMORY[0x1E4F143B8];
  if (!a2)
  {
    uint64_t v9 = *(void *)(a1 + 32);
    if (v9 && *(char *)(v9 + 405) < 0) {
      return 1;
    }
    uint64_t v10 = __nwlog_obj();
    uint64_t v11 = *(void *)(a1 + 32);
    BOOL v12 = v11 == 0;
    if (v11) {
      uint64_t v13 = (const char *)(v11 + 407);
    }
    else {
      uint64_t v13 = "";
    }
    *(_DWORD *)int buf = 136446722;
    os_log_type_t v68 = "nw_protocol_instance_enumerate_flows_block_invoke";
    if (v12) {
      char v14 = "";
    }
    else {
      char v14 = " ";
    }
    __int16 v69 = 2082;
    os_log_type_t v70 = v13;
    __int16 v71 = 2080;
    id v72 = v14;
    char v15 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v65 = 0;
    if (__nwlog_fault(v15, &type, &v65))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        char v16 = __nwlog_obj();
        os_log_type_t v17 = type;
        if (os_log_type_enabled(v16, type))
        {
          uint64_t v18 = *(void *)(a1 + 32);
          BOOL v19 = v18 == 0;
          if (v18) {
            uint64_t v20 = (const char *)(v18 + 407);
          }
          else {
            uint64_t v20 = "";
          }
          *(_DWORD *)int buf = 136446722;
          if (v19) {
            uint64_t v21 = "";
          }
          else {
            uint64_t v21 = " ";
          }
          os_log_type_t v68 = "nw_protocol_instance_enumerate_flows_block_invoke";
          __int16 v69 = 2082;
          os_log_type_t v70 = v20;
          __int16 v71 = 2080;
          id v72 = v21;
          _os_log_impl(&dword_1830D4000, v16, v17, "%{public}s %{public}s%sNull node while enumerating flows", buf, 0x20u);
        }
      }
      else if (v65)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        char v16 = __nwlog_obj();
        os_log_type_t v34 = type;
        BOOL v35 = os_log_type_enabled(v16, type);
        if (backtrace_string)
        {
          if (v35)
          {
            uint64_t v36 = *(void *)(a1 + 32);
            BOOL v37 = v36 == 0;
            if (v36) {
              uint64_t v38 = (const char *)(v36 + 407);
            }
            else {
              uint64_t v38 = "";
            }
            if (v37) {
              uint64_t v39 = "";
            }
            else {
              uint64_t v39 = " ";
            }
            *(_DWORD *)int buf = 136446978;
            os_log_type_t v68 = "nw_protocol_instance_enumerate_flows_block_invoke";
            __int16 v69 = 2082;
            os_log_type_t v70 = v38;
            __int16 v71 = 2080;
            id v72 = v39;
            __int16 v73 = 2082;
            BOOL v74 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v16, v34, "%{public}s %{public}s%sNull node while enumerating flows, dumping backtrace:%{public}s", buf, 0x2Au);
          }

          free(backtrace_string);
          goto LABEL_106;
        }
        if (v35)
        {
          uint64_t v57 = *(void *)(a1 + 32);
          BOOL v58 = v57 == 0;
          if (v57) {
            BOOL v59 = (const char *)(v57 + 407);
          }
          else {
            BOOL v59 = "";
          }
          *(_DWORD *)int buf = 136446722;
          if (v58) {
            os_log_type_t v60 = "";
          }
          else {
            os_log_type_t v60 = " ";
          }
          os_log_type_t v68 = "nw_protocol_instance_enumerate_flows_block_invoke";
          __int16 v69 = 2082;
          os_log_type_t v70 = v59;
          __int16 v71 = 2080;
          id v72 = v60;
          _os_log_impl(&dword_1830D4000, v16, v34, "%{public}s %{public}s%sNull node while enumerating flows, no backtrace", buf, 0x20u);
        }
      }
      else
      {
        char v16 = __nwlog_obj();
        os_log_type_t v47 = type;
        if (os_log_type_enabled(v16, type))
        {
          uint64_t v48 = *(void *)(a1 + 32);
          BOOL v49 = v48 == 0;
          if (v48) {
            BOOL v50 = (const char *)(v48 + 407);
          }
          else {
            BOOL v50 = "";
          }
          *(_DWORD *)int buf = 136446722;
          if (v49) {
            char v51 = "";
          }
          else {
            char v51 = " ";
          }
          os_log_type_t v68 = "nw_protocol_instance_enumerate_flows_block_invoke";
          __int16 v69 = 2082;
          os_log_type_t v70 = v50;
          __int16 v71 = 2080;
          id v72 = v51;
          _os_log_impl(&dword_1830D4000, v16, v47, "%{public}s %{public}s%sNull node while enumerating flows, backtrace limit exceeded", buf, 0x20u);
        }
      }
    }
LABEL_106:
    if (!v15) {
      return 1;
    }
LABEL_107:
    free(v15);
    return 1;
  }
  id v4 = *(void **)(a2 + 16);
  id v5 = *(char **)(a1 + 32);
  if (!v4)
  {
    if (v5 && v5[405] < 0) {
      return 1;
    }
    os_log_type_t v22 = __nwlog_obj();
    uint64_t v23 = *(void *)(a1 + 32);
    BOOL v24 = v23 == 0;
    if (v23) {
      uint64_t v25 = (const char *)(v23 + 407);
    }
    else {
      uint64_t v25 = "";
    }
    *(_DWORD *)int buf = 136446978;
    os_log_type_t v68 = "nw_protocol_instance_enumerate_flows_block_invoke";
    __int16 v69 = 2082;
    os_log_type_t v70 = v25;
    if (v24) {
      uint64_t v26 = "";
    }
    else {
      uint64_t v26 = " ";
    }
    __int16 v71 = 2080;
    id v72 = v26;
    __int16 v73 = 2048;
    BOOL v74 = (char *)a2;
    char v15 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v65 = 0;
    if (__nwlog_fault(v15, &type, &v65))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v27 = __nwlog_obj();
        os_log_type_t v28 = type;
        if (os_log_type_enabled(v27, type))
        {
          uint64_t v29 = *(void *)(a1 + 32);
          BOOL v30 = v29 == 0;
          if (v29) {
            __int16 v31 = (const char *)(v29 + 407);
          }
          else {
            __int16 v31 = "";
          }
          *(_DWORD *)int buf = 136446978;
          if (v30) {
            os_log_type_t v32 = "";
          }
          else {
            os_log_type_t v32 = " ";
          }
          os_log_type_t v68 = "nw_protocol_instance_enumerate_flows_block_invoke";
          __int16 v69 = 2082;
          os_log_type_t v70 = v31;
          __int16 v71 = 2080;
          id v72 = v32;
          __int16 v73 = 2048;
          BOOL v74 = (char *)a2;
          _os_log_impl(&dword_1830D4000, v27, v28, "%{public}s %{public}s%sNull protocol in node %p", buf, 0x2Au);
        }
      }
      else if (v65)
      {
        uint64_t v40 = (char *)__nw_create_backtrace_string();
        uint64_t v27 = __nwlog_obj();
        os_log_type_t v41 = type;
        BOOL v42 = os_log_type_enabled(v27, type);
        if (v40)
        {
          if (v42)
          {
            uint64_t v43 = *(void *)(a1 + 32);
            BOOL v44 = v43 == 0;
            if (v43) {
              uint64_t v45 = (const char *)(v43 + 407);
            }
            else {
              uint64_t v45 = "";
            }
            if (v44) {
              char v46 = "";
            }
            else {
              char v46 = " ";
            }
            *(_DWORD *)int buf = 136447234;
            os_log_type_t v68 = "nw_protocol_instance_enumerate_flows_block_invoke";
            __int16 v69 = 2082;
            os_log_type_t v70 = v45;
            __int16 v71 = 2080;
            id v72 = v46;
            __int16 v73 = 2048;
            BOOL v74 = (char *)a2;
            __int16 v75 = 2082;
            os_log_type_t v76 = v40;
            _os_log_impl(&dword_1830D4000, v27, v41, "%{public}s %{public}s%sNull protocol in node %p, dumping backtrace:%{public}s", buf, 0x34u);
          }

          free(v40);
          if (!v15) {
            return 1;
          }
          goto LABEL_107;
        }
        if (v42)
        {
          uint64_t v61 = *(void *)(a1 + 32);
          BOOL v62 = (const char *)(v61 + 407);
          BOOL v63 = v61 == 0;
          os_log_type_t v64 = "";
          if (v63) {
            BOOL v62 = "";
          }
          *(_DWORD *)int buf = 136446978;
          if (!v63) {
            os_log_type_t v64 = " ";
          }
          os_log_type_t v68 = "nw_protocol_instance_enumerate_flows_block_invoke";
          __int16 v69 = 2082;
          os_log_type_t v70 = v62;
          __int16 v71 = 2080;
          id v72 = v64;
          __int16 v73 = 2048;
          BOOL v74 = (char *)a2;
          _os_log_impl(&dword_1830D4000, v27, v41, "%{public}s %{public}s%sNull protocol in node %p, no backtrace", buf, 0x2Au);
        }
      }
      else
      {
        uint64_t v27 = __nwlog_obj();
        os_log_type_t v52 = type;
        if (os_log_type_enabled(v27, type))
        {
          uint64_t v53 = *(void *)(a1 + 32);
          BOOL v54 = v53 == 0;
          if (v53) {
            uint64_t v55 = (const char *)(v53 + 407);
          }
          else {
            uint64_t v55 = "";
          }
          *(_DWORD *)int buf = 136446978;
          if (v54) {
            os_log_type_t v56 = "";
          }
          else {
            os_log_type_t v56 = " ";
          }
          os_log_type_t v68 = "nw_protocol_instance_enumerate_flows_block_invoke";
          __int16 v69 = 2082;
          os_log_type_t v70 = v55;
          __int16 v71 = 2080;
          id v72 = v56;
          __int16 v73 = 2048;
          BOOL v74 = (char *)a2;
          _os_log_impl(&dword_1830D4000, v27, v52, "%{public}s %{public}s%sNull protocol in node %p, backtrace limit exceeded", buf, 0x2Au);
        }
      }
    }
    goto LABEL_106;
  }
  __int16 v6 = v5;
  if (nw_protocol_definition_get_message_is_stream(v6[1]) && *(v6 - 6) == v4)
  {

    return 1;
  }

  if (v4 == (void *)-2) {
    return 1;
  }
  uint64_t v7 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v7();
}

uint64_t nw_protocol_definition_get_message_is_stream(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  unint64_t v1 = a1;
  unint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = (v1[184] >> 2) & 1;
    goto LABEL_3;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  char v16 = "nw_protocol_definition_get_message_is_stream";
  __int16 v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        char v16 = "nw_protocol_definition_get_message_is_stream";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null definition", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          char v16 = "nw_protocol_definition_get_message_is_stream";
          __int16 v17 = 2082;
          uint64_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null definition, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        char v16 = "nw_protocol_definition_get_message_is_stream";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null definition, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        char v16 = "nw_protocol_definition_get_message_is_stream";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null definition, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

BOOL nw_protocol_udp_copy_info(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v36 = "nw_protocol_udp_copy_info";
    __int16 v17 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v33 = 0;
    if (!__nwlog_fault(v17, &type, &v33)) {
      goto LABEL_67;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v18 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v36 = "nw_protocol_udp_copy_info";
        uint64_t v20 = "%{public}s called with null protocol";
LABEL_66:
        _os_log_impl(&dword_1830D4000, v18, v19, v20, buf, 0xCu);
      }
LABEL_67:
      if (v17) {
        free(v17);
      }
      return 0;
    }
    if (!v33)
    {
      uint64_t v18 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v36 = "nw_protocol_udp_copy_info";
        uint64_t v20 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_66;
      }
      goto LABEL_67;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v18 = __nwlog_obj();
    os_log_type_t v19 = type;
    BOOL v26 = os_log_type_enabled(v18, type);
    if (!backtrace_string)
    {
      if (v26)
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v36 = "nw_protocol_udp_copy_info";
        uint64_t v20 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_66;
      }
      goto LABEL_67;
    }
    if (v26)
    {
      *(_DWORD *)int buf = 136446466;
      uint64_t v36 = "nw_protocol_udp_copy_info";
      __int16 v37 = 2082;
      uint64_t v38 = (uint64_t)backtrace_string;
      uint64_t v27 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_47:
      _os_log_impl(&dword_1830D4000, v18, v19, v27, buf, 0x16u);
    }
LABEL_48:
    free(backtrace_string);
    goto LABEL_67;
  }
  if (*(_UNKNOWN **)(a1 + 40) != &nw_protocol_ref_counted_handle)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v36 = "nw_protocol_udp_copy_info";
    __int16 v17 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v33 = 0;
    if (!__nwlog_fault(v17, &type, &v33)) {
      goto LABEL_67;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v18 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v36 = "nw_protocol_udp_copy_info";
        uint64_t v20 = "%{public}s called with null udp";
        goto LABEL_66;
      }
      goto LABEL_67;
    }
    if (!v33)
    {
      uint64_t v18 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v36 = "nw_protocol_udp_copy_info";
        uint64_t v20 = "%{public}s called with null udp, backtrace limit exceeded";
        goto LABEL_66;
      }
      goto LABEL_67;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v18 = __nwlog_obj();
    os_log_type_t v19 = type;
    BOOL v28 = os_log_type_enabled(v18, type);
    if (!backtrace_string)
    {
      if (v28)
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v36 = "nw_protocol_udp_copy_info";
        uint64_t v20 = "%{public}s called with null udp, no backtrace";
        goto LABEL_66;
      }
      goto LABEL_67;
    }
    if (v28)
    {
      *(_DWORD *)int buf = 136446466;
      uint64_t v36 = "nw_protocol_udp_copy_info";
      __int16 v37 = 2082;
      uint64_t v38 = (uint64_t)backtrace_string;
      uint64_t v27 = "%{public}s called with null udp, dumping backtrace:%{public}s";
      goto LABEL_47;
    }
    goto LABEL_48;
  }
  int v5 = a2;
  uint64_t v6 = *(void *)(a1 + 32);
  if (!v6
    || (uint64_t v7 = *(void *)(v6 + 24)) == 0
    || (os_log_type_t v8 = *(uint64_t (**)(uint64_t, uint64_t, void *))(v7 + 224)) == 0)
  {
    BOOL v11 = 0;
    goto LABEL_12;
  }
  uint64_t v9 = *(void **)(v6 + 40);
  if (v9 == &nw_protocol_ref_counted_handle)
  {
    uint64_t v10 = *(void *)(v6 + 88);
    if (v10) {
      *(void *)(v6 + 88) = v10 + 1;
    }
  }
  if (a2)
  {
    BOOL v11 = (void *)v8(v6, a2, a3);
    if (v9 != &nw_protocol_ref_counted_handle) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  uint64_t v36 = "__nw_protocol_copy_info";
  uint64_t v21 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v33 = 0;
  if (__nwlog_fault(v21, &type, &v33))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v22 = __nwlog_obj();
      os_log_type_t v23 = type;
      if (!os_log_type_enabled(v22, type)) {
        goto LABEL_73;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v36 = "__nw_protocol_copy_info";
      BOOL v24 = "%{public}s called with null type";
LABEL_72:
      _os_log_impl(&dword_1830D4000, v22, v23, v24, buf, 0xCu);
      goto LABEL_73;
    }
    if (!v33)
    {
      os_log_type_t v22 = __nwlog_obj();
      os_log_type_t v23 = type;
      if (!os_log_type_enabled(v22, type)) {
        goto LABEL_73;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v36 = "__nw_protocol_copy_info";
      BOOL v24 = "%{public}s called with null type, backtrace limit exceeded";
      goto LABEL_72;
    }
    uint64_t v29 = (char *)__nw_create_backtrace_string();
    os_log_type_t v22 = __nwlog_obj();
    os_log_type_t v23 = type;
    BOOL v30 = os_log_type_enabled(v22, type);
    if (!v29)
    {
      if (!v30) {
        goto LABEL_73;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v36 = "__nw_protocol_copy_info";
      BOOL v24 = "%{public}s called with null type, no backtrace";
      goto LABEL_72;
    }
    if (v30)
    {
      *(_DWORD *)int buf = 136446466;
      uint64_t v36 = "__nw_protocol_copy_info";
      __int16 v37 = 2082;
      uint64_t v38 = (uint64_t)v29;
      _os_log_impl(&dword_1830D4000, v22, v23, "%{public}s called with null type, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v29);
  }
LABEL_73:
  if (v21) {
    free(v21);
  }
  BOOL v11 = 0;
  if (v9 == &nw_protocol_ref_counted_handle)
  {
LABEL_11:
    if (*(_UNKNOWN **)(v6 + 40) == &nw_protocol_ref_counted_handle)
    {
      uint64_t v13 = *(void *)(v6 + 88);
      if (v13)
      {
        uint64_t v14 = v13 - 1;
        *(void *)(v6 + 88) = v14;
        if (!v14)
        {
          char v15 = *(void (***)(void))(v6 + 64);
          if (v15)
          {
            *(void *)(v6 + 64) = 0;
            v15[2](v15);
            _Block_release(v15);
          }
          if (*(unsigned char *)(v6 + 72))
          {
            char v16 = *(const void **)(v6 + 64);
            if (v16) {
              _Block_release(v16);
            }
          }
          free((void *)v6);
        }
      }
    }
  }
LABEL_12:
  if (v5 != 5) {
    return (BOOL)v11;
  }
  if (v11 || (BOOL v11 = malloc_type_calloc(1uLL, 0xB8uLL, 0xEAFB8F1AuLL)) != 0)
  {
LABEL_15:
    v11[6] = *(void *)(a1 + 104);
    v11[9] = *(void *)(a1 + 96);
    if (a3) {
      *a3 = 184;
    }
    return (BOOL)v11;
  }
  __int16 v31 = __nwlog_obj();
  os_log_type_enabled(v31, OS_LOG_TYPE_ERROR);
  *(_DWORD *)int buf = 136446722;
  uint64_t v36 = "strict_calloc";
  __int16 v37 = 2048;
  uint64_t v38 = 1;
  __int16 v39 = 2048;
  uint64_t v40 = 184;
  os_log_type_t v32 = (void *)_os_log_send_and_compose_impl();
  BOOL result = __nwlog_abort((uint64_t)v32);
  if (!result)
  {
    free(v32);
    BOOL v11 = 0;
    goto LABEL_15;
  }
  __break(1u);
  return result;
}

uint64_t nw_protocol_copy_info_quiet(uint64_t a1, int a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 0;
  }
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    return 0;
  }
  id v4 = *(uint64_t (**)(uint64_t))(v3 + 224);
  if (!v4) {
    return 0;
  }
  int v5 = *(void **)(a1 + 40);
  if (v5 == &nw_protocol_ref_counted_handle)
  {
    uint64_t v6 = *(void *)(a1 + 88);
    if (v6) {
      *(void *)(a1 + 88) = v6 + 1;
    }
  }
  if (a2)
  {
    uint64_t v7 = v4(a1);
    if (v5 != &nw_protocol_ref_counted_handle) {
      return v7;
    }
    goto LABEL_9;
  }
  __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  os_log_type_t v22 = "__nw_protocol_copy_info";
  uint64_t v13 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v19 = 0;
  if (__nwlog_fault(v13, &type, &v19))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (!os_log_type_enabled(v14, type)) {
        goto LABEL_34;
      }
      *(_DWORD *)int buf = 136446210;
      os_log_type_t v22 = "__nw_protocol_copy_info";
      char v16 = "%{public}s called with null type";
LABEL_33:
      _os_log_impl(&dword_1830D4000, v14, v15, v16, buf, 0xCu);
      goto LABEL_34;
    }
    if (!v19)
    {
      uint64_t v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (!os_log_type_enabled(v14, type)) {
        goto LABEL_34;
      }
      *(_DWORD *)int buf = 136446210;
      os_log_type_t v22 = "__nw_protocol_copy_info";
      char v16 = "%{public}s called with null type, backtrace limit exceeded";
      goto LABEL_33;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v14 = __nwlog_obj();
    os_log_type_t v15 = type;
    BOOL v18 = os_log_type_enabled(v14, type);
    if (!backtrace_string)
    {
      if (!v18) {
        goto LABEL_34;
      }
      *(_DWORD *)int buf = 136446210;
      os_log_type_t v22 = "__nw_protocol_copy_info";
      char v16 = "%{public}s called with null type, no backtrace";
      goto LABEL_33;
    }
    if (v18)
    {
      *(_DWORD *)int buf = 136446466;
      os_log_type_t v22 = "__nw_protocol_copy_info";
      __int16 v23 = 2082;
      BOOL v24 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v14, v15, "%{public}s called with null type, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(backtrace_string);
  }
LABEL_34:
  if (v13) {
    free(v13);
  }
  uint64_t v7 = 0;
  if (v5 == &nw_protocol_ref_counted_handle)
  {
LABEL_9:
    if (*(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
    {
      uint64_t v9 = *(void *)(a1 + 88);
      if (v9)
      {
        uint64_t v10 = v9 - 1;
        *(void *)(a1 + 88) = v10;
        if (!v10)
        {
          BOOL v11 = *(void (***)(void))(a1 + 64);
          if (v11)
          {
            *(void *)(a1 + 64) = 0;
            v11[2](v11);
            _Block_release(v11);
          }
          if (*(unsigned char *)(a1 + 72))
          {
            os_log_type_t v12 = *(const void **)(a1 + 64);
            if (v12) {
              _Block_release(v12);
            }
          }
          free((void *)a1);
        }
      }
    }
  }
  return v7;
}

BOOL nw_protocol_ipv4_copy_info(uint64_t a1, int a2, void *a3)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v20 = "nw_protocol_ipv4_copy_info";
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v17 = 0;
    if (!__nwlog_fault(v6, &type, &v17)) {
      goto LABEL_36;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v17)
      {
        uint64_t v7 = __nwlog_obj();
        os_log_type_t v8 = type;
        if (!os_log_type_enabled(v7, type)) {
          goto LABEL_36;
        }
        *(_DWORD *)int buf = 136446210;
        uint64_t v20 = "nw_protocol_ipv4_copy_info";
        uint64_t v9 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_35;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (!backtrace_string)
      {
        if (!v11) {
          goto LABEL_36;
        }
        *(_DWORD *)int buf = 136446210;
        uint64_t v20 = "nw_protocol_ipv4_copy_info";
        uint64_t v9 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_35;
      }
      if (v11)
      {
        *(_DWORD *)int buf = 136446466;
        uint64_t v20 = "nw_protocol_ipv4_copy_info";
        __int16 v21 = 2082;
        uint64_t v22 = (uint64_t)backtrace_string;
        os_log_type_t v12 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_25:
        _os_log_impl(&dword_1830D4000, v7, v8, v12, buf, 0x16u);
      }
LABEL_26:
      free(backtrace_string);
      goto LABEL_36;
    }
    uint64_t v7 = __nwlog_obj();
    os_log_type_t v8 = type;
    if (!os_log_type_enabled(v7, type)) {
      goto LABEL_36;
    }
    *(_DWORD *)int buf = 136446210;
    uint64_t v20 = "nw_protocol_ipv4_copy_info";
    uint64_t v9 = "%{public}s called with null protocol";
LABEL_35:
    _os_log_impl(&dword_1830D4000, v7, v8, v9, buf, 0xCu);
LABEL_36:
    if (v6) {
      free(v6);
    }
    return 0;
  }
  if (*(_UNKNOWN **)(a1 + 40) != &nw_protocol_ref_counted_handle)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v20 = "nw_protocol_ipv4_copy_info";
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v17 = 0;
    if (!__nwlog_fault(v6, &type, &v17)) {
      goto LABEL_36;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_36;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v20 = "nw_protocol_ipv4_copy_info";
      uint64_t v9 = "%{public}s called with null ipv4";
      goto LABEL_35;
    }
    if (!v17)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_36;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v20 = "nw_protocol_ipv4_copy_info";
      uint64_t v9 = "%{public}s called with null ipv4, backtrace limit exceeded";
      goto LABEL_35;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v7 = __nwlog_obj();
    os_log_type_t v8 = type;
    BOOL v16 = os_log_type_enabled(v7, type);
    if (backtrace_string)
    {
      if (v16)
      {
        *(_DWORD *)int buf = 136446466;
        uint64_t v20 = "nw_protocol_ipv4_copy_info";
        __int16 v21 = 2082;
        uint64_t v22 = (uint64_t)backtrace_string;
        os_log_type_t v12 = "%{public}s called with null ipv4, dumping backtrace:%{public}s";
        goto LABEL_25;
      }
      goto LABEL_26;
    }
    if (!v16) {
      goto LABEL_36;
    }
    *(_DWORD *)int buf = 136446210;
    uint64_t v20 = "nw_protocol_ipv4_copy_info";
    uint64_t v9 = "%{public}s called with null ipv4, no backtrace";
    goto LABEL_35;
  }
  if (a2 != 5) {
    return 0;
  }
  int v5 = (char *)malloc_type_calloc(1uLL, 0xB8uLL, 0xEAFB8F1AuLL);
  if (v5) {
    goto LABEL_5;
  }
  uint64_t v13 = __nwlog_obj();
  os_log_type_enabled(v13, OS_LOG_TYPE_ERROR);
  *(_DWORD *)int buf = 136446722;
  uint64_t v20 = "strict_calloc";
  __int16 v21 = 2048;
  uint64_t v22 = 1;
  __int16 v23 = 2048;
  uint64_t v24 = 184;
  uint64_t v14 = (void *)_os_log_send_and_compose_impl();
  BOOL result = __nwlog_abort((uint64_t)v14);
  if (!result)
  {
    free(v14);
LABEL_5:
    *(_OWORD *)(v5 + 8) = *(_OWORD *)(a1 + 104);
    *(_OWORD *)(v5 + 24) = *(_OWORD *)(a1 + 120);
    *((void *)v5 + 5) = *(void *)(a1 + 96);
    if (a3) {
      *a3 = 184;
    }
    return (BOOL)v5;
  }
  __break(1u);
  return result;
}

void nw_context_purge_endpoints(NWConcrete_nw_context *a1, int a2)
{
  uint64_t v128 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1;
  id v4 = v3;
  if (!v3)
  {
    os_log_type_t v56 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_context_purge_endpoints";
    BOOL v50 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    char v123 = 0;
    if (!__nwlog_fault(v50, type, &v123)) {
      goto LABEL_179;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      char v51 = __nwlog_obj();
      os_log_type_t v57 = type[0];
      if (os_log_type_enabled(v51, type[0]))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_context_purge_endpoints";
        _os_log_impl(&dword_1830D4000, v51, v57, "%{public}s called with null context", buf, 0xCu);
      }
    }
    else if (v123)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      char v51 = __nwlog_obj();
      os_log_type_t v86 = type[0];
      BOOL v87 = os_log_type_enabled(v51, type[0]);
      if (backtrace_string)
      {
        if (v87)
        {
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_context_purge_endpoints";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&void buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v51, v86, "%{public}s called with null context, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_179:
        if (!v50) {
          goto LABEL_60;
        }
LABEL_180:
        free(v50);
        goto LABEL_60;
      }
      if (v87)
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_context_purge_endpoints";
        _os_log_impl(&dword_1830D4000, v51, v86, "%{public}s called with null context, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      char v51 = __nwlog_obj();
      os_log_type_t v105 = type[0];
      if (os_log_type_enabled(v51, type[0]))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_context_purge_endpoints";
        _os_log_impl(&dword_1830D4000, v51, v105, "%{public}s called with null context, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_178:

    goto LABEL_179;
  }
  int v5 = v3;
  uint64_t v6 = v5;
  if ((*((unsigned char *)v5 + 136) & 8) == 0) {
    dispatch_assert_queue_V2(*((dispatch_queue_t *)v5 + 1));
  }

  if ((*((unsigned char *)v6 + 136) & 0x24) == 0)
  {
    BOOL v58 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_context_purge_endpoints";
    BOOL v50 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    char v123 = 0;
    if (!__nwlog_fault(v50, type, &v123)) {
      goto LABEL_179;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      char v51 = __nwlog_obj();
      os_log_type_t v59 = type[0];
      if (os_log_type_enabled(v51, type[0]))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_context_purge_endpoints";
        _os_log_impl(&dword_1830D4000, v51, v59, "%{public}s called with null (context->is_implicit || context->is_isolated_context)", buf, 0xCu);
      }
      goto LABEL_178;
    }
    if (!v123)
    {
      char v51 = __nwlog_obj();
      os_log_type_t v106 = type[0];
      if (os_log_type_enabled(v51, type[0]))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_context_purge_endpoints";
        _os_log_impl(&dword_1830D4000, v51, v106, "%{public}s called with null (context->is_implicit || context->is_isolated_context), backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_178;
    }
    uint64_t v53 = (char *)__nw_create_backtrace_string();
    char v51 = __nwlog_obj();
    os_log_type_t v88 = type[0];
    BOOL v89 = os_log_type_enabled(v51, type[0]);
    if (!v53)
    {
      if (v89)
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_context_purge_endpoints";
        _os_log_impl(&dword_1830D4000, v51, v88, "%{public}s called with null (context->is_implicit || context->is_isolated_context), no backtrace", buf, 0xCu);
      }
      goto LABEL_178;
    }
    if (v89)
    {
      *(_DWORD *)int buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_context_purge_endpoints";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&void buf[14] = v53;
      _os_log_impl(&dword_1830D4000, v51, v88, "%{public}s called with null (context->is_implicit || context->is_isolated_context), dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_123;
  }
  uint64_t v7 = *((void *)v6 + 3);
  if (!*(void *)(v7 + 32) || !*(void *)(v7 + 40) || !*(void *)(v7 + 48))
  {
    BOOL v49 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_context_purge_endpoints";
    BOOL v50 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    char v123 = 0;
    if (!__nwlog_fault(v50, type, &v123)) {
      goto LABEL_179;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      char v51 = __nwlog_obj();
      os_log_type_t v52 = type[0];
      if (os_log_type_enabled(v51, type[0]))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_context_purge_endpoints";
        _os_log_impl(&dword_1830D4000, v51, v52, "%{public}s called with null (context->cache->address_endpoints != NULL && context->cache->host_endpoints != NULL && context->cache->other_endpoints != NULL)", buf, 0xCu);
      }
      goto LABEL_178;
    }
    if (!v123)
    {
      char v51 = __nwlog_obj();
      os_log_type_t v84 = type[0];
      if (os_log_type_enabled(v51, type[0]))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_context_purge_endpoints";
        _os_log_impl(&dword_1830D4000, v51, v84, "%{public}s called with null (context->cache->address_endpoints != NULL && context->cache->host_endpoints != NULL && context->cache->other_endpoints != NULL), backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_178;
    }
    uint64_t v53 = (char *)__nw_create_backtrace_string();
    char v51 = __nwlog_obj();
    os_log_type_t v54 = type[0];
    BOOL v55 = os_log_type_enabled(v51, type[0]);
    if (!v53)
    {
      if (v55)
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_context_purge_endpoints";
        _os_log_impl(&dword_1830D4000, v51, v54, "%{public}s called with null (context->cache->address_endpoints != NULL && context->cache->host_endpoints != NULL && context->cache->other_endpoints != NULL), no backtrace", buf, 0xCu);
      }
      goto LABEL_178;
    }
    if (v55)
    {
      *(_DWORD *)int buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_context_purge_endpoints";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&void buf[14] = v53;
      _os_log_impl(&dword_1830D4000, v51, v54, "%{public}s called with null (context->cache->address_endpoints != NULL && context->cache->host_endpoints != NULL && context->cache->other_endpoints != NULL), dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_123:

    free(v53);
    if (!v50) {
      goto LABEL_60;
    }
    goto LABEL_180;
  }
  if (a2)
  {
    unsigned int v8 = *(_DWORD *)(v7 + 68);
    if (v8)
    {
      unsigned int v9 = 0;
      unsigned int v10 = 0;
LABEL_13:
      if (v10 >= v9) {
        unsigned int v11 = v9;
      }
      else {
        unsigned int v11 = v10;
      }
      if (*((_DWORD *)v6 + 31) != 4)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v12 = (id)gLogObj;
        if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
        {
          int v13 = *(_DWORD *)(*((void *)v6 + 3) + 68);
          *(_DWORD *)int buf = 136447490;
          *(void *)&uint8_t buf[4] = "nw_context_purge_endpoints";
          *(_WORD *)&unsigned char buf[12] = 2114;
          *(void *)&void buf[14] = v6;
          *(_WORD *)&buf[22] = 1024;
          LODWORD(v125) = v9;
          WORD2(v125) = 1024;
          *(_DWORD *)((char *)&v125 + 6) = v8 - v11;
          WORD5(v125) = 1024;
          HIDWORD(v125) = v13;
          LOWORD(v126) = 1024;
          *(_DWORD *)((char *)&v126 + 2) = v10;
          _os_log_impl(&dword_1830D4000, v12, OS_LOG_TYPE_INFO, "%{public}s Context %{public}@ has more than %u cache entries, purging %u from %u down to %u", buf, 0x2Eu);
        }

        uint64_t v7 = *((void *)v6 + 3);
      }
      uint64_t v14 = **(void **)(*(void *)(v7 + 8) + 8);
      if (v14)
      {
        unsigned int v15 = ~v8 + v11;
        do
        {
          *(void *)(v14 + 32) = 0;
          BOOL v16 = __CFADD__(v15++, 1);
          if (v16) {
            break;
          }
          uint64_t v14 = **(void **)(*(void *)(v14 + 8) + 8);
        }
        while (v14);
      }
      goto LABEL_34;
    }
  }
  else
  {
    unsigned int v9 = *((_DWORD *)v6 + 21);
    unsigned int v8 = *(_DWORD *)(v7 + 68);
    if (v8 > v9)
    {
      unsigned int v10 = *((_DWORD *)v6 + 22);
      goto LABEL_13;
    }
  }
  unsigned int v17 = *(_DWORD *)(v7 + 64);
  unsigned int v18 = *((_DWORD *)v6 + 23);
  if (v17 > v18)
  {
    if (*((_DWORD *)v6 + 31) != 4)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      char v19 = (id)gLogObj;
      if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
      {
        int v20 = *((_DWORD *)v6 + 23);
        int v21 = *(_DWORD *)(*((void *)v6 + 3) + 64);
        *(_DWORD *)int buf = 136447490;
        *(void *)&uint8_t buf[4] = "nw_context_purge_endpoints";
        *(_WORD *)&unsigned char buf[12] = 2114;
        *(void *)&void buf[14] = v6;
        *(_WORD *)&buf[22] = 1024;
        LODWORD(v125) = v20;
        WORD2(v125) = 1024;
        *(_DWORD *)((char *)&v125 + 6) = v17 - v18;
        WORD5(v125) = 1024;
        HIDWORD(v125) = v21;
        LOWORD(v126) = 1024;
        *(_DWORD *)((char *)&v126 + 2) = v20;
        _os_log_impl(&dword_1830D4000, v19, OS_LOG_TYPE_INFO, "%{public}s Context %{public}@ has more than %u idle cache entries, purging %u from %u down to %u", buf, 0x2Eu);
      }

      uint64_t v7 = *((void *)v6 + 3);
    }
    uint64_t v22 = **(void **)(*(void *)(v7 + 24) + 8);
    if (v22)
    {
      unsigned int v23 = ~v17 + v18;
      do
      {
        *(void *)(v22 + 32) = 0;
        BOOL v16 = __CFADD__(v23++, 1);
        if (v16) {
          break;
        }
        uint64_t v22 = **(void **)(*(void *)(v22 + 24) + 8);
      }
      while (v22);
    }
  }
LABEL_34:
  uint64_t v24 = *(char **)(v7 + 32);
  uint64_t v25 = v6;
  BOOL v26 = v25;
  if (v24)
  {
    *(void *)int buf = MEMORY[0x1E4F143A8];
    *(void *)&buf[8] = 3221225472;
    *(void *)&buf[16] = ___ZL36nw_context_purge_endpoint_hash_tableP21NWConcrete_nw_contextP13nw_hash_tablePKc_block_invoke;
    *(void *)&long long v125 = &unk_1E523AA68;
    *((void *)&v125 + 1) = v25;
    os_log_type_t v126 = (os_log_type_t *)v24;
    os_log_type_t v127 = "address";
    nw_hash_table_apply(v24, (uint64_t)buf);

    goto LABEL_36;
  }
  os_log_type_t v60 = __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_context_purge_endpoint_hash_table";
  uint64_t v61 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  char v123 = 0;
  if (__nwlog_fault(v61, type, &v123))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      BOOL v62 = __nwlog_obj();
      os_log_type_t v63 = type[0];
      if (os_log_type_enabled(v62, type[0]))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_context_purge_endpoint_hash_table";
        _os_log_impl(&dword_1830D4000, v62, v63, "%{public}s called with null hash_table", buf, 0xCu);
      }
    }
    else if (v123)
    {
      os_log_type_t v90 = (char *)__nw_create_backtrace_string();
      BOOL v62 = __nwlog_obj();
      os_log_type_t v91 = type[0];
      BOOL v92 = os_log_type_enabled(v62, type[0]);
      if (v90)
      {
        if (v92)
        {
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_context_purge_endpoint_hash_table";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&void buf[14] = v90;
          _os_log_impl(&dword_1830D4000, v62, v91, "%{public}s called with null hash_table, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v90);
        goto LABEL_184;
      }
      if (v92)
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_context_purge_endpoint_hash_table";
        _os_log_impl(&dword_1830D4000, v62, v91, "%{public}s called with null hash_table, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v62 = __nwlog_obj();
      os_log_type_t v107 = type[0];
      if (os_log_type_enabled(v62, type[0]))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_context_purge_endpoint_hash_table";
        _os_log_impl(&dword_1830D4000, v62, v107, "%{public}s called with null hash_table, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_184:
  if (v61) {
    free(v61);
  }
LABEL_36:

  uint64_t v27 = *(char **)(*((void *)v6 + 3) + 40);
  BOOL v28 = v26;
  uint64_t v29 = v28;
  if (v27)
  {
    *(void *)int buf = MEMORY[0x1E4F143A8];
    *(void *)&buf[8] = 3221225472;
    *(void *)&buf[16] = ___ZL36nw_context_purge_endpoint_hash_tableP21NWConcrete_nw_contextP13nw_hash_tablePKc_block_invoke;
    *(void *)&long long v125 = &unk_1E523AA68;
    *((void *)&v125 + 1) = v28;
    os_log_type_t v126 = (os_log_type_t *)v27;
    os_log_type_t v127 = "host";
    nw_hash_table_apply(v27, (uint64_t)buf);

    goto LABEL_38;
  }
  os_log_type_t v64 = __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_context_purge_endpoint_hash_table";
  char v65 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  char v123 = 0;
  if (__nwlog_fault(v65, type, &v123))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v66 = __nwlog_obj();
      os_log_type_t v67 = type[0];
      if (os_log_type_enabled(v66, type[0]))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_context_purge_endpoint_hash_table";
        _os_log_impl(&dword_1830D4000, v66, v67, "%{public}s called with null hash_table", buf, 0xCu);
      }
    }
    else if (v123)
    {
      os_log_type_t v93 = (char *)__nw_create_backtrace_string();
      os_log_type_t v66 = __nwlog_obj();
      os_log_type_t v94 = type[0];
      BOOL v95 = os_log_type_enabled(v66, type[0]);
      if (v93)
      {
        if (v95)
        {
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_context_purge_endpoint_hash_table";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&void buf[14] = v93;
          _os_log_impl(&dword_1830D4000, v66, v94, "%{public}s called with null hash_table, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v93);
        goto LABEL_189;
      }
      if (v95)
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_context_purge_endpoint_hash_table";
        _os_log_impl(&dword_1830D4000, v66, v94, "%{public}s called with null hash_table, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v66 = __nwlog_obj();
      os_log_type_t v108 = type[0];
      if (os_log_type_enabled(v66, type[0]))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_context_purge_endpoint_hash_table";
        _os_log_impl(&dword_1830D4000, v66, v108, "%{public}s called with null hash_table, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_189:
  if (v65) {
    free(v65);
  }
LABEL_38:

  BOOL v30 = *(char **)(*((void *)v6 + 3) + 48);
  __int16 v31 = v29;
  os_log_type_t v32 = v31;
  if (v30)
  {
    *(void *)int buf = MEMORY[0x1E4F143A8];
    *(void *)&buf[8] = 3221225472;
    *(void *)&buf[16] = ___ZL36nw_context_purge_endpoint_hash_tableP21NWConcrete_nw_contextP13nw_hash_tablePKc_block_invoke;
    *(void *)&long long v125 = &unk_1E523AA68;
    *((void *)&v125 + 1) = v31;
    os_log_type_t v126 = (os_log_type_t *)v30;
    os_log_type_t v127 = "other";
    nw_hash_table_apply(v30, (uint64_t)buf);

    goto LABEL_40;
  }
  os_log_type_t v68 = __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_context_purge_endpoint_hash_table";
  __int16 v69 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  char v123 = 0;
  if (__nwlog_fault(v69, type, &v123))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v70 = __nwlog_obj();
      os_log_type_t v71 = type[0];
      if (os_log_type_enabled(v70, type[0]))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_context_purge_endpoint_hash_table";
        _os_log_impl(&dword_1830D4000, v70, v71, "%{public}s called with null hash_table", buf, 0xCu);
      }
    }
    else if (v123)
    {
      os_log_type_t v96 = (char *)__nw_create_backtrace_string();
      os_log_type_t v70 = __nwlog_obj();
      os_log_type_t v97 = type[0];
      BOOL v98 = os_log_type_enabled(v70, type[0]);
      if (v96)
      {
        if (v98)
        {
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_context_purge_endpoint_hash_table";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&void buf[14] = v96;
          _os_log_impl(&dword_1830D4000, v70, v97, "%{public}s called with null hash_table, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v96);
        goto LABEL_194;
      }
      if (v98)
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_context_purge_endpoint_hash_table";
        _os_log_impl(&dword_1830D4000, v70, v97, "%{public}s called with null hash_table, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v70 = __nwlog_obj();
      os_log_type_t v109 = type[0];
      if (os_log_type_enabled(v70, type[0]))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_context_purge_endpoint_hash_table";
        _os_log_impl(&dword_1830D4000, v70, v109, "%{public}s called with null hash_table, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_194:
  if (v69) {
    free(v69);
  }
LABEL_40:

  if (v32[9])
  {
    char v33 = *(char **)(*((void *)v6 + 3) + 32);
    os_log_type_t v34 = v32;
    BOOL v35 = v34;
    if (v33)
    {
      *(void *)os_log_type_t type = 0;
      BOOL v120 = type;
      uint64_t v121 = 0x2020000000;
      uint64_t v122 = 0;
      *(void *)int buf = MEMORY[0x1E4F143A8];
      *(void *)&buf[8] = 3221225472;
      *(void *)&buf[16] = ___ZL51nw_context_get_active_instance_count_for_hash_tableP21NWConcrete_nw_contextP13nw_hash_table_block_invoke;
      *(void *)&long long v125 = &unk_1E524AEB8;
      os_log_type_t v126 = type;
      *((void *)&v125 + 1) = v34;
      nw_hash_table_apply(v33, (uint64_t)buf);
      uint64_t v36 = *((void *)v120 + 3);

      _Block_object_dispose(type, 8);
      goto LABEL_43;
    }
    id v72 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_context_get_active_instance_count_for_hash_table";
    __int16 v73 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    char v123 = 0;
    if (__nwlog_fault(v73, type, &v123))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        BOOL v74 = __nwlog_obj();
        os_log_type_t v75 = type[0];
        if (os_log_type_enabled(v74, type[0]))
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_context_get_active_instance_count_for_hash_table";
          _os_log_impl(&dword_1830D4000, v74, v75, "%{public}s called with null hash_table", buf, 0xCu);
        }
      }
      else if (v123)
      {
        os_log_type_t v99 = (char *)__nw_create_backtrace_string();
        BOOL v74 = __nwlog_obj();
        os_log_type_t v114 = type[0];
        BOOL v100 = os_log_type_enabled(v74, type[0]);
        if (v99)
        {
          if (v100)
          {
            *(_DWORD *)int buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_context_get_active_instance_count_for_hash_table";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&void buf[14] = v99;
            _os_log_impl(&dword_1830D4000, v74, v114, "%{public}s called with null hash_table, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v99);
          goto LABEL_208;
        }
        if (v100)
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_context_get_active_instance_count_for_hash_table";
          _os_log_impl(&dword_1830D4000, v74, v114, "%{public}s called with null hash_table, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        BOOL v74 = __nwlog_obj();
        os_log_type_t v110 = type[0];
        if (os_log_type_enabled(v74, type[0]))
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_context_get_active_instance_count_for_hash_table";
          _os_log_impl(&dword_1830D4000, v74, v110, "%{public}s called with null hash_table, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_208:
    if (v73) {
      free(v73);
    }
    uint64_t v36 = 0;
LABEL_43:

    __int16 v37 = *(char **)(*((void *)v6 + 3) + 40);
    uint64_t v38 = v35;
    __int16 v39 = v38;
    if (v37)
    {
      *(void *)os_log_type_t type = 0;
      BOOL v120 = type;
      uint64_t v121 = 0x2020000000;
      uint64_t v122 = 0;
      *(void *)int buf = MEMORY[0x1E4F143A8];
      *(void *)&buf[8] = 3221225472;
      *(void *)&buf[16] = ___ZL51nw_context_get_active_instance_count_for_hash_tableP21NWConcrete_nw_contextP13nw_hash_table_block_invoke;
      *(void *)&long long v125 = &unk_1E524AEB8;
      os_log_type_t v126 = type;
      *((void *)&v125 + 1) = v38;
      nw_hash_table_apply(v37, (uint64_t)buf);
      uint64_t v40 = *((void *)v120 + 3);

      _Block_object_dispose(type, 8);
      goto LABEL_45;
    }
    os_log_type_t v76 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_context_get_active_instance_count_for_hash_table";
    int v116 = (const char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    char v123 = 0;
    uint64_t v77 = (char *)v116;
    if (!__nwlog_fault(v116, type, &v123))
    {
LABEL_215:
      if (v77) {
        free(v77);
      }
      uint64_t v40 = 0;
LABEL_45:

      uint64_t v41 = *(char **)(*((void *)v6 + 3) + 48);
      BOOL v42 = v39;
      uint64_t v43 = v42;
      if (v41)
      {
        *(void *)os_log_type_t type = 0;
        BOOL v120 = type;
        uint64_t v121 = 0x2020000000;
        uint64_t v122 = 0;
        *(void *)int buf = MEMORY[0x1E4F143A8];
        *(void *)&buf[8] = 3221225472;
        *(void *)&buf[16] = ___ZL51nw_context_get_active_instance_count_for_hash_tableP21NWConcrete_nw_contextP13nw_hash_table_block_invoke;
        *(void *)&long long v125 = &unk_1E524AEB8;
        os_log_type_t v126 = type;
        *((void *)&v125 + 1) = v42;
        nw_hash_table_apply(v41, (uint64_t)buf);
        uint64_t v44 = *((void *)v120 + 3);

        _Block_object_dispose(type, 8);
LABEL_47:

        uint64_t v45 = v40 + v36 + v44;
        if ((*((unsigned char *)v43 + 137) & 2) != 0 && !v45 || (*((unsigned char *)v43 + 137) & 2) == 0 && v45)
        {
          if (v43[8])
          {
            char v46 = _Block_copy(v32[9]);
            os_log_type_t v47 = v43[8];
            block[0] = MEMORY[0x1E4F143A8];
            block[1] = 3221225472;
            block[2] = ___ZL26nw_context_purge_endpointsP21NWConcrete_nw_contextb_block_invoke;
            block[3] = &unk_1E5249BD0;
            void block[4] = v46;
            BOOL v118 = v45 == 0;
            dispatch_async(v47, block);
          }
          else
          {
            (*((void (**)(const void *, BOOL))v32[9] + 2))(v32[9], v45 == 0);
          }
        }
        *((unsigned char *)v43 + 137) = *((unsigned char *)v43 + 137) & 0xFD | (2 * (v45 != 0));
        goto LABEL_55;
      }
      os_log_type_t v80 = __nwlog_obj();
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_context_get_active_instance_count_for_hash_table";
      os_log_type_t v81 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      char v123 = 0;
      if (__nwlog_fault(v81, type, &v123))
      {
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          os_log_type_t v82 = __nwlog_obj();
          os_log_type_t v83 = type[0];
          if (os_log_type_enabled(v82, type[0]))
          {
            *(_DWORD *)int buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_context_get_active_instance_count_for_hash_table";
            _os_log_impl(&dword_1830D4000, v82, v83, "%{public}s called with null hash_table", buf, 0xCu);
          }
        }
        else if (v123)
        {
          os_log_type_t v103 = (char *)__nw_create_backtrace_string();
          os_log_type_t v82 = __nwlog_obj();
          os_log_type_t v115 = type[0];
          BOOL v104 = os_log_type_enabled(v82, type[0]);
          if (v103)
          {
            if (v104)
            {
              *(_DWORD *)int buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_context_get_active_instance_count_for_hash_table";
              *(_WORD *)&unsigned char buf[12] = 2082;
              *(void *)&void buf[14] = v103;
              _os_log_impl(&dword_1830D4000, v82, v115, "%{public}s called with null hash_table, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(v103);
            goto LABEL_221;
          }
          if (v104)
          {
            *(_DWORD *)int buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_context_get_active_instance_count_for_hash_table";
            _os_log_impl(&dword_1830D4000, v82, v115, "%{public}s called with null hash_table, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          os_log_type_t v82 = __nwlog_obj();
          os_log_type_t v112 = type[0];
          if (os_log_type_enabled(v82, type[0]))
          {
            *(_DWORD *)int buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_context_get_active_instance_count_for_hash_table";
            _os_log_impl(&dword_1830D4000, v82, v112, "%{public}s called with null hash_table, backtrace limit exceeded", buf, 0xCu);
          }
        }
      }
LABEL_221:
      if (v81) {
        free(v81);
      }
      uint64_t v44 = 0;
      goto LABEL_47;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v78 = __nwlog_obj();
      os_log_type_t v79 = type[0];
      if (os_log_type_enabled(v78, type[0]))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_context_get_active_instance_count_for_hash_table";
        _os_log_impl(&dword_1830D4000, v78, v79, "%{public}s called with null hash_table", buf, 0xCu);
      }
    }
    else if (v123)
    {
      os_log_type_t v101 = (char *)__nw_create_backtrace_string();
      os_log_type_t v78 = __nwlog_obj();
      os_log_type_t v113 = type[0];
      BOOL v102 = os_log_type_enabled(v78, type[0]);
      if (v101)
      {
        if (v102)
        {
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_context_get_active_instance_count_for_hash_table";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&void buf[14] = v101;
          _os_log_impl(&dword_1830D4000, v78, v113, "%{public}s called with null hash_table, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v101);
        goto LABEL_214;
      }
      if (v102)
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_context_get_active_instance_count_for_hash_table";
        _os_log_impl(&dword_1830D4000, v78, v113, "%{public}s called with null hash_table, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v78 = __nwlog_obj();
      os_log_type_t v111 = type[0];
      if (os_log_type_enabled(v78, type[0]))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_context_get_active_instance_count_for_hash_table";
        _os_log_impl(&dword_1830D4000, v78, v111, "%{public}s called with null hash_table, backtrace limit exceeded", buf, 0xCu);
      }
    }

LABEL_214:
    uint64_t v77 = (char *)v116;
    goto LABEL_215;
  }
LABEL_55:
  if (!nw_hash_table_count(*(void *)(*((void *)v6 + 3) + 32))
    && !nw_hash_table_count(*(void *)(*((void *)v6 + 3) + 40))
    && !nw_hash_table_count(*(void *)(*((void *)v6 + 3) + 48)))
  {
    uint64_t v48 = *(void *)(*((void *)v6 + 3) + 56);
    if (v48)
    {
      nw_queue_cancel_source(v48);
      *(void *)(*((void *)v6 + 3) + 56) = 0;
    }
  }
LABEL_60:
}

void sub_18323D63C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_hash_table_apply(char *a1, uint64_t a2)
{
  uint64_t v152 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    int v143 = "nw_hash_table_apply";
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v140 = 0;
    if (!__nwlog_fault(v3, &type, &v140)) {
      goto LABEL_208;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v122 = __nwlog_obj();
      os_log_type_t v123 = type;
      if (!os_log_type_enabled(v122, type)) {
        goto LABEL_208;
      }
      *(_DWORD *)int buf = 136446210;
      int v143 = "nw_hash_table_apply";
      os_log_type_t v124 = "%{public}s called with null table";
      goto LABEL_207;
    }
    if (!v140)
    {
      uint64_t v122 = __nwlog_obj();
      os_log_type_t v123 = type;
      if (!os_log_type_enabled(v122, type)) {
        goto LABEL_208;
      }
      *(_DWORD *)int buf = 136446210;
      int v143 = "nw_hash_table_apply";
      os_log_type_t v124 = "%{public}s called with null table, backtrace limit exceeded";
      goto LABEL_207;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v122 = __nwlog_obj();
    os_log_type_t v123 = type;
    BOOL v132 = os_log_type_enabled(v122, type);
    if (!backtrace_string)
    {
      if (!v132) {
        goto LABEL_208;
      }
      *(_DWORD *)int buf = 136446210;
      int v143 = "nw_hash_table_apply";
      os_log_type_t v124 = "%{public}s called with null table, no backtrace";
      goto LABEL_207;
    }
    if (v132)
    {
      *(_DWORD *)int buf = 136446466;
      int v143 = "nw_hash_table_apply";
      __int16 v144 = 2082;
      os_log_type_t v145 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v122, v123, "%{public}s called with null table, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(backtrace_string);
LABEL_208:
    if (!v3) {
      return;
    }
    goto LABEL_164;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    int v143 = "nw_hash_table_apply";
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v140 = 0;
    if (!__nwlog_fault(v3, &type, &v140)) {
      goto LABEL_208;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v122 = __nwlog_obj();
      os_log_type_t v123 = type;
      if (!os_log_type_enabled(v122, type)) {
        goto LABEL_208;
      }
      *(_DWORD *)int buf = 136446210;
      int v143 = "nw_hash_table_apply";
      os_log_type_t v124 = "%{public}s called with null apply_block";
      goto LABEL_207;
    }
    if (!v140)
    {
      uint64_t v122 = __nwlog_obj();
      os_log_type_t v123 = type;
      if (!os_log_type_enabled(v122, type)) {
        goto LABEL_208;
      }
      *(_DWORD *)int buf = 136446210;
      int v143 = "nw_hash_table_apply";
      os_log_type_t v124 = "%{public}s called with null apply_block, backtrace limit exceeded";
      goto LABEL_207;
    }
    BOOL v133 = (char *)__nw_create_backtrace_string();
    uint64_t v122 = __nwlog_obj();
    os_log_type_t v123 = type;
    BOOL v134 = os_log_type_enabled(v122, type);
    if (v133)
    {
      if (v134)
      {
        *(_DWORD *)int buf = 136446466;
        int v143 = "nw_hash_table_apply";
        __int16 v144 = 2082;
        os_log_type_t v145 = v133;
        _os_log_impl(&dword_1830D4000, v122, v123, "%{public}s called with null apply_block, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v133);
      if (!v3) {
        return;
      }
      goto LABEL_164;
    }
    if (v134)
    {
      *(_DWORD *)int buf = 136446210;
      int v143 = "nw_hash_table_apply";
      os_log_type_t v124 = "%{public}s called with null apply_block, no backtrace";
LABEL_207:
      _os_log_impl(&dword_1830D4000, v122, v123, v124, buf, 0xCu);
      goto LABEL_208;
    }
    goto LABEL_208;
  }
  uint64_t v3 = a1;
  if (*((_DWORD *)a1 + 8))
  {
    int v4 = *((_DWORD *)a1 + 12);
    if ((v4 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  long long v125 = __nwlog_obj();
  os_log_type_enabled(v125, OS_LOG_TYPE_ERROR);
  *(_DWORD *)int buf = 136446210;
  int v143 = "nw_hash_table_lock";
  os_log_type_t v126 = (void *)_os_log_send_and_compose_impl();
  if (__nwlog_abort((uint64_t)v126))
  {
LABEL_217:
    __break(1u);
    return;
  }
  free(v126);
  int v4 = *((_DWORD *)v3 + 12);
  if ((v4 & 2) != 0)
  {
LABEL_5:
    os_unfair_lock_lock((os_unfair_lock_t)v3 + 13);
    int v4 = *((_DWORD *)v3 + 12);
  }
LABEL_6:
  if (v4)
  {
    uint64_t v5 = *((unsigned int *)v3 + 11) + 1;
    uint64_t v6 = v5 << 31 >> 31;
    *((_DWORD *)v3 + 11) = v5;
    if (v6 == v5 && (v6 & 0x8000000000000000) == 0)
    {
      if (!*((_DWORD *)v3 + 8)) {
        goto LABEL_140;
      }
LABEL_28:
      int v18 = 0;
      char v19 = v3 + 56;
      lock = (os_unfair_lock_s *)(v3 + 52);
      while (1)
      {
        int v137 = v18;
        int v20 = (uint64_t *)*v19;
        if (*v19) {
          break;
        }
LABEL_29:
        int v18 = v137 + 1;
        v19 += 2;
        if ((v137 + 1) >= *((_DWORD *)v3 + 8)) {
          goto LABEL_139;
        }
      }
      nw_endpoint_t v139 = v19;
      while (1)
      {
        int v21 = v20;
        int v20 = (uint64_t *)*v20;
        uint64_t v22 = (uint64_t **)v21[1];
        if (!v22 || *v22 != v21)
        {
          BOOL v98 = __nwlog_obj();
          os_log_type_enabled(v98, OS_LOG_TYPE_ERROR);
          unint64_t v99 = *((unsigned __int8 *)v21 + 30);
          BOOL v100 = "invalid_state";
          if (v99 <= 3) {
            BOOL v100 = off_1E5247AE8[v99];
          }
          int v101 = *((unsigned __int16 *)v21 + 14);
          *(_DWORD *)int buf = 136446722;
          int v143 = "nw_hash_table_apply";
          __int16 v144 = 2082;
          os_log_type_t v145 = v100;
          __int16 v146 = 1024;
          LODWORD(v147) = v101;
          BOOL v102 = (void *)_os_log_send_and_compose_impl();
          if (__nwlog_abort((uint64_t)v102)) {
            goto LABEL_217;
          }
          free(v102);
        }
        int v23 = *((unsigned __int8 *)v21 + 30);
        if (v23 != 1)
        {
          if (v23 == 2)
          {
            if (*((_WORD *)v21 + 14))
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              char v33 = gLogObj;
              if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)int buf = 136446210;
                int v143 = "nw_hash_table_apply";
                _os_log_impl(&dword_1830D4000, v33, OS_LOG_TYPE_DEBUG, "%{public}s Ignoring temp node remove", buf, 0xCu);
              }
            }
            else
            {
              nw_hash_node_free((uint64_t)v19, v21);
            }
          }
          else
          {
            os_log_type_t v103 = __nwlog_obj();
            os_log_type_enabled(v103, OS_LOG_TYPE_ERROR);
            unint64_t v104 = *((unsigned __int8 *)v21 + 30);
            os_log_type_t v105 = "invalid_state";
            if (v104 <= 3) {
              os_log_type_t v105 = off_1E5247AE8[v104];
            }
            int v106 = *((unsigned __int16 *)v21 + 14);
            *(_DWORD *)int buf = 136446722;
            int v143 = "nw_hash_table_apply";
            __int16 v144 = 2082;
            os_log_type_t v145 = v105;
            __int16 v146 = 1024;
            LODWORD(v147) = v106;
            os_log_type_t v107 = (void *)_os_log_send_and_compose_impl();
            if (__nwlog_abort((uint64_t)v107)) {
              goto LABEL_217;
            }
            free(v107);
          }
          goto LABEL_33;
        }
        int v24 = (unsigned __int16)(*((_WORD *)v21 + 14))++ + 1;
        if ((v24 & 0x10000) != 0) {
          break;
        }
LABEL_60:
        if (!v20) {
          goto LABEL_79;
        }
        int v43 = (unsigned __int16)(*((_WORD *)v20 + 14))++ + 1;
        if ((v43 & 0x10000) == 0) {
          goto LABEL_79;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v44 = *((unsigned __int16 *)v20 + 14);
        *(_DWORD *)int buf = 136446978;
        int v143 = "nw_hash_table_apply";
        __int16 v144 = 2082;
        os_log_type_t v145 = "next_node->apply_count";
        __int16 v146 = 2048;
        uint64_t v147 = 1;
        __int16 v148 = 2048;
        uint64_t v149 = v44;
        uint64_t v45 = (char *)_os_log_send_and_compose_impl();
        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v140 = 0;
        if (__nwlog_fault(v45, &type, &v140))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            uint64_t v46 = gLogObj;
            os_log_type_t v47 = type;
            if (os_log_type_enabled((os_log_t)gLogObj, type))
            {
              uint64_t v48 = *((unsigned __int16 *)v20 + 14);
              *(_DWORD *)int buf = 136446978;
              int v143 = "nw_hash_table_apply";
              __int16 v144 = 2082;
              os_log_type_t v145 = "next_node->apply_count";
              __int16 v146 = 2048;
              uint64_t v147 = 1;
              __int16 v148 = 2048;
              uint64_t v149 = v48;
              BOOL v49 = v46;
              os_log_type_t v50 = v47;
              char v51 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_75:
              _os_log_impl(&dword_1830D4000, v49, v50, v51, buf, 0x2Au);
            }
          }
          else if (v140)
          {
            os_log_type_t v52 = (char *)__nw_create_backtrace_string();
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            uint64_t v53 = gLogObj;
            os_log_type_t v54 = type;
            BOOL v55 = os_log_type_enabled((os_log_t)gLogObj, type);
            if (v52)
            {
              if (v55)
              {
                uint64_t v56 = *((unsigned __int16 *)v20 + 14);
                *(_DWORD *)int buf = 136447234;
                int v143 = "nw_hash_table_apply";
                __int16 v144 = 2082;
                os_log_type_t v145 = "next_node->apply_count";
                __int16 v146 = 2048;
                uint64_t v147 = 1;
                __int16 v148 = 2048;
                uint64_t v149 = v56;
                __int16 v150 = 2082;
                id v151 = v52;
                _os_log_impl(&dword_1830D4000, v53, v54, "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
              }
              free(v52);
              char v19 = v139;
              goto LABEL_76;
            }
            char v19 = v139;
            if (v55)
            {
              uint64_t v60 = *((unsigned __int16 *)v20 + 14);
              *(_DWORD *)int buf = 136446978;
              int v143 = "nw_hash_table_apply";
              __int16 v144 = 2082;
              os_log_type_t v145 = "next_node->apply_count";
              __int16 v146 = 2048;
              uint64_t v147 = 1;
              __int16 v148 = 2048;
              uint64_t v149 = v60;
              BOOL v49 = v53;
              os_log_type_t v50 = v54;
              char v51 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
              goto LABEL_75;
            }
          }
          else
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            uint64_t v57 = gLogObj;
            os_log_type_t v58 = type;
            if (os_log_type_enabled((os_log_t)gLogObj, type))
            {
              uint64_t v59 = *((unsigned __int16 *)v20 + 14);
              *(_DWORD *)int buf = 136446978;
              int v143 = "nw_hash_table_apply";
              __int16 v144 = 2082;
              os_log_type_t v145 = "next_node->apply_count";
              __int16 v146 = 2048;
              uint64_t v147 = 1;
              __int16 v148 = 2048;
              uint64_t v149 = v59;
              BOOL v49 = v57;
              os_log_type_t v50 = v58;
              char v51 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
              goto LABEL_75;
            }
          }
        }
LABEL_76:
        if (v45) {
          free(v45);
        }
        *((_WORD *)v20 + 14) = -1;
LABEL_79:
        if ((v3[48] & 2) != 0) {
          os_unfair_lock_unlock(lock);
        }
        char v61 = (*(uint64_t (**)(uint64_t, uint64_t *))(a2 + 16))(a2, v21);
        if (*((_DWORD *)v3 + 8))
        {
          if ((v3[48] & 2) == 0) {
            goto LABEL_84;
          }
LABEL_83:
          os_unfair_lock_lock(lock);
          goto LABEL_84;
        }
        os_log_type_t v108 = __nwlog_obj();
        os_log_type_enabled(v108, OS_LOG_TYPE_ERROR);
        *(_DWORD *)int buf = 136446210;
        int v143 = "nw_hash_table_lock";
        os_log_type_t v109 = (void *)_os_log_send_and_compose_impl();
        if (__nwlog_abort((uint64_t)v109)) {
          goto LABEL_217;
        }
        free(v109);
        if ((v3[48] & 2) != 0) {
          goto LABEL_83;
        }
LABEL_84:
        unsigned int v62 = (unsigned __int16)(*((_WORD *)v21 + 14))-- - 1;
        if (v62 < 0x10000) {
          goto LABEL_102;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v63 = *((unsigned __int16 *)v21 + 14);
        *(_DWORD *)int buf = 136446978;
        int v143 = "nw_hash_table_apply";
        __int16 v144 = 2082;
        os_log_type_t v145 = "node->apply_count";
        __int16 v146 = 2048;
        uint64_t v147 = 1;
        __int16 v148 = 2048;
        uint64_t v149 = v63;
        os_log_type_t v64 = (char *)_os_log_send_and_compose_impl();
        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v140 = 0;
        if (__nwlog_fault(v64, &type, &v140))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            uint64_t v65 = gLogObj;
            os_log_type_t v66 = type;
            if (os_log_type_enabled((os_log_t)gLogObj, type))
            {
              uint64_t v67 = *((unsigned __int16 *)v21 + 14);
              *(_DWORD *)int buf = 136446978;
              int v143 = "nw_hash_table_apply";
              __int16 v144 = 2082;
              os_log_type_t v145 = "node->apply_count";
              __int16 v146 = 2048;
              uint64_t v147 = 1;
              __int16 v148 = 2048;
              uint64_t v149 = v67;
              os_log_type_t v68 = v65;
              os_log_type_t v69 = v66;
              os_log_type_t v70 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu";
LABEL_98:
              _os_log_impl(&dword_1830D4000, v68, v69, v70, buf, 0x2Au);
            }
          }
          else if (v140)
          {
            os_log_type_t v71 = (char *)__nw_create_backtrace_string();
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            id v72 = gLogObj;
            os_log_type_t v73 = type;
            BOOL v74 = os_log_type_enabled((os_log_t)gLogObj, type);
            if (v71)
            {
              if (v74)
              {
                uint64_t v75 = *((unsigned __int16 *)v21 + 14);
                *(_DWORD *)int buf = 136447234;
                int v143 = "nw_hash_table_apply";
                __int16 v144 = 2082;
                os_log_type_t v145 = "node->apply_count";
                __int16 v146 = 2048;
                uint64_t v147 = 1;
                __int16 v148 = 2048;
                uint64_t v149 = v75;
                __int16 v150 = 2082;
                id v151 = v71;
                _os_log_impl(&dword_1830D4000, v72, v73, "%{public}s Underflow: %{public}s, decrement %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
              }
              free(v71);
              goto LABEL_99;
            }
            if (v74)
            {
              uint64_t v79 = *((unsigned __int16 *)v21 + 14);
              *(_DWORD *)int buf = 136446978;
              int v143 = "nw_hash_table_apply";
              __int16 v144 = 2082;
              os_log_type_t v145 = "node->apply_count";
              __int16 v146 = 2048;
              uint64_t v147 = 1;
              __int16 v148 = 2048;
              uint64_t v149 = v79;
              os_log_type_t v68 = v72;
              os_log_type_t v69 = v73;
              os_log_type_t v70 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, no backtrace";
              goto LABEL_98;
            }
          }
          else
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            uint64_t v76 = gLogObj;
            os_log_type_t v77 = type;
            if (os_log_type_enabled((os_log_t)gLogObj, type))
            {
              uint64_t v78 = *((unsigned __int16 *)v21 + 14);
              *(_DWORD *)int buf = 136446978;
              int v143 = "nw_hash_table_apply";
              __int16 v144 = 2082;
              os_log_type_t v145 = "node->apply_count";
              __int16 v146 = 2048;
              uint64_t v147 = 1;
              __int16 v148 = 2048;
              uint64_t v149 = v78;
              os_log_type_t v68 = v76;
              os_log_type_t v69 = v77;
              os_log_type_t v70 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, backtrace limit exceeded";
              goto LABEL_98;
            }
          }
        }
LABEL_99:
        if (v64) {
          free(v64);
        }
        *((_WORD *)v21 + 14) = 0;
        char v19 = v139;
LABEL_102:
        if (!v20) {
          goto LABEL_121;
        }
        unsigned int v80 = (unsigned __int16)(*((_WORD *)v20 + 14))-- - 1;
        if (v80 < 0x10000) {
          goto LABEL_121;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v81 = *((unsigned __int16 *)v20 + 14);
        *(_DWORD *)int buf = 136446978;
        int v143 = "nw_hash_table_apply";
        __int16 v144 = 2082;
        os_log_type_t v145 = "next_node->apply_count";
        __int16 v146 = 2048;
        uint64_t v147 = 1;
        __int16 v148 = 2048;
        uint64_t v149 = v81;
        os_log_type_t v82 = (char *)_os_log_send_and_compose_impl();
        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v140 = 0;
        if (__nwlog_fault(v82, &type, &v140))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            uint64_t v83 = gLogObj;
            os_log_type_t v84 = type;
            if (os_log_type_enabled((os_log_t)gLogObj, type))
            {
              uint64_t v85 = *((unsigned __int16 *)v20 + 14);
              *(_DWORD *)int buf = 136446978;
              int v143 = "nw_hash_table_apply";
              __int16 v144 = 2082;
              os_log_type_t v145 = "next_node->apply_count";
              __int16 v146 = 2048;
              uint64_t v147 = 1;
              __int16 v148 = 2048;
              uint64_t v149 = v85;
              os_log_type_t v86 = v83;
              os_log_type_t v87 = v84;
              os_log_type_t v88 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu";
LABEL_117:
              _os_log_impl(&dword_1830D4000, v86, v87, v88, buf, 0x2Au);
            }
          }
          else if (v140)
          {
            BOOL v89 = (char *)__nw_create_backtrace_string();
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            os_log_type_t v90 = gLogObj;
            os_log_type_t v91 = type;
            BOOL v92 = os_log_type_enabled((os_log_t)gLogObj, type);
            if (v89)
            {
              if (v92)
              {
                uint64_t v93 = *((unsigned __int16 *)v20 + 14);
                *(_DWORD *)int buf = 136447234;
                int v143 = "nw_hash_table_apply";
                __int16 v144 = 2082;
                os_log_type_t v145 = "next_node->apply_count";
                __int16 v146 = 2048;
                uint64_t v147 = 1;
                __int16 v148 = 2048;
                uint64_t v149 = v93;
                __int16 v150 = 2082;
                id v151 = v89;
                _os_log_impl(&dword_1830D4000, v90, v91, "%{public}s Underflow: %{public}s, decrement %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
              }
              free(v89);
              goto LABEL_118;
            }
            if (v92)
            {
              uint64_t v97 = *((unsigned __int16 *)v20 + 14);
              *(_DWORD *)int buf = 136446978;
              int v143 = "nw_hash_table_apply";
              __int16 v144 = 2082;
              os_log_type_t v145 = "next_node->apply_count";
              __int16 v146 = 2048;
              uint64_t v147 = 1;
              __int16 v148 = 2048;
              uint64_t v149 = v97;
              os_log_type_t v86 = v90;
              os_log_type_t v87 = v91;
              os_log_type_t v88 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, no backtrace";
              goto LABEL_117;
            }
          }
          else
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            uint64_t v94 = gLogObj;
            os_log_type_t v95 = type;
            if (os_log_type_enabled((os_log_t)gLogObj, type))
            {
              uint64_t v96 = *((unsigned __int16 *)v20 + 14);
              *(_DWORD *)int buf = 136446978;
              int v143 = "nw_hash_table_apply";
              __int16 v144 = 2082;
              os_log_type_t v145 = "next_node->apply_count";
              __int16 v146 = 2048;
              uint64_t v147 = 1;
              __int16 v148 = 2048;
              uint64_t v149 = v96;
              os_log_type_t v86 = v94;
              os_log_type_t v87 = v95;
              os_log_type_t v88 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, backtrace limit exceeded";
              goto LABEL_117;
            }
          }
        }
LABEL_118:
        if (v82) {
          free(v82);
        }
        *((_WORD *)v20 + 14) = 0;
        char v19 = v139;
LABEL_121:
        if (*((unsigned char *)v21 + 30) == 2 && !*((_WORD *)v21 + 14)) {
          nw_hash_node_free((uint64_t)v19, v21);
        }
        if ((v61 & 1) == 0)
        {
          if (v20 && *((unsigned char *)v20 + 30) == 2 && !*((_WORD *)v20 + 14)) {
            nw_hash_node_free((uint64_t)v19, v20);
          }
LABEL_139:
          LODWORD(v5) = *((_DWORD *)v3 + 11);
LABEL_140:
          *((_DWORD *)v3 + 11) = v5 - 1;
          if (v5)
          {
            int v110 = *((_DWORD *)v3 + 12);
            if (v5 != 1)
            {
              if ((v110 & 2) != 0) {
                goto LABEL_143;
              }
              return;
            }
LABEL_161:
            if ((v110 & 2) != 0) {
              os_unfair_lock_unlock((os_unfair_lock_t)v3 + 13);
            }
            if (v110) {
              return;
            }
LABEL_164:
            free(v3);
            return;
          }
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v111 = *((unsigned int *)v3 + 11);
          *(_DWORD *)int buf = 136446978;
          int v143 = "nw_hash_table_apply";
          __int16 v144 = 2082;
          os_log_type_t v145 = "table->apply_count";
          __int16 v146 = 2048;
          uint64_t v147 = 1;
          __int16 v148 = 2048;
          uint64_t v149 = v111;
          os_log_type_t v112 = (char *)_os_log_send_and_compose_impl();
          os_log_type_t type = OS_LOG_TYPE_ERROR;
          char v140 = 0;
          if (!__nwlog_fault(v112, &type, &v140)) {
            goto LABEL_158;
          }
          if (type == OS_LOG_TYPE_FAULT)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            os_log_type_t v113 = gLogObj;
            os_log_type_t v114 = type;
            if (os_log_type_enabled((os_log_t)gLogObj, type))
            {
              uint64_t v115 = *((unsigned int *)v3 + 11);
              *(_DWORD *)int buf = 136446978;
              int v143 = "nw_hash_table_apply";
              __int16 v144 = 2082;
              os_log_type_t v145 = "table->apply_count";
              __int16 v146 = 2048;
              uint64_t v147 = 1;
              __int16 v148 = 2048;
              uint64_t v149 = v115;
              int v116 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu";
              goto LABEL_157;
            }
            goto LABEL_158;
          }
          if (v140)
          {
            BOOL v117 = (char *)__nw_create_backtrace_string();
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            os_log_type_t v113 = gLogObj;
            os_log_type_t v114 = type;
            BOOL v118 = os_log_type_enabled((os_log_t)gLogObj, type);
            if (v117)
            {
              if (v118)
              {
                uint64_t v119 = *((unsigned int *)v3 + 11);
                *(_DWORD *)int buf = 136447234;
                int v143 = "nw_hash_table_apply";
                __int16 v144 = 2082;
                os_log_type_t v145 = "table->apply_count";
                __int16 v146 = 2048;
                uint64_t v147 = 1;
                __int16 v148 = 2048;
                uint64_t v149 = v119;
                __int16 v150 = 2082;
                id v151 = v117;
                _os_log_impl(&dword_1830D4000, v113, v114, "%{public}s Underflow: %{public}s, decrement %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
              }
              free(v117);
              goto LABEL_158;
            }
            if (!v118)
            {
LABEL_158:
              if (v112) {
                free(v112);
              }
              *((_DWORD *)v3 + 11) = 0;
              int v110 = *((_DWORD *)v3 + 12);
              goto LABEL_161;
            }
            uint64_t v121 = *((unsigned int *)v3 + 11);
            *(_DWORD *)int buf = 136446978;
            int v143 = "nw_hash_table_apply";
            __int16 v144 = 2082;
            os_log_type_t v145 = "table->apply_count";
            __int16 v146 = 2048;
            uint64_t v147 = 1;
            __int16 v148 = 2048;
            uint64_t v149 = v121;
            int v116 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, no backtrace";
          }
          else
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            os_log_type_t v113 = gLogObj;
            os_log_type_t v114 = type;
            if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
              goto LABEL_158;
            }
            uint64_t v120 = *((unsigned int *)v3 + 11);
            *(_DWORD *)int buf = 136446978;
            int v143 = "nw_hash_table_apply";
            __int16 v144 = 2082;
            os_log_type_t v145 = "table->apply_count";
            __int16 v146 = 2048;
            uint64_t v147 = 1;
            __int16 v148 = 2048;
            uint64_t v149 = v120;
            int v116 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, backtrace limit exceeded";
          }
LABEL_157:
          _os_log_impl(&dword_1830D4000, v113, v114, v116, buf, 0x2Au);
          goto LABEL_158;
        }
LABEL_33:
        if (!v20) {
          goto LABEL_29;
        }
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v25 = *((unsigned __int16 *)v21 + 14);
      *(_DWORD *)int buf = 136446978;
      int v143 = "nw_hash_table_apply";
      __int16 v144 = 2082;
      os_log_type_t v145 = "node->apply_count";
      __int16 v146 = 2048;
      uint64_t v147 = 1;
      __int16 v148 = 2048;
      uint64_t v149 = v25;
      BOOL v26 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v140 = 0;
      if (__nwlog_fault(v26, &type, &v140))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v27 = gLogObj;
          os_log_type_t v28 = type;
          if (os_log_type_enabled((os_log_t)gLogObj, type))
          {
            uint64_t v29 = *((unsigned __int16 *)v21 + 14);
            *(_DWORD *)int buf = 136446978;
            int v143 = "nw_hash_table_apply";
            __int16 v144 = 2082;
            os_log_type_t v145 = "node->apply_count";
            __int16 v146 = 2048;
            uint64_t v147 = 1;
            __int16 v148 = 2048;
            uint64_t v149 = v29;
            BOOL v30 = v27;
            os_log_type_t v31 = v28;
            os_log_type_t v32 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_56:
            _os_log_impl(&dword_1830D4000, v30, v31, v32, buf, 0x2Au);
          }
        }
        else if (v140)
        {
          os_log_type_t v34 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          BOOL v35 = gLogObj;
          os_log_type_t v36 = type;
          BOOL v37 = os_log_type_enabled((os_log_t)gLogObj, type);
          if (v34)
          {
            if (v37)
            {
              uint64_t v38 = *((unsigned __int16 *)v21 + 14);
              *(_DWORD *)int buf = 136447234;
              int v143 = "nw_hash_table_apply";
              __int16 v144 = 2082;
              os_log_type_t v145 = "node->apply_count";
              __int16 v146 = 2048;
              uint64_t v147 = 1;
              __int16 v148 = 2048;
              uint64_t v149 = v38;
              __int16 v150 = 2082;
              id v151 = v34;
              _os_log_impl(&dword_1830D4000, v35, v36, "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
            }
            free(v34);
            char v19 = v139;
            goto LABEL_57;
          }
          char v19 = v139;
          if (v37)
          {
            uint64_t v42 = *((unsigned __int16 *)v21 + 14);
            *(_DWORD *)int buf = 136446978;
            int v143 = "nw_hash_table_apply";
            __int16 v144 = 2082;
            os_log_type_t v145 = "node->apply_count";
            __int16 v146 = 2048;
            uint64_t v147 = 1;
            __int16 v148 = 2048;
            uint64_t v149 = v42;
            BOOL v30 = v35;
            os_log_type_t v31 = v36;
            os_log_type_t v32 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
            goto LABEL_56;
          }
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v39 = gLogObj;
          os_log_type_t v40 = type;
          if (os_log_type_enabled((os_log_t)gLogObj, type))
          {
            uint64_t v41 = *((unsigned __int16 *)v21 + 14);
            *(_DWORD *)int buf = 136446978;
            int v143 = "nw_hash_table_apply";
            __int16 v144 = 2082;
            os_log_type_t v145 = "node->apply_count";
            __int16 v146 = 2048;
            uint64_t v147 = 1;
            __int16 v148 = 2048;
            uint64_t v149 = v41;
            BOOL v30 = v39;
            os_log_type_t v31 = v40;
            os_log_type_t v32 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
            goto LABEL_56;
          }
        }
      }
LABEL_57:
      if (v26) {
        free(v26);
      }
      *((_WORD *)v21 + 14) = -1;
      goto LABEL_60;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v7 = *((unsigned int *)v3 + 11);
    *(_DWORD *)int buf = 136446978;
    int v143 = "nw_hash_table_apply";
    __int16 v144 = 2082;
    os_log_type_t v145 = "table->apply_count";
    __int16 v146 = 2048;
    uint64_t v147 = 1;
    __int16 v148 = 2048;
    uint64_t v149 = v7;
    unsigned int v8 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v140 = 0;
    if (__nwlog_fault(v8, &type, &v140))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        unsigned int v9 = gLogObj;
        os_log_type_t v10 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
          goto LABEL_25;
        }
        uint64_t v11 = *((unsigned int *)v3 + 11);
        *(_DWORD *)int buf = 136446978;
        int v143 = "nw_hash_table_apply";
        __int16 v144 = 2082;
        os_log_type_t v145 = "table->apply_count";
        __int16 v146 = 2048;
        uint64_t v147 = 1;
        __int16 v148 = 2048;
        uint64_t v149 = v11;
        os_log_type_t v12 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_24:
        _os_log_impl(&dword_1830D4000, v9, v10, v12, buf, 0x2Au);
        goto LABEL_25;
      }
      if (!v140)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        unsigned int v9 = gLogObj;
        os_log_type_t v10 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
          goto LABEL_25;
        }
        uint64_t v16 = *((unsigned int *)v3 + 11);
        *(_DWORD *)int buf = 136446978;
        int v143 = "nw_hash_table_apply";
        __int16 v144 = 2082;
        os_log_type_t v145 = "table->apply_count";
        __int16 v146 = 2048;
        uint64_t v147 = 1;
        __int16 v148 = 2048;
        uint64_t v149 = v16;
        os_log_type_t v12 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
        goto LABEL_24;
      }
      int v13 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      unsigned int v9 = gLogObj;
      os_log_type_t v10 = type;
      BOOL v14 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (!v13)
      {
        if (!v14) {
          goto LABEL_25;
        }
        uint64_t v17 = *((unsigned int *)v3 + 11);
        *(_DWORD *)int buf = 136446978;
        int v143 = "nw_hash_table_apply";
        __int16 v144 = 2082;
        os_log_type_t v145 = "table->apply_count";
        __int16 v146 = 2048;
        uint64_t v147 = 1;
        __int16 v148 = 2048;
        uint64_t v149 = v17;
        os_log_type_t v12 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
        goto LABEL_24;
      }
      if (v14)
      {
        uint64_t v15 = *((unsigned int *)v3 + 11);
        *(_DWORD *)int buf = 136447234;
        int v143 = "nw_hash_table_apply";
        __int16 v144 = 2082;
        os_log_type_t v145 = "table->apply_count";
        __int16 v146 = 2048;
        uint64_t v147 = 1;
        __int16 v148 = 2048;
        uint64_t v149 = v15;
        __int16 v150 = 2082;
        id v151 = v13;
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
      }
      free(v13);
    }
LABEL_25:
    if (v8) {
      free(v8);
    }
    LODWORD(v5) = -1;
    *((_DWORD *)v3 + 11) = -1;
    if (!*((_DWORD *)v3 + 8)) {
      goto LABEL_140;
    }
    goto LABEL_28;
  }
  __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  int v143 = "nw_hash_table_apply";
  os_log_type_t v127 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v140 = 0;
  if (__nwlog_fault(v127, &type, &v140))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v128 = __nwlog_obj();
      os_log_type_t v129 = type;
      if (!os_log_type_enabled(v128, type)) {
        goto LABEL_213;
      }
      *(_DWORD *)int buf = 136446210;
      int v143 = "nw_hash_table_apply";
      uint64_t v130 = "%{public}s called with invalid hash table";
LABEL_212:
      _os_log_impl(&dword_1830D4000, v128, v129, v130, buf, 0xCu);
      goto LABEL_213;
    }
    if (!v140)
    {
      uint64_t v128 = __nwlog_obj();
      os_log_type_t v129 = type;
      if (!os_log_type_enabled(v128, type)) {
        goto LABEL_213;
      }
      *(_DWORD *)int buf = 136446210;
      int v143 = "nw_hash_table_apply";
      uint64_t v130 = "%{public}s called with invalid hash table, backtrace limit exceeded";
      goto LABEL_212;
    }
    os_log_type_t v135 = (char *)__nw_create_backtrace_string();
    uint64_t v128 = __nwlog_obj();
    os_log_type_t v129 = type;
    BOOL v136 = os_log_type_enabled(v128, type);
    if (!v135)
    {
      if (!v136) {
        goto LABEL_213;
      }
      *(_DWORD *)int buf = 136446210;
      int v143 = "nw_hash_table_apply";
      uint64_t v130 = "%{public}s called with invalid hash table, no backtrace";
      goto LABEL_212;
    }
    if (v136)
    {
      *(_DWORD *)int buf = 136446466;
      int v143 = "nw_hash_table_apply";
      __int16 v144 = 2082;
      os_log_type_t v145 = v135;
      _os_log_impl(&dword_1830D4000, v128, v129, "%{public}s called with invalid hash table, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v135);
  }
LABEL_213:
  if (v127) {
    free(v127);
  }
  if ((v3[48] & 2) != 0) {
LABEL_143:
  }
    os_unfair_lock_unlock((os_unfair_lock_t)v3 + 13);
}

uint64_t nw_hash_table_count(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (a1) {
    return *(unsigned int *)(a1 + 40);
  }
  __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  uint64_t v11 = "nw_hash_table_count";
  unint64_t v2 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v8 = 0;
  if (__nwlog_fault(v2, &type, &v8))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      if (os_log_type_enabled(v3, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v11 = "nw_hash_table_count";
        uint64_t v5 = "%{public}s called with null table";
LABEL_17:
        _os_log_impl(&dword_1830D4000, v3, v4, v5, buf, 0xCu);
      }
    }
    else if (v8)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      BOOL v7 = os_log_type_enabled(v3, type);
      if (backtrace_string)
      {
        if (v7)
        {
          *(_DWORD *)int buf = 136446466;
          uint64_t v11 = "nw_hash_table_count";
          __int16 v12 = 2082;
          int v13 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v3, v4, "%{public}s called with null table, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_18;
      }
      if (v7)
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v11 = "nw_hash_table_count";
        uint64_t v5 = "%{public}s called with null table, no backtrace";
        goto LABEL_17;
      }
    }
    else
    {
      uint64_t v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      if (os_log_type_enabled(v3, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v11 = "nw_hash_table_count";
        uint64_t v5 = "%{public}s called with null table, backtrace limit exceeded";
        goto LABEL_17;
      }
    }
  }
LABEL_18:
  if (v2) {
    free(v2);
  }
  return 0;
}

uint64_t __nw_endpoint_has_associations_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t object = (void *)nw_hash_node_get_object(a2);
  if (!nw_association_is_empty(object) || nw_hash_table_remove_node(*(void *)(*(void *)(a1 + 32) + 200), a2)) {
    return 1;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v5 = (id)gLogObj;
  logging_description = nw_endpoint_get_logging_description(*(void **)(a1 + 32));
  *(_DWORD *)int buf = 136446722;
  uint64_t v22 = "nw_endpoint_has_associations_block_invoke";
  __int16 v23 = 2082;
  int v24 = logging_description;
  __int16 v25 = 2048;
  uint64_t v26 = a2;
  BOOL v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v19 = 0;
  if (__nwlog_fault(v7, &type, &v19))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      char v8 = (id)gLogObj;
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        os_log_type_t v10 = nw_endpoint_get_logging_description(*(void **)(a1 + 32));
        *(_DWORD *)int buf = 136446722;
        uint64_t v22 = "nw_endpoint_has_associations_block_invoke";
        __int16 v23 = 2082;
        int v24 = v10;
        __int16 v25 = 2048;
        uint64_t v26 = a2;
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s %{public}s failed to remove association for node %p", buf, 0x20u);
      }
    }
    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      char v8 = (id)gLogObj;
      os_log_type_t v13 = type;
      BOOL v14 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v14)
        {
          uint64_t v15 = nw_endpoint_get_logging_description(*(void **)(a1 + 32));
          *(_DWORD *)int buf = 136446978;
          uint64_t v22 = "nw_endpoint_has_associations_block_invoke";
          __int16 v23 = 2082;
          int v24 = v15;
          __int16 v25 = 2048;
          uint64_t v26 = a2;
          __int16 v27 = 2082;
          os_log_type_t v28 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s %{public}s failed to remove association for node %p, dumping backtrace:%{public}s", buf, 0x2Au);
        }

        free(backtrace_string);
        if (v7) {
          goto LABEL_9;
        }
        return 1;
      }
      if (v14)
      {
        int v18 = nw_endpoint_get_logging_description(*(void **)(a1 + 32));
        *(_DWORD *)int buf = 136446722;
        uint64_t v22 = "nw_endpoint_has_associations_block_invoke";
        __int16 v23 = 2082;
        int v24 = v18;
        __int16 v25 = 2048;
        uint64_t v26 = a2;
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s %{public}s failed to remove association for node %p, no backtrace", buf, 0x20u);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      char v8 = (id)gLogObj;
      os_log_type_t v16 = type;
      if (os_log_type_enabled(v8, type))
      {
        uint64_t v17 = nw_endpoint_get_logging_description(*(void **)(a1 + 32));
        *(_DWORD *)int buf = 136446722;
        uint64_t v22 = "nw_endpoint_has_associations_block_invoke";
        __int16 v23 = 2082;
        int v24 = v17;
        __int16 v25 = 2048;
        uint64_t v26 = a2;
        _os_log_impl(&dword_1830D4000, v8, v16, "%{public}s %{public}s failed to remove association for node %p, backtrace limit exceeded", buf, 0x20u);
      }
    }
  }
  if (v7) {
LABEL_9:
  }
    free(v7);
  return 1;
}

void sub_18323FA64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_association_is_empty(void *a1)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  unint64_t v1 = a1;
  unint64_t v2 = v1;
  if (v1)
  {
    id v3 = nw_path_parameters_copy_context(v1[2]);
    nw_context_assert_queue(v3);
    os_log_type_t v4 = v2[7];
    if (v4 && v4[10])
    {
      time_t v5 = time(0);
      uint64_t v6 = (char *)v2[7];
      v18[0] = MEMORY[0x1E4F143A8];
      v18[1] = 3221225472;
      v18[2] = __nw_association_is_empty_block_invoke;
      v18[3] = &unk_1E524AF08;
      time_t v21 = v5;
      id v19 = v3;
      int v20 = v2;
      nw_hash_table_apply(v6, (uint64_t)v18);
    }
    if (*((unsigned char *)v2 + 76))
    {
      char v8 = v2[7];
      if (v8) {
        BOOL v7 = v8[10] == 0;
      }
      else {
        BOOL v7 = 1;
      }
    }
    else
    {
      BOOL v7 = 0;
    }

    goto LABEL_11;
  }
  os_log_type_t v10 = __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  __int16 v25 = "nw_association_is_empty";
  uint64_t v11 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t v23 = OS_LOG_TYPE_ERROR;
  char v22 = 0;
  if (__nwlog_fault(v11, &v23, &v22))
  {
    if (v23 == OS_LOG_TYPE_FAULT)
    {
      __int16 v12 = __nwlog_obj();
      os_log_type_t v13 = v23;
      if (os_log_type_enabled(v12, v23))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v25 = "nw_association_is_empty";
        _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s called with null association", buf, 0xCu);
      }
    }
    else if (v22)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __int16 v12 = __nwlog_obj();
      os_log_type_t v15 = v23;
      BOOL v16 = os_log_type_enabled(v12, v23);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)int buf = 136446466;
          __int16 v25 = "nw_association_is_empty";
          __int16 v26 = 2082;
          __int16 v27 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v12, v15, "%{public}s called with null association, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_28;
      }
      if (v16)
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v25 = "nw_association_is_empty";
        _os_log_impl(&dword_1830D4000, v12, v15, "%{public}s called with null association, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __int16 v12 = __nwlog_obj();
      os_log_type_t v17 = v23;
      if (os_log_type_enabled(v12, v23))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v25 = "nw_association_is_empty";
        _os_log_impl(&dword_1830D4000, v12, v17, "%{public}s called with null association, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_28:
  if (v11) {
    free(v11);
  }
  BOOL v7 = 0;
LABEL_11:

  return v7;
}

void sub_18323FDFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL47nw_protocol_implementation_remove_input_handlerP11nw_protocolS0_b_block_invoke(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = *(unsigned __int16 *)(nw_hash_node_get_extra(a2) + 52);
  if ((v3 & 2) == 0) {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
  }
  return (v3 >> 1) & 1;
}

uint64_t __nw_protocol_instance_report_done_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  uint64_t extra = nw_hash_node_get_extra(a2);
  *(_WORD *)(extra + 52) |= 0x200u;
  uint64_t object = nw_hash_node_get_object(a2);
  if (!object) {
    return 1;
  }
  uint64_t v6 = (void *)object;
  BOOL v7 = *(void **)(a1 + 32);
  if (v7)
  {
    uint64_t v8 = *(void *)(a1 + 40);
    uint64_t v9 = v8 ? v8 - 96 : 0;
    uint64_t v10 = *(void *)(object + 24);
    if (v10)
    {
      if (v8 && *(void *)(v10 + 56))
      {
        uint64_t v11 = v7;
        uint64_t v12 = v11[3];

        os_log_type_t v13 = (void *)v6[5];
        if (v13 == &nw_protocol_ref_counted_handle)
        {
          uint64_t v15 = v6[11];
          if (v15) {
            v6[11] = v15 + 1;
          }
          char v14 = -1;
        }
        else
        {
          char v14 = 0;
        }
        BOOL v49 = v6;
        char v50 = v14;
        if (*(_UNKNOWN **)(v9 + 40) == &nw_protocol_ref_counted_handle)
        {
          uint64_t v18 = *(void *)(v9 + 88);
          char v17 = 0;
          if (v18) {
            *(void *)(v9 + 88) = v18 + 1;
          }
          char v16 = -1;
        }
        else
        {
          char v16 = 0;
          char v17 = 1;
        }
        uint64_t v47 = v9;
        char v48 = v16;
        uint64_t v19 = v6[3];
        if (v19)
        {
          int v20 = *(void (**)(void *, uint64_t, uint64_t))(v19 + 56);
          if (v20)
          {
            v20(v6, v9, v12);
LABEL_22:
            if ((v17 & 1) == 0) {
              nw::release_if_needed<nw_protocol *>(&v47);
            }
            if (v13 == &nw_protocol_ref_counted_handle) {
              nw::release_if_needed<nw_protocol *>((uint64_t *)&v49);
            }
            goto LABEL_26;
          }
        }
        os_log_type_t v32 = __nwlog_obj();
        char v33 = (const char *)v6[2];
        *(_DWORD *)int buf = 136446722;
        *(void *)&uint8_t buf[4] = "__nw_protocol_error";
        if (!v33) {
          char v33 = "invalid";
        }
        __int16 v52 = 2082;
        uint64_t v53 = v33;
        __int16 v54 = 2048;
        BOOL v55 = v6;
        os_log_type_t v34 = (char *)_os_log_send_and_compose_impl();

        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v45 = 0;
        if (__nwlog_fault(v34, &type, &v45))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            BOOL v35 = __nwlog_obj();
            os_log_type_t v36 = type;
            if (os_log_type_enabled(v35, type))
            {
              BOOL v37 = (const char *)v6[2];
              if (!v37) {
                BOOL v37 = "invalid";
              }
              *(_DWORD *)int buf = 136446722;
              *(void *)&uint8_t buf[4] = "__nw_protocol_error";
              __int16 v52 = 2082;
              uint64_t v53 = v37;
              __int16 v54 = 2048;
              BOOL v55 = v6;
              _os_log_impl(&dword_1830D4000, v35, v36, "%{public}s protocol %{public}s (%p) has invalid error callback", buf, 0x20u);
            }
          }
          else if (v45)
          {
            backtrace_string = (char *)__nw_create_backtrace_string();
            BOOL v35 = __nwlog_obj();
            os_log_type_t v39 = type;
            BOOL v40 = os_log_type_enabled(v35, type);
            if (backtrace_string)
            {
              if (v40)
              {
                uint64_t v41 = (const char *)v6[2];
                if (!v41) {
                  uint64_t v41 = "invalid";
                }
                *(_DWORD *)int buf = 136446978;
                *(void *)&uint8_t buf[4] = "__nw_protocol_error";
                __int16 v52 = 2082;
                uint64_t v53 = v41;
                __int16 v54 = 2048;
                BOOL v55 = v6;
                __int16 v56 = 2082;
                uint64_t v57 = backtrace_string;
                _os_log_impl(&dword_1830D4000, v35, v39, "%{public}s protocol %{public}s (%p) has invalid error callback, dumping backtrace:%{public}s", buf, 0x2Au);
              }

              free(backtrace_string);
              goto LABEL_73;
            }
            if (v40)
            {
              uint64_t v44 = (const char *)v6[2];
              if (!v44) {
                uint64_t v44 = "invalid";
              }
              *(_DWORD *)int buf = 136446722;
              *(void *)&uint8_t buf[4] = "__nw_protocol_error";
              __int16 v52 = 2082;
              uint64_t v53 = v44;
              __int16 v54 = 2048;
              BOOL v55 = v6;
              _os_log_impl(&dword_1830D4000, v35, v39, "%{public}s protocol %{public}s (%p) has invalid error callback, no backtrace", buf, 0x20u);
            }
          }
          else
          {
            BOOL v35 = __nwlog_obj();
            os_log_type_t v42 = type;
            if (os_log_type_enabled(v35, type))
            {
              int v43 = (const char *)v6[2];
              if (!v43) {
                int v43 = "invalid";
              }
              *(_DWORD *)int buf = 136446722;
              *(void *)&uint8_t buf[4] = "__nw_protocol_error";
              __int16 v52 = 2082;
              uint64_t v53 = v43;
              __int16 v54 = 2048;
              BOOL v55 = v6;
              _os_log_impl(&dword_1830D4000, v35, v42, "%{public}s protocol %{public}s (%p) has invalid error callback, backtrace limit exceeded", buf, 0x20u);
            }
          }
        }
LABEL_73:
        if (v34) {
          free(v34);
        }
        goto LABEL_22;
      }
    }
  }
LABEL_26:
  uint64_t v21 = *(void *)(a1 + 40);
  if (v21) {
    uint64_t v22 = v21 - 96;
  }
  else {
    uint64_t v22 = 0;
  }
  uint64_t v23 = v6[3];
  if (v23)
  {
    if (v21)
    {
      int v24 = *(void (**)(void *))(v23 + 48);
      if (v24)
      {
        __int16 v25 = (void *)v6[5];
        if (v25 == &nw_protocol_ref_counted_handle)
        {
          uint64_t v27 = v6[11];
          if (v27) {
            v6[11] = v27 + 1;
          }
          char v26 = -1;
        }
        else
        {
          char v26 = 0;
        }
        *(void *)int buf = v6;
        buf[8] = v26;
        if (*(_UNKNOWN **)(v22 + 40) == &nw_protocol_ref_counted_handle)
        {
          uint64_t v30 = *(void *)(v22 + 88);
          char v29 = 0;
          if (v30) {
            *(void *)(v22 + 88) = v30 + 1;
          }
          char v28 = -1;
        }
        else
        {
          char v28 = 0;
          char v29 = 1;
        }
        BOOL v49 = (void *)v22;
        char v50 = v28;
        v24(v6);
        if ((v29 & 1) == 0) {
          nw::release_if_needed<nw_protocol *>((uint64_t *)&v49);
        }
        if (v25 == &nw_protocol_ref_counted_handle) {
          nw::release_if_needed<nw_protocol *>((uint64_t *)buf);
        }
      }
    }
  }
  return 1;
}

void sub_183240398(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19)
{
}

uint64_t ___ZL47nw_protocol_implementation_remove_input_handlerP11nw_protocolS0_b_block_invoke_290(uint64_t a1, uint64_t a2)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t object = nw_hash_node_get_object(a2);
  if (v3)
  {
    uint64_t v5 = object;
    uint64_t v6 = *(void *)(v3 + 48);
    if (v6 != object)
    {
      if (v6)
      {
        if (*(_UNKNOWN **)(v6 + 40) == &nw_protocol_ref_counted_handle)
        {
          uint64_t v12 = *(void *)(v6 + 88);
          if (v12)
          {
            uint64_t v13 = v12 - 1;
            *(void *)(v6 + 88) = v13;
            if (!v13)
            {
              char v14 = *(void (***)(void))(v6 + 64);
              if (v14)
              {
                *(void *)(v6 + 64) = 0;
                v14[2](v14);
                _Block_release(v14);
              }
              if (*(unsigned char *)(v6 + 72))
              {
                uint64_t v15 = *(const void **)(v6 + 64);
                if (v15) {
                  _Block_release(v15);
                }
              }
              free((void *)v6);
            }
          }
        }
      }
      *(void *)(v3 + 48) = v5;
      if (v5)
      {
        if (*(_UNKNOWN **)(v5 + 40) == &nw_protocol_ref_counted_handle)
        {
          uint64_t v7 = *(void *)(v5 + 88);
          if (v7) {
            *(void *)(v5 + 88) = v7 + 1;
          }
        }
      }
    }
    goto LABEL_9;
  }
  char v16 = __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  __int16 v52 = "__nw_protocol_set_input_handler";
  char v17 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v49 = 0;
  if (__nwlog_fault(v17, &type, &v49))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v18 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v52 = "__nw_protocol_set_input_handler";
        _os_log_impl(&dword_1830D4000, v18, v19, "%{public}s called with null protocol", buf, 0xCu);
      }
    }
    else if (v49)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v18 = __nwlog_obj();
      os_log_type_t v32 = type;
      BOOL v33 = os_log_type_enabled(v18, type);
      if (backtrace_string)
      {
        if (v33)
        {
          *(_DWORD *)int buf = 136446466;
          __int16 v52 = "__nw_protocol_set_input_handler";
          __int16 v53 = 2082;
          __int16 v54 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v18, v32, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_62;
      }
      if (v33)
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v52 = "__nw_protocol_set_input_handler";
        _os_log_impl(&dword_1830D4000, v18, v32, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v18 = __nwlog_obj();
      os_log_type_t v37 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v52 = "__nw_protocol_set_input_handler";
        _os_log_impl(&dword_1830D4000, v18, v37, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_62:
  if (v17) {
    free(v17);
  }
LABEL_9:
  uint64_t v8 = *(void *)(a1 + 40);
  if (v8)
  {
    uint64_t v9 = *(_OWORD **)(v8 + 48);
    goto LABEL_11;
  }
  int v20 = __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  __int16 v52 = "__nw_protocol_get_input_handler";
  uint64_t v21 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v49 = 0;
  if (__nwlog_fault(v21, &type, &v49))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v22 = __nwlog_obj();
      os_log_type_t v23 = type;
      if (os_log_type_enabled(v22, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v52 = "__nw_protocol_get_input_handler";
        _os_log_impl(&dword_1830D4000, v22, v23, "%{public}s called with null protocol", buf, 0xCu);
      }
    }
    else if (v49)
    {
      os_log_type_t v34 = (char *)__nw_create_backtrace_string();
      uint64_t v22 = __nwlog_obj();
      os_log_type_t v35 = type;
      BOOL v36 = os_log_type_enabled(v22, type);
      if (v34)
      {
        if (v36)
        {
          *(_DWORD *)int buf = 136446466;
          __int16 v52 = "__nw_protocol_get_input_handler";
          __int16 v53 = 2082;
          __int16 v54 = v34;
          _os_log_impl(&dword_1830D4000, v22, v35, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v34);
        goto LABEL_67;
      }
      if (v36)
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v52 = "__nw_protocol_get_input_handler";
        _os_log_impl(&dword_1830D4000, v22, v35, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v22 = __nwlog_obj();
      os_log_type_t v38 = type;
      if (os_log_type_enabled(v22, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v52 = "__nw_protocol_get_input_handler";
        _os_log_impl(&dword_1830D4000, v22, v38, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_67:
  if (v21) {
    free(v21);
  }
  uint64_t v8 = 0;
  uint64_t v9 = 0;
LABEL_11:
  nw_protocol_set_flow_id_from_protocol((_OWORD *)v8, v9);
  uint64_t v10 = *(void *)(a1 + 32);
  if ((!v10 || (*(char *)(v10 + 405) & 0x80000000) == 0) && gLogDatapath)
  {
    int v24 = __nwlog_obj();
    if (!os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
    {
LABEL_42:

      return 0;
    }
    __int16 v25 = "";
    uint64_t v27 = *(void *)(a1 + 32);
    uint64_t v26 = *(void *)(a1 + 40);
    BOOL v28 = v27 == 0;
    if (v27) {
      char v29 = (const char *)(v27 + 407);
    }
    else {
      char v29 = "";
    }
    if (!v28) {
      __int16 v25 = " ";
    }
    if (v26)
    {
      uint64_t v30 = *(void *)(v26 + 48);
LABEL_41:
      *(_DWORD *)int buf = 136446978;
      __int16 v52 = "nw_protocol_implementation_remove_input_handler_block_invoke";
      __int16 v53 = 2082;
      __int16 v54 = (void *)v29;
      __int16 v55 = 2080;
      __int16 v56 = v25;
      __int16 v57 = 2048;
      uint64_t v58 = v30;
      _os_log_impl(&dword_1830D4000, v24, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sReset default input handler to %p", buf, 0x2Au);
      goto LABEL_42;
    }
    uint64_t v47 = v29;
    char v48 = v25;
    os_log_type_t v39 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    __int16 v52 = "__nw_protocol_get_input_handler";
    BOOL v40 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v49 = 0;
    if (__nwlog_fault(v40, &type, &v49))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v41 = __nwlog_obj();
        os_log_type_t v42 = type;
        if (os_log_type_enabled(v41, type))
        {
          *(_DWORD *)int buf = 136446210;
          __int16 v52 = "__nw_protocol_get_input_handler";
          _os_log_impl(&dword_1830D4000, v41, v42, "%{public}s called with null protocol", buf, 0xCu);
        }
      }
      else if (v49)
      {
        int v43 = (char *)__nw_create_backtrace_string();
        uint64_t v41 = __nwlog_obj();
        os_log_type_t v44 = type;
        BOOL v45 = os_log_type_enabled(v41, type);
        if (v43)
        {
          if (v45)
          {
            *(_DWORD *)int buf = 136446466;
            __int16 v52 = "__nw_protocol_get_input_handler";
            __int16 v53 = 2082;
            __int16 v54 = v43;
            _os_log_impl(&dword_1830D4000, v41, v44, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v43);
          goto LABEL_86;
        }
        if (v45)
        {
          *(_DWORD *)int buf = 136446210;
          __int16 v52 = "__nw_protocol_get_input_handler";
          _os_log_impl(&dword_1830D4000, v41, v44, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        uint64_t v41 = __nwlog_obj();
        os_log_type_t v46 = type;
        if (os_log_type_enabled(v41, type))
        {
          *(_DWORD *)int buf = 136446210;
          __int16 v52 = "__nw_protocol_get_input_handler";
          _os_log_impl(&dword_1830D4000, v41, v46, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_86:
    if (v40) {
      free(v40);
    }
    uint64_t v30 = 0;
    char v29 = v47;
    __int16 v25 = v48;
    goto LABEL_41;
  }
  return 0;
}

xpc_object_t network_proxy_copy_host(void *a1)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    int v20 = "network_proxy_copy_host";
    uint64_t v10 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v17 = 0;
    if (!__nwlog_fault(v10, &type, &v17)) {
      goto LABEL_23;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (!os_log_type_enabled(v11, type)) {
        goto LABEL_23;
      }
      *(_DWORD *)int buf = 136446210;
      int v20 = "network_proxy_copy_host";
      uint64_t v13 = "%{public}s called with null proxy";
    }
    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v15 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)int buf = 136446466;
          int v20 = "network_proxy_copy_host";
          __int16 v21 = 2082;
          uint64_t v22 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s called with null proxy, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_23;
      }
      if (!v15)
      {
LABEL_23:
        if (v10) {
          free(v10);
        }
        return 0;
      }
      *(_DWORD *)int buf = 136446210;
      int v20 = "network_proxy_copy_host";
      uint64_t v13 = "%{public}s called with null proxy, no backtrace";
    }
    else
    {
      uint64_t v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (!os_log_type_enabled(v11, type)) {
        goto LABEL_23;
      }
      *(_DWORD *)int buf = 136446210;
      int v20 = "network_proxy_copy_host";
      uint64_t v13 = "%{public}s called with null proxy, backtrace limit exceeded";
    }
    _os_log_impl(&dword_1830D4000, v11, v12, v13, buf, 0xCu);
    goto LABEL_23;
  }
  unint64_t v1 = a1;
  id v2 = v1[5];

  if (!v2) {
    return 0;
  }
  id v3 = v2;
  int v4 = [v3 type];

  if ((v4 == 2 || (v5 = v3, int v6 = [v5 type], v5, v6 == 1))
    && (v7 = v3, uint64_t v8 = (const char *)[v7 hostname], v7, v8))
  {
    xpc_object_t v9 = xpc_string_create(v8);
  }
  else
  {
    xpc_object_t v9 = 0;
  }
  os_release(v3);
  return v9;
}

void sub_183240ED0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_protocol_http1_updated_path(nw_protocol *a1, nw_protocol *a2, nw_path *a3)
{
  uint64_t v72 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    __int16 v53 = "nw_http1_get_http1_protocol";
    __int16 v21 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v50 = 0;
    if (!__nwlog_fault(v21, &type, &v50)) {
      goto LABEL_94;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v50)
      {
        uint64_t v22 = __nwlog_obj();
        os_log_type_t v23 = type;
        if (!os_log_type_enabled(v22, type)) {
          goto LABEL_94;
        }
        *(_DWORD *)int buf = 136446210;
        __int16 v53 = "nw_http1_get_http1_protocol";
        int v24 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_93;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v22 = __nwlog_obj();
      os_log_type_t v23 = type;
      BOOL v26 = os_log_type_enabled(v22, type);
      if (!backtrace_string)
      {
        if (!v26) {
          goto LABEL_94;
        }
        *(_DWORD *)int buf = 136446210;
        __int16 v53 = "nw_http1_get_http1_protocol";
        int v24 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_93;
      }
      if (v26)
      {
        *(_DWORD *)int buf = 136446466;
        __int16 v53 = "nw_http1_get_http1_protocol";
        __int16 v54 = 2082;
        __int16 v55 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v22, v23, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_94;
    }
    uint64_t v22 = __nwlog_obj();
    os_log_type_t v23 = type;
    if (!os_log_type_enabled(v22, type)) {
      goto LABEL_94;
    }
    *(_DWORD *)int buf = 136446210;
    __int16 v53 = "nw_http1_get_http1_protocol";
    int v24 = "%{public}s called with null protocol";
LABEL_93:
    _os_log_impl(&dword_1830D4000, v22, v23, v24, buf, 0xCu);
    goto LABEL_94;
  }
  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    __int16 v53 = "nw_http1_get_http1_protocol";
    __int16 v21 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v50 = 0;
    if (!__nwlog_fault(v21, &type, &v50)) {
      goto LABEL_94;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v50)
      {
        uint64_t v22 = __nwlog_obj();
        os_log_type_t v23 = type;
        if (!os_log_type_enabled(v22, type)) {
          goto LABEL_94;
        }
        *(_DWORD *)int buf = 136446210;
        __int16 v53 = "nw_http1_get_http1_protocol";
        int v24 = "%{public}s called with null handle, backtrace limit exceeded";
        goto LABEL_93;
      }
      uint64_t v27 = (char *)__nw_create_backtrace_string();
      uint64_t v22 = __nwlog_obj();
      os_log_type_t v23 = type;
      BOOL v28 = os_log_type_enabled(v22, type);
      if (!v27)
      {
        if (!v28) {
          goto LABEL_94;
        }
        *(_DWORD *)int buf = 136446210;
        __int16 v53 = "nw_http1_get_http1_protocol";
        int v24 = "%{public}s called with null handle, no backtrace";
        goto LABEL_93;
      }
      if (v28)
      {
        *(_DWORD *)int buf = 136446466;
        __int16 v53 = "nw_http1_get_http1_protocol";
        __int16 v54 = 2082;
        __int16 v55 = v27;
        char v29 = "%{public}s called with null handle, dumping backtrace:%{public}s";
LABEL_71:
        _os_log_impl(&dword_1830D4000, v22, v23, v29, buf, 0x16u);
      }
LABEL_72:
      free(v27);
      if (!v21)
      {
LABEL_96:
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        *(_DWORD *)int buf = 136446210;
        __int16 v53 = "nw_protocol_http1_updated_path";
        os_log_type_t v38 = (char *)_os_log_send_and_compose_impl();
        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v50 = 0;
        if (!__nwlog_fault(v38, &type, &v50)) {
          goto LABEL_127;
        }
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v39 = gLogObj;
          os_log_type_t v40 = type;
          if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
            goto LABEL_127;
          }
          *(_DWORD *)int buf = 136446210;
          __int16 v53 = "nw_protocol_http1_updated_path";
          uint64_t v41 = "%{public}s called with null http1";
        }
        else
        {
          if (v50)
          {
            os_log_type_t v42 = (char *)__nw_create_backtrace_string();
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            int v43 = gLogObj;
            os_log_type_t v44 = type;
            BOOL v45 = os_log_type_enabled((os_log_t)gLogObj, type);
            if (v42)
            {
              if (v45)
              {
                *(_DWORD *)int buf = 136446466;
                __int16 v53 = "nw_protocol_http1_updated_path";
                __int16 v54 = 2082;
                __int16 v55 = v42;
                os_log_type_t v46 = "%{public}s called with null http1, dumping backtrace:%{public}s";
LABEL_121:
                _os_log_impl(&dword_1830D4000, v43, v44, v46, buf, 0x16u);
              }
LABEL_122:
              free(v42);
              goto LABEL_127;
            }
            if (!v45) {
              goto LABEL_127;
            }
            *(_DWORD *)int buf = 136446210;
            __int16 v53 = "nw_protocol_http1_updated_path";
            uint64_t v41 = "%{public}s called with null http1, no backtrace";
LABEL_132:
            char v48 = v43;
            os_log_type_t v49 = v44;
            goto LABEL_126;
          }
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v39 = gLogObj;
          os_log_type_t v40 = type;
          if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
            goto LABEL_127;
          }
          *(_DWORD *)int buf = 136446210;
          __int16 v53 = "nw_protocol_http1_updated_path";
          uint64_t v41 = "%{public}s called with null http1, backtrace limit exceeded";
        }
LABEL_125:
        char v48 = v39;
        os_log_type_t v49 = v40;
LABEL_126:
        _os_log_impl(&dword_1830D4000, v48, v49, v41, buf, 0xCu);
        goto LABEL_127;
      }
LABEL_95:
      free(v21);
      goto LABEL_96;
    }
    uint64_t v22 = __nwlog_obj();
    os_log_type_t v23 = type;
    if (!os_log_type_enabled(v22, type)) {
      goto LABEL_94;
    }
    *(_DWORD *)int buf = 136446210;
    __int16 v53 = "nw_http1_get_http1_protocol";
    int v24 = "%{public}s called with null handle";
    goto LABEL_93;
  }
  int v5 = *((_DWORD *)handle + 6);
  int v6 = a1->handle;
  if (v5 == 1) {
    goto LABEL_10;
  }
  if (v5 != 2)
  {
    if (v5 != 3) {
      goto LABEL_96;
    }
    uint64_t v7 = *((void *)handle + 2);
    if (v7)
    {
      int v6 = (void *)(v7 + 480);
      goto LABEL_10;
    }
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    __int16 v53 = "nw_http1_get_http1_protocol";
    __int16 v21 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v50 = 0;
    if (__nwlog_fault(v21, &type, &v50))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v22 = __nwlog_obj();
        os_log_type_t v23 = type;
        if (!os_log_type_enabled(v22, type)) {
          goto LABEL_94;
        }
        *(_DWORD *)int buf = 136446210;
        __int16 v53 = "nw_http1_get_http1_protocol";
        int v24 = "%{public}s called with null handle->http1_connection";
        goto LABEL_93;
      }
      if (!v50)
      {
        uint64_t v22 = __nwlog_obj();
        os_log_type_t v23 = type;
        if (!os_log_type_enabled(v22, type)) {
          goto LABEL_94;
        }
        *(_DWORD *)int buf = 136446210;
        __int16 v53 = "nw_http1_get_http1_protocol";
        int v24 = "%{public}s called with null handle->http1_connection, backtrace limit exceeded";
        goto LABEL_93;
      }
      uint64_t v27 = (char *)__nw_create_backtrace_string();
      uint64_t v22 = __nwlog_obj();
      os_log_type_t v23 = type;
      BOOL v34 = os_log_type_enabled(v22, type);
      if (!v27)
      {
        if (!v34) {
          goto LABEL_94;
        }
        *(_DWORD *)int buf = 136446210;
        __int16 v53 = "nw_http1_get_http1_protocol";
        int v24 = "%{public}s called with null handle->http1_connection, no backtrace";
        goto LABEL_93;
      }
      if (v34)
      {
        *(_DWORD *)int buf = 136446466;
        __int16 v53 = "nw_http1_get_http1_protocol";
        __int16 v54 = 2082;
        __int16 v55 = v27;
        char v29 = "%{public}s called with null handle->http1_connection, dumping backtrace:%{public}s";
        goto LABEL_71;
      }
      goto LABEL_72;
    }
LABEL_94:
    if (!v21) {
      goto LABEL_96;
    }
    goto LABEL_95;
  }
  uint64_t v8 = *((void *)handle + 1);
  if (!v8)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    __int16 v53 = "nw_http1_get_http1_protocol";
    __int16 v21 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v50 = 0;
    if (!__nwlog_fault(v21, &type, &v50)) {
      goto LABEL_94;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v22 = __nwlog_obj();
      os_log_type_t v23 = type;
      if (!os_log_type_enabled(v22, type)) {
        goto LABEL_94;
      }
      *(_DWORD *)int buf = 136446210;
      __int16 v53 = "nw_http1_get_http1_protocol";
      int v24 = "%{public}s called with null handle->http1_stream";
      goto LABEL_93;
    }
    if (!v50)
    {
      uint64_t v22 = __nwlog_obj();
      os_log_type_t v23 = type;
      if (!os_log_type_enabled(v22, type)) {
        goto LABEL_94;
      }
      *(_DWORD *)int buf = 136446210;
      __int16 v53 = "nw_http1_get_http1_protocol";
      int v24 = "%{public}s called with null handle->http1_stream, backtrace limit exceeded";
      goto LABEL_93;
    }
    uint64_t v27 = (char *)__nw_create_backtrace_string();
    uint64_t v22 = __nwlog_obj();
    os_log_type_t v23 = type;
    BOOL v35 = os_log_type_enabled(v22, type);
    if (!v27)
    {
      if (!v35) {
        goto LABEL_94;
      }
      *(_DWORD *)int buf = 136446210;
      __int16 v53 = "nw_http1_get_http1_protocol";
      int v24 = "%{public}s called with null handle->http1_stream, no backtrace";
      goto LABEL_93;
    }
    if (v35)
    {
      *(_DWORD *)int buf = 136446466;
      __int16 v53 = "nw_http1_get_http1_protocol";
      __int16 v54 = 2082;
      __int16 v55 = v27;
      char v29 = "%{public}s called with null handle->http1_stream, dumping backtrace:%{public}s";
      goto LABEL_71;
    }
    goto LABEL_72;
  }
  int v6 = (void *)(v8 + 248);
LABEL_10:
  if (!*v6) {
    goto LABEL_96;
  }
  if (v5 != 2)
  {
    if (v5 != 3)
    {
LABEL_113:
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      *(_DWORD *)int buf = 136446210;
      __int16 v53 = "nw_protocol_http1_updated_path";
      os_log_type_t v38 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v50 = 0;
      if (!__nwlog_fault(v38, &type, &v50)) {
        goto LABEL_127;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v39 = gLogObj;
        os_log_type_t v40 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
          goto LABEL_127;
        }
        *(_DWORD *)int buf = 136446210;
        __int16 v53 = "nw_protocol_http1_updated_path";
        uint64_t v41 = "%{public}s called with null http1_stream";
        goto LABEL_125;
      }
      if (!v50)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v39 = gLogObj;
        os_log_type_t v40 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
          goto LABEL_127;
        }
        *(_DWORD *)int buf = 136446210;
        __int16 v53 = "nw_protocol_http1_updated_path";
        uint64_t v41 = "%{public}s called with null http1_stream, backtrace limit exceeded";
        goto LABEL_125;
      }
      os_log_type_t v42 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v43 = gLogObj;
      os_log_type_t v44 = type;
      BOOL v47 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (v42)
      {
        if (v47)
        {
          *(_DWORD *)int buf = 136446466;
          __int16 v53 = "nw_protocol_http1_updated_path";
          __int16 v54 = 2082;
          __int16 v55 = v42;
          os_log_type_t v46 = "%{public}s called with null http1_stream, dumping backtrace:%{public}s";
          goto LABEL_121;
        }
        goto LABEL_122;
      }
      if (!v47)
      {
LABEL_127:
        if (v38) {
          free(v38);
        }
        return 0;
      }
      *(_DWORD *)int buf = 136446210;
      __int16 v53 = "nw_protocol_http1_updated_path";
      uint64_t v41 = "%{public}s called with null http1_stream, no backtrace";
      goto LABEL_132;
    }
    uint64_t v9 = *((void *)handle + 2);
    if (v9)
    {
      uint64_t v10 = (uint64_t *)(v9 + 488);
      goto LABEL_16;
    }
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    __int16 v53 = "nw_http1_get_stream_for_protocol";
    uint64_t v30 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v50 = 0;
    if (__nwlog_fault(v30, &type, &v50))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v31 = __nwlog_obj();
        os_log_type_t v32 = type;
        if (!os_log_type_enabled(v31, type)) {
          goto LABEL_111;
        }
        *(_DWORD *)int buf = 136446210;
        __int16 v53 = "nw_http1_get_stream_for_protocol";
        BOOL v33 = "%{public}s called with null handle->http1_connection";
        goto LABEL_110;
      }
      if (!v50)
      {
        os_log_type_t v31 = __nwlog_obj();
        os_log_type_t v32 = type;
        if (!os_log_type_enabled(v31, type)) {
          goto LABEL_111;
        }
        *(_DWORD *)int buf = 136446210;
        __int16 v53 = "nw_http1_get_stream_for_protocol";
        BOOL v33 = "%{public}s called with null handle->http1_connection, backtrace limit exceeded";
        goto LABEL_110;
      }
      BOOL v36 = (char *)__nw_create_backtrace_string();
      os_log_type_t v31 = __nwlog_obj();
      os_log_type_t v32 = type;
      BOOL v37 = os_log_type_enabled(v31, type);
      if (v36)
      {
        if (v37)
        {
          *(_DWORD *)int buf = 136446466;
          __int16 v53 = "nw_http1_get_stream_for_protocol";
          __int16 v54 = 2082;
          __int16 v55 = v36;
          _os_log_impl(&dword_1830D4000, v31, v32, "%{public}s called with null handle->http1_connection, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v36);
        goto LABEL_111;
      }
      if (v37)
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v53 = "nw_http1_get_stream_for_protocol";
        BOOL v33 = "%{public}s called with null handle->http1_connection, no backtrace";
LABEL_110:
        _os_log_impl(&dword_1830D4000, v31, v32, v33, buf, 0xCu);
      }
    }
LABEL_111:
    if (v30) {
      free(v30);
    }
    goto LABEL_113;
  }
  uint64_t v10 = (uint64_t *)(handle + 8);
LABEL_16:
  uint64_t v11 = *v10;
  if (!*v10) {
    goto LABEL_113;
  }
  uint64_t v12 = *(void *)(v11 + 256);
  if (v12)
  {
    int v13 = *(_DWORD *)(v12 + 864);
    uint64_t v14 = *(void *)(v12 + 32);
    if (*(unsigned char *)(v11 + 158)) {
      goto LABEL_25;
    }
  }
  else
  {
    uint64_t v14 = 0;
    int v13 = 5;
    if (*(unsigned char *)(v11 + 158)) {
      goto LABEL_25;
    }
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  BOOL v15 = gLogObj;
  if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
  {
    uint64_t v16 = *(void *)(v11 + 256);
    int v17 = *(_DWORD *)(*(void *)(v11 + 248) + 372);
    if (v16) {
      LODWORD(v16) = *(_DWORD *)(v16 + 860);
    }
    int v18 = *(_DWORD *)(v11 + 424);
    *(_DWORD *)int buf = 136448514;
    __int16 v53 = "nw_protocol_http1_updated_path";
    __int16 v54 = 2082;
    __int16 v55 = (char *)(v11 + 74);
    __int16 v56 = 2080;
    __int16 v57 = " ";
    __int16 v58 = 1024;
    int v59 = v17;
    __int16 v60 = 1024;
    int v61 = v16;
    __int16 v62 = 1024;
    int v63 = v18;
    __int16 v64 = 2048;
    uint64_t v65 = v11;
    __int16 v66 = 2048;
    uint64_t v67 = v12;
    __int16 v68 = 1024;
    int v69 = v13;
    __int16 v70 = 2048;
    uint64_t v71 = v14;
    _os_log_impl(&dword_1830D4000, v15, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s<i%u:c%u:s%u> called for stream, protocol: %p, connection protocol: %p, connection state: %u, output_handler: %p", buf, 0x56u);
  }
LABEL_25:
  if (v12) {
    BOOL v19 = v14 == 0;
  }
  else {
    BOOL v19 = 1;
  }
  if (!v19) {
    return nw_protocol_updated_path(v14, v12, (uint64_t)a3);
  }
  return 0;
}

void sub_1832438C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, void *a19)
{
  _Unwind_Resume(a1);
}

uint64_t nw_socket_updated_path(nw_protocol *a1, nw_protocol *a2, nw_path *a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (a1->handle == &nw_protocol_ref_counted_handle)
    {
      int effective_traffic_class = nw_path_get_effective_traffic_class(a3);
      nw_socket_set_traffic_class((uint64_t)&a1[1].output_handler, effective_traffic_class);
      if (*(_DWORD *)a1[4].flow_id != 9216) {
        *(_DWORD *)a1[4].flow_id = nw_path_get_maximum_datagram_size(a3);
      }
      return 1;
    }
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    int v18 = "nw_socket_updated_path";
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v15 = 0;
    if (!__nwlog_fault(v7, &type, &v15)) {
      goto LABEL_34;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)int buf = 136446210;
        int v18 = "nw_socket_updated_path";
        uint64_t v10 = "%{public}s called with null socket_handler";
        goto LABEL_33;
      }
      goto LABEL_34;
    }
    if (!v15)
    {
      uint64_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)int buf = 136446210;
        int v18 = "nw_socket_updated_path";
        uint64_t v10 = "%{public}s called with null socket_handler, backtrace limit exceeded";
        goto LABEL_33;
      }
      goto LABEL_34;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v8 = __nwlog_obj();
    os_log_type_t v9 = type;
    BOOL v14 = os_log_type_enabled(v8, type);
    if (!backtrace_string)
    {
      if (v14)
      {
        *(_DWORD *)int buf = 136446210;
        int v18 = "nw_socket_updated_path";
        uint64_t v10 = "%{public}s called with null socket_handler, no backtrace";
        goto LABEL_33;
      }
      goto LABEL_34;
    }
    if (v14)
    {
      *(_DWORD *)int buf = 136446466;
      int v18 = "nw_socket_updated_path";
      __int16 v19 = 2082;
      int v20 = backtrace_string;
      int v13 = "%{public}s called with null socket_handler, dumping backtrace:%{public}s";
      goto LABEL_23;
    }
    goto LABEL_24;
  }
  __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  int v18 = "nw_socket_updated_path";
  uint64_t v7 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (!__nwlog_fault(v7, &type, &v15)) {
    goto LABEL_34;
  }
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v15)
    {
      uint64_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)int buf = 136446210;
        int v18 = "nw_socket_updated_path";
        uint64_t v10 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_33;
      }
      goto LABEL_34;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v8 = __nwlog_obj();
    os_log_type_t v9 = type;
    BOOL v12 = os_log_type_enabled(v8, type);
    if (!backtrace_string)
    {
      if (v12)
      {
        *(_DWORD *)int buf = 136446210;
        int v18 = "nw_socket_updated_path";
        uint64_t v10 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_33;
      }
      goto LABEL_34;
    }
    if (v12)
    {
      *(_DWORD *)int buf = 136446466;
      int v18 = "nw_socket_updated_path";
      __int16 v19 = 2082;
      int v20 = backtrace_string;
      int v13 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_23:
      _os_log_impl(&dword_1830D4000, v8, v9, v13, buf, 0x16u);
    }
LABEL_24:
    free(backtrace_string);
    goto LABEL_34;
  }
  uint64_t v8 = __nwlog_obj();
  os_log_type_t v9 = type;
  if (os_log_type_enabled(v8, type))
  {
    *(_DWORD *)int buf = 136446210;
    int v18 = "nw_socket_updated_path";
    uint64_t v10 = "%{public}s called with null protocol";
LABEL_33:
    _os_log_impl(&dword_1830D4000, v8, v9, v10, buf, 0xCu);
  }
LABEL_34:
  if (v7) {
    free(v7);
  }
  return 0;
}

uint64_t nw_path_get_effective_traffic_class(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  unint64_t v1 = a1;
  id v2 = v1;
  if (!v1)
  {
    int v4 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v16 = "nw_path_get_effective_traffic_class";
    int v5 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v13 = 0;
    if (__nwlog_fault(v5, &type, &v13))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        int v6 = __nwlog_obj();
        os_log_type_t v7 = type;
        if (os_log_type_enabled(v6, type))
        {
          *(_DWORD *)int buf = 136446210;
          uint64_t v16 = "nw_path_get_effective_traffic_class";
          _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null path", buf, 0xCu);
        }
      }
      else if (v13)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        int v6 = __nwlog_obj();
        os_log_type_t v9 = type;
        BOOL v10 = os_log_type_enabled(v6, type);
        if (backtrace_string)
        {
          if (v10)
          {
            *(_DWORD *)int buf = 136446466;
            uint64_t v16 = "nw_path_get_effective_traffic_class";
            __int16 v17 = 2082;
            int v18 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_21;
        }
        if (v10)
        {
          *(_DWORD *)int buf = 136446210;
          uint64_t v16 = "nw_path_get_effective_traffic_class";
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null path, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        int v6 = __nwlog_obj();
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v6, type))
        {
          *(_DWORD *)int buf = 136446210;
          uint64_t v16 = "nw_path_get_effective_traffic_class";
          _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_21:
    if (v5) {
      free(v5);
    }
    goto LABEL_23;
  }
  if (!nw_path_network_is_satisfied_update_reason(v1, 0))
  {
LABEL_23:
    uint64_t effective_traffic_class = 0;
    goto LABEL_24;
  }
  uint64_t effective_traffic_class = v2->effective_traffic_class;
  if (!effective_traffic_class) {
    uint64_t effective_traffic_class = nw_parameters_get_traffic_class(v2->parameters);
  }
LABEL_24:

  return effective_traffic_class;
}

void sub_1832440CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_parameters_get_traffic_class(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    uint64_t v3 = *(unsigned int *)(*((void *)v1 + 13) + 72);
    goto LABEL_3;
  }
  int v5 = __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  uint64_t v16 = "nw_parameters_get_traffic_class";
  int v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v16 = "nw_parameters_get_traffic_class";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          uint64_t v16 = "nw_parameters_get_traffic_class";
          __int16 v17 = 2082;
          int v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v16 = "nw_parameters_get_traffic_class";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v16 = "nw_parameters_get_traffic_class";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_socket_set_traffic_class(uint64_t a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  int v15 = a2;
  if (*(_DWORD *)(a1 + 168) == a2) {
    return 0;
  }
  if (!setsockopt(*(_DWORD *)(a1 + 172), 0xFFFF, 4230, &v15, 4u))
  {
    uint64_t v2 = 0;
    *(_DWORD *)(a1 + 168) = v15;
    return v2;
  }
  uint64_t v2 = **(unsigned int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
  if (__nwlog_connection_log::onceToken != -1) {
    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
  }
  int v4 = gconnectionLogObj;
  if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)int buf = 136446722;
    __int16 v17 = "nw_socket_set_traffic_class";
    __int16 v18 = 2080;
    *(void *)uint64_t v19 = a1 + 308;
    *(_WORD *)&v19[8] = 1024;
    *(_DWORD *)&v19[10] = v2;
    _os_log_impl(&dword_1830D4000, v4, OS_LOG_TYPE_ERROR, "%{public}s %s setsockopt SO_TRAFFIC_CLASS failed %{darwin.errno}d", buf, 0x1Cu);
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  int v5 = gLogObj;
  if (v2 == 22)
  {
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136446466;
      __int16 v17 = "nw_socket_set_traffic_class";
      __int16 v18 = 1024;
      *(_DWORD *)uint64_t v19 = 22;
      _os_log_impl(&dword_1830D4000, v5, OS_LOG_TYPE_ERROR, "%{public}s setsockopt SO_TRAFFIC_CLASS failed %{darwin.errno}d", buf, 0x12u);
    }
    return v2;
  }
  *(_DWORD *)int buf = 136446466;
  __int16 v17 = "nw_socket_set_traffic_class";
  __int16 v18 = 1024;
  *(_DWORD *)uint64_t v19 = v2;
  int v6 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v7 = gLogObj;
      os_log_type_t v8 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_26;
      }
      *(_DWORD *)int buf = 136446466;
      __int16 v17 = "nw_socket_set_traffic_class";
      __int16 v18 = 1024;
      *(_DWORD *)uint64_t v19 = v2;
      os_log_type_t v9 = "%{public}s setsockopt SO_TRAFFIC_CLASS failed %{darwin.errno}d";
      goto LABEL_25;
    }
    if (!v13)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v7 = gLogObj;
      os_log_type_t v8 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_26;
      }
      *(_DWORD *)int buf = 136446466;
      __int16 v17 = "nw_socket_set_traffic_class";
      __int16 v18 = 1024;
      *(_DWORD *)uint64_t v19 = v2;
      os_log_type_t v9 = "%{public}s setsockopt SO_TRAFFIC_CLASS failed %{darwin.errno}d, backtrace limit exceeded";
      goto LABEL_25;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v7 = gLogObj;
    os_log_type_t v8 = type;
    BOOL v11 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (backtrace_string)
    {
      if (v11)
      {
        *(_DWORD *)int buf = 136446722;
        __int16 v17 = "nw_socket_set_traffic_class";
        __int16 v18 = 1024;
        *(_DWORD *)uint64_t v19 = v2;
        *(_WORD *)&void v19[4] = 2082;
        *(void *)&v19[6] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s setsockopt SO_TRAFFIC_CLASS failed %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x1Cu);
      }
      free(backtrace_string);
      goto LABEL_26;
    }
    if (v11)
    {
      *(_DWORD *)int buf = 136446466;
      __int16 v17 = "nw_socket_set_traffic_class";
      __int16 v18 = 1024;
      *(_DWORD *)uint64_t v19 = v2;
      os_log_type_t v9 = "%{public}s setsockopt SO_TRAFFIC_CLASS failed %{darwin.errno}d, no backtrace";
LABEL_25:
      _os_log_impl(&dword_1830D4000, v7, v8, v9, buf, 0x12u);
    }
  }
LABEL_26:
  if (v6) {
    free(v6);
  }
  return v2;
}

uint64_t nw_protocol_default_updated_path(nw_protocol *a1, nw_protocol *a2, nw_path *a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v16 = "nw_protocol_default_updated_path";
    os_log_type_t v7 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v13 = 0;
    if (!__nwlog_fault(v7, &type, &v13)) {
      goto LABEL_22;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (!os_log_type_enabled(v8, type)) {
        goto LABEL_22;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v16 = "nw_protocol_default_updated_path";
      os_log_type_t v10 = "%{public}s called with null protocol";
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)int buf = 136446466;
          uint64_t v16 = "nw_protocol_default_updated_path";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_22;
      }
      if (!v12)
      {
LABEL_22:
        if (v7) {
          free(v7);
        }
        return 0;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v16 = "nw_protocol_default_updated_path";
      os_log_type_t v10 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (!os_log_type_enabled(v8, type)) {
        goto LABEL_22;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v16 = "nw_protocol_default_updated_path";
      os_log_type_t v10 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    _os_log_impl(&dword_1830D4000, v8, v9, v10, buf, 0xCu);
    goto LABEL_22;
  }
  output_handler = a1->output_handler;
  if (!output_handler) {
    return 0;
  }
  callbacks = output_handler->callbacks;
  if (!callbacks) {
    return 0;
  }
  updated_path = (uint64_t (*)(void))callbacks->updated_path;
  if (!updated_path) {
    return 0;
  }

  return updated_path();
}

uint64_t __nw_parameters_add_protocol_stack_member_block_invoke_2(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  if (*(_DWORD *)(a1 + 48) == a2) {
    nw_array_append(*(void *)(a1 + 32), *(void **)(a1 + 40));
  }
  nw_array_append(*(void *)(a1 + 32), v5);

  return 1;
}

uint64_t nw_tcp_options_get_enable_l4s(void *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (nw_protocol_options_is_tcp(v1))
  {
    *(void *)int buf = 0;
    *(void *)&buf[8] = buf;
    int v16 = 0;
    *(void *)&buf[16] = 0x2020000000;
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_tcp_options_get_enable_l4s_block_invoke;
    v12[3] = &unk_1E5248E90;
    void v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    uint64_t v2 = *(unsigned int *)(*(void *)&buf[8] + 24);
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  int v4 = __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_tcp_options_get_enable_l4s";
  id v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_tcp_options_get_enable_l4s";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_options_is_tcp(options)", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_tcp_options_get_enable_l4s";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&void buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_tcp(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_tcp_options_get_enable_l4s";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_tcp(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_tcp_options_get_enable_l4s";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_options_is_tcp(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
  uint64_t v2 = 0;
LABEL_3:

  return v2;
}

void sub_183244DC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

uint64_t nw_protocol_default_get_output_local(nw_protocol *a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    int v15 = "nw_protocol_default_get_output_local";
    int v6 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v12 = 0;
    if (!__nwlog_fault(v6, &type, &v12)) {
      goto LABEL_24;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_24;
      }
      *(_DWORD *)int buf = 136446210;
      int v15 = "nw_protocol_default_get_output_local";
      os_log_type_t v9 = "%{public}s called with null protocol";
    }
    else if (v12)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          int v15 = "nw_protocol_default_get_output_local";
          __int16 v16 = 2082;
          uint64_t v17 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_24;
      }
      if (!v11)
      {
LABEL_24:
        if (v6) {
          free(v6);
        }
        return 0;
      }
      *(_DWORD *)int buf = 136446210;
      int v15 = "nw_protocol_default_get_output_local";
      os_log_type_t v9 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_24;
      }
      *(_DWORD *)int buf = 136446210;
      int v15 = "nw_protocol_default_get_output_local";
      os_log_type_t v9 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    _os_log_impl(&dword_1830D4000, v7, v8, v9, buf, 0xCu);
    goto LABEL_24;
  }
  output_handler = a1->output_handler;
  if (output_handler)
  {
    callbacks = output_handler->callbacks;
    if (callbacks)
    {
      get_output_local_endpoint = (uint64_t (*)(void))callbacks->get_output_local_endpoint;
      if (get_output_local_endpoint)
      {
        uint64_t result = get_output_local_endpoint();
        if (result) {
          return result;
        }
      }
    }
  }
  if (!a1->default_input_handler) {
    return 0;
  }

  return nw_protocol_default_get_local(a1);
}

uint64_t nw_socket_connect(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v182 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_socket_connect";
    os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(type.sae_srcif) = 16;
    LOBYTE(v159) = 0;
    if (__nwlog_fault(v9, &type, &v159))
    {
      if (LOBYTE(type.sae_srcif) == 17)
      {
        BOOL v10 = __nwlog_obj();
        os_log_type_t sae_srcif = type.sae_srcif;
        if (os_log_type_enabled(v10, type.sae_srcif))
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_socket_connect";
          char v12 = "%{public}s called with null protocol";
          goto LABEL_48;
        }
      }
      else if ((_BYTE)v159)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        BOOL v10 = __nwlog_obj();
        os_log_type_t sae_srcif = type.sae_srcif;
        BOOL v143 = os_log_type_enabled(v10, type.sae_srcif);
        if (backtrace_string)
        {
          if (v143)
          {
            *(_DWORD *)int buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_socket_connect";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&void buf[14] = backtrace_string;
            _os_log_impl(&dword_1830D4000, v10, sae_srcif, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(backtrace_string);
        }
        else if (v143)
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_socket_connect";
          char v12 = "%{public}s called with null protocol, no backtrace";
          goto LABEL_48;
        }
      }
      else
      {
        BOOL v10 = __nwlog_obj();
        os_log_type_t sae_srcif = type.sae_srcif;
        if (os_log_type_enabled(v10, type.sae_srcif))
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_socket_connect";
          char v12 = "%{public}s called with null protocol, backtrace limit exceeded";
          goto LABEL_48;
        }
      }
    }
    goto LABEL_50;
  }
  if (a1->handle != &nw_protocol_ref_counted_handle)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_socket_connect";
    os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(type.sae_srcif) = 16;
    LOBYTE(v159) = 0;
    if (!__nwlog_fault(v9, &type, &v159)) {
      goto LABEL_50;
    }
    if (LOBYTE(type.sae_srcif) == 17)
    {
      BOOL v10 = __nwlog_obj();
      os_log_type_t sae_srcif = type.sae_srcif;
      if (os_log_type_enabled(v10, type.sae_srcif))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_socket_connect";
        char v12 = "%{public}s called with null socket_handler";
        goto LABEL_48;
      }
      goto LABEL_50;
    }
    if (!(_BYTE)v159)
    {
      BOOL v10 = __nwlog_obj();
      os_log_type_t sae_srcif = type.sae_srcif;
      if (os_log_type_enabled(v10, type.sae_srcif))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_socket_connect";
        char v12 = "%{public}s called with null socket_handler, backtrace limit exceeded";
        goto LABEL_48;
      }
      goto LABEL_50;
    }
    __int16 v62 = (char *)__nw_create_backtrace_string();
    BOOL v10 = __nwlog_obj();
    os_log_type_t sae_srcif = type.sae_srcif;
    BOOL v144 = os_log_type_enabled(v10, type.sae_srcif);
    if (!v62)
    {
      if (v144)
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_socket_connect";
        char v12 = "%{public}s called with null socket_handler, no backtrace";
        goto LABEL_48;
      }
      goto LABEL_50;
    }
    if (v144)
    {
      *(_DWORD *)int buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_socket_connect";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&void buf[14] = v62;
      __int16 v64 = "%{public}s called with null socket_handler, dumping backtrace:%{public}s";
      goto LABEL_130;
    }
LABEL_131:
    free(v62);
    if (!v9) {
      return 0;
    }
    goto LABEL_51;
  }
  if ((*(_DWORD *)&a1[4].flow_id[12] & 0x80000000) != 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_socket_connect";
    os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(type.sae_srcif) = 16;
    LOBYTE(v159) = 0;
    if (!__nwlog_fault(v9, &type, &v159)) {
      goto LABEL_50;
    }
    if (LOBYTE(type.sae_srcif) == 17)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v10 = gLogObj;
      os_log_type_t sae_srcif = type.sae_srcif;
      if (!os_log_type_enabled((os_log_t)gLogObj, type.sae_srcif)) {
        goto LABEL_50;
      }
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_socket_connect";
      char v12 = "%{public}s called with null socket_handler->fd";
      goto LABEL_48;
    }
    if (!(_BYTE)v159)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v10 = gLogObj;
      os_log_type_t sae_srcif = type.sae_srcif;
      if (!os_log_type_enabled((os_log_t)gLogObj, type.sae_srcif)) {
        goto LABEL_50;
      }
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_socket_connect";
      char v12 = "%{public}s called with null socket_handler->fd, backtrace limit exceeded";
      goto LABEL_48;
    }
    char v13 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v14 = gLogObj;
    os_log_type_t v15 = type.sae_srcif;
    BOOL v16 = os_log_type_enabled((os_log_t)gLogObj, type.sae_srcif);
    if (v13)
    {
      if (v16)
      {
        *(_DWORD *)int buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_socket_connect";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&void buf[14] = v13;
        _os_log_impl(&dword_1830D4000, v14, v15, "%{public}s called with null socket_handler->fd, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v13);
      if (!v9) {
        return 0;
      }
      goto LABEL_51;
    }
    if (v16)
    {
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_socket_connect";
      char v12 = "%{public}s called with null socket_handler->fd, no backtrace";
      BOOL v26 = v14;
      os_log_type_t v27 = v15;
      goto LABEL_49;
    }
    goto LABEL_50;
  }
  p_output_handler = &a1[1].output_handler;
  id v5 = &a1[6].flow_id[13];
  char v6 = *(_WORD *)&a1[6].flow_id[13];
  if ((*(_WORD *)&a1[6].flow_id[13] & 1) == 0)
  {
    if (a1[3].identifier)
    {
      if ((*(_WORD *)&a1[6].flow_id[13] & 0x80) != 0) {
        return 0;
      }
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      os_log_type_t v7 = gconnectionLogObj;
      if (!os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR)) {
        return 0;
      }
      *(_DWORD *)int buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_socket_setup_input_events";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&void buf[14] = (char *)a1 + 404;
      os_log_type_t v8 = "%{public}s %{public}s Already set up input event notification";
      goto LABEL_11;
    }
    if ((*(_WORD *)&a1[6].flow_id[13] & 0x80) == 0 && gLogDatapath)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      uint64_t v147 = gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
      {
        int v148 = *(_DWORD *)&a1[4].flow_id[12];
        *(_DWORD *)int buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_socket_setup_input_events";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&void buf[14] = (char *)a1 + 404;
        *(_WORD *)&buf[22] = 1024;
        LODWORD(v169) = v148;
        _os_log_impl(&dword_1830D4000, v147, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s Setting up read events on %d", buf, 0x1Cu);
      }
    }
    uint64_t v17 = 0;
    uint64_t v164 = 0;
    nw_endpoint_t v165 = &v164;
    uint64_t v166 = 0x2000000000;
    if (a1->handle == &nw_protocol_ref_counted_handle)
    {
      callbacks = a1[1].callbacks;
      uint64_t v17 = a1;
      if (callbacks)
      {
        a1[1].callbacks = (nw_protocol_callbacks *)((char *)&callbacks->add_input_handler + 1);
        uint64_t v17 = a1;
      }
    }
    __int16 v167 = v17;
    *(void *)int buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x3802000000;
    *(void *)&long long v169 = __Block_byref_object_copy__65160;
    *((void *)&v169 + 1) = __Block_byref_object_dispose__65161;
    output_handler = a1[2].output_handler;
    if (output_handler) {
      output_handler = os_retain(output_handler);
    }
    *(void *)uint64_t object = output_handler;
    object[8] |= 1u;
    uint64_t v20 = a1[3].output_handler;
    int v21 = *(_DWORD *)&a1[4].flow_id[12];
    uint64_t v159 = MEMORY[0x1E4F143A8];
    uint64_t v160 = 0x40000000;
    id v161 = ___ZL28nw_socket_setup_input_eventsP9nw_socket_block_invoke;
    char v162 = &__block_descriptor_tmp_39_66099;
    __int16 v163 = &a1[1].output_handler;
    *(void *)&type.os_log_type_t sae_srcif = MEMORY[0x1E4F143A8];
    type.sae_srcaddr = (const sockaddr *)0x40000000;
    *(void *)&type.sae_srcaddrlen = ___ZL28nw_socket_setup_input_eventsP9nw_socket_block_invoke_2;
    type.sae_dstaddr = (const sockaddr *)&unk_1E5247E28;
    *(void *)&type.sae_dstaddrlen = buf;
    __int16 v158 = &v164;
    BOOL v22 = nw_queue_context_create_source(v20, v21, 1, 0, &v159, &type);
    a1[3].identifier = (nw_protocol_identifier *)v22;
    if (v22)
    {
      if (_nw_signposts_once != -1) {
        dispatch_once(&_nw_signposts_once, &__block_literal_global_22_65191);
      }
      if (_nw_signposts_enabled && kdebug_is_enabled()) {
        kdebug_trace();
      }
      int v23 = *(unsigned __int16 *)v5;
      unsigned int v24 = v23 & 0xFFFFFBFF | (a1[6].flow_id[15] << 16);
      *(_WORD *)id v5 = v23 & 0xFBFF;
      a1[6].flow_id[15] = BYTE2(v24);
      nw_queue_resume_source((uint64_t)a1[3].identifier->name);
      goto LABEL_36;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)v178 = 136446210;
    nw_protocol_definition_t v179 = "nw_socket_setup_input_events";
    uint64_t v30 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v156 = OS_LOG_TYPE_ERROR;
    char v155 = 0;
    if (__nwlog_fault(v30, &v156, &v155))
    {
      if (v156 == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v31 = gLogObj;
        os_log_type_t v32 = v156;
        if (os_log_type_enabled((os_log_t)gLogObj, v156))
        {
          *(_DWORD *)v178 = 136446210;
          nw_protocol_definition_t v179 = "nw_socket_setup_input_events";
          BOOL v33 = "%{public}s nw_queue_context_create_source input_source failed";
LABEL_144:
          _os_log_impl(&dword_1830D4000, v31, v32, v33, v178, 0xCu);
        }
      }
      else if (v155)
      {
        __int16 v56 = (char *)__nw_create_backtrace_string();
        os_log_type_t v31 = __nwlog_obj();
        os_log_type_t v32 = v156;
        BOOL v57 = os_log_type_enabled(v31, v156);
        if (v56)
        {
          if (v57)
          {
            *(_DWORD *)v178 = 136446466;
            nw_protocol_definition_t v179 = "nw_socket_setup_input_events";
            __int16 v180 = 2082;
            v181 = v56;
            _os_log_impl(&dword_1830D4000, v31, v32, "%{public}s nw_queue_context_create_source input_source failed, dumping backtrace:%{public}s", v178, 0x16u);
          }
          free(v56);
          goto LABEL_145;
        }
        if (v57)
        {
          *(_DWORD *)v178 = 136446210;
          nw_protocol_definition_t v179 = "nw_socket_setup_input_events";
          BOOL v33 = "%{public}s nw_queue_context_create_source input_source failed, no backtrace";
          goto LABEL_144;
        }
      }
      else
      {
        os_log_type_t v31 = __nwlog_obj();
        os_log_type_t v32 = v156;
        if (os_log_type_enabled(v31, v156))
        {
          *(_DWORD *)v178 = 136446210;
          nw_protocol_definition_t v179 = "nw_socket_setup_input_events";
          BOOL v33 = "%{public}s nw_queue_context_create_source input_source failed, backtrace limit exceeded";
          goto LABEL_144;
        }
      }
    }
LABEL_145:
    if (v30) {
      free(v30);
    }
    uint64_t v69 = *(void *)a1[3].flow_id;
    if (v69)
    {
      nw_queue_cancel_source(v69);
      *(void *)a1[3].flow_id = 0;
    }
    uint64_t v70 = *(void *)&buf[8];
    char v71 = *(unsigned char *)(*(void *)&buf[8] + 48);
    if (v71)
    {
      uint64_t v72 = *(void **)(*(void *)&buf[8] + 40);
      if (v72)
      {
        os_release(v72);
        char v71 = *(unsigned char *)(v70 + 48);
      }
    }
    *(void *)(v70 + 40) = 0;
    *(unsigned char *)(v70 + 48) = v71 | 1;
    uint64_t v73 = v165[3];
    if (v73)
    {
      if (*(_UNKNOWN **)(v73 + 40) == &nw_protocol_ref_counted_handle)
      {
        uint64_t v74 = *(void *)(v73 + 88);
        if (v74)
        {
          uint64_t v75 = v74 - 1;
          *(void *)(v73 + 88) = v75;
          if (!v75)
          {
            uint64_t v76 = *(void (***)(void))(v73 + 64);
            if (v76)
            {
              *(void *)(v73 + 64) = 0;
              v76[2](v76);
              _Block_release(v76);
            }
            if (*(unsigned char *)(v73 + 72))
            {
              os_log_type_t v77 = *(const void **)(v73 + 64);
              if (v77) {
                _Block_release(v77);
              }
            }
            free((void *)v73);
          }
        }
      }
    }
LABEL_36:
    _Block_object_dispose(buf, 8);
    if ((object[8] & 1) != 0 && *(void *)object) {
      os_release(*(void **)object);
    }
    _Block_object_dispose(&v164, 8);
    if (!v22) {
      return 0;
    }
    __int16 v25 = a1[3].callbacks;
    if (v25)
    {
      if ((*(_WORD *)v5 & 0x80) != 0) {
        return 0;
      }
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      os_log_type_t v7 = gconnectionLogObj;
      if (!os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR)) {
        return 0;
      }
      *(_DWORD *)int buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_socket_setup_output_events";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&void buf[14] = (char *)a1 + 404;
      os_log_type_t v8 = "%{public}s %{public}s Already set up output event notification";
LABEL_11:
      _os_log_impl(&dword_1830D4000, v7, OS_LOG_TYPE_ERROR, v8, buf, 0x16u);
      return 0;
    }
    uint64_t v164 = 0;
    nw_endpoint_t v165 = &v164;
    uint64_t v166 = 0x2000000000;
    if (a1->handle == &nw_protocol_ref_counted_handle)
    {
      BOOL v34 = a1[1].callbacks;
      __int16 v25 = (nw_protocol_callbacks *)a1;
      if (v34)
      {
        a1[1].callbacks = (nw_protocol_callbacks *)((char *)&v34->add_input_handler + 1);
        __int16 v25 = (nw_protocol_callbacks *)a1;
      }
    }
    __int16 v167 = v25;
    *(void *)int buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x3802000000;
    *(void *)&long long v169 = __Block_byref_object_copy__65160;
    *((void *)&v169 + 1) = __Block_byref_object_dispose__65161;
    BOOL v35 = a1[2].output_handler;
    if (v35) {
      BOOL v35 = os_retain(v35);
    }
    *(void *)uint64_t object = v35;
    object[8] |= 1u;
    BOOL v36 = a1[3].output_handler;
    int v37 = *(_DWORD *)&a1[4].flow_id[12];
    uint64_t v159 = MEMORY[0x1E4F143A8];
    uint64_t v160 = 0x40000000;
    id v161 = ___ZL29nw_socket_setup_output_eventsP9nw_socket_block_invoke;
    char v162 = &__block_descriptor_tmp_41_66107;
    __int16 v163 = &a1[1].output_handler;
    *(void *)&type.os_log_type_t sae_srcif = MEMORY[0x1E4F143A8];
    type.sae_srcaddr = (const sockaddr *)0x40000000;
    *(void *)&type.sae_srcaddrlen = ___ZL29nw_socket_setup_output_eventsP9nw_socket_block_invoke_2;
    type.sae_dstaddr = (const sockaddr *)&unk_1E5247E70;
    *(void *)&type.sae_dstaddrlen = buf;
    __int16 v158 = &v164;
    BOOL v38 = nw_queue_context_create_source(v36, v37, 2, 0, &v159, &type);
    a1[3].callbacks = (nw_protocol_callbacks *)v38;
    if (v38)
    {
      int v39 = *(unsigned __int16 *)v5;
      unsigned int v40 = v39 & 0xFFFFF7FF | (a1[6].flow_id[15] << 16);
      *(_WORD *)id v5 = v39 & 0xF7FF;
      a1[6].flow_id[15] = BYTE2(v40);
LABEL_67:
      _Block_object_dispose(buf, 8);
      if ((object[8] & 1) != 0 && *(void *)object) {
        os_release(*(void **)object);
      }
      _Block_object_dispose(&v164, 8);
      if (!v38
        || !nw_socket_add_socket_events((uint64_t)&a1[1].output_handler, 1, HIDWORD(a1[4].identifier), 1))
      {
        return 0;
      }
      char v6 = *(_WORD *)v5 | 1;
      *(_WORD *)v5 |= 1u;
      goto LABEL_73;
    }
    __nwlog_obj();
    *(_DWORD *)v178 = 136446210;
    nw_protocol_definition_t v179 = "nw_socket_setup_output_events";
    uint64_t v65 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v156 = OS_LOG_TYPE_ERROR;
    char v155 = 0;
    if (__nwlog_fault(v65, &v156, &v155))
    {
      if (v156 == OS_LOG_TYPE_FAULT)
      {
        __int16 v66 = __nwlog_obj();
        os_log_type_t v67 = v156;
        if (os_log_type_enabled(v66, v156))
        {
          *(_DWORD *)v178 = 136446210;
          nw_protocol_definition_t v179 = "nw_socket_setup_output_events";
          __int16 v68 = "%{public}s nw_queue_context_create_source output_source failed";
LABEL_279:
          _os_log_impl(&dword_1830D4000, v66, v67, v68, v178, 0xCu);
        }
      }
      else if (v155)
      {
        uint64_t v78 = (char *)__nw_create_backtrace_string();
        __int16 v66 = __nwlog_obj();
        os_log_type_t v67 = v156;
        BOOL v79 = os_log_type_enabled(v66, v156);
        if (v78)
        {
          if (v79)
          {
            *(_DWORD *)v178 = 136446466;
            nw_protocol_definition_t v179 = "nw_socket_setup_output_events";
            __int16 v180 = 2082;
            v181 = v78;
            _os_log_impl(&dword_1830D4000, v66, v67, "%{public}s nw_queue_context_create_source output_source failed, dumping backtrace:%{public}s", v178, 0x16u);
          }
          free(v78);
          goto LABEL_280;
        }
        if (v79)
        {
          *(_DWORD *)v178 = 136446210;
          nw_protocol_definition_t v179 = "nw_socket_setup_output_events";
          __int16 v68 = "%{public}s nw_queue_context_create_source output_source failed, no backtrace";
          goto LABEL_279;
        }
      }
      else
      {
        __int16 v66 = __nwlog_obj();
        os_log_type_t v67 = v156;
        if (os_log_type_enabled(v66, v156))
        {
          *(_DWORD *)v178 = 136446210;
          nw_protocol_definition_t v179 = "nw_socket_setup_output_events";
          __int16 v68 = "%{public}s nw_queue_context_create_source output_source failed, backtrace limit exceeded";
          goto LABEL_279;
        }
      }
    }
LABEL_280:
    if (v65) {
      free(v65);
    }
    uint64_t v130 = *(void *)a1[3].flow_id;
    if (v130)
    {
      nw_queue_cancel_source(v130);
      *(void *)a1[3].flow_id = 0;
    }
    uint64_t v131 = *(void *)&buf[8];
    char v132 = *(unsigned char *)(*(void *)&buf[8] + 48);
    if (v132)
    {
      BOOL v133 = *(void **)(*(void *)&buf[8] + 40);
      if (v133)
      {
        os_release(v133);
        char v132 = *(unsigned char *)(v131 + 48);
      }
    }
    *(void *)(v131 + 40) = 0;
    *(unsigned char *)(v131 + 48) = v132 | 1;
    uint64_t v134 = v165[3];
    if (v134)
    {
      if (*(_UNKNOWN **)(v134 + 40) == &nw_protocol_ref_counted_handle)
      {
        uint64_t v135 = *(void *)(v134 + 88);
        if (v135)
        {
          uint64_t v136 = v135 - 1;
          *(void *)(v134 + 88) = v136;
          if (!v136)
          {
            int v137 = *(void (***)(void))(v134 + 64);
            if (v137)
            {
              *(void *)(v134 + 64) = 0;
              v137[2](v137);
              _Block_release(v137);
            }
            if (*(unsigned char *)(v134 + 72))
            {
              os_log_type_t v138 = *(const void **)(v134 + 64);
              if (v138) {
                _Block_release(v138);
              }
            }
            free((void *)v134);
          }
        }
      }
    }
    goto LABEL_67;
  }
LABEL_73:
  if ((v6 & 4) != 0)
  {
    if (!a2) {
      return 1;
    }
    __int16 v53 = a2->callbacks;
    if (!v53) {
      return 1;
    }
    connected = (void (*)(nw_protocol *, nw_protocol *))v53->connected;
    if (!connected) {
      return 1;
    }
    connected(a2, a1);
    return 1;
  }
  if ((v6 & 2) != 0)
  {
    uint64_t v28 = 1;
    if ((v6 & 0x80) == 0 && gLogDatapath)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      __int16 v55 = gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)int buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_socket_connect";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&void buf[14] = (char *)a1 + 404;
        _os_log_impl(&dword_1830D4000, v55, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s Suppressing duplicate connect call", buf, 0x16u);
      }
    }
    return v28;
  }
  remote = nw_socket_get_remote(a1);
  nw_endpoint_t address = nw_endpoint_get_address(remote);
  if (!address)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_socket_connect";
    os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(type.sae_srcif) = 16;
    LOBYTE(v159) = 0;
    if (!__nwlog_fault(v9, &type, &v159)) {
      goto LABEL_50;
    }
    if (LOBYTE(type.sae_srcif) == 17)
    {
      BOOL v10 = __nwlog_obj();
      os_log_type_t sae_srcif = type.sae_srcif;
      if (os_log_type_enabled(v10, type.sae_srcif))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_socket_connect";
        char v12 = "%{public}s called with null remote";
LABEL_48:
        BOOL v26 = v10;
        os_log_type_t v27 = sae_srcif;
LABEL_49:
        _os_log_impl(&dword_1830D4000, v26, v27, v12, buf, 0xCu);
        goto LABEL_50;
      }
      goto LABEL_50;
    }
    if (!(_BYTE)v159)
    {
      BOOL v10 = __nwlog_obj();
      os_log_type_t sae_srcif = type.sae_srcif;
      if (os_log_type_enabled(v10, type.sae_srcif))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_socket_connect";
        char v12 = "%{public}s called with null remote, backtrace limit exceeded";
        goto LABEL_48;
      }
LABEL_50:
      if (!v9) {
        return 0;
      }
LABEL_51:
      free(v9);
      return 0;
    }
    __int16 v62 = (char *)__nw_create_backtrace_string();
    BOOL v10 = __nwlog_obj();
    os_log_type_t sae_srcif = type.sae_srcif;
    BOOL v63 = os_log_type_enabled(v10, type.sae_srcif);
    if (!v62)
    {
      if (v63)
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_socket_connect";
        char v12 = "%{public}s called with null remote, no backtrace";
        goto LABEL_48;
      }
      goto LABEL_50;
    }
    if (v63)
    {
      *(_DWORD *)int buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_socket_connect";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&void buf[14] = v62;
      __int16 v64 = "%{public}s called with null remote, dumping backtrace:%{public}s";
LABEL_130:
      _os_log_impl(&dword_1830D4000, v10, sae_srcif, v64, buf, 0x16u);
      goto LABEL_131;
    }
    goto LABEL_131;
  }
  int v43 = address;
  uint64_t v44 = mach_continuous_time();
  if (v44 <= 1) {
    uint64_t v45 = 1;
  }
  else {
    uint64_t v45 = v44;
  }
  *(void *)a1[2].flow_id = v45;
  if (_nw_signposts_once != -1) {
    dispatch_once(&_nw_signposts_once, &__block_literal_global_22_65191);
  }
  if (_nw_signposts_enabled && kdebug_is_enabled()) {
    kdebug_trace();
  }
  int sa_family = v43->sa_family;
  if (sa_family == 30 || sa_family == 2)
  {
    if ((*(_WORD *)v5 & 0x20) != 0)
    {
      int v149 = 0;
      int v150 = 0;
      address_with_port = 0;
      goto LABEL_125;
    }
    local = nw_socket_get_local(a1);
    address_with_port = (char *)local;
    BOOL v49 = (*(unsigned __int16 *)v5 | ((char)a1[6].flow_id[15] << 16)) >= 0 || local == 0;
    int v50 = !v49;
    int v150 = v50;
    if (!v49)
    {
      if (nw_endpoint_get_type(local) != nw_endpoint_type_address)
      {
        int v150 = 0;
        goto LABEL_168;
      }
      char v51 = (sockaddr *)nw_endpoint_get_address((nw_endpoint_t)address_with_port);
      if ((*(_WORD *)v5 & 0x80) == 0)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        __int16 v52 = gconnectionLogObj;
        if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)int buf = 136446722;
          *(void *)&uint8_t buf[4] = "nw_socket_connect";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&void buf[14] = (char *)a1 + 404;
          *(_WORD *)&buf[22] = 2112;
          *(void *)&long long v169 = address_with_port;
          _os_log_impl(&dword_1830D4000, v52, OS_LOG_TYPE_INFO, "%{public}s %{public}s resetting local port for local endpoint %@", buf, 0x20u);
        }
      }
      address_with_port = nw_endpoint_create_address_with_port(&v51->sa_len, "0");
    }
    if (!address_with_port)
    {
      int v149 = 0;
LABEL_125:
      int v61 = 0;
LABEL_169:
      parameters = nw_socket_get_parameters(a1);
      path = (void *)nw_socket_get_path(a1);
      os_log_type_t v82 = nw_path_copy_scoped_interface(path);
      uint64_t v152 = address_with_port;
      if (v82
        || (os_log_type_t v82 = nw_parameters_copy_required_interface(parameters)) != 0
        || (os_log_type_t v82 = nw_endpoint_copy_interface(remote)) != 0)
      {
        char v151 = 0;
        char v153 = v82;
        unsigned int v83 = v82[2];
      }
      else
      {
        char v153 = 0;
        unsigned int v83 = 0;
        char v151 = 1;
      }
      os_log_type_t v84 = nw_parameters_copy_default_protocol_stack(parameters);
      nw_protocol_options_t v85 = nw_protocol_stack_copy_transport_protocol(v84);
      if (!v85)
      {
        unsigned int v87 = 0;
        goto LABEL_193;
      }
      os_log_type_t v86 = v85;
      if (nw_protocol_setup_tcp_definition(void)::onceToken != -1) {
        dispatch_once(&nw_protocol_setup_tcp_definition(void)::onceToken, &__block_literal_global_64304);
      }
      unsigned int v87 = nw_protocol_options_matches_definition(v86, (void *)g_tcp_definition);

      if (v87)
      {
        if (nw_parameters_get_fast_open_enabled(parameters))
        {
          *(_WORD *)v5 |= 0x8000u;
LABEL_179:
          if (nw_tcp_options_get_no_fast_open_cookie(v86)) {
            unsigned int v87 = 7;
          }
          else {
            unsigned int v87 = 3;
          }
          goto LABEL_192;
        }
        if (nw_tcp_options_get_enable_fast_open(v86))
        {
          BOOL is_connection_flow = nw_protocol_input_handler_is_connection_flow((uint64_t)a2);
          unsigned int v87 = 0;
          if (is_connection_flow) {
            __int16 v89 = 0;
          }
          else {
            __int16 v89 = 0x8000;
          }
          int v90 = *(_WORD *)&a1[6].flow_id[13] & 0x7FFF | (a1[6].flow_id[15] << 16);
          *(_WORD *)id v5 = *(_WORD *)&a1[6].flow_id[13] & 0x7FFF | v89;
          a1[6].flow_id[15] = BYTE2(v90);
          if (is_connection_flow) {
            goto LABEL_192;
          }
          goto LABEL_179;
        }
        unsigned int v87 = 0;
        int v91 = *(unsigned __int16 *)v5;
        unsigned int v92 = v91 & 0xFFFF7FFF | (a1[6].flow_id[15] << 16);
        *(_WORD *)id v5 = v91 & 0x7FFF;
        a1[6].flow_id[15] = BYTE2(v92);
      }
LABEL_192:
      os_release(v86);
      p_output_handler = &a1[1].output_handler;
LABEL_193:
      if (v84) {
        os_release(v84);
      }
      *(&type.sae_srcif + 1) = 0;
      memset(&type.sae_srcaddrlen, 0, 24);
      type.os_log_type_t sae_srcif = v83;
      type.sae_srcaddr = v61;
      if (v61) {
        socklen_t sa_len = v61->sa_len;
      }
      else {
        socklen_t sa_len = 0;
      }
      uint64_t v94 = v153;
      type.sae_srcaddrlen = sa_len;
      type.sae_dstaddr = v43;
      type.sae_dstaddrlen = v43->sa_len;
      if ((*(_WORD *)v5 & 0x100) != 0)
      {
        if ((*(_WORD *)v5 & 0x80) != 0) {
          goto LABEL_210;
        }
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        uint64_t v99 = gconnectionLogObj;
        if (!os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_210;
        }
        int v100 = *(_DWORD *)&a1[4].flow_id[12];
        *(_DWORD *)int buf = 136448258;
        *(void *)&uint8_t buf[4] = "nw_socket_connect";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&void buf[14] = (char *)a1 + 404;
        *(_WORD *)&buf[22] = 1024;
        LODWORD(v169) = v100;
        WORD2(v169) = 1024;
        *(_DWORD *)((char *)&v169 + 6) = type.sae_srcif;
        WORD5(v169) = 1040;
        HIDWORD(v169) = type.sae_srcaddrlen;
        *(_WORD *)uint64_t object = 2096;
        *(void *)&object[2] = type.sae_srcaddr;
        LOWORD(v171) = 1040;
        *(_DWORD *)((char *)&v171 + 2) = type.sae_dstaddrlen;
        WORD3(v171) = 2096;
        *((void *)&v171 + 1) = type.sae_dstaddr;
        __int16 v172 = 1024;
        LODWORD(sae_dstaddr) = v87;
        uint64_t v97 = v99;
        os_log_type_t v98 = OS_LOG_TYPE_DEFAULT;
      }
      else
      {
        if ((*(_WORD *)v5 & 0x80) != 0) {
          goto LABEL_210;
        }
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        uint64_t v95 = gconnectionLogObj;
        if (!os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_210;
        }
        int v96 = *(_DWORD *)&a1[4].flow_id[12];
        *(_DWORD *)int buf = 136448258;
        *(void *)&uint8_t buf[4] = "nw_socket_connect";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&void buf[14] = (char *)a1 + 404;
        *(_WORD *)&buf[22] = 1024;
        LODWORD(v169) = v96;
        WORD2(v169) = 1024;
        *(_DWORD *)((char *)&v169 + 6) = type.sae_srcif;
        WORD5(v169) = 1040;
        HIDWORD(v169) = type.sae_srcaddrlen;
        *(_WORD *)uint64_t object = 2096;
        *(void *)&object[2] = type.sae_srcaddr;
        LOWORD(v171) = 1040;
        *(_DWORD *)((char *)&v171 + 2) = type.sae_dstaddrlen;
        WORD3(v171) = 2096;
        *((void *)&v171 + 1) = type.sae_dstaddr;
        __int16 v172 = 1024;
        LODWORD(sae_dstaddr) = v87;
        uint64_t v97 = v95;
        os_log_type_t v98 = OS_LOG_TYPE_DEBUG;
      }
      _os_log_impl(&dword_1830D4000, v97, v98, "%{public}s %{public}s Calling connectx(%d, [srcif=%d, srcaddr=%{network:sockaddr}.*P, dstaddr=%{network:sockaddr}.*P], SAE_ASSOCID_ANY, %#x, NULL, 0, NULL, SAE_CONNID_ANY)", buf, 0x48u);
LABEL_210:
      int v58 = connectx(*(_DWORD *)&a1[4].flow_id[12], &type, 0, v87, 0, 0, 0, 0);
      uint64_t v59 = 0;
      if (v58 < 0)
      {
        uint64_t v59 = **(unsigned int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
        if (v59 != 36)
        {
          int v101 = a1[2].output_handler;
          v154[0] = MEMORY[0x1E4F143A8];
          v154[1] = 0x40000000;
          v154[2] = ___ZL17nw_socket_connectP11nw_protocolS0__block_invoke;
          v154[3] = &__block_descriptor_tmp_31_66124;
          void v154[4] = p_output_handler;
          int fd = nw_fd_wrapper_get_fd(v101, v154);
          int is_guarded = nw_fd_wrapper_is_guarded(a1[2].output_handler);
          unint64_t v104 = " (guarded, corrupt)";
          if (fd) {
            unint64_t v104 = " (guarded)";
          }
          os_log_type_t v105 = " (corrupt)";
          if (fd) {
            os_log_type_t v105 = "";
          }
          if (is_guarded) {
            int v106 = v104;
          }
          else {
            int v106 = v105;
          }
          if ((*(_WORD *)v5 & 0x80) == 0)
          {
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
            }
            os_log_type_t v107 = gconnectionLogObj;
            if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
            {
              int v108 = *(_DWORD *)&a1[4].flow_id[12];
              *(_DWORD *)int buf = 136448771;
              *(void *)&uint8_t buf[4] = "nw_socket_connect";
              *(_WORD *)&unsigned char buf[12] = 2082;
              *(void *)&void buf[14] = (char *)a1 + 404;
              *(_WORD *)&buf[22] = 1024;
              LODWORD(v169) = v108;
              WORD2(v169) = 2082;
              *(void *)((char *)&v169 + 6) = v106;
              HIWORD(v169) = 1024;
              *(_DWORD *)uint64_t object = type.sae_srcif;
              *(_WORD *)&object[4] = 1040;
              *(_DWORD *)&object[6] = type.sae_srcaddrlen;
              LOWORD(v171) = 2101;
              *(void *)((char *)&v171 + 2) = type.sae_srcaddr;
              WORD5(v171) = 1040;
              HIDWORD(v171) = type.sae_dstaddrlen;
              __int16 v172 = 2101;
              sae_dstaddr = type.sae_dstaddr;
              __int16 v174 = 1024;
              unsigned int v175 = v87;
              __int16 v176 = 1024;
              int v177 = v59;
              _os_log_impl(&dword_1830D4000, v107, OS_LOG_TYPE_ERROR, "%{public}s %{public}s connectx(%d%{public}s, [srcif=%d, srcaddr=%{sensitive,network:sockaddr}.*P, dstaddr=%{sensitive,network:sockaddr}.*P], SAE_ASSOCID_ANY, %#x, NULL, 0, NULL, SAE_CONNID_ANY) failed: %{darwin.errno}d", buf, 0x58u);
            }
          }
          uint64_t v94 = v153;
        }
      }
      char v109 = v151;
      if (!v94) {
        char v109 = 1;
      }
      if ((v109 & 1) == 0) {
        os_release(v94);
      }
      if (v152 && (v149 & v150) != 0) {
        os_release(v152);
      }
      __int16 v60 = "connectx";
LABEL_233:
      int v110 = a1[6].flow_id[15];
      int v111 = *(unsigned __int16 *)v5;
      *(_WORD *)id v5 = v111 | 2;
      if (!v58)
      {
        int v116 = v111 | (v110 << 16);
        if ((v116 & 0x8000) == 0)
        {
          a1[6].flow_id[15] = BYTE2(v116);
          *(_WORD *)id v5 = v116 | 6;
        }
        uint64_t v28 = 1;
        nw_socket_add_socket_events((uint64_t)p_output_handler, 1, HIDWORD(a1[4].identifier), 1);
        nw_socket_fillout_socket_properties(a1);
        nw_socket_internal_connect(p_output_handler);
        return v28;
      }
      goto LABEL_234;
    }
LABEL_168:
    int v61 = nw_endpoint_get_address((nw_endpoint_t)address_with_port);
    int v149 = 1;
    goto LABEL_169;
  }
  int v58 = connect(*(_DWORD *)&a1[4].flow_id[12], v43, v43->sa_len);
  if ((v58 & 0x80000000) == 0)
  {
    uint64_t v59 = 0;
    __int16 v60 = "connect";
    goto LABEL_233;
  }
  uint64_t v59 = **(unsigned int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
  *(_WORD *)v5 |= 2u;
  __int16 v60 = "connect";
LABEL_234:
  uint64_t v28 = 1;
  if (v58 < 0 && v59 != 36)
  {
    if (v59 == 47 && LODWORD(a1[4].identifier) == 2)
    {
      int v112 = v43->sa_family;
      if (v112 == 30)
      {
        if (v43->sa_data[6] == 255) {
          goto LABEL_241;
        }
      }
      else if (v112 == 2 && (*(_DWORD *)&v43->sa_data[2] & 0xF0) == 0xE0)
      {
LABEL_241:
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        uint64_t v113 = gconnectionLogObj;
        if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)int buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_socket_connect";
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&void buf[14] = (char *)a1 + 404;
          *(_WORD *)&buf[22] = 2082;
          *(void *)&long long v169 = v60;
          WORD4(v169) = 1024;
          *(_DWORD *)((char *)&v169 + 10) = 47;
          os_log_type_t v114 = "%{public}s %s %{public}s failed: multicast addresses not supported on stream sockets %{darwin.errno}d";
          uint64_t v115 = v113;
LABEL_265:
          _os_log_impl(&dword_1830D4000, v115, OS_LOG_TYPE_ERROR, v114, buf, 0x26u);
        }
        goto LABEL_266;
      }
    }
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
    }
    BOOL v117 = gconnectionLogObj;
    if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
    {
      int v118 = *(_DWORD *)&a1[4].flow_id[12];
      BOOL v49 = (*(_WORD *)v5 & 0x8000) == 0;
      *(_DWORD *)int buf = 136447490;
      *(void *)&uint8_t buf[4] = "nw_socket_connect";
      if (v49) {
        uint64_t v119 = "";
      }
      else {
        uint64_t v119 = ", tfo";
      }
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&void buf[14] = (char *)a1 + 404;
      *(_WORD *)&buf[22] = 2082;
      *(void *)&long long v169 = v60;
      WORD4(v169) = 1024;
      *(_DWORD *)((char *)&v169 + 10) = v118;
      HIWORD(v169) = 2082;
      *(void *)uint64_t object = v119;
      *(_WORD *)&object[8] = 1024;
      LODWORD(v171) = v59;
      _os_log_impl(&dword_1830D4000, v117, OS_LOG_TYPE_ERROR, "%{public}s %s %{public}s failed (fd %d%{public}s) %{darwin.errno}d", buf, 0x36u);
    }
    switch((int)v59)
    {
      case 1:
      case 6:
      case 13:
      case 49:
      case 50:
      case 51:
      case 60:
      case 61:
      case 64:
      case 65:
      case 102:
        uint64_t v120 = __nwlog_obj();
        if (os_log_type_enabled(v120, OS_LOG_TYPE_ERROR))
        {
          __int16 v121 = *(_WORD *)v5;
          *(void *)&uint8_t buf[4] = "nw_socket_connect";
          *(_DWORD *)int buf = 136446978;
          *(_WORD *)&unsigned char buf[12] = 2082;
          if (v121 < 0) {
            uint64_t v122 = " (tfo)";
          }
          else {
            uint64_t v122 = "";
          }
          *(void *)&void buf[14] = v60;
          *(_WORD *)&buf[22] = 2082;
          *(void *)&long long v169 = v122;
          WORD4(v169) = 1024;
          *(_DWORD *)((char *)&v169 + 10) = v59;
          os_log_type_t v114 = "%{public}s %{public}s failed%{public}s %{darwin.errno}d";
          uint64_t v115 = v120;
          goto LABEL_265;
        }
        goto LABEL_266;
      default:
        __nwlog_obj();
        __int16 v123 = *(_WORD *)&a1[6].flow_id[13];
        *(_DWORD *)int buf = 136446978;
        *(void *)&uint8_t buf[4] = "nw_socket_connect";
        *(_WORD *)&unsigned char buf[12] = 2082;
        if (v123 < 0) {
          os_log_type_t v124 = " (tfo)";
        }
        else {
          os_log_type_t v124 = "";
        }
        *(void *)&void buf[14] = v60;
        *(_WORD *)&buf[22] = 2082;
        *(void *)&long long v169 = v124;
        WORD4(v169) = 1024;
        *(_DWORD *)((char *)&v169 + 10) = v59;
        long long v125 = (char *)_os_log_send_and_compose_impl();
        LOBYTE(type.sae_srcif) = 16;
        LOBYTE(v159) = 0;
        if ((__nwlog_fault(v125, &type, &v159) & 1) == 0) {
          goto LABEL_334;
        }
        if (LOBYTE(type.sae_srcif) == 17)
        {
          os_log_type_t v126 = __nwlog_obj();
          os_log_type_t v127 = type.sae_srcif;
          if (!os_log_type_enabled(v126, type.sae_srcif)) {
            goto LABEL_334;
          }
          if ((*(_WORD *)v5 & 0x8000) != 0) {
            uint64_t v128 = " (tfo)";
          }
          else {
            uint64_t v128 = "";
          }
          *(_DWORD *)int buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_socket_connect";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&void buf[14] = v60;
          *(_WORD *)&buf[22] = 2082;
          *(void *)&long long v169 = v128;
          WORD4(v169) = 1024;
          *(_DWORD *)((char *)&v169 + 10) = v59;
          os_log_type_t v129 = "%{public}s %{public}s failed%{public}s %{darwin.errno}d";
        }
        else if ((_BYTE)v159)
        {
          nw_endpoint_t v139 = (char *)__nw_create_backtrace_string();
          os_log_type_t v126 = __nwlog_obj();
          os_log_type_t v127 = type.sae_srcif;
          BOOL v140 = os_log_type_enabled(v126, type.sae_srcif);
          if (v139)
          {
            if (v140)
            {
              if ((*(_WORD *)v5 & 0x8000) != 0) {
                char v141 = " (tfo)";
              }
              else {
                char v141 = "";
              }
              *(_DWORD *)int buf = 136447234;
              *(void *)&uint8_t buf[4] = "nw_socket_connect";
              *(_WORD *)&unsigned char buf[12] = 2082;
              *(void *)&void buf[14] = v60;
              *(_WORD *)&buf[22] = 2082;
              *(void *)&long long v169 = v141;
              WORD4(v169) = 1024;
              *(_DWORD *)((char *)&v169 + 10) = v59;
              HIWORD(v169) = 2082;
              *(void *)uint64_t object = v139;
              _os_log_impl(&dword_1830D4000, v126, v127, "%{public}s %{public}s failed%{public}s %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x30u);
            }
            free(v139);
            goto LABEL_334;
          }
          if (!v140)
          {
LABEL_334:
            if (v125) {
              free(v125);
            }
LABEL_266:
            nw_socket_internal_error((uint64_t)p_output_handler, v59);
            return 0;
          }
          if ((*(_WORD *)v5 & 0x8000) != 0) {
            __int16 v146 = " (tfo)";
          }
          else {
            __int16 v146 = "";
          }
          *(_DWORD *)int buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_socket_connect";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&void buf[14] = v60;
          *(_WORD *)&buf[22] = 2082;
          *(void *)&long long v169 = v146;
          WORD4(v169) = 1024;
          *(_DWORD *)((char *)&v169 + 10) = v59;
          os_log_type_t v129 = "%{public}s %{public}s failed%{public}s %{darwin.errno}d, no backtrace";
        }
        else
        {
          os_log_type_t v126 = __nwlog_obj();
          os_log_type_t v127 = type.sae_srcif;
          if (!os_log_type_enabled(v126, type.sae_srcif)) {
            goto LABEL_334;
          }
          if ((*(_WORD *)v5 & 0x8000) != 0) {
            os_log_type_t v145 = " (tfo)";
          }
          else {
            os_log_type_t v145 = "";
          }
          *(_DWORD *)int buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_socket_connect";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&void buf[14] = v60;
          *(_WORD *)&buf[22] = 2082;
          *(void *)&long long v169 = v145;
          WORD4(v169) = 1024;
          *(_DWORD *)((char *)&v169 + 10) = v59;
          os_log_type_t v129 = "%{public}s %{public}s failed%{public}s %{darwin.errno}d, backtrace limit exceeded";
        }
        _os_log_impl(&dword_1830D4000, v126, v127, v129, buf, 0x26u);
        goto LABEL_334;
    }
  }
  return v28;
}

void sub_1832471D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_protocol_default_get_local(nw_protocol *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    BOOL v16 = "nw_protocol_default_get_local";
    id v5 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v13 = 0;
    if (!__nwlog_fault(v5, &type, &v13)) {
      goto LABEL_36;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (!os_log_type_enabled(v6, type)) {
        goto LABEL_36;
      }
      *(_DWORD *)int buf = 136446210;
      BOOL v16 = "nw_protocol_default_get_local";
      os_log_type_t v8 = "%{public}s called with null protocol";
      goto LABEL_35;
    }
    if (!v13)
    {
      char v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (!os_log_type_enabled(v6, type)) {
        goto LABEL_36;
      }
      *(_DWORD *)int buf = 136446210;
      BOOL v16 = "nw_protocol_default_get_local";
      os_log_type_t v8 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_35;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    char v6 = __nwlog_obj();
    os_log_type_t v7 = type;
    BOOL v10 = os_log_type_enabled(v6, type);
    if (!backtrace_string)
    {
      if (!v10) {
        goto LABEL_36;
      }
      *(_DWORD *)int buf = 136446210;
      BOOL v16 = "nw_protocol_default_get_local";
      os_log_type_t v8 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_35;
    }
    if (v10)
    {
      *(_DWORD *)int buf = 136446466;
      BOOL v16 = "nw_protocol_default_get_local";
      __int16 v17 = 2082;
      uint64_t v18 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(backtrace_string);
LABEL_36:
    if (!v5) {
      return 0;
    }
LABEL_37:
    free(v5);
    return 0;
  }
  default_input_handler = a1->default_input_handler;
  if (!default_input_handler)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    BOOL v16 = "nw_protocol_default_get_local";
    id v5 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v13 = 0;
    if (!__nwlog_fault(v5, &type, &v13)) {
      goto LABEL_36;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (!os_log_type_enabled(v6, type)) {
        goto LABEL_36;
      }
      *(_DWORD *)int buf = 136446210;
      BOOL v16 = "nw_protocol_default_get_local";
      os_log_type_t v8 = "%{public}s called with null protocol->default_input_handler";
      goto LABEL_35;
    }
    if (!v13)
    {
      char v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (!os_log_type_enabled(v6, type)) {
        goto LABEL_36;
      }
      *(_DWORD *)int buf = 136446210;
      BOOL v16 = "nw_protocol_default_get_local";
      os_log_type_t v8 = "%{public}s called with null protocol->default_input_handler, backtrace limit exceeded";
      goto LABEL_35;
    }
    BOOL v11 = (char *)__nw_create_backtrace_string();
    char v6 = __nwlog_obj();
    os_log_type_t v7 = type;
    BOOL v12 = os_log_type_enabled(v6, type);
    if (v11)
    {
      if (v12)
      {
        *(_DWORD *)int buf = 136446466;
        BOOL v16 = "nw_protocol_default_get_local";
        __int16 v17 = 2082;
        uint64_t v18 = v11;
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null protocol->default_input_handler, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v11);
      if (!v5) {
        return 0;
      }
      goto LABEL_37;
    }
    if (v12)
    {
      *(_DWORD *)int buf = 136446210;
      BOOL v16 = "nw_protocol_default_get_local";
      os_log_type_t v8 = "%{public}s called with null protocol->default_input_handler, no backtrace";
LABEL_35:
      _os_log_impl(&dword_1830D4000, v6, v7, v8, buf, 0xCu);
      goto LABEL_36;
    }
    goto LABEL_36;
  }
  callbacks = default_input_handler->callbacks;
  if (!callbacks) {
    return 0;
  }
  get_local_endpoint = (uint64_t (*)(void))callbacks->get_local_endpoint;
  if (!get_local_endpoint) {
    return 0;
  }

  return get_local_endpoint();
}

uint64_t nw_socket_add_socket_events(uint64_t a1, int a2, int a3, char a4)
{
  __int16 v4 = a3;
  uint64_t v80 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *(void *)(a1 + 96);
  int v8 = *(_DWORD *)(a1 + 180);
  int v9 = v8 | a3;
  int v10 = v8 & ~a3;
  if (a2) {
    unsigned int v11 = v9;
  }
  else {
    unsigned int v11 = v10;
  }
  *(_DWORD *)(a1 + 180) = v11;
  if ((a4 & 1) == 0 && (*(_WORD *)(a1 + 301) & 4) == 0 || *(_DWORD *)(a1 + 184) == v11) {
    return 1;
  }
  uint64_t v12 = 0;
  uint64_t v68 = 0;
  uint64_t v69 = &v68;
  uint64_t v70 = 0x2000000000;
  if (*(_UNKNOWN **)(a1 - 56) == &nw_protocol_ref_counted_handle)
  {
    uint64_t v12 = a1 - 96;
    uint64_t v13 = *(void *)(a1 - 8);
    if (v13) {
      *(void *)(a1 - 8) = v13 + 1;
    }
  }
  uint64_t v71 = v12;
  *(void *)uint64_t v76 = 0;
  *(void *)&v76[8] = v76;
  *(void *)&v76[16] = 0x3802000000;
  *(void *)&v76[24] = __Block_byref_object_copy__65160;
  BOOL v14 = &v77;
  os_log_type_t v77 = __Block_byref_object_dispose__65161;
  os_log_type_t v15 = *(void **)(a1 + 64);
  if (v15)
  {
    os_log_type_t v15 = os_retain(v15);
    LOBYTE(v14) = v79;
  }
  uint64_t v78 = v15;
  char v79 = v14 | 1;
  BOOL v16 = *(void **)(a1 + 128);
  int v17 = *(_DWORD *)(a1 + 172);
  *(void *)BOOL v63 = MEMORY[0x1E4F143A8];
  uint64_t v64 = 0x40000000;
  uint64_t v65 = ___ZL34nw_socket_init_socket_event_sourceP9nw_socketj_block_invoke;
  __int16 v66 = &__block_descriptor_tmp_43_65162;
  uint64_t v67 = a1;
  v62[0] = MEMORY[0x1E4F143A8];
  v62[1] = 0x40000000;
  v62[2] = ___ZL34nw_socket_init_socket_event_sourceP9nw_socketj_block_invoke_2;
  v62[3] = &unk_1E5247EB8;
  v62[4] = v76;
  v62[5] = &v68;
  BOOL source = nw_queue_context_create_source(v16, v17, 4, v11, v63, v62);
  BOOL v19 = source;
  *(void *)(a1 + 96) = source;
  if (source)
  {
    nw_queue_activate_source(source);
    goto LABEL_42;
  }
  uint64_t v20 = *(void *)&v76[8];
  char v21 = *(unsigned char *)(*(void *)&v76[8] + 48);
  if (v21)
  {
    BOOL v22 = *(void **)(*(void *)&v76[8] + 40);
    if (v22)
    {
      os_release(v22);
      char v21 = *(unsigned char *)(v20 + 48);
    }
  }
  *(void *)(v20 + 40) = 0;
  *(unsigned char *)(v20 + 48) = v21 | 1;
  uint64_t v23 = v69[3];
  if (v23)
  {
    if (*(_UNKNOWN **)(v23 + 40) == &nw_protocol_ref_counted_handle)
    {
      uint64_t v31 = *(void *)(v23 + 88);
      if (v31)
      {
        uint64_t v32 = v31 - 1;
        *(void *)(v23 + 88) = v32;
        if (!v32)
        {
          BOOL v33 = *(void (***)(void))(v23 + 64);
          if (v33)
          {
            *(void *)(v23 + 64) = 0;
            v33[2](v33);
            _Block_release(v33);
          }
          if (*(unsigned char *)(v23 + 72))
          {
            BOOL v34 = *(const void **)(v23 + 64);
            if (v34) {
              _Block_release(v34);
            }
          }
          free((void *)v23);
        }
      }
    }
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)int buf = 136446210;
  uint64_t v73 = "nw_socket_init_socket_event_source";
  unsigned int v24 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v60 = 0;
  if (__nwlog_fault(v24, &type, &v60))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v25 = gLogObj;
      os_log_type_t v26 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_40;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v73 = "nw_socket_init_socket_event_source";
      os_log_type_t v27 = "%{public}s nw_queue_context_create_source failed";
LABEL_38:
      BOOL v35 = v25;
      os_log_type_t v36 = v26;
LABEL_39:
      _os_log_impl(&dword_1830D4000, v35, v36, v27, buf, 0xCu);
      goto LABEL_40;
    }
    if (!v60)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v25 = gLogObj;
      os_log_type_t v26 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_40;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v73 = "nw_socket_init_socket_event_source";
      os_log_type_t v27 = "%{public}s nw_queue_context_create_source failed, backtrace limit exceeded";
      goto LABEL_38;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v29 = type;
    log = gLogObj;
    BOOL v30 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (backtrace_string)
    {
      if (v30)
      {
        *(_DWORD *)int buf = 136446466;
        uint64_t v73 = "nw_socket_init_socket_event_source";
        __int16 v74 = 2082;
        uint64_t v75 = backtrace_string;
        _os_log_impl(&dword_1830D4000, log, v29, "%{public}s nw_queue_context_create_source failed, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_40;
    }
    if (v30)
    {
      *(_DWORD *)int buf = 136446210;
      uint64_t v73 = "nw_socket_init_socket_event_source";
      os_log_type_t v27 = "%{public}s nw_queue_context_create_source failed, no backtrace";
      BOOL v35 = log;
      os_log_type_t v36 = v29;
      goto LABEL_39;
    }
  }
LABEL_40:
  if (v24) {
    free(v24);
  }
LABEL_42:
  _Block_object_dispose(v76, 8);
  if ((v79 & 1) != 0 && v78) {
    os_release(v78);
  }
  _Block_object_dispose(&v68, 8);
  if (v19)
  {
    if (v7) {
      nw_queue_cancel_source(v7);
    }
    *(_DWORD *)(a1 + 184) = v11;
    if ((v4 & 0x400) == 0) {
      goto LABEL_83;
    }
    int v37 = *(_DWORD *)(a1 + 192);
    if (!a2) {
      int v37 = 0;
    }
    LODWORD(v62[0]) = v37;
    if (!setsockopt(*(_DWORD *)(a1 + 172), 6, 517, v62, 4u))
    {
LABEL_83:
      if ((v4 & 0x200) == 0) {
        return 1;
      }
      int v49 = *(_DWORD *)(a1 + 196);
      if (!a2) {
        int v49 = 0;
      }
      LODWORD(v62[0]) = v49;
      if (!setsockopt(*(_DWORD *)(a1 + 172), 6, 519, v62, 4u)) {
        return 1;
      }
      int v50 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      char v51 = gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t v76 = 136446722;
        *(void *)&v76[4] = "nw_socket_set_adaptive_write_timeout";
        *(_WORD *)&v76[12] = 2080;
        *(void *)&v76[14] = a1 + 308;
        *(_WORD *)&v76[22] = 1024;
        *(_DWORD *)&v76[24] = v50;
        _os_log_impl(&dword_1830D4000, v51, OS_LOG_TYPE_ERROR, "%{public}s %s setsockopt TCP_ADAPTIVE_WRITE_TIMEOUT failed %{darwin.errno}d", v76, 0x1Cu);
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      __int16 v52 = gLogObj;
      if (v50 == 22)
      {
        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)uint64_t v76 = 136446466;
          *(void *)&v76[4] = "nw_socket_set_adaptive_write_timeout";
          *(_WORD *)&v76[12] = 1024;
          *(_DWORD *)&v76[14] = 22;
          _os_log_impl(&dword_1830D4000, v52, OS_LOG_TYPE_ERROR, "%{public}s setsockopt TCP_ADAPTIVE_WRITE_TIMEOUT failed %{darwin.errno}d", v76, 0x12u);
        }
        return 1;
      }
      *(_DWORD *)uint64_t v76 = 136446466;
      *(void *)&v76[4] = "nw_socket_set_adaptive_write_timeout";
      *(_WORD *)&v76[12] = 1024;
      *(_DWORD *)&v76[14] = v50;
      __int16 v53 = (char *)_os_log_send_and_compose_impl();
      v63[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(v68) = 0;
      if (__nwlog_fault(v53, v63, &v68))
      {
        if (v63[0] == OS_LOG_TYPE_FAULT)
        {
          __int16 v54 = __nwlog_obj();
          os_log_type_t v55 = v63[0];
          if (!os_log_type_enabled(v54, v63[0])) {
            goto LABEL_108;
          }
          *(_DWORD *)uint64_t v76 = 136446466;
          *(void *)&v76[4] = "nw_socket_set_adaptive_write_timeout";
          *(_WORD *)&v76[12] = 1024;
          *(_DWORD *)&v76[14] = v50;
          __int16 v56 = "%{public}s setsockopt TCP_ADAPTIVE_WRITE_TIMEOUT failed %{darwin.errno}d";
          goto LABEL_107;
        }
        if (!(_BYTE)v68)
        {
          __int16 v54 = __nwlog_obj();
          os_log_type_t v55 = v63[0];
          if (!os_log_type_enabled(v54, v63[0])) {
            goto LABEL_108;
          }
          *(_DWORD *)uint64_t v76 = 136446466;
          *(void *)&v76[4] = "nw_socket_set_adaptive_write_timeout";
          *(_WORD *)&v76[12] = 1024;
          *(_DWORD *)&v76[14] = v50;
          __int16 v56 = "%{public}s setsockopt TCP_ADAPTIVE_WRITE_TIMEOUT failed %{darwin.errno}d, backtrace limit exceeded";
          goto LABEL_107;
        }
        BOOL v57 = (char *)__nw_create_backtrace_string();
        __int16 v54 = __nwlog_obj();
        os_log_type_t v55 = v63[0];
        BOOL v58 = os_log_type_enabled(v54, v63[0]);
        if (v57)
        {
          if (v58)
          {
            *(_DWORD *)uint64_t v76 = 136446722;
            *(void *)&v76[4] = "nw_socket_set_adaptive_write_timeout";
            *(_WORD *)&v76[12] = 1024;
            *(_DWORD *)&v76[14] = v50;
            *(_WORD *)&v76[18] = 2082;
            *(void *)&v76[20] = v57;
            _os_log_impl(&dword_1830D4000, v54, v55, "%{public}s setsockopt TCP_ADAPTIVE_WRITE_TIMEOUT failed %{darwin.errno}d, dumping backtrace:%{public}s", v76, 0x1Cu);
          }
          free(v57);
          goto LABEL_108;
        }
        if (v58)
        {
          *(_DWORD *)uint64_t v76 = 136446466;
          *(void *)&v76[4] = "nw_socket_set_adaptive_write_timeout";
          *(_WORD *)&v76[12] = 1024;
          *(_DWORD *)&v76[14] = v50;
          __int16 v56 = "%{public}s setsockopt TCP_ADAPTIVE_WRITE_TIMEOUT failed %{darwin.errno}d, no backtrace";
LABEL_107:
          _os_log_impl(&dword_1830D4000, v54, v55, v56, v76, 0x12u);
        }
      }
LABEL_108:
      if (v53) {
        free(v53);
      }
      return 1;
    }
    int v38 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
    }
    int v39 = gconnectionLogObj;
    if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t v76 = 136446722;
      *(void *)&v76[4] = "nw_socket_set_adaptive_read_timeout";
      *(_WORD *)&v76[12] = 2080;
      *(void *)&v76[14] = a1 + 308;
      *(_WORD *)&v76[22] = 1024;
      *(_DWORD *)&v76[24] = v38;
      _os_log_impl(&dword_1830D4000, v39, OS_LOG_TYPE_ERROR, "%{public}s %s setsockopt TCP_ADAPTIVE_READ_TIMEOUT failed %{darwin.errno}d", v76, 0x1Cu);
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unsigned int v40 = gLogObj;
    if (v38 == 22)
    {
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t v76 = 136446466;
        *(void *)&v76[4] = "nw_socket_set_adaptive_read_timeout";
        *(_WORD *)&v76[12] = 1024;
        *(_DWORD *)&v76[14] = 22;
        _os_log_impl(&dword_1830D4000, v40, OS_LOG_TYPE_ERROR, "%{public}s setsockopt TCP_ADAPTIVE_READ_TIMEOUT failed %{darwin.errno}d", v76, 0x12u);
      }
      goto LABEL_83;
    }
    *(_DWORD *)uint64_t v76 = 136446466;
    *(void *)&v76[4] = "nw_socket_set_adaptive_read_timeout";
    *(_WORD *)&v76[12] = 1024;
    *(_DWORD *)&v76[14] = v38;
    int v43 = (char *)_os_log_send_and_compose_impl();
    v63[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v68) = 0;
    if (__nwlog_fault(v43, v63, &v68))
    {
      if (v63[0] == OS_LOG_TYPE_FAULT)
      {
        uint64_t v44 = __nwlog_obj();
        os_log_type_t v45 = v63[0];
        if (!os_log_type_enabled(v44, v63[0])) {
          goto LABEL_81;
        }
        *(_DWORD *)uint64_t v76 = 136446466;
        *(void *)&v76[4] = "nw_socket_set_adaptive_read_timeout";
        *(_WORD *)&v76[12] = 1024;
        *(_DWORD *)&v76[14] = v38;
        os_log_type_t v46 = "%{public}s setsockopt TCP_ADAPTIVE_READ_TIMEOUT failed %{darwin.errno}d";
        goto LABEL_80;
      }
      if (!(_BYTE)v68)
      {
        uint64_t v44 = __nwlog_obj();
        os_log_type_t v45 = v63[0];
        if (!os_log_type_enabled(v44, v63[0])) {
          goto LABEL_81;
        }
        *(_DWORD *)uint64_t v76 = 136446466;
        *(void *)&v76[4] = "nw_socket_set_adaptive_read_timeout";
        *(_WORD *)&v76[12] = 1024;
        *(_DWORD *)&v76[14] = v38;
        os_log_type_t v46 = "%{public}s setsockopt TCP_ADAPTIVE_READ_TIMEOUT failed %{darwin.errno}d, backtrace limit exceeded";
        goto LABEL_80;
      }
      BOOL v47 = (char *)__nw_create_backtrace_string();
      uint64_t v44 = __nwlog_obj();
      os_log_type_t v45 = v63[0];
      BOOL v48 = os_log_type_enabled(v44, v63[0]);
      if (v47)
      {
        if (v48)
        {
          *(_DWORD *)uint64_t v76 = 136446722;
          *(void *)&v76[4] = "nw_socket_set_adaptive_read_timeout";
          *(_WORD *)&v76[12] = 1024;
          *(_DWORD *)&v76[14] = v38;
          *(_WORD *)&v76[18] = 2082;
          *(void *)&v76[20] = v47;
          _os_log_impl(&dword_1830D4000, v44, v45, "%{public}s setsockopt TCP_ADAPTIVE_READ_TIMEOUT failed %{darwin.errno}d, dumping backtrace:%{public}s", v76, 0x1Cu);
        }
        free(v47);
        goto LABEL_81;
      }
      if (v48)
      {
        *(_DWORD *)uint64_t v76 = 136446466;
        *(void *)&v76[4] = "nw_socket_set_adaptive_read_timeout";
        *(_WORD *)&v76[12] = 1024;
        *(_DWORD *)&v76[14] = v38;
        os_log_type_t v46 = "%{public}s setsockopt TCP_ADAPTIVE_READ_TIMEOUT failed %{darwin.errno}d, no backtrace";
LABEL_80:
        _os_log_impl(&dword_1830D4000, v44, v45, v46, v76, 0x12u);
      }
    }
LABEL_81:
    if (v43) {
      free(v43);
    }
    goto LABEL_83;
  }
  if ((*(_WORD *)(a1 + 301) & 0x80) == 0)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
    }
    uint64_t v41 = gconnectionLogObj;
    if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t v76 = 136446466;
      *(void *)&v76[4] = "nw_socket_add_socket_events";
      *(_WORD *)&v76[12] = 2082;
      *(void *)&v76[14] = a1 + 308;
      _os_log_impl(&dword_1830D4000, v41, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s error in adding socket event source", v76, 0x16u);
    }
  }
  uint64_t result = 0;
  *(void *)(a1 + 96) = v7;
  return result;
}

void __nw_mem_region_init_block_invoke()
{
  os_unfair_lock_lock((os_unfair_lock_t)&nw_mem_region_lock);
  uint64_t v0 = nw_mem_region_head;
  if (nw_mem_region_head)
  {
    uint64_t v1 = MEMORY[0x1E4F143A8];
    while (1)
    {
      block[0] = v1;
      block[1] = 0x40000000;
      id v5 = ___ZL20nw_mem_region_updateP13nw_mem_region_block_invoke;
      char v6 = &__block_descriptor_tmp_27;
      uint64_t v7 = v0;
      if (!*(void *)(v0 + 272)) {
        break;
      }
      if (dispatch_workloop_is_current())
      {
        v5((uint64_t)block);
LABEL_8:
        uint64_t v0 = *(void *)(v0 + 144);
        if (!v0) {
          goto LABEL_9;
        }
      }
      else
      {
        dispatch_async(*(dispatch_queue_t *)(v0 + 272), block);
        uint64_t v0 = *(void *)(v0 + 144);
        if (!v0) {
          goto LABEL_9;
        }
      }
    }
    ___ZL20nw_mem_region_updateP13nw_mem_region_block_invoke((uint64_t)block);
    goto LABEL_8;
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)&nw_mem_region_lock);
  uint64_t v2 = nw_mem_region_update_source;
  if (nw_mem_region_update_source)
  {
    dispatch_time_t v3 = dispatch_time(0x8000000000000000, 13000000000);
    if (*(void *)v2)
    {
      dispatch_source_set_timer(*(dispatch_source_t *)v2, v3, 0xFFFFFFFFFFFFFFFFLL, 0xF4240uLL);
    }
    else
    {
      *(void *)(v2 + 32) = v3;
      *(void *)(v2 + 40) = -1;
      if (*(unsigned char *)(v2 + 48))
      {
        if (*(unsigned char *)(v2 + 49)) {
          nw_queue_source_run_timer(v2);
        }
      }
    }
    nw_queue_activate_source(nw_mem_region_update_source);
  }
}

void nw_queue_activate_source(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __int16 v4 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v15 = "nw_queue_activate_source";
    id v5 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v12 = 0;
    if (!__nwlog_fault(v5, &type, &v12)) {
      goto LABEL_30;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v15 = "nw_queue_activate_source";
        int v8 = "%{public}s called with null source";
LABEL_28:
        _os_log_impl(&dword_1830D4000, v6, v7, v8, buf, 0xCu);
      }
    }
    else
    {
      if (v12)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        char v6 = __nwlog_obj();
        os_log_type_t v7 = type;
        BOOL v10 = os_log_type_enabled(v6, type);
        if (backtrace_string)
        {
          if (v10)
          {
            *(_DWORD *)int buf = 136446466;
            os_log_type_t v15 = "nw_queue_activate_source";
            __int16 v16 = 2082;
            int v17 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null source, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_30;
        }
        if (!v10) {
          goto LABEL_29;
        }
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v15 = "nw_queue_activate_source";
        int v8 = "%{public}s called with null source, no backtrace";
        goto LABEL_28;
      }
      char v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v15 = "nw_queue_activate_source";
        int v8 = "%{public}s called with null source, backtrace limit exceeded";
        goto LABEL_28;
      }
    }
LABEL_29:

LABEL_30:
    if (v5) {
      free(v5);
    }
    return;
  }
  uint64_t v2 = *(NSObject **)a1;
  if (v2)
  {
    dispatch_activate(v2);
    return;
  }
  if (*(unsigned char *)(a1 + 48))
  {
    if (*(unsigned char *)(a1 + 49)) {
      return;
    }
    nw_queue_source_run_timer(a1);
    goto LABEL_12;
  }
  dispatch_time_t v3 = *(void **)(a1 + 16);
  if (v3)
  {
    if (*(unsigned char *)(a1 + 49)) {
      return;
    }
    nw_context_queue_source_block(*(void **)(a1 + 8), v3);
LABEL_12:
    *(unsigned char *)(a1 + 49) = 1;
    return;
  }
  if (gLogDatapath)
  {
    unsigned int v11 = __nwlog_obj();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)int buf = 136446210;
      os_log_type_t v15 = "nw_queue_activate_source";
      _os_log_impl(&dword_1830D4000, v11, OS_LOG_TYPE_DEBUG, "%{public}s Cancelled, not activating source", buf, 0xCu);
    }
  }
}

void ___ZL20nw_mem_region_updateP13nw_mem_region_block_invoke(uint64_t a1)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  size_t v1 = *(void *)(a1 + 32);
  if (*(_DWORD *)(v1 + 384))
  {
    if (gLogDatapath)
    {
      BOOL v33 = __nwlog_obj();
      BOOL v34 = os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG);
      size_t v1 = *(void *)(a1 + 32);
      if (v34)
      {
        int v35 = *(_DWORD *)(v1 + 384);
        *(_DWORD *)int buf = 136446466;
        os_log_type_t v42 = "nw_mem_region_update_block_invoke";
        __int16 v43 = 1024;
        LODWORD(v44) = v35;
        _os_log_impl(&dword_1830D4000, v33, OS_LOG_TYPE_DEBUG, "%{public}s waking up %u waiters to reclaim", buf, 0x12u);
        size_t v1 = *(void *)(a1 + 32);
      }
    }
    *(_DWORD *)(v1 + 384) = 0;
  }
  unint64_t v2 = *(void *)(v1 + 328);
  if (v2 <= 1 << (flsll(3 * *(void *)(v1 + 16) + 4) - 2)) {
    size_t v3 = 1 << (flsll(3 * *(void *)(v1 + 16) + 4) - 2);
  }
  else {
    size_t v3 = *(void *)(v1 + 328);
  }
  if (*(void *)(v1 + 336) >= v3) {
    size_t v4 = v3;
  }
  else {
    size_t v4 = *(void *)(v1 + 336);
  }
  unint64_t v5 = *(void *)(v1 + 352) + 1;
  if (v4 < v5 >> 1 || v4 > 2 * v5)
  {
    if (!v4 || v4 >> 60)
    {
      os_log_type_t v36 = __nwlog_obj();
      os_log_type_enabled(v36, OS_LOG_TYPE_ERROR);
      *(_DWORD *)int buf = 136446210;
      os_log_type_t v42 = "strict_calloc";
      int v37 = (void *)_os_log_send_and_compose_impl();
      if (__nwlog_abort((uint64_t)v37)) {
        goto LABEL_54;
      }
      free(v37);
    }
    os_log_type_t v7 = (char *)malloc_type_calloc(v4, 0x10uLL, 0xEAFB8F1AuLL);
    if (v7)
    {
      if (!v4) {
        goto LABEL_27;
      }
      goto LABEL_19;
    }
    int v38 = __nwlog_obj();
    os_log_type_enabled(v38, OS_LOG_TYPE_ERROR);
    *(_DWORD *)int buf = 136446722;
    os_log_type_t v42 = "strict_calloc";
    __int16 v43 = 2048;
    size_t v44 = v4;
    __int16 v45 = 2048;
    *(void *)os_log_type_t v46 = 16;
    int v39 = (void *)_os_log_send_and_compose_impl();
    if (!__nwlog_abort((uint64_t)v39))
    {
      free(v39);
      if (!v4) {
        goto LABEL_27;
      }
LABEL_19:
      if (v4 >= 0xA && (v4 ? (BOOL v8 = (v4 - 1) >> 32 == 0) : (BOOL v8 = 0), v8))
      {
        unint64_t v9 = v4 & 0xFFFFFFFFFFFFFFFCLL;
        os_log_type_t v27 = (double *)(v7 + 32);
        long long v28 = 0uLL;
        unint64_t v29 = v4 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          *(void *)&v50.val[1].f64[0] = v27 - 4;
          *(void *)&v50.val[1].f64[1] = v27 - 2;
          BOOL v30 = v27;
          uint64_t v31 = v27 + 2;
          v50.val[0] = 0uLL;
          vst2q_f64(*(double **)&v50.val[1].f64[0], v50);
          vst2q_f64(v27, *(float64x2x2_t *)&v28);
          v27 += 8;
          v29 -= 4;
        }
        while (v29);
        int v10 = v4 & 0xFFFFFFFC;
        if (v4 == v9) {
          goto LABEL_27;
        }
      }
      else
      {
        unint64_t v9 = 0;
        int v10 = 0;
      }
      unsigned int v11 = v10 + 1;
      do
      {
        char v12 = &v7[16 * v9];
        *(void *)char v12 = 0;
        *((void *)v12 + 1) = v12;
        unint64_t v9 = v11++;
      }
      while (v4 > v9);
LABEL_27:
      uint64_t v13 = *(void *)(v1 + 352);
      BOOL v14 = *(char **)(v1 + 360);
      *(void *)(v1 + 352) = v4 - 1;
      *(void *)(v1 + 360) = v7;
      ++*(void *)(v1 + 24);
      unint64_t v15 = v13 + 1;
      if (v13 == -1)
      {
        int v16 = 0;
      }
      else
      {
        uint64_t v17 = 0;
        int v16 = 0;
        do
        {
          uint64_t v18 = &v14[16 * v17];
          BOOL v19 = *(uint64_t **)v18;
          if (*(void *)v18)
          {
            uint64_t v20 = *(void *)(v1 + 344);
            do
            {
              uint64_t v25 = *v19;
              os_log_type_t v26 = (void *)v19[1];
              if (*v19)
              {
                *(void *)(v25 + 8) = v26;
                os_log_type_t v26 = (void *)v19[1];
              }
              else
              {
                *((void *)v18 + 1) = v26;
              }
              *os_log_type_t v26 = v25;
              uint64_t v21 = *(void *)(v1 + 360);
              unint64_t v22 = v19[3];
              *BOOL v19 = 0;
              size_t v23 = v21 + 16 * (((v22 >> v20) + v22 + (v22 >> (2 * v20))) & (v4 - 1));
              unsigned int v24 = *(uint64_t ***)(v23 + 8);
              v19[1] = (uint64_t)v24;
              char *v24 = v19;
              *(void *)(v23 + 8) = v19;
              ++v16;
              BOOL v19 = *(uint64_t **)v18;
            }
            while (*(void *)v18);
          }
          ++v17;
        }
        while (v15 > v17);
      }
      if (gLogDatapath)
      {
        unsigned int v40 = __nwlog_obj();
        if (os_log_type_enabled(v40, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)int buf = 136447234;
          os_log_type_t v42 = "nw_mem_region_hash_rescale";
          __int16 v43 = 2048;
          size_t v44 = v1;
          __int16 v45 = 1024;
          *(_DWORD *)os_log_type_t v46 = v15;
          *(_WORD *)&v46[4] = 1024;
          *(_DWORD *)&v46[6] = v4;
          __int16 v47 = 1024;
          int v48 = v16;
          _os_log_impl(&dword_1830D4000, v40, OS_LOG_TYPE_DEBUG, "%{public}s nwr %p old_size %u new_size %u [%u moved]", buf, 0x28u);
        }
      }
      if (v14) {
        free(v14);
      }
      return;
    }
LABEL_54:
    __break(1u);
  }
}

BOOL nw_parameters_get_fast_open_enabled(nw_parameters_t parameters)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  nw_parameters_t v1 = parameters;
  nw_parameters_t v2 = v1;
  if (v1)
  {
    BOOL v3 = (LOBYTE(v1[12].isa) >> 2) & 1;
    goto LABEL_3;
  }
  unint64_t v5 = __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  int v16 = "nw_parameters_get_fast_open_enabled";
  char v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        int v16 = "nw_parameters_get_fast_open_enabled";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          int v16 = "nw_parameters_get_fast_open_enabled";
          __int16 v17 = 2082;
          uint64_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        int v16 = "nw_parameters_get_fast_open_enabled";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        int v16 = "nw_parameters_get_fast_open_enabled";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  LOBYTE(v3) = 0;
LABEL_3:

  return v3;
}

uint64_t nw_socket_get_parameters(nw_protocol *a1)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v25 = "nw_socket_get_parameters";
    BOOL v14 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (!__nwlog_fault(v14, &type, &v22)) {
      goto LABEL_56;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      unint64_t v15 = __nwlog_obj();
      os_log_type_t v16 = type;
      if (!os_log_type_enabled(v15, type)) {
        goto LABEL_56;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v25 = "nw_socket_get_parameters";
      __int16 v17 = "%{public}s called with null protocol";
    }
    else
    {
      if (!v22)
      {
        unint64_t v15 = __nwlog_obj();
        os_log_type_t v16 = type;
        if (!os_log_type_enabled(v15, type)) {
          goto LABEL_56;
        }
        *(_DWORD *)int buf = 136446210;
        uint64_t v25 = "nw_socket_get_parameters";
        __int16 v17 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_55;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      unint64_t v15 = __nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v19 = os_log_type_enabled(v15, type);
      if (backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)int buf = 136446466;
          uint64_t v25 = "nw_socket_get_parameters";
          __int16 v26 = 2082;
          os_log_type_t v27 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v15, v16, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        if (!v14) {
          return 0;
        }
        goto LABEL_57;
      }
      if (!v19) {
        goto LABEL_56;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v25 = "nw_socket_get_parameters";
      __int16 v17 = "%{public}s called with null protocol, no backtrace";
    }
LABEL_55:
    _os_log_impl(&dword_1830D4000, v15, v16, v17, buf, 0xCu);
    goto LABEL_56;
  }
  if (a1->handle != &nw_protocol_ref_counted_handle)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v25 = "nw_socket_get_parameters";
    BOOL v14 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (!__nwlog_fault(v14, &type, &v22)) {
      goto LABEL_56;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      unint64_t v15 = __nwlog_obj();
      os_log_type_t v16 = type;
      if (!os_log_type_enabled(v15, type)) {
        goto LABEL_56;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v25 = "nw_socket_get_parameters";
      __int16 v17 = "%{public}s called with null socket_handler";
      goto LABEL_55;
    }
    if (!v22)
    {
      unint64_t v15 = __nwlog_obj();
      os_log_type_t v16 = type;
      if (!os_log_type_enabled(v15, type)) {
        goto LABEL_56;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v25 = "nw_socket_get_parameters";
      __int16 v17 = "%{public}s called with null socket_handler, backtrace limit exceeded";
      goto LABEL_55;
    }
    uint64_t v20 = (char *)__nw_create_backtrace_string();
    unint64_t v15 = __nwlog_obj();
    os_log_type_t v16 = type;
    BOOL v21 = os_log_type_enabled(v15, type);
    if (!v20)
    {
      if (!v21) {
        goto LABEL_56;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v25 = "nw_socket_get_parameters";
      __int16 v17 = "%{public}s called with null socket_handler, no backtrace";
      goto LABEL_55;
    }
    if (v21)
    {
      *(_DWORD *)int buf = 136446466;
      uint64_t v25 = "nw_socket_get_parameters";
      __int16 v26 = 2082;
      os_log_type_t v27 = v20;
      _os_log_impl(&dword_1830D4000, v15, v16, "%{public}s called with null socket_handler, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v20);
LABEL_56:
    if (!v14) {
      return 0;
    }
LABEL_57:
    free(v14);
    return 0;
  }
  identifier = a1[2].identifier;
  if (!identifier)
  {
    if ((*(_WORD *)&a1[6].flow_id[13] & 0x80) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      os_log_type_t v7 = gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136446466;
        uint64_t v25 = "nw_socket_get_parameters";
        __int16 v26 = 2082;
        os_log_type_t v27 = (char *)&a1[6].identifier + 4;
        _os_log_impl(&dword_1830D4000, v7, OS_LOG_TYPE_ERROR, "%{public}s %{public}s No input handler", buf, 0x16u);
      }
    }
    return 0;
  }
  uint64_t v3 = *(void *)&identifier->name[24];
  if (!v3) {
    return 0;
  }
  size_t v4 = *(uint64_t (**)(nw_protocol_identifier *))(v3 + 112);
  if (!v4) {
    return 0;
  }
  if (*(_UNKNOWN **)identifier[1].name == &nw_protocol_ref_counted_handle)
  {
    uint64_t v9 = *(void *)&identifier[2].name[8];
    if (v9) {
      *(void *)&identifier[2].name[8] = v9 + 1;
    }
    uint64_t v8 = v4(identifier);
    if (*(_UNKNOWN **)identifier[1].name == &nw_protocol_ref_counted_handle)
    {
      uint64_t v10 = *(void *)&identifier[2].name[8];
      if (v10)
      {
        uint64_t v11 = v10 - 1;
        *(void *)&identifier[2].name[8] = v11;
        if (!v11)
        {
          os_log_type_t v12 = *(void (***)(void))&identifier[1].name[24];
          if (v12)
          {
            *(void *)&identifier[1].name[24] = 0;
            v12[2](v12);
            _Block_release(v12);
          }
          if (identifier[1].level)
          {
            char v13 = *(const void **)&identifier[1].name[24];
            if (v13) {
              _Block_release(v13);
            }
          }
          free(identifier);
        }
      }
    }
    return v8;
  }
  unint64_t v5 = a1[2].identifier;

  return v4(v5);
}

uint64_t nw_socket_get_local(nw_protocol *a1)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v25 = "nw_socket_get_local";
    BOOL v14 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (!__nwlog_fault(v14, &type, &v22)) {
      goto LABEL_56;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      unint64_t v15 = __nwlog_obj();
      os_log_type_t v16 = type;
      if (!os_log_type_enabled(v15, type)) {
        goto LABEL_56;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v25 = "nw_socket_get_local";
      __int16 v17 = "%{public}s called with null protocol";
    }
    else
    {
      if (!v22)
      {
        unint64_t v15 = __nwlog_obj();
        os_log_type_t v16 = type;
        if (!os_log_type_enabled(v15, type)) {
          goto LABEL_56;
        }
        *(_DWORD *)int buf = 136446210;
        uint64_t v25 = "nw_socket_get_local";
        __int16 v17 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_55;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      unint64_t v15 = __nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v19 = os_log_type_enabled(v15, type);
      if (backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)int buf = 136446466;
          uint64_t v25 = "nw_socket_get_local";
          __int16 v26 = 2082;
          os_log_type_t v27 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v15, v16, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        if (!v14) {
          return 0;
        }
        goto LABEL_57;
      }
      if (!v19) {
        goto LABEL_56;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v25 = "nw_socket_get_local";
      __int16 v17 = "%{public}s called with null protocol, no backtrace";
    }
LABEL_55:
    _os_log_impl(&dword_1830D4000, v15, v16, v17, buf, 0xCu);
    goto LABEL_56;
  }
  if (a1->handle != &nw_protocol_ref_counted_handle)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v25 = "nw_socket_get_local";
    BOOL v14 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (!__nwlog_fault(v14, &type, &v22)) {
      goto LABEL_56;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      unint64_t v15 = __nwlog_obj();
      os_log_type_t v16 = type;
      if (!os_log_type_enabled(v15, type)) {
        goto LABEL_56;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v25 = "nw_socket_get_local";
      __int16 v17 = "%{public}s called with null socket_handler";
      goto LABEL_55;
    }
    if (!v22)
    {
      unint64_t v15 = __nwlog_obj();
      os_log_type_t v16 = type;
      if (!os_log_type_enabled(v15, type)) {
        goto LABEL_56;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v25 = "nw_socket_get_local";
      __int16 v17 = "%{public}s called with null socket_handler, backtrace limit exceeded";
      goto LABEL_55;
    }
    uint64_t v20 = (char *)__nw_create_backtrace_string();
    unint64_t v15 = __nwlog_obj();
    os_log_type_t v16 = type;
    BOOL v21 = os_log_type_enabled(v15, type);
    if (!v20)
    {
      if (!v21) {
        goto LABEL_56;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v25 = "nw_socket_get_local";
      __int16 v17 = "%{public}s called with null socket_handler, no backtrace";
      goto LABEL_55;
    }
    if (v21)
    {
      *(_DWORD *)int buf = 136446466;
      uint64_t v25 = "nw_socket_get_local";
      __int16 v26 = 2082;
      os_log_type_t v27 = v20;
      _os_log_impl(&dword_1830D4000, v15, v16, "%{public}s called with null socket_handler, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v20);
LABEL_56:
    if (!v14) {
      return 0;
    }
LABEL_57:
    free(v14);
    return 0;
  }
  identifier = a1[2].identifier;
  if (!identifier)
  {
    if ((*(_WORD *)&a1[6].flow_id[13] & 0x80) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      os_log_type_t v7 = gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136446466;
        uint64_t v25 = "nw_socket_get_local";
        __int16 v26 = 2082;
        os_log_type_t v27 = (char *)&a1[6].identifier + 4;
        _os_log_impl(&dword_1830D4000, v7, OS_LOG_TYPE_ERROR, "%{public}s %{public}s No input handler", buf, 0x16u);
      }
    }
    return 0;
  }
  uint64_t v3 = *(void *)&identifier->name[24];
  if (!v3) {
    return 0;
  }
  size_t v4 = *(uint64_t (**)(nw_protocol_identifier *))(v3 + 128);
  if (!v4) {
    return 0;
  }
  if (*(_UNKNOWN **)identifier[1].name == &nw_protocol_ref_counted_handle)
  {
    uint64_t v9 = *(void *)&identifier[2].name[8];
    if (v9) {
      *(void *)&identifier[2].name[8] = v9 + 1;
    }
    uint64_t v8 = v4(identifier);
    if (*(_UNKNOWN **)identifier[1].name == &nw_protocol_ref_counted_handle)
    {
      uint64_t v10 = *(void *)&identifier[2].name[8];
      if (v10)
      {
        uint64_t v11 = v10 - 1;
        *(void *)&identifier[2].name[8] = v11;
        if (!v11)
        {
          os_log_type_t v12 = *(void (***)(void))&identifier[1].name[24];
          if (v12)
          {
            *(void *)&identifier[1].name[24] = 0;
            v12[2](v12);
            _Block_release(v12);
          }
          if (identifier[1].level)
          {
            char v13 = *(const void **)&identifier[1].name[24];
            if (v13) {
              _Block_release(v13);
            }
          }
          free(identifier);
        }
      }
    }
    return v8;
  }
  unint64_t v5 = a1[2].identifier;

  return v4(v5);
}

void nw_protocol_implementation_get_message_properties(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    unint64_t v5 = *(void **)(a1 + 40);
    char v6 = (void *)(a1 + 96);
    if (v5 != &nw_protocol_ref_counted_handle) {
      char v6 = 0;
    }
    os_log_type_t v7 = v6;
    uint64_t v8 = (char *)v7;
    if (v5 == &nw_protocol_ref_counted_handle)
    {
      uint64_t v9 = v7[1];
      if (v9)
      {
        if (*(void *)(v9 + 80))
        {
          if (!a3)
          {
LABEL_107:

            return;
          }
          if (*(_DWORD *)(v9 + 64) != 3)
          {
LABEL_104:
            uint64_t v48 = *((void *)v8 + 12);
            if (!v48) {
              LODWORD(v48) = -1;
            }
            *a3 = v48;
            unsigned int v49 = a3[1] & 0xFFFFFFFC | (v8[402] >> 7);
            a3[1] = v49;
            a3[1] = v49 & 0xFFFFFFF9 | (*(unsigned __int8 *)(*((void *)v8 + 1) + 184) >> 1) & 4;
            goto LABEL_107;
          }
          if (a2)
          {
            uint64_t v10 = *(void *)(a2 + 56);
            if (v10)
            {
              if ((*(_WORD *)(v10 + 84) & 0x800) != 0)
              {
                unsigned int v11 = a3[1] & 0xFFFFFFF8 | 1;
                *a3 = *(_DWORD *)(v10 + 76);
                a3[1] = v11;
                goto LABEL_107;
              }
              goto LABEL_104;
            }
LABEL_100:
            if ((v8[405] & 0x80000000) == 0)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              __int16 v47 = (id)gLogObj;
              if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)int buf = 136446978;
                __int16 v53 = "nw_protocol_implementation_get_message_properties";
                __int16 v54 = 2082;
                os_log_type_t v55 = v8 + 407;
                __int16 v56 = 2080;
                BOOL v57 = " ";
                __int16 v58 = 2048;
                uint64_t v59 = a2;
                _os_log_impl(&dword_1830D4000, v47, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sOutput handler context doesn't exist on protocol %p", buf, 0x2Au);
              }
            }
            goto LABEL_104;
          }
          int v35 = __nwlog_obj();
          *(_DWORD *)int buf = 136446210;
          __int16 v53 = "__nw_protocol_get_output_handler_context";
          os_log_type_t v36 = (char *)_os_log_send_and_compose_impl();

          os_log_type_t type = OS_LOG_TYPE_ERROR;
          char v50 = 0;
          if (__nwlog_fault(v36, &type, &v50))
          {
            if (type == OS_LOG_TYPE_FAULT)
            {
              int v37 = __nwlog_obj();
              os_log_type_t v38 = type;
              if (os_log_type_enabled(v37, type))
              {
                *(_DWORD *)int buf = 136446210;
                __int16 v53 = "__nw_protocol_get_output_handler_context";
                _os_log_impl(&dword_1830D4000, v37, v38, "%{public}s called with null protocol", buf, 0xCu);
              }
            }
            else if (v50)
            {
              backtrace_string = (char *)__nw_create_backtrace_string();
              int v37 = __nwlog_obj();
              os_log_type_t v44 = type;
              BOOL v45 = os_log_type_enabled(v37, type);
              if (backtrace_string)
              {
                if (v45)
                {
                  *(_DWORD *)int buf = 136446466;
                  __int16 v53 = "__nw_protocol_get_output_handler_context";
                  __int16 v54 = 2082;
                  os_log_type_t v55 = backtrace_string;
                  _os_log_impl(&dword_1830D4000, v37, v44, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
                }

                free(backtrace_string);
                goto LABEL_98;
              }
              if (v45)
              {
                *(_DWORD *)int buf = 136446210;
                __int16 v53 = "__nw_protocol_get_output_handler_context";
                _os_log_impl(&dword_1830D4000, v37, v44, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
              }
            }
            else
            {
              int v37 = __nwlog_obj();
              os_log_type_t v46 = type;
              if (os_log_type_enabled(v37, type))
              {
                *(_DWORD *)int buf = 136446210;
                __int16 v53 = "__nw_protocol_get_output_handler_context";
                _os_log_impl(&dword_1830D4000, v37, v46, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
              }
            }
          }
LABEL_98:
          if (v36) {
            free(v36);
          }
          goto LABEL_100;
        }
        char v22 = __nwlog_obj();
        *(_DWORD *)int buf = 136446210;
        __int16 v53 = "nw_protocol_implementation_get_message_properties";
        __int16 v17 = (char *)_os_log_send_and_compose_impl();

        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v50 = 0;
        if (!__nwlog_fault(v17, &type, &v50)) {
          goto LABEL_90;
        }
        if (type == OS_LOG_TYPE_FAULT)
        {
          uint64_t v18 = __nwlog_obj();
          os_log_type_t v23 = type;
          if (os_log_type_enabled(v18, type))
          {
            *(_DWORD *)int buf = 136446210;
            __int16 v53 = "nw_protocol_implementation_get_message_properties";
            _os_log_impl(&dword_1830D4000, v18, v23, "%{public}s called with null instance->parent_definition->extended_state", buf, 0xCu);
          }
          goto LABEL_89;
        }
        if (!v50)
        {
          uint64_t v18 = __nwlog_obj();
          os_log_type_t v42 = type;
          if (os_log_type_enabled(v18, type))
          {
            *(_DWORD *)int buf = 136446210;
            __int16 v53 = "nw_protocol_implementation_get_message_properties";
            _os_log_impl(&dword_1830D4000, v18, v42, "%{public}s called with null instance->parent_definition->extended_state, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_89;
        }
        BOOL v30 = (char *)__nw_create_backtrace_string();
        uint64_t v18 = __nwlog_obj();
        os_log_type_t v33 = type;
        BOOL v34 = os_log_type_enabled(v18, type);
        if (!v30)
        {
          if (v34)
          {
            *(_DWORD *)int buf = 136446210;
            __int16 v53 = "nw_protocol_implementation_get_message_properties";
            _os_log_impl(&dword_1830D4000, v18, v33, "%{public}s called with null instance->parent_definition->extended_state, no backtrace", buf, 0xCu);
          }
          goto LABEL_89;
        }
        if (v34)
        {
          *(_DWORD *)int buf = 136446466;
          __int16 v53 = "nw_protocol_implementation_get_message_properties";
          __int16 v54 = 2082;
          os_log_type_t v55 = v30;
          _os_log_impl(&dword_1830D4000, v18, v33, "%{public}s called with null instance->parent_definition->extended_state, dumping backtrace:%{public}s", buf, 0x16u);
        }
      }
      else
      {
        uint64_t v20 = __nwlog_obj();
        *(_DWORD *)int buf = 136446210;
        __int16 v53 = "nw_protocol_implementation_get_message_properties";
        __int16 v17 = (char *)_os_log_send_and_compose_impl();

        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v50 = 0;
        if (!__nwlog_fault(v17, &type, &v50)) {
          goto LABEL_90;
        }
        if (type == OS_LOG_TYPE_FAULT)
        {
          uint64_t v18 = __nwlog_obj();
          os_log_type_t v21 = type;
          if (os_log_type_enabled(v18, type))
          {
            *(_DWORD *)int buf = 136446210;
            __int16 v53 = "nw_protocol_implementation_get_message_properties";
            _os_log_impl(&dword_1830D4000, v18, v21, "%{public}s called with null instance->parent_definition", buf, 0xCu);
          }
          goto LABEL_89;
        }
        if (!v50)
        {
          uint64_t v18 = __nwlog_obj();
          os_log_type_t v41 = type;
          if (os_log_type_enabled(v18, type))
          {
            *(_DWORD *)int buf = 136446210;
            __int16 v53 = "nw_protocol_implementation_get_message_properties";
            _os_log_impl(&dword_1830D4000, v18, v41, "%{public}s called with null instance->parent_definition, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_89;
        }
        BOOL v30 = (char *)__nw_create_backtrace_string();
        uint64_t v18 = __nwlog_obj();
        os_log_type_t v31 = type;
        BOOL v32 = os_log_type_enabled(v18, type);
        if (!v30)
        {
          if (v32)
          {
            *(_DWORD *)int buf = 136446210;
            __int16 v53 = "nw_protocol_implementation_get_message_properties";
            _os_log_impl(&dword_1830D4000, v18, v31, "%{public}s called with null instance->parent_definition, no backtrace", buf, 0xCu);
          }
          goto LABEL_89;
        }
        if (v32)
        {
          *(_DWORD *)int buf = 136446466;
          __int16 v53 = "nw_protocol_implementation_get_message_properties";
          __int16 v54 = 2082;
          os_log_type_t v55 = v30;
          _os_log_impl(&dword_1830D4000, v18, v31, "%{public}s called with null instance->parent_definition, dumping backtrace:%{public}s", buf, 0x16u);
        }
      }

      free(v30);
      if (!v17) {
        goto LABEL_107;
      }
      goto LABEL_91;
    }
    os_log_type_t v16 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    __int16 v53 = "nw_protocol_implementation_get_message_properties";
    __int16 v17 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v50 = 0;
    if (!__nwlog_fault(v17, &type, &v50)) {
      goto LABEL_90;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v18 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v53 = "nw_protocol_implementation_get_message_properties";
        _os_log_impl(&dword_1830D4000, v18, v19, "%{public}s called with null instance", buf, 0xCu);
      }
    }
    else if (v50)
    {
      os_log_type_t v27 = (char *)__nw_create_backtrace_string();
      uint64_t v18 = __nwlog_obj();
      os_log_type_t v28 = type;
      BOOL v29 = os_log_type_enabled(v18, type);
      if (v27)
      {
        if (v29)
        {
          *(_DWORD *)int buf = 136446466;
          __int16 v53 = "nw_protocol_implementation_get_message_properties";
          __int16 v54 = 2082;
          os_log_type_t v55 = v27;
          _os_log_impl(&dword_1830D4000, v18, v28, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v27);
LABEL_90:
        if (!v17) {
          goto LABEL_107;
        }
LABEL_91:
        free(v17);
        goto LABEL_107;
      }
      if (v29)
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v53 = "nw_protocol_implementation_get_message_properties";
        _os_log_impl(&dword_1830D4000, v18, v28, "%{public}s called with null instance, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v18 = __nwlog_obj();
      os_log_type_t v40 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v53 = "nw_protocol_implementation_get_message_properties";
        _os_log_impl(&dword_1830D4000, v18, v40, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_89:

    goto LABEL_90;
  }
  os_log_type_t v12 = __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  __int16 v53 = "nw_protocol_implementation_get_message_properties";
  char v13 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v50 = 0;
  if (__nwlog_fault(v13, &type, &v50))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v53 = "nw_protocol_implementation_get_message_properties";
        _os_log_impl(&dword_1830D4000, v14, v15, "%{public}s called with null protocol", buf, 0xCu);
      }
    }
    else if (v50)
    {
      unsigned int v24 = (char *)__nw_create_backtrace_string();
      BOOL v14 = __nwlog_obj();
      os_log_type_t v25 = type;
      BOOL v26 = os_log_type_enabled(v14, type);
      if (v24)
      {
        if (v26)
        {
          *(_DWORD *)int buf = 136446466;
          __int16 v53 = "nw_protocol_implementation_get_message_properties";
          __int16 v54 = 2082;
          os_log_type_t v55 = v24;
          _os_log_impl(&dword_1830D4000, v14, v25, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v24);
        goto LABEL_79;
      }
      if (v26)
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v53 = "nw_protocol_implementation_get_message_properties";
        _os_log_impl(&dword_1830D4000, v14, v25, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v14 = __nwlog_obj();
      os_log_type_t v39 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v53 = "nw_protocol_implementation_get_message_properties";
        _os_log_impl(&dword_1830D4000, v14, v39, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_79:
  if (v13) {
    free(v13);
  }
}

char *nw_connection_copy_description_level(void *a1, int a2)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1;
  id v4 = v3;
  if (v3)
  {
    os_log_type_t v33 = 0;
    unint64_t v5 = (void *)v3[1];
    if (a2 == 1) {
      description = nw_endpoint_get_description(v5);
    }
    else {
      description = nw_endpoint_get_logging_description(v5);
    }
    os_log_type_t v7 = description;
    uint64_t v8 = nw_parameters_copy_description_internal(*((NWConcrete_nw_parameters **)v4 + 2), 0);
    *(void *)int buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x3032000000;
    int v35 = __Block_byref_object_copy__24353;
    os_log_type_t v36 = __Block_byref_object_dispose__24354;
    id v37 = 0;
    *(void *)os_log_type_t type = 0;
    BOOL v30 = type;
    uint64_t v31 = 0x2020000000;
    char v32 = 0;
    v25[0] = MEMORY[0x1E4F143A8];
    v25[1] = 3221225472;
    v25[2] = ___ZL36nw_connection_copy_description_levelP24NWConcrete_nw_connection26nw_context_privacy_level_t_block_invoke;
    v25[3] = &unk_1E5244950;
    uint64_t v9 = v4;
    id v26 = v9;
    os_log_type_t v27 = buf;
    os_log_type_t v28 = type;
    os_unfair_lock_lock((os_unfair_lock_t)v4 + 34);
    ___ZL36nw_connection_copy_description_levelP24NWConcrete_nw_connection26nw_context_privacy_level_t_block_invoke(v25);
    os_unfair_lock_unlock((os_unfair_lock_t)v4 + 34);
    uint64_t v10 = *(void **)(*(void *)&buf[8] + 40);
    if (v10) {
      BOOL v11 = nw_path_copy_description(v10);
    }
    else {
      BOOL v11 = 0;
    }
    os_log_type_t v12 = "";
    if (*((unsigned char *)v30 + 24)) {
      char v13 = "connected ";
    }
    else {
      char v13 = "";
    }
    BOOL v14 = ", path ";
    if (v11) {
      os_log_type_t v12 = (const char *)v11;
    }
    else {
      BOOL v14 = "";
    }
    asprintf(&v33, "[C%u %s%s %s%s%s]", v9[112], v13, v7, v8, v14, v12);
    if (v8) {
      free(v8);
    }
    if (v11) {
      free((void *)v11);
    }
    os_log_type_t v15 = v33;

    _Block_object_dispose(type, 8);
    _Block_object_dispose(buf, 8);

    goto LABEL_19;
  }
  __int16 v17 = __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_connection_copy_description_level";
  uint64_t v18 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  LOBYTE(v33) = 0;
  if (__nwlog_fault(v18, type, &v33))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v19 = __nwlog_obj();
      os_log_type_t v20 = type[0];
      if (os_log_type_enabled(v19, type[0]))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_copy_description_level";
        _os_log_impl(&dword_1830D4000, v19, v20, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if ((_BYTE)v33)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v19 = __nwlog_obj();
      os_log_type_t v22 = type[0];
      BOOL v23 = os_log_type_enabled(v19, type[0]);
      if (backtrace_string)
      {
        if (v23)
        {
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_connection_copy_description_level";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&void buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v19, v22, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_36;
      }
      if (v23)
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_copy_description_level";
        _os_log_impl(&dword_1830D4000, v19, v22, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v19 = __nwlog_obj();
      os_log_type_t v24 = type[0];
      if (os_log_type_enabled(v19, type[0]))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_copy_description_level";
        _os_log_impl(&dword_1830D4000, v19, v24, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_36:
  if (v18) {
    free(v18);
  }
  os_log_type_t v15 = 0;
LABEL_19:

  return v15;
}

void sub_18324AA3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL36nw_connection_copy_description_levelP24NWConcrete_nw_connection26nw_context_privacy_level_t_block_invoke(void *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = *(void **)(v2 + 144);
  if (v3)
  {
    if ((*(unsigned char *)(v2 + 109) & 0x40) != 0)
    {
      uint64_t v8 = nw_endpoint_handler_copy_connected_path(v3);
      uint64_t v9 = *(void *)(a1[5] + 8);
      uint64_t v10 = *(void **)(v9 + 40);
      *(void *)(v9 + 40) = v8;

      *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = 1;
    }
    else
    {
      id v4 = v3;
      os_unfair_lock_lock((os_unfair_lock_t)v4 + 28);
      id v5 = *((id *)v4 + 8);
      os_unfair_lock_unlock((os_unfair_lock_t)v4 + 28);

      uint64_t v6 = *(void *)(a1[5] + 8);
      os_log_type_t v7 = *(void **)(v6 + 40);
      *(void *)(v6 + 40) = v5;
    }
  }
}

uint64_t nw_path_is_direct(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  nw_parameters_t v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = (v1[473] >> 5) & 1;
    goto LABEL_3;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  os_log_type_t v16 = "nw_path_is_direct";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v16 = "nw_path_is_direct";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null path", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          os_log_type_t v16 = "nw_path_is_direct";
          __int16 v17 = 2082;
          uint64_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v16 = "nw_path_is_direct";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v16 = "nw_path_is_direct";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

void ___ZL26nw_connection_cancel_innerP24NWConcrete_nw_connectionb_block_invoke(uint64_t a1)
{
  uint64_t v143 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  int v3 = *(_DWORD *)(v2 + 80);
  BOOL logging_disabled = nw_parameters_get_logging_disabled(*(void *)(v2 + 16));
  if (v3 != 5)
  {
    if (!logging_disabled && (nw_parameters_get_minimize_logging(*(void **)(*(void *)(a1 + 32) + 16)) & 1) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      BOOL v11 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v12 = *(void *)(a1 + 32);
        int v13 = *(_DWORD *)(v12 + 448);
        logging_description = nw_endpoint_get_logging_description(*(void **)(v12 + 8));
        uint64_t v15 = *(void *)(*(void *)(a1 + 32) + 16);
        os_log_type_t v16 = "force-";
        if (!*(unsigned char *)(a1 + 40)) {
          os_log_type_t v16 = "";
        }
        *(_DWORD *)int buf = 67110402;
        *(_DWORD *)&uint8_t buf[4] = v13;
        *(_WORD *)&buf[8] = 1042;
        *(_DWORD *)&buf[10] = 16;
        *(_WORD *)&void buf[14] = 2098;
        *(void *)&buf[16] = v12 + 452;
        *(_WORD *)&unsigned char buf[24] = 2082;
        *(void *)&buf[26] = logging_description;
        *(_WORD *)&buf[34] = 2114;
        *(void *)&buf[36] = v15;
        *(_WORD *)&buf[44] = 2082;
        *(void *)&buf[46] = v16;
        _os_log_impl(&dword_1830D4000, v11, OS_LOG_TYPE_DEFAULT, "[C%u %{public,uuid_t}.16P %{public}s %{public}@] %{public}scancel", buf, 0x36u);
      }
    }
    __int16 v17 = *(os_unfair_lock_s **)(a1 + 32);
    int os_unfair_lock_opaque = v17[20]._os_unfair_lock_opaque;
    uint64_t v19 = v17 + 34;
    v140[0] = MEMORY[0x1E4F143A8];
    v140[1] = 3221225472;
    v140[2] = ___ZL26nw_connection_cancel_innerP24NWConcrete_nw_connectionb_block_invoke_240;
    v140[3] = &unk_1E524BAA8;
    char v141 = v17;
    os_unfair_lock_lock(v19);
    ___ZL26nw_connection_cancel_innerP24NWConcrete_nw_connectionb_block_invoke_240((uint64_t)v140);
    os_unfair_lock_unlock(v19);
    id v20 = *(id *)(a1 + 32);
    os_log_type_t v21 = v20;
    if (v20)
    {
      nw_context_assert_queue(*((void **)v20 + 3));
      uint64_t v22 = v21[53];
      if (v22)
      {
        uint64_t v23 = nw_array_create();
        if (v23 != v22)
        {
          uint64_t v24 = v23;
          std::vector<nw_object_wrapper_t>::__assign_with_size[abi:nn180100]<nw_object_wrapper_t*,nw_object_wrapper_t*>(v23 + 16, *(void ***)(v22 + 16), *(void ***)(v22 + 24), (uint64_t)(*(void *)(v22 + 24) - *(void *)(v22 + 16)) >> 3);
          uint64_t v22 = v24;
        }
        nw_array_apply((atomic_uchar *)v22, (uint64_t)&__block_literal_global_233);
      }
      goto LABEL_24;
    }
    unsigned int v87 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_connection_cleanup_data_transfer_reports_on_nw_queue";
    os_log_type_t v88 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(v133) = 16;
    LOBYTE(v131[0]) = 0;
    if (__nwlog_fault(v88, &v133, v131))
    {
      if (v133 == 17)
      {
        __int16 v89 = __nwlog_obj();
        os_log_type_t v90 = v133;
        if (os_log_type_enabled(v89, (os_log_type_t)v133))
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_connection_cleanup_data_transfer_reports_on_nw_queue";
          _os_log_impl(&dword_1830D4000, v89, v90, "%{public}s called with null connection", buf, 0xCu);
        }
      }
      else if (LOBYTE(v131[0]))
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __int16 v89 = __nwlog_obj();
        os_log_type_t v96 = v133;
        BOOL v97 = os_log_type_enabled(v89, (os_log_type_t)v133);
        if (backtrace_string)
        {
          if (v97)
          {
            *(_DWORD *)int buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_connection_cleanup_data_transfer_reports_on_nw_queue";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&void buf[14] = backtrace_string;
            _os_log_impl(&dword_1830D4000, v89, v96, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_132;
        }
        if (v97)
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_connection_cleanup_data_transfer_reports_on_nw_queue";
          _os_log_impl(&dword_1830D4000, v89, v96, "%{public}s called with null connection, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __int16 v89 = __nwlog_obj();
        os_log_type_t v105 = v133;
        if (os_log_type_enabled(v89, (os_log_type_t)v133))
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_connection_cleanup_data_transfer_reports_on_nw_queue";
          _os_log_impl(&dword_1830D4000, v89, v105, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_132:
    if (v88) {
      free(v88);
    }
LABEL_24:

    char v25 = *(unsigned char *)(a1 + 40);
    id v26 = (os_unfair_lock_s *)*(id *)(a1 + 32);
    os_log_type_t v27 = v26;
    if (v26)
    {
      *(void *)int buf = MEMORY[0x1E4F143A8];
      *(void *)&buf[8] = 3221225472;
      *(void *)&buf[16] = ___ZL27nw_connection_cancel_probesP24NWConcrete_nw_connectionb_block_invoke;
      *(void *)&unsigned char buf[24] = &unk_1E5248D20;
      *(void *)&unsigned char buf[32] = v26;
      buf[40] = v25;
      os_unfair_lock_lock(v27 + 34);
      (*(void (**)(unsigned char *))&buf[16])(buf);
      os_unfair_lock_unlock(v27 + 34);

      goto LABEL_26;
    }
    int v91 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_connection_cancel_probes";
    unsigned int v92 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(v133) = 16;
    LOBYTE(v131[0]) = 0;
    if (__nwlog_fault(v92, &v133, v131))
    {
      if (v133 == 17)
      {
        uint64_t v93 = __nwlog_obj();
        os_log_type_t v94 = v133;
        if (os_log_type_enabled(v93, (os_log_type_t)v133))
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_connection_cancel_probes";
          _os_log_impl(&dword_1830D4000, v93, v94, "%{public}s called with null connection", buf, 0xCu);
        }
      }
      else if (LOBYTE(v131[0]))
      {
        os_log_type_t v98 = (char *)__nw_create_backtrace_string();
        uint64_t v93 = __nwlog_obj();
        os_log_type_t v99 = v133;
        BOOL v100 = os_log_type_enabled(v93, (os_log_type_t)v133);
        if (v98)
        {
          if (v100)
          {
            *(_DWORD *)int buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_connection_cancel_probes";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&void buf[14] = v98;
            _os_log_impl(&dword_1830D4000, v93, v99, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v98);
          goto LABEL_137;
        }
        if (v100)
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_connection_cancel_probes";
          _os_log_impl(&dword_1830D4000, v93, v99, "%{public}s called with null connection, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        uint64_t v93 = __nwlog_obj();
        os_log_type_t v106 = v133;
        if (os_log_type_enabled(v93, (os_log_type_t)v133))
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_connection_cancel_probes";
          _os_log_impl(&dword_1830D4000, v93, v106, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_137:
    if (v92) {
      free(v92);
    }
LABEL_26:

    uint64_t v28 = *(void *)(a1 + 32);
    BOOL v29 = *(void **)(v28 + 512);
    if (v29 && *(char *)(v28 + 109) < 0)
    {
      uint64_t v30 = *(void *)(v28 + 16);
      if (v30 && !nw_path_parameters_get_logging_disabled(*(void *)(v30 + 104)))
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        uint64_t v31 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
        {
          int v32 = *(_DWORD *)(*(void *)(a1 + 32) + 448);
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_connection_cancel_inner_block_invoke_2";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&void buf[14] = v32;
          _os_log_impl(&dword_1830D4000, v31, OS_LOG_TYPE_INFO, "%{public}s [C%u] Connection cancelled, updating current interface", buf, 0x12u);
        }
      }
      (*(void (**)(void, void))(*(void *)(*(void *)(a1 + 32) + 512) + 16))(*(void *)(*(void *)(a1 + 32) + 512), 0);
      uint64_t v28 = *(void *)(a1 + 32);
      BOOL v29 = *(void **)(v28 + 512);
    }
    *(void *)(v28 + 512) = 0;

    uint64_t v33 = *(void *)(a1 + 32);
    BOOL v34 = *(void **)(v33 + 520);
    *(void *)(v33 + 520) = 0;

    int v139 = 524289;
    nw_connection_endpoint_report_on_nw_queue(0, 0, 5, (uint64_t)&v139, 0, *(void **)(a1 + 32));
    if (os_unfair_lock_opaque < 1) {
      goto LABEL_80;
    }
    nw_connection_send_stats_report_on_nw_queue(*(void **)(a1 + 32));
    if (os_unfair_lock_opaque > 2) {
      goto LABEL_80;
    }
    id v35 = *(id *)(a1 + 32);
    int v36 = 0;
    if (nw_connection_get_event_milliseconds(v35, 2, 2, 0, 0) == -1)
    {
      *(_WORD *)int buf = 0;
      unsigned int event_milliseconds = nw_connection_get_event_milliseconds(v35, 2, 1, buf, 0);
      if (event_milliseconds == -1)
      {
        int v36 = 0;
      }
      else
      {
        unsigned int v44 = event_milliseconds;
        uint64_t v45 = mach_continuous_time();
        if (v45 <= 1) {
          uint64_t v46 = 1;
        }
        else {
          uint64_t v46 = v45;
        }
        unint64_t v47 = nw_delta_nanos(*((void *)v35 + 9), v46);
        int v36 = 0;
        unint64_t v48 = v47 / 0xF4240;
        if (v47 > 0xF423FFFFFFFFFLL) {
          LODWORD(v48) = -1;
        }
        BOOL v49 = v48 >= v44;
        unsigned int v50 = v48 - v44;
        if (v50 != 0 && v49 && v50 >> 3 >= 0x271)
        {
          id v51 = nw_connection_copy_endpoint_handler_for_handler_id(*((NWConcrete_nw_connection **)v35 + 18), *(__int16 *)buf);
          nw_connection_report_symptom_on_nw_queue(v35, 421900, v51, 0);

          int v36 = 1;
        }
      }
    }
    if (nw_connection_get_event_milliseconds(v35, 3, 6, 0, 0) == -1)
    {
      *(_WORD *)int buf = 0;
      unsigned int v52 = nw_connection_get_event_milliseconds(v35, 3, 3, buf, 0);
      if (v52 != -1)
      {
        unsigned int v53 = v52;
        uint64_t v54 = mach_continuous_time();
        if (v54 <= 1) {
          uint64_t v55 = 1;
        }
        else {
          uint64_t v55 = v54;
        }
        unint64_t v56 = nw_delta_nanos(*((void *)v35 + 9), v55);
        unint64_t v57 = v56 / 0xF4240;
        if (v56 > 0xF423FFFFFFFFFLL) {
          LODWORD(v57) = -1;
        }
        BOOL v49 = v57 >= v53;
        unsigned int v58 = v57 - v53;
        if (v58 != 0 && v49 && v58 >> 3 >= 0x271)
        {
          id v59 = nw_connection_copy_endpoint_handler_for_handler_id(*((NWConcrete_nw_connection **)v35 + 18), *(__int16 *)buf);
          nw_connection_report_symptom_on_nw_queue(v35, 421901, v59, 0);

          int v36 = 1;
        }
      }
    }

    if (v36) {
      int v37 = 60;
    }
    else {
      int v37 = 1301;
    }
    uint64_t v38 = (void **)*(id *)(a1 + 32);
    os_log_type_t v39 = v38;
    if (v38)
    {
      nw_context_assert_queue(v38[3]);
      if (nw_connection_get_privacy_stance(v39) == 4
        || nw_connection_get_privacy_stance(v39) == 1)
      {
        os_log_type_t v40 = v39[2];
        if (v40 && !nw_path_parameters_get_logging_disabled(v40[13]) && gLogDatapath)
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          os_log_type_t v41 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v41, OS_LOG_TYPE_DEBUG))
          {
            int v42 = *((_DWORD *)v39 + 112);
            *(_DWORD *)int buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_connection_report_error_to_proxy_agent_on_nw_queue";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&void buf[14] = v42;
            _os_log_impl(&dword_1830D4000, v41, OS_LOG_TYPE_DEBUG, "%{public}s [C%u] not reporting error for connection with ineligible privacy stance", buf, 0x12u);
          }
        }
      }
      else
      {
        *(void *)int buf = MEMORY[0x1E4F143A8];
        *(void *)&buf[8] = 3221225472;
        *(void *)&buf[16] = __nw_connection_report_error_to_proxy_agent_on_nw_queue_block_invoke;
        *(void *)&unsigned char buf[24] = &unk_1E523DBB8;
        uint64_t v60 = v39;
        *(void *)&unsigned char buf[32] = v60;
        *(_DWORD *)&buf[40] = v37;
        int v61 = (void (**)(void *, id, id))_Block_copy(buf);
        if ((*((unsigned char *)v60 + 109) & 0x40) != 0
          && (__int16 v62 = nw_endpoint_handler_copy_connected_flow_handler(v60[18])) != 0)
        {
          BOOL v63 = v62;
          id v64 = v63[4];

          uint64_t v65 = v63;
          os_unfair_lock_lock((os_unfair_lock_t)v65 + 28);
          id v66 = *((id *)v65 + 8);
          os_unfair_lock_unlock((os_unfair_lock_t)v65 + 28);

          v61[2](v61, v64, v66);
        }
        else
        {
          uint64_t v67 = v60[18];
          uint64_t v133 = MEMORY[0x1E4F143A8];
          uint64_t v134 = 3221225472;
          uint64_t v135 = (uint64_t)__nw_connection_report_error_to_proxy_agent_on_nw_queue_block_invoke_28;
          uint64_t v136 = (uint64_t (*)(uint64_t, uint64_t))&unk_1E523DBE0;
          LODWORD(v138) = v37;
          int v137 = v61;
          nw_endpoint_handler_apply_to_leaf_children(v67, &v133);
          uint64_t v65 = v137;
        }
      }
LABEL_79:

LABEL_80:
      uint64_t v68 = *(void **)(*(void *)(a1 + 32) + 168);
      uint64_t v69 = -[NWConcrete_nw_error initWithDomain:code:]([NWConcrete_nw_error alloc], 1, 89);
      nw_read_request_report_error_with_override(v68, 0, v69);

      uint64_t v70 = *(void *)(a1 + 32);
      uint64_t v71 = *(void **)(v70 + 168);
      *(void *)(v70 + 168) = 0;

      uint64_t v72 = *(void **)(*(void *)(a1 + 32) + 160);
      uint64_t v73 = -[NWConcrete_nw_error initWithDomain:code:]([NWConcrete_nw_error alloc], 1, 89);
      nw_write_request_report_error_with_override(v72, 0, v73);

      uint64_t v74 = *(void *)(a1 + 32);
      uint64_t v75 = *(void **)(v74 + 160);
      *(void *)(v74 + 160) = 0;

      uint64_t v76 = *(void **)(a1 + 32);
      os_log_type_t v77 = (void *)v76[18];
      if (v77)
      {
        nw_endpoint_handler_cancel(v77, *(unsigned __int8 *)(a1 + 40), 0);
        uint64_t v76 = *(void **)(a1 + 32);
      }
      uint64_t v78 = (void *)v76[22];
      if (v78)
      {
        nw_endpoint_handler_cancel(v78, *(unsigned __int8 *)(a1 + 40), 0);
        uint64_t v76 = *(void **)(a1 + 32);
      }
      char v79 = (void *)v76[7];
      if (v79)
      {
        nw_candidate_manager_cancel(v79);
        uint64_t v80 = *(void *)(a1 + 32);
        uint64_t v81 = *(void **)(v80 + 56);
        *(void *)(v80 + 56) = 0;

        uint64_t v76 = *(void **)(a1 + 32);
      }
      os_log_type_t v82 = (void *)v76[8];
      v76[8] = 0;

      *(void *)int buf = 0;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x3032000000;
      *(void *)&unsigned char buf[24] = __Block_byref_object_copy__10;
      *(void *)&unsigned char buf[32] = __Block_byref_object_dispose__11;
      *(void *)&buf[40] = 0;
      uint64_t v133 = 0;
      uint64_t v134 = (uint64_t)&v133;
      uint64_t v135 = 0x3032000000;
      uint64_t v136 = __Block_byref_object_copy__24353;
      int v137 = __Block_byref_object_dispose__24354;
      id v138 = 0;
      v131[0] = 0;
      v131[1] = v131;
      v131[2] = 0x3032000000;
      v131[3] = __Block_byref_object_copy__24353;
      v131[4] = __Block_byref_object_dispose__24354;
      id v132 = 0;
      uint64_t v125 = 0;
      os_log_type_t v126 = &v125;
      uint64_t v127 = 0x3032000000;
      uint64_t v128 = __Block_byref_object_copy__24353;
      os_log_type_t v129 = __Block_byref_object_dispose__24354;
      id v130 = 0;
      v123[0] = 0;
      v123[1] = v123;
      v123[2] = 0x3032000000;
      v123[3] = __Block_byref_object_copy__10;
      v123[4] = __Block_byref_object_dispose__11;
      id v124 = 0;
      unsigned int v83 = *(os_unfair_lock_s **)(a1 + 32);
      os_log_type_t v84 = v83 + 34;
      v116[0] = MEMORY[0x1E4F143A8];
      v116[1] = 3221225472;
      v116[2] = ___ZL26nw_connection_cancel_innerP24NWConcrete_nw_connectionb_block_invoke_241;
      v116[3] = &unk_1E523DE50;
      int v118 = buf;
      BOOL v117 = v83;
      uint64_t v119 = &v133;
      uint64_t v120 = v131;
      __int16 v121 = &v125;
      uint64_t v122 = v123;
      os_unfair_lock_lock(v84);
      ___ZL26nw_connection_cancel_innerP24NWConcrete_nw_connectionb_block_invoke_241(v116);
      os_unfair_lock_unlock(v84);
      nw_connection_cancel_update_handler(*(NWConcrete_nw_connection **)(a1 + 32));
      aBlock[0] = MEMORY[0x1E4F143A8];
      aBlock[1] = 3221225472;
      aBlock[2] = ___ZL26nw_connection_cancel_innerP24NWConcrete_nw_connectionb_block_invoke_2;
      aBlock[3] = &unk_1E523DE78;
      id v112 = *(id *)(a1 + 32);
      uint64_t v113 = v123;
      os_log_type_t v114 = v131;
      uint64_t v115 = buf;
      nw_protocol_options_t v85 = (void (**)(void))_Block_copy(aBlock);
      os_log_type_t v86 = *(NSObject **)(v134 + 40);
      if (v86) {
        dispatch_group_notify(v86, (dispatch_queue_t)v126[5], v85);
      }
      else {
        v85[2](v85);
      }

      _Block_object_dispose(v123, 8);
      _Block_object_dispose(&v125, 8);

      _Block_object_dispose(v131, 8);
      _Block_object_dispose(&v133, 8);

      _Block_object_dispose(buf, 8);
      id v5 = v141;
      goto LABEL_90;
    }
    int v101 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_connection_report_error_to_proxy_agent_on_nw_queue";
    BOOL v102 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(v133) = 16;
    LOBYTE(v131[0]) = 0;
    if (__nwlog_fault(v102, &v133, v131))
    {
      if (v133 == 17)
      {
        os_log_type_t v103 = __nwlog_obj();
        os_log_type_t v104 = v133;
        if (os_log_type_enabled(v103, (os_log_type_t)v133))
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_connection_report_error_to_proxy_agent_on_nw_queue";
          _os_log_impl(&dword_1830D4000, v103, v104, "%{public}s called with null connection", buf, 0xCu);
        }
      }
      else if (LOBYTE(v131[0]))
      {
        os_log_type_t v107 = (char *)__nw_create_backtrace_string();
        os_log_type_t v103 = __nwlog_obj();
        os_log_type_t v108 = v133;
        BOOL v109 = os_log_type_enabled(v103, (os_log_type_t)v133);
        if (v107)
        {
          if (v109)
          {
            *(_DWORD *)int buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_connection_report_error_to_proxy_agent_on_nw_queue";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&void buf[14] = v107;
            _os_log_impl(&dword_1830D4000, v103, v108, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v107);
          goto LABEL_145;
        }
        if (v109)
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_connection_report_error_to_proxy_agent_on_nw_queue";
          _os_log_impl(&dword_1830D4000, v103, v108, "%{public}s called with null connection, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        os_log_type_t v103 = __nwlog_obj();
        os_log_type_t v110 = v133;
        if (os_log_type_enabled(v103, (os_log_type_t)v133))
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_connection_report_error_to_proxy_agent_on_nw_queue";
          _os_log_impl(&dword_1830D4000, v103, v110, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_145:
    if (v102) {
      free(v102);
    }
    goto LABEL_79;
  }
  if (logging_disabled) {
    return;
  }
  if (__nwlog_connection_log::onceToken != -1) {
    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
  }
  id v5 = (id)gconnectionLogObj;
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    int v7 = *(_DWORD *)(v6 + 448);
    os_log_type_t v8 = nw_endpoint_get_logging_description(*(void **)(v6 + 8));
    uint64_t v9 = *(void *)(*(void *)(a1 + 32) + 16);
    if (*(unsigned char *)(a1 + 40)) {
      os_log_type_t v10 = "forced ";
    }
    else {
      os_log_type_t v10 = "";
    }
    *(_DWORD *)int buf = 67109890;
    *(_DWORD *)&uint8_t buf[4] = v7;
    *(_WORD *)&buf[8] = 2082;
    *(void *)&buf[10] = v8;
    *(_WORD *)&buf[18] = 2114;
    *(void *)&buf[20] = v9;
    *(_WORD *)&unsigned char buf[28] = 2082;
    *(void *)&buf[30] = v10;
    _os_log_impl(&dword_1830D4000, v5, OS_LOG_TYPE_ERROR, "[C%u %{public}s %{public}@] is already cancelled, ignoring %{public}scancel", buf, 0x26u);
  }
LABEL_90:
}

void sub_18324C090(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_endpoint_handler_cancel(void *a1, uint64_t a2, int a3)
{
  uint64_t v82 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  uint64_t v6 = v5;
  if (v5)
  {
    int v7 = (void *)v5[4];
    if (v7)
    {
      os_log_type_t v8 = v7;
      id v9 = *(id *)(v8[13] + 136);

      nw_context_assert_queue(v9);
    }
    os_log_type_t v10 = v6;
    BOOL v11 = v10;
    uint64_t v12 = (void *)v6[4];
    if (v12)
    {
      int v13 = v12;
      uint64_t v14 = v13[12];

      if ((v14 & 0x4000000000) != 0)
      {
        if (nw_endpoint_handler_get_logging_disabled(v11)) {
          goto LABEL_27;
        }
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        uint64_t v15 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
        {
          id_string = nw_endpoint_handler_get_id_string(v11);
          unsigned int v52 = nw_endpoint_handler_dry_run_string(v11);
          uint64_t v65 = v6;
          nw_endpoint_t v63 = nw_endpoint_handler_copy_endpoint(v11);
          logging_description = nw_endpoint_get_logging_description(v63);
          uint64_t v54 = nw_endpoint_handler_state_string(v11);
          uint64_t v55 = nw_endpoint_handler_mode_string(v11);
          id v56 = nw_endpoint_handler_copy_current_path(v11);
          *(_DWORD *)int buf = 136447746;
          uint64_t v69 = "nw_endpoint_handler_cancel";
          __int16 v70 = 2082;
          uint64_t v71 = (void *)id_string;
          __int16 v72 = 2082;
          uint64_t v73 = v52;
          __int16 v74 = 2082;
          uint64_t v75 = logging_description;
          __int16 v76 = 2082;
          os_log_type_t v77 = v54;
          __int16 v78 = 2082;
          char v79 = v55;
          __int16 v80 = 2114;
          id v81 = v56;
          _os_log_impl(&dword_1830D4000, v15, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] ", buf, 0x48u);

          uint64_t v6 = v65;
        }
LABEL_26:

        goto LABEL_27;
      }
      if ((v11[67] & 0x20) != 0)
      {
LABEL_27:
        if (v11[30] == 5)
        {
          if (gLogDatapath && (nw_endpoint_handler_get_logging_disabled(v11) & 1) == 0)
          {
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
            }
            uint64_t v28 = (id)gconnectionLogObj;
            if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
            {
              BOOL v29 = nw_endpoint_handler_get_id_string(v11);
              uint64_t v30 = nw_endpoint_handler_dry_run_string(v11);
              nw_endpoint_t v31 = nw_endpoint_handler_copy_endpoint(v11);
              int v32 = v6;
              uint64_t v33 = nw_endpoint_get_logging_description(v31);
              BOOL v34 = nw_endpoint_handler_state_string(v11);
              id v35 = nw_endpoint_handler_mode_string(v11);
              id v36 = nw_endpoint_handler_copy_current_path(v11);
              *(_DWORD *)int buf = 136447746;
              uint64_t v69 = "nw_endpoint_handler_cancel";
              __int16 v70 = 2082;
              uint64_t v71 = (void *)v29;
              __int16 v72 = 2082;
              uint64_t v73 = v30;
              __int16 v74 = 2082;
              uint64_t v75 = v33;
              __int16 v76 = 2082;
              os_log_type_t v77 = v34;
              __int16 v78 = 2082;
              char v79 = v35;
              __int16 v80 = 2114;
              id v81 = v36;
              _os_log_impl(&dword_1830D4000, v28, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Handler already cancelled, ignoring cancel", buf, 0x48u);

              uint64_t v6 = v32;
            }
          }
        }
        else
        {
          if (a3)
          {
            v11[30] = 4;
            v11[20] = 458753;
            nw_endpoint_handler_report(v11, 0, (_WORD *)v11 + 40, 0);
          }
          uint64_t v37 = *((void *)v11 + 17);
          if (v37)
          {
            nw_queue_cancel_source(v37);
            *((void *)v11 + 17) = 0;
          }
          uint64_t v38 = (void *)*((void *)v11 + 9);
          *((void *)v11 + 9) = 0;

          os_log_type_t v39 = (void *)v6[4];
          v6[4] = 0;

          os_unfair_lock_lock((os_unfair_lock_t)v11 + 28);
          os_log_type_t v40 = (void *)*((void *)v11 + 8);
          *((void *)v11 + 8) = 0;

          os_unfair_lock_unlock((os_unfair_lock_t)v11 + 28);
          os_log_type_t v41 = (void *)*((void *)v11 + 7);
          if (v41)
          {
            nw_association_unregister(v41, v11);
            int v42 = (void *)*((void *)v11 + 7);
            *((void *)v11 + 7) = 0;
          }
          __int16 v43 = (void *)*((void *)v11 + 11);
          *((void *)v11 + 11) = 0;

          unsigned int v44 = (void *)*((void *)v11 + 12);
          *((void *)v11 + 12) = 0;

          uint64_t v45 = (void *)*((void *)v11 + 13);
          *((void *)v11 + 13) = 0;

          v11[30] = 5;
          id v46 = *((id *)v11 + 31);
          [v46 cancelWithHandler:v11 forced:a2];

          if (v11[29] == 2) {
            nw_endpoint_handler_cancel_read_write_requests(v11, 0);
          }
        }
        goto LABEL_43;
      }
    }
    else
    {

      if ((v11[67] & 0x20) != 0) {
        goto LABEL_27;
      }
    }
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
    }
    uint64_t v15 = (id)gconnectionLogObj;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      if (v11[67]) {
        os_log_type_t v16 = "dry-run ";
      }
      else {
        os_log_type_t v16 = "";
      }
      id v64 = v6;
      nw_endpoint_t v17 = nw_endpoint_handler_copy_endpoint(v11);
      uint64_t v18 = nw_endpoint_get_logging_description(v17);
      int v62 = a3;
      uint64_t v19 = v11[30];
      id v20 = v18;
      if (v19 > 5) {
        os_log_type_t v21 = "unknown-state";
      }
      else {
        os_log_type_t v21 = off_1E523FB38[v19];
      }
      uint64_t v22 = v11;
      uint64_t v23 = (os_unfair_lock_s *)v22;
      unsigned int v61 = a2;
      uint64_t v24 = "path";
      switch(v22[29])
      {
        case 0u:
          break;
        case 1u:
          uint64_t v24 = "resolver";
          break;
        case 2u:
          uint64_t v24 = nw_endpoint_flow_mode_string(*((void **)v22 + 31));
          break;
        case 3u:
          uint64_t v24 = "proxy";
          break;
        case 4u:
          uint64_t v24 = "fallback";
          break;
        case 5u:
          uint64_t v24 = "transform";
          break;
        default:
          uint64_t v24 = "unknown-mode";
          break;
      }

      char v25 = v23 + 28;
      id v26 = v23;
      os_unfair_lock_lock(v23 + 28);
      id v27 = v26[8];
      os_unfair_lock_unlock(v25);

      *(_DWORD *)int buf = 136447746;
      uint64_t v69 = "nw_endpoint_handler_cancel";
      __int16 v70 = 2082;
      uint64_t v71 = v11 + 42;
      __int16 v72 = 2082;
      uint64_t v73 = v16;
      __int16 v74 = 2082;
      uint64_t v75 = v20;
      __int16 v76 = 2082;
      os_log_type_t v77 = v21;
      __int16 v78 = 2082;
      char v79 = v24;
      __int16 v80 = 2114;
      id v81 = v27;
      _os_log_impl(&dword_1830D4000, v15, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] ", buf, 0x48u);

      uint64_t v6 = v64;
      a2 = v61;
      a3 = v62;
    }
    goto LABEL_26;
  }
  unint64_t v47 = __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  uint64_t v69 = "nw_endpoint_handler_cancel";
  unint64_t v48 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v66 = 0;
  if (__nwlog_fault(v48, &type, &v66))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v49 = __nwlog_obj();
      os_log_type_t v50 = type;
      if (os_log_type_enabled(v49, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v69 = "nw_endpoint_handler_cancel";
        _os_log_impl(&dword_1830D4000, v49, v50, "%{public}s called with null handler", buf, 0xCu);
      }
    }
    else if (v66)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v49 = __nwlog_obj();
      os_log_type_t v58 = type;
      BOOL v59 = os_log_type_enabled(v49, type);
      if (backtrace_string)
      {
        if (v59)
        {
          *(_DWORD *)int buf = 136446466;
          uint64_t v69 = "nw_endpoint_handler_cancel";
          __int16 v70 = 2082;
          uint64_t v71 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v49, v58, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_65;
      }
      if (v59)
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v69 = "nw_endpoint_handler_cancel";
        _os_log_impl(&dword_1830D4000, v49, v58, "%{public}s called with null handler, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v49 = __nwlog_obj();
      os_log_type_t v60 = type;
      if (os_log_type_enabled(v49, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v69 = "nw_endpoint_handler_cancel";
        _os_log_impl(&dword_1830D4000, v49, v60, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_65:
  if (v48) {
    free(v48);
  }
LABEL_43:
}

void sub_18324CA20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_association_unregister(void *a1, void *a2)
{
  uint64_t v91 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (!v3)
  {
    __int16 v70 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v84 = "nw_association_unregister";
    uint64_t v38 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v81 = 0;
    if (__nwlog_fault(v38, &type, &v81))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v39 = __nwlog_obj();
        os_log_type_t v71 = type;
        if (os_log_type_enabled(v39, type))
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v84 = "nw_association_unregister";
          _os_log_impl(&dword_1830D4000, v39, v71, "%{public}s called with null association", buf, 0xCu);
        }
        goto LABEL_119;
      }
      if (!v81)
      {
        os_log_type_t v39 = __nwlog_obj();
        os_log_type_t v79 = type;
        if (os_log_type_enabled(v39, type))
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v84 = "nw_association_unregister";
          _os_log_impl(&dword_1830D4000, v39, v79, "%{public}s called with null association, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_119;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v39 = __nwlog_obj();
      os_log_type_t v75 = type;
      BOOL v76 = os_log_type_enabled(v39, type);
      if (!backtrace_string)
      {
        if (v76)
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v84 = "nw_association_unregister";
          _os_log_impl(&dword_1830D4000, v39, v75, "%{public}s called with null association, no backtrace", buf, 0xCu);
        }
        goto LABEL_119;
      }
      if (v76)
      {
        *(_DWORD *)int buf = 136446466;
        os_log_type_t v84 = "nw_association_unregister";
        __int16 v85 = 2082;
        os_log_type_t v86 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v39, v75, "%{public}s called with null association, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
    goto LABEL_120;
  }
  if (!v4)
  {
    __int16 v72 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v84 = "nw_association_unregister";
    uint64_t v38 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v81 = 0;
    if (__nwlog_fault(v38, &type, &v81))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v39 = __nwlog_obj();
        os_log_type_t v73 = type;
        if (os_log_type_enabled(v39, type))
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v84 = "nw_association_unregister";
          _os_log_impl(&dword_1830D4000, v39, v73, "%{public}s called with null handle", buf, 0xCu);
        }
        goto LABEL_119;
      }
      if (!v81)
      {
        os_log_type_t v39 = __nwlog_obj();
        os_log_type_t v80 = type;
        if (os_log_type_enabled(v39, type))
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v84 = "nw_association_unregister";
          _os_log_impl(&dword_1830D4000, v39, v80, "%{public}s called with null handle, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_119;
      }
      unint64_t v47 = (char *)__nw_create_backtrace_string();
      os_log_type_t v39 = __nwlog_obj();
      os_log_type_t v77 = type;
      BOOL v78 = os_log_type_enabled(v39, type);
      if (!v47)
      {
        if (v78)
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v84 = "nw_association_unregister";
          _os_log_impl(&dword_1830D4000, v39, v77, "%{public}s called with null handle, no backtrace", buf, 0xCu);
        }
        goto LABEL_119;
      }
      if (v78)
      {
        *(_DWORD *)int buf = 136446466;
        os_log_type_t v84 = "nw_association_unregister";
        __int16 v85 = 2082;
        os_log_type_t v86 = v47;
        _os_log_impl(&dword_1830D4000, v39, v77, "%{public}s called with null handle, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_85;
    }
    goto LABEL_120;
  }
  id v6 = nw_path_parameters_copy_context(*((void **)v3 + 2));
  nw_context_assert_queue(v6);

  uint64_t v7 = *((void *)v3 + 6);
  if (v7)
  {
    BOOL node = nw_hash_table_get_node(v7, (uint64_t)v5, 0);
    if (node)
    {
      BOOL v9 = node;
      if (!nw_hash_table_remove_node(*((void *)v3 + 6), node)
        && !nw_path_parameters_get_logging_disabled(*((void *)v3 + 2)))
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        id v10 = (id)gconnectionLogObj;
        logging_description = nw_endpoint_get_logging_description(*((void **)v3 + 1));
        *(_DWORD *)int buf = 136446722;
        os_log_type_t v84 = "nw_association_unregister";
        __int16 v85 = 2082;
        os_log_type_t v86 = (void *)logging_description;
        __int16 v87 = 2048;
        uint64_t v88 = v9;
        uint64_t v12 = (char *)_os_log_send_and_compose_impl();

        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v81 = 0;
        if (__nwlog_fault(v12, &type, &v81))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
            }
            int v13 = (id)gconnectionLogObj;
            os_log_type_t v14 = type;
            if (os_log_type_enabled(v13, type))
            {
              uint64_t v15 = nw_endpoint_get_logging_description(*((void **)v3 + 1));
              *(_DWORD *)int buf = 136446722;
              os_log_type_t v84 = "nw_association_unregister";
              __int16 v85 = 2082;
              os_log_type_t v86 = (void *)v15;
              __int16 v87 = 2048;
              uint64_t v88 = v9;
              _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s <nw_association %{public}s> failed to remove connected flow for node %p", buf, 0x20u);
            }
          }
          else if (v81)
          {
            os_log_type_t v16 = __nw_create_backtrace_string();
            if (v16)
            {
              nw_endpoint_t v17 = (char *)v16;
              if (__nwlog_connection_log::onceToken != -1) {
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
              }
              uint64_t v18 = (id)gconnectionLogObj;
              os_log_type_t v19 = type;
              if (os_log_type_enabled(v18, type))
              {
                id v20 = nw_endpoint_get_logging_description(*((void **)v3 + 1));
                *(_DWORD *)int buf = 136446978;
                os_log_type_t v84 = "nw_association_unregister";
                __int16 v85 = 2082;
                os_log_type_t v86 = (void *)v20;
                __int16 v87 = 2048;
                uint64_t v88 = v9;
                __int16 v89 = 2082;
                os_log_type_t v90 = v17;
                _os_log_impl(&dword_1830D4000, v18, v19, "%{public}s <nw_association %{public}s> failed to remove connected flow for node %p, dumping backtrace:%{public}s", buf, 0x2Au);
              }

              free(v17);
              if (!v12) {
                goto LABEL_36;
              }
              goto LABEL_35;
            }
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
            }
            int v13 = (id)gconnectionLogObj;
            os_log_type_t v23 = type;
            if (os_log_type_enabled(v13, type))
            {
              uint64_t v24 = nw_endpoint_get_logging_description(*((void **)v3 + 1));
              *(_DWORD *)int buf = 136446722;
              os_log_type_t v84 = "nw_association_unregister";
              __int16 v85 = 2082;
              os_log_type_t v86 = (void *)v24;
              __int16 v87 = 2048;
              uint64_t v88 = v9;
              _os_log_impl(&dword_1830D4000, v13, v23, "%{public}s <nw_association %{public}s> failed to remove connected flow for node %p, no backtrace", buf, 0x20u);
            }
          }
          else
          {
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
            }
            int v13 = (id)gconnectionLogObj;
            os_log_type_t v21 = type;
            if (os_log_type_enabled(v13, type))
            {
              uint64_t v22 = nw_endpoint_get_logging_description(*((void **)v3 + 1));
              *(_DWORD *)int buf = 136446722;
              os_log_type_t v84 = "nw_association_unregister";
              __int16 v85 = 2082;
              os_log_type_t v86 = (void *)v22;
              __int16 v87 = 2048;
              uint64_t v88 = v9;
              _os_log_impl(&dword_1830D4000, v13, v21, "%{public}s <nw_association %{public}s> failed to remove connected flow for node %p, backtrace limit exceeded", buf, 0x20u);
            }
          }
        }
        if (v12) {
LABEL_35:
        }
          free(v12);
      }
    }
  }
LABEL_36:
  uint64_t v25 = *((void *)v3 + 5);
  if (!v25)
  {
    if (nw_path_parameters_get_logging_disabled(*((void *)v3 + 2))) {
      goto LABEL_130;
    }
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
    }
    id v36 = (id)gconnectionLogObj;
    uint64_t v37 = nw_endpoint_get_logging_description(*((void **)v3 + 1));
    *(_DWORD *)int buf = 136446466;
    os_log_type_t v84 = "nw_association_unregister";
    __int16 v85 = 2082;
    os_log_type_t v86 = (void *)v37;
    uint64_t v38 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v81 = 0;
    if (!__nwlog_fault(v38, &type, &v81)) {
      goto LABEL_120;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      os_log_type_t v39 = (id)gconnectionLogObj;
      os_log_type_t v40 = type;
      if (os_log_type_enabled(v39, type))
      {
        os_log_type_t v41 = nw_endpoint_get_logging_description(*((void **)v3 + 1));
        *(_DWORD *)int buf = 136446466;
        os_log_type_t v84 = "nw_association_unregister";
        __int16 v85 = 2082;
        os_log_type_t v86 = (void *)v41;
        _os_log_impl(&dword_1830D4000, v39, v40, "%{public}s <nw_association %{public}s> does not have a handle hash table", buf, 0x16u);
      }
      goto LABEL_119;
    }
    if (!v81)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      os_log_type_t v39 = (id)gconnectionLogObj;
      os_log_type_t v58 = type;
      if (os_log_type_enabled(v39, type))
      {
        BOOL v59 = nw_endpoint_get_logging_description(*((void **)v3 + 1));
        *(_DWORD *)int buf = 136446466;
        os_log_type_t v84 = "nw_association_unregister";
        __int16 v85 = 2082;
        os_log_type_t v86 = (void *)v59;
        _os_log_impl(&dword_1830D4000, v39, v58, "%{public}s <nw_association %{public}s> does not have a handle hash table, backtrace limit exceeded", buf, 0x16u);
      }
      goto LABEL_119;
    }
    id v46 = __nw_create_backtrace_string();
    if (!v46)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      os_log_type_t v39 = (id)gconnectionLogObj;
      os_log_type_t v60 = type;
      if (os_log_type_enabled(v39, type))
      {
        unsigned int v61 = nw_endpoint_get_logging_description(*((void **)v3 + 1));
        *(_DWORD *)int buf = 136446466;
        os_log_type_t v84 = "nw_association_unregister";
        __int16 v85 = 2082;
        os_log_type_t v86 = (void *)v61;
        _os_log_impl(&dword_1830D4000, v39, v60, "%{public}s <nw_association %{public}s> does not have a handle hash table, no backtrace", buf, 0x16u);
      }
      goto LABEL_119;
    }
    unint64_t v47 = (char *)v46;
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
    }
    os_log_type_t v39 = (id)gconnectionLogObj;
    os_log_type_t v48 = type;
    if (os_log_type_enabled(v39, type))
    {
      BOOL v49 = nw_endpoint_get_logging_description(*((void **)v3 + 1));
      *(_DWORD *)int buf = 136446722;
      os_log_type_t v84 = "nw_association_unregister";
      __int16 v85 = 2082;
      os_log_type_t v86 = (void *)v49;
      __int16 v87 = 2082;
      uint64_t v88 = (uint64_t)v47;
      _os_log_impl(&dword_1830D4000, v39, v48, "%{public}s <nw_association %{public}s> does not have a handle hash table, dumping backtrace:%{public}s", buf, 0x20u);
    }
    goto LABEL_85;
  }
  uint64_t v26 = nw_hash_table_get_node(v25, (uint64_t)v5, 0);
  if (v26)
  {
    uint64_t v27 = v26;
    uint64_t v28 = *(void **)(v26 + 32);
    *(void *)(v26 + 32) = 0;

    if (*(unsigned char *)(v27 + 40))
    {
      int v29 = *((_DWORD *)v3 + 18);
      if (v29) {
        *((_DWORD *)v3 + 18) = v29 - 1;
      }
    }
    if (nw_hash_table_remove_node(*((void *)v3 + 5), v27)
      || nw_path_parameters_get_logging_disabled(*((void *)v3 + 2)))
    {
      goto LABEL_129;
    }
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
    }
    id v30 = (id)gconnectionLogObj;
    nw_endpoint_t v31 = nw_endpoint_get_logging_description(*((void **)v3 + 1));
    *(_DWORD *)int buf = 136446722;
    os_log_type_t v84 = "nw_association_unregister";
    __int16 v85 = 2082;
    os_log_type_t v86 = (void *)v31;
    __int16 v87 = 2048;
    uint64_t v88 = v27;
    int v32 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v81 = 0;
    if (__nwlog_fault(v32, &type, &v81))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        uint64_t v33 = (id)gconnectionLogObj;
        os_log_type_t v34 = type;
        if (os_log_type_enabled(v33, type))
        {
          id v35 = nw_endpoint_get_logging_description(*((void **)v3 + 1));
          *(_DWORD *)int buf = 136446722;
          os_log_type_t v84 = "nw_association_unregister";
          __int16 v85 = 2082;
          os_log_type_t v86 = (void *)v35;
          __int16 v87 = 2048;
          uint64_t v88 = v27;
          _os_log_impl(&dword_1830D4000, v33, v34, "%{public}s <nw_association %{public}s> failed to remove handle for node %p", buf, 0x20u);
        }
      }
      else if (v81)
      {
        unsigned int v53 = __nw_create_backtrace_string();
        if (v53)
        {
          uint64_t v54 = (char *)v53;
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          uint64_t v55 = (id)gconnectionLogObj;
          os_log_type_t v56 = type;
          if (os_log_type_enabled(v55, type))
          {
            unint64_t v57 = nw_endpoint_get_logging_description(*((void **)v3 + 1));
            *(_DWORD *)int buf = 136446978;
            os_log_type_t v84 = "nw_association_unregister";
            __int16 v85 = 2082;
            os_log_type_t v86 = (void *)v57;
            __int16 v87 = 2048;
            uint64_t v88 = v27;
            __int16 v89 = 2082;
            os_log_type_t v90 = v54;
            _os_log_impl(&dword_1830D4000, v55, v56, "%{public}s <nw_association %{public}s> failed to remove handle for node %p, dumping backtrace:%{public}s", buf, 0x2Au);
          }

          free(v54);
          if (!v32) {
            goto LABEL_129;
          }
          goto LABEL_128;
        }
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        uint64_t v33 = (id)gconnectionLogObj;
        os_log_type_t v68 = type;
        if (os_log_type_enabled(v33, type))
        {
          uint64_t v69 = nw_endpoint_get_logging_description(*((void **)v3 + 1));
          *(_DWORD *)int buf = 136446722;
          os_log_type_t v84 = "nw_association_unregister";
          __int16 v85 = 2082;
          os_log_type_t v86 = (void *)v69;
          __int16 v87 = 2048;
          uint64_t v88 = v27;
          _os_log_impl(&dword_1830D4000, v33, v68, "%{public}s <nw_association %{public}s> failed to remove handle for node %p, no backtrace", buf, 0x20u);
        }
      }
      else
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        uint64_t v33 = (id)gconnectionLogObj;
        os_log_type_t v64 = type;
        if (os_log_type_enabled(v33, type))
        {
          uint64_t v65 = nw_endpoint_get_logging_description(*((void **)v3 + 1));
          *(_DWORD *)int buf = 136446722;
          os_log_type_t v84 = "nw_association_unregister";
          __int16 v85 = 2082;
          os_log_type_t v86 = (void *)v65;
          __int16 v87 = 2048;
          uint64_t v88 = v27;
          _os_log_impl(&dword_1830D4000, v33, v64, "%{public}s <nw_association %{public}s> failed to remove handle for node %p, backtrace limit exceeded", buf, 0x20u);
        }
      }
    }
    if (!v32)
    {
LABEL_129:
      nw_association_schedule_deactivation((NWConcrete_nw_association *)v3);
      goto LABEL_130;
    }
LABEL_128:
    free(v32);
    goto LABEL_129;
  }
  if (nw_path_parameters_get_logging_disabled(*((void *)v3 + 2))) {
    goto LABEL_130;
  }
  if (__nwlog_connection_log::onceToken != -1) {
    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
  }
  id v42 = (id)gconnectionLogObj;
  __int16 v43 = nw_endpoint_get_logging_description(*((void **)v3 + 1));
  *(_DWORD *)int buf = 136446722;
  os_log_type_t v84 = "nw_association_unregister";
  __int16 v85 = 2082;
  os_log_type_t v86 = (void *)v43;
  __int16 v87 = 2048;
  uint64_t v88 = (uint64_t)v5;
  uint64_t v38 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v81 = 0;
  if (__nwlog_fault(v38, &type, &v81))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      os_log_type_t v39 = (id)gconnectionLogObj;
      os_log_type_t v44 = type;
      if (os_log_type_enabled(v39, type))
      {
        uint64_t v45 = nw_endpoint_get_logging_description(*((void **)v3 + 1));
        *(_DWORD *)int buf = 136446722;
        os_log_type_t v84 = "nw_association_unregister";
        __int16 v85 = 2082;
        os_log_type_t v86 = (void *)v45;
        __int16 v87 = 2048;
        uint64_t v88 = (uint64_t)v5;
        _os_log_impl(&dword_1830D4000, v39, v44, "%{public}s <nw_association %{public}s> does not have handle %p registered", buf, 0x20u);
      }
LABEL_119:

      goto LABEL_120;
    }
    if (!v81)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      os_log_type_t v39 = (id)gconnectionLogObj;
      os_log_type_t v62 = type;
      if (os_log_type_enabled(v39, type))
      {
        nw_endpoint_t v63 = nw_endpoint_get_logging_description(*((void **)v3 + 1));
        *(_DWORD *)int buf = 136446722;
        os_log_type_t v84 = "nw_association_unregister";
        __int16 v85 = 2082;
        os_log_type_t v86 = (void *)v63;
        __int16 v87 = 2048;
        uint64_t v88 = (uint64_t)v5;
        _os_log_impl(&dword_1830D4000, v39, v62, "%{public}s <nw_association %{public}s> does not have handle %p registered, backtrace limit exceeded", buf, 0x20u);
      }
      goto LABEL_119;
    }
    os_log_type_t v50 = __nw_create_backtrace_string();
    if (!v50)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      os_log_type_t v39 = (id)gconnectionLogObj;
      os_log_type_t v66 = type;
      if (os_log_type_enabled(v39, type))
      {
        uint64_t v67 = nw_endpoint_get_logging_description(*((void **)v3 + 1));
        *(_DWORD *)int buf = 136446722;
        os_log_type_t v84 = "nw_association_unregister";
        __int16 v85 = 2082;
        os_log_type_t v86 = (void *)v67;
        __int16 v87 = 2048;
        uint64_t v88 = (uint64_t)v5;
        _os_log_impl(&dword_1830D4000, v39, v66, "%{public}s <nw_association %{public}s> does not have handle %p registered, no backtrace", buf, 0x20u);
      }
      goto LABEL_119;
    }
    unint64_t v47 = (char *)v50;
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
    }
    os_log_type_t v39 = (id)gconnectionLogObj;
    os_log_type_t v51 = type;
    if (os_log_type_enabled(v39, type))
    {
      unsigned int v52 = nw_endpoint_get_logging_description(*((void **)v3 + 1));
      *(_DWORD *)int buf = 136446978;
      os_log_type_t v84 = "nw_association_unregister";
      __int16 v85 = 2082;
      os_log_type_t v86 = (void *)v52;
      __int16 v87 = 2048;
      uint64_t v88 = (uint64_t)v5;
      __int16 v89 = 2082;
      os_log_type_t v90 = v47;
      _os_log_impl(&dword_1830D4000, v39, v51, "%{public}s <nw_association %{public}s> does not have handle %p registered, dumping backtrace:%{public}s", buf, 0x2Au);
    }
LABEL_85:

    free(v47);
    if (!v38) {
      goto LABEL_130;
    }
    goto LABEL_121;
  }
LABEL_120:
  if (v38) {
LABEL_121:
  }
    free(v38);
LABEL_130:
}

void sub_18324DD7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_hash_table_remove_node(uint64_t a1, uint64_t a2)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v33 = "nw_hash_table_remove_node";
    uint64_t v12 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v30 = 0;
    if (!__nwlog_fault(v12, &type, &v30)) {
      goto LABEL_53;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (!os_log_type_enabled(v13, type)) {
        goto LABEL_53;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v33 = "nw_hash_table_remove_node";
      uint64_t v15 = "%{public}s called with null table";
    }
    else if (v30)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      BOOL v26 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v26)
        {
          *(_DWORD *)int buf = 136446466;
          uint64_t v33 = "nw_hash_table_remove_node";
          __int16 v34 = 2082;
          id v35 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s called with null table, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_53;
      }
      if (!v26)
      {
LABEL_53:
        if (v12) {
          free(v12);
        }
        return 0;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v33 = "nw_hash_table_remove_node";
      uint64_t v15 = "%{public}s called with null table, no backtrace";
    }
    else
    {
      int v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (!os_log_type_enabled(v13, type)) {
        goto LABEL_53;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v33 = "nw_hash_table_remove_node";
      uint64_t v15 = "%{public}s called with null table, backtrace limit exceeded";
    }
    _os_log_impl(&dword_1830D4000, v13, v14, v15, buf, 0xCu);
    goto LABEL_53;
  }
  if (*(_DWORD *)(a1 + 32))
  {
    int v4 = *(_DWORD *)(a1 + 48);
    if ((v4 & 2) == 0) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  os_log_type_t v16 = __nwlog_obj();
  os_log_type_enabled(v16, OS_LOG_TYPE_ERROR);
  *(_DWORD *)int buf = 136446210;
  uint64_t v33 = "nw_hash_table_lock";
  nw_endpoint_t v17 = (void *)_os_log_send_and_compose_impl();
  BOOL result = __nwlog_abort((uint64_t)v17);
  if (result) {
    goto LABEL_63;
  }
  free(v17);
  int v4 = *(_DWORD *)(a1 + 48);
  if ((v4 & 2) != 0)
  {
LABEL_4:
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 52));
    int v4 = *(_DWORD *)(a1 + 48);
  }
LABEL_5:
  if ((v4 & 1) == 0)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v33 = "nw_hash_table_remove_node";
    uint64_t v18 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v30 = 0;
    if (!__nwlog_fault(v18, &type, &v30)) {
      goto LABEL_58;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v19 = __nwlog_obj();
      os_log_type_t v20 = type;
      if (!os_log_type_enabled(v19, type)) {
        goto LABEL_58;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v33 = "nw_hash_table_remove_node";
      os_log_type_t v21 = "%{public}s called with invalid hash table";
    }
    else if (v30)
    {
      uint64_t v27 = (char *)__nw_create_backtrace_string();
      os_log_type_t v19 = __nwlog_obj();
      os_log_type_t v20 = type;
      BOOL v28 = os_log_type_enabled(v19, type);
      if (v27)
      {
        if (v28)
        {
          *(_DWORD *)int buf = 136446466;
          uint64_t v33 = "nw_hash_table_remove_node";
          __int16 v34 = 2082;
          id v35 = v27;
          _os_log_impl(&dword_1830D4000, v19, v20, "%{public}s called with invalid hash table, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v27);
LABEL_58:
        if (v18) {
          free(v18);
        }
        if ((*(unsigned char *)(a1 + 48) & 2) != 0)
        {
          os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 52));
          return 0;
        }
        return 0;
      }
      if (!v28) {
        goto LABEL_58;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v33 = "nw_hash_table_remove_node";
      os_log_type_t v21 = "%{public}s called with invalid hash table, no backtrace";
    }
    else
    {
      os_log_type_t v19 = __nwlog_obj();
      os_log_type_t v20 = type;
      if (!os_log_type_enabled(v19, type)) {
        goto LABEL_58;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v33 = "nw_hash_table_remove_node";
      os_log_type_t v21 = "%{public}s called with invalid hash table, backtrace limit exceeded";
    }
    _os_log_impl(&dword_1830D4000, v19, v20, v21, buf, 0xCu);
    goto LABEL_58;
  }
  if (*(unsigned char *)(a2 + 30) != 1)
  {
    uint64_t v22 = __nwlog_obj();
    os_log_type_enabled(v22, OS_LOG_TYPE_ERROR);
    unint64_t v23 = *(unsigned __int8 *)(a2 + 30);
    if (v23 > 3) {
      uint64_t v24 = "invalid_state";
    }
    else {
      uint64_t v24 = off_1E5247AE8[v23];
    }
    *(_DWORD *)int buf = 136446466;
    uint64_t v33 = "nw_hash_table_remove_node";
    __int16 v34 = 2082;
    id v35 = (void *)v24;
    int v29 = (void *)_os_log_send_and_compose_impl();
    BOOL result = __nwlog_abort((uint64_t)v29);
    if (result) {
      goto LABEL_63;
    }
    free(v29);
    if (*(unsigned char *)(a2 + 30) != 1)
    {
      uint64_t v11 = 0;
      if ((*(unsigned char *)(a1 + 48) & 2) == 0) {
        return v11;
      }
      goto LABEL_16;
    }
  }
  uint64_t v5 = a1 + 16 * *(unsigned int *)(a2 + 24) + 56;
  *(unsigned char *)(a2 + 30) = 2;
  id v6 = *(void (**)(void))(a1 + 24);
  if (v6)
  {
    v6(*(void *)(a2 + 16));
    *(void *)(a2 + 16) = 0;
  }
  --*(_DWORD *)(a1 + 40);
  uint64_t v7 = *(void **)(a2 + 8);
  if (v7 && *v7 == a2)
  {
LABEL_13:
    if (!*(_WORD *)(a2 + 28)) {
      nw_hash_node_free(v5, (void *)a2);
    }
    uint64_t v11 = 1;
    if ((*(unsigned char *)(a1 + 48) & 2) == 0) {
      return v11;
    }
LABEL_16:
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 52));
    return v11;
  }
  uint64_t v8 = pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init(v8);
  os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
  *(_DWORD *)int buf = 136446210;
  uint64_t v33 = "nw_hash_table_remove_node_internal";
  BOOL v9 = (void *)_os_log_send_and_compose_impl();
  BOOL result = __nwlog_abort((uint64_t)v9);
  if (!result)
  {
    free(v9);
    goto LABEL_13;
  }
LABEL_63:
  __break(1u);
  return result;
}

void nw_hash_node_free(uint64_t a1, void *a2)
{
  if (*((unsigned char *)a2 + 30) == 2)
  {
    int v4 = (void **)a2[1];
    if (!v4)
    {
LABEL_11:
      BOOL v9 = __nwlog_obj();
      os_log_type_enabled(v9, OS_LOG_TYPE_ERROR);
      id v10 = (void *)_os_log_send_and_compose_impl();
      if (__nwlog_abort((uint64_t)v10)) {
        goto LABEL_15;
      }
      free(v10);
      if (!*((_WORD *)a2 + 14)) {
        goto LABEL_5;
      }
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v7 = __nwlog_obj();
    os_log_type_enabled(v7, OS_LOG_TYPE_ERROR);
    uint64_t v8 = (void *)_os_log_send_and_compose_impl();
    if (__nwlog_abort((uint64_t)v8)) {
      goto LABEL_15;
    }
    free(v8);
    int v4 = (void **)a2[1];
    if (!v4) {
      goto LABEL_11;
    }
  }
  if (*v4 != a2) {
    goto LABEL_11;
  }
  if (*((_WORD *)a2 + 14))
  {
LABEL_13:
    uint64_t v11 = __nwlog_obj();
    os_log_type_enabled(v11, OS_LOG_TYPE_ERROR);
    uint64_t v12 = (void *)_os_log_send_and_compose_impl();
    if (!__nwlog_abort((uint64_t)v12))
    {
      free(v12);
      goto LABEL_5;
    }
LABEL_15:
    __break(1u);
    return;
  }
LABEL_5:
  *((unsigned char *)a2 + 30) = 3;
  uint64_t v5 = *a2;
  id v6 = (void *)a2[1];
  if (*a2)
  {
    *(void *)(v5 + 8) = v6;
    id v6 = (void *)a2[1];
  }
  else
  {
    *(void *)(a1 + 8) = v6;
  }
  void *v6 = v5;
  free(a2);
}

void nw_association_schedule_deactivation(NWConcrete_nw_association *a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  nw_parameters_t v1 = a1;
  uint64_t v2 = (uint64_t *)v1;
  if ((*((unsigned char *)v1 + 76) & 1) == 0)
  {
    handles = v1->handles;
    if (!handles || !*((_DWORD *)handles + 10))
    {
      id v4 = nw_path_parameters_copy_context(v1->path_parameters);
      v12[0] = MEMORY[0x1E4F143A8];
      v12[1] = 3221225472;
      v12[2] = ___ZL36nw_association_schedule_deactivationP25NWConcrete_nw_association_block_invoke;
      v12[3] = &unk_1E524B9A0;
      id v5 = v4;
      id v13 = v5;
      id v6 = v2;
      os_log_type_t v14 = v6;
      v6[8] = nw_queue_context_create_source(v5, 2, 3, 0, v12, 0);
      uint64_t association_dormant_delay = nw_context_get_association_dormant_delay(v5);
      if (!association_dormant_delay) {
        uint64_t association_dormant_delay = 1000
      }
                                  * networkd_settings_get_int64_with_default((const char *)nw_setting_association_dormant_delay, 10);
      uint64_t v8 = v6[8];
      dispatch_time_t v9 = dispatch_time(0x8000000000000000, 1000000 * association_dormant_delay);
      nw_queue_set_timer_values(v8, v9, 0xFFFFFFFFFFFFFFFFLL, 0x989680uLL);
      nw_queue_activate_source(v6[8]);
      if (!nw_path_parameters_get_logging_disabled(v2[2]))
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        id v10 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
        {
          logging_description = nw_endpoint_get_logging_description((void *)v6[1]);
          *(_DWORD *)int buf = 136446722;
          os_log_type_t v16 = "nw_association_schedule_deactivation";
          __int16 v17 = 2082;
          uint64_t v18 = logging_description;
          __int16 v19 = 2048;
          uint64_t v20 = association_dormant_delay;
          _os_log_impl(&dword_1830D4000, v10, OS_LOG_TYPE_INFO, "%{public}s <nw_association %{public}s> will become dormant after %lldms of inactivity", buf, 0x20u);
        }
      }
    }
  }
}

void sub_18324E994(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void nw_queue_set_timer_values(uint64_t a1, dispatch_time_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (*(void *)a1)
    {
      id v4 = *(NSObject **)a1;
      dispatch_source_set_timer(v4, a2, a3, a4);
    }
    else
    {
      *(void *)(a1 + 32) = a2;
      *(void *)(a1 + 40) = a3;
      if (*(unsigned char *)(a1 + 48) && *(unsigned char *)(a1 + 49))
      {
        nw_queue_source_run_timer(a1);
      }
    }
    return;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  uint64_t v15 = "nw_queue_set_timer_values";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (__nwlog_fault(v6, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v15 = "nw_queue_set_timer_values";
        dispatch_time_t v9 = "%{public}s called with null source";
LABEL_24:
        _os_log_impl(&dword_1830D4000, v7, v8, v9, buf, 0xCu);
      }
    }
    else
    {
      if (v12)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        uint64_t v7 = __nwlog_obj();
        os_log_type_t v8 = type;
        BOOL v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)int buf = 136446466;
            uint64_t v15 = "nw_queue_set_timer_values";
            __int16 v16 = 2082;
            __int16 v17 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null source, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_26;
        }
        if (!v11) {
          goto LABEL_25;
        }
        *(_DWORD *)int buf = 136446210;
        uint64_t v15 = "nw_queue_set_timer_values";
        dispatch_time_t v9 = "%{public}s called with null source, no backtrace";
        goto LABEL_24;
      }
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v15 = "nw_queue_set_timer_values";
        dispatch_time_t v9 = "%{public}s called with null source, backtrace limit exceeded";
        goto LABEL_24;
      }
    }
LABEL_25:
  }
LABEL_26:
  if (v6) {
    free(v6);
  }
}

uint64_t nw_context_get_association_dormant_delay(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = *((void *)v1 + 12);
    goto LABEL_3;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  __int16 v16 = "nw_context_get_association_dormant_delay";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v16 = "nw_context_get_association_dormant_delay";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null context", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          __int16 v16 = "nw_context_get_association_dormant_delay";
          __int16 v17 = 2082;
          uint64_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null context, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v16 = "nw_context_get_association_dormant_delay";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null context, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v16 = "nw_context_get_association_dormant_delay";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null context, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_parameters_get_minimize_logging(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = (v1[100] >> 6) & 1;
    goto LABEL_3;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  __int16 v16 = "nw_parameters_get_minimize_logging";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v16 = "nw_parameters_get_minimize_logging";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          __int16 v16 = "nw_parameters_get_minimize_logging";
          __int16 v17 = 2082;
          uint64_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v16 = "nw_parameters_get_minimize_logging";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v16 = "nw_parameters_get_minimize_logging";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

void ___ZL27nw_connection_cancel_probesP24NWConcrete_nw_connectionb_block_invoke(uint64_t a1)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void *)(v1 + 400);
  if (v2 && *(void *)(v2 + 24) != *(void *)(v2 + 16))
  {
    uint64_t v4 = *(void *)(v1 + 16);
    if (v4 && !nw_path_parameters_get_logging_disabled(*(void *)(v4 + 104)))
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      id v5 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        uint64_t v6 = *(void *)(a1 + 32);
        uint64_t v7 = *(void *)(v6 + 400);
        if (v7) {
          uint64_t v7 = (uint64_t)(*(void *)(v7 + 24) - *(void *)(v7 + 16)) >> 3;
        }
        int v8 = *(_DWORD *)(v6 + 448);
        *(_DWORD *)int buf = 136446722;
        BOOL v28 = "nw_connection_cancel_probes_block_invoke";
        __int16 v29 = 1024;
        int v30 = v8;
        __int16 v31 = 2048;
        uint64_t v32 = v7;
        _os_log_impl(&dword_1830D4000, v5, OS_LOG_TYPE_INFO, "%{public}s [C%u] Waiting on %zu probes before cancelling", buf, 0x1Cu);
      }
    }
    BOOL v9 = nw_array_create();
    os_log_type_t v10 = *(void **)(a1 + 32);
    BOOL v11 = (atomic_uchar *)v10[50];
    v23[0] = MEMORY[0x1E4F143A8];
    v23[1] = 3221225472;
    v23[2] = ___ZL27nw_connection_cancel_probesP24NWConcrete_nw_connectionb_block_invoke_242;
    v23[3] = &unk_1E523DEA0;
    uint64_t v24 = v10;
    os_log_type_t v12 = (id)v9;
    id v25 = v12;
    char v26 = *(unsigned char *)(a1 + 40);
    nw_array_apply(v11, (uint64_t)v23);
    if (v12 && v12[3] != v12[2])
    {
      uint64_t v13 = *(void *)(*(void *)(a1 + 32) + 16);
      if (v13 && !nw_path_parameters_get_logging_disabled(*(void *)(v13 + 104)))
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        os_log_type_t v14 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
        {
          int v15 = *(_DWORD *)(*(void *)(a1 + 32) + 448);
          *(_DWORD *)int buf = 136446466;
          BOOL v28 = "nw_connection_cancel_probes_block_invoke";
          __int16 v29 = 1024;
          int v30 = v15;
          _os_log_impl(&dword_1830D4000, v14, OS_LOG_TYPE_INFO, "%{public}s [C%u] Have probes to remove before cancel", buf, 0x12u);
        }
      }
      v21[0] = MEMORY[0x1E4F143A8];
      v21[1] = 3221225472;
      v21[2] = ___ZL27nw_connection_cancel_probesP24NWConcrete_nw_connectionb_block_invoke_243;
      v21[3] = &unk_1E524AE18;
      id v22 = *(id *)(a1 + 32);
      nw_array_apply((atomic_uchar *)v12, (uint64_t)v21);
    }
    uint64_t v16 = *(void *)(a1 + 32);
    uint64_t v17 = *(void *)(v16 + 400);
    if (!v17 || *(void *)(v17 + 24) == *(void *)(v17 + 16))
    {
      uint64_t v18 = *(void *)(v16 + 16);
      if (v18)
      {
        if (!nw_path_parameters_get_logging_disabled(*(void *)(v18 + 104)))
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          uint64_t v19 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
          {
            int v20 = *(_DWORD *)(*(void *)(a1 + 32) + 448);
            *(_DWORD *)int buf = 136446466;
            BOOL v28 = "nw_connection_cancel_probes_block_invoke_2";
            __int16 v29 = 1024;
            int v30 = v20;
            _os_log_impl(&dword_1830D4000, v19, OS_LOG_TYPE_INFO, "%{public}s [C%u] After removing invalid probes, no probes remain", buf, 0x12u);
          }
        }
      }
    }
  }
}

void ___ZL26nw_connection_cancel_innerP24NWConcrete_nw_connectionb_block_invoke_241(void *a1)
{
  uint64_t v3 = _Block_copy(*(const void **)(a1[4] + 216));
  uint64_t v4 = *(void *)(a1[5] + 8);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;

  objc_storeStrong((id *)(*(void *)(a1[6] + 8) + 40), *(id *)(a1[4] + 408));
  objc_storeStrong((id *)(*(void *)(a1[7] + 8) + 40), *(id *)(a1[4] + 200));
  BOOL is_inline = nw_context_is_inline(*(void **)(a1[4] + 24));
  if (is_inline)
  {
    if (nw_context_copy_implicit_context::onceToken != -1) {
      dispatch_once(&nw_context_copy_implicit_context::onceToken, &__block_literal_global_18);
    }
    id v1 = (id)nw_context_copy_implicit_context::implicit_context;
    BOOL v7 = nw_context_copy_workloop(v1);
  }
  else
  {
    BOOL v7 = nw_context_copy_workloop(*(void **)(a1[4] + 24));
  }
  objc_storeStrong((id *)(*(void *)(a1[8] + 8) + 40), (id)v7);
  if (is_inline)
  {

    BOOL v7 = (BOOL)v1;
  }

  int v8 = _Block_copy(*(const void **)(a1[4] + 208));
  uint64_t v9 = *(void *)(a1[9] + 8);
  os_log_type_t v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v8;

  uint64_t v11 = a1[4];
  os_log_type_t v12 = *(void **)(v11 + 216);
  *(void *)(v11 + 216) = 0;

  uint64_t v13 = a1[4];
  os_log_type_t v14 = *(void **)(v13 + 48);
  *(void *)(v13 + 48) = 0;
}

void sub_18324F6E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL26nw_connection_cancel_innerP24NWConcrete_nw_connectionb_block_invoke_240(uint64_t result)
{
  *(_DWORD *)(*(void *)(result + 32) + 80) = 5;
  return result;
}

void nw_connection_send_stats_report_on_nw_queue(void *a1)
{
  uint64_t v72 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (!v1)
  {
    BOOL v59 = __nwlog_obj();
    LODWORD(buf.u.legacy.statistics_report.bytes_in) = 136446210;
    *(unint64_t *)((char *)&buf.u.nw_connection_report.bytes_in + 4) = (unint64_t)"nw_connection_send_stats"
                                                                                                "_report_on_nw_queue";
    id v22 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    char v66 = 0;
    if (__nwlog_fault(v22, type, &v66))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        unint64_t v23 = __nwlog_obj();
        os_log_type_t v60 = type[0];
        if (os_log_type_enabled(v23, type[0]))
        {
          LODWORD(buf.u.legacy.statistics_report.bytes_in) = 136446210;
          *(unint64_t *)((char *)&buf.u.nw_connection_report.bytes_in + 4) = (unint64_t)"nw_connection_send_stats_report_on_nw_queue";
          _os_log_impl(&dword_1830D4000, v23, v60, "%{public}s called with null connection", (uint8_t *)&buf, 0xCu);
        }
        goto LABEL_79;
      }
      if (!v66)
      {
        unint64_t v23 = __nwlog_obj();
        os_log_type_t v64 = type[0];
        if (os_log_type_enabled(v23, type[0]))
        {
          LODWORD(buf.u.legacy.statistics_report.bytes_in) = 136446210;
          *(unint64_t *)((char *)&buf.u.nw_connection_report.bytes_in + 4) = (unint64_t)"nw_connection_send_stats_report_on_nw_queue";
          _os_log_impl(&dword_1830D4000, v23, v64, "%{public}s called with null connection, backtrace limit exceeded", (uint8_t *)&buf, 0xCu);
        }
        goto LABEL_79;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      unint64_t v23 = __nwlog_obj();
      os_log_type_t v62 = type[0];
      BOOL v63 = os_log_type_enabled(v23, type[0]);
      if (!backtrace_string)
      {
        if (v63)
        {
          LODWORD(buf.u.legacy.statistics_report.bytes_in) = 136446210;
          *(unint64_t *)((char *)&buf.u.nw_connection_report.bytes_in + 4) = (unint64_t)"nw_connection_send_stats_report_on_nw_queue";
          _os_log_impl(&dword_1830D4000, v23, v62, "%{public}s called with null connection, no backtrace", (uint8_t *)&buf, 0xCu);
        }
        goto LABEL_79;
      }
      if (v63)
      {
        LODWORD(buf.u.legacy.statistics_report.bytes_in) = 136446466;
        *(unint64_t *)((char *)&buf.u.nw_connection_report.bytes_in + 4) = (unint64_t)"nw_connection_send_stats_report_on_nw_queue";
        WORD2(buf.u.nw_connection_report.bytes_out) = 2082;
        *(unint64_t *)((char *)&buf.u.nw_connection_report.bytes_out + 6) = (unint64_t)backtrace_string;
        _os_log_impl(&dword_1830D4000, v23, v62, "%{public}s called with null connection, dumping backtrace:%{public}s", (uint8_t *)&buf, 0x16u);
      }

      free(backtrace_string);
    }
LABEL_80:
    if (!v22) {
      goto LABEL_123;
    }
LABEL_81:
    free(v22);
    goto LABEL_123;
  }
  nw_context_assert_queue(v1[3]);
  if ((*((unsigned char *)v2 + 108) & 3) != 1
    || !*((_DWORD *)v2 + 26)
    || (*((unsigned char *)v2 + 109) & 0x40) == 0
    || nw_parameters_get_data_mode(v2[2]) != 2)
  {
LABEL_109:
    if (((*((unsigned char *)v2 + 108) & 0xE4) != 0 || (*((unsigned char *)v2 + 109) & 2) != 0) && (*((unsigned char *)v2 + 108) & 8) == 0)
    {
      bzero(&buf, 0xD60uLL);
      uint64_t v54 = v2[2];
      pid_t v55 = getpid();
      if (nw_parameters_has_delegated_proc_pid(v54, v55) || nw_parameters_has_delegated_proc_uuid(v2[2])) {
        buf.delegated = 1;
      }
      buf.legacy = 0;
      nw_connection_stats_fill_in_nw_report_on_nw_queue((NWConcrete_nw_connection *)v2, (nw_connection_report_s *)&buf);
      nw_connection_send_report_to_symptoms((NWConcrete_nw_connection *)v2, &buf, 0);
      *((unsigned char *)v2 + 108) |= 8u;
      os_log_type_t v56 = v2[2];
      if (v56 && !nw_path_parameters_get_logging_disabled(v56[13]))
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        unint64_t v57 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v57, OS_LOG_TYPE_DEBUG))
        {
          int v58 = *((_DWORD *)v2 + 112);
          *(_DWORD *)os_log_type_t type = 136446466;
          os_log_type_t v68 = "nw_connection_send_stats_report_on_nw_queue";
          __int16 v69 = 1024;
          int v70 = v58;
          _os_log_impl(&dword_1830D4000, v57, OS_LOG_TYPE_DEBUG, "%{public}s [C%u] Sent generic statistics report to symptoms", (uint8_t *)type, 0x12u);
        }
      }
    }
    nw_connection_log_summary_on_nw_queue((NWConcrete_nw_connection *)v2);
    goto LABEL_123;
  }
  uint64_t v3 = (uint64_t)v2[12];
  uint64_t v4 = (uint64_t *)v2[2];
  if (v3)
  {
    pid_t v5 = getpid();
    if (nw_parameters_has_delegated_proc_pid(v4, v5) || nw_parameters_has_delegated_proc_uuid(v2[2])) {
      *(unsigned char *)(v3 + 3416) = 1;
    }
    *(_DWORD *)(v3 + 3408) = *((_DWORD *)v2 + 26);
    uint64_t v6 = nw_endpoint_handler_copy_connected_flow_handler(v2[18]);
    if (v6) {
      nw_connection_stats_fill_in_statistics_report_for_endpoint_on_nw_queue(v2, v6, v3);
    }
    *(unsigned char *)(v3 + 1672) = (*(unsigned char *)(v3 + 208) & 4) != 0;
    BOOL v7 = v2;
    *(_WORD *)os_log_type_t type = 0;
    unsigned int event_milliseconds = nw_connection_get_event_milliseconds(v7, 5, 1, type, 0);
    unsigned int v9 = nw_connection_get_event_milliseconds(v7, 5, 2, type, 0);
    LODWORD(v10) = 0;
    if (event_milliseconds != -1 && v9 != -1)
    {
      unint64_t v10 = v9 - event_milliseconds;
      if (v9 < event_milliseconds)
      {
        if (gLogDatapath)
        {
          uint64_t v65 = __nwlog_obj();
          if (os_log_type_enabled(v65, OS_LOG_TYPE_DEBUG))
          {
            LODWORD(buf.u.legacy.statistics_report.bytes_in) = 136446978;
            *(unint64_t *)((char *)&buf.u.nw_connection_report.bytes_in + 4) = (unint64_t)"nw_connection_get_fallback_margin_start_milliseconds";
            WORD2(buf.u.nw_connection_report.bytes_out) = 2082;
            *(unint64_t *)((char *)&buf.u.nw_connection_report.bytes_out + 6) = (unint64_t)"fallback_start";
            HIWORD(buf.u.nw_connection_report.bytes_duplicate) = 2048;
            buf.u.legacy.statistics_report.bytes_ooo = event_milliseconds;
            LOWORD(buf.u.nw_connection_report.bytes_retransmitted) = 2048;
            *(unint64_t *)((char *)&buf.u.nw_connection_report.bytes_retransmitted + 2) = v10;
            _os_log_impl(&dword_1830D4000, v65, OS_LOG_TYPE_DEBUG, "%{public}s Underflow: %{public}s, decrement %llu, result %llu", (uint8_t *)&buf, 0x2Au);
          }
        }
        LODWORD(v10) = 0;
      }
    }

    *(_DWORD *)(v3 + 1668) = v10;
    unint64_t v11 = *(void *)(v3 + 32);
    float v12 = 0.0;
    float v13 = 0.0;
    if (v11)
    {
      uint64_t v14 = *(void *)(v3 + 8);
      if (v14) {
        float v13 = (float)v11 / (float)(unint64_t)(100 * v14);
      }
    }
    unint64_t v15 = *(void *)(v3 + 16);
    if (v15 && *(void *)v3) {
      float v12 = (float)v15 / (float)(unint64_t)(100 * *(void *)v3);
    }
    uint64_t v16 = v2[2];
    if (v16 && !nw_path_parameters_get_logging_disabled(v16[13]))
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      uint64_t v17 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
      {
        unsigned int top_id = v7->top_id;
        LODWORD(buf.u.legacy.statistics_report.bytes_in) = 136446978;
        *(unint64_t *)((char *)&buf.u.nw_connection_report.bytes_in + 4) = (unint64_t)"nw_connection_send_stats_report_on_nw_queue";
        WORD2(buf.u.nw_connection_report.bytes_out) = 1024;
        *(_DWORD *)((char *)&buf.u.nw_connection_report.bytes_out + 6) = top_id;
        WORD1(buf.u.nw_connection_report.bytes_duplicate) = 2048;
        *(double *)((char *)&buf.u.nw_connection_report.bytes_duplicate + 4) = v13;
        WORD2(buf.u.nw_connection_report.bytes_ooo) = 2048;
        *(double *)((char *)&buf.u.nw_connection_report.bytes_ooo + 6) = v12;
        _os_log_impl(&dword_1830D4000, v17, OS_LOG_TYPE_DEBUG, "%{public}s [C%u] Retransmission rate: %.2f%%, duplicate rate: %.2f%%", (uint8_t *)&buf, 0x26u);
      }
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v19 = (id)gLogObj;
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
    {
    }
    else
    {
      BOOL v26 = gLogFDOverride == -1;

      if (v26)
      {
LABEL_97:
        *(unsigned char *)(v3 + 3417) = 1;
        if (!*(_DWORD *)(v3 + 204) || *((_DWORD *)v2 + 26) != 2 || *(void *)(v3 + 88) || *(void *)(v3 + 80))
        {
          nw_connection_send_report_to_symptoms(v7, (netcore_stats_tcp_report *)v3, 1);
          *((unsigned char *)v2 + 108) |= 2u;
          os_log_type_t v51 = v2[2];
          if (v51)
          {
            if (!nw_path_parameters_get_logging_disabled(v51[13]))
            {
              if (__nwlog_connection_log::onceToken != -1) {
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
              }
              unsigned int v52 = (id)gconnectionLogObj;
              if (os_log_type_enabled(v52, OS_LOG_TYPE_DEBUG))
              {
                unsigned int v53 = v7->top_id;
                LODWORD(buf.u.legacy.statistics_report.bytes_in) = 136446466;
                *(unint64_t *)((char *)&buf.u.nw_connection_report.bytes_in + 4) = (unint64_t)"nw_connection_send_stats_report_on_nw_queue";
                WORD2(buf.u.nw_connection_report.bytes_out) = 1024;
                *(_DWORD *)((char *)&buf.u.nw_connection_report.bytes_out + 6) = v53;
                _os_log_impl(&dword_1830D4000, v52, OS_LOG_TYPE_DEBUG, "%{public}s [C%u] Sent statistics report to symptoms", (uint8_t *)&buf, 0x12u);
              }
            }
          }
        }

        goto LABEL_109;
      }
    }
    uint64_t v27 = netcore_stats_tcp_report_copy_description(v3);
    if (v27)
    {
      BOOL v28 = v27;
      __int16 v29 = v2[2];
      if (v29 && !nw_path_parameters_get_logging_disabled(v29[13]))
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        int v30 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
        {
          unsigned int v31 = v7->top_id;
          LODWORD(buf.u.legacy.statistics_report.bytes_in) = 136446722;
          *(unint64_t *)((char *)&buf.u.nw_connection_report.bytes_in + 4) = (unint64_t)"nw_connection_send_stats_report_on_nw_queue";
          WORD2(buf.u.nw_connection_report.bytes_out) = 1024;
          *(_DWORD *)((char *)&buf.u.nw_connection_report.bytes_out + 6) = v31;
          WORD1(buf.u.nw_connection_report.bytes_duplicate) = 2082;
          *(unint64_t *)((char *)&buf.u.nw_connection_report.bytes_duplicate + 4) = (unint64_t)v28;
          _os_log_impl(&dword_1830D4000, v30, OS_LOG_TYPE_DEBUG, "%{public}s [C%u] Generated report: %{public}s", (uint8_t *)&buf, 0x1Cu);
        }
      }
      goto LABEL_89;
    }
    uint64_t v32 = __nwlog_obj();
    LODWORD(buf.u.legacy.statistics_report.bytes_in) = 136446210;
    *(unint64_t *)((char *)&buf.u.nw_connection_report.bytes_in + 4) = (unint64_t)"nw_connection_send_stats"
                                                                                                "_report_on_nw_queue";
    BOOL v28 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    char v66 = 0;
    if (__nwlog_fault(v28, type, &v66))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        uint64_t v33 = __nwlog_obj();
        os_log_type_t v34 = type[0];
        if (os_log_type_enabled(v33, type[0]))
        {
          LODWORD(buf.u.legacy.statistics_report.bytes_in) = 136446210;
          *(unint64_t *)((char *)&buf.u.nw_connection_report.bytes_in + 4) = (unint64_t)"nw_connection_send_stats_report_on_nw_queue";
          _os_log_impl(&dword_1830D4000, v33, v34, "%{public}s netcore_stats_tcp_report_copy_description failed", (uint8_t *)&buf, 0xCu);
        }
LABEL_87:

        goto LABEL_88;
      }
      if (!v66)
      {
        uint64_t v33 = __nwlog_obj();
        os_log_type_t v47 = type[0];
        if (os_log_type_enabled(v33, type[0]))
        {
          LODWORD(buf.u.legacy.statistics_report.bytes_in) = 136446210;
          *(unint64_t *)((char *)&buf.u.nw_connection_report.bytes_in + 4) = (unint64_t)"nw_connection_send_stats_report_on_nw_queue";
          _os_log_impl(&dword_1830D4000, v33, v47, "%{public}s netcore_stats_tcp_report_copy_description failed, backtrace limit exceeded", (uint8_t *)&buf, 0xCu);
        }
        goto LABEL_87;
      }
      os_log_type_t v40 = (char *)__nw_create_backtrace_string();
      uint64_t v33 = __nwlog_obj();
      os_log_type_t v41 = type[0];
      BOOL v42 = os_log_type_enabled(v33, type[0]);
      if (!v40)
      {
        if (v42)
        {
          LODWORD(buf.u.legacy.statistics_report.bytes_in) = 136446210;
          *(unint64_t *)((char *)&buf.u.nw_connection_report.bytes_in + 4) = (unint64_t)"nw_connection_send_stats_report_on_nw_queue";
          _os_log_impl(&dword_1830D4000, v33, v41, "%{public}s netcore_stats_tcp_report_copy_description failed, no backtrace", (uint8_t *)&buf, 0xCu);
        }
        goto LABEL_87;
      }
      if (v42)
      {
        LODWORD(buf.u.legacy.statistics_report.bytes_in) = 136446466;
        *(unint64_t *)((char *)&buf.u.nw_connection_report.bytes_in + 4) = (unint64_t)"nw_connection_send_stats_report_on_nw_queue";
        WORD2(buf.u.nw_connection_report.bytes_out) = 2082;
        *(unint64_t *)((char *)&buf.u.nw_connection_report.bytes_out + 6) = (unint64_t)v40;
        _os_log_impl(&dword_1830D4000, v33, v41, "%{public}s netcore_stats_tcp_report_copy_description failed, dumping backtrace:%{public}s", (uint8_t *)&buf, 0x16u);
      }

      free(v40);
    }
LABEL_88:
    if (!v28)
    {
LABEL_90:
      os_log_type_t v48 = v2[2];
      if (v48 && !nw_path_parameters_get_logging_disabled(v48[13]))
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        BOOL v49 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v49, OS_LOG_TYPE_DEBUG))
        {
          unsigned int v50 = v7->top_id;
          LODWORD(buf.u.legacy.statistics_report.bytes_in) = 136446466;
          *(unint64_t *)((char *)&buf.u.nw_connection_report.bytes_in + 4) = (unint64_t)"nw_connection_send_stats_report_on_nw_queue";
          WORD2(buf.u.nw_connection_report.bytes_out) = 1024;
          *(_DWORD *)((char *)&buf.u.nw_connection_report.bytes_out + 6) = v50;
          _os_log_impl(&dword_1830D4000, v49, OS_LOG_TYPE_DEBUG, "%{public}s [C%u] End of report", (uint8_t *)&buf, 0x12u);
        }
      }
      goto LABEL_97;
    }
LABEL_89:
    free(v28);
    goto LABEL_90;
  }
  if (!v4 || nw_path_parameters_get_logging_disabled(v4[13])) {
    goto LABEL_123;
  }
  if (__nwlog_connection_log::onceToken != -1) {
    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
  }
  id v20 = (id)gconnectionLogObj;
  int v21 = *((_DWORD *)v2 + 112);
  LODWORD(buf.u.legacy.statistics_report.bytes_in) = 136446466;
  *(unint64_t *)((char *)&buf.u.nw_connection_report.bytes_in + 4) = (unint64_t)"nw_connection_send_stats_r"
                                                                                              "eport_on_nw_queue";
  WORD2(buf.u.nw_connection_report.bytes_out) = 1024;
  *(_DWORD *)((char *)&buf.u.nw_connection_report.bytes_out + 6) = v21;
  id v22 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  char v66 = 0;
  if (!__nwlog_fault(v22, type, &v66)) {
    goto LABEL_80;
  }
  if (type[0] == OS_LOG_TYPE_FAULT)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
    }
    unint64_t v23 = (id)gconnectionLogObj;
    os_log_type_t v24 = type[0];
    if (os_log_type_enabled(v23, type[0]))
    {
      int v25 = *((_DWORD *)v2 + 112);
      LODWORD(buf.u.legacy.statistics_report.bytes_in) = 136446466;
      *(unint64_t *)((char *)&buf.u.nw_connection_report.bytes_in + 4) = (unint64_t)"nw_connection_send_sta"
                                                                                                  "ts_report_on_nw_queue";
      WORD2(buf.u.nw_connection_report.bytes_out) = 1024;
      *(_DWORD *)((char *)&buf.u.nw_connection_report.bytes_out + 6) = v25;
      _os_log_impl(&dword_1830D4000, v23, v24, "%{public}s [C%u] Unexpected NULL stats report", (uint8_t *)&buf, 0x12u);
    }
LABEL_79:

    goto LABEL_80;
  }
  if (!v66)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
    }
    unint64_t v23 = (id)gconnectionLogObj;
    os_log_type_t v43 = type[0];
    if (os_log_type_enabled(v23, type[0]))
    {
      int v44 = *((_DWORD *)v2 + 112);
      LODWORD(buf.u.legacy.statistics_report.bytes_in) = 136446466;
      *(unint64_t *)((char *)&buf.u.nw_connection_report.bytes_in + 4) = (unint64_t)"nw_connection_send_sta"
                                                                                                  "ts_report_on_nw_queue";
      WORD2(buf.u.nw_connection_report.bytes_out) = 1024;
      *(_DWORD *)((char *)&buf.u.nw_connection_report.bytes_out + 6) = v44;
      _os_log_impl(&dword_1830D4000, v23, v43, "%{public}s [C%u] Unexpected NULL stats report, backtrace limit exceeded", (uint8_t *)&buf, 0x12u);
    }
    goto LABEL_79;
  }
  id v35 = __nw_create_backtrace_string();
  if (!v35)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
    }
    unint64_t v23 = (id)gconnectionLogObj;
    os_log_type_t v45 = type[0];
    if (os_log_type_enabled(v23, type[0]))
    {
      int v46 = *((_DWORD *)v2 + 112);
      LODWORD(buf.u.legacy.statistics_report.bytes_in) = 136446466;
      *(unint64_t *)((char *)&buf.u.nw_connection_report.bytes_in + 4) = (unint64_t)"nw_connection_send_sta"
                                                                                                  "ts_report_on_nw_queue";
      WORD2(buf.u.nw_connection_report.bytes_out) = 1024;
      *(_DWORD *)((char *)&buf.u.nw_connection_report.bytes_out + 6) = v46;
      _os_log_impl(&dword_1830D4000, v23, v45, "%{public}s [C%u] Unexpected NULL stats report, no backtrace", (uint8_t *)&buf, 0x12u);
    }
    goto LABEL_79;
  }
  uint64_t v36 = (char *)v35;
  if (__nwlog_connection_log::onceToken != -1) {
    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
  }
  uint64_t v37 = (id)gconnectionLogObj;
  os_log_type_t v38 = type[0];
  if (os_log_type_enabled(v37, type[0]))
  {
    int v39 = *((_DWORD *)v2 + 112);
    LODWORD(buf.u.legacy.statistics_report.bytes_in) = 136446722;
    *(unint64_t *)((char *)&buf.u.nw_connection_report.bytes_in + 4) = (unint64_t)"nw_connection_send_stats"
                                                                                                "_report_on_nw_queue";
    WORD2(buf.u.nw_connection_report.bytes_out) = 1024;
    *(_DWORD *)((char *)&buf.u.nw_connection_report.bytes_out + 6) = v39;
    WORD1(buf.u.nw_connection_report.bytes_duplicate) = 2082;
    *(unint64_t *)((char *)&buf.u.nw_connection_report.bytes_duplicate + 4) = (unint64_t)v36;
    _os_log_impl(&dword_1830D4000, v37, v38, "%{public}s [C%u] Unexpected NULL stats report, dumping backtrace:%{public}s", (uint8_t *)&buf, 0x1Cu);
  }

  free(v36);
  if (v22) {
    goto LABEL_81;
  }
LABEL_123:
}

void sub_183250560(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_connection_log_summary_on_nw_queue(NWConcrete_nw_connection *a1)
{
  v394[2] = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  nw_context_assert_queue(v1->context);
  if (nw_parameters_get_logging_disabled((uint64_t)v1->parameters)) {
    goto LABEL_274;
  }
  uint64_t v2 = nw_endpoint_handler_copy_connected_flow_handler(v1->parent_endpoint_handler);
  if (v2)
  {
    char v3 = 0;
    LOWORD(v4) = 0;
    int v5 = 0;
    int v6 = 0;
    int privacy_stance = v1->privacy_stance;
    nw_endpoint_t v367 = "?";
    do
    {
      unint64_t v9 = v2;
      int v10 = *(_DWORD *)(v9 + 116);

      if (v10 == 2 && (unsigned __int16)v4 == 0)
      {
        char v3 = nw_endpoint_handler_stack_uses_tls(v1->parent_endpoint_handler);
        float v12 = (id *)(id)v9;
        id v13 = v12[4];

        if (v13)
        {
          int ip_protocol = nw_parameters_get_ip_protocol(v13);
          unint64_t v15 = "QUIC";
          if (nw_parameters_get_upper_transport_protocol(v13) != 253)
          {
            if (ip_protocol == 17)
            {
              unint64_t v15 = "UDP";
            }
            else
            {
              unint64_t v15 = v367;
              if (ip_protocol == 6)
              {
                if (nw_connection_uses_multipath(v1)) {
                  unint64_t v15 = "MPTCP";
                }
                else {
                  unint64_t v15 = "TCP";
                }
              }
            }
          }
        }
        else
        {
          unint64_t v15 = v367;
        }
        int v4 = HIDWORD(v9) ^ (v9 >> 16) ^ HIWORD(v9) ^ v9;

        nw_endpoint_t v367 = v15;
      }
      uint64_t v16 = (NWConcrete_nw_endpoint_handler *)(id)v9;
      int v17 = *(_DWORD *)(v9 + 116);

      if (v17 == 1)
      {
        uint64_t v18 = nw_endpoint_handler_copy_endpoint(v16);
        nw_endpoint_type_t type = nw_endpoint_get_type(v18);

        if (type != nw_endpoint_type_host || v5)
        {
          int v7 = (unsigned __int16)(WORD2(v16) ^ WORD1(v16) ^ HIWORD(v16) ^ (unsigned __int16)v16);
          if (v6) {
            int v7 = v6;
          }
          if (type == nw_endpoint_type_bonjour_service) {
            int v6 = v7;
          }
        }
        else
        {
          int v5 = (unsigned __int16)(WORD2(v16) ^ WORD1(v16) ^ HIWORD(v16) ^ (unsigned __int16)v16);
        }
      }
      int v8 = v16;
      uint64_t v2 = (NWConcrete_nw_endpoint_handler *)v8[9];
    }
    while (v2);
    unsigned int used_timestamps = v1->used_timestamps;
    if (v1->used_timestamps)
    {
      uint64_t v21 = 0;
      unint64_t v22 = 0;
      unsigned int v366 = -1;
      LODWORD(v363) = -1;
      unsigned int v358 = -1;
      unsigned int v359 = -1;
      LODWORD(v361) = -1;
      while (1)
      {
        timestamps = v1->timestamps;
        int v24 = *(unsigned __int16 *)((char *)&timestamps->var1.domain + v21);
        if (v24 == 3) {
          break;
        }
        if (v24 == 2)
        {
          int v25 = v1;
          nw_context_assert_queue(v1->context);
          switch(*(unsigned __int16 *)((char *)&timestamps->var1.event + v21))
          {
            case 1u:
              if (v5)
              {
                if (*(unsigned __int16 *)((char *)&timestamps->var2.var0.var0 + v21) != v5) {
                  goto LABEL_80;
                }
              }
              else
              {
                int v5 = *(unsigned __int16 *)((char *)&timestamps->var2.var0.var0 + v21);
              }
              unint64_t v35 = nw_delta_nanos(v1->start_time, *(unint64_t *)((char *)&timestamps->var0 + v21));
              unint64_t v36 = v35 / 0xF4240;
              if (v35 > 0xF423FFFFFFFFFLL) {
                LODWORD(v36) = -1;
              }
              unsigned int v359 = v36;
              goto LABEL_80;
            case 2u:
              if (*(unsigned __int16 *)((char *)&timestamps->var2.var0.var0 + v21) == v5 && v363 == -1)
              {
                if (v359 == -1)
                {
                  LODWORD(v363) = -1;
                  unsigned int v359 = -1;
                }
                else
                {
                  unint64_t v28 = nw_delta_nanos(v1->start_time, *(unint64_t *)((char *)&timestamps->var0 + v21));
                  unint64_t v29 = v28 / 0xF4240;
                  if (v28 > 0xF423FFFFFFFFFLL) {
                    LODWORD(v29) = -1;
                  }
                  uint64_t v363 = v29 - v359;
                  if (v29 < v359)
                  {
                    if (gLogDatapath)
                    {
                      int v39 = __nwlog_obj();
                      if (os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG))
                      {
                        *(_DWORD *)netcore_stats_tcp_report buf = 136446978;
                        *(void *)v372 = "nw_connection_log_summary_resolver_on_nw_queue";
                        *(_WORD *)&v372[8] = 2082;
                        *(void *)&v372[10] = "dns->receive";
                        *(_WORD *)&v372[18] = 2048;
                        *(void *)&v372[20] = v359;
                        *(_WORD *)&v372[28] = 2048;
                        *(void *)__int16 v373 = v363;
                        _os_log_impl(&dword_1830D4000, v39, OS_LOG_TYPE_DEBUG, "%{public}s Underflow: %{public}s, decrement %llu, result %llu", buf, 0x2Au);
                      }
                      LODWORD(v363) = 0;
                      goto LABEL_87;
                    }
                    LODWORD(v363) = 0;
                  }
                }
              }
              goto LABEL_80;
            case 3u:
              if (!v6)
              {
                int v6 = *(unsigned __int16 *)((char *)&timestamps->var2.var0.var0 + v21);
LABEL_75:
                unint64_t v37 = nw_delta_nanos(v1->start_time, *(unint64_t *)((char *)&timestamps->var0 + v21));
                unint64_t v38 = v37 / 0xF4240;
                if (v37 > 0xF423FFFFFFFFFLL) {
                  LODWORD(v38) = -1;
                }
                goto LABEL_79;
              }
              if (*(unsigned __int16 *)((char *)&timestamps->var2.var0.var0 + v21) == v6) {
                goto LABEL_75;
              }
              break;
            case 4u:
              if (*(unsigned __int16 *)((char *)&timestamps->var2.var0.var0 + v21) == v6 && v361 == -1)
              {
                if (v358 == -1)
                {
                  LODWORD(v361) = -1;
                  LODWORD(v38) = -1;
LABEL_79:
                  unsigned int v358 = v38;
                }
                else
                {
                  unint64_t v31 = nw_delta_nanos(v1->start_time, *(unint64_t *)((char *)&timestamps->var0 + v21));
                  unint64_t v32 = v31 / 0xF4240;
                  if (v31 > 0xF423FFFFFFFFFLL) {
                    LODWORD(v32) = -1;
                  }
                  uint64_t v361 = v32 - v358;
                  if (v32 < v358)
                  {
                    if (gLogDatapath)
                    {
                      int v39 = __nwlog_obj();
                      if (os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG))
                      {
                        *(_DWORD *)netcore_stats_tcp_report buf = 136446978;
                        *(void *)v372 = "nw_connection_log_summary_resolver_on_nw_queue";
                        *(_WORD *)&v372[8] = 2082;
                        *(void *)&v372[10] = "bonjour->receive";
                        *(_WORD *)&v372[18] = 2048;
                        *(void *)&v372[20] = v358;
                        *(_WORD *)&v372[28] = 2048;
                        *(void *)__int16 v373 = v361;
                        _os_log_impl(&dword_1830D4000, v39, OS_LOG_TYPE_DEBUG, "%{public}s Underflow: %{public}s, decrement %llu, result %llu", buf, 0x2Au);
                      }
                      LODWORD(v361) = 0;
LABEL_87:
                    }
                    else
                    {
                      LODWORD(v361) = 0;
                    }
                  }
                }
              }
              goto LABEL_80;
            default:
              goto LABEL_80;
          }
          goto LABEL_80;
        }
LABEL_30:
        ++v22;
        v21 += 16;
        if (v22 >= used_timestamps) {
          goto LABEL_94;
        }
      }
      BOOL v26 = v1;
      nw_context_assert_queue(v1->context);
      if (*(unsigned __int16 *)((char *)&timestamps->var1.event + v21) == 3)
      {
        if ((_WORD)v4)
        {
          if (*(unsigned __int16 *)((char *)&timestamps->var2.var0.var0 + v21) != (unsigned __int16)v4) {
            goto LABEL_80;
          }
        }
        else
        {
          LOWORD(v4) = *(unsigned __int16 *)((char *)&timestamps->var2.var0.var0 + v21);
        }
        unint64_t v33 = nw_delta_nanos(v1->start_time, *(unint64_t *)((char *)&timestamps->var0 + v21));
        unint64_t v34 = v33 / 0xF4240;
        if (v33 > 0xF423FFFFFFFFFLL) {
          LODWORD(v34) = -1;
        }
        unsigned int v366 = v34;
      }
LABEL_80:

      unsigned int used_timestamps = v1->used_timestamps;
      goto LABEL_30;
    }
    LODWORD(v361) = -1;
    LODWORD(v363) = -1;
    unsigned int v358 = -1;
    unsigned int v359 = -1;
    unsigned int v366 = -1;
LABEL_94:
    if ((_WORD)v4)
    {
      unsigned int transport_connect_milliseconds = nw_connection_get_transport_connect_milliseconds(v1, v4, 0);
      if (v3)
      {
        id v45 = nw_connection_copy_establishment_report_on_queue(v1);
        if (v45)
        {
          int v46 = (void *)nw_protocol_boringssl_copy_definition();
          double Helper_x8__nwswifttls_copy_definition = gotLoadHelper_x8__nwswifttls_copy_definition(v47);
          if (*(void *)(v49 + 2208))
          {
            inited = (void *)nwswifttls_copy_definition_delayInitStub(Helper_x8__nwswifttls_copy_definition);
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            os_log_type_t v51 = gLogObj;
            if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
              *(void *)v372 = "nw_protocol_copy_swift_tls_definition_if_present";
              *(_WORD *)&v372[8] = 2048;
              *(void *)&v372[10] = inited;
              _os_log_impl(&dword_1830D4000, v51, OS_LOG_TYPE_DEBUG, "%{public}s SwiftTLS protocol definition %p", buf, 0x16u);
            }
          }
          else
          {
            inited = 0;
          }
          unsigned int handshake_ms_for_protocol = nw_establishment_report_get_handshake_ms_for_protocol(v45, v46, inited);
        }
        else
        {
          unsigned int handshake_ms_for_protocol = -1;
        }
      }
      else
      {
        unsigned int handshake_ms_for_protocol = -1;
      }
    }
    else
    {
      unsigned int handshake_ms_for_protocol = -1;
      unsigned int transport_connect_milliseconds = -1;
    }
    uint64_t v369 = 0;
    v370 = 0;
    char v368 = 0;
    nw_connection_fillout_data_transfer_snapshot_on_nw_queue(v1, (uint64_t *)&v370, &v369, &v368, 0);
    unsigned int v53 = nw_endpoint_handler_copy_connected_flow_handler(v1->parent_endpoint_handler);
    v394[0] = 0;
    v394[1] = 0;
    nw_endpoint_handler_get_client_id(v53, (unsigned __int8 *)v394);
    id v357 = (void *)nw_endpoint_handler_copy_connected_path(v53);
    id v54 = nw_connection_copy_connected_local_endpoint(v1);
    id v55 = nw_connection_copy_connected_remote_endpoint(v1);
    uint64_t start_time = v1->start_time;
    uint64_t v57 = mach_continuous_time();
    if (v57 <= 1) {
      uint64_t v58 = 1;
    }
    else {
      uint64_t v58 = v57;
    }
    unint64_t v59 = nw_delta_nanos(start_time, v58);
    unint64_t v60 = v59 / 0xF4240;
    if (v59 > 0xF423FFFFFFFFFLL) {
      LODWORD(v60) = -1;
    }
    unsigned int v354 = v60;
    if (v6)
    {
      if (v3)
      {
        uint64_t v61 = *((void *)&off_1E5249E08 + nw_connection_get_tls_version(v1));
        if (v370)
        {
          if ((*((unsigned char *)v1 + 109) & 4) != 0)
          {
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
            }
            os_log_type_t v62 = (id)gconnectionLogObj;
            if (!os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_270;
            }
            uint64_t v356 = v55;
            unsigned int top_id = v1->top_id;
            logging_description = nw_endpoint_get_logging_description(v1->endpoint);
            parameters = v1->parameters;
            id_string = nw_endpoint_handler_get_id_string(v53);
            description = nw_endpoint_get_description(v54);
            uint64_t v136 = nw_endpoint_get_logging_description(v356);
            uint64_t v137 = *((void *)v370 + 1);
            uint64_t v138 = *((void *)v370 + 5);
            uint64_t v139 = *((void *)v370 + 6);
            uint64_t v140 = *((void *)v370 + 14);
            unsigned int v141 = *((void *)v370 + 15) % 0x3E8;
            uint64_t v142 = *((void *)v370 + 8);
            uint64_t v143 = *((void *)v370 + 9);
            uint64_t v145 = *((void *)v370 + 10);
            uint64_t v144 = *((void *)v370 + 11);
            uint64_t v147 = *((void *)v370 + 12);
            uint64_t v146 = *((void *)v370 + 13);
            *(_DWORD *)&v389[134] = *((void *)v370 + 15) / 0x3E8;
            *(void *)&v389[146] = v145;
            *(void *)&v389[166] = v144;
            *(void *)&v389[176] = v147;
            *(void *)&v389[186] = v146;
            *(_DWORD *)v372 = top_id;
            *(void *)&v372[12] = v1->top_uuid;
            *(void *)&v372[22] = logging_description;
            *(void *)&v373[2] = parameters;
            __int16 v375 = id_string;
            *(_WORD *)&v372[4] = 1042;
            __int16 v376 = 1042;
            *(_DWORD *)&v372[6] = 16;
            int v377 = 16;
            *(_WORD *)&v372[10] = 2098;
            __int16 v378 = 2098;
            uint64_t v379 = v394;
            nw_endpoint_t v381 = description;
            v383 = v136;
            *(_WORD *)__int16 v373 = 2114;
            __int16 v384 = 2114;
            *(_DWORD *)v387 = v354 / 0x3E8;
            *(_DWORD *)((char *)v388 + 2) = v358 / 0x3E8;
            v388[2] = v358 % 0x3E8;
            *(_DWORD *)&v389[2] = v361 / 0x3E8;
            *(_DWORD *)&v389[8] = v361 % 0x3E8;
            *(_DWORD *)&v389[14] = v359 / 0x3E8;
            *(_DWORD *)&v389[20] = v359 % 0x3E8;
            *(_DWORD *)&v389[26] = v363 / 0x3E8;
            *(_DWORD *)&v389[32] = v363 % 0x3E8;
            *(void *)&v389[38] = v367;
            *(_DWORD *)&v389[48] = v366 / 0x3E8;
            *(_DWORD *)&v389[54] = v366 % 0x3E8;
            *(_DWORD *)&v389[60] = transport_connect_milliseconds / 0x3E8;
            *(_DWORD *)&v389[66] = transport_connect_milliseconds % 0x3E8;
            *(_WORD *)&v372[20] = 2082;
            __int16 v374 = 2082;
            __int16 v380 = 2082;
            __int16 v382 = 2082;
            *(_WORD *)&v389[36] = 2082;
            *(_WORD *)&v389[70] = 2082;
            *(void *)&v389[72] = v61;
            *(_DWORD *)&v389[82] = handshake_ms_for_protocol / 0x3E8;
            *(_DWORD *)&v389[88] = handshake_ms_for_protocol % 0x3E8;
            *(void *)&v389[94] = v139;
            *(void *)&v389[104] = v143;
            *(void *)&v389[114] = v137;
            *(void *)&v389[124] = v138;
            *(_DWORD *)&v389[140] = v141;
            *(void *)&v389[156] = v142;
            *(_WORD *)&v389[92] = 2048;
            *(_WORD *)&v389[102] = 2048;
            *(_WORD *)&v389[112] = 2048;
            *(_WORD *)&v389[122] = 2048;
            *(_WORD *)&v389[144] = 2048;
            *(_WORD *)&v389[154] = 2048;
            *(_WORD *)&v389[164] = 2048;
            *(_WORD *)&v389[174] = 2048;
            *(_WORD *)&v389[184] = 2048;
            __int16 v390 = 2048;
            uint64_t v391 = v140;
            LOWORD(v388[0]) = 1024;
            HIWORD(v388[1]) = 1024;
            *(_WORD *)v389 = 1024;
            *(_WORD *)&v389[6] = 1024;
            *(_WORD *)&v389[12] = 1024;
            *(_WORD *)&v389[18] = 1024;
            *(_WORD *)&v389[24] = 1024;
            *(_WORD *)&v389[30] = 1024;
            *(_WORD *)&v389[46] = 1024;
            *(_WORD *)&v389[52] = 1024;
            *(_WORD *)&v389[58] = 1024;
            *(_WORD *)&v389[64] = 1024;
            *(_WORD *)&v389[80] = 1024;
            *(_WORD *)&v389[86] = 1024;
            *(_WORD *)&v389[132] = 1024;
            *(_WORD *)&v389[138] = 1024;
            __int16 v386 = 1024;
            *(_WORD *)&v387[4] = 1024;
            *(_DWORD *)&v387[6] = v354 % 0x3E8;
            *(_DWORD *)netcore_stats_tcp_report buf = 67119362;
            id v385 = v357;
            os_log_type_t v129 = "[C%u %{public,uuid_t}.16P %{public}s %{public}@] cancelled\n"
                   "\t[C%{public}s %{public,uuid_t}.16P %{public}s<->%{public}s]\n"
                   "\tConnected Path: %{public}@\n"
                   "\tDuration: %u.%03us, Bonjour @%u.%03us took %u.%03us, DNS @%u.%03us took %u.%03us, %{public}s @%u.%0"
                   "3us took %u.%03us, %{public}s took %u.%03us\n"
                   "\tbytes in/out: %llu/%llu, packets in/out: %llu/%llu, rtt: %u.%03us, retransmitted bytes: %llu, out-o"
                   "f-order bytes: %llu\n"
                   "\tecn packets sent/acked/marked/lost: %llu/%llu/%llu/%llu";
            id v130 = v62;
            uint32_t v131 = 328;
          }
          else
          {
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
            }
            os_log_type_t v62 = (id)gconnectionLogObj;
            if (!os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_270;
            }
            uint64_t v356 = v55;
            unsigned int v63 = v1->top_id;
            v349 = nw_endpoint_get_logging_description(v1->endpoint);
            os_log_type_t v64 = v1->parameters;
            uint64_t v65 = nw_endpoint_handler_get_id_string(v53);
            char v66 = nw_endpoint_get_description(v54);
            uint64_t v67 = nw_endpoint_get_logging_description(v356);
            if ((privacy_stance - 1) > 4) {
              os_log_type_t v68 = "Unknown";
            }
            else {
              os_log_type_t v68 = off_1E523B910[privacy_stance - 1];
            }
            uint64_t v238 = *((void *)v370 + 1);
            uint64_t v239 = *((void *)v370 + 6);
            uint64_t v240 = *((void *)v370 + 14);
            unsigned int v241 = *((void *)v370 + 15) / 0x3E8;
            unsigned int v242 = *((void *)v370 + 15) % 0x3E8;
            uint64_t v243 = *((void *)v370 + 8);
            uint64_t v244 = *((void *)v370 + 9);
            uint64_t v246 = *((void *)v370 + 10);
            uint64_t v245 = *((void *)v370 + 11);
            uint64_t v247 = *((void *)v370 + 12);
            uint64_t v248 = *((void *)v370 + 13);
            *(void *)&v389[134] = *((void *)v370 + 5);
            *(_DWORD *)&v389[150] = v242;
            *(void *)&v389[166] = v243;
            *(void *)&v389[176] = v245;
            *(void *)&v389[186] = v247;
            uint64_t v393 = v240;
            *(_DWORD *)v372 = v63;
            *(void *)&v372[12] = v1->top_uuid;
            *(void *)&v372[22] = v349;
            *(void *)&v373[2] = v64;
            __int16 v375 = v65;
            *(_WORD *)&v372[4] = 1042;
            __int16 v376 = 1042;
            *(_DWORD *)&v372[6] = 16;
            int v377 = 16;
            *(_WORD *)&v372[10] = 2098;
            __int16 v378 = 2098;
            uint64_t v379 = v394;
            nw_endpoint_t v381 = v66;
            v383 = v67;
            *(_WORD *)__int16 v373 = 2114;
            __int16 v384 = 2114;
            *(void *)v387 = v68;
            v388[0] = v354 / 0x3E8;
            *(_DWORD *)((char *)&v388[1] + 2) = v354 % 0x3E8;
            *(_DWORD *)v389 = v358 / 0x3E8;
            *(_DWORD *)&v389[6] = v358 % 0x3E8;
            *(_DWORD *)&v389[12] = v361 / 0x3E8;
            *(_DWORD *)&v389[18] = v361 % 0x3E8;
            *(_DWORD *)&v389[24] = v359 / 0x3E8;
            *(_DWORD *)&v389[30] = v359 % 0x3E8;
            *(_DWORD *)&v389[36] = v363 / 0x3E8;
            *(_DWORD *)&v389[42] = v363 % 0x3E8;
            *(void *)&v389[48] = v367;
            *(_DWORD *)&v389[58] = v366 / 0x3E8;
            *(_DWORD *)&v389[64] = v366 % 0x3E8;
            *(_DWORD *)&v389[70] = transport_connect_milliseconds / 0x3E8;
            *(_DWORD *)&v389[76] = transport_connect_milliseconds % 0x3E8;
            *(_WORD *)&v372[20] = 2082;
            __int16 v374 = 2082;
            __int16 v380 = 2082;
            __int16 v382 = 2082;
            __int16 v386 = 2082;
            *(_WORD *)&v389[46] = 2082;
            *(_WORD *)&v389[80] = 2082;
            *(void *)&v389[82] = v61;
            *(_DWORD *)&v389[92] = handshake_ms_for_protocol / 0x3E8;
            *(_DWORD *)&v389[98] = handshake_ms_for_protocol % 0x3E8;
            *(void *)&v389[104] = v239;
            *(void *)&v389[114] = v244;
            *(void *)&v389[124] = v238;
            *(_DWORD *)&v389[144] = v241;
            *(void *)&v389[156] = v246;
            uint64_t v391 = v248;
            *(_WORD *)&v389[102] = 2048;
            *(_WORD *)&v389[112] = 2048;
            *(_WORD *)&v389[122] = 2048;
            *(_WORD *)&v389[132] = 2048;
            *(_WORD *)&v389[154] = 2048;
            *(_WORD *)&v389[164] = 2048;
            *(_WORD *)&v389[174] = 2048;
            *(_WORD *)&v389[184] = 2048;
            __int16 v390 = 2048;
            __int16 v392 = 2048;
            LOWORD(v388[1]) = 1024;
            HIWORD(v388[2]) = 1024;
            *(_WORD *)&v389[4] = 1024;
            *(_WORD *)&v389[10] = 1024;
            *(_WORD *)&v389[16] = 1024;
            *(_WORD *)&v389[22] = 1024;
            *(_WORD *)&v389[28] = 1024;
            *(_WORD *)&v389[34] = 1024;
            *(_WORD *)&v389[40] = 1024;
            *(_WORD *)&v389[56] = 1024;
            *(_WORD *)&v389[62] = 1024;
            *(_WORD *)&v389[68] = 1024;
            *(_WORD *)&v389[74] = 1024;
            *(_WORD *)&v389[90] = 1024;
            *(_WORD *)&v389[96] = 1024;
            *(_WORD *)&v389[142] = 1024;
            *(_WORD *)&v389[148] = 1024;
            *(_WORD *)&v387[8] = 1024;
            *(_DWORD *)netcore_stats_tcp_report buf = 67119618;
            id v385 = v357;
            os_log_type_t v129 = "[C%u %{public,uuid_t}.16P %{public}s %{public}@] cancelled\n"
                   "\t[C%{public}s %{public,uuid_t}.16P %{public}s<->%{public}s]\n"
                   "\tConnected Path: %{public}@\n"
                   "\tPrivacy Stance: %{public}s\n"
                   "\tDuration: %u.%03us, Bonjour @%u.%03us took %u.%03us, DNS @%u.%03us took %u.%03us, %{public}s @%u.%0"
                   "3us took %u.%03us, %{public}s took %u.%03us\n"
                   "\tbytes in/out: %llu/%llu, packets in/out: %llu/%llu, rtt: %u.%03us, retransmitted bytes: %llu, out-o"
                   "f-order bytes: %llu\n"
                   "\tecn packets sent/acked/marked/lost: %llu/%llu/%llu/%llu";
            id v130 = v62;
            uint32_t v131 = 338;
          }
        }
        else if ((*((unsigned char *)v1 + 109) & 4) != 0)
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          os_log_type_t v62 = (id)gconnectionLogObj;
          if (!os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_270;
          }
          uint64_t v356 = v55;
          unsigned int v160 = v1->top_id;
          id v161 = nw_endpoint_get_logging_description(v1->endpoint);
          char v162 = v1->parameters;
          __int16 v163 = nw_endpoint_handler_get_id_string(v53);
          nw_endpoint_t v353 = nw_endpoint_get_description(v54);
          uint64_t v164 = nw_endpoint_get_logging_description(v356);
          *(_DWORD *)netcore_stats_tcp_report buf = 67116290;
          *(_DWORD *)v372 = v160;
          *(_WORD *)&v372[4] = 1042;
          *(_DWORD *)&v372[6] = 16;
          *(_WORD *)&v372[10] = 2098;
          *(void *)&v372[12] = v1->top_uuid;
          *(_WORD *)&v372[20] = 2082;
          *(void *)&v372[22] = v161;
          *(_WORD *)__int16 v373 = 2114;
          *(void *)&v373[2] = v162;
          __int16 v374 = 2082;
          __int16 v375 = v163;
          __int16 v376 = 1042;
          int v377 = 16;
          __int16 v378 = 2098;
          uint64_t v379 = v394;
          __int16 v380 = 2082;
          nw_endpoint_t v381 = v353;
          __int16 v382 = 2082;
          v383 = v164;
          __int16 v384 = 2114;
          id v385 = v357;
          __int16 v386 = 1024;
          *(_DWORD *)v387 = v354 / 0x3E8;
          *(_WORD *)&v387[4] = 1024;
          *(_DWORD *)&v387[6] = v354 % 0x3E8;
          LOWORD(v388[0]) = 1024;
          *(_DWORD *)((char *)v388 + 2) = v358 / 0x3E8;
          HIWORD(v388[1]) = 1024;
          v388[2] = v358 % 0x3E8;
          *(_WORD *)v389 = 1024;
          *(_DWORD *)&v389[2] = v361 / 0x3E8;
          *(_WORD *)&v389[6] = 1024;
          *(_DWORD *)&v389[8] = v361 % 0x3E8;
          *(_WORD *)&v389[12] = 1024;
          *(_DWORD *)&v389[14] = v359 / 0x3E8;
          *(_WORD *)&v389[18] = 1024;
          *(_DWORD *)&v389[20] = v359 % 0x3E8;
          *(_WORD *)&v389[24] = 1024;
          *(_DWORD *)&v389[26] = v363 / 0x3E8;
          *(_WORD *)&v389[30] = 1024;
          *(_DWORD *)&v389[32] = v363 % 0x3E8;
          *(_WORD *)&v389[36] = 2082;
          *(void *)&v389[38] = v367;
          *(_WORD *)&v389[46] = 1024;
          *(_DWORD *)&v389[48] = v366 / 0x3E8;
          *(_WORD *)&v389[52] = 1024;
          *(_DWORD *)&v389[54] = v366 % 0x3E8;
          *(_WORD *)&v389[58] = 1024;
          *(_DWORD *)&v389[60] = transport_connect_milliseconds / 0x3E8;
          *(_WORD *)&v389[64] = 1024;
          *(_DWORD *)&v389[66] = transport_connect_milliseconds % 0x3E8;
          *(_WORD *)&v389[70] = 2082;
          *(void *)&v389[72] = v61;
          *(_WORD *)&v389[80] = 1024;
          *(_DWORD *)&v389[82] = handshake_ms_for_protocol / 0x3E8;
          *(_WORD *)&v389[86] = 1024;
          *(_DWORD *)&v389[88] = handshake_ms_for_protocol % 0x3E8;
          os_log_type_t v129 = "[C%u %{public,uuid_t}.16P %{public}s %{public}@] cancelled\n"
                 "\t[C%{public}s %{public,uuid_t}.16P %{public}s<->%{public}s]\n"
                 "\tConnected Path: %{public}@\n"
                 "\tDuration: %u.%03us, Bonjour @%u.%03us took %u.%03us, DNS @%u.%03us took %u.%03us, %{public}s @%u.%03u"
                 "s took %u.%03us, %{public}s took %u.%03us";
          id v130 = v62;
          uint32_t v131 = 216;
        }
        else
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          os_log_type_t v62 = (id)gconnectionLogObj;
          if (!os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_270;
          }
          uint64_t v356 = v55;
          unsigned int v106 = v1->top_id;
          uint64_t v350 = nw_endpoint_get_logging_description(v1->endpoint);
          os_log_type_t v107 = v1->parameters;
          os_log_type_t v108 = nw_endpoint_handler_get_id_string(v53);
          BOOL v109 = nw_endpoint_get_description(v54);
          os_log_type_t v110 = nw_endpoint_get_logging_description(v356);
          if ((privacy_stance - 1) > 4) {
            int v111 = "Unknown";
          }
          else {
            int v111 = off_1E523B910[privacy_stance - 1];
          }
          *(_DWORD *)netcore_stats_tcp_report buf = 67116546;
          *(_DWORD *)v372 = v106;
          *(_WORD *)&v372[4] = 1042;
          *(_DWORD *)&v372[6] = 16;
          *(_WORD *)&v372[10] = 2098;
          *(void *)&v372[12] = v1->top_uuid;
          *(_WORD *)&v372[20] = 2082;
          *(void *)&v372[22] = v350;
          *(_WORD *)__int16 v373 = 2114;
          *(void *)&v373[2] = v107;
          __int16 v374 = 2082;
          __int16 v375 = v108;
          __int16 v376 = 1042;
          int v377 = 16;
          __int16 v378 = 2098;
          uint64_t v379 = v394;
          __int16 v380 = 2082;
          nw_endpoint_t v381 = v109;
          __int16 v382 = 2082;
          v383 = v110;
          __int16 v384 = 2114;
          id v385 = v357;
          __int16 v386 = 2082;
          *(void *)v387 = v111;
          *(_WORD *)&v387[8] = 1024;
          v388[0] = v354 / 0x3E8;
          LOWORD(v388[1]) = 1024;
          *(_DWORD *)((char *)&v388[1] + 2) = v354 % 0x3E8;
          HIWORD(v388[2]) = 1024;
          *(_DWORD *)v389 = v358 / 0x3E8;
          *(_WORD *)&v389[4] = 1024;
          *(_DWORD *)&v389[6] = v358 % 0x3E8;
          *(_WORD *)&v389[10] = 1024;
          *(_DWORD *)&v389[12] = v361 / 0x3E8;
          *(_WORD *)&v389[16] = 1024;
          *(_DWORD *)&v389[18] = v361 % 0x3E8;
          *(_WORD *)&v389[22] = 1024;
          *(_DWORD *)&v389[24] = v359 / 0x3E8;
          *(_WORD *)&v389[28] = 1024;
          *(_DWORD *)&v389[30] = v359 % 0x3E8;
          *(_WORD *)&v389[34] = 1024;
          *(_DWORD *)&v389[36] = v363 / 0x3E8;
          *(_WORD *)&v389[40] = 1024;
          *(_DWORD *)&v389[42] = v363 % 0x3E8;
          *(_WORD *)&v389[46] = 2082;
          *(void *)&v389[48] = v367;
          *(_WORD *)&v389[56] = 1024;
          *(_DWORD *)&v389[58] = v366 / 0x3E8;
          *(_WORD *)&v389[62] = 1024;
          *(_DWORD *)&v389[64] = v366 % 0x3E8;
          *(_WORD *)&v389[68] = 1024;
          *(_DWORD *)&v389[70] = transport_connect_milliseconds / 0x3E8;
          *(_WORD *)&v389[74] = 1024;
          *(_DWORD *)&v389[76] = transport_connect_milliseconds % 0x3E8;
          *(_WORD *)&v389[80] = 2082;
          *(void *)&v389[82] = v61;
          *(_WORD *)&v389[90] = 1024;
          *(_DWORD *)&v389[92] = handshake_ms_for_protocol / 0x3E8;
          *(_WORD *)&v389[96] = 1024;
          *(_DWORD *)&v389[98] = handshake_ms_for_protocol % 0x3E8;
          os_log_type_t v129 = "[C%u %{public,uuid_t}.16P %{public}s %{public}@] cancelled\n"
                 "\t[C%{public}s %{public,uuid_t}.16P %{public}s<->%{public}s]\n"
                 "\tConnected Path: %{public}@\n"
                 "\tPrivacy Stance: %{public}s\n"
                 "\tDuration: %u.%03us, Bonjour @%u.%03us took %u.%03us, DNS @%u.%03us took %u.%03us, %{public}s @%u.%03u"
                 "s took %u.%03us, %{public}s took %u.%03us";
          id v130 = v62;
          uint32_t v131 = 226;
        }
      }
      else if (v370)
      {
        if ((*((unsigned char *)v1 + 109) & 4) != 0)
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          os_log_type_t v62 = (id)gconnectionLogObj;
          if (!os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_270;
          }
          uint64_t v356 = v55;
          unsigned int v112 = v1->top_id;
          uint64_t v113 = nw_endpoint_get_logging_description(v1->endpoint);
          os_log_type_t v114 = v1->parameters;
          uint64_t v115 = nw_endpoint_handler_get_id_string(v53);
          int v116 = nw_endpoint_get_description(v54);
          BOOL v117 = nw_endpoint_get_logging_description(v356);
          uint64_t v118 = *((void *)v370 + 1);
          uint64_t v119 = *((void *)v370 + 5);
          uint64_t v120 = *((void *)v370 + 6);
          uint64_t v121 = *((void *)v370 + 8);
          uint64_t v122 = *((void *)v370 + 9);
          *(_DWORD *)v372 = v112;
          *(void *)&v372[12] = v1->top_uuid;
          uint64_t v124 = *((void *)v370 + 10);
          uint64_t v123 = *((void *)v370 + 11);
          *(void *)&v372[22] = v113;
          *(void *)&v373[2] = v114;
          uint64_t v126 = *((void *)v370 + 12);
          uint64_t v125 = *((void *)v370 + 13);
          __int16 v375 = v115;
          uint64_t v128 = *((void *)v370 + 14);
          uint64_t v127 = *((void *)v370 + 15);
          *(void *)&v389[134] = v121;
          *(void *)&v389[144] = v123;
          *(void *)&v389[154] = v126;
          *(void *)&v389[174] = v128;
          *(_WORD *)&v372[4] = 1042;
          __int16 v376 = 1042;
          *(_DWORD *)&v372[6] = 16;
          int v377 = 16;
          *(_WORD *)&v372[10] = 2098;
          __int16 v378 = 2098;
          uint64_t v379 = v394;
          nw_endpoint_t v381 = v116;
          v383 = v117;
          *(_WORD *)__int16 v373 = 2114;
          __int16 v384 = 2114;
          *(_DWORD *)v387 = v354 / 0x3E8;
          *(_DWORD *)((char *)v388 + 2) = v358 / 0x3E8;
          v388[2] = v358 % 0x3E8;
          *(_DWORD *)&v389[2] = v361 / 0x3E8;
          *(_DWORD *)&v389[8] = v361 % 0x3E8;
          *(_DWORD *)&v389[14] = v359 / 0x3E8;
          *(_DWORD *)&v389[20] = v359 % 0x3E8;
          *(_DWORD *)&v389[26] = v363 / 0x3E8;
          *(_DWORD *)&v389[32] = v363 % 0x3E8;
          *(_WORD *)&v372[20] = 2082;
          __int16 v374 = 2082;
          __int16 v380 = 2082;
          __int16 v382 = 2082;
          *(_WORD *)&v389[36] = 2082;
          *(void *)&v389[38] = v367;
          *(_DWORD *)&v389[48] = v366 / 0x3E8;
          *(_DWORD *)&v389[54] = v366 % 0x3E8;
          *(_DWORD *)&v389[60] = transport_connect_milliseconds / 0x3E8;
          *(_DWORD *)&v389[66] = transport_connect_milliseconds % 0x3E8;
          *(void *)&v389[72] = v120;
          *(void *)&v389[82] = v122;
          *(void *)&v389[92] = v118;
          *(void *)&v389[102] = v119;
          *(_DWORD *)&v389[112] = v127 / 0x3E8;
          *(_DWORD *)&v389[118] = v127 % 0x3E8;
          *(void *)&v389[124] = v124;
          *(void *)&v389[164] = v125;
          *(_WORD *)&v389[70] = 2048;
          *(_WORD *)&v389[80] = 2048;
          *(_WORD *)&v389[90] = 2048;
          *(_WORD *)&v389[100] = 2048;
          *(_WORD *)&v389[122] = 2048;
          *(_WORD *)&v389[132] = 2048;
          *(_WORD *)&v389[142] = 2048;
          *(_WORD *)&v389[152] = 2048;
          *(_WORD *)&v389[162] = 2048;
          *(_WORD *)&v389[172] = 2048;
          LOWORD(v388[0]) = 1024;
          HIWORD(v388[1]) = 1024;
          *(_WORD *)v389 = 1024;
          *(_WORD *)&v389[6] = 1024;
          *(_WORD *)&v389[12] = 1024;
          *(_WORD *)&v389[18] = 1024;
          *(_WORD *)&v389[24] = 1024;
          *(_WORD *)&v389[30] = 1024;
          *(_WORD *)&v389[46] = 1024;
          *(_WORD *)&v389[52] = 1024;
          *(_WORD *)&v389[58] = 1024;
          *(_WORD *)&v389[64] = 1024;
          *(_WORD *)&v389[110] = 1024;
          *(_WORD *)&v389[116] = 1024;
          __int16 v386 = 1024;
          *(_WORD *)&v387[4] = 1024;
          *(_DWORD *)&v387[6] = v354 % 0x3E8;
          *(_DWORD *)netcore_stats_tcp_report buf = 67118594;
          id v385 = v357;
          os_log_type_t v129 = "[C%u %{public,uuid_t}.16P %{public}s %{public}@] cancelled\n"
                 "\t[C%{public}s %{public,uuid_t}.16P %{public}s<->%{public}s]\n"
                 "\tConnected Path: %{public}@\n"
                 "\tDuration: %u.%03us, Bonjour @%u.%03us took %u.%03us, DNS @%u.%03us took %u.%03us, %{public}s @%u.%03u"
                 "s took %u.%03us\n"
                 "\tbytes in/out: %llu/%llu, packets in/out: %llu/%llu, rtt: %u.%03us, retransmitted bytes: %llu, out-of-"
                 "order bytes: %llu\n"
                 "\tecn packets sent/acked/marked/lost: %llu/%llu/%llu/%llu";
          id v130 = v62;
          uint32_t v131 = 306;
        }
        else
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          os_log_type_t v62 = (id)gconnectionLogObj;
          if (!os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_270;
          }
          uint64_t v356 = v55;
          unsigned int v77 = v1->top_id;
          BOOL v78 = nw_endpoint_get_logging_description(v1->endpoint);
          os_log_type_t v79 = v1->parameters;
          os_log_type_t v80 = nw_endpoint_handler_get_id_string(v53);
          char v81 = nw_endpoint_get_description(v54);
          uint64_t v82 = nw_endpoint_get_logging_description(v356);
          if ((privacy_stance - 1) > 4) {
            unsigned int v83 = "Unknown";
          }
          else {
            unsigned int v83 = off_1E523B910[privacy_stance - 1];
          }
          uint64_t v228 = *((void *)v370 + 1);
          uint64_t v229 = *((void *)v370 + 5);
          uint64_t v230 = *((void *)v370 + 6);
          uint64_t v231 = *((void *)v370 + 8);
          uint64_t v232 = *((void *)v370 + 9);
          uint64_t v233 = *((void *)v370 + 11);
          uint64_t v234 = *((void *)v370 + 12);
          uint64_t v235 = *((void *)v370 + 13);
          uint64_t v237 = *((void *)v370 + 14);
          uint64_t v236 = *((void *)v370 + 15);
          *(void *)&v389[134] = *((void *)v370 + 10);
          *(void *)&v389[144] = v231;
          *(void *)&v389[154] = v233;
          *(void *)&v389[174] = v235;
          *(void *)&v389[184] = v237;
          *(_DWORD *)v372 = v77;
          *(void *)&v372[12] = v1->top_uuid;
          *(void *)&v372[22] = v78;
          *(void *)&v373[2] = v79;
          __int16 v375 = v80;
          *(_WORD *)&v372[4] = 1042;
          __int16 v376 = 1042;
          *(_DWORD *)&v372[6] = 16;
          int v377 = 16;
          *(_WORD *)&v372[10] = 2098;
          __int16 v378 = 2098;
          uint64_t v379 = v394;
          nw_endpoint_t v381 = v81;
          v383 = v82;
          *(_WORD *)__int16 v373 = 2114;
          __int16 v384 = 2114;
          *(void *)v387 = v83;
          v388[0] = v354 / 0x3E8;
          *(_DWORD *)((char *)&v388[1] + 2) = v354 % 0x3E8;
          *(_DWORD *)v389 = v358 / 0x3E8;
          *(_DWORD *)&v389[6] = v358 % 0x3E8;
          *(_DWORD *)&v389[12] = v361 / 0x3E8;
          *(_DWORD *)&v389[18] = v361 % 0x3E8;
          *(_DWORD *)&v389[24] = v359 / 0x3E8;
          *(_DWORD *)&v389[30] = v359 % 0x3E8;
          *(_DWORD *)&v389[36] = v363 / 0x3E8;
          *(_DWORD *)&v389[42] = v363 % 0x3E8;
          *(_WORD *)&v372[20] = 2082;
          __int16 v374 = 2082;
          __int16 v380 = 2082;
          __int16 v382 = 2082;
          __int16 v386 = 2082;
          *(_WORD *)&v389[46] = 2082;
          *(void *)&v389[48] = v367;
          *(_DWORD *)&v389[58] = v366 / 0x3E8;
          *(_DWORD *)&v389[64] = v366 % 0x3E8;
          *(_DWORD *)&v389[70] = transport_connect_milliseconds / 0x3E8;
          *(_DWORD *)&v389[76] = transport_connect_milliseconds % 0x3E8;
          *(void *)&v389[82] = v230;
          *(void *)&v389[92] = v232;
          *(void *)&v389[102] = v228;
          *(void *)&v389[112] = v229;
          *(_DWORD *)&v389[122] = v236 / 0x3E8;
          *(_DWORD *)&v389[128] = v236 % 0x3E8;
          *(void *)&v389[164] = v234;
          *(_WORD *)&v389[80] = 2048;
          *(_WORD *)&v389[90] = 2048;
          *(_WORD *)&v389[100] = 2048;
          *(_WORD *)&v389[110] = 2048;
          *(_WORD *)&v389[132] = 2048;
          *(_WORD *)&v389[142] = 2048;
          *(_WORD *)&v389[152] = 2048;
          *(_WORD *)&v389[162] = 2048;
          *(_WORD *)&v389[172] = 2048;
          *(_WORD *)&v389[182] = 2048;
          LOWORD(v388[1]) = 1024;
          HIWORD(v388[2]) = 1024;
          *(_WORD *)&v389[4] = 1024;
          *(_WORD *)&v389[10] = 1024;
          *(_WORD *)&v389[16] = 1024;
          *(_WORD *)&v389[22] = 1024;
          *(_WORD *)&v389[28] = 1024;
          *(_WORD *)&v389[34] = 1024;
          *(_WORD *)&v389[40] = 1024;
          *(_WORD *)&v389[56] = 1024;
          *(_WORD *)&v389[62] = 1024;
          *(_WORD *)&v389[68] = 1024;
          *(_WORD *)&v389[74] = 1024;
          *(_WORD *)&v389[120] = 1024;
          *(_WORD *)&v389[126] = 1024;
          *(_WORD *)&v387[8] = 1024;
          *(_DWORD *)netcore_stats_tcp_report buf = 67118850;
          id v385 = v357;
          os_log_type_t v129 = "[C%u %{public,uuid_t}.16P %{public}s %{public}@] cancelled\n"
                 "\t[C%{public}s %{public,uuid_t}.16P %{public}s<->%{public}s]\n"
                 "\tConnected Path: %{public}@\n"
                 "\tPrivacy Stance: %{public}s\n"
                 "\tDuration: %u.%03us, Bonjour @%u.%03us took %u.%03us, DNS @%u.%03us took %u.%03us, %{public}s @%u.%03u"
                 "s took %u.%03us\n"
                 "\tbytes in/out: %llu/%llu, packets in/out: %llu/%llu, rtt: %u.%03us, retransmitted bytes: %llu, out-of-"
                 "order bytes: %llu\n"
                 "\tecn packets sent/acked/marked/lost: %llu/%llu/%llu/%llu";
          id v130 = v62;
          uint32_t v131 = 316;
        }
      }
      else if ((*((unsigned char *)v1 + 109) & 4) != 0)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        os_log_type_t v62 = (id)gconnectionLogObj;
        if (!os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_270;
        }
        uint64_t v356 = v55;
        unsigned int v154 = v1->top_id;
        char v155 = nw_endpoint_get_logging_description(v1->endpoint);
        os_log_type_t v156 = v1->parameters;
        __int16 v157 = nw_endpoint_handler_get_id_string(v53);
        __int16 v158 = nw_endpoint_get_description(v54);
        uint64_t v159 = nw_endpoint_get_logging_description(v356);
        *(_DWORD *)netcore_stats_tcp_report buf = 67115522;
        *(_DWORD *)v372 = v154;
        *(_WORD *)&v372[4] = 1042;
        *(_DWORD *)&v372[6] = 16;
        *(_WORD *)&v372[10] = 2098;
        *(void *)&v372[12] = v1->top_uuid;
        *(_WORD *)&v372[20] = 2082;
        *(void *)&v372[22] = v155;
        *(_WORD *)__int16 v373 = 2114;
        *(void *)&v373[2] = v156;
        __int16 v374 = 2082;
        __int16 v375 = v157;
        __int16 v376 = 1042;
        int v377 = 16;
        __int16 v378 = 2098;
        uint64_t v379 = v394;
        __int16 v380 = 2082;
        nw_endpoint_t v381 = v158;
        __int16 v382 = 2082;
        v383 = v159;
        __int16 v384 = 2114;
        id v385 = v357;
        __int16 v386 = 1024;
        *(_DWORD *)v387 = v354 / 0x3E8;
        *(_WORD *)&v387[4] = 1024;
        *(_DWORD *)&v387[6] = v354 % 0x3E8;
        LOWORD(v388[0]) = 1024;
        *(_DWORD *)((char *)v388 + 2) = v358 / 0x3E8;
        HIWORD(v388[1]) = 1024;
        v388[2] = v358 % 0x3E8;
        *(_WORD *)v389 = 1024;
        *(_DWORD *)&v389[2] = v361 / 0x3E8;
        *(_WORD *)&v389[6] = 1024;
        *(_DWORD *)&v389[8] = v361 % 0x3E8;
        *(_WORD *)&v389[12] = 1024;
        *(_DWORD *)&v389[14] = v359 / 0x3E8;
        *(_WORD *)&v389[18] = 1024;
        *(_DWORD *)&v389[20] = v359 % 0x3E8;
        *(_WORD *)&v389[24] = 1024;
        *(_DWORD *)&v389[26] = v363 / 0x3E8;
        *(_WORD *)&v389[30] = 1024;
        *(_DWORD *)&v389[32] = v363 % 0x3E8;
        *(_WORD *)&v389[36] = 2082;
        *(void *)&v389[38] = v367;
        *(_WORD *)&v389[46] = 1024;
        *(_DWORD *)&v389[48] = v366 / 0x3E8;
        *(_WORD *)&v389[52] = 1024;
        *(_DWORD *)&v389[54] = v366 % 0x3E8;
        *(_WORD *)&v389[58] = 1024;
        *(_DWORD *)&v389[60] = transport_connect_milliseconds / 0x3E8;
        *(_WORD *)&v389[64] = 1024;
        *(_DWORD *)&v389[66] = transport_connect_milliseconds % 0x3E8;
        os_log_type_t v129 = "[C%u %{public,uuid_t}.16P %{public}s %{public}@] cancelled\n"
               "\t[C%{public}s %{public,uuid_t}.16P %{public}s<->%{public}s]\n"
               "\tConnected Path: %{public}@\n"
               "\tDuration: %u.%03us, Bonjour @%u.%03us took %u.%03us, DNS @%u.%03us took %u.%03us, %{public}s @%u.%03us took %u.%03us";
        id v130 = v62;
        uint32_t v131 = 194;
      }
      else
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        os_log_type_t v62 = (id)gconnectionLogObj;
        if (!os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_270;
        }
        uint64_t v356 = v55;
        unsigned int v99 = v1->top_id;
        BOOL v100 = nw_endpoint_get_logging_description(v1->endpoint);
        int v101 = v1->parameters;
        BOOL v102 = nw_endpoint_handler_get_id_string(v53);
        os_log_type_t v103 = nw_endpoint_get_description(v54);
        os_log_type_t v104 = nw_endpoint_get_logging_description(v356);
        if ((privacy_stance - 1) > 4) {
          os_log_type_t v105 = "Unknown";
        }
        else {
          os_log_type_t v105 = off_1E523B910[privacy_stance - 1];
        }
        *(_DWORD *)netcore_stats_tcp_report buf = 67115778;
        *(_DWORD *)v372 = v99;
        *(_WORD *)&v372[4] = 1042;
        *(_DWORD *)&v372[6] = 16;
        *(_WORD *)&v372[10] = 2098;
        *(void *)&v372[12] = v1->top_uuid;
        *(_WORD *)&v372[20] = 2082;
        *(void *)&v372[22] = v100;
        *(_WORD *)__int16 v373 = 2114;
        *(void *)&v373[2] = v101;
        __int16 v374 = 2082;
        __int16 v375 = v102;
        __int16 v376 = 1042;
        int v377 = 16;
        __int16 v378 = 2098;
        uint64_t v379 = v394;
        __int16 v380 = 2082;
        nw_endpoint_t v381 = v103;
        __int16 v382 = 2082;
        v383 = v104;
        __int16 v384 = 2114;
        id v385 = v357;
        __int16 v386 = 2082;
        *(void *)v387 = v105;
        *(_WORD *)&v387[8] = 1024;
        v388[0] = v354 / 0x3E8;
        LOWORD(v388[1]) = 1024;
        *(_DWORD *)((char *)&v388[1] + 2) = v354 % 0x3E8;
        HIWORD(v388[2]) = 1024;
        *(_DWORD *)v389 = v358 / 0x3E8;
        *(_WORD *)&v389[4] = 1024;
        *(_DWORD *)&v389[6] = v358 % 0x3E8;
        *(_WORD *)&v389[10] = 1024;
        *(_DWORD *)&v389[12] = v361 / 0x3E8;
        *(_WORD *)&v389[16] = 1024;
        *(_DWORD *)&v389[18] = v361 % 0x3E8;
        *(_WORD *)&v389[22] = 1024;
        *(_DWORD *)&v389[24] = v359 / 0x3E8;
        *(_WORD *)&v389[28] = 1024;
        *(_DWORD *)&v389[30] = v359 % 0x3E8;
        *(_WORD *)&v389[34] = 1024;
        *(_DWORD *)&v389[36] = v363 / 0x3E8;
        *(_WORD *)&v389[40] = 1024;
        *(_DWORD *)&v389[42] = v363 % 0x3E8;
        *(_WORD *)&v389[46] = 2082;
        *(void *)&v389[48] = v367;
        *(_WORD *)&v389[56] = 1024;
        *(_DWORD *)&v389[58] = v366 / 0x3E8;
        *(_WORD *)&v389[62] = 1024;
        *(_DWORD *)&v389[64] = v366 % 0x3E8;
        *(_WORD *)&v389[68] = 1024;
        *(_DWORD *)&v389[70] = transport_connect_milliseconds / 0x3E8;
        *(_WORD *)&v389[74] = 1024;
        *(_DWORD *)&v389[76] = transport_connect_milliseconds % 0x3E8;
        os_log_type_t v129 = "[C%u %{public,uuid_t}.16P %{public}s %{public}@] cancelled\n"
               "\t[C%{public}s %{public,uuid_t}.16P %{public}s<->%{public}s]\n"
               "\tConnected Path: %{public}@\n"
               "\tPrivacy Stance: %{public}s\n"
               "\tDuration: %u.%03us, Bonjour @%u.%03us took %u.%03us, DNS @%u.%03us took %u.%03us, %{public}s @%u.%03us took %u.%03us";
        id v130 = v62;
        uint32_t v131 = 204;
      }
      goto LABEL_253;
    }
    if (v5)
    {
      if (v3)
      {
        uint64_t v69 = *((void *)&off_1E5249E08 + nw_connection_get_tls_version(v1));
        if (v370)
        {
          if ((*((unsigned char *)v1 + 109) & 4) != 0)
          {
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
            }
            os_log_type_t v62 = (id)gconnectionLogObj;
            if (!os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_270;
            }
            uint64_t v356 = v55;
            v348 = v54;
            unsigned int v195 = v1->top_id;
            id v196 = nw_endpoint_get_logging_description(v1->endpoint);
            nw_endpoint_t v197 = v1->parameters;
            char v198 = nw_endpoint_handler_get_id_string(v53);
            uint64_t v199 = nw_endpoint_get_description(v348);
            uint64_t v200 = nw_endpoint_get_logging_description(v356);
            uint64_t v201 = *((void *)v370 + 1);
            uint64_t v202 = *((void *)v370 + 5);
            uint64_t v203 = *((void *)v370 + 6);
            uint64_t v205 = *((void *)v370 + 8);
            uint64_t v204 = *((void *)v370 + 9);
            uint64_t v206 = *((void *)v370 + 10);
            uint64_t v208 = *((void *)v370 + 12);
            uint64_t v207 = *((void *)v370 + 13);
            uint64_t v209 = *((void *)v370 + 14);
            uint64_t v210 = *((void *)v370 + 15);
            *(void *)&v389[142] = *((void *)v370 + 11);
            *(void *)&v389[152] = v208;
            *(void *)&v389[162] = v207;
            *(_DWORD *)v372 = v195;
            *(void *)&v372[12] = v1->top_uuid;
            *(void *)&v372[22] = v196;
            *(void *)&v373[2] = v197;
            __int16 v375 = v198;
            *(_WORD *)&v372[4] = 1042;
            __int16 v376 = 1042;
            *(_DWORD *)&v372[6] = 16;
            int v377 = 16;
            *(_WORD *)&v372[10] = 2098;
            __int16 v378 = 2098;
            uint64_t v379 = v394;
            nw_endpoint_t v381 = v199;
            v383 = v200;
            *(_WORD *)__int16 v373 = 2114;
            __int16 v384 = 2114;
            *(_DWORD *)v387 = v354 / 0x3E8;
            *(_DWORD *)((char *)v388 + 2) = v359 / 0x3E8;
            v388[2] = v359 % 0x3E8;
            *(_DWORD *)&v389[2] = v363 / 0x3E8;
            *(_DWORD *)&v389[8] = v363 % 0x3E8;
            *(void *)&v389[14] = v367;
            *(_DWORD *)&v389[24] = v366 / 0x3E8;
            *(_DWORD *)&v389[30] = v366 % 0x3E8;
            *(_DWORD *)&v389[36] = transport_connect_milliseconds / 0x3E8;
            *(_DWORD *)&v389[42] = transport_connect_milliseconds % 0x3E8;
            *(_WORD *)&v372[20] = 2082;
            __int16 v374 = 2082;
            __int16 v380 = 2082;
            __int16 v382 = 2082;
            *(_WORD *)&v389[12] = 2082;
            *(_WORD *)&v389[46] = 2082;
            *(void *)&v389[48] = v69;
            *(_DWORD *)&v389[58] = handshake_ms_for_protocol / 0x3E8;
            *(_DWORD *)&v389[64] = handshake_ms_for_protocol % 0x3E8;
            *(void *)&v389[70] = v203;
            *(void *)&v389[80] = v204;
            *(void *)&v389[90] = v201;
            *(void *)&v389[100] = v202;
            *(_DWORD *)&v389[110] = v210 / 0x3E8;
            *(_DWORD *)&v389[116] = v210 % 0x3E8;
            *(void *)&v389[122] = v206;
            *(void *)&v389[132] = v205;
            *(_WORD *)&v389[68] = 2048;
            *(_WORD *)&v389[78] = 2048;
            *(_WORD *)&v389[88] = 2048;
            *(_WORD *)&v389[98] = 2048;
            *(_WORD *)&v389[120] = 2048;
            *(_WORD *)&v389[130] = 2048;
            *(_WORD *)&v389[140] = 2048;
            *(_WORD *)&v389[150] = 2048;
            *(_WORD *)&v389[160] = 2048;
            *(_WORD *)&v389[170] = 2048;
            *(void *)&v389[172] = v209;
            LOWORD(v388[0]) = 1024;
            HIWORD(v388[1]) = 1024;
            *(_WORD *)v389 = 1024;
            *(_WORD *)&v389[6] = 1024;
            *(_WORD *)&v389[22] = 1024;
            *(_WORD *)&v389[28] = 1024;
            *(_WORD *)&v389[34] = 1024;
            *(_WORD *)&v389[40] = 1024;
            *(_WORD *)&v389[56] = 1024;
            *(_WORD *)&v389[62] = 1024;
            *(_WORD *)&v389[108] = 1024;
            *(_WORD *)&v389[114] = 1024;
            __int16 v386 = 1024;
            *(_WORD *)&v387[4] = 1024;
            *(_DWORD *)&v387[6] = v354 % 0x3E8;
            *(_DWORD *)netcore_stats_tcp_report buf = 67118338;
            id v385 = v357;
            char v211 = "[C%u %{public,uuid_t}.16P %{public}s %{public}@] cancelled\n"
                   "\t[C%{public}s %{public,uuid_t}.16P %{public}s<->%{public}s]\n"
                   "\tConnected Path: %{public}@\n"
                   "\tDuration: %u.%03us, DNS @%u.%03us took %u.%03us, %{public}s @%u.%03us took %u.%03us, %{public}s too"
                   "k %u.%03us\n"
                   "\tbytes in/out: %llu/%llu, packets in/out: %llu/%llu, rtt: %u.%03us, retransmitted bytes: %llu, out-o"
                   "f-order bytes: %llu\n"
                   "\tecn packets sent/acked/marked/lost: %llu/%llu/%llu/%llu";
            v212 = v62;
            uint32_t v213 = 304;
          }
          else
          {
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
            }
            os_log_type_t v62 = (id)gconnectionLogObj;
            if (!os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_270;
            }
            uint64_t v356 = v55;
            v348 = v54;
            unsigned int v70 = v1->top_id;
            os_log_type_t v71 = nw_endpoint_get_logging_description(v1->endpoint);
            uint64_t v72 = v1->parameters;
            os_log_type_t v73 = nw_endpoint_handler_get_id_string(v53);
            __int16 v74 = nw_endpoint_get_description(v348);
            os_log_type_t v75 = nw_endpoint_get_logging_description(v356);
            if ((privacy_stance - 1) > 4) {
              BOOL v76 = "Unknown";
            }
            else {
              BOOL v76 = off_1E523B910[privacy_stance - 1];
            }
            uint64_t v317 = *((void *)v370 + 1);
            uint64_t v318 = *((void *)v370 + 5);
            uint64_t v319 = *((void *)v370 + 6);
            uint64_t v320 = *((void *)v370 + 9);
            uint64_t v322 = *((void *)v370 + 10);
            uint64_t v321 = *((void *)v370 + 11);
            uint64_t v323 = *((void *)v370 + 12);
            uint64_t v324 = *((void *)v370 + 13);
            uint64_t v326 = *((void *)v370 + 14);
            uint64_t v325 = *((void *)v370 + 15);
            *(void *)&v389[142] = *((void *)v370 + 8);
            *(void *)&v389[152] = v321;
            *(void *)&v389[162] = v323;
            *(void *)&v389[182] = v326;
            *(_DWORD *)v372 = v70;
            *(void *)&v372[12] = v1->top_uuid;
            *(void *)&v372[22] = v71;
            *(void *)&v373[2] = v72;
            __int16 v375 = v73;
            *(_WORD *)&v372[4] = 1042;
            __int16 v376 = 1042;
            *(_DWORD *)&v372[6] = 16;
            int v377 = 16;
            *(_WORD *)&v372[10] = 2098;
            __int16 v378 = 2098;
            uint64_t v379 = v394;
            nw_endpoint_t v381 = v74;
            v383 = v75;
            *(_WORD *)__int16 v373 = 2114;
            __int16 v384 = 2114;
            *(void *)v387 = v76;
            v388[0] = v354 / 0x3E8;
            *(_DWORD *)((char *)&v388[1] + 2) = v354 % 0x3E8;
            *(_DWORD *)v389 = v359 / 0x3E8;
            *(_DWORD *)&v389[6] = v359 % 0x3E8;
            *(_DWORD *)&v389[12] = v363 / 0x3E8;
            *(_DWORD *)&v389[18] = v363 % 0x3E8;
            *(void *)&v389[24] = v367;
            *(_DWORD *)&v389[34] = v366 / 0x3E8;
            *(_DWORD *)&v389[40] = v366 % 0x3E8;
            *(_DWORD *)&v389[46] = transport_connect_milliseconds / 0x3E8;
            *(_DWORD *)&v389[52] = transport_connect_milliseconds % 0x3E8;
            *(_WORD *)&v372[20] = 2082;
            __int16 v374 = 2082;
            __int16 v380 = 2082;
            __int16 v382 = 2082;
            __int16 v386 = 2082;
            *(_WORD *)&v389[22] = 2082;
            *(_WORD *)&v389[56] = 2082;
            *(void *)&v389[58] = v69;
            *(_DWORD *)&v389[68] = handshake_ms_for_protocol / 0x3E8;
            *(_DWORD *)&v389[74] = handshake_ms_for_protocol % 0x3E8;
            *(void *)&v389[80] = v319;
            *(void *)&v389[90] = v320;
            *(void *)&v389[100] = v317;
            *(void *)&v389[110] = v318;
            *(_DWORD *)&v389[120] = v325 / 0x3E8;
            *(_DWORD *)&v389[126] = v325 % 0x3E8;
            *(void *)&v389[132] = v322;
            *(void *)&v389[172] = v324;
            *(_WORD *)&v389[78] = 2048;
            *(_WORD *)&v389[88] = 2048;
            *(_WORD *)&v389[98] = 2048;
            *(_WORD *)&v389[108] = 2048;
            *(_WORD *)&v389[130] = 2048;
            *(_WORD *)&v389[140] = 2048;
            *(_WORD *)&v389[150] = 2048;
            *(_WORD *)&v389[160] = 2048;
            *(_WORD *)&v389[170] = 2048;
            *(_WORD *)&v389[180] = 2048;
            LOWORD(v388[1]) = 1024;
            HIWORD(v388[2]) = 1024;
            *(_WORD *)&v389[4] = 1024;
            *(_WORD *)&v389[10] = 1024;
            *(_WORD *)&v389[16] = 1024;
            *(_WORD *)&v389[32] = 1024;
            *(_WORD *)&v389[38] = 1024;
            *(_WORD *)&v389[44] = 1024;
            *(_WORD *)&v389[50] = 1024;
            *(_WORD *)&v389[66] = 1024;
            *(_WORD *)&v389[72] = 1024;
            *(_WORD *)&v389[118] = 1024;
            *(_WORD *)&v389[124] = 1024;
            *(_WORD *)&v387[8] = 1024;
            *(_DWORD *)netcore_stats_tcp_report buf = 67118594;
            id v385 = v357;
            char v211 = "[C%u %{public,uuid_t}.16P %{public}s %{public}@] cancelled\n"
                   "\t[C%{public}s %{public,uuid_t}.16P %{public}s<->%{public}s]\n"
                   "\tConnected Path: %{public}@\n"
                   "\tPrivacy Stance: %{public}s\n"
                   "\tDuration: %u.%03us, DNS @%u.%03us took %u.%03us, %{public}s @%u.%03us took %u.%03us, %{public}s too"
                   "k %u.%03us\n"
                   "\tbytes in/out: %llu/%llu, packets in/out: %llu/%llu, rtt: %u.%03us, retransmitted bytes: %llu, out-o"
                   "f-order bytes: %llu\n"
                   "\tecn packets sent/acked/marked/lost: %llu/%llu/%llu/%llu";
            v212 = v62;
            uint32_t v213 = 314;
          }
        }
        else if ((*((unsigned char *)v1 + 109) & 4) != 0)
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          os_log_type_t v62 = (id)gconnectionLogObj;
          if (!os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_270;
          }
          uint64_t v356 = v55;
          v348 = v54;
          unsigned int v289 = v1->top_id;
          v290 = nw_endpoint_get_logging_description(v1->endpoint);
          v291 = v1->parameters;
          v292 = nw_endpoint_handler_get_id_string(v53);
          os_log_type_t v293 = nw_endpoint_get_description(v348);
          v294 = nw_endpoint_get_logging_description(v356);
          *(_DWORD *)netcore_stats_tcp_report buf = 67115266;
          *(_DWORD *)v372 = v289;
          *(_WORD *)&v372[4] = 1042;
          *(_DWORD *)&v372[6] = 16;
          *(_WORD *)&v372[10] = 2098;
          *(void *)&v372[12] = v1->top_uuid;
          *(_WORD *)&v372[20] = 2082;
          *(void *)&v372[22] = v290;
          *(_WORD *)__int16 v373 = 2114;
          *(void *)&v373[2] = v291;
          __int16 v374 = 2082;
          __int16 v375 = v292;
          __int16 v376 = 1042;
          int v377 = 16;
          __int16 v378 = 2098;
          uint64_t v379 = v394;
          __int16 v380 = 2082;
          nw_endpoint_t v381 = v293;
          __int16 v382 = 2082;
          v383 = v294;
          __int16 v384 = 2114;
          id v385 = v357;
          __int16 v386 = 1024;
          *(_DWORD *)v387 = v354 / 0x3E8;
          *(_WORD *)&v387[4] = 1024;
          *(_DWORD *)&v387[6] = v354 % 0x3E8;
          LOWORD(v388[0]) = 1024;
          *(_DWORD *)((char *)v388 + 2) = v359 / 0x3E8;
          HIWORD(v388[1]) = 1024;
          v388[2] = v359 % 0x3E8;
          *(_WORD *)v389 = 1024;
          *(_DWORD *)&v389[2] = v363 / 0x3E8;
          *(_WORD *)&v389[6] = 1024;
          *(_DWORD *)&v389[8] = v363 % 0x3E8;
          *(_WORD *)&v389[12] = 2082;
          *(void *)&v389[14] = v367;
          *(_WORD *)&v389[22] = 1024;
          *(_DWORD *)&v389[24] = v366 / 0x3E8;
          *(_WORD *)&v389[28] = 1024;
          *(_DWORD *)&v389[30] = v366 % 0x3E8;
          *(_WORD *)&v389[34] = 1024;
          *(_DWORD *)&v389[36] = transport_connect_milliseconds / 0x3E8;
          *(_WORD *)&v389[40] = 1024;
          *(_DWORD *)&v389[42] = transport_connect_milliseconds % 0x3E8;
          *(_WORD *)&v389[46] = 2082;
          *(void *)&v389[48] = v69;
          *(_WORD *)&v389[56] = 1024;
          *(_DWORD *)&v389[58] = handshake_ms_for_protocol / 0x3E8;
          *(_WORD *)&v389[62] = 1024;
          *(_DWORD *)&v389[64] = handshake_ms_for_protocol % 0x3E8;
          char v211 = "[C%u %{public,uuid_t}.16P %{public}s %{public}@] cancelled\n"
                 "\t[C%{public}s %{public,uuid_t}.16P %{public}s<->%{public}s]\n"
                 "\tConnected Path: %{public}@\n"
                 "\tDuration: %u.%03us, DNS @%u.%03us took %u.%03us, %{public}s @%u.%03us took %u.%03us, %{public}s took %u.%03us";
          v212 = v62;
          uint32_t v213 = 192;
        }
        else
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          os_log_type_t v62 = (id)gconnectionLogObj;
          if (!os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_270;
          }
          uint64_t v356 = v55;
          v348 = v54;
          unsigned int v172 = v1->top_id;
          size_t v173 = nw_endpoint_get_logging_description(v1->endpoint);
          __int16 v174 = v1->parameters;
          unsigned int v175 = nw_endpoint_handler_get_id_string(v53);
          __int16 v176 = nw_endpoint_get_description(v348);
          int v177 = nw_endpoint_get_logging_description(v356);
          if ((privacy_stance - 1) > 4) {
            v178 = "Unknown";
          }
          else {
            v178 = off_1E523B910[privacy_stance - 1];
          }
          *(_DWORD *)netcore_stats_tcp_report buf = 67115522;
          *(_DWORD *)v372 = v172;
          *(_WORD *)&v372[4] = 1042;
          *(_DWORD *)&v372[6] = 16;
          *(_WORD *)&v372[10] = 2098;
          *(void *)&v372[12] = v1->top_uuid;
          *(_WORD *)&v372[20] = 2082;
          *(void *)&v372[22] = v173;
          *(_WORD *)__int16 v373 = 2114;
          *(void *)&v373[2] = v174;
          __int16 v374 = 2082;
          __int16 v375 = v175;
          __int16 v376 = 1042;
          int v377 = 16;
          __int16 v378 = 2098;
          uint64_t v379 = v394;
          __int16 v380 = 2082;
          nw_endpoint_t v381 = v176;
          __int16 v382 = 2082;
          v383 = v177;
          __int16 v384 = 2114;
          id v385 = v357;
          __int16 v386 = 2082;
          *(void *)v387 = v178;
          *(_WORD *)&v387[8] = 1024;
          v388[0] = v354 / 0x3E8;
          LOWORD(v388[1]) = 1024;
          *(_DWORD *)((char *)&v388[1] + 2) = v354 % 0x3E8;
          HIWORD(v388[2]) = 1024;
          *(_DWORD *)v389 = v359 / 0x3E8;
          *(_WORD *)&v389[4] = 1024;
          *(_DWORD *)&v389[6] = v359 % 0x3E8;
          *(_WORD *)&v389[10] = 1024;
          *(_DWORD *)&v389[12] = v363 / 0x3E8;
          *(_WORD *)&v389[16] = 1024;
          *(_DWORD *)&v389[18] = v363 % 0x3E8;
          *(_WORD *)&v389[22] = 2082;
          *(void *)&v389[24] = v367;
          *(_WORD *)&v389[32] = 1024;
          *(_DWORD *)&v389[34] = v366 / 0x3E8;
          *(_WORD *)&v389[38] = 1024;
          *(_DWORD *)&v389[40] = v366 % 0x3E8;
          *(_WORD *)&v389[44] = 1024;
          *(_DWORD *)&v389[46] = transport_connect_milliseconds / 0x3E8;
          *(_WORD *)&v389[50] = 1024;
          *(_DWORD *)&v389[52] = transport_connect_milliseconds % 0x3E8;
          *(_WORD *)&v389[56] = 2082;
          *(void *)&v389[58] = v69;
          *(_WORD *)&v389[66] = 1024;
          *(_DWORD *)&v389[68] = handshake_ms_for_protocol / 0x3E8;
          *(_WORD *)&v389[72] = 1024;
          *(_DWORD *)&v389[74] = handshake_ms_for_protocol % 0x3E8;
          char v211 = "[C%u %{public,uuid_t}.16P %{public}s %{public}@] cancelled\n"
                 "\t[C%{public}s %{public,uuid_t}.16P %{public}s<->%{public}s]\n"
                 "\tConnected Path: %{public}@\n"
                 "\tPrivacy Stance: %{public}s\n"
                 "\tDuration: %u.%03us, DNS @%u.%03us took %u.%03us, %{public}s @%u.%03us took %u.%03us, %{public}s took %u.%03us";
          v212 = v62;
          uint32_t v213 = 202;
        }
LABEL_268:
        _os_log_impl(&dword_1830D4000, v212, OS_LOG_TYPE_DEFAULT, v211, buf, v213);
        id v54 = v348;
        goto LABEL_269;
      }
      if (v370)
      {
        if ((*((unsigned char *)v1 + 109) & 4) != 0)
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          os_log_type_t v62 = (id)gconnectionLogObj;
          if (!os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_270;
          }
          uint64_t v356 = v55;
          unsigned int v179 = v1->top_id;
          __int16 v180 = nw_endpoint_get_logging_description(v1->endpoint);
          v181 = v1->parameters;
          uint64_t v182 = nw_endpoint_handler_get_id_string(v53);
          nw_endpoint_t v183 = nw_endpoint_get_description(v54);
          nw_endpoint_t v184 = nw_endpoint_get_logging_description(v356);
          uint64_t v185 = *((void *)v370 + 1);
          uint64_t v186 = *((void *)v370 + 5);
          uint64_t v187 = *((void *)v370 + 6);
          uint64_t v189 = *((void *)v370 + 8);
          uint64_t v188 = *((void *)v370 + 9);
          uint64_t v191 = *((void *)v370 + 10);
          uint64_t v190 = *((void *)v370 + 11);
          uint64_t v192 = *((void *)v370 + 12);
          uint64_t v193 = *((void *)v370 + 13);
          uint64_t v194 = *((void *)v370 + 15);
          *(void *)&v389[150] = *((void *)v370 + 14);
          *(_DWORD *)v372 = v179;
          *(void *)&v372[12] = v1->top_uuid;
          *(void *)&v372[22] = v180;
          *(void *)&v373[2] = v181;
          __int16 v375 = v182;
          *(_WORD *)&v372[4] = 1042;
          __int16 v376 = 1042;
          *(_DWORD *)&v372[6] = 16;
          int v377 = 16;
          *(_WORD *)&v372[10] = 2098;
          __int16 v378 = 2098;
          uint64_t v379 = v394;
          nw_endpoint_t v381 = v183;
          v383 = v184;
          *(_WORD *)__int16 v373 = 2114;
          __int16 v384 = 2114;
          *(_DWORD *)v387 = v354 / 0x3E8;
          *(_DWORD *)((char *)v388 + 2) = v359 / 0x3E8;
          v388[2] = v359 % 0x3E8;
          *(_DWORD *)&v389[2] = v363 / 0x3E8;
          *(_DWORD *)&v389[8] = v363 % 0x3E8;
          *(_WORD *)&v372[20] = 2082;
          __int16 v374 = 2082;
          __int16 v380 = 2082;
          __int16 v382 = 2082;
          *(_WORD *)&v389[12] = 2082;
          *(void *)&v389[14] = v367;
          *(_DWORD *)&v389[24] = v366 / 0x3E8;
          *(_DWORD *)&v389[30] = v366 % 0x3E8;
          *(_DWORD *)&v389[36] = transport_connect_milliseconds / 0x3E8;
          *(_DWORD *)&v389[42] = transport_connect_milliseconds % 0x3E8;
          *(void *)&v389[48] = v187;
          *(void *)&v389[58] = v188;
          *(void *)&v389[68] = v185;
          *(void *)&v389[78] = v186;
          *(_DWORD *)&v389[88] = v194 / 0x3E8;
          *(_DWORD *)&v389[94] = v194 % 0x3E8;
          *(void *)&v389[100] = v191;
          *(void *)&v389[110] = v189;
          *(void *)&v389[120] = v190;
          *(void *)&v389[130] = v192;
          *(void *)&v389[140] = v193;
          *(_WORD *)&v389[46] = 2048;
          *(_WORD *)&v389[56] = 2048;
          *(_WORD *)&v389[66] = 2048;
          *(_WORD *)&v389[76] = 2048;
          *(_WORD *)&v389[98] = 2048;
          *(_WORD *)&v389[108] = 2048;
          *(_WORD *)&v389[118] = 2048;
          *(_WORD *)&v389[128] = 2048;
          *(_WORD *)&v389[138] = 2048;
          *(_WORD *)&v389[148] = 2048;
          LOWORD(v388[0]) = 1024;
          HIWORD(v388[1]) = 1024;
          *(_WORD *)v389 = 1024;
          *(_WORD *)&v389[6] = 1024;
          *(_WORD *)&v389[22] = 1024;
          *(_WORD *)&v389[28] = 1024;
          *(_WORD *)&v389[34] = 1024;
          *(_WORD *)&v389[40] = 1024;
          *(_WORD *)&v389[86] = 1024;
          *(_WORD *)&v389[92] = 1024;
          __int16 v386 = 1024;
          *(_WORD *)&v387[4] = 1024;
          *(_DWORD *)&v387[6] = v354 % 0x3E8;
          *(_DWORD *)netcore_stats_tcp_report buf = 67117570;
          id v385 = v357;
          os_log_type_t v129 = "[C%u %{public,uuid_t}.16P %{public}s %{public}@] cancelled\n"
                 "\t[C%{public}s %{public,uuid_t}.16P %{public}s<->%{public}s]\n"
                 "\tConnected Path: %{public}@\n"
                 "\tDuration: %u.%03us, DNS @%u.%03us took %u.%03us, %{public}s @%u.%03us took %u.%03us\n"
                 "\tbytes in/out: %llu/%llu, packets in/out: %llu/%llu, rtt: %u.%03us, retransmitted bytes: %llu, out-of-"
                 "order bytes: %llu\n"
                 "\tecn packets sent/acked/marked/lost: %llu/%llu/%llu/%llu";
          id v130 = v62;
          uint32_t v131 = 282;
        }
        else
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          os_log_type_t v62 = (id)gconnectionLogObj;
          if (!os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_270;
          }
          uint64_t v356 = v55;
          unsigned int v92 = v1->top_id;
          uint64_t v93 = nw_endpoint_get_logging_description(v1->endpoint);
          os_log_type_t v94 = v1->parameters;
          uint64_t v95 = nw_endpoint_handler_get_id_string(v53);
          os_log_type_t v96 = nw_endpoint_get_description(v54);
          BOOL v97 = nw_endpoint_get_logging_description(v356);
          if ((privacy_stance - 1) > 4) {
            os_log_type_t v98 = "Unknown";
          }
          else {
            os_log_type_t v98 = off_1E523B910[privacy_stance - 1];
          }
          uint64_t v307 = *((void *)v370 + 1);
          uint64_t v308 = *((void *)v370 + 5);
          uint64_t v309 = *((void *)v370 + 6);
          uint64_t v311 = *((void *)v370 + 8);
          uint64_t v310 = *((void *)v370 + 9);
          uint64_t v313 = *((void *)v370 + 10);
          uint64_t v312 = *((void *)v370 + 11);
          uint64_t v314 = *((void *)v370 + 12);
          uint64_t v316 = *((void *)v370 + 14);
          uint64_t v315 = *((void *)v370 + 15);
          *(void *)&v389[150] = *((void *)v370 + 13);
          *(void *)&v389[160] = v316;
          *(_DWORD *)v372 = v92;
          *(void *)&v372[12] = v1->top_uuid;
          *(void *)&v372[22] = v93;
          *(void *)&v373[2] = v94;
          __int16 v375 = v95;
          *(_WORD *)&v372[4] = 1042;
          __int16 v376 = 1042;
          *(_DWORD *)&v372[6] = 16;
          int v377 = 16;
          *(_WORD *)&v372[10] = 2098;
          __int16 v378 = 2098;
          uint64_t v379 = v394;
          nw_endpoint_t v381 = v96;
          v383 = v97;
          *(_WORD *)__int16 v373 = 2114;
          __int16 v384 = 2114;
          *(void *)v387 = v98;
          v388[0] = v354 / 0x3E8;
          *(_DWORD *)((char *)&v388[1] + 2) = v354 % 0x3E8;
          *(_DWORD *)v389 = v359 / 0x3E8;
          *(_DWORD *)&v389[6] = v359 % 0x3E8;
          *(_DWORD *)&v389[12] = v363 / 0x3E8;
          *(_DWORD *)&v389[18] = v363 % 0x3E8;
          *(_WORD *)&v372[20] = 2082;
          __int16 v374 = 2082;
          __int16 v380 = 2082;
          __int16 v382 = 2082;
          __int16 v386 = 2082;
          *(_WORD *)&v389[22] = 2082;
          *(void *)&v389[24] = v367;
          *(_DWORD *)&v389[34] = v366 / 0x3E8;
          *(_DWORD *)&v389[40] = v366 % 0x3E8;
          *(_DWORD *)&v389[46] = transport_connect_milliseconds / 0x3E8;
          *(_DWORD *)&v389[52] = transport_connect_milliseconds % 0x3E8;
          *(void *)&v389[58] = v309;
          *(void *)&v389[68] = v310;
          *(void *)&v389[78] = v307;
          *(void *)&v389[88] = v308;
          *(_DWORD *)&v389[98] = v315 / 0x3E8;
          *(_DWORD *)&v389[104] = v315 % 0x3E8;
          *(void *)&v389[110] = v313;
          *(void *)&v389[120] = v311;
          *(void *)&v389[130] = v312;
          *(void *)&v389[140] = v314;
          *(_WORD *)&v389[56] = 2048;
          *(_WORD *)&v389[66] = 2048;
          *(_WORD *)&v389[76] = 2048;
          *(_WORD *)&v389[86] = 2048;
          *(_WORD *)&v389[108] = 2048;
          *(_WORD *)&v389[118] = 2048;
          *(_WORD *)&v389[128] = 2048;
          *(_WORD *)&v389[138] = 2048;
          *(_WORD *)&v389[148] = 2048;
          *(_WORD *)&v389[158] = 2048;
          LOWORD(v388[1]) = 1024;
          HIWORD(v388[2]) = 1024;
          *(_WORD *)&v389[4] = 1024;
          *(_WORD *)&v389[10] = 1024;
          *(_WORD *)&v389[16] = 1024;
          *(_WORD *)&v389[32] = 1024;
          *(_WORD *)&v389[38] = 1024;
          *(_WORD *)&v389[44] = 1024;
          *(_WORD *)&v389[50] = 1024;
          *(_WORD *)&v389[96] = 1024;
          *(_WORD *)&v389[102] = 1024;
          *(_WORD *)&v387[8] = 1024;
          *(_DWORD *)netcore_stats_tcp_report buf = 67117826;
          id v385 = v357;
          os_log_type_t v129 = "[C%u %{public,uuid_t}.16P %{public}s %{public}@] cancelled\n"
                 "\t[C%{public}s %{public,uuid_t}.16P %{public}s<->%{public}s]\n"
                 "\tConnected Path: %{public}@\n"
                 "\tPrivacy Stance: %{public}s\n"
                 "\tDuration: %u.%03us, DNS @%u.%03us took %u.%03us, %{public}s @%u.%03us took %u.%03us\n"
                 "\tbytes in/out: %llu/%llu, packets in/out: %llu/%llu, rtt: %u.%03us, retransmitted bytes: %llu, out-of-"
                 "order bytes: %llu\n"
                 "\tecn packets sent/acked/marked/lost: %llu/%llu/%llu/%llu";
          id v130 = v62;
          uint32_t v131 = 292;
        }
      }
      else if ((*((unsigned char *)v1 + 109) & 4) != 0)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        os_log_type_t v62 = (id)gconnectionLogObj;
        if (!os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_270;
        }
        uint64_t v356 = v55;
        unsigned int v267 = v1->top_id;
        nw_endpoint_t v268 = nw_endpoint_get_logging_description(v1->endpoint);
        id v269 = v1->parameters;
        id v270 = nw_endpoint_handler_get_id_string(v53);
        v271 = nw_endpoint_get_description(v54);
        v272 = nw_endpoint_get_logging_description(v356);
        *(_DWORD *)netcore_stats_tcp_report buf = 67114498;
        *(_DWORD *)v372 = v267;
        *(_WORD *)&v372[4] = 1042;
        *(_DWORD *)&v372[6] = 16;
        *(_WORD *)&v372[10] = 2098;
        *(void *)&v372[12] = v1->top_uuid;
        *(_WORD *)&v372[20] = 2082;
        *(void *)&v372[22] = v268;
        *(_WORD *)__int16 v373 = 2114;
        *(void *)&v373[2] = v269;
        __int16 v374 = 2082;
        __int16 v375 = v270;
        __int16 v376 = 1042;
        int v377 = 16;
        __int16 v378 = 2098;
        uint64_t v379 = v394;
        __int16 v380 = 2082;
        nw_endpoint_t v381 = v271;
        __int16 v382 = 2082;
        v383 = v272;
        __int16 v384 = 2114;
        id v385 = v357;
        __int16 v386 = 1024;
        *(_DWORD *)v387 = v354 / 0x3E8;
        *(_WORD *)&v387[4] = 1024;
        *(_DWORD *)&v387[6] = v354 % 0x3E8;
        LOWORD(v388[0]) = 1024;
        *(_DWORD *)((char *)v388 + 2) = v359 / 0x3E8;
        HIWORD(v388[1]) = 1024;
        v388[2] = v359 % 0x3E8;
        *(_WORD *)v389 = 1024;
        *(_DWORD *)&v389[2] = v363 / 0x3E8;
        *(_WORD *)&v389[6] = 1024;
        *(_DWORD *)&v389[8] = v363 % 0x3E8;
        *(_WORD *)&v389[12] = 2082;
        *(void *)&v389[14] = v367;
        *(_WORD *)&v389[22] = 1024;
        *(_DWORD *)&v389[24] = v366 / 0x3E8;
        *(_WORD *)&v389[28] = 1024;
        *(_DWORD *)&v389[30] = v366 % 0x3E8;
        *(_WORD *)&v389[34] = 1024;
        *(_DWORD *)&v389[36] = transport_connect_milliseconds / 0x3E8;
        *(_WORD *)&v389[40] = 1024;
        *(_DWORD *)&v389[42] = transport_connect_milliseconds % 0x3E8;
        os_log_type_t v129 = "[C%u %{public,uuid_t}.16P %{public}s %{public}@] cancelled\n"
               "\t[C%{public}s %{public,uuid_t}.16P %{public}s<->%{public}s]\n"
               "\tConnected Path: %{public}@\n"
               "\tDuration: %u.%03us, DNS @%u.%03us took %u.%03us, %{public}s @%u.%03us took %u.%03us";
        id v130 = v62;
        uint32_t v131 = 170;
      }
      else
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        os_log_type_t v62 = (id)gconnectionLogObj;
        if (!os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_270;
        }
        uint64_t v356 = v55;
        unsigned int v165 = v1->top_id;
        uint64_t v166 = nw_endpoint_get_logging_description(v1->endpoint);
        __int16 v167 = v1->parameters;
        __int16 v168 = nw_endpoint_handler_get_id_string(v53);
        long long v169 = nw_endpoint_get_description(v54);
        __int16 v170 = nw_endpoint_get_logging_description(v356);
        if ((privacy_stance - 1) > 4) {
          long long v171 = "Unknown";
        }
        else {
          long long v171 = off_1E523B910[privacy_stance - 1];
        }
        *(_DWORD *)netcore_stats_tcp_report buf = 67114754;
        *(_DWORD *)v372 = v165;
        *(_WORD *)&v372[4] = 1042;
        *(_DWORD *)&v372[6] = 16;
        *(_WORD *)&v372[10] = 2098;
        *(void *)&v372[12] = v1->top_uuid;
        *(_WORD *)&v372[20] = 2082;
        *(void *)&v372[22] = v166;
        *(void *)&v373[2] = v167;
        *(_WORD *)__int16 v373 = 2114;
        __int16 v374 = 2082;
        __int16 v375 = v168;
        __int16 v376 = 1042;
        int v377 = 16;
        __int16 v378 = 2098;
        uint64_t v379 = v394;
        __int16 v380 = 2082;
        nw_endpoint_t v381 = v169;
        __int16 v382 = 2082;
        v383 = v170;
        __int16 v384 = 2114;
        id v385 = v357;
        __int16 v386 = 2082;
        *(void *)v387 = v171;
        *(_WORD *)&v387[8] = 1024;
        v388[0] = v354 / 0x3E8;
        LOWORD(v388[1]) = 1024;
        *(_DWORD *)((char *)&v388[1] + 2) = v354 % 0x3E8;
        HIWORD(v388[2]) = 1024;
        *(_DWORD *)v389 = v359 / 0x3E8;
        *(_WORD *)&v389[4] = 1024;
        *(_DWORD *)&v389[6] = v359 % 0x3E8;
        *(_WORD *)&v389[10] = 1024;
        *(_DWORD *)&v389[12] = v363 / 0x3E8;
        *(_WORD *)&v389[16] = 1024;
        *(_DWORD *)&v389[18] = v363 % 0x3E8;
        *(_WORD *)&v389[22] = 2082;
        *(void *)&v389[24] = v367;
        *(_WORD *)&v389[32] = 1024;
        *(_DWORD *)&v389[34] = v366 / 0x3E8;
        *(_WORD *)&v389[38] = 1024;
        *(_DWORD *)&v389[40] = v366 % 0x3E8;
        *(_WORD *)&v389[44] = 1024;
        *(_DWORD *)&v389[46] = transport_connect_milliseconds / 0x3E8;
        *(_WORD *)&v389[50] = 1024;
        *(_DWORD *)&v389[52] = transport_connect_milliseconds % 0x3E8;
        os_log_type_t v129 = "[C%u %{public,uuid_t}.16P %{public}s %{public}@] cancelled\n"
               "\t[C%{public}s %{public,uuid_t}.16P %{public}s<->%{public}s]\n"
               "\tConnected Path: %{public}@\n"
               "\tPrivacy Stance: %{public}s\n"
               "\tDuration: %u.%03us, DNS @%u.%03us took %u.%03us, %{public}s @%u.%03us took %u.%03us";
        id v130 = v62;
        uint32_t v131 = 180;
      }
    }
    else
    {
      if (v3)
      {
        uint64_t v356 = v55;
        uint64_t v84 = *((void *)&off_1E5249E08 + nw_connection_get_tls_version(v1));
        if (v370)
        {
          if ((*((unsigned char *)v1 + 109) & 4) != 0)
          {
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
            }
            os_log_type_t v62 = (id)gconnectionLogObj;
            if (!os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_269;
            }
            v348 = v54;
            unsigned int v273 = v1->top_id;
            os_log_type_t v274 = nw_endpoint_get_logging_description(v1->endpoint);
            id v275 = v1->parameters;
            char v276 = nw_endpoint_handler_get_id_string(v53);
            nw_endpoint_t v277 = nw_endpoint_get_description(v348);
            v278 = nw_endpoint_get_logging_description(v356);
            uint64_t v279 = *((void *)v370 + 1);
            uint64_t v280 = *((void *)v370 + 5);
            uint64_t v281 = *((void *)v370 + 6);
            uint64_t v283 = *((void *)v370 + 8);
            uint64_t v282 = *((void *)v370 + 9);
            uint64_t v285 = *((void *)v370 + 10);
            uint64_t v284 = *((void *)v370 + 11);
            uint64_t v286 = *((void *)v370 + 12);
            uint64_t v288 = *((void *)v370 + 14);
            uint64_t v287 = *((void *)v370 + 15);
            *(void *)&v389[138] = *((void *)v370 + 13);
            *(_DWORD *)v372 = v273;
            *(void *)&v372[12] = v1->top_uuid;
            *(void *)&v372[22] = v274;
            *(void *)&v373[2] = v275;
            __int16 v375 = v276;
            *(_WORD *)&v372[4] = 1042;
            __int16 v376 = 1042;
            *(_DWORD *)&v372[6] = 16;
            int v377 = 16;
            *(_WORD *)&v372[10] = 2098;
            __int16 v378 = 2098;
            uint64_t v379 = v394;
            nw_endpoint_t v381 = v277;
            v383 = v278;
            *(_WORD *)__int16 v373 = 2114;
            __int16 v384 = 2114;
            *(_DWORD *)v387 = v354 / 0x3E8;
            *(void *)((char *)v388 + 2) = v367;
            *(_DWORD *)v389 = v366 / 0x3E8;
            *(_DWORD *)&v389[6] = v366 % 0x3E8;
            *(_DWORD *)&v389[12] = transport_connect_milliseconds / 0x3E8;
            *(_DWORD *)&v389[18] = transport_connect_milliseconds % 0x3E8;
            *(_WORD *)&v372[20] = 2082;
            __int16 v374 = 2082;
            __int16 v380 = 2082;
            __int16 v382 = 2082;
            LOWORD(v388[0]) = 2082;
            *(_WORD *)&v389[22] = 2082;
            *(void *)&v389[24] = v84;
            *(_DWORD *)&v389[34] = handshake_ms_for_protocol / 0x3E8;
            *(_DWORD *)&v389[40] = handshake_ms_for_protocol % 0x3E8;
            *(void *)&v389[46] = v281;
            *(void *)&v389[56] = v282;
            *(void *)&v389[66] = v279;
            *(void *)&v389[76] = v280;
            *(_DWORD *)&v389[86] = v287 / 0x3E8;
            *(_DWORD *)&v389[92] = v287 % 0x3E8;
            *(void *)&v389[98] = v285;
            *(void *)&v389[108] = v283;
            *(void *)&v389[118] = v284;
            *(void *)&v389[128] = v286;
            *(_WORD *)&v389[44] = 2048;
            *(_WORD *)&v389[54] = 2048;
            *(_WORD *)&v389[64] = 2048;
            *(_WORD *)&v389[74] = 2048;
            *(_WORD *)&v389[96] = 2048;
            *(_WORD *)&v389[106] = 2048;
            *(_WORD *)&v389[116] = 2048;
            *(_WORD *)&v389[126] = 2048;
            *(_WORD *)&v389[136] = 2048;
            *(_WORD *)&v389[146] = 2048;
            *(void *)&v389[148] = v288;
            HIWORD(v388[2]) = 1024;
            *(_WORD *)&v389[4] = 1024;
            *(_WORD *)&v389[10] = 1024;
            *(_WORD *)&v389[16] = 1024;
            *(_WORD *)&v389[32] = 1024;
            *(_WORD *)&v389[38] = 1024;
            *(_WORD *)&v389[84] = 1024;
            *(_WORD *)&v389[90] = 1024;
            __int16 v386 = 1024;
            *(_WORD *)&v387[4] = 1024;
            *(_DWORD *)&v387[6] = v354 % 0x3E8;
            *(_DWORD *)netcore_stats_tcp_report buf = 67117314;
            id v385 = v357;
            char v211 = "[C%u %{public,uuid_t}.16P %{public}s %{public}@] cancelled\n"
                   "\t[C%{public}s %{public,uuid_t}.16P %{public}s<->%{public}s]\n"
                   "\tConnected Path: %{public}@\n"
                   "\tDuration: %u.%03us, %{public}s @%u.%03us took %u.%03us, %{public}s took %u.%03us\n"
                   "\tbytes in/out: %llu/%llu, packets in/out: %llu/%llu, rtt: %u.%03us, retransmitted bytes: %llu, out-o"
                   "f-order bytes: %llu\n"
                   "\tecn packets sent/acked/marked/lost: %llu/%llu/%llu/%llu";
            v212 = v62;
            uint32_t v213 = 280;
          }
          else
          {
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
            }
            os_log_type_t v62 = (id)gconnectionLogObj;
            if (!os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_269;
            }
            v348 = v54;
            unsigned int v85 = v1->top_id;
            os_log_type_t v86 = nw_endpoint_get_logging_description(v1->endpoint);
            __int16 v87 = v1->parameters;
            uint64_t v88 = nw_endpoint_handler_get_id_string(v53);
            __int16 v89 = nw_endpoint_get_description(v348);
            os_log_type_t v90 = nw_endpoint_get_logging_description(v356);
            if ((privacy_stance - 1) > 4) {
              uint64_t v91 = "Unknown";
            }
            else {
              uint64_t v91 = off_1E523B910[privacy_stance - 1];
            }
            uint64_t v338 = *((void *)v370 + 1);
            uint64_t v339 = *((void *)v370 + 5);
            uint64_t v340 = *((void *)v370 + 6);
            uint64_t v342 = *((void *)v370 + 8);
            uint64_t v341 = *((void *)v370 + 9);
            uint64_t v343 = *((void *)v370 + 10);
            uint64_t v344 = *((void *)v370 + 11);
            uint64_t v345 = *((void *)v370 + 13);
            uint64_t v347 = *((void *)v370 + 14);
            uint64_t v346 = *((void *)v370 + 15);
            *(void *)&v389[138] = *((void *)v370 + 12);
            *(void *)&v389[158] = v347;
            *(_DWORD *)v372 = v85;
            *(void *)&v372[12] = v1->top_uuid;
            *(void *)&v372[22] = v86;
            *(void *)&v373[2] = v87;
            __int16 v375 = v88;
            *(_WORD *)&v372[4] = 1042;
            __int16 v376 = 1042;
            *(_DWORD *)&v372[6] = 16;
            int v377 = 16;
            *(_WORD *)&v372[10] = 2098;
            __int16 v378 = 2098;
            uint64_t v379 = v394;
            nw_endpoint_t v381 = v89;
            v383 = v90;
            *(_WORD *)__int16 v373 = 2114;
            __int16 v384 = 2114;
            *(void *)v387 = v91;
            v388[0] = v354 / 0x3E8;
            *(_DWORD *)((char *)&v388[1] + 2) = v354 % 0x3E8;
            *(void *)v389 = v367;
            *(_DWORD *)&v389[10] = v366 / 0x3E8;
            *(_DWORD *)&v389[16] = v366 % 0x3E8;
            *(_DWORD *)&v389[22] = transport_connect_milliseconds / 0x3E8;
            *(_DWORD *)&v389[28] = transport_connect_milliseconds % 0x3E8;
            *(_WORD *)&v372[20] = 2082;
            __int16 v374 = 2082;
            __int16 v380 = 2082;
            __int16 v382 = 2082;
            __int16 v386 = 2082;
            HIWORD(v388[2]) = 2082;
            *(_WORD *)&v389[32] = 2082;
            *(void *)&v389[34] = v84;
            *(_DWORD *)&v389[44] = handshake_ms_for_protocol / 0x3E8;
            *(_DWORD *)&v389[50] = handshake_ms_for_protocol % 0x3E8;
            *(void *)&v389[56] = v340;
            *(void *)&v389[66] = v341;
            *(void *)&v389[76] = v338;
            *(void *)&v389[86] = v339;
            *(_DWORD *)&v389[96] = v346 / 0x3E8;
            *(_DWORD *)&v389[102] = v346 % 0x3E8;
            *(void *)&v389[108] = v343;
            *(void *)&v389[118] = v342;
            *(void *)&v389[128] = v344;
            *(void *)&v389[148] = v345;
            *(_WORD *)&v389[54] = 2048;
            *(_WORD *)&v389[64] = 2048;
            *(_WORD *)&v389[74] = 2048;
            *(_WORD *)&v389[84] = 2048;
            *(_WORD *)&v389[106] = 2048;
            *(_WORD *)&v389[116] = 2048;
            *(_WORD *)&v389[126] = 2048;
            *(_WORD *)&v389[136] = 2048;
            *(_WORD *)&v389[146] = 2048;
            *(_WORD *)&v389[156] = 2048;
            LOWORD(v388[1]) = 1024;
            *(_WORD *)&v389[8] = 1024;
            *(_WORD *)&v389[14] = 1024;
            *(_WORD *)&v389[20] = 1024;
            *(_WORD *)&v389[26] = 1024;
            *(_WORD *)&v389[42] = 1024;
            *(_WORD *)&v389[48] = 1024;
            *(_WORD *)&v389[94] = 1024;
            *(_WORD *)&v389[100] = 1024;
            *(_WORD *)&v387[8] = 1024;
            *(_DWORD *)netcore_stats_tcp_report buf = 67117570;
            id v385 = v357;
            char v211 = "[C%u %{public,uuid_t}.16P %{public}s %{public}@] cancelled\n"
                   "\t[C%{public}s %{public,uuid_t}.16P %{public}s<->%{public}s]\n"
                   "\tConnected Path: %{public}@\n"
                   "\tPrivacy Stance: %{public}s\n"
                   "\tDuration: %u.%03us, %{public}s @%u.%03us took %u.%03us, %{public}s took %u.%03us\n"
                   "\tbytes in/out: %llu/%llu, packets in/out: %llu/%llu, rtt: %u.%03us, retransmitted bytes: %llu, out-o"
                   "f-order bytes: %llu\n"
                   "\tecn packets sent/acked/marked/lost: %llu/%llu/%llu/%llu";
            v212 = v62;
            uint32_t v213 = 290;
          }
        }
        else if ((*((unsigned char *)v1 + 109) & 4) != 0)
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          os_log_type_t v62 = (id)gconnectionLogObj;
          if (!os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_269;
          }
          v348 = v54;
          unsigned int v301 = v1->top_id;
          int v302 = nw_endpoint_get_logging_description(v1->endpoint);
          uint64_t v303 = v1->parameters;
          v304 = nw_endpoint_handler_get_id_string(v53);
          uint64_t v305 = nw_endpoint_get_description(v348);
          char v306 = nw_endpoint_get_logging_description(v356);
          *(_DWORD *)netcore_stats_tcp_report buf = 67114242;
          *(_DWORD *)v372 = v301;
          *(_WORD *)&v372[4] = 1042;
          *(_DWORD *)&v372[6] = 16;
          *(_WORD *)&v372[10] = 2098;
          *(void *)&v372[12] = v1->top_uuid;
          *(_WORD *)&v372[20] = 2082;
          *(void *)&v372[22] = v302;
          *(void *)&v373[2] = v303;
          *(_WORD *)__int16 v373 = 2114;
          __int16 v374 = 2082;
          __int16 v375 = v304;
          __int16 v376 = 1042;
          int v377 = 16;
          __int16 v378 = 2098;
          uint64_t v379 = v394;
          __int16 v380 = 2082;
          nw_endpoint_t v381 = v305;
          __int16 v382 = 2082;
          v383 = v306;
          __int16 v384 = 2114;
          id v385 = v357;
          __int16 v386 = 1024;
          *(_DWORD *)v387 = v354 / 0x3E8;
          *(_WORD *)&v387[4] = 1024;
          *(_DWORD *)&v387[6] = v354 % 0x3E8;
          LOWORD(v388[0]) = 2082;
          *(void *)((char *)v388 + 2) = v367;
          HIWORD(v388[2]) = 1024;
          *(_DWORD *)v389 = v366 / 0x3E8;
          *(_WORD *)&v389[4] = 1024;
          *(_DWORD *)&v389[6] = v366 % 0x3E8;
          *(_WORD *)&v389[10] = 1024;
          *(_DWORD *)&v389[12] = transport_connect_milliseconds / 0x3E8;
          *(_WORD *)&v389[16] = 1024;
          *(_DWORD *)&v389[18] = transport_connect_milliseconds % 0x3E8;
          *(_WORD *)&v389[22] = 2082;
          *(void *)&v389[24] = v84;
          *(_WORD *)&v389[32] = 1024;
          *(_DWORD *)&v389[34] = handshake_ms_for_protocol / 0x3E8;
          *(_WORD *)&v389[38] = 1024;
          *(_DWORD *)&v389[40] = handshake_ms_for_protocol % 0x3E8;
          char v211 = "[C%u %{public,uuid_t}.16P %{public}s %{public}@] cancelled\n"
                 "\t[C%{public}s %{public,uuid_t}.16P %{public}s<->%{public}s]\n"
                 "\tConnected Path: %{public}@\n"
                 "\tDuration: %u.%03us, %{public}s @%u.%03us took %u.%03us, %{public}s took %u.%03us";
          v212 = v62;
          uint32_t v213 = 168;
        }
        else
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          os_log_type_t v62 = (id)gconnectionLogObj;
          if (!os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_269;
          }
          v348 = v54;
          unsigned int v221 = v1->top_id;
          nw_endpoint_t v222 = nw_endpoint_get_logging_description(v1->endpoint);
          char v223 = v1->parameters;
          v224 = nw_endpoint_handler_get_id_string(v53);
          v225 = nw_endpoint_get_description(v54);
          id v226 = nw_endpoint_get_logging_description(v356);
          if ((privacy_stance - 1) > 4) {
            nw_endpoint_t v227 = "Unknown";
          }
          else {
            nw_endpoint_t v227 = off_1E523B910[privacy_stance - 1];
          }
          *(_DWORD *)netcore_stats_tcp_report buf = 67114498;
          *(_DWORD *)v372 = v221;
          *(_WORD *)&v372[4] = 1042;
          *(_DWORD *)&v372[6] = 16;
          *(_WORD *)&v372[10] = 2098;
          *(void *)&v372[12] = v1->top_uuid;
          *(_WORD *)&v372[20] = 2082;
          *(void *)&v372[22] = v222;
          *(void *)&v373[2] = v223;
          *(_WORD *)__int16 v373 = 2114;
          __int16 v374 = 2082;
          __int16 v375 = v224;
          __int16 v376 = 1042;
          int v377 = 16;
          __int16 v378 = 2098;
          uint64_t v379 = v394;
          __int16 v380 = 2082;
          nw_endpoint_t v381 = v225;
          __int16 v382 = 2082;
          v383 = v226;
          __int16 v384 = 2114;
          id v385 = v357;
          __int16 v386 = 2082;
          *(void *)v387 = v227;
          *(_WORD *)&v387[8] = 1024;
          v388[0] = v354 / 0x3E8;
          LOWORD(v388[1]) = 1024;
          *(_DWORD *)((char *)&v388[1] + 2) = v354 % 0x3E8;
          HIWORD(v388[2]) = 2082;
          *(void *)v389 = v367;
          *(_WORD *)&v389[8] = 1024;
          *(_DWORD *)&v389[10] = v366 / 0x3E8;
          *(_WORD *)&v389[14] = 1024;
          *(_DWORD *)&v389[16] = v366 % 0x3E8;
          *(_WORD *)&v389[20] = 1024;
          *(_DWORD *)&v389[22] = transport_connect_milliseconds / 0x3E8;
          *(_WORD *)&v389[26] = 1024;
          *(_DWORD *)&v389[28] = transport_connect_milliseconds % 0x3E8;
          *(_WORD *)&v389[32] = 2082;
          *(void *)&v389[34] = v84;
          *(_WORD *)&v389[42] = 1024;
          *(_DWORD *)&v389[44] = handshake_ms_for_protocol / 0x3E8;
          *(_WORD *)&v389[48] = 1024;
          *(_DWORD *)&v389[50] = handshake_ms_for_protocol % 0x3E8;
          char v211 = "[C%u %{public,uuid_t}.16P %{public}s %{public}@] cancelled\n"
                 "\t[C%{public}s %{public,uuid_t}.16P %{public}s<->%{public}s]\n"
                 "\tConnected Path: %{public}@\n"
                 "\tPrivacy Stance: %{public}s\n"
                 "\tDuration: %u.%03us, %{public}s @%u.%03us took %u.%03us, %{public}s took %u.%03us";
          v212 = v62;
          uint32_t v213 = 178;
        }
        goto LABEL_268;
      }
      if (v370)
      {
        if ((*((unsigned char *)v1 + 109) & 4) != 0)
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          os_log_type_t v62 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
          {
            unsigned int v249 = v1->top_id;
            id v250 = nw_endpoint_get_logging_description(v1->endpoint);
            id v365 = v1->parameters;
            nw_endpoint_t v360 = nw_endpoint_handler_get_id_string(v53);
            uint64_t v362 = nw_endpoint_get_description(v54);
            __int16 v251 = nw_endpoint_get_logging_description(v55);
            uint64_t v252 = *((void *)v370 + 1);
            uint64_t v253 = *((void *)v370 + 5);
            uint64_t v254 = *((void *)v370 + 6);
            uint64_t v256 = *((void *)v370 + 8);
            uint64_t v255 = *((void *)v370 + 9);
            uint64_t v258 = *((void *)v370 + 10);
            uint64_t v257 = *((void *)v370 + 11);
            uint64_t v260 = *((void *)v370 + 12);
            uint64_t v259 = *((void *)v370 + 13);
            uint64_t v261 = *((void *)v370 + 14);
            id v262 = v55;
            id v263 = v54;
            unsigned int v264 = *((void *)v370 + 15);
            *(_DWORD *)netcore_stats_tcp_report buf = 67116546;
            unsigned int v265 = v264 / 0x3E8;
            *(_DWORD *)v372 = v249;
            *(_WORD *)&v372[4] = 1042;
            unsigned int v266 = v264 % 0x3E8;
            *(_DWORD *)&v372[6] = 16;
            *(_WORD *)&v372[10] = 2098;
            *(void *)&v372[12] = v1->top_uuid;
            *(_WORD *)&v372[20] = 2082;
            *(void *)&v372[22] = v250;
            *(_WORD *)__int16 v373 = 2114;
            *(void *)&v373[2] = v365;
            __int16 v374 = 2082;
            __int16 v375 = v360;
            __int16 v376 = 1042;
            int v377 = 16;
            id v54 = v263;
            __int16 v378 = 2098;
            uint64_t v379 = v394;
            id v55 = v262;
            __int16 v380 = 2082;
            nw_endpoint_t v381 = v362;
            __int16 v382 = 2082;
            v383 = v251;
            __int16 v384 = 2114;
            id v385 = v357;
            __int16 v386 = 1024;
            *(_DWORD *)v387 = v354 / 0x3E8;
            *(_WORD *)&v387[4] = 1024;
            *(_DWORD *)&v387[6] = v354 % 0x3E8;
            LOWORD(v388[0]) = 2082;
            *(void *)((char *)v388 + 2) = v367;
            HIWORD(v388[2]) = 1024;
            *(_DWORD *)v389 = v366 / 0x3E8;
            *(_WORD *)&v389[4] = 1024;
            *(_DWORD *)&v389[6] = v366 % 0x3E8;
            *(_WORD *)&v389[10] = 1024;
            *(_DWORD *)&v389[12] = transport_connect_milliseconds / 0x3E8;
            *(_WORD *)&v389[16] = 1024;
            *(_DWORD *)&v389[18] = transport_connect_milliseconds % 0x3E8;
            *(_WORD *)&v389[22] = 2048;
            *(void *)&v389[24] = v254;
            *(_WORD *)&v389[32] = 2048;
            *(void *)&v389[34] = v255;
            *(_WORD *)&v389[42] = 2048;
            *(void *)&v389[44] = v252;
            *(_WORD *)&v389[52] = 2048;
            *(void *)&v389[54] = v253;
            *(_WORD *)&v389[62] = 1024;
            *(_DWORD *)&v389[64] = v265;
            *(_WORD *)&v389[68] = 1024;
            *(_DWORD *)&v389[70] = v266;
            *(_WORD *)&v389[74] = 2048;
            *(void *)&v389[76] = v258;
            *(_WORD *)&v389[84] = 2048;
            *(void *)&v389[86] = v256;
            *(_WORD *)&v389[94] = 2048;
            *(void *)&v389[96] = v257;
            *(_WORD *)&v389[104] = 2048;
            *(void *)&v389[106] = v260;
            *(_WORD *)&v389[114] = 2048;
            *(void *)&v389[116] = v259;
            *(_WORD *)&v389[124] = 2048;
            *(void *)&v389[126] = v261;
            _os_log_impl(&dword_1830D4000, v62, OS_LOG_TYPE_DEFAULT, "[C%u %{public,uuid_t}.16P %{public}s %{public}@] cancelled\n\t[C%{public}s %{public,uuid_t}.16P %{public}s<->%{public}s]\n\tConnected Path: %{public}@\n\tDuration: %u.%03us, %{public}s @%u.%03us took %u.%03us\n\tbytes in/out: %llu/%llu, packets in/out: %llu/%llu, rtt: %u.%03us, retransmitted bytes: %llu, out-of-order bytes: %llu\n\tecn packets sent/acked/marked/lost: %llu/%llu/%llu/%llu", buf, 0x102u);
          }
          goto LABEL_270;
        }
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        os_log_type_t v62 = (id)gconnectionLogObj;
        if (!os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
        {
LABEL_270:

          if (v368 && v370)
          {
            free(v370);
            v370 = 0;
          }

          goto LABEL_274;
        }
        unsigned int v148 = v1->top_id;
        v348 = v54;
        uint64_t v356 = v55;
        int v149 = nw_endpoint_get_logging_description(v1->endpoint);
        int v150 = v1->parameters;
        char v151 = nw_endpoint_handler_get_id_string(v53);
        uint64_t v152 = nw_endpoint_get_description(v54);
        id v364 = nw_endpoint_get_logging_description(v55);
        if ((privacy_stance - 1) > 4) {
          char v153 = "Unknown";
        }
        else {
          char v153 = off_1E523B910[privacy_stance - 1];
        }
        uint64_t v327 = *((void *)v370 + 1);
        uint64_t v329 = *((void *)v370 + 5);
        uint64_t v328 = *((void *)v370 + 6);
        uint64_t v331 = *((void *)v370 + 8);
        uint64_t v330 = *((void *)v370 + 9);
        uint64_t v332 = *((void *)v370 + 10);
        uint64_t v333 = *((void *)v370 + 11);
        uint64_t v335 = *((void *)v370 + 12);
        uint64_t v334 = *((void *)v370 + 13);
        uint64_t v336 = *((void *)v370 + 14);
        unsigned int v337 = *((void *)v370 + 15);
        *(_DWORD *)netcore_stats_tcp_report buf = 67116802;
        *(_DWORD *)v372 = v148;
        *(_WORD *)&v372[4] = 1042;
        *(_DWORD *)&v372[6] = 16;
        *(_WORD *)&v372[10] = 2098;
        *(void *)&v372[12] = v1->top_uuid;
        *(_WORD *)&v372[20] = 2082;
        *(void *)&v372[22] = v149;
        *(_WORD *)__int16 v373 = 2114;
        *(void *)&v373[2] = v150;
        __int16 v374 = 2082;
        __int16 v375 = v151;
        __int16 v376 = 1042;
        int v377 = 16;
        __int16 v378 = 2098;
        uint64_t v379 = v394;
        __int16 v380 = 2082;
        nw_endpoint_t v381 = v152;
        __int16 v382 = 2082;
        v383 = v364;
        __int16 v384 = 2114;
        id v385 = v357;
        __int16 v386 = 2082;
        *(void *)v387 = v153;
        *(_WORD *)&v387[8] = 1024;
        v388[0] = v354 / 0x3E8;
        LOWORD(v388[1]) = 1024;
        *(_DWORD *)((char *)&v388[1] + 2) = v354 % 0x3E8;
        HIWORD(v388[2]) = 2082;
        *(void *)v389 = v367;
        *(_WORD *)&v389[8] = 1024;
        *(_DWORD *)&v389[10] = v366 / 0x3E8;
        *(_WORD *)&v389[14] = 1024;
        *(_DWORD *)&v389[16] = v366 % 0x3E8;
        *(_WORD *)&v389[20] = 1024;
        *(_DWORD *)&v389[22] = transport_connect_milliseconds / 0x3E8;
        *(_WORD *)&v389[26] = 1024;
        *(_DWORD *)&v389[28] = transport_connect_milliseconds % 0x3E8;
        *(_WORD *)&v389[32] = 2048;
        *(void *)&v389[34] = v328;
        *(_WORD *)&v389[42] = 2048;
        *(void *)&v389[44] = v330;
        *(_WORD *)&v389[52] = 2048;
        *(void *)&v389[54] = v327;
        *(_WORD *)&v389[62] = 2048;
        *(void *)&v389[64] = v329;
        *(_WORD *)&v389[72] = 1024;
        *(_DWORD *)&v389[74] = v337 / 0x3E8;
        *(_WORD *)&v389[78] = 1024;
        *(_DWORD *)&v389[80] = v337 % 0x3E8;
        *(_WORD *)&v389[84] = 2048;
        *(void *)&v389[86] = v332;
        *(_WORD *)&v389[94] = 2048;
        *(void *)&v389[96] = v331;
        *(_WORD *)&v389[104] = 2048;
        *(void *)&v389[106] = v333;
        *(_WORD *)&v389[114] = 2048;
        *(void *)&v389[116] = v335;
        *(_WORD *)&v389[124] = 2048;
        *(void *)&v389[126] = v334;
        *(_WORD *)&v389[134] = 2048;
        *(void *)&v389[136] = v336;
        char v211 = "[C%u %{public,uuid_t}.16P %{public}s %{public}@] cancelled\n"
               "\t[C%{public}s %{public,uuid_t}.16P %{public}s<->%{public}s]\n"
               "\tConnected Path: %{public}@\n"
               "\tPrivacy Stance: %{public}s\n"
               "\tDuration: %u.%03us, %{public}s @%u.%03us took %u.%03us\n"
               "\tbytes in/out: %llu/%llu, packets in/out: %llu/%llu, rtt: %u.%03us, retransmitted bytes: %llu, out-of-or"
               "der bytes: %llu\n"
               "\tecn packets sent/acked/marked/lost: %llu/%llu/%llu/%llu";
        v212 = v62;
        uint32_t v213 = 268;
        goto LABEL_268;
      }
      if ((*((unsigned char *)v1 + 109) & 4) != 0)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        os_log_type_t v62 = (id)gconnectionLogObj;
        if (!os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_270;
        }
        uint64_t v356 = v55;
        unsigned int v295 = v1->top_id;
        v296 = nw_endpoint_get_logging_description(v1->endpoint);
        os_log_type_t v297 = v1->parameters;
        BOOL v298 = nw_endpoint_handler_get_id_string(v53);
        uint64_t v299 = nw_endpoint_get_description(v54);
        uint64_t v300 = nw_endpoint_get_logging_description(v356);
        *(_DWORD *)netcore_stats_tcp_report buf = 67113474;
        *(_DWORD *)v372 = v295;
        *(_WORD *)&v372[4] = 1042;
        *(_DWORD *)&v372[6] = 16;
        *(void *)&v372[12] = v1->top_uuid;
        *(_WORD *)&v372[10] = 2098;
        *(void *)&v372[22] = v296;
        *(_WORD *)&v372[20] = 2082;
        *(void *)&v373[2] = v297;
        *(_WORD *)__int16 v373 = 2114;
        __int16 v374 = 2082;
        __int16 v375 = v298;
        __int16 v376 = 1042;
        int v377 = 16;
        __int16 v378 = 2098;
        uint64_t v379 = v394;
        __int16 v380 = 2082;
        nw_endpoint_t v381 = v299;
        __int16 v382 = 2082;
        v383 = v300;
        __int16 v384 = 2114;
        id v385 = v357;
        __int16 v386 = 1024;
        *(_DWORD *)v387 = v354 / 0x3E8;
        *(_WORD *)&v387[4] = 1024;
        *(_DWORD *)&v387[6] = v354 % 0x3E8;
        LOWORD(v388[0]) = 2082;
        *(void *)((char *)v388 + 2) = v367;
        HIWORD(v388[2]) = 1024;
        *(_DWORD *)v389 = v366 / 0x3E8;
        *(_WORD *)&v389[4] = 1024;
        *(_DWORD *)&v389[6] = v366 % 0x3E8;
        *(_WORD *)&v389[10] = 1024;
        *(_DWORD *)&v389[12] = transport_connect_milliseconds / 0x3E8;
        *(_WORD *)&v389[16] = 1024;
        *(_DWORD *)&v389[18] = transport_connect_milliseconds % 0x3E8;
        os_log_type_t v129 = "[C%u %{public,uuid_t}.16P %{public}s %{public}@] cancelled\n"
               "\t[C%{public}s %{public,uuid_t}.16P %{public}s<->%{public}s]\n"
               "\tConnected Path: %{public}@\n"
               "\tDuration: %u.%03us, %{public}s @%u.%03us took %u.%03us";
        id v130 = v62;
        uint32_t v131 = 146;
      }
      else
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        os_log_type_t v62 = (id)gconnectionLogObj;
        if (!os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_270;
        }
        uint64_t v356 = v55;
        unsigned int v214 = v1->top_id;
        nw_endpoint_t v215 = nw_endpoint_get_logging_description(v1->endpoint);
        v216 = v1->parameters;
        id v217 = nw_endpoint_handler_get_id_string(v53);
        uint64_t v218 = nw_endpoint_get_description(v54);
        id v219 = nw_endpoint_get_logging_description(v356);
        if ((privacy_stance - 1) > 4) {
          v220 = "Unknown";
        }
        else {
          v220 = off_1E523B910[privacy_stance - 1];
        }
        *(_DWORD *)netcore_stats_tcp_report buf = 67113730;
        *(_DWORD *)v372 = v214;
        *(_WORD *)&v372[4] = 1042;
        *(_DWORD *)&v372[6] = 16;
        *(void *)&v372[12] = v1->top_uuid;
        *(_WORD *)&v372[10] = 2098;
        *(void *)&v372[22] = v215;
        *(_WORD *)&v372[20] = 2082;
        *(void *)&v373[2] = v216;
        *(_WORD *)__int16 v373 = 2114;
        __int16 v374 = 2082;
        __int16 v375 = v217;
        __int16 v376 = 1042;
        int v377 = 16;
        __int16 v378 = 2098;
        uint64_t v379 = v394;
        __int16 v380 = 2082;
        nw_endpoint_t v381 = v218;
        __int16 v382 = 2082;
        v383 = v219;
        __int16 v384 = 2114;
        id v385 = v357;
        __int16 v386 = 2082;
        *(void *)v387 = v220;
        *(_WORD *)&v387[8] = 1024;
        v388[0] = v354 / 0x3E8;
        LOWORD(v388[1]) = 1024;
        *(_DWORD *)((char *)&v388[1] + 2) = v354 % 0x3E8;
        HIWORD(v388[2]) = 2082;
        *(void *)v389 = v367;
        *(_WORD *)&v389[8] = 1024;
        *(_DWORD *)&v389[10] = v366 / 0x3E8;
        *(_WORD *)&v389[14] = 1024;
        *(_DWORD *)&v389[16] = v366 % 0x3E8;
        *(_WORD *)&v389[20] = 1024;
        *(_DWORD *)&v389[22] = transport_connect_milliseconds / 0x3E8;
        *(_WORD *)&v389[26] = 1024;
        *(_DWORD *)&v389[28] = transport_connect_milliseconds % 0x3E8;
        os_log_type_t v129 = "[C%u %{public,uuid_t}.16P %{public}s %{public}@] cancelled\n"
               "\t[C%{public}s %{public,uuid_t}.16P %{public}s<->%{public}s]\n"
               "\tConnected Path: %{public}@\n"
               "\tPrivacy Stance: %{public}s\n"
               "\tDuration: %u.%03us, %{public}s @%u.%03us took %u.%03us";
        id v130 = v62;
        uint32_t v131 = 156;
      }
    }
LABEL_253:
    _os_log_impl(&dword_1830D4000, v130, OS_LOG_TYPE_DEFAULT, v129, buf, v131);
LABEL_269:
    id v55 = v356;
    goto LABEL_270;
  }
  if (__nwlog_connection_log::onceToken != -1) {
    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
  }
  os_log_type_t v40 = (id)gconnectionLogObj;
  if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
  {
    os_log_type_t v41 = v1;
    unsigned int v42 = v1->top_id;
    os_log_type_t v43 = nw_endpoint_get_logging_description(v41->endpoint);
    int v44 = v41->parameters;
    *(_DWORD *)netcore_stats_tcp_report buf = 67109634;
    *(_DWORD *)v372 = v42;
    *(_WORD *)&v372[4] = 2082;
    *(void *)&v372[6] = v43;
    *(_WORD *)&v372[14] = 2114;
    *(void *)&v372[16] = v44;
    _os_log_impl(&dword_1830D4000, v40, OS_LOG_TYPE_DEFAULT, "[C%u %{public}s %{public}@] cancelled", buf, 0x1Cu);
    id v1 = v41;
  }

LABEL_274:
}

void sub_183254750(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24)
{
  _Unwind_Resume(a1);
}

uint64_t nw_connection_get_transport_connect_milliseconds(NWConcrete_nw_connection *a1, __int16 a2, char a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  int v5 = a1;
  __int16 v13 = a2;
  LODWORD(v6) = nw_connection_get_event_milliseconds(v5, 3, 6, &v13, 0);
  if (v6 == -1)
  {
    LODWORD(v6) = nw_connection_get_event_milliseconds(v5, 3, 13, &v13, 0);
    if (v6 == -1)
    {
LABEL_9:
      uint64_t v6 = 0;
      goto LABEL_10;
    }
  }
  unsigned int event_milliseconds = nw_connection_get_event_milliseconds(v5, 3, 5, &v13, 0);
  if (event_milliseconds == -1) {
    uint64_t v6 = v6;
  }
  else {
    uint64_t v6 = event_milliseconds;
  }
  if ((a3 & 1) == 0)
  {
    unsigned int v8 = nw_connection_get_event_milliseconds(v5, 3, 3, &v13, 0);
    BOOL v9 = v6 >= v8;
    uint64_t v6 = v6 - v8;
    if (!v9)
    {
      if (gLogDatapath)
      {
        unsigned int v12 = v8;
        unint64_t v11 = __nwlog_obj();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446978;
          unint64_t v15 = "nw_connection_get_transport_connect_milliseconds";
          __int16 v16 = 2082;
          int v17 = "connect_finish";
          __int16 v18 = 2048;
          uint64_t v19 = v12;
          __int16 v20 = 2048;
          uint64_t v21 = v6;
          _os_log_impl(&dword_1830D4000, v11, OS_LOG_TYPE_DEBUG, "%{public}s Underflow: %{public}s, decrement %llu, result %llu", buf, 0x2Au);
        }
      }
      goto LABEL_9;
    }
  }
LABEL_10:

  return v6;
}

id nw_connection_copy_establishment_report_on_queue(void *a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    nw_context_assert_queue(*((void **)v1 + 3));
    char v3 = (void *)v2[52];
    if (!v3)
    {
      nw_connection_fillout_establishment_report_on_nw_queue(v2, 0);
      char v3 = (void *)v2[52];
    }
    id v4 = v3;
    goto LABEL_5;
  }
  uint64_t v6 = __nwlog_obj();
  *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
  int v17 = "nw_connection_copy_establishment_report_on_queue";
  int v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      unsigned int v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        int v17 = "nw_connection_copy_establishment_report_on_queue";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      unsigned int v8 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
          int v17 = "nw_connection_copy_establishment_report_on_queue";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v12)
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        int v17 = "nw_connection_copy_establishment_report_on_queue";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      unsigned int v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        int v17 = "nw_connection_copy_establishment_report_on_queue";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_22:
  if (v7) {
    free(v7);
  }
  id v4 = 0;
LABEL_5:

  return v4;
}

void sub_183254DCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1832554C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1832561D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, objc_super a13)
{
  a13.super_class = (Class)NWConcrete_nw_resolver;
  [(_Unwind_Exception *)&a13 dealloc];
  _Unwind_Resume(a1);
}

void nw_context_endpoint_table_release(os_unfair_lock_s *a1)
{
  if (a1) {
    _nw_hash_table_release(a1);
  }
}

void nw_protocol_custom_mapping_release_object(void *a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    free(a1);
    return;
  }
  id v1 = __nwlog_obj();
  *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
  os_log_type_t v11 = "nw_protocol_custom_mapping_release_object";
  uint64_t v2 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v8 = 0;
  if (__nwlog_fault(v2, &type, &v8))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      if (os_log_type_enabled(v3, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        os_log_type_t v11 = "nw_protocol_custom_mapping_release_object";
        int v5 = "%{public}s called with null object";
LABEL_18:
        _os_log_impl(&dword_1830D4000, v3, v4, v5, buf, 0xCu);
      }
    }
    else
    {
      if (v8)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        char v3 = __nwlog_obj();
        os_log_type_t v4 = type;
        BOOL v7 = os_log_type_enabled(v3, type);
        if (backtrace_string)
        {
          if (v7)
          {
            *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
            os_log_type_t v11 = "nw_protocol_custom_mapping_release_object";
            __int16 v12 = 2082;
            os_log_type_t v13 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v3, v4, "%{public}s called with null object, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_20;
        }
        if (!v7) {
          goto LABEL_19;
        }
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        os_log_type_t v11 = "nw_protocol_custom_mapping_release_object";
        int v5 = "%{public}s called with null object, no backtrace";
        goto LABEL_18;
      }
      char v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      if (os_log_type_enabled(v3, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        os_log_type_t v11 = "nw_protocol_custom_mapping_release_object";
        int v5 = "%{public}s called with null object, backtrace limit exceeded";
        goto LABEL_18;
      }
    }
LABEL_19:
  }
LABEL_20:
  if (v2) {
    free(v2);
  }
}

void sub_183256B70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_endpoint_enumerate_cnames(void *a1, void *a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  char v3 = a1;
  id v4 = a2;
  int v5 = v4;
  if (!v3)
  {
    BOOL v7 = __nwlog_obj();
    *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
    BOOL v26 = "nw_endpoint_enumerate_cnames";
    char v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (!__nwlog_fault(v8, &type, &v23)) {
      goto LABEL_39;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        BOOL v26 = "nw_endpoint_enumerate_cnames";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null endpoint", buf, 0xCu);
      }
    }
    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
          BOOL v26 = "nw_endpoint_enumerate_cnames";
          __int16 v27 = 2082;
          unint64_t v28 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_39:
        if (!v8) {
          goto LABEL_5;
        }
LABEL_40:
        free(v8);
        goto LABEL_5;
      }
      if (v15)
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        BOOL v26 = "nw_endpoint_enumerate_cnames";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        BOOL v26 = "nw_endpoint_enumerate_cnames";
        _os_log_impl(&dword_1830D4000, v9, v19, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_38:

    goto LABEL_39;
  }
  if (v4)
  {
    uint64_t v6 = (atomic_uchar *)v3[15];
    if (v6)
    {
      v21[0] = MEMORY[0x1E4F143A8];
      v21[1] = 3221225472;
      v21[2] = __nw_endpoint_enumerate_cnames_block_invoke;
      v21[3] = &unk_1E524AE90;
      id v22 = v4;
      nw_array_apply(v6, (uint64_t)v21);
    }
    goto LABEL_5;
  }
  os_log_type_t v11 = __nwlog_obj();
  *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
  BOOL v26 = "nw_endpoint_enumerate_cnames";
  char v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v23 = 0;
  if (!__nwlog_fault(v8, &type, &v23)) {
    goto LABEL_39;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    os_log_type_t v9 = __nwlog_obj();
    os_log_type_t v12 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
      BOOL v26 = "nw_endpoint_enumerate_cnames";
      _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null enumerate_block", buf, 0xCu);
    }
    goto LABEL_38;
  }
  if (!v23)
  {
    os_log_type_t v9 = __nwlog_obj();
    os_log_type_t v20 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
      BOOL v26 = "nw_endpoint_enumerate_cnames";
      _os_log_impl(&dword_1830D4000, v9, v20, "%{public}s called with null enumerate_block, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_38;
  }
  __int16 v16 = (char *)__nw_create_backtrace_string();
  os_log_type_t v9 = __nwlog_obj();
  os_log_type_t v17 = type;
  BOOL v18 = os_log_type_enabled(v9, type);
  if (!v16)
  {
    if (v18)
    {
      *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
      BOOL v26 = "nw_endpoint_enumerate_cnames";
      _os_log_impl(&dword_1830D4000, v9, v17, "%{public}s called with null enumerate_block, no backtrace", buf, 0xCu);
    }
    goto LABEL_38;
  }
  if (v18)
  {
    *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
    BOOL v26 = "nw_endpoint_enumerate_cnames";
    __int16 v27 = 2082;
    unint64_t v28 = v16;
    _os_log_impl(&dword_1830D4000, v9, v17, "%{public}s called with null enumerate_block, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v16);
  if (v8) {
    goto LABEL_40;
  }
LABEL_5:
}

void nw_establishment_report_enumerate_resolution_reports(nw_establishment_report_t report, nw_report_resolution_report_enumerator_t enumerate_block)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  nw_establishment_report_t v3 = report;
  nw_report_resolution_report_enumerator_t v4 = enumerate_block;
  int v5 = v4;
  if (!v3)
  {
    BOOL v7 = __nwlog_obj();
    *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
    BOOL v26 = "nw_establishment_report_enumerate_resolution_reports";
    char v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (!__nwlog_fault(v8, &type, &v23)) {
      goto LABEL_38;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        BOOL v26 = "nw_establishment_report_enumerate_resolution_reports";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null report", buf, 0xCu);
      }
    }
    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
          BOOL v26 = "nw_establishment_report_enumerate_resolution_reports";
          __int16 v27 = 2082;
          unint64_t v28 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null report, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v8) {
          goto LABEL_4;
        }
LABEL_39:
        free(v8);
        goto LABEL_4;
      }
      if (v15)
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        BOOL v26 = "nw_establishment_report_enumerate_resolution_reports";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null report, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        BOOL v26 = "nw_establishment_report_enumerate_resolution_reports";
        _os_log_impl(&dword_1830D4000, v9, v19, "%{public}s called with null report, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_37:

    goto LABEL_38;
  }
  if (v4)
  {
    isa = (atomic_uchar *)v3[9].isa;
    v21[0] = MEMORY[0x1E4F143A8];
    v21[1] = 3221225472;
    v21[2] = __nw_establishment_report_enumerate_resolution_reports_block_invoke;
    v21[3] = &unk_1E524AE90;
    id v22 = v4;
    nw_array_apply(isa, (uint64_t)v21);

    goto LABEL_4;
  }
  os_log_type_t v11 = __nwlog_obj();
  *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
  BOOL v26 = "nw_establishment_report_enumerate_resolution_reports";
  char v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v23 = 0;
  if (!__nwlog_fault(v8, &type, &v23)) {
    goto LABEL_38;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    os_log_type_t v9 = __nwlog_obj();
    os_log_type_t v12 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
      BOOL v26 = "nw_establishment_report_enumerate_resolution_reports";
      _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null enumerate_block", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (!v23)
  {
    os_log_type_t v9 = __nwlog_obj();
    os_log_type_t v20 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
      BOOL v26 = "nw_establishment_report_enumerate_resolution_reports";
      _os_log_impl(&dword_1830D4000, v9, v20, "%{public}s called with null enumerate_block, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_37;
  }
  __int16 v16 = (char *)__nw_create_backtrace_string();
  os_log_type_t v9 = __nwlog_obj();
  os_log_type_t v17 = type;
  BOOL v18 = os_log_type_enabled(v9, type);
  if (!v16)
  {
    if (v18)
    {
      *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
      BOOL v26 = "nw_establishment_report_enumerate_resolution_reports";
      _os_log_impl(&dword_1830D4000, v9, v17, "%{public}s called with null enumerate_block, no backtrace", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (v18)
  {
    *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
    BOOL v26 = "nw_establishment_report_enumerate_resolution_reports";
    __int16 v27 = 2082;
    unint64_t v28 = v16;
    _os_log_impl(&dword_1830D4000, v9, v17, "%{public}s called with null enumerate_block, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v16);
  if (v8) {
    goto LABEL_39;
  }
LABEL_4:
}

void nw_protocol_default_output_available(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
    __int16 v16 = "nw_protocol_default_output_available";
    int v5 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v13 = 0;
    if (!__nwlog_fault(v5, &type, &v13)) {
      goto LABEL_36;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (!os_log_type_enabled(v6, type)) {
        goto LABEL_36;
      }
      *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
      __int16 v16 = "nw_protocol_default_output_available";
      char v8 = "%{public}s called with null protocol";
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
          __int16 v16 = "nw_protocol_default_output_available";
          __int16 v17 = 2082;
          BOOL v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_36:
        if (!v5) {
          return;
        }
        goto LABEL_37;
      }
      if (!v10) {
        goto LABEL_36;
      }
      *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
      __int16 v16 = "nw_protocol_default_output_available";
      char v8 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      uint64_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (!os_log_type_enabled(v6, type)) {
        goto LABEL_36;
      }
      *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
      __int16 v16 = "nw_protocol_default_output_available";
      char v8 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
LABEL_35:
    _os_log_impl(&dword_1830D4000, v6, v7, v8, buf, 0xCu);
    goto LABEL_36;
  }
  default_input_handler = a1->default_input_handler;
  if (default_input_handler)
  {
    callbacks = default_input_handler->callbacks;
    if (callbacks)
    {
      output_available = (void (*)(void))callbacks->output_available;
      if (output_available)
      {
        output_available();
      }
    }
    return;
  }
  __nwlog_obj();
  *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
  __int16 v16 = "nw_protocol_default_output_available";
  int v5 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (!__nwlog_fault(v5, &type, &v13)) {
    goto LABEL_36;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    uint64_t v6 = __nwlog_obj();
    os_log_type_t v7 = type;
    if (!os_log_type_enabled(v6, type)) {
      goto LABEL_36;
    }
    *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
    __int16 v16 = "nw_protocol_default_output_available";
    char v8 = "%{public}s called with null protocol->default_input_handler";
    goto LABEL_35;
  }
  if (!v13)
  {
    uint64_t v6 = __nwlog_obj();
    os_log_type_t v7 = type;
    if (!os_log_type_enabled(v6, type)) {
      goto LABEL_36;
    }
    *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
    __int16 v16 = "nw_protocol_default_output_available";
    char v8 = "%{public}s called with null protocol->default_input_handler, backtrace limit exceeded";
    goto LABEL_35;
  }
  os_log_type_t v11 = (char *)__nw_create_backtrace_string();
  uint64_t v6 = __nwlog_obj();
  os_log_type_t v7 = type;
  BOOL v12 = os_log_type_enabled(v6, type);
  if (!v11)
  {
    if (!v12) {
      goto LABEL_36;
    }
    *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
    __int16 v16 = "nw_protocol_default_output_available";
    char v8 = "%{public}s called with null protocol->default_input_handler, no backtrace";
    goto LABEL_35;
  }
  if (v12)
  {
    *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
    __int16 v16 = "nw_protocol_default_output_available";
    __int16 v17 = 2082;
    BOOL v18 = v11;
    _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null protocol->default_input_handler, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v11);
  if (v5) {
LABEL_37:
  }
    free(v5);
}

uint64_t nw_interface_get_subtype(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = v1[25];
    goto LABEL_3;
  }
  int v5 = __nwlog_obj();
  *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
  __int16 v16 = "nw_interface_get_subtype";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        __int16 v16 = "nw_interface_get_subtype";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null interface", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
          __int16 v16 = "nw_interface_get_subtype";
          __int16 v17 = 2082;
          BOOL v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null interface, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        __int16 v16 = "nw_interface_get_subtype";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null interface, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        __int16 v16 = "nw_interface_get_subtype";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null interface, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

BOOL nw_protocol_create_outbound_data(NWConcrete_nw_protocol_instance *a1, size_t a2, char a3)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  int v5 = a1;
  uint64_t v6 = v5;
  if (!*(void *)&v5->protocol_outbound_data_limit)
  {
    char v23 = __nwlog_obj();
    *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
    os_log_type_t v41 = "nw_protocol_create_outbound_data";
    uint64_t v19 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v38 = 0;
    if (!__nwlog_fault(v19, &type, &v38)) {
      goto LABEL_75;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v20 = __nwlog_obj();
      os_log_type_t v24 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        os_log_type_t v41 = "nw_protocol_create_outbound_data";
        _os_log_impl(&dword_1830D4000, v20, v24, "%{public}s called with null instance->context", buf, 0xCu);
      }
      goto LABEL_74;
    }
    if (!v38)
    {
      os_log_type_t v20 = __nwlog_obj();
      os_log_type_t v35 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        os_log_type_t v41 = "nw_protocol_create_outbound_data";
        _os_log_impl(&dword_1830D4000, v20, v35, "%{public}s called with null instance->context, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_74;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v20 = __nwlog_obj();
    os_log_type_t v26 = type;
    BOOL v27 = os_log_type_enabled(v20, type);
    if (!backtrace_string)
    {
      if (v27)
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        os_log_type_t v41 = "nw_protocol_create_outbound_data";
        _os_log_impl(&dword_1830D4000, v20, v26, "%{public}s called with null instance->context, no backtrace", buf, 0xCu);
      }
      goto LABEL_74;
    }
    if (v27)
    {
      *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
      os_log_type_t v41 = "nw_protocol_create_outbound_data";
      __int16 v42 = 2082;
      size_t v43 = (size_t)backtrace_string;
      _os_log_impl(&dword_1830D4000, v20, v26, "%{public}s called with null instance->context, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_55;
  }
  data_from_pool = (nw_frame **)nw_protocol_create_data_from_pool(v5, a3);
  if (a3)
  {
    os_log_type_t v8 = v6;
    if (data_from_pool)
    {
      nw_frame_reset((uint64_t)data_from_pool, 0, a2, (uint64_t)nw_protocol_outbound_data_finalizer, (uint64_t)v8);
      external = data_from_pool;
LABEL_29:
      external[2] = 0;
      tqh_last = v6->inbound_frames.tqh_last;
      external[3] = (nw_frame *)tqh_last;
      *tqh_last = (nw_frame *)external;
      v6->inbound_frames.tqh_last = external + 2;
LABEL_30:

      return (BOOL)external;
    }
    external = (nw_frame **)nw_frame_create_external(16, a2, (uint64_t)nw_protocol_outbound_data_finalizer, (uint64_t)v8);
    if (!external)
    {
      BOOL v18 = __nwlog_obj();
      *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
      os_log_type_t v41 = "nw_protocol_create_outbound_data";
      uint64_t v19 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v38 = 0;
      if (!__nwlog_fault(v19, &type, &v38)) {
        goto LABEL_75;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v20 = __nwlog_obj();
        os_log_type_t v21 = type;
        if (os_log_type_enabled(v20, type))
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          os_log_type_t v41 = "nw_protocol_create_outbound_data";
          _os_log_impl(&dword_1830D4000, v20, v21, "%{public}s nw_frame_create_external failed", buf, 0xCu);
        }
      }
      else if (v38)
      {
        int v30 = (char *)__nw_create_backtrace_string();
        os_log_type_t v20 = __nwlog_obj();
        os_log_type_t v31 = type;
        BOOL v32 = os_log_type_enabled(v20, type);
        if (v30)
        {
          if (v32)
          {
            *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
            os_log_type_t v41 = "nw_protocol_create_outbound_data";
            __int16 v42 = 2082;
            size_t v43 = (size_t)v30;
            _os_log_impl(&dword_1830D4000, v20, v31, "%{public}s nw_frame_create_external failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v30);
LABEL_75:
          if (!v19)
          {
LABEL_77:
            external = 0;
            goto LABEL_30;
          }
LABEL_76:
          free(v19);
          goto LABEL_77;
        }
        if (v32)
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          os_log_type_t v41 = "nw_protocol_create_outbound_data";
          _os_log_impl(&dword_1830D4000, v20, v31, "%{public}s nw_frame_create_external failed, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        os_log_type_t v20 = __nwlog_obj();
        os_log_type_t v36 = type;
        if (os_log_type_enabled(v20, type))
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          os_log_type_t v41 = "nw_protocol_create_outbound_data";
          _os_log_impl(&dword_1830D4000, v20, v36, "%{public}s nw_frame_create_external failed, backtrace limit exceeded", buf, 0xCu);
        }
      }
LABEL_74:

      goto LABEL_75;
    }
LABEL_28:
    external = external;
    goto LABEL_29;
  }
  if (!a2) {
    goto LABEL_12;
  }
  uint64_t buffer_manager_with_context = nw_frame_get_buffer_manager_with_context(*(void **)&v6->protocol_outbound_data_limit, a2);
  if (buffer_manager_with_context)
  {
    uint64_t v11 = buffer_manager_with_context;
    BOOL v12 = nw_mem_buffer_allocate(buffer_manager_with_context);
    if (v12)
    {
      char v13 = (void *)v12;
LABEL_14:
      __int16 v17 = v6;
      if (data_from_pool)
      {
        nw_frame_reset((uint64_t)data_from_pool, (uint64_t)v13, a2, (uint64_t)nw_protocol_outbound_data_finalizer, (uint64_t)v17);
        external = data_from_pool;
        goto LABEL_23;
      }
      external = (nw_frame **)nw_frame_create(16, (uint64_t)v13, a2, (uint64_t)nw_protocol_outbound_data_finalizer, (uint64_t)v17);
      if (external)
      {
LABEL_23:
        if (v11)
        {
          external[13] = (nw_frame *)v11;
        }
        else if (v13)
        {
          *((_WORD *)external + 102) |= 1u;
        }
        if (data_from_pool) {
          goto LABEL_29;
        }
        goto LABEL_28;
      }
      unint64_t v28 = __nwlog_obj();
      *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
      os_log_type_t v41 = "nw_protocol_create_outbound_data";
      uint64_t v19 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v38 = 0;
      if (!__nwlog_fault(v19, &type, &v38)) {
        goto LABEL_75;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v20 = __nwlog_obj();
        os_log_type_t v29 = type;
        if (os_log_type_enabled(v20, type))
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          os_log_type_t v41 = "nw_protocol_create_outbound_data";
          _os_log_impl(&dword_1830D4000, v20, v29, "%{public}s nw_frame_create failed", buf, 0xCu);
        }
        goto LABEL_74;
      }
      if (!v38)
      {
        os_log_type_t v20 = __nwlog_obj();
        os_log_type_t v37 = type;
        if (os_log_type_enabled(v20, type))
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          os_log_type_t v41 = "nw_protocol_create_outbound_data";
          _os_log_impl(&dword_1830D4000, v20, v37, "%{public}s nw_frame_create failed, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_74;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v20 = __nwlog_obj();
      os_log_type_t v33 = type;
      BOOL v34 = os_log_type_enabled(v20, type);
      if (!backtrace_string)
      {
        if (v34)
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          os_log_type_t v41 = "nw_protocol_create_outbound_data";
          _os_log_impl(&dword_1830D4000, v20, v33, "%{public}s nw_frame_create failed, no backtrace", buf, 0xCu);
        }
        goto LABEL_74;
      }
      if (v34)
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
        os_log_type_t v41 = "nw_protocol_create_outbound_data";
        __int16 v42 = 2082;
        size_t v43 = (size_t)backtrace_string;
        _os_log_impl(&dword_1830D4000, v20, v33, "%{public}s nw_frame_create failed, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_55:

      free(backtrace_string);
      if (!v19) {
        goto LABEL_77;
      }
      goto LABEL_76;
    }
  }
  char v13 = malloc_type_malloc(a2, 0xF2B69DE5uLL);
  if (v13)
  {
LABEL_13:
    uint64_t v11 = 0;
    goto LABEL_14;
  }
  os_log_type_t v14 = __nwlog_obj();
  os_log_type_enabled(v14, OS_LOG_TYPE_ERROR);
  *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
  os_log_type_t v41 = "strict_malloc";
  __int16 v42 = 2048;
  size_t v43 = a2;
  BOOL v15 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v15);
  if (!result)
  {
    free(v15);
LABEL_12:
    char v13 = 0;
    goto LABEL_13;
  }
  __break(1u);
  return result;
}

void sub_183258524(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id nw_protocol_create_data_from_pool(NWConcrete_nw_protocol_instance *a1, char a2)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  if (!*(void *)&a1->protocol_outbound_data_limit)
  {
    BOOL v12 = __nwlog_obj();
    *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_create_data_from_pool";
    char v13 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    char v27 = 0;
    if (__nwlog_fault(v13, type, &v27))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v14 = __nwlog_obj();
        os_log_type_t v15 = type[0];
        if (os_log_type_enabled(v14, type[0]))
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_create_data_from_pool";
          _os_log_impl(&dword_1830D4000, v14, v15, "%{public}s called with null instance->context", buf, 0xCu);
        }
      }
      else if (v27)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v14 = __nwlog_obj();
        os_log_type_t v17 = type[0];
        BOOL v18 = os_log_type_enabled(v14, type[0]);
        if (backtrace_string)
        {
          if (v18)
          {
            *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_protocol_create_data_from_pool";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&void buf[14] = backtrace_string;
            _os_log_impl(&dword_1830D4000, v14, v17, "%{public}s called with null instance->context, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_33;
        }
        if (v18)
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_create_data_from_pool";
          _os_log_impl(&dword_1830D4000, v14, v17, "%{public}s called with null instance->context, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        os_log_type_t v14 = __nwlog_obj();
        os_log_type_t v19 = type[0];
        if (os_log_type_enabled(v14, type[0]))
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_create_data_from_pool";
          _os_log_impl(&dword_1830D4000, v14, v19, "%{public}s called with null instance->context, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_33:
    if (v13) {
      free(v13);
    }
    return 0;
  }
  if (!LODWORD(a1->outbound_frames.tqh_first)) {
    return 0;
  }
  *(void *)netcore_stats_tcp_report buf = 0;
  *(void *)&buf[8] = buf;
  *(void *)&buf[16] = 0x3032000000;
  os_log_type_t v37 = __Block_byref_object_copy__11790;
  char v38 = __Block_byref_object_dispose__11791;
  id v39 = 0;
  v22[0] = MEMORY[0x1E4F143A8];
  v22[1] = 3221225472;
  char v23 = ___ZL33nw_protocol_create_data_from_poolP31NWConcrete_nw_protocol_instanceb_block_invoke;
  os_log_type_t v24 = &unk_1E523C078;
  char v26 = a2;
  int v25 = buf;
  tqh_last = a1->outbound_frames.tqh_last;
  do
  {
    if (!tqh_last) {
      break;
    }
    nw_report_resolution_report_enumerator_t v4 = (nw_frame **)tqh_last[2];
    char v5 = ((uint64_t (*)(void *))v23)(v22);
    tqh_last = v4;
  }
  while ((v5 & 1) != 0);
  uint64_t v6 = *(void *)(*(void *)&buf[8] + 40);
  if (v6)
  {
    uint64_t v7 = *(void *)(v6 + 16);
    os_log_type_t v8 = *(void **)(v6 + 24);
    if (v7)
    {
      *(void *)(v7 + 24) = v8;
      os_log_type_t v8 = *(void **)(v6 + 24);
    }
    else
    {
      *(void *)&a1->empty_frame_pool_count = v8;
    }
    *os_log_type_t v8 = v7;
    *(void *)(v6 + 16) = 0;
    *(void *)(v6 + 24) = 0;
    int tqh_first = (int)a1->outbound_frames.tqh_first;
    LODWORD(a1->outbound_frames.tqh_first) = tqh_first - 1;
    if (!tqh_first)
    {
      if (gLogDatapath)
      {
        os_log_type_t v20 = __nwlog_obj();
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
        {
          uint64_t tqh_first_low = LODWORD(a1->outbound_frames.tqh_first);
          *(_DWORD *)os_log_type_t type = 136446978;
          os_log_type_t v29 = "nw_protocol_create_data_from_pool";
          __int16 v30 = 2082;
          os_log_type_t v31 = "instance->empty_frame_pool_count";
          __int16 v32 = 2048;
          uint64_t v33 = 1;
          __int16 v34 = 2048;
          uint64_t v35 = tqh_first_low;
          _os_log_impl(&dword_1830D4000, v20, OS_LOG_TYPE_DEBUG, "%{public}s Underflow: %{public}s, decrement %llu, result %llu", (uint8_t *)type, 0x2Au);
        }
      }
      LODWORD(a1->outbound_frames.tqh_first) = 0;
    }
  }
  id v10 = *(id *)(*(void *)&buf[8] + 40);
  _Block_object_dispose(buf, 8);

  return v10;
}

BOOL ___ZL33nw_protocol_create_data_from_poolP31NWConcrete_nw_protocol_instanceb_block_invoke(uint64_t a1, void *a2)
{
  id v4 = a2;
  int v5 = nw_frame_uses_external_data((uint64_t)v4);
  int v6 = *(unsigned __int8 *)(a1 + 40);
  if (v6 == v5) {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), a2);
  }

  return v6 != v5;
}

BOOL nw_socket_service_writes(uint64_t a1)
{
  uint64_t v15 = 0;
  __int16 v16 = &v15;
  int v18 = 0;
  uint64_t v17 = 0x2000000000;
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 0x40000000;
  uint64_t v11 = ___ZL24nw_socket_service_writesP9nw_socket_block_invoke;
  BOOL v12 = &unk_1E5247DA0;
  char v13 = &v15;
  uint64_t v14 = a1;
  uint64_t v2 = *(void *)(a1 + 232);
  do
  {
    if (!v2) {
      break;
    }
    uint64_t v3 = *(void *)(v2 + 16);
    char v4 = ((uint64_t (*)(void *))v11)(v10);
    uint64_t v2 = v3;
  }
  while ((v4 & 1) != 0);
  int v5 = *((_DWORD *)v16 + 6);
  int v6 = (_WORD *)(a1 + 301);
  int v7 = *(unsigned __int16 *)(a1 + 301) | (*(unsigned __int8 *)(a1 + 303) << 16);
  if (v5)
  {
    if ((*(_WORD *)(a1 + 301) & 0x800) == 0)
    {
      *(unsigned char *)(a1 + 303) = BYTE2(v7);
      _WORD *v6 = v7 | 0x800;
      nw_queue_resume_source(*(void *)(a1 + 120));
      LOWORD(v7) = *v6;
    }
    if ((v7 & 0x8000) == 0) {
      nw_socket_set_send_low_water_mark(a1, *((_DWORD *)v16 + 6));
    }
  }
  else if ((*(_WORD *)(a1 + 301) & 0x800) != 0)
  {
    int v8 = *(_WORD *)(a1 + 301) & 0xF7FF | (*(unsigned __int8 *)(a1 + 303) << 16);
    _WORD *v6 = *(_WORD *)(a1 + 301) & 0xF7FF;
    *(unsigned char *)(a1 + 303) = BYTE2(v8);
    nw_queue_suspend_source(*(void *)(a1 + 120));
  }
  _Block_object_dispose(&v15, 8);
  return v5 == 0;
}

BOOL ___ZL24nw_socket_service_writesP9nw_socket_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v150 = *MEMORY[0x1E4F143B8];
  size[0] = 0;
  int v4 = nw_frame_uses_external_data(a2);
  memset(&v138, 0, sizeof(v138));
  v138.msg_flags = 128;
  if (!v4)
  {
    uint64_t v9 = nw_frame_unclaimed_bytes(a2, size);
    BOOL v10 = v9 != 0;
    uint64_t v11 = size[0];
    BOOL v12 = size[0] != 0;
    BOOL v13 = !v10 || !v12;
    if (v10 && v12) {
      uint64_t v14 = v9;
    }
    else {
      uint64_t v14 = 0;
    }
    if (v13) {
      uint64_t v11 = 0;
    }
    *(void *)&size[1] = v14;
    uint64_t v140 = v11;
    v138.msg_iov = (iovec *)&size[1];
    v138.msg_iovlen = 1;
    buffer = (void *)nw_frame_get_buffer(a2, 0);
    goto LABEL_14;
  }
  unsigned int v137 = 0;
  external_data = nw_frame_get_external_data(a2, &v137, size);
  if (!external_data || !size[0])
  {
    uint64_t v15 = 0;
    *(void *)&size[1] = 0;
    uint64_t v140 = 0;
    goto LABEL_31;
  }
  int v6 = external_data;
  int v7 = nw_dispatch_data_to_iovec(external_data, v137, size[0], (uint64_t)&size[1], 10);
  if (v7)
  {
    v138.msg_iov = (iovec *)&size[1];
    v138.msg_iovlen = v7;
    if (v7 < 1)
    {
LABEL_139:
      nw_frame_set_external_data(a2, 0, 0);
LABEL_193:
      int v111 = *(char *)(a2 + 186);
      nw_frame_reset(a2, 0, 0, 0, 0);
      uint64_t v114 = *(void *)(a2 + 16);
      uint64_t v115 = *(void **)(a2 + 24);
      uint64_t v113 = (void *)(a2 + 16);
      if (v114)
      {
        *(void *)(v114 + 24) = v115;
        uint64_t v115 = *(void **)(a2 + 24);
      }
      else
      {
        *(void *)(*(void *)(a1 + 40) + 240) = v115;
      }
      void *v115 = v114;
      *uint64_t v113 = 0;
      *(void *)(a2 + 24) = 0;
      uint64_t v116 = *(void *)(a1 + 40);
      BOOL v117 = *(uint64_t **)(v116 + 208);
      *(void *)(a2 + 24) = v117;
      uint64_t *v117 = a2;
      *(void *)(v116 + 208) = v113;
      if ((v111 & 0x80000000) == 0) {
        return 1;
      }
      uint64_t v119 = *(void *)(a1 + 40);
      if ((!v119 || (*(_WORD *)(v119 + 301) & 0x80) == 0) && gLogDatapath)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        uint32_t v131 = gconnectionLogObj;
        BOOL v132 = os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG);
        uint64_t v119 = *(void *)(a1 + 40);
        if (v132)
        {
          if (v119) {
            uint64_t v133 = (const char *)(v119 + 308);
          }
          else {
            uint64_t v133 = "";
          }
          *(_DWORD *)uint64_t applier = 136446466;
          *(void *)&void applier[4] = "nw_socket_service_writes_block_invoke";
          *(_WORD *)&applier[12] = 2082;
          *(void *)&applier[14] = v133;
          _os_log_impl(&dword_1830D4000, v131, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s calling output finished because frame indicated connection is complete", applier, 0x16u);
          uint64_t v119 = *(void *)(a1 + 40);
        }
      }
      if (v119) {
        uint64_t v120 = (nw_protocol *)(v119 - 96);
      }
      else {
        uint64_t v120 = 0;
      }
      nw_socket_output_finished(v120, v112);
      return 0;
    }
    buffer = 0;
LABEL_14:
    uint64_t v15 = 0;
    if (a2)
    {
LABEL_15:
      char v16 = *(unsigned char *)(a2 + 186) & 3;
      char v17 = *(unsigned char *)(a2 + 184);
      goto LABEL_16;
    }
LABEL_32:
    __nwlog_obj();
    *(_DWORD *)uint64_t applier = 136446210;
    *(void *)&void applier[4] = "__nw_frame_get_ecn_flag";
    char v27 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(v146) = 16;
    LOBYTE(v143) = 0;
    if (!__nwlog_fault(v27, &v146, &v143)) {
      goto LABEL_213;
    }
    if (v146 == 17)
    {
      unint64_t v28 = __nwlog_obj();
      os_log_type_t v29 = v146;
      if (!os_log_type_enabled(v28, (os_log_type_t)v146)) {
        goto LABEL_213;
      }
      *(_DWORD *)uint64_t applier = 136446210;
      *(void *)&void applier[4] = "__nw_frame_get_ecn_flag";
      __int16 v30 = "%{public}s called with null frame";
    }
    else if ((_BYTE)v143)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      unint64_t v28 = __nwlog_obj();
      os_log_type_t v29 = v146;
      BOOL v108 = os_log_type_enabled(v28, (os_log_type_t)v146);
      if (backtrace_string)
      {
        if (v108)
        {
          *(_DWORD *)uint64_t applier = 136446466;
          *(void *)&void applier[4] = "__nw_frame_get_ecn_flag";
          *(_WORD *)&applier[12] = 2082;
          *(void *)&applier[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v28, v29, "%{public}s called with null frame, dumping backtrace:%{public}s", applier, 0x16u);
        }
        free(backtrace_string);
LABEL_213:
        if (v27) {
          free(v27);
        }
        __nwlog_obj();
        *(_DWORD *)uint64_t applier = 136446210;
        *(void *)&void applier[4] = "__nw_frame_get_dscp_value";
        uint64_t v121 = (char *)_os_log_send_and_compose_impl();
        LOBYTE(v146) = 16;
        LOBYTE(v143) = 0;
        if (!__nwlog_fault(v121, &v146, &v143)) {
          goto LABEL_234;
        }
        if (v146 == 17)
        {
          uint64_t v122 = __nwlog_obj();
          os_log_type_t v123 = v146;
          if (os_log_type_enabled(v122, (os_log_type_t)v146))
          {
            *(_DWORD *)uint64_t applier = 136446210;
            *(void *)&void applier[4] = "__nw_frame_get_dscp_value";
            uint64_t v124 = "%{public}s called with null frame";
LABEL_233:
            _os_log_impl(&dword_1830D4000, v122, v123, v124, applier, 0xCu);
          }
        }
        else if ((_BYTE)v143)
        {
          uint64_t v125 = (char *)__nw_create_backtrace_string();
          uint64_t v122 = __nwlog_obj();
          os_log_type_t v123 = v146;
          BOOL v126 = os_log_type_enabled(v122, (os_log_type_t)v146);
          if (v125)
          {
            if (v126)
            {
              *(_DWORD *)uint64_t applier = 136446466;
              *(void *)&void applier[4] = "__nw_frame_get_dscp_value";
              *(_WORD *)&applier[12] = 2082;
              *(void *)&applier[14] = v125;
              _os_log_impl(&dword_1830D4000, v122, v123, "%{public}s called with null frame, dumping backtrace:%{public}s", applier, 0x16u);
            }
            free(v125);
            goto LABEL_234;
          }
          if (v126)
          {
            *(_DWORD *)uint64_t applier = 136446210;
            *(void *)&void applier[4] = "__nw_frame_get_dscp_value";
            uint64_t v124 = "%{public}s called with null frame, no backtrace";
            goto LABEL_233;
          }
        }
        else
        {
          uint64_t v122 = __nwlog_obj();
          os_log_type_t v123 = v146;
          if (os_log_type_enabled(v122, (os_log_type_t)v146))
          {
            *(_DWORD *)uint64_t applier = 136446210;
            *(void *)&void applier[4] = "__nw_frame_get_dscp_value";
            uint64_t v124 = "%{public}s called with null frame, backtrace limit exceeded";
            goto LABEL_233;
          }
        }
LABEL_234:
        if (v121) {
          free(v121);
        }
        char v16 = 0;
        char v17 = 0;
LABEL_16:
        unsigned __int8 v18 = v16 | (4 * v17);
        uint64_t v19 = *(void *)(a1 + 40);
        if (*(unsigned __int8 *)(v19 + 300) == v18) {
          goto LABEL_39;
        }
        LODWORD(v146) = v18;
        int v20 = *(unsigned __int8 *)(v19 + 304);
        if (v20 == 30)
        {
          if (setsockopt(*(_DWORD *)(v19 + 172), 41, 36, &v146, 4u) < 0)
          {
            int v31 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            id v22 = gLogObj;
            if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR)) {
              goto LABEL_39;
            }
            *(_DWORD *)uint64_t applier = 136446466;
            *(void *)&void applier[4] = "nw_socket_service_writes_block_invoke";
            *(_WORD *)&applier[12] = 1024;
            *(_DWORD *)&applier[14] = v31;
            char v23 = "%{public}s setsockopt IPV6_TCLASS %{darwin.errno}d";
LABEL_38:
            _os_log_impl(&dword_1830D4000, v22, OS_LOG_TYPE_ERROR, v23, applier, 0x12u);
LABEL_39:
            if (a2)
            {
              int v32 = *(_DWORD *)(a2 + 176);
              if (v32 > 3145999)
              {
                if (v32 <= 3670319)
                {
                  if (v32 == 3146000)
                  {
                    int v33 = 5;
                    goto LABEL_61;
                  }
                  if (v32 == 3670272)
                  {
                    int v33 = 3;
                    goto LABEL_61;
                  }
                  goto LABEL_62;
                }
                if (v32 == 3670320)
                {
                  int v33 = 2;
                  goto LABEL_61;
                }
                if (v32 == 4194688)
                {
                  int v33 = 4;
                  goto LABEL_61;
                }
                if (v32 != 4718992) {
                  goto LABEL_62;
                }
              }
              else
              {
                if (v32 <= 1572879)
                {
                  int v33 = 1;
                  if (v32 == 524432 || v32 == 1048704) {
                    goto LABEL_61;
                  }
                  goto LABEL_62;
                }
                if (v32 != 1572880)
                {
                  if (v32 == 2097184)
                  {
                    int v33 = 7;
                    goto LABEL_61;
                  }
                  if (v32 == 2621728)
                  {
                    int v33 = 6;
LABEL_61:
                    uint64_t v146 = 0xFFFF00000010;
                    v138.msg_controllen += 16;
                    LODWORD(v147) = 4374;
                    HIDWORD(v147) = v33;
                    v138.msg_control = &v146;
                  }
LABEL_62:
                  ssize_t v35 = sendmsg(*(_DWORD *)(*(void *)(a1 + 40) + 172), &v138, 0);
                  if ((v35 & 0x8000000000000000) == 0)
                  {
                    uint64_t v36 = *(void *)(a1 + 40);
                    if (((*(unsigned __int16 *)(v36 + 301) | (*(unsigned __int8 *)(v36 + 303) << 16)) & 0x40000) != 0)
                    {
                      nw_socket_internal_error(v36, 0);
                      uint64_t v37 = *(void *)(a1 + 40);
                      int v38 = *(unsigned __int16 *)(v37 + 301);
                      unsigned int v39 = (v38 | (*(unsigned __int8 *)(v37 + 303) << 16)) & 0xFFFBFFFF;
                      *(_WORD *)(v37 + 301) = v38;
                      *(unsigned char *)(v37 + 303) = BYTE2(v39);
                    }
                  }
                  if (v15) {
                    free(v15);
                  }
                  if ((v35 & 0x8000000000000000) == 0)
                  {
                    uint64_t v40 = *(void *)(a1 + 40);
                    __int16 v41 = *(_WORD *)(v40 + 301);
                    if (size[0] > v35)
                    {
                      if ((*(_WORD *)(v40 + 301) & 0x100) != 0)
                      {
                        long long v143 = 0uLL;
                        if (v40) {
                          uint64_t v49 = (_OWORD *)(v40 - 96);
                        }
                        else {
                          uint64_t v49 = 0;
                        }
                        nw_protocol_get_flow_id(v49, &v143);
                        uint64_t v50 = *(void *)(a1 + 40);
                        if (!v50 || (*(_WORD *)(v50 + 301) & 0x80) == 0)
                        {
                          if (__nwlog_connection_log::onceToken != -1) {
                            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
                          }
                          os_log_type_t v51 = gconnectionLogObj;
                          if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEFAULT))
                          {
                            uint64_t v52 = *(void *)(a1 + 40);
                            unsigned int v53 = (const char *)(v52 + 308);
                            if (!v52) {
                              unsigned int v53 = "";
                            }
                            uint64_t v54 = *(void *)(v52 + 8);
                            ssize_t v55 = v35 - 1;
                            if (!v35) {
                              ssize_t v55 = 0;
                            }
                            *(_DWORD *)uint64_t applier = 136447490;
                            *(void *)&void applier[4] = "nw_socket_service_writes_block_invoke";
                            *(_WORD *)&applier[12] = 2082;
                            *(void *)&applier[14] = v53;
                            *(_WORD *)&applier[22] = 1024;
                            *(_DWORD *)&unsigned char applier[24] = v35;
                            *(_WORD *)&applier[28] = 1024;
                            *(_DWORD *)&applier[30] = size[0];
                            *(_WORD *)&applier[34] = 2048;
                            *(void *)&applier[36] = v54;
                            *(_WORD *)&applier[44] = 2048;
                            *(void *)&applier[46] = v54 + v55;
                            _os_log_impl(&dword_1830D4000, v51, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}s Wrote %u/%u bytes, waiting for writable event (overall bytes %llu -> %llu)", applier, 0x36u);
                          }
                        }
                        pthread_once(&nw_mpkl_log_init(void)::init_once, (void (*)(void))nw_mpkl_log_init_once);
                        os_log_type_t v56 = gMpklLogObj;
                        if (os_log_type_enabled((os_log_t)gMpklLogObj, OS_LOG_TYPE_DEFAULT))
                        {
                          uint64_t v57 = *(void *)(a1 + 40);
                          uint64_t v58 = *(void *)(v57 + 8);
                          ssize_t v59 = v35 - 1;
                          if (!v35) {
                            ssize_t v59 = 0;
                          }
                          int v60 = *(unsigned __int8 *)(v57 + 305);
                          *(_DWORD *)uint64_t applier = 67110658;
                          *(_DWORD *)&void applier[4] = 150;
                          *(_WORD *)&applier[8] = 1024;
                          *(_DWORD *)&applier[10] = 100;
                          *(_WORD *)&applier[14] = 1042;
                          *(_DWORD *)&applier[16] = 16;
                          *(_WORD *)&applier[20] = 2098;
                          *(void *)&applier[22] = &v143;
                          *(_WORD *)&applier[30] = 2048;
                          *(void *)&applier[32] = v58;
                          *(_WORD *)&applier[40] = 2048;
                          *(void *)&applier[42] = v58 + v59;
                          *(_WORD *)&applier[50] = 1024;
                          *(_DWORD *)&applier[52] = v60;
                          _os_log_impl(&dword_1830D4000, v56, OS_LOG_TYPE_DEFAULT, "32 {curProtocol: %hhu, nextProtocol: %hhu, curUUID: %{public}.16P, curStart: %llu, curEnd: %llu, logSeqn: %hhu}", applier, 0x38u);
                        }
                        uint64_t v40 = *(void *)(a1 + 40);
                        ++*(unsigned char *)(v40 + 305);
                      }
                      else if ((v41 & 0x80) == 0 && gLogDatapath)
                      {
                        if (__nwlog_connection_log::onceToken != -1) {
                          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
                        }
                        __int16 v42 = gconnectionLogObj;
                        BOOL v43 = os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG);
                        uint64_t v40 = *(void *)(a1 + 40);
                        if (v43)
                        {
                          uint64_t v44 = (const char *)(v40 + 308);
                          *(void *)&void applier[4] = "nw_socket_service_writes_block_invoke";
                          *(_DWORD *)uint64_t applier = 136446978;
                          if (!v40) {
                            uint64_t v44 = "";
                          }
                          *(_WORD *)&applier[12] = 2082;
                          *(void *)&applier[14] = v44;
                          *(_WORD *)&applier[22] = 1024;
                          *(_DWORD *)&unsigned char applier[24] = v35;
                          *(_WORD *)&applier[28] = 1024;
                          *(_DWORD *)&applier[30] = size[0];
                          _os_log_impl(&dword_1830D4000, v42, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s Wrote %u/%u bytes, waiting for writable event", applier, 0x22u);
                          uint64_t v40 = *(void *)(a1 + 40);
                        }
                      }
                      *(void *)(v40 + 8) += v35;
                      if (*(_DWORD *)(v40 + 176) == 1) {
                        ++*(void *)(v40 + 24);
                      }
                      nw_frame_claim(a2, v34, v35, 0);
                      *(unsigned char *)(*(void *)(a1 + 40) + 303) |= 0x20u;
                      *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = size[0] - v35;
                      return 0;
                    }
                    if ((*(_WORD *)(v40 + 301) & 0x100) != 0)
                    {
                      long long v143 = 0uLL;
                      if (v40) {
                        uint64_t v61 = (_OWORD *)(v40 - 96);
                      }
                      else {
                        uint64_t v61 = 0;
                      }
                      nw_protocol_get_flow_id(v61, &v143);
                      uint64_t v62 = *(void *)(a1 + 40);
                      if (!v62 || (*(_WORD *)(v62 + 301) & 0x80) == 0)
                      {
                        if (__nwlog_connection_log::onceToken != -1) {
                          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
                        }
                        unsigned int v63 = gconnectionLogObj;
                        if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEFAULT))
                        {
                          uint64_t v64 = *(void *)(a1 + 40);
                          uint64_t v65 = (const char *)(v64 + 308);
                          if (!v64) {
                            uint64_t v65 = "";
                          }
                          uint64_t v66 = *(void *)(v64 + 8);
                          ssize_t v67 = v35 - 1;
                          if (!v35) {
                            ssize_t v67 = 0;
                          }
                          *(_DWORD *)uint64_t applier = 136447234;
                          *(void *)&void applier[4] = "nw_socket_service_writes_block_invoke";
                          *(_WORD *)&applier[12] = 2082;
                          *(void *)&applier[14] = v65;
                          *(_WORD *)&applier[22] = 1024;
                          *(_DWORD *)&unsigned char applier[24] = size[0];
                          *(_WORD *)&applier[28] = 2048;
                          *(void *)&applier[30] = v66;
                          *(_WORD *)&applier[38] = 2048;
                          *(void *)&applier[40] = v66 + v67;
                          _os_log_impl(&dword_1830D4000, v63, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}s Wrote %u bytes (overall bytes %llu -> %llu)", applier, 0x30u);
                        }
                      }
                      pthread_once(&nw_mpkl_log_init(void)::init_once, (void (*)(void))nw_mpkl_log_init_once);
                      os_log_type_t v68 = gMpklLogObj;
                      if (os_log_type_enabled((os_log_t)gMpklLogObj, OS_LOG_TYPE_DEFAULT))
                      {
                        uint64_t v69 = *(void *)(a1 + 40);
                        uint64_t v70 = *(void *)(v69 + 8);
                        ssize_t v71 = v35 - 1;
                        if (!v35) {
                          ssize_t v71 = 0;
                        }
                        int v72 = *(unsigned __int8 *)(v69 + 305);
                        *(_DWORD *)uint64_t applier = 67110658;
                        *(_DWORD *)&void applier[4] = 150;
                        *(_WORD *)&applier[8] = 1024;
                        *(_DWORD *)&applier[10] = 100;
                        *(_WORD *)&applier[14] = 1042;
                        *(_DWORD *)&applier[16] = 16;
                        *(_WORD *)&applier[20] = 2098;
                        *(void *)&applier[22] = &v143;
                        *(_WORD *)&applier[30] = 2048;
                        *(void *)&applier[32] = v70;
                        *(_WORD *)&applier[40] = 2048;
                        *(void *)&applier[42] = v70 + v71;
                        *(_WORD *)&applier[50] = 1024;
                        *(_DWORD *)&applier[52] = v72;
                        _os_log_impl(&dword_1830D4000, v68, OS_LOG_TYPE_DEFAULT, "32 {curProtocol: %hhu, nextProtocol: %hhu, curUUID: %{public}.16P, curStart: %llu, curEnd: %llu, logSeqn: %hhu}", applier, 0x38u);
                      }
                      uint64_t v40 = *(void *)(a1 + 40);
                      ++*(unsigned char *)(v40 + 305);
                    }
                    else if ((v41 & 0x80) == 0 && gLogDatapath)
                    {
                      if (__nwlog_connection_log::onceToken != -1) {
                        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
                      }
                      int v46 = gconnectionLogObj;
                      BOOL v47 = os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG);
                      uint64_t v40 = *(void *)(a1 + 40);
                      if (v47)
                      {
                        os_log_type_t v48 = (const char *)(v40 + 308);
                        *(void *)&void applier[4] = "nw_socket_service_writes_block_invoke";
                        *(_DWORD *)uint64_t applier = 136446722;
                        if (!v40) {
                          os_log_type_t v48 = "";
                        }
                        *(_WORD *)&applier[12] = 2082;
                        *(void *)&applier[14] = v48;
                        *(_WORD *)&applier[22] = 1024;
                        *(_DWORD *)&unsigned char applier[24] = size[0];
                        _os_log_impl(&dword_1830D4000, v46, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s Wrote %u bytes", applier, 0x1Cu);
                        uint64_t v40 = *(void *)(a1 + 40);
                      }
                    }
                    *(void *)(v40 + 8) += v35;
                    if (*(_DWORD *)(v40 + 176) == 1) {
                      ++*(void *)(v40 + 24);
                    }
                    if (((*(unsigned __int16 *)(v40 + 301) | (*(unsigned __int8 *)(v40 + 303) << 16)) & 0x200000) != 0)
                    {
                      *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
                      nw_socket_set_send_low_water_mark(v40, 1u);
                      uint64_t v73 = *(void *)(a1 + 40);
                      int v74 = *(unsigned __int16 *)(v73 + 301);
                      unsigned int v75 = (v74 | (*(unsigned __int8 *)(v73 + 303) << 16)) & 0xFFDFFFFF;
                      *(_WORD *)(v73 + 301) = v74;
                      *(unsigned char *)(v73 + 303) = BYTE2(v75);
                    }
                    if (_nw_signposts_once != -1) {
                      dispatch_once(&_nw_signposts_once, &__block_literal_global_22_65191);
                    }
                    if (_nw_signposts_enabled && kdebug_is_enabled())
                    {
                      kdebug_trace();
                      if (v4) {
                        goto LABEL_139;
                      }
                    }
                    else if (v4)
                    {
                      goto LABEL_139;
                    }
                    if (buffer) {
                      free(buffer);
                    }
                    goto LABEL_193;
                  }
                  uint64_t v45 = **(unsigned int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
                  if (v45 == 32)
                  {
                    uint64_t v84 = *(void *)(a1 + 40);
                    if (v84 && (*(_WORD *)(v84 + 301) & 0x80) != 0) {
                      goto LABEL_162;
                    }
                    if (__nwlog_connection_log::onceToken != -1) {
                      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
                    }
                    uint64_t v85 = gconnectionLogObj;
                    if (!os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_INFO)) {
                      goto LABEL_162;
                    }
                    uint64_t v86 = *(void *)(a1 + 40);
                    __int16 v87 = (const char *)(v86 + 308);
                    if (!v86) {
                      __int16 v87 = "";
                    }
                    int v88 = *(_DWORD *)(v86 + 172);
                    *(_DWORD *)uint64_t applier = 136446978;
                    *(void *)&void applier[4] = "nw_socket_service_writes_block_invoke";
                    *(_WORD *)&applier[12] = 2082;
                    *(void *)&applier[14] = v87;
                    *(_WORD *)&applier[22] = 1024;
                    *(_DWORD *)&unsigned char applier[24] = v88;
                    *(_WORD *)&applier[28] = 1024;
                    *(_DWORD *)&applier[30] = size[0];
                    __int16 v89 = "%{public}s %{public}s sendmsg(fd %d, %u bytes): socket has been closed";
                    os_log_type_t v90 = v85;
                    os_log_type_t v91 = OS_LOG_TYPE_INFO;
                    uint32_t v92 = 34;
                    goto LABEL_161;
                  }
                  if (v45 != 35)
                  {
                    if (v45 == 55)
                    {
                      nw_socket_internal_link_state(*(void *)(a1 + 40), 1);
                      *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
                      return 0;
                    }
                    if (__nwlog_connection_log::onceToken != -1) {
                      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
                    }
                    uint64_t v93 = gconnectionLogObj;
                    if (!os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
                    {
LABEL_162:
                      *(unsigned char *)(*(void *)(a1 + 40) + 303) |= 4u;
                      nw_socket_internal_error(*(void *)(a1 + 40), v45);
                      return 0;
                    }
                    uint64_t v94 = *(void *)(a1 + 40);
                    uint64_t v95 = v94 + 308;
                    LODWORD(v94) = *(_DWORD *)(v94 + 172);
                    *(_DWORD *)uint64_t applier = 136447234;
                    *(void *)&void applier[4] = "nw_socket_service_writes_block_invoke";
                    *(_WORD *)&applier[12] = 2080;
                    *(void *)&applier[14] = v95;
                    *(_WORD *)&applier[22] = 1024;
                    *(_DWORD *)&unsigned char applier[24] = v94;
                    *(_WORD *)&applier[28] = 1024;
                    *(_DWORD *)&applier[30] = size[0];
                    *(_WORD *)&applier[34] = 1024;
                    *(_DWORD *)&applier[36] = v45;
                    __int16 v89 = "%{public}s %s sendmsg(fd %d, %u bytes) %{darwin.errno}d";
                    os_log_type_t v90 = v93;
                    os_log_type_t v91 = OS_LOG_TYPE_ERROR;
                    uint32_t v92 = 40;
LABEL_161:
                    _os_log_impl(&dword_1830D4000, v90, v91, v89, applier, v92);
                    goto LABEL_162;
                  }
                  __int16 v76 = *(_WORD *)(*(void *)(a1 + 40) + 301);
                  if ((v76 & 0x100) != 0)
                  {
                    if ((v76 & 0x80) != 0) {
                      goto LABEL_171;
                    }
                    if (__nwlog_connection_log::onceToken != -1) {
                      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
                    }
                    uint64_t v96 = gconnectionLogObj;
                    if (!os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEFAULT)) {
                      goto LABEL_171;
                    }
                    uint64_t v97 = *(void *)(a1 + 40);
                    os_log_type_t v98 = (const char *)(v97 + 308);
                    if (!v97) {
                      os_log_type_t v98 = "";
                    }
                    uint64_t v99 = *(void *)(v97 + 8);
                    *(_DWORD *)uint64_t applier = 136446978;
                    *(void *)&void applier[4] = "nw_socket_service_writes_block_invoke";
                    *(_WORD *)&applier[12] = 2082;
                    *(void *)&applier[14] = v98;
                    *(_WORD *)&applier[22] = 1024;
                    *(_DWORD *)&unsigned char applier[24] = size[0];
                    *(_WORD *)&applier[28] = 2048;
                    *(void *)&applier[30] = v99;
                    os_log_type_t v80 = "%{public}s %{public}s Wrote 0/%u bytes, waiting for writable event (overall bytes still %llu)";
                    char v81 = v96;
                    os_log_type_t v82 = OS_LOG_TYPE_DEFAULT;
                    uint32_t v83 = 38;
                  }
                  else
                  {
                    if ((v76 & 0x80) != 0 || !gLogDatapath) {
                      goto LABEL_171;
                    }
                    if (__nwlog_connection_log::onceToken != -1) {
                      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
                    }
                    uint64_t v77 = gconnectionLogObj;
                    if (!os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG)) {
                      goto LABEL_171;
                    }
                    uint64_t v78 = *(void *)(a1 + 40);
                    os_log_type_t v79 = (const char *)(v78 + 308);
                    if (!v78) {
                      os_log_type_t v79 = "";
                    }
                    *(_DWORD *)uint64_t applier = 136446722;
                    *(void *)&void applier[4] = "nw_socket_service_writes_block_invoke";
                    *(_WORD *)&applier[12] = 2082;
                    *(void *)&applier[14] = v79;
                    *(_WORD *)&applier[22] = 1024;
                    *(_DWORD *)&unsigned char applier[24] = size[0];
                    os_log_type_t v80 = "%{public}s %{public}s Wrote 0/%u bytes, waiting for writable event";
                    char v81 = v77;
                    os_log_type_t v82 = OS_LOG_TYPE_DEBUG;
                    uint32_t v83 = 28;
                  }
                  _os_log_impl(&dword_1830D4000, v81, v82, v80, applier, v83);
LABEL_171:
                  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
                  if (v138.msg_iovlen >= 1)
                  {
                    uint64_t v100 = 0;
                    p_iov_len = &v138.msg_iov->iov_len;
                    do
                    {
                      int v102 = *(_DWORD *)p_iov_len;
                      p_iov_len += 2;
                      *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) += v102;
                      ++v100;
                    }
                    while (v100 < v138.msg_iovlen);
                  }
                  if (*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
                    *(unsigned char *)(*(void *)(a1 + 40) + 303) |= 0x20u;
                  }
                  return 0;
                }
              }
              int v33 = 8;
              goto LABEL_61;
            }
            __nwlog_obj();
            *(_DWORD *)uint64_t applier = 136446210;
            *(void *)&void applier[4] = "__nw_frame_get_network_service_type";
            os_log_type_t v103 = (char *)_os_log_send_and_compose_impl();
            LOBYTE(v143) = 16;
            LOBYTE(v137) = 0;
            if (__nwlog_fault(v103, &v143, &v137))
            {
              if (v143 == 17)
              {
                os_log_type_t v104 = __nwlog_obj();
                os_log_type_t v105 = v143;
                if (!os_log_type_enabled(v104, (os_log_type_t)v143)) {
                  goto LABEL_229;
                }
                *(_DWORD *)uint64_t applier = 136446210;
                *(void *)&void applier[4] = "__nw_frame_get_network_service_type";
                unsigned int v106 = "%{public}s called with null frame";
                goto LABEL_228;
              }
              if (!(_BYTE)v137)
              {
                os_log_type_t v104 = __nwlog_obj();
                os_log_type_t v105 = v143;
                if (!os_log_type_enabled(v104, (os_log_type_t)v143)) {
                  goto LABEL_229;
                }
                *(_DWORD *)uint64_t applier = 136446210;
                *(void *)&void applier[4] = "__nw_frame_get_network_service_type";
                unsigned int v106 = "%{public}s called with null frame, backtrace limit exceeded";
                goto LABEL_228;
              }
              BOOL v109 = (char *)__nw_create_backtrace_string();
              os_log_type_t v104 = __nwlog_obj();
              os_log_type_t v105 = v143;
              BOOL v110 = os_log_type_enabled(v104, (os_log_type_t)v143);
              if (v109)
              {
                if (v110)
                {
                  *(_DWORD *)uint64_t applier = 136446466;
                  *(void *)&void applier[4] = "__nw_frame_get_network_service_type";
                  *(_WORD *)&applier[12] = 2082;
                  *(void *)&applier[14] = v109;
                  _os_log_impl(&dword_1830D4000, v104, v105, "%{public}s called with null frame, dumping backtrace:%{public}s", applier, 0x16u);
                }
                free(v109);
                goto LABEL_229;
              }
              if (v110)
              {
                *(_DWORD *)uint64_t applier = 136446210;
                *(void *)&void applier[4] = "__nw_frame_get_network_service_type";
                unsigned int v106 = "%{public}s called with null frame, no backtrace";
LABEL_228:
                _os_log_impl(&dword_1830D4000, v104, v105, v106, applier, 0xCu);
              }
            }
LABEL_229:
            if (v103) {
              free(v103);
            }
            goto LABEL_62;
          }
        }
        else
        {
          if (v20 != 2) {
            goto LABEL_39;
          }
          if (setsockopt(*(_DWORD *)(v19 + 172), 0, 3, &v146, 4u) < 0)
          {
            int v21 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            id v22 = gLogObj;
            if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR)) {
              goto LABEL_39;
            }
            *(_DWORD *)uint64_t applier = 136446466;
            *(void *)&void applier[4] = "nw_socket_service_writes_block_invoke";
            *(_WORD *)&applier[12] = 1024;
            *(_DWORD *)&applier[14] = v21;
            char v23 = "%{public}s setsockopt IP_TOS %{darwin.errno}d";
            goto LABEL_38;
          }
        }
        *(unsigned char *)(*(void *)(a1 + 40) + 300) = v18;
        goto LABEL_39;
      }
      if (!v108) {
        goto LABEL_213;
      }
      *(_DWORD *)uint64_t applier = 136446210;
      *(void *)&void applier[4] = "__nw_frame_get_ecn_flag";
      __int16 v30 = "%{public}s called with null frame, no backtrace";
    }
    else
    {
      unint64_t v28 = __nwlog_obj();
      os_log_type_t v29 = v146;
      if (!os_log_type_enabled(v28, (os_log_type_t)v146)) {
        goto LABEL_213;
      }
      *(_DWORD *)uint64_t applier = 136446210;
      *(void *)&void applier[4] = "__nw_frame_get_ecn_flag";
      __int16 v30 = "%{public}s called with null frame, backtrace limit exceeded";
    }
    _os_log_impl(&dword_1830D4000, v28, v29, v30, applier, 0xCu);
    goto LABEL_213;
  }
  size_t v24 = size[0];
  if (!size[0])
  {
    uint64_t v127 = __nwlog_obj();
    os_log_type_enabled(v127, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t applier = 136446210;
    *(void *)&void applier[4] = "strict_malloc";
    uint64_t v128 = (void *)_os_log_send_and_compose_impl();
    BOOL result = __nwlog_abort((uint64_t)v128);
    if (result) {
      goto LABEL_256;
    }
    free(v128);
  }
  uint64_t v15 = malloc_type_malloc(v24, 0xF2B69DE5uLL);
  if (v15)
  {
    uint64_t v25 = *(void *)(a1 + 40);
    if (!v25) {
      goto LABEL_29;
    }
LABEL_28:
    if ((*(_WORD *)(v25 + 301) & 0x80) != 0)
    {
LABEL_30:
      *(void *)&size[1] = v15;
      uint64_t v146 = 0;
      uint64_t v147 = &v146;
      uint64_t v148 = 0x2000000000;
      uint64_t v149 = 0;
      *(void *)&long long v143 = 0;
      *((void *)&v143 + 1) = &v143;
      uint64_t v144 = 0x2000000000;
      uint64_t v145 = v137;
      *(void *)uint64_t applier = MEMORY[0x1E4F143A8];
      *(void *)&applier[8] = 0x40000000;
      *(void *)&applier[16] = __nw_dispatch_data_copyout_from_offset_block_invoke;
      *(void *)&unsigned char applier[24] = &unk_1E5242B88;
      *(void *)&applier[32] = &v143;
      *(void *)&applier[40] = &v146;
      *(void *)&applier[48] = size[0];
      uint64_t v142 = v15;
      dispatch_data_apply(v6, applier);
      uint64_t v26 = v147[3];
      _Block_object_dispose(&v143, 8);
      _Block_object_dispose(&v146, 8);
      uint64_t v140 = v26;
LABEL_31:
      buffer = 0;
      v138.msg_iov = (iovec *)&size[1];
      v138.msg_iovlen = 1;
      if (a2) {
        goto LABEL_15;
      }
      goto LABEL_32;
    }
LABEL_29:
    if (gLogDatapath)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      uint64_t v134 = gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v135 = *(void *)(a1 + 40);
        if (v135) {
          uint64_t v136 = (const char *)(v135 + 308);
        }
        else {
          uint64_t v136 = "";
        }
        *(_DWORD *)uint64_t applier = 136446466;
        *(void *)&void applier[4] = "nw_socket_service_writes_block_invoke";
        *(_WORD *)&applier[12] = 2082;
        *(void *)&applier[14] = v136;
        _os_log_impl(&dword_1830D4000, v134, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s Dispatch data too fragmented, making a copy", applier, 0x16u);
      }
    }
    goto LABEL_30;
  }
  os_log_type_t v129 = __nwlog_obj();
  os_log_type_enabled(v129, OS_LOG_TYPE_ERROR);
  *(_DWORD *)uint64_t applier = 136446466;
  *(void *)&void applier[4] = "strict_malloc";
  *(_WORD *)&applier[12] = 2048;
  *(void *)&applier[14] = v24;
  id v130 = (void *)_os_log_send_and_compose_impl();
  BOOL result = __nwlog_abort((uint64_t)v130);
  if (!result)
  {
    free(v130);
    uint64_t v25 = *(void *)(a1 + 40);
    if (!v25) {
      goto LABEL_29;
    }
    goto LABEL_28;
  }
LABEL_256:
  __break(1u);
  return result;
}

uint64_t nw_frame_uses_external_data(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (a1) {
    return (*(unsigned __int16 *)(a1 + 204) >> 1) & 1;
  }
  __nwlog_obj();
  *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
  uint64_t v11 = "__nw_frame_uses_external_data";
  uint64_t v2 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v8 = 0;
  if (__nwlog_fault(v2, &type, &v8))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      if (os_log_type_enabled(v3, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        uint64_t v11 = "__nw_frame_uses_external_data";
        int v5 = "%{public}s called with null frame";
LABEL_17:
        _os_log_impl(&dword_1830D4000, v3, v4, v5, buf, 0xCu);
      }
    }
    else if (v8)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      BOOL v7 = os_log_type_enabled(v3, type);
      if (backtrace_string)
      {
        if (v7)
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
          uint64_t v11 = "__nw_frame_uses_external_data";
          __int16 v12 = 2082;
          BOOL v13 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v3, v4, "%{public}s called with null frame, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_18;
      }
      if (v7)
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        uint64_t v11 = "__nw_frame_uses_external_data";
        int v5 = "%{public}s called with null frame, no backtrace";
        goto LABEL_17;
      }
    }
    else
    {
      uint64_t v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      if (os_log_type_enabled(v3, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        uint64_t v11 = "__nw_frame_uses_external_data";
        int v5 = "%{public}s called with null frame, backtrace limit exceeded";
        goto LABEL_17;
      }
    }
  }
LABEL_18:
  if (v2) {
    free(v2);
  }
  return 0;
}

uint64_t nw_frame_get_external_data(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
    uint64_t v15 = "__nw_frame_get_external_data";
    int v6 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v12 = 0;
    if (!__nwlog_fault(v6, &type, &v12)) {
      goto LABEL_28;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_28;
      }
      *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
      uint64_t v15 = "__nw_frame_get_external_data";
      uint64_t v9 = "%{public}s called with null frame";
    }
    else if (v12)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
          uint64_t v15 = "__nw_frame_get_external_data";
          __int16 v16 = 2082;
          char v17 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null frame, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_28;
      }
      if (!v11)
      {
LABEL_28:
        if (v6) {
          free(v6);
        }
        return 0;
      }
      *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
      uint64_t v15 = "__nw_frame_get_external_data";
      uint64_t v9 = "%{public}s called with null frame, no backtrace";
    }
    else
    {
      BOOL v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_28;
      }
      *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
      uint64_t v15 = "__nw_frame_get_external_data";
      uint64_t v9 = "%{public}s called with null frame, backtrace limit exceeded";
    }
    _os_log_impl(&dword_1830D4000, v7, v8, v9, buf, 0xCu);
    goto LABEL_28;
  }
  if ((*(_WORD *)(a1 + 204) & 2) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v3 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
      uint64_t v15 = "__nw_frame_get_external_data";
      _os_log_impl(&dword_1830D4000, v3, OS_LOG_TYPE_ERROR, "%{public}s Frame does not use external data", buf, 0xCu);
    }
    return 0;
  }
  if (a2) {
    *a2 = *(_DWORD *)(a1 + 56);
  }
  if (a3)
  {
    int v5 = *(_DWORD *)(a1 + 52);
    if (v5) {
      v5 -= *(_DWORD *)(a1 + 56) + *(_DWORD *)(a1 + 60);
    }
    *a3 = v5;
  }
  return *(void *)(a1 + 96);
}

uint64_t nw_dispatch_data_to_iovec(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)uint64_t applier = 136446210;
    *(void *)&void applier[4] = "nw_dispatch_data_to_iovec";
    char v27 = (const char *)_os_log_send_and_compose_impl();
    LOBYTE(buf[0]) = 16;
    type[0] = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v27, buf, type)) {
      goto LABEL_94;
    }
    if (LOBYTE(buf[0]) == 17)
    {
      unint64_t v28 = __nwlog_obj();
      os_log_type_t v29 = buf[0];
      if (!os_log_type_enabled(v28, buf[0])) {
        goto LABEL_94;
      }
      *(_DWORD *)uint64_t applier = 136446210;
      *(void *)&void applier[4] = "nw_dispatch_data_to_iovec";
      __int16 v30 = "%{public}s called with null data";
    }
    else if (type[0])
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      unint64_t v28 = __nwlog_obj();
      os_log_type_t v29 = buf[0];
      BOOL v32 = os_log_type_enabled(v28, buf[0]);
      if (backtrace_string)
      {
        if (v32)
        {
          *(_DWORD *)uint64_t applier = 136446466;
          *(void *)&void applier[4] = "nw_dispatch_data_to_iovec";
          *(_WORD *)&applier[12] = 2082;
          *(void *)&applier[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v28, v29, "%{public}s called with null data, dumping backtrace:%{public}s", applier, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_94;
      }
      if (!v32) {
        goto LABEL_94;
      }
      *(_DWORD *)uint64_t applier = 136446210;
      *(void *)&void applier[4] = "nw_dispatch_data_to_iovec";
      __int16 v30 = "%{public}s called with null data, no backtrace";
    }
    else
    {
      unint64_t v28 = __nwlog_obj();
      os_log_type_t v29 = buf[0];
      if (!os_log_type_enabled(v28, buf[0])) {
        goto LABEL_94;
      }
      *(_DWORD *)uint64_t applier = 136446210;
      *(void *)&void applier[4] = "nw_dispatch_data_to_iovec";
      __int16 v30 = "%{public}s called with null data, backtrace limit exceeded";
    }
    goto LABEL_92;
  }
  if (!a3)
  {
    __nwlog_obj();
    *(_DWORD *)uint64_t applier = 136446210;
    *(void *)&void applier[4] = "nw_dispatch_data_to_iovec";
    char v27 = (const char *)_os_log_send_and_compose_impl();
    LOBYTE(buf[0]) = 16;
    type[0] = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v27, buf, type)) {
      goto LABEL_94;
    }
    if (LOBYTE(buf[0]) != 17)
    {
      if (type[0] == OS_LOG_TYPE_DEFAULT)
      {
        unint64_t v28 = __nwlog_obj();
        os_log_type_t v29 = buf[0];
        if (!os_log_type_enabled(v28, buf[0])) {
          goto LABEL_94;
        }
        *(_DWORD *)uint64_t applier = 136446210;
        *(void *)&void applier[4] = "nw_dispatch_data_to_iovec";
        __int16 v30 = "%{public}s called with null len, backtrace limit exceeded";
        goto LABEL_92;
      }
      int v33 = (char *)__nw_create_backtrace_string();
      unint64_t v28 = __nwlog_obj();
      os_log_type_t v29 = buf[0];
      BOOL v34 = os_log_type_enabled(v28, buf[0]);
      if (!v33)
      {
        if (!v34) {
          goto LABEL_94;
        }
        *(_DWORD *)uint64_t applier = 136446210;
        *(void *)&void applier[4] = "nw_dispatch_data_to_iovec";
        __int16 v30 = "%{public}s called with null len, no backtrace";
        goto LABEL_92;
      }
      if (!v34) {
        goto LABEL_72;
      }
      *(_DWORD *)uint64_t applier = 136446466;
      *(void *)&void applier[4] = "nw_dispatch_data_to_iovec";
      *(_WORD *)&applier[12] = 2082;
      *(void *)&applier[14] = v33;
      ssize_t v35 = "%{public}s called with null len, dumping backtrace:%{public}s";
      goto LABEL_66;
    }
    unint64_t v28 = __nwlog_obj();
    os_log_type_t v29 = buf[0];
    if (!os_log_type_enabled(v28, buf[0])) {
      goto LABEL_94;
    }
    *(_DWORD *)uint64_t applier = 136446210;
    *(void *)&void applier[4] = "nw_dispatch_data_to_iovec";
    __int16 v30 = "%{public}s called with null len";
LABEL_92:
    uint64_t v40 = applier;
LABEL_93:
    _os_log_impl(&dword_1830D4000, v28, v29, v30, v40, 0xCu);
    goto LABEL_94;
  }
  if (!a4)
  {
    __nwlog_obj();
    *(_DWORD *)uint64_t applier = 136446210;
    *(void *)&void applier[4] = "nw_dispatch_data_to_iovec";
    char v27 = (const char *)_os_log_send_and_compose_impl();
    LOBYTE(buf[0]) = 16;
    type[0] = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v27, buf, type)) {
      goto LABEL_94;
    }
    if (LOBYTE(buf[0]) != 17)
    {
      if (type[0] == OS_LOG_TYPE_DEFAULT)
      {
        unint64_t v28 = __nwlog_obj();
        os_log_type_t v29 = buf[0];
        if (!os_log_type_enabled(v28, buf[0])) {
          goto LABEL_94;
        }
        *(_DWORD *)uint64_t applier = 136446210;
        *(void *)&void applier[4] = "nw_dispatch_data_to_iovec";
        __int16 v30 = "%{public}s called with null iovs, backtrace limit exceeded";
        goto LABEL_92;
      }
      int v33 = (char *)__nw_create_backtrace_string();
      unint64_t v28 = __nwlog_obj();
      os_log_type_t v29 = buf[0];
      BOOL v36 = os_log_type_enabled(v28, buf[0]);
      if (!v33)
      {
        if (!v36) {
          goto LABEL_94;
        }
        *(_DWORD *)uint64_t applier = 136446210;
        *(void *)&void applier[4] = "nw_dispatch_data_to_iovec";
        __int16 v30 = "%{public}s called with null iovs, no backtrace";
        goto LABEL_92;
      }
      if (!v36) {
        goto LABEL_72;
      }
      *(_DWORD *)uint64_t applier = 136446466;
      *(void *)&void applier[4] = "nw_dispatch_data_to_iovec";
      *(_WORD *)&applier[12] = 2082;
      *(void *)&applier[14] = v33;
      ssize_t v35 = "%{public}s called with null iovs, dumping backtrace:%{public}s";
      goto LABEL_66;
    }
    unint64_t v28 = __nwlog_obj();
    os_log_type_t v29 = buf[0];
    if (!os_log_type_enabled(v28, buf[0])) {
      goto LABEL_94;
    }
    *(_DWORD *)uint64_t applier = 136446210;
    *(void *)&void applier[4] = "nw_dispatch_data_to_iovec";
    __int16 v30 = "%{public}s called with null iovs";
    goto LABEL_92;
  }
  if (!a5)
  {
    __nwlog_obj();
    *(_DWORD *)uint64_t applier = 136446210;
    *(void *)&void applier[4] = "nw_dispatch_data_to_iovec";
    char v27 = (const char *)_os_log_send_and_compose_impl();
    LOBYTE(buf[0]) = 16;
    type[0] = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v27, buf, type)) {
      goto LABEL_94;
    }
    if (LOBYTE(buf[0]) == 17)
    {
      unint64_t v28 = __nwlog_obj();
      os_log_type_t v29 = buf[0];
      if (!os_log_type_enabled(v28, buf[0])) {
        goto LABEL_94;
      }
      *(_DWORD *)uint64_t applier = 136446210;
      *(void *)&void applier[4] = "nw_dispatch_data_to_iovec";
      __int16 v30 = "%{public}s called with null maxiov";
      goto LABEL_92;
    }
    if (type[0] == OS_LOG_TYPE_DEFAULT)
    {
      unint64_t v28 = __nwlog_obj();
      os_log_type_t v29 = buf[0];
      if (!os_log_type_enabled(v28, buf[0])) {
        goto LABEL_94;
      }
      *(_DWORD *)uint64_t applier = 136446210;
      *(void *)&void applier[4] = "nw_dispatch_data_to_iovec";
      __int16 v30 = "%{public}s called with null maxiov, backtrace limit exceeded";
      goto LABEL_92;
    }
    int v33 = (char *)__nw_create_backtrace_string();
    unint64_t v28 = __nwlog_obj();
    os_log_type_t v29 = buf[0];
    BOOL v37 = os_log_type_enabled(v28, buf[0]);
    if (!v33)
    {
      if (!v37) {
        goto LABEL_94;
      }
      *(_DWORD *)uint64_t applier = 136446210;
      *(void *)&void applier[4] = "nw_dispatch_data_to_iovec";
      __int16 v30 = "%{public}s called with null maxiov, no backtrace";
      goto LABEL_92;
    }
    if (!v37) {
      goto LABEL_72;
    }
    *(_DWORD *)uint64_t applier = 136446466;
    *(void *)&void applier[4] = "nw_dispatch_data_to_iovec";
    *(_WORD *)&applier[12] = 2082;
    *(void *)&applier[14] = v33;
    ssize_t v35 = "%{public}s called with null maxiov, dumping backtrace:%{public}s";
LABEL_66:
    int v38 = applier;
    goto LABEL_71;
  }
  char v41 = 0;
  if (a5 <= 0)
  {
    __nwlog_obj();
    LODWORD(buf[0]) = 136446210;
    *(void *)((char *)buf + 4) = "nw_dispatch_data_to_iovec_partial";
    char v27 = (const char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    char v46 = 0;
    if (!__nwlog_fault(v27, type, &v46)) {
      goto LABEL_94;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      unint64_t v28 = __nwlog_obj();
      os_log_type_t v29 = type[0];
      if (!os_log_type_enabled(v28, type[0])) {
        goto LABEL_94;
      }
      LODWORD(buf[0]) = 136446210;
      *(void *)((char *)buf + 4) = "nw_dispatch_data_to_iovec_partial";
      __int16 v30 = "%{public}s called with null (maxiov >= 1)";
      goto LABEL_98;
    }
    if (!v46)
    {
      unint64_t v28 = __nwlog_obj();
      os_log_type_t v29 = type[0];
      if (!os_log_type_enabled(v28, type[0])) {
        goto LABEL_94;
      }
      LODWORD(buf[0]) = 136446210;
      *(void *)((char *)buf + 4) = "nw_dispatch_data_to_iovec_partial";
      __int16 v30 = "%{public}s called with null (maxiov >= 1), backtrace limit exceeded";
      goto LABEL_98;
    }
    int v33 = (char *)__nw_create_backtrace_string();
    unint64_t v28 = __nwlog_obj();
    os_log_type_t v29 = type[0];
    BOOL v39 = os_log_type_enabled(v28, type[0]);
    if (v33)
    {
      if (!v39) {
        goto LABEL_72;
      }
      LODWORD(buf[0]) = 136446466;
      *(void *)((char *)buf + 4) = "nw_dispatch_data_to_iovec_partial";
      WORD2(buf[1]) = 2082;
      *(void *)((char *)&buf[1] + 6) = v33;
      ssize_t v35 = "%{public}s called with null (maxiov >= 1), dumping backtrace:%{public}s";
      int v38 = (uint8_t *)buf;
LABEL_71:
      _os_log_impl(&dword_1830D4000, v28, v29, v35, v38, 0x16u);
LABEL_72:
      free(v33);
      if (!v27) {
        return 0;
      }
LABEL_95:
      uint64_t v25 = (char *)v27;
      goto LABEL_26;
    }
    if (v39)
    {
      LODWORD(buf[0]) = 136446210;
      *(void *)((char *)buf + 4) = "nw_dispatch_data_to_iovec_partial";
      __int16 v30 = "%{public}s called with null (maxiov >= 1), no backtrace";
LABEL_98:
      uint64_t v40 = (uint8_t *)buf;
      goto LABEL_93;
    }
LABEL_94:
    if (!v27) {
      return 0;
    }
    goto LABEL_95;
  }
  uint64_t v10 = a3 + a2;
  if (a3 + a2 > dispatch_data_get_size(a1))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    size_t size = dispatch_data_get_size(a1);
    LODWORD(buf[0]) = 136446978;
    *(void *)((char *)buf + 4) = "nw_dispatch_data_to_iovec_partial";
    WORD2(buf[1]) = 2048;
    *(void *)((char *)&buf[1] + 6) = a2;
    HIWORD(buf[2]) = 2048;
    uint64_t v56 = a3;
    __int16 v57 = 2048;
    size_t v58 = size;
    char v12 = (const char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    char v46 = 0;
    if (__nwlog_fault(v12, type, &v46))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v13 = gLogObj;
        os_log_type_t v14 = type[0];
        if (os_log_type_enabled((os_log_t)gLogObj, type[0]))
        {
          size_t v15 = dispatch_data_get_size(a1);
          LODWORD(buf[0]) = 136446978;
          *(void *)((char *)buf + 4) = "nw_dispatch_data_to_iovec_partial";
          WORD2(buf[1]) = 2048;
          *(void *)((char *)&buf[1] + 6) = a2;
          HIWORD(buf[2]) = 2048;
          uint64_t v56 = a3;
          __int16 v57 = 2048;
          size_t v58 = v15;
          __int16 v16 = "%{public}s Invalid offset and length (%zu + %zu > %zu)";
LABEL_23:
          _os_log_impl(&dword_1830D4000, v13, v14, v16, (uint8_t *)buf, 0x2Au);
        }
      }
      else if (v46)
      {
        int v20 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v13 = gLogObj;
        os_log_type_t v14 = type[0];
        BOOL v21 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
        if (v20)
        {
          if (v21)
          {
            size_t v22 = dispatch_data_get_size(a1);
            LODWORD(buf[0]) = 136447234;
            *(void *)((char *)buf + 4) = "nw_dispatch_data_to_iovec_partial";
            WORD2(buf[1]) = 2048;
            *(void *)((char *)&buf[1] + 6) = a2;
            HIWORD(buf[2]) = 2048;
            uint64_t v56 = a3;
            __int16 v57 = 2048;
            size_t v58 = v22;
            __int16 v59 = 2082;
            int v60 = v20;
            _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s Invalid offset and length (%zu + %zu > %zu), dumping backtrace:%{public}s", (uint8_t *)buf, 0x34u);
          }
          free(v20);
          goto LABEL_24;
        }
        if (v21)
        {
          size_t v24 = dispatch_data_get_size(a1);
          LODWORD(buf[0]) = 136446978;
          *(void *)((char *)buf + 4) = "nw_dispatch_data_to_iovec_partial";
          WORD2(buf[1]) = 2048;
          *(void *)((char *)&buf[1] + 6) = a2;
          HIWORD(buf[2]) = 2048;
          uint64_t v56 = a3;
          __int16 v57 = 2048;
          size_t v58 = v24;
          __int16 v16 = "%{public}s Invalid offset and length (%zu + %zu > %zu), no backtrace";
          goto LABEL_23;
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v13 = gLogObj;
        os_log_type_t v14 = type[0];
        if (os_log_type_enabled((os_log_t)gLogObj, type[0]))
        {
          size_t v23 = dispatch_data_get_size(a1);
          LODWORD(buf[0]) = 136446978;
          *(void *)((char *)buf + 4) = "nw_dispatch_data_to_iovec_partial";
          WORD2(buf[1]) = 2048;
          *(void *)((char *)&buf[1] + 6) = a2;
          HIWORD(buf[2]) = 2048;
          uint64_t v56 = a3;
          __int16 v57 = 2048;
          size_t v58 = v23;
          __int16 v16 = "%{public}s Invalid offset and length (%zu + %zu > %zu), backtrace limit exceeded";
          goto LABEL_23;
        }
      }
    }
LABEL_24:
    if (!v12) {
      return 0;
    }
    uint64_t v25 = (char *)v12;
LABEL_26:
    free(v25);
    return 0;
  }
  char v41 = 0;
  buf[0] = 0;
  LODWORD(v56) = 0;
  buf[1] = buf;
  buf[2] = 0x2000000000;
  *(void *)os_log_type_t type = 0;
  BOOL v43 = type;
  uint64_t v44 = 0x2000000000;
  uint64_t v45 = a2;
  *(void *)uint64_t applier = MEMORY[0x1E4F143A8];
  *(void *)&applier[8] = 0x40000000;
  *(void *)&applier[16] = ___ZL33nw_dispatch_data_to_iovec_partialP15dispatch_data_smmP5ioveciPb_block_invoke;
  os_log_type_t v48 = &unk_1E5242C20;
  uint64_t v49 = type;
  uint64_t v50 = buf;
  int v54 = a5;
  uint64_t v51 = v10;
  uint64_t v52 = &v41;
  uint64_t v53 = a4;
  dispatch_data_apply(a1, applier);
  uint64_t v17 = *(unsigned int *)(buf[1] + 24);
  _Block_object_dispose(type, 8);
  _Block_object_dispose(buf, 8);
  if (v41)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v18 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
    {
      size_t v19 = dispatch_data_get_size(a1);
      *(_DWORD *)uint64_t applier = 136446722;
      *(void *)&void applier[4] = "nw_dispatch_data_to_iovec";
      *(_WORD *)&applier[12] = 2048;
      *(void *)&applier[14] = v19;
      *(_WORD *)&applier[22] = 1024;
      LODWORD(v48) = a5;
      _os_log_impl(&dword_1830D4000, v18, OS_LOG_TYPE_INFO, "%{public}s data (%zu bytes) couldn't get mapped to %d iovecs due to fragmentation", applier, 0x1Cu);
    }
    return 0;
  }
  return v17;
}

uint64_t ___ZL33nw_dispatch_data_to_iovec_partialP15dispatch_data_smmP5ioveciPb_block_invoke(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  unint64_t v5 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  if (a5 + a3 <= v5) {
    return 1;
  }
  unint64_t v7 = *(void *)(a1 + 48);
  if (v7 <= a3) {
    return 0;
  }
  uint64_t v8 = *(int *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
  if (v8 != *(_DWORD *)(a1 + 72))
  {
    BOOL v13 = v5 >= a3;
    unint64_t v14 = v5 - a3;
    if (!v13) {
      unint64_t v14 = 0;
    }
    *(void *)(*(void *)(a1 + 64) + 16 * v8) = a4 + v14;
    unint64_t v15 = v7 - *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    unint64_t v16 = a5 - v14;
    if (v15 >= v16) {
      unint64_t v15 = v16;
    }
    uint64_t v17 = *(void *)(a1 + 64);
    *(void *)(v17 + 16 * *(int *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) + 8) = v15;
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) += *(void *)(v17
                                                                             + 16
                                                                             * (int)(*(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8)
                                                                                               + 24))++
                                                                             + 8);
    unint64_t v18 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    unint64_t v19 = *(void *)(a1 + 48);
    if (v18 <= v19) {
      return v18 < v19;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v20 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    uint64_t v21 = *(void *)(a1 + 48);
    *(_DWORD *)netcore_stats_tcp_report buf = 136446722;
    BOOL v39 = "nw_dispatch_data_to_iovec_partial_block_invoke";
    __int16 v40 = 2048;
    uint64_t v41 = v20;
    __int16 v42 = 2048;
    uint64_t v43 = v21;
    size_t v22 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v36 = 0;
    if (__nwlog_fault(v22, &type, &v36))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        size_t v23 = gLogObj;
        os_log_type_t v24 = type;
        if (os_log_type_enabled((os_log_t)gLogObj, type))
        {
          uint64_t v25 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
          uint64_t v26 = *(void *)(a1 + 48);
          *(_DWORD *)netcore_stats_tcp_report buf = 136446722;
          BOOL v39 = "nw_dispatch_data_to_iovec_partial_block_invoke";
          __int16 v40 = 2048;
          uint64_t v41 = v25;
          __int16 v42 = 2048;
          uint64_t v43 = v26;
          char v27 = "%{public}s Cursor hit invalid value (%zu > %zu)";
LABEL_28:
          _os_log_impl(&dword_1830D4000, v23, v24, v27, buf, 0x20u);
        }
      }
      else if (v36)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        size_t v23 = __nwlog_obj();
        os_log_type_t v24 = type;
        BOOL v29 = os_log_type_enabled(v23, type);
        if (backtrace_string)
        {
          if (v29)
          {
            uint64_t v30 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
            uint64_t v31 = *(void *)(a1 + 48);
            *(_DWORD *)netcore_stats_tcp_report buf = 136446978;
            BOOL v39 = "nw_dispatch_data_to_iovec_partial_block_invoke";
            __int16 v40 = 2048;
            uint64_t v41 = v30;
            __int16 v42 = 2048;
            uint64_t v43 = v31;
            __int16 v44 = 2082;
            uint64_t v45 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v23, v24, "%{public}s Cursor hit invalid value (%zu > %zu), dumping backtrace:%{public}s", buf, 0x2Au);
          }
          free(backtrace_string);
          goto LABEL_29;
        }
        if (v29)
        {
          uint64_t v34 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
          uint64_t v35 = *(void *)(a1 + 48);
          *(_DWORD *)netcore_stats_tcp_report buf = 136446722;
          BOOL v39 = "nw_dispatch_data_to_iovec_partial_block_invoke";
          __int16 v40 = 2048;
          uint64_t v41 = v34;
          __int16 v42 = 2048;
          uint64_t v43 = v35;
          char v27 = "%{public}s Cursor hit invalid value (%zu > %zu), no backtrace";
          goto LABEL_28;
        }
      }
      else
      {
        size_t v23 = __nwlog_obj();
        os_log_type_t v24 = type;
        if (os_log_type_enabled(v23, type))
        {
          uint64_t v32 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
          uint64_t v33 = *(void *)(a1 + 48);
          *(_DWORD *)netcore_stats_tcp_report buf = 136446722;
          BOOL v39 = "nw_dispatch_data_to_iovec_partial_block_invoke";
          __int16 v40 = 2048;
          uint64_t v41 = v32;
          __int16 v42 = 2048;
          uint64_t v43 = v33;
          char v27 = "%{public}s Cursor hit invalid value (%zu > %zu), backtrace limit exceeded";
          goto LABEL_28;
        }
      }
    }
LABEL_29:
    if (v22) {
      free(v22);
    }
    unint64_t v18 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    unint64_t v19 = *(void *)(a1 + 48);
    return v18 < v19;
  }
  uint64_t v9 = *(unsigned char **)(a1 + 56);
  if (v9) {
    unsigned char *v9 = 1;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  uint64_t v10 = gLogObj;
  uint64_t result = os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG);
  if (result)
  {
    int v12 = *(_DWORD *)(a1 + 72);
    *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
    BOOL v39 = "nw_dispatch_data_to_iovec_partial_block_invoke";
    __int16 v40 = 1024;
    LODWORD(v41) = v12;
    _os_log_impl(&dword_1830D4000, v10, OS_LOG_TYPE_DEBUG, "%{public}s Data had too many fragments for iovec (max %d)", buf, 0x12u);
    return 0;
  }
  return result;
}

uint64_t nw_path_is_local(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = (v1[473] >> 4) & 1;
    goto LABEL_3;
  }
  unint64_t v5 = __nwlog_obj();
  *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
  unint64_t v16 = "nw_path_is_local";
  int v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      unint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        unint64_t v16 = "nw_path_is_local";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null path", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      unint64_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
          unint64_t v16 = "nw_path_is_local";
          __int16 v17 = 2082;
          unint64_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        unint64_t v16 = "nw_path_is_local";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      unint64_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        unint64_t v16 = "nw_path_is_local";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

double __nw_protocol_udp_identifier_block_invoke()
{
  unk_1EB2670DC = 0;
  unk_1EB2670D4 = 0;
  dword_1EB2670EC = 0;
  unk_1EB2670E4 = 0;
  nw_protocol_udp_identifier::identifier = 7365749;
  *(void *)&double result = 0x100000003;
  qword_1EB2670F0 = 0x100000003;
  return result;
}

NWConcrete_nw_write_request *nw_write_request_create_idempotent(void *a1, void *a2, void *a3, int a4)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  id v7 = a1;
  id v8 = a2;
  BOOL v47 = v8;
  id v48 = a3;
  if (!v8)
  {
    char v36 = __nwlog_obj();
    *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
    uint64_t v52 = "nw_write_request_create_idempotent";
    uint64_t v33 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v49 = 0;
    if (!__nwlog_fault(v33, &type, &v49)) {
      goto LABEL_101;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v34 = __nwlog_obj();
      os_log_type_t v37 = type;
      if (os_log_type_enabled(v34, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        uint64_t v52 = "nw_write_request_create_idempotent";
        _os_log_impl(&dword_1830D4000, v34, v37, "%{public}s called with null context", buf, 0xCu);
      }
      goto LABEL_100;
    }
    if (!v49)
    {
      uint64_t v34 = __nwlog_obj();
      os_log_type_t v44 = type;
      if (os_log_type_enabled(v34, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        uint64_t v52 = "nw_write_request_create_idempotent";
        _os_log_impl(&dword_1830D4000, v34, v44, "%{public}s called with null context, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_100;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v34 = __nwlog_obj();
    os_log_type_t v41 = type;
    BOOL v42 = os_log_type_enabled(v34, type);
    if (!backtrace_string)
    {
      if (v42)
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        uint64_t v52 = "nw_write_request_create_idempotent";
        _os_log_impl(&dword_1830D4000, v34, v41, "%{public}s called with null context, no backtrace", buf, 0xCu);
      }
      goto LABEL_100;
    }
    if (v42)
    {
      *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
      uint64_t v52 = "nw_write_request_create_idempotent";
      __int16 v53 = 2082;
      int v54 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v34, v41, "%{public}s called with null context, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_82;
  }
  if (!v7
    && (a4 & 1) == 0
    && (v8 == &__block_literal_global_6_42258
     || v8 == &__block_literal_global_42249
     || v8 == &__block_literal_global_8_42267
     || v8 == &__block_literal_global_10_42276))
  {
    uint64_t v32 = __nwlog_obj();
    *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
    uint64_t v52 = "nw_write_request_create_idempotent";
    uint64_t v33 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v49 = 0;
    if (!__nwlog_fault(v33, &type, &v49)) {
      goto LABEL_101;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v34 = __nwlog_obj();
      os_log_type_t v35 = type;
      if (os_log_type_enabled(v34, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        uint64_t v52 = "nw_write_request_create_idempotent";
        _os_log_impl(&dword_1830D4000, v34, v35, "%{public}s Send content may only be nil if the request is marked as complete", buf, 0xCu);
      }
LABEL_100:

LABEL_101:
      if (v33) {
        free(v33);
      }
      goto LABEL_17;
    }
    if (!v49)
    {
      uint64_t v34 = __nwlog_obj();
      os_log_type_t v43 = type;
      if (os_log_type_enabled(v34, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        uint64_t v52 = "nw_write_request_create_idempotent";
        _os_log_impl(&dword_1830D4000, v34, v43, "%{public}s Send content may only be nil if the request is marked as complete, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_100;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v34 = __nwlog_obj();
    os_log_type_t v39 = type;
    BOOL v40 = os_log_type_enabled(v34, type);
    if (!backtrace_string)
    {
      if (v40)
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        uint64_t v52 = "nw_write_request_create_idempotent";
        _os_log_impl(&dword_1830D4000, v34, v39, "%{public}s Send content may only be nil if the request is marked as complete, no backtrace", buf, 0xCu);
      }
      goto LABEL_100;
    }
    if (v40)
    {
      *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
      uint64_t v52 = "nw_write_request_create_idempotent";
      __int16 v53 = 2082;
      int v54 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v34, v39, "%{public}s Send content may only be nil if the request is marked as complete, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_82:

    free(backtrace_string);
    goto LABEL_101;
  }
  id v46 = v7;
  if (!v48) {
    goto LABEL_19;
  }
  uint64_t v9 = (os_unfair_lock_s *)v48;
  if (v9 == (os_unfair_lock_s *)&__block_literal_global_10_42276)
  {

    goto LABEL_19;
  }
  os_log_type_t v10 = v9;
  if (v9 == (os_unfair_lock_s *)&__block_literal_global_8_42267
    || v9 == (os_unfair_lock_s *)&__block_literal_global_6_42258
    || v9 == (os_unfair_lock_s *)&__block_literal_global_42249)
  {

    goto LABEL_14;
  }
  os_unfair_lock_lock(v9 + 28);
  char v11 = BYTE2(v10[29]._os_unfair_lock_opaque);
  os_unfair_lock_unlock(v10 + 28);

  if ((v11 & 0x40) != 0)
  {
LABEL_19:
    unint64_t v14 = objc_alloc_init(NWConcrete_nw_write_request);
    char v13 = v14;
    id v7 = v46;
    if (v14)
    {
      if (v46) {
        unint64_t v15 = v46;
      }
      else {
        unint64_t v15 = (void *)MEMORY[0x1E4F14410];
      }
      p_data = (dispatch_data_t *)&v14->data;
      objc_storeStrong((id *)&v14->data, v15);
      objc_storeStrong((id *)&v13->context, a2);
      objc_storeStrong((id *)&v13->original_message, a3);
      *((unsigned char *)v13 + 128) = *((unsigned char *)v13 + 128) & 0xFE | a4 | 4;
      __int16 v17 = v47;
      unint64_t v18 = v17;
      double v19 = 0.5;
      if (v17 != (double *)&__block_literal_global_10_42276
        && v17 != (double *)&__block_literal_global_8_42267
        && v17 != (double *)&__block_literal_global_6_42258
        && v17 != (double *)&__block_literal_global_42249
        && (*((unsigned char *)v17 + 118) & 1) == 0)
      {
        double v19 = v17[10];
      }

      char v20 = 0;
      v13->relative_unsigned int priority = v19;
      if (!v46 && a4)
      {
        uint64_t v21 = v18;
        char v20 = 0;
        if (v18 != (double *)&__block_literal_global_42249 && v18 != (double *)&__block_literal_global_10_42276)
        {
          char v20 = 8;
          if (v18 != (double *)&__block_literal_global_6_42258 && v18 != (double *)&__block_literal_global_8_42267) {
            char v20 = 8 * (*((unsigned char *)v21 + 118) & 1);
          }
        }
      }
      *((unsigned char *)v13 + 128) = *((unsigned char *)v13 + 128) & 0xF7 | v20;
      if (_nw_signposts_once != -1) {
        dispatch_once(&_nw_signposts_once, &__block_literal_global_33173);
      }
      if (_nw_signposts_enabled && kdebug_is_enabled())
      {
        if (*p_data) {
          dispatch_data_get_size(*p_data);
        }
        context = v13->context;
        if (context) {
          nw_content_context_get_is_final(context);
        }
        kdebug_trace();
      }
      size_t v22 = v13;
      goto LABEL_61;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v23 = (id)gLogObj;
    *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
    uint64_t v52 = "nw_write_request_create_idempotent";
    os_log_type_t v24 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v49 = 0;
    if (__nwlog_fault(v24, &type, &v49))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v25 = (id)gLogObj;
        os_log_type_t v26 = type;
        if (os_log_type_enabled(v25, type))
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          uint64_t v52 = "nw_write_request_create_idempotent";
          _os_log_impl(&dword_1830D4000, v25, v26, "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_write_request) alloc] init] failed", buf, 0xCu);
        }
      }
      else if (v49)
      {
        char v27 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v25 = (id)gLogObj;
        os_log_type_t v28 = type;
        BOOL v29 = os_log_type_enabled(v25, type);
        if (v27)
        {
          if (v29)
          {
            *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
            uint64_t v52 = "nw_write_request_create_idempotent";
            __int16 v53 = 2082;
            int v54 = v27;
            _os_log_impl(&dword_1830D4000, v25, v28, "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_write_request) alloc] init] failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v27);
          if (!v24) {
            goto LABEL_61;
          }
          goto LABEL_60;
        }
        if (v29)
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          uint64_t v52 = "nw_write_request_create_idempotent";
          _os_log_impl(&dword_1830D4000, v25, v28, "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_write_request) alloc] init] failed, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v25 = (id)gLogObj;
        os_log_type_t v30 = type;
        if (os_log_type_enabled(v25, type))
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          uint64_t v52 = "nw_write_request_create_idempotent";
          _os_log_impl(&dword_1830D4000, v25, v30, "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_write_request) alloc] init] failed, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
    if (!v24)
    {
LABEL_61:

      goto LABEL_62;
    }
LABEL_60:
    free(v24);
    goto LABEL_61;
  }
LABEL_14:
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_t v12 = (id)gLogObj;
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
    uint64_t v52 = "nw_write_request_create_idempotent";
    _os_log_impl(&dword_1830D4000, v12, OS_LOG_TYPE_ERROR, "%{public}s Cannot send a reply for a protocol that does not support replies", buf, 0xCu);
  }

  id v7 = v46;
LABEL_17:
  char v13 = 0;
LABEL_62:

  return v13;
}

void sub_18325C854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, void *a17)
{
  _Unwind_Resume(a1);
}

NWConcrete_nw_write_request *nw_write_request_create(void *a1, void *a2, void *a3, int a4, void *a5, void *a6)
{
  uint64_t v75 = *MEMORY[0x1E4F143B8];
  id v11 = a1;
  id v12 = a2;
  id v13 = a3;
  uint64_t v65 = a5;
  id aBlock = a6;
  uint64_t v64 = v13;
  if (!aBlock)
  {
    __int16 v17 = v11;
    os_log_type_t v44 = __nwlog_obj();
    *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
    int v72 = "nw_write_request_create";
    uint64_t v45 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v69 = 0;
    if (!__nwlog_fault(v45, &type, &v69)) {
      goto LABEL_123;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v46 = __nwlog_obj();
      os_log_type_t v47 = type;
      if (os_log_type_enabled(v46, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        int v72 = "nw_write_request_create";
        _os_log_impl(&dword_1830D4000, v46, v47, "%{public}s called with null completion", buf, 0xCu);
      }
      goto LABEL_122;
    }
    if (!v69)
    {
      id v46 = __nwlog_obj();
      os_log_type_t v61 = type;
      if (os_log_type_enabled(v46, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        int v72 = "nw_write_request_create";
        _os_log_impl(&dword_1830D4000, v46, v61, "%{public}s called with null completion, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_122;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    id v46 = __nwlog_obj();
    os_log_type_t v54 = type;
    BOOL v55 = os_log_type_enabled(v46, type);
    if (!backtrace_string)
    {
      if (v55)
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        int v72 = "nw_write_request_create";
        _os_log_impl(&dword_1830D4000, v46, v54, "%{public}s called with null completion, no backtrace", buf, 0xCu);
      }
      goto LABEL_122;
    }
    if (v55)
    {
      *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
      int v72 = "nw_write_request_create";
      __int16 v73 = 2082;
      int v74 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v46, v54, "%{public}s called with null completion, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_93;
  }
  if (!v12)
  {
    __int16 v17 = v11;
    id v48 = __nwlog_obj();
    *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
    int v72 = "nw_write_request_create";
    uint64_t v45 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v69 = 0;
    if (!__nwlog_fault(v45, &type, &v69)) {
      goto LABEL_123;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v46 = __nwlog_obj();
      os_log_type_t v49 = type;
      if (os_log_type_enabled(v46, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        int v72 = "nw_write_request_create";
        _os_log_impl(&dword_1830D4000, v46, v49, "%{public}s called with null context", buf, 0xCu);
      }
LABEL_122:

LABEL_123:
      if (v45) {
        free(v45);
      }
      goto LABEL_18;
    }
    if (!v69)
    {
      id v46 = __nwlog_obj();
      os_log_type_t v62 = type;
      if (os_log_type_enabled(v46, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        int v72 = "nw_write_request_create";
        _os_log_impl(&dword_1830D4000, v46, v62, "%{public}s called with null context, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_122;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    id v46 = __nwlog_obj();
    os_log_type_t v56 = type;
    BOOL v57 = os_log_type_enabled(v46, type);
    if (!backtrace_string)
    {
      if (v57)
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        int v72 = "nw_write_request_create";
        _os_log_impl(&dword_1830D4000, v46, v56, "%{public}s called with null context, no backtrace", buf, 0xCu);
      }
      goto LABEL_122;
    }
    if (v57)
    {
      *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
      int v72 = "nw_write_request_create";
      __int16 v73 = 2082;
      int v74 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v46, v56, "%{public}s called with null context, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_93:

    free(backtrace_string);
    goto LABEL_123;
  }
  if (!v11
    && (a4 & 1) == 0
    && (v12 == &__block_literal_global_6_42258
     || v12 == &__block_literal_global_42249
     || v12 == &__block_literal_global_8_42267
     || v12 == &__block_literal_global_10_42276))
  {
    __int16 v17 = 0;
    BOOL v40 = __nwlog_obj();
    *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
    int v72 = "nw_write_request_create";
    os_log_type_t v41 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v69 = 0;
    if (__nwlog_fault(v41, &type, &v69))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        BOOL v42 = __nwlog_obj();
        os_log_type_t v43 = type;
        if (os_log_type_enabled(v42, type))
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          int v72 = "nw_write_request_create";
          _os_log_impl(&dword_1830D4000, v42, v43, "%{public}s Send content may only be nil if the request is marked as complete", buf, 0xCu);
        }
      }
      else if (v69)
      {
        uint64_t v50 = (char *)__nw_create_backtrace_string();
        BOOL v42 = __nwlog_obj();
        os_log_type_t v51 = type;
        BOOL v52 = os_log_type_enabled(v42, type);
        if (v50)
        {
          if (v52)
          {
            *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
            int v72 = "nw_write_request_create";
            __int16 v73 = 2082;
            int v74 = v50;
            _os_log_impl(&dword_1830D4000, v42, v51, "%{public}s Send content may only be nil if the request is marked as complete, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v50);
          goto LABEL_103;
        }
        if (v52)
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          int v72 = "nw_write_request_create";
          _os_log_impl(&dword_1830D4000, v42, v51, "%{public}s Send content may only be nil if the request is marked as complete, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        BOOL v42 = __nwlog_obj();
        os_log_type_t v58 = type;
        if (os_log_type_enabled(v42, type))
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          int v72 = "nw_write_request_create";
          _os_log_impl(&dword_1830D4000, v42, v58, "%{public}s Send content may only be nil if the request is marked as complete, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_103:
    if (v41) {
      free(v41);
    }
    __int16 v59 = v65[25];
    if (v59)
    {
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3221225472;
      void block[2] = __nw_write_request_create_block_invoke;
      block[3] = &unk_1E524AFA8;
      id v68 = aBlock;
      dispatch_async(v59, block);
    }
    else
    {
      posix_error = nw_error_create_posix_error(22);
      (*((void (**)(id, _DWORD *))aBlock + 2))(aBlock, posix_error);
    }
    goto LABEL_18;
  }
  if (!v13) {
    goto LABEL_20;
  }
  unint64_t v14 = (os_unfair_lock_s *)v13;
  if (v14 == (os_unfair_lock_s *)&__block_literal_global_10_42276)
  {

    goto LABEL_20;
  }
  unint64_t v15 = v14;
  if (v14 == (os_unfair_lock_s *)&__block_literal_global_8_42267
    || v14 == (os_unfair_lock_s *)&__block_literal_global_6_42258
    || v14 == (os_unfair_lock_s *)&__block_literal_global_42249)
  {

    goto LABEL_15;
  }
  os_unfair_lock_lock(v14 + 28);
  char v16 = BYTE2(v15[29]._os_unfair_lock_opaque);
  os_unfair_lock_unlock(v15 + 28);

  if ((v16 & 0x40) != 0)
  {
LABEL_20:
    char v20 = objc_alloc_init(NWConcrete_nw_write_request);
    double v19 = v20;
    if (v20)
    {
      __int16 v17 = v11;
      if (v11) {
        uint64_t v21 = v11;
      }
      else {
        uint64_t v21 = (void *)MEMORY[0x1E4F14410];
      }
      p_data = (dispatch_data_t *)&v20->data;
      objc_storeStrong((id *)&v20->data, v21);
      objc_storeStrong((id *)&v19->context, a2);
      objc_storeStrong((id *)&v19->original_message, a3);
      *((unsigned char *)v19 + 128) = *((unsigned char *)v19 + 128) & 0xFE | a4;
      id v23 = _Block_copy(aBlock);
      id completion = v19->completion;
      v19->id completion = v23;

      objc_storeStrong((id *)&v19->connection, a5);
      v19->qos_class = qos_class_self();
      uint64_t v25 = (double *)v12;
      os_log_type_t v26 = v25;
      double v27 = 0.5;
      if (v25 != (double *)&__block_literal_global_10_42276
        && v25 != (double *)&__block_literal_global_8_42267
        && v25 != (double *)&__block_literal_global_6_42258
        && v25 != (double *)&__block_literal_global_42249
        && (*((unsigned char *)v25 + 118) & 1) == 0)
      {
        double v27 = v25[10];
      }

      char v28 = 0;
      v19->relative_unsigned int priority = v27;
      if (!v17 && a4)
      {
        BOOL v29 = v26;
        char v28 = 0;
        if (v26 != (double *)&__block_literal_global_42249 && v26 != (double *)&__block_literal_global_10_42276)
        {
          char v28 = 8;
          if (v26 != (double *)&__block_literal_global_6_42258 && v26 != (double *)&__block_literal_global_8_42267) {
            char v28 = 8 * (*((unsigned char *)v29 + 118) & 1);
          }
        }
      }
      *((unsigned char *)v19 + 128) = *((unsigned char *)v19 + 128) & 0xF7 | v28;
      if (_nw_signposts_once != -1) {
        dispatch_once(&_nw_signposts_once, &__block_literal_global_33173);
      }
      if (_nw_signposts_enabled && kdebug_is_enabled())
      {
        if (*p_data) {
          dispatch_data_get_size(*p_data);
        }
        context = v19->context;
        if (context) {
          nw_content_context_get_is_final(context);
        }
        kdebug_trace();
      }
      os_log_type_t v30 = v19;
      goto LABEL_62;
    }
    __int16 v17 = v11;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v31 = (id)gLogObj;
    *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
    int v72 = "nw_write_request_create";
    uint64_t v32 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v69 = 0;
    if (__nwlog_fault(v32, &type, &v69))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v33 = (id)gLogObj;
        os_log_type_t v34 = type;
        if (os_log_type_enabled(v33, type))
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          int v72 = "nw_write_request_create";
          _os_log_impl(&dword_1830D4000, v33, v34, "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_write_request) alloc] init] failed", buf, 0xCu);
        }
      }
      else if (v69)
      {
        os_log_type_t v35 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v33 = (id)gLogObj;
        os_log_type_t v36 = type;
        BOOL v37 = os_log_type_enabled(v33, type);
        if (v35)
        {
          if (v37)
          {
            *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
            int v72 = "nw_write_request_create";
            __int16 v73 = 2082;
            int v74 = v35;
            _os_log_impl(&dword_1830D4000, v33, v36, "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_write_request) alloc] init] failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v35);
          if (!v32) {
            goto LABEL_62;
          }
          goto LABEL_61;
        }
        if (v37)
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          int v72 = "nw_write_request_create";
          _os_log_impl(&dword_1830D4000, v33, v36, "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_write_request) alloc] init] failed, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v33 = (id)gLogObj;
        os_log_type_t v38 = type;
        if (os_log_type_enabled(v33, type))
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          int v72 = "nw_write_request_create";
          _os_log_impl(&dword_1830D4000, v33, v38, "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_write_request) alloc] init] failed, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
    if (!v32)
    {
LABEL_62:

      goto LABEL_63;
    }
LABEL_61:
    free(v32);
    goto LABEL_62;
  }
LABEL_15:
  __int16 v17 = v11;
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  unint64_t v18 = (id)gLogObj;
  if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
    int v72 = "nw_write_request_create";
    _os_log_impl(&dword_1830D4000, v18, OS_LOG_TYPE_ERROR, "%{public}s Cannot send a reply for a protocol that does not support replies", buf, 0xCu);
  }

LABEL_18:
  double v19 = 0;
LABEL_63:

  return v19;
}

void sub_18325D5D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void nw_path_evaluator_set_cancel_handler(os_unfair_lock_s *a1, void *a2)
{
  if (a1)
  {
    uint64_t v3 = a1 + 24;
    id v4 = a2;
    id v7 = a1;
    os_unfair_lock_lock(v3);
    unint64_t v5 = _Block_copy(v4);

    int v6 = *(void **)&v7[18]._os_unfair_lock_opaque;
    *(void *)&v7[18]._int os_unfair_lock_opaque = v5;

    os_unfair_lock_unlock(v3);
  }
}

uint64_t ___ZL43nw_resolver_create_prefer_connected_variantP22NWConcrete_nw_resolverPU24objcproto13OS_nw_context8NSObjectPU22objcproto11OS_nw_arrayS1__block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v8 = *(void *)(v6 + 40);
  id v7 = (id *)(v6 + 40);
  if (!v8)
  {
    objc_storeStrong(v7, a3);
    unsigned int connected_flow_count = nw_context_endpoint_get_connected_flow_count(*(void **)(a1 + 32), v5);
    uint64_t v10 = a1 + 48;
    goto LABEL_5;
  }
  unsigned int connected_flow_count = nw_context_endpoint_get_connected_flow_count(*(void **)(a1 + 32), v5);
  uint64_t v10 = a1 + 48;
  if (connected_flow_count > *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8) + 24))
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a3);
LABEL_5:
    *(_DWORD *)(*(void *)(*(void *)v10 + 8) + 24) = connected_flow_count;
  }

  return 1;
}

void sub_18325DA28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_context_endpoint_get_connected_flow_count(void *a1, void *a2)
{
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (v3)
  {
    if (v4)
    {
      if (((_BYTE)v3[17] & 8) == 0) {
        dispatch_assert_queue_V2(v3[1]);
      }
      BOOL v6 = nw_context_copy_cache_context(v3);

      id v7 = v5;
      int v8 = [v7 type];

      if (v8 == 2)
      {
        uint64_t v9 = (uint64_t *)(*(void *)(v6 + 24) + 40);
      }
      else if (v8 == 1)
      {
        uint64_t v9 = (uint64_t *)(*(void *)(v6 + 24) + 32);
      }
      else
      {
        uint64_t v9 = (uint64_t *)(*(void *)(v6 + 24) + 48);
      }
      if (*v9)
      {
        uint64_t node = nw_hash_table_get_node(*v9, (uint64_t)v7, 0);
        if (node)
        {
          uint64_t v11 = nw_hash_table_get_node(*(void *)(node + 16), (uint64_t)v7, 0);
          if (v11)
          {
            id v12 = *(id *)(v11 + 16);
            id v13 = v12;
            if (v12)
            {
              unint64_t v14 = (void *)v12[1];
              if (v14)
              {
                unint64_t v15 = v14;
                char v16 = v15;
                if (((_BYTE)v15[17] & 8) == 0) {
                  dispatch_assert_queue_V2(v15[1]);
                }

                uint64_t v17 = v13[25];
                if (v17 && *(_DWORD *)(v17 + 40))
                {
                  *(void *)os_log_type_t type = 0;
                  os_log_type_t v58 = type;
                  int v60 = 0;
                  uint64_t v59 = 0x2020000000;
                  *(void *)netcore_stats_tcp_report buf = MEMORY[0x1E4F143A8];
                  *(void *)&buf[8] = 3221225472;
                  *(void *)&buf[16] = __nw_endpoint_get_connected_flow_count_block_invoke;
                  unsigned int v63 = &unk_1E523BE48;
                  uint64_t v64 = type;
                  nw_hash_table_apply((char *)v17, (uint64_t)buf);
                  uint64_t v18 = *((unsigned int *)v58 + 6);
                  _Block_object_dispose(type, 8);
LABEL_112:

                  goto LABEL_113;
                }
LABEL_111:
                uint64_t v18 = 0;
                goto LABEL_112;
              }
              os_log_type_t v44 = __nwlog_obj();
              *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_endpoint_get_connected_flow_count";
              os_log_type_t v41 = (void *)_os_log_send_and_compose_impl();

              type[0] = OS_LOG_TYPE_ERROR;
              char v61 = 0;
              if (!__nwlog_fault((const char *)v41, type, &v61))
              {
LABEL_109:
                if (v41) {
                  free(v41);
                }
                goto LABEL_111;
              }
              if (type[0] == OS_LOG_TYPE_FAULT)
              {
                BOOL v42 = __nwlog_obj();
                os_log_type_t v45 = type[0];
                if (os_log_type_enabled(v42, type[0]))
                {
                  *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
                  *(void *)&uint8_t buf[4] = "nw_endpoint_get_connected_flow_count";
                  _os_log_impl(&dword_1830D4000, v42, v45, "%{public}s called with null endpoint->context", buf, 0xCu);
                }
LABEL_108:

                goto LABEL_109;
              }
              if (!v61)
              {
                BOOL v42 = __nwlog_obj();
                os_log_type_t v55 = type[0];
                if (os_log_type_enabled(v42, type[0]))
                {
                  *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
                  *(void *)&uint8_t buf[4] = "nw_endpoint_get_connected_flow_count";
                  _os_log_impl(&dword_1830D4000, v42, v55, "%{public}s called with null endpoint->context, backtrace limit exceeded", buf, 0xCu);
                }
                goto LABEL_108;
              }
              backtrace_string = (char *)__nw_create_backtrace_string();
              BOOL v42 = __nwlog_obj();
              os_log_type_t v49 = type[0];
              BOOL v50 = os_log_type_enabled(v42, type[0]);
              if (!backtrace_string)
              {
                if (v50)
                {
                  *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
                  *(void *)&uint8_t buf[4] = "nw_endpoint_get_connected_flow_count";
                  _os_log_impl(&dword_1830D4000, v42, v49, "%{public}s called with null endpoint->context, no backtrace", buf, 0xCu);
                }
                goto LABEL_108;
              }
              if (v50)
              {
                *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
                *(void *)&uint8_t buf[4] = "nw_endpoint_get_connected_flow_count";
                *(_WORD *)&unsigned char buf[12] = 2082;
                *(void *)&void buf[14] = backtrace_string;
                _os_log_impl(&dword_1830D4000, v42, v49, "%{public}s called with null endpoint->context, dumping backtrace:%{public}s", buf, 0x16u);
              }
            }
            else
            {
              BOOL v40 = __nwlog_obj();
              *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_endpoint_get_connected_flow_count";
              os_log_type_t v41 = (void *)_os_log_send_and_compose_impl();

              type[0] = OS_LOG_TYPE_ERROR;
              char v61 = 0;
              if (!__nwlog_fault((const char *)v41, type, &v61)) {
                goto LABEL_109;
              }
              if (type[0] == OS_LOG_TYPE_FAULT)
              {
                BOOL v42 = __nwlog_obj();
                os_log_type_t v43 = type[0];
                if (os_log_type_enabled(v42, type[0]))
                {
                  *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
                  *(void *)&uint8_t buf[4] = "nw_endpoint_get_connected_flow_count";
                  _os_log_impl(&dword_1830D4000, v42, v43, "%{public}s called with null endpoint", buf, 0xCu);
                }
                goto LABEL_108;
              }
              if (!v61)
              {
                BOOL v42 = __nwlog_obj();
                os_log_type_t v54 = type[0];
                if (os_log_type_enabled(v42, type[0]))
                {
                  *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
                  *(void *)&uint8_t buf[4] = "nw_endpoint_get_connected_flow_count";
                  _os_log_impl(&dword_1830D4000, v42, v54, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
                }
                goto LABEL_108;
              }
              backtrace_string = (char *)__nw_create_backtrace_string();
              BOOL v42 = __nwlog_obj();
              os_log_type_t v47 = type[0];
              BOOL v48 = os_log_type_enabled(v42, type[0]);
              if (!backtrace_string)
              {
                if (v48)
                {
                  *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
                  *(void *)&uint8_t buf[4] = "nw_endpoint_get_connected_flow_count";
                  _os_log_impl(&dword_1830D4000, v42, v47, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
                }
                goto LABEL_108;
              }
              if (v48)
              {
                *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
                *(void *)&uint8_t buf[4] = "nw_endpoint_get_connected_flow_count";
                *(_WORD *)&unsigned char buf[12] = 2082;
                *(void *)&void buf[14] = backtrace_string;
                _os_log_impl(&dword_1830D4000, v42, v47, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
              }
            }

            free(backtrace_string);
            goto LABEL_109;
          }
        }
LABEL_96:
        uint64_t v18 = 0;
LABEL_113:
        uint64_t v3 = (dispatch_queue_t *)v6;
        goto LABEL_114;
      }
      double v27 = __nwlog_obj();
      *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_context_endpoint_get_connected_flow_count";
      char v28 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      char v61 = 0;
      if (__nwlog_fault(v28, type, &v61))
      {
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          BOOL v29 = __nwlog_obj();
          os_log_type_t v30 = type[0];
          if (os_log_type_enabled(v29, type[0]))
          {
            *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_context_endpoint_get_connected_flow_count";
            _os_log_impl(&dword_1830D4000, v29, v30, "%{public}s called with null hash_table", buf, 0xCu);
          }
        }
        else if (v61)
        {
          BOOL v37 = (char *)__nw_create_backtrace_string();
          BOOL v29 = __nwlog_obj();
          os_log_type_t v38 = type[0];
          BOOL v39 = os_log_type_enabled(v29, type[0]);
          if (v37)
          {
            if (v39)
            {
              *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_context_endpoint_get_connected_flow_count";
              *(_WORD *)&unsigned char buf[12] = 2082;
              *(void *)&void buf[14] = v37;
              _os_log_impl(&dword_1830D4000, v29, v38, "%{public}s called with null hash_table, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(v37);
            goto LABEL_94;
          }
          if (v39)
          {
            *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_context_endpoint_get_connected_flow_count";
            _os_log_impl(&dword_1830D4000, v29, v38, "%{public}s called with null hash_table, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          BOOL v29 = __nwlog_obj();
          os_log_type_t v53 = type[0];
          if (os_log_type_enabled(v29, type[0]))
          {
            *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_context_endpoint_get_connected_flow_count";
            _os_log_impl(&dword_1830D4000, v29, v53, "%{public}s called with null hash_table, backtrace limit exceeded", buf, 0xCu);
          }
        }
      }
LABEL_94:
      if (v28) {
        free(v28);
      }
      goto LABEL_96;
    }
    id v23 = __nwlog_obj();
    *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_context_endpoint_get_connected_flow_count";
    os_log_type_t v24 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    char v61 = 0;
    if (!__nwlog_fault(v24, type, &v61)) {
      goto LABEL_88;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      uint64_t v25 = __nwlog_obj();
      os_log_type_t v26 = type[0];
      if (os_log_type_enabled(v25, type[0]))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_context_endpoint_get_connected_flow_count";
        _os_log_impl(&dword_1830D4000, v25, v26, "%{public}s called with null endpoint", buf, 0xCu);
      }
    }
    else if (v61)
    {
      os_log_type_t v34 = (char *)__nw_create_backtrace_string();
      uint64_t v25 = __nwlog_obj();
      os_log_type_t v35 = type[0];
      BOOL v36 = os_log_type_enabled(v25, type[0]);
      if (v34)
      {
        if (v36)
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_context_endpoint_get_connected_flow_count";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&void buf[14] = v34;
          _os_log_impl(&dword_1830D4000, v25, v35, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v34);
        goto LABEL_88;
      }
      if (v36)
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_context_endpoint_get_connected_flow_count";
        _os_log_impl(&dword_1830D4000, v25, v35, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v25 = __nwlog_obj();
      os_log_type_t v52 = type[0];
      if (os_log_type_enabled(v25, type[0]))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_context_endpoint_get_connected_flow_count";
        _os_log_impl(&dword_1830D4000, v25, v52, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
      }
    }

LABEL_88:
    if (v24) {
      free(v24);
    }
    uint64_t v18 = 0;
    goto LABEL_114;
  }
  double v19 = __nwlog_obj();
  *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_context_endpoint_get_connected_flow_count";
  char v20 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  char v61 = 0;
  if (__nwlog_fault(v20, type, &v61))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      uint64_t v21 = __nwlog_obj();
      os_log_type_t v22 = type[0];
      if (os_log_type_enabled(v21, type[0]))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_context_endpoint_get_connected_flow_count";
        _os_log_impl(&dword_1830D4000, v21, v22, "%{public}s called with null context", buf, 0xCu);
      }
    }
    else if (v61)
    {
      id v31 = (char *)__nw_create_backtrace_string();
      uint64_t v21 = __nwlog_obj();
      os_log_type_t v32 = type[0];
      BOOL v33 = os_log_type_enabled(v21, type[0]);
      if (v31)
      {
        if (v33)
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_context_endpoint_get_connected_flow_count";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&void buf[14] = v31;
          _os_log_impl(&dword_1830D4000, v21, v32, "%{public}s called with null context, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v31);
        goto LABEL_82;
      }
      if (v33)
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_context_endpoint_get_connected_flow_count";
        _os_log_impl(&dword_1830D4000, v21, v32, "%{public}s called with null context, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v21 = __nwlog_obj();
      os_log_type_t v51 = type[0];
      if (os_log_type_enabled(v21, type[0]))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_context_endpoint_get_connected_flow_count";
        _os_log_impl(&dword_1830D4000, v21, v51, "%{public}s called with null context, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_82:
  if (v20) {
    free(v20);
  }
  uint64_t v3 = 0;
  uint64_t v18 = 0;
LABEL_114:

  return v18;
}

void sub_18325E680(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

const char *nw_connection_server_accurate_ecn_state_to_string(unsigned int a1)
{
  if (a1 > 0xA) {
    return "Unknown";
  }
  else {
    return off_1E523B8B8[a1];
  }
}

const char *nw_connection_client_accurate_ecn_state_to_string(unsigned int a1)
{
  if (a1 > 9) {
    return "Unknown";
  }
  else {
    return off_1E523B868[a1];
  }
}

uint64_t nw_protocol_ipv4_add_input_handler(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v141 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
    uint64_t v134 = "nw_protocol_ipv4_add_input_handler";
    BOOL v37 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v131 = 0;
    if (!__nwlog_fault(v37, &type, &v131)) {
      goto LABEL_299;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v131)
      {
        os_log_type_t v38 = __nwlog_obj();
        os_log_type_t v39 = type;
        if (os_log_type_enabled(v38, type))
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          uint64_t v134 = "nw_protocol_ipv4_add_input_handler";
          BOOL v40 = "%{public}s called with null protocol, backtrace limit exceeded";
          goto LABEL_298;
        }
        goto LABEL_299;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v38 = __nwlog_obj();
      os_log_type_t v39 = type;
      BOOL v48 = os_log_type_enabled(v38, type);
      if (!backtrace_string)
      {
        if (v48)
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          uint64_t v134 = "nw_protocol_ipv4_add_input_handler";
          BOOL v40 = "%{public}s called with null protocol, no backtrace";
          goto LABEL_298;
        }
        goto LABEL_299;
      }
      if (!v48) {
        goto LABEL_112;
      }
      *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
      uint64_t v134 = "nw_protocol_ipv4_add_input_handler";
      __int16 v135 = 2082;
      uint64_t v136 = (nw_protocol_identifier *)backtrace_string;
      os_log_type_t v49 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
      goto LABEL_111;
    }
    os_log_type_t v38 = __nwlog_obj();
    os_log_type_t v39 = type;
    if (!os_log_type_enabled(v38, type)) {
      goto LABEL_299;
    }
    *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
    uint64_t v134 = "nw_protocol_ipv4_add_input_handler";
    BOOL v40 = "%{public}s called with null protocol";
LABEL_298:
    _os_log_impl(&dword_1830D4000, v38, v39, v40, buf, 0xCu);
    goto LABEL_299;
  }
  if (a1->handle != &nw_protocol_ref_counted_handle)
  {
    __nwlog_obj();
    *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
    uint64_t v134 = "nw_protocol_ipv4_add_input_handler";
    BOOL v37 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v131 = 0;
    if (!__nwlog_fault(v37, &type, &v131)) {
      goto LABEL_299;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v131)
      {
        os_log_type_t v38 = __nwlog_obj();
        os_log_type_t v39 = type;
        if (os_log_type_enabled(v38, type))
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          uint64_t v134 = "nw_protocol_ipv4_add_input_handler";
          BOOL v40 = "%{public}s called with null ipv4, backtrace limit exceeded";
          goto LABEL_298;
        }
        goto LABEL_299;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v38 = __nwlog_obj();
      os_log_type_t v39 = type;
      BOOL v50 = os_log_type_enabled(v38, type);
      if (!backtrace_string)
      {
        if (v50)
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          uint64_t v134 = "nw_protocol_ipv4_add_input_handler";
          BOOL v40 = "%{public}s called with null ipv4, no backtrace";
          goto LABEL_298;
        }
        goto LABEL_299;
      }
      if (!v50) {
        goto LABEL_112;
      }
      *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
      uint64_t v134 = "nw_protocol_ipv4_add_input_handler";
      __int16 v135 = 2082;
      uint64_t v136 = (nw_protocol_identifier *)backtrace_string;
      os_log_type_t v49 = "%{public}s called with null ipv4, dumping backtrace:%{public}s";
      goto LABEL_111;
    }
    os_log_type_t v38 = __nwlog_obj();
    os_log_type_t v39 = type;
    if (!os_log_type_enabled(v38, type)) {
      goto LABEL_299;
    }
    *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
    uint64_t v134 = "nw_protocol_ipv4_add_input_handler";
    BOOL v40 = "%{public}s called with null ipv4";
    goto LABEL_298;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
    uint64_t v134 = "nw_protocol_ipv4_add_input_handler";
    BOOL v37 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v131 = 0;
    if (!__nwlog_fault(v37, &type, &v131)) {
      goto LABEL_299;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v131)
      {
        os_log_type_t v38 = __nwlog_obj();
        os_log_type_t v39 = type;
        if (os_log_type_enabled(v38, type))
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          uint64_t v134 = "nw_protocol_ipv4_add_input_handler";
          BOOL v40 = "%{public}s called with null input_protocol, backtrace limit exceeded";
          goto LABEL_298;
        }
        goto LABEL_299;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v38 = __nwlog_obj();
      os_log_type_t v39 = type;
      BOOL v51 = os_log_type_enabled(v38, type);
      if (!backtrace_string)
      {
        if (v51)
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          uint64_t v134 = "nw_protocol_ipv4_add_input_handler";
          BOOL v40 = "%{public}s called with null input_protocol, no backtrace";
          goto LABEL_298;
        }
        goto LABEL_299;
      }
      if (!v51) {
        goto LABEL_112;
      }
      *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
      uint64_t v134 = "nw_protocol_ipv4_add_input_handler";
      __int16 v135 = 2082;
      uint64_t v136 = (nw_protocol_identifier *)backtrace_string;
      os_log_type_t v49 = "%{public}s called with null input_protocol, dumping backtrace:%{public}s";
      goto LABEL_111;
    }
    os_log_type_t v38 = __nwlog_obj();
    os_log_type_t v39 = type;
    if (!os_log_type_enabled(v38, type)) {
      goto LABEL_299;
    }
    *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
    uint64_t v134 = "nw_protocol_ipv4_add_input_handler";
    BOOL v40 = "%{public}s called with null input_protocol";
    goto LABEL_298;
  }
  if (a1->default_input_handler)
  {
    __nwlog_obj();
    *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
    uint64_t v134 = "nw_protocol_ipv4_add_input_handler";
    BOOL v37 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v131 = 0;
    if (!__nwlog_fault(v37, &type, &v131)) {
      goto LABEL_299;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v38 = __nwlog_obj();
      os_log_type_t v39 = type;
      if (!os_log_type_enabled(v38, type)) {
        goto LABEL_299;
      }
      *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
      uint64_t v134 = "nw_protocol_ipv4_add_input_handler";
      BOOL v40 = "%{public}s Default input handler already exists";
      goto LABEL_298;
    }
    if (!v131)
    {
      os_log_type_t v38 = __nwlog_obj();
      os_log_type_t v39 = type;
      if (os_log_type_enabled(v38, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        uint64_t v134 = "nw_protocol_ipv4_add_input_handler";
        BOOL v40 = "%{public}s Default input handler already exists, backtrace limit exceeded";
        goto LABEL_298;
      }
      goto LABEL_299;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v38 = __nwlog_obj();
    os_log_type_t v39 = type;
    BOOL v52 = os_log_type_enabled(v38, type);
    if (!backtrace_string)
    {
      if (v52)
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        uint64_t v134 = "nw_protocol_ipv4_add_input_handler";
        BOOL v40 = "%{public}s Default input handler already exists, no backtrace";
        goto LABEL_298;
      }
      goto LABEL_299;
    }
    if (!v52) {
      goto LABEL_112;
    }
    *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
    uint64_t v134 = "nw_protocol_ipv4_add_input_handler";
    __int16 v135 = 2082;
    uint64_t v136 = (nw_protocol_identifier *)backtrace_string;
    os_log_type_t v49 = "%{public}s Default input handler already exists, dumping backtrace:%{public}s";
LABEL_111:
    _os_log_impl(&dword_1830D4000, v38, v39, v49, buf, 0x16u);
    goto LABEL_112;
  }
  if (a2->identifier) {
    identifier = a2->identifier;
  }
  else {
    identifier = (nw_protocol_identifier *)"invalid";
  }
  if (!strncmp(identifier->name, "quic", 4uLL))
  {
    __nwlog_obj();
    *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
    uint64_t v134 = "nw_protocol_ipv4_add_input_handler";
    BOOL v37 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v131 = 0;
    if (!__nwlog_fault(v37, &type, &v131)) {
      goto LABEL_299;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v38 = __nwlog_obj();
      os_log_type_t v39 = type;
      if (os_log_type_enabled(v38, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        uint64_t v134 = "nw_protocol_ipv4_add_input_handler";
        BOOL v40 = "%{public}s Attempt to add quic to ip";
        goto LABEL_298;
      }
LABEL_299:
      if (v37) {
        free(v37);
      }
      return 0;
    }
    if (!v131)
    {
      os_log_type_t v38 = __nwlog_obj();
      os_log_type_t v39 = type;
      if (os_log_type_enabled(v38, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        uint64_t v134 = "nw_protocol_ipv4_add_input_handler";
        BOOL v40 = "%{public}s Attempt to add quic to ip, backtrace limit exceeded";
        goto LABEL_298;
      }
      goto LABEL_299;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v38 = __nwlog_obj();
    os_log_type_t v39 = type;
    BOOL v53 = os_log_type_enabled(v38, type);
    if (!backtrace_string)
    {
      if (v53)
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        uint64_t v134 = "nw_protocol_ipv4_add_input_handler";
        BOOL v40 = "%{public}s Attempt to add quic to ip, no backtrace";
        goto LABEL_298;
      }
      goto LABEL_299;
    }
    if (v53)
    {
      *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
      uint64_t v134 = "nw_protocol_ipv4_add_input_handler";
      __int16 v135 = 2082;
      uint64_t v136 = (nw_protocol_identifier *)backtrace_string;
      os_log_type_t v49 = "%{public}s Attempt to add quic to ip, dumping backtrace:%{public}s";
      goto LABEL_111;
    }
LABEL_112:
    free(backtrace_string);
    goto LABEL_299;
  }
  a1->default_input_handler = a2;
  if (a2->handle == &nw_protocol_ref_counted_handle)
  {
    callbacks = a2[1].callbacks;
    if (callbacks) {
      a2[1].callbacks = (nw_protocol_callbacks *)((char *)&callbacks->add_input_handler + 1);
    }
  }
  *(_OWORD *)a1->flow_id = *(_OWORD *)a2->flow_id;
  if (a2->output_handler)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v6 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
      uint64_t v134 = "nw_protocol_ipv4_add_input_handler";
      _os_log_impl(&dword_1830D4000, v6, OS_LOG_TYPE_DEBUG, "%{public}s Output handler already exists for protocol being added as input handler", buf, 0xCu);
    }
  }
  else
  {
    a2->output_handler = a1;
    id v7 = a1[1].callbacks;
    if (v7) {
      a1[1].callbacks = (nw_protocol_callbacks *)((char *)&v7->add_input_handler + 1);
    }
  }
  handle = a2->handle;
  if (handle == &nw_protocol_ref_counted_handle)
  {
    uint64_t v9 = a2[1].callbacks;
    if (v9) {
      a2[1].callbacks = (nw_protocol_callbacks *)((char *)&v9->add_input_handler + 1);
    }
  }
  uint64_t v10 = a2->callbacks;
  if (v10)
  {
    get_parameters = (uint64_t (*)(nw_protocol *))v10->get_parameters;
    if (get_parameters)
    {
      id v12 = (void *)get_parameters(a2);
      if (handle != &nw_protocol_ref_counted_handle) {
        goto LABEL_24;
      }
      goto LABEL_23;
    }
  }
  __nwlog_obj();
  uint64_t v25 = a2->identifier;
  if (!v25) {
    uint64_t v25 = (nw_protocol_identifier *)"invalid";
  }
  *(_DWORD *)netcore_stats_tcp_report buf = 136446722;
  uint64_t v134 = "__nw_protocol_get_parameters";
  __int16 v135 = 2082;
  uint64_t v136 = v25;
  __int16 v137 = 2048;
  msghdr v138 = a2;
  os_log_type_t v26 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v131 = 0;
  if (__nwlog_fault(v26, &type, &v131))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      double v27 = __nwlog_obj();
      os_log_type_t v28 = type;
      if (!os_log_type_enabled(v27, type)) {
        goto LABEL_126;
      }
      BOOL v29 = a2->identifier;
      if (!v29) {
        BOOL v29 = (nw_protocol_identifier *)"invalid";
      }
      *(_DWORD *)netcore_stats_tcp_report buf = 136446722;
      uint64_t v134 = "__nw_protocol_get_parameters";
      __int16 v135 = 2082;
      uint64_t v136 = v29;
      __int16 v137 = 2048;
      msghdr v138 = a2;
      os_log_type_t v30 = "%{public}s protocol %{public}s (%p) has invalid get_parameters callback";
LABEL_125:
      _os_log_impl(&dword_1830D4000, v27, v28, v30, buf, 0x20u);
      goto LABEL_126;
    }
    if (!v131)
    {
      double v27 = __nwlog_obj();
      os_log_type_t v28 = type;
      if (!os_log_type_enabled(v27, type)) {
        goto LABEL_126;
      }
      os_log_type_t v54 = a2->identifier;
      if (!v54) {
        os_log_type_t v54 = (nw_protocol_identifier *)"invalid";
      }
      *(_DWORD *)netcore_stats_tcp_report buf = 136446722;
      uint64_t v134 = "__nw_protocol_get_parameters";
      __int16 v135 = 2082;
      uint64_t v136 = v54;
      __int16 v137 = 2048;
      msghdr v138 = a2;
      os_log_type_t v30 = "%{public}s protocol %{public}s (%p) has invalid get_parameters callback, backtrace limit exceeded";
      goto LABEL_125;
    }
    os_log_type_t v41 = (char *)__nw_create_backtrace_string();
    double v27 = __nwlog_obj();
    os_log_type_t v28 = type;
    BOOL v42 = os_log_type_enabled(v27, type);
    if (!v41)
    {
      if (!v42) {
        goto LABEL_126;
      }
      os_log_type_t v56 = a2->identifier;
      if (!v56) {
        os_log_type_t v56 = (nw_protocol_identifier *)"invalid";
      }
      *(_DWORD *)netcore_stats_tcp_report buf = 136446722;
      uint64_t v134 = "__nw_protocol_get_parameters";
      __int16 v135 = 2082;
      uint64_t v136 = v56;
      __int16 v137 = 2048;
      msghdr v138 = a2;
      os_log_type_t v30 = "%{public}s protocol %{public}s (%p) has invalid get_parameters callback, no backtrace";
      goto LABEL_125;
    }
    if (v42)
    {
      os_log_type_t v43 = a2->identifier;
      if (!v43) {
        os_log_type_t v43 = (nw_protocol_identifier *)"invalid";
      }
      *(_DWORD *)netcore_stats_tcp_report buf = 136446978;
      uint64_t v134 = "__nw_protocol_get_parameters";
      __int16 v135 = 2082;
      uint64_t v136 = v43;
      __int16 v137 = 2048;
      msghdr v138 = a2;
      __int16 v139 = 2082;
      uint64_t v140 = v41;
      _os_log_impl(&dword_1830D4000, v27, v28, "%{public}s protocol %{public}s (%p) has invalid get_parameters callback, dumping backtrace:%{public}s", buf, 0x2Au);
    }
    free(v41);
  }
LABEL_126:
  if (v26) {
    free(v26);
  }
  id v12 = 0;
  if (handle == &nw_protocol_ref_counted_handle)
  {
LABEL_23:
    if (a2->handle == &nw_protocol_ref_counted_handle)
    {
      uint64_t v21 = a2[1].callbacks;
      if (v21)
      {
        os_log_type_t v22 = (nw_protocol_callbacks *)((char *)v21 - 1);
        a2[1].callbacks = v22;
        if (!v22)
        {
          id v23 = *(void (***)(void))a2[1].flow_id;
          if (v23)
          {
            *(void *)a2[1].flow_id = 0;
            v23[2](v23);
            _Block_release(v23);
          }
          if (a2[1].flow_id[8])
          {
            os_log_type_t v24 = *(const void **)a2[1].flow_id;
            if (v24) {
              _Block_release(v24);
            }
          }
          free(a2);
        }
      }
    }
  }
LABEL_24:
  BYTE6(a1[3].output_handler) = nw_parameters_get_ip_protocol(v12);
  id v13 = a2->handle;
  if (v13 == &nw_protocol_ref_counted_handle)
  {
    unint64_t v14 = a2[1].callbacks;
    if (v14) {
      a2[1].callbacks = (nw_protocol_callbacks *)((char *)&v14->add_input_handler + 1);
    }
  }
  unint64_t v15 = a2->callbacks;
  if (v15)
  {
    get_local_endpoint = (uint64_t (*)(nw_protocol *))v15->get_local_endpoint;
    if (get_local_endpoint)
    {
      uint64_t v17 = get_local_endpoint(a2);
      if (v13 != &nw_protocol_ref_counted_handle) {
        goto LABEL_30;
      }
      goto LABEL_138;
    }
  }
  __nwlog_obj();
  id v31 = a2->identifier;
  if (!v31) {
    id v31 = (nw_protocol_identifier *)"invalid";
  }
  *(_DWORD *)netcore_stats_tcp_report buf = 136446722;
  uint64_t v134 = "__nw_protocol_get_local_endpoint";
  __int16 v135 = 2082;
  uint64_t v136 = v31;
  __int16 v137 = 2048;
  msghdr v138 = a2;
  os_log_type_t v32 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v131 = 0;
  if (__nwlog_fault(v32, &type, &v131))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v33 = __nwlog_obj();
      os_log_type_t v34 = type;
      if (!os_log_type_enabled(v33, type)) {
        goto LABEL_135;
      }
      os_log_type_t v35 = a2->identifier;
      if (!v35) {
        os_log_type_t v35 = (nw_protocol_identifier *)"invalid";
      }
      *(_DWORD *)netcore_stats_tcp_report buf = 136446722;
      uint64_t v134 = "__nw_protocol_get_local_endpoint";
      __int16 v135 = 2082;
      uint64_t v136 = v35;
      __int16 v137 = 2048;
      msghdr v138 = a2;
      BOOL v36 = "%{public}s protocol %{public}s (%p) has invalid get_local_endpoint callback";
LABEL_134:
      _os_log_impl(&dword_1830D4000, v33, v34, v36, buf, 0x20u);
      goto LABEL_135;
    }
    if (!v131)
    {
      BOOL v33 = __nwlog_obj();
      os_log_type_t v34 = type;
      if (!os_log_type_enabled(v33, type)) {
        goto LABEL_135;
      }
      os_log_type_t v55 = a2->identifier;
      if (!v55) {
        os_log_type_t v55 = (nw_protocol_identifier *)"invalid";
      }
      *(_DWORD *)netcore_stats_tcp_report buf = 136446722;
      uint64_t v134 = "__nw_protocol_get_local_endpoint";
      __int16 v135 = 2082;
      uint64_t v136 = v55;
      __int16 v137 = 2048;
      msghdr v138 = a2;
      BOOL v36 = "%{public}s protocol %{public}s (%p) has invalid get_local_endpoint callback, backtrace limit exceeded";
      goto LABEL_134;
    }
    os_log_type_t v44 = (char *)__nw_create_backtrace_string();
    BOOL v33 = __nwlog_obj();
    os_log_type_t v34 = type;
    BOOL v45 = os_log_type_enabled(v33, type);
    if (!v44)
    {
      if (!v45) {
        goto LABEL_135;
      }
      BOOL v57 = a2->identifier;
      if (!v57) {
        BOOL v57 = (nw_protocol_identifier *)"invalid";
      }
      *(_DWORD *)netcore_stats_tcp_report buf = 136446722;
      uint64_t v134 = "__nw_protocol_get_local_endpoint";
      __int16 v135 = 2082;
      uint64_t v136 = v57;
      __int16 v137 = 2048;
      msghdr v138 = a2;
      BOOL v36 = "%{public}s protocol %{public}s (%p) has invalid get_local_endpoint callback, no backtrace";
      goto LABEL_134;
    }
    if (v45)
    {
      id v46 = a2->identifier;
      if (!v46) {
        id v46 = (nw_protocol_identifier *)"invalid";
      }
      *(_DWORD *)netcore_stats_tcp_report buf = 136446978;
      uint64_t v134 = "__nw_protocol_get_local_endpoint";
      __int16 v135 = 2082;
      uint64_t v136 = v46;
      __int16 v137 = 2048;
      msghdr v138 = a2;
      __int16 v139 = 2082;
      uint64_t v140 = v44;
      _os_log_impl(&dword_1830D4000, v33, v34, "%{public}s protocol %{public}s (%p) has invalid get_local_endpoint callback, dumping backtrace:%{public}s", buf, 0x2Au);
    }
    free(v44);
  }
LABEL_135:
  if (v32) {
    free(v32);
  }
  uint64_t v17 = 0;
  if (v13 != &nw_protocol_ref_counted_handle) {
    goto LABEL_30;
  }
LABEL_138:
  if (a2->handle != &nw_protocol_ref_counted_handle)
  {
    BOOL v19 = 0;
    goto LABEL_140;
  }
  uint32_t v92 = a2[1].callbacks;
  if (v92)
  {
    uint64_t v93 = (nw_protocol_callbacks *)((char *)v92 - 1);
    a2[1].callbacks = v93;
    if (!v93)
    {
      uint64_t v94 = *(void (***)(void))a2[1].flow_id;
      if (v94)
      {
        *(void *)a2[1].flow_id = 0;
        v94[2](v94);
        _Block_release(v94);
      }
      if (a2[1].flow_id[8])
      {
        uint64_t v95 = *(const void **)a2[1].flow_id;
        if (v95) {
          _Block_release(v95);
        }
      }
      free(a2);
    }
  }
LABEL_30:
  uint64_t v18 = a2->handle;
  BOOL v19 = v18 == &nw_protocol_ref_counted_handle;
  if (v18 == &nw_protocol_ref_counted_handle)
  {
    char v20 = a2[1].callbacks;
    if (v20) {
      a2[1].callbacks = (nw_protocol_callbacks *)((char *)&v20->add_input_handler + 1);
    }
  }
LABEL_140:
  os_log_type_t v58 = a2->callbacks;
  if (v58)
  {
    get_remote_endpoint = (uint64_t (*)(nw_protocol *))v58->get_remote_endpoint;
    if (get_remote_endpoint)
    {
      int v60 = get_remote_endpoint(a2);
      if (!v19) {
        goto LABEL_144;
      }
      goto LABEL_143;
    }
  }
  __nwlog_obj();
  uint64_t v100 = a2->identifier;
  if (!v100) {
    uint64_t v100 = (nw_protocol_identifier *)"invalid";
  }
  *(_DWORD *)netcore_stats_tcp_report buf = 136446722;
  uint64_t v134 = "__nw_protocol_get_remote_endpoint";
  __int16 v135 = 2082;
  uint64_t v136 = v100;
  __int16 v137 = 2048;
  msghdr v138 = a2;
  int v101 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v131 = 0;
  if (__nwlog_fault(v101, &type, &v131))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v102 = __nwlog_obj();
      os_log_type_t v103 = type;
      if (!os_log_type_enabled(v102, type)) {
        goto LABEL_255;
      }
      os_log_type_t v104 = a2->identifier;
      if (!v104) {
        os_log_type_t v104 = (nw_protocol_identifier *)"invalid";
      }
      *(_DWORD *)netcore_stats_tcp_report buf = 136446722;
      uint64_t v134 = "__nw_protocol_get_remote_endpoint";
      __int16 v135 = 2082;
      uint64_t v136 = v104;
      __int16 v137 = 2048;
      msghdr v138 = a2;
      os_log_type_t v105 = "%{public}s protocol %{public}s (%p) has invalid get_remote_endpoint callback";
LABEL_253:
      BOOL v126 = v102;
LABEL_254:
      _os_log_impl(&dword_1830D4000, v126, v103, v105, buf, 0x20u);
      goto LABEL_255;
    }
    if (!v131)
    {
      int v102 = __nwlog_obj();
      os_log_type_t v103 = type;
      if (!os_log_type_enabled(v102, type)) {
        goto LABEL_255;
      }
      uint64_t v125 = a2->identifier;
      if (!v125) {
        uint64_t v125 = (nw_protocol_identifier *)"invalid";
      }
      *(_DWORD *)netcore_stats_tcp_report buf = 136446722;
      uint64_t v134 = "__nw_protocol_get_remote_endpoint";
      __int16 v135 = 2082;
      uint64_t v136 = v125;
      __int16 v137 = 2048;
      msghdr v138 = a2;
      os_log_type_t v105 = "%{public}s protocol %{public}s (%p) has invalid get_remote_endpoint callback, backtrace limit exceeded";
      goto LABEL_253;
    }
    uint64_t v116 = (char *)__nw_create_backtrace_string();
    BOOL v117 = __nwlog_obj();
    os_log_type_t v103 = type;
    log = v117;
    BOOL v118 = os_log_type_enabled(v117, type);
    if (v116)
    {
      if (v118)
      {
        uint64_t v119 = a2->identifier;
        if (!v119) {
          uint64_t v119 = (nw_protocol_identifier *)"invalid";
        }
        *(_DWORD *)netcore_stats_tcp_report buf = 136446978;
        uint64_t v134 = "__nw_protocol_get_remote_endpoint";
        __int16 v135 = 2082;
        uint64_t v136 = v119;
        __int16 v137 = 2048;
        msghdr v138 = a2;
        __int16 v139 = 2082;
        uint64_t v140 = v116;
        _os_log_impl(&dword_1830D4000, log, v103, "%{public}s protocol %{public}s (%p) has invalid get_remote_endpoint callback, dumping backtrace:%{public}s", buf, 0x2Au);
      }
      free(v116);
    }
    else if (v118)
    {
      uint64_t v128 = a2->identifier;
      if (!v128) {
        uint64_t v128 = (nw_protocol_identifier *)"invalid";
      }
      *(_DWORD *)netcore_stats_tcp_report buf = 136446722;
      uint64_t v134 = "__nw_protocol_get_remote_endpoint";
      __int16 v135 = 2082;
      uint64_t v136 = v128;
      __int16 v137 = 2048;
      msghdr v138 = a2;
      os_log_type_t v105 = "%{public}s protocol %{public}s (%p) has invalid get_remote_endpoint callback, no backtrace";
      BOOL v126 = log;
      goto LABEL_254;
    }
  }
LABEL_255:
  if (v101) {
    free(v101);
  }
  int v60 = 0;
  if (v19)
  {
LABEL_143:
    if (a2->handle == &nw_protocol_ref_counted_handle)
    {
      int v88 = a2[1].callbacks;
      if (v88)
      {
        __int16 v89 = (nw_protocol_callbacks *)((char *)v88 - 1);
        a2[1].callbacks = v89;
        if (!v89)
        {
          os_log_type_t v90 = *(void (***)(void))a2[1].flow_id;
          if (v90)
          {
            *(void *)a2[1].flow_id = 0;
            v90[2](v90);
            _Block_release(v90);
          }
          if (a2[1].flow_id[8])
          {
            os_log_type_t v91 = *(const void **)a2[1].flow_id;
            if (v91) {
              _Block_release(v91);
            }
          }
          free(a2);
        }
      }
    }
  }
LABEL_144:
  if (nw_endpoint_get_address_family(v17) == 2) {
    LODWORD(a1[2].callbacks) = *(_DWORD *)&nw_endpoint_get_address(v17)->sa_data[2];
  }
  if (nw_endpoint_get_address_family(v60) == 2) {
    HIDWORD(a1[2].callbacks) = *(_DWORD *)&nw_endpoint_get_address(v60)->sa_data[2];
  }
  default_input_handler = a1->default_input_handler;
  if (!default_input_handler)
  {
    __nwlog_obj();
    *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
    uint64_t v134 = "__nw_protocol_get_path";
    unsigned int v112 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v131 = 0;
    if (!__nwlog_fault(v112, &type, &v131)) {
      goto LABEL_305;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v113 = __nwlog_obj();
      os_log_type_t v114 = type;
      if (!os_log_type_enabled(v113, type)) {
        goto LABEL_305;
      }
      *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
      uint64_t v134 = "__nw_protocol_get_path";
      uint64_t v115 = "%{public}s called with null protocol";
    }
    else if (v131)
    {
      os_log_type_t v123 = (char *)__nw_create_backtrace_string();
      uint64_t v113 = __nwlog_obj();
      os_log_type_t v114 = type;
      BOOL v124 = os_log_type_enabled(v113, type);
      if (v123)
      {
        if (v124)
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
          uint64_t v134 = "__nw_protocol_get_path";
          __int16 v135 = 2082;
          uint64_t v136 = (nw_protocol_identifier *)v123;
          _os_log_impl(&dword_1830D4000, v113, v114, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v123);
        goto LABEL_305;
      }
      if (!v124)
      {
LABEL_305:
        if (v112) {
          free(v112);
        }
        goto LABEL_165;
      }
      *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
      uint64_t v134 = "__nw_protocol_get_path";
      uint64_t v115 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      uint64_t v113 = __nwlog_obj();
      os_log_type_t v114 = type;
      if (!os_log_type_enabled(v113, type)) {
        goto LABEL_305;
      }
      *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
      uint64_t v134 = "__nw_protocol_get_path";
      uint64_t v115 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    _os_log_impl(&dword_1830D4000, v113, v114, v115, buf, 0xCu);
    goto LABEL_305;
  }
  os_log_type_t v62 = default_input_handler->handle;
  if (v62 == &nw_protocol_ref_counted_handle)
  {
    unsigned int v63 = default_input_handler[1].callbacks;
    if (v63) {
      default_input_handler[1].callbacks = (nw_protocol_callbacks *)((char *)&v63->add_input_handler + 1);
    }
  }
  uint64_t v64 = default_input_handler->callbacks;
  if (!v64 || (get_path = (uint64_t (*)(nw_protocol *))v64->get_path) == 0)
  {
    __nwlog_obj();
    name = default_input_handler->identifier->name;
    if (!name) {
      name = "invalid";
    }
    *(_DWORD *)netcore_stats_tcp_report buf = 136446722;
    uint64_t v134 = "__nw_protocol_get_path";
    __int16 v135 = 2082;
    uint64_t v136 = (nw_protocol_identifier *)name;
    __int16 v137 = 2048;
    msghdr v138 = default_input_handler;
    os_log_type_t v107 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v131 = 0;
    if (__nwlog_fault(v107, &type, &v131))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        BOOL v108 = __nwlog_obj();
        os_log_type_t v109 = type;
        if (!os_log_type_enabled(v108, type)) {
          goto LABEL_272;
        }
        BOOL v110 = default_input_handler->identifier->name;
        if (!v110) {
          BOOL v110 = "invalid";
        }
        *(_DWORD *)netcore_stats_tcp_report buf = 136446722;
        uint64_t v134 = "__nw_protocol_get_path";
        __int16 v135 = 2082;
        uint64_t v136 = (nw_protocol_identifier *)v110;
        __int16 v137 = 2048;
        msghdr v138 = default_input_handler;
        int v111 = "%{public}s protocol %{public}s (%p) has invalid get_path callback";
LABEL_271:
        _os_log_impl(&dword_1830D4000, v108, v109, v111, buf, 0x20u);
        goto LABEL_272;
      }
      if (!v131)
      {
        BOOL v108 = __nwlog_obj();
        os_log_type_t v109 = type;
        if (!os_log_type_enabled(v108, type)) {
          goto LABEL_272;
        }
        uint64_t v127 = default_input_handler->identifier->name;
        if (!v127) {
          uint64_t v127 = "invalid";
        }
        *(_DWORD *)netcore_stats_tcp_report buf = 136446722;
        uint64_t v134 = "__nw_protocol_get_path";
        __int16 v135 = 2082;
        uint64_t v136 = (nw_protocol_identifier *)v127;
        __int16 v137 = 2048;
        msghdr v138 = default_input_handler;
        int v111 = "%{public}s protocol %{public}s (%p) has invalid get_path callback, backtrace limit exceeded";
        goto LABEL_271;
      }
      uint64_t v120 = (char *)__nw_create_backtrace_string();
      BOOL v108 = __nwlog_obj();
      os_log_type_t v109 = type;
      BOOL v121 = os_log_type_enabled(v108, type);
      if (!v120)
      {
        if (!v121) {
          goto LABEL_272;
        }
        os_log_type_t v129 = default_input_handler->identifier->name;
        if (!v129) {
          os_log_type_t v129 = "invalid";
        }
        *(_DWORD *)netcore_stats_tcp_report buf = 136446722;
        uint64_t v134 = "__nw_protocol_get_path";
        __int16 v135 = 2082;
        uint64_t v136 = (nw_protocol_identifier *)v129;
        __int16 v137 = 2048;
        msghdr v138 = default_input_handler;
        int v111 = "%{public}s protocol %{public}s (%p) has invalid get_path callback, no backtrace";
        goto LABEL_271;
      }
      if (v121)
      {
        uint64_t v122 = default_input_handler->identifier->name;
        if (!v122) {
          uint64_t v122 = "invalid";
        }
        *(_DWORD *)netcore_stats_tcp_report buf = 136446978;
        uint64_t v134 = "__nw_protocol_get_path";
        __int16 v135 = 2082;
        uint64_t v136 = (nw_protocol_identifier *)v122;
        __int16 v137 = 2048;
        msghdr v138 = default_input_handler;
        __int16 v139 = 2082;
        uint64_t v140 = v120;
        _os_log_impl(&dword_1830D4000, v108, v109, "%{public}s protocol %{public}s (%p) has invalid get_path callback, dumping backtrace:%{public}s", buf, 0x2Au);
      }
      free(v120);
    }
LABEL_272:
    if (v107) {
      free(v107);
    }
    uint64_t v66 = 0;
    if (v62 != &nw_protocol_ref_counted_handle) {
      goto LABEL_156;
    }
    goto LABEL_155;
  }
  uint64_t v66 = (id *)get_path(default_input_handler);
  if (v62 == &nw_protocol_ref_counted_handle)
  {
LABEL_155:
    if (default_input_handler->handle == &nw_protocol_ref_counted_handle)
    {
      uint64_t v96 = default_input_handler[1].callbacks;
      if (v96)
      {
        uint64_t v97 = (nw_protocol_callbacks *)((char *)v96 - 1);
        default_input_handler[1].callbacks = v97;
        if (!v97)
        {
          os_log_type_t v98 = *(void (***)(void))default_input_handler[1].flow_id;
          if (v98)
          {
            *(void *)default_input_handler[1].flow_id = 0;
            v98[2](v98);
            _Block_release(v98);
          }
          if (default_input_handler[1].flow_id[8])
          {
            uint64_t v99 = *(const void **)default_input_handler[1].flow_id;
            if (v99) {
              _Block_release(v99);
            }
          }
          free(default_input_handler);
        }
      }
    }
  }
LABEL_156:
  if (v66)
  {
    LODWORD(a1[3].identifier) = nw_path_get_maximum_packet_size(v66);
    HIDWORD(a1[3].identifier) = nw_path_get_mtu(v66);
    LOBYTE(a1[3].handle) = (16 * (nw_path_get_csum_flags(v66) & 1)) | (uint64_t)a1[3].handle & 0xEF;
    id v67 = v66[12];
    if (v67)
    {
      id v68 = v67;
      char v69 = v68;
      if ((*(_WORD *)((unsigned char *)v68 + 85) & 0x80) != 0) {
        int v70 = *((_DWORD *)v68 + 18);
      }
      else {
        int v70 = 0;
      }

      HIDWORD(a1[3].callbacks) = v70;
      ssize_t v71 = v69;
      int v72 = v71;
      if ((*(_WORD *)(v69 + 85) & 0x100) != 0) {
        int v73 = v71[19];
      }
      else {
        int v73 = 0;
      }

      LODWORD(a1[3].output_handler) = v73;
      os_release(v72);
    }
  }
LABEL_165:
  int v74 = nw_parameters_copy_protocol_options_legacy(v12, a1);
  if (v74)
  {
    uint64_t v75 = v74;
    __int16 v76 = v75;
    uint64_t v77 = 0;
    BYTE1(a1[3].handle) = 0;
    uint64_t v78 = (char *)&a1[3].handle + 1;
    unint64_t v79 = 84;
    while (1)
    {
      int v80 = v75[v77 + 48];
      v78[v77] = v80;
      if (!v80) {
        break;
      }
      --v79;
      ++v77;
      if (v79 <= 1)
      {
        v78[v77] = 0;
        break;
      }
    }

    int hop_limit = nw_ip_options_get_hop_limit(v76);
    if (hop_limit) {
      char v82 = hop_limit;
    }
    else {
      char v82 = 64;
    }
    HIBYTE(a1[3].output_handler) = v82;
    if (nw_ip_options_get_calculate_receive_time(v76)) {
      char v83 = 2;
    }
    else {
      char v83 = 0;
    }
    LOBYTE(a1[3].handle) = (uint64_t)a1[3].handle & 0xFD | v83;
    if (nw_ip_options_get_receive_hop_limit(v76)) {
      char v84 = 0x80;
    }
    else {
      char v84 = 0;
    }
    LOBYTE(a1[3].handle) = v84 & 0x80 | (uint64_t)a1[3].handle & 0x7F;
    LOBYTE(a1[3].handle) = (uint64_t)a1[3].handle & 0xF7 | (8
                                                         * (nw_ip_options_get_fragmentation_value(v76) == 2));
    if (nw_ip_options_get_corrupt_checksums(v76)) {
      char v85 = 32;
    }
    else {
      char v85 = 0;
    }
    LOBYTE(a1[3].handle) = (uint64_t)a1[3].handle & 0xDF | v85;
    os_release(v76);
  }
  else
  {
    HIBYTE(a1[3].output_handler) = 64;
  }
  uint64_t v86 = 1;
  nw_protocol_ip_register_segmentation_offload_notification(a1, 1);
  return v86;
}

uint64_t __nw_resolver_set_update_handler_block_invoke_82(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (nw_endpoint_get_type(v4) == nw_endpoint_type_address)
  {
    int address_family = nw_endpoint_get_address_family(v4);
    if (address_family == 30)
    {
      uint64_t v6 = a1 + 40;
      goto LABEL_6;
    }
    if (address_family == 2)
    {
      uint64_t v6 = a1 + 32;
LABEL_6:
      *(unsigned char *)(*(void *)(*(void *)v6 + 8) + 24) = 1;
    }
  }

  return 1;
}

void sub_1832600E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

char *__cdecl nw_endpoint_copy_address_string(nw_endpoint_t endpoint)
{
  *(void *)((char *)&v93[8] + 2) = *MEMORY[0x1E4F143B8];
  id v1 = endpoint;
  uint64_t v2 = v1;
  if (!v1)
  {
    uint64_t v65 = __nwlog_obj();
    *(_DWORD *)os_log_type_t v90 = 136446210;
    os_log_type_t v91 = "nw_endpoint_copy_address_string";
    BOOL v19 = (char *)_os_log_send_and_compose_impl();

    buf[0] = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v19, buf, &type))
    {
      if (buf[0] == 17)
      {
        uint64_t v66 = __nwlog_obj();
        os_log_type_t v67 = buf[0];
        if (os_log_type_enabled(v66, (os_log_type_t)buf[0]))
        {
          *(_DWORD *)os_log_type_t v90 = 136446210;
          os_log_type_t v91 = "nw_endpoint_copy_address_string";
          _os_log_impl(&dword_1830D4000, v66, v67, "%{public}s called with null any_endpoint", v90, 0xCu);
        }
      }
      else if (type)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        uint64_t v66 = __nwlog_obj();
        os_log_type_t v69 = buf[0];
        BOOL v70 = os_log_type_enabled(v66, (os_log_type_t)buf[0]);
        if (backtrace_string)
        {
          if (v70)
          {
            *(_DWORD *)os_log_type_t v90 = 136446466;
            os_log_type_t v91 = "nw_endpoint_copy_address_string";
            __int16 v92 = 2082;
            v93[0] = backtrace_string;
            _os_log_impl(&dword_1830D4000, v66, v69, "%{public}s called with null any_endpoint, dumping backtrace:%{public}s", v90, 0x16u);
          }

          free(backtrace_string);
          if (!v19) {
            goto LABEL_49;
          }
          goto LABEL_48;
        }
        if (v70)
        {
          *(_DWORD *)os_log_type_t v90 = 136446210;
          os_log_type_t v91 = "nw_endpoint_copy_address_string";
          _os_log_impl(&dword_1830D4000, v66, v69, "%{public}s called with null any_endpoint, no backtrace", v90, 0xCu);
        }
      }
      else
      {
        uint64_t v66 = __nwlog_obj();
        os_log_type_t v71 = buf[0];
        if (os_log_type_enabled(v66, (os_log_type_t)buf[0]))
        {
          *(_DWORD *)os_log_type_t v90 = 136446210;
          os_log_type_t v91 = "nw_endpoint_copy_address_string";
          _os_log_impl(&dword_1830D4000, v66, v71, "%{public}s called with null any_endpoint, backtrace limit exceeded", v90, 0xCu);
        }
      }
    }
LABEL_47:
    if (!v19)
    {
LABEL_49:
      BOOL v29 = 0;
LABEL_89:

      return v29;
    }
LABEL_48:
    free(v19);
    goto LABEL_49;
  }
  uint64_t v3 = v1;
  int v4 = [v3 type];

  if (v4 != 1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v16 = (id)gLogObj;
    uint64_t v17 = v3;
    int v18 = [v17 type];

    *(_DWORD *)os_log_type_t v90 = 136446466;
    os_log_type_t v91 = "nw_endpoint_copy_address_string";
    __int16 v92 = 1024;
    LODWORD(v93[0]) = v18;
    LODWORD(v74) = 18;
    BOOL v19 = (char *)_os_log_send_and_compose_impl();

    buf[0] = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v19, buf, &type))
    {
      if (buf[0] == 17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        char v20 = (id)gLogObj;
        os_log_type_t v21 = buf[0];
        if (os_log_type_enabled(v20, (os_log_type_t)buf[0]))
        {
          os_log_type_t v22 = v17;
          int v23 = [v22 type];

          *(_DWORD *)os_log_type_t v90 = 136446466;
          os_log_type_t v91 = "nw_endpoint_copy_address_string";
          __int16 v92 = 1024;
          LODWORD(v93[0]) = v23;
          _os_log_impl(&dword_1830D4000, v20, v21, "%{public}s incorrect endpoint type %u", v90, 0x12u);
        }
      }
      else if (type)
      {
        os_log_type_t v24 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        char v20 = (id)gLogObj;
        os_log_type_t v25 = buf[0];
        BOOL v26 = os_log_type_enabled(v20, (os_log_type_t)buf[0]);
        if (v24)
        {
          if (v26)
          {
            double v27 = v17;
            int v28 = [v27 type];

            *(_DWORD *)os_log_type_t v90 = 136446722;
            os_log_type_t v91 = "nw_endpoint_copy_address_string";
            __int16 v92 = 1024;
            LODWORD(v93[0]) = v28;
            WORD2(v93[0]) = 2082;
            *(void *)((char *)v93 + 6) = v24;
            _os_log_impl(&dword_1830D4000, v20, v25, "%{public}s incorrect endpoint type %u, dumping backtrace:%{public}s", v90, 0x1Cu);
          }

          free(v24);
          if (!v19) {
            goto LABEL_49;
          }
          goto LABEL_48;
        }
        if (v26)
        {
          BOOL v48 = v17;
          int v49 = [v48 type];

          *(_DWORD *)os_log_type_t v90 = 136446466;
          os_log_type_t v91 = "nw_endpoint_copy_address_string";
          __int16 v92 = 1024;
          LODWORD(v93[0]) = v49;
          _os_log_impl(&dword_1830D4000, v20, v25, "%{public}s incorrect endpoint type %u, no backtrace", v90, 0x12u);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        char v20 = (id)gLogObj;
        os_log_type_t v41 = buf[0];
        if (os_log_type_enabled(v20, (os_log_type_t)buf[0]))
        {
          BOOL v42 = v17;
          int v43 = [v42 type];

          *(_DWORD *)os_log_type_t v90 = 136446466;
          os_log_type_t v91 = "nw_endpoint_copy_address_string";
          __int16 v92 = 1024;
          LODWORD(v93[0]) = v43;
          _os_log_impl(&dword_1830D4000, v20, v41, "%{public}s incorrect endpoint type %u, backtrace limit exceeded", v90, 0x12u);
        }
      }
    }
    goto LABEL_47;
  }
  id v5 = v3;
  int address_family = nw_endpoint_get_address_family(v5);
  switch(address_family)
  {
    case 1:
      unint64_t isa_low = LOBYTE(v5[29].isa);
      size_t v34 = isa_low - 2;
      if (isa_low <= 2)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v35 = (id)gLogObj;
        *(_DWORD *)os_log_type_t v90 = 136446210;
        os_log_type_t v91 = "nw_endpoint_copy_address_string";
        id v31 = (const char *)_os_log_send_and_compose_impl();

        buf[0] = 16;
        os_log_type_t type = OS_LOG_TYPE_DEFAULT;
        if (!__nwlog_fault(v31, buf, &type)) {
          goto LABEL_84;
        }
        if (buf[0] == 17)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          BOOL v36 = (id)gLogObj;
          os_log_type_t v37 = buf[0];
          if (os_log_type_enabled(v36, (os_log_type_t)buf[0]))
          {
            *(_DWORD *)os_log_type_t v90 = 136446210;
            os_log_type_t v91 = "nw_endpoint_copy_address_string";
            _os_log_impl(&dword_1830D4000, v36, v37, "%{public}s endpoint sockaddr has invalid length", v90, 0xCu);
          }
LABEL_83:

LABEL_84:
          if (!v31) {
            goto LABEL_87;
          }
          goto LABEL_85;
        }
        if (type == OS_LOG_TYPE_DEFAULT)
        {
          BOOL v36 = __nwlog_obj();
          os_log_type_t v64 = buf[0];
          if (os_log_type_enabled(v36, (os_log_type_t)buf[0]))
          {
            *(_DWORD *)os_log_type_t v90 = 136446210;
            os_log_type_t v91 = "nw_endpoint_copy_address_string";
            _os_log_impl(&dword_1830D4000, v36, v64, "%{public}s endpoint sockaddr has invalid length, backtrace limit exceeded", v90, 0xCu);
          }
          goto LABEL_83;
        }
        BOOL v57 = (char *)__nw_create_backtrace_string();
        BOOL v36 = __nwlog_obj();
        os_log_type_t v58 = buf[0];
        BOOL v59 = os_log_type_enabled(v36, (os_log_type_t)buf[0]);
        if (!v57)
        {
          if (v59)
          {
            *(_DWORD *)os_log_type_t v90 = 136446210;
            os_log_type_t v91 = "nw_endpoint_copy_address_string";
            _os_log_impl(&dword_1830D4000, v36, v58, "%{public}s endpoint sockaddr has invalid length, no backtrace", v90, 0xCu);
          }
          goto LABEL_83;
        }
        if (v59)
        {
          *(_DWORD *)os_log_type_t v90 = 136446466;
          os_log_type_t v91 = "nw_endpoint_copy_address_string";
          __int16 v92 = 2082;
          v93[0] = v57;
          _os_log_impl(&dword_1830D4000, v36, v58, "%{public}s endpoint sockaddr has invalid length, dumping backtrace:%{public}s", v90, 0x16u);
        }

        free(v57);
        if (!v31)
        {
LABEL_87:
          BOOL v29 = 0;
LABEL_88:

          goto LABEL_89;
        }
LABEL_85:
        os_log_type_t v62 = (char *)v31;
LABEL_86:
        free(v62);
        goto LABEL_87;
      }
      unint64_t v50 = isa_low - 1;
      BOOL v29 = (char *)malloc_type_malloc(isa_low - 1, 0xF2B69DE5uLL);
      if (v29) {
        goto LABEL_51;
      }
      int v72 = __nwlog_obj();
      os_log_type_enabled(v72, OS_LOG_TYPE_ERROR);
      *(_DWORD *)os_log_type_t v90 = 136446466;
      os_log_type_t v91 = "strict_malloc";
      __int16 v92 = 2048;
      v93[0] = v50;
      int v73 = (void *)_os_log_send_and_compose_impl();

      double result = (char *)__nwlog_abort((uint64_t)v73);
      if (!result)
      {
        free(v73);
LABEL_51:
        memcpy(v29, (char *)&v5[29].isa + 2, v34);
        v29[v34] = 0;
        goto LABEL_88;
      }
      goto LABEL_109;
    case 2:
    case 18:
    case 30:
      int v7 = getnameinfo((const sockaddr *)&v5[29], LOBYTE(v5[29].isa), (char *)v90, 0x46u, 0, 0, 2);
      if (v7)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v8 = (id)gLogObj;
        int v9 = LOBYTE(v5[29].isa);
        uint64_t v10 = gai_strerror(v7);
        *(_DWORD *)netcore_stats_tcp_report buf = 136447235;
        unint64_t v79 = "nw_endpoint_copy_address_string";
        __int16 v80 = 1040;
        int v81 = v9;
        __int16 v82 = 2101;
        char v83 = v5 + 29;
        __int16 v84 = 1024;
        int v85 = v7;
        __int16 v86 = 2082;
        __int16 v87 = v10;
        uint64_t v11 = (const char *)_os_log_send_and_compose_impl();

        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v76 = 0;
        if (__nwlog_fault(v11, &type, &v76))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            id v12 = (id)gLogObj;
            os_log_type_t v13 = type;
            if (os_log_type_enabled(v12, type))
            {
              int v14 = LOBYTE(v5[29].isa);
              unint64_t v15 = gai_strerror(v7);
              *(_DWORD *)netcore_stats_tcp_report buf = 136447235;
              unint64_t v79 = "nw_endpoint_copy_address_string";
              __int16 v80 = 1040;
              int v81 = v14;
              __int16 v82 = 2101;
              char v83 = v5 + 29;
              __int16 v84 = 1024;
              int v85 = v7;
              __int16 v86 = 2082;
              __int16 v87 = v15;
              _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s getnameinfo(%{sensitive}.*P}): [%d] %{public}s failed", buf, 0x2Cu);
            }
          }
          else if (v76)
          {
            os_log_type_t v44 = (char *)__nw_create_backtrace_string();
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            id v12 = (id)gLogObj;
            os_log_type_t v45 = type;
            BOOL v46 = os_log_type_enabled(v12, type);
            if (v44)
            {
              if (v46)
              {
                int v75 = LOBYTE(v5[29].isa);
                os_log_type_t v47 = gai_strerror(v7);
                *(_DWORD *)netcore_stats_tcp_report buf = 136447491;
                unint64_t v79 = "nw_endpoint_copy_address_string";
                __int16 v80 = 1040;
                int v81 = v75;
                __int16 v82 = 2101;
                char v83 = v5 + 29;
                __int16 v84 = 1024;
                int v85 = v7;
                __int16 v86 = 2082;
                __int16 v87 = v47;
                __int16 v88 = 2082;
                __int16 v89 = v44;
                _os_log_impl(&dword_1830D4000, v12, v45, "%{public}s getnameinfo(%{sensitive}.*P}): [%d] %{public}s failed, dumping backtrace:%{public}s", buf, 0x36u);
              }

              free(v44);
              if (!v11) {
                goto LABEL_87;
              }
LABEL_71:
              os_log_type_t v62 = (char *)v11;
              goto LABEL_86;
            }
            if (v46)
            {
              int v60 = LOBYTE(v5[29].isa);
              char v61 = gai_strerror(v7);
              *(_DWORD *)netcore_stats_tcp_report buf = 136447235;
              unint64_t v79 = "nw_endpoint_copy_address_string";
              __int16 v80 = 1040;
              int v81 = v60;
              __int16 v82 = 2101;
              char v83 = v5 + 29;
              __int16 v84 = 1024;
              int v85 = v7;
              __int16 v86 = 2082;
              __int16 v87 = v61;
              _os_log_impl(&dword_1830D4000, v12, v45, "%{public}s getnameinfo(%{sensitive}.*P}): [%d] %{public}s failed, no backtrace", buf, 0x2Cu);
            }
          }
          else
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            id v12 = (id)gLogObj;
            os_log_type_t v54 = type;
            if (os_log_type_enabled(v12, type))
            {
              int v55 = LOBYTE(v5[29].isa);
              os_log_type_t v56 = gai_strerror(v7);
              *(_DWORD *)netcore_stats_tcp_report buf = 136447235;
              unint64_t v79 = "nw_endpoint_copy_address_string";
              __int16 v80 = 1040;
              int v81 = v55;
              __int16 v82 = 2101;
              char v83 = v5 + 29;
              __int16 v84 = 1024;
              int v85 = v7;
              __int16 v86 = 2082;
              __int16 v87 = v56;
              _os_log_impl(&dword_1830D4000, v12, v54, "%{public}s getnameinfo(%{sensitive}.*P}): [%d] %{public}s failed, backtrace limit exceeded", buf, 0x2Cu);
            }
          }
        }
        if (!v11) {
          goto LABEL_87;
        }
        goto LABEL_71;
      }
      BOOL v29 = strdup((const char *)v90);
      if (v29) {
        goto LABEL_88;
      }
      os_log_type_t v30 = __nwlog_obj();
      os_log_type_enabled(v30, OS_LOG_TYPE_ERROR);
      *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
      unint64_t v79 = "strict_strdup";
      id v31 = (const char *)_os_log_send_and_compose_impl();

      double result = (char *)__nwlog_abort((uint64_t)v31);
      if (!result) {
        goto LABEL_85;
      }
LABEL_109:
      __break(1u);
      return result;
    default:
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v38 = (id)gLogObj;
      *(_DWORD *)os_log_type_t v90 = 136446466;
      os_log_type_t v91 = "nw_endpoint_copy_address_string";
      __int16 v92 = 1024;
      LODWORD(v93[0]) = address_family;
      id v31 = (const char *)_os_log_send_and_compose_impl();

      buf[0] = 16;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      if (!__nwlog_fault(v31, buf, &type)) {
        goto LABEL_84;
      }
      if (buf[0] == 17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v39 = (id)gLogObj;
        os_log_type_t v40 = buf[0];
        if (os_log_type_enabled(v39, (os_log_type_t)buf[0]))
        {
          *(_DWORD *)os_log_type_t v90 = 136446466;
          os_log_type_t v91 = "nw_endpoint_copy_address_string";
          __int16 v92 = 1024;
          LODWORD(v93[0]) = address_family;
          _os_log_impl(&dword_1830D4000, v39, v40, "%{public}s endpoint has unknown address family %d", v90, 0x12u);
        }
      }
      else if (type)
      {
        BOOL v51 = (char *)__nw_create_backtrace_string();
        os_log_type_t v39 = __nwlog_obj();
        os_log_type_t v52 = buf[0];
        BOOL v53 = os_log_type_enabled(v39, (os_log_type_t)buf[0]);
        if (v51)
        {
          if (v53)
          {
            *(_DWORD *)os_log_type_t v90 = 136446722;
            os_log_type_t v91 = "nw_endpoint_copy_address_string";
            __int16 v92 = 1024;
            LODWORD(v93[0]) = address_family;
            WORD2(v93[0]) = 2082;
            *(void *)((char *)v93 + 6) = v51;
            _os_log_impl(&dword_1830D4000, v39, v52, "%{public}s endpoint has unknown address family %d, dumping backtrace:%{public}s", v90, 0x1Cu);
          }

          free(v51);
          if (!v31) {
            goto LABEL_87;
          }
          goto LABEL_85;
        }
        if (v53)
        {
          *(_DWORD *)os_log_type_t v90 = 136446466;
          os_log_type_t v91 = "nw_endpoint_copy_address_string";
          __int16 v92 = 1024;
          LODWORD(v93[0]) = address_family;
          _os_log_impl(&dword_1830D4000, v39, v52, "%{public}s endpoint has unknown address family %d, no backtrace", v90, 0x12u);
        }
      }
      else
      {
        os_log_type_t v39 = __nwlog_obj();
        os_log_type_t v63 = buf[0];
        if (os_log_type_enabled(v39, (os_log_type_t)buf[0]))
        {
          *(_DWORD *)os_log_type_t v90 = 136446466;
          os_log_type_t v91 = "nw_endpoint_copy_address_string";
          __int16 v92 = 1024;
          LODWORD(v93[0]) = address_family;
          _os_log_impl(&dword_1830D4000, v39, v63, "%{public}s endpoint has unknown address family %d, backtrace limit exceeded", v90, 0x12u);
        }
      }

      goto LABEL_84;
  }
}

void sub_183261174(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_endpoint_get_address_family(void *a1)
{
  *(void *)&v40[13] = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (!v1)
  {
    BOOL v26 = __nwlog_obj();
    *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
    id v38 = "nw_endpoint_get_address_family";
    double v27 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v35 = 0;
    if (__nwlog_fault(v27, &type, &v35))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        int v28 = __nwlog_obj();
        os_log_type_t v29 = type;
        if (os_log_type_enabled(v28, type))
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          id v38 = "nw_endpoint_get_address_family";
          _os_log_impl(&dword_1830D4000, v28, v29, "%{public}s called with null endpoint", buf, 0xCu);
        }
      }
      else if (v35)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        int v28 = __nwlog_obj();
        os_log_type_t v31 = type;
        BOOL v32 = os_log_type_enabled(v28, type);
        if (backtrace_string)
        {
          if (v32)
          {
            *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
            id v38 = "nw_endpoint_get_address_family";
            __int16 v39 = 2082;
            *(void *)os_log_type_t v40 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v28, v31, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_42;
        }
        if (v32)
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          id v38 = "nw_endpoint_get_address_family";
          _os_log_impl(&dword_1830D4000, v28, v31, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        int v28 = __nwlog_obj();
        os_log_type_t v33 = type;
        if (os_log_type_enabled(v28, type))
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          id v38 = "nw_endpoint_get_address_family";
          _os_log_impl(&dword_1830D4000, v28, v33, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_42:
    if (!v27) {
      goto LABEL_24;
    }
    os_log_type_t v24 = (char *)v27;
    goto LABEL_23;
  }
  uint64_t v3 = (unsigned __int8 *)v1;
  int v4 = [v3 type];

  if (v4 != 1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v6 = (id)gLogObj;
    int v7 = v3;
    int v8 = [v7 type];

    *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
    id v38 = "nw_endpoint_get_address_family";
    __int16 v39 = 1024;
    *(_DWORD *)os_log_type_t v40 = v8;
    LODWORD(v34) = 18;
    int v9 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v35 = 0;
    if (__nwlog_fault(v9, &type, &v35))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v10 = (id)gLogObj;
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          id v12 = v7;
          int v13 = objc_msgSend(v12, "type", buf, v34);

          *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
          id v38 = "nw_endpoint_get_address_family";
          __int16 v39 = 1024;
          *(_DWORD *)os_log_type_t v40 = v13;
          _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s incorrect endpoint type %u", buf, 0x12u);
        }
      }
      else if (v35)
      {
        int v14 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v10 = (id)gLogObj;
        os_log_type_t v15 = type;
        BOOL v16 = os_log_type_enabled(v10, type);
        if (v14)
        {
          if (v16)
          {
            uint64_t v17 = v7;
            int v18 = objc_msgSend(v17, "type", buf, v34);

            *(_DWORD *)netcore_stats_tcp_report buf = 136446722;
            id v38 = "nw_endpoint_get_address_family";
            __int16 v39 = 1024;
            *(_DWORD *)os_log_type_t v40 = v18;
            v40[2] = 2082;
            *(void *)&v40[3] = v14;
            _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s incorrect endpoint type %u, dumping backtrace:%{public}s", buf, 0x1Cu);
          }

          free(v14);
          if (!v9) {
            goto LABEL_24;
          }
LABEL_22:
          os_log_type_t v24 = (char *)v9;
LABEL_23:
          free(v24);
          goto LABEL_24;
        }
        if (v16)
        {
          os_log_type_t v22 = v7;
          int v23 = objc_msgSend(v22, "type", buf, v34);

          *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
          id v38 = "nw_endpoint_get_address_family";
          __int16 v39 = 1024;
          *(_DWORD *)os_log_type_t v40 = v23;
          _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s incorrect endpoint type %u, no backtrace", buf, 0x12u);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v10 = (id)gLogObj;
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v10, type))
        {
          char v20 = v7;
          int v21 = objc_msgSend(v20, "type", buf, v34);

          *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
          id v38 = "nw_endpoint_get_address_family";
          __int16 v39 = 1024;
          *(_DWORD *)os_log_type_t v40 = v21;
          _os_log_impl(&dword_1830D4000, v10, v19, "%{public}s incorrect endpoint type %u, backtrace limit exceeded", buf, 0x12u);
        }
      }
    }
    if (!v9)
    {
LABEL_24:
      uint64_t v5 = 0;
      goto LABEL_25;
    }
    goto LABEL_22;
  }
  uint64_t v5 = v3[233];
LABEL_25:

  return v5;
}

void sub_1832617F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_ip_options_get_hop_limit(void *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (nw_protocol_options_is_ip(v1))
  {
    *(void *)netcore_stats_tcp_report buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000;
    char v16 = 0;
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_ip_options_get_hop_limit_block_invoke;
    v12[3] = &unk_1E5248E90;
    void v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    uint64_t v2 = *(unsigned __int8 *)(*(void *)&buf[8] + 24);
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  int v4 = __nwlog_obj();
  *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_ip_options_get_hop_limit";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_ip_options_get_hop_limit";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_options_is_ip(options)", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_ip_options_get_hop_limit";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&void buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_ip(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_ip_options_get_hop_limit";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_ip(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_ip_options_get_hop_limit";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_options_is_ip(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
  uint64_t v2 = 0;
LABEL_3:

  return v2;
}

void sub_183261B68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

BOOL nw_ip_options_get_receive_hop_limit(void *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (nw_protocol_options_is_ip(v1))
  {
    *(void *)netcore_stats_tcp_report buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000;
    char v16 = 0;
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_ip_options_get_receive_hop_limit_block_invoke;
    v12[3] = &unk_1E5248E90;
    void v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    BOOL v2 = *(unsigned char *)(*(void *)&buf[8] + 24) != 0;
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  int v4 = __nwlog_obj();
  *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_ip_options_get_receive_hop_limit";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_ip_options_get_receive_hop_limit";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_options_is_ip(options)", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_ip_options_get_receive_hop_limit";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&void buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_ip(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_ip_options_get_receive_hop_limit";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_ip(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_ip_options_get_receive_hop_limit";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_options_is_ip(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
  BOOL v2 = 0;
LABEL_3:

  return v2;
}

void sub_183261EB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

BOOL nw_ip_options_get_calculate_receive_time(void *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (nw_protocol_options_is_ip(v1))
  {
    *(void *)netcore_stats_tcp_report buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000;
    char v16 = 0;
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_ip_options_get_calculate_receive_time_block_invoke;
    v12[3] = &unk_1E5248E90;
    void v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    BOOL v2 = *(unsigned char *)(*(void *)&buf[8] + 24) != 0;
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  int v4 = __nwlog_obj();
  *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_ip_options_get_calculate_receive_time";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_ip_options_get_calculate_receive_time";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_options_is_ip(options)", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_ip_options_get_calculate_receive_time";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&void buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_ip(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_ip_options_get_calculate_receive_time";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_ip(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_ip_options_get_calculate_receive_time";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_options_is_ip(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
  BOOL v2 = 0;
LABEL_3:

  return v2;
}

void sub_1832621F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

uint64_t nw_path_get_csum_flags(void *a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  BOOL v2 = v1;
  if (!v1)
  {
    id v6 = __nwlog_obj();
    *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
    int v18 = "nw_path_get_csum_flags";
    os_log_type_t v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v15 = 0;
    if (__nwlog_fault(v7, &type, &v15))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        int v8 = __nwlog_obj();
        os_log_type_t v9 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          int v18 = "nw_path_get_csum_flags";
          _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null path", buf, 0xCu);
        }
      }
      else if (v15)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        int v8 = __nwlog_obj();
        os_log_type_t v11 = type;
        BOOL v12 = os_log_type_enabled(v8, type);
        if (backtrace_string)
        {
          if (v12)
          {
            *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
            int v18 = "nw_path_get_csum_flags";
            __int16 v19 = 2082;
            char v20 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_21;
        }
        if (v12)
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          int v18 = "nw_path_get_csum_flags";
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null path, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        int v8 = __nwlog_obj();
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          int v18 = "nw_path_get_csum_flags";
          _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_21:
    if (v7) {
      free(v7);
    }
    goto LABEL_23;
  }
  if (!nw_path_network_is_satisfied_update_reason(v1, 0) || (direct = v2->direct) == 0)
  {
LABEL_23:
    uint64_t v5 = 0;
    goto LABEL_24;
  }
  int v4 = direct;
  uint64_t v5 = *((unsigned int *)v4 + 20);

LABEL_24:
  return v5;
}

void sub_1832624D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_protocol_ip_register_segmentation_offload_notification(nw_protocol *a1, int a2)
{
  default_input_handler = a1->default_input_handler;
  if (!a2)
  {
    if (!default_input_handler) {
      return;
    }
    callbacks = default_input_handler->callbacks;
    if (!callbacks) {
      return;
    }
    unregister_notification = (void (*)(nw_protocol *, nw_protocol *, uint64_t))callbacks->unregister_notification;
    if (!unregister_notification) {
      return;
    }
    handle = default_input_handler->handle;
    if (handle == &nw_protocol_ref_counted_handle)
    {
      BOOL v10 = default_input_handler[1].callbacks;
      if (v10) {
        default_input_handler[1].callbacks = (nw_protocol_callbacks *)((char *)&v10->add_input_handler + 1);
      }
    }
    if (a1->handle != &nw_protocol_ref_counted_handle)
    {
      unregister_notification(default_input_handler, a1, 14);
      goto LABEL_25;
    }
    BOOL v12 = a1[1].callbacks;
    if (v12) {
      a1[1].callbacks = (nw_protocol_callbacks *)((char *)&v12->add_input_handler + 1);
    }
    unregister_notification(default_input_handler, a1, 14);
LABEL_24:
    if (a1->handle == &nw_protocol_ref_counted_handle)
    {
      uint64_t v17 = a1[1].callbacks;
      if (v17)
      {
        int v18 = (nw_protocol_callbacks *)((char *)v17 - 1);
        a1[1].callbacks = v18;
        if (!v18)
        {
          __int16 v19 = *(void (***)(void))a1[1].flow_id;
          if (v19)
          {
            *(void *)a1[1].flow_id = 0;
            v19[2](v19);
            _Block_release(v19);
          }
          if (a1[1].flow_id[8])
          {
            char v20 = *(const void **)a1[1].flow_id;
            if (v20) {
              _Block_release(v20);
            }
          }
          free(a1);
        }
      }
    }
    goto LABEL_25;
  }
  if (!default_input_handler) {
    return;
  }
  int v4 = default_input_handler->callbacks;
  if (!v4) {
    return;
  }
  register_notification = (void (*)(void, void, void, void, void))v4->register_notification;
  if (!register_notification) {
    return;
  }
  handle = default_input_handler->handle;
  if (handle == &nw_protocol_ref_counted_handle)
  {
    os_log_type_t v7 = default_input_handler[1].callbacks;
    if (v7) {
      default_input_handler[1].callbacks = (nw_protocol_callbacks *)((char *)&v7->add_input_handler + 1);
    }
  }
  if (a1->handle == &nw_protocol_ref_counted_handle)
  {
    os_log_type_t v11 = a1[1].callbacks;
    if (v11) {
      a1[1].callbacks = (nw_protocol_callbacks *)((char *)&v11->add_input_handler + 1);
    }
    register_notification(default_input_handler, a1, 14, 0, 0);
    goto LABEL_24;
  }
  register_notification(default_input_handler, a1, 14, 0, 0);
LABEL_25:
  if (handle == &nw_protocol_ref_counted_handle && default_input_handler->handle == &nw_protocol_ref_counted_handle)
  {
    os_log_type_t v13 = default_input_handler[1].callbacks;
    if (v13)
    {
      int v14 = (nw_protocol_callbacks *)((char *)v13 - 1);
      default_input_handler[1].callbacks = v14;
      if (!v14)
      {
        char v15 = *(void (***)(void))default_input_handler[1].flow_id;
        if (v15)
        {
          *(void *)default_input_handler[1].flow_id = 0;
          v15[2](v15);
          _Block_release(v15);
        }
        if (default_input_handler[1].flow_id[8])
        {
          char v16 = *(const void **)default_input_handler[1].flow_id;
          if (v16) {
            _Block_release(v16);
          }
        }
        free(default_input_handler);
      }
    }
  }
}

BOOL nw_ip_options_get_corrupt_checksums(void *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (nw_protocol_options_is_ip(v1))
  {
    *(void *)netcore_stats_tcp_report buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000;
    char v16 = 0;
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_ip_options_get_corrupt_checksums_block_invoke;
    v12[3] = &unk_1E5248E90;
    void v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    BOOL v2 = *(unsigned char *)(*(void *)&buf[8] + 24) != 0;
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  int v4 = __nwlog_obj();
  *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_ip_options_get_corrupt_checksums";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_ip_options_get_corrupt_checksums";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_options_is_ip(options)", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_ip_options_get_corrupt_checksums";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&void buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_ip(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_ip_options_get_corrupt_checksums";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_ip(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_ip_options_get_corrupt_checksums";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_options_is_ip(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
  BOOL v2 = 0;
LABEL_3:

  return v2;
}

void sub_183262A1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

uint64_t nw_protocol_default_register_notification(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
    int v14 = "nw_protocol_default_register_notification";
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v11 = 0;
    if (!__nwlog_fault(v5, &type, &v11)) {
      goto LABEL_22;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (!os_log_type_enabled(v6, type)) {
        goto LABEL_22;
      }
      *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
      int v14 = "nw_protocol_default_register_notification";
      int v8 = "%{public}s called with null protocol";
    }
    else if (v11)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
          int v14 = "nw_protocol_default_register_notification";
          __int16 v15 = 2082;
          char v16 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_22;
      }
      if (!v10)
      {
LABEL_22:
        if (v5) {
          free(v5);
        }
        return 0;
      }
      *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
      int v14 = "nw_protocol_default_register_notification";
      int v8 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      id v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (!os_log_type_enabled(v6, type)) {
        goto LABEL_22;
      }
      *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
      int v14 = "nw_protocol_default_register_notification";
      int v8 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    _os_log_impl(&dword_1830D4000, v6, v7, v8, buf, 0xCu);
    goto LABEL_22;
  }
  uint64_t v1 = *(void *)(a1 + 32);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *(void *)(v1 + 24);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = *(uint64_t (**)(void))(v2 + 144);
  if (!v3) {
    return 0;
  }

  return v3();
}

id nw_parameters_copy_protocol_value(void *a1, uint64_t a2, const char *a3)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = v5;
  if (!v5)
  {
    os_log_type_t v9 = __nwlog_obj();
    *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
    os_log_type_t v30 = "nw_parameters_copy_protocol_value";
    BOOL v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v27 = 0;
    if (!__nwlog_fault(v10, &type, &v27)) {
      goto LABEL_57;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        os_log_type_t v30 = "nw_parameters_copy_protocol_value";
        _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s called with null parameters", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (!v27)
    {
      char v11 = __nwlog_obj();
      os_log_type_t v24 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        os_log_type_t v30 = "nw_parameters_copy_protocol_value";
        _os_log_impl(&dword_1830D4000, v11, v24, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_56;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    char v11 = __nwlog_obj();
    os_log_type_t v18 = type;
    BOOL v19 = os_log_type_enabled(v11, type);
    if (!backtrace_string)
    {
      if (v19)
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        os_log_type_t v30 = "nw_parameters_copy_protocol_value";
        _os_log_impl(&dword_1830D4000, v11, v18, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (v19)
    {
      *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
      os_log_type_t v30 = "nw_parameters_copy_protocol_value";
      __int16 v31 = 2082;
      BOOL v32 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v11, v18, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_38:

    free(backtrace_string);
    goto LABEL_57;
  }
  if (!a2)
  {
    char v13 = __nwlog_obj();
    *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
    os_log_type_t v30 = "nw_parameters_copy_protocol_value";
    BOOL v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v27 = 0;
    if (!__nwlog_fault(v10, &type, &v27)) {
      goto LABEL_57;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v11 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        os_log_type_t v30 = "nw_parameters_copy_protocol_value";
        _os_log_impl(&dword_1830D4000, v11, v14, "%{public}s called with null protocol_instance", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (!v27)
    {
      char v11 = __nwlog_obj();
      os_log_type_t v25 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        os_log_type_t v30 = "nw_parameters_copy_protocol_value";
        _os_log_impl(&dword_1830D4000, v11, v25, "%{public}s called with null protocol_instance, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_56;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    char v11 = __nwlog_obj();
    os_log_type_t v20 = type;
    BOOL v21 = os_log_type_enabled(v11, type);
    if (!backtrace_string)
    {
      if (v21)
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        os_log_type_t v30 = "nw_parameters_copy_protocol_value";
        _os_log_impl(&dword_1830D4000, v11, v20, "%{public}s called with null protocol_instance, no backtrace", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (v21)
    {
      *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
      os_log_type_t v30 = "nw_parameters_copy_protocol_value";
      __int16 v31 = 2082;
      BOOL v32 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v11, v20, "%{public}s called with null protocol_instance, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_38;
  }
  if (a3)
  {
    id v7 = nw_parameters_copy_protocol_value_from_level(v5, 5, a2, a3);
    if (!v7)
    {
      id v7 = nw_parameters_copy_protocol_value_from_level(v6, 4, a2, a3);
      if (!v7)
      {
        id v7 = nw_parameters_copy_protocol_value_from_level(v6, 3, a2, a3);
        if (!v7) {
          id v7 = nw_parameters_copy_protocol_value_from_level(v6, 2, a2, a3);
        }
      }
    }
    goto LABEL_8;
  }
  __int16 v15 = __nwlog_obj();
  *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
  os_log_type_t v30 = "nw_parameters_copy_protocol_value";
  BOOL v10 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v27 = 0;
  if (__nwlog_fault(v10, &type, &v27))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v11 = __nwlog_obj();
      os_log_type_t v16 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        os_log_type_t v30 = "nw_parameters_copy_protocol_value";
        _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s called with null key", buf, 0xCu);
      }
LABEL_56:

      goto LABEL_57;
    }
    if (!v27)
    {
      char v11 = __nwlog_obj();
      os_log_type_t v26 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        os_log_type_t v30 = "nw_parameters_copy_protocol_value";
        _os_log_impl(&dword_1830D4000, v11, v26, "%{public}s called with null key, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_56;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    char v11 = __nwlog_obj();
    os_log_type_t v22 = type;
    BOOL v23 = os_log_type_enabled(v11, type);
    if (!backtrace_string)
    {
      if (v23)
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        os_log_type_t v30 = "nw_parameters_copy_protocol_value";
        _os_log_impl(&dword_1830D4000, v11, v22, "%{public}s called with null key, no backtrace", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (v23)
    {
      *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
      os_log_type_t v30 = "nw_parameters_copy_protocol_value";
      __int16 v31 = 2082;
      BOOL v32 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v11, v22, "%{public}s called with null key, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_38;
  }
LABEL_57:
  if (v10) {
    free(v10);
  }
  id v7 = 0;
LABEL_8:

  return v7;
}

void sub_1832633DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id nw_parameters_copy_protocol_value_from_level(void *a1, int a2, uint64_t a3, const char *a4)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  id v7 = a1;
  int v8 = (void **)v7[19];
  os_log_type_t v9 = v8;
  if (v8)
  {
    *(void *)os_log_type_t v41 = 0;
    *(void *)&v41[8] = v41;
    *(void *)&v41[16] = 0x3032000000;
    BOOL v42 = __Block_byref_object_copy__19403;
    int v43 = __Block_byref_object_dispose__19404;
    id v44 = 0;
    switch(a2)
    {
      case 2:
        BOOL v10 = v8[6];
        if (!v10) {
          goto LABEL_18;
        }
        char v11 = v10;
        uint64_t v12 = v11[2];

        if (v12) {
          BOOL v13 = v12 == a3;
        }
        else {
          BOOL v13 = 0;
        }
        if (!v13) {
          goto LABEL_24;
        }
        uint64_t v14 = nw_parameters_copy_protocol_value_from_parameters(v9[6], a4);
        goto LABEL_17;
      case 3:
        __int16 v15 = v8[3];
        if (!v15) {
          goto LABEL_18;
        }
        os_log_type_t v16 = v15;
        uint64_t v17 = v16[2];

        if (v17) {
          BOOL v18 = v17 == a3;
        }
        else {
          BOOL v18 = 0;
        }
        if (v18)
        {
          uint64_t v14 = nw_parameters_copy_protocol_value_from_parameters(v9[3], a4);
LABEL_17:
          BOOL v19 = *(void **)(*(void *)&v41[8] + 40);
          *(void *)(*(void *)&v41[8] + 40) = v14;
        }
        goto LABEL_24;
      case 4:
        os_log_type_t v22 = (atomic_uchar *)v8[2];
        BOOL v23 = v34;
        v34[0] = MEMORY[0x1E4F143A8];
        v34[1] = 3221225472;
        os_log_type_t v24 = ___ZL44nw_parameters_copy_protocol_value_from_levelP24NWConcrete_nw_parameters19nw_protocol_level_tP11nw_protocolPKc_block_invoke_2;
        goto LABEL_23;
      case 5:
        os_log_type_t v22 = (atomic_uchar *)v8[1];
        BOOL v23 = v35;
        v35[0] = MEMORY[0x1E4F143A8];
        v35[1] = 3221225472;
        os_log_type_t v24 = ___ZL44nw_parameters_copy_protocol_value_from_levelP24NWConcrete_nw_parameters19nw_protocol_level_tP11nw_protocolPKc_block_invoke;
LABEL_23:
        v23[2] = v24;
        v23[3] = &unk_1E523D430;
        void v23[4] = v41;
        v23[5] = a3;
        v23[6] = a4;
        nw_array_apply(v22, (uint64_t)v23);
LABEL_24:
        id v21 = *(id *)(*(void *)&v41[8] + 40);
        break;
      default:
LABEL_18:
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v20 = (id)gLogObj;
        if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
          id v38 = "nw_parameters_copy_protocol_value_from_level";
          __int16 v39 = 1024;
          int v40 = a2;
          _os_log_impl(&dword_1830D4000, v20, OS_LOG_TYPE_ERROR, "%{public}s Unsupported protocol level %u", buf, 0x12u);
        }

        id v21 = 0;
        break;
    }
    _Block_object_dispose(v41, 8);

    goto LABEL_26;
  }
  os_log_type_t v26 = __nwlog_obj();
  *(_DWORD *)os_log_type_t v41 = 136446210;
  *(void *)&v41[4] = "nw_parameters_copy_protocol_value_from_level";
  char v27 = (char *)_os_log_send_and_compose_impl();

  buf[0] = 16;
  char v36 = 0;
  if (__nwlog_fault(v27, buf, &v36))
  {
    if (buf[0] == 17)
    {
      int v28 = __nwlog_obj();
      os_log_type_t v29 = buf[0];
      if (os_log_type_enabled(v28, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)os_log_type_t v41 = 136446210;
        *(void *)&v41[4] = "nw_parameters_copy_protocol_value_from_level";
        _os_log_impl(&dword_1830D4000, v28, v29, "%{public}s called with null stack", v41, 0xCu);
      }
    }
    else if (v36)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v28 = __nwlog_obj();
      os_log_type_t v31 = buf[0];
      BOOL v32 = os_log_type_enabled(v28, (os_log_type_t)buf[0]);
      if (backtrace_string)
      {
        if (v32)
        {
          *(_DWORD *)os_log_type_t v41 = 136446466;
          *(void *)&v41[4] = "nw_parameters_copy_protocol_value_from_level";
          *(_WORD *)&v41[12] = 2082;
          *(void *)&v41[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v28, v31, "%{public}s called with null stack, dumping backtrace:%{public}s", v41, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_43;
      }
      if (v32)
      {
        *(_DWORD *)os_log_type_t v41 = 136446210;
        *(void *)&v41[4] = "nw_parameters_copy_protocol_value_from_level";
        _os_log_impl(&dword_1830D4000, v28, v31, "%{public}s called with null stack, no backtrace", v41, 0xCu);
      }
    }
    else
    {
      int v28 = __nwlog_obj();
      os_log_type_t v33 = buf[0];
      if (os_log_type_enabled(v28, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)os_log_type_t v41 = 136446210;
        *(void *)&v41[4] = "nw_parameters_copy_protocol_value_from_level";
        _os_log_impl(&dword_1830D4000, v28, v33, "%{public}s called with null stack, backtrace limit exceeded", v41, 0xCu);
      }
    }
  }
LABEL_43:
  if (v27) {
    free(v27);
  }
  id v21 = 0;
LABEL_26:

  return v21;
}

void sub_1832638C0(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v3 - 128), 8);

  _Unwind_Resume(a1);
}

uint64_t nw_protocol_connect_quiet(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    return 0;
  }
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    return 0;
  }
  uint64_t v5 = 0;
  if (a2)
  {
    id v6 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 24);
    if (v6)
    {
      id v7 = *(void **)(a1 + 40);
      if (v7 == &nw_protocol_ref_counted_handle)
      {
        uint64_t v8 = *(void *)(a1 + 88);
        if (v8) {
          *(void *)(a1 + 88) = v8 + 1;
        }
      }
      if (*(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
      {
        uint64_t v9 = *(void *)(a2 + 88);
        if (v9) {
          *(void *)(a2 + 88) = v9 + 1;
        }
        uint64_t v5 = v6(a1, a2);
        if (*(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
        {
          uint64_t v11 = *(void *)(a2 + 88);
          if (v11)
          {
            uint64_t v12 = v11 - 1;
            *(void *)(a2 + 88) = v12;
            if (!v12)
            {
              BOOL v13 = *(void (***)(void))(a2 + 64);
              if (v13)
              {
                *(void *)(a2 + 64) = 0;
                v13[2](v13);
                _Block_release(v13);
              }
              if (*(unsigned char *)(a2 + 72))
              {
                uint64_t v14 = *(const void **)(a2 + 64);
                if (v14) {
                  _Block_release(v14);
                }
              }
              free((void *)a2);
            }
          }
        }
      }
      else
      {
        uint64_t v5 = v6(a1, a2);
      }
      if (v7 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
      {
        uint64_t v15 = *(void *)(a1 + 88);
        if (v15)
        {
          uint64_t v16 = v15 - 1;
          *(void *)(a1 + 88) = v16;
          if (!v16)
          {
            uint64_t v17 = *(void (***)(void))(a1 + 64);
            if (v17)
            {
              *(void *)(a1 + 64) = 0;
              v17[2](v17);
              _Block_release(v17);
            }
            if (*(unsigned char *)(a1 + 72))
            {
              BOOL v18 = *(const void **)(a1 + 64);
              if (v18) {
                _Block_release(v18);
              }
            }
            free((void *)a1);
          }
        }
      }
    }
  }
  return v5;
}

uint64_t nw_channel_connect(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v89 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
    __int16 v82 = "nw_channel_connect";
    int v49 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v79 = 0;
    if (!__nwlog_fault(v49, &type, &v79)) {
      goto LABEL_163;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      unint64_t v50 = __nwlog_obj();
      os_log_type_t v51 = type;
      if (os_log_type_enabled(v50, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        __int16 v82 = "nw_channel_connect";
        os_log_type_t v52 = "%{public}s called with null channel_protocol";
LABEL_162:
        _os_log_impl(&dword_1830D4000, v50, v51, v52, buf, 0xCu);
      }
LABEL_163:
      if (v49) {
        free(v49);
      }
      return 0;
    }
    if (!v79)
    {
      unint64_t v50 = __nwlog_obj();
      os_log_type_t v51 = type;
      if (os_log_type_enabled(v50, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        __int16 v82 = "nw_channel_connect";
        os_log_type_t v52 = "%{public}s called with null channel_protocol, backtrace limit exceeded";
        goto LABEL_162;
      }
      goto LABEL_163;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    unint64_t v50 = __nwlog_obj();
    os_log_type_t v51 = type;
    BOOL v64 = os_log_type_enabled(v50, type);
    if (!backtrace_string)
    {
      if (v64)
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        __int16 v82 = "nw_channel_connect";
        os_log_type_t v52 = "%{public}s called with null channel_protocol, no backtrace";
        goto LABEL_162;
      }
      goto LABEL_163;
    }
    if (v64)
    {
      *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
      __int16 v82 = "nw_channel_connect";
      __int16 v83 = 2082;
      __int16 v84 = backtrace_string;
      uint64_t v65 = "%{public}s called with null channel_protocol, dumping backtrace:%{public}s";
LABEL_127:
      _os_log_impl(&dword_1830D4000, v50, v51, v65, buf, 0x16u);
    }
LABEL_128:
    free(backtrace_string);
    goto LABEL_163;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
    __int16 v82 = "nw_channel_connect";
    int v49 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v79 = 0;
    if (!__nwlog_fault(v49, &type, &v79)) {
      goto LABEL_163;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      unint64_t v50 = __nwlog_obj();
      os_log_type_t v51 = type;
      if (os_log_type_enabled(v50, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        __int16 v82 = "nw_channel_connect";
        os_log_type_t v52 = "%{public}s called with null channel";
        goto LABEL_162;
      }
      goto LABEL_163;
    }
    if (!v79)
    {
      unint64_t v50 = __nwlog_obj();
      os_log_type_t v51 = type;
      if (os_log_type_enabled(v50, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        __int16 v82 = "nw_channel_connect";
        os_log_type_t v52 = "%{public}s called with null channel, backtrace limit exceeded";
        goto LABEL_162;
      }
      goto LABEL_163;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    unint64_t v50 = __nwlog_obj();
    os_log_type_t v51 = type;
    BOOL v66 = os_log_type_enabled(v50, type);
    if (!backtrace_string)
    {
      if (v66)
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        __int16 v82 = "nw_channel_connect";
        os_log_type_t v52 = "%{public}s called with null channel, no backtrace";
        goto LABEL_162;
      }
      goto LABEL_163;
    }
    if (v66)
    {
      *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
      __int16 v82 = "nw_channel_connect";
      __int16 v83 = 2082;
      __int16 v84 = backtrace_string;
      uint64_t v65 = "%{public}s called with null channel, dumping backtrace:%{public}s";
      goto LABEL_127;
    }
    goto LABEL_128;
  }
  int v4 = a2;
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
    __int16 v82 = "__nw_protocol_get_output_handler_context";
    BOOL v53 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v79 = 0;
    if (__nwlog_fault(v53, &type, &v79))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v54 = __nwlog_obj();
        os_log_type_t v55 = type;
        if (os_log_type_enabled(v54, type))
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          __int16 v82 = "__nw_protocol_get_output_handler_context";
          os_log_type_t v56 = "%{public}s called with null protocol";
LABEL_168:
          _os_log_impl(&dword_1830D4000, v54, v55, v56, buf, 0xCu);
        }
      }
      else if (v79)
      {
        os_log_type_t v67 = (char *)__nw_create_backtrace_string();
        os_log_type_t v54 = __nwlog_obj();
        os_log_type_t v55 = type;
        BOOL v68 = os_log_type_enabled(v54, type);
        if (v67)
        {
          if (v68)
          {
            *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
            __int16 v82 = "__nw_protocol_get_output_handler_context";
            __int16 v83 = 2082;
            __int16 v84 = v67;
            _os_log_impl(&dword_1830D4000, v54, v55, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v67);
          goto LABEL_169;
        }
        if (v68)
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          __int16 v82 = "__nw_protocol_get_output_handler_context";
          os_log_type_t v56 = "%{public}s called with null protocol, no backtrace";
          goto LABEL_168;
        }
      }
      else
      {
        os_log_type_t v54 = __nwlog_obj();
        os_log_type_t v55 = type;
        if (os_log_type_enabled(v54, type))
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          __int16 v82 = "__nw_protocol_get_output_handler_context";
          os_log_type_t v56 = "%{public}s called with null protocol, backtrace limit exceeded";
          goto LABEL_168;
        }
      }
    }
LABEL_169:
    if (v53) {
      free(v53);
    }
    id v7 = 0;
    BOOL v6 = 1;
    goto LABEL_19;
  }
  output_handler_context = (char *)a2->output_handler_context;
  BOOL v6 = output_handler_context == 0;
  if (output_handler_context)
  {
    id v7 = output_handler_context + 32;
    output_handler_context[153] |= 8u;
    callbacks = a2->callbacks;
    if (!callbacks) {
      goto LABEL_19;
    }
  }
  else
  {
    id v7 = 0;
    callbacks = a2->callbacks;
    if (!callbacks) {
      goto LABEL_19;
    }
  }
  connected = (void (*)(nw_protocol *, nw_protocol *))callbacks->connected;
  if (connected)
  {
    BOOL v10 = a2->handle;
    if (v10 == &nw_protocol_ref_counted_handle)
    {
      uint64_t v11 = a2[1].callbacks;
      if (v11) {
        a2[1].callbacks = (nw_protocol_callbacks *)((char *)&v11->add_input_handler + 1);
      }
    }
    if (a1->handle == &nw_protocol_ref_counted_handle)
    {
      uint64_t v12 = a1[1].callbacks;
      if (v12) {
        a1[1].callbacks = (nw_protocol_callbacks *)((char *)&v12->add_input_handler + 1);
      }
      connected(a2, a1);
      if (a1->handle == &nw_protocol_ref_counted_handle)
      {
        os_log_type_t v24 = a1[1].callbacks;
        if (v24)
        {
          os_log_type_t v25 = (nw_protocol_callbacks *)((char *)v24 - 1);
          a1[1].callbacks = v25;
          if (!v25)
          {
            os_log_type_t v26 = *(void (***)(void))a1[1].flow_id;
            if (v26)
            {
              *(void *)a1[1].flow_id = 0;
              v26[2](v26);
              _Block_release(v26);
            }
            if (a1[1].flow_id[8])
            {
              char v27 = *(const void **)a1[1].flow_id;
              if (v27) {
                _Block_release(v27);
              }
            }
            free(a1);
          }
        }
      }
    }
    else
    {
      connected(a2, a1);
    }
    if (v10 == &nw_protocol_ref_counted_handle && v4->handle == &nw_protocol_ref_counted_handle)
    {
      int v28 = v4[1].callbacks;
      if (v28)
      {
        os_log_type_t v29 = (nw_protocol_callbacks *)((char *)v28 - 1);
        v4[1].callbacks = v29;
        if (!v29)
        {
          os_log_type_t v30 = *(void (***)(void))v4[1].flow_id;
          if (v30)
          {
            *(void *)v4[1].flow_id = 0;
            v30[2](v30);
            _Block_release(v30);
          }
          if (v4[1].flow_id[8])
          {
            os_log_type_t v31 = *(const void **)v4[1].flow_id;
            if (v31) {
              _Block_release(v31);
            }
          }
          free(v4);
        }
      }
    }
  }
LABEL_19:
  uint64_t result = 1;
  if (!v6 && v7 && (handle[222] & 0x80) != 0 && *v7)
  {
    if (v4)
    {
      uint64_t v14 = v4->handle;
      if (v14 == &nw_protocol_ref_counted_handle)
      {
        uint64_t v15 = v4[1].callbacks;
        if (v15) {
          v4[1].callbacks = (nw_protocol_callbacks *)((char *)&v15->add_input_handler + 1);
        }
      }
      uint64_t v16 = a1->handle;
      if (v16 == &nw_protocol_ref_counted_handle)
      {
        uint64_t v17 = a1[1].callbacks;
        if (v17) {
          a1[1].callbacks = (nw_protocol_callbacks *)((char *)&v17->add_input_handler + 1);
        }
      }
      BOOL v18 = v4->callbacks;
      if (v18)
      {
        input_available = (void (*)(nw_protocol *, nw_protocol *))v18->input_available;
        if (input_available)
        {
          input_available(v4, a1);
LABEL_33:
          if (v16 == &nw_protocol_ref_counted_handle && a1->handle == &nw_protocol_ref_counted_handle)
          {
            os_log_type_t v33 = a1[1].callbacks;
            if (v33)
            {
              uint64_t v34 = (nw_protocol_callbacks *)((char *)v33 - 1);
              a1[1].callbacks = v34;
              if (!v34)
              {
                char v35 = *(void (***)(void))a1[1].flow_id;
                if (v35)
                {
                  *(void *)a1[1].flow_id = 0;
                  v35[2](v35);
                  _Block_release(v35);
                }
                if (a1[1].flow_id[8])
                {
                  char v36 = *(const void **)a1[1].flow_id;
                  if (v36) {
                    _Block_release(v36);
                  }
                }
                free(a1);
              }
            }
          }
          if (v14 == &nw_protocol_ref_counted_handle && v4->handle == &nw_protocol_ref_counted_handle)
          {
            os_log_type_t v37 = v4[1].callbacks;
            if (v37)
            {
              id v38 = (nw_protocol_callbacks *)((char *)v37 - 1);
              v4[1].callbacks = v38;
              if (!v38)
              {
                __int16 v39 = *(void (***)(void))v4[1].flow_id;
                if (v39)
                {
                  *(void *)v4[1].flow_id = 0;
                  v39[2](v39);
                  _Block_release(v39);
                }
                if (v4[1].flow_id[8])
                {
                  int v40 = *(const void **)v4[1].flow_id;
                  if (v40) {
                    _Block_release(v40);
                  }
                }
                free(v4);
              }
            }
          }
          os_log_type_t v20 = v4->callbacks;
          if (!v20) {
            return 1;
          }
          input_flush = (void (*)(nw_protocol *, nw_protocol *))v20->input_flush;
          if (!input_flush) {
            return 1;
          }
          os_log_type_t v22 = v4->handle;
          if (v22 == &nw_protocol_ref_counted_handle)
          {
            BOOL v23 = v4[1].callbacks;
            if (v23) {
              v4[1].callbacks = (nw_protocol_callbacks *)((char *)&v23->add_input_handler + 1);
            }
          }
          if (a1->handle == &nw_protocol_ref_counted_handle)
          {
            BOOL v32 = a1[1].callbacks;
            if (v32) {
              a1[1].callbacks = (nw_protocol_callbacks *)((char *)&v32->add_input_handler + 1);
            }
            input_flush(v4, a1);
            if (a1->handle == &nw_protocol_ref_counted_handle)
            {
              os_log_type_t v41 = a1[1].callbacks;
              if (v41)
              {
                BOOL v42 = (nw_protocol_callbacks *)((char *)v41 - 1);
                a1[1].callbacks = v42;
                if (!v42)
                {
                  int v43 = *(void (***)(void))a1[1].flow_id;
                  if (v43)
                  {
                    *(void *)a1[1].flow_id = 0;
                    v43[2](v43);
                    _Block_release(v43);
                  }
                  if (a1[1].flow_id[8])
                  {
                    id v44 = *(const void **)a1[1].flow_id;
                    if (v44) {
                      _Block_release(v44);
                    }
                  }
                  free(a1);
                }
              }
            }
          }
          else
          {
            input_flush(v4, a1);
          }
          if (v22 != &nw_protocol_ref_counted_handle) {
            return 1;
          }
          if (v4->handle != &nw_protocol_ref_counted_handle) {
            return 1;
          }
          uint64_t v45 = v4[1].callbacks;
          if (!v45) {
            return 1;
          }
          BOOL v46 = (nw_protocol_callbacks *)((char *)v45 - 1);
          v4[1].callbacks = v46;
          if (v46) {
            return 1;
          }
          os_log_type_t v47 = *(void (***)(void))v4[1].flow_id;
          if (v47)
          {
            *(void *)v4[1].flow_id = 0;
            v47[2](v47);
            _Block_release(v47);
          }
          if (v4[1].flow_id[8])
          {
            BOOL v48 = *(const void **)v4[1].flow_id;
            if (v48) {
              _Block_release(v48);
            }
          }
          goto LABEL_98;
        }
      }
      __nwlog_obj();
      name = v4->identifier->name;
      *(_DWORD *)netcore_stats_tcp_report buf = 136446722;
      __int16 v82 = "__nw_protocol_input_available";
      if (!name) {
        name = "invalid";
      }
      __int16 v83 = 2082;
      __int16 v84 = (void *)name;
      __int16 v85 = 2048;
      __int16 v86 = v4;
      os_log_type_t v58 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v79 = 0;
      if (__nwlog_fault(v58, &type, &v79))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          BOOL v59 = __nwlog_obj();
          os_log_type_t v60 = type;
          if (!os_log_type_enabled(v59, type)) {
            goto LABEL_181;
          }
          char v61 = v4->identifier->name;
          if (!v61) {
            char v61 = "invalid";
          }
          *(_DWORD *)netcore_stats_tcp_report buf = 136446722;
          __int16 v82 = "__nw_protocol_input_available";
          __int16 v83 = 2082;
          __int16 v84 = (void *)v61;
          __int16 v85 = 2048;
          __int16 v86 = v4;
          os_log_type_t v62 = "%{public}s protocol %{public}s (%p) has invalid input_available callback";
          goto LABEL_180;
        }
        if (!v79)
        {
          BOOL v59 = __nwlog_obj();
          os_log_type_t v60 = type;
          if (!os_log_type_enabled(v59, type)) {
            goto LABEL_181;
          }
          uint64_t v77 = v4->identifier->name;
          if (!v77) {
            uint64_t v77 = "invalid";
          }
          *(_DWORD *)netcore_stats_tcp_report buf = 136446722;
          __int16 v82 = "__nw_protocol_input_available";
          __int16 v83 = 2082;
          __int16 v84 = (void *)v77;
          __int16 v85 = 2048;
          __int16 v86 = v4;
          os_log_type_t v62 = "%{public}s protocol %{public}s (%p) has invalid input_available callback, backtrace limit exceeded";
          goto LABEL_180;
        }
        int v72 = (char *)__nw_create_backtrace_string();
        BOOL v59 = __nwlog_obj();
        os_log_type_t v60 = type;
        BOOL v73 = os_log_type_enabled(v59, type);
        if (v72)
        {
          if (v73)
          {
            if (v4->identifier) {
              uint64_t v74 = v4->identifier->name;
            }
            else {
              uint64_t v74 = "invalid";
            }
            *(_DWORD *)netcore_stats_tcp_report buf = 136446978;
            __int16 v82 = "__nw_protocol_input_available";
            __int16 v83 = 2082;
            __int16 v84 = (void *)v74;
            __int16 v85 = 2048;
            __int16 v86 = v4;
            __int16 v87 = 2082;
            __int16 v88 = v72;
            _os_log_impl(&dword_1830D4000, v59, v60, "%{public}s protocol %{public}s (%p) has invalid input_available callback, dumping backtrace:%{public}s", buf, 0x2Au);
          }
          free(v72);
          goto LABEL_181;
        }
        if (v73)
        {
          uint64_t v78 = v4->identifier->name;
          if (!v78) {
            uint64_t v78 = "invalid";
          }
          *(_DWORD *)netcore_stats_tcp_report buf = 136446722;
          __int16 v82 = "__nw_protocol_input_available";
          __int16 v83 = 2082;
          __int16 v84 = (void *)v78;
          __int16 v85 = 2048;
          __int16 v86 = v4;
          os_log_type_t v62 = "%{public}s protocol %{public}s (%p) has invalid input_available callback, no backtrace";
LABEL_180:
          _os_log_impl(&dword_1830D4000, v59, v60, v62, buf, 0x20u);
        }
      }
LABEL_181:
      if (v58) {
        free(v58);
      }
      goto LABEL_33;
    }
    __nwlog_obj();
    *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
    __int16 v82 = "__nw_protocol_input_available";
    int v4 = (nw_protocol *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v79 = 0;
    if (__nwlog_fault((const char *)v4, &type, &v79))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v69 = __nwlog_obj();
        os_log_type_t v70 = type;
        if (!os_log_type_enabled(v69, type)) {
          goto LABEL_188;
        }
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        __int16 v82 = "__nw_protocol_input_available";
        os_log_type_t v71 = "%{public}s called with null protocol";
        goto LABEL_187;
      }
      if (!v79)
      {
        os_log_type_t v69 = __nwlog_obj();
        os_log_type_t v70 = type;
        if (!os_log_type_enabled(v69, type)) {
          goto LABEL_188;
        }
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        __int16 v82 = "__nw_protocol_input_available";
        os_log_type_t v71 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_187;
      }
      int v75 = (char *)__nw_create_backtrace_string();
      os_log_type_t v69 = __nwlog_obj();
      os_log_type_t v70 = type;
      BOOL v76 = os_log_type_enabled(v69, type);
      if (v75)
      {
        if (v76)
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
          __int16 v82 = "__nw_protocol_input_available";
          __int16 v83 = 2082;
          __int16 v84 = v75;
          _os_log_impl(&dword_1830D4000, v69, v70, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v75);
        if (!v4) {
          return 1;
        }
LABEL_98:
        free(v4);
        return 1;
      }
      if (v76)
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        __int16 v82 = "__nw_protocol_input_available";
        os_log_type_t v71 = "%{public}s called with null protocol, no backtrace";
LABEL_187:
        _os_log_impl(&dword_1830D4000, v69, v70, v71, buf, 0xCu);
      }
    }
LABEL_188:
    if (!v4) {
      return 1;
    }
    goto LABEL_98;
  }
  return result;
}

void nw_protocol_ipv4_connected(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v94 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_ipv4_connected";
    os_log_type_t v55 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v83 = 0;
    if (!__nwlog_fault(v55, &type, &v83)) {
      goto LABEL_171;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v56 = __nwlog_obj();
      os_log_type_t v57 = type;
      if (!os_log_type_enabled(v56, type)) {
        goto LABEL_171;
      }
      *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_ipv4_connected";
      os_log_type_t v58 = "%{public}s called with null protocol";
      goto LABEL_170;
    }
    if (!v83)
    {
      os_log_type_t v56 = __nwlog_obj();
      os_log_type_t v57 = type;
      if (!os_log_type_enabled(v56, type)) {
        goto LABEL_171;
      }
      *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_ipv4_connected";
      os_log_type_t v58 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_170;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v56 = __nwlog_obj();
    os_log_type_t v57 = type;
    BOOL v67 = os_log_type_enabled(v56, type);
    if (!backtrace_string)
    {
      if (!v67) {
        goto LABEL_171;
      }
      *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_ipv4_connected";
      os_log_type_t v58 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_170;
    }
    if (v67)
    {
      *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_protocol_ipv4_connected";
      __int16 v86 = 2082;
      __int16 v87 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v56, v57, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(backtrace_string);
LABEL_171:
    if (!v55) {
      return;
    }
    goto LABEL_172;
  }
  if (a1->handle != &nw_protocol_ref_counted_handle)
  {
    __nwlog_obj();
    *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_ipv4_connected";
    os_log_type_t v55 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v83 = 0;
    if (!__nwlog_fault(v55, &type, &v83)) {
      goto LABEL_171;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v56 = __nwlog_obj();
      os_log_type_t v57 = type;
      if (!os_log_type_enabled(v56, type)) {
        goto LABEL_171;
      }
      *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_ipv4_connected";
      os_log_type_t v58 = "%{public}s called with null ipv4";
      goto LABEL_170;
    }
    if (!v83)
    {
      os_log_type_t v56 = __nwlog_obj();
      os_log_type_t v57 = type;
      if (!os_log_type_enabled(v56, type)) {
        goto LABEL_171;
      }
      *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_ipv4_connected";
      os_log_type_t v58 = "%{public}s called with null ipv4, backtrace limit exceeded";
      goto LABEL_170;
    }
    BOOL v68 = (char *)__nw_create_backtrace_string();
    os_log_type_t v56 = __nwlog_obj();
    os_log_type_t v57 = type;
    BOOL v69 = os_log_type_enabled(v56, type);
    if (v68)
    {
      if (v69)
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_ipv4_connected";
        __int16 v86 = 2082;
        __int16 v87 = v68;
        _os_log_impl(&dword_1830D4000, v56, v57, "%{public}s called with null ipv4, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v68);
      if (!v55) {
        return;
      }
LABEL_172:
      BOOL v42 = (nw_protocol *)v55;
LABEL_88:
      free(v42);
      return;
    }
    if (v69)
    {
      *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_ipv4_connected";
      os_log_type_t v58 = "%{public}s called with null ipv4, no backtrace";
LABEL_170:
      _os_log_impl(&dword_1830D4000, v56, v57, v58, buf, 0xCu);
      goto LABEL_171;
    }
    goto LABEL_171;
  }
  if (((uint64_t)a1[3].handle & 1) == 0)
  {
    if (gLogDatapath)
    {
      BOOL v59 = __nwlog_obj();
      if (os_log_type_enabled(v59, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446978;
        *(void *)&uint8_t buf[4] = "nw_protocol_ipv4_connected";
        __int16 v86 = 2082;
        __int16 v87 = (char *)&a1[3].handle + 1;
        __int16 v88 = 2080;
        uint64_t v89 = " ";
        __int16 v90 = 2048;
        p_output_handler = (char *)&a1[1].output_handler;
        _os_log_impl(&dword_1830D4000, v59, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s%p Got a connected event from the lower layer", buf, 0x2Au);
      }
    }
  }
  default_input_handler = a1->default_input_handler;
  if (a1->output_handler != a2)
  {
    if (!default_input_handler) {
      return;
    }
    callbacks = default_input_handler->callbacks;
    if (!callbacks) {
      return;
    }
    if (!a2) {
      return;
    }
    connected = (void (*)(nw_protocol *, nw_protocol *))callbacks->connected;
    if (!connected) {
      return;
    }
    handle = default_input_handler->handle;
    if (handle == &nw_protocol_ref_counted_handle)
    {
      uint64_t v8 = default_input_handler[1].callbacks;
      if (v8) {
        default_input_handler[1].callbacks = (nw_protocol_callbacks *)((char *)&v8->add_input_handler + 1);
      }
    }
    if (a2->handle != &nw_protocol_ref_counted_handle)
    {
      connected(default_input_handler, a2);
      goto LABEL_77;
    }
    BOOL v23 = a2[1].callbacks;
    if (v23) {
      a2[1].callbacks = (nw_protocol_callbacks *)((char *)&v23->add_input_handler + 1);
    }
    connected(default_input_handler, a2);
    if (a2->handle == &nw_protocol_ref_counted_handle)
    {
      os_log_type_t v24 = a2[1].callbacks;
      if (v24)
      {
        os_log_type_t v25 = (nw_protocol_callbacks *)((char *)v24 - 1);
        a2[1].callbacks = v25;
        if (!v25)
        {
          os_log_type_t v26 = *(void (***)(void))a2[1].flow_id;
          if (v26)
          {
            *(void *)a2[1].flow_id = 0;
            v26[2](v26);
            _Block_release(v26);
          }
          if (a2[1].flow_id[8])
          {
            char v27 = *(const void **)a2[1].flow_id;
            if (v27) {
              _Block_release(v27);
            }
          }
          int v28 = a2;
LABEL_76:
          free(v28);
          goto LABEL_77;
        }
      }
    }
    goto LABEL_77;
  }
  if (!default_input_handler)
  {
    __nwlog_obj();
    *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
    *(void *)&uint8_t buf[4] = "__nw_protocol_get_parameters";
    os_log_type_t v70 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v83 = 0;
    if (__nwlog_fault(v70, &type, &v83))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v71 = __nwlog_obj();
        os_log_type_t v72 = type;
        if (os_log_type_enabled(v71, type))
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          *(void *)&uint8_t buf[4] = "__nw_protocol_get_parameters";
          BOOL v73 = "%{public}s called with null protocol";
LABEL_188:
          _os_log_impl(&dword_1830D4000, v71, v72, v73, buf, 0xCu);
        }
      }
      else if (v83)
      {
        uint64_t v77 = (char *)__nw_create_backtrace_string();
        os_log_type_t v71 = __nwlog_obj();
        os_log_type_t v72 = type;
        BOOL v78 = os_log_type_enabled(v71, type);
        if (v77)
        {
          if (v78)
          {
            *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
            *(void *)&uint8_t buf[4] = "__nw_protocol_get_parameters";
            __int16 v86 = 2082;
            __int16 v87 = v77;
            _os_log_impl(&dword_1830D4000, v71, v72, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v77);
          goto LABEL_189;
        }
        if (v78)
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          *(void *)&uint8_t buf[4] = "__nw_protocol_get_parameters";
          BOOL v73 = "%{public}s called with null protocol, no backtrace";
          goto LABEL_188;
        }
      }
      else
      {
        os_log_type_t v71 = __nwlog_obj();
        os_log_type_t v72 = type;
        if (os_log_type_enabled(v71, type))
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          *(void *)&uint8_t buf[4] = "__nw_protocol_get_parameters";
          BOOL v73 = "%{public}s called with null protocol, backtrace limit exceeded";
          goto LABEL_188;
        }
      }
    }
LABEL_189:
    if (v70) {
      free(v70);
    }
    BOOL v13 = 0;
    goto LABEL_23;
  }
  uint64_t v9 = default_input_handler->handle;
  if (v9 == &nw_protocol_ref_counted_handle)
  {
    BOOL v10 = default_input_handler[1].callbacks;
    if (v10) {
      default_input_handler[1].callbacks = (nw_protocol_callbacks *)((char *)&v10->add_input_handler + 1);
    }
  }
  uint64_t v11 = default_input_handler->callbacks;
  if (v11)
  {
    get_parameters = (uint64_t (*)(nw_protocol *))v11->get_parameters;
    if (get_parameters)
    {
      BOOL v13 = (void *)get_parameters(default_input_handler);
      if (v9 != &nw_protocol_ref_counted_handle) {
        goto LABEL_23;
      }
      goto LABEL_22;
    }
  }
  __nwlog_obj();
  name = default_input_handler->identifier->name;
  *(_DWORD *)netcore_stats_tcp_report buf = 136446722;
  *(void *)&uint8_t buf[4] = "__nw_protocol_get_parameters";
  if (!name) {
    name = "invalid";
  }
  __int16 v86 = 2082;
  __int16 v87 = (char *)name;
  __int16 v88 = 2048;
  uint64_t v89 = (const char *)default_input_handler;
  char v61 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v83 = 0;
  if (!__nwlog_fault(v61, &type, &v83)) {
    goto LABEL_180;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    os_log_type_t v62 = __nwlog_obj();
    os_log_type_t v63 = type;
    if (!os_log_type_enabled(v62, type)) {
      goto LABEL_180;
    }
    BOOL v64 = default_input_handler->identifier->name;
    if (!v64) {
      BOOL v64 = "invalid";
    }
    *(_DWORD *)netcore_stats_tcp_report buf = 136446722;
    *(void *)&uint8_t buf[4] = "__nw_protocol_get_parameters";
    __int16 v86 = 2082;
    __int16 v87 = (char *)v64;
    __int16 v88 = 2048;
    uint64_t v89 = (const char *)default_input_handler;
    uint64_t v65 = "%{public}s protocol %{public}s (%p) has invalid get_parameters callback";
LABEL_179:
    _os_log_impl(&dword_1830D4000, v62, v63, v65, buf, 0x20u);
    goto LABEL_180;
  }
  if (!v83)
  {
    os_log_type_t v62 = __nwlog_obj();
    os_log_type_t v63 = type;
    if (!os_log_type_enabled(v62, type)) {
      goto LABEL_180;
    }
    char v79 = default_input_handler->identifier->name;
    if (!v79) {
      char v79 = "invalid";
    }
    *(_DWORD *)netcore_stats_tcp_report buf = 136446722;
    *(void *)&uint8_t buf[4] = "__nw_protocol_get_parameters";
    __int16 v86 = 2082;
    __int16 v87 = (char *)v79;
    __int16 v88 = 2048;
    uint64_t v89 = (const char *)default_input_handler;
    uint64_t v65 = "%{public}s protocol %{public}s (%p) has invalid get_parameters callback, backtrace limit exceeded";
    goto LABEL_179;
  }
  __int16 v82 = v9;
  uint64_t v74 = (char *)__nw_create_backtrace_string();
  os_log_type_t v62 = __nwlog_obj();
  os_log_type_t v63 = type;
  BOOL v75 = os_log_type_enabled(v62, type);
  if (!v74)
  {
    uint64_t v9 = v82;
    if (!v75) {
      goto LABEL_180;
    }
    int v81 = default_input_handler->identifier->name;
    if (!v81) {
      int v81 = "invalid";
    }
    *(_DWORD *)netcore_stats_tcp_report buf = 136446722;
    *(void *)&uint8_t buf[4] = "__nw_protocol_get_parameters";
    __int16 v86 = 2082;
    __int16 v87 = (char *)v81;
    __int16 v88 = 2048;
    uint64_t v89 = (const char *)default_input_handler;
    uint64_t v65 = "%{public}s protocol %{public}s (%p) has invalid get_parameters callback, no backtrace";
    goto LABEL_179;
  }
  if (v75)
  {
    BOOL v76 = default_input_handler->identifier->name;
    if (!v76) {
      BOOL v76 = "invalid";
    }
    *(_DWORD *)netcore_stats_tcp_report buf = 136446978;
    *(void *)&uint8_t buf[4] = "__nw_protocol_get_parameters";
    __int16 v86 = 2082;
    __int16 v87 = (char *)v76;
    __int16 v88 = 2048;
    uint64_t v89 = (const char *)default_input_handler;
    __int16 v90 = 2082;
    p_output_handler = v74;
    _os_log_impl(&dword_1830D4000, v62, v63, "%{public}s protocol %{public}s (%p) has invalid get_parameters callback, dumping backtrace:%{public}s", buf, 0x2Au);
  }
  free(v74);
  uint64_t v9 = v82;
LABEL_180:
  if (v61) {
    free(v61);
  }
  BOOL v13 = 0;
  if (v9 == &nw_protocol_ref_counted_handle)
  {
LABEL_22:
    if (default_input_handler->handle == &nw_protocol_ref_counted_handle)
    {
      int v43 = default_input_handler[1].callbacks;
      if (v43)
      {
        id v44 = (nw_protocol_callbacks *)((char *)v43 - 1);
        default_input_handler[1].callbacks = v44;
        if (!v44)
        {
          uint64_t v45 = *(void (***)(void))default_input_handler[1].flow_id;
          if (v45)
          {
            *(void *)default_input_handler[1].flow_id = 0;
            v45[2](v45);
            _Block_release(v45);
          }
          if (default_input_handler[1].flow_id[8])
          {
            BOOL v46 = *(const void **)default_input_handler[1].flow_id;
            if (v46) {
              _Block_release(v46);
            }
          }
          free(default_input_handler);
        }
      }
    }
  }
LABEL_23:
  id v14 = nw_parameters_copy_context(v13);
  id v15 = nw_path_copy_flow_registration(v14, (uint64_t)a1);
  if (v15)
  {
    uint64_t v16 = v15;
    stats_region = (nw_protocol_identifier *)nw_path_flow_registration_get_stats_region(v15, (uint64_t)a1->identifier->name);
    a1[2].identifier = stats_region;
    if (!stats_region)
    {
      if (((uint64_t)a1[3].handle & 1) == 0)
      {
        if (gLogDatapath)
        {
          __int16 v80 = __nwlog_obj();
          if (os_log_type_enabled(v80, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)netcore_stats_tcp_report buf = 136447234;
            *(void *)&uint8_t buf[4] = "nw_protocol_ipv4_connected";
            __int16 v86 = 2082;
            __int16 v87 = (char *)&a1[3].handle + 1;
            __int16 v88 = 2080;
            uint64_t v89 = " ";
            __int16 v90 = 2048;
            p_output_handler = (char *)&a1[1].output_handler;
            __int16 v92 = 2048;
            uint64_t v93 = &g_ip_stats;
            _os_log_impl(&dword_1830D4000, v80, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s%p ipv4->ip_stats is NULL setting to global %p", buf, 0x34u);
          }
        }
      }
      a1[2].identifier = (nw_protocol_identifier *)&g_ip_stats;
    }
    os_release(v16);
  }
  if (v14) {
    os_release(v14);
  }
  *(void *)netcore_stats_tcp_report buf = 0;
  output_handler = a1->output_handler;
  if (output_handler)
  {
    BOOL v19 = output_handler->callbacks;
    if (v19)
    {
      get_message_properties = (void (*)(nw_protocol *, nw_protocol *, unsigned char *))v19->get_message_properties;
      if (get_message_properties)
      {
        id v21 = output_handler->handle;
        if (v21 == &nw_protocol_ref_counted_handle)
        {
          os_log_type_t v22 = output_handler[1].callbacks;
          if (v22) {
            output_handler[1].callbacks = (nw_protocol_callbacks *)((char *)&v22->add_input_handler + 1);
          }
        }
        if (a1->handle == &nw_protocol_ref_counted_handle)
        {
          os_log_type_t v29 = a1[1].callbacks;
          if (v29) {
            a1[1].callbacks = (nw_protocol_callbacks *)((char *)&v29->add_input_handler + 1);
          }
          get_message_properties(output_handler, a1, buf);
          if (a1->handle == &nw_protocol_ref_counted_handle)
          {
            os_log_type_t v47 = a1[1].callbacks;
            if (v47)
            {
              BOOL v48 = (nw_protocol_callbacks *)((char *)v47 - 1);
              a1[1].callbacks = v48;
              if (!v48)
              {
                int v49 = *(void (***)(void))a1[1].flow_id;
                if (v49)
                {
                  *(void *)a1[1].flow_id = 0;
                  v49[2](v49);
                  _Block_release(v49);
                }
                if (a1[1].flow_id[8])
                {
                  unint64_t v50 = *(const void **)a1[1].flow_id;
                  if (v50) {
                    _Block_release(v50);
                  }
                }
                free(a1);
              }
            }
          }
        }
        else
        {
          get_message_properties(output_handler, a1, buf);
        }
        if (v21 == &nw_protocol_ref_counted_handle && output_handler->handle == &nw_protocol_ref_counted_handle)
        {
          os_log_type_t v51 = output_handler[1].callbacks;
          if (v51)
          {
            os_log_type_t v52 = (nw_protocol_callbacks *)((char *)v51 - 1);
            output_handler[1].callbacks = v52;
            if (!v52)
            {
              BOOL v53 = *(void (***)(void))output_handler[1].flow_id;
              if (v53)
              {
                *(void *)output_handler[1].flow_id = 0;
                v53[2](v53);
                _Block_release(v53);
              }
              if (output_handler[1].flow_id[8])
              {
                os_log_type_t v54 = *(const void **)output_handler[1].flow_id;
                if (v54) {
                  _Block_release(v54);
                }
              }
              free(output_handler);
            }
          }
        }
        if ((*(_DWORD *)buf - 1) <= 0xFFFFFFFD) {
          LODWORD(a1[3].callbacks) = *(_DWORD *)buf;
        }
      }
    }
  }
  default_input_handler = a1->default_input_handler;
  if (!default_input_handler) {
    return;
  }
  os_log_type_t v30 = default_input_handler->callbacks;
  if (!v30) {
    return;
  }
  os_log_type_t v31 = (void (*)(nw_protocol *, nw_protocol *))v30->connected;
  if (!v31) {
    return;
  }
  handle = default_input_handler->handle;
  if (handle == &nw_protocol_ref_counted_handle)
  {
    BOOL v32 = default_input_handler[1].callbacks;
    if (v32) {
      default_input_handler[1].callbacks = (nw_protocol_callbacks *)((char *)&v32->add_input_handler + 1);
    }
  }
  if (a1->handle != &nw_protocol_ref_counted_handle)
  {
    v31(default_input_handler, a1);
    goto LABEL_77;
  }
  os_log_type_t v33 = a1[1].callbacks;
  if (v33) {
    a1[1].callbacks = (nw_protocol_callbacks *)((char *)&v33->add_input_handler + 1);
  }
  v31(default_input_handler, a1);
  if (a1->handle == &nw_protocol_ref_counted_handle)
  {
    uint64_t v34 = a1[1].callbacks;
    if (v34)
    {
      char v35 = (nw_protocol_callbacks *)((char *)v34 - 1);
      a1[1].callbacks = v35;
      if (!v35)
      {
        char v36 = *(void (***)(void))a1[1].flow_id;
        if (v36)
        {
          *(void *)a1[1].flow_id = 0;
          v36[2](v36);
          _Block_release(v36);
        }
        if (a1[1].flow_id[8])
        {
          os_log_type_t v37 = *(const void **)a1[1].flow_id;
          if (v37) {
            _Block_release(v37);
          }
        }
        int v28 = a1;
        goto LABEL_76;
      }
    }
  }
LABEL_77:
  if (handle == &nw_protocol_ref_counted_handle && default_input_handler->handle == &nw_protocol_ref_counted_handle)
  {
    id v38 = default_input_handler[1].callbacks;
    if (v38)
    {
      __int16 v39 = (nw_protocol_callbacks *)((char *)v38 - 1);
      default_input_handler[1].callbacks = v39;
      if (!v39)
      {
        int v40 = *(void (***)(void))default_input_handler[1].flow_id;
        if (v40)
        {
          *(void *)default_input_handler[1].flow_id = 0;
          v40[2](v40);
          _Block_release(v40);
        }
        if (default_input_handler[1].flow_id[8])
        {
          os_log_type_t v41 = *(const void **)default_input_handler[1].flow_id;
          if (v41) {
            _Block_release(v41);
          }
        }
        BOOL v42 = default_input_handler;
        goto LABEL_88;
      }
    }
  }
}

uint64_t nw_protocol_instance_get_stats_region(void *a1, uint64_t a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1;
  int v4 = v3;
  if (!v3)
  {
    uint64_t v8 = __nwlog_obj();
    *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
    os_log_type_t v20 = "nw_protocol_instance_get_stats_region";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v17 = 0;
    if (__nwlog_fault(v9, &type, &v17))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        BOOL v10 = __nwlog_obj();
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          os_log_type_t v20 = "nw_protocol_instance_get_stats_region";
          _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null instance", buf, 0xCu);
        }
      }
      else if (v17)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        BOOL v10 = __nwlog_obj();
        os_log_type_t v13 = type;
        BOOL v14 = os_log_type_enabled(v10, type);
        if (backtrace_string)
        {
          if (v14)
          {
            *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
            os_log_type_t v20 = "nw_protocol_instance_get_stats_region";
            __int16 v21 = 2082;
            os_log_type_t v22 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_24;
        }
        if (v14)
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          os_log_type_t v20 = "nw_protocol_instance_get_stats_region";
          _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null instance, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        BOOL v10 = __nwlog_obj();
        os_log_type_t v15 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          os_log_type_t v20 = "nw_protocol_instance_get_stats_region";
          _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_24:
    if (v9) {
      free(v9);
    }
    goto LABEL_26;
  }
  if (a2)
  {
    uint64_t v5 = nw_protocol_implementation_lookup_path(v3, a2, 0);
    if (!v5) {
      goto LABEL_26;
    }
    id wakeup = *(id *)(v5 + 24);
    if (!wakeup) {
      goto LABEL_26;
    }
  }
  else
  {
    id wakeup = v3->wakeup;
    if (!wakeup)
    {
LABEL_26:
      uint64_t stats_region = 0;
      goto LABEL_27;
    }
  }
  uint64_t stats_region = nw_path_flow_registration_get_stats_region(wakeup, *(void *)&v4[-1].log_str[9]);
LABEL_27:

  return stats_region;
}

uint64_t nw_path_flow_registration_get_stats_region(void *a1, uint64_t a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1;
  int v4 = v3;
  if (!v3)
  {
    id v7 = __nwlog_obj();
    *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
    uint64_t v23 = "nw_path_flow_registration_get_stats_region";
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (!__nwlog_fault(v8, &type, &v20)) {
      goto LABEL_43;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        uint64_t v23 = "nw_path_flow_registration_get_stats_region";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null flow_registration", buf, 0xCu);
      }
      goto LABEL_42;
    }
    if (!v20)
    {
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        uint64_t v23 = "nw_path_flow_registration_get_stats_region";
        _os_log_impl(&dword_1830D4000, v9, v18, "%{public}s called with null flow_registration, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_42;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v9 = __nwlog_obj();
    os_log_type_t v14 = type;
    BOOL v15 = os_log_type_enabled(v9, type);
    if (!backtrace_string)
    {
      if (v15)
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        uint64_t v23 = "nw_path_flow_registration_get_stats_region";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null flow_registration, no backtrace", buf, 0xCu);
      }
      goto LABEL_42;
    }
    if (v15)
    {
      *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
      uint64_t v23 = "nw_path_flow_registration_get_stats_region";
      __int16 v24 = 2082;
      os_log_type_t v25 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null flow_registration, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_30;
  }
  if (!a2)
  {
    os_log_type_t v11 = __nwlog_obj();
    *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
    uint64_t v23 = "nw_path_flow_registration_get_stats_region";
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (!__nwlog_fault(v8, &type, &v20)) {
      goto LABEL_43;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        uint64_t v23 = "nw_path_flow_registration_get_stats_region";
        _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null protocol_identifier", buf, 0xCu);
      }
LABEL_42:

LABEL_43:
      if (v8) {
        free(v8);
      }
      goto LABEL_6;
    }
    if (!v20)
    {
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        uint64_t v23 = "nw_path_flow_registration_get_stats_region";
        _os_log_impl(&dword_1830D4000, v9, v19, "%{public}s called with null protocol_identifier, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_42;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v9 = __nwlog_obj();
    os_log_type_t v16 = type;
    BOOL v17 = os_log_type_enabled(v9, type);
    if (!backtrace_string)
    {
      if (v17)
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        uint64_t v23 = "nw_path_flow_registration_get_stats_region";
        _os_log_impl(&dword_1830D4000, v9, v16, "%{public}s called with null protocol_identifier, no backtrace", buf, 0xCu);
      }
      goto LABEL_42;
    }
    if (v17)
    {
      *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
      uint64_t v23 = "nw_path_flow_registration_get_stats_region";
      __int16 v24 = 2082;
      os_log_type_t v25 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v9, v16, "%{public}s called with null protocol_identifier, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_30:

    free(backtrace_string);
    goto LABEL_43;
  }
  if (v3[13] == a2)
  {
    uint64_t v5 = v3[16];
    goto LABEL_10;
  }
  if (v3[12] == a2)
  {
    uint64_t v5 = v3[15];
    goto LABEL_10;
  }
  if (v3[11] == a2)
  {
    uint64_t v5 = v3[14];
    goto LABEL_10;
  }
LABEL_6:
  uint64_t v5 = 0;
LABEL_10:

  return v5;
}

id nw_path_copy_flow_registration(void *a1, uint64_t a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  int v4 = v3;
  if (v3)
  {
    uint64_t globals_for_path = nw_context_get_globals_for_path(v3);
    os_unfair_lock_lock((os_unfair_lock_t)(globals_for_path + 124));
    uint64_t v6 = *(void *)(globals_for_path + 40);
    if (v6 && (uint64_t node = nw_hash_table_get_node(v6, a2, 16)) != 0) {
      id v8 = *(id *)(node + 16);
    }
    else {
      id v8 = 0;
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(globals_for_path + 124));
    goto LABEL_7;
  }
  os_log_type_t v10 = __nwlog_obj();
  *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
  __int16 v21 = "nw_path_copy_flow_registration";
  os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v18 = 0;
  if (__nwlog_fault(v11, &type, &v18))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        __int16 v21 = "nw_path_copy_flow_registration";
        _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s called with null context", buf, 0xCu);
      }
    }
    else if (v18)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v12, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
          __int16 v21 = "nw_path_copy_flow_registration";
          __int16 v22 = 2082;
          uint64_t v23 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v12, v15, "%{public}s called with null context, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_24;
      }
      if (v16)
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        __int16 v21 = "nw_path_copy_flow_registration";
        _os_log_impl(&dword_1830D4000, v12, v15, "%{public}s called with null context, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v17 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        __int16 v21 = "nw_path_copy_flow_registration";
        _os_log_impl(&dword_1830D4000, v12, v17, "%{public}s called with null context, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_24:
  if (v11) {
    free(v11);
  }
  id v8 = 0;
LABEL_7:

  return v8;
}

void sub_183266080(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_protocol_get_parameters(uint64_t a1)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
    BOOL v32 = "__nw_protocol_get_parameters";
    char v18 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v29 = 0;
    if (__nwlog_fault(v18, &type, &v29))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v19 = __nwlog_obj();
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v19, type))
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          BOOL v32 = "__nw_protocol_get_parameters";
          __int16 v21 = "%{public}s called with null protocol";
LABEL_59:
          _os_log_impl(&dword_1830D4000, v19, v20, v21, buf, 0xCu);
        }
      }
      else if (v29)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v19 = __nwlog_obj();
        os_log_type_t v20 = type;
        BOOL v26 = os_log_type_enabled(v19, type);
        if (backtrace_string)
        {
          if (v26)
          {
            *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
            BOOL v32 = "__nw_protocol_get_parameters";
            __int16 v33 = 2082;
            uint64_t v34 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v19, v20, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(backtrace_string);
          goto LABEL_60;
        }
        if (v26)
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          BOOL v32 = "__nw_protocol_get_parameters";
          __int16 v21 = "%{public}s called with null protocol, no backtrace";
          goto LABEL_59;
        }
      }
      else
      {
        os_log_type_t v19 = __nwlog_obj();
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v19, type))
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          BOOL v32 = "__nw_protocol_get_parameters";
          __int16 v21 = "%{public}s called with null protocol, backtrace limit exceeded";
          goto LABEL_59;
        }
      }
    }
LABEL_60:
    if (v18) {
      free(v18);
    }
    return 0;
  }
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2 == &nw_protocol_ref_counted_handle)
  {
    uint64_t v3 = *(void *)(a1 + 88);
    if (v3) {
      *(void *)(a1 + 88) = v3 + 1;
    }
  }
  uint64_t v4 = *(void *)(a1 + 24);
  if (v4)
  {
    uint64_t v5 = *(uint64_t (**)(uint64_t))(v4 + 112);
    if (v5)
    {
      uint64_t v6 = v5(a1);
      if (v2 != &nw_protocol_ref_counted_handle) {
        return v6;
      }
      goto LABEL_8;
    }
  }
  __nwlog_obj();
  os_log_type_t v12 = *(const char **)(a1 + 16);
  *(_DWORD *)netcore_stats_tcp_report buf = 136446722;
  BOOL v32 = "__nw_protocol_get_parameters";
  if (!v12) {
    os_log_type_t v12 = "invalid";
  }
  __int16 v33 = 2082;
  uint64_t v34 = (void *)v12;
  __int16 v35 = 2048;
  uint64_t v36 = a1;
  os_log_type_t v13 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v29 = 0;
  if (!__nwlog_fault(v13, &type, &v29)) {
    goto LABEL_51;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    os_log_type_t v14 = __nwlog_obj();
    os_log_type_t v15 = type;
    if (!os_log_type_enabled(v14, type)) {
      goto LABEL_51;
    }
    BOOL v16 = *(const char **)(a1 + 16);
    if (!v16) {
      BOOL v16 = "invalid";
    }
    *(_DWORD *)netcore_stats_tcp_report buf = 136446722;
    BOOL v32 = "__nw_protocol_get_parameters";
    __int16 v33 = 2082;
    uint64_t v34 = (void *)v16;
    __int16 v35 = 2048;
    uint64_t v36 = a1;
    os_log_type_t v17 = "%{public}s protocol %{public}s (%p) has invalid get_parameters callback";
LABEL_50:
    _os_log_impl(&dword_1830D4000, v14, v15, v17, buf, 0x20u);
    goto LABEL_51;
  }
  if (!v29)
  {
    os_log_type_t v14 = __nwlog_obj();
    os_log_type_t v15 = type;
    if (!os_log_type_enabled(v14, type)) {
      goto LABEL_51;
    }
    char v27 = *(const char **)(a1 + 16);
    if (!v27) {
      char v27 = "invalid";
    }
    *(_DWORD *)netcore_stats_tcp_report buf = 136446722;
    BOOL v32 = "__nw_protocol_get_parameters";
    __int16 v33 = 2082;
    uint64_t v34 = (void *)v27;
    __int16 v35 = 2048;
    uint64_t v36 = a1;
    os_log_type_t v17 = "%{public}s protocol %{public}s (%p) has invalid get_parameters callback, backtrace limit exceeded";
    goto LABEL_50;
  }
  __int16 v22 = (char *)__nw_create_backtrace_string();
  os_log_type_t v14 = __nwlog_obj();
  os_log_type_t v15 = type;
  BOOL v23 = os_log_type_enabled(v14, type);
  if (!v22)
  {
    if (!v23) {
      goto LABEL_51;
    }
    int v28 = *(const char **)(a1 + 16);
    if (!v28) {
      int v28 = "invalid";
    }
    *(_DWORD *)netcore_stats_tcp_report buf = 136446722;
    BOOL v32 = "__nw_protocol_get_parameters";
    __int16 v33 = 2082;
    uint64_t v34 = (void *)v28;
    __int16 v35 = 2048;
    uint64_t v36 = a1;
    os_log_type_t v17 = "%{public}s protocol %{public}s (%p) has invalid get_parameters callback, no backtrace";
    goto LABEL_50;
  }
  if (v23)
  {
    uint64_t v24 = *(const char **)(a1 + 16);
    if (!v24) {
      uint64_t v24 = "invalid";
    }
    *(_DWORD *)netcore_stats_tcp_report buf = 136446978;
    BOOL v32 = "__nw_protocol_get_parameters";
    __int16 v33 = 2082;
    uint64_t v34 = (void *)v24;
    __int16 v35 = 2048;
    uint64_t v36 = a1;
    __int16 v37 = 2082;
    id v38 = v22;
    _os_log_impl(&dword_1830D4000, v14, v15, "%{public}s protocol %{public}s (%p) has invalid get_parameters callback, dumping backtrace:%{public}s", buf, 0x2Au);
  }
  free(v22);
LABEL_51:
  if (v13) {
    free(v13);
  }
  uint64_t v6 = 0;
  if (v2 == &nw_protocol_ref_counted_handle)
  {
LABEL_8:
    if (*(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
    {
      uint64_t v8 = *(void *)(a1 + 88);
      if (v8)
      {
        uint64_t v9 = v8 - 1;
        *(void *)(a1 + 88) = v9;
        if (!v9)
        {
          os_log_type_t v10 = *(void (***)(void))(a1 + 64);
          if (v10)
          {
            *(void *)(a1 + 64) = 0;
            v10[2](v10);
            _Block_release(v10);
          }
          if (*(unsigned char *)(a1 + 72))
          {
            os_log_type_t v11 = *(const void **)(a1 + 64);
            if (v11) {
              _Block_release(v11);
            }
          }
          free((void *)a1);
        }
      }
    }
  }
  return v6;
}

uint64_t nw_protocol_default_get_parameters(nw_protocol *a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
    os_log_type_t v17 = "nw_protocol_default_get_parameters";
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (!__nwlog_fault(v8, &type, &v14)) {
      goto LABEL_26;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (!os_log_type_enabled(v9, type)) {
        goto LABEL_26;
      }
      *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
      os_log_type_t v17 = "nw_protocol_default_get_parameters";
      os_log_type_t v11 = "%{public}s called with null protocol";
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
          os_log_type_t v17 = "nw_protocol_default_get_parameters";
          __int16 v18 = 2082;
          os_log_type_t v19 = (nw_protocol_identifier *)backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_26;
      }
      if (!v13)
      {
LABEL_26:
        if (v8) {
          free(v8);
        }
        return 0;
      }
      *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
      os_log_type_t v17 = "nw_protocol_default_get_parameters";
      os_log_type_t v11 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (!os_log_type_enabled(v9, type)) {
        goto LABEL_26;
      }
      *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
      os_log_type_t v17 = "nw_protocol_default_get_parameters";
      os_log_type_t v11 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    _os_log_impl(&dword_1830D4000, v9, v10, v11, buf, 0xCu);
    goto LABEL_26;
  }
  default_input_handler = a1->default_input_handler;
  if (!default_input_handler
    || (callbacks = default_input_handler->callbacks) == 0
    || (get_parameters = (uint64_t (*)(void))callbacks->get_parameters) == 0)
  {
    uint64_t v6 = __nwlog_obj();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      identifier = (nw_protocol_identifier *)"<null>";
      if (a1->identifier) {
        identifier = a1->identifier;
      }
      *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
      os_log_type_t v17 = "nw_protocol_default_get_parameters";
      __int16 v18 = 2082;
      os_log_type_t v19 = identifier;
      _os_log_impl(&dword_1830D4000, v6, OS_LOG_TYPE_DEBUG, "%{public}s Protocol %{public}s does not support get parameters", buf, 0x16u);
    }
    return 0;
  }

  return get_parameters();
}

void nw_channel_get_message_properties(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *(void *)&v26[13] = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
    uint64_t v24 = "nw_channel_get_message_properties";
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (!__nwlog_fault(v6, &type, &v21)) {
      goto LABEL_46;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_46;
      }
      *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
      uint64_t v24 = "nw_channel_get_message_properties";
      uint64_t v9 = "%{public}s called with null protocol";
    }
    else if (v21)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      BOOL v15 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
          uint64_t v24 = "nw_channel_get_message_properties";
          __int16 v25 = 2082;
          *(void *)BOOL v26 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_46:
        if (!v6) {
          return;
        }
        goto LABEL_47;
      }
      if (!v15) {
        goto LABEL_46;
      }
      *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
      uint64_t v24 = "nw_channel_get_message_properties";
      uint64_t v9 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      id v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_46;
      }
      *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
      uint64_t v24 = "nw_channel_get_message_properties";
      uint64_t v9 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
LABEL_45:
    _os_log_impl(&dword_1830D4000, v7, v8, v9, buf, 0xCu);
    goto LABEL_46;
  }
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3)
  {
    if (a2)
    {
      uint64_t v5 = *(void *)(a2 + 56);
      if (v5)
      {
        if (a3)
        {
          *a3 = *(_DWORD *)(v3 + 436);
          a3[1] = a3[1] & 0xFFFFFFF8 | (*(unsigned __int8 *)(v5 + 153) >> 2) & 1;
        }
        return;
      }
      goto LABEL_53;
    }
    __nwlog_obj();
    *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
    uint64_t v24 = "__nw_protocol_get_output_handler_context";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (__nwlog_fault(v10, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v11 = __nwlog_obj();
        os_log_type_t v12 = type;
        if (!os_log_type_enabled(v11, type)) {
          goto LABEL_51;
        }
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        uint64_t v24 = "__nw_protocol_get_output_handler_context";
        BOOL v13 = "%{public}s called with null protocol";
        goto LABEL_50;
      }
      if (!v21)
      {
        os_log_type_t v11 = __nwlog_obj();
        os_log_type_t v12 = type;
        if (!os_log_type_enabled(v11, type)) {
          goto LABEL_51;
        }
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        uint64_t v24 = "__nw_protocol_get_output_handler_context";
        BOOL v13 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_50;
      }
      __int16 v18 = (char *)__nw_create_backtrace_string();
      os_log_type_t v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v19 = os_log_type_enabled(v11, type);
      if (v18)
      {
        if (v19)
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
          uint64_t v24 = "__nw_protocol_get_output_handler_context";
          __int16 v25 = 2082;
          *(void *)BOOL v26 = v18;
          _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v18);
        goto LABEL_51;
      }
      if (v19)
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        uint64_t v24 = "__nw_protocol_get_output_handler_context";
        BOOL v13 = "%{public}s called with null protocol, no backtrace";
LABEL_50:
        _os_log_impl(&dword_1830D4000, v11, v12, v13, buf, 0xCu);
      }
    }
LABEL_51:
    if (v10) {
      free(v10);
    }
LABEL_53:
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v20 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)netcore_stats_tcp_report buf = 136446722;
      uint64_t v24 = "nw_channel_get_message_properties";
      __int16 v25 = 1042;
      *(_DWORD *)BOOL v26 = 16;
      v26[2] = 2098;
      *(void *)&v26[3] = a2;
      _os_log_impl(&dword_1830D4000, v20, OS_LOG_TYPE_ERROR, "%{public}s Can't find hash table entry for %{public,uuid_t}.16P", buf, 0x1Cu);
    }
    return;
  }
  __nwlog_obj();
  *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
  uint64_t v24 = "nw_channel_get_message_properties";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v21 = 0;
  if (!__nwlog_fault(v6, &type, &v21)) {
    goto LABEL_46;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    id v7 = __nwlog_obj();
    os_log_type_t v8 = type;
    if (!os_log_type_enabled(v7, type)) {
      goto LABEL_46;
    }
    *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
    uint64_t v24 = "nw_channel_get_message_properties";
    uint64_t v9 = "%{public}s called with null channel";
    goto LABEL_45;
  }
  if (!v21)
  {
    id v7 = __nwlog_obj();
    os_log_type_t v8 = type;
    if (!os_log_type_enabled(v7, type)) {
      goto LABEL_46;
    }
    *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
    uint64_t v24 = "nw_channel_get_message_properties";
    uint64_t v9 = "%{public}s called with null channel, backtrace limit exceeded";
    goto LABEL_45;
  }
  BOOL v16 = (char *)__nw_create_backtrace_string();
  id v7 = __nwlog_obj();
  os_log_type_t v8 = type;
  BOOL v17 = os_log_type_enabled(v7, type);
  if (!v16)
  {
    if (!v17) {
      goto LABEL_46;
    }
    *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
    uint64_t v24 = "nw_channel_get_message_properties";
    uint64_t v9 = "%{public}s called with null channel, no backtrace";
    goto LABEL_45;
  }
  if (v17)
  {
    *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
    uint64_t v24 = "nw_channel_get_message_properties";
    __int16 v25 = 2082;
    *(void *)BOOL v26 = v16;
    _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null channel, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v16);
  if (v6) {
LABEL_47:
  }
    free(v6);
}

uint64_t nw_protocol_default_connect(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
    BOOL v15 = "nw_protocol_default_connect";
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v12 = 0;
    if (!__nwlog_fault(v6, &type, &v12)) {
      goto LABEL_22;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_22;
      }
      *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
      BOOL v15 = "nw_protocol_default_connect";
      uint64_t v9 = "%{public}s called with null protocol";
    }
    else if (v12)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
          BOOL v15 = "nw_protocol_default_connect";
          __int16 v16 = 2082;
          BOOL v17 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_22;
      }
      if (!v11)
      {
LABEL_22:
        if (v6) {
          free(v6);
        }
        return 0;
      }
      *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
      BOOL v15 = "nw_protocol_default_connect";
      uint64_t v9 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      id v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_22;
      }
      *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
      BOOL v15 = "nw_protocol_default_connect";
      uint64_t v9 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    _os_log_impl(&dword_1830D4000, v7, v8, v9, buf, 0xCu);
    goto LABEL_22;
  }
  output_handler = a1->output_handler;
  if (!output_handler) {
    return 0;
  }
  callbacks = output_handler->callbacks;
  if (!callbacks) {
    return 0;
  }
  connect = (uint64_t (*)(void))callbacks->connect;
  if (!connect) {
    return 0;
  }

  return connect();
}

void nw_protocol_instance_schedule_wakeup(void *a1, uint64_t a2)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1;
  uint64_t v4 = (uint64_t)v3;
  if (!v3)
  {
    BOOL v11 = __nwlog_obj();
    *(_DWORD *)location = 136446210;
    *(void *)&location[4] = "nw_protocol_instance_schedule_wakeup";
    char v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v32 = 0;
    if (!__nwlog_fault(v12, &type, &v32)) {
      goto LABEL_59;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)location = 136446210;
        *(void *)&location[4] = "nw_protocol_instance_schedule_wakeup";
        _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s called with null instance", location, 0xCu);
      }
    }
    else if (v32)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v13 = __nwlog_obj();
      os_log_type_t v20 = type;
      BOOL v21 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v21)
        {
          *(_DWORD *)location = 136446466;
          *(void *)&location[4] = "nw_protocol_instance_schedule_wakeup";
          __int16 v35 = 2082;
          uint64_t v36 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v13, v20, "%{public}s called with null instance, dumping backtrace:%{public}s", location, 0x16u);
        }

        free(backtrace_string);
LABEL_59:
        if (!v12) {
          goto LABEL_9;
        }
LABEL_60:
        free(v12);
        goto LABEL_9;
      }
      if (v21)
      {
        *(_DWORD *)location = 136446210;
        *(void *)&location[4] = "nw_protocol_instance_schedule_wakeup";
        _os_log_impl(&dword_1830D4000, v13, v20, "%{public}s called with null instance, no backtrace", location, 0xCu);
      }
    }
    else
    {
      BOOL v13 = __nwlog_obj();
      os_log_type_t v27 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)location = 136446210;
        *(void *)&location[4] = "nw_protocol_instance_schedule_wakeup";
        _os_log_impl(&dword_1830D4000, v13, v27, "%{public}s called with null instance, backtrace limit exceeded", location, 0xCu);
      }
    }
LABEL_58:

    goto LABEL_59;
  }
  if (!v3[33])
  {
    BOOL v15 = __nwlog_obj();
    *(_DWORD *)location = 136446210;
    *(void *)&location[4] = "nw_protocol_instance_schedule_wakeup";
    char v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v32 = 0;
    if (!__nwlog_fault(v12, &type, &v32)) {
      goto LABEL_59;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v13 = __nwlog_obj();
      os_log_type_t v16 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)location = 136446210;
        *(void *)&location[4] = "nw_protocol_instance_schedule_wakeup";
        _os_log_impl(&dword_1830D4000, v13, v16, "%{public}s called with null instance->wakeup", location, 0xCu);
      }
      goto LABEL_58;
    }
    if (!v32)
    {
      BOOL v13 = __nwlog_obj();
      os_log_type_t v28 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)location = 136446210;
        *(void *)&location[4] = "nw_protocol_instance_schedule_wakeup";
        _os_log_impl(&dword_1830D4000, v13, v28, "%{public}s called with null instance->wakeup, backtrace limit exceeded", location, 0xCu);
      }
      goto LABEL_58;
    }
    __int16 v22 = (char *)__nw_create_backtrace_string();
    BOOL v13 = __nwlog_obj();
    os_log_type_t v23 = type;
    BOOL v24 = os_log_type_enabled(v13, type);
    if (!v22)
    {
      if (v24)
      {
        *(_DWORD *)location = 136446210;
        *(void *)&location[4] = "nw_protocol_instance_schedule_wakeup";
        _os_log_impl(&dword_1830D4000, v13, v23, "%{public}s called with null instance->wakeup, no backtrace", location, 0xCu);
      }
      goto LABEL_58;
    }
    if (v24)
    {
      *(_DWORD *)location = 136446466;
      *(void *)&location[4] = "nw_protocol_instance_schedule_wakeup";
      __int16 v35 = 2082;
      uint64_t v36 = v22;
      _os_log_impl(&dword_1830D4000, v13, v23, "%{public}s called with null instance->wakeup, dumping backtrace:%{public}s", location, 0x16u);
    }
    goto LABEL_39;
  }
  uint64_t v5 = (void *)v3[15];
  if (!v5)
  {
    BOOL v17 = __nwlog_obj();
    *(_DWORD *)location = 136446210;
    *(void *)&location[4] = "nw_protocol_instance_schedule_wakeup";
    char v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v32 = 0;
    if (!__nwlog_fault(v12, &type, &v32)) {
      goto LABEL_59;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v13 = __nwlog_obj();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)location = 136446210;
        *(void *)&location[4] = "nw_protocol_instance_schedule_wakeup";
        _os_log_impl(&dword_1830D4000, v13, v18, "%{public}s called with null instance->context", location, 0xCu);
      }
      goto LABEL_58;
    }
    if (!v32)
    {
      BOOL v13 = __nwlog_obj();
      os_log_type_t v29 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)location = 136446210;
        *(void *)&location[4] = "nw_protocol_instance_schedule_wakeup";
        _os_log_impl(&dword_1830D4000, v13, v29, "%{public}s called with null instance->context, backtrace limit exceeded", location, 0xCu);
      }
      goto LABEL_58;
    }
    __int16 v22 = (char *)__nw_create_backtrace_string();
    BOOL v13 = __nwlog_obj();
    os_log_type_t v25 = type;
    BOOL v26 = os_log_type_enabled(v13, type);
    if (!v22)
    {
      if (v26)
      {
        *(_DWORD *)location = 136446210;
        *(void *)&location[4] = "nw_protocol_instance_schedule_wakeup";
        _os_log_impl(&dword_1830D4000, v13, v25, "%{public}s called with null instance->context, no backtrace", location, 0xCu);
      }
      goto LABEL_58;
    }
    if (v26)
    {
      *(_DWORD *)location = 136446466;
      *(void *)&location[4] = "nw_protocol_instance_schedule_wakeup";
      __int16 v35 = 2082;
      uint64_t v36 = v22;
      _os_log_impl(&dword_1830D4000, v13, v25, "%{public}s called with null instance->context, dumping backtrace:%{public}s", location, 0x16u);
    }
LABEL_39:

    free(v22);
    if (!v12) {
      goto LABEL_9;
    }
    goto LABEL_60;
  }
  uint64_t v6 = v5;
  id v7 = v6;
  if (((_BYTE)v6[17] & 8) == 0) {
    dispatch_assert_queue_V2(v6[1]);
  }

  os_log_type_t v8 = *(void **)(v4 + 272);
  if (!v8)
  {
    objc_initWeak((id *)location, (id)v4);
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 3221225472;
    aBlock[2] = __nw_protocol_instance_schedule_wakeup_block_invoke;
    aBlock[3] = &unk_1E5243FB0;
    objc_copyWeak(&v31, (id *)location);
    uint64_t v9 = _Block_copy(aBlock);
    os_log_type_t v10 = *(void **)(v4 + 272);
    *(void *)(v4 + 272) = v9;

    objc_destroyWeak(&v31);
    objc_destroyWeak((id *)location);
    os_log_type_t v8 = *(void **)(v4 + 272);
  }
  *(unsigned char *)(v4 + 404) = *(unsigned char *)(v4 + 404) & 0xEF | (16 * (a2 != -1));
  nw_context_reset_timer_block(*(void **)(v4 + 120), v4, a2, v8);
LABEL_9:
}

void sub_183267938(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_context_reset_timer_block(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v9 = a1;
  id v7 = a4;
  if (a3 == -1) {
    dispatch_time_t v8 = -1;
  }
  else {
    dispatch_time_t v8 = dispatch_time(0x8000000000000000, 1000000 * a3);
  }
  nw_context_reset_timer_block_with_time(v9, a2, v8, v7);
}

void sub_1832679F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void nw_context_reset_timer_block_with_time(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v86 = *MEMORY[0x1E4F143B8];
  id v7 = a1;
  id v8 = a4;
  if (!v7)
  {
    BOOL v53 = __nwlog_obj();
    *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
    int v81 = "nw_context_reset_timer_block_with_time";
    os_log_type_t v54 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v79 = OS_LOG_TYPE_ERROR;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v54, &v79, &type))
    {
      if (v79 == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v55 = __nwlog_obj();
        os_log_type_t v56 = v79;
        if (os_log_type_enabled(v55, v79))
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          int v81 = "nw_context_reset_timer_block_with_time";
          _os_log_impl(&dword_1830D4000, v55, v56, "%{public}s called with null context", buf, 0xCu);
        }
      }
      else if (type)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v55 = __nwlog_obj();
        os_log_type_t v63 = v79;
        BOOL v64 = os_log_type_enabled(v55, v79);
        if (backtrace_string)
        {
          if (v64)
          {
            *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
            int v81 = "nw_context_reset_timer_block_with_time";
            __int16 v82 = 2082;
            uint64_t v83 = (uint64_t)backtrace_string;
            _os_log_impl(&dword_1830D4000, v55, v63, "%{public}s called with null context, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_119;
        }
        if (v64)
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          int v81 = "nw_context_reset_timer_block_with_time";
          _os_log_impl(&dword_1830D4000, v55, v63, "%{public}s called with null context, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        os_log_type_t v55 = __nwlog_obj();
        os_log_type_t v72 = v79;
        if (os_log_type_enabled(v55, v79))
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          int v81 = "nw_context_reset_timer_block_with_time";
          _os_log_impl(&dword_1830D4000, v55, v72, "%{public}s called with null context, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_119:
    if (v54) {
      free(v54);
    }
    id v7 = 0;
    goto LABEL_76;
  }
  if (!a2)
  {
    os_log_type_t v57 = __nwlog_obj();
    *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
    int v81 = "nw_context_reset_timer_block_with_time";
    uint64_t v13 = _os_log_send_and_compose_impl();

    os_log_type_t v79 = OS_LOG_TYPE_ERROR;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault((const char *)v13, &v79, &type)) {
      goto LABEL_131;
    }
    if (v79 == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v58 = __nwlog_obj();
      os_log_type_t v59 = v79;
      if (os_log_type_enabled(v58, v79))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        int v81 = "nw_context_reset_timer_block_with_time";
        _os_log_impl(&dword_1830D4000, v58, v59, "%{public}s called with null handle", buf, 0xCu);
      }
      goto LABEL_130;
    }
    if (type == OS_LOG_TYPE_DEFAULT)
    {
      os_log_type_t v58 = __nwlog_obj();
      os_log_type_t v73 = v79;
      if (os_log_type_enabled(v58, v79))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        int v81 = "nw_context_reset_timer_block_with_time";
        _os_log_impl(&dword_1830D4000, v58, v73, "%{public}s called with null handle, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_130;
    }
    uint64_t v65 = (char *)__nw_create_backtrace_string();
    os_log_type_t v58 = __nwlog_obj();
    os_log_type_t v66 = v79;
    BOOL v67 = os_log_type_enabled(v58, v79);
    if (!v65)
    {
      if (v67)
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        int v81 = "nw_context_reset_timer_block_with_time";
        _os_log_impl(&dword_1830D4000, v58, v66, "%{public}s called with null handle, no backtrace", buf, 0xCu);
      }
      goto LABEL_130;
    }
    if (v67)
    {
      *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
      int v81 = "nw_context_reset_timer_block_with_time";
      __int16 v82 = 2082;
      uint64_t v83 = (uint64_t)v65;
      _os_log_impl(&dword_1830D4000, v58, v66, "%{public}s called with null handle, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_108;
  }
  id v9 = v7;
  os_log_type_t v10 = (NWConcrete_nw_context *)v9;
  if ((*((unsigned char *)v9 + 136) & 8) == 0) {
    dispatch_assert_queue_V2(*((dispatch_queue_t *)v9 + 1));
  }

  id v7 = (id)nw_context_copy_globals_context(v10);
  if (a3 == -1)
  {
    BOOL v21 = *(void **)(*((void *)v7 + 4) + 8);
    if (v21)
    {
      do
      {
        BOOL v24 = (void *)*v21;
        if (v21[3] == a2)
        {
          id v25 = v7;
          if ((v21[5] & 1) == 0)
          {
            BOOL v26 = (void *)*v21;
            os_log_type_t v27 = (void *)v21[1];
            if (*v21)
            {
              v26[1] = v27;
              os_log_type_t v27 = (void *)v21[1];
            }
            else
            {
              *(void *)(*((void *)v7 + 4) + 16) = v27;
            }
            *os_log_type_t v27 = v26;
            void *v21 = 0;
            v21[1] = 0;
            BOOL node = nw_hash_table_get_node(*(void *)(*((void *)v7 + 4) + 24), v21[3], 0);
            nw_hash_table_remove_node(*(void *)(*((void *)v7 + 4) + 24), node);
            os_log_type_t v23 = (void *)v21[4];
            void v21[4] = 0;

            free(v21);
          }
        }
        BOOL v21 = v24;
      }
      while (v24);
    }
    nw_context_cleanup_timer((NWConcrete_nw_context *)v7);
LABEL_76:

    return;
  }
  if (!v8)
  {
    os_log_type_t v60 = __nwlog_obj();
    *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
    int v81 = "nw_context_reset_timer_block_with_time";
    uint64_t v13 = _os_log_send_and_compose_impl();

    os_log_type_t v79 = OS_LOG_TYPE_ERROR;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault((const char *)v13, &v79, &type)) {
      goto LABEL_131;
    }
    if (v79 == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v58 = __nwlog_obj();
      os_log_type_t v61 = v79;
      if (os_log_type_enabled(v58, v79))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        int v81 = "nw_context_reset_timer_block_with_time";
        _os_log_impl(&dword_1830D4000, v58, v61, "%{public}s called with null block", buf, 0xCu);
      }
LABEL_130:

LABEL_131:
      if (!v13) {
        goto LABEL_76;
      }
LABEL_75:
      free((void *)v13);
      goto LABEL_76;
    }
    if (type == OS_LOG_TYPE_DEFAULT)
    {
      os_log_type_t v58 = __nwlog_obj();
      os_log_type_t v74 = v79;
      if (os_log_type_enabled(v58, v79))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        int v81 = "nw_context_reset_timer_block_with_time";
        _os_log_impl(&dword_1830D4000, v58, v74, "%{public}s called with null block, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_130;
    }
    uint64_t v65 = (char *)__nw_create_backtrace_string();
    os_log_type_t v58 = __nwlog_obj();
    os_log_type_t v70 = v79;
    BOOL v71 = os_log_type_enabled(v58, v79);
    if (!v65)
    {
      if (v71)
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        int v81 = "nw_context_reset_timer_block_with_time";
        _os_log_impl(&dword_1830D4000, v58, v70, "%{public}s called with null block, no backtrace", buf, 0xCu);
      }
      goto LABEL_130;
    }
    if (v71)
    {
      *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
      int v81 = "nw_context_reset_timer_block_with_time";
      __int16 v82 = 2082;
      uint64_t v83 = (uint64_t)v65;
      _os_log_impl(&dword_1830D4000, v58, v70, "%{public}s called with null block, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_108:

    free(v65);
    if (!v13) {
      goto LABEL_76;
    }
    goto LABEL_75;
  }
  BOOL v11 = *(uint64_t **)(*((void *)v7 + 4) + 8);
  if (v11)
  {
    char v12 = 0;
    uint64_t v13 = 0;
    do
    {
      os_log_type_t v16 = v11;
      BOOL v11 = (uint64_t *)*v11;
      if (v16[3] == a2)
      {
        if (v13)
        {
          id v17 = v7;
          if ((v16[5] & 1) == 0)
          {
            uint64_t v18 = *v16;
            BOOL v19 = (void *)v16[1];
            if (*v16)
            {
              *(void *)(v18 + 8) = v19;
              BOOL v19 = (void *)v16[1];
            }
            else
            {
              *(void *)(*((void *)v7 + 4) + 16) = v19;
            }
            *BOOL v19 = v18;
            uint64_t *v16 = 0;
            v16[1] = 0;
            BOOL v14 = nw_hash_table_get_node(*(void *)(*((void *)v7 + 4) + 24), v16[3], 0);
            nw_hash_table_remove_node(*(void *)(*((void *)v7 + 4) + 24), v14);
            BOOL v15 = (void *)v16[4];
            void v16[4] = 0;

            free(v16);
          }
        }
        else
        {
          os_log_type_t v20 = (uint64_t **)v16[1];
          if (v11)
          {
            v11[1] = (uint64_t)v20;
            os_log_type_t v20 = (uint64_t **)v16[1];
          }
          else
          {
            *(void *)(*((void *)v7 + 4) + 16) = v20;
          }
          NSObject *v20 = v11;
          char v12 = 1;
          uint64_t v13 = (uint64_t)v16;
          uint64_t *v16 = 0;
          v16[1] = 0;
        }
      }
    }
    while (v11);
    if (v13) {
      goto LABEL_36;
    }
  }
  else
  {
    char v12 = 0;
  }
  uint64_t v13 = (uint64_t)malloc_type_calloc(1uLL, 0x30uLL, 0xEAFB8F1AuLL);
  if (v13)
  {
LABEL_36:
    *(void *)(v13 + 16) = a3;
    *(void *)(v13 + 24) = a2;
    os_log_type_t v28 = _Block_copy(v8);
    os_log_type_t v29 = *(void **)(v13 + 32);
    *(void *)(v13 + 32) = v28;

    os_log_type_t v30 = (void *)(*((void *)v7 + 4) + 8);
    do
    {
      os_log_type_t v30 = (void *)*v30;
      if (!v30)
      {
        *(void *)uint64_t v13 = 0;
        *(void *)(v13 + 8) = *(void *)(*((void *)v7 + 4) + 16);
        **(void **)(*((void *)v7 + 4) + 16) = v13;
        *(void *)(*((void *)v7 + 4) + 16) = v13;
        if (v12) {
          goto LABEL_44;
        }
        goto LABEL_42;
      }
    }
    while (*(void *)(v13 + 16) >= v30[2]);
    uint64_t v31 = v30[1];
    *(void *)uint64_t v13 = v30;
    *(void *)(v13 + 8) = v31;
    *(void *)v30[1] = v13;
    v30[1] = v13;
    if (v12)
    {
LABEL_44:
      __int16 v33 = (uint64_t *)*((void *)v7 + 4);
      if (v33[1] == v13)
      {
        unint64_t v34 = v33[4];
        if (!v34 || v34 > *(void *)(v13 + 16))
        {
          uint64_t v35 = *v33;
          if (!*v33)
          {
            v75[0] = MEMORY[0x1E4F143A8];
            v75[1] = 3221225472;
            v75[2] = __nw_context_reset_timer_block_with_time_block_invoke;
            v75[3] = &unk_1E524BAA8;
            id v76 = v7;
            **((void **)v7 + 4) = nw_queue_context_create_source(v76, 2, 7, 0, v75, 0);
            if (!networkd_settings_get_BOOL((const char *)nw_setting_context_timer_disable_qos_override)) {
              nw_queue_source_set_qos_class_fallback(**((void ***)v7 + 4));
            }

            uint64_t v35 = **((void **)v7 + 4);
          }
          nw_queue_set_timer_values(v35, *(void *)(v13 + 16), 0xFFFFFFFFFFFFFFFFLL, 0);
          nw_queue_activate_source(**((void **)v7 + 4));
          *(void *)(*((void *)v7 + 4) + 32) = *(void *)(v13 + 16);
        }
      }
      goto LABEL_76;
    }
LABEL_42:
    os_log_type_t v79 = OS_LOG_TYPE_DEFAULT;
    BOOL v32 = nw_hash_table_add_object(*(void *)(*((void *)v7 + 4) + 24), v13, (char *)&v79);
    if (v79 && v32) {
      goto LABEL_44;
    }
    uint64_t v36 = pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init(v36);
    id v37 = (id)gLogObj;
    *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
    int v81 = "nw_context_reset_timer_block_with_time";
    id v38 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v77 = 0;
    if (__nwlog_fault(v38, &type, &v77))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v39 = pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init(v39);
        int v40 = (id)gLogObj;
        os_log_type_t v41 = type;
        if (os_log_type_enabled(v40, type))
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          int v81 = "nw_context_reset_timer_block_with_time";
          _os_log_impl(&dword_1830D4000, v40, v41, "%{public}s Failed to add timer to hash table", buf, 0xCu);
        }
      }
      else if (v77)
      {
        BOOL v42 = __nw_create_backtrace_string();
        if (v42)
        {
          int v43 = (char *)v42;
          uint64_t v44 = pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init(v44);
          uint64_t v45 = (id)gLogObj;
          os_log_type_t v46 = type;
          if (os_log_type_enabled(v45, type))
          {
            *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
            int v81 = "nw_context_reset_timer_block_with_time";
            __int16 v82 = 2082;
            uint64_t v83 = (uint64_t)v43;
            _os_log_impl(&dword_1830D4000, v45, v46, "%{public}s Failed to add timer to hash table, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v43);
          if (!v38) {
            goto LABEL_71;
          }
          goto LABEL_70;
        }
        int v40 = __nwlog_obj();
        os_log_type_t v49 = type;
        if (os_log_type_enabled(v40, type))
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          int v81 = "nw_context_reset_timer_block_with_time";
          _os_log_impl(&dword_1830D4000, v40, v49, "%{public}s Failed to add timer to hash table, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        uint64_t v47 = pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init(v47);
        int v40 = (id)gLogObj;
        os_log_type_t v48 = type;
        if (os_log_type_enabled(v40, type))
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          int v81 = "nw_context_reset_timer_block_with_time";
          _os_log_impl(&dword_1830D4000, v40, v48, "%{public}s Failed to add timer to hash table, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
    if (!v38)
    {
LABEL_71:
      uint64_t v50 = *(void *)v13;
      os_log_type_t v51 = *(void **)(v13 + 8);
      if (*(void *)v13)
      {
        *(void *)(v50 + 8) = v51;
        os_log_type_t v51 = *(void **)(v13 + 8);
      }
      else
      {
        *(void *)(*((void *)v7 + 4) + 16) = v51;
      }
      void *v51 = v50;
      *(void *)uint64_t v13 = 0;
      *(void *)(v13 + 8) = 0;
      os_log_type_t v52 = *(void **)(v13 + 32);
      *(void *)(v13 + 32) = 0;

      goto LABEL_75;
    }
LABEL_70:
    free(v38);
    goto LABEL_71;
  }
  BOOL v68 = __nwlog_obj();
  os_log_type_enabled(v68, OS_LOG_TYPE_ERROR);
  *(_DWORD *)netcore_stats_tcp_report buf = 136446722;
  int v81 = "strict_calloc";
  __int16 v82 = 2048;
  uint64_t v83 = 1;
  __int16 v84 = 2048;
  uint64_t v85 = 48;
  BOOL v69 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v69))
  {
    free(v69);
    uint64_t v13 = 0;
    goto LABEL_36;
  }
  __break(1u);
}

void sub_1832687A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

void nw_queue_source_set_qos_class_fallback(void *a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (*a1)
    {
      MEMORY[0x1F40CBC70]();
    }
    return;
  }
  uint64_t v1 = __nwlog_obj();
  *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
  BOOL v11 = "nw_queue_source_set_qos_class_fallback";
  uint64_t v2 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v8 = 0;
  if (__nwlog_fault(v2, &type, &v8))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      if (os_log_type_enabled(v3, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        BOOL v11 = "nw_queue_source_set_qos_class_fallback";
        uint64_t v5 = "%{public}s called with null source";
LABEL_19:
        _os_log_impl(&dword_1830D4000, v3, v4, v5, buf, 0xCu);
      }
    }
    else
    {
      if (v8)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        uint64_t v3 = __nwlog_obj();
        os_log_type_t v4 = type;
        BOOL v7 = os_log_type_enabled(v3, type);
        if (backtrace_string)
        {
          if (v7)
          {
            *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
            BOOL v11 = "nw_queue_source_set_qos_class_fallback";
            __int16 v12 = 2082;
            uint64_t v13 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v3, v4, "%{public}s called with null source, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_21;
        }
        if (!v7) {
          goto LABEL_20;
        }
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        BOOL v11 = "nw_queue_source_set_qos_class_fallback";
        uint64_t v5 = "%{public}s called with null source, no backtrace";
        goto LABEL_19;
      }
      uint64_t v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      if (os_log_type_enabled(v3, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        BOOL v11 = "nw_queue_source_set_qos_class_fallback";
        uint64_t v5 = "%{public}s called with null source, backtrace limit exceeded";
        goto LABEL_19;
      }
    }
LABEL_20:
  }
LABEL_21:
  if (v2) {
    free(v2);
  }
}

void nw_context_cleanup_timer(NWConcrete_nw_context *a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = *((void *)v1 + 4);
  uint64_t v3 = *(void *)(v2 + 8);
  int v4 = nw_hash_table_count(*(void *)(v2 + 24));
  if (v3) {
    BOOL v6 = v4 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6)
  {
LABEL_11:

    return;
  }
  int v7 = v4;
  if (v3)
  {
    id v9 = __nwlog_obj();
    os_log_type_enabled(v9, OS_LOG_TYPE_ERROR);
    os_log_type_t v10 = (void *)_os_log_send_and_compose_impl();

    if (__nwlog_abort((uint64_t)v10)) {
      goto LABEL_16;
    }
    free(v10);
    if (!v7) {
      goto LABEL_8;
    }
  }
  else if (!v4)
  {
LABEL_8:
    char v8 = (void *)*((void *)v1 + 4);
    if (*v8)
    {
      nw_queue_cancel_source(*v8, v5);
      **((void **)v1 + 4) = 0;
      char v8 = (void *)*((void *)v1 + 4);
    }
    v8[4] = -1;
    goto LABEL_11;
  }
  BOOL v11 = __nwlog_obj();
  os_log_type_enabled(v11, OS_LOG_TYPE_ERROR);
  __int16 v12 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v12))
  {
    free(v12);
    goto LABEL_8;
  }
LABEL_16:
  __break(1u);
}

void sub_183268C58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_path_get_tso_max_segment_size_v4(void *a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = a1;
  uint64_t v2 = v1;
  if (!v1)
  {
    BOOL v6 = __nwlog_obj();
    *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
    uint64_t v18 = "nw_path_get_tso_max_segment_size_v4";
    int v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v15 = 0;
    if (__nwlog_fault(v7, &type, &v15))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        char v8 = __nwlog_obj();
        os_log_type_t v9 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          uint64_t v18 = "nw_path_get_tso_max_segment_size_v4";
          _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null path", buf, 0xCu);
        }
      }
      else if (v15)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        char v8 = __nwlog_obj();
        os_log_type_t v11 = type;
        BOOL v12 = os_log_type_enabled(v8, type);
        if (backtrace_string)
        {
          if (v12)
          {
            *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
            uint64_t v18 = "nw_path_get_tso_max_segment_size_v4";
            __int16 v19 = 2082;
            os_log_type_t v20 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_21;
        }
        if (v12)
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          uint64_t v18 = "nw_path_get_tso_max_segment_size_v4";
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null path, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        char v8 = __nwlog_obj();
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          uint64_t v18 = "nw_path_get_tso_max_segment_size_v4";
          _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_21:
    if (v7) {
      free(v7);
    }
    goto LABEL_23;
  }
  if (!nw_path_network_is_satisfied_update_reason(v1, 0) || (direct = v2->direct) == 0)
  {
LABEL_23:
    uint64_t v5 = 0;
    goto LABEL_24;
  }
  int v4 = direct;
  uint64_t v5 = *((unsigned int *)v4 + 16);

LABEL_24:
  return v5;
}

void sub_183268F24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_4()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267920, (uint64_t)nw::object::_destroy, 0);
    qword_1EB267920 = v0;
  }
}

void __cxx_global_var_init()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267950, (uint64_t)nw::object::_description, 0);
    qword_1EB267950 = v0;
  }
}

void __cxx_global_var_init_2()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267938, (uint64_t)nw::object::_redacted_description, 0);
    qword_1EB267938 = v0;
  }
}

char *nw::object::class_def::register_method_def(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v112 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    __nwlog_obj();
    *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
    *(void *)&uint8_t buf[4] = "register_method_def";
    os_log_type_t v98 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v107 = 0;
    if (__nwlog_fault(v98, &type, &v107))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v99 = __nwlog_obj();
        os_log_type_t v100 = type;
        if (os_log_type_enabled(v99, type))
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          *(void *)&uint8_t buf[4] = "register_method_def";
          int v101 = "%{public}s called with null (!def.slot())";
LABEL_120:
          _os_log_impl(&dword_1830D4000, v99, v100, v101, buf, 0xCu);
        }
      }
      else if (v107)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        uint64_t v99 = __nwlog_obj();
        os_log_type_t v100 = type;
        BOOL v103 = os_log_type_enabled(v99, type);
        if (backtrace_string)
        {
          if (v103)
          {
            *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
            *(void *)&uint8_t buf[4] = "register_method_def";
            __int16 v110 = 2082;
            int v111 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v99, v100, "%{public}s called with null (!def.slot()), dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(backtrace_string);
          goto LABEL_121;
        }
        if (v103)
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          *(void *)&uint8_t buf[4] = "register_method_def";
          int v101 = "%{public}s called with null (!def.slot()), no backtrace";
          goto LABEL_120;
        }
      }
      else
      {
        uint64_t v99 = __nwlog_obj();
        os_log_type_t v100 = type;
        if (os_log_type_enabled(v99, type))
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          *(void *)&uint8_t buf[4] = "register_method_def";
          int v101 = "%{public}s called with null (!def.slot()), backtrace limit exceeded";
          goto LABEL_120;
        }
      }
    }
LABEL_121:
    if (v98) {
      free(v98);
    }
    return 0;
  }
  uint64_t v3 = a3;
  uint64_t v4 = a2;
  uint64_t v5 = (char *)*((void *)&xmmword_1EB267888 + 1);
  BOOL v6 = (char *)xmmword_1EB267888;
  uint64_t v7 = *((void *)&xmmword_1EB267888 + 1) - xmmword_1EB267888;
  if (*((void *)&xmmword_1EB267888 + 1) == (void)xmmword_1EB267888) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = 32 * (*((void *)&xmmword_1EB267888 + 1) - xmmword_1EB267888) - 1;
  }
  uint64_t v9 = qword_1EB2678A8;
  unint64_t v10 = qword_1EB2678A0 + qword_1EB2678A8;
  if (v8 != qword_1EB2678A0 + qword_1EB2678A8) {
    goto LABEL_89;
  }
  if ((unint64_t)qword_1EB2678A0 < 0x100)
  {
    uint64_t v23 = v7 >> 3;
    if (v7 >> 3 < (unint64_t)((qword_1EB267898 - qword_1EB267880) >> 3))
    {
      if (qword_1EB267898 != *((void *)&xmmword_1EB267888 + 1))
      {
        uint64_t result = (char *)malloc_type_calloc(0x100uLL, 0x10uLL, 0x80040803F642BuLL);
        if (result)
        {
          *(void *)netcore_stats_tcp_report buf = result;
          std::__split_buffer<void (nw::object::**)(void),nw::c_allocator<void (nw::object::**)(void)>>::push_back(&qword_1EB267880, buf);
LABEL_88:
          BOOL v6 = (char *)xmmword_1EB267888;
          unint64_t v10 = qword_1EB2678A8 + qword_1EB2678A0;
LABEL_89:
          __int16 v82 = (void *)(*(void *)&v6[(v10 >> 5) & 0x7FFFFFFFFFFFFF8] + 16 * v10);
          void *v82 = v4;
          v82[1] = v3;
          ++qword_1EB2678A8;
          return (char *)v9;
        }
        goto LABEL_124;
      }
      uint64_t result = (char *)malloc_type_calloc(0x100uLL, 0x10uLL, 0x80040803F642BuLL);
      if (!result) {
        goto LABEL_124;
      }
      *(void *)netcore_stats_tcp_report buf = result;
      std::__split_buffer<void (nw::object::**)(void),nw::c_allocator<void (nw::object::**)(void)>>::push_front((const void **)&qword_1EB267880, buf);
      id v37 = (char *)*((void *)&xmmword_1EB267888 + 1);
      id v38 = (char *)(xmmword_1EB267888 + 8);
      uint64_t v39 = *(void *)xmmword_1EB267888;
      *(void *)&xmmword_1EB267888 = xmmword_1EB267888 + 8;
      if (*((void *)&xmmword_1EB267888 + 1) != qword_1EB267898)
      {
LABEL_106:
        *(void *)id v37 = v39;
        *((void *)&xmmword_1EB267888 + 1) += 8;
        goto LABEL_88;
      }
      uint64_t v40 = (uint64_t)&v38[-qword_1EB267880];
      if ((unint64_t)v38 > qword_1EB267880)
      {
        uint64_t v41 = v40 >> 3;
        BOOL v15 = v40 >> 3 < -1;
        uint64_t v42 = (v40 >> 3) + 2;
        if (v15) {
          uint64_t v43 = v42;
        }
        else {
          uint64_t v43 = v41 + 1;
        }
        uint64_t v44 = v43 >> 1;
        uint64_t v45 = -v44;
        os_log_type_t v46 = &v38[-8 * v44];
        uint64_t v47 = *((void *)&xmmword_1EB267888 + 1) - (void)v38;
        if (*((char **)&xmmword_1EB267888 + 1) != v38)
        {
          memmove(&v38[-8 * v44], v38, *((void *)&xmmword_1EB267888 + 1) - (void)v38);
          id v38 = (char *)xmmword_1EB267888;
        }
        id v37 = &v46[v47];
        *(void *)&xmmword_1EB267888 = &v38[8 * v45];
        *((void *)&xmmword_1EB267888 + 1) = &v46[v47];
        goto LABEL_106;
      }
      if (*((void *)&xmmword_1EB267888 + 1) == qword_1EB267880) {
        size_t v83 = 1;
      }
      else {
        size_t v83 = (*((void *)&xmmword_1EB267888 + 1) - qword_1EB267880) >> 2;
      }
      uint64_t result = (char *)malloc_type_calloc(v83, 8uLL, 0x80040B8603338uLL);
      if (!result) {
        goto LABEL_124;
      }
      __int16 v84 = &result[8 * (v83 >> 2)];
      uint64_t v85 = (uint64_t *)xmmword_1EB267888;
      id v37 = v84;
      uint64_t v86 = *((void *)&xmmword_1EB267888 + 1) - xmmword_1EB267888;
      if (*((void *)&xmmword_1EB267888 + 1) != (void)xmmword_1EB267888)
      {
        id v37 = &v84[v86 & 0xFFFFFFFFFFFFFFF8];
        unint64_t v87 = v86 - 8;
        if (v87 < 0x38)
        {
          __int16 v88 = &result[8 * (v83 >> 2)];
          goto LABEL_103;
        }
        uint64_t v89 = &result[8 * (v83 >> 2)];
        __int16 v88 = v89;
        if ((unint64_t)&v89[-xmmword_1EB267888] < 0x20)
        {
          do
          {
LABEL_103:
            uint64_t v96 = *v85++;
            *(void *)__int16 v88 = v96;
            v88 += 8;
          }
          while (v88 != v37);
          goto LABEL_104;
        }
        uint64_t v90 = (v87 >> 3) + 1;
        uint64_t v91 = 8 * (v90 & 0x3FFFFFFFFFFFFFFCLL);
        __int16 v88 = &v84[v91];
        __int16 v92 = (long long *)(xmmword_1EB267888 + 16);
        uint64_t v93 = v89 + 16;
        uint64_t v94 = v90 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v95 = *v92;
          *(v93 - 1) = *(v92 - 1);
          *uint64_t v93 = v95;
          v92 += 2;
          v93 += 2;
          v94 -= 4;
        }
        while (v94);
        if (v90 != (v90 & 0x3FFFFFFFFFFFFFFCLL))
        {
          uint64_t v85 = (uint64_t *)((char *)v85 + v91);
          goto LABEL_103;
        }
      }
LABEL_104:
      uint64_t v97 = (void *)qword_1EB267880;
      qword_1EB267880 = (uint64_t)result;
      *(void *)&xmmword_1EB267888 = &result[8 * (v83 >> 2)];
      *((void *)&xmmword_1EB267888 + 1) = v37;
      qword_1EB267898 = (uint64_t)&result[8 * v83];
      if (v97)
      {
        free(v97);
        id v37 = (char *)*((void *)&xmmword_1EB267888 + 1);
      }
      goto LABEL_106;
    }
    if (qword_1EB267898 == qword_1EB267880) {
      size_t v25 = 1;
    }
    else {
      size_t v25 = (qword_1EB267898 - qword_1EB267880) >> 2;
    }
    uint64_t result = (char *)malloc_type_calloc(v25, 8uLL, 0x80040B8603338uLL);
    if (!result) {
      goto LABEL_124;
    }
    BOOL v26 = result;
    uint64_t v104 = v9;
    uint64_t result = (char *)malloc_type_calloc(0x100uLL, 0x10uLL, 0x80040803F642BuLL);
    if (!result) {
      goto LABEL_124;
    }
    os_log_type_t v27 = result;
    os_log_type_t v28 = &v26[8 * v23];
    unint64_t v29 = (unint64_t)&v26[8 * v25];
    if (v23 == v25)
    {
      if (v7 < 1)
      {
        if (v5 == v6) {
          size_t v48 = 1;
        }
        else {
          size_t v48 = v7 >> 2;
        }
        uint64_t result = (char *)malloc_type_calloc(v48, 8uLL, 0x80040B8603338uLL);
        if (!result) {
          goto LABEL_124;
        }
        os_log_type_t v49 = result;
        os_log_type_t v28 = &result[8 * (v48 >> 2)];
        unint64_t v29 = (unint64_t)&result[8 * v48];
        free(v26);
        BOOL v26 = v49;
      }
      else
      {
        unint64_t v30 = v23 + 2;
        if (v23 >= -1) {
          unint64_t v30 = v23 + 1;
        }
        v28 -= 8 * (v30 >> 1);
      }
    }
    *(void *)os_log_type_t v28 = v27;
    uint64_t v50 = v28 + 8;
    uint64_t v51 = *((void *)&xmmword_1EB267888 + 1);
    if (*((void *)&xmmword_1EB267888 + 1) == (void)xmmword_1EB267888)
    {
      os_log_type_t v55 = v28;
      BOOL v53 = v28 + 8;
LABEL_75:
      os_log_type_t v72 = (void *)qword_1EB267880;
      qword_1EB267880 = (uint64_t)v26;
      *(void *)&xmmword_1EB267888 = v55;
      *((void *)&xmmword_1EB267888 + 1) = v53;
      qword_1EB267898 = v29;
      uint64_t v9 = v104;
      uint64_t v4 = a2;
      uint64_t v3 = a3;
      if (v72) {
        free(v72);
      }
      goto LABEL_88;
    }
    while (v28 != v26)
    {
      os_log_type_t v52 = v28;
      BOOL v53 = v50;
LABEL_52:
      uint64_t v54 = *(void *)(v51 - 8);
      v51 -= 8;
      *((void *)v52 - 1) = v54;
      os_log_type_t v55 = v52 - 8;
      uint64_t v50 = v53;
      os_log_type_t v28 = v55;
      if (v51 == (void)xmmword_1EB267888) {
        goto LABEL_75;
      }
    }
    if ((unint64_t)v50 < v29)
    {
      uint64_t v56 = (uint64_t)(v29 - (void)v50) >> 3;
      if (v56 >= -1) {
        unint64_t v57 = v56 + 1;
      }
      else {
        unint64_t v57 = v56 + 2;
      }
      BOOL v53 = &v50[8 * (v57 >> 1)];
      os_log_type_t v52 = &v28[8 * (v57 >> 1)];
      if (v50 == v28)
      {
        BOOL v26 = v50;
      }
      else
      {
        memmove(&v28[8 * (v57 >> 1)], v28, v50 - v28);
        BOOL v26 = v28;
      }
      goto LABEL_52;
    }
    if ((char *)v29 == v28) {
      size_t v58 = 1;
    }
    else {
      size_t v58 = (uint64_t)(v29 - (void)v28) >> 2;
    }
    uint64_t result = (char *)malloc_type_calloc(v58, 8uLL, 0x80040B8603338uLL);
    if (!result) {
      goto LABEL_124;
    }
    BOOL v26 = result;
    unint64_t v59 = (v58 + 3) >> 2;
    os_log_type_t v52 = &result[8 * v59];
    BOOL v53 = v52;
    int64_t v60 = v50 - v28;
    if (v50 != v28)
    {
      BOOL v53 = &v52[v60 & 0xFFFFFFFFFFFFFFF8];
      unint64_t v61 = v60 - 8;
      os_log_type_t v62 = &result[8 * v59];
      os_log_type_t v63 = v28;
      if (v61 >= 0x38)
      {
        uint64_t v64 = 8 * v59;
        os_log_type_t v62 = &result[8 * v59];
        os_log_type_t v63 = v28;
        if ((unint64_t)(v62 - v28) >= 0x20)
        {
          uint64_t v65 = (v61 >> 3) + 1;
          uint64_t v66 = 8 * (v65 & 0x3FFFFFFFFFFFFFFCLL);
          os_log_type_t v62 = &v52[v66];
          BOOL v67 = (long long *)(v28 + 16);
          BOOL v68 = &result[v64 + 16];
          uint64_t v69 = v65 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v70 = *v67;
            *((_OWORD *)v68 - 1) = *(v67 - 1);
            *(_OWORD *)BOOL v68 = v70;
            v67 += 2;
            v68 += 32;
            v69 -= 4;
          }
          while (v69);
          if (v65 == (v65 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_72;
          }
          os_log_type_t v63 = &v28[v66];
        }
      }
      do
      {
        uint64_t v71 = *(void *)v63;
        v63 += 8;
        *(void *)os_log_type_t v62 = v71;
        v62 += 8;
      }
      while (v62 != v53);
    }
LABEL_72:
    unint64_t v29 = (unint64_t)&result[8 * v58];
    free(v28);
    goto LABEL_52;
  }
  qword_1EB2678A0 -= 256;
  BOOL v12 = (char *)(xmmword_1EB267888 + 8);
  uint64_t v11 = *(void *)xmmword_1EB267888;
  *(void *)&xmmword_1EB267888 = xmmword_1EB267888 + 8;
  if (qword_1EB267898 != *((void *)&xmmword_1EB267888 + 1))
  {
LABEL_87:
    *(void *)uint64_t v5 = v11;
    *((void *)&xmmword_1EB267888 + 1) += 8;
    goto LABEL_88;
  }
  uint64_t v13 = (uint64_t)&v12[-qword_1EB267880];
  if ((unint64_t)v12 > qword_1EB267880)
  {
    uint64_t v14 = v13 >> 3;
    BOOL v15 = v13 >> 3 < -1;
    uint64_t v16 = (v13 >> 3) + 2;
    if (v15) {
      uint64_t v17 = v16;
    }
    else {
      uint64_t v17 = v14 + 1;
    }
    uint64_t v18 = v17 >> 1;
    uint64_t v19 = -v18;
    os_log_type_t v20 = &v12[-8 * v18];
    uint64_t v21 = *((void *)&xmmword_1EB267888 + 1) - (void)v12;
    if (*((char **)&xmmword_1EB267888 + 1) == v12)
    {
      uint64_t v22 = *((void *)&xmmword_1EB267888 + 1);
    }
    else
    {
      memmove(&v12[-8 * v18], v12, *((void *)&xmmword_1EB267888 + 1) - (void)v12);
      uint64_t v22 = xmmword_1EB267888;
    }
    uint64_t v5 = &v20[v21];
    *(void *)&xmmword_1EB267888 = v22 + 8 * v19;
    *((void *)&xmmword_1EB267888 + 1) = &v20[v21];
    goto LABEL_87;
  }
  if (*((void *)&xmmword_1EB267888 + 1) == qword_1EB267880) {
    size_t v31 = 1;
  }
  else {
    size_t v31 = (*((void *)&xmmword_1EB267888 + 1) - qword_1EB267880) >> 2;
  }
  uint64_t result = (char *)malloc_type_calloc(v31, 8uLL, 0x80040B8603338uLL);
  if (result)
  {
    BOOL v32 = &result[8 * (v31 >> 2)];
    __int16 v33 = (uint64_t *)xmmword_1EB267888;
    uint64_t v5 = v32;
    uint64_t v34 = *((void *)&xmmword_1EB267888 + 1) - xmmword_1EB267888;
    if (*((void *)&xmmword_1EB267888 + 1) == (void)xmmword_1EB267888) {
      goto LABEL_85;
    }
    uint64_t v5 = &v32[v34 & 0xFFFFFFFFFFFFFFF8];
    unint64_t v35 = v34 - 8;
    if (v35 >= 0x38)
    {
      os_log_type_t v73 = &result[8 * (v31 >> 2)];
      uint64_t v36 = v73;
      if ((unint64_t)&v73[-xmmword_1EB267888] >= 0x20)
      {
        uint64_t v74 = (v35 >> 3) + 1;
        uint64_t v75 = 8 * (v74 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v36 = &v32[v75];
        id v76 = (long long *)(xmmword_1EB267888 + 16);
        char v77 = v73 + 16;
        uint64_t v78 = v74 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v79 = *v76;
          *(v77 - 1) = *(v76 - 1);
          *char v77 = v79;
          v76 += 2;
          v77 += 2;
          v78 -= 4;
        }
        while (v78);
        if (v74 == (v74 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_85:
          int v81 = (void *)qword_1EB267880;
          qword_1EB267880 = (uint64_t)result;
          *(void *)&xmmword_1EB267888 = &result[8 * (v31 >> 2)];
          *((void *)&xmmword_1EB267888 + 1) = v5;
          qword_1EB267898 = (uint64_t)&result[8 * v31];
          if (v81)
          {
            free(v81);
            uint64_t v5 = (char *)*((void *)&xmmword_1EB267888 + 1);
          }
          goto LABEL_87;
        }
        __int16 v33 = (uint64_t *)((char *)v33 + v75);
      }
    }
    else
    {
      uint64_t v36 = &result[8 * (v31 >> 2)];
    }
    do
    {
      uint64_t v80 = *v33++;
      *(void *)uint64_t v36 = v80;
      v36 += 8;
    }
    while (v36 != v5);
    goto LABEL_85;
  }
LABEL_124:
  __break(1u);
  return result;
}

uint64_t __nw_dictionary_apply_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t pointer = xpc_dictionary_get_pointer();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);

  return v5(v3, a2, pointer);
}

void sub_183269D00(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_183269E54(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

id nw_browser_copy_new_result_locked(NWConcrete_nw_browser *a1, const char *a2)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1;
  uint64_t v4 = v3;
  if (v3)
  {
    if (a2)
    {
      *(void *)netcore_stats_tcp_report buf = 0;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x3032000000;
      os_log_type_t v28 = __Block_byref_object_copy__57606;
      unint64_t v29 = __Block_byref_object_dispose__57607;
      id v30 = 0;
      uint64_t v5 = (atomic_uchar *)*((void *)v3 + 18);
      v21[0] = MEMORY[0x1E4F143A8];
      v21[1] = 3221225472;
      v21[2] = ___ZL33nw_browser_copy_new_result_lockedP21NWConcrete_nw_browserPKc_block_invoke;
      v21[3] = &unk_1E5249D20;
      uint64_t v23 = buf;
      BOOL v24 = a2;
      uint64_t v22 = v3;
      nw_array_apply(v5, (uint64_t)v21);
      id v6 = *(id *)(*(void *)&buf[8] + 40);

      _Block_object_dispose(buf, 8);
      goto LABEL_4;
    }
    BOOL v12 = __nwlog_obj();
    *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_browser_copy_new_result_locked";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (__nwlog_fault(v9, &type, &v25))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        unint64_t v10 = __nwlog_obj();
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_browser_copy_new_result_locked";
          _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null key_name", buf, 0xCu);
        }
LABEL_36:

        goto LABEL_37;
      }
      if (!v25)
      {
        unint64_t v10 = __nwlog_obj();
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_browser_copy_new_result_locked";
          _os_log_impl(&dword_1830D4000, v10, v20, "%{public}s called with null key_name, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      unint64_t v10 = __nwlog_obj();
      os_log_type_t v17 = type;
      BOOL v18 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_browser_copy_new_result_locked";
          _os_log_impl(&dword_1830D4000, v10, v17, "%{public}s called with null key_name, no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v18)
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_browser_copy_new_result_locked";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&void buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v10, v17, "%{public}s called with null key_name, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_24;
    }
  }
  else
  {
    uint64_t v8 = __nwlog_obj();
    *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_browser_copy_new_result_locked";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (__nwlog_fault(v9, &type, &v25))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        unint64_t v10 = __nwlog_obj();
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_browser_copy_new_result_locked";
          _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null browser", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (!v25)
      {
        unint64_t v10 = __nwlog_obj();
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_browser_copy_new_result_locked";
          _os_log_impl(&dword_1830D4000, v10, v19, "%{public}s called with null browser, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      unint64_t v10 = __nwlog_obj();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_browser_copy_new_result_locked";
          _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null browser, no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v16)
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_browser_copy_new_result_locked";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&void buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null browser, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_24:

      free(backtrace_string);
    }
  }
LABEL_37:
  if (v9) {
    free(v9);
  }
  id v6 = 0;
LABEL_4:

  return v6;
}

void nw_connection_receive_with_context(void *a1, void *a2, unsigned int a3, unsigned int a4, void *a5)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v9 = a1;
  id v10 = a2;
  id v11 = a5;
  if (v10)
  {
    nw_connection_receive_internal(v9, v10, a3, a4, v11);
    goto LABEL_3;
  }
  BOOL v12 = __nwlog_obj();
  *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
  uint64_t v23 = "nw_connection_receive_with_context";
  os_log_type_t v13 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v20 = 0;
  if (__nwlog_fault(v13, &type, &v20))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        uint64_t v23 = "nw_connection_receive_with_context";
        _os_log_impl(&dword_1830D4000, v14, v15, "%{public}s called with null message", buf, 0xCu);
      }
    }
    else if (v20)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v14 = __nwlog_obj();
      os_log_type_t v17 = type;
      BOOL v18 = os_log_type_enabled(v14, type);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
          uint64_t v23 = "nw_connection_receive_with_context";
          __int16 v24 = 2082;
          char v25 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v14, v17, "%{public}s called with null message, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v18)
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        uint64_t v23 = "nw_connection_receive_with_context";
        _os_log_impl(&dword_1830D4000, v14, v17, "%{public}s called with null message, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v14 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        uint64_t v23 = "nw_connection_receive_with_context";
        _os_log_impl(&dword_1830D4000, v14, v19, "%{public}s called with null message, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v13) {
    free(v13);
  }
LABEL_3:
}

void sub_18326A6B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_endpoint_flow_validate_delegation(NWConcrete_nw_endpoint_handler *a1)
{
  uint64_t v391 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = a1;
  id v364 = v1;
  if (!v1)
  {
    uint64_t v319 = __nwlog_obj();
    *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
    __int16 v376 = "nw_endpoint_handler_get_mode";
    uint64_t v320 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    char v374 = 0;
    if (__nwlog_fault(v320, type, &v374))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        uint64_t v321 = __nwlog_obj();
        os_log_type_t v322 = type[0];
        if (os_log_type_enabled(v321, type[0]))
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          __int16 v376 = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_1830D4000, v321, v322, "%{public}s called with null handler", buf, 0xCu);
        }
      }
      else if (v374)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        uint64_t v321 = __nwlog_obj();
        os_log_type_t v324 = type[0];
        BOOL v325 = os_log_type_enabled(v321, type[0]);
        if (backtrace_string)
        {
          if (v325)
          {
            *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
            __int16 v376 = "nw_endpoint_handler_get_mode";
            __int16 v377 = 2082;
            __int16 v378 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v321, v324, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_265;
        }
        if (v325)
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          __int16 v376 = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_1830D4000, v321, v324, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        uint64_t v321 = __nwlog_obj();
        os_log_type_t v326 = type[0];
        if (os_log_type_enabled(v321, type[0]))
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          __int16 v376 = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_1830D4000, v321, v326, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_265:
    if (v320) {
      free(v320);
    }
    unsigned int mode = 0;
LABEL_268:
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v327 = (id)gLogObj;
    if (mode > 5) {
      uint64_t v328 = "unknown-mode";
    }
    else {
      uint64_t v328 = off_1E523FB08[mode];
    }
    *(_DWORD *)netcore_stats_tcp_report buf = 136446722;
    __int16 v376 = "nw_endpoint_flow_validate_delegation";
    __int16 v377 = 2082;
    __int16 v378 = (char *)v328;
    __int16 v379 = 2082;
    __int16 v380 = "flow";
    uint64_t v329 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    char v374 = 0;
    if (__nwlog_fault(v329, type, &v374))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v330 = (id)gLogObj;
        os_log_type_t v331 = type[0];
        if (os_log_type_enabled(v330, type[0]))
        {
          if (mode > 5) {
            uint64_t v332 = "unknown-mode";
          }
          else {
            uint64_t v332 = off_1E523FB08[mode];
          }
          *(_DWORD *)netcore_stats_tcp_report buf = 136446722;
          __int16 v376 = "nw_endpoint_flow_validate_delegation";
          __int16 v377 = 2082;
          __int16 v378 = (char *)v332;
          __int16 v379 = 2082;
          __int16 v380 = "flow";
          _os_log_impl(&dword_1830D4000, v330, v331, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
        }
      }
      else if (v374)
      {
        uint64_t v333 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v330 = (id)gLogObj;
        os_log_type_t v334 = type[0];
        BOOL v335 = os_log_type_enabled(v330, type[0]);
        if (v333)
        {
          if (v335)
          {
            if (mode > 5) {
              uint64_t v336 = "unknown-mode";
            }
            else {
              uint64_t v336 = off_1E523FB08[mode];
            }
            *(_DWORD *)netcore_stats_tcp_report buf = 136446978;
            __int16 v376 = "nw_endpoint_flow_validate_delegation";
            __int16 v377 = 2082;
            __int16 v378 = (char *)v336;
            __int16 v379 = 2082;
            __int16 v380 = "flow";
            __int16 v381 = 2082;
            __int16 v382 = v333;
            _os_log_impl(&dword_1830D4000, v330, v334, "%{public}s Handler is in mode %{public}s, expected %{public}s, dumping backtrace:%{public}s", buf, 0x2Au);
          }

          free(v333);
          if (!v329) {
            goto LABEL_302;
          }
          goto LABEL_301;
        }
        if (v335)
        {
          if (mode > 5) {
            uint64_t v339 = "unknown-mode";
          }
          else {
            uint64_t v339 = off_1E523FB08[mode];
          }
          *(_DWORD *)netcore_stats_tcp_report buf = 136446722;
          __int16 v376 = "nw_endpoint_flow_validate_delegation";
          __int16 v377 = 2082;
          __int16 v378 = (char *)v339;
          __int16 v379 = 2082;
          __int16 v380 = "flow";
          _os_log_impl(&dword_1830D4000, v330, v334, "%{public}s Handler is in mode %{public}s, expected %{public}s, no backtrace", buf, 0x20u);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v330 = (id)gLogObj;
        os_log_type_t v337 = type[0];
        if (os_log_type_enabled(v330, type[0]))
        {
          if (mode > 5) {
            uint64_t v338 = "unknown-mode";
          }
          else {
            uint64_t v338 = off_1E523FB08[mode];
          }
          *(_DWORD *)netcore_stats_tcp_report buf = 136446722;
          __int16 v376 = "nw_endpoint_flow_validate_delegation";
          __int16 v377 = 2082;
          __int16 v378 = (char *)v338;
          __int16 v379 = 2082;
          __int16 v380 = "flow";
          _os_log_impl(&dword_1830D4000, v330, v337, "%{public}s Handler is in mode %{public}s, expected %{public}s, backtrace limit exceeded", buf, 0x20u);
        }
      }
    }
    if (!v329)
    {
LABEL_302:
      uint64_t v9 = 0;
      goto LABEL_303;
    }
LABEL_301:
    free(v329);
    goto LABEL_302;
  }
  uint64_t v2 = v1;
  unsigned int mode = v1->mode;

  if (mode != 2) {
    goto LABEL_268;
  }
  uint64_t v4 = v2;
  id v5 = v4[4];

  if (nw_endpoint_flow_validate_delegation(NWConcrete_nw_endpoint_handler *)::onceToken != -1) {
    dispatch_once(&nw_endpoint_flow_validate_delegation(NWConcrete_nw_endpoint_handler *)::onceToken, &__block_literal_global_212);
  }
  int pid_to_uuid_mapping_failed = nw_parameters_get_pid_to_uuid_mapping_failed(v5);
  int bundle_id_to_uuid_mapping_failed = nw_parameters_get_bundle_id_to_uuid_mapping_failed(v5);
  if ((pid_to_uuid_mapping_failed & 1) != 0 || bundle_id_to_uuid_mapping_failed)
  {
    nw_endpoint_t v360 = v5;
    if ((pid_to_uuid_mapping_failed & bundle_id_to_uuid_mapping_failed) == 1)
    {
      int v10 = _os_feature_enabled_impl();
      id v11 = v4;
      char v12 = *((unsigned char *)v11 + 268);

      uint64_t v361 = v4;
      if (v10)
      {
        if ((v12 & 0x20) != 0) {
          goto LABEL_168;
        }
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        id v13 = (id)gconnectionLogObj;
        uint64_t v14 = v11;

        os_log_type_t v15 = v14;
        char v16 = *((unsigned char *)v11 + 268);

        if (v16) {
          os_log_type_t v17 = "dry-run ";
        }
        else {
          os_log_type_t v17 = "";
        }
        nw_endpoint_t v18 = nw_endpoint_handler_copy_endpoint(v15);
        logging_description = nw_endpoint_get_logging_description(v18);
        nw_endpoint_t v353 = (char *)(v14 + 21);
        char v20 = v15;
        uint64_t v21 = v20;
        uint64_t v22 = v20[30];
        if (v22 > 5) {
          uint64_t v23 = "unknown-state";
        }
        else {
          uint64_t v23 = off_1E523FB38[v22];
        }

        __int16 v92 = v21;
        uint64_t v93 = v92;
        uint64_t v94 = "path";
        switch(v364->mode)
        {
          case 0:
            break;
          case 1:
            uint64_t v94 = "resolver";
            break;
          case 2:
            uint64_t v94 = nw_endpoint_flow_mode_string(v92[31]);
            break;
          case 3:
            uint64_t v94 = "proxy";
            break;
          case 4:
            uint64_t v94 = "fallback";
            break;
          case 5:
            uint64_t v94 = "transform";
            break;
          default:
            uint64_t v94 = "unknown-mode";
            break;
        }

        uint64_t v116 = v93;
        os_unfair_lock_lock((os_unfair_lock_t)v116 + 28);
        id v117 = v116[8];
        os_unfair_lock_unlock((os_unfair_lock_t)v116 + 28);

        id v118 = v117;
        *(_DWORD *)netcore_stats_tcp_report buf = 136448514;
        __int16 v376 = "nw_endpoint_flow_validate_delegation";
        __int16 v377 = 2082;
        __int16 v378 = v353;
        __int16 v379 = 2082;
        __int16 v380 = v17;
        __int16 v381 = 2082;
        __int16 v382 = (void *)logging_description;
        __int16 v383 = 2082;
        __int16 v384 = v23;
        __int16 v385 = 2082;
        __int16 v386 = v94;
        __int16 v387 = 2114;
        id v388 = v118;
        __int16 v389 = 1024;
        *(_DWORD *)__int16 v390 = nw_parameters_get_pid(v360);
        *(_WORD *)&v390[4] = 2082;
        *(void *)&v390[6] = nw_parameters_get_effective_bundle_id(v360);
        *(_WORD *)&v390[14] = 2082;
        *(void *)&v390[16] = "I";
        uint64_t v356 = (const char *)_os_log_send_and_compose_impl();

        type[0] = OS_LOG_TYPE_ERROR;
        char v374 = 0;
        uint64_t v119 = (char *)v356;
        if (!__nwlog_fault(v356, type, &v374)) {
          goto LABEL_129;
        }
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          uint64_t v120 = (id)gconnectionLogObj;
          os_log_type_t v121 = type[0];
          if (os_log_type_enabled(v120, type[0]))
          {
            id_string = nw_endpoint_handler_get_id_string(v116);
            os_log_type_t v123 = nw_endpoint_handler_dry_run_string(v116);
            logb = v120;
            nw_endpoint_t v124 = nw_endpoint_handler_copy_endpoint(v116);
            uint64_t v125 = nw_endpoint_get_logging_description(v124);
            BOOL v126 = nw_endpoint_handler_state_string(v116);
            uint64_t v127 = nw_endpoint_handler_mode_string(v116);
            id v128 = nw_endpoint_handler_copy_current_path(v116);
            int pid = nw_parameters_get_pid(v360);
            uint64_t effective_bundle_id = nw_parameters_get_effective_bundle_id(v360);
            *(_DWORD *)netcore_stats_tcp_report buf = 136448514;
            __int16 v376 = "nw_endpoint_flow_validate_delegation";
            __int16 v377 = 2082;
            __int16 v378 = (char *)id_string;
            __int16 v379 = 2082;
            __int16 v380 = v123;
            __int16 v381 = 2082;
            __int16 v382 = (void *)v125;
            __int16 v383 = 2082;
            __int16 v384 = v126;
            __int16 v385 = 2082;
            __int16 v386 = v127;
            __int16 v387 = 2114;
            id v388 = v128;
            __int16 v389 = 1024;
            *(_DWORD *)__int16 v390 = pid;
            *(_WORD *)&v390[4] = 2082;
            *(void *)&v390[6] = effective_bundle_id;
            *(_WORD *)&v390[14] = 2082;
            *(void *)&v390[16] = "I";
            _os_log_impl(&dword_1830D4000, logb, v121, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Network Delegation Failure: Invalid PID %d and Invalid Bundle ID \"%{public}s\" [%{public}s]", buf, 0x62u);

            uint64_t v120 = logb;
          }
        }
        else if (v374)
        {
          char v131 = __nw_create_backtrace_string();
          if (v131)
          {
            BOOL v132 = (char *)v131;
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
            }
            uint64_t v133 = (id)gconnectionLogObj;
            os_log_type_t v134 = type[0];
            if (os_log_type_enabled(v133, type[0]))
            {
              __int16 v135 = nw_endpoint_handler_get_id_string(v116);
              uint64_t v136 = nw_endpoint_handler_dry_run_string(v116);
              nw_endpoint_t v347 = nw_endpoint_handler_copy_endpoint(v116);
              __int16 v137 = nw_endpoint_get_logging_description(v347);
              msghdr v138 = nw_endpoint_handler_state_string(v116);
              __int16 v139 = nw_endpoint_handler_mode_string(v116);
              id v140 = nw_endpoint_handler_copy_current_path(v116);
              int v141 = nw_parameters_get_pid(v360);
              uint64_t v142 = nw_parameters_get_effective_bundle_id(v360);
              *(_DWORD *)netcore_stats_tcp_report buf = 136448770;
              __int16 v376 = "nw_endpoint_flow_validate_delegation";
              __int16 v377 = 2082;
              __int16 v378 = (char *)v135;
              __int16 v379 = 2082;
              __int16 v380 = v136;
              __int16 v381 = 2082;
              __int16 v382 = (void *)v137;
              __int16 v383 = 2082;
              __int16 v384 = v138;
              __int16 v385 = 2082;
              __int16 v386 = v139;
              __int16 v387 = 2114;
              id v388 = v140;
              __int16 v389 = 1024;
              *(_DWORD *)__int16 v390 = v141;
              *(_WORD *)&v390[4] = 2082;
              *(void *)&v390[6] = v142;
              *(_WORD *)&v390[14] = 2082;
              *(void *)&v390[16] = "I";
              *(_WORD *)&v390[24] = 2082;
              *(void *)&v390[26] = v132;
              _os_log_impl(&dword_1830D4000, v133, v134, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Network Delegation Failure: Invalid PID %d and Invalid Bundle ID \"%{public}s\" [%{public}s], dumping backtrace:%{public}s", buf, 0x6Cu);
            }
            free(v132);
            goto LABEL_128;
          }
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          uint64_t v120 = (id)gconnectionLogObj;
          os_log_type_t v164 = type[0];
          if (os_log_type_enabled(v120, type[0]))
          {
            unsigned int v165 = nw_endpoint_handler_get_id_string(v116);
            uint64_t v166 = nw_endpoint_handler_dry_run_string(v116);
            nw_endpoint_t logd = v120;
            nw_endpoint_t v167 = nw_endpoint_handler_copy_endpoint(v116);
            __int16 v168 = nw_endpoint_get_logging_description(v167);
            long long v169 = nw_endpoint_handler_state_string(v116);
            __int16 v170 = nw_endpoint_handler_mode_string(v116);
            id v171 = nw_endpoint_handler_copy_current_path(v116);
            int v172 = nw_parameters_get_pid(v360);
            uint64_t v173 = nw_parameters_get_effective_bundle_id(v360);
            *(_DWORD *)netcore_stats_tcp_report buf = 136448514;
            __int16 v376 = "nw_endpoint_flow_validate_delegation";
            __int16 v377 = 2082;
            __int16 v378 = (char *)v165;
            __int16 v379 = 2082;
            __int16 v380 = v166;
            __int16 v381 = 2082;
            __int16 v382 = (void *)v168;
            __int16 v383 = 2082;
            __int16 v384 = v169;
            __int16 v385 = 2082;
            __int16 v386 = v170;
            __int16 v387 = 2114;
            id v388 = v171;
            __int16 v389 = 1024;
            *(_DWORD *)__int16 v390 = v172;
            *(_WORD *)&v390[4] = 2082;
            *(void *)&v390[6] = v173;
            *(_WORD *)&v390[14] = 2082;
            *(void *)&v390[16] = "I";
            _os_log_impl(&dword_1830D4000, logd, v164, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Network Delegation Failure: Invalid PID %d and Invalid Bundle ID \"%{public}s\" [%{public}s], no backtrace", buf, 0x62u);

            uint64_t v120 = logd;
          }
        }
        else
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          uint64_t v120 = (id)gconnectionLogObj;
          os_log_type_t v143 = type[0];
          if (os_log_type_enabled(v120, type[0]))
          {
            uint64_t v144 = nw_endpoint_handler_get_id_string(v116);
            uint64_t v145 = nw_endpoint_handler_dry_run_string(v116);
            nw_endpoint_t logc = v120;
            nw_endpoint_t v146 = nw_endpoint_handler_copy_endpoint(v116);
            uint64_t v147 = nw_endpoint_get_logging_description(v146);
            uint64_t v148 = nw_endpoint_handler_state_string(v116);
            uint64_t v149 = nw_endpoint_handler_mode_string(v116);
            id v150 = nw_endpoint_handler_copy_current_path(v116);
            int v151 = nw_parameters_get_pid(v360);
            uint64_t v152 = nw_parameters_get_effective_bundle_id(v360);
            *(_DWORD *)netcore_stats_tcp_report buf = 136448514;
            __int16 v376 = "nw_endpoint_flow_validate_delegation";
            __int16 v377 = 2082;
            __int16 v378 = (char *)v144;
            __int16 v379 = 2082;
            __int16 v380 = v145;
            __int16 v381 = 2082;
            __int16 v382 = (void *)v147;
            __int16 v383 = 2082;
            __int16 v384 = v148;
            __int16 v385 = 2082;
            __int16 v386 = v149;
            __int16 v387 = 2114;
            id v388 = v150;
            __int16 v389 = 1024;
            *(_DWORD *)__int16 v390 = v151;
            *(_WORD *)&v390[4] = 2082;
            *(void *)&v390[6] = v152;
            *(_WORD *)&v390[14] = 2082;
            *(void *)&v390[16] = "I";
            _os_log_impl(&dword_1830D4000, logc, v143, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Network Delegation Failure: Invalid PID %d and Invalid Bundle ID \"%{public}s\" [%{public}s], backtrace limit exceeded", buf, 0x62u);

            uint64_t v120 = logc;
          }
        }

LABEL_128:
        uint64_t v119 = (char *)v356;
        goto LABEL_129;
      }
      if ((v12 & 0x20) != 0) {
        goto LABEL_168;
      }
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      unint64_t v59 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR))
      {
        int64_t v60 = v11;

        unint64_t v61 = v60;
        char v62 = *((unsigned char *)v11 + 268);

        if (v62) {
          os_log_type_t v63 = "dry-run ";
        }
        else {
          os_log_type_t v63 = "";
        }
        nw_endpoint_t v64 = nw_endpoint_handler_copy_endpoint(v61);
        uint64_t v65 = nw_endpoint_get_logging_description(v64);
        uint64_t v66 = (char *)(v60 + 21);
        BOOL v67 = v61;
        BOOL v68 = v67;
        uint64_t v69 = v67[30];
        if (v69 > 5) {
          long long v70 = "unknown-state";
        }
        else {
          long long v70 = off_1E523FB38[v69];
        }

        os_log_type_t v105 = v68;
        unsigned int v106 = v105;
        char v107 = "path";
        switch(v364->mode)
        {
          case 0:
            break;
          case 1:
            char v107 = "resolver";
            break;
          case 2:
            char v107 = nw_endpoint_flow_mode_string(v105[31]);
            break;
          case 3:
            char v107 = "proxy";
            break;
          case 4:
            char v107 = "fallback";
            break;
          case 5:
            char v107 = "transform";
            break;
          default:
            char v107 = "unknown-mode";
            break;
        }

        v216 = v106;
        os_unfair_lock_lock((os_unfair_lock_t)v216 + 28);
        id v217 = v216[8];
        os_unfair_lock_unlock((os_unfair_lock_t)v216 + 28);

        id v218 = v217;
        *(_DWORD *)netcore_stats_tcp_report buf = 136448514;
        __int16 v376 = "nw_endpoint_flow_validate_delegation";
        __int16 v377 = 2082;
        __int16 v378 = v66;
        __int16 v379 = 2082;
        __int16 v380 = v63;
        __int16 v381 = 2082;
        __int16 v382 = (void *)v65;
        __int16 v383 = 2082;
        __int16 v384 = v70;
        __int16 v385 = 2082;
        __int16 v386 = v107;
        __int16 v387 = 2114;
        id v388 = v218;
        __int16 v389 = 1024;
        *(_DWORD *)__int16 v390 = nw_parameters_get_pid(v360);
        *(_WORD *)&v390[4] = 2082;
        *(void *)&v390[6] = nw_parameters_get_effective_bundle_id(v360);
        *(_WORD *)&v390[14] = 2082;
        *(void *)&v390[16] = "I";
        _os_log_impl(&dword_1830D4000, v59, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Network Delegation Failure: Invalid PID %d and Invalid Bundle ID \"%{public}s\" [%{public}s]", buf, 0x62u);
      }
LABEL_167:

      uint64_t v4 = v361;
      goto LABEL_168;
    }
    if (bundle_id_to_uuid_mapping_failed)
    {
      int v24 = _os_feature_enabled_impl();
      char v25 = v4;
      char v26 = *((unsigned char *)v25 + 268);

      uint64_t v361 = v4;
      if (v24)
      {
        if ((v26 & 0x20) != 0) {
          goto LABEL_168;
        }
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        id v27 = (id)gconnectionLogObj;
        os_log_type_t v28 = v25;

        unint64_t v29 = v28;
        char v30 = *((unsigned char *)v25 + 268);

        if (v30) {
          uint64_t v31 = "dry-run ";
        }
        else {
          uint64_t v31 = "";
        }
        nw_endpoint_t v32 = nw_endpoint_handler_copy_endpoint(v29);
        __int16 v33 = nw_endpoint_get_logging_description(v32);
        uint64_t v34 = (char *)(v28 + 21);
        unint64_t v35 = v29;
        uint64_t v36 = v35;
        uint64_t v37 = v35[30];
        if (v37 > 5) {
          id v38 = "unknown-state";
        }
        else {
          id v38 = off_1E523FB38[v37];
        }

        int v102 = v36;
        BOOL v103 = v102;
        uint64_t v104 = "path";
        switch(v364->mode)
        {
          case 0:
            break;
          case 1:
            uint64_t v104 = "resolver";
            break;
          case 2:
            uint64_t v104 = nw_endpoint_flow_mode_string(v102[31]);
            break;
          case 3:
            uint64_t v104 = "proxy";
            break;
          case 4:
            uint64_t v104 = "fallback";
            break;
          case 5:
            uint64_t v104 = "transform";
            break;
          default:
            uint64_t v104 = "unknown-mode";
            break;
        }

        uint64_t v182 = v103;
        os_unfair_lock_lock((os_unfair_lock_t)v182 + 28);
        id v183 = v182[8];
        os_unfair_lock_unlock((os_unfair_lock_t)v182 + 28);

        id v184 = v183;
        *(_DWORD *)netcore_stats_tcp_report buf = 136448258;
        __int16 v376 = "nw_endpoint_flow_validate_delegation";
        __int16 v377 = 2082;
        __int16 v378 = v34;
        __int16 v379 = 2082;
        __int16 v380 = v31;
        __int16 v381 = 2082;
        __int16 v382 = (void *)v33;
        __int16 v383 = 2082;
        __int16 v384 = v38;
        __int16 v385 = 2082;
        __int16 v386 = v104;
        __int16 v387 = 2114;
        id v388 = v184;
        __int16 v389 = 2082;
        *(void *)__int16 v390 = nw_parameters_get_effective_bundle_id(v360);
        *(_WORD *)&v390[8] = 2082;
        *(void *)&v390[10] = "I";
        uint64_t v119 = (char *)_os_log_send_and_compose_impl();

        type[0] = OS_LOG_TYPE_ERROR;
        char v374 = 0;
        if (!__nwlog_fault(v119, type, &v374)) {
          goto LABEL_129;
        }
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          uint64_t v185 = (id)gconnectionLogObj;
          os_log_type_t v186 = type[0];
          if (os_log_type_enabled(v185, type[0]))
          {
            uint64_t v187 = nw_endpoint_handler_get_id_string(v182);
            uint64_t v188 = nw_endpoint_handler_dry_run_string(v182);
            nw_endpoint_t v189 = nw_endpoint_handler_copy_endpoint(v182);
            uint64_t v190 = nw_endpoint_get_logging_description(v189);
            uint64_t v191 = nw_endpoint_handler_state_string(v182);
            uint64_t v192 = nw_endpoint_handler_mode_string(v182);
            id v193 = nw_endpoint_handler_copy_current_path(v182);
            uint64_t v194 = nw_parameters_get_effective_bundle_id(v360);
            *(_DWORD *)netcore_stats_tcp_report buf = 136448258;
            __int16 v376 = "nw_endpoint_flow_validate_delegation";
            __int16 v377 = 2082;
            __int16 v378 = (char *)v187;
            __int16 v379 = 2082;
            __int16 v380 = v188;
            __int16 v381 = 2082;
            __int16 v382 = (void *)v190;
            __int16 v383 = 2082;
            __int16 v384 = v191;
            __int16 v385 = 2082;
            __int16 v386 = v192;
            __int16 v387 = 2114;
            id v388 = v193;
            __int16 v389 = 2082;
            *(void *)__int16 v390 = v194;
            *(_WORD *)&v390[8] = 2082;
            *(void *)&v390[10] = "I";
            _os_log_impl(&dword_1830D4000, v185, v186, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Network Delegation Failure: Invalid Bundle ID \"%{public}s\" [%{public}s]", buf, 0x5Cu);
          }
        }
        else if (v374)
        {
          unsigned int v195 = __nw_create_backtrace_string();
          if (v195)
          {
            id v196 = (char *)v195;
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
            }
            nw_endpoint_t v197 = (id)gconnectionLogObj;
            os_log_type_t v198 = type[0];
            if (os_log_type_enabled(v197, type[0]))
            {
              uint64_t v199 = nw_endpoint_handler_get_id_string(v182);
              uint64_t v200 = nw_endpoint_handler_dry_run_string(v182);
              uint64_t v201 = v199;
              nw_endpoint_t v358 = nw_endpoint_handler_copy_endpoint(v182);
              uint64_t v202 = nw_endpoint_get_logging_description(v358);
              uint64_t v203 = nw_endpoint_handler_state_string(v182);
              uint64_t v204 = nw_endpoint_handler_mode_string(v182);
              id v205 = nw_endpoint_handler_copy_current_path(v182);
              uint64_t v206 = nw_parameters_get_effective_bundle_id(v360);
              *(_DWORD *)netcore_stats_tcp_report buf = 136448514;
              __int16 v376 = "nw_endpoint_flow_validate_delegation";
              __int16 v377 = 2082;
              __int16 v378 = (char *)v201;
              __int16 v379 = 2082;
              __int16 v380 = v200;
              __int16 v381 = 2082;
              __int16 v382 = (void *)v202;
              __int16 v383 = 2082;
              __int16 v384 = v203;
              __int16 v385 = 2082;
              __int16 v386 = v204;
              __int16 v387 = 2114;
              id v388 = v205;
              __int16 v389 = 2082;
              *(void *)__int16 v390 = v206;
              *(_WORD *)&v390[8] = 2082;
              *(void *)&v390[10] = "I";
              *(_WORD *)&v390[18] = 2082;
              *(void *)&v390[20] = v196;
              _os_log_impl(&dword_1830D4000, v197, v198, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Network Delegation Failure: Invalid Bundle ID \"%{public}s\" [%{public}s], dumping backtrace:%{public}s", buf, 0x66u);
            }
            free(v196);
            goto LABEL_129;
          }
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          uint64_t v185 = (id)gconnectionLogObj;
          os_log_type_t v275 = type[0];
          if (os_log_type_enabled(v185, type[0]))
          {
            char v276 = nw_endpoint_handler_get_id_string(v182);
            nw_endpoint_t v277 = nw_endpoint_handler_dry_run_string(v182);
            nw_endpoint_t v278 = nw_endpoint_handler_copy_endpoint(v182);
            uint64_t v279 = nw_endpoint_get_logging_description(v278);
            uint64_t v280 = nw_endpoint_handler_state_string(v182);
            uint64_t v281 = nw_endpoint_handler_mode_string(v182);
            id v282 = nw_endpoint_handler_copy_current_path(v182);
            uint64_t v283 = nw_parameters_get_effective_bundle_id(v360);
            *(_DWORD *)netcore_stats_tcp_report buf = 136448258;
            __int16 v376 = "nw_endpoint_flow_validate_delegation";
            __int16 v377 = 2082;
            __int16 v378 = (char *)v276;
            __int16 v379 = 2082;
            __int16 v380 = v277;
            __int16 v381 = 2082;
            __int16 v382 = (void *)v279;
            __int16 v383 = 2082;
            __int16 v384 = v280;
            __int16 v385 = 2082;
            __int16 v386 = v281;
            __int16 v387 = 2114;
            id v388 = v282;
            __int16 v389 = 2082;
            *(void *)__int16 v390 = v283;
            *(_WORD *)&v390[8] = 2082;
            *(void *)&v390[10] = "I";
            _os_log_impl(&dword_1830D4000, v185, v275, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Network Delegation Failure: Invalid Bundle ID \"%{public}s\" [%{public}s], no backtrace", buf, 0x5Cu);
          }
        }
        else
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          uint64_t v185 = (id)gconnectionLogObj;
          os_log_type_t v207 = type[0];
          if (os_log_type_enabled(v185, type[0]))
          {
            uint64_t v208 = nw_endpoint_handler_get_id_string(v182);
            uint64_t v209 = nw_endpoint_handler_dry_run_string(v182);
            nw_endpoint_t v210 = nw_endpoint_handler_copy_endpoint(v182);
            char v211 = nw_endpoint_get_logging_description(v210);
            v212 = nw_endpoint_handler_state_string(v182);
            uint32_t v213 = nw_endpoint_handler_mode_string(v182);
            id v214 = nw_endpoint_handler_copy_current_path(v182);
            uint64_t v215 = nw_parameters_get_effective_bundle_id(v360);
            *(_DWORD *)netcore_stats_tcp_report buf = 136448258;
            __int16 v376 = "nw_endpoint_flow_validate_delegation";
            __int16 v377 = 2082;
            __int16 v378 = (char *)v208;
            __int16 v379 = 2082;
            __int16 v380 = v209;
            __int16 v381 = 2082;
            __int16 v382 = (void *)v211;
            __int16 v383 = 2082;
            __int16 v384 = v212;
            __int16 v385 = 2082;
            __int16 v386 = v213;
            __int16 v387 = 2114;
            id v388 = v214;
            __int16 v389 = 2082;
            *(void *)__int16 v390 = v215;
            *(_WORD *)&v390[8] = 2082;
            *(void *)&v390[10] = "I";
            _os_log_impl(&dword_1830D4000, v185, v207, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Network Delegation Failure: Invalid Bundle ID \"%{public}s\" [%{public}s], backtrace limit exceeded", buf, 0x5Cu);
          }
        }

LABEL_129:
        uint64_t v4 = v361;
        if (v119) {
          free(v119);
        }
        goto LABEL_168;
      }
      if ((v26 & 0x20) != 0) {
        goto LABEL_168;
      }
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      unint64_t v59 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR))
      {
        uint64_t v85 = nw_endpoint_handler_get_id_string(v25);
        uint64_t v86 = nw_endpoint_handler_dry_run_string(v25);
        nw_endpoint_t v87 = nw_endpoint_handler_copy_endpoint(v25);
        __int16 v88 = nw_endpoint_get_logging_description(v87);
        uint64_t v89 = nw_endpoint_handler_state_string(v25);
        uint64_t v90 = nw_endpoint_handler_mode_string(v25);
        id v91 = nw_endpoint_handler_copy_current_path(v25);
        *(_DWORD *)netcore_stats_tcp_report buf = 136448258;
        __int16 v376 = "nw_endpoint_flow_validate_delegation";
        __int16 v377 = 2082;
        __int16 v378 = (char *)v85;
        __int16 v379 = 2082;
        __int16 v380 = v86;
        __int16 v381 = 2082;
        __int16 v382 = (void *)v88;
        __int16 v383 = 2082;
        __int16 v384 = v89;
        __int16 v385 = 2082;
        __int16 v386 = v90;
        __int16 v387 = 2114;
        id v388 = v91;
        __int16 v389 = 2082;
        *(void *)__int16 v390 = nw_parameters_get_effective_bundle_id(v360);
        *(_WORD *)&v390[8] = 2082;
        *(void *)&v390[10] = "I";
        _os_log_impl(&dword_1830D4000, v59, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Network Delegation Failure: Invalid Bundle ID \"%{public}s\" [%{public}s]", buf, 0x5Cu);
      }
      goto LABEL_167;
    }
    if (!pid_to_uuid_mapping_failed) {
      goto LABEL_168;
    }
    int v39 = _os_feature_enabled_impl();
    char logging_disabled = nw_endpoint_handler_get_logging_disabled(v4);
    uint64_t v361 = v4;
    if (!v39)
    {
      if (logging_disabled) {
        goto LABEL_168;
      }
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      unint64_t v59 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR))
      {
        long long v95 = nw_endpoint_handler_get_id_string(v4);
        uint64_t v96 = nw_endpoint_handler_dry_run_string(v4);
        nw_endpoint_t v97 = nw_endpoint_handler_copy_endpoint(v4);
        os_log_type_t v98 = nw_endpoint_get_logging_description(v97);
        uint64_t v99 = nw_endpoint_handler_state_string(v4);
        os_log_type_t v100 = nw_endpoint_handler_mode_string(v4);
        id v101 = nw_endpoint_handler_copy_current_path(v4);
        *(_DWORD *)netcore_stats_tcp_report buf = 136448258;
        __int16 v376 = "nw_endpoint_flow_validate_delegation";
        __int16 v377 = 2082;
        __int16 v378 = (char *)v95;
        __int16 v379 = 2082;
        __int16 v380 = v96;
        __int16 v381 = 2082;
        __int16 v382 = (void *)v98;
        __int16 v383 = 2082;
        __int16 v384 = v99;
        __int16 v385 = 2082;
        __int16 v386 = v100;
        __int16 v387 = 2114;
        id v388 = v101;
        __int16 v389 = 1024;
        *(_DWORD *)__int16 v390 = nw_parameters_get_pid(v5);
        *(_WORD *)&v390[4] = 2082;
        *(void *)&v390[6] = "I";
        _os_log_impl(&dword_1830D4000, v59, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Network Delegation Failure: Invalid PID %d [%{public}s]", buf, 0x58u);
      }
      goto LABEL_167;
    }
    if (logging_disabled) {
      goto LABEL_168;
    }
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
    }
    id v354 = (id)gconnectionLogObj;
    uint64_t v41 = nw_endpoint_handler_get_id_string(v4);
    uint64_t v42 = nw_endpoint_handler_dry_run_string(v4);
    nw_endpoint_t v43 = nw_endpoint_handler_copy_endpoint(v4);
    uint64_t v44 = nw_endpoint_get_logging_description(v43);
    uint64_t v45 = nw_endpoint_handler_state_string(v4);
    os_log_type_t v46 = nw_endpoint_handler_mode_string(v4);
    id v47 = nw_endpoint_handler_copy_current_path(v4);
    *(_DWORD *)netcore_stats_tcp_report buf = 136448258;
    __int16 v376 = "nw_endpoint_flow_validate_delegation";
    __int16 v377 = 2082;
    __int16 v378 = (char *)v41;
    __int16 v379 = 2082;
    __int16 v380 = v42;
    __int16 v381 = 2082;
    __int16 v382 = (void *)v44;
    __int16 v383 = 2082;
    __int16 v384 = v45;
    __int16 v385 = 2082;
    __int16 v386 = v46;
    __int16 v387 = 2114;
    id v388 = v47;
    __int16 v389 = 1024;
    *(_DWORD *)__int16 v390 = nw_parameters_get_pid(v5);
    *(_WORD *)&v390[4] = 2082;
    *(void *)&v390[6] = "I";
    log = (const char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    char v374 = 0;
    size_t v48 = (char *)log;
    if ((__nwlog_fault(log, type, &v374) & 1) == 0)
    {
LABEL_247:
      uint64_t v4 = v361;
      if (v48) {
        free(v48);
      }
LABEL_168:
      if (nw_endpoint_flow_validate_delegation(NWConcrete_nw_endpoint_handler *)::delegation_allowlist) {
        goto LABEL_169;
      }
LABEL_234:
      uint64_t v9 = 1;
      id v5 = v360;
      goto LABEL_235;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      os_log_type_t v49 = (id)gconnectionLogObj;
      os_log_type_t v50 = type[0];
      if (os_log_type_enabled(v49, type[0]))
      {
        uint64_t v51 = nw_endpoint_handler_get_id_string(v4);
        os_log_type_t v52 = nw_endpoint_handler_dry_run_string(v361);
        nw_endpoint_t v53 = nw_endpoint_handler_copy_endpoint(v361);
        uint64_t v54 = nw_endpoint_get_logging_description(v53);
        os_log_type_t v55 = nw_endpoint_handler_state_string(v361);
        uint64_t v56 = nw_endpoint_handler_mode_string(v361);
        id v57 = nw_endpoint_handler_copy_current_path(v361);
        int v58 = nw_parameters_get_pid(v5);
        *(_DWORD *)netcore_stats_tcp_report buf = 136448258;
        __int16 v376 = "nw_endpoint_flow_validate_delegation";
        __int16 v377 = 2082;
        __int16 v378 = (char *)v51;
        __int16 v379 = 2082;
        __int16 v380 = v52;
        __int16 v381 = 2082;
        __int16 v382 = (void *)v54;
        __int16 v383 = 2082;
        __int16 v384 = v55;
        __int16 v385 = 2082;
        __int16 v386 = v56;
        __int16 v387 = 2114;
        id v388 = v57;
        __int16 v389 = 1024;
        *(_DWORD *)__int16 v390 = v58;
        *(_WORD *)&v390[4] = 2082;
        *(void *)&v390[6] = "I";
        _os_log_impl(&dword_1830D4000, v49, v50, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Network Delegation Failure: Invalid PID %d [%{public}s]", buf, 0x58u);
      }
    }
    else if (v374)
    {
      char v153 = __nw_create_backtrace_string();
      if (v153)
      {
        unsigned int v154 = (char *)v153;
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        char v155 = (id)gconnectionLogObj;
        os_log_type_t v156 = type[0];
        if (os_log_type_enabled(v155, type[0]))
        {
          __int16 v157 = nw_endpoint_handler_get_id_string(v4);
          __int16 v158 = nw_endpoint_handler_dry_run_string(v4);
          nw_endpoint_t v357 = nw_endpoint_handler_copy_endpoint(v361);
          uint64_t v159 = nw_endpoint_get_logging_description(v357);
          unsigned int v160 = nw_endpoint_handler_state_string(v361);
          id v161 = nw_endpoint_handler_mode_string(v361);
          id v162 = nw_endpoint_handler_copy_current_path(v361);
          int v163 = nw_parameters_get_pid(v5);
          *(_DWORD *)netcore_stats_tcp_report buf = 136448514;
          __int16 v376 = "nw_endpoint_flow_validate_delegation";
          __int16 v377 = 2082;
          __int16 v378 = (char *)v157;
          __int16 v379 = 2082;
          __int16 v380 = v158;
          __int16 v381 = 2082;
          __int16 v382 = (void *)v159;
          __int16 v383 = 2082;
          __int16 v384 = v160;
          __int16 v385 = 2082;
          __int16 v386 = v161;
          __int16 v387 = 2114;
          id v388 = v162;
          __int16 v389 = 1024;
          *(_DWORD *)__int16 v390 = v163;
          *(_WORD *)&v390[4] = 2082;
          *(void *)&v390[6] = "I";
          *(_WORD *)&v390[14] = 2082;
          *(void *)&v390[16] = v154;
          _os_log_impl(&dword_1830D4000, v155, v156, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Network Delegation Failure: Invalid PID %d [%{public}s], dumping backtrace:%{public}s", buf, 0x62u);
        }
        free(v154);
        goto LABEL_246;
      }
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      os_log_type_t v49 = (id)gconnectionLogObj;
      os_log_type_t v310 = type[0];
      if (os_log_type_enabled(v49, type[0]))
      {
        uint64_t v311 = nw_endpoint_handler_get_id_string(v4);
        uint64_t v312 = nw_endpoint_handler_dry_run_string(v361);
        nw_endpoint_t v313 = nw_endpoint_handler_copy_endpoint(v361);
        uint64_t v314 = nw_endpoint_get_logging_description(v313);
        uint64_t v315 = nw_endpoint_handler_state_string(v361);
        uint64_t v316 = nw_endpoint_handler_mode_string(v361);
        id v317 = nw_endpoint_handler_copy_current_path(v361);
        int v318 = nw_parameters_get_pid(v5);
        *(_DWORD *)netcore_stats_tcp_report buf = 136448258;
        __int16 v376 = "nw_endpoint_flow_validate_delegation";
        __int16 v377 = 2082;
        __int16 v378 = (char *)v311;
        __int16 v379 = 2082;
        __int16 v380 = v312;
        __int16 v381 = 2082;
        __int16 v382 = (void *)v314;
        __int16 v383 = 2082;
        __int16 v384 = v315;
        __int16 v385 = 2082;
        __int16 v386 = v316;
        __int16 v387 = 2114;
        id v388 = v317;
        __int16 v389 = 1024;
        *(_DWORD *)__int16 v390 = v318;
        *(_WORD *)&v390[4] = 2082;
        *(void *)&v390[6] = "I";
        _os_log_impl(&dword_1830D4000, v49, v310, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Network Delegation Failure: Invalid PID %d [%{public}s], no backtrace", buf, 0x58u);
      }
    }
    else
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      os_log_type_t v49 = (id)gconnectionLogObj;
      os_log_type_t v301 = type[0];
      if (os_log_type_enabled(v49, type[0]))
      {
        int v302 = nw_endpoint_handler_get_id_string(v4);
        uint64_t v303 = nw_endpoint_handler_dry_run_string(v361);
        nw_endpoint_t v304 = nw_endpoint_handler_copy_endpoint(v361);
        uint64_t v305 = nw_endpoint_get_logging_description(v304);
        char v306 = nw_endpoint_handler_state_string(v361);
        uint64_t v307 = nw_endpoint_handler_mode_string(v361);
        id v308 = nw_endpoint_handler_copy_current_path(v361);
        int v309 = nw_parameters_get_pid(v5);
        *(_DWORD *)netcore_stats_tcp_report buf = 136448258;
        __int16 v376 = "nw_endpoint_flow_validate_delegation";
        __int16 v377 = 2082;
        __int16 v378 = (char *)v302;
        __int16 v379 = 2082;
        __int16 v380 = v303;
        __int16 v381 = 2082;
        __int16 v382 = (void *)v305;
        __int16 v383 = 2082;
        __int16 v384 = v306;
        __int16 v385 = 2082;
        __int16 v386 = v307;
        __int16 v387 = 2114;
        id v388 = v308;
        __int16 v389 = 1024;
        *(_DWORD *)__int16 v390 = v309;
        *(_WORD *)&v390[4] = 2082;
        *(void *)&v390[6] = "I";
        _os_log_impl(&dword_1830D4000, v49, v301, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Network Delegation Failure: Invalid PID %d [%{public}s], backtrace limit exceeded", buf, 0x58u);
      }
    }

LABEL_246:
    size_t v48 = (char *)log;
    goto LABEL_247;
  }
  pid_t v8 = getpid();
  if (!nw_parameters_has_delegated_proc_pid(v5, v8) && !nw_parameters_has_delegated_proc_uuid(v5))
  {
    nw_endpoint_t v360 = v5;
    if (!nw_endpoint_flow_validate_delegation(NWConcrete_nw_endpoint_handler *)::delegation_allowlist
      || object_getClass((id)nw_endpoint_flow_validate_delegation(NWConcrete_nw_endpoint_handler *)::delegation_allowlist) != (Class)MEMORY[0x1E4F14568])
    {
      int v71 = 0;
      goto LABEL_54;
    }
    uint64_t v363 = v4;
    nw_endpoint_t v108 = nw_endpoint_handler_copy_endpoint(v4);
    BOOL domain_for_policy = nw_endpoint_get_domain_for_policy(v108);
    BOOL v110 = domain_for_policy;
    if (domain_for_policy)
    {
      *(void *)os_log_type_t type = 0;
      __int16 v371 = type;
      uint64_t v372 = 0x2020000000;
      char v373 = 0;
      int v111 = (void *)nw_endpoint_flow_validate_delegation(NWConcrete_nw_endpoint_handler *)::delegation_allowlist;
      applier[0] = MEMORY[0x1E4F143A8];
      applier[1] = 3221225472;
      applier[2] = ___ZL36nw_endpoint_flow_validate_delegationP30NWConcrete_nw_endpoint_handler_block_invoke_218;
      applier[3] = &unk_1E524A360;
      size_t v368 = strlen((const char *)domain_for_policy);
      BOOL v369 = v110;
      uint64_t v112 = v4;
      unsigned int v366 = v112;
      nw_endpoint_t v367 = type;
      xpc_array_apply(v111, applier);
      if (*((unsigned char *)v371 + 24))
      {

        _Block_object_dispose(type, 8);
        goto LABEL_234;
      }
      if ((nw_endpoint_handler_get_logging_disabled(v112) & 1) == 0)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        uint64_t v284 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v284, OS_LOG_TYPE_ERROR))
        {
          uint64_t v285 = nw_endpoint_handler_get_id_string(v112);
          uint64_t v286 = nw_endpoint_handler_dry_run_string(v112);
          nw_endpoint_t v287 = nw_endpoint_handler_copy_endpoint(v112);
          uint64_t v288 = nw_endpoint_get_logging_description(v287);
          unsigned int v289 = nw_endpoint_handler_state_string(v112);
          v290 = nw_endpoint_handler_mode_string(v112);
          id v291 = nw_endpoint_handler_copy_current_path(v112);
          *(_DWORD *)netcore_stats_tcp_report buf = 136448002;
          __int16 v376 = "nw_endpoint_flow_validate_delegation";
          __int16 v377 = 2082;
          __int16 v378 = (char *)v285;
          __int16 v379 = 2082;
          __int16 v380 = v286;
          __int16 v381 = 2082;
          __int16 v382 = (void *)v288;
          __int16 v383 = 2082;
          __int16 v384 = v289;
          __int16 v385 = 2082;
          __int16 v386 = v290;
          __int16 v387 = 2114;
          id v388 = v291;
          __int16 v389 = 2082;
          *(void *)__int16 v390 = v110;
          _os_log_impl(&dword_1830D4000, v284, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Domain \"%{public}s\" was not found within allowlist for non-delegated connections", buf, 0x52u);
        }
      }

      _Block_object_dispose(type, 8);
    }
    else if ((nw_endpoint_handler_get_logging_disabled(v4) & 1) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      __int16 v174 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v174, OS_LOG_TYPE_ERROR))
      {
        unsigned int v175 = nw_endpoint_handler_get_id_string(v4);
        __int16 v176 = nw_endpoint_handler_dry_run_string(v4);
        nw_endpoint_t v177 = nw_endpoint_handler_copy_endpoint(v363);
        v178 = nw_endpoint_get_logging_description(v177);
        unsigned int v179 = nw_endpoint_handler_state_string(v363);
        __int16 v180 = nw_endpoint_handler_mode_string(v363);
        id v181 = nw_endpoint_handler_copy_current_path(v363);
        *(_DWORD *)netcore_stats_tcp_report buf = 136447746;
        __int16 v376 = "nw_endpoint_flow_validate_delegation";
        __int16 v377 = 2082;
        __int16 v378 = (char *)v175;
        __int16 v379 = 2082;
        __int16 v380 = v176;
        __int16 v381 = 2082;
        __int16 v382 = (void *)v178;
        __int16 v383 = 2082;
        __int16 v384 = v179;
        __int16 v385 = 2082;
        __int16 v386 = v180;
        __int16 v387 = 2114;
        id v388 = v181;
        _os_log_impl(&dword_1830D4000, v174, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] No domain found for connection to allowlist non-delegated connections", buf, 0x48u);
      }
    }

    int v71 = 1;
    uint64_t v4 = v363;
LABEL_54:
    if (!_os_feature_enabled_impl())
    {
      if (!v71) {
        goto LABEL_234;
      }
      goto LABEL_169;
    }
    uint64_t v362 = v4;
    char v346 = v71;
    nw_endpoint_t v355 = nw_endpoint_handler_copy_endpoint(v4);
    BOOL loga = nw_endpoint_get_domain_for_policy(v355);
    os_log_type_t v72 = v4;
    BOOL v73 = (*((unsigned char *)v72 + 268) & 0x20) == 0;

    if (!v73)
    {
LABEL_233:

      uint64_t v4 = v362;
      if ((v346 & 1) == 0) {
        goto LABEL_234;
      }
LABEL_169:
      id v219 = v4;
      BOOL v220 = (*((unsigned char *)v219 + 268) & 0x20) == 0;

      if (v220)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        unsigned int v221 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v221, OS_LOG_TYPE_ERROR))
        {
          nw_endpoint_t v222 = v219;

          char v223 = v222;
          BOOL v224 = (*((unsigned char *)v219 + 268) & 1) == 0;

          if (v224) {
            v225 = "";
          }
          else {
            v225 = "dry-run ";
          }
          nw_endpoint_t v226 = nw_endpoint_handler_copy_endpoint(v223);
          nw_endpoint_t v227 = nw_endpoint_get_logging_description(v226);
          uint64_t v228 = v223;
          uint64_t v229 = v228;
          uint64_t v230 = v228[30];
          if (v230 > 5) {
            uint64_t v231 = "unknown-state";
          }
          else {
            uint64_t v231 = off_1E523FB38[v230];
          }

          uint64_t v232 = v229;
          uint64_t v233 = "path";
          switch(v364->mode)
          {
            case 0:
              break;
            case 1:
              uint64_t v233 = "resolver";
              break;
            case 2:
              uint64_t v233 = nw_endpoint_flow_mode_string(v232[31]);
              break;
            case 3:
              uint64_t v233 = "proxy";
              break;
            case 4:
              uint64_t v233 = "fallback";
              break;
            case 5:
              uint64_t v233 = "transform";
              break;
            default:
              uint64_t v233 = "unknown-mode";
              break;
          }
          unsigned int v359 = v233;

          nw_endpoint_t v234 = v226;
          uint64_t v235 = v231;
          uint64_t v236 = v227;
          uint64_t v237 = v232;
          os_unfair_lock_lock((os_unfair_lock_t)v237 + 28);
          id v238 = v237[8];
          os_unfair_lock_unlock((os_unfair_lock_t)v237 + 28);

          *(_DWORD *)netcore_stats_tcp_report buf = 136447746;
          __int16 v376 = "nw_endpoint_flow_validate_delegation";
          __int16 v377 = 2082;
          __int16 v378 = (char *)(v222 + 21);
          __int16 v379 = 2082;
          __int16 v380 = v225;
          __int16 v381 = 2082;
          __int16 v382 = (void *)v236;
          __int16 v383 = 2082;
          __int16 v384 = v235;
          __int16 v385 = 2082;
          __int16 v386 = v359;
          __int16 v387 = 2114;
          id v388 = v238;
          _os_log_impl(&dword_1830D4000, v221, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Failing connection due to delegation errors", buf, 0x48u);
        }
      }
      id v5 = v360;
      nw_endpoint_flow_failed_with_error(v219, 1, 0);
      uint64_t v9 = 0;
      goto LABEL_235;
    }
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
    }
    id v74 = (id)gconnectionLogObj;
    uint64_t v75 = v72;

    id v76 = v75;
    BOOL v77 = (*((unsigned char *)v72 + 268) & 1) == 0;

    if (v77) {
      uint64_t v78 = "";
    }
    else {
      uint64_t v78 = "dry-run ";
    }
    nw_endpoint_t v79 = nw_endpoint_handler_copy_endpoint(v76);
    uint64_t v80 = nw_endpoint_get_logging_description(v79);
    int v81 = v76;
    __int16 v82 = v81;
    uint64_t v83 = v81[30];
    if (v83 > 5) {
      __int16 v84 = "unknown-state";
    }
    else {
      __int16 v84 = off_1E523FB38[v83];
    }

    uint64_t v113 = v82;
    os_log_type_t v114 = v113;
    uint64_t v115 = "path";
    switch(v364->mode)
    {
      case 0:
        break;
      case 1:
        uint64_t v115 = "resolver";
        break;
      case 2:
        uint64_t v115 = nw_endpoint_flow_mode_string(v113[31]);
        break;
      case 3:
        uint64_t v115 = "proxy";
        break;
      case 4:
        uint64_t v115 = "fallback";
        break;
      case 5:
        uint64_t v115 = "transform";
        break;
      default:
        uint64_t v115 = "unknown-mode";
        break;
    }

    uint64_t v239 = v114;
    os_unfair_lock_lock((os_unfair_lock_t)v239 + 28);
    id v240 = v239[8];
    os_unfair_lock_unlock((os_unfair_lock_t)v239 + 28);

    id v241 = v240;
    description = nw_endpoint_get_description(v355);
    *(_DWORD *)netcore_stats_tcp_report buf = 136448258;
    __int16 v376 = "nw_endpoint_flow_validate_delegation";
    __int16 v377 = 2082;
    __int16 v378 = (char *)(v75 + 21);
    __int16 v379 = 2082;
    __int16 v380 = v78;
    __int16 v381 = 2082;
    __int16 v382 = (void *)v80;
    __int16 v383 = 2082;
    __int16 v384 = v84;
    __int16 v385 = 2082;
    __int16 v386 = v115;
    __int16 v387 = 2114;
    id v388 = v241;
    __int16 v389 = 2080;
    *(void *)__int16 v390 = loga;
    *(_WORD *)&v390[8] = 2080;
    *(void *)&v390[10] = description;
    uint64_t v243 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    char v374 = 0;
    if (__nwlog_fault(v243, type, &v374))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        uint64_t v244 = (id)gconnectionLogObj;
        os_log_type_t v245 = type[0];
        if (os_log_type_enabled(v244, type[0]))
        {
          uint64_t v246 = nw_endpoint_handler_get_id_string(v239);
          uint64_t v247 = nw_endpoint_handler_dry_run_string(v239);
          uint64_t v343 = v244;
          nw_endpoint_t v248 = nw_endpoint_handler_copy_endpoint(v239);
          unsigned int v249 = v246;
          id v250 = nw_endpoint_get_logging_description(v248);
          __int16 v251 = nw_endpoint_handler_state_string(v239);
          uint64_t v252 = nw_endpoint_handler_mode_string(v239);
          id v253 = nw_endpoint_handler_copy_current_path(v239);
          uint64_t v254 = nw_endpoint_get_description(v355);
          *(_DWORD *)netcore_stats_tcp_report buf = 136448258;
          __int16 v376 = "nw_endpoint_flow_validate_delegation";
          __int16 v377 = 2082;
          __int16 v378 = (char *)v249;
          __int16 v379 = 2082;
          __int16 v380 = v247;
          __int16 v381 = 2082;
          __int16 v382 = (void *)v250;
          __int16 v383 = 2082;
          __int16 v384 = v251;
          __int16 v385 = 2082;
          __int16 v386 = v252;
          __int16 v387 = 2114;
          id v388 = v253;
          __int16 v389 = 2080;
          *(void *)__int16 v390 = loga;
          *(_WORD *)&v390[8] = 2080;
          *(void *)&v390[10] = v254;
          _os_log_impl(&dword_1830D4000, v343, v245, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Undelegated Network Traffic: Connection to %s (%s)", buf, 0x5Cu);

          uint64_t v244 = v343;
        }
      }
      else if (v374)
      {
        uint64_t v255 = __nw_create_backtrace_string();
        if (v255)
        {
          uint64_t v256 = (char *)v255;
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          uint64_t v257 = (id)gconnectionLogObj;
          os_log_type_t v258 = type[0];
          if (os_log_type_enabled(v257, type[0]))
          {
            uint64_t v259 = nw_endpoint_handler_get_id_string(v239);
            uint64_t v341 = nw_endpoint_handler_dry_run_string(v239);
            nw_endpoint_t v342 = nw_endpoint_handler_copy_endpoint(v239);
            uint64_t v260 = v259;
            uint64_t v261 = nw_endpoint_get_logging_description(v342);
            id v262 = nw_endpoint_handler_state_string(v239);
            id v263 = nw_endpoint_handler_mode_string(v239);
            id v264 = nw_endpoint_handler_copy_current_path(v239);
            unsigned int v265 = nw_endpoint_get_description(v355);
            *(_DWORD *)netcore_stats_tcp_report buf = 136448514;
            __int16 v376 = "nw_endpoint_flow_validate_delegation";
            __int16 v377 = 2082;
            __int16 v378 = (char *)v260;
            __int16 v379 = 2082;
            __int16 v380 = v341;
            __int16 v381 = 2082;
            __int16 v382 = (void *)v261;
            __int16 v383 = 2082;
            __int16 v384 = v262;
            __int16 v385 = 2082;
            __int16 v386 = v263;
            __int16 v387 = 2114;
            id v388 = v264;
            __int16 v389 = 2080;
            *(void *)__int16 v390 = loga;
            *(_WORD *)&v390[8] = 2080;
            *(void *)&v390[10] = v265;
            *(_WORD *)&v390[18] = 2082;
            *(void *)&v390[20] = v256;
            _os_log_impl(&dword_1830D4000, v257, v258, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Undelegated Network Traffic: Connection to %s (%s), dumping backtrace:%{public}s", buf, 0x66u);
          }
          free(v256);
          goto LABEL_231;
        }
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        uint64_t v244 = (id)gconnectionLogObj;
        os_log_type_t v292 = type[0];
        if (os_log_type_enabled(v244, type[0]))
        {
          os_log_type_t v293 = nw_endpoint_handler_get_id_string(v239);
          v294 = nw_endpoint_handler_dry_run_string(v239);
          uint64_t v345 = v244;
          nw_endpoint_t v295 = nw_endpoint_handler_copy_endpoint(v239);
          v296 = nw_endpoint_get_logging_description(v295);
          os_log_type_t v297 = nw_endpoint_handler_state_string(v239);
          BOOL v298 = nw_endpoint_handler_mode_string(v239);
          id v299 = nw_endpoint_handler_copy_current_path(v239);
          uint64_t v300 = nw_endpoint_get_description(v355);
          *(_DWORD *)netcore_stats_tcp_report buf = 136448258;
          __int16 v376 = "nw_endpoint_flow_validate_delegation";
          __int16 v377 = 2082;
          __int16 v378 = (char *)v293;
          __int16 v379 = 2082;
          __int16 v380 = v294;
          __int16 v381 = 2082;
          __int16 v382 = (void *)v296;
          __int16 v383 = 2082;
          __int16 v384 = v297;
          __int16 v385 = 2082;
          __int16 v386 = v298;
          __int16 v387 = 2114;
          id v388 = v299;
          __int16 v389 = 2080;
          *(void *)__int16 v390 = loga;
          *(_WORD *)&v390[8] = 2080;
          *(void *)&v390[10] = v300;
          _os_log_impl(&dword_1830D4000, v345, v292, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Undelegated Network Traffic: Connection to %s (%s), no backtrace", buf, 0x5Cu);

          uint64_t v244 = v345;
        }
      }
      else
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        uint64_t v244 = (id)gconnectionLogObj;
        os_log_type_t v266 = type[0];
        if (os_log_type_enabled(v244, type[0]))
        {
          unsigned int v267 = nw_endpoint_handler_get_id_string(v239);
          nw_endpoint_t v268 = nw_endpoint_handler_dry_run_string(v239);
          uint64_t v344 = v244;
          nw_endpoint_t v269 = nw_endpoint_handler_copy_endpoint(v239);
          id v270 = nw_endpoint_get_logging_description(v269);
          v271 = nw_endpoint_handler_state_string(v239);
          v272 = nw_endpoint_handler_mode_string(v239);
          id v273 = nw_endpoint_handler_copy_current_path(v239);
          os_log_type_t v274 = nw_endpoint_get_description(v355);
          *(_DWORD *)netcore_stats_tcp_report buf = 136448258;
          __int16 v376 = "nw_endpoint_flow_validate_delegation";
          __int16 v377 = 2082;
          __int16 v378 = (char *)v267;
          __int16 v379 = 2082;
          __int16 v380 = v268;
          __int16 v381 = 2082;
          __int16 v382 = (void *)v270;
          __int16 v383 = 2082;
          __int16 v384 = v271;
          __int16 v385 = 2082;
          __int16 v386 = v272;
          __int16 v387 = 2114;
          id v388 = v273;
          __int16 v389 = 2080;
          *(void *)__int16 v390 = loga;
          *(_WORD *)&v390[8] = 2080;
          *(void *)&v390[10] = v274;
          _os_log_impl(&dword_1830D4000, v344, v266, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Undelegated Network Traffic: Connection to %s (%s), backtrace limit exceeded", buf, 0x5Cu);

          uint64_t v244 = v344;
        }
      }
    }
LABEL_231:
    if (v243) {
      free(v243);
    }
    goto LABEL_233;
  }
  uint64_t v9 = 1;
LABEL_235:

LABEL_303:
  return v9;
}

void sub_18326D894(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,void *a25)
{
  _Unwind_Resume(a1);
}

BOOL nw_parameters_has_delegated_proc_pid(void *a1, int a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  uint64_t v4 = v3;
  if (v3)
  {
    int v5 = *(_DWORD *)(*((void *)v3 + 13) + 64);
    BOOL v7 = v5 > 0 && v5 != a2;
    goto LABEL_8;
  }
  uint64_t v9 = __nwlog_obj();
  *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
  char v20 = "nw_parameters_has_delegated_proc_pid";
  int v10 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v17 = 0;
  if (__nwlog_fault(v10, &type, &v17))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        char v20 = "nw_parameters_has_delegated_proc_pid";
        _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v11 = __nwlog_obj();
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
          char v20 = "nw_parameters_has_delegated_proc_pid";
          __int16 v21 = 2082;
          uint64_t v22 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v11, v14, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_25;
      }
      if (v15)
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        char v20 = "nw_parameters_has_delegated_proc_pid";
        _os_log_impl(&dword_1830D4000, v11, v14, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v11 = __nwlog_obj();
      os_log_type_t v16 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        char v20 = "nw_parameters_has_delegated_proc_pid";
        _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_25:
  if (v10) {
    free(v10);
  }
  BOOL v7 = 0;
LABEL_8:

  return v7;
}

BOOL nw_parameters_has_delegated_proc_uuid(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = a1;
  uint64_t v2 = v1;
  if (!v1)
  {
    int v5 = __nwlog_obj();
    *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
    os_log_type_t v16 = "nw_parameters_has_delegated_proc_uuid";
    id v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v13 = 0;
    if (__nwlog_fault(v6, &type, &v13))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        BOOL v7 = __nwlog_obj();
        os_log_type_t v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          os_log_type_t v16 = "nw_parameters_has_delegated_proc_uuid";
          _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
        }
      }
      else if (v13)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        BOOL v7 = __nwlog_obj();
        os_log_type_t v10 = type;
        BOOL v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
            os_log_type_t v16 = "nw_parameters_has_delegated_proc_uuid";
            __int16 v17 = 2082;
            nw_endpoint_t v18 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_22;
        }
        if (v11)
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          os_log_type_t v16 = "nw_parameters_has_delegated_proc_uuid";
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        BOOL v7 = __nwlog_obj();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          os_log_type_t v16 = "nw_parameters_has_delegated_proc_uuid";
          _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_22:
    if (v6) {
      free(v6);
    }
    goto LABEL_3;
  }
  if (!uuid_is_null((const unsigned __int8 *)(v1[13] + 24)))
  {
    BOOL v3 = uuid_compare((const unsigned __int8 *)(v2[13] + 24), (const unsigned __int8 *)(v2[13] + 8)) != 0;
    goto LABEL_5;
  }
LABEL_3:
  BOOL v3 = 0;
LABEL_5:

  return v3;
}

void sub_18326E0E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_parameters_get_pid_to_uuid_mapping_failed(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = (v1[97] >> 5) & 1;
    goto LABEL_3;
  }
  int v5 = __nwlog_obj();
  *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
  os_log_type_t v16 = "nw_parameters_get_pid_to_uuid_mapping_failed";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_pid_to_uuid_mapping_failed";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
          os_log_type_t v16 = "nw_parameters_get_pid_to_uuid_mapping_failed";
          __int16 v17 = 2082;
          nw_endpoint_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_pid_to_uuid_mapping_failed";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_pid_to_uuid_mapping_failed";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_parameters_get_bundle_id_to_uuid_mapping_failed(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = (v1[97] >> 4) & 1;
    goto LABEL_3;
  }
  int v5 = __nwlog_obj();
  *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
  os_log_type_t v16 = "nw_parameters_get_bundle_id_to_uuid_mapping_failed";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_bundle_id_to_uuid_mapping_failed";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
          os_log_type_t v16 = "nw_parameters_get_bundle_id_to_uuid_mapping_failed";
          __int16 v17 = 2082;
          nw_endpoint_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_bundle_id_to_uuid_mapping_failed";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_bundle_id_to_uuid_mapping_failed";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

void nw_parameters_add_proxy_options(void *a1, void *a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1;
  id v4 = a2;
  int v5 = v4;
  if (!v3)
  {
    uint64_t v9 = __nwlog_obj();
    *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
    char v26 = "nw_parameters_add_proxy_options";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (!__nwlog_fault(v10, &type, &v23)) {
      goto LABEL_40;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        char v26 = "nw_parameters_add_proxy_options";
        _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v11 = __nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
          char v26 = "nw_parameters_add_proxy_options";
          __int16 v27 = 2082;
          os_log_type_t v28 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_40:
        if (!v10) {
          goto LABEL_6;
        }
LABEL_41:
        free(v10);
        goto LABEL_6;
      }
      if (v17)
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        char v26 = "nw_parameters_add_proxy_options";
        _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v11 = __nwlog_obj();
      os_log_type_t v21 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        char v26 = "nw_parameters_add_proxy_options";
        _os_log_impl(&dword_1830D4000, v11, v21, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_39:

    goto LABEL_40;
  }
  if (v4)
  {
    uint64_t v6 = v3[21];
    if (!v6)
    {
      BOOL v7 = nw_array_create();
      os_log_type_t v8 = (void *)v3[21];
      v3[21] = v7;

      uint64_t v6 = v3[21];
    }
    nw_array_append(v6, v5);
    goto LABEL_6;
  }
  char v13 = __nwlog_obj();
  *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
  char v26 = "nw_parameters_add_proxy_options";
  os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v23 = 0;
  if (!__nwlog_fault(v10, &type, &v23)) {
    goto LABEL_40;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    BOOL v11 = __nwlog_obj();
    os_log_type_t v14 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
      char v26 = "nw_parameters_add_proxy_options";
      _os_log_impl(&dword_1830D4000, v11, v14, "%{public}s called with null proxy_options", buf, 0xCu);
    }
    goto LABEL_39;
  }
  if (!v23)
  {
    BOOL v11 = __nwlog_obj();
    os_log_type_t v22 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
      char v26 = "nw_parameters_add_proxy_options";
      _os_log_impl(&dword_1830D4000, v11, v22, "%{public}s called with null proxy_options, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_39;
  }
  nw_endpoint_t v18 = (char *)__nw_create_backtrace_string();
  BOOL v11 = __nwlog_obj();
  os_log_type_t v19 = type;
  BOOL v20 = os_log_type_enabled(v11, type);
  if (!v18)
  {
    if (v20)
    {
      *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
      char v26 = "nw_parameters_add_proxy_options";
      _os_log_impl(&dword_1830D4000, v11, v19, "%{public}s called with null proxy_options, no backtrace", buf, 0xCu);
    }
    goto LABEL_39;
  }
  if (v20)
  {
    *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
    char v26 = "nw_parameters_add_proxy_options";
    __int16 v27 = 2082;
    os_log_type_t v28 = v18;
    _os_log_impl(&dword_1830D4000, v11, v19, "%{public}s called with null proxy_options, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v18);
  if (v10) {
    goto LABEL_41;
  }
LABEL_6:
}

nw_connection_t nw_connection_create(nw_endpoint_t endpoint, nw_parameters_t parameters)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = endpoint;
  id v4 = parameters;
  int v5 = v4;
  if (v3)
  {
    if (v4)
    {
      uint64_t v6 = nw_connection_create_with_id(v3, v4, 0);
      goto LABEL_4;
    }
    os_log_type_t v12 = __nwlog_obj();
    *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
    int v24 = "nw_connection_create";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (__nwlog_fault(v9, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v10 = __nwlog_obj();
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          int v24 = "nw_connection_create";
          _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null parameters", buf, 0xCu);
        }
LABEL_36:

        goto LABEL_37;
      }
      if (!v21)
      {
        os_log_type_t v10 = __nwlog_obj();
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          int v24 = "nw_connection_create";
          _os_log_impl(&dword_1830D4000, v10, v20, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v17 = type;
      BOOL v18 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          int v24 = "nw_connection_create";
          _os_log_impl(&dword_1830D4000, v10, v17, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v18)
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
        int v24 = "nw_connection_create";
        __int16 v25 = 2082;
        char v26 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v10, v17, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_24;
    }
  }
  else
  {
    os_log_type_t v8 = __nwlog_obj();
    *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
    int v24 = "nw_connection_create";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (__nwlog_fault(v9, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v10 = __nwlog_obj();
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          int v24 = "nw_connection_create";
          _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null endpoint", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (!v21)
      {
        os_log_type_t v10 = __nwlog_obj();
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          int v24 = "nw_connection_create";
          _os_log_impl(&dword_1830D4000, v10, v19, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          int v24 = "nw_connection_create";
          _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v16)
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
        int v24 = "nw_connection_create";
        __int16 v25 = 2082;
        char v26 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_24:

      free(backtrace_string);
    }
  }
LABEL_37:
  if (v9) {
    free(v9);
  }
  uint64_t v6 = 0;
LABEL_4:

  return v6;
}

void sub_18326EFBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18326F4D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_socket_set_bidirectional_tcp_sockopts(uint64_t a1, void *a2)
{
  uint64_t v110 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
    char v107 = "nw_socket_set_bidirectional_tcp_sockopts";
    __int16 v92 = (char *)_os_log_send_and_compose_impl();
    v105[0] = OS_LOG_TYPE_ERROR;
    type[0] = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v92, v105, type)) {
      goto LABEL_322;
    }
    if (v105[0] == OS_LOG_TYPE_FAULT)
    {
      uint64_t v93 = __nwlog_obj();
      os_log_type_t v94 = v105[0];
      if (!os_log_type_enabled(v93, v105[0])) {
        goto LABEL_322;
      }
      *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
      char v107 = "nw_socket_set_bidirectional_tcp_sockopts";
      long long v95 = "%{public}s called with null socket_handler";
    }
    else if (type[0])
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v93 = __nwlog_obj();
      os_log_type_t v94 = v105[0];
      BOOL v97 = os_log_type_enabled(v93, v105[0]);
      if (backtrace_string)
      {
        if (v97)
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
          char v107 = "nw_socket_set_bidirectional_tcp_sockopts";
          __int16 v108 = 2082;
          *(void *)os_log_type_t v109 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v93, v94, "%{public}s called with null socket_handler, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_322;
      }
      if (!v97)
      {
LABEL_322:
        if (v92) {
          free(v92);
        }
        return 0;
      }
      *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
      char v107 = "nw_socket_set_bidirectional_tcp_sockopts";
      long long v95 = "%{public}s called with null socket_handler, no backtrace";
    }
    else
    {
      uint64_t v93 = __nwlog_obj();
      os_log_type_t v94 = v105[0];
      if (!os_log_type_enabled(v93, v105[0])) {
        goto LABEL_322;
      }
      *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
      char v107 = "nw_socket_set_bidirectional_tcp_sockopts";
      long long v95 = "%{public}s called with null socket_handler, backtrace limit exceeded";
    }
    _os_log_impl(&dword_1830D4000, v93, v94, v95, buf, 0xCu);
    goto LABEL_322;
  }
  if (*(unsigned char *)(a1 + 304) == 1)
  {
    if ((*(_WORD *)(a1 + 301) & 0x80) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      uint64_t v3 = gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
        char v107 = "nw_socket_set_bidirectional_tcp_sockopts";
        __int16 v108 = 2082;
        *(void *)os_log_type_t v109 = a1 + 308;
        _os_log_impl(&dword_1830D4000, v3, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s Ignoring TCP options for UNIX socket", buf, 0x16u);
        return 1;
      }
    }
    return 1;
  }
  *(_DWORD *)os_log_type_t v105 = 1;
  if (nw_tcp_options_get_reduce_buffering(a2)) {
    __int16 v6 = 0x2000;
  }
  else {
    __int16 v6 = 0;
  }
  int v7 = *(_WORD *)(a1 + 301) & 0xDFFF | (*(unsigned __int8 *)(a1 + 303) << 16);
  *(_WORD *)(a1 + 301) = *(_WORD *)(a1 + 301) & 0xDFFF | v6;
  *(unsigned char *)(a1 + 303) = BYTE2(v7);
  if (nw_tcp_options_get_no_delay(a2)) {
    nw_socket_set_no_delay(a1, 1);
  }
  if (nw_tcp_options_get_no_push(a2)) {
    nw_socket_set_no_push(a1, 1);
  }
  if (nw_tcp_options_get_disable_ack_stretching(a2) && setsockopt(*(_DWORD *)(a1 + 172), 6, 259, v105, 4u))
  {
    int v8 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
    }
    uint64_t v9 = gconnectionLogObj;
    if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)netcore_stats_tcp_report buf = 136446722;
      char v107 = "nw_socket_set_bidirectional_tcp_sockopts";
      __int16 v108 = 2080;
      *(void *)os_log_type_t v109 = a1 + 308;
      *(_WORD *)&v109[8] = 1024;
      *(_DWORD *)&v109[10] = v8;
      _os_log_impl(&dword_1830D4000, v9, OS_LOG_TYPE_ERROR, "%{public}s %s setsockopt TCP_SENDMOREACKS failed %{darwin.errno}d", buf, 0x1Cu);
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v10 = gLogObj;
    if (v8 == 22)
    {
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
        char v107 = "nw_socket_set_bidirectional_tcp_sockopts";
        __int16 v108 = 1024;
        *(_DWORD *)os_log_type_t v109 = 22;
        _os_log_impl(&dword_1830D4000, v10, OS_LOG_TYPE_ERROR, "%{public}s setsockopt TCP_SENDMOREACKS failed %{darwin.errno}d", buf, 0x12u);
      }
      goto LABEL_40;
    }
    *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
    char v107 = "nw_socket_set_bidirectional_tcp_sockopts";
    __int16 v108 = 1024;
    *(_DWORD *)os_log_type_t v109 = v8;
    os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    v103[0] = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v11, type, v103)) {
      goto LABEL_38;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v12 = gLogObj;
      os_log_type_t v13 = type[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, type[0])) {
        goto LABEL_38;
      }
      *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
      char v107 = "nw_socket_set_bidirectional_tcp_sockopts";
      __int16 v108 = 1024;
      *(_DWORD *)os_log_type_t v109 = v8;
      os_log_type_t v14 = "%{public}s setsockopt TCP_SENDMOREACKS failed %{darwin.errno}d";
    }
    else if (v103[0])
    {
      os_log_type_t v15 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v12 = gLogObj;
      os_log_type_t v13 = type[0];
      BOOL v16 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
      if (v15)
      {
        if (v16)
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446722;
          char v107 = "nw_socket_set_bidirectional_tcp_sockopts";
          __int16 v108 = 1024;
          *(_DWORD *)os_log_type_t v109 = v8;
          *(_WORD *)&v109[4] = 2082;
          *(void *)&v109[6] = v15;
          _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s setsockopt TCP_SENDMOREACKS failed %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x1Cu);
        }
        free(v15);
        goto LABEL_38;
      }
      if (!v16)
      {
LABEL_38:
        if (v11) {
          free(v11);
        }
        goto LABEL_40;
      }
      *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
      char v107 = "nw_socket_set_bidirectional_tcp_sockopts";
      __int16 v108 = 1024;
      *(_DWORD *)os_log_type_t v109 = v8;
      os_log_type_t v14 = "%{public}s setsockopt TCP_SENDMOREACKS failed %{darwin.errno}d, no backtrace";
    }
    else
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v13 = type[0];
      if (!os_log_type_enabled(v12, type[0])) {
        goto LABEL_38;
      }
      *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
      char v107 = "nw_socket_set_bidirectional_tcp_sockopts";
      __int16 v108 = 1024;
      *(_DWORD *)os_log_type_t v109 = v8;
      os_log_type_t v14 = "%{public}s setsockopt TCP_SENDMOREACKS failed %{darwin.errno}d, backtrace limit exceeded";
    }
    _os_log_impl(&dword_1830D4000, v12, v13, v14, buf, 0x12u);
    goto LABEL_38;
  }
LABEL_40:
  if (!nw_tcp_options_get_no_options(a2) || !setsockopt(*(_DWORD *)(a1 + 172), 6, 8, v105, 4u)) {
    goto LABEL_65;
  }
  int v17 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
  if (__nwlog_connection_log::onceToken != -1) {
    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
  }
  BOOL v18 = gconnectionLogObj;
  if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)netcore_stats_tcp_report buf = 136446722;
    char v107 = "nw_socket_set_bidirectional_tcp_sockopts";
    __int16 v108 = 2080;
    *(void *)os_log_type_t v109 = a1 + 308;
    *(_WORD *)&v109[8] = 1024;
    *(_DWORD *)&v109[10] = v17;
    _os_log_impl(&dword_1830D4000, v18, OS_LOG_TYPE_ERROR, "%{public}s %s setsockopt TCP_NOOPT failed %{darwin.errno}d", buf, 0x1Cu);
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_t v19 = gLogObj;
  if (v17 == 22)
  {
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
      char v107 = "nw_socket_set_bidirectional_tcp_sockopts";
      __int16 v108 = 1024;
      *(_DWORD *)os_log_type_t v109 = 22;
      _os_log_impl(&dword_1830D4000, v19, OS_LOG_TYPE_ERROR, "%{public}s setsockopt TCP_NOOPT failed %{darwin.errno}d", buf, 0x12u);
    }
    goto LABEL_65;
  }
  *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
  char v107 = "nw_socket_set_bidirectional_tcp_sockopts";
  __int16 v108 = 1024;
  *(_DWORD *)os_log_type_t v109 = v17;
  os_log_type_t v20 = (char *)_os_log_send_and_compose_impl();
  type[0] = OS_LOG_TYPE_ERROR;
  v103[0] = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v20, type, v103))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      char v21 = gLogObj;
      os_log_type_t v22 = type[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, type[0])) {
        goto LABEL_63;
      }
      *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
      char v107 = "nw_socket_set_bidirectional_tcp_sockopts";
      __int16 v108 = 1024;
      *(_DWORD *)os_log_type_t v109 = v17;
      char v23 = "%{public}s setsockopt TCP_NOOPT failed %{darwin.errno}d";
      goto LABEL_62;
    }
    if (v103[0] == OS_LOG_TYPE_DEFAULT)
    {
      char v21 = __nwlog_obj();
      os_log_type_t v22 = type[0];
      if (!os_log_type_enabled(v21, type[0])) {
        goto LABEL_63;
      }
      *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
      char v107 = "nw_socket_set_bidirectional_tcp_sockopts";
      __int16 v108 = 1024;
      *(_DWORD *)os_log_type_t v109 = v17;
      char v23 = "%{public}s setsockopt TCP_NOOPT failed %{darwin.errno}d, backtrace limit exceeded";
      goto LABEL_62;
    }
    int v24 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    char v21 = gLogObj;
    os_log_type_t v22 = type[0];
    BOOL v25 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
    if (v24)
    {
      if (v25)
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446722;
        char v107 = "nw_socket_set_bidirectional_tcp_sockopts";
        __int16 v108 = 1024;
        *(_DWORD *)os_log_type_t v109 = v17;
        *(_WORD *)&v109[4] = 2082;
        *(void *)&v109[6] = v24;
        _os_log_impl(&dword_1830D4000, v21, v22, "%{public}s setsockopt TCP_NOOPT failed %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x1Cu);
      }
      free(v24);
      goto LABEL_63;
    }
    if (v25)
    {
      *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
      char v107 = "nw_socket_set_bidirectional_tcp_sockopts";
      __int16 v108 = 1024;
      *(_DWORD *)os_log_type_t v109 = v17;
      char v23 = "%{public}s setsockopt TCP_NOOPT failed %{darwin.errno}d, no backtrace";
LABEL_62:
      _os_log_impl(&dword_1830D4000, v21, v22, v23, buf, 0x12u);
    }
  }
LABEL_63:
  if (v20) {
    free(v20);
  }
LABEL_65:
  if (!nw_tcp_options_get_no_timewait(a2) || !setsockopt(*(_DWORD *)(a1 + 172), 6, 520, v105, 4u)) {
    goto LABEL_90;
  }
  int v26 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
  if (__nwlog_connection_log::onceToken != -1) {
    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
  }
  uint64_t v27 = gconnectionLogObj;
  if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)netcore_stats_tcp_report buf = 136446722;
    char v107 = "nw_socket_set_bidirectional_tcp_sockopts";
    __int16 v108 = 2080;
    *(void *)os_log_type_t v109 = a1 + 308;
    *(_WORD *)&v109[8] = 1024;
    *(_DWORD *)&v109[10] = v26;
    _os_log_impl(&dword_1830D4000, v27, OS_LOG_TYPE_ERROR, "%{public}s %s setsockopt TCP_NOTIMEWAIT failed %{darwin.errno}d", buf, 0x1Cu);
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_t v28 = gLogObj;
  if (v26 == 22)
  {
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
      char v107 = "nw_socket_set_bidirectional_tcp_sockopts";
      __int16 v108 = 1024;
      *(_DWORD *)os_log_type_t v109 = 22;
      _os_log_impl(&dword_1830D4000, v28, OS_LOG_TYPE_ERROR, "%{public}s setsockopt TCP_NOTIMEWAIT failed %{darwin.errno}d", buf, 0x12u);
    }
    goto LABEL_90;
  }
  *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
  char v107 = "nw_socket_set_bidirectional_tcp_sockopts";
  __int16 v108 = 1024;
  *(_DWORD *)os_log_type_t v109 = v26;
  uint64_t v29 = (char *)_os_log_send_and_compose_impl();
  type[0] = OS_LOG_TYPE_ERROR;
  v103[0] = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v29, type, v103))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      char v30 = gLogObj;
      os_log_type_t v31 = type[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, type[0])) {
        goto LABEL_88;
      }
      *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
      char v107 = "nw_socket_set_bidirectional_tcp_sockopts";
      __int16 v108 = 1024;
      *(_DWORD *)os_log_type_t v109 = v26;
      nw_endpoint_t v32 = "%{public}s setsockopt TCP_NOTIMEWAIT failed %{darwin.errno}d";
      goto LABEL_87;
    }
    if (v103[0] == OS_LOG_TYPE_DEFAULT)
    {
      char v30 = __nwlog_obj();
      os_log_type_t v31 = type[0];
      if (!os_log_type_enabled(v30, type[0])) {
        goto LABEL_88;
      }
      *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
      char v107 = "nw_socket_set_bidirectional_tcp_sockopts";
      __int16 v108 = 1024;
      *(_DWORD *)os_log_type_t v109 = v26;
      nw_endpoint_t v32 = "%{public}s setsockopt TCP_NOTIMEWAIT failed %{darwin.errno}d, backtrace limit exceeded";
      goto LABEL_87;
    }
    __int16 v33 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    char v30 = gLogObj;
    os_log_type_t v31 = type[0];
    BOOL v34 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
    if (v33)
    {
      if (v34)
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446722;
        char v107 = "nw_socket_set_bidirectional_tcp_sockopts";
        __int16 v108 = 1024;
        *(_DWORD *)os_log_type_t v109 = v26;
        *(_WORD *)&v109[4] = 2082;
        *(void *)&v109[6] = v33;
        _os_log_impl(&dword_1830D4000, v30, v31, "%{public}s setsockopt TCP_NOTIMEWAIT failed %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x1Cu);
      }
      free(v33);
      goto LABEL_88;
    }
    if (v34)
    {
      *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
      char v107 = "nw_socket_set_bidirectional_tcp_sockopts";
      __int16 v108 = 1024;
      *(_DWORD *)os_log_type_t v109 = v26;
      nw_endpoint_t v32 = "%{public}s setsockopt TCP_NOTIMEWAIT failed %{darwin.errno}d, no backtrace";
LABEL_87:
      _os_log_impl(&dword_1830D4000, v30, v31, v32, buf, 0x12u);
    }
  }
LABEL_88:
  if (v29) {
    free(v29);
  }
LABEL_90:
  maximum_segment_size_t size = nw_tcp_options_get_maximum_segment_size(a2);
  if (maximum_segment_size) {
    nw_socket_set_maximum_segment_size(a1, maximum_segment_size);
  }
  *(_DWORD *)os_log_type_t type = 0;
  *(_DWORD *)os_log_type_t type = nw_tcp_options_get_retransmit_connection_drop_time(a2);
  if (*(_DWORD *)type && setsockopt(*(_DWORD *)(a1 + 172), 6, 128, type, 4u))
  {
    int v36 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
    }
    uint64_t v37 = gconnectionLogObj;
    if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)netcore_stats_tcp_report buf = 136446722;
      char v107 = "nw_socket_set_bidirectional_tcp_sockopts";
      __int16 v108 = 2080;
      *(void *)os_log_type_t v109 = a1 + 308;
      *(_WORD *)&v109[8] = 1024;
      *(_DWORD *)&v109[10] = v36;
      _os_log_impl(&dword_1830D4000, v37, OS_LOG_TYPE_ERROR, "%{public}s %s setsockopt TCP_RXT_CONNDROPTIME failed %{darwin.errno}d", buf, 0x1Cu);
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v38 = gLogObj;
    if (v36 == 22)
    {
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
        char v107 = "nw_socket_set_bidirectional_tcp_sockopts";
        __int16 v108 = 1024;
        *(_DWORD *)os_log_type_t v109 = 22;
        _os_log_impl(&dword_1830D4000, v38, OS_LOG_TYPE_ERROR, "%{public}s setsockopt TCP_RXT_CONNDROPTIME failed %{darwin.errno}d", buf, 0x12u);
      }
      goto LABEL_117;
    }
    *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
    char v107 = "nw_socket_set_bidirectional_tcp_sockopts";
    __int16 v108 = 1024;
    *(_DWORD *)os_log_type_t v109 = v36;
    int v39 = (char *)_os_log_send_and_compose_impl();
    v103[0] = OS_LOG_TYPE_ERROR;
    v102[0] = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v39, v103, v102)) {
      goto LABEL_115;
    }
    if (v103[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v40 = gLogObj;
      os_log_type_t v41 = v103[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, v103[0])) {
        goto LABEL_115;
      }
      *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
      char v107 = "nw_socket_set_bidirectional_tcp_sockopts";
      __int16 v108 = 1024;
      *(_DWORD *)os_log_type_t v109 = v36;
      uint64_t v42 = "%{public}s setsockopt TCP_RXT_CONNDROPTIME failed %{darwin.errno}d";
    }
    else if (v102[0])
    {
      nw_endpoint_t v43 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v40 = gLogObj;
      os_log_type_t v41 = v103[0];
      BOOL v44 = os_log_type_enabled((os_log_t)gLogObj, v103[0]);
      if (v43)
      {
        if (v44)
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446722;
          char v107 = "nw_socket_set_bidirectional_tcp_sockopts";
          __int16 v108 = 1024;
          *(_DWORD *)os_log_type_t v109 = v36;
          *(_WORD *)&v109[4] = 2082;
          *(void *)&v109[6] = v43;
          _os_log_impl(&dword_1830D4000, v40, v41, "%{public}s setsockopt TCP_RXT_CONNDROPTIME failed %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x1Cu);
        }
        free(v43);
        goto LABEL_115;
      }
      if (!v44)
      {
LABEL_115:
        if (v39) {
          free(v39);
        }
        goto LABEL_117;
      }
      *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
      char v107 = "nw_socket_set_bidirectional_tcp_sockopts";
      __int16 v108 = 1024;
      *(_DWORD *)os_log_type_t v109 = v36;
      uint64_t v42 = "%{public}s setsockopt TCP_RXT_CONNDROPTIME failed %{darwin.errno}d, no backtrace";
    }
    else
    {
      uint64_t v40 = __nwlog_obj();
      os_log_type_t v41 = v103[0];
      if (!os_log_type_enabled(v40, v103[0])) {
        goto LABEL_115;
      }
      *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
      char v107 = "nw_socket_set_bidirectional_tcp_sockopts";
      __int16 v108 = 1024;
      *(_DWORD *)os_log_type_t v109 = v36;
      uint64_t v42 = "%{public}s setsockopt TCP_RXT_CONNDROPTIME failed %{darwin.errno}d, backtrace limit exceeded";
    }
    _os_log_impl(&dword_1830D4000, v40, v41, v42, buf, 0x12u);
    goto LABEL_115;
  }
LABEL_117:
  if (!nw_tcp_options_get_retransmit_fin_drop(a2) || !setsockopt(*(_DWORD *)(a1 + 172), 6, 256, v105, 4u)) {
    goto LABEL_142;
  }
  int v45 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
  if (__nwlog_connection_log::onceToken != -1) {
    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
  }
  os_log_type_t v46 = gconnectionLogObj;
  if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)netcore_stats_tcp_report buf = 136446722;
    char v107 = "nw_socket_set_bidirectional_tcp_sockopts";
    __int16 v108 = 2080;
    *(void *)os_log_type_t v109 = a1 + 308;
    *(_WORD *)&v109[8] = 1024;
    *(_DWORD *)&v109[10] = v45;
    _os_log_impl(&dword_1830D4000, v46, OS_LOG_TYPE_ERROR, "%{public}s %s setsockopt TCP_RXT_FINDROP failed %{darwin.errno}d", buf, 0x1Cu);
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v47 = gLogObj;
  if (v45 == 22)
  {
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
      char v107 = "nw_socket_set_bidirectional_tcp_sockopts";
      __int16 v108 = 1024;
      *(_DWORD *)os_log_type_t v109 = 22;
      _os_log_impl(&dword_1830D4000, v47, OS_LOG_TYPE_ERROR, "%{public}s setsockopt TCP_RXT_FINDROP failed %{darwin.errno}d", buf, 0x12u);
    }
    goto LABEL_142;
  }
  *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
  char v107 = "nw_socket_set_bidirectional_tcp_sockopts";
  __int16 v108 = 1024;
  *(_DWORD *)os_log_type_t v109 = v45;
  size_t v48 = (char *)_os_log_send_and_compose_impl();
  v103[0] = OS_LOG_TYPE_ERROR;
  v102[0] = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v48, v103, v102))
  {
    if (v103[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v49 = gLogObj;
      os_log_type_t v50 = v103[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, v103[0])) {
        goto LABEL_140;
      }
      *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
      char v107 = "nw_socket_set_bidirectional_tcp_sockopts";
      __int16 v108 = 1024;
      *(_DWORD *)os_log_type_t v109 = v45;
      uint64_t v51 = "%{public}s setsockopt TCP_RXT_FINDROP failed %{darwin.errno}d";
      goto LABEL_139;
    }
    if (v102[0] == OS_LOG_TYPE_DEFAULT)
    {
      os_log_type_t v49 = __nwlog_obj();
      os_log_type_t v50 = v103[0];
      if (!os_log_type_enabled(v49, v103[0])) {
        goto LABEL_140;
      }
      *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
      char v107 = "nw_socket_set_bidirectional_tcp_sockopts";
      __int16 v108 = 1024;
      *(_DWORD *)os_log_type_t v109 = v45;
      uint64_t v51 = "%{public}s setsockopt TCP_RXT_FINDROP failed %{darwin.errno}d, backtrace limit exceeded";
      goto LABEL_139;
    }
    os_log_type_t v52 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v49 = gLogObj;
    os_log_type_t v50 = v103[0];
    BOOL v53 = os_log_type_enabled((os_log_t)gLogObj, v103[0]);
    if (v52)
    {
      if (v53)
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446722;
        char v107 = "nw_socket_set_bidirectional_tcp_sockopts";
        __int16 v108 = 1024;
        *(_DWORD *)os_log_type_t v109 = v45;
        *(_WORD *)&v109[4] = 2082;
        *(void *)&v109[6] = v52;
        _os_log_impl(&dword_1830D4000, v49, v50, "%{public}s setsockopt TCP_RXT_FINDROP failed %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x1Cu);
      }
      free(v52);
      goto LABEL_140;
    }
    if (v53)
    {
      *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
      char v107 = "nw_socket_set_bidirectional_tcp_sockopts";
      __int16 v108 = 1024;
      *(_DWORD *)os_log_type_t v109 = v45;
      uint64_t v51 = "%{public}s setsockopt TCP_RXT_FINDROP failed %{darwin.errno}d, no backtrace";
LABEL_139:
      _os_log_impl(&dword_1830D4000, v49, v50, v51, buf, 0x12u);
    }
  }
LABEL_140:
  if (v48) {
    free(v48);
  }
LABEL_142:
  *(_DWORD *)BOOL v103 = 0;
  *(_DWORD *)BOOL v103 = nw_tcp_options_get_persist_timeout(a2);
  if (!*(_DWORD *)v103 || !setsockopt(*(_DWORD *)(a1 + 172), 6, 64, v103, 4u)) {
    goto LABEL_167;
  }
  int v54 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
  if (__nwlog_connection_log::onceToken != -1) {
    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
  }
  os_log_type_t v55 = gconnectionLogObj;
  if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)netcore_stats_tcp_report buf = 136446722;
    char v107 = "nw_socket_set_bidirectional_tcp_sockopts";
    __int16 v108 = 2080;
    *(void *)os_log_type_t v109 = a1 + 308;
    *(_WORD *)&v109[8] = 1024;
    *(_DWORD *)&v109[10] = v54;
    _os_log_impl(&dword_1830D4000, v55, OS_LOG_TYPE_ERROR, "%{public}s %s setsockopt PERSIST_TIMEOUT failed %{darwin.errno}d", buf, 0x1Cu);
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  uint64_t v56 = gLogObj;
  if (v54 == 22)
  {
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
      char v107 = "nw_socket_set_bidirectional_tcp_sockopts";
      __int16 v108 = 1024;
      *(_DWORD *)os_log_type_t v109 = 22;
      _os_log_impl(&dword_1830D4000, v56, OS_LOG_TYPE_ERROR, "%{public}s setsockopt PERSIST_TIMEOUT failed %{darwin.errno}d", buf, 0x12u);
    }
    goto LABEL_167;
  }
  *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
  char v107 = "nw_socket_set_bidirectional_tcp_sockopts";
  __int16 v108 = 1024;
  *(_DWORD *)os_log_type_t v109 = v54;
  id v57 = (char *)_os_log_send_and_compose_impl();
  v102[0] = OS_LOG_TYPE_ERROR;
  v101[0] = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v57, v102, v101))
  {
    if (v102[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v58 = gLogObj;
      os_log_type_t v59 = v102[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, v102[0])) {
        goto LABEL_165;
      }
      *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
      char v107 = "nw_socket_set_bidirectional_tcp_sockopts";
      __int16 v108 = 1024;
      *(_DWORD *)os_log_type_t v109 = v54;
      int64_t v60 = "%{public}s setsockopt PERSIST_TIMEOUT failed %{darwin.errno}d";
      goto LABEL_164;
    }
    if (v101[0] == OS_LOG_TYPE_DEFAULT)
    {
      int v58 = __nwlog_obj();
      os_log_type_t v59 = v102[0];
      if (!os_log_type_enabled(v58, v102[0])) {
        goto LABEL_165;
      }
      *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
      char v107 = "nw_socket_set_bidirectional_tcp_sockopts";
      __int16 v108 = 1024;
      *(_DWORD *)os_log_type_t v109 = v54;
      int64_t v60 = "%{public}s setsockopt PERSIST_TIMEOUT failed %{darwin.errno}d, backtrace limit exceeded";
      goto LABEL_164;
    }
    unint64_t v61 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v58 = gLogObj;
    os_log_type_t v59 = v102[0];
    BOOL v62 = os_log_type_enabled((os_log_t)gLogObj, v102[0]);
    if (v61)
    {
      if (v62)
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446722;
        char v107 = "nw_socket_set_bidirectional_tcp_sockopts";
        __int16 v108 = 1024;
        *(_DWORD *)os_log_type_t v109 = v54;
        *(_WORD *)&v109[4] = 2082;
        *(void *)&v109[6] = v61;
        _os_log_impl(&dword_1830D4000, v58, v59, "%{public}s setsockopt PERSIST_TIMEOUT failed %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x1Cu);
      }
      free(v61);
      goto LABEL_165;
    }
    if (v62)
    {
      *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
      char v107 = "nw_socket_set_bidirectional_tcp_sockopts";
      __int16 v108 = 1024;
      *(_DWORD *)os_log_type_t v109 = v54;
      int64_t v60 = "%{public}s setsockopt PERSIST_TIMEOUT failed %{darwin.errno}d, no backtrace";
LABEL_164:
      _os_log_impl(&dword_1830D4000, v58, v59, v60, buf, 0x12u);
    }
  }
LABEL_165:
  if (v57) {
    free(v57);
  }
LABEL_167:
  if (!nw_tcp_options_get_enable_background_traffic_management(a2)
    || !setsockopt(*(_DWORD *)(a1 + 172), 0xFFFF, 4357, v105, 4u))
  {
    goto LABEL_192;
  }
  int v63 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
  if (__nwlog_connection_log::onceToken != -1) {
    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
  }
  nw_endpoint_t v64 = gconnectionLogObj;
  if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)netcore_stats_tcp_report buf = 136446722;
    char v107 = "nw_socket_set_bidirectional_tcp_sockopts";
    __int16 v108 = 2080;
    *(void *)os_log_type_t v109 = a1 + 308;
    *(_WORD *)&v109[8] = 1024;
    *(_DWORD *)&v109[10] = v63;
    _os_log_impl(&dword_1830D4000, v64, OS_LOG_TYPE_ERROR, "%{public}s %s setsockopt SO_TRAFFIC_MGT_BACKGROUND failed %{darwin.errno}d", buf, 0x1Cu);
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  uint64_t v65 = gLogObj;
  if (v63 == 22)
  {
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
      char v107 = "nw_socket_set_bidirectional_tcp_sockopts";
      __int16 v108 = 1024;
      *(_DWORD *)os_log_type_t v109 = 22;
      _os_log_impl(&dword_1830D4000, v65, OS_LOG_TYPE_ERROR, "%{public}s setsockopt SO_TRAFFIC_MGT_BACKGROUND failed %{darwin.errno}d", buf, 0x12u);
    }
    goto LABEL_192;
  }
  *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
  char v107 = "nw_socket_set_bidirectional_tcp_sockopts";
  __int16 v108 = 1024;
  *(_DWORD *)os_log_type_t v109 = v63;
  uint64_t v66 = (char *)_os_log_send_and_compose_impl();
  v102[0] = OS_LOG_TYPE_ERROR;
  v101[0] = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v66, v102, v101))
  {
    if (v102[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v67 = gLogObj;
      os_log_type_t v68 = v102[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, v102[0])) {
        goto LABEL_190;
      }
      *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
      char v107 = "nw_socket_set_bidirectional_tcp_sockopts";
      __int16 v108 = 1024;
      *(_DWORD *)os_log_type_t v109 = v63;
      uint64_t v69 = "%{public}s setsockopt SO_TRAFFIC_MGT_BACKGROUND failed %{darwin.errno}d";
      goto LABEL_189;
    }
    if (v101[0] == OS_LOG_TYPE_DEFAULT)
    {
      BOOL v67 = __nwlog_obj();
      os_log_type_t v68 = v102[0];
      if (!os_log_type_enabled(v67, v102[0])) {
        goto LABEL_190;
      }
      *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
      char v107 = "nw_socket_set_bidirectional_tcp_sockopts";
      __int16 v108 = 1024;
      *(_DWORD *)os_log_type_t v109 = v63;
      uint64_t v69 = "%{public}s setsockopt SO_TRAFFIC_MGT_BACKGROUND failed %{darwin.errno}d, backtrace limit exceeded";
      goto LABEL_189;
    }
    long long v70 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v67 = gLogObj;
    os_log_type_t v68 = v102[0];
    BOOL v71 = os_log_type_enabled((os_log_t)gLogObj, v102[0]);
    if (v70)
    {
      if (v71)
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446722;
        char v107 = "nw_socket_set_bidirectional_tcp_sockopts";
        __int16 v108 = 1024;
        *(_DWORD *)os_log_type_t v109 = v63;
        *(_WORD *)&v109[4] = 2082;
        *(void *)&v109[6] = v70;
        _os_log_impl(&dword_1830D4000, v67, v68, "%{public}s setsockopt SO_TRAFFIC_MGT_BACKGROUND failed %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x1Cu);
      }
      free(v70);
      goto LABEL_190;
    }
    if (v71)
    {
      *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
      char v107 = "nw_socket_set_bidirectional_tcp_sockopts";
      __int16 v108 = 1024;
      *(_DWORD *)os_log_type_t v109 = v63;
      uint64_t v69 = "%{public}s setsockopt SO_TRAFFIC_MGT_BACKGROUND failed %{darwin.errno}d, no backtrace";
LABEL_189:
      _os_log_impl(&dword_1830D4000, v67, v68, v69, buf, 0x12u);
    }
  }
LABEL_190:
  if (v66) {
    free(v66);
  }
LABEL_192:
  if (!nw_tcp_options_get_enable_keepalive(a2)) {
    goto LABEL_200;
  }
  if ((setsockopt(*(_DWORD *)(a1 + 172), 0xFFFF, 8, v105, 4u) & 0x80000000) == 0)
  {
    *(_DWORD *)int v102 = 0;
    *(_DWORD *)int v102 = nw_tcp_options_get_keepalive_idle_time(a2);
    if (*(_DWORD *)v102 && setsockopt(*(_DWORD *)(a1 + 172), 6, 16, v102, 4u) < 0)
    {
      uint64_t v72 = **(unsigned int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      int v81 = gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446722;
        char v107 = "nw_socket_set_bidirectional_tcp_sockopts";
        __int16 v108 = 2080;
        *(void *)os_log_type_t v109 = a1 + 308;
        *(_WORD *)&v109[8] = 1024;
        *(_DWORD *)&v109[10] = v72;
        _os_log_impl(&dword_1830D4000, v81, OS_LOG_TYPE_ERROR, "%{public}s %s setsockopt TCP_KEEPALIVE failed %{darwin.errno}d", buf, 0x1Cu);
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v74 = gLogObj;
      if (v72 == 22)
      {
        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
          char v107 = "nw_socket_set_bidirectional_tcp_sockopts";
          __int16 v108 = 1024;
          *(_DWORD *)os_log_type_t v109 = 22;
          uint64_t v75 = "%{public}s setsockopt TCP_KEEPALIVE failed %{darwin.errno}d";
          goto LABEL_250;
        }
        goto LABEL_306;
      }
      *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
      char v107 = "nw_socket_set_bidirectional_tcp_sockopts";
      __int16 v108 = 1024;
      *(_DWORD *)os_log_type_t v109 = v72;
      BOOL v77 = (char *)_os_log_send_and_compose_impl();
      v101[0] = OS_LOG_TYPE_ERROR;
      v99[0] = OS_LOG_TYPE_DEFAULT;
      if (!__nwlog_fault(v77, v101, v99)) {
        goto LABEL_304;
      }
      if (v101[0] == OS_LOG_TYPE_FAULT)
      {
        uint64_t v78 = __nwlog_obj();
        os_log_type_t v79 = v101[0];
        if (!os_log_type_enabled(v78, v101[0])) {
          goto LABEL_304;
        }
        *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
        char v107 = "nw_socket_set_bidirectional_tcp_sockopts";
        __int16 v108 = 1024;
        *(_DWORD *)os_log_type_t v109 = v72;
        uint64_t v80 = "%{public}s setsockopt TCP_KEEPALIVE failed %{darwin.errno}d";
        goto LABEL_303;
      }
      if (v99[0] == OS_LOG_TYPE_DEFAULT)
      {
        uint64_t v78 = __nwlog_obj();
        os_log_type_t v79 = v101[0];
        if (!os_log_type_enabled(v78, v101[0])) {
          goto LABEL_304;
        }
        *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
        char v107 = "nw_socket_set_bidirectional_tcp_sockopts";
        __int16 v108 = 1024;
        *(_DWORD *)os_log_type_t v109 = v72;
        uint64_t v80 = "%{public}s setsockopt TCP_KEEPALIVE failed %{darwin.errno}d, backtrace limit exceeded";
        goto LABEL_303;
      }
      uint64_t v83 = (char *)__nw_create_backtrace_string();
      uint64_t v78 = __nwlog_obj();
      os_log_type_t v79 = v101[0];
      BOOL v89 = os_log_type_enabled(v78, v101[0]);
      if (!v83)
      {
        if (!v89) {
          goto LABEL_304;
        }
        *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
        char v107 = "nw_socket_set_bidirectional_tcp_sockopts";
        __int16 v108 = 1024;
        *(_DWORD *)os_log_type_t v109 = v72;
        uint64_t v80 = "%{public}s setsockopt TCP_KEEPALIVE failed %{darwin.errno}d, no backtrace";
        goto LABEL_303;
      }
      if (!v89) {
        goto LABEL_287;
      }
      *(_DWORD *)netcore_stats_tcp_report buf = 136446722;
      char v107 = "nw_socket_set_bidirectional_tcp_sockopts";
      __int16 v108 = 1024;
      *(_DWORD *)os_log_type_t v109 = v72;
      *(_WORD *)&v109[4] = 2082;
      *(void *)&v109[6] = v83;
      uint64_t v85 = "%{public}s setsockopt TCP_KEEPALIVE failed %{darwin.errno}d, dumping backtrace:%{public}s";
    }
    else
    {
      *(_DWORD *)id v101 = 0;
      *(_DWORD *)id v101 = nw_tcp_options_get_keepalive_interval(a2);
      if (!*(_DWORD *)v101 || (setsockopt(*(_DWORD *)(a1 + 172), 6, 257, v101, 4u) & 0x80000000) == 0)
      {
        *(_DWORD *)uint64_t v99 = nw_tcp_options_get_keepalive_count(a2);
        if (!*(_DWORD *)v99 || (setsockopt(*(_DWORD *)(a1 + 172), 6, 258, v99, 4u) & 0x80000000) == 0)
        {
LABEL_200:
          if (!nw_tcp_options_get_enable_keepalive_offload(a2)
            || (setsockopt(*(_DWORD *)(a1 + 172), 6, 529, v105, 4u) & 0x80000000) == 0)
          {
            return 1;
          }
          uint64_t v72 = **(unsigned int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          id v76 = gconnectionLogObj;
          if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)netcore_stats_tcp_report buf = 136446722;
            char v107 = "nw_socket_set_bidirectional_tcp_sockopts";
            __int16 v108 = 2080;
            *(void *)os_log_type_t v109 = a1 + 308;
            *(_WORD *)&v109[8] = 1024;
            *(_DWORD *)&v109[10] = v72;
            _os_log_impl(&dword_1830D4000, v76, OS_LOG_TYPE_ERROR, "%{public}s %s setsockopt TCP_KEEPALIVE_OFFLOAD failed %{darwin.errno}d", buf, 0x1Cu);
          }
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          id v74 = gLogObj;
          if (v72 == 22)
          {
            if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
              char v107 = "nw_socket_set_bidirectional_tcp_sockopts";
              __int16 v108 = 1024;
              *(_DWORD *)os_log_type_t v109 = 22;
              uint64_t v75 = "%{public}s setsockopt TCP_KEEPALIVE_OFFLOAD failed %{darwin.errno}d";
              goto LABEL_250;
            }
            goto LABEL_306;
          }
          *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
          char v107 = "nw_socket_set_bidirectional_tcp_sockopts";
          __int16 v108 = 1024;
          *(_DWORD *)os_log_type_t v109 = v72;
          BOOL v77 = (char *)_os_log_send_and_compose_impl();
          v102[0] = OS_LOG_TYPE_ERROR;
          v101[0] = OS_LOG_TYPE_DEFAULT;
          if (!__nwlog_fault(v77, v102, v101)) {
            goto LABEL_304;
          }
          if (v102[0] == OS_LOG_TYPE_FAULT)
          {
            uint64_t v78 = __nwlog_obj();
            os_log_type_t v79 = v102[0];
            if (!os_log_type_enabled(v78, v102[0])) {
              goto LABEL_304;
            }
            *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
            char v107 = "nw_socket_set_bidirectional_tcp_sockopts";
            __int16 v108 = 1024;
            *(_DWORD *)os_log_type_t v109 = v72;
            uint64_t v80 = "%{public}s setsockopt TCP_KEEPALIVE_OFFLOAD failed %{darwin.errno}d";
          }
          else if (v101[0])
          {
            nw_endpoint_t v87 = (char *)__nw_create_backtrace_string();
            uint64_t v78 = __nwlog_obj();
            os_log_type_t v79 = v102[0];
            BOOL v88 = os_log_type_enabled(v78, v102[0]);
            if (v87)
            {
              if (v88)
              {
                *(_DWORD *)netcore_stats_tcp_report buf = 136446722;
                char v107 = "nw_socket_set_bidirectional_tcp_sockopts";
                __int16 v108 = 1024;
                *(_DWORD *)os_log_type_t v109 = v72;
                *(_WORD *)&v109[4] = 2082;
                *(void *)&v109[6] = v87;
                _os_log_impl(&dword_1830D4000, v78, v79, "%{public}s setsockopt TCP_KEEPALIVE_OFFLOAD failed %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x1Cu);
              }
              free(v87);
LABEL_304:
              if (!v77) {
                goto LABEL_306;
              }
LABEL_305:
              free(v77);
              goto LABEL_306;
            }
            if (!v88) {
              goto LABEL_304;
            }
            *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
            char v107 = "nw_socket_set_bidirectional_tcp_sockopts";
            __int16 v108 = 1024;
            *(_DWORD *)os_log_type_t v109 = v72;
            uint64_t v80 = "%{public}s setsockopt TCP_KEEPALIVE_OFFLOAD failed %{darwin.errno}d, no backtrace";
          }
          else
          {
            uint64_t v78 = __nwlog_obj();
            os_log_type_t v79 = v102[0];
            if (!os_log_type_enabled(v78, v102[0])) {
              goto LABEL_304;
            }
            *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
            char v107 = "nw_socket_set_bidirectional_tcp_sockopts";
            __int16 v108 = 1024;
            *(_DWORD *)os_log_type_t v109 = v72;
            uint64_t v80 = "%{public}s setsockopt TCP_KEEPALIVE_OFFLOAD failed %{darwin.errno}d, backtrace limit exceeded";
          }
LABEL_303:
          _os_log_impl(&dword_1830D4000, v78, v79, v80, buf, 0x12u);
          goto LABEL_304;
        }
        uint64_t v72 = **(unsigned int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        uint64_t v86 = gconnectionLogObj;
        if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446722;
          char v107 = "nw_socket_set_bidirectional_tcp_sockopts";
          __int16 v108 = 2080;
          *(void *)os_log_type_t v109 = a1 + 308;
          *(_WORD *)&v109[8] = 1024;
          *(_DWORD *)&v109[10] = v72;
          _os_log_impl(&dword_1830D4000, v86, OS_LOG_TYPE_ERROR, "%{public}s %s setsockopt TCP_KEEPCNT failed %{darwin.errno}d", buf, 0x1Cu);
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v74 = gLogObj;
        if (v72 == 22)
        {
          if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
            char v107 = "nw_socket_set_bidirectional_tcp_sockopts";
            __int16 v108 = 1024;
            *(_DWORD *)os_log_type_t v109 = 22;
            uint64_t v75 = "%{public}s setsockopt TCP_KEEPCNT failed %{darwin.errno}d";
            goto LABEL_250;
          }
          goto LABEL_306;
        }
        *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
        char v107 = "nw_socket_set_bidirectional_tcp_sockopts";
        __int16 v108 = 1024;
        *(_DWORD *)os_log_type_t v109 = v72;
        BOOL v77 = (char *)_os_log_send_and_compose_impl();
        os_log_type_t v100 = OS_LOG_TYPE_ERROR;
        char v98 = 0;
        if (!__nwlog_fault(v77, &v100, &v98)) {
          goto LABEL_304;
        }
        if (v100 == OS_LOG_TYPE_FAULT)
        {
          uint64_t v78 = __nwlog_obj();
          os_log_type_t v79 = v100;
          if (!os_log_type_enabled(v78, v100)) {
            goto LABEL_304;
          }
          *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
          char v107 = "nw_socket_set_bidirectional_tcp_sockopts";
          __int16 v108 = 1024;
          *(_DWORD *)os_log_type_t v109 = v72;
          uint64_t v80 = "%{public}s setsockopt TCP_KEEPCNT failed %{darwin.errno}d";
          goto LABEL_303;
        }
        if (!v98)
        {
          uint64_t v78 = __nwlog_obj();
          os_log_type_t v79 = v100;
          if (!os_log_type_enabled(v78, v100)) {
            goto LABEL_304;
          }
          *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
          char v107 = "nw_socket_set_bidirectional_tcp_sockopts";
          __int16 v108 = 1024;
          *(_DWORD *)os_log_type_t v109 = v72;
          uint64_t v80 = "%{public}s setsockopt TCP_KEEPCNT failed %{darwin.errno}d, backtrace limit exceeded";
          goto LABEL_303;
        }
        uint64_t v83 = (char *)__nw_create_backtrace_string();
        uint64_t v78 = __nwlog_obj();
        os_log_type_t v79 = v100;
        BOOL v91 = os_log_type_enabled(v78, v100);
        if (!v83)
        {
          if (!v91) {
            goto LABEL_304;
          }
          *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
          char v107 = "nw_socket_set_bidirectional_tcp_sockopts";
          __int16 v108 = 1024;
          *(_DWORD *)os_log_type_t v109 = v72;
          uint64_t v80 = "%{public}s setsockopt TCP_KEEPCNT failed %{darwin.errno}d, no backtrace";
          goto LABEL_303;
        }
        if (v91)
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446722;
          char v107 = "nw_socket_set_bidirectional_tcp_sockopts";
          __int16 v108 = 1024;
          *(_DWORD *)os_log_type_t v109 = v72;
          *(_WORD *)&v109[4] = 2082;
          *(void *)&v109[6] = v83;
          uint64_t v85 = "%{public}s setsockopt TCP_KEEPCNT failed %{darwin.errno}d, dumping backtrace:%{public}s";
          goto LABEL_286;
        }
LABEL_287:
        free(v83);
        if (!v77) {
          goto LABEL_306;
        }
        goto LABEL_305;
      }
      uint64_t v72 = **(unsigned int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      __int16 v82 = gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446722;
        char v107 = "nw_socket_set_bidirectional_tcp_sockopts";
        __int16 v108 = 2080;
        *(void *)os_log_type_t v109 = a1 + 308;
        *(_WORD *)&v109[8] = 1024;
        *(_DWORD *)&v109[10] = v72;
        _os_log_impl(&dword_1830D4000, v82, OS_LOG_TYPE_ERROR, "%{public}s %s setsockopt TCP_KEEPINTVL failed %{darwin.errno}d", buf, 0x1Cu);
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v74 = gLogObj;
      if (v72 == 22)
      {
        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
          char v107 = "nw_socket_set_bidirectional_tcp_sockopts";
          __int16 v108 = 1024;
          *(_DWORD *)os_log_type_t v109 = 22;
          uint64_t v75 = "%{public}s setsockopt TCP_KEEPINTVL failed %{darwin.errno}d";
          goto LABEL_250;
        }
        goto LABEL_306;
      }
      *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
      char v107 = "nw_socket_set_bidirectional_tcp_sockopts";
      __int16 v108 = 1024;
      *(_DWORD *)os_log_type_t v109 = v72;
      BOOL v77 = (char *)_os_log_send_and_compose_impl();
      v99[0] = OS_LOG_TYPE_ERROR;
      os_log_type_t v100 = OS_LOG_TYPE_DEFAULT;
      if (!__nwlog_fault(v77, v99, &v100)) {
        goto LABEL_304;
      }
      if (v99[0] == OS_LOG_TYPE_FAULT)
      {
        uint64_t v78 = __nwlog_obj();
        os_log_type_t v79 = v99[0];
        if (!os_log_type_enabled(v78, v99[0])) {
          goto LABEL_304;
        }
        *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
        char v107 = "nw_socket_set_bidirectional_tcp_sockopts";
        __int16 v108 = 1024;
        *(_DWORD *)os_log_type_t v109 = v72;
        uint64_t v80 = "%{public}s setsockopt TCP_KEEPINTVL failed %{darwin.errno}d";
        goto LABEL_303;
      }
      if (v100 == OS_LOG_TYPE_DEFAULT)
      {
        uint64_t v78 = __nwlog_obj();
        os_log_type_t v79 = v99[0];
        if (!os_log_type_enabled(v78, v99[0])) {
          goto LABEL_304;
        }
        *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
        char v107 = "nw_socket_set_bidirectional_tcp_sockopts";
        __int16 v108 = 1024;
        *(_DWORD *)os_log_type_t v109 = v72;
        uint64_t v80 = "%{public}s setsockopt TCP_KEEPINTVL failed %{darwin.errno}d, backtrace limit exceeded";
        goto LABEL_303;
      }
      uint64_t v83 = (char *)__nw_create_backtrace_string();
      uint64_t v78 = __nwlog_obj();
      os_log_type_t v79 = v99[0];
      BOOL v90 = os_log_type_enabled(v78, v99[0]);
      if (!v83)
      {
        if (!v90) {
          goto LABEL_304;
        }
        *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
        char v107 = "nw_socket_set_bidirectional_tcp_sockopts";
        __int16 v108 = 1024;
        *(_DWORD *)os_log_type_t v109 = v72;
        uint64_t v80 = "%{public}s setsockopt TCP_KEEPINTVL failed %{darwin.errno}d, no backtrace";
        goto LABEL_303;
      }
      if (!v90) {
        goto LABEL_287;
      }
      *(_DWORD *)netcore_stats_tcp_report buf = 136446722;
      char v107 = "nw_socket_set_bidirectional_tcp_sockopts";
      __int16 v108 = 1024;
      *(_DWORD *)os_log_type_t v109 = v72;
      *(_WORD *)&v109[4] = 2082;
      *(void *)&v109[6] = v83;
      uint64_t v85 = "%{public}s setsockopt TCP_KEEPINTVL failed %{darwin.errno}d, dumping backtrace:%{public}s";
    }
LABEL_286:
    _os_log_impl(&dword_1830D4000, v78, v79, v85, buf, 0x1Cu);
    goto LABEL_287;
  }
  uint64_t v72 = **(unsigned int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
  if (__nwlog_connection_log::onceToken != -1) {
    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
  }
  BOOL v73 = gconnectionLogObj;
  if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)netcore_stats_tcp_report buf = 136446722;
    char v107 = "nw_socket_set_bidirectional_tcp_sockopts";
    __int16 v108 = 2080;
    *(void *)os_log_type_t v109 = a1 + 308;
    *(_WORD *)&v109[8] = 1024;
    *(_DWORD *)&v109[10] = v72;
    _os_log_impl(&dword_1830D4000, v73, OS_LOG_TYPE_ERROR, "%{public}s %s setsockopt SO_KEEPALIVE failed %{darwin.errno}d", buf, 0x1Cu);
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v74 = gLogObj;
  if (v72 != 22)
  {
    *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
    char v107 = "nw_socket_set_bidirectional_tcp_sockopts";
    __int16 v108 = 1024;
    *(_DWORD *)os_log_type_t v109 = v72;
    BOOL v77 = (char *)_os_log_send_and_compose_impl();
    v102[0] = OS_LOG_TYPE_ERROR;
    v101[0] = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v77, v102, v101)) {
      goto LABEL_304;
    }
    if (v102[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v78 = gLogObj;
      os_log_type_t v79 = v102[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, v102[0])) {
        goto LABEL_304;
      }
      *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
      char v107 = "nw_socket_set_bidirectional_tcp_sockopts";
      __int16 v108 = 1024;
      *(_DWORD *)os_log_type_t v109 = v72;
      uint64_t v80 = "%{public}s setsockopt SO_KEEPALIVE failed %{darwin.errno}d";
      goto LABEL_303;
    }
    if (v101[0] == OS_LOG_TYPE_DEFAULT)
    {
      uint64_t v78 = __nwlog_obj();
      os_log_type_t v79 = v102[0];
      if (!os_log_type_enabled(v78, v102[0])) {
        goto LABEL_304;
      }
      *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
      char v107 = "nw_socket_set_bidirectional_tcp_sockopts";
      __int16 v108 = 1024;
      *(_DWORD *)os_log_type_t v109 = v72;
      uint64_t v80 = "%{public}s setsockopt SO_KEEPALIVE failed %{darwin.errno}d, backtrace limit exceeded";
      goto LABEL_303;
    }
    uint64_t v83 = (char *)__nw_create_backtrace_string();
    uint64_t v78 = __nwlog_obj();
    os_log_type_t v79 = v102[0];
    BOOL v84 = os_log_type_enabled(v78, v102[0]);
    if (!v83)
    {
      if (!v84) {
        goto LABEL_304;
      }
      *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
      char v107 = "nw_socket_set_bidirectional_tcp_sockopts";
      __int16 v108 = 1024;
      *(_DWORD *)os_log_type_t v109 = v72;
      uint64_t v80 = "%{public}s setsockopt SO_KEEPALIVE failed %{darwin.errno}d, no backtrace";
      goto LABEL_303;
    }
    if (!v84) {
      goto LABEL_287;
    }
    *(_DWORD *)netcore_stats_tcp_report buf = 136446722;
    char v107 = "nw_socket_set_bidirectional_tcp_sockopts";
    __int16 v108 = 1024;
    *(_DWORD *)os_log_type_t v109 = v72;
    *(_WORD *)&v109[4] = 2082;
    *(void *)&v109[6] = v83;
    uint64_t v85 = "%{public}s setsockopt SO_KEEPALIVE failed %{darwin.errno}d, dumping backtrace:%{public}s";
    goto LABEL_286;
  }
  if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
    char v107 = "nw_socket_set_bidirectional_tcp_sockopts";
    __int16 v108 = 1024;
    *(_DWORD *)os_log_type_t v109 = 22;
    uint64_t v75 = "%{public}s setsockopt SO_KEEPALIVE failed %{darwin.errno}d";
LABEL_250:
    _os_log_impl(&dword_1830D4000, v74, OS_LOG_TYPE_ERROR, v75, buf, 0x12u);
  }
LABEL_306:
  nw_socket_internal_error(a1, v72);
  return 0;
}

uint64_t nw_tcp_options_get_maximum_segment_size(void *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (nw_protocol_options_is_tcp(v1))
  {
    *(void *)netcore_stats_tcp_report buf = 0;
    *(void *)&buf[8] = buf;
    int v16 = 0;
    *(void *)&buf[16] = 0x2020000000;
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_tcp_options_get_maximum_segment_size_block_invoke;
    v12[3] = &unk_1E5248E90;
    void v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    uint64_t v2 = *(unsigned int *)(*(void *)&buf[8] + 24);
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  id v4 = __nwlog_obj();
  *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_tcp_options_get_maximum_segment_size";
  int v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int16 v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_tcp_options_get_maximum_segment_size";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_options_is_tcp(options)", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __int16 v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_tcp_options_get_maximum_segment_size";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&void buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_tcp(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_tcp_options_get_maximum_segment_size";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_tcp(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __int16 v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_tcp_options_get_maximum_segment_size";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_options_is_tcp(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
  uint64_t v2 = 0;
LABEL_3:

  return v2;
}

void sub_1832723F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

BOOL nw_tcp_options_get_no_timewait(void *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (nw_protocol_options_is_tcp(v1))
  {
    *(void *)netcore_stats_tcp_report buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000;
    char v16 = 0;
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_tcp_options_get_no_timewait_block_invoke;
    v12[3] = &unk_1E5248E90;
    void v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    BOOL v2 = *(unsigned char *)(*(void *)&buf[8] + 24) != 0;
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  id v4 = __nwlog_obj();
  *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_tcp_options_get_no_timewait";
  int v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int16 v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_tcp_options_get_no_timewait";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_options_is_tcp(options)", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __int16 v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_tcp_options_get_no_timewait";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&void buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_tcp(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_tcp_options_get_no_timewait";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_tcp(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __int16 v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_tcp_options_get_no_timewait";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_options_is_tcp(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
  BOOL v2 = 0;
LABEL_3:

  return v2;
}

void sub_183272738(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

BOOL nw_tcp_options_get_retransmit_fin_drop(void *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (nw_protocol_options_is_tcp(v1))
  {
    *(void *)netcore_stats_tcp_report buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000;
    char v16 = 0;
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_tcp_options_get_retransmit_fin_drop_block_invoke;
    v12[3] = &unk_1E5248E90;
    void v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    BOOL v2 = *(unsigned char *)(*(void *)&buf[8] + 24) != 0;
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  id v4 = __nwlog_obj();
  *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_tcp_options_get_retransmit_fin_drop";
  int v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int16 v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_tcp_options_get_retransmit_fin_drop";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_options_is_tcp(options)", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __int16 v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_tcp_options_get_retransmit_fin_drop";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&void buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_tcp(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_tcp_options_get_retransmit_fin_drop";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_tcp(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __int16 v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_tcp_options_get_retransmit_fin_drop";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_options_is_tcp(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
  BOOL v2 = 0;
LABEL_3:

  return v2;
}

void sub_183272A80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

BOOL nw_tcp_options_get_reduce_buffering(void *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (nw_protocol_options_is_tcp(v1))
  {
    *(void *)netcore_stats_tcp_report buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000;
    char v16 = 0;
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_tcp_options_get_reduce_buffering_block_invoke;
    v12[3] = &unk_1E5248E90;
    void v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    BOOL v2 = *(unsigned char *)(*(void *)&buf[8] + 24) != 0;
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  id v4 = __nwlog_obj();
  *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_tcp_options_get_reduce_buffering";
  int v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int16 v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_tcp_options_get_reduce_buffering";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_options_is_tcp(options)", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __int16 v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_tcp_options_get_reduce_buffering";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&void buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_tcp(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_tcp_options_get_reduce_buffering";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_tcp(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __int16 v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_tcp_options_get_reduce_buffering";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_options_is_tcp(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
  BOOL v2 = 0;
LABEL_3:

  return v2;
}

void sub_183272DC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

BOOL nw_tcp_options_get_no_push(void *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (nw_protocol_options_is_tcp(v1))
  {
    *(void *)netcore_stats_tcp_report buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000;
    char v16 = 0;
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_tcp_options_get_no_push_block_invoke;
    v12[3] = &unk_1E5248E90;
    void v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    BOOL v2 = *(unsigned char *)(*(void *)&buf[8] + 24) != 0;
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  id v4 = __nwlog_obj();
  *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_tcp_options_get_no_push";
  int v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int16 v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_tcp_options_get_no_push";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_options_is_tcp(options)", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __int16 v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_tcp_options_get_no_push";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&void buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_tcp(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_tcp_options_get_no_push";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_tcp(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __int16 v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_tcp_options_get_no_push";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_options_is_tcp(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
  BOOL v2 = 0;
LABEL_3:

  return v2;
}

void sub_183273110(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

BOOL nw_tcp_options_get_no_delay(void *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (nw_protocol_options_is_tcp(v1))
  {
    *(void *)netcore_stats_tcp_report buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000;
    char v16 = 0;
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_tcp_options_get_no_delay_block_invoke;
    v12[3] = &unk_1E5248E90;
    void v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    BOOL v2 = *(unsigned char *)(*(void *)&buf[8] + 24) != 0;
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  id v4 = __nwlog_obj();
  *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_tcp_options_get_no_delay";
  int v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int16 v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_tcp_options_get_no_delay";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_options_is_tcp(options)", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __int16 v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_tcp_options_get_no_delay";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&void buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_tcp(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_tcp_options_get_no_delay";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_tcp(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __int16 v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_tcp_options_get_no_delay";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_options_is_tcp(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
  BOOL v2 = 0;
LABEL_3:

  return v2;
}

void sub_183273458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

BOOL nw_tcp_options_get_enable_keepalive(void *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (nw_protocol_options_is_tcp(v1))
  {
    *(void *)netcore_stats_tcp_report buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000;
    char v16 = 0;
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_tcp_options_get_enable_keepalive_block_invoke;
    v12[3] = &unk_1E5248E90;
    void v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    BOOL v2 = *(unsigned char *)(*(void *)&buf[8] + 24) != 0;
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  id v4 = __nwlog_obj();
  *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_tcp_options_get_enable_keepalive";
  int v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int16 v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_tcp_options_get_enable_keepalive";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_options_is_tcp(options)", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __int16 v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_tcp_options_get_enable_keepalive";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&void buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_tcp(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_tcp_options_get_enable_keepalive";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_tcp(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __int16 v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_tcp_options_get_enable_keepalive";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_options_is_tcp(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
  BOOL v2 = 0;
LABEL_3:

  return v2;
}

void sub_1832737A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

BOOL nw_tcp_options_get_enable_background_traffic_management(void *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (nw_protocol_options_is_tcp(v1))
  {
    *(void *)netcore_stats_tcp_report buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000;
    char v16 = 0;
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_tcp_options_get_enable_background_traffic_management_block_invoke;
    v12[3] = &unk_1E5248E90;
    void v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    BOOL v2 = *(unsigned char *)(*(void *)&buf[8] + 24) != 0;
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  id v4 = __nwlog_obj();
  *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_tcp_options_get_enable_background_traffic_management";
  int v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int16 v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_tcp_options_get_enable_background_traffic_management";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_options_is_tcp(options)", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __int16 v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_tcp_options_get_enable_background_traffic_management";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&void buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_tcp(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_tcp_options_get_enable_background_traffic_management";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_tcp(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __int16 v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_tcp_options_get_enable_background_traffic_management";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_options_is_tcp(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
  BOOL v2 = 0;
LABEL_3:

  return v2;
}

void sub_183273AE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

BOOL nw_tcp_options_get_disable_ack_stretching(void *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (nw_protocol_options_is_tcp(v1))
  {
    *(void *)netcore_stats_tcp_report buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000;
    char v16 = 0;
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_tcp_options_get_disable_ack_stretching_block_invoke;
    v12[3] = &unk_1E5248E90;
    void v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    BOOL v2 = *(unsigned char *)(*(void *)&buf[8] + 24) != 0;
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  id v4 = __nwlog_obj();
  *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_tcp_options_get_disable_ack_stretching";
  int v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int16 v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_tcp_options_get_disable_ack_stretching";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_options_is_tcp(options)", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __int16 v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_tcp_options_get_disable_ack_stretching";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&void buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_tcp(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_tcp_options_get_disable_ack_stretching";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_tcp(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __int16 v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_tcp_options_get_disable_ack_stretching";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_options_is_tcp(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
  BOOL v2 = 0;
LABEL_3:

  return v2;
}

void sub_183273E30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

BOOL nw_tcp_options_get_enable_keepalive_offload(void *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (nw_protocol_options_is_tcp(v1))
  {
    *(void *)netcore_stats_tcp_report buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000;
    char v16 = 0;
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_tcp_options_get_enable_keepalive_offload_block_invoke;
    v12[3] = &unk_1E5248E90;
    void v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    BOOL v2 = *(unsigned char *)(*(void *)&buf[8] + 24) != 0;
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  id v4 = __nwlog_obj();
  *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_tcp_options_get_enable_keepalive_offload";
  int v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int16 v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_tcp_options_get_enable_keepalive_offload";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_options_is_tcp(options)", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __int16 v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_tcp_options_get_enable_keepalive_offload";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&void buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_tcp(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_tcp_options_get_enable_keepalive_offload";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_tcp(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __int16 v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_tcp_options_get_enable_keepalive_offload";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_options_is_tcp(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
  BOOL v2 = 0;
LABEL_3:

  return v2;
}

void sub_183274178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

uint64_t nw_socket_set_no_delay(uint64_t a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a1 + 176) != 2) {
    return 22;
  }
  int v15 = a2;
  if (!setsockopt(*(_DWORD *)(a1 + 172), 6, 1, &v15, 4u)) {
    return 0;
  }
  uint64_t v3 = **(unsigned int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
  if (__nwlog_connection_log::onceToken != -1) {
    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
  }
  id v4 = gconnectionLogObj;
  if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)netcore_stats_tcp_report buf = 136446722;
    uint64_t v17 = "nw_socket_set_no_delay";
    __int16 v18 = 2080;
    *(void *)os_log_type_t v19 = a1 + 308;
    *(_WORD *)&v19[8] = 1024;
    *(_DWORD *)&v19[10] = v3;
    _os_log_impl(&dword_1830D4000, v4, OS_LOG_TYPE_ERROR, "%{public}s %s setsockopt TCP_NODELAY failed %{darwin.errno}d", buf, 0x1Cu);
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  int v5 = gLogObj;
  if (v3 == 22)
  {
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
      uint64_t v17 = "nw_socket_set_no_delay";
      __int16 v18 = 1024;
      *(_DWORD *)os_log_type_t v19 = 22;
      _os_log_impl(&dword_1830D4000, v5, OS_LOG_TYPE_ERROR, "%{public}s setsockopt TCP_NODELAY failed %{darwin.errno}d", buf, 0x12u);
    }
    return v3;
  }
  *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
  uint64_t v17 = "nw_socket_set_no_delay";
  __int16 v18 = 1024;
  *(_DWORD *)os_log_type_t v19 = v3;
  __int16 v6 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v7 = gLogObj;
      os_log_type_t v8 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_26;
      }
      *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
      uint64_t v17 = "nw_socket_set_no_delay";
      __int16 v18 = 1024;
      *(_DWORD *)os_log_type_t v19 = v3;
      os_log_type_t v9 = "%{public}s setsockopt TCP_NODELAY failed %{darwin.errno}d";
      goto LABEL_25;
    }
    if (!v13)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v7 = gLogObj;
      os_log_type_t v8 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_26;
      }
      *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
      uint64_t v17 = "nw_socket_set_no_delay";
      __int16 v18 = 1024;
      *(_DWORD *)os_log_type_t v19 = v3;
      os_log_type_t v9 = "%{public}s setsockopt TCP_NODELAY failed %{darwin.errno}d, backtrace limit exceeded";
      goto LABEL_25;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v7 = gLogObj;
    os_log_type_t v8 = type;
    BOOL v11 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (backtrace_string)
    {
      if (v11)
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446722;
        uint64_t v17 = "nw_socket_set_no_delay";
        __int16 v18 = 1024;
        *(_DWORD *)os_log_type_t v19 = v3;
        *(_WORD *)&void v19[4] = 2082;
        *(void *)&v19[6] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s setsockopt TCP_NODELAY failed %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x1Cu);
      }
      free(backtrace_string);
      goto LABEL_26;
    }
    if (v11)
    {
      *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
      uint64_t v17 = "nw_socket_set_no_delay";
      __int16 v18 = 1024;
      *(_DWORD *)os_log_type_t v19 = v3;
      os_log_type_t v9 = "%{public}s setsockopt TCP_NODELAY failed %{darwin.errno}d, no backtrace";
LABEL_25:
      _os_log_impl(&dword_1830D4000, v7, v8, v9, buf, 0x12u);
    }
  }
LABEL_26:
  if (v6) {
    free(v6);
  }
  return v3;
}

uint64_t nw_path_is_defunct(NWConcrete_nw_path *a1, NWConcrete_nw_path_flow_registration *a2)
{
  BOOL v2 = (unsigned __int8 *)nw_path_copy_flow_for_registration(a1, a2);
  if (v2) {
    uint64_t v3 = (v2[186] >> 2) & 1;
  }
  else {
    uint64_t v3 = 0;
  }

  return v3;
}

uint64_t nw_path_flow_registration_ecn_enabled(NWConcrete_nw_path *a1, NWConcrete_nw_path_flow_registration *a2)
{
  BOOL v2 = (unsigned __int8 *)nw_path_copy_flow_for_registration(a1, a2);
  if (v2) {
    uint64_t v3 = (v2[185] >> 2) & 1;
  }
  else {
    uint64_t v3 = 0;
  }

  return v3;
}

BOOL nw_endpoint_flow_attach_channel_protocol(void *a1, uint64_t a2, int a3)
{
  uint64_t v133 = *MEMORY[0x1E4F143B8];
  int v5 = a1;
  __int16 v6 = nw_endpoint_handler_copy_flow(v5);
  if ((*((unsigned char *)v6 + 33) & 0x40) != 0)
  {
    long long uu = 0uLL;
    unsigned int v113 = 0;
    char v16 = (NWConcrete_nw_path *)nw_endpoint_flow_copy_path(v5);
    uint64_t v110 = v16;
    if (!nw_path_flow_registration_get_nexus_instance(v16, *((NWConcrete_nw_path_flow_registration **)v6 + 104), &uu, &v113))
    {
      if (nw_endpoint_handler_get_logging_disabled(v5))
      {
        BOOL v15 = 0;
        goto LABEL_102;
      }
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      char v21 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        id_string = nw_endpoint_handler_get_id_string(v5);
        char v23 = nw_endpoint_handler_dry_run_string(v5);
        nw_endpoint_t v24 = nw_endpoint_handler_copy_endpoint(v5);
        logging_description = nw_endpoint_get_logging_description(v24);
        int v26 = nw_endpoint_handler_state_string(v5);
        uint64_t v27 = nw_endpoint_handler_mode_string(v5);
        id v28 = nw_endpoint_handler_copy_current_path(v5);
        *(_DWORD *)netcore_stats_tcp_report buf = 136447746;
        id v117 = "nw_endpoint_flow_attach_channel_protocol";
        __int16 v118 = 2082;
        uint64_t v119 = (uint64_t)id_string;
        __int16 v120 = 2082;
        os_log_type_t v121 = (void *)v23;
        __int16 v122 = 2082;
        os_log_type_t v123 = logging_description;
        __int16 v124 = 2082;
        uint64_t v125 = v26;
        __int16 v126 = 2082;
        uint64_t v127 = v27;
        __int16 v128 = 2114;
        id v129 = v28;
        _os_log_impl(&dword_1830D4000, v21, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] nexus is not ready", buf, 0x48u);
      }
      BOOL v15 = 0;
LABEL_101:
      char v16 = v110;
LABEL_102:

      goto LABEL_103;
    }
    id v17 = nw_path_copy_flow_for_registration(v16, *((NWConcrete_nw_path_flow_registration **)v6 + 104));
    __int16 v18 = v17;
    if (v17)
    {
      os_log_type_t v19 = v17;
      uint64_t v20 = v19[1];
      if (!v20 || !*((_DWORD *)v19 + 40)) {
        uint64_t v20 = 0;
      }
    }
    else
    {
      uint64_t v20 = 0;
    }

    uint64_t v111 = 0;
    uint64_t v112 = 0;
    HIDWORD(v112) = nw_path_flow_registration_can_support_user_packet_pool(v110, *((void **)v6 + 104));
    if (nw_path_flow_registration_should_use_event_ring(v110, *((void **)v6 + 104))) {
      char v29 = 2;
    }
    else {
      char v29 = 0;
    }
    BYTE4(v112) = BYTE4(v112) & 0xFD | v29;
    uint64_t v111 = v20;
    LODWORD(v112) = 16;
    id v109 = nw_endpoint_handler_copy_parameters(v5);
    char v30 = nw_parameters_copy_context(v109);
    BOOL v31 = nw_channel_create_with_attributes(v30, (unsigned __int8 *)&uu, v113, (uint64_t)&v111);
    nw_endpoint_t v32 = (void *)*((void *)v6 + 113);
    *((void *)v6 + 113) = v31;

    if (!*((void *)v6 + 113))
    {
      if ((nw_endpoint_handler_get_logging_disabled(v5) & 1) == 0)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        BOOL v44 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
        {
          int v45 = nw_endpoint_handler_get_id_string(v5);
          os_log_type_t v46 = nw_endpoint_handler_dry_run_string(v5);
          nw_endpoint_t v47 = nw_endpoint_handler_copy_endpoint(v5);
          size_t v48 = nw_endpoint_get_logging_description(v47);
          os_log_type_t v49 = nw_endpoint_handler_state_string(v5);
          os_log_type_t v50 = nw_endpoint_handler_mode_string(v5);
          id v51 = nw_endpoint_handler_copy_current_path(v5);
          *(_DWORD *)netcore_stats_tcp_report buf = 136447746;
          id v117 = "nw_endpoint_flow_attach_channel_protocol";
          __int16 v118 = 2082;
          uint64_t v119 = (uint64_t)v45;
          __int16 v120 = 2082;
          os_log_type_t v121 = (void *)v46;
          __int16 v122 = 2082;
          os_log_type_t v123 = v48;
          __int16 v124 = 2082;
          uint64_t v125 = v49;
          __int16 v126 = 2082;
          uint64_t v127 = v50;
          __int16 v128 = 2114;
          id v129 = v51;
          _os_log_impl(&dword_1830D4000, v44, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] failed to open channel", buf, 0x48u);
        }
      }
      goto LABEL_99;
    }
    int minimize_logging = nw_endpoint_handler_get_minimize_logging(v5);
    char logging_disabled = nw_endpoint_handler_get_logging_disabled(v5);
    if (minimize_logging)
    {
      if (logging_disabled)
      {
LABEL_33:
        nw_channel_set_close_automatically(*((void *)v6 + 113), 1);
        nw_channel_set_defer_input_available(*((void *)v6 + 113), 1);
        nw_channel_set_protocol_level(*((void *)v6 + 113), a3);
        if (a3 == 2)
        {
          if (nw_protocol_ip_identifier::onceToken != -1) {
            dispatch_once(&nw_protocol_ip_identifier::onceToken, &__block_literal_global_86959);
          }
          if (nw_parameters_has_protocol_in_stack(v109, &nw_protocol_ip_identifier::identifier)) {
            goto LABEL_49;
          }
          os_log_type_t v52 = (void *)*((void *)v6 + 95);
          if (v52)
          {
            if (nw_protocol_ip_identifier::onceToken != -1) {
              dispatch_once(&nw_protocol_ip_identifier::onceToken, &__block_literal_global_86959);
            }
            if (nw_protocols_are_equal(v52, &nw_protocol_ip_identifier::identifier))
            {
LABEL_49:
              nw_endpoint_t v53 = nw_endpoint_handler_copy_endpoint(v5);
              int address_family = nw_endpoint_get_address_family(v53);

              os_log_type_t v55 = (void *)*((void *)v6 + 104);
              if (nw_protocol_ip_identifier::onceToken != -1) {
                dispatch_once(&nw_protocol_ip_identifier::onceToken, &__block_literal_global_86959);
              }
              if (address_family == 2) {
                int v56 = 1;
              }
              else {
                int v56 = 2;
              }
              uint64_t stats_region = nw_channel_get_stats_region(*((void *)v6 + 113), v56);
              nw_path_flow_registration_set_stats_region(v55, 2, (long long *)&nw_protocol_ip_identifier::identifier, stats_region);
            }
          }
        }
        else
        {
          if (a3 == 1)
          {
            nw_channel_set_no_close_delay(*((void *)v6 + 113));
            goto LABEL_65;
          }
          if ((a3 & 0xFFFFFFFE) != 2) {
            goto LABEL_65;
          }
        }
        int v58 = (void *)nw_protocol_tcp_identifier();
        if (nw_parameters_has_protocol_in_stack(v109, v58))
        {
          os_log_type_t v59 = (void *)*((void *)v6 + 104);
          int64_t v60 = (long long *)nw_protocol_tcp_identifier();
          int v61 = 3;
LABEL_64:
          uint64_t v62 = nw_channel_get_stats_region(*((void *)v6 + 113), v61);
          nw_path_flow_registration_set_stats_region(v59, 3, v60, v62);
          goto LABEL_65;
        }
        if (nw_protocol_udp_identifier::onceToken[0] != -1) {
          dispatch_once(nw_protocol_udp_identifier::onceToken, &__block_literal_global_23);
        }
        if (nw_parameters_has_protocol_in_stack(v109, &nw_protocol_udp_identifier::identifier))
        {
          os_log_type_t v59 = (void *)*((void *)v6 + 104);
          if (nw_protocol_udp_identifier::onceToken[0] != -1) {
            dispatch_once(nw_protocol_udp_identifier::onceToken, &__block_literal_global_23);
          }
          int64_t v60 = (long long *)&nw_protocol_udp_identifier::identifier;
          int v61 = 4;
          goto LABEL_64;
        }
        if (nw_parameters_get_upper_transport_protocol(v109) == 253)
        {
          upper_transport_protocol_identifier = (long long *)nw_parameters_get_upper_transport_protocol_identifier(v109);
          uint64_t v78 = (void *)*((void *)v6 + 104);
          uint64_t v79 = nw_channel_get_stats_region(*((void *)v6 + 113), 5);
          nw_path_flow_registration_set_stats_region(v78, 3, upper_transport_protocol_identifier, v79);
          uint64_t v80 = (void *)*((void *)v6 + 104);
          if (nw_protocol_udp_identifier::onceToken[0] != -1) {
            dispatch_once(nw_protocol_udp_identifier::onceToken, &__block_literal_global_23);
          }
          uint64_t v81 = nw_channel_get_stats_region(*((void *)v6 + 113), 4);
          nw_path_flow_registration_set_stats_region(v80, 3, (long long *)&nw_protocol_udp_identifier::identifier, v81);
        }
LABEL_65:
        uint64_t protocol_handler = nw_channel_get_protocol_handler(*((void *)v6 + 113));
        if (protocol_handler)
        {
          if (a2)
          {
            uint64_t v64 = protocol_handler;
            if (protocol_handler != a2)
            {
              uint64_t v65 = *(void **)(protocol_handler + 24);
              if (v65 && *v65)
              {
                uint64_t v66 = nw_protocol_add_input_handler(protocol_handler, a2);
                BOOL v15 = v66;
                if (a3 != 1 && v66) {
                  BOOL v15 = nw_channel_set_path_flow_registration(*((void *)v6 + 113), v110, *((void **)v6 + 104));
                }
                goto LABEL_100;
              }
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              BOOL v71 = (id)gLogObj;
              if (os_log_type_enabled(v71, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
                id v117 = "nw_protocol_utilities_add_input_handler";
                __int16 v118 = 2048;
                uint64_t v119 = v64;
                _os_log_impl(&dword_1830D4000, v71, OS_LOG_TYPE_ERROR, "%{public}s Unable to invoke add_input_handler on protocol %p because it is not valid", buf, 0x16u);
              }

LABEL_99:
              BOOL v15 = 0;
LABEL_100:

              goto LABEL_101;
            }
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            id v67 = (id)gLogObj;
            *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
            id v117 = "nw_protocol_utilities_add_input_handler";
            __int16 v118 = 2048;
            uint64_t v119 = a2;
            os_log_type_t v68 = (char *)_os_log_send_and_compose_impl();

            os_log_type_t type = OS_LOG_TYPE_ERROR;
            char v114 = 0;
            if (!__nwlog_fault(v68, &type, &v114)) {
              goto LABEL_97;
            }
            if (type == OS_LOG_TYPE_FAULT)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              uint64_t v69 = (id)gLogObj;
              os_log_type_t v70 = type;
              if (os_log_type_enabled(v69, type))
              {
                *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
                id v117 = "nw_protocol_utilities_add_input_handler";
                __int16 v118 = 2048;
                uint64_t v119 = a2;
                _os_log_impl(&dword_1830D4000, v69, v70, "%{public}s Cannot add input handler %p to itself", buf, 0x16u);
              }
            }
            else
            {
              if (v114)
              {
                uint64_t v72 = a2;
                backtrace_string = (char *)__nw_create_backtrace_string();
                id v74 = __nwlog_obj();
                os_log_type_t v75 = type;
                BOOL v76 = os_log_type_enabled(v74, type);
                if (backtrace_string)
                {
                  if (v76)
                  {
                    *(_DWORD *)netcore_stats_tcp_report buf = 136446722;
                    id v117 = "nw_protocol_utilities_add_input_handler";
                    __int16 v118 = 2048;
                    uint64_t v119 = v72;
                    __int16 v120 = 2082;
                    os_log_type_t v121 = backtrace_string;
                    _os_log_impl(&dword_1830D4000, v74, v75, "%{public}s Cannot add input handler %p to itself, dumping backtrace:%{public}s", buf, 0x20u);
                  }

                  free(backtrace_string);
                  if (!v68) {
                    goto LABEL_99;
                  }
                  goto LABEL_98;
                }
                if (v76)
                {
                  *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
                  id v117 = "nw_protocol_utilities_add_input_handler";
                  __int16 v118 = 2048;
                  uint64_t v119 = v72;
                  _os_log_impl(&dword_1830D4000, v74, v75, "%{public}s Cannot add input handler %p to itself, no backtrace", buf, 0x16u);
                }

LABEL_97:
                if (!v68) {
                  goto LABEL_99;
                }
LABEL_98:
                free(v68);
                goto LABEL_99;
              }
              uint64_t v69 = __nwlog_obj();
              os_log_type_t v82 = type;
              if (os_log_type_enabled(v69, type))
              {
                *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
                id v117 = "nw_protocol_utilities_add_input_handler";
                __int16 v118 = 2048;
                uint64_t v119 = a2;
                _os_log_impl(&dword_1830D4000, v69, v82, "%{public}s Cannot add input handler %p to itself, backtrace limit exceeded", buf, 0x16u);
              }
            }

            goto LABEL_97;
          }
          long long v95 = __nwlog_obj();
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          id v117 = "nw_protocol_utilities_add_input_handler";
          __int16 v92 = (void *)_os_log_send_and_compose_impl();

          os_log_type_t type = OS_LOG_TYPE_ERROR;
          char v114 = 0;
          if (!__nwlog_fault((const char *)v92, &type, &v114))
          {
LABEL_143:
            if (v92) {
              free(v92);
            }
            goto LABEL_99;
          }
          if (type == OS_LOG_TYPE_FAULT)
          {
            uint64_t v93 = __nwlog_obj();
            os_log_type_t v96 = type;
            if (os_log_type_enabled(v93, type))
            {
              *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
              id v117 = "nw_protocol_utilities_add_input_handler";
              _os_log_impl(&dword_1830D4000, v93, v96, "%{public}s called with null input_protocol", buf, 0xCu);
            }
LABEL_136:

            goto LABEL_143;
          }
          if (!v114)
          {
            uint64_t v93 = __nwlog_obj();
            os_log_type_t v104 = type;
            if (os_log_type_enabled(v93, type))
            {
              *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
              id v117 = "nw_protocol_utilities_add_input_handler";
              _os_log_impl(&dword_1830D4000, v93, v104, "%{public}s called with null input_protocol, backtrace limit exceeded", buf, 0xCu);
            }
            goto LABEL_136;
          }
          BOOL v97 = (char *)__nw_create_backtrace_string();
          char v98 = __nwlog_obj();
          os_log_type_t v101 = type;
          BOOL v102 = os_log_type_enabled(v98, type);
          if (v97)
          {
            if (v102)
            {
              *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
              id v117 = "nw_protocol_utilities_add_input_handler";
              __int16 v118 = 2082;
              uint64_t v119 = (uint64_t)v97;
              _os_log_impl(&dword_1830D4000, v98, v101, "%{public}s called with null input_protocol, dumping backtrace:%{public}s", buf, 0x16u);
            }
LABEL_130:

            free(v97);
            goto LABEL_143;
          }
          if (v102)
          {
            *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
            id v117 = "nw_protocol_utilities_add_input_handler";
            _os_log_impl(&dword_1830D4000, v98, v101, "%{public}s called with null input_protocol, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          BOOL v91 = __nwlog_obj();
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          id v117 = "nw_protocol_utilities_add_input_handler";
          __int16 v92 = (void *)_os_log_send_and_compose_impl();

          os_log_type_t type = OS_LOG_TYPE_ERROR;
          char v114 = 0;
          if (!__nwlog_fault((const char *)v92, &type, &v114)) {
            goto LABEL_143;
          }
          if (type == OS_LOG_TYPE_FAULT)
          {
            uint64_t v93 = __nwlog_obj();
            os_log_type_t v94 = type;
            if (os_log_type_enabled(v93, type))
            {
              *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
              id v117 = "nw_protocol_utilities_add_input_handler";
              _os_log_impl(&dword_1830D4000, v93, v94, "%{public}s called with null protocol", buf, 0xCu);
            }
            goto LABEL_136;
          }
          if (!v114)
          {
            uint64_t v93 = __nwlog_obj();
            os_log_type_t v103 = type;
            if (os_log_type_enabled(v93, type))
            {
              *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
              id v117 = "nw_protocol_utilities_add_input_handler";
              _os_log_impl(&dword_1830D4000, v93, v103, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
            }
            goto LABEL_136;
          }
          BOOL v97 = (char *)__nw_create_backtrace_string();
          char v98 = __nwlog_obj();
          os_log_type_t v99 = type;
          BOOL v100 = os_log_type_enabled(v98, type);
          if (v97)
          {
            if (v100)
            {
              *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
              id v117 = "nw_protocol_utilities_add_input_handler";
              __int16 v118 = 2082;
              uint64_t v119 = (uint64_t)v97;
              _os_log_impl(&dword_1830D4000, v98, v99, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
            }
            goto LABEL_130;
          }
          if (v100)
          {
            *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
            id v117 = "nw_protocol_utilities_add_input_handler";
            _os_log_impl(&dword_1830D4000, v98, v99, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
          }
        }

        goto LABEL_143;
      }
      uint64_t v84 = a2;
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      uint64_t v85 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v85, OS_LOG_TYPE_DEBUG))
      {
        BOOL loga = nw_endpoint_handler_get_id_string(v5);
        unsigned int v106 = nw_endpoint_handler_dry_run_string(v5);
        nw_endpoint_t v86 = nw_endpoint_handler_copy_endpoint(v5);
        nw_endpoint_t v87 = nw_endpoint_get_logging_description(v86);
        BOOL v88 = nw_endpoint_handler_state_string(v5);
        BOOL v89 = nw_endpoint_handler_mode_string(v5);
        id v90 = nw_endpoint_handler_copy_current_path(v5);
        *(_DWORD *)netcore_stats_tcp_report buf = 136448002;
        id v117 = "nw_endpoint_flow_attach_channel_protocol";
        __int16 v118 = 2082;
        uint64_t v119 = (uint64_t)loga;
        __int16 v120 = 2082;
        os_log_type_t v121 = (void *)v106;
        __int16 v122 = 2082;
        os_log_type_t v123 = v87;
        __int16 v124 = 2082;
        uint64_t v125 = v88;
        __int16 v126 = 2082;
        uint64_t v127 = v89;
        __int16 v128 = 2114;
        id v129 = v90;
        __int16 v130 = 1024;
        int v131 = a3;
        unint64_t v35 = v85;
        _os_log_impl(&dword_1830D4000, v85, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] opened channel at level %u", buf, 0x4Eu);

        a2 = v84;
      }
      else
      {
        unint64_t v35 = v85;
      }
    }
    else
    {
      if (logging_disabled) {
        goto LABEL_33;
      }
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      unint64_t v35 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
      {
        uint64_t v105 = a2;
        log = v35;
        int v36 = nw_endpoint_handler_get_id_string(v5);
        uint64_t v37 = nw_endpoint_handler_dry_run_string(v5);
        nw_endpoint_t v38 = nw_endpoint_handler_copy_endpoint(v5);
        int v39 = a3;
        uint64_t v40 = nw_endpoint_get_logging_description(v38);
        os_log_type_t v41 = nw_endpoint_handler_state_string(v5);
        uint64_t v42 = nw_endpoint_handler_mode_string(v5);
        id v43 = nw_endpoint_handler_copy_current_path(v5);
        *(_DWORD *)netcore_stats_tcp_report buf = 136448002;
        id v117 = "nw_endpoint_flow_attach_channel_protocol";
        __int16 v118 = 2082;
        uint64_t v119 = (uint64_t)v36;
        __int16 v120 = 2082;
        os_log_type_t v121 = (void *)v37;
        __int16 v122 = 2082;
        os_log_type_t v123 = v40;
        __int16 v124 = 2082;
        uint64_t v125 = v41;
        __int16 v126 = 2082;
        uint64_t v127 = v42;
        __int16 v128 = 2114;
        id v129 = v43;
        __int16 v130 = 1024;
        a3 = v39;
        int v131 = v39;
        unint64_t v35 = log;
        _os_log_impl(&dword_1830D4000, log, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] opened channel at level %u", buf, 0x4Eu);

        a2 = v105;
      }
    }

    goto LABEL_33;
  }
  if ((nw_endpoint_handler_get_logging_disabled(v5) & 1) == 0)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
    }
    os_log_type_t v7 = (id)gconnectionLogObj;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      os_log_type_t v8 = nw_endpoint_handler_get_id_string(v5);
      os_log_type_t v9 = nw_endpoint_handler_dry_run_string(v5);
      nw_endpoint_t v10 = nw_endpoint_handler_copy_endpoint(v5);
      BOOL v11 = nw_endpoint_get_logging_description(v10);
      os_log_type_t v12 = nw_endpoint_handler_state_string(v5);
      char v13 = nw_endpoint_handler_mode_string(v5);
      id v14 = nw_endpoint_handler_copy_current_path(v5);
      *(_DWORD *)netcore_stats_tcp_report buf = 136447746;
      id v117 = "nw_endpoint_flow_attach_channel_protocol";
      __int16 v118 = 2082;
      uint64_t v119 = (uint64_t)v8;
      __int16 v120 = 2082;
      os_log_type_t v121 = (void *)v9;
      __int16 v122 = 2082;
      os_log_type_t v123 = v11;
      __int16 v124 = 2082;
      uint64_t v125 = v12;
      __int16 v126 = 2082;
      uint64_t v127 = v13;
      __int16 v128 = 2114;
      id v129 = v14;
      _os_log_impl(&dword_1830D4000, v7, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] flow does not use channels", buf, 0x48u);
    }
  }
  BOOL v15 = 0;
LABEL_103:

  return v15;
}

void sub_1832757D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17)
{
  _Unwind_Resume(a1);
}

BOOL nw_path_flow_registration_get_nexus_instance(NWConcrete_nw_path *a1, NWConcrete_nw_path_flow_registration *a2, _OWORD *a3, _DWORD *a4)
{
  id v6 = nw_path_copy_flow_for_registration(a1, a2);
  os_log_type_t v7 = v6;
  if (v6)
  {
    os_log_type_t v8 = v6;
    os_log_type_t v9 = v8;
    if (a4) {
      *a4 = *((_DWORD *)v8 + 42);
    }
    nw_endpoint_t v10 = v8 + 8;
    int is_null = uuid_is_null((const unsigned __int8 *)v8 + 128);
    BOOL v12 = is_null == 0;
    if (!is_null) {
      *a3 = *v10;
    }
  }
  else
  {
    BOOL v12 = 0;
  }

  return v12;
}

void sub_183275940(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id nw_path_copy_flow_for_registration(NWConcrete_nw_path *a1, NWConcrete_nw_path_flow_registration *a2)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1;
  id v4 = a2;
  int v5 = v4;
  if (v3)
  {
    if (v4)
    {
      *(void *)netcore_stats_tcp_report buf = 0;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x3032000000;
      id v28 = __Block_byref_object_copy__68682;
      char v29 = __Block_byref_object_dispose__68683;
      id v30 = 0;
      flows = (atomic_uchar *)v3->flows;
      v22[0] = MEMORY[0x1E4F143A8];
      v22[1] = 3221225472;
      void v22[2] = ___ZL34nw_path_copy_flow_for_registrationP18NWConcrete_nw_pathP36NWConcrete_nw_path_flow_registration_block_invoke;
      v22[3] = &unk_1E524A2E8;
      char v23 = v4;
      nw_endpoint_t v24 = buf;
      nw_array_apply(flows, (uint64_t)v22);
      id v7 = *(id *)(*(void *)&buf[8] + 40);

      _Block_object_dispose(buf, 8);
      goto LABEL_4;
    }
    char v13 = __nwlog_obj();
    *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_path_copy_flow_for_registration";
    nw_endpoint_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (__nwlog_fault(v10, &type, &v25))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        BOOL v11 = __nwlog_obj();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_path_copy_flow_for_registration";
          _os_log_impl(&dword_1830D4000, v11, v14, "%{public}s called with null flow_registration", buf, 0xCu);
        }
LABEL_36:

        goto LABEL_37;
      }
      if (!v25)
      {
        BOOL v11 = __nwlog_obj();
        os_log_type_t v21 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_path_copy_flow_for_registration";
          _os_log_impl(&dword_1830D4000, v11, v21, "%{public}s called with null flow_registration, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v11 = __nwlog_obj();
      os_log_type_t v18 = type;
      BOOL v19 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_path_copy_flow_for_registration";
          _os_log_impl(&dword_1830D4000, v11, v18, "%{public}s called with null flow_registration, no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v19)
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_path_copy_flow_for_registration";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&void buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v11, v18, "%{public}s called with null flow_registration, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_24;
    }
  }
  else
  {
    os_log_type_t v9 = __nwlog_obj();
    *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_path_copy_flow_for_registration";
    nw_endpoint_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (__nwlog_fault(v10, &type, &v25))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        BOOL v11 = __nwlog_obj();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_path_copy_flow_for_registration";
          _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s called with null path", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (!v25)
      {
        BOOL v11 = __nwlog_obj();
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_path_copy_flow_for_registration";
          _os_log_impl(&dword_1830D4000, v11, v20, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v11 = __nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_path_copy_flow_for_registration";
          _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s called with null path, no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v17)
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_path_copy_flow_for_registration";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&void buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_24:

      free(backtrace_string);
    }
  }
LABEL_37:
  if (v10) {
    free(v10);
  }
  id v7 = 0;
LABEL_4:

  return v7;
}

void nw_path_flow_registration_set_stats_region(void *a1, int a2, long long *a3, uint64_t a4)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  id v7 = a1;
  os_log_type_t v8 = v7;
  if (!v7)
  {
    os_log_type_t v9 = __nwlog_obj();
    *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
    uint64_t v31 = "nw_path_flow_registration_set_stats_region";
    nw_endpoint_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v28 = 0;
    if (!__nwlog_fault(v10, &type, &v28)) {
      goto LABEL_61;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        uint64_t v31 = "nw_path_flow_registration_set_stats_region";
        _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s called with null flow_registration", buf, 0xCu);
      }
    }
    else if (v28)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v11 = __nwlog_obj();
      os_log_type_t v18 = type;
      BOOL v19 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
          uint64_t v31 = "nw_path_flow_registration_set_stats_region";
          __int16 v32 = 2082;
          __int16 v33 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v11, v18, "%{public}s called with null flow_registration, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_61:
        if (!v10) {
          goto LABEL_11;
        }
LABEL_62:
        free(v10);
        goto LABEL_11;
      }
      if (v19)
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        uint64_t v31 = "nw_path_flow_registration_set_stats_region";
        _os_log_impl(&dword_1830D4000, v11, v18, "%{public}s called with null flow_registration, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v11 = __nwlog_obj();
      os_log_type_t v25 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        uint64_t v31 = "nw_path_flow_registration_set_stats_region";
        _os_log_impl(&dword_1830D4000, v11, v25, "%{public}s called with null flow_registration, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_60:

    goto LABEL_61;
  }
  if (!a3)
  {
    char v13 = __nwlog_obj();
    *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
    uint64_t v31 = "nw_path_flow_registration_set_stats_region";
    nw_endpoint_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v28 = 0;
    if (!__nwlog_fault(v10, &type, &v28)) {
      goto LABEL_61;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v11 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        uint64_t v31 = "nw_path_flow_registration_set_stats_region";
        _os_log_impl(&dword_1830D4000, v11, v14, "%{public}s called with null protocol_identifier", buf, 0xCu);
      }
      goto LABEL_60;
    }
    if (!v28)
    {
      BOOL v11 = __nwlog_obj();
      os_log_type_t v26 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        uint64_t v31 = "nw_path_flow_registration_set_stats_region";
        _os_log_impl(&dword_1830D4000, v11, v26, "%{public}s called with null protocol_identifier, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_60;
    }
    os_log_type_t v20 = (char *)__nw_create_backtrace_string();
    BOOL v11 = __nwlog_obj();
    os_log_type_t v21 = type;
    BOOL v22 = os_log_type_enabled(v11, type);
    if (!v20)
    {
      if (v22)
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        uint64_t v31 = "nw_path_flow_registration_set_stats_region";
        _os_log_impl(&dword_1830D4000, v11, v21, "%{public}s called with null protocol_identifier, no backtrace", buf, 0xCu);
      }
      goto LABEL_60;
    }
    if (v22)
    {
      *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
      uint64_t v31 = "nw_path_flow_registration_set_stats_region";
      __int16 v32 = 2082;
      __int16 v33 = v20;
      _os_log_impl(&dword_1830D4000, v11, v21, "%{public}s called with null protocol_identifier, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_41;
  }
  if ((a2 & 0xFFFFFFFE) != 2)
  {
    BOOL v15 = __nwlog_obj();
    *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
    uint64_t v31 = "nw_path_flow_registration_set_stats_region";
    nw_endpoint_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v28 = 0;
    if (!__nwlog_fault(v10, &type, &v28)) {
      goto LABEL_61;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v11 = __nwlog_obj();
      os_log_type_t v16 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        uint64_t v31 = "nw_path_flow_registration_set_stats_region";
        _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s called with null (level == nw_protocol_level_internet || level == nw_protocol_level_transport)", buf, 0xCu);
      }
      goto LABEL_60;
    }
    if (!v28)
    {
      BOOL v11 = __nwlog_obj();
      os_log_type_t v27 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        uint64_t v31 = "nw_path_flow_registration_set_stats_region";
        _os_log_impl(&dword_1830D4000, v11, v27, "%{public}s called with null (level == nw_protocol_level_internet || level == nw_protocol_level_transport), backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_60;
    }
    os_log_type_t v20 = (char *)__nw_create_backtrace_string();
    BOOL v11 = __nwlog_obj();
    os_log_type_t v23 = type;
    BOOL v24 = os_log_type_enabled(v11, type);
    if (!v20)
    {
      if (v24)
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        uint64_t v31 = "nw_path_flow_registration_set_stats_region";
        _os_log_impl(&dword_1830D4000, v11, v23, "%{public}s called with null (level == nw_protocol_level_internet || level == nw_protocol_level_transport), no backtrace", buf, 0xCu);
      }
      goto LABEL_60;
    }
    if (v24)
    {
      *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
      uint64_t v31 = "nw_path_flow_registration_set_stats_region";
      __int16 v32 = 2082;
      __int16 v33 = v20;
      _os_log_impl(&dword_1830D4000, v11, v23, "%{public}s called with null (level == nw_protocol_level_internet || level == nw_protocol_level_transport), dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_41:

    free(v20);
    if (!v10) {
      goto LABEL_11;
    }
    goto LABEL_62;
  }
  if (a2 == 3)
  {
    if (nw_protocol_get_quic_connection_protocol_identifier() == a3
      || nw_protocol_get_quic_stream_protocol_identifier() == (int *)a3)
    {
      v8[11] = a3;
      v8[14] = a4;
    }
    else
    {
      v8[12] = a3;
      v8[15] = a4;
    }
  }
  else if (a2 == 2)
  {
    v7[13] = a3;
    v7[16] = a4;
  }
LABEL_11:
}

void sub_1832765C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_channel_get_stats_region(uint64_t a1, int a2)
{
  *(void *)&v22[13] = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
    os_log_type_t v20 = "nw_channel_get_stats_region";
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v17 = 0;
    if (__nwlog_fault(v3, &type, &v17))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v12 = __nwlog_obj();
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          os_log_type_t v20 = "nw_channel_get_stats_region";
          id v6 = "%{public}s called with null channel";
LABEL_39:
          os_log_type_t v9 = v12;
          os_log_type_t v10 = v13;
          uint32_t v11 = 12;
LABEL_22:
          _os_log_impl(&dword_1830D4000, v9, v10, v6, buf, v11);
        }
      }
      else if (v17)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v12 = __nwlog_obj();
        os_log_type_t v13 = type;
        BOOL v15 = os_log_type_enabled(v12, type);
        if (backtrace_string)
        {
          if (v15)
          {
            *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
            os_log_type_t v20 = "nw_channel_get_stats_region";
            __int16 v21 = 2082;
            *(void *)BOOL v22 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s called with null channel, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(backtrace_string);
        }
        else if (v15)
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          os_log_type_t v20 = "nw_channel_get_stats_region";
          id v6 = "%{public}s called with null channel, no backtrace";
          goto LABEL_39;
        }
      }
      else
      {
        os_log_type_t v12 = __nwlog_obj();
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          os_log_type_t v20 = "nw_channel_get_stats_region";
          id v6 = "%{public}s called with null channel, backtrace limit exceeded";
          goto LABEL_39;
        }
      }
    }
LABEL_23:
    if (v3) {
LABEL_24:
    }
      free(v3);
    return 0;
  }
  if (!*(void *)(a1 + 136)) {
    return 0;
  }
  if ((a2 - 1) >= 5)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
    os_log_type_t v20 = "nw_channel_get_stats_region";
    __int16 v21 = 1024;
    *(_DWORD *)BOOL v22 = a2;
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v17 = 0;
    if (!__nwlog_fault(v3, &type, &v17)) {
      goto LABEL_23;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v4 = gLogObj;
      os_log_type_t v5 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_23;
      }
      *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
      os_log_type_t v20 = "nw_channel_get_stats_region";
      __int16 v21 = 1024;
      *(_DWORD *)BOOL v22 = a2;
      id v6 = "%{public}s Unknown stats type %u";
    }
    else if (v17)
    {
      id v7 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v4 = gLogObj;
      os_log_type_t v5 = type;
      BOOL v8 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (v7)
      {
        if (v8)
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446722;
          os_log_type_t v20 = "nw_channel_get_stats_region";
          __int16 v21 = 1024;
          *(_DWORD *)BOOL v22 = a2;
          void v22[2] = 2082;
          *(void *)&v22[3] = v7;
          _os_log_impl(&dword_1830D4000, v4, v5, "%{public}s Unknown stats type %u, dumping backtrace:%{public}s", buf, 0x1Cu);
        }
        free(v7);
        if (!v3) {
          return 0;
        }
        goto LABEL_24;
      }
      if (!v8) {
        goto LABEL_23;
      }
      *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
      os_log_type_t v20 = "nw_channel_get_stats_region";
      __int16 v21 = 1024;
      *(_DWORD *)BOOL v22 = a2;
      id v6 = "%{public}s Unknown stats type %u, no backtrace";
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v4 = gLogObj;
      os_log_type_t v5 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_23;
      }
      *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
      os_log_type_t v20 = "nw_channel_get_stats_region";
      __int16 v21 = 1024;
      *(_DWORD *)BOOL v22 = a2;
      id v6 = "%{public}s Unknown stats type %u, backtrace limit exceeded";
    }
    os_log_type_t v9 = v4;
    os_log_type_t v10 = v5;
    uint32_t v11 = 18;
    goto LABEL_22;
  }

  return MEMORY[0x1F40CD220]();
}

long long *nw_protocol_get_quic_connection_protocol_identifier()
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t result = (long long *)nw_protocol_get_quic_connection_protocol_identifier::quic_connection_protocol_identifier;
  if (nw_protocol_get_quic_connection_protocol_identifier::quic_connection_protocol_identifier) {
    return result;
  }
  if (nw_protocol_copy_quic_connection_definition::onceToken != -1) {
    dispatch_once(&nw_protocol_copy_quic_connection_definition::onceToken, &__block_literal_global_55981);
  }
  id v1 = (id)nw_protocol_copy_quic_connection_definition::quic_definition;
  if (v1)
  {
    id v2 = v1;

    nw_protocol_get_quic_connection_protocol_identifier::quic_connection_protocol_identifier = (uint64_t)v2 + 8;
    return (long long *)nw_protocol_get_quic_connection_protocol_identifier::quic_connection_protocol_identifier;
  }
  uint64_t v3 = __nwlog_obj();
  *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
  os_log_type_t v14 = "nw_protocol_get_quic_connection_protocol_identifier";
  id v4 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (__nwlog_fault(v4, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        os_log_type_t v14 = "nw_protocol_get_quic_connection_protocol_identifier";
        _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s called with null quic_connection_definition", buf, 0xCu);
      }
    }
    else if (v11)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v5 = __nwlog_obj();
      os_log_type_t v8 = type;
      BOOL v9 = os_log_type_enabled(v5, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
          os_log_type_t v14 = "nw_protocol_get_quic_connection_protocol_identifier";
          __int16 v15 = 2082;
          os_log_type_t v16 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v5, v8, "%{public}s called with null quic_connection_definition, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v9)
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        os_log_type_t v14 = "nw_protocol_get_quic_connection_protocol_identifier";
        _os_log_impl(&dword_1830D4000, v5, v8, "%{public}s called with null quic_connection_definition, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v5 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        os_log_type_t v14 = "nw_protocol_get_quic_connection_protocol_identifier";
        _os_log_impl(&dword_1830D4000, v5, v10, "%{public}s called with null quic_connection_definition, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_23:
  if (v4) {
    free(v4);
  }
  if (nw_protocol_dummy_quic_connection_identifier(void)::onceToken != -1) {
    dispatch_once(&nw_protocol_dummy_quic_connection_identifier(void)::onceToken, &__block_literal_global_71);
  }
  return &nw_protocol_dummy_quic_connection_identifier(void)::dummy_quic_connection_identifier;
}

void nw_channel_set_protocol_level(uint64_t a1, int a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    *(_DWORD *)(a1 + 264) = a2;
    return;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
  __int16 v15 = "nw_channel_set_protocol_level";
  id v2 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (__nwlog_fault(v2, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v3 = gLogObj;
      os_log_type_t v4 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_16;
      }
      *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
      __int16 v15 = "nw_channel_set_protocol_level";
      os_log_type_t v5 = "%{public}s called with null channel";
LABEL_14:
      os_log_type_t v10 = v3;
      os_log_type_t v11 = v4;
LABEL_15:
      _os_log_impl(&dword_1830D4000, v10, v11, v5, buf, 0xCu);
      goto LABEL_16;
    }
    if (!v12)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v3 = gLogObj;
      os_log_type_t v4 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_16;
      }
      *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
      __int16 v15 = "nw_channel_set_protocol_level";
      os_log_type_t v5 = "%{public}s called with null channel, backtrace limit exceeded";
      goto LABEL_14;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v7 = gLogObj;
    os_log_type_t v8 = type;
    BOOL v9 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (backtrace_string)
    {
      if (v9)
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
        __int16 v15 = "nw_channel_set_protocol_level";
        __int16 v16 = 2082;
        uint64_t v17 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null channel, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_16;
    }
    if (v9)
    {
      *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
      __int16 v15 = "nw_channel_set_protocol_level";
      os_log_type_t v5 = "%{public}s called with null channel, no backtrace";
      os_log_type_t v10 = v7;
      os_log_type_t v11 = v8;
      goto LABEL_15;
    }
  }
LABEL_16:
  if (v2) {
    free(v2);
  }
}

void nw_channel_set_defer_input_available(uint64_t a1, int a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (a2) {
      __int16 v2 = 128;
    }
    else {
      __int16 v2 = 0;
    }
    int v3 = *(_WORD *)(a1 + 444) & 0xFF7F | (*(unsigned __int8 *)(a1 + 446) << 16);
    *(_WORD *)(a1 + 444) = *(_WORD *)(a1 + 444) & 0xFF7F | v2;
    *(unsigned char *)(a1 + 446) = BYTE2(v3);
    return;
  }
  __nwlog_obj();
  *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
  os_log_type_t v13 = "nw_channel_set_defer_input_available";
  os_log_type_t v4 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v10 = 0;
  if (__nwlog_fault(v4, &type, &v10))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_21;
      }
      *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
      os_log_type_t v13 = "nw_channel_set_defer_input_available";
      id v7 = "%{public}s called with null channel";
      goto LABEL_20;
    }
    if (!v10)
    {
      os_log_type_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_21;
      }
      *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
      os_log_type_t v13 = "nw_channel_set_defer_input_available";
      id v7 = "%{public}s called with null channel, backtrace limit exceeded";
      goto LABEL_20;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v5 = __nwlog_obj();
    os_log_type_t v6 = type;
    BOOL v9 = os_log_type_enabled(v5, type);
    if (backtrace_string)
    {
      if (v9)
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
        os_log_type_t v13 = "nw_channel_set_defer_input_available";
        __int16 v14 = 2082;
        __int16 v15 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s called with null channel, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_21;
    }
    if (v9)
    {
      *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
      os_log_type_t v13 = "nw_channel_set_defer_input_available";
      id v7 = "%{public}s called with null channel, no backtrace";
LABEL_20:
      _os_log_impl(&dword_1830D4000, v5, v6, v7, buf, 0xCu);
    }
  }
LABEL_21:
  if (v4) {
    free(v4);
  }
}

void nw_channel_set_close_automatically(uint64_t a1, int a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (a2) {
      __int16 v2 = 32;
    }
    else {
      __int16 v2 = 0;
    }
    int v3 = *(_WORD *)(a1 + 444) & 0xFFDF | (*(unsigned __int8 *)(a1 + 446) << 16);
    *(_WORD *)(a1 + 444) = *(_WORD *)(a1 + 444) & 0xFFDF | v2;
    *(unsigned char *)(a1 + 446) = BYTE2(v3);
    return;
  }
  __nwlog_obj();
  *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
  os_log_type_t v13 = "nw_channel_set_close_automatically";
  os_log_type_t v4 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v10 = 0;
  if (__nwlog_fault(v4, &type, &v10))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_21;
      }
      *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
      os_log_type_t v13 = "nw_channel_set_close_automatically";
      id v7 = "%{public}s called with null channel";
      goto LABEL_20;
    }
    if (!v10)
    {
      os_log_type_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_21;
      }
      *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
      os_log_type_t v13 = "nw_channel_set_close_automatically";
      id v7 = "%{public}s called with null channel, backtrace limit exceeded";
      goto LABEL_20;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v5 = __nwlog_obj();
    os_log_type_t v6 = type;
    BOOL v9 = os_log_type_enabled(v5, type);
    if (backtrace_string)
    {
      if (v9)
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
        os_log_type_t v13 = "nw_channel_set_close_automatically";
        __int16 v14 = 2082;
        __int16 v15 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s called with null channel, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_21;
    }
    if (v9)
    {
      *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
      os_log_type_t v13 = "nw_channel_set_close_automatically";
      id v7 = "%{public}s called with null channel, no backtrace";
LABEL_20:
      _os_log_impl(&dword_1830D4000, v5, v6, v7, buf, 0xCu);
    }
  }
LABEL_21:
  if (v4) {
    free(v4);
  }
}

uint64_t nw_channel_get_protocol_handler(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (a1) {
    return a1 + 24;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
  __int16 v15 = "nw_channel_get_protocol_handler";
  __int16 v2 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (__nwlog_fault(v2, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v3 = gLogObj;
      os_log_type_t v4 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        __int16 v15 = "nw_channel_get_protocol_handler";
        os_log_type_t v5 = "%{public}s called with null channel";
LABEL_14:
        char v10 = v3;
        os_log_type_t v11 = v4;
LABEL_15:
        _os_log_impl(&dword_1830D4000, v10, v11, v5, buf, 0xCu);
      }
    }
    else if (v12)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v7 = gLogObj;
      os_log_type_t v8 = type;
      BOOL v9 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
          __int16 v15 = "nw_channel_get_protocol_handler";
          __int16 v16 = 2082;
          uint64_t v17 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null channel, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_16;
      }
      if (v9)
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        __int16 v15 = "nw_channel_get_protocol_handler";
        os_log_type_t v5 = "%{public}s called with null channel, no backtrace";
        char v10 = v7;
        os_log_type_t v11 = v8;
        goto LABEL_15;
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v3 = gLogObj;
      os_log_type_t v4 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        __int16 v15 = "nw_channel_get_protocol_handler";
        os_log_type_t v5 = "%{public}s called with null channel, backtrace limit exceeded";
        goto LABEL_14;
      }
    }
  }
LABEL_16:
  if (v2) {
    free(v2);
  }
  return 0;
}

int *nw_protocol_get_quic_stream_protocol_identifier()
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t result = (int *)nw_protocol_get_quic_stream_protocol_identifier::quic_stream_protocol_identifier;
  if (nw_protocol_get_quic_stream_protocol_identifier::quic_stream_protocol_identifier) {
    return result;
  }
  if (nw_protocol_copy_quic_stream_definition::onceToken != -1) {
    dispatch_once(&nw_protocol_copy_quic_stream_definition::onceToken, &__block_literal_global_15_56153);
  }
  id v1 = (id)nw_protocol_copy_quic_stream_definition::quic_definition;
  if (v1)
  {
    id v2 = v1;

    nw_protocol_get_quic_stream_protocol_identifier::quic_stream_protocol_identifier = (uint64_t)v2 + 8;
    return (int *)nw_protocol_get_quic_stream_protocol_identifier::quic_stream_protocol_identifier;
  }
  uint64_t v3 = __nwlog_obj();
  *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
  __int16 v14 = "nw_protocol_get_quic_stream_protocol_identifier";
  os_log_type_t v4 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (__nwlog_fault(v4, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        __int16 v14 = "nw_protocol_get_quic_stream_protocol_identifier";
        _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s called with null quic_stream_definition", buf, 0xCu);
      }
    }
    else if (v11)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v5 = __nwlog_obj();
      os_log_type_t v8 = type;
      BOOL v9 = os_log_type_enabled(v5, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
          __int16 v14 = "nw_protocol_get_quic_stream_protocol_identifier";
          __int16 v15 = 2082;
          __int16 v16 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v5, v8, "%{public}s called with null quic_stream_definition, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v9)
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        __int16 v14 = "nw_protocol_get_quic_stream_protocol_identifier";
        _os_log_impl(&dword_1830D4000, v5, v8, "%{public}s called with null quic_stream_definition, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v5 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        __int16 v14 = "nw_protocol_get_quic_stream_protocol_identifier";
        _os_log_impl(&dword_1830D4000, v5, v10, "%{public}s called with null quic_stream_definition, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_23:
  if (v4) {
    free(v4);
  }
  if (nw_protocol_dummy_quic_stream_identifier(void)::onceToken != -1) {
    dispatch_once(&nw_protocol_dummy_quic_stream_identifier(void)::onceToken, &__block_literal_global_73);
  }
  return &nw_protocol_dummy_quic_stream_identifier(void)::dummy_quic_stream_identifier;
}

uint64_t nw_path_flow_registration_should_use_event_ring(void *a1, void *a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1;
  os_log_type_t v4 = a2;
  if (v3)
  {
    id v5 = nw_path_copy_flow_for_registration(v3, v4);
    os_log_type_t v6 = v5;
    if (v5) {
      uint64_t should_use_event_ring = nw_path_flow_nexus_should_use_event_ring(v5);
    }
    else {
      uint64_t should_use_event_ring = 0;
    }

    goto LABEL_6;
  }
  BOOL v9 = __nwlog_obj();
  *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
  os_log_type_t v20 = "nw_path_flow_registration_should_use_event_ring";
  os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v17 = 0;
  if (__nwlog_fault(v10, &type, &v17))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        os_log_type_t v20 = "nw_path_flow_registration_should_use_event_ring";
        _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s called with null path", buf, 0xCu);
      }
    }
    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      char v11 = __nwlog_obj();
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
          os_log_type_t v20 = "nw_path_flow_registration_should_use_event_ring";
          __int16 v21 = 2082;
          BOOL v22 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v11, v14, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v15)
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        os_log_type_t v20 = "nw_path_flow_registration_should_use_event_ring";
        _os_log_impl(&dword_1830D4000, v11, v14, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      char v11 = __nwlog_obj();
      os_log_type_t v16 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        os_log_type_t v20 = "nw_path_flow_registration_should_use_event_ring";
        _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_23:
  if (v10) {
    free(v10);
  }
  uint64_t should_use_event_ring = 0;
LABEL_6:

  return should_use_event_ring;
}

uint64_t nw_path_flow_nexus_should_use_event_ring(void *a1)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  id v2 = v1;
  if (!v1)
  {
    os_log_type_t v10 = __nwlog_obj();
    *(_DWORD *)length = 136446210;
    *(void *)&length[4] = "nw_path_flow_nexus_should_use_event_ring";
    char v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v18 = 0;
    if (__nwlog_fault(v11, &type, &v18))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v12 = __nwlog_obj();
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)length = 136446210;
          *(void *)&length[4] = "nw_path_flow_nexus_should_use_event_ring";
          _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s called with null flow", length, 0xCu);
        }
      }
      else if (v18)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v12 = __nwlog_obj();
        os_log_type_t v15 = type;
        BOOL v16 = os_log_type_enabled(v12, type);
        if (backtrace_string)
        {
          if (v16)
          {
            *(_DWORD *)length = 136446466;
            *(void *)&length[4] = "nw_path_flow_nexus_should_use_event_ring";
            __int16 v21 = 2082;
            BOOL v22 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v12, v15, "%{public}s called with null flow, dumping backtrace:%{public}s", length, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_32;
        }
        if (v16)
        {
          *(_DWORD *)length = 136446210;
          *(void *)&length[4] = "nw_path_flow_nexus_should_use_event_ring";
          _os_log_impl(&dword_1830D4000, v12, v15, "%{public}s called with null flow, no backtrace", length, 0xCu);
        }
      }
      else
      {
        os_log_type_t v12 = __nwlog_obj();
        os_log_type_t v17 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)length = 136446210;
          *(void *)&length[4] = "nw_path_flow_nexus_should_use_event_ring";
          _os_log_impl(&dword_1830D4000, v12, v17, "%{public}s called with null flow, backtrace limit exceeded", length, 0xCu);
        }
      }
    }
LABEL_32:
    if (v11) {
      free(v11);
    }
    goto LABEL_12;
  }
  uint64_t v3 = v1;
  os_log_type_t v4 = (void *)v3[3];
  if (v4
    && (*(void *)length = 0, (data = xpc_dictionary_get_data(v4, "data", (size_t *)length)) != 0)
    && *(void *)length >= 0xD8uLL
    && (os_log_type_t v6 = data, *(void *)length == data[53] + 216)
    && ((data[52] & 0xE080) != 0 ? (BOOL v7 = (data[52] & 0x13) == 1) : (BOOL v7 = 1), !v7))
  {

    if (v6[53] >= 0xCCu)
    {
      uint64_t v8 = (*((unsigned __int8 *)v6 + 416) >> 2) & 1;
      goto LABEL_13;
    }
  }
  else
  {
  }
LABEL_12:
  uint64_t v8 = 0;
LABEL_13:

  return v8;
}

void sub_1832797B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_parameters_get_no_delay(void *a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    uint64_t v3 = nw_parameters_copy_tcp_options(v1, 0);
    os_log_type_t v4 = v3;
    if (v3) {
      BOOL no_delay = nw_tcp_options_get_no_delay(v3);
    }
    else {
      BOOL no_delay = 0;
    }

    goto LABEL_6;
  }
  BOOL v7 = __nwlog_obj();
  *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
  char v18 = "nw_parameters_get_no_delay";
  uint64_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        char v18 = "nw_parameters_get_no_delay";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v9 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
          char v18 = "nw_parameters_get_no_delay";
          __int16 v19 = 2082;
          os_log_type_t v20 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v13)
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        char v18 = "nw_parameters_get_no_delay";
        _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v9 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        char v18 = "nw_parameters_get_no_delay";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_23:
  if (v8) {
    free(v8);
  }
  BOOL no_delay = 0;
LABEL_6:

  return no_delay;
}

void sub_183279AF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_parameters_get_tfo(void *a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    uint64_t v3 = nw_parameters_copy_tcp_options(v1, 0);
    os_log_type_t v4 = v3;
    if (v3) {
      BOOL enable_fast_open = nw_tcp_options_get_enable_fast_open(v3);
    }
    else {
      BOOL enable_fast_open = 0;
    }

    goto LABEL_6;
  }
  BOOL v7 = __nwlog_obj();
  *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
  char v18 = "nw_parameters_get_tfo";
  uint64_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        char v18 = "nw_parameters_get_tfo";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v9 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
          char v18 = "nw_parameters_get_tfo";
          __int16 v19 = 2082;
          os_log_type_t v20 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v13)
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        char v18 = "nw_parameters_get_tfo";
        _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v9 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        char v18 = "nw_parameters_get_tfo";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_23:
  if (v8) {
    free(v8);
  }
  BOOL enable_fast_open = 0;
LABEL_6:

  return enable_fast_open;
}

void sub_183279E08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

OS_nw_protocol_options *nw_parameters_copy_tcp_options(NWConcrete_nw_parameters *a1, int a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1;
  default_stack = v3->default_stack;
  if (default_stack)
  {
    transport_protocol = default_stack->transport_protocol;
    if (transport_protocol && (os_log_type_t v6 = transport_protocol, v7 = v6[1], v6, v7))
    {
      if (nw_protocol_setup_tcp_definition(void)::onceToken != -1) {
        dispatch_once(&nw_protocol_setup_tcp_definition(void)::onceToken, &__block_literal_global_64304);
      }
      id v8 = (id)g_tcp_definition;
      BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v7, (uint64_t)v8);

      if (!is_equal_unsafe)
      {
        os_log_type_t v10 = 0;
LABEL_16:

        goto LABEL_17;
      }
    }
    else
    {
      if (a2)
      {
        if (nw_protocol_setup_tcp_definition(void)::onceToken != -1) {
          dispatch_once(&nw_protocol_setup_tcp_definition(void)::onceToken, &__block_literal_global_64304);
        }
        options = nw_protocol_create_options((void *)g_tcp_definition);
        os_log_type_t v12 = v3->default_stack;
        BOOL v13 = v12->transport_protocol;
        v12->transport_protocol = (OS_nw_protocol_options *)options;

        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v14 = (id)gLogObj;
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          os_log_type_t v27 = "nw_parameters_copy_tcp_options";
          _os_log_impl(&dword_1830D4000, v14, OS_LOG_TYPE_DEFAULT, "%{public}s TCP-specific parameter set without transport protocol specified, inferring TCP", buf, 0xCu);
        }
      }
      id v7 = 0;
    }
    os_log_type_t v10 = v3->default_stack->transport_protocol;
    goto LABEL_16;
  }
  BOOL v16 = __nwlog_obj();
  *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
  os_log_type_t v27 = "nw_parameters_copy_tcp_options";
  os_log_type_t v17 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v24 = 0;
  if (__nwlog_fault(v17, &type, &v24))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v18 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        os_log_type_t v27 = "nw_parameters_copy_tcp_options";
        _os_log_impl(&dword_1830D4000, v18, v19, "%{public}s called with null parameters->default_stack", buf, 0xCu);
      }
    }
    else if (v24)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      char v18 = __nwlog_obj();
      os_log_type_t v21 = type;
      BOOL v22 = os_log_type_enabled(v18, type);
      if (backtrace_string)
      {
        if (v22)
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
          os_log_type_t v27 = "nw_parameters_copy_tcp_options";
          __int16 v28 = 2082;
          char v29 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v18, v21, "%{public}s called with null parameters->default_stack, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_34;
      }
      if (v22)
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        os_log_type_t v27 = "nw_parameters_copy_tcp_options";
        _os_log_impl(&dword_1830D4000, v18, v21, "%{public}s called with null parameters->default_stack, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      char v18 = __nwlog_obj();
      os_log_type_t v23 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        os_log_type_t v27 = "nw_parameters_copy_tcp_options";
        _os_log_impl(&dword_1830D4000, v18, v23, "%{public}s called with null parameters->default_stack, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_34:
  if (v17) {
    free(v17);
  }
  os_log_type_t v10 = 0;
LABEL_17:

  return v10;
}

void sub_18327A218(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_tcp_options_get_enable_fast_open(void *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (nw_protocol_options_is_tcp(v1))
  {
    *(void *)netcore_stats_tcp_report buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000;
    char v16 = 0;
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_tcp_options_get_enable_fast_open_block_invoke;
    v12[3] = &unk_1E5248E90;
    void v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    BOOL v2 = *(unsigned char *)(*(void *)&buf[8] + 24) != 0;
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  os_log_type_t v4 = __nwlog_obj();
  *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_tcp_options_get_enable_fast_open";
  id v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_tcp_options_get_enable_fast_open";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_options_is_tcp(options)", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_tcp_options_get_enable_fast_open";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&void buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_tcp(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_tcp_options_get_enable_fast_open";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_tcp(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_tcp_options_get_enable_fast_open";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_options_is_tcp(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
  BOOL v2 = 0;
LABEL_3:

  return v2;
}

void sub_18327A55C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

void sub_18327AF8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_socket_get_input_frames(nw_protocol *a1, nw_protocol *a2, unsigned int a3, unsigned int a4, uint64_t a5, nw_frame_array_s *a6)
{
  uint64_t v193 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)unsigned int v179 = 136446210;
    *(void *)&v179[4] = "nw_socket_get_input_frames";
    os_log_type_t v156 = (char *)_os_log_send_and_compose_impl();
    buf[0] = 16;
    LOBYTE(v172.msg_name) = 0;
    if (!__nwlog_fault(v156, buf, &v172)) {
      goto LABEL_137;
    }
    if (buf[0] == 17)
    {
      int v56 = __nwlog_obj();
      os_log_type_t v57 = buf[0];
      if (os_log_type_enabled(v56, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)unsigned int v179 = 136446210;
        *(void *)&v179[4] = "nw_socket_get_input_frames";
        int v58 = "%{public}s called with null protocol";
LABEL_135:
        BOOL v76 = v56;
        os_log_type_t v77 = v57;
LABEL_136:
        _os_log_impl(&dword_1830D4000, v76, v77, v58, v179, 0xCu);
      }
LABEL_137:
      if (v156) {
        free(v156);
      }
      return 0;
    }
    if (!LOBYTE(v172.msg_name))
    {
      int v56 = __nwlog_obj();
      os_log_type_t v57 = buf[0];
      if (os_log_type_enabled(v56, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)unsigned int v179 = 136446210;
        *(void *)&v179[4] = "nw_socket_get_input_frames";
        int v58 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_135;
      }
      goto LABEL_137;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    int v56 = __nwlog_obj();
    os_log_type_t v57 = buf[0];
    BOOL v159 = os_log_type_enabled(v56, (os_log_type_t)buf[0]);
    if (!backtrace_string)
    {
      if (v159)
      {
        *(_DWORD *)unsigned int v179 = 136446210;
        *(void *)&v179[4] = "nw_socket_get_input_frames";
        int v58 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_135;
      }
      goto LABEL_137;
    }
    if (v159)
    {
      *(_DWORD *)unsigned int v179 = 136446466;
      *(void *)&v179[4] = "nw_socket_get_input_frames";
      *(_WORD *)&v179[12] = 2082;
      *(void *)&v179[14] = backtrace_string;
      unsigned int v160 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_352:
      _os_log_impl(&dword_1830D4000, v56, v57, v160, v179, 0x16u);
    }
LABEL_353:
    free(backtrace_string);
    goto LABEL_137;
  }
  handle = a1->handle;
  p_output_handler = &a1[1].output_handler;
  if (handle == &nw_protocol_ref_counted_handle) {
    os_log_type_t v9 = (char *)&a1[1].output_handler;
  }
  else {
    os_log_type_t v9 = 0;
  }
  if (handle != &nw_protocol_ref_counted_handle)
  {
    __nwlog_obj();
    *(_DWORD *)unsigned int v179 = 136446210;
    *(void *)&v179[4] = "nw_socket_get_input_frames";
    os_log_type_t v156 = (char *)_os_log_send_and_compose_impl();
    buf[0] = 16;
    LOBYTE(v172.msg_name) = 0;
    if (!__nwlog_fault(v156, buf, &v172)) {
      goto LABEL_137;
    }
    if (buf[0] == 17)
    {
      int v56 = __nwlog_obj();
      os_log_type_t v57 = buf[0];
      if (os_log_type_enabled(v56, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)unsigned int v179 = 136446210;
        *(void *)&v179[4] = "nw_socket_get_input_frames";
        int v58 = "%{public}s called with null socket_handler";
        goto LABEL_135;
      }
      goto LABEL_137;
    }
    if (!LOBYTE(v172.msg_name))
    {
      int v56 = __nwlog_obj();
      os_log_type_t v57 = buf[0];
      if (os_log_type_enabled(v56, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)unsigned int v179 = 136446210;
        *(void *)&v179[4] = "nw_socket_get_input_frames";
        int v58 = "%{public}s called with null socket_handler, backtrace limit exceeded";
        goto LABEL_135;
      }
      goto LABEL_137;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    int v56 = __nwlog_obj();
    os_log_type_t v57 = buf[0];
    BOOL v161 = os_log_type_enabled(v56, (os_log_type_t)buf[0]);
    if (!backtrace_string)
    {
      if (v161)
      {
        *(_DWORD *)unsigned int v179 = 136446210;
        *(void *)&v179[4] = "nw_socket_get_input_frames";
        int v58 = "%{public}s called with null socket_handler, no backtrace";
        goto LABEL_135;
      }
      goto LABEL_137;
    }
    if (v161)
    {
      *(_DWORD *)unsigned int v179 = 136446466;
      *(void *)&v179[4] = "nw_socket_get_input_frames";
      *(_WORD *)&v179[12] = 2082;
      *(void *)&v179[14] = backtrace_string;
      unsigned int v160 = "%{public}s called with null socket_handler, dumping backtrace:%{public}s";
      goto LABEL_352;
    }
    goto LABEL_353;
  }
  BOOL v10 = a6;
  a6->int tqh_first = 0;
  a6->tqh_last = &a6->tqh_first;
  if (!a4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)unsigned int v179 = 136446210;
    *(void *)&v179[4] = "nw_socket_get_input_frames";
    os_log_type_t v156 = (char *)_os_log_send_and_compose_impl();
    buf[0] = 16;
    LOBYTE(v172.msg_name) = 0;
    if (!__nwlog_fault(v156, buf, &v172)) {
      goto LABEL_137;
    }
    if (buf[0] == 17)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v56 = gLogObj;
      os_log_type_t v57 = buf[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)buf[0])) {
        goto LABEL_137;
      }
      *(_DWORD *)unsigned int v179 = 136446210;
      *(void *)&v179[4] = "nw_socket_get_input_frames";
      int v58 = "%{public}s called with null maximum_bytes";
      goto LABEL_135;
    }
    if (!LOBYTE(v172.msg_name))
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v56 = gLogObj;
      os_log_type_t v57 = buf[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)buf[0])) {
        goto LABEL_137;
      }
      *(_DWORD *)unsigned int v179 = 136446210;
      *(void *)&v179[4] = "nw_socket_get_input_frames";
      int v58 = "%{public}s called with null maximum_bytes, backtrace limit exceeded";
      goto LABEL_135;
    }
    int64_t v60 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v61 = gLogObj;
    os_log_type_t v62 = buf[0];
    BOOL v63 = os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)buf[0]);
    if (v60)
    {
      if (v63)
      {
        *(_DWORD *)unsigned int v179 = 136446466;
        *(void *)&v179[4] = "nw_socket_get_input_frames";
        *(_WORD *)&v179[12] = 2082;
        *(void *)&v179[14] = v60;
        uint64_t v64 = "%{public}s called with null maximum_bytes, dumping backtrace:%{public}s";
LABEL_116:
        _os_log_impl(&dword_1830D4000, v61, v62, v64, v179, 0x16u);
      }
LABEL_117:
      free(v60);
      goto LABEL_137;
    }
    if (!v63) {
      goto LABEL_137;
    }
    *(_DWORD *)unsigned int v179 = 136446210;
    *(void *)&v179[4] = "nw_socket_get_input_frames";
    int v58 = "%{public}s called with null maximum_bytes, no backtrace";
LABEL_145:
    BOOL v76 = v61;
    os_log_type_t v77 = v62;
    goto LABEL_136;
  }
  uint64_t v12 = a5;
  if (!a5)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)unsigned int v179 = 136446210;
    *(void *)&v179[4] = "nw_socket_get_input_frames";
    os_log_type_t v156 = (char *)_os_log_send_and_compose_impl();
    buf[0] = 16;
    LOBYTE(v172.msg_name) = 0;
    if (!__nwlog_fault(v156, buf, &v172)) {
      goto LABEL_137;
    }
    if (buf[0] == 17)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v56 = gLogObj;
      os_log_type_t v57 = buf[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)buf[0])) {
        goto LABEL_137;
      }
      *(_DWORD *)unsigned int v179 = 136446210;
      *(void *)&v179[4] = "nw_socket_get_input_frames";
      int v58 = "%{public}s called with null maximum_frame_count";
      goto LABEL_135;
    }
    if (!LOBYTE(v172.msg_name))
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v56 = gLogObj;
      os_log_type_t v57 = buf[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)buf[0])) {
        goto LABEL_137;
      }
      *(_DWORD *)unsigned int v179 = 136446210;
      *(void *)&v179[4] = "nw_socket_get_input_frames";
      int v58 = "%{public}s called with null maximum_frame_count, backtrace limit exceeded";
      goto LABEL_135;
    }
    int64_t v60 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v61 = gLogObj;
    os_log_type_t v62 = buf[0];
    BOOL v65 = os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)buf[0]);
    if (v60)
    {
      if (v65)
      {
        *(_DWORD *)unsigned int v179 = 136446466;
        *(void *)&v179[4] = "nw_socket_get_input_frames";
        *(_WORD *)&v179[12] = 2082;
        *(void *)&v179[14] = v60;
        uint64_t v64 = "%{public}s called with null maximum_frame_count, dumping backtrace:%{public}s";
        goto LABEL_116;
      }
      goto LABEL_117;
    }
    if (!v65) {
      goto LABEL_137;
    }
    *(_DWORD *)unsigned int v179 = 136446210;
    *(void *)&v179[4] = "nw_socket_get_input_frames";
    int v58 = "%{public}s called with null maximum_frame_count, no backtrace";
    goto LABEL_145;
  }
  char v13 = &a1[6].flow_id[13];
  int v14 = *(unsigned __int16 *)&a1[6].flow_id[13];
  int v15 = v14 | (a1[6].flow_id[15] << 16);
  if ((v14 & 0x4000) != 0)
  {
    uint64_t v20 = 0;
    if ((v14 & 0x80) != 0 || !gLogDatapath) {
      return v20;
    }
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
    }
    os_log_type_t v59 = gconnectionLogObj;
    if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)unsigned int v179 = 136446466;
      *(void *)&v179[4] = "nw_socket_get_input_frames";
      *(_WORD *)&v179[12] = 2082;
      *(void *)&v179[14] = (char *)a1 + 404;
      _os_log_impl(&dword_1830D4000, v59, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s Ignoring read because socket is cancelled", v179, 0x16u);
      return 0;
    }
    return 0;
  }
  *(_WORD *)char v13 = v14 & 0xFDFF;
  a1[6].flow_id[15] = (v15 & 0xFFFFFDFF) >> 16;
  if ((v15 & 0x400) != 0)
  {
    if (_nw_signposts_once == -1)
    {
      if (_nw_signposts_enabled) {
        goto LABEL_13;
      }
    }
    else
    {
      dispatch_once(&_nw_signposts_once, &__block_literal_global_22_65191);
      if (_nw_signposts_enabled)
      {
LABEL_13:
        if (kdebug_is_enabled()) {
          kdebug_trace();
        }
      }
    }
    nw_queue_resume_source((uint64_t)a1[3].identifier->name);
    int v17 = *(unsigned __int16 *)v13;
    unsigned int v18 = v17 & 0xFFFFFBFF | (a1[6].flow_id[15] << 16);
    *(_WORD *)char v13 = v17 & 0xFBFF;
    a1[6].flow_id[15] = BYTE2(v18);
  }
  int identifier = (int)a1[4].identifier;
  uint64_t v169 = (uint64_t)v9;
  unsigned int v165 = a3;
  if (identifier == 2)
  {
    uint64_t v66 = (unsigned int *)MEMORY[0x1E4F14B00];
    unsigned int v67 = *MEMORY[0x1E4F14B00];
    LODWORD(type) = v67;
    id v171 = v10;
    if (v67 >= a4)
    {
      BOOL v79 = 0;
      goto LABEL_184;
    }
    *(_DWORD *)netcore_stats_tcp_report buf = 4;
    int v68 = getsockopt(*(_DWORD *)&a1[4].flow_id[12], 0xFFFF, 4128, &type, (socklen_t *)buf);
    BOOL counta = v68 == 0;
    if (!v68)
    {
      unsigned int v67 = type;
LABEL_181:
      if (!v67)
      {
        unsigned int v67 = 1024;
        LODWORD(type) = 1024;
      }
      BOOL v79 = counta;
LABEL_184:
      if (v67 >= a4) {
        size_t v91 = a4;
      }
      else {
        size_t v91 = v67;
      }
      BOOL v92 = nw_calloc_type<unsigned char>(v91);
      v172.os_log_type_t msg_name = (void *)v92;
      *(void *)&v172.msg_namelen = v91;
      *(_OWORD *)netcore_stats_tcp_report buf = 0u;
      *(void *)&buf[16] = &v172;
      *(void *)&unsigned char buf[24] = 1;
      *(void *)&unsigned char buf[32] = 0;
      *(void *)unsigned int v175 = 0x8000000000;
      ssize_t v93 = recvmsg(*(_DWORD *)&a1[4].flow_id[12], (msghdr *)buf, 0);
      if (v93 < 0)
      {
        uint64_t v96 = **(unsigned int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
        if (v96 == 35)
        {
          if ((*(_WORD *)v13 & 0x80) == 0 && gLogDatapath)
          {
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
            }
            BOOL v97 = gconnectionLogObj;
            if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)unsigned int v179 = 136446466;
              *(void *)&v179[4] = "nw_socket_get_input_frames";
              *(_WORD *)&v179[12] = 2082;
              *(void *)&v179[14] = (char *)a1 + 404;
              _os_log_impl(&dword_1830D4000, v97, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s Received EWOULDBLOCK", v179, 0x16u);
            }
          }
        }
        else
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          __int16 v108 = gconnectionLogObj;
          if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
          {
            int v109 = *(_DWORD *)&a1[4].flow_id[12];
            *(_DWORD *)unsigned int v179 = 136447234;
            *(void *)&v179[4] = "nw_socket_get_input_frames";
            *(_WORD *)&v179[12] = 2080;
            *(void *)&v179[14] = (char *)a1 + 404;
            *(_WORD *)&v179[22] = 1024;
            *(_DWORD *)&v179[24] = v109;
            *(_WORD *)&v179[28] = 1024;
            *(_DWORD *)&v179[30] = v91;
            *(_WORD *)&v179[34] = 1024;
            *(_DWORD *)&v179[36] = v96;
            _os_log_impl(&dword_1830D4000, v108, OS_LOG_TYPE_ERROR, "%{public}s %s recvmsg(fd %d, %u bytes) %{darwin.errno}d", v179, 0x28u);
          }
          nw_socket_internal_error((uint64_t)p_output_handler, v96);
          nw_socket_input_finished(a1, v110);
        }
LABEL_226:
        if (v92)
        {
          free((void *)v92);
          return 0;
        }
        return 0;
      }
      BOOL v10 = (nw_frame_array_s *)v93;
      if ((*(_WORD *)v13 & 0x100) != 0)
      {
        long long v192 = 0uLL;
        nw_protocol_get_flow_id(a1, &v192);
        if ((*(_WORD *)v13 & 0x80) == 0)
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          char v98 = gconnectionLogObj;
          if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEFAULT))
          {
            output_handler = a1[1].output_handler;
            uint64_t v100 = (v10 - 1);
            if (!v10) {
              uint64_t v100 = 0;
            }
            *(_DWORD *)unsigned int v179 = 136447234;
            *(void *)&v179[4] = "nw_socket_get_input_frames";
            *(_WORD *)&v179[12] = 2082;
            *(void *)&v179[14] = (char *)a1 + 404;
            *(_WORD *)&v179[22] = 1024;
            *(_DWORD *)&v179[24] = v10;
            *(_WORD *)&v179[28] = 2048;
            *(void *)&v179[30] = output_handler;
            *(_WORD *)&v179[38] = 2048;
            *(void *)&v179[40] = (char *)output_handler + v100;
            _os_log_impl(&dword_1830D4000, v98, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}s Received %u bytes (overall bytes %llu -> %llu)", v179, 0x30u);
          }
        }
        pthread_once(&nw_mpkl_log_init(void)::init_once, (void (*)(void))nw_mpkl_log_init_once);
        os_log_type_t v101 = gMpklLogObj;
        if (os_log_type_enabled((os_log_t)gMpklLogObj, OS_LOG_TYPE_DEFAULT))
        {
          BOOL v102 = a1[1].output_handler;
          uint64_t v103 = (v10 - 1);
          if (!v10) {
            uint64_t v103 = 0;
          }
          int v104 = BYTE2(a1[6].identifier);
          *(_DWORD *)unsigned int v179 = 67110658;
          *(_DWORD *)&v179[4] = 100;
          *(_WORD *)&v179[8] = 1024;
          *(_DWORD *)&v179[10] = 150;
          *(_WORD *)&v179[14] = 1042;
          *(_DWORD *)&v179[16] = 16;
          *(_WORD *)&v179[20] = 2098;
          *(void *)&v179[22] = &v192;
          *(_WORD *)&v179[30] = 2048;
          *(void *)&v179[32] = v102;
          *(_WORD *)&v179[40] = 2048;
          *(void *)&v179[42] = (char *)v102 + v103;
          *(_WORD *)&v179[50] = 1024;
          *(_DWORD *)&v179[52] = v104;
          _os_log_impl(&dword_1830D4000, v101, OS_LOG_TYPE_DEFAULT, "32 {curProtocol: %hhu, nextProtocol: %hhu, curUUID: %{public}.16P, curStart: %llu, curEnd: %llu, logSeqn: %hhu}", v179, 0x38u);
        }
        ++BYTE2(a1[6].identifier);
      }
      else if ((*(_WORD *)v13 & 0x80) == 0 && gLogDatapath)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        long long v95 = gconnectionLogObj;
        os_log_type_t v9 = (char *)v169;
        if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)unsigned int v179 = 136446722;
          *(void *)&v179[4] = "nw_socket_get_input_frames";
          *(_WORD *)&v179[12] = 2082;
          *(void *)&v179[14] = (char *)a1 + 404;
          *(_WORD *)&v179[22] = 1024;
          *(_DWORD *)&v179[24] = v10;
          _os_log_impl(&dword_1830D4000, v95, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s Received %u bytes", v179, 0x1Cu);
        }
      }
      char *p_output_handler = (nw_protocol *)((char *)*p_output_handler + v10);
      if (!v10)
      {
        if (v92) {
          free((void *)v92);
        }
        nw_socket_input_finished(a1, v94);
        nw_socket_cancel_input_source((uint64_t)p_output_handler);
        return 0;
      }
      uint64_t callbacks = (uint64_t)a1[5].callbacks;
      if (callbacks)
      {
        uint64_t v106 = *(void *)(callbacks + 16);
        char v107 = *(nw_protocol **)(callbacks + 24);
        if (v106)
        {
          *(void *)(v106 + 24) = v107;
          char v107 = *(nw_protocol **)(callbacks + 24);
        }
        else
        {
          a1[5].output_handler = v107;
        }
        *(void *)v107->flow_id = v106;
        *(void *)(callbacks + 16) = 0;
        *(void *)(callbacks + 24) = 0;
        nw_frame_reset(callbacks, v92, (int)v10, (uint64_t)nw_socket_frame_input_finalizer, (uint64_t)p_output_handler);
        goto LABEL_235;
      }
      uint64_t callbacks = nw_frame_create(0, v92, (int)v10, (uint64_t)nw_socket_frame_input_finalizer, (uint64_t)p_output_handler);
      if (callbacks)
      {
LABEL_235:
        if (a1[2].callbacks)
        {
          int v115 = v91 > v10 || type == v10 && v79;
          if ((*(_WORD *)v13 & 0x80) == 0 && gLogDatapath)
          {
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
            }
            id v162 = gconnectionLogObj;
            if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
            {
              int v163 = "Did not drain";
              *(void *)&v179[4] = "nw_socket_get_input_frames";
              *(_DWORD *)unsigned int v179 = 136446722;
              if (v115) {
                int v163 = "Drained";
              }
              *(_WORD *)&v179[12] = 2082;
              *(void *)&v179[14] = (char *)a1 + 404;
              *(_WORD *)&v179[22] = 2080;
              *(void *)&v179[24] = v163;
              _os_log_impl(&dword_1830D4000, v162, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s %s all data", v179, 0x20u);
            }
          }
          nw_frame_set_metadata(callbacks, a1[2].callbacks, 1, v115 & (*(unsigned __int16 *)v13 >> 4));
          os_log_type_t v9 = (char *)v169;
        }
        uint64_t v20 = 1;
        nw_frame_set_buffer_used_malloc(callbacks, 1);
        *(void *)(callbacks + 16) = 0;
        default_input_handler = a1[5].default_input_handler;
        *(void *)(callbacks + 24) = default_input_handler;
        *(void *)default_input_handler->flow_id = callbacks;
        a1[5].default_input_handler = (nw_protocol *)(callbacks + 16);
        *(void *)(callbacks + 32) = 0;
        tqh_last = (uint64_t *)v171->tqh_last;
        *(void *)(callbacks + 40) = tqh_last;
        uint64_t *tqh_last = callbacks;
        v171->tqh_last = (nw_frame **)(callbacks + 32);
        goto LABEL_245;
      }
      __nwlog_obj();
      *(_DWORD *)unsigned int v179 = 136446210;
      *(void *)&v179[4] = "nw_socket_get_input_frames";
      uint64_t v111 = (char *)_os_log_send_and_compose_impl();
      LOBYTE(v192) = 16;
      char v173 = 0;
      if (__nwlog_fault(v111, &v192, &v173))
      {
        if (v192 == 17)
        {
          uint64_t v112 = __nwlog_obj();
          os_log_type_t v113 = v192;
          if (!os_log_type_enabled(v112, (os_log_type_t)v192)) {
            goto LABEL_342;
          }
          *(_DWORD *)unsigned int v179 = 136446210;
          *(void *)&v179[4] = "nw_socket_get_input_frames";
          char v114 = "%{public}s nw_frame_create failed";
          goto LABEL_341;
        }
        if (!v173)
        {
          uint64_t v112 = __nwlog_obj();
          os_log_type_t v113 = v192;
          if (!os_log_type_enabled(v112, (os_log_type_t)v192)) {
            goto LABEL_342;
          }
          *(_DWORD *)unsigned int v179 = 136446210;
          *(void *)&v179[4] = "nw_socket_get_input_frames";
          char v114 = "%{public}s nw_frame_create failed, backtrace limit exceeded";
          goto LABEL_341;
        }
        unsigned int v154 = (char *)__nw_create_backtrace_string();
        uint64_t v112 = __nwlog_obj();
        os_log_type_t v113 = v192;
        BOOL v155 = os_log_type_enabled(v112, (os_log_type_t)v192);
        if (v154)
        {
          if (v155)
          {
            *(_DWORD *)unsigned int v179 = 136446466;
            *(void *)&v179[4] = "nw_socket_get_input_frames";
            *(_WORD *)&v179[12] = 2082;
            *(void *)&v179[14] = v154;
            _os_log_impl(&dword_1830D4000, v112, v113, "%{public}s nw_frame_create failed, dumping backtrace:%{public}s", v179, 0x16u);
          }
          free(v154);
          goto LABEL_342;
        }
        if (v155)
        {
          *(_DWORD *)unsigned int v179 = 136446210;
          *(void *)&v179[4] = "nw_socket_get_input_frames";
          char v114 = "%{public}s nw_frame_create failed, no backtrace";
LABEL_341:
          _os_log_impl(&dword_1830D4000, v112, v113, v114, v179, 0xCu);
        }
      }
LABEL_342:
      if (v111) {
        free(v111);
      }
      goto LABEL_226;
    }
    int v69 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    os_log_type_t v70 = v66;
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
    }
    BOOL v71 = gconnectionLogObj;
    if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)unsigned int v179 = 136446722;
      *(void *)&v179[4] = "nw_socket_get_input_frames";
      *(_WORD *)&v179[12] = 2080;
      *(void *)&v179[14] = (char *)a1 + 404;
      *(_WORD *)&v179[22] = 1024;
      *(_DWORD *)&v179[24] = v69;
      _os_log_impl(&dword_1830D4000, v71, OS_LOG_TYPE_ERROR, "%{public}s %s getsockopt SO_NREAD failed %{darwin.errno}d", v179, 0x1Cu);
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)unsigned int v179 = 136446466;
    *(void *)&v179[4] = "nw_socket_get_input_frames";
    *(_WORD *)&v179[12] = 1024;
    *(_DWORD *)&v179[14] = v69;
    uint64_t v72 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(v172.msg_name) = 16;
    LOBYTE(v192) = 0;
    if (__nwlog_fault(v72, &v172, &v192))
    {
      if (LOBYTE(v172.msg_name) == 17)
      {
        BOOL v73 = __nwlog_obj();
        os_log_type_t msg_name = (os_log_type_t)v172.msg_name;
        if (os_log_type_enabled(v73, (os_log_type_t)v172.msg_name))
        {
          *(_DWORD *)unsigned int v179 = 136446466;
          *(void *)&v179[4] = "nw_socket_get_input_frames";
          *(_WORD *)&v179[12] = 1024;
          *(_DWORD *)&v179[14] = v69;
          os_log_type_t v75 = "%{public}s getsockopt SO_NREAD failed %{darwin.errno}d";
LABEL_177:
          _os_log_impl(&dword_1830D4000, v73, msg_name, v75, v179, 0x12u);
        }
      }
      else if ((_BYTE)v192)
      {
        os_log_type_t v82 = (char *)__nw_create_backtrace_string();
        BOOL v73 = __nwlog_obj();
        os_log_type_t msg_name = (os_log_type_t)v172.msg_name;
        BOOL v83 = os_log_type_enabled(v73, (os_log_type_t)v172.msg_name);
        if (v82)
        {
          if (v83)
          {
            *(_DWORD *)unsigned int v179 = 136446722;
            *(void *)&v179[4] = "nw_socket_get_input_frames";
            *(_WORD *)&v179[12] = 1024;
            *(_DWORD *)&v179[14] = v69;
            *(_WORD *)&v179[18] = 2082;
            *(void *)&v179[20] = v82;
            _os_log_impl(&dword_1830D4000, v73, msg_name, "%{public}s getsockopt SO_NREAD failed %{darwin.errno}d, dumping backtrace:%{public}s", v179, 0x1Cu);
          }
          free(v82);
          goto LABEL_178;
        }
        if (v83)
        {
          *(_DWORD *)unsigned int v179 = 136446466;
          *(void *)&v179[4] = "nw_socket_get_input_frames";
          *(_WORD *)&v179[12] = 1024;
          *(_DWORD *)&v179[14] = v69;
          os_log_type_t v75 = "%{public}s getsockopt SO_NREAD failed %{darwin.errno}d, no backtrace";
          goto LABEL_177;
        }
      }
      else
      {
        BOOL v73 = __nwlog_obj();
        os_log_type_t msg_name = (os_log_type_t)v172.msg_name;
        if (os_log_type_enabled(v73, (os_log_type_t)v172.msg_name))
        {
          *(_DWORD *)unsigned int v179 = 136446466;
          *(void *)&v179[4] = "nw_socket_get_input_frames";
          *(_WORD *)&v179[12] = 1024;
          *(_DWORD *)&v179[14] = v69;
          os_log_type_t v75 = "%{public}s getsockopt SO_NREAD failed %{darwin.errno}d, backtrace limit exceeded";
          goto LABEL_177;
        }
      }
    }
LABEL_178:
    if (v72) {
      free(v72);
    }
    unsigned int v67 = *v70;
    LODWORD(type) = *v70;
    os_log_type_t v9 = (char *)v169;
    goto LABEL_181;
  }
  if (identifier != 1)
  {
    LODWORD(v10) = 0;
    uint64_t v20 = 0;
    goto LABEL_245;
  }
  __int16 v170 = v10;
  uint64_t v20 = 0;
  LODWORD(v10) = 0;
  if (a4 >= 0x2400) {
    uint64_t v21 = 9216;
  }
  else {
    uint64_t v21 = a4;
  }
  size_t count = v21;
  os_log_type_t v164 = v9 - 96;
  unsigned int v166 = v12;
  while (1)
  {
    uint64_t output_handler_context = (uint64_t)a1[5].output_handler_context;
    if (!output_handler_context) {
      break;
    }
    uint64_t v25 = *(void *)(output_handler_context + 16);
    os_log_type_t v26 = *(void **)(output_handler_context + 24);
    int v27 = (int)v10;
    if (v25)
    {
      *(void *)(v25 + 24) = v26;
      os_log_type_t v26 = *(void **)(output_handler_context + 24);
    }
    else
    {
      *(void *)a1[6].flow_id = v26;
    }
    LODWORD(v10) = 0;
    *os_log_type_t v26 = v25;
    *(void *)(output_handler_context + 16) = 0;
    *(void *)(output_handler_context + 24) = 0;
LABEL_87:
    if (((*(unsigned __int16 *)v13 | (a1[6].flow_id[15] << 16)) & 0x100000) == 0)
    {
      if (nw_protocol_setup_udp_definition(void)::onceToken[0] != -1) {
        dispatch_once(nw_protocol_setup_udp_definition(void)::onceToken, &__block_literal_global_45806);
      }
      singleton = nw_protocol_metadata_create_singleton((void *)g_udp_definition);
      if (singleton)
      {
        os_log_type_t v55 = singleton;
        nw_frame_set_metadata(output_handler_context, singleton, 1, 1);
        os_release(v55);
      }
    }
    LODWORD(v10) = v27 + v10;
    *(void *)(output_handler_context + 16) = 0;
    BOOL v22 = a1[5].default_input_handler;
    *(void *)(output_handler_context + 24) = v22;
    *(void *)v22->flow_id = output_handler_context;
    a1[5].default_input_handler = (nw_protocol *)(output_handler_context + 16);
    *(void *)(output_handler_context + 32) = 0;
    os_log_type_t v23 = (uint64_t *)v170->tqh_last;
    *(void *)(output_handler_context + 40) = v23;
    *os_log_type_t v23 = output_handler_context;
    v170->tqh_last = (nw_frame **)(output_handler_context + 32);
    uint64_t v20 = (v20 + 1);
    if (v20 == v12)
    {
      uint64_t v20 = v12;
      goto LABEL_245;
    }
  }
  int v27 = (int)v10;
  BOOL v28 = nw_calloc_type<unsigned char>(count);
  *(void *)&long long v192 = v28;
  *((void *)&v192 + 1) = count;
  long long v190 = 0u;
  long long v191 = 0u;
  long long v188 = 0u;
  long long v189 = 0u;
  long long v186 = 0u;
  long long v187 = 0u;
  long long v184 = 0u;
  long long v185 = 0u;
  long long v182 = 0u;
  long long v183 = 0u;
  long long v180 = 0u;
  long long v181 = 0u;
  memset(v179, 0, sizeof(v179));
  *(_OWORD *)&v172.os_log_type_t msg_name = 0u;
  *(&v172.msg_iovlen + 1) = 0;
  v172.msg_iov = (iovec *)&v192;
  v172.msg_iovlen = 1;
  v172.msg_control = v179;
  *(void *)&v172.msg_controllen = 0x8000000100;
  ssize_t v29 = recvmsg(*(_DWORD *)&a1[4].flow_id[12], &v172, 0);
  if (v29 < 0)
  {
    uint64_t v80 = **(unsigned int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    if (v80 == 35)
    {
      if ((*(_WORD *)v13 & 0x80) == 0 && gLogDatapath)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        uint64_t v81 = gconnectionLogObj;
        os_log_type_t v9 = (char *)v169;
        if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_socket_get_input_frames";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&void buf[14] = (char *)a1 + 404;
          _os_log_impl(&dword_1830D4000, v81, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s Received EWOULDBLOCK", buf, 0x16u);
        }
      }
    }
    else
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      uint64_t v84 = gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
      {
        int v85 = *(_DWORD *)&a1[4].flow_id[12];
        *(_DWORD *)netcore_stats_tcp_report buf = 136447234;
        *(void *)&uint8_t buf[4] = "nw_socket_get_input_frames";
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&void buf[14] = (char *)a1 + 404;
        *(_WORD *)&buf[22] = 1024;
        *(_DWORD *)&unsigned char buf[24] = v85;
        *(_WORD *)&unsigned char buf[28] = 1024;
        *(_DWORD *)&buf[30] = count;
        *(_WORD *)&buf[34] = 1024;
        *(_DWORD *)&buf[36] = v80;
        _os_log_impl(&dword_1830D4000, v84, OS_LOG_TYPE_ERROR, "%{public}s %s recvmsg(fd %d, %u bytes) %{darwin.errno}d", buf, 0x28u);
      }
      a1[6].flow_id[15] = (*(unsigned __int16 *)v13 | (a1[6].flow_id[15] << 16) | 0x80000u) >> 16;
      nw_socket_internal_error((uint64_t)v9, v80);
    }
    if (v28) {
      free((void *)v28);
    }
    goto LABEL_245;
  }
  BOOL v10 = (nw_frame_array_s *)v29;
  unsigned int v31 = *(unsigned __int16 *)v13 | (a1[6].flow_id[15] << 16);
  if ((v31 & 0x80000) != 0)
  {
    nw_socket_internal_error((uint64_t)v9, 0);
    unsigned int v31 = (*(unsigned __int16 *)&a1[6].flow_id[13] | (a1[6].flow_id[15] << 16)) & 0xFFF7FFFF;
    *(_WORD *)char v13 = *(_WORD *)v13;
    a1[6].flow_id[15] = BYTE2(v31);
  }
  if ((v31 & 0x100) != 0)
  {
    long long type = 0uLL;
    nw_protocol_get_flow_id(v164, &type);
    if ((*(_WORD *)v13 & 0x80) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      __int16 v33 = gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v34 = *(void *)v9;
        uint64_t v35 = (v10 - 1);
        if (!v10) {
          uint64_t v35 = 0;
        }
        *(_DWORD *)netcore_stats_tcp_report buf = 136447234;
        *(void *)&uint8_t buf[4] = "nw_socket_get_input_frames";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&void buf[14] = (char *)a1 + 404;
        *(_WORD *)&buf[22] = 1024;
        *(_DWORD *)&unsigned char buf[24] = v10;
        *(_WORD *)&unsigned char buf[28] = 2048;
        *(void *)&buf[30] = v34;
        *(_WORD *)&unsigned char buf[38] = 2048;
        *(void *)unsigned int v175 = v34 + v35;
        _os_log_impl(&dword_1830D4000, v33, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}s Received %u bytes (overall bytes %llu -> %llu)", buf, 0x30u);
      }
    }
    pthread_once(&nw_mpkl_log_init(void)::init_once, (void (*)(void))nw_mpkl_log_init_once);
    int v36 = gMpklLogObj;
    if (os_log_type_enabled((os_log_t)gMpklLogObj, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v37 = *(void *)v9;
      uint64_t v38 = (v10 - 1);
      if (!v10) {
        uint64_t v38 = 0;
      }
      int v39 = BYTE2(a1[6].identifier);
      *(_DWORD *)netcore_stats_tcp_report buf = 67110658;
      *(_DWORD *)&uint8_t buf[4] = 100;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = 150;
      *(_WORD *)&void buf[14] = 1042;
      *(_DWORD *)&buf[16] = 16;
      *(_WORD *)&buf[20] = 2098;
      *(void *)&buf[22] = &type;
      *(_WORD *)&buf[30] = 2048;
      *(void *)&unsigned char buf[32] = v37;
      *(_WORD *)unsigned int v175 = 2048;
      *(void *)&v175[2] = v37 + v38;
      __int16 v176 = 1024;
      int v177 = v39;
      _os_log_impl(&dword_1830D4000, v36, OS_LOG_TYPE_DEFAULT, "32 {curProtocol: %hhu, nextProtocol: %hhu, curUUID: %{public}.16P, curStart: %llu, curEnd: %llu, logSeqn: %hhu}", buf, 0x38u);
    }
    ++BYTE2(a1[6].identifier);
  }
  else if ((v31 & 0x80) == 0 && gLogDatapath)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
    }
    __int16 v32 = gconnectionLogObj;
    os_log_type_t v9 = (char *)v169;
    if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)netcore_stats_tcp_report buf = 136446722;
      *(void *)&uint8_t buf[4] = "nw_socket_get_input_frames";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&void buf[14] = (char *)a1 + 404;
      *(_WORD *)&buf[22] = 1024;
      *(_DWORD *)&unsigned char buf[24] = v10;
      _os_log_impl(&dword_1830D4000, v32, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s Received %u bytes", buf, 0x1Cu);
    }
  }
  *(void *)v9 += v10;
  ++a1[1].default_input_handler;
  if (!v10)
  {
    if (v28) {
      free((void *)v28);
    }
    nw_socket_input_finished(a1, v30);
    nw_socket_cancel_input_source((uint64_t)v9);
    LODWORD(v10) = v27;
    goto LABEL_245;
  }
  uint64_t v40 = v28;
  unsigned int v41 = 0;
  uint64_t v42 = 0;
  if (v172.msg_controllen < 0xC)
  {
    int v44 = 0;
    uint64_t output_handler_context = (uint64_t)a1[5].callbacks;
    if (!output_handler_context) {
      goto LABEL_72;
    }
    goto LABEL_76;
  }
  msg_control = (unsigned int *)v172.msg_control;
  int v44 = 0;
  if (!v172.msg_control)
  {
LABEL_75:
    uint64_t output_handler_context = (uint64_t)a1[5].callbacks;
    if (!output_handler_context) {
      goto LABEL_72;
    }
LABEL_76:
    uint64_t v51 = *(void *)(output_handler_context + 16);
    os_log_type_t v52 = *(nw_protocol **)(output_handler_context + 24);
    if (v51)
    {
      *(void *)(v51 + 24) = v52;
      os_log_type_t v52 = *(nw_protocol **)(output_handler_context + 24);
    }
    else
    {
      a1[5].output_handler = v52;
    }
    *(void *)v52->flow_id = v51;
    *(void *)(output_handler_context + 16) = 0;
    *(void *)(output_handler_context + 24) = 0;
    nw_frame_reset(output_handler_context, v40, (int)v10, (uint64_t)nw_socket_frame_input_finalizer, v169);
    goto LABEL_80;
  }
  uint64_t v42 = 0;
  while (1)
  {
    unsigned int v47 = msg_control[1];
    if (v47 != 0xFFFF) {
      break;
    }
    if (msg_control[2] == 7) {
      uint64_t v42 = *(void *)(msg_control + 3);
    }
LABEL_54:
    int v45 = (unsigned int *)((char *)msg_control + ((*msg_control + 3) & 0x1FFFFFFFCLL));
    if ((char *)(v45 + 3) <= (char *)v172.msg_control + v172.msg_controllen)
    {
      BOOL v46 = v45 == msg_control;
    }
    else
    {
      int v45 = 0;
      BOOL v46 = 1;
    }
    msg_control = v45;
    if (v46)
    {
      unsigned int v41 = 0;
      int v44 = 0;
      uint64_t output_handler_context = (uint64_t)a1[5].callbacks;
      if (output_handler_context) {
        goto LABEL_76;
      }
      goto LABEL_72;
    }
  }
  if (v47 != 41)
  {
    if (!v47)
    {
      unsigned int v48 = msg_control[2];
      if (v48 == 24) {
        goto LABEL_92;
      }
      if (v48 == 27)
      {
LABEL_74:
        int v44 = 0;
        unsigned int v41 = msg_control[3];
        goto LABEL_75;
      }
    }
    goto LABEL_54;
  }
  unsigned int v49 = msg_control[2];
  if (v49 != 47)
  {
    if (v49 == 36) {
      goto LABEL_74;
    }
    goto LABEL_54;
  }
LABEL_92:
  unsigned int v41 = 0;
  int v44 = *((unsigned __int8 *)msg_control + 12);
  uint64_t output_handler_context = (uint64_t)a1[5].callbacks;
  if (output_handler_context) {
    goto LABEL_76;
  }
LABEL_72:
  os_log_type_t v50 = (void *)v40;
  uint64_t output_handler_context = nw_frame_create(0, v40, (int)v10, (uint64_t)nw_socket_frame_input_finalizer, v169);
  if (output_handler_context)
  {
LABEL_80:
    nw_frame_set_buffer_used_malloc(output_handler_context, 1);
    if (v41) {
      *(unsigned char *)(output_handler_context + 186) = *(unsigned char *)(output_handler_context + 186) & 0xFC | v41 & 3;
    }
    uint64_t v12 = v166;
    if (v42)
    {
      int v53 = *(_WORD *)(output_handler_context + 204) & 0xFFEF | (*(unsigned __int8 *)(output_handler_context + 206) << 16);
      *(_WORD *)(output_handler_context + 204) &= ~0x10u;
      *(unsigned char *)(output_handler_context + 206) = BYTE2(v53);
      *(void *)(output_handler_context + 152) = v42;
    }
    if (v44) {
      *(unsigned char *)(output_handler_context + 185) = v44;
    }
    os_log_type_t v9 = (char *)v169;
    goto LABEL_87;
  }
  __nwlog_obj();
  *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_socket_get_input_frames";
  nw_endpoint_t v86 = (char *)_os_log_send_and_compose_impl();
  LOBYTE(type) = 16;
  char v173 = 0;
  int v87 = __nwlog_fault(v86, &type, &v173);
  os_log_type_t v9 = (char *)v169;
  LODWORD(v10) = v27;
  if (!v87) {
    goto LABEL_327;
  }
  if (type != 17)
  {
    if (v173)
    {
      uint64_t v152 = (char *)__nw_create_backtrace_string();
      BOOL v88 = __nwlog_obj();
      os_log_type_t v89 = type;
      BOOL v153 = os_log_type_enabled(v88, (os_log_type_t)type);
      if (v152)
      {
        if (v153)
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_socket_get_input_frames";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&void buf[14] = v152;
          _os_log_impl(&dword_1830D4000, v88, v89, "%{public}s nw_frame_create failed, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v152);
        goto LABEL_327;
      }
      if (!v153) {
        goto LABEL_327;
      }
      *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_socket_get_input_frames";
      id v90 = "%{public}s nw_frame_create failed, no backtrace";
    }
    else
    {
      BOOL v88 = __nwlog_obj();
      os_log_type_t v89 = type;
      if (!os_log_type_enabled(v88, (os_log_type_t)type)) {
        goto LABEL_327;
      }
      *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_socket_get_input_frames";
      id v90 = "%{public}s nw_frame_create failed, backtrace limit exceeded";
    }
LABEL_326:
    _os_log_impl(&dword_1830D4000, v88, v89, v90, buf, 0xCu);
    goto LABEL_327;
  }
  BOOL v88 = __nwlog_obj();
  os_log_type_t v89 = type;
  if (os_log_type_enabled(v88, (os_log_type_t)type))
  {
    *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_socket_get_input_frames";
    id v90 = "%{public}s nw_frame_create failed";
    goto LABEL_326;
  }
LABEL_327:
  if (v86) {
    free(v86);
  }
  if (v50) {
    free(v50);
  }
LABEL_245:
  unsigned int v118 = v165 - v10;
  if (v165 < v10) {
    unsigned int v118 = 0;
  }
  if (v118 <= 1) {
    unsigned int v119 = 1;
  }
  else {
    unsigned int v119 = v118;
  }
  *(_DWORD *)netcore_stats_tcp_report buf = v119;
  unsigned int v120 = *((_DWORD *)v9 + 38);
  if (v120 != v119)
  {
    if (v119 > v120)
    {
      LODWORD(v172.msg_name) = 0;
      LODWORD(v192) = 4;
      if (getsockopt(*((_DWORD *)v9 + 43), 0xFFFF, 4098, &v172, (socklen_t *)&v192))
      {
        int v121 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        __int16 v122 = gconnectionLogObj;
        if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
        {
          int v123 = *((_DWORD *)v9 + 43);
          *(_DWORD *)unsigned int v179 = 136446978;
          *(void *)&v179[4] = "nw_socket_set_receive_low_water_mark";
          *(_WORD *)&v179[12] = 2080;
          *(void *)&v179[14] = v9 + 308;
          *(_WORD *)&v179[22] = 1024;
          *(_DWORD *)&v179[24] = v123;
          *(_WORD *)&v179[28] = 1024;
          *(_DWORD *)&v179[30] = v121;
          _os_log_impl(&dword_1830D4000, v122, OS_LOG_TYPE_ERROR, "%{public}s %s getsockopt SO_RCVBUF fd %d failed %{darwin.errno}d", v179, 0x22u);
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v124 = *((_DWORD *)v9 + 43);
        *(_DWORD *)unsigned int v179 = 136446722;
        *(void *)&v179[4] = "nw_socket_set_receive_low_water_mark";
        *(_WORD *)&v179[12] = 1024;
        *(_DWORD *)&v179[14] = v124;
        *(_WORD *)&v179[18] = 1024;
        *(_DWORD *)&v179[20] = v121;
        uint64_t v125 = (char *)_os_log_send_and_compose_impl();
        LOBYTE(type) = 16;
        char v173 = 0;
        if (__nwlog_fault(v125, &type, &v173))
        {
          if (type != 17)
          {
            if (v173)
            {
              int v131 = (char *)__nw_create_backtrace_string();
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              __int16 v126 = gLogObj;
              os_log_type_t v127 = type;
              BOOL v132 = os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)type);
              if (v131)
              {
                if (v132)
                {
                  int v133 = *(_DWORD *)(v169 + 172);
                  *(_DWORD *)unsigned int v179 = 136446978;
                  *(void *)&v179[4] = "nw_socket_set_receive_low_water_mark";
                  *(_WORD *)&v179[12] = 1024;
                  *(_DWORD *)&v179[14] = v133;
                  *(_WORD *)&v179[18] = 1024;
                  *(_DWORD *)&v179[20] = v121;
                  *(_WORD *)&v179[24] = 2082;
                  *(void *)&v179[26] = v131;
                  _os_log_impl(&dword_1830D4000, v126, v127, "%{public}s getsockopt SO_RCVBUF fd %d failed %{darwin.errno}d, dumping backtrace:%{public}s", v179, 0x22u);
                }
                free(v131);
                goto LABEL_277;
              }
              if (!v132) {
                goto LABEL_277;
              }
              int v135 = *(_DWORD *)(v169 + 172);
              *(_DWORD *)unsigned int v179 = 136446722;
              *(void *)&v179[4] = "nw_socket_set_receive_low_water_mark";
              *(_WORD *)&v179[12] = 1024;
              *(_DWORD *)&v179[14] = v135;
              *(_WORD *)&v179[18] = 1024;
              *(_DWORD *)&v179[20] = v121;
              id v129 = "%{public}s getsockopt SO_RCVBUF fd %d failed %{darwin.errno}d, no backtrace";
            }
            else
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              __int16 v126 = gLogObj;
              os_log_type_t v127 = type;
              if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)type)) {
                goto LABEL_277;
              }
              int v134 = *(_DWORD *)(v169 + 172);
              *(_DWORD *)unsigned int v179 = 136446722;
              *(void *)&v179[4] = "nw_socket_set_receive_low_water_mark";
              *(_WORD *)&v179[12] = 1024;
              *(_DWORD *)&v179[14] = v134;
              *(_WORD *)&v179[18] = 1024;
              *(_DWORD *)&v179[20] = v121;
              id v129 = "%{public}s getsockopt SO_RCVBUF fd %d failed %{darwin.errno}d, backtrace limit exceeded";
            }
LABEL_276:
            _os_log_impl(&dword_1830D4000, v126, v127, v129, v179, 0x18u);
            goto LABEL_277;
          }
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          __int16 v126 = gLogObj;
          os_log_type_t v127 = type;
          if (os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)type))
          {
            int v128 = *(_DWORD *)(v169 + 172);
            *(_DWORD *)unsigned int v179 = 136446722;
            *(void *)&v179[4] = "nw_socket_set_receive_low_water_mark";
            *(_WORD *)&v179[12] = 1024;
            *(_DWORD *)&v179[14] = v128;
            *(_WORD *)&v179[18] = 1024;
            *(_DWORD *)&v179[20] = v121;
            id v129 = "%{public}s getsockopt SO_RCVBUF fd %d failed %{darwin.errno}d";
            goto LABEL_276;
          }
        }
LABEL_277:
        if (v125) {
          free(v125);
        }
        os_log_type_t v9 = (char *)v169;
      }
      else if (LODWORD(v172.msg_name) && v119 > LODWORD(v172.msg_name) / 3)
      {
        if (LODWORD(v172.msg_name) < 3) {
          unsigned int v130 = 1;
        }
        else {
          unsigned int v130 = LODWORD(v172.msg_name) / 3;
        }
        *(_DWORD *)netcore_stats_tcp_report buf = v130;
      }
    }
    if (!setsockopt(*((_DWORD *)v9 + 43), 0xFFFF, 4100, buf, 4u))
    {
      *((_DWORD *)v9 + 38) = *(_DWORD *)buf;
      goto LABEL_305;
    }
    int v136 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
    }
    __int16 v137 = gconnectionLogObj;
    if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
    {
      int v138 = *((_DWORD *)v9 + 43);
      *(_DWORD *)unsigned int v179 = 136447234;
      *(void *)&v179[4] = "nw_socket_set_receive_low_water_mark";
      *(_WORD *)&v179[12] = 2080;
      *(void *)&v179[14] = v9 + 308;
      *(_WORD *)&v179[22] = 1024;
      *(_DWORD *)&v179[24] = *(_DWORD *)buf;
      *(_WORD *)&v179[28] = 1024;
      *(_DWORD *)&v179[30] = v138;
      *(_WORD *)&v179[34] = 1024;
      *(_DWORD *)&v179[36] = v136;
      _os_log_impl(&dword_1830D4000, v137, OS_LOG_TYPE_ERROR, "%{public}s %s setsockopt SO_RCVLOWAT %u fd %d failed %{darwin.errno}d", v179, 0x28u);
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    __int16 v139 = gLogObj;
    if (v136 == 22)
    {
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        int v140 = *(_DWORD *)(v169 + 172);
        *(_DWORD *)unsigned int v179 = 136446978;
        *(void *)&v179[4] = "nw_socket_set_receive_low_water_mark";
        *(_WORD *)&v179[12] = 1024;
        *(_DWORD *)&v179[14] = *(_DWORD *)buf;
        *(_WORD *)&v179[18] = 1024;
        *(_DWORD *)&v179[20] = v140;
        *(_WORD *)&v179[24] = 1024;
        *(_DWORD *)&v179[26] = 22;
        _os_log_impl(&dword_1830D4000, v139, OS_LOG_TYPE_ERROR, "%{public}s setsockopt SO_RCVLOWAT %u fd %d failed %{darwin.errno}d", v179, 0x1Eu);
      }
      goto LABEL_305;
    }
    int v141 = *(_DWORD *)(v169 + 172);
    *(_DWORD *)unsigned int v179 = 136446978;
    *(void *)&v179[4] = "nw_socket_set_receive_low_water_mark";
    *(_WORD *)&v179[12] = 1024;
    *(_DWORD *)&v179[14] = *(_DWORD *)buf;
    *(_WORD *)&v179[18] = 1024;
    *(_DWORD *)&v179[20] = v141;
    *(_WORD *)&v179[24] = 1024;
    *(_DWORD *)&v179[26] = v136;
    uint64_t v142 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(v172.msg_name) = 16;
    LOBYTE(v192) = 0;
    if (__nwlog_fault(v142, &v172, &v192))
    {
      if (LOBYTE(v172.msg_name) != 17)
      {
        if ((_BYTE)v192)
        {
          uint64_t v147 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v143 = gLogObj;
          os_log_type_t v144 = (os_log_type_t)v172.msg_name;
          BOOL v148 = os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v172.msg_name);
          if (v147)
          {
            if (v148)
            {
              int v149 = *(_DWORD *)(v169 + 172);
              *(_DWORD *)unsigned int v179 = 136447234;
              *(void *)&v179[4] = "nw_socket_set_receive_low_water_mark";
              *(_WORD *)&v179[12] = 1024;
              *(_DWORD *)&v179[14] = *(_DWORD *)buf;
              *(_WORD *)&v179[18] = 1024;
              *(_DWORD *)&v179[20] = v149;
              *(_WORD *)&v179[24] = 1024;
              *(_DWORD *)&v179[26] = v136;
              *(_WORD *)&v179[30] = 2082;
              *(void *)&v179[32] = v147;
              _os_log_impl(&dword_1830D4000, v143, v144, "%{public}s setsockopt SO_RCVLOWAT %u fd %d failed %{darwin.errno}d, dumping backtrace:%{public}s", v179, 0x28u);
            }
            free(v147);
            goto LABEL_303;
          }
          if (!v148) {
            goto LABEL_303;
          }
          int v151 = *(_DWORD *)(v169 + 172);
          *(_DWORD *)unsigned int v179 = 136446978;
          *(void *)&v179[4] = "nw_socket_set_receive_low_water_mark";
          *(_WORD *)&v179[12] = 1024;
          *(_DWORD *)&v179[14] = *(_DWORD *)buf;
          *(_WORD *)&v179[18] = 1024;
          *(_DWORD *)&v179[20] = v151;
          *(_WORD *)&v179[24] = 1024;
          *(_DWORD *)&v179[26] = v136;
          nw_endpoint_t v146 = "%{public}s setsockopt SO_RCVLOWAT %u fd %d failed %{darwin.errno}d, no backtrace";
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v143 = gLogObj;
          os_log_type_t v144 = (os_log_type_t)v172.msg_name;
          if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v172.msg_name)) {
            goto LABEL_303;
          }
          int v150 = *(_DWORD *)(v169 + 172);
          *(_DWORD *)unsigned int v179 = 136446978;
          *(void *)&v179[4] = "nw_socket_set_receive_low_water_mark";
          *(_WORD *)&v179[12] = 1024;
          *(_DWORD *)&v179[14] = *(_DWORD *)buf;
          *(_WORD *)&v179[18] = 1024;
          *(_DWORD *)&v179[20] = v150;
          *(_WORD *)&v179[24] = 1024;
          *(_DWORD *)&v179[26] = v136;
          nw_endpoint_t v146 = "%{public}s setsockopt SO_RCVLOWAT %u fd %d failed %{darwin.errno}d, backtrace limit exceeded";
        }
LABEL_302:
        _os_log_impl(&dword_1830D4000, v143, v144, v146, v179, 0x1Eu);
        goto LABEL_303;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v143 = gLogObj;
      os_log_type_t v144 = (os_log_type_t)v172.msg_name;
      if (os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v172.msg_name))
      {
        int v145 = *(_DWORD *)(v169 + 172);
        *(_DWORD *)unsigned int v179 = 136446978;
        *(void *)&v179[4] = "nw_socket_set_receive_low_water_mark";
        *(_WORD *)&v179[12] = 1024;
        *(_DWORD *)&v179[14] = *(_DWORD *)buf;
        *(_WORD *)&v179[18] = 1024;
        *(_DWORD *)&v179[20] = v145;
        *(_WORD *)&v179[24] = 1024;
        *(_DWORD *)&v179[26] = v136;
        nw_endpoint_t v146 = "%{public}s setsockopt SO_RCVLOWAT %u fd %d failed %{darwin.errno}d";
        goto LABEL_302;
      }
    }
LABEL_303:
    if (v142) {
      free(v142);
    }
  }
LABEL_305:
  if (_nw_signposts_once != -1) {
    dispatch_once(&_nw_signposts_once, &__block_literal_global_22_65191);
  }
  if (_nw_signposts_enabled && kdebug_is_enabled()) {
    kdebug_trace();
  }
  return v20;
}

BOOL nw_calloc_type<unsigned char>(size_t count)
{
  if (!count)
  {
    os_log_type_t v4 = __nwlog_obj();
    os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
    id v5 = (void *)_os_log_send_and_compose_impl();
    BOOL result = __nwlog_abort((uint64_t)v5);
    if (result) {
      goto LABEL_8;
    }
    free(v5);
  }
  BOOL v2 = malloc_type_calloc(count, 1uLL, 0xEAFB8F1AuLL);
  if (v2) {
    return (BOOL)v2;
  }
  os_log_type_t v6 = __nwlog_obj();
  os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
  os_log_type_t v7 = (void *)_os_log_send_and_compose_impl();
  BOOL result = __nwlog_abort((uint64_t)v7);
  if (!result)
  {
    free(v7);
    return (BOOL)v2;
  }
LABEL_8:
  __break(1u);
  return result;
}

uint64_t nw_utilities_port_for_string(const char *a1, _WORD *a2)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (a2)
    {
      if (!strcasecmp(a1, "http"))
      {
        uint64_t v9 = 0;
      }
      else if (!strcasecmp(a1, "https"))
      {
        uint64_t v9 = 1;
      }
      else if (!strcasecmp(a1, "ws"))
      {
        uint64_t v9 = 2;
      }
      else
      {
        if (strcasecmp(a1, "wss"))
        {
          memset(&v38.ai_socktype, 0, 40);
          *(void *)&v38.ai_flags = 0x1E00000600;
          v38.ai_sockos_log_type_t type = 1;
          unsigned int v31 = 0;
          int v4 = getaddrinfo(0, a1, &v38, &v31);
          if (v4)
          {
            id v5 = gai_strerror(v4);
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            os_log_type_t v6 = (id)gLogObj;
            if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
            {
              os_log_type_t v7 = "Unknown error";
              *(_DWORD *)netcore_stats_tcp_report buf = 136446722;
              __int16 v33 = "nw_utilities_port_for_string";
              __int16 v34 = 2082;
              if (v5) {
                os_log_type_t v7 = v5;
              }
              uint64_t v35 = a1;
              __int16 v36 = 2082;
              uint64_t v37 = (void *)v7;
              _os_log_impl(&dword_1830D4000, v6, OS_LOG_TYPE_ERROR, "%{public}s Unable to convert \"%{public}s\" to port: %{public}s", buf, 0x20u);
            }

            return 0;
          }
          BOOL v10 = v31;
          if (v31)
          {
            ai_addr = v31->ai_addr;
            if (ai_addr)
            {
              if (ai_addr->sa_family == 30)
              {
                *a2 = *(_WORD *)ai_addr->sa_data;
                freeaddrinfo(v10);
                return 1;
              }
            }
          }
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          id v12 = (id)gLogObj;
          *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
          __int16 v33 = "nw_utilities_port_for_string";
          __int16 v34 = 2082;
          uint64_t v35 = a1;
          char v13 = (char *)_os_log_send_and_compose_impl();

          os_log_type_t type = OS_LOG_TYPE_ERROR;
          char v29 = 0;
          if (!__nwlog_fault(v13, &type, &v29)) {
            goto LABEL_39;
          }
          if (type == OS_LOG_TYPE_FAULT)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            int v14 = (id)gLogObj;
            os_log_type_t v15 = type;
            if (os_log_type_enabled(v14, type))
            {
              *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
              __int16 v33 = "nw_utilities_port_for_string";
              __int16 v34 = 2082;
              uint64_t v35 = a1;
              char v16 = "%{public}s getaddrinfo(NULL, %{public}s, ...) failed";
LABEL_37:
              _os_log_impl(&dword_1830D4000, v14, v15, v16, buf, 0x16u);
            }
          }
          else if (v29)
          {
            backtrace_string = (char *)__nw_create_backtrace_string();
            int v14 = __nwlog_obj();
            os_log_type_t v15 = type;
            BOOL v18 = os_log_type_enabled(v14, type);
            if (backtrace_string)
            {
              if (v18)
              {
                *(_DWORD *)netcore_stats_tcp_report buf = 136446722;
                __int16 v33 = "nw_utilities_port_for_string";
                __int16 v34 = 2082;
                uint64_t v35 = a1;
                __int16 v36 = 2082;
                uint64_t v37 = backtrace_string;
                _os_log_impl(&dword_1830D4000, v14, v15, "%{public}s getaddrinfo(NULL, %{public}s, ...) failed, dumping backtrace:%{public}s", buf, 0x20u);
              }

              free(backtrace_string);
              goto LABEL_39;
            }
            if (v18)
            {
              *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
              __int16 v33 = "nw_utilities_port_for_string";
              __int16 v34 = 2082;
              uint64_t v35 = a1;
              char v16 = "%{public}s getaddrinfo(NULL, %{public}s, ...) failed, no backtrace";
              goto LABEL_37;
            }
          }
          else
          {
            int v14 = __nwlog_obj();
            os_log_type_t v15 = type;
            if (os_log_type_enabled(v14, type))
            {
              *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
              __int16 v33 = "nw_utilities_port_for_string";
              __int16 v34 = 2082;
              uint64_t v35 = a1;
              char v16 = "%{public}s getaddrinfo(NULL, %{public}s, ...) failed, backtrace limit exceeded";
              goto LABEL_37;
            }
          }

LABEL_39:
          if (v13) {
            free(v13);
          }
          uint64_t result = (uint64_t)v31;
          if (v31)
          {
            freeaddrinfo(v31);
            return 0;
          }
          return result;
        }
        uint64_t v9 = 3;
      }
      *a2 = (&kWellKnownSchemes)[2 * v9 + 1];
      return 1;
    }
    char v24 = __nwlog_obj();
    v38.ai_flags = 136446210;
    *(void *)&v38.ai_family = "nw_utilities_port_for_string";
    uint64_t v20 = (char *)_os_log_send_and_compose_impl();

    buf[0] = 16;
    LOBYTE(v31) = 0;
    if (__nwlog_fault(v20, buf, &v31))
    {
      if (buf[0] == 17)
      {
        uint64_t v21 = __nwlog_obj();
        os_log_type_t v22 = buf[0];
        if (os_log_type_enabled(v21, (os_log_type_t)buf[0]))
        {
          v38.ai_flags = 136446210;
          *(void *)&v38.ai_family = "nw_utilities_port_for_string";
          os_log_type_t v23 = "%{public}s called with null out_port";
          goto LABEL_69;
        }
        goto LABEL_70;
      }
      if (!(_BYTE)v31)
      {
        uint64_t v21 = __nwlog_obj();
        os_log_type_t v22 = buf[0];
        if (os_log_type_enabled(v21, (os_log_type_t)buf[0]))
        {
          v38.ai_flags = 136446210;
          *(void *)&v38.ai_family = "nw_utilities_port_for_string";
          os_log_type_t v23 = "%{public}s called with null out_port, backtrace limit exceeded";
          goto LABEL_69;
        }
        goto LABEL_70;
      }
      uint64_t v25 = (char *)__nw_create_backtrace_string();
      uint64_t v21 = __nwlog_obj();
      os_log_type_t v22 = buf[0];
      BOOL v28 = os_log_type_enabled(v21, (os_log_type_t)buf[0]);
      if (!v25)
      {
        if (v28)
        {
          v38.ai_flags = 136446210;
          *(void *)&v38.ai_family = "nw_utilities_port_for_string";
          os_log_type_t v23 = "%{public}s called with null out_port, no backtrace";
          goto LABEL_69;
        }
        goto LABEL_70;
      }
      if (!v28) {
        goto LABEL_60;
      }
      v38.ai_flags = 136446466;
      *(void *)&v38.ai_family = "nw_utilities_port_for_string";
      LOWORD(v38.ai_protocol) = 2082;
      *(void *)((char *)&v38.ai_protocol + 2) = v25;
      int v27 = "%{public}s called with null out_port, dumping backtrace:%{public}s";
LABEL_59:
      _os_log_impl(&dword_1830D4000, v21, v22, v27, (uint8_t *)&v38, 0x16u);
LABEL_60:

      free(v25);
    }
  }
  else
  {
    os_log_type_t v19 = __nwlog_obj();
    v38.ai_flags = 136446210;
    *(void *)&v38.ai_family = "nw_utilities_port_for_string";
    uint64_t v20 = (char *)_os_log_send_and_compose_impl();

    buf[0] = 16;
    LOBYTE(v31) = 0;
    if (__nwlog_fault(v20, buf, &v31))
    {
      if (buf[0] == 17)
      {
        uint64_t v21 = __nwlog_obj();
        os_log_type_t v22 = buf[0];
        if (os_log_type_enabled(v21, (os_log_type_t)buf[0]))
        {
          v38.ai_flags = 136446210;
          *(void *)&v38.ai_family = "nw_utilities_port_for_string";
          os_log_type_t v23 = "%{public}s called with null string";
LABEL_69:
          _os_log_impl(&dword_1830D4000, v21, v22, v23, (uint8_t *)&v38, 0xCu);
        }
LABEL_70:

        goto LABEL_71;
      }
      if (!(_BYTE)v31)
      {
        uint64_t v21 = __nwlog_obj();
        os_log_type_t v22 = buf[0];
        if (os_log_type_enabled(v21, (os_log_type_t)buf[0]))
        {
          v38.ai_flags = 136446210;
          *(void *)&v38.ai_family = "nw_utilities_port_for_string";
          os_log_type_t v23 = "%{public}s called with null string, backtrace limit exceeded";
          goto LABEL_69;
        }
        goto LABEL_70;
      }
      uint64_t v25 = (char *)__nw_create_backtrace_string();
      uint64_t v21 = __nwlog_obj();
      os_log_type_t v22 = buf[0];
      BOOL v26 = os_log_type_enabled(v21, (os_log_type_t)buf[0]);
      if (!v25)
      {
        if (v26)
        {
          v38.ai_flags = 136446210;
          *(void *)&v38.ai_family = "nw_utilities_port_for_string";
          os_log_type_t v23 = "%{public}s called with null string, no backtrace";
          goto LABEL_69;
        }
        goto LABEL_70;
      }
      if (!v26) {
        goto LABEL_60;
      }
      v38.ai_flags = 136446466;
      *(void *)&v38.ai_family = "nw_utilities_port_for_string";
      LOWORD(v38.ai_protocol) = 2082;
      *(void *)((char *)&v38.ai_protocol + 2) = v25;
      int v27 = "%{public}s called with null string, dumping backtrace:%{public}s";
      goto LABEL_59;
    }
  }
LABEL_71:
  if (v20) {
    free(v20);
  }
  return 0;
}

void nw_frame_set_buffer_used_malloc(uint64_t a1, __int16 a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    *(_WORD *)(a1 + 204) = *(_WORD *)(a1 + 204) & 0xFFFE | a2;
    return;
  }
  __nwlog_obj();
  *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
  os_log_type_t v11 = "__nw_frame_set_buffer_used_malloc";
  BOOL v2 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v8 = 0;
  if (__nwlog_fault(v2, &type, &v8))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      if (!os_log_type_enabled(v3, type)) {
        goto LABEL_18;
      }
      *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
      os_log_type_t v11 = "__nw_frame_set_buffer_used_malloc";
      id v5 = "%{public}s called with null frame";
      goto LABEL_17;
    }
    if (!v8)
    {
      uint64_t v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      if (!os_log_type_enabled(v3, type)) {
        goto LABEL_18;
      }
      *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
      os_log_type_t v11 = "__nw_frame_set_buffer_used_malloc";
      id v5 = "%{public}s called with null frame, backtrace limit exceeded";
      goto LABEL_17;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v3 = __nwlog_obj();
    os_log_type_t v4 = type;
    BOOL v7 = os_log_type_enabled(v3, type);
    if (backtrace_string)
    {
      if (v7)
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
        os_log_type_t v11 = "__nw_frame_set_buffer_used_malloc";
        __int16 v12 = 2082;
        char v13 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v3, v4, "%{public}s called with null frame, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_18;
    }
    if (v7)
    {
      *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
      os_log_type_t v11 = "__nw_frame_set_buffer_used_malloc";
      id v5 = "%{public}s called with null frame, no backtrace";
LABEL_17:
      _os_log_impl(&dword_1830D4000, v3, v4, v5, buf, 0xCu);
    }
  }
LABEL_18:
  if (v2) {
    free(v2);
  }
}

void ____nwlog_connection_log_block_invoke()
{
  if ((gHasForked & 1) == 0) {
    gconnectionLogObj = (uint64_t)os_log_create((const char *)nw_oslog_subsystem, "connection");
  }
}

uint64_t ___ZL43nw_resolver_create_prefer_connected_variantP22NWConcrete_nw_resolverPU24objcproto13OS_nw_context8NSObjectPU22objcproto11OS_nw_arrayS1__block_invoke_2(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v8 = *(void *)(v6 + 40);
  BOOL v7 = (id *)(v6 + 40);
  if (!v8)
  {
    objc_storeStrong(v7, a3);
    active_instance_size_t count = nw_context_endpoint_get_active_instance_count(*(void **)(a1 + 32), v5);
    uint64_t v10 = a1 + 48;
    goto LABEL_5;
  }
  active_instance_size_t count = nw_context_endpoint_get_active_instance_count(*(void **)(a1 + 32), v5);
  uint64_t v10 = a1 + 48;
  if (active_instance_count > *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24))
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a3);
LABEL_5:
    *(void *)(*(void *)(*(void *)v10 + 8) + 24) = active_instance_count;
  }

  return 1;
}

void sub_18327E460(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_context_endpoint_get_active_instance_count(void *a1, void *a2)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (!v3)
  {
    uint64_t v21 = __nwlog_obj();
    *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_context_endpoint_get_active_instance_count";
    os_log_type_t v22 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v46 = 0;
    if (__nwlog_fault(v22, &type, &v46))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v23 = __nwlog_obj();
        os_log_type_t v24 = type;
        if (os_log_type_enabled(v23, type))
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_context_endpoint_get_active_instance_count";
          _os_log_impl(&dword_1830D4000, v23, v24, "%{public}s called with null context", buf, 0xCu);
        }
      }
      else if (v46)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v23 = __nwlog_obj();
        os_log_type_t v34 = type;
        BOOL v35 = os_log_type_enabled(v23, type);
        if (backtrace_string)
        {
          if (v35)
          {
            *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_context_endpoint_get_active_instance_count";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&void buf[14] = backtrace_string;
            _os_log_impl(&dword_1830D4000, v23, v34, "%{public}s called with null context, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_63;
        }
        if (v35)
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_context_endpoint_get_active_instance_count";
          _os_log_impl(&dword_1830D4000, v23, v34, "%{public}s called with null context, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        os_log_type_t v23 = __nwlog_obj();
        os_log_type_t v42 = type;
        if (os_log_type_enabled(v23, type))
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_context_endpoint_get_active_instance_count";
          _os_log_impl(&dword_1830D4000, v23, v42, "%{public}s called with null context, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_63:
    if (v22) {
      free(v22);
    }
    goto LABEL_77;
  }
  if (!v4)
  {
    uint64_t v25 = __nwlog_obj();
    *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_context_endpoint_get_active_instance_count";
    BOOL v26 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v46 = 0;
    if (__nwlog_fault(v26, &type, &v46))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        int v27 = __nwlog_obj();
        os_log_type_t v28 = type;
        if (os_log_type_enabled(v27, type))
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_context_endpoint_get_active_instance_count";
          _os_log_impl(&dword_1830D4000, v27, v28, "%{public}s called with null endpoint", buf, 0xCu);
        }
      }
      else if (v46)
      {
        __int16 v36 = (char *)__nw_create_backtrace_string();
        int v27 = __nwlog_obj();
        os_log_type_t v37 = type;
        BOOL v38 = os_log_type_enabled(v27, type);
        if (v36)
        {
          if (v38)
          {
            *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_context_endpoint_get_active_instance_count";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&void buf[14] = v36;
            _os_log_impl(&dword_1830D4000, v27, v37, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v36);
          goto LABEL_68;
        }
        if (v38)
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_context_endpoint_get_active_instance_count";
          _os_log_impl(&dword_1830D4000, v27, v37, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        int v27 = __nwlog_obj();
        os_log_type_t v43 = type;
        if (os_log_type_enabled(v27, type))
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_context_endpoint_get_active_instance_count";
          _os_log_impl(&dword_1830D4000, v27, v43, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_68:
    if (v26) {
      free(v26);
    }

    goto LABEL_77;
  }
  if ((*((unsigned char *)v3 + 136) & 8) == 0) {
    dispatch_assert_queue_V2(*((dispatch_queue_t *)v3 + 1));
  }
  id v6 = v5;
  BOOL v7 = v6;
  uint64_t v8 = (void *)*((void *)v6 + 14);
  uint64_t v9 = v6;
  if (v8)
  {
    uint64_t v10 = v6;
    while ((v10[231] & 2) == 0)
    {
      uint64_t v9 = v8;

      uint64_t v8 = (void *)v9[14];
      uint64_t v10 = v9;
      if (!v8) {
        goto LABEL_9;
      }
    }

    BOOL v11 = nw_context_copy_globals_context((NWConcrete_nw_context *)v3);
  }
  else
  {
LABEL_9:

    BOOL v11 = nw_context_copy_cache_context(v3);
  }
  __int16 v12 = (void *)v11;

  id v13 = v7;
  int v14 = [v13 type];

  if (v14 == 2)
  {
    os_log_type_t v15 = (uint64_t *)(v12[3] + 40);
  }
  else if (v14 == 1)
  {
    os_log_type_t v15 = (uint64_t *)(v12[3] + 32);
  }
  else
  {
    os_log_type_t v15 = (uint64_t *)(v12[3] + 48);
  }
  uint64_t v16 = *v15;
  if (!*v15)
  {
    char v29 = __nwlog_obj();
    *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_context_endpoint_get_active_instance_count";
    uint64_t v30 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v46 = 0;
    if (__nwlog_fault(v30, &type, &v46))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        unsigned int v31 = __nwlog_obj();
        os_log_type_t v32 = type;
        if (os_log_type_enabled(v31, type))
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_context_endpoint_get_active_instance_count";
          _os_log_impl(&dword_1830D4000, v31, v32, "%{public}s called with null hash_table", buf, 0xCu);
        }
      }
      else if (v46)
      {
        uint64_t v39 = (char *)__nw_create_backtrace_string();
        unsigned int v31 = __nwlog_obj();
        os_log_type_t v40 = type;
        BOOL v41 = os_log_type_enabled(v31, type);
        if (v39)
        {
          if (v41)
          {
            *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_context_endpoint_get_active_instance_count";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&void buf[14] = v39;
            _os_log_impl(&dword_1830D4000, v31, v40, "%{public}s called with null hash_table, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v39);
          goto LABEL_74;
        }
        if (v41)
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_context_endpoint_get_active_instance_count";
          _os_log_impl(&dword_1830D4000, v31, v40, "%{public}s called with null hash_table, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        unsigned int v31 = __nwlog_obj();
        os_log_type_t v44 = type;
        if (os_log_type_enabled(v31, type))
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_context_endpoint_get_active_instance_count";
          _os_log_impl(&dword_1830D4000, v31, v44, "%{public}s called with null hash_table, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_74:
    if (v30) {
      free(v30);
    }

LABEL_77:
    uint64_t v19 = 0;
    goto LABEL_20;
  }
  *(void *)netcore_stats_tcp_report buf = 0;
  *(void *)&buf[8] = buf;
  *(void *)&buf[16] = 0x2020000000;
  uint64_t v49 = 0;
  uint64_t node = nw_hash_table_get_node(v16, (uint64_t)v13, 0);
  if (node)
  {
    BOOL v18 = *(char **)(node + 16);
    v45[0] = MEMORY[0x1E4F143A8];
    v45[1] = 3221225472;
    v45[2] = __nw_context_endpoint_get_active_instance_count_block_invoke;
    v45[3] = &unk_1E523BE48;
    v45[4] = buf;
    nw_hash_table_apply(v18, (uint64_t)v45);
  }
  uint64_t v19 = *(void *)(*(void *)&buf[8] + 24);
  _Block_object_dispose(buf, 8);

LABEL_20:
  return v19;
}

void sub_18327EC98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_connection_get_uuid(void *a1, unsigned __int8 *a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  if (!a2)
  {
    id v4 = __nwlog_obj();
    *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
    uint64_t v21 = "nw_connection_get_uuid";
    id v5 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v18 = 0;
    if (!__nwlog_fault(v5, &type, &v18)) {
      goto LABEL_38;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        uint64_t v21 = "nw_connection_get_uuid";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null out_uuid", buf, 0xCu);
      }
    }
    else if (v18)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
          uint64_t v21 = "nw_connection_get_uuid";
          __int16 v22 = 2082;
          os_log_type_t v23 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null out_uuid, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v5) {
          goto LABEL_4;
        }
LABEL_39:
        free(v5);
        goto LABEL_4;
      }
      if (v12)
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        uint64_t v21 = "nw_connection_get_uuid";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null out_uuid, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v6 = __nwlog_obj();
      os_log_type_t v16 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        uint64_t v21 = "nw_connection_get_uuid";
        _os_log_impl(&dword_1830D4000, v6, v16, "%{public}s called with null out_uuid, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_37:

    goto LABEL_38;
  }
  uuid_clear(a2);
  if (v3)
  {
    *(_OWORD *)a2 = *(_OWORD *)(v3 + 452);
    goto LABEL_4;
  }
  uint64_t v8 = __nwlog_obj();
  *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
  uint64_t v21 = "nw_connection_get_uuid";
  id v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v18 = 0;
  if (!__nwlog_fault(v5, &type, &v18)) {
    goto LABEL_38;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    id v6 = __nwlog_obj();
    os_log_type_t v9 = type;
    if (os_log_type_enabled(v6, type))
    {
      *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
      uint64_t v21 = "nw_connection_get_uuid";
      _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null connection", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (!v18)
  {
    id v6 = __nwlog_obj();
    os_log_type_t v17 = type;
    if (os_log_type_enabled(v6, type))
    {
      *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
      uint64_t v21 = "nw_connection_get_uuid";
      _os_log_impl(&dword_1830D4000, v6, v17, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_37;
  }
  id v13 = (char *)__nw_create_backtrace_string();
  id v6 = __nwlog_obj();
  os_log_type_t v14 = type;
  BOOL v15 = os_log_type_enabled(v6, type);
  if (!v13)
  {
    if (v15)
    {
      *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
      uint64_t v21 = "nw_connection_get_uuid";
      _os_log_impl(&dword_1830D4000, v6, v14, "%{public}s called with null connection, no backtrace", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (v15)
  {
    *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
    uint64_t v21 = "nw_connection_get_uuid";
    __int16 v22 = 2082;
    os_log_type_t v23 = v13;
    _os_log_impl(&dword_1830D4000, v6, v14, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v13);
  if (v5) {
    goto LABEL_39;
  }
LABEL_4:
}

void sub_18327F178(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

nw_path_monitor_t nw_path_monitor_create(void)
{
  uint64_t v0 = nw_parameters_create();
  nw_parameters_set_multipath_service(v0, nw_multipath_service_handover);
  evaluator_for_endpoint_no_evaluate = nw_path_create_evaluator_for_endpoint_no_evaluate(0, v0);

  return evaluator_for_endpoint_no_evaluate;
}

void sub_18327F628(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL33nw_endpoint_flow_attach_protocolsP30NWConcrete_nw_endpoint_handlerP11nw_protocolS2__block_invoke_224(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v169 = *MEMORY[0x1E4F143B8];
  id v7 = a3;
  id v8 = a4;
  int v149 = v7;
  if (nw_protocol_options_is_custom_ip(v8))
  {
    int minimize_logging = nw_endpoint_handler_get_minimize_logging(*(void **)(a1 + 32));
    char logging_disabled = nw_endpoint_handler_get_logging_disabled(*(void **)(a1 + 32));
    uint64_t v147 = v8;
    if (minimize_logging)
    {
      if ((logging_disabled & 1) == 0)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        os_log_type_t v11 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
        {
          id_string = nw_endpoint_handler_get_id_string(*(void **)(a1 + 32));
          os_log_type_t v99 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 32));
          nw_endpoint_t v100 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 32));
          logging_description = nw_endpoint_get_logging_description(v100);
          BOOL v102 = nw_endpoint_handler_state_string(*(void **)(a1 + 32));
          uint64_t v103 = nw_endpoint_handler_mode_string(*(void **)(a1 + 32));
          id v104 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 32));
          *(_DWORD *)netcore_stats_tcp_report buf = 136448002;
          *(void *)&uint8_t buf[4] = "nw_endpoint_flow_attach_protocols_block_invoke";
          __int16 v153 = 2082;
          unsigned int v154 = (void *)id_string;
          __int16 v155 = 2082;
          os_log_type_t v156 = v99;
          __int16 v157 = 2082;
          __int16 v158 = (void *)logging_description;
          __int16 v159 = 2082;
          unsigned int v160 = v102;
          __int16 v161 = 2082;
          id v162 = v103;
          __int16 v163 = 2114;
          id v164 = v104;
          __int16 v165 = 1024;
          LODWORD(v166) = nw_custom_ip_options_get_protocol(v147);
          _os_log_impl(&dword_1830D4000, v11, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Using custom IP protocol %u, not attaching any transport", buf, 0x4Eu);
        }
        goto LABEL_8;
      }
    }
    else if ((logging_disabled & 1) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      os_log_type_t v11 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        BOOL v12 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 32));
        id v13 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 32));
        nw_endpoint_t v14 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 32));
        BOOL v15 = nw_endpoint_get_logging_description(v14);
        os_log_type_t v16 = nw_endpoint_handler_state_string(*(void **)(a1 + 32));
        os_log_type_t v17 = nw_endpoint_handler_mode_string(*(void **)(a1 + 32));
        id v18 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 32));
        *(_DWORD *)netcore_stats_tcp_report buf = 136448002;
        *(void *)&uint8_t buf[4] = "nw_endpoint_flow_attach_protocols_block_invoke";
        __int16 v153 = 2082;
        unsigned int v154 = (void *)v12;
        __int16 v155 = 2082;
        os_log_type_t v156 = v13;
        __int16 v157 = 2082;
        __int16 v158 = (void *)v15;
        __int16 v159 = 2082;
        unsigned int v160 = v16;
        __int16 v161 = 2082;
        id v162 = v17;
        __int16 v163 = 2114;
        id v164 = v18;
        __int16 v165 = 1024;
        LODWORD(v166) = nw_custom_ip_options_get_protocol(v147);
        _os_log_impl(&dword_1830D4000, v11, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Using custom IP protocol %u, not attaching any transport", buf, 0x4Eu);
      }
LABEL_8:

LABEL_114:
      uint64_t v63 = 1;
      id v8 = v147;
      goto LABEL_115;
    }
LABEL_147:
    uint64_t v63 = 1;
    goto LABEL_115;
  }
  int identifier = nw_protocol_definition_get_identifier(v7);
  uint64_t v20 = *(void *)(a1 + 96);
  if (v20) {
    goto LABEL_82;
  }
  int v21 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 64) + 8) + 24);
  __int16 v22 = *(void **)(a1 + 40);
  os_log_type_t v23 = *(void **)(*(void *)(*(void *)(a1 + 72) + 8) + 40);
  uint64_t v24 = *(void **)(a1 + 48);
  id v25 = *(id *)(a1 + 32);
  id v141 = v22;
  id v143 = v23;
  id v145 = v24;
  id v148 = v8;
  int v140 = v25;
  if (!v25)
  {
    uint64_t v105 = __nwlog_obj();
    *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_endpoint_flow_find_protocol_to_join";
    int v45 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v150 = 0;
    if (!__nwlog_fault(v45, &type, &v150)) {
      goto LABEL_78;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v106 = __nwlog_obj();
      os_log_type_t v107 = type;
      if (os_log_type_enabled(v106, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl(&dword_1830D4000, v106, v107, "%{public}s called with null handler", buf, 0xCu);
      }
      goto LABEL_203;
    }
    if (!v150)
    {
      uint64_t v106 = __nwlog_obj();
      os_log_type_t v123 = type;
      if (os_log_type_enabled(v106, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl(&dword_1830D4000, v106, v123, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_203;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    char v46 = __nwlog_obj();
    os_log_type_t v111 = type;
    BOOL v112 = os_log_type_enabled(v46, type);
    if (!backtrace_string)
    {
      if (v112)
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl(&dword_1830D4000, v46, v111, "%{public}s called with null handler, no backtrace", buf, 0xCu);
      }
      goto LABEL_220;
    }
    if (v112)
    {
      *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_endpoint_flow_find_protocol_to_join";
      __int16 v153 = 2082;
      unsigned int v154 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v46, v111, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_187;
  }
  BOOL v26 = (unsigned int *)v25;
  uint64_t v27 = v26[29];

  if (v27 != 2)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v37 = (id)gLogObj;
    if (v27 > 5) {
      BOOL v38 = "unknown-mode";
    }
    else {
      BOOL v38 = off_1E523FB08[v27];
    }
    *(_DWORD *)netcore_stats_tcp_report buf = 136446722;
    *(void *)&uint8_t buf[4] = "nw_endpoint_flow_find_protocol_to_join";
    __int16 v153 = 2082;
    unsigned int v154 = (void *)v38;
    __int16 v155 = 2082;
    os_log_type_t v156 = "flow";
    int v45 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v150 = 0;
    if (__nwlog_fault(v45, &type, &v150))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        char v46 = (id)gLogObj;
        os_log_type_t v47 = type;
        if (os_log_type_enabled(v46, type))
        {
          if (v27 > 5) {
            unsigned int v48 = "unknown-mode";
          }
          else {
            unsigned int v48 = off_1E523FB08[v27];
          }
          *(_DWORD *)netcore_stats_tcp_report buf = 136446722;
          *(void *)&uint8_t buf[4] = "nw_endpoint_flow_find_protocol_to_join";
          __int16 v153 = 2082;
          unsigned int v154 = (void *)v48;
          __int16 v155 = 2082;
          os_log_type_t v156 = "flow";
          _os_log_impl(&dword_1830D4000, v46, v47, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
        }
        goto LABEL_220;
      }
      if (!v150)
      {
        char v46 = __nwlog_obj();
        os_log_type_t v54 = type;
        if (os_log_type_enabled(v46, type))
        {
          if (v27 > 5) {
            os_log_type_t v55 = "unknown-mode";
          }
          else {
            os_log_type_t v55 = off_1E523FB08[v27];
          }
          *(_DWORD *)netcore_stats_tcp_report buf = 136446722;
          *(void *)&uint8_t buf[4] = "nw_endpoint_flow_find_protocol_to_join";
          __int16 v153 = 2082;
          unsigned int v154 = (void *)v55;
          __int16 v155 = 2082;
          os_log_type_t v156 = "flow";
          _os_log_impl(&dword_1830D4000, v46, v54, "%{public}s Handler is in mode %{public}s, expected %{public}s, backtrace limit exceeded", buf, 0x20u);
        }
        goto LABEL_220;
      }
      uint64_t v49 = (char *)__nw_create_backtrace_string();
      uint64_t v50 = __nwlog_obj();
      os_log_type_t v51 = type;
      BOOL v52 = os_log_type_enabled(v50, type);
      if (v49)
      {
        if (v52)
        {
          if (v27 > 5) {
            int v53 = "unknown-mode";
          }
          else {
            int v53 = off_1E523FB08[v27];
          }
          *(_DWORD *)netcore_stats_tcp_report buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_endpoint_flow_find_protocol_to_join";
          __int16 v153 = 2082;
          unsigned int v154 = (void *)v53;
          __int16 v155 = 2082;
          os_log_type_t v156 = "flow";
          __int16 v157 = 2082;
          __int16 v158 = v49;
          _os_log_impl(&dword_1830D4000, v50, v51, "%{public}s Handler is in mode %{public}s, expected %{public}s, dumping backtrace:%{public}s", buf, 0x2Au);
        }

        free(v49);
        if (!v45) {
          goto LABEL_80;
        }
        goto LABEL_79;
      }
      if (v52)
      {
        if (v27 > 5) {
          int v56 = "unknown-mode";
        }
        else {
          int v56 = off_1E523FB08[v27];
        }
        *(_DWORD *)netcore_stats_tcp_report buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_endpoint_flow_find_protocol_to_join";
        __int16 v153 = 2082;
        unsigned int v154 = (void *)v56;
        __int16 v155 = 2082;
        os_log_type_t v156 = "flow";
        _os_log_impl(&dword_1830D4000, v50, v51, "%{public}s Handler is in mode %{public}s, expected %{public}s, no backtrace", buf, 0x20u);
      }
    }
LABEL_78:
    if (!v45)
    {
LABEL_80:
      uint64_t v20 = 0;
      goto LABEL_81;
    }
LABEL_79:
    free(v45);
    goto LABEL_80;
  }
  if (!identifier)
  {
    __int16 v108 = __nwlog_obj();
    *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_endpoint_flow_find_protocol_to_join";
    int v45 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v150 = 0;
    if (!__nwlog_fault(v45, &type, &v150)) {
      goto LABEL_78;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v106 = __nwlog_obj();
      os_log_type_t v109 = type;
      if (os_log_type_enabled(v106, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl(&dword_1830D4000, v106, v109, "%{public}s called with null identifier", buf, 0xCu);
      }
      goto LABEL_203;
    }
    if (!v150)
    {
      uint64_t v106 = __nwlog_obj();
      os_log_type_t v124 = type;
      if (os_log_type_enabled(v106, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl(&dword_1830D4000, v106, v124, "%{public}s called with null identifier, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_203;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    char v46 = __nwlog_obj();
    os_log_type_t v117 = type;
    BOOL v118 = os_log_type_enabled(v46, type);
    if (!backtrace_string)
    {
      if (v118)
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl(&dword_1830D4000, v46, v117, "%{public}s called with null identifier, no backtrace", buf, 0xCu);
      }
      goto LABEL_220;
    }
    if (v118)
    {
      *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_endpoint_flow_find_protocol_to_join";
      __int16 v153 = 2082;
      unsigned int v154 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v46, v117, "%{public}s called with null identifier, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_187:

    free(backtrace_string);
    if (!v45) {
      goto LABEL_80;
    }
    goto LABEL_79;
  }
  if (!v143)
  {
    os_log_type_t v113 = __nwlog_obj();
    *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_endpoint_flow_find_protocol_to_join";
    int v45 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v150 = 0;
    if (!__nwlog_fault(v45, &type, &v150)) {
      goto LABEL_78;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v106 = __nwlog_obj();
      os_log_type_t v114 = type;
      if (os_log_type_enabled(v106, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl(&dword_1830D4000, v106, v114, "%{public}s called with null endpoint", buf, 0xCu);
      }
      goto LABEL_203;
    }
    if (!v150)
    {
      uint64_t v106 = __nwlog_obj();
      os_log_type_t v125 = type;
      if (os_log_type_enabled(v106, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl(&dword_1830D4000, v106, v125, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_203;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    char v46 = __nwlog_obj();
    os_log_type_t v119 = type;
    BOOL v120 = os_log_type_enabled(v46, type);
    if (backtrace_string)
    {
      if (v120)
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_endpoint_flow_find_protocol_to_join";
        __int16 v153 = 2082;
        unsigned int v154 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v46, v119, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_187;
    }
    if (v120)
    {
      *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_endpoint_flow_find_protocol_to_join";
      _os_log_impl(&dword_1830D4000, v46, v119, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
    }
LABEL_220:

    goto LABEL_78;
  }
  if (!v145)
  {
    int v115 = __nwlog_obj();
    *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_endpoint_flow_find_protocol_to_join";
    int v45 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v150 = 0;
    if (!__nwlog_fault(v45, &type, &v150)) {
      goto LABEL_78;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v106 = __nwlog_obj();
      os_log_type_t v116 = type;
      if (os_log_type_enabled(v106, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl(&dword_1830D4000, v106, v116, "%{public}s called with null parameters", buf, 0xCu);
      }
LABEL_203:

      goto LABEL_78;
    }
    if (!v150)
    {
      uint64_t v106 = __nwlog_obj();
      os_log_type_t v126 = type;
      if (os_log_type_enabled(v106, type))
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl(&dword_1830D4000, v106, v126, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_203;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    char v46 = __nwlog_obj();
    os_log_type_t v121 = type;
    BOOL v122 = os_log_type_enabled(v46, type);
    if (backtrace_string)
    {
      if (v122)
      {
        *(_DWORD *)netcore_stats_tcp_report buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_endpoint_flow_find_protocol_to_join";
        __int16 v153 = 2082;
        unsigned int v154 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v46, v121, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_187;
    }
    if (v122)
    {
      *(_DWORD *)netcore_stats_tcp_report buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_endpoint_flow_find_protocol_to_join";
      _os_log_impl(&dword_1830D4000, v46, v121, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
    }
    goto LABEL_220;
  }
  os_unfair_lock_lock(&nw_protocol_registrar_lock);
  os_log_type_t v28 = &g_registration_list;
  do
  {
    os_log_type_t v28 = (uint64_t *)*v28;
    if (!v28)
    {
      os_unfair_lock_unlock(&nw_protocol_registrar_lock);
      goto LABEL_39;
    }
  }
  while (*(void *)identifier != v28[4]
       || *((void *)identifier + 1) != v28[5]
       || *((void *)identifier + 2) != v28[6]
       || *((void *)identifier + 3) != v28[7]
       || *((void *)identifier + 4) != v28[8]);
  uint64_t v33 = v28[13];
  os_unfair_lock_unlock(&nw_protocol_registrar_lock);
  if (!v33)
  {
LABEL_39:
    if (gLogDatapath && (nw_endpoint_handler_get_logging_disabled(v26) & 1) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      uint64_t v39 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG))
      {
        os_log_type_t v40 = nw_endpoint_handler_get_id_string(v26);
        int v138 = nw_endpoint_handler_dry_run_string(v26);
        nw_endpoint_t v41 = nw_endpoint_handler_copy_endpoint(v26);
        int v136 = nw_endpoint_get_logging_description(v41);
        os_log_type_t v42 = nw_endpoint_handler_state_string(v26);
        os_log_type_t v43 = nw_endpoint_handler_mode_string(v26);
        id v44 = nw_endpoint_handler_copy_current_path(v26);
        *(_DWORD *)netcore_stats_tcp_report buf = 136448258;
        *(void *)&uint8_t buf[4] = "nw_endpoint_flow_find_protocol_to_join";
        __int16 v153 = 2082;
        unsigned int v154 = (void *)v40;
        __int16 v155 = 2082;
        os_log_type_t v156 = v138;
        __int16 v157 = 2082;
        __int16 v158 = (void *)v136;
        __int16 v159 = 2082;
        unsigned int v160 = v42;
        __int16 v161 = 2082;
        id v162 = v43;
        __int16 v163 = 2114;
        id v164 = v44;
        __int16 v165 = 2080;
        unsigned int v166 = identifier;
        __int16 v167 = 2048;
        uint64_t v168 = (uint64_t)identifier;
        _os_log_impl(&dword_1830D4000, v39, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] protocol %s (%p) does not have accept function, cannot search for protocol to join", buf, 0x5Cu);
      }
    }
    goto LABEL_80;
  }
  id v34 = v143;
  BOOL v35 = v34;
  while (1)
  {
    uint64_t v20 = nw_protocol_instance_registrar_search_for_instance_to_join((uint64_t)identifier, -1, v141, v35, v34, v145, v21 != 0);
    if (v20) {
      break;
    }
    registered_endpoint = nw_protocol_instance_registrar_copy_next_registered_endpoint(v35, v21 != 0);

    BOOL v35 = registered_endpoint;
    if (!registered_endpoint)
    {
      uint64_t v20 = 0;
      goto LABEL_61;
    }
  }
  if (gLogDatapath && (nw_endpoint_handler_get_logging_disabled(v26) & 1) == 0)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
    }
    os_log_type_t v127 = (id)gconnectionLogObj;
    if (os_log_type_enabled(v127, OS_LOG_TYPE_DEBUG))
    {
      __int16 v139 = nw_endpoint_handler_get_id_string(v26);
      __int16 v137 = nw_endpoint_handler_dry_run_string(v26);
      nw_endpoint_t v128 = nw_endpoint_handler_copy_endpoint(v26);
      int v135 = nw_endpoint_get_logging_description(v128);
      id v129 = nw_endpoint_handler_state_string(v26);
      unsigned int v130 = nw_endpoint_handler_mode_string(v26);
      id v131 = nw_endpoint_handler_copy_current_path(v26);
      BOOL v132 = v131;
      *(void *)&uint8_t buf[4] = "nw_endpoint_flow_find_protocol_to_join";
      int v133 = "invalid";
      int v134 = *(const char **)(v20 + 16);
      *(_DWORD *)netcore_stats_tcp_report buf = 136448258;
      if (v134) {
        int v133 = v134;
      }
      __int16 v153 = 2082;
      unsigned int v154 = (void *)v139;
      __int16 v155 = 2082;
      os_log_type_t v156 = v137;
      __int16 v157 = 2082;
      __int16 v158 = (void *)v135;
      __int16 v159 = 2082;
      unsigned int v160 = v129;
      __int16 v161 = 2082;
      id v162 = v130;
      __int16 v163 = 2114;
      id v164 = v131;
      __int16 v165 = 2080;
      unsigned int v166 = (void *)v133;
      __int16 v167 = 2048;
      uint64_t v168 = v20;
      _os_log_impl(&dword_1830D4000, v127, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] returning protocol to join %s (%p)", buf, 0x5Cu);
    }
  }
LABEL_61:

LABEL_81:
  id v8 = v148;
  id v7 = v149;
  if (!v20)
  {
LABEL_86:
    uint64_t v59 = nw_endpoint_flow_add_one_protocol(*(void **)(a1 + 32), (long long *)identifier, v8, v7, *(void **)(*(void *)(*(void *)(a1 + 72) + 8) + 40), *(void **)(a1 + 48), *(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 24));
    if (!v59)
    {
      uint64_t v63 = 0;
      *(unsigned char *)(*(void *)(*(void *)(a1 + 88) + 8) + 24) = 1;
      goto LABEL_115;
    }
    uint64_t v147 = v8;
    if (nw_protocol_definition_get_message_is_stream(v7))
    {
      uint64_t v60 = *(void *)(a1 + 56);
      if (!*(void *)(v60 + 768))
      {
        objc_storeStrong((id *)(v60 + 768), a3);
        if (*(_UNKNOWN **)(v59 + 40) == &nw_protocol_ref_counted_handle)
        {
          uint64_t v79 = *(void *)(v59 + 88);
          if (v79) {
            *(void *)(v59 + 88) = v79 + 1;
          }
          *(void *)netcore_stats_tcp_report buf = v59;
          buf[8] |= 1u;
          char v64 = 1;
        }
        else
        {
          char v64 = 0;
          *(void *)netcore_stats_tcp_report buf = v59;
          buf[8] &= ~1u;
        }
        uint64_t v80 = *(void *)(a1 + 56);
        char v81 = *(unsigned char *)(v80 + 784);
        if (v81)
        {
          nw::release_if_needed<nw_protocol *>((uint64_t *)(v80 + 776));
          char v81 = *(unsigned char *)(v80 + 784);
        }
        *(void *)(v80 + 776) = v59;
        *(unsigned char *)(v80 + 784) = v64 | v81 & 0xFE;
        uint64_t v82 = *(void *)(v59 + 24);
        if (v82)
        {
          BOOL v83 = *(uint64_t (**)(uint64_t, uint64_t, void))(v82 + 232);
          if (v83)
          {
            uint64_t v84 = *(void *)(a1 + 56) + 440;
            int v85 = *(void **)(v59 + 40);
            if (v85 == &nw_protocol_ref_counted_handle)
            {
              uint64_t v87 = *(void *)(v59 + 88);
              if (v87) {
                *(void *)(v59 + 88) = v87 + 1;
              }
              *(void *)netcore_stats_tcp_report buf = v59;
              char v86 = buf[8] | 1;
            }
            else
            {
              *(void *)netcore_stats_tcp_report buf = v59;
              char v86 = buf[8] & 0xFE;
            }
            buf[8] = v86;
            char v88 = v83(v59, v84, 0);
            if (v85 == &nw_protocol_ref_counted_handle) {
              nw::release_if_needed<nw_protocol *>((uint64_t *)buf);
            }
            if ((v88 & 1) == 0 && (nw_endpoint_handler_get_logging_disabled(*(void **)(a1 + 32)) & 1) == 0)
            {
              if (__nwlog_connection_log::onceToken != -1) {
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
              }
              os_log_type_t v89 = (id)gconnectionLogObj;
              if (os_log_type_enabled(v89, OS_LOG_TYPE_ERROR))
              {
                id v90 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 32));
                os_log_type_t v144 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 32));
                nw_endpoint_t v146 = v90;
                nw_endpoint_t v142 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 32));
                size_t v91 = nw_endpoint_get_logging_description(v142);
                BOOL v92 = nw_endpoint_handler_state_string(*(void **)(a1 + 32));
                ssize_t v93 = nw_endpoint_handler_mode_string(*(void **)(a1 + 32));
                id v94 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 32));
                long long v95 = v94;
                uint64_t v96 = "invalid";
                BOOL v97 = *(const char **)(*(void *)(a1 + 56) + 392);
                if (!v97) {
                  BOOL v97 = "invalid";
                }
                if (*(void *)(v59 + 16)) {
                  uint64_t v96 = *(const char **)(v59 + 16);
                }
                *(_DWORD *)netcore_stats_tcp_report buf = 136448258;
                *(void *)&uint8_t buf[4] = "nw_endpoint_flow_attach_protocols_block_invoke";
                __int16 v153 = 2082;
                unsigned int v154 = (void *)v146;
                __int16 v155 = 2082;
                os_log_type_t v156 = v144;
                __int16 v157 = 2082;
                __int16 v158 = (void *)v91;
                __int16 v159 = 2082;
                unsigned int v160 = v92;
                __int16 v161 = 2082;
                id v162 = v93;
                __int16 v163 = 2114;
                id v164 = v94;
                __int16 v165 = 2082;
                unsigned int v166 = (void *)v97;
                __int16 v167 = 2082;
                uint64_t v168 = (uint64_t)v96;
                _os_log_impl(&dword_1830D4000, v89, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Failed to add protocol %{public}s as a listener to %{public}s", buf, 0x5Cu);
              }
              id v8 = v147;
            }
          }
        }
      }
    }
    os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 56) + 880));
    uint64_t v61 = *(void *)(a1 + 56);
    if (!*(void *)(v61 + 720))
    {
      if (*(_UNKNOWN **)(v59 + 40) == &nw_protocol_ref_counted_handle)
      {
        uint64_t v67 = *(void *)(v59 + 88);
        if (v67)
        {
          *(void *)(v59 + 88) = v67 + 1;
          uint64_t v61 = *(void *)(a1 + 56);
        }
        *(void *)netcore_stats_tcp_report buf = v59;
        char v62 = buf[8] | 1;
      }
      else
      {
        *(void *)netcore_stats_tcp_report buf = v59;
        char v62 = buf[8] & 0xFE;
      }
      buf[8] = v62;
      char v68 = *(unsigned char *)(v61 + 728);
      uint64_t v69 = v59;
      if (v68)
      {
        nw::release_if_needed<nw_protocol *>((uint64_t *)(v61 + 720));
        char v68 = *(unsigned char *)(v61 + 728);
        uint64_t v69 = *(void *)buf;
        char v62 = buf[8];
      }
      *(void *)(v61 + 720) = v69;
      *(unsigned char *)(v61 + 728) = v68 & 0xFE | v62 & 1;
      uint64_t v61 = *(void *)(a1 + 56);
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(v61 + 880));
    *(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 24) = v59;
    if ((nw_endpoint_handler_get_logging_disabled(*(void **)(a1 + 32)) & 1) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      os_log_type_t v70 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v70, OS_LOG_TYPE_DEBUG))
      {
        BOOL v71 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 32));
        uint64_t v72 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 32));
        nw_endpoint_t v73 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 32));
        id v74 = nw_endpoint_get_logging_description(v73);
        os_log_type_t v75 = nw_endpoint_handler_state_string(*(void **)(a1 + 32));
        BOOL v76 = nw_endpoint_handler_mode_string(*(void **)(a1 + 32));
        id v77 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 32));
        *(_DWORD *)netcore_stats_tcp_report buf = 136448002;
        *(void *)&uint8_t buf[4] = "nw_endpoint_flow_attach_protocols_block_invoke";
        __int16 v153 = 2082;
        unsigned int v154 = (void *)v71;
        __int16 v155 = 2082;
        os_log_type_t v156 = v72;
        __int16 v157 = 2082;
        __int16 v158 = (void *)v74;
        __int16 v159 = 2082;
        unsigned int v160 = v75;
        __int16 v161 = 2082;
        id v162 = v76;
        __int16 v163 = 2114;
        id v164 = v77;
        __int16 v165 = 2082;
        unsigned int v166 = identifier;
        _os_log_impl(&dword_1830D4000, v70, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Attached transport protocol: %{public}s", buf, 0x52u);
      }
      goto LABEL_114;
    }
    goto LABEL_147;
  }
LABEL_82:
  if (!nw_endpoint_flow_join_protocol(*(void **)(a1 + 32), *(void **)(a1 + 48), v8, v7, identifier, -1, v20, *(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 24), *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24), (unsigned char *)(*(void *)(*(void *)(a1 + 88) + 8) + 24)))goto LABEL_86; {
  *(void *)(*(void *)(a1 + 56) + 736) = *(void *)(*(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 24)
  }
                                                        + 32);
  *(unsigned char *)(*(void *)(a1 + 56) + 33) |= 1u;
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 56) + 880));
  uint64_t v57 = *(void *)(a1 + 56);
  if (!*(void *)(v57 + 720))
  {
    if (*(_UNKNOWN **)(v20 + 40) == &nw_protocol_ref_counted_handle)
    {
      uint64_t v65 = *(void *)(v20 + 88);
      if (v65)
      {
        *(void *)(v20 + 88) = v65 + 1;
        uint64_t v57 = *(void *)(a1 + 56);
      }
      *(void *)netcore_stats_tcp_report buf = v20;
      char v58 = buf[8] | 1;
    }
    else
    {
      *(void *)netcore_stats_tcp_report buf = v20;
      char v58 = buf[8] & 0xFE;
    }
    buf[8] = v58;
    char v66 = *(unsigned char *)(v57 + 728);
    if (v66)
    {
      nw::release_if_needed<nw_protocol *>((uint64_t *)(v57 + 720));
      char v66 = *(unsigned char *)(v57 + 728);
      uint64_t v20 = *(void *)buf;
      char v58 = buf[8];
    }
    *(void *)(v57 + 720) = v20;
    *(unsigned char *)(v57 + 728) = v66 & 0xFE | v58 & 1;
    uint64_t v57 = *(void *)(a1 + 56);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(v57 + 880));
  uint64_t v63 = 0;
LABEL_115:

  return v63;
}