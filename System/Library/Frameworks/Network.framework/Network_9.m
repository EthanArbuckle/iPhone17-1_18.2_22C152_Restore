void sub_1835F3CD0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

const char *networkd_privileged_type_to_string(int a1)
{
  if ((a1 - 2) > 0x14) {
    return "unknown";
  }
  else {
    return off_1E523A6F0[a1 - 2];
  }
}

void networkd_privileged_send_async_inner(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v10 = a2;
  id v7 = a3;
  id v8 = a4;
  id v9 = networkd_privileged_copy_connection();
  if (v9) {
    networkd_privileged_send_async_inner_rec(a1, v9, v10, v7, v8, 1u);
  }
}

void sub_1835F3DD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void networkd_privileged_send_async_inner_rec(uint64_t a1, void *a2, void *a3, void *a4, void *a5, unsigned int a6)
{
  id v11 = a2;
  id v12 = a3;
  id v13 = a4;
  id v14 = a5;
  v15 = v14;
  if (a6 >= 6)
  {
    (*((void (**)(id, void))v14 + 2))(v14, MEMORY[0x1E4F14520]);
  }
  else
  {
    v16[0] = MEMORY[0x1E4F143A8];
    v16[1] = 3221225472;
    v16[2] = ___ZL40networkd_privileged_send_async_inner_recPKcPU24objcproto13OS_xpc_object8NSObjectS3_PU28objcproto17OS_dispatch_queueS1_U13block_pointerFvS3_Ej_block_invoke;
    v16[3] = &unk_1E523A6D0;
    id v20 = v14;
    uint64_t v21 = a1;
    unsigned int v22 = a6;
    v17 = (_xpc_connection_s *)v11;
    id v18 = v12;
    v19 = v13;
    xpc_connection_send_message_with_reply(v17, v18, v19, v16);
  }
}

void sub_1835F3F38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL40networkd_privileged_send_async_inner_recPKcPU24objcproto13OS_xpc_object8NSObjectS3_PU28objcproto17OS_dispatch_queueS1_U13block_pointerFvS3_Ej_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (v3 == (id)MEMORY[0x1E4F14520])
  {
    v4 = __nwlog_obj();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = *(void *)(a1 + 64);
      int v6 = *(_DWORD *)(a1 + 72);
      int v7 = 136446722;
      id v8 = "networkd_privileged_send_async_inner_rec_block_invoke";
      __int16 v9 = 2082;
      uint64_t v10 = v5;
      __int16 v11 = 1024;
      int v12 = v6;
      _os_log_impl(&dword_1830D4000, v4, OS_LOG_TYPE_ERROR, "%{public}s %{public}s received XPC_ERROR_CONNECTION_INTERRUPTED, retrying (%u)", (uint8_t *)&v7, 0x1Cu);
    }

    networkd_privileged_send_async_inner_rec(*(void *)(a1 + 64), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), (*(_DWORD *)(a1 + 72) + 1));
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }
}

void sub_1835F409C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __networkd_privileged_check_mobile_asset_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v80 = *MEMORY[0x1E4F143B8];
  id v2 = a2;
  id v3 = v2;
  if (!v2)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v10 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v75 = "networkd_privileged_check_mobile_asset_block_invoke";
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v72 = 0;
    if (!__nwlog_fault(v5, &type, &v72)) {
      goto LABEL_74;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      __int16 v11 = (id)gLogObj;
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v75 = "networkd_privileged_check_mobile_asset_block_invoke";
        _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s received NULL response", buf, 0xCu);
      }
      goto LABEL_73;
    }
    if (!v72)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      __int16 v11 = (id)gLogObj;
      os_log_type_t v29 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v75 = "networkd_privileged_check_mobile_asset_block_invoke";
        _os_log_impl(&dword_1830D4000, v11, v29, "%{public}s received NULL response, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_73;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    __int16 v11 = (id)gLogObj;
    os_log_type_t v20 = type;
    BOOL v21 = os_log_type_enabled(v11, type);
    if (!backtrace_string)
    {
      if (v21)
      {
        *(_DWORD *)buf = 136446210;
        v75 = "networkd_privileged_check_mobile_asset_block_invoke";
        _os_log_impl(&dword_1830D4000, v11, v20, "%{public}s received NULL response, no backtrace", buf, 0xCu);
      }
      goto LABEL_73;
    }
    if (v21)
    {
      *(_DWORD *)buf = 136446466;
      v75 = "networkd_privileged_check_mobile_asset_block_invoke";
      __int16 v76 = 2082;
      *(void *)v77 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v11, v20, "%{public}s received NULL response, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_25;
  }
  Class Class = object_getClass(v2);
  if (Class == (Class)MEMORY[0x1E4F14590])
  {
    uint64_t v13 = xpc_dictionary_get_value(v3, (const char *)networkd_privileged_key_result);
    id v14 = v13;
    if (!v13)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v27 = (id)gLogObj;
      *(_DWORD *)buf = 136446210;
      v75 = "networkd_privileged_check_mobile_asset_block_invoke";
      v16 = (const char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v72 = 0;
      if (!__nwlog_fault(v16, &type, &v72)) {
        goto LABEL_132;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v17 = (id)gLogObj;
        os_log_type_t v28 = type;
        if (os_log_type_enabled(v17, type))
        {
          *(_DWORD *)buf = 136446210;
          v75 = "networkd_privileged_check_mobile_asset_block_invoke";
          _os_log_impl(&dword_1830D4000, v17, v28, "%{public}s received response without result code", buf, 0xCu);
        }
        goto LABEL_131;
      }
      if (!v72)
      {
        v17 = __nwlog_obj();
        os_log_type_t v57 = type;
        if (os_log_type_enabled(v17, type))
        {
          *(_DWORD *)buf = 136446210;
          v75 = "networkd_privileged_check_mobile_asset_block_invoke";
          _os_log_impl(&dword_1830D4000, v17, v57, "%{public}s received response without result code, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_131;
      }
      v39 = (char *)__nw_create_backtrace_string();
      v17 = __nwlog_obj();
      os_log_type_t v42 = type;
      BOOL v43 = os_log_type_enabled(v17, type);
      if (!v39)
      {
        if (v43)
        {
          *(_DWORD *)buf = 136446210;
          v75 = "networkd_privileged_check_mobile_asset_block_invoke";
          _os_log_impl(&dword_1830D4000, v17, v42, "%{public}s received response without result code, no backtrace", buf, 0xCu);
        }
        goto LABEL_131;
      }
      if (v43)
      {
        *(_DWORD *)buf = 136446466;
        v75 = "networkd_privileged_check_mobile_asset_block_invoke";
        __int16 v76 = 2082;
        *(void *)v77 = v39;
        _os_log_impl(&dword_1830D4000, v17, v42, "%{public}s received response without result code, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_80;
    }
    if (object_getClass(v13) != (Class)MEMORY[0x1E4F145C0])
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v15 = (id)gLogObj;
      *(_DWORD *)buf = 136446210;
      v75 = "networkd_privileged_check_mobile_asset_block_invoke";
      v16 = (const char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v72 = 0;
      if (!__nwlog_fault(v16, &type, &v72)) {
        goto LABEL_132;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v17 = (id)gLogObj;
        os_log_type_t v18 = type;
        if (os_log_type_enabled(v17, type))
        {
          *(_DWORD *)buf = 136446210;
          v75 = "networkd_privileged_check_mobile_asset_block_invoke";
          _os_log_impl(&dword_1830D4000, v17, v18, "%{public}s received invalid result type", buf, 0xCu);
        }
LABEL_131:

LABEL_132:
        if (!v16)
        {
LABEL_135:

          goto LABEL_136;
        }
        goto LABEL_133;
      }
      if (!v72)
      {
        v17 = __nwlog_obj();
        os_log_type_t v56 = type;
        if (os_log_type_enabled(v17, type))
        {
          *(_DWORD *)buf = 136446210;
          v75 = "networkd_privileged_check_mobile_asset_block_invoke";
          _os_log_impl(&dword_1830D4000, v17, v56, "%{public}s received invalid result type, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_131;
      }
      v39 = (char *)__nw_create_backtrace_string();
      v17 = __nwlog_obj();
      os_log_type_t v40 = type;
      BOOL v41 = os_log_type_enabled(v17, type);
      if (!v39)
      {
        if (v41)
        {
          *(_DWORD *)buf = 136446210;
          v75 = "networkd_privileged_check_mobile_asset_block_invoke";
          _os_log_impl(&dword_1830D4000, v17, v40, "%{public}s received invalid result type, no backtrace", buf, 0xCu);
        }
        goto LABEL_131;
      }
      if (v41)
      {
        *(_DWORD *)buf = 136446466;
        v75 = "networkd_privileged_check_mobile_asset_block_invoke";
        __int16 v76 = 2082;
        *(void *)v77 = v39;
        _os_log_impl(&dword_1830D4000, v17, v40, "%{public}s received invalid result type, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_80:

      free(v39);
      if (!v16) {
        goto LABEL_135;
      }
LABEL_133:
      v61 = (char *)v16;
LABEL_134:
      free(v61);
      goto LABEL_135;
    }
    unint64_t value = xpc_int64_get_value(v14);
    uint64_t v33 = value;
    if (!value)
    {

      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v44 = (id)gLogObj;
      if (os_log_type_enabled(v44, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446210;
        v75 = "networkd_privileged_check_mobile_asset_block_invoke";
        _os_log_impl(&dword_1830D4000, v44, OS_LOG_TYPE_DEBUG, "%{public}s Successfully checked mobile asset", buf, 0xCu);
      }
      goto LABEL_84;
    }
    if (!(value >> 31))
    {
      v34 = __nwlog_obj();
      *(_DWORD *)buf = 136446466;
      v75 = "networkd_privileged_check_mobile_asset_block_invoke";
      __int16 v76 = 1024;
      *(_DWORD *)v77 = v33;
      v35 = (const char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v72 = 0;
      if (__nwlog_fault(v35, &type, &v72))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          v36 = __nwlog_obj();
          os_log_type_t v37 = type;
          if (os_log_type_enabled(v36, type))
          {
            *(_DWORD *)buf = 136446466;
            v75 = "networkd_privileged_check_mobile_asset_block_invoke";
            __int16 v76 = 1024;
            *(_DWORD *)v77 = v33;
            _os_log_impl(&dword_1830D4000, v36, v37, "%{public}s received failure result code %{darwin.errno}d", buf, 0x12u);
          }
        }
        else if (v72)
        {
          v62 = (char *)__nw_create_backtrace_string();
          v36 = __nwlog_obj();
          os_log_type_t v63 = type;
          BOOL v64 = os_log_type_enabled(v36, type);
          if (v62)
          {
            if (v64)
            {
              *(_DWORD *)buf = 136446722;
              v75 = "networkd_privileged_check_mobile_asset_block_invoke";
              __int16 v76 = 1024;
              *(_DWORD *)v77 = v33;
              *(_WORD *)&v77[4] = 2082;
              *(void *)&v77[6] = v62;
              _os_log_impl(&dword_1830D4000, v36, v63, "%{public}s received failure result code %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x1Cu);
            }

            free(v62);
            if (!v35) {
              goto LABEL_135;
            }
LABEL_176:
            v61 = (char *)v35;
            goto LABEL_134;
          }
          if (v64)
          {
            *(_DWORD *)buf = 136446466;
            v75 = "networkd_privileged_check_mobile_asset_block_invoke";
            __int16 v76 = 1024;
            *(_DWORD *)v77 = v33;
            _os_log_impl(&dword_1830D4000, v36, v63, "%{public}s received failure result code %{darwin.errno}d, no backtrace", buf, 0x12u);
          }
        }
        else
        {
          v36 = __nwlog_obj();
          os_log_type_t v70 = type;
          if (os_log_type_enabled(v36, type))
          {
            *(_DWORD *)buf = 136446466;
            v75 = "networkd_privileged_check_mobile_asset_block_invoke";
            __int16 v76 = 1024;
            *(_DWORD *)v77 = v33;
            _os_log_impl(&dword_1830D4000, v36, v70, "%{public}s received failure result code %{darwin.errno}d, backtrace limit exceeded", buf, 0x12u);
          }
        }
      }
LABEL_175:
      if (!v35) {
        goto LABEL_135;
      }
      goto LABEL_176;
    }
    v52 = __nwlog_obj();
    v53 = networkd_privileged_result_to_string(v33);
    *(_DWORD *)buf = 136446722;
    v75 = "networkd_privileged_check_mobile_asset_block_invoke";
    __int16 v76 = 2048;
    *(void *)v77 = v33;
    *(_WORD *)&v77[8] = 2082;
    *(void *)&v77[10] = v53;
    v35 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v72 = 0;
    if (!__nwlog_fault(v35, &type, &v72)) {
      goto LABEL_175;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      v54 = __nwlog_obj();
      os_log_type_t v55 = type;
      if (os_log_type_enabled(v54, type))
      {
        *(_DWORD *)buf = 136446722;
        v75 = "networkd_privileged_check_mobile_asset_block_invoke";
        __int16 v76 = 2048;
        *(void *)v77 = v33;
        *(_WORD *)&v77[8] = 2082;
        *(void *)&v77[10] = v53;
        _os_log_impl(&dword_1830D4000, v54, v55, "%{public}s received internal failure result code: [%lld] %{public}s", buf, 0x20u);
      }
    }
    else if (v72)
    {
      v65 = (char *)__nw_create_backtrace_string();
      v54 = __nwlog_obj();
      os_log_type_t v66 = type;
      BOOL v67 = os_log_type_enabled(v54, type);
      if (v65)
      {
        if (v67)
        {
          *(_DWORD *)buf = 136446978;
          v75 = "networkd_privileged_check_mobile_asset_block_invoke";
          __int16 v76 = 2048;
          *(void *)v77 = v33;
          *(_WORD *)&v77[8] = 2082;
          *(void *)&v77[10] = v53;
          __int16 v78 = 2082;
          v79 = v65;
          _os_log_impl(&dword_1830D4000, v54, v66, "%{public}s received internal failure result code: [%lld] %{public}s, dumping backtrace:%{public}s", buf, 0x2Au);
        }

        free(v65);
        goto LABEL_175;
      }
      if (v67)
      {
        *(_DWORD *)buf = 136446722;
        v75 = "networkd_privileged_check_mobile_asset_block_invoke";
        __int16 v76 = 2048;
        *(void *)v77 = v33;
        *(_WORD *)&v77[8] = 2082;
        *(void *)&v77[10] = v53;
        _os_log_impl(&dword_1830D4000, v54, v66, "%{public}s received internal failure result code: [%lld] %{public}s, no backtrace", buf, 0x20u);
      }
    }
    else
    {
      v54 = __nwlog_obj();
      os_log_type_t v71 = type;
      if (os_log_type_enabled(v54, type))
      {
        *(_DWORD *)buf = 136446722;
        v75 = "networkd_privileged_check_mobile_asset_block_invoke";
        __int16 v76 = 2048;
        *(void *)v77 = v33;
        *(_WORD *)&v77[8] = 2082;
        *(void *)&v77[10] = v53;
        _os_log_impl(&dword_1830D4000, v54, v71, "%{public}s received internal failure result code: [%lld] %{public}s, backtrace limit exceeded", buf, 0x20u);
      }
    }

    goto LABEL_175;
  }
  if (Class == (Class)MEMORY[0x1E4F145A8])
  {
    if (v3 == (void *)MEMORY[0x1E4F14520])
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v30 = (id)gLogObj;
      *(_DWORD *)buf = 136446210;
      v75 = "networkd_privileged_check_mobile_asset_block_invoke";
      uint64_t v5 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v72 = 0;
      if (!__nwlog_fault(v5, &type, &v72)) {
        goto LABEL_74;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        __int16 v11 = (id)gLogObj;
        os_log_type_t v31 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          v75 = "networkd_privileged_check_mobile_asset_block_invoke";
          _os_log_impl(&dword_1830D4000, v11, v31, "%{public}s received XPC_ERROR_CONNECTION_INTERRUPTED", buf, 0xCu);
        }
        goto LABEL_73;
      }
      if (!v72)
      {
        __int16 v11 = __nwlog_obj();
        os_log_type_t v60 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          v75 = "networkd_privileged_check_mobile_asset_block_invoke";
          _os_log_impl(&dword_1830D4000, v11, v60, "%{public}s received XPC_ERROR_CONNECTION_INTERRUPTED, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_73;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __int16 v11 = __nwlog_obj();
      os_log_type_t v45 = type;
      BOOL v46 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v46)
        {
          *(_DWORD *)buf = 136446210;
          v75 = "networkd_privileged_check_mobile_asset_block_invoke";
          _os_log_impl(&dword_1830D4000, v11, v45, "%{public}s received XPC_ERROR_CONNECTION_INTERRUPTED, no backtrace", buf, 0xCu);
        }
        goto LABEL_73;
      }
      if (v46)
      {
        *(_DWORD *)buf = 136446466;
        v75 = "networkd_privileged_check_mobile_asset_block_invoke";
        __int16 v76 = 2082;
        *(void *)v77 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v11, v45, "%{public}s received XPC_ERROR_CONNECTION_INTERRUPTED, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_25;
    }
    if (v3 != (void *)MEMORY[0x1E4F14528])
    {
      if (v3 != (void *)MEMORY[0x1E4F14550])
      {
        uint64_t v5 = (char *)MEMORY[0x185319370](v3);
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v22 = (id)gLogObj;
        *(_DWORD *)buf = 136446466;
        v75 = "networkd_privileged_check_mobile_asset_block_invoke";
        __int16 v76 = 2082;
        *(void *)v77 = v5;
        int v7 = (char *)_os_log_send_and_compose_impl();

        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v72 = 0;
        if (!__nwlog_fault(v7, &type, &v72)) {
          goto LABEL_64;
        }
        if (type == OS_LOG_TYPE_FAULT)
        {
          id v8 = __nwlog_obj();
          os_log_type_t v23 = type;
          if (os_log_type_enabled(v8, type))
          {
            *(_DWORD *)buf = 136446466;
            v75 = "networkd_privileged_check_mobile_asset_block_invoke";
            __int16 v76 = 2082;
            *(void *)v77 = v5;
            _os_log_impl(&dword_1830D4000, v8, v23, "%{public}s received returned unknown XPC error %{public}s", buf, 0x16u);
          }
          goto LABEL_63;
        }
        if (!v72)
        {
          id v8 = __nwlog_obj();
          os_log_type_t v68 = type;
          if (os_log_type_enabled(v8, type))
          {
            *(_DWORD *)buf = 136446466;
            v75 = "networkd_privileged_check_mobile_asset_block_invoke";
            __int16 v76 = 2082;
            *(void *)v77 = v5;
            _os_log_impl(&dword_1830D4000, v8, v68, "%{public}s received returned unknown XPC error %{public}s, backtrace limit exceeded", buf, 0x16u);
          }
          goto LABEL_63;
        }
        v49 = (char *)__nw_create_backtrace_string();
        id v8 = __nwlog_obj();
        os_log_type_t v50 = type;
        BOOL v51 = os_log_type_enabled(v8, type);
        if (!v49)
        {
          if (v51)
          {
            *(_DWORD *)buf = 136446466;
            v75 = "networkd_privileged_check_mobile_asset_block_invoke";
            __int16 v76 = 2082;
            *(void *)v77 = v5;
            _os_log_impl(&dword_1830D4000, v8, v50, "%{public}s received returned unknown XPC error %{public}s, no backtrace", buf, 0x16u);
          }
          goto LABEL_63;
        }
        if (v51)
        {
          *(_DWORD *)buf = 136446722;
          v75 = "networkd_privileged_check_mobile_asset_block_invoke";
          __int16 v76 = 2082;
          *(void *)v77 = v5;
          *(_WORD *)&v77[8] = 2082;
          *(void *)&v77[10] = v49;
          _os_log_impl(&dword_1830D4000, v8, v50, "%{public}s received returned unknown XPC error %{public}s, dumping backtrace:%{public}s", buf, 0x20u);
        }

        free(v49);
        if (!v7) {
          goto LABEL_74;
        }
LABEL_65:
        free(v7);
        goto LABEL_74;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v47 = (id)gLogObj;
      *(_DWORD *)buf = 136446210;
      v75 = "networkd_privileged_check_mobile_asset_block_invoke";
      uint64_t v5 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v72 = 0;
      if (!__nwlog_fault(v5, &type, &v72)) {
        goto LABEL_74;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        __int16 v11 = __nwlog_obj();
        os_log_type_t v48 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          v75 = "networkd_privileged_check_mobile_asset_block_invoke";
          _os_log_impl(&dword_1830D4000, v11, v48, "%{public}s received XPC_ERROR_TERMINATION_IMMINENT", buf, 0xCu);
        }
LABEL_73:

        goto LABEL_74;
      }
      if (!v72)
      {
        __int16 v11 = __nwlog_obj();
        os_log_type_t v69 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          v75 = "networkd_privileged_check_mobile_asset_block_invoke";
          _os_log_impl(&dword_1830D4000, v11, v69, "%{public}s received XPC_ERROR_TERMINATION_IMMINENT, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_73;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __int16 v11 = __nwlog_obj();
      os_log_type_t v58 = type;
      BOOL v59 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v59)
        {
          *(_DWORD *)buf = 136446210;
          v75 = "networkd_privileged_check_mobile_asset_block_invoke";
          _os_log_impl(&dword_1830D4000, v11, v58, "%{public}s received XPC_ERROR_TERMINATION_IMMINENT, no backtrace", buf, 0xCu);
        }
        goto LABEL_73;
      }
      if (v59)
      {
        *(_DWORD *)buf = 136446466;
        v75 = "networkd_privileged_check_mobile_asset_block_invoke";
        __int16 v76 = 2082;
        *(void *)v77 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v11, v58, "%{public}s received XPC_ERROR_TERMINATION_IMMINENT, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_25:

      free(backtrace_string);
      if (!v5) {
        goto LABEL_136;
      }
      goto LABEL_75;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v44 = (id)gLogObj;
    if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      v75 = "networkd_privileged_check_mobile_asset_block_invoke";
      _os_log_impl(&dword_1830D4000, v44, OS_LOG_TYPE_ERROR, "%{public}s received XPC_ERROR_CONNECTION_INVALID", buf, 0xCu);
    }
LABEL_84:

    goto LABEL_136;
  }
  uint64_t v5 = (char *)MEMORY[0x185319370](v3);
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v6 = (id)gLogObj;
  *(_DWORD *)buf = 136446466;
  v75 = "networkd_privileged_check_mobile_asset_block_invoke";
  __int16 v76 = 2082;
  *(void *)v77 = v5;
  int v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v72 = 0;
  if (!__nwlog_fault(v7, &type, &v72)) {
    goto LABEL_64;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v8 = (id)gLogObj;
    os_log_type_t v9 = type;
    if (os_log_type_enabled(v8, type))
    {
      *(_DWORD *)buf = 136446466;
      v75 = "networkd_privileged_check_mobile_asset_block_invoke";
      __int16 v76 = 2082;
      *(void *)v77 = v5;
      _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s received unknown type XPC %{public}s", buf, 0x16u);
    }
LABEL_63:

LABEL_64:
    if (!v7) {
      goto LABEL_74;
    }
    goto LABEL_65;
  }
  if (!v72)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v8 = (id)gLogObj;
    os_log_type_t v38 = type;
    if (os_log_type_enabled(v8, type))
    {
      *(_DWORD *)buf = 136446466;
      v75 = "networkd_privileged_check_mobile_asset_block_invoke";
      __int16 v76 = 2082;
      *(void *)v77 = v5;
      _os_log_impl(&dword_1830D4000, v8, v38, "%{public}s received unknown type XPC %{public}s, backtrace limit exceeded", buf, 0x16u);
    }
    goto LABEL_63;
  }
  v24 = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v8 = (id)gLogObj;
  os_log_type_t v25 = type;
  BOOL v26 = os_log_type_enabled(v8, type);
  if (!v24)
  {
    if (v26)
    {
      *(_DWORD *)buf = 136446466;
      v75 = "networkd_privileged_check_mobile_asset_block_invoke";
      __int16 v76 = 2082;
      *(void *)v77 = v5;
      _os_log_impl(&dword_1830D4000, v8, v25, "%{public}s received unknown type XPC %{public}s, no backtrace", buf, 0x16u);
    }
    goto LABEL_63;
  }
  if (v26)
  {
    *(_DWORD *)buf = 136446722;
    v75 = "networkd_privileged_check_mobile_asset_block_invoke";
    __int16 v76 = 2082;
    *(void *)v77 = v5;
    *(_WORD *)&v77[8] = 2082;
    *(void *)&v77[10] = v24;
    _os_log_impl(&dword_1830D4000, v8, v25, "%{public}s received unknown type XPC %{public}s, dumping backtrace:%{public}s", buf, 0x20u);
  }

  free(v24);
  if (v7) {
    goto LABEL_65;
  }
LABEL_74:
  if (v5) {
LABEL_75:
  }
    free(v5);
LABEL_136:
}

void sub_1835F5840(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __networkd_privileged_run_probes_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v80 = *MEMORY[0x1E4F143B8];
  id v2 = a2;
  id v3 = v2;
  if (!v2)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v10 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v75 = "networkd_privileged_run_probes_block_invoke";
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v72 = 0;
    if (!__nwlog_fault(v5, &type, &v72)) {
      goto LABEL_74;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      __int16 v11 = (id)gLogObj;
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v75 = "networkd_privileged_run_probes_block_invoke";
        _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s received NULL response", buf, 0xCu);
      }
      goto LABEL_73;
    }
    if (!v72)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      __int16 v11 = (id)gLogObj;
      os_log_type_t v29 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v75 = "networkd_privileged_run_probes_block_invoke";
        _os_log_impl(&dword_1830D4000, v11, v29, "%{public}s received NULL response, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_73;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    __int16 v11 = (id)gLogObj;
    os_log_type_t v20 = type;
    BOOL v21 = os_log_type_enabled(v11, type);
    if (!backtrace_string)
    {
      if (v21)
      {
        *(_DWORD *)buf = 136446210;
        v75 = "networkd_privileged_run_probes_block_invoke";
        _os_log_impl(&dword_1830D4000, v11, v20, "%{public}s received NULL response, no backtrace", buf, 0xCu);
      }
      goto LABEL_73;
    }
    if (v21)
    {
      *(_DWORD *)buf = 136446466;
      v75 = "networkd_privileged_run_probes_block_invoke";
      __int16 v76 = 2082;
      *(void *)v77 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v11, v20, "%{public}s received NULL response, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_25;
  }
  Class Class = object_getClass(v2);
  if (Class == (Class)MEMORY[0x1E4F14590])
  {
    uint64_t v13 = xpc_dictionary_get_value(v3, (const char *)networkd_privileged_key_result);
    id v14 = v13;
    if (!v13)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v27 = (id)gLogObj;
      *(_DWORD *)buf = 136446210;
      v75 = "networkd_privileged_run_probes_block_invoke";
      v16 = (const char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v72 = 0;
      if (!__nwlog_fault(v16, &type, &v72)) {
        goto LABEL_132;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v17 = (id)gLogObj;
        os_log_type_t v28 = type;
        if (os_log_type_enabled(v17, type))
        {
          *(_DWORD *)buf = 136446210;
          v75 = "networkd_privileged_run_probes_block_invoke";
          _os_log_impl(&dword_1830D4000, v17, v28, "%{public}s received response without result code", buf, 0xCu);
        }
        goto LABEL_131;
      }
      if (!v72)
      {
        v17 = __nwlog_obj();
        os_log_type_t v57 = type;
        if (os_log_type_enabled(v17, type))
        {
          *(_DWORD *)buf = 136446210;
          v75 = "networkd_privileged_run_probes_block_invoke";
          _os_log_impl(&dword_1830D4000, v17, v57, "%{public}s received response without result code, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_131;
      }
      v39 = (char *)__nw_create_backtrace_string();
      v17 = __nwlog_obj();
      os_log_type_t v42 = type;
      BOOL v43 = os_log_type_enabled(v17, type);
      if (!v39)
      {
        if (v43)
        {
          *(_DWORD *)buf = 136446210;
          v75 = "networkd_privileged_run_probes_block_invoke";
          _os_log_impl(&dword_1830D4000, v17, v42, "%{public}s received response without result code, no backtrace", buf, 0xCu);
        }
        goto LABEL_131;
      }
      if (v43)
      {
        *(_DWORD *)buf = 136446466;
        v75 = "networkd_privileged_run_probes_block_invoke";
        __int16 v76 = 2082;
        *(void *)v77 = v39;
        _os_log_impl(&dword_1830D4000, v17, v42, "%{public}s received response without result code, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_80;
    }
    if (object_getClass(v13) != (Class)MEMORY[0x1E4F145C0])
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v15 = (id)gLogObj;
      *(_DWORD *)buf = 136446210;
      v75 = "networkd_privileged_run_probes_block_invoke";
      v16 = (const char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v72 = 0;
      if (!__nwlog_fault(v16, &type, &v72)) {
        goto LABEL_132;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v17 = (id)gLogObj;
        os_log_type_t v18 = type;
        if (os_log_type_enabled(v17, type))
        {
          *(_DWORD *)buf = 136446210;
          v75 = "networkd_privileged_run_probes_block_invoke";
          _os_log_impl(&dword_1830D4000, v17, v18, "%{public}s received invalid result type", buf, 0xCu);
        }
LABEL_131:

LABEL_132:
        if (!v16)
        {
LABEL_135:

          goto LABEL_136;
        }
        goto LABEL_133;
      }
      if (!v72)
      {
        v17 = __nwlog_obj();
        os_log_type_t v56 = type;
        if (os_log_type_enabled(v17, type))
        {
          *(_DWORD *)buf = 136446210;
          v75 = "networkd_privileged_run_probes_block_invoke";
          _os_log_impl(&dword_1830D4000, v17, v56, "%{public}s received invalid result type, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_131;
      }
      v39 = (char *)__nw_create_backtrace_string();
      v17 = __nwlog_obj();
      os_log_type_t v40 = type;
      BOOL v41 = os_log_type_enabled(v17, type);
      if (!v39)
      {
        if (v41)
        {
          *(_DWORD *)buf = 136446210;
          v75 = "networkd_privileged_run_probes_block_invoke";
          _os_log_impl(&dword_1830D4000, v17, v40, "%{public}s received invalid result type, no backtrace", buf, 0xCu);
        }
        goto LABEL_131;
      }
      if (v41)
      {
        *(_DWORD *)buf = 136446466;
        v75 = "networkd_privileged_run_probes_block_invoke";
        __int16 v76 = 2082;
        *(void *)v77 = v39;
        _os_log_impl(&dword_1830D4000, v17, v40, "%{public}s received invalid result type, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_80:

      free(v39);
      if (!v16) {
        goto LABEL_135;
      }
LABEL_133:
      v61 = (char *)v16;
LABEL_134:
      free(v61);
      goto LABEL_135;
    }
    unint64_t value = xpc_int64_get_value(v14);
    uint64_t v33 = value;
    if (!value)
    {

      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v44 = (id)gLogObj;
      if (os_log_type_enabled(v44, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446210;
        v75 = "networkd_privileged_run_probes_block_invoke";
        _os_log_impl(&dword_1830D4000, v44, OS_LOG_TYPE_DEBUG, "%{public}s Successfully ran network probes", buf, 0xCu);
      }
      goto LABEL_84;
    }
    if (!(value >> 31))
    {
      v34 = __nwlog_obj();
      *(_DWORD *)buf = 136446466;
      v75 = "networkd_privileged_run_probes_block_invoke";
      __int16 v76 = 1024;
      *(_DWORD *)v77 = v33;
      v35 = (const char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v72 = 0;
      if (__nwlog_fault(v35, &type, &v72))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          v36 = __nwlog_obj();
          os_log_type_t v37 = type;
          if (os_log_type_enabled(v36, type))
          {
            *(_DWORD *)buf = 136446466;
            v75 = "networkd_privileged_run_probes_block_invoke";
            __int16 v76 = 1024;
            *(_DWORD *)v77 = v33;
            _os_log_impl(&dword_1830D4000, v36, v37, "%{public}s received failure result code %{darwin.errno}d", buf, 0x12u);
          }
        }
        else if (v72)
        {
          v62 = (char *)__nw_create_backtrace_string();
          v36 = __nwlog_obj();
          os_log_type_t v63 = type;
          BOOL v64 = os_log_type_enabled(v36, type);
          if (v62)
          {
            if (v64)
            {
              *(_DWORD *)buf = 136446722;
              v75 = "networkd_privileged_run_probes_block_invoke";
              __int16 v76 = 1024;
              *(_DWORD *)v77 = v33;
              *(_WORD *)&v77[4] = 2082;
              *(void *)&v77[6] = v62;
              _os_log_impl(&dword_1830D4000, v36, v63, "%{public}s received failure result code %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x1Cu);
            }

            free(v62);
            if (!v35) {
              goto LABEL_135;
            }
LABEL_176:
            v61 = (char *)v35;
            goto LABEL_134;
          }
          if (v64)
          {
            *(_DWORD *)buf = 136446466;
            v75 = "networkd_privileged_run_probes_block_invoke";
            __int16 v76 = 1024;
            *(_DWORD *)v77 = v33;
            _os_log_impl(&dword_1830D4000, v36, v63, "%{public}s received failure result code %{darwin.errno}d, no backtrace", buf, 0x12u);
          }
        }
        else
        {
          v36 = __nwlog_obj();
          os_log_type_t v70 = type;
          if (os_log_type_enabled(v36, type))
          {
            *(_DWORD *)buf = 136446466;
            v75 = "networkd_privileged_run_probes_block_invoke";
            __int16 v76 = 1024;
            *(_DWORD *)v77 = v33;
            _os_log_impl(&dword_1830D4000, v36, v70, "%{public}s received failure result code %{darwin.errno}d, backtrace limit exceeded", buf, 0x12u);
          }
        }
      }
LABEL_175:
      if (!v35) {
        goto LABEL_135;
      }
      goto LABEL_176;
    }
    v52 = __nwlog_obj();
    v53 = networkd_privileged_result_to_string(v33);
    *(_DWORD *)buf = 136446722;
    v75 = "networkd_privileged_run_probes_block_invoke";
    __int16 v76 = 2048;
    *(void *)v77 = v33;
    *(_WORD *)&v77[8] = 2082;
    *(void *)&v77[10] = v53;
    v35 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v72 = 0;
    if (!__nwlog_fault(v35, &type, &v72)) {
      goto LABEL_175;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      v54 = __nwlog_obj();
      os_log_type_t v55 = type;
      if (os_log_type_enabled(v54, type))
      {
        *(_DWORD *)buf = 136446722;
        v75 = "networkd_privileged_run_probes_block_invoke";
        __int16 v76 = 2048;
        *(void *)v77 = v33;
        *(_WORD *)&v77[8] = 2082;
        *(void *)&v77[10] = v53;
        _os_log_impl(&dword_1830D4000, v54, v55, "%{public}s received internal failure result code: [%lld] %{public}s", buf, 0x20u);
      }
    }
    else if (v72)
    {
      v65 = (char *)__nw_create_backtrace_string();
      v54 = __nwlog_obj();
      os_log_type_t v66 = type;
      BOOL v67 = os_log_type_enabled(v54, type);
      if (v65)
      {
        if (v67)
        {
          *(_DWORD *)buf = 136446978;
          v75 = "networkd_privileged_run_probes_block_invoke";
          __int16 v76 = 2048;
          *(void *)v77 = v33;
          *(_WORD *)&v77[8] = 2082;
          *(void *)&v77[10] = v53;
          __int16 v78 = 2082;
          v79 = v65;
          _os_log_impl(&dword_1830D4000, v54, v66, "%{public}s received internal failure result code: [%lld] %{public}s, dumping backtrace:%{public}s", buf, 0x2Au);
        }

        free(v65);
        goto LABEL_175;
      }
      if (v67)
      {
        *(_DWORD *)buf = 136446722;
        v75 = "networkd_privileged_run_probes_block_invoke";
        __int16 v76 = 2048;
        *(void *)v77 = v33;
        *(_WORD *)&v77[8] = 2082;
        *(void *)&v77[10] = v53;
        _os_log_impl(&dword_1830D4000, v54, v66, "%{public}s received internal failure result code: [%lld] %{public}s, no backtrace", buf, 0x20u);
      }
    }
    else
    {
      v54 = __nwlog_obj();
      os_log_type_t v71 = type;
      if (os_log_type_enabled(v54, type))
      {
        *(_DWORD *)buf = 136446722;
        v75 = "networkd_privileged_run_probes_block_invoke";
        __int16 v76 = 2048;
        *(void *)v77 = v33;
        *(_WORD *)&v77[8] = 2082;
        *(void *)&v77[10] = v53;
        _os_log_impl(&dword_1830D4000, v54, v71, "%{public}s received internal failure result code: [%lld] %{public}s, backtrace limit exceeded", buf, 0x20u);
      }
    }

    goto LABEL_175;
  }
  if (Class == (Class)MEMORY[0x1E4F145A8])
  {
    if (v3 == (void *)MEMORY[0x1E4F14520])
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v30 = (id)gLogObj;
      *(_DWORD *)buf = 136446210;
      v75 = "networkd_privileged_run_probes_block_invoke";
      uint64_t v5 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v72 = 0;
      if (!__nwlog_fault(v5, &type, &v72)) {
        goto LABEL_74;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        __int16 v11 = (id)gLogObj;
        os_log_type_t v31 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          v75 = "networkd_privileged_run_probes_block_invoke";
          _os_log_impl(&dword_1830D4000, v11, v31, "%{public}s received XPC_ERROR_CONNECTION_INTERRUPTED", buf, 0xCu);
        }
        goto LABEL_73;
      }
      if (!v72)
      {
        __int16 v11 = __nwlog_obj();
        os_log_type_t v60 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          v75 = "networkd_privileged_run_probes_block_invoke";
          _os_log_impl(&dword_1830D4000, v11, v60, "%{public}s received XPC_ERROR_CONNECTION_INTERRUPTED, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_73;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __int16 v11 = __nwlog_obj();
      os_log_type_t v45 = type;
      BOOL v46 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v46)
        {
          *(_DWORD *)buf = 136446210;
          v75 = "networkd_privileged_run_probes_block_invoke";
          _os_log_impl(&dword_1830D4000, v11, v45, "%{public}s received XPC_ERROR_CONNECTION_INTERRUPTED, no backtrace", buf, 0xCu);
        }
        goto LABEL_73;
      }
      if (v46)
      {
        *(_DWORD *)buf = 136446466;
        v75 = "networkd_privileged_run_probes_block_invoke";
        __int16 v76 = 2082;
        *(void *)v77 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v11, v45, "%{public}s received XPC_ERROR_CONNECTION_INTERRUPTED, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_25;
    }
    if (v3 != (void *)MEMORY[0x1E4F14528])
    {
      if (v3 != (void *)MEMORY[0x1E4F14550])
      {
        uint64_t v5 = (char *)MEMORY[0x185319370](v3);
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v22 = (id)gLogObj;
        *(_DWORD *)buf = 136446466;
        v75 = "networkd_privileged_run_probes_block_invoke";
        __int16 v76 = 2082;
        *(void *)v77 = v5;
        int v7 = (char *)_os_log_send_and_compose_impl();

        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v72 = 0;
        if (!__nwlog_fault(v7, &type, &v72)) {
          goto LABEL_64;
        }
        if (type == OS_LOG_TYPE_FAULT)
        {
          id v8 = __nwlog_obj();
          os_log_type_t v23 = type;
          if (os_log_type_enabled(v8, type))
          {
            *(_DWORD *)buf = 136446466;
            v75 = "networkd_privileged_run_probes_block_invoke";
            __int16 v76 = 2082;
            *(void *)v77 = v5;
            _os_log_impl(&dword_1830D4000, v8, v23, "%{public}s received returned unknown XPC error %{public}s", buf, 0x16u);
          }
          goto LABEL_63;
        }
        if (!v72)
        {
          id v8 = __nwlog_obj();
          os_log_type_t v68 = type;
          if (os_log_type_enabled(v8, type))
          {
            *(_DWORD *)buf = 136446466;
            v75 = "networkd_privileged_run_probes_block_invoke";
            __int16 v76 = 2082;
            *(void *)v77 = v5;
            _os_log_impl(&dword_1830D4000, v8, v68, "%{public}s received returned unknown XPC error %{public}s, backtrace limit exceeded", buf, 0x16u);
          }
          goto LABEL_63;
        }
        v49 = (char *)__nw_create_backtrace_string();
        id v8 = __nwlog_obj();
        os_log_type_t v50 = type;
        BOOL v51 = os_log_type_enabled(v8, type);
        if (!v49)
        {
          if (v51)
          {
            *(_DWORD *)buf = 136446466;
            v75 = "networkd_privileged_run_probes_block_invoke";
            __int16 v76 = 2082;
            *(void *)v77 = v5;
            _os_log_impl(&dword_1830D4000, v8, v50, "%{public}s received returned unknown XPC error %{public}s, no backtrace", buf, 0x16u);
          }
          goto LABEL_63;
        }
        if (v51)
        {
          *(_DWORD *)buf = 136446722;
          v75 = "networkd_privileged_run_probes_block_invoke";
          __int16 v76 = 2082;
          *(void *)v77 = v5;
          *(_WORD *)&v77[8] = 2082;
          *(void *)&v77[10] = v49;
          _os_log_impl(&dword_1830D4000, v8, v50, "%{public}s received returned unknown XPC error %{public}s, dumping backtrace:%{public}s", buf, 0x20u);
        }

        free(v49);
        if (!v7) {
          goto LABEL_74;
        }
LABEL_65:
        free(v7);
        goto LABEL_74;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v47 = (id)gLogObj;
      *(_DWORD *)buf = 136446210;
      v75 = "networkd_privileged_run_probes_block_invoke";
      uint64_t v5 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v72 = 0;
      if (!__nwlog_fault(v5, &type, &v72)) {
        goto LABEL_74;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        __int16 v11 = __nwlog_obj();
        os_log_type_t v48 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          v75 = "networkd_privileged_run_probes_block_invoke";
          _os_log_impl(&dword_1830D4000, v11, v48, "%{public}s received XPC_ERROR_TERMINATION_IMMINENT", buf, 0xCu);
        }
LABEL_73:

        goto LABEL_74;
      }
      if (!v72)
      {
        __int16 v11 = __nwlog_obj();
        os_log_type_t v69 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          v75 = "networkd_privileged_run_probes_block_invoke";
          _os_log_impl(&dword_1830D4000, v11, v69, "%{public}s received XPC_ERROR_TERMINATION_IMMINENT, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_73;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __int16 v11 = __nwlog_obj();
      os_log_type_t v58 = type;
      BOOL v59 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v59)
        {
          *(_DWORD *)buf = 136446210;
          v75 = "networkd_privileged_run_probes_block_invoke";
          _os_log_impl(&dword_1830D4000, v11, v58, "%{public}s received XPC_ERROR_TERMINATION_IMMINENT, no backtrace", buf, 0xCu);
        }
        goto LABEL_73;
      }
      if (v59)
      {
        *(_DWORD *)buf = 136446466;
        v75 = "networkd_privileged_run_probes_block_invoke";
        __int16 v76 = 2082;
        *(void *)v77 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v11, v58, "%{public}s received XPC_ERROR_TERMINATION_IMMINENT, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_25:

      free(backtrace_string);
      if (!v5) {
        goto LABEL_136;
      }
      goto LABEL_75;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v44 = (id)gLogObj;
    if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      v75 = "networkd_privileged_run_probes_block_invoke";
      _os_log_impl(&dword_1830D4000, v44, OS_LOG_TYPE_ERROR, "%{public}s received XPC_ERROR_CONNECTION_INVALID", buf, 0xCu);
    }
LABEL_84:

    goto LABEL_136;
  }
  uint64_t v5 = (char *)MEMORY[0x185319370](v3);
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v6 = (id)gLogObj;
  *(_DWORD *)buf = 136446466;
  v75 = "networkd_privileged_run_probes_block_invoke";
  __int16 v76 = 2082;
  *(void *)v77 = v5;
  int v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v72 = 0;
  if (!__nwlog_fault(v7, &type, &v72)) {
    goto LABEL_64;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v8 = (id)gLogObj;
    os_log_type_t v9 = type;
    if (os_log_type_enabled(v8, type))
    {
      *(_DWORD *)buf = 136446466;
      v75 = "networkd_privileged_run_probes_block_invoke";
      __int16 v76 = 2082;
      *(void *)v77 = v5;
      _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s received unknown type XPC %{public}s", buf, 0x16u);
    }
LABEL_63:

LABEL_64:
    if (!v7) {
      goto LABEL_74;
    }
    goto LABEL_65;
  }
  if (!v72)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v8 = (id)gLogObj;
    os_log_type_t v38 = type;
    if (os_log_type_enabled(v8, type))
    {
      *(_DWORD *)buf = 136446466;
      v75 = "networkd_privileged_run_probes_block_invoke";
      __int16 v76 = 2082;
      *(void *)v77 = v5;
      _os_log_impl(&dword_1830D4000, v8, v38, "%{public}s received unknown type XPC %{public}s, backtrace limit exceeded", buf, 0x16u);
    }
    goto LABEL_63;
  }
  v24 = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v8 = (id)gLogObj;
  os_log_type_t v25 = type;
  BOOL v26 = os_log_type_enabled(v8, type);
  if (!v24)
  {
    if (v26)
    {
      *(_DWORD *)buf = 136446466;
      v75 = "networkd_privileged_run_probes_block_invoke";
      __int16 v76 = 2082;
      *(void *)v77 = v5;
      _os_log_impl(&dword_1830D4000, v8, v25, "%{public}s received unknown type XPC %{public}s, no backtrace", buf, 0x16u);
    }
    goto LABEL_63;
  }
  if (v26)
  {
    *(_DWORD *)buf = 136446722;
    v75 = "networkd_privileged_run_probes_block_invoke";
    __int16 v76 = 2082;
    *(void *)v77 = v5;
    *(_WORD *)&v77[8] = 2082;
    *(void *)&v77[10] = v24;
    _os_log_impl(&dword_1830D4000, v8, v25, "%{public}s received unknown type XPC %{public}s, dumping backtrace:%{public}s", buf, 0x20u);
  }

  free(v24);
  if (v7) {
    goto LABEL_65;
  }
LABEL_74:
  if (v5) {
LABEL_75:
  }
    free(v5);
LABEL_136:
}

void sub_1835F6FFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __networkd_privileged_set_opportunistic_async_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void __networkd_privileged_set_opportunistic_async_block_invoke_42(uint64_t a1, void *a2)
{
  uint64_t v89 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  v4 = v3;
  if (!v3)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v11 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v84 = "networkd_privileged_set_opportunistic_async_block_invoke";
    os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v81 = 0;
    if (__nwlog_fault(v12, &type, &v81))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v13 = (id)gLogObj;
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)buf = 136446210;
          v84 = "networkd_privileged_set_opportunistic_async_block_invoke";
          _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s received NULL response", buf, 0xCu);
        }
      }
      else if (v81)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v13 = (id)gLogObj;
        os_log_type_t v22 = type;
        BOOL v23 = os_log_type_enabled(v13, type);
        if (backtrace_string)
        {
          if (v23)
          {
            *(_DWORD *)buf = 136446466;
            v84 = "networkd_privileged_set_opportunistic_async_block_invoke";
            __int16 v85 = 2082;
            *(void *)v86 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v13, v22, "%{public}s received NULL response, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          if (!v12) {
            goto LABEL_78;
          }
          goto LABEL_77;
        }
        if (v23)
        {
          *(_DWORD *)buf = 136446210;
          v84 = "networkd_privileged_set_opportunistic_async_block_invoke";
          _os_log_impl(&dword_1830D4000, v13, v22, "%{public}s received NULL response, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v13 = (id)gLogObj;
        os_log_type_t v31 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)buf = 136446210;
          v84 = "networkd_privileged_set_opportunistic_async_block_invoke";
          _os_log_impl(&dword_1830D4000, v13, v31, "%{public}s received NULL response, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
    if (!v12) {
      goto LABEL_78;
    }
LABEL_77:
    free(v12);
    goto LABEL_78;
  }
  Class Class = object_getClass(v3);
  if (Class != (Class)MEMORY[0x1E4F14590])
  {
    if (Class != (Class)MEMORY[0x1E4F145A8])
    {
      id v6 = (void *)MEMORY[0x185319370](v4);
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v7 = (id)gLogObj;
      *(_DWORD *)buf = 136446466;
      v84 = "networkd_privileged_set_opportunistic_async_block_invoke";
      __int16 v85 = 2082;
      *(void *)v86 = v6;
      id v8 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v81 = 0;
      if (!__nwlog_fault(v8, &type, &v81)) {
        goto LABEL_63;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v9 = (id)gLogObj;
        os_log_type_t v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446466;
          v84 = "networkd_privileged_set_opportunistic_async_block_invoke";
          __int16 v85 = 2082;
          *(void *)v86 = v6;
          _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s received unknown type XPC %{public}s", buf, 0x16u);
        }
LABEL_62:

LABEL_63:
        if (!v8) {
          goto LABEL_65;
        }
        goto LABEL_64;
      }
      if (!v81)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v9 = (id)gLogObj;
        os_log_type_t v39 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446466;
          v84 = "networkd_privileged_set_opportunistic_async_block_invoke";
          __int16 v85 = 2082;
          *(void *)v86 = v6;
          _os_log_impl(&dword_1830D4000, v9, v39, "%{public}s received unknown type XPC %{public}s, backtrace limit exceeded", buf, 0x16u);
        }
        goto LABEL_62;
      }
      BOOL v26 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v9 = (id)gLogObj;
      os_log_type_t v27 = type;
      BOOL v28 = os_log_type_enabled(v9, type);
      if (!v26)
      {
        if (v28)
        {
          *(_DWORD *)buf = 136446466;
          v84 = "networkd_privileged_set_opportunistic_async_block_invoke";
          __int16 v85 = 2082;
          *(void *)v86 = v6;
          _os_log_impl(&dword_1830D4000, v9, v27, "%{public}s received unknown type XPC %{public}s, no backtrace", buf, 0x16u);
        }
        goto LABEL_62;
      }
      if (v28)
      {
        *(_DWORD *)buf = 136446722;
        v84 = "networkd_privileged_set_opportunistic_async_block_invoke";
        __int16 v85 = 2082;
        *(void *)v86 = v6;
        *(_WORD *)&v86[8] = 2082;
        *(void *)&v86[10] = v26;
        _os_log_impl(&dword_1830D4000, v9, v27, "%{public}s received unknown type XPC %{public}s, dumping backtrace:%{public}s", buf, 0x20u);
      }

      free(v26);
      if (!v8)
      {
LABEL_65:
        if (v6) {
LABEL_66:
        }
          free(v6);
LABEL_78:
        (*(void (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), 0);
        goto LABEL_138;
      }
LABEL_64:
      free(v8);
      goto LABEL_65;
    }
    if (v4 == (void *)MEMORY[0x1E4F14520])
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v32 = (id)gLogObj;
      *(_DWORD *)buf = 136446210;
      v84 = "networkd_privileged_set_opportunistic_async_block_invoke";
      id v6 = (void *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v81 = 0;
      if (!__nwlog_fault((const char *)v6, &type, &v81)) {
        goto LABEL_65;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v33 = (id)gLogObj;
        os_log_type_t v34 = type;
        if (os_log_type_enabled(v33, type))
        {
          *(_DWORD *)buf = 136446210;
          v84 = "networkd_privileged_set_opportunistic_async_block_invoke";
          _os_log_impl(&dword_1830D4000, v33, v34, "%{public}s received XPC_ERROR_CONNECTION_INTERRUPTED", buf, 0xCu);
        }
        goto LABEL_178;
      }
      if (!v81)
      {
        uint64_t v33 = __nwlog_obj();
        os_log_type_t v64 = type;
        if (os_log_type_enabled(v33, type))
        {
          *(_DWORD *)buf = 136446210;
          v84 = "networkd_privileged_set_opportunistic_async_block_invoke";
          _os_log_impl(&dword_1830D4000, v33, v64, "%{public}s received XPC_ERROR_CONNECTION_INTERRUPTED, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_178;
      }
      BOOL v46 = (char *)__nw_create_backtrace_string();
      uint64_t v33 = __nwlog_obj();
      os_log_type_t v47 = type;
      BOOL v48 = os_log_type_enabled(v33, type);
      if (!v46)
      {
        if (v48)
        {
          *(_DWORD *)buf = 136446210;
          v84 = "networkd_privileged_set_opportunistic_async_block_invoke";
          _os_log_impl(&dword_1830D4000, v33, v47, "%{public}s received XPC_ERROR_CONNECTION_INTERRUPTED, no backtrace", buf, 0xCu);
        }
        goto LABEL_178;
      }
      if (v48)
      {
        *(_DWORD *)buf = 136446466;
        v84 = "networkd_privileged_set_opportunistic_async_block_invoke";
        __int16 v85 = 2082;
        *(void *)v86 = v46;
        _os_log_impl(&dword_1830D4000, v33, v47, "%{public}s received XPC_ERROR_CONNECTION_INTERRUPTED, dumping backtrace:%{public}s", buf, 0x16u);
      }
    }
    else
    {
      if (v4 == (void *)MEMORY[0x1E4F14528])
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v45 = (id)gLogObj;
        if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446210;
          v84 = "networkd_privileged_set_opportunistic_async_block_invoke";
          _os_log_impl(&dword_1830D4000, v45, OS_LOG_TYPE_ERROR, "%{public}s received XPC_ERROR_CONNECTION_INVALID", buf, 0xCu);
        }

        goto LABEL_78;
      }
      if (v4 != (void *)MEMORY[0x1E4F14550])
      {
        id v6 = (void *)MEMORY[0x185319370](v4);
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v24 = (id)gLogObj;
        *(_DWORD *)buf = 136446466;
        v84 = "networkd_privileged_set_opportunistic_async_block_invoke";
        __int16 v85 = 2082;
        *(void *)v86 = v6;
        id v8 = (char *)_os_log_send_and_compose_impl();

        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v81 = 0;
        if (!__nwlog_fault(v8, &type, &v81)) {
          goto LABEL_63;
        }
        if (type == OS_LOG_TYPE_FAULT)
        {
          os_log_type_t v9 = __nwlog_obj();
          os_log_type_t v25 = type;
          if (os_log_type_enabled(v9, type))
          {
            *(_DWORD *)buf = 136446466;
            v84 = "networkd_privileged_set_opportunistic_async_block_invoke";
            __int16 v85 = 2082;
            *(void *)v86 = v6;
            _os_log_impl(&dword_1830D4000, v9, v25, "%{public}s received returned unknown XPC error %{public}s", buf, 0x16u);
          }
          goto LABEL_62;
        }
        if (!v81)
        {
          os_log_type_t v9 = __nwlog_obj();
          os_log_type_t v74 = type;
          if (os_log_type_enabled(v9, type))
          {
            *(_DWORD *)buf = 136446466;
            v84 = "networkd_privileged_set_opportunistic_async_block_invoke";
            __int16 v85 = 2082;
            *(void *)v86 = v6;
            _os_log_impl(&dword_1830D4000, v9, v74, "%{public}s received returned unknown XPC error %{public}s, backtrace limit exceeded", buf, 0x16u);
          }
          goto LABEL_62;
        }
        v52 = (char *)__nw_create_backtrace_string();
        os_log_type_t v9 = __nwlog_obj();
        os_log_type_t v53 = type;
        BOOL v54 = os_log_type_enabled(v9, type);
        if (!v52)
        {
          if (v54)
          {
            *(_DWORD *)buf = 136446466;
            v84 = "networkd_privileged_set_opportunistic_async_block_invoke";
            __int16 v85 = 2082;
            *(void *)v86 = v6;
            _os_log_impl(&dword_1830D4000, v9, v53, "%{public}s received returned unknown XPC error %{public}s, no backtrace", buf, 0x16u);
          }
          goto LABEL_62;
        }
        if (v54)
        {
          *(_DWORD *)buf = 136446722;
          v84 = "networkd_privileged_set_opportunistic_async_block_invoke";
          __int16 v85 = 2082;
          *(void *)v86 = v6;
          *(_WORD *)&v86[8] = 2082;
          *(void *)&v86[10] = v52;
          _os_log_impl(&dword_1830D4000, v9, v53, "%{public}s received returned unknown XPC error %{public}s, dumping backtrace:%{public}s", buf, 0x20u);
        }

        free(v52);
        if (!v8) {
          goto LABEL_65;
        }
        goto LABEL_64;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v49 = (id)gLogObj;
      *(_DWORD *)buf = 136446210;
      v84 = "networkd_privileged_set_opportunistic_async_block_invoke";
      id v6 = (void *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v81 = 0;
      if (!__nwlog_fault((const char *)v6, &type, &v81)) {
        goto LABEL_65;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v33 = __nwlog_obj();
        os_log_type_t v50 = type;
        if (os_log_type_enabled(v33, type))
        {
          *(_DWORD *)buf = 136446210;
          v84 = "networkd_privileged_set_opportunistic_async_block_invoke";
          _os_log_impl(&dword_1830D4000, v33, v50, "%{public}s received XPC_ERROR_TERMINATION_IMMINENT", buf, 0xCu);
        }
LABEL_178:

        goto LABEL_65;
      }
      if (!v81)
      {
        uint64_t v33 = __nwlog_obj();
        os_log_type_t v78 = type;
        if (os_log_type_enabled(v33, type))
        {
          *(_DWORD *)buf = 136446210;
          v84 = "networkd_privileged_set_opportunistic_async_block_invoke";
          _os_log_impl(&dword_1830D4000, v33, v78, "%{public}s received XPC_ERROR_TERMINATION_IMMINENT, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_178;
      }
      BOOL v46 = (char *)__nw_create_backtrace_string();
      uint64_t v33 = __nwlog_obj();
      os_log_type_t v62 = type;
      BOOL v63 = os_log_type_enabled(v33, type);
      if (!v46)
      {
        if (v63)
        {
          *(_DWORD *)buf = 136446210;
          v84 = "networkd_privileged_set_opportunistic_async_block_invoke";
          _os_log_impl(&dword_1830D4000, v33, v62, "%{public}s received XPC_ERROR_TERMINATION_IMMINENT, no backtrace", buf, 0xCu);
        }
        goto LABEL_178;
      }
      if (v63)
      {
        *(_DWORD *)buf = 136446466;
        v84 = "networkd_privileged_set_opportunistic_async_block_invoke";
        __int16 v85 = 2082;
        *(void *)v86 = v46;
        _os_log_impl(&dword_1830D4000, v33, v62, "%{public}s received XPC_ERROR_TERMINATION_IMMINENT, dumping backtrace:%{public}s", buf, 0x16u);
      }
    }

    free(v46);
    if (!v6) {
      goto LABEL_78;
    }
    goto LABEL_66;
  }
  id v15 = xpc_dictionary_get_value(v4, (const char *)networkd_privileged_key_result);
  v16 = v15;
  if (!v15)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v29 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v84 = "networkd_privileged_set_opportunistic_async_block_invoke";
    os_log_type_t v18 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v81 = 0;
    if (!__nwlog_fault(v18, &type, &v81)) {
      goto LABEL_135;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v19 = (id)gLogObj;
      os_log_type_t v30 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        v84 = "networkd_privileged_set_opportunistic_async_block_invoke";
        _os_log_impl(&dword_1830D4000, v19, v30, "%{public}s received response without result code", buf, 0xCu);
      }
      goto LABEL_134;
    }
    if (!v81)
    {
      v19 = __nwlog_obj();
      os_log_type_t v61 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        v84 = "networkd_privileged_set_opportunistic_async_block_invoke";
        _os_log_impl(&dword_1830D4000, v19, v61, "%{public}s received response without result code, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_134;
    }
    os_log_type_t v40 = (char *)__nw_create_backtrace_string();
    v19 = __nwlog_obj();
    os_log_type_t v43 = type;
    BOOL v44 = os_log_type_enabled(v19, type);
    if (!v40)
    {
      if (v44)
      {
        *(_DWORD *)buf = 136446210;
        v84 = "networkd_privileged_set_opportunistic_async_block_invoke";
        _os_log_impl(&dword_1830D4000, v19, v43, "%{public}s received response without result code, no backtrace", buf, 0xCu);
      }
      goto LABEL_134;
    }
    if (v44)
    {
      *(_DWORD *)buf = 136446466;
      v84 = "networkd_privileged_set_opportunistic_async_block_invoke";
      __int16 v85 = 2082;
      *(void *)v86 = v40;
      _os_log_impl(&dword_1830D4000, v19, v43, "%{public}s received response without result code, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_83;
  }
  if (object_getClass(v15) != (Class)MEMORY[0x1E4F145C0])
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v17 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v84 = "networkd_privileged_set_opportunistic_async_block_invoke";
    os_log_type_t v18 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v81 = 0;
    if (!__nwlog_fault(v18, &type, &v81)) {
      goto LABEL_135;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v19 = (id)gLogObj;
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        v84 = "networkd_privileged_set_opportunistic_async_block_invoke";
        _os_log_impl(&dword_1830D4000, v19, v20, "%{public}s received invalid result type", buf, 0xCu);
      }
LABEL_134:

LABEL_135:
      if (!v18)
      {
LABEL_137:
        (*(void (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), 0);

        goto LABEL_138;
      }
LABEL_136:
      free(v18);
      goto LABEL_137;
    }
    if (!v81)
    {
      v19 = __nwlog_obj();
      os_log_type_t v60 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        v84 = "networkd_privileged_set_opportunistic_async_block_invoke";
        _os_log_impl(&dword_1830D4000, v19, v60, "%{public}s received invalid result type, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_134;
    }
    os_log_type_t v40 = (char *)__nw_create_backtrace_string();
    v19 = __nwlog_obj();
    os_log_type_t v41 = type;
    BOOL v42 = os_log_type_enabled(v19, type);
    if (!v40)
    {
      if (v42)
      {
        *(_DWORD *)buf = 136446210;
        v84 = "networkd_privileged_set_opportunistic_async_block_invoke";
        _os_log_impl(&dword_1830D4000, v19, v41, "%{public}s received invalid result type, no backtrace", buf, 0xCu);
      }
      goto LABEL_134;
    }
    if (v42)
    {
      *(_DWORD *)buf = 136446466;
      v84 = "networkd_privileged_set_opportunistic_async_block_invoke";
      __int16 v85 = 2082;
      *(void *)v86 = v40;
      _os_log_impl(&dword_1830D4000, v19, v41, "%{public}s received invalid result type, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_83:

    free(v40);
    if (!v18) {
      goto LABEL_137;
    }
    goto LABEL_136;
  }
  unint64_t value = xpc_int64_get_value(v16);
  uint64_t v36 = value;
  if (value)
  {
    if (!(value >> 31))
    {
      os_log_type_t v37 = __nwlog_obj();
      os_log_type_t v38 = v37;
      if (v36 == 6)
      {
        if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446466;
          v84 = "networkd_privileged_set_opportunistic_async_block_invoke";
          __int16 v85 = 1024;
          *(_DWORD *)v86 = 6;
          _os_log_impl(&dword_1830D4000, v38, OS_LOG_TYPE_ERROR, "%{public}s received failure result code %{darwin.errno}d", buf, 0x12u);
        }

        goto LABEL_137;
      }
      *(_DWORD *)buf = 136446466;
      v84 = "networkd_privileged_set_opportunistic_async_block_invoke";
      __int16 v85 = 1024;
      *(_DWORD *)v86 = v36;
      os_log_type_t v57 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v81 = 0;
      if (__nwlog_fault(v57, &type, &v81))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          v65 = __nwlog_obj();
          os_log_type_t v66 = type;
          if (os_log_type_enabled(v65, type))
          {
            *(_DWORD *)buf = 136446466;
            v84 = "networkd_privileged_set_opportunistic_async_block_invoke";
            __int16 v85 = 1024;
            *(_DWORD *)v86 = v36;
            _os_log_impl(&dword_1830D4000, v65, v66, "%{public}s received failure result code %{darwin.errno}d", buf, 0x12u);
          }
        }
        else if (v81)
        {
          v75 = (char *)__nw_create_backtrace_string();
          v65 = __nwlog_obj();
          os_log_type_t v76 = type;
          BOOL v77 = os_log_type_enabled(v65, type);
          if (v75)
          {
            if (v77)
            {
              *(_DWORD *)buf = 136446722;
              v84 = "networkd_privileged_set_opportunistic_async_block_invoke";
              __int16 v85 = 1024;
              *(_DWORD *)v86 = v36;
              *(_WORD *)&v86[4] = 2082;
              *(void *)&v86[6] = v75;
              _os_log_impl(&dword_1830D4000, v65, v76, "%{public}s received failure result code %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x1Cu);
            }

            free(v75);
            if (!v57) {
              goto LABEL_137;
            }
            goto LABEL_189;
          }
          if (v77)
          {
            *(_DWORD *)buf = 136446466;
            v84 = "networkd_privileged_set_opportunistic_async_block_invoke";
            __int16 v85 = 1024;
            *(_DWORD *)v86 = v36;
            _os_log_impl(&dword_1830D4000, v65, v76, "%{public}s received failure result code %{darwin.errno}d, no backtrace", buf, 0x12u);
          }
        }
        else
        {
          v65 = __nwlog_obj();
          os_log_type_t v80 = type;
          if (os_log_type_enabled(v65, type))
          {
            *(_DWORD *)buf = 136446466;
            v84 = "networkd_privileged_set_opportunistic_async_block_invoke";
            __int16 v85 = 1024;
            *(_DWORD *)v86 = v36;
            _os_log_impl(&dword_1830D4000, v65, v80, "%{public}s received failure result code %{darwin.errno}d, backtrace limit exceeded", buf, 0x12u);
          }
        }
      }
LABEL_188:
      if (!v57) {
        goto LABEL_137;
      }
LABEL_189:
      free(v57);
      goto LABEL_137;
    }
    os_log_type_t v55 = __nwlog_obj();
    os_log_type_t v56 = networkd_privileged_result_to_string(v36);
    *(_DWORD *)buf = 136446722;
    v84 = "networkd_privileged_set_opportunistic_async_block_invoke";
    __int16 v85 = 2048;
    *(void *)v86 = v36;
    *(_WORD *)&v86[8] = 2082;
    *(void *)&v86[10] = v56;
    os_log_type_t v57 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v81 = 0;
    if (!__nwlog_fault(v57, &type, &v81)) {
      goto LABEL_188;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v58 = __nwlog_obj();
      os_log_type_t v59 = type;
      if (os_log_type_enabled(v58, type))
      {
        *(_DWORD *)buf = 136446722;
        v84 = "networkd_privileged_set_opportunistic_async_block_invoke";
        __int16 v85 = 2048;
        *(void *)v86 = v36;
        *(_WORD *)&v86[8] = 2082;
        *(void *)&v86[10] = v56;
        _os_log_impl(&dword_1830D4000, v58, v59, "%{public}s received internal failure result code: [%lld] %{public}s", buf, 0x20u);
      }
    }
    else if (v81)
    {
      BOOL v67 = (char *)__nw_create_backtrace_string();
      os_log_type_t v58 = __nwlog_obj();
      os_log_type_t v68 = type;
      BOOL v69 = os_log_type_enabled(v58, type);
      if (v67)
      {
        if (v69)
        {
          *(_DWORD *)buf = 136446978;
          v84 = "networkd_privileged_set_opportunistic_async_block_invoke";
          __int16 v85 = 2048;
          *(void *)v86 = v36;
          *(_WORD *)&v86[8] = 2082;
          *(void *)&v86[10] = v56;
          __int16 v87 = 2082;
          uint64_t v88 = (uint64_t)v67;
          _os_log_impl(&dword_1830D4000, v58, v68, "%{public}s received internal failure result code: [%lld] %{public}s, dumping backtrace:%{public}s", buf, 0x2Au);
        }

        free(v67);
        goto LABEL_188;
      }
      if (v69)
      {
        *(_DWORD *)buf = 136446722;
        v84 = "networkd_privileged_set_opportunistic_async_block_invoke";
        __int16 v85 = 2048;
        *(void *)v86 = v36;
        *(_WORD *)&v86[8] = 2082;
        *(void *)&v86[10] = v56;
        _os_log_impl(&dword_1830D4000, v58, v68, "%{public}s received internal failure result code: [%lld] %{public}s, no backtrace", buf, 0x20u);
      }
    }
    else
    {
      os_log_type_t v58 = __nwlog_obj();
      os_log_type_t v79 = type;
      if (os_log_type_enabled(v58, type))
      {
        *(_DWORD *)buf = 136446722;
        v84 = "networkd_privileged_set_opportunistic_async_block_invoke";
        __int16 v85 = 2048;
        *(void *)v86 = v36;
        *(_WORD *)&v86[8] = 2082;
        *(void *)&v86[10] = v56;
        _os_log_impl(&dword_1830D4000, v58, v79, "%{public}s received internal failure result code: [%lld] %{public}s, backtrace limit exceeded", buf, 0x20u);
      }
    }

    goto LABEL_188;
  }

  if (*(unsigned char *)(a1 + 48)) {
    uint64_t uint64 = xpc_dictionary_get_uint64(v4, (const char *)networkd_privileged_key_opportunistic_inuse);
  }
  else {
    uint64_t uint64 = 0;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_t v70 = (id)gLogObj;
  if (os_log_type_enabled(v70, OS_LOG_TYPE_DEFAULT))
  {
    int v71 = *(unsigned __int8 *)(a1 + 48);
    string_ptr = xpc_string_get_string_ptr(*(xpc_object_t *)(a1 + 32));
    v73 = "";
    *(_DWORD *)buf = 136446978;
    v84 = "networkd_privileged_set_opportunistic_async_block_invoke";
    __int16 v85 = 2082;
    if (!v71) {
      v73 = "un";
    }
    *(void *)v86 = v73;
    *(_WORD *)&v86[8] = 2082;
    *(void *)&v86[10] = string_ptr;
    __int16 v87 = 2048;
    uint64_t v88 = uint64;
    _os_log_impl(&dword_1830D4000, v70, OS_LOG_TYPE_DEFAULT, "%{public}s Successfully %{public}sblocked opportunistic traffic on \"%{public}s\" count=%llu", buf, 0x2Au);
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
LABEL_138:
}

void sub_1835F893C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL networkd_privileged_set_settings(const char *a1, void *a2, const char *a3)
{
  uint64_t v110 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  if (a1)
  {
    xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
    id v7 = v6;
    if (v6)
    {
      xpc_dictionary_set_uint64(v6, (const char *)networkd_privileged_key_type, 0xAuLL);
      xpc_dictionary_set_string(v7, (const char *)networkd_privileged_key_settings_key, a1);
      xpc_dictionary_set_value(v7, (const char *)networkd_privileged_key_settings_value, v5);
      if (a3 && *a3) {
        xpc_dictionary_set_string(v7, (const char *)networkd_privileged_key_settings_file_prefix, a3);
      }
      xpc_object_t v8 = networkd_privileged_send_sync_inner((uint64_t)"networkd_privileged_set_settings", v7);
      os_log_type_t v9 = v8;
      if (v8)
      {
        Class Class = object_getClass(v8);
        if (Class != (Class)MEMORY[0x1E4F14590])
        {
          if (Class != (Class)MEMORY[0x1E4F145A8])
          {
            id v11 = (void *)MEMORY[0x185319370](v9);
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            id v12 = (id)gLogObj;
            *(_DWORD *)buf = 136446466;
            v105 = "networkd_privileged_set_settings";
            __int16 v106 = 2082;
            *(void *)v107 = v11;
            uint64_t v13 = (char *)_os_log_send_and_compose_impl();

            os_log_type_t type = OS_LOG_TYPE_ERROR;
            char v102 = 0;
            if (!__nwlog_fault(v13, &type, &v102)) {
              goto LABEL_69;
            }
            if (type == OS_LOG_TYPE_FAULT)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              os_log_type_t v14 = (id)gLogObj;
              os_log_type_t v15 = type;
              if (os_log_type_enabled(v14, type))
              {
                *(_DWORD *)buf = 136446466;
                v105 = "networkd_privileged_set_settings";
                __int16 v106 = 2082;
                *(void *)v107 = v11;
                _os_log_impl(&dword_1830D4000, v14, v15, "%{public}s received unknown type XPC %{public}s", buf, 0x16u);
              }
LABEL_68:

LABEL_69:
              if (!v13) {
                goto LABEL_71;
              }
              goto LABEL_70;
            }
            if (!v102)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              os_log_type_t v14 = (id)gLogObj;
              os_log_type_t v47 = type;
              if (os_log_type_enabled(v14, type))
              {
                *(_DWORD *)buf = 136446466;
                v105 = "networkd_privileged_set_settings";
                __int16 v106 = 2082;
                *(void *)v107 = v11;
                _os_log_impl(&dword_1830D4000, v14, v47, "%{public}s received unknown type XPC %{public}s, backtrace limit exceeded", buf, 0x16u);
              }
              goto LABEL_68;
            }
            backtrace_string = (char *)__nw_create_backtrace_string();
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            os_log_type_t v14 = (id)gLogObj;
            os_log_type_t v32 = type;
            BOOL v33 = os_log_type_enabled(v14, type);
            if (!backtrace_string)
            {
              if (v33)
              {
                *(_DWORD *)buf = 136446466;
                v105 = "networkd_privileged_set_settings";
                __int16 v106 = 2082;
                *(void *)v107 = v11;
                _os_log_impl(&dword_1830D4000, v14, v32, "%{public}s received unknown type XPC %{public}s, no backtrace", buf, 0x16u);
              }
              goto LABEL_68;
            }
            if (v33)
            {
              *(_DWORD *)buf = 136446722;
              v105 = "networkd_privileged_set_settings";
              __int16 v106 = 2082;
              *(void *)v107 = v11;
              *(_WORD *)&v107[8] = 2082;
              *(void *)&v107[10] = backtrace_string;
              _os_log_impl(&dword_1830D4000, v14, v32, "%{public}s received unknown type XPC %{public}s, dumping backtrace:%{public}s", buf, 0x20u);
            }

            free(backtrace_string);
            if (!v13)
            {
LABEL_71:
              if (v11)
              {
                free(v11);
                int v48 = 1;
LABEL_179:
                BOOL v52 = v48 == 0;
                goto LABEL_180;
              }
LABEL_178:
              int v48 = 1;
              goto LABEL_179;
            }
LABEL_70:
            free(v13);
            goto LABEL_71;
          }
          if (v9 == (void *)MEMORY[0x1E4F14520])
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            id v37 = (id)gLogObj;
            *(_DWORD *)buf = 136446210;
            v105 = "networkd_privileged_set_settings";
            os_log_type_t v38 = (char *)_os_log_send_and_compose_impl();

            os_log_type_t type = OS_LOG_TYPE_ERROR;
            char v102 = 0;
            if (!__nwlog_fault(v38, &type, &v102)) {
              goto LABEL_176;
            }
            if (type == OS_LOG_TYPE_FAULT)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              os_log_type_t v39 = (id)gLogObj;
              os_log_type_t v40 = type;
              if (os_log_type_enabled(v39, type))
              {
                *(_DWORD *)buf = 136446210;
                v105 = "networkd_privileged_set_settings";
                _os_log_impl(&dword_1830D4000, v39, v40, "%{public}s received XPC_ERROR_CONNECTION_INTERRUPTED", buf, 0xCu);
              }
            }
            else if (v102)
            {
              os_log_type_t v56 = (char *)__nw_create_backtrace_string();
              os_log_type_t v39 = __nwlog_obj();
              os_log_type_t v57 = type;
              BOOL v58 = os_log_type_enabled(v39, type);
              if (v56)
              {
                if (v58)
                {
                  *(_DWORD *)buf = 136446466;
                  v105 = "networkd_privileged_set_settings";
                  __int16 v106 = 2082;
                  *(void *)v107 = v56;
                  _os_log_impl(&dword_1830D4000, v39, v57, "%{public}s received XPC_ERROR_CONNECTION_INTERRUPTED, dumping backtrace:%{public}s", buf, 0x16u);
                }

                free(v56);
                if (!v38) {
                  goto LABEL_178;
                }
                goto LABEL_177;
              }
              if (v58)
              {
                *(_DWORD *)buf = 136446210;
                v105 = "networkd_privileged_set_settings";
                _os_log_impl(&dword_1830D4000, v39, v57, "%{public}s received XPC_ERROR_CONNECTION_INTERRUPTED, no backtrace", buf, 0xCu);
              }
            }
            else
            {
              os_log_type_t v39 = __nwlog_obj();
              os_log_type_t v73 = type;
              if (os_log_type_enabled(v39, type))
              {
                *(_DWORD *)buf = 136446210;
                v105 = "networkd_privileged_set_settings";
                _os_log_impl(&dword_1830D4000, v39, v73, "%{public}s received XPC_ERROR_CONNECTION_INTERRUPTED, backtrace limit exceeded", buf, 0xCu);
              }
            }
          }
          else
          {
            if (v9 == (void *)MEMORY[0x1E4F14528])
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              os_log_type_t v55 = (id)gLogObj;
              if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136446210;
                v105 = "networkd_privileged_set_settings";
                _os_log_impl(&dword_1830D4000, v55, OS_LOG_TYPE_ERROR, "%{public}s received XPC_ERROR_CONNECTION_INVALID", buf, 0xCu);
              }

              goto LABEL_178;
            }
            if (v9 != (void *)MEMORY[0x1E4F14550])
            {
              id v11 = (void *)MEMORY[0x185319370](v9);
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              id v29 = (id)gLogObj;
              *(_DWORD *)buf = 136446466;
              v105 = "networkd_privileged_set_settings";
              __int16 v106 = 2082;
              *(void *)v107 = v11;
              uint64_t v13 = (char *)_os_log_send_and_compose_impl();

              os_log_type_t type = OS_LOG_TYPE_ERROR;
              char v102 = 0;
              if (!__nwlog_fault(v13, &type, &v102)) {
                goto LABEL_69;
              }
              if (type == OS_LOG_TYPE_FAULT)
              {
                os_log_type_t v14 = __nwlog_obj();
                os_log_type_t v30 = type;
                if (os_log_type_enabled(v14, type))
                {
                  *(_DWORD *)buf = 136446466;
                  v105 = "networkd_privileged_set_settings";
                  __int16 v106 = 2082;
                  *(void *)v107 = v11;
                  _os_log_impl(&dword_1830D4000, v14, v30, "%{public}s received returned unknown XPC error %{public}s", buf, 0x16u);
                }
                goto LABEL_68;
              }
              if (!v102)
              {
                os_log_type_t v14 = __nwlog_obj();
                os_log_type_t v80 = type;
                if (os_log_type_enabled(v14, type))
                {
                  *(_DWORD *)buf = 136446466;
                  v105 = "networkd_privileged_set_settings";
                  __int16 v106 = 2082;
                  *(void *)v107 = v11;
                  _os_log_impl(&dword_1830D4000, v14, v80, "%{public}s received returned unknown XPC error %{public}s, backtrace limit exceeded", buf, 0x16u);
                }
                goto LABEL_68;
              }
              os_log_type_t v61 = (char *)__nw_create_backtrace_string();
              os_log_type_t v14 = __nwlog_obj();
              os_log_type_t v62 = type;
              BOOL v63 = os_log_type_enabled(v14, type);
              if (!v61)
              {
                if (v63)
                {
                  *(_DWORD *)buf = 136446466;
                  v105 = "networkd_privileged_set_settings";
                  __int16 v106 = 2082;
                  *(void *)v107 = v11;
                  _os_log_impl(&dword_1830D4000, v14, v62, "%{public}s received returned unknown XPC error %{public}s, no backtrace", buf, 0x16u);
                }
                goto LABEL_68;
              }
              if (v63)
              {
                *(_DWORD *)buf = 136446722;
                v105 = "networkd_privileged_set_settings";
                __int16 v106 = 2082;
                *(void *)v107 = v11;
                *(_WORD *)&v107[8] = 2082;
                *(void *)&v107[10] = v61;
                _os_log_impl(&dword_1830D4000, v14, v62, "%{public}s received returned unknown XPC error %{public}s, dumping backtrace:%{public}s", buf, 0x20u);
              }

              free(v61);
              if (!v13) {
                goto LABEL_71;
              }
              goto LABEL_70;
            }
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            id v59 = (id)gLogObj;
            *(_DWORD *)buf = 136446210;
            v105 = "networkd_privileged_set_settings";
            os_log_type_t v38 = (char *)_os_log_send_and_compose_impl();

            os_log_type_t type = OS_LOG_TYPE_ERROR;
            char v102 = 0;
            if (!__nwlog_fault(v38, &type, &v102)) {
              goto LABEL_176;
            }
            if (type == OS_LOG_TYPE_FAULT)
            {
              os_log_type_t v39 = __nwlog_obj();
              os_log_type_t v60 = type;
              if (os_log_type_enabled(v39, type))
              {
                *(_DWORD *)buf = 136446210;
                v105 = "networkd_privileged_set_settings";
                _os_log_impl(&dword_1830D4000, v39, v60, "%{public}s received XPC_ERROR_TERMINATION_IMMINENT", buf, 0xCu);
              }
            }
            else if (v102)
            {
              os_log_type_t v70 = (char *)__nw_create_backtrace_string();
              os_log_type_t v39 = __nwlog_obj();
              os_log_type_t v71 = type;
              BOOL v72 = os_log_type_enabled(v39, type);
              if (v70)
              {
                if (v72)
                {
                  *(_DWORD *)buf = 136446466;
                  v105 = "networkd_privileged_set_settings";
                  __int16 v106 = 2082;
                  *(void *)v107 = v70;
                  _os_log_impl(&dword_1830D4000, v39, v71, "%{public}s received XPC_ERROR_TERMINATION_IMMINENT, dumping backtrace:%{public}s", buf, 0x16u);
                }

                free(v70);
LABEL_176:
                if (!v38) {
                  goto LABEL_178;
                }
LABEL_177:
                free(v38);
                goto LABEL_178;
              }
              if (v72)
              {
                *(_DWORD *)buf = 136446210;
                v105 = "networkd_privileged_set_settings";
                _os_log_impl(&dword_1830D4000, v39, v71, "%{public}s received XPC_ERROR_TERMINATION_IMMINENT, no backtrace", buf, 0xCu);
              }
            }
            else
            {
              os_log_type_t v39 = __nwlog_obj();
              os_log_type_t v81 = type;
              if (os_log_type_enabled(v39, type))
              {
                *(_DWORD *)buf = 136446210;
                v105 = "networkd_privileged_set_settings";
                _os_log_impl(&dword_1830D4000, v39, v81, "%{public}s received XPC_ERROR_TERMINATION_IMMINENT, backtrace limit exceeded", buf, 0xCu);
              }
            }
          }

          goto LABEL_176;
        }
        os_log_type_t v20 = xpc_dictionary_get_value(v9, (const char *)networkd_privileged_key_result);
        BOOL v21 = v20;
        if (!v20)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          id v34 = (id)gLogObj;
          *(_DWORD *)buf = 136446210;
          v105 = "networkd_privileged_set_settings";
          BOOL v23 = (const char *)_os_log_send_and_compose_impl();

          os_log_type_t type = OS_LOG_TYPE_ERROR;
          char v102 = 0;
          if (!__nwlog_fault(v23, &type, &v102)) {
            goto LABEL_139;
          }
          if (type == OS_LOG_TYPE_FAULT)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            id v24 = (id)gLogObj;
            os_log_type_t v35 = type;
            if (os_log_type_enabled(v24, type))
            {
              *(_DWORD *)buf = 136446210;
              v105 = "networkd_privileged_set_settings";
              _os_log_impl(&dword_1830D4000, v24, v35, "%{public}s received response without result code", buf, 0xCu);
            }
            goto LABEL_138;
          }
          if (!v102)
          {
            id v24 = __nwlog_obj();
            os_log_type_t v69 = type;
            if (os_log_type_enabled(v24, type))
            {
              *(_DWORD *)buf = 136446210;
              v105 = "networkd_privileged_set_settings";
              _os_log_impl(&dword_1830D4000, v24, v69, "%{public}s received response without result code, backtrace limit exceeded", buf, 0xCu);
            }
            goto LABEL_138;
          }
          id v49 = (char *)__nw_create_backtrace_string();
          id v24 = __nwlog_obj();
          os_log_type_t v53 = type;
          BOOL v54 = os_log_type_enabled(v24, type);
          if (!v49)
          {
            if (v54)
            {
              *(_DWORD *)buf = 136446210;
              v105 = "networkd_privileged_set_settings";
              _os_log_impl(&dword_1830D4000, v24, v53, "%{public}s received response without result code, no backtrace", buf, 0xCu);
            }
            goto LABEL_138;
          }
          if (v54)
          {
            *(_DWORD *)buf = 136446466;
            v105 = "networkd_privileged_set_settings";
            __int16 v106 = 2082;
            *(void *)v107 = v49;
            _os_log_impl(&dword_1830D4000, v24, v53, "%{public}s received response without result code, dumping backtrace:%{public}s", buf, 0x16u);
          }
          goto LABEL_88;
        }
        if (object_getClass(v20) != (Class)MEMORY[0x1E4F145C0])
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          id v22 = (id)gLogObj;
          *(_DWORD *)buf = 136446210;
          v105 = "networkd_privileged_set_settings";
          BOOL v23 = (const char *)_os_log_send_and_compose_impl();

          os_log_type_t type = OS_LOG_TYPE_ERROR;
          char v102 = 0;
          if (!__nwlog_fault(v23, &type, &v102)) {
            goto LABEL_139;
          }
          if (type == OS_LOG_TYPE_FAULT)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            id v24 = (id)gLogObj;
            os_log_type_t v25 = type;
            if (os_log_type_enabled(v24, type))
            {
              *(_DWORD *)buf = 136446210;
              v105 = "networkd_privileged_set_settings";
              _os_log_impl(&dword_1830D4000, v24, v25, "%{public}s received invalid result type", buf, 0xCu);
            }
LABEL_138:

LABEL_139:
            if (!v23)
            {
LABEL_142:
              int v48 = 1;
              goto LABEL_143;
            }
            goto LABEL_140;
          }
          if (!v102)
          {
            id v24 = __nwlog_obj();
            os_log_type_t v68 = type;
            if (os_log_type_enabled(v24, type))
            {
              *(_DWORD *)buf = 136446210;
              v105 = "networkd_privileged_set_settings";
              _os_log_impl(&dword_1830D4000, v24, v68, "%{public}s received invalid result type, backtrace limit exceeded", buf, 0xCu);
            }
            goto LABEL_138;
          }
          id v49 = (char *)__nw_create_backtrace_string();
          id v24 = __nwlog_obj();
          os_log_type_t v50 = type;
          BOOL v51 = os_log_type_enabled(v24, type);
          if (!v49)
          {
            if (v51)
            {
              *(_DWORD *)buf = 136446210;
              v105 = "networkd_privileged_set_settings";
              _os_log_impl(&dword_1830D4000, v24, v50, "%{public}s received invalid result type, no backtrace", buf, 0xCu);
            }
            goto LABEL_138;
          }
          if (v51)
          {
            *(_DWORD *)buf = 136446466;
            v105 = "networkd_privileged_set_settings";
            __int16 v106 = 2082;
            *(void *)v107 = v49;
            _os_log_impl(&dword_1830D4000, v24, v50, "%{public}s received invalid result type, dumping backtrace:%{public}s", buf, 0x16u);
          }
LABEL_88:

          free(v49);
          if (!v23) {
            goto LABEL_142;
          }
LABEL_140:
          os_log_type_t v74 = (char *)v23;
LABEL_141:
          free(v74);
          goto LABEL_142;
        }
        unint64_t value = xpc_int64_get_value(v21);
        uint64_t v42 = value;
        if (!value)
        {
          int v48 = 0;
LABEL_143:

          goto LABEL_179;
        }
        if (!(value >> 31))
        {
          os_log_type_t v43 = __nwlog_obj();
          *(_DWORD *)buf = 136446466;
          v105 = "networkd_privileged_set_settings";
          __int16 v106 = 1024;
          *(_DWORD *)v107 = v42;
          BOOL v44 = (const char *)_os_log_send_and_compose_impl();

          os_log_type_t type = OS_LOG_TYPE_ERROR;
          char v102 = 0;
          if (__nwlog_fault(v44, &type, &v102))
          {
            if (type == OS_LOG_TYPE_FAULT)
            {
              os_log_type_t v45 = __nwlog_obj();
              os_log_type_t v46 = type;
              if (os_log_type_enabled(v45, type))
              {
                *(_DWORD *)buf = 136446466;
                v105 = "networkd_privileged_set_settings";
                __int16 v106 = 1024;
                *(_DWORD *)v107 = v42;
                _os_log_impl(&dword_1830D4000, v45, v46, "%{public}s received failure result code %{darwin.errno}d", buf, 0x12u);
              }
            }
            else if (v102)
            {
              v75 = (char *)__nw_create_backtrace_string();
              os_log_type_t v45 = __nwlog_obj();
              os_log_type_t v76 = type;
              BOOL v77 = os_log_type_enabled(v45, type);
              if (v75)
              {
                if (v77)
                {
                  *(_DWORD *)buf = 136446722;
                  v105 = "networkd_privileged_set_settings";
                  __int16 v106 = 1024;
                  *(_DWORD *)v107 = v42;
                  *(_WORD *)&v107[4] = 2082;
                  *(void *)&v107[6] = v75;
                  _os_log_impl(&dword_1830D4000, v45, v76, "%{public}s received failure result code %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x1Cu);
                }

                free(v75);
                if (!v44) {
                  goto LABEL_142;
                }
LABEL_190:
                os_log_type_t v74 = (char *)v44;
                goto LABEL_141;
              }
              if (v77)
              {
                *(_DWORD *)buf = 136446466;
                v105 = "networkd_privileged_set_settings";
                __int16 v106 = 1024;
                *(_DWORD *)v107 = v42;
                _os_log_impl(&dword_1830D4000, v45, v76, "%{public}s received failure result code %{darwin.errno}d, no backtrace", buf, 0x12u);
              }
            }
            else
            {
              os_log_type_t v45 = __nwlog_obj();
              os_log_type_t v82 = type;
              if (os_log_type_enabled(v45, type))
              {
                *(_DWORD *)buf = 136446466;
                v105 = "networkd_privileged_set_settings";
                __int16 v106 = 1024;
                *(_DWORD *)v107 = v42;
                _os_log_impl(&dword_1830D4000, v45, v82, "%{public}s received failure result code %{darwin.errno}d, backtrace limit exceeded", buf, 0x12u);
              }
            }
          }
LABEL_189:
          if (!v44) {
            goto LABEL_142;
          }
          goto LABEL_190;
        }
        os_log_type_t v64 = __nwlog_obj();
        v65 = networkd_privileged_result_to_string(v42);
        *(_DWORD *)buf = 136446722;
        v105 = "networkd_privileged_set_settings";
        __int16 v106 = 2048;
        *(void *)v107 = v42;
        *(_WORD *)&v107[8] = 2082;
        *(void *)&v107[10] = v65;
        BOOL v44 = (const char *)_os_log_send_and_compose_impl();

        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v102 = 0;
        if (!__nwlog_fault(v44, &type, &v102)) {
          goto LABEL_189;
        }
        if (type == OS_LOG_TYPE_FAULT)
        {
          os_log_type_t v66 = __nwlog_obj();
          os_log_type_t v67 = type;
          if (os_log_type_enabled(v66, type))
          {
            *(_DWORD *)buf = 136446722;
            v105 = "networkd_privileged_set_settings";
            __int16 v106 = 2048;
            *(void *)v107 = v42;
            *(_WORD *)&v107[8] = 2082;
            *(void *)&v107[10] = v65;
            _os_log_impl(&dword_1830D4000, v66, v67, "%{public}s received internal failure result code: [%lld] %{public}s", buf, 0x20u);
          }
        }
        else if (v102)
        {
          os_log_type_t v78 = (char *)__nw_create_backtrace_string();
          os_log_type_t v66 = __nwlog_obj();
          os_log_type_t v101 = type;
          BOOL v79 = os_log_type_enabled(v66, type);
          if (v78)
          {
            if (v79)
            {
              *(_DWORD *)buf = 136446978;
              v105 = "networkd_privileged_set_settings";
              __int16 v106 = 2048;
              *(void *)v107 = v42;
              *(_WORD *)&v107[8] = 2082;
              *(void *)&v107[10] = v65;
              __int16 v108 = 2082;
              v109 = v78;
              _os_log_impl(&dword_1830D4000, v66, v101, "%{public}s received internal failure result code: [%lld] %{public}s, dumping backtrace:%{public}s", buf, 0x2Au);
            }

            free(v78);
            goto LABEL_189;
          }
          if (v79)
          {
            *(_DWORD *)buf = 136446722;
            v105 = "networkd_privileged_set_settings";
            __int16 v106 = 2048;
            *(void *)v107 = v42;
            *(_WORD *)&v107[8] = 2082;
            *(void *)&v107[10] = v65;
            _os_log_impl(&dword_1830D4000, v66, v101, "%{public}s received internal failure result code: [%lld] %{public}s, no backtrace", buf, 0x20u);
          }
        }
        else
        {
          os_log_type_t v66 = __nwlog_obj();
          os_log_type_t v83 = type;
          if (os_log_type_enabled(v66, type))
          {
            *(_DWORD *)buf = 136446722;
            v105 = "networkd_privileged_set_settings";
            __int16 v106 = 2048;
            *(void *)v107 = v42;
            *(_WORD *)&v107[8] = 2082;
            *(void *)&v107[10] = v65;
            _os_log_impl(&dword_1830D4000, v66, v83, "%{public}s received internal failure result code: [%lld] %{public}s, backtrace limit exceeded", buf, 0x20u);
          }
        }

        goto LABEL_189;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v16 = (id)gLogObj;
      *(_DWORD *)buf = 136446210;
      v105 = "networkd_privileged_set_settings";
      id v17 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v102 = 0;
      if (__nwlog_fault(v17, &type, &v102))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v18 = (id)gLogObj;
          os_log_type_t v19 = type;
          if (os_log_type_enabled(v18, type))
          {
            *(_DWORD *)buf = 136446210;
            v105 = "networkd_privileged_set_settings";
            _os_log_impl(&dword_1830D4000, v18, v19, "%{public}s received NULL response", buf, 0xCu);
          }
        }
        else if (v102)
        {
          BOOL v26 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v18 = (id)gLogObj;
          os_log_type_t v27 = type;
          BOOL v28 = os_log_type_enabled(v18, type);
          if (v26)
          {
            if (v28)
            {
              *(_DWORD *)buf = 136446466;
              v105 = "networkd_privileged_set_settings";
              __int16 v106 = 2082;
              *(void *)v107 = v26;
              _os_log_impl(&dword_1830D4000, v18, v27, "%{public}s received NULL response, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(v26);
            if (!v17) {
              goto LABEL_83;
            }
            goto LABEL_82;
          }
          if (v28)
          {
            *(_DWORD *)buf = 136446210;
            v105 = "networkd_privileged_set_settings";
            _os_log_impl(&dword_1830D4000, v18, v27, "%{public}s received NULL response, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v18 = (id)gLogObj;
          os_log_type_t v36 = type;
          if (os_log_type_enabled(v18, type))
          {
            *(_DWORD *)buf = 136446210;
            v105 = "networkd_privileged_set_settings";
            _os_log_impl(&dword_1830D4000, v18, v36, "%{public}s received NULL response, backtrace limit exceeded", buf, 0xCu);
          }
        }
      }
      if (!v17)
      {
LABEL_83:
        BOOL v52 = 0;
LABEL_180:

LABEL_181:
        goto LABEL_182;
      }
LABEL_82:
      free(v17);
      goto LABEL_83;
    }
    uint64_t v89 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v105 = "networkd_privileged_set_settings";
    v90 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v102 = 0;
    if (__nwlog_fault(v90, &type, &v102))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v91 = __nwlog_obj();
        os_log_type_t v92 = type;
        if (os_log_type_enabled(v91, type))
        {
          *(_DWORD *)buf = 136446210;
          v105 = "networkd_privileged_set_settings";
          _os_log_impl(&dword_1830D4000, v91, v92, "%{public}s xpc_dictionary_create failed", buf, 0xCu);
        }
      }
      else if (v102)
      {
        v96 = (char *)__nw_create_backtrace_string();
        v91 = __nwlog_obj();
        os_log_type_t v97 = type;
        BOOL v98 = os_log_type_enabled(v91, type);
        if (v96)
        {
          if (v98)
          {
            *(_DWORD *)buf = 136446466;
            v105 = "networkd_privileged_set_settings";
            __int16 v106 = 2082;
            *(void *)v107 = v96;
            _os_log_impl(&dword_1830D4000, v91, v97, "%{public}s xpc_dictionary_create failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v96);
          goto LABEL_226;
        }
        if (v98)
        {
          *(_DWORD *)buf = 136446210;
          v105 = "networkd_privileged_set_settings";
          _os_log_impl(&dword_1830D4000, v91, v97, "%{public}s xpc_dictionary_create failed, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        v91 = __nwlog_obj();
        os_log_type_t v100 = type;
        if (os_log_type_enabled(v91, type))
        {
          *(_DWORD *)buf = 136446210;
          v105 = "networkd_privileged_set_settings";
          _os_log_impl(&dword_1830D4000, v91, v100, "%{public}s xpc_dictionary_create failed, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_226:
    if (v90) {
      free(v90);
    }
    BOOL v52 = 0;
    goto LABEL_181;
  }
  __int16 v85 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v105 = "networkd_privileged_set_settings";
  v86 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v102 = 0;
  if (__nwlog_fault(v86, &type, &v102))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int16 v87 = __nwlog_obj();
      os_log_type_t v88 = type;
      if (os_log_type_enabled(v87, type))
      {
        *(_DWORD *)buf = 136446210;
        v105 = "networkd_privileged_set_settings";
        _os_log_impl(&dword_1830D4000, v87, v88, "%{public}s called with null key", buf, 0xCu);
      }
    }
    else if (v102)
    {
      v93 = (char *)__nw_create_backtrace_string();
      __int16 v87 = __nwlog_obj();
      os_log_type_t v94 = type;
      BOOL v95 = os_log_type_enabled(v87, type);
      if (v93)
      {
        if (v95)
        {
          *(_DWORD *)buf = 136446466;
          v105 = "networkd_privileged_set_settings";
          __int16 v106 = 2082;
          *(void *)v107 = v93;
          _os_log_impl(&dword_1830D4000, v87, v94, "%{public}s called with null key, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v93);
        goto LABEL_220;
      }
      if (v95)
      {
        *(_DWORD *)buf = 136446210;
        v105 = "networkd_privileged_set_settings";
        _os_log_impl(&dword_1830D4000, v87, v94, "%{public}s called with null key, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __int16 v87 = __nwlog_obj();
      os_log_type_t v99 = type;
      if (os_log_type_enabled(v87, type))
      {
        *(_DWORD *)buf = 136446210;
        v105 = "networkd_privileged_set_settings";
        _os_log_impl(&dword_1830D4000, v87, v99, "%{public}s called with null key, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_220:
  if (v86) {
    free(v86);
  }
  BOOL v52 = 0;
LABEL_182:

  return v52;
}

void sub_1835FA544(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL networkd_privileged_reload_managed_network_settings()
{
  uint64_t v96 = *MEMORY[0x1E4F143B8];
  xpc_object_t v0 = xpc_dictionary_create(0, 0, 0);
  v1 = v0;
  if (v0)
  {
    xpc_dictionary_set_uint64(v0, (const char *)networkd_privileged_key_type, 9uLL);
    xpc_object_t v2 = networkd_privileged_send_sync_inner((uint64_t)"networkd_privileged_reload_managed_network_settings", v1);
    id v3 = v2;
    if (v2)
    {
      Class Class = object_getClass(v2);
      if (Class != (Class)MEMORY[0x1E4F14590])
      {
        if (Class != (Class)MEMORY[0x1E4F145A8])
        {
          id v5 = (void *)MEMORY[0x185319370](v3);
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          id v6 = (id)gLogObj;
          *(_DWORD *)buf = 136446466;
          v91 = "networkd_privileged_reload_managed_network_settings";
          __int16 v92 = 2082;
          *(void *)v93 = v5;
          id v7 = (char *)_os_log_send_and_compose_impl();

          os_log_type_t type = OS_LOG_TYPE_ERROR;
          char v88 = 0;
          if (!__nwlog_fault(v7, &type, &v88)) {
            goto LABEL_65;
          }
          if (type == OS_LOG_TYPE_FAULT)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            xpc_object_t v8 = (id)gLogObj;
            os_log_type_t v9 = type;
            if (os_log_type_enabled(v8, type))
            {
              *(_DWORD *)buf = 136446466;
              v91 = "networkd_privileged_reload_managed_network_settings";
              __int16 v92 = 2082;
              *(void *)v93 = v5;
              _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s received unknown type XPC %{public}s", buf, 0x16u);
            }
LABEL_64:

LABEL_65:
            if (!v7) {
              goto LABEL_67;
            }
            goto LABEL_66;
          }
          if (!v88)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            xpc_object_t v8 = (id)gLogObj;
            os_log_type_t v41 = type;
            if (os_log_type_enabled(v8, type))
            {
              *(_DWORD *)buf = 136446466;
              v91 = "networkd_privileged_reload_managed_network_settings";
              __int16 v92 = 2082;
              *(void *)v93 = v5;
              _os_log_impl(&dword_1830D4000, v8, v41, "%{public}s received unknown type XPC %{public}s, backtrace limit exceeded", buf, 0x16u);
            }
            goto LABEL_64;
          }
          backtrace_string = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          xpc_object_t v8 = (id)gLogObj;
          os_log_type_t v26 = type;
          BOOL v27 = os_log_type_enabled(v8, type);
          if (!backtrace_string)
          {
            if (v27)
            {
              *(_DWORD *)buf = 136446466;
              v91 = "networkd_privileged_reload_managed_network_settings";
              __int16 v92 = 2082;
              *(void *)v93 = v5;
              _os_log_impl(&dword_1830D4000, v8, v26, "%{public}s received unknown type XPC %{public}s, no backtrace", buf, 0x16u);
            }
            goto LABEL_64;
          }
          if (v27)
          {
            *(_DWORD *)buf = 136446722;
            v91 = "networkd_privileged_reload_managed_network_settings";
            __int16 v92 = 2082;
            *(void *)v93 = v5;
            *(_WORD *)&v93[8] = 2082;
            *(void *)&v93[10] = backtrace_string;
            _os_log_impl(&dword_1830D4000, v8, v26, "%{public}s received unknown type XPC %{public}s, dumping backtrace:%{public}s", buf, 0x20u);
          }

          free(backtrace_string);
          if (!v7)
          {
LABEL_67:
            if (v5)
            {
              free(v5);
              int v42 = 1;
LABEL_175:
              BOOL v46 = v42 == 0;
              goto LABEL_176;
            }
LABEL_174:
            int v42 = 1;
            goto LABEL_175;
          }
LABEL_66:
          free(v7);
          goto LABEL_67;
        }
        if (v3 == (void *)MEMORY[0x1E4F14520])
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          id v31 = (id)gLogObj;
          *(_DWORD *)buf = 136446210;
          v91 = "networkd_privileged_reload_managed_network_settings";
          os_log_type_t v32 = (char *)_os_log_send_and_compose_impl();

          os_log_type_t type = OS_LOG_TYPE_ERROR;
          char v88 = 0;
          if (!__nwlog_fault(v32, &type, &v88)) {
            goto LABEL_172;
          }
          if (type == OS_LOG_TYPE_FAULT)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            BOOL v33 = (id)gLogObj;
            os_log_type_t v34 = type;
            if (os_log_type_enabled(v33, type))
            {
              *(_DWORD *)buf = 136446210;
              v91 = "networkd_privileged_reload_managed_network_settings";
              _os_log_impl(&dword_1830D4000, v33, v34, "%{public}s received XPC_ERROR_CONNECTION_INTERRUPTED", buf, 0xCu);
            }
          }
          else if (v88)
          {
            os_log_type_t v50 = (char *)__nw_create_backtrace_string();
            BOOL v33 = __nwlog_obj();
            os_log_type_t v51 = type;
            BOOL v52 = os_log_type_enabled(v33, type);
            if (v50)
            {
              if (v52)
              {
                *(_DWORD *)buf = 136446466;
                v91 = "networkd_privileged_reload_managed_network_settings";
                __int16 v92 = 2082;
                *(void *)v93 = v50;
                _os_log_impl(&dword_1830D4000, v33, v51, "%{public}s received XPC_ERROR_CONNECTION_INTERRUPTED, dumping backtrace:%{public}s", buf, 0x16u);
              }

              free(v50);
              if (!v32) {
                goto LABEL_174;
              }
              goto LABEL_173;
            }
            if (v52)
            {
              *(_DWORD *)buf = 136446210;
              v91 = "networkd_privileged_reload_managed_network_settings";
              _os_log_impl(&dword_1830D4000, v33, v51, "%{public}s received XPC_ERROR_CONNECTION_INTERRUPTED, no backtrace", buf, 0xCu);
            }
          }
          else
          {
            BOOL v33 = __nwlog_obj();
            os_log_type_t v67 = type;
            if (os_log_type_enabled(v33, type))
            {
              *(_DWORD *)buf = 136446210;
              v91 = "networkd_privileged_reload_managed_network_settings";
              _os_log_impl(&dword_1830D4000, v33, v67, "%{public}s received XPC_ERROR_CONNECTION_INTERRUPTED, backtrace limit exceeded", buf, 0xCu);
            }
          }
        }
        else
        {
          if (v3 == (void *)MEMORY[0x1E4F14528])
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            id v49 = (id)gLogObj;
            if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136446210;
              v91 = "networkd_privileged_reload_managed_network_settings";
              _os_log_impl(&dword_1830D4000, v49, OS_LOG_TYPE_ERROR, "%{public}s received XPC_ERROR_CONNECTION_INVALID", buf, 0xCu);
            }

            goto LABEL_174;
          }
          if (v3 != (void *)MEMORY[0x1E4F14550])
          {
            id v5 = (void *)MEMORY[0x185319370](v3);
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            id v23 = (id)gLogObj;
            *(_DWORD *)buf = 136446466;
            v91 = "networkd_privileged_reload_managed_network_settings";
            __int16 v92 = 2082;
            *(void *)v93 = v5;
            id v7 = (char *)_os_log_send_and_compose_impl();

            os_log_type_t type = OS_LOG_TYPE_ERROR;
            char v88 = 0;
            if (!__nwlog_fault(v7, &type, &v88)) {
              goto LABEL_65;
            }
            if (type == OS_LOG_TYPE_FAULT)
            {
              xpc_object_t v8 = __nwlog_obj();
              os_log_type_t v24 = type;
              if (os_log_type_enabled(v8, type))
              {
                *(_DWORD *)buf = 136446466;
                v91 = "networkd_privileged_reload_managed_network_settings";
                __int16 v92 = 2082;
                *(void *)v93 = v5;
                _os_log_impl(&dword_1830D4000, v8, v24, "%{public}s received returned unknown XPC error %{public}s", buf, 0x16u);
              }
              goto LABEL_64;
            }
            if (!v88)
            {
              xpc_object_t v8 = __nwlog_obj();
              os_log_type_t v75 = type;
              if (os_log_type_enabled(v8, type))
              {
                *(_DWORD *)buf = 136446466;
                v91 = "networkd_privileged_reload_managed_network_settings";
                __int16 v92 = 2082;
                *(void *)v93 = v5;
                _os_log_impl(&dword_1830D4000, v8, v75, "%{public}s received returned unknown XPC error %{public}s, backtrace limit exceeded", buf, 0x16u);
              }
              goto LABEL_64;
            }
            os_log_type_t v55 = (char *)__nw_create_backtrace_string();
            xpc_object_t v8 = __nwlog_obj();
            os_log_type_t v56 = type;
            BOOL v57 = os_log_type_enabled(v8, type);
            if (!v55)
            {
              if (v57)
              {
                *(_DWORD *)buf = 136446466;
                v91 = "networkd_privileged_reload_managed_network_settings";
                __int16 v92 = 2082;
                *(void *)v93 = v5;
                _os_log_impl(&dword_1830D4000, v8, v56, "%{public}s received returned unknown XPC error %{public}s, no backtrace", buf, 0x16u);
              }
              goto LABEL_64;
            }
            if (v57)
            {
              *(_DWORD *)buf = 136446722;
              v91 = "networkd_privileged_reload_managed_network_settings";
              __int16 v92 = 2082;
              *(void *)v93 = v5;
              *(_WORD *)&v93[8] = 2082;
              *(void *)&v93[10] = v55;
              _os_log_impl(&dword_1830D4000, v8, v56, "%{public}s received returned unknown XPC error %{public}s, dumping backtrace:%{public}s", buf, 0x20u);
            }

            free(v55);
            if (!v7) {
              goto LABEL_67;
            }
            goto LABEL_66;
          }
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          id v53 = (id)gLogObj;
          *(_DWORD *)buf = 136446210;
          v91 = "networkd_privileged_reload_managed_network_settings";
          os_log_type_t v32 = (char *)_os_log_send_and_compose_impl();

          os_log_type_t type = OS_LOG_TYPE_ERROR;
          char v88 = 0;
          if (!__nwlog_fault(v32, &type, &v88)) {
            goto LABEL_172;
          }
          if (type == OS_LOG_TYPE_FAULT)
          {
            BOOL v33 = __nwlog_obj();
            os_log_type_t v54 = type;
            if (os_log_type_enabled(v33, type))
            {
              *(_DWORD *)buf = 136446210;
              v91 = "networkd_privileged_reload_managed_network_settings";
              _os_log_impl(&dword_1830D4000, v33, v54, "%{public}s received XPC_ERROR_TERMINATION_IMMINENT", buf, 0xCu);
            }
          }
          else if (v88)
          {
            os_log_type_t v64 = (char *)__nw_create_backtrace_string();
            BOOL v33 = __nwlog_obj();
            os_log_type_t v65 = type;
            BOOL v66 = os_log_type_enabled(v33, type);
            if (v64)
            {
              if (v66)
              {
                *(_DWORD *)buf = 136446466;
                v91 = "networkd_privileged_reload_managed_network_settings";
                __int16 v92 = 2082;
                *(void *)v93 = v64;
                _os_log_impl(&dword_1830D4000, v33, v65, "%{public}s received XPC_ERROR_TERMINATION_IMMINENT, dumping backtrace:%{public}s", buf, 0x16u);
              }

              free(v64);
LABEL_172:
              if (!v32) {
                goto LABEL_174;
              }
LABEL_173:
              free(v32);
              goto LABEL_174;
            }
            if (v66)
            {
              *(_DWORD *)buf = 136446210;
              v91 = "networkd_privileged_reload_managed_network_settings";
              _os_log_impl(&dword_1830D4000, v33, v65, "%{public}s received XPC_ERROR_TERMINATION_IMMINENT, no backtrace", buf, 0xCu);
            }
          }
          else
          {
            BOOL v33 = __nwlog_obj();
            os_log_type_t v76 = type;
            if (os_log_type_enabled(v33, type))
            {
              *(_DWORD *)buf = 136446210;
              v91 = "networkd_privileged_reload_managed_network_settings";
              _os_log_impl(&dword_1830D4000, v33, v76, "%{public}s received XPC_ERROR_TERMINATION_IMMINENT, backtrace limit exceeded", buf, 0xCu);
            }
          }
        }

        goto LABEL_172;
      }
      os_log_type_t v14 = xpc_dictionary_get_value(v3, (const char *)networkd_privileged_key_result);
      os_log_type_t v15 = v14;
      if (!v14)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v28 = (id)gLogObj;
        *(_DWORD *)buf = 136446210;
        v91 = "networkd_privileged_reload_managed_network_settings";
        id v17 = (const char *)_os_log_send_and_compose_impl();

        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v88 = 0;
        if (!__nwlog_fault(v17, &type, &v88)) {
          goto LABEL_135;
        }
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v18 = (id)gLogObj;
          os_log_type_t v29 = type;
          if (os_log_type_enabled(v18, type))
          {
            *(_DWORD *)buf = 136446210;
            v91 = "networkd_privileged_reload_managed_network_settings";
            _os_log_impl(&dword_1830D4000, v18, v29, "%{public}s received response without result code", buf, 0xCu);
          }
          goto LABEL_134;
        }
        if (!v88)
        {
          os_log_type_t v18 = __nwlog_obj();
          os_log_type_t v63 = type;
          if (os_log_type_enabled(v18, type))
          {
            *(_DWORD *)buf = 136446210;
            v91 = "networkd_privileged_reload_managed_network_settings";
            _os_log_impl(&dword_1830D4000, v18, v63, "%{public}s received response without result code, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_134;
        }
        os_log_type_t v43 = (char *)__nw_create_backtrace_string();
        os_log_type_t v18 = __nwlog_obj();
        os_log_type_t v47 = type;
        BOOL v48 = os_log_type_enabled(v18, type);
        if (!v43)
        {
          if (v48)
          {
            *(_DWORD *)buf = 136446210;
            v91 = "networkd_privileged_reload_managed_network_settings";
            _os_log_impl(&dword_1830D4000, v18, v47, "%{public}s received response without result code, no backtrace", buf, 0xCu);
          }
          goto LABEL_134;
        }
        if (v48)
        {
          *(_DWORD *)buf = 136446466;
          v91 = "networkd_privileged_reload_managed_network_settings";
          __int16 v92 = 2082;
          *(void *)v93 = v43;
          _os_log_impl(&dword_1830D4000, v18, v47, "%{public}s received response without result code, dumping backtrace:%{public}s", buf, 0x16u);
        }
        goto LABEL_84;
      }
      if (object_getClass(v14) != (Class)MEMORY[0x1E4F145C0])
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v16 = (id)gLogObj;
        *(_DWORD *)buf = 136446210;
        v91 = "networkd_privileged_reload_managed_network_settings";
        id v17 = (const char *)_os_log_send_and_compose_impl();

        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v88 = 0;
        if (!__nwlog_fault(v17, &type, &v88)) {
          goto LABEL_135;
        }
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v18 = (id)gLogObj;
          os_log_type_t v19 = type;
          if (os_log_type_enabled(v18, type))
          {
            *(_DWORD *)buf = 136446210;
            v91 = "networkd_privileged_reload_managed_network_settings";
            _os_log_impl(&dword_1830D4000, v18, v19, "%{public}s received invalid result type", buf, 0xCu);
          }
LABEL_134:

LABEL_135:
          if (!v17)
          {
LABEL_138:
            int v42 = 1;
            goto LABEL_139;
          }
          goto LABEL_136;
        }
        if (!v88)
        {
          os_log_type_t v18 = __nwlog_obj();
          os_log_type_t v62 = type;
          if (os_log_type_enabled(v18, type))
          {
            *(_DWORD *)buf = 136446210;
            v91 = "networkd_privileged_reload_managed_network_settings";
            _os_log_impl(&dword_1830D4000, v18, v62, "%{public}s received invalid result type, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_134;
        }
        os_log_type_t v43 = (char *)__nw_create_backtrace_string();
        os_log_type_t v18 = __nwlog_obj();
        os_log_type_t v44 = type;
        BOOL v45 = os_log_type_enabled(v18, type);
        if (!v43)
        {
          if (v45)
          {
            *(_DWORD *)buf = 136446210;
            v91 = "networkd_privileged_reload_managed_network_settings";
            _os_log_impl(&dword_1830D4000, v18, v44, "%{public}s received invalid result type, no backtrace", buf, 0xCu);
          }
          goto LABEL_134;
        }
        if (v45)
        {
          *(_DWORD *)buf = 136446466;
          v91 = "networkd_privileged_reload_managed_network_settings";
          __int16 v92 = 2082;
          *(void *)v93 = v43;
          _os_log_impl(&dword_1830D4000, v18, v44, "%{public}s received invalid result type, dumping backtrace:%{public}s", buf, 0x16u);
        }
LABEL_84:

        free(v43);
        if (!v17) {
          goto LABEL_138;
        }
LABEL_136:
        os_log_type_t v68 = (char *)v17;
LABEL_137:
        free(v68);
        goto LABEL_138;
      }
      unint64_t value = xpc_int64_get_value(v15);
      uint64_t v36 = value;
      if (!value)
      {
        int v42 = 0;
LABEL_139:

        goto LABEL_175;
      }
      if (!(value >> 31))
      {
        id v37 = __nwlog_obj();
        *(_DWORD *)buf = 136446466;
        v91 = "networkd_privileged_reload_managed_network_settings";
        __int16 v92 = 1024;
        *(_DWORD *)v93 = v36;
        os_log_type_t v38 = (const char *)_os_log_send_and_compose_impl();

        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v88 = 0;
        if (__nwlog_fault(v38, &type, &v88))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            os_log_type_t v39 = __nwlog_obj();
            os_log_type_t v40 = type;
            if (os_log_type_enabled(v39, type))
            {
              *(_DWORD *)buf = 136446466;
              v91 = "networkd_privileged_reload_managed_network_settings";
              __int16 v92 = 1024;
              *(_DWORD *)v93 = v36;
              _os_log_impl(&dword_1830D4000, v39, v40, "%{public}s received failure result code %{darwin.errno}d", buf, 0x12u);
            }
          }
          else if (v88)
          {
            os_log_type_t v69 = (char *)__nw_create_backtrace_string();
            os_log_type_t v39 = __nwlog_obj();
            os_log_type_t v70 = type;
            BOOL v71 = os_log_type_enabled(v39, type);
            if (v69)
            {
              if (v71)
              {
                *(_DWORD *)buf = 136446722;
                v91 = "networkd_privileged_reload_managed_network_settings";
                __int16 v92 = 1024;
                *(_DWORD *)v93 = v36;
                *(_WORD *)&v93[4] = 2082;
                *(void *)&v93[6] = v69;
                _os_log_impl(&dword_1830D4000, v39, v70, "%{public}s received failure result code %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x1Cu);
              }

              free(v69);
              if (!v38) {
                goto LABEL_138;
              }
LABEL_185:
              os_log_type_t v68 = (char *)v38;
              goto LABEL_137;
            }
            if (v71)
            {
              *(_DWORD *)buf = 136446466;
              v91 = "networkd_privileged_reload_managed_network_settings";
              __int16 v92 = 1024;
              *(_DWORD *)v93 = v36;
              _os_log_impl(&dword_1830D4000, v39, v70, "%{public}s received failure result code %{darwin.errno}d, no backtrace", buf, 0x12u);
            }
          }
          else
          {
            os_log_type_t v39 = __nwlog_obj();
            os_log_type_t v77 = type;
            if (os_log_type_enabled(v39, type))
            {
              *(_DWORD *)buf = 136446466;
              v91 = "networkd_privileged_reload_managed_network_settings";
              __int16 v92 = 1024;
              *(_DWORD *)v93 = v36;
              _os_log_impl(&dword_1830D4000, v39, v77, "%{public}s received failure result code %{darwin.errno}d, backtrace limit exceeded", buf, 0x12u);
            }
          }
        }
LABEL_184:
        if (!v38) {
          goto LABEL_138;
        }
        goto LABEL_185;
      }
      BOOL v58 = __nwlog_obj();
      id v59 = networkd_privileged_result_to_string(v36);
      *(_DWORD *)buf = 136446722;
      v91 = "networkd_privileged_reload_managed_network_settings";
      __int16 v92 = 2048;
      *(void *)v93 = v36;
      *(_WORD *)&v93[8] = 2082;
      *(void *)&v93[10] = v59;
      os_log_type_t v38 = (const char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v88 = 0;
      if (!__nwlog_fault(v38, &type, &v88)) {
        goto LABEL_184;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v60 = __nwlog_obj();
        os_log_type_t v61 = type;
        if (os_log_type_enabled(v60, type))
        {
          *(_DWORD *)buf = 136446722;
          v91 = "networkd_privileged_reload_managed_network_settings";
          __int16 v92 = 2048;
          *(void *)v93 = v36;
          *(_WORD *)&v93[8] = 2082;
          *(void *)&v93[10] = v59;
          _os_log_impl(&dword_1830D4000, v60, v61, "%{public}s received internal failure result code: [%lld] %{public}s", buf, 0x20u);
        }
      }
      else if (v88)
      {
        BOOL v72 = (char *)__nw_create_backtrace_string();
        os_log_type_t v60 = __nwlog_obj();
        os_log_type_t v73 = type;
        BOOL v74 = os_log_type_enabled(v60, type);
        if (v72)
        {
          if (v74)
          {
            *(_DWORD *)buf = 136446978;
            v91 = "networkd_privileged_reload_managed_network_settings";
            __int16 v92 = 2048;
            *(void *)v93 = v36;
            *(_WORD *)&v93[8] = 2082;
            *(void *)&v93[10] = v59;
            __int16 v94 = 2082;
            BOOL v95 = v72;
            _os_log_impl(&dword_1830D4000, v60, v73, "%{public}s received internal failure result code: [%lld] %{public}s, dumping backtrace:%{public}s", buf, 0x2Au);
          }

          free(v72);
          goto LABEL_184;
        }
        if (v74)
        {
          *(_DWORD *)buf = 136446722;
          v91 = "networkd_privileged_reload_managed_network_settings";
          __int16 v92 = 2048;
          *(void *)v93 = v36;
          *(_WORD *)&v93[8] = 2082;
          *(void *)&v93[10] = v59;
          _os_log_impl(&dword_1830D4000, v60, v73, "%{public}s received internal failure result code: [%lld] %{public}s, no backtrace", buf, 0x20u);
        }
      }
      else
      {
        os_log_type_t v60 = __nwlog_obj();
        os_log_type_t v78 = type;
        if (os_log_type_enabled(v60, type))
        {
          *(_DWORD *)buf = 136446722;
          v91 = "networkd_privileged_reload_managed_network_settings";
          __int16 v92 = 2048;
          *(void *)v93 = v36;
          *(_WORD *)&v93[8] = 2082;
          *(void *)&v93[10] = v59;
          _os_log_impl(&dword_1830D4000, v60, v78, "%{public}s received internal failure result code: [%lld] %{public}s, backtrace limit exceeded", buf, 0x20u);
        }
      }

      goto LABEL_184;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v10 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v91 = "networkd_privileged_reload_managed_network_settings";
    id v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v88 = 0;
    if (__nwlog_fault(v11, &type, &v88))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v12 = (id)gLogObj;
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          v91 = "networkd_privileged_reload_managed_network_settings";
          _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s received NULL response", buf, 0xCu);
        }
      }
      else if (v88)
      {
        os_log_type_t v20 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v12 = (id)gLogObj;
        os_log_type_t v21 = type;
        BOOL v22 = os_log_type_enabled(v12, type);
        if (v20)
        {
          if (v22)
          {
            *(_DWORD *)buf = 136446466;
            v91 = "networkd_privileged_reload_managed_network_settings";
            __int16 v92 = 2082;
            *(void *)v93 = v20;
            _os_log_impl(&dword_1830D4000, v12, v21, "%{public}s received NULL response, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v20);
          if (!v11) {
            goto LABEL_79;
          }
          goto LABEL_78;
        }
        if (v22)
        {
          *(_DWORD *)buf = 136446210;
          v91 = "networkd_privileged_reload_managed_network_settings";
          _os_log_impl(&dword_1830D4000, v12, v21, "%{public}s received NULL response, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v12 = (id)gLogObj;
        os_log_type_t v30 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          v91 = "networkd_privileged_reload_managed_network_settings";
          _os_log_impl(&dword_1830D4000, v12, v30, "%{public}s received NULL response, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
    if (!v11)
    {
LABEL_79:
      BOOL v46 = 0;
LABEL_176:

      goto LABEL_177;
    }
LABEL_78:
    free(v11);
    goto LABEL_79;
  }
  os_log_type_t v80 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v91 = "networkd_privileged_reload_managed_network_settings";
  os_log_type_t v81 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v88 = 0;
  if (__nwlog_fault(v81, &type, &v88))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v82 = __nwlog_obj();
      os_log_type_t v83 = type;
      if (os_log_type_enabled(v82, type))
      {
        *(_DWORD *)buf = 136446210;
        v91 = "networkd_privileged_reload_managed_network_settings";
        _os_log_impl(&dword_1830D4000, v82, v83, "%{public}s xpc_dictionary_create failed", buf, 0xCu);
      }
    }
    else if (v88)
    {
      v84 = (char *)__nw_create_backtrace_string();
      os_log_type_t v82 = __nwlog_obj();
      os_log_type_t v85 = type;
      BOOL v86 = os_log_type_enabled(v82, type);
      if (v84)
      {
        if (v86)
        {
          *(_DWORD *)buf = 136446466;
          v91 = "networkd_privileged_reload_managed_network_settings";
          __int16 v92 = 2082;
          *(void *)v93 = v84;
          _os_log_impl(&dword_1830D4000, v82, v85, "%{public}s xpc_dictionary_create failed, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v84);
        goto LABEL_202;
      }
      if (v86)
      {
        *(_DWORD *)buf = 136446210;
        v91 = "networkd_privileged_reload_managed_network_settings";
        _os_log_impl(&dword_1830D4000, v82, v85, "%{public}s xpc_dictionary_create failed, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v82 = __nwlog_obj();
      os_log_type_t v87 = type;
      if (os_log_type_enabled(v82, type))
      {
        *(_DWORD *)buf = 136446210;
        v91 = "networkd_privileged_reload_managed_network_settings";
        _os_log_impl(&dword_1830D4000, v82, v87, "%{public}s xpc_dictionary_create failed, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_202:
  if (v81) {
    free(v81);
  }
  BOOL v46 = 0;
LABEL_177:

  return v46;
}

void sub_1835FBEE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void networkd_privileged_set_constrained(const char *a1, BOOL a2)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
    id v5 = v4;
    if (v4)
    {
      xpc_dictionary_set_uint64(v4, (const char *)networkd_privileged_key_type, 0xFuLL);
      xpc_dictionary_set_BOOL(v5, (const char *)networkd_privileged_key_constrained, a2);
      xpc_dictionary_set_string(v5, (const char *)networkd_privileged_key_interface_name, a1);
      id v6 = networkd_privileged_copy_connection();
      if (v6)
      {
        if (networkd_privileged_copy_queue(void)::onceToken != -1) {
          dispatch_once(&networkd_privileged_copy_queue(void)::onceToken, &__block_literal_global_56);
        }
        id v7 = (id)networkd_privileged_copy_queue(void)::networkdPrivilegedQueue;
        v32[0] = MEMORY[0x1E4F143A8];
        v32[1] = 3221225472;
        v32[2] = __networkd_privileged_set_constrained_block_invoke;
        v32[3] = &unk_1E523A680;
        id v33 = v5;
        networkd_privileged_send_async_inner((uint64_t)"networkd_privileged_set_constrained", v33, v7, v32);

LABEL_7:
LABEL_8:

        return;
      }
      id v16 = __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      id v37 = "networkd_privileged_set_constrained";
      id v17 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v34 = 0;
      if (__nwlog_fault(v17, &type, &v34))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          os_log_type_t v18 = __nwlog_obj();
          os_log_type_t v19 = type;
          if (os_log_type_enabled(v18, type))
          {
            *(_DWORD *)buf = 136446210;
            id v37 = "networkd_privileged_set_constrained";
            _os_log_impl(&dword_1830D4000, v18, v19, "%{public}s Unable to connect to networkd privileged", buf, 0xCu);
          }
        }
        else if (v34)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          os_log_type_t v18 = __nwlog_obj();
          os_log_type_t v27 = type;
          BOOL v28 = os_log_type_enabled(v18, type);
          if (backtrace_string)
          {
            if (v28)
            {
              *(_DWORD *)buf = 136446466;
              id v37 = "networkd_privileged_set_constrained";
              __int16 v38 = 2082;
              os_log_type_t v39 = backtrace_string;
              _os_log_impl(&dword_1830D4000, v18, v27, "%{public}s Unable to connect to networkd privileged, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(backtrace_string);
            goto LABEL_62;
          }
          if (v28)
          {
            *(_DWORD *)buf = 136446210;
            id v37 = "networkd_privileged_set_constrained";
            _os_log_impl(&dword_1830D4000, v18, v27, "%{public}s Unable to connect to networkd privileged, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          os_log_type_t v18 = __nwlog_obj();
          os_log_type_t v31 = type;
          if (os_log_type_enabled(v18, type))
          {
            *(_DWORD *)buf = 136446210;
            id v37 = "networkd_privileged_set_constrained";
            _os_log_impl(&dword_1830D4000, v18, v31, "%{public}s Unable to connect to networkd privileged, backtrace limit exceeded", buf, 0xCu);
          }
        }
      }
LABEL_62:
      if (v17) {
        free(v17);
      }
      goto LABEL_7;
    }
    id v12 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    id v37 = "networkd_privileged_set_constrained";
    os_log_type_t v13 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v34 = 0;
    if (__nwlog_fault(v13, &type, &v34))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v14 = __nwlog_obj();
        os_log_type_t v15 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)buf = 136446210;
          id v37 = "networkd_privileged_set_constrained";
          _os_log_impl(&dword_1830D4000, v14, v15, "%{public}s xpc_dictionary_create failed", buf, 0xCu);
        }
      }
      else if (v34)
      {
        id v23 = (char *)__nw_create_backtrace_string();
        os_log_type_t v14 = __nwlog_obj();
        os_log_type_t v24 = type;
        BOOL v25 = os_log_type_enabled(v14, type);
        if (v23)
        {
          if (v25)
          {
            *(_DWORD *)buf = 136446466;
            id v37 = "networkd_privileged_set_constrained";
            __int16 v38 = 2082;
            os_log_type_t v39 = v23;
            _os_log_impl(&dword_1830D4000, v14, v24, "%{public}s xpc_dictionary_create failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v23);
          goto LABEL_57;
        }
        if (v25)
        {
          *(_DWORD *)buf = 136446210;
          id v37 = "networkd_privileged_set_constrained";
          _os_log_impl(&dword_1830D4000, v14, v24, "%{public}s xpc_dictionary_create failed, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        os_log_type_t v14 = __nwlog_obj();
        os_log_type_t v30 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)buf = 136446210;
          id v37 = "networkd_privileged_set_constrained";
          _os_log_impl(&dword_1830D4000, v14, v30, "%{public}s xpc_dictionary_create failed, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_57:
    if (v13) {
      free(v13);
    }
    goto LABEL_8;
  }
  xpc_object_t v8 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  id v37 = "networkd_privileged_set_constrained";
  os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v34 = 0;
  if (__nwlog_fault(v9, &type, &v34))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        id v37 = "networkd_privileged_set_constrained";
        _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null ifname", buf, 0xCu);
      }
    }
    else if (v34)
    {
      os_log_type_t v20 = (char *)__nw_create_backtrace_string();
      id v10 = __nwlog_obj();
      os_log_type_t v21 = type;
      BOOL v22 = os_log_type_enabled(v10, type);
      if (v20)
      {
        if (v22)
        {
          *(_DWORD *)buf = 136446466;
          id v37 = "networkd_privileged_set_constrained";
          __int16 v38 = 2082;
          os_log_type_t v39 = v20;
          _os_log_impl(&dword_1830D4000, v10, v21, "%{public}s called with null ifname, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v20);
        goto LABEL_52;
      }
      if (v22)
      {
        *(_DWORD *)buf = 136446210;
        id v37 = "networkd_privileged_set_constrained";
        _os_log_impl(&dword_1830D4000, v10, v21, "%{public}s called with null ifname, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v10 = __nwlog_obj();
      os_log_type_t v29 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        id v37 = "networkd_privileged_set_constrained";
        _os_log_impl(&dword_1830D4000, v10, v29, "%{public}s called with null ifname, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_52:
  if (v9) {
    free(v9);
  }
}

void sub_1835FC6C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

void __networkd_privileged_set_constrained_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v85 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  xpc_object_t v4 = v3;
  if (!v3)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v11 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    os_log_type_t v80 = "networkd_privileged_set_constrained_block_invoke";
    id v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v77 = 0;
    if (!__nwlog_fault(v6, &type, &v77)) {
      goto LABEL_73;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v12 = (id)gLogObj;
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v80 = "networkd_privileged_set_constrained_block_invoke";
        _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s received NULL response", buf, 0xCu);
      }
      goto LABEL_72;
    }
    if (!v77)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v12 = (id)gLogObj;
      os_log_type_t v30 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v80 = "networkd_privileged_set_constrained_block_invoke";
        _os_log_impl(&dword_1830D4000, v12, v30, "%{public}s received NULL response, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_72;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v12 = (id)gLogObj;
    os_log_type_t v21 = type;
    BOOL v22 = os_log_type_enabled(v12, type);
    if (!backtrace_string)
    {
      if (v22)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v80 = "networkd_privileged_set_constrained_block_invoke";
        _os_log_impl(&dword_1830D4000, v12, v21, "%{public}s received NULL response, no backtrace", buf, 0xCu);
      }
      goto LABEL_72;
    }
    if (v22)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v80 = "networkd_privileged_set_constrained_block_invoke";
      __int16 v81 = 2082;
      *(void *)os_log_type_t v82 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v12, v21, "%{public}s received NULL response, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_25;
  }
  Class Class = object_getClass(v3);
  if (Class == (Class)MEMORY[0x1E4F14590])
  {
    os_log_type_t v14 = xpc_dictionary_get_value(v4, (const char *)networkd_privileged_key_result);
    os_log_type_t v15 = v14;
    if (!v14)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v28 = (id)gLogObj;
      *(_DWORD *)buf = 136446210;
      os_log_type_t v80 = "networkd_privileged_set_constrained_block_invoke";
      id v17 = (const char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v77 = 0;
      if (!__nwlog_fault(v17, &type, &v77)) {
        goto LABEL_134;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v18 = (id)gLogObj;
        os_log_type_t v29 = type;
        if (os_log_type_enabled(v18, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v80 = "networkd_privileged_set_constrained_block_invoke";
          _os_log_impl(&dword_1830D4000, v18, v29, "%{public}s received response without result code", buf, 0xCu);
        }
        goto LABEL_133;
      }
      if (!v77)
      {
        os_log_type_t v18 = __nwlog_obj();
        os_log_type_t v60 = type;
        if (os_log_type_enabled(v18, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v80 = "networkd_privileged_set_constrained_block_invoke";
          _os_log_impl(&dword_1830D4000, v18, v60, "%{public}s received response without result code, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_133;
      }
      __int16 v38 = (char *)__nw_create_backtrace_string();
      os_log_type_t v18 = __nwlog_obj();
      os_log_type_t v41 = type;
      BOOL v42 = os_log_type_enabled(v18, type);
      if (!v38)
      {
        if (v42)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v80 = "networkd_privileged_set_constrained_block_invoke";
          _os_log_impl(&dword_1830D4000, v18, v41, "%{public}s received response without result code, no backtrace", buf, 0xCu);
        }
        goto LABEL_133;
      }
      if (v42)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v80 = "networkd_privileged_set_constrained_block_invoke";
        __int16 v81 = 2082;
        *(void *)os_log_type_t v82 = v38;
        _os_log_impl(&dword_1830D4000, v18, v41, "%{public}s received response without result code, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_79;
    }
    if (object_getClass(v14) != (Class)MEMORY[0x1E4F145C0])
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v16 = (id)gLogObj;
      *(_DWORD *)buf = 136446210;
      os_log_type_t v80 = "networkd_privileged_set_constrained_block_invoke";
      id v17 = (const char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v77 = 0;
      if (!__nwlog_fault(v17, &type, &v77)) {
        goto LABEL_134;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v18 = (id)gLogObj;
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v18, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v80 = "networkd_privileged_set_constrained_block_invoke";
          _os_log_impl(&dword_1830D4000, v18, v19, "%{public}s received invalid result type", buf, 0xCu);
        }
LABEL_133:

LABEL_134:
        if (!v17)
        {
LABEL_137:

          goto LABEL_138;
        }
        goto LABEL_135;
      }
      if (!v77)
      {
        os_log_type_t v18 = __nwlog_obj();
        os_log_type_t v59 = type;
        if (os_log_type_enabled(v18, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v80 = "networkd_privileged_set_constrained_block_invoke";
          _os_log_impl(&dword_1830D4000, v18, v59, "%{public}s received invalid result type, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_133;
      }
      __int16 v38 = (char *)__nw_create_backtrace_string();
      os_log_type_t v18 = __nwlog_obj();
      os_log_type_t v39 = type;
      BOOL v40 = os_log_type_enabled(v18, type);
      if (!v38)
      {
        if (v40)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v80 = "networkd_privileged_set_constrained_block_invoke";
          _os_log_impl(&dword_1830D4000, v18, v39, "%{public}s received invalid result type, no backtrace", buf, 0xCu);
        }
        goto LABEL_133;
      }
      if (v40)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v80 = "networkd_privileged_set_constrained_block_invoke";
        __int16 v81 = 2082;
        *(void *)os_log_type_t v82 = v38;
        _os_log_impl(&dword_1830D4000, v18, v39, "%{public}s received invalid result type, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_79:

      free(v38);
      if (!v17) {
        goto LABEL_137;
      }
LABEL_135:
      os_log_type_t v64 = (char *)v17;
LABEL_136:
      free(v64);
      goto LABEL_137;
    }
    unint64_t value = xpc_int64_get_value(v15);
    uint64_t v34 = value;
    if (!value)
    {

      if (xpc_dictionary_get_int64(v4, (const char *)networkd_privileged_key_result)) {
        goto LABEL_138;
      }
      os_log_type_t v43 = __nwlog_obj();
      if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
      {
        BOOL v48 = xpc_dictionary_get_BOOL(*(xpc_object_t *)(a1 + 32), (const char *)networkd_privileged_key_constrained);
        string = xpc_dictionary_get_string(*(xpc_object_t *)(a1 + 32), (const char *)networkd_privileged_key_interface_name);
        os_log_type_t v50 = "Cleared";
        *(_DWORD *)buf = 136446722;
        os_log_type_t v80 = "networkd_privileged_set_constrained_block_invoke";
        __int16 v81 = 2082;
        if (v48) {
          os_log_type_t v50 = "Set";
        }
        *(void *)os_log_type_t v82 = v50;
        *(_WORD *)&v82[8] = 2082;
        *(void *)&v82[10] = string;
        _os_log_impl(&dword_1830D4000, v43, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}s constrained on %{public}s", buf, 0x20u);
      }
      goto LABEL_83;
    }
    if (!(value >> 31))
    {
      os_log_type_t v35 = __nwlog_obj();
      uint64_t v36 = v35;
      if (v34 == 6)
      {
        if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v80 = "networkd_privileged_set_constrained_block_invoke";
          __int16 v81 = 1024;
          *(_DWORD *)os_log_type_t v82 = 6;
          _os_log_impl(&dword_1830D4000, v36, OS_LOG_TYPE_ERROR, "%{public}s received failure result code %{darwin.errno}d", buf, 0x12u);
        }

        goto LABEL_137;
      }
      *(_DWORD *)buf = 136446466;
      os_log_type_t v80 = "networkd_privileged_set_constrained_block_invoke";
      __int16 v81 = 1024;
      *(_DWORD *)os_log_type_t v82 = v34;
      os_log_type_t v56 = (const char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v77 = 0;
      if (__nwlog_fault(v56, &type, &v77))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          os_log_type_t v65 = __nwlog_obj();
          os_log_type_t v66 = type;
          if (os_log_type_enabled(v65, type))
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v80 = "networkd_privileged_set_constrained_block_invoke";
            __int16 v81 = 1024;
            *(_DWORD *)os_log_type_t v82 = v34;
            _os_log_impl(&dword_1830D4000, v65, v66, "%{public}s received failure result code %{darwin.errno}d", buf, 0x12u);
          }
        }
        else if (v77)
        {
          BOOL v71 = (char *)__nw_create_backtrace_string();
          os_log_type_t v65 = __nwlog_obj();
          os_log_type_t v72 = type;
          BOOL v73 = os_log_type_enabled(v65, type);
          if (v71)
          {
            if (v73)
            {
              *(_DWORD *)buf = 136446722;
              os_log_type_t v80 = "networkd_privileged_set_constrained_block_invoke";
              __int16 v81 = 1024;
              *(_DWORD *)os_log_type_t v82 = v34;
              *(_WORD *)&v82[4] = 2082;
              *(void *)&v82[6] = v71;
              _os_log_impl(&dword_1830D4000, v65, v72, "%{public}s received failure result code %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x1Cu);
            }

            free(v71);
            if (!v56) {
              goto LABEL_137;
            }
LABEL_183:
            os_log_type_t v64 = (char *)v56;
            goto LABEL_136;
          }
          if (v73)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v80 = "networkd_privileged_set_constrained_block_invoke";
            __int16 v81 = 1024;
            *(_DWORD *)os_log_type_t v82 = v34;
            _os_log_impl(&dword_1830D4000, v65, v72, "%{public}s received failure result code %{darwin.errno}d, no backtrace", buf, 0x12u);
          }
        }
        else
        {
          os_log_type_t v65 = __nwlog_obj();
          os_log_type_t v76 = type;
          if (os_log_type_enabled(v65, type))
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v80 = "networkd_privileged_set_constrained_block_invoke";
            __int16 v81 = 1024;
            *(_DWORD *)os_log_type_t v82 = v34;
            _os_log_impl(&dword_1830D4000, v65, v76, "%{public}s received failure result code %{darwin.errno}d, backtrace limit exceeded", buf, 0x12u);
          }
        }
      }
LABEL_182:
      if (!v56) {
        goto LABEL_137;
      }
      goto LABEL_183;
    }
    os_log_type_t v54 = __nwlog_obj();
    os_log_type_t v55 = networkd_privileged_result_to_string(v34);
    *(_DWORD *)buf = 136446722;
    os_log_type_t v80 = "networkd_privileged_set_constrained_block_invoke";
    __int16 v81 = 2048;
    *(void *)os_log_type_t v82 = v34;
    *(_WORD *)&v82[8] = 2082;
    *(void *)&v82[10] = v55;
    os_log_type_t v56 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v77 = 0;
    if (!__nwlog_fault(v56, &type, &v77)) {
      goto LABEL_182;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v57 = __nwlog_obj();
      os_log_type_t v58 = type;
      if (os_log_type_enabled(v57, type))
      {
        *(_DWORD *)buf = 136446722;
        os_log_type_t v80 = "networkd_privileged_set_constrained_block_invoke";
        __int16 v81 = 2048;
        *(void *)os_log_type_t v82 = v34;
        *(_WORD *)&v82[8] = 2082;
        *(void *)&v82[10] = v55;
        _os_log_impl(&dword_1830D4000, v57, v58, "%{public}s received internal failure result code: [%lld] %{public}s", buf, 0x20u);
      }
    }
    else if (v77)
    {
      os_log_type_t v67 = (char *)__nw_create_backtrace_string();
      BOOL v57 = __nwlog_obj();
      os_log_type_t v68 = type;
      BOOL v69 = os_log_type_enabled(v57, type);
      if (v67)
      {
        if (v69)
        {
          *(_DWORD *)buf = 136446978;
          os_log_type_t v80 = "networkd_privileged_set_constrained_block_invoke";
          __int16 v81 = 2048;
          *(void *)os_log_type_t v82 = v34;
          *(_WORD *)&v82[8] = 2082;
          *(void *)&v82[10] = v55;
          __int16 v83 = 2082;
          v84 = v67;
          _os_log_impl(&dword_1830D4000, v57, v68, "%{public}s received internal failure result code: [%lld] %{public}s, dumping backtrace:%{public}s", buf, 0x2Au);
        }

        free(v67);
        goto LABEL_182;
      }
      if (v69)
      {
        *(_DWORD *)buf = 136446722;
        os_log_type_t v80 = "networkd_privileged_set_constrained_block_invoke";
        __int16 v81 = 2048;
        *(void *)os_log_type_t v82 = v34;
        *(_WORD *)&v82[8] = 2082;
        *(void *)&v82[10] = v55;
        _os_log_impl(&dword_1830D4000, v57, v68, "%{public}s received internal failure result code: [%lld] %{public}s, no backtrace", buf, 0x20u);
      }
    }
    else
    {
      BOOL v57 = __nwlog_obj();
      os_log_type_t v75 = type;
      if (os_log_type_enabled(v57, type))
      {
        *(_DWORD *)buf = 136446722;
        os_log_type_t v80 = "networkd_privileged_set_constrained_block_invoke";
        __int16 v81 = 2048;
        *(void *)os_log_type_t v82 = v34;
        *(_WORD *)&v82[8] = 2082;
        *(void *)&v82[10] = v55;
        _os_log_impl(&dword_1830D4000, v57, v75, "%{public}s received internal failure result code: [%lld] %{public}s, backtrace limit exceeded", buf, 0x20u);
      }
    }

    goto LABEL_182;
  }
  if (Class == (Class)MEMORY[0x1E4F145A8])
  {
    if (v4 == (void *)MEMORY[0x1E4F14520])
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v31 = (id)gLogObj;
      *(_DWORD *)buf = 136446210;
      os_log_type_t v80 = "networkd_privileged_set_constrained_block_invoke";
      id v6 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v77 = 0;
      if (!__nwlog_fault(v6, &type, &v77)) {
        goto LABEL_73;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v12 = (id)gLogObj;
        os_log_type_t v32 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v80 = "networkd_privileged_set_constrained_block_invoke";
          _os_log_impl(&dword_1830D4000, v12, v32, "%{public}s received XPC_ERROR_CONNECTION_INTERRUPTED", buf, 0xCu);
        }
        goto LABEL_72;
      }
      if (!v77)
      {
        id v12 = __nwlog_obj();
        os_log_type_t v63 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v80 = "networkd_privileged_set_constrained_block_invoke";
          _os_log_impl(&dword_1830D4000, v12, v63, "%{public}s received XPC_ERROR_CONNECTION_INTERRUPTED, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_72;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v12 = __nwlog_obj();
      os_log_type_t v44 = type;
      BOOL v45 = os_log_type_enabled(v12, type);
      if (!backtrace_string)
      {
        if (v45)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v80 = "networkd_privileged_set_constrained_block_invoke";
          _os_log_impl(&dword_1830D4000, v12, v44, "%{public}s received XPC_ERROR_CONNECTION_INTERRUPTED, no backtrace", buf, 0xCu);
        }
        goto LABEL_72;
      }
      if (v45)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v80 = "networkd_privileged_set_constrained_block_invoke";
        __int16 v81 = 2082;
        *(void *)os_log_type_t v82 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v12, v44, "%{public}s received XPC_ERROR_CONNECTION_INTERRUPTED, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_25;
    }
    if (v4 != (void *)MEMORY[0x1E4F14528])
    {
      if (v4 != (void *)MEMORY[0x1E4F14550])
      {
        id v6 = (char *)MEMORY[0x185319370](v4);
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v23 = (id)gLogObj;
        *(_DWORD *)buf = 136446466;
        os_log_type_t v80 = "networkd_privileged_set_constrained_block_invoke";
        __int16 v81 = 2082;
        *(void *)os_log_type_t v82 = v6;
        xpc_object_t v8 = (char *)_os_log_send_and_compose_impl();

        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v77 = 0;
        if (!__nwlog_fault(v8, &type, &v77)) {
          goto LABEL_63;
        }
        if (type == OS_LOG_TYPE_FAULT)
        {
          os_log_type_t v9 = __nwlog_obj();
          os_log_type_t v24 = type;
          if (os_log_type_enabled(v9, type))
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v80 = "networkd_privileged_set_constrained_block_invoke";
            __int16 v81 = 2082;
            *(void *)os_log_type_t v82 = v6;
            _os_log_impl(&dword_1830D4000, v9, v24, "%{public}s received returned unknown XPC error %{public}s", buf, 0x16u);
          }
          goto LABEL_62;
        }
        if (!v77)
        {
          os_log_type_t v9 = __nwlog_obj();
          os_log_type_t v70 = type;
          if (os_log_type_enabled(v9, type))
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v80 = "networkd_privileged_set_constrained_block_invoke";
            __int16 v81 = 2082;
            *(void *)os_log_type_t v82 = v6;
            _os_log_impl(&dword_1830D4000, v9, v70, "%{public}s received returned unknown XPC error %{public}s, backtrace limit exceeded", buf, 0x16u);
          }
          goto LABEL_62;
        }
        os_log_type_t v51 = (char *)__nw_create_backtrace_string();
        os_log_type_t v9 = __nwlog_obj();
        os_log_type_t v52 = type;
        BOOL v53 = os_log_type_enabled(v9, type);
        if (!v51)
        {
          if (v53)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v80 = "networkd_privileged_set_constrained_block_invoke";
            __int16 v81 = 2082;
            *(void *)os_log_type_t v82 = v6;
            _os_log_impl(&dword_1830D4000, v9, v52, "%{public}s received returned unknown XPC error %{public}s, no backtrace", buf, 0x16u);
          }
          goto LABEL_62;
        }
        if (v53)
        {
          *(_DWORD *)buf = 136446722;
          os_log_type_t v80 = "networkd_privileged_set_constrained_block_invoke";
          __int16 v81 = 2082;
          *(void *)os_log_type_t v82 = v6;
          *(_WORD *)&v82[8] = 2082;
          *(void *)&v82[10] = v51;
          _os_log_impl(&dword_1830D4000, v9, v52, "%{public}s received returned unknown XPC error %{public}s, dumping backtrace:%{public}s", buf, 0x20u);
        }

        free(v51);
        if (!v8) {
          goto LABEL_73;
        }
LABEL_64:
        free(v8);
        goto LABEL_73;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v46 = (id)gLogObj;
      *(_DWORD *)buf = 136446210;
      os_log_type_t v80 = "networkd_privileged_set_constrained_block_invoke";
      id v6 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v77 = 0;
      if (!__nwlog_fault(v6, &type, &v77)) {
        goto LABEL_73;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        id v12 = __nwlog_obj();
        os_log_type_t v47 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v80 = "networkd_privileged_set_constrained_block_invoke";
          _os_log_impl(&dword_1830D4000, v12, v47, "%{public}s received XPC_ERROR_TERMINATION_IMMINENT", buf, 0xCu);
        }
LABEL_72:

        goto LABEL_73;
      }
      if (!v77)
      {
        id v12 = __nwlog_obj();
        os_log_type_t v74 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v80 = "networkd_privileged_set_constrained_block_invoke";
          _os_log_impl(&dword_1830D4000, v12, v74, "%{public}s received XPC_ERROR_TERMINATION_IMMINENT, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_72;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v12 = __nwlog_obj();
      os_log_type_t v61 = type;
      BOOL v62 = os_log_type_enabled(v12, type);
      if (!backtrace_string)
      {
        if (v62)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v80 = "networkd_privileged_set_constrained_block_invoke";
          _os_log_impl(&dword_1830D4000, v12, v61, "%{public}s received XPC_ERROR_TERMINATION_IMMINENT, no backtrace", buf, 0xCu);
        }
        goto LABEL_72;
      }
      if (v62)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v80 = "networkd_privileged_set_constrained_block_invoke";
        __int16 v81 = 2082;
        *(void *)os_log_type_t v82 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v12, v61, "%{public}s received XPC_ERROR_TERMINATION_IMMINENT, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_25:

      free(backtrace_string);
      if (!v6) {
        goto LABEL_138;
      }
      goto LABEL_74;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v43 = (id)gLogObj;
    if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v80 = "networkd_privileged_set_constrained_block_invoke";
      _os_log_impl(&dword_1830D4000, v43, OS_LOG_TYPE_ERROR, "%{public}s received XPC_ERROR_CONNECTION_INVALID", buf, 0xCu);
    }
LABEL_83:

    goto LABEL_138;
  }
  id v6 = (char *)MEMORY[0x185319370](v4);
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v7 = (id)gLogObj;
  *(_DWORD *)buf = 136446466;
  os_log_type_t v80 = "networkd_privileged_set_constrained_block_invoke";
  __int16 v81 = 2082;
  *(void *)os_log_type_t v82 = v6;
  xpc_object_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v77 = 0;
  if (!__nwlog_fault(v8, &type, &v77)) {
    goto LABEL_63;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v9 = (id)gLogObj;
    os_log_type_t v10 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v80 = "networkd_privileged_set_constrained_block_invoke";
      __int16 v81 = 2082;
      *(void *)os_log_type_t v82 = v6;
      _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s received unknown type XPC %{public}s", buf, 0x16u);
    }
LABEL_62:

LABEL_63:
    if (!v8) {
      goto LABEL_73;
    }
    goto LABEL_64;
  }
  if (!v77)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v9 = (id)gLogObj;
    os_log_type_t v37 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v80 = "networkd_privileged_set_constrained_block_invoke";
      __int16 v81 = 2082;
      *(void *)os_log_type_t v82 = v6;
      _os_log_impl(&dword_1830D4000, v9, v37, "%{public}s received unknown type XPC %{public}s, backtrace limit exceeded", buf, 0x16u);
    }
    goto LABEL_62;
  }
  BOOL v25 = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_t v9 = (id)gLogObj;
  os_log_type_t v26 = type;
  BOOL v27 = os_log_type_enabled(v9, type);
  if (!v25)
  {
    if (v27)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v80 = "networkd_privileged_set_constrained_block_invoke";
      __int16 v81 = 2082;
      *(void *)os_log_type_t v82 = v6;
      _os_log_impl(&dword_1830D4000, v9, v26, "%{public}s received unknown type XPC %{public}s, no backtrace", buf, 0x16u);
    }
    goto LABEL_62;
  }
  if (v27)
  {
    *(_DWORD *)buf = 136446722;
    os_log_type_t v80 = "networkd_privileged_set_constrained_block_invoke";
    __int16 v81 = 2082;
    *(void *)os_log_type_t v82 = v6;
    *(_WORD *)&v82[8] = 2082;
    *(void *)&v82[10] = v25;
    _os_log_impl(&dword_1830D4000, v9, v26, "%{public}s received unknown type XPC %{public}s, dumping backtrace:%{public}s", buf, 0x20u);
  }

  free(v25);
  if (v8) {
    goto LABEL_64;
  }
LABEL_73:
  if (v6) {
LABEL_74:
  }
    free(v6);
LABEL_138:
}

void sub_1835FDF34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void networkd_privileged_set_ultra_constrained(const char *a1, BOOL a2)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
    id v5 = v4;
    if (v4)
    {
      xpc_dictionary_set_uint64(v4, (const char *)networkd_privileged_key_type, 0x16uLL);
      xpc_dictionary_set_BOOL(v5, (const char *)networkd_privileged_key_constrained, a2);
      xpc_dictionary_set_string(v5, (const char *)networkd_privileged_key_interface_name, a1);
      id v6 = networkd_privileged_copy_connection();
      if (v6)
      {
        if (networkd_privileged_copy_queue(void)::onceToken != -1) {
          dispatch_once(&networkd_privileged_copy_queue(void)::onceToken, &__block_literal_global_56);
        }
        id v7 = (id)networkd_privileged_copy_queue(void)::networkdPrivilegedQueue;
        v32[0] = MEMORY[0x1E4F143A8];
        v32[1] = 3221225472;
        v32[2] = __networkd_privileged_set_ultra_constrained_block_invoke;
        v32[3] = &unk_1E523A680;
        id v33 = v5;
        networkd_privileged_send_async_inner((uint64_t)"networkd_privileged_set_ultra_constrained", v33, v7, v32);

LABEL_7:
LABEL_8:

        return;
      }
      id v16 = __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      os_log_type_t v37 = "networkd_privileged_set_ultra_constrained";
      id v17 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v34 = 0;
      if (__nwlog_fault(v17, &type, &v34))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          os_log_type_t v18 = __nwlog_obj();
          os_log_type_t v19 = type;
          if (os_log_type_enabled(v18, type))
          {
            *(_DWORD *)buf = 136446210;
            os_log_type_t v37 = "networkd_privileged_set_ultra_constrained";
            _os_log_impl(&dword_1830D4000, v18, v19, "%{public}s Unable to connect to networkd privileged", buf, 0xCu);
          }
        }
        else if (v34)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          os_log_type_t v18 = __nwlog_obj();
          os_log_type_t v27 = type;
          BOOL v28 = os_log_type_enabled(v18, type);
          if (backtrace_string)
          {
            if (v28)
            {
              *(_DWORD *)buf = 136446466;
              os_log_type_t v37 = "networkd_privileged_set_ultra_constrained";
              __int16 v38 = 2082;
              os_log_type_t v39 = backtrace_string;
              _os_log_impl(&dword_1830D4000, v18, v27, "%{public}s Unable to connect to networkd privileged, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(backtrace_string);
            goto LABEL_62;
          }
          if (v28)
          {
            *(_DWORD *)buf = 136446210;
            os_log_type_t v37 = "networkd_privileged_set_ultra_constrained";
            _os_log_impl(&dword_1830D4000, v18, v27, "%{public}s Unable to connect to networkd privileged, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          os_log_type_t v18 = __nwlog_obj();
          os_log_type_t v31 = type;
          if (os_log_type_enabled(v18, type))
          {
            *(_DWORD *)buf = 136446210;
            os_log_type_t v37 = "networkd_privileged_set_ultra_constrained";
            _os_log_impl(&dword_1830D4000, v18, v31, "%{public}s Unable to connect to networkd privileged, backtrace limit exceeded", buf, 0xCu);
          }
        }
      }
LABEL_62:
      if (v17) {
        free(v17);
      }
      goto LABEL_7;
    }
    id v12 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v37 = "networkd_privileged_set_ultra_constrained";
    os_log_type_t v13 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v34 = 0;
    if (__nwlog_fault(v13, &type, &v34))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v14 = __nwlog_obj();
        os_log_type_t v15 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v37 = "networkd_privileged_set_ultra_constrained";
          _os_log_impl(&dword_1830D4000, v14, v15, "%{public}s xpc_dictionary_create failed", buf, 0xCu);
        }
      }
      else if (v34)
      {
        id v23 = (char *)__nw_create_backtrace_string();
        os_log_type_t v14 = __nwlog_obj();
        os_log_type_t v24 = type;
        BOOL v25 = os_log_type_enabled(v14, type);
        if (v23)
        {
          if (v25)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v37 = "networkd_privileged_set_ultra_constrained";
            __int16 v38 = 2082;
            os_log_type_t v39 = v23;
            _os_log_impl(&dword_1830D4000, v14, v24, "%{public}s xpc_dictionary_create failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v23);
          goto LABEL_57;
        }
        if (v25)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v37 = "networkd_privileged_set_ultra_constrained";
          _os_log_impl(&dword_1830D4000, v14, v24, "%{public}s xpc_dictionary_create failed, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        os_log_type_t v14 = __nwlog_obj();
        os_log_type_t v30 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v37 = "networkd_privileged_set_ultra_constrained";
          _os_log_impl(&dword_1830D4000, v14, v30, "%{public}s xpc_dictionary_create failed, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_57:
    if (v13) {
      free(v13);
    }
    goto LABEL_8;
  }
  xpc_object_t v8 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v37 = "networkd_privileged_set_ultra_constrained";
  os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v34 = 0;
  if (__nwlog_fault(v9, &type, &v34))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v37 = "networkd_privileged_set_ultra_constrained";
        _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null ifname", buf, 0xCu);
      }
    }
    else if (v34)
    {
      os_log_type_t v20 = (char *)__nw_create_backtrace_string();
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v21 = type;
      BOOL v22 = os_log_type_enabled(v10, type);
      if (v20)
      {
        if (v22)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v37 = "networkd_privileged_set_ultra_constrained";
          __int16 v38 = 2082;
          os_log_type_t v39 = v20;
          _os_log_impl(&dword_1830D4000, v10, v21, "%{public}s called with null ifname, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v20);
        goto LABEL_52;
      }
      if (v22)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v37 = "networkd_privileged_set_ultra_constrained";
        _os_log_impl(&dword_1830D4000, v10, v21, "%{public}s called with null ifname, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v29 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v37 = "networkd_privileged_set_ultra_constrained";
        _os_log_impl(&dword_1830D4000, v10, v29, "%{public}s called with null ifname, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_52:
  if (v9) {
    free(v9);
  }
}

void sub_1835FE710(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

void __networkd_privileged_set_ultra_constrained_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v85 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  xpc_object_t v4 = v3;
  if (!v3)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v11 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    os_log_type_t v80 = "networkd_privileged_set_ultra_constrained_block_invoke";
    id v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v77 = 0;
    if (!__nwlog_fault(v6, &type, &v77)) {
      goto LABEL_73;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v12 = (id)gLogObj;
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v80 = "networkd_privileged_set_ultra_constrained_block_invoke";
        _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s received NULL response", buf, 0xCu);
      }
      goto LABEL_72;
    }
    if (!v77)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v12 = (id)gLogObj;
      os_log_type_t v30 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v80 = "networkd_privileged_set_ultra_constrained_block_invoke";
        _os_log_impl(&dword_1830D4000, v12, v30, "%{public}s received NULL response, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_72;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v12 = (id)gLogObj;
    os_log_type_t v21 = type;
    BOOL v22 = os_log_type_enabled(v12, type);
    if (!backtrace_string)
    {
      if (v22)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v80 = "networkd_privileged_set_ultra_constrained_block_invoke";
        _os_log_impl(&dword_1830D4000, v12, v21, "%{public}s received NULL response, no backtrace", buf, 0xCu);
      }
      goto LABEL_72;
    }
    if (v22)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v80 = "networkd_privileged_set_ultra_constrained_block_invoke";
      __int16 v81 = 2082;
      *(void *)os_log_type_t v82 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v12, v21, "%{public}s received NULL response, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_25;
  }
  Class Class = object_getClass(v3);
  if (Class == (Class)MEMORY[0x1E4F14590])
  {
    os_log_type_t v14 = xpc_dictionary_get_value(v4, (const char *)networkd_privileged_key_result);
    os_log_type_t v15 = v14;
    if (!v14)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v28 = (id)gLogObj;
      *(_DWORD *)buf = 136446210;
      os_log_type_t v80 = "networkd_privileged_set_ultra_constrained_block_invoke";
      id v17 = (const char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v77 = 0;
      if (!__nwlog_fault(v17, &type, &v77)) {
        goto LABEL_134;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v18 = (id)gLogObj;
        os_log_type_t v29 = type;
        if (os_log_type_enabled(v18, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v80 = "networkd_privileged_set_ultra_constrained_block_invoke";
          _os_log_impl(&dword_1830D4000, v18, v29, "%{public}s received response without result code", buf, 0xCu);
        }
        goto LABEL_133;
      }
      if (!v77)
      {
        os_log_type_t v18 = __nwlog_obj();
        os_log_type_t v60 = type;
        if (os_log_type_enabled(v18, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v80 = "networkd_privileged_set_ultra_constrained_block_invoke";
          _os_log_impl(&dword_1830D4000, v18, v60, "%{public}s received response without result code, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_133;
      }
      __int16 v38 = (char *)__nw_create_backtrace_string();
      os_log_type_t v18 = __nwlog_obj();
      os_log_type_t v41 = type;
      BOOL v42 = os_log_type_enabled(v18, type);
      if (!v38)
      {
        if (v42)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v80 = "networkd_privileged_set_ultra_constrained_block_invoke";
          _os_log_impl(&dword_1830D4000, v18, v41, "%{public}s received response without result code, no backtrace", buf, 0xCu);
        }
        goto LABEL_133;
      }
      if (v42)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v80 = "networkd_privileged_set_ultra_constrained_block_invoke";
        __int16 v81 = 2082;
        *(void *)os_log_type_t v82 = v38;
        _os_log_impl(&dword_1830D4000, v18, v41, "%{public}s received response without result code, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_79;
    }
    if (object_getClass(v14) != (Class)MEMORY[0x1E4F145C0])
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v16 = (id)gLogObj;
      *(_DWORD *)buf = 136446210;
      os_log_type_t v80 = "networkd_privileged_set_ultra_constrained_block_invoke";
      id v17 = (const char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v77 = 0;
      if (!__nwlog_fault(v17, &type, &v77)) {
        goto LABEL_134;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v18 = (id)gLogObj;
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v18, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v80 = "networkd_privileged_set_ultra_constrained_block_invoke";
          _os_log_impl(&dword_1830D4000, v18, v19, "%{public}s received invalid result type", buf, 0xCu);
        }
LABEL_133:

LABEL_134:
        if (!v17)
        {
LABEL_137:

          goto LABEL_138;
        }
        goto LABEL_135;
      }
      if (!v77)
      {
        os_log_type_t v18 = __nwlog_obj();
        os_log_type_t v59 = type;
        if (os_log_type_enabled(v18, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v80 = "networkd_privileged_set_ultra_constrained_block_invoke";
          _os_log_impl(&dword_1830D4000, v18, v59, "%{public}s received invalid result type, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_133;
      }
      __int16 v38 = (char *)__nw_create_backtrace_string();
      os_log_type_t v18 = __nwlog_obj();
      os_log_type_t v39 = type;
      BOOL v40 = os_log_type_enabled(v18, type);
      if (!v38)
      {
        if (v40)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v80 = "networkd_privileged_set_ultra_constrained_block_invoke";
          _os_log_impl(&dword_1830D4000, v18, v39, "%{public}s received invalid result type, no backtrace", buf, 0xCu);
        }
        goto LABEL_133;
      }
      if (v40)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v80 = "networkd_privileged_set_ultra_constrained_block_invoke";
        __int16 v81 = 2082;
        *(void *)os_log_type_t v82 = v38;
        _os_log_impl(&dword_1830D4000, v18, v39, "%{public}s received invalid result type, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_79:

      free(v38);
      if (!v17) {
        goto LABEL_137;
      }
LABEL_135:
      os_log_type_t v64 = (char *)v17;
LABEL_136:
      free(v64);
      goto LABEL_137;
    }
    unint64_t value = xpc_int64_get_value(v15);
    uint64_t v34 = value;
    if (!value)
    {

      if (xpc_dictionary_get_int64(v4, (const char *)networkd_privileged_key_result)) {
        goto LABEL_138;
      }
      os_log_type_t v43 = __nwlog_obj();
      if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
      {
        BOOL v48 = xpc_dictionary_get_BOOL(*(xpc_object_t *)(a1 + 32), (const char *)networkd_privileged_key_constrained);
        string = xpc_dictionary_get_string(*(xpc_object_t *)(a1 + 32), (const char *)networkd_privileged_key_interface_name);
        os_log_type_t v50 = "Cleared";
        *(_DWORD *)buf = 136446722;
        os_log_type_t v80 = "networkd_privileged_set_ultra_constrained_block_invoke";
        __int16 v81 = 2082;
        if (v48) {
          os_log_type_t v50 = "Set";
        }
        *(void *)os_log_type_t v82 = v50;
        *(_WORD *)&v82[8] = 2082;
        *(void *)&v82[10] = string;
        _os_log_impl(&dword_1830D4000, v43, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}s ultra constrained on %{public}s", buf, 0x20u);
      }
      goto LABEL_83;
    }
    if (!(value >> 31))
    {
      os_log_type_t v35 = __nwlog_obj();
      uint64_t v36 = v35;
      if (v34 == 6)
      {
        if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v80 = "networkd_privileged_set_ultra_constrained_block_invoke";
          __int16 v81 = 1024;
          *(_DWORD *)os_log_type_t v82 = 6;
          _os_log_impl(&dword_1830D4000, v36, OS_LOG_TYPE_ERROR, "%{public}s received failure result code %{darwin.errno}d", buf, 0x12u);
        }

        goto LABEL_137;
      }
      *(_DWORD *)buf = 136446466;
      os_log_type_t v80 = "networkd_privileged_set_ultra_constrained_block_invoke";
      __int16 v81 = 1024;
      *(_DWORD *)os_log_type_t v82 = v34;
      os_log_type_t v56 = (const char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v77 = 0;
      if (__nwlog_fault(v56, &type, &v77))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          os_log_type_t v65 = __nwlog_obj();
          os_log_type_t v66 = type;
          if (os_log_type_enabled(v65, type))
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v80 = "networkd_privileged_set_ultra_constrained_block_invoke";
            __int16 v81 = 1024;
            *(_DWORD *)os_log_type_t v82 = v34;
            _os_log_impl(&dword_1830D4000, v65, v66, "%{public}s received failure result code %{darwin.errno}d", buf, 0x12u);
          }
        }
        else if (v77)
        {
          BOOL v71 = (char *)__nw_create_backtrace_string();
          os_log_type_t v65 = __nwlog_obj();
          os_log_type_t v72 = type;
          BOOL v73 = os_log_type_enabled(v65, type);
          if (v71)
          {
            if (v73)
            {
              *(_DWORD *)buf = 136446722;
              os_log_type_t v80 = "networkd_privileged_set_ultra_constrained_block_invoke";
              __int16 v81 = 1024;
              *(_DWORD *)os_log_type_t v82 = v34;
              *(_WORD *)&v82[4] = 2082;
              *(void *)&v82[6] = v71;
              _os_log_impl(&dword_1830D4000, v65, v72, "%{public}s received failure result code %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x1Cu);
            }

            free(v71);
            if (!v56) {
              goto LABEL_137;
            }
LABEL_183:
            os_log_type_t v64 = (char *)v56;
            goto LABEL_136;
          }
          if (v73)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v80 = "networkd_privileged_set_ultra_constrained_block_invoke";
            __int16 v81 = 1024;
            *(_DWORD *)os_log_type_t v82 = v34;
            _os_log_impl(&dword_1830D4000, v65, v72, "%{public}s received failure result code %{darwin.errno}d, no backtrace", buf, 0x12u);
          }
        }
        else
        {
          os_log_type_t v65 = __nwlog_obj();
          os_log_type_t v76 = type;
          if (os_log_type_enabled(v65, type))
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v80 = "networkd_privileged_set_ultra_constrained_block_invoke";
            __int16 v81 = 1024;
            *(_DWORD *)os_log_type_t v82 = v34;
            _os_log_impl(&dword_1830D4000, v65, v76, "%{public}s received failure result code %{darwin.errno}d, backtrace limit exceeded", buf, 0x12u);
          }
        }
      }
LABEL_182:
      if (!v56) {
        goto LABEL_137;
      }
      goto LABEL_183;
    }
    os_log_type_t v54 = __nwlog_obj();
    os_log_type_t v55 = networkd_privileged_result_to_string(v34);
    *(_DWORD *)buf = 136446722;
    os_log_type_t v80 = "networkd_privileged_set_ultra_constrained_block_invoke";
    __int16 v81 = 2048;
    *(void *)os_log_type_t v82 = v34;
    *(_WORD *)&v82[8] = 2082;
    *(void *)&v82[10] = v55;
    os_log_type_t v56 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v77 = 0;
    if (!__nwlog_fault(v56, &type, &v77)) {
      goto LABEL_182;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v57 = __nwlog_obj();
      os_log_type_t v58 = type;
      if (os_log_type_enabled(v57, type))
      {
        *(_DWORD *)buf = 136446722;
        os_log_type_t v80 = "networkd_privileged_set_ultra_constrained_block_invoke";
        __int16 v81 = 2048;
        *(void *)os_log_type_t v82 = v34;
        *(_WORD *)&v82[8] = 2082;
        *(void *)&v82[10] = v55;
        _os_log_impl(&dword_1830D4000, v57, v58, "%{public}s received internal failure result code: [%lld] %{public}s", buf, 0x20u);
      }
    }
    else if (v77)
    {
      os_log_type_t v67 = (char *)__nw_create_backtrace_string();
      BOOL v57 = __nwlog_obj();
      os_log_type_t v68 = type;
      BOOL v69 = os_log_type_enabled(v57, type);
      if (v67)
      {
        if (v69)
        {
          *(_DWORD *)buf = 136446978;
          os_log_type_t v80 = "networkd_privileged_set_ultra_constrained_block_invoke";
          __int16 v81 = 2048;
          *(void *)os_log_type_t v82 = v34;
          *(_WORD *)&v82[8] = 2082;
          *(void *)&v82[10] = v55;
          __int16 v83 = 2082;
          v84 = v67;
          _os_log_impl(&dword_1830D4000, v57, v68, "%{public}s received internal failure result code: [%lld] %{public}s, dumping backtrace:%{public}s", buf, 0x2Au);
        }

        free(v67);
        goto LABEL_182;
      }
      if (v69)
      {
        *(_DWORD *)buf = 136446722;
        os_log_type_t v80 = "networkd_privileged_set_ultra_constrained_block_invoke";
        __int16 v81 = 2048;
        *(void *)os_log_type_t v82 = v34;
        *(_WORD *)&v82[8] = 2082;
        *(void *)&v82[10] = v55;
        _os_log_impl(&dword_1830D4000, v57, v68, "%{public}s received internal failure result code: [%lld] %{public}s, no backtrace", buf, 0x20u);
      }
    }
    else
    {
      BOOL v57 = __nwlog_obj();
      os_log_type_t v75 = type;
      if (os_log_type_enabled(v57, type))
      {
        *(_DWORD *)buf = 136446722;
        os_log_type_t v80 = "networkd_privileged_set_ultra_constrained_block_invoke";
        __int16 v81 = 2048;
        *(void *)os_log_type_t v82 = v34;
        *(_WORD *)&v82[8] = 2082;
        *(void *)&v82[10] = v55;
        _os_log_impl(&dword_1830D4000, v57, v75, "%{public}s received internal failure result code: [%lld] %{public}s, backtrace limit exceeded", buf, 0x20u);
      }
    }

    goto LABEL_182;
  }
  if (Class == (Class)MEMORY[0x1E4F145A8])
  {
    if (v4 == (void *)MEMORY[0x1E4F14520])
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v31 = (id)gLogObj;
      *(_DWORD *)buf = 136446210;
      os_log_type_t v80 = "networkd_privileged_set_ultra_constrained_block_invoke";
      id v6 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v77 = 0;
      if (!__nwlog_fault(v6, &type, &v77)) {
        goto LABEL_73;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v12 = (id)gLogObj;
        os_log_type_t v32 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v80 = "networkd_privileged_set_ultra_constrained_block_invoke";
          _os_log_impl(&dword_1830D4000, v12, v32, "%{public}s received XPC_ERROR_CONNECTION_INTERRUPTED", buf, 0xCu);
        }
        goto LABEL_72;
      }
      if (!v77)
      {
        id v12 = __nwlog_obj();
        os_log_type_t v63 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v80 = "networkd_privileged_set_ultra_constrained_block_invoke";
          _os_log_impl(&dword_1830D4000, v12, v63, "%{public}s received XPC_ERROR_CONNECTION_INTERRUPTED, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_72;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v12 = __nwlog_obj();
      os_log_type_t v44 = type;
      BOOL v45 = os_log_type_enabled(v12, type);
      if (!backtrace_string)
      {
        if (v45)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v80 = "networkd_privileged_set_ultra_constrained_block_invoke";
          _os_log_impl(&dword_1830D4000, v12, v44, "%{public}s received XPC_ERROR_CONNECTION_INTERRUPTED, no backtrace", buf, 0xCu);
        }
        goto LABEL_72;
      }
      if (v45)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v80 = "networkd_privileged_set_ultra_constrained_block_invoke";
        __int16 v81 = 2082;
        *(void *)os_log_type_t v82 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v12, v44, "%{public}s received XPC_ERROR_CONNECTION_INTERRUPTED, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_25;
    }
    if (v4 != (void *)MEMORY[0x1E4F14528])
    {
      if (v4 != (void *)MEMORY[0x1E4F14550])
      {
        id v6 = (char *)MEMORY[0x185319370](v4);
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v23 = (id)gLogObj;
        *(_DWORD *)buf = 136446466;
        os_log_type_t v80 = "networkd_privileged_set_ultra_constrained_block_invoke";
        __int16 v81 = 2082;
        *(void *)os_log_type_t v82 = v6;
        xpc_object_t v8 = (char *)_os_log_send_and_compose_impl();

        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v77 = 0;
        if (!__nwlog_fault(v8, &type, &v77)) {
          goto LABEL_63;
        }
        if (type == OS_LOG_TYPE_FAULT)
        {
          os_log_type_t v9 = __nwlog_obj();
          os_log_type_t v24 = type;
          if (os_log_type_enabled(v9, type))
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v80 = "networkd_privileged_set_ultra_constrained_block_invoke";
            __int16 v81 = 2082;
            *(void *)os_log_type_t v82 = v6;
            _os_log_impl(&dword_1830D4000, v9, v24, "%{public}s received returned unknown XPC error %{public}s", buf, 0x16u);
          }
          goto LABEL_62;
        }
        if (!v77)
        {
          os_log_type_t v9 = __nwlog_obj();
          os_log_type_t v70 = type;
          if (os_log_type_enabled(v9, type))
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v80 = "networkd_privileged_set_ultra_constrained_block_invoke";
            __int16 v81 = 2082;
            *(void *)os_log_type_t v82 = v6;
            _os_log_impl(&dword_1830D4000, v9, v70, "%{public}s received returned unknown XPC error %{public}s, backtrace limit exceeded", buf, 0x16u);
          }
          goto LABEL_62;
        }
        os_log_type_t v51 = (char *)__nw_create_backtrace_string();
        os_log_type_t v9 = __nwlog_obj();
        os_log_type_t v52 = type;
        BOOL v53 = os_log_type_enabled(v9, type);
        if (!v51)
        {
          if (v53)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v80 = "networkd_privileged_set_ultra_constrained_block_invoke";
            __int16 v81 = 2082;
            *(void *)os_log_type_t v82 = v6;
            _os_log_impl(&dword_1830D4000, v9, v52, "%{public}s received returned unknown XPC error %{public}s, no backtrace", buf, 0x16u);
          }
          goto LABEL_62;
        }
        if (v53)
        {
          *(_DWORD *)buf = 136446722;
          os_log_type_t v80 = "networkd_privileged_set_ultra_constrained_block_invoke";
          __int16 v81 = 2082;
          *(void *)os_log_type_t v82 = v6;
          *(_WORD *)&v82[8] = 2082;
          *(void *)&v82[10] = v51;
          _os_log_impl(&dword_1830D4000, v9, v52, "%{public}s received returned unknown XPC error %{public}s, dumping backtrace:%{public}s", buf, 0x20u);
        }

        free(v51);
        if (!v8) {
          goto LABEL_73;
        }
LABEL_64:
        free(v8);
        goto LABEL_73;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v46 = (id)gLogObj;
      *(_DWORD *)buf = 136446210;
      os_log_type_t v80 = "networkd_privileged_set_ultra_constrained_block_invoke";
      id v6 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v77 = 0;
      if (!__nwlog_fault(v6, &type, &v77)) {
        goto LABEL_73;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        id v12 = __nwlog_obj();
        os_log_type_t v47 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v80 = "networkd_privileged_set_ultra_constrained_block_invoke";
          _os_log_impl(&dword_1830D4000, v12, v47, "%{public}s received XPC_ERROR_TERMINATION_IMMINENT", buf, 0xCu);
        }
LABEL_72:

        goto LABEL_73;
      }
      if (!v77)
      {
        id v12 = __nwlog_obj();
        os_log_type_t v74 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v80 = "networkd_privileged_set_ultra_constrained_block_invoke";
          _os_log_impl(&dword_1830D4000, v12, v74, "%{public}s received XPC_ERROR_TERMINATION_IMMINENT, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_72;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v12 = __nwlog_obj();
      os_log_type_t v61 = type;
      BOOL v62 = os_log_type_enabled(v12, type);
      if (!backtrace_string)
      {
        if (v62)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v80 = "networkd_privileged_set_ultra_constrained_block_invoke";
          _os_log_impl(&dword_1830D4000, v12, v61, "%{public}s received XPC_ERROR_TERMINATION_IMMINENT, no backtrace", buf, 0xCu);
        }
        goto LABEL_72;
      }
      if (v62)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v80 = "networkd_privileged_set_ultra_constrained_block_invoke";
        __int16 v81 = 2082;
        *(void *)os_log_type_t v82 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v12, v61, "%{public}s received XPC_ERROR_TERMINATION_IMMINENT, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_25:

      free(backtrace_string);
      if (!v6) {
        goto LABEL_138;
      }
      goto LABEL_74;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v43 = (id)gLogObj;
    if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v80 = "networkd_privileged_set_ultra_constrained_block_invoke";
      _os_log_impl(&dword_1830D4000, v43, OS_LOG_TYPE_ERROR, "%{public}s received XPC_ERROR_CONNECTION_INVALID", buf, 0xCu);
    }
LABEL_83:

    goto LABEL_138;
  }
  id v6 = (char *)MEMORY[0x185319370](v4);
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v7 = (id)gLogObj;
  *(_DWORD *)buf = 136446466;
  os_log_type_t v80 = "networkd_privileged_set_ultra_constrained_block_invoke";
  __int16 v81 = 2082;
  *(void *)os_log_type_t v82 = v6;
  xpc_object_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v77 = 0;
  if (!__nwlog_fault(v8, &type, &v77)) {
    goto LABEL_63;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v9 = (id)gLogObj;
    os_log_type_t v10 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v80 = "networkd_privileged_set_ultra_constrained_block_invoke";
      __int16 v81 = 2082;
      *(void *)os_log_type_t v82 = v6;
      _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s received unknown type XPC %{public}s", buf, 0x16u);
    }
LABEL_62:

LABEL_63:
    if (!v8) {
      goto LABEL_73;
    }
    goto LABEL_64;
  }
  if (!v77)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v9 = (id)gLogObj;
    os_log_type_t v37 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v80 = "networkd_privileged_set_ultra_constrained_block_invoke";
      __int16 v81 = 2082;
      *(void *)os_log_type_t v82 = v6;
      _os_log_impl(&dword_1830D4000, v9, v37, "%{public}s received unknown type XPC %{public}s, backtrace limit exceeded", buf, 0x16u);
    }
    goto LABEL_62;
  }
  BOOL v25 = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_t v9 = (id)gLogObj;
  os_log_type_t v26 = type;
  BOOL v27 = os_log_type_enabled(v9, type);
  if (!v25)
  {
    if (v27)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v80 = "networkd_privileged_set_ultra_constrained_block_invoke";
      __int16 v81 = 2082;
      *(void *)os_log_type_t v82 = v6;
      _os_log_impl(&dword_1830D4000, v9, v26, "%{public}s received unknown type XPC %{public}s, no backtrace", buf, 0x16u);
    }
    goto LABEL_62;
  }
  if (v27)
  {
    *(_DWORD *)buf = 136446722;
    os_log_type_t v80 = "networkd_privileged_set_ultra_constrained_block_invoke";
    __int16 v81 = 2082;
    *(void *)os_log_type_t v82 = v6;
    *(_WORD *)&v82[8] = 2082;
    *(void *)&v82[10] = v25;
    _os_log_impl(&dword_1830D4000, v9, v26, "%{public}s received unknown type XPC %{public}s, dumping backtrace:%{public}s", buf, 0x20u);
  }

  free(v25);
  if (v8) {
    goto LABEL_64;
  }
LABEL_73:
  if (v6) {
LABEL_74:
  }
    free(v6);
LABEL_138:
}

void sub_1835FFF7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void networkd_privileged_set_expensive(const char *a1, BOOL a2)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
    id v5 = v4;
    if (v4)
    {
      xpc_dictionary_set_uint64(v4, (const char *)networkd_privileged_key_type, 0x10uLL);
      xpc_dictionary_set_BOOL(v5, (const char *)networkd_privileged_key_expensive, a2);
      xpc_dictionary_set_string(v5, (const char *)networkd_privileged_key_interface_name, a1);
      id v6 = networkd_privileged_copy_connection();
      if (v6)
      {
        if (networkd_privileged_copy_queue(void)::onceToken != -1) {
          dispatch_once(&networkd_privileged_copy_queue(void)::onceToken, &__block_literal_global_56);
        }
        id v7 = (id)networkd_privileged_copy_queue(void)::networkdPrivilegedQueue;
        v32[0] = MEMORY[0x1E4F143A8];
        v32[1] = 3221225472;
        v32[2] = __networkd_privileged_set_expensive_block_invoke;
        v32[3] = &unk_1E523A680;
        id v33 = v5;
        networkd_privileged_send_async_inner((uint64_t)"networkd_privileged_set_expensive", v33, v7, v32);

LABEL_7:
LABEL_8:

        return;
      }
      id v16 = __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      os_log_type_t v37 = "networkd_privileged_set_expensive";
      id v17 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v34 = 0;
      if (__nwlog_fault(v17, &type, &v34))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          os_log_type_t v18 = __nwlog_obj();
          os_log_type_t v19 = type;
          if (os_log_type_enabled(v18, type))
          {
            *(_DWORD *)buf = 136446210;
            os_log_type_t v37 = "networkd_privileged_set_expensive";
            _os_log_impl(&dword_1830D4000, v18, v19, "%{public}s Unable to connect to networkd privileged", buf, 0xCu);
          }
        }
        else if (v34)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          os_log_type_t v18 = __nwlog_obj();
          os_log_type_t v27 = type;
          BOOL v28 = os_log_type_enabled(v18, type);
          if (backtrace_string)
          {
            if (v28)
            {
              *(_DWORD *)buf = 136446466;
              os_log_type_t v37 = "networkd_privileged_set_expensive";
              __int16 v38 = 2082;
              os_log_type_t v39 = backtrace_string;
              _os_log_impl(&dword_1830D4000, v18, v27, "%{public}s Unable to connect to networkd privileged, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(backtrace_string);
            goto LABEL_62;
          }
          if (v28)
          {
            *(_DWORD *)buf = 136446210;
            os_log_type_t v37 = "networkd_privileged_set_expensive";
            _os_log_impl(&dword_1830D4000, v18, v27, "%{public}s Unable to connect to networkd privileged, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          os_log_type_t v18 = __nwlog_obj();
          os_log_type_t v31 = type;
          if (os_log_type_enabled(v18, type))
          {
            *(_DWORD *)buf = 136446210;
            os_log_type_t v37 = "networkd_privileged_set_expensive";
            _os_log_impl(&dword_1830D4000, v18, v31, "%{public}s Unable to connect to networkd privileged, backtrace limit exceeded", buf, 0xCu);
          }
        }
      }
LABEL_62:
      if (v17) {
        free(v17);
      }
      goto LABEL_7;
    }
    id v12 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v37 = "networkd_privileged_set_expensive";
    os_log_type_t v13 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v34 = 0;
    if (__nwlog_fault(v13, &type, &v34))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v14 = __nwlog_obj();
        os_log_type_t v15 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v37 = "networkd_privileged_set_expensive";
          _os_log_impl(&dword_1830D4000, v14, v15, "%{public}s xpc_dictionary_create failed", buf, 0xCu);
        }
      }
      else if (v34)
      {
        id v23 = (char *)__nw_create_backtrace_string();
        os_log_type_t v14 = __nwlog_obj();
        os_log_type_t v24 = type;
        BOOL v25 = os_log_type_enabled(v14, type);
        if (v23)
        {
          if (v25)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v37 = "networkd_privileged_set_expensive";
            __int16 v38 = 2082;
            os_log_type_t v39 = v23;
            _os_log_impl(&dword_1830D4000, v14, v24, "%{public}s xpc_dictionary_create failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v23);
          goto LABEL_57;
        }
        if (v25)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v37 = "networkd_privileged_set_expensive";
          _os_log_impl(&dword_1830D4000, v14, v24, "%{public}s xpc_dictionary_create failed, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        os_log_type_t v14 = __nwlog_obj();
        os_log_type_t v30 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v37 = "networkd_privileged_set_expensive";
          _os_log_impl(&dword_1830D4000, v14, v30, "%{public}s xpc_dictionary_create failed, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_57:
    if (v13) {
      free(v13);
    }
    goto LABEL_8;
  }
  xpc_object_t v8 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v37 = "networkd_privileged_set_expensive";
  os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v34 = 0;
  if (__nwlog_fault(v9, &type, &v34))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v37 = "networkd_privileged_set_expensive";
        _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null ifname", buf, 0xCu);
      }
    }
    else if (v34)
    {
      os_log_type_t v20 = (char *)__nw_create_backtrace_string();
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v21 = type;
      BOOL v22 = os_log_type_enabled(v10, type);
      if (v20)
      {
        if (v22)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v37 = "networkd_privileged_set_expensive";
          __int16 v38 = 2082;
          os_log_type_t v39 = v20;
          _os_log_impl(&dword_1830D4000, v10, v21, "%{public}s called with null ifname, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v20);
        goto LABEL_52;
      }
      if (v22)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v37 = "networkd_privileged_set_expensive";
        _os_log_impl(&dword_1830D4000, v10, v21, "%{public}s called with null ifname, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v29 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v37 = "networkd_privileged_set_expensive";
        _os_log_impl(&dword_1830D4000, v10, v29, "%{public}s called with null ifname, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_52:
  if (v9) {
    free(v9);
  }
}

void sub_183600758(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

void __networkd_privileged_set_expensive_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v85 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  xpc_object_t v4 = v3;
  if (!v3)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v11 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    os_log_type_t v80 = "networkd_privileged_set_expensive_block_invoke";
    id v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v77 = 0;
    if (!__nwlog_fault(v6, &type, &v77)) {
      goto LABEL_73;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v12 = (id)gLogObj;
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v80 = "networkd_privileged_set_expensive_block_invoke";
        _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s received NULL response", buf, 0xCu);
      }
      goto LABEL_72;
    }
    if (!v77)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v12 = (id)gLogObj;
      os_log_type_t v30 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v80 = "networkd_privileged_set_expensive_block_invoke";
        _os_log_impl(&dword_1830D4000, v12, v30, "%{public}s received NULL response, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_72;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v12 = (id)gLogObj;
    os_log_type_t v21 = type;
    BOOL v22 = os_log_type_enabled(v12, type);
    if (!backtrace_string)
    {
      if (v22)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v80 = "networkd_privileged_set_expensive_block_invoke";
        _os_log_impl(&dword_1830D4000, v12, v21, "%{public}s received NULL response, no backtrace", buf, 0xCu);
      }
      goto LABEL_72;
    }
    if (v22)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v80 = "networkd_privileged_set_expensive_block_invoke";
      __int16 v81 = 2082;
      *(void *)os_log_type_t v82 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v12, v21, "%{public}s received NULL response, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_25;
  }
  Class Class = object_getClass(v3);
  if (Class == (Class)MEMORY[0x1E4F14590])
  {
    os_log_type_t v14 = xpc_dictionary_get_value(v4, (const char *)networkd_privileged_key_result);
    os_log_type_t v15 = v14;
    if (!v14)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v28 = (id)gLogObj;
      *(_DWORD *)buf = 136446210;
      os_log_type_t v80 = "networkd_privileged_set_expensive_block_invoke";
      id v17 = (const char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v77 = 0;
      if (!__nwlog_fault(v17, &type, &v77)) {
        goto LABEL_134;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v18 = (id)gLogObj;
        os_log_type_t v29 = type;
        if (os_log_type_enabled(v18, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v80 = "networkd_privileged_set_expensive_block_invoke";
          _os_log_impl(&dword_1830D4000, v18, v29, "%{public}s received response without result code", buf, 0xCu);
        }
        goto LABEL_133;
      }
      if (!v77)
      {
        os_log_type_t v18 = __nwlog_obj();
        os_log_type_t v60 = type;
        if (os_log_type_enabled(v18, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v80 = "networkd_privileged_set_expensive_block_invoke";
          _os_log_impl(&dword_1830D4000, v18, v60, "%{public}s received response without result code, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_133;
      }
      __int16 v38 = (char *)__nw_create_backtrace_string();
      os_log_type_t v18 = __nwlog_obj();
      os_log_type_t v41 = type;
      BOOL v42 = os_log_type_enabled(v18, type);
      if (!v38)
      {
        if (v42)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v80 = "networkd_privileged_set_expensive_block_invoke";
          _os_log_impl(&dword_1830D4000, v18, v41, "%{public}s received response without result code, no backtrace", buf, 0xCu);
        }
        goto LABEL_133;
      }
      if (v42)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v80 = "networkd_privileged_set_expensive_block_invoke";
        __int16 v81 = 2082;
        *(void *)os_log_type_t v82 = v38;
        _os_log_impl(&dword_1830D4000, v18, v41, "%{public}s received response without result code, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_79;
    }
    if (object_getClass(v14) != (Class)MEMORY[0x1E4F145C0])
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v16 = (id)gLogObj;
      *(_DWORD *)buf = 136446210;
      os_log_type_t v80 = "networkd_privileged_set_expensive_block_invoke";
      id v17 = (const char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v77 = 0;
      if (!__nwlog_fault(v17, &type, &v77)) {
        goto LABEL_134;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v18 = (id)gLogObj;
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v18, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v80 = "networkd_privileged_set_expensive_block_invoke";
          _os_log_impl(&dword_1830D4000, v18, v19, "%{public}s received invalid result type", buf, 0xCu);
        }
LABEL_133:

LABEL_134:
        if (!v17)
        {
LABEL_137:

          goto LABEL_138;
        }
        goto LABEL_135;
      }
      if (!v77)
      {
        os_log_type_t v18 = __nwlog_obj();
        os_log_type_t v59 = type;
        if (os_log_type_enabled(v18, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v80 = "networkd_privileged_set_expensive_block_invoke";
          _os_log_impl(&dword_1830D4000, v18, v59, "%{public}s received invalid result type, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_133;
      }
      __int16 v38 = (char *)__nw_create_backtrace_string();
      os_log_type_t v18 = __nwlog_obj();
      os_log_type_t v39 = type;
      BOOL v40 = os_log_type_enabled(v18, type);
      if (!v38)
      {
        if (v40)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v80 = "networkd_privileged_set_expensive_block_invoke";
          _os_log_impl(&dword_1830D4000, v18, v39, "%{public}s received invalid result type, no backtrace", buf, 0xCu);
        }
        goto LABEL_133;
      }
      if (v40)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v80 = "networkd_privileged_set_expensive_block_invoke";
        __int16 v81 = 2082;
        *(void *)os_log_type_t v82 = v38;
        _os_log_impl(&dword_1830D4000, v18, v39, "%{public}s received invalid result type, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_79:

      free(v38);
      if (!v17) {
        goto LABEL_137;
      }
LABEL_135:
      os_log_type_t v64 = (char *)v17;
LABEL_136:
      free(v64);
      goto LABEL_137;
    }
    unint64_t value = xpc_int64_get_value(v15);
    uint64_t v34 = value;
    if (!value)
    {

      if (xpc_dictionary_get_int64(v4, (const char *)networkd_privileged_key_result)) {
        goto LABEL_138;
      }
      os_log_type_t v43 = __nwlog_obj();
      if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
      {
        BOOL v48 = xpc_dictionary_get_BOOL(*(xpc_object_t *)(a1 + 32), (const char *)networkd_privileged_key_expensive);
        string = xpc_dictionary_get_string(*(xpc_object_t *)(a1 + 32), (const char *)networkd_privileged_key_interface_name);
        os_log_type_t v50 = "Cleared";
        *(_DWORD *)buf = 136446722;
        os_log_type_t v80 = "networkd_privileged_set_expensive_block_invoke";
        __int16 v81 = 2082;
        if (v48) {
          os_log_type_t v50 = "Set";
        }
        *(void *)os_log_type_t v82 = v50;
        *(_WORD *)&v82[8] = 2082;
        *(void *)&v82[10] = string;
        _os_log_impl(&dword_1830D4000, v43, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}s expensive on %{public}s", buf, 0x20u);
      }
      goto LABEL_83;
    }
    if (!(value >> 31))
    {
      os_log_type_t v35 = __nwlog_obj();
      uint64_t v36 = v35;
      if (v34 == 6)
      {
        if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v80 = "networkd_privileged_set_expensive_block_invoke";
          __int16 v81 = 1024;
          *(_DWORD *)os_log_type_t v82 = 6;
          _os_log_impl(&dword_1830D4000, v36, OS_LOG_TYPE_ERROR, "%{public}s received failure result code %{darwin.errno}d", buf, 0x12u);
        }

        goto LABEL_137;
      }
      *(_DWORD *)buf = 136446466;
      os_log_type_t v80 = "networkd_privileged_set_expensive_block_invoke";
      __int16 v81 = 1024;
      *(_DWORD *)os_log_type_t v82 = v34;
      os_log_type_t v56 = (const char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v77 = 0;
      if (__nwlog_fault(v56, &type, &v77))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          os_log_type_t v65 = __nwlog_obj();
          os_log_type_t v66 = type;
          if (os_log_type_enabled(v65, type))
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v80 = "networkd_privileged_set_expensive_block_invoke";
            __int16 v81 = 1024;
            *(_DWORD *)os_log_type_t v82 = v34;
            _os_log_impl(&dword_1830D4000, v65, v66, "%{public}s received failure result code %{darwin.errno}d", buf, 0x12u);
          }
        }
        else if (v77)
        {
          BOOL v71 = (char *)__nw_create_backtrace_string();
          os_log_type_t v65 = __nwlog_obj();
          os_log_type_t v72 = type;
          BOOL v73 = os_log_type_enabled(v65, type);
          if (v71)
          {
            if (v73)
            {
              *(_DWORD *)buf = 136446722;
              os_log_type_t v80 = "networkd_privileged_set_expensive_block_invoke";
              __int16 v81 = 1024;
              *(_DWORD *)os_log_type_t v82 = v34;
              *(_WORD *)&v82[4] = 2082;
              *(void *)&v82[6] = v71;
              _os_log_impl(&dword_1830D4000, v65, v72, "%{public}s received failure result code %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x1Cu);
            }

            free(v71);
            if (!v56) {
              goto LABEL_137;
            }
LABEL_183:
            os_log_type_t v64 = (char *)v56;
            goto LABEL_136;
          }
          if (v73)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v80 = "networkd_privileged_set_expensive_block_invoke";
            __int16 v81 = 1024;
            *(_DWORD *)os_log_type_t v82 = v34;
            _os_log_impl(&dword_1830D4000, v65, v72, "%{public}s received failure result code %{darwin.errno}d, no backtrace", buf, 0x12u);
          }
        }
        else
        {
          os_log_type_t v65 = __nwlog_obj();
          os_log_type_t v76 = type;
          if (os_log_type_enabled(v65, type))
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v80 = "networkd_privileged_set_expensive_block_invoke";
            __int16 v81 = 1024;
            *(_DWORD *)os_log_type_t v82 = v34;
            _os_log_impl(&dword_1830D4000, v65, v76, "%{public}s received failure result code %{darwin.errno}d, backtrace limit exceeded", buf, 0x12u);
          }
        }
      }
LABEL_182:
      if (!v56) {
        goto LABEL_137;
      }
      goto LABEL_183;
    }
    os_log_type_t v54 = __nwlog_obj();
    os_log_type_t v55 = networkd_privileged_result_to_string(v34);
    *(_DWORD *)buf = 136446722;
    os_log_type_t v80 = "networkd_privileged_set_expensive_block_invoke";
    __int16 v81 = 2048;
    *(void *)os_log_type_t v82 = v34;
    *(_WORD *)&v82[8] = 2082;
    *(void *)&v82[10] = v55;
    os_log_type_t v56 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v77 = 0;
    if (!__nwlog_fault(v56, &type, &v77)) {
      goto LABEL_182;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v57 = __nwlog_obj();
      os_log_type_t v58 = type;
      if (os_log_type_enabled(v57, type))
      {
        *(_DWORD *)buf = 136446722;
        os_log_type_t v80 = "networkd_privileged_set_expensive_block_invoke";
        __int16 v81 = 2048;
        *(void *)os_log_type_t v82 = v34;
        *(_WORD *)&v82[8] = 2082;
        *(void *)&v82[10] = v55;
        _os_log_impl(&dword_1830D4000, v57, v58, "%{public}s received internal failure result code: [%lld] %{public}s", buf, 0x20u);
      }
    }
    else if (v77)
    {
      os_log_type_t v67 = (char *)__nw_create_backtrace_string();
      BOOL v57 = __nwlog_obj();
      os_log_type_t v68 = type;
      BOOL v69 = os_log_type_enabled(v57, type);
      if (v67)
      {
        if (v69)
        {
          *(_DWORD *)buf = 136446978;
          os_log_type_t v80 = "networkd_privileged_set_expensive_block_invoke";
          __int16 v81 = 2048;
          *(void *)os_log_type_t v82 = v34;
          *(_WORD *)&v82[8] = 2082;
          *(void *)&v82[10] = v55;
          __int16 v83 = 2082;
          v84 = v67;
          _os_log_impl(&dword_1830D4000, v57, v68, "%{public}s received internal failure result code: [%lld] %{public}s, dumping backtrace:%{public}s", buf, 0x2Au);
        }

        free(v67);
        goto LABEL_182;
      }
      if (v69)
      {
        *(_DWORD *)buf = 136446722;
        os_log_type_t v80 = "networkd_privileged_set_expensive_block_invoke";
        __int16 v81 = 2048;
        *(void *)os_log_type_t v82 = v34;
        *(_WORD *)&v82[8] = 2082;
        *(void *)&v82[10] = v55;
        _os_log_impl(&dword_1830D4000, v57, v68, "%{public}s received internal failure result code: [%lld] %{public}s, no backtrace", buf, 0x20u);
      }
    }
    else
    {
      BOOL v57 = __nwlog_obj();
      os_log_type_t v75 = type;
      if (os_log_type_enabled(v57, type))
      {
        *(_DWORD *)buf = 136446722;
        os_log_type_t v80 = "networkd_privileged_set_expensive_block_invoke";
        __int16 v81 = 2048;
        *(void *)os_log_type_t v82 = v34;
        *(_WORD *)&v82[8] = 2082;
        *(void *)&v82[10] = v55;
        _os_log_impl(&dword_1830D4000, v57, v75, "%{public}s received internal failure result code: [%lld] %{public}s, backtrace limit exceeded", buf, 0x20u);
      }
    }

    goto LABEL_182;
  }
  if (Class == (Class)MEMORY[0x1E4F145A8])
  {
    if (v4 == (void *)MEMORY[0x1E4F14520])
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v31 = (id)gLogObj;
      *(_DWORD *)buf = 136446210;
      os_log_type_t v80 = "networkd_privileged_set_expensive_block_invoke";
      id v6 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v77 = 0;
      if (!__nwlog_fault(v6, &type, &v77)) {
        goto LABEL_73;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v12 = (id)gLogObj;
        os_log_type_t v32 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v80 = "networkd_privileged_set_expensive_block_invoke";
          _os_log_impl(&dword_1830D4000, v12, v32, "%{public}s received XPC_ERROR_CONNECTION_INTERRUPTED", buf, 0xCu);
        }
        goto LABEL_72;
      }
      if (!v77)
      {
        id v12 = __nwlog_obj();
        os_log_type_t v63 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v80 = "networkd_privileged_set_expensive_block_invoke";
          _os_log_impl(&dword_1830D4000, v12, v63, "%{public}s received XPC_ERROR_CONNECTION_INTERRUPTED, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_72;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v12 = __nwlog_obj();
      os_log_type_t v44 = type;
      BOOL v45 = os_log_type_enabled(v12, type);
      if (!backtrace_string)
      {
        if (v45)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v80 = "networkd_privileged_set_expensive_block_invoke";
          _os_log_impl(&dword_1830D4000, v12, v44, "%{public}s received XPC_ERROR_CONNECTION_INTERRUPTED, no backtrace", buf, 0xCu);
        }
        goto LABEL_72;
      }
      if (v45)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v80 = "networkd_privileged_set_expensive_block_invoke";
        __int16 v81 = 2082;
        *(void *)os_log_type_t v82 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v12, v44, "%{public}s received XPC_ERROR_CONNECTION_INTERRUPTED, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_25;
    }
    if (v4 != (void *)MEMORY[0x1E4F14528])
    {
      if (v4 != (void *)MEMORY[0x1E4F14550])
      {
        id v6 = (char *)MEMORY[0x185319370](v4);
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v23 = (id)gLogObj;
        *(_DWORD *)buf = 136446466;
        os_log_type_t v80 = "networkd_privileged_set_expensive_block_invoke";
        __int16 v81 = 2082;
        *(void *)os_log_type_t v82 = v6;
        xpc_object_t v8 = (char *)_os_log_send_and_compose_impl();

        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v77 = 0;
        if (!__nwlog_fault(v8, &type, &v77)) {
          goto LABEL_63;
        }
        if (type == OS_LOG_TYPE_FAULT)
        {
          os_log_type_t v9 = __nwlog_obj();
          os_log_type_t v24 = type;
          if (os_log_type_enabled(v9, type))
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v80 = "networkd_privileged_set_expensive_block_invoke";
            __int16 v81 = 2082;
            *(void *)os_log_type_t v82 = v6;
            _os_log_impl(&dword_1830D4000, v9, v24, "%{public}s received returned unknown XPC error %{public}s", buf, 0x16u);
          }
          goto LABEL_62;
        }
        if (!v77)
        {
          os_log_type_t v9 = __nwlog_obj();
          os_log_type_t v70 = type;
          if (os_log_type_enabled(v9, type))
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v80 = "networkd_privileged_set_expensive_block_invoke";
            __int16 v81 = 2082;
            *(void *)os_log_type_t v82 = v6;
            _os_log_impl(&dword_1830D4000, v9, v70, "%{public}s received returned unknown XPC error %{public}s, backtrace limit exceeded", buf, 0x16u);
          }
          goto LABEL_62;
        }
        os_log_type_t v51 = (char *)__nw_create_backtrace_string();
        os_log_type_t v9 = __nwlog_obj();
        os_log_type_t v52 = type;
        BOOL v53 = os_log_type_enabled(v9, type);
        if (!v51)
        {
          if (v53)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v80 = "networkd_privileged_set_expensive_block_invoke";
            __int16 v81 = 2082;
            *(void *)os_log_type_t v82 = v6;
            _os_log_impl(&dword_1830D4000, v9, v52, "%{public}s received returned unknown XPC error %{public}s, no backtrace", buf, 0x16u);
          }
          goto LABEL_62;
        }
        if (v53)
        {
          *(_DWORD *)buf = 136446722;
          os_log_type_t v80 = "networkd_privileged_set_expensive_block_invoke";
          __int16 v81 = 2082;
          *(void *)os_log_type_t v82 = v6;
          *(_WORD *)&v82[8] = 2082;
          *(void *)&v82[10] = v51;
          _os_log_impl(&dword_1830D4000, v9, v52, "%{public}s received returned unknown XPC error %{public}s, dumping backtrace:%{public}s", buf, 0x20u);
        }

        free(v51);
        if (!v8) {
          goto LABEL_73;
        }
LABEL_64:
        free(v8);
        goto LABEL_73;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v46 = (id)gLogObj;
      *(_DWORD *)buf = 136446210;
      os_log_type_t v80 = "networkd_privileged_set_expensive_block_invoke";
      id v6 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v77 = 0;
      if (!__nwlog_fault(v6, &type, &v77)) {
        goto LABEL_73;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        id v12 = __nwlog_obj();
        os_log_type_t v47 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v80 = "networkd_privileged_set_expensive_block_invoke";
          _os_log_impl(&dword_1830D4000, v12, v47, "%{public}s received XPC_ERROR_TERMINATION_IMMINENT", buf, 0xCu);
        }
LABEL_72:

        goto LABEL_73;
      }
      if (!v77)
      {
        id v12 = __nwlog_obj();
        os_log_type_t v74 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v80 = "networkd_privileged_set_expensive_block_invoke";
          _os_log_impl(&dword_1830D4000, v12, v74, "%{public}s received XPC_ERROR_TERMINATION_IMMINENT, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_72;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v12 = __nwlog_obj();
      os_log_type_t v61 = type;
      BOOL v62 = os_log_type_enabled(v12, type);
      if (!backtrace_string)
      {
        if (v62)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v80 = "networkd_privileged_set_expensive_block_invoke";
          _os_log_impl(&dword_1830D4000, v12, v61, "%{public}s received XPC_ERROR_TERMINATION_IMMINENT, no backtrace", buf, 0xCu);
        }
        goto LABEL_72;
      }
      if (v62)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v80 = "networkd_privileged_set_expensive_block_invoke";
        __int16 v81 = 2082;
        *(void *)os_log_type_t v82 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v12, v61, "%{public}s received XPC_ERROR_TERMINATION_IMMINENT, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_25:

      free(backtrace_string);
      if (!v6) {
        goto LABEL_138;
      }
      goto LABEL_74;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v43 = (id)gLogObj;
    if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v80 = "networkd_privileged_set_expensive_block_invoke";
      _os_log_impl(&dword_1830D4000, v43, OS_LOG_TYPE_ERROR, "%{public}s received XPC_ERROR_CONNECTION_INVALID", buf, 0xCu);
    }
LABEL_83:

    goto LABEL_138;
  }
  id v6 = (char *)MEMORY[0x185319370](v4);
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v7 = (id)gLogObj;
  *(_DWORD *)buf = 136446466;
  os_log_type_t v80 = "networkd_privileged_set_expensive_block_invoke";
  __int16 v81 = 2082;
  *(void *)os_log_type_t v82 = v6;
  xpc_object_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v77 = 0;
  if (!__nwlog_fault(v8, &type, &v77)) {
    goto LABEL_63;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v9 = (id)gLogObj;
    os_log_type_t v10 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v80 = "networkd_privileged_set_expensive_block_invoke";
      __int16 v81 = 2082;
      *(void *)os_log_type_t v82 = v6;
      _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s received unknown type XPC %{public}s", buf, 0x16u);
    }
LABEL_62:

LABEL_63:
    if (!v8) {
      goto LABEL_73;
    }
    goto LABEL_64;
  }
  if (!v77)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v9 = (id)gLogObj;
    os_log_type_t v37 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v80 = "networkd_privileged_set_expensive_block_invoke";
      __int16 v81 = 2082;
      *(void *)os_log_type_t v82 = v6;
      _os_log_impl(&dword_1830D4000, v9, v37, "%{public}s received unknown type XPC %{public}s, backtrace limit exceeded", buf, 0x16u);
    }
    goto LABEL_62;
  }
  BOOL v25 = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_t v9 = (id)gLogObj;
  os_log_type_t v26 = type;
  BOOL v27 = os_log_type_enabled(v9, type);
  if (!v25)
  {
    if (v27)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v80 = "networkd_privileged_set_expensive_block_invoke";
      __int16 v81 = 2082;
      *(void *)os_log_type_t v82 = v6;
      _os_log_impl(&dword_1830D4000, v9, v26, "%{public}s received unknown type XPC %{public}s, no backtrace", buf, 0x16u);
    }
    goto LABEL_62;
  }
  if (v27)
  {
    *(_DWORD *)buf = 136446722;
    os_log_type_t v80 = "networkd_privileged_set_expensive_block_invoke";
    __int16 v81 = 2082;
    *(void *)os_log_type_t v82 = v6;
    *(_WORD *)&v82[8] = 2082;
    *(void *)&v82[10] = v25;
    _os_log_impl(&dword_1830D4000, v9, v26, "%{public}s received unknown type XPC %{public}s, dumping backtrace:%{public}s", buf, 0x20u);
  }

  free(v25);
  if (v8) {
    goto LABEL_64;
  }
LABEL_73:
  if (v6) {
LABEL_74:
  }
    free(v6);
LABEL_138:
}

void sub_183601FC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void networkd_privileged_set_throughput_estimates(const char *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
    id v7 = v6;
    if (v6)
    {
      xpc_dictionary_set_uint64(v6, (const char *)networkd_privileged_key_type, 0x13uLL);
      xpc_dictionary_set_uint64(v7, (const char *)networkd_privileged_key_upload, a2);
      xpc_dictionary_set_uint64(v7, (const char *)networkd_privileged_key_download, a3);
      xpc_dictionary_set_string(v7, (const char *)networkd_privileged_key_interface_name, a1);
      id v8 = networkd_privileged_copy_connection();
      if (v8)
      {
        if (networkd_privileged_copy_queue(void)::onceToken != -1) {
          dispatch_once(&networkd_privileged_copy_queue(void)::onceToken, &__block_literal_global_56);
        }
        id v9 = (id)networkd_privileged_copy_queue(void)::networkdPrivilegedQueue;
        v34[0] = MEMORY[0x1E4F143A8];
        v34[1] = 3221225472;
        v34[2] = __networkd_privileged_set_throughput_estimates_block_invoke;
        v34[3] = &unk_1E523A6A8;
        char v36 = a2;
        char v37 = a3;
        id v35 = v7;
        networkd_privileged_send_async_inner((uint64_t)"networkd_privileged_set_throughput_estimates", v35, v9, v34);

LABEL_7:
LABEL_8:

        return;
      }
      os_log_type_t v18 = __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      os_log_type_t v41 = "networkd_privileged_set_throughput_estimates";
      os_log_type_t v19 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v38 = 0;
      if (__nwlog_fault(v19, &type, &v38))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          os_log_type_t v20 = __nwlog_obj();
          os_log_type_t v21 = type;
          if (os_log_type_enabled(v20, type))
          {
            *(_DWORD *)buf = 136446210;
            os_log_type_t v41 = "networkd_privileged_set_throughput_estimates";
            _os_log_impl(&dword_1830D4000, v20, v21, "%{public}s Unable to connect to networkd privileged", buf, 0xCu);
          }
        }
        else if (v38)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          os_log_type_t v20 = __nwlog_obj();
          os_log_type_t v29 = type;
          BOOL v30 = os_log_type_enabled(v20, type);
          if (backtrace_string)
          {
            if (v30)
            {
              *(_DWORD *)buf = 136446466;
              os_log_type_t v41 = "networkd_privileged_set_throughput_estimates";
              __int16 v42 = 2082;
              os_log_type_t v43 = backtrace_string;
              _os_log_impl(&dword_1830D4000, v20, v29, "%{public}s Unable to connect to networkd privileged, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(backtrace_string);
            goto LABEL_62;
          }
          if (v30)
          {
            *(_DWORD *)buf = 136446210;
            os_log_type_t v41 = "networkd_privileged_set_throughput_estimates";
            _os_log_impl(&dword_1830D4000, v20, v29, "%{public}s Unable to connect to networkd privileged, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          os_log_type_t v20 = __nwlog_obj();
          os_log_type_t v33 = type;
          if (os_log_type_enabled(v20, type))
          {
            *(_DWORD *)buf = 136446210;
            os_log_type_t v41 = "networkd_privileged_set_throughput_estimates";
            _os_log_impl(&dword_1830D4000, v20, v33, "%{public}s Unable to connect to networkd privileged, backtrace limit exceeded", buf, 0xCu);
          }
        }
      }
LABEL_62:
      if (v19) {
        free(v19);
      }
      goto LABEL_7;
    }
    os_log_type_t v14 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v41 = "networkd_privileged_set_throughput_estimates";
    os_log_type_t v15 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v38 = 0;
    if (__nwlog_fault(v15, &type, &v38))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        id v16 = __nwlog_obj();
        os_log_type_t v17 = type;
        if (os_log_type_enabled(v16, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v41 = "networkd_privileged_set_throughput_estimates";
          _os_log_impl(&dword_1830D4000, v16, v17, "%{public}s xpc_dictionary_create failed", buf, 0xCu);
        }
      }
      else if (v38)
      {
        BOOL v25 = (char *)__nw_create_backtrace_string();
        id v16 = __nwlog_obj();
        os_log_type_t v26 = type;
        BOOL v27 = os_log_type_enabled(v16, type);
        if (v25)
        {
          if (v27)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v41 = "networkd_privileged_set_throughput_estimates";
            __int16 v42 = 2082;
            os_log_type_t v43 = v25;
            _os_log_impl(&dword_1830D4000, v16, v26, "%{public}s xpc_dictionary_create failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v25);
          goto LABEL_57;
        }
        if (v27)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v41 = "networkd_privileged_set_throughput_estimates";
          _os_log_impl(&dword_1830D4000, v16, v26, "%{public}s xpc_dictionary_create failed, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        id v16 = __nwlog_obj();
        os_log_type_t v32 = type;
        if (os_log_type_enabled(v16, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v41 = "networkd_privileged_set_throughput_estimates";
          _os_log_impl(&dword_1830D4000, v16, v32, "%{public}s xpc_dictionary_create failed, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_57:
    if (v15) {
      free(v15);
    }
    goto LABEL_8;
  }
  os_log_type_t v10 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v41 = "networkd_privileged_set_throughput_estimates";
  id v11 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v38 = 0;
  if (__nwlog_fault(v11, &type, &v38))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v12 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v41 = "networkd_privileged_set_throughput_estimates";
        _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s called with null ifname", buf, 0xCu);
      }
    }
    else if (v38)
    {
      BOOL v22 = (char *)__nw_create_backtrace_string();
      id v12 = __nwlog_obj();
      os_log_type_t v23 = type;
      BOOL v24 = os_log_type_enabled(v12, type);
      if (v22)
      {
        if (v24)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v41 = "networkd_privileged_set_throughput_estimates";
          __int16 v42 = 2082;
          os_log_type_t v43 = v22;
          _os_log_impl(&dword_1830D4000, v12, v23, "%{public}s called with null ifname, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v22);
        goto LABEL_52;
      }
      if (v24)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v41 = "networkd_privileged_set_throughput_estimates";
        _os_log_impl(&dword_1830D4000, v12, v23, "%{public}s called with null ifname, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v12 = __nwlog_obj();
      os_log_type_t v31 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v41 = "networkd_privileged_set_throughput_estimates";
        _os_log_impl(&dword_1830D4000, v12, v31, "%{public}s called with null ifname, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_52:
  if (v11) {
    free(v11);
  }
}

void sub_1836027C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

void __networkd_privileged_set_throughput_estimates_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v84 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  xpc_object_t v4 = v3;
  if (!v3)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v11 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    os_log_type_t v80 = "networkd_privileged_set_throughput_estimates_block_invoke";
    xpc_object_t v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v77 = 0;
    if (!__nwlog_fault(v6, &type, &v77)) {
      goto LABEL_73;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v12 = (id)gLogObj;
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v80 = "networkd_privileged_set_throughput_estimates_block_invoke";
        _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s received NULL response", buf, 0xCu);
      }
      goto LABEL_72;
    }
    if (!v77)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v12 = (id)gLogObj;
      os_log_type_t v30 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v80 = "networkd_privileged_set_throughput_estimates_block_invoke";
        _os_log_impl(&dword_1830D4000, v12, v30, "%{public}s received NULL response, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_72;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v12 = (id)gLogObj;
    os_log_type_t v21 = type;
    BOOL v22 = os_log_type_enabled(v12, type);
    if (!backtrace_string)
    {
      if (v22)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v80 = "networkd_privileged_set_throughput_estimates_block_invoke";
        _os_log_impl(&dword_1830D4000, v12, v21, "%{public}s received NULL response, no backtrace", buf, 0xCu);
      }
      goto LABEL_72;
    }
    if (v22)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v80 = "networkd_privileged_set_throughput_estimates_block_invoke";
      __int16 v81 = 2082;
      *(void *)os_log_type_t v82 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v12, v21, "%{public}s received NULL response, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_25;
  }
  Class Class = object_getClass(v3);
  if (Class == (Class)MEMORY[0x1E4F14590])
  {
    os_log_type_t v14 = xpc_dictionary_get_value(v4, (const char *)networkd_privileged_key_result);
    os_log_type_t v15 = v14;
    if (!v14)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v28 = (id)gLogObj;
      *(_DWORD *)buf = 136446210;
      os_log_type_t v80 = "networkd_privileged_set_throughput_estimates_block_invoke";
      os_log_type_t v17 = (const char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v77 = 0;
      if (!__nwlog_fault(v17, &type, &v77)) {
        goto LABEL_132;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v18 = (id)gLogObj;
        os_log_type_t v29 = type;
        if (os_log_type_enabled(v18, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v80 = "networkd_privileged_set_throughput_estimates_block_invoke";
          _os_log_impl(&dword_1830D4000, v18, v29, "%{public}s received response without result code", buf, 0xCu);
        }
        goto LABEL_131;
      }
      if (!v77)
      {
        os_log_type_t v18 = __nwlog_obj();
        os_log_type_t v60 = type;
        if (os_log_type_enabled(v18, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v80 = "networkd_privileged_set_throughput_estimates_block_invoke";
          _os_log_impl(&dword_1830D4000, v18, v60, "%{public}s received response without result code, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_131;
      }
      char v38 = (char *)__nw_create_backtrace_string();
      os_log_type_t v18 = __nwlog_obj();
      os_log_type_t v41 = type;
      BOOL v42 = os_log_type_enabled(v18, type);
      if (!v38)
      {
        if (v42)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v80 = "networkd_privileged_set_throughput_estimates_block_invoke";
          _os_log_impl(&dword_1830D4000, v18, v41, "%{public}s received response without result code, no backtrace", buf, 0xCu);
        }
        goto LABEL_131;
      }
      if (v42)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v80 = "networkd_privileged_set_throughput_estimates_block_invoke";
        __int16 v81 = 2082;
        *(void *)os_log_type_t v82 = v38;
        _os_log_impl(&dword_1830D4000, v18, v41, "%{public}s received response without result code, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_79;
    }
    if (object_getClass(v14) != (Class)MEMORY[0x1E4F145C0])
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v16 = (id)gLogObj;
      *(_DWORD *)buf = 136446210;
      os_log_type_t v80 = "networkd_privileged_set_throughput_estimates_block_invoke";
      os_log_type_t v17 = (const char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v77 = 0;
      if (!__nwlog_fault(v17, &type, &v77)) {
        goto LABEL_132;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v18 = (id)gLogObj;
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v18, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v80 = "networkd_privileged_set_throughput_estimates_block_invoke";
          _os_log_impl(&dword_1830D4000, v18, v19, "%{public}s received invalid result type", buf, 0xCu);
        }
LABEL_131:

LABEL_132:
        if (!v17)
        {
LABEL_135:

          goto LABEL_136;
        }
        goto LABEL_133;
      }
      if (!v77)
      {
        os_log_type_t v18 = __nwlog_obj();
        os_log_type_t v59 = type;
        if (os_log_type_enabled(v18, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v80 = "networkd_privileged_set_throughput_estimates_block_invoke";
          _os_log_impl(&dword_1830D4000, v18, v59, "%{public}s received invalid result type, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_131;
      }
      char v38 = (char *)__nw_create_backtrace_string();
      os_log_type_t v18 = __nwlog_obj();
      os_log_type_t v39 = type;
      BOOL v40 = os_log_type_enabled(v18, type);
      if (!v38)
      {
        if (v40)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v80 = "networkd_privileged_set_throughput_estimates_block_invoke";
          _os_log_impl(&dword_1830D4000, v18, v39, "%{public}s received invalid result type, no backtrace", buf, 0xCu);
        }
        goto LABEL_131;
      }
      if (v40)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v80 = "networkd_privileged_set_throughput_estimates_block_invoke";
        __int16 v81 = 2082;
        *(void *)os_log_type_t v82 = v38;
        _os_log_impl(&dword_1830D4000, v18, v39, "%{public}s received invalid result type, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_79:

      free(v38);
      if (!v17) {
        goto LABEL_135;
      }
LABEL_133:
      os_log_type_t v64 = (char *)v17;
LABEL_134:
      free(v64);
      goto LABEL_135;
    }
    unint64_t value = xpc_int64_get_value(v15);
    uint64_t v34 = value;
    if (!value)
    {

      if (xpc_dictionary_get_int64(v4, (const char *)networkd_privileged_key_result)) {
        goto LABEL_136;
      }
      os_log_type_t v43 = __nwlog_obj();
      if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
      {
        int v48 = *(unsigned __int8 *)(a1 + 40);
        int v49 = *(unsigned __int8 *)(a1 + 41);
        string = xpc_dictionary_get_string(*(xpc_object_t *)(a1 + 32), (const char *)networkd_privileged_key_interface_name);
        *(_DWORD *)buf = 136446978;
        os_log_type_t v80 = "networkd_privileged_set_throughput_estimates_block_invoke";
        __int16 v81 = 1024;
        *(_DWORD *)os_log_type_t v82 = v48;
        *(_WORD *)&v82[4] = 1024;
        *(_DWORD *)&v82[6] = v49;
        *(_WORD *)&v82[10] = 2082;
        *(void *)&v82[12] = string;
        _os_log_impl(&dword_1830D4000, v43, OS_LOG_TYPE_INFO, "%{public}s Set estimated throughput buckets up: %u, down: %u on %{public}s", buf, 0x22u);
      }
      goto LABEL_83;
    }
    if (!(value >> 31))
    {
      id v35 = __nwlog_obj();
      char v36 = v35;
      if (v34 == 6)
      {
        if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v80 = "networkd_privileged_set_throughput_estimates_block_invoke";
          __int16 v81 = 1024;
          *(_DWORD *)os_log_type_t v82 = 6;
          _os_log_impl(&dword_1830D4000, v36, OS_LOG_TYPE_ERROR, "%{public}s received failure result code %{darwin.errno}d", buf, 0x12u);
        }

        goto LABEL_135;
      }
      *(_DWORD *)buf = 136446466;
      os_log_type_t v80 = "networkd_privileged_set_throughput_estimates_block_invoke";
      __int16 v81 = 1024;
      *(_DWORD *)os_log_type_t v82 = v34;
      os_log_type_t v56 = (const char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v77 = 0;
      if (__nwlog_fault(v56, &type, &v77))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          os_log_type_t v65 = __nwlog_obj();
          os_log_type_t v66 = type;
          if (os_log_type_enabled(v65, type))
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v80 = "networkd_privileged_set_throughput_estimates_block_invoke";
            __int16 v81 = 1024;
            *(_DWORD *)os_log_type_t v82 = v34;
            _os_log_impl(&dword_1830D4000, v65, v66, "%{public}s received failure result code %{darwin.errno}d", buf, 0x12u);
          }
        }
        else if (v77)
        {
          BOOL v71 = (char *)__nw_create_backtrace_string();
          os_log_type_t v65 = __nwlog_obj();
          os_log_type_t v72 = type;
          BOOL v73 = os_log_type_enabled(v65, type);
          if (v71)
          {
            if (v73)
            {
              *(_DWORD *)buf = 136446722;
              os_log_type_t v80 = "networkd_privileged_set_throughput_estimates_block_invoke";
              __int16 v81 = 1024;
              *(_DWORD *)os_log_type_t v82 = v34;
              *(_WORD *)&v82[4] = 2082;
              *(void *)&v82[6] = v71;
              _os_log_impl(&dword_1830D4000, v65, v72, "%{public}s received failure result code %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x1Cu);
            }

            free(v71);
            if (!v56) {
              goto LABEL_135;
            }
LABEL_181:
            os_log_type_t v64 = (char *)v56;
            goto LABEL_134;
          }
          if (v73)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v80 = "networkd_privileged_set_throughput_estimates_block_invoke";
            __int16 v81 = 1024;
            *(_DWORD *)os_log_type_t v82 = v34;
            _os_log_impl(&dword_1830D4000, v65, v72, "%{public}s received failure result code %{darwin.errno}d, no backtrace", buf, 0x12u);
          }
        }
        else
        {
          os_log_type_t v65 = __nwlog_obj();
          os_log_type_t v76 = type;
          if (os_log_type_enabled(v65, type))
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v80 = "networkd_privileged_set_throughput_estimates_block_invoke";
            __int16 v81 = 1024;
            *(_DWORD *)os_log_type_t v82 = v34;
            _os_log_impl(&dword_1830D4000, v65, v76, "%{public}s received failure result code %{darwin.errno}d, backtrace limit exceeded", buf, 0x12u);
          }
        }
      }
LABEL_180:
      if (!v56) {
        goto LABEL_135;
      }
      goto LABEL_181;
    }
    os_log_type_t v54 = __nwlog_obj();
    os_log_type_t v55 = networkd_privileged_result_to_string(v34);
    *(_DWORD *)buf = 136446722;
    os_log_type_t v80 = "networkd_privileged_set_throughput_estimates_block_invoke";
    __int16 v81 = 2048;
    *(void *)os_log_type_t v82 = v34;
    *(_WORD *)&v82[8] = 2082;
    *(void *)&v82[10] = v55;
    os_log_type_t v56 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v77 = 0;
    if (!__nwlog_fault(v56, &type, &v77)) {
      goto LABEL_180;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v57 = __nwlog_obj();
      os_log_type_t v58 = type;
      if (os_log_type_enabled(v57, type))
      {
        *(_DWORD *)buf = 136446722;
        os_log_type_t v80 = "networkd_privileged_set_throughput_estimates_block_invoke";
        __int16 v81 = 2048;
        *(void *)os_log_type_t v82 = v34;
        *(_WORD *)&v82[8] = 2082;
        *(void *)&v82[10] = v55;
        _os_log_impl(&dword_1830D4000, v57, v58, "%{public}s received internal failure result code: [%lld] %{public}s", buf, 0x20u);
      }
    }
    else if (v77)
    {
      os_log_type_t v67 = (char *)__nw_create_backtrace_string();
      BOOL v57 = __nwlog_obj();
      os_log_type_t v68 = type;
      BOOL v69 = os_log_type_enabled(v57, type);
      if (v67)
      {
        if (v69)
        {
          *(_DWORD *)buf = 136446978;
          os_log_type_t v80 = "networkd_privileged_set_throughput_estimates_block_invoke";
          __int16 v81 = 2048;
          *(void *)os_log_type_t v82 = v34;
          *(_WORD *)&v82[8] = 2082;
          *(void *)&v82[10] = v55;
          *(_WORD *)&unsigned char v82[18] = 2082;
          __int16 v83 = v67;
          _os_log_impl(&dword_1830D4000, v57, v68, "%{public}s received internal failure result code: [%lld] %{public}s, dumping backtrace:%{public}s", buf, 0x2Au);
        }

        free(v67);
        goto LABEL_180;
      }
      if (v69)
      {
        *(_DWORD *)buf = 136446722;
        os_log_type_t v80 = "networkd_privileged_set_throughput_estimates_block_invoke";
        __int16 v81 = 2048;
        *(void *)os_log_type_t v82 = v34;
        *(_WORD *)&v82[8] = 2082;
        *(void *)&v82[10] = v55;
        _os_log_impl(&dword_1830D4000, v57, v68, "%{public}s received internal failure result code: [%lld] %{public}s, no backtrace", buf, 0x20u);
      }
    }
    else
    {
      BOOL v57 = __nwlog_obj();
      os_log_type_t v75 = type;
      if (os_log_type_enabled(v57, type))
      {
        *(_DWORD *)buf = 136446722;
        os_log_type_t v80 = "networkd_privileged_set_throughput_estimates_block_invoke";
        __int16 v81 = 2048;
        *(void *)os_log_type_t v82 = v34;
        *(_WORD *)&v82[8] = 2082;
        *(void *)&v82[10] = v55;
        _os_log_impl(&dword_1830D4000, v57, v75, "%{public}s received internal failure result code: [%lld] %{public}s, backtrace limit exceeded", buf, 0x20u);
      }
    }

    goto LABEL_180;
  }
  if (Class == (Class)MEMORY[0x1E4F145A8])
  {
    if (v4 == (void *)MEMORY[0x1E4F14520])
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v31 = (id)gLogObj;
      *(_DWORD *)buf = 136446210;
      os_log_type_t v80 = "networkd_privileged_set_throughput_estimates_block_invoke";
      xpc_object_t v6 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v77 = 0;
      if (!__nwlog_fault(v6, &type, &v77)) {
        goto LABEL_73;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v12 = (id)gLogObj;
        os_log_type_t v32 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v80 = "networkd_privileged_set_throughput_estimates_block_invoke";
          _os_log_impl(&dword_1830D4000, v12, v32, "%{public}s received XPC_ERROR_CONNECTION_INTERRUPTED", buf, 0xCu);
        }
        goto LABEL_72;
      }
      if (!v77)
      {
        id v12 = __nwlog_obj();
        os_log_type_t v63 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v80 = "networkd_privileged_set_throughput_estimates_block_invoke";
          _os_log_impl(&dword_1830D4000, v12, v63, "%{public}s received XPC_ERROR_CONNECTION_INTERRUPTED, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_72;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v12 = __nwlog_obj();
      os_log_type_t v44 = type;
      BOOL v45 = os_log_type_enabled(v12, type);
      if (!backtrace_string)
      {
        if (v45)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v80 = "networkd_privileged_set_throughput_estimates_block_invoke";
          _os_log_impl(&dword_1830D4000, v12, v44, "%{public}s received XPC_ERROR_CONNECTION_INTERRUPTED, no backtrace", buf, 0xCu);
        }
        goto LABEL_72;
      }
      if (v45)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v80 = "networkd_privileged_set_throughput_estimates_block_invoke";
        __int16 v81 = 2082;
        *(void *)os_log_type_t v82 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v12, v44, "%{public}s received XPC_ERROR_CONNECTION_INTERRUPTED, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_25;
    }
    if (v4 != (void *)MEMORY[0x1E4F14528])
    {
      if (v4 != (void *)MEMORY[0x1E4F14550])
      {
        xpc_object_t v6 = (char *)MEMORY[0x185319370](v4);
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v23 = (id)gLogObj;
        *(_DWORD *)buf = 136446466;
        os_log_type_t v80 = "networkd_privileged_set_throughput_estimates_block_invoke";
        __int16 v81 = 2082;
        *(void *)os_log_type_t v82 = v6;
        id v8 = (char *)_os_log_send_and_compose_impl();

        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v77 = 0;
        if (!__nwlog_fault(v8, &type, &v77)) {
          goto LABEL_63;
        }
        if (type == OS_LOG_TYPE_FAULT)
        {
          id v9 = __nwlog_obj();
          os_log_type_t v24 = type;
          if (os_log_type_enabled(v9, type))
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v80 = "networkd_privileged_set_throughput_estimates_block_invoke";
            __int16 v81 = 2082;
            *(void *)os_log_type_t v82 = v6;
            _os_log_impl(&dword_1830D4000, v9, v24, "%{public}s received returned unknown XPC error %{public}s", buf, 0x16u);
          }
          goto LABEL_62;
        }
        if (!v77)
        {
          id v9 = __nwlog_obj();
          os_log_type_t v70 = type;
          if (os_log_type_enabled(v9, type))
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v80 = "networkd_privileged_set_throughput_estimates_block_invoke";
            __int16 v81 = 2082;
            *(void *)os_log_type_t v82 = v6;
            _os_log_impl(&dword_1830D4000, v9, v70, "%{public}s received returned unknown XPC error %{public}s, backtrace limit exceeded", buf, 0x16u);
          }
          goto LABEL_62;
        }
        os_log_type_t v51 = (char *)__nw_create_backtrace_string();
        id v9 = __nwlog_obj();
        os_log_type_t v52 = type;
        BOOL v53 = os_log_type_enabled(v9, type);
        if (!v51)
        {
          if (v53)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v80 = "networkd_privileged_set_throughput_estimates_block_invoke";
            __int16 v81 = 2082;
            *(void *)os_log_type_t v82 = v6;
            _os_log_impl(&dword_1830D4000, v9, v52, "%{public}s received returned unknown XPC error %{public}s, no backtrace", buf, 0x16u);
          }
          goto LABEL_62;
        }
        if (v53)
        {
          *(_DWORD *)buf = 136446722;
          os_log_type_t v80 = "networkd_privileged_set_throughput_estimates_block_invoke";
          __int16 v81 = 2082;
          *(void *)os_log_type_t v82 = v6;
          *(_WORD *)&v82[8] = 2082;
          *(void *)&v82[10] = v51;
          _os_log_impl(&dword_1830D4000, v9, v52, "%{public}s received returned unknown XPC error %{public}s, dumping backtrace:%{public}s", buf, 0x20u);
        }

        free(v51);
        if (!v8) {
          goto LABEL_73;
        }
LABEL_64:
        free(v8);
        goto LABEL_73;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v46 = (id)gLogObj;
      *(_DWORD *)buf = 136446210;
      os_log_type_t v80 = "networkd_privileged_set_throughput_estimates_block_invoke";
      xpc_object_t v6 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v77 = 0;
      if (!__nwlog_fault(v6, &type, &v77)) {
        goto LABEL_73;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        id v12 = __nwlog_obj();
        os_log_type_t v47 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v80 = "networkd_privileged_set_throughput_estimates_block_invoke";
          _os_log_impl(&dword_1830D4000, v12, v47, "%{public}s received XPC_ERROR_TERMINATION_IMMINENT", buf, 0xCu);
        }
LABEL_72:

        goto LABEL_73;
      }
      if (!v77)
      {
        id v12 = __nwlog_obj();
        os_log_type_t v74 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v80 = "networkd_privileged_set_throughput_estimates_block_invoke";
          _os_log_impl(&dword_1830D4000, v12, v74, "%{public}s received XPC_ERROR_TERMINATION_IMMINENT, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_72;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v12 = __nwlog_obj();
      os_log_type_t v61 = type;
      BOOL v62 = os_log_type_enabled(v12, type);
      if (!backtrace_string)
      {
        if (v62)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v80 = "networkd_privileged_set_throughput_estimates_block_invoke";
          _os_log_impl(&dword_1830D4000, v12, v61, "%{public}s received XPC_ERROR_TERMINATION_IMMINENT, no backtrace", buf, 0xCu);
        }
        goto LABEL_72;
      }
      if (v62)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v80 = "networkd_privileged_set_throughput_estimates_block_invoke";
        __int16 v81 = 2082;
        *(void *)os_log_type_t v82 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v12, v61, "%{public}s received XPC_ERROR_TERMINATION_IMMINENT, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_25:

      free(backtrace_string);
      if (!v6) {
        goto LABEL_136;
      }
      goto LABEL_74;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v43 = (id)gLogObj;
    if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v80 = "networkd_privileged_set_throughput_estimates_block_invoke";
      _os_log_impl(&dword_1830D4000, v43, OS_LOG_TYPE_ERROR, "%{public}s received XPC_ERROR_CONNECTION_INVALID", buf, 0xCu);
    }
LABEL_83:

    goto LABEL_136;
  }
  xpc_object_t v6 = (char *)MEMORY[0x185319370](v4);
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v7 = (id)gLogObj;
  *(_DWORD *)buf = 136446466;
  os_log_type_t v80 = "networkd_privileged_set_throughput_estimates_block_invoke";
  __int16 v81 = 2082;
  *(void *)os_log_type_t v82 = v6;
  id v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v77 = 0;
  if (!__nwlog_fault(v8, &type, &v77)) {
    goto LABEL_63;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v9 = (id)gLogObj;
    os_log_type_t v10 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v80 = "networkd_privileged_set_throughput_estimates_block_invoke";
      __int16 v81 = 2082;
      *(void *)os_log_type_t v82 = v6;
      _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s received unknown type XPC %{public}s", buf, 0x16u);
    }
LABEL_62:

LABEL_63:
    if (!v8) {
      goto LABEL_73;
    }
    goto LABEL_64;
  }
  if (!v77)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v9 = (id)gLogObj;
    os_log_type_t v37 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v80 = "networkd_privileged_set_throughput_estimates_block_invoke";
      __int16 v81 = 2082;
      *(void *)os_log_type_t v82 = v6;
      _os_log_impl(&dword_1830D4000, v9, v37, "%{public}s received unknown type XPC %{public}s, backtrace limit exceeded", buf, 0x16u);
    }
    goto LABEL_62;
  }
  BOOL v25 = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v9 = (id)gLogObj;
  os_log_type_t v26 = type;
  BOOL v27 = os_log_type_enabled(v9, type);
  if (!v25)
  {
    if (v27)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v80 = "networkd_privileged_set_throughput_estimates_block_invoke";
      __int16 v81 = 2082;
      *(void *)os_log_type_t v82 = v6;
      _os_log_impl(&dword_1830D4000, v9, v26, "%{public}s received unknown type XPC %{public}s, no backtrace", buf, 0x16u);
    }
    goto LABEL_62;
  }
  if (v27)
  {
    *(_DWORD *)buf = 136446722;
    os_log_type_t v80 = "networkd_privileged_set_throughput_estimates_block_invoke";
    __int16 v81 = 2082;
    *(void *)os_log_type_t v82 = v6;
    *(_WORD *)&v82[8] = 2082;
    *(void *)&v82[10] = v25;
    _os_log_impl(&dword_1830D4000, v9, v26, "%{public}s received unknown type XPC %{public}s, dumping backtrace:%{public}s", buf, 0x20u);
  }

  free(v25);
  if (v8) {
    goto LABEL_64;
  }
LABEL_73:
  if (v6) {
LABEL_74:
  }
    free(v6);
LABEL_136:
}

void sub_183604014(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void networkd_privileged_set_radio_type(const char *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
    id v7 = v6;
    if (v6)
    {
      xpc_dictionary_set_uint64(v6, (const char *)networkd_privileged_key_type, 0x14uLL);
      xpc_dictionary_set_uint64(v7, (const char *)networkd_privileged_key_radio_type, a2);
      xpc_dictionary_set_uint64(v7, (const char *)networkd_privileged_key_radio_channel, a3);
      xpc_dictionary_set_string(v7, (const char *)networkd_privileged_key_interface_name, a1);
      id v8 = networkd_privileged_copy_connection();
      if (v8)
      {
        if (networkd_privileged_copy_queue(void)::onceToken != -1) {
          dispatch_once(&networkd_privileged_copy_queue(void)::onceToken, &__block_literal_global_56);
        }
        id v9 = (id)networkd_privileged_copy_queue(void)::networkdPrivilegedQueue;
        v34[0] = MEMORY[0x1E4F143A8];
        v34[1] = 3221225472;
        v34[2] = __networkd_privileged_set_radio_type_block_invoke;
        v34[3] = &unk_1E523A6A8;
        char v36 = a2;
        char v37 = a3;
        id v35 = v7;
        networkd_privileged_send_async_inner((uint64_t)"networkd_privileged_set_radio_type", v35, v9, v34);

LABEL_7:
LABEL_8:

        return;
      }
      os_log_type_t v18 = __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      os_log_type_t v41 = "networkd_privileged_set_radio_type";
      os_log_type_t v19 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v38 = 0;
      if (__nwlog_fault(v19, &type, &v38))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          os_log_type_t v20 = __nwlog_obj();
          os_log_type_t v21 = type;
          if (os_log_type_enabled(v20, type))
          {
            *(_DWORD *)buf = 136446210;
            os_log_type_t v41 = "networkd_privileged_set_radio_type";
            _os_log_impl(&dword_1830D4000, v20, v21, "%{public}s Unable to connect to networkd privileged", buf, 0xCu);
          }
        }
        else if (v38)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          os_log_type_t v20 = __nwlog_obj();
          os_log_type_t v29 = type;
          BOOL v30 = os_log_type_enabled(v20, type);
          if (backtrace_string)
          {
            if (v30)
            {
              *(_DWORD *)buf = 136446466;
              os_log_type_t v41 = "networkd_privileged_set_radio_type";
              __int16 v42 = 2082;
              os_log_type_t v43 = backtrace_string;
              _os_log_impl(&dword_1830D4000, v20, v29, "%{public}s Unable to connect to networkd privileged, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(backtrace_string);
            goto LABEL_62;
          }
          if (v30)
          {
            *(_DWORD *)buf = 136446210;
            os_log_type_t v41 = "networkd_privileged_set_radio_type";
            _os_log_impl(&dword_1830D4000, v20, v29, "%{public}s Unable to connect to networkd privileged, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          os_log_type_t v20 = __nwlog_obj();
          os_log_type_t v33 = type;
          if (os_log_type_enabled(v20, type))
          {
            *(_DWORD *)buf = 136446210;
            os_log_type_t v41 = "networkd_privileged_set_radio_type";
            _os_log_impl(&dword_1830D4000, v20, v33, "%{public}s Unable to connect to networkd privileged, backtrace limit exceeded", buf, 0xCu);
          }
        }
      }
LABEL_62:
      if (v19) {
        free(v19);
      }
      goto LABEL_7;
    }
    os_log_type_t v14 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v41 = "networkd_privileged_set_radio_type";
    os_log_type_t v15 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v38 = 0;
    if (__nwlog_fault(v15, &type, &v38))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        id v16 = __nwlog_obj();
        os_log_type_t v17 = type;
        if (os_log_type_enabled(v16, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v41 = "networkd_privileged_set_radio_type";
          _os_log_impl(&dword_1830D4000, v16, v17, "%{public}s xpc_dictionary_create failed", buf, 0xCu);
        }
      }
      else if (v38)
      {
        BOOL v25 = (char *)__nw_create_backtrace_string();
        id v16 = __nwlog_obj();
        os_log_type_t v26 = type;
        BOOL v27 = os_log_type_enabled(v16, type);
        if (v25)
        {
          if (v27)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v41 = "networkd_privileged_set_radio_type";
            __int16 v42 = 2082;
            os_log_type_t v43 = v25;
            _os_log_impl(&dword_1830D4000, v16, v26, "%{public}s xpc_dictionary_create failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v25);
          goto LABEL_57;
        }
        if (v27)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v41 = "networkd_privileged_set_radio_type";
          _os_log_impl(&dword_1830D4000, v16, v26, "%{public}s xpc_dictionary_create failed, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        id v16 = __nwlog_obj();
        os_log_type_t v32 = type;
        if (os_log_type_enabled(v16, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v41 = "networkd_privileged_set_radio_type";
          _os_log_impl(&dword_1830D4000, v16, v32, "%{public}s xpc_dictionary_create failed, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_57:
    if (v15) {
      free(v15);
    }
    goto LABEL_8;
  }
  os_log_type_t v10 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v41 = "networkd_privileged_set_radio_type";
  id v11 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v38 = 0;
  if (__nwlog_fault(v11, &type, &v38))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v12 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v41 = "networkd_privileged_set_radio_type";
        _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s called with null ifname", buf, 0xCu);
      }
    }
    else if (v38)
    {
      BOOL v22 = (char *)__nw_create_backtrace_string();
      id v12 = __nwlog_obj();
      os_log_type_t v23 = type;
      BOOL v24 = os_log_type_enabled(v12, type);
      if (v22)
      {
        if (v24)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v41 = "networkd_privileged_set_radio_type";
          __int16 v42 = 2082;
          os_log_type_t v43 = v22;
          _os_log_impl(&dword_1830D4000, v12, v23, "%{public}s called with null ifname, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v22);
        goto LABEL_52;
      }
      if (v24)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v41 = "networkd_privileged_set_radio_type";
        _os_log_impl(&dword_1830D4000, v12, v23, "%{public}s called with null ifname, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v12 = __nwlog_obj();
      os_log_type_t v31 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v41 = "networkd_privileged_set_radio_type";
        _os_log_impl(&dword_1830D4000, v12, v31, "%{public}s called with null ifname, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_52:
  if (v11) {
    free(v11);
  }
}

void sub_183604810(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

void __networkd_privileged_set_radio_type_block_invoke(uint64_t a1, void *a2)
{
  *(void *)&v83[11] = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  xpc_object_t v4 = v3;
  if (!v3)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v11 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    os_log_type_t v80 = "networkd_privileged_set_radio_type_block_invoke";
    xpc_object_t v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v77 = 0;
    if (!__nwlog_fault(v6, &type, &v77)) {
      goto LABEL_73;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v12 = (id)gLogObj;
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v80 = "networkd_privileged_set_radio_type_block_invoke";
        _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s received NULL response", buf, 0xCu);
      }
      goto LABEL_72;
    }
    if (!v77)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v12 = (id)gLogObj;
      os_log_type_t v30 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v80 = "networkd_privileged_set_radio_type_block_invoke";
        _os_log_impl(&dword_1830D4000, v12, v30, "%{public}s received NULL response, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_72;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v12 = (id)gLogObj;
    os_log_type_t v21 = type;
    BOOL v22 = os_log_type_enabled(v12, type);
    if (!backtrace_string)
    {
      if (v22)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v80 = "networkd_privileged_set_radio_type_block_invoke";
        _os_log_impl(&dword_1830D4000, v12, v21, "%{public}s received NULL response, no backtrace", buf, 0xCu);
      }
      goto LABEL_72;
    }
    if (v22)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v80 = "networkd_privileged_set_radio_type_block_invoke";
      __int16 v81 = 2082;
      *(void *)os_log_type_t v82 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v12, v21, "%{public}s received NULL response, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_25;
  }
  Class Class = object_getClass(v3);
  if (Class == (Class)MEMORY[0x1E4F14590])
  {
    os_log_type_t v14 = xpc_dictionary_get_value(v4, (const char *)networkd_privileged_key_result);
    os_log_type_t v15 = v14;
    if (!v14)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v28 = (id)gLogObj;
      *(_DWORD *)buf = 136446210;
      os_log_type_t v80 = "networkd_privileged_set_radio_type_block_invoke";
      os_log_type_t v17 = (const char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v77 = 0;
      if (!__nwlog_fault(v17, &type, &v77)) {
        goto LABEL_132;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v18 = (id)gLogObj;
        os_log_type_t v29 = type;
        if (os_log_type_enabled(v18, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v80 = "networkd_privileged_set_radio_type_block_invoke";
          _os_log_impl(&dword_1830D4000, v18, v29, "%{public}s received response without result code", buf, 0xCu);
        }
        goto LABEL_131;
      }
      if (!v77)
      {
        os_log_type_t v18 = __nwlog_obj();
        os_log_type_t v60 = type;
        if (os_log_type_enabled(v18, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v80 = "networkd_privileged_set_radio_type_block_invoke";
          _os_log_impl(&dword_1830D4000, v18, v60, "%{public}s received response without result code, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_131;
      }
      char v38 = (char *)__nw_create_backtrace_string();
      os_log_type_t v18 = __nwlog_obj();
      os_log_type_t v41 = type;
      BOOL v42 = os_log_type_enabled(v18, type);
      if (!v38)
      {
        if (v42)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v80 = "networkd_privileged_set_radio_type_block_invoke";
          _os_log_impl(&dword_1830D4000, v18, v41, "%{public}s received response without result code, no backtrace", buf, 0xCu);
        }
        goto LABEL_131;
      }
      if (v42)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v80 = "networkd_privileged_set_radio_type_block_invoke";
        __int16 v81 = 2082;
        *(void *)os_log_type_t v82 = v38;
        _os_log_impl(&dword_1830D4000, v18, v41, "%{public}s received response without result code, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_79;
    }
    if (object_getClass(v14) != (Class)MEMORY[0x1E4F145C0])
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v16 = (id)gLogObj;
      *(_DWORD *)buf = 136446210;
      os_log_type_t v80 = "networkd_privileged_set_radio_type_block_invoke";
      os_log_type_t v17 = (const char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v77 = 0;
      if (!__nwlog_fault(v17, &type, &v77)) {
        goto LABEL_132;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v18 = (id)gLogObj;
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v18, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v80 = "networkd_privileged_set_radio_type_block_invoke";
          _os_log_impl(&dword_1830D4000, v18, v19, "%{public}s received invalid result type", buf, 0xCu);
        }
LABEL_131:

LABEL_132:
        if (!v17)
        {
LABEL_135:

          goto LABEL_136;
        }
        goto LABEL_133;
      }
      if (!v77)
      {
        os_log_type_t v18 = __nwlog_obj();
        os_log_type_t v59 = type;
        if (os_log_type_enabled(v18, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v80 = "networkd_privileged_set_radio_type_block_invoke";
          _os_log_impl(&dword_1830D4000, v18, v59, "%{public}s received invalid result type, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_131;
      }
      char v38 = (char *)__nw_create_backtrace_string();
      os_log_type_t v18 = __nwlog_obj();
      os_log_type_t v39 = type;
      BOOL v40 = os_log_type_enabled(v18, type);
      if (!v38)
      {
        if (v40)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v80 = "networkd_privileged_set_radio_type_block_invoke";
          _os_log_impl(&dword_1830D4000, v18, v39, "%{public}s received invalid result type, no backtrace", buf, 0xCu);
        }
        goto LABEL_131;
      }
      if (v40)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v80 = "networkd_privileged_set_radio_type_block_invoke";
        __int16 v81 = 2082;
        *(void *)os_log_type_t v82 = v38;
        _os_log_impl(&dword_1830D4000, v18, v39, "%{public}s received invalid result type, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_79:

      free(v38);
      if (!v17) {
        goto LABEL_135;
      }
LABEL_133:
      os_log_type_t v64 = (char *)v17;
LABEL_134:
      free(v64);
      goto LABEL_135;
    }
    unint64_t value = xpc_int64_get_value(v15);
    uint64_t v34 = value;
    if (!value)
    {

      if (xpc_dictionary_get_int64(v4, (const char *)networkd_privileged_key_result)) {
        goto LABEL_136;
      }
      os_log_type_t v43 = __nwlog_obj();
      if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
      {
        int v48 = *(unsigned __int8 *)(a1 + 40);
        int v49 = *(unsigned __int8 *)(a1 + 41);
        string = xpc_dictionary_get_string(*(xpc_object_t *)(a1 + 32), (const char *)networkd_privileged_key_interface_name);
        *(_DWORD *)buf = 136447234;
        os_log_type_t v80 = "networkd_privileged_set_radio_type_block_invoke";
        __int16 v81 = 2082;
        *(void *)os_log_type_t v82 = nw_interface_radio_type_to_string(v48);
        *(_WORD *)&v82[8] = 1024;
        *(_DWORD *)&v82[10] = v48;
        *(_WORD *)&v82[14] = 1024;
        *(_DWORD *)&v82[16] = v49;
        v83[0] = 2082;
        *(void *)&v83[1] = string;
        _os_log_impl(&dword_1830D4000, v43, OS_LOG_TYPE_DEFAULT, "%{public}s Set radio type to: %{public}s (%u), channel: %u on %{public}s", buf, 0x2Cu);
      }
      goto LABEL_83;
    }
    if (!(value >> 31))
    {
      id v35 = __nwlog_obj();
      char v36 = v35;
      if (v34 == 6)
      {
        if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v80 = "networkd_privileged_set_radio_type_block_invoke";
          __int16 v81 = 1024;
          *(_DWORD *)os_log_type_t v82 = 6;
          _os_log_impl(&dword_1830D4000, v36, OS_LOG_TYPE_ERROR, "%{public}s received failure result code %{darwin.errno}d", buf, 0x12u);
        }

        goto LABEL_135;
      }
      *(_DWORD *)buf = 136446466;
      os_log_type_t v80 = "networkd_privileged_set_radio_type_block_invoke";
      __int16 v81 = 1024;
      *(_DWORD *)os_log_type_t v82 = v34;
      os_log_type_t v56 = (const char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v77 = 0;
      if (__nwlog_fault(v56, &type, &v77))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          os_log_type_t v65 = __nwlog_obj();
          os_log_type_t v66 = type;
          if (os_log_type_enabled(v65, type))
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v80 = "networkd_privileged_set_radio_type_block_invoke";
            __int16 v81 = 1024;
            *(_DWORD *)os_log_type_t v82 = v34;
            _os_log_impl(&dword_1830D4000, v65, v66, "%{public}s received failure result code %{darwin.errno}d", buf, 0x12u);
          }
        }
        else if (v77)
        {
          BOOL v71 = (char *)__nw_create_backtrace_string();
          os_log_type_t v65 = __nwlog_obj();
          os_log_type_t v72 = type;
          BOOL v73 = os_log_type_enabled(v65, type);
          if (v71)
          {
            if (v73)
            {
              *(_DWORD *)buf = 136446722;
              os_log_type_t v80 = "networkd_privileged_set_radio_type_block_invoke";
              __int16 v81 = 1024;
              *(_DWORD *)os_log_type_t v82 = v34;
              *(_WORD *)&v82[4] = 2082;
              *(void *)&v82[6] = v71;
              _os_log_impl(&dword_1830D4000, v65, v72, "%{public}s received failure result code %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x1Cu);
            }

            free(v71);
            if (!v56) {
              goto LABEL_135;
            }
LABEL_181:
            os_log_type_t v64 = (char *)v56;
            goto LABEL_134;
          }
          if (v73)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v80 = "networkd_privileged_set_radio_type_block_invoke";
            __int16 v81 = 1024;
            *(_DWORD *)os_log_type_t v82 = v34;
            _os_log_impl(&dword_1830D4000, v65, v72, "%{public}s received failure result code %{darwin.errno}d, no backtrace", buf, 0x12u);
          }
        }
        else
        {
          os_log_type_t v65 = __nwlog_obj();
          os_log_type_t v76 = type;
          if (os_log_type_enabled(v65, type))
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v80 = "networkd_privileged_set_radio_type_block_invoke";
            __int16 v81 = 1024;
            *(_DWORD *)os_log_type_t v82 = v34;
            _os_log_impl(&dword_1830D4000, v65, v76, "%{public}s received failure result code %{darwin.errno}d, backtrace limit exceeded", buf, 0x12u);
          }
        }
      }
LABEL_180:
      if (!v56) {
        goto LABEL_135;
      }
      goto LABEL_181;
    }
    os_log_type_t v54 = __nwlog_obj();
    os_log_type_t v55 = networkd_privileged_result_to_string(v34);
    *(_DWORD *)buf = 136446722;
    os_log_type_t v80 = "networkd_privileged_set_radio_type_block_invoke";
    __int16 v81 = 2048;
    *(void *)os_log_type_t v82 = v34;
    *(_WORD *)&v82[8] = 2082;
    *(void *)&v82[10] = v55;
    os_log_type_t v56 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v77 = 0;
    if (!__nwlog_fault(v56, &type, &v77)) {
      goto LABEL_180;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v57 = __nwlog_obj();
      os_log_type_t v58 = type;
      if (os_log_type_enabled(v57, type))
      {
        *(_DWORD *)buf = 136446722;
        os_log_type_t v80 = "networkd_privileged_set_radio_type_block_invoke";
        __int16 v81 = 2048;
        *(void *)os_log_type_t v82 = v34;
        *(_WORD *)&v82[8] = 2082;
        *(void *)&v82[10] = v55;
        _os_log_impl(&dword_1830D4000, v57, v58, "%{public}s received internal failure result code: [%lld] %{public}s", buf, 0x20u);
      }
    }
    else if (v77)
    {
      os_log_type_t v67 = (char *)__nw_create_backtrace_string();
      BOOL v57 = __nwlog_obj();
      os_log_type_t v68 = type;
      BOOL v69 = os_log_type_enabled(v57, type);
      if (v67)
      {
        if (v69)
        {
          *(_DWORD *)buf = 136446978;
          os_log_type_t v80 = "networkd_privileged_set_radio_type_block_invoke";
          __int16 v81 = 2048;
          *(void *)os_log_type_t v82 = v34;
          *(_WORD *)&v82[8] = 2082;
          *(void *)&v82[10] = v55;
          *(_WORD *)&unsigned char v82[18] = 2082;
          *(void *)__int16 v83 = v67;
          _os_log_impl(&dword_1830D4000, v57, v68, "%{public}s received internal failure result code: [%lld] %{public}s, dumping backtrace:%{public}s", buf, 0x2Au);
        }

        free(v67);
        goto LABEL_180;
      }
      if (v69)
      {
        *(_DWORD *)buf = 136446722;
        os_log_type_t v80 = "networkd_privileged_set_radio_type_block_invoke";
        __int16 v81 = 2048;
        *(void *)os_log_type_t v82 = v34;
        *(_WORD *)&v82[8] = 2082;
        *(void *)&v82[10] = v55;
        _os_log_impl(&dword_1830D4000, v57, v68, "%{public}s received internal failure result code: [%lld] %{public}s, no backtrace", buf, 0x20u);
      }
    }
    else
    {
      BOOL v57 = __nwlog_obj();
      os_log_type_t v75 = type;
      if (os_log_type_enabled(v57, type))
      {
        *(_DWORD *)buf = 136446722;
        os_log_type_t v80 = "networkd_privileged_set_radio_type_block_invoke";
        __int16 v81 = 2048;
        *(void *)os_log_type_t v82 = v34;
        *(_WORD *)&v82[8] = 2082;
        *(void *)&v82[10] = v55;
        _os_log_impl(&dword_1830D4000, v57, v75, "%{public}s received internal failure result code: [%lld] %{public}s, backtrace limit exceeded", buf, 0x20u);
      }
    }

    goto LABEL_180;
  }
  if (Class == (Class)MEMORY[0x1E4F145A8])
  {
    if (v4 == (void *)MEMORY[0x1E4F14520])
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v31 = (id)gLogObj;
      *(_DWORD *)buf = 136446210;
      os_log_type_t v80 = "networkd_privileged_set_radio_type_block_invoke";
      xpc_object_t v6 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v77 = 0;
      if (!__nwlog_fault(v6, &type, &v77)) {
        goto LABEL_73;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v12 = (id)gLogObj;
        os_log_type_t v32 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v80 = "networkd_privileged_set_radio_type_block_invoke";
          _os_log_impl(&dword_1830D4000, v12, v32, "%{public}s received XPC_ERROR_CONNECTION_INTERRUPTED", buf, 0xCu);
        }
        goto LABEL_72;
      }
      if (!v77)
      {
        id v12 = __nwlog_obj();
        os_log_type_t v63 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v80 = "networkd_privileged_set_radio_type_block_invoke";
          _os_log_impl(&dword_1830D4000, v12, v63, "%{public}s received XPC_ERROR_CONNECTION_INTERRUPTED, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_72;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v12 = __nwlog_obj();
      os_log_type_t v44 = type;
      BOOL v45 = os_log_type_enabled(v12, type);
      if (!backtrace_string)
      {
        if (v45)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v80 = "networkd_privileged_set_radio_type_block_invoke";
          _os_log_impl(&dword_1830D4000, v12, v44, "%{public}s received XPC_ERROR_CONNECTION_INTERRUPTED, no backtrace", buf, 0xCu);
        }
        goto LABEL_72;
      }
      if (v45)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v80 = "networkd_privileged_set_radio_type_block_invoke";
        __int16 v81 = 2082;
        *(void *)os_log_type_t v82 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v12, v44, "%{public}s received XPC_ERROR_CONNECTION_INTERRUPTED, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_25;
    }
    if (v4 != (void *)MEMORY[0x1E4F14528])
    {
      if (v4 != (void *)MEMORY[0x1E4F14550])
      {
        xpc_object_t v6 = (char *)MEMORY[0x185319370](v4);
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v23 = (id)gLogObj;
        *(_DWORD *)buf = 136446466;
        os_log_type_t v80 = "networkd_privileged_set_radio_type_block_invoke";
        __int16 v81 = 2082;
        *(void *)os_log_type_t v82 = v6;
        id v8 = (char *)_os_log_send_and_compose_impl();

        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v77 = 0;
        if (!__nwlog_fault(v8, &type, &v77)) {
          goto LABEL_63;
        }
        if (type == OS_LOG_TYPE_FAULT)
        {
          id v9 = __nwlog_obj();
          os_log_type_t v24 = type;
          if (os_log_type_enabled(v9, type))
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v80 = "networkd_privileged_set_radio_type_block_invoke";
            __int16 v81 = 2082;
            *(void *)os_log_type_t v82 = v6;
            _os_log_impl(&dword_1830D4000, v9, v24, "%{public}s received returned unknown XPC error %{public}s", buf, 0x16u);
          }
          goto LABEL_62;
        }
        if (!v77)
        {
          id v9 = __nwlog_obj();
          os_log_type_t v70 = type;
          if (os_log_type_enabled(v9, type))
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v80 = "networkd_privileged_set_radio_type_block_invoke";
            __int16 v81 = 2082;
            *(void *)os_log_type_t v82 = v6;
            _os_log_impl(&dword_1830D4000, v9, v70, "%{public}s received returned unknown XPC error %{public}s, backtrace limit exceeded", buf, 0x16u);
          }
          goto LABEL_62;
        }
        os_log_type_t v51 = (char *)__nw_create_backtrace_string();
        id v9 = __nwlog_obj();
        os_log_type_t v52 = type;
        BOOL v53 = os_log_type_enabled(v9, type);
        if (!v51)
        {
          if (v53)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v80 = "networkd_privileged_set_radio_type_block_invoke";
            __int16 v81 = 2082;
            *(void *)os_log_type_t v82 = v6;
            _os_log_impl(&dword_1830D4000, v9, v52, "%{public}s received returned unknown XPC error %{public}s, no backtrace", buf, 0x16u);
          }
          goto LABEL_62;
        }
        if (v53)
        {
          *(_DWORD *)buf = 136446722;
          os_log_type_t v80 = "networkd_privileged_set_radio_type_block_invoke";
          __int16 v81 = 2082;
          *(void *)os_log_type_t v82 = v6;
          *(_WORD *)&v82[8] = 2082;
          *(void *)&v82[10] = v51;
          _os_log_impl(&dword_1830D4000, v9, v52, "%{public}s received returned unknown XPC error %{public}s, dumping backtrace:%{public}s", buf, 0x20u);
        }

        free(v51);
        if (!v8) {
          goto LABEL_73;
        }
LABEL_64:
        free(v8);
        goto LABEL_73;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v46 = (id)gLogObj;
      *(_DWORD *)buf = 136446210;
      os_log_type_t v80 = "networkd_privileged_set_radio_type_block_invoke";
      xpc_object_t v6 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v77 = 0;
      if (!__nwlog_fault(v6, &type, &v77)) {
        goto LABEL_73;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        id v12 = __nwlog_obj();
        os_log_type_t v47 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v80 = "networkd_privileged_set_radio_type_block_invoke";
          _os_log_impl(&dword_1830D4000, v12, v47, "%{public}s received XPC_ERROR_TERMINATION_IMMINENT", buf, 0xCu);
        }
LABEL_72:

        goto LABEL_73;
      }
      if (!v77)
      {
        id v12 = __nwlog_obj();
        os_log_type_t v74 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v80 = "networkd_privileged_set_radio_type_block_invoke";
          _os_log_impl(&dword_1830D4000, v12, v74, "%{public}s received XPC_ERROR_TERMINATION_IMMINENT, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_72;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v12 = __nwlog_obj();
      os_log_type_t v61 = type;
      BOOL v62 = os_log_type_enabled(v12, type);
      if (!backtrace_string)
      {
        if (v62)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v80 = "networkd_privileged_set_radio_type_block_invoke";
          _os_log_impl(&dword_1830D4000, v12, v61, "%{public}s received XPC_ERROR_TERMINATION_IMMINENT, no backtrace", buf, 0xCu);
        }
        goto LABEL_72;
      }
      if (v62)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v80 = "networkd_privileged_set_radio_type_block_invoke";
        __int16 v81 = 2082;
        *(void *)os_log_type_t v82 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v12, v61, "%{public}s received XPC_ERROR_TERMINATION_IMMINENT, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_25:

      free(backtrace_string);
      if (!v6) {
        goto LABEL_136;
      }
      goto LABEL_74;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v43 = (id)gLogObj;
    if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v80 = "networkd_privileged_set_radio_type_block_invoke";
      _os_log_impl(&dword_1830D4000, v43, OS_LOG_TYPE_ERROR, "%{public}s received XPC_ERROR_CONNECTION_INVALID", buf, 0xCu);
    }
LABEL_83:

    goto LABEL_136;
  }
  xpc_object_t v6 = (char *)MEMORY[0x185319370](v4);
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v7 = (id)gLogObj;
  *(_DWORD *)buf = 136446466;
  os_log_type_t v80 = "networkd_privileged_set_radio_type_block_invoke";
  __int16 v81 = 2082;
  *(void *)os_log_type_t v82 = v6;
  id v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v77 = 0;
  if (!__nwlog_fault(v8, &type, &v77)) {
    goto LABEL_63;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v9 = (id)gLogObj;
    os_log_type_t v10 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v80 = "networkd_privileged_set_radio_type_block_invoke";
      __int16 v81 = 2082;
      *(void *)os_log_type_t v82 = v6;
      _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s received unknown type XPC %{public}s", buf, 0x16u);
    }
LABEL_62:

LABEL_63:
    if (!v8) {
      goto LABEL_73;
    }
    goto LABEL_64;
  }
  if (!v77)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v9 = (id)gLogObj;
    os_log_type_t v37 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v80 = "networkd_privileged_set_radio_type_block_invoke";
      __int16 v81 = 2082;
      *(void *)os_log_type_t v82 = v6;
      _os_log_impl(&dword_1830D4000, v9, v37, "%{public}s received unknown type XPC %{public}s, backtrace limit exceeded", buf, 0x16u);
    }
    goto LABEL_62;
  }
  BOOL v25 = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v9 = (id)gLogObj;
  os_log_type_t v26 = type;
  BOOL v27 = os_log_type_enabled(v9, type);
  if (!v25)
  {
    if (v27)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v80 = "networkd_privileged_set_radio_type_block_invoke";
      __int16 v81 = 2082;
      *(void *)os_log_type_t v82 = v6;
      _os_log_impl(&dword_1830D4000, v9, v26, "%{public}s received unknown type XPC %{public}s, no backtrace", buf, 0x16u);
    }
    goto LABEL_62;
  }
  if (v27)
  {
    *(_DWORD *)buf = 136446722;
    os_log_type_t v80 = "networkd_privileged_set_radio_type_block_invoke";
    __int16 v81 = 2082;
    *(void *)os_log_type_t v82 = v6;
    *(_WORD *)&v82[8] = 2082;
    *(void *)&v82[10] = v25;
    _os_log_impl(&dword_1830D4000, v9, v26, "%{public}s received unknown type XPC %{public}s, dumping backtrace:%{public}s", buf, 0x20u);
  }

  free(v25);
  if (v8) {
    goto LABEL_64;
  }
LABEL_73:
  if (v6) {
LABEL_74:
  }
    free(v6);
LABEL_136:
}

void sub_183606078(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_protocol_http_redirect_create(uint64_t a1, uint64_t a2, NSObject *a3, void *a4)
{
  uint64_t v73 = *MEMORY[0x1E4F143B8];
  xpc_object_t v6 = (NSObject **)malloc_type_calloc(1uLL, 0x2B8uLL, 0xEAFB8F1AuLL);
  if (!v6)
  {
    os_log_type_t v33 = __nwlog_obj();
    os_log_type_enabled(v33, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446722;
    *(void *)&uint8_t buf[4] = "strict_calloc";
    *(_WORD *)&buf[12] = 2048;
    *(void *)&buf[14] = 1;
    *(_WORD *)&buf[22] = 2048;
    uint64_t v70 = 696;
    uint64_t v34 = (void *)_os_log_send_and_compose_impl();
    BOOL result = __nwlog_abort((uint64_t)v34);
    if (result)
    {
      __break(1u);
      return result;
    }
    free(v34);
  }
  bzero(v6, 0x2B8uLL);
  if (gLogDatapath)
  {
    id v35 = __nwlog_obj();
    if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "nw_protocol_http_redirect_create";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = (char *)v6 + 114;
      *(_WORD *)&buf[22] = 2080;
      uint64_t v70 = (uint64_t)" ";
      _os_log_impl(&dword_1830D4000, v35, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%scalled", buf, 0x20u);
    }
  }
  if (nw_protocol_http_redirect_identifier::onceToken != -1) {
    dispatch_once(&nw_protocol_http_redirect_identifier::onceToken, &__block_literal_global_914);
  }
  v6[2] = nw_protocol_http_redirect_identifier::protocol_identifier;
  if (nw_protocol_http_redirect_get_callbacks(void)::onceToken[0] != -1) {
    dispatch_once(nw_protocol_http_redirect_get_callbacks(void)::onceToken, &__block_literal_global_53);
  }
  v6[3] = &nw_protocol_http_redirect_get_callbacks(void)::protocol_callbacks;
  v6[5] = v6;
  if (a3) {
    a3 = os_retain(a3);
  }
  char v7 = *((unsigned char *)v6 + 648);
  if (v7)
  {
    id v8 = v6[80];
    if (v8)
    {
      os_release(v8);
      char v7 = *((unsigned char *)v6 + 648);
    }
  }
  v6[80] = a3;
  *((unsigned char *)v6 + 648) = v7 | 1;
  if (a4)
  {
    id v9 = os_retain(a4);
    char v10 = *((unsigned char *)v6 + 664);
    if ((v10 & 1) == 0) {
      goto LABEL_18;
    }
  }
  else
  {
    id v9 = 0;
    char v10 = *((unsigned char *)v6 + 664);
    if ((v10 & 1) == 0) {
      goto LABEL_18;
    }
  }
  id v11 = v6[82];
  if (v11)
  {
    os_release(v11);
    char v10 = *((unsigned char *)v6 + 664);
  }
LABEL_18:
  v6[82] = v9;
  *((unsigned char *)v6 + 664) = v10 | 1;
  id v12 = nw_parameters_copy_context(a4);
  char v13 = *((unsigned char *)v6 + 680);
  if (v13)
  {
    os_log_type_t v14 = v6[84];
    if (v14)
    {
      os_release(v14);
      char v13 = *((unsigned char *)v6 + 680);
    }
  }
  v6[84] = v12;
  *((unsigned char *)v6 + 680) = v13 | 1;
  *((unsigned char *)v6 + 692) = *((unsigned char *)v6 + 692) & 0xFE | nw_parameters_get_server_mode(a4) | 0x10;
  if (nw_protocol_copy_http_redirect_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_redirect_definition_onceToken, &__block_literal_global_40_74552);
  }
  id v15 = (id)nw_protocol_copy_http_redirect_definition_http_redirect_definition;
  id v16 = nw_parameters_copy_protocol_options_for_definition(a4, v15);
  os_log_type_t v17 = v16;
  if (v16)
  {
    os_log_type_t v18 = nw_protocol_options_copy_definition((nw_protocol_options_t)v16);
    if (nw_protocol_copy_http_redirect_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_redirect_definition_onceToken, &__block_literal_global_40_74552);
    }
    BOOL is_equal = nw_protocol_definition_is_equal(v18, (nw_protocol_definition_t)nw_protocol_copy_http_redirect_definition_http_redirect_definition);

    if (is_equal)
    {
      *(void *)buf = 0;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x3032000000;
      uint64_t v70 = (uint64_t)__Block_byref_object_copy__74035;
      BOOL v71 = __Block_byref_object_dispose__74036;
      id v72 = 0;
      *(void *)os_log_type_t type = MEMORY[0x1E4F143A8];
      uint64_t v64 = 3221225472;
      os_log_type_t v65 = __nw_http_redirect_options_copy_handler_block_invoke;
      os_log_type_t v66 = &unk_1E5248E90;
      os_log_type_t v67 = buf;
      nw_protocol_options_access_handle(v17, type);
      os_log_type_t v20 = _Block_copy(*(const void **)(*(void *)&buf[8] + 40));
      _Block_object_dispose(buf, 8);

      goto LABEL_28;
    }
    os_log_type_t v44 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_redirect_options_copy_handler";
    BOOL v62 = (const char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    char v68 = 0;
    os_log_type_t v37 = (char *)v62;
    if (__nwlog_fault(v62, type, &v68))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        char v38 = __nwlog_obj();
        os_log_type_t v45 = type[0];
        if (os_log_type_enabled(v38, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_redirect_options_copy_handler";
          _os_log_impl(&dword_1830D4000, v38, v45, "%{public}s protocol options are not http redirect", buf, 0xCu);
        }
LABEL_112:

        goto LABEL_113;
      }
      if (!v68)
      {
        char v38 = __nwlog_obj();
        os_log_type_t v58 = type[0];
        if (os_log_type_enabled(v38, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_redirect_options_copy_handler";
          _os_log_impl(&dword_1830D4000, v38, v58, "%{public}s protocol options are not http redirect, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_112;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      char v38 = __nwlog_obj();
      os_log_type_t v61 = type[0];
      BOOL v53 = os_log_type_enabled(v38, type[0]);
      if (!backtrace_string)
      {
        if (v53)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_redirect_options_copy_handler";
          _os_log_impl(&dword_1830D4000, v38, v61, "%{public}s protocol options are not http redirect, no backtrace", buf, 0xCu);
        }
        goto LABEL_112;
      }
      if (v53)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_redirect_options_copy_handler";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v38, v61, "%{public}s protocol options are not http redirect, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_86:

      free(backtrace_string);
LABEL_113:
      os_log_type_t v37 = (char *)v62;
    }
  }
  else
  {
    char v36 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_redirect_options_copy_handler";
    BOOL v62 = (const char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    char v68 = 0;
    os_log_type_t v37 = (char *)v62;
    if (__nwlog_fault(v62, type, &v68))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        char v38 = __nwlog_obj();
        os_log_type_t v39 = type[0];
        if (os_log_type_enabled(v38, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_redirect_options_copy_handler";
          _os_log_impl(&dword_1830D4000, v38, v39, "%{public}s called with null options", buf, 0xCu);
        }
        goto LABEL_112;
      }
      if (!v68)
      {
        char v38 = __nwlog_obj();
        os_log_type_t v56 = type[0];
        if (os_log_type_enabled(v38, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_redirect_options_copy_handler";
          _os_log_impl(&dword_1830D4000, v38, v56, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_112;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      char v38 = __nwlog_obj();
      os_log_type_t v60 = type[0];
      BOOL v49 = os_log_type_enabled(v38, type[0]);
      if (!backtrace_string)
      {
        if (v49)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_redirect_options_copy_handler";
          _os_log_impl(&dword_1830D4000, v38, v60, "%{public}s called with null options, no backtrace", buf, 0xCu);
        }
        goto LABEL_112;
      }
      if (v49)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_redirect_options_copy_handler";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v38, v60, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_86;
    }
  }
  if (v37) {
    free(v37);
  }
  os_log_type_t v20 = 0;
LABEL_28:

  char v21 = *((unsigned char *)v6 + 600);
  if (v21)
  {
    BOOL v22 = v6[74];
    if (v22)
    {
      _Block_release(v22);
      char v21 = *((unsigned char *)v6 + 600);
    }
  }
  v6[74] = v20;
  *((unsigned char *)v6 + 600) = v21 | 1;
  id v23 = v17;
  os_log_type_t v24 = v23;
  if (!v17)
  {
    BOOL v40 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_redirect_options_copy_handler_queue";
    os_log_type_t v41 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    char v68 = 0;
    if (__nwlog_fault(v41, type, &v68))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        BOOL v42 = __nwlog_obj();
        os_log_type_t v43 = type[0];
        if (os_log_type_enabled(v42, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_redirect_options_copy_handler_queue";
          _os_log_impl(&dword_1830D4000, v42, v43, "%{public}s called with null options", buf, 0xCu);
        }
        goto LABEL_119;
      }
      if (!v68)
      {
        BOOL v42 = __nwlog_obj();
        os_log_type_t v57 = type[0];
        if (os_log_type_enabled(v42, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_redirect_options_copy_handler_queue";
          _os_log_impl(&dword_1830D4000, v42, v57, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_119;
      }
      os_log_type_t v50 = (char *)__nw_create_backtrace_string();
      BOOL v42 = __nwlog_obj();
      os_log_type_t v51 = type[0];
      BOOL v52 = os_log_type_enabled(v42, type[0]);
      if (!v50)
      {
        if (v52)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_redirect_options_copy_handler_queue";
          _os_log_impl(&dword_1830D4000, v42, v51, "%{public}s called with null options, no backtrace", buf, 0xCu);
        }
        goto LABEL_119;
      }
      if (v52)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_redirect_options_copy_handler_queue";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v50;
        _os_log_impl(&dword_1830D4000, v42, v51, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_91:

      free(v50);
    }
LABEL_120:
    if (v41) {
      free(v41);
    }
    BOOL v27 = 0;
    goto LABEL_36;
  }
  BOOL v25 = nw_protocol_options_copy_definition(v23);
  if (nw_protocol_copy_http_redirect_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_redirect_definition_onceToken, &__block_literal_global_40_74552);
  }
  BOOL v26 = nw_protocol_definition_is_equal(v25, (nw_protocol_definition_t)nw_protocol_copy_http_redirect_definition_http_redirect_definition);

  if (!v26)
  {
    id v46 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_redirect_options_copy_handler_queue";
    os_log_type_t v41 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    char v68 = 0;
    if (__nwlog_fault(v41, type, &v68))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        BOOL v42 = __nwlog_obj();
        os_log_type_t v47 = type[0];
        if (os_log_type_enabled(v42, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_redirect_options_copy_handler_queue";
          _os_log_impl(&dword_1830D4000, v42, v47, "%{public}s protocol options are not http redirect", buf, 0xCu);
        }
LABEL_119:

        goto LABEL_120;
      }
      if (!v68)
      {
        BOOL v42 = __nwlog_obj();
        os_log_type_t v59 = type[0];
        if (os_log_type_enabled(v42, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_redirect_options_copy_handler_queue";
          _os_log_impl(&dword_1830D4000, v42, v59, "%{public}s protocol options are not http redirect, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_119;
      }
      os_log_type_t v50 = (char *)__nw_create_backtrace_string();
      BOOL v42 = __nwlog_obj();
      os_log_type_t v54 = type[0];
      BOOL v55 = os_log_type_enabled(v42, type[0]);
      if (!v50)
      {
        if (v55)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_redirect_options_copy_handler_queue";
          _os_log_impl(&dword_1830D4000, v42, v54, "%{public}s protocol options are not http redirect, no backtrace", buf, 0xCu);
        }
        goto LABEL_119;
      }
      if (v55)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_redirect_options_copy_handler_queue";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v50;
        _os_log_impl(&dword_1830D4000, v42, v54, "%{public}s protocol options are not http redirect, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_91;
    }
    goto LABEL_120;
  }
  *(void *)buf = 0;
  *(void *)&buf[8] = buf;
  *(void *)&buf[16] = 0x3032000000;
  uint64_t v70 = (uint64_t)__Block_byref_object_copy__5_73857;
  BOOL v71 = __Block_byref_object_dispose__6_73858;
  id v72 = 0;
  *(void *)os_log_type_t type = MEMORY[0x1E4F143A8];
  uint64_t v64 = 3221225472;
  os_log_type_t v65 = __nw_http_redirect_options_copy_handler_queue_block_invoke;
  os_log_type_t v66 = &unk_1E5248E90;
  os_log_type_t v67 = buf;
  nw_protocol_options_access_handle(v24, type);
  BOOL v27 = *(id *)(*(void *)&buf[8] + 40);
  _Block_object_dispose(buf, 8);

LABEL_36:
  char v28 = *((unsigned char *)v6 + 616);
  if (v28)
  {
    os_log_type_t v29 = v6[76];
    if (v29)
    {
      dispatch_release(v29);
      char v28 = *((unsigned char *)v6 + 616);
    }
  }
  v6[76] = v27;
  *((unsigned char *)v6 + 616) = v28 | 1;
  int limit = nw_http_redirect_options_get_limit(v24);
  v6[25] = 0;
  *((_DWORD *)v6 + 172) = limit;
  v6[9] = (v6 + 25);
  v6[26] = (v6 + 25);
  v6[27] = 0;
  v6[28] = (v6 + 27);
  v6[29] = 0;
  v6[30] = (v6 + 29);
  *((unsigned char *)v6 + 340) = 2;
  if (nw_protocol_copy_http_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_15_74223);
  }
  id v31 = (id)nw_protocol_copy_http_definition_http_definition;
  nw_protocol_plugin_metadata_set_callbacks((uint64_t)v6, v31, (uint64_t)nw_protocol_http_redirect_create::$_0::__invoke, (uint64_t)nw_protocol_http_redirect_create::$_1::__invoke);
  if (v31) {
    os_release(v31);
  }
  v6[11] = (v6 + 43);
  nw_protocol_plugin_retry_set_callbacks((uint64_t)v6, (uint64_t)nw_protocol_http_redirect_create::$_2::__invoke, (uint64_t)nw_protocol_http_redirect_create::$_3::__invoke, (uint64_t)nw_protocol_http_redirect_create::$_4::__invoke, (uint64_t)nw_protocol_http_redirect_create::$_5::__invoke);
  v6[8] = (v6 + 13);
  nw_protocol_plugin_name_set_callbacks((uint64_t)v6, (uint64_t)nw_protocol_http_redirect_create::$_6::__invoke);
  if (v17) {
    os_release(v24);
  }
  if (v15) {
    os_release(v15);
  }
  return (BOOL)v6;
}

void sub_183606FC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t nw_protocol_http_redirect_create::$_6::__invoke(nw_protocol_http_redirect_create::$_6 *this, nw_protocol *a2, nw_protocol *a3)
{
  return 1;
}

uint64_t nw_protocol_http_redirect_create::$_5::__invoke(nw_protocol_http_redirect_create::$_5 *this, nw_protocol *a2, nw_protocol *a3)
{
  return 1;
}

uint64_t nw_protocol_http_redirect_create::$_4::__invoke(nw_protocol_http_redirect_create::$_4 *this, nw_protocol *a2, nw_protocol *a3)
{
  return 1;
}

uint64_t nw_protocol_http_redirect_create::$_3::__invoke(nw_protocol_http_redirect_create::$_3 *this, nw_protocol *a2, nw_protocol *a3)
{
  return 1;
}

uint64_t nw_protocol_http_redirect_create::$_2::__invoke(nw_protocol_http_redirect_create::$_2 *this, nw_protocol *a2, nw_protocol *a3)
{
  return 0;
}

void nw_protocol_http_redirect_create::$_1::__invoke(uint64_t a1, int a2, void *object, int a4, uint64_t a5)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v30 = "operator()";
    id v16 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v27 = 0;
    if (!__nwlog_fault(v16, &type, &v27)) {
      goto LABEL_74;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v17 = __nwlog_obj();
      os_log_type_t v18 = type;
      if (!os_log_type_enabled(v17, type)) {
        goto LABEL_74;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v30 = "operator()";
      os_log_type_t v19 = "%{public}s called with null protocol";
    }
    else if (v27)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v17 = __nwlog_obj();
      os_log_type_t v18 = type;
      BOOL v21 = os_log_type_enabled(v17, type);
      if (backtrace_string)
      {
        if (v21)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v30 = "operator()";
          __int16 v31 = 2082;
          os_log_type_t v32 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v17, v18, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_74:
        if (!v16) {
          return;
        }
        goto LABEL_75;
      }
      if (!v21) {
        goto LABEL_74;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v30 = "operator()";
      os_log_type_t v19 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      os_log_type_t v17 = __nwlog_obj();
      os_log_type_t v18 = type;
      if (!os_log_type_enabled(v17, type)) {
        goto LABEL_74;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v30 = "operator()";
      os_log_type_t v19 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    goto LABEL_73;
  }
  uint64_t v5 = *(void *)(a1 + 40);
  if (!v5)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v30 = "operator()";
    id v16 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v27 = 0;
    if (!__nwlog_fault(v16, &type, &v27)) {
      goto LABEL_74;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v27)
      {
        os_log_type_t v17 = __nwlog_obj();
        os_log_type_t v18 = type;
        if (!os_log_type_enabled(v17, type)) {
          goto LABEL_74;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v30 = "operator()";
        os_log_type_t v19 = "%{public}s called with null http_redirect, backtrace limit exceeded";
        goto LABEL_73;
      }
      BOOL v22 = (char *)__nw_create_backtrace_string();
      os_log_type_t v17 = __nwlog_obj();
      os_log_type_t v18 = type;
      BOOL v23 = os_log_type_enabled(v17, type);
      if (!v22)
      {
        if (!v23) {
          goto LABEL_74;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v30 = "operator()";
        os_log_type_t v19 = "%{public}s called with null http_redirect, no backtrace";
        goto LABEL_73;
      }
      if (!v23) {
        goto LABEL_55;
      }
      *(_DWORD *)buf = 136446466;
      os_log_type_t v30 = "operator()";
      __int16 v31 = 2082;
      os_log_type_t v32 = v22;
      os_log_type_t v24 = "%{public}s called with null http_redirect, dumping backtrace:%{public}s";
      goto LABEL_54;
    }
    os_log_type_t v17 = __nwlog_obj();
    os_log_type_t v18 = type;
    if (!os_log_type_enabled(v17, type)) {
      goto LABEL_74;
    }
    *(_DWORD *)buf = 136446210;
    os_log_type_t v30 = "operator()";
    os_log_type_t v19 = "%{public}s called with null http_redirect";
LABEL_73:
    _os_log_impl(&dword_1830D4000, v17, v18, v19, buf, 0xCu);
    goto LABEL_74;
  }
  if (!object)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v30 = "operator()";
    id v16 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v27 = 0;
    if (!__nwlog_fault(v16, &type, &v27)) {
      goto LABEL_74;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v17 = __nwlog_obj();
      os_log_type_t v18 = type;
      if (!os_log_type_enabled(v17, type)) {
        goto LABEL_74;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v30 = "operator()";
      os_log_type_t v19 = "%{public}s called with null metadata";
      goto LABEL_73;
    }
    if (!v27)
    {
      os_log_type_t v17 = __nwlog_obj();
      os_log_type_t v18 = type;
      if (!os_log_type_enabled(v17, type)) {
        goto LABEL_74;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v30 = "operator()";
      os_log_type_t v19 = "%{public}s called with null metadata, backtrace limit exceeded";
      goto LABEL_73;
    }
    BOOL v22 = (char *)__nw_create_backtrace_string();
    os_log_type_t v17 = __nwlog_obj();
    os_log_type_t v18 = type;
    BOOL v25 = os_log_type_enabled(v17, type);
    if (!v22)
    {
      if (!v25) {
        goto LABEL_74;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v30 = "operator()";
      os_log_type_t v19 = "%{public}s called with null metadata, no backtrace";
      goto LABEL_73;
    }
    if (!v25) {
      goto LABEL_55;
    }
    *(_DWORD *)buf = 136446466;
    os_log_type_t v30 = "operator()";
    __int16 v31 = 2082;
    os_log_type_t v32 = v22;
    os_log_type_t v24 = "%{public}s called with null metadata, dumping backtrace:%{public}s";
LABEL_54:
    _os_log_impl(&dword_1830D4000, v17, v18, v24, buf, 0x16u);
    goto LABEL_55;
  }
  if (!a5)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v30 = "operator()";
    id v16 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v27 = 0;
    if (!__nwlog_fault(v16, &type, &v27)) {
      goto LABEL_74;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v17 = __nwlog_obj();
      os_log_type_t v18 = type;
      if (!os_log_type_enabled(v17, type)) {
        goto LABEL_74;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v30 = "operator()";
      os_log_type_t v19 = "%{public}s called with null completion";
      goto LABEL_73;
    }
    if (!v27)
    {
      os_log_type_t v17 = __nwlog_obj();
      os_log_type_t v18 = type;
      if (!os_log_type_enabled(v17, type)) {
        goto LABEL_74;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v30 = "operator()";
      os_log_type_t v19 = "%{public}s called with null completion, backtrace limit exceeded";
      goto LABEL_73;
    }
    BOOL v22 = (char *)__nw_create_backtrace_string();
    os_log_type_t v17 = __nwlog_obj();
    os_log_type_t v18 = type;
    BOOL v26 = os_log_type_enabled(v17, type);
    if (!v22)
    {
      if (!v26) {
        goto LABEL_74;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v30 = "operator()";
      os_log_type_t v19 = "%{public}s called with null completion, no backtrace";
      goto LABEL_73;
    }
    if (v26)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v30 = "operator()";
      __int16 v31 = 2082;
      os_log_type_t v32 = v22;
      os_log_type_t v24 = "%{public}s called with null completion, dumping backtrace:%{public}s";
      goto LABEL_54;
    }
LABEL_55:
    free(v22);
    if (!v16) {
      return;
    }
LABEL_75:
    free(v16);
    return;
  }
  id v9 = os_retain(object);
  char v10 = *(unsigned char *)(v5 + 568);
  if (v10)
  {
    id v11 = *(void **)(v5 + 560);
    if (v11)
    {
      os_release(v11);
      char v10 = *(unsigned char *)(v5 + 568);
    }
  }
  *(void *)(v5 + 560) = v9;
  *(unsigned char *)(v5 + 568) = v10 | 1;
  id v12 = nw_http_metadata_copy_request(object);
  if (nw_http_fields_have_field_with_name(v12, (unint64_t)"Cookie")) {
    char v13 = 2;
  }
  else {
    char v13 = 0;
  }
  *(unsigned char *)(v5 + 692) = *(unsigned char *)(v5 + 692) & 0xFD | v13;
  if (nw_http_fields_have_field_with_name(v12, (unint64_t)"Accept-Encoding")) {
    char v14 = 4;
  }
  else {
    char v14 = 0;
  }
  if (a4) {
    char v15 = 0;
  }
  else {
    char v15 = 8;
  }
  *(unsigned char *)(v5 + 692) = v14 | v15 | *(unsigned char *)(v5 + 692) & 0xF3;
  (*(void (**)(uint64_t, uint64_t, void *))(a5 + 16))(a5, 1, object);
  if (v12)
  {
    os_release(v12);
  }
}

void nw_protocol_http_redirect_create::$_0::__invoke(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v123 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)v117 = 136446210;
    *(void *)&v117[4] = "operator()";
    os_log_type_t v58 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v94) = 0;
    if (!__nwlog_fault(v58, type, &v94)) {
      goto LABEL_180;
    }
    if (type[0] != OS_LOG_TYPE_FAULT)
    {
      if (!(_BYTE)v94)
      {
        os_log_type_t v59 = __nwlog_obj();
        os_log_type_t v60 = type[0];
        if (!os_log_type_enabled(v59, type[0])) {
          goto LABEL_180;
        }
        *(_DWORD *)v117 = 136446210;
        *(void *)&v117[4] = "operator()";
        os_log_type_t v61 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_179;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v59 = __nwlog_obj();
      os_log_type_t v60 = type[0];
      BOOL v67 = os_log_type_enabled(v59, type[0]);
      if (!backtrace_string)
      {
        if (!v67) {
          goto LABEL_180;
        }
        *(_DWORD *)v117 = 136446210;
        *(void *)&v117[4] = "operator()";
        os_log_type_t v61 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_179;
      }
      if (v67)
      {
        *(_DWORD *)v117 = 136446466;
        *(void *)&v117[4] = "operator()";
        *(_WORD *)&v117[12] = 2082;
        *(void *)&v117[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v59, v60, "%{public}s called with null protocol, dumping backtrace:%{public}s", v117, 0x16u);
      }
      free(backtrace_string);
LABEL_180:
      if (v58) {
        goto LABEL_181;
      }
      return;
    }
    os_log_type_t v59 = __nwlog_obj();
    os_log_type_t v60 = type[0];
    if (!os_log_type_enabled(v59, type[0])) {
      goto LABEL_180;
    }
    *(_DWORD *)v117 = 136446210;
    *(void *)&v117[4] = "operator()";
    os_log_type_t v61 = "%{public}s called with null protocol";
    goto LABEL_179;
  }
  uint64_t v5 = *(void *)(a1 + 40);
  if (!v5)
  {
    __nwlog_obj();
    *(_DWORD *)v117 = 136446210;
    *(void *)&v117[4] = "operator()";
    os_log_type_t v58 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v94) = 0;
    if (!__nwlog_fault(v58, type, &v94)) {
      goto LABEL_180;
    }
    if (type[0] != OS_LOG_TYPE_FAULT)
    {
      if (!(_BYTE)v94)
      {
        os_log_type_t v59 = __nwlog_obj();
        os_log_type_t v60 = type[0];
        if (!os_log_type_enabled(v59, type[0])) {
          goto LABEL_180;
        }
        *(_DWORD *)v117 = 136446210;
        *(void *)&v117[4] = "operator()";
        os_log_type_t v61 = "%{public}s called with null http_redirect, backtrace limit exceeded";
        goto LABEL_179;
      }
      char v68 = (char *)__nw_create_backtrace_string();
      os_log_type_t v59 = __nwlog_obj();
      os_log_type_t v60 = type[0];
      BOOL v69 = os_log_type_enabled(v59, type[0]);
      if (!v68)
      {
        if (!v69) {
          goto LABEL_180;
        }
        *(_DWORD *)v117 = 136446210;
        *(void *)&v117[4] = "operator()";
        os_log_type_t v61 = "%{public}s called with null http_redirect, no backtrace";
        goto LABEL_179;
      }
      if (!v69) {
        goto LABEL_134;
      }
      *(_DWORD *)v117 = 136446466;
      *(void *)&v117[4] = "operator()";
      *(_WORD *)&v117[12] = 2082;
      *(void *)&v117[14] = v68;
      uint64_t v70 = "%{public}s called with null http_redirect, dumping backtrace:%{public}s";
      goto LABEL_133;
    }
    os_log_type_t v59 = __nwlog_obj();
    os_log_type_t v60 = type[0];
    if (!os_log_type_enabled(v59, type[0])) {
      goto LABEL_180;
    }
    *(_DWORD *)v117 = 136446210;
    *(void *)&v117[4] = "operator()";
    os_log_type_t v61 = "%{public}s called with null http_redirect";
LABEL_179:
    _os_log_impl(&dword_1830D4000, v59, v60, v61, v117, 0xCu);
    goto LABEL_180;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)v117 = 136446210;
    *(void *)&v117[4] = "operator()";
    os_log_type_t v58 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v94) = 0;
    if (!__nwlog_fault(v58, type, &v94)) {
      goto LABEL_180;
    }
    if (type[0] != OS_LOG_TYPE_FAULT)
    {
      if (!(_BYTE)v94)
      {
        os_log_type_t v59 = __nwlog_obj();
        os_log_type_t v60 = type[0];
        if (!os_log_type_enabled(v59, type[0])) {
          goto LABEL_180;
        }
        *(_DWORD *)v117 = 136446210;
        *(void *)&v117[4] = "operator()";
        os_log_type_t v61 = "%{public}s called with null other_protocol, backtrace limit exceeded";
        goto LABEL_179;
      }
      char v68 = (char *)__nw_create_backtrace_string();
      os_log_type_t v59 = __nwlog_obj();
      os_log_type_t v60 = type[0];
      BOOL v71 = os_log_type_enabled(v59, type[0]);
      if (!v68)
      {
        if (!v71) {
          goto LABEL_180;
        }
        *(_DWORD *)v117 = 136446210;
        *(void *)&v117[4] = "operator()";
        os_log_type_t v61 = "%{public}s called with null other_protocol, no backtrace";
        goto LABEL_179;
      }
      if (!v71) {
        goto LABEL_134;
      }
      *(_DWORD *)v117 = 136446466;
      *(void *)&v117[4] = "operator()";
      *(_WORD *)&v117[12] = 2082;
      *(void *)&v117[14] = v68;
      uint64_t v70 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
      goto LABEL_133;
    }
    os_log_type_t v59 = __nwlog_obj();
    os_log_type_t v60 = type[0];
    if (!os_log_type_enabled(v59, type[0])) {
      goto LABEL_180;
    }
    *(_DWORD *)v117 = 136446210;
    *(void *)&v117[4] = "operator()";
    os_log_type_t v61 = "%{public}s called with null other_protocol";
    goto LABEL_179;
  }
  if (!a3)
  {
    __nwlog_obj();
    *(_DWORD *)v117 = 136446210;
    *(void *)&v117[4] = "operator()";
    os_log_type_t v58 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v94) = 0;
    if (!__nwlog_fault(v58, type, &v94)) {
      goto LABEL_180;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v59 = __nwlog_obj();
      os_log_type_t v60 = type[0];
      if (!os_log_type_enabled(v59, type[0])) {
        goto LABEL_180;
      }
      *(_DWORD *)v117 = 136446210;
      *(void *)&v117[4] = "operator()";
      os_log_type_t v61 = "%{public}s called with null metadata";
      goto LABEL_179;
    }
    if (!(_BYTE)v94)
    {
      os_log_type_t v59 = __nwlog_obj();
      os_log_type_t v60 = type[0];
      if (!os_log_type_enabled(v59, type[0])) {
        goto LABEL_180;
      }
      *(_DWORD *)v117 = 136446210;
      *(void *)&v117[4] = "operator()";
      os_log_type_t v61 = "%{public}s called with null metadata, backtrace limit exceeded";
      goto LABEL_179;
    }
    char v68 = (char *)__nw_create_backtrace_string();
    os_log_type_t v59 = __nwlog_obj();
    os_log_type_t v60 = type[0];
    BOOL v72 = os_log_type_enabled(v59, type[0]);
    if (!v68)
    {
      if (!v72) {
        goto LABEL_180;
      }
      *(_DWORD *)v117 = 136446210;
      *(void *)&v117[4] = "operator()";
      os_log_type_t v61 = "%{public}s called with null metadata, no backtrace";
      goto LABEL_179;
    }
    if (!v72) {
      goto LABEL_134;
    }
    *(_DWORD *)v117 = 136446466;
    *(void *)&v117[4] = "operator()";
    *(_WORD *)&v117[12] = 2082;
    *(void *)&v117[14] = v68;
    uint64_t v70 = "%{public}s called with null metadata, dumping backtrace:%{public}s";
LABEL_133:
    _os_log_impl(&dword_1830D4000, v59, v60, v70, v117, 0x16u);
    goto LABEL_134;
  }
  if (a5)
  {
    id v8 = nw_http_metadata_copy_response(a3);
    if (v8)
    {
      id v9 = v8;
      char v10 = *(unsigned char *)(v5 + 584);
      if (v10)
      {
        id v11 = *(void **)(v5 + 576);
        if (v11)
        {
          os_release(v11);
          char v10 = *(unsigned char *)(v5 + 584);
        }
      }
      *(void *)(v5 + 576) = 0;
      *(unsigned char *)(v5 + 584) = v10 | 1;
      id v12 = v9;
      int status_code = _nw_http_response_get_status_code();

      unsigned int v14 = status_code - 301;
      if ((status_code - 301) > 7 || ((1 << v14) & 0xC7) == 0) {
        goto LABEL_14;
      }
      if ((*(unsigned char *)(v5 + 692) & 0x10) == 0)
      {
        if (*(unsigned char *)(v5 + 198) & 1 | (gLogDatapath == 0)) {
          goto LABEL_14;
        }
        os_log_type_t v76 = __nwlog_obj();
        if (!os_log_type_enabled(v76, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_14;
        }
        *(_DWORD *)v117 = 136446722;
        *(void *)&v117[4] = "nw_http_redirect_process";
        *(_WORD *)&v117[12] = 2082;
        *(void *)&v117[14] = v5 + 114;
        *(_WORD *)&v117[22] = 2080;
        v118 = " ";
        char v28 = "%{public}s %{public}s%sNot redirecting because no longer handling inbound reply";
        os_log_type_t v29 = v76;
        os_log_type_t v30 = OS_LOG_TYPE_DEBUG;
LABEL_39:
        _os_log_impl(&dword_1830D4000, v29, v30, v28, v117, 0x20u);
LABEL_14:
        os_release(v12);
LABEL_15:
        (*(void (**)(uint64_t, uint64_t, void *))(a5 + 16))(a5, 1, a3);
        return;
      }
      if (!(*(unsigned char *)(v5 + 198) & 1 | (gLogDatapath == 0)))
      {
        char v77 = __nwlog_obj();
        if (os_log_type_enabled(v77, OS_LOG_TYPE_DEBUG))
        {
          int v78 = *(_DWORD *)(v5 + 688);
          *(_DWORD *)v117 = 136446978;
          *(void *)&v117[4] = "nw_http_redirect_process";
          *(_WORD *)&v117[12] = 2082;
          *(void *)&v117[14] = v5 + 114;
          *(_WORD *)&v117[22] = 2080;
          v118 = " ";
          LOWORD(v119) = 1024;
          *(_DWORD *)((char *)&v119 + 2) = v78;
          _os_log_impl(&dword_1830D4000, v77, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%scalled with redirect_limit %u", v117, 0x26u);
        }
      }
      if (!*(_DWORD *)(v5 + 688))
      {
        if (*(unsigned char *)(v5 + 198)) {
          goto LABEL_14;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v27 = gLogObj;
        if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO)) {
          goto LABEL_14;
        }
        *(_DWORD *)v117 = 136446722;
        *(void *)&v117[4] = "nw_http_redirect_process";
        *(_WORD *)&v117[12] = 2082;
        *(void *)&v117[14] = v5 + 114;
        *(_WORD *)&v117[22] = 2080;
        v118 = " ";
        char v28 = "%{public}s %{public}s%sNot redirecting because we reached the limit";
        os_log_type_t v29 = v27;
        os_log_type_t v30 = OS_LOG_TYPE_INFO;
        goto LABEL_39;
      }
      uint64_t v94 = 0;
      BOOL v95 = &v94;
      uint64_t v96 = 0x3802000000;
      os_log_type_t v97 = __Block_byref_object_copy__925;
      BOOL v98 = __Block_byref_object_dispose__926;
      id v15 = nw_http_metadata_copy_response(a3);
      *(void *)os_log_type_t type = 0;
      __int16 v106 = type;
      uint64_t v107 = 0x2000000000;
      __int16 v108 = 0;
      *(void *)v117 = MEMORY[0x1E4F143A8];
      *(void *)&v117[8] = 0x40000000;
      *(void *)&v117[16] = ___ZL30nw_http_redirect_copy_endpointP25nw_protocol_http_redirectP20nw_protocol_metadata_block_invoke;
      v118 = (const char *)&unk_1E523A858;
      v119 = type;
      v120 = (os_log_type_t *)v5;
      nw_http_fields_access_value_by_name(v15, (unint64_t)"Location", v117);
      id v16 = (void *)*((void *)v106 + 3);
      if (v16)
      {
        url_scheme = (const char *)nw_endpoint_get_url_scheme(v16);
        if (!strcasecmp(url_scheme, "https") || !strcasecmp(url_scheme, "http"))
        {
          hostname = nw_endpoint_get_hostname(*((nw_endpoint_t *)v106 + 3));
          if (!hostname || !*hostname)
          {
            if ((*(unsigned char *)(v5 + 198) & 1) == 0)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              os_log_type_t v19 = gLogObj;
              if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136446722;
                *(void *)&uint8_t buf[4] = "nw_http_redirect_copy_endpoint";
                *(_WORD *)&buf[12] = 2082;
                *(void *)&buf[14] = v5 + 114;
                *(_WORD *)&buf[22] = 2080;
                v113 = (uint64_t (*)(uint64_t, uint64_t))" ";
                _os_log_impl(&dword_1830D4000, v19, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sinvalid http URL without hostname", buf, 0x20u);
              }
            }
            os_log_type_t v20 = (void *)*((void *)v106 + 3);
            if (v20)
            {
              os_release(v20);
              *((void *)v106 + 3) = 0;
            }
          }
        }
      }
      BOOL v21 = (void *)*((void *)v106 + 3);
      _Block_object_dispose(type, 8);
      if (v15) {
        os_release(v15);
      }
      os_log_type_t v99 = v21;
      v100 |= 1u;
      if (!v95[5])
      {
        if ((*(unsigned char *)(v5 + 198) & 1) == 0)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          __int16 v31 = gLogObj;
          if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v117 = 136446722;
            *(void *)&v117[4] = "nw_http_redirect_process";
            *(_WORD *)&v117[12] = 2082;
            *(void *)&v117[14] = v5 + 114;
            *(_WORD *)&v117[22] = 2080;
            v118 = " ";
            _os_log_impl(&dword_1830D4000, v31, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sUnable to create endpoint from redirect headers", v117, 0x20u);
            BOOL v32 = 0;
            goto LABEL_214;
          }
        }
LABEL_213:
        BOOL v32 = 0;
        goto LABEL_214;
      }
      id v22 = nw_http_metadata_copy_request(*(void **)(v5 + 560));
      if (v22)
      {
        BOOL v23 = v22;
        if (v14 > 1)
        {
          if (status_code == 303)
          {
            id v33 = v22;
            char has_method = _nw_http_request_has_method((uint64_t)v33);

            if ((has_method & 1) == 0)
            {
              id v35 = v33;
              char v36 = _nw_http_request_has_method((uint64_t)v35);

              if ((v36 & 1) == 0) {
                goto LABEL_35;
              }
            }
          }
        }
        else
        {
          id v24 = v22;
          char v25 = _nw_http_request_has_method((uint64_t)v24);

          if (v25)
          {
LABEL_35:
            *(unsigned char *)(v5 + 692) &= ~8u;
            int v26 = 1;
            goto LABEL_47;
          }
        }
        int v26 = 0;
LABEL_47:
        *(void *)buf = 0;
        *(void *)&buf[8] = buf;
        *(void *)&buf[16] = 0x3802000000;
        v113 = __Block_byref_object_copy__14;
        v114 = __Block_byref_object_dispose__15;
        os_log_type_t v37 = v95[5];
        if (v37)
        {
          char v38 = *(void **)(v5 + 560);
          if (v38)
          {
            *(void *)os_log_type_t type = 0;
            __int16 v106 = type;
            uint64_t v107 = 0x3802000000;
            __int16 v108 = __Block_byref_object_copy__34;
            v109 = __Block_byref_object_dispose__35;
            object = 0;
            char v111 = -1;
            id v39 = nw_http_metadata_copy_request(v38);
            BOOL v40 = v39;
            if (v26)
            {
              url = nw_endpoint_get_url(v37);
              uint64_t v42 = nw_http_request_create_from_url((uint64_t)"GET", (uint64_t)url);
              os_log_type_t v43 = v106;
              char v44 = *((unsigned char *)v106 + 48);
              if (v44)
              {
                os_log_type_t v45 = (void *)*((void *)v106 + 5);
                if (v45)
                {
                  os_release(v45);
                  char v44 = *((unsigned char *)v43 + 48);
                }
              }
              *((void *)v43 + 5) = v42;
              *((unsigned char *)v43 + 48) = v44 | 1;
            }
            else
            {
              v104[0] = MEMORY[0x1E4F143A8];
              v104[1] = 0x40000000;
              v104[2] = ___ZL30nw_http_redirect_copy_metadataP25nw_protocol_http_redirectP11nw_endpointP20nw_protocol_metadatab_block_invoke;
              v104[3] = &unk_1E523A880;
              v104[4] = type;
              v104[5] = v37;
              nw_http_request_access_method(v39, v104);
            }
            v102[0] = 0;
            v102[1] = v102;
            v102[2] = 0x2000000000;
            char v103 = 0;
            v101[0] = MEMORY[0x1E4F143A8];
            v101[1] = 0x40000000;
            v101[2] = ___ZL30nw_http_redirect_copy_metadataP25nw_protocol_http_redirectP11nw_endpointP20nw_protocol_metadatab_block_invoke_2;
            v101[3] = &unk_1E523A8D0;
            v101[4] = type;
            v101[5] = v102;
            nw_http_request_access_authority(v40, v101);
            *(void *)v117 = MEMORY[0x1E4F143A8];
            *(void *)&v117[8] = 0x40000000;
            *(void *)&v117[16] = ___ZL30nw_http_redirect_copy_metadataP25nw_protocol_http_redirectP11nw_endpointP20nw_protocol_metadatab_block_invoke_4;
            v118 = (const char *)&unk_1E523A8F8;
            char v122 = v26;
            v120 = type;
            uint64_t v121 = v5;
            v119 = (os_log_type_t *)v102;
            nw_http_fields_enumerate(v40, v117);
            metadata_for_request = nw_http_create_metadata_for_request(*((void **)v106 + 5));
            _Block_object_dispose(v102, 8);
            if (v40) {
              os_release(v40);
            }
            _Block_object_dispose(type, 8);
            if ((v111 & 1) != 0 && object) {
              os_release(object);
            }
            goto LABEL_60;
          }
          __nwlog_obj();
          *(_DWORD *)v117 = 136446210;
          *(void *)&v117[4] = "nw_http_redirect_copy_metadata";
          __int16 v83 = (char *)_os_log_send_and_compose_impl();
          type[0] = OS_LOG_TYPE_ERROR;
          LOBYTE(v104[0]) = 0;
          if (!__nwlog_fault(v83, type, v104)) {
            goto LABEL_224;
          }
          if (type[0] == OS_LOG_TYPE_FAULT)
          {
            uint64_t v84 = __nwlog_obj();
            os_log_type_t v85 = type[0];
            if (os_log_type_enabled(v84, type[0]))
            {
              *(_DWORD *)v117 = 136446210;
              *(void *)&v117[4] = "nw_http_redirect_copy_metadata";
              BOOL v86 = "%{public}s called with null orig_request_metadata";
              goto LABEL_223;
            }
            goto LABEL_224;
          }
          if (!LOBYTE(v104[0]))
          {
            uint64_t v84 = __nwlog_obj();
            os_log_type_t v85 = type[0];
            if (os_log_type_enabled(v84, type[0]))
            {
              *(_DWORD *)v117 = 136446210;
              *(void *)&v117[4] = "nw_http_redirect_copy_metadata";
              BOOL v86 = "%{public}s called with null orig_request_metadata, backtrace limit exceeded";
              goto LABEL_223;
            }
            goto LABEL_224;
          }
          uint64_t v89 = (char *)__nw_create_backtrace_string();
          uint64_t v84 = __nwlog_obj();
          os_log_type_t v85 = type[0];
          BOOL v92 = os_log_type_enabled(v84, type[0]);
          if (!v89)
          {
            if (v92)
            {
              *(_DWORD *)v117 = 136446210;
              *(void *)&v117[4] = "nw_http_redirect_copy_metadata";
              BOOL v86 = "%{public}s called with null orig_request_metadata, no backtrace";
              goto LABEL_223;
            }
            goto LABEL_224;
          }
          if (v92)
          {
            *(_DWORD *)v117 = 136446466;
            *(void *)&v117[4] = "nw_http_redirect_copy_metadata";
            *(_WORD *)&v117[12] = 2082;
            *(void *)&v117[14] = v89;
            v91 = "%{public}s called with null orig_request_metadata, dumping backtrace:%{public}s";
            goto LABEL_200;
          }
        }
        else
        {
          __nwlog_obj();
          *(_DWORD *)v117 = 136446210;
          *(void *)&v117[4] = "nw_http_redirect_copy_metadata";
          __int16 v83 = (char *)_os_log_send_and_compose_impl();
          type[0] = OS_LOG_TYPE_ERROR;
          LOBYTE(v104[0]) = 0;
          if (!__nwlog_fault(v83, type, v104)) {
            goto LABEL_224;
          }
          if (type[0] == OS_LOG_TYPE_FAULT)
          {
            uint64_t v84 = __nwlog_obj();
            os_log_type_t v85 = type[0];
            if (os_log_type_enabled(v84, type[0]))
            {
              *(_DWORD *)v117 = 136446210;
              *(void *)&v117[4] = "nw_http_redirect_copy_metadata";
              BOOL v86 = "%{public}s called with null endpoint";
LABEL_223:
              _os_log_impl(&dword_1830D4000, v84, v85, v86, v117, 0xCu);
            }
LABEL_224:
            if (v83) {
              free(v83);
            }
            metadata_for_request = 0;
LABEL_60:
            v115 = metadata_for_request;
            v116 |= 1u;
            uint64_t v47 = *(void *)(*(void *)&buf[8] + 40);
            BOOL v32 = v47 != 0;
            if (v47)
            {
              int v48 = os_retain(a3);
              char v49 = *(unsigned char *)(v5 + 584);
              if (v49)
              {
                os_log_type_t v50 = *(void **)(v5 + 576);
                if (v50)
                {
                  os_release(v50);
                  char v49 = *(unsigned char *)(v5 + 584);
                }
              }
              *(void *)(v5 + 576) = v48;
              *(unsigned char *)(v5 + 584) = v49 | 1;
              if (*(void *)(v5 + 592) && *(void *)(v5 + 608))
              {
                nw_protocol_plugin_retry_begin_async(v5 + 344);
                os_log_type_t v51 = *(NSObject **)(v5 + 608);
                block[0] = MEMORY[0x1E4F143A8];
                block[1] = 0x40000000;
                block[2] = ___ZL24nw_http_redirect_processP25nw_protocol_http_redirectP20nw_protocol_metadata_block_invoke;
                block[3] = &unk_1E523A808;
                block[4] = &v94;
                block[5] = buf;
                block[6] = v5;
                dispatch_async(v51, block);
              }
              else
              {
                nw_protocol_plugin_metadata_resume_input(v5 + 200, 3);
                nw_http_redirect_reissue(v5, (void *)v95[5], 0, *(void *)(v5 + 560), *(void **)(*(void *)&buf[8] + 40));
              }
LABEL_84:
              _Block_object_dispose(buf, 8);
              if ((v116 & 1) != 0 && v115) {
                os_release(v115);
              }
              os_release(v23);
LABEL_214:
              _Block_object_dispose(&v94, 8);
              if ((v100 & 1) != 0 && v99) {
                os_release(v99);
              }
              os_release(v12);
              if (v32)
              {
                (*(void (**)(uint64_t, uint64_t, void *))(a5 + 16))(a5, 2, a3);
                return;
              }
              goto LABEL_15;
            }
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            *(_DWORD *)v117 = 136446210;
            *(void *)&v117[4] = "nw_http_redirect_process";
            BOOL v52 = (char *)_os_log_send_and_compose_impl();
            type[0] = OS_LOG_TYPE_ERROR;
            LOBYTE(v104[0]) = 0;
            if (__nwlog_fault(v52, type, v104))
            {
              if (type[0] == OS_LOG_TYPE_FAULT)
              {
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                BOOL v53 = gLogObj;
                os_log_type_t v54 = type[0];
                if (!os_log_type_enabled((os_log_t)gLogObj, type[0])) {
                  goto LABEL_82;
                }
                *(_DWORD *)v117 = 136446210;
                *(void *)&v117[4] = "nw_http_redirect_process";
                BOOL v55 = "%{public}s Unable to create new request metadata";
                goto LABEL_81;
              }
              if (!LOBYTE(v104[0]))
              {
                BOOL v53 = __nwlog_obj();
                os_log_type_t v54 = type[0];
                if (!os_log_type_enabled(v53, type[0])) {
                  goto LABEL_82;
                }
                *(_DWORD *)v117 = 136446210;
                *(void *)&v117[4] = "nw_http_redirect_process";
                BOOL v55 = "%{public}s Unable to create new request metadata, backtrace limit exceeded";
                goto LABEL_81;
              }
              os_log_type_t v56 = (char *)__nw_create_backtrace_string();
              BOOL v53 = __nwlog_obj();
              os_log_type_t v54 = type[0];
              BOOL v57 = os_log_type_enabled(v53, type[0]);
              if (v56)
              {
                if (v57)
                {
                  *(_DWORD *)v117 = 136446466;
                  *(void *)&v117[4] = "nw_http_redirect_process";
                  *(_WORD *)&v117[12] = 2082;
                  *(void *)&v117[14] = v56;
                  _os_log_impl(&dword_1830D4000, v53, v54, "%{public}s Unable to create new request metadata, dumping backtrace:%{public}s", v117, 0x16u);
                }
                free(v56);
                goto LABEL_82;
              }
              if (v57)
              {
                *(_DWORD *)v117 = 136446210;
                *(void *)&v117[4] = "nw_http_redirect_process";
                BOOL v55 = "%{public}s Unable to create new request metadata, no backtrace";
LABEL_81:
                _os_log_impl(&dword_1830D4000, v53, v54, v55, v117, 0xCu);
              }
            }
LABEL_82:
            if (v52) {
              free(v52);
            }
            goto LABEL_84;
          }
          if (!LOBYTE(v104[0]))
          {
            uint64_t v84 = __nwlog_obj();
            os_log_type_t v85 = type[0];
            if (os_log_type_enabled(v84, type[0]))
            {
              *(_DWORD *)v117 = 136446210;
              *(void *)&v117[4] = "nw_http_redirect_copy_metadata";
              BOOL v86 = "%{public}s called with null endpoint, backtrace limit exceeded";
              goto LABEL_223;
            }
            goto LABEL_224;
          }
          uint64_t v89 = (char *)__nw_create_backtrace_string();
          uint64_t v84 = __nwlog_obj();
          os_log_type_t v85 = type[0];
          BOOL v90 = os_log_type_enabled(v84, type[0]);
          if (!v89)
          {
            if (v90)
            {
              *(_DWORD *)v117 = 136446210;
              *(void *)&v117[4] = "nw_http_redirect_copy_metadata";
              BOOL v86 = "%{public}s called with null endpoint, no backtrace";
              goto LABEL_223;
            }
            goto LABEL_224;
          }
          if (v90)
          {
            *(_DWORD *)v117 = 136446466;
            *(void *)&v117[4] = "nw_http_redirect_copy_metadata";
            *(_WORD *)&v117[12] = 2082;
            *(void *)&v117[14] = v89;
            v91 = "%{public}s called with null endpoint, dumping backtrace:%{public}s";
LABEL_200:
            _os_log_impl(&dword_1830D4000, v84, v85, v91, v117, 0x16u);
          }
        }
        free(v89);
        goto LABEL_224;
      }
      __nwlog_obj();
      *(_DWORD *)v117 = 136446210;
      *(void *)&v117[4] = "nw_http_redirect_process";
      BOOL v79 = (char *)_os_log_send_and_compose_impl();
      type[0] = OS_LOG_TYPE_ERROR;
      buf[0] = 0;
      if (__nwlog_fault(v79, type, buf))
      {
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          os_log_type_t v80 = __nwlog_obj();
          os_log_type_t v81 = type[0];
          if (!os_log_type_enabled(v80, type[0])) {
            goto LABEL_211;
          }
          *(_DWORD *)v117 = 136446210;
          *(void *)&v117[4] = "nw_http_redirect_process";
          os_log_type_t v82 = "%{public}s called with null request";
          goto LABEL_210;
        }
        if (!buf[0])
        {
          os_log_type_t v80 = __nwlog_obj();
          os_log_type_t v81 = type[0];
          if (!os_log_type_enabled(v80, type[0])) {
            goto LABEL_211;
          }
          *(_DWORD *)v117 = 136446210;
          *(void *)&v117[4] = "nw_http_redirect_process";
          os_log_type_t v82 = "%{public}s called with null request, backtrace limit exceeded";
          goto LABEL_210;
        }
        os_log_type_t v87 = (char *)__nw_create_backtrace_string();
        os_log_type_t v80 = __nwlog_obj();
        os_log_type_t v81 = type[0];
        BOOL v88 = os_log_type_enabled(v80, type[0]);
        if (v87)
        {
          if (v88)
          {
            *(_DWORD *)v117 = 136446466;
            *(void *)&v117[4] = "nw_http_redirect_process";
            *(_WORD *)&v117[12] = 2082;
            *(void *)&v117[14] = v87;
            _os_log_impl(&dword_1830D4000, v80, v81, "%{public}s called with null request, dumping backtrace:%{public}s", v117, 0x16u);
          }
          free(v87);
          goto LABEL_211;
        }
        if (v88)
        {
          *(_DWORD *)v117 = 136446210;
          *(void *)&v117[4] = "nw_http_redirect_process";
          os_log_type_t v82 = "%{public}s called with null request, no backtrace";
LABEL_210:
          _os_log_impl(&dword_1830D4000, v80, v81, v82, v117, 0xCu);
        }
      }
LABEL_211:
      if (v79) {
        free(v79);
      }
      goto LABEL_213;
    }
    __nwlog_obj();
    *(_DWORD *)v117 = 136446210;
    *(void *)&v117[4] = "nw_http_redirect_process";
    BOOL v62 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v94) = 0;
    if (__nwlog_fault(v62, type, &v94))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v63 = __nwlog_obj();
        os_log_type_t v64 = type[0];
        if (!os_log_type_enabled(v63, type[0])) {
          goto LABEL_185;
        }
        *(_DWORD *)v117 = 136446210;
        *(void *)&v117[4] = "nw_http_redirect_process";
        os_log_type_t v65 = "%{public}s called with null response";
        goto LABEL_184;
      }
      if (!(_BYTE)v94)
      {
        os_log_type_t v63 = __nwlog_obj();
        os_log_type_t v64 = type[0];
        if (!os_log_type_enabled(v63, type[0])) {
          goto LABEL_185;
        }
        *(_DWORD *)v117 = 136446210;
        *(void *)&v117[4] = "nw_http_redirect_process";
        os_log_type_t v65 = "%{public}s called with null response, backtrace limit exceeded";
        goto LABEL_184;
      }
      os_log_type_t v74 = (char *)__nw_create_backtrace_string();
      os_log_type_t v63 = __nwlog_obj();
      os_log_type_t v64 = type[0];
      BOOL v75 = os_log_type_enabled(v63, type[0]);
      if (v74)
      {
        if (v75)
        {
          *(_DWORD *)v117 = 136446466;
          *(void *)&v117[4] = "nw_http_redirect_process";
          *(_WORD *)&v117[12] = 2082;
          *(void *)&v117[14] = v74;
          _os_log_impl(&dword_1830D4000, v63, v64, "%{public}s called with null response, dumping backtrace:%{public}s", v117, 0x16u);
        }
        free(v74);
        goto LABEL_185;
      }
      if (v75)
      {
        *(_DWORD *)v117 = 136446210;
        *(void *)&v117[4] = "nw_http_redirect_process";
        os_log_type_t v65 = "%{public}s called with null response, no backtrace";
LABEL_184:
        _os_log_impl(&dword_1830D4000, v63, v64, v65, v117, 0xCu);
      }
    }
LABEL_185:
    if (v62) {
      free(v62);
    }
    goto LABEL_15;
  }
  __nwlog_obj();
  *(_DWORD *)v117 = 136446210;
  *(void *)&v117[4] = "operator()";
  os_log_type_t v58 = (char *)_os_log_send_and_compose_impl();
  type[0] = OS_LOG_TYPE_ERROR;
  LOBYTE(v94) = 0;
  if (!__nwlog_fault(v58, type, &v94)) {
    goto LABEL_180;
  }
  if (type[0] == OS_LOG_TYPE_FAULT)
  {
    os_log_type_t v59 = __nwlog_obj();
    os_log_type_t v60 = type[0];
    if (!os_log_type_enabled(v59, type[0])) {
      goto LABEL_180;
    }
    *(_DWORD *)v117 = 136446210;
    *(void *)&v117[4] = "operator()";
    os_log_type_t v61 = "%{public}s called with null completion";
    goto LABEL_179;
  }
  if (!(_BYTE)v94)
  {
    os_log_type_t v59 = __nwlog_obj();
    os_log_type_t v60 = type[0];
    if (!os_log_type_enabled(v59, type[0])) {
      goto LABEL_180;
    }
    *(_DWORD *)v117 = 136446210;
    *(void *)&v117[4] = "operator()";
    os_log_type_t v61 = "%{public}s called with null completion, backtrace limit exceeded";
    goto LABEL_179;
  }
  char v68 = (char *)__nw_create_backtrace_string();
  os_log_type_t v59 = __nwlog_obj();
  os_log_type_t v60 = type[0];
  BOOL v73 = os_log_type_enabled(v59, type[0]);
  if (!v68)
  {
    if (!v73) {
      goto LABEL_180;
    }
    *(_DWORD *)v117 = 136446210;
    *(void *)&v117[4] = "operator()";
    os_log_type_t v61 = "%{public}s called with null completion, no backtrace";
    goto LABEL_179;
  }
  if (v73)
  {
    *(_DWORD *)v117 = 136446466;
    *(void *)&v117[4] = "operator()";
    *(_WORD *)&v117[12] = 2082;
    *(void *)&v117[14] = v68;
    uint64_t v70 = "%{public}s called with null completion, dumping backtrace:%{public}s";
    goto LABEL_133;
  }
LABEL_134:
  free(v68);
  if (v58) {
LABEL_181:
  }
    free(v58);
}

uint64_t __Block_byref_object_copy__925(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(result + 48) = *(unsigned char *)(result + 48) & 0xFE | *(unsigned char *)(a2 + 48) & 1;
  *(void *)(a2 + 40) = 0;
  *(unsigned char *)(a2 + 48) &= ~1u;
  return result;
}

void __Block_byref_object_dispose__926(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48))
  {
    xpc_object_t v2 = *(void **)(a1 + 40);
    if (v2) {
      os_release(v2);
    }
  }
  *(void *)(a1 + 40) = 0;
}

void ___ZL30nw_http_redirect_copy_endpointP25nw_protocol_http_redirectP20nw_protocol_metadata_block_invoke(uint64_t a1, unsigned char *a2)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  if (!a2) {
    return;
  }
  parameters = (void *)nw_protocol_get_parameters(*(void *)(a1 + 40));
  uint64_t v5 = nw_parameters_copy_url_endpoint(parameters);
  if (v5)
  {
    xpc_object_t v6 = v5;
    CFMutableStringRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
    uint64_t v8 = *a2;
    if (*a2)
    {
      id v9 = a2 + 1;
      do
      {
        while (!memchr("!#$%&'()*+,-./0123456789:;=?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]_abcdefghijklmnopqrstuvwxyz~",
                   v8,
                   0x56uLL))
        {
          CFStringAppendFormat(Mutable, 0, @"%%%02X", v8);
          unsigned int v10 = *v9++;
          uint64_t v8 = v10;
          if (!v10) {
            goto LABEL_8;
          }
        }
        *(_WORD *)chars = v8;
        CFStringAppendCharacters(Mutable, (const UniChar *)chars, 1);
        unsigned int v11 = *v9++;
        uint64_t v8 = v11;
      }
      while (v11);
    }
LABEL_8:
    *(void *)chars = 0;
    *(void *)&chars[8] = chars;
    *(void *)&chars[16] = 0x3802000000;
    os_log_type_t v41 = __Block_byref_object_copy__25;
    uint64_t v42 = __Block_byref_object_dispose__26;
    CFTypeRef v43 = nw_endpoint_copy_cfurl(v6);
    v44 |= 1u;
    if (!*(void *)(*(void *)&chars[8] + 40))
    {
      if ((*(unsigned char *)(*(void *)(a1 + 40) + 198) & 1) == 0)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v20 = gLogObj;
        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
        {
          uint64_t v21 = *(void *)(a1 + 40) + 114;
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = "nw_http_redirect_copy_endpoint_block_invoke";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v21;
          *(_WORD *)&buf[22] = 2080;
          char v36 = (uint64_t (*)(uint64_t, uint64_t))" ";
          _os_log_impl(&dword_1830D4000, v20, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sfailed to get base URL", buf, 0x20u);
        }
      }
      goto LABEL_37;
    }
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x3802000000;
    char v36 = __Block_byref_object_copy__25;
    os_log_type_t v37 = __Block_byref_object_dispose__26;
    CFTypeRef cf = 0;
    char v39 = -1;
    v28[0] = MEMORY[0x1E4F143A8];
    v28[1] = 0x40000000;
    v28[2] = ___ZL30nw_http_redirect_copy_endpointP25nw_protocol_http_redirectP20nw_protocol_metadata_block_invoke_27;
    v28[3] = &unk_1E523A830;
    v28[4] = buf;
    v28[5] = chars;
    nw_utilities_get_c_string_from_cfstring(Mutable, 0x600u, v28);
    if (*(void *)(*(void *)&buf[8] + 40))
    {
      rangeIncludingSeparators.location = 0;
      rangeIncludingSeparators.CFIndex length = 0;
      v26.location = 0;
      v26.CFIndex length = 0;
      CFURLGetByteRangeForComponent(*(CFURLRef *)(*(void *)&chars[8] + 40), kCFURLComponentFragment, &rangeIncludingSeparators);
      CFURLGetByteRangeForComponent(*(CFURLRef *)(*(void *)&buf[8] + 40), kCFURLComponentFragment, &v26);
      if (v26.length) {
        BOOL v12 = 1;
      }
      else {
        BOOL v12 = rangeIncludingSeparators.length == 0;
      }
      if (v12) {
        CFIndex length = 0;
      }
      else {
        CFIndex length = rangeIncludingSeparators.length;
      }
      CFIndex v14 = CFURLGetBytes(*(CFURLRef *)(*(void *)&buf[8] + 40), 0, 0);
      if (v14 > 0)
      {
        CFIndex v15 = v14;
        BOOL v16 = nw_calloc_type<unsigned char>(length + v14 + 1);
        CFURLGetBytes(*(CFURLRef *)(*(void *)&buf[8] + 40), (UInt8 *)v16, v15);
        if (length >= 1)
        {
          url = nw_endpoint_get_url(v6);
          memcpy((void *)(v16 + v15), &url[rangeIncludingSeparators.location], length);
        }
        *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = nw_endpoint_create_url((const char *)v16);
        if (v16) {
          free((void *)v16);
        }
        goto LABEL_34;
      }
      if ((*(unsigned char *)(*(void *)(a1 + 40) + 198) & 1) == 0)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v22 = gLogObj;
        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
        {
          uint64_t v25 = *(void *)(a1 + 40) + 114;
          *(_DWORD *)os_log_type_t v29 = 136446722;
          os_log_type_t v30 = "nw_http_redirect_copy_endpoint_block_invoke";
          __int16 v31 = 2082;
          uint64_t v32 = v25;
          __int16 v33 = 2080;
          uint64_t v34 = " ";
          id v24 = "%{public}s %{public}s%sfailed to get string bytes";
          goto LABEL_33;
        }
      }
    }
    else if ((*(unsigned char *)(*(void *)(a1 + 40) + 198) & 1) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v22 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        uint64_t v23 = *(void *)(a1 + 40) + 114;
        *(_DWORD *)os_log_type_t v29 = 136446722;
        os_log_type_t v30 = "nw_http_redirect_copy_endpoint_block_invoke_2";
        __int16 v31 = 2082;
        uint64_t v32 = v23;
        __int16 v33 = 2080;
        uint64_t v34 = " ";
        id v24 = "%{public}s %{public}s%sfailed to get target URL";
LABEL_33:
        _os_log_impl(&dword_1830D4000, v22, OS_LOG_TYPE_ERROR, v24, v29, 0x20u);
      }
    }
LABEL_34:
    _Block_object_dispose(buf, 8);
    if ((v39 & 1) != 0 && cf) {
      CFRelease(cf);
    }
LABEL_37:
    _Block_object_dispose(chars, 8);
    if ((v44 & 1) != 0 && v43) {
      CFRelease(v43);
    }
    if (Mutable) {
      os_release(Mutable);
    }
    os_release(v6);
    return;
  }
  if ((*(unsigned char *)(*(void *)(a1 + 40) + 198) & 1) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v18 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      uint64_t v19 = *(void *)(a1 + 40) + 114;
      *(_DWORD *)chars = 136446722;
      *(void *)&chars[4] = "nw_http_redirect_copy_endpoint_block_invoke";
      *(_WORD *)&chars[12] = 2082;
      *(void *)&chars[14] = v19;
      *(_WORD *)&chars[22] = 2080;
      os_log_type_t v41 = (uint64_t (*)(uint64_t, uint64_t))" ";
      _os_log_impl(&dword_1830D4000, v18, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sfailed to get URL endpoint from parameters", chars, 0x20u);
    }
  }
}

uint64_t __Block_byref_object_copy__14(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(result + 48) = *(unsigned char *)(result + 48) & 0xFE | *(unsigned char *)(a2 + 48) & 1;
  *(void *)(a2 + 40) = 0;
  *(unsigned char *)(a2 + 48) &= ~1u;
  return result;
}

void __Block_byref_object_dispose__15(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48))
  {
    xpc_object_t v2 = *(void **)(a1 + 40);
    if (v2) {
      os_release(v2);
    }
  }
  *(void *)(a1 + 40) = 0;
}

uint64_t __Block_byref_object_copy__34(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(result + 48) = *(unsigned char *)(result + 48) & 0xFE | *(unsigned char *)(a2 + 48) & 1;
  *(void *)(a2 + 40) = 0;
  *(unsigned char *)(a2 + 48) &= ~1u;
  return result;
}

void __Block_byref_object_dispose__35(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48))
  {
    xpc_object_t v2 = *(void **)(a1 + 40);
    if (v2) {
      os_release(v2);
    }
  }
  *(void *)(a1 + 40) = 0;
}

void ___ZL30nw_http_redirect_copy_metadataP25nw_protocol_http_redirectP11nw_endpointP20nw_protocol_metadatab_block_invoke(uint64_t a1, uint64_t a2)
{
  url = nw_endpoint_get_url(*(nw_endpoint_t *)(a1 + 40));
  uint64_t v5 = nw_http_request_create_from_url(a2, (uint64_t)url);
  uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8);
  char v7 = *(unsigned char *)(v6 + 48);
  if (v7)
  {
    uint64_t v8 = *(void **)(v6 + 40);
    if (v8)
    {
      os_release(v8);
      char v7 = *(unsigned char *)(v6 + 48);
    }
  }
  *(void *)(v6 + 40) = v5;
  *(unsigned char *)(v6 + 48) = v7 | 1;
}

void ___ZL30nw_http_redirect_copy_metadataP25nw_protocol_http_redirectP11nw_endpointP20nw_protocol_metadatab_block_invoke_2(uint64_t a1, uint64_t a2)
{
  xpc_object_t v2 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 0x40000000;
  v3[2] = ___ZL30nw_http_redirect_copy_metadataP25nw_protocol_http_redirectP11nw_endpointP20nw_protocol_metadatab_block_invoke_3;
  v3[3] = &unk_1E523A8A8;
  v3[4] = *(void *)(a1 + 40);
  v3[5] = a2;
  nw_http_request_access_authority(v2, v3);
}

uint64_t ___ZL30nw_http_redirect_copy_metadataP25nw_protocol_http_redirectP11nw_endpointP20nw_protocol_metadatab_block_invoke_4(uint64_t a1, char *a2, unint64_t a3, uint64_t a4)
{
  if (!*(unsigned char *)(a1 + 56)
    || (a3 < 9 || strncasecmp(a2, "content-", 8uLL)) && strcasecmp(a2, "digest") && strcasecmp(a2, "Last-Modified"))
  {
    if ((char v7 = *(unsigned char *)(*(void *)(a1 + 48) + 692), (v7 & 2) != 0)
      && *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)
      || strcasecmp(a2, "Cookie"))
    {
      if (strcasecmp(a2, "Authorization")
        && strcasecmp(a2, "Proxy-Authorization")
        && ((v7 & 4) != 0 || strcasecmp(a2, "Accept-Encoding"))
        && (*(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) || strcasecmp(a2, "Origin")))
      {
        nw_http_fields_append(*(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40), (uint64_t)a2, a4);
      }
    }
  }
  return 1;
}

uint64_t ___ZL24nw_http_redirect_processP25nw_protocol_http_redirectP20nw_protocol_metadata_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  uint64_t v3 = MEMORY[0x1E4F143A8];
  uint64_t v4 = 0x40000000;
  uint64_t v5 = ___ZL24nw_http_redirect_processP25nw_protocol_http_redirectP20nw_protocol_metadata_block_invoke_2;
  uint64_t v6 = &__block_descriptor_tmp_21_940;
  uint64_t v7 = v1;
  return (*(uint64_t (**)(void))(*(void *)(v1 + 592) + 16))();
}

void nw_http_redirect_reissue(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_redirect_reissue";
    uint64_t v25 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(v41[0]) = 16;
    LOBYTE(v44) = 0;
    if (!__nwlog_fault(v25, v41, &v44)) {
      goto LABEL_88;
    }
    if (LOBYTE(v41[0]) == 17)
    {
      CFRange v26 = __nwlog_obj();
      os_log_type_t v27 = v41[0];
      if (!os_log_type_enabled(v26, v41[0])) {
        goto LABEL_88;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http_redirect_reissue";
      char v28 = "%{public}s called with null http_redirect";
    }
    else if ((_BYTE)v44)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      CFRange v26 = __nwlog_obj();
      os_log_type_t v27 = v41[0];
      BOOL v30 = os_log_type_enabled(v26, v41[0]);
      if (backtrace_string)
      {
        if (v30)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http_redirect_reissue";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v26, v27, "%{public}s called with null http_redirect, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_88:
        if (!v25) {
          return;
        }
        goto LABEL_89;
      }
      if (!v30) {
        goto LABEL_88;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http_redirect_reissue";
      char v28 = "%{public}s called with null http_redirect, no backtrace";
    }
    else
    {
      CFRange v26 = __nwlog_obj();
      os_log_type_t v27 = v41[0];
      if (!os_log_type_enabled(v26, v41[0])) {
        goto LABEL_88;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http_redirect_reissue";
      char v28 = "%{public}s called with null http_redirect, backtrace limit exceeded";
    }
    goto LABEL_87;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_redirect_reissue";
    uint64_t v25 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(v41[0]) = 16;
    LOBYTE(v44) = 0;
    if (!__nwlog_fault(v25, v41, &v44)) {
      goto LABEL_88;
    }
    if (LOBYTE(v41[0]) != 17)
    {
      if (!(_BYTE)v44)
      {
        CFRange v26 = __nwlog_obj();
        os_log_type_t v27 = v41[0];
        if (!os_log_type_enabled(v26, v41[0])) {
          goto LABEL_88;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_redirect_reissue";
        char v28 = "%{public}s called with null endpoint, backtrace limit exceeded";
        goto LABEL_87;
      }
      __int16 v31 = (char *)__nw_create_backtrace_string();
      CFRange v26 = __nwlog_obj();
      os_log_type_t v27 = v41[0];
      BOOL v32 = os_log_type_enabled(v26, v41[0]);
      if (!v31)
      {
        if (!v32) {
          goto LABEL_88;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_redirect_reissue";
        char v28 = "%{public}s called with null endpoint, no backtrace";
        goto LABEL_87;
      }
      if (!v32) {
        goto LABEL_69;
      }
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_http_redirect_reissue";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v31;
      __int16 v33 = "%{public}s called with null endpoint, dumping backtrace:%{public}s";
      goto LABEL_68;
    }
    CFRange v26 = __nwlog_obj();
    os_log_type_t v27 = v41[0];
    if (!os_log_type_enabled(v26, v41[0])) {
      goto LABEL_88;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_redirect_reissue";
    char v28 = "%{public}s called with null endpoint";
LABEL_87:
    _os_log_impl(&dword_1830D4000, v26, v27, v28, buf, 0xCu);
    goto LABEL_88;
  }
  if (!a4)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_redirect_reissue";
    uint64_t v25 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(v41[0]) = 16;
    LOBYTE(v44) = 0;
    if (!__nwlog_fault(v25, v41, &v44)) {
      goto LABEL_88;
    }
    if (LOBYTE(v41[0]) == 17)
    {
      CFRange v26 = __nwlog_obj();
      os_log_type_t v27 = v41[0];
      if (!os_log_type_enabled(v26, v41[0])) {
        goto LABEL_88;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http_redirect_reissue";
      char v28 = "%{public}s called with null orig_request_metadata";
      goto LABEL_87;
    }
    if (!(_BYTE)v44)
    {
      CFRange v26 = __nwlog_obj();
      os_log_type_t v27 = v41[0];
      if (!os_log_type_enabled(v26, v41[0])) {
        goto LABEL_88;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http_redirect_reissue";
      char v28 = "%{public}s called with null orig_request_metadata, backtrace limit exceeded";
      goto LABEL_87;
    }
    __int16 v31 = (char *)__nw_create_backtrace_string();
    CFRange v26 = __nwlog_obj();
    os_log_type_t v27 = v41[0];
    BOOL v34 = os_log_type_enabled(v26, v41[0]);
    if (!v31)
    {
      if (!v34) {
        goto LABEL_88;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http_redirect_reissue";
      char v28 = "%{public}s called with null orig_request_metadata, no backtrace";
      goto LABEL_87;
    }
    if (!v34) {
      goto LABEL_69;
    }
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_http_redirect_reissue";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = v31;
    __int16 v33 = "%{public}s called with null orig_request_metadata, dumping backtrace:%{public}s";
LABEL_68:
    _os_log_impl(&dword_1830D4000, v26, v27, v33, buf, 0x16u);
    goto LABEL_69;
  }
  if (!a5)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_redirect_reissue";
    uint64_t v25 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(v41[0]) = 16;
    LOBYTE(v44) = 0;
    if (!__nwlog_fault(v25, v41, &v44)) {
      goto LABEL_88;
    }
    if (LOBYTE(v41[0]) == 17)
    {
      CFRange v26 = __nwlog_obj();
      os_log_type_t v27 = v41[0];
      if (!os_log_type_enabled(v26, v41[0])) {
        goto LABEL_88;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http_redirect_reissue";
      char v28 = "%{public}s called with null _request_metadata";
      goto LABEL_87;
    }
    if (!(_BYTE)v44)
    {
      CFRange v26 = __nwlog_obj();
      os_log_type_t v27 = v41[0];
      if (!os_log_type_enabled(v26, v41[0])) {
        goto LABEL_88;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http_redirect_reissue";
      char v28 = "%{public}s called with null _request_metadata, backtrace limit exceeded";
      goto LABEL_87;
    }
    __int16 v31 = (char *)__nw_create_backtrace_string();
    CFRange v26 = __nwlog_obj();
    os_log_type_t v27 = v41[0];
    BOOL v35 = os_log_type_enabled(v26, v41[0]);
    if (!v31)
    {
      if (!v35) {
        goto LABEL_88;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http_redirect_reissue";
      char v28 = "%{public}s called with null _request_metadata, no backtrace";
      goto LABEL_87;
    }
    if (v35)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_http_redirect_reissue";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v31;
      __int16 v33 = "%{public}s called with null _request_metadata, dumping backtrace:%{public}s";
      goto LABEL_68;
    }
LABEL_69:
    free(v31);
    if (!v25) {
      return;
    }
LABEL_89:
    free(v25);
    return;
  }
  if ((*(unsigned char *)(a1 + 198) & 1) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v9 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = *(_DWORD *)(a1 + 688);
      *(_DWORD *)buf = 136446978;
      *(void *)&uint8_t buf[4] = "nw_http_redirect_reissue";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = a1 + 114;
      *(_WORD *)&buf[22] = 2080;
      BOOL v55 = (uint64_t (*)(uint64_t, uint64_t))" ";
      LOWORD(v56) = 1024;
      *(_DWORD *)((char *)&v56 + 2) = v10;
      _os_log_impl(&dword_1830D4000, v9, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}s%staking redirect, remaining limit %u", buf, 0x26u);
    }
  }
  *(void *)buf = 0;
  *(void *)&buf[8] = buf;
  *(void *)&buf[16] = 0x3802000000;
  BOOL v55 = __Block_byref_object_copy__16;
  os_log_type_t v56 = __Block_byref_object_dispose__17;
  parameters = (void *)nw_protocol_get_parameters(a1);
  if (parameters) {
    parameters = os_retain(parameters);
  }
  BOOL v57 = parameters;
  v58 |= 1u;
  nw_http_messaging_options_create_transaction_in_parameters(*(void **)(*(void *)&buf[8] + 40), a1, 1);
  nw_protocol_plugin_metadata_prepare_for_reissue(a1 + 200);
  v41[0] = 0;
  v41[1] = v41;
  v41[2] = 0x3802000000;
  v41[3] = __Block_byref_object_copy__14;
  v41[4] = __Block_byref_object_dispose__15;
  uint64_t v42 = os_retain(a5);
  v43 |= 1u;
  BOOL v12 = *(void **)(a1 + 672);
  v40[0] = MEMORY[0x1E4F143A8];
  v40[1] = 0x40000000;
  v40[2] = ___ZL24nw_http_redirect_reissueP25nw_protocol_http_redirectP11nw_endpointP13nw_parametersP20nw_protocol_metadataS6__block_invoke;
  v40[3] = &unk_1E523A920;
  v40[4] = v41;
  v40[5] = a1;
  v39[0] = MEMORY[0x1E4F143A8];
  v39[1] = 0x40000000;
  v39[2] = ___ZL24nw_http_redirect_reissueP25nw_protocol_http_redirectP11nw_endpointP13nw_parametersP20nw_protocol_metadataS6__block_invoke_2;
  v39[3] = &unk_1E523A970;
  v39[5] = v41;
  v39[6] = a1;
  v39[4] = buf;
  v38[0] = MEMORY[0x1E4F143A8];
  v38[1] = 0x40000000;
  v38[2] = ___ZL24nw_http_redirect_reissueP25nw_protocol_http_redirectP11nw_endpointP13nw_parametersP20nw_protocol_metadataS6__block_invoke_4;
  v38[3] = &__block_descriptor_tmp_49;
  v38[4] = a1;
  nw_protocol_plugin_retry_reissue_output_frames(a1 + 344, a1, v12, a2, a3, 2, 1, v40, v39, (uint64_t)v38);
  int v13 = *(_DWORD *)(a1 + 688);
  *(_DWORD *)(a1 + 688) = v13 - 1;
  if (v13) {
    goto LABEL_28;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  uint64_t v14 = *(unsigned int *)(a1 + 688);
  int v44 = 136446978;
  uint64_t v45 = "nw_http_redirect_reissue";
  __int16 v46 = 2082;
  uint64_t v47 = "http_redirect->limit";
  __int16 v48 = 2048;
  uint64_t v49 = 1;
  __int16 v50 = 2048;
  uint64_t v51 = v14;
  CFIndex v15 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v36 = 0;
  if (__nwlog_fault(v15, &type, &v36))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v16 = gLogObj;
      os_log_type_t v17 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        uint64_t v18 = *(unsigned int *)(a1 + 688);
        int v44 = 136446978;
        uint64_t v45 = "nw_http_redirect_reissue";
        __int16 v46 = 2082;
        uint64_t v47 = "http_redirect->limit";
        __int16 v48 = 2048;
        uint64_t v49 = 1;
        __int16 v50 = 2048;
        uint64_t v51 = v18;
        uint64_t v19 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu";
LABEL_24:
        _os_log_impl(&dword_1830D4000, v16, v17, v19, (uint8_t *)&v44, 0x2Au);
      }
    }
    else if (v36)
    {
      os_log_type_t v20 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v16 = gLogObj;
      os_log_type_t v17 = type;
      BOOL v21 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (v20)
      {
        if (v21)
        {
          uint64_t v22 = *(unsigned int *)(a1 + 688);
          int v44 = 136447234;
          uint64_t v45 = "nw_http_redirect_reissue";
          __int16 v46 = 2082;
          uint64_t v47 = "http_redirect->limit";
          __int16 v48 = 2048;
          uint64_t v49 = 1;
          __int16 v50 = 2048;
          uint64_t v51 = v22;
          __int16 v52 = 2082;
          BOOL v53 = v20;
          _os_log_impl(&dword_1830D4000, v16, v17, "%{public}s Underflow: %{public}s, decrement %llu, result %llu, dumping backtrace:%{public}s", (uint8_t *)&v44, 0x34u);
        }
        free(v20);
        goto LABEL_25;
      }
      if (v21)
      {
        uint64_t v24 = *(unsigned int *)(a1 + 688);
        int v44 = 136446978;
        uint64_t v45 = "nw_http_redirect_reissue";
        __int16 v46 = 2082;
        uint64_t v47 = "http_redirect->limit";
        __int16 v48 = 2048;
        uint64_t v49 = 1;
        __int16 v50 = 2048;
        uint64_t v51 = v24;
        uint64_t v19 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, no backtrace";
        goto LABEL_24;
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v16 = gLogObj;
      os_log_type_t v17 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        uint64_t v23 = *(unsigned int *)(a1 + 688);
        int v44 = 136446978;
        uint64_t v45 = "nw_http_redirect_reissue";
        __int16 v46 = 2082;
        uint64_t v47 = "http_redirect->limit";
        __int16 v48 = 2048;
        uint64_t v49 = 1;
        __int16 v50 = 2048;
        uint64_t v51 = v23;
        uint64_t v19 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, backtrace limit exceeded";
        goto LABEL_24;
      }
    }
  }
LABEL_25:
  if (v15) {
    free(v15);
  }
  *(_DWORD *)(a1 + 688) = 0;
LABEL_28:
  _Block_object_dispose(v41, 8);
  if ((v43 & 1) != 0 && v42) {
    os_release(v42);
  }
  _Block_object_dispose(buf, 8);
  if (v58)
  {
    if (v57) {
      os_release(v57);
    }
  }
}

uint64_t __Block_byref_object_copy__16(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(result + 48) = *(unsigned char *)(result + 48) & 0xFE | *(unsigned char *)(a2 + 48) & 1;
  *(void *)(a2 + 40) = 0;
  *(unsigned char *)(a2 + 48) &= ~1u;
  return result;
}

void __Block_byref_object_dispose__17(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48))
  {
    xpc_object_t v2 = *(void **)(a1 + 40);
    if (v2) {
      os_release(v2);
    }
  }
  *(void *)(a1 + 40) = 0;
}

uint64_t ___ZL24nw_http_redirect_reissueP25nw_protocol_http_redirectP11nw_endpointP13nw_parametersP20nw_protocol_metadataS6__block_invoke(uint64_t a1, uint64_t *a2)
{
  nw_frame_set_metadata(*a2, *(NSObject **)(*(void *)(*(void *)(a1 + 32) + 8) + 40), 0, (*(unsigned char *)(*(void *)(a1 + 40) + 692) & 8) == 0);
  return 1;
}

uint64_t ___ZL24nw_http_redirect_reissueP25nw_protocol_http_redirectP11nw_endpointP13nw_parametersP20nw_protocol_metadataS6__block_invoke_2(void *a1)
{
  if (nw_protocol_copy_http_client_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_client_definition_onceToken, &__block_literal_global_72_75798);
  }
  id v2 = (id)nw_protocol_copy_http_client_definition_definition;
  identifier = nw_protocol_definition_get_identifier(v2);
  if (v2) {
    os_release(v2);
  }
  uint64_t v4 = a1[6];
  do
  {
    uint64_t v4 = *(void *)(v4 + 48);
    if (!v4) {
      return 1;
    }
  }
  while (!nw_protocols_are_equal(*(void **)(v4 + 16), identifier));
  uint64_t v5 = nw_parameters_copy_protocol_options_legacy(*(void **)(*(void *)(a1[4] + 8) + 40), (nw_protocol *)v4);
  uint64_t v6 = nw_http_client_options_copy_resend_handler(v5);
  BOOL v7 = v6 == 0;
  if (v6)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(void *)(a1[4] + 8);
    v11[0] = MEMORY[0x1E4F143A8];
    v11[1] = 0x40000000;
    v11[2] = ___ZL24nw_http_redirect_reissueP25nw_protocol_http_redirectP11nw_endpointP13nw_parametersP20nw_protocol_metadataS6__block_invoke_3;
    v11[3] = &unk_1E523A948;
    v11[4] = a1[5];
    (*((void (**)(void *, void, void *))v6 + 2))(v6, *(void *)(v9 + 40), v11);
    _Block_release(v8);
  }
  if (v5) {
    os_release(v5);
  }
  return v7;
}

void ___ZL24nw_http_redirect_reissueP25nw_protocol_http_redirectP11nw_endpointP13nw_parametersP20nw_protocol_metadataS6__block_invoke_4(uint64_t a1)
{
}

void nw_http_redirect_destroy(uint64_t a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if ((*(unsigned char *)(a1 + 198) & 1) == 0)
  {
    if (gLogDatapath)
    {
      uint64_t v14 = __nwlog_obj();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
      {
        int v15 = 136446722;
        BOOL v16 = "nw_http_redirect_destroy";
        __int16 v17 = 2082;
        uint64_t v18 = a1 + 114;
        __int16 v19 = 2080;
        os_log_type_t v20 = " ";
        _os_log_impl(&dword_1830D4000, v14, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%scalled", (uint8_t *)&v15, 0x20u);
      }
    }
  }
  if (*(_DWORD *)(a1 + 552))
  {
    *(unsigned char *)(a1 + 556) |= 0x40u;
    if ((*(unsigned char *)(a1 + 198) & 1) == 0 && gLogDatapath)
    {
      id v2 = __nwlog_obj();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
      {
        int v15 = 136446722;
        BOOL v16 = "nw_http_redirect_destroy";
        __int16 v17 = 2082;
        uint64_t v18 = a1 + 114;
        __int16 v19 = 2080;
        os_log_type_t v20 = " ";
        _os_log_impl(&dword_1830D4000, v2, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sdeferring destroy because the request is being reissued", (uint8_t *)&v15, 0x20u);
      }
    }
  }
  else
  {
    if (*(unsigned char *)(a1 + 680))
    {
      uint64_t v3 = *(void **)(a1 + 672);
      if (v3) {
        os_release(v3);
      }
    }
    *(void *)(a1 + 672) = 0;
    if (*(unsigned char *)(a1 + 664))
    {
      uint64_t v4 = *(void **)(a1 + 656);
      if (v4) {
        os_release(v4);
      }
    }
    *(void *)(a1 + 656) = 0;
    if (*(unsigned char *)(a1 + 648))
    {
      uint64_t v5 = *(void **)(a1 + 640);
      if (v5) {
        os_release(v5);
      }
    }
    *(void *)(a1 + 640) = 0;
    if (*(unsigned char *)(a1 + 632))
    {
      uint64_t v6 = *(void **)(a1 + 624);
      if (v6) {
        os_release(v6);
      }
    }
    *(void *)(a1 + 624) = 0;
    if (*(unsigned char *)(a1 + 616))
    {
      BOOL v7 = *(NSObject **)(a1 + 608);
      if (v7) {
        dispatch_release(v7);
      }
    }
    *(void *)(a1 + 608) = 0;
    if (*(unsigned char *)(a1 + 600))
    {
      uint64_t v8 = *(const void **)(a1 + 592);
      if (v8) {
        _Block_release(v8);
      }
    }
    *(void *)(a1 + 592) = 0;
    if (*(unsigned char *)(a1 + 584))
    {
      uint64_t v9 = *(void **)(a1 + 576);
      if (v9) {
        os_release(v9);
      }
    }
    *(void *)(a1 + 576) = 0;
    if (*(unsigned char *)(a1 + 568))
    {
      int v10 = *(void **)(a1 + 560);
      if (v10) {
        os_release(v10);
      }
    }
    *(void *)(a1 + 560) = 0;
    nw_protocol_plugin_retry::~nw_protocol_plugin_retry((nw_protocol_plugin_retry *)(a1 + 344));
    if (*(unsigned char *)(a1 + 288))
    {
      unsigned int v11 = *(void **)(a1 + 280);
      if (v11) {
        os_release(v11);
      }
    }
    *(void *)(a1 + 280) = 0;
    if (*(unsigned char *)(a1 + 272))
    {
      BOOL v12 = *(void **)(a1 + 264);
      if (v12) {
        os_release(v12);
      }
    }
    *(void *)(a1 + 264) = 0;
    if (*(unsigned char *)(a1 + 256))
    {
      int v13 = *(void **)(a1 + 248);
      if (v13) {
        os_release(v13);
      }
    }
    free((void *)a1);
  }
}

void ___ZL24nw_http_redirect_reissueP25nw_protocol_http_redirectP11nw_endpointP13nw_parametersP20nw_protocol_metadataS6__block_invoke_3(uint64_t a1, nw_content_context_t context)
{
}

void ___ZL24nw_http_redirect_processP25nw_protocol_http_redirectP20nw_protocol_metadata_block_invoke_2(uint64_t a1, void *object, void *a3, void *a4)
{
  v22[0] = 0;
  v22[1] = v22;
  v22[2] = 0x3802000000;
  v22[3] = __Block_byref_object_copy__925;
  v22[4] = __Block_byref_object_dispose__926;
  if (object)
  {
    BOOL v7 = os_retain(object);
    char v8 = v24 | 1;
  }
  else
  {
    BOOL v7 = 0;
    char v8 = -1;
  }
  uint64_t v23 = v7;
  char v24 = v8;
  v19[0] = 0;
  v19[1] = v19;
  v19[2] = 0x3802000000;
  v19[3] = __Block_byref_object_copy__16;
  v19[4] = __Block_byref_object_dispose__17;
  if (a3)
  {
    uint64_t v9 = os_retain(a3);
    char v10 = v21 | 1;
  }
  else
  {
    uint64_t v9 = 0;
    char v10 = -1;
  }
  os_log_type_t v20 = v9;
  char v21 = v10;
  v16[0] = 0;
  v16[1] = v16;
  v16[2] = 0x3802000000;
  v16[3] = __Block_byref_object_copy__14;
  void v16[4] = __Block_byref_object_dispose__15;
  if (a4)
  {
    unsigned int v11 = os_retain(a4);
    char v12 = v18 | 1;
  }
  else
  {
    unsigned int v11 = 0;
    char v12 = -1;
  }
  objecta = v11;
  char v18 = v12;
  uint64_t v13 = *(void *)(a1 + 32);
  uint64_t v14 = *(void **)(v13 + 672);
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 0x40000000;
  v15[2] = ___ZL24nw_http_redirect_processP25nw_protocol_http_redirectP20nw_protocol_metadata_block_invoke_18;
  v15[3] = &unk_1E523A7C0;
  v15[4] = v16;
  v15[5] = v22;
  v15[6] = v19;
  v15[7] = v13;
  nw_queue_context_async_if_needed(v14, v15);
  _Block_object_dispose(v16, 8);
  if ((v18 & 1) != 0 && objecta) {
    os_release(objecta);
  }
  _Block_object_dispose(v19, 8);
  if ((v21 & 1) != 0 && v20) {
    os_release(v20);
  }
  _Block_object_dispose(v22, 8);
  if (v24)
  {
    if (v23) {
      os_release(v23);
    }
  }
}

void ___ZL24nw_http_redirect_processP25nw_protocol_http_redirectP20nw_protocol_metadata_block_invoke_18(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (nw_protocol_plugin_retry_end_async(a1[7] + 344))
  {
    uint64_t v2 = a1[7];
    if (*(void *)(*(void *)(a1[4] + 8) + 40))
    {
      if ((*(unsigned char *)(v2 + 198) & 1) == 0)
      {
        if (gLogDatapath)
        {
          uint64_t v9 = __nwlog_obj();
          BOOL v10 = os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG);
          uint64_t v2 = a1[7];
          if (v10)
          {
            int v13 = 136446722;
            uint64_t v14 = "nw_http_redirect_process_block_invoke";
            __int16 v15 = 2082;
            uint64_t v16 = v2 + 114;
            __int16 v17 = 2080;
            char v18 = " ";
            _os_log_impl(&dword_1830D4000, v9, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sReceived new request metadata from redirect handler", (uint8_t *)&v13, 0x20u);
            uint64_t v2 = a1[7];
          }
        }
      }
      nw_protocol_plugin_metadata_resume_input(v2 + 200, 3);
      id v3 = nw_context_copy_registered_endpoint(*(void **)(a1[7] + 672), *(void **)(*(void *)(a1[5] + 8) + 40));
      nw_http_redirect_reissue(a1[7], v3, *(void **)(*(void *)(a1[6] + 8) + 40), *(void *)(a1[7] + 560), *(void **)(*(void *)(a1[4] + 8) + 40));
      if (v3) {
        os_release(v3);
      }
    }
    else
    {
      uint64_t v5 = *(void *)(v2 + 48);
      if (v5)
      {
        uint64_t v6 = *(void *)(v5 + 24);
        if (v6)
        {
          if (*(void *)(v6 + 64))
          {
            if ((*(unsigned char *)(v2 + 198) & 1) == 0)
            {
              if (gLogDatapath)
              {
                unsigned int v11 = __nwlog_obj();
                BOOL v12 = os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG);
                uint64_t v2 = a1[7];
                if (v12)
                {
                  int v13 = 136446722;
                  uint64_t v14 = "nw_http_redirect_process_block_invoke";
                  __int16 v15 = 2082;
                  uint64_t v16 = v2 + 114;
                  __int16 v17 = 2080;
                  char v18 = " ";
                  _os_log_impl(&dword_1830D4000, v11, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sReceived no request metadata from redirect handler", (uint8_t *)&v13, 0x20u);
                  uint64_t v2 = a1[7];
                }
              }
            }
            nw_protocol_plugin_metadata_resume_input(v2 + 200, 1);
            *(unsigned char *)(a1[7] + 692) &= ~0x10u;
            nw_protocol_input_available(*(void **)(a1[7] + 48), a1[7]);
          }
        }
      }
    }
  }
  else
  {
    uint64_t v4 = a1[7];
    if ((*(unsigned char *)(v4 + 198) & 1) == 0)
    {
      if (gLogDatapath)
      {
        BOOL v7 = __nwlog_obj();
        BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG);
        uint64_t v4 = a1[7];
        if (v8)
        {
          int v13 = 136446722;
          uint64_t v14 = "nw_http_redirect_process_block_invoke";
          __int16 v15 = 2082;
          uint64_t v16 = v4 + 114;
          __int16 v17 = 2080;
          char v18 = " ";
          _os_log_impl(&dword_1830D4000, v7, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sDeferred destroy when coming back from callout", (uint8_t *)&v13, 0x20u);
          uint64_t v4 = a1[7];
        }
      }
    }
    nw_http_redirect_destroy(v4);
  }
}

const char *___ZL30nw_http_redirect_copy_metadataP25nw_protocol_http_redirectP11nw_endpointP20nw_protocol_metadatab_block_invoke_3(uint64_t a1, const char *a2)
{
  BOOL result = *(const char **)(a1 + 40);
  if (a2 && result)
  {
    BOOL result = (const char *)strcmp(result, a2);
    BOOL v4 = result == 0;
  }
  else
  {
    BOOL v4 = result == a2;
  }
  char v5 = v4;
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v5;
  return result;
}

uint64_t __Block_byref_object_copy__25(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(result + 48) = *(unsigned char *)(result + 48) & 0xFE | *(unsigned char *)(a2 + 48) & 1;
  *(void *)(a2 + 40) = 0;
  *(unsigned char *)(a2 + 48) &= ~1u;
  return result;
}

void __Block_byref_object_dispose__26(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48))
  {
    uint64_t v2 = *(const void **)(a1 + 40);
    if (v2) {
      CFRelease(v2);
    }
  }
  *(void *)(a1 + 40) = 0;
}

void ___ZL30nw_http_redirect_copy_endpointP25nw_protocol_http_redirectP20nw_protocol_metadata_block_invoke_27(uint64_t a1, char *__s)
{
  CFIndex v4 = strlen(__s);
  CFURLRef v5 = CFURLCreateAbsoluteURLWithBytes((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const UInt8 *)__s, v4, 0x600u, *(CFURLRef *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), 0);
  uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8);
  char v7 = *(unsigned char *)(v6 + 48);
  if (v7)
  {
    BOOL v8 = *(const void **)(v6 + 40);
    if (v8)
    {
      CFRelease(v8);
      char v7 = *(unsigned char *)(v6 + 48);
    }
  }
  *(void *)(v6 + 40) = v5;
  *(unsigned char *)(v6 + 48) = v7 | 1;
}

void ___ZL39nw_protocol_http_redirect_get_callbacksv_block_invoke()
{
  nw_protocol_http_redirect_get_callbacks(void)::protocol_callbacks = (uint64_t)nw_protocol_common_add_input_handler;
  qword_1E8F6A818 = (uint64_t)nw_protocol_common_replace_input_handler;
  qword_1E8F6A858 = (uint64_t)nw_protocol_common_get_input_frames;
  qword_1E8F6A860 = (uint64_t)nw_protocol_common_get_output_frames;
  qword_1E8F6A868 = (uint64_t)nw_protocol_common_finalize_output_frames;
  qword_1E8F6A878 = (uint64_t)nw_protocol_common_get_parameters;
  qword_1E8F6A880 = (uint64_t)nw_protocol_common_get_path;
  qword_1E8F6A890 = (uint64_t)nw_protocol_common_get_remote_endpoint;
  qword_1E8F6A888 = (uint64_t)nw_protocol_common_get_local_endpoint;
  qword_1E8F6A8D0 = (uint64_t)nw_protocol_common_get_output_local_endpoint;
  qword_1E8F6A8D8 = (uint64_t)nw_protocol_common_get_output_interface;
  qword_1E8F6A820 = (uint64_t)nw_protocol_common_connect;
  qword_1E8F6A830 = (uint64_t)nw_protocol_common_connected;
  qword_1E8F6A828 = (uint64_t)nw_protocol_common_disconnect;
  qword_1E8F6A838 = (uint64_t)nw_protocol_common_disconnected;
  qword_1E8F6A848 = (uint64_t)nw_protocol_common_input_available;
  qword_1E8F6A850 = (uint64_t)nw_protocol_common_output_available;
  qword_1E8F6A8C0 = (uint64_t)nw_protocol_common_input_finished;
  qword_1E8F6A8C8 = (uint64_t)nw_protocol_common_output_finished;
  qword_1E8F6A910 = (uint64_t)nw_protocol_common_input_flush;
  qword_1E8F6A840 = (uint64_t)nw_protocol_common_error;
  qword_1E8F6A908 = (uint64_t)nw_protocol_common_reset;
  qword_1E8F6A900 = (uint64_t)nw_protocol_common_get_message_properties;
  qword_1E8F6A8E8 = (uint64_t)nw_protocol_common_copy_info;
  qword_1E8F6A8B8 = (uint64_t)nw_protocol_common_supports_external_data;
  qword_1E8F6A8E0 = (uint64_t)nw_protocol_common_waiting_for_output;
  qword_1E8F6A898 = (uint64_t)nw_protocol_common_register_notification;
  qword_1E8F6A8A0 = (uint64_t)nw_protocol_common_unregister_notification;
  qword_1E8F6A8A8 = (uint64_t)nw_protocol_common_notify;
  qword_1E8F6A8B0 = (uint64_t)nw_protocol_common_updated_path;
  qword_1E8F6A870 = (uint64_t)nw_protocol_common_link_state;
  qword_1E8F6A810 = (uint64_t)nw_protocol_http_redirect_remove_input_handler;
}

uint64_t nw_protocol_http_redirect_remove_input_handler(nw_protocol *a1, nw_protocol *a2, uint64_t a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    handle = a1->handle;
    if (handle)
    {
      v15[0] = MEMORY[0x1E4F143A8];
      v15[1] = 0x40000000;
      v15[2] = ___ZL46nw_protocol_http_redirect_remove_input_handlerP11nw_protocolS0_b_block_invoke;
      v15[3] = &__block_descriptor_tmp_54;
      v15[4] = handle;
      v13[0] = MEMORY[0x1E4F143A8];
      v13[1] = 0x40000000;
      v13[2] = ___ZL46nw_protocol_http_redirect_remove_input_handlerP11nw_protocolS0_b_block_invoke_2;
      v13[3] = &__block_descriptor_tmp_55_956;
      char v14 = a3;
      v13[4] = handle;
      return nw_protocol_common_remove_input_handler_with_cleanup_blocks(a1, a2, a3, (uint64_t)v15, (uint64_t)v13);
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v19 = "nw_protocol_http_redirect_remove_input_handler";
    CFURLRef v5 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v17 = OS_LOG_TYPE_ERROR;
    char v16 = 0;
    if (!__nwlog_fault(v5, &v17, &v16)) {
      goto LABEL_32;
    }
    if (v17 == OS_LOG_TYPE_FAULT)
    {
      uint64_t v6 = __nwlog_obj();
      os_log_type_t v7 = v17;
      if (os_log_type_enabled(v6, v17))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v19 = "nw_protocol_http_redirect_remove_input_handler";
        BOOL v8 = "%{public}s called with null http_redirect";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (!v16)
    {
      uint64_t v6 = __nwlog_obj();
      os_log_type_t v7 = v17;
      if (os_log_type_enabled(v6, v17))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v19 = "nw_protocol_http_redirect_remove_input_handler";
        BOOL v8 = "%{public}s called with null http_redirect, backtrace limit exceeded";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v6 = __nwlog_obj();
    os_log_type_t v7 = v17;
    BOOL v12 = os_log_type_enabled(v6, v17);
    if (!backtrace_string)
    {
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v19 = "nw_protocol_http_redirect_remove_input_handler";
        BOOL v8 = "%{public}s called with null http_redirect, no backtrace";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (v12)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v19 = "nw_protocol_http_redirect_remove_input_handler";
      __int16 v20 = 2082;
      char v21 = backtrace_string;
      unsigned int v11 = "%{public}s called with null http_redirect, dumping backtrace:%{public}s";
      goto LABEL_21;
    }
    goto LABEL_22;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v19 = "nw_protocol_http_redirect_remove_input_handler";
  CFURLRef v5 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t v17 = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (!__nwlog_fault(v5, &v17, &v16)) {
    goto LABEL_32;
  }
  if (v17 != OS_LOG_TYPE_FAULT)
  {
    if (!v16)
    {
      uint64_t v6 = __nwlog_obj();
      os_log_type_t v7 = v17;
      if (os_log_type_enabled(v6, v17))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v19 = "nw_protocol_http_redirect_remove_input_handler";
        BOOL v8 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v6 = __nwlog_obj();
    os_log_type_t v7 = v17;
    BOOL v10 = os_log_type_enabled(v6, v17);
    if (!backtrace_string)
    {
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v19 = "nw_protocol_http_redirect_remove_input_handler";
        BOOL v8 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (v10)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v19 = "nw_protocol_http_redirect_remove_input_handler";
      __int16 v20 = 2082;
      char v21 = backtrace_string;
      unsigned int v11 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_21:
      _os_log_impl(&dword_1830D4000, v6, v7, v11, buf, 0x16u);
    }
LABEL_22:
    free(backtrace_string);
    goto LABEL_32;
  }
  uint64_t v6 = __nwlog_obj();
  os_log_type_t v7 = v17;
  if (os_log_type_enabled(v6, v17))
  {
    *(_DWORD *)buf = 136446210;
    uint64_t v19 = "nw_protocol_http_redirect_remove_input_handler";
    BOOL v8 = "%{public}s called with null protocol";
LABEL_31:
    _os_log_impl(&dword_1830D4000, v6, v7, v8, buf, 0xCu);
  }
LABEL_32:
  if (v5) {
    free(v5);
  }
  return 0;
}

void ___ZL46nw_protocol_http_redirect_remove_input_handlerP11nw_protocolS0_b_block_invoke(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  if (gLogDatapath)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v8 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
    {
      int v9 = 136446210;
      BOOL v10 = "nw_protocol_plugin_metadata_teardown";
      _os_log_impl(&dword_1830D4000, v8, OS_LOG_TYPE_DEBUG, "%{public}s called", (uint8_t *)&v9, 0xCu);
    }
  }
  nw_protocol_plugin_metadata_reset((uint64_t *)(v2 + 200));
  *(void *)(v2 + 328) = 0;
  uint64_t v3 = *(void *)(a1 + 32);
  char v4 = *(unsigned char *)(v3 + 464);
  if (v4)
  {
    CFURLRef v5 = *(const void **)(v3 + 456);
    if (v5)
    {
      _Block_release(v5);
      char v4 = *(unsigned char *)(v3 + 464);
    }
  }
  *(void *)(v3 + 456) = 0;
  *(unsigned char *)(v3 + 464) = v4 | 1;
  char v6 = *(unsigned char *)(v3 + 512);
  if (v6)
  {
    os_log_type_t v7 = *(const void **)(v3 + 504);
    if (v7)
    {
      _Block_release(v7);
      char v6 = *(unsigned char *)(v3 + 512);
    }
  }
  *(void *)(v3 + 504) = 0;
  *(unsigned char *)(v3 + 512) = v6 | 1;
}

void ___ZL46nw_protocol_http_redirect_remove_input_handlerP11nw_protocolS0_b_block_invoke_2(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 40)) {
    nw_http_redirect_destroy(*(void *)(a1 + 32));
  }
}

double __nw_protocol_http_redirect_identifier_block_invoke()
{
  strcpy((char *)nw_protocol_http_redirect_identifier::protocol_identifier, "http_redirect");
  *(void *)&double result = 0x100000005;
  qword_1E8F69E58 = 0x100000005;
  return result;
}

uint64_t ___ZL26nw_context_dealloc_globalsP21NWConcrete_nw_context_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = nw_hash_node_get_object(a2);
  extra = (uint64_t *)nw_hash_node_get_extra(a2);
  uint64_t v5 = *extra;
  id v6 = v3;
  os_log_type_t v7 = v6;
  if (!v6)
  {
    uint64_t v11 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v33 = "nw_protocol_definition_deallocate_globals";
    BOOL v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v30 = 0;
    if (!__nwlog_fault(v12, &type, &v30)) {
      goto LABEL_55;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v33 = "nw_protocol_definition_deallocate_globals";
        _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s called with null definition", buf, 0xCu);
      }
    }
    else if (v30)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v13 = __nwlog_obj();
      os_log_type_t v20 = type;
      BOOL v21 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v21)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v33 = "nw_protocol_definition_deallocate_globals";
          __int16 v34 = 2082;
          BOOL v35 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v13, v20, "%{public}s called with null definition, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_55:
        if (!v12) {
          goto LABEL_5;
        }
LABEL_56:
        free(v12);
        goto LABEL_5;
      }
      if (v21)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v33 = "nw_protocol_definition_deallocate_globals";
        _os_log_impl(&dword_1830D4000, v13, v20, "%{public}s called with null definition, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int v13 = __nwlog_obj();
      os_log_type_t v27 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v33 = "nw_protocol_definition_deallocate_globals";
        _os_log_impl(&dword_1830D4000, v13, v27, "%{public}s called with null definition, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_54:

    goto LABEL_55;
  }
  uint64_t v8 = *((void *)v6 + 9);
  if (!v8)
  {
    __int16 v15 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v33 = "nw_protocol_definition_deallocate_globals";
    BOOL v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v30 = 0;
    if (!__nwlog_fault(v12, &type, &v30)) {
      goto LABEL_55;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v13 = __nwlog_obj();
      os_log_type_t v16 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v33 = "nw_protocol_definition_deallocate_globals";
        _os_log_impl(&dword_1830D4000, v13, v16, "%{public}s called with null definition->common_state", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!v30)
    {
      int v13 = __nwlog_obj();
      os_log_type_t v28 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v33 = "nw_protocol_definition_deallocate_globals";
        _os_log_impl(&dword_1830D4000, v13, v28, "%{public}s called with null definition->common_state, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    uint64_t v22 = (char *)__nw_create_backtrace_string();
    int v13 = __nwlog_obj();
    os_log_type_t v23 = type;
    BOOL v24 = os_log_type_enabled(v13, type);
    if (!v22)
    {
      if (v24)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v33 = "nw_protocol_definition_deallocate_globals";
        _os_log_impl(&dword_1830D4000, v13, v23, "%{public}s called with null definition->common_state, no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v24)
    {
      *(_DWORD *)buf = 136446466;
      __int16 v33 = "nw_protocol_definition_deallocate_globals";
      __int16 v34 = 2082;
      BOOL v35 = v22;
      _os_log_impl(&dword_1830D4000, v13, v23, "%{public}s called with null definition->common_state, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_35;
  }
  int v9 = *(void (**)(id, uint64_t))(v8 + 16);
  if (!v9)
  {
    os_log_type_t v17 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v33 = "nw_protocol_definition_deallocate_globals";
    BOOL v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v30 = 0;
    if (!__nwlog_fault(v12, &type, &v30)) {
      goto LABEL_55;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v13 = __nwlog_obj();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v33 = "nw_protocol_definition_deallocate_globals";
        _os_log_impl(&dword_1830D4000, v13, v18, "%{public}s called with null definition->common_state->deallocate_globals", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!v30)
    {
      int v13 = __nwlog_obj();
      os_log_type_t v29 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v33 = "nw_protocol_definition_deallocate_globals";
        _os_log_impl(&dword_1830D4000, v13, v29, "%{public}s called with null definition->common_state->deallocate_globals, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    uint64_t v22 = (char *)__nw_create_backtrace_string();
    int v13 = __nwlog_obj();
    os_log_type_t v25 = type;
    BOOL v26 = os_log_type_enabled(v13, type);
    if (!v22)
    {
      if (v26)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v33 = "nw_protocol_definition_deallocate_globals";
        _os_log_impl(&dword_1830D4000, v13, v25, "%{public}s called with null definition->common_state->deallocate_globals, no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v26)
    {
      *(_DWORD *)buf = 136446466;
      __int16 v33 = "nw_protocol_definition_deallocate_globals";
      __int16 v34 = 2082;
      BOOL v35 = v22;
      _os_log_impl(&dword_1830D4000, v13, v25, "%{public}s called with null definition->common_state->deallocate_globals, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_35:

    free(v22);
    if (!v12) {
      goto LABEL_5;
    }
    goto LABEL_56;
  }
  v9(v6, v5);
LABEL_5:

  uint64_t *extra = 0;
  return 1;
}

void sub_18360C1F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL51nw_context_get_active_instance_count_for_hash_tableP21NWConcrete_nw_contextP13nw_hash_table_block_invoke(uint64_t a1, uint64_t a2)
{
  object = (char *)nw_hash_node_get_object(a2);
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = ___ZL51nw_context_get_active_instance_count_for_hash_tableP21NWConcrete_nw_contextP13nw_hash_table_block_invoke_2;
  v7[3] = &unk_1E524AEB8;
  long long v6 = *(_OWORD *)(a1 + 32);
  id v4 = (id)v6;
  long long v8 = v6;
  nw_hash_table_apply(object, (uint64_t)v7);

  return 1;
}

uint64_t ___ZL26nw_context_purge_endpointsP21NWConcrete_nw_contextb_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

uint64_t ___ZL51nw_context_get_active_instance_count_for_hash_tableP21NWConcrete_nw_contextP13nw_hash_table_block_invoke_2(uint64_t a1, uint64_t a2)
{
  id v3 = (id)nw_hash_node_get_object(a2);
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) += nw_context_endpoint_get_active_instance_count(*(void **)(a1 + 32), v3);

  return 1;
}

void sub_18360C324(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_context_get_isolate_protocol_cache(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    BOOL v3 = (*((unsigned char *)v1 + 136) & 3) != 0;
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_context_get_isolate_protocol_cache";
  long long v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_context_get_isolate_protocol_cache";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null context", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_context_get_isolate_protocol_cache";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null context, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_context_get_isolate_protocol_cache";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null context, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_context_get_isolate_protocol_cache";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null context, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  BOOL v3 = 0;
LABEL_3:

  return v3;
}

void nw_context_cancel(void *a1)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    __uint64_t v51 = 0;
    pthread_threadid_np(0, &v51);
    if (*((_DWORD *)v1 + 30) != 4) {
      goto LABEL_3;
    }
    __uint64_t v20 = 0;
    atomic_compare_exchange_strong((atomic_ullong *volatile)v1 + 14, &v20, v51);
    if (!v20) {
      goto LABEL_3;
    }
    BOOL v21 = __nwlog_obj();
    *(_DWORD *)buf = 136446722;
    os_log_type_t v54 = "nw_context_cancel";
    __int16 v55 = 2048;
    __uint64_t v56 = v51;
    __int16 v57 = 2048;
    __uint64_t v58 = v20;
    uint64_t v22 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v50 = 0;
    if (__nwlog_fault(v22, &type, &v50))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v23 = __nwlog_obj();
        os_log_type_t v24 = type;
        if (os_log_type_enabled(v23, type))
        {
          *(_DWORD *)buf = 136446722;
          os_log_type_t v54 = "nw_context_cancel";
          __int16 v55 = 2048;
          __uint64_t v56 = v51;
          __int16 v57 = 2048;
          __uint64_t v58 = v20;
          _os_log_impl(&dword_1830D4000, v23, v24, "%{public}s Entering call, current TID=%llu, inline TID is already set to %llu", buf, 0x20u);
        }
      }
      else if (v50)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v23 = __nwlog_obj();
        os_log_type_t v43 = type;
        BOOL v44 = os_log_type_enabled(v23, type);
        if (backtrace_string)
        {
          if (v44)
          {
            *(_DWORD *)buf = 136446978;
            os_log_type_t v54 = "nw_context_cancel";
            __int16 v55 = 2048;
            __uint64_t v56 = v51;
            __int16 v57 = 2048;
            __uint64_t v58 = v20;
            __int16 v59 = 2082;
            os_log_type_t v60 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v23, v43, "%{public}s Entering call, current TID=%llu, inline TID is already set to %llu, dumping backtrace:%{public}s", buf, 0x2Au);
          }

          free(backtrace_string);
          goto LABEL_97;
        }
        if (v44)
        {
          *(_DWORD *)buf = 136446722;
          os_log_type_t v54 = "nw_context_cancel";
          __int16 v55 = 2048;
          __uint64_t v56 = v51;
          __int16 v57 = 2048;
          __uint64_t v58 = v20;
          _os_log_impl(&dword_1830D4000, v23, v43, "%{public}s Entering call, current TID=%llu, inline TID is already set to %llu, no backtrace", buf, 0x20u);
        }
      }
      else
      {
        os_log_type_t v23 = __nwlog_obj();
        os_log_type_t v48 = type;
        if (os_log_type_enabled(v23, type))
        {
          *(_DWORD *)buf = 136446722;
          os_log_type_t v54 = "nw_context_cancel";
          __int16 v55 = 2048;
          __uint64_t v56 = v51;
          __int16 v57 = 2048;
          __uint64_t v58 = v20;
          _os_log_impl(&dword_1830D4000, v23, v48, "%{public}s Entering call, current TID=%llu, inline TID is already set to %llu, backtrace limit exceeded", buf, 0x20u);
        }
      }
    }
LABEL_97:
    if (v22) {
      free(v22);
    }
LABEL_3:
    if (*((_DWORD *)v1 + 31) != 4)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v2 = (id)gLogObj;
      if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v54 = "nw_context_cancel";
        __int16 v55 = 2114;
        __uint64_t v56 = (__uint64_t)v1;
        _os_log_impl(&dword_1830D4000, v2, OS_LOG_TYPE_INFO, "%{public}s Cancelling context %{public}@", buf, 0x16u);
      }
    }
    uint64_t v3 = nw_context_copy_globals_context((NWConcrete_nw_context *)v1);
    id v4 = (void *)v3;
    if ((*(unsigned char *)(v3 + 136) & 8) != 0)
    {
      uint64_t v5 = *(void *)(v3 + 32);
      uint64_t v6 = *(void *)(v5 + 100);
      if (v6 && *(void *)(v6 + 24) != *(void *)(v6 + 16)
        || (uint64_t v7 = *(void *)(v5 + 116)) != 0 && *(void *)(v7 + 24) != *(void *)(v7 + 16))
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v8 = (id)gLogObj;
        *(_DWORD *)buf = 136446210;
        os_log_type_t v54 = "nw_context_cancel";
        int v9 = (char *)_os_log_send_and_compose_impl();

        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v50 = 0;
        if (!__nwlog_fault(v9, &type, &v50)) {
          goto LABEL_31;
        }
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v10 = (id)gLogObj;
          os_log_type_t v11 = type;
          if (os_log_type_enabled(v10, type))
          {
            *(_DWORD *)buf = 136446210;
            os_log_type_t v54 = "nw_context_cancel";
            _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s Calling cancel context while blocks remain on the inline queues", buf, 0xCu);
          }
        }
        else if (v50)
        {
          os_log_type_t v12 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v10 = (id)gLogObj;
          os_log_type_t v13 = type;
          BOOL v14 = os_log_type_enabled(v10, type);
          if (v12)
          {
            if (v14)
            {
              *(_DWORD *)buf = 136446466;
              os_log_type_t v54 = "nw_context_cancel";
              __int16 v55 = 2082;
              __uint64_t v56 = (__uint64_t)v12;
              _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s Calling cancel context while blocks remain on the inline queues, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(v12);
            if (!v9) {
              goto LABEL_33;
            }
            goto LABEL_32;
          }
          if (v14)
          {
            *(_DWORD *)buf = 136446210;
            os_log_type_t v54 = "nw_context_cancel";
            _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s Calling cancel context while blocks remain on the inline queues, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v10 = (id)gLogObj;
          os_log_type_t v15 = type;
          if (os_log_type_enabled(v10, type))
          {
            *(_DWORD *)buf = 136446210;
            os_log_type_t v54 = "nw_context_cancel";
            _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s Calling cancel context while blocks remain on the inline queues, backtrace limit exceeded", buf, 0xCu);
          }
        }
        goto LABEL_30;
      }
      *(unsigned char *)(v3 + 136) |= 0x10u;
      if ((*((unsigned char *)v1 + 136) & 8) == 0
        || (__uint64_t v33 = v51, v34 = v51,
                       atomic_compare_exchange_strong((atomic_ullong *volatile)v1 + 14, &v34, 0),
                       v34 == v33))
      {
LABEL_18:
        nw_context_dealloc((NWConcrete_nw_context *)v1, 1);
        goto LABEL_33;
      }
      BOOL v35 = __nwlog_obj();
      *(_DWORD *)buf = 136446722;
      os_log_type_t v54 = "nw_context_cancel";
      __int16 v55 = 2048;
      __uint64_t v56 = v51;
      __int16 v57 = 2048;
      __uint64_t v36 = v34;
      __uint64_t v58 = v34;
      os_log_type_t v37 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v50 = 0;
      if (__nwlog_fault(v37, &type, &v50))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          char v38 = __nwlog_obj();
          os_log_type_t v39 = type;
          if (os_log_type_enabled(v38, type))
          {
            *(_DWORD *)buf = 136446722;
            os_log_type_t v54 = "nw_context_cancel";
            __int16 v55 = 2048;
            __uint64_t v56 = v51;
            __int16 v57 = 2048;
            __uint64_t v58 = v36;
            _os_log_impl(&dword_1830D4000, v38, v39, "%{public}s Exiting call, expected inline TID to be %llu but got %llu", buf, 0x20u);
          }
        }
        else if (v50)
        {
          uint64_t v45 = (char *)__nw_create_backtrace_string();
          char v38 = __nwlog_obj();
          os_log_type_t v46 = type;
          BOOL v47 = os_log_type_enabled(v38, type);
          if (v45)
          {
            if (v47)
            {
              *(_DWORD *)buf = 136446978;
              os_log_type_t v54 = "nw_context_cancel";
              __int16 v55 = 2048;
              __uint64_t v56 = v51;
              __int16 v57 = 2048;
              __uint64_t v58 = v36;
              __int16 v59 = 2082;
              os_log_type_t v60 = v45;
              _os_log_impl(&dword_1830D4000, v38, v46, "%{public}s Exiting call, expected inline TID to be %llu but got %llu, dumping backtrace:%{public}s", buf, 0x2Au);
            }

            free(v45);
            goto LABEL_105;
          }
          if (v47)
          {
            *(_DWORD *)buf = 136446722;
            os_log_type_t v54 = "nw_context_cancel";
            __int16 v55 = 2048;
            __uint64_t v56 = v51;
            __int16 v57 = 2048;
            __uint64_t v58 = v36;
            _os_log_impl(&dword_1830D4000, v38, v46, "%{public}s Exiting call, expected inline TID to be %llu but got %llu, no backtrace", buf, 0x20u);
          }
        }
        else
        {
          char v38 = __nwlog_obj();
          os_log_type_t v49 = type;
          if (os_log_type_enabled(v38, type))
          {
            *(_DWORD *)buf = 136446722;
            os_log_type_t v54 = "nw_context_cancel";
            __int16 v55 = 2048;
            __uint64_t v56 = v51;
            __int16 v57 = 2048;
            __uint64_t v58 = v36;
            _os_log_impl(&dword_1830D4000, v38, v49, "%{public}s Exiting call, expected inline TID to be %llu but got %llu, backtrace limit exceeded", buf, 0x20u);
          }
        }
      }
LABEL_105:
      if (v37) {
        free(v37);
      }
      goto LABEL_18;
    }
    os_log_type_t v25 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v54 = "nw_context_cancel";
    int v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v50 = 0;
    if (__nwlog_fault(v9, &type, &v50))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v10 = __nwlog_obj();
        os_log_type_t v26 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v54 = "nw_context_cancel";
          _os_log_impl(&dword_1830D4000, v10, v26, "%{public}s called with null globals_context->is_inline", buf, 0xCu);
        }
LABEL_30:

        goto LABEL_31;
      }
      if (!v50)
      {
        os_log_type_t v10 = __nwlog_obj();
        os_log_type_t v41 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v54 = "nw_context_cancel";
          _os_log_impl(&dword_1830D4000, v10, v41, "%{public}s called with null globals_context->is_inline, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_30;
      }
      char v30 = (char *)__nw_create_backtrace_string();
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v31 = type;
      BOOL v32 = os_log_type_enabled(v10, type);
      if (!v30)
      {
        if (v32)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v54 = "nw_context_cancel";
          _os_log_impl(&dword_1830D4000, v10, v31, "%{public}s called with null globals_context->is_inline, no backtrace", buf, 0xCu);
        }
        goto LABEL_30;
      }
      if (v32)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v54 = "nw_context_cancel";
        __int16 v55 = 2082;
        __uint64_t v56 = (__uint64_t)v30;
        _os_log_impl(&dword_1830D4000, v10, v31, "%{public}s called with null globals_context->is_inline, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(v30);
    }
LABEL_31:
    if (v9) {
LABEL_32:
    }
      free(v9);
LABEL_33:

    goto LABEL_34;
  }
  os_log_type_t v16 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v54 = "nw_context_cancel";
  __int16 v17 = (char *)_os_log_send_and_compose_impl();

  LOBYTE(v51) = 16;
  os_log_type_t type = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v17, &v51, &type))
  {
    if (v51 == 17)
    {
      os_log_type_t v18 = __nwlog_obj();
      os_log_type_t v19 = v51;
      if (os_log_type_enabled(v18, (os_log_type_t)v51))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v54 = "nw_context_cancel";
        _os_log_impl(&dword_1830D4000, v18, v19, "%{public}s called with null context", buf, 0xCu);
      }
    }
    else if (type)
    {
      os_log_type_t v27 = (char *)__nw_create_backtrace_string();
      os_log_type_t v18 = __nwlog_obj();
      os_log_type_t v28 = v51;
      BOOL v29 = os_log_type_enabled(v18, (os_log_type_t)v51);
      if (v27)
      {
        if (v29)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v54 = "nw_context_cancel";
          __int16 v55 = 2082;
          __uint64_t v56 = (__uint64_t)v27;
          _os_log_impl(&dword_1830D4000, v18, v28, "%{public}s called with null context, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v27);
        goto LABEL_76;
      }
      if (v29)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v54 = "nw_context_cancel";
        _os_log_impl(&dword_1830D4000, v18, v28, "%{public}s called with null context, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v18 = __nwlog_obj();
      os_log_type_t v40 = v51;
      if (os_log_type_enabled(v18, (os_log_type_t)v51))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v54 = "nw_context_cancel";
        _os_log_impl(&dword_1830D4000, v18, v40, "%{public}s called with null context, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_76:
  if (v17) {
    free(v17);
  }
LABEL_34:
}

void sub_18360D330(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_context_queue_block(void *a1, void *a2)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1;
  id v4 = a2;
  uint64_t v5 = v4;
  if (v3)
  {
    if (v4)
    {
      uint64_t v6 = nw_context_copy_globals_context(v3);

      if ((*(unsigned char *)(v6 + 136) & 8) != 0)
      {
        if ((*(unsigned char *)(v6 + 136) & 0x10) != 0)
        {
          uint64_t v3 = (NWConcrete_nw_context *)v6;
          v5[2](v5);
          goto LABEL_7;
        }
        uint64_t v7 = *(void *)(*(void *)(v6 + 32) + 100);
        id v8 = _Block_copy(v5);
        nw_array_append(v7, v8);

        goto LABEL_6;
      }
      __int16 v17 = __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      __uint64_t v36 = "nw_context_queue_block";
      os_log_type_t v18 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v33 = 0;
      if (__nwlog_fault(v18, &type, &v33))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          os_log_type_t v19 = __nwlog_obj();
          os_log_type_t v20 = type;
          if (os_log_type_enabled(v19, type))
          {
            *(_DWORD *)buf = 136446210;
            __uint64_t v36 = "nw_context_queue_block";
            _os_log_impl(&dword_1830D4000, v19, v20, "%{public}s called with null context->is_inline", buf, 0xCu);
          }
        }
        else if (v33)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          os_log_type_t v19 = __nwlog_obj();
          os_log_type_t v28 = type;
          BOOL v29 = os_log_type_enabled(v19, type);
          if (backtrace_string)
          {
            if (v29)
            {
              *(_DWORD *)buf = 136446466;
              __uint64_t v36 = "nw_context_queue_block";
              __int16 v37 = 2082;
              char v38 = backtrace_string;
              _os_log_impl(&dword_1830D4000, v19, v28, "%{public}s called with null context->is_inline, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(backtrace_string);
            goto LABEL_62;
          }
          if (v29)
          {
            *(_DWORD *)buf = 136446210;
            __uint64_t v36 = "nw_context_queue_block";
            _os_log_impl(&dword_1830D4000, v19, v28, "%{public}s called with null context->is_inline, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          os_log_type_t v19 = __nwlog_obj();
          os_log_type_t v32 = type;
          if (os_log_type_enabled(v19, type))
          {
            *(_DWORD *)buf = 136446210;
            __uint64_t v36 = "nw_context_queue_block";
            _os_log_impl(&dword_1830D4000, v19, v32, "%{public}s called with null context->is_inline, backtrace limit exceeded", buf, 0xCu);
          }
        }
      }
LABEL_62:
      if (v18) {
        free(v18);
      }
LABEL_6:
      uint64_t v3 = (NWConcrete_nw_context *)v6;
      goto LABEL_7;
    }
    os_log_type_t v13 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __uint64_t v36 = "nw_context_queue_block";
    BOOL v14 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v33 = 0;
    if (!__nwlog_fault(v14, &type, &v33)) {
      goto LABEL_57;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v15 = __nwlog_obj();
      os_log_type_t v16 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        __uint64_t v36 = "nw_context_queue_block";
        _os_log_impl(&dword_1830D4000, v15, v16, "%{public}s called with null block", buf, 0xCu);
      }
    }
    else if (v33)
    {
      os_log_type_t v24 = (char *)__nw_create_backtrace_string();
      os_log_type_t v15 = __nwlog_obj();
      os_log_type_t v25 = type;
      BOOL v26 = os_log_type_enabled(v15, type);
      if (v24)
      {
        if (v26)
        {
          *(_DWORD *)buf = 136446466;
          __uint64_t v36 = "nw_context_queue_block";
          __int16 v37 = 2082;
          char v38 = v24;
          _os_log_impl(&dword_1830D4000, v15, v25, "%{public}s called with null block, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v24);
        goto LABEL_57;
      }
      if (v26)
      {
        *(_DWORD *)buf = 136446210;
        __uint64_t v36 = "nw_context_queue_block";
        _os_log_impl(&dword_1830D4000, v15, v25, "%{public}s called with null block, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v15 = __nwlog_obj();
      os_log_type_t v31 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        __uint64_t v36 = "nw_context_queue_block";
        _os_log_impl(&dword_1830D4000, v15, v31, "%{public}s called with null block, backtrace limit exceeded", buf, 0xCu);
      }
    }

LABEL_57:
    if (v14) {
      free(v14);
    }
    goto LABEL_7;
  }
  int v9 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __uint64_t v36 = "nw_context_queue_block";
  os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v33 = 0;
  if (__nwlog_fault(v10, &type, &v33))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        __uint64_t v36 = "nw_context_queue_block";
        _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s called with null context", buf, 0xCu);
      }
    }
    else if (v33)
    {
      BOOL v21 = (char *)__nw_create_backtrace_string();
      os_log_type_t v11 = __nwlog_obj();
      os_log_type_t v22 = type;
      BOOL v23 = os_log_type_enabled(v11, type);
      if (v21)
      {
        if (v23)
        {
          *(_DWORD *)buf = 136446466;
          __uint64_t v36 = "nw_context_queue_block";
          __int16 v37 = 2082;
          char v38 = v21;
          _os_log_impl(&dword_1830D4000, v11, v22, "%{public}s called with null context, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v21);
        goto LABEL_51;
      }
      if (v23)
      {
        *(_DWORD *)buf = 136446210;
        __uint64_t v36 = "nw_context_queue_block";
        _os_log_impl(&dword_1830D4000, v11, v22, "%{public}s called with null context, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v11 = __nwlog_obj();
      os_log_type_t v30 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        __uint64_t v36 = "nw_context_queue_block";
        _os_log_impl(&dword_1830D4000, v11, v30, "%{public}s called with null context, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_51:
  if (v10) {
    free(v10);
  }
  uint64_t v3 = 0;
LABEL_7:
}

void sub_18360DA74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_context_queue_source_block(void *a1, void *a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1;
  id v4 = a2;
  if (v3)
  {
    uint64_t v5 = nw_context_copy_globals_context(v3);

    if ((*(unsigned char *)(v5 + 136) & 8) != 0)
    {
      uint64_t v6 = *(void *)(*(void *)(v5 + 32) + 116);
      uint64_t v7 = _Block_copy(v4);
      nw_array_append(v6, v7);

      goto LABEL_4;
    }
    os_log_type_t v12 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v27 = "nw_context_queue_source_block";
    os_log_type_t v13 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (!__nwlog_fault(v13, &type, &v24)) {
      goto LABEL_39;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v27 = "nw_context_queue_source_block";
        _os_log_impl(&dword_1830D4000, v14, v15, "%{public}s called with null context->is_inline", buf, 0xCu);
      }
    }
    else if (v24)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v14 = __nwlog_obj();
      os_log_type_t v20 = type;
      BOOL v21 = os_log_type_enabled(v14, type);
      if (backtrace_string)
      {
        if (v21)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v27 = "nw_context_queue_source_block";
          __int16 v28 = 2082;
          BOOL v29 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v14, v20, "%{public}s called with null context->is_inline, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_39;
      }
      if (v21)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v27 = "nw_context_queue_source_block";
        _os_log_impl(&dword_1830D4000, v14, v20, "%{public}s called with null context->is_inline, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v14 = __nwlog_obj();
      os_log_type_t v23 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v27 = "nw_context_queue_source_block";
        _os_log_impl(&dword_1830D4000, v14, v23, "%{public}s called with null context->is_inline, backtrace limit exceeded", buf, 0xCu);
      }
    }

LABEL_39:
    if (v13) {
      free(v13);
    }

    goto LABEL_4;
  }
  id v8 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v27 = "nw_context_queue_source_block";
  int v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v24 = 0;
  if (__nwlog_fault(v9, &type, &v24))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v27 = "nw_context_queue_source_block";
        _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null context", buf, 0xCu);
      }
    }
    else if (v24)
    {
      os_log_type_t v16 = (char *)__nw_create_backtrace_string();
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v17 = type;
      BOOL v18 = os_log_type_enabled(v10, type);
      if (v16)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v27 = "nw_context_queue_source_block";
          __int16 v28 = 2082;
          BOOL v29 = v16;
          _os_log_impl(&dword_1830D4000, v10, v17, "%{public}s called with null context, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v16);
        goto LABEL_34;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v27 = "nw_context_queue_source_block";
        _os_log_impl(&dword_1830D4000, v10, v17, "%{public}s called with null context, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v22 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v27 = "nw_context_queue_source_block";
        _os_log_impl(&dword_1830D4000, v10, v22, "%{public}s called with null context, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_34:
  if (v9) {
    free(v9);
  }
LABEL_4:
}

void sub_18360DF6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_context_dequeue_source_block(void *a1, void *a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1;
  id v4 = a2;
  if (v3)
  {
    uint64_t v5 = nw_context_copy_globals_context(v3);

    if ((*(unsigned char *)(v5 + 136) & 8) != 0)
    {
      uint64_t v6 = *(void *)(*(void *)(v5 + 32) + 116);
      uint64_t v7 = _Block_copy(v4);
      nw_array_remove_object(v6, (uint64_t)v7);

      goto LABEL_4;
    }
    os_log_type_t v12 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v27 = "nw_context_dequeue_source_block";
    os_log_type_t v13 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (!__nwlog_fault(v13, &type, &v24)) {
      goto LABEL_39;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v27 = "nw_context_dequeue_source_block";
        _os_log_impl(&dword_1830D4000, v14, v15, "%{public}s called with null context->is_inline", buf, 0xCu);
      }
    }
    else if (v24)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v14 = __nwlog_obj();
      os_log_type_t v20 = type;
      BOOL v21 = os_log_type_enabled(v14, type);
      if (backtrace_string)
      {
        if (v21)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v27 = "nw_context_dequeue_source_block";
          __int16 v28 = 2082;
          BOOL v29 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v14, v20, "%{public}s called with null context->is_inline, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_39;
      }
      if (v21)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v27 = "nw_context_dequeue_source_block";
        _os_log_impl(&dword_1830D4000, v14, v20, "%{public}s called with null context->is_inline, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v14 = __nwlog_obj();
      os_log_type_t v23 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v27 = "nw_context_dequeue_source_block";
        _os_log_impl(&dword_1830D4000, v14, v23, "%{public}s called with null context->is_inline, backtrace limit exceeded", buf, 0xCu);
      }
    }

LABEL_39:
    if (v13) {
      free(v13);
    }

    goto LABEL_4;
  }
  id v8 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v27 = "nw_context_dequeue_source_block";
  int v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v24 = 0;
  if (__nwlog_fault(v9, &type, &v24))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v27 = "nw_context_dequeue_source_block";
        _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null context", buf, 0xCu);
      }
    }
    else if (v24)
    {
      os_log_type_t v16 = (char *)__nw_create_backtrace_string();
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v17 = type;
      BOOL v18 = os_log_type_enabled(v10, type);
      if (v16)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v27 = "nw_context_dequeue_source_block";
          __int16 v28 = 2082;
          BOOL v29 = v16;
          _os_log_impl(&dword_1830D4000, v10, v17, "%{public}s called with null context, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v16);
        goto LABEL_34;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v27 = "nw_context_dequeue_source_block";
        _os_log_impl(&dword_1830D4000, v10, v17, "%{public}s called with null context, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v22 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v27 = "nw_context_dequeue_source_block";
        _os_log_impl(&dword_1830D4000, v10, v22, "%{public}s called with null context, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_34:
  if (v9) {
    free(v9);
  }
LABEL_4:
}

void sub_18360E464(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_context_run_queued_blocks_inline(void *a1)
{
  uint64_t v75 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (!v1)
  {
    __int16 v28 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v68 = "nw_context_run_queued_blocks_inline";
    BOOL v29 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(v65) = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v29, &v65, &type))
    {
      if (v65 == 17)
      {
        uint64_t v30 = __nwlog_obj();
        os_log_type_t v31 = v65;
        if (os_log_type_enabled(v30, (os_log_type_t)v65))
        {
          *(_DWORD *)buf = 136446210;
          char v68 = "nw_context_run_queued_blocks_inline";
          _os_log_impl(&dword_1830D4000, v30, v31, "%{public}s called with null context", buf, 0xCu);
        }
      }
      else if (type)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        uint64_t v30 = __nwlog_obj();
        os_log_type_t v48 = v65;
        BOOL v49 = os_log_type_enabled(v30, (os_log_type_t)v65);
        if (backtrace_string)
        {
          if (v49)
          {
            *(_DWORD *)buf = 136446466;
            char v68 = "nw_context_run_queued_blocks_inline";
            __int16 v69 = 2082;
            __uint64_t v70 = (__uint64_t)backtrace_string;
            _os_log_impl(&dword_1830D4000, v30, v48, "%{public}s called with null context, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_67;
        }
        if (v49)
        {
          *(_DWORD *)buf = 136446210;
          char v68 = "nw_context_run_queued_blocks_inline";
          _os_log_impl(&dword_1830D4000, v30, v48, "%{public}s called with null context, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        uint64_t v30 = __nwlog_obj();
        os_log_type_t v53 = v65;
        if (os_log_type_enabled(v30, (os_log_type_t)v65))
        {
          *(_DWORD *)buf = 136446210;
          char v68 = "nw_context_run_queued_blocks_inline";
          _os_log_impl(&dword_1830D4000, v30, v53, "%{public}s called with null context, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_67:
    if (v29) {
      free(v29);
    }
    return 0;
  }
  uint64_t v2 = v1;
  uint64_t v3 = nw_context_copy_globals_context(v1);

  if ((*(unsigned char *)(v3 + 136) & 8) == 0)
  {
    os_log_type_t v32 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v68 = "nw_context_run_queued_blocks_inline";
    char v33 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(v65) = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v33, &v65, &type))
    {
      if (v65 == 17)
      {
        __uint64_t v34 = __nwlog_obj();
        os_log_type_t v35 = v65;
        if (os_log_type_enabled(v34, (os_log_type_t)v65))
        {
          *(_DWORD *)buf = 136446210;
          char v68 = "nw_context_run_queued_blocks_inline";
          _os_log_impl(&dword_1830D4000, v34, v35, "%{public}s called with null context->is_inline", buf, 0xCu);
        }
      }
      else if (type)
      {
        char v50 = (char *)__nw_create_backtrace_string();
        __uint64_t v34 = __nwlog_obj();
        os_log_type_t v51 = v65;
        BOOL v52 = os_log_type_enabled(v34, (os_log_type_t)v65);
        if (v50)
        {
          if (v52)
          {
            *(_DWORD *)buf = 136446466;
            char v68 = "nw_context_run_queued_blocks_inline";
            __int16 v69 = 2082;
            __uint64_t v70 = (__uint64_t)v50;
            _os_log_impl(&dword_1830D4000, v34, v51, "%{public}s called with null context->is_inline, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v50);
          goto LABEL_72;
        }
        if (v52)
        {
          *(_DWORD *)buf = 136446210;
          char v68 = "nw_context_run_queued_blocks_inline";
          _os_log_impl(&dword_1830D4000, v34, v51, "%{public}s called with null context->is_inline, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __uint64_t v34 = __nwlog_obj();
        os_log_type_t v54 = v65;
        if (os_log_type_enabled(v34, (os_log_type_t)v65))
        {
          *(_DWORD *)buf = 136446210;
          char v68 = "nw_context_run_queued_blocks_inline";
          _os_log_impl(&dword_1830D4000, v34, v54, "%{public}s called with null context->is_inline, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_72:
    if (v33) {
      free(v33);
    }

    return 0;
  }
  __uint64_t v65 = 0;
  pthread_threadid_np(0, &v65);
  if (*(_DWORD *)(v3 + 120) != 4) {
    goto LABEL_4;
  }
  __uint64_t v36 = 0;
  atomic_compare_exchange_strong((atomic_ullong *volatile)(v3 + 112), &v36, v65);
  if (!v36) {
    goto LABEL_4;
  }
  __int16 v37 = __nwlog_obj();
  *(_DWORD *)buf = 136446722;
  char v68 = "nw_context_run_queued_blocks_inline";
  __int16 v69 = 2048;
  __uint64_t v70 = v65;
  __int16 v71 = 2048;
  __uint64_t v72 = v36;
  char v38 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v64 = 0;
  if (__nwlog_fault(v38, &type, &v64))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v39 = __nwlog_obj();
      os_log_type_t v40 = type;
      if (os_log_type_enabled(v39, type))
      {
        *(_DWORD *)buf = 136446722;
        char v68 = "nw_context_run_queued_blocks_inline";
        __int16 v69 = 2048;
        __uint64_t v70 = v65;
        __int16 v71 = 2048;
        __uint64_t v72 = v36;
        _os_log_impl(&dword_1830D4000, v39, v40, "%{public}s Entering call, current TID=%llu, inline TID is already set to %llu", buf, 0x20u);
      }
    }
    else if (v64)
    {
      __int16 v55 = (char *)__nw_create_backtrace_string();
      uint64_t v39 = __nwlog_obj();
      os_log_type_t v56 = type;
      BOOL v57 = os_log_type_enabled(v39, type);
      if (v55)
      {
        if (v57)
        {
          *(_DWORD *)buf = 136446978;
          char v68 = "nw_context_run_queued_blocks_inline";
          __int16 v69 = 2048;
          __uint64_t v70 = v65;
          __int16 v71 = 2048;
          __uint64_t v72 = v36;
          __int16 v73 = 2082;
          os_log_type_t v74 = v55;
          _os_log_impl(&dword_1830D4000, v39, v56, "%{public}s Entering call, current TID=%llu, inline TID is already set to %llu, dumping backtrace:%{public}s", buf, 0x2Au);
        }

        free(v55);
        goto LABEL_95;
      }
      if (v57)
      {
        *(_DWORD *)buf = 136446722;
        char v68 = "nw_context_run_queued_blocks_inline";
        __int16 v69 = 2048;
        __uint64_t v70 = v65;
        __int16 v71 = 2048;
        __uint64_t v72 = v36;
        _os_log_impl(&dword_1830D4000, v39, v56, "%{public}s Entering call, current TID=%llu, inline TID is already set to %llu, no backtrace", buf, 0x20u);
      }
    }
    else
    {
      uint64_t v39 = __nwlog_obj();
      os_log_type_t v61 = type;
      if (os_log_type_enabled(v39, type))
      {
        *(_DWORD *)buf = 136446722;
        char v68 = "nw_context_run_queued_blocks_inline";
        __int16 v69 = 2048;
        __uint64_t v70 = v65;
        __int16 v71 = 2048;
        __uint64_t v72 = v36;
        _os_log_impl(&dword_1830D4000, v39, v61, "%{public}s Entering call, current TID=%llu, inline TID is already set to %llu, backtrace limit exceeded", buf, 0x20u);
      }
    }
  }
LABEL_95:
  if (v38) {
    free(v38);
  }
LABEL_4:
  while (1)
  {
    uint64_t v4 = *(void *)(v3 + 32);
    uint64_t v5 = *(void **)(v4 + 100);
    if (!v5 || v5[3] == v5[2]) {
      break;
    }
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)(v3 + 32);
    id v8 = *(void **)(v7 + 108);
    if (v8)
    {
      objc_storeStrong((id *)(v7 + 100), v8);
      uint64_t v9 = *(void *)(v3 + 32);
      os_log_type_t v10 = *(void **)(v9 + 108);
      *(void *)(v9 + 108) = 0;
    }
    else
    {
      BOOL v11 = nw_array_create();
      uint64_t v12 = *(void *)(v3 + 32);
      os_log_type_t v10 = *(void **)(v12 + 100);
      *(void *)(v12 + 100) = v11;
    }

    nw_array_apply(v6, (uint64_t)&__block_literal_global_1244);
    nw_array_remove_all_objects((uint64_t)v6);
    uint64_t v13 = *(void *)(v3 + 32);
    BOOL v14 = *(void **)(v13 + 108);
    *(void *)(v13 + 108) = v6;
  }
  os_log_type_t v15 = *(void **)(v4 + 116);
  os_log_type_t v16 = v15;
  uint64_t v17 = *(void *)(*(void *)(v3 + 32) + 124);
  if (!v17)
  {
    BOOL v19 = nw_array_create();
    os_log_type_t v20 = (void ***)v19;
    if (v16)
    {
      BOOL v21 = v16;
      if ((void ***)v19 == v16)
      {
LABEL_16:
        uint64_t v22 = *(void *)(v3 + 32);
        BOOL v18 = *(void **)(v22 + 116);
        *(void *)(v22 + 116) = v21;
        goto LABEL_17;
      }
      std::vector<nw_object_wrapper_t>::__assign_with_size[abi:nn180100]<nw_object_wrapper_t*,nw_object_wrapper_t*>(v19 + 16, v16[2], v16[3], v16[3] - v16[2]);
    }
    BOOL v21 = v20;
    goto LABEL_16;
  }
  nw_array_assign(v17, (uint64_t)v16);
  objc_storeStrong((id *)(*(void *)(v3 + 32) + 116), *(id *)(*(void *)(v3 + 32) + 124));
  BOOL v18 = *(void **)(*(void *)(v3 + 32) + 124);
  *(void *)(*(void *)(v3 + 32) + 124) = 0;
LABEL_17:

  nw_array_apply((atomic_uchar *)v16, (uint64_t)&__block_literal_global_15);
  nw_array_remove_all_objects((uint64_t)v16);
  objc_storeStrong((id *)(*(void *)(v3 + 32) + 124), v15);
  if ((*(unsigned char *)(v3 + 136) & 8) != 0)
  {
    __uint64_t v41 = v65;
    __uint64_t v42 = v65;
    atomic_compare_exchange_strong((atomic_ullong *volatile)(v3 + 112), &v42, 0);
    if (v42 != v41)
    {
      os_log_type_t v43 = __nwlog_obj();
      *(_DWORD *)buf = 136446722;
      char v68 = "nw_context_run_queued_blocks_inline";
      __int16 v69 = 2048;
      __uint64_t v70 = v65;
      __int16 v71 = 2048;
      __uint64_t v63 = v42;
      __uint64_t v72 = v42;
      BOOL v44 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v64 = 0;
      if (__nwlog_fault(v44, &type, &v64))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          uint64_t v45 = __nwlog_obj();
          os_log_type_t v46 = type;
          if (os_log_type_enabled(v45, type))
          {
            *(_DWORD *)buf = 136446722;
            char v68 = "nw_context_run_queued_blocks_inline";
            __int16 v69 = 2048;
            __uint64_t v70 = v65;
            __int16 v71 = 2048;
            __uint64_t v72 = v63;
            _os_log_impl(&dword_1830D4000, v45, v46, "%{public}s Exiting call, expected inline TID to be %llu but got %llu", buf, 0x20u);
          }
        }
        else if (v64)
        {
          __uint64_t v58 = (char *)__nw_create_backtrace_string();
          uint64_t v45 = __nwlog_obj();
          os_log_type_t v59 = type;
          BOOL v60 = os_log_type_enabled(v45, type);
          if (v58)
          {
            if (v60)
            {
              *(_DWORD *)buf = 136446978;
              char v68 = "nw_context_run_queued_blocks_inline";
              __int16 v69 = 2048;
              __uint64_t v70 = v65;
              __int16 v71 = 2048;
              __uint64_t v72 = v63;
              __int16 v73 = 2082;
              os_log_type_t v74 = v58;
              _os_log_impl(&dword_1830D4000, v45, v59, "%{public}s Exiting call, expected inline TID to be %llu but got %llu, dumping backtrace:%{public}s", buf, 0x2Au);
            }

            free(v58);
            goto LABEL_100;
          }
          if (v60)
          {
            *(_DWORD *)buf = 136446722;
            char v68 = "nw_context_run_queued_blocks_inline";
            __int16 v69 = 2048;
            __uint64_t v70 = v65;
            __int16 v71 = 2048;
            __uint64_t v72 = v63;
            _os_log_impl(&dword_1830D4000, v45, v59, "%{public}s Exiting call, expected inline TID to be %llu but got %llu, no backtrace", buf, 0x20u);
          }
        }
        else
        {
          uint64_t v45 = __nwlog_obj();
          os_log_type_t v62 = type;
          if (os_log_type_enabled(v45, type))
          {
            *(_DWORD *)buf = 136446722;
            char v68 = "nw_context_run_queued_blocks_inline";
            __int16 v69 = 2048;
            __uint64_t v70 = v65;
            __int16 v71 = 2048;
            __uint64_t v72 = v63;
            _os_log_impl(&dword_1830D4000, v45, v62, "%{public}s Exiting call, expected inline TID to be %llu but got %llu, backtrace limit exceeded", buf, 0x20u);
          }
        }
      }
LABEL_100:
      if (v44) {
        free(v44);
      }
    }
  }
  uint64_t v23 = *(void *)(v3 + 32);
  uint64_t v24 = *(void *)(v23 + 100);
  if (!v24 || *(void *)(v24 + 24) == *(void *)(v24 + 16))
  {
    uint64_t v26 = *(void *)(v23 + 116);
    if (v26) {
      BOOL v25 = *(void *)(v26 + 24) != *(void *)(v26 + 16);
    }
    else {
      BOOL v25 = 0;
    }
  }
  else
  {
    BOOL v25 = 1;
  }

  return v25;
}

void sub_18360F000(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_context_run_queued_blocks_inline_block_invoke_2(int a1, int a2, void *aBlock)
{
  uint64_t v3 = (void (**)(void))_Block_copy(aBlock);
  v3[2]();

  return 1;
}

void sub_18360F064(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_context_run_queued_blocks_inline_block_invoke(int a1, int a2, void *aBlock)
{
  uint64_t v3 = (void (**)(void))_Block_copy(aBlock);
  v3[2]();

  return 1;
}

void sub_18360F0B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __nw_context_set_privacy_level_internal_block_invoke(uint64_t a1)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 80));
  *(_DWORD *)(*(void *)(a1 + 32) + 124) = *(_DWORD *)(a1 + 40);
  *(unsigned char *)(*(void *)(a1 + 32) + 137) = *(unsigned char *)(*(void *)(a1 + 32) + 137) & 0xFE | *(unsigned char *)(a1 + 44);
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(os_unfair_lock_s **)(v2 + 40);
  if (v3)
  {
    os_unfair_lock_lock(v3 + 20);
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 40) + 124) = *(_DWORD *)(a1 + 40);
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 40) + 137) = *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 40)
                                                                            + 137) & 0xFE | *(unsigned char *)(a1 + 44);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(*(void *)(a1 + 32) + 40) + 80));
    uint64_t v2 = *(void *)(a1 + 32);
  }

  os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 80));
}

void nw_context_set_idle_handler(void *a1, void *a2, void *a3)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a1;
  id v6 = a2;
  id v7 = a3;
  if (v5)
  {
    if (((_BYTE)v5[17] & 0x48) == 0x40 && !dispatch_workloop_is_current())
    {
      v22[0] = MEMORY[0x1E4F143A8];
      v22[1] = 3221225472;
      v22[2] = __nw_context_set_idle_handler_block_invoke;
      v22[3] = &unk_1E5248030;
      uint64_t v23 = v5;
      id v24 = v6;
      id v25 = v7;
      nw_queue_context_async(v23, v22);
    }
    else
    {
      objc_storeStrong(v5 + 8, a2);
      id v8 = _Block_copy(v7);
      id v9 = v5[9];
      v5[9] = v8;

      os_log_type_t v10 = (id *)v5[5];
      if (v10)
      {
        objc_storeStrong(v10 + 8, a2);
        BOOL v11 = _Block_copy(v7);
        uint64_t v12 = v5[5];
        uint64_t v13 = (void *)v12[9];
        v12[9] = v11;
      }
    }
    goto LABEL_7;
  }
  BOOL v14 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v29 = "nw_context_set_idle_handler";
  os_log_type_t v15 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v26 = 0;
  if (__nwlog_fault(v15, &type, &v26))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v16 = __nwlog_obj();
      os_log_type_t v17 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v29 = "nw_context_set_idle_handler";
        _os_log_impl(&dword_1830D4000, v16, v17, "%{public}s called with null context", buf, 0xCu);
      }
    }
    else if (v26)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v16 = __nwlog_obj();
      os_log_type_t v19 = type;
      BOOL v20 = os_log_type_enabled(v16, type);
      if (backtrace_string)
      {
        if (v20)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v29 = "nw_context_set_idle_handler";
          __int16 v30 = 2082;
          os_log_type_t v31 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v16, v19, "%{public}s called with null context, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_24;
      }
      if (v20)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v29 = "nw_context_set_idle_handler";
        _os_log_impl(&dword_1830D4000, v16, v19, "%{public}s called with null context, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v16 = __nwlog_obj();
      os_log_type_t v21 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v29 = "nw_context_set_idle_handler";
        _os_log_impl(&dword_1830D4000, v16, v21, "%{public}s called with null context, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_24:
  if (v15) {
    free(v15);
  }
LABEL_7:
}

void sub_18360F524(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, void *a19)
{
  _Unwind_Resume(a1);
}

void __nw_context_set_idle_handler_block_invoke(uint64_t a1)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 80));
  objc_storeStrong((id *)(*(void *)(a1 + 32) + 64), *(id *)(a1 + 40));
  uint64_t v2 = _Block_copy(*(const void **)(a1 + 48));
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void **)(v3 + 72);
  *(void *)(v3 + 72) = v2;

  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = *(os_unfair_lock_s **)(v5 + 40);
  if (v6)
  {
    os_unfair_lock_lock(v6 + 20);
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 32) + 40) + 64), *(id *)(a1 + 40));
    id v7 = _Block_copy(*(const void **)(a1 + 48));
    uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 40);
    id v9 = *(void **)(v8 + 72);
    *(void *)(v8 + 72) = v7;

    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(*(void *)(a1 + 32) + 40) + 80));
    uint64_t v5 = *(void *)(a1 + 32);
  }

  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 80));
}

void nw_context_require_encrypted_name_resolution(void *a1, uint64_t a2, void *a3)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = a3;
  if (!v5)
  {
    os_log_type_t v10 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    id v25 = "nw_context_require_encrypted_name_resolution";
    BOOL v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v23 = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (__nwlog_fault(v11, &v23, &v22))
    {
      if (v23 == OS_LOG_TYPE_FAULT)
      {
        uint64_t v12 = __nwlog_obj();
        os_log_type_t v13 = v23;
        if (os_log_type_enabled(v12, v23))
        {
          *(_DWORD *)buf = 136446210;
          id v25 = "nw_context_require_encrypted_name_resolution";
          _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s called with null context", buf, 0xCu);
        }
      }
      else if (v22)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        uint64_t v12 = __nwlog_obj();
        os_log_type_t v15 = v23;
        BOOL v16 = os_log_type_enabled(v12, v23);
        if (backtrace_string)
        {
          if (v16)
          {
            *(_DWORD *)buf = 136446466;
            id v25 = "nw_context_require_encrypted_name_resolution";
            __int16 v26 = 2082;
            os_log_type_t v27 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v12, v15, "%{public}s called with null context, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_30;
        }
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          id v25 = "nw_context_require_encrypted_name_resolution";
          _os_log_impl(&dword_1830D4000, v12, v15, "%{public}s called with null context, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        uint64_t v12 = __nwlog_obj();
        os_log_type_t v17 = v23;
        if (os_log_type_enabled(v12, v23))
        {
          *(_DWORD *)buf = 136446210;
          id v25 = "nw_context_require_encrypted_name_resolution";
          _os_log_impl(&dword_1830D4000, v12, v17, "%{public}s called with null context, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_30:
    if (v11) {
      free(v11);
    }
    goto LABEL_13;
  }
  char v7 = *((unsigned char *)v5 + 136);
  if ((v7 & 0x48) == 0x40)
  {
    if (!dispatch_workloop_is_current())
    {
      v18[0] = MEMORY[0x1E4F143A8];
      v18[1] = 3221225472;
      v18[2] = __nw_context_require_encrypted_name_resolution_block_invoke;
      v18[3] = &unk_1E523AA40;
      id v19 = v5;
      char v21 = a2;
      id v20 = v6;
      nw_queue_context_async(v19, v18);

      goto LABEL_13;
    }
    char v7 = *((unsigned char *)v5 + 136);
  }
  if (a2) {
    char v8 = 0x80;
  }
  else {
    char v8 = 0;
  }
  *((unsigned char *)v5 + 136) = v8 & 0x80 | v7 & 0x7F;
  objc_storeStrong((id *)v5 + 6, a3);
  if ((*((unsigned char *)v5 + 136) & 4) != 0) {
    nw_context_update_default_required_encrypted_name_resolution(a2, v6);
  }
  uint64_t v9 = *((void *)v5 + 5);
  if (v9)
  {
    *(unsigned char *)(v9 + 136) = *(unsigned char *)(v9 + 136) & 0x7F | v8;
    objc_storeStrong((id *)(*((void *)v5 + 5) + 48), a3);
  }
LABEL_13:
}

void sub_18360F9B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  _Unwind_Resume(a1);
}

void nw_context_update_default_required_encrypted_name_resolution(uint64_t a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v2 = a2;
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  uint64_t v3 = (id)gLogObj;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = "";
    if (!v2) {
      uint64_t v4 = "out";
    }
    int v11 = 136446466;
    uint64_t v12 = "nw_context_update_default_required_encrypted_name_resolution";
    __int16 v13 = 2080;
    BOOL v14 = v4;
    _os_log_impl(&dword_1830D4000, v3, OS_LOG_TYPE_DEFAULT, "%{public}s Requiring default encrypted resolution with%s fallback config", (uint8_t *)&v11, 0x16u);
  }

  if (v2)
  {
    CFDataRef v5 = nw_resolver_config_copy_plist_data_ref(v2);
    CFDataRef v6 = v5;
    if (v5)
    {
      CFDataGetBytePtr(v5);
      CFDataGetLength(v6);
      char v7 = 0;
      goto LABEL_10;
    }
  }
  else
  {
    CFDataRef v6 = 0;
  }
  char v7 = 1;
LABEL_10:
  int v8 = DNSServiceSetResolverDefaults();
  if (v8)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v9 = (id)gLogObj;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      string_for_dns_service_error = nwlog_get_string_for_dns_service_error(v8);
      int v11 = 136446466;
      uint64_t v12 = "nw_context_update_default_required_encrypted_name_resolution";
      __int16 v13 = 2082;
      BOOL v14 = string_for_dns_service_error;
      _os_log_impl(&dword_1830D4000, v9, OS_LOG_TYPE_ERROR, "%{public}s DNSServiceSetResolverDefaults failed: %{public}s", (uint8_t *)&v11, 0x16u);
    }
  }
  if ((v7 & 1) == 0) {
    CFRelease(v6);
  }
}

void sub_18360FBE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __nw_context_require_encrypted_name_resolution_block_invoke(uint64_t a1)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 80));
  *(unsigned char *)(*(void *)(a1 + 32) + 136) = *(unsigned char *)(*(void *)(a1 + 32) + 136) & 0x7F | (*(unsigned char *)(a1 + 48) << 7);
  objc_storeStrong((id *)(*(void *)(a1 + 32) + 48), *(id *)(a1 + 40));
  uint64_t v2 = *(void *)(a1 + 32);
  if ((*(unsigned char *)(v2 + 136) & 4) != 0)
  {
    nw_context_update_default_required_encrypted_name_resolution(*(unsigned __int8 *)(a1 + 48), *(void **)(a1 + 40));
    uint64_t v2 = *(void *)(a1 + 32);
  }
  uint64_t v3 = *(os_unfair_lock_s **)(v2 + 40);
  if (v3)
  {
    os_unfair_lock_lock(v3 + 20);
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 40) + 136) = *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 40)
                                                                            + 136) & 0x7F | (*(unsigned char *)(a1 + 48) << 7);
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 32) + 40) + 48), *(id *)(a1 + 40));
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(*(void *)(a1 + 32) + 40) + 80));
    uint64_t v2 = *(void *)(a1 + 32);
  }

  os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 80));
}

id nw_context_copy_fallback_resolver_config(void *a1)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (!v1)
  {
    int v8 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    id v19 = "nw_context_copy_fallback_resolver_config";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v16 = 0;
    if (__nwlog_fault(v9, &type, &v16))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v10 = __nwlog_obj();
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          id v19 = "nw_context_copy_fallback_resolver_config";
          _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null context", buf, 0xCu);
        }
      }
      else if (v16)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v10 = __nwlog_obj();
        os_log_type_t v13 = type;
        BOOL v14 = os_log_type_enabled(v10, type);
        if (backtrace_string)
        {
          if (v14)
          {
            *(_DWORD *)buf = 136446466;
            id v19 = "nw_context_copy_fallback_resolver_config";
            __int16 v20 = 2082;
            char v21 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null context, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_30;
        }
        if (v14)
        {
          *(_DWORD *)buf = 136446210;
          id v19 = "nw_context_copy_fallback_resolver_config";
          _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null context, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        os_log_type_t v10 = __nwlog_obj();
        os_log_type_t v15 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          id v19 = "nw_context_copy_fallback_resolver_config";
          _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null context, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_30:
    if (v9) {
      free(v9);
    }
    id v5 = 0;
    goto LABEL_13;
  }
  char v3 = v1[136];
  if ((v3 & 0x48) != 0x40) {
    goto LABEL_5;
  }
  if (dispatch_workloop_is_current())
  {
    char v3 = v2[136];
LABEL_5:
    if (v3 < 0)
    {
      id v5 = *((id *)v2 + 6);
    }
    else
    {
      BOOL v4 = nw_context_copy_globals_context((NWConcrete_nw_context *)v2);
      id v5 = *(id *)(v4 + 48);
    }
    goto LABEL_13;
  }
  os_unfair_lock_lock((os_unfair_lock_t)v2 + 20);
  id v5 = *((id *)v2 + 6);
  if (!v5)
  {
    if ((char)v2[136] < 0)
    {
      id v5 = 0;
    }
    else
    {
      BOOL v6 = nw_context_copy_globals_context((NWConcrete_nw_context *)v2);
      id v5 = *(id *)(v6 + 48);
    }
  }
  os_unfair_lock_unlock((os_unfair_lock_t)v2 + 20);
LABEL_13:

  return v5;
}

void sub_183610008(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_context_add_proxy(void *a1, void *a2)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  char v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (!v3)
  {
    BOOL v14 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __uint64_t v34 = "nw_context_add_proxy";
    os_log_type_t v15 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v32 = OS_LOG_TYPE_ERROR;
    char v31 = 0;
    if (!__nwlog_fault(v15, &v32, &v31)) {
      goto LABEL_46;
    }
    if (v32 == OS_LOG_TYPE_FAULT)
    {
      char v16 = __nwlog_obj();
      os_log_type_t v17 = v32;
      if (os_log_type_enabled(v16, v32))
      {
        *(_DWORD *)buf = 136446210;
        __uint64_t v34 = "nw_context_add_proxy";
        _os_log_impl(&dword_1830D4000, v16, v17, "%{public}s called with null context", buf, 0xCu);
      }
    }
    else if (v31)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      char v16 = __nwlog_obj();
      os_log_type_t v21 = v32;
      BOOL v22 = os_log_type_enabled(v16, v32);
      if (backtrace_string)
      {
        if (v22)
        {
          *(_DWORD *)buf = 136446466;
          __uint64_t v34 = "nw_context_add_proxy";
          __int16 v35 = 2082;
          __uint64_t v36 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v16, v21, "%{public}s called with null context, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_46:
        if (!v15) {
          goto LABEL_12;
        }
LABEL_47:
        free(v15);
        goto LABEL_12;
      }
      if (v22)
      {
        *(_DWORD *)buf = 136446210;
        __uint64_t v34 = "nw_context_add_proxy";
        _os_log_impl(&dword_1830D4000, v16, v21, "%{public}s called with null context, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      char v16 = __nwlog_obj();
      os_log_type_t v26 = v32;
      if (os_log_type_enabled(v16, v32))
      {
        *(_DWORD *)buf = 136446210;
        __uint64_t v34 = "nw_context_add_proxy";
        _os_log_impl(&dword_1830D4000, v16, v26, "%{public}s called with null context, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_45:

    goto LABEL_46;
  }
  if (v4)
  {
    if ((v3[17] & 0x48) == 0x40 && !dispatch_workloop_is_current())
    {
      v28[0] = MEMORY[0x1E4F143A8];
      v28[1] = 3221225472;
      v28[2] = __nw_context_add_proxy_block_invoke;
      v28[3] = &unk_1E524B9A0;
      BOOL v29 = v3;
      id v30 = v5;
      nw_queue_context_async(v29, v28);
    }
    else
    {
      uint64_t v6 = v3[7];
      if (!v6)
      {
        BOOL v7 = nw_array_create();
        int v8 = (void *)v3[7];
        v3[7] = v7;

        uint64_t v6 = v3[7];
      }
      nw_array_append(v6, v5);
      uint64_t v9 = v3[5];
      if (v9)
      {
        uint64_t v10 = *(void *)(v9 + 56);
        if (!v10)
        {
          BOOL v11 = nw_array_create();
          uint64_t v12 = v3[5];
          os_log_type_t v13 = *(void **)(v12 + 56);
          *(void *)(v12 + 56) = v11;

          uint64_t v10 = *(void *)(v3[5] + 56);
        }
        nw_array_append(v10, v5);
      }
    }
    goto LABEL_12;
  }
  BOOL v18 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __uint64_t v34 = "nw_context_add_proxy";
  os_log_type_t v15 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t v32 = OS_LOG_TYPE_ERROR;
  char v31 = 0;
  if (!__nwlog_fault(v15, &v32, &v31)) {
    goto LABEL_46;
  }
  if (v32 == OS_LOG_TYPE_FAULT)
  {
    char v16 = __nwlog_obj();
    os_log_type_t v19 = v32;
    if (os_log_type_enabled(v16, v32))
    {
      *(_DWORD *)buf = 136446210;
      __uint64_t v34 = "nw_context_add_proxy";
      _os_log_impl(&dword_1830D4000, v16, v19, "%{public}s called with null proxy_config", buf, 0xCu);
    }
    goto LABEL_45;
  }
  if (!v31)
  {
    char v16 = __nwlog_obj();
    os_log_type_t v27 = v32;
    if (os_log_type_enabled(v16, v32))
    {
      *(_DWORD *)buf = 136446210;
      __uint64_t v34 = "nw_context_add_proxy";
      _os_log_impl(&dword_1830D4000, v16, v27, "%{public}s called with null proxy_config, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_45;
  }
  os_log_type_t v23 = (char *)__nw_create_backtrace_string();
  char v16 = __nwlog_obj();
  os_log_type_t v24 = v32;
  BOOL v25 = os_log_type_enabled(v16, v32);
  if (!v23)
  {
    if (v25)
    {
      *(_DWORD *)buf = 136446210;
      __uint64_t v34 = "nw_context_add_proxy";
      _os_log_impl(&dword_1830D4000, v16, v24, "%{public}s called with null proxy_config, no backtrace", buf, 0xCu);
    }
    goto LABEL_45;
  }
  if (v25)
  {
    *(_DWORD *)buf = 136446466;
    __uint64_t v34 = "nw_context_add_proxy";
    __int16 v35 = 2082;
    __uint64_t v36 = v23;
    _os_log_impl(&dword_1830D4000, v16, v24, "%{public}s called with null proxy_config, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v23);
  if (v15) {
    goto LABEL_47;
  }
LABEL_12:
}

void sub_1836105C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  _Unwind_Resume(a1);
}

void __nw_context_add_proxy_block_invoke(uint64_t a1)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 80));
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 56);
  if (!v2)
  {
    BOOL v3 = nw_array_create();
    uint64_t v4 = *(void *)(a1 + 32);
    id v5 = *(void **)(v4 + 56);
    *(void *)(v4 + 56) = v3;

    uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 56);
  }
  nw_array_append(v2, *(void **)(a1 + 40));
  uint64_t v6 = *(void *)(a1 + 32);
  BOOL v7 = *(os_unfair_lock_s **)(v6 + 40);
  if (v7)
  {
    os_unfair_lock_lock(v7 + 20);
    uint64_t v8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 40) + 56);
    if (!v8)
    {
      BOOL v9 = nw_array_create();
      uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 40);
      BOOL v11 = *(void **)(v10 + 56);
      *(void *)(v10 + 56) = v9;

      uint64_t v8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 40) + 56);
    }
    nw_array_append(v8, *(void **)(a1 + 40));
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(*(void *)(a1 + 32) + 40) + 80));
    uint64_t v6 = *(void *)(a1 + 32);
  }

  os_unfair_lock_unlock((os_unfair_lock_t)(v6 + 80));
}

void __nw_context_clear_proxies_block_invoke(uint64_t a1)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 80));
  uint64_t v2 = *(void *)(a1 + 32);
  BOOL v3 = *(void **)(v2 + 56);
  *(void *)(v2 + 56) = 0;

  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(os_unfair_lock_s **)(v4 + 40);
  if (v5)
  {
    os_unfair_lock_lock(v5 + 20);
    uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 40);
    BOOL v7 = *(void **)(v6 + 56);
    *(void *)(v6 + 56) = 0;

    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(*(void *)(a1 + 32) + 40) + 80));
    uint64_t v4 = *(void *)(a1 + 32);
  }

  os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 80));
}

void nw_context_enumerate_proxy_configs(void *a1, void *a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (!v3)
  {
    BOOL v7 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v26 = "nw_context_enumerate_proxy_configs";
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (!__nwlog_fault(v8, &type, &v23)) {
      goto LABEL_38;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v26 = "nw_context_enumerate_proxy_configs";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null context", buf, 0xCu);
      }
    }
    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v9 = __nwlog_obj();
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v26 = "nw_context_enumerate_proxy_configs";
          __int16 v27 = 2082;
          uint64_t v28 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null context, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v8) {
          goto LABEL_4;
        }
LABEL_39:
        free(v8);
        goto LABEL_4;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v26 = "nw_context_enumerate_proxy_configs";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null context, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v9 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v26 = "nw_context_enumerate_proxy_configs";
        _os_log_impl(&dword_1830D4000, v9, v19, "%{public}s called with null context, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_37:

    goto LABEL_38;
  }
  if (v4)
  {
    uint64_t v6 = (atomic_uchar *)nw_context_copy_proxy_configs(v3);
    v21[0] = MEMORY[0x1E4F143A8];
    v21[1] = 3221225472;
    v21[2] = __nw_context_enumerate_proxy_configs_block_invoke;
    v21[3] = &unk_1E524AE90;
    id v22 = v5;
    nw_array_apply(v6, (uint64_t)v21);

    goto LABEL_4;
  }
  BOOL v11 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v26 = "nw_context_enumerate_proxy_configs";
  uint64_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v23 = 0;
  if (!__nwlog_fault(v8, &type, &v23)) {
    goto LABEL_38;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    BOOL v9 = __nwlog_obj();
    os_log_type_t v12 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v26 = "nw_context_enumerate_proxy_configs";
      _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null enumerator", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (!v23)
  {
    BOOL v9 = __nwlog_obj();
    os_log_type_t v20 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v26 = "nw_context_enumerate_proxy_configs";
      _os_log_impl(&dword_1830D4000, v9, v20, "%{public}s called with null enumerator, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_37;
  }
  char v16 = (char *)__nw_create_backtrace_string();
  BOOL v9 = __nwlog_obj();
  os_log_type_t v17 = type;
  BOOL v18 = os_log_type_enabled(v9, type);
  if (!v16)
  {
    if (v18)
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v26 = "nw_context_enumerate_proxy_configs";
      _os_log_impl(&dword_1830D4000, v9, v17, "%{public}s called with null enumerator, no backtrace", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (v18)
  {
    *(_DWORD *)buf = 136446466;
    os_log_type_t v26 = "nw_context_enumerate_proxy_configs";
    __int16 v27 = 2082;
    uint64_t v28 = v16;
    _os_log_impl(&dword_1830D4000, v9, v17, "%{public}s called with null enumerator, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v16);
  if (v8) {
    goto LABEL_39;
  }
LABEL_4:
}

void sub_183610C68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_context_enumerate_proxy_configs_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void nw_context_set_isolate_protocol_stack(void *a1, char a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = v3;
  if (!v3)
  {
    uint64_t v8 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v19 = "nw_context_set_isolate_protocol_stack";
    BOOL v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v16 = 0;
    if (__nwlog_fault(v9, &type, &v16))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v10 = __nwlog_obj();
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v19 = "nw_context_set_isolate_protocol_stack";
          _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null context", buf, 0xCu);
        }
      }
      else if (v16)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v10 = __nwlog_obj();
        os_log_type_t v13 = type;
        BOOL v14 = os_log_type_enabled(v10, type);
        if (backtrace_string)
        {
          if (v14)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v19 = "nw_context_set_isolate_protocol_stack";
            __int16 v20 = 2082;
            os_log_type_t v21 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null context, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_23;
        }
        if (v14)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v19 = "nw_context_set_isolate_protocol_stack";
          _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null context, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        os_log_type_t v10 = __nwlog_obj();
        os_log_type_t v15 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v19 = "nw_context_set_isolate_protocol_stack";
          _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null context, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_23:
    if (v9) {
      free(v9);
    }
    goto LABEL_6;
  }
  char v5 = v3[136];
  if ((v5 & 0x40) == 0)
  {
LABEL_5:
    v4[136] = v5 & 0xFE | a2;
LABEL_6:

    return;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  uint64_t v6 = (id)gLogObj;
  os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446210;
  os_log_type_t v19 = "nw_context_set_isolate_protocol_stack";
  BOOL v7 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v7))
  {
    free(v7);
    char v5 = v4[136];
    goto LABEL_5;
  }
  __break(1u);
}

void nw_context_set_scheduling_mode(void *a1, int a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = v3;
  if (!v3)
  {
    BOOL v7 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v18 = "nw_context_set_scheduling_mode";
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v15 = 0;
    if (__nwlog_fault(v8, &type, &v15))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        BOOL v9 = __nwlog_obj();
        os_log_type_t v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v18 = "nw_context_set_scheduling_mode";
          _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null context", buf, 0xCu);
        }
      }
      else if (v15)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        BOOL v9 = __nwlog_obj();
        os_log_type_t v12 = type;
        BOOL v13 = os_log_type_enabled(v9, type);
        if (backtrace_string)
        {
          if (v13)
          {
            *(_DWORD *)buf = 136446466;
            BOOL v18 = "nw_context_set_scheduling_mode";
            __int16 v19 = 2082;
            __int16 v20 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null context, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_23;
        }
        if (v13)
        {
          *(_DWORD *)buf = 136446210;
          BOOL v18 = "nw_context_set_scheduling_mode";
          _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null context, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        BOOL v9 = __nwlog_obj();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v18 = "nw_context_set_scheduling_mode";
          _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null context, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_23:
    if (v8) {
      free(v8);
    }
    goto LABEL_6;
  }
  if ((v3[34] & 0x40) == 0)
  {
LABEL_5:
    v4[30] = a2;
LABEL_6:

    return;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  char v5 = (id)gLogObj;
  os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446210;
  BOOL v18 = "nw_context_set_scheduling_mode";
  uint64_t v6 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v6))
  {
    free(v6);
    goto LABEL_5;
  }
  __break(1u);
}

void nw_context_set_protocol_cache_limits(void *a1, int a2, int a3, int a4)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  BOOL v7 = a1;
  uint64_t v8 = v7;
  if (!v7)
  {
    os_log_type_t v11 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v22 = "nw_context_set_protocol_cache_limits";
    os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (__nwlog_fault(v12, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        BOOL v13 = __nwlog_obj();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v22 = "nw_context_set_protocol_cache_limits";
          _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s called with null context", buf, 0xCu);
        }
      }
      else if (v19)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        BOOL v13 = __nwlog_obj();
        os_log_type_t v16 = type;
        BOOL v17 = os_log_type_enabled(v13, type);
        if (backtrace_string)
        {
          if (v17)
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v22 = "nw_context_set_protocol_cache_limits";
            __int16 v23 = 2082;
            os_log_type_t v24 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v13, v16, "%{public}s called with null context, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_23;
        }
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v22 = "nw_context_set_protocol_cache_limits";
          _os_log_impl(&dword_1830D4000, v13, v16, "%{public}s called with null context, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        BOOL v13 = __nwlog_obj();
        os_log_type_t v18 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v22 = "nw_context_set_protocol_cache_limits";
          _os_log_impl(&dword_1830D4000, v13, v18, "%{public}s called with null context, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_23:
    if (v12) {
      free(v12);
    }
    goto LABEL_6;
  }
  if ((v7[34] & 0x40) == 0)
  {
LABEL_5:
    v8[21] = a2;
    v8[22] = a3;
    v8[23] = a4;
LABEL_6:

    return;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  BOOL v9 = (id)gLogObj;
  os_log_type_enabled(v9, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446210;
  uint64_t v22 = "nw_context_set_protocol_cache_limits";
  os_log_type_t v10 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v10))
  {
    free(v10);
    goto LABEL_5;
  }
  __break(1u);
}

uint64_t nw_context_get_scheduling_mode(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = v1[30];
    goto LABEL_3;
  }
  char v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_context_get_scheduling_mode";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_context_get_scheduling_mode";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null context", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_context_get_scheduling_mode";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null context, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_context_get_scheduling_mode";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null context, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_context_get_scheduling_mode";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null context, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_context_get_isolate_protocol_stack(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = *((unsigned char *)v1 + 136) & 1;
    goto LABEL_3;
  }
  char v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_context_get_isolate_protocol_stack";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_context_get_isolate_protocol_stack";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null context", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_context_get_isolate_protocol_stack";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null context, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_context_get_isolate_protocol_stack";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null context, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_context_get_isolate_protocol_stack";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null context, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

BOOL nw_context_get_sensitive_redacted(void *a1)
{
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1 && (int v3 = *((_DWORD *)v1 + 31), (v3 - 2) >= 2))
  {
    BOOL v4 = v3 != 1;
  }
  else
  {
    if (nwlog_get_sensitive_redacted::onceToken != -1) {
      dispatch_once(&nwlog_get_sensitive_redacted::onceToken, &__block_literal_global_75);
    }
    BOOL v4 = nwlog_get_sensitive_redacted::sensitiveRedacted != 0;
  }

  return v4;
}

void nw_context_set_tracker_lookup_callback(void *a1, void *a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  int v3 = a1;
  id v4 = a2;
  char v5 = v4;
  if (v3)
  {
    uint64_t v6 = _Block_copy(v4);
    BOOL v7 = (void *)v3[16];
    v3[16] = v6;

    if (v3[5])
    {
      os_log_type_t v8 = _Block_copy(v5);
      uint64_t v9 = v3[5];
      os_log_type_t v10 = *(void **)(v9 + 128);
      *(void *)(v9 + 128) = v8;
    }
    goto LABEL_4;
  }
  BOOL v11 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v22 = "nw_context_set_tracker_lookup_callback";
  os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v19 = 0;
  if (__nwlog_fault(v12, &type, &v19))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v22 = "nw_context_set_tracker_lookup_callback";
        _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s called with null context", buf, 0xCu);
      }
    }
    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      char v13 = __nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v22 = "nw_context_set_tracker_lookup_callback";
          __int16 v23 = 2082;
          os_log_type_t v24 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v13, v16, "%{public}s called with null context, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_21;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v22 = "nw_context_set_tracker_lookup_callback";
        _os_log_impl(&dword_1830D4000, v13, v16, "%{public}s called with null context, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      char v13 = __nwlog_obj();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v22 = "nw_context_set_tracker_lookup_callback";
        _os_log_impl(&dword_1830D4000, v13, v18, "%{public}s called with null context, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_21:
  if (v12) {
    free(v12);
  }
LABEL_4:
}

uint64_t nw_context_get_cache_count(void *a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = v1;
    if (((_BYTE)v1[17] & 8) == 0) {
      dispatch_assert_queue_V2(v1[1]);
    }
    BOOL v3 = nw_context_copy_cache_context(v2);

    uint64_t v4 = *(unsigned int *)(*(void *)(v3 + 24) + 68);
    return v4;
  }
  uint64_t v6 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v17 = "nw_context_get_cache_count";
  BOOL v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v17 = "nw_context_get_cache_count";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null context", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v17 = "nw_context_get_cache_count";
          __int16 v18 = 2082;
          char v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null context, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v17 = "nw_context_get_cache_count";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null context, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v17 = "nw_context_get_cache_count";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null context, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_22:
  if (v7) {
    free(v7);
  }
  return 0;
}

void sub_1836121CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_context_set_association_dormant_delay(void *a1, uint64_t a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  uint64_t v4 = v3;
  if (!v3)
  {
    uint64_t v6 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v23 = "nw_context_set_association_dormant_delay";
    BOOL v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (!__nwlog_fault(v7, &type, &v20)) {
      goto LABEL_38;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v23 = "nw_context_set_association_dormant_delay";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null context", buf, 0xCu);
      }
    }
    else if (v20)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      BOOL v14 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v23 = "nw_context_set_association_dormant_delay";
          __int16 v24 = 2082;
          uint64_t v25 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null context, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v7) {
          goto LABEL_4;
        }
LABEL_39:
        free(v7);
        goto LABEL_4;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v23 = "nw_context_set_association_dormant_delay";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null context, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v23 = "nw_context_set_association_dormant_delay";
        _os_log_impl(&dword_1830D4000, v8, v18, "%{public}s called with null context, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_37:

    goto LABEL_38;
  }
  uint64_t v5 = *((void *)v3 + 5);
  if (v5)
  {
    *(void *)(v5 + 96) = a2;
    goto LABEL_4;
  }
  os_log_type_t v10 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v23 = "nw_context_set_association_dormant_delay";
  BOOL v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v20 = 0;
  if (!__nwlog_fault(v7, &type, &v20)) {
    goto LABEL_38;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    os_log_type_t v8 = __nwlog_obj();
    os_log_type_t v11 = type;
    if (os_log_type_enabled(v8, type))
    {
      *(_DWORD *)buf = 136446210;
      __int16 v23 = "nw_context_set_association_dormant_delay";
      _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null context->isolated_context", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (!v20)
  {
    os_log_type_t v8 = __nwlog_obj();
    os_log_type_t v19 = type;
    if (os_log_type_enabled(v8, type))
    {
      *(_DWORD *)buf = 136446210;
      __int16 v23 = "nw_context_set_association_dormant_delay";
      _os_log_impl(&dword_1830D4000, v8, v19, "%{public}s called with null context->isolated_context, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_37;
  }
  char v15 = (char *)__nw_create_backtrace_string();
  os_log_type_t v8 = __nwlog_obj();
  os_log_type_t v16 = type;
  BOOL v17 = os_log_type_enabled(v8, type);
  if (!v15)
  {
    if (v17)
    {
      *(_DWORD *)buf = 136446210;
      __int16 v23 = "nw_context_set_association_dormant_delay";
      _os_log_impl(&dword_1830D4000, v8, v16, "%{public}s called with null context->isolated_context, no backtrace", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (v17)
  {
    *(_DWORD *)buf = 136446466;
    __int16 v23 = "nw_context_set_association_dormant_delay";
    __int16 v24 = 2082;
    uint64_t v25 = v15;
    _os_log_impl(&dword_1830D4000, v8, v16, "%{public}s called with null context->isolated_context, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v15);
  if (v7) {
    goto LABEL_39;
  }
LABEL_4:
}

uint64_t nw_context_get_context_purge_delay(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = *((void *)v1 + 13);
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_context_get_context_purge_delay";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_context_get_context_purge_delay";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null context", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_context_get_context_purge_delay";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null context, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_context_get_context_purge_delay";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null context, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_context_get_context_purge_delay";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null context, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

void nw_context_set_context_purge_delay(void *a1, uint64_t a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  uint64_t v4 = v3;
  if (!v3)
  {
    uint64_t v6 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v23 = "nw_context_set_context_purge_delay";
    BOOL v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (!__nwlog_fault(v7, &type, &v20)) {
      goto LABEL_38;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v23 = "nw_context_set_context_purge_delay";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null context", buf, 0xCu);
      }
    }
    else if (v20)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      BOOL v14 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v23 = "nw_context_set_context_purge_delay";
          __int16 v24 = 2082;
          uint64_t v25 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null context, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v7) {
          goto LABEL_4;
        }
LABEL_39:
        free(v7);
        goto LABEL_4;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v23 = "nw_context_set_context_purge_delay";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null context, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v23 = "nw_context_set_context_purge_delay";
        _os_log_impl(&dword_1830D4000, v8, v18, "%{public}s called with null context, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_37:

    goto LABEL_38;
  }
  uint64_t v5 = *((void *)v3 + 5);
  if (v5)
  {
    *(void *)(v5 + 104) = a2;
    goto LABEL_4;
  }
  os_log_type_t v10 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v23 = "nw_context_set_context_purge_delay";
  BOOL v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v20 = 0;
  if (!__nwlog_fault(v7, &type, &v20)) {
    goto LABEL_38;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    os_log_type_t v8 = __nwlog_obj();
    os_log_type_t v11 = type;
    if (os_log_type_enabled(v8, type))
    {
      *(_DWORD *)buf = 136446210;
      __int16 v23 = "nw_context_set_context_purge_delay";
      _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null context->isolated_context", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (!v20)
  {
    os_log_type_t v8 = __nwlog_obj();
    os_log_type_t v19 = type;
    if (os_log_type_enabled(v8, type))
    {
      *(_DWORD *)buf = 136446210;
      __int16 v23 = "nw_context_set_context_purge_delay";
      _os_log_impl(&dword_1830D4000, v8, v19, "%{public}s called with null context->isolated_context, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_37;
  }
  char v15 = (char *)__nw_create_backtrace_string();
  os_log_type_t v8 = __nwlog_obj();
  os_log_type_t v16 = type;
  BOOL v17 = os_log_type_enabled(v8, type);
  if (!v15)
  {
    if (v17)
    {
      *(_DWORD *)buf = 136446210;
      __int16 v23 = "nw_context_set_context_purge_delay";
      _os_log_impl(&dword_1830D4000, v8, v16, "%{public}s called with null context->isolated_context, no backtrace", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (v17)
  {
    *(_DWORD *)buf = 136446466;
    __int16 v23 = "nw_context_set_context_purge_delay";
    __int16 v24 = 2082;
    uint64_t v25 = v15;
    _os_log_impl(&dword_1830D4000, v8, v16, "%{public}s called with null context->isolated_context, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v15);
  if (v7) {
    goto LABEL_39;
  }
LABEL_4:
}

uint64_t nw_context_1024k_buffer_manager(void *a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = nw_context_copy_globals_context(v1);

    uint64_t v4 = *(void *)(*(void *)(v3 + 32) + 132);
    if (!v4)
    {
      *(void *)(*(void *)(v3 + 32) + 132) = nw_mem_buffer_manager_initialize(*(NSObject **)(v3 + 8), aNwcontextbuffe_5, dword_1E8F652C8, (unsigned __int16)word_1E8F652CC);
      uint64_t v4 = *(void *)(*(void *)(v3 + 32) + 132);
    }
    goto LABEL_4;
  }
  uint64_t v6 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v17 = "nw_context_1024k_buffer_manager";
  BOOL v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v17 = "nw_context_1024k_buffer_manager";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null context", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v17 = "nw_context_1024k_buffer_manager";
          __int16 v18 = 2082;
          os_log_type_t v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null context, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_21;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v17 = "nw_context_1024k_buffer_manager";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null context, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v17 = "nw_context_1024k_buffer_manager";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null context, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_21:
  if (v7) {
    free(v7);
  }
  uint64_t v3 = 0;
  uint64_t v4 = 0;
LABEL_4:

  return v4;
}

void sub_18361309C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_context_1024k_buffer_length()
{
  return dword_1E8F652C8;
}

uint64_t nw_context_512k_buffer_length()
{
  return dword_1E8F65280;
}

void nw_context_set_input_byte_cap(void *a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  id v7 = a1;
  id v8 = a3;
  id v9 = a4;
  os_log_type_t v10 = v9;
  if (!v7)
  {
    os_log_type_t v11 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v38 = "nw_context_set_input_byte_cap";
    BOOL v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v36 = OS_LOG_TYPE_ERROR;
    char v35 = 0;
    if (!__nwlog_fault(v12, &v36, &v35)) {
      goto LABEL_55;
    }
    if (v36 == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v13 = __nwlog_obj();
      os_log_type_t v14 = v36;
      if (os_log_type_enabled(v13, v36))
      {
        *(_DWORD *)buf = 136446210;
        char v38 = "nw_context_set_input_byte_cap";
        _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s called with null requested_context", buf, 0xCu);
      }
    }
    else if (v35)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v13 = __nwlog_obj();
      os_log_type_t v20 = v36;
      BOOL v21 = os_log_type_enabled(v13, v36);
      if (backtrace_string)
      {
        if (v21)
        {
          *(_DWORD *)buf = 136446466;
          char v38 = "nw_context_set_input_byte_cap";
          __int16 v39 = 2082;
          os_log_type_t v40 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v13, v20, "%{public}s called with null requested_context, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_55:
        if (!v12) {
          goto LABEL_5;
        }
LABEL_56:
        free(v12);
        goto LABEL_5;
      }
      if (v21)
      {
        *(_DWORD *)buf = 136446210;
        char v38 = "nw_context_set_input_byte_cap";
        _os_log_impl(&dword_1830D4000, v13, v20, "%{public}s called with null requested_context, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v13 = __nwlog_obj();
      os_log_type_t v27 = v36;
      if (os_log_type_enabled(v13, v36))
      {
        *(_DWORD *)buf = 136446210;
        char v38 = "nw_context_set_input_byte_cap";
        _os_log_impl(&dword_1830D4000, v13, v27, "%{public}s called with null requested_context, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_54:

    goto LABEL_55;
  }
  if (!v8)
  {
    char v15 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v38 = "nw_context_set_input_byte_cap";
    BOOL v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v36 = OS_LOG_TYPE_ERROR;
    char v35 = 0;
    if (!__nwlog_fault(v12, &v36, &v35)) {
      goto LABEL_55;
    }
    if (v36 == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v13 = __nwlog_obj();
      os_log_type_t v16 = v36;
      if (os_log_type_enabled(v13, v36))
      {
        *(_DWORD *)buf = 136446210;
        char v38 = "nw_context_set_input_byte_cap";
        _os_log_impl(&dword_1830D4000, v13, v16, "%{public}s called with null queue", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!v35)
    {
      os_log_type_t v13 = __nwlog_obj();
      os_log_type_t v28 = v36;
      if (os_log_type_enabled(v13, v36))
      {
        *(_DWORD *)buf = 136446210;
        char v38 = "nw_context_set_input_byte_cap";
        _os_log_impl(&dword_1830D4000, v13, v28, "%{public}s called with null queue, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    uint64_t v22 = (char *)__nw_create_backtrace_string();
    os_log_type_t v13 = __nwlog_obj();
    os_log_type_t v23 = v36;
    BOOL v24 = os_log_type_enabled(v13, v36);
    if (!v22)
    {
      if (v24)
      {
        *(_DWORD *)buf = 136446210;
        char v38 = "nw_context_set_input_byte_cap";
        _os_log_impl(&dword_1830D4000, v13, v23, "%{public}s called with null queue, no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v24)
    {
      *(_DWORD *)buf = 136446466;
      char v38 = "nw_context_set_input_byte_cap";
      __int16 v39 = 2082;
      os_log_type_t v40 = v22;
      _os_log_impl(&dword_1830D4000, v13, v23, "%{public}s called with null queue, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_35;
  }
  if (!v9)
  {
    BOOL v17 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v38 = "nw_context_set_input_byte_cap";
    BOOL v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v36 = OS_LOG_TYPE_ERROR;
    char v35 = 0;
    if (!__nwlog_fault(v12, &v36, &v35)) {
      goto LABEL_55;
    }
    if (v36 == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v13 = __nwlog_obj();
      os_log_type_t v18 = v36;
      if (os_log_type_enabled(v13, v36))
      {
        *(_DWORD *)buf = 136446210;
        char v38 = "nw_context_set_input_byte_cap";
        _os_log_impl(&dword_1830D4000, v13, v18, "%{public}s called with null cap_exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!v35)
    {
      os_log_type_t v13 = __nwlog_obj();
      os_log_type_t v29 = v36;
      if (os_log_type_enabled(v13, v36))
      {
        *(_DWORD *)buf = 136446210;
        char v38 = "nw_context_set_input_byte_cap";
        _os_log_impl(&dword_1830D4000, v13, v29, "%{public}s called with null cap_exceeded, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    uint64_t v22 = (char *)__nw_create_backtrace_string();
    os_log_type_t v13 = __nwlog_obj();
    os_log_type_t v25 = v36;
    BOOL v26 = os_log_type_enabled(v13, v36);
    if (!v22)
    {
      if (v26)
      {
        *(_DWORD *)buf = 136446210;
        char v38 = "nw_context_set_input_byte_cap";
        _os_log_impl(&dword_1830D4000, v13, v25, "%{public}s called with null cap_exceeded, no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v26)
    {
      *(_DWORD *)buf = 136446466;
      char v38 = "nw_context_set_input_byte_cap";
      __int16 v39 = 2082;
      os_log_type_t v40 = v22;
      _os_log_impl(&dword_1830D4000, v13, v25, "%{public}s called with null cap_exceeded, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_35:

    free(v22);
    if (!v12) {
      goto LABEL_5;
    }
    goto LABEL_56;
  }
  v30[0] = MEMORY[0x1E4F143A8];
  v30[1] = 3221225472;
  v30[2] = __nw_context_set_input_byte_cap_block_invoke;
  v30[3] = &unk_1E5244778;
  id v31 = v7;
  uint64_t v34 = a2;
  id v32 = v8;
  id v33 = v10;
  nw_queue_context_async_if_needed(v31, v30);

LABEL_5:
}

void sub_183613828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19, void *a20)
{
  _Unwind_Resume(a1);
}

void __nw_context_set_input_byte_cap_block_invoke(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  BOOL v2 = nw_context_copy_globals_context(*(NWConcrete_nw_context **)(a1 + 32));
  uint64_t v3 = *(void *)(v2 + 32);
  if (*(void *)(v3 + 76))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v4 = (id)gLogObj;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = *(void *)(*(void *)(v2 + 32) + 76);
      uint64_t v6 = *(void *)(a1 + 56);
      int v10 = 136446722;
      os_log_type_t v11 = "nw_context_set_input_byte_cap_block_invoke";
      __int16 v12 = 2048;
      uint64_t v13 = v5;
      __int16 v14 = 2048;
      uint64_t v15 = v6;
      _os_log_impl(&dword_1830D4000, v4, OS_LOG_TYPE_ERROR, "%{public}s Context already has input byte cap of %llu bytes, ignoring request to cap at %llu bytes", (uint8_t *)&v10, 0x20u);
    }
  }
  else
  {
    g_some_context_has_cap = 1;
    *(void *)(v3 + 76) = *(void *)(a1 + 56);
    objc_storeStrong((id *)(v3 + 84), *(id *)(a1 + 40));
    id v7 = _Block_copy(*(const void **)(a1 + 48));
    uint64_t v8 = *(void *)(v2 + 32);
    id v9 = *(void **)(v8 + 92);
    *(void *)(v8 + 92) = v7;
  }
}

void sub_183613F34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183614558(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_183614998(_Unwind_Exception *a1)
{
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v4 - 72));
  _Unwind_Resume(a1);
}

void sub_1836149DC()
{
}

void sub_183614F74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_183615580(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,id location)
{
}

void sub_183618130(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__1674(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__1675(uint64_t a1)
{
}

void sub_183618C70(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_183619C08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
}

void sub_18361AE64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18361B5E4(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_18361D050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
}

void sub_18361D840(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)NWConcrete_nw_ethernet_channel;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void *__Block_byref_object_copy__1931(uint64_t a1, uint64_t a2)
{
  double result = _Block_copy(*(const void **)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

void __Block_byref_object_dispose__1932(uint64_t a1)
{
}

void sub_18361F514(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_ethernet_channel_cancel(nw_ethernet_channel_t ethernet_channel)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  nw_ethernet_channel_t v1 = ethernet_channel;
  uint64_t v2 = (uint64_t)v1;
  if (v1)
  {
    os_unfair_lock_lock((os_unfair_lock_t)&v1[1]);
    if (*(unsigned char *)(v2 + 112))
    {
      *(unsigned char *)(v2 + 114) = 1;
    }
    else if (!*(unsigned char *)(v2 + 113))
    {
      *(_WORD *)(v2 + 113) = 1;
      -[NWConcrete_nw_ethernet_channel updateClientState:error:](v2, 5, 0);
      -[NWConcrete_nw_ethernet_channel close](v2);
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 8));
    goto LABEL_7;
  }
  uint64_t v3 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v14 = "nw_ethernet_channel_cancel";
  uint64_t v4 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (__nwlog_fault(v4, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v14 = "nw_ethernet_channel_cancel";
        _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s called with null ethernet_channel", buf, 0xCu);
      }
    }
    else if (v11)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v5 = __nwlog_obj();
      os_log_type_t v8 = type;
      BOOL v9 = os_log_type_enabled(v5, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v14 = "nw_ethernet_channel_cancel";
          __int16 v15 = 2082;
          uint64_t v16 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v5, v8, "%{public}s called with null ethernet_channel, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_24;
      }
      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v14 = "nw_ethernet_channel_cancel";
        _os_log_impl(&dword_1830D4000, v5, v8, "%{public}s called with null ethernet_channel, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v5 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v14 = "nw_ethernet_channel_cancel";
        _os_log_impl(&dword_1830D4000, v5, v10, "%{public}s called with null ethernet_channel, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_24:
  if (v4) {
    free(v4);
  }
LABEL_7:
}

void sub_18361F828(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

nw_ethernet_channel_t nw_ethernet_channel_create(uint16_t ether_type, nw_interface_t interface)
{
  uint64_t v3 = interface;
  uint64_t v4 = -[NWConcrete_nw_ethernet_channel initWithEtherType:interface:parameters:]([NWConcrete_nw_ethernet_channel alloc], ether_type, v3, 0);
  uint64_t v5 = v4;
  if (v4) {
    os_log_type_t v6 = v4;
  }

  return v5;
}

void sub_18361F898(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

nw_ethernet_channel_t nw_ethernet_channel_create_with_parameters(uint16_t ether_type, nw_interface_t interface, nw_parameters_t parameters)
{
  uint64_t v5 = interface;
  os_log_type_t v6 = parameters;
  id v7 = -[NWConcrete_nw_ethernet_channel initWithEtherType:interface:parameters:]([NWConcrete_nw_ethernet_channel alloc], ether_type, v5, v6);
  os_log_type_t v8 = v7;
  if (v7) {
    BOOL v9 = v7;
  }

  return v8;
}

void sub_18361F91C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_ethernet_channel_set_state_changed_handler(nw_ethernet_channel_t ethernet_channel, nw_ethernet_channel_state_changed_handler_t handler)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  nw_ethernet_channel_t v3 = ethernet_channel;
  nw_ethernet_channel_state_changed_handler_t v4 = handler;
  uint64_t v5 = v4;
  if (!v3)
  {
    os_log_type_t v8 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v25 = "nw_ethernet_channel_set_state_changed_handler";
    BOOL v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (!__nwlog_fault(v9, &type, &v22)) {
      goto LABEL_40;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v25 = "nw_ethernet_channel_set_state_changed_handler";
        _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null ethernet_channel", buf, 0xCu);
      }
    }
    else if (v22)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v25 = "nw_ethernet_channel_set_state_changed_handler";
          __int16 v26 = 2082;
          os_log_type_t v27 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null ethernet_channel, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_40:
        if (!v9) {
          goto LABEL_6;
        }
LABEL_41:
        free(v9);
        goto LABEL_6;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v25 = "nw_ethernet_channel_set_state_changed_handler";
        _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null ethernet_channel, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v25 = "nw_ethernet_channel_set_state_changed_handler";
        _os_log_impl(&dword_1830D4000, v10, v20, "%{public}s called with null ethernet_channel, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_39:

    goto LABEL_40;
  }
  if (v4)
  {
    os_unfair_lock_lock((os_unfair_lock_t)&v3[1]);
    if (!BYTE1(v3[14].isa))
    {
      os_log_type_t v6 = (objc_class *)_Block_copy(v5);
      Class isa = v3[6].isa;
      v3[6].Class isa = v6;
    }
    os_unfair_lock_unlock((os_unfair_lock_t)&v3[1]);
    goto LABEL_6;
  }
  uint64_t v12 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v25 = "nw_ethernet_channel_set_state_changed_handler";
  BOOL v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v22 = 0;
  if (!__nwlog_fault(v9, &type, &v22)) {
    goto LABEL_40;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    os_log_type_t v10 = __nwlog_obj();
    os_log_type_t v13 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v25 = "nw_ethernet_channel_set_state_changed_handler";
      _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null handler", buf, 0xCu);
    }
    goto LABEL_39;
  }
  if (!v22)
  {
    os_log_type_t v10 = __nwlog_obj();
    os_log_type_t v21 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v25 = "nw_ethernet_channel_set_state_changed_handler";
      _os_log_impl(&dword_1830D4000, v10, v21, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_39;
  }
  uint64_t v17 = (char *)__nw_create_backtrace_string();
  os_log_type_t v10 = __nwlog_obj();
  os_log_type_t v18 = type;
  BOOL v19 = os_log_type_enabled(v10, type);
  if (!v17)
  {
    if (v19)
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v25 = "nw_ethernet_channel_set_state_changed_handler";
      _os_log_impl(&dword_1830D4000, v10, v18, "%{public}s called with null handler, no backtrace", buf, 0xCu);
    }
    goto LABEL_39;
  }
  if (v19)
  {
    *(_DWORD *)buf = 136446466;
    os_log_type_t v25 = "nw_ethernet_channel_set_state_changed_handler";
    __int16 v26 = 2082;
    os_log_type_t v27 = v17;
    _os_log_impl(&dword_1830D4000, v10, v18, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v17);
  if (v9) {
    goto LABEL_41;
  }
LABEL_6:
}

void nw_ethernet_channel_set_queue(nw_ethernet_channel_t ethernet_channel, dispatch_queue_t queue)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  nw_ethernet_channel_t v3 = ethernet_channel;
  nw_ethernet_channel_state_changed_handler_t v4 = queue;
  uint64_t v5 = v4;
  if (!v3)
  {
    os_log_type_t v6 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v23 = "nw_ethernet_channel_set_queue";
    id v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (!__nwlog_fault(v7, &type, &v20)) {
      goto LABEL_40;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v23 = "nw_ethernet_channel_set_queue";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null ethernet_channel", buf, 0xCu);
      }
    }
    else if (v20)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      BOOL v14 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v23 = "nw_ethernet_channel_set_queue";
          __int16 v24 = 2082;
          os_log_type_t v25 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null ethernet_channel, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_40:
        if (!v7) {
          goto LABEL_6;
        }
LABEL_41:
        free(v7);
        goto LABEL_6;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v23 = "nw_ethernet_channel_set_queue";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null ethernet_channel, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v23 = "nw_ethernet_channel_set_queue";
        _os_log_impl(&dword_1830D4000, v8, v18, "%{public}s called with null ethernet_channel, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_39:

    goto LABEL_40;
  }
  if (v4)
  {
    os_unfair_lock_lock((os_unfair_lock_t)&v3[1]);
    if (!BYTE1(v3[14].isa)) {
      objc_storeStrong((id *)&v3[5].isa, queue);
    }
    os_unfair_lock_unlock((os_unfair_lock_t)&v3[1]);
    goto LABEL_6;
  }
  os_log_type_t v10 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v23 = "nw_ethernet_channel_set_queue";
  id v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v20 = 0;
  if (!__nwlog_fault(v7, &type, &v20)) {
    goto LABEL_40;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    os_log_type_t v8 = __nwlog_obj();
    os_log_type_t v11 = type;
    if (os_log_type_enabled(v8, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v23 = "nw_ethernet_channel_set_queue";
      _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null queue", buf, 0xCu);
    }
    goto LABEL_39;
  }
  if (!v20)
  {
    os_log_type_t v8 = __nwlog_obj();
    os_log_type_t v19 = type;
    if (os_log_type_enabled(v8, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v23 = "nw_ethernet_channel_set_queue";
      _os_log_impl(&dword_1830D4000, v8, v19, "%{public}s called with null queue, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_39;
  }
  os_log_type_t v15 = (char *)__nw_create_backtrace_string();
  os_log_type_t v8 = __nwlog_obj();
  os_log_type_t v16 = type;
  BOOL v17 = os_log_type_enabled(v8, type);
  if (!v15)
  {
    if (v17)
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v23 = "nw_ethernet_channel_set_queue";
      _os_log_impl(&dword_1830D4000, v8, v16, "%{public}s called with null queue, no backtrace", buf, 0xCu);
    }
    goto LABEL_39;
  }
  if (v17)
  {
    *(_DWORD *)buf = 136446466;
    os_log_type_t v23 = "nw_ethernet_channel_set_queue";
    __int16 v24 = 2082;
    os_log_type_t v25 = v15;
    _os_log_impl(&dword_1830D4000, v8, v16, "%{public}s called with null queue, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v15);
  if (v7) {
    goto LABEL_41;
  }
LABEL_6:
}

uint32_t nw_ethernet_channel_get_maximum_payload_size(nw_ethernet_channel_t ethernet_channel)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  nw_ethernet_channel_t v1 = ethernet_channel;
  nw_ethernet_channel_t v2 = v1;
  if (v1)
  {
    os_unfair_lock_lock((os_unfair_lock_t)&v1[1]);
    if (BYTE1(v2[14].isa) || (Class isa = v2[2].isa) == 0)
    {
      uint32_t v3 = 0;
    }
    else
    {
      uint64_t v5 = isa;
      uint32_t v3 = *((_DWORD *)v5 + 15);
    }
    os_unfair_lock_unlock((os_unfair_lock_t)&v2[1]);
    goto LABEL_7;
  }
  id v7 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v18 = "nw_ethernet_channel_get_maximum_payload_size";
  os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v18 = "nw_ethernet_channel_get_maximum_payload_size";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null ethernet_channel", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v18 = "nw_ethernet_channel_get_maximum_payload_size";
          __int16 v19 = 2082;
          char v20 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null ethernet_channel, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_24;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v18 = "nw_ethernet_channel_get_maximum_payload_size";
        _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null ethernet_channel, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v18 = "nw_ethernet_channel_get_maximum_payload_size";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null ethernet_channel, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_24:
  if (v8) {
    free(v8);
  }
  uint32_t v3 = 0;
LABEL_7:

  return v3;
}

void nw_ethernet_channel_start(nw_ethernet_channel_t ethernet_channel)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  nw_ethernet_channel_t v1 = ethernet_channel;
  nw_ethernet_channel_t v2 = v1;
  if (v1)
  {
    os_unfair_lock_lock((os_unfair_lock_t)&v1[1]);
    if (!BYTE1(v2[14].isa))
    {
      Class isa = v2[9].isa;
      v17[0] = MEMORY[0x1E4F143A8];
      v17[1] = 3221225472;
      v17[2] = __nw_ethernet_channel_start_block_invoke;
      v17[3] = &unk_1E524AEE0;
      nw_ethernet_channel_state_changed_handler_t v4 = v2;
      os_log_type_t v18 = v4;
      nw_path_evaluator_set_update_handler(isa, 0, v17);
      id v5 = v4[8];
      if (!v5)
      {
        if (nw_context_copy_implicit_context::onceToken != -1) {
          dispatch_once(&nw_context_copy_implicit_context::onceToken, &__block_literal_global_18);
        }
        id v5 = (id)nw_context_copy_implicit_context::implicit_context;
      }
      v15[0] = MEMORY[0x1E4F143A8];
      v15[1] = 3221225472;
      v15[2] = __nw_ethernet_channel_start_block_invoke_8;
      v15[3] = &unk_1E524BAA8;
      os_log_type_t v6 = v4;
      os_log_type_t v16 = v6;
      nw_queue_context_async(v5, v15);
      -[NWConcrete_nw_ethernet_channel updateClientState:error:]((uint64_t)v6, 1, 0);
      os_unfair_lock_unlock((os_unfair_lock_t)&v2[1]);
    }
    goto LABEL_8;
  }
  id v7 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v22 = "nw_ethernet_channel_start";
  os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t v20 = OS_LOG_TYPE_ERROR;
  char v19 = 0;
  if (__nwlog_fault(v8, &v20, &v19))
  {
    if (v20 == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v10 = v20;
      if (os_log_type_enabled(v9, v20))
      {
        *(_DWORD *)buf = 136446210;
        char v22 = "nw_ethernet_channel_start";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null ethernet_channel", buf, 0xCu);
      }
    }
    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v12 = v20;
      BOOL v13 = os_log_type_enabled(v9, v20);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          char v22 = "nw_ethernet_channel_start";
          __int16 v23 = 2082;
          __int16 v24 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null ethernet_channel, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_25;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        char v22 = "nw_ethernet_channel_start";
        _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null ethernet_channel, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v14 = v20;
      if (os_log_type_enabled(v9, v20))
      {
        *(_DWORD *)buf = 136446210;
        char v22 = "nw_ethernet_channel_start";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null ethernet_channel, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_25:
  if (v8) {
    free(v8);
  }
LABEL_8:
}

void sub_183620984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  _Unwind_Resume(a1);
}

void __nw_ethernet_channel_start_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4 && *(void *)(v4 + 152))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v5 = (id)gLogObj;
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_8;
    }
    uint64_t v6 = *(void *)(a1 + 32);
    uint64_t v7 = *(void *)(v6 + 24);
    uint64_t v8 = v6 + 115;
    LODWORD(v6) = *(_DWORD *)(v6 + 168);
    int v14 = 136447490;
    char v15 = "nw_ethernet_channel_start_block_invoke";
    __int16 v16 = 2080;
    uint64_t v17 = v7;
    __int16 v18 = 1042;
    *(_DWORD *)char v19 = 16;
    *(_WORD *)&v19[4] = 2098;
    *(void *)&v19[6] = v8;
    __int16 v20 = 1024;
    int v21 = v6;
    __int16 v22 = 2114;
    id v23 = v3;
    os_log_type_t v9 = "%{public}s [%s: nexus instance %{public,uuid_t}.16P <fd %d>] Handling new path %{public}@";
    os_log_type_t v10 = v5;
    uint32_t v11 = 54;
  }
  else
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v5 = (id)gLogObj;
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_8;
    }
    uint64_t v12 = *(void *)(a1 + 32);
    int v14 = 136446722;
    char v15 = "nw_ethernet_channel_start_block_invoke";
    __int16 v16 = 2114;
    uint64_t v17 = v12;
    __int16 v18 = 2114;
    *(void *)char v19 = v3;
    os_log_type_t v9 = "%{public}s [%{public}@] Handling new path %{public}@";
    os_log_type_t v10 = v5;
    uint32_t v11 = 32;
  }
  _os_log_impl(&dword_1830D4000, v10, OS_LOG_TYPE_DEBUG, v9, (uint8_t *)&v14, v11);
LABEL_8:

  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 8));
  uint64_t v13 = *(void *)(a1 + 32);
  if (!*(unsigned char *)(v13 + 113))
  {
    nw_ethernet_channel_handle_path_update_locked((void *)v13, v3);
    uint64_t v13 = *(void *)(a1 + 32);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(v13 + 8));
}

void sub_183620BB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __nw_ethernet_channel_start_block_invoke_8(uint64_t a1)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 8));
  uint64_t v2 = *(void *)(a1 + 32);
  if (!*(unsigned char *)(v2 + 113))
  {
    id v3 = *(os_unfair_lock_s **)(v2 + 72);
    if (v3)
    {
      uint64_t v4 = v3 + 24;
      id v5 = v3;
      os_unfair_lock_lock(v4);
      id v6 = v5[6];
      os_unfair_lock_unlock(v4);
    }
    else
    {
      id v6 = 0;
    }
    nw_ethernet_channel_handle_path_update_locked((void *)v2, v6);

    uint64_t v2 = *(void *)(a1 + 32);
  }

  os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 8));
}

void sub_183620C7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_ethernet_channel_handle_path_update_locked(void *a1, void *a2)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  uint64_t v4 = a2;
  if (nw_path_get_status(v4) == nw_path_status_satisfied)
  {
    v32[0] = MEMORY[0x1E4F143A8];
    v32[1] = 3221225472;
    v32[2] = ___ZL45nw_ethernet_channel_handle_path_update_lockedP30NWConcrete_nw_ethernet_channelPU21objcproto10OS_nw_path8NSObject_block_invoke;
    v32[3] = &unk_1E523CFF8;
    id v5 = v3;
    id v33 = v5;
    nw_path_enumerate_interface_options(v4, v32);
    id v6 = v5[8];
    if (!v6)
    {
      if (nw_context_copy_implicit_context::onceToken != -1) {
        dispatch_once(&nw_context_copy_implicit_context::onceToken, &__block_literal_global_18);
      }
      id v6 = (id)nw_context_copy_implicit_context::implicit_context;
    }
    v30[0] = MEMORY[0x1E4F143A8];
    v30[1] = 3221225472;
    v30[2] = ___ZL45nw_ethernet_channel_handle_path_update_lockedP30NWConcrete_nw_ethernet_channelPU21objcproto10OS_nw_path8NSObject_block_invoke_139;
    v30[3] = &unk_1E524BAA8;
    uint64_t v7 = v5;
    id v31 = v7;
    nw_queue_context_async(v6, v30);
    uint64_t v8 = (atomic_uchar *)nw_path_copy_flows(v4);
    id v9 = v7[19];
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v10 = (id)gLogObj;
    BOOL v11 = os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG);
    if (v9)
    {
      if (v11)
      {
        if (v8) {
          uint64_t v12 = (*((void *)v8 + 3) - *((void *)v8 + 2)) >> 3;
        }
        else {
          LODWORD(v12) = 0;
        }
        int v23 = *((_DWORD *)v7 + 42);
        uint64_t v24 = (id *)v7[3];
        *(_DWORD *)buf = 136447490;
        char v35 = "nw_ethernet_channel_handle_path_update_locked";
        __int16 v36 = 2080;
        uint64_t v37 = v24;
        __int16 v38 = 1042;
        int v39 = 16;
        __int16 v40 = 2098;
        uint64_t v41 = (char *)v7 + 115;
        __int16 v42 = 1024;
        int v43 = v23;
        __int16 v44 = 1024;
        int v45 = v12;
        uint64_t v25 = "%{public}s [%s: nexus instance %{public,uuid_t}.16P <fd %d>] Ethernet Channel handle update: got %d flows from path";
        uint64_t v26 = v10;
        uint32_t v27 = 50;
LABEL_31:
        _os_log_impl(&dword_1830D4000, v26, OS_LOG_TYPE_DEBUG, v25, buf, v27);
      }
    }
    else if (v11)
    {
      if (v8) {
        uint64_t v22 = (*((void *)v8 + 3) - *((void *)v8 + 2)) >> 3;
      }
      else {
        LODWORD(v22) = 0;
      }
      *(_DWORD *)buf = 136446722;
      char v35 = "nw_ethernet_channel_handle_path_update_locked";
      __int16 v36 = 2114;
      uint64_t v37 = v7;
      __int16 v38 = 1024;
      int v39 = v22;
      uint64_t v25 = "%{public}s [%{public}@] Ethernet Channel handle update: got %d flows from path";
      uint64_t v26 = v10;
      uint32_t v27 = 28;
      goto LABEL_31;
    }

    v28[0] = MEMORY[0x1E4F143A8];
    v28[1] = 3221225472;
    v28[2] = ___ZL45nw_ethernet_channel_handle_path_update_lockedP30NWConcrete_nw_ethernet_channelPU21objcproto10OS_nw_path8NSObject_block_invoke_140;
    v28[3] = &unk_1E524AE18;
    os_log_type_t v29 = v7;
    nw_array_apply(v8, (uint64_t)v28);

    int v21 = v33;
    goto LABEL_33;
  }
  if (v3 && *((void *)v3 + 19))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v13 = (id)gLogObj;
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_17;
    }
    int v14 = (id *)*((void *)v3 + 3);
    int v15 = *((_DWORD *)v3 + 42);
    *(_DWORD *)buf = 136447234;
    char v35 = "nw_ethernet_channel_handle_path_update_locked";
    __int16 v36 = 2080;
    uint64_t v37 = v14;
    __int16 v38 = 1042;
    int v39 = 16;
    __int16 v40 = 2098;
    uint64_t v41 = v3 + 115;
    __int16 v42 = 1024;
    int v43 = v15;
    __int16 v16 = "%{public}s [%s: nexus instance %{public,uuid_t}.16P <fd %d>] Ethernet Channel - path not satisfied, closing flow";
    uint64_t v17 = v13;
    uint32_t v18 = 44;
  }
  else
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v13 = (id)gLogObj;
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_17;
    }
    *(_DWORD *)buf = 136446466;
    char v35 = "nw_ethernet_channel_handle_path_update_locked";
    __int16 v36 = 2114;
    uint64_t v37 = (id *)v3;
    __int16 v16 = "%{public}s [%{public}@] Ethernet Channel - path not satisfied, closing flow";
    uint64_t v17 = v13;
    uint32_t v18 = 22;
  }
  _os_log_impl(&dword_1830D4000, v17, OS_LOG_TYPE_DEBUG, v16, buf, v18);
LABEL_17:

  char v19 = (void *)*((void *)v3 + 10);
  if (v19)
  {
    nw_path_flow_registration_close(v19);
    __int16 v20 = (void *)*((void *)v3 + 10);
    *((void *)v3 + 10) = 0;
  }
  if (*((void *)v3 + 11)) {
    -[NWConcrete_nw_ethernet_channel closeChannel:]((uint64_t)v3, 0);
  }
  int v21 = (id *)*((void *)v3 + 2);
  if (!v21 || !*((_DWORD *)v21 + 2))
  {
    *((void *)v3 + 2) = 0;
LABEL_33:
  }
}

void sub_183621188(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL45nw_ethernet_channel_handle_path_update_lockedP30NWConcrete_nw_ethernet_channelPU21objcproto10OS_nw_path8NSObject_block_invoke(uint64_t a1, void *a2, const unsigned __int8 *a3, void *a4)
{
  uint64_t v118 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = a2;
  id v9 = a4;
  uint64_t v10 = *(void *)(a1 + 32);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v11 = (id *)(v10 + 16);
  uint64_t v12 = v13;
  if (!v13)
  {
    objc_storeStrong(v11, a2);
    uint64_t v15 = *(void *)(a1 + 32);
    if (v15 && *(void *)(v15 + 152))
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      __int16 v16 = (id)gLogObj;
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v17 = *(void *)(a1 + 32);
        uint64_t v18 = *(void *)(v17 + 24);
        uint64_t v19 = v17 + 115;
        int v20 = *(_DWORD *)(v17 + 168);
        int v21 = v8 + 26;
        if (v8)
        {
          int v43 = v8[2];
        }
        else
        {
          int v21 = 0;
          int v43 = 0;
        }
        *(_DWORD *)buf = 136447746;
        v109 = "nw_ethernet_channel_handle_path_update_locked_block_invoke";
        __int16 v110 = 2080;
        uint64_t v111 = v18;
        __int16 v112 = 1042;
        *(_DWORD *)v113 = 16;
        *(_WORD *)&v113[4] = 2098;
        *(void *)&v113[6] = v19;
        __int16 v114 = 1024;
        *(_DWORD *)v115 = v20;
        *(_WORD *)&v115[4] = 2080;
        *(void *)&v115[6] = v21;
        *(_WORD *)&v115[14] = 1024;
        *(_DWORD *)&v115[16] = v43;
        int v39 = "%{public}s [%s: nexus instance %{public,uuid_t}.16P <fd %d>] Ethernet Channel handle update: updating inte"
              "rface to %s (idx %d)";
        __int16 v40 = v16;
        uint32_t v41 = 60;
LABEL_35:
        _os_log_impl(&dword_1830D4000, v40, OS_LOG_TYPE_DEBUG, v39, buf, v41);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      __int16 v16 = (id)gLogObj;
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v32 = *(void *)(a1 + 32);
        id v33 = v8 + 26;
        if (v8)
        {
          int v38 = v8[2];
        }
        else
        {
          id v33 = 0;
          int v38 = 0;
        }
        *(_DWORD *)buf = 136446978;
        v109 = "nw_ethernet_channel_handle_path_update_locked_block_invoke";
        __int16 v110 = 2114;
        uint64_t v111 = v32;
        __int16 v112 = 2080;
        *(void *)v113 = v33;
        *(_WORD *)&v113[8] = 1024;
        *(_DWORD *)&v113[10] = v38;
        int v39 = "%{public}s [%{public}@] Ethernet Channel handle update: updating interface to %s (idx %d)";
        __int16 v40 = v16;
        uint32_t v41 = 38;
        goto LABEL_35;
      }
    }

    goto LABEL_37;
  }
  int v14 = *(_DWORD *)(v12 + 8);
  if (!v8)
  {
    if (!v14) {
      goto LABEL_37;
    }
LABEL_12:
    uint64_t v22 = *(void *)(*(void *)(a1 + 32) + 152);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v23 = (id)gLogObj;
    BOOL v24 = os_log_type_enabled(v23, OS_LOG_TYPE_ERROR);
    if (v22)
    {
      if (v24)
      {
        uint64_t v25 = *(void *)(a1 + 32);
        uint64_t v26 = v25 + 115;
        uint64_t v27 = *(void *)(v25 + 16);
        uint64_t v28 = v27 + 104;
        if (v27) {
          LODWORD(v27) = *(_DWORD *)(v27 + 8);
        }
        else {
          uint64_t v28 = 0;
        }
        uint64_t v29 = *(void *)(v25 + 24);
        int v30 = *(_DWORD *)(v25 + 168);
        id v31 = v8 + 26;
        if (v8)
        {
          int v42 = v8[2];
        }
        else
        {
          id v31 = 0;
          int v42 = 0;
        }
        *(_DWORD *)buf = 136448258;
        v109 = "nw_ethernet_channel_handle_path_update_locked_block_invoke";
        __int16 v110 = 2080;
        uint64_t v111 = v29;
        __int16 v112 = 1042;
        *(_DWORD *)v113 = 16;
        *(_WORD *)&v113[4] = 2098;
        *(void *)&v113[6] = v26;
        __int16 v114 = 1024;
        *(_DWORD *)v115 = v30;
        *(_WORD *)&v115[4] = 2080;
        *(void *)&v115[6] = v28;
        *(_WORD *)&v115[14] = 1024;
        *(_DWORD *)&v115[16] = v27;
        __int16 v116 = 2080;
        *(void *)v117 = v31;
        *(_WORD *)&v117[8] = 1024;
        *(_DWORD *)&v117[10] = v42;
        _os_log_impl(&dword_1830D4000, v23, OS_LOG_TYPE_ERROR, "%{public}s [%s: nexus instance %{public,uuid_t}.16P <fd %d>] Ethernet Channel handle update: mismatched interface %s (idx %d) != %s (idx %d)", buf, 0x4Cu);
      }
    }
    else if (v24)
    {
      uint64_t v34 = *(void *)(a1 + 32);
      uint64_t v35 = *(void *)(v34 + 16);
      uint64_t v36 = v35 + 104;
      if (v35) {
        LODWORD(v35) = *(_DWORD *)(v35 + 8);
      }
      else {
        uint64_t v36 = 0;
      }
      uint64_t v37 = v8 + 26;
      if (v8)
      {
        int v62 = v8[2];
      }
      else
      {
        uint64_t v37 = 0;
        int v62 = 0;
      }
      *(_DWORD *)buf = 136447490;
      v109 = "nw_ethernet_channel_handle_path_update_locked_block_invoke";
      __int16 v110 = 2114;
      uint64_t v111 = v34;
      __int16 v112 = 2080;
      *(void *)v113 = v36;
      *(_WORD *)&v113[8] = 1024;
      *(_DWORD *)&v113[10] = v35;
      __int16 v114 = 2080;
      *(void *)v115 = v37;
      *(_WORD *)&v115[8] = 1024;
      *(_DWORD *)&v115[10] = v62;
      _os_log_impl(&dword_1830D4000, v23, OS_LOG_TYPE_ERROR, "%{public}s [%{public}@] Ethernet Channel handle update: mismatched interface %s (idx %d) != %s (idx %d)", buf, 0x36u);
    }
    goto LABEL_58;
  }
  if (v14 != v8[2]) {
    goto LABEL_12;
  }
LABEL_37:
  int is_null = uuid_is_null(a3);
  uint64_t v45 = *(void *)(a1 + 32);
  if (is_null)
  {
    if (v45 && *(void *)(v45 + 152))
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v23 = (id)gLogObj;
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        uint64_t v46 = *(void *)(a1 + 32);
        uint64_t v47 = *(void *)(v46 + 24);
        uint64_t v48 = v46 + 115;
        LODWORD(v46) = *(_DWORD *)(v46 + 168);
        *(_DWORD *)buf = 136447234;
        v109 = "nw_ethernet_channel_handle_path_update_locked_block_invoke";
        __int16 v110 = 2080;
        uint64_t v111 = v47;
        __int16 v112 = 1042;
        *(_DWORD *)v113 = 16;
        *(_WORD *)&v113[4] = 2098;
        *(void *)&v113[6] = v48;
        __int16 v114 = 1024;
        *(_DWORD *)v115 = v46;
        _os_log_impl(&dword_1830D4000, v23, OS_LOG_TYPE_ERROR, "%{public}s [%s: nexus instance %{public,uuid_t}.16P <fd %d>] Ethernet Channel handle update: no nexus agent", buf, 0x2Cu);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v23 = (id)gLogObj;
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        uint64_t v49 = *(void *)(a1 + 32);
        *(_DWORD *)buf = 136446466;
        v109 = "nw_ethernet_channel_handle_path_update_locked_block_invoke";
        __int16 v110 = 2114;
        uint64_t v111 = v49;
        _os_log_impl(&dword_1830D4000, v23, OS_LOG_TYPE_ERROR, "%{public}s [%{public}@] Ethernet Channel handle update: no nexus agent", buf, 0x16u);
      }
    }
LABEL_58:

    goto LABEL_103;
  }
  if (v45 && *(void *)(v45 + 152))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    char v50 = (id)gLogObj;
    if (!os_log_type_enabled(v50, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_61;
    }
    uint64_t v51 = *(void *)(a1 + 32);
    uint64_t v52 = *(void *)(v51 + 24);
    uint64_t v53 = v51 + 115;
    int v54 = *(_DWORD *)(v51 + 168);
    __int16 v55 = v8 + 26;
    if (v8)
    {
      int v63 = v8[2];
    }
    else
    {
      __int16 v55 = 0;
      int v63 = 0;
    }
    *(_DWORD *)buf = 136448258;
    v109 = "nw_ethernet_channel_handle_path_update_locked_block_invoke";
    __int16 v110 = 2080;
    uint64_t v111 = v52;
    __int16 v112 = 1042;
    *(_DWORD *)v113 = 16;
    *(_WORD *)&v113[4] = 2098;
    *(void *)&v113[6] = v53;
    __int16 v114 = 1024;
    *(_DWORD *)v115 = v54;
    *(_WORD *)&v115[4] = 2080;
    *(void *)&v115[6] = v55;
    *(_WORD *)&v115[14] = 1024;
    *(_DWORD *)&v115[16] = v63;
    __int16 v116 = 1042;
    *(_DWORD *)v117 = 16;
    *(_WORD *)&v117[4] = 2098;
    *(void *)&v117[6] = a3;
    os_log_type_t v59 = "%{public}s [%s: nexus instance %{public,uuid_t}.16P <fd %d>] Ethernet Channel handle update: for %s (%d) nexus"
          " agent %{public, uuid_t}.16P";
    BOOL v60 = v50;
    uint32_t v61 = 76;
  }
  else
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    char v50 = (id)gLogObj;
    if (!os_log_type_enabled(v50, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_61;
    }
    uint64_t v56 = *(void *)(a1 + 32);
    BOOL v57 = v8 + 26;
    if (v8)
    {
      int v58 = v8[2];
    }
    else
    {
      BOOL v57 = 0;
      int v58 = 0;
    }
    *(_DWORD *)buf = 136447490;
    v109 = "nw_ethernet_channel_handle_path_update_locked_block_invoke";
    __int16 v110 = 2114;
    uint64_t v111 = v56;
    __int16 v112 = 2080;
    *(void *)v113 = v57;
    *(_WORD *)&v113[8] = 1024;
    *(_DWORD *)&v113[10] = v58;
    __int16 v114 = 1042;
    *(_DWORD *)v115 = 16;
    *(_WORD *)&v115[4] = 2098;
    *(void *)&v115[6] = a3;
    os_log_type_t v59 = "%{public}s [%{public}@] Ethernet Channel handle update: for %s (%d) nexus agent %{public, uuid_t}.16P";
    BOOL v60 = v50;
    uint32_t v61 = 54;
  }
  _os_log_impl(&dword_1830D4000, v60, OS_LOG_TYPE_DEBUG, v59, buf, v61);
LABEL_61:

  uint64_t v64 = *(void *)(a1 + 32);
  __uint64_t v65 = *(void **)(v64 + 80);
  if (!v65)
  {
    long long v107 = *(_OWORD *)a3;
LABEL_67:
    if (*(void *)(v64 + 152))
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      __int16 v69 = (id)gLogObj;
      if (!os_log_type_enabled(v69, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_77;
      }
      __uint64_t v70 = v8 + 26;
      uint64_t v71 = *(void *)(a1 + 32);
      if (!v8) {
        __uint64_t v70 = 0;
      }
      int v72 = *(_DWORD *)(v71 + 168);
      uint64_t v73 = *(void *)(v71 + 24);
      *(_DWORD *)buf = 136448002;
      v109 = "nw_ethernet_channel_handle_path_update_locked_block_invoke";
      __int16 v110 = 2080;
      uint64_t v111 = v73;
      __int16 v112 = 1042;
      *(_DWORD *)v113 = 16;
      *(_WORD *)&v113[4] = 2098;
      *(void *)&v113[6] = v71 + 115;
      __int16 v114 = 1024;
      *(_DWORD *)v115 = v72;
      *(_WORD *)&v115[4] = 1042;
      *(_DWORD *)&v115[6] = 16;
      *(_WORD *)&v115[10] = 2098;
      *(void *)&v115[12] = &v107;
      __int16 v116 = 2080;
      *(void *)v117 = v70;
      os_log_type_t v74 = "%{public}s [%s: nexus instance %{public,uuid_t}.16P <fd %d>] Ethernet Channel handle update: adding flow reg"
            "istration for nexus agent %{public,uuid_t}.16P on %s";
      uint64_t v75 = v69;
      uint32_t v76 = 70;
      goto LABEL_76;
    }
LABEL_72:
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    __int16 v69 = (id)gLogObj;
    if (!os_log_type_enabled(v69, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_77;
    }
    char v77 = v8 + 26;
    uint64_t v78 = *(void *)(a1 + 32);
    if (!v8) {
      char v77 = 0;
    }
    *(_DWORD *)buf = 136447234;
    v109 = "nw_ethernet_channel_handle_path_update_locked_block_invoke";
    __int16 v110 = 2114;
    uint64_t v111 = v78;
    __int16 v112 = 1042;
    *(_DWORD *)v113 = 16;
    *(_WORD *)&v113[4] = 2098;
    *(void *)&v113[6] = &v107;
    __int16 v114 = 2080;
    *(void *)v115 = v77;
    os_log_type_t v74 = "%{public}s [%{public}@] Ethernet Channel handle update: adding flow registration for nexus agent %{public,uuid_t}.16P on %s";
    uint64_t v75 = v69;
    uint32_t v76 = 48;
LABEL_76:
    _os_log_impl(&dword_1830D4000, v75, OS_LOG_TYPE_DEBUG, v74, buf, v76);
LABEL_77:

    BOOL v79 = nw_path_evaluator_create_flow_inner(*(void **)(*(void *)(a1 + 32) + 72), 0, 1, 0, 0, &v107, 0, 0, 0);
    uint64_t v80 = *(void *)(a1 + 32);
    if (v79)
    {
      os_log_type_t v81 = *(void **)(v80 + 80);
      if (v81)
      {
        nw_path_flow_registration_close(v81);
        uint64_t v80 = *(void *)(a1 + 32);
      }
      objc_storeStrong((id *)(v80 + 80), v79);
      uint64_t v82 = *(void *)(a1 + 32);
      if (v82 && *(void *)(v82 + 152))
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        __int16 v83 = (id)gLogObj;
        if (os_log_type_enabled(v83, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v84 = v8 + 26;
          uint64_t v85 = *(void *)(a1 + 32);
          if (!v8) {
            uint64_t v84 = 0;
          }
          int v86 = *(_DWORD *)(v85 + 168);
          uint64_t v87 = *(void *)(v85 + 24);
          *(_DWORD *)buf = 136448002;
          v109 = "nw_ethernet_channel_handle_path_update_locked_block_invoke";
          __int16 v110 = 2080;
          uint64_t v111 = v87;
          __int16 v112 = 1042;
          *(_DWORD *)v113 = 16;
          *(_WORD *)&v113[4] = 2098;
          *(void *)&v113[6] = v85 + 115;
          __int16 v114 = 1024;
          *(_DWORD *)v115 = v86;
          *(_WORD *)&v115[4] = 1042;
          *(_DWORD *)&v115[6] = 16;
          *(_WORD *)&v115[10] = 2098;
          *(void *)&v115[12] = &v107;
          __int16 v116 = 2080;
          *(void *)v117 = v84;
          BOOL v88 = "%{public}s [%s: nexus instance %{public,uuid_t}.16P <fd %d>] Ethernet Channel handle update: added flow "
                "registration for nexus agent %{public,uuid_t}.16P on %s";
          uint64_t v89 = v83;
          os_log_type_t v90 = OS_LOG_TYPE_DEBUG;
          uint32_t v91 = 70;
          goto LABEL_101;
        }
LABEL_102:

        goto LABEL_103;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      __int16 v83 = (id)gLogObj;
      if (!os_log_type_enabled(v83, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_102;
      }
      BOOL v92 = v8 + 26;
      uint64_t v93 = *(void *)(a1 + 32);
      if (!v8) {
        BOOL v92 = 0;
      }
      *(_DWORD *)buf = 136447234;
      v109 = "nw_ethernet_channel_handle_path_update_locked_block_invoke";
      __int16 v110 = 2114;
      uint64_t v111 = v93;
      __int16 v112 = 1042;
      *(_DWORD *)v113 = 16;
      *(_WORD *)&v113[4] = 2098;
      *(void *)&v113[6] = &v107;
      __int16 v114 = 2080;
      *(void *)v115 = v92;
      BOOL v88 = "%{public}s [%{public}@] Ethernet Channel handle update: added flow registration for nexus agent %{public,uuid_t}.16P on %s";
      uint64_t v89 = v83;
      os_log_type_t v90 = OS_LOG_TYPE_DEBUG;
    }
    else
    {
      if (v80 && *(void *)(v80 + 152))
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        __int16 v83 = (id)gLogObj;
        if (os_log_type_enabled(v83, OS_LOG_TYPE_ERROR))
        {
          uint64_t v94 = v8 + 26;
          uint64_t v95 = *(void *)(a1 + 32);
          if (!v8) {
            uint64_t v94 = 0;
          }
          int v96 = *(_DWORD *)(v95 + 168);
          uint64_t v97 = *(void *)(v95 + 24);
          *(_DWORD *)buf = 136448002;
          v109 = "nw_ethernet_channel_handle_path_update_locked_block_invoke";
          __int16 v110 = 2080;
          uint64_t v111 = v97;
          __int16 v112 = 1042;
          *(_DWORD *)v113 = 16;
          *(_WORD *)&v113[4] = 2098;
          *(void *)&v113[6] = v95 + 115;
          __int16 v114 = 1024;
          *(_DWORD *)v115 = v96;
          *(_WORD *)&v115[4] = 1042;
          *(_DWORD *)&v115[6] = 16;
          *(_WORD *)&v115[10] = 2098;
          *(void *)&v115[12] = &v107;
          __int16 v116 = 2080;
          *(void *)v117 = v94;
          BOOL v88 = "%{public}s [%s: nexus instance %{public,uuid_t}.16P <fd %d>] Ethernet Channel handle update: failed to c"
                "reate flow registration for nexus agent %{public,uuid_t}.16P on %s";
          uint64_t v89 = v83;
          os_log_type_t v90 = OS_LOG_TYPE_ERROR;
          uint32_t v91 = 70;
          goto LABEL_101;
        }
        goto LABEL_102;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      __int16 v83 = (id)gLogObj;
      if (!os_log_type_enabled(v83, OS_LOG_TYPE_ERROR)) {
        goto LABEL_102;
      }
      BOOL v98 = v8 + 26;
      uint64_t v99 = *(void *)(a1 + 32);
      if (!v8) {
        BOOL v98 = 0;
      }
      *(_DWORD *)buf = 136447234;
      v109 = "nw_ethernet_channel_handle_path_update_locked_block_invoke";
      __int16 v110 = 2114;
      uint64_t v111 = v99;
      __int16 v112 = 1042;
      *(_DWORD *)v113 = 16;
      *(_WORD *)&v113[4] = 2098;
      *(void *)&v113[6] = &v107;
      __int16 v114 = 2080;
      *(void *)v115 = v98;
      BOOL v88 = "%{public}s [%{public}@] Ethernet Channel handle update: failed to create flow registration for nexus agent %"
            "{public,uuid_t}.16P on %s";
      uint64_t v89 = v83;
      os_log_type_t v90 = OS_LOG_TYPE_ERROR;
    }
    uint32_t v91 = 48;
LABEL_101:
    _os_log_impl(&dword_1830D4000, v89, v90, v88, buf, v91);
    goto LABEL_102;
  }
  os_log_type_t v66 = v65;
  BOOL v67 = v66;
  if ((v66[148] & 4) == 0)
  {

    uint64_t v64 = *(void *)(a1 + 32);
    goto LABEL_66;
  }
  BOOL v68 = uuid_compare(v66 + 48, a3) == 0;

  uint64_t v64 = *(void *)(a1 + 32);
  if (!v68)
  {
LABEL_66:
    long long v107 = *(_OWORD *)a3;
    if (!v64) {
      goto LABEL_72;
    }
    goto LABEL_67;
  }
  if (v64 && *(void *)(v64 + 152))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    char v100 = (id)gLogObj;
    if (os_log_type_enabled(v100, OS_LOG_TYPE_DEBUG))
    {
      os_log_type_t v101 = v8 + 26;
      uint64_t v102 = *(void *)(a1 + 32);
      if (!v8) {
        os_log_type_t v101 = 0;
      }
      int v103 = *(_DWORD *)(v102 + 168);
      uint64_t v104 = *(void *)(v102 + 24);
      *(_DWORD *)buf = 136448002;
      v109 = "nw_ethernet_channel_handle_path_update_locked_block_invoke";
      __int16 v110 = 2080;
      uint64_t v111 = v104;
      __int16 v112 = 1042;
      *(_DWORD *)v113 = 16;
      *(_WORD *)&v113[4] = 2098;
      *(void *)&v113[6] = v102 + 115;
      __int16 v114 = 1024;
      *(_DWORD *)v115 = v103;
      *(_WORD *)&v115[4] = 1042;
      *(_DWORD *)&v115[6] = 16;
      *(_WORD *)&v115[10] = 2098;
      *(void *)&v115[12] = a3;
      __int16 v116 = 2080;
      *(void *)v117 = v101;
      _os_log_impl(&dword_1830D4000, v100, OS_LOG_TYPE_DEBUG, "%{public}s [%s: nexus instance %{public,uuid_t}.16P <fd %d>] Ethernet Channel handle update: flow registration already exists for nexus agent %{public,uuid_t}.16P on %s", buf, 0x46u);
    }
  }
  else
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    char v100 = (id)gLogObj;
    if (os_log_type_enabled(v100, OS_LOG_TYPE_DEBUG))
    {
      v105 = v8 + 26;
      uint64_t v106 = *(void *)(a1 + 32);
      if (!v8) {
        v105 = 0;
      }
      *(_DWORD *)buf = 136447234;
      v109 = "nw_ethernet_channel_handle_path_update_locked_block_invoke";
      __int16 v110 = 2114;
      uint64_t v111 = v106;
      __int16 v112 = 1042;
      *(_DWORD *)v113 = 16;
      *(_WORD *)&v113[4] = 2098;
      *(void *)&v113[6] = a3;
      __int16 v114 = 2080;
      *(void *)v115 = v105;
      _os_log_impl(&dword_1830D4000, v100, OS_LOG_TYPE_DEBUG, "%{public}s [%{public}@] Ethernet Channel handle update: flow registration already exists for nexus agent %{public,uuid_t}.16P on %s", buf, 0x30u);
    }
  }

LABEL_103:
}

void sub_1836220FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL45nw_ethernet_channel_handle_path_update_lockedP30NWConcrete_nw_ethernet_channelPU21objcproto10OS_nw_path8NSObject_block_invoke_139(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!*(unsigned char *)(v1 + 113))
  {
    uint64_t v2 = *(void **)(v1 + 72);
    if (v2) {
      nw_path_evaluator_force_update(v2, 0);
    }
  }
}

uint64_t ___ZL45nw_ethernet_channel_handle_path_update_lockedP30NWConcrete_nw_ethernet_channelPU21objcproto10OS_nw_path8NSObject_block_invoke_140(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v75 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(void *)(v6 + 88);
  id v8 = v5;
  id v9 = v8;
  if (v7)
  {
    memset(uu1, 0, 16);
    memset(uu2, 0, sizeof(uu2));
    long long v72 = 0uLL;
    memset(v71, 0, sizeof(v71));
    if (!v8) {
      goto LABEL_7;
    }
    uint64_t v10 = *(void **)(v6 + 88);
    if (!v10) {
      goto LABEL_7;
    }
    BOOL v11 = v10;
    if (uuid_is_null(v11 + 128)
      || (*(_OWORD *)uu1 = *((_OWORD *)v11 + 8), v11, BOOL v11 = v9, uuid_is_null(v11 + 128)))
    {

LABEL_7:
      uint64_t v6 = *(void *)(a1 + 32);
      goto LABEL_8;
    }
    *(_OWORD *)uu2 = *((_OWORD *)v11 + 8);

    uint64_t v35 = *(void *)(v6 + 152);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v36 = (id)gLogObj;
    BOOL v37 = os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG);
    if (v35)
    {
      if (v37)
      {
        uint64_t v38 = *(void *)(v6 + 24);
        int v39 = *(_DWORD *)(v6 + 168);
        int v57 = 136447746;
        int v58 = "-[NWConcrete_nw_ethernet_channel matchesNexusInstance:]";
        __int16 v59 = 2080;
        uint64_t v60 = v38;
        __int16 v61 = 1042;
        int v62 = 16;
        __int16 v63 = 2098;
        uint64_t v64 = (unsigned __int8 *)(v6 + 115);
        __int16 v65 = 1024;
        int v66 = v39;
        __int16 v67 = 1042;
        int v68 = 16;
        __int16 v69 = 2098;
        __uint64_t v70 = uu2;
        __int16 v40 = "%{public}s [%s: nexus instance %{public,uuid_t}.16P <fd %d>] matching Nexus instance %{public, uuid_t}.16P";
        uint32_t v41 = v36;
        uint32_t v42 = 60;
LABEL_40:
        _os_log_impl(&dword_1830D4000, v41, OS_LOG_TYPE_DEBUG, v40, (uint8_t *)&v57, v42);
      }
    }
    else if (v37)
    {
      int v57 = 136446978;
      int v58 = "-[NWConcrete_nw_ethernet_channel matchesNexusInstance:]";
      __int16 v59 = 2114;
      uint64_t v60 = v6;
      __int16 v61 = 1042;
      int v62 = 16;
      __int16 v63 = 2098;
      uint64_t v64 = uu2;
      __int16 v40 = "%{public}s [%{public}@] matching Nexus instance %{public, uuid_t}.16P";
      uint32_t v41 = v36;
      uint32_t v42 = 38;
      goto LABEL_40;
    }

    if (uuid_compare(uu1, uu2) || !nw_path_flow_get_id(*(void **)(v6 + 88), &v72)) {
      goto LABEL_7;
    }
    int v43 = v11;
    if (uuid_is_null(v43 + 144))
    {

      goto LABEL_7;
    }
    *(_OWORD *)uint64_t v71 = *((_OWORD *)v43 + 9);

    uint64_t v44 = *(void *)(v6 + 152);
    uint64_t v45 = __nwlog_obj();
    BOOL v46 = os_log_type_enabled(v45, OS_LOG_TYPE_DEBUG);
    if (v44)
    {
      if (!v46) {
        goto LABEL_51;
      }
      uint64_t v47 = *(void *)(v6 + 24);
      int v48 = *(_DWORD *)(v6 + 168);
      int v57 = 136447746;
      int v58 = "-[NWConcrete_nw_ethernet_channel matchesNexusInstance:]";
      __int16 v59 = 2080;
      uint64_t v60 = v47;
      __int16 v61 = 1042;
      int v62 = 16;
      __int16 v63 = 2098;
      uint64_t v64 = (unsigned __int8 *)(v6 + 115);
      __int16 v65 = 1024;
      int v66 = v48;
      __int16 v67 = 1042;
      int v68 = 16;
      __int16 v69 = 2098;
      __uint64_t v70 = v71;
      uint64_t v49 = "%{public}s [%s: nexus instance %{public,uuid_t}.16P <fd %d>] matching flow id %{public, uuid_t}.16P";
      char v50 = v45;
      uint32_t v51 = 60;
    }
    else
    {
      if (!v46) {
        goto LABEL_51;
      }
      int v57 = 136446978;
      int v58 = "-[NWConcrete_nw_ethernet_channel matchesNexusInstance:]";
      __int16 v59 = 2114;
      uint64_t v60 = v6;
      __int16 v61 = 1042;
      int v62 = 16;
      __int16 v63 = 2098;
      uint64_t v64 = v71;
      uint64_t v49 = "%{public}s [%{public}@] matching flow id %{public, uuid_t}.16P";
      char v50 = v45;
      uint32_t v51 = 38;
    }
    _os_log_impl(&dword_1830D4000, v50, OS_LOG_TYPE_DEBUG, v49, (uint8_t *)&v57, v51);
LABEL_51:

    BOOL v52 = uuid_compare((const unsigned __int8 *)&v72, v71) == 0;
    uint64_t v6 = *(void *)(a1 + 32);
    if (v52)
    {
      if (v6 && *(void *)(v6 + 152))
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v26 = (id)gLogObj;
        if (!os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_34;
        }
        uint64_t v53 = *(void *)(a1 + 32);
        uint64_t v54 = *(void *)(v53 + 24);
        __int16 v55 = (unsigned __int8 *)(v53 + 115);
        LODWORD(v53) = *(_DWORD *)(v53 + 168);
        int v57 = 136447234;
        int v58 = "nw_ethernet_channel_handle_path_update_locked_block_invoke";
        __int16 v59 = 2080;
        uint64_t v60 = v54;
        __int16 v61 = 1042;
        int v62 = 16;
        __int16 v63 = 2098;
        uint64_t v64 = v55;
        __int16 v65 = 1024;
        int v66 = v53;
        int v30 = "%{public}s [%s: nexus instance %{public,uuid_t}.16P <fd %d>] Ethernet Channel handle update: flow already exists";
        goto LABEL_29;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v26 = (id)gLogObj;
      if (!os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_34;
      }
      uint64_t v56 = *(void *)(a1 + 32);
      int v57 = 136446466;
      int v58 = "nw_ethernet_channel_handle_path_update_locked_block_invoke";
      __int16 v59 = 2114;
      uint64_t v60 = v56;
      int v30 = "%{public}s [%{public}@] Ethernet Channel handle update: flow already exists";
      goto LABEL_32;
    }
LABEL_8:
    id v12 = v9;
    if (!v6) {
      goto LABEL_25;
    }
  }
  if (*(void *)(v6 + 88)) {
    -[NWConcrete_nw_ethernet_channel closeChannel:](v6, 0);
  }
  if (v9)
  {
    -[NWConcrete_nw_ethernet_channel updateClientState:error:](v6, 2, 0);
    uint64_t v13 = v9;
    id v14 = v13[4];

    if (v14)
    {
      ethernet_address = nw_endpoint_get_ethernet_address(v14);
      if (ethernet_address)
      {
        objc_storeStrong((id *)(v6 + 88), a3);
        int v16 = *(_DWORD *)ethernet_address;
        *(_WORD *)(v6 + 100) = *((_WORD *)ethernet_address + 2);
        *(_DWORD *)(v6 + 96) = v16;
        if (-[NWConcrete_nw_ethernet_channel createChannel](v6)) {
          goto LABEL_24;
        }
        goto LABEL_23;
      }
    }
    uint64_t v17 = *(void *)(v6 + 152);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v18 = (id)gLogObj;
    BOOL v19 = os_log_type_enabled(v18, OS_LOG_TYPE_ERROR);
    if (v17)
    {
      if (v19)
      {
        uint64_t v20 = *(void *)(v6 + 24);
        int v21 = *(_DWORD *)(v6 + 168);
        int v57 = 136447234;
        int v58 = "-[NWConcrete_nw_ethernet_channel resetFlow:]";
        __int16 v59 = 2080;
        uint64_t v60 = v20;
        __int16 v61 = 1042;
        int v62 = 16;
        __int16 v63 = 2098;
        uint64_t v64 = (unsigned __int8 *)(v6 + 115);
        __int16 v65 = 1024;
        int v66 = v21;
        uint64_t v22 = "%{public}s [%s: nexus instance %{public,uuid_t}.16P <fd %d>] resetFlow failed to set flow, no local ethernet address";
        int v23 = v18;
        uint32_t v24 = 44;
LABEL_21:
        _os_log_impl(&dword_1830D4000, v23, OS_LOG_TYPE_ERROR, v22, (uint8_t *)&v57, v24);
      }
    }
    else if (v19)
    {
      int v57 = 136446466;
      int v58 = "-[NWConcrete_nw_ethernet_channel resetFlow:]";
      __int16 v59 = 2114;
      uint64_t v60 = v6;
      uint64_t v22 = "%{public}s [%{public}@] resetFlow failed to set flow, no local ethernet address";
      int v23 = v18;
      uint32_t v24 = 22;
      goto LABEL_21;
    }

LABEL_23:
    -[NWConcrete_nw_ethernet_channel closeChannel:](v6, 53);
LABEL_24:
  }
LABEL_25:

  uint64_t v25 = *(void *)(a1 + 32);
  if (!v25 || !*(void *)(v25 + 152))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v26 = (id)gLogObj;
    if (!os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_34;
    }
    uint64_t v33 = *(void *)(a1 + 32);
    int v57 = 136446466;
    int v58 = "nw_ethernet_channel_handle_path_update_locked_block_invoke";
    __int16 v59 = 2114;
    uint64_t v60 = v33;
    int v30 = "%{public}s [%{public}@] Ethernet Channel handle update: updated flow";
LABEL_32:
    id v31 = v26;
    uint32_t v32 = 22;
    goto LABEL_33;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  uint64_t v26 = (id)gLogObj;
  if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v27 = *(void *)(a1 + 32);
    uint64_t v28 = *(void *)(v27 + 24);
    uint64_t v29 = (unsigned __int8 *)(v27 + 115);
    LODWORD(v27) = *(_DWORD *)(v27 + 168);
    int v57 = 136447234;
    int v58 = "nw_ethernet_channel_handle_path_update_locked_block_invoke";
    __int16 v59 = 2080;
    uint64_t v60 = v28;
    __int16 v61 = 1042;
    int v62 = 16;
    __int16 v63 = 2098;
    uint64_t v64 = v29;
    __int16 v65 = 1024;
    int v66 = v27;
    int v30 = "%{public}s [%s: nexus instance %{public,uuid_t}.16P <fd %d>] Ethernet Channel handle update: updated flow";
LABEL_29:
    id v31 = v26;
    uint32_t v32 = 44;
LABEL_33:
    _os_log_impl(&dword_1830D4000, v31, OS_LOG_TYPE_DEBUG, v30, (uint8_t *)&v57, v32);
  }
LABEL_34:

  return 1;
}

void sub_18362295C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_ethernet_channel_set_receive_handler(nw_ethernet_channel_t ethernet_channel, nw_ethernet_channel_receive_handler_t handler)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  nw_ethernet_channel_t v3 = ethernet_channel;
  nw_ethernet_channel_receive_handler_t v4 = handler;
  if (v3)
  {
    os_unfair_lock_lock((os_unfair_lock_t)&v3[1]);
    if (!BYTE1(v3[14].isa))
    {
      id v5 = (objc_class *)_Block_copy(v4);
      Class isa = v3[7].isa;
      v3[7].Class isa = v5;
    }
    os_unfair_lock_unlock((os_unfair_lock_t)&v3[1]);
    goto LABEL_5;
  }
  uint64_t v7 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v18 = "nw_ethernet_channel_set_receive_handler";
  id v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v18 = "nw_ethernet_channel_set_receive_handler";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null ethernet_channel", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v9 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v18 = "nw_ethernet_channel_set_receive_handler";
          __int16 v19 = 2082;
          uint64_t v20 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null ethernet_channel, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v18 = "nw_ethernet_channel_set_receive_handler";
        _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null ethernet_channel, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v9 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v18 = "nw_ethernet_channel_set_receive_handler";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null ethernet_channel, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_22:
  if (v8) {
    free(v8);
  }
LABEL_5:
}

BOOL ___ZL24send_data_on_ring_lockedP30NWConcrete_nw_ethernet_channelPU27objcproto16OS_dispatch_data8NSObjecttPh_block_invoke(uint64_t a1, void *a2, uint64_t a3, const void *a4, size_t a5)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  id v8 = a2;
  uint64_t v9 = *(unsigned int *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
  if (v9 + a5 <= *(unsigned int *)(a1 + 64))
  {
    memcpy((void *)(*(void *)(a1 + 56) + v9), a4, a5);
    *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) += a5;
    BOOL v20 = 1;
    goto LABEL_15;
  }
  uint64_t v10 = *(void *)(a1 + 32);
  if (v10 && *(void *)(v10 + 152))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v11 = (id)gLogObj;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      uint64_t v12 = *(void *)(a1 + 32);
      uint64_t v13 = *(void *)(v12 + 24);
      uint64_t v14 = v12 + 115;
      LODWORD(v12) = *(_DWORD *)(v12 + 168);
      int v22 = 136447490;
      int v23 = "send_data_on_ring_locked_block_invoke";
      __int16 v24 = 2080;
      uint64_t v25 = v13;
      __int16 v26 = 1042;
      *(_DWORD *)uint64_t v27 = 16;
      *(_WORD *)&v27[4] = 2098;
      *(void *)&v27[6] = v14;
      __int16 v28 = 1024;
      int v29 = v12;
      __int16 v30 = 2112;
      id v31 = @"TX buffer no space";
      char v15 = "%{public}s [%s: nexus instance %{public,uuid_t}.16P <fd %d>]  %@";
      int v16 = v11;
      uint32_t v17 = 54;
LABEL_8:
      _os_log_impl(&dword_1830D4000, v16, OS_LOG_TYPE_ERROR, v15, (uint8_t *)&v22, v17);
    }
  }
  else
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v11 = (id)gLogObj;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      uint64_t v18 = *(void *)(a1 + 32);
      int v22 = 136446722;
      int v23 = "send_data_on_ring_locked_block_invoke";
      __int16 v24 = 2114;
      uint64_t v25 = v18;
      __int16 v26 = 2112;
      *(void *)uint64_t v27 = @"TX buffer no space";
      char v15 = "%{public}s [%{public}@]  %@";
      int v16 = v11;
      uint32_t v17 = 32;
      goto LABEL_8;
    }
  }

  if (*(void *)(*(void *)(a1 + 32) + 152))
  {
    if (*(void *)(a1 + 48)) {
      os_channel_packet_free();
    }
    if (os_channel_is_defunct()) {
      -[NWConcrete_nw_ethernet_channel closeChannel:](*(void *)(a1 + 32), 0);
    }
  }
  __int16 v19 = -[NWConcrete_nw_error initWithDomain:code:]([NWConcrete_nw_error alloc], 1, 55);
  BOOL v20 = v19 != 0;

LABEL_15:
  return v20;
}

void sub_183622F08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_protocol_copy_swift_tls_definition(double a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  double Helper_x8__nwswifttls_copy_definition = gotLoadHelper_x8__nwswifttls_copy_definition(a1);
  if (!*(void *)(v2 + 2208)) {
    return 0;
  }
  uint64_t inited = nwswifttls_copy_definition_delayInitStub(Helper_x8__nwswifttls_copy_definition);
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  nw_ethernet_channel_receive_handler_t v4 = gLogObj;
  if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
  {
    int v6 = 136446466;
    uint64_t v7 = "nw_protocol_copy_swift_tls_definition_if_present";
    __int16 v8 = 2048;
    uint64_t v9 = inited;
    _os_log_impl(&dword_1830D4000, v4, OS_LOG_TYPE_DEBUG, "%{public}s SwiftTLS protocol definition %p", (uint8_t *)&v6, 0x16u);
  }
  return inited;
}

uint64_t nw_tls_set_fallback()
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)buf = 136446210;
  uint64_t v14 = "nw_tls_set_fallback";
  xpc_object_t v0 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (__nwlog_fault(v0, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_14;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_tls_set_fallback";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_fallback not implemented";
LABEL_12:
      __int16 v8 = v1;
      os_log_type_t v9 = v2;
LABEL_13:
      _os_log_impl(&dword_1830D4000, v8, v9, v3, buf, 0xCu);
      goto LABEL_14;
    }
    if (!v11)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_14;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_tls_set_fallback";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_fallback not implemented, backtrace limit exceeded";
      goto LABEL_12;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v5 = gLogObj;
    os_log_type_t v6 = type;
    BOOL v7 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (backtrace_string)
    {
      if (v7)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v14 = "nw_tls_set_fallback";
        __int16 v15 = 2082;
        int v16 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s nw_tls_set_fallback not implemented, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
    }
    else if (v7)
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_tls_set_fallback";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_fallback not implemented, no backtrace";
      __int16 v8 = v5;
      os_log_type_t v9 = v6;
      goto LABEL_13;
    }
  }
LABEL_14:
  if (v0) {
    free(v0);
  }
  return 0;
}

uint64_t nw_tls_get_fallback()
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)buf = 136446210;
  uint64_t v14 = "nw_tls_get_fallback";
  xpc_object_t v0 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (__nwlog_fault(v0, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_14;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_tls_get_fallback";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_get_fallback not implemented";
LABEL_12:
      __int16 v8 = v1;
      os_log_type_t v9 = v2;
LABEL_13:
      _os_log_impl(&dword_1830D4000, v8, v9, v3, buf, 0xCu);
      goto LABEL_14;
    }
    if (!v11)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_14;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_tls_get_fallback";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_get_fallback not implemented, backtrace limit exceeded";
      goto LABEL_12;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v5 = gLogObj;
    os_log_type_t v6 = type;
    BOOL v7 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (backtrace_string)
    {
      if (v7)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v14 = "nw_tls_get_fallback";
        __int16 v15 = 2082;
        int v16 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s nw_tls_get_fallback not implemented, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
    }
    else if (v7)
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_tls_get_fallback";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_get_fallback not implemented, no backtrace";
      __int16 v8 = v5;
      os_log_type_t v9 = v6;
      goto LABEL_13;
    }
  }
LABEL_14:
  if (v0) {
    free(v0);
  }
  return 0;
}

uint64_t nw_tls_set_false_start()
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)buf = 136446210;
  uint64_t v14 = "nw_tls_set_false_start";
  xpc_object_t v0 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (__nwlog_fault(v0, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_14;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_tls_set_false_start";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_false_start not implemented";
LABEL_12:
      __int16 v8 = v1;
      os_log_type_t v9 = v2;
LABEL_13:
      _os_log_impl(&dword_1830D4000, v8, v9, v3, buf, 0xCu);
      goto LABEL_14;
    }
    if (!v11)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_14;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_tls_set_false_start";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_false_start not implemented, backtrace limit exceeded";
      goto LABEL_12;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v5 = gLogObj;
    os_log_type_t v6 = type;
    BOOL v7 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (backtrace_string)
    {
      if (v7)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v14 = "nw_tls_set_false_start";
        __int16 v15 = 2082;
        int v16 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s nw_tls_set_false_start not implemented, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
    }
    else if (v7)
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_tls_set_false_start";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_false_start not implemented, no backtrace";
      __int16 v8 = v5;
      os_log_type_t v9 = v6;
      goto LABEL_13;
    }
  }
LABEL_14:
  if (v0) {
    free(v0);
  }
  return 0;
}

uint64_t nw_tls_get_false_start()
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)buf = 136446210;
  uint64_t v14 = "nw_tls_get_false_start";
  xpc_object_t v0 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (__nwlog_fault(v0, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_14;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_tls_get_false_start";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_get_false_start not implemented";
LABEL_12:
      __int16 v8 = v1;
      os_log_type_t v9 = v2;
LABEL_13:
      _os_log_impl(&dword_1830D4000, v8, v9, v3, buf, 0xCu);
      goto LABEL_14;
    }
    if (!v11)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_14;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_tls_get_false_start";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_get_false_start not implemented, backtrace limit exceeded";
      goto LABEL_12;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v5 = gLogObj;
    os_log_type_t v6 = type;
    BOOL v7 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (backtrace_string)
    {
      if (v7)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v14 = "nw_tls_get_false_start";
        __int16 v15 = 2082;
        int v16 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s nw_tls_get_false_start not implemented, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
    }
    else if (v7)
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_tls_get_false_start";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_get_false_start not implemented, no backtrace";
      __int16 v8 = v5;
      os_log_type_t v9 = v6;
      goto LABEL_13;
    }
  }
LABEL_14:
  if (v0) {
    free(v0);
  }
  return 0;
}

uint64_t nw_tls_set_session_resumption_enabled()
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)buf = 136446210;
  uint64_t v14 = "nw_tls_set_session_resumption_enabled";
  xpc_object_t v0 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (__nwlog_fault(v0, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_14;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_tls_set_session_resumption_enabled";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_session_resumption_enabled not implemented";
LABEL_12:
      __int16 v8 = v1;
      os_log_type_t v9 = v2;
LABEL_13:
      _os_log_impl(&dword_1830D4000, v8, v9, v3, buf, 0xCu);
      goto LABEL_14;
    }
    if (!v11)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_14;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_tls_set_session_resumption_enabled";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_session_resumption_enabled not implemented, backtrace limit exceeded";
      goto LABEL_12;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v5 = gLogObj;
    os_log_type_t v6 = type;
    BOOL v7 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (backtrace_string)
    {
      if (v7)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v14 = "nw_tls_set_session_resumption_enabled";
        __int16 v15 = 2082;
        int v16 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s nw_tls_set_session_resumption_enabled not implemented, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
    }
    else if (v7)
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_tls_set_session_resumption_enabled";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_session_resumption_enabled not implemented, no backtrace";
      __int16 v8 = v5;
      os_log_type_t v9 = v6;
      goto LABEL_13;
    }
  }
LABEL_14:
  if (v0) {
    free(v0);
  }
  return 0;
}

uint64_t nw_tls_set_session_ticket_enabled()
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)buf = 136446210;
  uint64_t v14 = "nw_tls_set_session_ticket_enabled";
  xpc_object_t v0 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (__nwlog_fault(v0, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_14;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_tls_set_session_ticket_enabled";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_session_ticket_enabled not implemented";
LABEL_12:
      __int16 v8 = v1;
      os_log_type_t v9 = v2;
LABEL_13:
      _os_log_impl(&dword_1830D4000, v8, v9, v3, buf, 0xCu);
      goto LABEL_14;
    }
    if (!v11)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_14;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_tls_set_session_ticket_enabled";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_session_ticket_enabled not implemented, backtrace limit exceeded";
      goto LABEL_12;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v5 = gLogObj;
    os_log_type_t v6 = type;
    BOOL v7 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (backtrace_string)
    {
      if (v7)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v14 = "nw_tls_set_session_ticket_enabled";
        __int16 v15 = 2082;
        int v16 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s nw_tls_set_session_ticket_enabled not implemented, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
    }
    else if (v7)
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_tls_set_session_ticket_enabled";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_session_ticket_enabled not implemented, no backtrace";
      __int16 v8 = v5;
      os_log_type_t v9 = v6;
      goto LABEL_13;
    }
  }
LABEL_14:
  if (v0) {
    free(v0);
  }
  return 0;
}

uint64_t nw_tls_set_npn_enabled()
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)buf = 136446210;
  uint64_t v14 = "nw_tls_set_npn_enabled";
  xpc_object_t v0 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (__nwlog_fault(v0, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_14;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_tls_set_npn_enabled";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_npn_enabled not implemented";
LABEL_12:
      __int16 v8 = v1;
      os_log_type_t v9 = v2;
LABEL_13:
      _os_log_impl(&dword_1830D4000, v8, v9, v3, buf, 0xCu);
      goto LABEL_14;
    }
    if (!v11)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_14;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_tls_set_npn_enabled";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_npn_enabled not implemented, backtrace limit exceeded";
      goto LABEL_12;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v5 = gLogObj;
    os_log_type_t v6 = type;
    BOOL v7 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (backtrace_string)
    {
      if (v7)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v14 = "nw_tls_set_npn_enabled";
        __int16 v15 = 2082;
        int v16 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s nw_tls_set_npn_enabled not implemented, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
    }
    else if (v7)
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_tls_set_npn_enabled";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_npn_enabled not implemented, no backtrace";
      __int16 v8 = v5;
      os_log_type_t v9 = v6;
      goto LABEL_13;
    }
  }
LABEL_14:
  if (v0) {
    free(v0);
  }
  return 0;
}

uint64_t nw_tls_get_minimum_protocol_version()
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)buf = 136446210;
  uint64_t v14 = "nw_tls_get_minimum_protocol_version";
  xpc_object_t v0 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (__nwlog_fault(v0, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_14;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_tls_get_minimum_protocol_version";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_get_minimum_protocol_version not implemented";
LABEL_12:
      __int16 v8 = v1;
      os_log_type_t v9 = v2;
LABEL_13:
      _os_log_impl(&dword_1830D4000, v8, v9, v3, buf, 0xCu);
      goto LABEL_14;
    }
    if (!v11)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_14;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_tls_get_minimum_protocol_version";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_get_minimum_protocol_version not implemented, backtrace limit exceeded";
      goto LABEL_12;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v5 = gLogObj;
    os_log_type_t v6 = type;
    BOOL v7 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (backtrace_string)
    {
      if (v7)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v14 = "nw_tls_get_minimum_protocol_version";
        __int16 v15 = 2082;
        int v16 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s nw_tls_get_minimum_protocol_version not implemented, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
    }
    else if (v7)
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_tls_get_minimum_protocol_version";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_get_minimum_protocol_version not implemented, no backtrace";
      __int16 v8 = v5;
      os_log_type_t v9 = v6;
      goto LABEL_13;
    }
  }
LABEL_14:
  if (v0) {
    free(v0);
  }
  return 0;
}

uint64_t nw_tls_set_maximum_protocol_version()
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)buf = 136446210;
  uint64_t v14 = "nw_tls_set_maximum_protocol_version";
  xpc_object_t v0 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (__nwlog_fault(v0, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_14;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_tls_set_maximum_protocol_version";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_maximum_protocol_version not implemented";
LABEL_12:
      __int16 v8 = v1;
      os_log_type_t v9 = v2;
LABEL_13:
      _os_log_impl(&dword_1830D4000, v8, v9, v3, buf, 0xCu);
      goto LABEL_14;
    }
    if (!v11)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_14;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_tls_set_maximum_protocol_version";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_maximum_protocol_version not implemented, backtrace limit exceeded";
      goto LABEL_12;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v5 = gLogObj;
    os_log_type_t v6 = type;
    BOOL v7 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (backtrace_string)
    {
      if (v7)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v14 = "nw_tls_set_maximum_protocol_version";
        __int16 v15 = 2082;
        int v16 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s nw_tls_set_maximum_protocol_version not implemented, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
    }
    else if (v7)
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_tls_set_maximum_protocol_version";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_maximum_protocol_version not implemented, no backtrace";
      __int16 v8 = v5;
      os_log_type_t v9 = v6;
      goto LABEL_13;
    }
  }
LABEL_14:
  if (v0) {
    free(v0);
  }
  return 0;
}

uint64_t nw_tls_get_maximum_protocol_version()
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)buf = 136446210;
  uint64_t v14 = "nw_tls_get_maximum_protocol_version";
  xpc_object_t v0 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (__nwlog_fault(v0, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_14;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_tls_get_maximum_protocol_version";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_get_maximum_protocol_version not implemented";
LABEL_12:
      __int16 v8 = v1;
      os_log_type_t v9 = v2;
LABEL_13:
      _os_log_impl(&dword_1830D4000, v8, v9, v3, buf, 0xCu);
      goto LABEL_14;
    }
    if (!v11)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_14;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_tls_get_maximum_protocol_version";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_get_maximum_protocol_version not implemented, backtrace limit exceeded";
      goto LABEL_12;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v5 = gLogObj;
    os_log_type_t v6 = type;
    BOOL v7 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (backtrace_string)
    {
      if (v7)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v14 = "nw_tls_get_maximum_protocol_version";
        __int16 v15 = 2082;
        int v16 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s nw_tls_get_maximum_protocol_version not implemented, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
    }
    else if (v7)
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_tls_get_maximum_protocol_version";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_get_maximum_protocol_version not implemented, no backtrace";
      __int16 v8 = v5;
      os_log_type_t v9 = v6;
      goto LABEL_13;
    }
  }
LABEL_14:
  if (v0) {
    free(v0);
  }
  return 0;
}

uint64_t nw_tls_set_minimum_ssl_protocol()
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)buf = 136446210;
  uint64_t v14 = "nw_tls_set_minimum_ssl_protocol";
  xpc_object_t v0 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (__nwlog_fault(v0, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_14;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_tls_set_minimum_ssl_protocol";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_minimum_ssl_protocol not implemented";
LABEL_12:
      __int16 v8 = v1;
      os_log_type_t v9 = v2;
LABEL_13:
      _os_log_impl(&dword_1830D4000, v8, v9, v3, buf, 0xCu);
      goto LABEL_14;
    }
    if (!v11)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_14;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_tls_set_minimum_ssl_protocol";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_minimum_ssl_protocol not implemented, backtrace limit exceeded";
      goto LABEL_12;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v5 = gLogObj;
    os_log_type_t v6 = type;
    BOOL v7 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (backtrace_string)
    {
      if (v7)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v14 = "nw_tls_set_minimum_ssl_protocol";
        __int16 v15 = 2082;
        int v16 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s nw_tls_set_minimum_ssl_protocol not implemented, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
    }
    else if (v7)
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_tls_set_minimum_ssl_protocol";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_minimum_ssl_protocol not implemented, no backtrace";
      __int16 v8 = v5;
      os_log_type_t v9 = v6;
      goto LABEL_13;
    }
  }
LABEL_14:
  if (v0) {
    free(v0);
  }
  return 0;
}

uint64_t nw_tls_get_minimum_ssl_protocol()
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)buf = 136446210;
  uint64_t v14 = "nw_tls_get_minimum_ssl_protocol";
  xpc_object_t v0 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (__nwlog_fault(v0, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_14;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_tls_get_minimum_ssl_protocol";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_get_minimum_ssl_protocol not implemented";
LABEL_12:
      __int16 v8 = v1;
      os_log_type_t v9 = v2;
LABEL_13:
      _os_log_impl(&dword_1830D4000, v8, v9, v3, buf, 0xCu);
      goto LABEL_14;
    }
    if (!v11)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_14;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_tls_get_minimum_ssl_protocol";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_get_minimum_ssl_protocol not implemented, backtrace limit exceeded";
      goto LABEL_12;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v5 = gLogObj;
    os_log_type_t v6 = type;
    BOOL v7 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (backtrace_string)
    {
      if (v7)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v14 = "nw_tls_get_minimum_ssl_protocol";
        __int16 v15 = 2082;
        int v16 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s nw_tls_get_minimum_ssl_protocol not implemented, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
    }
    else if (v7)
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_tls_get_minimum_ssl_protocol";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_get_minimum_ssl_protocol not implemented, no backtrace";
      __int16 v8 = v5;
      os_log_type_t v9 = v6;
      goto LABEL_13;
    }
  }
LABEL_14:
  if (v0) {
    free(v0);
  }
  return 0;
}

uint64_t nw_tls_set_maximum_ssl_protocol()
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)buf = 136446210;
  uint64_t v14 = "nw_tls_set_maximum_ssl_protocol";
  xpc_object_t v0 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (__nwlog_fault(v0, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_14;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_tls_set_maximum_ssl_protocol";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_maximum_ssl_protocol not implemented";
LABEL_12:
      __int16 v8 = v1;
      os_log_type_t v9 = v2;
LABEL_13:
      _os_log_impl(&dword_1830D4000, v8, v9, v3, buf, 0xCu);
      goto LABEL_14;
    }
    if (!v11)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_14;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_tls_set_maximum_ssl_protocol";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_maximum_ssl_protocol not implemented, backtrace limit exceeded";
      goto LABEL_12;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v5 = gLogObj;
    os_log_type_t v6 = type;
    BOOL v7 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (backtrace_string)
    {
      if (v7)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v14 = "nw_tls_set_maximum_ssl_protocol";
        __int16 v15 = 2082;
        int v16 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s nw_tls_set_maximum_ssl_protocol not implemented, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
    }
    else if (v7)
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_tls_set_maximum_ssl_protocol";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_maximum_ssl_protocol not implemented, no backtrace";
      __int16 v8 = v5;
      os_log_type_t v9 = v6;
      goto LABEL_13;
    }
  }
LABEL_14:
  if (v0) {
    free(v0);
  }
  return 0;
}

uint64_t nw_tls_get_maximum_ssl_protocol()
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)buf = 136446210;
  uint64_t v14 = "nw_tls_get_maximum_ssl_protocol";
  xpc_object_t v0 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (__nwlog_fault(v0, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_14;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_tls_get_maximum_ssl_protocol";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_get_maximum_ssl_protocol not implemented";
LABEL_12:
      __int16 v8 = v1;
      os_log_type_t v9 = v2;
LABEL_13:
      _os_log_impl(&dword_1830D4000, v8, v9, v3, buf, 0xCu);
      goto LABEL_14;
    }
    if (!v11)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_14;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_tls_get_maximum_ssl_protocol";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_get_maximum_ssl_protocol not implemented, backtrace limit exceeded";
      goto LABEL_12;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v5 = gLogObj;
    os_log_type_t v6 = type;
    BOOL v7 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (backtrace_string)
    {
      if (v7)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v14 = "nw_tls_get_maximum_ssl_protocol";
        __int16 v15 = 2082;
        int v16 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s nw_tls_get_maximum_ssl_protocol not implemented, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
    }
    else if (v7)
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_tls_get_maximum_ssl_protocol";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_get_maximum_ssl_protocol not implemented, no backtrace";
      __int16 v8 = v5;
      os_log_type_t v9 = v6;
      goto LABEL_13;
    }
  }
LABEL_14:
  if (v0) {
    free(v0);
  }
  return 0;
}

uint64_t nw_tls_get_peer_hostname()
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)buf = 136446210;
  uint64_t v14 = "nw_tls_get_peer_hostname";
  xpc_object_t v0 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (__nwlog_fault(v0, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_14;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_tls_get_peer_hostname";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_get_peer_hostname not implemented";
LABEL_12:
      __int16 v8 = v1;
      os_log_type_t v9 = v2;
LABEL_13:
      _os_log_impl(&dword_1830D4000, v8, v9, v3, buf, 0xCu);
      goto LABEL_14;
    }
    if (!v11)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_14;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_tls_get_peer_hostname";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_get_peer_hostname not implemented, backtrace limit exceeded";
      goto LABEL_12;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v5 = gLogObj;
    os_log_type_t v6 = type;
    BOOL v7 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (backtrace_string)
    {
      if (v7)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v14 = "nw_tls_get_peer_hostname";
        __int16 v15 = 2082;
        int v16 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s nw_tls_get_peer_hostname not implemented, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
    }
    else if (v7)
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_tls_get_peer_hostname";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_get_peer_hostname not implemented, no backtrace";
      __int16 v8 = v5;
      os_log_type_t v9 = v6;
      goto LABEL_13;
    }
  }
LABEL_14:
  if (v0) {
    free(v0);
  }
  return 0;
}

uint64_t nw_tls_set_peer_hostname()
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)buf = 136446210;
  uint64_t v14 = "nw_tls_set_peer_hostname";
  xpc_object_t v0 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (__nwlog_fault(v0, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_14;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_tls_set_peer_hostname";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_peer_hostname not implemented";
LABEL_12:
      __int16 v8 = v1;
      os_log_type_t v9 = v2;
LABEL_13:
      _os_log_impl(&dword_1830D4000, v8, v9, v3, buf, 0xCu);
      goto LABEL_14;
    }
    if (!v11)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_14;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_tls_set_peer_hostname";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_peer_hostname not implemented, backtrace limit exceeded";
      goto LABEL_12;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v5 = gLogObj;
    os_log_type_t v6 = type;
    BOOL v7 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (backtrace_string)
    {
      if (v7)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v14 = "nw_tls_set_peer_hostname";
        __int16 v15 = 2082;
        int v16 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s nw_tls_set_peer_hostname not implemented, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
    }
    else if (v7)
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_tls_set_peer_hostname";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_peer_hostname not implemented, no backtrace";
      __int16 v8 = v5;
      os_log_type_t v9 = v6;
      goto LABEL_13;
    }
  }
LABEL_14:
  if (v0) {
    free(v0);
  }
  return 0;
}

uint64_t nw_tls_set_psk_secret()
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)buf = 136446210;
  uint64_t v14 = "nw_tls_set_psk_secret";
  xpc_object_t v0 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (__nwlog_fault(v0, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_14;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_tls_set_psk_secret";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_psk_secret not implemented";
LABEL_12:
      __int16 v8 = v1;
      os_log_type_t v9 = v2;
LABEL_13:
      _os_log_impl(&dword_1830D4000, v8, v9, v3, buf, 0xCu);
      goto LABEL_14;
    }
    if (!v11)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_14;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_tls_set_psk_secret";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_psk_secret not implemented, backtrace limit exceeded";
      goto LABEL_12;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v5 = gLogObj;
    os_log_type_t v6 = type;
    BOOL v7 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (backtrace_string)
    {
      if (v7)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v14 = "nw_tls_set_psk_secret";
        __int16 v15 = 2082;
        int v16 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s nw_tls_set_psk_secret not implemented, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
    }
    else if (v7)
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_tls_set_psk_secret";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_psk_secret not implemented, no backtrace";
      __int16 v8 = v5;
      os_log_type_t v9 = v6;
      goto LABEL_13;
    }
  }
LABEL_14:
  if (v0) {
    free(v0);
  }
  return 0;
}

uint64_t nw_tls_set_psk_identity()
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)buf = 136446210;
  uint64_t v14 = "nw_tls_set_psk_identity";
  xpc_object_t v0 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (__nwlog_fault(v0, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_14;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_tls_set_psk_identity";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_psk_identity not implemented";
LABEL_12:
      __int16 v8 = v1;
      os_log_type_t v9 = v2;
LABEL_13:
      _os_log_impl(&dword_1830D4000, v8, v9, v3, buf, 0xCu);
      goto LABEL_14;
    }
    if (!v11)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_14;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_tls_set_psk_identity";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_psk_identity not implemented, backtrace limit exceeded";
      goto LABEL_12;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v5 = gLogObj;
    os_log_type_t v6 = type;
    BOOL v7 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (backtrace_string)
    {
      if (v7)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v14 = "nw_tls_set_psk_identity";
        __int16 v15 = 2082;
        int v16 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s nw_tls_set_psk_identity not implemented, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
    }
    else if (v7)
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_tls_set_psk_identity";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_psk_identity not implemented, no backtrace";
      __int16 v8 = v5;
      os_log_type_t v9 = v6;
      goto LABEL_13;
    }
  }
LABEL_14:
  if (v0) {
    free(v0);
  }
  return 0;
}

uint64_t nw_tls_set_psk_identity_hint()
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)buf = 136446210;
  uint64_t v14 = "nw_tls_set_psk_identity_hint";
  xpc_object_t v0 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (__nwlog_fault(v0, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_14;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_tls_set_psk_identity_hint";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_psk_identity_hint not implemented";
LABEL_12:
      __int16 v8 = v1;
      os_log_type_t v9 = v2;
LABEL_13:
      _os_log_impl(&dword_1830D4000, v8, v9, v3, buf, 0xCu);
      goto LABEL_14;
    }
    if (!v11)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_14;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_tls_set_psk_identity_hint";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_psk_identity_hint not implemented, backtrace limit exceeded";
      goto LABEL_12;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v5 = gLogObj;
    os_log_type_t v6 = type;
    BOOL v7 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (backtrace_string)
    {
      if (v7)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v14 = "nw_tls_set_psk_identity_hint";
        __int16 v15 = 2082;
        int v16 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s nw_tls_set_psk_identity_hint not implemented, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
    }
    else if (v7)
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_tls_set_psk_identity_hint";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_psk_identity_hint not implemented, no backtrace";
      __int16 v8 = v5;
      os_log_type_t v9 = v6;
      goto LABEL_13;
    }
  }
LABEL_14:
  if (v0) {
    free(v0);
  }
  return 0;
}

uint64_t nw_tls_set_ciphersuites()
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)buf = 136446210;
  uint64_t v14 = "nw_tls_set_ciphersuites";
  xpc_object_t v0 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (__nwlog_fault(v0, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_14;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_tls_set_ciphersuites";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_ciphersuites not implemented";
LABEL_12:
      __int16 v8 = v1;
      os_log_type_t v9 = v2;
LABEL_13:
      _os_log_impl(&dword_1830D4000, v8, v9, v3, buf, 0xCu);
      goto LABEL_14;
    }
    if (!v11)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_14;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_tls_set_ciphersuites";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_ciphersuites not implemented, backtrace limit exceeded";
      goto LABEL_12;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v5 = gLogObj;
    os_log_type_t v6 = type;
    BOOL v7 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (backtrace_string)
    {
      if (v7)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v14 = "nw_tls_set_ciphersuites";
        __int16 v15 = 2082;
        int v16 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s nw_tls_set_ciphersuites not implemented, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
    }
    else if (v7)
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_tls_set_ciphersuites";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_ciphersuites not implemented, no backtrace";
      __int16 v8 = v5;
      os_log_type_t v9 = v6;
      goto LABEL_13;
    }
  }
LABEL_14:
  if (v0) {
    free(v0);
  }
  return 0;
}

uint64_t nw_tls_get_negotiated_cipher_spec()
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)buf = 136446210;
  uint64_t v14 = "nw_tls_get_negotiated_cipher_spec";
  xpc_object_t v0 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (__nwlog_fault(v0, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_14;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_tls_get_negotiated_cipher_spec";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_get_negotiated_cipher_spec not implemented";
LABEL_12:
      __int16 v8 = v1;
      os_log_type_t v9 = v2;
LABEL_13:
      _os_log_impl(&dword_1830D4000, v8, v9, v3, buf, 0xCu);
      goto LABEL_14;
    }
    if (!v11)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_14;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_tls_get_negotiated_cipher_spec";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_get_negotiated_cipher_spec not implemented, backtrace limit exceeded";
      goto LABEL_12;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v5 = gLogObj;
    os_log_type_t v6 = type;
    BOOL v7 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (backtrace_string)
    {
      if (v7)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v14 = "nw_tls_get_negotiated_cipher_spec";
        __int16 v15 = 2082;
        int v16 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s nw_tls_get_negotiated_cipher_spec not implemented, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
    }
    else if (v7)
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_tls_get_negotiated_cipher_spec";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_get_negotiated_cipher_spec not implemented, no backtrace";
      __int16 v8 = v5;
      os_log_type_t v9 = v6;
      goto LABEL_13;
    }
  }
LABEL_14:
  if (v0) {
    free(v0);
  }
  return 0;
}

uint64_t nw_tls_set_dh_parameters()
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)buf = 136446210;
  uint64_t v14 = "nw_tls_set_dh_parameters";
  xpc_object_t v0 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (__nwlog_fault(v0, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_14;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_tls_set_dh_parameters";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_dh_parameters not implemented";
LABEL_12:
      __int16 v8 = v1;
      os_log_type_t v9 = v2;
LABEL_13:
      _os_log_impl(&dword_1830D4000, v8, v9, v3, buf, 0xCu);
      goto LABEL_14;
    }
    if (!v11)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_14;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_tls_set_dh_parameters";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_dh_parameters not implemented, backtrace limit exceeded";
      goto LABEL_12;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v5 = gLogObj;
    os_log_type_t v6 = type;
    BOOL v7 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (backtrace_string)
    {
      if (v7)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v14 = "nw_tls_set_dh_parameters";
        __int16 v15 = 2082;
        int v16 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s nw_tls_set_dh_parameters not implemented, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
    }
    else if (v7)
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_tls_set_dh_parameters";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_dh_parameters not implemented, no backtrace";
      __int16 v8 = v5;
      os_log_type_t v9 = v6;
      goto LABEL_13;
    }
  }
LABEL_14:
  if (v0) {
    free(v0);
  }
  return 0;
}

uint64_t nw_tls_set_alpn_data()
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)buf = 136446210;
  uint64_t v14 = "nw_tls_set_alpn_data";
  xpc_object_t v0 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (__nwlog_fault(v0, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_14;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_tls_set_alpn_data";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_alpn_data not implemented";
LABEL_12:
      __int16 v8 = v1;
      os_log_type_t v9 = v2;
LABEL_13:
      _os_log_impl(&dword_1830D4000, v8, v9, v3, buf, 0xCu);
      goto LABEL_14;
    }
    if (!v11)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_14;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_tls_set_alpn_data";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_alpn_data not implemented, backtrace limit exceeded";
      goto LABEL_12;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v5 = gLogObj;
    os_log_type_t v6 = type;
    BOOL v7 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (backtrace_string)
    {
      if (v7)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v14 = "nw_tls_set_alpn_data";
        __int16 v15 = 2082;
        int v16 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s nw_tls_set_alpn_data not implemented, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
    }
    else if (v7)
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_tls_set_alpn_data";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_alpn_data not implemented, no backtrace";
      __int16 v8 = v5;
      os_log_type_t v9 = v6;
      goto LABEL_13;
    }
  }
LABEL_14:
  if (v0) {
    free(v0);
  }
  return 0;
}

uint64_t nw_tls_get_peer_alpn_data()
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)buf = 136446210;
  uint64_t v14 = "nw_tls_get_peer_alpn_data";
  xpc_object_t v0 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (__nwlog_fault(v0, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_14;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_tls_get_peer_alpn_data";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_get_peer_alpn_data not implemented";
LABEL_12:
      __int16 v8 = v1;
      os_log_type_t v9 = v2;
LABEL_13:
      _os_log_impl(&dword_1830D4000, v8, v9, v3, buf, 0xCu);
      goto LABEL_14;
    }
    if (!v11)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_14;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_tls_get_peer_alpn_data";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_get_peer_alpn_data not implemented, backtrace limit exceeded";
      goto LABEL_12;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v5 = gLogObj;
    os_log_type_t v6 = type;
    BOOL v7 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (backtrace_string)
    {
      if (v7)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v14 = "nw_tls_get_peer_alpn_data";
        __int16 v15 = 2082;
        int v16 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s nw_tls_get_peer_alpn_data not implemented, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
    }
    else if (v7)
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_tls_get_peer_alpn_data";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_get_peer_alpn_data not implemented, no backtrace";
      __int16 v8 = v5;
      os_log_type_t v9 = v6;
      goto LABEL_13;
    }
  }
LABEL_14:
  if (v0) {
    free(v0);
  }
  return 0;
}

uint64_t nw_tls_set_npn_data()
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)buf = 136446210;
  uint64_t v14 = "nw_tls_set_npn_data";
  xpc_object_t v0 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (__nwlog_fault(v0, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_14;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_tls_set_npn_data";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_npn_data not implemented";
LABEL_12:
      __int16 v8 = v1;
      os_log_type_t v9 = v2;
LABEL_13:
      _os_log_impl(&dword_1830D4000, v8, v9, v3, buf, 0xCu);
      goto LABEL_14;
    }
    if (!v11)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_14;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_tls_set_npn_data";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_npn_data not implemented, backtrace limit exceeded";
      goto LABEL_12;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v5 = gLogObj;
    os_log_type_t v6 = type;
    BOOL v7 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (backtrace_string)
    {
      if (v7)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v14 = "nw_tls_set_npn_data";
        __int16 v15 = 2082;
        int v16 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s nw_tls_set_npn_data not implemented, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
    }
    else if (v7)
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_tls_set_npn_data";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_npn_data not implemented, no backtrace";
      __int16 v8 = v5;
      os_log_type_t v9 = v6;
      goto LABEL_13;
    }
  }
LABEL_14:
  if (v0) {
    free(v0);
  }
  return 0;
}

uint64_t nw_tls_get_peer_npn_data()
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)buf = 136446210;
  uint64_t v14 = "nw_tls_get_peer_npn_data";
  xpc_object_t v0 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (__nwlog_fault(v0, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_14;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_tls_get_peer_npn_data";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_get_peer_npn_data not implemented";
LABEL_12:
      __int16 v8 = v1;
      os_log_type_t v9 = v2;
LABEL_13:
      _os_log_impl(&dword_1830D4000, v8, v9, v3, buf, 0xCu);
      goto LABEL_14;
    }
    if (!v11)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_14;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_tls_get_peer_npn_data";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_get_peer_npn_data not implemented, backtrace limit exceeded";
      goto LABEL_12;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v5 = gLogObj;
    os_log_type_t v6 = type;
    BOOL v7 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (backtrace_string)
    {
      if (v7)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v14 = "nw_tls_get_peer_npn_data";
        __int16 v15 = 2082;
        int v16 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s nw_tls_get_peer_npn_data not implemented, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
    }
    else if (v7)
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_tls_get_peer_npn_data";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_get_peer_npn_data not implemented, no backtrace";
      __int16 v8 = v5;
      os_log_type_t v9 = v6;
      goto LABEL_13;
    }
  }
LABEL_14:
  if (v0) {
    free(v0);
  }
  return 0;
}

uint64_t nw_tls_copy_peer_certificates()
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)buf = 136446210;
  uint64_t v14 = "nw_tls_copy_peer_certificates";
  xpc_object_t v0 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (__nwlog_fault(v0, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_14;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_tls_copy_peer_certificates";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_copy_peer_certificates not implemented";
LABEL_12:
      __int16 v8 = v1;
      os_log_type_t v9 = v2;
LABEL_13:
      _os_log_impl(&dword_1830D4000, v8, v9, v3, buf, 0xCu);
      goto LABEL_14;
    }
    if (!v11)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_14;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_tls_copy_peer_certificates";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_copy_peer_certificates not implemented, backtrace limit exceeded";
      goto LABEL_12;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v5 = gLogObj;
    os_log_type_t v6 = type;
    BOOL v7 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (backtrace_string)
    {
      if (v7)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v14 = "nw_tls_copy_peer_certificates";
        __int16 v15 = 2082;
        int v16 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s nw_tls_copy_peer_certificates not implemented, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
    }
    else if (v7)
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_tls_copy_peer_certificates";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_copy_peer_certificates not implemented, no backtrace";
      __int16 v8 = v5;
      os_log_type_t v9 = v6;
      goto LABEL_13;
    }
  }
LABEL_14:
  if (v0) {
    free(v0);
  }
  return 0;
}

uint64_t nw_tls_set_peer_rsa_public_key()
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)buf = 136446210;
  uint64_t v14 = "nw_tls_set_peer_rsa_public_key";
  xpc_object_t v0 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (__nwlog_fault(v0, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_14;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_tls_set_peer_rsa_public_key";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_peer_rsa_public_key not implemented";
LABEL_12:
      __int16 v8 = v1;
      os_log_type_t v9 = v2;
LABEL_13:
      _os_log_impl(&dword_1830D4000, v8, v9, v3, buf, 0xCu);
      goto LABEL_14;
    }
    if (!v11)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_14;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_tls_set_peer_rsa_public_key";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_peer_rsa_public_key not implemented, backtrace limit exceeded";
      goto LABEL_12;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v5 = gLogObj;
    os_log_type_t v6 = type;
    BOOL v7 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (backtrace_string)
    {
      if (v7)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v14 = "nw_tls_set_peer_rsa_public_key";
        __int16 v15 = 2082;
        int v16 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s nw_tls_set_peer_rsa_public_key not implemented, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
    }
    else if (v7)
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_tls_set_peer_rsa_public_key";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_peer_rsa_public_key not implemented, no backtrace";
      __int16 v8 = v5;
      os_log_type_t v9 = v6;
      goto LABEL_13;
    }
  }
LABEL_14:
  if (v0) {
    free(v0);
  }
  return 0;
}

uint64_t nw_tls_set_peer_ec_public_key()
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)buf = 136446210;
  uint64_t v14 = "nw_tls_set_peer_ec_public_key";
  xpc_object_t v0 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (__nwlog_fault(v0, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_14;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_tls_set_peer_ec_public_key";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_peer_ec_public_key not implemented";
LABEL_12:
      __int16 v8 = v1;
      os_log_type_t v9 = v2;
LABEL_13:
      _os_log_impl(&dword_1830D4000, v8, v9, v3, buf, 0xCu);
      goto LABEL_14;
    }
    if (!v11)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_14;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_tls_set_peer_ec_public_key";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_peer_ec_public_key not implemented, backtrace limit exceeded";
      goto LABEL_12;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v5 = gLogObj;
    os_log_type_t v6 = type;
    BOOL v7 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (backtrace_string)
    {
      if (v7)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v14 = "nw_tls_set_peer_ec_public_key";
        __int16 v15 = 2082;
        int v16 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s nw_tls_set_peer_ec_public_key not implemented, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
    }
    else if (v7)
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_tls_set_peer_ec_public_key";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_peer_ec_public_key not implemented, no backtrace";
      __int16 v8 = v5;
      os_log_type_t v9 = v6;
      goto LABEL_13;
    }
  }
LABEL_14:
  if (v0) {
    free(v0);
  }
  return 0;
}

uint64_t nw_tls_get_peer_ocsp_response()
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)buf = 136446210;
  uint64_t v14 = "nw_tls_get_peer_ocsp_response";
  xpc_object_t v0 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (__nwlog_fault(v0, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_14;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_tls_get_peer_ocsp_response";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_get_peer_ocsp_response not implemented";
LABEL_12:
      __int16 v8 = v1;
      os_log_type_t v9 = v2;
LABEL_13:
      _os_log_impl(&dword_1830D4000, v8, v9, v3, buf, 0xCu);
      goto LABEL_14;
    }
    if (!v11)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_14;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_tls_get_peer_ocsp_response";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_get_peer_ocsp_response not implemented, backtrace limit exceeded";
      goto LABEL_12;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v5 = gLogObj;
    os_log_type_t v6 = type;
    BOOL v7 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (backtrace_string)
    {
      if (v7)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v14 = "nw_tls_get_peer_ocsp_response";
        __int16 v15 = 2082;
        int v16 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s nw_tls_get_peer_ocsp_response not implemented, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
    }
    else if (v7)
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_tls_get_peer_ocsp_response";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_get_peer_ocsp_response not implemented, no backtrace";
      __int16 v8 = v5;
      os_log_type_t v9 = v6;
      goto LABEL_13;
    }
  }
LABEL_14:
  if (v0) {
    free(v0);
  }
  return 0;
}

uint64_t nw_tls_set_peer_trust()
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)buf = 136446210;
  uint64_t v14 = "nw_tls_set_peer_trust";
  xpc_object_t v0 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (__nwlog_fault(v0, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_14;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_tls_set_peer_trust";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_peer_trust not implemented";
LABEL_12:
      __int16 v8 = v1;
      os_log_type_t v9 = v2;
LABEL_13:
      _os_log_impl(&dword_1830D4000, v8, v9, v3, buf, 0xCu);
      goto LABEL_14;
    }
    if (!v11)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_14;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_tls_set_peer_trust";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_peer_trust not implemented, backtrace limit exceeded";
      goto LABEL_12;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v5 = gLogObj;
    os_log_type_t v6 = type;
    BOOL v7 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (backtrace_string)
    {
      if (v7)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v14 = "nw_tls_set_peer_trust";
        __int16 v15 = 2082;
        int v16 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s nw_tls_set_peer_trust not implemented, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
    }
    else if (v7)
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_tls_set_peer_trust";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_peer_trust not implemented, no backtrace";
      __int16 v8 = v5;
      os_log_type_t v9 = v6;
      goto LABEL_13;
    }
  }
LABEL_14:
  if (v0) {
    free(v0);
  }
  return 0;
}

uint64_t nw_tls_set_client_auth()
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)buf = 136446210;
  uint64_t v14 = "nw_tls_set_client_auth";
  xpc_object_t v0 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (__nwlog_fault(v0, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_14;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_tls_set_client_auth";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_client_auth not implemented";
LABEL_12:
      __int16 v8 = v1;
      os_log_type_t v9 = v2;
LABEL_13:
      _os_log_impl(&dword_1830D4000, v8, v9, v3, buf, 0xCu);
      goto LABEL_14;
    }
    if (!v11)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_14;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_tls_set_client_auth";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_client_auth not implemented, backtrace limit exceeded";
      goto LABEL_12;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v5 = gLogObj;
    os_log_type_t v6 = type;
    BOOL v7 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (backtrace_string)
    {
      if (v7)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v14 = "nw_tls_set_client_auth";
        __int16 v15 = 2082;
        int v16 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s nw_tls_set_client_auth not implemented, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
    }
    else if (v7)
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_tls_set_client_auth";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_client_auth not implemented, no backtrace";
      __int16 v8 = v5;
      os_log_type_t v9 = v6;
      goto LABEL_13;
    }
  }
LABEL_14:
  if (v0) {
    free(v0);
  }
  return 0;
}

uint64_t nw_tls_set_client_auth_type()
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)buf = 136446210;
  uint64_t v14 = "nw_tls_set_client_auth_type";
  xpc_object_t v0 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (__nwlog_fault(v0, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_14;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_tls_set_client_auth_type";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_client_auth_type not implemented";
LABEL_12:
      __int16 v8 = v1;
      os_log_type_t v9 = v2;
LABEL_13:
      _os_log_impl(&dword_1830D4000, v8, v9, v3, buf, 0xCu);
      goto LABEL_14;
    }
    if (!v11)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_14;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_tls_set_client_auth_type";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_client_auth_type not implemented, backtrace limit exceeded";
      goto LABEL_12;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v5 = gLogObj;
    os_log_type_t v6 = type;
    BOOL v7 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (backtrace_string)
    {
      if (v7)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v14 = "nw_tls_set_client_auth_type";
        __int16 v15 = 2082;
        int v16 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s nw_tls_set_client_auth_type not implemented, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
    }
    else if (v7)
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_tls_set_client_auth_type";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_client_auth_type not implemented, no backtrace";
      __int16 v8 = v5;
      os_log_type_t v9 = v6;
      goto LABEL_13;
    }
  }
LABEL_14:
  if (v0) {
    free(v0);
  }
  return 0;
}

uint64_t nw_tls_get_negotiated_protocol_version()
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)buf = 136446210;
  uint64_t v14 = "nw_tls_get_negotiated_protocol_version";
  xpc_object_t v0 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (__nwlog_fault(v0, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_14;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_tls_get_negotiated_protocol_version";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_get_negotiated_protocol_version not implemented";
LABEL_12:
      __int16 v8 = v1;
      os_log_type_t v9 = v2;
LABEL_13:
      _os_log_impl(&dword_1830D4000, v8, v9, v3, buf, 0xCu);
      goto LABEL_14;
    }
    if (!v11)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_14;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_tls_get_negotiated_protocol_version";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_get_negotiated_protocol_version not implemented, backtrace limit exceeded";
      goto LABEL_12;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v5 = gLogObj;
    os_log_type_t v6 = type;
    BOOL v7 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (backtrace_string)
    {
      if (v7)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v14 = "nw_tls_get_negotiated_protocol_version";
        __int16 v15 = 2082;
        int v16 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s nw_tls_get_negotiated_protocol_version not implemented, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
    }
    else if (v7)
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_tls_get_negotiated_protocol_version";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_get_negotiated_protocol_version not implemented, no backtrace";
      __int16 v8 = v5;
      os_log_type_t v9 = v6;
      goto LABEL_13;
    }
  }
LABEL_14:
  if (v0) {
    free(v0);
  }
  return 0;
}

uint64_t nw_tls_get_negotiated_ssl_protocol()
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)buf = 136446210;
  uint64_t v14 = "nw_tls_get_negotiated_ssl_protocol";
  xpc_object_t v0 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (__nwlog_fault(v0, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_14;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_tls_get_negotiated_ssl_protocol";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_get_negotiated_ssl_protocol not implemented";
LABEL_12:
      __int16 v8 = v1;
      os_log_type_t v9 = v2;
LABEL_13:
      _os_log_impl(&dword_1830D4000, v8, v9, v3, buf, 0xCu);
      goto LABEL_14;
    }
    if (!v11)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_14;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_tls_get_negotiated_ssl_protocol";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_get_negotiated_ssl_protocol not implemented, backtrace limit exceeded";
      goto LABEL_12;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v5 = gLogObj;
    os_log_type_t v6 = type;
    BOOL v7 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (backtrace_string)
    {
      if (v7)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v14 = "nw_tls_get_negotiated_ssl_protocol";
        __int16 v15 = 2082;
        int v16 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s nw_tls_get_negotiated_ssl_protocol not implemented, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
    }
    else if (v7)
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_tls_get_negotiated_ssl_protocol";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_get_negotiated_ssl_protocol not implemented, no backtrace";
      __int16 v8 = v5;
      os_log_type_t v9 = v6;
      goto LABEL_13;
    }
  }
LABEL_14:
  if (v0) {
    free(v0);
  }
  return 0;
}

uint64_t nw_tls_set_config()
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)buf = 136446210;
  uint64_t v14 = "nw_tls_set_config";
  xpc_object_t v0 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (__nwlog_fault(v0, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_14;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_tls_set_config";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_config not implemented";
LABEL_12:
      __int16 v8 = v1;
      os_log_type_t v9 = v2;
LABEL_13:
      _os_log_impl(&dword_1830D4000, v8, v9, v3, buf, 0xCu);
      goto LABEL_14;
    }
    if (!v11)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_14;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_tls_set_config";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_config not implemented, backtrace limit exceeded";
      goto LABEL_12;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v5 = gLogObj;
    os_log_type_t v6 = type;
    BOOL v7 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (backtrace_string)
    {
      if (v7)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v14 = "nw_tls_set_config";
        __int16 v15 = 2082;
        int v16 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s nw_tls_set_config not implemented, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
    }
    else if (v7)
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_tls_set_config";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_config not implemented, no backtrace";
      __int16 v8 = v5;
      os_log_type_t v9 = v6;
      goto LABEL_13;
    }
  }
LABEL_14:
  if (v0) {
    free(v0);
  }
  return 0;
}

uint64_t nw_tls_create_peer_acceptable_distinguished_names()
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)buf = 136446210;
  uint64_t v14 = "nw_tls_create_peer_acceptable_distinguished_names";
  xpc_object_t v0 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (__nwlog_fault(v0, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_14;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_tls_create_peer_acceptable_distinguished_names";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_create_peer_acceptable_distinguished_names not implemented";
LABEL_12:
      __int16 v8 = v1;
      os_log_type_t v9 = v2;
LABEL_13:
      _os_log_impl(&dword_1830D4000, v8, v9, v3, buf, 0xCu);
      goto LABEL_14;
    }
    if (!v11)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_14;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_tls_create_peer_acceptable_distinguished_names";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_create_peer_acceptable_distinguished_names not implemented, backtrace limit exceeded";
      goto LABEL_12;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v5 = gLogObj;
    os_log_type_t v6 = type;
    BOOL v7 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (backtrace_string)
    {
      if (v7)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v14 = "nw_tls_create_peer_acceptable_distinguished_names";
        __int16 v15 = 2082;
        int v16 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s nw_tls_create_peer_acceptable_distinguished_names not implemented, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
    }
    else if (v7)
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_tls_create_peer_acceptable_distinguished_names";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_create_peer_acceptable_distinguished_names not implemented, no backtrace";
      __int16 v8 = v5;
      os_log_type_t v9 = v6;
      goto LABEL_13;
    }
  }
LABEL_14:
  if (v0) {
    free(v0);
  }
  return 0;
}

uint64_t nw_tls_create_peer_trust()
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)buf = 136446210;
  uint64_t v14 = "nw_tls_create_peer_trust";
  xpc_object_t v0 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (__nwlog_fault(v0, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_14;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_tls_create_peer_trust";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_create_peer_trust not implemented";
LABEL_12:
      __int16 v8 = v1;
      os_log_type_t v9 = v2;
LABEL_13:
      _os_log_impl(&dword_1830D4000, v8, v9, v3, buf, 0xCu);
      goto LABEL_14;
    }
    if (!v11)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_14;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_tls_create_peer_trust";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_create_peer_trust not implemented, backtrace limit exceeded";
      goto LABEL_12;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v5 = gLogObj;
    os_log_type_t v6 = type;
    BOOL v7 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (backtrace_string)
    {
      if (v7)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v14 = "nw_tls_create_peer_trust";
        __int16 v15 = 2082;
        int v16 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s nw_tls_create_peer_trust not implemented, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
    }
    else if (v7)
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_tls_create_peer_trust";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_create_peer_trust not implemented, no backtrace";
      __int16 v8 = v5;
      os_log_type_t v9 = v6;
      goto LABEL_13;
    }
  }
LABEL_14:
  if (v0) {
    free(v0);
  }
  return 0;
}

uint64_t nw_tls_fetch_peer_public_key()
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)buf = 136446210;
  uint64_t v14 = "nw_tls_fetch_peer_public_key";
  xpc_object_t v0 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (__nwlog_fault(v0, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_14;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_tls_fetch_peer_public_key";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_fetch_peer_public_key not implemented";
LABEL_12:
      __int16 v8 = v1;
      os_log_type_t v9 = v2;
LABEL_13:
      _os_log_impl(&dword_1830D4000, v8, v9, v3, buf, 0xCu);
      goto LABEL_14;
    }
    if (!v11)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_14;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_tls_fetch_peer_public_key";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_fetch_peer_public_key not implemented, backtrace limit exceeded";
      goto LABEL_12;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v5 = gLogObj;
    os_log_type_t v6 = type;
    BOOL v7 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (backtrace_string)
    {
      if (v7)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v14 = "nw_tls_fetch_peer_public_key";
        __int16 v15 = 2082;
        int v16 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s nw_tls_fetch_peer_public_key not implemented, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
    }
    else if (v7)
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_tls_fetch_peer_public_key";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_fetch_peer_public_key not implemented, no backtrace";
      __int16 v8 = v5;
      os_log_type_t v9 = v6;
      goto LABEL_13;
    }
  }
LABEL_14:
  if (v0) {
    free(v0);
  }
  return 0;
}

uint64_t nw_tls_set_identity_from_array()
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)buf = 136446210;
  uint64_t v14 = "nw_tls_set_identity_from_array";
  xpc_object_t v0 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (__nwlog_fault(v0, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_14;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_tls_set_identity_from_array";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_identity_from_array not implemented";
LABEL_12:
      __int16 v8 = v1;
      os_log_type_t v9 = v2;
LABEL_13:
      _os_log_impl(&dword_1830D4000, v8, v9, v3, buf, 0xCu);
      goto LABEL_14;
    }
    if (!v11)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_14;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_tls_set_identity_from_array";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_identity_from_array not implemented, backtrace limit exceeded";
      goto LABEL_12;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v5 = gLogObj;
    os_log_type_t v6 = type;
    BOOL v7 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (backtrace_string)
    {
      if (v7)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v14 = "nw_tls_set_identity_from_array";
        __int16 v15 = 2082;
        int v16 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s nw_tls_set_identity_from_array not implemented, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
    }
    else if (v7)
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_tls_set_identity_from_array";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_identity_from_array not implemented, no backtrace";
      __int16 v8 = v5;
      os_log_type_t v9 = v6;
      goto LABEL_13;
    }
  }
LABEL_14:
  if (v0) {
    free(v0);
  }
  return 0;
}

void sub_183629ED8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18362A52C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18362AD64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  uint64_t v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)NWCandidate;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_18362AE6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18362AFA4(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_18362B024(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18362B0E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void nw_candidate_manager_inject(NWConcrete_nw_candidate_manager *a1, NWCandidate *a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  nw_ethernet_channel_t v3 = a1;
  nw_ethernet_channel_receive_handler_t v4 = a2;
  id v5 = v4;
  if (v4)
  {
    if ((*((unsigned char *)v4 + 40) & 8) != 0)
    {
      if (__nwlog_candidate_manager_log::onceToken != -1) {
        dispatch_once(&__nwlog_candidate_manager_log::onceToken, &__block_literal_global_24);
      }
      uint64_t v10 = (id)gcandidate_managerLogObj;
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        unint64_t log_id = v3->log_id;
        *(_DWORD *)buf = 136446722;
        __int16 v24 = "nw_candidate_manager_inject";
        __int16 v25 = 2048;
        __int16 v26 = (char *)log_id;
        __int16 v27 = 2112;
        __int16 v28 = v5;
        _os_log_impl(&dword_1830D4000, v10, OS_LOG_TYPE_DEFAULT, "%{public}s [CM%zu] Candidate %@ already injected, skipping", buf, 0x20u);
      }
    }
    else
    {
      if (v3->add_eligible_details)
      {
        long long type = 0uLL;
        nw_path_get_nexus_agent_uuid(v4->current_path, &type);
        nw_interface_option_details_set_nexus_agent(v5->details, &type);
        details = v5->details;
        id v7 = nw_path_copy_interface(v5->current_path);
        nw_interface_option_details_set_interface(details, v7);

        if (__nwlog_candidate_manager_log::onceToken != -1) {
          dispatch_once(&__nwlog_candidate_manager_log::onceToken, &__block_literal_global_24);
        }
        __int16 v8 = (id)gcandidate_managerLogObj;
        if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
        {
          unint64_t v9 = v3->log_id;
          *(_DWORD *)buf = 136446722;
          __int16 v24 = "nw_candidate_manager_inject";
          __int16 v25 = 2048;
          __int16 v26 = (char *)v9;
          __int16 v27 = 2112;
          __int16 v28 = v5;
          _os_log_impl(&dword_1830D4000, v8, OS_LOG_TYPE_INFO, "%{public}s [CM%zu] adding %@", buf, 0x20u);
        }

        (*((void (**)(void))v3->add_eligible_details + 2))();
        *((unsigned char *)v5 + 40) |= 8u;
        goto LABEL_19;
      }
      if (__nwlog_candidate_manager_log::onceToken != -1) {
        dispatch_once(&__nwlog_candidate_manager_log::onceToken, &__block_literal_global_24);
      }
      uint64_t v10 = (id)gcandidate_managerLogObj;
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        unint64_t v12 = v3->log_id;
        *(_DWORD *)buf = 136446722;
        __int16 v24 = "nw_candidate_manager_inject";
        __int16 v25 = 2048;
        __int16 v26 = (char *)v12;
        __int16 v27 = 2112;
        __int16 v28 = v5;
        _os_log_impl(&dword_1830D4000, v10, OS_LOG_TYPE_ERROR, "%{public}s [CM%zu] Failed to add %@", buf, 0x20u);
      }
    }

    goto LABEL_19;
  }
  uint64_t v13 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v24 = "nw_candidate_manager_inject";
  uint64_t v14 = (char *)_os_log_send_and_compose_impl();

  LOBYTE(type) = 16;
  char v21 = 0;
  if (__nwlog_fault(v14, &type, &v21))
  {
    if (type == 17)
    {
      __int16 v15 = __nwlog_obj();
      os_log_type_t v16 = type;
      if (os_log_type_enabled(v15, (os_log_type_t)type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v24 = "nw_candidate_manager_inject";
        _os_log_impl(&dword_1830D4000, v15, v16, "%{public}s called with null candidate", buf, 0xCu);
      }
    }
    else if (v21)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __int16 v15 = __nwlog_obj();
      os_log_type_t v18 = type;
      BOOL v19 = os_log_type_enabled(v15, (os_log_type_t)type);
      if (backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v24 = "nw_candidate_manager_inject";
          __int16 v25 = 2082;
          __int16 v26 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v15, v18, "%{public}s called with null candidate, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_36;
      }
      if (v19)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v24 = "nw_candidate_manager_inject";
        _os_log_impl(&dword_1830D4000, v15, v18, "%{public}s called with null candidate, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __int16 v15 = __nwlog_obj();
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v15, (os_log_type_t)type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v24 = "nw_candidate_manager_inject";
        _os_log_impl(&dword_1830D4000, v15, v20, "%{public}s called with null candidate, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_36:
  if (v14) {
    free(v14);
  }
LABEL_19:
}

void sub_18362B5E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_candidate_manager_remove(NWConcrete_nw_candidate_manager *a1, NWCandidate *a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  nw_ethernet_channel_t v3 = a1;
  nw_ethernet_channel_receive_handler_t v4 = a2;
  id v5 = v4;
  if (v4)
  {
    if (v4->details)
    {
      if (v3->remove_eligible_details)
      {
        if (__nwlog_candidate_manager_log::onceToken != -1) {
          dispatch_once(&__nwlog_candidate_manager_log::onceToken, &__block_literal_global_24);
        }
        os_log_type_t v6 = (id)gcandidate_managerLogObj;
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          unint64_t log_id = v3->log_id;
          *(_DWORD *)buf = 136446722;
          int v22 = "nw_candidate_manager_remove";
          __int16 v23 = 2048;
          __int16 v24 = (char *)log_id;
          __int16 v25 = 2112;
          __int16 v26 = v5;
          _os_log_impl(&dword_1830D4000, v6, OS_LOG_TYPE_DEFAULT, "%{public}s [CM%zu] Removing %@", buf, 0x20u);
        }

        *((unsigned char *)v5 + 40) &= ~8u;
        (*((void (**)(void))v3->remove_eligible_details + 2))();
        goto LABEL_19;
      }
      if (__nwlog_candidate_manager_log::onceToken != -1) {
        dispatch_once(&__nwlog_candidate_manager_log::onceToken, &__block_literal_global_24);
      }
      __int16 v8 = (id)gcandidate_managerLogObj;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        unint64_t v10 = v3->log_id;
        *(_DWORD *)buf = 136446722;
        int v22 = "nw_candidate_manager_remove";
        __int16 v23 = 2048;
        __int16 v24 = (char *)v10;
        __int16 v25 = 2112;
        __int16 v26 = v5;
        _os_log_impl(&dword_1830D4000, v8, OS_LOG_TYPE_ERROR, "%{public}s [CM%zu] Unable to remove %@", buf, 0x20u);
      }
    }
    else
    {
      if (__nwlog_candidate_manager_log::onceToken != -1) {
        dispatch_once(&__nwlog_candidate_manager_log::onceToken, &__block_literal_global_24);
      }
      __int16 v8 = (id)gcandidate_managerLogObj;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        unint64_t v9 = v3->log_id;
        *(_DWORD *)buf = 136446722;
        int v22 = "nw_candidate_manager_remove";
        __int16 v23 = 2048;
        __int16 v24 = (char *)v9;
        __int16 v25 = 2112;
        __int16 v26 = v5;
        _os_log_impl(&dword_1830D4000, v8, OS_LOG_TYPE_INFO, "%{public}s [CM%zu] Candidate %@ not injected, skipping", buf, 0x20u);
      }
    }

    goto LABEL_19;
  }
  char v11 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  int v22 = "nw_candidate_manager_remove";
  unint64_t v12 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v19 = 0;
  if (__nwlog_fault(v12, &type, &v19))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        int v22 = "nw_candidate_manager_remove";
        _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s called with null candidate", buf, 0xCu);
      }
    }
    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v13 = __nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          int v22 = "nw_candidate_manager_remove";
          __int16 v23 = 2082;
          __int16 v24 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v13, v16, "%{public}s called with null candidate, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_36;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        int v22 = "nw_candidate_manager_remove";
        _os_log_impl(&dword_1830D4000, v13, v16, "%{public}s called with null candidate, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v13 = __nwlog_obj();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        int v22 = "nw_candidate_manager_remove";
        _os_log_impl(&dword_1830D4000, v13, v18, "%{public}s called with null candidate, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_36:
  if (v12) {
    free(v12);
  }
LABEL_19:
}

void sub_18362BAA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18362BE7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18362C570(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_candidate_manager_get_next_id(void)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  unsigned int add = atomic_fetch_add(&nw_candidate_manager_get_next_id(void)::s_last_id, 1u);
  uint64_t result = add + 1;
  if (add == -1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v2 = (id)gLogObj;
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      int v3 = 136446466;
      nw_ethernet_channel_receive_handler_t v4 = "nw_candidate_manager_get_next_id";
      __int16 v5 = 1024;
      int v6 = 0;
      _os_log_impl(&dword_1830D4000, v2, OS_LOG_TYPE_ERROR, "%{public}s reached %u agent ids, wrapping", (uint8_t *)&v3, 0x12u);
    }

    return nw_candidate_manager_get_next_id();
  }
  return result;
}

id nw_candidate_manager_create_raw(void *a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    id v2 = [[NWConcrete_nw_candidate_manager alloc] init:v1];
    goto LABEL_3;
  }
  nw_ethernet_channel_receive_handler_t v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v15 = "nw_candidate_manager_create_raw";
  __int16 v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (__nwlog_fault(v5, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v15 = "nw_candidate_manager_create_raw";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v12)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v15 = "nw_candidate_manager_create_raw";
          __int16 v16 = 2082;
          BOOL v17 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v15 = "nw_candidate_manager_create_raw";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v15 = "nw_candidate_manager_create_raw";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
  id v2 = 0;
LABEL_3:

  return v2;
}

void sub_18362C928(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *nw_candidate_manager_create(const unsigned __int8 *a1, void *a2)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  nw_ethernet_channel_receive_handler_t v4 = v3;
  if (!a1)
  {
    BOOL v10 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v26 = "nw_candidate_manager_create";
    os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();

    out[0] = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (!__nwlog_fault(v11, out, &v24)) {
      goto LABEL_42;
    }
    if (out[0] == OS_LOG_TYPE_FAULT)
    {
      char v12 = __nwlog_obj();
      os_log_type_t v13 = out[0];
      if (os_log_type_enabled(v12, out[0]))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v26 = "nw_candidate_manager_create";
        _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s called with null session_id", buf, 0xCu);
      }
    }
    else if (v24)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      char v12 = __nwlog_obj();
      os_log_type_t v17 = out[0];
      BOOL v18 = os_log_type_enabled(v12, out[0]);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v26 = "nw_candidate_manager_create";
          __int16 v27 = 2082;
          __int16 v28 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v12, v17, "%{public}s called with null session_id, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        if (!v11) {
          goto LABEL_44;
        }
        goto LABEL_43;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v26 = "nw_candidate_manager_create";
        _os_log_impl(&dword_1830D4000, v12, v17, "%{public}s called with null session_id, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      char v12 = __nwlog_obj();
      os_log_type_t v22 = out[0];
      if (os_log_type_enabled(v12, out[0]))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v26 = "nw_candidate_manager_create";
        _os_log_impl(&dword_1830D4000, v12, v22, "%{public}s called with null session_id, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_41;
  }
  if (!v3)
  {
    os_log_type_t v14 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v26 = "nw_candidate_manager_create";
    os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();

    out[0] = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (!__nwlog_fault(v11, out, &v24)) {
      goto LABEL_42;
    }
    if (out[0] == OS_LOG_TYPE_FAULT)
    {
      char v12 = __nwlog_obj();
      os_log_type_t v15 = out[0];
      if (os_log_type_enabled(v12, out[0]))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v26 = "nw_candidate_manager_create";
        _os_log_impl(&dword_1830D4000, v12, v15, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v24)
    {
      char v19 = (char *)__nw_create_backtrace_string();
      char v12 = __nwlog_obj();
      os_log_type_t v20 = out[0];
      BOOL v21 = os_log_type_enabled(v12, out[0]);
      if (v19)
      {
        if (v21)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v26 = "nw_candidate_manager_create";
          __int16 v27 = 2082;
          __int16 v28 = v19;
          _os_log_impl(&dword_1830D4000, v12, v20, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v19);
LABEL_42:
        if (!v11)
        {
LABEL_44:
          __int16 v5 = 0;
          goto LABEL_8;
        }
LABEL_43:
        free(v11);
        goto LABEL_44;
      }
      if (v21)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v26 = "nw_candidate_manager_create";
        _os_log_impl(&dword_1830D4000, v12, v20, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      char v12 = __nwlog_obj();
      os_log_type_t v23 = out[0];
      if (os_log_type_enabled(v12, out[0]))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v26 = "nw_candidate_manager_create";
        _os_log_impl(&dword_1830D4000, v12, v23, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_41:

    goto LABEL_42;
  }
  memset(out, 0, 37);
  uuid_unparse(a1, (char *)out);
  __int16 v5 = [[NWConcrete_nw_candidate_manager alloc] init:v4];
  nw_endpoint_t bonjour_service = nw_endpoint_create_bonjour_service((const char *)out, "_flexquic._udp", "local.");
  nw_candidate_manager_set_bonjour_service(v5, bonjour_service);

  if (__nwlog_candidate_manager_log::onceToken != -1) {
    dispatch_once(&__nwlog_candidate_manager_log::onceToken, &__block_literal_global_24);
  }
  os_log_type_t v7 = (id)gcandidate_managerLogObj;
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    __int16 v8 = (char *)v5[1];
    *(_DWORD *)buf = 136446978;
    __int16 v26 = "nw_candidate_manager_create";
    __int16 v27 = 2048;
    __int16 v28 = v8;
    __int16 v29 = 2112;
    __int16 v30 = v5;
    __int16 v31 = 2112;
    uint64_t v32 = v4;
    _os_log_impl(&dword_1830D4000, v7, OS_LOG_TYPE_DEFAULT, "%{public}s [CM%zu] Creating candidate_manager %@ with parameters %@", buf, 0x2Au);
  }

LABEL_8:
  return v5;
}

void sub_18362CEE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_candidate_manager_set_bonjour_service(void *a1, void *a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  __int16 v5 = v4;
  if (!v3)
  {
    __int16 v8 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v25 = "nw_candidate_manager_set_bonjour_service";
    os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (!__nwlog_fault(v9, &type, &v22)) {
      goto LABEL_39;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v25 = "nw_candidate_manager_set_bonjour_service";
        _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null manager", buf, 0xCu);
      }
    }
    else if (v22)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v10 = __nwlog_obj();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v25 = "nw_candidate_manager_set_bonjour_service";
          __int16 v26 = 2082;
          __int16 v27 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null manager, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_39:
        if (!v9) {
          goto LABEL_5;
        }
LABEL_40:
        free(v9);
        goto LABEL_5;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v25 = "nw_candidate_manager_set_bonjour_service";
        _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null manager, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v10 = __nwlog_obj();
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v25 = "nw_candidate_manager_set_bonjour_service";
        _os_log_impl(&dword_1830D4000, v10, v20, "%{public}s called with null manager, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_38:

    goto LABEL_39;
  }
  if (!v4 || (v6 = v4, int v7 = [v6 type], v6, v7 == 3))
  {
    objc_storeStrong(v3 + 5, a2);
    goto LABEL_5;
  }
  char v12 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v25 = "nw_candidate_manager_set_bonjour_service";
  os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v22 = 0;
  if (!__nwlog_fault(v9, &type, &v22)) {
    goto LABEL_39;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    BOOL v10 = __nwlog_obj();
    os_log_type_t v13 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      __int16 v25 = "nw_candidate_manager_set_bonjour_service";
      _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null (service == nil || nw_endpoint_get_type(service) == nw_endpoint_type_bonjour_service)", buf, 0xCu);
    }
    goto LABEL_38;
  }
  if (!v22)
  {
    BOOL v10 = __nwlog_obj();
    os_log_type_t v21 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      __int16 v25 = "nw_candidate_manager_set_bonjour_service";
      _os_log_impl(&dword_1830D4000, v10, v21, "%{public}s called with null (service == nil || nw_endpoint_get_type(service) == nw_endpoint_type_bonjour_service), backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_38;
  }
  os_log_type_t v17 = (char *)__nw_create_backtrace_string();
  BOOL v10 = __nwlog_obj();
  os_log_type_t v18 = type;
  BOOL v19 = os_log_type_enabled(v10, type);
  if (!v17)
  {
    if (v19)
    {
      *(_DWORD *)buf = 136446210;
      __int16 v25 = "nw_candidate_manager_set_bonjour_service";
      _os_log_impl(&dword_1830D4000, v10, v18, "%{public}s called with null (service == nil || nw_endpoint_get_type(service) == nw_endpoint_type_bonjour_service), no backtrace", buf, 0xCu);
    }
    goto LABEL_38;
  }
  if (v19)
  {
    *(_DWORD *)buf = 136446466;
    __int16 v25 = "nw_candidate_manager_set_bonjour_service";
    __int16 v26 = 2082;
    __int16 v27 = v17;
    _os_log_impl(&dword_1830D4000, v10, v18, "%{public}s called with null (service == nil || nw_endpoint_get_type(service) == nw_endpoint_type_bonjour_service), dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v17);
  if (v9) {
    goto LABEL_40;
  }
LABEL_5:
}

void sub_18362D3F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id nw_candidate_manager_create_with_connection(void *a1, void *a2)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  __int16 v5 = v4;
  if (!v3)
  {
    os_log_type_t v13 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v30 = "nw_candidate_manager_create_with_connection";
    os_log_type_t v14 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v27 = 0;
    if (!__nwlog_fault(v14, &type, &v27)) {
      goto LABEL_45;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v15 = __nwlog_obj();
      os_log_type_t v16 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v30 = "nw_candidate_manager_create_with_connection";
        _os_log_impl(&dword_1830D4000, v15, v16, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v27)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v15 = __nwlog_obj();
      os_log_type_t v20 = type;
      BOOL v21 = os_log_type_enabled(v15, type);
      if (backtrace_string)
      {
        if (v21)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v30 = "nw_candidate_manager_create_with_connection";
          __int16 v31 = 2082;
          uint64_t v32 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v15, v20, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        if (!v14) {
          goto LABEL_47;
        }
        goto LABEL_46;
      }
      if (v21)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v30 = "nw_candidate_manager_create_with_connection";
        _os_log_impl(&dword_1830D4000, v15, v20, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v15 = __nwlog_obj();
      os_log_type_t v25 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v30 = "nw_candidate_manager_create_with_connection";
        _os_log_impl(&dword_1830D4000, v15, v25, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_44;
  }
  if (v4)
  {
    id v6 = v4;
    int v7 = [v6 type];

    if (v7 != 3)
    {
      os_log_type_t v17 = __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      __int16 v30 = "nw_candidate_manager_create_with_connection";
      os_log_type_t v14 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v27 = 0;
      if (!__nwlog_fault(v14, &type, &v27)) {
        goto LABEL_45;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v15 = __nwlog_obj();
        os_log_type_t v18 = type;
        if (os_log_type_enabled(v15, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v30 = "nw_candidate_manager_create_with_connection";
          _os_log_impl(&dword_1830D4000, v15, v18, "%{public}s called with null (bonjour_endpoint == nullptr || nw_endpoint_get_type((nw_endpoint_t)bonjour_endpoint) == nw_endpoint_type_bonjour_service)", buf, 0xCu);
        }
      }
      else if (v27)
      {
        char v22 = (char *)__nw_create_backtrace_string();
        os_log_type_t v15 = __nwlog_obj();
        os_log_type_t v23 = type;
        BOOL v24 = os_log_type_enabled(v15, type);
        if (v22)
        {
          if (v24)
          {
            *(_DWORD *)buf = 136446466;
            __int16 v30 = "nw_candidate_manager_create_with_connection";
            __int16 v31 = 2082;
            uint64_t v32 = v22;
            _os_log_impl(&dword_1830D4000, v15, v23, "%{public}s called with null (bonjour_endpoint == nullptr || nw_endpoint_get_type((nw_endpoint_t)bonjour_endpoint) == nw_endpoint_type_bonjour_service), dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v22);
LABEL_45:
          if (!v14)
          {
LABEL_47:
            id v8 = 0;
            goto LABEL_11;
          }
LABEL_46:
          free(v14);
          goto LABEL_47;
        }
        if (v24)
        {
          *(_DWORD *)buf = 136446210;
          __int16 v30 = "nw_candidate_manager_create_with_connection";
          _os_log_impl(&dword_1830D4000, v15, v23, "%{public}s called with null (bonjour_endpoint == nullptr || nw_endpoint_get_type((nw_endpoint_t)bonjour_endpoint) == nw_endpoint_type_bonjour_service), no backtrace", buf, 0xCu);
        }
      }
      else
      {
        os_log_type_t v15 = __nwlog_obj();
        os_log_type_t v26 = type;
        if (os_log_type_enabled(v15, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v30 = "nw_candidate_manager_create_with_connection";
          _os_log_impl(&dword_1830D4000, v15, v26, "%{public}s called with null (bonjour_endpoint == nullptr || nw_endpoint_get_type((nw_endpoint_t)bonjour_endpoint) == nw_endpoint_type_bonjour_service), backtrace limit exceeded", buf, 0xCu);
        }
      }
LABEL_44:

      goto LABEL_45;
    }
  }
  id v8 = [[NWConcrete_nw_candidate_manager alloc] init:v3->parameters];
  nw_candidate_manager_set_bonjour_service(v8, v5);
  os_log_type_t v9 = nw_parameters_copy_description_internal(*((NWConcrete_nw_parameters **)v8 + 10), 1);
  if (__nwlog_candidate_manager_log::onceToken != -1) {
    dispatch_once(&__nwlog_candidate_manager_log::onceToken, &__block_literal_global_24);
  }
  BOOL v10 = (id)gcandidate_managerLogObj;
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    os_log_type_t v11 = (char *)*((void *)v8 + 1);
    *(_DWORD *)buf = 136446978;
    __int16 v30 = "nw_candidate_manager_create_with_connection";
    __int16 v31 = 2048;
    uint64_t v32 = v11;
    __int16 v33 = 2112;
    id v34 = v8;
    __int16 v35 = 2082;
    uint64_t v36 = v9;
    _os_log_impl(&dword_1830D4000, v10, OS_LOG_TYPE_DEFAULT, "%{public}s [CM%zu] Creating candidate_manager %@ with parameters %{public}s", buf, 0x2Au);
  }

  if (v9) {
    free(v9);
  }
  nw_candidate_manager_set_connection((NWConcrete_nw_candidate_manager *)v8, v3);
  nw_candidate_manager_set_state(v8, 2);
LABEL_11:

  return v8;
}

void sub_18362D9E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_candidate_manager_set_connection(NWConcrete_nw_candidate_manager *a1, NWConcrete_nw_connection *a2)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  if (v3)
  {
    objc_storeStrong((id *)&v3->connection, a2);
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 3221225472;
    aBlock[2] = ___ZL35nw_candidate_manager_set_connectionP31NWConcrete_nw_candidate_managerP24NWConcrete_nw_connection_block_invoke;
    aBlock[3] = &unk_1E523AC48;
    __int16 v5 = v3;
    BOOL v24 = v5;
    id v6 = v4;
    os_log_type_t v25 = v6;
    int v7 = _Block_copy(aBlock);
    id add_eligible_details = v5->add_eligible_details;
    v5->id add_eligible_details = v7;

    v20[0] = MEMORY[0x1E4F143A8];
    v20[1] = 3221225472;
    v20[2] = ___ZL35nw_candidate_manager_set_connectionP31NWConcrete_nw_candidate_managerP24NWConcrete_nw_connection_block_invoke_153;
    v20[3] = &unk_1E523AC48;
    os_log_type_t v9 = v5;
    BOOL v21 = v9;
    char v22 = v6;
    BOOL v10 = _Block_copy(v20);
    id remove_eligible_details = v9->remove_eligible_details;
    v9->id remove_eligible_details = v10;

    goto LABEL_3;
  }
  char v12 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v29 = "nw_candidate_manager_set_connection";
  os_log_type_t v13 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t v27 = OS_LOG_TYPE_ERROR;
  char v26 = 0;
  if (__nwlog_fault(v13, &v27, &v26))
  {
    if (v27 == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v14 = __nwlog_obj();
      os_log_type_t v15 = v27;
      if (os_log_type_enabled(v14, v27))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v29 = "nw_candidate_manager_set_connection";
        _os_log_impl(&dword_1830D4000, v14, v15, "%{public}s called with null manager", buf, 0xCu);
      }
    }
    else if (v26)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v14 = __nwlog_obj();
      os_log_type_t v17 = v27;
      BOOL v18 = os_log_type_enabled(v14, v27);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v29 = "nw_candidate_manager_set_connection";
          __int16 v30 = 2082;
          __int16 v31 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v14, v17, "%{public}s called with null manager, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v29 = "nw_candidate_manager_set_connection";
        _os_log_impl(&dword_1830D4000, v14, v17, "%{public}s called with null manager, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v14 = __nwlog_obj();
      os_log_type_t v19 = v27;
      if (os_log_type_enabled(v14, v27))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v29 = "nw_candidate_manager_set_connection";
        _os_log_impl(&dword_1830D4000, v14, v19, "%{public}s called with null manager, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v13) {
    free(v13);
  }
LABEL_3:
}

void nw_candidate_manager_set_state(void *a1, uint64_t a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    if (v3->state != a2)
    {
      if (__nwlog_candidate_manager_log::onceToken != -1) {
        dispatch_once(&__nwlog_candidate_manager_log::onceToken, &__block_literal_global_24);
      }
      __int16 v5 = (id)gcandidate_managerLogObj;
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        unint64_t log_id = v4->log_id;
        uint64_t state = v4->state;
        if (state > 4) {
          id v8 = "unknown-state";
        }
        else {
          id v8 = off_1E523AD20[state];
        }
        os_log_type_t v9 = off_1E523AD20[a2];
        *(_DWORD *)buf = 136446978;
        char v22 = "nw_candidate_manager_set_state";
        __int16 v23 = 2048;
        BOOL v24 = (char *)log_id;
        __int16 v25 = 2080;
        char v26 = v8;
        __int16 v27 = 2080;
        uint64_t v28 = v9;
        _os_log_impl(&dword_1830D4000, v5, OS_LOG_TYPE_DEFAULT, "%{public}s [CM%zu] Changing candidate_manager state changed from %s -> %s", buf, 0x2Au);
      }

      v4->uint64_t state = a2;
      if (a2 == 2
        && (nw_parameters_get_server_mode(v4->parameters) & 1) == 0
        && nw_parameters_get_include_peer_to_peer((nw_parameters_t)v4->parameters))
      {
        nw_candidate_manager_monitor_interface_use(v4);
      }
      state_handler = (void (**)(id, uint64_t, void))v4->state_handler;
      if (state_handler) {
        state_handler[2](state_handler, a2, 0);
      }
    }
    goto LABEL_16;
  }
  os_log_type_t v11 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v22 = "nw_candidate_manager_set_state";
  char v12 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v19 = 0;
  if (__nwlog_fault(v12, &type, &v19))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        char v22 = "nw_candidate_manager_set_state";
        _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s called with null candidate_manager", buf, 0xCu);
      }
    }
    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v13 = __nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          char v22 = "nw_candidate_manager_set_state";
          __int16 v23 = 2082;
          BOOL v24 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v13, v16, "%{public}s called with null candidate_manager, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_33;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        char v22 = "nw_candidate_manager_set_state";
        _os_log_impl(&dword_1830D4000, v13, v16, "%{public}s called with null candidate_manager, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v13 = __nwlog_obj();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        char v22 = "nw_candidate_manager_set_state";
        _os_log_impl(&dword_1830D4000, v13, v18, "%{public}s called with null candidate_manager, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_33:
  if (v12) {
    free(v12);
  }
LABEL_16:
}

void sub_18362E178(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_candidate_manager_monitor_interface_use(NWConcrete_nw_candidate_manager *a1)
{
  id v1 = a1;
  id v2 = v1;
  connection = v1->connection;
  if (connection && (*((unsigned char *)v1 + 184) & 4) == 0)
  {
    *((unsigned char *)v1 + 184) |= 4u;
    v4[0] = MEMORY[0x1E4F143A8];
    v4[1] = 3221225472;
    v4[2] = ___ZL42nw_candidate_manager_monitor_interface_useP31NWConcrete_nw_candidate_manager_block_invoke;
    v4[3] = &unk_1E523ACE0;
    __int16 v5 = v1;
    nw_connection_set_interface_use_callback(connection, v4);
  }
}

void sub_18362E244(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void ___ZL42nw_candidate_manager_monitor_interface_useP31NWConcrete_nw_candidate_manager_block_invoke(uint64_t a1, uint64_t a2, int a3, void *a4, void *a5)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  id v8 = a4;
  id v9 = a5;
  BOOL v10 = v9;
  if (a3)
  {
    if (__nwlog_candidate_manager_log::onceToken != -1) {
      dispatch_once(&__nwlog_candidate_manager_log::onceToken, &__block_literal_global_24);
    }
    os_log_type_t v11 = (id)gcandidate_managerLogObj;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      uint64_t v12 = *(void *)(*(void *)(a1 + 32) + 8);
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_candidate_manager_monitor_interface_use_block_invoke";
      *(_WORD *)&buf[12] = 2048;
      *(void *)&buf[14] = v12;
      _os_log_impl(&dword_1830D4000, v11, OS_LOG_TYPE_INFO, "%{public}s [CM%zu] Connection cancelled", buf, 0x16u);
    }

    nw_candidate_manager_stop_lost_path_timer(*(NWConcrete_nw_candidate_manager **)(a1 + 32));
    goto LABEL_26;
  }
  if (v9)
  {
    os_log_type_t v13 = v9;
    int v14 = v13[25];

    if (__nwlog_candidate_manager_log::onceToken != -1) {
      dispatch_once(&__nwlog_candidate_manager_log::onceToken, &__block_literal_global_24);
    }
    os_log_type_t v15 = (id)gcandidate_managerLogObj;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v16 = *(void *)(*(void *)(a1 + 32) + 8);
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "nw_candidate_manager_monitor_interface_use_block_invoke";
      *(_WORD *)&buf[12] = 2048;
      *(void *)&buf[14] = v16;
      *(_WORD *)&buf[22] = 2080;
      uint32_t v42 = v13 + 26;
      _os_log_impl(&dword_1830D4000, v15, OS_LOG_TYPE_DEFAULT, "%{public}s [CM%zu] Changed to working path over interface %s", buf, 0x20u);
    }

    nw_candidate_manager_stop_lost_path_timer(*(NWConcrete_nw_candidate_manager **)(a1 + 32));
    BOOL v17 = *(NWConcrete_nw_candidate_manager **)(a1 + 32);
    if (v14 == 1002) {
      goto LABEL_13;
    }
    os_log_type_t v20 = v17;
    BOOL v21 = v20;
    if (v20)
    {
      awdl_service_resolver = v20->awdl_service_resolver;
      if (awdl_service_resolver)
      {
        nw_resolver_cancel(awdl_service_resolver);
        __int16 v23 = v21->awdl_service_resolver;
        v21->awdl_service_resolver = 0;
      }
LABEL_25:

      goto LABEL_26;
    }
    __int16 v31 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_candidate_manager_stop_awdl_resolver";
    uint64_t v32 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v39 = 0;
    if (__nwlog_fault(v32, &type, &v39))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __int16 v33 = __nwlog_obj();
        os_log_type_t v34 = type;
        if (os_log_type_enabled(v33, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_candidate_manager_stop_awdl_resolver";
          _os_log_impl(&dword_1830D4000, v33, v34, "%{public}s called with null manager", buf, 0xCu);
        }
      }
      else if (v39)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __int16 v33 = __nwlog_obj();
        os_log_type_t v36 = type;
        BOOL v37 = os_log_type_enabled(v33, type);
        if (backtrace_string)
        {
          if (v37)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_candidate_manager_stop_awdl_resolver";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = backtrace_string;
            _os_log_impl(&dword_1830D4000, v33, v36, "%{public}s called with null manager, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_54;
        }
        if (v37)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_candidate_manager_stop_awdl_resolver";
          _os_log_impl(&dword_1830D4000, v33, v36, "%{public}s called with null manager, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __int16 v33 = __nwlog_obj();
        os_log_type_t v38 = type;
        if (os_log_type_enabled(v33, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_candidate_manager_stop_awdl_resolver";
          _os_log_impl(&dword_1830D4000, v33, v38, "%{public}s called with null manager, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_54:
    if (v32) {
      free(v32);
    }
    goto LABEL_25;
  }
  if (__nwlog_candidate_manager_log::onceToken != -1) {
    dispatch_once(&__nwlog_candidate_manager_log::onceToken, &__block_literal_global_24);
  }
  os_log_type_t v18 = (id)gcandidate_managerLogObj;
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v19 = *(void *)(*(void *)(a1 + 32) + 8);
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_candidate_manager_monitor_interface_use_block_invoke";
    *(_WORD *)&buf[12] = 2048;
    *(void *)&buf[14] = v19;
    _os_log_impl(&dword_1830D4000, v18, OS_LOG_TYPE_DEFAULT, "%{public}s [CM%zu] Changed to no working path", buf, 0x16u);
  }

  if ((nw_parameters_get_server_mode(*(void **)(*(void *)(a1 + 32) + 80)) & 1) == 0)
  {
    BOOL v17 = *(NWConcrete_nw_candidate_manager **)(a1 + 32);
    if (!v17->ids_endpoint || v17->ids_path_evaluator)
    {
LABEL_13:
      nw_candidate_manager_start_awdl_resolver(v17);
      goto LABEL_26;
    }
    BOOL v24 = v17;
    if (v24->lost_path_timer)
    {
      if (__nwlog_candidate_manager_log::onceToken != -1) {
        dispatch_once(&__nwlog_candidate_manager_log::onceToken, &__block_literal_global_24);
      }
      __int16 v25 = (id)gcandidate_managerLogObj;
      if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
      {
        unint64_t log_id = v24->log_id;
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_candidate_manager_start_lost_path_timer";
        *(_WORD *)&buf[12] = 2048;
        *(void *)&buf[14] = log_id;
        _os_log_impl(&dword_1830D4000, v25, OS_LOG_TYPE_INFO, "%{public}s [CM%zu] Lost path timer already started", buf, 0x16u);
      }
    }
    else
    {
      if (__nwlog_candidate_manager_log::onceToken != -1) {
        dispatch_once(&__nwlog_candidate_manager_log::onceToken, &__block_literal_global_24);
      }
      __int16 v27 = (id)gcandidate_managerLogObj;
      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
      {
        unint64_t v28 = v24->log_id;
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_candidate_manager_start_lost_path_timer";
        *(_WORD *)&buf[12] = 2048;
        *(void *)&buf[14] = v28;
        _os_log_impl(&dword_1830D4000, v27, OS_LOG_TYPE_DEFAULT, "%{public}s [CM%zu] Starting lost path timer", buf, 0x16u);
      }

      *(void *)buf = MEMORY[0x1E4F143A8];
      *(void *)&buf[8] = 3221225472;
      *(void *)&buf[16] = ___ZL42nw_candidate_manager_start_lost_path_timerP31NWConcrete_nw_candidate_manager_block_invoke;
      uint32_t v42 = &unk_1E524BAA8;
      int v43 = v24;
      BOOL source = nw_queue_context_create_source(0, 2, 3, 0, buf, 0);
      v24->lost_path_timer = (void *)source;
      dispatch_time_t v30 = dispatch_time(0x8000000000000000, 30000000000);
      nw_queue_set_timer_values(source, v30, 0xFFFFFFFFFFFFFFFFLL, 0x3B9ACA00uLL);
      nw_queue_activate_source((uint64_t)v24->lost_path_timer);
      __int16 v25 = v43;
    }

    nw_candidate_manager_start_ids_internal(*(void **)(a1 + 32), *(void **)(*(void *)(a1 + 32) + 16));
  }
LABEL_26:
}

void sub_18362E940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  _Unwind_Resume(a1);
}

void nw_candidate_manager_stop_lost_path_timer(NWConcrete_nw_candidate_manager *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    if (__nwlog_candidate_manager_log::onceToken != -1) {
      dispatch_once(&__nwlog_candidate_manager_log::onceToken, &__block_literal_global_24);
    }
    id v2 = (id)gcandidate_managerLogObj;
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      unint64_t log_id = v1->log_id;
      *(_DWORD *)buf = 136446466;
      uint64_t v16 = "nw_candidate_manager_stop_lost_path_timer";
      __int16 v17 = 2048;
      os_log_type_t v18 = (char *)log_id;
      _os_log_impl(&dword_1830D4000, v2, OS_LOG_TYPE_DEFAULT, "%{public}s [CM%zu] Stopping lost path timer", buf, 0x16u);
    }

    uint64_t lost_path_timer = (uint64_t)v1->lost_path_timer;
    if (lost_path_timer)
    {
      nw_queue_cancel_source(lost_path_timer);
      v1->uint64_t lost_path_timer = 0;
    }
    goto LABEL_8;
  }
  __int16 v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v16 = "nw_candidate_manager_stop_lost_path_timer";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v16 = "nw_candidate_manager_stop_lost_path_timer";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null candidate_manager", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v16 = "nw_candidate_manager_stop_lost_path_timer";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null candidate_manager, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_25;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v16 = "nw_candidate_manager_stop_lost_path_timer";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null candidate_manager, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v16 = "nw_candidate_manager_stop_lost_path_timer";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null candidate_manager, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_25:
  if (v6) {
    free(v6);
  }
LABEL_8:
}

void sub_18362ECB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL42nw_candidate_manager_start_lost_path_timerP31NWConcrete_nw_candidate_manager_block_invoke(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (__nwlog_candidate_manager_log::onceToken != -1) {
    dispatch_once(&__nwlog_candidate_manager_log::onceToken, &__block_literal_global_24);
  }
  id v2 = (id)gcandidate_managerLogObj;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 8);
    int v4 = 136446466;
    __int16 v5 = "nw_candidate_manager_start_lost_path_timer_block_invoke";
    __int16 v6 = 2048;
    uint64_t v7 = v3;
    _os_log_impl(&dword_1830D4000, v2, OS_LOG_TYPE_DEFAULT, "%{public}s [CM%zu] Lost path timer timed out, falling back to AWDL", (uint8_t *)&v4, 0x16u);
  }

  nw_candidate_manager_stop_lost_path_timer(*(NWConcrete_nw_candidate_manager **)(a1 + 32));
  nw_candidate_manager_start_awdl_resolver(*(NWConcrete_nw_candidate_manager **)(a1 + 32));
}

void nw_candidate_manager_start_ids_internal(void *a1, void *a2)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1;
  id v4 = a2;
  __int16 v5 = v4;
  if (!v3)
  {
    BOOL v21 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    int v43 = "nw_candidate_manager_start_ids_internal";
    char v22 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v41 = OS_LOG_TYPE_ERROR;
    char v40 = 0;
    if (!__nwlog_fault(v22, &v41, &v40)) {
      goto LABEL_49;
    }
    if (v41 == OS_LOG_TYPE_FAULT)
    {
      __int16 v23 = __nwlog_obj();
      os_log_type_t v24 = v41;
      if (os_log_type_enabled(v23, v41))
      {
        *(_DWORD *)buf = 136446210;
        int v43 = "nw_candidate_manager_start_ids_internal";
        _os_log_impl(&dword_1830D4000, v23, v24, "%{public}s called with null candidate_manager", buf, 0xCu);
      }
    }
    else if (v40)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __int16 v23 = __nwlog_obj();
      os_log_type_t v28 = v41;
      BOOL v29 = os_log_type_enabled(v23, v41);
      if (backtrace_string)
      {
        if (v29)
        {
          *(_DWORD *)buf = 136446466;
          int v43 = "nw_candidate_manager_start_ids_internal";
          __int16 v44 = 2082;
          uint64_t v45 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v23, v28, "%{public}s called with null candidate_manager, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_49:
        if (!v22) {
          goto LABEL_15;
        }
LABEL_50:
        free(v22);
        goto LABEL_15;
      }
      if (v29)
      {
        *(_DWORD *)buf = 136446210;
        int v43 = "nw_candidate_manager_start_ids_internal";
        _os_log_impl(&dword_1830D4000, v23, v28, "%{public}s called with null candidate_manager, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __int16 v23 = __nwlog_obj();
      os_log_type_t v33 = v41;
      if (os_log_type_enabled(v23, v41))
      {
        *(_DWORD *)buf = 136446210;
        int v43 = "nw_candidate_manager_start_ids_internal";
        _os_log_impl(&dword_1830D4000, v23, v33, "%{public}s called with null candidate_manager, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_48:

    goto LABEL_49;
  }
  if (v4)
  {
    id v6 = v3[10];
    BOOL v7 = -[NWConcrete_nw_parameters initWithParameters:stripConnected:shallowCopy:]((id *)[NWConcrete_nw_parameters alloc], v6, 0, 0);

    uint64_t v8 = (void (**)(id, BOOL))v3[16];
    if (v8)
    {
      v8[2](v8, v7);
    }
    else
    {
      xpc_object_t v9 = xpc_array_create(0, 0);
      xpc_array_set_string(v9, 0xFFFFFFFFFFFFFFFFLL, "com.apple.ids");
      xpc_object_t v10 = xpc_array_create(0, 0);
      xpc_array_set_string(v10, 0xFFFFFFFFFFFFFFFFLL, "IDSGroupEntitledAgent");
      nw_parameters_set_required_netagent_classes((void *)v7, v9, v10);
    }
    if (__nwlog_candidate_manager_log::onceToken != -1) {
      dispatch_once(&__nwlog_candidate_manager_log::onceToken, &__block_literal_global_24);
    }
    BOOL v11 = (id)gcandidate_managerLogObj;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      os_log_type_t v12 = (char *)v3[1];
      *(_DWORD *)buf = 136446722;
      int v43 = "nw_candidate_manager_start_ids_internal";
      __int16 v44 = 2048;
      uint64_t v45 = v12;
      __int16 v46 = 2112;
      uint64_t v47 = v5;
      _os_log_impl(&dword_1830D4000, v11, OS_LOG_TYPE_DEFAULT, "%{public}s [CM%zu] Starting: %@", buf, 0x20u);
    }

    evaluator_for_endpoint = nw_path_create_evaluator_for_endpoint(v5, (void *)v7);
    id v14 = v3[22];
    v3[22] = evaluator_for_endpoint;

    os_log_type_t v15 = (os_unfair_lock_s *)v3[22];
    if (v15)
    {
      uint64_t v16 = v15 + 24;
      __int16 v17 = v15;
      os_unfair_lock_lock(v16);
      id v18 = v17[6];
      os_unfair_lock_unlock(v16);

      if (v18)
      {
        id v19 = nw_parameters_copy_context((void *)v7);
        v37[0] = MEMORY[0x1E4F143A8];
        v37[1] = 3221225472;
        v37[2] = __nw_candidate_manager_start_ids_internal_block_invoke;
        v37[3] = &unk_1E524B9A0;
        os_log_type_t v38 = v3;
        id v18 = v18;
        id v39 = v18;
        nw_queue_context_async(v19, v37);
      }
    }
    else
    {
      id v18 = 0;
    }
    id v20 = v3[22];
    v35[0] = MEMORY[0x1E4F143A8];
    v35[1] = 3221225472;
    v35[2] = __nw_candidate_manager_start_ids_internal_block_invoke_2;
    v35[3] = &unk_1E524AEE0;
    os_log_type_t v36 = v3;
    nw_path_evaluator_set_update_handler(v20, 0, v35);

    goto LABEL_15;
  }
  __int16 v25 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  int v43 = "nw_candidate_manager_start_ids_internal";
  char v22 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t v41 = OS_LOG_TYPE_ERROR;
  char v40 = 0;
  if (!__nwlog_fault(v22, &v41, &v40)) {
    goto LABEL_49;
  }
  if (v41 == OS_LOG_TYPE_FAULT)
  {
    __int16 v23 = __nwlog_obj();
    os_log_type_t v26 = v41;
    if (os_log_type_enabled(v23, v41))
    {
      *(_DWORD *)buf = 136446210;
      int v43 = "nw_candidate_manager_start_ids_internal";
      _os_log_impl(&dword_1830D4000, v23, v26, "%{public}s called with null ids_endpoint", buf, 0xCu);
    }
    goto LABEL_48;
  }
  if (!v40)
  {
    __int16 v23 = __nwlog_obj();
    os_log_type_t v34 = v41;
    if (os_log_type_enabled(v23, v41))
    {
      *(_DWORD *)buf = 136446210;
      int v43 = "nw_candidate_manager_start_ids_internal";
      _os_log_impl(&dword_1830D4000, v23, v34, "%{public}s called with null ids_endpoint, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_48;
  }
  dispatch_time_t v30 = (char *)__nw_create_backtrace_string();
  __int16 v23 = __nwlog_obj();
  os_log_type_t v31 = v41;
  BOOL v32 = os_log_type_enabled(v23, v41);
  if (!v30)
  {
    if (v32)
    {
      *(_DWORD *)buf = 136446210;
      int v43 = "nw_candidate_manager_start_ids_internal";
      _os_log_impl(&dword_1830D4000, v23, v31, "%{public}s called with null ids_endpoint, no backtrace", buf, 0xCu);
    }
    goto LABEL_48;
  }
  if (v32)
  {
    *(_DWORD *)buf = 136446466;
    int v43 = "nw_candidate_manager_start_ids_internal";
    __int16 v44 = 2082;
    uint64_t v45 = v30;
    _os_log_impl(&dword_1830D4000, v23, v31, "%{public}s called with null ids_endpoint, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v30);
  if (v22) {
    goto LABEL_50;
  }
LABEL_15:
}

void sub_18362F4EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,void *a23)
{
  _Unwind_Resume(a1);
}

void nw_candidate_manager_start_awdl_resolver(NWConcrete_nw_candidate_manager *a1)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  id v2 = v1;
  if (!v1)
  {
    id v19 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    int v43 = "nw_candidate_manager_start_awdl_resolver";
    id v20 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v40 = 0;
    if (!__nwlog_fault(v20, &type, &v40)) {
      goto LABEL_70;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v21 = __nwlog_obj();
      os_log_type_t v22 = type;
      if (os_log_type_enabled(v21, type))
      {
        *(_DWORD *)buf = 136446210;
        int v43 = "nw_candidate_manager_start_awdl_resolver";
        _os_log_impl(&dword_1830D4000, v21, v22, "%{public}s called with null manager", buf, 0xCu);
      }
    }
    else if (v40)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v21 = __nwlog_obj();
      os_log_type_t v28 = type;
      BOOL v29 = os_log_type_enabled(v21, type);
      if (backtrace_string)
      {
        if (v29)
        {
          *(_DWORD *)buf = 136446466;
          int v43 = "nw_candidate_manager_start_awdl_resolver";
          __int16 v44 = 2082;
          uint64_t v45 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v21, v28, "%{public}s called with null manager, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_70:
        if (!v20) {
          goto LABEL_20;
        }
LABEL_71:
        free(v20);
        goto LABEL_20;
      }
      if (v29)
      {
        *(_DWORD *)buf = 136446210;
        int v43 = "nw_candidate_manager_start_awdl_resolver";
        _os_log_impl(&dword_1830D4000, v21, v28, "%{public}s called with null manager, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v21 = __nwlog_obj();
      os_log_type_t v35 = type;
      if (os_log_type_enabled(v21, type))
      {
        *(_DWORD *)buf = 136446210;
        int v43 = "nw_candidate_manager_start_awdl_resolver";
        _os_log_impl(&dword_1830D4000, v21, v35, "%{public}s called with null manager, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_69:

    goto LABEL_70;
  }
  if (!v1->service)
  {
    __int16 v23 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    int v43 = "nw_candidate_manager_start_awdl_resolver";
    id v20 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v40 = 0;
    if (!__nwlog_fault(v20, &type, &v40)) {
      goto LABEL_70;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v21 = __nwlog_obj();
      os_log_type_t v24 = type;
      if (os_log_type_enabled(v21, type))
      {
        *(_DWORD *)buf = 136446210;
        int v43 = "nw_candidate_manager_start_awdl_resolver";
        _os_log_impl(&dword_1830D4000, v21, v24, "%{public}s called with null manager->service", buf, 0xCu);
      }
      goto LABEL_69;
    }
    if (!v40)
    {
      BOOL v21 = __nwlog_obj();
      os_log_type_t v36 = type;
      if (os_log_type_enabled(v21, type))
      {
        *(_DWORD *)buf = 136446210;
        int v43 = "nw_candidate_manager_start_awdl_resolver";
        _os_log_impl(&dword_1830D4000, v21, v36, "%{public}s called with null manager->service, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_69;
    }
    dispatch_time_t v30 = (char *)__nw_create_backtrace_string();
    BOOL v21 = __nwlog_obj();
    os_log_type_t v31 = type;
    BOOL v32 = os_log_type_enabled(v21, type);
    if (!v30)
    {
      if (v32)
      {
        *(_DWORD *)buf = 136446210;
        int v43 = "nw_candidate_manager_start_awdl_resolver";
        _os_log_impl(&dword_1830D4000, v21, v31, "%{public}s called with null manager->service, no backtrace", buf, 0xCu);
      }
      goto LABEL_69;
    }
    if (v32)
    {
      *(_DWORD *)buf = 136446466;
      int v43 = "nw_candidate_manager_start_awdl_resolver";
      __int16 v44 = 2082;
      uint64_t v45 = v30;
      _os_log_impl(&dword_1830D4000, v21, v31, "%{public}s called with null manager->service, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_50;
  }
  if (!nw_parameters_get_include_peer_to_peer((nw_parameters_t)v1->parameters))
  {
    __int16 v25 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    int v43 = "nw_candidate_manager_start_awdl_resolver";
    id v20 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v40 = 0;
    if (!__nwlog_fault(v20, &type, &v40)) {
      goto LABEL_70;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v21 = __nwlog_obj();
      os_log_type_t v26 = type;
      if (os_log_type_enabled(v21, type))
      {
        *(_DWORD *)buf = 136446210;
        int v43 = "nw_candidate_manager_start_awdl_resolver";
        _os_log_impl(&dword_1830D4000, v21, v26, "%{public}s called with null nw_parameters_get_include_peer_to_peer(manager->parameters)", buf, 0xCu);
      }
      goto LABEL_69;
    }
    if (!v40)
    {
      BOOL v21 = __nwlog_obj();
      os_log_type_t v37 = type;
      if (os_log_type_enabled(v21, type))
      {
        *(_DWORD *)buf = 136446210;
        int v43 = "nw_candidate_manager_start_awdl_resolver";
        _os_log_impl(&dword_1830D4000, v21, v37, "%{public}s called with null nw_parameters_get_include_peer_to_peer(manager->parameters), backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_69;
    }
    dispatch_time_t v30 = (char *)__nw_create_backtrace_string();
    BOOL v21 = __nwlog_obj();
    os_log_type_t v33 = type;
    BOOL v34 = os_log_type_enabled(v21, type);
    if (!v30)
    {
      if (v34)
      {
        *(_DWORD *)buf = 136446210;
        int v43 = "nw_candidate_manager_start_awdl_resolver";
        _os_log_impl(&dword_1830D4000, v21, v33, "%{public}s called with null nw_parameters_get_include_peer_to_peer(manager->parameters), no backtrace", buf, 0xCu);
      }
      goto LABEL_69;
    }
    if (v34)
    {
      *(_DWORD *)buf = 136446466;
      int v43 = "nw_candidate_manager_start_awdl_resolver";
      __int16 v44 = 2082;
      uint64_t v45 = v30;
      _os_log_impl(&dword_1830D4000, v21, v33, "%{public}s called with null nw_parameters_get_include_peer_to_peer(manager->parameters), dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_50:

    free(v30);
    if (!v20) {
      goto LABEL_20;
    }
    goto LABEL_71;
  }
  if (v2->awdl_service_resolver)
  {
    if (__nwlog_candidate_manager_log::onceToken != -1) {
      dispatch_once(&__nwlog_candidate_manager_log::onceToken, &__block_literal_global_24);
    }
    uint64_t v3 = (id)gcandidate_managerLogObj;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      unint64_t log_id = (char *)v2->log_id;
      *(_DWORD *)buf = 136446466;
      int v43 = "nw_candidate_manager_start_awdl_resolver";
      __int16 v44 = 2048;
      uint64_t v45 = log_id;
      _os_log_impl(&dword_1830D4000, v3, OS_LOG_TYPE_INFO, "%{public}s [CM%zu] AWDL service resolver already running", buf, 0x16u);
    }
  }
  else
  {
    __int16 v5 = nw_interface_create_with_name("awdl0");
    if (v5)
    {
      id v6 = v2->parameters;
      BOOL v7 = -[NWConcrete_nw_parameters initWithParameters:stripConnected:shallowCopy:]((id *)[NWConcrete_nw_parameters alloc], v6, 0, 0);

      nw_parameters_require_interface((nw_parameters_t)v7, &v5->super);
      evaluator_for_endpoint = nw_path_create_evaluator_for_endpoint(v2->service, (void *)v7);
      xpc_object_t v9 = (os_unfair_lock_s *)evaluator_for_endpoint;
      if (evaluator_for_endpoint)
      {
        xpc_object_t v10 = evaluator_for_endpoint;
        os_unfair_lock_lock(v9 + 24);
        id v11 = v10[6];
        os_unfair_lock_unlock(v9 + 24);
      }
      else
      {
        id v11 = 0;
      }
      os_log_type_t v12 = nw_resolver_create_with_path(v11);
      awdl_service_resolver = v2->awdl_service_resolver;
      v2->awdl_service_resolver = (OS_nw_resolver *)v12;

      if (__nwlog_candidate_manager_log::onceToken != -1) {
        dispatch_once(&__nwlog_candidate_manager_log::onceToken, &__block_literal_global_24);
      }
      id v14 = (id)gcandidate_managerLogObj;
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        os_log_type_t v15 = (char *)v2->log_id;
        uint64_t v16 = v2->awdl_service_resolver;
        service = v2->service;
        *(_DWORD *)buf = 136446978;
        int v43 = "nw_candidate_manager_start_awdl_resolver";
        __int16 v44 = 2048;
        uint64_t v45 = v15;
        __int16 v46 = 2112;
        uint64_t v47 = v16;
        __int16 v48 = 2112;
        uint64_t v49 = service;
        _os_log_impl(&dword_1830D4000, v14, OS_LOG_TYPE_DEFAULT, "%{public}s [CM%zu] Created AWDL service resolver %@ for %@", buf, 0x2Au);
      }

      id v18 = v2->awdl_service_resolver;
      v38[0] = MEMORY[0x1E4F143A8];
      v38[1] = 3221225472;
      v38[2] = ___ZL40nw_candidate_manager_start_awdl_resolverP31NWConcrete_nw_candidate_manager_block_invoke;
      v38[3] = &unk_1E523AC20;
      id v39 = v2;
      nw_resolver_set_update_handler(v18, 0, v38);
    }
  }
LABEL_20:
}

void sub_18362FE64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

void ___ZL40nw_candidate_manager_start_awdl_resolverP31NWConcrete_nw_candidate_manager_block_invoke(uint64_t a1, int a2, void *a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  __int16 v5 = a3;
  if (__nwlog_candidate_manager_log::onceToken != -1) {
    dispatch_once(&__nwlog_candidate_manager_log::onceToken, &__block_literal_global_24);
  }
  id v6 = (id)gcandidate_managerLogObj;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    uint64_t v8 = *(void *)(v7 + 8);
    xpc_object_t v9 = "invalid";
    if (a2 == 2) {
      xpc_object_t v9 = "complete";
    }
    xpc_object_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 40);
    *(void *)&uint8_t buf[4] = "nw_candidate_manager_start_awdl_resolver_block_invoke";
    *(_DWORD *)buf = 136447234;
    *(_WORD *)&buf[12] = 2048;
    if (a2 == 1) {
      xpc_object_t v9 = "in-progress";
    }
    *(void *)&buf[14] = v8;
    *(_WORD *)&buf[22] = 2112;
    id v20 = v10;
    *(_WORD *)BOOL v21 = 2082;
    *(void *)&v21[2] = v9;
    *(_WORD *)&v21[10] = 2112;
    *(void *)&v21[12] = v5;
    _os_log_impl(&dword_1830D4000, v6, OS_LOG_TYPE_DEFAULT, "%{public}s [CM%zu] %@ %{public}s resolves to %@", buf, 0x34u);
  }

  *(void *)buf = 0;
  *(void *)&buf[8] = buf;
  *(void *)&buf[16] = 0x3032000000;
  id v20 = __Block_byref_object_copy__2746;
  *(void *)BOOL v21 = __Block_byref_object_dispose__2747;
  *(void *)&v21[8] = 0;
  if (v5)
  {
    v18[0] = MEMORY[0x1E4F143A8];
    v18[1] = 3221225472;
    v18[2] = ___ZL40nw_candidate_manager_start_awdl_resolverP31NWConcrete_nw_candidate_manager_block_invoke_170;
    v18[3] = &unk_1E5248058;
    void v18[4] = buf;
    nw_array_apply(v5, (uint64_t)v18);
    id v11 = *(void **)(*(void *)&buf[8] + 40);
  }
  else
  {
    id v11 = 0;
  }
  if ((nw_endpoint_is_equal(*(void **)(*(void *)(a1 + 32) + 64), v11, 1) & 1) == 0)
  {
    nw_candidate_manager_remove_hostname_resolver(*(void **)(a1 + 32), *(void **)(*(void *)(a1 + 32) + 64));
    objc_storeStrong((id *)(*(void *)(a1 + 32) + 64), *(id *)(*(void *)&buf[8] + 40));
    os_log_type_t v12 = *(void **)(a1 + 32);
    char v13 = (void *)v12[8];
    if (v13)
    {
      if (!v12[11])
      {
        uint64_t v14 = [MEMORY[0x1E4F1CA60] dictionary];
        uint64_t v15 = *(void *)(a1 + 32);
        uint64_t v16 = *(void **)(v15 + 88);
        *(void *)(v15 + 88) = v14;

        os_log_type_t v12 = *(void **)(a1 + 32);
        char v13 = (void *)v12[8];
      }
      __int16 v17 = nw_candidate_manager_resolver_for_service_resolved_endpoint(v12, v13);
      [*(id *)(*(void *)(a1 + 32) + 88) setObject:v17 forKeyedSubscript:*(void *)(*(void *)(a1 + 32) + 64)];
    }
  }
  _Block_object_dispose(buf, 8);
}

void sub_183630164(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__2746(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__2747(uint64_t a1)
{
}

uint64_t ___ZL40nw_candidate_manager_start_awdl_resolverP31NWConcrete_nw_candidate_manager_block_invoke_170(uint64_t a1, int a2, id obj)
{
  return 0;
}

void nw_candidate_manager_remove_hostname_resolver(void *a1, void *a2)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1;
  id v4 = a2;
  __int16 v5 = v4;
  if (!v3)
  {
    os_log_type_t v24 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v35 = "nw_candidate_manager_remove_hostname_resolver";
    __int16 v25 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v32 = 0;
    if (__nwlog_fault(v25, &type, &v32))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v26 = __nwlog_obj();
        os_log_type_t v27 = type;
        if (os_log_type_enabled(v26, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v35 = "nw_candidate_manager_remove_hostname_resolver";
          _os_log_impl(&dword_1830D4000, v26, v27, "%{public}s called with null manager", buf, 0xCu);
        }
      }
      else if (v32)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v26 = __nwlog_obj();
        os_log_type_t v29 = type;
        BOOL v30 = os_log_type_enabled(v26, type);
        if (backtrace_string)
        {
          if (v30)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v35 = "nw_candidate_manager_remove_hostname_resolver";
            __int16 v36 = 2082;
            os_log_type_t v37 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v26, v29, "%{public}s called with null manager, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_56;
        }
        if (v30)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v35 = "nw_candidate_manager_remove_hostname_resolver";
          _os_log_impl(&dword_1830D4000, v26, v29, "%{public}s called with null manager, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        os_log_type_t v26 = __nwlog_obj();
        os_log_type_t v31 = type;
        if (os_log_type_enabled(v26, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v35 = "nw_candidate_manager_remove_hostname_resolver";
          _os_log_impl(&dword_1830D4000, v26, v31, "%{public}s called with null manager, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_56:
    if (v25) {
      free(v25);
    }
    goto LABEL_21;
  }
  if (v4)
  {
    id v6 = [v3[11] objectForKeyedSubscript:v4];
    if (v6)
    {
      [v3[11] removeObjectForKey:v5];
      if (__nwlog_candidate_manager_log::onceToken != -1) {
        dispatch_once(&__nwlog_candidate_manager_log::onceToken, &__block_literal_global_24);
      }
      uint64_t v7 = (id)gcandidate_managerLogObj;
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v8 = (char *)v3[1];
        *(_DWORD *)buf = 136446978;
        os_log_type_t v35 = "nw_candidate_manager_remove_hostname_resolver";
        __int16 v36 = 2048;
        os_log_type_t v37 = v8;
        __int16 v38 = 2112;
        id v39 = v6;
        __int16 v40 = 2112;
        os_log_type_t v41 = v5;
        _os_log_impl(&dword_1830D4000, v7, OS_LOG_TYPE_DEBUG, "%{public}s [CM%zu] Removed %@ for %@", buf, 0x2Au);
      }

      nw_resolver_cancel(v6);
      goto LABEL_20;
    }
    if (__nwlog_candidate_manager_log::onceToken != -1) {
      dispatch_once(&__nwlog_candidate_manager_log::onceToken, &__block_literal_global_24);
    }
    id v9 = (id)gcandidate_managerLogObj;
    xpc_object_t v10 = (char *)v3[1];
    *(_DWORD *)buf = 136446722;
    os_log_type_t v35 = "nw_candidate_manager_remove_hostname_resolver";
    __int16 v36 = 2048;
    os_log_type_t v37 = v10;
    __int16 v38 = 2112;
    id v39 = v5;
    id v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v32 = 0;
    if (__nwlog_fault(v11, &type, &v32))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        if (__nwlog_candidate_manager_log::onceToken != -1) {
          dispatch_once(&__nwlog_candidate_manager_log::onceToken, &__block_literal_global_24);
        }
        os_log_type_t v12 = (id)gcandidate_managerLogObj;
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v12, type))
        {
          uint64_t v14 = (char *)v3[1];
          *(_DWORD *)buf = 136446722;
          os_log_type_t v35 = "nw_candidate_manager_remove_hostname_resolver";
          __int16 v36 = 2048;
          os_log_type_t v37 = v14;
          __int16 v38 = 2112;
          id v39 = v5;
          _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s [CM%zu] No resolver for %@", buf, 0x20u);
        }
      }
      else if (v32)
      {
        uint64_t v15 = __nw_create_backtrace_string();
        if (v15)
        {
          uint64_t v16 = (char *)v15;
          if (__nwlog_candidate_manager_log::onceToken != -1) {
            dispatch_once(&__nwlog_candidate_manager_log::onceToken, &__block_literal_global_24);
          }
          __int16 v17 = (id)gcandidate_managerLogObj;
          os_log_type_t v18 = type;
          if (os_log_type_enabled(v17, type))
          {
            id v19 = (char *)v3[1];
            *(_DWORD *)buf = 136446978;
            os_log_type_t v35 = "nw_candidate_manager_remove_hostname_resolver";
            __int16 v36 = 2048;
            os_log_type_t v37 = v19;
            __int16 v38 = 2112;
            id v39 = v5;
            __int16 v40 = 2082;
            os_log_type_t v41 = v16;
            _os_log_impl(&dword_1830D4000, v17, v18, "%{public}s [CM%zu] No resolver for %@, dumping backtrace:%{public}s", buf, 0x2Au);
          }

          free(v16);
          if (!v11) {
            goto LABEL_20;
          }
          goto LABEL_19;
        }
        if (__nwlog_candidate_manager_log::onceToken != -1) {
          dispatch_once(&__nwlog_candidate_manager_log::onceToken, &__block_literal_global_24);
        }
        os_log_type_t v12 = (id)gcandidate_managerLogObj;
        os_log_type_t v22 = type;
        if (os_log_type_enabled(v12, type))
        {
          __int16 v23 = (char *)v3[1];
          *(_DWORD *)buf = 136446722;
          os_log_type_t v35 = "nw_candidate_manager_remove_hostname_resolver";
          __int16 v36 = 2048;
          os_log_type_t v37 = v23;
          __int16 v38 = 2112;
          id v39 = v5;
          _os_log_impl(&dword_1830D4000, v12, v22, "%{public}s [CM%zu] No resolver for %@, no backtrace", buf, 0x20u);
        }
      }
      else
      {
        if (__nwlog_candidate_manager_log::onceToken != -1) {
          dispatch_once(&__nwlog_candidate_manager_log::onceToken, &__block_literal_global_24);
        }
        os_log_type_t v12 = (id)gcandidate_managerLogObj;
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v12, type))
        {
          BOOL v21 = (char *)v3[1];
          *(_DWORD *)buf = 136446722;
          os_log_type_t v35 = "nw_candidate_manager_remove_hostname_resolver";
          __int16 v36 = 2048;
          os_log_type_t v37 = v21;
          __int16 v38 = 2112;
          id v39 = v5;
          _os_log_impl(&dword_1830D4000, v12, v20, "%{public}s [CM%zu] No resolver for %@, backtrace limit exceeded", buf, 0x20u);
        }
      }
    }
    if (!v11)
    {
LABEL_20:

      goto LABEL_21;
    }
LABEL_19:
    free(v11);
    goto LABEL_20;
  }
LABEL_21:
}

void sub_1836308BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL59nw_candidate_manager_resolver_for_service_resolved_endpointP31NWConcrete_nw_candidate_managerPU25objcproto14OS_nw_endpoint8NSObject_block_invoke(id *a1, int a2, void *a3)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  __int16 v5 = a3;
  if (__nwlog_candidate_manager_log::onceToken != -1) {
    dispatch_once(&__nwlog_candidate_manager_log::onceToken, &__block_literal_global_24);
  }
  id v6 = (id)gcandidate_managerLogObj;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    id v7 = a1[5];
    uint64_t v8 = "invalid";
    if (a2 == 2) {
      uint64_t v8 = "complete";
    }
    uint64_t v9 = *((void *)a1[4] + 1);
    uint64_t v15 = "nw_candidate_manager_resolver_for_service_resolved_endpoint_block_invoke";
    *(_DWORD *)buf = 136447234;
    __int16 v16 = 2048;
    if (a2 == 1) {
      uint64_t v8 = "in-progress";
    }
    uint64_t v17 = v9;
    __int16 v18 = 2112;
    id v19 = v7;
    __int16 v20 = 2082;
    BOOL v21 = v8;
    __int16 v22 = 2112;
    __int16 v23 = v5;
    _os_log_impl(&dword_1830D4000, v6, OS_LOG_TYPE_DEFAULT, "%{public}s [CM%zu] %@ %{public}s resolves to %@", buf, 0x34u);
  }

  if (v5)
  {
    v10[0] = MEMORY[0x1E4F143A8];
    v10[1] = 3221225472;
    v10[2] = ___ZL59nw_candidate_manager_resolver_for_service_resolved_endpointP31NWConcrete_nw_candidate_managerPU25objcproto14OS_nw_endpoint8NSObject_block_invoke_160;
    v10[3] = &unk_1E52497B8;
    id v11 = a1[6];
    id v12 = a1[5];
    id v13 = a1[4];
    nw_array_apply(v5, (uint64_t)v10);
  }
}

uint64_t ___ZL59nw_candidate_manager_resolver_for_service_resolved_endpointP31NWConcrete_nw_candidate_managerPU25objcproto14OS_nw_endpoint8NSObject_block_invoke_160(void **a1, uint64_t a2, void *a3)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  evaluator_for_endpoint = nw_path_create_evaluator_for_endpoint(v4, a1[4]);
  id v6 = nw_endpoint_copy_interface(a1[5]);
  if (v6)
  {
    id v7 = a1[6];
    id v8 = v4;
    id v47 = v6;
    uint64_t v9 = evaluator_for_endpoint;
    xpc_object_t v10 = (os_unfair_lock_s *)v9;
    if (v7)
    {
      if (v8)
      {
        if (v9)
        {
          nw_endpoint_set_interface(v8, 0);
          id v11 = v10;
          os_unfair_lock_lock(v10 + 24);
          id v12 = v11[6];
          os_unfair_lock_unlock(v10 + 24);

          if (nw_path_is_direct(v12))
          {
            id v13 = v47;
            int v14 = v13[24];

            if (v14 == 3)
            {
              char v15 = 10;
LABEL_12:
              *(void *)buf = 0;
              *(void *)&buf[8] = 0;
              nw_path_get_nexus_agent_uuid(v12, buf);
              char v20 = v15;
              BOOL v21 = v47;
              __int16 v22 = nw_interface_option_details_create(v47, buf, v8, v20, 0, -1);
              nw_interface_option_details_set_evaluator(v22, v11);
              nw_candidate_create(v7, v22, v11);
              __int16 v23 = (NWCandidate *)objc_claimAutoreleasedReturnValue();
              nw_candidate_manager_process_candidate_internal(v7, v23);

LABEL_13:
              goto LABEL_14;
            }
            __int16 v16 = v13;
            int v17 = v13[24];

            if (v17 == 1)
            {
              __int16 v18 = v16;
              int v19 = v18[25];

              if (v19 == 1001)
              {
                char v15 = -1;
              }
              else
              {
                __int16 v25 = v18;
                int v26 = v18[25];

                if (v26 == 1002) {
                  char v15 = 0;
                }
                else {
                  char v15 = -2;
                }
              }
              goto LABEL_12;
            }
          }
          char v15 = -2;
          goto LABEL_12;
        }
        os_log_type_t v33 = __nwlog_obj();
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_candidate_manager_process_bonjour_candidate";
        os_log_type_t v28 = (char *)_os_log_send_and_compose_impl();

        BOOL v21 = v47;
        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v48 = 0;
        if (!__nwlog_fault(v28, &type, &v48)) {
          goto LABEL_67;
        }
        if (type == OS_LOG_TYPE_FAULT)
        {
          os_log_type_t v29 = __nwlog_obj();
          os_log_type_t v34 = type;
          if (os_log_type_enabled(v29, type))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_candidate_manager_process_bonjour_candidate";
            _os_log_impl(&dword_1830D4000, v29, v34, "%{public}s called with null evaluator", buf, 0xCu);
          }
LABEL_32:

          goto LABEL_67;
        }
        if (v48)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          __int16 v36 = __nwlog_obj();
          os_log_type_t v42 = type;
          BOOL v43 = os_log_type_enabled(v36, type);
          if (backtrace_string)
          {
            if (v43)
            {
              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_candidate_manager_process_bonjour_candidate";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = backtrace_string;
              _os_log_impl(&dword_1830D4000, v36, v42, "%{public}s called with null evaluator, dumping backtrace:%{public}s", buf, 0x16u);
            }
            goto LABEL_47;
          }
          if (v43)
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_candidate_manager_process_bonjour_candidate";
            _os_log_impl(&dword_1830D4000, v36, v42, "%{public}s called with null evaluator, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          __int16 v36 = __nwlog_obj();
          os_log_type_t v46 = type;
          if (os_log_type_enabled(v36, type))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_candidate_manager_process_bonjour_candidate";
            _os_log_impl(&dword_1830D4000, v36, v46, "%{public}s called with null evaluator, backtrace limit exceeded", buf, 0xCu);
          }
        }
      }
      else
      {
        os_log_type_t v31 = __nwlog_obj();
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_candidate_manager_process_bonjour_candidate";
        os_log_type_t v28 = (char *)_os_log_send_and_compose_impl();

        BOOL v21 = v47;
        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v48 = 0;
        if (!__nwlog_fault(v28, &type, &v48)) {
          goto LABEL_67;
        }
        if (type == OS_LOG_TYPE_FAULT)
        {
          os_log_type_t v29 = __nwlog_obj();
          os_log_type_t v32 = type;
          if (os_log_type_enabled(v29, type))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_candidate_manager_process_bonjour_candidate";
            _os_log_impl(&dword_1830D4000, v29, v32, "%{public}s called with null destination", buf, 0xCu);
          }
          goto LABEL_32;
        }
        if (v48)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          __int16 v36 = __nwlog_obj();
          os_log_type_t v40 = type;
          BOOL v41 = os_log_type_enabled(v36, type);
          if (backtrace_string)
          {
            if (v41)
            {
              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_candidate_manager_process_bonjour_candidate";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = backtrace_string;
              _os_log_impl(&dword_1830D4000, v36, v40, "%{public}s called with null destination, dumping backtrace:%{public}s", buf, 0x16u);
            }
LABEL_47:

            BOOL v21 = v47;
            free(backtrace_string);
            if (!v28) {
              goto LABEL_13;
            }
            goto LABEL_68;
          }
          if (v41)
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_candidate_manager_process_bonjour_candidate";
            _os_log_impl(&dword_1830D4000, v36, v40, "%{public}s called with null destination, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          __int16 v36 = __nwlog_obj();
          os_log_type_t v45 = type;
          if (os_log_type_enabled(v36, type))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_candidate_manager_process_bonjour_candidate";
            _os_log_impl(&dword_1830D4000, v36, v45, "%{public}s called with null destination, backtrace limit exceeded", buf, 0xCu);
          }
        }
      }
    }
    else
    {
      os_log_type_t v27 = __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_candidate_manager_process_bonjour_candidate";
      os_log_type_t v28 = (char *)_os_log_send_and_compose_impl();

      BOOL v21 = v47;
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v48 = 0;
      if (!__nwlog_fault(v28, &type, &v48)) {
        goto LABEL_67;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v29 = __nwlog_obj();
        os_log_type_t v30 = type;
        if (os_log_type_enabled(v29, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_candidate_manager_process_bonjour_candidate";
          _os_log_impl(&dword_1830D4000, v29, v30, "%{public}s called with null candidate_manager", buf, 0xCu);
        }
        goto LABEL_32;
      }
      if (v48)
      {
        os_log_type_t v35 = (char *)__nw_create_backtrace_string();
        __int16 v36 = __nwlog_obj();
        os_log_type_t v37 = type;
        BOOL v38 = os_log_type_enabled(v36, type);
        if (v35)
        {
          if (v38)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_candidate_manager_process_bonjour_candidate";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v35;
            _os_log_impl(&dword_1830D4000, v36, v37, "%{public}s called with null candidate_manager, dumping backtrace:%{public}s", buf, 0x16u);
          }

          BOOL v21 = v47;
          free(v35);
LABEL_67:
          if (!v28) {
            goto LABEL_13;
          }
LABEL_68:
          free(v28);
          goto LABEL_13;
        }
        if (v38)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_candidate_manager_process_bonjour_candidate";
          _os_log_impl(&dword_1830D4000, v36, v37, "%{public}s called with null candidate_manager, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __int16 v36 = __nwlog_obj();
        os_log_type_t v44 = type;
        if (os_log_type_enabled(v36, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_candidate_manager_process_bonjour_candidate";
          _os_log_impl(&dword_1830D4000, v36, v44, "%{public}s called with null candidate_manager, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }

    BOOL v21 = v47;
    goto LABEL_67;
  }
LABEL_14:

  return 1;
}

void sub_183631374(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

uint64_t nw_candidate_manager_process_candidate_internal(NWConcrete_nw_candidate_manager *a1, NWCandidate *a2)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1;
  id v4 = a2;
  __int16 v5 = v4;
  if (v3)
  {
    if (v4)
    {
      if (__nwlog_candidate_manager_log::onceToken != -1) {
        dispatch_once(&__nwlog_candidate_manager_log::onceToken, &__block_literal_global_24);
      }
      id v6 = (id)gcandidate_managerLogObj;
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        unint64_t log_id = v3->log_id;
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_candidate_manager_process_candidate_internal";
        *(_WORD *)&buf[12] = 2048;
        *(void *)&buf[14] = log_id;
        *(_WORD *)&unsigned char buf[22] = 2112;
        int v57 = v5;
        _os_log_impl(&dword_1830D4000, v6, OS_LOG_TYPE_INFO, "%{public}s [CM%zu] Checking candidate %@", buf, 0x20u);
      }

      uint64_t v46 = 0;
      id v47 = &v46;
      uint64_t v48 = 0x2020000000;
      char v49 = 0;
      candidates = (atomic_uchar *)v3->candidates;
      v43[0] = MEMORY[0x1E4F143A8];
      v43[1] = 3221225472;
      v43[2] = ___ZL47nw_candidate_manager_process_candidate_internalP31NWConcrete_nw_candidate_managerP11NWCandidate_block_invoke;
      v43[3] = &unk_1E524A2E8;
      uint64_t v9 = v5;
      os_log_type_t v44 = v9;
      os_log_type_t v45 = &v46;
      nw_array_apply(candidates, (uint64_t)v43);
      if (*((unsigned char *)v47 + 24))
      {
        if (__nwlog_candidate_manager_log::onceToken != -1) {
          dispatch_once(&__nwlog_candidate_manager_log::onceToken, &__block_literal_global_24);
        }
        xpc_object_t v10 = (id)gcandidate_managerLogObj;
        if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
        {
          unint64_t v11 = v3->log_id;
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = "nw_candidate_manager_process_candidate_internal";
          *(_WORD *)&buf[12] = 2048;
          *(void *)&buf[14] = v11;
          *(_WORD *)&unsigned char buf[22] = 2112;
          int v57 = v9;
          _os_log_impl(&dword_1830D4000, v10, OS_LOG_TYPE_INFO, "%{public}s [CM%zu] Candidate %@ already collected, ignoring", buf, 0x20u);
        }
      }
      else
      {
        original_remote_endpoint = v3->original_remote_endpoint;
        id v13 = nw_interface_option_details_copy_remote_endpoint(v9->details);
        LODWORD(original_remote_endpoint) = nw_endpoint_is_equal(original_remote_endpoint, v13, 0);

        if (!original_remote_endpoint)
        {
          nw_array_append((uint64_t)v3->candidates, v9);
          [(NWCandidate *)v9 startEvaluator];
          if ([(NWCandidate *)v9 isEligible])
          {
            nw_candidate_manager_inject(v3, v9);
          }
          else if ((*((unsigned char *)v9 + 40) & 2) != 0 {
                 || (*((unsigned char *)v3 + 184) & 2) == 0
          }
                 || v3->connection
                 || (id v17 = nw_interface_option_details_copy_interface(v9->details),
                     BOOL v18 = nw_interface_get_subtype(v17) == 1002,
                     v17,
                     !v18))
          {
            if (__nwlog_candidate_manager_log::onceToken != -1) {
              dispatch_once(&__nwlog_candidate_manager_log::onceToken, &__block_literal_global_24);
            }
            os_log_type_t v28 = (id)gcandidate_managerLogObj;
            if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
            {
              unint64_t v29 = v3->log_id;
              *(_DWORD *)buf = 136446722;
              *(void *)&uint8_t buf[4] = "nw_candidate_manager_process_candidate_internal";
              *(_WORD *)&buf[12] = 2048;
              *(void *)&buf[14] = v29;
              *(_WORD *)&unsigned char buf[22] = 2112;
              int v57 = v9;
              _os_log_impl(&dword_1830D4000, v28, OS_LOG_TYPE_INFO, "%{public}s [CM%zu] Candidate %@ not eligible", buf, 0x20u);
            }
          }
          else
          {
            int v19 = v3;
            char v20 = v9;
            BOOL v21 = nw_interface_option_details_copy_remote_endpoint(v9->details);
            nw_connection_t v22 = nw_connection_create(v21, v19[10]);

            *(void *)buf = MEMORY[0x1E4F143A8];
            *(void *)&buf[8] = 3221225472;
            *(void *)&buf[16] = ___ZL28nw_candidate_manager_connectP31NWConcrete_nw_candidate_managerP11NWCandidate_block_invoke;
            int v57 = (NWCandidate *)&unk_1E524BB98;
            __int16 v23 = v19;
            int v58 = v23;
            uint64_t v24 = v22;
            __int16 v59 = v24;
            nw_connection_set_state_changed_handler(&v24->super, buf);
            nw_candidate_manager_set_connection(v23, v24);
            *((unsigned char *)v9 + 40) |= 1u;
            if (__nwlog_candidate_manager_log::onceToken != -1) {
              dispatch_once(&__nwlog_candidate_manager_log::onceToken, &__block_literal_global_24);
            }
            __int16 v25 = (id)gcandidate_managerLogObj;
            if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
            {
              unint64_t v26 = v23->log_id;
              *(_DWORD *)uint64_t v50 = 136446722;
              uint64_t v51 = "nw_candidate_manager_connect";
              __int16 v52 = 2048;
              unint64_t v53 = v26;
              __int16 v54 = 2112;
              __int16 v55 = v24;
              _os_log_impl(&dword_1830D4000, v25, OS_LOG_TYPE_INFO, "%{public}s [CM%zu] Created outgoing connection %@", v50, 0x20u);
            }

            new_connection_handler = (void (**)(id, NWConcrete_nw_connection *))v23->new_connection_handler;
            if (new_connection_handler) {
              new_connection_handler[2](new_connection_handler, v24);
            }
          }
          uint64_t v15 = 1;
          goto LABEL_19;
        }
        if (__nwlog_candidate_manager_log::onceToken != -1) {
          dispatch_once(&__nwlog_candidate_manager_log::onceToken, &__block_literal_global_24);
        }
        xpc_object_t v10 = (id)gcandidate_managerLogObj;
        if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
        {
          unint64_t v14 = v3->log_id;
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = "nw_candidate_manager_process_candidate_internal";
          *(_WORD *)&buf[12] = 2048;
          *(void *)&buf[14] = v14;
          *(_WORD *)&unsigned char buf[22] = 2112;
          int v57 = v9;
          _os_log_impl(&dword_1830D4000, v10, OS_LOG_TYPE_INFO, "%{public}s [CM%zu] Candidate %@ matches original, ignoring", buf, 0x20u);
        }
      }

      uint64_t v15 = 0;
LABEL_19:

      _Block_object_dispose(&v46, 8);
      goto LABEL_20;
    }
    os_log_type_t v34 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_candidate_manager_process_candidate_internal";
    os_log_type_t v31 = (char *)_os_log_send_and_compose_impl();

    v50[0] = 16;
    LOBYTE(v46) = 0;
    if (__nwlog_fault(v31, v50, &v46))
    {
      if (v50[0] == 17)
      {
        os_log_type_t v32 = __nwlog_obj();
        os_log_type_t v35 = v50[0];
        if (os_log_type_enabled(v32, (os_log_type_t)v50[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_candidate_manager_process_candidate_internal";
          _os_log_impl(&dword_1830D4000, v32, v35, "%{public}s called with null new_candidate", buf, 0xCu);
        }
LABEL_71:

        goto LABEL_72;
      }
      if (!(_BYTE)v46)
      {
        os_log_type_t v32 = __nwlog_obj();
        os_log_type_t v42 = v50[0];
        if (os_log_type_enabled(v32, (os_log_type_t)v50[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_candidate_manager_process_candidate_internal";
          _os_log_impl(&dword_1830D4000, v32, v42, "%{public}s called with null new_candidate, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_71;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v32 = __nwlog_obj();
      os_log_type_t v39 = v50[0];
      BOOL v40 = os_log_type_enabled(v32, (os_log_type_t)v50[0]);
      if (!backtrace_string)
      {
        if (v40)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_candidate_manager_process_candidate_internal";
          _os_log_impl(&dword_1830D4000, v32, v39, "%{public}s called with null new_candidate, no backtrace", buf, 0xCu);
        }
        goto LABEL_71;
      }
      if (v40)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_candidate_manager_process_candidate_internal";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v32, v39, "%{public}s called with null new_candidate, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_59;
    }
  }
  else
  {
    os_log_type_t v30 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_candidate_manager_process_candidate_internal";
    os_log_type_t v31 = (char *)_os_log_send_and_compose_impl();

    v50[0] = 16;
    LOBYTE(v46) = 0;
    if (__nwlog_fault(v31, v50, &v46))
    {
      if (v50[0] == 17)
      {
        os_log_type_t v32 = __nwlog_obj();
        os_log_type_t v33 = v50[0];
        if (os_log_type_enabled(v32, (os_log_type_t)v50[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_candidate_manager_process_candidate_internal";
          _os_log_impl(&dword_1830D4000, v32, v33, "%{public}s called with null candidate_manager", buf, 0xCu);
        }
        goto LABEL_71;
      }
      if (!(_BYTE)v46)
      {
        os_log_type_t v32 = __nwlog_obj();
        os_log_type_t v41 = v50[0];
        if (os_log_type_enabled(v32, (os_log_type_t)v50[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_candidate_manager_process_candidate_internal";
          _os_log_impl(&dword_1830D4000, v32, v41, "%{public}s called with null candidate_manager, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_71;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v32 = __nwlog_obj();
      os_log_type_t v37 = v50[0];
      BOOL v38 = os_log_type_enabled(v32, (os_log_type_t)v50[0]);
      if (!backtrace_string)
      {
        if (v38)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_candidate_manager_process_candidate_internal";
          _os_log_impl(&dword_1830D4000, v32, v37, "%{public}s called with null candidate_manager, no backtrace", buf, 0xCu);
        }
        goto LABEL_71;
      }
      if (v38)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_candidate_manager_process_candidate_internal";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v32, v37, "%{public}s called with null candidate_manager, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_59:

      free(backtrace_string);
    }
  }
LABEL_72:
  if (v31) {
    free(v31);
  }
  uint64_t v15 = 0;
LABEL_20:

  return v15;
}

void sub_183631D90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,id a31,id a32)
{
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

BOOL ___ZL47nw_candidate_manager_process_candidate_internalP31NWConcrete_nw_candidate_managerP11NWCandidate_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  __int16 v5 = *(void **)(a1 + 32);
  unint64_t v6 = (unint64_t)v4;
  unint64_t v7 = v5;
  if (v6 | v7)
  {
    id v8 = (void *)v7;
    if (!v6 || !v7)
    {

      goto LABEL_8;
    }
    int v9 = [*(id *)(v6 + 16) isEqual:*(void *)(v7 + 16)];

    if (!v9) {
      goto LABEL_8;
    }
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
LABEL_8:
  BOOL v10 = *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) == 0;

  return v10;
}

void sub_183631EAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL28nw_candidate_manager_connectP31NWConcrete_nw_candidate_managerP11NWCandidate_block_invoke(uint64_t a1, int a2, void *a3)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  if (a2 == 3)
  {
    if (__nwlog_candidate_manager_log::onceToken != -1) {
      dispatch_once(&__nwlog_candidate_manager_log::onceToken, &__block_literal_global_24);
    }
    unint64_t v6 = (id)gcandidate_managerLogObj;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      uint64_t v7 = *(void *)(a1 + 40);
      uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 8);
      int v19 = 136446722;
      char v20 = "nw_candidate_manager_connect_block_invoke";
      __int16 v21 = 2048;
      uint64_t v22 = v8;
      __int16 v23 = 2112;
      uint64_t v24 = v7;
      _os_log_impl(&dword_1830D4000, v6, OS_LOG_TYPE_INFO, "%{public}s [CM%zu] Outgoing connection %@ is ready", (uint8_t *)&v19, 0x20u);
    }

    int v9 = *(NSObject **)(a1 + 40);
    if (nw_protocol_copy_quic_stream_definition::onceToken != -1) {
      dispatch_once(&nw_protocol_copy_quic_stream_definition::onceToken, &__block_literal_global_15_56153);
    }
    BOOL v10 = (id)nw_protocol_copy_quic_stream_definition::quic_definition;
    nw_protocol_metadata_t v11 = nw_connection_copy_protocol_metadata(v9, v10);

    if (!v11) {
      goto LABEL_19;
    }
    id v12 = v11;
    if (nw_protocol_metadata_is_quic_connection(v12))
    {
    }
    else
    {
      BOOL is_quic_stream = nw_protocol_metadata_is_quic_stream(v12);

      if (!is_quic_stream)
      {
LABEL_19:
        nw_candidate_manager_set_state(*(void *)(a1 + 32), 2);

        goto LABEL_20;
      }
    }
    id v18 = nw_quic_stream_copy_connection_metadata(v12);
    nw_quic_connection_set_keepalive(v18, 10);

    goto LABEL_19;
  }
  if ((a2 & 0xFFFFFFFE) == 4)
  {
    if (__nwlog_candidate_manager_log::onceToken != -1) {
      dispatch_once(&__nwlog_candidate_manager_log::onceToken, &__block_literal_global_24);
    }
    id v13 = (id)gcandidate_managerLogObj;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      unint64_t v14 = off_1E523DF08[a2];
      uint64_t v15 = *(void *)(a1 + 40);
      uint64_t v16 = *(void *)(*(void *)(a1 + 32) + 8);
      int v19 = 136447234;
      char v20 = "nw_candidate_manager_connect_block_invoke";
      __int16 v21 = 2048;
      uint64_t v22 = v16;
      __int16 v23 = 2112;
      uint64_t v24 = v15;
      __int16 v25 = 2080;
      unint64_t v26 = v14;
      __int16 v27 = 2112;
      id v28 = v5;
      _os_log_impl(&dword_1830D4000, v13, OS_LOG_TYPE_INFO, "%{public}s [CM%zu] Outgoing connection %@ to endpoint disconnected, state=%s, error=%@", (uint8_t *)&v19, 0x34u);
    }

    nw_candidate_manager_cancel(*(void **)(a1 + 32));
  }
LABEL_20:
}

void sub_18363216C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_candidate_manager_cancel(void *a1)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  __int16 v36 = a1;
  if (v36)
  {
    if (__nwlog_candidate_manager_log::onceToken != -1) {
      dispatch_once(&__nwlog_candidate_manager_log::onceToken, &__block_literal_global_24);
    }
    id v1 = (id)gcandidate_managerLogObj;
    if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
    {
      unint64_t log_id = v36->log_id;
      *(_DWORD *)buf = 136446722;
      os_log_type_t v45 = "nw_candidate_manager_cancel";
      __int16 v46 = 2048;
      id v47 = (char *)log_id;
      __int16 v48 = 2112;
      char v49 = v36;
      _os_log_impl(&dword_1830D4000, v1, OS_LOG_TYPE_DEFAULT, "%{public}s [CM%zu] Cancelling candidate_manager %@", buf, 0x20u);
    }

    nw_candidate_manager_set_state(v36, 4);
    nw_candidate_manager_stop_lost_path_timer(v36);
    listener = v36->listener;
    if (listener)
    {
      nw_listener_cancel(listener);
      id v4 = v36->listener;
      v36->listener = 0;
    }
    awdl_service_resolver = v36->awdl_service_resolver;
    if (awdl_service_resolver)
    {
      nw_resolver_cancel(awdl_service_resolver);
      unint64_t v6 = v36->awdl_service_resolver;
      v36->awdl_service_resolver = 0;
    }
    service_resolver = v36->service_resolver;
    if (service_resolver)
    {
      nw_resolver_cancel(service_resolver);
      uint64_t v8 = v36->service_resolver;
      v36->service_resolver = 0;
    }
    hostname_resolvers = v36->hostname_resolvers;
    if (hostname_resolvers)
    {
      BOOL v10 = [(NSMutableDictionary *)hostname_resolvers allValues];
      nw_protocol_metadata_t v11 = v36->hostname_resolvers;
      v36->hostname_resolvers = 0;

      long long v39 = 0u;
      long long v40 = 0u;
      long long v37 = 0u;
      long long v38 = 0u;
      id v12 = v10;
      uint64_t v13 = [v12 countByEnumeratingWithState:&v37 objects:v43 count:16];
      if (v13)
      {
        uint64_t v14 = *(void *)v38;
        do
        {
          uint64_t v15 = 0;
          do
          {
            if (*(void *)v38 != v14) {
              objc_enumerationMutation(v12);
            }
            uint64_t v16 = *(NWConcrete_nw_candidate_manager **)(*((void *)&v37 + 1) + 8 * v15);
            if (__nwlog_candidate_manager_log::onceToken != -1) {
              dispatch_once(&__nwlog_candidate_manager_log::onceToken, &__block_literal_global_24);
            }
            id v17 = (id)gcandidate_managerLogObj;
            if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
            {
              unint64_t v18 = v36->log_id;
              *(_DWORD *)buf = 136446722;
              os_log_type_t v45 = "nw_candidate_manager_cancel";
              __int16 v46 = 2048;
              id v47 = (char *)v18;
              __int16 v48 = 2112;
              char v49 = v16;
              _os_log_impl(&dword_1830D4000, v17, OS_LOG_TYPE_DEBUG, "%{public}s [CM%zu] Removed %@", buf, 0x20u);
            }

            nw_resolver_cancel(v16);
            ++v15;
          }
          while (v13 != v15);
          uint64_t v13 = [v12 countByEnumeratingWithState:&v37 objects:v43 count:16];
        }
        while (v13);
      }
    }
    p_super = &v36->connection->super;
    if (p_super)
    {
      nw_connection_cancel(p_super);
      connection = v36->connection;
      v36->connection = 0;
    }
    nw_candidate_manager_stop_ids(v36);
    candidates = v36->candidates;
    v36->candidates = 0;

    id state_handler = v36->state_handler;
    v36->id state_handler = 0;

    id new_connection_handler = v36->new_connection_handler;
    v36->id new_connection_handler = 0;

    parameters = v36->parameters;
    v36->parameters = 0;

    id add_eligible_details = v36->add_eligible_details;
    v36->id add_eligible_details = 0;

    id remove_eligible_details = v36->remove_eligible_details;
    v36->id remove_eligible_details = 0;

    id modify_ids_parameters = v36->modify_ids_parameters;
    v36->id modify_ids_parameters = 0;

    goto LABEL_28;
  }
  id v28 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v45 = "nw_candidate_manager_cancel";
  uint64_t v29 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v41 = 0;
  if (__nwlog_fault(v29, &type, &v41))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v30 = __nwlog_obj();
      os_log_type_t v31 = type;
      if (os_log_type_enabled(v30, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v45 = "nw_candidate_manager_cancel";
        _os_log_impl(&dword_1830D4000, v30, v31, "%{public}s called with null candidate_manager", buf, 0xCu);
      }
    }
    else if (v41)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v30 = __nwlog_obj();
      os_log_type_t v33 = type;
      BOOL v34 = os_log_type_enabled(v30, type);
      if (backtrace_string)
      {
        if (v34)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v45 = "nw_candidate_manager_cancel";
          __int16 v46 = 2082;
          id v47 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v30, v33, "%{public}s called with null candidate_manager, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_45;
      }
      if (v34)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v45 = "nw_candidate_manager_cancel";
        _os_log_impl(&dword_1830D4000, v30, v33, "%{public}s called with null candidate_manager, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v30 = __nwlog_obj();
      os_log_type_t v35 = type;
      if (os_log_type_enabled(v30, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v45 = "nw_candidate_manager_cancel";
        _os_log_impl(&dword_1830D4000, v30, v35, "%{public}s called with null candidate_manager, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_45:
  if (v29) {
    free(v29);
  }
LABEL_28:
}

void sub_183632770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void nw_candidate_manager_stop_ids(NWConcrete_nw_candidate_manager *a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1->ids_path_evaluator)
  {
    if (__nwlog_candidate_manager_log::onceToken != -1) {
      dispatch_once(&__nwlog_candidate_manager_log::onceToken, &__block_literal_global_24);
    }
    id v2 = (id)gcandidate_managerLogObj;
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      unint64_t log_id = v1->log_id;
      *(_DWORD *)buf = 136446466;
      BOOL v10 = "nw_candidate_manager_stop_ids";
      __int16 v11 = 2048;
      unint64_t v12 = log_id;
      _os_log_impl(&dword_1830D4000, v2, OS_LOG_TYPE_DEFAULT, "%{public}s [CM%zu] Stopping IDS path evaluator", buf, 0x16u);
    }

    nw_path_evaluator_cancel(v1->ids_path_evaluator);
    ids_path_evaluator = v1->ids_path_evaluator;
    v1->ids_path_evaluator = 0;
  }
  uint64_t ids_resolve_registrations = (uint64_t)v1->ids_resolve_registrations;
  if (ids_resolve_registrations)
  {
    v7[0] = MEMORY[0x1E4F143A8];
    v7[1] = 3221225472;
    v7[2] = ___ZL29nw_candidate_manager_stop_idsP31NWConcrete_nw_candidate_manager_block_invoke;
    v7[3] = &unk_1E5247FE0;
    uint64_t v8 = v1;
    nw_dictionary_apply(ids_resolve_registrations, (uint64_t)v7);
  }
  ids_endpoint = v1->ids_endpoint;
  v1->ids_endpoint = 0;
}

void sub_183632928(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __nw_candidate_manager_start_ids_internal_block_invoke(uint64_t a1)
{
}

void __nw_candidate_manager_start_ids_internal_block_invoke_2(uint64_t a1, void *a2)
{
}

void ___ZL36nw_candidate_manager_handle_ids_pathP31NWConcrete_nw_candidate_managerPU21objcproto10OS_nw_path8NSObject_block_invoke(uint64_t a1, unsigned __int8 *uu)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  memset(out, 0, 37);
  uuid_unparse(uu, out);
  if (!*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40))
  {
    id v4 = nw_dictionary_create();
    uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8);
    unint64_t v6 = *(void **)(v5 + 40);
    *(void *)(v5 + 40) = v4;
  }
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(void *)(v7 + 24);
  if (v8)
  {
    int v9 = nw_dictionary_copy_value(v8, (uint64_t)out);
    if (v9)
    {
      BOOL v10 = v9;
      nw_dictionary_set_value(*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), out, v9);

      return;
    }
    uint64_t v7 = *(void *)(a1 + 32);
  }
  int v17 = 0;
  __int16 v11 = nw_path_evaluator_create_flow_inner(*(void **)(v7 + 176), 0, 0, 0, 1, uu, 0, 0, &v17);
  unint64_t v12 = v11;
  if (v17 || !v11)
  {
    if (__nwlog_candidate_manager_log::onceToken != -1) {
      dispatch_once(&__nwlog_candidate_manager_log::onceToken, &__block_literal_global_24);
    }
    uint64_t v15 = (id)gcandidate_managerLogObj;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      uint64_t v16 = *(void *)(*(void *)(a1 + 32) + 8);
      *(_DWORD *)buf = 136446722;
      int v19 = "nw_candidate_manager_handle_ids_path_block_invoke";
      __int16 v20 = 2048;
      uint64_t v21 = v16;
      __int16 v22 = 1024;
      int v23 = v17;
      _os_log_impl(&dword_1830D4000, v15, OS_LOG_TYPE_ERROR, "%{public}s [CM%zu] nw_path_evaluator_create_flow failed: %{darwin.errno}d", buf, 0x1Cu);
    }
  }
  else
  {
    if (__nwlog_candidate_manager_log::onceToken != -1) {
      dispatch_once(&__nwlog_candidate_manager_log::onceToken, &__block_literal_global_24);
    }
    uint64_t v13 = (id)gcandidate_managerLogObj;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      uint64_t v14 = *(void *)(*(void *)(a1 + 32) + 8);
      *(_DWORD *)buf = 136446978;
      int v19 = "nw_candidate_manager_handle_ids_path_block_invoke";
      __int16 v20 = 2048;
      uint64_t v21 = v14;
      __int16 v22 = 1040;
      int v23 = 16;
      __int16 v24 = 2096;
      __int16 v25 = uu;
      _os_log_impl(&dword_1830D4000, v13, OS_LOG_TYPE_INFO, "%{public}s [CM%zu] created resolver flow to %{uuid_t}.16P", buf, 0x26u);
    }

    nw_dictionary_set_value(*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), out, v12);
  }
}

uint64_t ___ZL41nw_candidate_manager_handle_ids_endpointsP31NWConcrete_nw_candidate_managerPU22objcproto11OS_nw_array8NSObject_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  v99[2] = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  endpoint = v4;
  if ([*(id *)(a1 + 32) containsObject:v4])
  {
    [*(id *)(a1 + 32) removeObject:v4];
    goto LABEL_52;
  }
  id v84 = *(id *)(a1 + 40);
  nw_txt_record_t v5 = nw_endpoint_copy_txt_record(v4);
  unint64_t v6 = v5;
  uint64_t v83 = a1;
  if (!v5)
  {
    __int16 v36 = __nwlog_obj();
    *(_DWORD *)access_unint64_t value = 136446210;
    *(void *)&access_value[4] = "nw_candidate_manager_candidate_for_ids_resolved_endpoint";
    long long v37 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(v99[0]) = 16;
    LOBYTE(v98) = 0;
    if (__nwlog_fault(v37, v99, &v98))
    {
      if (LOBYTE(v99[0]) == 17)
      {
        long long v38 = __nwlog_obj();
        os_log_type_t v39 = v99[0];
        if (os_log_type_enabled(v38, v99[0]))
        {
          *(_DWORD *)access_unint64_t value = 136446210;
          *(void *)&access_value[4] = "nw_candidate_manager_candidate_for_ids_resolved_endpoint";
          _os_log_impl(&dword_1830D4000, v38, v39, "%{public}s called with null metadata", access_value, 0xCu);
        }
      }
      else if ((_BYTE)v98)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        long long v38 = __nwlog_obj();
        os_log_type_t v59 = v99[0];
        BOOL v60 = os_log_type_enabled(v38, v99[0]);
        if (backtrace_string)
        {
          if (v60)
          {
            *(_DWORD *)access_unint64_t value = 136446466;
            *(void *)&access_value[4] = "nw_candidate_manager_candidate_for_ids_resolved_endpoint";
            *(_WORD *)&access_value[12] = 2082;
            *(void *)&access_value[14] = backtrace_string;
            _os_log_impl(&dword_1830D4000, v38, v59, "%{public}s called with null metadata, dumping backtrace:%{public}s", access_value, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_136;
        }
        if (v60)
        {
          *(_DWORD *)access_unint64_t value = 136446210;
          *(void *)&access_value[4] = "nw_candidate_manager_candidate_for_ids_resolved_endpoint";
          _os_log_impl(&dword_1830D4000, v38, v59, "%{public}s called with null metadata, no backtrace", access_value, 0xCu);
        }
      }
      else
      {
        long long v38 = __nwlog_obj();
        os_log_type_t v75 = v99[0];
        if (os_log_type_enabled(v38, v99[0]))
        {
          *(_DWORD *)access_unint64_t value = 136446210;
          *(void *)&access_value[4] = "nw_candidate_manager_candidate_for_ids_resolved_endpoint";
          _os_log_impl(&dword_1830D4000, v38, v75, "%{public}s called with null metadata, backtrace limit exceeded", access_value, 0xCu);
        }
      }
    }
LABEL_136:
    if (v37) {
      free(v37);
    }
    uint64_t v21 = 0;
    goto LABEL_44;
  }
  uint64_t v89 = 0;
  uint64_t v82 = v5;
  if (!nw_txt_record_get_key_data_value(v5, "lcid", &v89))
  {
    long long v40 = __nwlog_obj();
    *(_DWORD *)access_unint64_t value = 136446210;
    *(void *)&access_value[4] = "nw_candidate_manager_candidate_for_ids_resolved_endpoint";
    char v41 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(v99[0]) = 16;
    LOBYTE(v98) = 0;
    if (__nwlog_fault(v41, v99, &v98))
    {
      if (LOBYTE(v99[0]) == 17)
      {
        os_log_type_t v42 = __nwlog_obj();
        os_log_type_t v43 = v99[0];
        if (os_log_type_enabled(v42, v99[0]))
        {
          *(_DWORD *)access_unint64_t value = 136446210;
          *(void *)&access_value[4] = "nw_candidate_manager_candidate_for_ids_resolved_endpoint";
          _os_log_impl(&dword_1830D4000, v42, v43, "%{public}s called with null nw_txt_record_get_key_data_value(metadata, kIDSKeyLocalCID, &lcid)", access_value, 0xCu);
        }
      }
      else if ((_BYTE)v98)
      {
        __int16 v61 = (char *)__nw_create_backtrace_string();
        os_log_type_t v42 = __nwlog_obj();
        os_log_type_t v62 = v99[0];
        BOOL v63 = os_log_type_enabled(v42, v99[0]);
        if (v61)
        {
          if (v63)
          {
            *(_DWORD *)access_unint64_t value = 136446466;
            *(void *)&access_value[4] = "nw_candidate_manager_candidate_for_ids_resolved_endpoint";
            *(_WORD *)&access_value[12] = 2082;
            *(void *)&access_value[14] = v61;
            _os_log_impl(&dword_1830D4000, v42, v62, "%{public}s called with null nw_txt_record_get_key_data_value(metadata, kIDSKeyLocalCID, &lcid), dumping backtrace:%{public}s", access_value, 0x16u);
          }

          free(v61);
          goto LABEL_142;
        }
        if (v63)
        {
          *(_DWORD *)access_unint64_t value = 136446210;
          *(void *)&access_value[4] = "nw_candidate_manager_candidate_for_ids_resolved_endpoint";
          _os_log_impl(&dword_1830D4000, v42, v62, "%{public}s called with null nw_txt_record_get_key_data_value(metadata, kIDSKeyLocalCID, &lcid), no backtrace", access_value, 0xCu);
        }
      }
      else
      {
        os_log_type_t v42 = __nwlog_obj();
        os_log_type_t v76 = v99[0];
        if (os_log_type_enabled(v42, v99[0]))
        {
          *(_DWORD *)access_unint64_t value = 136446210;
          *(void *)&access_value[4] = "nw_candidate_manager_candidate_for_ids_resolved_endpoint";
          _os_log_impl(&dword_1830D4000, v42, v76, "%{public}s called with null nw_txt_record_get_key_data_value(metadata, kIDSKeyLocalCID, &lcid), backtrace limit exceeded", access_value, 0xCu);
        }
      }
    }
LABEL_142:
    if (v41) {
      free(v41);
    }
    uint64_t v21 = 0;
    goto LABEL_43;
  }
  BOOL v88 = 0;
  if (!nw_txt_record_get_key_data_value(v6, "rcid", &v88))
  {
    os_log_type_t v44 = __nwlog_obj();
    *(_DWORD *)access_unint64_t value = 136446210;
    *(void *)&access_value[4] = "nw_candidate_manager_candidate_for_ids_resolved_endpoint";
    os_log_type_t v45 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(v99[0]) = 16;
    LOBYTE(v98) = 0;
    if (!__nwlog_fault(v45, v99, &v98)) {
      goto LABEL_154;
    }
    if (LOBYTE(v99[0]) == 17)
    {
      __int16 v46 = __nwlog_obj();
      os_log_type_t v47 = v99[0];
      if (os_log_type_enabled(v46, v99[0]))
      {
        *(_DWORD *)access_unint64_t value = 136446210;
        *(void *)&access_value[4] = "nw_candidate_manager_candidate_for_ids_resolved_endpoint";
        _os_log_impl(&dword_1830D4000, v46, v47, "%{public}s called with null nw_txt_record_get_key_data_value(metadata, kIDSKeyRemoteCID, &rcid)", access_value, 0xCu);
      }
    }
    else if ((_BYTE)v98)
    {
      uint64_t v64 = (char *)__nw_create_backtrace_string();
      __int16 v46 = __nwlog_obj();
      os_log_type_t v65 = v99[0];
      BOOL v66 = os_log_type_enabled(v46, v99[0]);
      if (v64)
      {
        if (v66)
        {
          *(_DWORD *)access_unint64_t value = 136446466;
          *(void *)&access_value[4] = "nw_candidate_manager_candidate_for_ids_resolved_endpoint";
          *(_WORD *)&access_value[12] = 2082;
          *(void *)&access_value[14] = v64;
          _os_log_impl(&dword_1830D4000, v46, v65, "%{public}s called with null nw_txt_record_get_key_data_value(metadata, kIDSKeyRemoteCID, &rcid), dumping backtrace:%{public}s", access_value, 0x16u);
        }

        free(v64);
LABEL_154:
        if (!v45)
        {
LABEL_156:
          uint64_t v21 = 0;
          goto LABEL_42;
        }
LABEL_155:
        free(v45);
        goto LABEL_156;
      }
      if (v66)
      {
        *(_DWORD *)access_unint64_t value = 136446210;
        *(void *)&access_value[4] = "nw_candidate_manager_candidate_for_ids_resolved_endpoint";
        _os_log_impl(&dword_1830D4000, v46, v65, "%{public}s called with null nw_txt_record_get_key_data_value(metadata, kIDSKeyRemoteCID, &rcid), no backtrace", access_value, 0xCu);
      }
    }
    else
    {
      __int16 v46 = __nwlog_obj();
      os_log_type_t v77 = v99[0];
      if (os_log_type_enabled(v46, v99[0]))
      {
        *(_DWORD *)access_unint64_t value = 136446210;
        *(void *)&access_value[4] = "nw_candidate_manager_candidate_for_ids_resolved_endpoint";
        _os_log_impl(&dword_1830D4000, v46, v77, "%{public}s called with null nw_txt_record_get_key_data_value(metadata, kIDSKeyRemoteCID, &rcid), backtrace limit exceeded", access_value, 0xCu);
      }
    }

    goto LABEL_154;
  }
  uint64_t v87 = 0;
  *(void *)access_unint64_t value = MEMORY[0x1E4F143A8];
  *(void *)&access_value[8] = 3221225472;
  *(void *)&access_value[16] = ___ZL34nw_txt_record_get_key_uint64_valuePU27objcproto16OS_nw_txt_record8NSObjectPKcPy_block_invoke;
  *(void *)uint32_t v91 = &__block_descriptor_40_e19_B36__0r_8i16r_20Q28l;
  *(void *)&v91[8] = &v87;
  if (!nw_txt_record_access_key(v6, "rift", access_value))
  {
    __int16 v48 = __nwlog_obj();
    *(_DWORD *)access_unint64_t value = 136446210;
    *(void *)&access_value[4] = "nw_candidate_manager_candidate_for_ids_resolved_endpoint";
    os_log_type_t v45 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(v99[0]) = 16;
    LOBYTE(v98) = 0;
    if (!__nwlog_fault(v45, v99, &v98)) {
      goto LABEL_154;
    }
    if (LOBYTE(v99[0]) == 17)
    {
      char v49 = __nwlog_obj();
      os_log_type_t v50 = v99[0];
      if (os_log_type_enabled(v49, v99[0]))
      {
        *(_DWORD *)access_unint64_t value = 136446210;
        *(void *)&access_value[4] = "nw_candidate_manager_candidate_for_ids_resolved_endpoint";
        _os_log_impl(&dword_1830D4000, v49, v50, "%{public}s called with null nw_txt_record_get_key_uint64_value(metadata, kIDSKeyRemoteInterfaceType, &rift)", access_value, 0xCu);
      }
    }
    else if ((_BYTE)v98)
    {
      __int16 v67 = (char *)__nw_create_backtrace_string();
      char v49 = __nwlog_obj();
      os_log_type_t v68 = v99[0];
      BOOL v69 = os_log_type_enabled(v49, v99[0]);
      if (v67)
      {
        if (v69)
        {
          *(_DWORD *)access_unint64_t value = 136446466;
          *(void *)&access_value[4] = "nw_candidate_manager_candidate_for_ids_resolved_endpoint";
          *(_WORD *)&access_value[12] = 2082;
          *(void *)&access_value[14] = v67;
          _os_log_impl(&dword_1830D4000, v49, v68, "%{public}s called with null nw_txt_record_get_key_uint64_value(metadata, kIDSKeyRemoteInterfaceType, &rift), dumping backtrace:%{public}s", access_value, 0x16u);
        }

        goto LABEL_108;
      }
      if (v69)
      {
        *(_DWORD *)access_unint64_t value = 136446210;
        *(void *)&access_value[4] = "nw_candidate_manager_candidate_for_ids_resolved_endpoint";
        _os_log_impl(&dword_1830D4000, v49, v68, "%{public}s called with null nw_txt_record_get_key_uint64_value(metadata, kIDSKeyRemoteInterfaceType, &rift), no backtrace", access_value, 0xCu);
      }
    }
    else
    {
      char v49 = __nwlog_obj();
      os_log_type_t v78 = v99[0];
      if (os_log_type_enabled(v49, v99[0]))
      {
        *(_DWORD *)access_unint64_t value = 136446210;
        *(void *)&access_value[4] = "nw_candidate_manager_candidate_for_ids_resolved_endpoint";
        _os_log_impl(&dword_1830D4000, v49, v78, "%{public}s called with null nw_txt_record_get_key_uint64_value(metadata, kIDSKeyRemoteInterfaceType, &rift), backtrace limit exceeded", access_value, 0xCu);
      }
    }

    goto LABEL_154;
  }
  v99[0] = 0;
  v99[1] = 0;
  *(void *)access_unint64_t value = MEMORY[0x1E4F143A8];
  *(void *)&access_value[8] = 3221225472;
  *(void *)&access_value[16] = ___ZL32nw_txt_record_get_key_uuid_valuePU27objcproto16OS_nw_txt_record8NSObjectPKcPh_block_invoke;
  *(void *)uint32_t v91 = &__block_descriptor_40_e19_B36__0r_8i16r_20Q28l;
  *(void *)&v91[8] = v99;
  if (!nw_txt_record_access_key(v6, "eval", access_value))
  {
    uint64_t v51 = __nwlog_obj();
    *(_DWORD *)access_unint64_t value = 136446210;
    *(void *)&access_value[4] = "nw_candidate_manager_candidate_for_ids_resolved_endpoint";
    os_log_type_t v45 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(v98) = 16;
    char v86 = 0;
    if (!__nwlog_fault(v45, &v98, &v86)) {
      goto LABEL_154;
    }
    if (v98 == 17)
    {
      __int16 v52 = __nwlog_obj();
      os_log_type_t v53 = v98;
      if (os_log_type_enabled(v52, (os_log_type_t)v98))
      {
        *(_DWORD *)access_unint64_t value = 136446210;
        *(void *)&access_value[4] = "nw_candidate_manager_candidate_for_ids_resolved_endpoint";
        _os_log_impl(&dword_1830D4000, v52, v53, "%{public}s called with null nw_txt_record_get_key_uuid_value(metadata, kIDSKeyEvaluatorUUID, evaluator_id)", access_value, 0xCu);
      }
LABEL_153:

      goto LABEL_154;
    }
    if (!v86)
    {
      __int16 v52 = __nwlog_obj();
      os_log_type_t v79 = v98;
      if (os_log_type_enabled(v52, (os_log_type_t)v98))
      {
        *(_DWORD *)access_unint64_t value = 136446210;
        *(void *)&access_value[4] = "nw_candidate_manager_candidate_for_ids_resolved_endpoint";
        _os_log_impl(&dword_1830D4000, v52, v79, "%{public}s called with null nw_txt_record_get_key_uuid_value(metadata, kIDSKeyEvaluatorUUID, evaluator_id), backtrace limit exceeded", access_value, 0xCu);
      }
      goto LABEL_153;
    }
    __int16 v67 = (char *)__nw_create_backtrace_string();
    __int16 v52 = __nwlog_obj();
    os_log_type_t v70 = v98;
    BOOL v71 = os_log_type_enabled(v52, (os_log_type_t)v98);
    if (!v67)
    {
      if (v71)
      {
        *(_DWORD *)access_unint64_t value = 136446210;
        *(void *)&access_value[4] = "nw_candidate_manager_candidate_for_ids_resolved_endpoint";
        _os_log_impl(&dword_1830D4000, v52, v70, "%{public}s called with null nw_txt_record_get_key_uuid_value(metadata, kIDSKeyEvaluatorUUID, evaluator_id), no backtrace", access_value, 0xCu);
      }
      goto LABEL_153;
    }
    if (v71)
    {
      *(_DWORD *)access_unint64_t value = 136446466;
      *(void *)&access_value[4] = "nw_candidate_manager_candidate_for_ids_resolved_endpoint";
      *(_WORD *)&access_value[12] = 2082;
      *(void *)&access_value[14] = v67;
      _os_log_impl(&dword_1830D4000, v52, v70, "%{public}s called with null nw_txt_record_get_key_uuid_value(metadata, kIDSKeyEvaluatorUUID, evaluator_id), dumping backtrace:%{public}s", access_value, 0x16u);
    }

LABEL_108:
    free(v67);
    if (!v45) {
      goto LABEL_156;
    }
    goto LABEL_155;
  }
  if (__nwlog_candidate_manager_log::onceToken != -1) {
    dispatch_once(&__nwlog_candidate_manager_log::onceToken, &__block_literal_global_24);
  }
  uint64_t v7 = (id)gcandidate_managerLogObj;
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v8 = *((void *)v84 + 1);
    *(_DWORD *)access_unint64_t value = 136446978;
    *(void *)&access_value[4] = "nw_candidate_manager_candidate_for_ids_resolved_endpoint";
    *(_WORD *)&access_value[12] = 2048;
    *(void *)&access_value[14] = v8;
    *(_WORD *)&access_value[22] = 1040;
    *(_DWORD *)uint32_t v91 = 16;
    *(_WORD *)&v91[4] = 2096;
    *(void *)&v91[6] = v99;
    _os_log_impl(&dword_1830D4000, v7, OS_LOG_TYPE_DEBUG, "%{public}s [CM%zu] looking up evaluator for %{uuid_t}.16P", access_value, 0x26u);
  }

  id v9 = nw_parameters_copy_context(*((void **)v84 + 10));
  evaluator_for_client_id = nw_path_create_evaluator_for_client_id((const unsigned __int8 *)v99, v9);

  if (!evaluator_for_client_id)
  {
    __int16 v54 = __nwlog_obj();
    *(_DWORD *)access_unint64_t value = 136446210;
    *(void *)&access_value[4] = "nw_candidate_manager_candidate_for_ids_resolved_endpoint";
    __int16 v55 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(v98) = 16;
    char v86 = 0;
    if (__nwlog_fault(v55, &v98, &v86))
    {
      if (v98 == 17)
      {
        uint64_t v56 = __nwlog_obj();
        os_log_type_t v57 = v98;
        if (os_log_type_enabled(v56, (os_log_type_t)v98))
        {
          *(_DWORD *)access_unint64_t value = 136446210;
          *(void *)&access_value[4] = "nw_candidate_manager_candidate_for_ids_resolved_endpoint";
          _os_log_impl(&dword_1830D4000, v56, v57, "%{public}s called with null evaluator", access_value, 0xCu);
        }
      }
      else if (v86)
      {
        long long v72 = (char *)__nw_create_backtrace_string();
        uint64_t v56 = __nwlog_obj();
        os_log_type_t v73 = v98;
        BOOL v74 = os_log_type_enabled(v56, (os_log_type_t)v98);
        if (v72)
        {
          if (v74)
          {
            *(_DWORD *)access_unint64_t value = 136446466;
            *(void *)&access_value[4] = "nw_candidate_manager_candidate_for_ids_resolved_endpoint";
            *(_WORD *)&access_value[12] = 2082;
            *(void *)&access_value[14] = v72;
            _os_log_impl(&dword_1830D4000, v56, v73, "%{public}s called with null evaluator, dumping backtrace:%{public}s", access_value, 0x16u);
          }

          free(v72);
          goto LABEL_160;
        }
        if (v74)
        {
          *(_DWORD *)access_unint64_t value = 136446210;
          *(void *)&access_value[4] = "nw_candidate_manager_candidate_for_ids_resolved_endpoint";
          _os_log_impl(&dword_1830D4000, v56, v73, "%{public}s called with null evaluator, no backtrace", access_value, 0xCu);
        }
      }
      else
      {
        uint64_t v56 = __nwlog_obj();
        os_log_type_t v80 = v98;
        if (os_log_type_enabled(v56, (os_log_type_t)v98))
        {
          *(_DWORD *)access_unint64_t value = 136446210;
          *(void *)&access_value[4] = "nw_candidate_manager_candidate_for_ids_resolved_endpoint";
          _os_log_impl(&dword_1830D4000, v56, v80, "%{public}s called with null evaluator, backtrace limit exceeded", access_value, 0xCu);
        }
      }
    }
LABEL_160:
    if (v55) {
      free(v55);
    }
    uint64_t v21 = 0;
    goto LABEL_41;
  }
  __int16 v11 = evaluator_for_client_id;
  os_unfair_lock_lock((os_unfair_lock_t)evaluator_for_client_id + 24);
  unint64_t v12 = v11[6];
  os_unfair_lock_unlock((os_unfair_lock_t)evaluator_for_client_id + 24);

  if (v12)
  {
    nw_endpoint_t v13 = nw_path_copy_effective_remote_endpoint(v12);
    if (v13)
    {
      uint64_t v14 = v13;
      long long v98 = 0uLL;
      nw_path_get_nexus_agent_uuid(v12, &v98);
      uint64_t v15 = v87;
      BOOL v16 = nw_path_uses_interface_type(v12, nw_interface_type_cellular);
      id v17 = nw_path_copy_interface(v12);
      unint64_t v18 = v17;
      if (v15 == 2) {
        char v19 = -6;
      }
      else {
        char v19 = -5;
      }
      __int16 v20 = nw_interface_option_details_create(v17, &v98, v14, v19 - v16, 0, -1);
      nw_interface_option_details_set_local_cid(v20, v89);
      nw_interface_option_details_set_remote_cid(v20, v88);
      nw_interface_option_details_set_evaluator(v20, v11);
      nw_candidate_create(v84, v20, v11);
      uint64_t v21 = (NWCandidate *)objc_claimAutoreleasedReturnValue();
      if (__nwlog_candidate_manager_log::onceToken != -1) {
        dispatch_once(&__nwlog_candidate_manager_log::onceToken, &__block_literal_global_24);
      }
      __int16 v22 = (id)gcandidate_managerLogObj;
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v81 = *((void *)v84 + 1);
        int v23 = nw_path_copy_effective_local_endpoint(v12);
        __int16 v24 = nw_path_copy_effective_remote_endpoint(v12);
        if (v18 && (__int16 v25 = v18, v26 = v25[24], v25, v26 <= 4)) {
          uint64_t v27 = off_1E524BC28[v26];
        }
        else {
          uint64_t v27 = "unknown";
        }
        if (v87 > 4) {
          os_log_type_t v31 = "unknown";
        }
        else {
          os_log_type_t v31 = off_1E524BC28[v87];
        }
        *(_DWORD *)access_unint64_t value = 136447746;
        *(void *)&access_value[4] = "nw_candidate_manager_candidate_for_ids_resolved_endpoint";
        *(_WORD *)&access_value[12] = 2048;
        *(void *)&access_value[14] = v81;
        *(_WORD *)&access_value[22] = 2112;
        *(void *)uint32_t v91 = v23;
        *(_WORD *)&v91[8] = 2112;
        *(void *)&v91[10] = v24;
        __int16 v92 = 2080;
        uint64_t v93 = v27;
        __int16 v94 = 2080;
        uint64_t v95 = v31;
        __int16 v96 = 2112;
        uint64_t v97 = v21;
        _os_log_impl(&dword_1830D4000, v22, OS_LOG_TYPE_DEFAULT, "%{public}s [CM%zu] %@<->%@ %s<->%s %@", access_value, 0x48u);
      }
    }
    else
    {
      if (__nwlog_candidate_manager_log::onceToken != -1) {
        dispatch_once(&__nwlog_candidate_manager_log::onceToken, &__block_literal_global_24);
      }
      uint64_t v29 = (id)gcandidate_managerLogObj;
      if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
      {
        uint64_t v30 = *((void *)v84 + 1);
        *(_DWORD *)access_unint64_t value = 136446722;
        *(void *)&access_value[4] = "nw_candidate_manager_candidate_for_ids_resolved_endpoint";
        *(_WORD *)&access_value[12] = 2048;
        *(void *)&access_value[14] = v30;
        *(_WORD *)&access_value[22] = 2112;
        *(void *)uint32_t v91 = v12;
        _os_log_impl(&dword_1830D4000, v29, OS_LOG_TYPE_ERROR, "%{public}s [CM%zu] %@ has no effective remote endpoint", access_value, 0x20u);
      }

      uint64_t v14 = 0;
      uint64_t v21 = 0;
    }
  }
  else
  {
    if (__nwlog_candidate_manager_log::onceToken != -1) {
      dispatch_once(&__nwlog_candidate_manager_log::onceToken, &__block_literal_global_24);
    }
    uint64_t v14 = (id)gcandidate_managerLogObj;
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      uint64_t v28 = *((void *)v84 + 1);
      *(_DWORD *)access_unint64_t value = 136446722;
      *(void *)&access_value[4] = "nw_candidate_manager_candidate_for_ids_resolved_endpoint";
      *(_WORD *)&access_value[12] = 2048;
      *(void *)&access_value[14] = v28;
      *(_WORD *)&access_value[22] = 2112;
      *(void *)uint32_t v91 = v11;
      _os_log_impl(&dword_1830D4000, v14, OS_LOG_TYPE_ERROR, "%{public}s [CM%zu] %@ has no path", access_value, 0x20u);
    }
    uint64_t v21 = 0;
  }

LABEL_41:
LABEL_42:

LABEL_43:
  unint64_t v6 = v82;
LABEL_44:

  if (nw_candidate_manager_process_candidate_internal(*(NWConcrete_nw_candidate_manager **)(v83 + 40), v21))
  {
    [*(id *)(*(void *)(v83 + 40) + 32) setObject:v21 forKeyedSubscript:endpoint];
  }
  else
  {
    if (__nwlog_candidate_manager_log::onceToken != -1) {
      dispatch_once(&__nwlog_candidate_manager_log::onceToken, &__block_literal_global_24);
    }
    os_log_type_t v32 = (id)gcandidate_managerLogObj;
    if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
    {
      uint64_t v33 = *(void *)(*(void *)(v83 + 40) + 8);
      nw_txt_record_t v34 = nw_endpoint_copy_txt_record(endpoint);
      *(_DWORD *)access_unint64_t value = 136446978;
      *(void *)&access_value[4] = "nw_candidate_manager_handle_ids_endpoints_block_invoke";
      *(_WORD *)&access_value[12] = 2048;
      *(void *)&access_value[14] = v33;
      *(_WORD *)&access_value[22] = 2112;
      *(void *)uint32_t v91 = endpoint;
      *(_WORD *)&v91[8] = 2112;
      *(void *)&v91[10] = v34;
      _os_log_impl(&dword_1830D4000, v32, OS_LOG_TYPE_ERROR, "%{public}s [CM%zu] duplicate endpoint: %@, metadata:%@", access_value, 0x2Au);
    }
  }

  id v4 = endpoint;
LABEL_52:

  return 1;
}

void sub_183633F80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *a15, void *a16, uint64_t a17, uint64_t a18, void *a19, void *a20)
{
  _Unwind_Resume(a1);
}

BOOL nw_txt_record_get_key_data_value(void *a1, const char *a2, void **a3)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  nw_txt_record_t v5 = a1;
  if (a2)
  {
    if (a3)
    {
      unint64_t v6 = *a3;
      *a3 = 0;

      access_value[0] = MEMORY[0x1E4F143A8];
      access_value[1] = 3221225472;
      access_value[2] = ___ZL32nw_txt_record_get_key_data_valuePU27objcproto16OS_nw_txt_record8NSObjectPKcPU8__strongPU27objcproto16OS_dispatch_dataS__block_invoke;
      access_value[3] = &__block_descriptor_40_e19_B36__0r_8i16r_20Q28l;
      access_value[4] = a3;
      BOOL v7 = nw_txt_record_access_key(v5, a2, access_value);
      goto LABEL_4;
    }
    nw_endpoint_t v13 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v26 = "nw_txt_record_get_key_data_value";
    BOOL v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (__nwlog_fault(v10, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __int16 v11 = __nwlog_obj();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v26 = "nw_txt_record_get_key_data_value";
          _os_log_impl(&dword_1830D4000, v11, v14, "%{public}s called with null out_value", buf, 0xCu);
        }
LABEL_36:

        goto LABEL_37;
      }
      if (!v23)
      {
        __int16 v11 = __nwlog_obj();
        os_log_type_t v21 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v26 = "nw_txt_record_get_key_data_value";
          _os_log_impl(&dword_1830D4000, v11, v21, "%{public}s called with null out_value, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __int16 v11 = __nwlog_obj();
      os_log_type_t v18 = type;
      BOOL v19 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v26 = "nw_txt_record_get_key_data_value";
          _os_log_impl(&dword_1830D4000, v11, v18, "%{public}s called with null out_value, no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v19)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v26 = "nw_txt_record_get_key_data_value";
        __int16 v27 = 2082;
        uint64_t v28 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v11, v18, "%{public}s called with null out_value, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_24;
    }
  }
  else
  {
    id v9 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v26 = "nw_txt_record_get_key_data_value";
    BOOL v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (__nwlog_fault(v10, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __int16 v11 = __nwlog_obj();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v26 = "nw_txt_record_get_key_data_value";
          _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s called with null key", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (!v23)
      {
        __int16 v11 = __nwlog_obj();
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v26 = "nw_txt_record_get_key_data_value";
          _os_log_impl(&dword_1830D4000, v11, v20, "%{public}s called with null key, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __int16 v11 = __nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v26 = "nw_txt_record_get_key_data_value";
          _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s called with null key, no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v26 = "nw_txt_record_get_key_data_value";
        __int16 v27 = 2082;
        uint64_t v28 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s called with null key, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_24:

      free(backtrace_string);
    }
  }
LABEL_37:
  if (v10) {
    free(v10);
  }
  BOOL v7 = 0;
LABEL_4:

  return v7;
}

void sub_183634530(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL ___ZL34nw_txt_record_get_key_uint64_valuePU27objcproto16OS_nw_txt_record8NSObjectPKcPy_block_invoke(uint64_t a1, uint64_t a2, int a3, const char *a4, uint64_t a5)
{
  BOOL result = 0;
  v10[2] = *MEMORY[0x1E4F143B8];
  *(void *)__str = 0;
  v10[0] = 0;
  *(void *)((char *)v10 + 5) = 0;
  if (a3 == 4 && a4)
  {
    if (snprintf(__str, 0x15uLL, "%.*s", a5, a4) <= 20)
    {
      __endptr = 0;
      **(void **)(a1 + 32) = strtoull(__str, &__endptr, 0);
      return __endptr - __str == a5;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

BOOL ___ZL32nw_txt_record_get_key_uuid_valuePU27objcproto16OS_nw_txt_record8NSObjectPKcPh_block_invoke(uint64_t a1, uint64_t a2, int a3, const char *a4, int a5)
{
  BOOL result = 0;
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (a3 == 4 && a4)
  {
    *(_OWORD *)__str = 0u;
    memset(v8, 0, sizeof(v8));
    return snprintf(__str, 0x25uLL, "%.*s", a5, a4) <= 36 && uuid_parse(__str, *(unsigned __int8 **)(a1 + 32)) == 0;
  }
  return result;
}

BOOL ___ZL32nw_txt_record_get_key_data_valuePU27objcproto16OS_nw_txt_record8NSObjectPKcPU8__strongPU27objcproto16OS_dispatch_dataS__block_invoke(uint64_t a1, uint64_t a2, int a3, uint64_t a4, unint64_t a5)
{
  BOOL result = 0;
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if ((a5 & 1) != 0 || a3 != 4 || !a4 || a5 < 2) {
    return result;
  }
  uint64_t v9 = malloc_type_calloc(1uLL, a5 >> 1, 0xEAFB8F1AuLL);
  if (!v9)
  {
    os_log_type_t v20 = __nwlog_obj();
    os_log_type_enabled(v20, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446722;
    char v23 = "strict_calloc";
    __int16 v24 = 2048;
    uint64_t v25 = 1;
    __int16 v26 = 2048;
    unint64_t v27 = a5 >> 1;
    os_log_type_t v21 = (void *)_os_log_send_and_compose_impl();

    BOOL result = __nwlog_abort((uint64_t)v21);
    if (result)
    {
      __break(1u);
      return result;
    }
    free(v21);
  }
  unint64_t v10 = 0;
  while (1)
  {
    int v12 = *(unsigned __int8 *)(a4 + v10);
    char v13 = v12 - 48;
    if ((v12 - 48) < 0xA) {
      goto LABEL_12;
    }
    if ((v12 - 97) <= 5)
    {
      char v13 = v12 - 87;
LABEL_12:
      unint64_t v14 = v10 >> 1;
      if ((v10 & 1) == 0) {
        goto LABEL_13;
      }
      goto LABEL_7;
    }
    if ((v12 - 65) > 5) {
      break;
    }
    char v13 = v12 - 55;
    unint64_t v14 = v10 >> 1;
    if ((v10 & 1) == 0)
    {
LABEL_13:
      char v11 = 16 * v13;
      goto LABEL_8;
    }
LABEL_7:
    char v11 = v9[v14] | v13;
LABEL_8:
    v9[v14] = v11;
    if (a5 == ++v10)
    {
      dispatch_data_t v15 = dispatch_data_create(v9, a5 >> 1, 0, (dispatch_block_t)*MEMORY[0x1E4F143F0]);
      os_log_type_t v16 = *(void ***)(a1 + 32);
      BOOL v17 = *v16;
      NWConcrete_nw_candidate_manager *v16 = v15;

      return 1;
    }
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_t v18 = (id)gLogObj;
  if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
  {
    int v19 = *(unsigned __int8 *)(a4 + v10);
    *(_DWORD *)buf = 136446466;
    char v23 = "nw_txt_record_get_key_data_value_block_invoke";
    __int16 v24 = 1024;
    LODWORD(v25) = v19;
    _os_log_impl(&dword_1830D4000, v18, OS_LOG_TYPE_ERROR, "%{public}s Not hex character: %c", buf, 0x12u);
  }

  if (v9) {
    free(v9);
  }
  return 0;
}

void ___ZL35nw_candidate_manager_set_connectionP31NWConcrete_nw_candidate_managerP24NWConcrete_nw_connection_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (__nwlog_candidate_manager_log::onceToken != -1) {
    dispatch_once(&__nwlog_candidate_manager_log::onceToken, &__block_literal_global_24);
  }
  id v4 = (id)gcandidate_managerLogObj;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 40);
    uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8);
    *(_DWORD *)buf = 136446978;
    *(void *)&uint8_t buf[4] = "nw_candidate_manager_set_connection_block_invoke";
    *(_WORD *)&buf[12] = 2048;
    *(void *)&buf[14] = v6;
    *(_WORD *)&unsigned char buf[22] = 2112;
    *(void *)&unsigned char buf[24] = v3;
    LOWORD(v31) = 2112;
    *(void *)((char *)&v31 + 2) = v5;
    _os_log_impl(&dword_1830D4000, v4, OS_LOG_TYPE_DEFAULT, "%{public}s [CM%zu] Injecting %@ into %@", buf, 0x2Au);
  }

  BOOL v7 = *(id *)(a1 + 40);
  id v8 = v3;
  uint64_t v9 = v8;
  if (!v7)
  {
    unint64_t v14 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_connection_add_extra_interface_option";
    dispatch_data_t v15 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v28 = 0;
    if (!__nwlog_fault(v15, &type, &v28)) {
      goto LABEL_49;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v16 = __nwlog_obj();
      os_log_type_t v17 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_add_extra_interface_option";
        _os_log_impl(&dword_1830D4000, v16, v17, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v28)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v16 = __nwlog_obj();
      os_log_type_t v21 = type;
      BOOL v22 = os_log_type_enabled(v16, type);
      if (backtrace_string)
      {
        if (v22)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_connection_add_extra_interface_option";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v16, v21, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_49:
        if (!v15) {
          goto LABEL_15;
        }
LABEL_50:
        free(v15);
        goto LABEL_15;
      }
      if (v22)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_add_extra_interface_option";
        _os_log_impl(&dword_1830D4000, v16, v21, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v16 = __nwlog_obj();
      os_log_type_t v26 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_add_extra_interface_option";
        _os_log_impl(&dword_1830D4000, v16, v26, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_48:

    goto LABEL_49;
  }
  if (v8)
  {
    uint64_t v10 = v7[2];
    if (v10 && !nw_path_parameters_get_logging_disabled(*(void *)(v10 + 104)))
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      char v11 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        int v12 = *((_DWORD *)v7 + 112);
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_connection_add_extra_interface_option";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v12;
        *(_WORD *)&buf[18] = 2112;
        *(void *)&buf[20] = v9;
        _os_log_impl(&dword_1830D4000, v11, OS_LOG_TYPE_INFO, "%{public}s [C%u] Adding interface option details %@ to connection", buf, 0x1Cu);
      }
    }
    *(void *)buf = MEMORY[0x1E4F143A8];
    *(void *)&buf[8] = 3221225472;
    *(void *)&buf[16] = __nw_connection_add_extra_interface_option_block_invoke;
    *(void *)&unsigned char buf[24] = &unk_1E524B9A0;
    char v13 = v7;
    *(void *)&long long v31 = v13;
    *((void *)&v31 + 1) = v9;
    nw_connection_async_if_needed(v13, buf);

    goto LABEL_15;
  }
  os_log_type_t v18 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_connection_add_extra_interface_option";
  dispatch_data_t v15 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v28 = 0;
  if (!__nwlog_fault(v15, &type, &v28)) {
    goto LABEL_49;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    os_log_type_t v16 = __nwlog_obj();
    os_log_type_t v19 = type;
    if (os_log_type_enabled(v16, type))
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_connection_add_extra_interface_option";
      _os_log_impl(&dword_1830D4000, v16, v19, "%{public}s called with null interface_option_details", buf, 0xCu);
    }
    goto LABEL_48;
  }
  if (!v28)
  {
    os_log_type_t v16 = __nwlog_obj();
    os_log_type_t v27 = type;
    if (os_log_type_enabled(v16, type))
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_connection_add_extra_interface_option";
      _os_log_impl(&dword_1830D4000, v16, v27, "%{public}s called with null interface_option_details, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_48;
  }
  char v23 = (char *)__nw_create_backtrace_string();
  os_log_type_t v16 = __nwlog_obj();
  os_log_type_t v24 = type;
  BOOL v25 = os_log_type_enabled(v16, type);
  if (!v23)
  {
    if (v25)
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_connection_add_extra_interface_option";
      _os_log_impl(&dword_1830D4000, v16, v24, "%{public}s called with null interface_option_details, no backtrace", buf, 0xCu);
    }
    goto LABEL_48;
  }
  if (v25)
  {
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_connection_add_extra_interface_option";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = v23;
    _os_log_impl(&dword_1830D4000, v16, v24, "%{public}s called with null interface_option_details, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v23);
  if (v15) {
    goto LABEL_50;
  }
LABEL_15:
}

void sub_183634FF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20)
{
  _Unwind_Resume(a1);
}

void ___ZL35nw_candidate_manager_set_connectionP31NWConcrete_nw_candidate_managerP24NWConcrete_nw_connection_block_invoke_153(uint64_t a1, void *a2)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (__nwlog_candidate_manager_log::onceToken != -1) {
    dispatch_once(&__nwlog_candidate_manager_log::onceToken, &__block_literal_global_24);
  }
  id v4 = (id)gcandidate_managerLogObj;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 40);
    uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8);
    *(_DWORD *)buf = 136446978;
    *(void *)&uint8_t buf[4] = "nw_candidate_manager_set_connection_block_invoke";
    *(_WORD *)&buf[12] = 2048;
    *(void *)&buf[14] = v6;
    *(_WORD *)&unsigned char buf[22] = 2112;
    *(void *)&unsigned char buf[24] = v3;
    LOWORD(v31) = 2112;
    *(void *)((char *)&v31 + 2) = v5;
    _os_log_impl(&dword_1830D4000, v4, OS_LOG_TYPE_DEFAULT, "%{public}s [CM%zu] Removing %@ from %@", buf, 0x2Au);
  }

  BOOL v7 = *(id *)(a1 + 40);
  id v8 = v3;
  uint64_t v9 = v8;
  if (!v7)
  {
    unint64_t v14 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_connection_remove_extra_interface_option";
    dispatch_data_t v15 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v28 = 0;
    if (!__nwlog_fault(v15, &type, &v28)) {
      goto LABEL_49;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v16 = __nwlog_obj();
      os_log_type_t v17 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_remove_extra_interface_option";
        _os_log_impl(&dword_1830D4000, v16, v17, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v28)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v16 = __nwlog_obj();
      os_log_type_t v21 = type;
      BOOL v22 = os_log_type_enabled(v16, type);
      if (backtrace_string)
      {
        if (v22)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_connection_remove_extra_interface_option";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v16, v21, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_49:
        if (!v15) {
          goto LABEL_15;
        }
LABEL_50:
        free(v15);
        goto LABEL_15;
      }
      if (v22)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_remove_extra_interface_option";
        _os_log_impl(&dword_1830D4000, v16, v21, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v16 = __nwlog_obj();
      os_log_type_t v26 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_remove_extra_interface_option";
        _os_log_impl(&dword_1830D4000, v16, v26, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_48:

    goto LABEL_49;
  }
  if (v8)
  {
    uint64_t v10 = v7[2];
    if (v10 && !nw_path_parameters_get_logging_disabled(*(void *)(v10 + 104)))
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      char v11 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        int v12 = *((_DWORD *)v7 + 112);
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_connection_remove_extra_interface_option";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v12;
        *(_WORD *)&buf[18] = 2112;
        *(void *)&buf[20] = v9;
        _os_log_impl(&dword_1830D4000, v11, OS_LOG_TYPE_INFO, "%{public}s [C%u] Removing interface option details %@", buf, 0x1Cu);
      }
    }
    *(void *)buf = MEMORY[0x1E4F143A8];
    *(void *)&buf[8] = 3221225472;
    *(void *)&buf[16] = __nw_connection_remove_extra_interface_option_block_invoke;
    *(void *)&unsigned char buf[24] = &unk_1E524B9A0;
    char v13 = v7;
    *(void *)&long long v31 = v13;
    *((void *)&v31 + 1) = v9;
    nw_connection_async_if_needed(v13, buf);

    goto LABEL_15;
  }
  os_log_type_t v18 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_connection_remove_extra_interface_option";
  dispatch_data_t v15 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v28 = 0;
  if (!__nwlog_fault(v15, &type, &v28)) {
    goto LABEL_49;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    os_log_type_t v16 = __nwlog_obj();
    os_log_type_t v19 = type;
    if (os_log_type_enabled(v16, type))
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_connection_remove_extra_interface_option";
      _os_log_impl(&dword_1830D4000, v16, v19, "%{public}s called with null details", buf, 0xCu);
    }
    goto LABEL_48;
  }
  if (!v28)
  {
    os_log_type_t v16 = __nwlog_obj();
    os_log_type_t v27 = type;
    if (os_log_type_enabled(v16, type))
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_connection_remove_extra_interface_option";
      _os_log_impl(&dword_1830D4000, v16, v27, "%{public}s called with null details, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_48;
  }
  char v23 = (char *)__nw_create_backtrace_string();
  os_log_type_t v16 = __nwlog_obj();
  os_log_type_t v24 = type;
  BOOL v25 = os_log_type_enabled(v16, type);
  if (!v23)
  {
    if (v25)
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_connection_remove_extra_interface_option";
      _os_log_impl(&dword_1830D4000, v16, v24, "%{public}s called with null details, no backtrace", buf, 0xCu);
    }
    goto LABEL_48;
  }
  if (v25)
  {
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_connection_remove_extra_interface_option";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = v23;
    _os_log_impl(&dword_1830D4000, v16, v24, "%{public}s called with null details, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v23);
  if (v15) {
    goto LABEL_50;
  }
LABEL_15:
}

void sub_1836356B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20)
{
  _Unwind_Resume(a1);
}

const char *nw_candidate_manager_state_to_string(unsigned int a1)
{
  if (a1 > 4) {
    return "unknown-state";
  }
  else {
    return off_1E523AD20[a1];
  }
}

void nw_candidate_manager_set_state_changed_handler(void *a1, void *a2)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  uint64_t v5 = v4;
  if (v3)
  {
    if (v4)
    {
      if (*((_DWORD *)v3 + 38) != 4)
      {
        int v12 = _Block_copy(v4);
        char v13 = (void *)v3[20];
        v3[20] = v12;

        goto LABEL_34;
      }
      if (__nwlog_candidate_manager_log::onceToken != -1) {
        dispatch_once(&__nwlog_candidate_manager_log::onceToken, &__block_literal_global_24);
      }
      id v6 = (id)gcandidate_managerLogObj;
      BOOL v7 = (char *)v3[1];
      *(_DWORD *)buf = 136446466;
      long long v37 = "nw_candidate_manager_set_state_changed_handler";
      __int16 v38 = 2048;
      os_log_type_t v39 = v7;
      id v8 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v34 = 0;
      if (!__nwlog_fault(v8, &type, &v34)) {
        goto LABEL_32;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        if (__nwlog_candidate_manager_log::onceToken != -1) {
          dispatch_once(&__nwlog_candidate_manager_log::onceToken, &__block_literal_global_24);
        }
        uint64_t v9 = (id)gcandidate_managerLogObj;
        os_log_type_t v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          char v11 = (char *)v3[1];
          *(_DWORD *)buf = 136446466;
          long long v37 = "nw_candidate_manager_set_state_changed_handler";
          __int16 v38 = 2048;
          os_log_type_t v39 = v11;
          _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s [CM%zu] Cannot set state changed handler after cancel", buf, 0x16u);
        }
      }
      else if (v34)
      {
        backtrace_string = __nw_create_backtrace_string();
        if (backtrace_string)
        {
          dispatch_data_t v15 = (char *)backtrace_string;
          if (__nwlog_candidate_manager_log::onceToken != -1) {
            dispatch_once(&__nwlog_candidate_manager_log::onceToken, &__block_literal_global_24);
          }
          os_log_type_t v16 = (id)gcandidate_managerLogObj;
          os_log_type_t v17 = type;
          if (os_log_type_enabled(v16, type))
          {
            os_log_type_t v18 = (char *)v3[1];
            *(_DWORD *)buf = 136446722;
            long long v37 = "nw_candidate_manager_set_state_changed_handler";
            __int16 v38 = 2048;
            os_log_type_t v39 = v18;
            __int16 v40 = 2082;
            char v41 = v15;
            _os_log_impl(&dword_1830D4000, v16, v17, "%{public}s [CM%zu] Cannot set state changed handler after cancel, dumping backtrace:%{public}s", buf, 0x20u);
          }

          free(v15);
          if (v8) {
            goto LABEL_33;
          }
          goto LABEL_34;
        }
        if (__nwlog_candidate_manager_log::onceToken != -1) {
          dispatch_once(&__nwlog_candidate_manager_log::onceToken, &__block_literal_global_24);
        }
        uint64_t v9 = (id)gcandidate_managerLogObj;
        os_log_type_t v21 = type;
        if (os_log_type_enabled(v9, type))
        {
          BOOL v22 = (char *)v3[1];
          *(_DWORD *)buf = 136446466;
          long long v37 = "nw_candidate_manager_set_state_changed_handler";
          __int16 v38 = 2048;
          os_log_type_t v39 = v22;
          _os_log_impl(&dword_1830D4000, v9, v21, "%{public}s [CM%zu] Cannot set state changed handler after cancel, no backtrace", buf, 0x16u);
        }
      }
      else
      {
        if (__nwlog_candidate_manager_log::onceToken != -1) {
          dispatch_once(&__nwlog_candidate_manager_log::onceToken, &__block_literal_global_24);
        }
        uint64_t v9 = (id)gcandidate_managerLogObj;
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v9, type))
        {
          os_log_type_t v20 = (char *)v3[1];
          *(_DWORD *)buf = 136446466;
          long long v37 = "nw_candidate_manager_set_state_changed_handler";
          __int16 v38 = 2048;
          os_log_type_t v39 = v20;
          _os_log_impl(&dword_1830D4000, v9, v19, "%{public}s [CM%zu] Cannot set state changed handler after cancel, backtrace limit exceeded", buf, 0x16u);
        }
      }
      goto LABEL_31;
    }
    BOOL v25 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    long long v37 = "nw_candidate_manager_set_state_changed_handler";
    id v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v34 = 0;
    if (__nwlog_fault(v8, &type, &v34))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v9 = __nwlog_obj();
        os_log_type_t v26 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          long long v37 = "nw_candidate_manager_set_state_changed_handler";
          _os_log_impl(&dword_1830D4000, v9, v26, "%{public}s called with null handler", buf, 0xCu);
        }
LABEL_31:

        goto LABEL_32;
      }
      if (!v34)
      {
        uint64_t v9 = __nwlog_obj();
        os_log_type_t v33 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          long long v37 = "nw_candidate_manager_set_state_changed_handler";
          _os_log_impl(&dword_1830D4000, v9, v33, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_31;
      }
      os_log_type_t v27 = (char *)__nw_create_backtrace_string();
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v30 = type;
      BOOL v31 = os_log_type_enabled(v9, type);
      if (!v27)
      {
        if (v31)
        {
          *(_DWORD *)buf = 136446210;
          long long v37 = "nw_candidate_manager_set_state_changed_handler";
          _os_log_impl(&dword_1830D4000, v9, v30, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
        goto LABEL_31;
      }
      if (v31)
      {
        *(_DWORD *)buf = 136446466;
        long long v37 = "nw_candidate_manager_set_state_changed_handler";
        __int16 v38 = 2082;
        os_log_type_t v39 = v27;
        _os_log_impl(&dword_1830D4000, v9, v30, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_54:

      free(v27);
      if (!v8) {
        goto LABEL_34;
      }
      goto LABEL_33;
    }
  }
  else
  {
    char v23 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    long long v37 = "nw_candidate_manager_set_state_changed_handler";
    id v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v34 = 0;
    if (__nwlog_fault(v8, &type, &v34))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v9 = __nwlog_obj();
        os_log_type_t v24 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          long long v37 = "nw_candidate_manager_set_state_changed_handler";
          _os_log_impl(&dword_1830D4000, v9, v24, "%{public}s called with null candidate_manager", buf, 0xCu);
        }
        goto LABEL_31;
      }
      if (!v34)
      {
        uint64_t v9 = __nwlog_obj();
        os_log_type_t v32 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          long long v37 = "nw_candidate_manager_set_state_changed_handler";
          _os_log_impl(&dword_1830D4000, v9, v32, "%{public}s called with null candidate_manager, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_31;
      }
      os_log_type_t v27 = (char *)__nw_create_backtrace_string();
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v28 = type;
      BOOL v29 = os_log_type_enabled(v9, type);
      if (!v27)
      {
        if (v29)
        {
          *(_DWORD *)buf = 136446210;
          long long v37 = "nw_candidate_manager_set_state_changed_handler";
          _os_log_impl(&dword_1830D4000, v9, v28, "%{public}s called with null candidate_manager, no backtrace", buf, 0xCu);
        }
        goto LABEL_31;
      }
      if (v29)
      {
        *(_DWORD *)buf = 136446466;
        long long v37 = "nw_candidate_manager_set_state_changed_handler";
        __int16 v38 = 2082;
        os_log_type_t v39 = v27;
        _os_log_impl(&dword_1830D4000, v9, v28, "%{public}s called with null candidate_manager, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_54;
    }
  }
LABEL_32:
  if (v8) {
LABEL_33:
  }
    free(v8);
LABEL_34:
}

void nw_candidate_manager_set_add_block(void *a1, const void *a2)
{
  id v3 = a1;
  id v4 = _Block_copy(a2);
  id v5 = (id)v3[14];
  v3[14] = v4;
}

void nw_candidate_manager_set_remove_block(void *a1, const void *a2)
{
  id v3 = a1;
  id v4 = _Block_copy(a2);
  id v5 = (id)v3[15];
  v3[15] = v4;
}

void nw_candidate_manager_set_modify_ids_parameters_block(void *a1, const void *a2)
{
  id v3 = a1;
  id v4 = _Block_copy(a2);
  id v5 = (id)v3[16];
  v3[16] = v4;
}

void nw_candidate_manager_set_new_connection_handler(void *a1, void *a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (!v3)
  {
    os_log_type_t v10 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v27 = "nw_candidate_manager_set_new_connection_handler";
    char v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (!__nwlog_fault(v11, &type, &v24)) {
      goto LABEL_44;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v12 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v27 = "nw_candidate_manager_set_new_connection_handler";
        _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s called with null candidate_manager", buf, 0xCu);
      }
    }
    else if (v24)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v12 = __nwlog_obj();
      os_log_type_t v17 = type;
      BOOL v18 = os_log_type_enabled(v12, type);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v27 = "nw_candidate_manager_set_new_connection_handler";
          __int16 v28 = 2082;
          BOOL v29 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v12, v17, "%{public}s called with null candidate_manager, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_44:
        if (!v11) {
          goto LABEL_10;
        }
LABEL_45:
        free(v11);
        goto LABEL_10;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v27 = "nw_candidate_manager_set_new_connection_handler";
        _os_log_impl(&dword_1830D4000, v12, v17, "%{public}s called with null candidate_manager, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int v12 = __nwlog_obj();
      os_log_type_t v22 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v27 = "nw_candidate_manager_set_new_connection_handler";
        _os_log_impl(&dword_1830D4000, v12, v22, "%{public}s called with null candidate_manager, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_43:

    goto LABEL_44;
  }
  if (v4)
  {
    if (*((_DWORD *)v3 + 38) == 4)
    {
      if (__nwlog_candidate_manager_log::onceToken != -1) {
        dispatch_once(&__nwlog_candidate_manager_log::onceToken, &__block_literal_global_24);
      }
      id v6 = (id)gcandidate_managerLogObj;
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        BOOL v7 = (char *)v3[1];
        *(_DWORD *)buf = 136446466;
        os_log_type_t v27 = "nw_candidate_manager_set_new_connection_handler";
        __int16 v28 = 2048;
        BOOL v29 = v7;
        _os_log_impl(&dword_1830D4000, v6, OS_LOG_TYPE_ERROR, "%{public}s [CM%zu] Cannot set new connection handler after cancel", buf, 0x16u);
      }
    }
    else
    {
      id v8 = _Block_copy(v4);
      uint64_t v9 = (void *)v3[21];
      v3[21] = v8;
    }
    goto LABEL_10;
  }
  unint64_t v14 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v27 = "nw_candidate_manager_set_new_connection_handler";
  char v11 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v24 = 0;
  if (!__nwlog_fault(v11, &type, &v24)) {
    goto LABEL_44;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    int v12 = __nwlog_obj();
    os_log_type_t v15 = type;
    if (os_log_type_enabled(v12, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v27 = "nw_candidate_manager_set_new_connection_handler";
      _os_log_impl(&dword_1830D4000, v12, v15, "%{public}s called with null handler", buf, 0xCu);
    }
    goto LABEL_43;
  }
  if (!v24)
  {
    int v12 = __nwlog_obj();
    os_log_type_t v23 = type;
    if (os_log_type_enabled(v12, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v27 = "nw_candidate_manager_set_new_connection_handler";
      _os_log_impl(&dword_1830D4000, v12, v23, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_43;
  }
  os_log_type_t v19 = (char *)__nw_create_backtrace_string();
  int v12 = __nwlog_obj();
  os_log_type_t v20 = type;
  BOOL v21 = os_log_type_enabled(v12, type);
  if (!v19)
  {
    if (v21)
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v27 = "nw_candidate_manager_set_new_connection_handler";
      _os_log_impl(&dword_1830D4000, v12, v20, "%{public}s called with null handler, no backtrace", buf, 0xCu);
    }
    goto LABEL_43;
  }
  if (v21)
  {
    *(_DWORD *)buf = 136446466;
    os_log_type_t v27 = "nw_candidate_manager_set_new_connection_handler";
    __int16 v28 = 2082;
    BOOL v29 = v19;
    _os_log_impl(&dword_1830D4000, v12, v20, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v19);
  if (v11) {
    goto LABEL_45;
  }
LABEL_10:
}

BOOL nw_candidate_manager_start_client(void *a1, int a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = v3;
  if (!v3)
  {
    os_log_type_t v10 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v21 = "nw_candidate_manager_start_client";
    char v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v18 = 0;
    if (__nwlog_fault(v11, &type, &v18))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        int v12 = __nwlog_obj();
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v21 = "nw_candidate_manager_start_client";
          _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s called with null candidate_manager", buf, 0xCu);
        }
      }
      else if (v18)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        int v12 = __nwlog_obj();
        os_log_type_t v15 = type;
        BOOL v16 = os_log_type_enabled(v12, type);
        if (backtrace_string)
        {
          if (v16)
          {
            *(_DWORD *)buf = 136446466;
            BOOL v21 = "nw_candidate_manager_start_client";
            __int16 v22 = 2082;
            os_log_type_t v23 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v12, v15, "%{public}s called with null candidate_manager, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_32;
        }
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          BOOL v21 = "nw_candidate_manager_start_client";
          _os_log_impl(&dword_1830D4000, v12, v15, "%{public}s called with null candidate_manager, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        int v12 = __nwlog_obj();
        os_log_type_t v17 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v21 = "nw_candidate_manager_start_client";
          _os_log_impl(&dword_1830D4000, v12, v17, "%{public}s called with null candidate_manager, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_32:
    if (v11) {
      free(v11);
    }
    goto LABEL_10;
  }
  if (v3[7] || v3[9] || v3[6])
  {
    if (__nwlog_candidate_manager_log::onceToken != -1) {
      dispatch_once(&__nwlog_candidate_manager_log::onceToken, &__block_literal_global_24);
    }
    id v5 = (id)gcandidate_managerLogObj;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      id v6 = (char *)v4[1];
      *(_DWORD *)buf = 136446466;
      BOOL v21 = "nw_candidate_manager_start_client";
      __int16 v22 = 2048;
      os_log_type_t v23 = v6;
      _os_log_impl(&dword_1830D4000, v5, OS_LOG_TYPE_ERROR, "%{public}s [CM%zu] Cannot start an already started candidate_manager", buf, 0x16u);
    }

LABEL_10:
    BOOL v7 = 0;
    goto LABEL_11;
  }
  if (a2) {
    char v9 = 2;
  }
  else {
    char v9 = 0;
  }
  *((unsigned char *)v3 + 184) = v3[23] & 0xFD | v9;
  nw_candidate_manager_start_bonjour_service_resolve(v3);
  BOOL v7 = v4[6] != 0;
LABEL_11:

  return v7;
}

void sub_1836368C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_candidate_manager_start_bonjour_service_resolve(void *a1)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  id v2 = v1;
  if (!v1)
  {
    char v18 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    long long v37 = "nw_candidate_manager_start_bonjour_service_resolve";
    os_log_type_t v19 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v34 = 0;
    if (!__nwlog_fault(v19, &type, &v34)) {
      goto LABEL_51;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v20 = __nwlog_obj();
      os_log_type_t v21 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        long long v37 = "nw_candidate_manager_start_bonjour_service_resolve";
        _os_log_impl(&dword_1830D4000, v20, v21, "%{public}s called with null manager", buf, 0xCu);
      }
    }
    else if (v34)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v20 = __nwlog_obj();
      os_log_type_t v25 = type;
      BOOL v26 = os_log_type_enabled(v20, type);
      if (backtrace_string)
      {
        if (v26)
        {
          *(_DWORD *)buf = 136446466;
          long long v37 = "nw_candidate_manager_start_bonjour_service_resolve";
          __int16 v38 = 2082;
          os_log_type_t v39 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v20, v25, "%{public}s called with null manager, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_51:
        if (!v19) {
          goto LABEL_17;
        }
LABEL_52:
        free(v19);
        goto LABEL_17;
      }
      if (v26)
      {
        *(_DWORD *)buf = 136446210;
        long long v37 = "nw_candidate_manager_start_bonjour_service_resolve";
        _os_log_impl(&dword_1830D4000, v20, v25, "%{public}s called with null manager, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v20 = __nwlog_obj();
      os_log_type_t v30 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        long long v37 = "nw_candidate_manager_start_bonjour_service_resolve";
        _os_log_impl(&dword_1830D4000, v20, v30, "%{public}s called with null manager, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_50:

    goto LABEL_51;
  }
  if (v1[5])
  {
    if (v1[6])
    {
      if (__nwlog_candidate_manager_log::onceToken != -1) {
        dispatch_once(&__nwlog_candidate_manager_log::onceToken, &__block_literal_global_24);
      }
      id v3 = (id)gcandidate_managerLogObj;
      if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
      {
        id v4 = (char *)v2[1];
        *(_DWORD *)buf = 136446466;
        long long v37 = "nw_candidate_manager_start_bonjour_service_resolve";
        __int16 v38 = 2048;
        os_log_type_t v39 = v4;
        _os_log_impl(&dword_1830D4000, v3, OS_LOG_TYPE_INFO, "%{public}s [CM%zu] service resolver already running", buf, 0x16u);
      }
    }
    else
    {
      id v5 = v1[10];
      BOOL v6 = -[NWConcrete_nw_parameters initWithParameters:stripConnected:shallowCopy:]((id *)[NWConcrete_nw_parameters alloc], v5, 0, 0);

      nw_parameters_set_include_peer_to_peer((nw_parameters_t)v6, 0);
      evaluator_for_endpoint = nw_path_create_evaluator_for_endpoint(v2[5], (void *)v6);
      id v8 = (os_unfair_lock_s *)evaluator_for_endpoint;
      if (evaluator_for_endpoint)
      {
        char v9 = evaluator_for_endpoint;
        os_unfair_lock_lock(v8 + 24);
        id v10 = v9[6];
        os_unfair_lock_unlock(v8 + 24);
      }
      else
      {
        id v10 = 0;
      }
      char v11 = nw_resolver_create_with_path(v10);
      id v12 = v2[6];
      v2[6] = v11;

      if (__nwlog_candidate_manager_log::onceToken != -1) {
        dispatch_once(&__nwlog_candidate_manager_log::onceToken, &__block_literal_global_24);
      }
      os_log_type_t v13 = (id)gcandidate_managerLogObj;
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        unint64_t v14 = (char *)v2[1];
        id v16 = v2[5];
        id v15 = v2[6];
        *(_DWORD *)buf = 136446978;
        long long v37 = "nw_candidate_manager_start_bonjour_service_resolve";
        __int16 v38 = 2048;
        os_log_type_t v39 = v14;
        __int16 v40 = 2112;
        id v41 = v15;
        __int16 v42 = 2112;
        id v43 = v16;
        _os_log_impl(&dword_1830D4000, v13, OS_LOG_TYPE_INFO, "%{public}s [CM%zu] Created service resolver %@ for %@", buf, 0x2Au);
      }

      id v17 = v2[6];
      v32[0] = MEMORY[0x1E4F143A8];
      v32[1] = 3221225472;
      v32[2] = __nw_candidate_manager_start_bonjour_service_resolve_block_invoke;
      v32[3] = &unk_1E523AC20;
      os_log_type_t v33 = v2;
      nw_resolver_set_update_handler(v17, 0, v32);
    }
    goto LABEL_17;
  }
  __int16 v22 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  long long v37 = "nw_candidate_manager_start_bonjour_service_resolve";
  os_log_type_t v19 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v34 = 0;
  if (!__nwlog_fault(v19, &type, &v34)) {
    goto LABEL_51;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    os_log_type_t v20 = __nwlog_obj();
    os_log_type_t v23 = type;
    if (os_log_type_enabled(v20, type))
    {
      *(_DWORD *)buf = 136446210;
      long long v37 = "nw_candidate_manager_start_bonjour_service_resolve";
      _os_log_impl(&dword_1830D4000, v20, v23, "%{public}s called with null manager->service", buf, 0xCu);
    }
    goto LABEL_50;
  }
  if (!v34)
  {
    os_log_type_t v20 = __nwlog_obj();
    os_log_type_t v31 = type;
    if (os_log_type_enabled(v20, type))
    {
      *(_DWORD *)buf = 136446210;
      long long v37 = "nw_candidate_manager_start_bonjour_service_resolve";
      _os_log_impl(&dword_1830D4000, v20, v31, "%{public}s called with null manager->service, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_50;
  }
  os_log_type_t v27 = (char *)__nw_create_backtrace_string();
  os_log_type_t v20 = __nwlog_obj();
  os_log_type_t v28 = type;
  BOOL v29 = os_log_type_enabled(v20, type);
  if (!v27)
  {
    if (v29)
    {
      *(_DWORD *)buf = 136446210;
      long long v37 = "nw_candidate_manager_start_bonjour_service_resolve";
      _os_log_impl(&dword_1830D4000, v20, v28, "%{public}s called with null manager->service, no backtrace", buf, 0xCu);
    }
    goto LABEL_50;
  }
  if (v29)
  {
    *(_DWORD *)buf = 136446466;
    long long v37 = "nw_candidate_manager_start_bonjour_service_resolve";
    __int16 v38 = 2082;
    os_log_type_t v39 = v27;
    _os_log_impl(&dword_1830D4000, v20, v28, "%{public}s called with null manager->service, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v27);
  if (v19) {
    goto LABEL_52;
  }
LABEL_17:
}

void sub_183636FB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

void __nw_candidate_manager_start_bonjour_service_resolve_block_invoke(uint64_t a1, int a2, void *a3)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  if (__nwlog_candidate_manager_log::onceToken != -1) {
    dispatch_once(&__nwlog_candidate_manager_log::onceToken, &__block_literal_global_24);
  }
  BOOL v6 = (id)gcandidate_managerLogObj;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    uint64_t v8 = *(void *)(v7 + 8);
    uint64_t v9 = *(void *)(v7 + 40);
    id v10 = "invalid";
    os_log_type_t v31 = "nw_candidate_manager_start_bonjour_service_resolve_block_invoke";
    if (a2 == 2) {
      id v10 = "complete";
    }
    __int16 v32 = 2048;
    *(_DWORD *)buf = 136447234;
    if (a2 == 1) {
      id v10 = "in-progress";
    }
    uint64_t v33 = v8;
    __int16 v34 = 2112;
    uint64_t v35 = v9;
    __int16 v36 = 2082;
    long long v37 = v10;
    __int16 v38 = 2112;
    id v39 = v5;
    _os_log_impl(&dword_1830D4000, v6, OS_LOG_TYPE_DEFAULT, "%{public}s [CM%zu] %@ %{public}s resolves to %@", buf, 0x34u);
  }

  char v11 = *(id *)(a1 + 32);
  id v12 = (atomic_uchar *)v5;
  os_log_type_t v13 = (void *)v11[11];
  if (!v13)
  {
    uint64_t v17 = [MEMORY[0x1E4F1CA60] dictionary];
    char v18 = (void *)v11[11];
    v11[11] = v17;

    id v16 = 0;
    if (!v12) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  unint64_t v14 = (void *)MEMORY[0x1E4F1CA48];
  id v15 = [v13 allKeys];
  id v16 = [v14 arrayWithArray:v15];

  if (v11[8] && objc_msgSend(v16, "containsObject:")) {
    [v16 removeObject:v11[8]];
  }
  if (v12)
  {
LABEL_16:
    v27[0] = MEMORY[0x1E4F143A8];
    v27[1] = 3221225472;
    v27[2] = ___ZL54nw_candidate_manager_handle_service_resolved_endpointsP31NWConcrete_nw_candidate_managerPU22objcproto11OS_nw_array8NSObject_block_invoke;
    v27[3] = &unk_1E5247FB8;
    id v28 = v16;
    BOOL v29 = v11;
    nw_array_apply(v12, (uint64_t)v27);
  }
LABEL_17:
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  id v19 = v16;
  uint64_t v20 = [v19 countByEnumeratingWithState:&v23 objects:buf count:16];
  if (v20)
  {
    uint64_t v21 = *(void *)v24;
    do
    {
      for (uint64_t i = 0; i != v20; ++i)
      {
        if (*(void *)v24 != v21) {
          objc_enumerationMutation(v19);
        }
        nw_candidate_manager_remove_hostname_resolver(v11, *(void **)(*((void *)&v23 + 1) + 8 * i));
      }
      uint64_t v20 = [v19 countByEnumeratingWithState:&v23 objects:buf count:16];
    }
    while (v20);
  }
}

void sub_183637308(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL54nw_candidate_manager_handle_service_resolved_endpointsP31NWConcrete_nw_candidate_managerPU22objcproto11OS_nw_array8NSObject_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if ([*(id *)(a1 + 32) containsObject:v4])
  {
    [*(id *)(a1 + 32) removeObject:v4];
  }
  else
  {
    id v5 = nw_candidate_manager_resolver_for_service_resolved_endpoint(*(void **)(a1 + 40), v4);
    [*(id *)(*(void *)(a1 + 40) + 88) setObject:v5 forKeyedSubscript:v4];
  }
  return 1;
}

void sub_1836373D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_candidate_manager_start_advertise(void *a1, int a2)
{
  uint64_t v71 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = (id *)v3;
  if (!v3)
  {
    os_log_type_t v27 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v65 = "nw_candidate_manager_start_advertise";
    id v28 = (char *)_os_log_send_and_compose_impl();

    __str[0] = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v28, __str, &type))
    {
      if (__str[0] == 17)
      {
        BOOL v29 = __nwlog_obj();
        os_log_type_t v30 = __str[0];
        if (os_log_type_enabled(v29, (os_log_type_t)__str[0]))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v65 = "nw_candidate_manager_start_advertise";
          _os_log_impl(&dword_1830D4000, v29, v30, "%{public}s called with null candidate_manager", buf, 0xCu);
        }
      }
      else if (type)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        BOOL v29 = __nwlog_obj();
        os_log_type_t v32 = __str[0];
        BOOL v33 = os_log_type_enabled(v29, (os_log_type_t)__str[0]);
        if (backtrace_string)
        {
          if (v33)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v65 = "nw_candidate_manager_start_advertise";
            __int16 v66 = 2082;
            __int16 v67 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v29, v32, "%{public}s called with null candidate_manager, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_45;
        }
        if (v33)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v65 = "nw_candidate_manager_start_advertise";
          _os_log_impl(&dword_1830D4000, v29, v32, "%{public}s called with null candidate_manager, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        BOOL v29 = __nwlog_obj();
        os_log_type_t v34 = __str[0];
        if (os_log_type_enabled(v29, (os_log_type_t)__str[0]))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v65 = "nw_candidate_manager_start_advertise";
          _os_log_impl(&dword_1830D4000, v29, v34, "%{public}s called with null candidate_manager, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_45:
    if (v28) {
      free(v28);
    }
    goto LABEL_15;
  }
  if (!v3[21])
  {
    if (__nwlog_candidate_manager_log::onceToken != -1) {
      dispatch_once(&__nwlog_candidate_manager_log::onceToken, &__block_literal_global_24);
    }
    id v5 = (id)gcandidate_managerLogObj;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      uint64_t v7 = (char *)v4[1];
      *(_DWORD *)buf = 136446466;
      os_log_type_t v65 = "nw_candidate_manager_start_advertise";
      __int16 v66 = 2048;
      __int16 v67 = v7;
      _os_log_impl(&dword_1830D4000, v5, OS_LOG_TYPE_ERROR, "%{public}s [CM%zu] Cannot advertise without a new connection handler", buf, 0x16u);
    }
    goto LABEL_14;
  }
  if (v3[6] || v3[9])
  {
    if (__nwlog_candidate_manager_log::onceToken != -1) {
      dispatch_once(&__nwlog_candidate_manager_log::onceToken, &__block_literal_global_24);
    }
    id v5 = (id)gcandidate_managerLogObj;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      BOOL v6 = (char *)v4[1];
      *(_DWORD *)buf = 136446466;
      os_log_type_t v65 = "nw_candidate_manager_start_advertise";
      __int16 v66 = 2048;
      __int16 v67 = v6;
      _os_log_impl(&dword_1830D4000, v5, OS_LOG_TYPE_ERROR, "%{public}s [CM%zu] Cannot start an already started candidate_manager", buf, 0x16u);
    }
LABEL_14:

LABEL_15:
    uint64_t v8 = 0;
    goto LABEL_16;
  }
  snprintf(__str, 0x10uLL, "%d", a2);
  id v10 = nw_listener_create_with_port(__str, (nw_parameters_t)v4[10]);
  bonjour_service_name = nw_endpoint_get_bonjour_service_name((nw_endpoint_t)v4[5]);
  bonjour_service_os_log_type_t type = nw_endpoint_get_bonjour_service_type((nw_endpoint_t)v4[5]);
  bonjour_service_domain = nw_endpoint_get_bonjour_service_domain((nw_endpoint_t)v4[5]);
  nw_endpoint_t bonjour_service = nw_advertise_descriptor_create_bonjour_service(bonjour_service_name, bonjour_service_type, bonjour_service_domain);
  nw_listener_set_advertise_descriptor(v10, bonjour_service);
  handler[0] = MEMORY[0x1E4F143A8];
  handler[1] = 3221225472;
  handler[2] = __nw_candidate_manager_start_advertise_block_invoke;
  handler[3] = &unk_1E523BC08;
  id v15 = v4;
  __int16 v61 = v15;
  nw_listener_set_new_connection_handler(v10, handler);
  v57[0] = MEMORY[0x1E4F143A8];
  v57[1] = 3221225472;
  v57[2] = __nw_candidate_manager_start_advertise_block_invoke_142;
  v57[3] = &unk_1E524BB98;
  id v16 = v10;
  int v58 = v16;
  uint64_t v17 = v15;
  os_log_type_t v59 = v17;
  nw_listener_set_state_changed_handler(v16, v57);
  objc_storeStrong(v4 + 9, v10);
  char v18 = v17;
  id v19 = v4[10];
  uint64_t v20 = v19;
  if (!v19)
  {
    uint64_t v35 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v65 = "nw_candidate_manager_copy_workloop";
    __int16 v36 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v62 = 0;
    if (__nwlog_fault(v36, &type, &v62))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        long long v37 = __nwlog_obj();
        os_log_type_t v38 = type;
        if (os_log_type_enabled(v37, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v65 = "nw_candidate_manager_copy_workloop";
          _os_log_impl(&dword_1830D4000, v37, v38, "%{public}s called with null parameters", buf, 0xCu);
        }
      }
      else if (v62)
      {
        os_log_type_t v45 = (char *)__nw_create_backtrace_string();
        long long v37 = __nwlog_obj();
        os_log_type_t v46 = type;
        BOOL v47 = os_log_type_enabled(v37, type);
        if (v45)
        {
          if (v47)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v65 = "nw_candidate_manager_copy_workloop";
            __int16 v66 = 2082;
            __int16 v67 = v45;
            _os_log_impl(&dword_1830D4000, v37, v46, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v45);
          goto LABEL_90;
        }
        if (v47)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v65 = "nw_candidate_manager_copy_workloop";
          _os_log_impl(&dword_1830D4000, v37, v46, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        long long v37 = __nwlog_obj();
        os_log_type_t v52 = type;
        if (os_log_type_enabled(v37, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v65 = "nw_candidate_manager_copy_workloop";
          _os_log_impl(&dword_1830D4000, v37, v52, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_90:
    if (v36) {
      free(v36);
    }
    BOOL v23 = 0;
    goto LABEL_24;
  }
  uint64_t v21 = v19;
  id v22 = *(id *)(v21[13] + 136);

  if (!v22)
  {
    id v39 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v65 = "nw_candidate_manager_copy_workloop";
    uint64_t v40 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v62 = 0;
    if (!__nwlog_fault(v40, &type, &v62)) {
      goto LABEL_99;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v41 = __nwlog_obj();
      os_log_type_t v42 = type;
      if (os_log_type_enabled(v41, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v65 = "nw_candidate_manager_copy_workloop";
        _os_log_impl(&dword_1830D4000, v41, v42, "%{public}s called with null context", buf, 0xCu);
      }
    }
    else if (v62)
    {
      __int16 v48 = (char *)__nw_create_backtrace_string();
      id v41 = __nwlog_obj();
      os_log_type_t v55 = type;
      BOOL v49 = os_log_type_enabled(v41, type);
      if (v48)
      {
        if (v49)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v65 = "nw_candidate_manager_copy_workloop";
          __int16 v66 = 2082;
          __int16 v67 = v48;
          _os_log_impl(&dword_1830D4000, v41, v55, "%{public}s called with null context, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v48);
        if (!v40) {
          goto LABEL_101;
        }
        goto LABEL_100;
      }
      if (v49)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v65 = "nw_candidate_manager_copy_workloop";
        _os_log_impl(&dword_1830D4000, v41, v55, "%{public}s called with null context, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v41 = __nwlog_obj();
      os_log_type_t v53 = type;
      if (os_log_type_enabled(v41, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v65 = "nw_candidate_manager_copy_workloop";
        _os_log_impl(&dword_1830D4000, v41, v53, "%{public}s called with null context, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_98;
  }
  BOOL v23 = nw_context_copy_workloop(v22);
  if (v23) {
    goto LABEL_23;
  }
  if (nw_context_copy_implicit_context::onceToken != -1) {
    dispatch_once(&nw_context_copy_implicit_context::onceToken, &__block_literal_global_18);
  }
  id v24 = (id)nw_context_copy_implicit_context::implicit_context;
  BOOL v23 = nw_context_copy_workloop(v24);

  if (v23) {
    goto LABEL_23;
  }
  id v43 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v65 = "nw_candidate_manager_copy_workloop";
  uint64_t v40 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v62 = 0;
  if (__nwlog_fault(v40, &type, &v62))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v41 = __nwlog_obj();
      os_log_type_t v44 = type;
      if (os_log_type_enabled(v41, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v65 = "nw_candidate_manager_copy_workloop";
        _os_log_impl(&dword_1830D4000, v41, v44, "%{public}s called with null workloop", buf, 0xCu);
      }
LABEL_98:

      goto LABEL_99;
    }
    if (!v62)
    {
      id v41 = __nwlog_obj();
      os_log_type_t v54 = type;
      if (os_log_type_enabled(v41, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v65 = "nw_candidate_manager_copy_workloop";
        _os_log_impl(&dword_1830D4000, v41, v54, "%{public}s called with null workloop, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_98;
    }
    os_log_type_t v50 = (char *)__nw_create_backtrace_string();
    id v41 = __nwlog_obj();
    os_log_type_t v56 = type;
    BOOL v51 = os_log_type_enabled(v41, type);
    if (!v50)
    {
      if (v51)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v65 = "nw_candidate_manager_copy_workloop";
        _os_log_impl(&dword_1830D4000, v41, v56, "%{public}s called with null workloop, no backtrace", buf, 0xCu);
      }
      goto LABEL_98;
    }
    if (v51)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v65 = "nw_candidate_manager_copy_workloop";
      __int16 v66 = 2082;
      __int16 v67 = v50;
      _os_log_impl(&dword_1830D4000, v41, v56, "%{public}s called with null workloop, dumping backtrace:%{public}s", buf, 0x16u);
    }

    free(v50);
  }
LABEL_99:
  if (v40) {
LABEL_100:
  }
    free(v40);
LABEL_101:
  BOOL v23 = 0;
LABEL_23:

LABEL_24:
  nw_listener_set_queue(v16, (dispatch_queue_t)v23);

  nw_listener_start(v16);
  if (__nwlog_candidate_manager_log::onceToken != -1) {
    dispatch_once(&__nwlog_candidate_manager_log::onceToken, &__block_literal_global_24);
  }
  long long v25 = (id)gcandidate_managerLogObj;
  if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
  {
    long long v26 = (char *)v18[1];
    *(_DWORD *)buf = 136446722;
    os_log_type_t v65 = "nw_candidate_manager_start_advertise";
    __int16 v66 = 2048;
    __int16 v67 = v26;
    __int16 v68 = 2112;
    BOOL v69 = v16;
    _os_log_impl(&dword_1830D4000, v25, OS_LOG_TYPE_INFO, "%{public}s [CM%zu] Created listener %@", buf, 0x20u);
  }

  uint64_t v8 = 1;
LABEL_16:

  return v8;
}

void sub_183638100(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  _Unwind_Resume(a1);
}

void __nw_candidate_manager_start_advertise_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = __nw_candidate_manager_start_advertise_block_invoke_2;
  v9[3] = &unk_1E524BB98;
  id v10 = *(id *)(a1 + 32);
  id v4 = (NWConcrete_nw_connection *)v3;
  char v11 = v4;
  nw_connection_set_state_changed_handler(&v4->super, v9);
  if (__nwlog_candidate_manager_log::onceToken != -1) {
    dispatch_once(&__nwlog_candidate_manager_log::onceToken, &__block_literal_global_24);
  }
  id v5 = (id)gcandidate_managerLogObj;
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8);
    *(_DWORD *)buf = 136446722;
    os_log_type_t v13 = "nw_candidate_manager_start_advertise_block_invoke";
    __int16 v14 = 2048;
    uint64_t v15 = v6;
    __int16 v16 = 2112;
    uint64_t v17 = v4;
    _os_log_impl(&dword_1830D4000, v5, OS_LOG_TYPE_INFO, "%{public}s [CM%zu] Received incoming connection %@", buf, 0x20u);
  }

  uint64_t v7 = *(NWConcrete_nw_candidate_manager **)(a1 + 32);
  if (v7->connection)
  {
    id new_connection_handler = (void (**)(id, NWConcrete_nw_connection *))v7->new_connection_handler;
    if (!new_connection_handler) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  nw_candidate_manager_set_connection(v7, v4);
  id new_connection_handler = *(void (***)(id, NWConcrete_nw_connection *))(*(void *)(a1 + 32) + 168);
  if (new_connection_handler) {
LABEL_9:
  }
    new_connection_handler[2](new_connection_handler, v4);
LABEL_10:
}

void sub_18363834C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void nw_candidate_manager_set_internet_fallback(void *a1, void *a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  if (v3)
  {
    if (nw_parameters_get_local_only(*((nw_parameters_t *)v3 + 10)))
    {
      if (__nwlog_candidate_manager_log::onceToken != -1) {
        dispatch_once(&__nwlog_candidate_manager_log::onceToken, &__block_literal_global_24);
      }
      id v5 = (id)gcandidate_managerLogObj;
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        uint64_t v6 = (char *)*((void *)v3 + 1);
        *(_DWORD *)buf = 136446466;
        uint64_t v18 = "nw_candidate_manager_set_internet_fallback";
        __int16 v19 = 2048;
        uint64_t v20 = v6;
        _os_log_impl(&dword_1830D4000, v5, OS_LOG_TYPE_ERROR, "%{public}s [CM%zu] Can't set Internet fallback with local only parameters", buf, 0x16u);
      }
    }
    if (v4)
    {
      if (nw_parameters_get_server_mode(*((void **)v3 + 10)))
      {
        nw_candidate_manager_start_ids_internal(v3, v4);
      }
      else
      {
        objc_storeStrong((id *)v3 + 2, a2);
        nw_candidate_manager_monitor_interface_use((NWConcrete_nw_candidate_manager *)v3);
      }
    }
    else
    {
      nw_candidate_manager_stop_ids((NWConcrete_nw_candidate_manager *)v3);
    }
    goto LABEL_13;
  }
  uint64_t v7 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v18 = "nw_candidate_manager_set_internet_fallback";
  uint64_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v18 = "nw_candidate_manager_set_internet_fallback";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null candidate_manager", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v18 = "nw_candidate_manager_set_internet_fallback";
          __int16 v19 = 2082;
          uint64_t v20 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null candidate_manager, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_30;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v18 = "nw_candidate_manager_set_internet_fallback";
        _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null candidate_manager, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v18 = "nw_candidate_manager_set_internet_fallback";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null candidate_manager, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_30:
  if (v8) {
    free(v8);
  }
LABEL_13:
}

void sub_1836386F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_candidate_manager_set_original_path(void *a1, void *a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (!v3)
  {
    uint64_t v8 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    long long v25 = "nw_candidate_manager_set_original_path";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (!__nwlog_fault(v9, &type, &v22)) {
      goto LABEL_42;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        long long v25 = "nw_candidate_manager_set_original_path";
        _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null candidate_manager", buf, 0xCu);
      }
    }
    else if (v22)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          long long v25 = "nw_candidate_manager_set_original_path";
          __int16 v26 = 2082;
          os_log_type_t v27 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null candidate_manager, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_42:
        if (!v9) {
          goto LABEL_8;
        }
LABEL_43:
        free(v9);
        goto LABEL_8;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        long long v25 = "nw_candidate_manager_set_original_path";
        _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null candidate_manager, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        long long v25 = "nw_candidate_manager_set_original_path";
        _os_log_impl(&dword_1830D4000, v10, v20, "%{public}s called with null candidate_manager, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_41:

    goto LABEL_42;
  }
  if (v4)
  {
    if (__nwlog_candidate_manager_log::onceToken != -1) {
      dispatch_once(&__nwlog_candidate_manager_log::onceToken, &__block_literal_global_24);
    }
    uint64_t v6 = (id)gcandidate_managerLogObj;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      uint64_t v7 = (char *)*((void *)v3 + 1);
      *(_DWORD *)buf = 136446722;
      long long v25 = "nw_candidate_manager_set_original_path";
      __int16 v26 = 2048;
      os_log_type_t v27 = v7;
      __int16 v28 = 2112;
      BOOL v29 = v5;
      _os_log_impl(&dword_1830D4000, v6, OS_LOG_TYPE_INFO, "%{public}s [CM%zu] Setting original remote endpoint %@", buf, 0x20u);
    }

    objc_storeStrong((id *)v3 + 13, a2);
    goto LABEL_8;
  }
  os_log_type_t v12 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  long long v25 = "nw_candidate_manager_set_original_path";
  uint64_t v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v22 = 0;
  if (!__nwlog_fault(v9, &type, &v22)) {
    goto LABEL_42;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    os_log_type_t v10 = __nwlog_obj();
    os_log_type_t v13 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      long long v25 = "nw_candidate_manager_set_original_path";
      _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null original_remote_endpoint", buf, 0xCu);
    }
    goto LABEL_41;
  }
  if (!v22)
  {
    os_log_type_t v10 = __nwlog_obj();
    os_log_type_t v21 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      long long v25 = "nw_candidate_manager_set_original_path";
      _os_log_impl(&dword_1830D4000, v10, v21, "%{public}s called with null original_remote_endpoint, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_41;
  }
  uint64_t v17 = (char *)__nw_create_backtrace_string();
  os_log_type_t v10 = __nwlog_obj();
  os_log_type_t v18 = type;
  BOOL v19 = os_log_type_enabled(v10, type);
  if (!v17)
  {
    if (v19)
    {
      *(_DWORD *)buf = 136446210;
      long long v25 = "nw_candidate_manager_set_original_path";
      _os_log_impl(&dword_1830D4000, v10, v18, "%{public}s called with null original_remote_endpoint, no backtrace", buf, 0xCu);
    }
    goto LABEL_41;
  }
  if (v19)
  {
    *(_DWORD *)buf = 136446466;
    long long v25 = "nw_candidate_manager_set_original_path";
    __int16 v26 = 2082;
    os_log_type_t v27 = v17;
    _os_log_impl(&dword_1830D4000, v10, v18, "%{public}s called with null original_remote_endpoint, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v17);
  if (v9) {
    goto LABEL_43;
  }
LABEL_8:
}

void nw_candidate_manager_remove_injected_paths(void *a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    if (__nwlog_candidate_manager_log::onceToken != -1) {
      dispatch_once(&__nwlog_candidate_manager_log::onceToken, &__block_literal_global_24);
    }
    id v2 = (id)gcandidate_managerLogObj;
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      unint64_t log_id = v1->log_id;
      *(_DWORD *)buf = 136446466;
      os_log_type_t v15 = "nw_candidate_manager_remove_injected_paths";
      __int16 v16 = 2048;
      uint64_t v17 = (char *)log_id;
      _os_log_impl(&dword_1830D4000, v2, OS_LOG_TYPE_INFO, "%{public}s [CM%zu] Removing injected paths", buf, 0x16u);
    }

    nw_candidate_manager_stop_ids(v1);
    nw_connection_remove_all_interface_options(v1->connection);
    goto LABEL_7;
  }
  id v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v15 = "nw_candidate_manager_remove_injected_paths";
  id v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (__nwlog_fault(v5, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v15 = "nw_candidate_manager_remove_injected_paths";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null candidate_manager", buf, 0xCu);
      }
    }
    else if (v12)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v15 = "nw_candidate_manager_remove_injected_paths";
          __int16 v16 = 2082;
          uint64_t v17 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null candidate_manager, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_24;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v15 = "nw_candidate_manager_remove_injected_paths";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null candidate_manager, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v15 = "nw_candidate_manager_remove_injected_paths";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null candidate_manager, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_24:
  if (v5) {
    free(v5);
  }
LABEL_7:
}

void sub_183638F94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

nw_endpoint_t nw_candidate_manager_encode_ids_path(void *a1, void *a2, void *a3, void *a4)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  os_log_type_t v7 = a1;
  id v8 = a2;
  id v9 = a3;
  id v10 = a4;
  if (v7)
  {
    nw_endpoint_t v11 = nw_path_copy_effective_remote_endpoint(v7);
    if (v11)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      char v12 = (id)gLogObj;
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v34 = "nw_candidate_manager_encode_ids_path";
        _os_log_impl(&dword_1830D4000, v12, OS_LOG_TYPE_ERROR, "%{public}s Not supported", buf, 0xCu);
      }

      os_log_type_t v13 = v11;
LABEL_6:

      goto LABEL_7;
    }
    BOOL v19 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v34 = "nw_candidate_manager_encode_ids_path";
    os_log_type_t v20 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v31 = 0;
    if (__nwlog_fault(v20, &type, &v31))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v21 = __nwlog_obj();
        os_log_type_t v22 = type;
        if (os_log_type_enabled(v21, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v34 = "nw_candidate_manager_encode_ids_path";
          _os_log_impl(&dword_1830D4000, v21, v22, "%{public}s called with null endpoint", buf, 0xCu);
        }
      }
      else if (v31)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v21 = __nwlog_obj();
        os_log_type_t v27 = type;
        BOOL v28 = os_log_type_enabled(v21, type);
        if (backtrace_string)
        {
          if (v28)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v34 = "nw_candidate_manager_encode_ids_path";
            __int16 v35 = 2082;
            __int16 v36 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v21, v27, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_43;
        }
        if (v28)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v34 = "nw_candidate_manager_encode_ids_path";
          _os_log_impl(&dword_1830D4000, v21, v27, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        os_log_type_t v21 = __nwlog_obj();
        os_log_type_t v30 = type;
        if (os_log_type_enabled(v21, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v34 = "nw_candidate_manager_encode_ids_path";
          _os_log_impl(&dword_1830D4000, v21, v30, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_43:
    if (v20) {
      free(v20);
    }
    goto LABEL_6;
  }
  os_log_type_t v15 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v34 = "nw_candidate_manager_encode_ids_path";
  __int16 v16 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v31 = 0;
  if (__nwlog_fault(v16, &type, &v31))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v17 = __nwlog_obj();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v17, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v34 = "nw_candidate_manager_encode_ids_path";
        _os_log_impl(&dword_1830D4000, v17, v18, "%{public}s called with null path", buf, 0xCu);
      }
    }
    else if (v31)
    {
      BOOL v23 = (char *)__nw_create_backtrace_string();
      uint64_t v17 = __nwlog_obj();
      os_log_type_t v24 = type;
      BOOL v25 = os_log_type_enabled(v17, type);
      if (v23)
      {
        if (v25)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v34 = "nw_candidate_manager_encode_ids_path";
          __int16 v35 = 2082;
          __int16 v36 = v23;
          _os_log_impl(&dword_1830D4000, v17, v24, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v23);
        goto LABEL_37;
      }
      if (v25)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v34 = "nw_candidate_manager_encode_ids_path";
        _os_log_impl(&dword_1830D4000, v17, v24, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v17 = __nwlog_obj();
      os_log_type_t v29 = type;
      if (os_log_type_enabled(v17, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v34 = "nw_candidate_manager_encode_ids_path";
        _os_log_impl(&dword_1830D4000, v17, v29, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_37:
  if (v16) {
    free(v16);
  }
  nw_endpoint_t v11 = 0;
LABEL_7:

  return v11;
}

uint64_t nw_candidate_manager_encode_ids_connection(void *a1, void *a2, void *a3, uint64_t a4, void *a5, unsigned int a6, void *a7)
{
  return nw_candidate_endpoint_for_ids_connection(a1, a2, a3, a5, a6, a7);
}

uint64_t nw_candidate_endpoint_for_ids_connection(void *a1, void *a2, void *a3, void *a4, unsigned int a5, void *a6)
{
  __str[4] = *MEMORY[0x1E4F143B8];
  id v11 = a1;
  id v12 = a2;
  id v13 = a3;
  id v178 = a4;
  v176 = v11;
  v177 = a6;
  v174 = v12;
  v175 = v13;
  if (!v11)
  {
    v115 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_candidate_endpoint_for_ids_connection";
    __int16 v116 = (char *)_os_log_send_and_compose_impl();

    type[0] = 16;
    LOBYTE(__str[0]) = 0;
    if (!__nwlog_fault(v116, type, __str)) {
      goto LABEL_316;
    }
    if (type[0] == 17)
    {
      v117 = __nwlog_obj();
      os_log_type_t v118 = type[0];
      if (os_log_type_enabled(v117, (os_log_type_t)type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_candidate_endpoint_for_ids_connection";
        _os_log_impl(&dword_1830D4000, v117, v118, "%{public}s called with null connection", buf, 0xCu);
      }
      goto LABEL_315;
    }
    if (!LOBYTE(__str[0]))
    {
      v117 = __nwlog_obj();
      os_log_type_t v163 = type[0];
      if (os_log_type_enabled(v117, (os_log_type_t)type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_candidate_endpoint_for_ids_connection";
        _os_log_impl(&dword_1830D4000, v117, v163, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_315;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v117 = __nwlog_obj();
    os_log_type_t v140 = type[0];
    BOOL v141 = os_log_type_enabled(v117, (os_log_type_t)type[0]);
    if (!backtrace_string)
    {
      if (v141)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_candidate_endpoint_for_ids_connection";
        _os_log_impl(&dword_1830D4000, v117, v140, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
      goto LABEL_315;
    }
    if (v141)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_candidate_endpoint_for_ids_connection";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = backtrace_string;
      _os_log_impl(&dword_1830D4000, v117, v140, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_246;
  }
  if (!v12)
  {
    v119 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_candidate_endpoint_for_ids_connection";
    __int16 v116 = (char *)_os_log_send_and_compose_impl();

    type[0] = 16;
    LOBYTE(__str[0]) = 0;
    if (!__nwlog_fault(v116, type, __str)) {
      goto LABEL_316;
    }
    if (type[0] == 17)
    {
      v117 = __nwlog_obj();
      os_log_type_t v120 = type[0];
      if (os_log_type_enabled(v117, (os_log_type_t)type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_candidate_endpoint_for_ids_connection";
        _os_log_impl(&dword_1830D4000, v117, v120, "%{public}s called with null client_parameters", buf, 0xCu);
      }
      goto LABEL_315;
    }
    if (!LOBYTE(__str[0]))
    {
      v117 = __nwlog_obj();
      os_log_type_t v164 = type[0];
      if (os_log_type_enabled(v117, (os_log_type_t)type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_candidate_endpoint_for_ids_connection";
        _os_log_impl(&dword_1830D4000, v117, v164, "%{public}s called with null client_parameters, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_315;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v117 = __nwlog_obj();
    os_log_type_t v142 = type[0];
    BOOL v143 = os_log_type_enabled(v117, (os_log_type_t)type[0]);
    if (!backtrace_string)
    {
      if (v143)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_candidate_endpoint_for_ids_connection";
        _os_log_impl(&dword_1830D4000, v117, v142, "%{public}s called with null client_parameters, no backtrace", buf, 0xCu);
      }
      goto LABEL_315;
    }
    if (v143)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_candidate_endpoint_for_ids_connection";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = backtrace_string;
      _os_log_impl(&dword_1830D4000, v117, v142, "%{public}s called with null client_parameters, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_246;
  }
  if (!v13)
  {
    uint64_t v121 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_candidate_endpoint_for_ids_connection";
    __int16 v116 = (char *)_os_log_send_and_compose_impl();

    type[0] = 16;
    LOBYTE(__str[0]) = 0;
    if (!__nwlog_fault(v116, type, __str)) {
      goto LABEL_316;
    }
    if (type[0] == 17)
    {
      v117 = __nwlog_obj();
      os_log_type_t v122 = type[0];
      if (os_log_type_enabled(v117, (os_log_type_t)type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_candidate_endpoint_for_ids_connection";
        _os_log_impl(&dword_1830D4000, v117, v122, "%{public}s called with null lcid", buf, 0xCu);
      }
      goto LABEL_315;
    }
    if (!LOBYTE(__str[0]))
    {
      v117 = __nwlog_obj();
      os_log_type_t v165 = type[0];
      if (os_log_type_enabled(v117, (os_log_type_t)type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_candidate_endpoint_for_ids_connection";
        _os_log_impl(&dword_1830D4000, v117, v165, "%{public}s called with null lcid, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_315;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v117 = __nwlog_obj();
    os_log_type_t v144 = type[0];
    BOOL v145 = os_log_type_enabled(v117, (os_log_type_t)type[0]);
    if (!backtrace_string)
    {
      if (v145)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_candidate_endpoint_for_ids_connection";
        _os_log_impl(&dword_1830D4000, v117, v144, "%{public}s called with null lcid, no backtrace", buf, 0xCu);
      }
      goto LABEL_315;
    }
    if (v145)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_candidate_endpoint_for_ids_connection";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = backtrace_string;
      _os_log_impl(&dword_1830D4000, v117, v144, "%{public}s called with null lcid, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_246;
  }
  if (!v178)
  {
    uint64_t v123 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_candidate_endpoint_for_ids_connection";
    __int16 v116 = (char *)_os_log_send_and_compose_impl();

    type[0] = 16;
    LOBYTE(__str[0]) = 0;
    if (!__nwlog_fault(v116, type, __str)) {
      goto LABEL_316;
    }
    if (type[0] == 17)
    {
      v117 = __nwlog_obj();
      os_log_type_t v124 = type[0];
      if (os_log_type_enabled(v117, (os_log_type_t)type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_candidate_endpoint_for_ids_connection";
        _os_log_impl(&dword_1830D4000, v117, v124, "%{public}s called with null rcid", buf, 0xCu);
      }
      goto LABEL_315;
    }
    if (!LOBYTE(__str[0]))
    {
      v117 = __nwlog_obj();
      os_log_type_t v166 = type[0];
      if (os_log_type_enabled(v117, (os_log_type_t)type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_candidate_endpoint_for_ids_connection";
        _os_log_impl(&dword_1830D4000, v117, v166, "%{public}s called with null rcid, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_315;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v117 = __nwlog_obj();
    os_log_type_t v146 = type[0];
    BOOL v147 = os_log_type_enabled(v117, (os_log_type_t)type[0]);
    if (!backtrace_string)
    {
      if (v147)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_candidate_endpoint_for_ids_connection";
        _os_log_impl(&dword_1830D4000, v117, v146, "%{public}s called with null rcid, no backtrace", buf, 0xCu);
      }
      goto LABEL_315;
    }
    if (v147)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_candidate_endpoint_for_ids_connection";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = backtrace_string;
      _os_log_impl(&dword_1830D4000, v117, v146, "%{public}s called with null rcid, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_246:

    free(backtrace_string);
    if (!v116) {
      goto LABEL_318;
    }
    goto LABEL_317;
  }
  if (!v177)
  {
    v125 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_candidate_endpoint_for_ids_connection";
    __int16 v116 = (char *)_os_log_send_and_compose_impl();

    type[0] = 16;
    LOBYTE(__str[0]) = 0;
    if (!__nwlog_fault(v116, type, __str)) {
      goto LABEL_316;
    }
    if (type[0] == 17)
    {
      v117 = __nwlog_obj();
      os_log_type_t v126 = type[0];
      if (os_log_type_enabled(v117, (os_log_type_t)type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_candidate_endpoint_for_ids_connection";
        _os_log_impl(&dword_1830D4000, v117, v126, "%{public}s called with null completion", buf, 0xCu);
      }
    }
    else if (LOBYTE(__str[0]))
    {
      v148 = (char *)__nw_create_backtrace_string();
      v117 = __nwlog_obj();
      os_log_type_t v149 = type[0];
      BOOL v150 = os_log_type_enabled(v117, (os_log_type_t)type[0]);
      if (v148)
      {
        if (v150)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_candidate_endpoint_for_ids_connection";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v148;
          _os_log_impl(&dword_1830D4000, v117, v149, "%{public}s called with null completion, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v148);
LABEL_316:
        if (!v116)
        {
LABEL_318:
          uint64_t v96 = 0;
          goto LABEL_181;
        }
LABEL_317:
        free(v116);
        goto LABEL_318;
      }
      if (v150)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_candidate_endpoint_for_ids_connection";
        _os_log_impl(&dword_1830D4000, v117, v149, "%{public}s called with null completion, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      v117 = __nwlog_obj();
      os_log_type_t v167 = type[0];
      if (os_log_type_enabled(v117, (os_log_type_t)type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_candidate_endpoint_for_ids_connection";
        _os_log_impl(&dword_1830D4000, v117, v167, "%{public}s called with null completion, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_315:

    goto LABEL_316;
  }
  os_log_type_t v14 = nw_connection_copy_connected_path(v11);
  v179 = v14;
  if (!v14)
  {
    v127 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_candidate_endpoint_for_ids_connection";
    v128 = (char *)_os_log_send_and_compose_impl();

    type[0] = 16;
    LOBYTE(__str[0]) = 0;
    if (__nwlog_fault(v128, type, __str))
    {
      if (type[0] == 17)
      {
        v129 = __nwlog_obj();
        os_log_type_t v130 = type[0];
        if (os_log_type_enabled(v129, (os_log_type_t)type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_candidate_endpoint_for_ids_connection";
          _os_log_impl(&dword_1830D4000, v129, v130, "%{public}s called with null path", buf, 0xCu);
        }
      }
      else if (LOBYTE(__str[0]))
      {
        v151 = (char *)__nw_create_backtrace_string();
        v129 = __nwlog_obj();
        os_log_type_t v152 = type[0];
        BOOL v153 = os_log_type_enabled(v129, (os_log_type_t)type[0]);
        if (v151)
        {
          if (v153)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_candidate_endpoint_for_ids_connection";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v151;
            _os_log_impl(&dword_1830D4000, v129, v152, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v151);
          goto LABEL_322;
        }
        if (v153)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_candidate_endpoint_for_ids_connection";
          _os_log_impl(&dword_1830D4000, v129, v152, "%{public}s called with null path, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        v129 = __nwlog_obj();
        os_log_type_t v168 = type[0];
        if (os_log_type_enabled(v129, (os_log_type_t)type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_candidate_endpoint_for_ids_connection";
          _os_log_impl(&dword_1830D4000, v129, v168, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_322:
    v113 = 0;
    if (v128) {
      free(v128);
    }
    uint64_t v96 = 0;
    goto LABEL_180;
  }
  id v15 = v12;
  __int16 v16 = (NWConcrete_nw_parameters *)-[NWConcrete_nw_parameters initWithParameters:stripConnected:shallowCopy:]((id *)[NWConcrete_nw_parameters alloc], v15, 0, 0);

  nw_parameters_set_required_netagent_classes(v16, 0, 0);
  uint64_t v17 = nw_path_copy_interface(v14);
  nw_parameters_require_interface(&v16->super, v17);

  os_log_type_t v18 = nw_path_copy_effective_local_endpoint(v14);
  nw_parameters_set_local_endpoint(&v16->super, v18);

  nw_parameters_set_reuse_local_address(&v16->super, 1);
  BOOL v19 = v175;
  size_t size = dispatch_data_get_size(v19);
  unsigned int v173 = a5;
  if (!size)
  {
    v131 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_candidate_manager_ids_quic_demux";
    os_log_type_t v22 = (char *)_os_log_send_and_compose_impl();

    type[0] = 16;
    LOBYTE(__str[0]) = 0;
    if (!__nwlog_fault(v22, type, __str)) {
      goto LABEL_35;
    }
    if (type[0] == 17)
    {
      BOOL v23 = __nwlog_obj();
      os_log_type_t v132 = type[0];
      if (os_log_type_enabled(v23, (os_log_type_t)type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_candidate_manager_ids_quic_demux";
        _os_log_impl(&dword_1830D4000, v23, v132, "%{public}s called with null dispatch_data_get_size(dst_cid)", buf, 0xCu);
      }
      goto LABEL_327;
    }
    if (!LOBYTE(__str[0]))
    {
      BOOL v23 = __nwlog_obj();
      os_log_type_t v169 = type[0];
      if (os_log_type_enabled(v23, (os_log_type_t)type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_candidate_manager_ids_quic_demux";
        _os_log_impl(&dword_1830D4000, v23, v169, "%{public}s called with null dispatch_data_get_size(dst_cid), backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_327;
    }
    v154 = (char *)__nw_create_backtrace_string();
    BOOL v23 = __nwlog_obj();
    os_log_type_t v155 = type[0];
    BOOL v156 = os_log_type_enabled(v23, (os_log_type_t)type[0]);
    if (!v154)
    {
      if (v156)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_candidate_manager_ids_quic_demux";
        _os_log_impl(&dword_1830D4000, v23, v155, "%{public}s called with null dispatch_data_get_size(dst_cid), no backtrace", buf, 0xCu);
      }
      goto LABEL_327;
    }
    if (v156)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_candidate_manager_ids_quic_demux";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v154;
      _os_log_impl(&dword_1830D4000, v23, v155, "%{public}s called with null dispatch_data_get_size(dst_cid), dumping backtrace:%{public}s", buf, 0x16u);
    }

    free(v154);
    goto LABEL_35;
  }
  *(void *)&uu[9] = 0;
  *(void *)&uu[1] = 0;
  int v187 = 0;
  *(void *)&v184[9] = 0;
  *(void *)&v184[1] = 0;
  int v185 = 0;
  if (size >= 0x15)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v21 = (id)gLogObj;
    *(_DWORD *)buf = 136446722;
    *(void *)&uint8_t buf[4] = "nw_candidate_manager_ids_quic_demux";
    *(_WORD *)&buf[12] = 2048;
    *(void *)&buf[14] = dispatch_data_get_size(v19);
    *(_WORD *)&unsigned char buf[22] = 1024;
    *(_DWORD *)&unsigned char buf[24] = 20;
    os_log_type_t v22 = (char *)_os_log_send_and_compose_impl();

    type[0] = 16;
    LOBYTE(__str[0]) = 0;
    if (!__nwlog_fault(v22, type, __str)) {
      goto LABEL_35;
    }
    if (type[0] == 17)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v23 = (id)gLogObj;
      os_log_type_t v24 = type[0];
      if (os_log_type_enabled(v23, (os_log_type_t)type[0]))
      {
        size_t v25 = dispatch_data_get_size(v19);
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_candidate_manager_ids_quic_demux";
        *(_WORD *)&buf[12] = 2048;
        *(void *)&buf[14] = v25;
        *(_WORD *)&unsigned char buf[22] = 1024;
        *(_DWORD *)&unsigned char buf[24] = 20;
        _os_log_impl(&dword_1830D4000, v23, v24, "%{public}s connection id length %zu is too large (> %d)", buf, 0x1Cu);
      }
LABEL_327:

      goto LABEL_35;
    }
    if (!LOBYTE(__str[0]))
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v23 = (id)gLogObj;
      os_log_type_t v36 = type[0];
      if (os_log_type_enabled(v23, (os_log_type_t)type[0]))
      {
        size_t v37 = dispatch_data_get_size(v19);
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_candidate_manager_ids_quic_demux";
        *(_WORD *)&buf[12] = 2048;
        *(void *)&buf[14] = v37;
        *(_WORD *)&unsigned char buf[22] = 1024;
        *(_DWORD *)&unsigned char buf[24] = 20;
        _os_log_impl(&dword_1830D4000, v23, v36, "%{public}s connection id length %zu is too large (> %d), backtrace limit exceeded", buf, 0x1Cu);
      }
      goto LABEL_327;
    }
    BOOL v28 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v29 = (id)gLogObj;
    os_log_type_t v30 = type[0];
    BOOL v31 = os_log_type_enabled(v29, (os_log_type_t)type[0]);
    if (v28)
    {
      if (v31)
      {
        size_t v32 = dispatch_data_get_size(v19);
        *(_DWORD *)buf = 136446978;
        *(void *)&uint8_t buf[4] = "nw_candidate_manager_ids_quic_demux";
        *(_WORD *)&buf[12] = 2048;
        *(void *)&buf[14] = v32;
        *(_WORD *)&unsigned char buf[22] = 1024;
        *(_DWORD *)&unsigned char buf[24] = 20;
        *(_WORD *)&buf[28] = 2082;
        *(void *)&buf[30] = v28;
        _os_log_impl(&dword_1830D4000, v29, v30, "%{public}s connection id length %zu is too large (> %d), dumping backtrace:%{public}s", buf, 0x26u);
      }

      free(v28);
      if (!v22) {
        goto LABEL_37;
      }
      goto LABEL_36;
    }
    if (v31)
    {
      size_t v38 = dispatch_data_get_size(v19);
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "nw_candidate_manager_ids_quic_demux";
      *(_WORD *)&buf[12] = 2048;
      *(void *)&buf[14] = v38;
      *(_WORD *)&unsigned char buf[22] = 1024;
      *(_DWORD *)&unsigned char buf[24] = 20;
      _os_log_impl(&dword_1830D4000, v29, v30, "%{public}s connection id length %zu is too large (> %d), no backtrace", buf, 0x1Cu);
    }

LABEL_35:
    if (!v22)
    {
LABEL_37:
      options = 0;
      goto LABEL_38;
    }
LABEL_36:
    free(v22);
    goto LABEL_37;
  }
  if (nw_protocol_demux_copy_definition::onceToken != -1) {
    dispatch_once(&nw_protocol_demux_copy_definition::onceToken, &__block_literal_global_8_26174);
  }
  if (nw_protocol_demux_copy_definition::definition)
  {
    __int16 v26 = os_retain((void *)nw_protocol_demux_copy_definition::definition);
    options = nw_protocol_create_options(v26);
    if (v26) {
      os_release(v26);
    }
  }
  else
  {
    options = nw_protocol_create_options(0);
  }
  uu[0] = -64;
  v184[0] = 64;
  __int16 v33 = dispatch_data_get_size(v19);
  unsigned __int16 v34 = v33 + 1;
  unsigned int v35 = (unsigned __int16)(v33 + 1);
  if (v35 >= 2) {
    memset(&uu[1], 255, (unsigned __int16)(v33 - 1) + 1);
  }
  *(void *)os_log_type_t type = 0;
  *(void *)&os_log_type_t type[8] = type;
  *(void *)&type[16] = 0x2000000000;
  v183[0] = 0;
  __str[0] = 0;
  __str[1] = __str;
  __str[2] = 0x2000000000;
  __str[3] = &v184[1];
  *(void *)buf = MEMORY[0x1E4F143A8];
  *(void *)&buf[8] = 0x40000000;
  *(void *)&buf[16] = __nw_dispatch_data_copyout_block_invoke;
  *(void *)&unsigned char buf[24] = &unk_1E5242B60;
  *(void *)&buf[40] = __str;
  uint64_t v189 = v34 - 1;
  *(void *)&unsigned char buf[32] = type;
  dispatch_data_apply(v19, buf);
  _Block_object_dispose(__str, 8);
  _Block_object_dispose(type, 8);
  nw_demux_options_add_pattern(options, 0, v35, (uint64_t)v184, (uint64_t)uu);
LABEL_38:

  nw_parameters_set_channel_demux_options(v16, options);
  id v39 = v15;
  int v40 = *(_DWORD *)(v39[13] + 64);

  id v41 = v14;
  if (!v40) {
    goto LABEL_62;
  }
  uint64_t v42 = v40;
  uint64_t v189 = 0;
  memset(buf, 0, sizeof(buf));
  if (proc_pidinfo(v40, 17, 1uLL, buf, 56) != 56)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v43 = (id)gLogObj;
    unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    int v45 = **(_DWORD **)(StatusReg + 8);
    *(_DWORD *)os_log_type_t type = 136446722;
    *(void *)&type[4] = "nw_candidate_endpoint_for_ids_connection";
    *(_WORD *)&type[12] = 2048;
    *(void *)&type[14] = v42;
    *(_WORD *)&type[22] = 1024;
    LODWORD(v183[0]) = v45;
    os_log_type_t v46 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(__str[0]) = 16;
    uu[0] = 0;
    if (!__nwlog_fault(v46, __str, uu)) {
      goto LABEL_58;
    }
    if (LOBYTE(__str[0]) == 17)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v47 = (id)gLogObj;
      os_log_type_t v48 = __str[0];
      if (os_log_type_enabled(v47, __str[0]))
      {
        int v49 = **(_DWORD **)(StatusReg + 8);
        *(_DWORD *)os_log_type_t type = 136446722;
        *(void *)&type[4] = "nw_candidate_endpoint_for_ids_connection";
        *(_WORD *)&type[12] = 2048;
        *(void *)&type[14] = v42;
        *(_WORD *)&type[22] = 1024;
        LODWORD(v183[0]) = v49;
        _os_log_impl(&dword_1830D4000, v47, v48, "%{public}s proc_pidinfo PROC_PIDUNIQIDENTIFIERINFO for %llu failed: %{darwin.errno}d", type, 0x1Cu);
      }
    }
    else
    {
      if (uu[0])
      {
        os_log_type_t v50 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v51 = (id)gLogObj;
        os_log_type_t v52 = __str[0];
        BOOL v53 = os_log_type_enabled(v51, __str[0]);
        if (v50)
        {
          if (v53)
          {
            int v54 = **(_DWORD **)(StatusReg + 8);
            *(_DWORD *)os_log_type_t type = 136446978;
            *(void *)&type[4] = "nw_candidate_endpoint_for_ids_connection";
            *(_WORD *)&type[12] = 2048;
            *(void *)&type[14] = v42;
            *(_WORD *)&type[22] = 1024;
            LODWORD(v183[0]) = v54;
            WORD2(v183[0]) = 2082;
            *(void *)((char *)v183 + 6) = v50;
            _os_log_impl(&dword_1830D4000, v51, v52, "%{public}s proc_pidinfo PROC_PIDUNIQIDENTIFIERINFO for %llu failed: %{darwin.errno}d, dumping backtrace:%{public}s", type, 0x26u);
          }

          free(v50);
          if (!v46) {
            goto LABEL_60;
          }
          goto LABEL_59;
        }
        if (v53)
        {
          int v57 = **(_DWORD **)(StatusReg + 8);
          *(_DWORD *)os_log_type_t type = 136446722;
          *(void *)&type[4] = "nw_candidate_endpoint_for_ids_connection";
          *(_WORD *)&type[12] = 2048;
          *(void *)&type[14] = v42;
          *(_WORD *)&type[22] = 1024;
          LODWORD(v183[0]) = v57;
          _os_log_impl(&dword_1830D4000, v51, v52, "%{public}s proc_pidinfo PROC_PIDUNIQIDENTIFIERINFO for %llu failed: %{darwin.errno}d, no backtrace", type, 0x1Cu);
        }

LABEL_58:
        if (!v46)
        {
LABEL_60:
          id v41 = v14;
          goto LABEL_61;
        }
LABEL_59:
        free(v46);
        goto LABEL_60;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v47 = (id)gLogObj;
      os_log_type_t v55 = __str[0];
      if (os_log_type_enabled(v47, __str[0]))
      {
        int v56 = **(_DWORD **)(StatusReg + 8);
        *(_DWORD *)os_log_type_t type = 136446722;
        *(void *)&type[4] = "nw_candidate_endpoint_for_ids_connection";
        *(_WORD *)&type[12] = 2048;
        *(void *)&type[14] = v42;
        *(_WORD *)&type[22] = 1024;
        LODWORD(v183[0]) = v56;
        _os_log_impl(&dword_1830D4000, v47, v55, "%{public}s proc_pidinfo PROC_PIDUNIQIDENTIFIERINFO for %llu failed: %{darwin.errno}d, backtrace limit exceeded", type, 0x1Cu);
      }
    }

    goto LABEL_58;
  }
  uint64_t v42 = *(void *)&buf[16];
LABEL_61:
  nw_parameters_set_delegated_unique_pid(v16, v42);
LABEL_62:
  *(void *)uu = 0;
  *(void *)&uu[8] = 0;
  int v58 = v41;
  *(_OWORD *)uu = *(_OWORD *)&v58[15].isa;

  if (!uuid_is_null(uu)) {
    nw_parameters_set_parent_id_inner(v16, uu, 1);
  }
  nw_parameters_set_preferred_interface_subtypes(v16, 0);
  nw_parameters_set_multipath_service(&v16->super, nw_multipath_service_disabled);
  nw_endpoint_t v59 = nw_path_copy_effective_remote_endpoint(v58);
  evaluator_for_endpoint = nw_path_create_evaluator_for_endpoint(v59, v16);

  nw_endpoint_t v61 = nw_path_copy_effective_remote_endpoint(v58);
  if (!v61)
  {
    v133 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_candidate_endpoint_for_ids_connection";
    v134 = (char *)_os_log_send_and_compose_impl();

    type[0] = 16;
    LOBYTE(__str[0]) = 0;
    if (!__nwlog_fault(v134, type, __str)) {
      goto LABEL_334;
    }
    if (type[0] == 17)
    {
      v135 = __nwlog_obj();
      os_log_type_t v136 = type[0];
      if (os_log_type_enabled(v135, (os_log_type_t)type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_candidate_endpoint_for_ids_connection";
        _os_log_impl(&dword_1830D4000, v135, v136, "%{public}s called with null endpoint", buf, 0xCu);
      }
    }
    else if (LOBYTE(__str[0]))
    {
      v157 = (char *)__nw_create_backtrace_string();
      v135 = __nwlog_obj();
      os_log_type_t v158 = type[0];
      BOOL v159 = os_log_type_enabled(v135, (os_log_type_t)type[0]);
      if (v157)
      {
        if (v159)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_candidate_endpoint_for_ids_connection";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v157;
          _os_log_impl(&dword_1830D4000, v135, v158, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v157);
        if (!v134) {
          goto LABEL_336;
        }
        goto LABEL_335;
      }
      if (v159)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_candidate_endpoint_for_ids_connection";
        _os_log_impl(&dword_1830D4000, v135, v158, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      v135 = __nwlog_obj();
      os_log_type_t v170 = type[0];
      if (os_log_type_enabled(v135, (os_log_type_t)type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_candidate_endpoint_for_ids_connection";
        _os_log_impl(&dword_1830D4000, v135, v170, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_333;
  }
  nw_endpoint_t v62 = v61;
  id v63 = [v61 copy];

  if (!v63)
  {
    v137 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_candidate_endpoint_for_ids_connection";
    v134 = (char *)_os_log_send_and_compose_impl();

    type[0] = 16;
    LOBYTE(__str[0]) = 0;
    if (!__nwlog_fault(v134, type, __str)) {
      goto LABEL_334;
    }
    if (type[0] == 17)
    {
      v135 = __nwlog_obj();
      os_log_type_t v138 = type[0];
      if (os_log_type_enabled(v135, (os_log_type_t)type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_candidate_endpoint_for_ids_connection";
        _os_log_impl(&dword_1830D4000, v135, v138, "%{public}s called with null endpoint", buf, 0xCu);
      }
    }
    else if (LOBYTE(__str[0]))
    {
      v160 = (char *)__nw_create_backtrace_string();
      v135 = __nwlog_obj();
      os_log_type_t v161 = type[0];
      BOOL v162 = os_log_type_enabled(v135, (os_log_type_t)type[0]);
      if (v160)
      {
        if (v162)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_candidate_endpoint_for_ids_connection";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v160;
          _os_log_impl(&dword_1830D4000, v135, v161, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v160);
LABEL_334:
        if (!v134)
        {
LABEL_336:
          uint64_t v96 = 0;
          goto LABEL_179;
        }
LABEL_335:
        free(v134);
        goto LABEL_336;
      }
      if (v162)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_candidate_endpoint_for_ids_connection";
        _os_log_impl(&dword_1830D4000, v135, v161, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      v135 = __nwlog_obj();
      os_log_type_t v171 = type[0];
      if (os_log_type_enabled(v135, (os_log_type_t)type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_candidate_endpoint_for_ids_connection";
        _os_log_impl(&dword_1830D4000, v135, v171, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_333:

    goto LABEL_334;
  }
  dictionary_with_initial_CFIndex length = nw_txt_record_create_dictionary_with_initial_length(0x100uLL);
  *(void *)v184 = 0;
  *(void *)&v184[8] = 0;
  if (!nw_path_evaluator_get_client_id(evaluator_for_endpoint, v184))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v73 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_candidate_endpoint_for_ids_connection";
    BOOL v74 = (char *)_os_log_send_and_compose_impl();

    type[0] = 16;
    LOBYTE(__str[0]) = 0;
    if (!__nwlog_fault(v74, type, __str)) {
      goto LABEL_175;
    }
    if (type[0] == 17)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v75 = (id)gLogObj;
      os_log_type_t v76 = type[0];
      if (os_log_type_enabled(v75, (os_log_type_t)type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_candidate_endpoint_for_ids_connection";
        _os_log_impl(&dword_1830D4000, v75, v76, "%{public}s nw_path_evaluator_get_client_id failed", buf, 0xCu);
      }
    }
    else if (LOBYTE(__str[0]))
    {
      os_log_type_t v80 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v75 = (id)gLogObj;
      os_log_type_t v81 = type[0];
      BOOL v82 = os_log_type_enabled(v75, (os_log_type_t)type[0]);
      if (v80)
      {
        if (v82)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_candidate_endpoint_for_ids_connection";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v80;
          _os_log_impl(&dword_1830D4000, v75, v81, "%{public}s nw_path_evaluator_get_client_id failed, dumping backtrace:%{public}s", buf, 0x16u);
        }

LABEL_101:
        free(v80);
        if (!v74) {
          goto LABEL_177;
        }
        goto LABEL_176;
      }
      if (v82)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_candidate_endpoint_for_ids_connection";
        _os_log_impl(&dword_1830D4000, v75, v81, "%{public}s nw_path_evaluator_get_client_id failed, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v75 = (id)gLogObj;
      os_log_type_t v87 = type[0];
      if (os_log_type_enabled(v75, (os_log_type_t)type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_candidate_endpoint_for_ids_connection";
        _os_log_impl(&dword_1830D4000, v75, v87, "%{public}s nw_path_evaluator_get_client_id failed, backtrace limit exceeded", buf, 0xCu);
      }
    }

    goto LABEL_175;
  }
  memset(buf, 0, 37);
  uuid_unparse(v184, (char *)buf);
  if (!nw_txt_record_set_key((nw_txt_record_t)dictionary_with_initial_length, "eval", buf, 0x24uLL))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v77 = (id)gLogObj;
    *(_DWORD *)os_log_type_t type = 136446210;
    *(void *)&type[4] = "nw_candidate_endpoint_for_ids_connection";
    BOOL v74 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(__str[0]) = 16;
    os_log_type_t v181 = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v74, __str, &v181)) {
      goto LABEL_175;
    }
    if (LOBYTE(__str[0]) == 17)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v78 = (id)gLogObj;
      os_log_type_t v79 = __str[0];
      if (os_log_type_enabled(v78, __str[0]))
      {
        *(_DWORD *)os_log_type_t type = 136446210;
        *(void *)&type[4] = "nw_candidate_endpoint_for_ids_connection";
        _os_log_impl(&dword_1830D4000, v78, v79, "%{public}s failed to add kIDSKeyPathUUID", type, 0xCu);
      }
      goto LABEL_149;
    }
    if (v181 == OS_LOG_TYPE_DEFAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v78 = (id)gLogObj;
      os_log_type_t v94 = __str[0];
      if (os_log_type_enabled(v78, __str[0]))
      {
        *(_DWORD *)os_log_type_t type = 136446210;
        *(void *)&type[4] = "nw_candidate_endpoint_for_ids_connection";
        _os_log_impl(&dword_1830D4000, v78, v94, "%{public}s failed to add kIDSKeyPathUUID, backtrace limit exceeded", type, 0xCu);
      }
      goto LABEL_149;
    }
    os_log_type_t v80 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v78 = (id)gLogObj;
    os_log_type_t v85 = __str[0];
    BOOL v86 = os_log_type_enabled(v78, __str[0]);
    if (!v80)
    {
      if (v86)
      {
        *(_DWORD *)os_log_type_t type = 136446210;
        *(void *)&type[4] = "nw_candidate_endpoint_for_ids_connection";
        _os_log_impl(&dword_1830D4000, v78, v85, "%{public}s failed to add kIDSKeyPathUUID, no backtrace", type, 0xCu);
      }
      goto LABEL_149;
    }
    if (v86)
    {
      *(_DWORD *)os_log_type_t type = 136446466;
      *(void *)&type[4] = "nw_candidate_endpoint_for_ids_connection";
      *(_WORD *)&type[12] = 2082;
      *(void *)&type[14] = v80;
      _os_log_impl(&dword_1830D4000, v78, v85, "%{public}s failed to add kIDSKeyPathUUID, dumping backtrace:%{public}s", type, 0x16u);
    }
LABEL_100:

    goto LABEL_101;
  }
  if (!nw_txt_record_set_key_data_value((void *)dictionary_with_initial_length, "lcid", v19))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v83 = (id)gLogObj;
    *(_DWORD *)os_log_type_t type = 136446210;
    *(void *)&type[4] = "nw_candidate_endpoint_for_ids_connection";
    BOOL v74 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(__str[0]) = 16;
    os_log_type_t v181 = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v74, __str, &v181)) {
      goto LABEL_175;
    }
    if (LOBYTE(__str[0]) == 17)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v78 = (id)gLogObj;
      os_log_type_t v84 = __str[0];
      if (os_log_type_enabled(v78, __str[0]))
      {
        *(_DWORD *)os_log_type_t type = 136446210;
        *(void *)&type[4] = "nw_candidate_endpoint_for_ids_connection";
        _os_log_impl(&dword_1830D4000, v78, v84, "%{public}s failed to add kIDSKeyLocalCID", type, 0xCu);
      }
    }
    else if (v181)
    {
      os_log_type_t v90 = __nw_create_backtrace_string();
      if (v90)
      {
        uint32_t v91 = (char *)v90;
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        __int16 v92 = (id)gLogObj;
        os_log_type_t v93 = __str[0];
        if (os_log_type_enabled(v92, __str[0]))
        {
          *(_DWORD *)os_log_type_t type = 136446466;
          *(void *)&type[4] = "nw_candidate_endpoint_for_ids_connection";
          *(_WORD *)&type[12] = 2082;
          *(void *)&type[14] = v91;
          _os_log_impl(&dword_1830D4000, v92, v93, "%{public}s failed to add kIDSKeyLocalCID, dumping backtrace:%{public}s", type, 0x16u);
        }

        free(v91);
        if (!v74) {
          goto LABEL_177;
        }
        goto LABEL_176;
      }
      os_log_type_t v78 = __nwlog_obj();
      os_log_type_t v103 = __str[0];
      if (os_log_type_enabled(v78, __str[0]))
      {
        *(_DWORD *)os_log_type_t type = 136446210;
        *(void *)&type[4] = "nw_candidate_endpoint_for_ids_connection";
        _os_log_impl(&dword_1830D4000, v78, v103, "%{public}s failed to add kIDSKeyLocalCID, no backtrace", type, 0xCu);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v78 = (id)gLogObj;
      os_log_type_t v99 = __str[0];
      if (os_log_type_enabled(v78, __str[0]))
      {
        *(_DWORD *)os_log_type_t type = 136446210;
        *(void *)&type[4] = "nw_candidate_endpoint_for_ids_connection";
        _os_log_impl(&dword_1830D4000, v78, v99, "%{public}s failed to add kIDSKeyLocalCID, backtrace limit exceeded", type, 0xCu);
      }
    }
    goto LABEL_149;
  }
  if (!nw_txt_record_set_key_data_value((void *)dictionary_with_initial_length, "rcid", v178))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v88 = (id)gLogObj;
    *(_DWORD *)os_log_type_t type = 136446210;
    *(void *)&type[4] = "nw_candidate_endpoint_for_ids_connection";
    BOOL v74 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(__str[0]) = 16;
    os_log_type_t v181 = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v74, __str, &v181)) {
      goto LABEL_175;
    }
    if (LOBYTE(__str[0]) == 17)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v78 = (id)gLogObj;
      os_log_type_t v89 = __str[0];
      if (os_log_type_enabled(v78, __str[0]))
      {
        *(_DWORD *)os_log_type_t type = 136446210;
        *(void *)&type[4] = "nw_candidate_endpoint_for_ids_connection";
        _os_log_impl(&dword_1830D4000, v78, v89, "%{public}s failed to add kIDSKeyRemoteCID", type, 0xCu);
      }
LABEL_149:

      goto LABEL_175;
    }
    if (v181 == OS_LOG_TYPE_DEFAULT)
    {
      os_log_type_t v78 = __nwlog_obj();
      os_log_type_t v104 = __str[0];
      if (os_log_type_enabled(v78, __str[0]))
      {
        *(_DWORD *)os_log_type_t type = 136446210;
        *(void *)&type[4] = "nw_candidate_endpoint_for_ids_connection";
        _os_log_impl(&dword_1830D4000, v78, v104, "%{public}s failed to add kIDSKeyRemoteCID, backtrace limit exceeded", type, 0xCu);
      }
      goto LABEL_149;
    }
    os_log_type_t v80 = (char *)__nw_create_backtrace_string();
    os_log_type_t v78 = __nwlog_obj();
    os_log_type_t v97 = __str[0];
    BOOL v98 = os_log_type_enabled(v78, __str[0]);
    if (!v80)
    {
      if (v98)
      {
        *(_DWORD *)os_log_type_t type = 136446210;
        *(void *)&type[4] = "nw_candidate_endpoint_for_ids_connection";
        _os_log_impl(&dword_1830D4000, v78, v97, "%{public}s failed to add kIDSKeyRemoteCID, no backtrace", type, 0xCu);
      }
      goto LABEL_149;
    }
    if (v98)
    {
      *(_DWORD *)os_log_type_t type = 136446466;
      *(void *)&type[4] = "nw_candidate_endpoint_for_ids_connection";
      *(_WORD *)&type[12] = 2082;
      *(void *)&type[14] = v80;
      _os_log_impl(&dword_1830D4000, v78, v97, "%{public}s failed to add kIDSKeyRemoteCID, dumping backtrace:%{public}s", type, 0x16u);
    }
    goto LABEL_100;
  }
  os_log_type_t v65 = (id)dictionary_with_initial_length;
  int v66 = snprintf((char *)__str, 0x15uLL, "%llu", v173);
  uint64_t v67 = v66;
  if (v66 >= 0x15)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v68 = (id)gLogObj;
    uint64_t v69 = v67 - 20;
    *(_DWORD *)os_log_type_t type = 136446466;
    *(void *)&type[4] = "nw_txt_record_set_key_uint64_value";
    *(_WORD *)&type[12] = 2048;
    *(void *)&type[14] = v67 - 20;
    os_log_type_t v70 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v181 = OS_LOG_TYPE_ERROR;
    char v180 = 0;
    if (__nwlog_fault(v70, &v181, &v180))
    {
      if (v181 == OS_LOG_TYPE_FAULT)
      {
        uint64_t v71 = __nwlog_obj();
        os_log_type_t v72 = v181;
        if (os_log_type_enabled(v71, v181))
        {
          *(_DWORD *)os_log_type_t type = 136446466;
          *(void *)&type[4] = "nw_txt_record_set_key_uint64_value";
          *(_WORD *)&type[12] = 2048;
          *(void *)&type[14] = v69;
          _os_log_impl(&dword_1830D4000, v71, v72, "%{public}s buffer was too small by %lu bytes", type, 0x16u);
        }
      }
      else
      {
        if (v180)
        {
          char v100 = (char *)__nw_create_backtrace_string();
          os_log_type_t v101 = __nwlog_obj();
          os_log_type_t v172 = v181;
          BOOL v102 = os_log_type_enabled(v101, v181);
          if (v100)
          {
            if (v102)
            {
              *(_DWORD *)os_log_type_t type = 136446722;
              *(void *)&type[4] = "nw_txt_record_set_key_uint64_value";
              *(_WORD *)&type[12] = 2048;
              *(void *)&type[14] = v69;
              *(_WORD *)&type[22] = 2082;
              v183[0] = v100;
              _os_log_impl(&dword_1830D4000, v101, v172, "%{public}s buffer was too small by %lu bytes, dumping backtrace:%{public}s", type, 0x20u);
            }

            free(v100);
          }
          else
          {
            if (v102)
            {
              *(_DWORD *)os_log_type_t type = 136446466;
              *(void *)&type[4] = "nw_txt_record_set_key_uint64_value";
              *(_WORD *)&type[12] = 2048;
              *(void *)&type[14] = v69;
              _os_log_impl(&dword_1830D4000, v101, v172, "%{public}s buffer was too small by %lu bytes, no backtrace", type, 0x16u);
            }
          }
          goto LABEL_156;
        }
        uint64_t v71 = __nwlog_obj();
        os_log_type_t v105 = v181;
        if (os_log_type_enabled(v71, v181))
        {
          *(_DWORD *)os_log_type_t type = 136446466;
          *(void *)&type[4] = "nw_txt_record_set_key_uint64_value";
          *(_WORD *)&type[12] = 2048;
          *(void *)&type[14] = v69;
          _os_log_impl(&dword_1830D4000, v71, v105, "%{public}s buffer was too small by %lu bytes, backtrace limit exceeded", type, 0x16u);
        }
      }
    }
LABEL_156:
    if (v70) {
      free(v70);
    }

LABEL_159:
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v106 = (id)gLogObj;
    *(_DWORD *)os_log_type_t type = 136446210;
    *(void *)&type[4] = "nw_candidate_endpoint_for_ids_connection";
    BOOL v74 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(__str[0]) = 16;
    os_log_type_t v181 = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v74, __str, &v181)) {
      goto LABEL_175;
    }
    if (LOBYTE(__str[0]) == 17)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      long long v107 = (id)gLogObj;
      os_log_type_t v108 = __str[0];
      if (os_log_type_enabled(v107, __str[0]))
      {
        *(_DWORD *)os_log_type_t type = 136446210;
        *(void *)&type[4] = "nw_candidate_endpoint_for_ids_connection";
        _os_log_impl(&dword_1830D4000, v107, v108, "%{public}s failed to add kIDSKeyRemoteInterfaceType", type, 0xCu);
      }
    }
    else if (v181)
    {
      v109 = (char *)__nw_create_backtrace_string();
      long long v107 = __nwlog_obj();
      os_log_type_t v110 = __str[0];
      BOOL v111 = os_log_type_enabled(v107, __str[0]);
      if (v109)
      {
        if (v111)
        {
          *(_DWORD *)os_log_type_t type = 136446466;
          *(void *)&type[4] = "nw_candidate_endpoint_for_ids_connection";
          *(_WORD *)&type[12] = 2082;
          *(void *)&type[14] = v109;
          _os_log_impl(&dword_1830D4000, v107, v110, "%{public}s failed to add kIDSKeyRemoteInterfaceType, dumping backtrace:%{public}s", type, 0x16u);
        }

        free(v109);
LABEL_175:
        if (!v74)
        {
LABEL_177:
          uint64_t v96 = 0;
          goto LABEL_178;
        }
LABEL_176:
        free(v74);
        goto LABEL_177;
      }
      if (v111)
      {
        *(_DWORD *)os_log_type_t type = 136446210;
        *(void *)&type[4] = "nw_candidate_endpoint_for_ids_connection";
        _os_log_impl(&dword_1830D4000, v107, v110, "%{public}s failed to add kIDSKeyRemoteInterfaceType, no backtrace", type, 0xCu);
      }
    }
    else
    {
      long long v107 = __nwlog_obj();
      os_log_type_t v112 = __str[0];
      if (os_log_type_enabled(v107, __str[0]))
      {
        *(_DWORD *)os_log_type_t type = 136446210;
        *(void *)&type[4] = "nw_candidate_endpoint_for_ids_connection";
        _os_log_impl(&dword_1830D4000, v107, v112, "%{public}s failed to add kIDSKeyRemoteInterfaceType, backtrace limit exceeded", type, 0xCu);
      }
    }

    goto LABEL_175;
  }
  BOOL v95 = nw_txt_record_set_key(v65, "rift", (const uint8_t *)__str, v66);

  if (!v95) {
    goto LABEL_159;
  }
  nw_endpoint_set_txt_record(v63, v65);
  v177[2](v177, evaluator_for_endpoint, v63);
  uint64_t v96 = 1;
LABEL_178:

LABEL_179:
  v113 = v179;
LABEL_180:

LABEL_181:
  return v96;
}

void sub_18363C174(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21)
{
  _Unwind_Resume(a1);
}

BOOL nw_txt_record_set_key_data_value(void *a1, const char *a2, void *a3)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  uint64_t v6 = a3;
  size_t size = dispatch_data_get_size(v6);
  if (strlen(a2) + 2 * size >= 0x100)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v8 = (id)gLogObj;
    *(_DWORD *)buf = 136446722;
    BOOL v31 = "nw_txt_record_set_key_data_value";
    __int16 v32 = 2080;
    uint64_t v33 = (uint64_t)a2;
    __int16 v34 = 2048;
    size_t v35 = dispatch_data_get_size(v6);
    id v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v28 = 0;
    if (__nwlog_fault(v9, &type, &v28))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v10 = (id)gLogObj;
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          size_t v12 = dispatch_data_get_size(v6);
          *(_DWORD *)buf = 136446722;
          BOOL v31 = "nw_txt_record_set_key_data_value";
          __int16 v32 = 2080;
          uint64_t v33 = (uint64_t)a2;
          __int16 v34 = 2048;
          size_t v35 = v12;
          _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s Key %s + data value length %zu too large", buf, 0x20u);
        }
      }
      else if (v28)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v10 = (id)gLogObj;
        os_log_type_t v17 = type;
        BOOL v18 = os_log_type_enabled(v10, type);
        if (backtrace_string)
        {
          if (v18)
          {
            size_t v19 = dispatch_data_get_size(v6);
            *(_DWORD *)buf = 136446978;
            BOOL v31 = "nw_txt_record_set_key_data_value";
            __int16 v32 = 2080;
            uint64_t v33 = (uint64_t)a2;
            __int16 v34 = 2048;
            size_t v35 = v19;
            __int16 v36 = 2082;
            size_t v37 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v10, v17, "%{public}s Key %s + data value length %zu too large, dumping backtrace:%{public}s", buf, 0x2Au);
          }

          free(backtrace_string);
          if (!v9) {
            goto LABEL_9;
          }
          goto LABEL_8;
        }
        if (v18)
        {
          size_t v22 = dispatch_data_get_size(v6);
          *(_DWORD *)buf = 136446722;
          BOOL v31 = "nw_txt_record_set_key_data_value";
          __int16 v32 = 2080;
          uint64_t v33 = (uint64_t)a2;
          __int16 v34 = 2048;
          size_t v35 = v22;
          _os_log_impl(&dword_1830D4000, v10, v17, "%{public}s Key %s + data value length %zu too large, no backtrace", buf, 0x20u);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v10 = (id)gLogObj;
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v10, type))
        {
          size_t v21 = dispatch_data_get_size(v6);
          *(_DWORD *)buf = 136446722;
          BOOL v31 = "nw_txt_record_set_key_data_value";
          __int16 v32 = 2080;
          uint64_t v33 = (uint64_t)a2;
          __int16 v34 = 2048;
          size_t v35 = v21;
          _os_log_impl(&dword_1830D4000, v10, v20, "%{public}s Key %s + data value length %zu too large, backtrace limit exceeded", buf, 0x20u);
        }
      }
    }
    if (!v9)
    {
LABEL_9:
      BOOL v13 = 0;
LABEL_14:

      return v13;
    }
LABEL_8:
    free(v9);
    goto LABEL_9;
  }
  if (!(2 * size))
  {
    BOOL v23 = __nwlog_obj();
    os_log_type_enabled(v23, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446210;
    BOOL v31 = "strict_calloc";
    os_log_type_t v24 = (void *)_os_log_send_and_compose_impl();

    BOOL result = __nwlog_abort((uint64_t)v24);
    if (result) {
      goto LABEL_31;
    }
    free(v24);
  }
  os_log_type_t v14 = (uint8_t *)malloc_type_calloc(1uLL, 2 * size, 0xEAFB8F1AuLL);
  if (v14) {
    goto LABEL_12;
  }
  size_t v25 = __nwlog_obj();
  os_log_type_enabled(v25, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  BOOL v31 = "strict_calloc";
  __int16 v32 = 2048;
  uint64_t v33 = 1;
  __int16 v34 = 2048;
  size_t v35 = 2 * size;
  __int16 v26 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v26);
  if (!result)
  {
    free(v26);
LABEL_12:
    applier[0] = MEMORY[0x1E4F143A8];
    applier[1] = 3221225472;
    applier[2] = ___ZL32nw_txt_record_set_key_data_valuePU27objcproto16OS_nw_txt_record8NSObjectPKcPU27objcproto16OS_dispatch_dataS__block_invoke;
    applier[3] = &__block_descriptor_48_e47_B40__0__NSObject_OS_dispatch_data__8Q16r_v24Q32l;
    applier[4] = size;
    applier[5] = v14;
    dispatch_data_apply(v6, applier);
    BOOL v13 = nw_txt_record_set_key(v5, a2, v14, 2 * size);
    if (v14) {
      free(v14);
    }
    goto LABEL_14;
  }
LABEL_31:
  __break(1u);
  return result;
}

void sub_18363C7E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL32nw_txt_record_set_key_data_valuePU27objcproto16OS_nw_txt_record8NSObjectPKcPU27objcproto16OS_dispatch_dataS__block_invoke(uint64_t a1, uint64_t a2, unint64_t a3, char *a4, uint64_t a5)
{
  if (a5)
  {
    uint64_t v5 = 2 * a3;
    do
    {
      if (a3 >= *(void *)(a1 + 32)) {
        break;
      }
      *(unsigned char *)(*(void *)(a1 + 40) + v5) = nw_printf_write_data::hex_chars[(unint64_t)*a4 >> 4];
      char v6 = *a4++;
      *(unsigned char *)(*(void *)(a1 + 40) + v5 + 1) = nw_printf_write_data::hex_chars[v6 & 0xF];
      v5 += 2;
      ++a3;
      --a5;
    }
    while (a5);
  }
  return 1;
}

uint64_t nw_protocol_fulfill_frame_request(void *a1, uint64_t a2, unsigned int a3, unsigned int a4, int a5, unsigned int *a6, unsigned char *a7)
{
  uint64_t v88 = *MEMORY[0x1E4F143B8];
  if (a6) {
    *a6 = 0;
  }
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "__nw_protocol_fulfill_frame_request";
    uint64_t v33 = (const char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    v72[0] = 0;
    if (!__nwlog_fault(v33, type, v72)) {
      goto LABEL_91;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __int16 v34 = __nwlog_obj();
      os_log_type_t v35 = type[0];
      if (!os_log_type_enabled(v34, type[0])) {
        goto LABEL_91;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "__nw_protocol_fulfill_frame_request";
      __int16 v36 = "%{public}s called with null source_array";
LABEL_90:
      _os_log_impl(&dword_1830D4000, v34, v35, v36, buf, 0xCu);
      goto LABEL_91;
    }
    if (!v72[0])
    {
      __int16 v34 = __nwlog_obj();
      os_log_type_t v35 = type[0];
      if (os_log_type_enabled(v34, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "__nw_protocol_fulfill_frame_request";
        __int16 v36 = "%{public}s called with null source_array, backtrace limit exceeded";
        goto LABEL_90;
      }
      goto LABEL_91;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __int16 v34 = __nwlog_obj();
    os_log_type_t v35 = type[0];
    BOOL v39 = os_log_type_enabled(v34, type[0]);
    if (!backtrace_string)
    {
      if (v39)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "__nw_protocol_fulfill_frame_request";
        __int16 v36 = "%{public}s called with null source_array, no backtrace";
        goto LABEL_90;
      }
      goto LABEL_91;
    }
    if (!v39) {
      goto LABEL_77;
    }
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "__nw_protocol_fulfill_frame_request";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = backtrace_string;
    int v40 = "%{public}s called with null source_array, dumping backtrace:%{public}s";
LABEL_76:
    _os_log_impl(&dword_1830D4000, v34, v35, v40, buf, 0x16u);
    goto LABEL_77;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "__nw_protocol_fulfill_frame_request";
    uint64_t v33 = (const char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    v72[0] = 0;
    if (!__nwlog_fault(v33, type, v72)) {
      goto LABEL_91;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __int16 v34 = __nwlog_obj();
      os_log_type_t v35 = type[0];
      if (!os_log_type_enabled(v34, type[0])) {
        goto LABEL_91;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "__nw_protocol_fulfill_frame_request";
      __int16 v36 = "%{public}s called with null destination_array";
      goto LABEL_90;
    }
    if (!v72[0])
    {
      __int16 v34 = __nwlog_obj();
      os_log_type_t v35 = type[0];
      if (os_log_type_enabled(v34, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "__nw_protocol_fulfill_frame_request";
        __int16 v36 = "%{public}s called with null destination_array, backtrace limit exceeded";
        goto LABEL_90;
      }
      goto LABEL_91;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __int16 v34 = __nwlog_obj();
    os_log_type_t v35 = type[0];
    BOOL v41 = os_log_type_enabled(v34, type[0]);
    if (!backtrace_string)
    {
      if (v41)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "__nw_protocol_fulfill_frame_request";
        __int16 v36 = "%{public}s called with null destination_array, no backtrace";
        goto LABEL_90;
      }
      goto LABEL_91;
    }
    if (!v41) {
      goto LABEL_77;
    }
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "__nw_protocol_fulfill_frame_request";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = backtrace_string;
    int v40 = "%{public}s called with null destination_array, dumping backtrace:%{public}s";
    goto LABEL_76;
  }
  if (!a7)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "__nw_protocol_fulfill_frame_request";
    uint64_t v33 = (const char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    v72[0] = 0;
    if (!__nwlog_fault(v33, type, v72)) {
      goto LABEL_91;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __int16 v34 = __nwlog_obj();
      os_log_type_t v35 = type[0];
      if (os_log_type_enabled(v34, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "__nw_protocol_fulfill_frame_request";
        __int16 v36 = "%{public}s called with null metadata_complete";
        goto LABEL_90;
      }
LABEL_91:
      if (!v33) {
        return 0;
      }
      BOOL v31 = (char *)v33;
      goto LABEL_45;
    }
    if (!v72[0])
    {
      __int16 v34 = __nwlog_obj();
      os_log_type_t v35 = type[0];
      if (os_log_type_enabled(v34, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "__nw_protocol_fulfill_frame_request";
        __int16 v36 = "%{public}s called with null metadata_complete, backtrace limit exceeded";
        goto LABEL_90;
      }
      goto LABEL_91;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __int16 v34 = __nwlog_obj();
    os_log_type_t v35 = type[0];
    BOOL v45 = os_log_type_enabled(v34, type[0]);
    if (!backtrace_string)
    {
      if (v45)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "__nw_protocol_fulfill_frame_request";
        __int16 v36 = "%{public}s called with null metadata_complete, no backtrace";
        goto LABEL_90;
      }
      goto LABEL_91;
    }
    if (v45)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "__nw_protocol_fulfill_frame_request";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = backtrace_string;
      int v40 = "%{public}s called with null metadata_complete, dumping backtrace:%{public}s";
      goto LABEL_76;
    }
LABEL_77:
    free(backtrace_string);
    goto LABEL_91;
  }
  if (gLogDatapath)
  {
    size_t v37 = __nwlog_obj();
    if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446978;
      *(void *)&uint8_t buf[4] = "__nw_protocol_fulfill_frame_request";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = a3;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = a4;
      LOWORD(v78) = 1024;
      *(_DWORD *)((char *)&v78 + 2) = a5;
      _os_log_impl(&dword_1830D4000, v37, OS_LOG_TYPE_DEBUG, "%{public}s called with minimum bytes: %u, maximum bytes: %u, maximum frames: %u", buf, 0x1Eu);
    }
  }
  if (a4 < a3 || !a5)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446978;
    *(void *)&uint8_t buf[4] = "__nw_protocol_fulfill_frame_request";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = a4;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = a3;
    LOWORD(v78) = 1024;
    *(_DWORD *)((char *)&v78 + 2) = a5;
    size_t v25 = (const char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    v72[0] = 0;
    if (__nwlog_fault(v25, type, v72))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        __int16 v26 = gLogObj;
        os_log_type_t v27 = type[0];
        if (os_log_type_enabled((os_log_t)gLogObj, type[0]))
        {
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "__nw_protocol_fulfill_frame_request";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = a4;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = a3;
          LOWORD(v78) = 1024;
          *(_DWORD *)((char *)&v78 + 2) = a5;
          char v28 = "%{public}s invalid values for frame request, max %u, min %u, max frame %u";
LABEL_42:
          _os_log_impl(&dword_1830D4000, v26, v27, v28, buf, 0x1Eu);
        }
      }
      else if (v72[0])
      {
        os_log_type_t v29 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        __int16 v26 = gLogObj;
        os_log_type_t v27 = type[0];
        BOOL v30 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
        if (v29)
        {
          if (v30)
          {
            *(_DWORD *)buf = 136447234;
            *(void *)&uint8_t buf[4] = "__nw_protocol_fulfill_frame_request";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = a4;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = a3;
            LOWORD(v78) = 1024;
            *(_DWORD *)((char *)&v78 + 2) = a5;
            HIWORD(v78) = 2082;
            os_log_type_t v79 = v29;
            _os_log_impl(&dword_1830D4000, v26, v27, "%{public}s invalid values for frame request, max %u, min %u, max frame %u, dumping backtrace:%{public}s", buf, 0x28u);
          }
          free(v29);
          goto LABEL_43;
        }
        if (v30)
        {
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "__nw_protocol_fulfill_frame_request";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = a4;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = a3;
          LOWORD(v78) = 1024;
          *(_DWORD *)((char *)&v78 + 2) = a5;
          char v28 = "%{public}s invalid values for frame request, max %u, min %u, max frame %u, no backtrace";
          goto LABEL_42;
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        __int16 v26 = gLogObj;
        os_log_type_t v27 = type[0];
        if (os_log_type_enabled((os_log_t)gLogObj, type[0]))
        {
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "__nw_protocol_fulfill_frame_request";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = a4;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = a3;
          LOWORD(v78) = 1024;
          *(_DWORD *)((char *)&v78 + 2) = a5;
          char v28 = "%{public}s invalid values for frame request, max %u, min %u, max frame %u, backtrace limit exceeded";
          goto LABEL_42;
        }
      }
    }
LABEL_43:
    if (!v25) {
      return 0;
    }
    BOOL v31 = (char *)v25;
LABEL_45:
    free(v31);
    return 0;
  }
  *(void *)os_log_type_t type = 0;
  int v57 = type;
  uint64_t v58 = 0x3802000000;
  nw_endpoint_t v59 = __Block_byref_object_copy__3148;
  BOOL v60 = __Block_byref_object_dispose__3149;
  v61[0] = 0;
  v61[1] = v61;
  uint64_t v52 = 0;
  BOOL v53 = &v52;
  int v55 = 0;
  uint64_t v54 = 0x2000000000;
  uint64_t v48 = 0;
  int v49 = &v48;
  int v51 = 0;
  uint64_t v50 = 0x2000000000;
  *(void *)buf = MEMORY[0x1E4F143A8];
  *(void *)&buf[8] = 0x40000000;
  *(void *)&buf[16] = ___ZL35__nw_protocol_fulfill_frame_requestP16nw_frame_array_sS0_bbjjjPjPb_block_invoke;
  os_log_type_t v78 = &unk_1E523AD78;
  os_log_type_t v79 = (char *)&v52;
  os_log_type_t v80 = &v48;
  int v84 = a5;
  unsigned int v85 = a4;
  BOOL v82 = a7;
  id v83 = a1;
  char v86 = 1;
  os_log_type_t v81 = type;
  char v87 = 1;
  uint64_t v14 = *a1;
  do
  {
    if (!v14) {
      break;
    }
    uint64_t v15 = *(void *)(v14 + 32);
    char v16 = (*(uint64_t (**)(unsigned char *))&buf[16])(buf);
    uint64_t v14 = v15;
  }
  while ((v16 & 1) != 0);
  unsigned int v17 = *((_DWORD *)v49 + 6);
  if (v17 < a3 && *((void *)v57 + 5) && !*a7)
  {
    if (gLogDatapath)
    {
      os_log_type_t v46 = __nwlog_obj();
      if (os_log_type_enabled(v46, OS_LOG_TYPE_DEBUG))
      {
        int v47 = *((_DWORD *)v49 + 6);
        *(_DWORD *)os_log_type_t v72 = 136446722;
        *(void *)&v72[4] = "__nw_protocol_fulfill_frame_request";
        *(_WORD *)&v72[12] = 1024;
        *(_DWORD *)&v72[14] = a3;
        *(_WORD *)&v72[18] = 1024;
        *(_DWORD *)&v72[20] = v47;
        _os_log_impl(&dword_1830D4000, v46, OS_LOG_TYPE_DEBUG, "%{public}s could not meet minimum byte count %u with %u bytes from source array", v72, 0x18u);
      }
    }
    BOOL v18 = v57;
    size_t v19 = v57 + 40;
    if (*a1)
    {
      **((void **)v57 + 6) = *a1;
      *(void *)(*a1 + 40) = *((void *)v18 + 6);
      *((void *)v18 + 6) = a1[1];
      *a1 = 0;
      a1[1] = a1;
    }
    if (*v19)
    {
      *(void *)a1[1] = *v19;
      *(void *)(*((void *)v18 + 5) + 40) = a1[1];
      a1[1] = *((void *)v18 + 6);
      *((void *)v18 + 5) = 0;
      *((void *)v18 + 6) = v19;
    }
    unsigned int v17 = 0;
    os_log_type_t v20 = v57;
    *((void *)v57 + 5) = 0;
    *((void *)v20 + 6) = v20 + 40;
    *((_DWORD *)v53 + 6) = 0;
    *((_DWORD *)v49 + 6) = 0;
  }
  if (a6) {
    *a6 = v17;
  }
  uint64_t v21 = *((void *)v57 + 5);
  if (v21)
  {
    *(void *)os_log_type_t v72 = MEMORY[0x1E4F143A8];
    *(void *)&v72[8] = 0x40000000;
    *(void *)&v72[16] = ___ZL35__nw_protocol_fulfill_frame_requestP16nw_frame_array_sS0_bbjjjPjPb_block_invoke_27;
    id v73 = &unk_1E523ADA0;
    char v76 = 1;
    BOOL v74 = type;
    uint64_t v75 = a2;
    do
    {
      if (!v21) {
        break;
      }
      uint64_t v22 = *(void *)(v21 + 32);
      char v23 = (*(uint64_t (**)(unsigned char *))&v72[16])(v72);
      uint64_t v21 = v22;
    }
    while ((v23 & 1) != 0);
  }
  if (gLogDatapath)
  {
    uint64_t v42 = __nwlog_obj();
    if (os_log_type_enabled(v42, OS_LOG_TYPE_DEBUG))
    {
      int v43 = *((_DWORD *)v53 + 6);
      int v44 = *((_DWORD *)v49 + 6);
      *(_DWORD *)nw_endpoint_t v62 = 136447234;
      id v63 = "__nw_protocol_fulfill_frame_request";
      __int16 v64 = 1024;
      int v65 = v43;
      __int16 v66 = 1024;
      int v67 = v44;
      __int16 v68 = 2048;
      uint64_t v69 = a1;
      __int16 v70 = 2048;
      uint64_t v71 = a2;
      _os_log_impl(&dword_1830D4000, v42, OS_LOG_TYPE_DEBUG, "%{public}s moved (%u frames, %u bytes) from %p to %p", v62, 0x2Cu);
    }
  }
  uint64_t v24 = *((unsigned int *)v53 + 6);
  _Block_object_dispose(&v48, 8);
  _Block_object_dispose(&v52, 8);
  _Block_object_dispose(type, 8);
  return v24;
}

__n128 __Block_byref_object_copy__3148(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  return result;
}

BOOL ___ZL35__nw_protocol_fulfill_frame_requestP16nw_frame_array_sS0_bbjjjPjPb_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v118 = *MEMORY[0x1E4F143B8];
  unsigned int v4 = nw_frame_unclaimed_length((_DWORD *)a2);
  if ((*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) + 1) > *(_DWORD *)(a1 + 72)) {
    return 0;
  }
  unsigned int v6 = v4;
  int v7 = *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
  id v8 = (os_log_t *)&unk_1EB267000;
  uint64_t v9 = v7 + v4;
  if (__CFADD__(v7, v4))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446978;
    BOOL v111 = "__nw_protocol_fulfill_frame_request_block_invoke";
    __int16 v112 = 2082;
    *(void *)v113 = "bytes_count_with_this_frame";
    *(_WORD *)&v113[8] = 2048;
    uint64_t v114 = v6;
    *(_WORD *)v115 = 2048;
    *(void *)&v115[2] = v9;
    id v10 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t v109 = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v10, type, &v109))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v11 = gLogObj;
        os_log_type_t v12 = type[0];
        if (os_log_type_enabled((os_log_t)gLogObj, type[0]))
        {
          *(_DWORD *)buf = 136446978;
          BOOL v111 = "__nw_protocol_fulfill_frame_request_block_invoke";
          __int16 v112 = 2082;
          *(void *)v113 = "bytes_count_with_this_frame";
          *(_WORD *)&v113[8] = 2048;
          uint64_t v114 = v6;
          *(_WORD *)v115 = 2048;
          *(void *)&v115[2] = v9;
          BOOL v13 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_18:
          _os_log_impl(&dword_1830D4000, v11, v12, v13, buf, 0x2Au);
        }
      }
      else if (v109)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v11 = gLogObj;
        os_log_type_t v12 = type[0];
        BOOL v15 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
        if (backtrace_string)
        {
          if (v15)
          {
            *(_DWORD *)buf = 136447234;
            BOOL v111 = "__nw_protocol_fulfill_frame_request_block_invoke";
            __int16 v112 = 2082;
            *(void *)v113 = "bytes_count_with_this_frame";
            *(_WORD *)&v113[8] = 2048;
            uint64_t v114 = v6;
            *(_WORD *)v115 = 2048;
            *(void *)&v115[2] = v9;
            __int16 v116 = 2082;
            v117 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
          }
          free(backtrace_string);
          id v8 = (os_log_t *)&unk_1EB267000;
          goto LABEL_19;
        }
        id v8 = (os_log_t *)&unk_1EB267000;
        if (v15)
        {
          *(_DWORD *)buf = 136446978;
          BOOL v111 = "__nw_protocol_fulfill_frame_request_block_invoke";
          __int16 v112 = 2082;
          *(void *)v113 = "bytes_count_with_this_frame";
          *(_WORD *)&v113[8] = 2048;
          uint64_t v114 = v6;
          *(_WORD *)v115 = 2048;
          *(void *)&v115[2] = v9;
          BOOL v13 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
          goto LABEL_18;
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v11 = gLogObj;
        os_log_type_t v12 = type[0];
        if (os_log_type_enabled((os_log_t)gLogObj, type[0]))
        {
          *(_DWORD *)buf = 136446978;
          BOOL v111 = "__nw_protocol_fulfill_frame_request_block_invoke";
          __int16 v112 = 2082;
          *(void *)v113 = "bytes_count_with_this_frame";
          *(_WORD *)&v113[8] = 2048;
          uint64_t v114 = v6;
          *(_WORD *)v115 = 2048;
          *(void *)&v115[2] = v9;
          BOOL v13 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
          goto LABEL_18;
        }
      }
    }
LABEL_19:
    if (v10) {
      free(v10);
    }
    LODWORD(v9) = -1;
  }
  unsigned int v16 = *(_DWORD *)(a1 + 76);
  if (v9 <= v16)
  {
    uint64_t v21 = *(void *)(*(void *)(a1 + 40) + 8);
    int v22 = *(_DWORD *)(v21 + 24);
    *(_DWORD *)(v21 + 24) = v22 + v6;
    if (!__CFADD__(v22, v6)) {
      goto LABEL_81;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v23 = *(unsigned int *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
    *(_DWORD *)buf = 136446978;
    BOOL v111 = "__nw_protocol_fulfill_frame_request_block_invoke";
    __int16 v112 = 2082;
    *(void *)v113 = "bytes_count";
    *(_WORD *)&v113[8] = 2048;
    uint64_t v114 = v6;
    *(_WORD *)v115 = 2048;
    *(void *)&v115[2] = v23;
    uint64_t v24 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t v109 = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v24, type, &v109))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        size_t v25 = v8[237];
        os_log_type_t v26 = type[0];
        if (os_log_type_enabled(v25, type[0]))
        {
          uint64_t v27 = *(unsigned int *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
          *(_DWORD *)buf = 136446978;
          BOOL v111 = "__nw_protocol_fulfill_frame_request_block_invoke";
          __int16 v112 = 2082;
          *(void *)v113 = "bytes_count";
          *(_WORD *)&v113[8] = 2048;
          uint64_t v114 = v6;
          *(_WORD *)v115 = 2048;
          *(void *)&v115[2] = v27;
          char v28 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_77:
          _os_log_impl(&dword_1830D4000, v25, v26, v28, buf, 0x2Au);
        }
      }
      else if (v109)
      {
        BOOL v30 = v8;
        BOOL v31 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        __int16 v32 = v30;
        size_t v25 = v30[237];
        os_log_type_t v26 = type[0];
        BOOL v33 = os_log_type_enabled(v25, type[0]);
        if (v31)
        {
          if (v33)
          {
            uint64_t v34 = *(unsigned int *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
            *(_DWORD *)buf = 136447234;
            BOOL v111 = "__nw_protocol_fulfill_frame_request_block_invoke";
            __int16 v112 = 2082;
            *(void *)v113 = "bytes_count";
            *(_WORD *)&v113[8] = 2048;
            uint64_t v114 = v6;
            *(_WORD *)v115 = 2048;
            *(void *)&v115[2] = v34;
            __int16 v116 = 2082;
            v117 = v31;
            _os_log_impl(&dword_1830D4000, v25, v26, "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
          }
          free(v31);
          id v8 = v32;
          goto LABEL_78;
        }
        id v8 = v32;
        if (v33)
        {
          uint64_t v63 = *(unsigned int *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
          *(_DWORD *)buf = 136446978;
          BOOL v111 = "__nw_protocol_fulfill_frame_request_block_invoke";
          __int16 v112 = 2082;
          *(void *)v113 = "bytes_count";
          *(_WORD *)&v113[8] = 2048;
          uint64_t v114 = v6;
          *(_WORD *)v115 = 2048;
          *(void *)&v115[2] = v63;
          char v28 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
          goto LABEL_77;
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        size_t v25 = v8[237];
        os_log_type_t v26 = type[0];
        if (os_log_type_enabled(v25, type[0]))
        {
          uint64_t v62 = *(unsigned int *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
          *(_DWORD *)buf = 136446978;
          BOOL v111 = "__nw_protocol_fulfill_frame_request_block_invoke";
          __int16 v112 = 2082;
          *(void *)v113 = "bytes_count";
          *(_WORD *)&v113[8] = 2048;
          uint64_t v114 = v6;
          *(_WORD *)v115 = 2048;
          *(void *)&v115[2] = v62;
          char v28 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
          goto LABEL_77;
        }
      }
    }
LABEL_78:
    if (v24) {
      free(v24);
    }
    *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = -1;
LABEL_81:
    if (nw_frame_is_metadata_complete(a2)) {
      **(unsigned char **)(a1 + 56) = 1;
    }
    if (*(unsigned char *)(a1 + 80))
    {
      uint64_t v65 = *(void *)(a2 + 32);
      __int16 v66 = *(void **)(a2 + 40);
      __int16 v64 = (void *)(a2 + 32);
      if (v65)
      {
        *(void *)(v65 + 40) = v66;
        **(void **)(a2 + 40) = v65;
LABEL_90:
        *__int16 v64 = 0;
        v64[1] = 0;
        if (gLogDatapath)
        {
          os_log_type_t v103 = __nwlog_obj();
          if (os_log_type_enabled(v103, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136446466;
            BOOL v111 = "__nw_protocol_fulfill_frame_request_block_invoke";
            __int16 v112 = 1024;
            *(_DWORD *)v113 = v6;
            _os_log_impl(&dword_1830D4000, v103, OS_LOG_TYPE_DEBUG, "%{public}s Moving entire frame (%u bytes)", buf, 0x12u);
          }
        }
        uint64_t v67 = *(void *)(*(void *)(a1 + 32) + 8);
        uint64_t v68 = *(unsigned int *)(v67 + 24) + 1;
        uint64_t v69 = v68 << 31 >> 31;
        *(_DWORD *)(v67 + 24) = v68;
        if (v69 == v68 && (v69 & 0x8000000000000000) == 0) {
          goto LABEL_110;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v70 = *(unsigned int *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
        *(_DWORD *)buf = 136446978;
        BOOL v111 = "__nw_protocol_fulfill_frame_request_block_invoke";
        __int16 v112 = 2082;
        *(void *)v113 = "frame_count";
        *(_WORD *)&v113[8] = 2048;
        uint64_t v114 = 1;
        *(_WORD *)v115 = 2048;
        *(void *)&v115[2] = v70;
        uint64_t v71 = (char *)_os_log_send_and_compose_impl();
        type[0] = OS_LOG_TYPE_ERROR;
        os_log_type_t v109 = OS_LOG_TYPE_DEFAULT;
        if (__nwlog_fault(v71, type, &v109))
        {
          if (type[0] == OS_LOG_TYPE_FAULT)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            os_log_type_t v72 = v8[237];
            os_log_type_t v73 = type[0];
            if (os_log_type_enabled(v72, type[0]))
            {
              uint64_t v74 = *(unsigned int *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
              *(_DWORD *)buf = 136446978;
              BOOL v111 = "__nw_protocol_fulfill_frame_request_block_invoke";
              __int16 v112 = 2082;
              *(void *)v113 = "frame_count";
              *(_WORD *)&v113[8] = 2048;
              uint64_t v114 = 1;
              *(_WORD *)v115 = 2048;
              *(void *)&v115[2] = v74;
              uint64_t v75 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_106:
              _os_log_impl(&dword_1830D4000, v72, v73, v75, buf, 0x2Au);
            }
          }
          else if (v109)
          {
            char v76 = (char *)__nw_create_backtrace_string();
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            os_log_type_t v72 = v8[237];
            os_log_type_t v73 = type[0];
            BOOL v77 = os_log_type_enabled(v72, type[0]);
            if (v76)
            {
              if (v77)
              {
                uint64_t v78 = *(unsigned int *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
                *(_DWORD *)buf = 136447234;
                BOOL v111 = "__nw_protocol_fulfill_frame_request_block_invoke";
                __int16 v112 = 2082;
                *(void *)v113 = "frame_count";
                *(_WORD *)&v113[8] = 2048;
                uint64_t v114 = 1;
                *(_WORD *)v115 = 2048;
                *(void *)&v115[2] = v78;
                __int16 v116 = 2082;
                v117 = v76;
                _os_log_impl(&dword_1830D4000, v72, v73, "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
              }
              free(v76);
              goto LABEL_107;
            }
            if (v77)
            {
              uint64_t v80 = *(unsigned int *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
              *(_DWORD *)buf = 136446978;
              BOOL v111 = "__nw_protocol_fulfill_frame_request_block_invoke";
              __int16 v112 = 2082;
              *(void *)v113 = "frame_count";
              *(_WORD *)&v113[8] = 2048;
              uint64_t v114 = 1;
              *(_WORD *)v115 = 2048;
              *(void *)&v115[2] = v80;
              uint64_t v75 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
              goto LABEL_106;
            }
          }
          else
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            os_log_type_t v72 = v8[237];
            os_log_type_t v73 = type[0];
            if (os_log_type_enabled(v72, type[0]))
            {
              uint64_t v79 = *(unsigned int *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
              *(_DWORD *)buf = 136446978;
              BOOL v111 = "__nw_protocol_fulfill_frame_request_block_invoke";
              __int16 v112 = 2082;
              *(void *)v113 = "frame_count";
              *(_WORD *)&v113[8] = 2048;
              uint64_t v114 = 1;
              *(_WORD *)v115 = 2048;
              *(void *)&v115[2] = v79;
              uint64_t v75 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
              goto LABEL_106;
            }
          }
        }
LABEL_107:
        if (v71) {
          free(v71);
        }
        *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = -1;
LABEL_110:
        uint64_t v81 = *(void *)(*(void *)(a1 + 48) + 8);
        if (*(unsigned char *)(a1 + 80))
        {
          *(void *)(a2 + 32) = 0;
          uint64_t v82 = a2 + 32;
        }
        else
        {
          *(void *)(a2 + 16) = 0;
          uint64_t v82 = a2 + 16;
        }
        id v83 = *(uint64_t **)(v81 + 48);
        *(void *)(v82 + 8) = v83;
        *id v83 = a2;
        *(void *)(v81 + 48) = v82;
        return 1;
      }
    }
    else
    {
      uint64_t v65 = *(void *)(a2 + 16);
      __int16 v66 = *(void **)(a2 + 24);
      __int16 v64 = (void *)(a2 + 16);
      if (v65)
      {
        *(void *)(v65 + 24) = v66;
        __int16 v66 = *(void **)(a2 + 24);
LABEL_89:
        *__int16 v66 = v65;
        goto LABEL_90;
      }
    }
    *(void *)(*(void *)(a1 + 64) + 8) = v66;
    goto LABEL_89;
  }
  if (*(unsigned char *)(a1 + 81))
  {
    uint64_t v17 = v16 - *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
    if (*(unsigned char *)(a1 + 80))
    {
      uint64_t v19 = *(void *)(a2 + 32);
      os_log_type_t v20 = *(void **)(a2 + 40);
      BOOL v18 = (void *)(a2 + 32);
      if (v19)
      {
        *(void *)(v19 + 40) = v20;
        **(void **)(a2 + 40) = v19;
        goto LABEL_45;
      }
    }
    else
    {
      uint64_t v19 = *(void *)(a2 + 16);
      os_log_type_t v20 = *(void **)(a2 + 24);
      BOOL v18 = (void *)(a2 + 16);
      if (v19)
      {
        *(void *)(v19 + 24) = v20;
        os_log_type_t v20 = *(void **)(a2 + 24);
LABEL_44:
        *os_log_type_t v20 = v19;
LABEL_45:
        *BOOL v18 = 0;
        v18[1] = 0;
        *(void *)os_log_type_t type = a2;
        uint64_t v35 = nw_frame_split((uint64_t *)type, v17);
        if (v35)
        {
          uint64_t v36 = v35;
          size_t v37 = *(uint64_t **)(a1 + 64);
          uint64_t v38 = *(void *)type;
          BOOL v39 = v37 + 1;
          uint64_t v40 = *v37;
          if (*(unsigned char *)(a1 + 80))
          {
            *(void *)(*(void *)type + 32) = v40;
            uint64_t v41 = v38 + 32;
            uint64_t v42 = (void *)(v40 + 40);
          }
          else
          {
            *(void *)(*(void *)type + 16) = v40;
            uint64_t v41 = v38 + 16;
            uint64_t v42 = (void *)(v40 + 24);
          }
          if (v40) {
            BOOL v39 = v42;
          }
          void *v39 = v41;
          *size_t v37 = v38;
          *(void *)(v41 + 8) = v37;
          uint64_t v48 = *(void *)(*(void *)(a1 + 40) + 8);
          int v49 = *(_DWORD *)(v48 + 24);
          *(_DWORD *)(v48 + 24) = v49 + v17;
          if (!__CFADD__(v49, v17))
          {
LABEL_130:
            if (gLogDatapath)
            {
              os_log_type_t v104 = __nwlog_obj();
              if (os_log_type_enabled(v104, OS_LOG_TYPE_DEBUG))
              {
                int v105 = nw_frame_unclaimed_length(*(_DWORD **)type);
                int v106 = *(_DWORD *)(v36 + 52);
                if (v106) {
                  v106 -= *(_DWORD *)(v36 + 56) + *(_DWORD *)(v36 + 60);
                }
                *(_DWORD *)buf = 136447234;
                BOOL v111 = "__nw_protocol_fulfill_frame_request_block_invoke";
                __int16 v112 = 1024;
                *(_DWORD *)v113 = v17;
                *(_WORD *)&v113[4] = 1024;
                *(_DWORD *)&v113[6] = v6;
                LOWORD(v114) = 1024;
                *(_DWORD *)((char *)&v114 + 2) = v105;
                HIWORD(v114) = 1024;
                *(_DWORD *)v115 = v106;
                _os_log_impl(&dword_1830D4000, v104, OS_LOG_TYPE_DEBUG, "%{public}s Moving split frame (%u bytes of %u, %u bytes remaining, delivering %u bytes)", buf, 0x24u);
              }
            }
            uint64_t v86 = *(void *)(*(void *)(a1 + 32) + 8);
            uint64_t v87 = *(unsigned int *)(v86 + 24) + 1;
            uint64_t v88 = v87 << 31 >> 31;
            *(_DWORD *)(v86 + 24) = v87;
            if (v88 == v87 && (v88 & 0x8000000000000000) == 0) {
              goto LABEL_150;
            }
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            uint64_t v89 = *(unsigned int *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
            *(_DWORD *)buf = 136446978;
            BOOL v111 = "__nw_protocol_fulfill_frame_request_block_invoke";
            __int16 v112 = 2082;
            *(void *)v113 = "frame_count";
            *(_WORD *)&v113[8] = 2048;
            uint64_t v114 = 1;
            *(_WORD *)v115 = 2048;
            *(void *)&v115[2] = v89;
            os_log_type_t v90 = (char *)_os_log_send_and_compose_impl();
            os_log_type_t v109 = OS_LOG_TYPE_ERROR;
            char v107 = 0;
            if (__nwlog_fault(v90, &v109, &v107))
            {
              if (v109 == OS_LOG_TYPE_FAULT)
              {
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                uint32_t v91 = v8[237];
                os_log_type_t v92 = v109;
                if (os_log_type_enabled(v91, v109))
                {
                  uint64_t v93 = *(unsigned int *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
                  *(_DWORD *)buf = 136446978;
                  BOOL v111 = "__nw_protocol_fulfill_frame_request_block_invoke";
                  __int16 v112 = 2082;
                  *(void *)v113 = "frame_count";
                  *(_WORD *)&v113[8] = 2048;
                  uint64_t v114 = 1;
                  *(_WORD *)v115 = 2048;
                  *(void *)&v115[2] = v93;
                  os_log_type_t v94 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_146:
                  _os_log_impl(&dword_1830D4000, v91, v92, v94, buf, 0x2Au);
                }
              }
              else if (v107)
              {
                BOOL v95 = (char *)__nw_create_backtrace_string();
                uint32_t v91 = __nwlog_obj();
                os_log_type_t v92 = v109;
                BOOL v96 = os_log_type_enabled(v91, v109);
                if (v95)
                {
                  if (v96)
                  {
                    uint64_t v97 = *(unsigned int *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
                    *(_DWORD *)buf = 136447234;
                    BOOL v111 = "__nw_protocol_fulfill_frame_request_block_invoke";
                    __int16 v112 = 2082;
                    *(void *)v113 = "frame_count";
                    *(_WORD *)&v113[8] = 2048;
                    uint64_t v114 = 1;
                    *(_WORD *)v115 = 2048;
                    *(void *)&v115[2] = v97;
                    __int16 v116 = 2082;
                    v117 = v95;
                    _os_log_impl(&dword_1830D4000, v91, v92, "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
                  }
                  free(v95);
                  goto LABEL_147;
                }
                if (v96)
                {
                  uint64_t v99 = *(unsigned int *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
                  *(_DWORD *)buf = 136446978;
                  BOOL v111 = "__nw_protocol_fulfill_frame_request_block_invoke";
                  __int16 v112 = 2082;
                  *(void *)v113 = "frame_count";
                  *(_WORD *)&v113[8] = 2048;
                  uint64_t v114 = 1;
                  *(_WORD *)v115 = 2048;
                  *(void *)&v115[2] = v99;
                  os_log_type_t v94 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
                  goto LABEL_146;
                }
              }
              else
              {
                uint32_t v91 = __nwlog_obj();
                os_log_type_t v92 = v109;
                if (os_log_type_enabled(v91, v109))
                {
                  uint64_t v98 = *(unsigned int *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
                  *(_DWORD *)buf = 136446978;
                  BOOL v111 = "__nw_protocol_fulfill_frame_request_block_invoke";
                  __int16 v112 = 2082;
                  *(void *)v113 = "frame_count";
                  *(_WORD *)&v113[8] = 2048;
                  uint64_t v114 = 1;
                  *(_WORD *)v115 = 2048;
                  *(void *)&v115[2] = v98;
                  os_log_type_t v94 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
                  goto LABEL_146;
                }
              }
            }
LABEL_147:
            if (v90) {
              free(v90);
            }
            *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = -1;
LABEL_150:
            uint64_t v100 = *(void *)(*(void *)(a1 + 48) + 8);
            if (*(unsigned char *)(a1 + 80))
            {
              *(void *)(v36 + 32) = 0;
              uint64_t v101 = v36 + 32;
            }
            else
            {
              *(void *)(v36 + 16) = 0;
              uint64_t v101 = v36 + 16;
            }
            BOOL v102 = *(uint64_t **)(v100 + 48);
            *(void *)(v101 + 8) = v102;
            *BOOL v102 = v36;
            *(void *)(v100 + 48) = v101;
            return 0;
          }
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v50 = v8;
          uint64_t v51 = *(unsigned int *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
          *(_DWORD *)buf = 136446978;
          BOOL v111 = "__nw_protocol_fulfill_frame_request_block_invoke";
          __int16 v112 = 2082;
          *(void *)v113 = "bytes_count";
          *(_WORD *)&v113[8] = 2048;
          uint64_t v114 = v17;
          *(_WORD *)v115 = 2048;
          *(void *)&v115[2] = v51;
          uint64_t v52 = (char *)_os_log_send_and_compose_impl();
          os_log_type_t v109 = OS_LOG_TYPE_ERROR;
          char v107 = 0;
          if (__nwlog_fault(v52, &v109, &v107))
          {
            if (v109 == OS_LOG_TYPE_FAULT)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              BOOL v53 = v8[237];
              os_log_type_t v54 = v109;
              if (os_log_type_enabled(v50[237], v109))
              {
                uint64_t v55 = *(unsigned int *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
                *(_DWORD *)buf = 136446978;
                BOOL v111 = "__nw_protocol_fulfill_frame_request_block_invoke";
                __int16 v112 = 2082;
                *(void *)v113 = "bytes_count";
                *(_WORD *)&v113[8] = 2048;
                uint64_t v114 = v17;
                *(_WORD *)v115 = 2048;
                *(void *)&v115[2] = v55;
                int v56 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_126:
                _os_log_impl(&dword_1830D4000, v53, v54, v56, buf, 0x2Au);
              }
            }
            else if (v107)
            {
              nw_endpoint_t v59 = (char *)__nw_create_backtrace_string();
              BOOL v53 = __nwlog_obj();
              os_log_type_t v54 = v109;
              BOOL v60 = os_log_type_enabled(v53, v109);
              if (v59)
              {
                if (v60)
                {
                  uint64_t v61 = *(unsigned int *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
                  *(_DWORD *)buf = 136447234;
                  BOOL v111 = "__nw_protocol_fulfill_frame_request_block_invoke";
                  __int16 v112 = 2082;
                  *(void *)v113 = "bytes_count";
                  *(_WORD *)&v113[8] = 2048;
                  uint64_t v114 = v17;
                  *(_WORD *)v115 = 2048;
                  *(void *)&v115[2] = v61;
                  __int16 v116 = 2082;
                  v117 = v59;
                  _os_log_impl(&dword_1830D4000, v53, v54, "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
                }
                free(v59);
                goto LABEL_127;
              }
              if (v60)
              {
                uint64_t v85 = *(unsigned int *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
                *(_DWORD *)buf = 136446978;
                BOOL v111 = "__nw_protocol_fulfill_frame_request_block_invoke";
                __int16 v112 = 2082;
                *(void *)v113 = "bytes_count";
                *(_WORD *)&v113[8] = 2048;
                uint64_t v114 = v17;
                *(_WORD *)v115 = 2048;
                *(void *)&v115[2] = v85;
                int v56 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
                goto LABEL_126;
              }
            }
            else
            {
              BOOL v53 = __nwlog_obj();
              os_log_type_t v54 = v109;
              if (os_log_type_enabled(v53, v109))
              {
                uint64_t v84 = *(unsigned int *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
                *(_DWORD *)buf = 136446978;
                BOOL v111 = "__nw_protocol_fulfill_frame_request_block_invoke";
                __int16 v112 = 2082;
                *(void *)v113 = "bytes_count";
                *(_WORD *)&v113[8] = 2048;
                uint64_t v114 = v17;
                *(_WORD *)v115 = 2048;
                *(void *)&v115[2] = v84;
                int v56 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
                goto LABEL_126;
              }
            }
          }
LABEL_127:
          if (v52) {
            free(v52);
          }
          *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = -1;
          id v8 = v50;
          goto LABEL_130;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v43 = v8[237];
        if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446722;
          BOOL v111 = "__nw_protocol_fulfill_frame_request_block_invoke";
          __int16 v112 = 2048;
          *(void *)v113 = a2;
          *(_WORD *)&v113[8] = 1024;
          LODWORD(v114) = v17;
          _os_log_impl(&dword_1830D4000, v43, OS_LOG_TYPE_ERROR, "%{public}s failed to split frame %p at offset %u", buf, 0x1Cu);
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        *(_DWORD *)buf = 136446210;
        BOOL v111 = "__nw_protocol_fulfill_frame_request_block_invoke";
        int v44 = (char *)_os_log_send_and_compose_impl();
        os_log_type_t v109 = OS_LOG_TYPE_ERROR;
        char v107 = 0;
        if (__nwlog_fault(v44, &v109, &v107))
        {
          if (v109 == OS_LOG_TYPE_FAULT)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            BOOL v45 = v8[237];
            os_log_type_t v46 = v109;
            if (!os_log_type_enabled(v45, v109)) {
              goto LABEL_122;
            }
            *(_DWORD *)buf = 136446210;
            BOOL v111 = "__nw_protocol_fulfill_frame_request_block_invoke";
            int v47 = "%{public}s nw_frame_split with partial frame failed";
            goto LABEL_121;
          }
          if (!v107)
          {
            BOOL v45 = __nwlog_obj();
            os_log_type_t v46 = v109;
            if (!os_log_type_enabled(v45, v109)) {
              goto LABEL_122;
            }
            *(_DWORD *)buf = 136446210;
            BOOL v111 = "__nw_protocol_fulfill_frame_request_block_invoke";
            int v47 = "%{public}s nw_frame_split with partial frame failed, backtrace limit exceeded";
            goto LABEL_121;
          }
          int v57 = (char *)__nw_create_backtrace_string();
          BOOL v45 = __nwlog_obj();
          os_log_type_t v46 = v109;
          BOOL v58 = os_log_type_enabled(v45, v109);
          if (v57)
          {
            if (v58)
            {
              *(_DWORD *)buf = 136446466;
              BOOL v111 = "__nw_protocol_fulfill_frame_request_block_invoke";
              __int16 v112 = 2082;
              *(void *)v113 = v57;
              _os_log_impl(&dword_1830D4000, v45, v46, "%{public}s nw_frame_split with partial frame failed, dumping backtrace:%{public}s", buf, 0x16u);
            }
            free(v57);
            goto LABEL_122;
          }
          if (v58)
          {
            *(_DWORD *)buf = 136446210;
            BOOL v111 = "__nw_protocol_fulfill_frame_request_block_invoke";
            int v47 = "%{public}s nw_frame_split with partial frame failed, no backtrace";
LABEL_121:
            _os_log_impl(&dword_1830D4000, v45, v46, v47, buf, 0xCu);
          }
        }
LABEL_122:
        if (v44) {
          free(v44);
        }
        return 0;
      }
    }
    *(void *)(*(void *)(a1 + 64) + 8) = v20;
    goto LABEL_44;
  }
  if (!gLogDatapath) {
    return 0;
  }
  os_log_type_t v29 = __nwlog_obj();
  BOOL result = os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG);
  if (result)
  {
    *(_DWORD *)buf = 136446210;
    BOOL v111 = "__nw_protocol_fulfill_frame_request_block_invoke";
    _os_log_impl(&dword_1830D4000, v29, OS_LOG_TYPE_DEBUG, "%{public}s skipping partial frame, split frames not allowed", buf, 0xCu);
    return 0;
  }
  return result;
}

uint64_t ___ZL35__nw_protocol_fulfill_frame_requestP16nw_frame_array_sS0_bbjjjPjPb_block_invoke_27(uint64_t a1, void *a2)
{
  if (!a2) {
    return 1;
  }
  if (!*(unsigned char *)(a1 + 48))
  {
    uint64_t v3 = a2[2];
    unsigned int v4 = (void *)a2[3];
    id v2 = a2 + 2;
    if (v3)
    {
      *(void *)(v3 + 24) = v4;
      unsigned int v4 = (void *)a2[3];
LABEL_8:
      void *v4 = v3;
      goto LABEL_9;
    }
LABEL_7:
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 48) = v4;
    goto LABEL_8;
  }
  uint64_t v3 = a2[4];
  unsigned int v4 = (void *)a2[5];
  id v2 = a2 + 4;
  if (!v3) {
    goto LABEL_7;
  }
  *(void *)(v3 + 40) = v4;
  *(void *)a2[5] = v3;
LABEL_9:
  void *v2 = 0;
  v2[1] = 0;
  uint64_t v5 = *(void *)(a1 + 40);
  if (*(unsigned char *)(a1 + 48))
  {
    a2[4] = 0;
    unsigned int v6 = a2 + 4;
  }
  else
  {
    a2[2] = 0;
    unsigned int v6 = a2 + 2;
  }
  int v7 = *(void **)(v5 + 8);
  v6[1] = v7;
  *int v7 = a2;
  *(void *)(v5 + 8) = v6;
  return 1;
}

void nw_protocol_plugin_metadata_get_and_process_frames(uint64_t a1, void *a2, uint64_t a3, int a4, _DWORD *a5, _DWORD *a6, _DWORD *a7, unsigned int *a8, _DWORD *a9, uint64_t a10, uint64_t *a11)
{
  uint64_t v136 = *MEMORY[0x1E4F143B8];
  if (!a3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_get_and_process_frames";
    uint64_t v67 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v117) = 0;
    if (!__nwlog_fault(v67, type, &v117)) {
      goto LABEL_163;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      uint64_t v68 = __nwlog_obj();
      os_log_type_t v69 = type[0];
      if (!os_log_type_enabled(v68, type[0])) {
        goto LABEL_163;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_get_and_process_frames";
      uint64_t v70 = "%{public}s called with null input_protocol";
    }
    else if ((_BYTE)v117)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v68 = __nwlog_obj();
      os_log_type_t v69 = type[0];
      BOOL v78 = os_log_type_enabled(v68, type[0]);
      if (backtrace_string)
      {
        if (v78)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_get_and_process_frames";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v68, v69, "%{public}s called with null input_protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_163:
        if (!v67) {
          return;
        }
        goto LABEL_164;
      }
      if (!v78) {
        goto LABEL_163;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_get_and_process_frames";
      uint64_t v70 = "%{public}s called with null input_protocol, no backtrace";
    }
    else
    {
      uint64_t v68 = __nwlog_obj();
      os_log_type_t v69 = type[0];
      if (!os_log_type_enabled(v68, type[0])) {
        goto LABEL_163;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_get_and_process_frames";
      uint64_t v70 = "%{public}s called with null input_protocol, backtrace limit exceeded";
    }
    goto LABEL_162;
  }
  if (!a10)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_get_and_process_frames";
    uint64_t v67 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v117) = 0;
    if (!__nwlog_fault(v67, type, &v117)) {
      goto LABEL_163;
    }
    if (type[0] != OS_LOG_TYPE_FAULT)
    {
      if (!(_BYTE)v117)
      {
        uint64_t v68 = __nwlog_obj();
        os_log_type_t v69 = type[0];
        if (!os_log_type_enabled(v68, type[0])) {
          goto LABEL_163;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_get_and_process_frames";
        uint64_t v70 = "%{public}s called with null processor, backtrace limit exceeded";
        goto LABEL_162;
      }
      uint64_t v79 = (char *)__nw_create_backtrace_string();
      uint64_t v68 = __nwlog_obj();
      os_log_type_t v69 = type[0];
      BOOL v80 = os_log_type_enabled(v68, type[0]);
      if (!v79)
      {
        if (!v80) {
          goto LABEL_163;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_get_and_process_frames";
        uint64_t v70 = "%{public}s called with null processor, no backtrace";
        goto LABEL_162;
      }
      if (v80)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_get_and_process_frames";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v79;
        uint64_t v81 = "%{public}s called with null processor, dumping backtrace:%{public}s";
LABEL_122:
        _os_log_impl(&dword_1830D4000, v68, v69, v81, buf, 0x16u);
      }
LABEL_123:
      free(v79);
      if (!v67) {
        return;
      }
LABEL_164:
      free(v67);
      return;
    }
    uint64_t v68 = __nwlog_obj();
    os_log_type_t v69 = type[0];
    if (!os_log_type_enabled(v68, type[0])) {
      goto LABEL_163;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_get_and_process_frames";
    uint64_t v70 = "%{public}s called with null processor";
LABEL_162:
    _os_log_impl(&dword_1830D4000, v68, v69, v70, buf, 0xCu);
    goto LABEL_163;
  }
  if (!a11)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_get_and_process_frames";
    uint64_t v67 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v117) = 0;
    if (!__nwlog_fault(v67, type, &v117)) {
      goto LABEL_163;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      uint64_t v68 = __nwlog_obj();
      os_log_type_t v69 = type[0];
      if (!os_log_type_enabled(v68, type[0])) {
        goto LABEL_163;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_get_and_process_frames";
      uint64_t v70 = "%{public}s called with null destination_array";
      goto LABEL_162;
    }
    if (!(_BYTE)v117)
    {
      uint64_t v68 = __nwlog_obj();
      os_log_type_t v69 = type[0];
      if (!os_log_type_enabled(v68, type[0])) {
        goto LABEL_163;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_get_and_process_frames";
      uint64_t v70 = "%{public}s called with null destination_array, backtrace limit exceeded";
      goto LABEL_162;
    }
    uint64_t v79 = (char *)__nw_create_backtrace_string();
    uint64_t v68 = __nwlog_obj();
    os_log_type_t v69 = type[0];
    BOOL v95 = os_log_type_enabled(v68, type[0]);
    if (!v79)
    {
      if (!v95) {
        goto LABEL_163;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_get_and_process_frames";
      uint64_t v70 = "%{public}s called with null destination_array, no backtrace";
      goto LABEL_162;
    }
    if (v95)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_get_and_process_frames";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v79;
      uint64_t v81 = "%{public}s called with null destination_array, dumping backtrace:%{public}s";
      goto LABEL_122;
    }
    goto LABEL_123;
  }
  if ((*(unsigned char *)(a1 + 142) & 0x10) == 0)
  {
    if (*(unsigned char *)(a1 + 140) == 3)
    {
      *a5 = 0;
      *a6 = -1;
      *a7 = -1;
    }
    if (gLogDatapath)
    {
      uint64_t v82 = a2;
      id v83 = a7;
      uint64_t v84 = __nwlog_obj();
      BOOL v85 = os_log_type_enabled(v84, OS_LOG_TYPE_DEBUG);
      a7 = v83;
      a2 = v82;
      if (v85)
      {
        int v86 = *a5;
        int v87 = *a6;
        int v88 = *v83;
        *(_DWORD *)buf = 136446978;
        *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_get_and_process_frames";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v86;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = v87;
        LOWORD(v125) = 1024;
        *(_DWORD *)((char *)&v125 + 2) = v88;
        _os_log_impl(&dword_1830D4000, v84, OS_LOG_TYPE_DEBUG, "%{public}s Getting new frames from below with minimum_bytes %u, maximum_bytes %u, maximum_frame_count %u", buf, 0x1Eu);
        a7 = v83;
        a2 = v82;
      }
    }
    uint64_t v117 = 0;
    uint64_t v118 = &v117;
    uint64_t v16 = a2[4];
    if (v16)
    {
      __int16 v116 = a8;
      v115 = a5;
      uint64_t v17 = *(void **)(v16 + 40);
      if (v17 == &nw_protocol_ref_counted_handle)
      {
        uint64_t v18 = *(void *)(v16 + 88);
        if (v18) {
          *(void *)(v16 + 88) = v18 + 1;
        }
      }
      uint64_t v19 = (void *)a2[5];
      if (v19 == &nw_protocol_ref_counted_handle)
      {
        uint64_t v20 = a2[11];
        if (v20) {
          a2[11] = v20 + 1;
        }
      }
      uint64_t v114 = a7;
      uint64_t v21 = *(void *)(v16 + 24);
      if (v21)
      {
        int v22 = *(uint64_t (**)(uint64_t))(v21 + 80);
        if (v22)
        {
          uint64_t v23 = a2;
          int v24 = v22(v16);
          goto LABEL_18;
        }
      }
      uint64_t v23 = a2;
      __nwlog_obj();
      uint64_t v71 = *(const char **)(v16 + 16);
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "__nw_protocol_get_input_frames";
      if (!v71) {
        uint64_t v71 = "invalid";
      }
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v71;
      *(_WORD *)&unsigned char buf[22] = 2048;
      v125 = (const char *)v16;
      os_log_type_t v72 = (const char *)_os_log_send_and_compose_impl();
      type[0] = OS_LOG_TYPE_ERROR;
      char v119 = 0;
      __int16 v112 = (char *)v72;
      if (__nwlog_fault(v72, type, &v119))
      {
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          os_log_type_t v73 = __nwlog_obj();
          os_log_type_t v74 = type[0];
          os_log_t log = v73;
          if (os_log_type_enabled(v73, type[0]))
          {
            uint64_t v75 = *(const char **)(v16 + 16);
            if (!v75) {
              uint64_t v75 = "invalid";
            }
            *(_DWORD *)buf = 136446722;
            *(void *)&uint8_t buf[4] = "__nw_protocol_get_input_frames";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v75;
            *(_WORD *)&unsigned char buf[22] = 2048;
            v125 = (const char *)v16;
            char v76 = "%{public}s protocol %{public}s (%p) has invalid get_input_frames callback";
LABEL_151:
            int v105 = log;
            os_log_type_t v106 = v74;
LABEL_152:
            _os_log_impl(&dword_1830D4000, v105, v106, v76, buf, 0x20u);
          }
        }
        else if (v119)
        {
          BOOL v96 = (char *)__nw_create_backtrace_string();
          loga = __nwlog_obj();
          os_log_type_t v108 = type[0];
          BOOL v97 = os_log_type_enabled(loga, type[0]);
          if (v96)
          {
            if (v97)
            {
              uint64_t v98 = *(const char **)(v16 + 16);
              if (!v98) {
                uint64_t v98 = "invalid";
              }
              *(_DWORD *)buf = 136446978;
              *(void *)&uint8_t buf[4] = "__nw_protocol_get_input_frames";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = v98;
              *(_WORD *)&unsigned char buf[22] = 2048;
              v125 = (const char *)v16;
              *(_WORD *)os_log_type_t v126 = 2082;
              *(void *)&v126[2] = v96;
              _os_log_impl(&dword_1830D4000, loga, v108, "%{public}s protocol %{public}s (%p) has invalid get_input_frames callback, dumping backtrace:%{public}s", buf, 0x2Au);
            }
            free(v96);
            goto LABEL_153;
          }
          if (v97)
          {
            char v107 = *(const char **)(v16 + 16);
            if (!v107) {
              char v107 = "invalid";
            }
            *(_DWORD *)buf = 136446722;
            *(void *)&uint8_t buf[4] = "__nw_protocol_get_input_frames";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v107;
            *(_WORD *)&unsigned char buf[22] = 2048;
            v125 = (const char *)v16;
            char v76 = "%{public}s protocol %{public}s (%p) has invalid get_input_frames callback, no backtrace";
            int v105 = loga;
            os_log_type_t v106 = v108;
            goto LABEL_152;
          }
        }
        else
        {
          os_log_type_t v103 = __nwlog_obj();
          os_log_type_t v74 = type[0];
          os_log_t log = v103;
          if (os_log_type_enabled(v103, type[0]))
          {
            os_log_type_t v104 = *(const char **)(v16 + 16);
            if (!v104) {
              os_log_type_t v104 = "invalid";
            }
            *(_DWORD *)buf = 136446722;
            *(void *)&uint8_t buf[4] = "__nw_protocol_get_input_frames";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v104;
            *(_WORD *)&unsigned char buf[22] = 2048;
            v125 = (const char *)v16;
            char v76 = "%{public}s protocol %{public}s (%p) has invalid get_input_frames callback, backtrace limit exceeded";
            goto LABEL_151;
          }
        }
      }
LABEL_153:
      if (v112) {
        free(v112);
      }
      int v24 = 0;
LABEL_18:
      uint64_t v25 = (uint64_t)v23;
      os_log_type_t v26 = a9;
      if (v19 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(v25 + 40) == &nw_protocol_ref_counted_handle)
      {
        uint64_t v44 = *(void *)(v25 + 88);
        if (v44)
        {
          uint64_t v45 = v44 - 1;
          *(void *)(v25 + 88) = v45;
          if (!v45)
          {
            os_log_type_t v46 = *(void (***)(void))(v25 + 64);
            if (v46)
            {
              *(void *)(v25 + 64) = 0;
              BOOL v111 = (void *)v25;
              v46[2](v46);
              _Block_release(v46);
              uint64_t v25 = (uint64_t)v111;
            }
            if (*(unsigned char *)(v25 + 72))
            {
              int v47 = *(const void **)(v25 + 64);
              if (v47)
              {
                uint64_t v48 = v25;
                _Block_release(v47);
                uint64_t v25 = v48;
              }
            }
            uint64_t v49 = v25;
            free((void *)v25);
            uint64_t v25 = v49;
          }
        }
      }
      BOOL v27 = v17 == &nw_protocol_ref_counted_handle;
      char v28 = v115;
      if (v27 && *(_UNKNOWN **)(v16 + 40) == &nw_protocol_ref_counted_handle)
      {
        uint64_t v50 = *(void *)(v16 + 88);
        if (v50)
        {
          uint64_t v51 = v50 - 1;
          *(void *)(v16 + 88) = v51;
          if (!v51)
          {
            uint64_t v52 = v25;
            BOOL v53 = *(void (***)(void))(v16 + 64);
            if (v53)
            {
              *(void *)(v16 + 64) = 0;
              v53[2](v53);
              _Block_release(v53);
            }
            if (*(unsigned char *)(v16 + 72))
            {
              os_log_type_t v54 = *(const void **)(v16 + 64);
              if (v54) {
                _Block_release(v54);
              }
            }
            free((void *)v16);
            uint64_t v25 = v52;
          }
        }
      }
      a8 = v116;
      if (!v24 || *(unsigned char *)(a1 + 140) == 2) {
        goto LABEL_69;
      }
      *(void *)os_log_type_t type = 0;
      uint64_t v121 = type;
      int v123 = 0;
      uint64_t v122 = 0x2000000000;
      *(void *)buf = MEMORY[0x1E4F143A8];
      *(void *)&buf[8] = 0x40000000;
      *(void *)&buf[16] = __nw_protocol_plugin_metadata_process_frames_block_invoke;
      v125 = (const char *)&unk_1E523ADF0;
      *(void *)&v126[16] = a1;
      v127 = a6;
      char v135 = 1;
      v128 = &v117;
      v129 = a11;
      os_log_type_t v130 = v115;
      v131 = a9;
      uint64_t v132 = v25;
      *(void *)os_log_type_t v126 = type;
      *(void *)&v126[8] = v114;
      uint64_t v29 = v25;
      uint64_t v133 = a10;
      uint64_t v134 = a3;
      uint64_t v30 = v117;
      do
      {
        if (!v30) {
          break;
        }
        uint64_t v31 = *(void *)(v30 + 32);
        char v32 = (*(uint64_t (**)(unsigned char *))&buf[16])(buf);
        uint64_t v30 = v31;
      }
      while ((v32 & 1) != 0);
      BOOL v33 = (const char *)*((unsigned int *)v121 + 6);
      _Block_object_dispose(type, 8);
      BOOL v34 = __CFADD__(*v116, v33);
      *v116 += v33;
      uint64_t v25 = v29;
      if (!v34)
      {
LABEL_69:
        uint64_t v60 = v117;
        if (!v117)
        {
LABEL_73:
          if (*a8 && *v28)
          {
            uint64_t v62 = v25;
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            uint64_t v63 = gLogObj;
            if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 0;
              nw_frame_array_get_frame_count(a11, 1, buf);
              int v64 = *(_DWORD *)buf;
              unsigned int v65 = *a8;
              *(_DWORD *)buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_get_and_process_frames";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = a4;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v64;
              LOWORD(v125) = 1024;
              *(_DWORD *)((char *)&v125 + 2) = v65;
              _os_log_impl(&dword_1830D4000, v63, OS_LOG_TYPE_DEBUG, "%{public}s could not fulfill minimum byte requirement of %u bytes (have %u bytes in %u frames), saving in input_frames_pending_delivery for later", buf, 0x1Eu);
            }
            uint64_t v25 = v62;
            if (*a11)
            {
              **(void **)(a1 + 24) = *a11;
              *(void *)(*a11 + 40) = *(void *)(a1 + 24);
              *(void *)(a1 + 24) = a11[1];
            }
            uint64_t v66 = 0;
            *a11 = 0;
            a11[1] = (uint64_t)a11;
            *a8 = 0;
            *os_log_type_t v26 = 0;
          }
          else
          {
            uint64_t v66 = *v26;
          }
          nw_protocol_plugin_metadata_report_transfer(a1, v25, *(void *)(a1 + 48), v66, 1);
          return;
        }
LABEL_70:
        if (!gLogDatapath) {
          goto LABEL_71;
        }
        uint64_t v99 = v25;
        uint64_t v100 = __nwlog_obj();
        if (os_log_type_enabled(v100, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_get_and_process_frames";
          _os_log_impl(&dword_1830D4000, v100, OS_LOG_TYPE_DEBUG, "%{public}s new_input_array is not empty after processing input frames, moving to saved_input_frames for later", buf, 0xCu);
        }
        uint64_t v60 = v117;
        uint64_t v25 = v99;
        if (v117)
        {
LABEL_71:
          **(void **)(a1 + 8) = v60;
          uint64_t v61 = v118;
          *(void *)(v117 + 40) = *(void *)(a1 + 8);
          *(void *)(a1 + 8) = v61;
        }
        uint64_t v117 = 0;
        uint64_t v118 = &v117;
        goto LABEL_73;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v35 = *v116;
      *(_DWORD *)buf = 136446978;
      *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_get_and_process_frames";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = "count";
      *(_WORD *)&unsigned char buf[22] = 2048;
      v125 = v33;
      *(_WORD *)os_log_type_t v126 = 2048;
      *(void *)&v126[2] = v35;
      uint64_t v36 = (char *)_os_log_send_and_compose_impl();
      type[0] = OS_LOG_TYPE_ERROR;
      a8 = v116;
      char v119 = 0;
      if (__nwlog_fault(v36, type, &v119))
      {
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          size_t v37 = gLogObj;
          os_log_type_t v38 = type[0];
          if (os_log_type_enabled((os_log_t)gLogObj, type[0]))
          {
            uint64_t v39 = *v116;
            *(_DWORD *)buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_get_and_process_frames";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = "count";
            *(_WORD *)&unsigned char buf[22] = 2048;
            v125 = v33;
            *(_WORD *)os_log_type_t v126 = 2048;
            *(void *)&v126[2] = v39;
            uint64_t v40 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_65:
            _os_log_impl(&dword_1830D4000, v37, v38, v40, buf, 0x2Au);
          }
        }
        else if (v119)
        {
          uint64_t v55 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          size_t v37 = gLogObj;
          os_log_type_t v38 = type[0];
          BOOL v56 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
          if (v55)
          {
            if (v56)
            {
              uint64_t v57 = *v116;
              *(_DWORD *)buf = 136447234;
              *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_get_and_process_frames";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = "count";
              *(_WORD *)&unsigned char buf[22] = 2048;
              v125 = v33;
              *(_WORD *)os_log_type_t v126 = 2048;
              *(void *)&v126[2] = v57;
              *(_WORD *)&v126[10] = 2082;
              *(void *)&v126[12] = v55;
              _os_log_impl(&dword_1830D4000, v37, v38, "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
            }
            free(v55);
            goto LABEL_66;
          }
          if (v56)
          {
            uint64_t v59 = *v116;
            *(_DWORD *)buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_get_and_process_frames";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = "count";
            *(_WORD *)&unsigned char buf[22] = 2048;
            v125 = v33;
            *(_WORD *)os_log_type_t v126 = 2048;
            *(void *)&v126[2] = v59;
            uint64_t v40 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
            goto LABEL_65;
          }
        }
        else
        {
          size_t v37 = __nwlog_obj();
          os_log_type_t v38 = type[0];
          if (os_log_type_enabled(v37, type[0]))
          {
            uint64_t v58 = *v116;
            *(_DWORD *)buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_get_and_process_frames";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = "count";
            *(_WORD *)&unsigned char buf[22] = 2048;
            v125 = v33;
            *(_WORD *)os_log_type_t v126 = 2048;
            *(void *)&v126[2] = v58;
            uint64_t v40 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
            goto LABEL_65;
          }
        }
      }
LABEL_66:
      if (v36) {
        free(v36);
      }
      *__int16 v116 = -1;
      uint64_t v25 = v29;
      char v28 = v115;
      os_log_type_t v26 = a9;
      goto LABEL_69;
    }
    uint64_t v89 = a5;
    os_log_type_t v90 = a2;
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "__nw_protocol_get_input_frames";
    uint32_t v91 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    char v119 = 0;
    if (__nwlog_fault(v91, type, &v119))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v92 = __nwlog_obj();
        os_log_type_t v93 = type[0];
        if (!os_log_type_enabled(v92, type[0])) {
          goto LABEL_174;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "__nw_protocol_get_input_frames";
        os_log_type_t v94 = "%{public}s called with null protocol";
LABEL_173:
        _os_log_impl(&dword_1830D4000, v92, v93, v94, buf, 0xCu);
        goto LABEL_174;
      }
      if (!v119)
      {
        os_log_type_t v92 = __nwlog_obj();
        os_log_type_t v93 = type[0];
        if (!os_log_type_enabled(v92, type[0])) {
          goto LABEL_174;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "__nw_protocol_get_input_frames";
        os_log_type_t v94 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_173;
      }
      uint64_t v101 = (char *)__nw_create_backtrace_string();
      os_log_type_t v92 = __nwlog_obj();
      os_log_type_t v93 = type[0];
      BOOL v102 = os_log_type_enabled(v92, type[0]);
      if (!v101)
      {
        if (!v102) {
          goto LABEL_174;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "__nw_protocol_get_input_frames";
        os_log_type_t v94 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_173;
      }
      if (v102)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "__nw_protocol_get_input_frames";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v101;
        _os_log_impl(&dword_1830D4000, v92, v93, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v101);
    }
LABEL_174:
    if (v91) {
      free(v91);
    }
    uint64_t v25 = (uint64_t)v90;
    os_log_type_t v26 = a9;
    char v28 = v89;
    uint64_t v60 = v117;
    if (!v117) {
      goto LABEL_73;
    }
    goto LABEL_70;
  }
  if (gLogDatapath)
  {
    uint64_t v41 = a2;
    uint64_t v42 = __nwlog_obj();
    if (os_log_type_enabled(v42, OS_LOG_TYPE_DEBUG))
    {
      int v43 = "invalid";
      if (v41 && v41[2]) {
        int v43 = (const char *)v41[2];
      }
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_get_and_process_frames";
      *(_WORD *)&buf[12] = 2048;
      *(void *)&buf[14] = v41;
      *(_WORD *)&unsigned char buf[22] = 2080;
      v125 = v43;
      _os_log_impl(&dword_1830D4000, v42, OS_LOG_TYPE_DEBUG, "%{public}s short circuiting because protocol %p:%s has already handled eof", buf, 0x20u);
    }
  }
}

void nw_protocol_plugin_metadata_report_transfer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (!a4) {
    return;
  }
  if (a3)
  {
    uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 112);
    if (v5)
    {
      v5(a2, a3, a4, a5);
    }
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v15 = "nw_protocol_plugin_metadata_report_transfer";
  unsigned int v6 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (__nwlog_fault(v6, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_21;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v15 = "nw_protocol_plugin_metadata_report_transfer";
      uint64_t v9 = "%{public}s called with null metadata";
      goto LABEL_20;
    }
    if (!v12)
    {
      int v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_21;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v15 = "nw_protocol_plugin_metadata_report_transfer";
      uint64_t v9 = "%{public}s called with null metadata, backtrace limit exceeded";
      goto LABEL_20;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    int v7 = __nwlog_obj();
    os_log_type_t v8 = type;
    BOOL v11 = os_log_type_enabled(v7, type);
    if (backtrace_string)
    {
      if (v11)
      {
        *(_DWORD *)buf = 136446466;
        BOOL v15 = "nw_protocol_plugin_metadata_report_transfer";
        __int16 v16 = 2082;
        uint64_t v17 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_21;
    }
    if (v11)
    {
      *(_DWORD *)buf = 136446210;
      BOOL v15 = "nw_protocol_plugin_metadata_report_transfer";
      uint64_t v9 = "%{public}s called with null metadata, no backtrace";
LABEL_20:
      _os_log_impl(&dword_1830D4000, v7, v8, v9, buf, 0xCu);
    }
  }
LABEL_21:
  if (v6) {
    free(v6);
  }
}

void __nw_protocol_plugin_metadata_process_frames_block_invoke_32(uint64_t a1, unsigned int a2, NSObject *a3)
{
  uint64_t v160 = *MEMORY[0x1E4F143B8];
  if (gLogDatapath)
  {
    uint64_t v134 = __nwlog_obj();
    if (os_log_type_enabled(v134, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v135 = *(void *)(a1 + 48);
      uint64_t v136 = "invalid";
      if (v135)
      {
        v137 = *(const char **)(v135 + 16);
        if (v137) {
          uint64_t v136 = v137;
        }
      }
      if (a2 > 3) {
        os_log_type_t v138 = "invalid";
      }
      else {
        os_log_type_t v138 = off_1E523AE90[a2];
      }
      v139 = "input";
      os_log_type_t v140 = *(char **)(a1 + 56);
      if (!*(unsigned char *)(a1 + 120)) {
        v139 = "output";
      }
      *(_DWORD *)buf = 136447234;
      os_log_type_t v152 = "nw_protocol_plugin_metadata_process_frames_block_invoke";
      __int16 v153 = 2080;
      *(void *)v154 = v136;
      *(_WORD *)&v154[8] = 2080;
      uint64_t v155 = (uint64_t)v138;
      __int16 v156 = 2080;
      v157 = v139;
      __int16 v158 = 2048;
      BOOL v159 = v140;
      _os_log_impl(&dword_1830D4000, v134, OS_LOG_TYPE_DEBUG, "%{public}s %s processor returned result %s for %s frame %p", buf, 0x34u);
    }
  }
  uint64_t v6 = *(void *)(a1 + 64);
  if (*(unsigned char *)(a1 + 120))
  {
    *(unsigned char *)(v6 + 140) = a2;
    if (a2 > 3) {
      return;
    }
  }
  else
  {
    *(unsigned char *)(v6 + 141) = a2;
  }
  switch(a2)
  {
    case 0u:
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      *(_DWORD *)buf = 136446210;
      os_log_type_t v152 = "nw_protocol_plugin_metadata_process_frames_block_invoke";
      int v7 = (char *)_os_log_send_and_compose_impl();
      type[0] = OS_LOG_TYPE_ERROR;
      os_log_type_t v150 = OS_LOG_TYPE_DEFAULT;
      if (!__nwlog_fault(v7, type, &v150)) {
        goto LABEL_52;
      }
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v8 = gLogObj;
        os_log_type_t v9 = type[0];
        if (!os_log_type_enabled((os_log_t)gLogObj, type[0])) {
          goto LABEL_52;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v152 = "nw_protocol_plugin_metadata_process_frames_block_invoke";
        id v10 = "%{public}s metadata processor result must not be unknown";
LABEL_50:
        os_log_type_t v46 = v8;
        os_log_type_t v47 = v9;
LABEL_51:
        _os_log_impl(&dword_1830D4000, v46, v47, v10, buf, 0xCu);
        goto LABEL_52;
      }
      if (v150 == OS_LOG_TYPE_DEFAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v8 = gLogObj;
        os_log_type_t v9 = type[0];
        if (!os_log_type_enabled((os_log_t)gLogObj, type[0])) {
          goto LABEL_52;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v152 = "nw_protocol_plugin_metadata_process_frames_block_invoke";
        id v10 = "%{public}s metadata processor result must not be unknown, backtrace limit exceeded";
        goto LABEL_50;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v26 = gLogObj;
      os_log_type_t v27 = type[0];
      BOOL v28 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
      if (backtrace_string)
      {
        if (v28)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v152 = "nw_protocol_plugin_metadata_process_frames_block_invoke";
          __int16 v153 = 2082;
          *(void *)v154 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v26, v27, "%{public}s metadata processor result must not be unknown, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
      }
      else if (v28)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v152 = "nw_protocol_plugin_metadata_process_frames_block_invoke";
        id v10 = "%{public}s metadata processor result must not be unknown, no backtrace";
        os_log_type_t v46 = v26;
        os_log_type_t v47 = v27;
        goto LABEL_51;
      }
LABEL_52:
      if (v7) {
        free(v7);
      }
      return;
    case 1u:
      unsigned int v11 = nw_frame_unclaimed_length(*(_DWORD **)(a1 + 56));
      if (v11 <= **(_DWORD **)(a1 + 72))
      {
        uint64_t v19 = 48;
        if (!*(unsigned char *)(a1 + 120)) {
          uint64_t v19 = 64;
        }
        if (*(NSObject **)(*(void *)(a1 + 64) + v19) != a3)
        {
          uint64_t v20 = *(void *)(a1 + 56);
          int is_metadata_complete = nw_frame_is_metadata_complete(v20);
          nw_frame_set_metadata(v20, a3, 0, is_metadata_complete);
        }
        uint64_t v22 = *(void *)(a1 + 56);
        uint64_t v23 = *(void *)(v22 + 32);
        int v24 = *(void **)(v22 + 40);
        if (v23)
        {
          *(void *)(v23 + 40) = v24;
          int v24 = *(void **)(v22 + 40);
        }
        else
        {
          *(void *)(*(void *)(a1 + 80) + 8) = v24;
        }
        void *v24 = v23;
        *(void *)(v22 + 32) = 0;
        *(void *)(v22 + 40) = 0;
        uint64_t v32 = *(void *)(a1 + 88);
        uint64_t v33 = *(void *)(a1 + 56);
        *(void *)(v33 + 32) = 0;
        BOOL v34 = *(void **)(v32 + 8);
        *(void *)(v33 + 40) = v34;
        void *v34 = v33;
        *(void *)(v32 + 8) = v33 + 32;
        uint64_t v35 = *(unsigned int **)(a1 + 96);
        BOOL v36 = *v35 >= v11;
        *v35 -= v11;
        if (!v36)
        {
          if (gLogDatapath)
          {
            os_log_type_t v144 = __nwlog_obj();
            if (os_log_type_enabled(v144, OS_LOG_TYPE_DEBUG))
            {
              BOOL v145 = (const char *)**(unsigned int **)(a1 + 96);
              *(_DWORD *)buf = 136446978;
              os_log_type_t v152 = "nw_protocol_plugin_metadata_process_frames_block_invoke";
              __int16 v153 = 2082;
              *(void *)v154 = "minimum_bytes";
              *(_WORD *)&v154[8] = 2048;
              uint64_t v155 = v11;
              __int16 v156 = 2048;
              v157 = v145;
              _os_log_impl(&dword_1830D4000, v144, OS_LOG_TYPE_DEBUG, "%{public}s Underflow: %{public}s, decrement %llu, result %llu", buf, 0x2Au);
            }
          }
          **(_DWORD **)(a1 + 96) = 0;
        }
        size_t v37 = *(unsigned int **)(a1 + 72);
        BOOL v36 = *v37 >= v11;
        *v37 -= v11;
        if (!v36)
        {
          if (gLogDatapath)
          {
            os_log_type_t v146 = __nwlog_obj();
            if (os_log_type_enabled(v146, OS_LOG_TYPE_DEBUG))
            {
              BOOL v147 = (const char *)**(unsigned int **)(a1 + 72);
              *(_DWORD *)buf = 136446978;
              os_log_type_t v152 = "nw_protocol_plugin_metadata_process_frames_block_invoke";
              __int16 v153 = 2082;
              *(void *)v154 = "maximum_bytes";
              *(_WORD *)&v154[8] = 2048;
              uint64_t v155 = v11;
              __int16 v156 = 2048;
              v157 = v147;
              _os_log_impl(&dword_1830D4000, v146, OS_LOG_TYPE_DEBUG, "%{public}s Underflow: %{public}s, decrement %llu, result %llu", buf, 0x2Au);
            }
          }
          **(_DWORD **)(a1 + 72) = 0;
        }
        os_log_type_t v38 = *(_DWORD **)(a1 + 104);
        if ((*v38)--)
        {
LABEL_83:
          os_log_type_t v73 = *(_DWORD **)(a1 + 112);
          BOOL v36 = __CFADD__(*v73, v11);
          *v73 += v11;
          if (!v36) {
            goto LABEL_102;
          }
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v74 = v11;
          uint64_t v75 = (const char *)**(unsigned int **)(a1 + 112);
          *(_DWORD *)buf = 136446978;
          os_log_type_t v152 = "nw_protocol_plugin_metadata_process_frames_block_invoke";
          __int16 v153 = 2082;
          *(void *)v154 = "moved_bytes";
          *(_WORD *)&v154[8] = 2048;
          uint64_t v155 = v11;
          __int16 v156 = 2048;
          v157 = v75;
          char v76 = (char *)_os_log_send_and_compose_impl();
          type[0] = OS_LOG_TYPE_ERROR;
          os_log_type_t v150 = OS_LOG_TYPE_DEFAULT;
          if (__nwlog_fault(v76, type, &v150))
          {
            if (type[0] == OS_LOG_TYPE_FAULT)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              BOOL v77 = gLogObj;
              os_log_type_t v78 = type[0];
              if (os_log_type_enabled((os_log_t)gLogObj, type[0]))
              {
                uint64_t v79 = (const char *)**(unsigned int **)(a1 + 112);
                *(_DWORD *)buf = 136446978;
                os_log_type_t v152 = "nw_protocol_plugin_metadata_process_frames_block_invoke";
                __int16 v153 = 2082;
                *(void *)v154 = "moved_bytes";
                *(_WORD *)&v154[8] = 2048;
                uint64_t v155 = v74;
                __int16 v156 = 2048;
                v157 = v79;
                BOOL v80 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_98:
                _os_log_impl(&dword_1830D4000, v77, v78, v80, buf, 0x2Au);
              }
            }
            else if (v150)
            {
              uint64_t v81 = (char *)__nw_create_backtrace_string();
              BOOL v77 = __nwlog_obj();
              os_log_type_t v78 = type[0];
              BOOL v82 = os_log_type_enabled(v77, type[0]);
              if (v81)
              {
                if (v82)
                {
                  id v83 = (const char *)**(unsigned int **)(a1 + 112);
                  *(_DWORD *)buf = 136447234;
                  os_log_type_t v152 = "nw_protocol_plugin_metadata_process_frames_block_invoke";
                  __int16 v153 = 2082;
                  *(void *)v154 = "moved_bytes";
                  *(_WORD *)&v154[8] = 2048;
                  uint64_t v155 = v74;
                  __int16 v156 = 2048;
                  v157 = v83;
                  __int16 v158 = 2082;
                  BOOL v159 = v81;
                  _os_log_impl(&dword_1830D4000, v77, v78, "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
                }
                free(v81);
                goto LABEL_99;
              }
              if (v82)
              {
                BOOL v85 = (const char *)**(unsigned int **)(a1 + 112);
                *(_DWORD *)buf = 136446978;
                os_log_type_t v152 = "nw_protocol_plugin_metadata_process_frames_block_invoke";
                __int16 v153 = 2082;
                *(void *)v154 = "moved_bytes";
                *(_WORD *)&v154[8] = 2048;
                uint64_t v155 = v74;
                __int16 v156 = 2048;
                v157 = v85;
                BOOL v80 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
                goto LABEL_98;
              }
            }
            else
            {
              BOOL v77 = __nwlog_obj();
              os_log_type_t v78 = type[0];
              if (os_log_type_enabled(v77, type[0]))
              {
                uint64_t v84 = (const char *)**(unsigned int **)(a1 + 112);
                *(_DWORD *)buf = 136446978;
                os_log_type_t v152 = "nw_protocol_plugin_metadata_process_frames_block_invoke";
                __int16 v153 = 2082;
                *(void *)v154 = "moved_bytes";
                *(_WORD *)&v154[8] = 2048;
                uint64_t v155 = v74;
                __int16 v156 = 2048;
                v157 = v84;
                BOOL v80 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
                goto LABEL_98;
              }
            }
          }
LABEL_99:
          if (v76) {
            free(v76);
          }
          **(_DWORD **)(a1 + 112) = -1;
LABEL_102:
          uint64_t v86 = *(void *)(*(void *)(a1 + 32) + 8);
          uint64_t v87 = *(unsigned int *)(v86 + 24) + 1;
          uint64_t v88 = v87 << 31 >> 31;
          *(_DWORD *)(v86 + 24) = v87;
          if (v88 == v87 && (v88 & 0x8000000000000000) == 0)
          {
LABEL_121:
            if (nw_frame_is_metadata_complete(*(void *)(a1 + 56))) {
              **(_DWORD **)(a1 + 96) = 0;
            }
            return;
          }
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v89 = (const char *)*(unsigned int *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
          *(_DWORD *)buf = 136446978;
          os_log_type_t v152 = "nw_protocol_plugin_metadata_process_frames_block_invoke";
          __int16 v153 = 2082;
          *(void *)v154 = "count";
          *(_WORD *)&v154[8] = 2048;
          uint64_t v155 = 1;
          __int16 v156 = 2048;
          v157 = v89;
          os_log_type_t v90 = (char *)_os_log_send_and_compose_impl();
          type[0] = OS_LOG_TYPE_ERROR;
          os_log_type_t v150 = OS_LOG_TYPE_DEFAULT;
          if (__nwlog_fault(v90, type, &v150))
          {
            if (type[0] == OS_LOG_TYPE_FAULT)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              uint32_t v91 = gLogObj;
              os_log_type_t v92 = type[0];
              if (os_log_type_enabled((os_log_t)gLogObj, type[0]))
              {
                os_log_type_t v93 = (const char *)*(unsigned int *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
                *(_DWORD *)buf = 136446978;
                os_log_type_t v152 = "nw_protocol_plugin_metadata_process_frames_block_invoke";
                __int16 v153 = 2082;
                *(void *)v154 = "count";
                *(_WORD *)&v154[8] = 2048;
                uint64_t v155 = 1;
                __int16 v156 = 2048;
                v157 = v93;
                os_log_type_t v94 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_117:
                _os_log_impl(&dword_1830D4000, v91, v92, v94, buf, 0x2Au);
              }
            }
            else if (v150)
            {
              BOOL v95 = (char *)__nw_create_backtrace_string();
              uint32_t v91 = __nwlog_obj();
              os_log_type_t v92 = type[0];
              BOOL v96 = os_log_type_enabled(v91, type[0]);
              if (v95)
              {
                if (v96)
                {
                  BOOL v97 = (const char *)*(unsigned int *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
                  *(_DWORD *)buf = 136447234;
                  os_log_type_t v152 = "nw_protocol_plugin_metadata_process_frames_block_invoke";
                  __int16 v153 = 2082;
                  *(void *)v154 = "count";
                  *(_WORD *)&v154[8] = 2048;
                  uint64_t v155 = 1;
                  __int16 v156 = 2048;
                  v157 = v97;
                  __int16 v158 = 2082;
                  BOOL v159 = v95;
                  _os_log_impl(&dword_1830D4000, v91, v92, "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
                }
                free(v95);
                goto LABEL_118;
              }
              if (v96)
              {
                uint64_t v99 = (const char *)*(unsigned int *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
                *(_DWORD *)buf = 136446978;
                os_log_type_t v152 = "nw_protocol_plugin_metadata_process_frames_block_invoke";
                __int16 v153 = 2082;
                *(void *)v154 = "count";
                *(_WORD *)&v154[8] = 2048;
                uint64_t v155 = 1;
                __int16 v156 = 2048;
                v157 = v99;
                os_log_type_t v94 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
                goto LABEL_117;
              }
            }
            else
            {
              uint32_t v91 = __nwlog_obj();
              os_log_type_t v92 = type[0];
              if (os_log_type_enabled(v91, type[0]))
              {
                uint64_t v98 = (const char *)*(unsigned int *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
                *(_DWORD *)buf = 136446978;
                os_log_type_t v152 = "nw_protocol_plugin_metadata_process_frames_block_invoke";
                __int16 v153 = 2082;
                *(void *)v154 = "count";
                *(_WORD *)&v154[8] = 2048;
                uint64_t v155 = 1;
                __int16 v156 = 2048;
                v157 = v98;
                os_log_type_t v94 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
                goto LABEL_117;
              }
            }
          }
LABEL_118:
          if (v90) {
            free(v90);
          }
          *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = -1;
          goto LABEL_121;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v40 = (const char *)**(unsigned int **)(a1 + 104);
        *(_DWORD *)buf = 136446978;
        os_log_type_t v152 = "nw_protocol_plugin_metadata_process_frames_block_invoke";
        __int16 v153 = 2082;
        *(void *)v154 = "maximum_frame_count";
        *(_WORD *)&v154[8] = 2048;
        uint64_t v155 = 1;
        __int16 v156 = 2048;
        v157 = v40;
        uint64_t v41 = (char *)_os_log_send_and_compose_impl();
        type[0] = OS_LOG_TYPE_ERROR;
        os_log_type_t v150 = OS_LOG_TYPE_DEFAULT;
        if (__nwlog_fault(v41, type, &v150))
        {
          if (type[0] == OS_LOG_TYPE_FAULT)
          {
            uint64_t v42 = __nwlog_obj();
            os_log_type_t v43 = type[0];
            if (os_log_type_enabled(v42, type[0]))
            {
              uint64_t v44 = (const char *)**(unsigned int **)(a1 + 104);
              *(_DWORD *)buf = 136446978;
              os_log_type_t v152 = "nw_protocol_plugin_metadata_process_frames_block_invoke";
              __int16 v153 = 2082;
              *(void *)v154 = "maximum_frame_count";
              *(_WORD *)&v154[8] = 2048;
              uint64_t v155 = 1;
              __int16 v156 = 2048;
              v157 = v44;
              uint64_t v45 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu";
LABEL_79:
              _os_log_impl(&dword_1830D4000, v42, v43, v45, buf, 0x2Au);
            }
          }
          else if (v150)
          {
            unsigned int v65 = (char *)__nw_create_backtrace_string();
            uint64_t v42 = __nwlog_obj();
            os_log_type_t v43 = type[0];
            BOOL v66 = os_log_type_enabled(v42, type[0]);
            if (v65)
            {
              if (v66)
              {
                uint64_t v67 = (const char *)**(unsigned int **)(a1 + 104);
                *(_DWORD *)buf = 136447234;
                os_log_type_t v152 = "nw_protocol_plugin_metadata_process_frames_block_invoke";
                __int16 v153 = 2082;
                *(void *)v154 = "maximum_frame_count";
                *(_WORD *)&v154[8] = 2048;
                uint64_t v155 = 1;
                __int16 v156 = 2048;
                v157 = v67;
                __int16 v158 = 2082;
                BOOL v159 = v65;
                _os_log_impl(&dword_1830D4000, v42, v43, "%{public}s Underflow: %{public}s, decrement %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
              }
              free(v65);
              goto LABEL_80;
            }
            if (v66)
            {
              os_log_type_t v72 = (const char *)**(unsigned int **)(a1 + 104);
              *(_DWORD *)buf = 136446978;
              os_log_type_t v152 = "nw_protocol_plugin_metadata_process_frames_block_invoke";
              __int16 v153 = 2082;
              *(void *)v154 = "maximum_frame_count";
              *(_WORD *)&v154[8] = 2048;
              uint64_t v155 = 1;
              __int16 v156 = 2048;
              v157 = v72;
              uint64_t v45 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, no backtrace";
              goto LABEL_79;
            }
          }
          else
          {
            uint64_t v42 = __nwlog_obj();
            os_log_type_t v43 = type[0];
            if (os_log_type_enabled(v42, type[0]))
            {
              uint64_t v71 = (const char *)**(unsigned int **)(a1 + 104);
              *(_DWORD *)buf = 136446978;
              os_log_type_t v152 = "nw_protocol_plugin_metadata_process_frames_block_invoke";
              __int16 v153 = 2082;
              *(void *)v154 = "maximum_frame_count";
              *(_WORD *)&v154[8] = 2048;
              uint64_t v155 = 1;
              __int16 v156 = 2048;
              v157 = v71;
              uint64_t v45 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, backtrace limit exceeded";
              goto LABEL_79;
            }
          }
        }
LABEL_80:
        if (v41) {
          free(v41);
        }
        **(_DWORD **)(a1 + 104) = 0;
        goto LABEL_83;
      }
      if (*(unsigned char *)(a1 + 120))
      {
        if (gLogDatapath)
        {
          BOOL v141 = __nwlog_obj();
          if (os_log_type_enabled(v141, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v142 = *(void *)(a1 + 56);
            int v143 = **(_DWORD **)(a1 + 72);
            *(_DWORD *)buf = 136446722;
            os_log_type_t v152 = "nw_protocol_plugin_metadata_process_frames_block_invoke";
            __int16 v153 = 2048;
            *(void *)v154 = v142;
            *(_WORD *)&v154[8] = 1024;
            LODWORD(v155) = v143;
            _os_log_impl(&dword_1830D4000, v141, OS_LOG_TYPE_DEBUG, "%{public}s splitting frame %p by offset %d", buf, 0x1Cu);
          }
        }
        uint64_t v12 = *(void *)(a1 + 56);
        uint64_t v13 = *(void *)(v12 + 32);
        uint64_t v14 = *(void **)(v12 + 40);
        if (v13)
        {
          *(void *)(v13 + 40) = v14;
          uint64_t v14 = *(void **)(v12 + 40);
        }
        else
        {
          *(void *)(*(void *)(a1 + 80) + 8) = v14;
        }
        *uint64_t v14 = v13;
        *(void *)(v12 + 32) = 0;
        *(void *)(v12 + 40) = 0;
        *(void *)os_log_type_t type = *(void *)(a1 + 56);
        uint64_t v48 = nw_frame_split((uint64_t *)type, **(_DWORD **)(a1 + 72));
        uint64_t v49 = *(uint64_t **)(a1 + 80);
        uint64_t v50 = *(void *)type;
        uint64_t v51 = *v49;
        uint64_t v52 = *(void *)type;
        *(void *)(*(void *)type + 32) = *v49;
        uint64_t v53 = v52 + 32;
        if (v51) {
          os_log_type_t v54 = (void *)(v51 + 40);
        }
        else {
          os_log_type_t v54 = v49 + 1;
        }
        void *v54 = v53;
        uint64_t *v49 = v50;
        *(void *)(v50 + 40) = v49;
        uint64_t v55 = *(void *)(a1 + 88);
        *(void *)(v48 + 32) = 0;
        BOOL v56 = *(uint64_t **)(v55 + 8);
        *(void *)(v48 + 40) = v56;
        *BOOL v56 = v48;
        *(void *)(v55 + 8) = v48 + 32;
        **(_DWORD **)(a1 + 96) = 0;
        **(_DWORD **)(a1 + 72) = 0;
        uint64_t v57 = *(_DWORD **)(a1 + 104);
        if ((*v57)--)
        {
LABEL_131:
          BOOL v102 = *(_DWORD **)(a1 + 112);
          int v103 = **(_DWORD **)(a1 + 72);
          BOOL v36 = __CFADD__(*v102, v103);
          *v102 += v103;
          if (!v36) {
            goto LABEL_150;
          }
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v104 = **(unsigned int **)(a1 + 72);
          int v105 = (const char *)**(unsigned int **)(a1 + 112);
          *(_DWORD *)buf = 136446978;
          os_log_type_t v152 = "nw_protocol_plugin_metadata_process_frames_block_invoke";
          __int16 v153 = 2082;
          *(void *)v154 = "moved_bytes";
          *(_WORD *)&v154[8] = 2048;
          uint64_t v155 = v104;
          __int16 v156 = 2048;
          v157 = v105;
          os_log_type_t v106 = (char *)_os_log_send_and_compose_impl();
          os_log_type_t v150 = OS_LOG_TYPE_ERROR;
          char v148 = 0;
          if (__nwlog_fault(v106, &v150, &v148))
          {
            if (v150 == OS_LOG_TYPE_FAULT)
            {
              char v107 = __nwlog_obj();
              os_log_type_t v108 = v150;
              if (os_log_type_enabled(v107, v150))
              {
                uint64_t v109 = **(unsigned int **)(a1 + 72);
                os_log_type_t v110 = (const char *)**(unsigned int **)(a1 + 112);
                *(_DWORD *)buf = 136446978;
                os_log_type_t v152 = "nw_protocol_plugin_metadata_process_frames_block_invoke";
                __int16 v153 = 2082;
                *(void *)v154 = "moved_bytes";
                *(_WORD *)&v154[8] = 2048;
                uint64_t v155 = v109;
                __int16 v156 = 2048;
                v157 = v110;
                BOOL v111 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_146:
                _os_log_impl(&dword_1830D4000, v107, v108, v111, buf, 0x2Au);
              }
            }
            else if (v148)
            {
              __int16 v112 = (char *)__nw_create_backtrace_string();
              char v107 = __nwlog_obj();
              os_log_type_t v108 = v150;
              BOOL v113 = os_log_type_enabled(v107, v150);
              if (v112)
              {
                if (v113)
                {
                  uint64_t v114 = **(unsigned int **)(a1 + 72);
                  v115 = (const char *)**(unsigned int **)(a1 + 112);
                  *(_DWORD *)buf = 136447234;
                  os_log_type_t v152 = "nw_protocol_plugin_metadata_process_frames_block_invoke";
                  __int16 v153 = 2082;
                  *(void *)v154 = "moved_bytes";
                  *(_WORD *)&v154[8] = 2048;
                  uint64_t v155 = v114;
                  __int16 v156 = 2048;
                  v157 = v115;
                  __int16 v158 = 2082;
                  BOOL v159 = v112;
                  _os_log_impl(&dword_1830D4000, v107, v108, "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
                }
                free(v112);
                goto LABEL_147;
              }
              if (v113)
              {
                uint64_t v118 = **(unsigned int **)(a1 + 72);
                char v119 = (const char *)**(unsigned int **)(a1 + 112);
                *(_DWORD *)buf = 136446978;
                os_log_type_t v152 = "nw_protocol_plugin_metadata_process_frames_block_invoke";
                __int16 v153 = 2082;
                *(void *)v154 = "moved_bytes";
                *(_WORD *)&v154[8] = 2048;
                uint64_t v155 = v118;
                __int16 v156 = 2048;
                v157 = v119;
                BOOL v111 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
                goto LABEL_146;
              }
            }
            else
            {
              char v107 = __nwlog_obj();
              os_log_type_t v108 = v150;
              if (os_log_type_enabled(v107, v150))
              {
                uint64_t v116 = **(unsigned int **)(a1 + 72);
                uint64_t v117 = (const char *)**(unsigned int **)(a1 + 112);
                *(_DWORD *)buf = 136446978;
                os_log_type_t v152 = "nw_protocol_plugin_metadata_process_frames_block_invoke";
                __int16 v153 = 2082;
                *(void *)v154 = "moved_bytes";
                *(_WORD *)&v154[8] = 2048;
                uint64_t v155 = v116;
                __int16 v156 = 2048;
                v157 = v117;
                BOOL v111 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
                goto LABEL_146;
              }
            }
          }
LABEL_147:
          if (v106) {
            free(v106);
          }
          **(_DWORD **)(a1 + 112) = -1;
LABEL_150:
          uint64_t v120 = *(void *)(*(void *)(a1 + 32) + 8);
          uint64_t v121 = *(unsigned int *)(v120 + 24) + 1;
          uint64_t v122 = v121 << 31 >> 31;
          *(_DWORD *)(v120 + 24) = v121;
          if (v122 == v121 && (v122 & 0x8000000000000000) == 0) {
            goto LABEL_169;
          }
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          int v123 = (const char *)*(unsigned int *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
          *(_DWORD *)buf = 136446978;
          os_log_type_t v152 = "nw_protocol_plugin_metadata_process_frames_block_invoke";
          __int16 v153 = 2082;
          *(void *)v154 = "count";
          *(_WORD *)&v154[8] = 2048;
          uint64_t v155 = 1;
          __int16 v156 = 2048;
          v157 = v123;
          os_log_type_t v124 = (char *)_os_log_send_and_compose_impl();
          os_log_type_t v150 = OS_LOG_TYPE_ERROR;
          char v148 = 0;
          if (!__nwlog_fault(v124, &v150, &v148)) {
            goto LABEL_166;
          }
          if (v150 == OS_LOG_TYPE_FAULT)
          {
            v125 = __nwlog_obj();
            os_log_type_t v126 = v150;
            if (os_log_type_enabled(v125, v150))
            {
              v127 = (const char *)*(unsigned int *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
              *(_DWORD *)buf = 136446978;
              os_log_type_t v152 = "nw_protocol_plugin_metadata_process_frames_block_invoke";
              __int16 v153 = 2082;
              *(void *)v154 = "count";
              *(_WORD *)&v154[8] = 2048;
              uint64_t v155 = 1;
              __int16 v156 = 2048;
              v157 = v127;
              v128 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_165:
              _os_log_impl(&dword_1830D4000, v125, v126, v128, buf, 0x2Au);
            }
          }
          else if (v148)
          {
            v129 = (char *)__nw_create_backtrace_string();
            v125 = __nwlog_obj();
            os_log_type_t v126 = v150;
            BOOL v130 = os_log_type_enabled(v125, v150);
            if (v129)
            {
              if (v130)
              {
                v131 = (const char *)*(unsigned int *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
                *(_DWORD *)buf = 136447234;
                os_log_type_t v152 = "nw_protocol_plugin_metadata_process_frames_block_invoke";
                __int16 v153 = 2082;
                *(void *)v154 = "count";
                *(_WORD *)&v154[8] = 2048;
                uint64_t v155 = 1;
                __int16 v156 = 2048;
                v157 = v131;
                __int16 v158 = 2082;
                BOOL v159 = v129;
                _os_log_impl(&dword_1830D4000, v125, v126, "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
              }
              free(v129);
              goto LABEL_166;
            }
            if (v130)
            {
              uint64_t v133 = (const char *)*(unsigned int *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
              *(_DWORD *)buf = 136446978;
              os_log_type_t v152 = "nw_protocol_plugin_metadata_process_frames_block_invoke";
              __int16 v153 = 2082;
              *(void *)v154 = "count";
              *(_WORD *)&v154[8] = 2048;
              uint64_t v155 = 1;
              __int16 v156 = 2048;
              v157 = v133;
              v128 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
              goto LABEL_165;
            }
          }
          else
          {
            v125 = __nwlog_obj();
            os_log_type_t v126 = v150;
            if (os_log_type_enabled(v125, v150))
            {
              uint64_t v132 = (const char *)*(unsigned int *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
              *(_DWORD *)buf = 136446978;
              os_log_type_t v152 = "nw_protocol_plugin_metadata_process_frames_block_invoke";
              __int16 v153 = 2082;
              *(void *)v154 = "count";
              *(_WORD *)&v154[8] = 2048;
              uint64_t v155 = 1;
              __int16 v156 = 2048;
              v157 = v132;
              v128 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
              goto LABEL_165;
            }
          }
LABEL_166:
          if (v124) {
            free(v124);
          }
          *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = -1;
          goto LABEL_169;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v59 = (const char *)**(unsigned int **)(a1 + 104);
        *(_DWORD *)buf = 136446978;
        os_log_type_t v152 = "nw_protocol_plugin_metadata_process_frames_block_invoke";
        __int16 v153 = 2082;
        *(void *)v154 = "maximum_frame_count";
        *(_WORD *)&v154[8] = 2048;
        uint64_t v155 = 1;
        __int16 v156 = 2048;
        v157 = v59;
        uint64_t v60 = (char *)_os_log_send_and_compose_impl();
        os_log_type_t v150 = OS_LOG_TYPE_ERROR;
        char v148 = 0;
        if (__nwlog_fault(v60, &v150, &v148))
        {
          if (v150 == OS_LOG_TYPE_FAULT)
          {
            uint64_t v61 = __nwlog_obj();
            os_log_type_t v62 = v150;
            if (os_log_type_enabled(v61, v150))
            {
              uint64_t v63 = (const char *)**(unsigned int **)(a1 + 104);
              *(_DWORD *)buf = 136446978;
              os_log_type_t v152 = "nw_protocol_plugin_metadata_process_frames_block_invoke";
              __int16 v153 = 2082;
              *(void *)v154 = "maximum_frame_count";
              *(_WORD *)&v154[8] = 2048;
              uint64_t v155 = 1;
              __int16 v156 = 2048;
              v157 = v63;
              int v64 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu";
LABEL_127:
              _os_log_impl(&dword_1830D4000, v61, v62, v64, buf, 0x2Au);
            }
          }
          else if (v148)
          {
            uint64_t v68 = (char *)__nw_create_backtrace_string();
            uint64_t v61 = __nwlog_obj();
            os_log_type_t v62 = v150;
            BOOL v69 = os_log_type_enabled(v61, v150);
            if (v68)
            {
              if (v69)
              {
                uint64_t v70 = (const char *)**(unsigned int **)(a1 + 104);
                *(_DWORD *)buf = 136447234;
                os_log_type_t v152 = "nw_protocol_plugin_metadata_process_frames_block_invoke";
                __int16 v153 = 2082;
                *(void *)v154 = "maximum_frame_count";
                *(_WORD *)&v154[8] = 2048;
                uint64_t v155 = 1;
                __int16 v156 = 2048;
                v157 = v70;
                __int16 v158 = 2082;
                BOOL v159 = v68;
                _os_log_impl(&dword_1830D4000, v61, v62, "%{public}s Underflow: %{public}s, decrement %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
              }
              free(v68);
              goto LABEL_128;
            }
            if (v69)
            {
              uint64_t v101 = (const char *)**(unsigned int **)(a1 + 104);
              *(_DWORD *)buf = 136446978;
              os_log_type_t v152 = "nw_protocol_plugin_metadata_process_frames_block_invoke";
              __int16 v153 = 2082;
              *(void *)v154 = "maximum_frame_count";
              *(_WORD *)&v154[8] = 2048;
              uint64_t v155 = 1;
              __int16 v156 = 2048;
              v157 = v101;
              int v64 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, no backtrace";
              goto LABEL_127;
            }
          }
          else
          {
            uint64_t v61 = __nwlog_obj();
            os_log_type_t v62 = v150;
            if (os_log_type_enabled(v61, v150))
            {
              uint64_t v100 = (const char *)**(unsigned int **)(a1 + 104);
              *(_DWORD *)buf = 136446978;
              os_log_type_t v152 = "nw_protocol_plugin_metadata_process_frames_block_invoke";
              __int16 v153 = 2082;
              *(void *)v154 = "maximum_frame_count";
              *(_WORD *)&v154[8] = 2048;
              uint64_t v155 = 1;
              __int16 v156 = 2048;
              v157 = v100;
              int v64 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, backtrace limit exceeded";
              goto LABEL_127;
            }
          }
        }
LABEL_128:
        if (v60) {
          free(v60);
        }
        **(_DWORD **)(a1 + 104) = 0;
        goto LABEL_131;
      }
      if (gLogDatapath)
      {
        uint64_t v30 = __nwlog_obj();
        if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
        {
          int v31 = **(_DWORD **)(a1 + 72);
          *(_DWORD *)buf = 136446722;
          os_log_type_t v152 = "nw_protocol_plugin_metadata_process_frames_block_invoke";
          __int16 v153 = 1024;
          *(_DWORD *)v154 = v11;
          *(_WORD *)&v154[4] = 1024;
          *(_DWORD *)&v154[6] = v31;
          _os_log_impl(&dword_1830D4000, v30, OS_LOG_TYPE_DEBUG, "%{public}s not delivering frame with length %u maximum bytes %u", buf, 0x18u);
        }
      }
LABEL_169:
      *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
      return;
    case 2u:
      goto LABEL_169;
    case 3u:
      int v15 = nw_frame_is_metadata_complete(*(void *)(a1 + 56));
      uint64_t v16 = *(void *)(a1 + 56);
      uint64_t v17 = *(void *)(v16 + 32);
      uint64_t v18 = *(void **)(v16 + 40);
      if (v17)
      {
        *(void *)(v17 + 40) = v18;
        uint64_t v18 = *(void **)(v16 + 40);
      }
      else
      {
        *(void *)(*(void *)(a1 + 80) + 8) = v18;
      }
      *uint64_t v18 = v17;
      *(void *)(v16 + 32) = 0;
      *(void *)(v16 + 40) = 0;
      nw_frame_finalize(*(void *)(a1 + 56));
      if (v15)
      {
        uint64_t v29 = *(void (**)(void))(*(void *)(a1 + 64) + 120);
        if (v29) {
          v29(*(void *)(a1 + 48));
        }
      }
      return;
    default:
      return;
  }
}

uint64_t nw_protocol_plugin_metadata_get_input_frames(void *a1, uint64_t a2, unsigned int a3, unsigned int a4, unsigned int a5, uint64_t *a6)
{
  uint64_t v266 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    LODWORD(buf[0]) = 136446210;
    *(void *)((char *)buf + 4) = "nw_protocol_plugin_metadata_get_input_frames";
    os_log_type_t v126 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v252[0]) = 0;
    if (!__nwlog_fault(v126, type, v252)) {
      goto LABEL_412;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      v127 = __nwlog_obj();
      os_log_type_t v128 = type[0];
      if (!os_log_type_enabled(v127, type[0])) {
        goto LABEL_412;
      }
      LODWORD(buf[0]) = 136446210;
      *(void *)((char *)buf + 4) = "nw_protocol_plugin_metadata_get_input_frames";
      v129 = "%{public}s called with null protocol";
      goto LABEL_411;
    }
    if (!LOBYTE(v252[0]))
    {
      v127 = __nwlog_obj();
      os_log_type_t v128 = type[0];
      if (!os_log_type_enabled(v127, type[0])) {
        goto LABEL_412;
      }
      LODWORD(buf[0]) = 136446210;
      *(void *)((char *)buf + 4) = "nw_protocol_plugin_metadata_get_input_frames";
      v129 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_411;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v127 = __nwlog_obj();
    os_log_type_t v128 = type[0];
    BOOL v131 = os_log_type_enabled(v127, type[0]);
    if (!backtrace_string)
    {
      if (!v131) {
        goto LABEL_412;
      }
      LODWORD(buf[0]) = 136446210;
      *(void *)((char *)buf + 4) = "nw_protocol_plugin_metadata_get_input_frames";
      v129 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_411;
    }
    if (!v131) {
      goto LABEL_318;
    }
    LODWORD(buf[0]) = 136446466;
    *(void *)((char *)buf + 4) = "nw_protocol_plugin_metadata_get_input_frames";
    WORD2(buf[1]) = 2082;
    *(void *)((char *)&buf[1] + 6) = backtrace_string;
    uint64_t v132 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_317:
    _os_log_impl(&dword_1830D4000, v127, v128, v132, (uint8_t *)buf, 0x16u);
    goto LABEL_318;
  }
  uint64_t v6 = a1[5];
  if (!v6)
  {
    __nwlog_obj();
    LODWORD(buf[0]) = 136446210;
    *(void *)((char *)buf + 4) = "nw_protocol_plugin_metadata_get_input_frames";
    os_log_type_t v126 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v252[0]) = 0;
    if (!__nwlog_fault(v126, type, v252)) {
      goto LABEL_412;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      v127 = __nwlog_obj();
      os_log_type_t v128 = type[0];
      if (!os_log_type_enabled(v127, type[0])) {
        goto LABEL_412;
      }
      LODWORD(buf[0]) = 136446210;
      *(void *)((char *)buf + 4) = "nw_protocol_plugin_metadata_get_input_frames";
      v129 = "%{public}s called with null protocol->handle";
      goto LABEL_411;
    }
    if (!LOBYTE(v252[0]))
    {
      v127 = __nwlog_obj();
      os_log_type_t v128 = type[0];
      if (!os_log_type_enabled(v127, type[0])) {
        goto LABEL_412;
      }
      LODWORD(buf[0]) = 136446210;
      *(void *)((char *)buf + 4) = "nw_protocol_plugin_metadata_get_input_frames";
      v129 = "%{public}s called with null protocol->handle, backtrace limit exceeded";
      goto LABEL_411;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v127 = __nwlog_obj();
    os_log_type_t v128 = type[0];
    BOOL v133 = os_log_type_enabled(v127, type[0]);
    if (!backtrace_string)
    {
      if (!v133) {
        goto LABEL_412;
      }
      LODWORD(buf[0]) = 136446210;
      *(void *)((char *)buf + 4) = "nw_protocol_plugin_metadata_get_input_frames";
      v129 = "%{public}s called with null protocol->handle, no backtrace";
      goto LABEL_411;
    }
    if (!v133) {
      goto LABEL_318;
    }
    LODWORD(buf[0]) = 136446466;
    *(void *)((char *)buf + 4) = "nw_protocol_plugin_metadata_get_input_frames";
    WORD2(buf[1]) = 2082;
    *(void *)((char *)&buf[1] + 6) = backtrace_string;
    uint64_t v132 = "%{public}s called with null protocol->handle, dumping backtrace:%{public}s";
    goto LABEL_317;
  }
  uint64_t v7 = *(void *)(v6 + 72);
  if (!v7)
  {
    __nwlog_obj();
    LODWORD(buf[0]) = 136446210;
    *(void *)((char *)buf + 4) = "nw_protocol_plugin_metadata_get_input_frames";
    os_log_type_t v126 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v252[0]) = 0;
    if (!__nwlog_fault(v126, type, v252)) {
      goto LABEL_412;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      v127 = __nwlog_obj();
      os_log_type_t v128 = type[0];
      if (!os_log_type_enabled(v127, type[0])) {
        goto LABEL_412;
      }
      LODWORD(buf[0]) = 136446210;
      *(void *)((char *)buf + 4) = "nw_protocol_plugin_metadata_get_input_frames";
      v129 = "%{public}s called with null metadata_plugin";
      goto LABEL_411;
    }
    if (!LOBYTE(v252[0]))
    {
      v127 = __nwlog_obj();
      os_log_type_t v128 = type[0];
      if (!os_log_type_enabled(v127, type[0])) {
        goto LABEL_412;
      }
      LODWORD(buf[0]) = 136446210;
      *(void *)((char *)buf + 4) = "nw_protocol_plugin_metadata_get_input_frames";
      v129 = "%{public}s called with null metadata_plugin, backtrace limit exceeded";
      goto LABEL_411;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v127 = __nwlog_obj();
    os_log_type_t v128 = type[0];
    BOOL v134 = os_log_type_enabled(v127, type[0]);
    if (!backtrace_string)
    {
      if (!v134) {
        goto LABEL_412;
      }
      LODWORD(buf[0]) = 136446210;
      *(void *)((char *)buf + 4) = "nw_protocol_plugin_metadata_get_input_frames";
      v129 = "%{public}s called with null metadata_plugin, no backtrace";
      goto LABEL_411;
    }
    if (!v134) {
      goto LABEL_318;
    }
    LODWORD(buf[0]) = 136446466;
    *(void *)((char *)buf + 4) = "nw_protocol_plugin_metadata_get_input_frames";
    WORD2(buf[1]) = 2082;
    *(void *)((char *)&buf[1] + 6) = backtrace_string;
    uint64_t v132 = "%{public}s called with null metadata_plugin, dumping backtrace:%{public}s";
    goto LABEL_317;
  }
  if (!a2)
  {
    __nwlog_obj();
    LODWORD(buf[0]) = 136446210;
    *(void *)((char *)buf + 4) = "nw_protocol_plugin_metadata_get_input_frames";
    os_log_type_t v126 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v252[0]) = 0;
    if (!__nwlog_fault(v126, type, v252)) {
      goto LABEL_412;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      v127 = __nwlog_obj();
      os_log_type_t v128 = type[0];
      if (!os_log_type_enabled(v127, type[0])) {
        goto LABEL_412;
      }
      LODWORD(buf[0]) = 136446210;
      *(void *)((char *)buf + 4) = "nw_protocol_plugin_metadata_get_input_frames";
      v129 = "%{public}s called with null input_protocol";
      goto LABEL_411;
    }
    if (!LOBYTE(v252[0]))
    {
      v127 = __nwlog_obj();
      os_log_type_t v128 = type[0];
      if (!os_log_type_enabled(v127, type[0])) {
        goto LABEL_412;
      }
      LODWORD(buf[0]) = 136446210;
      *(void *)((char *)buf + 4) = "nw_protocol_plugin_metadata_get_input_frames";
      v129 = "%{public}s called with null input_protocol, backtrace limit exceeded";
      goto LABEL_411;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v127 = __nwlog_obj();
    os_log_type_t v128 = type[0];
    BOOL v135 = os_log_type_enabled(v127, type[0]);
    if (!backtrace_string)
    {
      if (!v135) {
        goto LABEL_412;
      }
      LODWORD(buf[0]) = 136446210;
      *(void *)((char *)buf + 4) = "nw_protocol_plugin_metadata_get_input_frames";
      v129 = "%{public}s called with null input_protocol, no backtrace";
      goto LABEL_411;
    }
    if (!v135) {
      goto LABEL_318;
    }
    LODWORD(buf[0]) = 136446466;
    *(void *)((char *)buf + 4) = "nw_protocol_plugin_metadata_get_input_frames";
    WORD2(buf[1]) = 2082;
    *(void *)((char *)&buf[1] + 6) = backtrace_string;
    uint64_t v132 = "%{public}s called with null input_protocol, dumping backtrace:%{public}s";
    goto LABEL_317;
  }
  if (!a6)
  {
    __nwlog_obj();
    LODWORD(buf[0]) = 136446210;
    *(void *)((char *)buf + 4) = "nw_protocol_plugin_metadata_get_input_frames";
    os_log_type_t v126 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v252[0]) = 0;
    if (!__nwlog_fault(v126, type, v252)) {
      goto LABEL_412;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      v127 = __nwlog_obj();
      os_log_type_t v128 = type[0];
      if (!os_log_type_enabled(v127, type[0])) {
        goto LABEL_412;
      }
      LODWORD(buf[0]) = 136446210;
      *(void *)((char *)buf + 4) = "nw_protocol_plugin_metadata_get_input_frames";
      v129 = "%{public}s called with null return_array";
      goto LABEL_411;
    }
    if (!LOBYTE(v252[0]))
    {
      v127 = __nwlog_obj();
      os_log_type_t v128 = type[0];
      if (!os_log_type_enabled(v127, type[0])) {
        goto LABEL_412;
      }
      LODWORD(buf[0]) = 136446210;
      *(void *)((char *)buf + 4) = "nw_protocol_plugin_metadata_get_input_frames";
      v129 = "%{public}s called with null return_array, backtrace limit exceeded";
      goto LABEL_411;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v127 = __nwlog_obj();
    os_log_type_t v128 = type[0];
    BOOL v141 = os_log_type_enabled(v127, type[0]);
    if (backtrace_string)
    {
      if (v141)
      {
        LODWORD(buf[0]) = 136446466;
        *(void *)((char *)buf + 4) = "nw_protocol_plugin_metadata_get_input_frames";
        WORD2(buf[1]) = 2082;
        *(void *)((char *)&buf[1] + 6) = backtrace_string;
        uint64_t v132 = "%{public}s called with null return_array, dumping backtrace:%{public}s";
        goto LABEL_317;
      }
LABEL_318:
      free(backtrace_string);
      goto LABEL_412;
    }
    if (!v141) {
      goto LABEL_412;
    }
    LODWORD(buf[0]) = 136446210;
    *(void *)((char *)buf + 4) = "nw_protocol_plugin_metadata_get_input_frames";
    v129 = "%{public}s called with null return_array, no backtrace";
LABEL_411:
    _os_log_impl(&dword_1830D4000, v127, v128, v129, (uint8_t *)buf, 0xCu);
LABEL_412:
    if (v126) {
      free(v126);
    }
    return 0;
  }
  if ((*(unsigned char *)(v7 + 142) & 2) != 0)
  {
    if (gLogDatapath)
    {
      os_log_type_t v140 = __nwlog_obj();
      if (os_log_type_enabled(v140, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(buf[0]) = 136446210;
        *(void *)((char *)buf + 4) = "nw_protocol_plugin_metadata_get_input_frames";
        _os_log_impl(&dword_1830D4000, v140, OS_LOG_TYPE_DEBUG, "%{public}s get_input_frames called reentrantly, returning", (uint8_t *)buf, 0xCu);
        return 0;
      }
    }
    return 0;
  }
  *(unsigned char *)(v7 + 142) |= 2u;
  uint64_t v12 = *(void *)(v6 + 88);
  if (v12 && (*(unsigned char *)(v12 + 212) & 1) == 0) {
    *(unsigned char *)(v12 + 212) |= 1u;
  }
  unsigned int v226 = a4;
  unsigned int v227 = a3;
  unsigned int v225 = a5;
  uint64_t v13 = a1[5];
  if (!v13)
  {
    __nwlog_obj();
    LODWORD(buf[0]) = 136446210;
    *(void *)((char *)buf + 4) = "nw_protocol_plugin_metadata_get_input_frames_internal";
    uint64_t v136 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v252[0]) = 0;
    if (!__nwlog_fault(v136, type, v252)) {
      goto LABEL_450;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      v137 = __nwlog_obj();
      os_log_type_t v138 = type[0];
      if (!os_log_type_enabled(v137, type[0])) {
        goto LABEL_450;
      }
      LODWORD(buf[0]) = 136446210;
      *(void *)((char *)buf + 4) = "nw_protocol_plugin_metadata_get_input_frames_internal";
      v139 = "%{public}s called with null protocol->handle";
      goto LABEL_449;
    }
    if (!LOBYTE(v252[0]))
    {
      v137 = __nwlog_obj();
      os_log_type_t v138 = type[0];
      if (!os_log_type_enabled(v137, type[0])) {
        goto LABEL_450;
      }
      LODWORD(buf[0]) = 136446210;
      *(void *)((char *)buf + 4) = "nw_protocol_plugin_metadata_get_input_frames_internal";
      v139 = "%{public}s called with null protocol->handle, backtrace limit exceeded";
      goto LABEL_449;
    }
    uint64_t v155 = (char *)__nw_create_backtrace_string();
    v137 = __nwlog_obj();
    os_log_type_t v138 = type[0];
    BOOL v156 = os_log_type_enabled(v137, type[0]);
    if (!v155)
    {
      if (!v156) {
        goto LABEL_450;
      }
      LODWORD(buf[0]) = 136446210;
      *(void *)((char *)buf + 4) = "nw_protocol_plugin_metadata_get_input_frames_internal";
      v139 = "%{public}s called with null protocol->handle, no backtrace";
      goto LABEL_449;
    }
    if (!v156) {
      goto LABEL_358;
    }
    LODWORD(buf[0]) = 136446466;
    *(void *)((char *)buf + 4) = "nw_protocol_plugin_metadata_get_input_frames_internal";
    WORD2(buf[1]) = 2082;
    *(void *)((char *)&buf[1] + 6) = v155;
    v157 = "%{public}s called with null protocol->handle, dumping backtrace:%{public}s";
LABEL_357:
    _os_log_impl(&dword_1830D4000, v137, v138, v157, (uint8_t *)buf, 0x16u);
    goto LABEL_358;
  }
  uint64_t v14 = *(void *)(v13 + 72);
  if (!v14)
  {
    __nwlog_obj();
    LODWORD(buf[0]) = 136446210;
    *(void *)((char *)buf + 4) = "nw_protocol_plugin_metadata_get_input_frames_internal";
    uint64_t v136 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v252[0]) = 0;
    if (!__nwlog_fault(v136, type, v252)) {
      goto LABEL_450;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      v137 = __nwlog_obj();
      os_log_type_t v138 = type[0];
      if (!os_log_type_enabled(v137, type[0])) {
        goto LABEL_450;
      }
      LODWORD(buf[0]) = 136446210;
      *(void *)((char *)buf + 4) = "nw_protocol_plugin_metadata_get_input_frames_internal";
      v139 = "%{public}s called with null metadata_plugin";
      goto LABEL_449;
    }
    if (!LOBYTE(v252[0]))
    {
      v137 = __nwlog_obj();
      os_log_type_t v138 = type[0];
      if (!os_log_type_enabled(v137, type[0])) {
        goto LABEL_450;
      }
      LODWORD(buf[0]) = 136446210;
      *(void *)((char *)buf + 4) = "nw_protocol_plugin_metadata_get_input_frames_internal";
      v139 = "%{public}s called with null metadata_plugin, backtrace limit exceeded";
      goto LABEL_449;
    }
    uint64_t v155 = (char *)__nw_create_backtrace_string();
    v137 = __nwlog_obj();
    os_log_type_t v138 = type[0];
    BOOL v158 = os_log_type_enabled(v137, type[0]);
    if (!v155)
    {
      if (!v158) {
        goto LABEL_450;
      }
      LODWORD(buf[0]) = 136446210;
      *(void *)((char *)buf + 4) = "nw_protocol_plugin_metadata_get_input_frames_internal";
      v139 = "%{public}s called with null metadata_plugin, no backtrace";
      goto LABEL_449;
    }
    if (!v158) {
      goto LABEL_358;
    }
    LODWORD(buf[0]) = 136446466;
    *(void *)((char *)buf + 4) = "nw_protocol_plugin_metadata_get_input_frames_internal";
    WORD2(buf[1]) = 2082;
    *(void *)((char *)&buf[1] + 6) = v155;
    v157 = "%{public}s called with null metadata_plugin, dumping backtrace:%{public}s";
    goto LABEL_357;
  }
  if ((*(unsigned char *)(v14 + 142) & 2) == 0)
  {
    __nwlog_obj();
    LODWORD(buf[0]) = 136446210;
    *(void *)((char *)buf + 4) = "nw_protocol_plugin_metadata_get_input_frames_internal";
    uint64_t v136 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v252[0]) = 0;
    if (!__nwlog_fault(v136, type, v252)) {
      goto LABEL_450;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      v137 = __nwlog_obj();
      os_log_type_t v138 = type[0];
      if (!os_log_type_enabled(v137, type[0])) {
        goto LABEL_450;
      }
      LODWORD(buf[0]) = 136446210;
      *(void *)((char *)buf + 4) = "nw_protocol_plugin_metadata_get_input_frames_internal";
      v139 = "%{public}s called with null metadata_plugin->getting_input_frames";
      goto LABEL_449;
    }
    if (!LOBYTE(v252[0]))
    {
      v137 = __nwlog_obj();
      os_log_type_t v138 = type[0];
      if (!os_log_type_enabled(v137, type[0])) {
        goto LABEL_450;
      }
      LODWORD(buf[0]) = 136446210;
      *(void *)((char *)buf + 4) = "nw_protocol_plugin_metadata_get_input_frames_internal";
      v139 = "%{public}s called with null metadata_plugin->getting_input_frames, backtrace limit exceeded";
      goto LABEL_449;
    }
    uint64_t v155 = (char *)__nw_create_backtrace_string();
    v137 = __nwlog_obj();
    os_log_type_t v138 = type[0];
    BOOL v160 = os_log_type_enabled(v137, type[0]);
    if (v155)
    {
      if (v160)
      {
        LODWORD(buf[0]) = 136446466;
        *(void *)((char *)buf + 4) = "nw_protocol_plugin_metadata_get_input_frames_internal";
        WORD2(buf[1]) = 2082;
        *(void *)((char *)&buf[1] + 6) = v155;
        v157 = "%{public}s called with null metadata_plugin->getting_input_frames, dumping backtrace:%{public}s";
        goto LABEL_357;
      }
LABEL_358:
      free(v155);
      goto LABEL_450;
    }
    if (!v160) {
      goto LABEL_450;
    }
    LODWORD(buf[0]) = 136446210;
    *(void *)((char *)buf + 4) = "nw_protocol_plugin_metadata_get_input_frames_internal";
    v139 = "%{public}s called with null metadata_plugin->getting_input_frames, no backtrace";
LABEL_449:
    _os_log_impl(&dword_1830D4000, v137, v138, v139, (uint8_t *)buf, 0xCu);
LABEL_450:
    if (v136) {
      free(v136);
    }
    goto LABEL_15;
  }
  unsigned int v223 = 0;
  unsigned int v224 = 0;
  if (*(unsigned char *)(v14 + 140) == 2)
  {
    if (gLogDatapath)
    {
      BOOL v159 = __nwlog_obj();
      if (os_log_type_enabled(v159, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(buf[0]) = 136446210;
        *(void *)((char *)buf + 4) = "nw_protocol_plugin_metadata_get_input_frames_internal";
        _os_log_impl(&dword_1830D4000, v159, OS_LOG_TYPE_DEBUG, "%{public}s cannot process frames, waiting for saved input frames to be resumed", (uint8_t *)buf, 0xCu);
        uint64_t v15 = 0;
        goto LABEL_147;
      }
    }
LABEL_15:
    uint64_t v15 = 0;
    goto LABEL_147;
  }
  uint64_t v16 = (uint64_t *)(v14 + 16);
  if (!*(void *)(v14 + 16))
  {
    uint64_t v15 = 0;
    goto LABEL_107;
  }
  char v222 = 0;
  if (gLogDatapath)
  {
    os_log_type_t v164 = __nwlog_obj();
    if (os_log_type_enabled(v164, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(buf[0]) = 136446978;
      *(void *)((char *)buf + 4) = "__nw_protocol_fulfill_frame_request";
      WORD2(buf[1]) = 1024;
      *(_DWORD *)((char *)&buf[1] + 6) = a3;
      WORD1(buf[2]) = 1024;
      HIDWORD(buf[2]) = a4;
      LOWORD(v255) = 1024;
      *(_DWORD *)((char *)&v255 + 2) = a5;
      _os_log_impl(&dword_1830D4000, v164, OS_LOG_TYPE_DEBUG, "%{public}s called with minimum bytes: %u, maximum bytes: %u, maximum frames: %u", (uint8_t *)buf, 0x1Eu);
    }
  }
  if (a4 >= a3 && a5)
  {
    *(void *)os_log_type_t type = 0;
    v237 = type;
    uint64_t v238 = 0x3802000000;
    v239 = __Block_byref_object_copy__3148;
    v240 = __Block_byref_object_dispose__3149;
    v241[0] = 0;
    v241[1] = v241;
    uint64_t v232 = 0;
    v233 = &v232;
    int v235 = 0;
    uint64_t v234 = 0x2000000000;
    uint64_t v228 = 0;
    v229 = &v228;
    int v231 = 0;
    uint64_t v230 = 0x2000000000;
    buf[0] = MEMORY[0x1E4F143A8];
    buf[1] = 0x40000000;
    buf[2] = ___ZL35__nw_protocol_fulfill_frame_requestP16nw_frame_array_sS0_bbjjjPjPb_block_invoke;
    unint64_t v255 = (unint64_t)&unk_1E523AD78;
    v256[0] = &v232;
    v256[1] = &v228;
    unint64_t v259 = __PAIR64__(a4, a5);
    v257 = (unsigned int *)&v222;
    uint64_t v258 = v14 + 16;
    LOWORD(v260) = 257;
    v256[2] = type;
    uint64_t v17 = *v16;
    do
    {
      if (!v17) {
        break;
      }
      uint64_t v18 = *(void *)(v17 + 32);
      char v19 = ((uint64_t (*)(void *))buf[2])(buf);
      uint64_t v17 = v18;
    }
    while ((v19 & 1) != 0);
    unsigned int v20 = *((_DWORD *)v229 + 6);
    uint64_t v21 = *((void *)v237 + 5);
    if (v20 < a3 && (v21 ? (BOOL v22 = v222 == 0) : (BOOL v22 = 0), v22))
    {
      if (gLogDatapath)
      {
        v202 = __nwlog_obj();
        if (os_log_type_enabled(v202, OS_LOG_TYPE_DEBUG))
        {
          int v203 = *((_DWORD *)v229 + 6);
          LODWORD(v252[0]) = 136446722;
          *(void *)((char *)v252 + 4) = "__nw_protocol_fulfill_frame_request";
          WORD2(v252[1]) = 1024;
          *(_DWORD *)((char *)&v252[1] + 6) = a3;
          WORD1(v252[2]) = 1024;
          HIDWORD(v252[2]) = v203;
          _os_log_impl(&dword_1830D4000, v202, OS_LOG_TYPE_DEBUG, "%{public}s could not meet minimum byte count %u with %u bytes from source array", (uint8_t *)v252, 0x18u);
        }
      }
      uint64_t v32 = v237;
      uint64_t v33 = v237 + 40;
      if (*v16)
      {
        **((void **)v237 + 6) = *v16;
        *(void *)(*(void *)(v14 + 16) + 40) = *((void *)v32 + 6);
        *((void *)v32 + 6) = *(void *)(v14 + 24);
        *(void *)(v14 + 16) = 0;
        *(void *)(v14 + 24) = v16;
      }
      if (*v33)
      {
        **(void **)(v14 + 24) = *v33;
        *(void *)(*((void *)v32 + 5) + 40) = *(void *)(v14 + 24);
        *(void *)(v14 + 24) = *((void *)v32 + 6);
        *((void *)v32 + 5) = 0;
        *((void *)v32 + 6) = v33;
      }
      unsigned int v20 = 0;
      BOOL v34 = v237;
      *((void *)v237 + 5) = 0;
      *((void *)v34 + 6) = v34 + 40;
      *((_DWORD *)v233 + 6) = 0;
      *((_DWORD *)v229 + 6) = 0;
    }
    else if (v21)
    {
      v252[0] = MEMORY[0x1E4F143A8];
      v252[1] = 0x40000000;
      v252[2] = ___ZL35__nw_protocol_fulfill_frame_requestP16nw_frame_array_sS0_bbjjjPjPb_block_invoke_27;
      v252[3] = &unk_1E523ADA0;
      char v253 = 1;
      v252[4] = type;
      v252[5] = a6;
      uint64_t v23 = *((void *)v237 + 5);
      do
      {
        if (!v23) {
          break;
        }
        uint64_t v24 = *(void *)(v23 + 32);
        char v25 = ((uint64_t (*)(void *))v252[2])(v252);
        uint64_t v23 = v24;
      }
      while ((v25 & 1) != 0);
    }
    if (gLogDatapath)
    {
      char v180 = __nwlog_obj();
      if (os_log_type_enabled(v180, OS_LOG_TYPE_DEBUG))
      {
        int v181 = *((_DWORD *)v233 + 6);
        int v182 = *((_DWORD *)v229 + 6);
        int v242 = 136447234;
        v243 = "__nw_protocol_fulfill_frame_request";
        __int16 v244 = 1024;
        int v245 = v181;
        __int16 v246 = 1024;
        int v247 = v182;
        __int16 v248 = 2048;
        uint64_t v249 = v14 + 16;
        __int16 v250 = 2048;
        v251 = a6;
        _os_log_impl(&dword_1830D4000, v180, OS_LOG_TYPE_DEBUG, "%{public}s moved (%u frames, %u bytes) from %p to %p", (uint8_t *)&v242, 0x2Cu);
      }
    }
    uint64_t v15 = *((unsigned int *)v233 + 6);
    _Block_object_dispose(&v228, 8);
    _Block_object_dispose(&v232, 8);
    _Block_object_dispose(type, 8);
    goto LABEL_60;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  LODWORD(buf[0]) = 136446978;
  *(void *)((char *)buf + 4) = "__nw_protocol_fulfill_frame_request";
  WORD2(buf[1]) = 1024;
  *(_DWORD *)((char *)&buf[1] + 6) = a4;
  WORD1(buf[2]) = 1024;
  HIDWORD(buf[2]) = a3;
  LOWORD(v255) = 1024;
  *(_DWORD *)((char *)&v255 + 2) = a5;
  os_log_type_t v26 = (char *)_os_log_send_and_compose_impl();
  type[0] = OS_LOG_TYPE_ERROR;
  LOBYTE(v252[0]) = 0;
  if (__nwlog_fault(v26, type, v252))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v27 = gLogObj;
      os_log_type_t v28 = type[0];
      if (os_log_type_enabled((os_log_t)gLogObj, type[0]))
      {
        LODWORD(buf[0]) = 136446978;
        *(void *)((char *)buf + 4) = "__nw_protocol_fulfill_frame_request";
        WORD2(buf[1]) = 1024;
        *(_DWORD *)((char *)&buf[1] + 6) = a4;
        WORD1(buf[2]) = 1024;
        HIDWORD(buf[2]) = a3;
        LOWORD(v255) = 1024;
        *(_DWORD *)((char *)&v255 + 2) = a5;
        uint64_t v29 = "%{public}s invalid values for frame request, max %u, min %u, max frame %u";
LABEL_55:
        uint64_t v35 = v27;
LABEL_56:
        _os_log_impl(&dword_1830D4000, v35, v28, v29, (uint8_t *)buf, 0x1Eu);
      }
    }
    else if (LOBYTE(v252[0]))
    {
      uint64_t v30 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v28 = type[0];
      os_log_t log = gLogObj;
      BOOL v31 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
      if (v30)
      {
        if (v31)
        {
          LODWORD(buf[0]) = 136447234;
          *(void *)((char *)buf + 4) = "__nw_protocol_fulfill_frame_request";
          WORD2(buf[1]) = 1024;
          *(_DWORD *)((char *)&buf[1] + 6) = a4;
          WORD1(buf[2]) = 1024;
          HIDWORD(buf[2]) = a3;
          LOWORD(v255) = 1024;
          *(_DWORD *)((char *)&v255 + 2) = a5;
          HIWORD(v255) = 2082;
          v256[0] = v30;
          _os_log_impl(&dword_1830D4000, log, v28, "%{public}s invalid values for frame request, max %u, min %u, max frame %u, dumping backtrace:%{public}s", (uint8_t *)buf, 0x28u);
        }
        free(v30);
        goto LABEL_57;
      }
      if (v31)
      {
        LODWORD(buf[0]) = 136446978;
        *(void *)((char *)buf + 4) = "__nw_protocol_fulfill_frame_request";
        WORD2(buf[1]) = 1024;
        *(_DWORD *)((char *)&buf[1] + 6) = a4;
        WORD1(buf[2]) = 1024;
        HIDWORD(buf[2]) = a3;
        LOWORD(v255) = 1024;
        *(_DWORD *)((char *)&v255 + 2) = a5;
        uint64_t v29 = "%{public}s invalid values for frame request, max %u, min %u, max frame %u, no backtrace";
        uint64_t v35 = log;
        goto LABEL_56;
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v27 = gLogObj;
      os_log_type_t v28 = type[0];
      if (os_log_type_enabled((os_log_t)gLogObj, type[0]))
      {
        LODWORD(buf[0]) = 136446978;
        *(void *)((char *)buf + 4) = "__nw_protocol_fulfill_frame_request";
        WORD2(buf[1]) = 1024;
        *(_DWORD *)((char *)&buf[1] + 6) = a4;
        WORD1(buf[2]) = 1024;
        HIDWORD(buf[2]) = a3;
        LOWORD(v255) = 1024;
        *(_DWORD *)((char *)&v255 + 2) = a5;
        uint64_t v29 = "%{public}s invalid values for frame request, max %u, min %u, max frame %u, backtrace limit exceeded";
        goto LABEL_55;
      }
    }
  }
LABEL_57:
  if (v26) {
    free(v26);
  }
  unsigned int v20 = 0;
  uint64_t v15 = 0;
LABEL_60:
  BOOL v36 = v227 >= v20;
  v227 -= v20;
  if (!v36)
  {
    if (gLogDatapath)
    {
      v183 = __nwlog_obj();
      if (os_log_type_enabled(v183, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(buf[0]) = 136446978;
        *(void *)((char *)buf + 4) = "nw_protocol_plugin_metadata_get_input_frames_internal";
        WORD2(buf[1]) = 2082;
        *(void *)((char *)&buf[1] + 6) = "minimum_bytes";
        HIWORD(buf[2]) = 2048;
        unint64_t v255 = v20;
        LOWORD(v256[0]) = 2048;
        *(void *)((char *)v256 + 2) = v227;
        _os_log_impl(&dword_1830D4000, v183, OS_LOG_TYPE_DEBUG, "%{public}s Underflow: %{public}s, decrement %llu, result %llu", (uint8_t *)buf, 0x2Au);
      }
    }
    unsigned int v227 = 0;
  }
  BOOL v36 = v226 >= v20;
  v226 -= v20;
  if (!v36)
  {
    if (gLogDatapath)
    {
      v184 = __nwlog_obj();
      if (os_log_type_enabled(v184, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(buf[0]) = 136446978;
        *(void *)((char *)buf + 4) = "nw_protocol_plugin_metadata_get_input_frames_internal";
        WORD2(buf[1]) = 2082;
        *(void *)((char *)&buf[1] + 6) = "maximum_bytes";
        HIWORD(buf[2]) = 2048;
        unint64_t v255 = v20;
        LOWORD(v256[0]) = 2048;
        *(void *)((char *)v256 + 2) = v226;
        _os_log_impl(&dword_1830D4000, v184, OS_LOG_TYPE_DEBUG, "%{public}s Underflow: %{public}s, decrement %llu, result %llu", (uint8_t *)buf, 0x2Au);
      }
    }
    unsigned int v226 = 0;
  }
  BOOL v36 = v225 >= v15;
  v225 -= v15;
  unsigned int v219 = v20;
  if (!v36)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    LODWORD(buf[0]) = 136446978;
    *(void *)((char *)buf + 4) = "nw_protocol_plugin_metadata_get_input_frames_internal";
    WORD2(buf[1]) = 2082;
    *(void *)((char *)&buf[1] + 6) = "maximum_frame_count";
    HIWORD(buf[2]) = 2048;
    unint64_t v255 = v15;
    LOWORD(v256[0]) = 2048;
    *(void *)((char *)v256 + 2) = v225;
    size_t v37 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v252[0]) = 0;
    if (__nwlog_fault(v37, type, v252))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v38 = gLogObj;
        os_log_type_t v39 = type[0];
        if (os_log_type_enabled((os_log_t)gLogObj, type[0]))
        {
          LODWORD(buf[0]) = 136446978;
          *(void *)((char *)buf + 4) = "nw_protocol_plugin_metadata_get_input_frames_internal";
          WORD2(buf[1]) = 2082;
          *(void *)((char *)&buf[1] + 6) = "maximum_frame_count";
          HIWORD(buf[2]) = 2048;
          unint64_t v255 = v15;
          LOWORD(v256[0]) = 2048;
          *(void *)((char *)v256 + 2) = v225;
          uint64_t v40 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu";
LABEL_78:
          os_log_type_t v43 = v38;
LABEL_79:
          _os_log_impl(&dword_1830D4000, v43, v39, v40, (uint8_t *)buf, 0x2Au);
        }
      }
      else if (LOBYTE(v252[0]))
      {
        uint64_t v41 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v39 = type[0];
        v215 = gLogObj;
        BOOL v42 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
        if (v41)
        {
          if (v42)
          {
            LODWORD(buf[0]) = 136447234;
            *(void *)((char *)buf + 4) = "nw_protocol_plugin_metadata_get_input_frames_internal";
            WORD2(buf[1]) = 2082;
            *(void *)((char *)&buf[1] + 6) = "maximum_frame_count";
            HIWORD(buf[2]) = 2048;
            unint64_t v255 = v15;
            LOWORD(v256[0]) = 2048;
            *(void *)((char *)v256 + 2) = v225;
            WORD1(v256[1]) = 2082;
            *(void *)((char *)&v256[1] + 4) = v41;
            _os_log_impl(&dword_1830D4000, v215, v39, "%{public}s Underflow: %{public}s, decrement %llu, result %llu, dumping backtrace:%{public}s", (uint8_t *)buf, 0x34u);
          }
          free(v41);
          goto LABEL_80;
        }
        if (v42)
        {
          LODWORD(buf[0]) = 136446978;
          *(void *)((char *)buf + 4) = "nw_protocol_plugin_metadata_get_input_frames_internal";
          WORD2(buf[1]) = 2082;
          *(void *)((char *)&buf[1] + 6) = "maximum_frame_count";
          HIWORD(buf[2]) = 2048;
          unint64_t v255 = v15;
          LOWORD(v256[0]) = 2048;
          *(void *)((char *)v256 + 2) = v225;
          uint64_t v40 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, no backtrace";
          os_log_type_t v43 = v215;
          goto LABEL_79;
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v38 = gLogObj;
        os_log_type_t v39 = type[0];
        if (os_log_type_enabled((os_log_t)gLogObj, type[0]))
        {
          LODWORD(buf[0]) = 136446978;
          *(void *)((char *)buf + 4) = "nw_protocol_plugin_metadata_get_input_frames_internal";
          WORD2(buf[1]) = 2082;
          *(void *)((char *)&buf[1] + 6) = "maximum_frame_count";
          HIWORD(buf[2]) = 2048;
          unint64_t v255 = v15;
          LOWORD(v256[0]) = 2048;
          *(void *)((char *)v256 + 2) = v225;
          uint64_t v40 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, backtrace limit exceeded";
          goto LABEL_78;
        }
      }
    }
LABEL_80:
    if (v37) {
      free(v37);
    }
    unsigned int v225 = 0;
    unsigned int v20 = v219;
  }
  BOOL v36 = __CFADD__(v223, v20);
  v223 += v20;
  if (!v36) {
    goto LABEL_101;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  unint64_t v44 = v20;
  LODWORD(buf[0]) = 136446978;
  *(void *)((char *)buf + 4) = "nw_protocol_plugin_metadata_get_input_frames_internal";
  WORD2(buf[1]) = 2082;
  *(void *)((char *)&buf[1] + 6) = "received_bytes";
  HIWORD(buf[2]) = 2048;
  unint64_t v255 = v20;
  LOWORD(v256[0]) = 2048;
  *(void *)((char *)v256 + 2) = v223;
  uint64_t v45 = (char *)_os_log_send_and_compose_impl();
  type[0] = OS_LOG_TYPE_ERROR;
  LOBYTE(v252[0]) = 0;
  if (__nwlog_fault(v45, type, v252))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v46 = gLogObj;
      os_log_type_t v47 = type[0];
      if (os_log_type_enabled((os_log_t)gLogObj, type[0]))
      {
        LODWORD(buf[0]) = 136446978;
        *(void *)((char *)buf + 4) = "nw_protocol_plugin_metadata_get_input_frames_internal";
        WORD2(buf[1]) = 2082;
        *(void *)((char *)&buf[1] + 6) = "received_bytes";
        HIWORD(buf[2]) = 2048;
        unint64_t v255 = v44;
        LOWORD(v256[0]) = 2048;
        *(void *)((char *)v256 + 2) = v223;
        uint64_t v48 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_96:
        uint64_t v51 = v46;
LABEL_97:
        _os_log_impl(&dword_1830D4000, v51, v47, v48, (uint8_t *)buf, 0x2Au);
      }
    }
    else if (LOBYTE(v252[0]))
    {
      uint64_t v49 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v47 = type[0];
      v216 = gLogObj;
      BOOL v50 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
      if (v49)
      {
        if (v50)
        {
          LODWORD(buf[0]) = 136447234;
          *(void *)((char *)buf + 4) = "nw_protocol_plugin_metadata_get_input_frames_internal";
          WORD2(buf[1]) = 2082;
          *(void *)((char *)&buf[1] + 6) = "received_bytes";
          HIWORD(buf[2]) = 2048;
          unint64_t v255 = v44;
          LOWORD(v256[0]) = 2048;
          *(void *)((char *)v256 + 2) = v223;
          WORD1(v256[1]) = 2082;
          *(void *)((char *)&v256[1] + 4) = v49;
          _os_log_impl(&dword_1830D4000, v216, v47, "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s", (uint8_t *)buf, 0x34u);
        }
        free(v49);
        goto LABEL_98;
      }
      if (v50)
      {
        LODWORD(buf[0]) = 136446978;
        *(void *)((char *)buf + 4) = "nw_protocol_plugin_metadata_get_input_frames_internal";
        WORD2(buf[1]) = 2082;
        *(void *)((char *)&buf[1] + 6) = "received_bytes";
        HIWORD(buf[2]) = 2048;
        unint64_t v255 = v44;
        LOWORD(v256[0]) = 2048;
        *(void *)((char *)v256 + 2) = v223;
        uint64_t v48 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
        uint64_t v51 = v216;
        goto LABEL_97;
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v46 = gLogObj;
      os_log_type_t v47 = type[0];
      if (os_log_type_enabled((os_log_t)gLogObj, type[0]))
      {
        LODWORD(buf[0]) = 136446978;
        *(void *)((char *)buf + 4) = "nw_protocol_plugin_metadata_get_input_frames_internal";
        WORD2(buf[1]) = 2082;
        *(void *)((char *)&buf[1] + 6) = "received_bytes";
        HIWORD(buf[2]) = 2048;
        unint64_t v255 = v44;
        LOWORD(v256[0]) = 2048;
        *(void *)((char *)v256 + 2) = v223;
        uint64_t v48 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
        goto LABEL_96;
      }
    }
  }
LABEL_98:
  if (v45) {
    free(v45);
  }
  unsigned int v223 = -1;
  unsigned int v20 = v219;
LABEL_101:
  unsigned int v224 = v15;
  if (v222) {
    unsigned int v227 = 0;
  }
  if (gLogDatapath)
  {
    os_log_type_t v165 = __nwlog_obj();
    if (os_log_type_enabled(v165, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(buf[0]) = 136446722;
      *(void *)((char *)buf + 4) = "nw_protocol_plugin_metadata_get_input_frames_internal";
      WORD2(buf[1]) = 1024;
      *(_DWORD *)((char *)&buf[1] + 6) = v20;
      WORD1(buf[2]) = 1024;
      HIDWORD(buf[2]) = v15;
      _os_log_impl(&dword_1830D4000, v165, OS_LOG_TYPE_DEBUG, "%{public}s moved (%u bytes, %u frames) from input_frames_pending_delivery", (uint8_t *)buf, 0x18u);
    }
  }
  if (v15 && (!v226 || !v225))
  {
    if (!gLogDatapath) {
      goto LABEL_146;
    }
    os_log_type_t v62 = __nwlog_obj();
    if (!os_log_type_enabled(v62, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_146;
    }
    LODWORD(buf[0]) = 136446210;
    *(void *)((char *)buf + 4) = "nw_protocol_plugin_metadata_get_input_frames_internal";
    uint64_t v63 = "%{public}s returning frames only from input_frames_pending_delivery";
LABEL_462:
    _os_log_impl(&dword_1830D4000, v62, OS_LOG_TYPE_DEBUG, v63, (uint8_t *)buf, 0xCu);
    goto LABEL_146;
  }
LABEL_107:
  if (*(void *)v14)
  {
    if (gLogDatapath)
    {
      os_log_type_t v169 = __nwlog_obj();
      if (os_log_type_enabled(v169, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(buf[0]) = 136446210;
        *(void *)((char *)buf + 4) = "nw_protocol_plugin_metadata_get_input_frames_internal";
        _os_log_impl(&dword_1830D4000, v169, OS_LOG_TYPE_DEBUG, "%{public}s resuming saved input frames", (uint8_t *)buf, 0xCu);
      }
    }
    uint64_t v52 = *(void *)(v14 + 96);
    if (v52)
    {
      *(void *)os_log_type_t type = 0;
      v237 = type;
      LODWORD(v239) = 0;
      uint64_t v238 = 0x2000000000;
      buf[0] = MEMORY[0x1E4F143A8];
      buf[1] = 0x40000000;
      buf[2] = __nw_protocol_plugin_metadata_process_frames_block_invoke;
      unint64_t v255 = (unint64_t)&unk_1E523ADF0;
      v256[2] = v14;
      v257 = &v226;
      char v265 = 1;
      uint64_t v258 = v14;
      unint64_t v259 = (unint64_t)a6;
      v260 = &v227;
      v261 = &v223;
      v256[0] = type;
      v256[1] = &v225;
      v262 = a1;
      uint64_t v263 = v52;
      uint64_t v264 = a2;
      uint64_t v53 = *(void *)v14;
      do
      {
        if (!v53) {
          break;
        }
        uint64_t v54 = *(void *)(v53 + 32);
        char v55 = ((uint64_t (*)(void *))buf[2])(buf);
        uint64_t v53 = v54;
      }
      while ((v55 & 1) != 0);
      unsigned int v56 = *((_DWORD *)v237 + 6);
      _Block_object_dispose(type, 8);
      goto LABEL_114;
    }
    __nwlog_obj();
    LODWORD(buf[0]) = 136446210;
    *(void *)((char *)buf + 4) = "nw_protocol_plugin_metadata_process_frames";
    os_log_type_t v170 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v252[0]) = 0;
    if (__nwlog_fault(v170, type, v252))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v171 = __nwlog_obj();
        os_log_type_t v172 = type[0];
        if (os_log_type_enabled(v171, type[0]))
        {
          LODWORD(buf[0]) = 136446210;
          *(void *)((char *)buf + 4) = "nw_protocol_plugin_metadata_process_frames";
          unsigned int v173 = "%{public}s called with null processor";
LABEL_511:
          _os_log_impl(&dword_1830D4000, v171, v172, v173, (uint8_t *)buf, 0xCu);
        }
      }
      else if (LOBYTE(v252[0]))
      {
        int v187 = (char *)__nw_create_backtrace_string();
        os_log_type_t v171 = __nwlog_obj();
        os_log_type_t v172 = type[0];
        BOOL v188 = os_log_type_enabled(v171, type[0]);
        if (v187)
        {
          if (v188)
          {
            LODWORD(buf[0]) = 136446466;
            *(void *)((char *)buf + 4) = "nw_protocol_plugin_metadata_process_frames";
            WORD2(buf[1]) = 2082;
            *(void *)((char *)&buf[1] + 6) = v187;
            _os_log_impl(&dword_1830D4000, v171, v172, "%{public}s called with null processor, dumping backtrace:%{public}s", (uint8_t *)buf, 0x16u);
          }
          free(v187);
          goto LABEL_512;
        }
        if (v188)
        {
          LODWORD(buf[0]) = 136446210;
          *(void *)((char *)buf + 4) = "nw_protocol_plugin_metadata_process_frames";
          unsigned int v173 = "%{public}s called with null processor, no backtrace";
          goto LABEL_511;
        }
      }
      else
      {
        os_log_type_t v171 = __nwlog_obj();
        os_log_type_t v172 = type[0];
        if (os_log_type_enabled(v171, type[0]))
        {
          LODWORD(buf[0]) = 136446210;
          *(void *)((char *)buf + 4) = "nw_protocol_plugin_metadata_process_frames";
          unsigned int v173 = "%{public}s called with null processor, backtrace limit exceeded";
          goto LABEL_511;
        }
      }
    }
LABEL_512:
    if (v170) {
      free(v170);
    }
    unsigned int v56 = 0;
LABEL_114:
    BOOL v36 = __CFADD__(v15, v56);
    uint64_t v15 = v15 + v56;
    unsigned int v224 = v15;
    if (!v36) {
      goto LABEL_120;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    LODWORD(buf[0]) = 136446978;
    unint64_t v57 = v56;
    *(void *)((char *)buf + 4) = "nw_protocol_plugin_metadata_get_input_frames_internal";
    WORD2(buf[1]) = 2082;
    *(void *)((char *)&buf[1] + 6) = "count";
    HIWORD(buf[2]) = 2048;
    unint64_t v255 = v56;
    LOWORD(v256[0]) = 2048;
    *(void *)((char *)v256 + 2) = v15;
    uint64_t v58 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v252[0]) = 0;
    if (__nwlog_fault(v58, type, v252))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v59 = gLogObj;
        os_log_type_t v60 = type[0];
        if (!os_log_type_enabled((os_log_t)gLogObj, type[0])) {
          goto LABEL_135;
        }
        LODWORD(buf[0]) = 136446978;
        *(void *)((char *)buf + 4) = "nw_protocol_plugin_metadata_get_input_frames_internal";
        WORD2(buf[1]) = 2082;
        *(void *)((char *)&buf[1] + 6) = "count";
        HIWORD(buf[2]) = 2048;
        unint64_t v255 = v57;
        LOWORD(v256[0]) = 2048;
        *(void *)((char *)v256 + 2) = v15;
        uint64_t v61 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_133:
        BOOL v66 = v59;
LABEL_134:
        _os_log_impl(&dword_1830D4000, v66, v60, v61, (uint8_t *)buf, 0x2Au);
        goto LABEL_135;
      }
      if (!LOBYTE(v252[0]))
      {
        uint64_t v59 = __nwlog_obj();
        os_log_type_t v60 = type[0];
        if (!os_log_type_enabled(v59, type[0])) {
          goto LABEL_135;
        }
        LODWORD(buf[0]) = 136446978;
        *(void *)((char *)buf + 4) = "nw_protocol_plugin_metadata_get_input_frames_internal";
        WORD2(buf[1]) = 2082;
        *(void *)((char *)&buf[1] + 6) = "count";
        HIWORD(buf[2]) = 2048;
        unint64_t v255 = v57;
        LOWORD(v256[0]) = 2048;
        *(void *)((char *)v256 + 2) = v15;
        uint64_t v61 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
        goto LABEL_133;
      }
      int v64 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v60 = type[0];
      loga = gLogObj;
      BOOL v65 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
      if (v64)
      {
        if (v65)
        {
          LODWORD(buf[0]) = 136447234;
          *(void *)((char *)buf + 4) = "nw_protocol_plugin_metadata_get_input_frames_internal";
          WORD2(buf[1]) = 2082;
          *(void *)((char *)&buf[1] + 6) = "count";
          HIWORD(buf[2]) = 2048;
          unint64_t v255 = v57;
          LOWORD(v256[0]) = 2048;
          *(void *)((char *)v256 + 2) = v15;
          WORD1(v256[1]) = 2082;
          *(void *)((char *)&v256[1] + 4) = v64;
          _os_log_impl(&dword_1830D4000, loga, v60, "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s", (uint8_t *)buf, 0x34u);
        }
        free(v64);
      }
      else if (v65)
      {
        LODWORD(buf[0]) = 136446978;
        *(void *)((char *)buf + 4) = "nw_protocol_plugin_metadata_get_input_frames_internal";
        WORD2(buf[1]) = 2082;
        *(void *)((char *)&buf[1] + 6) = "count";
        HIWORD(buf[2]) = 2048;
        unint64_t v255 = v57;
        LOWORD(v256[0]) = 2048;
        *(void *)((char *)v256 + 2) = v15;
        uint64_t v61 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
        BOOL v66 = loga;
        goto LABEL_134;
      }
    }
LABEL_135:
    if (v58) {
      free(v58);
    }
    uint64_t v15 = 0xFFFFFFFFLL;
    unsigned int v224 = -1;
    if (*(unsigned char *)(v14 + 140) == 2) {
      goto LABEL_146;
    }
    goto LABEL_138;
  }
LABEL_120:
  if (*(unsigned char *)(v14 + 140) == 2)
  {
LABEL_146:
    nw_protocol_plugin_metadata_report_transfer(v14, (uint64_t)a1, *(void *)(v14 + 48), v223, 1);
    goto LABEL_147;
  }
  if (!v15) {
    goto LABEL_140;
  }
LABEL_138:
  if (!v226 || !v225)
  {
    if (!gLogDatapath) {
      goto LABEL_146;
    }
    os_log_type_t v62 = __nwlog_obj();
    if (!os_log_type_enabled(v62, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_146;
    }
    LODWORD(buf[0]) = 136446210;
    *(void *)((char *)buf + 4) = "nw_protocol_plugin_metadata_get_input_frames_internal";
    uint64_t v63 = "%{public}s returning frames from input_frames_pending_delivery and saved input frames";
    goto LABEL_462;
  }
LABEL_140:
  if (!*(void *)v14)
  {
    nw_protocol_plugin_metadata_get_and_process_frames(v14, a1, a2, a3, &v227, &v226, &v225, &v224, &v223, *(void *)(v14 + 96), a6);
    uint64_t v15 = v224;
    goto LABEL_147;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  LODWORD(buf[0]) = 136446210;
  *(void *)((char *)buf + 4) = "nw_protocol_plugin_metadata_get_input_frames_internal";
  uint64_t v67 = (char *)_os_log_send_and_compose_impl();
  type[0] = OS_LOG_TYPE_ERROR;
  LOBYTE(v252[0]) = 0;
  if (!__nwlog_fault(v67, type, v252)) {
    goto LABEL_252;
  }
  if (type[0] == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v68 = gLogObj;
    os_log_type_t v69 = type[0];
    if (!os_log_type_enabled((os_log_t)gLogObj, type[0])) {
      goto LABEL_252;
    }
    LODWORD(buf[0]) = 136446210;
    *(void *)((char *)buf + 4) = "nw_protocol_plugin_metadata_get_input_frames_internal";
    uint64_t v70 = "%{public}s Getting new input from below, but we still have saved input frames that we didn't use";
    goto LABEL_251;
  }
  if (!LOBYTE(v252[0]))
  {
    uint64_t v68 = __nwlog_obj();
    os_log_type_t v69 = type[0];
    if (!os_log_type_enabled(v68, type[0])) {
      goto LABEL_252;
    }
    LODWORD(buf[0]) = 136446210;
    *(void *)((char *)buf + 4) = "nw_protocol_plugin_metadata_get_input_frames_internal";
    uint64_t v70 = "%{public}s Getting new input from below, but we still have saved input frames that we didn't use, backtrace limit exceeded";
    goto LABEL_251;
  }
  os_log_type_t v106 = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  uint64_t v68 = gLogObj;
  os_log_type_t v69 = type[0];
  BOOL v107 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
  if (v106)
  {
    if (v107)
    {
      LODWORD(buf[0]) = 136446466;
      *(void *)((char *)buf + 4) = "nw_protocol_plugin_metadata_get_input_frames_internal";
      WORD2(buf[1]) = 2082;
      *(void *)((char *)&buf[1] + 6) = v106;
      _os_log_impl(&dword_1830D4000, v68, v69, "%{public}s Getting new input from below, but we still have saved input frames that we didn't use, dumping backtrace:%{public}s", (uint8_t *)buf, 0x16u);
    }
    free(v106);
    goto LABEL_252;
  }
  if (v107)
  {
    LODWORD(buf[0]) = 136446210;
    *(void *)((char *)buf + 4) = "nw_protocol_plugin_metadata_get_input_frames_internal";
    uint64_t v70 = "%{public}s Getting new input from below, but we still have saved input frames that we didn't use, no backtrace";
LABEL_251:
    _os_log_impl(&dword_1830D4000, v68, v69, v70, (uint8_t *)buf, 0xCu);
  }
LABEL_252:
  if (v67) {
    free(v67);
  }
LABEL_147:
  *(unsigned char *)(v7 + 142) &= ~2u;
  uint64_t v71 = *(void *)(v6 + 88);
  if (v71) {
    nw_protocol_plugin_retry_set_getting_input_frames(v71, (uint64_t)a1, 0);
  }
  if (*(unsigned char *)(v7 + 140) != 2)
  {
    os_log_type_t v72 = a1;
    if (!*(_DWORD *)(v7 + 136)) {
      goto LABEL_165;
    }
    *(_DWORD *)(v7 + 136) = 0;
    uint64_t v73 = a1[4];
    uint64_t v74 = (void *)a1[5];
    if (v74 == &nw_protocol_ref_counted_handle)
    {
      uint64_t v75 = a1[11];
      if (v75) {
        a1[11] = v75 + 1;
      }
    }
    if (v73)
    {
      char v76 = *(void **)(v73 + 40);
      if (v76 == &nw_protocol_ref_counted_handle)
      {
        uint64_t v77 = *(void *)(v73 + 88);
        if (v77) {
          *(void *)(v73 + 88) = v77 + 1;
        }
      }
      uint64_t v78 = a1[3];
      if (v78)
      {
        uint64_t v79 = *(void (**)(void *, uint64_t))(v78 + 56);
        if (v79)
        {
          v79(a1, v73);
LABEL_161:
          os_log_type_t v72 = a1;
          if (v76 != &nw_protocol_ref_counted_handle
            || *(_UNKNOWN **)(v73 + 40) != &nw_protocol_ref_counted_handle
            || (uint64_t v102 = *(void *)(v73 + 88)) == 0
            || (uint64_t v103 = v102 - 1, (*(void *)(v73 + 88) = v103) != 0))
          {
LABEL_163:
            if (v74 == &nw_protocol_ref_counted_handle && (_UNKNOWN *)v72[5] == &nw_protocol_ref_counted_handle)
            {
              uint64_t v97 = v72[11];
              if (v97)
              {
                uint64_t v98 = v97 - 1;
                v72[11] = v98;
                if (!v98)
                {
                  uint64_t v99 = (void (**)(void))v72[8];
                  if (v99)
                  {
                    v72[8] = 0;
                    v99[2](v99);
                    _Block_release(v99);
                    os_log_type_t v72 = a1;
                  }
                  uint64_t v100 = v72;
                  if (v72[9])
                  {
                    uint64_t v101 = (const void *)v72[8];
                    if (v101) {
                      _Block_release(v101);
                    }
                  }
                  free(v100);
                  os_log_type_t v72 = v100;
                }
              }
            }
LABEL_165:
            char v80 = *(unsigned char *)(v7 + 142);
            if ((v80 & 4) == 0 || *(void *)v7 || *(void *)(v7 + 16)) {
              goto LABEL_183;
            }
            *(unsigned char *)(v7 + 142) = v80 & 0xFB;
            uint64_t v81 = v72[4];
            BOOL v82 = (void *)v72[5];
            if (v82 == &nw_protocol_ref_counted_handle)
            {
              uint64_t v83 = v72[11];
              if (v83) {
                v72[11] = v83 + 1;
              }
            }
            if (v81)
            {
              uint64_t v84 = *(void **)(v81 + 40);
              if (v84 == &nw_protocol_ref_counted_handle)
              {
                uint64_t v85 = *(void *)(v81 + 88);
                if (v85) {
                  *(void *)(v81 + 88) = v85 + 1;
                }
              }
              uint64_t v86 = v72[3];
              if (v86)
              {
                uint64_t v87 = *(void (**)(void *, uint64_t))(v86 + 184);
                if (v87)
                {
                  v87(v72, v81);
LABEL_178:
                  os_log_type_t v72 = a1;
                  if (v84 != &nw_protocol_ref_counted_handle) {
                    goto LABEL_180;
                  }
                  if (*(_UNKNOWN **)(v81 + 40) != &nw_protocol_ref_counted_handle) {
                    goto LABEL_180;
                  }
                  uint64_t v122 = *(void *)(v81 + 88);
                  if (!v122) {
                    goto LABEL_180;
                  }
                  uint64_t v123 = v122 - 1;
                  *(void *)(v81 + 88) = v123;
                  if (v123) {
                    goto LABEL_180;
                  }
                  os_log_type_t v124 = *(void (***)(void))(v81 + 64);
                  if (v124)
                  {
                    *(void *)(v81 + 64) = 0;
                    v124[2](v124);
                    _Block_release(v124);
                  }
                  if (*(unsigned char *)(v81 + 72))
                  {
                    v125 = *(const void **)(v81 + 64);
                    if (v125) {
                      _Block_release(v125);
                    }
                  }
                  free((void *)v81);
LABEL_270:
                  os_log_type_t v72 = a1;
LABEL_180:
                  if (v82 == &nw_protocol_ref_counted_handle && (_UNKNOWN *)v72[5] == &nw_protocol_ref_counted_handle)
                  {
                    uint64_t v117 = v72[11];
                    if (v117)
                    {
                      uint64_t v118 = v117 - 1;
                      v72[11] = v118;
                      if (!v118)
                      {
                        char v119 = (void (**)(void))v72[8];
                        if (v119)
                        {
                          v72[8] = 0;
                          v119[2](v119);
                          _Block_release(v119);
                          os_log_type_t v72 = a1;
                        }
                        uint64_t v120 = v72;
                        if (v72[9])
                        {
                          uint64_t v121 = (const void *)v72[8];
                          if (v121) {
                            _Block_release(v121);
                          }
                        }
                        free(v120);
                        os_log_type_t v72 = v120;
                      }
                    }
                  }
                  char v80 = *(unsigned char *)(v7 + 142);
LABEL_183:
                  if ((v80 & 8) == 0) {
                    return v15;
                  }
                  *(unsigned char *)(v7 + 142) = v80 & 0xF7;
                  uint64_t v89 = v72[4];
                  uint64_t v88 = (void *)v72[5];
                  if (v88 == &nw_protocol_ref_counted_handle)
                  {
                    uint64_t v90 = v72[11];
                    if (v90) {
                      v72[11] = v90 + 1;
                    }
                  }
                  if (v89)
                  {
                    uint32_t v91 = *(void **)(v89 + 40);
                    if (v91 == &nw_protocol_ref_counted_handle)
                    {
                      uint64_t v92 = *(void *)(v89 + 88);
                      if (v92) {
                        *(void *)(v89 + 88) = v92 + 1;
                      }
                    }
                    uint64_t v93 = v72[3];
                    if (v93)
                    {
                      os_log_type_t v94 = *(void (**)(void *, uint64_t))(v93 + 48);
                      if (v94)
                      {
                        v94(v72, v89);
LABEL_194:
                        BOOL v95 = a1;
                        if (v91 != &nw_protocol_ref_counted_handle
                          || *(_UNKNOWN **)(v89 + 40) != &nw_protocol_ref_counted_handle
                          || (uint64_t v113 = *(void *)(v89 + 88)) == 0
                          || (uint64_t v114 = v113 - 1, (*(void *)(v89 + 88) = v114) != 0))
                        {
LABEL_196:
                          if (v88 == &nw_protocol_ref_counted_handle
                            && (_UNKNOWN *)v95[5] == &nw_protocol_ref_counted_handle)
                          {
                            uint64_t v108 = v95[11];
                            if (v108)
                            {
                              uint64_t v109 = v108 - 1;
                              v95[11] = v109;
                              if (!v109)
                              {
                                os_log_type_t v110 = (void (**)(void))v95[8];
                                if (v110)
                                {
                                  v95[8] = 0;
                                  v110[2](v110);
                                  _Block_release(v110);
                                  BOOL v95 = a1;
                                }
                                BOOL v111 = v95;
                                if (v95[9])
                                {
                                  __int16 v112 = (const void *)v95[8];
                                  if (v112) {
                                    _Block_release(v112);
                                  }
                                }
                                free(v111);
                              }
                            }
                          }
                          return v15;
                        }
                        v115 = *(void (***)(void))(v89 + 64);
                        if (v115)
                        {
                          *(void *)(v89 + 64) = 0;
                          v115[2](v115);
                          _Block_release(v115);
                        }
                        if (*(unsigned char *)(v89 + 72))
                        {
                          uint64_t v116 = *(const void **)(v89 + 64);
                          if (v116) {
                            _Block_release(v116);
                          }
                        }
LABEL_237:
                        free((void *)v89);
LABEL_238:
                        BOOL v95 = a1;
                        goto LABEL_196;
                      }
                    }
                    char v148 = (const char **)v72;
                    __nwlog_obj();
                    os_log_type_t v149 = v148[2];
                    LODWORD(buf[0]) = 136446722;
                    *(void *)((char *)buf + 4) = "__nw_protocol_disconnected";
                    if (!v149) {
                      os_log_type_t v149 = "invalid";
                    }
                    WORD2(buf[1]) = 2082;
                    *(void *)((char *)&buf[1] + 6) = v149;
                    HIWORD(buf[2]) = 2048;
                    unint64_t v255 = (unint64_t)v148;
                    os_log_type_t v150 = (char *)_os_log_send_and_compose_impl();
                    type[0] = OS_LOG_TYPE_ERROR;
                    LOBYTE(v252[0]) = 0;
                    if (__nwlog_fault(v150, type, v252))
                    {
                      if (type[0] == OS_LOG_TYPE_FAULT)
                      {
                        v151 = __nwlog_obj();
                        os_log_type_t v152 = type[0];
                        if (!os_log_type_enabled(v151, type[0])) {
                          goto LABEL_483;
                        }
                        __int16 v153 = (const char *)a1[2];
                        if (!v153) {
                          __int16 v153 = "invalid";
                        }
                        LODWORD(buf[0]) = 136446722;
                        *(void *)((char *)buf + 4) = "__nw_protocol_disconnected";
                        WORD2(buf[1]) = 2082;
                        *(void *)((char *)&buf[1] + 6) = v153;
                        HIWORD(buf[2]) = 2048;
                        unint64_t v255 = (unint64_t)a1;
                        v154 = "%{public}s protocol %{public}s (%p) has invalid disconnected callback";
                        goto LABEL_482;
                      }
                      if (!LOBYTE(v252[0]))
                      {
                        v151 = __nwlog_obj();
                        os_log_type_t v152 = type[0];
                        if (!os_log_type_enabled(v151, type[0])) {
                          goto LABEL_483;
                        }
                        v192 = (const char *)a1[2];
                        if (!v192) {
                          v192 = "invalid";
                        }
                        LODWORD(buf[0]) = 136446722;
                        *(void *)((char *)buf + 4) = "__nw_protocol_disconnected";
                        WORD2(buf[1]) = 2082;
                        *(void *)((char *)&buf[1] + 6) = v192;
                        HIWORD(buf[2]) = 2048;
                        unint64_t v255 = (unint64_t)a1;
                        v154 = "%{public}s protocol %{public}s (%p) has invalid disconnected callback, backtrace limit exceeded";
                        goto LABEL_482;
                      }
                      v177 = (char *)__nw_create_backtrace_string();
                      v151 = __nwlog_obj();
                      os_log_type_t v152 = type[0];
                      BOOL v178 = os_log_type_enabled(v151, type[0]);
                      if (v177)
                      {
                        if (v178)
                        {
                          v179 = (const char *)a1[2];
                          if (!v179) {
                            v179 = "invalid";
                          }
                          LODWORD(buf[0]) = 136446978;
                          *(void *)((char *)buf + 4) = "__nw_protocol_disconnected";
                          WORD2(buf[1]) = 2082;
                          *(void *)((char *)&buf[1] + 6) = v179;
                          HIWORD(buf[2]) = 2048;
                          unint64_t v255 = (unint64_t)a1;
                          LOWORD(v256[0]) = 2082;
                          *(void *)((char *)v256 + 2) = v177;
                          _os_log_impl(&dword_1830D4000, v151, v152, "%{public}s protocol %{public}s (%p) has invalid disconnected callback, dumping backtrace:%{public}s", (uint8_t *)buf, 0x2Au);
                        }
                        free(v177);
                        goto LABEL_483;
                      }
                      if (v178)
                      {
                        v201 = (const char *)a1[2];
                        if (!v201) {
                          v201 = "invalid";
                        }
                        LODWORD(buf[0]) = 136446722;
                        *(void *)((char *)buf + 4) = "__nw_protocol_disconnected";
                        WORD2(buf[1]) = 2082;
                        *(void *)((char *)&buf[1] + 6) = v201;
                        HIWORD(buf[2]) = 2048;
                        unint64_t v255 = (unint64_t)a1;
                        v154 = "%{public}s protocol %{public}s (%p) has invalid disconnected callback, no backtrace";
LABEL_482:
                        _os_log_impl(&dword_1830D4000, v151, v152, v154, (uint8_t *)buf, 0x20u);
                      }
                    }
LABEL_483:
                    if (v150) {
                      free(v150);
                    }
                    goto LABEL_194;
                  }
                  __nwlog_obj();
                  LODWORD(buf[0]) = 136446210;
                  *(void *)((char *)buf + 4) = "__nw_protocol_disconnected";
                  uint64_t v89 = _os_log_send_and_compose_impl();
                  type[0] = OS_LOG_TYPE_ERROR;
                  LOBYTE(v252[0]) = 0;
                  if (__nwlog_fault((const char *)v89, type, v252))
                  {
                    if (type[0] == OS_LOG_TYPE_FAULT)
                    {
                      v174 = __nwlog_obj();
                      os_log_type_t v175 = type[0];
                      if (!os_log_type_enabled(v174, type[0])) {
                        goto LABEL_518;
                      }
                      LODWORD(buf[0]) = 136446210;
                      *(void *)((char *)buf + 4) = "__nw_protocol_disconnected";
                      v176 = "%{public}s called with null other_protocol";
                      goto LABEL_517;
                    }
                    if (!LOBYTE(v252[0]))
                    {
                      v174 = __nwlog_obj();
                      os_log_type_t v175 = type[0];
                      if (!os_log_type_enabled(v174, type[0])) {
                        goto LABEL_518;
                      }
                      LODWORD(buf[0]) = 136446210;
                      *(void *)((char *)buf + 4) = "__nw_protocol_disconnected";
                      v176 = "%{public}s called with null other_protocol, backtrace limit exceeded";
                      goto LABEL_517;
                    }
                    uint64_t v189 = (char *)__nw_create_backtrace_string();
                    v174 = __nwlog_obj();
                    os_log_type_t v175 = type[0];
                    BOOL v190 = os_log_type_enabled(v174, type[0]);
                    if (v189)
                    {
                      if (v190)
                      {
                        LODWORD(buf[0]) = 136446466;
                        *(void *)((char *)buf + 4) = "__nw_protocol_disconnected";
                        WORD2(buf[1]) = 2082;
                        *(void *)((char *)&buf[1] + 6) = v189;
                        _os_log_impl(&dword_1830D4000, v174, v175, "%{public}s called with null other_protocol, dumping backtrace:%{public}s", (uint8_t *)buf, 0x16u);
                      }
                      free(v189);
                      if (!v89) {
                        goto LABEL_238;
                      }
                      goto LABEL_237;
                    }
                    if (v190)
                    {
                      LODWORD(buf[0]) = 136446210;
                      *(void *)((char *)buf + 4) = "__nw_protocol_disconnected";
                      v176 = "%{public}s called with null other_protocol, no backtrace";
LABEL_517:
                      _os_log_impl(&dword_1830D4000, v174, v175, v176, (uint8_t *)buf, 0xCu);
                    }
                  }
LABEL_518:
                  if (!v89) {
                    goto LABEL_238;
                  }
                  goto LABEL_237;
                }
              }
              v194 = (const char **)v72;
              __nwlog_obj();
              v195 = v194[2];
              LODWORD(buf[0]) = 136446722;
              *(void *)((char *)buf + 4) = "__nw_protocol_input_finished";
              if (!v195) {
                v195 = "invalid";
              }
              WORD2(buf[1]) = 2082;
              *(void *)((char *)&buf[1] + 6) = v195;
              HIWORD(buf[2]) = 2048;
              unint64_t v255 = (unint64_t)v194;
              v196 = (char *)_os_log_send_and_compose_impl();
              type[0] = OS_LOG_TYPE_ERROR;
              LOBYTE(v252[0]) = 0;
              if (__nwlog_fault(v196, type, v252))
              {
                if (type[0] == OS_LOG_TYPE_FAULT)
                {
                  v197 = __nwlog_obj();
                  os_log_type_t v198 = type[0];
                  if (!os_log_type_enabled(v197, type[0])) {
                    goto LABEL_534;
                  }
                  v199 = (const char *)a1[2];
                  if (!v199) {
                    v199 = "invalid";
                  }
                  LODWORD(buf[0]) = 136446722;
                  *(void *)((char *)buf + 4) = "__nw_protocol_input_finished";
                  WORD2(buf[1]) = 2082;
                  *(void *)((char *)&buf[1] + 6) = v199;
                  HIWORD(buf[2]) = 2048;
                  unint64_t v255 = (unint64_t)a1;
                  v200 = "%{public}s protocol %{public}s (%p) has invalid input_finished callback";
                  goto LABEL_533;
                }
                if (!LOBYTE(v252[0]))
                {
                  v197 = __nwlog_obj();
                  os_log_type_t v198 = type[0];
                  if (!os_log_type_enabled(v197, type[0])) {
                    goto LABEL_534;
                  }
                  v213 = (const char *)a1[2];
                  if (!v213) {
                    v213 = "invalid";
                  }
                  LODWORD(buf[0]) = 136446722;
                  *(void *)((char *)buf + 4) = "__nw_protocol_input_finished";
                  WORD2(buf[1]) = 2082;
                  *(void *)((char *)&buf[1] + 6) = v213;
                  HIWORD(buf[2]) = 2048;
                  unint64_t v255 = (unint64_t)a1;
                  v200 = "%{public}s protocol %{public}s (%p) has invalid input_finished callback, backtrace limit exceeded";
                  goto LABEL_533;
                }
                v208 = (char *)__nw_create_backtrace_string();
                v197 = __nwlog_obj();
                os_log_type_t v198 = type[0];
                BOOL v209 = os_log_type_enabled(v197, type[0]);
                if (v208)
                {
                  if (v209)
                  {
                    v210 = (const char *)a1[2];
                    if (!v210) {
                      v210 = "invalid";
                    }
                    LODWORD(buf[0]) = 136446978;
                    *(void *)((char *)buf + 4) = "__nw_protocol_input_finished";
                    WORD2(buf[1]) = 2082;
                    *(void *)((char *)&buf[1] + 6) = v210;
                    HIWORD(buf[2]) = 2048;
                    unint64_t v255 = (unint64_t)a1;
                    LOWORD(v256[0]) = 2082;
                    *(void *)((char *)v256 + 2) = v208;
                    _os_log_impl(&dword_1830D4000, v197, v198, "%{public}s protocol %{public}s (%p) has invalid input_finished callback, dumping backtrace:%{public}s", (uint8_t *)buf, 0x2Au);
                  }
                  free(v208);
                  goto LABEL_534;
                }
                if (v209)
                {
                  v214 = (const char *)a1[2];
                  if (!v214) {
                    v214 = "invalid";
                  }
                  LODWORD(buf[0]) = 136446722;
                  *(void *)((char *)buf + 4) = "__nw_protocol_input_finished";
                  WORD2(buf[1]) = 2082;
                  *(void *)((char *)&buf[1] + 6) = v214;
                  HIWORD(buf[2]) = 2048;
                  unint64_t v255 = (unint64_t)a1;
                  v200 = "%{public}s protocol %{public}s (%p) has invalid input_finished callback, no backtrace";
LABEL_533:
                  _os_log_impl(&dword_1830D4000, v197, v198, v200, (uint8_t *)buf, 0x20u);
                }
              }
LABEL_534:
              if (v196) {
                free(v196);
              }
              goto LABEL_178;
            }
            __nwlog_obj();
            LODWORD(buf[0]) = 136446210;
            *(void *)((char *)buf + 4) = "__nw_protocol_input_finished";
            v204 = (char *)_os_log_send_and_compose_impl();
            type[0] = OS_LOG_TYPE_ERROR;
            LOBYTE(v252[0]) = 0;
            if (__nwlog_fault(v204, type, v252))
            {
              if (type[0] == OS_LOG_TYPE_FAULT)
              {
                v205 = __nwlog_obj();
                os_log_type_t v206 = type[0];
                if (!os_log_type_enabled(v205, type[0])) {
                  goto LABEL_541;
                }
                LODWORD(buf[0]) = 136446210;
                *(void *)((char *)buf + 4) = "__nw_protocol_input_finished";
                v207 = "%{public}s called with null other_protocol";
                goto LABEL_540;
              }
              if (!LOBYTE(v252[0]))
              {
                v205 = __nwlog_obj();
                os_log_type_t v206 = type[0];
                if (!os_log_type_enabled(v205, type[0])) {
                  goto LABEL_541;
                }
                LODWORD(buf[0]) = 136446210;
                *(void *)((char *)buf + 4) = "__nw_protocol_input_finished";
                v207 = "%{public}s called with null other_protocol, backtrace limit exceeded";
                goto LABEL_540;
              }
              v211 = (char *)__nw_create_backtrace_string();
              v205 = __nwlog_obj();
              os_log_type_t v206 = type[0];
              BOOL v212 = os_log_type_enabled(v205, type[0]);
              if (v211)
              {
                if (v212)
                {
                  LODWORD(buf[0]) = 136446466;
                  *(void *)((char *)buf + 4) = "__nw_protocol_input_finished";
                  WORD2(buf[1]) = 2082;
                  *(void *)((char *)&buf[1] + 6) = v211;
                  _os_log_impl(&dword_1830D4000, v205, v206, "%{public}s called with null other_protocol, dumping backtrace:%{public}s", (uint8_t *)buf, 0x16u);
                }
                free(v211);
                goto LABEL_541;
              }
              if (v212)
              {
                LODWORD(buf[0]) = 136446210;
                *(void *)((char *)buf + 4) = "__nw_protocol_input_finished";
                v207 = "%{public}s called with null other_protocol, no backtrace";
LABEL_540:
                _os_log_impl(&dword_1830D4000, v205, v206, v207, (uint8_t *)buf, 0xCu);
              }
            }
LABEL_541:
            if (v204) {
              free(v204);
            }
            goto LABEL_270;
          }
          uint64_t v104 = *(void (***)(void))(v73 + 64);
          if (v104)
          {
            *(void *)(v73 + 64) = 0;
            v104[2](v104);
            _Block_release(v104);
          }
          if (*(unsigned char *)(v73 + 72))
          {
            int v105 = *(const void **)(v73 + 64);
            if (v105) {
              _Block_release(v105);
            }
          }
LABEL_215:
          free((void *)v73);
LABEL_216:
          os_log_type_t v72 = a1;
          goto LABEL_163;
        }
      }
      __nwlog_obj();
      uint64_t v142 = (const char *)a1[2];
      LODWORD(buf[0]) = 136446722;
      *(void *)((char *)buf + 4) = "__nw_protocol_error";
      if (!v142) {
        uint64_t v142 = "invalid";
      }
      WORD2(buf[1]) = 2082;
      *(void *)((char *)&buf[1] + 6) = v142;
      HIWORD(buf[2]) = 2048;
      unint64_t v255 = (unint64_t)a1;
      int v143 = (char *)_os_log_send_and_compose_impl();
      type[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(v252[0]) = 0;
      if (__nwlog_fault(v143, type, v252))
      {
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          os_log_type_t v144 = __nwlog_obj();
          os_log_type_t v145 = type[0];
          if (!os_log_type_enabled(v144, type[0])) {
            goto LABEL_468;
          }
          os_log_type_t v146 = (const char *)a1[2];
          if (!v146) {
            os_log_type_t v146 = "invalid";
          }
          LODWORD(buf[0]) = 136446722;
          *(void *)((char *)buf + 4) = "__nw_protocol_error";
          WORD2(buf[1]) = 2082;
          *(void *)((char *)&buf[1] + 6) = v146;
          HIWORD(buf[2]) = 2048;
          unint64_t v255 = (unint64_t)a1;
          BOOL v147 = "%{public}s protocol %{public}s (%p) has invalid error callback";
          goto LABEL_467;
        }
        if (!LOBYTE(v252[0]))
        {
          os_log_type_t v144 = __nwlog_obj();
          os_log_type_t v145 = type[0];
          if (!os_log_type_enabled(v144, type[0])) {
            goto LABEL_468;
          }
          v191 = (const char *)a1[2];
          if (!v191) {
            v191 = "invalid";
          }
          LODWORD(buf[0]) = 136446722;
          *(void *)((char *)buf + 4) = "__nw_protocol_error";
          WORD2(buf[1]) = 2082;
          *(void *)((char *)&buf[1] + 6) = v191;
          HIWORD(buf[2]) = 2048;
          unint64_t v255 = (unint64_t)a1;
          BOOL v147 = "%{public}s protocol %{public}s (%p) has invalid error callback, backtrace limit exceeded";
          goto LABEL_467;
        }
        os_log_type_t v166 = (char *)__nw_create_backtrace_string();
        os_log_type_t v144 = __nwlog_obj();
        os_log_type_t v145 = type[0];
        BOOL v167 = os_log_type_enabled(v144, type[0]);
        if (v166)
        {
          if (v167)
          {
            os_log_type_t v168 = (const char *)a1[2];
            if (!v168) {
              os_log_type_t v168 = "invalid";
            }
            LODWORD(buf[0]) = 136446978;
            *(void *)((char *)buf + 4) = "__nw_protocol_error";
            WORD2(buf[1]) = 2082;
            *(void *)((char *)&buf[1] + 6) = v168;
            HIWORD(buf[2]) = 2048;
            unint64_t v255 = (unint64_t)a1;
            LOWORD(v256[0]) = 2082;
            *(void *)((char *)v256 + 2) = v166;
            _os_log_impl(&dword_1830D4000, v144, v145, "%{public}s protocol %{public}s (%p) has invalid error callback, dumping backtrace:%{public}s", (uint8_t *)buf, 0x2Au);
          }
          free(v166);
          goto LABEL_468;
        }
        if (v167)
        {
          v193 = (const char *)a1[2];
          if (!v193) {
            v193 = "invalid";
          }
          LODWORD(buf[0]) = 136446722;
          *(void *)((char *)buf + 4) = "__nw_protocol_error";
          WORD2(buf[1]) = 2082;
          *(void *)((char *)&buf[1] + 6) = v193;
          HIWORD(buf[2]) = 2048;
          unint64_t v255 = (unint64_t)a1;
          BOOL v147 = "%{public}s protocol %{public}s (%p) has invalid error callback, no backtrace";
LABEL_467:
          _os_log_impl(&dword_1830D4000, v144, v145, v147, (uint8_t *)buf, 0x20u);
        }
      }
LABEL_468:
      if (v143) {
        free(v143);
      }
      goto LABEL_161;
    }
    __nwlog_obj();
    LODWORD(buf[0]) = 136446210;
    *(void *)((char *)buf + 4) = "__nw_protocol_error";
    uint64_t v73 = _os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v252[0]) = 0;
    if (__nwlog_fault((const char *)v73, type, v252))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v161 = __nwlog_obj();
        os_log_type_t v162 = type[0];
        if (!os_log_type_enabled(v161, type[0])) {
          goto LABEL_496;
        }
        LODWORD(buf[0]) = 136446210;
        *(void *)((char *)buf + 4) = "__nw_protocol_error";
        os_log_type_t v163 = "%{public}s called with null other_protocol";
        goto LABEL_495;
      }
      if (!LOBYTE(v252[0]))
      {
        os_log_type_t v161 = __nwlog_obj();
        os_log_type_t v162 = type[0];
        if (!os_log_type_enabled(v161, type[0])) {
          goto LABEL_496;
        }
        LODWORD(buf[0]) = 136446210;
        *(void *)((char *)buf + 4) = "__nw_protocol_error";
        os_log_type_t v163 = "%{public}s called with null other_protocol, backtrace limit exceeded";
        goto LABEL_495;
      }
      int v185 = (char *)__nw_create_backtrace_string();
      os_log_type_t v161 = __nwlog_obj();
      os_log_type_t v162 = type[0];
      BOOL v186 = os_log_type_enabled(v161, type[0]);
      if (v185)
      {
        if (v186)
        {
          LODWORD(buf[0]) = 136446466;
          *(void *)((char *)buf + 4) = "__nw_protocol_error";
          WORD2(buf[1]) = 2082;
          *(void *)((char *)&buf[1] + 6) = v185;
          _os_log_impl(&dword_1830D4000, v161, v162, "%{public}s called with null other_protocol, dumping backtrace:%{public}s", (uint8_t *)buf, 0x16u);
        }
        free(v185);
        if (!v73) {
          goto LABEL_216;
        }
        goto LABEL_215;
      }
      if (v186)
      {
        LODWORD(buf[0]) = 136446210;
        *(void *)((char *)buf + 4) = "__nw_protocol_error";
        os_log_type_t v163 = "%{public}s called with null other_protocol, no backtrace";
LABEL_495:
        _os_log_impl(&dword_1830D4000, v161, v162, v163, (uint8_t *)buf, 0xCu);
      }
    }
LABEL_496:
    if (!v73) {
      goto LABEL_216;
    }
    goto LABEL_215;
  }
  return v15;
}

uint64_t nw_protocol_plugin_retry_set_getting_input_frames(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v19 = "nw_protocol_plugin_retry_set_getting_input_frames";
    id v10 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v16 = 0;
    if (!__nwlog_fault(v10, &type, &v16)) {
      goto LABEL_31;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      unsigned int v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (!os_log_type_enabled(v11, type)) {
        goto LABEL_31;
      }
      *(_DWORD *)buf = 136446210;
      char v19 = "nw_protocol_plugin_retry_set_getting_input_frames";
      uint64_t v13 = "%{public}s called with null retry_plugin";
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      unsigned int v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v15 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          char v19 = "nw_protocol_plugin_retry_set_getting_input_frames";
          __int16 v20 = 2082;
          uint64_t v21 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s called with null retry_plugin, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_31;
      }
      if (!v15)
      {
LABEL_31:
        if (v10) {
          free(v10);
        }
        return 0;
      }
      *(_DWORD *)buf = 136446210;
      char v19 = "nw_protocol_plugin_retry_set_getting_input_frames";
      uint64_t v13 = "%{public}s called with null retry_plugin, no backtrace";
    }
    else
    {
      unsigned int v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (!os_log_type_enabled(v11, type)) {
        goto LABEL_31;
      }
      *(_DWORD *)buf = 136446210;
      char v19 = "nw_protocol_plugin_retry_set_getting_input_frames";
      uint64_t v13 = "%{public}s called with null retry_plugin, backtrace limit exceeded";
    }
    _os_log_impl(&dword_1830D4000, v11, v12, v13, buf, 0xCu);
    goto LABEL_31;
  }
  char v4 = *(unsigned char *)(a1 + 212);
  if ((((v4 & 1) == 0) ^ a3)) {
    return 0;
  }
  if (a3)
  {
    char v6 = v4 | 1;
  }
  else
  {
    if ((*(unsigned char *)(a1 + 212) & 4) != 0)
    {
      *(unsigned char *)(a1 + 212) = v4 & 0xFB;
      uint64_t v8 = *(uint64_t (**)(uint64_t, void, BOOL))(a1 + 152);
      if (!v8 || (v8(a2, *(void *)(a2 + 32), *(_DWORD *)(a1 + 208) != 0) & 1) == 0) {
        nw_protocol_common_input_finished(a2, *(void *)(a2 + 32));
      }
    }
    if ((*(unsigned char *)(a1 + 212) & 2) != 0)
    {
      *(unsigned char *)(a1 + 212) &= ~2u;
      os_log_type_t v9 = *(uint64_t (**)(uint64_t, void, BOOL))(a1 + 152);
      if (!v9 || (v9(a2, *(void *)(a2 + 32), *(_DWORD *)(a1 + 208) != 0) & 1) == 0) {
        nw_protocol_common_disconnected(a2, *(void *)(a2 + 32));
      }
    }
    char v6 = *(unsigned char *)(a1 + 212) & 0xFE;
  }
  *(unsigned char *)(a1 + 212) = v6;
  return 1;
}

BOOL nw_protocol_plugin_metadata_handle_eof(uint64_t a1, void *a2)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  char v3 = *(unsigned char *)(a1 + 142);
  if (*(unsigned char *)(a1 + 140) == 3 || (v3 & 0x10) != 0) {
    return (v3 & 1) == 0 || *(unsigned char *)(a1 + 140) != 2;
  }
  int v35 = -1;
  int v36 = 0;
  unsigned int v33 = 0;
  int v34 = -1;
  int v32 = 0;
  uint64_t v30 = 0;
  BOOL v31 = &v30;
  if (*(void *)a1)
  {
    if (gLogDatapath)
    {
      BOOL v15 = __nwlog_obj();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_handle_eof";
        _os_log_impl(&dword_1830D4000, v15, OS_LOG_TYPE_DEBUG, "%{public}s resuming saved input frames", buf, 0xCu);
      }
    }
    uint64_t v6 = a2[6];
    if (v6)
    {
      uint64_t v7 = *(void *)(a1 + 96);
      if (v7)
      {
        *(void *)os_log_type_t type = 0;
        uint64_t v38 = type;
        int v40 = 0;
        uint64_t v39 = 0x2000000000;
        *(void *)buf = MEMORY[0x1E4F143A8];
        *(void *)&buf[8] = 0x40000000;
        *(void *)&buf[16] = __nw_protocol_plugin_metadata_process_frames_block_invoke;
        os_log_type_t v43 = &unk_1E523ADF0;
        uint64_t v46 = a1;
        os_log_type_t v47 = &v35;
        char v55 = 1;
        uint64_t v48 = a1;
        uint64_t v49 = &v30;
        BOOL v50 = &v36;
        uint64_t v51 = &v32;
        unint64_t v44 = type;
        uint64_t v45 = &v34;
        uint64_t v52 = a2;
        uint64_t v53 = v7;
        uint64_t v54 = v6;
        uint64_t v8 = *(void *)a1;
        do
        {
          if (!v8) {
            break;
          }
          uint64_t v9 = *(void *)(v8 + 32);
          char v10 = (*(uint64_t (**)(unsigned char *))&buf[16])(buf);
          uint64_t v8 = v9;
        }
        while ((v10 & 1) != 0);
        unsigned int v11 = *((_DWORD *)v38 + 6);
        _Block_object_dispose(type, 8);
LABEL_14:
        unsigned int v33 = v11;
        if (v30)
        {
          **(void **)(a1 + 24) = v30;
          os_log_type_t v12 = v31;
          *(void *)(v30 + 40) = *(void *)(a1 + 24);
          *(void *)(a1 + 24) = v12;
        }
        goto LABEL_16;
      }
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_process_frames";
      char v16 = (const char *)_os_log_send_and_compose_impl();
      type[0] = OS_LOG_TYPE_ERROR;
      char v41 = 0;
      if (__nwlog_fault(v16, type, &v41))
      {
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          uint64_t v17 = __nwlog_obj();
          os_log_type_t v18 = type[0];
          if (!os_log_type_enabled(v17, type[0])) {
            goto LABEL_48;
          }
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_process_frames";
          char v19 = "%{public}s called with null processor";
LABEL_47:
          _os_log_impl(&dword_1830D4000, v17, v18, v19, buf, 0xCu);
          goto LABEL_48;
        }
        if (!v41)
        {
          uint64_t v17 = __nwlog_obj();
          os_log_type_t v18 = type[0];
          if (!os_log_type_enabled(v17, type[0])) {
            goto LABEL_48;
          }
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_process_frames";
          char v19 = "%{public}s called with null processor, backtrace limit exceeded";
          goto LABEL_47;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        uint64_t v17 = __nwlog_obj();
        os_log_type_t v18 = type[0];
        BOOL v26 = os_log_type_enabled(v17, type[0]);
        if (!backtrace_string)
        {
          if (!v26) {
            goto LABEL_48;
          }
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_process_frames";
          char v19 = "%{public}s called with null processor, no backtrace";
          goto LABEL_47;
        }
        if (v26)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_process_frames";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v17, v18, "%{public}s called with null processor, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
      }
LABEL_48:
      if (v16)
      {
        uint64_t v29 = (char *)v16;
LABEL_57:
        free(v29);
        goto LABEL_58;
      }
      goto LABEL_58;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_process_frames";
    __int16 v20 = (const char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    char v41 = 0;
    uint64_t v21 = v20;
    if (__nwlog_fault(v20, type, &v41))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        uint64_t v22 = __nwlog_obj();
        os_log_type_t v23 = type[0];
        if (!os_log_type_enabled(v22, type[0])) {
          goto LABEL_55;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_process_frames";
        uint64_t v24 = "%{public}s called with null input_protocol";
LABEL_54:
        _os_log_impl(&dword_1830D4000, v22, v23, v24, buf, 0xCu);
        goto LABEL_55;
      }
      if (!v41)
      {
        uint64_t v22 = __nwlog_obj();
        os_log_type_t v23 = type[0];
        if (!os_log_type_enabled(v22, type[0])) {
          goto LABEL_55;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_process_frames";
        uint64_t v24 = "%{public}s called with null input_protocol, backtrace limit exceeded";
        goto LABEL_54;
      }
      uint64_t v27 = (char *)__nw_create_backtrace_string();
      uint64_t v22 = __nwlog_obj();
      os_log_type_t v23 = type[0];
      BOOL v28 = os_log_type_enabled(v22, type[0]);
      if (!v27)
      {
        if (!v28) {
          goto LABEL_55;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_process_frames";
        uint64_t v24 = "%{public}s called with null input_protocol, no backtrace";
        goto LABEL_54;
      }
      if (v28)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_process_frames";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v27;
        _os_log_impl(&dword_1830D4000, v22, v23, "%{public}s called with null input_protocol, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v27);
    }
LABEL_55:
    if (v21)
    {
      uint64_t v29 = (char *)v21;
      goto LABEL_57;
    }
LABEL_58:
    unsigned int v11 = 0;
    goto LABEL_14;
  }
LABEL_16:
  while (1)
  {
    uint64_t v30 = 0;
    BOOL v31 = &v30;
    nw_protocol_plugin_metadata_get_and_process_frames(a1, a2, a2[6], v36, &v36, &v35, &v34, &v33, &v32, *(void *)(a1 + 96), &v30);
    if (!v30) {
      break;
    }
    **(void **)(a1 + 24) = v30;
    uint64_t v13 = v31;
    *(void *)(v30 + 40) = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v13;
    uint64_t v30 = 0;
    BOOL v31 = &v30;
    int v32 = 0;
  }
  char v3 = *(unsigned char *)(a1 + 142) | 0x10;
  *(unsigned char *)(a1 + 142) = v3;
  return (v3 & 1) == 0 || *(unsigned char *)(a1 + 140) != 2;
}

uint64_t ___ZL37nw_protocol_finalize_temp_frame_arrayP16nw_frame_array_sb_block_invoke_3298(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 32);
  char v3 = *(void **)(a2 + 40);
  if (v2)
  {
    *(void *)(v2 + 40) = v3;
    char v3 = *(void **)(a2 + 40);
  }
  else
  {
    *(void *)(*(void *)(a1 + 32) + 8) = v3;
  }
  void *v3 = v2;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  nw_frame_finalize(a2);
  return 1;
}

void nw_protocol_plugin_metadata_deep_copy_input_frame_array(nw_frame_array_s *a1)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    *(void *)os_log_type_t v23 = 0;
    *(void *)&v23[8] = v23;
    *(void *)&v23[16] = 0x3802000000;
    uint64_t v24 = __Block_byref_object_copy__3148;
    char v25 = __Block_byref_object_dispose__3149;
    v26[0] = 0;
    v26[1] = v26;
    v18[0] = MEMORY[0x1E4F143A8];
    v18[1] = 0x40000000;
    char v19 = ___ZL55nw_protocol_plugin_metadata_deep_copy_input_frame_arrayP16nw_frame_array_s_block_invoke;
    __int16 v20 = &unk_1E523AE58;
    uint64_t v21 = v23;
    tqh_first = a1->tqh_first;
    do
    {
      if (!tqh_first) {
        break;
      }
      char v3 = (nw_frame *)*((void *)tqh_first + 4);
      char v4 = ((uint64_t (*)(void *))v19)(v18);
      tqh_first = v3;
    }
    while ((v4 & 1) != 0);
    if (gLogDatapath)
    {
      BOOL v15 = __nwlog_obj();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(buf) = 136446210;
        *(void *)((char *)&buf + 4) = "nw_protocol_finalize_temp_frame_array";
        _os_log_impl(&dword_1830D4000, v15, OS_LOG_TYPE_DEBUG, "%{public}s called", (uint8_t *)&buf, 0xCu);
      }
    }
    *(void *)&long long buf = MEMORY[0x1E4F143A8];
    *((void *)&buf + 1) = 0x40000000;
    BOOL v28 = ___ZL37nw_protocol_finalize_temp_frame_arrayP16nw_frame_array_sb_block_invoke_3298;
    uint64_t v29 = &__block_descriptor_tmp_36_3299;
    uint64_t v30 = a1;
    char v31 = 1;
    uint64_t v5 = a1->tqh_first;
    do
    {
      if (!v5) {
        break;
      }
      uint64_t v6 = (nw_frame *)*((void *)v5 + 4);
      char v7 = ((uint64_t (*)(long long *))v28)(&buf);
      uint64_t v5 = v6;
    }
    while ((v7 & 1) != 0);
    uint64_t v8 = *(void *)&v23[8];
    uint64_t v9 = *(void *)&v23[8] + 40;
    char v10 = *(nw_frame **)(*(void *)&v23[8] + 40);
    if (v10)
    {
      *a1->tqh_last = v10;
      *(void *)(*(void *)(v8 + 40) + 40) = a1->tqh_last;
      a1->tqh_last = *(nw_frame ***)(v8 + 48);
      *(void *)(v8 + 40) = 0;
      *(void *)(v8 + 48) = v9;
    }
    _Block_object_dispose(v23, 8);
    return;
  }
  __nwlog_obj();
  *(_DWORD *)os_log_type_t v23 = 136446210;
  *(void *)&v23[4] = "nw_protocol_plugin_metadata_deep_copy_input_frame_array";
  unsigned int v11 = (char *)_os_log_send_and_compose_impl();
  LOBYTE(buf) = 16;
  char v22 = 0;
  if (__nwlog_fault(v11, &buf, &v22))
  {
    if (buf == 17)
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v13 = buf;
      if (!os_log_type_enabled(v12, (os_log_type_t)buf)) {
        goto LABEL_29;
      }
      *(_DWORD *)os_log_type_t v23 = 136446210;
      *(void *)&v23[4] = "nw_protocol_plugin_metadata_deep_copy_input_frame_array";
      uint64_t v14 = "%{public}s called with null frame_array";
      goto LABEL_28;
    }
    if (!v22)
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v13 = buf;
      if (!os_log_type_enabled(v12, (os_log_type_t)buf)) {
        goto LABEL_29;
      }
      *(_DWORD *)os_log_type_t v23 = 136446210;
      *(void *)&v23[4] = "nw_protocol_plugin_metadata_deep_copy_input_frame_array";
      uint64_t v14 = "%{public}s called with null frame_array, backtrace limit exceeded";
      goto LABEL_28;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v12 = __nwlog_obj();
    os_log_type_t v13 = buf;
    BOOL v17 = os_log_type_enabled(v12, (os_log_type_t)buf);
    if (backtrace_string)
    {
      if (v17)
      {
        *(_DWORD *)os_log_type_t v23 = 136446466;
        *(void *)&v23[4] = "nw_protocol_plugin_metadata_deep_copy_input_frame_array";
        *(_WORD *)&v23[12] = 2082;
        *(void *)&v23[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s called with null frame_array, dumping backtrace:%{public}s", v23, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_29;
    }
    if (v17)
    {
      *(_DWORD *)os_log_type_t v23 = 136446210;
      *(void *)&v23[4] = "nw_protocol_plugin_metadata_deep_copy_input_frame_array";
      uint64_t v14 = "%{public}s called with null frame_array, no backtrace";
LABEL_28:
      _os_log_impl(&dword_1830D4000, v12, v13, v14, v23, 0xCu);
    }
  }
LABEL_29:
  if (v11) {
    free(v11);
  }
}

BOOL ___ZL55nw_protocol_plugin_metadata_deep_copy_input_frame_arrayP16nw_frame_array_s_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  LODWORD(size) = 0;
  uint64_t v4 = nw_frame_unclaimed_bytes(a2, &size);
  uint64_t v5 = size;
  if (!size)
  {
    int v8 = 0;
    char v7 = 0;
    goto LABEL_5;
  }
  uint64_t v6 = (const void *)v4;
  char v7 = malloc_type_malloc(size, 0xF2B69DE5uLL);
  if (v7)
  {
LABEL_3:
    memcpy(v7, v6, size);
    int v8 = size;
LABEL_5:
    uint64_t v9 = nw_frame_create(0, (uint64_t)v7, v8, (uint64_t)nw_protocol_plugin_metadata_input_frame_finalizer, 0);
    nw_frame_set_buffer_used_malloc(v9, 1);
    v15[0] = MEMORY[0x1E4F143A8];
    v15[1] = 0x40000000;
    v15[2] = ___ZL55nw_protocol_plugin_metadata_deep_copy_input_frame_arrayP16nw_frame_array_s_block_invoke_2;
    v15[3] = &__block_descriptor_tmp_38_3302;
    void v15[4] = v9;
    void v15[5] = a2;
    nw_frame_foreach_protocol_metadata(a2, 0, (uint64_t)v15);
    uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 8);
    *(void *)(v9 + 32) = 0;
    unsigned int v11 = *(uint64_t **)(v10 + 48);
    *(void *)(v9 + 40) = v11;
    uint64_t *v11 = v9;
    *(void *)(v10 + 48) = v9 + 32;
    return 1;
  }
  os_log_type_t v13 = __nwlog_obj();
  os_log_type_enabled(v13, OS_LOG_TYPE_ERROR);
  HIDWORD(size) = 136446466;
  BOOL v17 = "strict_malloc";
  __int16 v18 = 2048;
  uint64_t v19 = v5;
  uint64_t v14 = (void *)_os_log_send_and_compose_impl();
  BOOL result = __nwlog_abort((uint64_t)v14);
  if (!result)
  {
    free(v14);
    goto LABEL_3;
  }
  __break(1u);
  return result;
}

uint64_t ___ZL55nw_protocol_plugin_metadata_deep_copy_input_frame_arrayP16nw_frame_array_s_block_invoke_2(uint64_t a1, NSObject *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  int is_metadata_complete = nw_frame_is_metadata_complete(*(void *)(a1 + 40));
  nw_frame_set_metadata(v3, a2, 0, is_metadata_complete);
  return 1;
}

void nw_protocol_plugin_metadata_input_frame_finalizer(nw_frame *a1, BOOL a2, void *a3)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    nw_frame_free_buffer((uint64_t)a1);
    nw_frame_reset((uint64_t)a1, 0, 0, 0, 0);
    os_release(a1);
    return;
  }
  __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  os_log_type_t v13 = "nw_protocol_plugin_metadata_input_frame_finalizer";
  uint64_t v4 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v10 = 0;
  if (__nwlog_fault(v4, &type, &v10))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_19;
      }
      *(_DWORD *)long long buf = 136446210;
      os_log_type_t v13 = "nw_protocol_plugin_metadata_input_frame_finalizer";
      char v7 = "%{public}s called with null frame";
      goto LABEL_18;
    }
    if (!v10)
    {
      uint64_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_19;
      }
      *(_DWORD *)long long buf = 136446210;
      os_log_type_t v13 = "nw_protocol_plugin_metadata_input_frame_finalizer";
      char v7 = "%{public}s called with null frame, backtrace limit exceeded";
      goto LABEL_18;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v5 = __nwlog_obj();
    os_log_type_t v6 = type;
    BOOL v9 = os_log_type_enabled(v5, type);
    if (backtrace_string)
    {
      if (v9)
      {
        *(_DWORD *)long long buf = 136446466;
        os_log_type_t v13 = "nw_protocol_plugin_metadata_input_frame_finalizer";
        __int16 v14 = 2082;
        BOOL v15 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s called with null frame, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_19;
    }
    if (v9)
    {
      *(_DWORD *)long long buf = 136446210;
      os_log_type_t v13 = "nw_protocol_plugin_metadata_input_frame_finalizer";
      char v7 = "%{public}s called with null frame, no backtrace";
LABEL_18:
      _os_log_impl(&dword_1830D4000, v5, v6, v7, buf, 0xCu);
    }
  }
LABEL_19:
  if (v4) {
    free(v4);
  }
}

uint64_t nw_protocol_plugin_metadata_finalize_output_frames(uint64_t a1, void *a2)
{
  uint64_t v77 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_finalize_output_frames";
    char v10 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v57[0]) = 0;
    if (!__nwlog_fault(v10, type, v57)) {
      goto LABEL_77;
    }
    if (type[0] != OS_LOG_TYPE_FAULT)
    {
      if (!LOBYTE(v57[0]))
      {
        unsigned int v11 = __nwlog_obj();
        os_log_type_t v12 = type[0];
        if (os_log_type_enabled(v11, type[0]))
        {
          *(_DWORD *)long long buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_finalize_output_frames";
          os_log_type_t v13 = "%{public}s called with null protocol, backtrace limit exceeded";
          goto LABEL_76;
        }
        goto LABEL_77;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      unsigned int v11 = __nwlog_obj();
      os_log_type_t v12 = type[0];
      BOOL v20 = os_log_type_enabled(v11, type[0]);
      if (!backtrace_string)
      {
        if (v20)
        {
          *(_DWORD *)long long buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_finalize_output_frames";
          os_log_type_t v13 = "%{public}s called with null protocol, no backtrace";
          goto LABEL_76;
        }
        goto LABEL_77;
      }
      if (!v20) {
        goto LABEL_54;
      }
      *(_DWORD *)long long buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_finalize_output_frames";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = backtrace_string;
      uint64_t v21 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
      goto LABEL_53;
    }
    unsigned int v11 = __nwlog_obj();
    os_log_type_t v12 = type[0];
    if (!os_log_type_enabled(v11, type[0])) {
      goto LABEL_77;
    }
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_finalize_output_frames";
    os_log_type_t v13 = "%{public}s called with null protocol";
LABEL_76:
    _os_log_impl(&dword_1830D4000, v11, v12, v13, buf, 0xCu);
    goto LABEL_77;
  }
  uint64_t v3 = *(void *)(a1 + 40);
  if (!v3)
  {
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_finalize_output_frames";
    char v10 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v57[0]) = 0;
    if (!__nwlog_fault(v10, type, v57)) {
      goto LABEL_77;
    }
    if (type[0] != OS_LOG_TYPE_FAULT)
    {
      if (!LOBYTE(v57[0]))
      {
        unsigned int v11 = __nwlog_obj();
        os_log_type_t v12 = type[0];
        if (os_log_type_enabled(v11, type[0]))
        {
          *(_DWORD *)long long buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_finalize_output_frames";
          os_log_type_t v13 = "%{public}s called with null protocol->handle, backtrace limit exceeded";
          goto LABEL_76;
        }
        goto LABEL_77;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      unsigned int v11 = __nwlog_obj();
      os_log_type_t v12 = type[0];
      BOOL v22 = os_log_type_enabled(v11, type[0]);
      if (!backtrace_string)
      {
        if (v22)
        {
          *(_DWORD *)long long buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_finalize_output_frames";
          os_log_type_t v13 = "%{public}s called with null protocol->handle, no backtrace";
          goto LABEL_76;
        }
        goto LABEL_77;
      }
      if (!v22) {
        goto LABEL_54;
      }
      *(_DWORD *)long long buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_finalize_output_frames";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = backtrace_string;
      uint64_t v21 = "%{public}s called with null protocol->handle, dumping backtrace:%{public}s";
      goto LABEL_53;
    }
    unsigned int v11 = __nwlog_obj();
    os_log_type_t v12 = type[0];
    if (!os_log_type_enabled(v11, type[0])) {
      goto LABEL_77;
    }
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_finalize_output_frames";
    os_log_type_t v13 = "%{public}s called with null protocol->handle";
    goto LABEL_76;
  }
  uint64_t v4 = *(void *)(v3 + 72);
  if (!v4)
  {
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_finalize_output_frames";
    char v10 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v57[0]) = 0;
    if (!__nwlog_fault(v10, type, v57)) {
      goto LABEL_77;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      unsigned int v11 = __nwlog_obj();
      os_log_type_t v12 = type[0];
      if (!os_log_type_enabled(v11, type[0])) {
        goto LABEL_77;
      }
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_finalize_output_frames";
      os_log_type_t v13 = "%{public}s called with null metadata_plugin";
      goto LABEL_76;
    }
    if (!LOBYTE(v57[0]))
    {
      unsigned int v11 = __nwlog_obj();
      os_log_type_t v12 = type[0];
      if (os_log_type_enabled(v11, type[0]))
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_finalize_output_frames";
        os_log_type_t v13 = "%{public}s called with null metadata_plugin, backtrace limit exceeded";
        goto LABEL_76;
      }
      goto LABEL_77;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    unsigned int v11 = __nwlog_obj();
    os_log_type_t v12 = type[0];
    BOOL v23 = os_log_type_enabled(v11, type[0]);
    if (!backtrace_string)
    {
      if (v23)
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_finalize_output_frames";
        os_log_type_t v13 = "%{public}s called with null metadata_plugin, no backtrace";
        goto LABEL_76;
      }
      goto LABEL_77;
    }
    if (!v23) {
      goto LABEL_54;
    }
    *(_DWORD *)long long buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_finalize_output_frames";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = backtrace_string;
    uint64_t v21 = "%{public}s called with null metadata_plugin, dumping backtrace:%{public}s";
LABEL_53:
    _os_log_impl(&dword_1830D4000, v11, v12, v21, buf, 0x16u);
    goto LABEL_54;
  }
  if (a2)
  {
    unsigned int v58 = 0;
    v57[0] = 0;
    v57[1] = v57;
    if (*a2)
    {
      **(void **)(v4 + 40) = *a2;
      *(void *)(*a2 + 40) = *(void *)(v4 + 40);
      *(void *)(v4 + 40) = a2[1];
      *a2 = 0;
      a2[1] = a2;
    }
    if (!*(void *)(v4 + 32))
    {
LABEL_87:
      int v9 = 0;
      if (!v57[0])
      {
LABEL_98:
        nw_protocol_plugin_metadata_report_transfer(v4, a1, *(void *)(v4 + 64), v58, 0);
        return 1;
      }
LABEL_88:
      if (gLogDatapath)
      {
        os_log_type_t v43 = __nwlog_obj();
        if (os_log_type_enabled(v43, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)long long buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_finalize_output_frames";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v9;
          _os_log_impl(&dword_1830D4000, v43, OS_LOG_TYPE_DEBUG, "%{public}s sending %u frames to the below protocol", buf, 0x12u);
        }
      }
      uint64_t v28 = *(void *)(a1 + 32);
      if (v28)
      {
        uint64_t v29 = *(void **)(v28 + 40);
        if (v29 == &nw_protocol_ref_counted_handle)
        {
          uint64_t v30 = *(void *)(v28 + 88);
          if (v30) {
            *(void *)(v28 + 88) = v30 + 1;
          }
        }
        uint64_t v31 = *(void *)(v28 + 24);
        if (v31)
        {
          uint64_t v32 = *(void (**)(uint64_t, void *))(v31 + 96);
          if (v32)
          {
            v32(v28, v57);
LABEL_96:
            if (v29 != &nw_protocol_ref_counted_handle) {
              goto LABEL_98;
            }
            if (*(_UNKNOWN **)(v28 + 40) != &nw_protocol_ref_counted_handle) {
              goto LABEL_98;
            }
            uint64_t v33 = *(void *)(v28 + 88);
            if (!v33) {
              goto LABEL_98;
            }
            uint64_t v34 = v33 - 1;
            *(void *)(v28 + 88) = v34;
            if (v34) {
              goto LABEL_98;
            }
            int v35 = *(void (***)(void))(v28 + 64);
            if (v35)
            {
              *(void *)(v28 + 64) = 0;
              v35[2](v35);
              _Block_release(v35);
            }
            if (*(unsigned char *)(v28 + 72))
            {
              int v36 = *(const void **)(v28 + 64);
              if (v36) {
                _Block_release(v36);
              }
            }
            goto LABEL_106;
          }
        }
        __nwlog_obj();
        size_t v37 = *(const char **)(v28 + 16);
        *(_DWORD *)long long buf = 136446722;
        *(void *)&uint8_t buf[4] = "__nw_protocol_finalize_output_frames";
        if (!v37) {
          size_t v37 = "invalid";
        }
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v37;
        *(_WORD *)&unsigned char buf[22] = 2048;
        BOOL v65 = (void *)v28;
        uint64_t v38 = (char *)_os_log_send_and_compose_impl();
        type[0] = OS_LOG_TYPE_ERROR;
        LOBYTE(v56) = 0;
        if (__nwlog_fault(v38, type, &v56))
        {
          if (type[0] == OS_LOG_TYPE_FAULT)
          {
            uint64_t v39 = __nwlog_obj();
            os_log_type_t v40 = type[0];
            if (!os_log_type_enabled(v39, type[0])) {
              goto LABEL_143;
            }
            char v41 = *(const char **)(v28 + 16);
            if (!v41) {
              char v41 = "invalid";
            }
            *(_DWORD *)long long buf = 136446722;
            *(void *)&uint8_t buf[4] = "__nw_protocol_finalize_output_frames";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v41;
            *(_WORD *)&unsigned char buf[22] = 2048;
            BOOL v65 = (void *)v28;
            BOOL v42 = "%{public}s protocol %{public}s (%p) has invalid finalize_output_frames callback";
            goto LABEL_142;
          }
          if (!(_BYTE)v56)
          {
            uint64_t v39 = __nwlog_obj();
            os_log_type_t v40 = type[0];
            if (!os_log_type_enabled(v39, type[0])) {
              goto LABEL_143;
            }
            uint64_t v52 = *(const char **)(v28 + 16);
            if (!v52) {
              uint64_t v52 = "invalid";
            }
            *(_DWORD *)long long buf = 136446722;
            *(void *)&uint8_t buf[4] = "__nw_protocol_finalize_output_frames";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v52;
            *(_WORD *)&unsigned char buf[22] = 2048;
            BOOL v65 = (void *)v28;
            BOOL v42 = "%{public}s protocol %{public}s (%p) has invalid finalize_output_frames callback, backtrace limit exceeded";
            goto LABEL_142;
          }
          os_log_type_t v47 = (char *)__nw_create_backtrace_string();
          uint64_t v39 = __nwlog_obj();
          os_log_type_t v40 = type[0];
          BOOL v48 = os_log_type_enabled(v39, type[0]);
          if (v47)
          {
            if (v48)
            {
              uint64_t v49 = *(const char **)(v28 + 16);
              if (!v49) {
                uint64_t v49 = "invalid";
              }
              *(_DWORD *)long long buf = 136446978;
              *(void *)&uint8_t buf[4] = "__nw_protocol_finalize_output_frames";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = v49;
              *(_WORD *)&unsigned char buf[22] = 2048;
              BOOL v65 = (void *)v28;
              LOWORD(v66) = 2082;
              *(void *)((char *)&v66 + 2) = v47;
              _os_log_impl(&dword_1830D4000, v39, v40, "%{public}s protocol %{public}s (%p) has invalid finalize_output_frames callback, dumping backtrace:%{public}s", buf, 0x2Au);
            }
            free(v47);
            goto LABEL_143;
          }
          if (v48)
          {
            uint64_t v53 = *(const char **)(v28 + 16);
            if (!v53) {
              uint64_t v53 = "invalid";
            }
            *(_DWORD *)long long buf = 136446722;
            *(void *)&uint8_t buf[4] = "__nw_protocol_finalize_output_frames";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v53;
            *(_WORD *)&unsigned char buf[22] = 2048;
            BOOL v65 = (void *)v28;
            BOOL v42 = "%{public}s protocol %{public}s (%p) has invalid finalize_output_frames callback, no backtrace";
LABEL_142:
            _os_log_impl(&dword_1830D4000, v39, v40, v42, buf, 0x20u);
          }
        }
LABEL_143:
        if (v38) {
          free(v38);
        }
        goto LABEL_96;
      }
      __nwlog_obj();
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "__nw_protocol_finalize_output_frames";
      uint64_t v28 = _os_log_send_and_compose_impl();
      type[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(v56) = 0;
      if (__nwlog_fault((const char *)v28, type, &v56))
      {
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          unint64_t v44 = __nwlog_obj();
          os_log_type_t v45 = type[0];
          if (!os_log_type_enabled(v44, type[0])) {
            goto LABEL_150;
          }
          *(_DWORD *)long long buf = 136446210;
          *(void *)&uint8_t buf[4] = "__nw_protocol_finalize_output_frames";
          uint64_t v46 = "%{public}s called with null protocol";
          goto LABEL_149;
        }
        if (!(_BYTE)v56)
        {
          unint64_t v44 = __nwlog_obj();
          os_log_type_t v45 = type[0];
          if (!os_log_type_enabled(v44, type[0])) {
            goto LABEL_150;
          }
          *(_DWORD *)long long buf = 136446210;
          *(void *)&uint8_t buf[4] = "__nw_protocol_finalize_output_frames";
          uint64_t v46 = "%{public}s called with null protocol, backtrace limit exceeded";
          goto LABEL_149;
        }
        BOOL v50 = (char *)__nw_create_backtrace_string();
        unint64_t v44 = __nwlog_obj();
        os_log_type_t v45 = type[0];
        BOOL v51 = os_log_type_enabled(v44, type[0]);
        if (v50)
        {
          if (v51)
          {
            *(_DWORD *)long long buf = 136446466;
            *(void *)&uint8_t buf[4] = "__nw_protocol_finalize_output_frames";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v50;
            _os_log_impl(&dword_1830D4000, v44, v45, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v50);
          if (!v28) {
            goto LABEL_98;
          }
LABEL_106:
          free((void *)v28);
          goto LABEL_98;
        }
        if (v51)
        {
          *(_DWORD *)long long buf = 136446210;
          *(void *)&uint8_t buf[4] = "__nw_protocol_finalize_output_frames";
          uint64_t v46 = "%{public}s called with null protocol, no backtrace";
LABEL_149:
          _os_log_impl(&dword_1830D4000, v44, v45, v46, buf, 0xCu);
        }
      }
LABEL_150:
      if (!v28) {
        goto LABEL_98;
      }
      goto LABEL_106;
    }
    if (gLogDatapath)
    {
      __int16 v14 = __nwlog_obj();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_finalize_output_frames";
        _os_log_impl(&dword_1830D4000, v14, OS_LOG_TYPE_DEBUG, "%{public}s resuming saved output frames", buf, 0xCu);
      }
    }
    int v55 = -1;
    int v56 = 0;
    int v54 = -1;
    uint64_t v5 = *(void *)(v4 + 104);
    if (v5)
    {
      *(void *)os_log_type_t type = 0;
      os_log_type_t v60 = type;
      int v62 = 0;
      uint64_t v61 = 0x2000000000;
      *(void *)long long buf = MEMORY[0x1E4F143A8];
      *(void *)&buf[8] = 0x40000000;
      *(void *)&buf[16] = __nw_protocol_plugin_metadata_process_frames_block_invoke;
      BOOL v65 = &unk_1E523ADF0;
      *((void *)&v66 + 1) = &v54;
      uint64_t v67 = v4;
      char v76 = 0;
      uint64_t v68 = &v55;
      uint64_t v69 = v4 + 32;
      uint64_t v70 = v57;
      uint64_t v71 = &v56;
      *(void *)&long long v66 = type;
      os_log_type_t v72 = &v58;
      uint64_t v73 = a1;
      uint64_t v74 = v5;
      uint64_t v75 = 0;
      uint64_t v6 = *(void *)(v4 + 32);
      do
      {
        if (!v6) {
          break;
        }
        uint64_t v7 = *(void *)(v6 + 32);
        char v8 = (*(uint64_t (**)(unsigned char *))&buf[16])(buf);
        uint64_t v6 = v7;
      }
      while ((v8 & 1) != 0);
      int v9 = *((_DWORD *)v60 + 6);
      _Block_object_dispose(type, 8);
      if (!v57[0]) {
        goto LABEL_98;
      }
      goto LABEL_88;
    }
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_process_frames";
    BOOL v15 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    char v63 = 0;
    if (__nwlog_fault(v15, type, &v63))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        uint64_t v16 = __nwlog_obj();
        os_log_type_t v17 = type[0];
        if (!os_log_type_enabled(v16, type[0])) {
          goto LABEL_85;
        }
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_process_frames";
        __int16 v18 = "%{public}s called with null processor";
        goto LABEL_84;
      }
      if (!v63)
      {
        uint64_t v16 = __nwlog_obj();
        os_log_type_t v17 = type[0];
        if (!os_log_type_enabled(v16, type[0])) {
          goto LABEL_85;
        }
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_process_frames";
        __int16 v18 = "%{public}s called with null processor, backtrace limit exceeded";
        goto LABEL_84;
      }
      char v25 = (char *)__nw_create_backtrace_string();
      uint64_t v16 = __nwlog_obj();
      os_log_type_t v17 = type[0];
      BOOL v26 = os_log_type_enabled(v16, type[0]);
      if (v25)
      {
        if (v26)
        {
          *(_DWORD *)long long buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_process_frames";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v25;
          _os_log_impl(&dword_1830D4000, v16, v17, "%{public}s called with null processor, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v25);
        goto LABEL_85;
      }
      if (v26)
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_process_frames";
        __int16 v18 = "%{public}s called with null processor, no backtrace";
LABEL_84:
        _os_log_impl(&dword_1830D4000, v16, v17, v18, buf, 0xCu);
      }
    }
LABEL_85:
    if (v15) {
      free(v15);
    }
    goto LABEL_87;
  }
  __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_finalize_output_frames";
  char v10 = (char *)_os_log_send_and_compose_impl();
  type[0] = OS_LOG_TYPE_ERROR;
  LOBYTE(v57[0]) = 0;
  if (!__nwlog_fault(v10, type, v57)) {
    goto LABEL_77;
  }
  if (type[0] != OS_LOG_TYPE_FAULT)
  {
    if (!LOBYTE(v57[0]))
    {
      unsigned int v11 = __nwlog_obj();
      os_log_type_t v12 = type[0];
      if (os_log_type_enabled(v11, type[0]))
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_finalize_output_frames";
        os_log_type_t v13 = "%{public}s called with null frames, backtrace limit exceeded";
        goto LABEL_76;
      }
      goto LABEL_77;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    unsigned int v11 = __nwlog_obj();
    os_log_type_t v12 = type[0];
    BOOL v24 = os_log_type_enabled(v11, type[0]);
    if (!backtrace_string)
    {
      if (v24)
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_finalize_output_frames";
        os_log_type_t v13 = "%{public}s called with null frames, no backtrace";
        goto LABEL_76;
      }
      goto LABEL_77;
    }
    if (v24)
    {
      *(_DWORD *)long long buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_finalize_output_frames";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = backtrace_string;
      uint64_t v21 = "%{public}s called with null frames, dumping backtrace:%{public}s";
      goto LABEL_53;
    }
LABEL_54:
    free(backtrace_string);
    goto LABEL_77;
  }
  unsigned int v11 = __nwlog_obj();
  os_log_type_t v12 = type[0];
  if (os_log_type_enabled(v11, type[0]))
  {
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_finalize_output_frames";
    os_log_type_t v13 = "%{public}s called with null frames";
    goto LABEL_76;
  }
LABEL_77:
  if (v10) {
    free(v10);
  }
  return 0;
}

void nw_protocol_plugin_metadata_output_available(uint64_t a1)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    os_log_type_t v47 = "nw_protocol_plugin_metadata_output_available";
    uint64_t v5 = _os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t v45 = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault((const char *)v5, type, &v45)) {
      goto LABEL_130;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      BOOL v20 = __nwlog_obj();
      os_log_type_t v21 = type[0];
      if (!os_log_type_enabled(v20, type[0])) {
        goto LABEL_130;
      }
      *(_DWORD *)long long buf = 136446210;
      os_log_type_t v47 = "nw_protocol_plugin_metadata_output_available";
      BOOL v22 = "%{public}s called with null protocol";
      goto LABEL_129;
    }
    if (v45 == OS_LOG_TYPE_DEFAULT)
    {
      BOOL v20 = __nwlog_obj();
      os_log_type_t v21 = type[0];
      if (!os_log_type_enabled(v20, type[0])) {
        goto LABEL_130;
      }
      *(_DWORD *)long long buf = 136446210;
      os_log_type_t v47 = "nw_protocol_plugin_metadata_output_available";
      BOOL v22 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_129;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v20 = __nwlog_obj();
    os_log_type_t v21 = type[0];
    BOOL v31 = os_log_type_enabled(v20, type[0]);
    if (!backtrace_string)
    {
      if (!v31) {
        goto LABEL_130;
      }
      *(_DWORD *)long long buf = 136446210;
      os_log_type_t v47 = "nw_protocol_plugin_metadata_output_available";
      BOOL v22 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_129;
    }
    if (!v31) {
      goto LABEL_102;
    }
    *(_DWORD *)long long buf = 136446466;
    os_log_type_t v47 = "nw_protocol_plugin_metadata_output_available";
    __int16 v48 = 2082;
    uint64_t v49 = backtrace_string;
    uint64_t v32 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_101:
    _os_log_impl(&dword_1830D4000, v20, v21, v32, buf, 0x16u);
    goto LABEL_102;
  }
  uint64_t v2 = *(void *)(a1 + 40);
  if (!v2)
  {
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    os_log_type_t v47 = "nw_protocol_plugin_metadata_output_available";
    uint64_t v5 = _os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t v45 = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault((const char *)v5, type, &v45)) {
      goto LABEL_130;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      BOOL v20 = __nwlog_obj();
      os_log_type_t v21 = type[0];
      if (!os_log_type_enabled(v20, type[0])) {
        goto LABEL_130;
      }
      *(_DWORD *)long long buf = 136446210;
      os_log_type_t v47 = "nw_protocol_plugin_metadata_output_available";
      BOOL v22 = "%{public}s called with null protocol->handle";
      goto LABEL_129;
    }
    if (v45 == OS_LOG_TYPE_DEFAULT)
    {
      BOOL v20 = __nwlog_obj();
      os_log_type_t v21 = type[0];
      if (!os_log_type_enabled(v20, type[0])) {
        goto LABEL_130;
      }
      *(_DWORD *)long long buf = 136446210;
      os_log_type_t v47 = "nw_protocol_plugin_metadata_output_available";
      BOOL v22 = "%{public}s called with null protocol->handle, backtrace limit exceeded";
      goto LABEL_129;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v20 = __nwlog_obj();
    os_log_type_t v21 = type[0];
    BOOL v33 = os_log_type_enabled(v20, type[0]);
    if (!backtrace_string)
    {
      if (!v33) {
        goto LABEL_130;
      }
      *(_DWORD *)long long buf = 136446210;
      os_log_type_t v47 = "nw_protocol_plugin_metadata_output_available";
      BOOL v22 = "%{public}s called with null protocol->handle, no backtrace";
      goto LABEL_129;
    }
    if (!v33) {
      goto LABEL_102;
    }
    *(_DWORD *)long long buf = 136446466;
    os_log_type_t v47 = "nw_protocol_plugin_metadata_output_available";
    __int16 v48 = 2082;
    uint64_t v49 = backtrace_string;
    uint64_t v32 = "%{public}s called with null protocol->handle, dumping backtrace:%{public}s";
    goto LABEL_101;
  }
  uint64_t v3 = *(void *)(v2 + 72);
  if (!v3)
  {
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    os_log_type_t v47 = "nw_protocol_plugin_metadata_output_available";
    uint64_t v5 = _os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t v45 = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault((const char *)v5, type, &v45)) {
      goto LABEL_130;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      BOOL v20 = __nwlog_obj();
      os_log_type_t v21 = type[0];
      if (!os_log_type_enabled(v20, type[0])) {
        goto LABEL_130;
      }
      *(_DWORD *)long long buf = 136446210;
      os_log_type_t v47 = "nw_protocol_plugin_metadata_output_available";
      BOOL v22 = "%{public}s called with null metadata_plugin";
      goto LABEL_129;
    }
    if (v45 == OS_LOG_TYPE_DEFAULT)
    {
      BOOL v20 = __nwlog_obj();
      os_log_type_t v21 = type[0];
      if (!os_log_type_enabled(v20, type[0])) {
        goto LABEL_130;
      }
      *(_DWORD *)long long buf = 136446210;
      os_log_type_t v47 = "nw_protocol_plugin_metadata_output_available";
      BOOL v22 = "%{public}s called with null metadata_plugin, backtrace limit exceeded";
      goto LABEL_129;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v20 = __nwlog_obj();
    os_log_type_t v21 = type[0];
    BOOL v34 = os_log_type_enabled(v20, type[0]);
    if (!backtrace_string)
    {
      if (!v34) {
        goto LABEL_130;
      }
      *(_DWORD *)long long buf = 136446210;
      os_log_type_t v47 = "nw_protocol_plugin_metadata_output_available";
      BOOL v22 = "%{public}s called with null metadata_plugin, no backtrace";
      goto LABEL_129;
    }
    if (!v34) {
      goto LABEL_102;
    }
    *(_DWORD *)long long buf = 136446466;
    os_log_type_t v47 = "nw_protocol_plugin_metadata_output_available";
    __int16 v48 = 2082;
    uint64_t v49 = backtrace_string;
    uint64_t v32 = "%{public}s called with null metadata_plugin, dumping backtrace:%{public}s";
    goto LABEL_101;
  }
  if (gLogDatapath)
  {
    BOOL v23 = __nwlog_obj();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 136446210;
      os_log_type_t v47 = "nw_protocol_plugin_metadata_output_available";
      _os_log_impl(&dword_1830D4000, v23, OS_LOG_TYPE_DEBUG, "%{public}s called", buf, 0xCu);
    }
  }
  *(void *)os_log_type_t type = 0;
  os_log_type_t v43 = type;
  nw_protocol_plugin_metadata_finalize_output_frames(a1, type);
  if (*(void *)(v3 + 32)) {
    return;
  }
  uint64_t v4 = *(void *)(v3 + 128);
  if (!v4)
  {
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    os_log_type_t v47 = "nw_protocol_plugin_metadata_output_available";
    uint64_t v5 = _os_log_send_and_compose_impl();
    os_log_type_t v45 = OS_LOG_TYPE_ERROR;
    char v44 = 0;
    if (!__nwlog_fault((const char *)v5, &v45, &v44)) {
      goto LABEL_130;
    }
    if (v45 == OS_LOG_TYPE_FAULT)
    {
      BOOL v20 = __nwlog_obj();
      os_log_type_t v21 = v45;
      if (!os_log_type_enabled(v20, v45)) {
        goto LABEL_130;
      }
      *(_DWORD *)long long buf = 136446210;
      os_log_type_t v47 = "nw_protocol_plugin_metadata_output_available";
      BOOL v22 = "%{public}s called with null metadata_plugin->protocol";
      goto LABEL_129;
    }
    if (!v44)
    {
      BOOL v20 = __nwlog_obj();
      os_log_type_t v21 = v45;
      if (!os_log_type_enabled(v20, v45)) {
        goto LABEL_130;
      }
      *(_DWORD *)long long buf = 136446210;
      os_log_type_t v47 = "nw_protocol_plugin_metadata_output_available";
      BOOL v22 = "%{public}s called with null metadata_plugin->protocol, backtrace limit exceeded";
      goto LABEL_129;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v20 = __nwlog_obj();
    os_log_type_t v21 = v45;
    BOOL v38 = os_log_type_enabled(v20, v45);
    if (!backtrace_string)
    {
      if (!v38) {
        goto LABEL_130;
      }
      *(_DWORD *)long long buf = 136446210;
      os_log_type_t v47 = "nw_protocol_plugin_metadata_output_available";
      BOOL v22 = "%{public}s called with null metadata_plugin->protocol, no backtrace";
      goto LABEL_129;
    }
    if (v38)
    {
      *(_DWORD *)long long buf = 136446466;
      os_log_type_t v47 = "nw_protocol_plugin_metadata_output_available";
      __int16 v48 = 2082;
      uint64_t v49 = backtrace_string;
      uint64_t v32 = "%{public}s called with null metadata_plugin->protocol, dumping backtrace:%{public}s";
      goto LABEL_101;
    }
LABEL_102:
    free(backtrace_string);
    if (!v5) {
      return;
    }
LABEL_37:
    free((void *)v5);
    return;
  }
  uint64_t v5 = *(void *)(v4 + 48);
  if (!v5)
  {
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    os_log_type_t v47 = "__nw_protocol_output_available";
    uint64_t v5 = _os_log_send_and_compose_impl();
    os_log_type_t v45 = OS_LOG_TYPE_ERROR;
    char v44 = 0;
    if (!__nwlog_fault((const char *)v5, &v45, &v44)) {
      goto LABEL_130;
    }
    if (v45 == OS_LOG_TYPE_FAULT)
    {
      BOOL v20 = __nwlog_obj();
      os_log_type_t v21 = v45;
      if (!os_log_type_enabled(v20, v45)) {
        goto LABEL_130;
      }
      *(_DWORD *)long long buf = 136446210;
      os_log_type_t v47 = "__nw_protocol_output_available";
      BOOL v22 = "%{public}s called with null protocol";
      goto LABEL_129;
    }
    if (!v44)
    {
      BOOL v20 = __nwlog_obj();
      os_log_type_t v21 = v45;
      if (!os_log_type_enabled(v20, v45)) {
        goto LABEL_130;
      }
      *(_DWORD *)long long buf = 136446210;
      os_log_type_t v47 = "__nw_protocol_output_available";
      BOOL v22 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_129;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v20 = __nwlog_obj();
    os_log_type_t v21 = v45;
    BOOL v39 = os_log_type_enabled(v20, v45);
    if (backtrace_string)
    {
      if (!v39) {
        goto LABEL_102;
      }
      *(_DWORD *)long long buf = 136446466;
      os_log_type_t v47 = "__nw_protocol_output_available";
      __int16 v48 = 2082;
      uint64_t v49 = backtrace_string;
      uint64_t v32 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
      goto LABEL_101;
    }
    if (!v39) {
      goto LABEL_130;
    }
    *(_DWORD *)long long buf = 136446210;
    os_log_type_t v47 = "__nw_protocol_output_available";
    BOOL v22 = "%{public}s called with null protocol, no backtrace";
LABEL_129:
    _os_log_impl(&dword_1830D4000, v20, v21, v22, buf, 0xCu);
LABEL_130:
    if (!v5) {
      return;
    }
    goto LABEL_37;
  }
  uint64_t v6 = *(void **)(v5 + 40);
  if (v6 == &nw_protocol_ref_counted_handle)
  {
    uint64_t v7 = *(void *)(v5 + 88);
    if (v7) {
      *(void *)(v5 + 88) = v7 + 1;
    }
  }
  char v8 = *(void **)(v4 + 40);
  if (v8 == &nw_protocol_ref_counted_handle)
  {
    uint64_t v9 = *(void *)(v4 + 88);
    if (v9) {
      *(void *)(v4 + 88) = v9 + 1;
    }
  }
  uint64_t v10 = *(void *)(v5 + 24);
  if (v10)
  {
    unsigned int v11 = *(void (**)(uint64_t, uint64_t))(v10 + 72);
    if (v11)
    {
      v11(v5, v4);
      goto LABEL_17;
    }
  }
  __nwlog_obj();
  BOOL v24 = *(const char **)(v5 + 16);
  *(_DWORD *)long long buf = 136446722;
  os_log_type_t v47 = "__nw_protocol_output_available";
  if (!v24) {
    BOOL v24 = "invalid";
  }
  __int16 v48 = 2082;
  uint64_t v49 = (void *)v24;
  __int16 v50 = 2048;
  uint64_t v51 = v5;
  char v25 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t v45 = OS_LOG_TYPE_ERROR;
  char v44 = 0;
  if (__nwlog_fault(v25, &v45, &v44))
  {
    if (v45 == OS_LOG_TYPE_FAULT)
    {
      BOOL v26 = __nwlog_obj();
      os_log_type_t v27 = v45;
      if (!os_log_type_enabled(v26, v45)) {
        goto LABEL_119;
      }
      uint64_t v28 = *(const char **)(v5 + 16);
      if (!v28) {
        uint64_t v28 = "invalid";
      }
      *(_DWORD *)long long buf = 136446722;
      os_log_type_t v47 = "__nw_protocol_output_available";
      __int16 v48 = 2082;
      uint64_t v49 = (void *)v28;
      __int16 v50 = 2048;
      uint64_t v51 = v5;
      uint64_t v29 = "%{public}s protocol %{public}s (%p) has invalid output_available callback";
      goto LABEL_118;
    }
    if (!v44)
    {
      BOOL v26 = __nwlog_obj();
      os_log_type_t v27 = v45;
      if (!os_log_type_enabled(v26, v45)) {
        goto LABEL_119;
      }
      os_log_type_t v40 = *(const char **)(v5 + 16);
      if (!v40) {
        os_log_type_t v40 = "invalid";
      }
      *(_DWORD *)long long buf = 136446722;
      os_log_type_t v47 = "__nw_protocol_output_available";
      __int16 v48 = 2082;
      uint64_t v49 = (void *)v40;
      __int16 v50 = 2048;
      uint64_t v51 = v5;
      uint64_t v29 = "%{public}s protocol %{public}s (%p) has invalid output_available callback, backtrace limit exceeded";
      goto LABEL_118;
    }
    int v35 = (char *)__nw_create_backtrace_string();
    BOOL v26 = __nwlog_obj();
    os_log_type_t v27 = v45;
    BOOL v36 = os_log_type_enabled(v26, v45);
    if (v35)
    {
      if (v36)
      {
        size_t v37 = *(const char **)(v5 + 16);
        if (!v37) {
          size_t v37 = "invalid";
        }
        *(_DWORD *)long long buf = 136446978;
        os_log_type_t v47 = "__nw_protocol_output_available";
        __int16 v48 = 2082;
        uint64_t v49 = (void *)v37;
        __int16 v50 = 2048;
        uint64_t v51 = v5;
        __int16 v52 = 2082;
        uint64_t v53 = v35;
        _os_log_impl(&dword_1830D4000, v26, v27, "%{public}s protocol %{public}s (%p) has invalid output_available callback, dumping backtrace:%{public}s", buf, 0x2Au);
      }
      free(v35);
      goto LABEL_119;
    }
    if (v36)
    {
      char v41 = *(const char **)(v5 + 16);
      if (!v41) {
        char v41 = "invalid";
      }
      *(_DWORD *)long long buf = 136446722;
      os_log_type_t v47 = "__nw_protocol_output_available";
      __int16 v48 = 2082;
      uint64_t v49 = (void *)v41;
      __int16 v50 = 2048;
      uint64_t v51 = v5;
      uint64_t v29 = "%{public}s protocol %{public}s (%p) has invalid output_available callback, no backtrace";
LABEL_118:
      _os_log_impl(&dword_1830D4000, v26, v27, v29, buf, 0x20u);
    }
  }
LABEL_119:
  if (v25) {
    free(v25);
  }
LABEL_17:
  if (v8 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(v4 + 40) == &nw_protocol_ref_counted_handle)
  {
    uint64_t v12 = *(void *)(v4 + 88);
    if (v12)
    {
      uint64_t v13 = v12 - 1;
      *(void *)(v4 + 88) = v13;
      if (!v13)
      {
        __int16 v14 = *(void (***)(void))(v4 + 64);
        if (v14)
        {
          *(void *)(v4 + 64) = 0;
          v14[2](v14);
          _Block_release(v14);
        }
        if (*(unsigned char *)(v4 + 72))
        {
          BOOL v15 = *(const void **)(v4 + 64);
          if (v15) {
            _Block_release(v15);
          }
        }
        free((void *)v4);
      }
    }
  }
  if (v6 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(v5 + 40) == &nw_protocol_ref_counted_handle)
  {
    uint64_t v16 = *(void *)(v5 + 88);
    if (v16)
    {
      uint64_t v17 = v16 - 1;
      *(void *)(v5 + 88) = v17;
      if (!v17)
      {
        __int16 v18 = *(void (***)(void))(v5 + 64);
        if (v18)
        {
          *(void *)(v5 + 64) = 0;
          v18[2](v18);
          _Block_release(v18);
        }
        if (*(unsigned char *)(v5 + 72))
        {
          uint64_t v19 = *(const void **)(v5 + 64);
          if (v19) {
            _Block_release(v19);
          }
        }
        goto LABEL_37;
      }
    }
  }
}

void nw_protocol_plugin_metadata_resume_input(uint64_t a1, int a2)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    os_log_type_t v45 = "nw_protocol_plugin_metadata_resume_input";
    uint64_t v6 = _os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v42 = 0;
    if (!__nwlog_fault((const char *)v6, &type, &v42)) {
      goto LABEL_105;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v27 = __nwlog_obj();
      os_log_type_t v28 = type;
      if (!os_log_type_enabled(v27, type)) {
        goto LABEL_105;
      }
      *(_DWORD *)long long buf = 136446210;
      os_log_type_t v45 = "nw_protocol_plugin_metadata_resume_input";
      uint64_t v29 = "%{public}s called with null metadata_plugin";
      goto LABEL_104;
    }
    if (!v42)
    {
      os_log_type_t v27 = __nwlog_obj();
      os_log_type_t v28 = type;
      if (!os_log_type_enabled(v27, type)) {
        goto LABEL_105;
      }
      *(_DWORD *)long long buf = 136446210;
      os_log_type_t v45 = "nw_protocol_plugin_metadata_resume_input";
      uint64_t v29 = "%{public}s called with null metadata_plugin, backtrace limit exceeded";
      goto LABEL_104;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v27 = __nwlog_obj();
    os_log_type_t v28 = type;
    BOOL v36 = os_log_type_enabled(v27, type);
    if (!backtrace_string)
    {
      if (!v36) {
        goto LABEL_105;
      }
      *(_DWORD *)long long buf = 136446210;
      os_log_type_t v45 = "nw_protocol_plugin_metadata_resume_input";
      uint64_t v29 = "%{public}s called with null metadata_plugin, no backtrace";
      goto LABEL_104;
    }
    if (v36)
    {
      *(_DWORD *)long long buf = 136446466;
      os_log_type_t v45 = "nw_protocol_plugin_metadata_resume_input";
      __int16 v46 = 2082;
      os_log_type_t v47 = backtrace_string;
      size_t v37 = "%{public}s called with null metadata_plugin, dumping backtrace:%{public}s";
LABEL_78:
      _os_log_impl(&dword_1830D4000, v27, v28, v37, buf, 0x16u);
    }
LABEL_79:
    free(backtrace_string);
    if (!v6) {
      return;
    }
LABEL_36:
    free((void *)v6);
    return;
  }
  if (gLogDatapath)
  {
    uint64_t v30 = __nwlog_obj();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
    {
      BOOL v31 = off_1E523AE78[(a2 - 1)];
      *(_DWORD *)long long buf = 136446466;
      os_log_type_t v45 = "nw_protocol_plugin_metadata_resume_input";
      __int16 v46 = 2080;
      os_log_type_t v47 = v31;
      _os_log_impl(&dword_1830D4000, v30, OS_LOG_TYPE_DEBUG, "%{public}s resuming input with result: %s", buf, 0x16u);
    }
  }
  *(unsigned char *)(a1 + 140) = a2;
  if (a2 == 3)
  {
    char v4 = *(unsigned char *)(a1 + 142);
    *(_DWORD *)(a1 + 136) = 0;
    *(unsigned char *)(a1 + 142) = v4 & 0xE3;
  }
  uint64_t v5 = *(void *)(a1 + 128);
  if (!v5)
  {
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    os_log_type_t v45 = "nw_protocol_plugin_metadata_resume_input";
    uint64_t v6 = _os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v42 = 0;
    if (!__nwlog_fault((const char *)v6, &type, &v42)) {
      goto LABEL_105;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v27 = __nwlog_obj();
      os_log_type_t v28 = type;
      if (!os_log_type_enabled(v27, type)) {
        goto LABEL_105;
      }
      *(_DWORD *)long long buf = 136446210;
      os_log_type_t v45 = "nw_protocol_plugin_metadata_resume_input";
      uint64_t v29 = "%{public}s called with null metadata_plugin->protocol";
      goto LABEL_104;
    }
    if (!v42)
    {
      os_log_type_t v27 = __nwlog_obj();
      os_log_type_t v28 = type;
      if (!os_log_type_enabled(v27, type)) {
        goto LABEL_105;
      }
      *(_DWORD *)long long buf = 136446210;
      os_log_type_t v45 = "nw_protocol_plugin_metadata_resume_input";
      uint64_t v29 = "%{public}s called with null metadata_plugin->protocol, backtrace limit exceeded";
      goto LABEL_104;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v27 = __nwlog_obj();
    os_log_type_t v28 = type;
    BOOL v38 = os_log_type_enabled(v27, type);
    if (!backtrace_string)
    {
      if (!v38) {
        goto LABEL_105;
      }
      *(_DWORD *)long long buf = 136446210;
      os_log_type_t v45 = "nw_protocol_plugin_metadata_resume_input";
      uint64_t v29 = "%{public}s called with null metadata_plugin->protocol, no backtrace";
      goto LABEL_104;
    }
    if (v38)
    {
      *(_DWORD *)long long buf = 136446466;
      os_log_type_t v45 = "nw_protocol_plugin_metadata_resume_input";
      __int16 v46 = 2082;
      os_log_type_t v47 = backtrace_string;
      size_t v37 = "%{public}s called with null metadata_plugin->protocol, dumping backtrace:%{public}s";
      goto LABEL_78;
    }
    goto LABEL_79;
  }
  uint64_t v6 = *(void *)(v5 + 48);
  if (!v6)
  {
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    os_log_type_t v45 = "__nw_protocol_input_available";
    uint64_t v6 = _os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v42 = 0;
    if (!__nwlog_fault((const char *)v6, &type, &v42)) {
      goto LABEL_105;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v27 = __nwlog_obj();
      os_log_type_t v28 = type;
      if (!os_log_type_enabled(v27, type)) {
        goto LABEL_105;
      }
      *(_DWORD *)long long buf = 136446210;
      os_log_type_t v45 = "__nw_protocol_input_available";
      uint64_t v29 = "%{public}s called with null protocol";
      goto LABEL_104;
    }
    if (!v42)
    {
      os_log_type_t v27 = __nwlog_obj();
      os_log_type_t v28 = type;
      if (!os_log_type_enabled(v27, type)) {
        goto LABEL_105;
      }
      *(_DWORD *)long long buf = 136446210;
      os_log_type_t v45 = "__nw_protocol_input_available";
      uint64_t v29 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_104;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v27 = __nwlog_obj();
    os_log_type_t v28 = type;
    BOOL v39 = os_log_type_enabled(v27, type);
    if (backtrace_string)
    {
      if (!v39) {
        goto LABEL_79;
      }
      *(_DWORD *)long long buf = 136446466;
      os_log_type_t v45 = "__nw_protocol_input_available";
      __int16 v46 = 2082;
      os_log_type_t v47 = backtrace_string;
      size_t v37 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
      goto LABEL_78;
    }
    if (!v39) {
      goto LABEL_105;
    }
    *(_DWORD *)long long buf = 136446210;
    os_log_type_t v45 = "__nw_protocol_input_available";
    uint64_t v29 = "%{public}s called with null protocol, no backtrace";
LABEL_104:
    _os_log_impl(&dword_1830D4000, v27, v28, v29, buf, 0xCu);
LABEL_105:
    if (!v6) {
      return;
    }
    goto LABEL_36;
  }
  uint64_t v7 = *(void **)(v6 + 40);
  if (v7 == &nw_protocol_ref_counted_handle)
  {
    uint64_t v8 = *(void *)(v6 + 88);
    if (v8) {
      *(void *)(v6 + 88) = v8 + 1;
    }
  }
  uint64_t v9 = *(void **)(v5 + 40);
  if (v9 == &nw_protocol_ref_counted_handle)
  {
    uint64_t v10 = *(void *)(v5 + 88);
    if (v10) {
      *(void *)(v5 + 88) = v10 + 1;
    }
  }
  uint64_t v11 = *(void *)(v6 + 24);
  if (v11)
  {
    uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v11 + 64);
    if (v12)
    {
      v12(v6, v5);
      goto LABEL_16;
    }
  }
  __nwlog_obj();
  os_log_type_t v21 = *(const char **)(v6 + 16);
  *(_DWORD *)long long buf = 136446722;
  os_log_type_t v45 = "__nw_protocol_input_available";
  if (!v21) {
    os_log_type_t v21 = "invalid";
  }
  __int16 v46 = 2082;
  os_log_type_t v47 = (void *)v21;
  __int16 v48 = 2048;
  uint64_t v49 = v6;
  BOOL v22 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v42 = 0;
  if (__nwlog_fault(v22, &type, &v42))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v23 = __nwlog_obj();
      os_log_type_t v24 = type;
      if (!os_log_type_enabled(v23, type)) {
        goto LABEL_90;
      }
      char v25 = *(const char **)(v6 + 16);
      if (!v25) {
        char v25 = "invalid";
      }
      *(_DWORD *)long long buf = 136446722;
      os_log_type_t v45 = "__nw_protocol_input_available";
      __int16 v46 = 2082;
      os_log_type_t v47 = (void *)v25;
      __int16 v48 = 2048;
      uint64_t v49 = v6;
      BOOL v26 = "%{public}s protocol %{public}s (%p) has invalid input_available callback";
      goto LABEL_89;
    }
    if (!v42)
    {
      BOOL v23 = __nwlog_obj();
      os_log_type_t v24 = type;
      if (!os_log_type_enabled(v23, type)) {
        goto LABEL_90;
      }
      os_log_type_t v40 = *(const char **)(v6 + 16);
      if (!v40) {
        os_log_type_t v40 = "invalid";
      }
      *(_DWORD *)long long buf = 136446722;
      os_log_type_t v45 = "__nw_protocol_input_available";
      __int16 v46 = 2082;
      os_log_type_t v47 = (void *)v40;
      __int16 v48 = 2048;
      uint64_t v49 = v6;
      BOOL v26 = "%{public}s protocol %{public}s (%p) has invalid input_available callback, backtrace limit exceeded";
      goto LABEL_89;
    }
    uint64_t v32 = (char *)__nw_create_backtrace_string();
    BOOL v23 = __nwlog_obj();
    os_log_type_t v24 = type;
    BOOL v33 = os_log_type_enabled(v23, type);
    if (v32)
    {
      if (v33)
      {
        BOOL v34 = *(const char **)(v6 + 16);
        if (!v34) {
          BOOL v34 = "invalid";
        }
        *(_DWORD *)long long buf = 136446978;
        os_log_type_t v45 = "__nw_protocol_input_available";
        __int16 v46 = 2082;
        os_log_type_t v47 = (void *)v34;
        __int16 v48 = 2048;
        uint64_t v49 = v6;
        __int16 v50 = 2082;
        uint64_t v51 = v32;
        _os_log_impl(&dword_1830D4000, v23, v24, "%{public}s protocol %{public}s (%p) has invalid input_available callback, dumping backtrace:%{public}s", buf, 0x2Au);
      }
      free(v32);
      goto LABEL_90;
    }
    if (v33)
    {
      char v41 = *(const char **)(v6 + 16);
      if (!v41) {
        char v41 = "invalid";
      }
      *(_DWORD *)long long buf = 136446722;
      os_log_type_t v45 = "__nw_protocol_input_available";
      __int16 v46 = 2082;
      os_log_type_t v47 = (void *)v41;
      __int16 v48 = 2048;
      uint64_t v49 = v6;
      BOOL v26 = "%{public}s protocol %{public}s (%p) has invalid input_available callback, no backtrace";
LABEL_89:
      _os_log_impl(&dword_1830D4000, v23, v24, v26, buf, 0x20u);
    }
  }
LABEL_90:
  if (v22) {
    free(v22);
  }
LABEL_16:
  if (v9 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(v5 + 40) == &nw_protocol_ref_counted_handle)
  {
    uint64_t v13 = *(void *)(v5 + 88);
    if (v13)
    {
      uint64_t v14 = v13 - 1;
      *(void *)(v5 + 88) = v14;
      if (!v14)
      {
        BOOL v15 = *(void (***)(void))(v5 + 64);
        if (v15)
        {
          *(void *)(v5 + 64) = 0;
          v15[2](v15);
          _Block_release(v15);
        }
        if (*(unsigned char *)(v5 + 72))
        {
          uint64_t v16 = *(const void **)(v5 + 64);
          if (v16) {
            _Block_release(v16);
          }
        }
        free((void *)v5);
      }
    }
  }
  if (v7 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(v6 + 40) == &nw_protocol_ref_counted_handle)
  {
    uint64_t v17 = *(void *)(v6 + 88);
    if (v17)
    {
      uint64_t v18 = v17 - 1;
      *(void *)(v6 + 88) = v18;
      if (!v18)
      {
        uint64_t v19 = *(void (***)(void))(v6 + 64);
        if (v19)
        {
          *(void *)(v6 + 64) = 0;
          v19[2](v19);
          _Block_release(v19);
        }
        if (*(unsigned char *)(v6 + 72))
        {
          BOOL v20 = *(const void **)(v6 + 64);
          if (v20) {
            _Block_release(v20);
          }
        }
        goto LABEL_36;
      }
    }
  }
}

void nw_protocol_plugin_metadata_prepare_for_reissue(uint64_t a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (gLogDatapath)
    {
      uint64_t v10 = __nwlog_obj();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_prepare_for_reissue";
        _os_log_impl(&dword_1830D4000, v10, OS_LOG_TYPE_DEBUG, "%{public}s discarding pending input and output", buf, 0xCu);
      }
    }
    char v2 = *(unsigned char *)(a1 + 142);
    *(_DWORD *)(a1 + 136) = 0;
    *(unsigned char *)(a1 + 142) = v2 & 0xE2;
    *(unsigned char *)(a1 + 141) = 3;
    if (gLogDatapath)
    {
      uint64_t v11 = __nwlog_obj();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_finalize_temp_frame_array";
        _os_log_impl(&dword_1830D4000, v11, OS_LOG_TYPE_DEBUG, "%{public}s called", buf, 0xCu);
      }
    }
    *(void *)long long buf = MEMORY[0x1E4F143A8];
    *(void *)&buf[8] = 0x40000000;
    *(void *)&buf[16] = ___ZL37nw_protocol_finalize_temp_frame_arrayP16nw_frame_array_sb_block_invoke_3298;
    uint64_t v17 = &__block_descriptor_tmp_36_3299;
    uint64_t v18 = a1 + 16;
    char v19 = 0;
    uint64_t v3 = *(void *)(a1 + 16);
    do
    {
      if (!v3) {
        break;
      }
      uint64_t v4 = *(void *)(v3 + 32);
      char v5 = (*(uint64_t (**)(unsigned char *))&buf[16])(buf);
      uint64_t v3 = v4;
    }
    while ((v5 & 1) != 0);
    nw_protocol_plugin_metadata_resume_input(a1, 3);
    return;
  }
  __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_prepare_for_reissue";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v6, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_27;
      }
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_prepare_for_reissue";
      uint64_t v9 = "%{public}s called with null metadata_plugin";
      goto LABEL_26;
    }
    if (!v14)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_27;
      }
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_prepare_for_reissue";
      uint64_t v9 = "%{public}s called with null metadata_plugin, backtrace limit exceeded";
      goto LABEL_26;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v7 = __nwlog_obj();
    os_log_type_t v8 = type;
    BOOL v13 = os_log_type_enabled(v7, type);
    if (backtrace_string)
    {
      if (v13)
      {
        *(_DWORD *)long long buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_prepare_for_reissue";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null metadata_plugin, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_27;
    }
    if (v13)
    {
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_prepare_for_reissue";
      uint64_t v9 = "%{public}s called with null metadata_plugin, no backtrace";
LABEL_26:
      _os_log_impl(&dword_1830D4000, v7, v8, v9, buf, 0xCu);
    }
  }
LABEL_27:
  if (v6) {
    free(v6);
  }
}

void nw_protocol_plugin_metadata_reset(uint64_t *a1)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  if (gLogDatapath)
  {
    uint64_t v16 = __nwlog_obj();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(v20) = 136446210;
      *(void *)((char *)&v20 + 4) = "nw_protocol_plugin_metadata_reset";
      _os_log_impl(&dword_1830D4000, v16, OS_LOG_TYPE_DEBUG, "%{public}s called", (uint8_t *)&v20, 0xCu);
    }
    if (gLogDatapath)
    {
      uint64_t v17 = __nwlog_obj();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 136446210;
        BOOL v26 = "nw_protocol_finalize_temp_frame_array";
        _os_log_impl(&dword_1830D4000, v17, OS_LOG_TYPE_DEBUG, "%{public}s called", buf, 0xCu);
      }
    }
  }
  *(void *)&long long v20 = MEMORY[0x1E4F143A8];
  *((void *)&v20 + 1) = 0x40000000;
  os_log_type_t v21 = ___ZL37nw_protocol_finalize_temp_frame_arrayP16nw_frame_array_sb_block_invoke_3298;
  BOOL v22 = &__block_descriptor_tmp_36_3299;
  BOOL v23 = a1;
  char v24 = 0;
  uint64_t v2 = *a1;
  do
  {
    if (!v2) {
      break;
    }
    uint64_t v3 = *(void *)(v2 + 32);
    char v4 = ((uint64_t (*)(long long *))v21)(&v20);
    uint64_t v2 = v3;
  }
  while ((v4 & 1) != 0);
  if (gLogDatapath)
  {
    uint64_t v18 = __nwlog_obj();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(v20) = 136446210;
      *(void *)((char *)&v20 + 4) = "nw_protocol_finalize_temp_frame_array";
      _os_log_impl(&dword_1830D4000, v18, OS_LOG_TYPE_DEBUG, "%{public}s called", (uint8_t *)&v20, 0xCu);
    }
  }
  *(void *)&long long v20 = MEMORY[0x1E4F143A8];
  *((void *)&v20 + 1) = 0x40000000;
  os_log_type_t v21 = ___ZL37nw_protocol_finalize_temp_frame_arrayP16nw_frame_array_sb_block_invoke_3298;
  BOOL v22 = &__block_descriptor_tmp_36_3299;
  BOOL v23 = a1 + 2;
  char v24 = 0;
  uint64_t v5 = a1[2];
  do
  {
    if (!v5) {
      break;
    }
    uint64_t v6 = *(void *)(v5 + 32);
    char v7 = ((uint64_t (*)(long long *))v21)(&v20);
    uint64_t v5 = v6;
  }
  while ((v7 & 1) != 0);
  if (gLogDatapath)
  {
    char v19 = __nwlog_obj();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(v20) = 136446210;
      *(void *)((char *)&v20 + 4) = "nw_protocol_finalize_temp_frame_array";
      _os_log_impl(&dword_1830D4000, v19, OS_LOG_TYPE_DEBUG, "%{public}s called", (uint8_t *)&v20, 0xCu);
    }
  }
  *(void *)&long long v20 = MEMORY[0x1E4F143A8];
  *((void *)&v20 + 1) = 0x40000000;
  os_log_type_t v21 = ___ZL37nw_protocol_finalize_temp_frame_arrayP16nw_frame_array_sb_block_invoke_3298;
  BOOL v22 = &__block_descriptor_tmp_36_3299;
  BOOL v23 = a1 + 4;
  char v24 = 0;
  uint64_t v8 = a1[4];
  do
  {
    if (!v8) {
      break;
    }
    uint64_t v9 = *(void *)(v8 + 32);
    char v10 = ((uint64_t (*)(long long *))v21)(&v20);
    uint64_t v8 = v9;
  }
  while ((v10 & 1) != 0);
  char v11 = *((unsigned char *)a1 + 56);
  if (v11)
  {
    uint64_t v12 = (void *)a1[6];
    if (v12)
    {
      os_release(v12);
      char v11 = *((unsigned char *)a1 + 56);
    }
  }
  a1[6] = 0;
  *((unsigned char *)a1 + 56) = v11 | 1;
  char v13 = *((unsigned char *)a1 + 72);
  if (v13)
  {
    char v14 = (void *)a1[8];
    if (v14)
    {
      os_release(v14);
      char v13 = *((unsigned char *)a1 + 72);
    }
  }
  a1[8] = 0;
  *((unsigned char *)a1 + 72) = v13 | 1;
  char v15 = *((unsigned char *)a1 + 142);
  *((_DWORD *)a1 + 34) = 0;
  *((unsigned char *)a1 + 142) = v15 & 0xE2;
  *((_WORD *)a1 + 70) = 2;
}

void nw_protocol_plugin_metadata_set_callbacks(uint64_t a1, void *object, uint64_t a3, uint64_t a4)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    uint64_t v29 = "nw_protocol_plugin_metadata_set_callbacks";
    char v13 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (!__nwlog_fault(v13, &type, &v26)) {
      goto LABEL_92;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v26)
      {
        char v14 = __nwlog_obj();
        os_log_type_t v15 = type;
        if (!os_log_type_enabled(v14, type)) {
          goto LABEL_92;
        }
        *(_DWORD *)long long buf = 136446210;
        uint64_t v29 = "nw_protocol_plugin_metadata_set_callbacks";
        uint64_t v16 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_91;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      char v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      BOOL v18 = os_log_type_enabled(v14, type);
      if (!backtrace_string)
      {
        if (!v18) {
          goto LABEL_92;
        }
        *(_DWORD *)long long buf = 136446210;
        uint64_t v29 = "nw_protocol_plugin_metadata_set_callbacks";
        uint64_t v16 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_91;
      }
      if (v18)
      {
        *(_DWORD *)long long buf = 136446466;
        uint64_t v29 = "nw_protocol_plugin_metadata_set_callbacks";
        __int16 v30 = 2082;
        BOOL v31 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v14, v15, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
LABEL_92:
      if (v13) {
        goto LABEL_93;
      }
      return;
    }
    char v14 = __nwlog_obj();
    os_log_type_t v15 = type;
    if (!os_log_type_enabled(v14, type)) {
      goto LABEL_92;
    }
    *(_DWORD *)long long buf = 136446210;
    uint64_t v29 = "nw_protocol_plugin_metadata_set_callbacks";
    uint64_t v16 = "%{public}s called with null protocol";
    goto LABEL_91;
  }
  uint64_t v5 = *(void *)(a1 + 40);
  if (!v5)
  {
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    uint64_t v29 = "nw_protocol_plugin_metadata_set_callbacks";
    char v13 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (!__nwlog_fault(v13, &type, &v26)) {
      goto LABEL_92;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v26)
      {
        char v14 = __nwlog_obj();
        os_log_type_t v15 = type;
        if (!os_log_type_enabled(v14, type)) {
          goto LABEL_92;
        }
        *(_DWORD *)long long buf = 136446210;
        uint64_t v29 = "nw_protocol_plugin_metadata_set_callbacks";
        uint64_t v16 = "%{public}s called with null protocol->handle, backtrace limit exceeded";
        goto LABEL_91;
      }
      char v19 = (char *)__nw_create_backtrace_string();
      char v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      BOOL v20 = os_log_type_enabled(v14, type);
      if (!v19)
      {
        if (!v20) {
          goto LABEL_92;
        }
        *(_DWORD *)long long buf = 136446210;
        uint64_t v29 = "nw_protocol_plugin_metadata_set_callbacks";
        uint64_t v16 = "%{public}s called with null protocol->handle, no backtrace";
        goto LABEL_91;
      }
      if (!v20) {
        goto LABEL_65;
      }
      *(_DWORD *)long long buf = 136446466;
      uint64_t v29 = "nw_protocol_plugin_metadata_set_callbacks";
      __int16 v30 = 2082;
      BOOL v31 = v19;
      os_log_type_t v21 = "%{public}s called with null protocol->handle, dumping backtrace:%{public}s";
      goto LABEL_64;
    }
    char v14 = __nwlog_obj();
    os_log_type_t v15 = type;
    if (!os_log_type_enabled(v14, type)) {
      goto LABEL_92;
    }
    *(_DWORD *)long long buf = 136446210;
    uint64_t v29 = "nw_protocol_plugin_metadata_set_callbacks";
    uint64_t v16 = "%{public}s called with null protocol->handle";
LABEL_91:
    _os_log_impl(&dword_1830D4000, v14, v15, v16, buf, 0xCu);
    goto LABEL_92;
  }
  uint64_t v6 = *(void *)(v5 + 72);
  if (!v6)
  {
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    uint64_t v29 = "nw_protocol_plugin_metadata_set_callbacks";
    char v13 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (!__nwlog_fault(v13, &type, &v26)) {
      goto LABEL_92;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v26)
      {
        char v14 = __nwlog_obj();
        os_log_type_t v15 = type;
        if (!os_log_type_enabled(v14, type)) {
          goto LABEL_92;
        }
        *(_DWORD *)long long buf = 136446210;
        uint64_t v29 = "nw_protocol_plugin_metadata_set_callbacks";
        uint64_t v16 = "%{public}s called with null metadata_plugin, backtrace limit exceeded";
        goto LABEL_91;
      }
      char v19 = (char *)__nw_create_backtrace_string();
      char v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      BOOL v22 = os_log_type_enabled(v14, type);
      if (!v19)
      {
        if (!v22) {
          goto LABEL_92;
        }
        *(_DWORD *)long long buf = 136446210;
        uint64_t v29 = "nw_protocol_plugin_metadata_set_callbacks";
        uint64_t v16 = "%{public}s called with null metadata_plugin, no backtrace";
        goto LABEL_91;
      }
      if (!v22) {
        goto LABEL_65;
      }
      *(_DWORD *)long long buf = 136446466;
      uint64_t v29 = "nw_protocol_plugin_metadata_set_callbacks";
      __int16 v30 = 2082;
      BOOL v31 = v19;
      os_log_type_t v21 = "%{public}s called with null metadata_plugin, dumping backtrace:%{public}s";
      goto LABEL_64;
    }
    char v14 = __nwlog_obj();
    os_log_type_t v15 = type;
    if (!os_log_type_enabled(v14, type)) {
      goto LABEL_92;
    }
    *(_DWORD *)long long buf = 136446210;
    uint64_t v29 = "nw_protocol_plugin_metadata_set_callbacks";
    uint64_t v16 = "%{public}s called with null metadata_plugin";
    goto LABEL_91;
  }
  if (!a3)
  {
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    uint64_t v29 = "nw_protocol_plugin_metadata_set_callbacks";
    char v13 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (!__nwlog_fault(v13, &type, &v26)) {
      goto LABEL_92;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v26)
      {
        char v14 = __nwlog_obj();
        os_log_type_t v15 = type;
        if (!os_log_type_enabled(v14, type)) {
          goto LABEL_92;
        }
        *(_DWORD *)long long buf = 136446210;
        uint64_t v29 = "nw_protocol_plugin_metadata_set_callbacks";
        uint64_t v16 = "%{public}s called with null input_processor, backtrace limit exceeded";
        goto LABEL_91;
      }
      char v19 = (char *)__nw_create_backtrace_string();
      char v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      BOOL v23 = os_log_type_enabled(v14, type);
      if (!v19)
      {
        if (!v23) {
          goto LABEL_92;
        }
        *(_DWORD *)long long buf = 136446210;
        uint64_t v29 = "nw_protocol_plugin_metadata_set_callbacks";
        uint64_t v16 = "%{public}s called with null input_processor, no backtrace";
        goto LABEL_91;
      }
      if (!v23) {
        goto LABEL_65;
      }
      *(_DWORD *)long long buf = 136446466;
      uint64_t v29 = "nw_protocol_plugin_metadata_set_callbacks";
      __int16 v30 = 2082;
      BOOL v31 = v19;
      os_log_type_t v21 = "%{public}s called with null input_processor, dumping backtrace:%{public}s";
      goto LABEL_64;
    }
    char v14 = __nwlog_obj();
    os_log_type_t v15 = type;
    if (!os_log_type_enabled(v14, type)) {
      goto LABEL_92;
    }
    *(_DWORD *)long long buf = 136446210;
    uint64_t v29 = "nw_protocol_plugin_metadata_set_callbacks";
    uint64_t v16 = "%{public}s called with null input_processor";
    goto LABEL_91;
  }
  if (!a4)
  {
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    uint64_t v29 = "nw_protocol_plugin_metadata_set_callbacks";
    char v13 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (!__nwlog_fault(v13, &type, &v26)) {
      goto LABEL_92;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (!os_log_type_enabled(v14, type)) {
        goto LABEL_92;
      }
      *(_DWORD *)long long buf = 136446210;
      uint64_t v29 = "nw_protocol_plugin_metadata_set_callbacks";
      uint64_t v16 = "%{public}s called with null output_processor";
      goto LABEL_91;
    }
    if (!v26)
    {
      char v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (!os_log_type_enabled(v14, type)) {
        goto LABEL_92;
      }
      *(_DWORD *)long long buf = 136446210;
      uint64_t v29 = "nw_protocol_plugin_metadata_set_callbacks";
      uint64_t v16 = "%{public}s called with null output_processor, backtrace limit exceeded";
      goto LABEL_91;
    }
    char v19 = (char *)__nw_create_backtrace_string();
    char v14 = __nwlog_obj();
    os_log_type_t v15 = type;
    BOOL v24 = os_log_type_enabled(v14, type);
    if (!v19)
    {
      if (!v24) {
        goto LABEL_92;
      }
      *(_DWORD *)long long buf = 136446210;
      uint64_t v29 = "nw_protocol_plugin_metadata_set_callbacks";
      uint64_t v16 = "%{public}s called with null output_processor, no backtrace";
      goto LABEL_91;
    }
    if (!v24) {
      goto LABEL_65;
    }
    *(_DWORD *)long long buf = 136446466;
    uint64_t v29 = "nw_protocol_plugin_metadata_set_callbacks";
    __int16 v30 = 2082;
    BOOL v31 = v19;
    os_log_type_t v21 = "%{public}s called with null output_processor, dumping backtrace:%{public}s";
LABEL_64:
    _os_log_impl(&dword_1830D4000, v14, v15, v21, buf, 0x16u);
    goto LABEL_65;
  }
  uint64_t v9 = *(void **)(a1 + 24);
  if (v9)
  {
    if (object)
    {
      char v10 = os_retain(object);
      char v11 = *(unsigned char *)(v6 + 88);
      if ((v11 & 1) == 0) {
        goto LABEL_13;
      }
    }
    else
    {
      char v10 = 0;
      char v11 = *(unsigned char *)(v6 + 88);
      if ((v11 & 1) == 0)
      {
LABEL_13:
        *(void *)(v6 + 80) = v10;
        *(unsigned char *)(v6 + 88) = v11 | 1;
        *(void *)(v6 + 96) = a3;
        *(void *)(v6 + 104) = a4;
        *(void *)(v6 + 128) = a1;
        v9[10] = nw_protocol_plugin_metadata_get_input_frames;
        v9[12] = nw_protocol_plugin_metadata_finalize_output_frames;
        v9[9] = nw_protocol_plugin_metadata_output_available;
        void v9[4] = nw_protocol_plugins_disconnect;
        v9[5] = nw_protocol_plugins_connected;
        v9[23] = nw_protocol_plugins_input_finished;
        v9[6] = nw_protocol_plugins_disconnected;
        v9[7] = nw_protocol_plugins_error;
        v9[20] = nw_protocol_plugins_notify;
        v9[32] = nw_protocol_plugins_reset;
        return;
      }
    }
    uint64_t v12 = *(void **)(v6 + 80);
    if (v12)
    {
      os_release(v12);
      char v11 = *(unsigned char *)(v6 + 88);
    }
    goto LABEL_13;
  }
  __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  uint64_t v29 = "nw_protocol_plugin_metadata_set_callbacks";
  char v13 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v26 = 0;
  if (!__nwlog_fault(v13, &type, &v26)) {
    goto LABEL_92;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    char v14 = __nwlog_obj();
    os_log_type_t v15 = type;
    if (!os_log_type_enabled(v14, type)) {
      goto LABEL_92;
    }
    *(_DWORD *)long long buf = 136446210;
    uint64_t v29 = "nw_protocol_plugin_metadata_set_callbacks";
    uint64_t v16 = "%{public}s called with null callbacks";
    goto LABEL_91;
  }
  if (!v26)
  {
    char v14 = __nwlog_obj();
    os_log_type_t v15 = type;
    if (!os_log_type_enabled(v14, type)) {
      goto LABEL_92;
    }
    *(_DWORD *)long long buf = 136446210;
    uint64_t v29 = "nw_protocol_plugin_metadata_set_callbacks";
    uint64_t v16 = "%{public}s called with null callbacks, backtrace limit exceeded";
    goto LABEL_91;
  }
  char v19 = (char *)__nw_create_backtrace_string();
  char v14 = __nwlog_obj();
  os_log_type_t v15 = type;
  BOOL v25 = os_log_type_enabled(v14, type);
  if (!v19)
  {
    if (!v25) {
      goto LABEL_92;
    }
    *(_DWORD *)long long buf = 136446210;
    uint64_t v29 = "nw_protocol_plugin_metadata_set_callbacks";
    uint64_t v16 = "%{public}s called with null callbacks, no backtrace";
    goto LABEL_91;
  }
  if (v25)
  {
    *(_DWORD *)long long buf = 136446466;
    uint64_t v29 = "nw_protocol_plugin_metadata_set_callbacks";
    __int16 v30 = 2082;
    BOOL v31 = v19;
    os_log_type_t v21 = "%{public}s called with null callbacks, dumping backtrace:%{public}s";
    goto LABEL_64;
  }
LABEL_65:
  free(v19);
  if (v13) {
LABEL_93:
  }
    free(v13);
}

uint64_t nw_protocol_plugins_reset(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    uint64_t v17 = "nw_protocol_plugins_reset";
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (!__nwlog_fault(v6, &type, &v14)) {
      goto LABEL_34;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_34;
      }
      *(_DWORD *)long long buf = 136446210;
      uint64_t v17 = "nw_protocol_plugins_reset";
      uint64_t v9 = "%{public}s called with null protocol";
      goto LABEL_33;
    }
    if (!v14)
    {
      char v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_34;
      }
      *(_DWORD *)long long buf = 136446210;
      uint64_t v17 = "nw_protocol_plugins_reset";
      uint64_t v9 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_33;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    char v7 = __nwlog_obj();
    os_log_type_t v8 = type;
    BOOL v11 = os_log_type_enabled(v7, type);
    if (!backtrace_string)
    {
      if (!v11) {
        goto LABEL_34;
      }
      *(_DWORD *)long long buf = 136446210;
      uint64_t v17 = "nw_protocol_plugins_reset";
      uint64_t v9 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_33;
    }
    if (v11)
    {
      *(_DWORD *)long long buf = 136446466;
      uint64_t v17 = "nw_protocol_plugins_reset";
      __int16 v18 = 2082;
      char v19 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(backtrace_string);
LABEL_34:
    if (!v6) {
      return 0;
    }
LABEL_35:
    free(v6);
    return 0;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    uint64_t v17 = "nw_protocol_plugins_reset";
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (!__nwlog_fault(v6, &type, &v14)) {
      goto LABEL_34;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_34;
      }
      *(_DWORD *)long long buf = 136446210;
      uint64_t v17 = "nw_protocol_plugins_reset";
      uint64_t v9 = "%{public}s called with null protocol->handle";
      goto LABEL_33;
    }
    if (!v14)
    {
      char v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_34;
      }
      *(_DWORD *)long long buf = 136446210;
      uint64_t v17 = "nw_protocol_plugins_reset";
      uint64_t v9 = "%{public}s called with null protocol->handle, backtrace limit exceeded";
      goto LABEL_33;
    }
    uint64_t v12 = (char *)__nw_create_backtrace_string();
    char v7 = __nwlog_obj();
    os_log_type_t v8 = type;
    BOOL v13 = os_log_type_enabled(v7, type);
    if (v12)
    {
      if (v13)
      {
        *(_DWORD *)long long buf = 136446466;
        uint64_t v17 = "nw_protocol_plugins_reset";
        __int16 v18 = 2082;
        char v19 = v12;
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null protocol->handle, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v12);
      if (!v6) {
        return 0;
      }
      goto LABEL_35;
    }
    if (v13)
    {
      *(_DWORD *)long long buf = 136446210;
      uint64_t v17 = "nw_protocol_plugins_reset";
      uint64_t v9 = "%{public}s called with null protocol->handle, no backtrace";
LABEL_33:
      _os_log_impl(&dword_1830D4000, v7, v8, v9, buf, 0xCu);
      goto LABEL_34;
    }
    goto LABEL_34;
  }
  nw_protocol_plugins_handle_reset((uint64_t)handle + 64, (uint64_t)a1, (uint64_t)a2);

  return nw_protocol_common_reset((uint64_t)a1, (uint64_t)a2);
}

void nw_protocol_plugins_handle_reset(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    BOOL v22 = "nw_protocol_plugins_handle_reset";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (!__nwlog_fault(v9, &type, &v19)) {
      goto LABEL_43;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (!os_log_type_enabled(v10, type)) {
        goto LABEL_43;
      }
      *(_DWORD *)long long buf = 136446210;
      BOOL v22 = "nw_protocol_plugins_handle_reset";
      uint64_t v12 = "%{public}s called with null plugins";
    }
    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      char v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v16 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)long long buf = 136446466;
          BOOL v22 = "nw_protocol_plugins_handle_reset";
          __int16 v23 = 2082;
          BOOL v24 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null plugins, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_43:
        if (!v9) {
          return;
        }
LABEL_44:
        free(v9);
        return;
      }
      if (!v16) {
        goto LABEL_43;
      }
      *(_DWORD *)long long buf = 136446210;
      BOOL v22 = "nw_protocol_plugins_handle_reset";
      uint64_t v12 = "%{public}s called with null plugins, no backtrace";
    }
    else
    {
      char v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (!os_log_type_enabled(v10, type)) {
        goto LABEL_43;
      }
      *(_DWORD *)long long buf = 136446210;
      BOOL v22 = "nw_protocol_plugins_handle_reset";
      uint64_t v12 = "%{public}s called with null plugins, backtrace limit exceeded";
    }
LABEL_42:
    _os_log_impl(&dword_1830D4000, v10, v11, v12, buf, 0xCu);
    goto LABEL_43;
  }
  if (a3)
  {
    if (gLogDatapath)
    {
      BOOL v13 = __nwlog_obj();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
      {
        char v14 = "invalid";
        if (a2 && *(void *)(a2 + 16)) {
          char v14 = *(const char **)(a2 + 16);
        }
        *(_DWORD *)long long buf = 136446722;
        BOOL v22 = "nw_protocol_plugins_handle_reset";
        __int16 v23 = 2080;
        BOOL v24 = (void *)v14;
        __int16 v25 = 2048;
        uint64_t v26 = a2;
        _os_log_impl(&dword_1830D4000, v13, OS_LOG_TYPE_DEBUG, "%{public}s called for %s:%p", buf, 0x20u);
      }
    }
    uint64_t v6 = *(uint64_t **)(a1 + 8);
    if (v6) {
      nw_protocol_plugin_metadata_reset(v6);
    }
    char v7 = *(void (***)(uint64_t, uint64_t))(a1 + 16);
    if (v7)
    {
      os_log_type_t v8 = *v7;
      if (v8) {
        v8(a2, a3);
      }
    }
    return;
  }
  __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  BOOL v22 = "nw_protocol_plugins_handle_reset";
  uint64_t v9 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v19 = 0;
  if (!__nwlog_fault(v9, &type, &v19)) {
    goto LABEL_43;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    char v10 = __nwlog_obj();
    os_log_type_t v11 = type;
    if (!os_log_type_enabled(v10, type)) {
      goto LABEL_43;
    }
    *(_DWORD *)long long buf = 136446210;
    BOOL v22 = "nw_protocol_plugins_handle_reset";
    uint64_t v12 = "%{public}s called with null other_protocol";
    goto LABEL_42;
  }
  if (!v19)
  {
    char v10 = __nwlog_obj();
    os_log_type_t v11 = type;
    if (!os_log_type_enabled(v10, type)) {
      goto LABEL_43;
    }
    *(_DWORD *)long long buf = 136446210;
    BOOL v22 = "nw_protocol_plugins_handle_reset";
    uint64_t v12 = "%{public}s called with null other_protocol, backtrace limit exceeded";
    goto LABEL_42;
  }
  uint64_t v17 = (char *)__nw_create_backtrace_string();
  char v10 = __nwlog_obj();
  os_log_type_t v11 = type;
  BOOL v18 = os_log_type_enabled(v10, type);
  if (!v17)
  {
    if (!v18) {
      goto LABEL_43;
    }
    *(_DWORD *)long long buf = 136446210;
    BOOL v22 = "nw_protocol_plugins_handle_reset";
    uint64_t v12 = "%{public}s called with null other_protocol, no backtrace";
    goto LABEL_42;
  }
  if (v18)
  {
    *(_DWORD *)long long buf = 136446466;
    BOOL v22 = "nw_protocol_plugins_handle_reset";
    __int16 v23 = 2082;
    BOOL v24 = v17;
    _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null other_protocol, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v17);
  if (v9) {
    goto LABEL_44;
  }
}

void nw_protocol_plugins_notify(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    uint64_t v17 = "nw_protocol_plugins_notify";
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (!__nwlog_fault(v6, &type, &v14)) {
      goto LABEL_36;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_36;
      }
      *(_DWORD *)long long buf = 136446210;
      uint64_t v17 = "nw_protocol_plugins_notify";
      uint64_t v9 = "%{public}s called with null protocol";
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      char v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)long long buf = 136446466;
          uint64_t v17 = "nw_protocol_plugins_notify";
          __int16 v18 = 2082;
          char v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_36:
        if (!v6) {
          return;
        }
        goto LABEL_37;
      }
      if (!v11) {
        goto LABEL_36;
      }
      *(_DWORD *)long long buf = 136446210;
      uint64_t v17 = "nw_protocol_plugins_notify";
      uint64_t v9 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      char v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_36;
      }
      *(_DWORD *)long long buf = 136446210;
      uint64_t v17 = "nw_protocol_plugins_notify";
      uint64_t v9 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
LABEL_35:
    _os_log_impl(&dword_1830D4000, v7, v8, v9, buf, 0xCu);
    goto LABEL_36;
  }
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)(a1 + 40);
  if (v4)
  {
    uint64_t v5 = a2;
    if (a3 == 15)
    {
      nw_protocol_plugins_handle_reset(v4 + 64, a1, a2);
      a1 = v3;
      a2 = v5;
      a3 = 15;
    }
    nw_protocol_common_notify(a1, a2, a3);
    return;
  }
  __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  uint64_t v17 = "nw_protocol_plugins_notify";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (!__nwlog_fault(v6, &type, &v14)) {
    goto LABEL_36;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    char v7 = __nwlog_obj();
    os_log_type_t v8 = type;
    if (!os_log_type_enabled(v7, type)) {
      goto LABEL_36;
    }
    *(_DWORD *)long long buf = 136446210;
    uint64_t v17 = "nw_protocol_plugins_notify";
    uint64_t v9 = "%{public}s called with null protocol->handle";
    goto LABEL_35;
  }
  if (!v14)
  {
    char v7 = __nwlog_obj();
    os_log_type_t v8 = type;
    if (!os_log_type_enabled(v7, type)) {
      goto LABEL_36;
    }
    *(_DWORD *)long long buf = 136446210;
    uint64_t v17 = "nw_protocol_plugins_notify";
    uint64_t v9 = "%{public}s called with null protocol->handle, backtrace limit exceeded";
    goto LABEL_35;
  }
  uint64_t v12 = (char *)__nw_create_backtrace_string();
  char v7 = __nwlog_obj();
  os_log_type_t v8 = type;
  BOOL v13 = os_log_type_enabled(v7, type);
  if (!v12)
  {
    if (!v13) {
      goto LABEL_36;
    }
    *(_DWORD *)long long buf = 136446210;
    uint64_t v17 = "nw_protocol_plugins_notify";
    uint64_t v9 = "%{public}s called with null protocol->handle, no backtrace";
    goto LABEL_35;
  }
  if (v13)
  {
    *(_DWORD *)long long buf = 136446466;
    uint64_t v17 = "nw_protocol_plugins_notify";
    __int16 v18 = 2082;
    char v19 = v12;
    _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null protocol->handle, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v12);
  if (v6) {
LABEL_37:
  }
    free(v6);
}

void nw_protocol_plugins_error(nw_protocol *a1, nw_protocol *a2, uint64_t a3)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    BOOL v31 = "nw_protocol_plugins_error";
    BOOL v11 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v28 = 0;
    if (!__nwlog_fault(v11, &type, &v28)) {
      goto LABEL_61;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v12 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (!os_log_type_enabled(v12, type)) {
        goto LABEL_61;
      }
      *(_DWORD *)long long buf = 136446210;
      BOOL v31 = "nw_protocol_plugins_error";
      char v14 = "%{public}s called with null protocol";
      goto LABEL_60;
    }
    if (!v28)
    {
      uint64_t v12 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (!os_log_type_enabled(v12, type)) {
        goto LABEL_61;
      }
      *(_DWORD *)long long buf = 136446210;
      BOOL v31 = "nw_protocol_plugins_error";
      char v14 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_60;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v12 = __nwlog_obj();
    os_log_type_t v13 = type;
    BOOL v22 = os_log_type_enabled(v12, type);
    if (!backtrace_string)
    {
      if (!v22) {
        goto LABEL_61;
      }
      *(_DWORD *)long long buf = 136446210;
      BOOL v31 = "nw_protocol_plugins_error";
      char v14 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_60;
    }
    if (v22)
    {
      *(_DWORD *)long long buf = 136446466;
      BOOL v31 = "nw_protocol_plugins_error";
      __int16 v32 = 2082;
      BOOL v33 = (nw_protocol_identifier *)backtrace_string;
      _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(backtrace_string);
LABEL_61:
    if (!v11) {
      return;
    }
    goto LABEL_62;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    BOOL v31 = "nw_protocol_plugins_error";
    BOOL v11 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v28 = 0;
    if (!__nwlog_fault(v11, &type, &v28)) {
      goto LABEL_61;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v12 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (!os_log_type_enabled(v12, type)) {
        goto LABEL_61;
      }
      *(_DWORD *)long long buf = 136446210;
      BOOL v31 = "nw_protocol_plugins_error";
      char v14 = "%{public}s called with null protocol->handle";
      goto LABEL_60;
    }
    if (!v28)
    {
      uint64_t v12 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (!os_log_type_enabled(v12, type)) {
        goto LABEL_61;
      }
      *(_DWORD *)long long buf = 136446210;
      BOOL v31 = "nw_protocol_plugins_error";
      char v14 = "%{public}s called with null protocol->handle, backtrace limit exceeded";
      goto LABEL_60;
    }
    __int16 v23 = (char *)__nw_create_backtrace_string();
    uint64_t v12 = __nwlog_obj();
    os_log_type_t v13 = type;
    BOOL v24 = os_log_type_enabled(v12, type);
    if (v23)
    {
      if (v24)
      {
        *(_DWORD *)long long buf = 136446466;
        BOOL v31 = "nw_protocol_plugins_error";
        __int16 v32 = 2082;
        BOOL v33 = (nw_protocol_identifier *)v23;
        _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s called with null protocol->handle, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v23);
      if (!v11) {
        return;
      }
LABEL_62:
      free(v11);
      return;
    }
    if (v24)
    {
      *(_DWORD *)long long buf = 136446210;
      BOOL v31 = "nw_protocol_plugins_error";
      char v14 = "%{public}s called with null protocol->handle, no backtrace";
LABEL_60:
      _os_log_impl(&dword_1830D4000, v12, v13, v14, buf, 0xCu);
      goto LABEL_61;
    }
    goto LABEL_61;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    BOOL v31 = "nw_protocol_plugins_handle_error";
    os_log_type_t v15 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v28 = 0;
    if (!__nwlog_fault(v15, &type, &v28)) {
      goto LABEL_66;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v16 = __nwlog_obj();
      os_log_type_t v17 = type;
      if (!os_log_type_enabled(v16, type)) {
        goto LABEL_66;
      }
      *(_DWORD *)long long buf = 136446210;
      BOOL v31 = "nw_protocol_plugins_handle_error";
      __int16 v18 = "%{public}s called with null other_protocol";
    }
    else if (v28)
    {
      __int16 v25 = (char *)__nw_create_backtrace_string();
      BOOL v16 = __nwlog_obj();
      os_log_type_t v17 = type;
      BOOL v26 = os_log_type_enabled(v16, type);
      if (v25)
      {
        if (v26)
        {
          *(_DWORD *)long long buf = 136446466;
          BOOL v31 = "nw_protocol_plugins_handle_error";
          __int16 v32 = 2082;
          BOOL v33 = (nw_protocol_identifier *)v25;
          _os_log_impl(&dword_1830D4000, v16, v17, "%{public}s called with null other_protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v25);
        goto LABEL_66;
      }
      if (!v26)
      {
LABEL_66:
        if (v15) {
          free(v15);
        }
        goto LABEL_14;
      }
      *(_DWORD *)long long buf = 136446210;
      BOOL v31 = "nw_protocol_plugins_handle_error";
      __int16 v18 = "%{public}s called with null other_protocol, no backtrace";
    }
    else
    {
      BOOL v16 = __nwlog_obj();
      os_log_type_t v17 = type;
      if (!os_log_type_enabled(v16, type)) {
        goto LABEL_66;
      }
      *(_DWORD *)long long buf = 136446210;
      BOOL v31 = "nw_protocol_plugins_handle_error";
      __int16 v18 = "%{public}s called with null other_protocol, backtrace limit exceeded";
    }
    _os_log_impl(&dword_1830D4000, v16, v17, v18, buf, 0xCu);
    goto LABEL_66;
  }
  if (gLogDatapath)
  {
    char v19 = __nwlog_obj();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
    {
      identifier = a1->identifier;
      if (!identifier) {
        identifier = (nw_protocol_identifier *)"invalid";
      }
      *(_DWORD *)long long buf = 136446722;
      BOOL v31 = "nw_protocol_plugins_handle_error";
      __int16 v32 = 2080;
      BOOL v33 = identifier;
      __int16 v34 = 2048;
      int v35 = a1;
      _os_log_impl(&dword_1830D4000, v19, OS_LOG_TYPE_DEBUG, "%{public}s called for %s:%p", buf, 0x20u);
    }
  }
  uint64_t v7 = handle[11];
  if (!v7
    || (*(unsigned char *)(v7 + 212) & 0x20) == 0
    && (*(unsigned int (**)(nw_protocol *, nw_protocol *, uint64_t))(v7 + 144))(a1, a2, a3))
  {
    uint64_t v8 = handle[9];
    if (v8 && (*(unsigned char *)(v8 + 142) & 2) != 0)
    {
      *(_DWORD *)(v8 + 136) = a3;
    }
    else
    {
      uint64_t v9 = handle[11];
      if (!v9)
      {
LABEL_14:
        nw_protocol_common_error((uint64_t)a1, (uint64_t)a2);
        return;
      }
      *(_DWORD *)(v9 + 176) = a3;
      if ((*(unsigned char *)(v9 + 212) & 0x10) != 0)
      {
        if (gLogDatapath)
        {
          uint64_t v27 = __nwlog_obj();
          if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)long long buf = 136446210;
            BOOL v31 = "nw_protocol_plugin_retry_error";
            _os_log_impl(&dword_1830D4000, v27, OS_LOG_TYPE_DEBUG, "%{public}s holding onto error because reissuing", buf, 0xCu);
          }
        }
      }
      else
      {
        char v10 = *(uint64_t (**)(nw_protocol *, nw_protocol *, BOOL))(v9 + 152);
        if (!v10 || (v10(a1, a2, *(_DWORD *)(v9 + 208) != 0) & 1) == 0) {
          goto LABEL_14;
        }
      }
    }
  }
}

void nw_protocol_plugins_disconnected(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_plugins_disconnected";
    char v19 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v42 = 0;
    if (!__nwlog_fault(v19, &type, &v42)) {
      goto LABEL_89;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v20 = __nwlog_obj();
      os_log_type_t v21 = type;
      if (!os_log_type_enabled(v20, type)) {
        goto LABEL_89;
      }
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_plugins_disconnected";
      BOOL v22 = "%{public}s called with null protocol";
    }
    else if (v42)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v20 = __nwlog_obj();
      os_log_type_t v21 = type;
      BOOL v30 = os_log_type_enabled(v20, type);
      if (backtrace_string)
      {
        if (v30)
        {
          *(_DWORD *)long long buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_plugins_disconnected";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v20, v21, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_89:
        if (!v19) {
          return;
        }
LABEL_90:
        free(v19);
        return;
      }
      if (!v30) {
        goto LABEL_89;
      }
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_plugins_disconnected";
      BOOL v22 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      uint64_t v20 = __nwlog_obj();
      os_log_type_t v21 = type;
      if (!os_log_type_enabled(v20, type)) {
        goto LABEL_89;
      }
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_plugins_disconnected";
      BOOL v22 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
LABEL_88:
    _os_log_impl(&dword_1830D4000, v20, v21, v22, buf, 0xCu);
    goto LABEL_89;
  }
  handle = a1->handle;
  if (handle)
  {
    if (a2)
    {
      if (gLogDatapath)
      {
        uint64_t v27 = __nwlog_obj();
        if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
        {
          identifier = a1->identifier;
          if (!identifier) {
            identifier = (nw_protocol_identifier *)"invalid";
          }
          *(_DWORD *)long long buf = 136446722;
          *(void *)&uint8_t buf[4] = "nw_protocol_plugins_handle_disconnected";
          *(_WORD *)&buf[12] = 2080;
          *(void *)&buf[14] = identifier;
          *(_WORD *)&unsigned char buf[22] = 2048;
          os_log_type_t v45 = a1;
          _os_log_impl(&dword_1830D4000, v27, OS_LOG_TYPE_DEBUG, "%{public}s called for %s:%p", buf, 0x20u);
        }
      }
      uint64_t v5 = handle[11];
      if (v5 && (*(unsigned char *)(v5 + 212) & 0x20) != 0) {
        goto LABEL_22;
      }
      uint64_t v6 = handle[9];
      if (v6)
      {
        char v7 = *(unsigned char *)(v6 + 142);
        if ((v7 & 2) == 0)
        {
          if (nw_protocol_plugin_metadata_handle_eof(handle[9], a1))
          {
            uint64_t v5 = handle[11];
            goto LABEL_11;
          }
          char v7 = *(unsigned char *)(v6 + 142);
        }
        int v10 = 0;
        *(unsigned char *)(v6 + 142) = v7 | 8;
        goto LABEL_23;
      }
LABEL_11:
      if (v5)
      {
        int v8 = *(char *)(v5 + 212);
        if ((v8 & 0x80000000) == 0)
        {
          if ((v8 & 0x10) == 0)
          {
            if ((v8 & 1) == 0)
            {
              uint64_t v9 = *(uint64_t (**)(nw_protocol *, nw_protocol *, BOOL))(v5 + 152);
              if (v9)
              {
                int v10 = v9(a1, a2, *(_DWORD *)(v5 + 208) != 0) ^ 1;
                goto LABEL_23;
              }
              goto LABEL_20;
            }
            if (gLogDatapath)
            {
              uint64_t v39 = v5;
              os_log_type_t v40 = __nwlog_obj();
              BOOL v41 = os_log_type_enabled(v40, OS_LOG_TYPE_DEBUG);
              uint64_t v5 = v39;
              if (v41)
              {
                *(_DWORD *)long long buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_protocol_plugin_retry_disconnected";
                _os_log_impl(&dword_1830D4000, v40, OS_LOG_TYPE_DEBUG, "%{public}s holding onto disconnected because getting input frames", buf, 0xCu);
                uint64_t v5 = v39;
              }
            }
            int v10 = 0;
            *(unsigned char *)(v5 + 212) |= 2u;
LABEL_23:
            BOOL v11 = (nw_frame_array_s *)handle[9];
            if (v11)
            {
              if (BYTE6(v11[8].tqh_last))
              {
                nw_protocol_plugin_metadata_deep_copy_input_frame_array((nw_frame_array_s *)handle[9]);
                nw_protocol_plugin_metadata_deep_copy_input_frame_array(v11 + 1);
                if ((v10 & 1) == 0) {
                  return;
                }
              }
              else
              {
                if (gLogDatapath)
                {
                  int v35 = __nwlog_obj();
                  if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
                  {
                    *(_DWORD *)long long buf = 136446210;
                    *(void *)&uint8_t buf[4] = "nw_protocol_finalize_temp_frame_array";
                    _os_log_impl(&dword_1830D4000, v35, OS_LOG_TYPE_DEBUG, "%{public}s called", buf, 0xCu);
                  }
                }
                *(void *)long long buf = MEMORY[0x1E4F143A8];
                *(void *)&buf[8] = 0x40000000;
                *(void *)&buf[16] = ___ZL37nw_protocol_finalize_temp_frame_arrayP16nw_frame_array_sb_block_invoke_3298;
                os_log_type_t v45 = (nw_protocol *)&__block_descriptor_tmp_36_3299;
                __int16 v46 = v11;
                char v47 = 0;
                tqh_first = v11->tqh_first;
                do
                {
                  if (!tqh_first) {
                    break;
                  }
                  os_log_type_t v13 = (nw_frame *)*((void *)tqh_first + 4);
                  char v14 = (*(uint64_t (**)(unsigned char *))&buf[16])(buf);
                  tqh_first = v13;
                }
                while ((v14 & 1) != 0);
                os_log_type_t v15 = v11 + 1;
                if (gLogDatapath)
                {
                  uint64_t v36 = __nwlog_obj();
                  if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
                  {
                    *(_DWORD *)long long buf = 136446210;
                    *(void *)&uint8_t buf[4] = "nw_protocol_finalize_temp_frame_array";
                    _os_log_impl(&dword_1830D4000, v36, OS_LOG_TYPE_DEBUG, "%{public}s called", buf, 0xCu);
                  }
                }
                *(void *)long long buf = MEMORY[0x1E4F143A8];
                *(void *)&buf[8] = 0x40000000;
                *(void *)&buf[16] = ___ZL37nw_protocol_finalize_temp_frame_arrayP16nw_frame_array_sb_block_invoke_3298;
                os_log_type_t v45 = (nw_protocol *)&__block_descriptor_tmp_36_3299;
                __int16 v46 = v15;
                char v47 = 0;
                BOOL v16 = v15->tqh_first;
                do
                {
                  if (!v16) {
                    break;
                  }
                  os_log_type_t v17 = (nw_frame *)*((void *)v16 + 4);
                  char v18 = (*(uint64_t (**)(unsigned char *))&buf[16])(buf);
                  BOOL v16 = v17;
                }
                while ((v18 & 1) != 0);
                if ((v10 & 1) == 0) {
                  return;
                }
              }
            }
            else if (!v10)
            {
              return;
            }
LABEL_38:
            nw_protocol_common_disconnected((uint64_t)a1, (uint64_t)a2);
            return;
          }
          if (gLogDatapath)
          {
            BOOL v38 = __nwlog_obj();
            if (os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)long long buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_protocol_plugin_retry_disconnected";
              _os_log_impl(&dword_1830D4000, v38, OS_LOG_TYPE_DEBUG, "%{public}s holding onto disconnected because reissuing", buf, 0xCu);
              int v10 = 0;
              goto LABEL_23;
            }
          }
LABEL_22:
          int v10 = 0;
          goto LABEL_23;
        }
        if (gLogDatapath)
        {
          size_t v37 = __nwlog_obj();
          if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)long long buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_protocol_plugin_retry_disconnected";
            _os_log_impl(&dword_1830D4000, v37, OS_LOG_TYPE_DEBUG, "%{public}s sending disconnected because disconnect was received", buf, 0xCu);
          }
        }
      }
LABEL_20:
      int v10 = 1;
      goto LABEL_23;
    }
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_plugins_handle_disconnected";
    __int16 v23 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v42 = 0;
    if (__nwlog_fault(v23, &type, &v42))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        BOOL v24 = __nwlog_obj();
        os_log_type_t v25 = type;
        if (!os_log_type_enabled(v24, type)) {
          goto LABEL_94;
        }
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_plugins_handle_disconnected";
        BOOL v26 = "%{public}s called with null other_protocol";
        goto LABEL_93;
      }
      if (!v42)
      {
        BOOL v24 = __nwlog_obj();
        os_log_type_t v25 = type;
        if (!os_log_type_enabled(v24, type)) {
          goto LABEL_94;
        }
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_plugins_handle_disconnected";
        BOOL v26 = "%{public}s called with null other_protocol, backtrace limit exceeded";
        goto LABEL_93;
      }
      BOOL v33 = (char *)__nw_create_backtrace_string();
      BOOL v24 = __nwlog_obj();
      os_log_type_t v25 = type;
      BOOL v34 = os_log_type_enabled(v24, type);
      if (v33)
      {
        if (v34)
        {
          *(_DWORD *)long long buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_plugins_handle_disconnected";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v33;
          _os_log_impl(&dword_1830D4000, v24, v25, "%{public}s called with null other_protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v33);
        goto LABEL_94;
      }
      if (v34)
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_plugins_handle_disconnected";
        BOOL v26 = "%{public}s called with null other_protocol, no backtrace";
LABEL_93:
        _os_log_impl(&dword_1830D4000, v24, v25, v26, buf, 0xCu);
      }
    }
LABEL_94:
    if (v23) {
      free(v23);
    }
    goto LABEL_38;
  }
  __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_protocol_plugins_disconnected";
  char v19 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v42 = 0;
  if (!__nwlog_fault(v19, &type, &v42)) {
    goto LABEL_89;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    uint64_t v20 = __nwlog_obj();
    os_log_type_t v21 = type;
    if (!os_log_type_enabled(v20, type)) {
      goto LABEL_89;
    }
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_plugins_disconnected";
    BOOL v22 = "%{public}s called with null protocol->handle";
    goto LABEL_88;
  }
  if (!v42)
  {
    uint64_t v20 = __nwlog_obj();
    os_log_type_t v21 = type;
    if (!os_log_type_enabled(v20, type)) {
      goto LABEL_89;
    }
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_plugins_disconnected";
    BOOL v22 = "%{public}s called with null protocol->handle, backtrace limit exceeded";
    goto LABEL_88;
  }
  BOOL v31 = (char *)__nw_create_backtrace_string();
  uint64_t v20 = __nwlog_obj();
  os_log_type_t v21 = type;
  BOOL v32 = os_log_type_enabled(v20, type);
  if (!v31)
  {
    if (!v32) {
      goto LABEL_89;
    }
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_plugins_disconnected";
    BOOL v22 = "%{public}s called with null protocol->handle, no backtrace";
    goto LABEL_88;
  }
  if (v32)
  {
    *(_DWORD *)long long buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_protocol_plugins_disconnected";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = v31;
    _os_log_impl(&dword_1830D4000, v20, v21, "%{public}s called with null protocol->handle, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v31);
  if (v19) {
    goto LABEL_90;
  }
}

void nw_protocol_plugins_input_finished(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    BOOL v34 = "nw_protocol_plugins_input_finished";
    os_log_type_t v13 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v31 = 0;
    if (!__nwlog_fault(v13, &type, &v31)) {
      goto LABEL_78;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (!os_log_type_enabled(v14, type)) {
        goto LABEL_78;
      }
      *(_DWORD *)long long buf = 136446210;
      BOOL v34 = "nw_protocol_plugins_input_finished";
      BOOL v16 = "%{public}s called with null protocol";
      goto LABEL_77;
    }
    if (!v31)
    {
      char v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (!os_log_type_enabled(v14, type)) {
        goto LABEL_78;
      }
      *(_DWORD *)long long buf = 136446210;
      BOOL v34 = "nw_protocol_plugins_input_finished";
      BOOL v16 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_77;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    char v14 = __nwlog_obj();
    os_log_type_t v15 = type;
    BOOL v24 = os_log_type_enabled(v14, type);
    if (!backtrace_string)
    {
      if (!v24) {
        goto LABEL_78;
      }
      *(_DWORD *)long long buf = 136446210;
      BOOL v34 = "nw_protocol_plugins_input_finished";
      BOOL v16 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_77;
    }
    if (v24)
    {
      *(_DWORD *)long long buf = 136446466;
      BOOL v34 = "nw_protocol_plugins_input_finished";
      __int16 v35 = 2082;
      uint64_t v36 = (nw_protocol_identifier *)backtrace_string;
      _os_log_impl(&dword_1830D4000, v14, v15, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(backtrace_string);
LABEL_78:
    if (!v13) {
      return;
    }
    goto LABEL_79;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    BOOL v34 = "nw_protocol_plugins_input_finished";
    os_log_type_t v13 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v31 = 0;
    if (!__nwlog_fault(v13, &type, &v31)) {
      goto LABEL_78;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (!os_log_type_enabled(v14, type)) {
        goto LABEL_78;
      }
      *(_DWORD *)long long buf = 136446210;
      BOOL v34 = "nw_protocol_plugins_input_finished";
      BOOL v16 = "%{public}s called with null protocol->handle";
      goto LABEL_77;
    }
    if (!v31)
    {
      char v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (!os_log_type_enabled(v14, type)) {
        goto LABEL_78;
      }
      *(_DWORD *)long long buf = 136446210;
      BOOL v34 = "nw_protocol_plugins_input_finished";
      BOOL v16 = "%{public}s called with null protocol->handle, backtrace limit exceeded";
      goto LABEL_77;
    }
    os_log_type_t v25 = (char *)__nw_create_backtrace_string();
    char v14 = __nwlog_obj();
    os_log_type_t v15 = type;
    BOOL v26 = os_log_type_enabled(v14, type);
    if (v25)
    {
      if (v26)
      {
        *(_DWORD *)long long buf = 136446466;
        BOOL v34 = "nw_protocol_plugins_input_finished";
        __int16 v35 = 2082;
        uint64_t v36 = (nw_protocol_identifier *)v25;
        _os_log_impl(&dword_1830D4000, v14, v15, "%{public}s called with null protocol->handle, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v25);
      if (!v13) {
        return;
      }
LABEL_79:
      free(v13);
      return;
    }
    if (v26)
    {
      *(_DWORD *)long long buf = 136446210;
      BOOL v34 = "nw_protocol_plugins_input_finished";
      BOOL v16 = "%{public}s called with null protocol->handle, no backtrace";
LABEL_77:
      _os_log_impl(&dword_1830D4000, v14, v15, v16, buf, 0xCu);
      goto LABEL_78;
    }
    goto LABEL_78;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    BOOL v34 = "nw_protocol_plugins_handle_input_finished";
    os_log_type_t v17 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v31 = 0;
    if (!__nwlog_fault(v17, &type, &v31)) {
      goto LABEL_83;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v18 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (!os_log_type_enabled(v18, type)) {
        goto LABEL_83;
      }
      *(_DWORD *)long long buf = 136446210;
      BOOL v34 = "nw_protocol_plugins_handle_input_finished";
      uint64_t v20 = "%{public}s called with null other_protocol";
    }
    else if (v31)
    {
      uint64_t v27 = (char *)__nw_create_backtrace_string();
      char v18 = __nwlog_obj();
      os_log_type_t v19 = type;
      BOOL v28 = os_log_type_enabled(v18, type);
      if (v27)
      {
        if (v28)
        {
          *(_DWORD *)long long buf = 136446466;
          BOOL v34 = "nw_protocol_plugins_handle_input_finished";
          __int16 v35 = 2082;
          uint64_t v36 = (nw_protocol_identifier *)v27;
          _os_log_impl(&dword_1830D4000, v18, v19, "%{public}s called with null other_protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v27);
        goto LABEL_83;
      }
      if (!v28)
      {
LABEL_83:
        if (v17) {
          free(v17);
        }
        goto LABEL_16;
      }
      *(_DWORD *)long long buf = 136446210;
      BOOL v34 = "nw_protocol_plugins_handle_input_finished";
      uint64_t v20 = "%{public}s called with null other_protocol, no backtrace";
    }
    else
    {
      char v18 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (!os_log_type_enabled(v18, type)) {
        goto LABEL_83;
      }
      *(_DWORD *)long long buf = 136446210;
      BOOL v34 = "nw_protocol_plugins_handle_input_finished";
      uint64_t v20 = "%{public}s called with null other_protocol, backtrace limit exceeded";
    }
    _os_log_impl(&dword_1830D4000, v18, v19, v20, buf, 0xCu);
    goto LABEL_83;
  }
  if (gLogDatapath)
  {
    os_log_type_t v21 = __nwlog_obj();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
    {
      identifier = a1->identifier;
      if (!identifier) {
        identifier = (nw_protocol_identifier *)"invalid";
      }
      *(_DWORD *)long long buf = 136446722;
      BOOL v34 = "nw_protocol_plugins_handle_input_finished";
      __int16 v35 = 2080;
      uint64_t v36 = identifier;
      __int16 v37 = 2048;
      BOOL v38 = a1;
      _os_log_impl(&dword_1830D4000, v21, OS_LOG_TYPE_DEBUG, "%{public}s called for %s:%p", buf, 0x20u);
    }
  }
  uint64_t v5 = handle[11];
  if (v5 && (*(unsigned char *)(v5 + 212) & 0x20) != 0) {
    return;
  }
  uint64_t v6 = handle[9];
  if (!v6) {
    goto LABEL_11;
  }
  char v7 = *(unsigned char *)(v6 + 142);
  if ((v7 & 2) != 0)
  {
LABEL_21:
    *(unsigned char *)(v6 + 142) = v7 | 4;
    if (gLogDatapath)
    {
      int v10 = __nwlog_obj();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v29 = (nw_protocol_identifier *)"invalid";
        if (a1->identifier) {
          uint64_t v29 = a1->identifier;
        }
        *(_DWORD *)long long buf = 136446466;
        BOOL v34 = "nw_protocol_plugins_handle_input_finished";
        __int16 v35 = 2080;
        uint64_t v36 = v29;
        uint64_t v12 = "%{public}s metadata plugin for %s caused input_finished to defer input_finished";
        goto LABEL_66;
      }
    }
    return;
  }
  if (!nw_protocol_plugin_metadata_handle_eof(handle[9], a1))
  {
    char v7 = *(unsigned char *)(v6 + 142);
    goto LABEL_21;
  }
  uint64_t v5 = handle[11];
LABEL_11:
  if (!v5)
  {
LABEL_16:
    nw_protocol_common_input_finished((uint64_t)a1, (uint64_t)a2);
    return;
  }
  if ((*(unsigned char *)(v5 + 212) & 0x10) != 0)
  {
    if (!gLogDatapath) {
      return;
    }
    uint64_t v9 = __nwlog_obj();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 136446210;
      BOOL v34 = "nw_protocol_plugin_retry_input_finished";
      _os_log_impl(&dword_1830D4000, v9, OS_LOG_TYPE_DEBUG, "%{public}s holding onto input_finished because reissuing", buf, 0xCu);
    }
  }
  else if (*(unsigned char *)(v5 + 212))
  {
    if (gLogDatapath)
    {
      BOOL v30 = __nwlog_obj();
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 136446210;
        BOOL v34 = "nw_protocol_plugin_retry_input_finished";
        _os_log_impl(&dword_1830D4000, v30, OS_LOG_TYPE_DEBUG, "%{public}s holding onto input_finished because getting input frames", buf, 0xCu);
      }
    }
    *(unsigned char *)(v5 + 212) |= 4u;
  }
  else
  {
    int v8 = *(unsigned int (**)(nw_protocol *, nw_protocol *, BOOL))(v5 + 152);
    if (!v8 || !v8(a1, a2, *(_DWORD *)(v5 + 208) != 0)) {
      goto LABEL_16;
    }
  }
  if (gLogDatapath)
  {
    int v10 = __nwlog_obj();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      BOOL v11 = (nw_protocol_identifier *)"invalid";
      if (a1->identifier) {
        BOOL v11 = a1->identifier;
      }
      *(_DWORD *)long long buf = 136446466;
      BOOL v34 = "nw_protocol_plugins_handle_input_finished";
      __int16 v35 = 2080;
      uint64_t v36 = v11;
      uint64_t v12 = "%{public}s retry plugin for %s caused input_finished to defer input_finished";
LABEL_66:
      _os_log_impl(&dword_1830D4000, v10, OS_LOG_TYPE_DEBUG, v12, buf, 0x16u);
    }
  }
}

void nw_protocol_plugins_connected(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    os_log_type_t v25 = "nw_protocol_plugins_connected";
    int v8 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (!__nwlog_fault(v8, &type, &v22)) {
      goto LABEL_63;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (!os_log_type_enabled(v9, type)) {
        goto LABEL_63;
      }
      *(_DWORD *)long long buf = 136446210;
      os_log_type_t v25 = "nw_protocol_plugins_connected";
      BOOL v11 = "%{public}s called with null protocol";
    }
    else if (v22)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v17 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)long long buf = 136446466;
          os_log_type_t v25 = "nw_protocol_plugins_connected";
          __int16 v26 = 2082;
          uint64_t v27 = (nw_protocol *)backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_63:
        if (!v8) {
          return;
        }
        goto LABEL_64;
      }
      if (!v17) {
        goto LABEL_63;
      }
      *(_DWORD *)long long buf = 136446210;
      os_log_type_t v25 = "nw_protocol_plugins_connected";
      BOOL v11 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (!os_log_type_enabled(v9, type)) {
        goto LABEL_63;
      }
      *(_DWORD *)long long buf = 136446210;
      os_log_type_t v25 = "nw_protocol_plugins_connected";
      BOOL v11 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    goto LABEL_62;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    os_log_type_t v25 = "nw_protocol_plugins_connected";
    int v8 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (!__nwlog_fault(v8, &type, &v22)) {
      goto LABEL_63;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v22)
      {
        uint64_t v9 = __nwlog_obj();
        os_log_type_t v10 = type;
        if (!os_log_type_enabled(v9, type)) {
          goto LABEL_63;
        }
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v25 = "nw_protocol_plugins_connected";
        BOOL v11 = "%{public}s called with null protocol->handle, backtrace limit exceeded";
        goto LABEL_62;
      }
      char v18 = (char *)__nw_create_backtrace_string();
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v19 = os_log_type_enabled(v9, type);
      if (!v18)
      {
        if (!v19) {
          goto LABEL_63;
        }
        *(_DWORD *)long long buf = 136446210;
        os_log_type_t v25 = "nw_protocol_plugins_connected";
        BOOL v11 = "%{public}s called with null protocol->handle, no backtrace";
        goto LABEL_62;
      }
      if (v19)
      {
        *(_DWORD *)long long buf = 136446466;
        os_log_type_t v25 = "nw_protocol_plugins_connected";
        __int16 v26 = 2082;
        uint64_t v27 = (nw_protocol *)v18;
        uint64_t v20 = "%{public}s called with null protocol->handle, dumping backtrace:%{public}s";
LABEL_47:
        _os_log_impl(&dword_1830D4000, v9, v10, v20, buf, 0x16u);
      }
LABEL_48:
      free(v18);
      if (!v8) {
        return;
      }
LABEL_64:
      free(v8);
      return;
    }
    uint64_t v9 = __nwlog_obj();
    os_log_type_t v10 = type;
    if (!os_log_type_enabled(v9, type)) {
      goto LABEL_63;
    }
    *(_DWORD *)long long buf = 136446210;
    os_log_type_t v25 = "nw_protocol_plugins_connected";
    BOOL v11 = "%{public}s called with null protocol->handle";
LABEL_62:
    _os_log_impl(&dword_1830D4000, v9, v10, v11, buf, 0xCu);
    goto LABEL_63;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    os_log_type_t v25 = "nw_protocol_plugins_handle_connected";
    int v8 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (!__nwlog_fault(v8, &type, &v22)) {
      goto LABEL_63;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (!os_log_type_enabled(v9, type)) {
        goto LABEL_63;
      }
      *(_DWORD *)long long buf = 136446210;
      os_log_type_t v25 = "nw_protocol_plugins_handle_connected";
      BOOL v11 = "%{public}s called with null other_protocol";
      goto LABEL_62;
    }
    if (!v22)
    {
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (!os_log_type_enabled(v9, type)) {
        goto LABEL_63;
      }
      *(_DWORD *)long long buf = 136446210;
      os_log_type_t v25 = "nw_protocol_plugins_handle_connected";
      BOOL v11 = "%{public}s called with null other_protocol, backtrace limit exceeded";
      goto LABEL_62;
    }
    char v18 = (char *)__nw_create_backtrace_string();
    uint64_t v9 = __nwlog_obj();
    os_log_type_t v10 = type;
    BOOL v21 = os_log_type_enabled(v9, type);
    if (!v18)
    {
      if (!v21) {
        goto LABEL_63;
      }
      *(_DWORD *)long long buf = 136446210;
      os_log_type_t v25 = "nw_protocol_plugins_handle_connected";
      BOOL v11 = "%{public}s called with null other_protocol, no backtrace";
      goto LABEL_62;
    }
    if (v21)
    {
      *(_DWORD *)long long buf = 136446466;
      os_log_type_t v25 = "nw_protocol_plugins_handle_connected";
      __int16 v26 = 2082;
      uint64_t v27 = (nw_protocol *)v18;
      uint64_t v20 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
      goto LABEL_47;
    }
    goto LABEL_48;
  }
  if (gLogDatapath)
  {
    uint64_t v12 = __nwlog_obj();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      identifier = a1->identifier;
      if (!identifier) {
        identifier = (nw_protocol_identifier *)"invalid";
      }
      *(_DWORD *)long long buf = 136446722;
      os_log_type_t v25 = "nw_protocol_plugins_handle_connected";
      __int16 v26 = 2080;
      uint64_t v27 = (nw_protocol *)identifier;
      __int16 v28 = 2048;
      uint64_t v29 = a1;
      _os_log_impl(&dword_1830D4000, v12, OS_LOG_TYPE_DEBUG, "%{public}s called for %s:%p", buf, 0x20u);
    }
  }
  uint64_t v5 = *((void *)handle + 9);
  if (v5)
  {
    if (gLogDatapath)
    {
      char v14 = __nwlog_obj();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
      {
        os_log_type_t v15 = a1->identifier;
        if (!v15) {
          os_log_type_t v15 = (nw_protocol_identifier *)"invalid";
        }
        *(_DWORD *)long long buf = 136446722;
        os_log_type_t v25 = "nw_protocol_plugin_metadata_connected";
        __int16 v26 = 2048;
        uint64_t v27 = a1;
        __int16 v28 = 2080;
        uint64_t v29 = (nw_protocol *)v15;
        _os_log_impl(&dword_1830D4000, v14, OS_LOG_TYPE_DEBUG, "%{public}s protocol %p:%s got connected event", buf, 0x20u);
      }
    }
    char v6 = *(unsigned char *)(v5 + 142);
    if ((v6 & 1) == 0)
    {
      v6 |= 1u;
      *(unsigned char *)(v5 + 140) = 0;
    }
    *(unsigned char *)(v5 + 142) = v6 & 0xEF;
  }
  char v7 = (nw_protocol_plugin_retry *)*((void *)handle + 11);
  if (v7) {
    nw_protocol_plugin_retry_connected(v7, a1, a2);
  }
  else {
    nw_protocol_common_connected((uint64_t)a1, (uint64_t)a2);
  }
}

void nw_protocol_plugin_retry_connected(nw_protocol_plugin_retry *a1, nw_protocol *a2, nw_protocol *a3)
{
  uint64_t v171 = *MEMORY[0x1E4F143B8];
  if (gLogDatapath)
  {
    uint64_t v77 = __nwlog_obj();
    if (os_log_type_enabled(v77, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_protocol_plugin_retry_connected";
      *(_WORD *)&buf[12] = 2048;
      *(void *)&buf[14] = a2;
      _os_log_impl(&dword_1830D4000, v77, OS_LOG_TYPE_DEBUG, "%{public}s called %p", buf, 0x16u);
    }
  }
  uint64_t default_input_handler = (uint64_t)a2->default_input_handler;
  if (default_input_handler)
  {
    char v7 = *(void **)(default_input_handler + 40);
    if (v7 == &nw_protocol_ref_counted_handle)
    {
      uint64_t v8 = *(void *)(default_input_handler + 88);
      if (v8) {
        *(void *)(default_input_handler + 88) = v8 + 1;
      }
    }
    if (a3)
    {
      handle = a3->handle;
      if (handle == &nw_protocol_ref_counted_handle)
      {
        callbacks = a3[1].callbacks;
        if (callbacks) {
          a3[1].callbacks = (nw_protocol_callbacks *)((char *)&callbacks->add_input_handler + 1);
        }
      }
      uint64_t v11 = *(void *)(default_input_handler + 24);
      if (v11)
      {
        uint64_t v12 = *(void (**)(uint64_t, nw_protocol *))(v11 + 40);
        if (v12)
        {
          v12(default_input_handler, a3);
LABEL_13:
          if (handle != &nw_protocol_ref_counted_handle
            || a3->handle != &nw_protocol_ref_counted_handle
            || (char v47 = a3[1].callbacks) == 0
            || (uint64_t v48 = (nw_protocol_callbacks *)((char *)v47 - 1), (a3[1].callbacks = v48) != 0))
          {
LABEL_15:
            if (v7 == &nw_protocol_ref_counted_handle
              && *(_UNKNOWN **)(default_input_handler + 40) == &nw_protocol_ref_counted_handle)
            {
              uint64_t v43 = *(void *)(default_input_handler + 88);
              if (v43)
              {
                uint64_t v44 = v43 - 1;
                *(void *)(default_input_handler + 88) = v44;
                if (!v44)
                {
                  os_log_type_t v45 = *(void (***)(void))(default_input_handler + 64);
                  if (v45)
                  {
                    *(void *)(default_input_handler + 64) = 0;
                    v45[2](v45);
                    _Block_release(v45);
                  }
                  if (*(unsigned char *)(default_input_handler + 72))
                  {
                    __int16 v46 = *(const void **)(default_input_handler + 64);
                    if (v46) {
                      _Block_release(v46);
                    }
                  }
                  goto LABEL_85;
                }
              }
            }
            goto LABEL_17;
          }
          uint64_t v49 = *(void (***)(void))a3[1].flow_id;
          if (v49)
          {
            *(void *)a3[1].flow_id = 0;
            v49[2](v49);
            _Block_release(v49);
          }
          if (a3[1].flow_id[8])
          {
            __int16 v50 = *(const void **)a3[1].flow_id;
            if (v50) {
              _Block_release(v50);
            }
          }
          uint64_t v51 = a3;
LABEL_94:
          free(v51);
          goto LABEL_15;
        }
      }
      __nwlog_obj();
      os_log_type_t v72 = *(const char **)(default_input_handler + 16);
      *(_DWORD *)long long buf = 136446722;
      *(void *)&uint8_t buf[4] = "__nw_protocol_connected";
      if (!v72) {
        os_log_type_t v72 = "invalid";
      }
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v72;
      *(_WORD *)&unsigned char buf[22] = 2048;
      BOOL v167 = (void *)default_input_handler;
      type[0] = OS_LOG_TYPE_ERROR;
      os_log_type_t v165 = OS_LOG_TYPE_DEFAULT;
      os_log_type_t v161 = (char *)_os_log_send_and_compose_impl();
      if (__nwlog_fault(v161, type, &v165))
      {
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          uint64_t v73 = __nwlog_obj();
          os_log_type_t v74 = type[0];
          if (!os_log_type_enabled(v73, type[0])) {
            goto LABEL_196;
          }
          uint64_t v75 = *(const char **)(default_input_handler + 16);
          if (!v75) {
            uint64_t v75 = "invalid";
          }
          *(_DWORD *)long long buf = 136446722;
          *(void *)&uint8_t buf[4] = "__nw_protocol_connected";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v75;
          *(_WORD *)&unsigned char buf[22] = 2048;
          BOOL v167 = (void *)default_input_handler;
          char v76 = "%{public}s protocol %{public}s (%p) has invalid connected callback";
LABEL_194:
          os_log_type_t v110 = v73;
LABEL_195:
          _os_log_impl(&dword_1830D4000, v110, v74, v76, buf, 0x20u);
          goto LABEL_196;
        }
        if (v165 == OS_LOG_TYPE_DEFAULT)
        {
          uint64_t v73 = __nwlog_obj();
          os_log_type_t v74 = type[0];
          if (!os_log_type_enabled(v73, type[0])) {
            goto LABEL_196;
          }
          uint64_t v109 = *(const char **)(default_input_handler + 16);
          if (!v109) {
            uint64_t v109 = "invalid";
          }
          *(_DWORD *)long long buf = 136446722;
          *(void *)&uint8_t buf[4] = "__nw_protocol_connected";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v109;
          *(_WORD *)&unsigned char buf[22] = 2048;
          BOOL v167 = (void *)default_input_handler;
          char v76 = "%{public}s protocol %{public}s (%p) has invalid connected callback, backtrace limit exceeded";
          goto LABEL_194;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        uint64_t v86 = __nwlog_obj();
        os_log_type_t v74 = type[0];
        os_log_t log = v86;
        BOOL v87 = os_log_type_enabled(v86, type[0]);
        if (backtrace_string)
        {
          if (v87)
          {
            uint64_t v88 = *(const char **)(default_input_handler + 16);
            if (!v88) {
              uint64_t v88 = "invalid";
            }
            *(_DWORD *)long long buf = 136446978;
            *(void *)&uint8_t buf[4] = "__nw_protocol_connected";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v88;
            *(_WORD *)&unsigned char buf[22] = 2048;
            BOOL v167 = (void *)default_input_handler;
            *(_WORD *)os_log_type_t v168 = 2082;
            *(void *)&v168[2] = backtrace_string;
            _os_log_impl(&dword_1830D4000, log, v74, "%{public}s protocol %{public}s (%p) has invalid connected callback, dumping backtrace:%{public}s", buf, 0x2Au);
          }
          free(backtrace_string);
          goto LABEL_196;
        }
        if (v87)
        {
          uint64_t v117 = *(const char **)(default_input_handler + 16);
          if (!v117) {
            uint64_t v117 = "invalid";
          }
          *(_DWORD *)long long buf = 136446722;
          *(void *)&uint8_t buf[4] = "__nw_protocol_connected";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v117;
          *(_WORD *)&unsigned char buf[22] = 2048;
          BOOL v167 = (void *)default_input_handler;
          char v76 = "%{public}s protocol %{public}s (%p) has invalid connected callback, no backtrace";
          os_log_type_t v110 = log;
          goto LABEL_195;
        }
      }
LABEL_196:
      if (v161) {
        free(v161);
      }
      goto LABEL_13;
    }
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = "__nw_protocol_connected";
    uint64_t v81 = (const char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t v165 = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v81, type, &v165))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        BOOL v82 = __nwlog_obj();
        os_log_type_t v83 = type[0];
        if (os_log_type_enabled(v82, type[0]))
        {
          *(_DWORD *)long long buf = 136446210;
          *(void *)&uint8_t buf[4] = "__nw_protocol_connected";
          uint64_t v84 = "%{public}s called with null other_protocol";
LABEL_214:
          uint64_t v118 = v82;
LABEL_215:
          _os_log_impl(&dword_1830D4000, v118, v83, v84, buf, 0xCu);
        }
      }
      else if (v165)
      {
        uint64_t v97 = (char *)__nw_create_backtrace_string();
        uint64_t v98 = __nwlog_obj();
        os_log_type_t v83 = type[0];
        BOOL v159 = v98;
        BOOL v99 = os_log_type_enabled(v98, type[0]);
        if (v97)
        {
          if (v99)
          {
            *(_DWORD *)long long buf = 136446466;
            *(void *)&uint8_t buf[4] = "__nw_protocol_connected";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v97;
            _os_log_impl(&dword_1830D4000, v159, v83, "%{public}s called with null other_protocol, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v97);
          goto LABEL_216;
        }
        if (v99)
        {
          *(_DWORD *)long long buf = 136446210;
          *(void *)&uint8_t buf[4] = "__nw_protocol_connected";
          uint64_t v84 = "%{public}s called with null other_protocol, no backtrace";
          uint64_t v118 = v159;
          goto LABEL_215;
        }
      }
      else
      {
        BOOL v82 = __nwlog_obj();
        os_log_type_t v83 = type[0];
        if (os_log_type_enabled(v82, type[0]))
        {
          *(_DWORD *)long long buf = 136446210;
          *(void *)&uint8_t buf[4] = "__nw_protocol_connected";
          uint64_t v84 = "%{public}s called with null other_protocol, backtrace limit exceeded";
          goto LABEL_214;
        }
      }
    }
LABEL_216:
    if (!v81) {
      goto LABEL_15;
    }
    uint64_t v51 = (nw_protocol *)v81;
    goto LABEL_94;
  }
  __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  *(void *)&uint8_t buf[4] = "__nw_protocol_connected";
  uint64_t default_input_handler = _os_log_send_and_compose_impl();
  type[0] = OS_LOG_TYPE_ERROR;
  os_log_type_t v165 = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault((const char *)default_input_handler, type, &v165))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      uint64_t v78 = __nwlog_obj();
      os_log_type_t v79 = type[0];
      if (!os_log_type_enabled(v78, type[0])) {
        goto LABEL_234;
      }
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "__nw_protocol_connected";
      char v80 = "%{public}s called with null protocol";
    }
    else if (v165)
    {
      BOOL v95 = (char *)__nw_create_backtrace_string();
      uint64_t v78 = __nwlog_obj();
      os_log_type_t v79 = type[0];
      BOOL v96 = os_log_type_enabled(v78, type[0]);
      if (v95)
      {
        if (v96)
        {
          *(_DWORD *)long long buf = 136446466;
          *(void *)&uint8_t buf[4] = "__nw_protocol_connected";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v95;
          _os_log_impl(&dword_1830D4000, v78, v79, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v95);
        if (default_input_handler) {
          goto LABEL_85;
        }
        goto LABEL_17;
      }
      if (!v96) {
        goto LABEL_234;
      }
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "__nw_protocol_connected";
      char v80 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      uint64_t v78 = __nwlog_obj();
      os_log_type_t v79 = type[0];
      if (!os_log_type_enabled(v78, type[0])) {
        goto LABEL_234;
      }
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "__nw_protocol_connected";
      char v80 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    _os_log_impl(&dword_1830D4000, v78, v79, v80, buf, 0xCu);
  }
LABEL_234:
  if (default_input_handler) {
LABEL_85:
  }
    free((void *)default_input_handler);
LABEL_17:
  if (a2->output_handler != a3)
  {
    if (gLogDatapath)
    {
      os_log_type_t v13 = __nwlog_obj();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
      {
        output_handler = a2->output_handler;
        name = "invalid";
        if (output_handler && output_handler->identifier) {
          name = output_handler->identifier->name;
        }
        identifier = (nw_protocol_identifier *)"invalid";
        if (a3)
        {
          if (a3->identifier) {
            identifier = a3->identifier;
          }
        }
        *(_DWORD *)long long buf = 136447234;
        *(void *)&uint8_t buf[4] = "nw_protocol_plugin_retry_connected";
        *(_WORD *)&buf[12] = 2080;
        *(void *)&buf[14] = name;
        *(_WORD *)&unsigned char buf[22] = 2048;
        BOOL v167 = output_handler;
        *(_WORD *)os_log_type_t v168 = 2080;
        *(void *)&v168[2] = identifier;
        __int16 v169 = 2048;
        os_log_type_t v170 = a3;
        _os_log_impl(&dword_1830D4000, v13, OS_LOG_TYPE_DEBUG, "%{public}s connected protocol %s: %p is not our output_handler %s: %p, ignoring", buf, 0x34u);
      }
    }
    return;
  }
  *((_DWORD *)a1 + 44) = 0;
  if (gLogDatapath)
  {
    uint64_t v100 = __nwlog_obj();
    if (os_log_type_enabled(v100, OS_LOG_TYPE_DEBUG))
    {
      int v101 = (*((unsigned __int8 *)a1 + 212) >> 4) & 1;
      *(_DWORD *)long long buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_protocol_plugin_retry_send_output_frames";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v101;
      _os_log_impl(&dword_1830D4000, v100, OS_LOG_TYPE_DEBUG, "%{public}s reissuing %{BOOL}d", buf, 0x12u);
    }
  }
  if ((*((unsigned char *)a1 + 212) & 0x10) != 0)
  {
    *((unsigned char *)a1 + 212) &= ~0x10u;
    *(void *)os_log_type_t type = 0;
    os_log_type_t v163 = type;
    if (!*((_DWORD *)a1 + 47)) {
      goto LABEL_60;
    }
    BOOL v24 = a2->output_handler;
    if (v24)
    {
      uint64_t v25 = *((unsigned int *)a1 + 45);
      uint64_t v26 = *((unsigned int *)a1 + 46);
      uint64_t v27 = v24->handle;
      if (v27 == &nw_protocol_ref_counted_handle)
      {
        __int16 v28 = v24[1].callbacks;
        if (v28) {
          v24[1].callbacks = (nw_protocol_callbacks *)((char *)&v28->add_input_handler + 1);
        }
      }
      uint64_t v29 = a2->handle;
      if (v29 == &nw_protocol_ref_counted_handle)
      {
        uint64_t v30 = a2[1].callbacks;
        if (v30) {
          a2[1].callbacks = (nw_protocol_callbacks *)((char *)&v30->add_input_handler + 1);
        }
      }
      char v31 = v24->callbacks;
      if (v31)
      {
        get_output_frames = (uint64_t (*)(nw_protocol *, nw_protocol *, uint64_t, uint64_t))v31->get_output_frames;
        if (get_output_frames)
        {
          int v33 = get_output_frames(v24, a2, v25, v26);
          if (v29 != &nw_protocol_ref_counted_handle) {
            goto LABEL_56;
          }
          goto LABEL_55;
        }
      }
      __nwlog_obj();
      BOOL v111 = v24->identifier->name;
      *(_DWORD *)long long buf = 136446722;
      *(void *)&uint8_t buf[4] = "__nw_protocol_get_output_frames";
      if (!v111) {
        BOOL v111 = "invalid";
      }
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v111;
      *(_WORD *)&unsigned char buf[22] = 2048;
      BOOL v167 = v24;
      __int16 v112 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t v165 = OS_LOG_TYPE_ERROR;
      char v164 = 0;
      if (__nwlog_fault(v112, &v165, &v164))
      {
        if (v165 == OS_LOG_TYPE_FAULT)
        {
          uint64_t v113 = __nwlog_obj();
          os_log_type_t v114 = v165;
          if (!os_log_type_enabled(v113, v165)) {
            goto LABEL_291;
          }
          v115 = v24->identifier->name;
          if (!v115) {
            v115 = "invalid";
          }
          *(_DWORD *)long long buf = 136446722;
          *(void *)&uint8_t buf[4] = "__nw_protocol_get_output_frames";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v115;
          *(_WORD *)&unsigned char buf[22] = 2048;
          BOOL v167 = v24;
          uint64_t v116 = "%{public}s protocol %{public}s (%p) has invalid get_output_frames callback";
LABEL_289:
          BOOL v147 = v113;
LABEL_290:
          _os_log_impl(&dword_1830D4000, v147, v114, v116, buf, 0x20u);
          goto LABEL_291;
        }
        if (!v164)
        {
          uint64_t v113 = __nwlog_obj();
          os_log_type_t v114 = v165;
          if (!os_log_type_enabled(v113, v165)) {
            goto LABEL_291;
          }
          os_log_type_t v146 = v24->identifier->name;
          if (!v146) {
            os_log_type_t v146 = "invalid";
          }
          *(_DWORD *)long long buf = 136446722;
          *(void *)&uint8_t buf[4] = "__nw_protocol_get_output_frames";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v146;
          *(_WORD *)&unsigned char buf[22] = 2048;
          BOOL v167 = v24;
          uint64_t v116 = "%{public}s protocol %{public}s (%p) has invalid get_output_frames callback, backtrace limit exceeded";
          goto LABEL_289;
        }
        os_log_type_t v126 = (char *)__nw_create_backtrace_string();
        v127 = __nwlog_obj();
        os_log_type_t v114 = v165;
        BOOL v160 = v127;
        BOOL v128 = os_log_type_enabled(v127, v165);
        if (v126)
        {
          if (v128)
          {
            v129 = v24->identifier->name;
            if (!v129) {
              v129 = "invalid";
            }
            *(_DWORD *)long long buf = 136446978;
            *(void *)&uint8_t buf[4] = "__nw_protocol_get_output_frames";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v129;
            *(_WORD *)&unsigned char buf[22] = 2048;
            BOOL v167 = v24;
            *(_WORD *)os_log_type_t v168 = 2082;
            *(void *)&v168[2] = v126;
            _os_log_impl(&dword_1830D4000, v160, v114, "%{public}s protocol %{public}s (%p) has invalid get_output_frames callback, dumping backtrace:%{public}s", buf, 0x2Au);
          }
          free(v126);
        }
        else if (v128)
        {
          os_log_type_t v150 = v24->identifier->name;
          if (!v150) {
            os_log_type_t v150 = "invalid";
          }
          *(_DWORD *)long long buf = 136446722;
          *(void *)&uint8_t buf[4] = "__nw_protocol_get_output_frames";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v150;
          *(_WORD *)&unsigned char buf[22] = 2048;
          BOOL v167 = v24;
          uint64_t v116 = "%{public}s protocol %{public}s (%p) has invalid get_output_frames callback, no backtrace";
          BOOL v147 = v160;
          goto LABEL_290;
        }
      }
LABEL_291:
      if (v112) {
        free(v112);
      }
      int v33 = 0;
      if (v29 != &nw_protocol_ref_counted_handle)
      {
LABEL_56:
        if (v27 == &nw_protocol_ref_counted_handle && v24->handle == &nw_protocol_ref_counted_handle)
        {
          uint64_t v68 = v24[1].callbacks;
          if (v68)
          {
            uint64_t v69 = (nw_protocol_callbacks *)((char *)v68 - 1);
            v24[1].callbacks = v69;
            if (!v69)
            {
              uint64_t v70 = *(void (***)(void))v24[1].flow_id;
              if (v70)
              {
                *(void *)v24[1].flow_id = 0;
                v70[2](v70);
                _Block_release(v70);
              }
              if (v24[1].flow_id[8])
              {
                uint64_t v71 = *(const void **)v24[1].flow_id;
                if (v71) {
                  _Block_release(v71);
                }
              }
              free(v24);
            }
          }
        }
        if (*(void *)type)
        {
          if (v33)
          {
LABEL_60:
            if (!(*(unsigned int (**)(void, os_log_type_t *))(*((void *)a1 + 14) + 16))(*((void *)a1 + 14), type))
            {
              if (gLogDatapath)
              {
                uint64_t v142 = __nwlog_obj();
                if (os_log_type_enabled(v142, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)long long buf = 136446210;
                  *(void *)&uint8_t buf[4] = "nw_protocol_finalize_temp_frame_array";
                  _os_log_impl(&dword_1830D4000, v142, OS_LOG_TYPE_DEBUG, "%{public}s called", buf, 0xCu);
                }
              }
              *(void *)long long buf = MEMORY[0x1E4F143A8];
              *(void *)&buf[8] = 0x40000000;
              *(void *)&buf[16] = ___ZL37nw_protocol_finalize_temp_frame_arrayP16nw_frame_array_sb_block_invoke_3298;
              BOOL v167 = &__block_descriptor_tmp_36_3299;
              *(void *)os_log_type_t v168 = type;
              v168[8] = 0;
              uint64_t v52 = *(void *)type;
              do
              {
                if (!v52) {
                  break;
                }
                uint64_t v53 = *(void *)(v52 + 32);
                char v54 = (*(uint64_t (**)(unsigned char *))&buf[16])(buf);
                uint64_t v52 = v53;
              }
              while ((v54 & 1) != 0);
              goto LABEL_29;
            }
            uint64_t v34 = (uint64_t)a2->output_handler;
            if (v34)
            {
              __int16 v35 = *(void **)(v34 + 40);
              if (v35 == &nw_protocol_ref_counted_handle)
              {
                uint64_t v36 = *(void *)(v34 + 88);
                if (v36) {
                  *(void *)(v34 + 88) = v36 + 1;
                }
              }
              uint64_t v37 = *(void *)(v34 + 24);
              if (v37)
              {
                BOOL v38 = *(void (**)(uint64_t, os_log_type_t *))(v37 + 96);
                if (v38)
                {
                  v38(v34, type);
LABEL_68:
                  if (v35 != &nw_protocol_ref_counted_handle) {
                    goto LABEL_29;
                  }
                  if (*(_UNKNOWN **)(v34 + 40) != &nw_protocol_ref_counted_handle) {
                    goto LABEL_29;
                  }
                  uint64_t v39 = *(void *)(v34 + 88);
                  if (!v39) {
                    goto LABEL_29;
                  }
                  uint64_t v40 = v39 - 1;
                  *(void *)(v34 + 88) = v40;
                  if (v40) {
                    goto LABEL_29;
                  }
                  BOOL v41 = *(void (***)(void))(v34 + 64);
                  if (v41)
                  {
                    *(void *)(v34 + 64) = 0;
                    v41[2](v41);
                    _Block_release(v41);
                  }
                  if (*(unsigned char *)(v34 + 72))
                  {
                    char v42 = *(const void **)(v34 + 64);
                    if (v42) {
                      _Block_release(v42);
                    }
                  }
LABEL_77:
                  free((void *)v34);
                  goto LABEL_29;
                }
              }
              __nwlog_obj();
              BOOL v130 = *(const char **)(v34 + 16);
              *(_DWORD *)long long buf = 136446722;
              *(void *)&uint8_t buf[4] = "__nw_protocol_finalize_output_frames";
              if (!v130) {
                BOOL v130 = "invalid";
              }
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = v130;
              *(_WORD *)&unsigned char buf[22] = 2048;
              BOOL v167 = (void *)v34;
              BOOL v131 = (char *)_os_log_send_and_compose_impl();
              os_log_type_t v165 = OS_LOG_TYPE_ERROR;
              char v164 = 0;
              if (__nwlog_fault(v131, &v165, &v164))
              {
                if (v165 == OS_LOG_TYPE_FAULT)
                {
                  uint64_t v132 = __nwlog_obj();
                  os_log_type_t v133 = v165;
                  if (!os_log_type_enabled(v132, v165)) {
                    goto LABEL_325;
                  }
                  BOOL v134 = *(const char **)(v34 + 16);
                  if (!v134) {
                    BOOL v134 = "invalid";
                  }
                  *(_DWORD *)long long buf = 136446722;
                  *(void *)&uint8_t buf[4] = "__nw_protocol_finalize_output_frames";
                  *(_WORD *)&buf[12] = 2082;
                  *(void *)&buf[14] = v134;
                  *(_WORD *)&unsigned char buf[22] = 2048;
                  BOOL v167 = (void *)v34;
                  BOOL v135 = "%{public}s protocol %{public}s (%p) has invalid finalize_output_frames callback";
                  goto LABEL_324;
                }
                if (!v164)
                {
                  uint64_t v132 = __nwlog_obj();
                  os_log_type_t v133 = v165;
                  if (!os_log_type_enabled(v132, v165)) {
                    goto LABEL_325;
                  }
                  v151 = *(const char **)(v34 + 16);
                  if (!v151) {
                    v151 = "invalid";
                  }
                  *(_DWORD *)long long buf = 136446722;
                  *(void *)&uint8_t buf[4] = "__nw_protocol_finalize_output_frames";
                  *(_WORD *)&buf[12] = 2082;
                  *(void *)&buf[14] = v151;
                  *(_WORD *)&unsigned char buf[22] = 2048;
                  BOOL v167 = (void *)v34;
                  BOOL v135 = "%{public}s protocol %{public}s (%p) has invalid finalize_output_frames callback, backtrace limit exceeded";
                  goto LABEL_324;
                }
                int v143 = (char *)__nw_create_backtrace_string();
                uint64_t v132 = __nwlog_obj();
                os_log_type_t v133 = v165;
                BOOL v144 = os_log_type_enabled(v132, v165);
                if (v143)
                {
                  if (v144)
                  {
                    os_log_type_t v145 = *(const char **)(v34 + 16);
                    if (!v145) {
                      os_log_type_t v145 = "invalid";
                    }
                    *(_DWORD *)long long buf = 136446978;
                    *(void *)&uint8_t buf[4] = "__nw_protocol_finalize_output_frames";
                    *(_WORD *)&buf[12] = 2082;
                    *(void *)&buf[14] = v145;
                    *(_WORD *)&unsigned char buf[22] = 2048;
                    BOOL v167 = (void *)v34;
                    *(_WORD *)os_log_type_t v168 = 2082;
                    *(void *)&v168[2] = v143;
                    _os_log_impl(&dword_1830D4000, v132, v133, "%{public}s protocol %{public}s (%p) has invalid finalize_output_frames callback, dumping backtrace:%{public}s", buf, 0x2Au);
                  }
                  free(v143);
                  goto LABEL_325;
                }
                if (v144)
                {
                  v157 = *(const char **)(v34 + 16);
                  if (!v157) {
                    v157 = "invalid";
                  }
                  *(_DWORD *)long long buf = 136446722;
                  *(void *)&uint8_t buf[4] = "__nw_protocol_finalize_output_frames";
                  *(_WORD *)&buf[12] = 2082;
                  *(void *)&buf[14] = v157;
                  *(_WORD *)&unsigned char buf[22] = 2048;
                  BOOL v167 = (void *)v34;
                  BOOL v135 = "%{public}s protocol %{public}s (%p) has invalid finalize_output_frames callback, no backtrace";
LABEL_324:
                  _os_log_impl(&dword_1830D4000, v132, v133, v135, buf, 0x20u);
                }
              }
LABEL_325:
              if (v131) {
                free(v131);
              }
              goto LABEL_68;
            }
            __nwlog_obj();
            *(_DWORD *)long long buf = 136446210;
            *(void *)&uint8_t buf[4] = "__nw_protocol_finalize_output_frames";
            uint64_t v34 = _os_log_send_and_compose_impl();
            os_log_type_t v165 = OS_LOG_TYPE_ERROR;
            char v164 = 0;
            if (__nwlog_fault((const char *)v34, &v165, &v164))
            {
              if (v165 == OS_LOG_TYPE_FAULT)
              {
                v139 = __nwlog_obj();
                os_log_type_t v140 = v165;
                if (!os_log_type_enabled(v139, v165)) {
                  goto LABEL_332;
                }
                *(_DWORD *)long long buf = 136446210;
                *(void *)&uint8_t buf[4] = "__nw_protocol_finalize_output_frames";
                BOOL v141 = "%{public}s called with null protocol";
LABEL_331:
                _os_log_impl(&dword_1830D4000, v139, v140, v141, buf, 0xCu);
                goto LABEL_332;
              }
              if (!v164)
              {
                v139 = __nwlog_obj();
                os_log_type_t v140 = v165;
                if (!os_log_type_enabled(v139, v165)) {
                  goto LABEL_332;
                }
                *(_DWORD *)long long buf = 136446210;
                *(void *)&uint8_t buf[4] = "__nw_protocol_finalize_output_frames";
                BOOL v141 = "%{public}s called with null protocol, backtrace limit exceeded";
                goto LABEL_331;
              }
              char v148 = (char *)__nw_create_backtrace_string();
              v139 = __nwlog_obj();
              os_log_type_t v140 = v165;
              BOOL v149 = os_log_type_enabled(v139, v165);
              if (!v148)
              {
                if (!v149) {
                  goto LABEL_332;
                }
                *(_DWORD *)long long buf = 136446210;
                *(void *)&uint8_t buf[4] = "__nw_protocol_finalize_output_frames";
                BOOL v141 = "%{public}s called with null protocol, no backtrace";
                goto LABEL_331;
              }
              if (v149)
              {
                *(_DWORD *)long long buf = 136446466;
                *(void *)&uint8_t buf[4] = "__nw_protocol_finalize_output_frames";
                *(_WORD *)&buf[12] = 2082;
                *(void *)&buf[14] = v148;
                _os_log_impl(&dword_1830D4000, v139, v140, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
              }
              free(v148);
            }
LABEL_332:
            if (!v34) {
              goto LABEL_29;
            }
            goto LABEL_77;
          }
LABEL_316:
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v152 = gLogObj;
          if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)long long buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_protocol_plugin_retry_send_output_frames";
            _os_log_impl(&dword_1830D4000, v152, OS_LOG_TYPE_ERROR, "%{public}s Output frames is not empty but returned frame count is 0", buf, 0xCu);
          }
          goto LABEL_29;
        }
LABEL_318:
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        __int16 v153 = gLogObj;
        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
        {
          int v154 = *((_DWORD *)a1 + 45);
          int v155 = *((_DWORD *)a1 + 46);
          int v156 = *((_DWORD *)a1 + 47);
          *(_DWORD *)long long buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_protocol_plugin_retry_send_output_frames";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v154;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = v155;
          LOWORD(v167) = 1024;
          *(_DWORD *)((char *)&v167 + 2) = v156;
          _os_log_impl(&dword_1830D4000, v153, OS_LOG_TYPE_ERROR, "%{public}s Asked for %u minimum bytes, %u maximum bytes, %u frames but received no frames", buf, 0x1Eu);
        }
        goto LABEL_29;
      }
LABEL_55:
      if (a2->handle == &nw_protocol_ref_counted_handle)
      {
        int v64 = a2[1].callbacks;
        if (v64)
        {
          BOOL v65 = (nw_protocol_callbacks *)((char *)v64 - 1);
          a2[1].callbacks = v65;
          if (!v65)
          {
            long long v66 = *(void (***)(void))a2[1].flow_id;
            if (v66)
            {
              *(void *)a2[1].flow_id = 0;
              v66[2](v66);
              _Block_release(v66);
            }
            if (a2[1].flow_id[8])
            {
              uint64_t v67 = *(const void **)a2[1].flow_id;
              if (v67) {
                _Block_release(v67);
              }
            }
            free(a2);
          }
        }
      }
      goto LABEL_56;
    }
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = "__nw_protocol_get_output_frames";
    uint64_t v122 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v165 = OS_LOG_TYPE_ERROR;
    char v164 = 0;
    if (__nwlog_fault(v122, &v165, &v164))
    {
      if (v165 == OS_LOG_TYPE_FAULT)
      {
        uint64_t v123 = __nwlog_obj();
        os_log_type_t v124 = v165;
        if (!os_log_type_enabled(v123, v165)) {
          goto LABEL_313;
        }
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "__nw_protocol_get_output_frames";
        v125 = "%{public}s called with null protocol";
LABEL_312:
        _os_log_impl(&dword_1830D4000, v123, v124, v125, buf, 0xCu);
        goto LABEL_313;
      }
      if (!v164)
      {
        uint64_t v123 = __nwlog_obj();
        os_log_type_t v124 = v165;
        if (!os_log_type_enabled(v123, v165)) {
          goto LABEL_313;
        }
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "__nw_protocol_get_output_frames";
        v125 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_312;
      }
      v137 = (char *)__nw_create_backtrace_string();
      uint64_t v123 = __nwlog_obj();
      os_log_type_t v124 = v165;
      BOOL v138 = os_log_type_enabled(v123, v165);
      if (!v137)
      {
        if (!v138) {
          goto LABEL_313;
        }
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "__nw_protocol_get_output_frames";
        v125 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_312;
      }
      if (v138)
      {
        *(_DWORD *)long long buf = 136446466;
        *(void *)&uint8_t buf[4] = "__nw_protocol_get_output_frames";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v137;
        _os_log_impl(&dword_1830D4000, v123, v124, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v137);
    }
LABEL_313:
    if (v122) {
      free(v122);
    }
    if (*(void *)type) {
      goto LABEL_316;
    }
    goto LABEL_318;
  }
LABEL_29:
  BOOL v17 = a2->default_input_handler;
  if (!v17)
  {
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = "__nw_protocol_connected";
    uint64_t v102 = (const char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t v165 = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v102, type, &v165))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        uint64_t v103 = __nwlog_obj();
        os_log_type_t v104 = type[0];
        if (os_log_type_enabled(v103, type[0]))
        {
          *(_DWORD *)long long buf = 136446210;
          *(void *)&uint8_t buf[4] = "__nw_protocol_connected";
          int v105 = "%{public}s called with null protocol";
LABEL_282:
          _os_log_impl(&dword_1830D4000, v103, v104, v105, buf, 0xCu);
        }
      }
      else if (v165)
      {
        char v119 = (char *)__nw_create_backtrace_string();
        uint64_t v103 = __nwlog_obj();
        os_log_type_t v104 = type[0];
        BOOL v120 = os_log_type_enabled(v103, type[0]);
        if (v119)
        {
          if (v120)
          {
            *(_DWORD *)long long buf = 136446466;
            *(void *)&uint8_t buf[4] = "__nw_protocol_connected";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v119;
            _os_log_impl(&dword_1830D4000, v103, v104, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v119);
          goto LABEL_283;
        }
        if (v120)
        {
          *(_DWORD *)long long buf = 136446210;
          *(void *)&uint8_t buf[4] = "__nw_protocol_connected";
          int v105 = "%{public}s called with null protocol, no backtrace";
          goto LABEL_282;
        }
      }
      else
      {
        uint64_t v103 = __nwlog_obj();
        os_log_type_t v104 = type[0];
        if (os_log_type_enabled(v103, type[0]))
        {
          *(_DWORD *)long long buf = 136446210;
          *(void *)&uint8_t buf[4] = "__nw_protocol_connected";
          int v105 = "%{public}s called with null protocol, backtrace limit exceeded";
          goto LABEL_282;
        }
      }
    }
LABEL_283:
    if (!v102) {
      return;
    }
    char v63 = (nw_protocol *)v102;
LABEL_116:
    free(v63);
    return;
  }
  char v18 = v17->handle;
  if (v18 == &nw_protocol_ref_counted_handle)
  {
    BOOL v19 = v17[1].callbacks;
    if (v19) {
      v17[1].callbacks = (nw_protocol_callbacks *)((char *)&v19->add_input_handler + 1);
    }
  }
  uint64_t v20 = a2->handle;
  if (v20 == &nw_protocol_ref_counted_handle)
  {
    BOOL v21 = a2[1].callbacks;
    if (v21) {
      a2[1].callbacks = (nw_protocol_callbacks *)((char *)&v21->add_input_handler + 1);
    }
  }
  char v22 = v17->callbacks;
  if (v22)
  {
    connected = (void (*)(nw_protocol *, nw_protocol *))v22->connected;
    if (connected)
    {
      connected(v17, a2);
      goto LABEL_39;
    }
  }
  __nwlog_obj();
  uint64_t v89 = v17->identifier->name;
  *(_DWORD *)long long buf = 136446722;
  *(void *)&uint8_t buf[4] = "__nw_protocol_connected";
  if (!v89) {
    uint64_t v89 = "invalid";
  }
  *(_WORD *)&buf[12] = 2082;
  *(void *)&buf[14] = v89;
  *(_WORD *)&unsigned char buf[22] = 2048;
  BOOL v167 = v17;
  uint64_t v90 = (char *)_os_log_send_and_compose_impl();
  type[0] = OS_LOG_TYPE_ERROR;
  os_log_type_t v165 = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v90, type, &v165))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      uint32_t v91 = __nwlog_obj();
      os_log_type_t v92 = type[0];
      if (!os_log_type_enabled(v91, type[0])) {
        goto LABEL_258;
      }
      uint64_t v93 = v17->identifier->name;
      if (!v93) {
        uint64_t v93 = "invalid";
      }
      *(_DWORD *)long long buf = 136446722;
      *(void *)&uint8_t buf[4] = "__nw_protocol_connected";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v93;
      *(_WORD *)&unsigned char buf[22] = 2048;
      BOOL v167 = v17;
      os_log_type_t v94 = "%{public}s protocol %{public}s (%p) has invalid connected callback";
      goto LABEL_257;
    }
    if (v165 == OS_LOG_TYPE_DEFAULT)
    {
      uint32_t v91 = __nwlog_obj();
      os_log_type_t v92 = type[0];
      if (!os_log_type_enabled(v91, type[0])) {
        goto LABEL_258;
      }
      uint64_t v121 = v17->identifier->name;
      if (!v121) {
        uint64_t v121 = "invalid";
      }
      *(_DWORD *)long long buf = 136446722;
      *(void *)&uint8_t buf[4] = "__nw_protocol_connected";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v121;
      *(_WORD *)&unsigned char buf[22] = 2048;
      BOOL v167 = v17;
      os_log_type_t v94 = "%{public}s protocol %{public}s (%p) has invalid connected callback, backtrace limit exceeded";
      goto LABEL_257;
    }
    os_log_type_t v106 = (char *)__nw_create_backtrace_string();
    uint32_t v91 = __nwlog_obj();
    os_log_type_t v92 = type[0];
    BOOL v107 = os_log_type_enabled(v91, type[0]);
    if (v106)
    {
      if (v107)
      {
        uint64_t v108 = v17->identifier->name;
        if (!v108) {
          uint64_t v108 = "invalid";
        }
        *(_DWORD *)long long buf = 136446978;
        *(void *)&uint8_t buf[4] = "__nw_protocol_connected";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v108;
        *(_WORD *)&unsigned char buf[22] = 2048;
        BOOL v167 = v17;
        *(_WORD *)os_log_type_t v168 = 2082;
        *(void *)&v168[2] = v106;
        _os_log_impl(&dword_1830D4000, v91, v92, "%{public}s protocol %{public}s (%p) has invalid connected callback, dumping backtrace:%{public}s", buf, 0x2Au);
      }
      free(v106);
      goto LABEL_258;
    }
    if (v107)
    {
      uint64_t v136 = v17->identifier->name;
      if (!v136) {
        uint64_t v136 = "invalid";
      }
      *(_DWORD *)long long buf = 136446722;
      *(void *)&uint8_t buf[4] = "__nw_protocol_connected";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v136;
      *(_WORD *)&unsigned char buf[22] = 2048;
      BOOL v167 = v17;
      os_log_type_t v94 = "%{public}s protocol %{public}s (%p) has invalid connected callback, no backtrace";
LABEL_257:
      _os_log_impl(&dword_1830D4000, v91, v92, v94, buf, 0x20u);
    }
  }
LABEL_258:
  if (v90) {
    free(v90);
  }
LABEL_39:
  if (v20 == &nw_protocol_ref_counted_handle && a2->handle == &nw_protocol_ref_counted_handle)
  {
    int v55 = a2[1].callbacks;
    if (v55)
    {
      int v56 = (nw_protocol_callbacks *)((char *)v55 - 1);
      a2[1].callbacks = v56;
      if (!v56)
      {
        unint64_t v57 = *(void (***)(void))a2[1].flow_id;
        if (v57)
        {
          *(void *)a2[1].flow_id = 0;
          v57[2](v57);
          _Block_release(v57);
        }
        if (a2[1].flow_id[8])
        {
          unsigned int v58 = *(const void **)a2[1].flow_id;
          if (v58) {
            _Block_release(v58);
          }
        }
        free(a2);
      }
    }
  }
  if (v18 == &nw_protocol_ref_counted_handle && v17->handle == &nw_protocol_ref_counted_handle)
  {
    uint64_t v59 = v17[1].callbacks;
    if (v59)
    {
      os_log_type_t v60 = (nw_protocol_callbacks *)((char *)v59 - 1);
      v17[1].callbacks = v60;
      if (!v60)
      {
        uint64_t v61 = *(void (***)(void))v17[1].flow_id;
        if (v61)
        {
          *(void *)v17[1].flow_id = 0;
          v61[2](v61);
          _Block_release(v61);
        }
        if (v17[1].flow_id[8])
        {
          int v62 = *(const void **)v17[1].flow_id;
          if (v62) {
            _Block_release(v62);
          }
        }
        char v63 = v17;
        goto LABEL_116;
      }
    }
  }
}

void nw_protocol_plugins_disconnect(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v136 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    v129 = "nw_protocol_plugins_disconnect";
    uint64_t v71 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v126 = 0;
    if (!__nwlog_fault(v71, &type, &v126)) {
      goto LABEL_265;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v72 = __nwlog_obj();
      os_log_type_t v73 = type;
      if (!os_log_type_enabled(v72, type)) {
        goto LABEL_265;
      }
      *(_DWORD *)long long buf = 136446210;
      v129 = "nw_protocol_plugins_disconnect";
      os_log_type_t v74 = "%{public}s called with null protocol";
    }
    else if (v126)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v72 = __nwlog_obj();
      os_log_type_t v73 = type;
      BOOL v85 = os_log_type_enabled(v72, type);
      if (backtrace_string)
      {
        if (v85)
        {
          *(_DWORD *)long long buf = 136446466;
          v129 = "nw_protocol_plugins_disconnect";
          __int16 v130 = 2082;
          BOOL v131 = (nw_protocol *)backtrace_string;
          _os_log_impl(&dword_1830D4000, v72, v73, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_265:
        if (!v71) {
          return;
        }
        goto LABEL_266;
      }
      if (!v85) {
        goto LABEL_265;
      }
      *(_DWORD *)long long buf = 136446210;
      v129 = "nw_protocol_plugins_disconnect";
      os_log_type_t v74 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      os_log_type_t v72 = __nwlog_obj();
      os_log_type_t v73 = type;
      if (!os_log_type_enabled(v72, type)) {
        goto LABEL_265;
      }
      *(_DWORD *)long long buf = 136446210;
      v129 = "nw_protocol_plugins_disconnect";
      os_log_type_t v74 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    goto LABEL_264;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    v129 = "nw_protocol_plugins_disconnect";
    uint64_t v71 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v126 = 0;
    if (!__nwlog_fault(v71, &type, &v126)) {
      goto LABEL_265;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v126)
      {
        os_log_type_t v72 = __nwlog_obj();
        os_log_type_t v73 = type;
        if (!os_log_type_enabled(v72, type)) {
          goto LABEL_265;
        }
        *(_DWORD *)long long buf = 136446210;
        v129 = "nw_protocol_plugins_disconnect";
        os_log_type_t v74 = "%{public}s called with null protocol->handle, backtrace limit exceeded";
        goto LABEL_264;
      }
      uint64_t v86 = (char *)__nw_create_backtrace_string();
      os_log_type_t v72 = __nwlog_obj();
      os_log_type_t v73 = type;
      BOOL v87 = os_log_type_enabled(v72, type);
      if (!v86)
      {
        if (!v87) {
          goto LABEL_265;
        }
        *(_DWORD *)long long buf = 136446210;
        v129 = "nw_protocol_plugins_disconnect";
        os_log_type_t v74 = "%{public}s called with null protocol->handle, no backtrace";
        goto LABEL_264;
      }
      if (v87)
      {
        *(_DWORD *)long long buf = 136446466;
        v129 = "nw_protocol_plugins_disconnect";
        __int16 v130 = 2082;
        BOOL v131 = (nw_protocol *)v86;
        uint64_t v88 = "%{public}s called with null protocol->handle, dumping backtrace:%{public}s";
LABEL_185:
        _os_log_impl(&dword_1830D4000, v72, v73, v88, buf, 0x16u);
      }
LABEL_186:
      free(v86);
      if (!v71) {
        return;
      }
LABEL_266:
      uint64_t v27 = (nw_protocol *)v71;
LABEL_121:
      free(v27);
      return;
    }
    os_log_type_t v72 = __nwlog_obj();
    os_log_type_t v73 = type;
    if (!os_log_type_enabled(v72, type)) {
      goto LABEL_265;
    }
    *(_DWORD *)long long buf = 136446210;
    v129 = "nw_protocol_plugins_disconnect";
    os_log_type_t v74 = "%{public}s called with null protocol->handle";
LABEL_264:
    _os_log_impl(&dword_1830D4000, v72, v73, v74, buf, 0xCu);
    goto LABEL_265;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    v129 = "nw_protocol_plugins_handle_disconnect";
    uint64_t v71 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v126 = 0;
    if (!__nwlog_fault(v71, &type, &v126)) {
      goto LABEL_265;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v72 = __nwlog_obj();
      os_log_type_t v73 = type;
      if (!os_log_type_enabled(v72, type)) {
        goto LABEL_265;
      }
      *(_DWORD *)long long buf = 136446210;
      v129 = "nw_protocol_plugins_handle_disconnect";
      os_log_type_t v74 = "%{public}s called with null other_protocol";
      goto LABEL_264;
    }
    if (!v126)
    {
      os_log_type_t v72 = __nwlog_obj();
      os_log_type_t v73 = type;
      if (!os_log_type_enabled(v72, type)) {
        goto LABEL_265;
      }
      *(_DWORD *)long long buf = 136446210;
      v129 = "nw_protocol_plugins_handle_disconnect";
      os_log_type_t v74 = "%{public}s called with null other_protocol, backtrace limit exceeded";
      goto LABEL_264;
    }
    uint64_t v86 = (char *)__nw_create_backtrace_string();
    os_log_type_t v72 = __nwlog_obj();
    os_log_type_t v73 = type;
    BOOL v89 = os_log_type_enabled(v72, type);
    if (!v86)
    {
      if (!v89) {
        goto LABEL_265;
      }
      *(_DWORD *)long long buf = 136446210;
      v129 = "nw_protocol_plugins_handle_disconnect";
      os_log_type_t v74 = "%{public}s called with null other_protocol, no backtrace";
      goto LABEL_264;
    }
    if (v89)
    {
      *(_DWORD *)long long buf = 136446466;
      v129 = "nw_protocol_plugins_handle_disconnect";
      __int16 v130 = 2082;
      BOOL v131 = (nw_protocol *)v86;
      uint64_t v88 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
      goto LABEL_185;
    }
    goto LABEL_186;
  }
  if (gLogDatapath)
  {
    uint64_t v75 = __nwlog_obj();
    if (os_log_type_enabled(v75, OS_LOG_TYPE_DEBUG))
    {
      identifier = a1->identifier;
      if (!identifier) {
        identifier = (nw_protocol_identifier *)"invalid";
      }
      *(_DWORD *)long long buf = 136446722;
      v129 = "nw_protocol_plugins_handle_disconnect";
      __int16 v130 = 2080;
      BOOL v131 = (nw_protocol *)identifier;
      __int16 v132 = 2048;
      os_log_type_t v133 = a1;
      _os_log_impl(&dword_1830D4000, v75, OS_LOG_TYPE_DEBUG, "%{public}s called for %s:%p", buf, 0x20u);
    }
  }
  uint64_t v5 = handle[11];
  if (v5)
  {
    if (gLogDatapath)
    {
      os_log_type_t v83 = __nwlog_obj();
      if (os_log_type_enabled(v83, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 136446466;
        v129 = "nw_protocol_plugin_retry_disconnect";
        __int16 v130 = 2048;
        BOOL v131 = a1;
        _os_log_impl(&dword_1830D4000, v83, OS_LOG_TYPE_DEBUG, "%{public}s called %p", buf, 0x16u);
      }
    }
    char v6 = *(unsigned char *)(v5 + 212);
    *(unsigned char *)(v5 + 212) = v6 | 0x80;
    if ((v6 & 0x20) != 0)
    {
      if (gLogDatapath)
      {
        int v101 = __nwlog_obj();
        if (os_log_type_enabled(v101, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)long long buf = 136446722;
          v129 = "nw_protocol_plugin_retry_disconnect";
          __int16 v130 = 2048;
          BOOL v131 = a1;
          __int16 v132 = 2048;
          os_log_type_t v133 = a2;
          _os_log_impl(&dword_1830D4000, v101, OS_LOG_TYPE_DEBUG, "%{public}s %p sending disconnected immediately to %p as async reissue is pending", buf, 0x20u);
        }
      }
      __int16 v28 = a2->handle;
      if (v28 == &nw_protocol_ref_counted_handle)
      {
        callbacks = a2[1].callbacks;
        if (callbacks) {
          a2[1].callbacks = (nw_protocol_callbacks *)((char *)&callbacks->add_input_handler + 1);
        }
      }
      uint64_t v30 = a1->handle;
      if (v30 == &nw_protocol_ref_counted_handle)
      {
        char v31 = a1[1].callbacks;
        if (v31) {
          a1[1].callbacks = (nw_protocol_callbacks *)((char *)&v31->add_input_handler + 1);
        }
      }
      BOOL v32 = a2->callbacks;
      if (v32)
      {
        disconnected = (void (*)(nw_protocol *, nw_protocol *))v32->disconnected;
        if (disconnected) {
          goto LABEL_99;
        }
      }
      __nwlog_obj();
      uint64_t v34 = a2->identifier;
      *(_DWORD *)long long buf = 136446722;
      v129 = "__nw_protocol_disconnected";
      if (!v34) {
        uint64_t v34 = (nw_protocol_identifier *)"invalid";
      }
      __int16 v130 = 2082;
      BOOL v131 = (nw_protocol *)v34;
      __int16 v132 = 2048;
      os_log_type_t v133 = a2;
      __int16 v35 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v126 = 0;
      if (!__nwlog_fault(v35, &type, &v126)) {
        goto LABEL_299;
      }
      if (type == OS_LOG_TYPE_FAULT) {
        goto LABEL_213;
      }
      if (v126)
      {
        uint64_t v36 = (char *)__nw_create_backtrace_string();
        uint64_t v37 = __nwlog_obj();
        os_log_type_t v38 = type;
        BOOL v39 = os_log_type_enabled(v37, type);
        if (v36)
        {
          if (v39)
          {
            if (a2->identifier) {
              uint64_t v40 = a2->identifier;
            }
            else {
              uint64_t v40 = (nw_protocol_identifier *)"invalid";
            }
            *(_DWORD *)long long buf = 136446978;
            v129 = "__nw_protocol_disconnected";
            __int16 v130 = 2082;
            BOOL v131 = (nw_protocol *)v40;
            __int16 v132 = 2048;
            os_log_type_t v133 = a2;
            __int16 v134 = 2082;
            BOOL v135 = v36;
            _os_log_impl(&dword_1830D4000, v37, v38, "%{public}s protocol %{public}s (%p) has invalid disconnected callback, dumping backtrace:%{public}s", buf, 0x2Au);
          }
          free(v36);
          goto LABEL_299;
        }
LABEL_267:
        if (!v39) {
          goto LABEL_299;
        }
        uint64_t v118 = a2->identifier;
        if (!v118) {
          uint64_t v118 = (nw_protocol_identifier *)"invalid";
        }
        *(_DWORD *)long long buf = 136446722;
        v129 = "__nw_protocol_disconnected";
        __int16 v130 = 2082;
        BOOL v131 = (nw_protocol *)v118;
        goto LABEL_297;
      }
    }
    else
    {
      if ((*(uint64_t (**)(nw_protocol *, nw_protocol *))(v5 + 136))(a1, a2)) {
        goto LABEL_9;
      }
      if (gLogDatapath)
      {
        os_log_type_t v114 = __nwlog_obj();
        if (os_log_type_enabled(v114, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)long long buf = 136446722;
          v129 = "nw_protocol_plugin_retry_disconnect";
          __int16 v130 = 2048;
          BOOL v131 = a1;
          __int16 v132 = 2048;
          os_log_type_t v133 = a2;
          _os_log_impl(&dword_1830D4000, v114, OS_LOG_TYPE_DEBUG, "%{public}s %p sending disconnected immediately to %p without disconnect", buf, 0x20u);
        }
      }
      __int16 v28 = a2->handle;
      if (v28 == &nw_protocol_ref_counted_handle)
      {
        uint64_t v48 = a2[1].callbacks;
        if (v48) {
          a2[1].callbacks = (nw_protocol_callbacks *)((char *)&v48->add_input_handler + 1);
        }
      }
      uint64_t v30 = a1->handle;
      if (v30 == &nw_protocol_ref_counted_handle)
      {
        uint64_t v49 = a1[1].callbacks;
        if (v49) {
          a1[1].callbacks = (nw_protocol_callbacks *)((char *)&v49->add_input_handler + 1);
        }
      }
      __int16 v50 = a2->callbacks;
      if (v50)
      {
        disconnected = (void (*)(nw_protocol *, nw_protocol *))v50->disconnected;
        if (disconnected) {
          goto LABEL_99;
        }
      }
      __nwlog_obj();
      uint64_t v102 = a2->identifier;
      *(_DWORD *)long long buf = 136446722;
      v129 = "__nw_protocol_disconnected";
      if (!v102) {
        uint64_t v102 = (nw_protocol_identifier *)"invalid";
      }
      __int16 v130 = 2082;
      BOOL v131 = (nw_protocol *)v102;
      __int16 v132 = 2048;
      os_log_type_t v133 = a2;
      __int16 v35 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v126 = 0;
      if (!__nwlog_fault(v35, &type, &v126)) {
        goto LABEL_299;
      }
      if (type == OS_LOG_TYPE_FAULT) {
        goto LABEL_213;
      }
      if (v126)
      {
        os_log_type_t v45 = (char *)__nw_create_backtrace_string();
        uint64_t v37 = __nwlog_obj();
        os_log_type_t v38 = type;
        BOOL v39 = os_log_type_enabled(v37, type);
        if (v45)
        {
          if (!v39) {
            goto LABEL_248;
          }
          if (a2->identifier) {
            v115 = a2->identifier;
          }
          else {
            v115 = (nw_protocol_identifier *)"invalid";
          }
          *(_DWORD *)long long buf = 136446978;
          v129 = "__nw_protocol_disconnected";
          __int16 v130 = 2082;
          BOOL v131 = (nw_protocol *)v115;
          __int16 v132 = 2048;
          os_log_type_t v133 = a2;
          __int16 v134 = 2082;
LABEL_247:
          BOOL v135 = v45;
          _os_log_impl(&dword_1830D4000, v37, v38, "%{public}s protocol %{public}s (%p) has invalid disconnected callback, dumping backtrace:%{public}s", buf, 0x2Au);
LABEL_248:
          free(v45);
          if (!v35) {
            goto LABEL_100;
          }
          goto LABEL_300;
        }
        goto LABEL_267;
      }
    }
    uint64_t v37 = __nwlog_obj();
    os_log_type_t v38 = type;
    if (!os_log_type_enabled(v37, type)) {
      goto LABEL_299;
    }
    uint64_t v116 = a2->identifier;
    if (!v116) {
      uint64_t v116 = (nw_protocol_identifier *)"invalid";
    }
    *(_DWORD *)long long buf = 136446722;
    v129 = "__nw_protocol_disconnected";
    __int16 v130 = 2082;
    BOOL v131 = (nw_protocol *)v116;
    goto LABEL_288;
  }
LABEL_9:
  uint64_t v7 = handle[9];
  if (v7)
  {
    if (gLogDatapath)
    {
      uint64_t v90 = __nwlog_obj();
      if (os_log_type_enabled(v90, OS_LOG_TYPE_DEBUG))
      {
        uint32_t v91 = a1->identifier;
        if (!v91) {
          uint32_t v91 = (nw_protocol_identifier *)"invalid";
        }
        *(_DWORD *)long long buf = 136446722;
        v129 = "nw_protocol_plugin_metadata_disconnect";
        __int16 v130 = 2048;
        BOOL v131 = a1;
        __int16 v132 = 2080;
        os_log_type_t v133 = (nw_protocol *)v91;
        _os_log_impl(&dword_1830D4000, v90, OS_LOG_TYPE_DEBUG, "%{public}s protocol %p:%s disconnect", buf, 0x20u);
      }
    }
    char v8 = *(unsigned char *)(v7 + 142);
    if (v8) {
      *(unsigned char *)(v7 + 140) = 3;
    }
    *(unsigned char *)(v7 + 142) = v8 & 0xFE;
    if ((v8 & 8) != 0)
    {
      if (gLogDatapath)
      {
        int v105 = __nwlog_obj();
        if (os_log_type_enabled(v105, OS_LOG_TYPE_DEBUG))
        {
          os_log_type_t v106 = a1->identifier;
          if (!v106) {
            os_log_type_t v106 = (nw_protocol_identifier *)"invalid";
          }
          *(_DWORD *)long long buf = 136446722;
          v129 = "nw_protocol_plugin_metadata_disconnect";
          __int16 v130 = 2048;
          BOOL v131 = a1;
          __int16 v132 = 2080;
          os_log_type_t v133 = (nw_protocol *)v106;
          _os_log_impl(&dword_1830D4000, v105, OS_LOG_TYPE_DEBUG, "%{public}s protocol %p:%s sending disconnected immediately as it had previously received disconnected", buf, 0x20u);
        }
      }
      *(unsigned char *)(v7 + 142) &= ~8u;
      uint64_t output_handler = (uint64_t)a1->output_handler;
      os_log_type_t v10 = a1->handle;
      if (v10 == &nw_protocol_ref_counted_handle)
      {
        uint64_t v11 = a1[1].callbacks;
        if (v11) {
          a1[1].callbacks = (nw_protocol_callbacks *)((char *)&v11->add_input_handler + 1);
        }
      }
      if (output_handler)
      {
        uint64_t v12 = *(void **)(output_handler + 40);
        if (v12 == &nw_protocol_ref_counted_handle)
        {
          uint64_t v13 = *(void *)(output_handler + 88);
          if (v13) {
            *(void *)(output_handler + 88) = v13 + 1;
          }
        }
        char v14 = a1->callbacks;
        if (v14)
        {
          os_log_type_t v15 = (void (*)(nw_protocol *, uint64_t))v14->disconnected;
          if (v15)
          {
            v15(a1, output_handler);
LABEL_25:
            if (v12 != &nw_protocol_ref_counted_handle
              || *(_UNKNOWN **)(output_handler + 40) != &nw_protocol_ref_counted_handle
              || (uint64_t v67 = *(void *)(output_handler + 88)) == 0
              || (uint64_t v68 = v67 - 1, (*(void *)(output_handler + 88) = v68) != 0))
            {
LABEL_27:
              if (v10 == &nw_protocol_ref_counted_handle && a1->handle == &nw_protocol_ref_counted_handle)
              {
                char v63 = a1[1].callbacks;
                if (v63)
                {
                  int v64 = (nw_protocol_callbacks *)((char *)v63 - 1);
                  a1[1].callbacks = v64;
                  if (!v64)
                  {
                    BOOL v65 = *(void (***)(void))a1[1].flow_id;
                    if (v65)
                    {
                      *(void *)a1[1].flow_id = 0;
                      v65[2](v65);
                      _Block_release(v65);
                    }
                    if (a1[1].flow_id[8])
                    {
                      long long v66 = *(const void **)a1[1].flow_id;
                      if (v66) {
                        _Block_release(v66);
                      }
                    }
                    free(a1);
                  }
                }
              }
              goto LABEL_29;
            }
            uint64_t v69 = *(void (***)(void))(output_handler + 64);
            if (v69)
            {
              *(void *)(output_handler + 64) = 0;
              v69[2](v69);
              _Block_release(v69);
            }
            if (*(unsigned char *)(output_handler + 72))
            {
              uint64_t v70 = *(const void **)(output_handler + 64);
              if (v70) {
                _Block_release(v70);
              }
            }
LABEL_145:
            free((void *)output_handler);
            goto LABEL_27;
          }
        }
        __nwlog_obj();
        os_log_type_t v92 = a1->identifier;
        *(_DWORD *)long long buf = 136446722;
        v129 = "__nw_protocol_disconnected";
        if (!v92) {
          os_log_type_t v92 = (nw_protocol_identifier *)"invalid";
        }
        __int16 v130 = 2082;
        BOOL v131 = (nw_protocol *)v92;
        __int16 v132 = 2048;
        os_log_type_t v133 = a1;
        uint64_t v93 = (char *)_os_log_send_and_compose_impl();
        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v126 = 0;
        if (__nwlog_fault(v93, &type, &v126))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            os_log_type_t v94 = __nwlog_obj();
            os_log_type_t v95 = type;
            if (!os_log_type_enabled(v94, type)) {
              goto LABEL_306;
            }
            BOOL v96 = a1->identifier;
            if (!v96) {
              BOOL v96 = (nw_protocol_identifier *)"invalid";
            }
            *(_DWORD *)long long buf = 136446722;
            v129 = "__nw_protocol_disconnected";
            __int16 v130 = 2082;
            BOOL v131 = (nw_protocol *)v96;
            __int16 v132 = 2048;
            os_log_type_t v133 = a1;
            uint64_t v97 = "%{public}s protocol %{public}s (%p) has invalid disconnected callback";
            goto LABEL_305;
          }
          os_log_type_t v110 = v12;
          if (!v126)
          {
            os_log_type_t v94 = __nwlog_obj();
            os_log_type_t v95 = type;
            if (!os_log_type_enabled(v94, type)) {
              goto LABEL_306;
            }
            uint64_t v123 = a1->identifier;
            if (!v123) {
              uint64_t v123 = (nw_protocol_identifier *)"invalid";
            }
            *(_DWORD *)long long buf = 136446722;
            v129 = "__nw_protocol_disconnected";
            __int16 v130 = 2082;
            BOOL v131 = (nw_protocol *)v123;
            __int16 v132 = 2048;
            os_log_type_t v133 = a1;
            uint64_t v97 = "%{public}s protocol %{public}s (%p) has invalid disconnected callback, backtrace limit exceeded";
            goto LABEL_305;
          }
          BOOL v111 = (char *)__nw_create_backtrace_string();
          os_log_type_t v94 = __nwlog_obj();
          os_log_type_t v95 = type;
          BOOL v112 = os_log_type_enabled(v94, type);
          if (v111)
          {
            if (v112)
            {
              uint64_t v113 = a1->identifier;
              if (!v113) {
                uint64_t v113 = (nw_protocol_identifier *)"invalid";
              }
              *(_DWORD *)long long buf = 136446978;
              v129 = "__nw_protocol_disconnected";
              __int16 v130 = 2082;
              BOOL v131 = (nw_protocol *)v113;
              __int16 v132 = 2048;
              os_log_type_t v133 = a1;
              __int16 v134 = 2082;
              BOOL v135 = v111;
              _os_log_impl(&dword_1830D4000, v94, v95, "%{public}s protocol %{public}s (%p) has invalid disconnected callback, dumping backtrace:%{public}s", buf, 0x2Au);
            }
            free(v111);
            uint64_t v12 = v110;
            goto LABEL_306;
          }
          uint64_t v12 = v110;
          if (v112)
          {
            v125 = a1->identifier;
            if (!v125) {
              v125 = (nw_protocol_identifier *)"invalid";
            }
            *(_DWORD *)long long buf = 136446722;
            v129 = "__nw_protocol_disconnected";
            __int16 v130 = 2082;
            BOOL v131 = (nw_protocol *)v125;
            __int16 v132 = 2048;
            os_log_type_t v133 = a1;
            uint64_t v97 = "%{public}s protocol %{public}s (%p) has invalid disconnected callback, no backtrace";
LABEL_305:
            _os_log_impl(&dword_1830D4000, v94, v95, v97, buf, 0x20u);
          }
        }
LABEL_306:
        if (v93) {
          free(v93);
        }
        goto LABEL_25;
      }
      __nwlog_obj();
      *(_DWORD *)long long buf = 136446210;
      v129 = "__nw_protocol_disconnected";
      uint64_t output_handler = _os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v126 = 0;
      if (__nwlog_fault((const char *)output_handler, &type, &v126))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          BOOL v107 = __nwlog_obj();
          os_log_type_t v108 = type;
          if (!os_log_type_enabled(v107, type)) {
            goto LABEL_313;
          }
          *(_DWORD *)long long buf = 136446210;
          v129 = "__nw_protocol_disconnected";
          uint64_t v109 = "%{public}s called with null other_protocol";
          goto LABEL_312;
        }
        if (!v126)
        {
          BOOL v107 = __nwlog_obj();
          os_log_type_t v108 = type;
          if (!os_log_type_enabled(v107, type)) {
            goto LABEL_313;
          }
          *(_DWORD *)long long buf = 136446210;
          v129 = "__nw_protocol_disconnected";
          uint64_t v109 = "%{public}s called with null other_protocol, backtrace limit exceeded";
          goto LABEL_312;
        }
        char v119 = (char *)__nw_create_backtrace_string();
        BOOL v107 = __nwlog_obj();
        os_log_type_t v108 = type;
        BOOL v120 = os_log_type_enabled(v107, type);
        if (v119)
        {
          if (v120)
          {
            *(_DWORD *)long long buf = 136446466;
            v129 = "__nw_protocol_disconnected";
            __int16 v130 = 2082;
            BOOL v131 = (nw_protocol *)v119;
            _os_log_impl(&dword_1830D4000, v107, v108, "%{public}s called with null other_protocol, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v119);
          if (!output_handler) {
            goto LABEL_27;
          }
          goto LABEL_145;
        }
        if (v120)
        {
          *(_DWORD *)long long buf = 136446210;
          v129 = "__nw_protocol_disconnected";
          uint64_t v109 = "%{public}s called with null other_protocol, no backtrace";
LABEL_312:
          _os_log_impl(&dword_1830D4000, v107, v108, v109, buf, 0xCu);
        }
      }
LABEL_313:
      if (!output_handler) {
        goto LABEL_27;
      }
      goto LABEL_145;
    }
  }
LABEL_29:
  BOOL v16 = a1->output_handler;
  if (!v16)
  {
    __int16 v28 = a2->handle;
    if (v28 == &nw_protocol_ref_counted_handle)
    {
      BOOL v41 = a2[1].callbacks;
      if (v41) {
        a2[1].callbacks = (nw_protocol_callbacks *)((char *)&v41->add_input_handler + 1);
      }
    }
    uint64_t v30 = a1->handle;
    if (v30 == &nw_protocol_ref_counted_handle)
    {
      char v42 = a1[1].callbacks;
      if (v42) {
        a1[1].callbacks = (nw_protocol_callbacks *)((char *)&v42->add_input_handler + 1);
      }
    }
    uint64_t v43 = a2->callbacks;
    if (!v43 || (disconnected = (void (*)(nw_protocol *, nw_protocol *))v43->disconnected) == 0)
    {
      __nwlog_obj();
      uint64_t v44 = a2->identifier;
      *(_DWORD *)long long buf = 136446722;
      v129 = "__nw_protocol_disconnected";
      if (!v44) {
        uint64_t v44 = (nw_protocol_identifier *)"invalid";
      }
      __int16 v130 = 2082;
      BOOL v131 = (nw_protocol *)v44;
      __int16 v132 = 2048;
      os_log_type_t v133 = a2;
      __int16 v35 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v126 = 0;
      if (__nwlog_fault(v35, &type, &v126))
      {
        if (type != OS_LOG_TYPE_FAULT)
        {
          if (v126)
          {
            os_log_type_t v45 = (char *)__nw_create_backtrace_string();
            uint64_t v37 = __nwlog_obj();
            os_log_type_t v38 = type;
            BOOL v46 = os_log_type_enabled(v37, type);
            if (v45)
            {
              if (!v46) {
                goto LABEL_248;
              }
              char v47 = a2->identifier;
              if (!v47) {
                char v47 = (nw_protocol_identifier *)"invalid";
              }
              *(_DWORD *)long long buf = 136446978;
              v129 = "__nw_protocol_disconnected";
              __int16 v130 = 2082;
              BOOL v131 = (nw_protocol *)v47;
              __int16 v132 = 2048;
              os_log_type_t v133 = a2;
              __int16 v134 = 2082;
              goto LABEL_247;
            }
            if (!v46) {
              goto LABEL_299;
            }
            os_log_type_t v124 = a2->identifier;
            if (!v124) {
              os_log_type_t v124 = (nw_protocol_identifier *)"invalid";
            }
            *(_DWORD *)long long buf = 136446722;
            v129 = "__nw_protocol_disconnected";
            __int16 v130 = 2082;
            BOOL v131 = (nw_protocol *)v124;
LABEL_297:
            __int16 v132 = 2048;
            os_log_type_t v133 = a2;
            os_log_type_t v104 = "%{public}s protocol %{public}s (%p) has invalid disconnected callback, no backtrace";
            goto LABEL_298;
          }
          uint64_t v37 = __nwlog_obj();
          os_log_type_t v38 = type;
          if (!os_log_type_enabled(v37, type)) {
            goto LABEL_299;
          }
          uint64_t v122 = a2->identifier;
          if (!v122) {
            uint64_t v122 = (nw_protocol_identifier *)"invalid";
          }
          *(_DWORD *)long long buf = 136446722;
          v129 = "__nw_protocol_disconnected";
          __int16 v130 = 2082;
          BOOL v131 = (nw_protocol *)v122;
LABEL_288:
          __int16 v132 = 2048;
          os_log_type_t v133 = a2;
          os_log_type_t v104 = "%{public}s protocol %{public}s (%p) has invalid disconnected callback, backtrace limit exceeded";
LABEL_298:
          _os_log_impl(&dword_1830D4000, v37, v38, v104, buf, 0x20u);
          goto LABEL_299;
        }
LABEL_213:
        uint64_t v37 = __nwlog_obj();
        os_log_type_t v38 = type;
        if (!os_log_type_enabled(v37, type)) {
          goto LABEL_299;
        }
        uint64_t v103 = a2->identifier;
        if (!v103) {
          uint64_t v103 = (nw_protocol_identifier *)"invalid";
        }
        *(_DWORD *)long long buf = 136446722;
        v129 = "__nw_protocol_disconnected";
        __int16 v130 = 2082;
        BOOL v131 = (nw_protocol *)v103;
        __int16 v132 = 2048;
        os_log_type_t v133 = a2;
        os_log_type_t v104 = "%{public}s protocol %{public}s (%p) has invalid disconnected callback";
        goto LABEL_298;
      }
LABEL_299:
      if (v35) {
LABEL_300:
      }
        free(v35);
LABEL_100:
      if (v30 == &nw_protocol_ref_counted_handle && a1->handle == &nw_protocol_ref_counted_handle)
      {
        uint64_t v51 = a1[1].callbacks;
        if (v51)
        {
          uint64_t v52 = (nw_protocol_callbacks *)((char *)v51 - 1);
          a1[1].callbacks = v52;
          if (!v52)
          {
            uint64_t v53 = *(void (***)(void))a1[1].flow_id;
            if (v53)
            {
              *(void *)a1[1].flow_id = 0;
              v53[2](v53);
              _Block_release(v53);
            }
            if (a1[1].flow_id[8])
            {
              char v54 = *(const void **)a1[1].flow_id;
              if (v54) {
                _Block_release(v54);
              }
            }
            free(a1);
          }
        }
      }
      if (v28 == &nw_protocol_ref_counted_handle && a2->handle == &nw_protocol_ref_counted_handle)
      {
        int v55 = a2[1].callbacks;
        if (v55)
        {
          int v56 = (nw_protocol_callbacks *)((char *)v55 - 1);
          a2[1].callbacks = v56;
          if (!v56)
          {
            unint64_t v57 = *(void (***)(void))a2[1].flow_id;
            if (v57)
            {
              *(void *)a2[1].flow_id = 0;
              v57[2](v57);
              _Block_release(v57);
            }
            if (a2[1].flow_id[8])
            {
              unsigned int v58 = *(const void **)a2[1].flow_id;
              if (v58) {
                _Block_release(v58);
              }
            }
            uint64_t v27 = a2;
            goto LABEL_121;
          }
        }
      }
      return;
    }
LABEL_99:
    disconnected(a2, a1);
    goto LABEL_100;
  }
  BOOL v17 = v16->handle;
  if (v17 == &nw_protocol_ref_counted_handle)
  {
    char v18 = v16[1].callbacks;
    if (v18) {
      v16[1].callbacks = (nw_protocol_callbacks *)((char *)&v18->add_input_handler + 1);
    }
  }
  BOOL v19 = a1->handle;
  if (v19 == &nw_protocol_ref_counted_handle)
  {
    uint64_t v20 = a1[1].callbacks;
    if (v20) {
      a1[1].callbacks = (nw_protocol_callbacks *)((char *)&v20->add_input_handler + 1);
    }
  }
  BOOL v21 = v16->callbacks;
  if (v21)
  {
    disconnect = (void (*)(nw_protocol *, nw_protocol *))v21->disconnect;
    if (disconnect)
    {
      disconnect(v16, a1);
      goto LABEL_39;
    }
  }
  __nwlog_obj();
  name = v16->identifier->name;
  *(_DWORD *)long long buf = 136446722;
  v129 = "__nw_protocol_disconnect";
  if (!name) {
    name = "invalid";
  }
  __int16 v130 = 2082;
  BOOL v131 = (nw_protocol *)name;
  __int16 v132 = 2048;
  os_log_type_t v133 = v16;
  uint64_t v78 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v126 = 0;
  if (__nwlog_fault(v78, &type, &v126))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v79 = __nwlog_obj();
      os_log_type_t v80 = type;
      if (!os_log_type_enabled(v79, type)) {
        goto LABEL_282;
      }
      uint64_t v81 = v16->identifier->name;
      if (!v81) {
        uint64_t v81 = "invalid";
      }
      *(_DWORD *)long long buf = 136446722;
      v129 = "__nw_protocol_disconnect";
      __int16 v130 = 2082;
      BOOL v131 = (nw_protocol *)v81;
      __int16 v132 = 2048;
      os_log_type_t v133 = v16;
      BOOL v82 = "%{public}s protocol %{public}s (%p) has invalid disconnect callback";
      goto LABEL_281;
    }
    if (!v126)
    {
      os_log_type_t v79 = __nwlog_obj();
      os_log_type_t v80 = type;
      if (!os_log_type_enabled(v79, type)) {
        goto LABEL_282;
      }
      uint64_t v117 = v16->identifier->name;
      if (!v117) {
        uint64_t v117 = "invalid";
      }
      *(_DWORD *)long long buf = 136446722;
      v129 = "__nw_protocol_disconnect";
      __int16 v130 = 2082;
      BOOL v131 = (nw_protocol *)v117;
      __int16 v132 = 2048;
      os_log_type_t v133 = v16;
      BOOL v82 = "%{public}s protocol %{public}s (%p) has invalid disconnect callback, backtrace limit exceeded";
      goto LABEL_281;
    }
    uint64_t v98 = (char *)__nw_create_backtrace_string();
    os_log_type_t v79 = __nwlog_obj();
    os_log_type_t v80 = type;
    BOOL v99 = os_log_type_enabled(v79, type);
    if (v98)
    {
      if (v99)
      {
        uint64_t v100 = v16->identifier->name;
        if (!v100) {
          uint64_t v100 = "invalid";
        }
        *(_DWORD *)long long buf = 136446978;
        v129 = "__nw_protocol_disconnect";
        __int16 v130 = 2082;
        BOOL v131 = (nw_protocol *)v100;
        __int16 v132 = 2048;
        os_log_type_t v133 = v16;
        __int16 v134 = 2082;
        BOOL v135 = v98;
        _os_log_impl(&dword_1830D4000, v79, v80, "%{public}s protocol %{public}s (%p) has invalid disconnect callback, dumping backtrace:%{public}s", buf, 0x2Au);
      }
      free(v98);
      goto LABEL_282;
    }
    if (v99)
    {
      uint64_t v121 = v16->identifier->name;
      if (!v121) {
        uint64_t v121 = "invalid";
      }
      *(_DWORD *)long long buf = 136446722;
      v129 = "__nw_protocol_disconnect";
      __int16 v130 = 2082;
      BOOL v131 = (nw_protocol *)v121;
      __int16 v132 = 2048;
      os_log_type_t v133 = v16;
      BOOL v82 = "%{public}s protocol %{public}s (%p) has invalid disconnect callback, no backtrace";
LABEL_281:
      _os_log_impl(&dword_1830D4000, v79, v80, v82, buf, 0x20u);
    }
  }
LABEL_282:
  if (v78) {
    free(v78);
  }
LABEL_39:
  if (v19 == &nw_protocol_ref_counted_handle && a1->handle == &nw_protocol_ref_counted_handle)
  {
    uint64_t v59 = a1[1].callbacks;
    if (v59)
    {
      os_log_type_t v60 = (nw_protocol_callbacks *)((char *)v59 - 1);
      a1[1].callbacks = v60;
      if (!v60)
      {
        uint64_t v61 = *(void (***)(void))a1[1].flow_id;
        if (v61)
        {
          *(void *)a1[1].flow_id = 0;
          v61[2](v61);
          _Block_release(v61);
        }
        if (a1[1].flow_id[8])
        {
          int v62 = *(const void **)a1[1].flow_id;
          if (v62) {
            _Block_release(v62);
          }
        }
        free(a1);
      }
    }
  }
  if (v17 == &nw_protocol_ref_counted_handle && v16->handle == &nw_protocol_ref_counted_handle)
  {
    __int16 v23 = v16[1].callbacks;
    if (v23)
    {
      BOOL v24 = (nw_protocol_callbacks *)((char *)v23 - 1);
      v16[1].callbacks = v24;
      if (!v24)
      {
        uint64_t v25 = *(void (***)(void))v16[1].flow_id;
        if (v25)
        {
          *(void *)v16[1].flow_id = 0;
          v25[2](v25);
          _Block_release(v25);
        }
        if (v16[1].flow_id[8])
        {
          uint64_t v26 = *(const void **)v16[1].flow_id;
          if (v26) {
            _Block_release(v26);
          }
        }
        uint64_t v27 = v16;
        goto LABEL_121;
      }
    }
  }
}

void nw_protocol_plugin_name_set_name(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    uint64_t v49 = "nw_protocol_plugin_name_set_name";
    uint64_t v25 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v46 = 0;
    if (!__nwlog_fault(v25, &type, &v46)) {
      goto LABEL_89;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v26 = __nwlog_obj();
      os_log_type_t v27 = type;
      if (!os_log_type_enabled(v26, type)) {
        goto LABEL_89;
      }
      *(_DWORD *)long long buf = 136446210;
      uint64_t v49 = "nw_protocol_plugin_name_set_name";
      __int16 v28 = "%{public}s called with null name_plugin";
    }
    else if (v46)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v26 = __nwlog_obj();
      os_log_type_t v27 = type;
      BOOL v36 = os_log_type_enabled(v26, type);
      if (backtrace_string)
      {
        if (v36)
        {
          *(_DWORD *)long long buf = 136446466;
          uint64_t v49 = "nw_protocol_plugin_name_set_name";
          __int16 v50 = 2082;
          uint64_t v51 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v26, v27, "%{public}s called with null name_plugin, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_89:
        if (!v25) {
          return;
        }
        goto LABEL_90;
      }
      if (!v36) {
        goto LABEL_89;
      }
      *(_DWORD *)long long buf = 136446210;
      uint64_t v49 = "nw_protocol_plugin_name_set_name";
      __int16 v28 = "%{public}s called with null name_plugin, no backtrace";
    }
    else
    {
      uint64_t v26 = __nwlog_obj();
      os_log_type_t v27 = type;
      if (!os_log_type_enabled(v26, type)) {
        goto LABEL_89;
      }
      *(_DWORD *)long long buf = 136446210;
      uint64_t v49 = "nw_protocol_plugin_name_set_name";
      __int16 v28 = "%{public}s called with null name_plugin, backtrace limit exceeded";
    }
    goto LABEL_88;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    uint64_t v49 = "nw_protocol_plugin_name_set_name";
    uint64_t v25 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v46 = 0;
    if (!__nwlog_fault(v25, &type, &v46)) {
      goto LABEL_89;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v46)
      {
        uint64_t v26 = __nwlog_obj();
        os_log_type_t v27 = type;
        if (!os_log_type_enabled(v26, type)) {
          goto LABEL_89;
        }
        *(_DWORD *)long long buf = 136446210;
        uint64_t v49 = "nw_protocol_plugin_name_set_name";
        __int16 v28 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_88;
      }
      uint64_t v37 = (char *)__nw_create_backtrace_string();
      uint64_t v26 = __nwlog_obj();
      os_log_type_t v27 = type;
      BOOL v38 = os_log_type_enabled(v26, type);
      if (!v37)
      {
        if (!v38) {
          goto LABEL_89;
        }
        *(_DWORD *)long long buf = 136446210;
        uint64_t v49 = "nw_protocol_plugin_name_set_name";
        __int16 v28 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_88;
      }
      if (v38)
      {
        *(_DWORD *)long long buf = 136446466;
        uint64_t v49 = "nw_protocol_plugin_name_set_name";
        __int16 v50 = 2082;
        uint64_t v51 = v37;
        BOOL v39 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_62:
        _os_log_impl(&dword_1830D4000, v26, v27, v39, buf, 0x16u);
      }
LABEL_63:
      free(v37);
      if (!v25) {
        return;
      }
LABEL_90:
      free(v25);
      return;
    }
    uint64_t v26 = __nwlog_obj();
    os_log_type_t v27 = type;
    if (!os_log_type_enabled(v26, type)) {
      goto LABEL_89;
    }
    *(_DWORD *)long long buf = 136446210;
    uint64_t v49 = "nw_protocol_plugin_name_set_name";
    __int16 v28 = "%{public}s called with null protocol";
LABEL_88:
    _os_log_impl(&dword_1830D4000, v26, v27, v28, buf, 0xCu);
    goto LABEL_89;
  }
  uint64_t v4 = a3;
  if (a3) {
    goto LABEL_12;
  }
  char v6 = *(void **)(a2 + 40);
  if (v6 == &nw_protocol_ref_counted_handle)
  {
    uint64_t v7 = *(void *)(a2 + 88);
    if (v7) {
      *(void *)(a2 + 88) = v7 + 1;
    }
  }
  uint64_t v8 = *(void *)(a2 + 24);
  if (v8)
  {
    uint64_t v9 = *(uint64_t (**)(uint64_t))(v8 + 112);
    if (v9)
    {
      uint64_t v4 = (uint64_t *)v9(a2);
      if (v6 != &nw_protocol_ref_counted_handle) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
  }
  __nwlog_obj();
  uint64_t v29 = *(const char **)(a2 + 16);
  *(_DWORD *)long long buf = 136446722;
  uint64_t v49 = "__nw_protocol_get_parameters";
  if (!v29) {
    uint64_t v29 = "invalid";
  }
  __int16 v50 = 2082;
  uint64_t v51 = (void *)v29;
  __int16 v52 = 2048;
  uint64_t v53 = a2;
  uint64_t v30 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v46 = 0;
  if (__nwlog_fault(v30, &type, &v46))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v31 = __nwlog_obj();
      os_log_type_t v32 = type;
      if (!os_log_type_enabled(v31, type)) {
        goto LABEL_96;
      }
      int v33 = *(const char **)(a2 + 16);
      if (!v33) {
        int v33 = "invalid";
      }
      *(_DWORD *)long long buf = 136446722;
      uint64_t v49 = "__nw_protocol_get_parameters";
      __int16 v50 = 2082;
      uint64_t v51 = (void *)v33;
      __int16 v52 = 2048;
      uint64_t v53 = a2;
      uint64_t v34 = "%{public}s protocol %{public}s (%p) has invalid get_parameters callback";
LABEL_95:
      _os_log_impl(&dword_1830D4000, v31, v32, v34, buf, 0x20u);
      goto LABEL_96;
    }
    if (!v46)
    {
      char v31 = __nwlog_obj();
      os_log_type_t v32 = type;
      if (!os_log_type_enabled(v31, type)) {
        goto LABEL_96;
      }
      uint64_t v44 = *(const char **)(a2 + 16);
      if (!v44) {
        uint64_t v44 = "invalid";
      }
      *(_DWORD *)long long buf = 136446722;
      uint64_t v49 = "__nw_protocol_get_parameters";
      __int16 v50 = 2082;
      uint64_t v51 = (void *)v44;
      __int16 v52 = 2048;
      uint64_t v53 = a2;
      uint64_t v34 = "%{public}s protocol %{public}s (%p) has invalid get_parameters callback, backtrace limit exceeded";
      goto LABEL_95;
    }
    BOOL v41 = (char *)__nw_create_backtrace_string();
    char v31 = __nwlog_obj();
    os_log_type_t v32 = type;
    BOOL v42 = os_log_type_enabled(v31, type);
    if (!v41)
    {
      if (!v42) {
        goto LABEL_96;
      }
      os_log_type_t v45 = *(const char **)(a2 + 16);
      if (!v45) {
        os_log_type_t v45 = "invalid";
      }
      *(_DWORD *)long long buf = 136446722;
      uint64_t v49 = "__nw_protocol_get_parameters";
      __int16 v50 = 2082;
      uint64_t v51 = (void *)v45;
      __int16 v52 = 2048;
      uint64_t v53 = a2;
      uint64_t v34 = "%{public}s protocol %{public}s (%p) has invalid get_parameters callback, no backtrace";
      goto LABEL_95;
    }
    if (v42)
    {
      uint64_t v43 = *(const char **)(a2 + 16);
      if (!v43) {
        uint64_t v43 = "invalid";
      }
      *(_DWORD *)long long buf = 136446978;
      uint64_t v49 = "__nw_protocol_get_parameters";
      __int16 v50 = 2082;
      uint64_t v51 = (void *)v43;
      __int16 v52 = 2048;
      uint64_t v53 = a2;
      __int16 v54 = 2082;
      int v55 = v41;
      _os_log_impl(&dword_1830D4000, v31, v32, "%{public}s protocol %{public}s (%p) has invalid get_parameters callback, dumping backtrace:%{public}s", buf, 0x2Au);
    }
    free(v41);
  }
LABEL_96:
  if (v30) {
    free(v30);
  }
  uint64_t v4 = 0;
  if (v6 == &nw_protocol_ref_counted_handle)
  {
LABEL_10:
    if (*(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
    {
      uint64_t v21 = *(void *)(a2 + 88);
      if (v21)
      {
        uint64_t v22 = v21 - 1;
        *(void *)(a2 + 88) = v22;
        if (!v22)
        {
          __int16 v23 = *(void (***)(void))(a2 + 64);
          if (v23)
          {
            *(void *)(a2 + 64) = 0;
            v23[2](v23);
            _Block_release(v23);
          }
          if (*(unsigned char *)(a2 + 72))
          {
            BOOL v24 = *(const void **)(a2 + 64);
            if (v24) {
              _Block_release(v24);
            }
          }
          free((void *)a2);
        }
      }
    }
  }
LABEL_11:
  if (!v4)
  {
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    uint64_t v49 = "nw_protocol_plugin_name_set_name";
    uint64_t v25 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v46 = 0;
    if (!__nwlog_fault(v25, &type, &v46)) {
      goto LABEL_89;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v26 = __nwlog_obj();
      os_log_type_t v27 = type;
      if (!os_log_type_enabled(v26, type)) {
        goto LABEL_89;
      }
      *(_DWORD *)long long buf = 136446210;
      uint64_t v49 = "nw_protocol_plugin_name_set_name";
      __int16 v28 = "%{public}s called with null parameters";
      goto LABEL_88;
    }
    if (!v46)
    {
      uint64_t v26 = __nwlog_obj();
      os_log_type_t v27 = type;
      if (!os_log_type_enabled(v26, type)) {
        goto LABEL_89;
      }
      *(_DWORD *)long long buf = 136446210;
      uint64_t v49 = "nw_protocol_plugin_name_set_name";
      __int16 v28 = "%{public}s called with null parameters, backtrace limit exceeded";
      goto LABEL_88;
    }
    uint64_t v37 = (char *)__nw_create_backtrace_string();
    uint64_t v26 = __nwlog_obj();
    os_log_type_t v27 = type;
    BOOL v40 = os_log_type_enabled(v26, type);
    if (!v37)
    {
      if (!v40) {
        goto LABEL_89;
      }
      *(_DWORD *)long long buf = 136446210;
      uint64_t v49 = "nw_protocol_plugin_name_set_name";
      __int16 v28 = "%{public}s called with null parameters, no backtrace";
      goto LABEL_88;
    }
    if (v40)
    {
      *(_DWORD *)long long buf = 136446466;
      uint64_t v49 = "nw_protocol_plugin_name_set_name";
      __int16 v50 = 2082;
      uint64_t v51 = v37;
      BOOL v39 = "%{public}s called with null parameters, dumping backtrace:%{public}s";
      goto LABEL_62;
    }
    goto LABEL_63;
  }
LABEL_12:
  *(unsigned char *)(a1 + 94) = *(unsigned char *)(a1 + 94) & 0xFE | nw_path_parameters_get_logging_disabled(v4[13]);
  os_log_type_t v10 = nw_parameters_copy_protocol_options_legacy(v4, (nw_protocol *)a2);
  if (v10)
  {
    uint64_t v11 = v10;
    uint64_t v12 = v11;
    uint64_t v13 = 0;
    *(unsigned char *)(a1 + 10) = 0;
    uint64_t v14 = a1 + 10;
    unint64_t v15 = 84;
    while (1)
    {
      int v16 = v11[v13 + 48];
      *(unsigned char *)(v14 + v13) = v16;
      if (!v16) {
        break;
      }
      --v15;
      ++v13;
      if (v15 <= 1)
      {
        *(unsigned char *)(v14 + v13) = 0;
        break;
      }
    }

    BOOL v17 = v12;
    __int16 v18 = *((_WORD *)v17 + 68);

    *(_WORD *)(a1 + 8) = v18;
    os_release(v17);
  }
  else
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v19 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v20 = *(void **)(a2 + 16);
      *(_DWORD *)long long buf = 136446466;
      uint64_t v49 = "nw_protocol_plugin_name_set_name";
      __int16 v50 = 2080;
      uint64_t v51 = v20;
      _os_log_impl(&dword_1830D4000, v19, OS_LOG_TYPE_DEBUG, "%{public}s No options found for %s in parameters, cannot find name", buf, 0x16u);
    }
  }
}

uint64_t nw_protocol_plugin_name_add_input_handler(uint64_t a1, uint64_t a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    uint64_t v21 = "nw_protocol_plugin_name_add_input_handler";
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v18 = 0;
    if (!__nwlog_fault(v8, &type, &v18)) {
      goto LABEL_61;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v18)
      {
        uint64_t v9 = __nwlog_obj();
        os_log_type_t v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)long long buf = 136446210;
          uint64_t v21 = "nw_protocol_plugin_name_add_input_handler";
          uint64_t v11 = "%{public}s called with null protocol, backtrace limit exceeded";
          goto LABEL_60;
        }
        goto LABEL_61;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)long long buf = 136446210;
          uint64_t v21 = "nw_protocol_plugin_name_add_input_handler";
          uint64_t v11 = "%{public}s called with null protocol, no backtrace";
          goto LABEL_60;
        }
        goto LABEL_61;
      }
      if (!v13) {
        goto LABEL_43;
      }
      *(_DWORD *)long long buf = 136446466;
      uint64_t v21 = "nw_protocol_plugin_name_add_input_handler";
      __int16 v22 = 2082;
      __int16 v23 = backtrace_string;
      uint64_t v14 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
      goto LABEL_42;
    }
    uint64_t v9 = __nwlog_obj();
    os_log_type_t v10 = type;
    if (!os_log_type_enabled(v9, type)) {
      goto LABEL_61;
    }
    *(_DWORD *)long long buf = 136446210;
    uint64_t v21 = "nw_protocol_plugin_name_add_input_handler";
    uint64_t v11 = "%{public}s called with null protocol";
LABEL_60:
    _os_log_impl(&dword_1830D4000, v9, v10, v11, buf, 0xCu);
    goto LABEL_61;
  }
  uint64_t v3 = *(void *)(a1 + 40);
  if (!v3)
  {
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    uint64_t v21 = "nw_protocol_plugin_name_add_input_handler";
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v18 = 0;
    if (!__nwlog_fault(v8, &type, &v18)) {
      goto LABEL_61;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v18)
      {
        uint64_t v9 = __nwlog_obj();
        os_log_type_t v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)long long buf = 136446210;
          uint64_t v21 = "nw_protocol_plugin_name_add_input_handler";
          uint64_t v11 = "%{public}s called with null protocol->handle, backtrace limit exceeded";
          goto LABEL_60;
        }
        goto LABEL_61;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v15 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)long long buf = 136446210;
          uint64_t v21 = "nw_protocol_plugin_name_add_input_handler";
          uint64_t v11 = "%{public}s called with null protocol->handle, no backtrace";
          goto LABEL_60;
        }
        goto LABEL_61;
      }
      if (!v15) {
        goto LABEL_43;
      }
      *(_DWORD *)long long buf = 136446466;
      uint64_t v21 = "nw_protocol_plugin_name_add_input_handler";
      __int16 v22 = 2082;
      __int16 v23 = backtrace_string;
      uint64_t v14 = "%{public}s called with null protocol->handle, dumping backtrace:%{public}s";
      goto LABEL_42;
    }
    uint64_t v9 = __nwlog_obj();
    os_log_type_t v10 = type;
    if (!os_log_type_enabled(v9, type)) {
      goto LABEL_61;
    }
    *(_DWORD *)long long buf = 136446210;
    uint64_t v21 = "nw_protocol_plugin_name_add_input_handler";
    uint64_t v11 = "%{public}s called with null protocol->handle";
    goto LABEL_60;
  }
  uint64_t v4 = *(unsigned int (***)(uint64_t, uint64_t))(v3 + 64);
  if (!v4)
  {
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    uint64_t v21 = "nw_protocol_plugin_name_add_input_handler";
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v18 = 0;
    if (!__nwlog_fault(v8, &type, &v18)) {
      goto LABEL_61;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (!os_log_type_enabled(v9, type)) {
        goto LABEL_61;
      }
      *(_DWORD *)long long buf = 136446210;
      uint64_t v21 = "nw_protocol_plugin_name_add_input_handler";
      uint64_t v11 = "%{public}s called with null name_plugin";
      goto LABEL_60;
    }
    if (!v18)
    {
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v21 = "nw_protocol_plugin_name_add_input_handler";
        uint64_t v11 = "%{public}s called with null name_plugin, backtrace limit exceeded";
        goto LABEL_60;
      }
      goto LABEL_61;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v9 = __nwlog_obj();
    os_log_type_t v10 = type;
    BOOL v16 = os_log_type_enabled(v9, type);
    if (!backtrace_string)
    {
      if (v16)
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v21 = "nw_protocol_plugin_name_add_input_handler";
        uint64_t v11 = "%{public}s called with null name_plugin, no backtrace";
        goto LABEL_60;
      }
      goto LABEL_61;
    }
    if (!v16) {
      goto LABEL_43;
    }
    *(_DWORD *)long long buf = 136446466;
    uint64_t v21 = "nw_protocol_plugin_name_add_input_handler";
    __int16 v22 = 2082;
    __int16 v23 = backtrace_string;
    uint64_t v14 = "%{public}s called with null name_plugin, dumping backtrace:%{public}s";
LABEL_42:
    _os_log_impl(&dword_1830D4000, v9, v10, v14, buf, 0x16u);
    goto LABEL_43;
  }
  if (a2)
  {
    if ((*v4)(a1, a2)) {
      uint64_t v6 = nw_protocol_common_add_input_handler(a1, a2);
    }
    else {
      uint64_t v6 = 0;
    }
    nw_protocol_plugin_name_set_name((uint64_t)v4, a1, 0);
    return v6;
  }
  __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  uint64_t v21 = "nw_protocol_plugin_name_add_input_handler";
  uint64_t v8 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v18 = 0;
  if (!__nwlog_fault(v8, &type, &v18)) {
    goto LABEL_61;
  }
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v18)
    {
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v21 = "nw_protocol_plugin_name_add_input_handler";
        uint64_t v11 = "%{public}s called with null input_protocol, backtrace limit exceeded";
        goto LABEL_60;
      }
      goto LABEL_61;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v9 = __nwlog_obj();
    os_log_type_t v10 = type;
    BOOL v17 = os_log_type_enabled(v9, type);
    if (!backtrace_string)
    {
      if (v17)
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v21 = "nw_protocol_plugin_name_add_input_handler";
        uint64_t v11 = "%{public}s called with null input_protocol, no backtrace";
        goto LABEL_60;
      }
      goto LABEL_61;
    }
    if (v17)
    {
      *(_DWORD *)long long buf = 136446466;
      uint64_t v21 = "nw_protocol_plugin_name_add_input_handler";
      __int16 v22 = 2082;
      __int16 v23 = backtrace_string;
      uint64_t v14 = "%{public}s called with null input_protocol, dumping backtrace:%{public}s";
      goto LABEL_42;
    }
LABEL_43:
    free(backtrace_string);
    goto LABEL_61;
  }
  uint64_t v9 = __nwlog_obj();
  os_log_type_t v10 = type;
  if (os_log_type_enabled(v9, type))
  {
    *(_DWORD *)long long buf = 136446210;
    uint64_t v21 = "nw_protocol_plugin_name_add_input_handler";
    uint64_t v11 = "%{public}s called with null input_protocol";
    goto LABEL_60;
  }
LABEL_61:
  if (v8) {
    free(v8);
  }
  return 0;
}

void nw_protocol_plugin_name_set_callbacks(uint64_t a1, uint64_t a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    uint64_t v20 = "nw_protocol_plugin_name_set_callbacks";
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v17 = 0;
    if (!__nwlog_fault(v5, &type, &v17)) {
      goto LABEL_73;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v17)
      {
        uint64_t v6 = __nwlog_obj();
        os_log_type_t v7 = type;
        if (!os_log_type_enabled(v6, type)) {
          goto LABEL_73;
        }
        *(_DWORD *)long long buf = 136446210;
        uint64_t v20 = "nw_protocol_plugin_name_set_callbacks";
        uint64_t v8 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_72;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (!backtrace_string)
      {
        if (!v10) {
          goto LABEL_73;
        }
        *(_DWORD *)long long buf = 136446210;
        uint64_t v20 = "nw_protocol_plugin_name_set_callbacks";
        uint64_t v8 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_72;
      }
      if (v10)
      {
        *(_DWORD *)long long buf = 136446466;
        uint64_t v20 = "nw_protocol_plugin_name_set_callbacks";
        __int16 v21 = 2082;
        __int16 v22 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
LABEL_73:
      if (v5) {
        goto LABEL_74;
      }
      return;
    }
    uint64_t v6 = __nwlog_obj();
    os_log_type_t v7 = type;
    if (!os_log_type_enabled(v6, type)) {
      goto LABEL_73;
    }
    *(_DWORD *)long long buf = 136446210;
    uint64_t v20 = "nw_protocol_plugin_name_set_callbacks";
    uint64_t v8 = "%{public}s called with null protocol";
    goto LABEL_72;
  }
  uint64_t v2 = *(void *)(a1 + 40);
  if (!v2)
  {
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    uint64_t v20 = "nw_protocol_plugin_name_set_callbacks";
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v17 = 0;
    if (!__nwlog_fault(v5, &type, &v17)) {
      goto LABEL_73;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v17)
      {
        uint64_t v6 = __nwlog_obj();
        os_log_type_t v7 = type;
        if (!os_log_type_enabled(v6, type)) {
          goto LABEL_73;
        }
        *(_DWORD *)long long buf = 136446210;
        uint64_t v20 = "nw_protocol_plugin_name_set_callbacks";
        uint64_t v8 = "%{public}s called with null protocol->handle, backtrace limit exceeded";
        goto LABEL_72;
      }
      uint64_t v11 = (char *)__nw_create_backtrace_string();
      uint64_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      BOOL v12 = os_log_type_enabled(v6, type);
      if (!v11)
      {
        if (!v12) {
          goto LABEL_73;
        }
        *(_DWORD *)long long buf = 136446210;
        uint64_t v20 = "nw_protocol_plugin_name_set_callbacks";
        uint64_t v8 = "%{public}s called with null protocol->handle, no backtrace";
        goto LABEL_72;
      }
      if (!v12) {
        goto LABEL_50;
      }
      *(_DWORD *)long long buf = 136446466;
      uint64_t v20 = "nw_protocol_plugin_name_set_callbacks";
      __int16 v21 = 2082;
      __int16 v22 = v11;
      BOOL v13 = "%{public}s called with null protocol->handle, dumping backtrace:%{public}s";
      goto LABEL_49;
    }
    uint64_t v6 = __nwlog_obj();
    os_log_type_t v7 = type;
    if (!os_log_type_enabled(v6, type)) {
      goto LABEL_73;
    }
    *(_DWORD *)long long buf = 136446210;
    uint64_t v20 = "nw_protocol_plugin_name_set_callbacks";
    uint64_t v8 = "%{public}s called with null protocol->handle";
LABEL_72:
    _os_log_impl(&dword_1830D4000, v6, v7, v8, buf, 0xCu);
    goto LABEL_73;
  }
  uint64_t v3 = *(void **)(v2 + 64);
  if (!v3)
  {
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    uint64_t v20 = "nw_protocol_plugin_name_set_callbacks";
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v17 = 0;
    if (!__nwlog_fault(v5, &type, &v17)) {
      goto LABEL_73;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v17)
      {
        uint64_t v6 = __nwlog_obj();
        os_log_type_t v7 = type;
        if (!os_log_type_enabled(v6, type)) {
          goto LABEL_73;
        }
        *(_DWORD *)long long buf = 136446210;
        uint64_t v20 = "nw_protocol_plugin_name_set_callbacks";
        uint64_t v8 = "%{public}s called with null name_plugin, backtrace limit exceeded";
        goto LABEL_72;
      }
      uint64_t v11 = (char *)__nw_create_backtrace_string();
      uint64_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      BOOL v14 = os_log_type_enabled(v6, type);
      if (!v11)
      {
        if (!v14) {
          goto LABEL_73;
        }
        *(_DWORD *)long long buf = 136446210;
        uint64_t v20 = "nw_protocol_plugin_name_set_callbacks";
        uint64_t v8 = "%{public}s called with null name_plugin, no backtrace";
        goto LABEL_72;
      }
      if (!v14) {
        goto LABEL_50;
      }
      *(_DWORD *)long long buf = 136446466;
      uint64_t v20 = "nw_protocol_plugin_name_set_callbacks";
      __int16 v21 = 2082;
      __int16 v22 = v11;
      BOOL v13 = "%{public}s called with null name_plugin, dumping backtrace:%{public}s";
      goto LABEL_49;
    }
    uint64_t v6 = __nwlog_obj();
    os_log_type_t v7 = type;
    if (!os_log_type_enabled(v6, type)) {
      goto LABEL_73;
    }
    *(_DWORD *)long long buf = 136446210;
    uint64_t v20 = "nw_protocol_plugin_name_set_callbacks";
    uint64_t v8 = "%{public}s called with null name_plugin";
    goto LABEL_72;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    uint64_t v20 = "nw_protocol_plugin_name_set_callbacks";
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v17 = 0;
    if (!__nwlog_fault(v5, &type, &v17)) {
      goto LABEL_73;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (!os_log_type_enabled(v6, type)) {
        goto LABEL_73;
      }
      *(_DWORD *)long long buf = 136446210;
      uint64_t v20 = "nw_protocol_plugin_name_set_callbacks";
      uint64_t v8 = "%{public}s called with null add_input_handler_processor";
      goto LABEL_72;
    }
    if (!v17)
    {
      uint64_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (!os_log_type_enabled(v6, type)) {
        goto LABEL_73;
      }
      *(_DWORD *)long long buf = 136446210;
      uint64_t v20 = "nw_protocol_plugin_name_set_callbacks";
      uint64_t v8 = "%{public}s called with null add_input_handler_processor, backtrace limit exceeded";
      goto LABEL_72;
    }
    uint64_t v11 = (char *)__nw_create_backtrace_string();
    uint64_t v6 = __nwlog_obj();
    os_log_type_t v7 = type;
    BOOL v15 = os_log_type_enabled(v6, type);
    if (!v11)
    {
      if (!v15) {
        goto LABEL_73;
      }
      *(_DWORD *)long long buf = 136446210;
      uint64_t v20 = "nw_protocol_plugin_name_set_callbacks";
      uint64_t v8 = "%{public}s called with null add_input_handler_processor, no backtrace";
      goto LABEL_72;
    }
    if (!v15) {
      goto LABEL_50;
    }
    *(_DWORD *)long long buf = 136446466;
    uint64_t v20 = "nw_protocol_plugin_name_set_callbacks";
    __int16 v21 = 2082;
    __int16 v22 = v11;
    BOOL v13 = "%{public}s called with null add_input_handler_processor, dumping backtrace:%{public}s";
LABEL_49:
    _os_log_impl(&dword_1830D4000, v6, v7, v13, buf, 0x16u);
    goto LABEL_50;
  }
  void *v3 = a2;
  uint64_t v4 = *(uint64_t (***)(uint64_t, uint64_t))(a1 + 24);
  if (v4)
  {
    uint64_t *v4 = nw_protocol_plugin_name_add_input_handler;
    void v4[4] = (uint64_t (*)(uint64_t, uint64_t))nw_protocol_plugins_disconnect;
    v4[5] = (uint64_t (*)(uint64_t, uint64_t))nw_protocol_plugins_connected;
    v4[23] = (uint64_t (*)(uint64_t, uint64_t))nw_protocol_plugins_input_finished;
    v4[6] = (uint64_t (*)(uint64_t, uint64_t))nw_protocol_plugins_disconnected;
    v4[7] = (uint64_t (*)(uint64_t, uint64_t))nw_protocol_plugins_error;
    v4[20] = (uint64_t (*)(uint64_t, uint64_t))nw_protocol_plugins_notify;
    v4[32] = (uint64_t (*)(uint64_t, uint64_t))nw_protocol_plugins_reset;
    return;
  }
  __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  uint64_t v20 = "nw_protocol_plugin_name_set_callbacks";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v17 = 0;
  if (!__nwlog_fault(v5, &type, &v17)) {
    goto LABEL_73;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    uint64_t v6 = __nwlog_obj();
    os_log_type_t v7 = type;
    if (!os_log_type_enabled(v6, type)) {
      goto LABEL_73;
    }
    *(_DWORD *)long long buf = 136446210;
    uint64_t v20 = "nw_protocol_plugin_name_set_callbacks";
    uint64_t v8 = "%{public}s called with null callbacks";
    goto LABEL_72;
  }
  if (!v17)
  {
    uint64_t v6 = __nwlog_obj();
    os_log_type_t v7 = type;
    if (!os_log_type_enabled(v6, type)) {
      goto LABEL_73;
    }
    *(_DWORD *)long long buf = 136446210;
    uint64_t v20 = "nw_protocol_plugin_name_set_callbacks";
    uint64_t v8 = "%{public}s called with null callbacks, backtrace limit exceeded";
    goto LABEL_72;
  }
  uint64_t v11 = (char *)__nw_create_backtrace_string();
  uint64_t v6 = __nwlog_obj();
  os_log_type_t v7 = type;
  BOOL v16 = os_log_type_enabled(v6, type);
  if (!v11)
  {
    if (!v16) {
      goto LABEL_73;
    }
    *(_DWORD *)long long buf = 136446210;
    uint64_t v20 = "nw_protocol_plugin_name_set_callbacks";
    uint64_t v8 = "%{public}s called with null callbacks, no backtrace";
    goto LABEL_72;
  }
  if (v16)
  {
    *(_DWORD *)long long buf = 136446466;
    uint64_t v20 = "nw_protocol_plugin_name_set_callbacks";
    __int16 v21 = 2082;
    __int16 v22 = v11;
    BOOL v13 = "%{public}s called with null callbacks, dumping backtrace:%{public}s";
    goto LABEL_49;
  }
LABEL_50:
  free(v11);
  if (v5) {
LABEL_74:
  }
    free(v5);
}

void nw_protocol_plugin_retry_begin_async(uint64_t a1)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v2 = *(unsigned int *)(a1 + 208) + 1;
    uint64_t v3 = v2 << 31 >> 31;
    *(_DWORD *)(a1 + 208) = v2;
    if (v3 == v2 && (v3 & 0x8000000000000000) == 0) {
      return;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v4 = *(unsigned int *)(a1 + 208);
    *(_DWORD *)long long buf = 136446978;
    uint64_t v24 = "nw_protocol_plugin_retry_begin_async";
    __int16 v25 = 2082;
    uint64_t v26 = "retry->async_count";
    __int16 v27 = 2048;
    uint64_t v28 = 1;
    __int16 v29 = 2048;
    uint64_t v30 = v4;
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (!__nwlog_fault(v5, &type, &v21)) {
      goto LABEL_18;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v6 = gLogObj;
      os_log_type_t v7 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        uint64_t v8 = *(unsigned int *)(a1 + 208);
        *(_DWORD *)long long buf = 136446978;
        uint64_t v24 = "nw_protocol_plugin_retry_begin_async";
        __int16 v25 = 2082;
        uint64_t v26 = "retry->async_count";
        __int16 v27 = 2048;
        uint64_t v28 = 1;
        __int16 v29 = 2048;
        uint64_t v30 = v8;
        uint64_t v9 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_17:
        _os_log_impl(&dword_1830D4000, v6, v7, v9, buf, 0x2Au);
      }
    }
    else if (v21)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v6 = gLogObj;
      os_log_type_t v7 = type;
      BOOL v11 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (backtrace_string)
      {
        if (v11)
        {
          uint64_t v12 = *(unsigned int *)(a1 + 208);
          *(_DWORD *)long long buf = 136447234;
          uint64_t v24 = "nw_protocol_plugin_retry_begin_async";
          __int16 v25 = 2082;
          uint64_t v26 = "retry->async_count";
          __int16 v27 = 2048;
          uint64_t v28 = 1;
          __int16 v29 = 2048;
          uint64_t v30 = v12;
          __int16 v31 = 2082;
          os_log_type_t v32 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
        }
        free(backtrace_string);
        goto LABEL_18;
      }
      if (v11)
      {
        uint64_t v14 = *(unsigned int *)(a1 + 208);
        *(_DWORD *)long long buf = 136446978;
        uint64_t v24 = "nw_protocol_plugin_retry_begin_async";
        __int16 v25 = 2082;
        uint64_t v26 = "retry->async_count";
        __int16 v27 = 2048;
        uint64_t v28 = 1;
        __int16 v29 = 2048;
        uint64_t v30 = v14;
        uint64_t v9 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
        goto LABEL_17;
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v6 = gLogObj;
      os_log_type_t v7 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        uint64_t v13 = *(unsigned int *)(a1 + 208);
        *(_DWORD *)long long buf = 136446978;
        uint64_t v24 = "nw_protocol_plugin_retry_begin_async";
        __int16 v25 = 2082;
        uint64_t v26 = "retry->async_count";
        __int16 v27 = 2048;
        uint64_t v28 = 1;
        __int16 v29 = 2048;
        uint64_t v30 = v13;
        uint64_t v9 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
        goto LABEL_17;
      }
    }
LABEL_18:
    if (v5) {
      free(v5);
    }
    *(_DWORD *)(a1 + 208) = -1;
    return;
  }
  __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  uint64_t v24 = "nw_protocol_plugin_retry_begin_async";
  BOOL v15 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v21 = 0;
  if (__nwlog_fault(v15, &type, &v21))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v16 = __nwlog_obj();
      os_log_type_t v17 = type;
      if (!os_log_type_enabled(v16, type)) {
        goto LABEL_36;
      }
      *(_DWORD *)long long buf = 136446210;
      uint64_t v24 = "nw_protocol_plugin_retry_begin_async";
      char v18 = "%{public}s called with null retry";
      goto LABEL_35;
    }
    if (!v21)
    {
      BOOL v16 = __nwlog_obj();
      os_log_type_t v17 = type;
      if (!os_log_type_enabled(v16, type)) {
        goto LABEL_36;
      }
      *(_DWORD *)long long buf = 136446210;
      uint64_t v24 = "nw_protocol_plugin_retry_begin_async";
      char v18 = "%{public}s called with null retry, backtrace limit exceeded";
      goto LABEL_35;
    }
    BOOL v19 = (char *)__nw_create_backtrace_string();
    BOOL v16 = __nwlog_obj();
    os_log_type_t v17 = type;
    BOOL v20 = os_log_type_enabled(v16, type);
    if (v19)
    {
      if (v20)
      {
        *(_DWORD *)long long buf = 136446466;
        uint64_t v24 = "nw_protocol_plugin_retry_begin_async";
        __int16 v25 = 2082;
        uint64_t v26 = v19;
        _os_log_impl(&dword_1830D4000, v16, v17, "%{public}s called with null retry, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v19);
      goto LABEL_36;
    }
    if (v20)
    {
      *(_DWORD *)long long buf = 136446210;
      uint64_t v24 = "nw_protocol_plugin_retry_begin_async";
      char v18 = "%{public}s called with null retry, no backtrace";
LABEL_35:
      _os_log_impl(&dword_1830D4000, v16, v17, v18, buf, 0xCu);
    }
  }
LABEL_36:
  if (v15) {
    free(v15);
  }
}

BOOL nw_protocol_plugin_retry_end_async(uint64_t a1)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    int v2 = *(_DWORD *)(a1 + 208);
    *(_DWORD *)(a1 + 208) = v2 - 1;
    if (v2) {
      return (*(unsigned char *)(a1 + 212) & 0x40) == 0;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v3 = *(unsigned int *)(a1 + 208);
    *(_DWORD *)long long buf = 136446978;
    uint64_t v24 = "nw_protocol_plugin_retry_end_async";
    __int16 v25 = 2082;
    uint64_t v26 = "retry->async_count";
    __int16 v27 = 2048;
    uint64_t v28 = 1;
    __int16 v29 = 2048;
    uint64_t v30 = v3;
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (__nwlog_fault(v4, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v5 = gLogObj;
        os_log_type_t v6 = type;
        if (os_log_type_enabled((os_log_t)gLogObj, type))
        {
          uint64_t v7 = *(unsigned int *)(a1 + 208);
          *(_DWORD *)long long buf = 136446978;
          uint64_t v24 = "nw_protocol_plugin_retry_end_async";
          __int16 v25 = 2082;
          uint64_t v26 = "retry->async_count";
          __int16 v27 = 2048;
          uint64_t v28 = 1;
          __int16 v29 = 2048;
          uint64_t v30 = v7;
          uint64_t v8 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu";
LABEL_16:
          _os_log_impl(&dword_1830D4000, v5, v6, v8, buf, 0x2Au);
        }
      }
      else if (v21)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v5 = gLogObj;
        os_log_type_t v6 = type;
        BOOL v10 = os_log_type_enabled((os_log_t)gLogObj, type);
        if (backtrace_string)
        {
          if (v10)
          {
            uint64_t v11 = *(unsigned int *)(a1 + 208);
            *(_DWORD *)long long buf = 136447234;
            uint64_t v24 = "nw_protocol_plugin_retry_end_async";
            __int16 v25 = 2082;
            uint64_t v26 = "retry->async_count";
            __int16 v27 = 2048;
            uint64_t v28 = 1;
            __int16 v29 = 2048;
            uint64_t v30 = v11;
            __int16 v31 = 2082;
            os_log_type_t v32 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s Underflow: %{public}s, decrement %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
          }
          free(backtrace_string);
          goto LABEL_17;
        }
        if (v10)
        {
          uint64_t v13 = *(unsigned int *)(a1 + 208);
          *(_DWORD *)long long buf = 136446978;
          uint64_t v24 = "nw_protocol_plugin_retry_end_async";
          __int16 v25 = 2082;
          uint64_t v26 = "retry->async_count";
          __int16 v27 = 2048;
          uint64_t v28 = 1;
          __int16 v29 = 2048;
          uint64_t v30 = v13;
          uint64_t v8 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, no backtrace";
          goto LABEL_16;
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v5 = gLogObj;
        os_log_type_t v6 = type;
        if (os_log_type_enabled((os_log_t)gLogObj, type))
        {
          uint64_t v12 = *(unsigned int *)(a1 + 208);
          *(_DWORD *)long long buf = 136446978;
          uint64_t v24 = "nw_protocol_plugin_retry_end_async";
          __int16 v25 = 2082;
          uint64_t v26 = "retry->async_count";
          __int16 v27 = 2048;
          uint64_t v28 = 1;
          __int16 v29 = 2048;
          uint64_t v30 = v12;
          uint64_t v8 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, backtrace limit exceeded";
          goto LABEL_16;
        }
      }
    }
LABEL_17:
    if (v4) {
      free(v4);
    }
    *(_DWORD *)(a1 + 208) = 0;
    return (*(unsigned char *)(a1 + 212) & 0x40) == 0;
  }
  __nwlog_obj();
  *(_DWORD *)long long buf = 136446210;
  uint64_t v24 = "nw_protocol_plugin_retry_end_async";
  BOOL v15 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v21 = 0;
  if (__nwlog_fault(v15, &type, &v21))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v16 = __nwlog_obj();
      os_log_type_t v17 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v24 = "nw_protocol_plugin_retry_end_async";
        char v18 = "%{public}s called with null retry";
LABEL_35:
        _os_log_impl(&dword_1830D4000, v16, v17, v18, buf, 0xCu);
      }
    }
    else if (v21)
    {
      BOOL v19 = (char *)__nw_create_backtrace_string();
      BOOL v16 = __nwlog_obj();
      os_log_type_t v17 = type;
      BOOL v20 = os_log_type_enabled(v16, type);
      if (v19)
      {
        if (v20)
        {
          *(_DWORD *)long long buf = 136446466;
          uint64_t v24 = "nw_protocol_plugin_retry_end_async";
          __int16 v25 = 2082;
          uint64_t v26 = v19;
          _os_log_impl(&dword_1830D4000, v16, v17, "%{public}s called with null retry, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v19);
        goto LABEL_36;
      }
      if (v20)
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v24 = "nw_protocol_plugin_retry_end_async";
        char v18 = "%{public}s called with null retry, no backtrace";
        goto LABEL_35;
      }
    }
    else
    {
      BOOL v16 = __nwlog_obj();
      os_log_type_t v17 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v24 = "nw_protocol_plugin_retry_end_async";
        char v18 = "%{public}s called with null retry, backtrace limit exceeded";
        goto LABEL_35;
      }
    }
  }
LABEL_36:
  if (v15) {
    free(v15);
  }
  return 0;
}

void nw_protocol_plugin_retry_reissue_output_frames(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, int a6, int a7, const void *a8, const void *a9, uint64_t a10)
{
  uint64_t v106 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    BOOL v99 = "nw_protocol_plugin_retry_reissue_output_frames";
    os_log_type_t v32 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v97 = OS_LOG_TYPE_ERROR;
    char v96 = 0;
    if (!__nwlog_fault(v32, &v97, &v96)) {
      goto LABEL_62;
    }
    if (v97 == OS_LOG_TYPE_FAULT)
    {
      uint64_t v33 = __nwlog_obj();
      os_log_type_t v34 = v97;
      if (!os_log_type_enabled(v33, v97)) {
        goto LABEL_62;
      }
      *(_DWORD *)long long buf = 136446210;
      BOOL v99 = "nw_protocol_plugin_retry_reissue_output_frames";
      __int16 v35 = "%{public}s called with null retry";
    }
    else if (v96)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v33 = __nwlog_obj();
      os_log_type_t v34 = v97;
      BOOL v56 = os_log_type_enabled(v33, v97);
      if (backtrace_string)
      {
        if (v56)
        {
          *(_DWORD *)long long buf = 136446466;
          BOOL v99 = "nw_protocol_plugin_retry_reissue_output_frames";
          __int16 v100 = 2082;
          int v101 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v33, v34, "%{public}s called with null retry, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_62;
      }
      if (!v56) {
        goto LABEL_62;
      }
      *(_DWORD *)long long buf = 136446210;
      BOOL v99 = "nw_protocol_plugin_retry_reissue_output_frames";
      __int16 v35 = "%{public}s called with null retry, no backtrace";
    }
    else
    {
      uint64_t v33 = __nwlog_obj();
      os_log_type_t v34 = v97;
      if (!os_log_type_enabled(v33, v97)) {
        goto LABEL_62;
      }
      *(_DWORD *)long long buf = 136446210;
      BOOL v99 = "nw_protocol_plugin_retry_reissue_output_frames";
      __int16 v35 = "%{public}s called with null retry, backtrace limit exceeded";
    }
    goto LABEL_60;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    BOOL v99 = "nw_protocol_plugin_retry_reissue_output_frames";
    os_log_type_t v32 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v97 = OS_LOG_TYPE_ERROR;
    char v96 = 0;
    if (!__nwlog_fault(v32, &v97, &v96)) {
      goto LABEL_62;
    }
    if (v97 == OS_LOG_TYPE_FAULT)
    {
      uint64_t v33 = __nwlog_obj();
      os_log_type_t v34 = v97;
      if (!os_log_type_enabled(v33, v97)) {
        goto LABEL_62;
      }
      *(_DWORD *)long long buf = 136446210;
      BOOL v99 = "nw_protocol_plugin_retry_reissue_output_frames";
      __int16 v35 = "%{public}s called with null protocol";
      goto LABEL_60;
    }
    if (v96)
    {
      unint64_t v57 = (char *)__nw_create_backtrace_string();
      uint64_t v33 = __nwlog_obj();
      os_log_type_t v34 = v97;
      BOOL v58 = os_log_type_enabled(v33, v97);
      if (v57)
      {
        if (!v58) {
          goto LABEL_125;
        }
        *(_DWORD *)long long buf = 136446466;
        BOOL v99 = "nw_protocol_plugin_retry_reissue_output_frames";
        __int16 v100 = 2082;
        int v101 = v57;
        uint64_t v59 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
        goto LABEL_124;
      }
      if (!v58) {
        goto LABEL_62;
      }
      *(_DWORD *)long long buf = 136446210;
      BOOL v99 = "nw_protocol_plugin_retry_reissue_output_frames";
      __int16 v35 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      uint64_t v33 = __nwlog_obj();
      os_log_type_t v34 = v97;
      if (!os_log_type_enabled(v33, v97)) {
        goto LABEL_62;
      }
      *(_DWORD *)long long buf = 136446210;
      BOOL v99 = "nw_protocol_plugin_retry_reissue_output_frames";
      __int16 v35 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
LABEL_60:
    uint64_t v49 = v33;
    os_log_type_t v50 = v34;
LABEL_61:
    _os_log_impl(&dword_1830D4000, v49, v50, v35, buf, 0xCu);
    goto LABEL_62;
  }
  if (!a3)
  {
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    BOOL v99 = "nw_protocol_plugin_retry_reissue_output_frames";
    os_log_type_t v32 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v97 = OS_LOG_TYPE_ERROR;
    char v96 = 0;
    if (!__nwlog_fault(v32, &v97, &v96)) {
      goto LABEL_62;
    }
    if (v97 == OS_LOG_TYPE_FAULT)
    {
      uint64_t v33 = __nwlog_obj();
      os_log_type_t v34 = v97;
      if (!os_log_type_enabled(v33, v97)) {
        goto LABEL_62;
      }
      *(_DWORD *)long long buf = 136446210;
      BOOL v99 = "nw_protocol_plugin_retry_reissue_output_frames";
      __int16 v35 = "%{public}s called with null context";
      goto LABEL_60;
    }
    if (v96)
    {
      unint64_t v57 = (char *)__nw_create_backtrace_string();
      uint64_t v33 = __nwlog_obj();
      os_log_type_t v34 = v97;
      BOOL v60 = os_log_type_enabled(v33, v97);
      if (v57)
      {
        if (!v60) {
          goto LABEL_125;
        }
        *(_DWORD *)long long buf = 136446466;
        BOOL v99 = "nw_protocol_plugin_retry_reissue_output_frames";
        __int16 v100 = 2082;
        int v101 = v57;
        uint64_t v59 = "%{public}s called with null context, dumping backtrace:%{public}s";
        goto LABEL_124;
      }
      if (!v60) {
        goto LABEL_62;
      }
      *(_DWORD *)long long buf = 136446210;
      BOOL v99 = "nw_protocol_plugin_retry_reissue_output_frames";
      __int16 v35 = "%{public}s called with null context, no backtrace";
    }
    else
    {
      uint64_t v33 = __nwlog_obj();
      os_log_type_t v34 = v97;
      if (!os_log_type_enabled(v33, v97)) {
        goto LABEL_62;
      }
      *(_DWORD *)long long buf = 136446210;
      BOOL v99 = "nw_protocol_plugin_retry_reissue_output_frames";
      __int16 v35 = "%{public}s called with null context, backtrace limit exceeded";
    }
    goto LABEL_60;
  }
  if (!a8)
  {
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    BOOL v99 = "nw_protocol_plugin_retry_reissue_output_frames";
    os_log_type_t v32 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v97 = OS_LOG_TYPE_ERROR;
    char v96 = 0;
    if (!__nwlog_fault(v32, &v97, &v96)) {
      goto LABEL_62;
    }
    if (v97 == OS_LOG_TYPE_FAULT)
    {
      uint64_t v33 = __nwlog_obj();
      os_log_type_t v34 = v97;
      if (!os_log_type_enabled(v33, v97)) {
        goto LABEL_62;
      }
      *(_DWORD *)long long buf = 136446210;
      BOOL v99 = "nw_protocol_plugin_retry_reissue_output_frames";
      __int16 v35 = "%{public}s called with null _output_frames_handler";
      goto LABEL_60;
    }
    if (v96)
    {
      unint64_t v57 = (char *)__nw_create_backtrace_string();
      uint64_t v33 = __nwlog_obj();
      os_log_type_t v34 = v97;
      BOOL v61 = os_log_type_enabled(v33, v97);
      if (v57)
      {
        if (!v61) {
          goto LABEL_125;
        }
        *(_DWORD *)long long buf = 136446466;
        BOOL v99 = "nw_protocol_plugin_retry_reissue_output_frames";
        __int16 v100 = 2082;
        int v101 = v57;
        uint64_t v59 = "%{public}s called with null _output_frames_handler, dumping backtrace:%{public}s";
        goto LABEL_124;
      }
      if (!v61) {
        goto LABEL_62;
      }
      *(_DWORD *)long long buf = 136446210;
      BOOL v99 = "nw_protocol_plugin_retry_reissue_output_frames";
      __int16 v35 = "%{public}s called with null _output_frames_handler, no backtrace";
    }
    else
    {
      uint64_t v33 = __nwlog_obj();
      os_log_type_t v34 = v97;
      if (!os_log_type_enabled(v33, v97)) {
        goto LABEL_62;
      }
      *(_DWORD *)long long buf = 136446210;
      BOOL v99 = "nw_protocol_plugin_retry_reissue_output_frames";
      __int16 v35 = "%{public}s called with null _output_frames_handler, backtrace limit exceeded";
    }
    goto LABEL_60;
  }
  if (!a9)
  {
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    BOOL v99 = "nw_protocol_plugin_retry_reissue_output_frames";
    os_log_type_t v32 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v97 = OS_LOG_TYPE_ERROR;
    char v96 = 0;
    if (!__nwlog_fault(v32, &v97, &v96)) {
      goto LABEL_62;
    }
    if (v97 == OS_LOG_TYPE_FAULT)
    {
      uint64_t v33 = __nwlog_obj();
      os_log_type_t v34 = v97;
      if (!os_log_type_enabled(v33, v97)) {
        goto LABEL_62;
      }
      *(_DWORD *)long long buf = 136446210;
      BOOL v99 = "nw_protocol_plugin_retry_reissue_output_frames";
      __int16 v35 = "%{public}s called with null _before_connect_handler";
      goto LABEL_60;
    }
    if (v96)
    {
      unint64_t v57 = (char *)__nw_create_backtrace_string();
      uint64_t v33 = __nwlog_obj();
      os_log_type_t v34 = v97;
      BOOL v62 = os_log_type_enabled(v33, v97);
      if (v57)
      {
        if (!v62) {
          goto LABEL_125;
        }
        *(_DWORD *)long long buf = 136446466;
        BOOL v99 = "nw_protocol_plugin_retry_reissue_output_frames";
        __int16 v100 = 2082;
        int v101 = v57;
        uint64_t v59 = "%{public}s called with null _before_connect_handler, dumping backtrace:%{public}s";
        goto LABEL_124;
      }
      if (!v62) {
        goto LABEL_62;
      }
      *(_DWORD *)long long buf = 136446210;
      BOOL v99 = "nw_protocol_plugin_retry_reissue_output_frames";
      __int16 v35 = "%{public}s called with null _before_connect_handler, no backtrace";
    }
    else
    {
      uint64_t v33 = __nwlog_obj();
      os_log_type_t v34 = v97;
      if (!os_log_type_enabled(v33, v97)) {
        goto LABEL_62;
      }
      *(_DWORD *)long long buf = 136446210;
      BOOL v99 = "nw_protocol_plugin_retry_reissue_output_frames";
      __int16 v35 = "%{public}s called with null _before_connect_handler, backtrace limit exceeded";
    }
    goto LABEL_60;
  }
  if (!a10)
  {
    __nwlog_obj();
    *(_DWORD *)long long buf = 136446210;
    BOOL v99 = "nw_protocol_plugin_retry_reissue_output_frames";
    os_log_type_t v32 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v97 = OS_LOG_TYPE_ERROR;
    char v96 = 0;
    if (!__nwlog_fault(v32, &v97, &v96)) {
      goto LABEL_62;
    }
    if (v97 == OS_LOG_TYPE_FAULT)
    {
      uint64_t v33 = __nwlog_obj();
      os_log_type_t v34 = v97;
      if (!os_log_type_enabled(v33, v97)) {
        goto LABEL_62;
      }
      *(_DWORD *)long long buf = 136446210;
      BOOL v99 = "nw_protocol_plugin_retry_reissue_output_frames";
      __int16 v35 = "%{public}s called with null destroy_handler";
      goto LABEL_60;
    }
    if (v96)
    {
      unint64_t v57 = (char *)__nw_create_backtrace_string();
      uint64_t v33 = __nwlog_obj();
      os_log_type_t v34 = v97;
      BOOL v63 = os_log_type_enabled(v33, v97);
      if (v57)
      {
        if (!v63) {
          goto LABEL_125;
        }
        *(_DWORD *)long long buf = 136446466;
        BOOL v99 = "nw_protocol_plugin_retry_reissue_output_frames";
        __int16 v100 = 2082;
        int v101 = v57;
        uint64_t v59 = "%{public}s called with null destroy_handler, dumping backtrace:%{public}s";
LABEL_124:
        _os_log_impl(&dword_1830D4000, v33, v34, v59, buf, 0x16u);
LABEL_125:
        free(v57);
        if (!v32) {
          return;
        }
LABEL_63:
        free(v32);
        return;
      }
      if (!v63) {
        goto LABEL_62;
      }
      *(_DWORD *)long long buf = 136446210;
      BOOL v99 = "nw_protocol_plugin_retry_reissue_output_frames";
      __int16 v35 = "%{public}s called with null destroy_handler, no backtrace";
    }
    else
    {
      uint64_t v33 = __nwlog_obj();
      os_log_type_t v34 = v97;
      if (!os_log_type_enabled(v33, v97)) {
        goto LABEL_62;
      }
      *(_DWORD *)long long buf = 136446210;
      BOOL v99 = "nw_protocol_plugin_retry_reissue_output_frames";
      __int16 v35 = "%{public}s called with null destroy_handler, backtrace limit exceeded";
    }
    goto LABEL_60;
  }
  char v16 = *(unsigned char *)(a1 + 212);
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_t v17 = gLogObj;
  if ((v16 & 0x20) == 0)
  {
    char v18 = a6;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
    {
      BOOL v19 = *(const char **)(a2 + 16);
      if (!v19) {
        BOOL v19 = "invalid";
      }
      *(_DWORD *)long long buf = 136446722;
      BOOL v99 = "nw_protocol_plugin_retry_reissue_output_frames";
      __int16 v100 = 2082;
      int v101 = (void *)v19;
      __int16 v102 = 1024;
      LODWORD(v103) = a6;
      _os_log_impl(&dword_1830D4000, v17, OS_LOG_TYPE_INFO, "%{public}s Rebuilding stack and reissuing output frames for %{public}s, behavior %u", buf, 0x1Cu);
    }
    *(unsigned char *)(a1 + 212) = *(unsigned char *)(a1 + 212) & 0x69 | 0x10;
    if (a4)
    {
      id v20 = a4;
      int v21 = [v20 type];

      if (v21 == 4)
      {
        BOOL v22 = nw_endpoint_copy_host_port_endpoint_for_url(v20);
        id v23 = nw_context_copy_registered_endpoint(a3, (void *)v22);
        char v24 = *(unsigned char *)(a1 + 88);
        if (v24)
        {
          __int16 v25 = *(void **)(a1 + 80);
          if (v25)
          {
            os_release(v25);
            char v24 = *(unsigned char *)(a1 + 88);
          }
        }
        *(void *)(a1 + 80) = v23;
        *(unsigned char *)(a1 + 88) = v24 | 1;
        if (a5)
        {
LABEL_28:
          if (v22) {
            os_release((void *)v22);
          }
          if (a5) {
            goto LABEL_31;
          }
          goto LABEL_48;
        }
        uint64_t v26 = *(void *)(a2 + 48);
        if (v26)
        {
          uint64_t v90 = *(void **)(v26 + 40);
          if (v90 == &nw_protocol_ref_counted_handle)
          {
            uint64_t v27 = *(void *)(v26 + 88);
            if (v27) {
              *(void *)(v26 + 88) = v27 + 1;
            }
          }
          uint64_t v28 = *(void *)(v26 + 24);
          if (v28)
          {
            __int16 v29 = *(uint64_t (**)(uint64_t))(v28 + 112);
            if (v29)
            {
              a5 = (void *)v29(v26);
LABEL_25:
              if (v90 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(v26 + 40) == &nw_protocol_ref_counted_handle)
              {
                uint64_t v51 = *(void *)(v26 + 88);
                if (v51)
                {
                  uint64_t v52 = v51 - 1;
                  *(void *)(v26 + 88) = v52;
                  if (!v52)
                  {
                    uint64_t v53 = *(void (***)(void))(v26 + 64);
                    if (v53)
                    {
                      *(void *)(v26 + 64) = 0;
                      aBlocka = v53;
                      v53[2](v53);
                      _Block_release(aBlocka);
                    }
                    if (*(unsigned char *)(v26 + 72))
                    {
                      __int16 v54 = *(const void **)(v26 + 64);
                      if (v54) {
                        _Block_release(v54);
                      }
                    }
                    free((void *)v26);
                  }
                }
              }
LABEL_27:
              nw_parameters_set_url_endpoint(a5, v20);
              goto LABEL_28;
            }
          }
          __nwlog_obj();
          int v64 = *(const char **)(v26 + 16);
          *(_DWORD *)long long buf = 136446722;
          BOOL v99 = "__nw_protocol_get_parameters";
          if (!v64) {
            int v64 = "invalid";
          }
          __int16 v100 = 2082;
          int v101 = (void *)v64;
          __int16 v102 = 2048;
          uint64_t v103 = v26;
          os_log_type_t v97 = OS_LOG_TYPE_ERROR;
          char v96 = 0;
          uint64_t v88 = (char *)_os_log_send_and_compose_impl();
          if (__nwlog_fault(v88, &v97, &v96))
          {
            if (v97 == OS_LOG_TYPE_FAULT)
            {
              BOOL v65 = __nwlog_obj();
              os_log_type_t v66 = v97;
              uint64_t v67 = v65;
              if (os_log_type_enabled(v65, v97))
              {
                uint64_t v68 = *(const char **)(v26 + 16);
                if (!v68) {
                  uint64_t v68 = "invalid";
                }
                *(_DWORD *)long long buf = 136446722;
                BOOL v99 = "__nw_protocol_get_parameters";
                __int16 v100 = 2082;
                int v101 = (void *)v68;
                __int16 v102 = 2048;
                uint64_t v103 = v26;
                uint64_t v69 = "%{public}s protocol %{public}s (%p) has invalid get_parameters callback";
LABEL_179:
                uint64_t v81 = v67;
                os_log_type_t v82 = v66;
LABEL_180:
                _os_log_impl(&dword_1830D4000, v81, v82, v69, buf, 0x20u);
              }
            }
            else if (v96)
            {
              os_log_type_t v74 = (char *)__nw_create_backtrace_string();
              os_log_t log = __nwlog_obj();
              os_log_type_t type = v97;
              BOOL v75 = os_log_type_enabled(log, v97);
              if (v74)
              {
                if (v75)
                {
                  char v76 = *(const char **)(v26 + 16);
                  if (!v76) {
                    char v76 = "invalid";
                  }
                  *(_DWORD *)long long buf = 136446978;
                  BOOL v99 = "__nw_protocol_get_parameters";
                  __int16 v100 = 2082;
                  int v101 = (void *)v76;
                  __int16 v102 = 2048;
                  uint64_t v103 = v26;
                  __int16 v104 = 2082;
                  int v105 = v74;
                  _os_log_impl(&dword_1830D4000, log, type, "%{public}s protocol %{public}s (%p) has invalid get_parameters callback, dumping backtrace:%{public}s", buf, 0x2Au);
                }
                free(v74);
                goto LABEL_181;
              }
              if (v75)
              {
                os_log_type_t v83 = *(const char **)(v26 + 16);
                if (!v83) {
                  os_log_type_t v83 = "invalid";
                }
                *(_DWORD *)long long buf = 136446722;
                BOOL v99 = "__nw_protocol_get_parameters";
                __int16 v100 = 2082;
                int v101 = (void *)v83;
                __int16 v102 = 2048;
                uint64_t v103 = v26;
                uint64_t v69 = "%{public}s protocol %{public}s (%p) has invalid get_parameters callback, no backtrace";
                uint64_t v81 = log;
                os_log_type_t v82 = type;
                goto LABEL_180;
              }
            }
            else
            {
              uint64_t v67 = __nwlog_obj();
              os_log_type_t v66 = v97;
              if (os_log_type_enabled(v67, v97))
              {
                os_log_type_t v80 = *(const char **)(v26 + 16);
                if (!v80) {
                  os_log_type_t v80 = "invalid";
                }
                *(_DWORD *)long long buf = 136446722;
                BOOL v99 = "__nw_protocol_get_parameters";
                __int16 v100 = 2082;
                int v101 = (void *)v80;
                __int16 v102 = 2048;
                uint64_t v103 = v26;
                uint64_t v69 = "%{public}s protocol %{public}s (%p) has invalid get_parameters callback, backtrace limit exceeded";
                goto LABEL_179;
              }
            }
          }
LABEL_181:
          if (v88) {
            free(v88);
          }
          a5 = 0;
          char v18 = a6;
          goto LABEL_25;
        }
        __nwlog_obj();
        *(_DWORD *)long long buf = 136446210;
        BOOL v99 = "__nw_protocol_get_parameters";
        os_log_type_t v97 = OS_LOG_TYPE_ERROR;
        char v96 = 0;
        uint64_t v70 = (char *)_os_log_send_and_compose_impl();
        if (__nwlog_fault(v70, &v97, &v96))
        {
          if (v97 == OS_LOG_TYPE_FAULT)
          {
            uint64_t v71 = __nwlog_obj();
            os_log_type_t v72 = v97;
            if (os_log_type_enabled(v71, v97))
            {
              *(_DWORD *)long long buf = 136446210;
              BOOL v99 = "__nw_protocol_get_parameters";
              os_log_type_t v73 = "%{public}s called with null protocol";
LABEL_190:
              uint64_t v84 = v71;
              os_log_type_t v85 = v72;
LABEL_191:
              _os_log_impl(&dword_1830D4000, v84, v85, v73, buf, 0xCu);
            }
          }
          else if (v96)
          {
            uint64_t v77 = (char *)__nw_create_backtrace_string();
            uint64_t v78 = __nwlog_obj();
            os_log_type_t v89 = v97;
            BOOL v79 = os_log_type_enabled(v78, v97);
            if (v77)
            {
              if (v79)
              {
                *(_DWORD *)long long buf = 136446466;
                BOOL v99 = "__nw_protocol_get_parameters";
                __int16 v100 = 2082;
                int v101 = v77;
                _os_log_impl(&dword_1830D4000, v78, v89, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
              }
              free(v77);
              goto LABEL_192;
            }
            if (v79)
            {
              *(_DWORD *)long long buf = 136446210;
              BOOL v99 = "__nw_protocol_get_parameters";
              os_log_type_t v73 = "%{public}s called with null protocol, no backtrace";
              uint64_t v84 = v78;
              os_log_type_t v85 = v89;
              goto LABEL_191;
            }
          }
          else
          {
            uint64_t v71 = __nwlog_obj();
            os_log_type_t v72 = v97;
            if (os_log_type_enabled(v71, v97))
            {
              *(_DWORD *)long long buf = 136446210;
              BOOL v99 = "__nw_protocol_get_parameters";
              os_log_type_t v73 = "%{public}s called with null protocol, backtrace limit exceeded";
              goto LABEL_190;
            }
          }
        }
LABEL_192:
        if (v70) {
          free(v70);
        }
        a5 = 0;
        char v18 = a6;
        goto LABEL_27;
      }
      a4 = os_retain(v20);
    }
    char v40 = *(unsigned char *)(a1 + 88);
    if (v40)
    {
      BOOL v41 = *(void **)(a1 + 80);
      if (v41)
      {
        os_release(v41);
        char v40 = *(unsigned char *)(a1 + 88);
      }
    }
    *(void *)(a1 + 80) = a4;
    *(unsigned char *)(a1 + 88) = v40 | 1;
    if (a5)
    {
LABEL_31:
      uint64_t v30 = os_retain(a5);
      char v31 = *(unsigned char *)(a1 + 56);
      if ((v31 & 1) == 0)
      {
LABEL_51:
        *(void *)(a1 + 48) = v30;
        *(unsigned char *)(a1 + 56) = v31 | 1;
        *(_DWORD *)(a1 + 180) = 0;
        *(_DWORD *)(a1 + 184) = 0;
        *(_DWORD *)(a1 + 188) = a7;
        uint64_t v43 = _Block_copy(a8);
        char v44 = *(unsigned char *)(a1 + 120);
        if (v44)
        {
          os_log_type_t v45 = *(const void **)(a1 + 112);
          if (v45)
          {
            _Block_release(v45);
            char v44 = *(unsigned char *)(a1 + 120);
          }
        }
        *(void *)(a1 + 112) = v43;
        *(unsigned char *)(a1 + 120) = v44 | 1;
        char v46 = _Block_copy(a9);
        char v47 = *(unsigned char *)(a1 + 168);
        if (v47)
        {
          uint64_t v48 = *(const void **)(a1 + 160);
          if (v48)
          {
            _Block_release(v48);
            char v47 = *(unsigned char *)(a1 + 168);
          }
        }
        *(void *)(a1 + 160) = v46;
        *(unsigned char *)(a1 + 168) = v47 | 1;
        *(unsigned char *)(a1 + 212) |= 0x20u;
        nw_protocol_plugin_retry_begin_async(a1);
        v94[0] = MEMORY[0x1E4F143A8];
        v94[1] = 0x40000000;
        v94[2] = __nw_protocol_plugin_retry_reissue_output_frames_block_invoke;
        v94[3] = &unk_1E523AD50;
        v94[4] = a10;
        v94[5] = a1;
        char v95 = v18;
        v94[6] = a2;
        nw_queue_context_async(a3, v94);
        return;
      }
LABEL_49:
      BOOL v42 = *(void **)(a1 + 48);
      if (v42)
      {
        os_release(v42);
        char v31 = *(unsigned char *)(a1 + 56);
      }
      goto LABEL_51;
    }
LABEL_48:
    uint64_t v30 = 0;
    char v31 = *(unsigned char *)(a1 + 56);
    if ((v31 & 1) == 0) {
      goto LABEL_51;
    }
    goto LABEL_49;
  }
  *(_DWORD *)long long buf = 136446210;
  BOOL v99 = "nw_protocol_plugin_retry_reissue_output_frames";
  os_log_type_t v32 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t v97 = OS_LOG_TYPE_ERROR;
  char v96 = 0;
  if (!__nwlog_fault(v32, &v97, &v96)) {
    goto LABEL_62;
  }
  if (v97 == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v33 = gLogObj;
    os_log_type_t v34 = v97;
    if (!os_log_type_enabled((os_log_t)gLogObj, v97)) {
      goto LABEL_62;
    }
    *(_DWORD *)long long buf = 136446210;
    BOOL v99 = "nw_protocol_plugin_retry_reissue_output_frames";
    __int16 v35 = "%{public}s trying to reissue output frames when an async reissue is pending";
    goto LABEL_60;
  }
  if (!v96)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v33 = gLogObj;
    os_log_type_t v34 = v97;
    if (!os_log_type_enabled((os_log_t)gLogObj, v97)) {
      goto LABEL_62;
    }
    *(_DWORD *)long long buf = 136446210;
    BOOL v99 = "nw_protocol_plugin_retry_reissue_output_frames";
    __int16 v35 = "%{public}s trying to reissue output frames when an async reissue is pending, backtrace limit exceeded";
    goto LABEL_60;
  }
  BOOL v36 = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  uint64_t v37 = gLogObj;
  os_log_type_t v38 = v97;
  BOOL v39 = os_log_type_enabled((os_log_t)gLogObj, v97);
  if (!v36)
  {
    if (v39)
    {
      *(_DWORD *)long long buf = 136446210;
      BOOL v99 = "nw_protocol_plugin_retry_reissue_output_frames";
      __int16 v35 = "%{public}s trying to reissue output frames when an async reissue is pending, no backtrace";
      uint64_t v49 = v37;
      os_log_type_t v50 = v38;
      goto LABEL_61;
    }
LABEL_62:
    if (!v32) {
      return;
    }
    goto LABEL_63;
  }
  if (v39)
  {
    *(_DWORD *)long long buf = 136446466;
    BOOL v99 = "nw_protocol_plugin_retry_reissue_output_frames";
    __int16 v100 = 2082;
    int v101 = v36;
    _os_log_impl(&dword_1830D4000, v37, v38, "%{public}s trying to reissue output frames when an async reissue is pending, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v36);
  if (v32) {
    goto LABEL_63;
  }
}

void sub_1836535FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __nw_protocol_plugin_retry_reissue_output_frames_block_invoke(uint64_t a1)
{
  uint64_t v121 = *MEMORY[0x1E4F143B8];
  if (!nw_protocol_plugin_retry_end_async(*(void *)(a1 + 40)))
  {
    id v23 = *(void (**)(void))(*(void *)(a1 + 32) + 16);
    v23();
    return;
  }
  *(unsigned char *)(*(void *)(a1 + 40) + 212) &= ~0x20u;
  int v2 = *(unsigned __int8 *)(a1 + 56);
  if (v2 != 2)
  {
    if (v2 != 1) {
      return;
    }
    uint64_t v3 = *(void *)(a1 + 48);
    uint64_t v4 = *(void *)(v3 + 32);
    if (v4)
    {
      uint64_t v5 = *(void **)(v4 + 40);
      if (v5 == &nw_protocol_ref_counted_handle)
      {
        uint64_t v6 = *(void *)(v4 + 88);
        if (v6) {
          *(void *)(v4 + 88) = v6 + 1;
        }
      }
      uint64_t v7 = *(void **)(v3 + 40);
      if (v7 == &nw_protocol_ref_counted_handle)
      {
        uint64_t v8 = *(void *)(v3 + 88);
        if (v8) {
          *(void *)(v3 + 88) = v8 + 1;
        }
      }
      uint64_t v9 = *(void *)(v4 + 24);
      if (v9)
      {
        BOOL v10 = *(void (**)(uint64_t, uint64_t, uint64_t, void, void))(v9 + 160);
        if (v10)
        {
          v10(v4, v3, 15, 0, 0);
          goto LABEL_14;
        }
      }
      __nwlog_obj();
      BOOL v56 = *(const char **)(v4 + 16);
      int buf = 136446722;
      os_log_type_t v114 = "__nw_protocol_notify";
      if (!v56) {
        BOOL v56 = "invalid";
      }
      __int16 v115 = 2082;
      uint64_t v116 = (void *)v56;
      __int16 v117 = 2048;
      uint64_t v118 = v4;
      unint64_t v57 = (char *)_os_log_send_and_compose_impl();
      type[0] = OS_LOG_TYPE_ERROR;
      char v111 = 0;
      if (__nwlog_fault(v57, type, &v111))
      {
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          BOOL v58 = __nwlog_obj();
          os_log_type_t v59 = type[0];
          if (!os_log_type_enabled(v58, type[0])) {
            goto LABEL_184;
          }
          BOOL v60 = *(const char **)(v4 + 16);
          if (!v60) {
            BOOL v60 = "invalid";
          }
          int buf = 136446722;
          os_log_type_t v114 = "__nw_protocol_notify";
          __int16 v115 = 2082;
          uint64_t v116 = (void *)v60;
          __int16 v117 = 2048;
          uint64_t v118 = v4;
          BOOL v61 = "%{public}s protocol %{public}s (%p) has invalid notify callback";
LABEL_182:
          __int16 v102 = v58;
LABEL_183:
          _os_log_impl(&dword_1830D4000, v102, v59, v61, (uint8_t *)&buf, 0x20u);
          goto LABEL_184;
        }
        if (!v111)
        {
          BOOL v58 = __nwlog_obj();
          os_log_type_t v59 = type[0];
          if (!os_log_type_enabled(v58, type[0])) {
            goto LABEL_184;
          }
          int v101 = *(const char **)(v4 + 16);
          if (!v101) {
            int v101 = "invalid";
          }
          int buf = 136446722;
          os_log_type_t v114 = "__nw_protocol_notify";
          __int16 v115 = 2082;
          uint64_t v116 = (void *)v101;
          __int16 v117 = 2048;
          uint64_t v118 = v4;
          BOOL v61 = "%{public}s protocol %{public}s (%p) has invalid notify callback, backtrace limit exceeded";
          goto LABEL_182;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v85 = __nwlog_obj();
        os_log_type_t v59 = type[0];
        os_log_t log = v85;
        BOOL v86 = os_log_type_enabled(v85, type[0]);
        if (backtrace_string)
        {
          if (v86)
          {
            BOOL v87 = *(const char **)(v4 + 16);
            if (!v87) {
              BOOL v87 = "invalid";
            }
            int buf = 136446978;
            os_log_type_t v114 = "__nw_protocol_notify";
            __int16 v115 = 2082;
            uint64_t v116 = (void *)v87;
            __int16 v117 = 2048;
            uint64_t v118 = v4;
            __int16 v119 = 2082;
            BOOL v120 = backtrace_string;
            _os_log_impl(&dword_1830D4000, log, v59, "%{public}s protocol %{public}s (%p) has invalid notify callback, dumping backtrace:%{public}s", (uint8_t *)&buf, 0x2Au);
          }
          free(backtrace_string);
          goto LABEL_184;
        }
        if (v86)
        {
          uint64_t v106 = *(const char **)(v4 + 16);
          if (!v106) {
            uint64_t v106 = "invalid";
          }
          int buf = 136446722;
          os_log_type_t v114 = "__nw_protocol_notify";
          __int16 v115 = 2082;
          uint64_t v116 = (void *)v106;
          __int16 v117 = 2048;
          uint64_t v118 = v4;
          BOOL v61 = "%{public}s protocol %{public}s (%p) has invalid notify callback, no backtrace";
          __int16 v102 = log;
          goto LABEL_183;
        }
      }
LABEL_184:
      if (v57) {
        free(v57);
      }
LABEL_14:
      if (v7 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(v3 + 40) == &nw_protocol_ref_counted_handle)
      {
        uint64_t v36 = *(void *)(v3 + 88);
        if (v36)
        {
          uint64_t v37 = v36 - 1;
          *(void *)(v3 + 88) = v37;
          if (!v37)
          {
            os_log_type_t v38 = *(void (***)(void))(v3 + 64);
            if (v38)
            {
              *(void *)(v3 + 64) = 0;
              v38[2](v38);
              _Block_release(v38);
            }
            if (*(unsigned char *)(v3 + 72))
            {
              BOOL v39 = *(const void **)(v3 + 64);
              if (v39) {
                _Block_release(v39);
              }
            }
            free((void *)v3);
          }
        }
      }
      if (v5 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(v4 + 40) == &nw_protocol_ref_counted_handle)
      {
        uint64_t v40 = *(void *)(v4 + 88);
        if (v40)
        {
          uint64_t v41 = v40 - 1;
          *(void *)(v4 + 88) = v41;
          if (!v41)
          {
            BOOL v42 = *(void (***)(void))(v4 + 64);
            if (v42)
            {
              *(void *)(v4 + 64) = 0;
              v42[2](v42);
              _Block_release(v42);
            }
            if (*(unsigned char *)(v4 + 72))
            {
              uint64_t v43 = *(const void **)(v4 + 64);
              if (v43) {
                _Block_release(v43);
              }
            }
LABEL_79:
            free((void *)v4);
          }
        }
      }
LABEL_18:
      uint64_t v11 = *(void *)(a1 + 48);
      uint64_t v13 = *(void **)(v11 + 40);
      uint64_t v12 = *(void *)(v11 + 48);
      if (v13 == &nw_protocol_ref_counted_handle)
      {
        uint64_t v14 = *(void *)(v11 + 88);
        if (v14) {
          *(void *)(v11 + 88) = v14 + 1;
        }
      }
      if (v12)
      {
        BOOL v15 = *(void **)(v12 + 40);
        if (v15 == &nw_protocol_ref_counted_handle)
        {
          uint64_t v16 = *(void *)(v12 + 88);
          if (v16) {
            *(void *)(v12 + 88) = v16 + 1;
          }
        }
        uint64_t v17 = *(void *)(v11 + 24);
        if (v17)
        {
          char v18 = *(uint64_t (**)(uint64_t, uint64_t))(v17 + 24);
          if (v18)
          {
            char v19 = v18(v11, v12);
            if (v15 != &nw_protocol_ref_counted_handle)
            {
LABEL_29:
              if (v13 == &nw_protocol_ref_counted_handle)
              {
                if (v11)
                {
                  if (*(_UNKNOWN **)(v11 + 40) == &nw_protocol_ref_counted_handle)
                  {
                    uint64_t v32 = *(void *)(v11 + 88);
                    if (v32)
                    {
                      uint64_t v33 = v32 - 1;
                      *(void *)(v11 + 88) = v33;
                      if (!v33)
                      {
                        os_log_type_t v34 = *(void (***)(void))(v11 + 64);
                        if (v34)
                        {
                          *(void *)(v11 + 64) = 0;
                          v34[2](v34);
                          _Block_release(v34);
                        }
                        if (*(unsigned char *)(v11 + 72))
                        {
                          __int16 v35 = *(const void **)(v11 + 64);
                          if (v35) {
                            _Block_release(v35);
                          }
                        }
                        free((void *)v11);
                      }
                    }
                  }
                }
              }
              if ((v19 & 1) == 0)
              {
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                id v20 = gLogObj;
                if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
                {
                  int v21 = *(const char ***)(*(void *)(a1 + 48) + 32);
                  BOOL v22 = "invalid";
                  if (v21)
                  {
                    if (v21[2]) {
                      BOOL v22 = v21[2];
                    }
                  }
                  int buf = 136446722;
                  os_log_type_t v114 = "nw_protocol_plugin_retry_reissue_output_frames_block_invoke";
                  __int16 v115 = 2048;
                  uint64_t v116 = v21;
                  __int16 v117 = 2080;
                  uint64_t v118 = (uint64_t)v22;
                  _os_log_impl(&dword_1830D4000, v20, OS_LOG_TYPE_ERROR, "%{public}s Unable to connect protocol <%p:%s>", (uint8_t *)&buf, 0x20u);
                }
              }
              return;
            }
LABEL_28:
            if (*(_UNKNOWN **)(v12 + 40) == &nw_protocol_ref_counted_handle)
            {
              uint64_t v44 = *(void *)(v12 + 88);
              if (v44)
              {
                uint64_t v45 = v44 - 1;
                *(void *)(v12 + 88) = v45;
                if (!v45)
                {
                  char v46 = *(void (***)(void))(v12 + 64);
                  if (v46)
                  {
                    *(void *)(v12 + 64) = 0;
                    v46[2](v46);
                    _Block_release(v46);
                  }
                  if (*(unsigned char *)(v12 + 72))
                  {
                    char v47 = *(const void **)(v12 + 64);
                    if (v47) {
                      _Block_release(v47);
                    }
                  }
                  free((void *)v12);
                }
              }
            }
            goto LABEL_29;
          }
        }
        __nwlog_obj();
        BOOL v62 = *(const char **)(v11 + 16);
        int buf = 136446722;
        os_log_type_t v114 = "__nw_protocol_connect";
        if (!v62) {
          BOOL v62 = "invalid";
        }
        __int16 v115 = 2082;
        uint64_t v116 = (void *)v62;
        __int16 v117 = 2048;
        uint64_t v118 = v11;
        BOOL v63 = (char *)_os_log_send_and_compose_impl();
        type[0] = OS_LOG_TYPE_ERROR;
        char v111 = 0;
        if (__nwlog_fault(v63, type, &v111))
        {
          if (type[0] == OS_LOG_TYPE_FAULT)
          {
            int v64 = __nwlog_obj();
            os_log_type_t v65 = type[0];
            if (!os_log_type_enabled(v64, type[0])) {
              goto LABEL_192;
            }
            os_log_type_t v66 = *(const char **)(v11 + 16);
            if (!v66) {
              os_log_type_t v66 = "invalid";
            }
            int buf = 136446722;
            os_log_type_t v114 = "__nw_protocol_connect";
            __int16 v115 = 2082;
            uint64_t v116 = (void *)v66;
            __int16 v117 = 2048;
            uint64_t v118 = v11;
            uint64_t v67 = "%{public}s protocol %{public}s (%p) has invalid connect callback";
LABEL_190:
            __int16 v104 = v64;
LABEL_191:
            _os_log_impl(&dword_1830D4000, v104, v65, v67, (uint8_t *)&buf, 0x20u);
            goto LABEL_192;
          }
          if (!v111)
          {
            int v64 = __nwlog_obj();
            os_log_type_t v65 = type[0];
            if (!os_log_type_enabled(v64, type[0])) {
              goto LABEL_192;
            }
            uint64_t v103 = *(const char **)(v11 + 16);
            if (!v103) {
              uint64_t v103 = "invalid";
            }
            int buf = 136446722;
            os_log_type_t v114 = "__nw_protocol_connect";
            __int16 v115 = 2082;
            uint64_t v116 = (void *)v103;
            __int16 v117 = 2048;
            uint64_t v118 = v11;
            uint64_t v67 = "%{public}s protocol %{public}s (%p) has invalid connect callback, backtrace limit exceeded";
            goto LABEL_190;
          }
          uint64_t v88 = (char *)__nw_create_backtrace_string();
          os_log_type_t v89 = __nwlog_obj();
          os_log_type_t v65 = type[0];
          loga = v89;
          BOOL v90 = os_log_type_enabled(v89, type[0]);
          if (v88)
          {
            if (v90)
            {
              uint32_t v91 = *(const char **)(v11 + 16);
              if (!v91) {
                uint32_t v91 = "invalid";
              }
              int buf = 136446978;
              os_log_type_t v114 = "__nw_protocol_connect";
              __int16 v115 = 2082;
              uint64_t v116 = (void *)v91;
              __int16 v117 = 2048;
              uint64_t v118 = v11;
              __int16 v119 = 2082;
              BOOL v120 = v88;
              _os_log_impl(&dword_1830D4000, loga, v65, "%{public}s protocol %{public}s (%p) has invalid connect callback, dumping backtrace:%{public}s", (uint8_t *)&buf, 0x2Au);
            }
            free(v88);
          }
          else if (v90)
          {
            BOOL v107 = *(const char **)(v11 + 16);
            if (!v107) {
              BOOL v107 = "invalid";
            }
            int buf = 136446722;
            os_log_type_t v114 = "__nw_protocol_connect";
            __int16 v115 = 2082;
            uint64_t v116 = (void *)v107;
            __int16 v117 = 2048;
            uint64_t v118 = v11;
            uint64_t v67 = "%{public}s protocol %{public}s (%p) has invalid connect callback, no backtrace";
            __int16 v104 = loga;
            goto LABEL_191;
          }
        }
LABEL_192:
        if (v63) {
          free(v63);
        }
        char v19 = 0;
        if (v15 != &nw_protocol_ref_counted_handle) {
          goto LABEL_29;
        }
        goto LABEL_28;
      }
      __nwlog_obj();
      int buf = 136446210;
      os_log_type_t v114 = "__nw_protocol_connect";
      uint64_t v77 = (char *)_os_log_send_and_compose_impl();
      type[0] = OS_LOG_TYPE_ERROR;
      char v111 = 0;
      if (__nwlog_fault(v77, type, &v111))
      {
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          uint64_t v78 = __nwlog_obj();
          os_log_type_t v79 = type[0];
          if (os_log_type_enabled(v78, type[0]))
          {
            int buf = 136446210;
            os_log_type_t v114 = "__nw_protocol_connect";
            os_log_type_t v80 = "%{public}s called with null other_protocol";
LABEL_228:
            _os_log_impl(&dword_1830D4000, v78, v79, v80, (uint8_t *)&buf, 0xCu);
          }
        }
        else if (v111)
        {
          os_log_type_t v97 = (char *)__nw_create_backtrace_string();
          uint64_t v78 = __nwlog_obj();
          os_log_type_t v79 = type[0];
          BOOL v98 = os_log_type_enabled(v78, type[0]);
          if (v97)
          {
            if (v98)
            {
              int buf = 136446466;
              os_log_type_t v114 = "__nw_protocol_connect";
              __int16 v115 = 2082;
              uint64_t v116 = v97;
              _os_log_impl(&dword_1830D4000, v78, v79, "%{public}s called with null other_protocol, dumping backtrace:%{public}s", (uint8_t *)&buf, 0x16u);
            }
            free(v97);
            goto LABEL_229;
          }
          if (v98)
          {
            int buf = 136446210;
            os_log_type_t v114 = "__nw_protocol_connect";
            os_log_type_t v80 = "%{public}s called with null other_protocol, no backtrace";
            goto LABEL_228;
          }
        }
        else
        {
          uint64_t v78 = __nwlog_obj();
          os_log_type_t v79 = type[0];
          if (os_log_type_enabled(v78, type[0]))
          {
            int buf = 136446210;
            os_log_type_t v114 = "__nw_protocol_connect";
            os_log_type_t v80 = "%{public}s called with null other_protocol, backtrace limit exceeded";
            goto LABEL_228;
          }
        }
      }
LABEL_229:
      if (v77) {
        free(v77);
      }
      char v19 = 0;
      goto LABEL_29;
    }
    __nwlog_obj();
    int buf = 136446210;
    os_log_type_t v114 = "__nw_protocol_notify";
    uint64_t v4 = _os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    char v111 = 0;
    if (__nwlog_fault((const char *)v4, type, &v111))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v74 = __nwlog_obj();
        os_log_type_t v75 = type[0];
        if (!os_log_type_enabled(v74, type[0])) {
          goto LABEL_224;
        }
        int buf = 136446210;
        os_log_type_t v114 = "__nw_protocol_notify";
        char v76 = "%{public}s called with null protocol";
        goto LABEL_223;
      }
      if (!v111)
      {
        os_log_type_t v74 = __nwlog_obj();
        os_log_type_t v75 = type[0];
        if (!os_log_type_enabled(v74, type[0])) {
          goto LABEL_224;
        }
        int buf = 136446210;
        os_log_type_t v114 = "__nw_protocol_notify";
        char v76 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_223;
      }
      char v95 = (char *)__nw_create_backtrace_string();
      os_log_type_t v74 = __nwlog_obj();
      os_log_type_t v75 = type[0];
      BOOL v96 = os_log_type_enabled(v74, type[0]);
      if (v95)
      {
        if (v96)
        {
          int buf = 136446466;
          os_log_type_t v114 = "__nw_protocol_notify";
          __int16 v115 = 2082;
          uint64_t v116 = v95;
          _os_log_impl(&dword_1830D4000, v74, v75, "%{public}s called with null protocol, dumping backtrace:%{public}s", (uint8_t *)&buf, 0x16u);
        }
        free(v95);
        if (v4) {
          goto LABEL_79;
        }
        goto LABEL_18;
      }
      if (v96)
      {
        int buf = 136446210;
        os_log_type_t v114 = "__nw_protocol_notify";
        char v76 = "%{public}s called with null protocol, no backtrace";
LABEL_223:
        _os_log_impl(&dword_1830D4000, v74, v75, v76, (uint8_t *)&buf, 0xCu);
      }
    }
LABEL_224:
    if (!v4) {
      goto LABEL_18;
    }
    goto LABEL_79;
  }
  uint64_t v24 = *(void *)(a1 + 48);
  uint64_t v25 = *(void *)(v24 + 48);
  if (!v25)
  {
    __nwlog_obj();
    int buf = 136446210;
    os_log_type_t v114 = "__nw_protocol_notify";
    uint64_t v25 = _os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    char v111 = 0;
    if (!__nwlog_fault((const char *)v25, type, &v111)) {
      goto LABEL_235;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      uint64_t v81 = __nwlog_obj();
      os_log_type_t v82 = type[0];
      if (!os_log_type_enabled(v81, type[0])) {
        goto LABEL_235;
      }
      int buf = 136446210;
      os_log_type_t v114 = "__nw_protocol_notify";
      os_log_type_t v83 = "%{public}s called with null protocol";
    }
    else if (v111)
    {
      BOOL v99 = (char *)__nw_create_backtrace_string();
      uint64_t v81 = __nwlog_obj();
      os_log_type_t v82 = type[0];
      BOOL v100 = os_log_type_enabled(v81, type[0]);
      if (v99)
      {
        if (v100)
        {
          int buf = 136446466;
          os_log_type_t v114 = "__nw_protocol_notify";
          __int16 v115 = 2082;
          uint64_t v116 = v99;
          _os_log_impl(&dword_1830D4000, v81, v82, "%{public}s called with null protocol, dumping backtrace:%{public}s", (uint8_t *)&buf, 0x16u);
        }
        free(v99);
        if (v25) {
          goto LABEL_103;
        }
        return;
      }
      if (!v100)
      {
LABEL_235:
        if (!v25) {
          return;
        }
LABEL_103:
        free((void *)v25);
        return;
      }
      int buf = 136446210;
      os_log_type_t v114 = "__nw_protocol_notify";
      os_log_type_t v83 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      uint64_t v81 = __nwlog_obj();
      os_log_type_t v82 = type[0];
      if (!os_log_type_enabled(v81, type[0])) {
        goto LABEL_235;
      }
      int buf = 136446210;
      os_log_type_t v114 = "__nw_protocol_notify";
      os_log_type_t v83 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    _os_log_impl(&dword_1830D4000, v81, v82, v83, (uint8_t *)&buf, 0xCu);
    goto LABEL_235;
  }
  uint64_t v26 = *(void **)(v25 + 40);
  if (v26 == &nw_protocol_ref_counted_handle)
  {
    uint64_t v27 = *(void *)(v25 + 88);
    if (v27) {
      *(void *)(v25 + 88) = v27 + 1;
    }
  }
  uint64_t v28 = *(void **)(v24 + 40);
  if (v28 == &nw_protocol_ref_counted_handle)
  {
    uint64_t v29 = *(void *)(v24 + 88);
    if (v29) {
      *(void *)(v24 + 88) = v29 + 1;
    }
  }
  uint64_t v30 = *(void *)(v25 + 24);
  if (v30)
  {
    char v31 = *(void (**)(uint64_t, uint64_t, uint64_t, void, void))(v30 + 160);
    if (v31)
    {
      v31(v25, v24, 19, 0, 0);
      goto LABEL_51;
    }
  }
  __nwlog_obj();
  uint64_t v68 = *(const char **)(v25 + 16);
  int buf = 136446722;
  os_log_type_t v114 = "__nw_protocol_notify";
  if (!v68) {
    uint64_t v68 = "invalid";
  }
  __int16 v115 = 2082;
  uint64_t v116 = (void *)v68;
  __int16 v117 = 2048;
  uint64_t v118 = v25;
  uint64_t v69 = (char *)_os_log_send_and_compose_impl();
  type[0] = OS_LOG_TYPE_ERROR;
  char v111 = 0;
  if (__nwlog_fault(v69, type, &v111))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      uint64_t v70 = __nwlog_obj();
      os_log_type_t v71 = type[0];
      if (!os_log_type_enabled(v70, type[0])) {
        goto LABEL_213;
      }
      os_log_type_t v72 = *(const char **)(v25 + 16);
      if (!v72) {
        os_log_type_t v72 = "invalid";
      }
      int buf = 136446722;
      os_log_type_t v114 = "__nw_protocol_notify";
      __int16 v115 = 2082;
      uint64_t v116 = (void *)v72;
      __int16 v117 = 2048;
      uint64_t v118 = v25;
      os_log_type_t v73 = "%{public}s protocol %{public}s (%p) has invalid notify callback";
      goto LABEL_212;
    }
    if (!v111)
    {
      uint64_t v70 = __nwlog_obj();
      os_log_type_t v71 = type[0];
      if (!os_log_type_enabled(v70, type[0])) {
        goto LABEL_213;
      }
      int v105 = *(const char **)(v25 + 16);
      if (!v105) {
        int v105 = "invalid";
      }
      int buf = 136446722;
      os_log_type_t v114 = "__nw_protocol_notify";
      __int16 v115 = 2082;
      uint64_t v116 = (void *)v105;
      __int16 v117 = 2048;
      uint64_t v118 = v25;
      os_log_type_t v73 = "%{public}s protocol %{public}s (%p) has invalid notify callback, backtrace limit exceeded";
      goto LABEL_212;
    }
    os_log_type_t v92 = (char *)__nw_create_backtrace_string();
    uint64_t v70 = __nwlog_obj();
    os_log_type_t v71 = type[0];
    BOOL v93 = os_log_type_enabled(v70, type[0]);
    if (v92)
    {
      if (v93)
      {
        os_log_type_t v94 = *(const char **)(v25 + 16);
        if (!v94) {
          os_log_type_t v94 = "invalid";
        }
        int buf = 136446978;
        os_log_type_t v114 = "__nw_protocol_notify";
        __int16 v115 = 2082;
        uint64_t v116 = (void *)v94;
        __int16 v117 = 2048;
        uint64_t v118 = v25;
        __int16 v119 = 2082;
        BOOL v120 = v92;
        _os_log_impl(&dword_1830D4000, v70, v71, "%{public}s protocol %{public}s (%p) has invalid notify callback, dumping backtrace:%{public}s", (uint8_t *)&buf, 0x2Au);
      }
      free(v92);
      goto LABEL_213;
    }
    if (v93)
    {
      os_log_type_t v108 = *(const char **)(v25 + 16);
      if (!v108) {
        os_log_type_t v108 = "invalid";
      }
      int buf = 136446722;
      os_log_type_t v114 = "__nw_protocol_notify";
      __int16 v115 = 2082;
      uint64_t v116 = (void *)v108;
      __int16 v117 = 2048;
      uint64_t v118 = v25;
      os_log_type_t v73 = "%{public}s protocol %{public}s (%p) has invalid notify callback, no backtrace";
LABEL_212:
      _os_log_impl(&dword_1830D4000, v70, v71, v73, (uint8_t *)&buf, 0x20u);
    }
  }
LABEL_213:
  if (v69) {
    free(v69);
  }
LABEL_51:
  if (v28 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(v24 + 40) == &nw_protocol_ref_counted_handle)
  {
    uint64_t v48 = *(void *)(v24 + 88);
    if (v48)
    {
      uint64_t v49 = v48 - 1;
      *(void *)(v24 + 88) = v49;
      if (!v49)
      {
        os_log_type_t v50 = *(void (***)(void))(v24 + 64);
        if (v50)
        {
          *(void *)(v24 + 64) = 0;
          v50[2](v50);
          _Block_release(v50);
        }
        if (*(unsigned char *)(v24 + 72))
        {
          uint64_t v51 = *(const void **)(v24 + 64);
          if (v51) {
            _Block_release(v51);
          }
        }
        free((void *)v24);
      }
    }
  }
  if (v26 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(v25 + 40) == &nw_protocol_ref_counted_handle)
  {
    uint64_t v52 = *(void *)(v25 + 88);
    if (v52)
    {
      uint64_t v53 = v52 - 1;
      *(void *)(v25 + 88) = v53;
      if (!v53)
      {
        __int16 v54 = *(void (***)(void))(v25 + 64);
        if (v54)
        {
          *(void *)(v25 + 64) = 0;
          v54[2](v54);
          _Block_release(v54);
        }
        if (*(unsigned char *)(v25 + 72))
        {
          int v55 = *(const void **)(v25 + 64);
          if (v55) {
            _Block_release(v55);
          }
        }
        goto LABEL_103;
      }
    }
  }
}

void nw_protocol_plugin_retry_set_callbacks(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v26 = "nw_protocol_plugin_retry_set_callbacks";
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (!__nwlog_fault(v8, &type, &v23)) {
      goto LABEL_112;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v23)
      {
        uint64_t v9 = __nwlog_obj();
        os_log_type_t v10 = type;
        if (!os_log_type_enabled(v9, type)) {
          goto LABEL_112;
        }
        *(_DWORD *)int buf = 136446210;
        uint64_t v26 = "nw_protocol_plugin_retry_set_callbacks";
        uint64_t v11 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_111;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (!v13) {
          goto LABEL_112;
        }
        *(_DWORD *)int buf = 136446210;
        uint64_t v26 = "nw_protocol_plugin_retry_set_callbacks";
        uint64_t v11 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_111;
      }
      if (v13)
      {
        *(_DWORD *)int buf = 136446466;
        uint64_t v26 = "nw_protocol_plugin_retry_set_callbacks";
        __int16 v27 = 2082;
        uint64_t v28 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
LABEL_112:
      if (v8) {
        goto LABEL_113;
      }
      return;
    }
    uint64_t v9 = __nwlog_obj();
    os_log_type_t v10 = type;
    if (!os_log_type_enabled(v9, type)) {
      goto LABEL_112;
    }
    *(_DWORD *)int buf = 136446210;
    uint64_t v26 = "nw_protocol_plugin_retry_set_callbacks";
    uint64_t v11 = "%{public}s called with null protocol";
    goto LABEL_111;
  }
  uint64_t v5 = *(void *)(a1 + 40);
  if (!v5)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v26 = "nw_protocol_plugin_retry_set_callbacks";
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (!__nwlog_fault(v8, &type, &v23)) {
      goto LABEL_112;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v23)
      {
        uint64_t v9 = __nwlog_obj();
        os_log_type_t v10 = type;
        if (!os_log_type_enabled(v9, type)) {
          goto LABEL_112;
        }
        *(_DWORD *)int buf = 136446210;
        uint64_t v26 = "nw_protocol_plugin_retry_set_callbacks";
        uint64_t v11 = "%{public}s called with null protocol->handle, backtrace limit exceeded";
        goto LABEL_111;
      }
      uint64_t v14 = (char *)__nw_create_backtrace_string();
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v15 = os_log_type_enabled(v9, type);
      if (!v14)
      {
        if (!v15) {
          goto LABEL_112;
        }
        *(_DWORD *)int buf = 136446210;
        uint64_t v26 = "nw_protocol_plugin_retry_set_callbacks";
        uint64_t v11 = "%{public}s called with null protocol->handle, no backtrace";
        goto LABEL_111;
      }
      if (!v15) {
        goto LABEL_77;
      }
      *(_DWORD *)int buf = 136446466;
      uint64_t v26 = "nw_protocol_plugin_retry_set_callbacks";
      __int16 v27 = 2082;
      uint64_t v28 = v14;
      uint64_t v16 = "%{public}s called with null protocol->handle, dumping backtrace:%{public}s";
      goto LABEL_76;
    }
    uint64_t v9 = __nwlog_obj();
    os_log_type_t v10 = type;
    if (!os_log_type_enabled(v9, type)) {
      goto LABEL_112;
    }
    *(_DWORD *)int buf = 136446210;
    uint64_t v26 = "nw_protocol_plugin_retry_set_callbacks";
    uint64_t v11 = "%{public}s called with null protocol->handle";
LABEL_111:
    _os_log_impl(&dword_1830D4000, v9, v10, v11, buf, 0xCu);
    goto LABEL_112;
  }
  uint64_t v6 = *(void **)(v5 + 88);
  if (!v6)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v26 = "nw_protocol_plugin_retry_set_callbacks";
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (!__nwlog_fault(v8, &type, &v23)) {
      goto LABEL_112;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v23)
      {
        uint64_t v9 = __nwlog_obj();
        os_log_type_t v10 = type;
        if (!os_log_type_enabled(v9, type)) {
          goto LABEL_112;
        }
        *(_DWORD *)int buf = 136446210;
        uint64_t v26 = "nw_protocol_plugin_retry_set_callbacks";
        uint64_t v11 = "%{public}s called with null retry_plugin, backtrace limit exceeded";
        goto LABEL_111;
      }
      uint64_t v14 = (char *)__nw_create_backtrace_string();
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v17 = os_log_type_enabled(v9, type);
      if (!v14)
      {
        if (!v17) {
          goto LABEL_112;
        }
        *(_DWORD *)int buf = 136446210;
        uint64_t v26 = "nw_protocol_plugin_retry_set_callbacks";
        uint64_t v11 = "%{public}s called with null retry_plugin, no backtrace";
        goto LABEL_111;
      }
      if (!v17) {
        goto LABEL_77;
      }
      *(_DWORD *)int buf = 136446466;
      uint64_t v26 = "nw_protocol_plugin_retry_set_callbacks";
      __int16 v27 = 2082;
      uint64_t v28 = v14;
      uint64_t v16 = "%{public}s called with null retry_plugin, dumping backtrace:%{public}s";
      goto LABEL_76;
    }
    uint64_t v9 = __nwlog_obj();
    os_log_type_t v10 = type;
    if (!os_log_type_enabled(v9, type)) {
      goto LABEL_112;
    }
    *(_DWORD *)int buf = 136446210;
    uint64_t v26 = "nw_protocol_plugin_retry_set_callbacks";
    uint64_t v11 = "%{public}s called with null retry_plugin";
    goto LABEL_111;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v26 = "nw_protocol_plugin_retry_set_callbacks";
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (!__nwlog_fault(v8, &type, &v23)) {
      goto LABEL_112;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v23)
      {
        uint64_t v9 = __nwlog_obj();
        os_log_type_t v10 = type;
        if (!os_log_type_enabled(v9, type)) {
          goto LABEL_112;
        }
        *(_DWORD *)int buf = 136446210;
        uint64_t v26 = "nw_protocol_plugin_retry_set_callbacks";
        uint64_t v11 = "%{public}s called with null retry_processor, backtrace limit exceeded";
        goto LABEL_111;
      }
      uint64_t v14 = (char *)__nw_create_backtrace_string();
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v18 = os_log_type_enabled(v9, type);
      if (!v14)
      {
        if (!v18) {
          goto LABEL_112;
        }
        *(_DWORD *)int buf = 136446210;
        uint64_t v26 = "nw_protocol_plugin_retry_set_callbacks";
        uint64_t v11 = "%{public}s called with null retry_processor, no backtrace";
        goto LABEL_111;
      }
      if (!v18) {
        goto LABEL_77;
      }
      *(_DWORD *)int buf = 136446466;
      uint64_t v26 = "nw_protocol_plugin_retry_set_callbacks";
      __int16 v27 = 2082;
      uint64_t v28 = v14;
      uint64_t v16 = "%{public}s called with null retry_processor, dumping backtrace:%{public}s";
      goto LABEL_76;
    }
    uint64_t v9 = __nwlog_obj();
    os_log_type_t v10 = type;
    if (!os_log_type_enabled(v9, type)) {
      goto LABEL_112;
    }
    *(_DWORD *)int buf = 136446210;
    uint64_t v26 = "nw_protocol_plugin_retry_set_callbacks";
    uint64_t v11 = "%{public}s called with null retry_processor";
    goto LABEL_111;
  }
  if (!a3)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v26 = "nw_protocol_plugin_retry_set_callbacks";
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (!__nwlog_fault(v8, &type, &v23)) {
      goto LABEL_112;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v23)
      {
        uint64_t v9 = __nwlog_obj();
        os_log_type_t v10 = type;
        if (!os_log_type_enabled(v9, type)) {
          goto LABEL_112;
        }
        *(_DWORD *)int buf = 136446210;
        uint64_t v26 = "nw_protocol_plugin_retry_set_callbacks";
        uint64_t v11 = "%{public}s called with null connect_processor, backtrace limit exceeded";
        goto LABEL_111;
      }
      uint64_t v14 = (char *)__nw_create_backtrace_string();
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v19 = os_log_type_enabled(v9, type);
      if (!v14)
      {
        if (!v19) {
          goto LABEL_112;
        }
        *(_DWORD *)int buf = 136446210;
        uint64_t v26 = "nw_protocol_plugin_retry_set_callbacks";
        uint64_t v11 = "%{public}s called with null connect_processor, no backtrace";
        goto LABEL_111;
      }
      if (!v19) {
        goto LABEL_77;
      }
      *(_DWORD *)int buf = 136446466;
      uint64_t v26 = "nw_protocol_plugin_retry_set_callbacks";
      __int16 v27 = 2082;
      uint64_t v28 = v14;
      uint64_t v16 = "%{public}s called with null connect_processor, dumping backtrace:%{public}s";
      goto LABEL_76;
    }
    uint64_t v9 = __nwlog_obj();
    os_log_type_t v10 = type;
    if (!os_log_type_enabled(v9, type)) {
      goto LABEL_112;
    }
    *(_DWORD *)int buf = 136446210;
    uint64_t v26 = "nw_protocol_plugin_retry_set_callbacks";
    uint64_t v11 = "%{public}s called with null connect_processor";
    goto LABEL_111;
  }
  if (!a4)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v26 = "nw_protocol_plugin_retry_set_callbacks";
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (!__nwlog_fault(v8, &type, &v23)) {
      goto LABEL_112;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v23)
      {
        uint64_t v9 = __nwlog_obj();
        os_log_type_t v10 = type;
        if (!os_log_type_enabled(v9, type)) {
          goto LABEL_112;
        }
        *(_DWORD *)int buf = 136446210;
        uint64_t v26 = "nw_protocol_plugin_retry_set_callbacks";
        uint64_t v11 = "%{public}s called with null disconnect_processor, backtrace limit exceeded";
        goto LABEL_111;
      }
      uint64_t v14 = (char *)__nw_create_backtrace_string();
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v20 = os_log_type_enabled(v9, type);
      if (!v14)
      {
        if (!v20) {
          goto LABEL_112;
        }
        *(_DWORD *)int buf = 136446210;
        uint64_t v26 = "nw_protocol_plugin_retry_set_callbacks";
        uint64_t v11 = "%{public}s called with null disconnect_processor, no backtrace";
        goto LABEL_111;
      }
      if (!v20) {
        goto LABEL_77;
      }
      *(_DWORD *)int buf = 136446466;
      uint64_t v26 = "nw_protocol_plugin_retry_set_callbacks";
      __int16 v27 = 2082;
      uint64_t v28 = v14;
      uint64_t v16 = "%{public}s called with null disconnect_processor, dumping backtrace:%{public}s";
      goto LABEL_76;
    }
    uint64_t v9 = __nwlog_obj();
    os_log_type_t v10 = type;
    if (!os_log_type_enabled(v9, type)) {
      goto LABEL_112;
    }
    *(_DWORD *)int buf = 136446210;
    uint64_t v26 = "nw_protocol_plugin_retry_set_callbacks";
    uint64_t v11 = "%{public}s called with null disconnect_processor";
    goto LABEL_111;
  }
  if (!a5)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v26 = "nw_protocol_plugin_retry_set_callbacks";
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (!__nwlog_fault(v8, &type, &v23)) {
      goto LABEL_112;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (!os_log_type_enabled(v9, type)) {
        goto LABEL_112;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v26 = "nw_protocol_plugin_retry_set_callbacks";
      uint64_t v11 = "%{public}s called with null error_processor";
      goto LABEL_111;
    }
    if (!v23)
    {
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (!os_log_type_enabled(v9, type)) {
        goto LABEL_112;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v26 = "nw_protocol_plugin_retry_set_callbacks";
      uint64_t v11 = "%{public}s called with null error_processor, backtrace limit exceeded";
      goto LABEL_111;
    }
    uint64_t v14 = (char *)__nw_create_backtrace_string();
    uint64_t v9 = __nwlog_obj();
    os_log_type_t v10 = type;
    BOOL v21 = os_log_type_enabled(v9, type);
    if (!v14)
    {
      if (!v21) {
        goto LABEL_112;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v26 = "nw_protocol_plugin_retry_set_callbacks";
      uint64_t v11 = "%{public}s called with null error_processor, no backtrace";
      goto LABEL_111;
    }
    if (!v21) {
      goto LABEL_77;
    }
    *(_DWORD *)int buf = 136446466;
    uint64_t v26 = "nw_protocol_plugin_retry_set_callbacks";
    __int16 v27 = 2082;
    uint64_t v28 = v14;
    uint64_t v16 = "%{public}s called with null error_processor, dumping backtrace:%{public}s";
LABEL_76:
    _os_log_impl(&dword_1830D4000, v9, v10, v16, buf, 0x16u);
    goto LABEL_77;
  }
  v6[16] = a3;
  v6[17] = a4;
  v6[18] = a5;
  v6[19] = a2;
  uint64_t v7 = *(void **)(a1 + 24);
  if (v7)
  {
    v7[3] = nw_protocol_plugin_retry_connect;
    v7[14] = nw_protocol_plugin_retry_get_parameters;
    v7[17] = nw_protocol_plugin_retry_get_remote_endpoint;
    void v7[4] = nw_protocol_plugins_disconnect;
    v7[5] = nw_protocol_plugins_connected;
    v7[23] = nw_protocol_plugins_input_finished;
    v7[6] = nw_protocol_plugins_disconnected;
    v7[7] = nw_protocol_plugins_error;
    v7[20] = nw_protocol_plugins_notify;
    v7[32] = nw_protocol_plugins_reset;
    return;
  }
  __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  uint64_t v26 = "nw_protocol_plugin_retry_set_callbacks";
  uint64_t v8 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v23 = 0;
  if (!__nwlog_fault(v8, &type, &v23)) {
    goto LABEL_112;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    uint64_t v9 = __nwlog_obj();
    os_log_type_t v10 = type;
    if (!os_log_type_enabled(v9, type)) {
      goto LABEL_112;
    }
    *(_DWORD *)int buf = 136446210;
    uint64_t v26 = "nw_protocol_plugin_retry_set_callbacks";
    uint64_t v11 = "%{public}s called with null callbacks";
    goto LABEL_111;
  }
  if (!v23)
  {
    uint64_t v9 = __nwlog_obj();
    os_log_type_t v10 = type;
    if (!os_log_type_enabled(v9, type)) {
      goto LABEL_112;
    }
    *(_DWORD *)int buf = 136446210;
    uint64_t v26 = "nw_protocol_plugin_retry_set_callbacks";
    uint64_t v11 = "%{public}s called with null callbacks, backtrace limit exceeded";
    goto LABEL_111;
  }
  uint64_t v14 = (char *)__nw_create_backtrace_string();
  uint64_t v9 = __nwlog_obj();
  os_log_type_t v10 = type;
  BOOL v22 = os_log_type_enabled(v9, type);
  if (!v14)
  {
    if (!v22) {
      goto LABEL_112;
    }
    *(_DWORD *)int buf = 136446210;
    uint64_t v26 = "nw_protocol_plugin_retry_set_callbacks";
    uint64_t v11 = "%{public}s called with null callbacks, no backtrace";
    goto LABEL_111;
  }
  if (v22)
  {
    *(_DWORD *)int buf = 136446466;
    uint64_t v26 = "nw_protocol_plugin_retry_set_callbacks";
    __int16 v27 = 2082;
    uint64_t v28 = v14;
    uint64_t v16 = "%{public}s called with null callbacks, dumping backtrace:%{public}s";
    goto LABEL_76;
  }
LABEL_77:
  free(v14);
  if (v8) {
LABEL_113:
  }
    free(v8);
}

uint64_t nw_protocol_plugin_retry_get_remote_endpoint(nw_protocol *a1)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v38 = "nw_protocol_plugin_retry_get_remote_endpoint";
    uint64_t v14 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v35 = 0;
    if (!__nwlog_fault(v14, &type, &v35)) {
      goto LABEL_101;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v35)
      {
        BOOL v15 = __nwlog_obj();
        os_log_type_t v16 = type;
        if (os_log_type_enabled(v15, type))
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v38 = "nw_protocol_plugin_retry_get_remote_endpoint";
          BOOL v17 = "%{public}s called with null protocol, backtrace limit exceeded";
          goto LABEL_100;
        }
        goto LABEL_101;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v15 = __nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v25 = os_log_type_enabled(v15, type);
      if (!backtrace_string)
      {
        if (v25)
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v38 = "nw_protocol_plugin_retry_get_remote_endpoint";
          BOOL v17 = "%{public}s called with null protocol, no backtrace";
          goto LABEL_100;
        }
        goto LABEL_101;
      }
      if (!v25) {
        goto LABEL_76;
      }
      *(_DWORD *)int buf = 136446466;
      os_log_type_t v38 = "nw_protocol_plugin_retry_get_remote_endpoint";
      __int16 v39 = 2082;
      uint64_t v40 = backtrace_string;
      uint64_t v26 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
      goto LABEL_75;
    }
    BOOL v15 = __nwlog_obj();
    os_log_type_t v16 = type;
    if (!os_log_type_enabled(v15, type)) {
      goto LABEL_101;
    }
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v38 = "nw_protocol_plugin_retry_get_remote_endpoint";
    BOOL v17 = "%{public}s called with null protocol";
LABEL_100:
    _os_log_impl(&dword_1830D4000, v15, v16, v17, buf, 0xCu);
    goto LABEL_101;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v38 = "nw_protocol_plugin_retry_get_remote_endpoint";
    uint64_t v14 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v35 = 0;
    if (!__nwlog_fault(v14, &type, &v35)) {
      goto LABEL_101;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v35)
      {
        BOOL v15 = __nwlog_obj();
        os_log_type_t v16 = type;
        if (os_log_type_enabled(v15, type))
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v38 = "nw_protocol_plugin_retry_get_remote_endpoint";
          BOOL v17 = "%{public}s called with null protocol->handle, backtrace limit exceeded";
          goto LABEL_100;
        }
        goto LABEL_101;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v15 = __nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v27 = os_log_type_enabled(v15, type);
      if (!backtrace_string)
      {
        if (v27)
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v38 = "nw_protocol_plugin_retry_get_remote_endpoint";
          BOOL v17 = "%{public}s called with null protocol->handle, no backtrace";
          goto LABEL_100;
        }
        goto LABEL_101;
      }
      if (!v27) {
        goto LABEL_76;
      }
      *(_DWORD *)int buf = 136446466;
      os_log_type_t v38 = "nw_protocol_plugin_retry_get_remote_endpoint";
      __int16 v39 = 2082;
      uint64_t v40 = backtrace_string;
      uint64_t v26 = "%{public}s called with null protocol->handle, dumping backtrace:%{public}s";
      goto LABEL_75;
    }
    BOOL v15 = __nwlog_obj();
    os_log_type_t v16 = type;
    if (!os_log_type_enabled(v15, type)) {
      goto LABEL_101;
    }
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v38 = "nw_protocol_plugin_retry_get_remote_endpoint";
    BOOL v17 = "%{public}s called with null protocol->handle";
    goto LABEL_100;
  }
  uint64_t v2 = handle[11];
  if (!v2)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v38 = "nw_protocol_plugin_retry_get_remote_endpoint";
    uint64_t v14 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v35 = 0;
    if (!__nwlog_fault(v14, &type, &v35)) {
      goto LABEL_101;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v15 = __nwlog_obj();
      os_log_type_t v16 = type;
      if (!os_log_type_enabled(v15, type)) {
        goto LABEL_101;
      }
      *(_DWORD *)int buf = 136446210;
      os_log_type_t v38 = "nw_protocol_plugin_retry_get_remote_endpoint";
      BOOL v17 = "%{public}s called with null retry_plugin";
      goto LABEL_100;
    }
    if (!v35)
    {
      BOOL v15 = __nwlog_obj();
      os_log_type_t v16 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v38 = "nw_protocol_plugin_retry_get_remote_endpoint";
        BOOL v17 = "%{public}s called with null retry_plugin, backtrace limit exceeded";
        goto LABEL_100;
      }
      goto LABEL_101;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v15 = __nwlog_obj();
    os_log_type_t v16 = type;
    BOOL v28 = os_log_type_enabled(v15, type);
    if (!backtrace_string)
    {
      if (v28)
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v38 = "nw_protocol_plugin_retry_get_remote_endpoint";
        BOOL v17 = "%{public}s called with null retry_plugin, no backtrace";
        goto LABEL_100;
      }
      goto LABEL_101;
    }
    if (!v28) {
      goto LABEL_76;
    }
    *(_DWORD *)int buf = 136446466;
    os_log_type_t v38 = "nw_protocol_plugin_retry_get_remote_endpoint";
    __int16 v39 = 2082;
    uint64_t v40 = backtrace_string;
    uint64_t v26 = "%{public}s called with null retry_plugin, dumping backtrace:%{public}s";
LABEL_75:
    _os_log_impl(&dword_1830D4000, v15, v16, v26, buf, 0x16u);
    goto LABEL_76;
  }
  uint64_t v3 = *(void *)(v2 + 80);
  if (v3) {
    return v3;
  }
  uint64_t default_input_handler = a1->default_input_handler;
  if (!default_input_handler)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v38 = "__nw_protocol_get_remote_endpoint";
    uint64_t v14 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v35 = 0;
    if (!__nwlog_fault(v14, &type, &v35)) {
      goto LABEL_101;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v15 = __nwlog_obj();
      os_log_type_t v16 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v38 = "__nw_protocol_get_remote_endpoint";
        BOOL v17 = "%{public}s called with null protocol";
        goto LABEL_100;
      }
LABEL_101:
      if (v14) {
        free(v14);
      }
      return 0;
    }
    if (!v35)
    {
      BOOL v15 = __nwlog_obj();
      os_log_type_t v16 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v38 = "__nw_protocol_get_remote_endpoint";
        BOOL v17 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_100;
      }
      goto LABEL_101;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v15 = __nwlog_obj();
    os_log_type_t v16 = type;
    BOOL v32 = os_log_type_enabled(v15, type);
    if (!backtrace_string)
    {
      if (v32)
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v38 = "__nw_protocol_get_remote_endpoint";
        BOOL v17 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_100;
      }
      goto LABEL_101;
    }
    if (v32)
    {
      *(_DWORD *)int buf = 136446466;
      os_log_type_t v38 = "__nw_protocol_get_remote_endpoint";
      __int16 v39 = 2082;
      uint64_t v40 = backtrace_string;
      uint64_t v26 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
      goto LABEL_75;
    }
LABEL_76:
    free(backtrace_string);
    goto LABEL_101;
  }
  uint64_t v5 = default_input_handler->handle;
  if (v5 == &nw_protocol_ref_counted_handle)
  {
    callbacks = default_input_handler[1].callbacks;
    if (callbacks) {
      default_input_handler[1].callbacks = (nw_protocol_callbacks *)((char *)&callbacks->add_input_handler + 1);
    }
  }
  uint64_t v7 = default_input_handler->callbacks;
  if (v7)
  {
    get_remote_endpoint = (uint64_t (*)(nw_protocol *))v7->get_remote_endpoint;
    if (get_remote_endpoint)
    {
      uint64_t v3 = get_remote_endpoint(default_input_handler);
      if (v5 != &nw_protocol_ref_counted_handle) {
        return v3;
      }
      goto LABEL_12;
    }
  }
  __nwlog_obj();
  name = default_input_handler->identifier->name;
  *(_DWORD *)int buf = 136446722;
  os_log_type_t v38 = "__nw_protocol_get_remote_endpoint";
  if (!name) {
    name = "invalid";
  }
  __int16 v39 = 2082;
  uint64_t v40 = (void *)name;
  __int16 v41 = 2048;
  BOOL v42 = default_input_handler;
  BOOL v19 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v35 = 0;
  if (!__nwlog_fault(v19, &type, &v35)) {
    goto LABEL_92;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    BOOL v20 = __nwlog_obj();
    os_log_type_t v21 = type;
    if (!os_log_type_enabled(v20, type)) {
      goto LABEL_92;
    }
    BOOL v22 = default_input_handler->identifier->name;
    if (!v22) {
      BOOL v22 = "invalid";
    }
    *(_DWORD *)int buf = 136446722;
    os_log_type_t v38 = "__nw_protocol_get_remote_endpoint";
    __int16 v39 = 2082;
    uint64_t v40 = (void *)v22;
    __int16 v41 = 2048;
    BOOL v42 = default_input_handler;
    char v23 = "%{public}s protocol %{public}s (%p) has invalid get_remote_endpoint callback";
LABEL_91:
    _os_log_impl(&dword_1830D4000, v20, v21, v23, buf, 0x20u);
    goto LABEL_92;
  }
  if (!v35)
  {
    BOOL v20 = __nwlog_obj();
    os_log_type_t v21 = type;
    if (!os_log_type_enabled(v20, type)) {
      goto LABEL_92;
    }
    uint64_t v33 = default_input_handler->identifier->name;
    if (!v33) {
      uint64_t v33 = "invalid";
    }
    *(_DWORD *)int buf = 136446722;
    os_log_type_t v38 = "__nw_protocol_get_remote_endpoint";
    __int16 v39 = 2082;
    uint64_t v40 = (void *)v33;
    __int16 v41 = 2048;
    BOOL v42 = default_input_handler;
    char v23 = "%{public}s protocol %{public}s (%p) has invalid get_remote_endpoint callback, backtrace limit exceeded";
    goto LABEL_91;
  }
  uint64_t v29 = (char *)__nw_create_backtrace_string();
  BOOL v20 = __nwlog_obj();
  os_log_type_t v21 = type;
  BOOL v30 = os_log_type_enabled(v20, type);
  if (!v29)
  {
    if (!v30) {
      goto LABEL_92;
    }
    os_log_type_t v34 = default_input_handler->identifier->name;
    if (!v34) {
      os_log_type_t v34 = "invalid";
    }
    *(_DWORD *)int buf = 136446722;
    os_log_type_t v38 = "__nw_protocol_get_remote_endpoint";
    __int16 v39 = 2082;
    uint64_t v40 = (void *)v34;
    __int16 v41 = 2048;
    BOOL v42 = default_input_handler;
    char v23 = "%{public}s protocol %{public}s (%p) has invalid get_remote_endpoint callback, no backtrace";
    goto LABEL_91;
  }
  if (v30)
  {
    char v31 = default_input_handler->identifier->name;
    if (!v31) {
      char v31 = "invalid";
    }
    *(_DWORD *)int buf = 136446978;
    os_log_type_t v38 = "__nw_protocol_get_remote_endpoint";
    __int16 v39 = 2082;
    uint64_t v40 = (void *)v31;
    __int16 v41 = 2048;
    BOOL v42 = default_input_handler;
    __int16 v43 = 2082;
    uint64_t v44 = v29;
    _os_log_impl(&dword_1830D4000, v20, v21, "%{public}s protocol %{public}s (%p) has invalid get_remote_endpoint callback, dumping backtrace:%{public}s", buf, 0x2Au);
  }
  free(v29);
LABEL_92:
  if (v19) {
    free(v19);
  }
  uint64_t v3 = 0;
  if (v5 == &nw_protocol_ref_counted_handle)
  {
LABEL_12:
    if (default_input_handler->handle == &nw_protocol_ref_counted_handle)
    {
      os_log_type_t v10 = default_input_handler[1].callbacks;
      if (v10)
      {
        uint64_t v11 = (nw_protocol_callbacks *)((char *)v10 - 1);
        default_input_handler[1].callbacks = v11;
        if (!v11)
        {
          uint64_t v12 = *(void (***)(void))default_input_handler[1].flow_id;
          if (v12)
          {
            *(void *)default_input_handler[1].flow_id = 0;
            v12[2](v12);
            _Block_release(v12);
          }
          if (default_input_handler[1].flow_id[8])
          {
            BOOL v13 = *(const void **)default_input_handler[1].flow_id;
            if (v13) {
              _Block_release(v13);
            }
          }
          free(default_input_handler);
        }
      }
    }
  }
  return v3;
}

uint64_t nw_protocol_plugin_retry_get_parameters(nw_protocol *a1)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v38 = "nw_protocol_plugin_retry_get_parameters";
    uint64_t v14 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v35 = 0;
    if (!__nwlog_fault(v14, &type, &v35)) {
      goto LABEL_101;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v35)
      {
        BOOL v15 = __nwlog_obj();
        os_log_type_t v16 = type;
        if (os_log_type_enabled(v15, type))
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v38 = "nw_protocol_plugin_retry_get_parameters";
          BOOL v17 = "%{public}s called with null protocol, backtrace limit exceeded";
          goto LABEL_100;
        }
        goto LABEL_101;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v15 = __nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v25 = os_log_type_enabled(v15, type);
      if (!backtrace_string)
      {
        if (v25)
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v38 = "nw_protocol_plugin_retry_get_parameters";
          BOOL v17 = "%{public}s called with null protocol, no backtrace";
          goto LABEL_100;
        }
        goto LABEL_101;
      }
      if (!v25) {
        goto LABEL_76;
      }
      *(_DWORD *)int buf = 136446466;
      os_log_type_t v38 = "nw_protocol_plugin_retry_get_parameters";
      __int16 v39 = 2082;
      uint64_t v40 = backtrace_string;
      uint64_t v26 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
      goto LABEL_75;
    }
    BOOL v15 = __nwlog_obj();
    os_log_type_t v16 = type;
    if (!os_log_type_enabled(v15, type)) {
      goto LABEL_101;
    }
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v38 = "nw_protocol_plugin_retry_get_parameters";
    BOOL v17 = "%{public}s called with null protocol";
LABEL_100:
    _os_log_impl(&dword_1830D4000, v15, v16, v17, buf, 0xCu);
    goto LABEL_101;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v38 = "nw_protocol_plugin_retry_get_parameters";
    uint64_t v14 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v35 = 0;
    if (!__nwlog_fault(v14, &type, &v35)) {
      goto LABEL_101;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v35)
      {
        BOOL v15 = __nwlog_obj();
        os_log_type_t v16 = type;
        if (os_log_type_enabled(v15, type))
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v38 = "nw_protocol_plugin_retry_get_parameters";
          BOOL v17 = "%{public}s called with null protocol->handle, backtrace limit exceeded";
          goto LABEL_100;
        }
        goto LABEL_101;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v15 = __nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v27 = os_log_type_enabled(v15, type);
      if (!backtrace_string)
      {
        if (v27)
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v38 = "nw_protocol_plugin_retry_get_parameters";
          BOOL v17 = "%{public}s called with null protocol->handle, no backtrace";
          goto LABEL_100;
        }
        goto LABEL_101;
      }
      if (!v27) {
        goto LABEL_76;
      }
      *(_DWORD *)int buf = 136446466;
      os_log_type_t v38 = "nw_protocol_plugin_retry_get_parameters";
      __int16 v39 = 2082;
      uint64_t v40 = backtrace_string;
      uint64_t v26 = "%{public}s called with null protocol->handle, dumping backtrace:%{public}s";
      goto LABEL_75;
    }
    BOOL v15 = __nwlog_obj();
    os_log_type_t v16 = type;
    if (!os_log_type_enabled(v15, type)) {
      goto LABEL_101;
    }
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v38 = "nw_protocol_plugin_retry_get_parameters";
    BOOL v17 = "%{public}s called with null protocol->handle";
    goto LABEL_100;
  }
  uint64_t v2 = handle[11];
  if (!v2)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v38 = "nw_protocol_plugin_retry_get_parameters";
    uint64_t v14 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v35 = 0;
    if (!__nwlog_fault(v14, &type, &v35)) {
      goto LABEL_101;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v15 = __nwlog_obj();
      os_log_type_t v16 = type;
      if (!os_log_type_enabled(v15, type)) {
        goto LABEL_101;
      }
      *(_DWORD *)int buf = 136446210;
      os_log_type_t v38 = "nw_protocol_plugin_retry_get_parameters";
      BOOL v17 = "%{public}s called with null retry_plugin";
      goto LABEL_100;
    }
    if (!v35)
    {
      BOOL v15 = __nwlog_obj();
      os_log_type_t v16 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v38 = "nw_protocol_plugin_retry_get_parameters";
        BOOL v17 = "%{public}s called with null retry_plugin, backtrace limit exceeded";
        goto LABEL_100;
      }
      goto LABEL_101;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v15 = __nwlog_obj();
    os_log_type_t v16 = type;
    BOOL v28 = os_log_type_enabled(v15, type);
    if (!backtrace_string)
    {
      if (v28)
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v38 = "nw_protocol_plugin_retry_get_parameters";
        BOOL v17 = "%{public}s called with null retry_plugin, no backtrace";
        goto LABEL_100;
      }
      goto LABEL_101;
    }
    if (!v28) {
      goto LABEL_76;
    }
    *(_DWORD *)int buf = 136446466;
    os_log_type_t v38 = "nw_protocol_plugin_retry_get_parameters";
    __int16 v39 = 2082;
    uint64_t v40 = backtrace_string;
    uint64_t v26 = "%{public}s called with null retry_plugin, dumping backtrace:%{public}s";
LABEL_75:
    _os_log_impl(&dword_1830D4000, v15, v16, v26, buf, 0x16u);
    goto LABEL_76;
  }
  uint64_t v3 = *(void *)(v2 + 48);
  if (v3) {
    return v3;
  }
  uint64_t default_input_handler = a1->default_input_handler;
  if (!default_input_handler)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v38 = "__nw_protocol_get_parameters";
    uint64_t v14 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v35 = 0;
    if (!__nwlog_fault(v14, &type, &v35)) {
      goto LABEL_101;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v15 = __nwlog_obj();
      os_log_type_t v16 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v38 = "__nw_protocol_get_parameters";
        BOOL v17 = "%{public}s called with null protocol";
        goto LABEL_100;
      }
LABEL_101:
      if (v14) {
        free(v14);
      }
      return 0;
    }
    if (!v35)
    {
      BOOL v15 = __nwlog_obj();
      os_log_type_t v16 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v38 = "__nw_protocol_get_parameters";
        BOOL v17 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_100;
      }
      goto LABEL_101;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v15 = __nwlog_obj();
    os_log_type_t v16 = type;
    BOOL v32 = os_log_type_enabled(v15, type);
    if (!backtrace_string)
    {
      if (v32)
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v38 = "__nw_protocol_get_parameters";
        BOOL v17 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_100;
      }
      goto LABEL_101;
    }
    if (v32)
    {
      *(_DWORD *)int buf = 136446466;
      os_log_type_t v38 = "__nw_protocol_get_parameters";
      __int16 v39 = 2082;
      uint64_t v40 = backtrace_string;
      uint64_t v26 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
      goto LABEL_75;
    }
LABEL_76:
    free(backtrace_string);
    goto LABEL_101;
  }
  uint64_t v5 = default_input_handler->handle;
  if (v5 == &nw_protocol_ref_counted_handle)
  {
    callbacks = default_input_handler[1].callbacks;
    if (callbacks) {
      default_input_handler[1].callbacks = (nw_protocol_callbacks *)((char *)&callbacks->add_input_handler + 1);
    }
  }
  uint64_t v7 = default_input_handler->callbacks;
  if (v7)
  {
    get_parameters = (uint64_t (*)(nw_protocol *))v7->get_parameters;
    if (get_parameters)
    {
      uint64_t v3 = get_parameters(default_input_handler);
      if (v5 != &nw_protocol_ref_counted_handle) {
        return v3;
      }
      goto LABEL_12;
    }
  }
  __nwlog_obj();
  name = default_input_handler->identifier->name;
  *(_DWORD *)int buf = 136446722;
  os_log_type_t v38 = "__nw_protocol_get_parameters";
  if (!name) {
    name = "invalid";
  }
  __int16 v39 = 2082;
  uint64_t v40 = (void *)name;
  __int16 v41 = 2048;
  BOOL v42 = default_input_handler;
  BOOL v19 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v35 = 0;
  if (!__nwlog_fault(v19, &type, &v35)) {
    goto LABEL_92;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    BOOL v20 = __nwlog_obj();
    os_log_type_t v21 = type;
    if (!os_log_type_enabled(v20, type)) {
      goto LABEL_92;
    }
    BOOL v22 = default_input_handler->identifier->name;
    if (!v22) {
      BOOL v22 = "invalid";
    }
    *(_DWORD *)int buf = 136446722;
    os_log_type_t v38 = "__nw_protocol_get_parameters";
    __int16 v39 = 2082;
    uint64_t v40 = (void *)v22;
    __int16 v41 = 2048;
    BOOL v42 = default_input_handler;
    char v23 = "%{public}s protocol %{public}s (%p) has invalid get_parameters callback";
LABEL_91:
    _os_log_impl(&dword_1830D4000, v20, v21, v23, buf, 0x20u);
    goto LABEL_92;
  }
  if (!v35)
  {
    BOOL v20 = __nwlog_obj();
    os_log_type_t v21 = type;
    if (!os_log_type_enabled(v20, type)) {
      goto LABEL_92;
    }
    uint64_t v33 = default_input_handler->identifier->name;
    if (!v33) {
      uint64_t v33 = "invalid";
    }
    *(_DWORD *)int buf = 136446722;
    os_log_type_t v38 = "__nw_protocol_get_parameters";
    __int16 v39 = 2082;
    uint64_t v40 = (void *)v33;
    __int16 v41 = 2048;
    BOOL v42 = default_input_handler;
    char v23 = "%{public}s protocol %{public}s (%p) has invalid get_parameters callback, backtrace limit exceeded";
    goto LABEL_91;
  }
  uint64_t v29 = (char *)__nw_create_backtrace_string();
  BOOL v20 = __nwlog_obj();
  os_log_type_t v21 = type;
  BOOL v30 = os_log_type_enabled(v20, type);
  if (!v29)
  {
    if (!v30) {
      goto LABEL_92;
    }
    os_log_type_t v34 = default_input_handler->identifier->name;
    if (!v34) {
      os_log_type_t v34 = "invalid";
    }
    *(_DWORD *)int buf = 136446722;
    os_log_type_t v38 = "__nw_protocol_get_parameters";
    __int16 v39 = 2082;
    uint64_t v40 = (void *)v34;
    __int16 v41 = 2048;
    BOOL v42 = default_input_handler;
    char v23 = "%{public}s protocol %{public}s (%p) has invalid get_parameters callback, no backtrace";
    goto LABEL_91;
  }
  if (v30)
  {
    char v31 = default_input_handler->identifier->name;
    if (!v31) {
      char v31 = "invalid";
    }
    *(_DWORD *)int buf = 136446978;
    os_log_type_t v38 = "__nw_protocol_get_parameters";
    __int16 v39 = 2082;
    uint64_t v40 = (void *)v31;
    __int16 v41 = 2048;
    BOOL v42 = default_input_handler;
    __int16 v43 = 2082;
    uint64_t v44 = v29;
    _os_log_impl(&dword_1830D4000, v20, v21, "%{public}s protocol %{public}s (%p) has invalid get_parameters callback, dumping backtrace:%{public}s", buf, 0x2Au);
  }
  free(v29);
LABEL_92:
  if (v19) {
    free(v19);
  }
  uint64_t v3 = 0;
  if (v5 == &nw_protocol_ref_counted_handle)
  {
LABEL_12:
    if (default_input_handler->handle == &nw_protocol_ref_counted_handle)
    {
      os_log_type_t v10 = default_input_handler[1].callbacks;
      if (v10)
      {
        uint64_t v11 = (nw_protocol_callbacks *)((char *)v10 - 1);
        default_input_handler[1].callbacks = v11;
        if (!v11)
        {
          uint64_t v12 = *(void (***)(void))default_input_handler[1].flow_id;
          if (v12)
          {
            *(void *)default_input_handler[1].flow_id = 0;
            v12[2](v12);
            _Block_release(v12);
          }
          if (default_input_handler[1].flow_id[8])
          {
            BOOL v13 = *(const void **)default_input_handler[1].flow_id;
            if (v13) {
              _Block_release(v13);
            }
          }
          free(default_input_handler);
        }
      }
    }
  }
  return v3;
}

uint64_t nw_protocol_plugin_retry_connect(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v109 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    __int16 v102 = "nw_protocol_plugin_retry_connect";
    BOOL v60 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v99 = 0;
    if (!__nwlog_fault(v60, &type, &v99)) {
      goto LABEL_208;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v99)
      {
        BOOL v61 = __nwlog_obj();
        os_log_type_t v62 = type;
        if (os_log_type_enabled(v61, type))
        {
          *(_DWORD *)int buf = 136446210;
          __int16 v102 = "nw_protocol_plugin_retry_connect";
          BOOL v63 = "%{public}s called with null protocol, backtrace limit exceeded";
          goto LABEL_207;
        }
        goto LABEL_208;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v61 = __nwlog_obj();
      os_log_type_t v62 = type;
      BOOL v75 = os_log_type_enabled(v61, type);
      if (!backtrace_string)
      {
        if (v75)
        {
          *(_DWORD *)int buf = 136446210;
          __int16 v102 = "nw_protocol_plugin_retry_connect";
          BOOL v63 = "%{public}s called with null protocol, no backtrace";
          goto LABEL_207;
        }
        goto LABEL_208;
      }
      if (!v75) {
        goto LABEL_157;
      }
      *(_DWORD *)int buf = 136446466;
      __int16 v102 = "nw_protocol_plugin_retry_connect";
      __int16 v103 = 2082;
      __int16 v104 = (nw_protocol *)backtrace_string;
      char v76 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
      goto LABEL_156;
    }
    BOOL v61 = __nwlog_obj();
    os_log_type_t v62 = type;
    if (!os_log_type_enabled(v61, type)) {
      goto LABEL_208;
    }
    *(_DWORD *)int buf = 136446210;
    __int16 v102 = "nw_protocol_plugin_retry_connect";
    BOOL v63 = "%{public}s called with null protocol";
LABEL_207:
    _os_log_impl(&dword_1830D4000, v61, v62, v63, buf, 0xCu);
    goto LABEL_208;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    __int16 v102 = "nw_protocol_plugin_retry_connect";
    BOOL v60 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v99 = 0;
    if (!__nwlog_fault(v60, &type, &v99)) {
      goto LABEL_208;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v99)
      {
        BOOL v61 = __nwlog_obj();
        os_log_type_t v62 = type;
        if (os_log_type_enabled(v61, type))
        {
          *(_DWORD *)int buf = 136446210;
          __int16 v102 = "nw_protocol_plugin_retry_connect";
          BOOL v63 = "%{public}s called with null protocol->handle, backtrace limit exceeded";
          goto LABEL_207;
        }
        goto LABEL_208;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v61 = __nwlog_obj();
      os_log_type_t v62 = type;
      BOOL v77 = os_log_type_enabled(v61, type);
      if (!backtrace_string)
      {
        if (v77)
        {
          *(_DWORD *)int buf = 136446210;
          __int16 v102 = "nw_protocol_plugin_retry_connect";
          BOOL v63 = "%{public}s called with null protocol->handle, no backtrace";
          goto LABEL_207;
        }
        goto LABEL_208;
      }
      if (!v77) {
        goto LABEL_157;
      }
      *(_DWORD *)int buf = 136446466;
      __int16 v102 = "nw_protocol_plugin_retry_connect";
      __int16 v103 = 2082;
      __int16 v104 = (nw_protocol *)backtrace_string;
      char v76 = "%{public}s called with null protocol->handle, dumping backtrace:%{public}s";
      goto LABEL_156;
    }
    BOOL v61 = __nwlog_obj();
    os_log_type_t v62 = type;
    if (!os_log_type_enabled(v61, type)) {
      goto LABEL_208;
    }
    *(_DWORD *)int buf = 136446210;
    __int16 v102 = "nw_protocol_plugin_retry_connect";
    BOOL v63 = "%{public}s called with null protocol->handle";
    goto LABEL_207;
  }
  uint64_t v4 = handle[11];
  if (!v4)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    __int16 v102 = "nw_protocol_plugin_retry_connect";
    BOOL v60 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v99 = 0;
    if (!__nwlog_fault(v60, &type, &v99)) {
      goto LABEL_208;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v61 = __nwlog_obj();
      os_log_type_t v62 = type;
      if (!os_log_type_enabled(v61, type)) {
        goto LABEL_208;
      }
      *(_DWORD *)int buf = 136446210;
      __int16 v102 = "nw_protocol_plugin_retry_connect";
      BOOL v63 = "%{public}s called with null retry_plugin";
      goto LABEL_207;
    }
    if (!v99)
    {
      BOOL v61 = __nwlog_obj();
      os_log_type_t v62 = type;
      if (os_log_type_enabled(v61, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v102 = "nw_protocol_plugin_retry_connect";
        BOOL v63 = "%{public}s called with null retry_plugin, backtrace limit exceeded";
        goto LABEL_207;
      }
      goto LABEL_208;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v61 = __nwlog_obj();
    os_log_type_t v62 = type;
    BOOL v78 = os_log_type_enabled(v61, type);
    if (!backtrace_string)
    {
      if (v78)
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v102 = "nw_protocol_plugin_retry_connect";
        BOOL v63 = "%{public}s called with null retry_plugin, no backtrace";
        goto LABEL_207;
      }
      goto LABEL_208;
    }
    if (!v78) {
      goto LABEL_157;
    }
    *(_DWORD *)int buf = 136446466;
    __int16 v102 = "nw_protocol_plugin_retry_connect";
    __int16 v103 = 2082;
    __int16 v104 = (nw_protocol *)backtrace_string;
    char v76 = "%{public}s called with null retry_plugin, dumping backtrace:%{public}s";
LABEL_156:
    _os_log_impl(&dword_1830D4000, v61, v62, v76, buf, 0x16u);
    goto LABEL_157;
  }
  if (a2)
  {
    if (gLogDatapath)
    {
      int v64 = __nwlog_obj();
      if (os_log_type_enabled(v64, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)int buf = 136446466;
        __int16 v102 = "nw_protocol_plugin_retry_connect";
        __int16 v103 = 2048;
        __int16 v104 = a1;
        _os_log_impl(&dword_1830D4000, v64, OS_LOG_TYPE_DEBUG, "%{public}s called %p", buf, 0x16u);
      }
    }
    if (!*(void *)(v4 + 160))
    {
      if (!(*(unsigned int (**)(nw_protocol *, nw_protocol *))(v4 + 128))(a1, a2)) {
        return 1;
      }
LABEL_23:
      uint64_t output_handler = a1->output_handler;
      if (output_handler)
      {
        os_log_type_t v16 = output_handler->handle;
        if (v16 == &nw_protocol_ref_counted_handle)
        {
          callbacks = output_handler[1].callbacks;
          if (callbacks) {
            output_handler[1].callbacks = (nw_protocol_callbacks *)((char *)&callbacks->add_input_handler + 1);
          }
        }
        BOOL v18 = a1->handle;
        if (v18 == &nw_protocol_ref_counted_handle)
        {
          BOOL v19 = a1[1].callbacks;
          if (v19) {
            a1[1].callbacks = (nw_protocol_callbacks *)((char *)&v19->add_input_handler + 1);
          }
        }
        BOOL v20 = output_handler->callbacks;
        if (v20)
        {
          connect = (uint64_t (*)(nw_protocol *, nw_protocol *))v20->connect;
          if (connect)
          {
            uint64_t v22 = connect(output_handler, a1);
            if (v18 != &nw_protocol_ref_counted_handle)
            {
LABEL_34:
              if (v16 == &nw_protocol_ref_counted_handle && output_handler->handle == &nw_protocol_ref_counted_handle)
              {
                char v23 = output_handler[1].callbacks;
                if (v23)
                {
                  uint64_t v24 = (nw_protocol_callbacks *)((char *)v23 - 1);
                  output_handler[1].callbacks = v24;
                  if (!v24)
                  {
                    BOOL v25 = *(void (***)(void))output_handler[1].flow_id;
                    if (v25)
                    {
                      *(void *)output_handler[1].flow_id = 0;
                      v25[2](v25);
                      _Block_release(v25);
                    }
                    if (output_handler[1].flow_id[8])
                    {
                      uint64_t v26 = *(const void **)output_handler[1].flow_id;
                      if (v26) {
                        _Block_release(v26);
                      }
                    }
                    free(output_handler);
                  }
                }
              }
              return v22;
            }
LABEL_33:
            if (a1->handle == &nw_protocol_ref_counted_handle)
            {
              BOOL v42 = a1[1].callbacks;
              if (v42)
              {
                __int16 v43 = (nw_protocol_callbacks *)((char *)v42 - 1);
                a1[1].callbacks = v43;
                if (!v43)
                {
                  uint64_t v44 = *(void (***)(void))a1[1].flow_id;
                  if (v44)
                  {
                    *(void *)a1[1].flow_id = 0;
                    v44[2](v44);
                    _Block_release(v44);
                  }
                  if (a1[1].flow_id[8])
                  {
                    uint64_t v45 = *(const void **)a1[1].flow_id;
                    if (v45) {
                      _Block_release(v45);
                    }
                  }
                  free(a1);
                }
              }
            }
            goto LABEL_34;
          }
        }
        __nwlog_obj();
        name = output_handler->identifier->name;
        *(_DWORD *)int buf = 136446722;
        __int16 v102 = "__nw_protocol_connect";
        if (!name) {
          name = "invalid";
        }
        __int16 v103 = 2082;
        __int16 v104 = (nw_protocol *)name;
        __int16 v105 = 2048;
        uint64_t v106 = output_handler;
        os_log_type_t v66 = (char *)_os_log_send_and_compose_impl();
        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v99 = 0;
        if (__nwlog_fault(v66, &type, &v99))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            uint64_t v67 = __nwlog_obj();
            os_log_type_t v68 = type;
            if (!os_log_type_enabled(v67, type)) {
              goto LABEL_220;
            }
            uint64_t v69 = output_handler->identifier->name;
            if (!v69) {
              uint64_t v69 = "invalid";
            }
            *(_DWORD *)int buf = 136446722;
            __int16 v102 = "__nw_protocol_connect";
            __int16 v103 = 2082;
            __int16 v104 = (nw_protocol *)v69;
            __int16 v105 = 2048;
            uint64_t v106 = output_handler;
            uint64_t v70 = "%{public}s protocol %{public}s (%p) has invalid connect callback";
LABEL_219:
            _os_log_impl(&dword_1830D4000, v67, v68, v70, buf, 0x20u);
            goto LABEL_220;
          }
          if (!v99)
          {
            uint64_t v67 = __nwlog_obj();
            os_log_type_t v68 = type;
            if (!os_log_type_enabled(v67, type)) {
              goto LABEL_220;
            }
            os_log_type_t v94 = output_handler->identifier->name;
            if (!v94) {
              os_log_type_t v94 = "invalid";
            }
            *(_DWORD *)int buf = 136446722;
            __int16 v102 = "__nw_protocol_connect";
            __int16 v103 = 2082;
            __int16 v104 = (nw_protocol *)v94;
            __int16 v105 = 2048;
            uint64_t v106 = output_handler;
            uint64_t v70 = "%{public}s protocol %{public}s (%p) has invalid connect callback, backtrace limit exceeded";
            goto LABEL_219;
          }
          BOOL v86 = (char *)__nw_create_backtrace_string();
          uint64_t v67 = __nwlog_obj();
          os_log_type_t v68 = type;
          BOOL v87 = os_log_type_enabled(v67, type);
          if (!v86)
          {
            if (!v87) {
              goto LABEL_220;
            }
            char v95 = output_handler->identifier->name;
            if (!v95) {
              char v95 = "invalid";
            }
            *(_DWORD *)int buf = 136446722;
            __int16 v102 = "__nw_protocol_connect";
            __int16 v103 = 2082;
            __int16 v104 = (nw_protocol *)v95;
            __int16 v105 = 2048;
            uint64_t v106 = output_handler;
            uint64_t v70 = "%{public}s protocol %{public}s (%p) has invalid connect callback, no backtrace";
            goto LABEL_219;
          }
          if (v87)
          {
            uint64_t v88 = output_handler->identifier->name;
            if (!v88) {
              uint64_t v88 = "invalid";
            }
            *(_DWORD *)int buf = 136446978;
            __int16 v102 = "__nw_protocol_connect";
            __int16 v103 = 2082;
            __int16 v104 = (nw_protocol *)v88;
            __int16 v105 = 2048;
            uint64_t v106 = output_handler;
            __int16 v107 = 2082;
            os_log_type_t v108 = v86;
            _os_log_impl(&dword_1830D4000, v67, v68, "%{public}s protocol %{public}s (%p) has invalid connect callback, dumping backtrace:%{public}s", buf, 0x2Au);
          }
          free(v86);
        }
LABEL_220:
        if (v66) {
          free(v66);
        }
        uint64_t v22 = 0;
        if (v18 != &nw_protocol_ref_counted_handle) {
          goto LABEL_34;
        }
        goto LABEL_33;
      }
      char v98 = 0;
      BOOL v27 = a2->handle;
      if (v27 == &nw_protocol_ref_counted_handle)
      {
        BOOL v28 = a2[1].callbacks;
        if (v28) {
          a2[1].callbacks = (nw_protocol_callbacks *)((char *)&v28->add_input_handler + 1);
        }
      }
      uint64_t v29 = a1->handle;
      if (v29 == &nw_protocol_ref_counted_handle)
      {
        BOOL v30 = a1[1].callbacks;
        if (v30) {
          a1[1].callbacks = (nw_protocol_callbacks *)((char *)&v30->add_input_handler + 1);
        }
      }
      char v31 = a2->callbacks;
      if (v31)
      {
        notify = (void (*)(nw_protocol *, nw_protocol *, uint64_t, char *, uint64_t))v31->notify;
        if (notify)
        {
          notify(a2, a1, 23, &v98, 1);
LABEL_53:
          if (v29 == &nw_protocol_ref_counted_handle && a1->handle == &nw_protocol_ref_counted_handle)
          {
            char v46 = a1[1].callbacks;
            if (v46)
            {
              char v47 = (nw_protocol_callbacks *)((char *)v46 - 1);
              a1[1].callbacks = v47;
              if (!v47)
              {
                uint64_t v48 = *(void (***)(void))a1[1].flow_id;
                if (v48)
                {
                  *(void *)a1[1].flow_id = 0;
                  v48[2](v48);
                  _Block_release(v48);
                }
                if (a1[1].flow_id[8])
                {
                  uint64_t v49 = *(const void **)a1[1].flow_id;
                  if (v49) {
                    _Block_release(v49);
                  }
                }
                free(a1);
              }
            }
          }
          if (v27 == &nw_protocol_ref_counted_handle && a2->handle == &nw_protocol_ref_counted_handle)
          {
            os_log_type_t v50 = a2[1].callbacks;
            if (v50)
            {
              uint64_t v51 = (nw_protocol_callbacks *)((char *)v50 - 1);
              a2[1].callbacks = v51;
              if (!v51)
              {
                uint64_t v52 = *(void (***)(void))a2[1].flow_id;
                if (v52)
                {
                  *(void *)a2[1].flow_id = 0;
                  v52[2](v52);
                  _Block_release(v52);
                }
                if (a2[1].flow_id[8])
                {
                  uint64_t v53 = *(const void **)a2[1].flow_id;
                  if (v53) {
                    _Block_release(v53);
                  }
                }
                free(a2);
              }
            }
          }
          return 1;
        }
      }
      __nwlog_obj();
      identifier = a2->identifier;
      *(_DWORD *)int buf = 136446722;
      __int16 v102 = "__nw_protocol_notify";
      if (!identifier) {
        identifier = (nw_protocol_identifier *)"invalid";
      }
      __int16 v103 = 2082;
      __int16 v104 = (nw_protocol *)identifier;
      __int16 v105 = 2048;
      uint64_t v106 = a2;
      uint64_t v81 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v99 = 0;
      if (__nwlog_fault(v81, &type, &v99))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          os_log_type_t v82 = __nwlog_obj();
          os_log_type_t v83 = type;
          if (!os_log_type_enabled(v82, type)) {
            goto LABEL_233;
          }
          uint64_t v84 = a2->identifier;
          if (!v84) {
            uint64_t v84 = (nw_protocol_identifier *)"invalid";
          }
          *(_DWORD *)int buf = 136446722;
          __int16 v102 = "__nw_protocol_notify";
          __int16 v103 = 2082;
          __int16 v104 = (nw_protocol *)v84;
          __int16 v105 = 2048;
          uint64_t v106 = a2;
          os_log_type_t v85 = "%{public}s protocol %{public}s (%p) has invalid notify callback";
          goto LABEL_232;
        }
        if (!v99)
        {
          os_log_type_t v82 = __nwlog_obj();
          os_log_type_t v83 = type;
          if (!os_log_type_enabled(v82, type)) {
            goto LABEL_233;
          }
          BOOL v96 = a2->identifier;
          if (!v96) {
            BOOL v96 = (nw_protocol_identifier *)"invalid";
          }
          *(_DWORD *)int buf = 136446722;
          __int16 v102 = "__nw_protocol_notify";
          __int16 v103 = 2082;
          __int16 v104 = (nw_protocol *)v96;
          __int16 v105 = 2048;
          uint64_t v106 = a2;
          os_log_type_t v85 = "%{public}s protocol %{public}s (%p) has invalid notify callback, backtrace limit exceeded";
          goto LABEL_232;
        }
        BOOL v90 = (char *)__nw_create_backtrace_string();
        os_log_type_t v82 = __nwlog_obj();
        os_log_type_t v83 = type;
        BOOL v91 = os_log_type_enabled(v82, type);
        if (v90)
        {
          if (v91)
          {
            os_log_type_t v92 = a2->identifier;
            if (!v92) {
              os_log_type_t v92 = (nw_protocol_identifier *)"invalid";
            }
            *(_DWORD *)int buf = 136446978;
            __int16 v102 = "__nw_protocol_notify";
            __int16 v103 = 2082;
            __int16 v104 = (nw_protocol *)v92;
            __int16 v105 = 2048;
            uint64_t v106 = a2;
            __int16 v107 = 2082;
            os_log_type_t v108 = v90;
            _os_log_impl(&dword_1830D4000, v82, v83, "%{public}s protocol %{public}s (%p) has invalid notify callback, dumping backtrace:%{public}s", buf, 0x2Au);
          }
          free(v90);
          goto LABEL_233;
        }
        if (v91)
        {
          os_log_type_t v97 = a2->identifier;
          if (!v97) {
            os_log_type_t v97 = (nw_protocol_identifier *)"invalid";
          }
          *(_DWORD *)int buf = 136446722;
          __int16 v102 = "__nw_protocol_notify";
          __int16 v103 = 2082;
          __int16 v104 = (nw_protocol *)v97;
          __int16 v105 = 2048;
          uint64_t v106 = a2;
          os_log_type_t v85 = "%{public}s protocol %{public}s (%p) has invalid notify callback, no backtrace";
LABEL_232:
          _os_log_impl(&dword_1830D4000, v82, v83, v85, buf, 0x20u);
        }
      }
LABEL_233:
      if (v81) {
        free(v81);
      }
      goto LABEL_53;
    }
    char v98 = 1;
    uint64_t v6 = a2->handle;
    if (v6 == &nw_protocol_ref_counted_handle)
    {
      uint64_t v7 = a2[1].callbacks;
      if (v7) {
        a2[1].callbacks = (nw_protocol_callbacks *)((char *)&v7->add_input_handler + 1);
      }
    }
    uint64_t v8 = a1->handle;
    if (v8 == &nw_protocol_ref_counted_handle)
    {
      uint64_t v9 = a1[1].callbacks;
      if (v9) {
        a1[1].callbacks = (nw_protocol_callbacks *)((char *)&v9->add_input_handler + 1);
      }
    }
    os_log_type_t v10 = a2->callbacks;
    if (v10)
    {
      uint64_t v11 = (void (*)(nw_protocol *, nw_protocol *, uint64_t, char *, uint64_t))v10->notify;
      if (v11)
      {
        v11(a2, a1, 23, &v98, 1);
        goto LABEL_16;
      }
    }
    __nwlog_obj();
    __int16 v54 = a2->identifier;
    *(_DWORD *)int buf = 136446722;
    __int16 v102 = "__nw_protocol_notify";
    if (!v54) {
      __int16 v54 = (nw_protocol_identifier *)"invalid";
    }
    __int16 v103 = 2082;
    __int16 v104 = (nw_protocol *)v54;
    __int16 v105 = 2048;
    uint64_t v106 = a2;
    int v55 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v99 = 0;
    if (__nwlog_fault(v55, &type, &v99))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        BOOL v56 = __nwlog_obj();
        os_log_type_t v57 = type;
        if (!os_log_type_enabled(v56, type)) {
          goto LABEL_197;
        }
        BOOL v58 = a2->identifier;
        if (!v58) {
          BOOL v58 = (nw_protocol_identifier *)"invalid";
        }
        *(_DWORD *)int buf = 136446722;
        __int16 v102 = "__nw_protocol_notify";
        __int16 v103 = 2082;
        __int16 v104 = (nw_protocol *)v58;
        __int16 v105 = 2048;
        uint64_t v106 = a2;
        os_log_type_t v59 = "%{public}s protocol %{public}s (%p) has invalid notify callback";
        goto LABEL_196;
      }
      if (!v99)
      {
        BOOL v56 = __nwlog_obj();
        os_log_type_t v57 = type;
        if (!os_log_type_enabled(v56, type)) {
          goto LABEL_197;
        }
        os_log_type_t v89 = a2->identifier;
        if (!v89) {
          os_log_type_t v89 = (nw_protocol_identifier *)"invalid";
        }
        *(_DWORD *)int buf = 136446722;
        __int16 v102 = "__nw_protocol_notify";
        __int16 v103 = 2082;
        __int16 v104 = (nw_protocol *)v89;
        __int16 v105 = 2048;
        uint64_t v106 = a2;
        os_log_type_t v59 = "%{public}s protocol %{public}s (%p) has invalid notify callback, backtrace limit exceeded";
        goto LABEL_196;
      }
      os_log_type_t v71 = (char *)__nw_create_backtrace_string();
      BOOL v56 = __nwlog_obj();
      os_log_type_t v57 = type;
      BOOL v72 = os_log_type_enabled(v56, type);
      if (v71)
      {
        if (v72)
        {
          os_log_type_t v73 = a2->identifier;
          if (!v73) {
            os_log_type_t v73 = (nw_protocol_identifier *)"invalid";
          }
          *(_DWORD *)int buf = 136446978;
          __int16 v102 = "__nw_protocol_notify";
          __int16 v103 = 2082;
          __int16 v104 = (nw_protocol *)v73;
          __int16 v105 = 2048;
          uint64_t v106 = a2;
          __int16 v107 = 2082;
          os_log_type_t v108 = v71;
          _os_log_impl(&dword_1830D4000, v56, v57, "%{public}s protocol %{public}s (%p) has invalid notify callback, dumping backtrace:%{public}s", buf, 0x2Au);
        }
        free(v71);
        goto LABEL_197;
      }
      if (v72)
      {
        BOOL v93 = a2->identifier;
        if (!v93) {
          BOOL v93 = (nw_protocol_identifier *)"invalid";
        }
        *(_DWORD *)int buf = 136446722;
        __int16 v102 = "__nw_protocol_notify";
        __int16 v103 = 2082;
        __int16 v104 = (nw_protocol *)v93;
        __int16 v105 = 2048;
        uint64_t v106 = a2;
        os_log_type_t v59 = "%{public}s protocol %{public}s (%p) has invalid notify callback, no backtrace";
LABEL_196:
        _os_log_impl(&dword_1830D4000, v56, v57, v59, buf, 0x20u);
      }
    }
LABEL_197:
    if (v55) {
      free(v55);
    }
LABEL_16:
    if (v8 == &nw_protocol_ref_counted_handle && a1->handle == &nw_protocol_ref_counted_handle)
    {
      os_log_type_t v34 = a1[1].callbacks;
      if (v34)
      {
        char v35 = (nw_protocol_callbacks *)((char *)v34 - 1);
        a1[1].callbacks = v35;
        if (!v35)
        {
          uint64_t v36 = *(void (***)(void))a1[1].flow_id;
          if (v36)
          {
            *(void *)a1[1].flow_id = 0;
            v36[2](v36);
            _Block_release(v36);
          }
          if (a1[1].flow_id[8])
          {
            uint64_t v37 = *(const void **)a1[1].flow_id;
            if (v37) {
              _Block_release(v37);
            }
          }
          free(a1);
        }
      }
    }
    if (v6 == &nw_protocol_ref_counted_handle && a2->handle == &nw_protocol_ref_counted_handle)
    {
      os_log_type_t v38 = a2[1].callbacks;
      if (v38)
      {
        __int16 v39 = (nw_protocol_callbacks *)((char *)v38 - 1);
        a2[1].callbacks = v39;
        if (!v39)
        {
          uint64_t v40 = *(void (***)(void))a2[1].flow_id;
          if (v40)
          {
            *(void *)a2[1].flow_id = 0;
            v40[2](v40);
            _Block_release(v40);
          }
          if (a2[1].flow_id[8])
          {
            __int16 v41 = *(const void **)a2[1].flow_id;
            if (v41) {
              _Block_release(v41);
            }
          }
          free(a2);
        }
      }
    }
    uint64_t v12 = *(uint64_t (***)(void))(v4 + 160);
    char v13 = *(unsigned char *)(v4 + 168);
    *(void *)(v4 + 160) = 0;
    *(unsigned char *)(v4 + 168) = v13 | 1;
    char v14 = v12[2](v12);
    _Block_release(v12);
    if ((v14 & 1) == 0) {
      return 1;
    }
    goto LABEL_23;
  }
  __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  __int16 v102 = "nw_protocol_plugin_retry_connect";
  BOOL v60 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v99 = 0;
  if (!__nwlog_fault(v60, &type, &v99)) {
    goto LABEL_208;
  }
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v99)
    {
      BOOL v61 = __nwlog_obj();
      os_log_type_t v62 = type;
      if (os_log_type_enabled(v61, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v102 = "nw_protocol_plugin_retry_connect";
        BOOL v63 = "%{public}s called with null other_protocol, backtrace limit exceeded";
        goto LABEL_207;
      }
      goto LABEL_208;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v61 = __nwlog_obj();
    os_log_type_t v62 = type;
    BOOL v79 = os_log_type_enabled(v61, type);
    if (!backtrace_string)
    {
      if (v79)
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v102 = "nw_protocol_plugin_retry_connect";
        BOOL v63 = "%{public}s called with null other_protocol, no backtrace";
        goto LABEL_207;
      }
      goto LABEL_208;
    }
    if (v79)
    {
      *(_DWORD *)int buf = 136446466;
      __int16 v102 = "nw_protocol_plugin_retry_connect";
      __int16 v103 = 2082;
      __int16 v104 = (nw_protocol *)backtrace_string;
      char v76 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
      goto LABEL_156;
    }
LABEL_157:
    free(backtrace_string);
    goto LABEL_208;
  }
  BOOL v61 = __nwlog_obj();
  os_log_type_t v62 = type;
  if (os_log_type_enabled(v61, type))
  {
    *(_DWORD *)int buf = 136446210;
    __int16 v102 = "nw_protocol_plugin_retry_connect";
    BOOL v63 = "%{public}s called with null other_protocol";
    goto LABEL_207;
  }
LABEL_208:
  if (v60) {
    free(v60);
  }
  return 0;
}

void nw_protocol_plugin_reset_set_callbacks(uint64_t a1, uint64_t a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    BOOL v18 = "nw_protocol_plugin_reset_set_callbacks";
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v15 = 0;
    if (!__nwlog_fault(v4, &type, &v15)) {
      goto LABEL_59;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_59;
      }
      *(_DWORD *)int buf = 136446210;
      BOOL v18 = "nw_protocol_plugin_reset_set_callbacks";
      uint64_t v7 = "%{public}s called with null protocol";
LABEL_58:
      _os_log_impl(&dword_1830D4000, v5, v6, v7, buf, 0xCu);
      goto LABEL_59;
    }
    if (!v15)
    {
      uint64_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_59;
      }
      *(_DWORD *)int buf = 136446210;
      BOOL v18 = "nw_protocol_plugin_reset_set_callbacks";
      uint64_t v7 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_58;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v5 = __nwlog_obj();
    os_log_type_t v6 = type;
    BOOL v9 = os_log_type_enabled(v5, type);
    if (!backtrace_string)
    {
      if (!v9) {
        goto LABEL_59;
      }
      *(_DWORD *)int buf = 136446210;
      BOOL v18 = "nw_protocol_plugin_reset_set_callbacks";
      uint64_t v7 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_58;
    }
    if (!v9) {
      goto LABEL_35;
    }
    *(_DWORD *)int buf = 136446466;
    BOOL v18 = "nw_protocol_plugin_reset_set_callbacks";
    __int16 v19 = 2082;
    BOOL v20 = backtrace_string;
    os_log_type_t v10 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_34:
    _os_log_impl(&dword_1830D4000, v5, v6, v10, buf, 0x16u);
    goto LABEL_35;
  }
  uint64_t v2 = *(void *)(a1 + 40);
  if (!v2)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    BOOL v18 = "nw_protocol_plugin_reset_set_callbacks";
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v15 = 0;
    if (!__nwlog_fault(v4, &type, &v15)) {
      goto LABEL_59;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_59;
      }
      *(_DWORD *)int buf = 136446210;
      BOOL v18 = "nw_protocol_plugin_reset_set_callbacks";
      uint64_t v7 = "%{public}s called with null protocol->handle";
      goto LABEL_58;
    }
    if (!v15)
    {
      uint64_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_59;
      }
      *(_DWORD *)int buf = 136446210;
      BOOL v18 = "nw_protocol_plugin_reset_set_callbacks";
      uint64_t v7 = "%{public}s called with null protocol->handle, backtrace limit exceeded";
      goto LABEL_58;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v5 = __nwlog_obj();
    os_log_type_t v6 = type;
    BOOL v11 = os_log_type_enabled(v5, type);
    if (!backtrace_string)
    {
      if (!v11) {
        goto LABEL_59;
      }
      *(_DWORD *)int buf = 136446210;
      BOOL v18 = "nw_protocol_plugin_reset_set_callbacks";
      uint64_t v7 = "%{public}s called with null protocol->handle, no backtrace";
      goto LABEL_58;
    }
    if (!v11) {
      goto LABEL_35;
    }
    *(_DWORD *)int buf = 136446466;
    BOOL v18 = "nw_protocol_plugin_reset_set_callbacks";
    __int16 v19 = 2082;
    BOOL v20 = backtrace_string;
    os_log_type_t v10 = "%{public}s called with null protocol->handle, dumping backtrace:%{public}s";
    goto LABEL_34;
  }
  uint64_t v3 = *(void **)(v2 + 80);
  if (v3)
  {
    void *v3 = a2;
    if (*(void *)(a1 + 24)) {
      return;
    }
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    BOOL v18 = "nw_protocol_plugin_reset_set_callbacks";
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v15 = 0;
    if (__nwlog_fault(v4, &type, &v15))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v5 = __nwlog_obj();
        os_log_type_t v6 = type;
        if (!os_log_type_enabled(v5, type)) {
          goto LABEL_59;
        }
        *(_DWORD *)int buf = 136446210;
        BOOL v18 = "nw_protocol_plugin_reset_set_callbacks";
        uint64_t v7 = "%{public}s called with null callbacks";
        goto LABEL_58;
      }
      if (!v15)
      {
        uint64_t v5 = __nwlog_obj();
        os_log_type_t v6 = type;
        if (!os_log_type_enabled(v5, type)) {
          goto LABEL_59;
        }
        *(_DWORD *)int buf = 136446210;
        BOOL v18 = "nw_protocol_plugin_reset_set_callbacks";
        uint64_t v7 = "%{public}s called with null callbacks, backtrace limit exceeded";
        goto LABEL_58;
      }
      char v13 = (char *)__nw_create_backtrace_string();
      uint64_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      BOOL v14 = os_log_type_enabled(v5, type);
      if (!v13)
      {
        if (!v14) {
          goto LABEL_59;
        }
        *(_DWORD *)int buf = 136446210;
        BOOL v18 = "nw_protocol_plugin_reset_set_callbacks";
        uint64_t v7 = "%{public}s called with null callbacks, no backtrace";
        goto LABEL_58;
      }
      if (v14)
      {
        *(_DWORD *)int buf = 136446466;
        BOOL v18 = "nw_protocol_plugin_reset_set_callbacks";
        __int16 v19 = 2082;
        BOOL v20 = v13;
        _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s called with null callbacks, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v13);
    }
LABEL_59:
    if (v4) {
      goto LABEL_60;
    }
    return;
  }
  __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  BOOL v18 = "nw_protocol_plugin_reset_set_callbacks";
  uint64_t v4 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (!__nwlog_fault(v4, &type, &v15)) {
    goto LABEL_59;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    uint64_t v5 = __nwlog_obj();
    os_log_type_t v6 = type;
    if (!os_log_type_enabled(v5, type)) {
      goto LABEL_59;
    }
    *(_DWORD *)int buf = 136446210;
    BOOL v18 = "nw_protocol_plugin_reset_set_callbacks";
    uint64_t v7 = "%{public}s called with null reset_plugin";
    goto LABEL_58;
  }
  if (!v15)
  {
    uint64_t v5 = __nwlog_obj();
    os_log_type_t v6 = type;
    if (!os_log_type_enabled(v5, type)) {
      goto LABEL_59;
    }
    *(_DWORD *)int buf = 136446210;
    BOOL v18 = "nw_protocol_plugin_reset_set_callbacks";
    uint64_t v7 = "%{public}s called with null reset_plugin, backtrace limit exceeded";
    goto LABEL_58;
  }
  backtrace_string = (char *)__nw_create_backtrace_string();
  uint64_t v5 = __nwlog_obj();
  os_log_type_t v6 = type;
  BOOL v12 = os_log_type_enabled(v5, type);
  if (!backtrace_string)
  {
    if (!v12) {
      goto LABEL_59;
    }
    *(_DWORD *)int buf = 136446210;
    BOOL v18 = "nw_protocol_plugin_reset_set_callbacks";
    uint64_t v7 = "%{public}s called with null reset_plugin, no backtrace";
    goto LABEL_58;
  }
  if (v12)
  {
    *(_DWORD *)int buf = 136446466;
    BOOL v18 = "nw_protocol_plugin_reset_set_callbacks";
    __int16 v19 = 2082;
    BOOL v20 = backtrace_string;
    os_log_type_t v10 = "%{public}s called with null reset_plugin, dumping backtrace:%{public}s";
    goto LABEL_34;
  }
LABEL_35:
  free(backtrace_string);
  if (v4) {
LABEL_60:
  }
    free(v4);
}

nw_protocol_definition_t nw_protocol_copy_ws_definition(void)
{
  if (nw_protocol_copy_ws_definition::onceToken != -1) {
    dispatch_once(&nw_protocol_copy_ws_definition::onceToken, &__block_literal_global_3583);
  }
  xpc_object_t v0 = (void *)nw_protocol_copy_ws_definition::definition;

  return (nw_protocol_definition_t)v0;
}

void __nw_protocol_copy_ws_definition_block_invoke()
{
  nw_protocol_definition_t definition = nw_framer_create_definition("WebSocket", 0, &__block_literal_global_8);
  id v1 = (void *)nw_protocol_copy_ws_definition::definition;
  nw_protocol_copy_ws_definition::nw_protocol_definition_t definition = (uint64_t)definition;

  nw_protocol_definition_set_options_allocator((void *)nw_protocol_copy_ws_definition::definition, (uint64_t)nw_ws_allocate_options, (uint64_t)nw_ws_copy_options, (uint64_t)nw_ws_deallocate_options);
  uint64_t v2 = (void *)nw_protocol_copy_ws_definition::definition;

  nw_protocol_definition_set_options_equality_check(v2, (uint64_t)nw_ws_option_is_equal);
}

uint64_t __nw_protocol_copy_ws_definition_block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v73 = *MEMORY[0x1E4F143B8];
  uint64_t v47 = 0;
  uint64_t v48 = &v47;
  uint64_t v49 = 0x16812000000;
  os_log_type_t v50 = __Block_byref_object_copy__3587;
  uint64_t v51 = __Block_byref_object_dispose__3588;
  uint64_t v52 = "!0!2/\x130";
  long long v53 = 0u;
  long long v54 = 0u;
  long long v55 = 0u;
  long long v56 = 0u;
  long long v57 = 0u;
  long long v58 = 0u;
  long long v59 = 0u;
  long long v60 = 0u;
  long long v61 = 0u;
  long long v62 = 0u;
  long long v63 = 0u;
  long long v64 = 0u;
  long long v65 = 0u;
  long long v66 = 0u;
  memset(v67, 0, 87);
  uint64_t v2 = a2;
  if (v2)
  {
    BOOL v3 = nw_array_create();
    uint64_t v4 = (void *)*((void *)&v56 + 1);
    *((void *)&v56 + 1) = v3;

    nw_protocol_options_t v5 = nw_framer_copy_options(v2);
    nw_protocol_options_get_log_id_str(v5, &v67[3], 84);
    HIWORD(v66) = 0;
    v67[0] = 0;
    uint64_t async_block = 0;
    p_uint64_t async_block = (uint64_t)&async_block;
    uint64_t v43 = 0x2020000000;
    LOBYTE(v44) = 0;
    *(void *)applier = MEMORY[0x1E4F143A8];
    *(void *)&applier[8] = 3221225472;
    *(void *)&applier[16] = ___ZL18nw_ws_create_stateP13nw_ws_state_tPU23objcproto12OS_nw_framer8NSObject_block_invoke;
    uint64_t v69 = &unk_1E52490E8;
    BOOL v72 = &v53;
    uint64_t v70 = v2;
    os_log_type_t v71 = &async_block;
    nw_protocol_options_access_handle(v5, applier);
    BOOL v6 = *(unsigned char *)(p_async_block + 24) == 0;

    _Block_object_dispose(&async_block, 8);
    if (v6) {
      uint64_t v7 = 2;
    }
    else {
      uint64_t v7 = 1;
    }
    goto LABEL_5;
  }
  os_log_type_t v16 = __nwlog_obj();
  *(_DWORD *)applier = 136446210;
  *(void *)&applier[4] = "nw_ws_create_state";
  BOOL v17 = (char *)_os_log_send_and_compose_impl();

  LOBYTE(async_block) = 16;
  char v46 = 0;
  if (__nwlog_fault(v17, &async_block, &v46))
  {
    if (async_block == 17)
    {
      BOOL v18 = __nwlog_obj();
      os_log_type_t v19 = async_block;
      if (os_log_type_enabled(v18, (os_log_type_t)async_block))
      {
        *(_DWORD *)applier = 136446210;
        *(void *)&applier[4] = "nw_ws_create_state";
        _os_log_impl(&dword_1830D4000, v18, v19, "%{public}s called with null framer", applier, 0xCu);
      }
    }
    else if (v46)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v18 = __nwlog_obj();
      os_log_type_t v25 = async_block;
      BOOL v26 = os_log_type_enabled(v18, (os_log_type_t)async_block);
      if (backtrace_string)
      {
        if (v26)
        {
          *(_DWORD *)applier = 136446466;
          *(void *)&applier[4] = "nw_ws_create_state";
          *(_WORD *)&applier[12] = 2082;
          *(void *)&applier[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v18, v25, "%{public}s called with null framer, dumping backtrace:%{public}s", applier, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_36;
      }
      if (v26)
      {
        *(_DWORD *)applier = 136446210;
        *(void *)&applier[4] = "nw_ws_create_state";
        _os_log_impl(&dword_1830D4000, v18, v25, "%{public}s called with null framer, no backtrace", applier, 0xCu);
      }
    }
    else
    {
      BOOL v18 = __nwlog_obj();
      os_log_type_t v30 = async_block;
      if (os_log_type_enabled(v18, (os_log_type_t)async_block))
      {
        *(_DWORD *)applier = 136446210;
        *(void *)&applier[4] = "nw_ws_create_state";
        _os_log_impl(&dword_1830D4000, v18, v30, "%{public}s called with null framer, backtrace limit exceeded", applier, 0xCu);
      }
    }
  }
LABEL_36:
  if (v17) {
    free(v17);
  }
  uint64_t v7 = 2;
LABEL_5:

  input_handler[0] = MEMORY[0x1E4F143A8];
  input_handler[1] = 3221225472;
  input_handler[2] = __nw_protocol_copy_ws_definition_block_invoke_9;
  input_handler[3] = &unk_1E52444E0;
  uint64_t v40 = &v47;
  uint64_t v8 = v2;
  __int16 v39 = v8;
  nw_framer_set_input_handler(v8, input_handler);
  output_handler[0] = MEMORY[0x1E4F143A8];
  output_handler[1] = 3221225472;
  output_handler[2] = __nw_protocol_copy_ws_definition_block_invoke_33;
  output_handler[3] = &unk_1E5244530;
  uint64_t v37 = &v47;
  BOOL v9 = v8;
  uint64_t v36 = v9;
  nw_framer_set_output_handler(v9, output_handler);
  stop_handler[0] = MEMORY[0x1E4F143A8];
  stop_handler[1] = 3221225472;
  stop_handler[2] = __nw_protocol_copy_ws_definition_block_invoke_36;
  stop_handler[3] = &unk_1E523AF50;
  stop_void handler[4] = &v47;
  nw_framer_set_stop_handler(v9, stop_handler);
  cleanup_handler[0] = MEMORY[0x1E4F143A8];
  cleanup_handler[1] = 3221225472;
  cleanup_handler[2] = __nw_protocol_copy_ws_definition_block_invoke_40;
  cleanup_handler[3] = &unk_1E5244558;
  cleanup_void handler[4] = &v47;
  nw_framer_set_cleanup_handler(v9, cleanup_handler);
  v32[0] = MEMORY[0x1E4F143A8];
  v32[1] = 3221225472;
  v32[2] = __nw_protocol_copy_ws_definition_block_invoke_2_42;
  v32[3] = &unk_1E523AF78;
  void v32[4] = &v47;
  nw_framer_set_copy_metadata(v9, v32);
  os_log_type_t v10 = (void *)v48[11];
  if (v10)
  {
    BOOL v11 = v9;
    BOOL v12 = v10;
    if (v2)
    {
      *(void *)applier = MEMORY[0x1E4F143A8];
      *(void *)&applier[8] = 3221225472;
      *(void *)&applier[16] = __nw_framer_trigger_input_block_invoke;
      uint64_t v69 = &unk_1E523DE00;
      char v13 = v11;
      uint64_t v70 = v13;
      dispatch_data_apply(v12, applier);
      uint64_t async_block = MEMORY[0x1E4F143A8];
      p_uint64_t async_block = 3221225472;
      uint64_t v43 = (uint64_t)__nw_framer_trigger_input_block_invoke_2;
      uint64_t v44 = &unk_1E524BAA8;
      uint64_t v45 = v13;
      nw_framer_async(v45, &async_block);

LABEL_8:
      BOOL v14 = (void *)v48[11];
      v48[11] = 0;

      goto LABEL_9;
    }
    BOOL v20 = __nwlog_obj();
    *(_DWORD *)applier = 136446210;
    *(void *)&applier[4] = "nw_framer_trigger_input";
    uint64_t v21 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(async_block) = 16;
    char v46 = 0;
    if (__nwlog_fault(v21, &async_block, &v46))
    {
      if (async_block == 17)
      {
        uint64_t v22 = __nwlog_obj();
        os_log_type_t v23 = async_block;
        if (os_log_type_enabled(v22, (os_log_type_t)async_block))
        {
          *(_DWORD *)applier = 136446210;
          *(void *)&applier[4] = "nw_framer_trigger_input";
          _os_log_impl(&dword_1830D4000, v22, v23, "%{public}s called with null framer", applier, 0xCu);
        }
      }
      else if (v46)
      {
        BOOL v27 = (char *)__nw_create_backtrace_string();
        uint64_t v22 = __nwlog_obj();
        os_log_type_t v28 = async_block;
        BOOL v29 = os_log_type_enabled(v22, (os_log_type_t)async_block);
        if (v27)
        {
          if (v29)
          {
            *(_DWORD *)applier = 136446466;
            *(void *)&applier[4] = "nw_framer_trigger_input";
            *(_WORD *)&applier[12] = 2082;
            *(void *)&applier[14] = v27;
            _os_log_impl(&dword_1830D4000, v22, v28, "%{public}s called with null framer, dumping backtrace:%{public}s", applier, 0x16u);
          }

          free(v27);
          goto LABEL_45;
        }
        if (v29)
        {
          *(_DWORD *)applier = 136446210;
          *(void *)&applier[4] = "nw_framer_trigger_input";
          _os_log_impl(&dword_1830D4000, v22, v28, "%{public}s called with null framer, no backtrace", applier, 0xCu);
        }
      }
      else
      {
        uint64_t v22 = __nwlog_obj();
        os_log_type_t v31 = async_block;
        if (os_log_type_enabled(v22, (os_log_type_t)async_block))
        {
          *(_DWORD *)applier = 136446210;
          *(void *)&applier[4] = "nw_framer_trigger_input";
          _os_log_impl(&dword_1830D4000, v22, v31, "%{public}s called with null framer, backtrace limit exceeded", applier, 0xCu);
        }
      }
    }
LABEL_45:
    if (v21) {
      free(v21);
    }
    goto LABEL_8;
  }
LABEL_9:

  _Block_object_dispose(&v47, 8);
  return v7;
}

void sub_183658E38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,char a46)
{
  _Block_object_dispose(&a46, 8);
  nw_ws_state_t::~nw_ws_state_t(v46);

  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__3587(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  uint64_t v2 = *(void *)(a2 + 64);
  *(void *)(a2 + 64) = 0;
  *(void *)(a1 + 64) = v2;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  long long v3 = *(_OWORD *)(a2 + 88);
  *(void *)(a2 + 88) = 0;
  *(void *)(a2 + 96) = 0;
  *(_OWORD *)(a1 + 88) = v3;
  uint64_t v4 = *(void *)(a2 + 104);
  *(void *)(a2 + 104) = 0;
  *(void *)(a1 + 104) = v4;
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  long long v5 = *(_OWORD *)(a2 + 128);
  long long v6 = *(_OWORD *)(a2 + 144);
  long long v7 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v7;
  *(_OWORD *)(a1 + 128) = v5;
  *(_OWORD *)(a1 + 144) = v6;
  long long v8 = *(_OWORD *)(a2 + 192);
  long long v9 = *(_OWORD *)(a2 + 208);
  long long v10 = *(_OWORD *)(a2 + 224);
  *(_DWORD *)(a1 + 240) = *(_DWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 208) = v9;
  *(_OWORD *)(a1 + 224) = v10;
  *(_OWORD *)(a1 + 192) = v8;
  uint64_t v11 = *(void *)(a2 + 244);
  *(void *)(a2 + 244) = 0;
  *(void *)(a1 + 244) = v11;
  long long v12 = *(_OWORD *)(a2 + 252);
  long long v13 = *(_OWORD *)(a2 + 268);
  *(_OWORD *)(a1 + 284) = *(_OWORD *)(a2 + 284);
  *(_OWORD *)(a1 + 268) = v13;
  *(_OWORD *)(a1 + 252) = v12;
  __n128 result = *(__n128 *)(a2 + 300);
  long long v15 = *(_OWORD *)(a2 + 316);
  long long v16 = *(_OWORD *)(a2 + 332);
  *(_OWORD *)(a1 + 343) = *(_OWORD *)(a2 + 343);
  *(_OWORD *)(a1 + 316) = v15;
  *(_OWORD *)(a1 + 332) = v16;
  *(__n128 *)(a1 + 300) = result;
  return result;
}

void __Block_byref_object_dispose__3588(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 64);
}

uint64_t ___ZL18nw_ws_create_stateP13nw_ws_state_tPU23objcproto12OS_nw_framer8NSObject_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 48);
  *(void *)(v4 + 96) = *(void *)(a2 + 32);
  *(_WORD *)(v4 + 225) = *(_WORD *)(v4 + 225) & 0xFFFE | ((*(unsigned char *)(a2 + 70) & 4) != 0);
  nw_parameters_t v5 = nw_framer_copy_parameters(*(nw_framer_t *)(a1 + 32));
  if (nw_parameters_get_server_mode(v5)) {
    __int16 v6 = 4;
  }
  else {
    __int16 v6 = 0;
  }
  *(_WORD *)(*(void *)(a1 + 48) + 225) = *(_WORD *)(*(void *)(a1 + 48) + 225) & 0xFFFB | v6;

  uint64_t v7 = *(void *)(a1 + 48);
  *(_DWORD *)(v7 + 176) = -1;
  *(void *)(v7 + 168) = -1;
  *(_WORD *)(v7 + 225) = *(_WORD *)(v7 + 225) & 0xFFBF | (8 * *(unsigned __int8 *)(a2 + 70)) & 0x40;
  *(_WORD *)(*(void *)(a1 + 48) + 225) = *(_WORD *)(*(void *)(a1 + 48) + 225) & 0xFF7F | (8
                                                                                                * *(unsigned __int8 *)(a2 + 70)) & 0x80;
  *(_WORD *)(*(void *)(a1 + 48) + 225) = *(_WORD *)(*(void *)(a1 + 48) + 225) & 0xFEFF | (((*(unsigned char *)(a2 + 70) & 0x20) != 0) << 8);
  uint64_t v8 = *(void *)(a1 + 48);
  *(_WORD *)(v8 + 220) = *(_WORD *)(a2 + 68);
  *(void *)(v8 + 152) = *(unsigned int *)(a2 + 64);
  *(void *)(v8 + 72) = 0;
  *(void *)(*(void *)(a1 + 48) + 80) = 0;
  *(void *)(*(void *)(a1 + 48) + 64) = 0;
  uint64_t v9 = *(void *)(a1 + 48);
  *(void *)(v9 + 144) = *(unsigned int *)(a2 + 60);
  *(_WORD *)(v9 + 225) &= ~0x200u;
  *(_WORD *)(*(void *)(a1 + 48) + 225) &= ~0x400u;
  *(_WORD *)(*(void *)(a1 + 48) + 225) &= ~0x800u;
  uint64_t v10 = *(void *)(a1 + 48);
  *(_DWORD *)(v10 + 212) = 0;
  if ((*(unsigned char *)(a2 + 70) & 2) == 0)
  {
    *(_DWORD *)(v10 + 180) = 1;
    *(_DWORD *)(v10 + 188) = 1;
    if (gLogDatapath)
    {
      __int16 v39 = __nwlog_obj();
      if (os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v40 = *(void *)(a1 + 48);
        if (v40) {
          __int16 v41 = (const char *)(v40 + 227);
        }
        else {
          __int16 v41 = "";
        }
        *(_DWORD *)url = 136446466;
        *(void *)&url[4] = "nw_ws_create_state_block_invoke";
        __int16 v48 = 2082;
        uint64_t v49 = v41;
        _os_log_impl(&dword_1830D4000, v39, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s don't skip handshake", url, 0x16u);
      }
    }
    uint64_t v11 = nw_framer_copy_parameters(*(nw_framer_t *)(a1 + 32));
    long long v12 = nw_parameters_copy_url_endpoint(v11);
    uint64_t v13 = *(void *)(a1 + 48);
    if ((*(_WORD *)(v13 + 225) & 4) != 0) {
      goto LABEL_10;
    }
    if (!v12)
    {
      nw_endpoint_t v23 = nw_framer_copy_remote_endpoint(*(nw_framer_t *)(a1 + 32));
      if (!v23) {
        goto LABEL_25;
      }
      uint64_t v24 = 0;
      do
      {
        os_log_type_t v25 = v23;
        int v26 = [v25 type];

        if (v26 == 2)
        {
          BOOL v27 = v25;

          uint64_t v24 = v27;
        }
        os_log_type_t v28 = v25;
        nw_endpoint_t v23 = (nw_endpoint_t)v28[14];
      }
      while (v23);
      if (!v24) {
        goto LABEL_25;
      }
      *(void *)url = 0;
      BOOL v29 = v24;
      os_log_type_t v30 = (const char *)[v29 hostname];

      os_log_type_t v31 = v29;
      unsigned int v32 = [v31 port];

      asprintf((char **)url, "ws://%s:%d", v30, __rev16(v32));
      long long v12 = nw_endpoint_create_url(*(const char **)url);
      if (*(void *)url) {
        free(*(void **)url);
      }

      if (!v12)
      {
LABEL_25:
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v33 = (id)gLogObj;
        if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
        {
          uint64_t v34 = *(void *)(a1 + 48);
          if (v34) {
            char v35 = (const char *)(v34 + 227);
          }
          else {
            char v35 = "";
          }
          *(_DWORD *)url = 136446466;
          *(void *)&url[4] = "nw_ws_create_state_block_invoke";
          __int16 v48 = 2082;
          uint64_t v49 = v35;
          _os_log_impl(&dword_1830D4000, v33, OS_LOG_TYPE_ERROR, "%{public}s %{public}s unable to create url endpoint", url, 0x16u);
        }

        nw_framer_mark_failed_with_error(*(nw_framer_t *)(a1 + 32), 53);
        long long v12 = 0;
        goto LABEL_37;
      }
      uint64_t v13 = *(void *)(a1 + 48);
    }
    CFDataRef client_request = nw_ws_create_client_request(v13, *(void **)(a1 + 32), v12);
    CFDataRef v15 = client_request;
    if (client_request)
    {
      long long v16 = *(NSObject **)(a1 + 32);
      BytePtr = CFDataGetBytePtr(client_request);
      CFIndex Length = CFDataGetLength(v15);
      nw_framer_write_output(v16, BytePtr, Length);
      CFRelease(v15);
      if (gLogDatapath)
      {
        uint64_t v44 = __nwlog_obj();
        if (os_log_type_enabled(v44, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v45 = *(void *)(a1 + 48);
          if (v45) {
            char v46 = (const char *)(v45 + 227);
          }
          else {
            char v46 = "";
          }
          *(_DWORD *)url = 136446466;
          *(void *)&url[4] = "nw_ws_create_state_block_invoke";
          __int16 v48 = 2082;
          uint64_t v49 = v46;
          _os_log_impl(&dword_1830D4000, v44, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s sent handshake request", url, 0x16u);
        }
      }
LABEL_10:

      goto LABEL_11;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v36 = (id)gLogObj;
    if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
    {
      uint64_t v37 = *(void *)(a1 + 48);
      if (v37) {
        os_log_type_t v38 = (const char *)(v37 + 227);
      }
      else {
        os_log_type_t v38 = "";
      }
      *(_DWORD *)url = 136446466;
      *(void *)&url[4] = "nw_ws_create_state_block_invoke";
      __int16 v48 = 2082;
      uint64_t v49 = v38;
      _os_log_impl(&dword_1830D4000, v36, OS_LOG_TYPE_ERROR, "%{public}s %{public}s create_client_request failed", url, 0x16u);
    }

    nw_framer_mark_failed_with_error(*(nw_framer_t *)(a1 + 32), 53);
LABEL_37:

    uint64_t v21 = 0;
    goto LABEL_14;
  }
  *(_DWORD *)(v10 + 180) = 2;
  *(_DWORD *)(v10 + 188) = 2;
  if (!gLogDatapath) {
    goto LABEL_13;
  }
  uint64_t v11 = __nwlog_obj();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v42 = *(void *)(a1 + 48);
    if (v42) {
      uint64_t v43 = (const char *)(v42 + 227);
    }
    else {
      uint64_t v43 = "";
    }
    *(_DWORD *)url = 136446466;
    *(void *)&url[4] = "nw_ws_create_state_block_invoke";
    __int16 v48 = 2082;
    uint64_t v49 = v43;
    _os_log_impl(&dword_1830D4000, v11, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s skip handshake", url, 0x16u);
  }
LABEL_11:

  uint64_t v10 = *(void *)(a1 + 48);
LABEL_13:
  BOOL v20 = *(void **)(a2 + 24);
  uint64_t v19 = a2 + 24;
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = (*(unsigned char *)(v19 + 46) & 2) != 0;
  objc_storeStrong((id *)(v10 + 40), v20);
  uint64_t v11 = *(NSObject **)v19;
  *(void *)uint64_t v19 = 0;
  uint64_t v21 = 1;
LABEL_14:

  return v21;
}

void sub_1836595F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL __nw_protocol_copy_ws_definition_block_invoke_9(uint64_t a1, void *a2)
{
  uint64_t v155 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = *(void *)(v4 + 8);
  __int16 v6 = *(_WORD *)(v5 + 273);
  id v129 = v3;
  if ((v6 & 0x10) != 0)
  {
    os_log_type_t v114 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_copy_ws_definition_block_invoke";
    __int16 v115 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    v146[0] = 0;
    if (__nwlog_fault(v115, type, v146))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        uint64_t v116 = __nwlog_obj();
        os_log_type_t v117 = type[0];
        if (os_log_type_enabled(v116, type[0]))
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_copy_ws_definition_block_invoke";
          _os_log_impl(&dword_1830D4000, v116, v117, "%{public}s ws.input: the websocket state has been destroyed, not handling input", buf, 0xCu);
        }
      }
      else if (v146[0])
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        uint64_t v116 = __nwlog_obj();
        os_log_type_t v119 = type[0];
        BOOL v120 = os_log_type_enabled(v116, type[0]);
        if (backtrace_string)
        {
          if (v120)
          {
            *(_DWORD *)int buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_protocol_copy_ws_definition_block_invoke";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = backtrace_string;
            _os_log_impl(&dword_1830D4000, v116, v119, "%{public}s ws.input: the websocket state has been destroyed, not handling input, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_165;
        }
        if (v120)
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_copy_ws_definition_block_invoke";
          _os_log_impl(&dword_1830D4000, v116, v119, "%{public}s ws.input: the websocket state has been destroyed, not handling input, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        uint64_t v116 = __nwlog_obj();
        os_log_type_t v121 = type[0];
        if (os_log_type_enabled(v116, type[0]))
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_copy_ws_definition_block_invoke";
          _os_log_impl(&dword_1830D4000, v116, v121, "%{public}s ws.input: the websocket state has been destroyed, not handling input, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_165:
    if (v115) {
      free(v115);
    }
    goto LABEL_7;
  }
  int v7 = *(_DWORD *)(v5 + 228);
  uint64_t v131 = a1;
  if (v7 != 1)
  {
    if (!v7)
    {
      nw_framer_mark_failed_with_error(*(nw_framer_t *)(a1 + 32), 100);
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v8 = (id)gLogObj;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        uint64_t v9 = *(void *)(*(void *)(a1 + 40) + 8) + 275;
        *(_DWORD *)int buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_copy_ws_definition_block_invoke";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v9;
        _os_log_impl(&dword_1830D4000, v8, OS_LOG_TYPE_ERROR, "%{public}s %{public}s input The protocol should not be in the invalid state here", buf, 0x16u);
      }
LABEL_6:

      goto LABEL_7;
    }
    goto LABEL_31;
  }
  if ((v6 & 2) != 0)
  {
    uint64_t v10 = 2;
    goto LABEL_140;
  }
  if (!*(void *)(v5 + 72))
  {
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 72) = CFHTTPMessageCreateEmpty((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (v6 & 4) != 0);
    uint64_t v4 = *(void *)(a1 + 40);
    if (!*(void *)(*(void *)(v4 + 8) + 72))
    {
      nw_framer_mark_failed_with_error(*(nw_framer_t *)(a1 + 32), 12);
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v8 = (id)gLogObj;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        uint64_t v15 = *(void *)(*(void *)(a1 + 40) + 8) + 275;
        *(_DWORD *)int buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_copy_ws_definition_block_invoke";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v15;
        _os_log_impl(&dword_1830D4000, v8, OS_LOG_TYPE_ERROR, "%{public}s %{public}s CFHTTPMessageCreateEmpty", buf, 0x16u);
      }
      goto LABEL_6;
    }
  }
  *(void *)int buf = 0;
  *(void *)&buf[8] = buf;
  *(void *)&buf[16] = 0x2020000000;
  v153[0] = 0;
  *(void *)os_log_type_t type = 0;
  int v143 = type;
  uint64_t v144 = 0x2020000000;
  uint64_t v145 = 0;
  uint64_t v11 = *(void **)(a1 + 32);
  parse[0] = MEMORY[0x1E4F143A8];
  parse[1] = 3221225472;
  parse[2] = __nw_protocol_copy_ws_definition_block_invoke_10;
  parse[3] = &unk_1E523AEB8;
  uint64_t v139 = v4;
  BOOL v138 = v11;
  os_log_type_t v140 = type;
  BOOL v141 = buf;
  nw_framer_parse_input(v138, 1uLL, 0xFFFFFFFFuLL, 0, parse);
  if (!*(unsigned char *)(*(void *)&buf[8] + 24))
  {
    BOOL v13 = 0;
    uint64_t v130 = 1;
    goto LABEL_30;
  }
  uint64_t v12 = *(void *)(*(void *)(a1 + 40) + 8) + 48;
  if ((*(_WORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 273) & 4) != 0)
  {
    if (nw_ws_validate_client_request(v12, *(void **)(a1 + 32)))
    {
      BOOL v14 = (_WORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 273);
      *v14 |= 2u;
      nw_ws_present_request_to_user(*(void *)(*(void *)(a1 + 40) + 8) + 48, *(void **)(a1 + 32));
      BOOL v13 = 0;
LABEL_20:
      uint64_t v130 = 2;
      goto LABEL_30;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    long long v16 = (id)gLogObj;
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      uint64_t v19 = *(void *)(*(void *)(a1 + 40) + 8) + 275;
      *(_DWORD *)os_log_type_t v146 = 136446466;
      BOOL v147 = "nw_protocol_copy_ws_definition_block_invoke";
      __int16 v148 = 2082;
      uint64_t v149 = v19;
      BOOL v18 = "%{public}s %{public}s nw_ws_validate_client request";
      goto LABEL_28;
    }
  }
  else
  {
    if (nw_ws_validate_server_response(v12))
    {
      if (gLogDatapath)
      {
        char v126 = __nwlog_obj();
        if (os_log_type_enabled(v126, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v127 = *(void *)(*(void *)(a1 + 40) + 8) + 275;
          if ((*(_WORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 273) & 4) != 0) {
            BOOL v128 = "server";
          }
          else {
            BOOL v128 = "client";
          }
          *(_DWORD *)os_log_type_t v146 = 136446722;
          BOOL v147 = "nw_protocol_copy_ws_definition_block_invoke";
          __int16 v148 = 2082;
          uint64_t v149 = v127;
          __int16 v150 = 2082;
          v151 = v128;
          _os_log_impl(&dword_1830D4000, v126, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s %{public}s handshake complete", v146, 0x20u);
        }
      }
      *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 228) = 2;
      *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 236) = 2;
      nw_framer_mark_ready(*(nw_framer_t *)(a1 + 32));
      BOOL v13 = *((void *)v143 + 3) != 0;
      goto LABEL_20;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    long long v16 = (id)gLogObj;
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      uint64_t v17 = *(void *)(*(void *)(a1 + 40) + 8) + 275;
      *(_DWORD *)os_log_type_t v146 = 136446466;
      BOOL v147 = "nw_protocol_copy_ws_definition_block_invoke";
      __int16 v148 = 2082;
      uint64_t v149 = v17;
      BOOL v18 = "%{public}s %{public}s nw_ws_validate_server_response";
LABEL_28:
      _os_log_impl(&dword_1830D4000, v16, OS_LOG_TYPE_ERROR, v18, v146, 0x16u);
    }
  }

  nw_framer_mark_failed_with_error(*(nw_framer_t *)(a1 + 32), 53);
  BOOL v13 = 0;
  uint64_t v130 = 0;
LABEL_30:

  _Block_object_dispose(type, 8);
  _Block_object_dispose(buf, 8);
  if (!v13) {
    goto LABEL_141;
  }
LABEL_31:
  uint64_t v130 = 2;
  while (1)
  {
    uint64_t v21 = *(void *)(a1 + 40);
    uint64_t v22 = *(void *)(v21 + 8);
    int v23 = *(_DWORD *)(v22 + 228);
    if (v23 != 2) {
      goto LABEL_39;
    }
    if (gLogDatapath)
    {
      uint64_t v69 = __nwlog_obj();
      if (os_log_type_enabled(v69, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v70 = *(void *)(*(void *)(a1 + 40) + 8) + 275;
        *(_DWORD *)int buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_copy_ws_definition_block_invoke";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v70;
        _os_log_impl(&dword_1830D4000, v69, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s input nw_ws_parse_state_header", buf, 0x16u);
      }

      uint64_t v22 = *(void *)(*(void *)(a1 + 40) + 8);
    }
    if (!nw_framer_parse_input(*(nw_framer_t *)(a1 + 32), 2uLL, 2uLL, (uint8_t *)(v22 + 264), &__block_literal_global_16_3678))goto LABEL_141; {
    *(_WORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 264) = bswap32(*(unsigned __int16 *)(*(void *)(*(void *)(a1 + 40) + 8)
    }
                                                                                              + 264)) >> 16;
    *(_WORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 273) = *(_WORD *)(*(void *)(*(void *)(a1 + 40) + 8)
                                                                           + 273) & 0xFDFF | (*(_WORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 264) >> 5) & 0x200;
    uint64_t v24 = *(void *)(*(void *)(a1 + 40) + 8);
    if ((*(_WORD *)(v24 + 264) & 0x3000) != 0) {
      break;
    }
    *(_WORD *)(v24 + 273) = *(_WORD *)(v24 + 273) & 0xFFF7 | (*(_WORD *)(v24 + 264) >> 12) & 8;
    *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 232) = *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8)
                                                                            + 265) & 0xF;
    uint64_t v25 = *(void *)(*(void *)(a1 + 40) + 8);
    char v26 = nw_ws_validate_frame((nw_ws_state_t *)(v25 + 48), (*(unsigned __int16 *)(v25 + 273) >> 3) & 1, (*(unsigned __int16 *)(v25 + 273) >> 9) & 1, *(_DWORD *)(v25 + 232), (*(unsigned __int16 *)(v25 + 264) >> 7) & 1, *(_WORD *)(v25 + 264) & 0x7F, 1);
    uint64_t v27 = *(void *)(*(void *)(a1 + 40) + 8);
    if ((v26 & 1) == 0)
    {
      nw_ws_write_header(v27 + 48, *(void **)(a1 + 32), 8, 0x3EAu, 0, 0, 1);
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v94 = (id)gLogObj;
      if (os_log_type_enabled(v94, OS_LOG_TYPE_ERROR))
      {
        uint64_t v96 = *(void *)(*(void *)(a1 + 40) + 8) + 275;
        *(_DWORD *)int buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_copy_ws_definition_block_invoke";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v96;
        _os_log_impl(&dword_1830D4000, v94, OS_LOG_TYPE_ERROR, "%{public}s %{public}s input nw_ws_validate_server_response", buf, 0x16u);
      }
      goto LABEL_127;
    }
    *(_DWORD *)(v27 + 228) = 3;
    uint64_t v21 = *(void *)(a1 + 40);
    int v23 = *(_DWORD *)(*(void *)(v21 + 8) + 228);
LABEL_39:
    if (v23 == 3)
    {
      if (gLogDatapath)
      {
        os_log_type_t v71 = __nwlog_obj();
        if (os_log_type_enabled(v71, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v72 = *(void *)(*(void *)(a1 + 40) + 8) + 275;
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_copy_ws_definition_block_invoke";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v72;
          _os_log_impl(&dword_1830D4000, v71, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s input nw_ws_parse_state_payload_length", buf, 0x16u);
        }

        uint64_t v21 = *(void *)(a1 + 40);
      }
      *(void *)(*(void *)(v21 + 8) + 160) = 0;
      uint64_t v28 = *(void *)(*(void *)(a1 + 40) + 8);
      uint64_t v29 = *(_WORD *)(v28 + 264) & 0x7F;
      if (v29 == 126)
      {
        if (!nw_framer_parse_input(*(nw_framer_t *)(a1 + 32), 2uLL, 2uLL, (uint8_t *)(v28 + 266), &__block_literal_global_23_3684))goto LABEL_141; {
        *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 160) = bswap32(*(unsigned __int16 *)(*(void *)(*(void *)(a1 + 40) + 8) + 266)) >> 16;
        }
        if (*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 160) < 0x7EuLL)
        {
          char v98 = __nwlog_obj();
          if (os_log_type_enabled(v98, OS_LOG_TYPE_ERROR))
          {
            uint64_t v111 = *(void *)(*(void *)(a1 + 40) + 8);
            uint64_t v112 = v111 + 275;
            uint64_t v113 = *(void *)(v111 + 160);
            *(_DWORD *)int buf = 136446722;
            *(void *)&uint8_t buf[4] = "nw_protocol_copy_ws_definition_block_invoke";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v112;
            *(_WORD *)&unsigned char buf[22] = 2048;
            *(void *)__int16 v153 = v113;
            os_log_type_t v108 = "%{public}s %{public}s expected a payload length of greater than 125, but received %zu";
            uint64_t v109 = v98;
            uint32_t v110 = 32;
LABEL_146:
            _os_log_impl(&dword_1830D4000, v109, OS_LOG_TYPE_ERROR, v108, buf, v110);
          }
LABEL_147:
          int v104 = 100;
          goto LABEL_148;
        }
        if (!gLogDatapath) {
          goto LABEL_54;
        }
        os_log_type_t v30 = __nwlog_obj();
        if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v36 = *(void *)(*(void *)(a1 + 40) + 8);
          uint64_t v37 = v36 + 275;
          uint64_t v38 = *(void *)(v36 + 160);
          *(_DWORD *)int buf = 136446722;
          *(void *)&uint8_t buf[4] = "nw_protocol_copy_ws_definition_block_invoke_2";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v37;
          *(_WORD *)&unsigned char buf[22] = 2048;
          *(void *)__int16 v153 = v38;
          uint64_t v34 = v30;
          char v35 = "%{public}s %{public}s input extended payload(16) = %zu";
LABEL_121:
          _os_log_impl(&dword_1830D4000, v34, OS_LOG_TYPE_DEBUG, v35, buf, 0x20u);
        }
      }
      else
      {
        if (v29 == 127)
        {
          if (!nw_framer_parse_input(*(nw_framer_t *)(a1 + 32), 8uLL, 8uLL, (uint8_t *)(v28 + 48), &__block_literal_global_20))
          {
            uint64_t v10 = 8;
            goto LABEL_140;
          }
          *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 160) = bswap64(*(void *)(*(void *)(*(void *)(a1 + 40) + 8)
                                                                                           + 48));
          if (*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 160) < 0x10000uLL)
          {
            char v98 = __nwlog_obj();
            if (os_log_type_enabled(v98, OS_LOG_TYPE_ERROR))
            {
              uint64_t v105 = *(void *)(*(void *)(a1 + 40) + 8);
              uint64_t v106 = v105 + 275;
              uint64_t v107 = *(void *)(v105 + 160);
              *(_DWORD *)int buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_protocol_copy_ws_definition_block_invoke";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = v106;
              *(_WORD *)&unsigned char buf[22] = 1024;
              *(_DWORD *)__int16 v153 = 0xFFFF;
              *(_WORD *)&v153[4] = 2048;
              *(void *)&v153[6] = v107;
              os_log_type_t v108 = "%{public}s %{public}s expected a payload length of greater than %u, but received %zu";
              uint64_t v109 = v98;
              uint32_t v110 = 38;
              goto LABEL_146;
            }
            goto LABEL_147;
          }
          if (!gLogDatapath) {
            goto LABEL_54;
          }
          os_log_type_t v30 = __nwlog_obj();
          if (!os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_122;
          }
          uint64_t v31 = *(void *)(*(void *)(a1 + 40) + 8);
          uint64_t v32 = v31 + 275;
          uint64_t v33 = *(void *)(v31 + 160);
          *(_DWORD *)int buf = 136446722;
          *(void *)&uint8_t buf[4] = "nw_protocol_copy_ws_definition_block_invoke_2";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v32;
          *(_WORD *)&unsigned char buf[22] = 2048;
          *(void *)__int16 v153 = v33;
          uint64_t v34 = v30;
          char v35 = "%{public}s %{public}s input extended payload(64) = %zu";
          goto LABEL_121;
        }
        *(void *)(v28 + 160) = v29;
        if (!gLogDatapath)
        {
LABEL_54:
          uint64_t v39 = *(void *)(*(void *)(a1 + 40) + 8);
          if (!*(void *)(v39 + 144))
          {
LABEL_58:
            if ((*(unsigned char *)(v39 + 232) & 8) != 0)
            {
              if (*(void *)(v39 + 136))
              {
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                uint64_t v40 = (id)gLogObj;
                if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
                {
                  uint64_t v41 = *(void *)(*(void *)(a1 + 40) + 8) + 275;
                  *(_DWORD *)int buf = 136446466;
                  *(void *)&uint8_t buf[4] = "nw_protocol_copy_ws_definition_block_invoke";
                  *(_WORD *)&buf[12] = 2082;
                  *(void *)&buf[14] = v41;
                  _os_log_impl(&dword_1830D4000, v40, OS_LOG_TYPE_ERROR, "%{public}s %{public}s state.input_buffer should not be present", buf, 0x16u);
                }

                uint64_t v39 = *(void *)(*(void *)(a1 + 40) + 8);
              }
              uint64_t v42 = *(void *)(v39 + 160);
              if (v42)
              {
                uint64_t v43 = malloc_type_malloc(*(void *)(v39 + 160), 0xF2B69DE5uLL);
                if (!v43)
                {
                  BOOL v91 = __nwlog_obj();
                  os_log_type_enabled(v91, OS_LOG_TYPE_ERROR);
                  *(_DWORD *)int buf = 136446466;
                  *(void *)&uint8_t buf[4] = "strict_malloc";
                  *(_WORD *)&buf[12] = 2048;
                  *(void *)&buf[14] = v42;
                  os_log_type_t v92 = (void *)_os_log_send_and_compose_impl();

                  BOOL result = __nwlog_abort((uint64_t)v92);
                  if (result)
                  {
                    __break(1u);
                    return result;
                  }
                  free(v92);
                }
                *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 136) = v43;
                uint64_t v39 = *(void *)(*(void *)(a1 + 40) + 8);
              }
            }
            if ((*(_WORD *)(v39 + 264) & 0x80) != 0) {
              int v44 = 4;
            }
            else {
              int v44 = 5;
            }
            *(_DWORD *)(v39 + 228) = v44;
            uint64_t v21 = *(void *)(a1 + 40);
            goto LABEL_70;
          }
          *(void *)(v39 + 152) += *(void *)(v39 + 160);
          uint64_t v39 = *(void *)(*(void *)(a1 + 40) + 8);
          if (*(void *)(v39 + 152) <= *(void *)(v39 + 144))
          {
            if ((*(_WORD *)(v39 + 273) & 8) != 0)
            {
              *(void *)(v39 + 152) = 0;
              uint64_t v39 = *(void *)(*(void *)(a1 + 40) + 8);
            }
            goto LABEL_58;
          }
          nw_ws_write_header(v39 + 48, *(void **)(a1 + 32), 8, 0x3F1u, 0, 0, 1);
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          char v98 = (id)gLogObj;
          if (os_log_type_enabled(v98, OS_LOG_TYPE_ERROR))
          {
            uint64_t v99 = *(void *)(*(void *)(a1 + 40) + 8);
            uint64_t v100 = v99 + 275;
            uint64_t v103 = v99 + 144;
            uint64_t v101 = *(void *)(v99 + 144);
            uint64_t v102 = *(void *)(v103 + 8);
            *(_DWORD *)int buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_protocol_copy_ws_definition_block_invoke";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v100;
            *(_WORD *)&unsigned char buf[22] = 2048;
            *(void *)__int16 v153 = v102;
            *(_WORD *)&v153[8] = 2048;
            *(void *)&v153[10] = v101;
            _os_log_impl(&dword_1830D4000, v98, OS_LOG_TYPE_ERROR, "%{public}s %{public}s input message size %zu exceeds maximum message size %zu", buf, 0x2Au);
          }
          int v104 = 40;
LABEL_148:

          nw_framer_mark_failed_with_error(*(nw_framer_t *)(a1 + 32), v104);
          goto LABEL_7;
        }
        os_log_type_t v30 = __nwlog_obj();
        if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v88 = *(void *)(*(void *)(a1 + 40) + 8);
          uint64_t v89 = v88 + 275;
          uint64_t v90 = *(void *)(v88 + 160);
          *(_DWORD *)int buf = 136446722;
          *(void *)&uint8_t buf[4] = "nw_protocol_copy_ws_definition_block_invoke";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v89;
          *(_WORD *)&unsigned char buf[22] = 2048;
          *(void *)__int16 v153 = v90;
          uint64_t v34 = v30;
          char v35 = "%{public}s %{public}s input payload length = %zu";
          goto LABEL_121;
        }
      }
LABEL_122:

      goto LABEL_54;
    }
LABEL_70:
    uint64_t v45 = *(void *)(v21 + 8);
    int v46 = *(_DWORD *)(v45 + 228);
    if (v46 == 4)
    {
      if (gLogDatapath)
      {
        uint64_t v73 = __nwlog_obj();
        if (os_log_type_enabled(v73, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v74 = *(void *)(*(void *)(a1 + 40) + 8) + 275;
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_copy_ws_definition_block_invoke";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v74;
          _os_log_impl(&dword_1830D4000, v73, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s input nw_ws_parse_state_mask_key", buf, 0x16u);
        }

        uint64_t v45 = *(void *)(*(void *)(a1 + 40) + 8);
      }
      if (!nw_framer_parse_input(*(nw_framer_t *)(a1 + 32), 4uLL, 4uLL, (uint8_t *)(v45 + 252), &__block_literal_global_26))
      {
        uint64_t v10 = 4;
        goto LABEL_140;
      }
      if (gLogDatapath)
      {
        uint64_t v81 = __nwlog_obj();
        if (os_log_type_enabled(v81, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v82 = *(void *)(*(void *)(a1 + 40) + 8);
          uint64_t v83 = v82 + 48;
          uint64_t v84 = v82 + 275;
          int v85 = *(_DWORD *)(v82 + 252);
          BOOL v86 = (*(_WORD *)(v83 + 225) & 4) == 0;
          BOOL v87 = "server";
          if (v86) {
            BOOL v87 = "client";
          }
          *(_DWORD *)int buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_protocol_copy_ws_definition_block_invoke_2";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v84;
          *(_WORD *)&unsigned char buf[22] = 1024;
          *(_DWORD *)__int16 v153 = v85;
          *(_WORD *)&v153[4] = 2082;
          *(void *)&v153[6] = v87;
          _os_log_impl(&dword_1830D4000, v81, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s input masking_key = %u, %{public}s", buf, 0x26u);
        }
      }
      *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 228) = 5;
      uint64_t v45 = *(void *)(*(void *)(a1 + 40) + 8);
      int v46 = *(_DWORD *)(v45 + 228);
    }
    if (v46 == 5)
    {
      nw_ws_opcode_t v47 = *(_DWORD *)(v45 + 232);
      if ((v47 - 8) > 2)
      {
        uint64_t v49 = *(void **)(v45 + 244);
        if (v49)
        {
          nw_protocol_metadata_t metadata = v49;
        }
        else
        {
          nw_protocol_metadata_t metadata = nw_ws_create_metadata(v47);
          nw_ws_metadata_set_negotiated_permessage_deflate(metadata, (*(unsigned __int16 *)(*(void *)(*(void *)(a1 + 40) + 8) + 273) >> 6) & 1);
          objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 244), metadata);
        }
      }
      else
      {
        nw_protocol_metadata_t metadata = nw_ws_create_metadata(v47);
        nw_ws_metadata_set_negotiated_permessage_deflate(metadata, (*(unsigned __int16 *)(*(void *)(*(void *)(a1 + 40) + 8) + 273) >> 6) & 1);
        nw_ws_metadata_set_permessage_deflate(metadata, 0);
      }
      if (gLogDatapath)
      {
        BOOL v75 = __nwlog_obj();
        if (os_log_type_enabled(v75, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v76 = *(void *)(*(void *)(a1 + 40) + 8);
          uint64_t v77 = v76 + 275;
          uint64_t v80 = v76 + 160;
          uint64_t v78 = *(void *)(v76 + 160);
          uint64_t v79 = *(void *)(v80 + 8);
          *(_DWORD *)int buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_protocol_copy_ws_definition_block_invoke";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v77;
          *(_WORD *)&unsigned char buf[22] = 2048;
          *(void *)__int16 v153 = v79;
          *(_WORD *)&v153[8] = 2048;
          *(void *)&v153[10] = v78;
          _os_log_impl(&dword_1830D4000, v75, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s input nw_ws_parse_state_payload, itr=%zu, len=%zu", buf, 0x2Au);
        }
      }
      *(void *)os_log_type_t type = 0;
      int v143 = type;
      uint64_t v144 = 0x2020000000;
      LOBYTE(v145) = 0;
      uint64_t v50 = MEMORY[0x1E4F143A8];
      uint64_t v51 = *(void *)(a1 + 40);
      uint64_t v52 = *(void *)(v51 + 8);
      unint64_t v53 = *(void *)(v52 + 160);
      unint64_t v54 = *(void *)(v52 + 168);
      while (1)
      {
        long long v55 = *(void **)(v131 + 32);
        v132[0] = v50;
        v132[1] = 3221225472;
        v132[2] = __nw_protocol_copy_ws_definition_block_invoke_27;
        v132[3] = &unk_1E523AF00;
        uint64_t v135 = v51;
        uint64_t v136 = type;
        id v56 = v55;
        id v133 = v56;
        long long v57 = metadata;
        __int16 v134 = v57;
        id v58 = v56;
        long long v59 = v132;
        long long v60 = v59;
        size_t v61 = v53 - v54;
        if (v61)
        {
          *(void *)int buf = MEMORY[0x1E4F143A8];
          *(void *)&buf[8] = 3221225472;
          *(void *)&buf[16] = ___ZL17nw_ws_parse_inputPU23objcproto12OS_nw_framer8NSObjectP13nw_ws_state_tmmPhU13block_pointerFmS4_mbbE_block_invoke;
          *(void *)__int16 v153 = &unk_1E523AFA0;
          uint64_t v154 = v52 + 48;
          long long v63 = v58;
          *(void *)&v153[8] = v63;
          *(void *)&v153[16] = v60;
          BOOL v64 = nw_framer_parse_input(v63, 1uLL, v61, 0, buf);

          uint64_t v65 = v131;
        }
        else
        {
          BOOL v62 = (*(_WORD *)(v52 + 273) & 8) != 0 && *(void *)(v52 + 168) == *(void *)(v52 + 160);
          uint64_t v65 = v131;
          BOOL v64 = 1;
          __nw_protocol_copy_ws_definition_block_invoke_27((uint64_t)v59, 0, 0, 1, v62);
        }

        BOOL v66 = !*((unsigned char *)v143 + 24) && v64;
        uint64_t v51 = *(void *)(v65 + 40);
        uint64_t v52 = *(void *)(v51 + 8);
        if (!v66) {
          break;
        }
        unint64_t v53 = *(void *)(v52 + 160);
        unint64_t v54 = *(void *)(v52 + 168);
        if (v54 >= v53) {
          goto LABEL_97;
        }
      }
      if (*((unsigned char *)v143 + 24))
      {
        nw_ws_write_header(v52 + 48, *(void **)(v65 + 32), 8, 0x3EAu, 0, 0, 1);
        nw_framer_mark_failed_with_error(*(nw_framer_t *)(v65 + 32), 100);
        uint64_t v97 = 0xFFFFFFFFLL;
LABEL_138:
        uint64_t v130 = v97;
        _Block_object_dispose(type, 8);

        goto LABEL_141;
      }
      if (*(void *)(v52 + 168) < *(void *)(v52 + 160))
      {
        if (gLogDatapath)
        {
          uint64_t v122 = __nwlog_obj();
          if (os_log_type_enabled(v122, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v123 = *(void *)(*(void *)(v131 + 40) + 8);
            uint64_t v124 = v123 + 275;
            uint64_t v125 = *(void *)(v123 + 160) - *(void *)(v123 + 168);
            *(_DWORD *)int buf = 136446722;
            *(void *)&uint8_t buf[4] = "nw_protocol_copy_ws_definition_block_invoke";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v124;
            *(_WORD *)&unsigned char buf[22] = 2048;
            *(void *)__int16 v153 = v125;
            _os_log_impl(&dword_1830D4000, v122, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s input nw_ws_parse_state_payload is asking for %zu bytes", buf, 0x20u);
          }

          uint64_t v52 = *(void *)(*(void *)(v131 + 40) + 8);
        }
        uint64_t v97 = *(void *)(v52 + 160) - *(void *)(v52 + 168);
        goto LABEL_138;
      }
LABEL_97:
      a1 = v131;
      if ((*(_WORD *)(v52 + 273) & 8) != 0 && (*(_DWORD *)(v52 + 232) - 8) >= 3)
      {
        uint64_t v67 = *(void **)(v52 + 244);
        *(void *)(v52 + 244) = 0;

        uint64_t v52 = *(void *)(*(void *)(v131 + 40) + 8);
      }
      os_log_type_t v68 = *(void **)(v52 + 136);
      if (v68)
      {
        free(v68);
        *(void *)(v52 + 136) = 0;
      }
      *(void *)(v52 + 48) = 0;
      uint64_t v20 = v52 + 48;
      *(_DWORD *)(v20 + 204) = 0;
      *(_DWORD *)(v20 + 216) = 0;
      *(void *)(v20 + 112) = 0;
      *(void *)(v20 + 120) = 0;
      *(void *)(v20 + 180) = 2;
      *(_WORD *)(v20 + 225) &= 0xFDF7u;
      _Block_object_dispose(type, 8);
    }
  }
  nw_ws_write_header(v24 + 48, *(void **)(a1 + 32), 8, 0x3EAu, 0, 0, 1);
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_t v94 = (id)gLogObj;
  if (os_log_type_enabled(v94, OS_LOG_TYPE_ERROR))
  {
    uint64_t v95 = *(void *)(*(void *)(a1 + 40) + 8) + 275;
    *(_DWORD *)int buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_protocol_copy_ws_definition_block_invoke_2";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = v95;
    _os_log_impl(&dword_1830D4000, v94, OS_LOG_TYPE_ERROR, "%{public}s %{public}s input rsv bits are not 0", buf, 0x16u);
  }
LABEL_127:

  nw_framer_mark_failed_with_error(*(nw_framer_t *)(a1 + 32), 100);
LABEL_7:
  uint64_t v10 = 0xFFFFFFFFLL;
LABEL_140:
  uint64_t v130 = v10;
LABEL_141:

  return v130;
}

void sub_18365AE60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  _Block_object_dispose(&a39, 8);

  _Unwind_Resume(a1);
}

void __nw_protocol_copy_ws_definition_block_invoke_33(uint64_t a1, uint64_t a2, void *a3, size_t a4, int a5)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = a3;
  if (gLogDatapath)
  {
    uint64_t v24 = __nwlog_obj();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v25 = *(void *)(*(void *)(a1 + 40) + 8) + 275;
      *(_DWORD *)parse = 136446466;
      *(void *)&void parse[4] = "nw_protocol_copy_ws_definition_block_invoke";
      *(_WORD *)&parse[12] = 2082;
      *(void *)&parse[14] = v25;
      _os_log_impl(&dword_1830D4000, v24, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s output", parse, 0x16u);
    }
  }
  if (v8)
  {
    nw_ws_opcode_t opcode = nw_ws_metadata_get_opcode(v8);
    int v10 = opcode;
    uint64_t v11 = *(void *)(*(void *)(a1 + 40) + 8);
    int v12 = *(_DWORD *)(v11 + 224);
    if (v12 == -1)
    {
      if ((a5 & 1) == 0)
      {
LABEL_10:
        *(_DWORD *)(v11 + 224) = v10;
        uint64_t v11 = *(void *)(*(void *)(a1 + 40) + 8);
        int v10 = opcode;
        goto LABEL_11;
      }
LABEL_9:
      nw_ws_opcode_t opcode = v10;
      int v10 = -1;
      goto LABEL_10;
    }
    if (v12 == opcode)
    {
      int v10 = 0;
      if (!a5)
      {
LABEL_11:
        *(_DWORD *)(v11 + 236) = 2;
        *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 176) = 0;
        v41[0] = 0;
        v41[1] = v41;
        v41[2] = 0x2020000000;
        size_t v42 = a4;
        BOOL v14 = *(void **)(a1 + 32);
        uint64_t v13 = *(void *)(a1 + 40);
        uint64_t v15 = *(void *)(v13 + 8);
        v34[0] = MEMORY[0x1E4F143A8];
        v34[1] = 3221225472;
        v34[2] = __nw_protocol_copy_ws_definition_block_invoke_34;
        v34[3] = &unk_1E523AF28;
        uint64_t v37 = v13;
        int v39 = v10;
        char v35 = v8;
        uint64_t v38 = v41;
        char v40 = a5;
        id v36 = *(id *)(a1 + 32);
        id v16 = v14;
        uint64_t v17 = v35;
        BOOL v18 = v34;
        uint64_t v19 = v18;
        if (v16)
        {
          if (a4)
          {
            *(void *)parse = MEMORY[0x1E4F143A8];
            *(void *)&parse[8] = 3221225472;
            *(void *)&parse[16] = ___ZL18nw_ws_parse_outputPU23objcproto12OS_nw_framer8NSObjectPU34objcproto23OS_nw_protocol_metadataS_P13nw_ws_state_t14nw_ws_opcode_tbPmPhU13block_pointerFmS8_mbbE_block_invoke;
            *(void *)&long long v46 = &unk_1E523AFF0;
            uint64_t v49 = v15 + 48;
            *((void *)&v46 + 1) = v17;
            int v51 = v10;
            uint64_t v20 = v16;
            char v52 = a5;
            nw_ws_opcode_t v47 = v20;
            uint64_t v50 = &v42;
            id v48 = v19;
            nw_framer_parse_output(v20, a4, a4, 0, parse);
          }
          else
          {
            __nw_protocol_copy_ws_definition_block_invoke_34((uint64_t)v18, 0, 0, 0);
          }
LABEL_18:

          _Block_object_dispose(v41, 8);
          goto LABEL_19;
        }
        char v26 = __nwlog_obj();
        *(_DWORD *)parse = 136446210;
        *(void *)&void parse[4] = "nw_ws_parse_output";
        uint64_t v27 = (char *)_os_log_send_and_compose_impl();

        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v43 = 0;
        if (__nwlog_fault(v27, &type, &v43))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            uint64_t v28 = __nwlog_obj();
            os_log_type_t v29 = type;
            if (os_log_type_enabled(v28, type))
            {
              *(_DWORD *)parse = 136446210;
              *(void *)&void parse[4] = "nw_ws_parse_output";
              _os_log_impl(&dword_1830D4000, v28, v29, "%{public}s called with null framer", parse, 0xCu);
            }
          }
          else if (v43)
          {
            backtrace_string = (char *)__nw_create_backtrace_string();
            uint64_t v28 = __nwlog_obj();
            os_log_type_t v31 = type;
            BOOL v32 = os_log_type_enabled(v28, type);
            if (backtrace_string)
            {
              if (v32)
              {
                *(_DWORD *)parse = 136446466;
                *(void *)&void parse[4] = "nw_ws_parse_output";
                *(_WORD *)&parse[12] = 2082;
                *(void *)&parse[14] = backtrace_string;
                _os_log_impl(&dword_1830D4000, v28, v31, "%{public}s called with null framer, dumping backtrace:%{public}s", parse, 0x16u);
              }

              free(backtrace_string);
              goto LABEL_39;
            }
            if (v32)
            {
              *(_DWORD *)parse = 136446210;
              *(void *)&void parse[4] = "nw_ws_parse_output";
              _os_log_impl(&dword_1830D4000, v28, v31, "%{public}s called with null framer, no backtrace", parse, 0xCu);
            }
          }
          else
          {
            uint64_t v28 = __nwlog_obj();
            os_log_type_t v33 = type;
            if (os_log_type_enabled(v28, type))
            {
              *(_DWORD *)parse = 136446210;
              *(void *)&void parse[4] = "nw_ws_parse_output";
              _os_log_impl(&dword_1830D4000, v28, v33, "%{public}s called with null framer, backtrace limit exceeded", parse, 0xCu);
            }
          }
        }
LABEL_39:
        if (v27) {
          free(v27);
        }
        goto LABEL_18;
      }
      goto LABEL_9;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v21 = (id)gLogObj;
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      uint64_t v22 = *(void *)(*(void *)(a1 + 40) + 8);
      uint64_t v23 = v22 + 275;
      LODWORD(v22) = *(_DWORD *)(v22 + 224);
      *(_DWORD *)parse = 136446978;
      *(void *)&void parse[4] = "nw_protocol_copy_ws_definition_block_invoke";
      *(_WORD *)&parse[12] = 2082;
      *(void *)&parse[14] = v23;
      *(_WORD *)&parse[22] = 1024;
      LODWORD(v46) = v22;
      WORD2(v46) = 1024;
      *(_DWORD *)((char *)&v46 + 6) = v10;
      _os_log_impl(&dword_1830D4000, v21, OS_LOG_TYPE_ERROR, "%{public}s %{public}s trying to send a new message before completing the first, %d, %d", parse, 0x22u);
    }

    nw_framer_mark_failed_with_error(*(nw_framer_t *)(a1 + 32), 100);
  }
  else
  {
    nw_framer_mark_failed_with_error(*(nw_framer_t *)(a1 + 32), 5);
  }
LABEL_19:
}

void sub_18365B518(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_protocol_copy_ws_definition_block_invoke_36(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(atomic_uchar **)(*(void *)(v1 + 8) + 104);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = __nw_protocol_copy_ws_definition_block_invoke_2_37;
  v4[3] = &unk_1E5248058;
  void v4[4] = v1;
  nw_array_apply(v2, (uint64_t)v4);
  return 1;
}

void __nw_protocol_copy_ws_definition_block_invoke_40(uint64_t a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 8);
  if (gLogDatapath)
  {
    uint64_t v15 = __nwlog_obj();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
    {
      int v16 = 136446466;
      uint64_t v17 = "nw_ws_destroy_state";
      __int16 v18 = 2082;
      uint64_t v19 = v1 + 275;
      _os_log_impl(&dword_1830D4000, v15, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s destroying websocket state", (uint8_t *)&v16, 0x16u);
    }
  }
  uint64_t v2 = *(const void **)(v1 + 72);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(v1 + 72) = 0;
  }
  id v3 = *(const void **)(v1 + 56);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(v1 + 56) = 0;
  }
  uint64_t v4 = *(void **)(v1 + 136);
  if (v4)
  {
    free(v4);
    *(void *)(v1 + 136) = 0;
  }
  uint64_t v5 = *(z_stream **)(v1 + 112);
  if (v5)
  {
    inflateEnd(v5);
    __int16 v6 = *(void **)(v1 + 112);
    if (v6)
    {
      free(v6);
      *(void *)(v1 + 112) = 0;
    }
  }
  int v7 = *(void **)(v1 + 128);
  if (v7)
  {
    free(v7);
    *(void *)(v1 + 128) = 0;
  }
  uint64_t v8 = *(z_stream **)(v1 + 120);
  if (v8)
  {
    deflateEnd(v8);
    uint64_t v9 = *(void **)(v1 + 120);
    if (v9)
    {
      free(v9);
      *(void *)(v1 + 120) = 0;
    }
  }
  int v10 = *(void **)(v1 + 64);
  *(void *)(v1 + 64) = 0;

  uint64_t v11 = *(void **)(v1 + 88);
  *(void *)(v1 + 88) = 0;

  int v12 = *(void **)(v1 + 96);
  *(void *)(v1 + 96) = 0;

  uint64_t v13 = *(void **)(v1 + 104);
  *(void *)(v1 + 104) = 0;

  BOOL v14 = *(void **)(v1 + 244);
  *(void *)(v1 + 244) = 0;

  *(_WORD *)(v1 + 273) |= 0x10u;
}

nw_protocol_metadata_t __nw_protocol_copy_ws_definition_block_invoke_2_42(uint64_t a1)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  nw_protocol_metadata_t metadata = nw_ws_create_metadata(nw_ws_opcode_invalid);
  nw_protocol_metadata_t v3 = metadata;
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v5 = *(void **)(v4 + 96);
  if (v5)
  {
    __int16 v6 = metadata;
    id v7 = v5;
    if (nw_protocol_metadata_is_ws(v6))
    {
      nw_framer_message_set_value(v6, "server_response", v7, &__block_literal_global_27_51477);
LABEL_4:

      uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8);
      goto LABEL_5;
    }
    uint64_t v9 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v20 = "nw_ws_metadata_set_server_response";
    int v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v17 = 0;
    if (__nwlog_fault(v10, &type, &v17))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v11 = __nwlog_obj();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)int buf = 136446210;
          uint64_t v20 = "nw_ws_metadata_set_server_response";
          _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s called with null nw_protocol_metadata_is_ws(metadata)", buf, 0xCu);
        }
      }
      else if (v17)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        uint64_t v11 = __nwlog_obj();
        os_log_type_t v14 = type;
        BOOL v15 = os_log_type_enabled(v11, type);
        if (backtrace_string)
        {
          if (v15)
          {
            *(_DWORD *)int buf = 136446466;
            uint64_t v20 = "nw_ws_metadata_set_server_response";
            __int16 v21 = 2082;
            uint64_t v22 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v11, v14, "%{public}s called with null nw_protocol_metadata_is_ws(metadata), dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_24;
        }
        if (v15)
        {
          *(_DWORD *)int buf = 136446210;
          uint64_t v20 = "nw_ws_metadata_set_server_response";
          _os_log_impl(&dword_1830D4000, v11, v14, "%{public}s called with null nw_protocol_metadata_is_ws(metadata), no backtrace", buf, 0xCu);
        }
      }
      else
      {
        uint64_t v11 = __nwlog_obj();
        os_log_type_t v16 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)int buf = 136446210;
          uint64_t v20 = "nw_ws_metadata_set_server_response";
          _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s called with null nw_protocol_metadata_is_ws(metadata), backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_24:
    if (v10) {
      free(v10);
    }
    goto LABEL_4;
  }
LABEL_5:
  nw_ws_metadata_set_negotiated_permessage_deflate(v3, (*(unsigned __int16 *)(v4 + 273) >> 6) & 1);

  return v3;
}

void sub_18365BAB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_ws_state_t::~nw_ws_state_t(id *this)
{
}

uint64_t __nw_protocol_copy_ws_definition_block_invoke_2_37(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  unint64_t v5 = (unint64_t)nw_ws_ping_request_copy_pong_handler(v4);
  id v6 = nw_ws_ping_request_copy_client_queue(v4);
  id v7 = v6;
  if (v5 && v6)
  {
    uint64_t v8 = -[NWConcrete_nw_error initWithDomain:code:]([NWConcrete_nw_error alloc], 1, 53);
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_protocol_copy_ws_definition_block_invoke_3;
    v12[3] = &unk_1E524B950;
    id v13 = v8;
    id v14 = (id)v5;
    uint64_t v9 = v8;
    dispatch_async(v7, v12);

LABEL_7:
    goto LABEL_8;
  }
  if (v5 | (unint64_t)v6)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v9 = (id)gLogObj;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 8) + 275;
      *(_DWORD *)int buf = 136446466;
      os_log_type_t v16 = "nw_protocol_copy_ws_definition_block_invoke_2";
      __int16 v17 = 2082;
      uint64_t v18 = v10;
      _os_log_impl(&dword_1830D4000, v9, OS_LOG_TYPE_ERROR, "%{public}s %{public}s pong handler and client queue should both be nil", buf, 0x16u);
    }
    goto LABEL_7;
  }
LABEL_8:

  return 1;
}

void sub_18365BCF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_protocol_copy_ws_definition_block_invoke_3(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

size_t __nw_protocol_copy_ws_definition_block_invoke_34(uint64_t a1, uint8_t *output_buffer, size_t output_length, unsigned int a4)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  int v8 = *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8) + 236);
  if (v8 != 2)
  {
LABEL_10:
    if (v8 != 5) {
      return output_length;
    }
    if (gLogDatapath)
    {
      uint64_t v25 = __nwlog_obj();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v26 = *(void *)(*(void *)(a1 + 48) + 8) + 275;
        *(_DWORD *)int buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_protocol_copy_ws_definition_block_invoke";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v26;
        *(_WORD *)&unsigned char buf[22] = 2048;
        id v56 = (void *)output_length;
        _os_log_impl(&dword_1830D4000, v25, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s output parsed %zu bytes", buf, 0x20u);
      }
    }
    if (!*(unsigned char *)(a1 + 68) || *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8) + 240) != 9) {
      goto LABEL_72;
    }
    dispatch_data_t v16 = (dispatch_data_t)MEMORY[0x1E4F14410];
    id v17 = MEMORY[0x1E4F14410];
    if (output_buffer && output_length)
    {
      dispatch_data_t v16 = dispatch_data_create(output_buffer, output_length, 0, 0);
    }
    uint64_t v18 = *(id *)(a1 + 32);
    if (nw_protocol_metadata_is_ws(v18))
    {
      *(void *)int buf = 0;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x3032000000;
      id v56 = __Block_byref_object_copy__23_51462;
      long long v57 = __Block_byref_object_dispose__24_51463;
      id v58 = 0;
      access_unint64_t value = MEMORY[0x1E4F143A8];
      uint64_t v49 = 3221225472;
      uint64_t v50 = __nw_ws_metadata_copy_client_queue_block_invoke;
      int v51 = &unk_1E5243E98;
      char v52 = buf;
      nw_framer_message_access_value(v18, "client_queue", &access_value);
      unint64_t v19 = (unint64_t)*(id *)(*(void *)&buf[8] + 40);
      _Block_object_dispose(buf, 8);

      goto LABEL_19;
    }
    uint64_t v27 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_ws_metadata_copy_client_queue";
    nw_ws_opcode_t v47 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(access_value) = 16;
    os_log_type_t v54 = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v47, &access_value, &v54))
    {
      if (access_value == 17)
      {
        uint64_t v28 = __nwlog_obj();
        os_log_type_t type = access_value;
        if (os_log_type_enabled(v28, (os_log_type_t)access_value))
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_ws_metadata_copy_client_queue";
          _os_log_impl(&dword_1830D4000, v28, type, "%{public}s called with null nw_protocol_metadata_is_ws(metadata)", buf, 0xCu);
        }
      }
      else
      {
        if (v54)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          typea = __nwlog_obj();
          os_log_type_t v42 = access_value;
          BOOL v34 = os_log_type_enabled(typea, (os_log_type_t)access_value);
          if (backtrace_string)
          {
            if (v34)
            {
              *(_DWORD *)int buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_ws_metadata_copy_client_queue";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = backtrace_string;
              _os_log_impl(&dword_1830D4000, typea, v42, "%{public}s called with null nw_protocol_metadata_is_ws(metadata), dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(backtrace_string);
          }
          else
          {
            if (v34)
            {
              *(_DWORD *)int buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_ws_metadata_copy_client_queue";
              _os_log_impl(&dword_1830D4000, typea, v42, "%{public}s called with null nw_protocol_metadata_is_ws(metadata), no backtrace", buf, 0xCu);
            }
          }
          goto LABEL_58;
        }
        uint64_t v28 = __nwlog_obj();
        os_log_type_t typeb = access_value;
        if (os_log_type_enabled(v28, (os_log_type_t)access_value))
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_ws_metadata_copy_client_queue";
          _os_log_impl(&dword_1830D4000, v28, typeb, "%{public}s called with null nw_protocol_metadata_is_ws(metadata), backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_58:
    if (v47) {
      free(v47);
    }
    unint64_t v19 = 0;
LABEL_19:

    uint64_t v20 = *(id *)(a1 + 32);
    if (nw_protocol_metadata_is_ws(v20))
    {
      *(void *)int buf = 0;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x3032000000;
      id v56 = __Block_byref_object_copy__51453;
      long long v57 = __Block_byref_object_dispose__51454;
      id v58 = 0;
      access_unint64_t value = MEMORY[0x1E4F143A8];
      uint64_t v49 = 3221225472;
      uint64_t v50 = __nw_ws_metadata_copy_pong_handler_block_invoke;
      int v51 = &unk_1E5243E98;
      char v52 = buf;
      nw_framer_message_access_value(v20, "pong_handler", &access_value);
      unint64_t v21 = (unint64_t)_Block_copy(*(const void **)(*(void *)&buf[8] + 40));
      _Block_object_dispose(buf, 8);

      if (v19 && v21)
      {
        uint64_t v22 = nw_ws_ping_request_create(v16, (void *)v19, (void *)v21);
        nw_array_append(*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 104), v22);
LABEL_71:

LABEL_72:
        if (output_buffer && output_length)
        {
          if (*(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8) + 256))
          {
            uint64_t v39 = 0;
            do
            {
              output_buffer[v39] ^= *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8)
                                             + (((_BYTE)v39
                                               + *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8)
                                                                            + 176)) & 3)
                                             + 256);
              ++v39;
            }
            while (output_length != v39);
            nw_framer_write_output(*(nw_framer_t *)(a1 + 40), output_buffer, output_length);
          }
          else
          {
            char v40 = *(NSObject **)(a1 + 40);
            if (a4)
            {
              nw_framer_write_output(v40, output_buffer, output_length);
            }
            else
            {
              nw_framer_write_output_no_copy(v40, output_length);
              output_CFIndex length = 0;
            }
          }
          *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 176) += output_length;
        }
        return output_length;
      }
LABEL_67:
      if (v19 | v21)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v22 = (NWConcrete_nw_ws_ping_request *)(id)gLogObj;
        if (os_log_type_enabled(&v22->super, OS_LOG_TYPE_ERROR))
        {
          uint64_t v38 = *(void *)(*(void *)(a1 + 48) + 8) + 275;
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_copy_ws_definition_block_invoke";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v38;
          _os_log_impl(&dword_1830D4000, &v22->super, OS_LOG_TYPE_ERROR, "%{public}s %{public}s client queue or pong handler not set", buf, 0x16u);
        }
      }
      else
      {
        uint64_t v22 = nw_ws_ping_request_create(v16, 0, 0);
        nw_array_append(*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 104), v22);
        unint64_t v21 = 0;
      }
      goto LABEL_71;
    }
    os_log_type_t v29 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_ws_metadata_copy_pong_handler";
    os_log_type_t v30 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v54 = OS_LOG_TYPE_ERROR;
    char v53 = 0;
    if (__nwlog_fault(v30, &v54, &v53))
    {
      if (v54 == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v31 = __nwlog_obj();
        os_log_type_t v32 = v54;
        if (os_log_type_enabled(v31, v54))
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_ws_metadata_copy_pong_handler";
          _os_log_impl(&dword_1830D4000, v31, v32, "%{public}s called with null nw_protocol_metadata_is_ws(metadata)", buf, 0xCu);
        }
      }
      else if (v53)
      {
        char v35 = (char *)__nw_create_backtrace_string();
        os_log_type_t v31 = __nwlog_obj();
        os_log_type_t v46 = v54;
        BOOL v36 = os_log_type_enabled(v31, v54);
        if (v35)
        {
          if (v36)
          {
            *(_DWORD *)int buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_ws_metadata_copy_pong_handler";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v35;
            _os_log_impl(&dword_1830D4000, v31, v46, "%{public}s called with null nw_protocol_metadata_is_ws(metadata), dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v35);
          goto LABEL_64;
        }
        if (v36)
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_ws_metadata_copy_pong_handler";
          _os_log_impl(&dword_1830D4000, v31, v46, "%{public}s called with null nw_protocol_metadata_is_ws(metadata), no backtrace", buf, 0xCu);
        }
      }
      else
      {
        os_log_type_t v31 = __nwlog_obj();
        os_log_type_t v37 = v54;
        if (os_log_type_enabled(v31, v54))
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_ws_metadata_copy_pong_handler";
          _os_log_impl(&dword_1830D4000, v31, v37, "%{public}s called with null nw_protocol_metadata_is_ws(metadata), backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_64:
    if (v30) {
      free(v30);
    }

    unint64_t v21 = 0;
    goto LABEL_67;
  }
  nw_ws_metadata_set_permessage_deflate(*(void **)(a1 + 32), a4);
  unsigned int v9 = *(_DWORD *)(a1 + 64);
  if (v9) {
    int v10 = a4;
  }
  else {
    int v10 = 0;
  }
  if (*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) >= 0x7FuLL) {
    LODWORD(v11) = 127;
  }
  else {
    uint64_t v11 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24);
  }
  if (nw_ws_validate_frame((nw_ws_state_t *)(*(void *)(*(void *)(a1 + 48) + 8) + 48), *(unsigned __int8 *)(a1 + 68), v10, v9, (*(_WORD *)(*(void *)(*(void *)(a1 + 48) + 8) + 273) & 4) == 0, v11, 0))
  {
    os_log_type_t v12 = *(void **)(a1 + 40);
    uint64_t v13 = *(void *)(*(void *)(a1 + 48) + 8) + 48;
    int v14 = *(_DWORD *)(a1 + 64);
    nw_ws_close_code_t close_code = nw_ws_metadata_get_close_code(*(nw_protocol_metadata_t *)(a1 + 32));
    *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8) + 256) = nw_ws_write_header(v13, v12, v14, close_code, *(void *)(*(void *)(*(void *)(a1 + 56) + 8)+ 24), v10, *(unsigned __int8 *)(a1 + 68));
    *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8) + 240) = *(_DWORD *)(a1 + 64);
    *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8) + 236) = 5;
    int v8 = *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8) + 236);
    goto LABEL_10;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  uint64_t v23 = (id)gLogObj;
  if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
  {
    uint64_t v24 = *(void *)(*(void *)(a1 + 48) + 8) + 275;
    *(_DWORD *)int buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_protocol_copy_ws_definition_block_invoke";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = v24;
    _os_log_impl(&dword_1830D4000, v23, OS_LOG_TYPE_ERROR, "%{public}s %{public}s got invalid frame", buf, 0x16u);
  }

  nw_framer_mark_failed_with_error(*(nw_framer_t *)(a1 + 40), 100);
  return 0;
}

void sub_18365C7C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL18nw_ws_parse_outputPU23objcproto12OS_nw_framer8NSObjectPU34objcproto23OS_nw_protocol_metadataS_P13nw_ws_state_t14nw_ws_opcode_tbPmPhU13block_pointerFmS8_mbbE_block_invoke(uint64_t a1, uint64_t a2, const char *a3)
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  if (!a2
    || !a3
    || (*(_WORD *)(*(void *)(a1 + 56) + 225) & 0x40) == 0
    || !nw_ws_metadata_get_permessage_deflate(*(void **)(a1 + 32))
    || *(_DWORD *)(a1 + 72) > 2u)
  {
    return (*(uint64_t (**)(void, uint64_t))(*(void *)(a1 + 48) + 16))(*(void *)(a1 + 48), a2);
  }
  *(_WORD *)(*(void *)(a1 + 56) + 225) |= 0x400u;
  id v6 = *(void **)(*(void *)(a1 + 56) + 72);
  if (!v6)
  {
    char v43 = malloc_type_malloc(0x70uLL, 0xF2B69DE5uLL);
    if (!v43)
    {
      int v51 = __nwlog_obj();
      os_log_type_enabled(v51, OS_LOG_TYPE_ERROR);
      *(_DWORD *)int buf = 136446466;
      BOOL v62 = "strict_malloc";
      __int16 v63 = 2048;
      uint64_t v64 = 112;
      char v52 = (void *)_os_log_send_and_compose_impl();

      uint64_t result = __nwlog_abort((uint64_t)v52);
      if (result)
      {
        __break(1u);
        return result;
      }
      free(v52);
    }
    *(void *)(*(void *)(a1 + 56) + 72) = v43;
    *(void *)(*(void *)(*(void *)(a1 + 56) + 72) + 64) = 0;
    *(void *)(*(void *)(*(void *)(a1 + 56) + 72) + 72) = 0;
    *(void *)(*(void *)(*(void *)(a1 + 56) + 72) + 80) = 0;
    uint64_t v44 = *(void *)(a1 + 56);
    uint64_t v45 = 220;
    if ((*(_WORD *)(v44 + 225) & 4) == 0) {
      uint64_t v45 = 221;
    }
    int v46 = deflateInit2_(*(z_streamp *)(v44 + 72), -1, 8, -*(unsigned __int8 *)(v44 + v45), 8, 0, "1.2.12", 112);
    if (v46)
    {
      nw_ws_opcode_t v47 = __nwlog_obj();
      if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
      {
        uint64_t v48 = *(void *)(a1 + 56);
        uint64_t v49 = zError(v46);
        uint64_t v50 = (const char *)(v48 + 227);
        BOOL v62 = "nw_ws_parse_output_block_invoke";
        *(_DWORD *)int buf = 136446722;
        if (!v48) {
          uint64_t v50 = "";
        }
        __int16 v63 = 2082;
        uint64_t v64 = (uint64_t)v50;
        __int16 v65 = 2080;
        BOOL v66 = v49;
        _os_log_impl(&dword_1830D4000, v47, OS_LOG_TYPE_ERROR, "%{public}s %{public}s deflateInit2 returned %s", buf, 0x20u);
      }

      nw_framer_mark_failed_with_error(*(nw_framer_t *)(a1 + 40), 100);
      return 0;
    }
    id v6 = *(void **)(*(void *)(a1 + 56) + 72);
  }
  *id v6 = a2;
  *(_DWORD *)(*(void *)(*(void *)(a1 + 56) + 72) + 8) = a3;
  uint64_t v60 = 0;
  alloc = dispatch_data_create_alloc();
  uint64_t v8 = *(void *)(a1 + 56);
  uint64_t v9 = *(void *)(v8 + 152);
  uint64_t v10 = *(void *)(v8 + 72);
  *(_DWORD *)(v10 + 32) = v9;
  *(void *)(v10 + 24) = v60;
  while (1)
  {
    int v11 = deflate(*(z_streamp *)(*(void *)(a1 + 56) + 72), 2);
    int v12 = v11;
    if (v11) {
      break;
    }
    uint64_t v13 = *(void *)(a1 + 56);
    uint64_t v14 = *(unsigned int *)(*(void *)(v13 + 72) + 32);
    if (gLogDatapath)
    {
      uint64_t v57 = *(void *)(v13 + 152);
      id v17 = __nwlog_obj();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v18 = *(void *)(a1 + 56);
        unint64_t v19 = (const char *)(v18 + 227);
        BOOL v20 = v18 == 0;
        *(_DWORD *)int buf = 136446722;
        unint64_t v21 = "";
        if (!v20) {
          unint64_t v21 = v19;
        }
        BOOL v62 = "nw_ws_parse_output_block_invoke";
        __int16 v63 = 2082;
        uint64_t v64 = (uint64_t)v21;
        __int16 v65 = 2048;
        BOOL v66 = (const char *)(v57 - v14);
        _os_log_impl(&dword_1830D4000, v17, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s writing %zu bytes of compressed data", buf, 0x20u);
      }

      uint64_t v22 = *(void *)(*(void *)(a1 + 56) + 72);
      uint64_t v14 = *(unsigned int *)(v22 + 32);
      if (*(_DWORD *)(v22 + 32))
      {
LABEL_11:
        size_t size = dispatch_data_get_size(alloc);
        dispatch_data_t subrange = dispatch_data_create_subrange(alloc, 0, size - v14);
        goto LABEL_18;
      }
    }
    else if (*(_DWORD *)(*(void *)(v13 + 72) + 32))
    {
      goto LABEL_11;
    }
    uint64_t v23 = dispatch_data_create_alloc();
    uint64_t v24 = *(void *)(a1 + 56);
    uint64_t v25 = *(void *)(v24 + 152);
    uint64_t v26 = *(void *)(v24 + 72);
    *(_DWORD *)(v26 + 32) = v25;
    *(void *)(v26 + 24) = v60;
    dispatch_data_t subrange = dispatch_data_create_concat(alloc, v23);

    alloc = v23;
LABEL_18:

    alloc = subrange;
  }
  if (v11 == -5)
  {
    if (gLogDatapath)
    {
      uint64_t v27 = __nwlog_obj();
      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v28 = *(void *)(a1 + 56);
        os_log_type_t v29 = (const char *)(v28 + 227);
        BOOL v20 = v28 == 0;
        os_log_type_t v30 = "";
        if (!v20) {
          os_log_type_t v30 = v29;
        }
        *(_DWORD *)int buf = 136446722;
        BOOL v62 = "nw_ws_parse_output_block_invoke";
        __int16 v63 = 2082;
        uint64_t v64 = (uint64_t)v30;
        __int16 v65 = 2048;
        BOOL v66 = a3;
        _os_log_impl(&dword_1830D4000, v27, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s compressed %zu bytes of data", buf, 0x20u);
      }
    }
  }
  else
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v31 = (id)gLogObj;
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
    {
      uint64_t v32 = *(void *)(a1 + 56);
      os_log_type_t v33 = zError(v12);
      BOOL v34 = (const char *)(v32 + 227);
      *(_DWORD *)int buf = 136446722;
      if (!v32) {
        BOOL v34 = "";
      }
      BOOL v62 = "nw_ws_parse_output_block_invoke";
      __int16 v63 = 2082;
      uint64_t v64 = (uint64_t)v34;
      __int16 v65 = 2080;
      BOOL v66 = v33;
      _os_log_impl(&dword_1830D4000, v31, OS_LOG_TYPE_ERROR, "%{public}s %{public}s deflate returned %s", buf, 0x20u);
    }

    nw_framer_mark_failed_with_error(*(nw_framer_t *)(a1 + 40), 100);
  }
  if (*(unsigned char *)(a1 + 76))
  {
    size_t v35 = dispatch_data_get_size(alloc);
    BOOL v36 = dispatch_data_create_subrange(alloc, 0, v35 - 4);

    size_t v37 = dispatch_data_get_size(v36);
    if ((*(_DWORD *)(a1 + 72) - 1) <= 1)
    {
      size_t v38 = v37;
      if (v37 >= **(void **)(a1 + 64))
      {
        if (gLogDatapath)
        {
          char v53 = __nwlog_obj();
          if (os_log_type_enabled(v53, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v54 = *(void *)(a1 + 56);
            BOOL v20 = v54 == 0;
            long long v55 = (const char *)(v54 + 227);
            if (v20) {
              long long v55 = "";
            }
            uint64_t v56 = **(void **)(a1 + 64);
            *(_DWORD *)int buf = 136446978;
            BOOL v62 = "nw_ws_parse_output_block_invoke";
            __int16 v63 = 2082;
            uint64_t v64 = (uint64_t)v55;
            __int16 v65 = 2048;
            BOOL v66 = (const char *)v38;
            __int16 v67 = 2048;
            uint64_t v68 = v56;
            _os_log_impl(&dword_1830D4000, v53, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s Not compressing frame because compressed (%zu bytes) is no better than uncompressed (%zu bytes)", buf, 0x2Au);
          }
        }
        deflateReset(*(z_streamp *)(*(void *)(a1 + 56) + 72));

        BOOL v36 = 0;
      }
    }
    uint64_t v39 = *(void *)(a1 + 56);
    __int16 v40 = *(_WORD *)(v39 + 225);
    if ((v40 & 0x84) == 4 || (*(_WORD *)(v39 + 225) & 0x104) == 0)
    {
      deflateReset(*(z_streamp *)(v39 + 72));
      uint64_t v39 = *(void *)(a1 + 56);
      __int16 v40 = *(_WORD *)(v39 + 225);
    }
    *(_WORD *)(v39 + 225) = v40 & 0xFBFF;
    if (v36)
    {
LABEL_40:
      **(void **)(a1 + 64) = dispatch_data_get_size(v36);
      applier[0] = MEMORY[0x1E4F143A8];
      applier[1] = 3221225472;
      applier[2] = ___ZL18nw_ws_parse_outputPU23objcproto12OS_nw_framer8NSObjectPU34objcproto23OS_nw_protocol_metadataS_P13nw_ws_state_t14nw_ws_opcode_tbPmPhU13block_pointerFmS8_mbbE_block_invoke_57;
      applier[3] = &unk_1E523AFC8;
      id v59 = *(id *)(a1 + 48);
      BOOL v41 = dispatch_data_apply(v36, applier);

      return v41;
    }
  }
  else
  {
    BOOL v36 = alloc;
    if (alloc) {
      goto LABEL_40;
    }
  }
  return (*(uint64_t (**)(void, uint64_t))(*(void *)(a1 + 48) + 16))(*(void *)(a1 + 48), a2);
}

void sub_18365CFC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL ___ZL18nw_ws_parse_outputPU23objcproto12OS_nw_framer8NSObjectPU34objcproto23OS_nw_protocol_metadataS_P13nw_ws_state_t14nw_ws_opcode_tbPmPhU13block_pointerFmS8_mbbE_block_invoke_57(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))() != 0;
}

uint64_t nw_ws_validate_frame(nw_ws_state_t *a1, int a2, int a3, unsigned int a4, int a5, unsigned int a6, int a7)
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    uint64_t v28 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    char v43 = "nw_ws_validate_frame";
    os_log_type_t v29 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v40 = 0;
    if (!__nwlog_fault(v29, &type, &v40)) {
      goto LABEL_108;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v30 = __nwlog_obj();
      os_log_type_t v31 = type;
      if (os_log_type_enabled(v30, type))
      {
        *(_DWORD *)int buf = 136446210;
        char v43 = "nw_ws_validate_frame";
        uint64_t v32 = "%{public}s called with null state";
LABEL_106:
        _os_log_impl(&dword_1830D4000, v30, v31, v32, buf, 0xCu);
      }
    }
    else
    {
      if (v40)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v30 = __nwlog_obj();
        os_log_type_t v31 = type;
        BOOL v39 = os_log_type_enabled(v30, type);
        if (backtrace_string)
        {
          if (v39)
          {
            *(_DWORD *)int buf = 136446466;
            char v43 = "nw_ws_validate_frame";
            __int16 v44 = 2082;
            uint64_t v45 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v30, v31, "%{public}s called with null state, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_108;
        }
        if (!v39) {
          goto LABEL_107;
        }
        *(_DWORD *)int buf = 136446210;
        char v43 = "nw_ws_validate_frame";
        uint64_t v32 = "%{public}s called with null state, no backtrace";
        goto LABEL_106;
      }
      os_log_type_t v30 = __nwlog_obj();
      os_log_type_t v31 = type;
      if (os_log_type_enabled(v30, type))
      {
        *(_DWORD *)int buf = 136446210;
        char v43 = "nw_ws_validate_frame";
        uint64_t v32 = "%{public}s called with null state, backtrace limit exceeded";
        goto LABEL_106;
      }
    }
LABEL_107:

LABEL_108:
    if (v29) {
      free(v29);
    }
    return 0;
  }
  if (!gLogDatapath)
  {
    __int16 v14 = *(_WORD *)((char *)a1 + 225);
    if ((v14 & 1) == 0) {
      goto LABEL_4;
    }
    return 1;
  }
  os_log_type_t v33 = __nwlog_obj();
  if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
  {
    __int16 v34 = *(_WORD *)((char *)a1 + 225);
    size_t v35 = "output";
    *(_DWORD *)int buf = 136448514;
    char v43 = "nw_ws_validate_frame";
    __int16 v44 = 2082;
    uint64_t v45 = (char *)a1 + 227;
    __int16 v46 = 2082;
    if ((v34 & 4) != 0) {
      BOOL v36 = "server";
    }
    else {
      BOOL v36 = "client";
    }
    if (a7) {
      size_t v35 = "input";
    }
    nw_ws_opcode_t v47 = v35;
    __int16 v48 = 2082;
    uint64_t v49 = v36;
    size_t v37 = "reads";
    __int16 v50 = 2082;
    if (!a7) {
      size_t v37 = "sends";
    }
    int v51 = v37;
    __int16 v52 = 1024;
    int v53 = a2;
    __int16 v54 = 1024;
    int v55 = a3;
    __int16 v56 = 1024;
    unsigned int v57 = a4;
    __int16 v58 = 1024;
    int v59 = a5;
    __int16 v60 = 1024;
    unsigned int v61 = a6;
    _os_log_impl(&dword_1830D4000, v33, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s %{public}s  %{public}s %{public}s {fin: %u, rsv1: %u, op: %u, msk: %u, len: %u}", buf, 0x52u);
  }

  __int16 v14 = *(_WORD *)((char *)a1 + 225);
  if (v14) {
    return 1;
  }
LABEL_4:
  if (a4 - 8 <= 2)
  {
    if (a3)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v15 = (id)gLogObj;
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        dispatch_data_t v16 = "output";
        char v43 = "nw_ws_validate_frame";
        *(_DWORD *)int buf = 136446722;
        __int16 v44 = 2082;
        uint64_t v45 = (char *)a1 + 227;
        if (a7) {
          dispatch_data_t v16 = "input";
        }
        __int16 v46 = 2082;
        nw_ws_opcode_t v47 = v16;
        id v17 = "%{public}s %{public}s %{public}s control frame can not be compressed";
LABEL_35:
        uint64_t v22 = v15;
        uint32_t v23 = 32;
LABEL_36:
        _os_log_impl(&dword_1830D4000, v22, OS_LOG_TYPE_ERROR, v17, buf, v23);
        goto LABEL_37;
      }
      goto LABEL_37;
    }
    if ((a2 & 1) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v15 = (id)gLogObj;
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        uint64_t v24 = "output";
        char v43 = "nw_ws_validate_frame";
        *(_DWORD *)int buf = 136446722;
        __int16 v44 = 2082;
        uint64_t v45 = (char *)a1 + 227;
        if (a7) {
          uint64_t v24 = "input";
        }
        __int16 v46 = 2082;
        nw_ws_opcode_t v47 = v24;
        id v17 = "%{public}s %{public}s %{public}s control frame was not marked final";
        goto LABEL_35;
      }
      goto LABEL_37;
    }
    if (a6 >= 0x7E)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v15 = (id)gLogObj;
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        BOOL v20 = "output";
        char v43 = "nw_ws_validate_frame";
        *(_DWORD *)int buf = 136446722;
        __int16 v44 = 2082;
        uint64_t v45 = (char *)a1 + 227;
        if (a7) {
          BOOL v20 = "input";
        }
        __int16 v46 = 2082;
        nw_ws_opcode_t v47 = v20;
        id v17 = "%{public}s %{public}s %{public}s control frame has length >125 bytes";
        goto LABEL_35;
      }
LABEL_37:

      return 0;
    }
    if (a4 == 8 && a6 == 1) {
      return 0;
    }
LABEL_71:
    BOOL v26 = (v14 & 4) == 0;
    int v27 = a5 ^ 1;
    if ((v14 & 4) != 0 && (a7 & 1) == 0 && !v27) {
      return 0;
    }
    goto LABEL_74;
  }
  if (!a4)
  {
    if (a7)
    {
      if (*((_DWORD *)a1 + 42) == -1)
      {
        uint64_t v18 = __nwlog_obj();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)int buf = 136446466;
          char v43 = "nw_ws_validate_frame";
          __int16 v44 = 2082;
          uint64_t v45 = (char *)a1 + 227;
          unint64_t v19 = "%{public}s %{public}s input continuation frame was received without context";
          goto LABEL_64;
        }
        goto LABEL_65;
      }
      if (!a3)
      {
        if (a2) {
          *((_DWORD *)a1 + 42) = -1;
        }
        goto LABEL_68;
      }
      uint64_t v18 = __nwlog_obj();
      if (!os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
        goto LABEL_65;
      }
    }
    else
    {
      if (*((_DWORD *)a1 + 43) == -1)
      {
        uint64_t v18 = __nwlog_obj();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)int buf = 136446466;
          char v43 = "nw_ws_validate_frame";
          __int16 v44 = 2082;
          uint64_t v45 = (char *)a1 + 227;
          unint64_t v19 = "%{public}s %{public}s output continuation frame was sent without context";
          goto LABEL_64;
        }
        goto LABEL_65;
      }
      if (!a3)
      {
        if (a2) {
          *((_DWORD *)a1 + 43) = -1;
        }
        goto LABEL_71;
      }
      uint64_t v18 = __nwlog_obj();
      if (!os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
        goto LABEL_65;
      }
    }
    *(_DWORD *)int buf = 136446466;
    char v43 = "nw_ws_validate_frame";
    __int16 v44 = 2082;
    uint64_t v45 = (char *)a1 + 227;
    unint64_t v19 = "%{public}s %{public}s rsv1 cannot be set on continuation frame";
    goto LABEL_64;
  }
  if (a4 > 2)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v15 = (id)gLogObj;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      unint64_t v21 = "output";
      *(_DWORD *)int buf = 136446978;
      char v43 = "nw_ws_validate_frame";
      uint64_t v45 = (char *)a1 + 227;
      __int16 v44 = 2082;
      if (a7) {
        unint64_t v21 = "input";
      }
      __int16 v46 = 2082;
      nw_ws_opcode_t v47 = v21;
      __int16 v48 = 1024;
      LODWORD(v49) = a4;
      id v17 = "%{public}s %{public}s %{public}s unknown opcode %d for message";
      uint64_t v22 = v15;
      uint32_t v23 = 38;
      goto LABEL_36;
    }
    goto LABEL_37;
  }
  if (!a7)
  {
    if (*((_DWORD *)a1 + 43) == -1)
    {
      if ((v14 & 0x40) != 0 || !a3)
      {
        if ((a2 & 1) == 0) {
          *((_DWORD *)a1 + 43) = a4;
        }
        goto LABEL_71;
      }
      uint64_t v18 = __nwlog_obj();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136446466;
        char v43 = "nw_ws_validate_frame";
        __int16 v44 = 2082;
        uint64_t v45 = (char *)a1 + 227;
        unint64_t v19 = "%{public}s %{public}s sending compressed data without correct state";
        goto LABEL_64;
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v18 = (id)gLogObj;
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136446466;
        char v43 = "nw_ws_validate_frame";
        __int16 v44 = 2082;
        uint64_t v45 = (char *)a1 + 227;
        unint64_t v19 = "%{public}s %{public}s output continuation context should be invalid here";
        goto LABEL_64;
      }
    }
    goto LABEL_65;
  }
  if (*((_DWORD *)a1 + 42) != -1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v18 = (id)gLogObj;
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136446466;
      char v43 = "nw_ws_validate_frame";
      __int16 v44 = 2082;
      uint64_t v45 = (char *)a1 + 227;
      unint64_t v19 = "%{public}s %{public}s input continuation context should be invalid here";
LABEL_64:
      _os_log_impl(&dword_1830D4000, v18, OS_LOG_TYPE_ERROR, v19, buf, 0x16u);
    }
LABEL_65:

    return 0;
  }
  if ((v14 & 0x40) == 0 && a3)
  {
    uint64_t v18 = __nwlog_obj();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136446466;
      char v43 = "nw_ws_validate_frame";
      __int16 v44 = 2082;
      uint64_t v45 = (char *)a1 + 227;
      unint64_t v19 = "%{public}s %{public}s received compressed data without correct state";
      goto LABEL_64;
    }
    goto LABEL_65;
  }
  if ((a2 & 1) == 0) {
    *((_DWORD *)a1 + 42) = a4;
  }
LABEL_68:
  BOOL v26 = (v14 & 4) == 0;
  int v27 = a5 ^ 1;
LABEL_74:
  if (!v26 && a7 && !a5 || v26 && (a7 & 1) == 0 && !a5) {
    return 0;
  }
  return v27 | v26 & a7 ^ 1u;
}

uint64_t nw_ws_write_header(uint64_t a1, void *a2, int a3, unsigned int a4, unint64_t a5, unsigned __int8 a6, int a7)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  uint64_t v13 = a2;
  __int16 v14 = v13;
  if (!a1)
  {
    uint64_t v28 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    __int16 v52 = "nw_ws_write_header";
    os_log_type_t v29 = (char *)_os_log_send_and_compose_impl();

    v49[0] = 16;
    output_buffer[0] = 0;
    if (!__nwlog_fault(v29, v49, output_buffer)) {
      goto LABEL_102;
    }
    if (v49[0] == 17)
    {
      os_log_type_t v30 = __nwlog_obj();
      os_log_type_t v31 = v49[0];
      if (os_log_type_enabled(v30, (os_log_type_t)v49[0]))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v52 = "nw_ws_write_header";
        _os_log_impl(&dword_1830D4000, v30, v31, "%{public}s called with null state", buf, 0xCu);
      }
      goto LABEL_101;
    }
    if (!output_buffer[0])
    {
      os_log_type_t v30 = __nwlog_obj();
      os_log_type_t v46 = v49[0];
      if (os_log_type_enabled(v30, (os_log_type_t)v49[0]))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v52 = "nw_ws_write_header";
        _os_log_impl(&dword_1830D4000, v30, v46, "%{public}s called with null state, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_101;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v30 = __nwlog_obj();
    os_log_type_t v36 = v49[0];
    BOOL v37 = os_log_type_enabled(v30, (os_log_type_t)v49[0]);
    if (!backtrace_string)
    {
      if (v37)
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v52 = "nw_ws_write_header";
        _os_log_impl(&dword_1830D4000, v30, v36, "%{public}s called with null state, no backtrace", buf, 0xCu);
      }
      goto LABEL_101;
    }
    if (v37)
    {
      *(_DWORD *)int buf = 136446466;
      __int16 v52 = "nw_ws_write_header";
      __int16 v53 = 2082;
      __int16 v54 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v30, v36, "%{public}s called with null state, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_66;
  }
  if (!v13)
  {
    uint64_t v32 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    __int16 v52 = "nw_ws_write_header";
    os_log_type_t v29 = (char *)_os_log_send_and_compose_impl();

    v49[0] = 16;
    output_buffer[0] = 0;
    if (!__nwlog_fault(v29, v49, output_buffer)) {
      goto LABEL_102;
    }
    if (v49[0] == 17)
    {
      os_log_type_t v30 = __nwlog_obj();
      os_log_type_t v33 = v49[0];
      if (os_log_type_enabled(v30, (os_log_type_t)v49[0]))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v52 = "nw_ws_write_header";
        _os_log_impl(&dword_1830D4000, v30, v33, "%{public}s called with null framer", buf, 0xCu);
      }
LABEL_101:

LABEL_102:
      if (v29) {
        free(v29);
      }
      goto LABEL_42;
    }
    if (!output_buffer[0])
    {
      os_log_type_t v30 = __nwlog_obj();
      os_log_type_t v47 = v49[0];
      if (os_log_type_enabled(v30, (os_log_type_t)v49[0]))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v52 = "nw_ws_write_header";
        _os_log_impl(&dword_1830D4000, v30, v47, "%{public}s called with null framer, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_101;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v30 = __nwlog_obj();
    os_log_type_t v38 = v49[0];
    BOOL v39 = os_log_type_enabled(v30, (os_log_type_t)v49[0]);
    if (!backtrace_string)
    {
      if (v39)
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v52 = "nw_ws_write_header";
        _os_log_impl(&dword_1830D4000, v30, v38, "%{public}s called with null framer, no backtrace", buf, 0xCu);
      }
      goto LABEL_101;
    }
    if (v39)
    {
      *(_DWORD *)int buf = 136446466;
      __int16 v52 = "nw_ws_write_header";
      __int16 v53 = 2082;
      __int16 v54 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v30, v38, "%{public}s called with null framer, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_66:

    free(backtrace_string);
    goto LABEL_102;
  }
  if (a7) {
    int v15 = 0x8000;
  }
  else {
    int v15 = 0;
  }
  if (((a3 != 0) & a6) != 0) {
    int v16 = 0x4000;
  }
  else {
    int v16 = 0;
  }
  unsigned int v17 = (v15 & 0xFFFFFF7F | (a3 << 8) | v16 & 0xFFFFFF7F | (((*(unsigned __int16 *)(a1 + 225) >> 2) & 1) << 7)) ^ 0x80;
  if (a5 < 0x10000) {
    int v18 = 126;
  }
  else {
    int v18 = 127;
  }
  BOOL v19 = a4 != 1005 && a3 == 8;
  int v20 = a5 + 2;
  if (!v19) {
    int v20 = a5;
  }
  if (a5 <= 0x7D) {
    int v18 = v20;
  }
  unsigned int v21 = v17 | v18;
  *(_WORD *)output_buffer = bswap32(v17 | v18) >> 16;
  nw_framer_write_output(v13, output_buffer, 2uLL);
  if (gLogDatapath)
  {
    __int16 v34 = __nwlog_obj();
    if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)int buf = 136447490;
      __int16 v52 = "nw_ws_write_header";
      __int16 v53 = 2082;
      __int16 v54 = (char *)(a1 + 227);
      __int16 v55 = 1024;
      *(_DWORD *)__int16 v56 = (v21 >> 15) & 1;
      *(_WORD *)&v56[4] = 1024;
      *(_DWORD *)&v56[6] = (v21 >> 8) & 0xF;
      *(_WORD *)unsigned int v57 = 1024;
      *(_DWORD *)&void v57[2] = (v21 >> 7) & 1;
      __int16 v58 = 1024;
      int v59 = v21 & 0x7F;
      _os_log_impl(&dword_1830D4000, v34, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s output base header = {fin: %u, opcode: %u, mask: %u, payload: %u}", buf, 0x2Eu);
    }
  }
  if ((v21 & 0x7F) == 0x7F)
  {
    *(void *)uint64_t v49 = bswap64(a5);
    nw_framer_write_output(v14, v49, 8uLL);
    if (gLogDatapath)
    {
      uint64_t v22 = __nwlog_obj();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)int buf = 136446722;
        __int16 v52 = "nw_ws_write_header";
        __int16 v53 = 2082;
        __int16 v54 = (char *)(a1 + 227);
        __int16 v55 = 2048;
        *(void *)__int16 v56 = a5;
        _os_log_impl(&dword_1830D4000, v22, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s output extended payload(64) = %llu", buf, 0x20u);
      }
      goto LABEL_25;
    }
  }
  else if ((v21 & 0x7F) == 0x7E)
  {
    *(_WORD *)uint64_t v49 = bswap32(a5) >> 16;
    nw_framer_write_output(v14, v49, 2uLL);
    if (gLogDatapath)
    {
      uint64_t v22 = __nwlog_obj();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)int buf = 136446722;
        __int16 v52 = "nw_ws_write_header";
        __int16 v53 = 2082;
        __int16 v54 = (char *)(a1 + 227);
        __int16 v55 = 1024;
        *(_DWORD *)__int16 v56 = (unsigned __int16)a5;
        _os_log_impl(&dword_1830D4000, v22, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s output extended payload(16) = %hu", buf, 0x1Cu);
      }
LABEL_25:
    }
  }
  __int16 v23 = *(_WORD *)(a1 + 225);
  if (a3 == 8)
  {
    v23 |= 0x20u;
    *(_WORD *)(a1 + 225) = v23;
  }
  if ((v23 & 4) != 0)
  {
    if (a3 == 8 && a4 != 1005)
    {
      if (a5 >= 0x7C)
      {
        char v43 = __nwlog_obj();
        if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)int buf = 136446210;
          __int16 v52 = "nw_ws_write_header";
          _os_log_impl(&dword_1830D4000, v43, OS_LOG_TYPE_ERROR, "%{public}s ws.output: attempted to send close frame of >125 bytes", buf, 0xCu);
        }
LABEL_80:

LABEL_42:
        uint64_t v26 = 0;
        goto LABEL_43;
      }
      *(_WORD *)uint64_t v49 = bswap32(a4) >> 16;
      nw_framer_write_output(v14, v49, 2uLL);
      if (gLogDatapath)
      {
        uint64_t v45 = __nwlog_obj();
        if (os_log_type_enabled(v45, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)int buf = 136446722;
          __int16 v52 = "nw_ws_write_header";
          __int16 v53 = 2082;
          __int16 v54 = (char *)(a1 + 227);
          __int16 v55 = 1024;
          *(_DWORD *)__int16 v56 = *(unsigned __int16 *)v49;
          _os_log_impl(&dword_1830D4000, v45, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s output wrote unmasked close code %hu", buf, 0x1Cu);
        }
      }
    }
    if (gLogDatapath)
    {
      os_log_type_t v42 = __nwlog_obj();
      if (os_log_type_enabled(v42, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)int buf = 136446722;
        __int16 v52 = "nw_ws_write_header";
        __int16 v53 = 2082;
        __int16 v54 = (char *)(a1 + 227);
        __int16 v55 = 1024;
        *(_DWORD *)__int16 v56 = 0;
        _os_log_impl(&dword_1830D4000, v42, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s output masking_key = %u", buf, 0x1Cu);
      }
    }
    goto LABEL_42;
  }
  *(_DWORD *)uint64_t v49 = arc4random_uniform(0xFFFFFFFF);
  nw_framer_write_output(v14, v49, 4uLL);
  if (a3 == 8 && a4 != 1005)
  {
    if (a5 < 0x7C)
    {
      unsigned int v24 = bswap32(a4);
      v48[0] = v49[0] ^ BYTE2(v24);
      v48[1] = v49[1] ^ HIBYTE(v24);
      nw_framer_write_output(v14, v48, 2uLL);
      if (gLogDatapath)
      {
        __int16 v44 = __nwlog_obj();
        if (os_log_type_enabled(v44, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)int buf = 136446722;
          __int16 v52 = "nw_ws_write_header";
          __int16 v53 = 2082;
          __int16 v54 = (char *)(a1 + 227);
          __int16 v55 = 1024;
          *(_DWORD *)__int16 v56 = *(unsigned __int16 *)v48;
          _os_log_impl(&dword_1830D4000, v44, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s output wrote masked close code %hu", buf, 0x1Cu);
        }
      }
      __int16 v25 = *(_WORD *)v49;
      v49[0] = v49[2];
      v49[1] = v49[3];
      *(_WORD *)&v49[2] = v25;
      goto LABEL_35;
    }
    char v43 = __nwlog_obj();
    if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136446210;
      __int16 v52 = "nw_ws_write_header";
      _os_log_impl(&dword_1830D4000, v43, OS_LOG_TYPE_ERROR, "%{public}s ws.output: attempted to send close frame of >125 bytes", buf, 0xCu);
    }
    goto LABEL_80;
  }
LABEL_35:
  if (gLogDatapath)
  {
    char v40 = __nwlog_obj();
    if (os_log_type_enabled(v40, OS_LOG_TYPE_DEBUG))
    {
      BOOL v41 = "server";
      BOOL v19 = (*(_WORD *)(a1 + 225) & 4) == 0;
      __int16 v52 = "nw_ws_write_header";
      *(_DWORD *)int buf = 136446978;
      if (v19) {
        BOOL v41 = "client";
      }
      __int16 v53 = 2082;
      __int16 v54 = (char *)(a1 + 227);
      __int16 v55 = 2082;
      *(void *)__int16 v56 = v41;
      *(_WORD *)&v56[8] = 1024;
      *(_DWORD *)unsigned int v57 = *(_DWORD *)v49;
      _os_log_impl(&dword_1830D4000, v40, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s %{public}s output masking_key = %u", buf, 0x26u);
    }
  }
  uint64_t v26 = *(unsigned int *)v49;
LABEL_43:

  return v26;
}

void sub_18365E524(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_protocol_copy_ws_definition_block_invoke_10(uint64_t a1, const UInt8 *a2, unint64_t numBytes)
{
  unint64_t v3 = 0;
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  if (!a2 || !numBytes) {
    return v3;
  }
  if (CFHTTPMessageAppendBytes(*(CFHTTPMessageRef *)(*(void *)(*(void *)(a1 + 40) + 8) + 72), a2, numBytes))
  {
    if (!CFHTTPMessageIsHeaderComplete(*(CFHTTPMessageRef *)(*(void *)(*(void *)(a1 + 40) + 8) + 72)))
    {
      unint64_t v3 = numBytes;
LABEL_32:
      *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 80) += v3;
      if (gLogDatapath)
      {
        int v27 = __nwlog_obj();
        if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v28 = *(void *)(*(void *)(a1 + 40) + 8);
          unint64_t v29 = v28 + 275;
          uint64_t v30 = *(void *)(v28 + 80);
          *(_DWORD *)int buf = 136446722;
          __int16 v34 = "nw_protocol_copy_ws_definition_block_invoke";
          __int16 v35 = 2082;
          unint64_t v36 = v29;
          __int16 v37 = 2048;
          uint64_t v38 = v30;
          _os_log_impl(&dword_1830D4000, v27, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s Appended %zu bytes to http_message", buf, 0x20u);
        }
      }
      return v3;
    }
    CFDataRef Length = CFHTTPMessageCopyBody(*(CFHTTPMessageRef *)(*(void *)(*(void *)(a1 + 40) + 8) + 72));
    CFDataRef v7 = Length;
    if (Length) {
      CFDataRef Length = (const __CFData *)CFDataGetLength(Length);
    }
    *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = Length;
    unint64_t v8 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
    unint64_t v3 = numBytes - v8;
    if (numBytes >= v8)
    {
LABEL_29:
      if (v7) {
        CFRelease(v7);
      }
      *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = 1;
      goto LABEL_32;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v9 = (id)gLogObj;
    uint64_t v10 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
    *(_DWORD *)int buf = 136446722;
    __int16 v34 = "nw_protocol_copy_ws_definition_block_invoke";
    __int16 v35 = 2048;
    unint64_t v36 = v3;
    __int16 v37 = 2048;
    uint64_t v38 = v10;
    int v11 = (void *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v31 = 0;
    if (!__nwlog_fault((const char *)v11, &type, &v31))
    {
LABEL_26:
      if (v11) {
        free(v11);
      }
      unint64_t v3 = 0;
      goto LABEL_29;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v12 = (id)gLogObj;
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        uint64_t v14 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
        *(_DWORD *)int buf = 136446722;
        __int16 v34 = "nw_protocol_copy_ws_definition_block_invoke";
        __int16 v35 = 2048;
        unint64_t v36 = v3;
        __int16 v37 = 2048;
        uint64_t v38 = v14;
        int v15 = "%{public}s UNDERFLOW: buffer length = %zu, body length = %zu";
LABEL_23:
        __int16 v23 = v12;
        os_log_type_t v24 = v13;
LABEL_24:
        _os_log_impl(&dword_1830D4000, v23, v24, v15, buf, 0x20u);
      }
    }
    else
    {
      if (v31)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v12 = (id)gLogObj;
        os_log_type_t v19 = type;
        BOOL v20 = os_log_type_enabled(v12, type);
        if (backtrace_string)
        {
          if (v20)
          {
            uint64_t v21 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
            *(_DWORD *)int buf = 136446978;
            __int16 v34 = "nw_protocol_copy_ws_definition_block_invoke";
            __int16 v35 = 2048;
            unint64_t v36 = v3;
            __int16 v37 = 2048;
            uint64_t v38 = v21;
            __int16 v39 = 2082;
            char v40 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v12, v19, "%{public}s UNDERFLOW: buffer CFIndex length = %zu, body CFIndex length = %zu, dumping backtrace:%{public}s", buf, 0x2Au);
          }

          free(backtrace_string);
          goto LABEL_26;
        }
        if (!v20) {
          goto LABEL_25;
        }
        uint64_t v26 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
        *(_DWORD *)int buf = 136446722;
        __int16 v34 = "nw_protocol_copy_ws_definition_block_invoke";
        __int16 v35 = 2048;
        unint64_t v36 = v3;
        __int16 v37 = 2048;
        uint64_t v38 = v26;
        int v15 = "%{public}s UNDERFLOW: buffer length = %zu, body length = %zu, no backtrace";
        __int16 v23 = v12;
        os_log_type_t v24 = v19;
        goto LABEL_24;
      }
      int v12 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        uint64_t v22 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
        *(_DWORD *)int buf = 136446722;
        __int16 v34 = "nw_protocol_copy_ws_definition_block_invoke";
        __int16 v35 = 2048;
        unint64_t v36 = v3;
        __int16 v37 = 2048;
        uint64_t v38 = v22;
        int v15 = "%{public}s UNDERFLOW: buffer length = %zu, body length = %zu, backtrace limit exceeded";
        goto LABEL_23;
      }
    }
LABEL_25:

    goto LABEL_26;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  int v16 = (id)gLogObj;
  if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
  {
    uint64_t v17 = *(void *)(*(void *)(a1 + 40) + 8) + 275;
    *(_DWORD *)int buf = 136446466;
    __int16 v34 = "nw_protocol_copy_ws_definition_block_invoke";
    __int16 v35 = 2082;
    unint64_t v36 = v17;
    _os_log_impl(&dword_1830D4000, v16, OS_LOG_TYPE_ERROR, "%{public}s %{public}s CFHTTPMessageAppendBytes", buf, 0x16u);
  }

  nw_framer_mark_failed_with_error(*(nw_framer_t *)(a1 + 32), 12);
  return 1;
}

BOOL __nw_protocol_copy_ws_definition_block_invoke_27(uint64_t a1, const uint8_t *a2, unint64_t a3, uint64_t a4, int a5)
{
  unint64_t v5 = a2;
  uint64_t v116 = *MEMORY[0x1E4F143B8];
  if (gLogDatapath)
  {
    int v63 = a5;
    uint64_t v64 = __nwlog_obj();
    if (os_log_type_enabled(v64, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v65 = *(void *)(*(void *)(a1 + 48) + 8) + 275;
      *(_DWORD *)int buf = 136446722;
      *(void *)&uint8_t buf[4] = "nw_protocol_copy_ws_definition_block_invoke";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v65;
      *(_WORD *)&unsigned char buf[22] = 2048;
      *(void *)int v104 = a3;
      _os_log_impl(&dword_1830D4000, v64, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s input parse_input got %zu bytes", buf, 0x20u);
    }

    a5 = v63;
    if (!v5) {
      goto LABEL_8;
    }
  }
  else if (!a2)
  {
    goto LABEL_8;
  }
  if (a3)
  {
    uint64_t v7 = *(void *)(*(void *)(a1 + 48) + 8);
    int v8 = *(_DWORD *)(v7 + 232);
    if (v8 == 1 || !v8 && *(unsigned char *)(v7 + 272))
    {
      int v9 = a5;
      char v10 = nw_utf8_validator_parse((char *)(v7 + 270), (uint64_t)v5, a3, a5);
      a5 = v9;
      if ((v10 & 1) == 0)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v17 = (id)gLogObj;
        if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
        {
          uint64_t v18 = *(void *)(*(void *)(a1 + 48) + 8) + 275;
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_copy_ws_definition_block_invoke";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v18;
          _os_log_impl(&dword_1830D4000, v17, OS_LOG_TYPE_ERROR, "%{public}s %{public}s received invalid utf-8 sequence", buf, 0x16u);
        }

        a3 = 0;
        *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = 1;
        return a3;
      }
    }
  }
LABEL_8:
  uint64_t v11 = *(void *)(*(void *)(a1 + 48) + 8);
  if (!a5)
  {
    if ((*(unsigned char *)(v11 + 232) & 8) != 0) {
      return a3;
    }
LABEL_17:
    int v16 = 0;
    goto LABEL_66;
  }
  int v12 = *(_DWORD *)(v11 + 232);
  if (v12 != 8)
  {
    if (v12 != 10)
    {
      if (v12 == 9)
      {
        int v13 = a5;
        uint64_t v14 = *(id *)(a1 + 32);
        if (v14)
        {
          if (gLogDatapath)
          {
            uint64_t v79 = __nwlog_obj();
            if (os_log_type_enabled(v79, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v80 = *(void *)(v11 + 160);
              uint64_t v81 = *(void *)(v11 + 136);
              *(_DWORD *)int buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_ws_process_ping_frame";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = v11 + 275;
              *(_WORD *)&unsigned char buf[22] = 1040;
              *(_DWORD *)int v104 = v80;
              *(_WORD *)&v104[4] = 2096;
              *(void *)&void v104[6] = v81;
              _os_log_impl(&dword_1830D4000, v79, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s got ping frame '%{network:data}.*P'", buf, 0x26u);
            }
          }
          nw_protocol_options_t v15 = nw_framer_copy_options(v14);
          *(void *)int buf = MEMORY[0x1E4F143A8];
          *(void *)&buf[8] = 3221225472;
          *(void *)&buf[16] = ___ZL24nw_ws_process_ping_frameP13nw_ws_state_tPU23objcproto12OS_nw_framer8NSObject_block_invoke;
          *(void *)int v104 = &unk_1E5249070;
          *(void *)&v104[16] = v11 + 48;
          *(void *)&v104[8] = v14;
          nw_protocol_options_access_handle(v15, buf);

LABEL_15:
          int v16 = 0;
          a5 = v13;
          goto LABEL_66;
        }
        os_log_type_t v71 = __nwlog_obj();
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_ws_process_ping_frame";
        uint64_t v72 = (char *)_os_log_send_and_compose_impl();

        LOBYTE(block) = 16;
        LOBYTE(v99) = 0;
        if (__nwlog_fault(v72, &block, &v99))
        {
          if (block == 17)
          {
            uint64_t v73 = __nwlog_obj();
            os_log_type_t v74 = block;
            if (os_log_type_enabled(v73, (os_log_type_t)block))
            {
              *(_DWORD *)int buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_ws_process_ping_frame";
              _os_log_impl(&dword_1830D4000, v73, v74, "%{public}s called with null framer", buf, 0xCu);
            }
          }
          else if ((_BYTE)v99)
          {
            backtrace_string = (char *)__nw_create_backtrace_string();
            uint64_t v73 = __nwlog_obj();
            os_log_type_t v83 = block;
            BOOL v84 = os_log_type_enabled(v73, (os_log_type_t)block);
            if (backtrace_string)
            {
              if (v84)
              {
                *(_DWORD *)int buf = 136446466;
                *(void *)&uint8_t buf[4] = "nw_ws_process_ping_frame";
                *(_WORD *)&buf[12] = 2082;
                *(void *)&buf[14] = backtrace_string;
                _os_log_impl(&dword_1830D4000, v73, v83, "%{public}s called with null framer, dumping backtrace:%{public}s", buf, 0x16u);
              }

              free(backtrace_string);
              goto LABEL_141;
            }
            if (v84)
            {
              *(_DWORD *)int buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_ws_process_ping_frame";
              _os_log_impl(&dword_1830D4000, v73, v83, "%{public}s called with null framer, no backtrace", buf, 0xCu);
            }
          }
          else
          {
            uint64_t v73 = __nwlog_obj();
            os_log_type_t v88 = block;
            if (os_log_type_enabled(v73, (os_log_type_t)block))
            {
              *(_DWORD *)int buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_ws_process_ping_frame";
              _os_log_impl(&dword_1830D4000, v73, v88, "%{public}s called with null framer, backtrace limit exceeded", buf, 0xCu);
            }
          }
        }
LABEL_141:
        if (v72) {
          free(v72);
        }
        goto LABEL_15;
      }
      goto LABEL_17;
    }
    *(_DWORD *)is_complete = a5;
    if (*(void *)(v11 + 136))
    {
      if (gLogDatapath)
      {
        os_log_type_t v19 = __nwlog_obj();
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v20 = *(void *)(v11 + 160);
          uint64_t v21 = *(void *)(v11 + 136);
          *(_DWORD *)int buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_ws_process_pong_frame";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v11 + 275;
          *(_WORD *)&unsigned char buf[22] = 1040;
          *(_DWORD *)int v104 = v20;
          *(_WORD *)&v104[4] = 2096;
          *(void *)&void v104[6] = v21;
          uint64_t v22 = "%{public}s %{public}s got pong frame '%{network:data}.*P'";
          __int16 v23 = v19;
          uint32_t v24 = 38;
LABEL_130:
          _os_log_impl(&dword_1830D4000, v23, OS_LOG_TYPE_DEBUG, v22, buf, v24);
          goto LABEL_131;
        }
        goto LABEL_131;
      }
    }
    else if (gLogDatapath)
    {
      os_log_type_t v19 = __nwlog_obj();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)int buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_ws_process_pong_frame";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v11 + 275;
        uint64_t v22 = "%{public}s %{public}s got empty pong frame, looking for first empty pong handler";
        __int16 v23 = v19;
        uint32_t v24 = 22;
        goto LABEL_130;
      }
LABEL_131:
    }
    dispatch_data_t v34 = (dispatch_data_t)MEMORY[0x1E4F14410];
    id v35 = MEMORY[0x1E4F14410];
    unint64_t v36 = *(const void **)(v11 + 136);
    if (v36)
    {
      dispatch_data_t v34 = dispatch_data_create(v36, *(void *)(v11 + 160), 0, 0);
    }
    uint64_t v99 = 0;
    uint64_t v100 = &v99;
    uint64_t v101 = 0x2020000000;
    __int16 v37 = *(atomic_uchar **)(v11 + 104);
    uint64_t v102 = 0;
    *(void *)int buf = MEMORY[0x1E4F143A8];
    *(void *)&buf[8] = 3221225472;
    *(void *)&buf[16] = ___ZL24nw_ws_process_pong_frameP13nw_ws_state_t_block_invoke;
    *(void *)int v104 = &unk_1E524A2E8;
    os_log_type_t v92 = v34;
    *(void *)&v104[8] = v92;
    *(void *)&v104[16] = &v99;
    if (!nw_array_apply(v37, (uint64_t)buf))
    {
      BOOL v38 = nw_array_create();
      unint64_t v39 = 0;
      char v40 = *(void **)(v11 + 104);
      if (v40)
      {
        while (1)
        {
          if (v39 >= (uint64_t)(v40[3] - v40[2]) >> 3) {
            goto LABEL_64;
          }
          uint64_t v41 = nw_array_get_object_at_index((uint64_t)v40, v39);
          os_log_type_t v42 = v41;
          if (v39 <= v100[3]) {
            break;
          }
          uint64_t v43 = nw_array_get_object_at_index(*(void *)(v11 + 104), v39);
          nw_array_append(v38, (void *)v43);
LABEL_60:

          ++v39;
          char v40 = *(void **)(v11 + 104);
          if (!v40) {
            goto LABEL_64;
          }
        }
        uint64_t v43 = (uint64_t)nw_ws_ping_request_copy_pong_handler(v41);
        id v44 = nw_ws_ping_request_copy_client_queue(v42);
        uint64_t v45 = v44;
        if (v43 && v44)
        {
          uint64_t block = MEMORY[0x1E4F143A8];
          uint64_t v112 = 3221225472;
          uint64_t v113 = ___ZL24nw_ws_process_pong_frameP13nw_ws_state_t_block_invoke_2;
          os_log_type_t v114 = &unk_1E524AFA8;
          __int16 v115 = (id)v43;
          dispatch_async(v45, &block);
          os_log_type_t v46 = v115;
        }
        else
        {
          if (!(v43 | (unint64_t)v44)) {
            goto LABEL_59;
          }
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v46 = (id)gLogObj;
          if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)uint64_t v107 = 136446466;
            os_log_type_t v108 = "nw_ws_process_pong_frame";
            __int16 v109 = 2082;
            uint64_t v110 = v11 + 275;
            _os_log_impl(&dword_1830D4000, v46, OS_LOG_TYPE_ERROR, "%{public}s %{public}s pong handler and client queue should both be nil", v107, 0x16u);
          }
        }

LABEL_59:
        goto LABEL_60;
      }
LABEL_64:
      *(void *)(v11 + 104) = v38;
    }
    _Block_object_dispose(&v99, 8);

    int v16 = 0;
    a5 = *(_DWORD *)is_complete;
LABEL_66:
    uint64_t v47 = *(void *)(*(void *)(a1 + 48) + 8);
    size_t v48 = a3;
    if ((*(unsigned char *)(v47 + 232) & 8) != 0)
    {
      unint64_t v5 = *(const uint8_t **)(v47 + 136);
      size_t v48 = *(void *)(v47 + 160);
    }
    uint64_t v49 = *(NSObject **)(a1 + 32);
    if (v5 && v48)
    {
      int v50 = a5;
      nw_framer_deliver_input(v49, v5, v48, *(nw_framer_message_t *)(a1 + 40), a5);
      uint64_t block = 0;
      uint64_t v112 = 0;
      LOBYTE(v113) = 0;
      if (v48 >= 0x10) {
        size_t v51 = 16;
      }
      else {
        size_t v51 = v48;
      }
      strncpy((char *)&block, (const char *)v5, v51);
      if (!gLogDatapath) {
        goto LABEL_80;
      }
      __int16 v52 = __nwlog_obj();
      if (os_log_type_enabled(v52, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v53 = *(void *)(a1 + 40);
        __int16 v54 = "";
        uint64_t v55 = *(void *)(*(void *)(a1 + 48) + 8) + 275;
        if (v50) {
          __int16 v54 = ", complete";
        }
        *(_DWORD *)int buf = 136447490;
        *(void *)&uint8_t buf[4] = "nw_protocol_copy_ws_definition_block_invoke";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v55;
        *(_WORD *)&unsigned char buf[22] = 2082;
        *(void *)int v104 = &block;
        *(_WORD *)&v104[8] = 2048;
        *(void *)&v104[10] = v53;
        *(_WORD *)&v104[18] = 2048;
        *(void *)&v104[20] = v48;
        __int16 v105 = 2082;
        uint64_t v106 = v54;
        _os_log_impl(&dword_1830D4000, v52, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s input delivering input '%{public}s' %p (%zu bytes)%{public}s", buf, 0x3Eu);
      }
    }
    else
    {
      int v56 = a5;
      nw_framer_deliver_input_no_copy(v49, 0, *(nw_framer_message_t *)(a1 + 40), a5);
      if (!gLogDatapath)
      {
LABEL_80:
        if (v16)
        {
          unsigned int v57 = *(void **)(a1 + 32);
          async_block[0] = MEMORY[0x1E4F143A8];
          async_block[1] = 3221225472;
          async_block[2] = __nw_protocol_copy_ws_definition_block_invoke_30;
          async_block[3] = &unk_1E524A1F8;
          uint64_t v97 = *(void *)(a1 + 48);
          int v98 = v16;
          uint64_t v96 = v57;
          nw_framer_async(v96, async_block);
        }
        return a3;
      }
      __int16 v52 = __nwlog_obj();
      if (os_log_type_enabled(v52, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v66 = *(void *)(a1 + 40);
        uint64_t v67 = *(void *)(*(void *)(a1 + 48) + 8);
        uint64_t v68 = v67 + 275;
        uint64_t v69 = *(void *)(v67 + 160);
        uint64_t v70 = "";
        if (v56) {
          uint64_t v70 = ", complete";
        }
        *(_DWORD *)int buf = 136447234;
        *(void *)&uint8_t buf[4] = "nw_protocol_copy_ws_definition_block_invoke";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v68;
        *(_WORD *)&unsigned char buf[22] = 2048;
        *(void *)int v104 = v66;
        *(_WORD *)&v104[8] = 2048;
        *(void *)&v104[10] = v69;
        *(_WORD *)&v104[18] = 2082;
        *(void *)&v104[20] = v70;
        _os_log_impl(&dword_1830D4000, v52, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s input delivering input %p (%zu bytes)%{public}s", buf, 0x34u);
      }
    }

    goto LABEL_80;
  }
  int v25 = a5;
  uint64_t v26 = *(void **)(a1 + 40);
  id v27 = *(id *)(a1 + 32);
  uint64_t v28 = v26;
  if (!v27)
  {
    BOOL v75 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_ws_process_close_frame";
    uint64_t v76 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(block) = 16;
    LOBYTE(v99) = 0;
    if (__nwlog_fault(v76, &block, &v99))
    {
      if (block == 17)
      {
        uint64_t v77 = __nwlog_obj();
        os_log_type_t v78 = block;
        if (os_log_type_enabled(v77, (os_log_type_t)block))
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_ws_process_close_frame";
          _os_log_impl(&dword_1830D4000, v77, v78, "%{public}s called with null framer", buf, 0xCu);
        }
      }
      else if ((_BYTE)v99)
      {
        int v85 = (char *)__nw_create_backtrace_string();
        uint64_t v77 = __nwlog_obj();
        os_log_type_t v86 = block;
        BOOL v87 = os_log_type_enabled(v77, (os_log_type_t)block);
        if (v85)
        {
          if (v87)
          {
            *(_DWORD *)int buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_ws_process_close_frame";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v85;
            _os_log_impl(&dword_1830D4000, v77, v86, "%{public}s called with null framer, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v85);
          goto LABEL_146;
        }
        if (v87)
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_ws_process_close_frame";
          _os_log_impl(&dword_1830D4000, v77, v86, "%{public}s called with null framer, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        uint64_t v77 = __nwlog_obj();
        os_log_type_t v89 = block;
        if (os_log_type_enabled(v77, (os_log_type_t)block))
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_ws_process_close_frame";
          _os_log_impl(&dword_1830D4000, v77, v89, "%{public}s called with null framer, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_146:
    if (v76) {
      free(v76);
    }
    goto LABEL_35;
  }
  unint64_t v29 = *(unsigned __int16 **)(v11 + 136);
  if (!v29 || (unint64_t v30 = *(void *)(v11 + 160), v30 < 2))
  {
    if (gLogDatapath)
    {
      unsigned int v61 = __nwlog_obj();
      if (os_log_type_enabled(v61, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)int buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_ws_process_close_frame";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v11 + 275;
        _os_log_impl(&dword_1830D4000, v61, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s got close frame with no close code", buf, 0x16u);
      }
      nw_ws_close_code_t v32 = nw_ws_close_code_no_status_received;
      goto LABEL_117;
    }
    nw_ws_close_code_t v32 = nw_ws_close_code_no_status_received;
LABEL_38:
    if ((*(_WORD *)(v11 + 273) & 0x20) == 0) {
      nw_ws_write_control_frame(v11 + 48, v27, 8, v32, *(void *)(v11 + 136), *(void *)(v11 + 160));
    }
    if (v32 == nw_ws_close_code_message_too_big) {
      int v16 = 40;
    }
    else {
      int v16 = 57;
    }
    goto LABEL_43;
  }
  unsigned int v31 = *v29;
  nw_ws_close_code_t v32 = __rev16(v31);
  BOOL v33 = v31 != 63235 && (unsigned __int16)(v32 - 1007) >= 5u;
  if (v33 && (unsigned __int16)(v32 - 3000) >= 0x7D0u && (v32 & 0xFFFC) != 0x3E8)
  {
LABEL_35:
    int v16 = 22;
LABEL_43:

    a5 = v25;
    goto LABEL_66;
  }
  unint64_t v59 = v30 - 2;
  *(void *)(v11 + 160) = v30 - 2;
  if (v30 == 2)
  {
    uint64_t v60 = 0;
    goto LABEL_88;
  }
  uint64_t v60 = malloc_type_malloc(v30 - 2, 0xF2B69DE5uLL);
  if (v60)
  {
LABEL_85:
    memcpy(v60, (const void *)(*(void *)(v11 + 136) + 2), *(void *)(v11 + 160));
    unint64_t v29 = *(unsigned __int16 **)(v11 + 136);
    if (!v29)
    {
LABEL_89:
      *(void *)(v11 + 136) = v60;
      nw_ws_metadata_set_close_code(v28, v32);
      if (gLogDatapath)
      {
        unsigned int v61 = __nwlog_obj();
        if (os_log_type_enabled(v61, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v62 = *(void *)(v11 + 160);
          *(_DWORD *)int buf = 136447234;
          *(void *)&uint8_t buf[4] = "nw_ws_process_close_frame";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v11 + 275;
          *(_WORD *)&unsigned char buf[22] = 1040;
          *(_DWORD *)int v104 = v62;
          *(_WORD *)&v104[4] = 2082;
          *(void *)&void v104[6] = v60;
          *(_WORD *)&v104[14] = 1024;
          *(_DWORD *)&v104[16] = v32;
          _os_log_impl(&dword_1830D4000, v61, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s got close frame '%{public}.*s (%u)", buf, 0x2Cu);
        }
LABEL_117:

        goto LABEL_38;
      }
      goto LABEL_38;
    }
LABEL_88:
    free(v29);
    *(void *)(v11 + 136) = 0;
    goto LABEL_89;
  }
  uint64_t v90 = __nwlog_obj();
  os_log_type_enabled(v90, OS_LOG_TYPE_ERROR);
  *(_DWORD *)int buf = 136446466;
  *(void *)&uint8_t buf[4] = "strict_malloc";
  *(_WORD *)&buf[12] = 2048;
  *(void *)&buf[14] = v59;
  BOOL v93 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v93);
  if (!result)
  {
    free(v93);
    goto LABEL_85;
  }
  __break(1u);
  return result;
}

void sub_18365FB0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL ___ZL17nw_ws_parse_inputPU23objcproto12OS_nw_framer8NSObjectP13nw_ws_state_tmmPhU13block_pointerFmS4_mbbE_block_invoke(uint64_t a1, uint64_t a2, const char *a3)
{
  unint64_t v3 = a3;
  uint64_t v75 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(a1 + 48);
  if ((*(_WORD *)(v6 + 216) & 0x80) != 0)
  {
    if (!a3) {
      goto LABEL_14;
    }
  }
  else
  {
    if (*(void *)(v6 + 88)) {
      BOOL v7 = a3 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (v7) {
      goto LABEL_14;
    }
  }
  int v8 = 0;
  do
  {
    char v9 = *(unsigned char *)(*(void *)(a1 + 48)
                  + (((_BYTE)v8 + *(_DWORD *)(*(void *)(a1 + 48) + 120)) & 3)
                  + 204) ^ v8[a2];
    v8[a2] = v9;
    uint64_t v10 = *(void *)(a1 + 48);
    uint64_t v11 = *(void *)(v10 + 88);
    if (v11) {
      v8[v11 + *(void *)(v10 + 120)] = v9;
    }
    ++v8;
  }
  while (a3 != v8);
  uint64_t v6 = *(void *)(a1 + 48);
LABEL_14:
  int v12 = &a3[*(void *)(v6 + 120)];
  *(void *)(v6 + 120) = v12;
  __int16 v13 = *(_WORD *)(v6 + 225);
  BOOL v14 = (v13 & 8) != 0 && v12 == *(const char **)(v6 + 112);
  if (gLogDatapath)
  {
    uint64_t v53 = __nwlog_obj();
    if (os_log_type_enabled(v53, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v54 = *(void *)(a1 + 48);
      uint64_t v55 = (const char *)(v54 + 227);
      int v56 = *(const char **)(v54 + 120);
      if (!v54) {
        uint64_t v55 = "";
      }
      int v57 = (*(unsigned __int16 *)(v54 + 225) >> 11) & 1;
      *(_DWORD *)int buf = 136447234;
      uint64_t v66 = "nw_ws_parse_input_block_invoke";
      __int16 v67 = 2082;
      uint64_t v68 = (uint64_t)v55;
      __int16 v69 = 2048;
      uint64_t v70 = v56;
      __int16 v71 = 1024;
      int v72 = v57;
      __int16 v73 = 1024;
      BOOL v74 = v14;
      _os_log_impl(&dword_1830D4000, v53, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s input input_itr=%zu, inflating = %d, is_final = %d", buf, 0x2Cu);
    }

    uint64_t v6 = *(void *)(a1 + 48);
    __int16 v13 = *(_WORD *)(v6 + 225);
  }
  nw_protocol_options_t v15 = *(void **)(v6 + 196);
  if ((v13 & 0xA00) == 0)
  {
    if (v15) {
      nw_ws_metadata_set_permessage_deflate(v15, 0);
    }
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
    return (BOOL)v3;
  }
  nw_ws_metadata_set_permessage_deflate(v15, 1u);
  *(_WORD *)(*(void *)(a1 + 48) + 225) |= 0x800u;
  uint64_t v16 = *(void *)(*(void *)(a1 + 48) + 64);
  if (v16)
  {
LABEL_20:
    *(_DWORD *)(v16 + 8) = v3;
    *(void *)uint64_t v16 = a2;
    BOOL v17 = v14;
    while (1)
    {
      unsigned int v30 = inflate(*(z_streamp *)(*(void *)(a1 + 48) + 64), 2);
      int v31 = v30;
      if (v30 > 1)
      {
        if (v30 != -5)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v26 = (id)gLogObj;
          if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
          {
            uint64_t v49 = *(void *)(a1 + 48);
            int v50 = zError(v31);
            size_t v51 = (const char *)(v49 + 227);
            *(_DWORD *)int buf = 136446722;
            if (!v49) {
              size_t v51 = "";
            }
            uint64_t v66 = "nw_ws_parse_input_block_invoke";
            __int16 v67 = 2082;
            uint64_t v68 = (uint64_t)v51;
            __int16 v69 = 2080;
            uint64_t v70 = v50;
            _os_log_impl(&dword_1830D4000, v26, OS_LOG_TYPE_ERROR, "%{public}s %{public}s inflate returned %s", buf, 0x20u);
          }
          goto LABEL_69;
        }
        if (gLogDatapath)
        {
          os_log_type_t v42 = __nwlog_obj();
          if (os_log_type_enabled(v42, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v43 = *(void *)(a1 + 48);
            id v44 = (const char *)(v43 + 227);
            BOOL v7 = v43 == 0;
            uint64_t v45 = "";
            if (!v7) {
              uint64_t v45 = v44;
            }
            *(_DWORD *)int buf = 136446722;
            uint64_t v66 = "nw_ws_parse_input_block_invoke";
            __int16 v67 = 2082;
            uint64_t v68 = (uint64_t)v45;
            __int16 v69 = 2048;
            uint64_t v70 = v3;
            _os_log_impl(&dword_1830D4000, v42, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s finished processing %zu bytes of compressed data", buf, 0x20u);
          }
        }
        if (!v14) {
          return (BOOL)v3;
        }
        if (!v17)
        {
          (*(void (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), 0);
          *(_WORD *)(*(void *)(a1 + 48) + 225) &= ~0x800u;
          return (BOOL)v3;
        }
        if (gLogDatapath)
        {
          BOOL v38 = __nwlog_obj();
          if (os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v39 = *(void *)(a1 + 48);
            char v40 = (const char *)(v39 + 227);
            BOOL v7 = v39 == 0;
            uint64_t v41 = "";
            if (!v7) {
              uint64_t v41 = v40;
            }
            *(_DWORD *)int buf = 136446466;
            uint64_t v66 = "nw_ws_parse_input_block_invoke";
            __int16 v67 = 2082;
            uint64_t v68 = (uint64_t)v41;
            _os_log_impl(&dword_1830D4000, v38, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s adding trailer to last compressed payload in message", buf, 0x16u);
          }
        }
        BOOL v17 = 0;
        uint64_t v29 = *(void *)(*(void *)(a1 + 48) + 64);
        *(_DWORD *)(v29 + 8) = 4;
        *(void *)uint64_t v29 = &inflate_final_payload_trailer;
      }
      else
      {
        if (v30 == 1) {
          inflateReset(*(z_streamp *)(*(void *)(a1 + 48) + 64));
        }
        nw_ws_close_code_t v32 = *(void **)(a1 + 48);
        uint64_t v33 = v32[18];
        uint64_t v34 = *(unsigned int *)(v32[8] + 32);
        id v35 = (const char *)(v33 - v34);
        if (v33 != v34)
        {
          if (gLogDatapath)
          {
            os_log_t log = __nwlog_obj();
            if (os_log_type_enabled(log, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v46 = *(void *)(a1 + 48);
              uint64_t v47 = (const char *)(v46 + 227);
              BOOL v7 = v46 == 0;
              size_t v48 = "";
              if (!v7) {
                size_t v48 = v47;
              }
              *(_DWORD *)int buf = 136446722;
              uint64_t v66 = "nw_ws_parse_input_block_invoke";
              __int16 v67 = 2082;
              uint64_t v68 = (uint64_t)v48;
              __int16 v69 = 2048;
              uint64_t v70 = v35;
              _os_log_impl(&dword_1830D4000, log, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s delivering %zu bytes of uncompressed data", buf, 0x20u);
            }

            nw_ws_close_code_t v32 = *(void **)(a1 + 48);
          }
          (*(void (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), v32[10]);
          unint64_t v36 = *(void **)(a1 + 48);
          uint64_t v37 = v36[8];
          *(_DWORD *)(v37 + 32) = v36[18];
          *(void *)(v37 + 24) = v36[10];
        }
      }
      if (v31 == 1) {
        return (BOOL)v3;
      }
    }
  }
  uint64_t v18 = malloc_type_malloc(0x70uLL, 0xF2B69DE5uLL);
  if (!v18)
  {
    __int16 v58 = __nwlog_obj();
    os_log_type_enabled(v58, OS_LOG_TYPE_ERROR);
    *(_DWORD *)int buf = 136446466;
    uint64_t v66 = "strict_malloc";
    __int16 v67 = 2048;
    uint64_t v68 = 112;
    unint64_t v59 = (void *)_os_log_send_and_compose_impl();

    BOOL result = __nwlog_abort((uint64_t)v59);
    if (result) {
      goto LABEL_83;
    }
    free(v59);
  }
  *(void *)(*(void *)(a1 + 48) + 64) = v18;
  size_t v19 = *(void *)(*(void *)(a1 + 48) + 144);
  if (!v19)
  {
    uint64_t v60 = __nwlog_obj();
    os_log_type_enabled(v60, OS_LOG_TYPE_ERROR);
    *(_DWORD *)int buf = 136446210;
    uint64_t v66 = "strict_malloc";
    unsigned int v61 = (void *)_os_log_send_and_compose_impl();

    BOOL result = __nwlog_abort((uint64_t)v61);
    if (result) {
      goto LABEL_83;
    }
    free(v61);
  }
  uint64_t v20 = malloc_type_malloc(v19, 0xF2B69DE5uLL);
  if (v20)
  {
LABEL_27:
    *(void *)(*(void *)(a1 + 48) + 80) = v20;
    uint64_t v21 = *(void **)(a1 + 48);
    uint64_t v22 = v21[8];
    *(_DWORD *)(v22 + 32) = v21[18];
    *(void *)(v22 + 24) = v21[10];
    *(void *)(*(void *)(*(void *)(a1 + 48) + 64) + 64) = 0;
    *(void *)(*(void *)(*(void *)(a1 + 48) + 64) + 72) = 0;
    *(void *)(*(void *)(*(void *)(a1 + 48) + 64) + 80) = 0;
    uint64_t v23 = *(void *)(a1 + 48);
    uint64_t v24 = 220;
    if ((*(_WORD *)(v23 + 225) & 4) != 0) {
      uint64_t v24 = 221;
    }
    int v25 = inflateInit2_(*(z_streamp *)(v23 + 64), -*(unsigned __int8 *)(v23 + v24), "1.2.12", 112);
    if (!v25)
    {
      uint64_t v16 = *(void *)(*(void *)(a1 + 48) + 64);
      goto LABEL_20;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v26 = (id)gLogObj;
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      uint64_t v27 = *(void *)(a1 + 48);
      *(_DWORD *)int buf = 136446722;
      uint64_t v66 = "nw_ws_parse_input_block_invoke";
      if (v27) {
        uint64_t v28 = (const char *)(v27 + 227);
      }
      else {
        uint64_t v28 = "";
      }
      __int16 v67 = 2082;
      uint64_t v68 = (uint64_t)v28;
      __int16 v69 = 1024;
      LODWORD(v70) = v25;
      _os_log_impl(&dword_1830D4000, v26, OS_LOG_TYPE_ERROR, "%{public}s %{public}s inflateInit2 returned %d", buf, 0x1Cu);
    }
LABEL_69:

    nw_framer_mark_failed_with_error(*(nw_framer_t *)(a1 + 32), 100);
    return 1;
  }
  uint64_t v62 = __nwlog_obj();
  os_log_type_enabled(v62, OS_LOG_TYPE_ERROR);
  *(_DWORD *)int buf = 136446466;
  uint64_t v66 = "strict_malloc";
  __int16 v67 = 2048;
  uint64_t v68 = v19;
  int v63 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v63);
  if (!result)
  {
    free(v63);
    goto LABEL_27;
  }
LABEL_83:
  __break(1u);
  return result;
}

void sub_183660480(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL24nw_ws_process_ping_frameP13nw_ws_state_tPU23objcproto12OS_nw_framer8NSObject_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a2 + 70))
  {
    nw_ws_write_control_frame(*(void *)(a1 + 40), *(void **)(a1 + 32), 10, 0x3EDu, *(void *)(*(void *)(a1 + 40) + 88), *(void *)(*(void *)(a1 + 40) + 112));
    if (gLogDatapath)
    {
      id v4 = __nwlog_obj();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v5 = *(void *)(a1 + 40);
        uint64_t v6 = (const char *)(v5 + 227);
        if (!v5) {
          uint64_t v6 = "";
        }
        uint64_t v7 = *(void *)(v5 + 112);
        uint64_t v8 = *(void *)(v5 + 88);
        int v9 = 136446978;
        uint64_t v10 = "nw_ws_process_ping_frame_block_invoke";
        __int16 v11 = 2082;
        int v12 = v6;
        __int16 v13 = 1040;
        int v14 = v7;
        __int16 v15 = 2096;
        uint64_t v16 = v8;
        _os_log_impl(&dword_1830D4000, v4, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s replying to ping frame '%{network:data}.*P'", (uint8_t *)&v9, 0x26u);
      }
    }
  }
  return 1;
}

BOOL ___ZL24nw_ws_process_pong_frameP13nw_ws_state_t_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a3;
  uint64_t v6 = v5;
  if (v5)
  {
    uint64_t v7 = v5[1];
    goto LABEL_3;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v10 = (id)gLogObj;
  *(_DWORD *)int buf = 136446210;
  uint64_t v21 = "nw_ws_ping_request_copy_contents";
  __int16 v11 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v18 = 0;
  if (__nwlog_fault(v11, &type, &v18))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v12 = (id)gLogObj;
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v21 = "nw_ws_ping_request_copy_contents";
        _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s called with null ping_request", buf, 0xCu);
      }
    }
    else if (v18)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v12 = (id)gLogObj;
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v12, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)int buf = 136446466;
          uint64_t v21 = "nw_ws_ping_request_copy_contents";
          __int16 v22 = 2082;
          uint64_t v23 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v12, v15, "%{public}s called with null ping_request, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v16)
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v21 = "nw_ws_ping_request_copy_contents";
        _os_log_impl(&dword_1830D4000, v12, v15, "%{public}s called with null ping_request, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v12 = (id)gLogObj;
      os_log_type_t v17 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v21 = "nw_ws_ping_request_copy_contents";
        _os_log_impl(&dword_1830D4000, v12, v17, "%{public}s called with null ping_request, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_22:
  if (v11) {
    free(v11);
  }
  uint64_t v7 = 0;
LABEL_3:

  BOOL is_equal = nw_dispatch_data_is_equal(v7, *(NSObject **)(a1 + 32));
  if (is_equal) {
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = a2;
  }
  return !is_equal;
}

uint64_t ___ZL24nw_ws_process_pong_frameP13nw_ws_state_t_block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void nw_ws_write_control_frame(uint64_t a1, void *a2, int a3, unsigned int a4, uint64_t a5, unint64_t a6)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  __int16 v11 = a2;
  if (!a1)
  {
    os_log_type_t v15 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v28 = "nw_ws_write_control_frame";
    BOOL v16 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (__nwlog_fault(v16, type, &v26))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v17 = __nwlog_obj();
        os_log_type_t v18 = type[0];
        if (os_log_type_enabled(v17, type[0]))
        {
          *(_DWORD *)int buf = 136446210;
          uint64_t v28 = "nw_ws_write_control_frame";
          _os_log_impl(&dword_1830D4000, v17, v18, "%{public}s called with null state", buf, 0xCu);
        }
      }
      else if (v26)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v17 = __nwlog_obj();
        os_log_type_t v20 = type[0];
        BOOL v21 = os_log_type_enabled(v17, type[0]);
        if (backtrace_string)
        {
          if (v21)
          {
            *(_DWORD *)int buf = 136446466;
            uint64_t v28 = "nw_ws_write_control_frame";
            __int16 v29 = 2082;
            unint64_t v30 = (unint64_t)backtrace_string;
            _os_log_impl(&dword_1830D4000, v17, v20, "%{public}s called with null state, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_27;
        }
        if (v21)
        {
          *(_DWORD *)int buf = 136446210;
          uint64_t v28 = "nw_ws_write_control_frame";
          _os_log_impl(&dword_1830D4000, v17, v20, "%{public}s called with null state, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        os_log_type_t v17 = __nwlog_obj();
        os_log_type_t v24 = type[0];
        if (os_log_type_enabled(v17, type[0]))
        {
          *(_DWORD *)int buf = 136446210;
          uint64_t v28 = "nw_ws_write_control_frame";
          _os_log_impl(&dword_1830D4000, v17, v24, "%{public}s called with null state, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_27:
    if (v16) {
      free(v16);
    }
    goto LABEL_8;
  }
  *(_DWORD *)os_log_type_t type = nw_ws_write_header(a1, v11, a3, a4, a6, 0, 1);
  if (!a5 || !a6) {
    goto LABEL_8;
  }
  int v12 = malloc_type_malloc(a6, 0xF2B69DE5uLL);
  if (v12)
  {
LABEL_5:
    uint64_t v13 = 0;
    do
    {
      v12[v13] = *(unsigned char *)((unint64_t)type | v13 & 3) ^ *(unsigned char *)(a5 + v13);
      ++v13;
    }
    while (a6 != v13);
    int v14 = dispatch_data_create(v12, a6, 0, (dispatch_block_t)*MEMORY[0x1E4F143F0]);
    nw_framer_write_output_data(v11, v14);

LABEL_8:
    return;
  }
  __int16 v22 = __nwlog_obj();
  os_log_type_enabled(v22, OS_LOG_TYPE_ERROR);
  *(_DWORD *)int buf = 136446466;
  uint64_t v28 = "strict_malloc";
  __int16 v29 = 2048;
  unint64_t v30 = a6;
  uint64_t v23 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v23))
  {
    free(v23);
    goto LABEL_5;
  }
  __break(1u);
}

void sub_183660CF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __nw_protocol_copy_ws_definition_block_invoke_30(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (gLogDatapath)
  {
    uint64_t v2 = __nwlog_obj();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8) + 275;
      int v4 = *(_DWORD *)(a1 + 48);
      int v5 = 136446722;
      uint64_t v6 = "nw_protocol_copy_ws_definition_block_invoke";
      __int16 v7 = 2082;
      uint64_t v8 = v3;
      __int16 v9 = 1024;
      int v10 = v4;
      _os_log_impl(&dword_1830D4000, v2, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s marking failed with error code %d", (uint8_t *)&v5, 0x1Cu);
    }
  }
  nw_framer_mark_failed_with_error(*(nw_framer_t *)(a1 + 32), *(_DWORD *)(a1 + 48));
}

uint64_t __nw_protocol_copy_ws_definition_block_invoke_24(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a3 < 4 || a2 == 0) {
    return 0;
  }
  else {
    return 4;
  }
}

uint64_t __nw_protocol_copy_ws_definition_block_invoke_21(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a3 < 2 || a2 == 0) {
    return 0;
  }
  else {
    return 2;
  }
}

uint64_t __nw_protocol_copy_ws_definition_block_invoke_18(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a3 < 8 || a2 == 0) {
    return 0;
  }
  else {
    return 8;
  }
}

uint64_t __nw_protocol_copy_ws_definition_block_invoke_14(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a3 < 2 || a2 == 0) {
    return 0;
  }
  else {
    return 2;
  }
}

uint64_t __Block_byref_object_copy__3858(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__3859(uint64_t a1)
{
}

BOOL ___ZL61nw_protocol_instance_registrar_copy_tls_metadata_for_protocolP41NWConcrete_nw_protocol_instance_registrarP11nw_protocol_block_invoke(void *a1, uint64_t a2, void *a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  int v5 = a3;
  BOOL is_tls = nw_protocol_metadata_is_tls(v5);
  if (is_tls)
  {
    if (gLogDatapath)
    {
      uint64_t v8 = __nwlog_obj();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v9 = a1[4];
        uint64_t v10 = a1[6];
        int v11 = 136446978;
        int v12 = "nw_protocol_instance_registrar_copy_tls_metadata_for_protocol_block_invoke";
        __int16 v13 = 2112;
        uint64_t v14 = v9;
        __int16 v15 = 2112;
        BOOL v16 = v5;
        __int16 v17 = 2048;
        uint64_t v18 = v10;
        _os_log_impl(&dword_1830D4000, v8, OS_LOG_TYPE_DEBUG, "%{public}s %@ found TLS metadata %@ for protocol %p", (uint8_t *)&v11, 0x2Au);
      }
    }
    objc_storeStrong((id *)(*(void *)(a1[5] + 8) + 40), a3);
  }

  return !is_tls;
}

void sub_1836610E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL62nw_protocol_instance_registrar_copy_san_list_from_tls_metadataP41NWConcrete_nw_protocol_instance_registrarP11nw_protocolPU34objcproto23OS_nw_protocol_metadata8NSObjectt_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a2;
  if (gLogDatapath)
  {
    BOOL v21 = __nwlog_obj();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v22 = *(void *)(a1 + 56);
      uint64_t v23 = *(char **)(a1 + 32);
      uint64_t v24 = *(void *)(a1 + 40);
      int buf = 136447234;
      BOOL v38 = "nw_protocol_instance_registrar_copy_san_list_from_tls_metadata_block_invoke";
      __int16 v39 = 2112;
      char v40 = v23;
      __int16 v41 = 2048;
      uint64_t v42 = v22;
      __int16 v43 = 2112;
      uint64_t v44 = v24;
      __int16 v45 = 2112;
      uint64_t v46 = v3;
      _os_log_impl(&dword_1830D4000, v21, OS_LOG_TYPE_DEBUG, "%{public}s %@ protocol %p, tls metdata %@ found certificate: %@", (uint8_t *)&buf, 0x34u);
    }
  }
  SecCertificateRef cf = sec_certificate_copy_ref(v3);
  long long v34 = 0u;
  long long v35 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  id obj = (id)SecCertificateCopyDNSNames();
  uint64_t v4 = [obj countByEnumeratingWithState:&v32 objects:v36 count:16];
  if (v4)
  {
    uint64_t v5 = *(void *)v33;
    uint64_t v28 = v3;
    do
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        if (*(void *)v33 != v5) {
          objc_enumerationMutation(obj);
        }
        __int16 v7 = *(char **)(*((void *)&v32 + 1) + 8 * i);
        if (gLogDatapath)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v20 = (id)gLogObj;
          if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
          {
            int buf = 136446466;
            BOOL v38 = "nw_protocol_instance_registrar_copy_san_list_from_tls_metadata_block_invoke";
            __int16 v39 = 2112;
            char v40 = v7;
            _os_log_impl(&dword_1830D4000, v20, OS_LOG_TYPE_DEBUG, "%{public}s \tgot dns name: %@", (uint8_t *)&buf, 0x16u);
          }
        }
        uint64_t v8 = (const char *)objc_msgSend(v7, "UTF8String", p_buf, v26);
        if (v8)
        {
          BOOL host_with_numeric_port = nw_endpoint_create_host_with_numeric_port(v8, *(unsigned __int16 *)(a1 + 64));
          nw_array_append(*(void *)(a1 + 48), (void *)host_with_numeric_port);

          continue;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v10 = (id)gLogObj;
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        {
          int buf = 136446466;
          BOOL v38 = "nw_protocol_instance_registrar_copy_san_list_from_tls_metadata_block_invoke";
          __int16 v39 = 2112;
          char v40 = v7;
          _os_log_impl(&dword_1830D4000, v10, OS_LOG_TYPE_ERROR, "%{public}s failed to get UTF8 string from name %@", (uint8_t *)&buf, 0x16u);
        }

        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v11 = (id)gLogObj;
        int buf = 136446210;
        BOOL v38 = "nw_protocol_instance_registrar_copy_san_list_from_tls_metadata_block_invoke";
        LODWORD(v26) = 12;
        p_int buf = &buf;
        int v12 = (char *)_os_log_send_and_compose_impl();

        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v30 = 0;
        if (!__nwlog_fault(v12, &type, &v30)) {
          goto LABEL_18;
        }
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          __int16 v13 = (id)gLogObj;
          os_log_type_t v14 = type;
          if (os_log_type_enabled(v13, type))
          {
            int buf = 136446210;
            BOOL v38 = "nw_protocol_instance_registrar_copy_san_list_from_tls_metadata_block_invoke";
            _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s failed to get UTF8 string from DNS name", (uint8_t *)&buf, 0xCu);
          }
          goto LABEL_17;
        }
        if (!v30)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          __int16 v13 = (id)gLogObj;
          os_log_type_t v19 = type;
          if (os_log_type_enabled(v13, type))
          {
            int buf = 136446210;
            BOOL v38 = "nw_protocol_instance_registrar_copy_san_list_from_tls_metadata_block_invoke";
            _os_log_impl(&dword_1830D4000, v13, v19, "%{public}s failed to get UTF8 string from DNS name, backtrace limit exceeded", (uint8_t *)&buf, 0xCu);
          }
LABEL_17:

          uint64_t v3 = v28;
LABEL_18:
          if (!v12) {
            continue;
          }
LABEL_19:
          free(v12);
          continue;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v16 = (id)gLogObj;
        os_log_type_t v17 = type;
        BOOL v18 = os_log_type_enabled(v16, type);
        if (!backtrace_string)
        {
          if (v18)
          {
            int buf = 136446210;
            BOOL v38 = "nw_protocol_instance_registrar_copy_san_list_from_tls_metadata_block_invoke";
            _os_log_impl(&dword_1830D4000, v16, v17, "%{public}s failed to get UTF8 string from DNS name, no backtrace", (uint8_t *)&buf, 0xCu);
          }

          uint64_t v3 = v28;
          goto LABEL_18;
        }
        if (v18)
        {
          int buf = 136446466;
          BOOL v38 = "nw_protocol_instance_registrar_copy_san_list_from_tls_metadata_block_invoke";
          __int16 v39 = 2082;
          char v40 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v16, v17, "%{public}s failed to get UTF8 string from DNS name, dumping backtrace:%{public}s", (uint8_t *)&buf, 0x16u);
        }

        uint64_t v3 = v28;
        free(backtrace_string);
        if (v12) {
          goto LABEL_19;
        }
      }
      uint64_t v4 = [obj countByEnumeratingWithState:&v32 objects:v36 count:16];
    }
    while (v4);
  }

  if (cf) {
    CFRelease(cf);
  }
}

void sub_1836616D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL62nw_protocol_instance_registrar_copy_san_list_from_tls_metadataP41NWConcrete_nw_protocol_instance_registrarP11nw_protocolPU34objcproto23OS_nw_protocol_metadata8NSObjectt_block_invoke_73(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = *(id *)(a1 + 32);
  id v6 = v4;
  __int16 v7 = v6;
  if (!v5)
  {
    id v11 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_instance_registrar_array_contains_endpoint";
    int v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v28 = 0;
    if (!__nwlog_fault(v12, &type, &v28)) {
      goto LABEL_39;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int16 v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_instance_registrar_array_contains_endpoint";
        _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s called with null array", buf, 0xCu);
      }
    }
    else if (v28)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __int16 v13 = __nwlog_obj();
      os_log_type_t v18 = type;
      BOOL v19 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_instance_registrar_array_contains_endpoint";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v13, v18, "%{public}s called with null array, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        if (!v12) {
          goto LABEL_41;
        }
        goto LABEL_40;
      }
      if (v19)
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_instance_registrar_array_contains_endpoint";
        _os_log_impl(&dword_1830D4000, v13, v18, "%{public}s called with null array, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __int16 v13 = __nwlog_obj();
      os_log_type_t v23 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_instance_registrar_array_contains_endpoint";
        _os_log_impl(&dword_1830D4000, v13, v23, "%{public}s called with null array, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_38;
  }
  if (!v6)
  {
    __int16 v15 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_instance_registrar_array_contains_endpoint";
    int v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v28 = 0;
    if (!__nwlog_fault(v12, &type, &v28)) {
      goto LABEL_39;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int16 v13 = __nwlog_obj();
      os_log_type_t v16 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_instance_registrar_array_contains_endpoint";
        _os_log_impl(&dword_1830D4000, v13, v16, "%{public}s called with null endpoint", buf, 0xCu);
      }
    }
    else if (v28)
    {
      os_log_type_t v20 = (char *)__nw_create_backtrace_string();
      __int16 v13 = __nwlog_obj();
      os_log_type_t v21 = type;
      BOOL v22 = os_log_type_enabled(v13, type);
      if (v20)
      {
        if (v22)
        {
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_instance_registrar_array_contains_endpoint";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v20;
          _os_log_impl(&dword_1830D4000, v13, v21, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v20);
LABEL_39:
        if (!v12)
        {
LABEL_41:

          goto LABEL_4;
        }
LABEL_40:
        free(v12);
        goto LABEL_41;
      }
      if (v22)
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_instance_registrar_array_contains_endpoint";
        _os_log_impl(&dword_1830D4000, v13, v21, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __int16 v13 = __nwlog_obj();
      os_log_type_t v24 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_instance_registrar_array_contains_endpoint";
        _os_log_impl(&dword_1830D4000, v13, v24, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_38:

    goto LABEL_39;
  }
  *(void *)int buf = 0;
  *(void *)&buf[8] = buf;
  *(void *)&buf[16] = 0x2020000000;
  char v31 = 0;
  v25[0] = MEMORY[0x1E4F143A8];
  v25[1] = 3221225472;
  v25[2] = ___ZL54nw_protocol_instance_registrar_array_contains_endpointPU22objcproto11OS_nw_array8NSObjectPU25objcproto14OS_nw_endpointS__block_invoke;
  v25[3] = &unk_1E524A2E8;
  id v8 = v6;
  id v26 = v8;
  uint64_t v27 = buf;
  nw_array_apply((atomic_uchar *)v5, (uint64_t)v25);
  BOOL v9 = *(unsigned char *)(*(void *)&buf[8] + 24) == 0;

  _Block_object_dispose(buf, 8);
  if (v9) {
LABEL_4:
  }
    nw_array_append(*(void *)(a1 + 32), v7);

  return 1;
}

uint64_t __nw_protocol_instance_registrar_add_edges_for_instance_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v101 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = *(void **)(a1 + 40);
  id v6 = *(void **)(a1 + 48);
  uint64_t v7 = *(void *)(a1 + 56);
  id v8 = (char *)*(id *)(a1 + 32);
  id v9 = v5;
  id v10 = v4;
  id v11 = v6;
  int v12 = v11;
  if (!v8)
  {
    uint64_t v27 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v86 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
    char v28 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v83 = 0;
    if (!__nwlog_fault(v28, &type, &v83)) {
      goto LABEL_153;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int16 v29 = __nwlog_obj();
      os_log_type_t v30 = type;
      if (os_log_type_enabled(v29, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v86 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
        _os_log_impl(&dword_1830D4000, v29, v30, "%{public}s called with null registrar", buf, 0xCu);
      }
    }
    else if (v83)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __int16 v29 = __nwlog_obj();
      os_log_type_t v42 = type;
      BOOL v43 = os_log_type_enabled(v29, type);
      if (backtrace_string)
      {
        if (v43)
        {
          *(_DWORD *)int buf = 136446466;
          os_log_type_t v86 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
          __int16 v87 = 2082;
          os_log_type_t v88 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v29, v42, "%{public}s called with null registrar, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_153:
        if (!v28) {
          goto LABEL_26;
        }
LABEL_154:
        free(v28);
        goto LABEL_26;
      }
      if (v43)
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v86 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
        _os_log_impl(&dword_1830D4000, v29, v42, "%{public}s called with null registrar, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __int16 v29 = __nwlog_obj();
      os_log_type_t v74 = type;
      if (os_log_type_enabled(v29, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v86 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
        _os_log_impl(&dword_1830D4000, v29, v74, "%{public}s called with null registrar, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_152:

    goto LABEL_153;
  }
  if (!v7)
  {
    char v31 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v86 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
    char v28 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v83 = 0;
    if (!__nwlog_fault(v28, &type, &v83)) {
      goto LABEL_153;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int16 v29 = __nwlog_obj();
      os_log_type_t v32 = type;
      if (os_log_type_enabled(v29, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v86 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
        _os_log_impl(&dword_1830D4000, v29, v32, "%{public}s called with null protocol", buf, 0xCu);
      }
      goto LABEL_152;
    }
    if (!v83)
    {
      __int16 v29 = __nwlog_obj();
      os_log_type_t v75 = type;
      if (os_log_type_enabled(v29, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v86 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
        _os_log_impl(&dword_1830D4000, v29, v75, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_152;
    }
    uint64_t v44 = (char *)__nw_create_backtrace_string();
    __int16 v29 = __nwlog_obj();
    os_log_type_t v45 = type;
    BOOL v46 = os_log_type_enabled(v29, type);
    if (!v44)
    {
      if (v46)
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v86 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
        _os_log_impl(&dword_1830D4000, v29, v45, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
      goto LABEL_152;
    }
    if (v46)
    {
      *(_DWORD *)int buf = 136446466;
      os_log_type_t v86 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
      __int16 v87 = 2082;
      os_log_type_t v88 = v44;
      _os_log_impl(&dword_1830D4000, v29, v45, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_91;
  }
  if (!*(void *)(v7 + 16))
  {
    long long v33 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v86 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
    char v28 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v83 = 0;
    if (!__nwlog_fault(v28, &type, &v83)) {
      goto LABEL_153;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int16 v29 = __nwlog_obj();
      os_log_type_t v34 = type;
      if (os_log_type_enabled(v29, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v86 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
        _os_log_impl(&dword_1830D4000, v29, v34, "%{public}s called with null protocol->identifier", buf, 0xCu);
      }
      goto LABEL_152;
    }
    if (!v83)
    {
      __int16 v29 = __nwlog_obj();
      os_log_type_t v76 = type;
      if (os_log_type_enabled(v29, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v86 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
        _os_log_impl(&dword_1830D4000, v29, v76, "%{public}s called with null protocol->identifier, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_152;
    }
    uint64_t v44 = (char *)__nw_create_backtrace_string();
    __int16 v29 = __nwlog_obj();
    os_log_type_t v47 = type;
    BOOL v48 = os_log_type_enabled(v29, type);
    if (!v44)
    {
      if (v48)
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v86 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
        _os_log_impl(&dword_1830D4000, v29, v47, "%{public}s called with null protocol->identifier, no backtrace", buf, 0xCu);
      }
      goto LABEL_152;
    }
    if (v48)
    {
      *(_DWORD *)int buf = 136446466;
      os_log_type_t v86 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
      __int16 v87 = 2082;
      os_log_type_t v88 = v44;
      _os_log_impl(&dword_1830D4000, v29, v47, "%{public}s called with null protocol->identifier, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_91;
  }
  if (!v9)
  {
    long long v35 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v86 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
    char v28 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v83 = 0;
    if (!__nwlog_fault(v28, &type, &v83)) {
      goto LABEL_153;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int16 v29 = __nwlog_obj();
      os_log_type_t v36 = type;
      if (os_log_type_enabled(v29, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v86 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
        _os_log_impl(&dword_1830D4000, v29, v36, "%{public}s called with null to_endpoint", buf, 0xCu);
      }
      goto LABEL_152;
    }
    if (!v83)
    {
      __int16 v29 = __nwlog_obj();
      os_log_type_t v77 = type;
      if (os_log_type_enabled(v29, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v86 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
        _os_log_impl(&dword_1830D4000, v29, v77, "%{public}s called with null to_endpoint, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_152;
    }
    uint64_t v44 = (char *)__nw_create_backtrace_string();
    __int16 v29 = __nwlog_obj();
    os_log_type_t v49 = type;
    BOOL v50 = os_log_type_enabled(v29, type);
    if (!v44)
    {
      if (v50)
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v86 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
        _os_log_impl(&dword_1830D4000, v29, v49, "%{public}s called with null to_endpoint, no backtrace", buf, 0xCu);
      }
      goto LABEL_152;
    }
    if (v50)
    {
      *(_DWORD *)int buf = 136446466;
      os_log_type_t v86 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
      __int16 v87 = 2082;
      os_log_type_t v88 = v44;
      _os_log_impl(&dword_1830D4000, v29, v49, "%{public}s called with null to_endpoint, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_91;
  }
  if (!v10)
  {
    uint64_t v37 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v86 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
    char v28 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v83 = 0;
    if (!__nwlog_fault(v28, &type, &v83)) {
      goto LABEL_153;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int16 v29 = __nwlog_obj();
      os_log_type_t v38 = type;
      if (os_log_type_enabled(v29, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v86 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
        _os_log_impl(&dword_1830D4000, v29, v38, "%{public}s called with null from_endpoint", buf, 0xCu);
      }
      goto LABEL_152;
    }
    if (!v83)
    {
      __int16 v29 = __nwlog_obj();
      os_log_type_t v78 = type;
      if (os_log_type_enabled(v29, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v86 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
        _os_log_impl(&dword_1830D4000, v29, v78, "%{public}s called with null from_endpoint, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_152;
    }
    uint64_t v44 = (char *)__nw_create_backtrace_string();
    __int16 v29 = __nwlog_obj();
    os_log_type_t v51 = type;
    BOOL v52 = os_log_type_enabled(v29, type);
    if (!v44)
    {
      if (v52)
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v86 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
        _os_log_impl(&dword_1830D4000, v29, v51, "%{public}s called with null from_endpoint, no backtrace", buf, 0xCu);
      }
      goto LABEL_152;
    }
    if (v52)
    {
      *(_DWORD *)int buf = 136446466;
      os_log_type_t v86 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
      __int16 v87 = 2082;
      os_log_type_t v88 = v44;
      _os_log_impl(&dword_1830D4000, v29, v51, "%{public}s called with null from_endpoint, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_91;
  }
  if (!v11)
  {
    __int16 v39 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v86 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
    char v28 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v83 = 0;
    if (!__nwlog_fault(v28, &type, &v83)) {
      goto LABEL_153;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int16 v29 = __nwlog_obj();
      os_log_type_t v40 = type;
      if (os_log_type_enabled(v29, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v86 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
        _os_log_impl(&dword_1830D4000, v29, v40, "%{public}s called with null parameters", buf, 0xCu);
      }
      goto LABEL_152;
    }
    if (!v83)
    {
      __int16 v29 = __nwlog_obj();
      os_log_type_t v79 = type;
      if (os_log_type_enabled(v29, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v86 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
        _os_log_impl(&dword_1830D4000, v29, v79, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_152;
    }
    uint64_t v44 = (char *)__nw_create_backtrace_string();
    __int16 v29 = __nwlog_obj();
    os_log_type_t v57 = type;
    BOOL v58 = os_log_type_enabled(v29, type);
    if (!v44)
    {
      if (v58)
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v86 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
        _os_log_impl(&dword_1830D4000, v29, v57, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
      goto LABEL_152;
    }
    if (v58)
    {
      *(_DWORD *)int buf = 136446466;
      os_log_type_t v86 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
      __int16 v87 = 2082;
      os_log_type_t v88 = v44;
      _os_log_impl(&dword_1830D4000, v29, v57, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_91:

    free(v44);
    if (!v28) {
      goto LABEL_26;
    }
    goto LABEL_154;
  }
  __int16 v13 = v9;
  char v14 = v13[231];

  id v15 = v13;
  if ((v14 & 4) != 0) {
    goto LABEL_11;
  }
  os_log_type_t v16 = v12;
  id v17 = *(id *)(v16[13] + 136);

  if (!v17)
  {
    uint64_t v53 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v86 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
    uint64_t v54 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v83 = 0;
    if (__nwlog_fault(v54, &type, &v83))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v55 = __nwlog_obj();
        os_log_type_t v56 = type;
        if (os_log_type_enabled(v55, type))
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v86 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
          _os_log_impl(&dword_1830D4000, v55, v56, "%{public}s called with null context", buf, 0xCu);
        }
      }
      else if (v83)
      {
        uint64_t v68 = (char *)__nw_create_backtrace_string();
        uint64_t v55 = __nwlog_obj();
        os_log_type_t v69 = type;
        BOOL v70 = os_log_type_enabled(v55, type);
        if (v68)
        {
          if (v70)
          {
            *(_DWORD *)int buf = 136446466;
            os_log_type_t v86 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
            __int16 v87 = 2082;
            os_log_type_t v88 = v68;
            _os_log_impl(&dword_1830D4000, v55, v69, "%{public}s called with null context, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v68);
          goto LABEL_164;
        }
        if (v70)
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v86 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
          _os_log_impl(&dword_1830D4000, v55, v69, "%{public}s called with null context, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        uint64_t v55 = __nwlog_obj();
        os_log_type_t v80 = type;
        if (os_log_type_enabled(v55, type))
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v86 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
          _os_log_impl(&dword_1830D4000, v55, v80, "%{public}s called with null context, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_164:
    if (v54) {
      free(v54);
    }
    goto LABEL_25;
  }
  id v15 = nw_context_copy_registered_endpoint_internal(v17, v13, 0);

  if (gLogDatapath)
  {
    int v63 = __nwlog_obj();
    if (os_log_type_enabled(v63, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v64 = *(void *)(v7 + 16);
      *(_DWORD *)int buf = 136448002;
      os_log_type_t v86 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
      __int16 v87 = 2112;
      os_log_type_t v88 = v8;
      __int16 v89 = 2048;
      uint64_t v90 = v7;
      __int16 v91 = 2080;
      uint64_t v92 = v64;
      __int16 v93 = 2112;
      os_log_type_t v94 = v13;
      __int16 v95 = 2048;
      uint64_t v96 = v13;
      __int16 v97 = 2112;
      id v98 = v15;
      __int16 v99 = 2048;
      id v100 = v15;
      _os_log_impl(&dword_1830D4000, v63, OS_LOG_TYPE_DEBUG, "%{public}s %@ instance %p of %s replacing unregistered endpoint %@ (%p) with endpoint %@ (%p)", buf, 0x52u);
    }
  }
LABEL_11:
  os_log_type_t v18 = v10;
  BOOL v19 = (v18[231] & 4) == 0;

  if (v19)
  {
    os_log_type_t v20 = v12;
    id v21 = *(id *)(v20[13] + 136);

    if (v21)
    {
      id v22 = nw_context_copy_registered_endpoint_internal(v21, v18, 0);

      if (gLogDatapath)
      {
        os_log_t log = __nwlog_obj();
        if (os_log_type_enabled(log, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v67 = *(void *)(v7 + 16);
          *(_DWORD *)int buf = 136448002;
          os_log_type_t v86 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
          __int16 v87 = 2112;
          os_log_type_t v88 = v8;
          __int16 v89 = 2048;
          uint64_t v90 = v7;
          __int16 v91 = 2080;
          uint64_t v92 = v67;
          __int16 v93 = 2112;
          os_log_type_t v94 = v18;
          __int16 v95 = 2048;
          uint64_t v96 = v18;
          __int16 v97 = 2112;
          id v98 = v22;
          __int16 v99 = 2048;
          id v100 = v22;
          _os_log_impl(&dword_1830D4000, log, OS_LOG_TYPE_DEBUG, "%{public}s %@ instance %p of %s replacing unregistered endpoint %@ (%p) with endpoint %@ (%p)", buf, 0x52u);
        }
      }
      goto LABEL_16;
    }
    unint64_t v59 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v86 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
    uint64_t v60 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v83 = 0;
    if (__nwlog_fault(v60, &type, &v83))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        unsigned int v61 = __nwlog_obj();
        os_log_type_t v62 = type;
        if (os_log_type_enabled(v61, type))
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v86 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
          _os_log_impl(&dword_1830D4000, v61, v62, "%{public}s called with null context", buf, 0xCu);
        }
      }
      else if (v83)
      {
        __int16 v71 = (char *)__nw_create_backtrace_string();
        unsigned int v61 = __nwlog_obj();
        os_log_type_t v72 = type;
        BOOL v73 = os_log_type_enabled(v61, type);
        if (v71)
        {
          if (v73)
          {
            *(_DWORD *)int buf = 136446466;
            os_log_type_t v86 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
            __int16 v87 = 2082;
            os_log_type_t v88 = v71;
            _os_log_impl(&dword_1830D4000, v61, v72, "%{public}s called with null context, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v71);
          goto LABEL_169;
        }
        if (v73)
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v86 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
          _os_log_impl(&dword_1830D4000, v61, v72, "%{public}s called with null context, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        unsigned int v61 = __nwlog_obj();
        os_log_type_t v81 = type;
        if (os_log_type_enabled(v61, type))
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v86 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
          _os_log_impl(&dword_1830D4000, v61, v81, "%{public}s called with null context, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_169:
    if (v60) {
      free(v60);
    }
    goto LABEL_24;
  }
  id v22 = v18;
LABEL_16:
  if (nw_endpoint_is_equal(v22, v15, 31))
  {
    if (gLogDatapath)
    {
      os_log_type_t v23 = __nwlog_obj();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v24 = *(void *)(v7 + 16);
        *(_DWORD *)int buf = 136447490;
        os_log_type_t v86 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
        __int16 v87 = 2112;
        os_log_type_t v88 = v8;
        __int16 v89 = 2048;
        uint64_t v90 = v7;
        __int16 v91 = 2080;
        uint64_t v92 = v24;
        __int16 v93 = 2112;
        os_log_type_t v94 = v22;
        __int16 v95 = 2112;
        uint64_t v96 = v15;
        _os_log_impl(&dword_1830D4000, v23, OS_LOG_TYPE_DEBUG, "%{public}s %@ instance %p of %s source and destination endpoints (%@ -> %@) are the same, skipping", buf, 0x3Eu);
      }
    }
  }
  else
  {
    int v25 = nw_endpoint_edge_create(v15, *(long long **)(v7 + 16), 0);
    nw_endpoint_add_edge(v22, v25);
    if (gLogDatapath)
    {
      uint64_t v65 = __nwlog_obj();
      if (os_log_type_enabled(v65, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v66 = *(void *)(v7 + 16);
        *(_DWORD *)int buf = 136447490;
        os_log_type_t v86 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
        __int16 v87 = 2112;
        os_log_type_t v88 = v8;
        __int16 v89 = 2048;
        uint64_t v90 = v7;
        __int16 v91 = 2080;
        uint64_t v92 = v66;
        __int16 v93 = 2112;
        os_log_type_t v94 = v22;
        __int16 v95 = 2112;
        uint64_t v96 = v15;
        _os_log_impl(&dword_1830D4000, v65, OS_LOG_TYPE_DEBUG, "%{public}s %@ instance %p of %s added edge from endpoint %@ to endpoint %@", buf, 0x3Eu);
      }
    }
  }
  os_log_type_t v18 = v22;
LABEL_24:

  __int16 v13 = v15;
LABEL_25:

LABEL_26:
  return 1;
}

void sub_183663134(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL54nw_protocol_instance_registrar_array_contains_endpointPU22objcproto11OS_nw_array8NSObjectPU25objcproto14OS_nw_endpointS__block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  int is_equal = nw_endpoint_is_equal(*(void **)(a1 + 32), a3, 31);
  if (is_equal) {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
  }
  return is_equal ^ 1u;
}

void nw_protocol_instance_registrar_add_wildcard_edge_for_instance(void *a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v116 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = a1;
  id v8 = a2;
  id v97 = a4;
  if (!v7)
  {
    os_log_type_t v36 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v101 = "nw_protocol_instance_registrar_add_wildcard_edge_for_instance";
    uint64_t v37 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v98 = 0;
    if (!__nwlog_fault(v37, &type, &v98)) {
      goto LABEL_131;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v38 = __nwlog_obj();
      os_log_type_t v39 = type;
      if (os_log_type_enabled(v38, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v101 = "nw_protocol_instance_registrar_add_wildcard_edge_for_instance";
        _os_log_impl(&dword_1830D4000, v38, v39, "%{public}s called with null registrar", buf, 0xCu);
      }
    }
    else if (v98)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v38 = __nwlog_obj();
      os_log_type_t v45 = type;
      BOOL v46 = os_log_type_enabled(v38, type);
      if (backtrace_string)
      {
        if (v46)
        {
          *(_DWORD *)int buf = 136446466;
          uint64_t v101 = "nw_protocol_instance_registrar_add_wildcard_edge_for_instance";
          __int16 v102 = 2082;
          uint64_t v103 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v38, v45, "%{public}s called with null registrar, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_131:
        if (!v37) {
          goto LABEL_42;
        }
LABEL_132:
        free(v37);
        goto LABEL_42;
      }
      if (v46)
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v101 = "nw_protocol_instance_registrar_add_wildcard_edge_for_instance";
        _os_log_impl(&dword_1830D4000, v38, v45, "%{public}s called with null registrar, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v38 = __nwlog_obj();
      os_log_type_t v78 = type;
      if (os_log_type_enabled(v38, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v101 = "nw_protocol_instance_registrar_add_wildcard_edge_for_instance";
        _os_log_impl(&dword_1830D4000, v38, v78, "%{public}s called with null registrar, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_130:

    goto LABEL_131;
  }
  if (!v8)
  {
    os_log_type_t v40 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v101 = "nw_protocol_instance_registrar_add_wildcard_edge_for_instance";
    uint64_t v37 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v98 = 0;
    if (!__nwlog_fault(v37, &type, &v98)) {
      goto LABEL_131;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v38 = __nwlog_obj();
      os_log_type_t v41 = type;
      if (os_log_type_enabled(v38, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v101 = "nw_protocol_instance_registrar_add_wildcard_edge_for_instance";
        _os_log_impl(&dword_1830D4000, v38, v41, "%{public}s called with null endpoint", buf, 0xCu);
      }
      goto LABEL_130;
    }
    if (!v98)
    {
      os_log_type_t v38 = __nwlog_obj();
      os_log_type_t v79 = type;
      if (os_log_type_enabled(v38, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v101 = "nw_protocol_instance_registrar_add_wildcard_edge_for_instance";
        _os_log_impl(&dword_1830D4000, v38, v79, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_130;
    }
    os_log_type_t v47 = (char *)__nw_create_backtrace_string();
    os_log_type_t v38 = __nwlog_obj();
    os_log_type_t v48 = type;
    BOOL v49 = os_log_type_enabled(v38, type);
    if (!v47)
    {
      if (v49)
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v101 = "nw_protocol_instance_registrar_add_wildcard_edge_for_instance";
        _os_log_impl(&dword_1830D4000, v38, v48, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
      goto LABEL_130;
    }
    if (v49)
    {
      *(_DWORD *)int buf = 136446466;
      uint64_t v101 = "nw_protocol_instance_registrar_add_wildcard_edge_for_instance";
      __int16 v102 = 2082;
      uint64_t v103 = v47;
      _os_log_impl(&dword_1830D4000, v38, v48, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_72;
  }
  if (!*(void *)(a3 + 16))
  {
    os_log_type_t v42 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v101 = "nw_protocol_instance_registrar_add_wildcard_edge_for_instance";
    uint64_t v37 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v98 = 0;
    if (!__nwlog_fault(v37, &type, &v98)) {
      goto LABEL_131;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v38 = __nwlog_obj();
      os_log_type_t v43 = type;
      if (os_log_type_enabled(v38, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v101 = "nw_protocol_instance_registrar_add_wildcard_edge_for_instance";
        _os_log_impl(&dword_1830D4000, v38, v43, "%{public}s called with null protocol->identifier", buf, 0xCu);
      }
      goto LABEL_130;
    }
    if (!v98)
    {
      os_log_type_t v38 = __nwlog_obj();
      os_log_type_t v80 = type;
      if (os_log_type_enabled(v38, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v101 = "nw_protocol_instance_registrar_add_wildcard_edge_for_instance";
        _os_log_impl(&dword_1830D4000, v38, v80, "%{public}s called with null protocol->identifier, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_130;
    }
    os_log_type_t v47 = (char *)__nw_create_backtrace_string();
    os_log_type_t v38 = __nwlog_obj();
    os_log_type_t v50 = type;
    BOOL v51 = os_log_type_enabled(v38, type);
    if (!v47)
    {
      if (v51)
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v101 = "nw_protocol_instance_registrar_add_wildcard_edge_for_instance";
        _os_log_impl(&dword_1830D4000, v38, v50, "%{public}s called with null protocol->identifier, no backtrace", buf, 0xCu);
      }
      goto LABEL_130;
    }
    if (v51)
    {
      *(_DWORD *)int buf = 136446466;
      uint64_t v101 = "nw_protocol_instance_registrar_add_wildcard_edge_for_instance";
      __int16 v102 = 2082;
      uint64_t v103 = v47;
      _os_log_impl(&dword_1830D4000, v38, v50, "%{public}s called with null protocol->identifier, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_72:

    free(v47);
    if (!v37) {
      goto LABEL_42;
    }
    goto LABEL_132;
  }
  uint64_t v9 = *(void *)(a3 + 24);
  if (!v9) {
    goto LABEL_24;
  }
  id v10 = *(void (**)(uint64_t))(v9 + 136);
  if (!v10) {
    goto LABEL_24;
  }
  id v11 = v10(a3);
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  int v12 = (id)gLogObj;
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v13 = *(void *)(a3 + 16);
    *(_DWORD *)int buf = 136447234;
    uint64_t v101 = "nw_protocol_instance_registrar_add_wildcard_edge_for_instance";
    __int16 v102 = 2112;
    uint64_t v103 = v7;
    __int16 v104 = 2048;
    uint64_t v105 = a3;
    __int16 v106 = 2080;
    uint64_t v107 = v13;
    __int16 v108 = 2112;
    __int16 v109 = v11;
    _os_log_impl(&dword_1830D4000, v12, OS_LOG_TYPE_DEBUG, "%{public}s %@ instance %p of %s has endpoint %@, adding edges", buf, 0x34u);
  }

  if (!v11)
  {
LABEL_24:
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v11 = (id)gLogObj;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v32 = *(void *)(a3 + 16);
      *(_DWORD *)int buf = 136446978;
      uint64_t v101 = "nw_protocol_instance_registrar_add_wildcard_edge_for_instance";
      __int16 v102 = 2112;
      uint64_t v103 = v7;
      __int16 v104 = 2048;
      uint64_t v105 = a3;
      __int16 v106 = 2080;
      uint64_t v107 = v32;
      _os_log_impl(&dword_1830D4000, v11, OS_LOG_TYPE_DEBUG, "%{public}s %@ instance %p of %s does not have endpoint, cannot add edges", buf, 0x2Au);
    }
    goto LABEL_41;
  }
  uint64_t v14 = *(void *)(a3 + 24);
  if (!v14) {
    goto LABEL_26;
  }
  id v15 = *(void (**)(uint64_t))(v14 + 112);
  if (!v15) {
    goto LABEL_26;
  }
  os_log_type_t v16 = v15(a3);
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v17 = (id)gLogObj;
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v18 = *(void *)(a3 + 16);
    *(_DWORD *)int buf = 136447234;
    uint64_t v101 = "nw_protocol_instance_registrar_add_wildcard_edge_for_instance";
    __int16 v102 = 2112;
    uint64_t v103 = v7;
    __int16 v104 = 2048;
    uint64_t v105 = a3;
    __int16 v106 = 2080;
    uint64_t v107 = v18;
    __int16 v108 = 2112;
    __int16 v109 = v16;
    _os_log_impl(&dword_1830D4000, v17, OS_LOG_TYPE_DEBUG, "%{public}s %@ instance %p of %s has parameters %@, adding edges", buf, 0x34u);
  }

  if (!v16)
  {
LABEL_26:
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v20 = (id)gLogObj;
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v33 = *(void *)(a3 + 16);
      *(_DWORD *)int buf = 136446978;
      uint64_t v101 = "nw_protocol_instance_registrar_add_wildcard_edge_for_instance";
      __int16 v102 = 2112;
      uint64_t v103 = v7;
      __int16 v104 = 2048;
      uint64_t v105 = a3;
      __int16 v106 = 2080;
      uint64_t v107 = v33;
      _os_log_impl(&dword_1830D4000, v20, OS_LOG_TYPE_DEBUG, "%{public}s %@ instance %p of %s does not have parameters, cannot add edges", buf, 0x2Au);
    }
    goto LABEL_40;
  }
  __int16 v95 = v7;
  id v19 = v8;
  id v96 = v97;
  os_log_type_t v20 = v16;
  os_log_type_t v94 = v19;
  if (!*(void *)(a3 + 16))
  {
    BOOL v52 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v101 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
    uint64_t v53 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v98 = 0;
    if (__nwlog_fault(v53, &type, &v98))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v54 = __nwlog_obj();
        os_log_type_t v55 = type;
        if (os_log_type_enabled(v54, type))
        {
          *(_DWORD *)int buf = 136446210;
          uint64_t v101 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
          _os_log_impl(&dword_1830D4000, v54, v55, "%{public}s called with null protocol->identifier", buf, 0xCu);
        }
      }
      else if (v98)
      {
        uint64_t v68 = (char *)__nw_create_backtrace_string();
        uint64_t v54 = __nwlog_obj();
        os_log_type_t v69 = type;
        BOOL v70 = os_log_type_enabled(v54, type);
        if (v68)
        {
          if (v70)
          {
            *(_DWORD *)int buf = 136446466;
            uint64_t v101 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
            __int16 v102 = 2082;
            uint64_t v103 = v68;
            _os_log_impl(&dword_1830D4000, v54, v69, "%{public}s called with null protocol->identifier, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v68);
          goto LABEL_152;
        }
        if (v70)
        {
          *(_DWORD *)int buf = 136446210;
          uint64_t v101 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
          _os_log_impl(&dword_1830D4000, v54, v69, "%{public}s called with null protocol->identifier, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        uint64_t v54 = __nwlog_obj();
        os_log_type_t v87 = type;
        if (os_log_type_enabled(v54, type))
        {
          *(_DWORD *)int buf = 136446210;
          uint64_t v101 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
          _os_log_impl(&dword_1830D4000, v54, v87, "%{public}s called with null protocol->identifier, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_152:
    if (v53) {
      free(v53);
    }
    goto LABEL_39;
  }
  id v21 = v19;
  BOOL v22 = (HIBYTE(v21[28].isa) & 4) == 0;

  os_log_type_t v23 = v21;
  if (!v22) {
    goto LABEL_19;
  }
  uint64_t v24 = v20;
  id v25 = *((id *)v24[13].isa + 17);

  if (!v25)
  {
    uint64_t v64 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v101 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
    uint64_t v65 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v98 = 0;
    if (__nwlog_fault(v65, &type, &v98))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v66 = __nwlog_obj();
        os_log_type_t v67 = type;
        if (os_log_type_enabled(v66, type))
        {
          *(_DWORD *)int buf = 136446210;
          uint64_t v101 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
          _os_log_impl(&dword_1830D4000, v66, v67, "%{public}s called with null context", buf, 0xCu);
        }
      }
      else if (v98)
      {
        BOOL v84 = (char *)__nw_create_backtrace_string();
        uint64_t v66 = __nwlog_obj();
        os_log_type_t v85 = type;
        BOOL v86 = os_log_type_enabled(v66, type);
        if (v84)
        {
          if (v86)
          {
            *(_DWORD *)int buf = 136446466;
            uint64_t v101 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
            __int16 v102 = 2082;
            uint64_t v103 = v84;
            _os_log_impl(&dword_1830D4000, v66, v85, "%{public}s called with null context, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v84);
          goto LABEL_175;
        }
        if (v86)
        {
          *(_DWORD *)int buf = 136446210;
          uint64_t v101 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
          _os_log_impl(&dword_1830D4000, v66, v85, "%{public}s called with null context, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        uint64_t v66 = __nwlog_obj();
        os_log_type_t v90 = type;
        if (os_log_type_enabled(v66, type))
        {
          *(_DWORD *)int buf = 136446210;
          uint64_t v101 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
          _os_log_impl(&dword_1830D4000, v66, v90, "%{public}s called with null context, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_175:
    if (v65) {
      free(v65);
    }
    goto LABEL_38;
  }
  os_log_type_t v23 = nw_context_copy_registered_endpoint_internal(v25, v21, 0);

  if (gLogDatapath)
  {
    os_log_type_t v72 = __nwlog_obj();
    if (os_log_type_enabled(v72, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v73 = *(void *)(a3 + 16);
      *(_DWORD *)int buf = 136448002;
      uint64_t v101 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
      __int16 v102 = 2112;
      uint64_t v103 = v95;
      __int16 v104 = 2048;
      uint64_t v105 = a3;
      __int16 v106 = 2080;
      uint64_t v107 = v73;
      __int16 v108 = 2112;
      __int16 v109 = v21;
      __int16 v110 = 2048;
      uint64_t v111 = v21;
      __int16 v112 = 2112;
      uint64_t v113 = v23;
      __int16 v114 = 2048;
      __int16 v115 = v23;
      _os_log_impl(&dword_1830D4000, v72, OS_LOG_TYPE_DEBUG, "%{public}s %@ instance %p of %s replacing unregistered endpoint %@ (%p) with endpoint %@ (%p)", buf, 0x52u);
    }
  }
LABEL_19:
  id v26 = v96;
  uint64_t v27 = v26;
  if (!v26)
  {
    os_log_type_t v56 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v101 = "nw_endpoint_is_registered";
    os_log_t log = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v98 = 0;
    os_log_type_t v57 = (char *)log;
    if (!__nwlog_fault(log, &type, &v98)) {
      goto LABEL_158;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v58 = __nwlog_obj();
      os_log_type_t v59 = type;
      if (os_log_type_enabled(v58, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v101 = "nw_endpoint_is_registered";
        _os_log_impl(&dword_1830D4000, v58, v59, "%{public}s called with null endpoint", buf, 0xCu);
      }
    }
    else if (v98)
    {
      os_log_type_t v76 = (char *)__nw_create_backtrace_string();
      BOOL v58 = __nwlog_obj();
      os_log_type_t v91 = type;
      BOOL v77 = os_log_type_enabled(v58, type);
      if (v76)
      {
        if (v77)
        {
          *(_DWORD *)int buf = 136446466;
          uint64_t v101 = "nw_endpoint_is_registered";
          __int16 v102 = 2082;
          uint64_t v103 = v76;
          _os_log_impl(&dword_1830D4000, v58, v91, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v76);
        goto LABEL_157;
      }
      if (v77)
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v101 = "nw_endpoint_is_registered";
        _os_log_impl(&dword_1830D4000, v58, v91, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v58 = __nwlog_obj();
      os_log_type_t v88 = type;
      if (os_log_type_enabled(v58, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v101 = "nw_endpoint_is_registered";
        _os_log_impl(&dword_1830D4000, v58, v88, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
      }
    }

LABEL_157:
    os_log_type_t v57 = (char *)log;
LABEL_158:
    if (v57) {
      free(v57);
    }
    goto LABEL_21;
  }
  BOOL v28 = (HIBYTE(v26[28].isa) & 4) == 0;

  if (!v28)
  {
    char v31 = v27;
    goto LABEL_29;
  }
LABEL_21:
  __int16 v29 = v20;
  id v30 = *((id *)v29[13].isa + 17);

  if (!v30)
  {
    uint64_t v60 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v101 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
    unsigned int v61 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v98 = 0;
    if (__nwlog_fault(v61, &type, &v98))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v62 = __nwlog_obj();
        os_log_type_t v63 = type;
        if (os_log_type_enabled(v62, type))
        {
          *(_DWORD *)int buf = 136446210;
          uint64_t v101 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
          _os_log_impl(&dword_1830D4000, v62, v63, "%{public}s called with null context", buf, 0xCu);
        }
      }
      else if (v98)
      {
        os_log_type_t v81 = (char *)__nw_create_backtrace_string();
        os_log_type_t v62 = __nwlog_obj();
        os_log_type_t v82 = type;
        BOOL v83 = os_log_type_enabled(v62, type);
        if (v81)
        {
          if (v83)
          {
            *(_DWORD *)int buf = 136446466;
            uint64_t v101 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
            __int16 v102 = 2082;
            uint64_t v103 = v81;
            _os_log_impl(&dword_1830D4000, v62, v82, "%{public}s called with null context, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v81);
          goto LABEL_170;
        }
        if (v83)
        {
          *(_DWORD *)int buf = 136446210;
          uint64_t v101 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
          _os_log_impl(&dword_1830D4000, v62, v82, "%{public}s called with null context, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        os_log_type_t v62 = __nwlog_obj();
        os_log_type_t v89 = type;
        if (os_log_type_enabled(v62, type))
        {
          *(_DWORD *)int buf = 136446210;
          uint64_t v101 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
          _os_log_impl(&dword_1830D4000, v62, v89, "%{public}s called with null context, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_170:
    if (v61) {
      free(v61);
    }
    goto LABEL_37;
  }
  char v31 = nw_context_copy_registered_endpoint_internal(v30, v27, 0);

  if (gLogDatapath)
  {
    loga = __nwlog_obj();
    if (os_log_type_enabled(loga, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v71 = *(void *)(a3 + 16);
      *(_DWORD *)int buf = 136448002;
      uint64_t v101 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
      __int16 v102 = 2112;
      uint64_t v103 = v95;
      __int16 v104 = 2048;
      uint64_t v105 = a3;
      __int16 v106 = 2080;
      uint64_t v107 = v71;
      __int16 v108 = 2112;
      __int16 v109 = v27;
      __int16 v110 = 2048;
      uint64_t v111 = v27;
      __int16 v112 = 2112;
      uint64_t v113 = v31;
      __int16 v114 = 2048;
      __int16 v115 = v31;
      _os_log_impl(&dword_1830D4000, loga, OS_LOG_TYPE_DEBUG, "%{public}s %@ instance %p of %s replacing unregistered endpoint %@ (%p) with endpoint %@ (%p)", buf, 0x52u);
    }
  }
LABEL_29:
  if (!nw_endpoint_is_equal(v31, v23, 31))
  {
    os_log_type_t v34 = nw_endpoint_edge_create(v23, *(long long **)(a3 + 16), 1);
    nw_endpoint_add_edge(v31, v34);
    if (gLogDatapath)
    {
      os_log_type_t v74 = __nwlog_obj();
      if (os_log_type_enabled(v74, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v75 = *(void *)(a3 + 16);
        *(_DWORD *)int buf = 136447490;
        uint64_t v101 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
        __int16 v102 = 2112;
        uint64_t v103 = v95;
        __int16 v104 = 2048;
        uint64_t v105 = a3;
        __int16 v106 = 2080;
        uint64_t v107 = v75;
        __int16 v108 = 2112;
        __int16 v109 = v31;
        __int16 v110 = 2112;
        uint64_t v111 = v23;
        _os_log_impl(&dword_1830D4000, v74, OS_LOG_TYPE_DEBUG, "%{public}s %@ instance %p of %s added edge from endpoint %@ to endpoint %@", buf, 0x3Eu);
      }
    }
    goto LABEL_35;
  }
  if (gLogDatapath)
  {
    os_log_type_t v34 = __nwlog_obj();
    if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v35 = *(void *)(a3 + 16);
      *(_DWORD *)int buf = 136447490;
      uint64_t v101 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
      __int16 v102 = 2112;
      uint64_t v103 = v95;
      __int16 v104 = 2048;
      uint64_t v105 = a3;
      __int16 v106 = 2080;
      uint64_t v107 = v35;
      __int16 v108 = 2112;
      __int16 v109 = v31;
      __int16 v110 = 2112;
      uint64_t v111 = v23;
      _os_log_impl(&dword_1830D4000, v34, OS_LOG_TYPE_DEBUG, "%{public}s %@ instance %p of %s source and destination endpoints (%@ -> %@) are the same, skipping", buf, 0x3Eu);
    }
LABEL_35:
  }
  uint64_t v27 = v31;
LABEL_37:

  id v21 = v23;
LABEL_38:

LABEL_39:
LABEL_40:

LABEL_41:
LABEL_42:
}

void sub_1836647F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, uint64_t a18, void *a19)
{
  _Unwind_Resume(a1);
}

uint64_t nw_protocol_instance_registrar_find_quic_instance_by_id(void *a1, void *a2)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1;
  id v4 = a2;
  if (v4)
  {
    if (gLogDatapath)
    {
      id v15 = __nwlog_obj();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)int buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_protocol_instance_registrar_find_quic_instance_by_id";
        *(_WORD *)&buf[12] = 2112;
        *(void *)&buf[14] = v3;
        *(_WORD *)&unsigned char buf[22] = 2112;
        id v32 = v4;
        _os_log_impl(&dword_1830D4000, v15, OS_LOG_TYPE_DEBUG, "%{public}s %@ finding instance of quic to join for CID %@", buf, 0x20u);
      }
    }
    if (nw_protocol_copy_quic_stream_definition::onceToken != -1) {
      dispatch_once(&nw_protocol_copy_quic_stream_definition::onceToken, &__block_literal_global_15_56153);
    }
    id v5 = (id)nw_protocol_copy_quic_stream_definition::quic_definition;
    identifier = nw_protocol_definition_get_identifier(v5);
    *(void *)int buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000;
    id v32 = 0;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 3221225472;
    aBlock[2] = __nw_protocol_instance_registrar_find_quic_instance_by_id_block_invoke;
    aBlock[3] = &unk_1E5242458;
    uint64_t v7 = v3;
    BOOL v22 = v7;
    id v25 = identifier;
    id v23 = v4;
    uint64_t v24 = buf;
    id v8 = (void (**)(void))_Block_copy(aBlock);
    os_unfair_lock_lock(v3 + 2);
    v8[2](v8);
    os_unfair_lock_unlock(v3 + 2);

    uint64_t v9 = *(void *)(*(void *)&buf[8] + 24);
    if (!v9)
    {
      if (gLogDatapath)
      {
        id v19 = __nwlog_obj();
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)os_log_type_t type = 136446466;
          BOOL v28 = "nw_protocol_instance_registrar_find_quic_instance_by_id";
          __int16 v29 = 2112;
          id v30 = v7;
          _os_log_impl(&dword_1830D4000, v19, OS_LOG_TYPE_DEBUG, "%{public}s %@ could not find protocol", (uint8_t *)type, 0x16u);
        }

        uint64_t v9 = *(void *)(*(void *)&buf[8] + 24);
      }
      else
      {
        uint64_t v9 = 0;
      }
    }

    _Block_object_dispose(buf, 8);
    goto LABEL_9;
  }
  id v11 = __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_protocol_instance_registrar_find_quic_instance_by_id";
  int v12 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  char v26 = 0;
  if (__nwlog_fault(v12, type, &v26))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      uint64_t v13 = __nwlog_obj();
      os_log_type_t v14 = type[0];
      if (os_log_type_enabled(v13, type[0]))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_instance_registrar_find_quic_instance_by_id";
        _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s called with null connection_id", buf, 0xCu);
      }
    }
    else if (v26)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v13 = __nwlog_obj();
      os_log_type_t v17 = type[0];
      BOOL v18 = os_log_type_enabled(v13, type[0]);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_instance_registrar_find_quic_instance_by_id";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v13, v17, "%{public}s called with null connection_id, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_32;
      }
      if (v18)
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_instance_registrar_find_quic_instance_by_id";
        _os_log_impl(&dword_1830D4000, v13, v17, "%{public}s called with null connection_id, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v13 = __nwlog_obj();
      os_log_type_t v20 = type[0];
      if (os_log_type_enabled(v13, type[0]))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_instance_registrar_find_quic_instance_by_id";
        _os_log_impl(&dword_1830D4000, v13, v20, "%{public}s called with null connection_id, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_32:
  if (v12) {
    free(v12);
  }
  uint64_t v9 = 0;
LABEL_9:

  return v9;
}

void sub_183664D28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  _Block_object_dispose((const void *)(v23 - 128), 8);
  _Unwind_Resume(a1);
}

void __nw_protocol_instance_registrar_find_quic_instance_by_id_block_invoke(uint64_t a1)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void **)(*(void *)(a1 + 32) + 16);
  if (v1)
  {
    while (1)
    {
      if (gLogDatapath)
      {
        os_log_type_t v20 = __nwlog_obj();
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v21 = *(void *)(a1 + 32);
          uint64_t v22 = v1[2];
          uint64_t v23 = *(void *)(v22 + 16);
          *(_DWORD *)int buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_protocol_instance_registrar_find_quic_instance_by_id_block_invoke";
          *(_WORD *)&buf[12] = 2112;
          *(void *)&buf[14] = v21;
          *(_WORD *)&unsigned char buf[22] = 2048;
          uint64_t v41 = v22;
          __int16 v42 = 2080;
          uint64_t v43 = v23;
          _os_log_impl(&dword_1830D4000, v20, OS_LOG_TYPE_DEBUG, "%{public}s %@ checking instance %p (%s) for joining by quic", buf, 0x2Au);
        }
      }
      uint64_t v3 = v1[2];
      if (v3) {
        break;
      }
      if (gLogDatapath)
      {
        uint64_t v9 = __nwlog_obj();
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v26 = *(void *)(a1 + 32);
          uint64_t v27 = v1[2];
          uint64_t v28 = *(void *)(a1 + 56);
          *(_DWORD *)int buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_protocol_instance_registrar_find_quic_instance_by_id_block_invoke";
          *(_WORD *)&buf[12] = 2112;
          *(void *)&buf[14] = v26;
          *(_WORD *)&unsigned char buf[22] = 2048;
          uint64_t v41 = v27;
          __int16 v42 = 2080;
          uint64_t v43 = v28;
          uint64_t v13 = v9;
          os_log_type_t v14 = "%{public}s %@ instance %p of %s not eligible, missing protocol handle";
LABEL_35:
          uint32_t v15 = 42;
LABEL_36:
          _os_log_impl(&dword_1830D4000, v13, OS_LOG_TYPE_DEBUG, v14, buf, v15);
        }
LABEL_17:
      }
LABEL_4:
      uint64_t v1 = (void *)*v1;
      if (!v1) {
        return;
      }
    }
    if (nw_protocols_are_equal(*(void **)(a1 + 56), *(void **)(v3 + 16)))
    {
      uint64_t v4 = *(void *)(v3 + 24);
      if (v4 && (id v5 = *(uint64_t (**)(uint64_t, uint64_t, void))(v4 + 224)) != 0)
      {
        id v6 = (id *)v5(v3, 4, 0);
        uint64_t v7 = (uint64_t *)v6;
        if (v6)
        {
          id v8 = *v6;
          if (v8)
          {
            uint64_t v9 = v8;
            *(void *)int buf = 0;
            *(void *)&buf[8] = buf;
            *(void *)&buf[16] = 0x2020000000;
            LOBYTE(v41) = 0;
            v31[0] = MEMORY[0x1E4F143A8];
            v31[1] = 3221225472;
            v31[2] = __nw_protocol_instance_registrar_find_quic_instance_by_id_block_invoke_10;
            v31[3] = &unk_1E524A2E8;
            id v32 = *(id *)(a1 + 40);
            uint64_t v33 = buf;
            nw_array_apply((atomic_uchar *)v9, (uint64_t)v31);
            nw_array_remove_all_objects(*v7);
            if (*v7) {
              os_release((void *)*v7);
            }
            free(v7);
            if (*(unsigned char *)(*(void *)&buf[8] + 24))
            {
              *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = v3;

              _Block_object_dispose(buf, 8);
              return;
            }
            if (gLogDatapath)
            {
              __int16 v29 = __nwlog_obj();
              if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
              {
                uint64_t v30 = *(void *)(a1 + 32);
                *(_DWORD *)os_log_type_t v34 = 136446722;
                uint64_t v35 = "nw_protocol_instance_registrar_find_quic_instance_by_id_block_invoke";
                __int16 v36 = 2112;
                uint64_t v37 = v30;
                __int16 v38 = 2048;
                uint64_t v39 = v3;
                _os_log_impl(&dword_1830D4000, v29, OS_LOG_TYPE_DEBUG, "%{public}s %@ instance %p did not match", v34, 0x20u);
              }
            }
            _Block_object_dispose(buf, 8);
          }
          else
          {
            if (!gLogDatapath) {
              goto LABEL_4;
            }
            uint64_t v9 = __nwlog_obj();
            if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v18 = *(void *)(a1 + 32);
              uint64_t v19 = *(void *)(a1 + 56);
              *(_DWORD *)int buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_protocol_instance_registrar_find_quic_instance_by_id_block_invoke";
              *(_WORD *)&buf[12] = 2112;
              *(void *)&buf[14] = v18;
              *(_WORD *)&unsigned char buf[22] = 2048;
              uint64_t v41 = v3;
              __int16 v42 = 2080;
              uint64_t v43 = v19;
              uint64_t v13 = v9;
              os_log_type_t v14 = "%{public}s %@ instance %p of %s not eligible, missing required quic_info";
              goto LABEL_35;
            }
          }
        }
        else
        {
          if (!gLogDatapath) {
            goto LABEL_4;
          }
          uint64_t v9 = __nwlog_obj();
          if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v16 = *(void *)(a1 + 32);
            uint64_t v17 = *(void *)(a1 + 56);
            *(_DWORD *)int buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_protocol_instance_registrar_find_quic_instance_by_id_block_invoke";
            *(_WORD *)&buf[12] = 2112;
            *(void *)&buf[14] = v16;
            *(_WORD *)&unsigned char buf[22] = 2048;
            uint64_t v41 = v3;
            __int16 v42 = 2080;
            uint64_t v43 = v17;
            uint64_t v13 = v9;
            os_log_type_t v14 = "%{public}s %@ instance %p of %s not eligible, missing quic_info";
            goto LABEL_35;
          }
        }
      }
      else
      {
        if (!gLogDatapath) {
          goto LABEL_4;
        }
        uint64_t v9 = __nwlog_obj();
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v24 = *(void *)(a1 + 32);
          uint64_t v25 = *(void *)(a1 + 56);
          *(_DWORD *)int buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_protocol_instance_registrar_find_quic_instance_by_id_block_invoke";
          *(_WORD *)&buf[12] = 2112;
          *(void *)&buf[14] = v24;
          *(_WORD *)&unsigned char buf[22] = 2048;
          uint64_t v41 = v3;
          __int16 v42 = 2080;
          uint64_t v43 = v25;
          uint64_t v13 = v9;
          os_log_type_t v14 = "%{public}s %@ instance %p of %s not eligible, missing required callbacks";
          goto LABEL_35;
        }
      }
    }
    else
    {
      if (!gLogDatapath) {
        goto LABEL_4;
      }
      uint64_t v9 = __nwlog_obj();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v10 = *(void *)(a1 + 32);
        uint64_t v11 = *(void *)(v3 + 16);
        uint64_t v12 = *(void *)(a1 + 56);
        *(_DWORD *)int buf = 136447234;
        *(void *)&uint8_t buf[4] = "nw_protocol_instance_registrar_find_quic_instance_by_id_block_invoke";
        *(_WORD *)&buf[12] = 2112;
        *(void *)&buf[14] = v10;
        *(_WORD *)&unsigned char buf[22] = 2048;
        uint64_t v41 = v3;
        __int16 v42 = 2080;
        uint64_t v43 = v11;
        __int16 v44 = 2080;
        uint64_t v45 = v12;
        uint64_t v13 = v9;
        os_log_type_t v14 = "%{public}s %@ instance %p (%s) not eligible for joining by %s, identifier doesn't match";
        uint32_t v15 = 52;
        goto LABEL_36;
      }
    }
    goto LABEL_17;
  }
}

BOOL __nw_protocol_instance_registrar_find_quic_instance_by_id_block_invoke_10(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a3;
  BOOL is_equal = nw_dispatch_data_is_equal(*(dispatch_data_t *)(a1 + 32), v4);
  if (is_equal)
  {
    if (gLogDatapath)
    {
      uint64_t v7 = __nwlog_obj();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v8 = *(void *)(a1 + 32);
        int v9 = 136446722;
        uint64_t v10 = "nw_protocol_instance_registrar_find_quic_instance_by_id_block_invoke";
        __int16 v11 = 2112;
        uint64_t v12 = v8;
        __int16 v13 = 2112;
        os_log_type_t v14 = v4;
        _os_log_impl(&dword_1830D4000, v7, OS_LOG_TYPE_DEBUG, "%{public}s Comparing CID %@ with %@", (uint8_t *)&v9, 0x20u);
      }
    }
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
  }

  return !is_equal;
}

uint64_t __nw_protocol_instance_registrar_enumerate_instances_block_invoke(uint64_t result)
{
  uint64_t v1 = *(void **)(*(void *)(result + 32) + 16);
  if (v1)
  {
    uint64_t v2 = result;
    do
    {
      uint64_t v3 = v1[2];
      if (v3)
      {
        BOOL result = nw_protocols_are_equal(*(void **)(v2 + 48), *(void **)(v3 + 16));
        if (result) {
          BOOL result = (*(uint64_t (**)(void))(*(void *)(v2 + 40) + 16))();
        }
      }
      uint64_t v1 = (void *)*v1;
    }
    while (v1);
  }
  return result;
}

uint64_t nw_protocol_instance_registrar_find_instance_to_join(void *a1, void *a2, uint64_t a3, int a4, char a5, char a6, void *a7, void *a8, void *a9, uint64_t a10)
{
  uint64_t v89 = *MEMORY[0x1E4F143B8];
  uint64_t v16 = a1;
  id v17 = a7;
  id v18 = a8;
  id v19 = a9;
  os_log_type_t v20 = v19;
  os_log_type_t v56 = v17;
  os_log_type_t v57 = v18;
  if (!a2)
  {
    id v32 = v19;
    uint64_t v33 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v76 = "nw_protocol_instance_registrar_find_instance_to_join";
    os_log_type_t v34 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    char v74 = 0;
    if (!__nwlog_fault(v34, type, &v74)) {
      goto LABEL_74;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      uint64_t v35 = __nwlog_obj();
      os_log_type_t v36 = type[0];
      if (os_log_type_enabled(v35, type[0]))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v76 = "nw_protocol_instance_registrar_find_instance_to_join";
        _os_log_impl(&dword_1830D4000, v35, v36, "%{public}s called with null identifier", buf, 0xCu);
      }
      goto LABEL_73;
    }
    if (!v74)
    {
      uint64_t v35 = __nwlog_obj();
      os_log_type_t v51 = type[0];
      if (os_log_type_enabled(v35, type[0]))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v76 = "nw_protocol_instance_registrar_find_instance_to_join";
        _os_log_impl(&dword_1830D4000, v35, v51, "%{public}s called with null identifier, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_73;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v35 = __nwlog_obj();
    os_log_type_t v44 = type[0];
    BOOL v45 = os_log_type_enabled(v35, type[0]);
    if (!backtrace_string)
    {
      if (v45)
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v76 = "nw_protocol_instance_registrar_find_instance_to_join";
        _os_log_impl(&dword_1830D4000, v35, v44, "%{public}s called with null identifier, no backtrace", buf, 0xCu);
      }
      goto LABEL_73;
    }
    if (v45)
    {
      *(_DWORD *)int buf = 136446466;
      os_log_type_t v76 = "nw_protocol_instance_registrar_find_instance_to_join";
      __int16 v77 = 2082;
      os_log_type_t v78 = (os_unfair_lock_s *)backtrace_string;
      _os_log_impl(&dword_1830D4000, v35, v44, "%{public}s called with null identifier, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_48;
  }
  if (!v18)
  {
    id v32 = v19;
    uint64_t v37 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v76 = "nw_protocol_instance_registrar_find_instance_to_join";
    os_log_type_t v34 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    char v74 = 0;
    if (!__nwlog_fault(v34, type, &v74)) {
      goto LABEL_74;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      uint64_t v35 = __nwlog_obj();
      os_log_type_t v38 = type[0];
      if (os_log_type_enabled(v35, type[0]))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v76 = "nw_protocol_instance_registrar_find_instance_to_join";
        _os_log_impl(&dword_1830D4000, v35, v38, "%{public}s called with null endpoint", buf, 0xCu);
      }
      goto LABEL_73;
    }
    if (!v74)
    {
      uint64_t v35 = __nwlog_obj();
      os_log_type_t v52 = type[0];
      if (os_log_type_enabled(v35, type[0]))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v76 = "nw_protocol_instance_registrar_find_instance_to_join";
        _os_log_impl(&dword_1830D4000, v35, v52, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_73;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v35 = __nwlog_obj();
    os_log_type_t v46 = type[0];
    BOOL v47 = os_log_type_enabled(v35, type[0]);
    if (!backtrace_string)
    {
      if (v47)
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v76 = "nw_protocol_instance_registrar_find_instance_to_join";
        _os_log_impl(&dword_1830D4000, v35, v46, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
      goto LABEL_73;
    }
    if (v47)
    {
      *(_DWORD *)int buf = 136446466;
      os_log_type_t v76 = "nw_protocol_instance_registrar_find_instance_to_join";
      __int16 v77 = 2082;
      os_log_type_t v78 = (os_unfair_lock_s *)backtrace_string;
      _os_log_impl(&dword_1830D4000, v35, v46, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_48;
  }
  if (!v19)
  {
    id v32 = 0;
    uint64_t v39 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v76 = "nw_protocol_instance_registrar_find_instance_to_join";
    os_log_type_t v34 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    char v74 = 0;
    if (!__nwlog_fault(v34, type, &v74)) {
      goto LABEL_74;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      uint64_t v35 = __nwlog_obj();
      os_log_type_t v40 = type[0];
      if (os_log_type_enabled(v35, type[0]))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v76 = "nw_protocol_instance_registrar_find_instance_to_join";
        _os_log_impl(&dword_1830D4000, v35, v40, "%{public}s called with null parameters", buf, 0xCu);
      }
LABEL_73:

LABEL_74:
      os_log_type_t v20 = v32;
      if (v34) {
        free(v34);
      }
      goto LABEL_11;
    }
    if (!v74)
    {
      uint64_t v35 = __nwlog_obj();
      os_log_type_t v53 = type[0];
      if (os_log_type_enabled(v35, type[0]))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v76 = "nw_protocol_instance_registrar_find_instance_to_join";
        _os_log_impl(&dword_1830D4000, v35, v53, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_73;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v35 = __nwlog_obj();
    os_log_type_t v48 = type[0];
    BOOL v49 = os_log_type_enabled(v35, type[0]);
    if (!backtrace_string)
    {
      if (v49)
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v76 = "nw_protocol_instance_registrar_find_instance_to_join";
        _os_log_impl(&dword_1830D4000, v35, v48, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
      goto LABEL_73;
    }
    if (v49)
    {
      *(_DWORD *)int buf = 136446466;
      os_log_type_t v76 = "nw_protocol_instance_registrar_find_instance_to_join";
      __int16 v77 = 2082;
      os_log_type_t v78 = (os_unfair_lock_s *)backtrace_string;
      _os_log_impl(&dword_1830D4000, v35, v48, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_48:

    free(backtrace_string);
    goto LABEL_74;
  }
  if (a10)
  {
    os_log_type_t v55 = v19;
    if (gLogDatapath)
    {
      id v41 = v17;
      __int16 v42 = __nwlog_obj();
      if (os_log_type_enabled(v42, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)int buf = 136447490;
        os_log_type_t v76 = "nw_protocol_instance_registrar_find_instance_to_join";
        __int16 v77 = 2112;
        os_log_type_t v78 = v16;
        __int16 v79 = 2080;
        os_log_type_t v80 = a2;
        __int16 v81 = 2112;
        id v82 = v57;
        __int16 v83 = 2112;
        id v84 = v55;
        __int16 v85 = 1024;
        LODWORD(v86) = a4;
        _os_log_impl(&dword_1830D4000, v42, OS_LOG_TYPE_DEBUG, "%{public}s %@ finding instance of %s to join for endpoint %@, parameters %@, (proxy: %u)", buf, 0x3Au);
      }

      id v17 = v41;
    }
    *(void *)os_log_type_t type = 0;
    uint64_t v71 = type;
    uint64_t v72 = 0x2020000000;
    uint64_t v73 = 0;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 3221225472;
    aBlock[2] = __nw_protocol_instance_registrar_find_instance_to_join_block_invoke;
    aBlock[3] = &unk_1E523B018;
    uint64_t v21 = v16;
    os_log_type_t v59 = v21;
    uint64_t v64 = a2;
    char v67 = a5;
    char v68 = a6;
    id v22 = v57;
    id v60 = v22;
    id v61 = v17;
    id v23 = v55;
    char v69 = a4;
    uint64_t v65 = a3;
    uint64_t v66 = a10;
    id v62 = v23;
    os_log_type_t v63 = type;
    uint64_t v24 = (void (**)(void))_Block_copy(aBlock);
    os_unfair_lock_lock(v16 + 2);
    v24[2](v24);
    os_unfair_lock_unlock(v16 + 2);

    uint64_t v25 = *((void *)v71 + 3);
    if (v25)
    {
      if (gLogDatapath)
      {
        uint64_t v26 = __nwlog_obj();
        if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v27 = (void *)*((void *)v71 + 3);
          *(_DWORD *)int buf = 136447746;
          os_log_type_t v76 = "nw_protocol_instance_registrar_find_instance_to_join";
          __int16 v77 = 2112;
          os_log_type_t v78 = v21;
          __int16 v79 = 2048;
          os_log_type_t v80 = v27;
          __int16 v81 = 2080;
          id v82 = a2;
          __int16 v83 = 2112;
          id v84 = v22;
          __int16 v85 = 2112;
          id v86 = v23;
          __int16 v87 = 1024;
          int v88 = a4;
          uint64_t v28 = "%{public}s %@ returning instance %p of %s to join for endpoint %@, parameters %@, (proxy: %u)";
          __int16 v29 = v26;
          uint32_t v30 = 68;
LABEL_54:
          _os_log_impl(&dword_1830D4000, v29, OS_LOG_TYPE_DEBUG, v28, buf, v30);
          goto LABEL_55;
        }
        goto LABEL_55;
      }
    }
    else
    {
      if (gLogDatapath)
      {
        uint64_t v26 = __nwlog_obj();
        if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)int buf = 136446722;
          os_log_type_t v76 = "nw_protocol_instance_registrar_find_instance_to_join";
          __int16 v77 = 2112;
          os_log_type_t v78 = v21;
          __int16 v79 = 2080;
          os_log_type_t v80 = a2;
          uint64_t v28 = "%{public}s %@ did not find instance of %s to join";
          __int16 v29 = v26;
          uint32_t v30 = 32;
          goto LABEL_54;
        }
LABEL_55:

        uint64_t v25 = *((void *)v71 + 3);
        goto LABEL_14;
      }
      uint64_t v25 = 0;
    }
LABEL_14:

    _Block_object_dispose(type, 8);
    os_log_type_t v20 = v55;
    goto LABEL_15;
  }
  if (gLogDatapath)
  {
    os_log_type_t v50 = __nwlog_obj();
    if (os_log_type_enabled(v50, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)int buf = 136447490;
      os_log_type_t v76 = "nw_protocol_instance_registrar_find_instance_to_join";
      __int16 v77 = 2112;
      os_log_type_t v78 = v16;
      __int16 v79 = 2080;
      os_log_type_t v80 = a2;
      __int16 v81 = 2112;
      id v82 = v18;
      __int16 v83 = 2112;
      id v84 = v20;
      __int16 v85 = 1024;
      LODWORD(v86) = a4;
      _os_log_impl(&dword_1830D4000, v50, OS_LOG_TYPE_DEBUG, "%{public}s %@ no accept function for %s, cannot join for endpoint %@, parameters %@, (proxy: %u)", buf, 0x3Au);
    }
  }
LABEL_11:
  uint64_t v25 = 0;
LABEL_15:

  return v25;
}

void sub_183665F48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20,void *a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  _Block_object_dispose(&a28, 8);
  _Unwind_Resume(a1);
}

void __nw_protocol_instance_registrar_find_instance_to_join_block_invoke(uint64_t a1)
{
  uint64_t v71 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (void *)(*(void *)(a1 + 32) + 16);
  do
  {
    uint64_t v2 = (void *)*v2;
    if (!v2) {
      break;
    }
    if (gLogDatapath)
    {
      id v41 = __nwlog_obj();
      if (os_log_type_enabled(v41, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v42 = *(void *)(a1 + 32);
        uint64_t v43 = v2[2];
        uint64_t v44 = *(void *)(v43 + 16);
        BOOL v45 = *(NSObject **)(a1 + 72);
        *(_DWORD *)int buf = 136447234;
        id v60 = "nw_protocol_instance_registrar_find_instance_to_join_block_invoke";
        __int16 v61 = 2112;
        uint64_t v62 = v42;
        __int16 v63 = 2048;
        uint64_t v64 = v43;
        __int16 v65 = 2080;
        uint64_t v66 = v44;
        __int16 v67 = 2080;
        char v68 = v45;
        _os_log_impl(&dword_1830D4000, v41, OS_LOG_TYPE_DEBUG, "%{public}s %@ checking instance %p (%s) for joining by %s", buf, 0x34u);
      }
    }
    uint64_t v4 = v2[2];
    if (v4)
    {
      if (nw_protocols_are_equal(*(void **)(a1 + 72), *(void **)(v4 + 16)))
      {
        uint64_t v5 = *(void *)(v4 + 24);
        if (v5)
        {
          id v6 = *(void (**)(uint64_t))(v5 + 136);
          if (v6)
          {
            if (*(void *)(v5 + 112))
            {
              uint64_t v7 = v6(v4);
              uint64_t v8 = (*(void (**)(uint64_t))(*(void *)(v4 + 24) + 112))(v4);
              if (*(unsigned char *)(a1 + 96)) {
                uint64_t v9 = 1;
              }
              else {
                uint64_t v9 = 3;
              }
              if (*(unsigned char *)(a1 + 97))
              {
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                uint64_t v10 = (id)gLogObj;
                if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
                {
                  uint64_t v11 = *(void *)(a1 + 72);
                  uint64_t v12 = *(void *)(a1 + 32);
                  uint64_t v13 = *(void *)(a1 + 40);
                  *(_DWORD *)int buf = 136447490;
                  id v60 = "nw_protocol_instance_registrar_find_instance_to_join_block_invoke";
                  __int16 v61 = 2112;
                  uint64_t v62 = v12;
                  __int16 v63 = 2048;
                  uint64_t v64 = v4;
                  __int16 v65 = 2080;
                  uint64_t v66 = v11;
                  __int16 v67 = 2112;
                  char v68 = v7;
                  __int16 v69 = 2112;
                  uint64_t v70 = v13;
                  _os_log_impl(&dword_1830D4000, v10, OS_LOG_TYPE_DEBUG, "%{public}s %@ instance %p of %s skipping endpoint comparison (candidate %@, endpoint %@)", buf, 0x3Eu);
                }
LABEL_18:

LABEL_19:
                if ((nw_parameters_get_prohibit_joining_protocols(v8) & 1) != 0
                  || nw_parameters_get_prohibit_joining_protocols(*(void **)(a1 + 56)))
                {
                  if (!gLogDatapath) {
                    goto LABEL_22;
                  }
                  uint64_t v28 = __nwlog_obj();
                  if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
                  {
                    uint64_t v51 = *(void *)(a1 + 32);
                    uint64_t v52 = *(void *)(a1 + 72);
                    *(_DWORD *)int buf = 136446978;
                    id v60 = "nw_protocol_instance_registrar_find_instance_to_join_block_invoke";
                    __int16 v61 = 2112;
                    uint64_t v62 = v51;
                    __int16 v63 = 2048;
                    uint64_t v64 = v4;
                    __int16 v65 = 2080;
                    uint64_t v66 = v52;
                    _os_log_impl(&dword_1830D4000, v28, OS_LOG_TYPE_DEBUG, "%{public}s %@ instance %p of %s not eligible, parameters prohibit joining", buf, 0x2Au);
                  }
LABEL_78:

                  goto LABEL_22;
                }
                if (!nw_parameters_are_compatible(*(void **)(a1 + 56), *(void *)(a1 + 80), v8, v4, *(unsigned __int8 *)(a1 + 98)))
                {
                  if (gLogDatapath)
                  {
                    uint64_t v28 = __nwlog_obj();
                    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
                    {
                      uint64_t v32 = *(void *)(a1 + 32);
                      uint64_t v33 = *(void *)(a1 + 72);
                      *(_DWORD *)int buf = 136446978;
                      id v60 = "nw_protocol_instance_registrar_find_instance_to_join_block_invoke";
                      __int16 v61 = 2112;
                      uint64_t v62 = v32;
                      __int16 v63 = 2048;
                      uint64_t v64 = v4;
                      __int16 v65 = 2080;
                      uint64_t v66 = v33;
                      _os_log_impl(&dword_1830D4000, v28, OS_LOG_TYPE_DEBUG, "%{public}s %@ instance %p of %s not eligible, parameters are not compatible", buf, 0x2Au);
                    }
                    goto LABEL_78;
                  }
                  goto LABEL_22;
                }
                if (((*(uint64_t (**)(uint64_t, void, void))(a1 + 88))(v4, *(void *)(a1 + 40), *(void *)(a1 + 56)) & 1) == 0)
                {
                  if (gLogDatapath)
                  {
                    uint64_t v28 = __nwlog_obj();
                    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
                    {
                      uint64_t v35 = *(void *)(a1 + 32);
                      uint64_t v36 = *(void *)(a1 + 72);
                      *(_DWORD *)int buf = 136446978;
                      id v60 = "nw_protocol_instance_registrar_find_instance_to_join_block_invoke";
                      __int16 v61 = 2112;
                      uint64_t v62 = v35;
                      __int16 v63 = 2048;
                      uint64_t v64 = v4;
                      __int16 v65 = 2080;
                      uint64_t v66 = v36;
                      _os_log_impl(&dword_1830D4000, v28, OS_LOG_TYPE_DEBUG, "%{public}s %@ instance %p of %s not eligible, new input handler rejected", buf, 0x2Au);
                    }
                    goto LABEL_78;
                  }
                  goto LABEL_22;
                }
                *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = v4;
                int v3 = 2;
              }
              else
              {
                if ((nw_endpoint_is_equal(v7, *(void **)(a1 + 40), v9) & 1) == 0)
                {
                  if (nw_endpoint_get_type(*(nw_endpoint_t *)(a1 + 40)) == nw_endpoint_type_address)
                  {
                    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                    networkd_settings_init();
                    uint64_t v28 = (id)gLogObj;
                    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
                    {
                      uint64_t v29 = *(void *)(a1 + 72);
                      uint64_t v30 = *(void *)(a1 + 32);
                      uint64_t v31 = *(void *)(a1 + 40);
                      *(_DWORD *)int buf = 136447490;
                      id v60 = "nw_protocol_instance_registrar_find_instance_to_join_block_invoke";
                      __int16 v61 = 2112;
                      uint64_t v62 = v30;
                      __int16 v63 = 2048;
                      uint64_t v64 = v4;
                      __int16 v65 = 2080;
                      uint64_t v66 = v29;
                      __int16 v67 = 2112;
                      char v68 = v7;
                      __int16 v69 = 2112;
                      uint64_t v70 = v31;
                      _os_log_impl(&dword_1830D4000, v28, OS_LOG_TYPE_DEBUG, "%{public}s %@ instance %p of %s not eligible, endpoints (candidate %@, endpoint %@) do not match", buf, 0x3Eu);
                    }
                    goto LABEL_78;
                  }
                  os_log_type_t v34 = nw_endpoint_copy_parent_endpoint(v7);
                  if (!nw_endpoint_is_equal(v34, *(void **)(a1 + 40), v9))
                  {
                    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                    networkd_settings_init();
                    uint64_t v37 = (id)gLogObj;
                    if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
                    {
                      uint64_t v38 = *(void *)(a1 + 72);
                      uint64_t v39 = *(void *)(a1 + 32);
                      uint64_t v40 = *(void *)(a1 + 40);
                      *(_DWORD *)int buf = 136447490;
                      id v60 = "nw_protocol_instance_registrar_find_instance_to_join_block_invoke";
                      __int16 v61 = 2112;
                      uint64_t v62 = v39;
                      __int16 v63 = 2048;
                      uint64_t v64 = v4;
                      __int16 v65 = 2080;
                      uint64_t v66 = v38;
                      __int16 v67 = 2112;
                      char v68 = v34;
                      __int16 v69 = 2112;
                      uint64_t v70 = v40;
                      _os_log_impl(&dword_1830D4000, v37, OS_LOG_TYPE_DEBUG, "%{public}s %@ instance %p of %s not eligible, endpoints (candidate parent %@, endpoint %@) do not match", buf, 0x3Eu);
                    }

                    goto LABEL_22;
                  }
                }
                if (nw_endpoint_is_equal(*(void **)(a1 + 40), *(void **)(a1 + 48), 0)) {
                  goto LABEL_19;
                }
                os_log_type_t v20 = *(void **)(a1 + 48);
                if (!v20) {
                  goto LABEL_19;
                }
                id v21 = v20;
                int v22 = [v21 type];

                if (v22 != 1) {
                  goto LABEL_19;
                }
                uint64_t v23 = v4;
                do
                {
                  uint64_t v24 = v23;
                  uint64_t v23 = *(void *)(v23 + 32);
                  if (!v23) {
                    break;
                  }
                  uint64_t v25 = *(void *)(v23 + 24);
                  if (!v25) {
                    break;
                  }
                }
                while (*(void *)(v25 + 136));
                uint64_t v26 = *(void *)(v24 + 24);
                if (v26 && (uint64_t v27 = *(void (**)(void))(v26 + 136)) != 0)
                {
                  uint64_t v10 = v27();
                  if (nw_endpoint_is_equal(v10, *(void **)(a1 + 48), 0)) {
                    goto LABEL_18;
                  }
                  if (gLogDatapath)
                  {
                    os_log_type_t v55 = __nwlog_obj();
                    if (os_log_type_enabled(v55, OS_LOG_TYPE_DEBUG))
                    {
                      uint64_t v56 = *(void *)(a1 + 32);
                      uint64_t v57 = *(void *)(a1 + 72);
                      uint64_t v58 = *(void *)(a1 + 48);
                      *(_DWORD *)int buf = 136447490;
                      id v60 = "nw_protocol_instance_registrar_find_instance_to_join_block_invoke";
                      __int16 v61 = 2112;
                      uint64_t v62 = v56;
                      __int16 v63 = 2048;
                      uint64_t v64 = v4;
                      __int16 v65 = 2080;
                      uint64_t v66 = v57;
                      __int16 v67 = 2112;
                      char v68 = v10;
                      __int16 v69 = 2112;
                      uint64_t v70 = v58;
                      _os_log_impl(&dword_1830D4000, v55, OS_LOG_TYPE_DEBUG, "%{public}s %@ instance %p of %s not eligible, transport endpoints (candidate %@, endpoint %@) do not match", buf, 0x3Eu);
                    }
                  }
                }
                else if (gLogDatapath)
                {
                  uint64_t v28 = __nwlog_obj();
                  if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
                  {
                    uint64_t v53 = *(void *)(a1 + 32);
                    uint64_t v54 = *(void *)(a1 + 72);
                    *(_DWORD *)int buf = 136446978;
                    id v60 = "nw_protocol_instance_registrar_find_instance_to_join_block_invoke";
                    __int16 v61 = 2112;
                    uint64_t v62 = v53;
                    __int16 v63 = 2048;
                    uint64_t v64 = v4;
                    __int16 v65 = 2080;
                    uint64_t v66 = v54;
                    _os_log_impl(&dword_1830D4000, v28, OS_LOG_TYPE_DEBUG, "%{public}s %@ instance %p of %s not eligible, transport protocol does not support get endpoint", buf, 0x2Au);
                  }
                  goto LABEL_78;
                }
LABEL_22:
                int v3 = 4;
              }

LABEL_24:
              continue;
            }
          }
        }
        if (gLogDatapath)
        {
          uint64_t v7 = __nwlog_obj();
          if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v46 = *(void *)(a1 + 32);
            uint64_t v47 = *(void *)(a1 + 72);
            *(_DWORD *)int buf = 136446978;
            id v60 = "nw_protocol_instance_registrar_find_instance_to_join_block_invoke";
            __int16 v61 = 2112;
            uint64_t v62 = v46;
            __int16 v63 = 2048;
            uint64_t v64 = v4;
            __int16 v65 = 2080;
            uint64_t v66 = v47;
            id v17 = v7;
            id v18 = "%{public}s %@ instance %p of %s not eligible, missing required callbacks";
            goto LABEL_69;
          }
LABEL_71:
          int v3 = 4;
          goto LABEL_24;
        }
      }
      else if (gLogDatapath)
      {
        uint64_t v7 = __nwlog_obj();
        if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_71;
        }
        uint64_t v14 = *(void *)(a1 + 32);
        uint64_t v15 = *(void *)(v4 + 16);
        uint64_t v16 = *(NSObject **)(a1 + 72);
        *(_DWORD *)int buf = 136447234;
        id v60 = "nw_protocol_instance_registrar_find_instance_to_join_block_invoke";
        __int16 v61 = 2112;
        uint64_t v62 = v14;
        __int16 v63 = 2048;
        uint64_t v64 = v4;
        __int16 v65 = 2080;
        uint64_t v66 = v15;
        __int16 v67 = 2080;
        char v68 = v16;
        id v17 = v7;
        id v18 = "%{public}s %@ instance %p (%s) not eligible for joining by %s, identifier doesn't match";
        uint32_t v19 = 52;
LABEL_70:
        _os_log_impl(&dword_1830D4000, v17, OS_LOG_TYPE_DEBUG, v18, buf, v19);
        goto LABEL_71;
      }
    }
    else if (gLogDatapath)
    {
      uint64_t v7 = __nwlog_obj();
      if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_71;
      }
      uint64_t v48 = *(void *)(a1 + 32);
      uint64_t v49 = v2[2];
      uint64_t v50 = *(void *)(a1 + 72);
      *(_DWORD *)int buf = 136446978;
      id v60 = "nw_protocol_instance_registrar_find_instance_to_join_block_invoke";
      __int16 v61 = 2112;
      uint64_t v62 = v48;
      __int16 v63 = 2048;
      uint64_t v64 = v49;
      __int16 v65 = 2080;
      uint64_t v66 = v50;
      id v17 = v7;
      id v18 = "%{public}s %@ instance %p of %s not eligible, missing protocol handle";
LABEL_69:
      uint32_t v19 = 42;
      goto LABEL_70;
    }
    int v3 = 4;
  }
  while (v3 == 4);
}

void sub_183666910(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL70nw_protocol_instance_registrar_search_edges_for_instance_to_join_innerPK22nw_protocol_identifiermPU25objcproto14OS_nw_endpoint8NSObjectS4_S4_PU27objcproto16OS_nw_parametersS2_bb_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = v4;
  if (v4)
  {
    int v6 = *((unsigned char *)v4 + 64) & 1;
    goto LABEL_3;
  }
  uint64_t v13 = __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  uint64_t v28 = "nw_endpoint_edge_is_wildcard";
  uint64_t v14 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v25 = 0;
  if (__nwlog_fault(v14, &type, &v25))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v15 = __nwlog_obj();
      os_log_type_t v16 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v28 = "nw_endpoint_edge_is_wildcard";
        _os_log_impl(&dword_1830D4000, v15, v16, "%{public}s called with null edge", buf, 0xCu);
      }
    }
    else if (v25)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v15 = __nwlog_obj();
      os_log_type_t v18 = type;
      BOOL v19 = os_log_type_enabled(v15, type);
      if (backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)int buf = 136446466;
          uint64_t v28 = "nw_endpoint_edge_is_wildcard";
          __int16 v29 = 2082;
          uint64_t v30 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v15, v18, "%{public}s called with null edge, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_33;
      }
      if (v19)
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v28 = "nw_endpoint_edge_is_wildcard";
        _os_log_impl(&dword_1830D4000, v15, v18, "%{public}s called with null edge, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v15 = __nwlog_obj();
      os_log_type_t v24 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v28 = "nw_endpoint_edge_is_wildcard";
        _os_log_impl(&dword_1830D4000, v15, v24, "%{public}s called with null edge, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_33:
  if (v14) {
    free(v14);
  }
  int v6 = 0;
LABEL_3:

  if (*(unsigned __int8 *)(a1 + 80) != v6)
  {
LABEL_12:
    uint64_t v11 = 1;
    goto LABEL_13;
  }
  uint64_t v7 = nw_endpoint_edge_get_endpoint(v5);
  uint64_t v8 = v7;
  if (!v7)
  {
LABEL_11:

    goto LABEL_12;
  }
  id v9 = nw_endpoint_copy_registrar_for_identifier(v7, *(long long **)(a1 + 64), 0);
  if (v9)
  {
    uint64_t accept_function_for_identifier = nw_protocol_registrar_get_accept_function_for_identifier(*(void **)(a1 + 64));
    *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = nw_protocol_instance_registrar_find_instance_to_join(v9, *(void **)(a1 + 64), *(void *)(a1 + 72), *(unsigned __int8 *)(a1 + 81), 1, *(unsigned char *)(a1 + 80), *(void **)(a1 + 32), *(void **)(a1 + 40), *(void **)(a1 + 48), accept_function_for_identifier);
  }
  if (!*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24))
  {

    goto LABEL_11;
  }
  if (gLogDatapath)
  {
    os_log_type_t v20 = __nwlog_obj();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
    {
      id v21 = *(char **)(a1 + 40);
      uint64_t v22 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24);
      uint64_t v23 = *(void *)(v22 + 16);
      *(_DWORD *)int buf = 136447234;
      uint64_t v28 = "nw_protocol_instance_registrar_search_edges_for_instance_to_join_inner_block_invoke";
      __int16 v29 = 2112;
      uint64_t v30 = v21;
      __int16 v31 = 2080;
      uint64_t v32 = v23;
      __int16 v33 = 2048;
      uint64_t v34 = v22;
      __int16 v35 = 2112;
      uint64_t v36 = v8;
      _os_log_impl(&dword_1830D4000, v20, OS_LOG_TYPE_DEBUG, "%{public}s destination %@ found protocol to join %s (%p) in endpoint %@", buf, 0x34u);
    }
  }
  uint64_t v11 = 0;
LABEL_13:

  return v11;
}

void sub_183666D44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __nw_protocol_instance_registrar_copy_shared_connection_state_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  for (uint64_t i = *(void **)(*(void *)(a1 + 32) + 16); i; uint64_t i = (void *)*i)
  {
    if (i[2] == *(void *)(a1 + 64))
    {
      if (i[3]
        || *(unsigned char *)(a1 + 72) && (v6 = nw_dictionary_create(), uint64_t v7 = (void *)i[3], i[3] = v6, v7, i[3]))
      {
        *(_OWORD *)__str = 0u;
        memset(v9, 0, sizeof(v9));
        snprintf(__str, 0x2AuLL, "%p%p", *(const void **)(a1 + 40), *(const void **)(a1 + 48));
        int v3 = nw_dictionary_copy_value(i[3], (uint64_t)__str);
        uint64_t v4 = *(void *)(*(void *)(a1 + 56) + 8);
        uint64_t v5 = *(void **)(v4 + 40);
        *(void *)(v4 + 40) = v3;
      }
    }
  }
}

uint64_t nw_framer_parse_array(void *a1, void *a2, char a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  uint64_t v82 = *MEMORY[0x1E4F143B8];
  uint64_t v40 = a1;
  id v15 = a8;
  os_log_type_t v16 = (void (**)(void, void, void, void))v15;
  unsigned int v17 = 0;
  uint64_t v18 = *a2;
  while (v18)
  {
    int v22 = *(_DWORD *)(v18 + 52);
    if (v22) {
      v22 -= *(_DWORD *)(v18 + 56) + *(_DWORD *)(v18 + 60);
    }
    uint64_t v18 = *(void *)(v18 + 32);
    BOOL v19 = __CFADD__(v17, v22);
    unsigned int v20 = v17 + v22;
    v17 += v22;
    if (v19) {
      unsigned int v21 = -1;
    }
    else {
      unsigned int v21 = v20;
    }
    if (v21 >= a5) {
      goto LABEL_12;
    }
  }
  if (v17 >= a5)
  {
LABEL_12:
    *(void *)int buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000;
    LOBYTE(v81) = 0;
    uint64_t v74 = 0;
    uint64_t v75 = &v74;
    uint64_t v76 = 0x2020000000;
    uint64_t v77 = 0;
    uint64_t v70 = 0;
    uint64_t v71 = &v70;
    uint64_t v72 = 0x2020000000;
    uint64_t v73 = a7;
    uint64_t v66 = 0;
    __int16 v67 = &v66;
    uint64_t v68 = 0x2020000000;
    uint64_t v69 = 0;
    v64[0] = 0;
    v64[1] = v64;
    v64[2] = 0x2020000000;
    char v65 = 0;
    v48[0] = MEMORY[0x1E4F143A8];
    v48[1] = 3221225472;
    uint64_t v49 = ___ZL21nw_framer_parse_arrayP20NWConcrete_nw_framerP16nw_frame_array_sbbmmPhU13block_pointerFmS3_mbE_block_invoke;
    uint64_t v50 = &unk_1E523B130;
    char v62 = a3;
    uint64_t v59 = a6;
    uint64_t v60 = a5;
    uint64_t v53 = &v66;
    uint64_t v54 = &v70;
    uint64_t v58 = a2;
    os_log_type_t v55 = &v74;
    char v63 = a4;
    id v25 = v15;
    id v52 = v25;
    uint64_t v23 = v40;
    uint64_t v26 = v40;
    uint64_t v51 = v26;
    uint64_t v56 = buf;
    uint64_t v57 = v64;
    uint64_t v61 = a7;
    uint64_t v27 = *a2;
    do
    {
      if (!v27) {
        break;
      }
      uint64_t v28 = *(void *)(v27 + 32);
      char v29 = ((uint64_t (*)(void *))v49)(v48);
      uint64_t v27 = v28;
    }
    while ((v29 & 1) != 0);
    if (!*(unsigned char *)(*(void *)&buf[8] + 24) && v67[3])
    {
      if (gLogDatapath)
      {
        uint64_t v38 = __nwlog_obj();
        if (os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v39 = v67[3];
          *(_DWORD *)os_log_type_t v78 = 136446722;
          *(void *)&v78[4] = "nw_framer_parse_array";
          *(_WORD *)&v78[12] = 2080;
          *(void *)&v78[14] = v26 + 609;
          *(_WORD *)&v78[22] = 2048;
          uint64_t v79 = v39;
          _os_log_impl(&dword_1830D4000, v38, OS_LOG_TYPE_DEBUG, "%{public}s %s Reconstructed buffer of %zu bytes", v78, 0x20u);
        }
      }
      unint64_t v32 = (*((uint64_t (**)(id, uint64_t))v25 + 2))(v25, v71[3]);
      if (v32)
      {
        unint64_t v33 = v67[3];
        if (v32 < v33) {
          LODWORD(v33) = v32;
        }
        *(void *)os_log_type_t v78 = 0;
        *(void *)&v78[8] = v78;
        *(void *)&v78[16] = 0x2020000000;
        LODWORD(v79) = v33;
        v41[0] = MEMORY[0x1E4F143A8];
        v41[1] = 3221225472;
        uint64_t v42 = ___ZL21nw_framer_parse_arrayP20NWConcrete_nw_framerP16nw_frame_array_sbbmmPhU13block_pointerFmS3_mbE_block_invoke_135;
        uint64_t v43 = &unk_1E523B158;
        BOOL v45 = v78;
        char v47 = a3;
        uint64_t v44 = v26;
        uint64_t v46 = a2;
        uint64_t v34 = *a2;
        do
        {
          if (!v34) {
            break;
          }
          uint64_t v35 = *(void *)(v34 + 32);
          char v36 = ((uint64_t (*)(void *))v42)(v41);
          uint64_t v34 = v35;
        }
        while ((v36 & 1) != 0);

        _Block_object_dispose(v78, 8);
      }
    }
    uint64_t v30 = (void *)v75[3];
    if (v30)
    {
      free(v30);
      v75[3] = 0;
    }

    _Block_object_dispose(v64, 8);
    _Block_object_dispose(&v66, 8);
    _Block_object_dispose(&v70, 8);
    _Block_object_dispose(&v74, 8);
    _Block_object_dispose(buf, 8);
    uint64_t v24 = 1;
    goto LABEL_19;
  }
  uint64_t v23 = v40;
  if (gLogDatapath)
  {
    uint64_t v37 = __nwlog_obj();
    if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)int buf = 136446722;
      *(void *)&uint8_t buf[4] = "nw_framer_parse_array";
      *(_WORD *)&buf[12] = 2080;
      *(void *)&buf[14] = v40 + 609;
      *(_WORD *)&unsigned char buf[22] = 2048;
      uint64_t v81 = a5;
      _os_log_impl(&dword_1830D4000, v37, OS_LOG_TYPE_DEBUG, "%{public}s %s Not enough bytes to parse %zu", buf, 0x20u);
    }
  }
  v16[2](v16, 0, 0, 0);
  uint64_t v24 = 0;
LABEL_19:

  return v24;
}

void sub_1836676B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  _Block_object_dispose(&a35, 8);
  _Block_object_dispose(&a39, 8);
  _Block_object_dispose((const void *)(v40 - 256), 8);
  _Block_object_dispose((const void *)(v40 - 224), 8);
  _Block_object_dispose((const void *)(v40 - 160), 8);

  _Unwind_Resume(a1);
}

BOOL ___ZL21nw_framer_parse_arrayP20NWConcrete_nw_framerP16nw_frame_array_sbbmmPhU13block_pointerFmS3_mbE_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v84 = *MEMORY[0x1E4F143B8];
  int v3 = a2;
  if (!nw_frame_uses_external_data((uint64_t)v3))
  {
    HIDWORD(__n) = 0;
    uint64_t v12 = (const void *)nw_frame_unclaimed_bytes((uint64_t)v3, (_DWORD *)&__n + 1);
    size_t v13 = HIDWORD(__n);
    if (HIDWORD(__n))
    {
      uint64_t v14 = v12;
      uint64_t v15 = *(void *)(a1 + 48);
      uint64_t v16 = *(void *)(*(void *)(v15 + 8) + 24);
      if (*(void *)(a1 + 96) - v16 >= (unint64_t)HIDWORD(__n)) {
        size_t v17 = HIDWORD(__n);
      }
      else {
        size_t v17 = *(void *)(a1 + 96) - v16;
      }
      if (!v16 && v17 >= *(void *)(a1 + 104))
      {
        if (*(void *)(a1 + 112)) {
          memcpy(*(void **)(a1 + 112), v12, v17);
        }
        unint64_t v30 = (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
        if (v30)
        {
          if (v30 >= v17) {
            int v32 = v17;
          }
          else {
            int v32 = v30;
          }
          nw_frame_claim((uint64_t)v3, v31, v32, 0);
        }
        if (*(unsigned char *)(a1 + 120) && !nw_frame_unclaimed_length(v3))
        {
          uint64_t v33 = *((void *)v3 + 4);
          uint64_t v34 = (void *)*((void *)v3 + 5);
          if (v33)
          {
            *(void *)(v33 + 40) = v34;
            uint64_t v34 = (void *)*((void *)v3 + 5);
          }
          else
          {
            *(void *)(*(void *)(a1 + 88) + 8) = v34;
          }
          void *v34 = v33;
          *((void *)v3 + 4) = 0;
          *((void *)v3 + 5) = 0;
          nw_frame_finalize((uint64_t)v3);
        }
        uint64_t v23 = 0;
        *(unsigned char *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) = 1;
        goto LABEL_91;
      }
      if (!*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24))
      {
        size_t v18 = *(void *)(a1 + 104);
        if (!v18)
        {
          char v63 = __nwlog_obj();
          os_log_type_enabled(v63, OS_LOG_TYPE_ERROR);
          *(_DWORD *)int buf = 136446210;
          uint64_t v75 = "strict_malloc";
          uint64_t v64 = (void *)_os_log_send_and_compose_impl();

          BOOL result = __nwlog_abort((uint64_t)v64);
          if (result) {
            goto LABEL_128;
          }
          free(v64);
        }
        BOOL v19 = malloc_type_malloc(v18, 0xF2B69DE5uLL);
        if (!v19)
        {
          __int16 v67 = __nwlog_obj();
          os_log_type_enabled(v67, OS_LOG_TYPE_ERROR);
          *(_DWORD *)int buf = 136446466;
          uint64_t v75 = "strict_malloc";
          __int16 v76 = 2048;
          size_t v77 = v18;
          uint64_t v68 = (void *)_os_log_send_and_compose_impl();

          BOOL result = __nwlog_abort((uint64_t)v68);
          if (result) {
            goto LABEL_128;
          }
          free(v68);
          BOOL v19 = 0;
        }
        *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = v19;
        *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = *(void *)(*(void *)(*(void *)(a1 + 64) + 8)
                                                                                + 24);
        uint64_t v15 = *(void *)(a1 + 48);
        uint64_t v16 = *(void *)(*(void *)(v15 + 8) + 24);
        size_t v13 = HIDWORD(__n);
      }
      size_t v20 = *(void *)(a1 + 104) - v16;
      if (v20 <= v13)
      {
        if (*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 24)) {
          size_t v17 = v20;
        }
        if (v17 == v13)
        {
          if (*(unsigned char *)(a1 + 121)) {
            BOOL v27 = 1;
          }
          else {
            BOOL v27 = *((char *)v3 + 186) < 0;
          }
          *(unsigned char *)(*(void *)(*(void *)(a1 + 80) + 8) + 24) = v27;
        }
        if (gLogDatapath)
        {
          uint64_t v56 = __nwlog_obj();
          if (os_log_type_enabled(v56, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v57 = *(void *)(a1 + 32);
            if (v57) {
              uint64_t v58 = (const char *)(v57 + 609);
            }
            else {
              uint64_t v58 = "";
            }
            uint64_t v59 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
            uint64_t v60 = *(void *)(a1 + 104);
            *(_DWORD *)int buf = 136447234;
            uint64_t v75 = "nw_framer_parse_array_block_invoke";
            __int16 v76 = 2080;
            size_t v77 = (size_t)v58;
            __int16 v78 = 2048;
            uint64_t v79 = v59;
            __int16 v80 = 2048;
            size_t v81 = v59 + v17;
            __int16 v82 = 2048;
            uint64_t v83 = v60;
            _os_log_impl(&dword_1830D4000, v56, OS_LOG_TYPE_DEBUG, "%{public}s %s Reading from %zu-%zu of %zu (complete)", buf, 0x34u);
          }
        }
        memcpy((void *)(*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24)+ *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24)), v14, v17);
        uint64_t v23 = 0;
        *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) += v17;
        goto LABEL_91;
      }
      if (gLogDatapath)
      {
        uint64_t v46 = __nwlog_obj();
        if (os_log_type_enabled(v46, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v47 = *(void *)(a1 + 32);
          if (v47) {
            uint64_t v48 = (const char *)(v47 + 609);
          }
          else {
            uint64_t v48 = "";
          }
          uint64_t v49 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
          uint64_t v50 = *(void *)(a1 + 104);
          *(_DWORD *)int buf = 136447234;
          uint64_t v75 = "nw_framer_parse_array_block_invoke";
          __int16 v76 = 2080;
          size_t v77 = (size_t)v48;
          __int16 v78 = 2048;
          uint64_t v79 = v49;
          __int16 v80 = 2048;
          size_t v81 = v49 + HIDWORD(__n);
          __int16 v82 = 2048;
          uint64_t v83 = v50;
          _os_log_impl(&dword_1830D4000, v46, OS_LOG_TYPE_DEBUG, "%{public}s %s Reading from %zu-%zu of %zu (partial)", buf, 0x34u);
        }

        uint64_t v15 = *(void *)(a1 + 48);
        LODWORD(v13) = HIDWORD(__n);
      }
      memcpy((void *)(*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) + *(void *)(*(void *)(v15 + 8) + 24)), v14, v13);
      *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) += HIDWORD(__n);
    }
    else if (*(unsigned char *)(a1 + 120))
    {
      uint64_t v24 = *((void *)v3 + 4);
      id v25 = (void *)*((void *)v3 + 5);
      if (v24)
      {
        *(void *)(v24 + 40) = v25;
        id v25 = (void *)*((void *)v3 + 5);
      }
      else
      {
        *(void *)(*(void *)(a1 + 88) + 8) = v25;
      }
      *id v25 = v24;
      *((void *)v3 + 4) = 0;
      *((void *)v3 + 5) = 0;
      uint64_t v23 = 1;
      nw_frame_finalize((uint64_t)v3);
      goto LABEL_91;
    }
    uint64_t v23 = 1;
LABEL_91:

    return v23;
  }
  size_t __n = 0;
  uint64_t v4 = nw_frame_copy_external_data((uint64_t)v3, &__n, (_DWORD *)&__n + 1);
  size_t v5 = HIDWORD(__n);
  if (!HIDWORD(__n))
  {
    if (*(unsigned char *)(a1 + 120))
    {
      uint64_t v21 = *((void *)v3 + 4);
      int v22 = (void *)*((void *)v3 + 5);
      if (v21)
      {
        *(void *)(v21 + 40) = v22;
        int v22 = (void *)*((void *)v3 + 5);
      }
      else
      {
        *(void *)(*(void *)(a1 + 88) + 8) = v22;
      }
      *int v22 = v21;
      *((void *)v3 + 4) = 0;
      *((void *)v3 + 5) = 0;
      uint64_t v23 = 1;
      nw_frame_finalize((uint64_t)v3);
      goto LABEL_90;
    }
LABEL_31:
    uint64_t v23 = 1;
LABEL_90:

    goto LABEL_91;
  }
  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t v7 = *(void *)(*(void *)(v6 + 8) + 24);
  if (*(void *)(a1 + 96) - v7 >= (unint64_t)HIDWORD(__n)) {
    size_t v8 = HIDWORD(__n);
  }
  else {
    size_t v8 = *(void *)(a1 + 96) - v7;
  }
  if (!v7 && v8 >= *(void *)(a1 + 104))
  {
    uint64_t v28 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24);
    if (!v28)
    {
      if (!v8)
      {
        uint64_t v69 = __nwlog_obj();
        os_log_type_enabled(v69, OS_LOG_TYPE_ERROR);
        *(_DWORD *)int buf = 136446210;
        uint64_t v75 = "strict_malloc";
        uint64_t v70 = (void *)_os_log_send_and_compose_impl();

        BOOL result = __nwlog_abort((uint64_t)v70);
        if (result) {
          goto LABEL_128;
        }
        free(v70);
      }
      char v29 = malloc_type_malloc(v8, 0xF2B69DE5uLL);
      if (!v29)
      {
        uint64_t v71 = __nwlog_obj();
        os_log_type_enabled(v71, OS_LOG_TYPE_ERROR);
        *(_DWORD *)int buf = 136446466;
        uint64_t v75 = "strict_malloc";
        __int16 v76 = 2048;
        size_t v77 = v8;
        uint64_t v72 = (void *)_os_log_send_and_compose_impl();

        BOOL result = __nwlog_abort((uint64_t)v72);
        if (result) {
          goto LABEL_128;
        }
        free(v72);
      }
      *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = v29;
      *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = *(void *)(*(void *)(*(void *)(a1 + 64) + 8)
                                                                              + 24);
      uint64_t v28 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24);
    }
    nw_dispatch_data_copyout_from_offset(v4, v28, v8, __n);
    unint64_t v35 = (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24));
    if (v35)
    {
      if (v35 >= v8) {
        int v37 = v8;
      }
      else {
        int v37 = v35;
      }
      nw_frame_claim((uint64_t)v3, v36, v37, 0);
    }
    if (*(unsigned char *)(a1 + 120) && !nw_frame_unclaimed_length(v3))
    {
      uint64_t v38 = *((void *)v3 + 4);
      uint64_t v39 = (void *)*((void *)v3 + 5);
      if (v38)
      {
        *(void *)(v38 + 40) = v39;
        uint64_t v39 = (void *)*((void *)v3 + 5);
      }
      else
      {
        *(void *)(*(void *)(a1 + 88) + 8) = v39;
      }
      void *v39 = v38;
      *((void *)v3 + 4) = 0;
      *((void *)v3 + 5) = 0;
      nw_frame_finalize((uint64_t)v3);
    }
    uint64_t v23 = 0;
    *(unsigned char *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) = 1;
    goto LABEL_90;
  }
  if (*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24))
  {
LABEL_12:
    size_t v11 = *(void *)(a1 + 104) - v7;
    if (v11 <= v5)
    {
      if (*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 24)) {
        size_t v8 = v11;
      }
      if (v8 == v5)
      {
        if (*(unsigned char *)(a1 + 121)) {
          BOOL v26 = 1;
        }
        else {
          BOOL v26 = *((char *)v3 + 186) < 0;
        }
        *(unsigned char *)(*(void *)(*(void *)(a1 + 80) + 8) + 24) = v26;
      }
      if (gLogDatapath)
      {
        uint64_t v51 = __nwlog_obj();
        if (os_log_type_enabled(v51, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v52 = *(void *)(a1 + 32);
          if (v52) {
            uint64_t v53 = (const char *)(v52 + 609);
          }
          else {
            uint64_t v53 = "";
          }
          uint64_t v54 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
          uint64_t v55 = *(void *)(a1 + 104);
          *(_DWORD *)int buf = 136447234;
          uint64_t v75 = "nw_framer_parse_array_block_invoke";
          __int16 v76 = 2080;
          size_t v77 = (size_t)v53;
          __int16 v78 = 2048;
          uint64_t v79 = v54;
          __int16 v80 = 2048;
          size_t v81 = v54 + v8;
          __int16 v82 = 2048;
          uint64_t v83 = v55;
          _os_log_impl(&dword_1830D4000, v51, OS_LOG_TYPE_DEBUG, "%{public}s %s Reading from %zu-%zu of %zu (complete)", buf, 0x34u);
        }
      }
      nw_dispatch_data_copyout_from_offset(v4, *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24)+ *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24), v8, __n);
      uint64_t v23 = 0;
      *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) += v8;
      goto LABEL_90;
    }
    if (gLogDatapath)
    {
      id v41 = __nwlog_obj();
      if (os_log_type_enabled(v41, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v42 = *(void *)(a1 + 32);
        if (v42) {
          uint64_t v43 = (const char *)(v42 + 609);
        }
        else {
          uint64_t v43 = "";
        }
        uint64_t v44 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
        uint64_t v45 = *(void *)(a1 + 104);
        *(_DWORD *)int buf = 136447234;
        uint64_t v75 = "nw_framer_parse_array_block_invoke";
        __int16 v76 = 2080;
        size_t v77 = (size_t)v43;
        __int16 v78 = 2048;
        uint64_t v79 = v44;
        __int16 v80 = 2048;
        size_t v81 = v44 + HIDWORD(__n);
        __int16 v82 = 2048;
        uint64_t v83 = v45;
        _os_log_impl(&dword_1830D4000, v41, OS_LOG_TYPE_DEBUG, "%{public}s %s Reading from %zu-%zu of %zu (partial)", buf, 0x34u);
      }

      uint64_t v6 = *(void *)(a1 + 48);
      LODWORD(v5) = HIDWORD(__n);
    }
    nw_dispatch_data_copyout_from_offset(v4, *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) + *(void *)(*(void *)(v6 + 8) + 24), v5, __n);
    *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) += HIDWORD(__n);
    goto LABEL_31;
  }
  size_t v9 = *(void *)(a1 + 104);
  if (!v9)
  {
    uint64_t v61 = __nwlog_obj();
    os_log_type_enabled(v61, OS_LOG_TYPE_ERROR);
    *(_DWORD *)int buf = 136446210;
    uint64_t v75 = "strict_malloc";
    char v62 = (void *)_os_log_send_and_compose_impl();

    BOOL result = __nwlog_abort((uint64_t)v62);
    if (result) {
      goto LABEL_128;
    }
    free(v62);
  }
  uint64_t v10 = malloc_type_malloc(v9, 0xF2B69DE5uLL);
  if (v10)
  {
LABEL_11:
    *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = v10;
    *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = *(void *)(*(void *)(*(void *)(a1 + 64) + 8)
                                                                            + 24);
    uint64_t v6 = *(void *)(a1 + 48);
    uint64_t v7 = *(void *)(*(void *)(v6 + 8) + 24);
    size_t v5 = HIDWORD(__n);
    goto LABEL_12;
  }
  char v65 = __nwlog_obj();
  os_log_type_enabled(v65, OS_LOG_TYPE_ERROR);
  *(_DWORD *)int buf = 136446466;
  uint64_t v75 = "strict_malloc";
  __int16 v76 = 2048;
  size_t v77 = v9;
  uint64_t v66 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v66);
  if (!result)
  {
    free(v66);
    uint64_t v10 = 0;
    goto LABEL_11;
  }
LABEL_128:
  __break(1u);
  return result;
}

void sub_1836683C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL ___ZL21nw_framer_parse_arrayP20NWConcrete_nw_framerP16nw_frame_array_sbbmmPhU13block_pointerFmS3_mbE_block_invoke_135(uint64_t a1, void *a2)
{
  int v3 = a2;
  unsigned int v4 = nw_frame_unclaimed_length(v3);
  if (*(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) >= v4) {
    int v6 = v4;
  }
  else {
    int v6 = *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
  }
  nw_frame_claim((uint64_t)v3, v5, v6, 0);
  if (*(unsigned char *)(a1 + 56) && !nw_frame_unclaimed_length(v3))
  {
    uint64_t v7 = *((void *)v3 + 4);
    size_t v8 = (void *)*((void *)v3 + 5);
    if (v7)
    {
      *(void *)(v7 + 40) = v8;
      size_t v8 = (void *)*((void *)v3 + 5);
    }
    else
    {
      *(void *)(*(void *)(a1 + 48) + 8) = v8;
    }
    *size_t v8 = v7;
    *((void *)v3 + 4) = 0;
    *((void *)v3 + 5) = 0;
    nw_frame_finalize((uint64_t)v3);
  }
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) -= v6;
  BOOL v9 = *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) != 0;

  return v9;
}

void nw_framer_deliver_input(nw_framer_t framer, const uint8_t *input_buffer, size_t input_length, nw_framer_message_t message, BOOL is_complete)
{
  BOOL v5 = is_complete;
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  BOOL v9 = framer;
  uint64_t v10 = message;
  size_t v11 = v10;
  if (!v9)
  {
    size_t v18 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v50 = "nw_framer_deliver_input";
    BOOL v19 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v47 = 0;
    if (!__nwlog_fault(v19, &type, &v47)) {
      goto LABEL_89;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      size_t v20 = __nwlog_obj();
      os_log_type_t v21 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v50 = "nw_framer_deliver_input";
        _os_log_impl(&dword_1830D4000, v20, v21, "%{public}s called with null framer", buf, 0xCu);
      }
    }
    else if (v47)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      size_t v20 = __nwlog_obj();
      os_log_type_t v31 = type;
      BOOL v32 = os_log_type_enabled(v20, type);
      if (backtrace_string)
      {
        if (v32)
        {
          *(_DWORD *)int buf = 136446466;
          uint64_t v50 = "nw_framer_deliver_input";
          __int16 v51 = 2082;
          uint64_t v52 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v20, v31, "%{public}s called with null framer, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_89:
        if (!v19) {
          goto LABEL_7;
        }
LABEL_90:
        free(v19);
        goto LABEL_7;
      }
      if (v32)
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v50 = "nw_framer_deliver_input";
        _os_log_impl(&dword_1830D4000, v20, v31, "%{public}s called with null framer, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      size_t v20 = __nwlog_obj();
      os_log_type_t v42 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v50 = "nw_framer_deliver_input";
        _os_log_impl(&dword_1830D4000, v20, v42, "%{public}s called with null framer, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_88:

    goto LABEL_89;
  }
  if (!v10)
  {
    int v22 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v50 = "nw_framer_deliver_input";
    BOOL v19 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v47 = 0;
    if (!__nwlog_fault(v19, &type, &v47)) {
      goto LABEL_89;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      size_t v20 = __nwlog_obj();
      os_log_type_t v23 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v50 = "nw_framer_deliver_input";
        _os_log_impl(&dword_1830D4000, v20, v23, "%{public}s called with null message", buf, 0xCu);
      }
      goto LABEL_88;
    }
    if (!v47)
    {
      size_t v20 = __nwlog_obj();
      os_log_type_t v43 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v50 = "nw_framer_deliver_input";
        _os_log_impl(&dword_1830D4000, v20, v43, "%{public}s called with null message, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_88;
    }
    uint64_t v33 = (char *)__nw_create_backtrace_string();
    size_t v20 = __nwlog_obj();
    os_log_type_t v34 = type;
    BOOL v35 = os_log_type_enabled(v20, type);
    if (!v33)
    {
      if (v35)
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v50 = "nw_framer_deliver_input";
        _os_log_impl(&dword_1830D4000, v20, v34, "%{public}s called with null message, no backtrace", buf, 0xCu);
      }
      goto LABEL_88;
    }
    if (v35)
    {
      *(_DWORD *)int buf = 136446466;
      uint64_t v50 = "nw_framer_deliver_input";
      __int16 v51 = 2082;
      uint64_t v52 = v33;
      _os_log_impl(&dword_1830D4000, v20, v34, "%{public}s called with null message, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_57;
  }
  uint64_t v12 = v10;
  size_t v13 = v12[1].isa;

  char is_framer = nw_protocol_definition_is_framer(v13);
  if ((is_framer & 1) == 0)
  {
    uint64_t v24 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v50 = "nw_framer_deliver_input";
    BOOL v19 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v47 = 0;
    if (!__nwlog_fault(v19, &type, &v47)) {
      goto LABEL_89;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      size_t v20 = __nwlog_obj();
      os_log_type_t v25 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v50 = "nw_framer_deliver_input";
        _os_log_impl(&dword_1830D4000, v20, v25, "%{public}s called with null nw_protocol_metadata_is_framer_message(message)", buf, 0xCu);
      }
      goto LABEL_88;
    }
    if (!v47)
    {
      size_t v20 = __nwlog_obj();
      os_log_type_t v44 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v50 = "nw_framer_deliver_input";
        _os_log_impl(&dword_1830D4000, v20, v44, "%{public}s called with null nw_protocol_metadata_is_framer_message(message), backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_88;
    }
    uint64_t v33 = (char *)__nw_create_backtrace_string();
    size_t v20 = __nwlog_obj();
    os_log_type_t v36 = type;
    BOOL v37 = os_log_type_enabled(v20, type);
    if (!v33)
    {
      if (v37)
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v50 = "nw_framer_deliver_input";
        _os_log_impl(&dword_1830D4000, v20, v36, "%{public}s called with null nw_protocol_metadata_is_framer_message(message), no backtrace", buf, 0xCu);
      }
      goto LABEL_88;
    }
    if (v37)
    {
      *(_DWORD *)int buf = 136446466;
      uint64_t v50 = "nw_framer_deliver_input";
      __int16 v51 = 2082;
      uint64_t v52 = v33;
      _os_log_impl(&dword_1830D4000, v20, v36, "%{public}s called with null nw_protocol_metadata_is_framer_message(message), dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_57;
  }
  if (!input_buffer)
  {
    BOOL v26 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v50 = "nw_framer_deliver_input";
    BOOL v19 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v47 = 0;
    if (!__nwlog_fault(v19, &type, &v47)) {
      goto LABEL_89;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      size_t v20 = __nwlog_obj();
      os_log_type_t v27 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v50 = "nw_framer_deliver_input";
        _os_log_impl(&dword_1830D4000, v20, v27, "%{public}s called with null input_buffer", buf, 0xCu);
      }
      goto LABEL_88;
    }
    if (!v47)
    {
      size_t v20 = __nwlog_obj();
      os_log_type_t v45 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v50 = "nw_framer_deliver_input";
        _os_log_impl(&dword_1830D4000, v20, v45, "%{public}s called with null input_buffer, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_88;
    }
    uint64_t v33 = (char *)__nw_create_backtrace_string();
    size_t v20 = __nwlog_obj();
    os_log_type_t v38 = type;
    BOOL v39 = os_log_type_enabled(v20, type);
    if (!v33)
    {
      if (v39)
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v50 = "nw_framer_deliver_input";
        _os_log_impl(&dword_1830D4000, v20, v38, "%{public}s called with null input_buffer, no backtrace", buf, 0xCu);
      }
      goto LABEL_88;
    }
    if (v39)
    {
      *(_DWORD *)int buf = 136446466;
      uint64_t v50 = "nw_framer_deliver_input";
      __int16 v51 = 2082;
      uint64_t v52 = v33;
      _os_log_impl(&dword_1830D4000, v20, v38, "%{public}s called with null input_buffer, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_57;
  }
  if (!input_length)
  {
    uint64_t v28 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v50 = "nw_framer_deliver_input";
    BOOL v19 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v47 = 0;
    if (!__nwlog_fault(v19, &type, &v47)) {
      goto LABEL_89;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      size_t v20 = __nwlog_obj();
      os_log_type_t v29 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v50 = "nw_framer_deliver_input";
        _os_log_impl(&dword_1830D4000, v20, v29, "%{public}s called with null input_length", buf, 0xCu);
      }
      goto LABEL_88;
    }
    if (!v47)
    {
      size_t v20 = __nwlog_obj();
      os_log_type_t v46 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v50 = "nw_framer_deliver_input";
        _os_log_impl(&dword_1830D4000, v20, v46, "%{public}s called with null input_length, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_88;
    }
    uint64_t v33 = (char *)__nw_create_backtrace_string();
    size_t v20 = __nwlog_obj();
    os_log_type_t v40 = type;
    BOOL v41 = os_log_type_enabled(v20, type);
    if (!v33)
    {
      if (v41)
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v50 = "nw_framer_deliver_input";
        _os_log_impl(&dword_1830D4000, v20, v40, "%{public}s called with null input_length, no backtrace", buf, 0xCu);
      }
      goto LABEL_88;
    }
    if (v41)
    {
      *(_DWORD *)int buf = 136446466;
      uint64_t v50 = "nw_framer_deliver_input";
      __int16 v51 = 2082;
      uint64_t v52 = v33;
      _os_log_impl(&dword_1830D4000, v20, v40, "%{public}s called with null input_length, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_57:

    free(v33);
    if (!v19) {
      goto LABEL_7;
    }
    goto LABEL_90;
  }
  nw_context_assert_queue(v9->context);
  uint64_t frame = nw_framer_protocol_create_frame(v9, input_length, (uint64_t)nw_framer_protocol_inbound_data_finalizer, (uint64_t)&v9->inbound_frames, 0);
  uint64_t v16 = (void *)nw_frame_unclaimed_bytes(frame, 0);
  nw_frame_set_metadata(frame, v12, 1, v5);
  memcpy(v16, input_buffer, input_length);
  *(void *)(frame + 32) = 0;
  tqh_last = v9->pending_input_frames.tqh_last;
  *(void *)(frame + 40) = tqh_last;
  void *tqh_last = frame;
  v9->pending_input_frames.tqh_last = (nw_frame **)(frame + 32);
  ++v9->pending_input_frame_count;
  nw_framer_signal_input_available(v9);

LABEL_7:
}

void sub_18366900C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_protocol_metadata_is_framer_message(nw_protocol_metadata_t metadata)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = metadata;
  uint64_t v2 = v1;
  if (v1)
  {
    int v3 = v1;
    id v4 = v3[1];

    char is_framer = nw_protocol_definition_is_framer(v4);
    goto LABEL_3;
  }
  uint64_t v7 = __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  size_t v18 = "nw_protocol_metadata_is_framer_message";
  size_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)int buf = 136446210;
        size_t v18 = "nw_protocol_metadata_is_framer_message";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null metadata", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v9 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)int buf = 136446466;
          size_t v18 = "nw_protocol_metadata_is_framer_message";
          __int16 v19 = 2082;
          size_t v20 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v13)
      {
        *(_DWORD *)int buf = 136446210;
        size_t v18 = "nw_protocol_metadata_is_framer_message";
        _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v9 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)int buf = 136446210;
        size_t v18 = "nw_protocol_metadata_is_framer_message";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v8) {
    free(v8);
  }
  char is_framer = 0;
LABEL_3:

  return is_framer;
}

BOOL nw_framer_protocol_create_frame(void *a1, unsigned int a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  id v9 = a1;
  os_log_type_t v10 = v9;
  if (!v9)
  {
    __int16 v19 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    BOOL v37 = "nw_framer_protocol_create_frame";
    size_t v20 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v34 = 0;
    if (__nwlog_fault(v20, &type, &v34))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v21 = __nwlog_obj();
        os_log_type_t v22 = type;
        if (os_log_type_enabled(v21, type))
        {
          *(_DWORD *)int buf = 136446210;
          BOOL v37 = "nw_framer_protocol_create_frame";
          _os_log_impl(&dword_1830D4000, v21, v22, "%{public}s called with null framer", buf, 0xCu);
        }
        goto LABEL_52;
      }
      if (!v34)
      {
        uint64_t v21 = __nwlog_obj();
        os_log_type_t v32 = type;
        if (os_log_type_enabled(v21, type))
        {
          *(_DWORD *)int buf = 136446210;
          BOOL v37 = "nw_framer_protocol_create_frame";
          _os_log_impl(&dword_1830D4000, v21, v32, "%{public}s called with null framer, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_52;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v21 = __nwlog_obj();
      os_log_type_t v26 = type;
      BOOL v27 = os_log_type_enabled(v21, type);
      if (!backtrace_string)
      {
        if (v27)
        {
          *(_DWORD *)int buf = 136446210;
          BOOL v37 = "nw_framer_protocol_create_frame";
          _os_log_impl(&dword_1830D4000, v21, v26, "%{public}s called with null framer, no backtrace", buf, 0xCu);
        }
        goto LABEL_52;
      }
      if (v27)
      {
        *(_DWORD *)int buf = 136446466;
        BOOL v37 = "nw_framer_protocol_create_frame";
        __int16 v38 = 2082;
        BOOL v39 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v21, v26, "%{public}s called with null framer, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_38:

      free(backtrace_string);
    }
LABEL_53:
    if (v20) {
      free(v20);
    }
    external = 0;
    goto LABEL_18;
  }
  size_t v11 = (void *)*((void *)v9 + 46);
  if (!v11)
  {
    os_log_type_t v23 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    BOOL v37 = "nw_framer_protocol_create_frame";
    size_t v20 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v34 = 0;
    if (__nwlog_fault(v20, &type, &v34))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v21 = __nwlog_obj();
        os_log_type_t v24 = type;
        if (os_log_type_enabled(v21, type))
        {
          *(_DWORD *)int buf = 136446210;
          BOOL v37 = "nw_framer_protocol_create_frame";
          _os_log_impl(&dword_1830D4000, v21, v24, "%{public}s called with null framer->context", buf, 0xCu);
        }
LABEL_52:

        goto LABEL_53;
      }
      if (!v34)
      {
        uint64_t v21 = __nwlog_obj();
        os_log_type_t v33 = type;
        if (os_log_type_enabled(v21, type))
        {
          *(_DWORD *)int buf = 136446210;
          BOOL v37 = "nw_framer_protocol_create_frame";
          _os_log_impl(&dword_1830D4000, v21, v33, "%{public}s called with null framer->context, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_52;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v21 = __nwlog_obj();
      os_log_type_t v28 = type;
      BOOL v29 = os_log_type_enabled(v21, type);
      if (!backtrace_string)
      {
        if (v29)
        {
          *(_DWORD *)int buf = 136446210;
          BOOL v37 = "nw_framer_protocol_create_frame";
          _os_log_impl(&dword_1830D4000, v21, v28, "%{public}s called with null framer->context, no backtrace", buf, 0xCu);
        }
        goto LABEL_52;
      }
      if (v29)
      {
        *(_DWORD *)int buf = 136446466;
        BOOL v37 = "nw_framer_protocol_create_frame";
        __int16 v38 = 2082;
        BOOL v39 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v21, v28, "%{public}s called with null framer->context, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_38;
    }
    goto LABEL_53;
  }
  if (a5)
  {
    external = (void *)nw_frame_create_external(0, a2, a3, (uint64_t)v10);
    if (!external) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  if (!a2)
  {
    external = (void *)nw_frame_create(0, 0, 0, a3, (uint64_t)v10);
    if (!external) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  uint64_t buffer_manager_with_context = nw_frame_get_buffer_manager_with_context(v11, a2);
  if (buffer_manager_with_context)
  {
    uint64_t v14 = buffer_manager_with_context;
    uint64_t v15 = nw_mem_buffer_allocate(buffer_manager_with_context);
    if (v15)
    {
LABEL_11:
      uint64_t v16 = nw_frame_create(0, v15, a2, a3, (uint64_t)v10);
      external = (void *)v16;
      if (v14)
      {
        nw_frame_set_buffer_used_manager(v16, v14);
        if (!external) {
          goto LABEL_18;
        }
      }
      else
      {
        nw_frame_set_buffer_used_malloc(v16, 1);
        if (!external)
        {
LABEL_18:

          return (BOOL)external;
        }
      }
LABEL_17:
      external = external;
      external[2] = 0;
      size_t v17 = *(void **)(a4 + 8);
      external[3] = v17;
      void *v17 = external;
      *(void *)(a4 + 8) = external + 2;
      goto LABEL_18;
    }
  }
  uint64_t v15 = (uint64_t)malloc_type_malloc(a2, 0xF2B69DE5uLL);
  if (v15)
  {
    uint64_t v14 = 0;
    goto LABEL_11;
  }
  unint64_t v30 = __nwlog_obj();
  os_log_type_enabled(v30, OS_LOG_TYPE_ERROR);
  *(_DWORD *)int buf = 136446466;
  BOOL v37 = "strict_malloc";
  __int16 v38 = 2048;
  BOOL v39 = (char *)a2;
  os_log_type_t v31 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v31);
  if (!result)
  {
    free(v31);
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

void sub_183669914(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_framer_signal_input_available(NWConcrete_nw_framer *a1)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = a1;
  uint64_t v2 = v1;
  char v3 = *((unsigned char *)v1 + 607);
  if ((v3 & 1) == 0 && (*((char *)v1 + 606) & 0x80000000) == 0)
  {
    uint64_t default_input_handler = v1->protocol.default_input_handler;
    if (default_input_handler)
    {
      callbacks = default_input_handler->callbacks;
      if (callbacks)
      {
        if (callbacks->input_available)
        {
          *((unsigned char *)v2 + 607) = v3 | 1;
          if (v2->pending_input_frames.tqh_first) {
            *((unsigned char *)v2 + 608) |= 0x20u;
          }
          int v6 = default_input_handler->callbacks;
          if (v6)
          {
            input_available = (void (*)(void))v6->input_available;
            if (input_available)
            {
              input_available();
LABEL_11:
              *((unsigned char *)v2 + 607) &= ~1u;
              goto LABEL_12;
            }
          }
          size_t v8 = __nwlog_obj();
          id v9 = v2->protocol.default_input_handler;
          os_log_type_t v10 = "invalid";
          if (v9)
          {
            name = v9->identifier->name;
            if (name) {
              os_log_type_t v10 = name;
            }
          }
          *(_DWORD *)int buf = 136446466;
          char v34 = "nw_framer_signal_input_available";
          __int16 v35 = 2082;
          os_log_type_t v36 = v10;
          os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

          os_log_type_t type = OS_LOG_TYPE_ERROR;
          char v31 = 0;
          if (__nwlog_fault(v12, &type, &v31))
          {
            if (type == OS_LOG_TYPE_FAULT)
            {
              BOOL v13 = __nwlog_obj();
              os_log_type_t v14 = type;
              if (os_log_type_enabled(v13, type))
              {
                uint64_t v15 = v2->protocol.default_input_handler;
                uint64_t v16 = "invalid";
                if (v15)
                {
                  size_t v17 = v15->identifier->name;
                  if (v17) {
                    uint64_t v16 = v17;
                  }
                }
                *(_DWORD *)int buf = 136446466;
                char v34 = "nw_framer_signal_input_available";
                __int16 v35 = 2082;
                os_log_type_t v36 = v16;
                _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s protocol %{public}s has invalid input_available callback", buf, 0x16u);
              }
            }
            else if (v31)
            {
              backtrace_string = (char *)__nw_create_backtrace_string();
              BOOL v13 = __nwlog_obj();
              os_log_type_t v19 = type;
              BOOL v20 = os_log_type_enabled(v13, type);
              if (backtrace_string)
              {
                if (v20)
                {
                  uint64_t v21 = v2->protocol.default_input_handler;
                  os_log_type_t v22 = "invalid";
                  if (v21)
                  {
                    os_log_type_t v23 = v21->identifier->name;
                    if (v23) {
                      os_log_type_t v22 = v23;
                    }
                  }
                  *(_DWORD *)int buf = 136446722;
                  char v34 = "nw_framer_signal_input_available";
                  __int16 v35 = 2082;
                  os_log_type_t v36 = v22;
                  __int16 v37 = 2082;
                  __int16 v38 = backtrace_string;
                  _os_log_impl(&dword_1830D4000, v13, v19, "%{public}s protocol %{public}s has invalid input_available callback, dumping backtrace:%{public}s", buf, 0x20u);
                }

                free(backtrace_string);
                goto LABEL_44;
              }
              if (v20)
              {
                os_log_type_t v28 = v2->protocol.default_input_handler;
                BOOL v29 = "invalid";
                if (v28)
                {
                  unint64_t v30 = v28->identifier->name;
                  if (v30) {
                    BOOL v29 = v30;
                  }
                }
                *(_DWORD *)int buf = 136446466;
                char v34 = "nw_framer_signal_input_available";
                __int16 v35 = 2082;
                os_log_type_t v36 = v29;
                _os_log_impl(&dword_1830D4000, v13, v19, "%{public}s protocol %{public}s has invalid input_available callback, no backtrace", buf, 0x16u);
              }
            }
            else
            {
              BOOL v13 = __nwlog_obj();
              os_log_type_t v24 = type;
              if (os_log_type_enabled(v13, type))
              {
                os_log_type_t v25 = v2->protocol.default_input_handler;
                os_log_type_t v26 = "invalid";
                if (v25)
                {
                  BOOL v27 = v25->identifier->name;
                  if (v27) {
                    os_log_type_t v26 = v27;
                  }
                }
                *(_DWORD *)int buf = 136446466;
                char v34 = "nw_framer_signal_input_available";
                __int16 v35 = 2082;
                os_log_type_t v36 = v26;
                _os_log_impl(&dword_1830D4000, v13, v24, "%{public}s protocol %{public}s has invalid input_available callback, backtrace limit exceeded", buf, 0x16u);
              }
            }
          }
LABEL_44:
          if (v12) {
            free(v12);
          }
          goto LABEL_11;
        }
      }
    }
  }
LABEL_12:
}

void sub_183669CC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_framer_protocol_inbound_data_finalizer(void *a1, int a2, char *a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  if (a2)
  {
    if (gLogDatapath)
    {
      int v6 = __nwlog_obj();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v7 = "";
        if (a3) {
          uint64_t v7 = a3 + 609;
        }
        int v10 = 136446466;
        size_t v11 = "nw_framer_protocol_inbound_data_finalizer";
        __int16 v12 = 2080;
        BOOL v13 = v7;
        size_t v8 = "%{public}s %s Finalizing inbound frame (success)";
LABEL_13:
        _os_log_impl(&dword_1830D4000, v6, OS_LOG_TYPE_DEBUG, v8, (uint8_t *)&v10, 0x16u);
        goto LABEL_14;
      }
      goto LABEL_14;
    }
  }
  else if (gLogDatapath)
  {
    int v6 = __nwlog_obj();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      id v9 = "";
      if (a3) {
        id v9 = a3 + 609;
      }
      int v10 = 136446466;
      size_t v11 = "nw_framer_protocol_inbound_data_finalizer";
      __int16 v12 = 2080;
      BOOL v13 = v9;
      size_t v8 = "%{public}s %s Finalizing inbound frame (drop)";
      goto LABEL_13;
    }
LABEL_14:
  }
  nw_framer_protocol_finalizer(v5, (uint64_t)(a3 + 464));
}

void nw_framer_protocol_finalizer(void *a1, uint64_t a2)
{
  size_t v8 = a1;
  if (nw_frame_buffer_used_malloc((uint64_t)v8))
  {
    buffer = (void *)nw_frame_get_buffer((uint64_t)v8, 0);
    if (buffer) {
      free(buffer);
    }
  }
  else if (nw_frame_buffer_used_manager((uint64_t)v8))
  {
    uint64_t manager = nw_frame_buffer_get_manager((uint64_t)v8);
    unint64_t v5 = nw_frame_get_buffer((uint64_t)v8, 0);
    nw_mem_buffer_free(manager, v5);
  }
  else if (nw_frame_uses_external_data((uint64_t)v8))
  {
    nw_frame_set_external_data((uint64_t)v8, 0, 0);
  }
  nw_frame_reset((uint64_t)v8, 0, 0, 0, 0);
  uint64_t v6 = v8[2];
  uint64_t v7 = (void *)v8[3];
  if (v6)
  {
    *(void *)(v6 + 24) = v7;
    uint64_t v7 = (void *)v8[3];
  }
  else
  {
    *(void *)(a2 + 8) = v7;
  }
  *uint64_t v7 = v6;
  v8[2] = 0;
  v8[3] = 0;
}

BOOL __nw_framer_deliver_input_no_copy_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  char v3 = a2;
  id v4 = v3;
  if (!*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24)) {
    goto LABEL_10;
  }
  unsigned int v50 = 0;
  uint64_t v5 = nw_frame_unclaimed_bytes((uint64_t)v3, &v50);
  unint64_t v6 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
  if (v6 == v50)
  {
    if (gLogDatapath)
    {
      os_log_type_t v32 = __nwlog_obj();
      if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v33 = *(void *)(a1 + 32);
        if (v33) {
          char v34 = (const char *)(v33 + 609);
        }
        else {
          char v34 = "";
        }
        uint64_t v35 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
        *(_DWORD *)int buf = 136446978;
        uint64_t v52 = "nw_framer_deliver_input_no_copy_block_invoke";
        __int16 v53 = 2080;
        uint64_t v54 = v34;
        __int16 v55 = 1024;
        unsigned int v56 = v50;
        __int16 v57 = 2048;
        uint64_t v58 = v35;
        _os_log_impl(&dword_1830D4000, v32, OS_LOG_TYPE_DEBUG, "%{public}s %s Parsing exact body (%u/%zu)", buf, 0x26u);
      }
    }
    nw_frame_set_metadata((uint64_t)v4, *(NSObject **)(a1 + 40), 1, *(unsigned __int8 *)(a1 + 56));
    uint64_t v8 = v4[4];
    id v9 = (void *)v4[5];
    uint64_t v7 = v4 + 4;
    if (v8)
    {
      *(void *)(v8 + 40) = v9;
      id v9 = (void *)v4[5];
    }
    else
    {
      *(void *)(*(void *)(a1 + 32) + 520) = v9;
    }
    *id v9 = v8;
    *uint64_t v7 = 0;
    void v4[5] = 0;
    uint64_t v23 = *(void *)(a1 + 32);
    uint64_t v22 = a1 + 32;
    os_log_type_t v24 = *(void **)(v23 + 536);
    void v4[5] = v24;
    void *v24 = v4;
    *(void *)(v23 + 536) = v7;
    ++*(_DWORD *)(*(void *)v22 + 544);
    os_log_type_t v25 = *(void **)(*(void *)v22 + 384);
    *(void *)(*(void *)v22 + 384) = 0;

    uint64_t v18 = 0;
    *(void *)(*(void *)v22 + 504) = 0;
    goto LABEL_25;
  }
  if (v6 >= v50)
  {
    if (v50)
    {
      if (gLogDatapath)
      {
        os_log_type_t v42 = __nwlog_obj();
        if (os_log_type_enabled(v42, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v43 = *(void *)(a1 + 32);
          if (v43) {
            os_log_type_t v44 = (const char *)(v43 + 609);
          }
          else {
            os_log_type_t v44 = "";
          }
          uint64_t v45 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
          *(_DWORD *)int buf = 136446978;
          uint64_t v52 = "nw_framer_deliver_input_no_copy_block_invoke";
          __int16 v53 = 2080;
          uint64_t v54 = v44;
          __int16 v55 = 1024;
          unsigned int v56 = v50;
          __int16 v57 = 2048;
          uint64_t v58 = v45;
          _os_log_impl(&dword_1830D4000, v42, OS_LOG_TYPE_DEBUG, "%{public}s %s Parsing partial body (%u/%zu)", buf, 0x26u);
        }
      }
      nw_frame_set_metadata((uint64_t)v4, *(NSObject **)(a1 + 40), 1, 0);
      uint64_t v20 = v4[4];
      uint64_t v21 = (void *)v4[5];
      os_log_type_t v19 = v4 + 4;
      if (v20)
      {
        *(void *)(v20 + 40) = v21;
        uint64_t v21 = (void *)v4[5];
      }
      else
      {
        *(void *)(*(void *)(a1 + 32) + 520) = v21;
      }
      *uint64_t v21 = v20;
      void *v19 = 0;
      void v4[5] = 0;
      uint64_t v29 = *(void *)(a1 + 32);
      unint64_t v30 = *(void **)(v29 + 536);
      void v4[5] = v30;
      *unint64_t v30 = v4;
      *(void *)(v29 + 536) = v19;
      ++*(_DWORD *)(*(void *)(a1 + 32) + 544);
      *(void *)(*(void *)(a1 + 32) + 504) = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) - v50;
      *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = *(void *)(*(void *)(a1 + 32) + 504);
    }
    else
    {
      if (gLogDatapath)
      {
        os_log_type_t v46 = __nwlog_obj();
        if (os_log_type_enabled(v46, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v47 = *(void *)(a1 + 32);
          if (v47) {
            uint64_t v48 = (const char *)(v47 + 609);
          }
          else {
            uint64_t v48 = "";
          }
          uint64_t v49 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
          *(_DWORD *)int buf = 136446978;
          uint64_t v52 = "nw_framer_deliver_input_no_copy_block_invoke";
          __int16 v53 = 2080;
          uint64_t v54 = v48;
          __int16 v55 = 1024;
          unsigned int v56 = v50;
          __int16 v57 = 2048;
          uint64_t v58 = v49;
          _os_log_impl(&dword_1830D4000, v46, OS_LOG_TYPE_DEBUG, "%{public}s %s Not enough bytes to parse body (%u/%zu)", buf, 0x26u);
        }

        unint64_t v6 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
        BOOL v26 = v50 == 0;
      }
      else
      {
        BOOL v26 = 1;
      }
      *(void *)(*(void *)(a1 + 32) + 504) = v6;
      *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = *(void *)(*(void *)(a1 + 32) + 504);
      if (v26)
      {
        uint64_t v27 = v4[4];
        os_log_type_t v28 = (void *)v4[5];
        if (v27)
        {
          *(void *)(v27 + 40) = v28;
          os_log_type_t v28 = (void *)v4[5];
        }
        else
        {
          *(void *)(*(void *)(a1 + 32) + 520) = v28;
        }
        *os_log_type_t v28 = v27;
        void v4[4] = 0;
        void v4[5] = 0;
        uint64_t v18 = 1;
        nw_frame_finalize((uint64_t)v4);
        goto LABEL_25;
      }
    }
    uint64_t v18 = 1;
LABEL_25:

    return v18;
  }
  int v10 = (const void *)v5;
  if (gLogDatapath)
  {
    os_log_type_t v36 = __nwlog_obj();
    if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v37 = *(void *)(a1 + 32);
      if (v37) {
        __int16 v38 = (const char *)(v37 + 609);
      }
      else {
        __int16 v38 = "";
      }
      uint64_t v39 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
      *(_DWORD *)int buf = 136446978;
      uint64_t v52 = "nw_framer_deliver_input_no_copy_block_invoke";
      __int16 v53 = 2080;
      uint64_t v54 = v38;
      __int16 v55 = 1024;
      unsigned int v56 = v50;
      __int16 v57 = 2048;
      uint64_t v58 = v39;
      _os_log_impl(&dword_1830D4000, v36, OS_LOG_TYPE_DEBUG, "%{public}s %s Parsing full body (%u/%zu)", buf, 0x26u);
    }

    unint64_t v6 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
  }
  uint64_t frame = nw_framer_protocol_create_frame(*(void **)(a1 + 32), v6, (uint64_t)nw_framer_protocol_inbound_data_finalizer, *(void *)(a1 + 32) + 464, 0);
  __int16 v12 = (void *)nw_frame_unclaimed_bytes(frame, 0);
  nw_frame_set_metadata(frame, *(NSObject **)(a1 + 40), 1, *(unsigned __int8 *)(a1 + 56));
  memcpy(v12, v10, *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24));
  nw_frame_claim((uint64_t)v4, v13, *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8) + 24), 0);
  if (nw_frame_unclaimed_length(v4))
  {
LABEL_9:
    uint64_t v15 = *(void *)(a1 + 32);
    uint64_t v14 = a1 + 32;
    *(void *)(frame + 32) = 0;
    uint64_t v16 = *(uint64_t **)(v15 + 536);
    *(void *)(frame + 40) = v16;
    uint64_t *v16 = frame;
    *(void *)(v15 + 536) = frame + 32;
    ++*(_DWORD *)(*(void *)v14 + 544);
    size_t v17 = *(void **)(*(void *)v14 + 384);
    *(void *)(*(void *)v14 + 384) = 0;

    *(void *)(*(void *)v14 + 504) = 0;
LABEL_10:
    uint64_t v18 = 0;
    goto LABEL_25;
  }
  uint64_t v40 = __nwlog_obj();
  os_log_type_enabled(v40, OS_LOG_TYPE_ERROR);
  *(_DWORD *)int buf = 136446210;
  uint64_t v52 = "nw_framer_deliver_input_no_copy_block_invoke";
  BOOL v41 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v41);
  if (!result)
  {
    free(v41);
    goto LABEL_9;
  }
  __break(1u);
  return result;
}

void sub_18366A5C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_framer_parse_output(nw_framer_t framer, size_t minimum_incomplete_length, size_t maximum_length, uint8_t *temp_buffer, nw_framer_parse_completion_t parse)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  nw_framer_t v9 = framer;
  nw_framer_parse_completion_t v10 = parse;
  if (!v9)
  {
    uint64_t v14 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v25 = "nw_framer_parse_output";
    uint64_t v15 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (__nwlog_fault(v15, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v16 = __nwlog_obj();
        os_log_type_t v17 = type;
        if (os_log_type_enabled(v16, type))
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v25 = "nw_framer_parse_output";
          _os_log_impl(&dword_1830D4000, v16, v17, "%{public}s called with null framer", buf, 0xCu);
        }
      }
      else if (v22)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        uint64_t v16 = __nwlog_obj();
        os_log_type_t v19 = type;
        BOOL v20 = os_log_type_enabled(v16, type);
        if (backtrace_string)
        {
          if (v20)
          {
            *(_DWORD *)int buf = 136446466;
            os_log_type_t v25 = "nw_framer_parse_output";
            __int16 v26 = 2082;
            uint64_t v27 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v16, v19, "%{public}s called with null framer, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_25;
        }
        if (v20)
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v25 = "nw_framer_parse_output";
          _os_log_impl(&dword_1830D4000, v16, v19, "%{public}s called with null framer, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        uint64_t v16 = __nwlog_obj();
        os_log_type_t v21 = type;
        if (os_log_type_enabled(v16, type))
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v25 = "nw_framer_parse_output";
          _os_log_impl(&dword_1830D4000, v16, v21, "%{public}s called with null framer, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_25:
    if (v15) {
      free(v15);
    }
    goto LABEL_6;
  }
  nw_context_assert_queue(v9[46].isa);
  if ((HIBYTE(v9[75].isa) & 4) != 0)
  {
    char v12 = nw_framer_parse_array(v9, &v9[71].isa, 0, 0, minimum_incomplete_length, maximum_length, (uint64_t)temp_buffer, v10);
    goto LABEL_8;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  size_t v11 = (id)gLogObj;
  if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v25 = "nw_framer_parse_output";
    _os_log_impl(&dword_1830D4000, v11, OS_LOG_TYPE_ERROR, "%{public}s Cannot parse output when not in output handler", buf, 0xCu);
  }

LABEL_6:
  char v12 = 0;
LABEL_8:

  return v12;
}

void sub_18366A944(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_framer_write_output_data(nw_framer_t framer, dispatch_data_t output_data)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  nw_framer_t v3 = framer;
  id v4 = output_data;
  uint64_t v5 = v4;
  if (!v3)
  {
    uint64_t v13 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    unint64_t v30 = "nw_framer_write_output_data";
    uint64_t v14 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v27 = 0;
    if (!__nwlog_fault(v14, &type, &v27)) {
      goto LABEL_48;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v15 = __nwlog_obj();
      os_log_type_t v16 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)int buf = 136446210;
        unint64_t v30 = "nw_framer_write_output_data";
        _os_log_impl(&dword_1830D4000, v15, v16, "%{public}s called with null framer", buf, 0xCu);
      }
    }
    else if (v27)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v15 = __nwlog_obj();
      os_log_type_t v20 = type;
      BOOL v21 = os_log_type_enabled(v15, type);
      if (backtrace_string)
      {
        if (v21)
        {
          *(_DWORD *)int buf = 136446466;
          unint64_t v30 = "nw_framer_write_output_data";
          __int16 v31 = 2082;
          os_log_type_t v32 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v15, v20, "%{public}s called with null framer, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_48:
        if (!v14) {
          goto LABEL_14;
        }
        goto LABEL_49;
      }
      if (v21)
      {
        *(_DWORD *)int buf = 136446210;
        unint64_t v30 = "nw_framer_write_output_data";
        _os_log_impl(&dword_1830D4000, v15, v20, "%{public}s called with null framer, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v15 = __nwlog_obj();
      os_log_type_t v25 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)int buf = 136446210;
        unint64_t v30 = "nw_framer_write_output_data";
        _os_log_impl(&dword_1830D4000, v15, v25, "%{public}s called with null framer, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_47:

    goto LABEL_48;
  }
  if (!v4)
  {
    os_log_type_t v17 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    unint64_t v30 = "nw_framer_write_output_data";
    uint64_t v14 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v27 = 0;
    if (!__nwlog_fault(v14, &type, &v27)) {
      goto LABEL_48;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v15 = __nwlog_obj();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)int buf = 136446210;
        unint64_t v30 = "nw_framer_write_output_data";
        _os_log_impl(&dword_1830D4000, v15, v18, "%{public}s called with null output_data", buf, 0xCu);
      }
    }
    else if (v27)
    {
      char v22 = (char *)__nw_create_backtrace_string();
      uint64_t v15 = __nwlog_obj();
      os_log_type_t v23 = type;
      BOOL v24 = os_log_type_enabled(v15, type);
      if (v22)
      {
        if (v24)
        {
          *(_DWORD *)int buf = 136446466;
          unint64_t v30 = "nw_framer_write_output_data";
          __int16 v31 = 2082;
          os_log_type_t v32 = v22;
          _os_log_impl(&dword_1830D4000, v15, v23, "%{public}s called with null output_data, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v22);
        if (!v14) {
          goto LABEL_14;
        }
LABEL_49:
        free(v14);
        goto LABEL_14;
      }
      if (v24)
      {
        *(_DWORD *)int buf = 136446210;
        unint64_t v30 = "nw_framer_write_output_data";
        _os_log_impl(&dword_1830D4000, v15, v23, "%{public}s called with null output_data, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v15 = __nwlog_obj();
      os_log_type_t v26 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)int buf = 136446210;
        unint64_t v30 = "nw_framer_write_output_data";
        _os_log_impl(&dword_1830D4000, v15, v26, "%{public}s called with null output_data, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_47;
  }
  nw_context_assert_queue(v3[46].isa);
  if (v3[69].isa)
  {
    if ((BYTE6(v3[75].isa) & 2) == 0)
    {
LABEL_5:
      uint64_t isa = (uint64_t)v3[69].isa;
LABEL_8:
      if (isa)
      {
        uint64_t v9 = *(void *)(isa + 24) - *(void *)(isa + 16);
        if (v9)
        {
          nw_framer_parse_completion_t v10 = nw_array_remove_object_at_index(isa, (char *)((v9 >> 3) - 1));
          uint64_t v11 = (uint64_t)v3[69].isa;
          dispatch_data_t concat = dispatch_data_create_concat(v10, v5);
          nw_array_append(v11, concat);

          if ((HIBYTE(v3[75].isa) & 4) != 0) {
            goto LABEL_14;
          }
          goto LABEL_13;
        }
      }
      goto LABEL_12;
    }
  }
  else
  {
    BOOL v7 = nw_array_create();
    Class v8 = v3[69].isa;
    v3[69].uint64_t isa = (Class)v7;

    if ((BYTE6(v3[75].isa) & 2) == 0) {
      goto LABEL_5;
    }
  }
  uint64_t isa = (uint64_t)v3[69].isa;
  if ((HIBYTE(v3[75].isa) & 4) != 0) {
    goto LABEL_8;
  }
LABEL_12:
  nw_array_append(isa, v5);
  if ((HIBYTE(v3[75].isa) & 4) == 0) {
LABEL_13:
  }
    nw_framer_flush_output(v3, 0);
LABEL_14:
}

void sub_18366AEB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_framer_flush_output(void *a1, void *a2)
{
  uint64_t v91 = *MEMORY[0x1E4F143B8];
  nw_framer_t v3 = a1;
  id v65 = a2;
  if (!v3)
  {
    uint64_t v33 = __nwlog_obj();
    *(_DWORD *)__int16 v87 = 136446210;
    *(void *)&v87[4] = "nw_framer_flush_output";
    char v34 = (char *)_os_log_send_and_compose_impl();

    v77[0] = OS_LOG_TYPE_ERROR;
    buf[0] = 0;
    if (__nwlog_fault(v34, v77, buf))
    {
      if (v77[0] == OS_LOG_TYPE_FAULT)
      {
        uint64_t v35 = __nwlog_obj();
        os_log_type_t v36 = v77[0];
        if (os_log_type_enabled(v35, v77[0]))
        {
          *(_DWORD *)__int16 v87 = 136446210;
          *(void *)&v87[4] = "nw_framer_flush_output";
          _os_log_impl(&dword_1830D4000, v35, v36, "%{public}s called with null framer", v87, 0xCu);
        }
        goto LABEL_124;
      }
      if (!buf[0])
      {
        uint64_t v35 = __nwlog_obj();
        os_log_type_t v54 = v77[0];
        if (os_log_type_enabled(v35, v77[0]))
        {
          *(_DWORD *)__int16 v87 = 136446210;
          *(void *)&v87[4] = "nw_framer_flush_output";
          _os_log_impl(&dword_1830D4000, v35, v54, "%{public}s called with null framer, backtrace limit exceeded", v87, 0xCu);
        }
        goto LABEL_124;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v35 = __nwlog_obj();
      os_log_type_t v46 = v77[0];
      BOOL v47 = os_log_type_enabled(v35, v77[0]);
      if (!backtrace_string)
      {
        if (v47)
        {
          *(_DWORD *)__int16 v87 = 136446210;
          *(void *)&v87[4] = "nw_framer_flush_output";
          _os_log_impl(&dword_1830D4000, v35, v46, "%{public}s called with null framer, no backtrace", v87, 0xCu);
        }
        goto LABEL_124;
      }
      if (v47)
      {
        *(_DWORD *)__int16 v87 = 136446466;
        *(void *)&v87[4] = "nw_framer_flush_output";
        *(_WORD *)&v87[12] = 2082;
        *(void *)&v87[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v35, v46, "%{public}s called with null framer, dumping backtrace:%{public}s", v87, 0x16u);
      }
LABEL_100:

      free(backtrace_string);
    }
LABEL_125:
    if (v34) {
      free(v34);
    }
LABEL_63:
    uint64_t v28 = 0;
    goto LABEL_71;
  }
  uint64_t v4 = *((void *)v3 + 40);
  if (!v4)
  {
    uint64_t v37 = __nwlog_obj();
    *(_DWORD *)__int16 v87 = 136446210;
    *(void *)&v87[4] = "nw_framer_flush_output";
    char v34 = (char *)_os_log_send_and_compose_impl();

    v77[0] = OS_LOG_TYPE_ERROR;
    buf[0] = 0;
    if (__nwlog_fault(v34, v77, buf))
    {
      if (v77[0] == OS_LOG_TYPE_FAULT)
      {
        uint64_t v35 = __nwlog_obj();
        os_log_type_t v38 = v77[0];
        if (os_log_type_enabled(v35, v77[0]))
        {
          *(_DWORD *)__int16 v87 = 136446210;
          *(void *)&v87[4] = "nw_framer_flush_output";
          _os_log_impl(&dword_1830D4000, v35, v38, "%{public}s called with null output_handler", v87, 0xCu);
        }
LABEL_124:

        goto LABEL_125;
      }
      if (!buf[0])
      {
        uint64_t v35 = __nwlog_obj();
        os_log_type_t v55 = v77[0];
        if (os_log_type_enabled(v35, v77[0]))
        {
          *(_DWORD *)__int16 v87 = 136446210;
          *(void *)&v87[4] = "nw_framer_flush_output";
          _os_log_impl(&dword_1830D4000, v35, v55, "%{public}s called with null output_handler, backtrace limit exceeded", v87, 0xCu);
        }
        goto LABEL_124;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v35 = __nwlog_obj();
      os_log_type_t v48 = v77[0];
      BOOL v49 = os_log_type_enabled(v35, v77[0]);
      if (!backtrace_string)
      {
        if (v49)
        {
          *(_DWORD *)__int16 v87 = 136446210;
          *(void *)&v87[4] = "nw_framer_flush_output";
          _os_log_impl(&dword_1830D4000, v35, v48, "%{public}s called with null output_handler, no backtrace", v87, 0xCu);
        }
        goto LABEL_124;
      }
      if (v49)
      {
        *(_DWORD *)__int16 v87 = 136446466;
        *(void *)&v87[4] = "nw_framer_flush_output";
        *(_WORD *)&v87[12] = 2082;
        *(void *)&v87[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v35, v48, "%{public}s called with null output_handler, dumping backtrace:%{public}s", v87, 0x16u);
      }
      goto LABEL_100;
    }
    goto LABEL_125;
  }
  while (1)
  {
    uint64_t v5 = *((void *)v3 + 69);
    if (!v5) {
      break;
    }
    if (*(void *)(v5 + 24) == *(void *)(v5 + 16)) {
      goto LABEL_62;
    }
    *(void *)__int16 v87 = 0;
    *(void *)&v87[8] = v87;
    *(void *)&v87[16] = 0x3032000000;
    int v88 = __Block_byref_object_copy__4450;
    uint64_t v89 = __Block_byref_object_dispose__4451;
    id v90 = nw_array_remove_object_at_index(v5, 0);
    *(void *)size_t v77 = 0;
    __int16 v78 = v77;
    uint64_t v79 = 0x2020000000;
    size_t v80 = 0;
    size_t size = dispatch_data_get_size(*(dispatch_data_t *)(*(void *)&v87[8] + 40));
    size_t v80 = size;
    v76[0] = 0;
    v76[1] = v76;
    if ((v3[606] & 2) != 0) {
      uint64_t v7 = size;
    }
    else {
      uint64_t v7 = 1;
    }
    uint64_t v8 = *(void *)(v4 + 24);
    if (v8 && (uint64_t v9 = *(uint64_t (**)(uint64_t, char *, uint64_t, size_t, uint64_t, void *))(v8 + 88)) != 0) {
      int v10 = v9(v4, v3 + 288, v7, size, 1, v76);
    }
    else {
      int v10 = 0;
    }
    if (gLogDatapath)
    {
      os_log_t log = __nwlog_obj();
      if (os_log_type_enabled(log, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)int buf = 136446722;
        __int16 v82 = "nw_framer_flush_output";
        __int16 v83 = 2080;
        uint64_t v84 = v3 + 609;
        __int16 v85 = 1024;
        LODWORD(v86) = v10;
        _os_log_impl(&dword_1830D4000, log, OS_LOG_TYPE_DEBUG, "%{public}s %s Got %u output frames", buf, 0x1Cu);
      }
    }
    v3[608] = v3[608] & 0xBF | ((v10 == 0) << 6);
    if (v10)
    {
      v68[0] = MEMORY[0x1E4F143A8];
      v68[1] = 3221225472;
      uint64_t v69 = (uint64_t (*)(void *))___ZL22nw_framer_flush_outputP20NWConcrete_nw_framerPU22objcproto11OS_nw_frame8NSObject_block_invoke;
      uint64_t v70 = &unk_1E523CC70;
      uint64_t v73 = v87;
      uint64_t v75 = v76;
      uint64_t v71 = v3;
      uint64_t v74 = v77;
      id v72 = v65;
      uint64_t v11 = v76[0];
      do
      {
        if (!v11) {
          break;
        }
        uint64_t v12 = *(void *)(v11 + 32);
        char v13 = v69(v68);
        uint64_t v11 = v12;
      }
      while ((v13 & 1) != 0);
      uint64_t v14 = *(void **)(*(void *)&v87[8] + 40);
      if (v14) {
        nw_array_prepend(*((void *)v3 + 69), v14);
      }
      if (v76[0])
      {
        uint64_t v15 = *(void *)(v4 + 24);
        if (v15)
        {
          os_log_type_t v16 = *(void (**)(uint64_t, void *))(v15 + 96);
          if (v16)
          {
            v16(v4, v76);
            goto LABEL_22;
          }
        }
        os_log_type_t v18 = __nwlog_obj();
        os_log_type_t v19 = *(const char **)(v4 + 16);
        if (!v19) {
          os_log_type_t v19 = "invalid";
        }
        *(_DWORD *)int buf = 136446466;
        __int16 v82 = "nw_framer_flush_output";
        __int16 v83 = 2082;
        uint64_t v84 = v19;
        loga = (const char *)_os_log_send_and_compose_impl();

        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v66 = 0;
        os_log_type_t v20 = (char *)loga;
        if (__nwlog_fault(loga, &type, &v66))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            BOOL v21 = __nwlog_obj();
            os_log_type_t v60 = type;
            if (os_log_type_enabled(v21, type))
            {
              char v22 = *(const char **)(v4 + 16);
              if (!v22) {
                char v22 = "invalid";
              }
              *(_DWORD *)int buf = 136446466;
              __int16 v82 = "nw_framer_flush_output";
              __int16 v83 = 2082;
              uint64_t v84 = v22;
              _os_log_impl(&dword_1830D4000, v21, v60, "%{public}s protocol %{public}s has invalid finalize_output_frames callback", buf, 0x16u);
            }
            goto LABEL_40;
          }
          if (v66)
          {
            os_log_type_t v23 = (char *)__nw_create_backtrace_string();
            uint64_t v61 = __nwlog_obj();
            os_log_type_t v59 = type;
            BOOL v24 = os_log_type_enabled(v61, type);
            if (v23)
            {
              if (v24)
              {
                os_log_type_t v25 = *(const char **)(v4 + 16);
                if (!v25) {
                  os_log_type_t v25 = "invalid";
                }
                *(_DWORD *)int buf = 136446722;
                __int16 v82 = "nw_framer_flush_output";
                __int16 v83 = 2082;
                uint64_t v84 = v25;
                __int16 v85 = 2082;
                id v86 = v23;
                _os_log_impl(&dword_1830D4000, v61, v59, "%{public}s protocol %{public}s has invalid finalize_output_frames callback, dumping backtrace:%{public}s", buf, 0x20u);
              }

              free(v23);
            }
            else
            {
              if (v24)
              {
                char v27 = *(const char **)(v4 + 16);
                if (!v27) {
                  char v27 = "invalid";
                }
                *(_DWORD *)int buf = 136446466;
                __int16 v82 = "nw_framer_flush_output";
                __int16 v83 = 2082;
                uint64_t v84 = v27;
                _os_log_impl(&dword_1830D4000, v61, v59, "%{public}s protocol %{public}s has invalid finalize_output_frames callback, no backtrace", buf, 0x16u);
              }
            }
          }
          else
          {
            BOOL v21 = __nwlog_obj();
            os_log_type_t v62 = type;
            if (os_log_type_enabled(v21, type))
            {
              os_log_type_t v26 = *(const char **)(v4 + 16);
              if (!v26) {
                os_log_type_t v26 = "invalid";
              }
              *(_DWORD *)int buf = 136446466;
              __int16 v82 = "nw_framer_flush_output";
              __int16 v83 = 2082;
              uint64_t v84 = v26;
              _os_log_impl(&dword_1830D4000, v21, v62, "%{public}s protocol %{public}s has invalid finalize_output_frames callback, backtrace limit exceeded", buf, 0x16u);
            }
LABEL_40:
          }
          os_log_type_t v20 = (char *)loga;
        }
        if (v20) {
          free(v20);
        }
LABEL_22:
        int v17 = 0;
      }
      else
      {
        int v17 = 27;
      }

      goto LABEL_26;
    }
    nw_array_prepend(*((void *)v3 + 69), *(void **)(*(void *)&v87[8] + 40));
    int v17 = 27;
LABEL_26:
    _Block_object_dispose(v77, 8);
    _Block_object_dispose(v87, 8);

    if (v17)
    {
      uint64_t v5 = *((void *)v3 + 69);
      if (!v5) {
        break;
      }
LABEL_62:
      if (*(void *)(v5 + 24) != *(void *)(v5 + 16)) {
        goto LABEL_63;
      }
      break;
    }
  }
  if ((v3[607] & 0x40) == 0) {
    goto LABEL_70;
  }
  v3[607] &= ~0x40u;
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  uint64_t v29 = (id)gLogObj;
  if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__int16 v87 = 136446466;
    *(void *)&v87[4] = "nw_framer_flush_output";
    *(_WORD *)&v87[12] = 2080;
    *(void *)&v87[14] = v3 + 609;
    _os_log_impl(&dword_1830D4000, v29, OS_LOG_TYPE_INFO, "%{public}s %s Delivering delayed output_finished", v87, 0x16u);
  }

  uint64_t v30 = *(void *)(v4 + 24);
  if (v30)
  {
    __int16 v31 = *(void (**)(uint64_t, char *))(v30 + 192);
    if (v31)
    {
      v31(v4, v3 + 288);
      goto LABEL_70;
    }
  }
  uint64_t v39 = __nwlog_obj();
  uint64_t v40 = *(const char **)(v4 + 16);
  if (!v40) {
    uint64_t v40 = "invalid";
  }
  *(_DWORD *)__int16 v87 = 136446466;
  *(void *)&v87[4] = "nw_framer_flush_output";
  *(_WORD *)&v87[12] = 2082;
  *(void *)&v87[14] = v40;
  BOOL v41 = (char *)_os_log_send_and_compose_impl();

  v77[0] = OS_LOG_TYPE_ERROR;
  buf[0] = 0;
  if (__nwlog_fault(v41, v77, buf))
  {
    if (v77[0] == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v42 = __nwlog_obj();
      os_log_type_t v43 = v77[0];
      if (os_log_type_enabled(v42, v77[0]))
      {
        os_log_type_t v44 = *(const char **)(v4 + 16);
        if (!v44) {
          os_log_type_t v44 = "invalid";
        }
        *(_DWORD *)__int16 v87 = 136446466;
        *(void *)&v87[4] = "nw_framer_flush_output";
        *(_WORD *)&v87[12] = 2082;
        *(void *)&v87[14] = v44;
        _os_log_impl(&dword_1830D4000, v42, v43, "%{public}s protocol %{public}s has invalid output_finished callback", v87, 0x16u);
      }
      goto LABEL_131;
    }
    if (buf[0])
    {
      unsigned int v50 = (char *)__nw_create_backtrace_string();
      os_log_type_t v42 = __nwlog_obj();
      os_log_type_t v51 = v77[0];
      BOOL v52 = os_log_type_enabled(v42, v77[0]);
      if (v50)
      {
        if (v52)
        {
          __int16 v53 = *(const char **)(v4 + 16);
          if (!v53) {
            __int16 v53 = "invalid";
          }
          *(_DWORD *)__int16 v87 = 136446722;
          *(void *)&v87[4] = "nw_framer_flush_output";
          *(_WORD *)&v87[12] = 2082;
          *(void *)&v87[14] = v53;
          *(_WORD *)&v87[22] = 2082;
          int v88 = (uint64_t (*)(uint64_t, uint64_t))v50;
          _os_log_impl(&dword_1830D4000, v42, v51, "%{public}s protocol %{public}s has invalid output_finished callback, dumping backtrace:%{public}s", v87, 0x20u);
        }

        free(v50);
        goto LABEL_132;
      }
      if (v52)
      {
        uint64_t v58 = *(const char **)(v4 + 16);
        if (!v58) {
          uint64_t v58 = "invalid";
        }
        *(_DWORD *)__int16 v87 = 136446466;
        *(void *)&v87[4] = "nw_framer_flush_output";
        *(_WORD *)&v87[12] = 2082;
        *(void *)&v87[14] = v58;
        _os_log_impl(&dword_1830D4000, v42, v51, "%{public}s protocol %{public}s has invalid output_finished callback, no backtrace", v87, 0x16u);
      }
    }
    else
    {
      os_log_type_t v42 = __nwlog_obj();
      os_log_type_t v56 = v77[0];
      if (os_log_type_enabled(v42, v77[0]))
      {
        __int16 v57 = *(const char **)(v4 + 16);
        if (!v57) {
          __int16 v57 = "invalid";
        }
        *(_DWORD *)__int16 v87 = 136446466;
        *(void *)&v87[4] = "nw_framer_flush_output";
        *(_WORD *)&v87[12] = 2082;
        *(void *)&v87[14] = v57;
        _os_log_impl(&dword_1830D4000, v42, v56, "%{public}s protocol %{public}s has invalid output_finished callback, backtrace limit exceeded", v87, 0x16u);
      }
    }
LABEL_131:
  }
LABEL_132:
  if (v41) {
    free(v41);
  }
LABEL_70:
  uint64_t v28 = 1;
LABEL_71:

  return v28;
}

void sub_18366BCA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__4450(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__4451(uint64_t a1)
{
}

uint64_t ___ZL22nw_framer_flush_outputP20NWConcrete_nw_framerPU22objcproto11OS_nw_frame8NSObject_block_invoke(void *a1, void *a2)
{
  v97[2] = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = (uint64_t)v3;
  if (!*(void *)(*(void *)(a1[6] + 8) + 40))
  {
    nw_frame_finalize((uint64_t)v3);
    uint64_t v12 = *(void *)(v4 + 32);
    char v13 = *(void **)(v4 + 40);
    if (v12)
    {
      *(void *)(v12 + 40) = v13;
      char v13 = *(void **)(v4 + 40);
    }
    else
    {
      *(void *)(a1[8] + 8) = v13;
    }
    *char v13 = v12;
    *(void *)(v4 + 32) = 0;
    *(void *)(v4 + 40) = 0;
    if (gLogDatapath)
    {
      char v22 = __nwlog_obj();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v23 = a1[4];
        if (v23) {
          BOOL v24 = (const char *)(v23 + 609);
        }
        else {
          BOOL v24 = "";
        }
        *(_DWORD *)int buf = 136446466;
        __int16 v93 = "nw_framer_flush_output_block_invoke";
        __int16 v94 = 2080;
        __int16 v95 = (void *)v24;
        _os_log_impl(&dword_1830D4000, v22, OS_LOG_TYPE_DEBUG, "%{public}s %s No output data, dropping output frame", buf, 0x16u);
      }
    }
    goto LABEL_55;
  }
  if (!nw_frame_uses_external_data((uint64_t)v3))
  {
    unsigned int offset = 0;
    uint64_t v14 = nw_frame_unclaimed_bytes(v4, &offset);
    if (v14)
    {
      uint64_t v15 = v14;
      uint64_t v16 = offset;
      unint64_t v17 = *(void *)(*(void *)(a1[7] + 8) + 24);
      if (offset)
      {
        if (v17 > offset)
        {
          if (gLogDatapath)
          {
            uint64_t v84 = v14;
            __int16 v85 = __nwlog_obj();
            if (os_log_type_enabled(v85, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v86 = a1[4];
              if (v86) {
                __int16 v87 = (const char *)(v86 + 609);
              }
              else {
                __int16 v87 = "";
              }
              uint64_t v88 = *(void *)(*(void *)(a1[7] + 8) + 24);
              *(_DWORD *)int buf = 136446978;
              __int16 v93 = "nw_framer_flush_output_block_invoke";
              __int16 v94 = 2080;
              __int16 v95 = (void *)v87;
              __int16 v96 = 1024;
              LODWORD(v97[0]) = offset;
              WORD2(v97[0]) = 2048;
              *(void *)((char *)v97 + 6) = v88;
              _os_log_impl(&dword_1830D4000, v85, OS_LOG_TYPE_DEBUG, "%{public}s %s Set partial frame output_length %u < %zu bytes", buf, 0x26u);
            }

            uint64_t v16 = offset;
            uint64_t v15 = v84;
          }
          nw_dispatch_data_copyout_from_offset(*(NSObject **)(*(void *)(a1[6] + 8) + 40), v15, v16, 0);
          dispatch_data_t subrange = dispatch_data_create_subrange(*(dispatch_data_t *)(*(void *)(a1[6] + 8) + 40), offset, *(void *)(*(void *)(a1[7] + 8) + 24) - offset);
          uint64_t v19 = *(void *)(a1[6] + 8);
          os_log_type_t v20 = *(void **)(v19 + 40);
          *(void *)(v19 + 40) = subrange;

          size_t size = dispatch_data_get_size(*(dispatch_data_t *)(*(void *)(a1[6] + 8) + 40));
          goto LABEL_60;
        }
LABEL_56:
        if (gLogDatapath)
        {
          uint64_t v79 = v14;
          size_t v80 = __nwlog_obj();
          if (os_log_type_enabled(v80, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v81 = a1[4];
            if (v81) {
              __int16 v82 = (const char *)(v81 + 609);
            }
            else {
              __int16 v82 = "";
            }
            uint64_t v83 = *(void *)(*(void *)(a1[7] + 8) + 24);
            *(_DWORD *)int buf = 136446722;
            __int16 v93 = "nw_framer_flush_output_block_invoke";
            __int16 v94 = 2080;
            __int16 v95 = (void *)v82;
            __int16 v96 = 2048;
            v97[0] = v83;
            _os_log_impl(&dword_1830D4000, v80, OS_LOG_TYPE_DEBUG, "%{public}s %s Set frame %zu bytes", buf, 0x20u);
          }

          unint64_t v17 = *(void *)(*(void *)(a1[7] + 8) + 24);
          uint64_t v15 = v79;
        }
        nw_dispatch_data_copyout_from_offset(*(NSObject **)(*(void *)(a1[6] + 8) + 40), v15, v17, 0);
        if ((*(unsigned char *)(a1[4] + 607) & 0x20) != 0)
        {
          *(unsigned char *)(v4 + 186) |= 0x80u;
          *(unsigned char *)(a1[4] + 607) &= ~0x20u;
        }
        nw_frame_claim(v4, v44, *(_DWORD *)(*(void *)(a1[7] + 8) + 24), 0);
        nw_frame_collapse(v4);
        nw_frame_unclaim(v4, v45, *(_DWORD *)(*(void *)(a1[7] + 8) + 24), 0);
        uint64_t v46 = *(void *)(a1[6] + 8);
        BOOL v47 = *(void **)(v46 + 40);
        *(void *)(v46 + 40) = 0;

        size_t size = 0;
LABEL_60:
        *(void *)(*(void *)(a1[7] + 8) + 24) = size;
        uint64_t v33 = a1[5];
        if (!v33) {
          goto LABEL_55;
        }
        goto LABEL_42;
      }
      if (!v17) {
        goto LABEL_56;
      }
    }
    if (gLogDatapath)
    {
      uint64_t v64 = __nwlog_obj();
      if (os_log_type_enabled(v64, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v65 = a1[4];
        if (v65) {
          char v66 = (const char *)(v65 + 609);
        }
        else {
          char v66 = "";
        }
        uint64_t v67 = *(void *)(*(void *)(a1[7] + 8) + 24);
        *(_DWORD *)int buf = 136446978;
        __int16 v93 = "nw_framer_flush_output_block_invoke";
        __int16 v94 = 2080;
        __int16 v95 = (void *)v66;
        __int16 v96 = 1024;
        LODWORD(v97[0]) = offset;
        WORD2(v97[0]) = 2048;
        *(void *)((char *)v97 + 6) = v67;
        _os_log_impl(&dword_1830D4000, v64, OS_LOG_TYPE_DEBUG, "%{public}s %s Dropping empty output frame %u < %zu bytes", buf, 0x26u);
      }
    }
    goto LABEL_37;
  }
  unsigned int v5 = nw_frame_unclaimed_length((_DWORD *)v4);
  unint64_t v6 = *(void *)(*(void *)(a1[7] + 8) + 24);
  if (v5)
  {
    size_t v7 = v5;
    if (v6 > v5)
    {
      if (gLogDatapath)
      {
        unsigned int v74 = v5;
        uint64_t v75 = __nwlog_obj();
        if (os_log_type_enabled(v75, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v76 = a1[4];
          if (v76) {
            size_t v77 = (const char *)(v76 + 609);
          }
          else {
            size_t v77 = "";
          }
          uint64_t v78 = *(void *)(*(void *)(a1[7] + 8) + 24);
          *(_DWORD *)int buf = 136446978;
          __int16 v93 = "nw_framer_flush_output_block_invoke";
          __int16 v94 = 2080;
          __int16 v95 = (void *)v77;
          __int16 v96 = 1024;
          LODWORD(v97[0]) = v74;
          WORD2(v97[0]) = 2048;
          *(void *)((char *)v97 + 6) = v78;
          _os_log_impl(&dword_1830D4000, v75, OS_LOG_TYPE_DEBUG, "%{public}s %s Set partial external frame output_length %u < %zu bytes", buf, 0x26u);
        }
      }
      uint64_t v8 = dispatch_data_create_subrange(*(dispatch_data_t *)(*(void *)(a1[6] + 8) + 40), 0, v7);
      dispatch_data_t v9 = dispatch_data_create_subrange(*(dispatch_data_t *)(*(void *)(a1[6] + 8) + 40), v7, *(void *)(*(void *)(a1[7] + 8) + 24) - v7);
      uint64_t v10 = *(void *)(a1[6] + 8);
      uint64_t v11 = *(void **)(v10 + 40);
      *(void *)(v10 + 40) = v9;

      nw_frame_set_external_data(v4, v8, 0);
      *(void *)(*(void *)(a1[7] + 8) + 24) = dispatch_data_get_size(*(dispatch_data_t *)(*(void *)(a1[6] + 8)
                                                                                               + 40));

LABEL_41:
      uint64_t v33 = a1[5];
      if (!v33) {
        goto LABEL_55;
      }
LABEL_42:
      int v36 = *(_DWORD *)(v33 + 176);
      if (!v36)
      {
LABEL_46:
        int ecn_flag = nw_frame_get_ecn_flag(a1[5]);
        if (ecn_flag)
        {
          int v38 = ecn_flag;
          if (gLogDatapath)
          {
            os_log_type_t v55 = __nwlog_obj();
            if (os_log_type_enabled(v55, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v56 = a1[4];
              *(_DWORD *)int buf = 136446722;
              __int16 v93 = "nw_framer_flush_output_block_invoke";
              if (v56) {
                __int16 v57 = (const char *)(v56 + 609);
              }
              else {
                __int16 v57 = "";
              }
              __int16 v94 = 2080;
              __int16 v95 = (void *)v57;
              __int16 v96 = 1024;
              LODWORD(v97[0]) = v38;
              _os_log_impl(&dword_1830D4000, v55, OS_LOG_TYPE_DEBUG, "%{public}s %s Setting ECN flag %u on output frame", buf, 0x1Cu);
            }
          }
          nw_frame_set_ecn_flag(v4, v38);
        }
        uint64_t expire_time = nw_frame_get_expire_time(a1[5]);
        if (expire_time)
        {
          uint64_t v40 = expire_time;
          if (gLogDatapath)
          {
            uint64_t v58 = __nwlog_obj();
            if (os_log_type_enabled(v58, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v59 = a1[4];
              *(_DWORD *)int buf = 136446722;
              __int16 v93 = "nw_framer_flush_output_block_invoke";
              if (v59) {
                os_log_type_t v60 = (const char *)(v59 + 609);
              }
              else {
                os_log_type_t v60 = "";
              }
              __int16 v94 = 2080;
              __int16 v95 = (void *)v60;
              __int16 v96 = 2048;
              v97[0] = v40;
              _os_log_impl(&dword_1830D4000, v58, OS_LOG_TYPE_DEBUG, "%{public}s %s Setting expire time %llu on output frame", buf, 0x20u);
            }
          }
          nw_frame_set_expire_time(v4, v40);
        }
        uint64_t packet_id = nw_frame_get_packet_id(a1[5]);
        if (packet_id)
        {
          os_log_type_t v42 = (_OWORD *)packet_id;
          if (gLogDatapath)
          {
            uint64_t v61 = __nwlog_obj();
            if (os_log_type_enabled(v61, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v62 = a1[4];
              if (v62) {
                char v63 = (const char *)(v62 + 609);
              }
              else {
                char v63 = "";
              }
              *(_DWORD *)int buf = 136446466;
              __int16 v93 = "nw_framer_flush_output_block_invoke";
              __int16 v94 = 2080;
              __int16 v95 = (void *)v63;
              _os_log_impl(&dword_1830D4000, v61, OS_LOG_TYPE_DEBUG, "%{public}s %s Setting packet ID on output frame", buf, 0x16u);
            }
          }
          nw_frame_set_packet_id(v4, v42);
        }
        goto LABEL_55;
      }
      if (gLogDatapath)
      {
        os_log_type_t v48 = __nwlog_obj();
        if (os_log_type_enabled(v48, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v49 = a1[4];
          *(_DWORD *)int buf = 136446722;
          __int16 v93 = "nw_framer_flush_output_block_invoke";
          if (v49) {
            unsigned int v50 = (const char *)(v49 + 609);
          }
          else {
            unsigned int v50 = "";
          }
          __int16 v94 = 2080;
          __int16 v95 = (void *)v50;
          __int16 v96 = 1024;
          LODWORD(v97[0]) = v36;
          _os_log_impl(&dword_1830D4000, v48, OS_LOG_TYPE_DEBUG, "%{public}s %s Setting service class 0x%x on output frame", buf, 0x1Cu);
        }
      }
      if (v4)
      {
        *(_DWORD *)(v4 + 176) = v36;
        goto LABEL_46;
      }
      __nwlog_obj();
      *(_DWORD *)int buf = 136446210;
      __int16 v93 = "nw_frame_set_service_class";
      os_log_type_t v51 = (const char *)_os_log_send_and_compose_impl();
      LOBYTE(offset) = 16;
      char offset_7 = 0;
      uint64_t v89 = (char *)v51;
      if (__nwlog_fault(v51, &offset, &offset_7))
      {
        if (offset == 17)
        {
          BOOL v52 = __nwlog_obj();
          os_log_type_t v53 = offset;
          if (!os_log_type_enabled(v52, (os_log_type_t)offset)) {
            goto LABEL_130;
          }
          *(_DWORD *)int buf = 136446210;
          __int16 v93 = "nw_frame_set_service_class";
          os_log_type_t v54 = "%{public}s called with null frame";
          goto LABEL_129;
        }
        if (!offset_7)
        {
          BOOL v52 = __nwlog_obj();
          os_log_type_t v53 = offset;
          if (!os_log_type_enabled(v52, (os_log_type_t)offset)) {
            goto LABEL_130;
          }
          *(_DWORD *)int buf = 136446210;
          __int16 v93 = "nw_frame_set_service_class";
          os_log_type_t v54 = "%{public}s called with null frame, backtrace limit exceeded";
          goto LABEL_129;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        BOOL v52 = __nwlog_obj();
        os_log_type_t v53 = offset;
        BOOL v73 = os_log_type_enabled(v52, (os_log_type_t)offset);
        if (backtrace_string)
        {
          if (v73)
          {
            *(_DWORD *)int buf = 136446466;
            __int16 v93 = "nw_frame_set_service_class";
            __int16 v94 = 2082;
            __int16 v95 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v52, v53, "%{public}s called with null frame, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(backtrace_string);
          goto LABEL_130;
        }
        if (v73)
        {
          *(_DWORD *)int buf = 136446210;
          __int16 v93 = "nw_frame_set_service_class";
          os_log_type_t v54 = "%{public}s called with null frame, no backtrace";
LABEL_129:
          _os_log_impl(&dword_1830D4000, v52, v53, v54, buf, 0xCu);
        }
      }
LABEL_130:
      if (v89) {
        free(v89);
      }
      goto LABEL_46;
    }
    goto LABEL_30;
  }
  if (v6)
  {
    if (gLogDatapath)
    {
      os_log_type_t v25 = __nwlog_obj();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v26 = a1[4];
        if (v26) {
          char v27 = (const char *)(v26 + 609);
        }
        else {
          char v27 = "";
        }
        uint64_t v28 = *(void *)(*(void *)(a1[7] + 8) + 24);
        *(_DWORD *)int buf = 136446978;
        __int16 v93 = "nw_framer_flush_output_block_invoke";
        __int16 v94 = 2080;
        __int16 v95 = (void *)v27;
        __int16 v96 = 1024;
        LODWORD(v97[0]) = 0;
        WORD2(v97[0]) = 2048;
        *(void *)((char *)v97 + 6) = v28;
        _os_log_impl(&dword_1830D4000, v25, OS_LOG_TYPE_DEBUG, "%{public}s %s Dropping empty output external frame %u < %zu bytes", buf, 0x26u);
      }
    }
LABEL_37:
    nw_frame_finalize(v4);
    uint64_t v34 = *(void *)(v4 + 32);
    uint64_t v35 = *(void **)(v4 + 40);
    if (v34)
    {
      *(void *)(v34 + 40) = v35;
      uint64_t v35 = *(void **)(v4 + 40);
    }
    else
    {
      *(void *)(a1[8] + 8) = v35;
    }
    void *v35 = v34;
    *(void *)(v4 + 32) = 0;
    *(void *)(v4 + 40) = 0;
    goto LABEL_41;
  }
LABEL_30:
  if (gLogDatapath)
  {
    uint64_t v68 = __nwlog_obj();
    if (os_log_type_enabled(v68, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v69 = a1[4];
      if (v69) {
        uint64_t v70 = (const char *)(v69 + 609);
      }
      else {
        uint64_t v70 = "";
      }
      uint64_t v71 = *(void *)(*(void *)(a1[7] + 8) + 24);
      *(_DWORD *)int buf = 136446722;
      __int16 v93 = "nw_framer_flush_output_block_invoke";
      __int16 v94 = 2080;
      __int16 v95 = (void *)v70;
      __int16 v96 = 2048;
      v97[0] = v71;
      _os_log_impl(&dword_1830D4000, v68, OS_LOG_TYPE_DEBUG, "%{public}s %s Set external frame %zu bytes", buf, 0x20u);
    }
  }
  nw_frame_set_external_data(v4, *(dispatch_data_t *)(*(void *)(a1[6] + 8) + 40), 0);
  if ((*(unsigned char *)(a1[4] + 607) & 0x20) != 0)
  {
    *(unsigned char *)(v4 + 186) |= 0x80u;
    *(unsigned char *)(a1[4] + 607) &= ~0x20u;
  }
  nw_frame_claim(v4, v29, *(_DWORD *)(*(void *)(a1[7] + 8) + 24), 0);
  nw_frame_collapse(v4);
  nw_frame_unclaim(v4, v30, *(_DWORD *)(*(void *)(a1[7] + 8) + 24), 0);
  uint64_t v31 = *(void *)(a1[6] + 8);
  os_log_type_t v32 = *(void **)(v31 + 40);
  *(void *)(v31 + 40) = 0;

  *(void *)(*(void *)(a1[7] + 8) + 24) = 0;
  uint64_t v33 = a1[5];
  if (v33) {
    goto LABEL_42;
  }
LABEL_55:

  return 1;
}

BOOL nw_framer_write_output_no_copy(nw_framer_t framer, size_t output_length)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  nw_framer_t v3 = framer;
  nw_framer_t v4 = v3;
  if (!v3)
  {
    uint64_t v26 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_framer_write_output_no_copy";
    char v27 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    v44[0] = 0;
    if (__nwlog_fault(v27, type, v44))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        uint64_t v28 = __nwlog_obj();
        os_log_type_t v29 = type[0];
        if (os_log_type_enabled(v28, type[0]))
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_framer_write_output_no_copy";
          _os_log_impl(&dword_1830D4000, v28, v29, "%{public}s called with null framer", buf, 0xCu);
        }
      }
      else if (v44[0])
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        uint64_t v28 = __nwlog_obj();
        os_log_type_t v31 = type[0];
        BOOL v32 = os_log_type_enabled(v28, type[0]);
        if (backtrace_string)
        {
          if (v32)
          {
            *(_DWORD *)int buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_framer_write_output_no_copy";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = backtrace_string;
            _os_log_impl(&dword_1830D4000, v28, v31, "%{public}s called with null framer, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_46;
        }
        if (v32)
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_framer_write_output_no_copy";
          _os_log_impl(&dword_1830D4000, v28, v31, "%{public}s called with null framer, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        uint64_t v28 = __nwlog_obj();
        os_log_type_t v33 = type[0];
        if (os_log_type_enabled(v28, type[0]))
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_framer_write_output_no_copy";
          _os_log_impl(&dword_1830D4000, v28, v33, "%{public}s called with null framer, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_46:
    if (v27) {
      free(v27);
    }
    goto LABEL_6;
  }
  nw_context_assert_queue(v3[46].isa);
  if ((HIBYTE(v4[75].isa) & 4) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unsigned int v5 = (id)gLogObj;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_framer_write_output_no_copy";
      _os_log_impl(&dword_1830D4000, v5, OS_LOG_TYPE_ERROR, "%{public}s Cannot write output when not in output handler", buf, 0xCu);
    }

LABEL_6:
    BOOL v6 = 0;
    goto LABEL_29;
  }
  *(void *)os_log_type_t type = 0;
  BOOL v41 = type;
  uint64_t v42 = 0x2020000000;
  size_t v43 = output_length;
  if (output_length)
  {
    if (LODWORD(v4[75].isa) + output_length <= LODWORD(v4[74].isa))
    {
      uint64_t isa = (uint64_t)v4[69].isa;
      if (!isa)
      {
        BOOL v12 = nw_array_create();
        Class v13 = v4[69].isa;
        v4[69].uint64_t isa = (Class)v12;

        uint64_t isa = (uint64_t)v4[69].isa;
      }
      *(void *)int buf = 0;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x3032000000;
      os_log_type_t v51 = __Block_byref_object_copy__4450;
      BOOL v52 = __Block_byref_object_dispose__4451;
      id v53 = 0;
      if (isa)
      {
        uint64_t v14 = *(void *)(isa + 24) - *(void *)(isa + 16);
        if (v14)
        {
          uint64_t v15 = nw_array_remove_object_at_index(isa, (char *)((v14 >> 3) - 1));
          uint64_t v16 = *(void **)(*(void *)&buf[8] + 40);
          *(void *)(*(void *)&buf[8] + 40) = v15;
        }
      }
      v34[0] = MEMORY[0x1E4F143A8];
      v34[1] = 3221225472;
      uint64_t v35 = (uint64_t (*)(void *))__nw_framer_write_output_no_copy_block_invoke;
      int v36 = &unk_1E523B0E0;
      unint64_t v17 = v4;
      id v37 = v17;
      int v38 = type;
      uint64_t v39 = buf;
      Class v18 = v4[71].isa;
      do
      {
        if (!v18) {
          break;
        }
        uint64_t v19 = (objc_class *)*((void *)v18 + 4);
        char v20 = v35(v34);
        Class v18 = v19;
      }
      while ((v20 & 1) != 0);
      BOOL v21 = *(void **)(*(void *)&buf[8] + 40);
      if (v21) {
        nw_array_append((uint64_t)v4[69].isa, v21);
      }
      uint64_t v22 = *((void *)v41 + 3);
      BOOL v6 = v22 == 0;
      if (v22)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v23 = (id)gLogObj;
        if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
        {
          uint64_t v24 = *((void *)v41 + 3);
          *(_DWORD *)uint64_t v44 = 136446722;
          uint64_t v45 = "nw_framer_write_output_no_copy";
          __int16 v46 = 2080;
          BOOL v47 = v17 + 609;
          __int16 v48 = 2048;
          uint64_t v49 = v24;
          _os_log_impl(&dword_1830D4000, v23, OS_LOG_TYPE_ERROR, "%{public}s %s Failed to write entire length, still have %zu bytes", v44, 0x20u);
        }
      }
      _Block_object_dispose(buf, 8);
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      size_t v7 = (id)gLogObj;
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))*((void *)v41 + 3);
        int v9 = (int)v4[75].isa;
        int v10 = (int)v4[74].isa;
        *(_DWORD *)int buf = 136447234;
        *(void *)&uint8_t buf[4] = "nw_framer_write_output_no_copy";
        *(_WORD *)&buf[12] = 2080;
        *(void *)&buf[14] = (char *)v4 + 609;
        *(_WORD *)&unsigned char buf[22] = 2048;
        os_log_type_t v51 = v8;
        LOWORD(v52) = 1024;
        *(_DWORD *)((char *)&v52 + 2) = v9;
        HIWORD(v52) = 1024;
        LODWORD(v53) = v10;
        _os_log_impl(&dword_1830D4000, v7, OS_LOG_TYPE_ERROR, "%{public}s %s Cannot write %zu bytes, already have %u/%u", buf, 0x2Cu);
      }

      BOOL v6 = 0;
    }
  }
  else
  {
    nw_framer_flush_output(v4, 0);
    BOOL v6 = 1;
  }
  _Block_object_dispose(type, 8);
LABEL_29:

  return v6;
}

void sub_18366D024(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

BOOL __nw_framer_write_output_no_copy_block_invoke(void *a1, void *a2)
{
  uint64_t v138 = *MEMORY[0x1E4F143B8];
  nw_framer_t v3 = a2;
  if (nw_frame_uses_external_data((uint64_t)v3))
  {
    size_t size = 0;
    nw_framer_t v4 = nw_frame_copy_external_data((uint64_t)v3, (_DWORD *)&size + 1, &size);
    if (gLogDatapath)
    {
      __int16 v99 = __nwlog_obj();
      if (os_log_type_enabled(v99, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v100 = a1[4];
        if (v100) {
          uint64_t v101 = (const char *)(v100 + 609);
        }
        else {
          uint64_t v101 = "";
        }
        *(_DWORD *)int buf = 136446978;
        __int16 v132 = "nw_framer_write_output_no_copy_block_invoke";
        __int16 v133 = 2080;
        __int16 v134 = v101;
        __int16 v135 = 1024;
        *(_DWORD *)uint64_t v136 = size;
        *(_WORD *)&v136[4] = 1024;
        *(_DWORD *)&v136[6] = HIDWORD(size);
        _os_log_impl(&dword_1830D4000, v99, OS_LOG_TYPE_DEBUG, "%{public}s %s Writing %u external data bytes from offset %u", buf, 0x22u);
      }
    }
    if (HIDWORD(size))
    {
      size_t v5 = *(void *)(*(void *)(a1[5] + 8) + 24);
      goto LABEL_22;
    }
    size_t v5 = *(void *)(*(void *)(a1[5] + 8) + 24);
    if (v5 < size)
    {
LABEL_22:
      if (v5 < size)
      {
        dispatch_data_t subrange = dispatch_data_create_subrange(v4, HIDWORD(size), v5);
        uint64_t v38 = *(void *)(a1[6] + 8);
        BOOL v41 = *(NSObject **)(v38 + 40);
        uint64_t v39 = (id *)(v38 + 40);
        uint64_t v40 = v41;
        if (v41)
        {
          dispatch_data_t concat = dispatch_data_create_concat(v40, subrange);
          uint64_t v43 = *(void *)(a1[6] + 8);
          uint64_t v44 = *(void **)(v43 + 40);
          *(void *)(v43 + 40) = concat;

          if (!gLogDatapath) {
            goto LABEL_57;
          }
          __int16 v46 = __nwlog_obj();
          if (!os_log_type_enabled(v46, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_121;
          }
          uint64_t v47 = a1[4];
          if (v47) {
            __int16 v48 = (const char *)(v47 + 609);
          }
          else {
            __int16 v48 = "";
          }
          size_t v49 = dispatch_data_get_size(*(dispatch_data_t *)(*(void *)(a1[6] + 8) + 40));
          uint64_t v50 = *(void *)(*(void *)(a1[5] + 8) + 24);
          *(_DWORD *)int buf = 136447234;
          __int16 v132 = "nw_framer_write_output_no_copy_block_invoke";
          __int16 v133 = 2080;
          __int16 v134 = v48;
          __int16 v135 = 2048;
          *(void *)uint64_t v136 = v49;
          *(_WORD *)&v136[8] = 2048;
          *(void *)&v136[10] = v50;
          *(_WORD *)&v136[18] = 1024;
          int v137 = HIDWORD(size);
          os_log_type_t v51 = "%{public}s %s Appending subrange data to output data, now %zu bytes from length %zu offset %u";
        }
        else
        {
          objc_storeStrong(v39, subrange);
          if (!gLogDatapath) {
            goto LABEL_57;
          }
          __int16 v46 = __nwlog_obj();
          if (!os_log_type_enabled(v46, OS_LOG_TYPE_DEBUG))
          {
LABEL_121:

LABEL_57:
            nw_frame_claim((uint64_t)v3, v45, *(_DWORD *)(*(void *)(a1[5] + 8) + 24), 0);
            *(_DWORD *)(a1[4] + 600) += *(_DWORD *)(*(void *)(a1[5] + 8) + 24);
            *(void *)(*(void *)(a1[5] + 8) + 24) = 0;
            if (gLogDatapath)
            {
              __int16 v82 = __nwlog_obj();
              if (os_log_type_enabled(v82, OS_LOG_TYPE_DEBUG))
              {
                uint64_t v83 = a1[4];
                uint64_t v84 = (const char *)(v83 + 609);
                if (!v83) {
                  uint64_t v84 = "";
                }
                int v85 = *(_DWORD *)(v83 + 600);
                uint64_t v86 = *(void *)(*(void *)(a1[5] + 8) + 24);
                *(_DWORD *)int buf = 136446978;
                __int16 v132 = "nw_framer_write_output_no_copy_block_invoke";
                __int16 v133 = 2080;
                __int16 v134 = v84;
                __int16 v135 = 1024;
                *(_DWORD *)uint64_t v136 = v85;
                *(_WORD *)&v136[4] = 2048;
                *(void *)&v136[6] = v86;
                _os_log_impl(&dword_1830D4000, v82, OS_LOG_TYPE_DEBUG, "%{public}s %s Pending output cursor %u, remaining output %zu", buf, 0x26u);
              }
LABEL_62:
            }
LABEL_68:

LABEL_69:
            goto LABEL_70;
          }
          uint64_t v120 = a1[4];
          if (v120) {
            os_log_type_t v121 = (const char *)(v120 + 609);
          }
          else {
            os_log_type_t v121 = "";
          }
          size_t v122 = dispatch_data_get_size(*(dispatch_data_t *)(*(void *)(a1[6] + 8) + 40));
          uint64_t v123 = *(void *)(*(void *)(a1[5] + 8) + 24);
          *(_DWORD *)int buf = 136447234;
          __int16 v132 = "nw_framer_write_output_no_copy_block_invoke";
          __int16 v133 = 2080;
          __int16 v134 = v121;
          __int16 v135 = 2048;
          *(void *)uint64_t v136 = v122;
          *(_WORD *)&v136[8] = 2048;
          *(void *)&v136[10] = v123;
          *(_WORD *)&v136[18] = 1024;
          int v137 = HIDWORD(size);
          os_log_type_t v51 = "%{public}s %s Setting subrange data as output data, %zu bytes from length %zu offset %u";
        }
        _os_log_impl(&dword_1830D4000, v46, OS_LOG_TYPE_DEBUG, v51, buf, 0x30u);
        goto LABEL_121;
      }
      dispatch_data_t subrange = dispatch_data_create_subrange(v4, HIDWORD(size), size);
      uint64_t v52 = *(void *)(a1[6] + 8);
      os_log_type_t v55 = *(NSObject **)(v52 + 40);
      id v53 = (id *)(v52 + 40);
      uint64_t v54 = v55;
      if (v55)
      {
        dispatch_data_t v56 = dispatch_data_create_concat(v54, subrange);
        uint64_t v57 = *(void *)(a1[6] + 8);
        uint64_t v58 = *(void **)(v57 + 40);
        *(void *)(v57 + 40) = v56;

        if (gLogDatapath)
        {
          uint64_t v59 = __nwlog_obj();
          if (os_log_type_enabled(v59, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v60 = a1[4];
            if (v60) {
              uint64_t v61 = (const char *)(v60 + 609);
            }
            else {
              uint64_t v61 = "";
            }
            size_t v62 = dispatch_data_get_size(*(dispatch_data_t *)(*(void *)(a1[6] + 8) + 40));
            *(_DWORD *)int buf = 136446978;
            __int16 v132 = "nw_framer_write_output_no_copy_block_invoke";
            __int16 v133 = 2080;
            __int16 v134 = v61;
            __int16 v135 = 2048;
            *(void *)uint64_t v136 = v62;
            *(_WORD *)&v136[8] = 1024;
            *(_DWORD *)&v136[10] = HIDWORD(size);
            char v63 = "%{public}s %s Appending subrange data to output data, now %zu bytes from offset %u";
LABEL_127:
            _os_log_impl(&dword_1830D4000, v59, OS_LOG_TYPE_DEBUG, v63, buf, 0x26u);
            goto LABEL_128;
          }
          goto LABEL_128;
        }
      }
      else
      {
        objc_storeStrong(v53, subrange);
        if (gLogDatapath)
        {
          uint64_t v59 = __nwlog_obj();
          if (os_log_type_enabled(v59, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v124 = a1[4];
            if (v124) {
              uint64_t v125 = (const char *)(v124 + 609);
            }
            else {
              uint64_t v125 = "";
            }
            size_t v126 = dispatch_data_get_size(*(dispatch_data_t *)(*(void *)(a1[6] + 8) + 40));
            *(_DWORD *)int buf = 136446978;
            __int16 v132 = "nw_framer_write_output_no_copy_block_invoke";
            __int16 v133 = 2080;
            __int16 v134 = v125;
            __int16 v135 = 2048;
            *(void *)uint64_t v136 = v126;
            *(_WORD *)&v136[8] = 1024;
            *(_DWORD *)&v136[10] = HIDWORD(size);
            char v63 = "%{public}s %s Setting subrange data as output data, %zu bytes from offset %u";
            goto LABEL_127;
          }
LABEL_128:
        }
      }
      nw_frame_set_external_data((uint64_t)v3, 0, 0);
      uint64_t v87 = v3[4];
      uint64_t v88 = (void *)v3[5];
      if (v87)
      {
        *(void *)(v87 + 40) = v88;
        uint64_t v88 = (void *)v3[5];
      }
      else
      {
        *(void *)(a1[4] + 576) = v88;
      }
      *uint64_t v88 = v87;
      v3[4] = 0;
      v3[5] = 0;
      nw_frame_finalize((uint64_t)v3);
      uint64_t v89 = size;
      *(_DWORD *)(a1[4] + 600) += size;
      *(void *)(*(void *)(a1[5] + 8) + 24) -= v89;
      if (!gLogDatapath) {
        goto LABEL_68;
      }
      __int16 v82 = __nwlog_obj();
      if (os_log_type_enabled(v82, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v107 = a1[4];
        __int16 v108 = (const char *)(v107 + 609);
        if (!v107) {
          __int16 v108 = "";
        }
        int v109 = *(_DWORD *)(v107 + 600);
        uint64_t v110 = *(void *)(*(void *)(a1[5] + 8) + 24);
        *(_DWORD *)int buf = 136446978;
        __int16 v132 = "nw_framer_write_output_no_copy_block_invoke";
        __int16 v133 = 2080;
        __int16 v134 = v108;
        __int16 v135 = 1024;
        *(_DWORD *)uint64_t v136 = v109;
        *(_WORD *)&v136[4] = 2048;
        *(void *)&v136[6] = v110;
        _os_log_impl(&dword_1830D4000, v82, OS_LOG_TYPE_DEBUG, "%{public}s %s Pending output cursor %u, remaining output %zu", buf, 0x26u);
      }
      goto LABEL_62;
    }
    uint64_t v69 = *(void *)(a1[6] + 8);
    id v72 = *(NSObject **)(v69 + 40);
    uint64_t v70 = (id *)(v69 + 40);
    uint64_t v71 = v72;
    if (v72)
    {
      dispatch_data_t v73 = dispatch_data_create_concat(v71, v4);
      uint64_t v74 = *(void *)(a1[6] + 8);
      uint64_t v75 = *(void **)(v74 + 40);
      *(void *)(v74 + 40) = v73;

      if (gLogDatapath)
      {
        uint64_t v76 = __nwlog_obj();
        if (os_log_type_enabled(v76, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v77 = a1[4];
          if (v77) {
            uint64_t v78 = (const char *)(v77 + 609);
          }
          else {
            uint64_t v78 = "";
          }
          size_t v79 = dispatch_data_get_size(*(dispatch_data_t *)(*(void *)(a1[6] + 8) + 40));
          *(_DWORD *)int buf = 136446722;
          __int16 v132 = "nw_framer_write_output_no_copy_block_invoke";
          __int16 v133 = 2080;
          __int16 v134 = v78;
          __int16 v135 = 2048;
          *(void *)uint64_t v136 = v79;
          size_t v80 = "%{public}s %s Appending message data to output data, now %zu bytes";
LABEL_134:
          _os_log_impl(&dword_1830D4000, v76, OS_LOG_TYPE_DEBUG, v80, buf, 0x20u);
          goto LABEL_135;
        }
        goto LABEL_135;
      }
    }
    else
    {
      objc_storeStrong(v70, v4);
      if (gLogDatapath)
      {
        uint64_t v76 = __nwlog_obj();
        if (os_log_type_enabled(v76, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v127 = a1[4];
          if (v127) {
            BOOL v128 = (const char *)(v127 + 609);
          }
          else {
            BOOL v128 = "";
          }
          size_t v129 = dispatch_data_get_size(*(dispatch_data_t *)(*(void *)(a1[6] + 8) + 40));
          *(_DWORD *)int buf = 136446722;
          __int16 v132 = "nw_framer_write_output_no_copy_block_invoke";
          __int16 v133 = 2080;
          __int16 v134 = v128;
          __int16 v135 = 2048;
          *(void *)uint64_t v136 = v129;
          size_t v80 = "%{public}s %s Setting message data as output data, %zu bytes";
          goto LABEL_134;
        }
LABEL_135:
      }
    }
    nw_frame_set_external_data((uint64_t)v3, 0, 0);
    uint64_t v92 = v3[4];
    __int16 v93 = (void *)v3[5];
    if (v92)
    {
      *(void *)(v92 + 40) = v93;
      __int16 v93 = (void *)v3[5];
    }
    else
    {
      *(void *)(a1[4] + 576) = v93;
    }
    void *v93 = v92;
    v3[4] = 0;
    v3[5] = 0;
    nw_frame_finalize((uint64_t)v3);
    uint64_t v94 = size;
    *(_DWORD *)(a1[4] + 600) += size;
    *(void *)(*(void *)(a1[5] + 8) + 24) -= v94;
    if (!gLogDatapath) {
      goto LABEL_69;
    }
    dispatch_data_t subrange = __nwlog_obj();
    if (os_log_type_enabled(subrange, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v95 = a1[4];
      __int16 v96 = (const char *)(v95 + 609);
      if (!v95) {
        __int16 v96 = "";
      }
      int v97 = *(_DWORD *)(v95 + 600);
      uint64_t v98 = *(void *)(*(void *)(a1[5] + 8) + 24);
      *(_DWORD *)int buf = 136446978;
      __int16 v132 = "nw_framer_write_output_no_copy_block_invoke";
      __int16 v133 = 2080;
      __int16 v134 = v96;
      __int16 v135 = 1024;
      *(_DWORD *)uint64_t v136 = v97;
      *(_WORD *)&v136[4] = 2048;
      *(void *)&v136[6] = v98;
      _os_log_impl(&dword_1830D4000, subrange, OS_LOG_TYPE_DEBUG, "%{public}s %s Pending output cursor %u, remaining output %zu", buf, 0x26u);
    }
    goto LABEL_68;
  }
  HIDWORD(size) = 0;
  uint64_t v6 = nw_frame_unclaimed_bytes((uint64_t)v3, (_DWORD *)&size + 1);
  if (gLogDatapath)
  {
    __int16 v102 = __nwlog_obj();
    if (os_log_type_enabled(v102, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v103 = a1[4];
      __int16 v104 = (const char *)(v103 + 609);
      if (!v103) {
        __int16 v104 = "";
      }
      *(_DWORD *)int buf = 136446722;
      __int16 v132 = "nw_framer_write_output_no_copy_block_invoke";
      __int16 v133 = 2080;
      __int16 v134 = v104;
      __int16 v135 = 1024;
      *(_DWORD *)uint64_t v136 = HIDWORD(size);
      _os_log_impl(&dword_1830D4000, v102, OS_LOG_TYPE_DEBUG, "%{public}s %s Writing %u data bytes", buf, 0x1Cu);
    }
  }
  size_t v7 = (const void *)(v6 + *(unsigned int *)(a1[4] + 600));
  if (*(void *)(*(void *)(a1[5] + 8) + 24) >= (unint64_t)HIDWORD(size))
  {
    uint64_t v8 = dispatch_data_create(v7, HIDWORD(size), 0, 0);
    uint64_t v24 = *(void *)(a1[6] + 8);
    char v27 = *(NSObject **)(v24 + 40);
    os_log_type_t v25 = (id *)(v24 + 40);
    uint64_t v26 = v27;
    if (v27)
    {
      dispatch_data_t v28 = dispatch_data_create_concat(v26, v8);
      uint64_t v29 = *(void *)(a1[6] + 8);
      uint64_t v30 = *(void **)(v29 + 40);
      *(void *)(v29 + 40) = v28;

      if (gLogDatapath)
      {
        os_log_type_t v31 = __nwlog_obj();
        if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v32 = a1[4];
          if (v32) {
            os_log_type_t v33 = (const char *)(v32 + 609);
          }
          else {
            os_log_type_t v33 = "";
          }
          size_t v34 = dispatch_data_get_size(*(dispatch_data_t *)(*(void *)(a1[6] + 8) + 40));
          int v35 = *(_DWORD *)(v32 + 600);
          *(_DWORD *)int buf = 136447234;
          __int16 v132 = "nw_framer_write_output_no_copy_block_invoke";
          __int16 v133 = 2080;
          __int16 v134 = v33;
          __int16 v135 = 2048;
          *(void *)uint64_t v136 = v34;
          *(_WORD *)&v136[8] = 1024;
          *(_DWORD *)&v136[10] = HIDWORD(size);
          *(_WORD *)&v136[14] = 1024;
          *(_DWORD *)&v136[16] = v35;
          int v36 = "%{public}s %s Appending message data to output data, now %zu bytes, %u bytes from offset %u";
LABEL_113:
          _os_log_impl(&dword_1830D4000, v31, OS_LOG_TYPE_DEBUG, v36, buf, 0x2Cu);
          goto LABEL_114;
        }
        goto LABEL_114;
      }
    }
    else
    {
      objc_storeStrong(v25, v8);
      if (gLogDatapath)
      {
        os_log_type_t v31 = __nwlog_obj();
        if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v116 = a1[4];
          if (v116) {
            os_log_type_t v117 = (const char *)(v116 + 609);
          }
          else {
            os_log_type_t v117 = "";
          }
          size_t v118 = dispatch_data_get_size(*(dispatch_data_t *)(*(void *)(a1[6] + 8) + 40));
          int v119 = *(_DWORD *)(v116 + 600);
          *(_DWORD *)int buf = 136447234;
          __int16 v132 = "nw_framer_write_output_no_copy_block_invoke";
          __int16 v133 = 2080;
          __int16 v134 = v117;
          __int16 v135 = 2048;
          *(void *)uint64_t v136 = v118;
          *(_WORD *)&v136[8] = 1024;
          *(_DWORD *)&v136[10] = HIDWORD(size);
          *(_WORD *)&v136[14] = 1024;
          *(_DWORD *)&v136[16] = v119;
          int v36 = "%{public}s %s Setting message data as output data, %zu bytes, %u bytes from offset %u";
          goto LABEL_113;
        }
LABEL_114:
      }
    }
    uint64_t v67 = v3[4];
    uint64_t v68 = (void *)v3[5];
    if (v67)
    {
      *(void *)(v67 + 40) = v68;
      uint64_t v68 = (void *)v3[5];
    }
    else
    {
      *(void *)(a1[4] + 576) = v68;
    }
    *uint64_t v68 = v67;
    v3[4] = 0;
    v3[5] = 0;
    nw_frame_finalize((uint64_t)v3);
    uint64_t v81 = HIDWORD(size);
    *(_DWORD *)(a1[4] + 600) += HIDWORD(size);
    *(void *)(*(void *)(a1[5] + 8) + 24) -= v81;
    if (!gLogDatapath) {
      goto LABEL_55;
    }
    uint64_t v64 = __nwlog_obj();
    if (!os_log_type_enabled(v64, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_95;
    }
    uint64_t v65 = a1[4];
    char v66 = (const char *)(v65 + 609);
    if (!v65) {
      char v66 = "";
    }
    goto LABEL_94;
  }
  uint64_t v8 = dispatch_data_create(v7, *(void *)(*(void *)(a1[5] + 8) + 24), 0, 0);
  uint64_t v9 = *(void *)(a1[6] + 8);
  BOOL v12 = *(NSObject **)(v9 + 40);
  int v10 = (id *)(v9 + 40);
  uint64_t v11 = v12;
  if (v12)
  {
    dispatch_data_t v13 = dispatch_data_create_concat(v11, v8);
    uint64_t v14 = *(void *)(a1[6] + 8);
    uint64_t v15 = *(void **)(v14 + 40);
    *(void *)(v14 + 40) = v13;

    if (!gLogDatapath) {
      goto LABEL_38;
    }
    unint64_t v17 = __nwlog_obj();
    if (!os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_107;
    }
    uint64_t v18 = a1[4];
    if (v18) {
      uint64_t v19 = (const char *)(v18 + 609);
    }
    else {
      uint64_t v19 = "";
    }
    size_t v20 = dispatch_data_get_size(*(dispatch_data_t *)(*(void *)(a1[6] + 8) + 40));
    uint64_t v21 = *(void *)(*(void *)(a1[5] + 8) + 24);
    int v22 = *(_DWORD *)(v18 + 600);
    *(_DWORD *)int buf = 136447234;
    __int16 v132 = "nw_framer_write_output_no_copy_block_invoke";
    __int16 v133 = 2080;
    __int16 v134 = v19;
    __int16 v135 = 2048;
    *(void *)uint64_t v136 = v20;
    *(_WORD *)&v136[8] = 2048;
    *(void *)&v136[10] = v21;
    *(_WORD *)&v136[18] = 1024;
    int v137 = v22;
    uint64_t v23 = "%{public}s %s Appending message data to output data, now %zu bytes, %zu bytes from offset %u";
    goto LABEL_106;
  }
  objc_storeStrong(v10, v8);
  if (!gLogDatapath) {
    goto LABEL_38;
  }
  unint64_t v17 = __nwlog_obj();
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v111 = a1[4];
    if (v111) {
      __int16 v112 = (const char *)(v111 + 609);
    }
    else {
      __int16 v112 = "";
    }
    size_t v113 = dispatch_data_get_size(*(dispatch_data_t *)(*(void *)(a1[6] + 8) + 40));
    uint64_t v114 = *(void *)(*(void *)(a1[5] + 8) + 24);
    int v115 = *(_DWORD *)(v111 + 600);
    *(_DWORD *)int buf = 136447234;
    __int16 v132 = "nw_framer_write_output_no_copy_block_invoke";
    __int16 v133 = 2080;
    __int16 v134 = v112;
    __int16 v135 = 2048;
    *(void *)uint64_t v136 = v113;
    *(_WORD *)&v136[8] = 2048;
    *(void *)&v136[10] = v114;
    *(_WORD *)&v136[18] = 1024;
    int v137 = v115;
    uint64_t v23 = "%{public}s %s Setting message data to output data, now %zu bytes, %zu bytes from offset %u";
LABEL_106:
    _os_log_impl(&dword_1830D4000, v17, OS_LOG_TYPE_DEBUG, v23, buf, 0x30u);
  }
LABEL_107:

LABEL_38:
  nw_frame_claim((uint64_t)v3, v16, *(_DWORD *)(*(void *)(a1[5] + 8) + 24), 0);
  *(_DWORD *)(a1[4] + 600) += *(_DWORD *)(*(void *)(a1[5] + 8) + 24);
  *(void *)(*(void *)(a1[5] + 8) + 24) = 0;
  if (gLogDatapath)
  {
    uint64_t v64 = __nwlog_obj();
    if (!os_log_type_enabled(v64, OS_LOG_TYPE_DEBUG))
    {
LABEL_95:

      goto LABEL_55;
    }
    uint64_t v65 = a1[4];
    char v66 = (const char *)(v65 + 609);
    if (!v65) {
      char v66 = "";
    }
LABEL_94:
    int v105 = *(_DWORD *)(v65 + 600);
    uint64_t v106 = *(void *)(*(void *)(a1[5] + 8) + 24);
    *(_DWORD *)int buf = 136446978;
    __int16 v132 = "nw_framer_write_output_no_copy_block_invoke";
    __int16 v133 = 2080;
    __int16 v134 = v66;
    __int16 v135 = 1024;
    *(_DWORD *)uint64_t v136 = v105;
    *(_WORD *)&v136[4] = 2048;
    *(void *)&v136[6] = v106;
    _os_log_impl(&dword_1830D4000, v64, OS_LOG_TYPE_DEBUG, "%{public}s %s Pending output cursor %u, remaining output %zu", buf, 0x26u);
    goto LABEL_95;
  }
LABEL_55:

LABEL_70:
  BOOL v90 = *(void *)(*(void *)(a1[5] + 8) + 24) != 0;

  return v90;
}

void nw_framer_resume_input(void *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    nw_context_assert_queue(v1[46]);
    if (((_BYTE)v2[76] & 1) == 0)
    {
      *((unsigned char *)v2 + 608) &= ~4u;
      nw_framer_input_loop((NWConcrete_nw_framer *)v2);
      nw_framer_signal_input_available((NWConcrete_nw_framer *)v2);
    }
    goto LABEL_4;
  }
  nw_framer_t v3 = __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  uint64_t v14 = "nw_framer_resume_input";
  nw_framer_t v4 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (__nwlog_fault(v4, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      size_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v14 = "nw_framer_resume_input";
        _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s called with null framer", buf, 0xCu);
      }
    }
    else if (v11)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      size_t v5 = __nwlog_obj();
      os_log_type_t v8 = type;
      BOOL v9 = os_log_type_enabled(v5, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)int buf = 136446466;
          uint64_t v14 = "nw_framer_resume_input";
          __int16 v15 = 2082;
          uint64_t v16 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v5, v8, "%{public}s called with null framer, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_21;
      }
      if (v9)
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v14 = "nw_framer_resume_input";
        _os_log_impl(&dword_1830D4000, v5, v8, "%{public}s called with null framer, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      size_t v5 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v14 = "nw_framer_resume_input";
        _os_log_impl(&dword_1830D4000, v5, v10, "%{public}s called with null framer, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_21:
  if (v4) {
    free(v4);
  }
LABEL_4:
}

void sub_18366E288(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_framer_input_loop(NWConcrete_nw_framer *a1)
{
  uint64_t v1 = a1;
  do
  {
    if (v1->received_input_frames.tqh_first)
    {
      int v2 = 0;
      nw_frame_array_get_frame_count((uint64_t *)&v1->received_input_frames, 1, &v2);
    }
    nw_framer_get_input_from_below(v1);
    if ((*((unsigned char *)v1 + 607) & 2) == 0) {
      break;
    }
    nw_framer_process_input_callout(v1);
    if (v1->protocol.default_input_handler) {
      break;
    }
  }
  while ((*((unsigned char *)v1 + 608) & 4) == 0);
}

void sub_18366E340(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_framer_get_input_from_below(NWConcrete_nw_framer *a1)
{
  uint64_t v1 = a1;
  uint64_t v6 = 0;
  size_t v7 = (nw_frame **)&v6;
  uint64_t output_handler = v1->protocol.output_handler;
  if (output_handler)
  {
    callbacks = output_handler->callbacks;
    if (callbacks)
    {
      get_input_frames = (void (*)(void))callbacks->get_input_frames;
      if (get_input_frames)
      {
        get_input_frames();
        if (v6)
        {
          *v1->received_input_frames.tqh_last = (nw_frame *)v6;
          size_t v5 = v7;
          *(void *)(v6 + 40) = v1->received_input_frames.tqh_last;
          v1->received_input_frames.tqh_last = v5;
          *((unsigned char *)v1 + 607) |= 2u;
        }
      }
    }
  }
}

void sub_18366E3F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_framer_process_input_callout(NWConcrete_nw_framer *a1)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = a1;
  int v2 = v1;
  if (!v1)
  {
    BOOL v12 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v25 = "nw_framer_process_input_callout";
    dispatch_data_t v13 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (__nwlog_fault(v13, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v14 = __nwlog_obj();
        os_log_type_t v15 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v25 = "nw_framer_process_input_callout";
          _os_log_impl(&dword_1830D4000, v14, v15, "%{public}s called with null framer", buf, 0xCu);
        }
      }
      else if (v22)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        uint64_t v14 = __nwlog_obj();
        os_log_type_t v17 = type;
        BOOL v18 = os_log_type_enabled(v14, type);
        if (backtrace_string)
        {
          if (v18)
          {
            *(_DWORD *)int buf = 136446466;
            os_log_type_t v25 = "nw_framer_process_input_callout";
            __int16 v26 = 2082;
            log_str = backtrace_string;
            _os_log_impl(&dword_1830D4000, v14, v17, "%{public}s called with null framer, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_41;
        }
        if (v18)
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v25 = "nw_framer_process_input_callout";
          _os_log_impl(&dword_1830D4000, v14, v17, "%{public}s called with null framer, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        uint64_t v14 = __nwlog_obj();
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v25 = "nw_framer_process_input_callout";
          _os_log_impl(&dword_1830D4000, v14, v19, "%{public}s called with null framer, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_41:
    if (v13) {
      free(v13);
    }
    goto LABEL_6;
  }
  nw_framer_process_body_input(v1);
  int v3 = *((char *)v2 + 607);
  if ((v3 & 0x80000000) == 0)
  {
    int v4 = *((char *)v2 + 606);
    if ((v4 & 0x80000000) == 0)
    {
      parse_input = (uint64_t (**)(id, NWConcrete_nw_framer *))v2->parse_input;
      if (parse_input)
      {
        if (!v2->input_body_remaining && v2->received_input_frames.tqh_first)
        {
          *((unsigned char *)v2 + 606) = v4 | 0x80;
          *((unsigned char *)v2 + 607) = v3 & 0xFD;
          v2->unint64_t input_needed = parse_input[2](parse_input, v2);
          *((unsigned char *)v2 + 606) &= ~0x80u;
          p_cache = NWConcrete_nw_resolution_report.cache;
          if (gLogDatapath)
          {
            size_t v20 = __nwlog_obj();
            if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
            {
              unint64_t input_needed = v2->input_needed;
              *(_DWORD *)int buf = 136446722;
              os_log_type_t v25 = "nw_framer_process_input_callout";
              __int16 v26 = 2080;
              log_str = v2->log_str;
              __int16 v28 = 2048;
              unint64_t v29 = input_needed;
              _os_log_impl(&dword_1830D4000, v20, OS_LOG_TYPE_DEBUG, "%{public}s %s Requested %zu more bytes", buf, 0x20u);
            }
          }
          if (*((unsigned char *)v2 + 607) & 2) == 0 || (*((unsigned char *)v2 + 608))
          {
LABEL_23:
            if (v2->pending_input_frames.tqh_first) {
              nw_framer_signal_input_available(v2);
            }
          }
          else
          {
            while (1)
            {
              nw_framer_process_body_input(v2);
              int v7 = *((char *)v2 + 607);
              if (v7 < 0) {
                break;
              }
              int v8 = *((char *)v2 + 606);
              if (v8 < 0) {
                goto LABEL_23;
              }
              BOOL v9 = (uint64_t (**)(id, NWConcrete_nw_framer *))v2->parse_input;
              if (!v9 || v2->input_body_remaining || !v2->received_input_frames.tqh_first) {
                goto LABEL_23;
              }
              *((unsigned char *)v2 + 606) = v8 | 0x80;
              *((unsigned char *)v2 + 607) = v7 & 0xFD;
              v2->unint64_t input_needed = v9[2](v9, v2);
              *((unsigned char *)v2 + 606) &= ~0x80u;
              if (*((unsigned char *)p_cache + 3665))
              {
                os_log_type_t v10 = __nwlog_obj();
                if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
                {
                  unint64_t v11 = v2->input_needed;
                  *(_DWORD *)int buf = 136446722;
                  os_log_type_t v25 = "nw_framer_process_input_callout";
                  __int16 v26 = 2080;
                  log_str = v2->log_str;
                  __int16 v28 = 2048;
                  unint64_t v29 = v11;
                  _os_log_impl(&dword_1830D4000, v10, OS_LOG_TYPE_DEBUG, "%{public}s %s Requested %zu more bytes", buf, 0x20u);
                }

                p_cache = (void **)(NWConcrete_nw_resolution_report + 16);
                if ((*((unsigned char *)v2 + 607) & 2) == 0) {
                  goto LABEL_23;
                }
              }
              else if ((*((unsigned char *)v2 + 607) & 2) == 0)
              {
                goto LABEL_23;
              }
              if (*((unsigned char *)v2 + 608)) {
                goto LABEL_23;
              }
            }
          }
        }
      }
    }
  }
LABEL_6:
}

void sub_18366E898(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_framer_process_body_input(NWConcrete_nw_framer *a1)
{
  framer = a1;
  if (framer->input_body_remaining && framer->received_input_frames.tqh_first)
  {
    uint64_t v1 = framer;
    do
    {
      size_t input_body_remaining = v1->input_body_remaining;
      if (!input_body_remaining) {
        break;
      }
      v1->size_t input_body_remaining = 0;
      BOOL v3 = nw_framer_deliver_input_no_copy(&v1->super, input_body_remaining, (nw_framer_message_t)v1->pending_inbound_message, (*((unsigned char *)v1 + 607) & 8) != 0);
      uint64_t v1 = framer;
    }
    while (v3);
    if (v1->pending_input_frames.tqh_first) {
      nw_framer_signal_input_available(framer);
    }
  }
}

void sub_18366E948(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void nw_framer_suspend_input(void *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  int v2 = v1;
  if (v1)
  {
    nw_context_assert_queue(*((void **)v1 + 46));
    if ((v2[608] & 1) == 0) {
      v2[608] |= 4u;
    }
    goto LABEL_4;
  }
  BOOL v3 = __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  uint64_t v14 = "nw_framer_suspend_input";
  int v4 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (__nwlog_fault(v4, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      size_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v14 = "nw_framer_suspend_input";
        _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s called with null framer", buf, 0xCu);
      }
    }
    else if (v11)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      size_t v5 = __nwlog_obj();
      os_log_type_t v8 = type;
      BOOL v9 = os_log_type_enabled(v5, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)int buf = 136446466;
          uint64_t v14 = "nw_framer_suspend_input";
          __int16 v15 = 2082;
          uint64_t v16 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v5, v8, "%{public}s called with null framer, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_21;
      }
      if (v9)
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v14 = "nw_framer_suspend_input";
        _os_log_impl(&dword_1830D4000, v5, v8, "%{public}s called with null framer, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      size_t v5 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v14 = "nw_framer_suspend_input";
        _os_log_impl(&dword_1830D4000, v5, v10, "%{public}s called with null framer, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_21:
  if (v4) {
    free(v4);
  }
LABEL_4:
}

void sub_18366EC00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_framer_pass_through_input(nw_framer_t framer)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  nw_framer_t v1 = framer;
  int v2 = v1;
  if (v1)
  {
    nw_context_assert_queue(v1[46].isa);
    v2[608] |= 1u;
    goto LABEL_3;
  }
  BOOL v3 = __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  uint64_t v14 = "nw_framer_pass_through_input";
  int v4 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (__nwlog_fault(v4, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      size_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v14 = "nw_framer_pass_through_input";
        _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s called with null framer", buf, 0xCu);
      }
    }
    else if (v11)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      size_t v5 = __nwlog_obj();
      os_log_type_t v8 = type;
      BOOL v9 = os_log_type_enabled(v5, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)int buf = 136446466;
          uint64_t v14 = "nw_framer_pass_through_input";
          __int16 v15 = 2082;
          uint64_t v16 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v5, v8, "%{public}s called with null framer, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v9)
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v14 = "nw_framer_pass_through_input";
        _os_log_impl(&dword_1830D4000, v5, v8, "%{public}s called with null framer, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      size_t v5 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v14 = "nw_framer_pass_through_input";
        _os_log_impl(&dword_1830D4000, v5, v10, "%{public}s called with null framer, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v4) {
    free(v4);
  }
LABEL_3:
}

void sub_18366EEB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_framer_pass_through_output(nw_framer_t framer)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  nw_framer_t v1 = framer;
  int v2 = v1;
  if (v1)
  {
    nw_context_assert_queue(v1[46].isa);
    nw_framer_flush_output(v2, 0);
    v2[608] |= 2u;
    goto LABEL_3;
  }
  BOOL v3 = __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  uint64_t v14 = "nw_framer_pass_through_output";
  int v4 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (__nwlog_fault(v4, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      size_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v14 = "nw_framer_pass_through_output";
        _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s called with null framer", buf, 0xCu);
      }
    }
    else if (v11)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      size_t v5 = __nwlog_obj();
      os_log_type_t v8 = type;
      BOOL v9 = os_log_type_enabled(v5, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)int buf = 136446466;
          uint64_t v14 = "nw_framer_pass_through_output";
          __int16 v15 = 2082;
          uint64_t v16 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v5, v8, "%{public}s called with null framer, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v9)
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v14 = "nw_framer_pass_through_output";
        _os_log_impl(&dword_1830D4000, v5, v8, "%{public}s called with null framer, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      size_t v5 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v14 = "nw_framer_pass_through_output";
        _os_log_impl(&dword_1830D4000, v5, v10, "%{public}s called with null framer, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v4) {
    free(v4);
  }
LABEL_3:
}

void sub_18366F170(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_framer_set_input_handler(nw_framer_t framer, nw_framer_input_handler_t input_handler)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  nw_framer_t v3 = framer;
  nw_framer_input_handler_t v4 = input_handler;
  size_t v5 = v4;
  if (!v3)
  {
    os_log_type_t v8 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v30 = "nw_framer_set_input_handler";
    BOOL v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v27 = 0;
    if (!__nwlog_fault(v9, &type, &v27)) {
      goto LABEL_55;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v30 = "nw_framer_set_input_handler";
        _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null framer", buf, 0xCu);
      }
    }
    else if (v27)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v17 = type;
      BOOL v18 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)int buf = 136446466;
          uint64_t v30 = "nw_framer_set_input_handler";
          __int16 v31 = 2082;
          uint64_t v32 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v10, v17, "%{public}s called with null framer, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_55:
        if (!v9) {
          goto LABEL_5;
        }
LABEL_56:
        free(v9);
        goto LABEL_5;
      }
      if (v18)
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v30 = "nw_framer_set_input_handler";
        _os_log_impl(&dword_1830D4000, v10, v17, "%{public}s called with null framer, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v24 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v30 = "nw_framer_set_input_handler";
        _os_log_impl(&dword_1830D4000, v10, v24, "%{public}s called with null framer, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_54:

    goto LABEL_55;
  }
  if (!v4)
  {
    BOOL v12 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v30 = "nw_framer_set_input_handler";
    BOOL v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v27 = 0;
    if (!__nwlog_fault(v9, &type, &v27)) {
      goto LABEL_55;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v30 = "nw_framer_set_input_handler";
        _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null input_handler", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!v27)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v25 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v30 = "nw_framer_set_input_handler";
        _os_log_impl(&dword_1830D4000, v10, v25, "%{public}s called with null input_handler, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    os_log_type_t v19 = (char *)__nw_create_backtrace_string();
    os_log_type_t v10 = __nwlog_obj();
    os_log_type_t v20 = type;
    BOOL v21 = os_log_type_enabled(v10, type);
    if (!v19)
    {
      if (v21)
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v30 = "nw_framer_set_input_handler";
        _os_log_impl(&dword_1830D4000, v10, v20, "%{public}s called with null input_handler, no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v21)
    {
      *(_DWORD *)int buf = 136446466;
      uint64_t v30 = "nw_framer_set_input_handler";
      __int16 v31 = 2082;
      uint64_t v32 = v19;
      _os_log_impl(&dword_1830D4000, v10, v20, "%{public}s called with null input_handler, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_35;
  }
  if ((BYTE6(v3[75].isa) & 4) == 0)
  {
    uint64_t v14 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v30 = "nw_framer_set_input_handler";
    BOOL v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v27 = 0;
    if (!__nwlog_fault(v9, &type, &v27)) {
      goto LABEL_55;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v30 = "nw_framer_set_input_handler";
        _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null framer->in_start", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!v27)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v26 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v30 = "nw_framer_set_input_handler";
        _os_log_impl(&dword_1830D4000, v10, v26, "%{public}s called with null framer->in_start, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    os_log_type_t v19 = (char *)__nw_create_backtrace_string();
    os_log_type_t v10 = __nwlog_obj();
    os_log_type_t v22 = type;
    BOOL v23 = os_log_type_enabled(v10, type);
    if (!v19)
    {
      if (v23)
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v30 = "nw_framer_set_input_handler";
        _os_log_impl(&dword_1830D4000, v10, v22, "%{public}s called with null framer->in_start, no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v23)
    {
      *(_DWORD *)int buf = 136446466;
      uint64_t v30 = "nw_framer_set_input_handler";
      __int16 v31 = 2082;
      uint64_t v32 = v19;
      _os_log_impl(&dword_1830D4000, v10, v22, "%{public}s called with null framer->in_start, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_35:

    free(v19);
    if (!v9) {
      goto LABEL_5;
    }
    goto LABEL_56;
  }
  os_log_type_t v6 = (objc_class *)_Block_copy(v4);
  Class isa = v3[50].isa;
  v3[50].Class isa = v6;

LABEL_5:
}

void nw_framer_set_output_handler(nw_framer_t framer, nw_framer_output_handler_t output_handler)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  nw_framer_t v3 = framer;
  nw_framer_output_handler_t v4 = output_handler;
  size_t v5 = v4;
  if (!v3)
  {
    os_log_type_t v8 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v30 = "nw_framer_set_output_handler";
    BOOL v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v27 = 0;
    if (!__nwlog_fault(v9, &type, &v27)) {
      goto LABEL_55;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v30 = "nw_framer_set_output_handler";
        _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null framer", buf, 0xCu);
      }
    }
    else if (v27)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v17 = type;
      BOOL v18 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)int buf = 136446466;
          uint64_t v30 = "nw_framer_set_output_handler";
          __int16 v31 = 2082;
          uint64_t v32 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v10, v17, "%{public}s called with null framer, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_55:
        if (!v9) {
          goto LABEL_5;
        }
LABEL_56:
        free(v9);
        goto LABEL_5;
      }
      if (v18)
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v30 = "nw_framer_set_output_handler";
        _os_log_impl(&dword_1830D4000, v10, v17, "%{public}s called with null framer, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v24 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v30 = "nw_framer_set_output_handler";
        _os_log_impl(&dword_1830D4000, v10, v24, "%{public}s called with null framer, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_54:

    goto LABEL_55;
  }
  if (!v4)
  {
    BOOL v12 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v30 = "nw_framer_set_output_handler";
    BOOL v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v27 = 0;
    if (!__nwlog_fault(v9, &type, &v27)) {
      goto LABEL_55;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v30 = "nw_framer_set_output_handler";
        _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null output_handler", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!v27)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v25 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v30 = "nw_framer_set_output_handler";
        _os_log_impl(&dword_1830D4000, v10, v25, "%{public}s called with null output_handler, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    os_log_type_t v19 = (char *)__nw_create_backtrace_string();
    os_log_type_t v10 = __nwlog_obj();
    os_log_type_t v20 = type;
    BOOL v21 = os_log_type_enabled(v10, type);
    if (!v19)
    {
      if (v21)
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v30 = "nw_framer_set_output_handler";
        _os_log_impl(&dword_1830D4000, v10, v20, "%{public}s called with null output_handler, no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v21)
    {
      *(_DWORD *)int buf = 136446466;
      uint64_t v30 = "nw_framer_set_output_handler";
      __int16 v31 = 2082;
      uint64_t v32 = v19;
      _os_log_impl(&dword_1830D4000, v10, v20, "%{public}s called with null output_handler, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_35;
  }
  if ((BYTE6(v3[75].isa) & 4) == 0)
  {
    uint64_t v14 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v30 = "nw_framer_set_output_handler";
    BOOL v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v27 = 0;
    if (!__nwlog_fault(v9, &type, &v27)) {
      goto LABEL_55;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v30 = "nw_framer_set_output_handler";
        _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null framer->in_start", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!v27)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v26 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v30 = "nw_framer_set_output_handler";
        _os_log_impl(&dword_1830D4000, v10, v26, "%{public}s called with null framer->in_start, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    os_log_type_t v19 = (char *)__nw_create_backtrace_string();
    os_log_type_t v10 = __nwlog_obj();
    os_log_type_t v22 = type;
    BOOL v23 = os_log_type_enabled(v10, type);
    if (!v19)
    {
      if (v23)
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v30 = "nw_framer_set_output_handler";
        _os_log_impl(&dword_1830D4000, v10, v22, "%{public}s called with null framer->in_start, no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v23)
    {
      *(_DWORD *)int buf = 136446466;
      uint64_t v30 = "nw_framer_set_output_handler";
      __int16 v31 = 2082;
      uint64_t v32 = v19;
      _os_log_impl(&dword_1830D4000, v10, v22, "%{public}s called with null framer->in_start, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_35:

    free(v19);
    if (!v9) {
      goto LABEL_5;
    }
    goto LABEL_56;
  }
  os_log_type_t v6 = (objc_class *)_Block_copy(v4);
  Class isa = v3[51].isa;
  v3[51].Class isa = v6;

LABEL_5:
}

void nw_framer_set_wakeup_handler(nw_framer_t framer, nw_framer_wakeup_handler_t wakeup_handler)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  nw_framer_t v3 = framer;
  nw_framer_wakeup_handler_t v4 = wakeup_handler;
  size_t v5 = v4;
  if (!v3)
  {
    os_log_type_t v8 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v30 = "nw_framer_set_wakeup_handler";
    BOOL v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v27 = 0;
    if (!__nwlog_fault(v9, &type, &v27)) {
      goto LABEL_55;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v30 = "nw_framer_set_wakeup_handler";
        _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null framer", buf, 0xCu);
      }
    }
    else if (v27)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v17 = type;
      BOOL v18 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)int buf = 136446466;
          uint64_t v30 = "nw_framer_set_wakeup_handler";
          __int16 v31 = 2082;
          uint64_t v32 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v10, v17, "%{public}s called with null framer, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_55:
        if (!v9) {
          goto LABEL_5;
        }
LABEL_56:
        free(v9);
        goto LABEL_5;
      }
      if (v18)
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v30 = "nw_framer_set_wakeup_handler";
        _os_log_impl(&dword_1830D4000, v10, v17, "%{public}s called with null framer, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v24 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v30 = "nw_framer_set_wakeup_handler";
        _os_log_impl(&dword_1830D4000, v10, v24, "%{public}s called with null framer, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_54:

    goto LABEL_55;
  }
  if (!v4)
  {
    BOOL v12 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v30 = "nw_framer_set_wakeup_handler";
    BOOL v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v27 = 0;
    if (!__nwlog_fault(v9, &type, &v27)) {
      goto LABEL_55;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v30 = "nw_framer_set_wakeup_handler";
        _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null wakeup_handler", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!v27)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v25 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v30 = "nw_framer_set_wakeup_handler";
        _os_log_impl(&dword_1830D4000, v10, v25, "%{public}s called with null wakeup_handler, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    os_log_type_t v19 = (char *)__nw_create_backtrace_string();
    os_log_type_t v10 = __nwlog_obj();
    os_log_type_t v20 = type;
    BOOL v21 = os_log_type_enabled(v10, type);
    if (!v19)
    {
      if (v21)
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v30 = "nw_framer_set_wakeup_handler";
        _os_log_impl(&dword_1830D4000, v10, v20, "%{public}s called with null wakeup_handler, no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v21)
    {
      *(_DWORD *)int buf = 136446466;
      uint64_t v30 = "nw_framer_set_wakeup_handler";
      __int16 v31 = 2082;
      uint64_t v32 = v19;
      _os_log_impl(&dword_1830D4000, v10, v20, "%{public}s called with null wakeup_handler, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_35;
  }
  if ((BYTE6(v3[75].isa) & 4) == 0)
  {
    uint64_t v14 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v30 = "nw_framer_set_wakeup_handler";
    BOOL v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v27 = 0;
    if (!__nwlog_fault(v9, &type, &v27)) {
      goto LABEL_55;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v30 = "nw_framer_set_wakeup_handler";
        _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null framer->in_start", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!v27)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v26 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v30 = "nw_framer_set_wakeup_handler";
        _os_log_impl(&dword_1830D4000, v10, v26, "%{public}s called with null framer->in_start, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    os_log_type_t v19 = (char *)__nw_create_backtrace_string();
    os_log_type_t v10 = __nwlog_obj();
    os_log_type_t v22 = type;
    BOOL v23 = os_log_type_enabled(v10, type);
    if (!v19)
    {
      if (v23)
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v30 = "nw_framer_set_wakeup_handler";
        _os_log_impl(&dword_1830D4000, v10, v22, "%{public}s called with null framer->in_start, no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v23)
    {
      *(_DWORD *)int buf = 136446466;
      uint64_t v30 = "nw_framer_set_wakeup_handler";
      __int16 v31 = 2082;
      uint64_t v32 = v19;
      _os_log_impl(&dword_1830D4000, v10, v22, "%{public}s called with null framer->in_start, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_35:

    free(v19);
    if (!v9) {
      goto LABEL_5;
    }
    goto LABEL_56;
  }
  os_log_type_t v6 = (objc_class *)_Block_copy(v4);
  Class isa = v3[52].isa;
  v3[52].Class isa = v6;

LABEL_5:
}

void nw_framer_set_stop_handler(nw_framer_t framer, nw_framer_stop_handler_t stop_handler)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  nw_framer_t v3 = framer;
  nw_framer_stop_handler_t v4 = stop_handler;
  size_t v5 = v4;
  if (!v3)
  {
    os_log_type_t v8 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v30 = "nw_framer_set_stop_handler";
    BOOL v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v27 = 0;
    if (!__nwlog_fault(v9, &type, &v27)) {
      goto LABEL_55;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v30 = "nw_framer_set_stop_handler";
        _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null framer", buf, 0xCu);
      }
    }
    else if (v27)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v17 = type;
      BOOL v18 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)int buf = 136446466;
          uint64_t v30 = "nw_framer_set_stop_handler";
          __int16 v31 = 2082;
          uint64_t v32 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v10, v17, "%{public}s called with null framer, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_55:
        if (!v9) {
          goto LABEL_5;
        }
LABEL_56:
        free(v9);
        goto LABEL_5;
      }
      if (v18)
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v30 = "nw_framer_set_stop_handler";
        _os_log_impl(&dword_1830D4000, v10, v17, "%{public}s called with null framer, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v24 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v30 = "nw_framer_set_stop_handler";
        _os_log_impl(&dword_1830D4000, v10, v24, "%{public}s called with null framer, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_54:

    goto LABEL_55;
  }
  if (!v4)
  {
    BOOL v12 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v30 = "nw_framer_set_stop_handler";
    BOOL v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v27 = 0;
    if (!__nwlog_fault(v9, &type, &v27)) {
      goto LABEL_55;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v30 = "nw_framer_set_stop_handler";
        _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null stop_handler", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!v27)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v25 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v30 = "nw_framer_set_stop_handler";
        _os_log_impl(&dword_1830D4000, v10, v25, "%{public}s called with null stop_handler, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    os_log_type_t v19 = (char *)__nw_create_backtrace_string();
    os_log_type_t v10 = __nwlog_obj();
    os_log_type_t v20 = type;
    BOOL v21 = os_log_type_enabled(v10, type);
    if (!v19)
    {
      if (v21)
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v30 = "nw_framer_set_stop_handler";
        _os_log_impl(&dword_1830D4000, v10, v20, "%{public}s called with null stop_handler, no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v21)
    {
      *(_DWORD *)int buf = 136446466;
      uint64_t v30 = "nw_framer_set_stop_handler";
      __int16 v31 = 2082;
      uint64_t v32 = v19;
      _os_log_impl(&dword_1830D4000, v10, v20, "%{public}s called with null stop_handler, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_35;
  }
  if ((BYTE6(v3[75].isa) & 4) == 0)
  {
    uint64_t v14 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v30 = "nw_framer_set_stop_handler";
    BOOL v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v27 = 0;
    if (!__nwlog_fault(v9, &type, &v27)) {
      goto LABEL_55;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v30 = "nw_framer_set_stop_handler";
        _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null framer->in_start", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!v27)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v26 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v30 = "nw_framer_set_stop_handler";
        _os_log_impl(&dword_1830D4000, v10, v26, "%{public}s called with null framer->in_start, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    os_log_type_t v19 = (char *)__nw_create_backtrace_string();
    os_log_type_t v10 = __nwlog_obj();
    os_log_type_t v22 = type;
    BOOL v23 = os_log_type_enabled(v10, type);
    if (!v19)
    {
      if (v23)
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v30 = "nw_framer_set_stop_handler";
        _os_log_impl(&dword_1830D4000, v10, v22, "%{public}s called with null framer->in_start, no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v23)
    {
      *(_DWORD *)int buf = 136446466;
      uint64_t v30 = "nw_framer_set_stop_handler";
      __int16 v31 = 2082;
      uint64_t v32 = v19;
      _os_log_impl(&dword_1830D4000, v10, v22, "%{public}s called with null framer->in_start, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_35:

    free(v19);
    if (!v9) {
      goto LABEL_5;
    }
    goto LABEL_56;
  }
  os_log_type_t v6 = (objc_class *)_Block_copy(v4);
  Class isa = v3[53].isa;
  v3[53].Class isa = v6;

LABEL_5:
}

void nw_framer_set_cleanup_handler(nw_framer_t framer, nw_framer_cleanup_handler_t cleanup_handler)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  nw_framer_t v3 = framer;
  nw_framer_cleanup_handler_t v4 = cleanup_handler;
  size_t v5 = v4;
  if (!v3)
  {
    os_log_type_t v8 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v30 = "nw_framer_set_cleanup_handler";
    BOOL v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v27 = 0;
    if (!__nwlog_fault(v9, &type, &v27)) {
      goto LABEL_55;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v30 = "nw_framer_set_cleanup_handler";
        _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null framer", buf, 0xCu);
      }
    }
    else if (v27)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v17 = type;
      BOOL v18 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)int buf = 136446466;
          uint64_t v30 = "nw_framer_set_cleanup_handler";
          __int16 v31 = 2082;
          uint64_t v32 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v10, v17, "%{public}s called with null framer, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_55:
        if (!v9) {
          goto LABEL_5;
        }
LABEL_56:
        free(v9);
        goto LABEL_5;
      }
      if (v18)
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v30 = "nw_framer_set_cleanup_handler";
        _os_log_impl(&dword_1830D4000, v10, v17, "%{public}s called with null framer, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v24 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v30 = "nw_framer_set_cleanup_handler";
        _os_log_impl(&dword_1830D4000, v10, v24, "%{public}s called with null framer, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_54:

    goto LABEL_55;
  }
  if (!v4)
  {
    BOOL v12 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v30 = "nw_framer_set_cleanup_handler";
    BOOL v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v27 = 0;
    if (!__nwlog_fault(v9, &type, &v27)) {
      goto LABEL_55;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v30 = "nw_framer_set_cleanup_handler";
        _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null cleanup_handler", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!v27)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v25 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v30 = "nw_framer_set_cleanup_handler";
        _os_log_impl(&dword_1830D4000, v10, v25, "%{public}s called with null cleanup_handler, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    os_log_type_t v19 = (char *)__nw_create_backtrace_string();
    os_log_type_t v10 = __nwlog_obj();
    os_log_type_t v20 = type;
    BOOL v21 = os_log_type_enabled(v10, type);
    if (!v19)
    {
      if (v21)
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v30 = "nw_framer_set_cleanup_handler";
        _os_log_impl(&dword_1830D4000, v10, v20, "%{public}s called with null cleanup_handler, no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v21)
    {
      *(_DWORD *)int buf = 136446466;
      uint64_t v30 = "nw_framer_set_cleanup_handler";
      __int16 v31 = 2082;
      uint64_t v32 = v19;
      _os_log_impl(&dword_1830D4000, v10, v20, "%{public}s called with null cleanup_handler, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_35;
  }
  if ((BYTE6(v3[75].isa) & 4) == 0)
  {
    uint64_t v14 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v30 = "nw_framer_set_cleanup_handler";
    BOOL v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v27 = 0;
    if (!__nwlog_fault(v9, &type, &v27)) {
      goto LABEL_55;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v30 = "nw_framer_set_cleanup_handler";
        _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null framer->in_start", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!v27)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v26 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v30 = "nw_framer_set_cleanup_handler";
        _os_log_impl(&dword_1830D4000, v10, v26, "%{public}s called with null framer->in_start, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    os_log_type_t v19 = (char *)__nw_create_backtrace_string();
    os_log_type_t v10 = __nwlog_obj();
    os_log_type_t v22 = type;
    BOOL v23 = os_log_type_enabled(v10, type);
    if (!v19)
    {
      if (v23)
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v30 = "nw_framer_set_cleanup_handler";
        _os_log_impl(&dword_1830D4000, v10, v22, "%{public}s called with null framer->in_start, no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v23)
    {
      *(_DWORD *)int buf = 136446466;
      uint64_t v30 = "nw_framer_set_cleanup_handler";
      __int16 v31 = 2082;
      uint64_t v32 = v19;
      _os_log_impl(&dword_1830D4000, v10, v22, "%{public}s called with null framer->in_start, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_35:

    free(v19);
    if (!v9) {
      goto LABEL_5;
    }
    goto LABEL_56;
  }
  os_log_type_t v6 = (objc_class *)_Block_copy(v4);
  Class isa = v3[54].isa;
  v3[54].Class isa = v6;

LABEL_5:
}

void nw_framer_set_copy_metadata(void *a1, void *a2)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  nw_framer_t v3 = a1;
  id v4 = a2;
  size_t v5 = v4;
  if (!v3)
  {
    os_log_type_t v8 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v30 = "nw_framer_set_copy_metadata";
    BOOL v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v27 = 0;
    if (!__nwlog_fault(v9, &type, &v27)) {
      goto LABEL_55;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v30 = "nw_framer_set_copy_metadata";
        _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null framer", buf, 0xCu);
      }
    }
    else if (v27)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v17 = type;
      BOOL v18 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)int buf = 136446466;
          uint64_t v30 = "nw_framer_set_copy_metadata";
          __int16 v31 = 2082;
          uint64_t v32 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v10, v17, "%{public}s called with null framer, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_55:
        if (!v9) {
          goto LABEL_5;
        }
LABEL_56:
        free(v9);
        goto LABEL_5;
      }
      if (v18)
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v30 = "nw_framer_set_copy_metadata";
        _os_log_impl(&dword_1830D4000, v10, v17, "%{public}s called with null framer, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v24 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v30 = "nw_framer_set_copy_metadata";
        _os_log_impl(&dword_1830D4000, v10, v24, "%{public}s called with null framer, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_54:

    goto LABEL_55;
  }
  if (!v4)
  {
    BOOL v12 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v30 = "nw_framer_set_copy_metadata";
    BOOL v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v27 = 0;
    if (!__nwlog_fault(v9, &type, &v27)) {
      goto LABEL_55;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v30 = "nw_framer_set_copy_metadata";
        _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null copy_handler", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!v27)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v25 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v30 = "nw_framer_set_copy_metadata";
        _os_log_impl(&dword_1830D4000, v10, v25, "%{public}s called with null copy_handler, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    os_log_type_t v19 = (char *)__nw_create_backtrace_string();
    os_log_type_t v10 = __nwlog_obj();
    os_log_type_t v20 = type;
    BOOL v21 = os_log_type_enabled(v10, type);
    if (!v19)
    {
      if (v21)
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v30 = "nw_framer_set_copy_metadata";
        _os_log_impl(&dword_1830D4000, v10, v20, "%{public}s called with null copy_handler, no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v21)
    {
      *(_DWORD *)int buf = 136446466;
      uint64_t v30 = "nw_framer_set_copy_metadata";
      __int16 v31 = 2082;
      uint64_t v32 = v19;
      _os_log_impl(&dword_1830D4000, v10, v20, "%{public}s called with null copy_handler, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_35;
  }
  if ((v3[606] & 4) == 0)
  {
    uint64_t v14 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v30 = "nw_framer_set_copy_metadata";
    BOOL v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v27 = 0;
    if (!__nwlog_fault(v9, &type, &v27)) {
      goto LABEL_55;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v30 = "nw_framer_set_copy_metadata";
        _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null framer->in_start", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!v27)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v26 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v30 = "nw_framer_set_copy_metadata";
        _os_log_impl(&dword_1830D4000, v10, v26, "%{public}s called with null framer->in_start, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    os_log_type_t v19 = (char *)__nw_create_backtrace_string();
    os_log_type_t v10 = __nwlog_obj();
    os_log_type_t v22 = type;
    BOOL v23 = os_log_type_enabled(v10, type);
    if (!v19)
    {
      if (v23)
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v30 = "nw_framer_set_copy_metadata";
        _os_log_impl(&dword_1830D4000, v10, v22, "%{public}s called with null framer->in_start, no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v23)
    {
      *(_DWORD *)int buf = 136446466;
      uint64_t v30 = "nw_framer_set_copy_metadata";
      __int16 v31 = 2082;
      uint64_t v32 = v19;
      _os_log_impl(&dword_1830D4000, v10, v22, "%{public}s called with null framer->in_start, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_35:

    free(v19);
    if (!v9) {
      goto LABEL_5;
    }
    goto LABEL_56;
  }
  os_log_type_t v6 = _Block_copy(v4);
  int v7 = (void *)*((void *)v3 + 55);
  *((void *)v3 + 55) = v6;

LABEL_5:
}

void nw_framer_schedule_wakeup(nw_framer_t framer, uint64_t milliseconds)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  nw_framer_t v3 = framer;
  uint64_t v4 = (uint64_t)v3;
  if (!v3)
  {
    os_log_type_t v8 = __nwlog_obj();
    *(_DWORD *)location = 136446210;
    *(void *)&location[4] = "nw_framer_schedule_wakeup";
    BOOL v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (!__nwlog_fault(v9, &type, &v24)) {
      goto LABEL_40;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)location = 136446210;
        *(void *)&location[4] = "nw_framer_schedule_wakeup";
        _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null framer", location, 0xCu);
      }
    }
    else if (v24)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)location = 136446466;
          *(void *)&location[4] = "nw_framer_schedule_wakeup";
          __int16 v27 = 2082;
          __int16 v28 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null framer, dumping backtrace:%{public}s", location, 0x16u);
        }

        free(backtrace_string);
LABEL_40:
        if (!v9) {
          goto LABEL_6;
        }
LABEL_41:
        free(v9);
        goto LABEL_6;
      }
      if (v16)
      {
        *(_DWORD *)location = 136446210;
        *(void *)&location[4] = "nw_framer_schedule_wakeup";
        _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null framer, no backtrace", location, 0xCu);
      }
    }
    else
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)location = 136446210;
        *(void *)&location[4] = "nw_framer_schedule_wakeup";
        _os_log_impl(&dword_1830D4000, v10, v20, "%{public}s called with null framer, backtrace limit exceeded", location, 0xCu);
      }
    }
LABEL_39:

    goto LABEL_40;
  }
  if (v3[52].isa)
  {
    nw_context_assert_queue(v3[46].isa);
    size_t v5 = *(void **)(v4 + 560);
    if (!v5)
    {
      objc_initWeak((id *)location, (id)v4);
      aBlock[0] = MEMORY[0x1E4F143A8];
      aBlock[1] = 3221225472;
      aBlock[2] = __nw_framer_schedule_wakeup_block_invoke;
      aBlock[3] = &unk_1E5243FB0;
      objc_copyWeak(&v23, (id *)location);
      os_log_type_t v6 = _Block_copy(aBlock);
      int v7 = *(void **)(v4 + 560);
      *(void *)(v4 + 560) = v6;

      objc_destroyWeak(&v23);
      objc_destroyWeak((id *)location);
      size_t v5 = *(void **)(v4 + 560);
    }
    nw_context_reset_timer_block(*(void **)(v4 + 368), v4, milliseconds, v5);
    goto LABEL_6;
  }
  BOOL v12 = __nwlog_obj();
  *(_DWORD *)location = 136446210;
  *(void *)&location[4] = "nw_framer_schedule_wakeup";
  BOOL v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v24 = 0;
  if (!__nwlog_fault(v9, &type, &v24)) {
    goto LABEL_40;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    os_log_type_t v10 = __nwlog_obj();
    os_log_type_t v13 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)location = 136446210;
      *(void *)&location[4] = "nw_framer_schedule_wakeup";
      _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null framer->wakeup", location, 0xCu);
    }
    goto LABEL_39;
  }
  if (!v24)
  {
    os_log_type_t v10 = __nwlog_obj();
    os_log_type_t v21 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)location = 136446210;
      *(void *)&location[4] = "nw_framer_schedule_wakeup";
      _os_log_impl(&dword_1830D4000, v10, v21, "%{public}s called with null framer->wakeup, backtrace limit exceeded", location, 0xCu);
    }
    goto LABEL_39;
  }
  os_log_type_t v17 = (char *)__nw_create_backtrace_string();
  os_log_type_t v10 = __nwlog_obj();
  os_log_type_t v18 = type;
  BOOL v19 = os_log_type_enabled(v10, type);
  if (!v17)
  {
    if (v19)
    {
      *(_DWORD *)location = 136446210;
      *(void *)&location[4] = "nw_framer_schedule_wakeup";
      _os_log_impl(&dword_1830D4000, v10, v18, "%{public}s called with null framer->wakeup, no backtrace", location, 0xCu);
    }
    goto LABEL_39;
  }
  if (v19)
  {
    *(_DWORD *)location = 136446466;
    *(void *)&location[4] = "nw_framer_schedule_wakeup";
    __int16 v27 = 2082;
    __int16 v28 = v17;
    _os_log_impl(&dword_1830D4000, v10, v18, "%{public}s called with null framer->wakeup, dumping backtrace:%{public}s", location, 0x16u);
  }

  free(v17);
  if (v9) {
    goto LABEL_41;
  }
LABEL_6:
}

void sub_183671FB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __nw_framer_schedule_wakeup_block_invoke(uint64_t a1)
{
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    uint64_t v1 = WeakRetained[52];
    if (v1) {
      (*(void (**)(uint64_t, void *))(v1 + 16))(v1, WeakRetained);
    }
  }
}

void sub_18367202C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void nw_framer_async(nw_framer_t framer, nw_framer_block_t async_block)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  nw_framer_t v3 = framer;
  nw_framer_block_t v4 = async_block;
  size_t v5 = v4;
  if (!v3)
  {
    int v7 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v29 = "nw_framer_async";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (!__nwlog_fault(v8, &type, &v26)) {
      goto LABEL_55;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v29 = "nw_framer_async";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null framer", buf, 0xCu);
      }
    }
    else if (v26)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v9 = __nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)int buf = 136446466;
          uint64_t v29 = "nw_framer_async";
          __int16 v30 = 2082;
          __int16 v31 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v16, "%{public}s called with null framer, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_55:
        if (!v8) {
          goto LABEL_5;
        }
LABEL_56:
        free(v8);
        goto LABEL_5;
      }
      if (v17)
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v29 = "nw_framer_async";
        _os_log_impl(&dword_1830D4000, v9, v16, "%{public}s called with null framer, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v9 = __nwlog_obj();
      os_log_type_t v23 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v29 = "nw_framer_async";
        _os_log_impl(&dword_1830D4000, v9, v23, "%{public}s called with null framer, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_54:

    goto LABEL_55;
  }
  if (!v4)
  {
    os_log_type_t v11 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v29 = "nw_framer_async";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (!__nwlog_fault(v8, &type, &v26)) {
      goto LABEL_55;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v9 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v29 = "nw_framer_async";
        _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null async_block", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!v26)
    {
      BOOL v9 = __nwlog_obj();
      os_log_type_t v24 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v29 = "nw_framer_async";
        _os_log_impl(&dword_1830D4000, v9, v24, "%{public}s called with null async_block, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    os_log_type_t v18 = (char *)__nw_create_backtrace_string();
    BOOL v9 = __nwlog_obj();
    os_log_type_t v19 = type;
    BOOL v20 = os_log_type_enabled(v9, type);
    if (!v18)
    {
      if (v20)
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v29 = "nw_framer_async";
        _os_log_impl(&dword_1830D4000, v9, v19, "%{public}s called with null async_block, no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v20)
    {
      *(_DWORD *)int buf = 136446466;
      uint64_t v29 = "nw_framer_async";
      __int16 v30 = 2082;
      __int16 v31 = v18;
      _os_log_impl(&dword_1830D4000, v9, v19, "%{public}s called with null async_block, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_35;
  }
  Class isa = v3[46].isa;
  if (!isa)
  {
    os_log_type_t v13 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v29 = "nw_framer_async";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (!__nwlog_fault(v8, &type, &v26)) {
      goto LABEL_55;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v9 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v29 = "nw_framer_async";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null framer->context", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!v26)
    {
      BOOL v9 = __nwlog_obj();
      os_log_type_t v25 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v29 = "nw_framer_async";
        _os_log_impl(&dword_1830D4000, v9, v25, "%{public}s called with null framer->context, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    os_log_type_t v18 = (char *)__nw_create_backtrace_string();
    BOOL v9 = __nwlog_obj();
    os_log_type_t v21 = type;
    BOOL v22 = os_log_type_enabled(v9, type);
    if (!v18)
    {
      if (v22)
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v29 = "nw_framer_async";
        _os_log_impl(&dword_1830D4000, v9, v21, "%{public}s called with null framer->context, no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v22)
    {
      *(_DWORD *)int buf = 136446466;
      uint64_t v29 = "nw_framer_async";
      __int16 v30 = 2082;
      __int16 v31 = v18;
      _os_log_impl(&dword_1830D4000, v9, v21, "%{public}s called with null framer->context, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_35:

    free(v18);
    if (!v8) {
      goto LABEL_5;
    }
    goto LABEL_56;
  }
  nw_queue_context_async(isa, v5);
LABEL_5:
}

void sub_183672700(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

nw_endpoint_t nw_framer_copy_remote_endpoint(nw_framer_t framer)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  nw_framer_t v1 = framer;
  nw_framer_t v2 = v1;
  if (v1)
  {
    nw_context_assert_queue(v1[46].isa);
    Class isa = v2[42].isa;
    if (isa && (v4 = *((void *)isa + 3)) != 0 && (size_t v5 = *(void (**)(void))(v4 + 136)) != 0)
    {
      os_log_type_t v6 = v5();
    }
    else
    {
      os_log_type_t v6 = v2[44].isa;
    }
    int v7 = v6;
    goto LABEL_7;
  }
  BOOL v9 = __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  BOOL v20 = "nw_framer_copy_remote_endpoint";
  os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v17 = 0;
  if (__nwlog_fault(v10, &type, &v17))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v20 = "nw_framer_copy_remote_endpoint";
        _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s called with null framer", buf, 0xCu);
      }
    }
    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v11 = __nwlog_obj();
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)int buf = 136446466;
          BOOL v20 = "nw_framer_copy_remote_endpoint";
          __int16 v21 = 2082;
          BOOL v22 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v11, v14, "%{public}s called with null framer, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_25;
      }
      if (v15)
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v20 = "nw_framer_copy_remote_endpoint";
        _os_log_impl(&dword_1830D4000, v11, v14, "%{public}s called with null framer, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v11 = __nwlog_obj();
      os_log_type_t v16 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v20 = "nw_framer_copy_remote_endpoint";
        _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s called with null framer, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_25:
  if (v10) {
    free(v10);
  }
  int v7 = 0;
LABEL_7:

  return v7;
}

void sub_1836729E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

nw_endpoint_t nw_framer_copy_local_endpoint(nw_framer_t framer)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  nw_framer_t v1 = framer;
  nw_framer_t v2 = v1;
  if (v1)
  {
    nw_context_assert_queue(v1[46].isa);
    Class isa = v2[42].isa;
    if (isa && (v4 = *((void *)isa + 3)) != 0 && (size_t v5 = *(void (**)(void))(v4 + 128)) != 0)
    {
      uint64_t v6 = v5();
    }
    else
    {
      uint64_t v6 = (uint64_t)nw_parameters_copy_local_endpoint((nw_parameters_t)v2[45].isa);
    }
    int v7 = v6;
    goto LABEL_7;
  }
  BOOL v9 = __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  BOOL v20 = "nw_framer_copy_local_endpoint";
  os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v17 = 0;
  if (__nwlog_fault(v10, &type, &v17))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v20 = "nw_framer_copy_local_endpoint";
        _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s called with null framer", buf, 0xCu);
      }
    }
    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v11 = __nwlog_obj();
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)int buf = 136446466;
          BOOL v20 = "nw_framer_copy_local_endpoint";
          __int16 v21 = 2082;
          BOOL v22 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v11, v14, "%{public}s called with null framer, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_25;
      }
      if (v15)
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v20 = "nw_framer_copy_local_endpoint";
        _os_log_impl(&dword_1830D4000, v11, v14, "%{public}s called with null framer, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v11 = __nwlog_obj();
      os_log_type_t v16 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v20 = "nw_framer_copy_local_endpoint";
        _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s called with null framer, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_25:
  if (v10) {
    free(v10);
  }
  int v7 = 0;
LABEL_7:

  return v7;
}

void sub_183672CC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

nw_parameters_t nw_framer_copy_parameters(nw_framer_t framer)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  nw_framer_t v1 = framer;
  nw_framer_t v2 = v1;
  if (v1)
  {
    nw_context_assert_queue(v1[46].isa);
    Class isa = v2[42].isa;
    if (isa && (v4 = *((void *)isa + 3)) != 0 && (size_t v5 = *(void (**)(void))(v4 + 112)) != 0)
    {
      uint64_t v6 = v5();
    }
    else
    {
      uint64_t v6 = v2[45].isa;
    }
    int v7 = v6;
    goto LABEL_7;
  }
  BOOL v9 = __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  BOOL v20 = "nw_framer_copy_parameters";
  os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v17 = 0;
  if (__nwlog_fault(v10, &type, &v17))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v20 = "nw_framer_copy_parameters";
        _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s called with null framer", buf, 0xCu);
      }
    }
    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v11 = __nwlog_obj();
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)int buf = 136446466;
          BOOL v20 = "nw_framer_copy_parameters";
          __int16 v21 = 2082;
          BOOL v22 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v11, v14, "%{public}s called with null framer, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_25;
      }
      if (v15)
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v20 = "nw_framer_copy_parameters";
        _os_log_impl(&dword_1830D4000, v11, v14, "%{public}s called with null framer, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v11 = __nwlog_obj();
      os_log_type_t v16 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v20 = "nw_framer_copy_parameters";
        _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s called with null framer, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_25:
  if (v10) {
    free(v10);
  }
  int v7 = 0;
LABEL_7:

  return v7;
}

void sub_183672FA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

nw_protocol_options_t nw_framer_copy_options(nw_framer_t framer)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  nw_framer_t v1 = framer;
  nw_framer_t v2 = v1;
  if (v1)
  {
    nw_parameters_t v3 = nw_framer_copy_parameters(v1);
    nw_parameters_t v4 = v3;
    if (v3)
    {
      size_t v5 = nw_parameters_copy_protocol_options_legacy(v3, (nw_protocol *)&v2[36]);
LABEL_4:

      goto LABEL_5;
    }
    os_log_type_t v11 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    char v26 = "nw_framer_copy_options";
    os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (__nwlog_fault(v12, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v13 = __nwlog_obj();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)int buf = 136446210;
          char v26 = "nw_framer_copy_options";
          _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s called with null parameters", buf, 0xCu);
        }
      }
      else if (v23)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v13 = __nwlog_obj();
        os_log_type_t v19 = type;
        BOOL v20 = os_log_type_enabled(v13, type);
        if (backtrace_string)
        {
          if (v20)
          {
            *(_DWORD *)int buf = 136446466;
            char v26 = "nw_framer_copy_options";
            __int16 v27 = 2082;
            __int16 v28 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v13, v19, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_41;
        }
        if (v20)
        {
          *(_DWORD *)int buf = 136446210;
          char v26 = "nw_framer_copy_options";
          _os_log_impl(&dword_1830D4000, v13, v19, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        os_log_type_t v13 = __nwlog_obj();
        os_log_type_t v22 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)int buf = 136446210;
          char v26 = "nw_framer_copy_options";
          _os_log_impl(&dword_1830D4000, v13, v22, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_41:
    if (v12) {
      free(v12);
    }
    size_t v5 = 0;
    goto LABEL_4;
  }
  int v7 = __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  char v26 = "nw_framer_copy_options";
  os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v23 = 0;
  if (__nwlog_fault(v8, &type, &v23))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)int buf = 136446210;
        char v26 = "nw_framer_copy_options";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null framer", buf, 0xCu);
      }
    }
    else if (v23)
    {
      BOOL v15 = (char *)__nw_create_backtrace_string();
      BOOL v9 = __nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v9, type);
      if (v15)
      {
        if (v17)
        {
          *(_DWORD *)int buf = 136446466;
          char v26 = "nw_framer_copy_options";
          __int16 v27 = 2082;
          __int16 v28 = v15;
          _os_log_impl(&dword_1830D4000, v9, v16, "%{public}s called with null framer, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v15);
        goto LABEL_35;
      }
      if (v17)
      {
        *(_DWORD *)int buf = 136446210;
        char v26 = "nw_framer_copy_options";
        _os_log_impl(&dword_1830D4000, v9, v16, "%{public}s called with null framer, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v9 = __nwlog_obj();
      os_log_type_t v21 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)int buf = 136446210;
        char v26 = "nw_framer_copy_options";
        _os_log_impl(&dword_1830D4000, v9, v21, "%{public}s called with null framer, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_35:
  if (v8) {
    free(v8);
  }
  size_t v5 = 0;
LABEL_5:

  return v5;
}

void sub_183673478(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_framer_prepend_application_protocol_unsafe(void *a1, void *a2)
{
  return nw_framer_prepend_application_protocol_inner(a1, a2, 1);
}

uint64_t nw_framer_prepend_application_protocol_inner(void *a1, void *a2, int a3)
{
  uint64_t v168 = *MEMORY[0x1E4F143B8];
  size_t v5 = a1;
  id v6 = a2;
  int v7 = v6;
  if (v5)
  {
    if (v6)
    {
      id v148 = v6;
      nw_context_assert_queue(*((void **)v5 + 46));
      os_log_type_t v8 = nw_protocol_options_copy(v7);
      BOOL v9 = v8;
      if (v8)
      {
        if ((v5[303] & 0x10) == 0) {
          goto LABEL_7;
        }
        if (a3)
        {
          *((unsigned char *)v5 + 606) &= ~0x10u;
LABEL_7:
          uint64_t v147 = *((void *)v5 + 42);
          os_log_type_t v10 = v8;
          id v11 = v10[1];

          os_log_type_t v12 = (void *)*((void *)v5 + 44);
          os_log_type_t v13 = (void *)*((void *)v5 + 45);
          id v14 = v11;
          id v15 = v12;
          os_log_type_t v16 = v13;
          os_log_type_t v146 = v9;
          if (v14)
          {
            id v17 = v14;
            uint64_t v18 = (uint64_t)v17 + 8;

            os_log_type_t v19 = v17;
            char v20 = v19[184];

            if ((v20 & 1) != 0
              && (os_log_type_t v21 = (uint64_t (*)(uint64_t, unsigned char *, id, char *))nw_protocol_definition_get_framer_create(v19)) != 0)
            {
              uint64_t internal = v21(v18, v19, v15, v16);
            }
            else
            {
              uint64_t internal = nw_protocol_create_internal(v18, v15, v16, 1);
            }
            uint64_t v23 = internal;
            goto LABEL_13;
          }
          __int16 v93 = __nwlog_obj();
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_framer_create_protocol_for_definition";
          uint64_t v94 = (char *)_os_log_send_and_compose_impl();

          type[0] = OS_LOG_TYPE_ERROR;
          LOBYTE(v160) = 0;
          if (__nwlog_fault(v94, type, &v160))
          {
            if (type[0] == OS_LOG_TYPE_FAULT)
            {
              uint64_t v95 = __nwlog_obj();
              os_log_type_t v96 = type[0];
              if (os_log_type_enabled(v95, type[0]))
              {
                *(_DWORD *)int buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_framer_create_protocol_for_definition";
                _os_log_impl(&dword_1830D4000, v95, v96, "%{public}s called with null definition", buf, 0xCu);
              }
            }
            else
            {
              if ((_BYTE)v160)
              {
                backtrace_string = (char *)__nw_create_backtrace_string();
                uint64_t v114 = __nwlog_obj();
                os_log_type_t v115 = type[0];
                BOOL v116 = os_log_type_enabled(v114, type[0]);
                if (backtrace_string)
                {
                  if (v116)
                  {
                    *(_DWORD *)int buf = 136446466;
                    *(void *)&uint8_t buf[4] = "nw_framer_create_protocol_for_definition";
                    *(_WORD *)&buf[12] = 2082;
                    *(void *)&buf[14] = backtrace_string;
                    _os_log_impl(&dword_1830D4000, v114, v115, "%{public}s called with null definition, dumping backtrace:%{public}s", buf, 0x16u);
                  }

                  free(backtrace_string);
                }
                else
                {
                  if (v116)
                  {
                    *(_DWORD *)int buf = 136446210;
                    *(void *)&uint8_t buf[4] = "nw_framer_create_protocol_for_definition";
                    _os_log_impl(&dword_1830D4000, v114, v115, "%{public}s called with null definition, no backtrace", buf, 0xCu);
                  }
                }
                goto LABEL_226;
              }
              uint64_t v95 = __nwlog_obj();
              os_log_type_t v131 = type[0];
              if (os_log_type_enabled(v95, type[0]))
              {
                *(_DWORD *)int buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_framer_create_protocol_for_definition";
                _os_log_impl(&dword_1830D4000, v95, v131, "%{public}s called with null definition, backtrace limit exceeded", buf, 0xCu);
              }
            }
          }
LABEL_226:
          if (v94) {
            free(v94);
          }
          uint64_t v23 = 0;
LABEL_13:

          if (v23)
          {
            int v24 = v5[302];
            if (v24 != 0xFFFF) {
              v5[302] = v24 + 1;
            }
            nw_protocol_stack_t v144 = nw_parameters_copy_default_protocol_stack(*((nw_parameters_t *)v5 + 45));
            nw_protocol_options_t v25 = nw_framer_copy_options((nw_framer_t)v5);
            char v26 = v144;
            __int16 v27 = v10;
            __int16 v28 = v25;
            uint64_t v145 = v28;
            if (v26)
            {
              if (v28)
              {
                uint64_t v160 = 0;
                os_log_type_t v161 = &v160;
                uint64_t v162 = 0x2020000000;
                char v163 = 0;
                uint64_t v156 = 0;
                v157 = &v156;
                uint64_t v158 = 0x2020000000;
                uint64_t v159 = 0;
                uint64_t v29 = (atomic_uchar *)v26[1];
                *(void *)int buf = MEMORY[0x1E4F143A8];
                *(void *)&buf[8] = 3221225472;
                *(void *)&buf[16] = __nw_protocol_stack_insert_application_protocol_before_block_invoke;
                os_log_type_t v165 = (char *)&unk_1E523D188;
                *((void *)&v166 + 1) = &v160;
                __int16 v30 = v28;
                *(void *)&long long v166 = v30;
                BOOL v167 = &v156;
                nw_array_apply(v29, (uint64_t)buf);
                if (*((unsigned char *)v161 + 24))
                {
                  nw_array_insert_object_at_index(v26[1], v27, (char *)v157[3]);
                }
                else
                {
                  id v37 = (atomic_uchar *)v26[2];
                  if (!v37)
                  {
                    BOOL v38 = nw_array_create();
                    uint64_t v39 = (void *)v26[2];
                    v26[2] = v38;

                    id v37 = (atomic_uchar *)v26[2];
                  }
                  *(void *)os_log_type_t type = MEMORY[0x1E4F143A8];
                  uint64_t v150 = 3221225472;
                  v151 = __nw_protocol_stack_insert_application_protocol_before_block_invoke_2;
                  os_log_type_t v152 = &unk_1E523D188;
                  uint64_t v154 = &v160;
                  __int16 v153 = v30;
                  uint64_t v155 = &v156;
                  nw_array_apply(v37, (uint64_t)type);
                  nw_array_insert_object_at_index(v26[2], v27, (char *)v157[3]);
                }
                _Block_object_dispose(&v156, 8);
                _Block_object_dispose(&v160, 8);
                goto LABEL_33;
              }
              uint64_t v111 = __nwlog_obj();
              *(_DWORD *)int buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_protocol_stack_insert_application_protocol_before";
              __int16 v108 = (char *)_os_log_send_and_compose_impl();

              type[0] = OS_LOG_TYPE_ERROR;
              LOBYTE(v160) = 0;
              if (!__nwlog_fault(v108, type, &v160)) {
                goto LABEL_241;
              }
              if (type[0] == OS_LOG_TYPE_FAULT)
              {
                int v109 = __nwlog_obj();
                os_log_type_t v112 = type[0];
                if (os_log_type_enabled(v109, type[0]))
                {
                  *(_DWORD *)int buf = 136446210;
                  *(void *)&uint8_t buf[4] = "nw_protocol_stack_insert_application_protocol_before";
                  _os_log_impl(&dword_1830D4000, v109, v112, "%{public}s called with null insert_before", buf, 0xCu);
                }
LABEL_234:

                goto LABEL_241;
              }
              if (!(_BYTE)v160)
              {
                int v109 = __nwlog_obj();
                os_log_type_t v138 = type[0];
                if (os_log_type_enabled(v109, type[0]))
                {
                  *(_DWORD *)int buf = 136446210;
                  *(void *)&uint8_t buf[4] = "nw_protocol_stack_insert_application_protocol_before";
                  _os_log_impl(&dword_1830D4000, v109, v138, "%{public}s called with null insert_before, backtrace limit exceeded", buf, 0xCu);
                }
                goto LABEL_234;
              }
              uint64_t v120 = (char *)__nw_create_backtrace_string();
              size_t v118 = __nwlog_obj();
              os_log_type_t v143 = type[0];
              BOOL v121 = os_log_type_enabled(v118, type[0]);
              if (v120)
              {
                if (v121)
                {
                  *(_DWORD *)int buf = 136446466;
                  *(void *)&uint8_t buf[4] = "nw_protocol_stack_insert_application_protocol_before";
                  *(_WORD *)&buf[12] = 2082;
                  *(void *)&buf[14] = v120;
                  _os_log_impl(&dword_1830D4000, v118, v143, "%{public}s called with null insert_before, dumping backtrace:%{public}s", buf, 0x16u);
                }

                free(v120);
                if (!v108)
                {
LABEL_33:

                  int v40 = v5[302];
                  BOOL v41 = v27;
                  uint64_t v42 = v41;
                  if (*((unsigned char *)v5 + 609))
                  {
                    *((_WORD *)v41 + 68) = v40;
                    snprintf(v41 + 48, 0x54uLL, "[%s%s:%u]", "", (const char *)v5 + 609, v40);
                  }

                  uint64_t v43 = v42;
                  *((void *)v43 + 2) = v23;

                  *(_OWORD *)uint64_t v23 = *((_OWORD *)v5 + 18);
                  uint64_t v44 = *(uint64_t (***)(uint64_t, uint64_t))(v23 + 24);
                  if (!v44 || (uint64_t v45 = *v44) == 0 || (v45(v23, v147) & 1) == 0)
                  {
                    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                    networkd_settings_init();
                    uint64_t v54 = (id)gLogObj;
                    if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)int buf = 136446722;
                      *(void *)&uint8_t buf[4] = "nw_framer_prepend_application_protocol_inner";
                      *(_WORD *)&buf[12] = 2080;
                      *(void *)&buf[14] = (char *)v5 + 609;
                      *(_WORD *)&unsigned char buf[22] = 2114;
                      os_log_type_t v165 = (char *)v14;
                      _os_log_impl(&dword_1830D4000, v54, OS_LOG_TYPE_ERROR, "%{public}s %s Failed to attach %{public}@ protocol", buf, 0x20u);
                    }
                    goto LABEL_53;
                  }
                  nw_protocol_set_output_handler(v147, v23);
                  uint64_t v46 = *((void *)v5 + 39);
                  if (v46)
                  {
                    uint64_t v47 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v46 + 16);
                    if (v47)
                    {
                      if (v47(v5 + 144, v147, v23))
                      {
                        uint64_t v48 = *((void *)v5 + 40);
                        if (v48)
                        {
                          uint64_t v49 = *(void *)(v48 + 24);
                          if (v49)
                          {
                            uint64_t v50 = *(void (**)(uint64_t, unsigned __int16 *))(v49 + 16);
                            if (v50) {
                              v50(v48, v5 + 144);
                            }
                          }
                        }
                        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                        networkd_settings_init();
                        os_log_type_t v51 = (id)gLogObj;
                        if (os_log_type_enabled(v51, OS_LOG_TYPE_INFO))
                        {
                          *(_DWORD *)int buf = 136446722;
                          *(void *)&uint8_t buf[4] = "nw_framer_prepend_application_protocol_inner";
                          *(_WORD *)&buf[12] = 2080;
                          *(void *)&buf[14] = (char *)v5 + 609;
                          *(_WORD *)&unsigned char buf[22] = 2114;
                          os_log_type_t v165 = (char *)v14;
                          _os_log_impl(&dword_1830D4000, v51, OS_LOG_TYPE_INFO, "%{public}s %s Attached %{public}@ protocol above framer", buf, 0x20u);
                        }

                        uint64_t v52 = *(void *)(v23 + 24);
                        if (v52)
                        {
                          id v53 = *(void (**)(uint64_t, uint64_t))(v52 + 24);
                          if (v53)
                          {
                            v53(v23, v147);
LABEL_50:
                            uint64_t v36 = 1;
LABEL_55:

LABEL_87:
                            BOOL v9 = v146;
                            goto LABEL_88;
                          }
                        }
                        size_t v122 = __nwlog_obj();
                        uint64_t v123 = *(const char **)(v23 + 16);
                        if (!v123) {
                          uint64_t v123 = "invalid";
                        }
                        *(_DWORD *)int buf = 136446466;
                        *(void *)&uint8_t buf[4] = "nw_framer_prepend_application_protocol_inner";
                        *(_WORD *)&buf[12] = 2082;
                        *(void *)&buf[14] = v123;
                        uint64_t v124 = (char *)_os_log_send_and_compose_impl();

                        type[0] = OS_LOG_TYPE_ERROR;
                        LOBYTE(v160) = 0;
                        if (__nwlog_fault(v124, type, &v160))
                        {
                          if (type[0] == OS_LOG_TYPE_FAULT)
                          {
                            uint64_t v125 = __nwlog_obj();
                            os_log_type_t v126 = type[0];
                            if (os_log_type_enabled(v125, type[0]))
                            {
                              uint64_t v127 = *(const char **)(v23 + 16);
                              if (!v127) {
                                uint64_t v127 = "invalid";
                              }
                              *(_DWORD *)int buf = 136446466;
                              *(void *)&uint8_t buf[4] = "nw_framer_prepend_application_protocol_inner";
                              *(_WORD *)&buf[12] = 2082;
                              *(void *)&buf[14] = v127;
                              _os_log_impl(&dword_1830D4000, v125, v126, "%{public}s protocol %{public}s has invalid connect callback", buf, 0x16u);
                            }
                          }
                          else
                          {
                            if ((_BYTE)v160)
                            {
                              __int16 v132 = (char *)__nw_create_backtrace_string();
                              __int16 v133 = __nwlog_obj();
                              os_log_type_t v134 = type[0];
                              BOOL v135 = os_log_type_enabled(v133, type[0]);
                              if (v132)
                              {
                                if (v135)
                                {
                                  uint64_t v136 = *(const char **)(v23 + 16);
                                  if (!v136) {
                                    uint64_t v136 = "invalid";
                                  }
                                  *(_DWORD *)int buf = 136446722;
                                  *(void *)&uint8_t buf[4] = "nw_framer_prepend_application_protocol_inner";
                                  *(_WORD *)&buf[12] = 2082;
                                  *(void *)&buf[14] = v136;
                                  *(_WORD *)&unsigned char buf[22] = 2082;
                                  os_log_type_t v165 = v132;
                                  _os_log_impl(&dword_1830D4000, v133, v134, "%{public}s protocol %{public}s has invalid connect callback, dumping backtrace:%{public}s", buf, 0x20u);
                                }

                                free(v132);
                              }
                              else
                              {
                                if (v135)
                                {
                                  BOOL v141 = *(const char **)(v23 + 16);
                                  if (!v141) {
                                    BOOL v141 = "invalid";
                                  }
                                  *(_DWORD *)int buf = 136446466;
                                  *(void *)&uint8_t buf[4] = "nw_framer_prepend_application_protocol_inner";
                                  *(_WORD *)&buf[12] = 2082;
                                  *(void *)&buf[14] = v141;
                                  _os_log_impl(&dword_1830D4000, v133, v134, "%{public}s protocol %{public}s has invalid connect callback, no backtrace", buf, 0x16u);
                                }
                              }
                              goto LABEL_253;
                            }
                            uint64_t v125 = __nwlog_obj();
                            os_log_type_t v139 = type[0];
                            if (os_log_type_enabled(v125, type[0]))
                            {
                              os_log_type_t v140 = *(const char **)(v23 + 16);
                              if (!v140) {
                                os_log_type_t v140 = "invalid";
                              }
                              *(_DWORD *)int buf = 136446466;
                              *(void *)&uint8_t buf[4] = "nw_framer_prepend_application_protocol_inner";
                              *(_WORD *)&buf[12] = 2082;
                              *(void *)&buf[14] = v140;
                              _os_log_impl(&dword_1830D4000, v125, v139, "%{public}s protocol %{public}s has invalid connect callback, backtrace limit exceeded", buf, 0x16u);
                            }
                          }
                        }
LABEL_253:
                        if (v124) {
                          free(v124);
                        }
                        goto LABEL_50;
                      }
                    }
                  }
                  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                  networkd_settings_init();
                  uint64_t v59 = (id)gLogObj;
                  if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)int buf = 136446722;
                    *(void *)&uint8_t buf[4] = "nw_framer_prepend_application_protocol_inner";
                    *(_WORD *)&buf[12] = 2080;
                    *(void *)&buf[14] = (char *)v5 + 609;
                    *(_WORD *)&unsigned char buf[22] = 2114;
                    os_log_type_t v165 = (char *)v14;
                    _os_log_impl(&dword_1830D4000, v59, OS_LOG_TYPE_ERROR, "%{public}s %s Failed to replace flow protocol with %{public}@ protocol", buf, 0x20u);
                  }

                  uint64_t v60 = *(void *)(v23 + 24);
                  if (v60
                    && (uint64_t v61 = *(unsigned int (**)(uint64_t, uint64_t, void))(v60 + 8)) != 0
                    && v61(v23, v147, 0))
                  {
                    size_t v62 = (unsigned int (**)(unsigned __int16 *, uint64_t))*((void *)v5 + 39);
                    if (v62)
                    {
                      char v63 = *v62;
                      if (v63)
                      {
                        if (v63(v5 + 144, v147))
                        {
                          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                          networkd_settings_init();
                          uint64_t v54 = (id)gLogObj;
                          if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
                          {
                            *(_DWORD *)int buf = 136446722;
                            *(void *)&uint8_t buf[4] = "nw_framer_prepend_application_protocol_inner";
                            *(_WORD *)&buf[12] = 2080;
                            *(void *)&buf[14] = (char *)v5 + 609;
                            *(_WORD *)&unsigned char buf[22] = 2114;
                            os_log_type_t v165 = (char *)v14;
                            _os_log_impl(&dword_1830D4000, v54, OS_LOG_TYPE_ERROR, "%{public}s %s Successfully repaired protocol stack after failed %{public}@ insertion", buf, 0x20u);
                          }
LABEL_53:

LABEL_54:
                          uint64_t v36 = 0;
                          goto LABEL_55;
                        }
                      }
                    }
                    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                    networkd_settings_init();
                    id v75 = (id)gLogObj;
                    *(_DWORD *)int buf = 136446466;
                    *(void *)&uint8_t buf[4] = "nw_framer_prepend_application_protocol_inner";
                    *(_WORD *)&buf[12] = 2080;
                    *(void *)&buf[14] = (char *)v5 + 609;
                    uint64_t v65 = (char *)_os_log_send_and_compose_impl();

                    type[0] = OS_LOG_TYPE_ERROR;
                    LOBYTE(v160) = 0;
                    if (!__nwlog_fault(v65, type, &v160)) {
                      goto LABEL_118;
                    }
                    if (type[0] == OS_LOG_TYPE_FAULT)
                    {
                      char v66 = __nwlog_obj();
                      os_log_type_t v76 = type[0];
                      if (os_log_type_enabled(v66, type[0]))
                      {
                        *(_DWORD *)int buf = 136446466;
                        *(void *)&uint8_t buf[4] = "nw_framer_prepend_application_protocol_inner";
                        *(_WORD *)&buf[12] = 2080;
                        *(void *)&buf[14] = (char *)v5 + 609;
                        _os_log_impl(&dword_1830D4000, v66, v76, "%{public}s %s Failed to repair protocol stack: Could not add old input_protocol", buf, 0x16u);
                      }
LABEL_114:

                      goto LABEL_118;
                    }
                    if (!(_BYTE)v160)
                    {
                      char v66 = __nwlog_obj();
                      os_log_type_t v81 = type[0];
                      if (os_log_type_enabled(v66, type[0]))
                      {
                        *(_DWORD *)int buf = 136446466;
                        *(void *)&uint8_t buf[4] = "nw_framer_prepend_application_protocol_inner";
                        *(_WORD *)&buf[12] = 2080;
                        *(void *)&buf[14] = (char *)v5 + 609;
                        _os_log_impl(&dword_1830D4000, v66, v81, "%{public}s %s Failed to repair protocol stack: Could not add old input_protocol, backtrace limit exceeded", buf, 0x16u);
                      }
                      goto LABEL_114;
                    }
                    uint64_t v77 = (char *)__nw_create_backtrace_string();
                    id v72 = __nwlog_obj();
                    os_log_type_t v78 = type[0];
                    BOOL v79 = os_log_type_enabled(v72, type[0]);
                    if (v77)
                    {
                      if (v79)
                      {
                        *(_DWORD *)int buf = 136446722;
                        *(void *)&uint8_t buf[4] = "nw_framer_prepend_application_protocol_inner";
                        *(_WORD *)&buf[12] = 2080;
                        *(void *)&buf[14] = (char *)v5 + 609;
                        *(_WORD *)&unsigned char buf[22] = 2082;
                        os_log_type_t v165 = v77;
                        _os_log_impl(&dword_1830D4000, v72, v78, "%{public}s %s Failed to repair protocol stack: Could not add old input_protocol, dumping backtrace:%{public}s", buf, 0x20u);
                      }

                      free(v77);
LABEL_118:
                      if (!v65) {
                        goto LABEL_54;
                      }
LABEL_119:
                      free(v65);
                      goto LABEL_54;
                    }
                    if (v79)
                    {
                      *(_DWORD *)int buf = 136446466;
                      *(void *)&uint8_t buf[4] = "nw_framer_prepend_application_protocol_inner";
                      *(_WORD *)&buf[12] = 2080;
                      *(void *)&buf[14] = (char *)v5 + 609;
                      _os_log_impl(&dword_1830D4000, v72, v78, "%{public}s %s Failed to repair protocol stack: Could not add old input_protocol, no backtrace", buf, 0x16u);
                    }
                  }
                  else
                  {
                    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                    networkd_settings_init();
                    id v64 = (id)gLogObj;
                    *(_DWORD *)int buf = 136446722;
                    *(void *)&uint8_t buf[4] = "nw_framer_prepend_application_protocol_inner";
                    *(_WORD *)&buf[12] = 2080;
                    *(void *)&buf[14] = (char *)v5 + 609;
                    *(_WORD *)&unsigned char buf[22] = 2114;
                    os_log_type_t v165 = (char *)v14;
                    uint64_t v65 = (char *)_os_log_send_and_compose_impl();

                    type[0] = OS_LOG_TYPE_ERROR;
                    LOBYTE(v160) = 0;
                    if (!__nwlog_fault(v65, type, &v160)) {
                      goto LABEL_118;
                    }
                    if (type[0] == OS_LOG_TYPE_FAULT)
                    {
                      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                      networkd_settings_init();
                      char v66 = (id)gLogObj;
                      os_log_type_t v67 = type[0];
                      if (os_log_type_enabled(v66, type[0]))
                      {
                        *(_DWORD *)int buf = 136446722;
                        *(void *)&uint8_t buf[4] = "nw_framer_prepend_application_protocol_inner";
                        *(_WORD *)&buf[12] = 2080;
                        *(void *)&buf[14] = (char *)v5 + 609;
                        *(_WORD *)&unsigned char buf[22] = 2114;
                        os_log_type_t v165 = (char *)v14;
                        _os_log_impl(&dword_1830D4000, v66, v67, "%{public}s %s Failed to repair protocol stack: Could not undo failed %{public}@ insertion", buf, 0x20u);
                      }
                      goto LABEL_114;
                    }
                    if (!(_BYTE)v160)
                    {
                      char v66 = __nwlog_obj();
                      os_log_type_t v80 = type[0];
                      if (os_log_type_enabled(v66, type[0]))
                      {
                        *(_DWORD *)int buf = 136446722;
                        *(void *)&uint8_t buf[4] = "nw_framer_prepend_application_protocol_inner";
                        *(_WORD *)&buf[12] = 2080;
                        *(void *)&buf[14] = (char *)v5 + 609;
                        *(_WORD *)&unsigned char buf[22] = 2114;
                        os_log_type_t v165 = (char *)v14;
                        _os_log_impl(&dword_1830D4000, v66, v80, "%{public}s %s Failed to repair protocol stack: Could not undo failed %{public}@ insertion, backtrace limit exceeded", buf, 0x20u);
                      }
                      goto LABEL_114;
                    }
                    uint64_t v71 = (char *)__nw_create_backtrace_string();
                    id v72 = __nwlog_obj();
                    os_log_type_t v73 = type[0];
                    BOOL v74 = os_log_type_enabled(v72, type[0]);
                    if (v71)
                    {
                      if (v74)
                      {
                        *(_DWORD *)int buf = 136446978;
                        *(void *)&uint8_t buf[4] = "nw_framer_prepend_application_protocol_inner";
                        *(_WORD *)&buf[12] = 2080;
                        *(void *)&buf[14] = (char *)v5 + 609;
                        *(_WORD *)&unsigned char buf[22] = 2114;
                        os_log_type_t v165 = (char *)v14;
                        LOWORD(v166) = 2082;
                        *(void *)((char *)&v166 + 2) = v71;
                        _os_log_impl(&dword_1830D4000, v72, v73, "%{public}s %s Failed to repair protocol stack: Could not undo failed %{public}@ insertion, dumping backtrace:%{public}s", buf, 0x2Au);
                      }

                      free(v71);
                      if (!v65) {
                        goto LABEL_54;
                      }
                      goto LABEL_119;
                    }
                    if (v74)
                    {
                      *(_DWORD *)int buf = 136446722;
                      *(void *)&uint8_t buf[4] = "nw_framer_prepend_application_protocol_inner";
                      *(_WORD *)&buf[12] = 2080;
                      *(void *)&buf[14] = (char *)v5 + 609;
                      *(_WORD *)&unsigned char buf[22] = 2114;
                      os_log_type_t v165 = (char *)v14;
                      _os_log_impl(&dword_1830D4000, v72, v73, "%{public}s %s Failed to repair protocol stack: Could not undo failed %{public}@ insertion, no backtrace", buf, 0x20u);
                    }
                  }

                  goto LABEL_118;
                }
LABEL_242:
                free(v108);
                goto LABEL_33;
              }
              if (v121)
              {
                *(_DWORD *)int buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_protocol_stack_insert_application_protocol_before";
                _os_log_impl(&dword_1830D4000, v118, v143, "%{public}s called with null insert_before, no backtrace", buf, 0xCu);
              }
            }
            else
            {
              uint64_t v107 = __nwlog_obj();
              *(_DWORD *)int buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_protocol_stack_insert_application_protocol_before";
              __int16 v108 = (char *)_os_log_send_and_compose_impl();

              type[0] = OS_LOG_TYPE_ERROR;
              LOBYTE(v160) = 0;
              if (!__nwlog_fault(v108, type, &v160)) {
                goto LABEL_241;
              }
              if (type[0] == OS_LOG_TYPE_FAULT)
              {
                int v109 = __nwlog_obj();
                os_log_type_t v110 = type[0];
                if (os_log_type_enabled(v109, type[0]))
                {
                  *(_DWORD *)int buf = 136446210;
                  *(void *)&uint8_t buf[4] = "nw_protocol_stack_insert_application_protocol_before";
                  _os_log_impl(&dword_1830D4000, v109, v110, "%{public}s called with null stack", buf, 0xCu);
                }
                goto LABEL_234;
              }
              if (!(_BYTE)v160)
              {
                int v109 = __nwlog_obj();
                os_log_type_t v137 = type[0];
                if (os_log_type_enabled(v109, type[0]))
                {
                  *(_DWORD *)int buf = 136446210;
                  *(void *)&uint8_t buf[4] = "nw_protocol_stack_insert_application_protocol_before";
                  _os_log_impl(&dword_1830D4000, v109, v137, "%{public}s called with null stack, backtrace limit exceeded", buf, 0xCu);
                }
                goto LABEL_234;
              }
              os_log_type_t v117 = (char *)__nw_create_backtrace_string();
              size_t v118 = __nwlog_obj();
              os_log_type_t v142 = type[0];
              BOOL v119 = os_log_type_enabled(v118, type[0]);
              if (v117)
              {
                if (v119)
                {
                  *(_DWORD *)int buf = 136446466;
                  *(void *)&uint8_t buf[4] = "nw_protocol_stack_insert_application_protocol_before";
                  *(_WORD *)&buf[12] = 2082;
                  *(void *)&buf[14] = v117;
                  _os_log_impl(&dword_1830D4000, v118, v142, "%{public}s called with null stack, dumping backtrace:%{public}s", buf, 0x16u);
                }

                free(v117);
LABEL_241:
                if (!v108) {
                  goto LABEL_33;
                }
                goto LABEL_242;
              }
              if (v119)
              {
                *(_DWORD *)int buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_protocol_stack_insert_application_protocol_before";
                _os_log_impl(&dword_1830D4000, v118, v142, "%{public}s called with null stack, no backtrace", buf, 0xCu);
              }
            }

            goto LABEL_241;
          }
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          id v31 = (id)gLogObj;
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_framer_prepend_application_protocol_inner";
          *(_WORD *)&buf[12] = 2114;
          *(void *)&buf[14] = v14;
          uint64_t v32 = (char *)_os_log_send_and_compose_impl();

          type[0] = OS_LOG_TYPE_ERROR;
          LOBYTE(v160) = 0;
          if (__nwlog_fault(v32, type, &v160))
          {
            if (type[0] == OS_LOG_TYPE_FAULT)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              uint64_t v33 = (id)gLogObj;
              os_log_type_t v34 = type[0];
              if (os_log_type_enabled(v33, type[0]))
              {
                *(_DWORD *)int buf = 136446466;
                *(void *)&uint8_t buf[4] = "nw_framer_prepend_application_protocol_inner";
                *(_WORD *)&buf[12] = 2114;
                *(void *)&buf[14] = v14;
                _os_log_impl(&dword_1830D4000, v33, v34, "%{public}s nw_framer_create_protocol_for_definition(%{public}@) failed", buf, 0x16u);
              }
LABEL_24:

              goto LABEL_84;
            }
            if (!(_BYTE)v160)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              uint64_t v33 = (id)gLogObj;
              os_log_type_t v68 = type[0];
              if (os_log_type_enabled(v33, type[0]))
              {
                *(_DWORD *)int buf = 136446466;
                *(void *)&uint8_t buf[4] = "nw_framer_prepend_application_protocol_inner";
                *(_WORD *)&buf[12] = 2114;
                *(void *)&buf[14] = v14;
                _os_log_impl(&dword_1830D4000, v33, v68, "%{public}s nw_framer_create_protocol_for_definition(%{public}@) failed, backtrace limit exceeded", buf, 0x16u);
              }
              goto LABEL_24;
            }
            os_log_type_t v55 = (char *)__nw_create_backtrace_string();
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            dispatch_data_t v56 = (id)gLogObj;
            os_log_type_t v57 = type[0];
            BOOL v58 = os_log_type_enabled(v56, type[0]);
            if (v55)
            {
              if (v58)
              {
                *(_DWORD *)int buf = 136446722;
                *(void *)&uint8_t buf[4] = "nw_framer_prepend_application_protocol_inner";
                *(_WORD *)&buf[12] = 2114;
                *(void *)&buf[14] = v14;
                *(_WORD *)&unsigned char buf[22] = 2082;
                os_log_type_t v165 = v55;
                _os_log_impl(&dword_1830D4000, v56, v57, "%{public}s nw_framer_create_protocol_for_definition(%{public}@) failed, dumping backtrace:%{public}s", buf, 0x20u);
              }

              free(v55);
              if (!v32) {
                goto LABEL_86;
              }
              goto LABEL_85;
            }
            if (v58)
            {
              *(_DWORD *)int buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_framer_prepend_application_protocol_inner";
              *(_WORD *)&buf[12] = 2114;
              *(void *)&buf[14] = v14;
              _os_log_impl(&dword_1830D4000, v56, v57, "%{public}s nw_framer_create_protocol_for_definition(%{public}@) failed, no backtrace", buf, 0x16u);
            }
          }
LABEL_84:
          if (!v32)
          {
LABEL_86:
            uint64_t v36 = 0;
            goto LABEL_87;
          }
LABEL_85:
          free(v32);
          goto LABEL_86;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v35 = (id)gLogObj;
        if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_framer_prepend_application_protocol_inner";
          *(_WORD *)&buf[12] = 2080;
          *(void *)&buf[14] = (char *)v5 + 609;
          _os_log_impl(&dword_1830D4000, v35, OS_LOG_TYPE_ERROR, "%{public}s %s Already in the ready state, cannot prepend application protocol", buf, 0x16u);
        }

LABEL_28:
        uint64_t v36 = 0;
LABEL_88:

        uint64_t v69 = v148;
        goto LABEL_89;
      }
      uint64_t v89 = __nwlog_obj();
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_framer_prepend_application_protocol_inner";
      BOOL v90 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(v160) = 0;
      if (__nwlog_fault(v90, type, &v160))
      {
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          uint64_t v91 = __nwlog_obj();
          os_log_type_t v92 = type[0];
          if (os_log_type_enabled(v91, type[0]))
          {
            *(_DWORD *)int buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_framer_prepend_application_protocol_inner";
            _os_log_impl(&dword_1830D4000, v91, v92, "%{public}s called with null protocol_options", buf, 0xCu);
          }
        }
        else
        {
          if ((_BYTE)v160)
          {
            uint64_t v103 = (char *)__nw_create_backtrace_string();
            __int16 v104 = __nwlog_obj();
            os_log_type_t v105 = type[0];
            BOOL v106 = os_log_type_enabled(v104, type[0]);
            if (v103)
            {
              if (v106)
              {
                *(_DWORD *)int buf = 136446466;
                *(void *)&uint8_t buf[4] = "nw_framer_prepend_application_protocol_inner";
                *(_WORD *)&buf[12] = 2082;
                *(void *)&buf[14] = v103;
                _os_log_impl(&dword_1830D4000, v104, v105, "%{public}s called with null protocol_options, dumping backtrace:%{public}s", buf, 0x16u);
              }

              free(v103);
            }
            else
            {
              if (v106)
              {
                *(_DWORD *)int buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_framer_prepend_application_protocol_inner";
                _os_log_impl(&dword_1830D4000, v104, v105, "%{public}s called with null protocol_options, no backtrace", buf, 0xCu);
              }
            }
            goto LABEL_214;
          }
          uint64_t v91 = __nwlog_obj();
          os_log_type_t v130 = type[0];
          if (os_log_type_enabled(v91, type[0]))
          {
            *(_DWORD *)int buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_framer_prepend_application_protocol_inner";
            _os_log_impl(&dword_1830D4000, v91, v130, "%{public}s called with null protocol_options, backtrace limit exceeded", buf, 0xCu);
          }
        }
      }
LABEL_214:
      if (v90) {
        free(v90);
      }
      goto LABEL_28;
    }
    id v82 = 0;
    uint64_t v87 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_framer_prepend_application_protocol_inner";
    uint64_t v84 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v160) = 0;
    if (__nwlog_fault(v84, type, &v160))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        int v85 = __nwlog_obj();
        os_log_type_t v88 = type[0];
        if (os_log_type_enabled(v85, type[0]))
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_framer_prepend_application_protocol_inner";
          _os_log_impl(&dword_1830D4000, v85, v88, "%{public}s called with null orig_protocol_options", buf, 0xCu);
        }
LABEL_195:

        goto LABEL_208;
      }
      if (!(_BYTE)v160)
      {
        int v85 = __nwlog_obj();
        os_log_type_t v129 = type[0];
        if (os_log_type_enabled(v85, type[0]))
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_framer_prepend_application_protocol_inner";
          _os_log_impl(&dword_1830D4000, v85, v129, "%{public}s called with null orig_protocol_options, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_195;
      }
      int v97 = (char *)__nw_create_backtrace_string();
      uint64_t v98 = __nwlog_obj();
      os_log_type_t v101 = type[0];
      BOOL v102 = os_log_type_enabled(v98, type[0]);
      if (v97)
      {
        if (v102)
        {
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_framer_prepend_application_protocol_inner";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v97;
          _os_log_impl(&dword_1830D4000, v98, v101, "%{public}s called with null orig_protocol_options, dumping backtrace:%{public}s", buf, 0x16u);
        }
LABEL_149:

        free(v97);
        goto LABEL_208;
      }
      if (v102)
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_framer_prepend_application_protocol_inner";
        _os_log_impl(&dword_1830D4000, v98, v101, "%{public}s called with null orig_protocol_options, no backtrace", buf, 0xCu);
      }
      goto LABEL_207;
    }
  }
  else
  {
    id v82 = v6;
    uint64_t v83 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_framer_prepend_application_protocol_inner";
    uint64_t v84 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v160) = 0;
    if (__nwlog_fault(v84, type, &v160))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        int v85 = __nwlog_obj();
        os_log_type_t v86 = type[0];
        if (os_log_type_enabled(v85, type[0]))
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_framer_prepend_application_protocol_inner";
          _os_log_impl(&dword_1830D4000, v85, v86, "%{public}s called with null framer", buf, 0xCu);
        }
        goto LABEL_195;
      }
      if (!(_BYTE)v160)
      {
        int v85 = __nwlog_obj();
        os_log_type_t v128 = type[0];
        if (os_log_type_enabled(v85, type[0]))
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_framer_prepend_application_protocol_inner";
          _os_log_impl(&dword_1830D4000, v85, v128, "%{public}s called with null framer, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_195;
      }
      int v97 = (char *)__nw_create_backtrace_string();
      uint64_t v98 = __nwlog_obj();
      os_log_type_t v99 = type[0];
      BOOL v100 = os_log_type_enabled(v98, type[0]);
      if (v97)
      {
        if (v100)
        {
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_framer_prepend_application_protocol_inner";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v97;
          _os_log_impl(&dword_1830D4000, v98, v99, "%{public}s called with null framer, dumping backtrace:%{public}s", buf, 0x16u);
        }
        goto LABEL_149;
      }
      if (v100)
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_framer_prepend_application_protocol_inner";
        _os_log_impl(&dword_1830D4000, v98, v99, "%{public}s called with null framer, no backtrace", buf, 0xCu);
      }
LABEL_207:
    }
  }
LABEL_208:
  uint64_t v69 = v82;
  if (v84) {
    free(v84);
  }
  uint64_t v36 = 0;
LABEL_89:

  return v36;
}

void sub_1836753B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  _Unwind_Resume(a1);
}

BOOL nw_framer_prepend_application_protocol(nw_framer_t framer, nw_protocol_options_t protocol_options)
{
  return nw_framer_prepend_application_protocol_inner(framer, protocol_options, 0);
}

void nw_framer_mark_ready(nw_framer_t framer)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  nw_framer_t v1 = framer;
  nw_framer_t v2 = v1;
  if (v1)
  {
    nw_context_assert_queue(v1[46].isa);
    if ((BYTE6(v2[75].isa) & 0x10) != 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v8 = (id)gLogObj;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136446466;
        char v20 = "nw_framer_mark_ready";
        __int16 v21 = 2080;
        os_log_type_t v22 = (char *)&v2[76].isa + 1;
        _os_log_impl(&dword_1830D4000, v8, OS_LOG_TYPE_ERROR, "%{public}s %s Already in the ready state", buf, 0x16u);
      }
    }
    else
    {
      BYTE6(v2[75].isa) |= 0x10u;
      Class isa = v2[42].isa;
      if (isa)
      {
        uint64_t v4 = *((void *)isa + 3);
        if (v4)
        {
          size_t v5 = *(void (**)(void))(v4 + 40);
          if (!v5 || (v5(), (Class v6 = v2[42].isa) != 0) && (v4 = *((void *)v6 + 3)) != 0)
          {
            int v7 = *(void (**)(void))(v4 + 72);
            if (v7) {
              v7();
            }
          }
        }
      }
    }
    goto LABEL_13;
  }
  BOOL v9 = __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  char v20 = "nw_framer_mark_ready";
  os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v17 = 0;
  if (__nwlog_fault(v10, &type, &v17))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)int buf = 136446210;
        char v20 = "nw_framer_mark_ready";
        _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s called with null framer", buf, 0xCu);
      }
    }
    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v11 = __nwlog_obj();
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)int buf = 136446466;
          char v20 = "nw_framer_mark_ready";
          __int16 v21 = 2082;
          os_log_type_t v22 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v11, v14, "%{public}s called with null framer, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_30;
      }
      if (v15)
      {
        *(_DWORD *)int buf = 136446210;
        char v20 = "nw_framer_mark_ready";
        _os_log_impl(&dword_1830D4000, v11, v14, "%{public}s called with null framer, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v11 = __nwlog_obj();
      os_log_type_t v16 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)int buf = 136446210;
        char v20 = "nw_framer_mark_ready";
        _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s called with null framer, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_30:
  if (v10) {
    free(v10);
  }
LABEL_13:
}

void sub_183675794(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_framer_mark_failed_with_error(nw_framer_t framer, int error_code)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  nw_framer_t v2 = framer;
  nw_framer_t v3 = v2;
  if (v2)
  {
    nw_context_assert_queue(v2[46].isa);
    HIBYTE(v3[75].isa) |= 0x80u;
    Class isa = v3[42].isa;
    if (isa)
    {
      uint64_t v5 = *((void *)isa + 3);
      if (v5)
      {
        Class v6 = *(void (**)(void))(v5 + 56);
        if (!v6 || (v6(), (Class v7 = v3[42].isa) != 0) && (v5 = *((void *)v7 + 3)) != 0)
        {
          os_log_type_t v8 = *(void (**)(void))(v5 + 48);
          if (v8) {
            v8();
          }
        }
      }
    }
    Class v9 = v3[40].isa;
    if (v9)
    {
      uint64_t v10 = *((void *)v9 + 3);
      if (v10)
      {
        id v11 = *(void (**)(void))(v10 + 32);
        if (v11) {
          v11();
        }
      }
    }
    goto LABEL_13;
  }
  os_log_type_t v12 = __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  uint64_t v23 = "nw_framer_mark_failed_with_error";
  os_log_type_t v13 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v20 = 0;
  if (__nwlog_fault(v13, &type, &v20))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v23 = "nw_framer_mark_failed_with_error";
        _os_log_impl(&dword_1830D4000, v14, v15, "%{public}s called with null framer", buf, 0xCu);
      }
    }
    else if (v20)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v14 = __nwlog_obj();
      os_log_type_t v17 = type;
      BOOL v18 = os_log_type_enabled(v14, type);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)int buf = 136446466;
          uint64_t v23 = "nw_framer_mark_failed_with_error";
          __int16 v24 = 2082;
          nw_protocol_options_t v25 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v14, v17, "%{public}s called with null framer, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_30;
      }
      if (v18)
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v23 = "nw_framer_mark_failed_with_error";
        _os_log_impl(&dword_1830D4000, v14, v17, "%{public}s called with null framer, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v14 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v23 = "nw_framer_mark_failed_with_error";
        _os_log_impl(&dword_1830D4000, v14, v19, "%{public}s called with null framer, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_30:
  if (v13) {
    free(v13);
  }
LABEL_13:
}

void sub_183675AB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_framer_connection_state_set_object_value(void *a1, const char *a2, void *a3)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = a3;
  if (!v5)
  {
    uint64_t v10 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    int v35 = "nw_framer_connection_state_set_object_value";
    id v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v32 = 0;
    if (!__nwlog_fault(v11, &type, &v32)) {
      goto LABEL_55;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)int buf = 136446210;
        int v35 = "nw_framer_connection_state_set_object_value";
        _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s called with null framer", buf, 0xCu);
      }
    }
    else if (v32)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v21 = type;
      BOOL v22 = os_log_type_enabled(v12, type);
      if (backtrace_string)
      {
        if (v22)
        {
          *(_DWORD *)int buf = 136446466;
          int v35 = "nw_framer_connection_state_set_object_value";
          __int16 v36 = 2082;
          id v37 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v12, v21, "%{public}s called with null framer, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_55:
        if (!v11) {
          goto LABEL_8;
        }
LABEL_56:
        free(v11);
        goto LABEL_8;
      }
      if (v22)
      {
        *(_DWORD *)int buf = 136446210;
        int v35 = "nw_framer_connection_state_set_object_value";
        _os_log_impl(&dword_1830D4000, v12, v21, "%{public}s called with null framer, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v29 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)int buf = 136446210;
        int v35 = "nw_framer_connection_state_set_object_value";
        _os_log_impl(&dword_1830D4000, v12, v29, "%{public}s called with null framer, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_54:

    goto LABEL_55;
  }
  if (a2)
  {
    nw_context_assert_queue(*((void **)v5 + 46));
    id v7 = *((id *)v5 + 47);
    if (v7
      || (id v7 = (id)nw_protocol_copy_shared_connection_state((uint64_t)v5 + 288, *((void *)v5 + 1), *((void **)v5 + 46), 1)) != 0|| (v8 = nw_dictionary_create(), v9 = (void *)*((void *)v5 + 47), *((void *)v5 + 47) = v8, v9, (id v7 = *((id *)v5 + 47)) != 0))
    {
      nw_dictionary_set_value((uint64_t)v7, a2, v6);
LABEL_7:

      goto LABEL_8;
    }
    os_log_type_t v16 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    int v35 = "nw_framer_connection_state_set_object_value";
    os_log_type_t v17 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v32 = 0;
    if (__nwlog_fault(v17, &type, &v32))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        BOOL v18 = __nwlog_obj();
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v18, type))
        {
          *(_DWORD *)int buf = 136446210;
          int v35 = "nw_framer_connection_state_set_object_value";
          _os_log_impl(&dword_1830D4000, v18, v19, "%{public}s called with null connection_state", buf, 0xCu);
        }
      }
      else if (v32)
      {
        uint64_t v26 = (char *)__nw_create_backtrace_string();
        BOOL v18 = __nwlog_obj();
        os_log_type_t v27 = type;
        BOOL v28 = os_log_type_enabled(v18, type);
        if (v26)
        {
          if (v28)
          {
            *(_DWORD *)int buf = 136446466;
            int v35 = "nw_framer_connection_state_set_object_value";
            __int16 v36 = 2082;
            id v37 = v26;
            _os_log_impl(&dword_1830D4000, v18, v27, "%{public}s called with null connection_state, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v26);
          goto LABEL_60;
        }
        if (v28)
        {
          *(_DWORD *)int buf = 136446210;
          int v35 = "nw_framer_connection_state_set_object_value";
          _os_log_impl(&dword_1830D4000, v18, v27, "%{public}s called with null connection_state, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        BOOL v18 = __nwlog_obj();
        os_log_type_t v31 = type;
        if (os_log_type_enabled(v18, type))
        {
          *(_DWORD *)int buf = 136446210;
          int v35 = "nw_framer_connection_state_set_object_value";
          _os_log_impl(&dword_1830D4000, v18, v31, "%{public}s called with null connection_state, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_60:
    if (v17) {
      free(v17);
    }
    id v7 = 0;
    goto LABEL_7;
  }
  os_log_type_t v14 = __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  int v35 = "nw_framer_connection_state_set_object_value";
  id v11 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v32 = 0;
  if (!__nwlog_fault(v11, &type, &v32)) {
    goto LABEL_55;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    os_log_type_t v12 = __nwlog_obj();
    os_log_type_t v15 = type;
    if (os_log_type_enabled(v12, type))
    {
      *(_DWORD *)int buf = 136446210;
      int v35 = "nw_framer_connection_state_set_object_value";
      _os_log_impl(&dword_1830D4000, v12, v15, "%{public}s called with null key", buf, 0xCu);
    }
    goto LABEL_54;
  }
  if (!v32)
  {
    os_log_type_t v12 = __nwlog_obj();
    os_log_type_t v30 = type;
    if (os_log_type_enabled(v12, type))
    {
      *(_DWORD *)int buf = 136446210;
      int v35 = "nw_framer_connection_state_set_object_value";
      _os_log_impl(&dword_1830D4000, v12, v30, "%{public}s called with null key, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_54;
  }
  uint64_t v23 = (char *)__nw_create_backtrace_string();
  os_log_type_t v12 = __nwlog_obj();
  os_log_type_t v24 = type;
  BOOL v25 = os_log_type_enabled(v12, type);
  if (!v23)
  {
    if (v25)
    {
      *(_DWORD *)int buf = 136446210;
      int v35 = "nw_framer_connection_state_set_object_value";
      _os_log_impl(&dword_1830D4000, v12, v24, "%{public}s called with null key, no backtrace", buf, 0xCu);
    }
    goto LABEL_54;
  }
  if (v25)
  {
    *(_DWORD *)int buf = 136446466;
    int v35 = "nw_framer_connection_state_set_object_value";
    __int16 v36 = 2082;
    id v37 = v23;
    _os_log_impl(&dword_1830D4000, v12, v24, "%{public}s called with null key, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v23);
  if (v11) {
    goto LABEL_56;
  }
LABEL_8:
}

void sub_183676200(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *nw_framer_connection_state_copy_object_value(void *a1, uint64_t a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  nw_framer_t v3 = a1;
  uint64_t v4 = v3;
  if (!v3)
  {
    os_log_type_t v8 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v24 = "nw_framer_connection_state_copy_object_value";
    Class v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (!__nwlog_fault(v9, &type, &v21)) {
      goto LABEL_39;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v24 = "nw_framer_connection_state_copy_object_value";
        _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null framer", buf, 0xCu);
      }
      goto LABEL_38;
    }
    if (!v21)
    {
      uint64_t v10 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v24 = "nw_framer_connection_state_copy_object_value";
        _os_log_impl(&dword_1830D4000, v10, v19, "%{public}s called with null framer, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_38;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v10 = __nwlog_obj();
    os_log_type_t v15 = type;
    BOOL v16 = os_log_type_enabled(v10, type);
    if (!backtrace_string)
    {
      if (v16)
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v24 = "nw_framer_connection_state_copy_object_value";
        _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null framer, no backtrace", buf, 0xCu);
      }
      goto LABEL_38;
    }
    if (v16)
    {
      *(_DWORD *)int buf = 136446466;
      os_log_type_t v24 = "nw_framer_connection_state_copy_object_value";
      __int16 v25 = 2082;
      uint64_t v26 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null framer, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_26;
  }
  if (!a2)
  {
    os_log_type_t v12 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v24 = "nw_framer_connection_state_copy_object_value";
    Class v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (!__nwlog_fault(v9, &type, &v21)) {
      goto LABEL_39;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v10 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v24 = "nw_framer_connection_state_copy_object_value";
        _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null key", buf, 0xCu);
      }
LABEL_38:

LABEL_39:
      if (v9) {
        free(v9);
      }
      goto LABEL_41;
    }
    if (!v21)
    {
      uint64_t v10 = __nwlog_obj();
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v24 = "nw_framer_connection_state_copy_object_value";
        _os_log_impl(&dword_1830D4000, v10, v20, "%{public}s called with null key, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_38;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v10 = __nwlog_obj();
    os_log_type_t v17 = type;
    BOOL v18 = os_log_type_enabled(v10, type);
    if (!backtrace_string)
    {
      if (v18)
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v24 = "nw_framer_connection_state_copy_object_value";
        _os_log_impl(&dword_1830D4000, v10, v17, "%{public}s called with null key, no backtrace", buf, 0xCu);
      }
      goto LABEL_38;
    }
    if (v18)
    {
      *(_DWORD *)int buf = 136446466;
      os_log_type_t v24 = "nw_framer_connection_state_copy_object_value";
      __int16 v25 = 2082;
      uint64_t v26 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v10, v17, "%{public}s called with null key, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_26:

    free(backtrace_string);
    goto LABEL_39;
  }
  nw_context_assert_queue(v3[46]);
  id v5 = v4[47];
  if (!v5)
  {
    id v5 = (id)nw_protocol_copy_shared_connection_state((uint64_t)(v4 + 36), (uint64_t)v4[1], v4[46], 0);
    if (!v5)
    {
LABEL_41:
      id v6 = 0;
      goto LABEL_6;
    }
  }
  id v6 = nw_dictionary_copy_value((uint64_t)v5, a2);

LABEL_6:
  return v6;
}

void sub_183676700(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

nw_protocol_definition_t nw_framer_create_definition(const char *identifier, uint32_t flags, nw_framer_start_handler_t start_handler)
{
  char v3 = flags;
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  nw_framer_start_handler_t v5 = start_handler;
  id v6 = v5;
  if (identifier)
  {
    if (v5)
    {
      id v7 = v5;
      named = nw_protocol_definition_create_named(v3 & 2 | 1u, (unsigned __int8 *)identifier);
      Class v9 = named;
      if (named)
      {
        nw_protocol_definition_initialize_common_state(named);
        if (v3) {
          char v10 = 3;
        }
        else {
          char v10 = 1;
        }
        *((unsigned char *)v9 + 184) = v10 | *((unsigned char *)v9 + 184) & 0xFC;
        v9->common_state->var9 = nw_framer_protocol_create;
        os_log_type_t v11 = _Block_copy(v7);
        common_uint64_t state = v9->common_state;
        id var10 = common_state->var10;
        common_state->id var10 = v11;

        os_log_type_t v14 = v9;
      }

      nw_protocol_definition_set_metadata_allocator(v9, (uint64_t)nw_framer_allocate_metadata, (uint64_t)nw_framer_deallocate_metadata);
      nw_protocol_definition_set_metadata_copy_reply(v9, nw_framer_message_create_reply, nw_framer_metadata_copy_original, nw_framer_metadata_set_original);
      nw_protocol_definition_set_options_allocator(v9, (uint64_t)nw_framer_allocate_options, (uint64_t)nw_framer_duplicate_options, (uint64_t)nw_framer_deallocate_options);
      nw_protocol_definition_set_options_equality_check(v9, (uint64_t)nw_framer_options_are_equal);
      goto LABEL_9;
    }
    os_log_type_t v20 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    char v32 = "nw_framer_create_definition";
    os_log_type_t v17 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v29 = 0;
    if (__nwlog_fault(v17, &type, &v29))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        BOOL v18 = __nwlog_obj();
        os_log_type_t v21 = type;
        if (os_log_type_enabled(v18, type))
        {
          *(_DWORD *)int buf = 136446210;
          char v32 = "nw_framer_create_definition";
          _os_log_impl(&dword_1830D4000, v18, v21, "%{public}s called with null start", buf, 0xCu);
        }
LABEL_41:

        goto LABEL_42;
      }
      if (!v29)
      {
        BOOL v18 = __nwlog_obj();
        os_log_type_t v28 = type;
        if (os_log_type_enabled(v18, type))
        {
          *(_DWORD *)int buf = 136446210;
          char v32 = "nw_framer_create_definition";
          _os_log_impl(&dword_1830D4000, v18, v28, "%{public}s called with null start, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v18 = __nwlog_obj();
      os_log_type_t v25 = type;
      BOOL v26 = os_log_type_enabled(v18, type);
      if (!backtrace_string)
      {
        if (v26)
        {
          *(_DWORD *)int buf = 136446210;
          char v32 = "nw_framer_create_definition";
          _os_log_impl(&dword_1830D4000, v18, v25, "%{public}s called with null start, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v26)
      {
        *(_DWORD *)int buf = 136446466;
        char v32 = "nw_framer_create_definition";
        __int16 v33 = 2082;
        os_log_type_t v34 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v18, v25, "%{public}s called with null start, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_29;
    }
  }
  else
  {
    BOOL v16 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    char v32 = "nw_framer_create_definition";
    os_log_type_t v17 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v29 = 0;
    if (__nwlog_fault(v17, &type, &v29))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        BOOL v18 = __nwlog_obj();
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v18, type))
        {
          *(_DWORD *)int buf = 136446210;
          char v32 = "nw_framer_create_definition";
          _os_log_impl(&dword_1830D4000, v18, v19, "%{public}s called with null identifier_string", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (!v29)
      {
        BOOL v18 = __nwlog_obj();
        os_log_type_t v27 = type;
        if (os_log_type_enabled(v18, type))
        {
          *(_DWORD *)int buf = 136446210;
          char v32 = "nw_framer_create_definition";
          _os_log_impl(&dword_1830D4000, v18, v27, "%{public}s called with null identifier_string, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v18 = __nwlog_obj();
      os_log_type_t v23 = type;
      BOOL v24 = os_log_type_enabled(v18, type);
      if (!backtrace_string)
      {
        if (v24)
        {
          *(_DWORD *)int buf = 136446210;
          char v32 = "nw_framer_create_definition";
          _os_log_impl(&dword_1830D4000, v18, v23, "%{public}s called with null identifier_string, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v24)
      {
        *(_DWORD *)int buf = 136446466;
        char v32 = "nw_framer_create_definition";
        __int16 v33 = 2082;
        os_log_type_t v34 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v18, v23, "%{public}s called with null identifier_string, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_29:

      free(backtrace_string);
    }
  }
LABEL_42:
  if (v17) {
    free(v17);
  }
  Class v9 = 0;
LABEL_9:

  return &v9->super;
}

void sub_183676CE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_framer_options_are_equal(void *a1, uint64_t *a2, uint64_t *a3)
{
  id v5 = a1;
  uint64_t v6 = *a2;
  uint64_t v7 = *a3;
  if (*a2) {
    BOOL v8 = v7 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8)
  {
    BOOL v9 = v6 == v7;
  }
  else
  {
    size_t count = nw_dictionary_get_count(v6);
    if (count == nw_dictionary_get_count(*a3))
    {
      uint64_t v14 = 0;
      os_log_type_t v15 = &v14;
      uint64_t v16 = 0x2020000000;
      char v17 = 1;
      uint64_t v11 = *a2;
      v13[0] = MEMORY[0x1E4F143A8];
      v13[1] = 3221225472;
      v13[2] = ___ZL27nw_framer_options_are_equalPU36objcproto25OS_nw_protocol_definition8NSObjectPvS2__block_invoke;
      v13[3] = &unk_1E523CA50;
      v13[4] = &v14;
      void v13[5] = a3;
      nw_dictionary_apply(v11, (uint64_t)v13);
      BOOL v9 = *((unsigned char *)v15 + 24) != 0;
      _Block_object_dispose(&v14, 8);
    }
    else
    {
      BOOL v9 = 0;
    }
  }

  return v9;
}

uint64_t ___ZL27nw_framer_options_are_equalPU36objcproto25OS_nw_protocol_definition8NSObjectPvS2__block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = nw_dictionary_copy_value(**(void **)(a1 + 40), a2);
  uint64_t v7 = v6;
  if (v6 && (v6 == v5 || ([v5 isEqual:v6] & 1) != 0))
  {
    uint64_t v8 = 1;
  }
  else
  {
    uint64_t v8 = 0;
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
  }

  return v8;
}

void sub_183676EA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_framer_deallocate_options(uint64_t a1, void **a2)
{
  char v3 = *a2;
  *a2 = 0;

  uint64_t v4 = a2[1];
  a2[1] = 0;

  free(a2);
}

BOOL nw_framer_duplicate_options(void *a1, uint64_t *a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  if (!a2)
  {
    BOOL v9 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    BOOL v22 = "nw_framer_duplicate_options";
    char v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (__nwlog_fault(v10, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v11 = __nwlog_obj();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)int buf = 136446210;
          BOOL v22 = "nw_framer_duplicate_options";
          _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s called with null existing_handle", buf, 0xCu);
        }
      }
      else if (v19)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        uint64_t v11 = __nwlog_obj();
        os_log_type_t v16 = type;
        BOOL v17 = os_log_type_enabled(v11, type);
        if (backtrace_string)
        {
          if (v17)
          {
            *(_DWORD *)int buf = 136446466;
            BOOL v22 = "nw_framer_duplicate_options";
            __int16 v23 = 2082;
            uint64_t v24 = (uint64_t)backtrace_string;
            _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s called with null existing_handle, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_25;
        }
        if (v17)
        {
          *(_DWORD *)int buf = 136446210;
          BOOL v22 = "nw_framer_duplicate_options";
          _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s called with null existing_handle, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        uint64_t v11 = __nwlog_obj();
        os_log_type_t v18 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)int buf = 136446210;
          BOOL v22 = "nw_framer_duplicate_options";
          _os_log_impl(&dword_1830D4000, v11, v18, "%{public}s called with null existing_handle, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_25:
    if (v10) {
      free(v10);
    }
    uint64_t v4 = 0;
    goto LABEL_5;
  }
  uint64_t v4 = (void **)malloc_type_calloc(1uLL, 0x10uLL, 0xEAFB8F1AuLL);
  if (v4)
  {
    uint64_t v5 = *a2;
    if (!*a2)
    {
LABEL_5:

      return (BOOL)v4;
    }
LABEL_4:
    uint64_t v6 = nw_dictionary_copy(v5);
    uint64_t v7 = *v4;
    void *v4 = (void *)v6;

    goto LABEL_5;
  }
  os_log_type_t v13 = __nwlog_obj();
  os_log_type_enabled(v13, OS_LOG_TYPE_ERROR);
  *(_DWORD *)int buf = 136446722;
  BOOL v22 = "strict_calloc";
  __int16 v23 = 2048;
  uint64_t v24 = 1;
  __int16 v25 = 2048;
  uint64_t v26 = 16;
  uint64_t v14 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v14);
  if (!result)
  {
    free(v14);
    uint64_t v5 = *a2;
    if (!*a2) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  __break(1u);
  return result;
}

void sub_183677288(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_framer_allocate_options(void *a1)
{
  id v1 = a1;
  nw_framer_t v2 = malloc_type_calloc(1uLL, 0x10uLL, 0xEAFB8F1AuLL);
  if (v2) {
    goto LABEL_2;
  }
  uint64_t v4 = __nwlog_obj();
  os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  uint64_t v5 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v5);
  if (!result)
  {
    free(v5);
LABEL_2:

    return (BOOL)v2;
  }
  __break(1u);
  return result;
}

void sub_1836773D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_framer_metadata_set_original(void *a1, void *a2)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  uint64_t v5 = v4;
  if (!v3)
  {
    os_log_type_t v12 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    __int16 v36 = "nw_framer_metadata_set_original";
    os_log_type_t v13 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v33 = 0;
    if (!__nwlog_fault(v13, &type, &v33)) {
      goto LABEL_61;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v36 = "nw_framer_metadata_set_original";
        _os_log_impl(&dword_1830D4000, v14, v15, "%{public}s called with null metadata", buf, 0xCu);
      }
    }
    else if (v33)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v14 = __nwlog_obj();
      os_log_type_t v21 = type;
      BOOL v22 = os_log_type_enabled(v14, type);
      if (backtrace_string)
      {
        if (v22)
        {
          *(_DWORD *)int buf = 136446466;
          __int16 v36 = "nw_framer_metadata_set_original";
          __int16 v37 = 2082;
          uint64_t v38 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v14, v21, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_61:
        if (!v13) {
          goto LABEL_11;
        }
LABEL_62:
        free(v13);
        goto LABEL_11;
      }
      if (v22)
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v36 = "nw_framer_metadata_set_original";
        _os_log_impl(&dword_1830D4000, v14, v21, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v14 = __nwlog_obj();
      os_log_type_t v28 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v36 = "nw_framer_metadata_set_original";
        _os_log_impl(&dword_1830D4000, v14, v28, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_60:

    goto LABEL_61;
  }
  if (!v4)
  {
    os_log_type_t v16 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    __int16 v36 = "nw_framer_metadata_set_original";
    os_log_type_t v13 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v33 = 0;
    if (!__nwlog_fault(v13, &type, &v33)) {
      goto LABEL_61;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v14 = __nwlog_obj();
      os_log_type_t v17 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v36 = "nw_framer_metadata_set_original";
        _os_log_impl(&dword_1830D4000, v14, v17, "%{public}s called with null original", buf, 0xCu);
      }
      goto LABEL_60;
    }
    if (!v33)
    {
      uint64_t v14 = __nwlog_obj();
      os_log_type_t v29 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v36 = "nw_framer_metadata_set_original";
        _os_log_impl(&dword_1830D4000, v14, v29, "%{public}s called with null original, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_60;
    }
    __int16 v23 = (char *)__nw_create_backtrace_string();
    uint64_t v14 = __nwlog_obj();
    os_log_type_t v24 = type;
    BOOL v25 = os_log_type_enabled(v14, type);
    if (!v23)
    {
      if (v25)
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v36 = "nw_framer_metadata_set_original";
        _os_log_impl(&dword_1830D4000, v14, v24, "%{public}s called with null original, no backtrace", buf, 0xCu);
      }
      goto LABEL_60;
    }
    if (v25)
    {
      *(_DWORD *)int buf = 136446466;
      __int16 v36 = "nw_framer_metadata_set_original";
      __int16 v37 = 2082;
      uint64_t v38 = v23;
      _os_log_impl(&dword_1830D4000, v14, v24, "%{public}s called with null original, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_41;
  }
  id v6 = v3;
  id v7 = *((id *)v6 + 1);

  char is_framer = nw_protocol_definition_is_framer(v7);
  if ((is_framer & 1) == 0)
  {
    os_log_type_t v18 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    __int16 v36 = "nw_framer_metadata_set_original";
    os_log_type_t v13 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v33 = 0;
    if (!__nwlog_fault(v13, &type, &v33)) {
      goto LABEL_61;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v14 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v36 = "nw_framer_metadata_set_original";
        _os_log_impl(&dword_1830D4000, v14, v19, "%{public}s called with null nw_protocol_metadata_is_framer_message(metadata)", buf, 0xCu);
      }
      goto LABEL_60;
    }
    if (!v33)
    {
      uint64_t v14 = __nwlog_obj();
      os_log_type_t v30 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v36 = "nw_framer_metadata_set_original";
        _os_log_impl(&dword_1830D4000, v14, v30, "%{public}s called with null nw_protocol_metadata_is_framer_message(metadata), backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_60;
    }
    __int16 v23 = (char *)__nw_create_backtrace_string();
    uint64_t v14 = __nwlog_obj();
    os_log_type_t v26 = type;
    BOOL v27 = os_log_type_enabled(v14, type);
    if (!v23)
    {
      if (v27)
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v36 = "nw_framer_metadata_set_original";
        _os_log_impl(&dword_1830D4000, v14, v26, "%{public}s called with null nw_protocol_metadata_is_framer_message(metadata), no backtrace", buf, 0xCu);
      }
      goto LABEL_60;
    }
    if (v27)
    {
      *(_DWORD *)int buf = 136446466;
      __int16 v36 = "nw_framer_metadata_set_original";
      __int16 v37 = 2082;
      uint64_t v38 = v23;
      _os_log_impl(&dword_1830D4000, v14, v26, "%{public}s called with null nw_protocol_metadata_is_framer_message(metadata), dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_41:

    free(v23);
    if (!v13) {
      goto LABEL_11;
    }
    goto LABEL_62;
  }
  if (nw_protocol_metadata_supports_replies(v5))
  {
    v31[0] = MEMORY[0x1E4F143A8];
    v31[1] = 3221225472;
    v31[2] = ___ZL31nw_framer_metadata_set_originalPU34objcproto23OS_nw_protocol_metadata8NSObjectS1__block_invoke;
    v31[3] = &unk_1E5248F68;
    id v9 = v5;
    id v32 = v9;
    uint64_t v10 = *((void *)v6 + 4);
    if (v10)
    {
      ___ZL31nw_framer_metadata_set_originalPU34objcproto23OS_nw_protocol_metadata8NSObjectS1__block_invoke((uint64_t)v31, v10);
      id v9 = v32;
    }
  }
  else
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v11 = (id)gLogObj;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136446210;
      __int16 v36 = "nw_framer_metadata_set_original";
      _os_log_impl(&dword_1830D4000, v11, OS_LOG_TYPE_ERROR, "%{public}s Protocol does not support replies, cannot create a reply", buf, 0xCu);
    }
  }
LABEL_11:
}

uint64_t ___ZL31nw_framer_metadata_set_originalPU34objcproto23OS_nw_protocol_metadata8NSObjectS1__block_invoke(uint64_t a1, uint64_t a2)
{
  return 1;
}

void *nw_framer_metadata_copy_original(uint64_t a1, uint64_t a2)
{
  nw_framer_t v2 = *(void **)(a2 + 24);
  if (v2) {
    id v3 = v2;
  }
  return v2;
}

nw_framer_message_t nw_framer_message_create_reply(void *a1)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  nw_framer_t v2 = v1;
  if (!v1)
  {
    os_log_type_t v15 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    char v33 = "nw_framer_message_create_reply";
    os_log_type_t v16 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v30 = 0;
    if (!__nwlog_fault(v16, &type, &v30)) {
      goto LABEL_47;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v17 = __nwlog_obj();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v17, type))
      {
        *(_DWORD *)int buf = 136446210;
        char v33 = "nw_framer_message_create_reply";
        _os_log_impl(&dword_1830D4000, v17, v18, "%{public}s called with null original_message", buf, 0xCu);
      }
      goto LABEL_46;
    }
    if (!v30)
    {
      os_log_type_t v17 = __nwlog_obj();
      os_log_type_t v26 = type;
      if (os_log_type_enabled(v17, type))
      {
        *(_DWORD *)int buf = 136446210;
        char v33 = "nw_framer_message_create_reply";
        _os_log_impl(&dword_1830D4000, v17, v26, "%{public}s called with null original_message, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_46;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v17 = __nwlog_obj();
    os_log_type_t v22 = type;
    BOOL v23 = os_log_type_enabled(v17, type);
    if (!backtrace_string)
    {
      if (v23)
      {
        *(_DWORD *)int buf = 136446210;
        char v33 = "nw_framer_message_create_reply";
        _os_log_impl(&dword_1830D4000, v17, v22, "%{public}s called with null original_message, no backtrace", buf, 0xCu);
      }
      goto LABEL_46;
    }
    if (v23)
    {
      *(_DWORD *)int buf = 136446466;
      char v33 = "nw_framer_message_create_reply";
      __int16 v34 = 2082;
      uint64_t v35 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v17, v22, "%{public}s called with null original_message, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_34;
  }
  id v3 = (id *)v1;
  id v4 = v3[1];

  char is_framer = nw_protocol_definition_is_framer(v4);
  if ((is_framer & 1) == 0)
  {
    os_log_type_t v19 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    char v33 = "nw_framer_message_create_reply";
    os_log_type_t v16 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v30 = 0;
    if (!__nwlog_fault(v16, &type, &v30)) {
      goto LABEL_47;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v17 = __nwlog_obj();
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v17, type))
      {
        *(_DWORD *)int buf = 136446210;
        char v33 = "nw_framer_message_create_reply";
        _os_log_impl(&dword_1830D4000, v17, v20, "%{public}s called with null nw_protocol_metadata_is_framer_message(original_message)", buf, 0xCu);
      }
LABEL_46:

LABEL_47:
      if (v16) {
        free(v16);
      }
      goto LABEL_10;
    }
    if (!v30)
    {
      os_log_type_t v17 = __nwlog_obj();
      os_log_type_t v27 = type;
      if (os_log_type_enabled(v17, type))
      {
        *(_DWORD *)int buf = 136446210;
        char v33 = "nw_framer_message_create_reply";
        _os_log_impl(&dword_1830D4000, v17, v27, "%{public}s called with null nw_protocol_metadata_is_framer_message(original_message), backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_46;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v17 = __nwlog_obj();
    os_log_type_t v24 = type;
    BOOL v25 = os_log_type_enabled(v17, type);
    if (!backtrace_string)
    {
      if (v25)
      {
        *(_DWORD *)int buf = 136446210;
        char v33 = "nw_framer_message_create_reply";
        _os_log_impl(&dword_1830D4000, v17, v24, "%{public}s called with null nw_protocol_metadata_is_framer_message(original_message), no backtrace", buf, 0xCu);
      }
      goto LABEL_46;
    }
    if (v25)
    {
      *(_DWORD *)int buf = 136446466;
      char v33 = "nw_framer_message_create_reply";
      __int16 v34 = 2082;
      uint64_t v35 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v17, v24, "%{public}s called with null nw_protocol_metadata_is_framer_message(original_message), dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_34:

    free(backtrace_string);
    goto LABEL_47;
  }
  if ((nw_protocol_metadata_supports_replies(v3) & 1) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v12 = (id)gLogObj;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136446210;
      char v33 = "nw_framer_message_create_reply";
      _os_log_impl(&dword_1830D4000, v12, OS_LOG_TYPE_ERROR, "%{public}s Protocol does not support replies, cannot create a reply", buf, 0xCu);
    }

LABEL_10:
    nw_framer_message_t message = 0;
    goto LABEL_14;
  }
  id v6 = v3;
  id v7 = v3[1];

  nw_framer_message_t message = nw_framer_protocol_create_message(v7);
  if (message)
  {
    v28[0] = MEMORY[0x1E4F143A8];
    v28[1] = 3221225472;
    v28[2] = __nw_framer_message_create_reply_block_invoke;
    v28[3] = &unk_1E5248F68;
    id v9 = v6;
    os_log_type_t v29 = v9;
    uint64_t isa = (uint64_t)message[4].isa;
    if (isa)
    {
      __nw_framer_message_create_reply_block_invoke((uint64_t)v28, isa);
      uint64_t v11 = v29;
    }
    else
    {
      uint64_t v11 = v9;
    }
    os_log_type_t v13 = message;
  }
LABEL_14:

  return message;
}

void sub_183678204(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_framer_message_create_reply_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1;
}

void nw_framer_deallocate_metadata(uint64_t a1, void **a2)
{
  id v3 = *a2;
  if (*a2)
  {
    applier[0] = MEMORY[0x1E4F143A8];
    applier[1] = 3221225472;
    applier[2] = ___ZL29nw_framer_deallocate_metadataPU36objcproto25OS_nw_protocol_definition8NSObjectPv_block_invoke;
    applier[3] = &__block_descriptor_40_e37_B24__0r_8__NSObject_OS_xpc_object__16l;
    void applier[4] = a2;
    xpc_dictionary_apply(v3, applier);
    id v4 = *a2;
  }
  else
  {
    id v4 = 0;
  }
  *a2 = 0;

  uint64_t v5 = a2[1];
  a2[1] = 0;

  id v6 = a2[2];
  a2[2] = 0;

  id v7 = a2[3];
  a2[3] = 0;

  free(a2);
}

uint64_t ___ZL29nw_framer_deallocate_metadataPU36objcproto25OS_nw_protocol_definition8NSObjectPv_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t value = xpc_pointer_get_value();
  if (value)
  {
    uint64_t v5 = value;
    uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8);
    if (v6)
    {
      id v7 = nw_dictionary_copy_value(v6, a2);
      uint64_t v8 = v7;
      if (v7) {
        (*((void (**)(void *, uint64_t))v7 + 2))(v7, v5);
      }
    }
  }
  return 1;
}

void sub_18367837C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

nw_protocol *nw_framer_protocol_create(nw_protocol_identifier *a1, void *a2, void *a3, void *a4)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  id v8 = a2;
  id v9 = a3;
  id v10 = a4;
  uint64_t v11 = objc_alloc_init(NWConcrete_nw_framer);
  os_log_type_t v12 = v11;
  if (!v11)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v17 = (id)gLogObj;
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v29 = "nw_framer_protocol_create";
    os_log_type_t v18 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (__nwlog_fault(v18, &type, &v26))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v19 = (id)gLogObj;
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v19, type))
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v29 = "nw_framer_protocol_create";
          _os_log_impl(&dword_1830D4000, v19, v20, "%{public}s [nw_framer init] failed", buf, 0xCu);
        }
      }
      else if (v26)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v19 = (id)gLogObj;
        os_log_type_t v23 = type;
        BOOL v24 = os_log_type_enabled(v19, type);
        if (backtrace_string)
        {
          if (v24)
          {
            *(_DWORD *)int buf = 136446466;
            os_log_type_t v29 = "nw_framer_protocol_create";
            __int16 v30 = 2082;
            os_log_type_t v31 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v19, v23, "%{public}s [nw_framer init] failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          if (!v18) {
            goto LABEL_10;
          }
          goto LABEL_9;
        }
        if (v24)
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v29 = "nw_framer_protocol_create";
          _os_log_impl(&dword_1830D4000, v19, v23, "%{public}s [nw_framer init] failed, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v19 = (id)gLogObj;
        os_log_type_t v25 = type;
        if (os_log_type_enabled(v19, type))
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v29 = "nw_framer_protocol_create";
          _os_log_impl(&dword_1830D4000, v19, v25, "%{public}s [nw_framer init] failed, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
    if (!v18)
    {
LABEL_10:
      p_protocol = 0;
      goto LABEL_11;
    }
LABEL_9:
    free(v18);
    goto LABEL_10;
  }
  objc_storeStrong((id *)&v11->endpoint, a3);
  objc_storeStrong((id *)&v12->parameters, a4);
  os_log_type_t v13 = (OS_nw_context *)nw_parameters_copy_context(v10);
  context = v12->context;
  v12->context = v13;

  objc_storeStrong((id *)&v12->parent_definition, a2);
  p_protocol = &v12->protocol;
  v12->protocol.identifier = a1;
  v12->protocol.callbacks = &v12->callbacks;
  v12->inbound_frames.tqh_first = 0;
  v12->inbound_frames.tqh_last = &v12->inbound_frames.tqh_first;
  v12->outbound_frames.tqh_first = 0;
  v12->outbound_frames.tqh_last = &v12->outbound_frames.tqh_first;
  v12->pending_input_frames.tqh_first = 0;
  v12->pending_input_frames.tqh_last = &v12->pending_input_frames.tqh_first;
  v12->received_input_frames.tqh_first = 0;
  v12->received_input_frames.tqh_last = &v12->received_input_frames.tqh_first;
  v12->received_output_frames.tqh_first = 0;
  v12->received_output_frames.tqh_last = &v12->received_output_frames.tqh_first;
  v12->callbacks.input_finished = nw_protocol_default_input_finished;
  v12->callbacks.get_local_endpoint = nw_protocol_default_get_local;
  v12->callbacks.get_path = nw_protocol_default_get_path;
  v12->callbacks.updated_path = nw_protocol_default_updated_path;
  v12->callbacks.get_output_local_endpoint = nw_protocol_default_get_output_local;
  v12->callbacks.get_output_interface = nw_protocol_default_get_output_interface;
  v12->callbacks.error = nw_protocol_default_error;
  v12->callbacks.reset = nw_protocol_default_reset;
  v12->callbacks.register_notification = nw_protocol_default_register_notification;
  v12->callbacks.unregister_notification = nw_protocol_default_unregister_notification;
  v12->callbacks.notify = nw_protocol_default_notify;
  v12->callbacks.add_listen_handler = nw_protocol_default_add_listen_handler;
  v12->callbacks.remove_listen_handler = nw_protocol_default_remove_listen_handler;
  v12->callbacks.add_input_handler = nw_framer_protocol_add_input_handler;
  v12->callbacks.replace_input_handler = nw_framer_protocol_replace_input_handler;
  v12->callbacks.remove_input_handler = nw_framer_protocol_remove_input_handler;
  v12->callbacks.connect = nw_framer_protocol_connect;
  v12->callbacks.connected = nw_framer_protocol_connected;
  v12->callbacks.disconnect = nw_framer_protocol_disconnect;
  v12->callbacks.disconnected = nw_framer_protocol_disconnected;
  v12->callbacks.link_uint64_t state = nw_framer_protocol_link_state;
  v12->callbacks.get_message_properties = nw_framer_protocol_get_message_properties;
  v12->callbacks.supports_external_data = nw_framer_protocol_supports_external_data;
  v12->callbacks.waiting_for_output = nw_framer_protocol_waiting_for_output;
  v12->callbacks.get_output_frames = nw_framer_protocol_get_output_frames;
  v12->callbacks.finalize_output_frames = nw_framer_protocol_finalize_output_frames;
  v12->callbacks.input_available = nw_framer_protocol_input_available;
  v12->callbacks.get_input_frames = nw_framer_protocol_get_input_frames;
  v12->callbacks.input_flush = nw_framer_protocol_input_flush;
  v12->callbacks.output_available = nw_framer_protocol_output_available;
  v12->callbacks.output_finished = nw_framer_protocol_output_finished;
  v12->callbacks.copy_info = nw_framer_protocol_copy_info;
  v12->callbacks.get_remote_endpoint = nw_framer_protocol_get_remote_endpoint;
  v12->callbacks.get_parameters = nw_framer_protocol_get_parameters;
  os_log_type_t v16 = v12;
  v16->protocol.handle = v16;
LABEL_11:

  return p_protocol;
}

void sub_183678980(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id nw_framer_protocol_get_parameters(nw_protocol *a1)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    id v1 = a1->handle;
    nw_framer_t v2 = v1;
    if (v1)
    {
      if (v1[1])
      {
        nw_context_assert_queue(v1[46]);
        id v3 = v2[42];
        if (v3 && (v4 = v3[3]) != 0 && (uint64_t v5 = *(void (**)(void))(v4 + 112)) != 0)
        {
          v5();
          id v6 = (id)objc_claimAutoreleasedReturnValue();
        }
        else
        {
          id v6 = v2[45];
        }
        id v7 = v6;
LABEL_9:

        goto LABEL_10;
      }
      id v17 = __nwlog_obj();
      *(_DWORD *)int buf = 136446210;
      char v33 = "nw_framer_protocol_get_parameters";
      uint64_t v14 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v30 = 0;
      if (__nwlog_fault(v14, &type, &v30))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          os_log_type_t v15 = __nwlog_obj();
          os_log_type_t v18 = type;
          if (os_log_type_enabled(v15, type))
          {
            *(_DWORD *)int buf = 136446210;
            char v33 = "nw_framer_protocol_get_parameters";
            _os_log_impl(&dword_1830D4000, v15, v18, "%{public}s called with null framer->parent_definition", buf, 0xCu);
          }
LABEL_64:

          goto LABEL_65;
        }
        if (!v30)
        {
          os_log_type_t v15 = __nwlog_obj();
          os_log_type_t v29 = type;
          if (os_log_type_enabled(v15, type))
          {
            *(_DWORD *)int buf = 136446210;
            char v33 = "nw_framer_protocol_get_parameters";
            _os_log_impl(&dword_1830D4000, v15, v29, "%{public}s called with null framer->parent_definition, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_64;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v15 = __nwlog_obj();
        os_log_type_t v25 = type;
        BOOL v26 = os_log_type_enabled(v15, type);
        if (!backtrace_string)
        {
          if (v26)
          {
            *(_DWORD *)int buf = 136446210;
            char v33 = "nw_framer_protocol_get_parameters";
            _os_log_impl(&dword_1830D4000, v15, v25, "%{public}s called with null framer->parent_definition, no backtrace", buf, 0xCu);
          }
          goto LABEL_64;
        }
        if (v26)
        {
          *(_DWORD *)int buf = 136446466;
          char v33 = "nw_framer_protocol_get_parameters";
          __int16 v34 = 2082;
          uint64_t v35 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v15, v25, "%{public}s called with null framer->parent_definition, dumping backtrace:%{public}s", buf, 0x16u);
        }
        goto LABEL_43;
      }
    }
    else
    {
      os_log_type_t v13 = __nwlog_obj();
      *(_DWORD *)int buf = 136446210;
      char v33 = "nw_framer_protocol_get_parameters";
      uint64_t v14 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v30 = 0;
      if (__nwlog_fault(v14, &type, &v30))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          os_log_type_t v15 = __nwlog_obj();
          os_log_type_t v16 = type;
          if (os_log_type_enabled(v15, type))
          {
            *(_DWORD *)int buf = 136446210;
            char v33 = "nw_framer_protocol_get_parameters";
            _os_log_impl(&dword_1830D4000, v15, v16, "%{public}s called with null framer", buf, 0xCu);
          }
          goto LABEL_64;
        }
        if (!v30)
        {
          os_log_type_t v15 = __nwlog_obj();
          os_log_type_t v28 = type;
          if (os_log_type_enabled(v15, type))
          {
            *(_DWORD *)int buf = 136446210;
            char v33 = "nw_framer_protocol_get_parameters";
            _os_log_impl(&dword_1830D4000, v15, v28, "%{public}s called with null framer, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_64;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v15 = __nwlog_obj();
        os_log_type_t v23 = type;
        BOOL v24 = os_log_type_enabled(v15, type);
        if (!backtrace_string)
        {
          if (v24)
          {
            *(_DWORD *)int buf = 136446210;
            char v33 = "nw_framer_protocol_get_parameters";
            _os_log_impl(&dword_1830D4000, v15, v23, "%{public}s called with null framer, no backtrace", buf, 0xCu);
          }
          goto LABEL_64;
        }
        if (v24)
        {
          *(_DWORD *)int buf = 136446466;
          char v33 = "nw_framer_protocol_get_parameters";
          __int16 v34 = 2082;
          uint64_t v35 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v15, v23, "%{public}s called with null framer, dumping backtrace:%{public}s", buf, 0x16u);
        }
LABEL_43:

        free(backtrace_string);
      }
    }
LABEL_65:
    if (v14) {
      free(v14);
    }
    id v7 = 0;
    goto LABEL_9;
  }
  id v9 = __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  char v33 = "nw_framer_protocol_get_parameters";
  id v10 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v30 = 0;
  if (__nwlog_fault(v10, &type, &v30))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)int buf = 136446210;
        char v33 = "nw_framer_protocol_get_parameters";
        _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s called with null protocol", buf, 0xCu);
      }
    }
    else if (v30)
    {
      os_log_type_t v19 = (char *)__nw_create_backtrace_string();
      uint64_t v11 = __nwlog_obj();
      os_log_type_t v20 = type;
      BOOL v21 = os_log_type_enabled(v11, type);
      if (v19)
      {
        if (v21)
        {
          *(_DWORD *)int buf = 136446466;
          char v33 = "nw_framer_protocol_get_parameters";
          __int16 v34 = 2082;
          uint64_t v35 = v19;
          _os_log_impl(&dword_1830D4000, v11, v20, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v19);
        goto LABEL_56;
      }
      if (v21)
      {
        *(_DWORD *)int buf = 136446210;
        char v33 = "nw_framer_protocol_get_parameters";
        _os_log_impl(&dword_1830D4000, v11, v20, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v11 = __nwlog_obj();
      os_log_type_t v27 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)int buf = 136446210;
        char v33 = "nw_framer_protocol_get_parameters";
        _os_log_impl(&dword_1830D4000, v11, v27, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_56:
  if (v10) {
    free(v10);
  }
  id v7 = 0;
LABEL_10:

  return v7;
}

void sub_183679098(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id nw_framer_protocol_get_remote_endpoint(nw_protocol *a1)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    nw_framer_t v2 = a1->handle;
    id v3 = (char *)v2;
    if (v2)
    {
      if (v2[1])
      {
        uint64_t default_input_handler = a1->default_input_handler;
        if (default_input_handler
          && (callbacks = default_input_handler->callbacks) != 0
          && (get_remote_endpoint = (void (*)(void))callbacks->get_remote_endpoint) != 0)
        {
          id v7 = get_remote_endpoint();
        }
        else
        {
          id v7 = 0;
        }
        if (gLogDatapath)
        {
          os_log_type_t v19 = __nwlog_obj();
          if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)int buf = 136446722;
            __int16 v34 = "nw_framer_protocol_get_remote_endpoint";
            __int16 v35 = 2080;
            uint64_t v36 = v3 + 609;
            __int16 v37 = 2112;
            uint64_t v38 = v7;
            _os_log_impl(&dword_1830D4000, v19, OS_LOG_TYPE_DEBUG, "%{public}s %s returning remote endpoint: %@", buf, 0x20u);
          }
        }
LABEL_9:

        goto LABEL_10;
      }
      id v17 = __nwlog_obj();
      *(_DWORD *)int buf = 136446210;
      __int16 v34 = "nw_framer_protocol_get_remote_endpoint";
      uint64_t v14 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v31 = 0;
      if (__nwlog_fault(v14, &type, &v31))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          os_log_type_t v15 = __nwlog_obj();
          os_log_type_t v18 = type;
          if (os_log_type_enabled(v15, type))
          {
            *(_DWORD *)int buf = 136446210;
            __int16 v34 = "nw_framer_protocol_get_remote_endpoint";
            _os_log_impl(&dword_1830D4000, v15, v18, "%{public}s called with null framer->parent_definition", buf, 0xCu);
          }
LABEL_67:

          goto LABEL_68;
        }
        if (!v31)
        {
          os_log_type_t v15 = __nwlog_obj();
          os_log_type_t v30 = type;
          if (os_log_type_enabled(v15, type))
          {
            *(_DWORD *)int buf = 136446210;
            __int16 v34 = "nw_framer_protocol_get_remote_endpoint";
            _os_log_impl(&dword_1830D4000, v15, v30, "%{public}s called with null framer->parent_definition, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_67;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v15 = __nwlog_obj();
        os_log_type_t v26 = type;
        BOOL v27 = os_log_type_enabled(v15, type);
        if (!backtrace_string)
        {
          if (v27)
          {
            *(_DWORD *)int buf = 136446210;
            __int16 v34 = "nw_framer_protocol_get_remote_endpoint";
            _os_log_impl(&dword_1830D4000, v15, v26, "%{public}s called with null framer->parent_definition, no backtrace", buf, 0xCu);
          }
          goto LABEL_67;
        }
        if (v27)
        {
          *(_DWORD *)int buf = 136446466;
          __int16 v34 = "nw_framer_protocol_get_remote_endpoint";
          __int16 v35 = 2082;
          uint64_t v36 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v15, v26, "%{public}s called with null framer->parent_definition, dumping backtrace:%{public}s", buf, 0x16u);
        }
        goto LABEL_46;
      }
    }
    else
    {
      os_log_type_t v13 = __nwlog_obj();
      *(_DWORD *)int buf = 136446210;
      __int16 v34 = "nw_framer_protocol_get_remote_endpoint";
      uint64_t v14 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v31 = 0;
      if (__nwlog_fault(v14, &type, &v31))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          os_log_type_t v15 = __nwlog_obj();
          os_log_type_t v16 = type;
          if (os_log_type_enabled(v15, type))
          {
            *(_DWORD *)int buf = 136446210;
            __int16 v34 = "nw_framer_protocol_get_remote_endpoint";
            _os_log_impl(&dword_1830D4000, v15, v16, "%{public}s called with null framer", buf, 0xCu);
          }
          goto LABEL_67;
        }
        if (!v31)
        {
          os_log_type_t v15 = __nwlog_obj();
          os_log_type_t v29 = type;
          if (os_log_type_enabled(v15, type))
          {
            *(_DWORD *)int buf = 136446210;
            __int16 v34 = "nw_framer_protocol_get_remote_endpoint";
            _os_log_impl(&dword_1830D4000, v15, v29, "%{public}s called with null framer, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_67;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v15 = __nwlog_obj();
        os_log_type_t v24 = type;
        BOOL v25 = os_log_type_enabled(v15, type);
        if (!backtrace_string)
        {
          if (v25)
          {
            *(_DWORD *)int buf = 136446210;
            __int16 v34 = "nw_framer_protocol_get_remote_endpoint";
            _os_log_impl(&dword_1830D4000, v15, v24, "%{public}s called with null framer, no backtrace", buf, 0xCu);
          }
          goto LABEL_67;
        }
        if (v25)
        {
          *(_DWORD *)int buf = 136446466;
          __int16 v34 = "nw_framer_protocol_get_remote_endpoint";
          __int16 v35 = 2082;
          uint64_t v36 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v15, v24, "%{public}s called with null framer, dumping backtrace:%{public}s", buf, 0x16u);
        }
LABEL_46:

        free(backtrace_string);
      }
    }
LABEL_68:
    if (v14) {
      free(v14);
    }
    id v7 = 0;
    goto LABEL_9;
  }
  id v9 = __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  __int16 v34 = "nw_framer_protocol_get_remote_endpoint";
  id v10 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v31 = 0;
  if (__nwlog_fault(v10, &type, &v31))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v34 = "nw_framer_protocol_get_remote_endpoint";
        _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s called with null protocol", buf, 0xCu);
      }
    }
    else if (v31)
    {
      os_log_type_t v20 = (char *)__nw_create_backtrace_string();
      uint64_t v11 = __nwlog_obj();
      os_log_type_t v21 = type;
      BOOL v22 = os_log_type_enabled(v11, type);
      if (v20)
      {
        if (v22)
        {
          *(_DWORD *)int buf = 136446466;
          __int16 v34 = "nw_framer_protocol_get_remote_endpoint";
          __int16 v35 = 2082;
          uint64_t v36 = v20;
          _os_log_impl(&dword_1830D4000, v11, v21, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v20);
        goto LABEL_59;
      }
      if (v22)
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v34 = "nw_framer_protocol_get_remote_endpoint";
        _os_log_impl(&dword_1830D4000, v11, v21, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v11 = __nwlog_obj();
      os_log_type_t v28 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v34 = "nw_framer_protocol_get_remote_endpoint";
        _os_log_impl(&dword_1830D4000, v11, v28, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_59:
  if (v10) {
    free(v10);
  }
  id v7 = 0;
LABEL_10:

  return v7;
}

void sub_183679820(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_framer_protocol_copy_info(uint64_t a1, int a2)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v4 = *(id *)(a1 + 40);
    id v5 = v4;
    if (v4)
    {
      if (v4[1])
      {
        if (a2 == 254)
        {
          if (v4[56] && v4[57])
          {
            uint64_t v11 = *(void *)(a1 + 32);
            if (!v11
              || (uint64_t v12 = *(void *)(v11 + 24)) == 0
              || (os_log_type_t v13 = *(uint64_t (**)(void))(v12 + 224)) == 0
              || (uint64_t v9 = v13()) == 0)
            {
              uint64_t v9 = nw_array_create();
            }
            uint64_t v14 = nw_protocol_establishment_report_create(*((void **)v5 + 1), *((void *)v5 + 56), *((void *)v5 + 57));
            goto LABEL_28;
          }
        }
        else if (a2 == 255)
        {
          if ((v4[76] & 0x10) == 0)
          {
            uint64_t v6 = *(void *)(a1 + 32);
            if (v6)
            {
              uint64_t v7 = *(void *)(v6 + 24);
              if (v7)
              {
                id v8 = *(uint64_t (**)(void))(v7 + 224);
                if (v8)
                {
                  uint64_t v9 = v8();
                  uint64_t v10 = *((void *)v5 + 55);
                  if (!v10) {
                    goto LABEL_30;
                  }
                  goto LABEL_25;
                }
              }
            }
          }
          uint64_t v9 = 0;
          uint64_t v10 = *((void *)v5 + 55);
          if (v10)
          {
LABEL_25:
            uint64_t v14 = (*(void (**)(uint64_t, id))(v10 + 16))(v10, v5);
            if (!v14)
            {
LABEL_29:

              goto LABEL_30;
            }
            if (!v9) {
              uint64_t v9 = nw_array_create();
            }
LABEL_28:
            nw_array_append(v9, v14);
            goto LABEL_29;
          }
LABEL_30:

          return v9;
        }
        uint64_t v15 = *(void *)(a1 + 32);
        if (v15)
        {
          uint64_t v16 = *(void *)(v15 + 24);
          if (v16)
          {
            id v17 = *(uint64_t (**)(void))(v16 + 224);
            if (v17)
            {
              uint64_t v9 = v17();
              goto LABEL_30;
            }
          }
        }
LABEL_85:
        uint64_t v9 = 0;
        goto LABEL_30;
      }
      BOOL v27 = __nwlog_obj();
      *(_DWORD *)int buf = 136446210;
      uint64_t v43 = "nw_framer_protocol_copy_info";
      os_log_type_t v24 = (void *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v40 = 0;
      if (!__nwlog_fault((const char *)v24, &type, &v40))
      {
LABEL_83:
        if (v24) {
          free(v24);
        }
        goto LABEL_85;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        BOOL v25 = __nwlog_obj();
        os_log_type_t v28 = type;
        if (os_log_type_enabled(v25, type))
        {
          *(_DWORD *)int buf = 136446210;
          uint64_t v43 = "nw_framer_protocol_copy_info";
          _os_log_impl(&dword_1830D4000, v25, v28, "%{public}s called with null framer->parent_definition", buf, 0xCu);
        }
LABEL_82:

        goto LABEL_83;
      }
      if (!v40)
      {
        BOOL v25 = __nwlog_obj();
        os_log_type_t v39 = type;
        if (os_log_type_enabled(v25, type))
        {
          *(_DWORD *)int buf = 136446210;
          uint64_t v43 = "nw_framer_protocol_copy_info";
          _os_log_impl(&dword_1830D4000, v25, v39, "%{public}s called with null framer->parent_definition, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_82;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v25 = __nwlog_obj();
      os_log_type_t v35 = type;
      BOOL v36 = os_log_type_enabled(v25, type);
      if (!backtrace_string)
      {
        if (v36)
        {
          *(_DWORD *)int buf = 136446210;
          uint64_t v43 = "nw_framer_protocol_copy_info";
          _os_log_impl(&dword_1830D4000, v25, v35, "%{public}s called with null framer->parent_definition, no backtrace", buf, 0xCu);
        }
        goto LABEL_82;
      }
      if (v36)
      {
        *(_DWORD *)int buf = 136446466;
        uint64_t v43 = "nw_framer_protocol_copy_info";
        __int16 v44 = 2082;
        uint64_t v45 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v25, v35, "%{public}s called with null framer->parent_definition, dumping backtrace:%{public}s", buf, 0x16u);
      }
    }
    else
    {
      os_log_type_t v23 = __nwlog_obj();
      *(_DWORD *)int buf = 136446210;
      uint64_t v43 = "nw_framer_protocol_copy_info";
      os_log_type_t v24 = (void *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v40 = 0;
      if (!__nwlog_fault((const char *)v24, &type, &v40)) {
        goto LABEL_83;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        BOOL v25 = __nwlog_obj();
        os_log_type_t v26 = type;
        if (os_log_type_enabled(v25, type))
        {
          *(_DWORD *)int buf = 136446210;
          uint64_t v43 = "nw_framer_protocol_copy_info";
          _os_log_impl(&dword_1830D4000, v25, v26, "%{public}s called with null framer", buf, 0xCu);
        }
        goto LABEL_82;
      }
      if (!v40)
      {
        BOOL v25 = __nwlog_obj();
        os_log_type_t v38 = type;
        if (os_log_type_enabled(v25, type))
        {
          *(_DWORD *)int buf = 136446210;
          uint64_t v43 = "nw_framer_protocol_copy_info";
          _os_log_impl(&dword_1830D4000, v25, v38, "%{public}s called with null framer, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_82;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v25 = __nwlog_obj();
      os_log_type_t v33 = type;
      BOOL v34 = os_log_type_enabled(v25, type);
      if (!backtrace_string)
      {
        if (v34)
        {
          *(_DWORD *)int buf = 136446210;
          uint64_t v43 = "nw_framer_protocol_copy_info";
          _os_log_impl(&dword_1830D4000, v25, v33, "%{public}s called with null framer, no backtrace", buf, 0xCu);
        }
        goto LABEL_82;
      }
      if (v34)
      {
        *(_DWORD *)int buf = 136446466;
        uint64_t v43 = "nw_framer_protocol_copy_info";
        __int16 v44 = 2082;
        uint64_t v45 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v25, v33, "%{public}s called with null framer, dumping backtrace:%{public}s", buf, 0x16u);
      }
    }

    free(backtrace_string);
    goto LABEL_83;
  }
  os_log_type_t v19 = __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  uint64_t v43 = "nw_framer_protocol_copy_info";
  os_log_type_t v20 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v40 = 0;
  if (__nwlog_fault(v20, &type, &v40))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v21 = __nwlog_obj();
      os_log_type_t v22 = type;
      if (os_log_type_enabled(v21, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v43 = "nw_framer_protocol_copy_info";
        _os_log_impl(&dword_1830D4000, v21, v22, "%{public}s called with null protocol", buf, 0xCu);
      }
    }
    else if (v40)
    {
      os_log_type_t v29 = (char *)__nw_create_backtrace_string();
      os_log_type_t v21 = __nwlog_obj();
      os_log_type_t v30 = type;
      BOOL v31 = os_log_type_enabled(v21, type);
      if (v29)
      {
        if (v31)
        {
          *(_DWORD *)int buf = 136446466;
          uint64_t v43 = "nw_framer_protocol_copy_info";
          __int16 v44 = 2082;
          uint64_t v45 = v29;
          _os_log_impl(&dword_1830D4000, v21, v30, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v29);
        goto LABEL_74;
      }
      if (v31)
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v43 = "nw_framer_protocol_copy_info";
        _os_log_impl(&dword_1830D4000, v21, v30, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v21 = __nwlog_obj();
      os_log_type_t v37 = type;
      if (os_log_type_enabled(v21, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v43 = "nw_framer_protocol_copy_info";
        _os_log_impl(&dword_1830D4000, v21, v37, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_74:
  if (v20) {
    free(v20);
  }
  return 0;
}

void sub_18367A000(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_framer_protocol_output_finished(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    nw_framer_t v2 = a1->handle;
    id v3 = (char *)v2;
    if (v2)
    {
      if (v2[1])
      {
        uint64_t v4 = v2[69];
        if (v4 && *(void *)(v4 + 16) != *(void *)(v4 + 24))
        {
          *((unsigned char *)v2 + 607) |= 0x40u;
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          id v5 = (id)gLogObj;
          if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)int buf = 136446466;
            uint64_t v54 = "nw_framer_protocol_output_finished";
            __int16 v55 = 2080;
            dispatch_data_t v56 = v3 + 609;
            _os_log_impl(&dword_1830D4000, v5, OS_LOG_TYPE_INFO, "%{public}s %s Data pending in output_data_array, delaying output_finished", buf, 0x16u);
          }

          goto LABEL_13;
        }
        uint64_t v6 = v2[40];
        if (v6)
        {
          uint64_t v7 = *(void *)(v6 + 24);
          if (v7)
          {
            id v8 = *(void (**)(void))(v7 + 192);
            if (v8)
            {
              v8();
LABEL_13:

              return;
            }
          }
        }
        uint64_t v9 = __nwlog_obj();
        uint64_t v10 = *((void *)v3 + 40);
        uint64_t v11 = "invalid";
        if (v10)
        {
          uint64_t v12 = *(const char **)(v10 + 16);
          if (v12) {
            uint64_t v11 = v12;
          }
        }
        *(_DWORD *)int buf = 136446466;
        uint64_t v54 = "nw_framer_protocol_output_finished";
        __int16 v55 = 2082;
        dispatch_data_t v56 = (char *)v11;
        os_log_type_t v13 = (char *)_os_log_send_and_compose_impl();

        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v51 = 0;
        if (!__nwlog_fault(v13, &type, &v51)) {
          goto LABEL_97;
        }
        if (type == OS_LOG_TYPE_FAULT)
        {
          uint64_t v14 = __nwlog_obj();
          os_log_type_t v15 = type;
          if (os_log_type_enabled(v14, type))
          {
            uint64_t v16 = *((void *)v3 + 40);
            id v17 = "invalid";
            if (v16)
            {
              os_log_type_t v18 = *(const char **)(v16 + 16);
              if (v18) {
                id v17 = v18;
              }
            }
            *(_DWORD *)int buf = 136446466;
            uint64_t v54 = "nw_framer_protocol_output_finished";
            __int16 v55 = 2082;
            dispatch_data_t v56 = (char *)v17;
            _os_log_impl(&dword_1830D4000, v14, v15, "%{public}s protocol %{public}s has invalid output_finished callback", buf, 0x16u);
          }
        }
        else if (v51)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          uint64_t v14 = __nwlog_obj();
          os_log_type_t v28 = type;
          BOOL v29 = os_log_type_enabled(v14, type);
          if (backtrace_string)
          {
            if (v29)
            {
              uint64_t v30 = *((void *)v3 + 40);
              BOOL v31 = "invalid";
              if (v30)
              {
                uint64_t v32 = *(const char **)(v30 + 16);
                if (v32) {
                  BOOL v31 = v32;
                }
              }
              *(_DWORD *)int buf = 136446722;
              uint64_t v54 = "nw_framer_protocol_output_finished";
              __int16 v55 = 2082;
              dispatch_data_t v56 = (char *)v31;
              __int16 v57 = 2082;
              BOOL v58 = backtrace_string;
              _os_log_impl(&dword_1830D4000, v14, v28, "%{public}s protocol %{public}s has invalid output_finished callback, dumping backtrace:%{public}s", buf, 0x20u);
            }

            free(backtrace_string);
LABEL_97:
            if (!v13) {
              goto LABEL_13;
            }
LABEL_98:
            free(v13);
            goto LABEL_13;
          }
          if (v29)
          {
            uint64_t v45 = *((void *)v3 + 40);
            uint64_t v46 = "invalid";
            if (v45)
            {
              uint64_t v47 = *(const char **)(v45 + 16);
              if (v47) {
                uint64_t v46 = v47;
              }
            }
            *(_DWORD *)int buf = 136446466;
            uint64_t v54 = "nw_framer_protocol_output_finished";
            __int16 v55 = 2082;
            dispatch_data_t v56 = (char *)v46;
            _os_log_impl(&dword_1830D4000, v14, v28, "%{public}s protocol %{public}s has invalid output_finished callback, no backtrace", buf, 0x16u);
          }
        }
        else
        {
          uint64_t v14 = __nwlog_obj();
          os_log_type_t v41 = type;
          if (os_log_type_enabled(v14, type))
          {
            uint64_t v42 = *((void *)v3 + 40);
            uint64_t v43 = "invalid";
            if (v42)
            {
              __int16 v44 = *(const char **)(v42 + 16);
              if (v44) {
                uint64_t v43 = v44;
              }
            }
            *(_DWORD *)int buf = 136446466;
            uint64_t v54 = "nw_framer_protocol_output_finished";
            __int16 v55 = 2082;
            dispatch_data_t v56 = (char *)v43;
            _os_log_impl(&dword_1830D4000, v14, v41, "%{public}s protocol %{public}s has invalid output_finished callback, backtrace limit exceeded", buf, 0x16u);
          }
        }
LABEL_96:

        goto LABEL_97;
      }
      BOOL v25 = __nwlog_obj();
      *(_DWORD *)int buf = 136446210;
      uint64_t v54 = "nw_framer_protocol_output_finished";
      os_log_type_t v13 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v51 = 0;
      if (!__nwlog_fault(v13, &type, &v51)) {
        goto LABEL_97;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v14 = __nwlog_obj();
        os_log_type_t v26 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)int buf = 136446210;
          uint64_t v54 = "nw_framer_protocol_output_finished";
          _os_log_impl(&dword_1830D4000, v14, v26, "%{public}s called with null framer->parent_definition", buf, 0xCu);
        }
        goto LABEL_96;
      }
      if (!v51)
      {
        uint64_t v14 = __nwlog_obj();
        os_log_type_t v50 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)int buf = 136446210;
          uint64_t v54 = "nw_framer_protocol_output_finished";
          _os_log_impl(&dword_1830D4000, v14, v50, "%{public}s called with null framer->parent_definition, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_96;
      }
      BOOL v36 = (char *)__nw_create_backtrace_string();
      uint64_t v14 = __nwlog_obj();
      os_log_type_t v39 = type;
      BOOL v40 = os_log_type_enabled(v14, type);
      if (!v36)
      {
        if (v40)
        {
          *(_DWORD *)int buf = 136446210;
          uint64_t v54 = "nw_framer_protocol_output_finished";
          _os_log_impl(&dword_1830D4000, v14, v39, "%{public}s called with null framer->parent_definition, no backtrace", buf, 0xCu);
        }
        goto LABEL_96;
      }
      if (v40)
      {
        *(_DWORD *)int buf = 136446466;
        uint64_t v54 = "nw_framer_protocol_output_finished";
        __int16 v55 = 2082;
        dispatch_data_t v56 = v36;
        _os_log_impl(&dword_1830D4000, v14, v39, "%{public}s called with null framer->parent_definition, dumping backtrace:%{public}s", buf, 0x16u);
      }
    }
    else
    {
      os_log_type_t v23 = __nwlog_obj();
      *(_DWORD *)int buf = 136446210;
      uint64_t v54 = "nw_framer_protocol_output_finished";
      os_log_type_t v13 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v51 = 0;
      if (!__nwlog_fault(v13, &type, &v51)) {
        goto LABEL_97;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v14 = __nwlog_obj();
        os_log_type_t v24 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)int buf = 136446210;
          uint64_t v54 = "nw_framer_protocol_output_finished";
          _os_log_impl(&dword_1830D4000, v14, v24, "%{public}s called with null framer", buf, 0xCu);
        }
        goto LABEL_96;
      }
      if (!v51)
      {
        uint64_t v14 = __nwlog_obj();
        os_log_type_t v49 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)int buf = 136446210;
          uint64_t v54 = "nw_framer_protocol_output_finished";
          _os_log_impl(&dword_1830D4000, v14, v49, "%{public}s called with null framer, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_96;
      }
      BOOL v36 = (char *)__nw_create_backtrace_string();
      uint64_t v14 = __nwlog_obj();
      os_log_type_t v37 = type;
      BOOL v38 = os_log_type_enabled(v14, type);
      if (!v36)
      {
        if (v38)
        {
          *(_DWORD *)int buf = 136446210;
          uint64_t v54 = "nw_framer_protocol_output_finished";
          _os_log_impl(&dword_1830D4000, v14, v37, "%{public}s called with null framer, no backtrace", buf, 0xCu);
        }
        goto LABEL_96;
      }
      if (v38)
      {
        *(_DWORD *)int buf = 136446466;
        uint64_t v54 = "nw_framer_protocol_output_finished";
        __int16 v55 = 2082;
        dispatch_data_t v56 = v36;
        _os_log_impl(&dword_1830D4000, v14, v37, "%{public}s called with null framer, dumping backtrace:%{public}s", buf, 0x16u);
      }
    }

    free(v36);
    if (!v13) {
      goto LABEL_13;
    }
    goto LABEL_98;
  }
  os_log_type_t v19 = __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  uint64_t v54 = "nw_framer_protocol_output_finished";
  os_log_type_t v20 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v51 = 0;
  if (__nwlog_fault(v20, &type, &v51))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v21 = __nwlog_obj();
      os_log_type_t v22 = type;
      if (os_log_type_enabled(v21, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v54 = "nw_framer_protocol_output_finished";
        _os_log_impl(&dword_1830D4000, v21, v22, "%{public}s called with null protocol", buf, 0xCu);
      }
    }
    else if (v51)
    {
      os_log_type_t v33 = (char *)__nw_create_backtrace_string();
      os_log_type_t v21 = __nwlog_obj();
      os_log_type_t v34 = type;
      BOOL v35 = os_log_type_enabled(v21, type);
      if (v33)
      {
        if (v35)
        {
          *(_DWORD *)int buf = 136446466;
          uint64_t v54 = "nw_framer_protocol_output_finished";
          __int16 v55 = 2082;
          dispatch_data_t v56 = v33;
          _os_log_impl(&dword_1830D4000, v21, v34, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v33);
        goto LABEL_89;
      }
      if (v35)
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v54 = "nw_framer_protocol_output_finished";
        _os_log_impl(&dword_1830D4000, v21, v34, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v21 = __nwlog_obj();
      os_log_type_t v48 = type;
      if (os_log_type_enabled(v21, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v54 = "nw_framer_protocol_output_finished";
        _os_log_impl(&dword_1830D4000, v21, v48, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_89:
  if (v20) {
    free(v20);
  }
}

void sub_18367AA48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_framer_protocol_output_available(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    nw_framer_t v2 = a1->handle;
    id v3 = v2;
    if (v2)
    {
      if (v2[1])
      {
        if ((v2[76] & 2) == 0)
        {
          *((unsigned char *)v2 + 608) &= ~0x40u;
          if (!nw_framer_flush_output(v2, 0)) {
            goto LABEL_14;
          }
          uint64_t v4 = v3[42];
          if (!v4) {
            goto LABEL_14;
          }
          uint64_t v5 = *(void *)(v4 + 24);
          if (!v5) {
            goto LABEL_14;
          }
          uint64_t v6 = *(void (**)(void))(v5 + 72);
          if (!v6) {
            goto LABEL_14;
          }
          goto LABEL_13;
        }
        uint64_t v7 = v2[42];
        if (v7)
        {
          uint64_t v8 = *(void *)(v7 + 24);
          if (v8)
          {
            uint64_t v6 = *(void (**)(void))(v8 + 72);
            if (v6)
            {
LABEL_13:
              v6();
LABEL_14:

              return;
            }
          }
        }
        uint64_t v9 = __nwlog_obj();
        uint64_t v10 = v3[42];
        uint64_t v11 = "invalid";
        if (v10)
        {
          uint64_t v12 = *(const char **)(v10 + 16);
          if (v12) {
            uint64_t v11 = v12;
          }
        }
        *(_DWORD *)int buf = 136446466;
        __int16 v55 = "nw_framer_protocol_output_available";
        __int16 v56 = 2082;
        __int16 v57 = (void *)v11;
        os_log_type_t v13 = (char *)_os_log_send_and_compose_impl();

        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v52 = 0;
        if (!__nwlog_fault(v13, &type, &v52)) {
          goto LABEL_99;
        }
        if (type == OS_LOG_TYPE_FAULT)
        {
          uint64_t v14 = __nwlog_obj();
          os_log_type_t v15 = type;
          if (os_log_type_enabled(v14, type))
          {
            uint64_t v16 = v3[42];
            id v17 = "invalid";
            if (v16)
            {
              os_log_type_t v18 = *(const char **)(v16 + 16);
              if (v18) {
                id v17 = v18;
              }
            }
            *(_DWORD *)int buf = 136446466;
            __int16 v55 = "nw_framer_protocol_output_available";
            __int16 v56 = 2082;
            __int16 v57 = (void *)v17;
            _os_log_impl(&dword_1830D4000, v14, v15, "%{public}s protocol %{public}s has invalid output_available callback", buf, 0x16u);
          }
        }
        else if (v52)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          uint64_t v14 = __nwlog_obj();
          os_log_type_t v28 = type;
          BOOL v29 = os_log_type_enabled(v14, type);
          if (backtrace_string)
          {
            if (v29)
            {
              uint64_t v30 = v3[42];
              BOOL v31 = "invalid";
              if (v30)
              {
                uint64_t v32 = *(const char **)(v30 + 16);
                if (v32) {
                  BOOL v31 = v32;
                }
              }
              *(_DWORD *)int buf = 136446722;
              __int16 v55 = "nw_framer_protocol_output_available";
              __int16 v56 = 2082;
              __int16 v57 = (void *)v31;
              __int16 v58 = 2082;
              uint64_t v59 = backtrace_string;
              _os_log_impl(&dword_1830D4000, v14, v28, "%{public}s protocol %{public}s has invalid output_available callback, dumping backtrace:%{public}s", buf, 0x20u);
            }

            free(backtrace_string);
            if (!v13) {
              goto LABEL_14;
            }
            goto LABEL_100;
          }
          if (v29)
          {
            uint64_t v49 = v3[42];
            os_log_type_t v50 = "invalid";
            if (v49)
            {
              char v51 = *(const char **)(v49 + 16);
              if (v51) {
                os_log_type_t v50 = v51;
              }
            }
            *(_DWORD *)int buf = 136446466;
            __int16 v55 = "nw_framer_protocol_output_available";
            __int16 v56 = 2082;
            __int16 v57 = (void *)v50;
            _os_log_impl(&dword_1830D4000, v14, v28, "%{public}s protocol %{public}s has invalid output_available callback, no backtrace", buf, 0x16u);
          }
        }
        else
        {
          uint64_t v14 = __nwlog_obj();
          os_log_type_t v42 = type;
          if (os_log_type_enabled(v14, type))
          {
            uint64_t v43 = v3[42];
            __int16 v44 = "invalid";
            if (v43)
            {
              uint64_t v45 = *(const char **)(v43 + 16);
              if (v45) {
                __int16 v44 = v45;
              }
            }
            *(_DWORD *)int buf = 136446466;
            __int16 v55 = "nw_framer_protocol_output_available";
            __int16 v56 = 2082;
            __int16 v57 = (void *)v44;
            _os_log_impl(&dword_1830D4000, v14, v42, "%{public}s protocol %{public}s has invalid output_available callback, backtrace limit exceeded", buf, 0x16u);
          }
        }
      }
      else
      {
        BOOL v25 = __nwlog_obj();
        *(_DWORD *)int buf = 136446210;
        __int16 v55 = "nw_framer_protocol_output_available";
        os_log_type_t v13 = (char *)_os_log_send_and_compose_impl();

        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v52 = 0;
        if (!__nwlog_fault(v13, &type, &v52)) {
          goto LABEL_99;
        }
        if (type == OS_LOG_TYPE_FAULT)
        {
          uint64_t v14 = __nwlog_obj();
          os_log_type_t v26 = type;
          if (os_log_type_enabled(v14, type))
          {
            *(_DWORD *)int buf = 136446210;
            __int16 v55 = "nw_framer_protocol_output_available";
            _os_log_impl(&dword_1830D4000, v14, v26, "%{public}s called with null framer->parent_definition", buf, 0xCu);
          }
        }
        else if (v52)
        {
          os_log_type_t v39 = (char *)__nw_create_backtrace_string();
          uint64_t v14 = __nwlog_obj();
          os_log_type_t v40 = type;
          BOOL v41 = os_log_type_enabled(v14, type);
          if (v39)
          {
            if (v41)
            {
              *(_DWORD *)int buf = 136446466;
              __int16 v55 = "nw_framer_protocol_output_available";
              __int16 v56 = 2082;
              __int16 v57 = v39;
              _os_log_impl(&dword_1830D4000, v14, v40, "%{public}s called with null framer->parent_definition, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(v39);
            if (!v13) {
              goto LABEL_14;
            }
            goto LABEL_100;
          }
          if (v41)
          {
            *(_DWORD *)int buf = 136446210;
            __int16 v55 = "nw_framer_protocol_output_available";
            _os_log_impl(&dword_1830D4000, v14, v40, "%{public}s called with null framer->parent_definition, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          uint64_t v14 = __nwlog_obj();
          os_log_type_t v48 = type;
          if (os_log_type_enabled(v14, type))
          {
            *(_DWORD *)int buf = 136446210;
            __int16 v55 = "nw_framer_protocol_output_available";
            _os_log_impl(&dword_1830D4000, v14, v48, "%{public}s called with null framer->parent_definition, backtrace limit exceeded", buf, 0xCu);
          }
        }
      }
    }
    else
    {
      os_log_type_t v23 = __nwlog_obj();
      *(_DWORD *)int buf = 136446210;
      __int16 v55 = "nw_framer_protocol_output_available";
      os_log_type_t v13 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v52 = 0;
      if (!__nwlog_fault(v13, &type, &v52)) {
        goto LABEL_99;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v14 = __nwlog_obj();
        os_log_type_t v24 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)int buf = 136446210;
          __int16 v55 = "nw_framer_protocol_output_available";
          _os_log_impl(&dword_1830D4000, v14, v24, "%{public}s called with null framer", buf, 0xCu);
        }
      }
      else if (v52)
      {
        BOOL v36 = (char *)__nw_create_backtrace_string();
        uint64_t v14 = __nwlog_obj();
        os_log_type_t v37 = type;
        BOOL v38 = os_log_type_enabled(v14, type);
        if (v36)
        {
          if (v38)
          {
            *(_DWORD *)int buf = 136446466;
            __int16 v55 = "nw_framer_protocol_output_available";
            __int16 v56 = 2082;
            __int16 v57 = v36;
            _os_log_impl(&dword_1830D4000, v14, v37, "%{public}s called with null framer, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v36);
LABEL_99:
          if (!v13) {
            goto LABEL_14;
          }
LABEL_100:
          free(v13);
          goto LABEL_14;
        }
        if (v38)
        {
          *(_DWORD *)int buf = 136446210;
          __int16 v55 = "nw_framer_protocol_output_available";
          _os_log_impl(&dword_1830D4000, v14, v37, "%{public}s called with null framer, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        uint64_t v14 = __nwlog_obj();
        os_log_type_t v47 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)int buf = 136446210;
          __int16 v55 = "nw_framer_protocol_output_available";
          _os_log_impl(&dword_1830D4000, v14, v47, "%{public}s called with null framer, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }

    goto LABEL_99;
  }
  os_log_type_t v19 = __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  __int16 v55 = "nw_framer_protocol_output_available";
  os_log_type_t v20 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v52 = 0;
  if (__nwlog_fault(v20, &type, &v52))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v21 = __nwlog_obj();
      os_log_type_t v22 = type;
      if (os_log_type_enabled(v21, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v55 = "nw_framer_protocol_output_available";
        _os_log_impl(&dword_1830D4000, v21, v22, "%{public}s called with null protocol", buf, 0xCu);
      }
    }
    else if (v52)
    {
      os_log_type_t v33 = (char *)__nw_create_backtrace_string();
      os_log_type_t v21 = __nwlog_obj();
      os_log_type_t v34 = type;
      BOOL v35 = os_log_type_enabled(v21, type);
      if (v33)
      {
        if (v35)
        {
          *(_DWORD *)int buf = 136446466;
          __int16 v55 = "nw_framer_protocol_output_available";
          __int16 v56 = 2082;
          __int16 v57 = v33;
          _os_log_impl(&dword_1830D4000, v21, v34, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v33);
        goto LABEL_91;
      }
      if (v35)
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v55 = "nw_framer_protocol_output_available";
        _os_log_impl(&dword_1830D4000, v21, v34, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v21 = __nwlog_obj();
      os_log_type_t v46 = type;
      if (os_log_type_enabled(v21, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v55 = "nw_framer_protocol_output_available";
        _os_log_impl(&dword_1830D4000, v21, v46, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_91:
  if (v20) {
    free(v20);
  }
}

void sub_18367B418(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_framer_protocol_input_flush(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    nw_framer_t v2 = a1->handle;
    id v3 = v2;
    if (v2)
    {
      if (v2[1])
      {
LABEL_4:

        return;
      }
      uint64_t v12 = __nwlog_obj();
      *(_DWORD *)int buf = 136446210;
      BOOL v29 = "nw_framer_protocol_input_flush";
      uint64_t v9 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v26 = 0;
      if (!__nwlog_fault(v9, &type, &v26)) {
        goto LABEL_57;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v10 = __nwlog_obj();
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)int buf = 136446210;
          BOOL v29 = "nw_framer_protocol_input_flush";
          _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null framer->parent_definition", buf, 0xCu);
        }
      }
      else if (v26)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        uint64_t v10 = __nwlog_obj();
        os_log_type_t v21 = type;
        BOOL v22 = os_log_type_enabled(v10, type);
        if (backtrace_string)
        {
          if (v22)
          {
            *(_DWORD *)int buf = 136446466;
            BOOL v29 = "nw_framer_protocol_input_flush";
            __int16 v30 = 2082;
            BOOL v31 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v10, v21, "%{public}s called with null framer->parent_definition, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
LABEL_57:
          if (!v9) {
            goto LABEL_4;
          }
LABEL_58:
          free(v9);
          goto LABEL_4;
        }
        if (v22)
        {
          *(_DWORD *)int buf = 136446210;
          BOOL v29 = "nw_framer_protocol_input_flush";
          _os_log_impl(&dword_1830D4000, v10, v21, "%{public}s called with null framer->parent_definition, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        uint64_t v10 = __nwlog_obj();
        os_log_type_t v25 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)int buf = 136446210;
          BOOL v29 = "nw_framer_protocol_input_flush";
          _os_log_impl(&dword_1830D4000, v10, v25, "%{public}s called with null framer->parent_definition, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
    else
    {
      uint64_t v8 = __nwlog_obj();
      *(_DWORD *)int buf = 136446210;
      BOOL v29 = "nw_framer_protocol_input_flush";
      uint64_t v9 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v26 = 0;
      if (!__nwlog_fault(v9, &type, &v26)) {
        goto LABEL_57;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v10 = __nwlog_obj();
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)int buf = 136446210;
          BOOL v29 = "nw_framer_protocol_input_flush";
          _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null framer", buf, 0xCu);
        }
      }
      else if (v26)
      {
        id v17 = (char *)__nw_create_backtrace_string();
        uint64_t v10 = __nwlog_obj();
        os_log_type_t v18 = type;
        BOOL v19 = os_log_type_enabled(v10, type);
        if (v17)
        {
          if (v19)
          {
            *(_DWORD *)int buf = 136446466;
            BOOL v29 = "nw_framer_protocol_input_flush";
            __int16 v30 = 2082;
            BOOL v31 = v17;
            _os_log_impl(&dword_1830D4000, v10, v18, "%{public}s called with null framer, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v17);
          if (!v9) {
            goto LABEL_4;
          }
          goto LABEL_58;
        }
        if (v19)
        {
          *(_DWORD *)int buf = 136446210;
          BOOL v29 = "nw_framer_protocol_input_flush";
          _os_log_impl(&dword_1830D4000, v10, v18, "%{public}s called with null framer, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        uint64_t v10 = __nwlog_obj();
        os_log_type_t v24 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)int buf = 136446210;
          BOOL v29 = "nw_framer_protocol_input_flush";
          _os_log_impl(&dword_1830D4000, v10, v24, "%{public}s called with null framer, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }

    goto LABEL_57;
  }
  uint64_t v4 = __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  BOOL v29 = "nw_framer_protocol_input_flush";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v26 = 0;
  if (__nwlog_fault(v5, &type, &v26))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v29 = "nw_framer_protocol_input_flush";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null protocol", buf, 0xCu);
      }
    }
    else if (v26)
    {
      uint64_t v14 = (char *)__nw_create_backtrace_string();
      uint64_t v6 = __nwlog_obj();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v6, type);
      if (v14)
      {
        if (v16)
        {
          *(_DWORD *)int buf = 136446466;
          BOOL v29 = "nw_framer_protocol_input_flush";
          __int16 v30 = 2082;
          BOOL v31 = v14;
          _os_log_impl(&dword_1830D4000, v6, v15, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v14);
        goto LABEL_49;
      }
      if (v16)
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v29 = "nw_framer_protocol_input_flush";
        _os_log_impl(&dword_1830D4000, v6, v15, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v6 = __nwlog_obj();
      os_log_type_t v23 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v29 = "nw_framer_protocol_input_flush";
        _os_log_impl(&dword_1830D4000, v6, v23, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_49:
  if (v5) {
    free(v5);
  }
}

uint64_t nw_framer_protocol_get_input_frames(nw_protocol *a1, nw_protocol *a2, unsigned int a3, unsigned int a4, unsigned int a5, nw_frame_array_s *a6)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v8 = a1->handle;
    uint64_t v9 = v8;
    if (v8)
    {
      if (v8->parent_definition)
      {
        if ((*((unsigned char *)v8 + 606) & 0x10) == 0) {
          goto LABEL_5;
        }
        *((unsigned char *)v8 + 608) &= ~0x20u;
        pending_input_frame_size_t count = v8->pending_input_frame_count;
        if (!pending_input_frame_count)
        {
          nw_framer_process_body_input(v8);
          pending_input_frame_size_t count = v9->pending_input_frame_count;
          if (!pending_input_frame_count)
          {
            if (*((unsigned char *)v9 + 608))
            {
              uint64_t output_handler = a1->output_handler;
              if (output_handler)
              {
                callbacks = output_handler->callbacks;
                if (callbacks)
                {
                  get_input_frames = (uint64_t (*)(void))callbacks->get_input_frames;
                  if (get_input_frames)
                  {
                    uint64_t v10 = get_input_frames();
                    goto LABEL_12;
                  }
                }
              }
              os_log_type_t v42 = a1->output_handler;
              uint64_t v43 = __nwlog_obj();
              if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)int buf = 136446722;
                os_log_type_t v47 = "nw_framer_protocol_get_input_frames";
                __int16 v48 = 2080;
                log_str = v9->log_str;
                __int16 v50 = 2048;
                char v51 = v42;
                _os_log_impl(&dword_1830D4000, v43, OS_LOG_TYPE_ERROR, "%{public}s %s Unable to call get_input_frames with output_handler %p", buf, 0x20u);
              }

LABEL_5:
              uint64_t v10 = 0;
LABEL_12:

              return v10;
            }
            nw_framer_get_input_from_below(v9);
            nw_framer_process_input_callout(v9);
            pending_input_frame_size_t count = v9->pending_input_frame_count;
            if (!pending_input_frame_count) {
              goto LABEL_5;
            }
          }
        }
        v9->pending_input_frame_size_t count = pending_input_frame_count - 1;
        uint64_t v12 = v9->pending_input_frames.tqh_first;
        os_log_type_t v13 = (nw_frame **)((char *)v12 + 32);
        uint64_t v14 = *((void *)v12 + 4);
        os_log_type_t v15 = (nw_frame **)*((void *)v12 + 5);
        if (v14)
        {
          *(void *)(v14 + 40) = v15;
          os_log_type_t v15 = (nw_frame **)*((void *)v12 + 5);
        }
        else
        {
          v9->pending_input_frames.tqh_last = v15;
        }
        NSObject *v15 = (nw_frame *)v14;
        *os_log_type_t v13 = 0;
        *((void *)v12 + 5) = 0;
        tqh_last = a6->tqh_last;
        *((void *)v12 + 5) = tqh_last;
        void *tqh_last = v12;
        a6->tqh_last = v13;

        uint64_t v10 = 1;
        goto LABEL_12;
      }
      BOOL v29 = __nwlog_obj();
      *(_DWORD *)int buf = 136446210;
      os_log_type_t v47 = "nw_framer_protocol_get_input_frames";
      char v26 = (void *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v44 = 0;
      if (!__nwlog_fault((const char *)v26, &type, &v44))
      {
LABEL_72:
        if (v26) {
          free(v26);
        }
        goto LABEL_5;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        BOOL v27 = __nwlog_obj();
        os_log_type_t v30 = type;
        if (os_log_type_enabled(v27, type))
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v47 = "nw_framer_protocol_get_input_frames";
          _os_log_impl(&dword_1830D4000, v27, v30, "%{public}s called with null framer->parent_definition", buf, 0xCu);
        }
LABEL_71:

        goto LABEL_72;
      }
      if (!v44)
      {
        BOOL v27 = __nwlog_obj();
        os_log_type_t v41 = type;
        if (os_log_type_enabled(v27, type))
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v47 = "nw_framer_protocol_get_input_frames";
          _os_log_impl(&dword_1830D4000, v27, v41, "%{public}s called with null framer->parent_definition, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_71;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v27 = __nwlog_obj();
      os_log_type_t v37 = type;
      BOOL v38 = os_log_type_enabled(v27, type);
      if (!backtrace_string)
      {
        if (v38)
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v47 = "nw_framer_protocol_get_input_frames";
          _os_log_impl(&dword_1830D4000, v27, v37, "%{public}s called with null framer->parent_definition, no backtrace", buf, 0xCu);
        }
        goto LABEL_71;
      }
      if (v38)
      {
        *(_DWORD *)int buf = 136446466;
        os_log_type_t v47 = "nw_framer_protocol_get_input_frames";
        __int16 v48 = 2082;
        log_str = backtrace_string;
        _os_log_impl(&dword_1830D4000, v27, v37, "%{public}s called with null framer->parent_definition, dumping backtrace:%{public}s", buf, 0x16u);
      }
    }
    else
    {
      os_log_type_t v25 = __nwlog_obj();
      *(_DWORD *)int buf = 136446210;
      os_log_type_t v47 = "nw_framer_protocol_get_input_frames";
      char v26 = (void *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v44 = 0;
      if (!__nwlog_fault((const char *)v26, &type, &v44)) {
        goto LABEL_72;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        BOOL v27 = __nwlog_obj();
        os_log_type_t v28 = type;
        if (os_log_type_enabled(v27, type))
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v47 = "nw_framer_protocol_get_input_frames";
          _os_log_impl(&dword_1830D4000, v27, v28, "%{public}s called with null framer", buf, 0xCu);
        }
        goto LABEL_71;
      }
      if (!v44)
      {
        BOOL v27 = __nwlog_obj();
        os_log_type_t v40 = type;
        if (os_log_type_enabled(v27, type))
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v47 = "nw_framer_protocol_get_input_frames";
          _os_log_impl(&dword_1830D4000, v27, v40, "%{public}s called with null framer, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_71;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v27 = __nwlog_obj();
      os_log_type_t v35 = type;
      BOOL v36 = os_log_type_enabled(v27, type);
      if (!backtrace_string)
      {
        if (v36)
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v47 = "nw_framer_protocol_get_input_frames";
          _os_log_impl(&dword_1830D4000, v27, v35, "%{public}s called with null framer, no backtrace", buf, 0xCu);
        }
        goto LABEL_71;
      }
      if (v36)
      {
        *(_DWORD *)int buf = 136446466;
        os_log_type_t v47 = "nw_framer_protocol_get_input_frames";
        __int16 v48 = 2082;
        log_str = backtrace_string;
        _os_log_impl(&dword_1830D4000, v27, v35, "%{public}s called with null framer, dumping backtrace:%{public}s", buf, 0x16u);
      }
    }

    free(backtrace_string);
    goto LABEL_72;
  }
  os_log_type_t v21 = __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  os_log_type_t v47 = "nw_framer_protocol_get_input_frames";
  BOOL v22 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v44 = 0;
  if (__nwlog_fault(v22, &type, &v44))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v23 = __nwlog_obj();
      os_log_type_t v24 = type;
      if (os_log_type_enabled(v23, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v47 = "nw_framer_protocol_get_input_frames";
        _os_log_impl(&dword_1830D4000, v23, v24, "%{public}s called with null protocol", buf, 0xCu);
      }
    }
    else if (v44)
    {
      BOOL v31 = (char *)__nw_create_backtrace_string();
      os_log_type_t v23 = __nwlog_obj();
      os_log_type_t v32 = type;
      BOOL v33 = os_log_type_enabled(v23, type);
      if (v31)
      {
        if (v33)
        {
          *(_DWORD *)int buf = 136446466;
          os_log_type_t v47 = "nw_framer_protocol_get_input_frames";
          __int16 v48 = 2082;
          log_str = v31;
          _os_log_impl(&dword_1830D4000, v23, v32, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v31);
        goto LABEL_63;
      }
      if (v33)
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v47 = "nw_framer_protocol_get_input_frames";
        _os_log_impl(&dword_1830D4000, v23, v32, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v23 = __nwlog_obj();
      os_log_type_t v39 = type;
      if (os_log_type_enabled(v23, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v47 = "nw_framer_protocol_get_input_frames";
        _os_log_impl(&dword_1830D4000, v23, v39, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_63:
  if (v22) {
    free(v22);
  }
  return 0;
}

void sub_18367C2E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_framer_protocol_input_available(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    nw_framer_t v2 = a1->handle;
    id v3 = v2;
    if (v2)
    {
      if (v2->parent_definition)
      {
        char v4 = *((unsigned char *)v2 + 608);
        if ((v4 & 1) == 0)
        {
          if ((*((unsigned char *)v2 + 606) & 0x10) != 0)
          {
            nw_framer_signal_input_available(v2);
            char v4 = *((unsigned char *)v3 + 608);
          }
          if ((v4 & 0x20) != 0)
          {
            if (gLogDatapath)
            {
              uint64_t v45 = __nwlog_obj();
              if (os_log_type_enabled(v45, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)int buf = 136446466;
                __int16 v55 = "nw_framer_protocol_input_available";
                __int16 v56 = 2080;
                log_str = v3->log_str;
                _os_log_impl(&dword_1830D4000, v45, OS_LOG_TYPE_DEBUG, "%{public}s %s Input is unacknowledged, not processing input", buf, 0x16u);
              }
            }
          }
          else
          {
            nw_framer_input_loop(v3);
          }
          goto LABEL_14;
        }
        uint64_t default_input_handler = v2->protocol.default_input_handler;
        if (default_input_handler)
        {
          callbacks = default_input_handler->callbacks;
          if (callbacks)
          {
            input_available = (void (*)(void))callbacks->input_available;
            if (input_available)
            {
              input_available();
LABEL_14:

              return;
            }
          }
        }
        uint64_t v8 = __nwlog_obj();
        uint64_t v9 = v3->protocol.default_input_handler;
        uint64_t v10 = "invalid";
        if (v9)
        {
          name = v9->identifier->name;
          if (name) {
            uint64_t v10 = name;
          }
        }
        *(_DWORD *)int buf = 136446466;
        __int16 v55 = "nw_framer_protocol_input_available";
        __int16 v56 = 2082;
        log_str = (void *)v10;
        uint64_t v12 = (char *)_os_log_send_and_compose_impl();

        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v52 = 0;
        if (!__nwlog_fault(v12, &type, &v52)) {
          goto LABEL_102;
        }
        if (type == OS_LOG_TYPE_FAULT)
        {
          os_log_type_t v13 = __nwlog_obj();
          os_log_type_t v14 = type;
          if (os_log_type_enabled(v13, type))
          {
            os_log_type_t v15 = v3->protocol.default_input_handler;
            BOOL v16 = "invalid";
            if (v15)
            {
              id v17 = v15->identifier->name;
              if (v17) {
                BOOL v16 = v17;
              }
            }
            *(_DWORD *)int buf = 136446466;
            __int16 v55 = "nw_framer_protocol_input_available";
            __int16 v56 = 2082;
            log_str = (void *)v16;
            _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s protocol %{public}s has invalid input_available callback", buf, 0x16u);
          }
        }
        else if (v52)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          os_log_type_t v13 = __nwlog_obj();
          os_log_type_t v27 = type;
          BOOL v28 = os_log_type_enabled(v13, type);
          if (backtrace_string)
          {
            if (v28)
            {
              BOOL v29 = v3->protocol.default_input_handler;
              os_log_type_t v30 = "invalid";
              if (v29)
              {
                BOOL v31 = v29->identifier->name;
                if (v31) {
                  os_log_type_t v30 = v31;
                }
              }
              *(_DWORD *)int buf = 136446722;
              __int16 v55 = "nw_framer_protocol_input_available";
              __int16 v56 = 2082;
              log_str = (void *)v30;
              __int16 v58 = 2082;
              uint64_t v59 = backtrace_string;
              _os_log_impl(&dword_1830D4000, v13, v27, "%{public}s protocol %{public}s has invalid input_available callback, dumping backtrace:%{public}s", buf, 0x20u);
            }

            free(backtrace_string);
            if (!v12) {
              goto LABEL_14;
            }
            goto LABEL_103;
          }
          if (v28)
          {
            uint64_t v49 = v3->protocol.default_input_handler;
            __int16 v50 = "invalid";
            if (v49)
            {
              char v51 = v49->identifier->name;
              if (v51) {
                __int16 v50 = v51;
              }
            }
            *(_DWORD *)int buf = 136446466;
            __int16 v55 = "nw_framer_protocol_input_available";
            __int16 v56 = 2082;
            log_str = (void *)v50;
            _os_log_impl(&dword_1830D4000, v13, v27, "%{public}s protocol %{public}s has invalid input_available callback, no backtrace", buf, 0x16u);
          }
        }
        else
        {
          os_log_type_t v13 = __nwlog_obj();
          os_log_type_t v41 = type;
          if (os_log_type_enabled(v13, type))
          {
            os_log_type_t v42 = v3->protocol.default_input_handler;
            uint64_t v43 = "invalid";
            if (v42)
            {
              char v44 = v42->identifier->name;
              if (v44) {
                uint64_t v43 = v44;
              }
            }
            *(_DWORD *)int buf = 136446466;
            __int16 v55 = "nw_framer_protocol_input_available";
            __int16 v56 = 2082;
            log_str = (void *)v43;
            _os_log_impl(&dword_1830D4000, v13, v41, "%{public}s protocol %{public}s has invalid input_available callback, backtrace limit exceeded", buf, 0x16u);
          }
        }
      }
      else
      {
        os_log_type_t v24 = __nwlog_obj();
        *(_DWORD *)int buf = 136446210;
        __int16 v55 = "nw_framer_protocol_input_available";
        uint64_t v12 = (char *)_os_log_send_and_compose_impl();

        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v52 = 0;
        if (!__nwlog_fault(v12, &type, &v52)) {
          goto LABEL_102;
        }
        if (type == OS_LOG_TYPE_FAULT)
        {
          os_log_type_t v13 = __nwlog_obj();
          os_log_type_t v25 = type;
          if (os_log_type_enabled(v13, type))
          {
            *(_DWORD *)int buf = 136446210;
            __int16 v55 = "nw_framer_protocol_input_available";
            _os_log_impl(&dword_1830D4000, v13, v25, "%{public}s called with null framer->parent_definition", buf, 0xCu);
          }
        }
        else if (v52)
        {
          BOOL v38 = (char *)__nw_create_backtrace_string();
          os_log_type_t v13 = __nwlog_obj();
          os_log_type_t v39 = type;
          BOOL v40 = os_log_type_enabled(v13, type);
          if (v38)
          {
            if (v40)
            {
              *(_DWORD *)int buf = 136446466;
              __int16 v55 = "nw_framer_protocol_input_available";
              __int16 v56 = 2082;
              log_str = v38;
              _os_log_impl(&dword_1830D4000, v13, v39, "%{public}s called with null framer->parent_definition, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(v38);
            if (!v12) {
              goto LABEL_14;
            }
            goto LABEL_103;
          }
          if (v40)
          {
            *(_DWORD *)int buf = 136446210;
            __int16 v55 = "nw_framer_protocol_input_available";
            _os_log_impl(&dword_1830D4000, v13, v39, "%{public}s called with null framer->parent_definition, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          os_log_type_t v13 = __nwlog_obj();
          os_log_type_t v48 = type;
          if (os_log_type_enabled(v13, type))
          {
            *(_DWORD *)int buf = 136446210;
            __int16 v55 = "nw_framer_protocol_input_available";
            _os_log_impl(&dword_1830D4000, v13, v48, "%{public}s called with null framer->parent_definition, backtrace limit exceeded", buf, 0xCu);
          }
        }
      }
    }
    else
    {
      BOOL v22 = __nwlog_obj();
      *(_DWORD *)int buf = 136446210;
      __int16 v55 = "nw_framer_protocol_input_available";
      uint64_t v12 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v52 = 0;
      if (!__nwlog_fault(v12, &type, &v52)) {
        goto LABEL_102;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v13 = __nwlog_obj();
        os_log_type_t v23 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)int buf = 136446210;
          __int16 v55 = "nw_framer_protocol_input_available";
          _os_log_impl(&dword_1830D4000, v13, v23, "%{public}s called with null framer", buf, 0xCu);
        }
      }
      else if (v52)
      {
        os_log_type_t v35 = (char *)__nw_create_backtrace_string();
        os_log_type_t v13 = __nwlog_obj();
        os_log_type_t v36 = type;
        BOOL v37 = os_log_type_enabled(v13, type);
        if (v35)
        {
          if (v37)
          {
            *(_DWORD *)int buf = 136446466;
            __int16 v55 = "nw_framer_protocol_input_available";
            __int16 v56 = 2082;
            log_str = v35;
            _os_log_impl(&dword_1830D4000, v13, v36, "%{public}s called with null framer, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v35);
LABEL_102:
          if (!v12) {
            goto LABEL_14;
          }
LABEL_103:
          free(v12);
          goto LABEL_14;
        }
        if (v37)
        {
          *(_DWORD *)int buf = 136446210;
          __int16 v55 = "nw_framer_protocol_input_available";
          _os_log_impl(&dword_1830D4000, v13, v36, "%{public}s called with null framer, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        os_log_type_t v13 = __nwlog_obj();
        os_log_type_t v47 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)int buf = 136446210;
          __int16 v55 = "nw_framer_protocol_input_available";
          _os_log_impl(&dword_1830D4000, v13, v47, "%{public}s called with null framer, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }

    goto LABEL_102;
  }
  os_log_type_t v18 = __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  __int16 v55 = "nw_framer_protocol_input_available";
  BOOL v19 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v52 = 0;
  if (__nwlog_fault(v19, &type, &v52))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v20 = __nwlog_obj();
      os_log_type_t v21 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v55 = "nw_framer_protocol_input_available";
        _os_log_impl(&dword_1830D4000, v20, v21, "%{public}s called with null protocol", buf, 0xCu);
      }
    }
    else if (v52)
    {
      os_log_type_t v32 = (char *)__nw_create_backtrace_string();
      os_log_type_t v20 = __nwlog_obj();
      os_log_type_t v33 = type;
      BOOL v34 = os_log_type_enabled(v20, type);
      if (v32)
      {
        if (v34)
        {
          *(_DWORD *)int buf = 136446466;
          __int16 v55 = "nw_framer_protocol_input_available";
          __int16 v56 = 2082;
          log_str = v32;
          _os_log_impl(&dword_1830D4000, v20, v33, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v32);
        goto LABEL_94;
      }
      if (v34)
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v55 = "nw_framer_protocol_input_available";
        _os_log_impl(&dword_1830D4000, v20, v33, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v20 = __nwlog_obj();
      os_log_type_t v46 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v55 = "nw_framer_protocol_input_available";
        _os_log_impl(&dword_1830D4000, v20, v46, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_94:
  if (v19) {
    free(v19);
  }
}

void sub_18367CD20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_framer_protocol_finalize_output_frames(nw_protocol *a1, nw_frame_array_s *a2)
{
  uint64_t v75 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    char v4 = a1->handle;
    uint64_t v5 = (char *)v4;
    if (v4)
    {
      if (*((void *)v4 + 1))
      {
        if ((v4[152] & 2) == 0)
        {
          v4[150] = 0;
          uint64_t v6 = (void *)*((void *)v4 + 73);
          *((void *)v4 + 73) = 0;

          v5[607] &= ~0x10u;
          *((void *)v5 + 74) = 0;
          v60[0] = MEMORY[0x1E4F143A8];
          v60[1] = 3221225472;
          uint64_t v61 = ___ZL41nw_framer_protocol_finalize_output_framesP11nw_protocolP16nw_frame_array_s_block_invoke;
          size_t v62 = &unk_1E523B180;
          id v64 = a2;
          os_log_type_t v7 = v5;
          char v63 = v7;
          tqh_first = a2->tqh_first;
          do
          {
            if (!tqh_first) {
              break;
            }
            uint64_t v9 = (nw_frame *)*((void *)tqh_first + 4);
            char v10 = ((uint64_t (*)(void *))v61)(v60);
            tqh_first = v9;
          }
          while ((v10 & 1) != 0);
          if (*((void *)v7 + 51))
          {
            v5[607] |= 4u;
            v56[0] = MEMORY[0x1E4F143A8];
            v56[1] = 3221225472;
            __int16 v57 = ___ZL41nw_framer_protocol_finalize_output_framesP11nw_protocolP16nw_frame_array_s_block_invoke_2;
            __int16 v58 = &unk_1E524A298;
            os_log_type_t v11 = v7;
            uint64_t v59 = v11;
            uint64_t v12 = *((void *)v7 + 71);
            do
            {
              if (!v12) {
                break;
              }
              uint64_t v13 = *(void *)(v12 + 32);
              char v14 = ((uint64_t (*)(void *))v57)(v56);
              uint64_t v12 = v13;
            }
            while ((v14 & 1) != 0);
            if (*((void *)v5 + 73) || *((_DWORD *)v5 + 148))
            {
              if (gLogDatapath)
              {
                uint64_t v45 = __nwlog_obj();
                if (os_log_type_enabled(v45, OS_LOG_TYPE_DEBUG))
                {
                  int v46 = *((_DWORD *)v5 + 149);
                  os_log_type_t v47 = "s";
                  int v48 = *((_DWORD *)v5 + 148);
                  os_log_type_t v68 = "nw_framer_protocol_finalize_output_frames";
                  *(_DWORD *)int buf = 136447234;
                  if (v46 == 1) {
                    os_log_type_t v47 = "";
                  }
                  __int16 v69 = 2080;
                  uint64_t v70 = v11 + 609;
                  __int16 v71 = 1024;
                  *(_DWORD *)id v72 = v46;
                  *(_WORD *)&v72[4] = 2080;
                  *(void *)&v72[6] = v47;
                  __int16 v73 = 1024;
                  int v74 = v48;
                  _os_log_impl(&dword_1830D4000, v45, OS_LOG_TYPE_DEBUG, "%{public}s %s Asking to write %u outbound frame%s with %u bytes", buf, 0x2Cu);
                }
              }
              (*(void (**)(void))(*((void *)v7 + 51) + 16))();
            }
            v5[607] &= ~4u;
          }
          *((_DWORD *)v5 + 150) = 0;
          os_log_type_t v15 = (void *)*((void *)v5 + 73);
          *((void *)v5 + 73) = 0;

          v5[607] &= ~0x10u;
          *((void *)v5 + 74) = 0;
          v52[0] = MEMORY[0x1E4F143A8];
          v52[1] = 3221225472;
          id v53 = ___ZL41nw_framer_protocol_finalize_output_framesP11nw_protocolP16nw_frame_array_s_block_invoke_139;
          uint64_t v54 = &unk_1E524A298;
          BOOL v16 = v7;
          __int16 v55 = v16;
          uint64_t v17 = *((void *)v7 + 71);
          do
          {
            if (!v17) {
              break;
            }
            uint64_t v18 = *(void *)(v17 + 32);
            char v19 = ((uint64_t (*)(void *))v53)(v52);
            uint64_t v17 = v18;
          }
          while ((v19 & 1) != 0);
          nw_framer_flush_output(v16, 0);

          uint64_t v20 = 1;
          goto LABEL_25;
        }
        uint64_t output_handler = a1->output_handler;
        if (output_handler)
        {
          callbacks = output_handler->callbacks;
          if (callbacks)
          {
            finalize_output_frames = (uint64_t (*)(nw_protocol *, nw_frame_array_s *))callbacks->finalize_output_frames;
            if (finalize_output_frames)
            {
              uint64_t v20 = finalize_output_frames(output_handler, a2);
LABEL_25:

              return v20;
            }
          }
        }
        os_log_type_t v25 = __nwlog_obj();
        if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)int buf = 136446722;
          os_log_type_t v68 = "nw_framer_protocol_finalize_output_frames";
          __int16 v69 = 2080;
          uint64_t v70 = v5 + 609;
          __int16 v71 = 2048;
          *(void *)id v72 = output_handler;
          _os_log_impl(&dword_1830D4000, v25, OS_LOG_TYPE_ERROR, "%{public}s %s Unable to call finalize_output_frames with output_handler %p", buf, 0x20u);
        }

LABEL_89:
        uint64_t v20 = 0;
        goto LABEL_25;
      }
      BOOL v34 = __nwlog_obj();
      *(_DWORD *)int buf = 136446210;
      os_log_type_t v68 = "nw_framer_protocol_finalize_output_frames";
      BOOL v31 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t v66 = OS_LOG_TYPE_ERROR;
      char v65 = 0;
      if (!__nwlog_fault(v31, &v66, &v65)) {
        goto LABEL_87;
      }
      if (v66 == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v32 = __nwlog_obj();
        os_log_type_t v35 = v66;
        if (os_log_type_enabled(v32, v66))
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v68 = "nw_framer_protocol_finalize_output_frames";
          _os_log_impl(&dword_1830D4000, v32, v35, "%{public}s called with null framer->parent_definition", buf, 0xCu);
        }
      }
      else if (v65)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v32 = __nwlog_obj();
        os_log_type_t v43 = v66;
        BOOL v44 = os_log_type_enabled(v32, v66);
        if (backtrace_string)
        {
          if (v44)
          {
            *(_DWORD *)int buf = 136446466;
            os_log_type_t v68 = "nw_framer_protocol_finalize_output_frames";
            __int16 v69 = 2082;
            uint64_t v70 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v32, v43, "%{public}s called with null framer->parent_definition, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          if (!v31) {
            goto LABEL_89;
          }
          goto LABEL_88;
        }
        if (v44)
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v68 = "nw_framer_protocol_finalize_output_frames";
          _os_log_impl(&dword_1830D4000, v32, v43, "%{public}s called with null framer->parent_definition, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        os_log_type_t v32 = __nwlog_obj();
        os_log_type_t v51 = v66;
        if (os_log_type_enabled(v32, v66))
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v68 = "nw_framer_protocol_finalize_output_frames";
          _os_log_impl(&dword_1830D4000, v32, v51, "%{public}s called with null framer->parent_definition, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
    else
    {
      os_log_type_t v30 = __nwlog_obj();
      *(_DWORD *)int buf = 136446210;
      os_log_type_t v68 = "nw_framer_protocol_finalize_output_frames";
      BOOL v31 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t v66 = OS_LOG_TYPE_ERROR;
      char v65 = 0;
      if (!__nwlog_fault(v31, &v66, &v65)) {
        goto LABEL_87;
      }
      if (v66 == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v32 = __nwlog_obj();
        os_log_type_t v33 = v66;
        if (os_log_type_enabled(v32, v66))
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v68 = "nw_framer_protocol_finalize_output_frames";
          _os_log_impl(&dword_1830D4000, v32, v33, "%{public}s called with null framer", buf, 0xCu);
        }
      }
      else if (v65)
      {
        os_log_type_t v39 = (char *)__nw_create_backtrace_string();
        os_log_type_t v32 = __nwlog_obj();
        os_log_type_t v40 = v66;
        BOOL v41 = os_log_type_enabled(v32, v66);
        if (v39)
        {
          if (v41)
          {
            *(_DWORD *)int buf = 136446466;
            os_log_type_t v68 = "nw_framer_protocol_finalize_output_frames";
            __int16 v69 = 2082;
            uint64_t v70 = v39;
            _os_log_impl(&dword_1830D4000, v32, v40, "%{public}s called with null framer, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v39);
LABEL_87:
          if (!v31) {
            goto LABEL_89;
          }
LABEL_88:
          free(v31);
          goto LABEL_89;
        }
        if (v41)
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v68 = "nw_framer_protocol_finalize_output_frames";
          _os_log_impl(&dword_1830D4000, v32, v40, "%{public}s called with null framer, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        os_log_type_t v32 = __nwlog_obj();
        os_log_type_t v50 = v66;
        if (os_log_type_enabled(v32, v66))
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v68 = "nw_framer_protocol_finalize_output_frames";
          _os_log_impl(&dword_1830D4000, v32, v50, "%{public}s called with null framer, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }

    goto LABEL_87;
  }
  char v26 = __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  os_log_type_t v68 = "nw_framer_protocol_finalize_output_frames";
  os_log_type_t v27 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t v66 = OS_LOG_TYPE_ERROR;
  char v65 = 0;
  if (__nwlog_fault(v27, &v66, &v65))
  {
    if (v66 == OS_LOG_TYPE_FAULT)
    {
      BOOL v28 = __nwlog_obj();
      os_log_type_t v29 = v66;
      if (os_log_type_enabled(v28, v66))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v68 = "nw_framer_protocol_finalize_output_frames";
        _os_log_impl(&dword_1830D4000, v28, v29, "%{public}s called with null protocol", buf, 0xCu);
      }
    }
    else if (v65)
    {
      os_log_type_t v36 = (char *)__nw_create_backtrace_string();
      BOOL v28 = __nwlog_obj();
      os_log_type_t v37 = v66;
      BOOL v38 = os_log_type_enabled(v28, v66);
      if (v36)
      {
        if (v38)
        {
          *(_DWORD *)int buf = 136446466;
          os_log_type_t v68 = "nw_framer_protocol_finalize_output_frames";
          __int16 v69 = 2082;
          uint64_t v70 = v36;
          _os_log_impl(&dword_1830D4000, v28, v37, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v36);
        goto LABEL_78;
      }
      if (v38)
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v68 = "nw_framer_protocol_finalize_output_frames";
        _os_log_impl(&dword_1830D4000, v28, v37, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v28 = __nwlog_obj();
      os_log_type_t v49 = v66;
      if (os_log_type_enabled(v28, v66))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v68 = "nw_framer_protocol_finalize_output_frames";
        _os_log_impl(&dword_1830D4000, v28, v49, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_78:
  if (v27) {
    free(v27);
  }
  return 0;
}

void sub_18367D758(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL41nw_framer_protocol_finalize_output_framesP11nw_protocolP16nw_frame_array_s_block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  char v4 = v3 + 4;
  uint64_t v5 = v3[4];
  uint64_t v6 = (void *)v3[5];
  if (v5)
  {
    *(void *)(v5 + 40) = v6;
    uint64_t v6 = (void *)v3[5];
  }
  else
  {
    *(void *)(*(void *)(a1 + 40) + 8) = v6;
  }
  *uint64_t v6 = v5;
  void *v4 = 0;
  v3[5] = 0;
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(void **)(v7 + 576);
  v3[5] = v8;
  *uint64_t v8 = v3;
  *(void *)(v7 + 576) = v4;

  return 1;
}

uint64_t ___ZL41nw_framer_protocol_finalize_output_framesP11nw_protocolP16nw_frame_array_s_block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  char v4 = nw_frame_copy_metadata_for_protocol((uint64_t)v3, *(void *)(*(void *)(a1 + 32) + 8));
  int is_metadata_complete = nw_frame_is_metadata_complete((uint64_t)v3);
  int v6 = nw_frame_unclaimed_length(v3);
  *(unsigned char *)(*(void *)(a1 + 32) + 607) = *(unsigned char *)(*(void *)(a1 + 32) + 607) & 0xDF | (v3[186] >> 2) & 0x20;
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(void **)(v7 + 584);
  if (v8) {
    BOOL v9 = v4 == v8;
  }
  else {
    BOOL v9 = 1;
  }
  if (!v9)
  {
    if (gLogDatapath)
    {
      uint64_t v17 = __nwlog_obj();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v18 = *(void *)(a1 + 32);
        char v19 = (const char *)(v18 + 609);
        uint64_t v20 = "";
        int v21 = *(_DWORD *)(v18 + 596);
        if (!v18) {
          char v19 = "";
        }
        int v22 = *(_DWORD *)(v18 + 592);
        BOOL v34 = "nw_framer_protocol_finalize_output_frames_block_invoke_2";
        int v33 = 136447234;
        if (v21 != 1) {
          uint64_t v20 = "s";
        }
        __int16 v35 = 2080;
        os_log_type_t v36 = v19;
        __int16 v37 = 1024;
        int v38 = v21;
        __int16 v39 = 2080;
        os_log_type_t v40 = v20;
        __int16 v41 = 1024;
        int v42 = v22;
        _os_log_impl(&dword_1830D4000, v17, OS_LOG_TYPE_DEBUG, "%{public}s %s Asking to write %u outbound frame%s with %u bytes", (uint8_t *)&v33, 0x2Cu);
      }

      uint64_t v7 = *(void *)(a1 + 32);
    }
    (*(void (**)(void, uint64_t))(*(void *)(v7 + 408) + 16))(*(void *)(v7 + 408), v7);
    uint64_t v10 = a1 + 32;
    *(_DWORD *)(*(void *)(a1 + 32) + 600) = 0;
    uint64_t v11 = *(void *)(a1 + 32);
    uint64_t v12 = *(void **)(v11 + 584);
    *(void *)(v11 + 584) = 0;

    *(_DWORD *)(*(void *)v10 + 592) = 0;
    *(unsigned char *)(*(void *)v10 + 607) &= ~0x10u;
    *(_DWORD *)(*(void *)v10 + 596) = 0;
    uint64_t v7 = *(void *)(a1 + 32);
  }
  objc_storeStrong((id *)(v7 + 584), v4);
  *(_DWORD *)(*(void *)(a1 + 32) + 592) += v6;
  if (is_metadata_complete) {
    char v13 = 16;
  }
  else {
    char v13 = 0;
  }
  *(unsigned char *)(*(void *)(a1 + 32) + 607) = *(unsigned char *)(*(void *)(a1 + 32) + 607) & 0xEF | v13;
  ++*(_DWORD *)(*(void *)(a1 + 32) + 596);
  uint64_t v14 = *(void *)(a1 + 32);
  if ((*(unsigned char *)(v14 + 607) & 0x10) != 0)
  {
    if (gLogDatapath)
    {
      os_log_type_t v23 = __nwlog_obj();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v24 = *(void *)(a1 + 32);
        os_log_type_t v25 = (const char *)(v24 + 609);
        char v26 = "";
        int v27 = *(_DWORD *)(v24 + 596);
        if (!v24) {
          os_log_type_t v25 = "";
        }
        int v28 = *(_DWORD *)(v24 + 592);
        BOOL v34 = "nw_framer_protocol_finalize_output_frames_block_invoke";
        int v33 = 136447234;
        if (v27 != 1) {
          char v26 = "s";
        }
        __int16 v35 = 2080;
        os_log_type_t v36 = v25;
        __int16 v37 = 1024;
        int v38 = v27;
        __int16 v39 = 2080;
        os_log_type_t v40 = v26;
        __int16 v41 = 1024;
        int v42 = v28;
        _os_log_impl(&dword_1830D4000, v23, OS_LOG_TYPE_DEBUG, "%{public}s %s Asking to write complete %u outbound frame%s with %u bytes", (uint8_t *)&v33, 0x2Cu);
      }

      uint64_t v14 = *(void *)(a1 + 32);
      uint64_t v15 = *(void *)(v14 + 552);
      if (v15) {
        goto LABEL_13;
      }
    }
    else
    {
      uint64_t v15 = *(void *)(v14 + 552);
      if (v15)
      {
LABEL_13:
        BOOL v16 = *(void *)(v15 + 16) != *(void *)(v15 + 24);
        goto LABEL_29;
      }
    }
    BOOL v16 = 0;
LABEL_29:
    (*(void (**)(void, uint64_t))(*(void *)(v14 + 408) + 16))(*(void *)(v14 + 408), v14);
    if (!v16
      && (*(unsigned char *)(*(void *)(a1 + 32) + 606) & 2) != 0
      && (*((_DWORD *)v3 + 44)
       || nw_frame_get_ecn_flag((uint64_t)v3)
       || nw_frame_get_expire_time((uint64_t)v3)
       || nw_frame_get_packet_id((uint64_t)v3)))
    {
      nw_framer_flush_output(*(void **)(a1 + 32), v3);
    }
    uint64_t v30 = *(void *)(a1 + 32);
    uint64_t v29 = a1 + 32;
    *(_DWORD *)(v30 + 600) = 0;
    BOOL v31 = *(void **)(*(void *)v29 + 584);
    *(void *)(*(void *)v29 + 584) = 0;

    *(_DWORD *)(*(void *)v29 + 592) = 0;
    *(unsigned char *)(*(void *)v29 + 607) &= ~0x10u;
    *(_DWORD *)(*(void *)v29 + 596) = 0;
  }

  return 1;
}

void sub_18367DBCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL41nw_framer_protocol_finalize_output_framesP11nw_protocolP16nw_frame_array_s_block_invoke_139(uint64_t a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  char v4 = v3;
  uint64_t v5 = *((void *)v3 + 4);
  int v6 = (void *)*((void *)v3 + 5);
  if (v5)
  {
    *(void *)(v5 + 40) = v6;
    int v6 = (void *)*((void *)v3 + 5);
  }
  else
  {
    *(void *)(*(void *)(a1 + 32) + 576) = v6;
  }
  *int v6 = v5;
  *((void *)v3 + 4) = 0;
  *((void *)v3 + 5) = 0;
  nw_frame_finalize((uint64_t)v3);
  if (gLogDatapath)
  {
    uint64_t v8 = __nwlog_obj();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v9 = *(void *)(a1 + 32);
      if (v9) {
        uint64_t v10 = (const char *)(v9 + 609);
      }
      else {
        uint64_t v10 = "";
      }
      int v11 = 136446466;
      uint64_t v12 = "nw_framer_protocol_finalize_output_frames_block_invoke";
      __int16 v13 = 2080;
      uint64_t v14 = v10;
      _os_log_impl(&dword_1830D4000, v8, OS_LOG_TYPE_DEBUG, "%{public}s %s Dropping unused output frame", (uint8_t *)&v11, 0x16u);
    }
  }
  return 1;
}

uint64_t nw_framer_protocol_get_output_frames(nw_protocol *a1, nw_protocol *a2, uint64_t a3, uint64_t a4, uint64_t a5, nw_frame_array_s *a6)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    int v11 = a1->handle;
    uint64_t v12 = v11;
    if (v11)
    {
      if (*((void *)v11 + 1))
      {
        if (((v11[606] & 0x10) != 0 || (v11[608] & 8) != 0) && (v11[607] & 0x80000000) == 0)
        {
          if ((v11[608] & 2) != 0)
          {
            uint64_t output_handler = a1->output_handler;
            if (output_handler)
            {
              callbacks = output_handler->callbacks;
              if (callbacks)
              {
                get_output_frames = (uint64_t (*)(nw_protocol *, nw_protocol *, uint64_t, uint64_t, uint64_t, nw_frame_array_s *))callbacks->get_output_frames;
                if (get_output_frames)
                {
                  uint64_t v15 = get_output_frames(a1->output_handler, a1, a3, a4, a5, a6);
LABEL_19:

                  return v15;
                }
              }
            }
            uint64_t v30 = __nwlog_obj();
            if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)int buf = 136446722;
              os_log_type_t v47 = "nw_framer_protocol_get_output_frames";
              __int16 v48 = 2080;
              os_log_type_t v49 = v12 + 609;
              __int16 v50 = 2048;
              os_log_type_t v51 = output_handler;
              _os_log_impl(&dword_1830D4000, v30, OS_LOG_TYPE_ERROR, "%{public}s %s Unable to call get_output_frames with output_handler %p", buf, 0x20u);
            }
          }
          else
          {
            if ((v11[608] & 0x40) == 0)
            {
              if (a4 >= 0x80000000) {
                LODWORD(a4) = 0x80000000;
              }
              uint64_t frame = nw_framer_protocol_create_frame(v11, a4, (uint64_t)nw_framer_protocol_outbound_data_finalizer, (uint64_t)(v11 + 480), v11[606] & 1);
              *(void *)(frame + 32) = 0;
              tqh_last = a6->tqh_last;
              *(void *)(frame + 40) = tqh_last;
              void *tqh_last = (nw_frame *)frame;
              a6->tqh_last = (nw_frame **)(frame + 32);
              if (gLogDatapath)
              {
                uint64_t v42 = frame;
                uint64_t v43 = __nwlog_obj();
                if (os_log_type_enabled(v43, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)int buf = 136446722;
                  os_log_type_t v47 = "nw_framer_protocol_get_output_frames";
                  __int16 v48 = 2080;
                  os_log_type_t v49 = v12 + 609;
                  __int16 v50 = 1024;
                  LODWORD(v51) = a4;
                  _os_log_impl(&dword_1830D4000, v43, OS_LOG_TYPE_DEBUG, "%{public}s %s Created 1 outbound frame with total of %u bytes", buf, 0x1Cu);
                }

                uint64_t frame = v42;
              }

              uint64_t v15 = 1;
              goto LABEL_19;
            }
            if (!gLogDatapath) {
              goto LABEL_18;
            }
            uint64_t v30 = __nwlog_obj();
            if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)int buf = 136446466;
              os_log_type_t v47 = "nw_framer_protocol_get_output_frames";
              __int16 v48 = 2080;
              os_log_type_t v49 = v12 + 609;
              _os_log_impl(&dword_1830D4000, v30, OS_LOG_TYPE_DEBUG, "%{public}s %s Output is blocked, returning 0 frames", buf, 0x16u);
            }
          }
        }
LABEL_18:
        uint64_t v15 = 0;
        goto LABEL_19;
      }
      int v28 = __nwlog_obj();
      *(_DWORD *)int buf = 136446210;
      os_log_type_t v47 = "nw_framer_protocol_get_output_frames";
      os_log_type_t v25 = (void *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v44 = 0;
      if (!__nwlog_fault((const char *)v25, &type, &v44))
      {
LABEL_81:
        if (v25) {
          free(v25);
        }
        goto LABEL_18;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        char v26 = __nwlog_obj();
        os_log_type_t v29 = type;
        if (os_log_type_enabled(v26, type))
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v47 = "nw_framer_protocol_get_output_frames";
          _os_log_impl(&dword_1830D4000, v26, v29, "%{public}s called with null framer->parent_definition", buf, 0xCu);
        }
LABEL_80:

        goto LABEL_81;
      }
      if (!v44)
      {
        char v26 = __nwlog_obj();
        os_log_type_t v41 = type;
        if (os_log_type_enabled(v26, type))
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v47 = "nw_framer_protocol_get_output_frames";
          _os_log_impl(&dword_1830D4000, v26, v41, "%{public}s called with null framer->parent_definition, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_80;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      char v26 = __nwlog_obj();
      os_log_type_t v37 = type;
      BOOL v38 = os_log_type_enabled(v26, type);
      if (!backtrace_string)
      {
        if (v38)
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v47 = "nw_framer_protocol_get_output_frames";
          _os_log_impl(&dword_1830D4000, v26, v37, "%{public}s called with null framer->parent_definition, no backtrace", buf, 0xCu);
        }
        goto LABEL_80;
      }
      if (v38)
      {
        *(_DWORD *)int buf = 136446466;
        os_log_type_t v47 = "nw_framer_protocol_get_output_frames";
        __int16 v48 = 2082;
        os_log_type_t v49 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v26, v37, "%{public}s called with null framer->parent_definition, dumping backtrace:%{public}s", buf, 0x16u);
      }
    }
    else
    {
      uint64_t v24 = __nwlog_obj();
      *(_DWORD *)int buf = 136446210;
      os_log_type_t v47 = "nw_framer_protocol_get_output_frames";
      os_log_type_t v25 = (void *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v44 = 0;
      if (!__nwlog_fault((const char *)v25, &type, &v44)) {
        goto LABEL_81;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        char v26 = __nwlog_obj();
        os_log_type_t v27 = type;
        if (os_log_type_enabled(v26, type))
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v47 = "nw_framer_protocol_get_output_frames";
          _os_log_impl(&dword_1830D4000, v26, v27, "%{public}s called with null framer", buf, 0xCu);
        }
        goto LABEL_80;
      }
      if (!v44)
      {
        char v26 = __nwlog_obj();
        os_log_type_t v40 = type;
        if (os_log_type_enabled(v26, type))
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v47 = "nw_framer_protocol_get_output_frames";
          _os_log_impl(&dword_1830D4000, v26, v40, "%{public}s called with null framer, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_80;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      char v26 = __nwlog_obj();
      os_log_type_t v35 = type;
      BOOL v36 = os_log_type_enabled(v26, type);
      if (!backtrace_string)
      {
        if (v36)
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v47 = "nw_framer_protocol_get_output_frames";
          _os_log_impl(&dword_1830D4000, v26, v35, "%{public}s called with null framer, no backtrace", buf, 0xCu);
        }
        goto LABEL_80;
      }
      if (v36)
      {
        *(_DWORD *)int buf = 136446466;
        os_log_type_t v47 = "nw_framer_protocol_get_output_frames";
        __int16 v48 = 2082;
        os_log_type_t v49 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v26, v35, "%{public}s called with null framer, dumping backtrace:%{public}s", buf, 0x16u);
      }
    }

    free(backtrace_string);
    goto LABEL_81;
  }
  uint64_t v20 = __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  os_log_type_t v47 = "nw_framer_protocol_get_output_frames";
  int v21 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v44 = 0;
  if (__nwlog_fault(v21, &type, &v44))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v22 = __nwlog_obj();
      os_log_type_t v23 = type;
      if (os_log_type_enabled(v22, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v47 = "nw_framer_protocol_get_output_frames";
        _os_log_impl(&dword_1830D4000, v22, v23, "%{public}s called with null protocol", buf, 0xCu);
      }
    }
    else if (v44)
    {
      BOOL v31 = (char *)__nw_create_backtrace_string();
      int v22 = __nwlog_obj();
      os_log_type_t v32 = type;
      BOOL v33 = os_log_type_enabled(v22, type);
      if (v31)
      {
        if (v33)
        {
          *(_DWORD *)int buf = 136446466;
          os_log_type_t v47 = "nw_framer_protocol_get_output_frames";
          __int16 v48 = 2082;
          os_log_type_t v49 = v31;
          _os_log_impl(&dword_1830D4000, v22, v32, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v31);
        goto LABEL_66;
      }
      if (v33)
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v47 = "nw_framer_protocol_get_output_frames";
        _os_log_impl(&dword_1830D4000, v22, v32, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int v22 = __nwlog_obj();
      os_log_type_t v39 = type;
      if (os_log_type_enabled(v22, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v47 = "nw_framer_protocol_get_output_frames";
        _os_log_impl(&dword_1830D4000, v22, v39, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_66:
  if (v21) {
    free(v21);
  }
  return 0;
}

void sub_18367E5FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_framer_protocol_outbound_data_finalizer(void *a1, int a2, char *a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  if (a2)
  {
    if (gLogDatapath)
    {
      int v6 = __nwlog_obj();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v7 = "";
        if (a3) {
          uint64_t v7 = a3 + 609;
        }
        int v10 = 136446466;
        int v11 = "nw_framer_protocol_outbound_data_finalizer";
        __int16 v12 = 2080;
        __int16 v13 = v7;
        uint64_t v8 = "%{public}s %s Finalizing outbound frame (success)";
LABEL_13:
        _os_log_impl(&dword_1830D4000, v6, OS_LOG_TYPE_DEBUG, v8, (uint8_t *)&v10, 0x16u);
        goto LABEL_14;
      }
      goto LABEL_14;
    }
  }
  else if (gLogDatapath)
  {
    int v6 = __nwlog_obj();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v9 = "";
      if (a3) {
        uint64_t v9 = a3 + 609;
      }
      int v10 = 136446466;
      int v11 = "nw_framer_protocol_outbound_data_finalizer";
      __int16 v12 = 2080;
      __int16 v13 = v9;
      uint64_t v8 = "%{public}s %s Finalizing outbound frame (drop)";
      goto LABEL_13;
    }
LABEL_14:
  }
  nw_framer_protocol_finalizer(v5, (uint64_t)(a3 + 480));
}

uint64_t nw_framer_protocol_waiting_for_output(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    nw_framer_t v2 = a1->handle;
    id v3 = v2;
    if (v2)
    {
      if (*((void *)v2 + 1))
      {
        uint64_t v4 = (v2[608] >> 3) & 1;
LABEL_5:

        return v4;
      }
      uint64_t v14 = __nwlog_obj();
      *(_DWORD *)int buf = 136446210;
      uint64_t v30 = "nw_framer_protocol_waiting_for_output";
      int v11 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v27 = 0;
      if (__nwlog_fault(v11, &type, &v27))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          __int16 v12 = __nwlog_obj();
          os_log_type_t v15 = type;
          if (os_log_type_enabled(v12, type))
          {
            *(_DWORD *)int buf = 136446210;
            uint64_t v30 = "nw_framer_protocol_waiting_for_output";
            _os_log_impl(&dword_1830D4000, v12, v15, "%{public}s called with null framer->parent_definition", buf, 0xCu);
          }
LABEL_57:

          goto LABEL_58;
        }
        if (!v27)
        {
          __int16 v12 = __nwlog_obj();
          os_log_type_t v26 = type;
          if (os_log_type_enabled(v12, type))
          {
            *(_DWORD *)int buf = 136446210;
            uint64_t v30 = "nw_framer_protocol_waiting_for_output";
            _os_log_impl(&dword_1830D4000, v12, v26, "%{public}s called with null framer->parent_definition, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_57;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        __int16 v12 = __nwlog_obj();
        os_log_type_t v22 = type;
        BOOL v23 = os_log_type_enabled(v12, type);
        if (!backtrace_string)
        {
          if (v23)
          {
            *(_DWORD *)int buf = 136446210;
            uint64_t v30 = "nw_framer_protocol_waiting_for_output";
            _os_log_impl(&dword_1830D4000, v12, v22, "%{public}s called with null framer->parent_definition, no backtrace", buf, 0xCu);
          }
          goto LABEL_57;
        }
        if (v23)
        {
          *(_DWORD *)int buf = 136446466;
          uint64_t v30 = "nw_framer_protocol_waiting_for_output";
          __int16 v31 = 2082;
          os_log_type_t v32 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v12, v22, "%{public}s called with null framer->parent_definition, dumping backtrace:%{public}s", buf, 0x16u);
        }
        goto LABEL_36;
      }
    }
    else
    {
      int v10 = __nwlog_obj();
      *(_DWORD *)int buf = 136446210;
      uint64_t v30 = "nw_framer_protocol_waiting_for_output";
      int v11 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v27 = 0;
      if (__nwlog_fault(v11, &type, &v27))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          __int16 v12 = __nwlog_obj();
          os_log_type_t v13 = type;
          if (os_log_type_enabled(v12, type))
          {
            *(_DWORD *)int buf = 136446210;
            uint64_t v30 = "nw_framer_protocol_waiting_for_output";
            _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s called with null framer", buf, 0xCu);
          }
          goto LABEL_57;
        }
        if (!v27)
        {
          __int16 v12 = __nwlog_obj();
          os_log_type_t v25 = type;
          if (os_log_type_enabled(v12, type))
          {
            *(_DWORD *)int buf = 136446210;
            uint64_t v30 = "nw_framer_protocol_waiting_for_output";
            _os_log_impl(&dword_1830D4000, v12, v25, "%{public}s called with null framer, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_57;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        __int16 v12 = __nwlog_obj();
        os_log_type_t v20 = type;
        BOOL v21 = os_log_type_enabled(v12, type);
        if (!backtrace_string)
        {
          if (v21)
          {
            *(_DWORD *)int buf = 136446210;
            uint64_t v30 = "nw_framer_protocol_waiting_for_output";
            _os_log_impl(&dword_1830D4000, v12, v20, "%{public}s called with null framer, no backtrace", buf, 0xCu);
          }
          goto LABEL_57;
        }
        if (v21)
        {
          *(_DWORD *)int buf = 136446466;
          uint64_t v30 = "nw_framer_protocol_waiting_for_output";
          __int16 v31 = 2082;
          os_log_type_t v32 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v12, v20, "%{public}s called with null framer, dumping backtrace:%{public}s", buf, 0x16u);
        }
LABEL_36:

        free(backtrace_string);
      }
    }
LABEL_58:
    if (v11) {
      free(v11);
    }
    uint64_t v4 = 0;
    goto LABEL_5;
  }
  int v6 = __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  uint64_t v30 = "nw_framer_protocol_waiting_for_output";
  uint64_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v27 = 0;
  if (__nwlog_fault(v7, &type, &v27))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v30 = "nw_framer_protocol_waiting_for_output";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null protocol", buf, 0xCu);
      }
    }
    else if (v27)
    {
      BOOL v16 = (char *)__nw_create_backtrace_string();
      uint64_t v8 = __nwlog_obj();
      os_log_type_t v17 = type;
      BOOL v18 = os_log_type_enabled(v8, type);
      if (v16)
      {
        if (v18)
        {
          *(_DWORD *)int buf = 136446466;
          uint64_t v30 = "nw_framer_protocol_waiting_for_output";
          __int16 v31 = 2082;
          os_log_type_t v32 = v16;
          _os_log_impl(&dword_1830D4000, v8, v17, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v16);
        goto LABEL_49;
      }
      if (v18)
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v30 = "nw_framer_protocol_waiting_for_output";
        _os_log_impl(&dword_1830D4000, v8, v17, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v8 = __nwlog_obj();
      os_log_type_t v24 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v30 = "nw_framer_protocol_waiting_for_output";
        _os_log_impl(&dword_1830D4000, v8, v24, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_49:
  if (v7) {
    free(v7);
  }
  return 0;
}

uint64_t nw_framer_protocol_supports_external_data(nw_protocol *a1)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    id v1 = a1->handle;
    nw_framer_t v2 = v1;
    if (v1)
    {
      if (*((void *)v1 + 1))
      {
        uint64_t v3 = *((unsigned char *)v1 + 606) & 1;
LABEL_5:

        return v3;
      }
      os_log_type_t v13 = __nwlog_obj();
      *(_DWORD *)int buf = 136446210;
      os_log_type_t v29 = "nw_framer_protocol_supports_external_data";
      int v10 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v26 = 0;
      if (__nwlog_fault(v10, &type, &v26))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          int v11 = __nwlog_obj();
          os_log_type_t v14 = type;
          if (os_log_type_enabled(v11, type))
          {
            *(_DWORD *)int buf = 136446210;
            os_log_type_t v29 = "nw_framer_protocol_supports_external_data";
            _os_log_impl(&dword_1830D4000, v11, v14, "%{public}s called with null framer->parent_definition", buf, 0xCu);
          }
LABEL_57:

          goto LABEL_58;
        }
        if (!v26)
        {
          int v11 = __nwlog_obj();
          os_log_type_t v25 = type;
          if (os_log_type_enabled(v11, type))
          {
            *(_DWORD *)int buf = 136446210;
            os_log_type_t v29 = "nw_framer_protocol_supports_external_data";
            _os_log_impl(&dword_1830D4000, v11, v25, "%{public}s called with null framer->parent_definition, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_57;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        int v11 = __nwlog_obj();
        os_log_type_t v21 = type;
        BOOL v22 = os_log_type_enabled(v11, type);
        if (!backtrace_string)
        {
          if (v22)
          {
            *(_DWORD *)int buf = 136446210;
            os_log_type_t v29 = "nw_framer_protocol_supports_external_data";
            _os_log_impl(&dword_1830D4000, v11, v21, "%{public}s called with null framer->parent_definition, no backtrace", buf, 0xCu);
          }
          goto LABEL_57;
        }
        if (v22)
        {
          *(_DWORD *)int buf = 136446466;
          os_log_type_t v29 = "nw_framer_protocol_supports_external_data";
          __int16 v30 = 2082;
          __int16 v31 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v11, v21, "%{public}s called with null framer->parent_definition, dumping backtrace:%{public}s", buf, 0x16u);
        }
        goto LABEL_36;
      }
    }
    else
    {
      os_log_type_t v9 = __nwlog_obj();
      *(_DWORD *)int buf = 136446210;
      os_log_type_t v29 = "nw_framer_protocol_supports_external_data";
      int v10 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v26 = 0;
      if (__nwlog_fault(v10, &type, &v26))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          int v11 = __nwlog_obj();
          os_log_type_t v12 = type;
          if (os_log_type_enabled(v11, type))
          {
            *(_DWORD *)int buf = 136446210;
            os_log_type_t v29 = "nw_framer_protocol_supports_external_data";
            _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s called with null framer", buf, 0xCu);
          }
          goto LABEL_57;
        }
        if (!v26)
        {
          int v11 = __nwlog_obj();
          os_log_type_t v24 = type;
          if (os_log_type_enabled(v11, type))
          {
            *(_DWORD *)int buf = 136446210;
            os_log_type_t v29 = "nw_framer_protocol_supports_external_data";
            _os_log_impl(&dword_1830D4000, v11, v24, "%{public}s called with null framer, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_57;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        int v11 = __nwlog_obj();
        os_log_type_t v19 = type;
        BOOL v20 = os_log_type_enabled(v11, type);
        if (!backtrace_string)
        {
          if (v20)
          {
            *(_DWORD *)int buf = 136446210;
            os_log_type_t v29 = "nw_framer_protocol_supports_external_data";
            _os_log_impl(&dword_1830D4000, v11, v19, "%{public}s called with null framer, no backtrace", buf, 0xCu);
          }
          goto LABEL_57;
        }
        if (v20)
        {
          *(_DWORD *)int buf = 136446466;
          os_log_type_t v29 = "nw_framer_protocol_supports_external_data";
          __int16 v30 = 2082;
          __int16 v31 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v11, v19, "%{public}s called with null framer, dumping backtrace:%{public}s", buf, 0x16u);
        }
LABEL_36:

        free(backtrace_string);
      }
    }
LABEL_58:
    if (v10) {
      free(v10);
    }
    uint64_t v3 = 0;
    goto LABEL_5;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  os_log_type_t v29 = "nw_framer_protocol_supports_external_data";
  int v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v26 = 0;
  if (__nwlog_fault(v6, &type, &v26))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v29 = "nw_framer_protocol_supports_external_data";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null protocol", buf, 0xCu);
      }
    }
    else if (v26)
    {
      os_log_type_t v15 = (char *)__nw_create_backtrace_string();
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v7, type);
      if (v15)
      {
        if (v17)
        {
          *(_DWORD *)int buf = 136446466;
          os_log_type_t v29 = "nw_framer_protocol_supports_external_data";
          __int16 v30 = 2082;
          __int16 v31 = v15;
          _os_log_impl(&dword_1830D4000, v7, v16, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v15);
        goto LABEL_49;
      }
      if (v17)
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v29 = "nw_framer_protocol_supports_external_data";
        _os_log_impl(&dword_1830D4000, v7, v16, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v23 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v29 = "nw_framer_protocol_supports_external_data";
        _os_log_impl(&dword_1830D4000, v7, v23, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_49:
  if (v6) {
    free(v6);
  }
  return 0;
}

void nw_framer_protocol_get_message_properties(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    id v5 = (unsigned __int8 *)*(id *)(a1 + 40);
    int v6 = v5;
    if (v5)
    {
      if (*((void *)v5 + 1))
      {
        if (!a3)
        {
LABEL_11:

          return;
        }
        if ((~v5[608] & 3) != 0)
        {
          unsigned int v10 = a3[1] & 0xFFFFFFFC;
          *a3 = -1;
          a3[1] = v10;
          goto LABEL_11;
        }
        uint64_t v7 = *(void *)(a1 + 32);
        if (v7)
        {
          uint64_t v8 = *(void *)(v7 + 24);
          if (v8)
          {
            os_log_type_t v9 = *(void (**)(void))(v8 + 248);
            if (v9)
            {
              v9();
              goto LABEL_11;
            }
          }
        }
        os_log_type_t v21 = __nwlog_obj();
        uint64_t v22 = *(void *)(a1 + 32);
        os_log_type_t v23 = "invalid";
        if (v22)
        {
          os_log_type_t v24 = *(const char **)(v22 + 16);
          if (v24) {
            os_log_type_t v23 = v24;
          }
        }
        *(_DWORD *)int buf = 136446466;
        __int16 v58 = "nw_framer_protocol_get_message_properties";
        __int16 v59 = 2082;
        uint64_t v60 = (void *)v23;
        os_log_type_t v16 = (char *)_os_log_send_and_compose_impl();

        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v55 = 0;
        if (__nwlog_fault(v16, &type, &v55))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            os_log_type_t v25 = __nwlog_obj();
            os_log_type_t v26 = type;
            if (os_log_type_enabled(v25, type))
            {
              uint64_t v27 = *(void *)(a1 + 32);
              int v28 = "invalid";
              if (v27)
              {
                os_log_type_t v29 = *(const char **)(v27 + 16);
                if (v29) {
                  int v28 = v29;
                }
              }
              *(_DWORD *)int buf = 136446466;
              __int16 v58 = "nw_framer_protocol_get_message_properties";
              __int16 v59 = 2082;
              uint64_t v60 = (void *)v28;
              _os_log_impl(&dword_1830D4000, v25, v26, "%{public}s protocol %{public}s has invalid get_message_properties callback", buf, 0x16u);
            }
          }
          else if (v55)
          {
            backtrace_string = (char *)__nw_create_backtrace_string();
            os_log_type_t v25 = __nwlog_obj();
            os_log_type_t v40 = type;
            BOOL v41 = os_log_type_enabled(v25, type);
            if (backtrace_string)
            {
              if (v41)
              {
                uint64_t v42 = *(void *)(a1 + 32);
                uint64_t v43 = "invalid";
                if (v42)
                {
                  char v44 = *(const char **)(v42 + 16);
                  if (v44) {
                    uint64_t v43 = v44;
                  }
                }
                *(_DWORD *)int buf = 136446722;
                __int16 v58 = "nw_framer_protocol_get_message_properties";
                __int16 v59 = 2082;
                uint64_t v60 = (void *)v43;
                __int16 v61 = 2082;
                size_t v62 = backtrace_string;
                _os_log_impl(&dword_1830D4000, v25, v40, "%{public}s protocol %{public}s has invalid get_message_properties callback, dumping backtrace:%{public}s", buf, 0x20u);
              }

              free(backtrace_string);
              if (!v16) {
                goto LABEL_11;
              }
              goto LABEL_97;
            }
            if (v41)
            {
              uint64_t v52 = *(void *)(a1 + 32);
              id v53 = "invalid";
              if (v52)
              {
                uint64_t v54 = *(const char **)(v52 + 16);
                if (v54) {
                  id v53 = v54;
                }
              }
              *(_DWORD *)int buf = 136446466;
              __int16 v58 = "nw_framer_protocol_get_message_properties";
              __int16 v59 = 2082;
              uint64_t v60 = (void *)v53;
              _os_log_impl(&dword_1830D4000, v25, v40, "%{public}s protocol %{public}s has invalid get_message_properties callback, no backtrace", buf, 0x16u);
            }
          }
          else
          {
            os_log_type_t v25 = __nwlog_obj();
            os_log_type_t v48 = type;
            if (os_log_type_enabled(v25, type))
            {
              uint64_t v49 = *(void *)(a1 + 32);
              __int16 v50 = "invalid";
              if (v49)
              {
                os_log_type_t v51 = *(const char **)(v49 + 16);
                if (v51) {
                  __int16 v50 = v51;
                }
              }
              *(_DWORD *)int buf = 136446466;
              __int16 v58 = "nw_framer_protocol_get_message_properties";
              __int16 v59 = 2082;
              uint64_t v60 = (void *)v50;
              _os_log_impl(&dword_1830D4000, v25, v48, "%{public}s protocol %{public}s has invalid get_message_properties callback, backtrace limit exceeded", buf, 0x16u);
            }
          }
        }
        goto LABEL_96;
      }
      os_log_type_t v19 = __nwlog_obj();
      *(_DWORD *)int buf = 136446210;
      __int16 v58 = "nw_framer_protocol_get_message_properties";
      os_log_type_t v16 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v55 = 0;
      if (__nwlog_fault(v16, &type, &v55))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          BOOL v17 = __nwlog_obj();
          os_log_type_t v20 = type;
          if (os_log_type_enabled(v17, type))
          {
            *(_DWORD *)int buf = 136446210;
            __int16 v58 = "nw_framer_protocol_get_message_properties";
            _os_log_impl(&dword_1830D4000, v17, v20, "%{public}s called with null framer->parent_definition", buf, 0xCu);
          }
        }
        else if (v55)
        {
          BOOL v36 = (char *)__nw_create_backtrace_string();
          BOOL v17 = __nwlog_obj();
          os_log_type_t v37 = type;
          BOOL v38 = os_log_type_enabled(v17, type);
          if (v36)
          {
            if (v38)
            {
              *(_DWORD *)int buf = 136446466;
              __int16 v58 = "nw_framer_protocol_get_message_properties";
              __int16 v59 = 2082;
              uint64_t v60 = v36;
              _os_log_impl(&dword_1830D4000, v17, v37, "%{public}s called with null framer->parent_definition, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(v36);
            if (!v16) {
              goto LABEL_11;
            }
            goto LABEL_97;
          }
          if (v38)
          {
            *(_DWORD *)int buf = 136446210;
            __int16 v58 = "nw_framer_protocol_get_message_properties";
            _os_log_impl(&dword_1830D4000, v17, v37, "%{public}s called with null framer->parent_definition, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          BOOL v17 = __nwlog_obj();
          os_log_type_t v47 = type;
          if (os_log_type_enabled(v17, type))
          {
            *(_DWORD *)int buf = 136446210;
            __int16 v58 = "nw_framer_protocol_get_message_properties";
            _os_log_impl(&dword_1830D4000, v17, v47, "%{public}s called with null framer->parent_definition, backtrace limit exceeded", buf, 0xCu);
          }
        }
        goto LABEL_89;
      }
LABEL_96:
      if (!v16) {
        goto LABEL_11;
      }
LABEL_97:
      free(v16);
      goto LABEL_11;
    }
    os_log_type_t v15 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    __int16 v58 = "nw_framer_protocol_get_message_properties";
    os_log_type_t v16 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v55 = 0;
    if (!__nwlog_fault(v16, &type, &v55)) {
      goto LABEL_96;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v17 = __nwlog_obj();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v17, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v58 = "nw_framer_protocol_get_message_properties";
        _os_log_impl(&dword_1830D4000, v17, v18, "%{public}s called with null framer", buf, 0xCu);
      }
    }
    else if (v55)
    {
      uint64_t v33 = (char *)__nw_create_backtrace_string();
      BOOL v17 = __nwlog_obj();
      os_log_type_t v34 = type;
      BOOL v35 = os_log_type_enabled(v17, type);
      if (v33)
      {
        if (v35)
        {
          *(_DWORD *)int buf = 136446466;
          __int16 v58 = "nw_framer_protocol_get_message_properties";
          __int16 v59 = 2082;
          uint64_t v60 = v33;
          _os_log_impl(&dword_1830D4000, v17, v34, "%{public}s called with null framer, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v33);
        goto LABEL_96;
      }
      if (v35)
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v58 = "nw_framer_protocol_get_message_properties";
        _os_log_impl(&dword_1830D4000, v17, v34, "%{public}s called with null framer, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v17 = __nwlog_obj();
      os_log_type_t v46 = type;
      if (os_log_type_enabled(v17, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v58 = "nw_framer_protocol_get_message_properties";
        _os_log_impl(&dword_1830D4000, v17, v46, "%{public}s called with null framer, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_89:

    goto LABEL_96;
  }
  int v11 = __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  __int16 v58 = "nw_framer_protocol_get_message_properties";
  os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v55 = 0;
  if (__nwlog_fault(v12, &type, &v55))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v58 = "nw_framer_protocol_get_message_properties";
        _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s called with null protocol", buf, 0xCu);
      }
    }
    else if (v55)
    {
      __int16 v30 = (char *)__nw_create_backtrace_string();
      os_log_type_t v13 = __nwlog_obj();
      os_log_type_t v31 = type;
      BOOL v32 = os_log_type_enabled(v13, type);
      if (v30)
      {
        if (v32)
        {
          *(_DWORD *)int buf = 136446466;
          __int16 v58 = "nw_framer_protocol_get_message_properties";
          __int16 v59 = 2082;
          uint64_t v60 = v30;
          _os_log_impl(&dword_1830D4000, v13, v31, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v30);
        goto LABEL_82;
      }
      if (v32)
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v58 = "nw_framer_protocol_get_message_properties";
        _os_log_impl(&dword_1830D4000, v13, v31, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v13 = __nwlog_obj();
      os_log_type_t v45 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v58 = "nw_framer_protocol_get_message_properties";
        _os_log_impl(&dword_1830D4000, v13, v45, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_82:
  if (v12) {
    free(v12);
  }
}

void sub_18367FEB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_framer_protocol_link_state(nw_protocol *a1, nw_protocol *a2, void *a3)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  if (!v5)
  {
    os_log_type_t v12 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v43 = "nw_framer_protocol_link_state";
    os_log_type_t v13 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v40 = 0;
    if (!__nwlog_fault(v13, &type, &v40)) {
      goto LABEL_73;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v43 = "nw_framer_protocol_link_state";
        _os_log_impl(&dword_1830D4000, v14, v15, "%{public}s called with null link_info", buf, 0xCu);
      }
    }
    else if (v40)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v14 = __nwlog_obj();
      os_log_type_t v25 = type;
      BOOL v26 = os_log_type_enabled(v14, type);
      if (backtrace_string)
      {
        if (v26)
        {
          *(_DWORD *)int buf = 136446466;
          uint64_t v43 = "nw_framer_protocol_link_state";
          __int16 v44 = 2082;
          os_log_type_t v45 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v14, v25, "%{public}s called with null link_info, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_73:
        if (!v13) {
          goto LABEL_12;
        }
LABEL_74:
        free(v13);
        goto LABEL_12;
      }
      if (v26)
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v43 = "nw_framer_protocol_link_state";
        _os_log_impl(&dword_1830D4000, v14, v25, "%{public}s called with null link_info, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v14 = __nwlog_obj();
      os_log_type_t v36 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v43 = "nw_framer_protocol_link_state";
        _os_log_impl(&dword_1830D4000, v14, v36, "%{public}s called with null link_info, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_72:

    goto LABEL_73;
  }
  if (a1)
  {
    int v6 = a1->handle;
    uint64_t v7 = v6;
    if (v6)
    {
      if (*((void *)v6 + 1))
      {
        uint64_t v8 = v5;
        int v9 = v8[2];

        if (v9 == 1)
        {
          char v11 = v7[606] | 0x20;
        }
        else
        {
          if (v9) {
            goto LABEL_11;
          }
          char v10 = v7[606];
          v7[606] = v10 & 0xDF;
          if ((v10 & 0x40) == 0) {
            goto LABEL_11;
          }
          nw_framer_protocol_output_available(a1, a2);
          char v11 = v7[606] & 0xBF;
        }
        v7[606] = v11;
LABEL_11:

        goto LABEL_12;
      }
      uint64_t v22 = __nwlog_obj();
      *(_DWORD *)int buf = 136446210;
      uint64_t v43 = "nw_framer_protocol_link_state";
      os_log_type_t v19 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v40 = 0;
      if (!__nwlog_fault(v19, &type, &v40)) {
        goto LABEL_81;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v20 = __nwlog_obj();
        os_log_type_t v23 = type;
        if (os_log_type_enabled(v20, type))
        {
          *(_DWORD *)int buf = 136446210;
          uint64_t v43 = "nw_framer_protocol_link_state";
          _os_log_impl(&dword_1830D4000, v20, v23, "%{public}s called with null framer->parent_definition", buf, 0xCu);
        }
      }
      else if (v40)
      {
        uint64_t v33 = (char *)__nw_create_backtrace_string();
        os_log_type_t v20 = __nwlog_obj();
        os_log_type_t v34 = type;
        BOOL v35 = os_log_type_enabled(v20, type);
        if (v33)
        {
          if (v35)
          {
            *(_DWORD *)int buf = 136446466;
            uint64_t v43 = "nw_framer_protocol_link_state";
            __int16 v44 = 2082;
            os_log_type_t v45 = v33;
            _os_log_impl(&dword_1830D4000, v20, v34, "%{public}s called with null framer->parent_definition, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v33);
          if (!v19) {
            goto LABEL_11;
          }
          goto LABEL_82;
        }
        if (v35)
        {
          *(_DWORD *)int buf = 136446210;
          uint64_t v43 = "nw_framer_protocol_link_state";
          _os_log_impl(&dword_1830D4000, v20, v34, "%{public}s called with null framer->parent_definition, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        os_log_type_t v20 = __nwlog_obj();
        os_log_type_t v39 = type;
        if (os_log_type_enabled(v20, type))
        {
          *(_DWORD *)int buf = 136446210;
          uint64_t v43 = "nw_framer_protocol_link_state";
          _os_log_impl(&dword_1830D4000, v20, v39, "%{public}s called with null framer->parent_definition, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
    else
    {
      os_log_type_t v18 = __nwlog_obj();
      *(_DWORD *)int buf = 136446210;
      uint64_t v43 = "nw_framer_protocol_link_state";
      os_log_type_t v19 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v40 = 0;
      if (!__nwlog_fault(v19, &type, &v40)) {
        goto LABEL_81;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v20 = __nwlog_obj();
        os_log_type_t v21 = type;
        if (os_log_type_enabled(v20, type))
        {
          *(_DWORD *)int buf = 136446210;
          uint64_t v43 = "nw_framer_protocol_link_state";
          _os_log_impl(&dword_1830D4000, v20, v21, "%{public}s called with null framer", buf, 0xCu);
        }
      }
      else if (v40)
      {
        __int16 v30 = (char *)__nw_create_backtrace_string();
        os_log_type_t v20 = __nwlog_obj();
        os_log_type_t v31 = type;
        BOOL v32 = os_log_type_enabled(v20, type);
        if (v30)
        {
          if (v32)
          {
            *(_DWORD *)int buf = 136446466;
            uint64_t v43 = "nw_framer_protocol_link_state";
            __int16 v44 = 2082;
            os_log_type_t v45 = v30;
            _os_log_impl(&dword_1830D4000, v20, v31, "%{public}s called with null framer, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v30);
LABEL_81:
          if (!v19) {
            goto LABEL_11;
          }
LABEL_82:
          free(v19);
          goto LABEL_11;
        }
        if (v32)
        {
          *(_DWORD *)int buf = 136446210;
          uint64_t v43 = "nw_framer_protocol_link_state";
          _os_log_impl(&dword_1830D4000, v20, v31, "%{public}s called with null framer, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        os_log_type_t v20 = __nwlog_obj();
        os_log_type_t v38 = type;
        if (os_log_type_enabled(v20, type))
        {
          *(_DWORD *)int buf = 136446210;
          uint64_t v43 = "nw_framer_protocol_link_state";
          _os_log_impl(&dword_1830D4000, v20, v38, "%{public}s called with null framer, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }

    goto LABEL_81;
  }
  os_log_type_t v16 = __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  uint64_t v43 = "nw_framer_protocol_link_state";
  os_log_type_t v13 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v40 = 0;
  if (!__nwlog_fault(v13, &type, &v40)) {
    goto LABEL_73;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    os_log_type_t v14 = __nwlog_obj();
    os_log_type_t v17 = type;
    if (os_log_type_enabled(v14, type))
    {
      *(_DWORD *)int buf = 136446210;
      uint64_t v43 = "nw_framer_protocol_link_state";
      _os_log_impl(&dword_1830D4000, v14, v17, "%{public}s called with null protocol", buf, 0xCu);
    }
    goto LABEL_72;
  }
  if (!v40)
  {
    os_log_type_t v14 = __nwlog_obj();
    os_log_type_t v37 = type;
    if (os_log_type_enabled(v14, type))
    {
      *(_DWORD *)int buf = 136446210;
      uint64_t v43 = "nw_framer_protocol_link_state";
      _os_log_impl(&dword_1830D4000, v14, v37, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_72;
  }
  uint64_t v27 = (char *)__nw_create_backtrace_string();
  os_log_type_t v14 = __nwlog_obj();
  os_log_type_t v28 = type;
  BOOL v29 = os_log_type_enabled(v14, type);
  if (!v27)
  {
    if (v29)
    {
      *(_DWORD *)int buf = 136446210;
      uint64_t v43 = "nw_framer_protocol_link_state";
      _os_log_impl(&dword_1830D4000, v14, v28, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
    }
    goto LABEL_72;
  }
  if (v29)
  {
    *(_DWORD *)int buf = 136446466;
    uint64_t v43 = "nw_framer_protocol_link_state";
    __int16 v44 = 2082;
    os_log_type_t v45 = v27;
    _os_log_impl(&dword_1830D4000, v14, v28, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v27);
  if (v13) {
    goto LABEL_74;
  }
LABEL_12:
}

void sub_1836807DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_framer_protocol_disconnected(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v3 = a1->handle;
    uint64_t v4 = v3;
    if (v3)
    {
      if (v3[1])
      {
        if (gLogDatapath)
        {
          os_log_type_t v20 = __nwlog_obj();
          if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)int buf = 136446466;
            os_log_type_t v37 = "nw_framer_protocol_disconnected";
            __int16 v38 = 2080;
            os_log_type_t v39 = (char *)v4 + 609;
            _os_log_impl(&dword_1830D4000, v20, OS_LOG_TYPE_DEBUG, "%{public}s %s Disconnected from output handler", buf, 0x16u);
          }
        }
        nw_protocol_remove_instance((uint64_t)a1);
        int v5 = *((char *)v4 + 607);
        if (v5 < 0)
        {
          if (gLogDatapath)
          {
            __int16 v30 = __nwlog_obj();
            if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)int buf = 136446466;
              os_log_type_t v37 = "nw_framer_protocol_disconnected";
              __int16 v38 = 2080;
              os_log_type_t v39 = (char *)v4 + 609;
              _os_log_impl(&dword_1830D4000, v30, OS_LOG_TYPE_DEBUG, "%{public}s %s Framer is already failed, not calling stop", buf, 0x16u);
            }
          }
        }
        else
        {
          *((unsigned char *)v4 + 607) = v5 | 0x80;
          uint64_t v6 = v4[53];
          if (v6) {
            (*(void (**)(uint64_t, void *))(v6 + 16))(v6, v4);
          }
          uint64_t v7 = v4[42];
          if (v7)
          {
            uint64_t v8 = *(void *)(v7 + 24);
            if (v8)
            {
              int v9 = *(void (**)(void))(v8 + 48);
              if (v9) {
                v9();
              }
            }
          }
        }
        goto LABEL_13;
      }
      os_log_type_t v18 = __nwlog_obj();
      *(_DWORD *)int buf = 136446210;
      os_log_type_t v37 = "nw_framer_protocol_disconnected";
      os_log_type_t v15 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v34 = 0;
      if (__nwlog_fault(v15, &type, &v34))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          os_log_type_t v16 = __nwlog_obj();
          os_log_type_t v19 = type;
          if (os_log_type_enabled(v16, type))
          {
            *(_DWORD *)int buf = 136446210;
            os_log_type_t v37 = "nw_framer_protocol_disconnected";
            _os_log_impl(&dword_1830D4000, v16, v19, "%{public}s called with null framer->parent_definition", buf, 0xCu);
          }
        }
        else if (v34)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          os_log_type_t v16 = __nwlog_obj();
          os_log_type_t v28 = type;
          BOOL v29 = os_log_type_enabled(v16, type);
          if (backtrace_string)
          {
            if (v29)
            {
              *(_DWORD *)int buf = 136446466;
              os_log_type_t v37 = "nw_framer_protocol_disconnected";
              __int16 v38 = 2082;
              os_log_type_t v39 = backtrace_string;
              _os_log_impl(&dword_1830D4000, v16, v28, "%{public}s called with null framer->parent_definition, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(backtrace_string);
            if (!v15) {
              goto LABEL_13;
            }
            goto LABEL_73;
          }
          if (v29)
          {
            *(_DWORD *)int buf = 136446210;
            os_log_type_t v37 = "nw_framer_protocol_disconnected";
            _os_log_impl(&dword_1830D4000, v16, v28, "%{public}s called with null framer->parent_definition, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          os_log_type_t v16 = __nwlog_obj();
          os_log_type_t v33 = type;
          if (os_log_type_enabled(v16, type))
          {
            *(_DWORD *)int buf = 136446210;
            os_log_type_t v37 = "nw_framer_protocol_disconnected";
            _os_log_impl(&dword_1830D4000, v16, v33, "%{public}s called with null framer->parent_definition, backtrace limit exceeded", buf, 0xCu);
          }
        }
        goto LABEL_71;
      }
LABEL_72:
      if (!v15)
      {
LABEL_13:

        return;
      }
LABEL_73:
      free(v15);
      goto LABEL_13;
    }
    os_log_type_t v14 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v37 = "nw_framer_protocol_disconnected";
    os_log_type_t v15 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v34 = 0;
    if (!__nwlog_fault(v15, &type, &v34)) {
      goto LABEL_72;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v16 = __nwlog_obj();
      os_log_type_t v17 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v37 = "nw_framer_protocol_disconnected";
        _os_log_impl(&dword_1830D4000, v16, v17, "%{public}s called with null framer", buf, 0xCu);
      }
    }
    else if (v34)
    {
      os_log_type_t v24 = (char *)__nw_create_backtrace_string();
      os_log_type_t v16 = __nwlog_obj();
      os_log_type_t v25 = type;
      BOOL v26 = os_log_type_enabled(v16, type);
      if (v24)
      {
        if (v26)
        {
          *(_DWORD *)int buf = 136446466;
          os_log_type_t v37 = "nw_framer_protocol_disconnected";
          __int16 v38 = 2082;
          os_log_type_t v39 = v24;
          _os_log_impl(&dword_1830D4000, v16, v25, "%{public}s called with null framer, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v24);
        goto LABEL_72;
      }
      if (v26)
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v37 = "nw_framer_protocol_disconnected";
        _os_log_impl(&dword_1830D4000, v16, v25, "%{public}s called with null framer, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v16 = __nwlog_obj();
      os_log_type_t v32 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v37 = "nw_framer_protocol_disconnected";
        _os_log_impl(&dword_1830D4000, v16, v32, "%{public}s called with null framer, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_71:

    goto LABEL_72;
  }
  char v10 = __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  os_log_type_t v37 = "nw_framer_protocol_disconnected";
  char v11 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v34 = 0;
  if (__nwlog_fault(v11, &type, &v34))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v37 = "nw_framer_protocol_disconnected";
        _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s called with null protocol", buf, 0xCu);
      }
    }
    else if (v34)
    {
      os_log_type_t v21 = (char *)__nw_create_backtrace_string();
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v22 = type;
      BOOL v23 = os_log_type_enabled(v12, type);
      if (v21)
      {
        if (v23)
        {
          *(_DWORD *)int buf = 136446466;
          os_log_type_t v37 = "nw_framer_protocol_disconnected";
          __int16 v38 = 2082;
          os_log_type_t v39 = v21;
          _os_log_impl(&dword_1830D4000, v12, v22, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v21);
        goto LABEL_64;
      }
      if (v23)
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v37 = "nw_framer_protocol_disconnected";
        _os_log_impl(&dword_1830D4000, v12, v22, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v31 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v37 = "nw_framer_protocol_disconnected";
        _os_log_impl(&dword_1830D4000, v12, v31, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_64:
  if (v11) {
    free(v11);
  }
}

void sub_183680FE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_framer_protocol_disconnect(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v4 = a1->handle;
    int v5 = v4;
    if (v4)
    {
      if (v4[1])
      {
        if (gLogDatapath)
        {
          os_log_type_t v22 = __nwlog_obj();
          if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)int buf = 136446466;
            __int16 v38 = "nw_framer_protocol_disconnect";
            __int16 v39 = 2080;
            uint64_t v40 = (char *)v5 + 609;
            _os_log_impl(&dword_1830D4000, v22, OS_LOG_TYPE_DEBUG, "%{public}s %s Disconnect from input handler", buf, 0x16u);
          }
        }
        uint64_t v6 = v5[53];
        if (!v6 || (*(unsigned int (**)(uint64_t, void *))(v6 + 16))(v6, v5))
        {
          *((unsigned char *)v5 + 607) |= 0x80u;
          if (a2)
          {
            callbacks = a2->callbacks;
            if (callbacks)
            {
              disconnected = (void (*)(nw_protocol *, nw_protocol *))callbacks->disconnected;
              if (disconnected) {
                disconnected(a2, a1);
              }
            }
          }
          uint64_t v9 = v5[40];
          if (v9)
          {
            uint64_t v10 = *(void *)(v9 + 24);
            if (v10)
            {
              char v11 = *(void (**)(void))(v10 + 32);
              if (v11) {
                v11();
              }
            }
          }
        }
        goto LABEL_15;
      }
      os_log_type_t v20 = __nwlog_obj();
      *(_DWORD *)int buf = 136446210;
      __int16 v38 = "nw_framer_protocol_disconnect";
      os_log_type_t v17 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v35 = 0;
      if (__nwlog_fault(v17, &type, &v35))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          os_log_type_t v18 = __nwlog_obj();
          os_log_type_t v21 = type;
          if (os_log_type_enabled(v18, type))
          {
            *(_DWORD *)int buf = 136446210;
            __int16 v38 = "nw_framer_protocol_disconnect";
            _os_log_impl(&dword_1830D4000, v18, v21, "%{public}s called with null framer->parent_definition", buf, 0xCu);
          }
        }
        else if (v35)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          os_log_type_t v18 = __nwlog_obj();
          os_log_type_t v30 = type;
          BOOL v31 = os_log_type_enabled(v18, type);
          if (backtrace_string)
          {
            if (v31)
            {
              *(_DWORD *)int buf = 136446466;
              __int16 v38 = "nw_framer_protocol_disconnect";
              __int16 v39 = 2082;
              uint64_t v40 = backtrace_string;
              _os_log_impl(&dword_1830D4000, v18, v30, "%{public}s called with null framer->parent_definition, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(backtrace_string);
            if (!v17) {
              goto LABEL_15;
            }
            goto LABEL_72;
          }
          if (v31)
          {
            *(_DWORD *)int buf = 136446210;
            __int16 v38 = "nw_framer_protocol_disconnect";
            _os_log_impl(&dword_1830D4000, v18, v30, "%{public}s called with null framer->parent_definition, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          os_log_type_t v18 = __nwlog_obj();
          os_log_type_t v34 = type;
          if (os_log_type_enabled(v18, type))
          {
            *(_DWORD *)int buf = 136446210;
            __int16 v38 = "nw_framer_protocol_disconnect";
            _os_log_impl(&dword_1830D4000, v18, v34, "%{public}s called with null framer->parent_definition, backtrace limit exceeded", buf, 0xCu);
          }
        }
        goto LABEL_70;
      }
LABEL_71:
      if (!v17)
      {
LABEL_15:

        return;
      }
LABEL_72:
      free(v17);
      goto LABEL_15;
    }
    os_log_type_t v16 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    __int16 v38 = "nw_framer_protocol_disconnect";
    os_log_type_t v17 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v35 = 0;
    if (!__nwlog_fault(v17, &type, &v35)) {
      goto LABEL_71;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v18 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v38 = "nw_framer_protocol_disconnect";
        _os_log_impl(&dword_1830D4000, v18, v19, "%{public}s called with null framer", buf, 0xCu);
      }
    }
    else if (v35)
    {
      BOOL v26 = (char *)__nw_create_backtrace_string();
      os_log_type_t v18 = __nwlog_obj();
      os_log_type_t v27 = type;
      BOOL v28 = os_log_type_enabled(v18, type);
      if (v26)
      {
        if (v28)
        {
          *(_DWORD *)int buf = 136446466;
          __int16 v38 = "nw_framer_protocol_disconnect";
          __int16 v39 = 2082;
          uint64_t v40 = v26;
          _os_log_impl(&dword_1830D4000, v18, v27, "%{public}s called with null framer, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v26);
        goto LABEL_71;
      }
      if (v28)
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v38 = "nw_framer_protocol_disconnect";
        _os_log_impl(&dword_1830D4000, v18, v27, "%{public}s called with null framer, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v18 = __nwlog_obj();
      os_log_type_t v33 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v38 = "nw_framer_protocol_disconnect";
        _os_log_impl(&dword_1830D4000, v18, v33, "%{public}s called with null framer, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_70:

    goto LABEL_71;
  }
  os_log_type_t v12 = __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  __int16 v38 = "nw_framer_protocol_disconnect";
  os_log_type_t v13 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v35 = 0;
  if (__nwlog_fault(v13, &type, &v35))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v38 = "nw_framer_protocol_disconnect";
        _os_log_impl(&dword_1830D4000, v14, v15, "%{public}s called with null protocol", buf, 0xCu);
      }
    }
    else if (v35)
    {
      BOOL v23 = (char *)__nw_create_backtrace_string();
      os_log_type_t v14 = __nwlog_obj();
      os_log_type_t v24 = type;
      BOOL v25 = os_log_type_enabled(v14, type);
      if (v23)
      {
        if (v25)
        {
          *(_DWORD *)int buf = 136446466;
          __int16 v38 = "nw_framer_protocol_disconnect";
          __int16 v39 = 2082;
          uint64_t v40 = v23;
          _os_log_impl(&dword_1830D4000, v14, v24, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v23);
        goto LABEL_63;
      }
      if (v25)
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v38 = "nw_framer_protocol_disconnect";
        _os_log_impl(&dword_1830D4000, v14, v24, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v14 = __nwlog_obj();
      os_log_type_t v32 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v38 = "nw_framer_protocol_disconnect";
        _os_log_impl(&dword_1830D4000, v14, v32, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_63:
  if (v13) {
    free(v13);
  }
}

void sub_183681798(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_framer_protocol_connected(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v4 = a1->handle;
    int v5 = v4;
    if (v4)
    {
      if (v4[1])
      {
        uint64_t default_input_handler = a1->default_input_handler;
        if (default_input_handler)
        {
          callbacks = default_input_handler->callbacks;
          if (callbacks)
          {
            connected = (void (*)(void))callbacks->connected;
            if (connected) {
              connected();
            }
          }
        }
        if (a1->output_handler == a2)
        {
          char v9 = *((unsigned char *)v5 + 606);
          if ((v9 & 8) != 0)
          {
            if ((*((unsigned char *)v5 + 606) & 0x10) != 0)
            {
              os_log_type_t v12 = a1->default_input_handler;
              if (v12)
              {
                os_log_type_t v13 = v12->callbacks;
                if (v13)
                {
                  os_log_type_t v14 = (void (*)(void))v13->connected;
                  if (v14) {
                    v14();
                  }
                }
              }
            }
          }
          else
          {
            *(void *)os_log_type_t type = 0;
            if (a2)
            {
              uint64_t v10 = a2->callbacks;
              if (v10)
              {
                uint64_t v10 = (nw_protocol_callbacks *)v10->get_message_properties;
                if (v10)
                {
                  ((void (*)(nw_protocol *, nw_protocol *, os_log_type_t *))v10)(a2, a1, type);
                  LOBYTE(v10) = type[4];
                  char v9 = *((unsigned char *)v5 + 606);
                }
              }
            }
            else
            {
              LOBYTE(v10) = 0;
            }
            *((unsigned char *)v5 + 606) = (2 * (v10 & 1)) | v9 & 0xFD;
            if ((v10 & 1) != 0 && gLogDatapath)
            {
              os_log_type_t v37 = __nwlog_obj();
              if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)int buf = 136446466;
                uint64_t v41 = "nw_framer_protocol_connected";
                __int16 v42 = 2080;
                uint64_t v43 = (char *)v5 + 609;
                _os_log_impl(&dword_1830D4000, v37, OS_LOG_TYPE_DEBUG, "%{public}s %s Output frames will be treated as separate messages", buf, 0x16u);
              }
            }
            uint64_t v11 = v5[49];
            if (v11)
            {
              *((unsigned char *)v5 + 606) |= 0xCu;
              if ((*(unsigned int (**)(uint64_t, void *))(v11 + 16))(v11, v5) == 1) {
                nw_framer_mark_ready((nw_framer_t)v5);
              }
              *((unsigned char *)v5 + 606) &= ~4u;
              nw_framer_input_loop((NWConcrete_nw_framer *)v5);
            }
            else
            {
              nw_framer_mark_failed_with_error((nw_framer_t)v5, 22);
            }
          }
        }
        goto LABEL_9;
      }
      BOOL v23 = __nwlog_obj();
      *(_DWORD *)int buf = 136446210;
      uint64_t v41 = "nw_framer_protocol_connected";
      os_log_type_t v20 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      char v39 = 0;
      if (__nwlog_fault(v20, type, &v39))
      {
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          os_log_type_t v21 = __nwlog_obj();
          os_log_type_t v24 = type[0];
          if (os_log_type_enabled(v21, type[0]))
          {
            *(_DWORD *)int buf = 136446210;
            uint64_t v41 = "nw_framer_protocol_connected";
            _os_log_impl(&dword_1830D4000, v21, v24, "%{public}s called with null framer->parent_definition", buf, 0xCu);
          }
        }
        else if (v39)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          os_log_type_t v21 = __nwlog_obj();
          os_log_type_t v32 = type[0];
          BOOL v33 = os_log_type_enabled(v21, type[0]);
          if (backtrace_string)
          {
            if (v33)
            {
              *(_DWORD *)int buf = 136446466;
              uint64_t v41 = "nw_framer_protocol_connected";
              __int16 v42 = 2082;
              uint64_t v43 = backtrace_string;
              _os_log_impl(&dword_1830D4000, v21, v32, "%{public}s called with null framer->parent_definition, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(backtrace_string);
            if (!v20) {
              goto LABEL_9;
            }
            goto LABEL_81;
          }
          if (v33)
          {
            *(_DWORD *)int buf = 136446210;
            uint64_t v41 = "nw_framer_protocol_connected";
            _os_log_impl(&dword_1830D4000, v21, v32, "%{public}s called with null framer->parent_definition, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          os_log_type_t v21 = __nwlog_obj();
          os_log_type_t v36 = type[0];
          if (os_log_type_enabled(v21, type[0]))
          {
            *(_DWORD *)int buf = 136446210;
            uint64_t v41 = "nw_framer_protocol_connected";
            _os_log_impl(&dword_1830D4000, v21, v36, "%{public}s called with null framer->parent_definition, backtrace limit exceeded", buf, 0xCu);
          }
        }
        goto LABEL_79;
      }
LABEL_80:
      if (!v20)
      {
LABEL_9:

        return;
      }
LABEL_81:
      free(v20);
      goto LABEL_9;
    }
    os_log_type_t v19 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v41 = "nw_framer_protocol_connected";
    os_log_type_t v20 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    char v39 = 0;
    if (!__nwlog_fault(v20, type, &v39)) {
      goto LABEL_80;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v21 = __nwlog_obj();
      os_log_type_t v22 = type[0];
      if (os_log_type_enabled(v21, type[0]))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v41 = "nw_framer_protocol_connected";
        _os_log_impl(&dword_1830D4000, v21, v22, "%{public}s called with null framer", buf, 0xCu);
      }
    }
    else if (v39)
    {
      BOOL v28 = (char *)__nw_create_backtrace_string();
      os_log_type_t v21 = __nwlog_obj();
      os_log_type_t v29 = type[0];
      BOOL v30 = os_log_type_enabled(v21, type[0]);
      if (v28)
      {
        if (v30)
        {
          *(_DWORD *)int buf = 136446466;
          uint64_t v41 = "nw_framer_protocol_connected";
          __int16 v42 = 2082;
          uint64_t v43 = v28;
          _os_log_impl(&dword_1830D4000, v21, v29, "%{public}s called with null framer, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v28);
        goto LABEL_80;
      }
      if (v30)
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v41 = "nw_framer_protocol_connected";
        _os_log_impl(&dword_1830D4000, v21, v29, "%{public}s called with null framer, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v21 = __nwlog_obj();
      os_log_type_t v35 = type[0];
      if (os_log_type_enabled(v21, type[0]))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v41 = "nw_framer_protocol_connected";
        _os_log_impl(&dword_1830D4000, v21, v35, "%{public}s called with null framer, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_79:

    goto LABEL_80;
  }
  os_log_type_t v15 = __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  uint64_t v41 = "nw_framer_protocol_connected";
  os_log_type_t v16 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  char v39 = 0;
  if (__nwlog_fault(v16, type, &v39))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v17 = __nwlog_obj();
      os_log_type_t v18 = type[0];
      if (os_log_type_enabled(v17, type[0]))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v41 = "nw_framer_protocol_connected";
        _os_log_impl(&dword_1830D4000, v17, v18, "%{public}s called with null protocol", buf, 0xCu);
      }
    }
    else if (v39)
    {
      BOOL v25 = (char *)__nw_create_backtrace_string();
      os_log_type_t v17 = __nwlog_obj();
      os_log_type_t v26 = type[0];
      BOOL v27 = os_log_type_enabled(v17, type[0]);
      if (v25)
      {
        if (v27)
        {
          *(_DWORD *)int buf = 136446466;
          uint64_t v41 = "nw_framer_protocol_connected";
          __int16 v42 = 2082;
          uint64_t v43 = v25;
          _os_log_impl(&dword_1830D4000, v17, v26, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v25);
        goto LABEL_72;
      }
      if (v27)
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v41 = "nw_framer_protocol_connected";
        _os_log_impl(&dword_1830D4000, v17, v26, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v17 = __nwlog_obj();
      os_log_type_t v34 = type[0];
      if (os_log_type_enabled(v17, type[0]))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v41 = "nw_framer_protocol_connected";
        _os_log_impl(&dword_1830D4000, v17, v34, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_72:
  if (v16) {
    free(v16);
  }
}

void sub_183681FE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_framer_protocol_connect(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v3 = a1->handle;
    uint64_t v4 = v3;
    if (v3)
    {
      if (v3[1])
      {
        uint64_t output_handler = a1->output_handler;
        if (output_handler)
        {
          callbacks = output_handler->callbacks;
          if (callbacks)
          {
            if (callbacks->connect)
            {
              uint64_t v7 = nw_protocol_connect((uint64_t)output_handler, (uint64_t)a1);
LABEL_8:

              return v7;
            }
          }
        }
        char v9 = (void *)v4[45];
        if (v9 && nw_parameters_is_custom_protocols_only(v9))
        {
          nw_framer_protocol_connected(a1, 0);
          uint64_t v7 = 1;
          goto LABEL_8;
        }
LABEL_66:
        uint64_t v7 = 0;
        goto LABEL_8;
      }
      os_log_type_t v18 = __nwlog_obj();
      *(_DWORD *)int buf = 136446210;
      os_log_type_t v34 = "nw_framer_protocol_connect";
      os_log_type_t v15 = (void *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v31 = 0;
      if (!__nwlog_fault((const char *)v15, &type, &v31))
      {
LABEL_64:
        if (v15) {
          free(v15);
        }
        goto LABEL_66;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v16 = __nwlog_obj();
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v16, type))
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v34 = "nw_framer_protocol_connect";
          _os_log_impl(&dword_1830D4000, v16, v19, "%{public}s called with null framer->parent_definition", buf, 0xCu);
        }
LABEL_63:

        goto LABEL_64;
      }
      if (!v31)
      {
        os_log_type_t v16 = __nwlog_obj();
        os_log_type_t v30 = type;
        if (os_log_type_enabled(v16, type))
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v34 = "nw_framer_protocol_connect";
          _os_log_impl(&dword_1830D4000, v16, v30, "%{public}s called with null framer->parent_definition, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_63;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v16 = __nwlog_obj();
      os_log_type_t v26 = type;
      BOOL v27 = os_log_type_enabled(v16, type);
      if (!backtrace_string)
      {
        if (v27)
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v34 = "nw_framer_protocol_connect";
          _os_log_impl(&dword_1830D4000, v16, v26, "%{public}s called with null framer->parent_definition, no backtrace", buf, 0xCu);
        }
        goto LABEL_63;
      }
      if (v27)
      {
        *(_DWORD *)int buf = 136446466;
        os_log_type_t v34 = "nw_framer_protocol_connect";
        __int16 v35 = 2082;
        os_log_type_t v36 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v16, v26, "%{public}s called with null framer->parent_definition, dumping backtrace:%{public}s", buf, 0x16u);
      }
    }
    else
    {
      os_log_type_t v14 = __nwlog_obj();
      *(_DWORD *)int buf = 136446210;
      os_log_type_t v34 = "nw_framer_protocol_connect";
      os_log_type_t v15 = (void *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v31 = 0;
      if (!__nwlog_fault((const char *)v15, &type, &v31)) {
        goto LABEL_64;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v16 = __nwlog_obj();
        os_log_type_t v17 = type;
        if (os_log_type_enabled(v16, type))
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v34 = "nw_framer_protocol_connect";
          _os_log_impl(&dword_1830D4000, v16, v17, "%{public}s called with null framer", buf, 0xCu);
        }
        goto LABEL_63;
      }
      if (!v31)
      {
        os_log_type_t v16 = __nwlog_obj();
        os_log_type_t v29 = type;
        if (os_log_type_enabled(v16, type))
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v34 = "nw_framer_protocol_connect";
          _os_log_impl(&dword_1830D4000, v16, v29, "%{public}s called with null framer, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_63;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v16 = __nwlog_obj();
      os_log_type_t v24 = type;
      BOOL v25 = os_log_type_enabled(v16, type);
      if (!backtrace_string)
      {
        if (v25)
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v34 = "nw_framer_protocol_connect";
          _os_log_impl(&dword_1830D4000, v16, v24, "%{public}s called with null framer, no backtrace", buf, 0xCu);
        }
        goto LABEL_63;
      }
      if (v25)
      {
        *(_DWORD *)int buf = 136446466;
        os_log_type_t v34 = "nw_framer_protocol_connect";
        __int16 v35 = 2082;
        os_log_type_t v36 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v16, v24, "%{public}s called with null framer, dumping backtrace:%{public}s", buf, 0x16u);
      }
    }

    free(backtrace_string);
    goto LABEL_64;
  }
  uint64_t v10 = __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  os_log_type_t v34 = "nw_framer_protocol_connect";
  uint64_t v11 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v31 = 0;
  if (__nwlog_fault(v11, &type, &v31))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v34 = "nw_framer_protocol_connect";
        _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s called with null protocol", buf, 0xCu);
      }
    }
    else if (v31)
    {
      os_log_type_t v20 = (char *)__nw_create_backtrace_string();
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v21 = type;
      BOOL v22 = os_log_type_enabled(v12, type);
      if (v20)
      {
        if (v22)
        {
          *(_DWORD *)int buf = 136446466;
          os_log_type_t v34 = "nw_framer_protocol_connect";
          __int16 v35 = 2082;
          os_log_type_t v36 = v20;
          _os_log_impl(&dword_1830D4000, v12, v21, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v20);
        goto LABEL_55;
      }
      if (v22)
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v34 = "nw_framer_protocol_connect";
        _os_log_impl(&dword_1830D4000, v12, v21, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v28 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v34 = "nw_framer_protocol_connect";
        _os_log_impl(&dword_1830D4000, v12, v28, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_55:
  if (v11) {
    free(v11);
  }
  return 0;
}

void sub_1836826FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_framer_protocol_remove_input_handler(nw_protocol *a1, nw_protocol *a2, int a3)
{
  uint64_t v79 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    os_log_type_t v47 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_framer_protocol_remove_input_handler";
    os_log_type_t v48 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v73 = 0;
    if (__nwlog_fault(v48, &type, &v73))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v49 = __nwlog_obj();
        os_log_type_t v50 = type;
        if (os_log_type_enabled(v49, type))
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_framer_protocol_remove_input_handler";
          _os_log_impl(&dword_1830D4000, v49, v50, "%{public}s called with null protocol", buf, 0xCu);
        }
      }
      else if (v73)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        uint64_t v49 = __nwlog_obj();
        os_log_type_t v59 = type;
        BOOL v60 = os_log_type_enabled(v49, type);
        if (backtrace_string)
        {
          if (v60)
          {
            *(_DWORD *)int buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_framer_protocol_remove_input_handler";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = backtrace_string;
            _os_log_impl(&dword_1830D4000, v49, v59, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_111;
        }
        if (v60)
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_framer_protocol_remove_input_handler";
          _os_log_impl(&dword_1830D4000, v49, v59, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        uint64_t v49 = __nwlog_obj();
        os_log_type_t v69 = type;
        if (os_log_type_enabled(v49, type))
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_framer_protocol_remove_input_handler";
          _os_log_impl(&dword_1830D4000, v49, v69, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_111:
    if (v48) {
      free(v48);
    }
    return 0;
  }
  uint64_t v6 = a1->handle;
  uint64_t v7 = v6;
  if (!v6)
  {
    os_log_type_t v51 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_framer_protocol_remove_input_handler";
    uint64_t v52 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v73 = 0;
    if (!__nwlog_fault(v52, &type, &v73)) {
      goto LABEL_120;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v53 = __nwlog_obj();
      os_log_type_t v54 = type;
      if (os_log_type_enabled(v53, type))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_framer_protocol_remove_input_handler";
        _os_log_impl(&dword_1830D4000, v53, v54, "%{public}s called with null framer", buf, 0xCu);
      }
      goto LABEL_119;
    }
    if (!v73)
    {
      id v53 = __nwlog_obj();
      os_log_type_t v70 = type;
      if (os_log_type_enabled(v53, type))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_framer_protocol_remove_input_handler";
        _os_log_impl(&dword_1830D4000, v53, v70, "%{public}s called with null framer, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_119;
    }
    __int16 v61 = (char *)__nw_create_backtrace_string();
    id v53 = __nwlog_obj();
    os_log_type_t v62 = type;
    BOOL v63 = os_log_type_enabled(v53, type);
    if (!v61)
    {
      if (v63)
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_framer_protocol_remove_input_handler";
        _os_log_impl(&dword_1830D4000, v53, v62, "%{public}s called with null framer, no backtrace", buf, 0xCu);
      }
      goto LABEL_119;
    }
    if (v63)
    {
      *(_DWORD *)int buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_framer_protocol_remove_input_handler";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v61;
      _os_log_impl(&dword_1830D4000, v53, v62, "%{public}s called with null framer, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_86;
  }
  if (!v6[1])
  {
    char v55 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_framer_protocol_remove_input_handler";
    uint64_t v52 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v73 = 0;
    if (!__nwlog_fault(v52, &type, &v73)) {
      goto LABEL_120;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v53 = __nwlog_obj();
      os_log_type_t v56 = type;
      if (os_log_type_enabled(v53, type))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_framer_protocol_remove_input_handler";
        _os_log_impl(&dword_1830D4000, v53, v56, "%{public}s called with null framer->parent_definition", buf, 0xCu);
      }
LABEL_119:

LABEL_120:
      if (v52) {
        free(v52);
      }
      goto LABEL_9;
    }
    if (!v73)
    {
      id v53 = __nwlog_obj();
      os_log_type_t v72 = type;
      if (os_log_type_enabled(v53, type))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_framer_protocol_remove_input_handler";
        _os_log_impl(&dword_1830D4000, v53, v72, "%{public}s called with null framer->parent_definition, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_119;
    }
    __int16 v61 = (char *)__nw_create_backtrace_string();
    id v53 = __nwlog_obj();
    os_log_type_t v64 = type;
    BOOL v65 = os_log_type_enabled(v53, type);
    if (!v61)
    {
      if (v65)
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_framer_protocol_remove_input_handler";
        _os_log_impl(&dword_1830D4000, v53, v64, "%{public}s called with null framer->parent_definition, no backtrace", buf, 0xCu);
      }
      goto LABEL_119;
    }
    if (v65)
    {
      *(_DWORD *)int buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_framer_protocol_remove_input_handler";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v61;
      _os_log_impl(&dword_1830D4000, v53, v64, "%{public}s called with null framer->parent_definition, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_86:

    free(v61);
    goto LABEL_120;
  }
  if (a2 && a2->output_handler == a1) {
    nw_protocol_set_output_handler((uint64_t)a2, 0);
  }
  if (gLogDatapath)
  {
    __int16 v57 = __nwlog_obj();
    if (os_log_type_enabled(v57, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)int buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_framer_protocol_remove_input_handler";
      *(_WORD *)&buf[12] = 2080;
      *(void *)&buf[14] = (char *)v7 + 609;
      _os_log_impl(&dword_1830D4000, v57, OS_LOG_TYPE_DEBUG, "%{public}s %s Remove input handler", buf, 0x16u);
    }
  }
  if (a1->default_input_handler != a2)
  {
LABEL_9:
    uint64_t v8 = 0;
LABEL_52:

    return v8;
  }
  if (v7[66])
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    char v9 = (id)gLogObj;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_framer_protocol_remove_input_handler";
      *(_WORD *)&buf[12] = 2080;
      *(void *)&buf[14] = (char *)v7 + 609;
      _os_log_impl(&dword_1830D4000, v9, OS_LOG_TYPE_INFO, "%{public}s %s finalizing remaining pending input frames", buf, 0x16u);
    }

    if (gLogDatapath)
    {
      os_log_type_t v66 = __nwlog_obj();
      if (os_log_type_enabled(v66, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_finalize_temp_frame_array";
        _os_log_impl(&dword_1830D4000, v66, OS_LOG_TYPE_DEBUG, "%{public}s called", buf, 0xCu);
      }
    }
    *(void *)int buf = MEMORY[0x1E4F143A8];
    *(void *)&buf[8] = 3221225472;
    *(void *)&buf[16] = ___ZL37nw_protocol_finalize_temp_frame_arrayP16nw_frame_array_sb_block_invoke_5200;
    os_log_type_t v76 = &__block_descriptor_41_e31_B16__0__NSObject_OS_nw_frame__8l;
    uint64_t v77 = v7 + 66;
    char v78 = 0;
    uint64_t v10 = v7[66];
    do
    {
      if (!v10) {
        break;
      }
      uint64_t v11 = *(void *)(v10 + 32);
      char v12 = (*(uint64_t (**)(unsigned char *))&buf[16])(buf);
      uint64_t v10 = v11;
    }
    while ((v12 & 1) != 0);
  }
  if (v7[64])
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v13 = (id)gLogObj;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_framer_protocol_remove_input_handler";
      *(_WORD *)&buf[12] = 2080;
      *(void *)&buf[14] = (char *)v7 + 609;
      _os_log_impl(&dword_1830D4000, v13, OS_LOG_TYPE_INFO, "%{public}s %s finalizing remaining received input frames", buf, 0x16u);
    }

    if (gLogDatapath)
    {
      os_log_type_t v67 = __nwlog_obj();
      if (os_log_type_enabled(v67, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_finalize_temp_frame_array";
        _os_log_impl(&dword_1830D4000, v67, OS_LOG_TYPE_DEBUG, "%{public}s called", buf, 0xCu);
      }
    }
    *(void *)int buf = MEMORY[0x1E4F143A8];
    *(void *)&buf[8] = 3221225472;
    *(void *)&buf[16] = ___ZL37nw_protocol_finalize_temp_frame_arrayP16nw_frame_array_sb_block_invoke_5200;
    os_log_type_t v76 = &__block_descriptor_41_e31_B16__0__NSObject_OS_nw_frame__8l;
    uint64_t v77 = v7 + 64;
    char v78 = 0;
    uint64_t v14 = v7[64];
    do
    {
      if (!v14) {
        break;
      }
      uint64_t v15 = *(void *)(v14 + 32);
      char v16 = (*(uint64_t (**)(unsigned char *))&buf[16])(buf);
      uint64_t v14 = v15;
    }
    while ((v16 & 1) != 0);
  }
  if (v7[71])
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v17 = (id)gLogObj;
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_framer_protocol_remove_input_handler";
      *(_WORD *)&buf[12] = 2080;
      *(void *)&buf[14] = (char *)v7 + 609;
      _os_log_impl(&dword_1830D4000, v17, OS_LOG_TYPE_INFO, "%{public}s %s finalizing remaining received output frames", buf, 0x16u);
    }

    if (gLogDatapath)
    {
      os_log_type_t v68 = __nwlog_obj();
      if (os_log_type_enabled(v68, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_finalize_temp_frame_array";
        _os_log_impl(&dword_1830D4000, v68, OS_LOG_TYPE_DEBUG, "%{public}s called", buf, 0xCu);
      }
    }
    *(void *)int buf = MEMORY[0x1E4F143A8];
    *(void *)&buf[8] = 3221225472;
    *(void *)&buf[16] = ___ZL37nw_protocol_finalize_temp_frame_arrayP16nw_frame_array_sb_block_invoke_5200;
    os_log_type_t v76 = &__block_descriptor_41_e31_B16__0__NSObject_OS_nw_frame__8l;
    uint64_t v77 = v7 + 71;
    char v78 = 0;
    uint64_t v18 = v7[71];
    do
    {
      if (!v18) {
        break;
      }
      uint64_t v19 = *(void *)(v18 + 32);
      char v20 = (*(uint64_t (**)(unsigned char *))&buf[16])(buf);
      uint64_t v18 = v19;
    }
    while ((v20 & 1) != 0);
  }
  nw_protocol_set_input_handler((uint64_t)a1, 0);
  uint64_t output_handler = a1->output_handler;
  if (output_handler)
  {
    callbacks = output_handler->callbacks;
    if (callbacks)
    {
      remove_input_handler = (void (*)(void))callbacks->remove_input_handler;
      if (remove_input_handler)
      {
        remove_input_handler();
        nw_protocol_set_output_handler((uint64_t)a1, 0);
      }
    }
  }
  if (!a3)
  {
LABEL_51:
    uint64_t v8 = 1;
    goto LABEL_52;
  }
  os_log_type_t v24 = v7;
  BOOL v25 = (char *)*((void *)v24 + 41);
  if (v25 == v24)
  {
LABEL_39:
    if (gLogDatapath)
    {
      __int16 v71 = __nwlog_obj();
      if (os_log_type_enabled(v71, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)int buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_framer_protocol_destroy";
        *(_WORD *)&buf[12] = 2080;
        *(void *)&buf[14] = v24 + 609;
        _os_log_impl(&dword_1830D4000, v71, OS_LOG_TYPE_DEBUG, "%{public}s %s Destroying protocol", buf, 0x16u);
      }
    }
    uint64_t v29 = *((void *)v24 + 54);
    if (v29) {
      (*(void (**)(uint64_t, char *))(v29 + 16))(v29, v24);
    }
    nw_protocol_remove_instance((uint64_t)(v24 + 288));
    uint64_t v30 = *((void *)v24 + 40);
    if (v30)
    {
      uint64_t v31 = *(void *)(v30 + 24);
      if (v31)
      {
        os_log_type_t v32 = *(void (**)(uint64_t, char *))(v31 + 8);
        if (v32)
        {
          v32(v30, v24 + 288);
          nw_protocol_set_output_handler((uint64_t)(v24 + 288), 0);
        }
      }
    }
    while (1)
    {
      BOOL v33 = (void *)*((void *)v24 + 58);
      if (!v33) {
        break;
      }
      id v34 = v33;
      nw_frame_finalize((uint64_t)v34);
    }
    while (1)
    {
      os_log_type_t v36 = (void *)*((void *)v24 + 60);
      if (!v36) {
        break;
      }
      id v35 = v36;
      nw_frame_finalize((uint64_t)v35);
    }
    id v37 = *((id *)v24 + 46);
    nw_context_reset_timer_block_with_time(v37, (uint64_t)v24, -1, 0);

    __int16 v38 = (void *)*((void *)v24 + 70);
    *((void *)v24 + 70) = 0;

    *((void *)v24 + 41) = 0;
    char v39 = (void *)*((void *)v24 + 45);
    *((void *)v24 + 45) = 0;

    uint64_t v40 = (void *)*((void *)v24 + 44);
    *((void *)v24 + 44) = 0;

    uint64_t v41 = (void *)*((void *)v24 + 49);
    *((void *)v24 + 49) = 0;

    __int16 v42 = (void *)*((void *)v24 + 50);
    *((void *)v24 + 50) = 0;

    uint64_t v43 = (void *)*((void *)v24 + 51);
    *((void *)v24 + 51) = 0;

    uint64_t v44 = (void *)*((void *)v24 + 52);
    *((void *)v24 + 52) = 0;

    os_log_type_t v45 = (void *)*((void *)v24 + 53);
    *((void *)v24 + 53) = 0;

    uint64_t v46 = (void *)*((void *)v24 + 54);
    *((void *)v24 + 54) = 0;

    goto LABEL_51;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_t v26 = (id)gLogObj;
  os_log_type_enabled(v26, OS_LOG_TYPE_ERROR);
  *(_DWORD *)int buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_framer_protocol_destroy";
  BOOL v27 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v27);
  if (!result)
  {
    free(v27);
    goto LABEL_39;
  }
  __break(1u);
  return result;
}

void sub_183683520(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL37nw_protocol_finalize_temp_frame_arrayP16nw_frame_array_sb_block_invoke_5200(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  uint64_t v5 = *((void *)v3 + 4);
  uint64_t v6 = (void *)*((void *)v3 + 5);
  if (v5)
  {
    *(void *)(v5 + 40) = v6;
    uint64_t v6 = (void *)*((void *)v3 + 5);
  }
  else
  {
    *(void *)(*(void *)(a1 + 32) + 8) = v6;
  }
  *uint64_t v6 = v5;
  *((void *)v3 + 4) = 0;
  *((void *)v3 + 5) = 0;
  nw_frame_finalize((uint64_t)v3);

  return 1;
}

uint64_t nw_framer_protocol_replace_input_handler(nw_protocol *a1, nw_protocol *a2, nw_protocol *a3)
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v6 = a1->handle;
    uint64_t v7 = (char *)v6;
    if (v6)
    {
      if (v6[1])
      {
        if (a2)
        {
          if (a3)
          {
            if (a1->default_input_handler == a2)
            {
              nw_protocol_set_input_handler((uint64_t)a1, (uint64_t)a3);
              *(_OWORD *)a1->flow_id = *(_OWORD *)a3->flow_id;
              if (!a3->output_handler) {
                nw_protocol_set_output_handler((uint64_t)a3, (uint64_t)a1);
              }
              callbacks = a3->callbacks;
              if (callbacks
                && (supports_external_data = (uint64_t (*)(nw_protocol *))callbacks->supports_external_data) != 0)
              {
                char v16 = v7[606] & 0xFE | supports_external_data(a3);
              }
              else
              {
                char v16 = v7[606] & 0xFE;
              }
              v7[606] = v16;
              uint64_t v17 = 1;
              goto LABEL_33;
            }
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            id v8 = (id)gLogObj;
            uint64_t default_input_handler = a1->default_input_handler;
            *(_DWORD *)int buf = 136446978;
            os_log_type_t v59 = "nw_framer_protocol_replace_input_handler";
            __int16 v60 = 2080;
            __int16 v61 = v7 + 609;
            __int16 v62 = 2048;
            BOOL v63 = default_input_handler;
            __int16 v64 = 2048;
            BOOL v65 = a2;
            uint64_t v10 = (char *)_os_log_send_and_compose_impl();

            os_log_type_t type = OS_LOG_TYPE_ERROR;
            char v56 = 0;
            if (__nwlog_fault(v10, &type, &v56))
            {
              if (type == OS_LOG_TYPE_FAULT)
              {
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                uint64_t v11 = (id)gLogObj;
                os_log_type_t v12 = type;
                if (os_log_type_enabled(v11, type))
                {
                  os_log_type_t v13 = a1->default_input_handler;
                  *(_DWORD *)int buf = 136446978;
                  os_log_type_t v59 = "nw_framer_protocol_replace_input_handler";
                  __int16 v60 = 2080;
                  __int16 v61 = v7 + 609;
                  __int16 v62 = 2048;
                  BOOL v63 = v13;
                  __int16 v64 = 2048;
                  BOOL v65 = a2;
                  _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s %s Old input handler does not match (%p != %p)", buf, 0x2Au);
                }
              }
              else if (v56)
              {
                backtrace_string = (char *)__nw_create_backtrace_string();
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                uint64_t v11 = (id)gLogObj;
                os_log_type_t v19 = type;
                BOOL v20 = os_log_type_enabled(v11, type);
                if (backtrace_string)
                {
                  if (v20)
                  {
                    os_log_type_t v21 = a1->default_input_handler;
                    *(_DWORD *)int buf = 136447234;
                    os_log_type_t v59 = "nw_framer_protocol_replace_input_handler";
                    __int16 v60 = 2080;
                    __int16 v61 = v7 + 609;
                    __int16 v62 = 2048;
                    BOOL v63 = v21;
                    __int16 v64 = 2048;
                    BOOL v65 = a2;
                    __int16 v66 = 2082;
                    os_log_type_t v67 = backtrace_string;
                    _os_log_impl(&dword_1830D4000, v11, v19, "%{public}s %s Old input handler does not match (%p != %p), dumping backtrace:%{public}s", buf, 0x34u);
                  }

                  free(backtrace_string);
                  if (!v10) {
                    goto LABEL_32;
                  }
                  goto LABEL_31;
                }
                if (v20)
                {
                  os_log_type_t v24 = a1->default_input_handler;
                  *(_DWORD *)int buf = 136446978;
                  os_log_type_t v59 = "nw_framer_protocol_replace_input_handler";
                  __int16 v60 = 2080;
                  __int16 v61 = v7 + 609;
                  __int16 v62 = 2048;
                  BOOL v63 = v24;
                  __int16 v64 = 2048;
                  BOOL v65 = a2;
                  _os_log_impl(&dword_1830D4000, v11, v19, "%{public}s %s Old input handler does not match (%p != %p), no backtrace", buf, 0x2Au);
                }
              }
              else
              {
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                uint64_t v11 = (id)gLogObj;
                os_log_type_t v22 = type;
                if (os_log_type_enabled(v11, type))
                {
                  BOOL v23 = a1->default_input_handler;
                  *(_DWORD *)int buf = 136446978;
                  os_log_type_t v59 = "nw_framer_protocol_replace_input_handler";
                  __int16 v60 = 2080;
                  __int16 v61 = v7 + 609;
                  __int16 v62 = 2048;
                  BOOL v63 = v23;
                  __int16 v64 = 2048;
                  BOOL v65 = a2;
                  _os_log_impl(&dword_1830D4000, v11, v22, "%{public}s %s Old input handler does not match (%p != %p), backtrace limit exceeded", buf, 0x2Au);
                }
              }
            }
LABEL_30:
            if (!v10)
            {
LABEL_32:
              uint64_t v17 = 0;
LABEL_33:

              return v17;
            }
LABEL_31:
            free(v10);
            goto LABEL_32;
          }
          id v37 = __nwlog_obj();
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v59 = "nw_framer_protocol_replace_input_handler";
          uint64_t v10 = (char *)_os_log_send_and_compose_impl();

          os_log_type_t type = OS_LOG_TYPE_ERROR;
          char v56 = 0;
          if (!__nwlog_fault(v10, &type, &v56)) {
            goto LABEL_30;
          }
          if (type == OS_LOG_TYPE_FAULT)
          {
            uint64_t v31 = __nwlog_obj();
            os_log_type_t v38 = type;
            if (os_log_type_enabled(v31, type))
            {
              *(_DWORD *)int buf = 136446210;
              os_log_type_t v59 = "nw_framer_protocol_replace_input_handler";
              _os_log_impl(&dword_1830D4000, v31, v38, "%{public}s called with null new_input_handler", buf, 0xCu);
            }
LABEL_118:

            goto LABEL_30;
          }
          if (!v56)
          {
            uint64_t v31 = __nwlog_obj();
            os_log_type_t v55 = type;
            if (os_log_type_enabled(v31, type))
            {
              *(_DWORD *)int buf = 136446210;
              os_log_type_t v59 = "nw_framer_protocol_replace_input_handler";
              _os_log_impl(&dword_1830D4000, v31, v55, "%{public}s called with null new_input_handler, backtrace limit exceeded", buf, 0xCu);
            }
            goto LABEL_118;
          }
          __int16 v42 = (char *)__nw_create_backtrace_string();
          uint64_t v31 = __nwlog_obj();
          os_log_type_t v49 = type;
          BOOL v50 = os_log_type_enabled(v31, type);
          if (!v42)
          {
            if (v50)
            {
              *(_DWORD *)int buf = 136446210;
              os_log_type_t v59 = "nw_framer_protocol_replace_input_handler";
              _os_log_impl(&dword_1830D4000, v31, v49, "%{public}s called with null new_input_handler, no backtrace", buf, 0xCu);
            }
            goto LABEL_118;
          }
          if (v50)
          {
            *(_DWORD *)int buf = 136446466;
            os_log_type_t v59 = "nw_framer_protocol_replace_input_handler";
            __int16 v60 = 2082;
            __int16 v61 = v42;
            _os_log_impl(&dword_1830D4000, v31, v49, "%{public}s called with null new_input_handler, dumping backtrace:%{public}s", buf, 0x16u);
          }
        }
        else
        {
          id v35 = __nwlog_obj();
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v59 = "nw_framer_protocol_replace_input_handler";
          uint64_t v10 = (char *)_os_log_send_and_compose_impl();

          os_log_type_t type = OS_LOG_TYPE_ERROR;
          char v56 = 0;
          if (!__nwlog_fault(v10, &type, &v56)) {
            goto LABEL_30;
          }
          if (type == OS_LOG_TYPE_FAULT)
          {
            uint64_t v31 = __nwlog_obj();
            os_log_type_t v36 = type;
            if (os_log_type_enabled(v31, type))
            {
              *(_DWORD *)int buf = 136446210;
              os_log_type_t v59 = "nw_framer_protocol_replace_input_handler";
              _os_log_impl(&dword_1830D4000, v31, v36, "%{public}s called with null old_input_handler", buf, 0xCu);
            }
            goto LABEL_118;
          }
          if (!v56)
          {
            uint64_t v31 = __nwlog_obj();
            os_log_type_t v54 = type;
            if (os_log_type_enabled(v31, type))
            {
              *(_DWORD *)int buf = 136446210;
              os_log_type_t v59 = "nw_framer_protocol_replace_input_handler";
              _os_log_impl(&dword_1830D4000, v31, v54, "%{public}s called with null old_input_handler, backtrace limit exceeded", buf, 0xCu);
            }
            goto LABEL_118;
          }
          __int16 v42 = (char *)__nw_create_backtrace_string();
          uint64_t v31 = __nwlog_obj();
          os_log_type_t v47 = type;
          BOOL v48 = os_log_type_enabled(v31, type);
          if (!v42)
          {
            if (v48)
            {
              *(_DWORD *)int buf = 136446210;
              os_log_type_t v59 = "nw_framer_protocol_replace_input_handler";
              _os_log_impl(&dword_1830D4000, v31, v47, "%{public}s called with null old_input_handler, no backtrace", buf, 0xCu);
            }
            goto LABEL_118;
          }
          if (v48)
          {
            *(_DWORD *)int buf = 136446466;
            os_log_type_t v59 = "nw_framer_protocol_replace_input_handler";
            __int16 v60 = 2082;
            __int16 v61 = v42;
            _os_log_impl(&dword_1830D4000, v31, v47, "%{public}s called with null old_input_handler, dumping backtrace:%{public}s", buf, 0x16u);
          }
        }
      }
      else
      {
        BOOL v33 = __nwlog_obj();
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v59 = "nw_framer_protocol_replace_input_handler";
        uint64_t v10 = (char *)_os_log_send_and_compose_impl();

        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v56 = 0;
        if (!__nwlog_fault(v10, &type, &v56)) {
          goto LABEL_30;
        }
        if (type == OS_LOG_TYPE_FAULT)
        {
          uint64_t v31 = __nwlog_obj();
          os_log_type_t v34 = type;
          if (os_log_type_enabled(v31, type))
          {
            *(_DWORD *)int buf = 136446210;
            os_log_type_t v59 = "nw_framer_protocol_replace_input_handler";
            _os_log_impl(&dword_1830D4000, v31, v34, "%{public}s called with null framer->parent_definition", buf, 0xCu);
          }
          goto LABEL_118;
        }
        if (!v56)
        {
          uint64_t v31 = __nwlog_obj();
          os_log_type_t v53 = type;
          if (os_log_type_enabled(v31, type))
          {
            *(_DWORD *)int buf = 136446210;
            os_log_type_t v59 = "nw_framer_protocol_replace_input_handler";
            _os_log_impl(&dword_1830D4000, v31, v53, "%{public}s called with null framer->parent_definition, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_118;
        }
        __int16 v42 = (char *)__nw_create_backtrace_string();
        uint64_t v31 = __nwlog_obj();
        os_log_type_t v45 = type;
        BOOL v46 = os_log_type_enabled(v31, type);
        if (!v42)
        {
          if (v46)
          {
            *(_DWORD *)int buf = 136446210;
            os_log_type_t v59 = "nw_framer_protocol_replace_input_handler";
            _os_log_impl(&dword_1830D4000, v31, v45, "%{public}s called with null framer->parent_definition, no backtrace", buf, 0xCu);
          }
          goto LABEL_118;
        }
        if (v46)
        {
          *(_DWORD *)int buf = 136446466;
          os_log_type_t v59 = "nw_framer_protocol_replace_input_handler";
          __int16 v60 = 2082;
          __int16 v61 = v42;
          _os_log_impl(&dword_1830D4000, v31, v45, "%{public}s called with null framer->parent_definition, dumping backtrace:%{public}s", buf, 0x16u);
        }
      }
    }
    else
    {
      uint64_t v30 = __nwlog_obj();
      *(_DWORD *)int buf = 136446210;
      os_log_type_t v59 = "nw_framer_protocol_replace_input_handler";
      uint64_t v10 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v56 = 0;
      if (!__nwlog_fault(v10, &type, &v56)) {
        goto LABEL_30;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v31 = __nwlog_obj();
        os_log_type_t v32 = type;
        if (os_log_type_enabled(v31, type))
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v59 = "nw_framer_protocol_replace_input_handler";
          _os_log_impl(&dword_1830D4000, v31, v32, "%{public}s called with null framer", buf, 0xCu);
        }
        goto LABEL_118;
      }
      if (!v56)
      {
        uint64_t v31 = __nwlog_obj();
        os_log_type_t v52 = type;
        if (os_log_type_enabled(v31, type))
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v59 = "nw_framer_protocol_replace_input_handler";
          _os_log_impl(&dword_1830D4000, v31, v52, "%{public}s called with null framer, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_118;
      }
      __int16 v42 = (char *)__nw_create_backtrace_string();
      uint64_t v31 = __nwlog_obj();
      os_log_type_t v43 = type;
      BOOL v44 = os_log_type_enabled(v31, type);
      if (!v42)
      {
        if (v44)
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v59 = "nw_framer_protocol_replace_input_handler";
          _os_log_impl(&dword_1830D4000, v31, v43, "%{public}s called with null framer, no backtrace", buf, 0xCu);
        }
        goto LABEL_118;
      }
      if (v44)
      {
        *(_DWORD *)int buf = 136446466;
        os_log_type_t v59 = "nw_framer_protocol_replace_input_handler";
        __int16 v60 = 2082;
        __int16 v61 = v42;
        _os_log_impl(&dword_1830D4000, v31, v43, "%{public}s called with null framer, dumping backtrace:%{public}s", buf, 0x16u);
      }
    }

    free(v42);
    goto LABEL_30;
  }
  os_log_type_t v26 = __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  os_log_type_t v59 = "nw_framer_protocol_replace_input_handler";
  BOOL v27 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v56 = 0;
  if (__nwlog_fault(v27, &type, &v56))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v28 = __nwlog_obj();
      os_log_type_t v29 = type;
      if (os_log_type_enabled(v28, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v59 = "nw_framer_protocol_replace_input_handler";
        _os_log_impl(&dword_1830D4000, v28, v29, "%{public}s called with null protocol", buf, 0xCu);
      }
    }
    else if (v56)
    {
      char v39 = (char *)__nw_create_backtrace_string();
      os_log_type_t v28 = __nwlog_obj();
      os_log_type_t v40 = type;
      BOOL v41 = os_log_type_enabled(v28, type);
      if (v39)
      {
        if (v41)
        {
          *(_DWORD *)int buf = 136446466;
          os_log_type_t v59 = "nw_framer_protocol_replace_input_handler";
          __int16 v60 = 2082;
          __int16 v61 = v39;
          _os_log_impl(&dword_1830D4000, v28, v40, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v39);
        goto LABEL_104;
      }
      if (v41)
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v59 = "nw_framer_protocol_replace_input_handler";
        _os_log_impl(&dword_1830D4000, v28, v40, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v28 = __nwlog_obj();
      os_log_type_t v51 = type;
      if (os_log_type_enabled(v28, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v59 = "nw_framer_protocol_replace_input_handler";
        _os_log_impl(&dword_1830D4000, v28, v51, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_104:
  if (v27) {
    free(v27);
  }
  return 0;
}

void sub_183684400(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_framer_protocol_add_input_handler(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v74 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v4 = a1->handle;
    uint64_t v5 = v4;
    if (v4)
    {
      if (v4[1])
      {
        if (a1->default_input_handler)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          id v6 = (id)gLogObj;
          *(_DWORD *)int buf = 136446466;
          os_log_type_t v69 = "nw_framer_protocol_add_input_handler";
          __int16 v70 = 2080;
          __int16 v71 = (char *)v5 + 609;
          uint64_t v7 = (char *)_os_log_send_and_compose_impl();

          os_log_type_t type = OS_LOG_TYPE_ERROR;
          char v66 = 0;
          if (!__nwlog_fault(v7, &type, &v66)) {
            goto LABEL_50;
          }
          if (type == OS_LOG_TYPE_FAULT)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            id v8 = (id)gLogObj;
            os_log_type_t v9 = type;
            if (os_log_type_enabled(v8, type))
            {
              *(_DWORD *)int buf = 136446466;
              os_log_type_t v69 = "nw_framer_protocol_add_input_handler";
              __int16 v70 = 2080;
              __int16 v71 = (char *)v5 + 609;
              _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s %s Protocol instance already has default input handler", buf, 0x16u);
            }
          }
          else if (v66)
          {
            backtrace_string = (char *)__nw_create_backtrace_string();
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            id v8 = (id)gLogObj;
            os_log_type_t v12 = type;
            BOOL v13 = os_log_type_enabled(v8, type);
            if (backtrace_string)
            {
              if (v13)
              {
                *(_DWORD *)int buf = 136446722;
                os_log_type_t v69 = "nw_framer_protocol_add_input_handler";
                __int16 v70 = 2080;
                __int16 v71 = (char *)v5 + 609;
                __int16 v72 = 2082;
                char v73 = backtrace_string;
                _os_log_impl(&dword_1830D4000, v8, v12, "%{public}s %s Protocol instance already has default input handler, dumping backtrace:%{public}s", buf, 0x20u);
              }

              free(backtrace_string);
              if (!v7) {
                goto LABEL_52;
              }
              goto LABEL_51;
            }
            if (v13)
            {
              *(_DWORD *)int buf = 136446466;
              os_log_type_t v69 = "nw_framer_protocol_add_input_handler";
              __int16 v70 = 2080;
              __int16 v71 = (char *)v5 + 609;
              _os_log_impl(&dword_1830D4000, v8, v12, "%{public}s %s Protocol instance already has default input handler, no backtrace", buf, 0x16u);
            }
          }
          else
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            id v8 = (id)gLogObj;
            os_log_type_t v18 = type;
            if (os_log_type_enabled(v8, type))
            {
              *(_DWORD *)int buf = 136446466;
              os_log_type_t v69 = "nw_framer_protocol_add_input_handler";
              __int16 v70 = 2080;
              __int16 v71 = (char *)v5 + 609;
              _os_log_impl(&dword_1830D4000, v8, v18, "%{public}s %s Protocol instance already has default input handler, backtrace limit exceeded", buf, 0x16u);
            }
          }
          goto LABEL_49;
        }
        if (gLogDatapath)
        {
          os_log_type_t v49 = __nwlog_obj();
          if (os_log_type_enabled(v49, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)int buf = 136446466;
            os_log_type_t v69 = "nw_framer_protocol_add_input_handler";
            __int16 v70 = 2080;
            __int16 v71 = (char *)v5 + 609;
            _os_log_impl(&dword_1830D4000, v49, OS_LOG_TYPE_DEBUG, "%{public}s %s Protocol add input handler", buf, 0x16u);
          }
        }
        nw_protocol_set_input_handler((uint64_t)a1, (uint64_t)a2);
        if (a2)
        {
          *(_OWORD *)a1->flow_id = *(_OWORD *)a2->flow_id;
          if (!a2->output_handler) {
            nw_protocol_set_output_handler((uint64_t)a2, (uint64_t)a1);
          }
          uint64_t v10 = (void *)v5[45];
          if (!v10)
          {
LABEL_40:
            callbacks = a2->callbacks;
            if (callbacks)
            {
              supports_external_data = (uint64_t (*)(nw_protocol *))callbacks->supports_external_data;
              if (supports_external_data) {
                *((unsigned char *)v5 + 606) = *((unsigned char *)v5 + 606) & 0xFE | supports_external_data(a2);
              }
            }
            goto LABEL_43;
          }
        }
        else
        {
          uint64_t v10 = (void *)v5[45];
          if (!v10) {
            goto LABEL_43;
          }
        }
        uint64_t v14 = nw_parameters_copy_protocol_options_legacy(v10, (nw_protocol *)(v5 + 36));
        uint64_t v15 = v14;
        if (v14)
        {
          char v16 = v14;
          id v17 = v16[1];
        }
        else
        {
          id v17 = (id)v5[1];
        }
        id v19 = v17;
        BOOL v20 = v19;
        if (v19)
        {
          uint64_t v21 = *((void *)v19 + 9);
          if (v21)
          {
            os_log_type_t v22 = _Block_copy(*(const void **)(v21 + 80));
            goto LABEL_32;
          }
          os_log_type_t v54 = __nwlog_obj();
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v69 = "nw_protocol_definition_copy_framer_start";
          os_log_type_t v51 = (char *)_os_log_send_and_compose_impl();

          os_log_type_t type = OS_LOG_TYPE_ERROR;
          char v66 = 0;
          if (__nwlog_fault(v51, &type, &v66))
          {
            if (type == OS_LOG_TYPE_FAULT)
            {
              os_log_type_t v52 = __nwlog_obj();
              os_log_type_t v55 = type;
              if (os_log_type_enabled(v52, type))
              {
                *(_DWORD *)int buf = 136446210;
                os_log_type_t v69 = "nw_protocol_definition_copy_framer_start";
                _os_log_impl(&dword_1830D4000, v52, v55, "%{public}s called with null definition->common_state", buf, 0xCu);
              }
LABEL_140:

              goto LABEL_141;
            }
            if (!v66)
            {
              os_log_type_t v52 = __nwlog_obj();
              os_log_type_t v65 = type;
              if (os_log_type_enabled(v52, type))
              {
                *(_DWORD *)int buf = 136446210;
                os_log_type_t v69 = "nw_protocol_definition_copy_framer_start";
                _os_log_impl(&dword_1830D4000, v52, v65, "%{public}s called with null definition->common_state, backtrace limit exceeded", buf, 0xCu);
              }
              goto LABEL_140;
            }
            os_log_type_t v59 = (char *)__nw_create_backtrace_string();
            os_log_type_t v52 = __nwlog_obj();
            os_log_type_t v62 = type;
            BOOL v63 = os_log_type_enabled(v52, type);
            if (!v59)
            {
              if (v63)
              {
                *(_DWORD *)int buf = 136446210;
                os_log_type_t v69 = "nw_protocol_definition_copy_framer_start";
                _os_log_impl(&dword_1830D4000, v52, v62, "%{public}s called with null definition->common_state, no backtrace", buf, 0xCu);
              }
              goto LABEL_140;
            }
            if (v63)
            {
              *(_DWORD *)int buf = 136446466;
              os_log_type_t v69 = "nw_protocol_definition_copy_framer_start";
              __int16 v70 = 2082;
              __int16 v71 = v59;
              _os_log_impl(&dword_1830D4000, v52, v62, "%{public}s called with null definition->common_state, dumping backtrace:%{public}s", buf, 0x16u);
            }
            goto LABEL_128;
          }
        }
        else
        {
          BOOL v50 = __nwlog_obj();
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v69 = "nw_protocol_definition_copy_framer_start";
          os_log_type_t v51 = (char *)_os_log_send_and_compose_impl();

          os_log_type_t type = OS_LOG_TYPE_ERROR;
          char v66 = 0;
          if (__nwlog_fault(v51, &type, &v66))
          {
            if (type == OS_LOG_TYPE_FAULT)
            {
              os_log_type_t v52 = __nwlog_obj();
              os_log_type_t v53 = type;
              if (os_log_type_enabled(v52, type))
              {
                *(_DWORD *)int buf = 136446210;
                os_log_type_t v69 = "nw_protocol_definition_copy_framer_start";
                _os_log_impl(&dword_1830D4000, v52, v53, "%{public}s called with null definition", buf, 0xCu);
              }
              goto LABEL_140;
            }
            if (!v66)
            {
              os_log_type_t v52 = __nwlog_obj();
              os_log_type_t v64 = type;
              if (os_log_type_enabled(v52, type))
              {
                *(_DWORD *)int buf = 136446210;
                os_log_type_t v69 = "nw_protocol_definition_copy_framer_start";
                _os_log_impl(&dword_1830D4000, v52, v64, "%{public}s called with null definition, backtrace limit exceeded", buf, 0xCu);
              }
              goto LABEL_140;
            }
            os_log_type_t v59 = (char *)__nw_create_backtrace_string();
            os_log_type_t v52 = __nwlog_obj();
            os_log_type_t v60 = type;
            BOOL v61 = os_log_type_enabled(v52, type);
            if (!v59)
            {
              if (v61)
              {
                *(_DWORD *)int buf = 136446210;
                os_log_type_t v69 = "nw_protocol_definition_copy_framer_start";
                _os_log_impl(&dword_1830D4000, v52, v60, "%{public}s called with null definition, no backtrace", buf, 0xCu);
              }
              goto LABEL_140;
            }
            if (v61)
            {
              *(_DWORD *)int buf = 136446466;
              os_log_type_t v69 = "nw_protocol_definition_copy_framer_start";
              __int16 v70 = 2082;
              __int16 v71 = v59;
              _os_log_impl(&dword_1830D4000, v52, v60, "%{public}s called with null definition, dumping backtrace:%{public}s", buf, 0x16u);
            }
LABEL_128:

            free(v59);
          }
        }
LABEL_141:
        if (v51) {
          free(v51);
        }
        os_log_type_t v22 = 0;
LABEL_32:

        BOOL v23 = (void *)v5[49];
        v5[49] = v22;

        if (!v5[49])
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v31 = (id)gLogObj;
          if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)int buf = 136446466;
            os_log_type_t v69 = "nw_framer_protocol_add_input_handler";
            __int16 v70 = 2080;
            __int16 v71 = (char *)v5 + 609;
            _os_log_impl(&dword_1830D4000, v31, OS_LOG_TYPE_ERROR, "%{public}s %s Failed to find start block on framer", buf, 0x16u);
          }

          goto LABEL_52;
        }
        if (v15)
        {
          os_log_type_t v24 = v15;
          *((unsigned char *)v5 + 609) = 0;
          unint64_t v25 = 84;
          uint64_t v26 = 609;
          while (1)
          {
            int v27 = v24[v26 - 561];
            *((unsigned char *)v5 + v26) = v27;
            if (!v27) {
              break;
            }
            --v25;
            ++v26;
            if (v25 <= 1)
            {
              *((unsigned char *)v5 + v26) = 0;
              break;
            }
          }
        }
        if (a2) {
          goto LABEL_40;
        }
LABEL_43:
        uint64_t v30 = 1;
LABEL_53:

        return v30;
      }
      char v39 = __nwlog_obj();
      *(_DWORD *)int buf = 136446210;
      os_log_type_t v69 = "nw_framer_protocol_add_input_handler";
      uint64_t v7 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v66 = 0;
      if (!__nwlog_fault(v7, &type, &v66))
      {
LABEL_50:
        if (!v7)
        {
LABEL_52:
          uint64_t v30 = 0;
          goto LABEL_53;
        }
LABEL_51:
        free(v7);
        goto LABEL_52;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        id v8 = __nwlog_obj();
        os_log_type_t v40 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v69 = "nw_framer_protocol_add_input_handler";
          _os_log_impl(&dword_1830D4000, v8, v40, "%{public}s called with null framer->parent_definition", buf, 0xCu);
        }
LABEL_49:

        goto LABEL_50;
      }
      if (!v66)
      {
        id v8 = __nwlog_obj();
        os_log_type_t v58 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v69 = "nw_framer_protocol_add_input_handler";
          _os_log_impl(&dword_1830D4000, v8, v58, "%{public}s called with null framer->parent_definition, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_49;
      }
      BOOL v44 = (char *)__nw_create_backtrace_string();
      id v8 = __nwlog_obj();
      os_log_type_t v47 = type;
      BOOL v48 = os_log_type_enabled(v8, type);
      if (!v44)
      {
        if (v48)
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v69 = "nw_framer_protocol_add_input_handler";
          _os_log_impl(&dword_1830D4000, v8, v47, "%{public}s called with null framer->parent_definition, no backtrace", buf, 0xCu);
        }
        goto LABEL_49;
      }
      if (v48)
      {
        *(_DWORD *)int buf = 136446466;
        os_log_type_t v69 = "nw_framer_protocol_add_input_handler";
        __int16 v70 = 2082;
        __int16 v71 = v44;
        _os_log_impl(&dword_1830D4000, v8, v47, "%{public}s called with null framer->parent_definition, dumping backtrace:%{public}s", buf, 0x16u);
      }
    }
    else
    {
      id v37 = __nwlog_obj();
      *(_DWORD *)int buf = 136446210;
      os_log_type_t v69 = "nw_framer_protocol_add_input_handler";
      uint64_t v7 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v66 = 0;
      if (!__nwlog_fault(v7, &type, &v66)) {
        goto LABEL_50;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        id v8 = __nwlog_obj();
        os_log_type_t v38 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v69 = "nw_framer_protocol_add_input_handler";
          _os_log_impl(&dword_1830D4000, v8, v38, "%{public}s called with null framer", buf, 0xCu);
        }
        goto LABEL_49;
      }
      if (!v66)
      {
        id v8 = __nwlog_obj();
        os_log_type_t v57 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v69 = "nw_framer_protocol_add_input_handler";
          _os_log_impl(&dword_1830D4000, v8, v57, "%{public}s called with null framer, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_49;
      }
      BOOL v44 = (char *)__nw_create_backtrace_string();
      id v8 = __nwlog_obj();
      os_log_type_t v45 = type;
      BOOL v46 = os_log_type_enabled(v8, type);
      if (!v44)
      {
        if (v46)
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v69 = "nw_framer_protocol_add_input_handler";
          _os_log_impl(&dword_1830D4000, v8, v45, "%{public}s called with null framer, no backtrace", buf, 0xCu);
        }
        goto LABEL_49;
      }
      if (v46)
      {
        *(_DWORD *)int buf = 136446466;
        os_log_type_t v69 = "nw_framer_protocol_add_input_handler";
        __int16 v70 = 2082;
        __int16 v71 = v44;
        _os_log_impl(&dword_1830D4000, v8, v45, "%{public}s called with null framer, dumping backtrace:%{public}s", buf, 0x16u);
      }
    }

    free(v44);
    goto LABEL_50;
  }
  BOOL v33 = __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  os_log_type_t v69 = "nw_framer_protocol_add_input_handler";
  os_log_type_t v34 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v66 = 0;
  if (__nwlog_fault(v34, &type, &v66))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v35 = __nwlog_obj();
      os_log_type_t v36 = type;
      if (os_log_type_enabled(v35, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v69 = "nw_framer_protocol_add_input_handler";
        _os_log_impl(&dword_1830D4000, v35, v36, "%{public}s called with null protocol", buf, 0xCu);
      }
    }
    else if (v66)
    {
      BOOL v41 = (char *)__nw_create_backtrace_string();
      id v35 = __nwlog_obj();
      os_log_type_t v42 = type;
      BOOL v43 = os_log_type_enabled(v35, type);
      if (v41)
      {
        if (v43)
        {
          *(_DWORD *)int buf = 136446466;
          os_log_type_t v69 = "nw_framer_protocol_add_input_handler";
          __int16 v70 = 2082;
          __int16 v71 = v41;
          _os_log_impl(&dword_1830D4000, v35, v42, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v41);
        goto LABEL_110;
      }
      if (v43)
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v69 = "nw_framer_protocol_add_input_handler";
        _os_log_impl(&dword_1830D4000, v35, v42, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v35 = __nwlog_obj();
      os_log_type_t v56 = type;
      if (os_log_type_enabled(v35, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v69 = "nw_framer_protocol_add_input_handler";
        _os_log_impl(&dword_1830D4000, v35, v56, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_110:
  if (v34) {
    free(v34);
  }
  return 0;
}

void sub_1836853CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_framer_trigger_input_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4, size_t a5)
{
  uint64_t frame = nw_framer_protocol_create_frame(*(void **)(a1 + 32), a5, (uint64_t)nw_framer_protocol_inbound_data_finalizer, *(void *)(a1 + 32) + 464, 0);
  buffer = (void *)nw_frame_get_buffer(frame, 0);
  memcpy(buffer, a4, a5);
  uint64_t v10 = *(void *)(a1 + 32);
  *(void *)(frame + 32) = 0;
  uint64_t v11 = *(uint64_t **)(v10 + 520);
  *(void *)(frame + 40) = v11;
  uint64_t *v11 = frame;
  *(void *)(v10 + 520) = frame + 32;

  return 1;
}

void __nw_framer_trigger_input_block_invoke_2(uint64_t a1)
{
}

nw_protocol_options_t nw_framer_create_options(nw_protocol_definition_t framer_definition)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v1 = framer_definition;
  nw_framer_t v2 = v1;
  if (v1)
  {
    id v3 = v1;
    char isa = (char)v3[23].isa;

    if (isa)
    {
      options = nw_protocol_create_options(v3);
      goto LABEL_4;
    }
    uint64_t v11 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    BOOL v23 = "nw_framer_create_options";
    id v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (__nwlog_fault(v8, &type, &v20))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v9 = __nwlog_obj();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)int buf = 136446210;
          BOOL v23 = "nw_framer_create_options";
          _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null nw_protocol_definition_is_framer(definition)", buf, 0xCu);
        }
LABEL_36:

        goto LABEL_37;
      }
      if (!v20)
      {
        os_log_type_t v9 = __nwlog_obj();
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)int buf = 136446210;
          BOOL v23 = "nw_framer_create_options";
          _os_log_impl(&dword_1830D4000, v9, v19, "%{public}s called with null nw_protocol_definition_is_framer(definition), backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)int buf = 136446210;
          BOOL v23 = "nw_framer_create_options";
          _os_log_impl(&dword_1830D4000, v9, v16, "%{public}s called with null nw_protocol_definition_is_framer(definition), no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v17)
      {
        *(_DWORD *)int buf = 136446466;
        BOOL v23 = "nw_framer_create_options";
        __int16 v24 = 2082;
        unint64_t v25 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v9, v16, "%{public}s called with null nw_protocol_definition_is_framer(definition), dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_24;
    }
  }
  else
  {
    uint64_t v7 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    BOOL v23 = "nw_framer_create_options";
    id v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (__nwlog_fault(v8, &type, &v20))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v9 = __nwlog_obj();
        os_log_type_t v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)int buf = 136446210;
          BOOL v23 = "nw_framer_create_options";
          _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null definition", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (!v20)
      {
        os_log_type_t v9 = __nwlog_obj();
        os_log_type_t v18 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)int buf = 136446210;
          BOOL v23 = "nw_framer_create_options";
          _os_log_impl(&dword_1830D4000, v9, v18, "%{public}s called with null definition, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)int buf = 136446210;
          BOOL v23 = "nw_framer_create_options";
          _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null definition, no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v15)
      {
        *(_DWORD *)int buf = 136446466;
        BOOL v23 = "nw_framer_create_options";
        __int16 v24 = 2082;
        unint64_t v25 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null definition, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_24:

      free(backtrace_string);
    }
  }
LABEL_37:
  if (v8) {
    free(v8);
  }
  options = 0;
LABEL_4:

  return &options->super;
}

void sub_183685938(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_protocol_options_is_framer(void *a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  nw_framer_t v2 = v1;
  if (v1)
  {
    id v3 = (id *)v1;
    id v4 = v3[1];

    uint64_t is_framer = nw_protocol_definition_is_framer(v4);
    goto LABEL_3;
  }
  uint64_t v7 = __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  os_log_type_t v18 = "nw_protocol_options_is_framer";
  id v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v18 = "nw_protocol_options_is_framer";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null options", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)int buf = 136446466;
          os_log_type_t v18 = "nw_protocol_options_is_framer";
          __int16 v19 = 2082;
          char v20 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v13)
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v18 = "nw_protocol_options_is_framer";
        _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v18 = "nw_protocol_options_is_framer";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v8) {
    free(v8);
  }
  uint64_t is_framer = 0;
LABEL_3:

  return is_framer;
}

void nw_framer_options_set_object_value(nw_protocol_options_t options, const char *key, id value)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = options;
  id v6 = value;
  if (!v5)
  {
    uint64_t v7 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v32 = "nw_framer_options_set_object_value";
    id v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v30 = OS_LOG_TYPE_ERROR;
    char v29 = 0;
    if (!__nwlog_fault(v8, &v30, &v29)) {
      goto LABEL_55;
    }
    if (v30 == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v10 = v30;
      if (os_log_type_enabled(v9, v30))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v32 = "nw_framer_options_set_object_value";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null options", buf, 0xCu);
      }
    }
    else if (v29)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v16 = v30;
      BOOL v17 = os_log_type_enabled(v9, v30);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)int buf = 136446466;
          os_log_type_t v32 = "nw_framer_options_set_object_value";
          __int16 v33 = 2082;
          os_log_type_t v34 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v16, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_55:
        if (!v8) {
          goto LABEL_5;
        }
LABEL_56:
        free(v8);
        goto LABEL_5;
      }
      if (v17)
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v32 = "nw_framer_options_set_object_value";
        _os_log_impl(&dword_1830D4000, v9, v16, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v23 = v30;
      if (os_log_type_enabled(v9, v30))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v32 = "nw_framer_options_set_object_value";
        _os_log_impl(&dword_1830D4000, v9, v23, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_54:

    goto LABEL_55;
  }
  if (!nw_protocol_options_has_standard_framer_options(v5))
  {
    uint64_t v11 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v32 = "nw_framer_options_set_object_value";
    id v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v30 = OS_LOG_TYPE_ERROR;
    char v29 = 0;
    if (!__nwlog_fault(v8, &v30, &v29)) {
      goto LABEL_55;
    }
    if (v30 == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v12 = v30;
      if (os_log_type_enabled(v9, v30))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v32 = "nw_framer_options_set_object_value";
        _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null nw_protocol_options_has_standard_framer_options(options)", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!v29)
    {
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v24 = v30;
      if (os_log_type_enabled(v9, v30))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v32 = "nw_framer_options_set_object_value";
        _os_log_impl(&dword_1830D4000, v9, v24, "%{public}s called with null nw_protocol_options_has_standard_framer_options(options), backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    os_log_type_t v18 = (char *)__nw_create_backtrace_string();
    os_log_type_t v9 = __nwlog_obj();
    os_log_type_t v19 = v30;
    BOOL v20 = os_log_type_enabled(v9, v30);
    if (!v18)
    {
      if (v20)
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v32 = "nw_framer_options_set_object_value";
        _os_log_impl(&dword_1830D4000, v9, v19, "%{public}s called with null nw_protocol_options_has_standard_framer_options(options), no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v20)
    {
      *(_DWORD *)int buf = 136446466;
      os_log_type_t v32 = "nw_framer_options_set_object_value";
      __int16 v33 = 2082;
      os_log_type_t v34 = v18;
      _os_log_impl(&dword_1830D4000, v9, v19, "%{public}s called with null nw_protocol_options_has_standard_framer_options(options), dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_35;
  }
  if (!key)
  {
    BOOL v13 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v32 = "nw_framer_options_set_object_value";
    id v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v30 = OS_LOG_TYPE_ERROR;
    char v29 = 0;
    if (!__nwlog_fault(v8, &v30, &v29)) {
      goto LABEL_55;
    }
    if (v30 == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v14 = v30;
      if (os_log_type_enabled(v9, v30))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v32 = "nw_framer_options_set_object_value";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null key", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!v29)
    {
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v25 = v30;
      if (os_log_type_enabled(v9, v30))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v32 = "nw_framer_options_set_object_value";
        _os_log_impl(&dword_1830D4000, v9, v25, "%{public}s called with null key, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    os_log_type_t v18 = (char *)__nw_create_backtrace_string();
    os_log_type_t v9 = __nwlog_obj();
    os_log_type_t v21 = v30;
    BOOL v22 = os_log_type_enabled(v9, v30);
    if (!v18)
    {
      if (v22)
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v32 = "nw_framer_options_set_object_value";
        _os_log_impl(&dword_1830D4000, v9, v21, "%{public}s called with null key, no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v22)
    {
      *(_DWORD *)int buf = 136446466;
      os_log_type_t v32 = "nw_framer_options_set_object_value";
      __int16 v33 = 2082;
      os_log_type_t v34 = v18;
      _os_log_impl(&dword_1830D4000, v9, v21, "%{public}s called with null key, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_35:

    free(v18);
    if (!v8) {
      goto LABEL_5;
    }
    goto LABEL_56;
  }
  v26[0] = MEMORY[0x1E4F143A8];
  v26[1] = 3221225472;
  v26[2] = __nw_framer_options_set_object_value_block_invoke;
  void v26[3] = &unk_1E5249070;
  os_log_type_t v28 = key;
  id v27 = v6;
  nw_protocol_options_access_handle(v5, v26);

LABEL_5:
}

void sub_18368632C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

BOOL nw_protocol_options_has_standard_framer_options(void *a1)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  nw_framer_t v2 = v1;
  if (v1)
  {
    id v3 = v1[1];
    goto LABEL_3;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v8 = (id)gLogObj;
  *(_DWORD *)int buf = 136446210;
  id v27 = "nw_protocol_options_copy_definition";
  os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v24 = 0;
  if (__nwlog_fault(v9, &type, &v24))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v10 = (id)gLogObj;
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)int buf = 136446210;
        id v27 = "nw_protocol_options_copy_definition";
        _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null options", buf, 0xCu);
      }
    }
    else if (v24)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v10 = (id)gLogObj;
      os_log_type_t v17 = type;
      BOOL v18 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)int buf = 136446466;
          id v27 = "nw_protocol_options_copy_definition";
          __int16 v28 = 2082;
          char v29 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v10, v17, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_35;
      }
      if (v18)
      {
        *(_DWORD *)int buf = 136446210;
        id v27 = "nw_protocol_options_copy_definition";
        _os_log_impl(&dword_1830D4000, v10, v17, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v10 = (id)gLogObj;
      os_log_type_t v22 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)int buf = 136446210;
        id v27 = "nw_protocol_options_copy_definition";
        _os_log_impl(&dword_1830D4000, v10, v22, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_35:
  if (v9) {
    free(v9);
  }
  id v3 = 0;
LABEL_3:

  if (!nw_protocol_definition_is_framer(v3))
  {
    BOOL v6 = 0;
    goto LABEL_8;
  }
  id v4 = v3;
  uint64_t v5 = v4;
  if (!v4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v12 = (id)gLogObj;
    *(_DWORD *)int buf = 136446210;
    id v27 = "nw_protocol_definition_get_options_allocator";
    BOOL v13 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (__nwlog_fault(v13, &type, &v24))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v14 = (id)gLogObj;
        os_log_type_t v15 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)int buf = 136446210;
          id v27 = "nw_protocol_definition_get_options_allocator";
          _os_log_impl(&dword_1830D4000, v14, v15, "%{public}s called with null definition", buf, 0xCu);
        }
      }
      else if (v24)
      {
        os_log_type_t v19 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v14 = (id)gLogObj;
        os_log_type_t v20 = type;
        BOOL v21 = os_log_type_enabled(v14, type);
        if (v19)
        {
          if (v21)
          {
            *(_DWORD *)int buf = 136446466;
            id v27 = "nw_protocol_definition_get_options_allocator";
            __int16 v28 = 2082;
            char v29 = v19;
            _os_log_impl(&dword_1830D4000, v14, v20, "%{public}s called with null definition, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v19);
          goto LABEL_44;
        }
        if (v21)
        {
          *(_DWORD *)int buf = 136446210;
          id v27 = "nw_protocol_definition_get_options_allocator";
          _os_log_impl(&dword_1830D4000, v14, v20, "%{public}s called with null definition, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v14 = (id)gLogObj;
        os_log_type_t v23 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)int buf = 136446210;
          id v27 = "nw_protocol_definition_get_options_allocator";
          _os_log_impl(&dword_1830D4000, v14, v23, "%{public}s called with null definition, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_44:
    if (v13) {
      free(v13);
    }
    BOOL v6 = 0;
    goto LABEL_6;
  }
  BOOL v6 = *((void *)v4 + 11) == (void)nw_framer_allocate_options;
LABEL_6:

LABEL_8:
  return v6;
}

uint64_t __nw_framer_options_set_object_value_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  if (!*a2)
  {
    uint64_t v5 = nw_dictionary_create();
    BOOL v6 = (void *)*a2;
    *a2 = (uint64_t)v5;

    uint64_t v3 = *a2;
  }
  nw_dictionary_set_value(v3, *(const char **)(a1 + 40), *(void **)(a1 + 32));
  return 1;
}

id nw_framer_options_copy_object_value(nw_protocol_options_t options, const char *key)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = options;
  id v4 = v3;
  if (!v3)
  {
    uint64_t v7 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_framer_options_copy_object_value";
    id v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v27 = 0;
    if (!__nwlog_fault(v8, &type, &v27)) {
      goto LABEL_55;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_framer_options_copy_object_value";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null options", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!v27)
    {
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v23 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_framer_options_copy_object_value";
        _os_log_impl(&dword_1830D4000, v9, v23, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v9 = __nwlog_obj();
    os_log_type_t v16 = type;
    BOOL v17 = os_log_type_enabled(v9, type);
    if (!backtrace_string)
    {
      if (v17)
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_framer_options_copy_object_value";
        _os_log_impl(&dword_1830D4000, v9, v16, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v17)
    {
      *(_DWORD *)int buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_framer_options_copy_object_value";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = backtrace_string;
      _os_log_impl(&dword_1830D4000, v9, v16, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_35;
  }
  if (!nw_protocol_options_has_standard_framer_options(v3))
  {
    os_log_type_t v11 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_framer_options_copy_object_value";
    id v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v27 = 0;
    if (!__nwlog_fault(v8, &type, &v27)) {
      goto LABEL_55;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_framer_options_copy_object_value";
        _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null nw_protocol_options_has_standard_framer_options(options)", buf, 0xCu);
      }
    }
    else if (v27)
    {
      BOOL v18 = (char *)__nw_create_backtrace_string();
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v19 = type;
      BOOL v20 = os_log_type_enabled(v9, type);
      if (v18)
      {
        if (v20)
        {
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_framer_options_copy_object_value";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v18;
          _os_log_impl(&dword_1830D4000, v9, v19, "%{public}s called with null nw_protocol_options_has_standard_framer_options(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v18);
LABEL_55:
        if (!v8)
        {
LABEL_57:
          id v5 = 0;
          goto LABEL_5;
        }
LABEL_56:
        free(v8);
        goto LABEL_57;
      }
      if (v20)
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_framer_options_copy_object_value";
        _os_log_impl(&dword_1830D4000, v9, v19, "%{public}s called with null nw_protocol_options_has_standard_framer_options(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v24 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_framer_options_copy_object_value";
        _os_log_impl(&dword_1830D4000, v9, v24, "%{public}s called with null nw_protocol_options_has_standard_framer_options(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_54:

    goto LABEL_55;
  }
  if (!key)
  {
    BOOL v13 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_framer_options_copy_object_value";
    id v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v27 = 0;
    if (!__nwlog_fault(v8, &type, &v27)) {
      goto LABEL_55;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_framer_options_copy_object_value";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null key", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!v27)
    {
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v25 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_framer_options_copy_object_value";
        _os_log_impl(&dword_1830D4000, v9, v25, "%{public}s called with null key, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v9 = __nwlog_obj();
    os_log_type_t v21 = type;
    BOOL v22 = os_log_type_enabled(v9, type);
    if (!backtrace_string)
    {
      if (v22)
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_framer_options_copy_object_value";
        _os_log_impl(&dword_1830D4000, v9, v21, "%{public}s called with null key, no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v22)
    {
      *(_DWORD *)int buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_framer_options_copy_object_value";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = backtrace_string;
      _os_log_impl(&dword_1830D4000, v9, v21, "%{public}s called with null key, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_35:

    free(backtrace_string);
    if (!v8) {
      goto LABEL_57;
    }
    goto LABEL_56;
  }
  *(void *)int buf = 0;
  *(void *)&buf[8] = buf;
  *(void *)&buf[16] = 0x3032000000;
  uint64_t v30 = __Block_byref_object_copy__4450;
  uint64_t v31 = __Block_byref_object_dispose__4451;
  id v32 = 0;
  v26[0] = MEMORY[0x1E4F143A8];
  v26[1] = 3221225472;
  v26[2] = __nw_framer_options_copy_object_value_block_invoke;
  void v26[3] = &unk_1E5249098;
  void v26[4] = buf;
  v26[5] = key;
  nw_protocol_options_access_handle(v4, v26);
  id v5 = *(id *)(*(void *)&buf[8] + 40);
  _Block_object_dispose(buf, 8);

LABEL_5:
  return v5;
}

void sub_18368711C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id a26)
{
  _Block_object_dispose(&a21, 8);

  _Unwind_Resume(a1);
}

uint64_t __nw_framer_options_copy_object_value_block_invoke(uint64_t a1, uint64_t *a2)
{
  if (*a2)
  {
    uint64_t v3 = nw_dictionary_copy_value(*a2, *(void *)(a1 + 40));
    uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8);
    id v5 = *(void **)(v4 + 40);
    *(void *)(v4 + 40) = v3;
  }
  return 1;
}

void nw_framer_options_set_peer_protocol_definition(void *a1, void *a2)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  if (!v3)
  {
    id v5 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    char v29 = "nw_framer_options_set_peer_protocol_definition";
    BOOL v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (!__nwlog_fault(v6, &type, &v26)) {
      goto LABEL_55;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        char v29 = "nw_framer_options_set_peer_protocol_definition";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null options", buf, 0xCu);
      }
    }
    else if (v26)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)int buf = 136446466;
          char v29 = "nw_framer_options_set_peer_protocol_definition";
          __int16 v30 = 2082;
          uint64_t v31 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v14, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_55:
        if (!v6) {
          goto LABEL_5;
        }
LABEL_56:
        free(v6);
        goto LABEL_5;
      }
      if (v15)
      {
        *(_DWORD *)int buf = 136446210;
        char v29 = "nw_framer_options_set_peer_protocol_definition";
        _os_log_impl(&dword_1830D4000, v7, v14, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v21 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        char v29 = "nw_framer_options_set_peer_protocol_definition";
        _os_log_impl(&dword_1830D4000, v7, v21, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_54:

    goto LABEL_55;
  }
  if (!nw_protocol_options_has_standard_framer_options(v3))
  {
    os_log_type_t v9 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    char v29 = "nw_framer_options_set_peer_protocol_definition";
    BOOL v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (!__nwlog_fault(v6, &type, &v26)) {
      goto LABEL_55;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        char v29 = "nw_framer_options_set_peer_protocol_definition";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null nw_protocol_options_has_standard_framer_options(options)", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!v26)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v22 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        char v29 = "nw_framer_options_set_peer_protocol_definition";
        _os_log_impl(&dword_1830D4000, v7, v22, "%{public}s called with null nw_protocol_options_has_standard_framer_options(options), backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    os_log_type_t v16 = (char *)__nw_create_backtrace_string();
    uint64_t v7 = __nwlog_obj();
    os_log_type_t v17 = type;
    BOOL v18 = os_log_type_enabled(v7, type);
    if (!v16)
    {
      if (v18)
      {
        *(_DWORD *)int buf = 136446210;
        char v29 = "nw_framer_options_set_peer_protocol_definition";
        _os_log_impl(&dword_1830D4000, v7, v17, "%{public}s called with null nw_protocol_options_has_standard_framer_options(options), no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v18)
    {
      *(_DWORD *)int buf = 136446466;
      char v29 = "nw_framer_options_set_peer_protocol_definition";
      __int16 v30 = 2082;
      uint64_t v31 = v16;
      _os_log_impl(&dword_1830D4000, v7, v17, "%{public}s called with null nw_protocol_options_has_standard_framer_options(options), dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_35;
  }
  if (!v4)
  {
    os_log_type_t v11 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    char v29 = "nw_framer_options_set_peer_protocol_definition";
    BOOL v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (!__nwlog_fault(v6, &type, &v26)) {
      goto LABEL_55;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        char v29 = "nw_framer_options_set_peer_protocol_definition";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null peer_protocol_definition", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!v26)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v23 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        char v29 = "nw_framer_options_set_peer_protocol_definition";
        _os_log_impl(&dword_1830D4000, v7, v23, "%{public}s called with null peer_protocol_definition, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    os_log_type_t v16 = (char *)__nw_create_backtrace_string();
    uint64_t v7 = __nwlog_obj();
    os_log_type_t v19 = type;
    BOOL v20 = os_log_type_enabled(v7, type);
    if (!v16)
    {
      if (v20)
      {
        *(_DWORD *)int buf = 136446210;
        char v29 = "nw_framer_options_set_peer_protocol_definition";
        _os_log_impl(&dword_1830D4000, v7, v19, "%{public}s called with null peer_protocol_definition, no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v20)
    {
      *(_DWORD *)int buf = 136446466;
      char v29 = "nw_framer_options_set_peer_protocol_definition";
      __int16 v30 = 2082;
      uint64_t v31 = v16;
      _os_log_impl(&dword_1830D4000, v7, v19, "%{public}s called with null peer_protocol_definition, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_35:

    free(v16);
    if (!v6) {
      goto LABEL_5;
    }
    goto LABEL_56;
  }
  v24[0] = MEMORY[0x1E4F143A8];
  v24[1] = 3221225472;
  v24[2] = __nw_framer_options_set_peer_protocol_definition_block_invoke;
  v24[3] = &unk_1E5248F68;
  id v25 = v4;
  nw_protocol_options_access_handle(v3, v24);

LABEL_5:
}

void sub_1836878B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_framer_options_set_peer_protocol_definition_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1;
}

id nw_framer_options_copy_peer_protocol_definition(void *a1)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  nw_framer_t v2 = v1;
  if (!v1)
  {
    uint64_t v7 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_framer_options_copy_peer_protocol_definition";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (!__nwlog_fault(v8, &type, &v23)) {
      goto LABEL_38;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_framer_options_copy_peer_protocol_definition";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null options", buf, 0xCu);
      }
    }
    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_framer_options_copy_peer_protocol_definition";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        if (!v8) {
          goto LABEL_40;
        }
        goto LABEL_39;
      }
      if (v15)
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_framer_options_copy_peer_protocol_definition";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_framer_options_copy_peer_protocol_definition";
        _os_log_impl(&dword_1830D4000, v9, v19, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_37;
  }
  id v3 = (id *)v1;
  id v4 = v3[1];

  char is_framer = nw_protocol_definition_is_framer(v4);
  if ((is_framer & 1) == 0)
  {
    os_log_type_t v11 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_framer_options_copy_peer_protocol_definition";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (!__nwlog_fault(v8, &type, &v23)) {
      goto LABEL_38;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_framer_options_copy_peer_protocol_definition";
        _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null nw_protocol_options_is_framer(options)", buf, 0xCu);
      }
    }
    else if (v23)
    {
      os_log_type_t v16 = (char *)__nw_create_backtrace_string();
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v17 = type;
      BOOL v18 = os_log_type_enabled(v9, type);
      if (v16)
      {
        if (v18)
        {
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_framer_options_copy_peer_protocol_definition";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v16;
          _os_log_impl(&dword_1830D4000, v9, v17, "%{public}s called with null nw_protocol_options_is_framer(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v16);
LABEL_38:
        if (!v8) {
          goto LABEL_40;
        }
LABEL_39:
        free(v8);
        goto LABEL_40;
      }
      if (v18)
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_framer_options_copy_peer_protocol_definition";
        _os_log_impl(&dword_1830D4000, v9, v17, "%{public}s called with null nw_protocol_options_is_framer(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_framer_options_copy_peer_protocol_definition";
        _os_log_impl(&dword_1830D4000, v9, v20, "%{public}s called with null nw_protocol_options_is_framer(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_37:

    goto LABEL_38;
  }
  if (!nw_protocol_options_has_standard_framer_options(v3))
  {
LABEL_40:
    id v6 = 0;
    goto LABEL_41;
  }
  *(void *)int buf = 0;
  *(void *)&buf[8] = buf;
  *(void *)&buf[16] = 0x3032000000;
  char v26 = __Block_byref_object_copy__4450;
  char v27 = __Block_byref_object_dispose__4451;
  id v28 = 0;
  v22[0] = MEMORY[0x1E4F143A8];
  v22[1] = 3221225472;
  v22[2] = __nw_framer_options_copy_peer_protocol_definition_block_invoke;
  v22[3] = &unk_1E5248E90;
  void v22[4] = buf;
  nw_protocol_options_access_handle(v3, v22);
  id v6 = *(id *)(*(void *)&buf[8] + 40);
  _Block_object_dispose(buf, 8);

LABEL_41:
  return v6;
}