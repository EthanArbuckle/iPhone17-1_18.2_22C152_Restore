void ___ZL36nw_endpoint_flow_validate_delegationP30NWConcrete_nw_endpoint_handler_block_invoke()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t vars8;

  v0 = nw_utilities_copy_local_entitlement_value("com.apple.private.network.delegation-allowlist");
  v1 = (void *)nw_endpoint_flow_validate_delegation(NWConcrete_nw_endpoint_handler *)::delegation_allowlist;
  nw_endpoint_flow_validate_delegation(NWConcrete_nw_endpoint_handler *)::delegation_allowlist = v0;

  if (!nw_endpoint_flow_validate_delegation(NWConcrete_nw_endpoint_handler *)::delegation_allowlist)
  {
    v2 = nw_utilities_copy_local_entitlement_value("com.apple.private.network.delegation-whitelist");
    v3 = (void *)nw_endpoint_flow_validate_delegation(NWConcrete_nw_endpoint_handler *)::delegation_allowlist;
    nw_endpoint_flow_validate_delegation(NWConcrete_nw_endpoint_handler *)::delegation_allowlist = v2;
  }
}

uint64_t nw_utilities_copy_local_entitlement_value(char *cStr)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  if (!cStr)
  {
    v41 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v51 = "nw_utilities_copy_local_entitlement_value";
    v13 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(error) = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v13, &error, &type)) {
      goto LABEL_74;
    }
    if (error == 17)
    {
      v17 = __nwlog_obj();
      os_log_type_t v42 = error;
      if (os_log_type_enabled(v17, (os_log_type_t)error))
      {
        *(_DWORD *)buf = 136446210;
        v51 = "nw_utilities_copy_local_entitlement_value";
        _os_log_impl(&dword_1830D4000, v17, v42, "%{public}s called with null entitlement", buf, 0xCu);
      }
    }
    else if (type)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v17 = __nwlog_obj();
      os_log_type_t v44 = error;
      BOOL v45 = os_log_type_enabled(v17, (os_log_type_t)error);
      if (backtrace_string)
      {
        if (v45)
        {
          *(_DWORD *)buf = 136446466;
          v51 = "nw_utilities_copy_local_entitlement_value";
          __int16 v52 = 2082;
          CFErrorRef v53 = (CFErrorRef)backtrace_string;
          _os_log_impl(&dword_1830D4000, v17, v44, "%{public}s called with null entitlement, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_74;
      }
      if (v45)
      {
        *(_DWORD *)buf = 136446210;
        v51 = "nw_utilities_copy_local_entitlement_value";
        _os_log_impl(&dword_1830D4000, v17, v44, "%{public}s called with null entitlement, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      v17 = __nwlog_obj();
      os_log_type_t v46 = error;
      if (os_log_type_enabled(v17, (os_log_type_t)error))
      {
        *(_DWORD *)buf = 136446210;
        v51 = "nw_utilities_copy_local_entitlement_value";
        _os_log_impl(&dword_1830D4000, v17, v46, "%{public}s called with null entitlement, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_73:

    goto LABEL_74;
  }
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFStringRef v3 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], cStr, 0x8000100u);
  if (v3)
  {
    CFStringRef v4 = v3;
    v5 = SecTaskCreateFromSelf(v2);
    if (v5)
    {
      v6 = v5;
      CFErrorRef error = 0;
      CFTypeRef v7 = SecTaskCopyValueForEntitlement(v5, v4, &error);
      if (!error) {
        goto LABEL_57;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v8 = (id)gLogObj;
      *(_DWORD *)buf = 136446466;
      v51 = "nw_utilities_copy_local_entitlement_value";
      __int16 v52 = 2114;
      CFErrorRef v53 = error;
      v9 = (void *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v47 = 0;
      if (__nwlog_fault((const char *)v9, &type, &v47))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v10 = (id)gLogObj;
          os_log_type_t v11 = type;
          if (os_log_type_enabled(v10, type))
          {
            *(_DWORD *)buf = 136446466;
            v51 = "nw_utilities_copy_local_entitlement_value";
            __int16 v52 = 2114;
            CFErrorRef v53 = error;
            _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s SecTaskCopyValueForEntitlement %{public}@ failed", buf, 0x16u);
          }
        }
        else if (v47)
        {
          v22 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v10 = (id)gLogObj;
          os_log_type_t v23 = type;
          BOOL v24 = os_log_type_enabled(v10, type);
          if (v22)
          {
            if (v24)
            {
              *(_DWORD *)buf = 136446722;
              v51 = "nw_utilities_copy_local_entitlement_value";
              __int16 v52 = 2114;
              CFErrorRef v53 = error;
              __int16 v54 = 2082;
              v55 = v22;
              _os_log_impl(&dword_1830D4000, v10, v23, "%{public}s SecTaskCopyValueForEntitlement %{public}@ failed, dumping backtrace:%{public}s", buf, 0x20u);
            }

            free(v22);
            if (!v9) {
              goto LABEL_55;
            }
LABEL_54:
            free(v9);
LABEL_55:
            if (error)
            {
              CFRelease(error);
              CFErrorRef error = 0;
            }
LABEL_57:
            if (!v7)
            {
              uint64_t v31 = 0;
LABEL_86:
              CFRelease(v6);
              CFRelease(v4);
              return v31;
            }
            uint64_t v31 = _CFXPCCreateXPCObjectFromCFObject();
            if (!v31)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              id v32 = (id)gLogObj;
              *(_DWORD *)buf = 136446210;
              v51 = "nw_utilities_copy_local_entitlement_value";
              v33 = (char *)_os_log_send_and_compose_impl();

              os_log_type_t type = OS_LOG_TYPE_ERROR;
              char v47 = 0;
              if (__nwlog_fault(v33, &type, &v47))
              {
                if (type == OS_LOG_TYPE_FAULT)
                {
                  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                  networkd_settings_init();
                  v34 = (id)gLogObj;
                  os_log_type_t v35 = type;
                  if (os_log_type_enabled(v34, type))
                  {
                    *(_DWORD *)buf = 136446210;
                    v51 = "nw_utilities_copy_local_entitlement_value";
                    _os_log_impl(&dword_1830D4000, v34, v35, "%{public}s _CFXPCCreateXPCObjectFromCFObject failed", buf, 0xCu);
                  }
                }
                else if (v47)
                {
                  v36 = (char *)__nw_create_backtrace_string();
                  v34 = __nwlog_obj();
                  os_log_type_t v37 = type;
                  BOOL v38 = os_log_type_enabled(v34, type);
                  if (v36)
                  {
                    if (v38)
                    {
                      *(_DWORD *)buf = 136446466;
                      v51 = "nw_utilities_copy_local_entitlement_value";
                      __int16 v52 = 2082;
                      CFErrorRef v53 = (CFErrorRef)v36;
                      _os_log_impl(&dword_1830D4000, v34, v37, "%{public}s _CFXPCCreateXPCObjectFromCFObject failed, dumping backtrace:%{public}s", buf, 0x16u);
                    }

                    free(v36);
                    if (!v33) {
                      goto LABEL_85;
                    }
                    goto LABEL_84;
                  }
                  if (v38)
                  {
                    *(_DWORD *)buf = 136446210;
                    v51 = "nw_utilities_copy_local_entitlement_value";
                    _os_log_impl(&dword_1830D4000, v34, v37, "%{public}s _CFXPCCreateXPCObjectFromCFObject failed, no backtrace", buf, 0xCu);
                  }
                }
                else
                {
                  v34 = __nwlog_obj();
                  os_log_type_t v39 = type;
                  if (os_log_type_enabled(v34, type))
                  {
                    *(_DWORD *)buf = 136446210;
                    v51 = "nw_utilities_copy_local_entitlement_value";
                    _os_log_impl(&dword_1830D4000, v34, v39, "%{public}s _CFXPCCreateXPCObjectFromCFObject failed, backtrace limit exceeded", buf, 0xCu);
                  }
                }
              }
              if (v33) {
LABEL_84:
              }
                free(v33);
            }
LABEL_85:
            CFRelease(v7);
            goto LABEL_86;
          }
          if (v24)
          {
            *(_DWORD *)buf = 136446466;
            v51 = "nw_utilities_copy_local_entitlement_value";
            __int16 v52 = 2114;
            CFErrorRef v53 = error;
            _os_log_impl(&dword_1830D4000, v10, v23, "%{public}s SecTaskCopyValueForEntitlement %{public}@ failed, no backtrace", buf, 0x16u);
          }
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v10 = (id)gLogObj;
          os_log_type_t v29 = type;
          if (os_log_type_enabled(v10, type))
          {
            *(_DWORD *)buf = 136446466;
            v51 = "nw_utilities_copy_local_entitlement_value";
            __int16 v52 = 2114;
            CFErrorRef v53 = error;
            _os_log_impl(&dword_1830D4000, v10, v29, "%{public}s SecTaskCopyValueForEntitlement %{public}@ failed, backtrace limit exceeded", buf, 0x16u);
          }
        }
      }
      if (!v9) {
        goto LABEL_55;
      }
      goto LABEL_54;
    }
    CFRelease(v4);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v16 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v51 = "nw_utilities_copy_local_entitlement_value";
    v13 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(error) = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v13, &error, &type))
    {
      if (error == 17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v17 = (id)gLogObj;
        os_log_type_t v18 = error;
        if (os_log_type_enabled(v17, (os_log_type_t)error))
        {
          *(_DWORD *)buf = 136446210;
          v51 = "nw_utilities_copy_local_entitlement_value";
          _os_log_impl(&dword_1830D4000, v17, v18, "%{public}s SecTaskCreateFromSelf failed", buf, 0xCu);
        }
      }
      else if (type)
      {
        v25 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v17 = (id)gLogObj;
        os_log_type_t v26 = error;
        BOOL v27 = os_log_type_enabled(v17, (os_log_type_t)error);
        if (v25)
        {
          if (v27)
          {
            *(_DWORD *)buf = 136446466;
            v51 = "nw_utilities_copy_local_entitlement_value";
            __int16 v52 = 2082;
            CFErrorRef v53 = (CFErrorRef)v25;
            _os_log_impl(&dword_1830D4000, v17, v26, "%{public}s SecTaskCreateFromSelf failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v25);
          if (!v13) {
            return 0;
          }
          goto LABEL_75;
        }
        if (v27)
        {
          *(_DWORD *)buf = 136446210;
          v51 = "nw_utilities_copy_local_entitlement_value";
          _os_log_impl(&dword_1830D4000, v17, v26, "%{public}s SecTaskCreateFromSelf failed, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v17 = (id)gLogObj;
        os_log_type_t v30 = error;
        if (os_log_type_enabled(v17, (os_log_type_t)error))
        {
          *(_DWORD *)buf = 136446210;
          v51 = "nw_utilities_copy_local_entitlement_value";
          _os_log_impl(&dword_1830D4000, v17, v30, "%{public}s SecTaskCreateFromSelf failed, backtrace limit exceeded", buf, 0xCu);
        }
      }
      goto LABEL_73;
    }
  }
  else
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v12 = (id)gLogObj;
    *(_DWORD *)buf = 136446466;
    v51 = "nw_utilities_copy_local_entitlement_value";
    __int16 v52 = 2082;
    CFErrorRef v53 = (CFErrorRef)cStr;
    v13 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(error) = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v13, &error, &type))
    {
      if (error == 17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v14 = (id)gLogObj;
        os_log_type_t v15 = error;
        if (os_log_type_enabled(v14, (os_log_type_t)error))
        {
          *(_DWORD *)buf = 136446466;
          v51 = "nw_utilities_copy_local_entitlement_value";
          __int16 v52 = 2082;
          CFErrorRef v53 = (CFErrorRef)cStr;
          _os_log_impl(&dword_1830D4000, v14, v15, "%{public}s CFStringCreateWithCString(%{public}s) failed", buf, 0x16u);
        }
      }
      else if (type)
      {
        v19 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v14 = (id)gLogObj;
        os_log_type_t v20 = error;
        BOOL v21 = os_log_type_enabled(v14, (os_log_type_t)error);
        if (v19)
        {
          if (v21)
          {
            *(_DWORD *)buf = 136446722;
            v51 = "nw_utilities_copy_local_entitlement_value";
            __int16 v52 = 2082;
            CFErrorRef v53 = (CFErrorRef)cStr;
            __int16 v54 = 2082;
            v55 = v19;
            _os_log_impl(&dword_1830D4000, v14, v20, "%{public}s CFStringCreateWithCString(%{public}s) failed, dumping backtrace:%{public}s", buf, 0x20u);
          }

          free(v19);
          if (!v13) {
            return 0;
          }
          goto LABEL_75;
        }
        if (v21)
        {
          *(_DWORD *)buf = 136446466;
          v51 = "nw_utilities_copy_local_entitlement_value";
          __int16 v52 = 2082;
          CFErrorRef v53 = (CFErrorRef)cStr;
          _os_log_impl(&dword_1830D4000, v14, v20, "%{public}s CFStringCreateWithCString(%{public}s) failed, no backtrace", buf, 0x16u);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v14 = (id)gLogObj;
        os_log_type_t v28 = error;
        if (os_log_type_enabled(v14, (os_log_type_t)error))
        {
          *(_DWORD *)buf = 136446466;
          v51 = "nw_utilities_copy_local_entitlement_value";
          __int16 v52 = 2082;
          CFErrorRef v53 = (CFErrorRef)cStr;
          _os_log_impl(&dword_1830D4000, v14, v28, "%{public}s CFStringCreateWithCString(%{public}s) failed, backtrace limit exceeded", buf, 0x16u);
        }
      }
    }
  }
LABEL_74:
  if (v13) {
LABEL_75:
  }
    free(v13);
  return 0;
}

void sub_1833BE250(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_data_transfer_report_get_received_application_byte_count(nw_data_transfer_report_t report, uint32_t path_index)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  CFStringRef v3 = report;
  CFStringRef v4 = v3;
  if (!v3)
  {
    v17 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v34 = "nw_data_transfer_report_get_received_application_byte_count";
    os_log_type_t v18 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v31 = 0;
    if (!__nwlog_fault(v18, &type, &v31)) {
      goto LABEL_57;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      v19 = __nwlog_obj();
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_data_transfer_report_get_received_application_byte_count";
        _os_log_impl(&dword_1830D4000, v19, v20, "%{public}s called with null report", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (!v31)
    {
      v19 = __nwlog_obj();
      os_log_type_t v29 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_data_transfer_report_get_received_application_byte_count";
        _os_log_impl(&dword_1830D4000, v19, v29, "%{public}s called with null report, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_56;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v19 = __nwlog_obj();
    os_log_type_t v25 = type;
    BOOL v26 = os_log_type_enabled(v19, type);
    if (!backtrace_string)
    {
      if (v26)
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_data_transfer_report_get_received_application_byte_count";
        _os_log_impl(&dword_1830D4000, v19, v25, "%{public}s called with null report, no backtrace", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (v26)
    {
      *(_DWORD *)buf = 136446466;
      v34 = "nw_data_transfer_report_get_received_application_byte_count";
      __int16 v35 = 2082;
      v36 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v19, v25, "%{public}s called with null report, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_44;
  }
  if (nw_data_transfer_report_get_state(v3) != nw_data_transfer_report_state_collected)
  {
    BOOL v21 = __nwlog_obj();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      v34 = "nw_data_transfer_report_get_received_application_byte_count";
      _os_log_impl(&dword_1830D4000, v21, OS_LOG_TYPE_ERROR, "%{public}s Cannot retrieve data report values until collected", buf, 0xCu);
    }

    goto LABEL_59;
  }
  if (path_index == -1)
  {
    uint64_t isa = (uint64_t)v4[27].isa;
    uint64_t isa_high = HIDWORD(v4[5].isa);
    if (isa_high < 2) {
      goto LABEL_14;
    }
    if (isa_high == 2)
    {
      uint64_t v9 = 1;
    }
    else
    {
      uint64_t v11 = 0;
      uint64_t v12 = isa_high - 1;
      Class v13 = v4[52].isa;
      unint64_t v14 = (isa_high - 1) & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        isa += *((void *)v13 + 20);
        v11 += *((void *)v13 + 65);
        Class v13 = (Class)((char *)v13 + 720);
        v14 -= 2;
      }
      while (v14);
      isa += v11;
      if (v12 == ((isa_high - 1) & 0xFFFFFFFFFFFFFFFELL)) {
        goto LABEL_14;
      }
      uint64_t v9 = v12 | 1;
    }
    uint64_t v15 = isa_high - v9;
    id v16 = (void *)((char *)v4[52].isa + 360 * v9 - 200);
    do
    {
      isa += *v16;
      v16 += 45;
      --v15;
    }
    while (v15);
    goto LABEL_14;
  }
  if (HIDWORD(v4[5].isa) <= path_index)
  {
    v22 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v34 = "nw_data_transfer_report_get_received_application_byte_count";
    os_log_type_t v18 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v31 = 0;
    if (!__nwlog_fault(v18, &type, &v31)) {
      goto LABEL_57;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      v19 = __nwlog_obj();
      os_log_type_t v23 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_data_transfer_report_get_received_application_byte_count";
        _os_log_impl(&dword_1830D4000, v19, v23, "%{public}s called with null (path_index < report->path_count)", buf, 0xCu);
      }
LABEL_56:

LABEL_57:
      if (v18) {
        free(v18);
      }
LABEL_59:
      uint64_t isa = 0;
      goto LABEL_14;
    }
    if (!v31)
    {
      v19 = __nwlog_obj();
      os_log_type_t v30 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_data_transfer_report_get_received_application_byte_count";
        _os_log_impl(&dword_1830D4000, v19, v30, "%{public}s called with null (path_index < report->path_count), backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_56;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v19 = __nwlog_obj();
    os_log_type_t v27 = type;
    BOOL v28 = os_log_type_enabled(v19, type);
    if (!backtrace_string)
    {
      if (v28)
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_data_transfer_report_get_received_application_byte_count";
        _os_log_impl(&dword_1830D4000, v19, v27, "%{public}s called with null (path_index < report->path_count), no backtrace", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (v28)
    {
      *(_DWORD *)buf = 136446466;
      v34 = "nw_data_transfer_report_get_received_application_byte_count";
      __int16 v35 = 2082;
      v36 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v19, v27, "%{public}s called with null (path_index < report->path_count), dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_44:

    free(backtrace_string);
    goto LABEL_57;
  }
  v5 = v4;
  if (HIDWORD(v4[5].isa) <= path_index)
  {
    uint64_t v6 = 0;
  }
  else if (path_index)
  {
    uint64_t v6 = (uint64_t)v5[52].isa + 360 * path_index - 360;
  }
  else
  {
    uint64_t v6 = (uint64_t)&v5[7];
  }

  uint64_t isa = *(void *)(v6 + 160);
LABEL_14:

  return isa;
}

void sub_1833BE850(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_data_transfer_report_get_sent_application_byte_count(nw_data_transfer_report_t report, uint32_t path_index)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  CFStringRef v3 = report;
  CFStringRef v4 = v3;
  if (!v3)
  {
    v17 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v34 = "nw_data_transfer_report_get_sent_application_byte_count";
    os_log_type_t v18 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v31 = 0;
    if (!__nwlog_fault(v18, &type, &v31)) {
      goto LABEL_57;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      v19 = __nwlog_obj();
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_data_transfer_report_get_sent_application_byte_count";
        _os_log_impl(&dword_1830D4000, v19, v20, "%{public}s called with null report", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (!v31)
    {
      v19 = __nwlog_obj();
      os_log_type_t v29 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_data_transfer_report_get_sent_application_byte_count";
        _os_log_impl(&dword_1830D4000, v19, v29, "%{public}s called with null report, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_56;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v19 = __nwlog_obj();
    os_log_type_t v25 = type;
    BOOL v26 = os_log_type_enabled(v19, type);
    if (!backtrace_string)
    {
      if (v26)
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_data_transfer_report_get_sent_application_byte_count";
        _os_log_impl(&dword_1830D4000, v19, v25, "%{public}s called with null report, no backtrace", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (v26)
    {
      *(_DWORD *)buf = 136446466;
      v34 = "nw_data_transfer_report_get_sent_application_byte_count";
      __int16 v35 = 2082;
      v36 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v19, v25, "%{public}s called with null report, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_44;
  }
  if (nw_data_transfer_report_get_state(v3) != nw_data_transfer_report_state_collected)
  {
    BOOL v21 = __nwlog_obj();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      v34 = "nw_data_transfer_report_get_sent_application_byte_count";
      _os_log_impl(&dword_1830D4000, v21, OS_LOG_TYPE_ERROR, "%{public}s Cannot retrieve data report values until collected", buf, 0xCu);
    }

    goto LABEL_59;
  }
  if (path_index == -1)
  {
    uint64_t isa = (uint64_t)v4[28].isa;
    uint64_t isa_high = HIDWORD(v4[5].isa);
    if (isa_high < 2) {
      goto LABEL_14;
    }
    if (isa_high == 2)
    {
      uint64_t v9 = 1;
    }
    else
    {
      uint64_t v11 = 0;
      uint64_t v12 = isa_high - 1;
      Class v13 = v4[52].isa;
      unint64_t v14 = (isa_high - 1) & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        isa += *((void *)v13 + 21);
        v11 += *((void *)v13 + 66);
        Class v13 = (Class)((char *)v13 + 720);
        v14 -= 2;
      }
      while (v14);
      isa += v11;
      if (v12 == ((isa_high - 1) & 0xFFFFFFFFFFFFFFFELL)) {
        goto LABEL_14;
      }
      uint64_t v9 = v12 | 1;
    }
    uint64_t v15 = isa_high - v9;
    id v16 = (void *)((char *)v4[52].isa + 360 * v9 - 192);
    do
    {
      isa += *v16;
      v16 += 45;
      --v15;
    }
    while (v15);
    goto LABEL_14;
  }
  if (HIDWORD(v4[5].isa) <= path_index)
  {
    v22 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v34 = "nw_data_transfer_report_get_sent_application_byte_count";
    os_log_type_t v18 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v31 = 0;
    if (!__nwlog_fault(v18, &type, &v31)) {
      goto LABEL_57;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      v19 = __nwlog_obj();
      os_log_type_t v23 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_data_transfer_report_get_sent_application_byte_count";
        _os_log_impl(&dword_1830D4000, v19, v23, "%{public}s called with null (path_index < report->path_count)", buf, 0xCu);
      }
LABEL_56:

LABEL_57:
      if (v18) {
        free(v18);
      }
LABEL_59:
      uint64_t isa = 0;
      goto LABEL_14;
    }
    if (!v31)
    {
      v19 = __nwlog_obj();
      os_log_type_t v30 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_data_transfer_report_get_sent_application_byte_count";
        _os_log_impl(&dword_1830D4000, v19, v30, "%{public}s called with null (path_index < report->path_count), backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_56;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v19 = __nwlog_obj();
    os_log_type_t v27 = type;
    BOOL v28 = os_log_type_enabled(v19, type);
    if (!backtrace_string)
    {
      if (v28)
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_data_transfer_report_get_sent_application_byte_count";
        _os_log_impl(&dword_1830D4000, v19, v27, "%{public}s called with null (path_index < report->path_count), no backtrace", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (v28)
    {
      *(_DWORD *)buf = 136446466;
      v34 = "nw_data_transfer_report_get_sent_application_byte_count";
      __int16 v35 = 2082;
      v36 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v19, v27, "%{public}s called with null (path_index < report->path_count), dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_44:

    free(backtrace_string);
    goto LABEL_57;
  }
  v5 = v4;
  if (HIDWORD(v4[5].isa) <= path_index)
  {
    uint64_t v6 = 0;
  }
  else if (path_index)
  {
    uint64_t v6 = (uint64_t)v5[52].isa + 360 * path_index - 360;
  }
  else
  {
    uint64_t v6 = (uint64_t)&v5[7];
  }

  uint64_t isa = *(void *)(v6 + 168);
LABEL_14:

  return isa;
}

void sub_1833BEE4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

nw_interface_radio_type_t nw_data_transfer_report_get_path_radio_type(nw_data_transfer_report_t report, uint32_t path_index)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  CFStringRef v3 = report;
  CFStringRef v4 = v3;
  if (!v3)
  {
    v10 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v34 = "nw_data_transfer_report_get_path_radio_type";
    uint64_t v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v31 = 0;
    if (!__nwlog_fault(v11, &type, &v31)) {
      goto LABEL_49;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v12 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_data_transfer_report_get_path_radio_type";
        _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s called with null report", buf, 0xCu);
      }
    }
    else if (v31)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v12 = __nwlog_obj();
      os_log_type_t v20 = type;
      BOOL v21 = os_log_type_enabled(v12, type);
      if (backtrace_string)
      {
        if (v21)
        {
          *(_DWORD *)buf = 136446466;
          v34 = "nw_data_transfer_report_get_path_radio_type";
          __int16 v35 = 2082;
          *(void *)v36 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v12, v20, "%{public}s called with null report, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_49;
      }
      if (v21)
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_data_transfer_report_get_path_radio_type";
        _os_log_impl(&dword_1830D4000, v12, v20, "%{public}s called with null report, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v12 = __nwlog_obj();
      os_log_type_t v27 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_data_transfer_report_get_path_radio_type";
        _os_log_impl(&dword_1830D4000, v12, v27, "%{public}s called with null report, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_48;
  }
  if (nw_data_transfer_report_get_state(v3) != nw_data_transfer_report_state_collected)
  {
    unint64_t v14 = __nwlog_obj();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      v34 = "nw_data_transfer_report_get_path_radio_type";
      _os_log_impl(&dword_1830D4000, v14, OS_LOG_TYPE_ERROR, "%{public}s Cannot retrieve data report values until collected", buf, 0xCu);
    }

    goto LABEL_51;
  }
  if (path_index == -1) {
    uint32_t v5 = 0;
  }
  else {
    uint32_t v5 = path_index;
  }
  if (v5 >= HIDWORD(v4[5].isa))
  {
    uint64_t v15 = __nwlog_obj();
    int isa_high = HIDWORD(v4[5].isa);
    *(_DWORD *)buf = 136446722;
    v34 = "nw_data_transfer_report_get_path_radio_type";
    __int16 v35 = 1024;
    *(_DWORD *)v36 = v5;
    *(_WORD *)&v36[4] = 1024;
    *(_DWORD *)&v36[6] = isa_high;
    uint64_t v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v31 = 0;
    if (!__nwlog_fault(v11, &type, &v31)) {
      goto LABEL_49;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v12 = __nwlog_obj();
      os_log_type_t v17 = type;
      if (os_log_type_enabled(v12, type))
      {
        int v18 = HIDWORD(v4[5].isa);
        *(_DWORD *)buf = 136446722;
        v34 = "nw_data_transfer_report_get_path_radio_type";
        __int16 v35 = 1024;
        *(_DWORD *)v36 = v5;
        *(_WORD *)&v36[4] = 1024;
        *(_DWORD *)&v36[6] = v18;
        _os_log_impl(&dword_1830D4000, v12, v17, "%{public}s path_index (%u) >= report->path_count (%u)", buf, 0x18u);
      }
    }
    else if (v31)
    {
      uint32_t v22 = v5;
      os_log_type_t v23 = (char *)__nw_create_backtrace_string();
      uint64_t v12 = __nwlog_obj();
      os_log_type_t v24 = type;
      BOOL v25 = os_log_type_enabled(v12, type);
      if (v23)
      {
        if (v25)
        {
          int v26 = HIDWORD(v4[5].isa);
          *(_DWORD *)buf = 136446978;
          v34 = "nw_data_transfer_report_get_path_radio_type";
          __int16 v35 = 1024;
          *(_DWORD *)v36 = v22;
          *(_WORD *)&v36[4] = 1024;
          *(_DWORD *)&v36[6] = v26;
          __int16 v37 = 2082;
          BOOL v38 = v23;
          _os_log_impl(&dword_1830D4000, v12, v24, "%{public}s path_index (%u) >= report->path_count (%u), dumping backtrace:%{public}s", buf, 0x22u);
        }

        free(v23);
        goto LABEL_49;
      }
      if (v25)
      {
        int v30 = HIDWORD(v4[5].isa);
        *(_DWORD *)buf = 136446722;
        v34 = "nw_data_transfer_report_get_path_radio_type";
        __int16 v35 = 1024;
        *(_DWORD *)v36 = v22;
        *(_WORD *)&v36[4] = 1024;
        *(_DWORD *)&v36[6] = v30;
        _os_log_impl(&dword_1830D4000, v12, v24, "%{public}s path_index (%u) >= report->path_count (%u), no backtrace", buf, 0x18u);
      }
    }
    else
    {
      uint64_t v12 = __nwlog_obj();
      os_log_type_t v28 = type;
      if (os_log_type_enabled(v12, type))
      {
        int v29 = HIDWORD(v4[5].isa);
        *(_DWORD *)buf = 136446722;
        v34 = "nw_data_transfer_report_get_path_radio_type";
        __int16 v35 = 1024;
        *(_DWORD *)v36 = v5;
        *(_WORD *)&v36[4] = 1024;
        *(_DWORD *)&v36[6] = v29;
        _os_log_impl(&dword_1830D4000, v12, v28, "%{public}s path_index (%u) >= report->path_count (%u), backtrace limit exceeded", buf, 0x18u);
      }
    }
LABEL_48:

LABEL_49:
    if (v11) {
      free(v11);
    }
LABEL_51:
    radio_os_log_type_t type = nw_interface_radio_type_unknown;
    goto LABEL_13;
  }
  uint64_t v6 = v4;
  if (HIDWORD(v4[5].isa) <= v5)
  {
    uint64_t v7 = 0;
  }
  else if (v5)
  {
    uint64_t v7 = (uint64_t)v6[52].isa + 360 * v5 - 360;
  }
  else
  {
    uint64_t v7 = (uint64_t)&v6[7];
  }

  radio_os_log_type_t type = nw_interface_get_radio_type(*(void **)(v7 + 352));
LABEL_13:

  return radio_type;
}

void sub_1833BF434(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_data_transfer_add_initial_snapshot(void *a1, void *a2, NWConcrete_nw_interface **a3)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  uint32_t v5 = a1;
  uint64_t v6 = a2;
  if (a3)
  {
    uint64_t v7 = *a3;
    if (!*a3 || v6 && v7 == (NWConcrete_nw_interface *)v6->index)
    {
      id v8 = v6;
    }
    else
    {
      id v8 = nw_interface_create_with_index(v7);

      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v9 = (id)gLogObj;
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        v10 = *a3;
        *(_DWORD *)buf = 136446722;
        int v30 = "nw_data_transfer_add_initial_snapshot";
        __int16 v31 = 2112;
        id v32 = v8;
        __int16 v33 = 2048;
        v34 = v10;
        _os_log_impl(&dword_1830D4000, v9, OS_LOG_TYPE_DEBUG, "%{public}s created interface %@ from index %llu", buf, 0x20u);
      }
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v11 = (id)gLogObj;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      radio_os_log_type_t type = nw_interface_get_radio_type(v8);
      os_log_type_t v13 = nw_interface_radio_type_to_string(radio_type);
      *(_DWORD *)buf = 136446978;
      int v30 = "nw_data_transfer_add_initial_snapshot";
      __int16 v31 = 2048;
      id v32 = v5;
      __int16 v33 = 2112;
      v34 = v8;
      __int16 v35 = 2080;
      v36 = v13;
      _os_log_impl(&dword_1830D4000, v11, OS_LOG_TYPE_DEBUG, "%{public}s report %p adding initial snapshot for interface %@[%s]", buf, 0x2Au);
    }

    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 3221225472;
    aBlock[2] = __nw_data_transfer_add_initial_snapshot_block_invoke;
    aBlock[3] = &unk_1E5249FB0;
    os_log_type_t v24 = v5;
    uint64_t v6 = v8;
    BOOL v25 = v6;
    int v26 = a3;
    unint64_t v14 = (void (**)(void))_Block_copy(aBlock);
    os_unfair_lock_lock(v5 + 10);
    v14[2](v14);
    os_unfair_lock_unlock(v5 + 10);

    goto LABEL_12;
  }
  uint64_t v15 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  int v30 = "nw_data_transfer_add_initial_snapshot";
  id v16 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v27 = 0;
  if (__nwlog_fault(v16, &type, &v27))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v17 = __nwlog_obj();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v17, type))
      {
        *(_DWORD *)buf = 136446210;
        int v30 = "nw_data_transfer_add_initial_snapshot";
        _os_log_impl(&dword_1830D4000, v17, v18, "%{public}s called with null snapshot", buf, 0xCu);
      }
    }
    else if (v27)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v17 = __nwlog_obj();
      os_log_type_t v20 = type;
      BOOL v21 = os_log_type_enabled(v17, type);
      if (backtrace_string)
      {
        if (v21)
        {
          *(_DWORD *)buf = 136446466;
          int v30 = "nw_data_transfer_add_initial_snapshot";
          __int16 v31 = 2082;
          id v32 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v17, v20, "%{public}s called with null snapshot, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_29;
      }
      if (v21)
      {
        *(_DWORD *)buf = 136446210;
        int v30 = "nw_data_transfer_add_initial_snapshot";
        _os_log_impl(&dword_1830D4000, v17, v20, "%{public}s called with null snapshot, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v17 = __nwlog_obj();
      os_log_type_t v22 = type;
      if (os_log_type_enabled(v17, type))
      {
        *(_DWORD *)buf = 136446210;
        int v30 = "nw_data_transfer_add_initial_snapshot";
        _os_log_impl(&dword_1830D4000, v17, v22, "%{public}s called with null snapshot, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_29:
  if (v16) {
    free(v16);
  }
LABEL_12:
}

void sub_1833BF8EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __nw_data_transfer_add_initial_snapshot_block_invoke(uint64_t a1)
{
  BOOL path_report_for_interface_locked = nw_data_transfer_report_get_path_report_for_interface_locked(*(void **)(a1 + 32), *(void **)(a1 + 40), 1);
  if (path_report_for_interface_locked)
  {
    CFStringRef v3 = (nw_data_transfer_path_report *)path_report_for_interface_locked;
    if (!*(void *)(path_report_for_interface_locked + 352)) {
      objc_storeStrong((id *)(path_report_for_interface_locked + 352), *(id *)(a1 + 40));
    }
    nw_data_transfer_update_path_report_begin(v3, *(nw_data_transfer_snapshot **)(a1 + 48));
    CFStringRef v4 = *(void **)(a1 + 40);
    uint32_t v5 = (id *)(*(void *)(a1 + 32) + 32);
    objc_storeStrong(v5, v4);
  }
}

void __nw_data_transfer_report_add_snapshot_on_nw_queue_block_invoke_191(uint64_t a1)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  BOOL path_report_for_interface_locked = nw_data_transfer_report_get_path_report_for_interface_locked(*(void **)(a1 + 32), *(void **)(*(void *)(a1 + 32) + 32), 0);
  if (!path_report_for_interface_locked)
  {
    uint64_t v7 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v20 = "nw_data_transfer_report_add_snapshot_on_nw_queue_block_invoke";
    id v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v17 = 0;
    if (!__nwlog_fault(v8, &type, &v17)) {
      goto LABEL_38;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v20 = "nw_data_transfer_report_add_snapshot_on_nw_queue_block_invoke";
        uint64_t v11 = "%{public}s called with null ending_path_report";
LABEL_36:
        _os_log_impl(&dword_1830D4000, v9, v10, v11, buf, 0xCu);
      }
    }
    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v14 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v20 = "nw_data_transfer_report_add_snapshot_on_nw_queue_block_invoke";
          __int16 v21 = 2082;
          os_log_type_t v22 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null ending_path_report, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v8) {
          return;
        }
        goto LABEL_39;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v20 = "nw_data_transfer_report_add_snapshot_on_nw_queue_block_invoke";
        uint64_t v11 = "%{public}s called with null ending_path_report, no backtrace";
        goto LABEL_36;
      }
    }
    else
    {
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v20 = "nw_data_transfer_report_add_snapshot_on_nw_queue_block_invoke";
        uint64_t v11 = "%{public}s called with null ending_path_report, backtrace limit exceeded";
        goto LABEL_36;
      }
    }
LABEL_37:

    goto LABEL_38;
  }
  BOOL v3 = path_report_for_interface_locked;
  nw_data_transfer_update_path_report_end((nw_data_transfer_path_report *)path_report_for_interface_locked, *(nw_data_transfer_snapshot **)(a1 + 48));
  CFStringRef v4 = *(void **)(a1 + 40);
  if (!v4)
  {
    uint64_t v6 = *(nw_data_transfer_snapshot **)(a1 + 48);
    BOOL v5 = v3;
    goto LABEL_6;
  }
  objc_storeStrong((id *)(*(void *)(a1 + 32) + 32), v4);
  BOOL v5 = nw_data_transfer_report_get_path_report_for_interface_locked(*(void **)(a1 + 32), *(void **)(a1 + 40), 1);
  if (v5)
  {
    uint64_t v6 = *(nw_data_transfer_snapshot **)(a1 + 48);
LABEL_6:
    nw_data_transfer_update_path_report_begin((nw_data_transfer_path_report *)v5, v6);
    return;
  }
  uint64_t v12 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v20 = "nw_data_transfer_report_add_snapshot_on_nw_queue_block_invoke";
  id v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v17 = 0;
  if (!__nwlog_fault(v8, &type, &v17)) {
    goto LABEL_38;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    uint64_t v9 = __nwlog_obj();
    os_log_type_t v10 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v20 = "nw_data_transfer_report_add_snapshot_on_nw_queue_block_invoke";
      uint64_t v11 = "%{public}s called with null beginning_path_report";
      goto LABEL_36;
    }
    goto LABEL_37;
  }
  if (!v17)
  {
    uint64_t v9 = __nwlog_obj();
    os_log_type_t v10 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v20 = "nw_data_transfer_report_add_snapshot_on_nw_queue_block_invoke";
      uint64_t v11 = "%{public}s called with null beginning_path_report, backtrace limit exceeded";
      goto LABEL_36;
    }
    goto LABEL_37;
  }
  uint64_t v15 = (char *)__nw_create_backtrace_string();
  uint64_t v9 = __nwlog_obj();
  os_log_type_t v10 = type;
  BOOL v16 = os_log_type_enabled(v9, type);
  if (!v15)
  {
    if (v16)
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v20 = "nw_data_transfer_report_add_snapshot_on_nw_queue_block_invoke";
      uint64_t v11 = "%{public}s called with null beginning_path_report, no backtrace";
      goto LABEL_36;
    }
    goto LABEL_37;
  }
  if (v16)
  {
    *(_DWORD *)buf = 136446466;
    os_log_type_t v20 = "nw_data_transfer_report_add_snapshot_on_nw_queue_block_invoke";
    __int16 v21 = 2082;
    os_log_type_t v22 = v15;
    _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null beginning_path_report, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v15);
  if (v8) {
LABEL_39:
  }
    free(v8);
}

BOOL nw_data_transfer_report_get_path_report_for_interface_locked(void *a1, void *a2, int a3)
{
  uint64_t v102 = *MEMORY[0x1E4F143B8];
  BOOL v5 = a1;
  id v6 = a2;
  uint64_t v7 = v6;
  if (!v5)
  {
    v60 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v94 = "nw_data_transfer_report_get_path_report_for_interface_locked";
    v61 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v91 = 0;
    if (__nwlog_fault(v61, &type, &v91))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v62 = __nwlog_obj();
        os_log_type_t v63 = type;
        if (os_log_type_enabled(v62, type))
        {
          *(_DWORD *)buf = 136446210;
          v94 = "nw_data_transfer_report_get_path_report_for_interface_locked";
          _os_log_impl(&dword_1830D4000, v62, v63, "%{public}s called with null report", buf, 0xCu);
        }
      }
      else if (v91)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        v62 = __nwlog_obj();
        os_log_type_t v65 = type;
        BOOL v66 = os_log_type_enabled(v62, type);
        if (backtrace_string)
        {
          if (v66)
          {
            *(_DWORD *)buf = 136446466;
            v94 = "nw_data_transfer_report_get_path_report_for_interface_locked";
            __int16 v95 = 2082;
            v96 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v62, v65, "%{public}s called with null report, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_100;
        }
        if (v66)
        {
          *(_DWORD *)buf = 136446210;
          v94 = "nw_data_transfer_report_get_path_report_for_interface_locked";
          _os_log_impl(&dword_1830D4000, v62, v65, "%{public}s called with null report, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        v62 = __nwlog_obj();
        os_log_type_t v71 = type;
        if (os_log_type_enabled(v62, type))
        {
          *(_DWORD *)buf = 136446210;
          v94 = "nw_data_transfer_report_get_path_report_for_interface_locked";
          _os_log_impl(&dword_1830D4000, v62, v71, "%{public}s called with null report, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_100:
    if (v61) {
      free(v61);
    }
    goto LABEL_102;
  }
  if (*((_DWORD *)v5 + 11))
  {
    id v8 = v5 + 51;
    if (!v6) {
      goto LABEL_6;
    }
    if (!*v8)
    {
      uint64_t v9 = (uint64_t)(v5 + 7);
      goto LABEL_9;
    }
    if (nw_interface_deep_compare(*v8, v6))
    {
LABEL_6:
      uint64_t v9 = (uint64_t)(v5 + 7);
      if (v5[51])
      {
LABEL_10:
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v10 = (id)gLogObj;
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
        {
          if (v7)
          {
            uint64_t v11 = v7;
            int v12 = v11[84];

            os_log_type_t v13 = nw_interface_radio_type_to_string(v12);
          }
          else
          {
            os_log_type_t v13 = "none";
          }
          *(_DWORD *)buf = 136446978;
          v94 = "nw_data_transfer_report_get_path_report_for_interface_locked";
          __int16 v95 = 2048;
          v96 = (const char *)v9;
          __int16 v97 = 2112;
          *(void *)v98 = v7;
          *(_WORD *)&v98[8] = 2080;
          v99 = v13;
          _os_log_impl(&dword_1830D4000, v10, OS_LOG_TYPE_DEBUG, "%{public}s found path report %p for interface %@[%s]", buf, 0x2Au);
        }

        goto LABEL_103;
      }
LABEL_9:
      objc_storeStrong(v5 + 51, a2);
      goto LABEL_10;
    }
    if (*((_DWORD *)v5 + 11) >= 2u)
    {
      unint64_t v14 = 1;
      uint64_t v15 = 352;
      while (!nw_interface_deep_compare(*(void **)((char *)v5[52] + v15), v7))
      {
        ++v14;
        v15 += 360;
        if (v14 >= *((unsigned int *)v5 + 11)) {
          goto LABEL_23;
        }
      }
      BOOL v16 = v5[52];
      if (v16)
      {
        uint64_t v9 = (uint64_t)v16 + 360 * v14 - 360;
        goto LABEL_10;
      }
    }
  }
LABEL_23:
  if (!a3)
  {
LABEL_102:
    uint64_t v9 = 0;
LABEL_103:

    return v9;
  }
  radio_os_log_type_t type = nw_interface_get_radio_type(v7);
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_t v18 = (id)gLogObj;
  BOOL v19 = os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG);
  if (radio_type)
  {
    if (v19)
    {
      int v20 = nw_interface_get_radio_type(v7);
      *(_DWORD *)buf = 136446722;
      v94 = "nw_data_transfer_report_get_path_report_for_interface_locked";
      __int16 v95 = 2112;
      v96 = (const char *)v7;
      __int16 v97 = 2080;
      *(void *)v98 = nw_interface_radio_type_to_string(v20);
      __int16 v21 = "%{public}s did not find path report for interface %@[%s], creating";
      os_log_type_t v22 = v18;
      uint32_t v23 = 32;
LABEL_29:
      _os_log_impl(&dword_1830D4000, v22, OS_LOG_TYPE_DEBUG, v21, buf, v23);
    }
  }
  else if (v19)
  {
    *(_DWORD *)buf = 136446466;
    v94 = "nw_data_transfer_report_get_path_report_for_interface_locked";
    __int16 v95 = 2112;
    v96 = (const char *)v7;
    __int16 v21 = "%{public}s did not find path report for interface %@, creating";
    os_log_type_t v22 = v18;
    uint32_t v23 = 22;
    goto LABEL_29;
  }

  uint64_t v24 = *((unsigned int *)v5 + 11) + 1;
  uint64_t v25 = v24 << 31 >> 31;
  *((_DWORD *)v5 + 11) = v24;
  if (v25 != v24 || v25 < 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v26 = (id)gLogObj;
    char v27 = (const char *)*((unsigned int *)v5 + 11);
    *(_DWORD *)buf = 136446978;
    v94 = "nw_data_transfer_report_get_path_report_for_interface_locked";
    __int16 v95 = 2082;
    v96 = "report->path_count";
    __int16 v97 = 2048;
    *(void *)v98 = 1;
    *(_WORD *)&v98[8] = 2048;
    v99 = v27;
    os_log_type_t v28 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v91 = 0;
    if (__nwlog_fault(v28, &type, &v91))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v29 = (id)gLogObj;
        os_log_type_t v30 = type;
        if (os_log_type_enabled(v29, type))
        {
          __int16 v31 = (const char *)*((unsigned int *)v5 + 11);
          *(_DWORD *)buf = 136446978;
          v94 = "nw_data_transfer_report_get_path_report_for_interface_locked";
          __int16 v95 = 2082;
          v96 = "report->path_count";
          __int16 v97 = 2048;
          *(void *)v98 = 1;
          *(_WORD *)&v98[8] = 2048;
          v99 = v31;
          _os_log_impl(&dword_1830D4000, v29, v30, "%{public}s Overflow: %{public}s, increment %llu, result %llu", buf, 0x2Au);
        }
      }
      else if (v91)
      {
        id v32 = __nw_create_backtrace_string();
        if (v32)
        {
          __int16 v33 = (char *)v32;
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v34 = (id)gLogObj;
          os_log_type_t v35 = type;
          if (os_log_type_enabled(v34, type))
          {
            v36 = (const char *)*((unsigned int *)v5 + 11);
            *(_DWORD *)buf = 136447234;
            v94 = "nw_data_transfer_report_get_path_report_for_interface_locked";
            __int16 v95 = 2082;
            v96 = "report->path_count";
            __int16 v97 = 2048;
            *(void *)v98 = 1;
            *(_WORD *)&v98[8] = 2048;
            v99 = v36;
            __int16 v100 = 2082;
            v101 = v33;
            _os_log_impl(&dword_1830D4000, v34, v35, "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
          }

          free(v33);
          if (!v28) {
            goto LABEL_51;
          }
          goto LABEL_50;
        }
        int v29 = __nwlog_obj();
        os_log_type_t v39 = type;
        if (os_log_type_enabled(v29, type))
        {
          v40 = (const char *)*((unsigned int *)v5 + 11);
          *(_DWORD *)buf = 136446978;
          v94 = "nw_data_transfer_report_get_path_report_for_interface_locked";
          __int16 v95 = 2082;
          v96 = "report->path_count";
          __int16 v97 = 2048;
          *(void *)v98 = 1;
          *(_WORD *)&v98[8] = 2048;
          v99 = v40;
          _os_log_impl(&dword_1830D4000, v29, v39, "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace", buf, 0x2Au);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v29 = (id)gLogObj;
        os_log_type_t v37 = type;
        if (os_log_type_enabled(v29, type))
        {
          BOOL v38 = (const char *)*((unsigned int *)v5 + 11);
          *(_DWORD *)buf = 136446978;
          v94 = "nw_data_transfer_report_get_path_report_for_interface_locked";
          __int16 v95 = 2082;
          v96 = "report->path_count";
          __int16 v97 = 2048;
          *(void *)v98 = 1;
          *(_WORD *)&v98[8] = 2048;
          v99 = v38;
          _os_log_impl(&dword_1830D4000, v29, v37, "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded", buf, 0x2Au);
        }
      }
    }
    if (!v28)
    {
LABEL_51:
      *((_DWORD *)v5 + 11) = -1;
      goto LABEL_52;
    }
LABEL_50:
    free(v28);
    goto LABEL_51;
  }
LABEL_52:
  v41 = v5;
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_t v42 = (id)gLogObj;
  if (os_log_type_enabled(v42, OS_LOG_TYPE_DEBUG))
  {
    int v43 = *((_DWORD *)v5 + 11);
    int v44 = *((_DWORD *)v41 + 12);
    *(_DWORD *)buf = 136446978;
    v94 = "nw_data_transfer_report_allocate_additional_path_reports_if_necessary_locked";
    __int16 v95 = 2048;
    v96 = v41;
    __int16 v97 = 1024;
    *(_DWORD *)v98 = v43;
    *(_WORD *)&v98[4] = 1024;
    *(_DWORD *)&v98[6] = v44;
    _os_log_impl(&dword_1830D4000, v42, OS_LOG_TYPE_DEBUG, "%{public}s report %p path_count %u, allocated_path_count %u", buf, 0x22u);
  }

  int v45 = *((_DWORD *)v5 + 11);
  if (!v45)
  {
    v67 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v94 = "nw_data_transfer_report_allocate_additional_path_reports_if_necessary_locked";
    v68 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v91 = 0;
    if (!__nwlog_fault(v68, &type, &v91)) {
      goto LABEL_134;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      v69 = __nwlog_obj();
      os_log_type_t v70 = type;
      if (os_log_type_enabled(v69, type))
      {
        *(_DWORD *)buf = 136446210;
        v94 = "nw_data_transfer_report_allocate_additional_path_reports_if_necessary_locked";
        _os_log_impl(&dword_1830D4000, v69, v70, "%{public}s called with null report->path_count", buf, 0xCu);
      }
    }
    else if (v91)
    {
      v72 = (char *)__nw_create_backtrace_string();
      v69 = __nwlog_obj();
      os_log_type_t v73 = type;
      BOOL v74 = os_log_type_enabled(v69, type);
      if (v72)
      {
        if (v74)
        {
          *(_DWORD *)buf = 136446466;
          v94 = "nw_data_transfer_report_allocate_additional_path_reports_if_necessary_locked";
          __int16 v95 = 2082;
          v96 = v72;
          _os_log_impl(&dword_1830D4000, v69, v73, "%{public}s called with null report->path_count, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v72);
LABEL_134:
        if (!v68) {
          goto LABEL_61;
        }
        goto LABEL_135;
      }
      if (v74)
      {
        *(_DWORD *)buf = 136446210;
        v94 = "nw_data_transfer_report_allocate_additional_path_reports_if_necessary_locked";
        _os_log_impl(&dword_1830D4000, v69, v73, "%{public}s called with null report->path_count, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      v69 = __nwlog_obj();
      os_log_type_t v86 = type;
      if (os_log_type_enabled(v69, type))
      {
        *(_DWORD *)buf = 136446210;
        v94 = "nw_data_transfer_report_allocate_additional_path_reports_if_necessary_locked";
        _os_log_impl(&dword_1830D4000, v69, v86, "%{public}s called with null report->path_count, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_133:

    goto LABEL_134;
  }
  unsigned int v46 = v45 - 1;
  unsigned int v47 = *((_DWORD *)v41 + 12);
  if (v46 <= v47) {
    goto LABEL_60;
  }
  size_t v48 = v47 + 4;
  *((_DWORD *)v41 + 12) = v48;
  v49 = (void *)*((void *)v41 + 52);
  if (!v49)
  {
    if (v47 == -4)
    {
      v80 = __nwlog_obj();
      os_log_type_enabled(v80, OS_LOG_TYPE_ERROR);
      *(_DWORD *)buf = 136446210;
      v94 = "strict_calloc";
      v81 = (void *)_os_log_send_and_compose_impl();

      BOOL result = __nwlog_abort((uint64_t)v81);
      if (result) {
        goto LABEL_136;
      }
      free(v81);
    }
    uint64_t v56 = malloc_type_calloc(v48, 0x168uLL, 0xEAFB8F1AuLL);
    if (v56)
    {
      *((void *)v41 + 52) = v56;
      if (gLogDatapath) {
        goto LABEL_71;
      }
LABEL_61:

      int v52 = *((_DWORD *)v5 + 11);
      if (v52 == 1) {
        uint64_t v9 = (uint64_t)(v41 + 56);
      }
      else {
        uint64_t v9 = *((void *)v41 + 52) + 360 * (v52 - 2);
      }
      objc_storeStrong((id *)(v9 + 352), a2);
      if (gLogDatapath)
      {
        CFErrorRef v53 = __nwlog_obj();
        if (os_log_type_enabled(v53, OS_LOG_TYPE_DEBUG))
        {
          int v54 = nw_interface_get_radio_type(v7);
          v55 = nw_interface_radio_type_to_string(v54);
          *(_DWORD *)buf = 136446978;
          v94 = "nw_data_transfer_report_get_path_report_for_interface_locked";
          __int16 v95 = 2048;
          v96 = (const char *)v9;
          __int16 v97 = 2112;
          *(void *)v98 = v7;
          *(_WORD *)&v98[8] = 2080;
          v99 = v55;
          _os_log_impl(&dword_1830D4000, v53, OS_LOG_TYPE_DEBUG, "%{public}s created path report %p for interface %@[%s]", buf, 0x2Au);
        }
      }
      goto LABEL_103;
    }
    v82 = __nwlog_obj();
    os_log_type_enabled(v82, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446722;
    v94 = "strict_calloc";
    __int16 v95 = 2048;
    v96 = (const char *)v48;
    __int16 v97 = 2048;
    *(void *)v98 = 360;
    v83 = (void *)_os_log_send_and_compose_impl();

    BOOL result = __nwlog_abort((uint64_t)v83);
    if (result) {
      goto LABEL_136;
    }
    free(v83);
    *((void *)v41 + 52) = 0;
    v84 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v94 = "nw_data_transfer_report_allocate_additional_path_reports_if_necessary_locked";
    v68 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v91 = 0;
    if (!__nwlog_fault(v68, &type, &v91)) {
      goto LABEL_134;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      v69 = __nwlog_obj();
      os_log_type_t v85 = type;
      if (os_log_type_enabled(v69, type))
      {
        *(_DWORD *)buf = 136446210;
        v94 = "nw_data_transfer_report_allocate_additional_path_reports_if_necessary_locked";
        _os_log_impl(&dword_1830D4000, v69, v85, "%{public}s called with null report->secondary_paths", buf, 0xCu);
      }
    }
    else if (v91)
    {
      v87 = (char *)__nw_create_backtrace_string();
      v69 = __nwlog_obj();
      os_log_type_t v88 = type;
      BOOL v89 = os_log_type_enabled(v69, type);
      if (v87)
      {
        if (v89)
        {
          *(_DWORD *)buf = 136446466;
          v94 = "nw_data_transfer_report_allocate_additional_path_reports_if_necessary_locked";
          __int16 v95 = 2082;
          v96 = v87;
          _os_log_impl(&dword_1830D4000, v69, v88, "%{public}s called with null report->secondary_paths, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v87);
        if (!v68) {
          goto LABEL_61;
        }
LABEL_135:
        free(v68);
        goto LABEL_61;
      }
      if (v89)
      {
        *(_DWORD *)buf = 136446210;
        v94 = "nw_data_transfer_report_allocate_additional_path_reports_if_necessary_locked";
        _os_log_impl(&dword_1830D4000, v69, v88, "%{public}s called with null report->secondary_paths, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      v69 = __nwlog_obj();
      os_log_type_t v90 = type;
      if (os_log_type_enabled(v69, type))
      {
        *(_DWORD *)buf = 136446210;
        v94 = "nw_data_transfer_report_allocate_additional_path_reports_if_necessary_locked";
        _os_log_impl(&dword_1830D4000, v69, v90, "%{public}s called with null report->secondary_paths, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_133;
  }
  if (v47 == -4)
  {
    v76 = __nwlog_obj();
    os_log_type_enabled(v76, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446210;
    v94 = "_strict_reallocf";
    v77 = (void *)_os_log_send_and_compose_impl();

    BOOL result = __nwlog_abort((uint64_t)v77);
    if (result) {
      goto LABEL_136;
    }
    free(v77);
    v49 = (void *)*((void *)v41 + 52);
  }
  size_t v50 = 360 * v48;
  v51 = (char *)reallocf(v49, v50);
  if (v51)
  {
LABEL_59:
    *((void *)v41 + 52) = v51;
    bzero(&v51[360 * (*((_DWORD *)v41 + 12) - 4)], 0x5A0uLL);
LABEL_60:
    if (!gLogDatapath) {
      goto LABEL_61;
    }
LABEL_71:
    v57 = __nwlog_obj();
    if (os_log_type_enabled(v57, OS_LOG_TYPE_DEBUG))
    {
      int v58 = *((_DWORD *)v5 + 11);
      int v59 = *((_DWORD *)v41 + 12);
      *(_DWORD *)buf = 136446978;
      v94 = "nw_data_transfer_report_allocate_additional_path_reports_if_necessary_locked";
      __int16 v95 = 2048;
      v96 = v41;
      __int16 v97 = 1024;
      *(_DWORD *)v98 = v58;
      *(_WORD *)&v98[4] = 1024;
      *(_DWORD *)&v98[6] = v59;
      _os_log_impl(&dword_1830D4000, v57, OS_LOG_TYPE_DEBUG, "%{public}s report %p after adding path, path_count %u, allocated_path_count %u", buf, 0x22u);
    }

    goto LABEL_61;
  }
  v78 = __nwlog_obj();
  os_log_type_enabled(v78, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446466;
  v94 = "_strict_reallocf";
  __int16 v95 = 2048;
  v96 = (const char *)v50;
  v79 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v79);
  if (!result)
  {
    free(v79);
    goto LABEL_59;
  }
LABEL_136:
  __break(1u);
  return result;
}

void sub_1833C0FE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_interface_get_radio_type(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  v1 = a1;
  CFAllocatorRef v2 = v1;
  if (v1)
  {
    uint64_t v3 = v1[84];
    goto LABEL_3;
  }
  BOOL v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v16 = "nw_interface_get_radio_type";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_interface_get_radio_type";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null interface", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v16 = "nw_interface_get_radio_type";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null interface, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_interface_get_radio_type";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null interface, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_interface_get_radio_type";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null interface, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

void nw_data_transfer_update_path_report_end(nw_data_transfer_path_report *a1, nw_data_transfer_snapshot *a2)
{
  uint64_t v70 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    v51 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v65 = "nw_data_transfer_update_path_report_end";
    int v52 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v62 = 0;
    if (!__nwlog_fault(v52, &type, &v62)) {
      goto LABEL_71;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      CFErrorRef v53 = __nwlog_obj();
      os_log_type_t v54 = type;
      if (os_log_type_enabled(v53, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v65 = "nw_data_transfer_update_path_report_end";
        v55 = "%{public}s called with null path_report";
LABEL_69:
        _os_log_impl(&dword_1830D4000, v53, v54, v55, buf, 0xCu);
      }
    }
    else if (v62)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      CFErrorRef v53 = __nwlog_obj();
      os_log_type_t v54 = type;
      BOOL v59 = os_log_type_enabled(v53, type);
      if (backtrace_string)
      {
        if (v59)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v65 = "nw_data_transfer_update_path_report_end";
          __int16 v66 = 2082;
          v67 = (nw_data_transfer_path_report *)backtrace_string;
          _os_log_impl(&dword_1830D4000, v53, v54, "%{public}s called with null path_report, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_71:
        if (!v52) {
          return;
        }
LABEL_72:
        free(v52);
        return;
      }
      if (v59)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v65 = "nw_data_transfer_update_path_report_end";
        v55 = "%{public}s called with null path_report, no backtrace";
        goto LABEL_69;
      }
    }
    else
    {
      CFErrorRef v53 = __nwlog_obj();
      os_log_type_t v54 = type;
      if (os_log_type_enabled(v53, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v65 = "nw_data_transfer_update_path_report_end";
        v55 = "%{public}s called with null path_report, backtrace limit exceeded";
        goto LABEL_69;
      }
    }
LABEL_70:

    goto LABEL_71;
  }
  if (a2)
  {
    if (gLogDatapath)
    {
      v57 = __nwlog_obj();
      if (os_log_type_enabled(v57, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446722;
        os_log_type_t v65 = "nw_data_transfer_update_path_report_end";
        __int16 v66 = 2048;
        v67 = a1;
        __int16 v68 = 2048;
        v69 = a2;
        _os_log_impl(&dword_1830D4000, v57, OS_LOG_TYPE_DEBUG, "%{public}s updating path report %p with ending snapshot %p", buf, 0x20u);
      }
    }
    unint64_t var1 = a2->var1;
    if (var1 >= a1->total.received_ip_packet_count) {
      unint64_t v5 = a1->total.received_ip_packet_count + var1 - a1->incremental.received_ip_packet_count;
    }
    else {
      unint64_t v5 = 0;
    }
    unint64_t v6 = 0;
    a1->total.received_ip_packet_count = v5;
    a1->incremental.received_ip_packet_count = 0;
    unint64_t var2 = a2->var2;
    unint64_t received_ip_ect1_packet_count = a1->total.received_ip_ect1_packet_count;
    if (var2 >= received_ip_ect1_packet_count) {
      unint64_t v6 = received_ip_ect1_packet_count + var2 - a1->incremental.received_ip_ect1_packet_count;
    }
    unint64_t v9 = 0;
    a1->total.unint64_t received_ip_ect1_packet_count = v6;
    a1->incremental.unint64_t received_ip_ect1_packet_count = 0;
    unint64_t var3 = a2->var3;
    unint64_t received_ip_ect0_packet_count = a1->total.received_ip_ect0_packet_count;
    if (var3 >= received_ip_ect0_packet_count) {
      unint64_t v9 = received_ip_ect0_packet_count + var3 - a1->incremental.received_ip_ect0_packet_count;
    }
    unint64_t v12 = 0;
    a1->total.unint64_t received_ip_ect0_packet_count = v9;
    a1->incremental.unint64_t received_ip_ect0_packet_count = 0;
    unint64_t var4 = a2->var4;
    unint64_t received_ip_ce_packet_count = a1->total.received_ip_ce_packet_count;
    if (var4 >= received_ip_ce_packet_count) {
      unint64_t v12 = received_ip_ce_packet_count + var4 - a1->incremental.received_ip_ce_packet_count;
    }
    unint64_t v15 = 0;
    a1->total.unint64_t received_ip_ce_packet_count = v12;
    a1->incremental.unint64_t received_ip_ce_packet_count = 0;
    unint64_t var5 = a2->var5;
    unint64_t sent_ip_packet_count = a1->total.sent_ip_packet_count;
    if (var5 >= sent_ip_packet_count) {
      unint64_t v15 = sent_ip_packet_count + var5 - a1->incremental.sent_ip_packet_count;
    }
    unint64_t v18 = 0;
    a1->total.unint64_t sent_ip_packet_count = v15;
    a1->incremental.unint64_t sent_ip_packet_count = 0;
    unint64_t var6 = a2->var6;
    unint64_t received_transport_byte_count = a1->total.received_transport_byte_count;
    if (var6 >= received_transport_byte_count) {
      unint64_t v18 = received_transport_byte_count + var6 - a1->incremental.received_transport_byte_count;
    }
    unint64_t v21 = 0;
    a1->total.unint64_t received_transport_byte_count = v18;
    a1->incremental.unint64_t received_transport_byte_count = 0;
    unint64_t var7 = a2->var7;
    unint64_t received_transport_duplicate_byte_count = a1->total.received_transport_duplicate_byte_count;
    if (var7 >= received_transport_duplicate_byte_count) {
      unint64_t v21 = received_transport_duplicate_byte_count + var7 - a1->incremental.received_transport_duplicate_byte_count;
    }
    unint64_t v24 = 0;
    a1->total.unint64_t received_transport_duplicate_byte_count = v21;
    a1->incremental.unint64_t received_transport_duplicate_byte_count = 0;
    unint64_t var8 = a2->var8;
    unint64_t received_transport_out_of_order_byte_count = a1->total.received_transport_out_of_order_byte_count;
    if (var8 >= received_transport_out_of_order_byte_count) {
      unint64_t v24 = received_transport_out_of_order_byte_count
    }
          + var8
          - a1->incremental.received_transport_out_of_order_byte_count;
    unint64_t v27 = 0;
    a1->total.unint64_t received_transport_out_of_order_byte_count = v24;
    a1->incremental.unint64_t received_transport_out_of_order_byte_count = 0;
    unint64_t var9 = a2->var9;
    unint64_t sent_transport_byte_count = a1->total.sent_transport_byte_count;
    if (var9 >= sent_transport_byte_count) {
      unint64_t v27 = sent_transport_byte_count + var9 - a1->incremental.sent_transport_byte_count;
    }
    unint64_t v30 = 0;
    a1->total.unint64_t sent_transport_byte_count = v27;
    a1->incremental.unint64_t sent_transport_byte_count = 0;
    unint64_t var10 = a2->var10;
    unint64_t sent_transport_retransmitted_byte_count = a1->total.sent_transport_retransmitted_byte_count;
    if (var10 >= sent_transport_retransmitted_byte_count) {
      unint64_t v30 = sent_transport_retransmitted_byte_count + var10 - a1->incremental.sent_transport_retransmitted_byte_count;
    }
    unint64_t v33 = 0;
    a1->total.unint64_t sent_transport_retransmitted_byte_count = v30;
    a1->incremental.unint64_t sent_transport_retransmitted_byte_count = 0;
    unint64_t var11 = a2->var11;
    unint64_t sent_transport_ecn_capable_packet_count = a1->total.sent_transport_ecn_capable_packet_count;
    if (var11 >= sent_transport_ecn_capable_packet_count) {
      unint64_t v33 = sent_transport_ecn_capable_packet_count + var11 - a1->incremental.sent_transport_ecn_capable_packet_count;
    }
    unint64_t v36 = 0;
    a1->total.unint64_t sent_transport_ecn_capable_packet_count = v33;
    a1->incremental.unint64_t sent_transport_ecn_capable_packet_count = 0;
    unint64_t var12 = a2->var12;
    unint64_t sent_transport_ecn_capable_acked_packet_count = a1->total.sent_transport_ecn_capable_acked_packet_count;
    if (var12 >= sent_transport_ecn_capable_acked_packet_count) {
      unint64_t v36 = sent_transport_ecn_capable_acked_packet_count
    }
          + var12
          - a1->incremental.sent_transport_ecn_capable_acked_packet_count;
    unint64_t v39 = 0;
    a1->total.unint64_t sent_transport_ecn_capable_acked_packet_count = v36;
    a1->incremental.unint64_t sent_transport_ecn_capable_acked_packet_count = 0;
    unint64_t var13 = a2->var13;
    unint64_t sent_transport_ecn_capable_marked_packet_count = a1->total.sent_transport_ecn_capable_marked_packet_count;
    if (var13 >= sent_transport_ecn_capable_marked_packet_count) {
      unint64_t v39 = sent_transport_ecn_capable_marked_packet_count
    }
          + var13
          - a1->incremental.sent_transport_ecn_capable_marked_packet_count;
    unint64_t v42 = 0;
    a1->total.unint64_t sent_transport_ecn_capable_marked_packet_count = v39;
    a1->incremental.unint64_t sent_transport_ecn_capable_marked_packet_count = 0;
    unint64_t var14 = a2->var14;
    unint64_t sent_transport_ecn_capable_lost_packet_count = a1->total.sent_transport_ecn_capable_lost_packet_count;
    if (var14 >= sent_transport_ecn_capable_lost_packet_count) {
      unint64_t v42 = sent_transport_ecn_capable_lost_packet_count
    }
          + var14
          - a1->incremental.sent_transport_ecn_capable_lost_packet_count;
    unint64_t v45 = 0;
    a1->total.unint64_t sent_transport_ecn_capable_lost_packet_count = v42;
    a1->incremental.unint64_t sent_transport_ecn_capable_lost_packet_count = 0;
    unint64_t var21 = a2->var21;
    unint64_t received_application_byte_count = a1->total.received_application_byte_count;
    if (var21 >= received_application_byte_count) {
      unint64_t v45 = received_application_byte_count + var21 - a1->incremental.received_application_byte_count;
    }
    unint64_t v48 = 0;
    a1->total.unint64_t received_application_byte_count = v45;
    a1->incremental.unint64_t received_application_byte_count = 0;
    unint64_t var22 = a2->var22;
    unint64_t sent_application_byte_count = a1->total.sent_application_byte_count;
    if (var22 >= sent_application_byte_count) {
      unint64_t v48 = sent_application_byte_count + var22 - a1->incremental.sent_application_byte_count;
    }
    a1->total.unint64_t sent_application_byte_count = v48;
    a1->incremental.unint64_t sent_application_byte_count = 0;
    *(_OWORD *)&a1->total.transport_smoothed_rtt_milliseconds = *(_OWORD *)&a2->var15;
    *(_OWORD *)&a1->total.transport_current_rtt_milliseconds = *(_OWORD *)&a2->var17;
    *(_OWORD *)&a1->total.transport_congestion_window = *(_OWORD *)&a2->var19;
    return;
  }
  uint64_t v56 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v65 = "nw_data_transfer_update_path_report_end";
  int v52 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v62 = 0;
  if (!__nwlog_fault(v52, &type, &v62)) {
    goto LABEL_71;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    CFErrorRef v53 = __nwlog_obj();
    os_log_type_t v54 = type;
    if (os_log_type_enabled(v53, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v65 = "nw_data_transfer_update_path_report_end";
      v55 = "%{public}s called with null snapshot";
      goto LABEL_69;
    }
    goto LABEL_70;
  }
  if (!v62)
  {
    CFErrorRef v53 = __nwlog_obj();
    os_log_type_t v54 = type;
    if (os_log_type_enabled(v53, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v65 = "nw_data_transfer_update_path_report_end";
      v55 = "%{public}s called with null snapshot, backtrace limit exceeded";
      goto LABEL_69;
    }
    goto LABEL_70;
  }
  v60 = (char *)__nw_create_backtrace_string();
  CFErrorRef v53 = __nwlog_obj();
  os_log_type_t v54 = type;
  BOOL v61 = os_log_type_enabled(v53, type);
  if (!v60)
  {
    if (v61)
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v65 = "nw_data_transfer_update_path_report_end";
      v55 = "%{public}s called with null snapshot, no backtrace";
      goto LABEL_69;
    }
    goto LABEL_70;
  }
  if (v61)
  {
    *(_DWORD *)buf = 136446466;
    os_log_type_t v65 = "nw_data_transfer_update_path_report_end";
    __int16 v66 = 2082;
    v67 = (nw_data_transfer_path_report *)v60;
    _os_log_impl(&dword_1830D4000, v53, v54, "%{public}s called with null snapshot, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v60);
  if (v52) {
    goto LABEL_72;
  }
}

uint32_t nw_data_transfer_report_get_path_count(nw_data_transfer_report_t report)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  v1 = report;
  CFAllocatorRef v2 = v1;
  if (!v1)
  {
    unint64_t v5 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v17 = "nw_data_transfer_report_get_path_count";
    unint64_t v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (__nwlog_fault(v6, &type, &v14))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v7 = __nwlog_obj();
        os_log_type_t v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v17 = "nw_data_transfer_report_get_path_count";
          _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null report", buf, 0xCu);
        }
      }
      else if (v14)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        uint64_t v7 = __nwlog_obj();
        os_log_type_t v11 = type;
        BOOL v12 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v12)
          {
            *(_DWORD *)buf = 136446466;
            __int16 v17 = "nw_data_transfer_report_get_path_count";
            __int16 v18 = 2082;
            uint64_t v19 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v7, v11, "%{public}s called with null report, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_24;
        }
        if (v12)
        {
          *(_DWORD *)buf = 136446210;
          __int16 v17 = "nw_data_transfer_report_get_path_count";
          _os_log_impl(&dword_1830D4000, v7, v11, "%{public}s called with null report, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        uint64_t v7 = __nwlog_obj();
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v17 = "nw_data_transfer_report_get_path_count";
          _os_log_impl(&dword_1830D4000, v7, v13, "%{public}s called with null report, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_24:
    if (v6) {
      free(v6);
    }
    goto LABEL_26;
  }
  if (nw_data_transfer_report_get_state(v1) != nw_data_transfer_report_state_collected)
  {
    unint64_t v9 = __nwlog_obj();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      __int16 v17 = "nw_data_transfer_report_get_path_count";
      _os_log_impl(&dword_1830D4000, v9, OS_LOG_TYPE_ERROR, "%{public}s Cannot retrieve data report values until collected", buf, 0xCu);
    }

LABEL_26:
    uint32_t isa_high = 0;
    goto LABEL_4;
  }
  uint32_t isa_high = HIDWORD(v2[5].isa);
LABEL_4:

  return isa_high;
}

void sub_1833C1CD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

nw_data_transfer_report_state_t nw_data_transfer_report_get_state(nw_data_transfer_report_t report)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  v1 = report;
  CFAllocatorRef v2 = (os_unfair_lock_s *)v1;
  if (v1)
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    int v20 = 0;
    *(void *)&buf[16] = 0x2020000000;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 3221225472;
    aBlock[2] = __nw_data_transfer_report_get_state_block_invoke;
    aBlock[3] = &unk_1E524B978;
    BOOL v16 = buf;
    unint64_t v15 = v1;
    uint64_t v3 = (void (**)(void))_Block_copy(aBlock);
    os_unfair_lock_lock(v2 + 10);
    v3[2](v3);
    os_unfair_lock_unlock(v2 + 10);

    nw_data_transfer_report_state_t v4 = *(_DWORD *)(*(void *)&buf[8] + 24);
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  unint64_t v6 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_data_transfer_report_get_state";
  uint64_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v17 = 0;
  if (__nwlog_fault(v7, &type, &v17))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_data_transfer_report_get_state";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null report", buf, 0xCu);
      }
    }
    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_data_transfer_report_get_state";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null report, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_data_transfer_report_get_state";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null report, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_data_transfer_report_get_state";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null report, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v7) {
    free(v7);
  }
  nw_data_transfer_report_state_t v4 = nw_data_transfer_report_state_collecting;
LABEL_3:

  return v4;
}

void sub_1833C2030(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_data_transfer_report_get_state_block_invoke(uint64_t result)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(_DWORD *)(*(void *)(result + 32) + 52);
  return result;
}

void __nw_utilities_get_self_name_block_invoke()
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (nw_utilities_get_self_bundle_id::onceToken != -1) {
    dispatch_once(&nw_utilities_get_self_bundle_id::onceToken, &__block_literal_global_9);
  }
  p_cache = NWConcrete_nw_resolution_report.cache;
  nw_utilities_get_self_name::name = nw_utilities_get_self_bundle_id::bundle_identifier_string;
  if (!nw_utilities_get_self_bundle_id::bundle_identifier_string)
  {
    long long buffer = 0u;
    memset(v6, 0, sizeof(v6));
    pid_t v1 = getpid();
    if (proc_pidinfo(v1, 13, 1uLL, &buffer, 64) != 64 || !LOBYTE(v6[0]))
    {
      if (nw_utilities_get_self_name::name) {
        return;
      }
      goto LABEL_10;
    }
    CFAllocatorRef v2 = strdup((const char *)v6);
    if (!v2)
    {
      uint64_t v3 = __nwlog_obj();
      os_log_type_enabled(v3, OS_LOG_TYPE_ERROR);
      int v7 = 136446210;
      os_log_type_t v8 = "strict_strdup";
      nw_data_transfer_report_state_t v4 = (void *)_os_log_send_and_compose_impl();

      if (__nwlog_abort((uint64_t)v4))
      {
        __break(1u);
        return;
      }
      free(v4);
      CFAllocatorRef v2 = 0;
      p_cache = (void **)(NWConcrete_nw_resolution_report + 16);
    }
    p_cache[423] = v2;
    if (!v2) {
LABEL_10:
    }
      p_cache[423] = (void *)getprogname();
  }
}

BOOL nw_udp_options_get_no_metadata(void *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (nw_protocol_options_is_udp(v1))
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000;
    char v16 = 0;
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_udp_options_get_no_metadata_block_invoke;
    v12[3] = &unk_1E5248E90;
    v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    BOOL v2 = *(unsigned char *)(*(void *)&buf[8] + 24) != 0;
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  nw_data_transfer_report_state_t v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_udp_options_get_no_metadata";
  unint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      unint64_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_udp_options_get_no_metadata";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_options_is_udp(options)", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      unint64_t v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_udp_options_get_no_metadata";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_udp(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_udp_options_get_no_metadata";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_udp(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      unint64_t v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_udp_options_get_no_metadata";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_options_is_udp(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
  BOOL v2 = 0;
LABEL_3:

  return v2;
}

void sub_1833C251C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

void ___ZL40nw_protocol_instance_multiplex_callbacksv_block_invoke()
{
  nw_protocol_instance_multiplex_callbacks(void)::callbacks = nw_protocol_one_to_one_callbacks_new();
  nw_protocol_callbacks_set_add_input_handler((void *)nw_protocol_instance_multiplex_callbacks(void)::callbacks, (uint64_t)nw_protocol_implementation_add_input_handler);
  nw_protocol_callbacks_set_replace_input_handler(nw_protocol_instance_multiplex_callbacks(void)::callbacks, (uint64_t)nw_protocol_implementation_replace_input_handler);
  nw_protocol_callbacks_set_remove_input_handler(nw_protocol_instance_multiplex_callbacks(void)::callbacks, (uint64_t)nw_protocol_implementation_remove_input_handler);
  nw_protocol_callbacks_set_connected(nw_protocol_instance_multiplex_callbacks(void)::callbacks, (uint64_t)nw_protocol_implementation_connected);
  nw_protocol_callbacks_set_disconnect(nw_protocol_instance_multiplex_callbacks(void)::callbacks, (uint64_t)nw_protocol_implementation_disconnect);
  nw_protocol_callbacks_set_disconnected(nw_protocol_instance_multiplex_callbacks(void)::callbacks, (uint64_t)nw_protocol_implementation_disconnected);
  nw_protocol_callbacks_set_link_state(nw_protocol_instance_multiplex_callbacks(void)::callbacks, (uint64_t)nw_protocol_implementation_link_state);
  nw_protocol_callbacks_set_get_message_properties(nw_protocol_instance_multiplex_callbacks(void)::callbacks, (uint64_t)nw_protocol_implementation_get_message_properties);
  nw_protocol_callbacks_set_waiting_for_output(nw_protocol_instance_multiplex_callbacks(void)::callbacks, (uint64_t)nw_protocol_implementation_waiting_for_output);
  nw_protocol_callbacks_set_get_input_frames(nw_protocol_instance_multiplex_callbacks(void)::callbacks, (uint64_t)nw_protocol_implementation_get_input_frames);
  nw_protocol_callbacks_set_get_output_frames(nw_protocol_instance_multiplex_callbacks(void)::callbacks, (uint64_t)nw_protocol_implementation_get_output_frames);
  nw_protocol_callbacks_set_finalize_output_frames(nw_protocol_instance_multiplex_callbacks(void)::callbacks, (uint64_t)nw_protocol_implementation_finalize_output_frames);
  nw_protocol_callbacks_set_input_available(nw_protocol_instance_multiplex_callbacks(void)::callbacks, (uint64_t)nw_protocol_implementation_input_available);
  nw_protocol_callbacks_set_input_finished(nw_protocol_instance_multiplex_callbacks(void)::callbacks, (uint64_t)nw_protocol_implementation_input_finished);
  nw_protocol_callbacks_set_input_flush(nw_protocol_instance_multiplex_callbacks(void)::callbacks, (uint64_t)nw_protocol_implementation_input_flush);
  nw_protocol_callbacks_set_output_available(nw_protocol_instance_multiplex_callbacks(void)::callbacks, (uint64_t)nw_protocol_implementation_output_available);
  nw_protocol_callbacks_set_output_finished(nw_protocol_instance_multiplex_callbacks(void)::callbacks, (uint64_t)nw_protocol_implementation_output_finished);
  nw_protocol_callbacks_set_copy_info(nw_protocol_instance_multiplex_callbacks(void)::callbacks, (uint64_t)nw_protocol_implementation_copy_info);
  nw_protocol_callbacks_set_notify(nw_protocol_instance_multiplex_callbacks(void)::callbacks, (uint64_t)nw_protocol_implementation_notify);
  nw_protocol_callbacks_set_error(nw_protocol_instance_multiplex_callbacks(void)::callbacks, (uint64_t)nw_protocol_implementation_error);
  nw_protocol_callbacks_set_updated_path(nw_protocol_instance_multiplex_callbacks(void)::callbacks, (uint64_t)nw_protocol_implementation_updated_path);
  nw_protocol_callbacks_set_connect(nw_protocol_instance_multiplex_callbacks(void)::callbacks, (uint64_t)nw_protocol_implementation_connect);
  nw_protocol_callbacks_set_add_listen_handler(nw_protocol_instance_multiplex_callbacks(void)::callbacks, (uint64_t)nw_protocol_implementation_add_listen_handler);
  nw_protocol_callbacks_set_remove_listen_handler(nw_protocol_instance_multiplex_callbacks(void)::callbacks, (uint64_t)nw_protocol_implementation_remove_listen_handler);
  nw_protocol_callbacks_set_get_parameters(nw_protocol_instance_multiplex_callbacks(void)::callbacks, (uint64_t)nw_protocol_implementation_get_parameters);
  nw_protocol_callbacks_set_get_local_endpoint(nw_protocol_instance_multiplex_callbacks(void)::callbacks, (uint64_t)nw_protocol_implementation_get_local);
  nw_protocol_callbacks_set_get_remote_endpoint(nw_protocol_instance_multiplex_callbacks(void)::callbacks, (uint64_t)nw_protocol_implementation_get_remote);
  uint64_t v0 = nw_protocol_instance_multiplex_callbacks(void)::callbacks;

  nw_protocol_callbacks_set_get_path(v0, (uint64_t)nw_protocol_implementation_get_path);
}

void nw_protocol_callbacks_set_error(uint64_t a1, uint64_t a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (a2)
    {
      *(void *)(a1 + 56) = a2;
      return;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v13 = "nw_protocol_callbacks_set_error";
    BOOL v2 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v10 = 0;
    if (__nwlog_fault(v2, &type, &v10))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v3 = __nwlog_obj();
        os_log_type_t v4 = type;
        if (!os_log_type_enabled(v3, type)) {
          goto LABEL_33;
        }
        *(_DWORD *)buf = 136446210;
        char v13 = "nw_protocol_callbacks_set_error";
        unint64_t v5 = "%{public}s called with null error";
        goto LABEL_32;
      }
      if (!v10)
      {
        uint64_t v3 = __nwlog_obj();
        os_log_type_t v4 = type;
        if (!os_log_type_enabled(v3, type)) {
          goto LABEL_33;
        }
        *(_DWORD *)buf = 136446210;
        char v13 = "nw_protocol_callbacks_set_error";
        unint64_t v5 = "%{public}s called with null error, backtrace limit exceeded";
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      BOOL v9 = os_log_type_enabled(v3, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          char v13 = "nw_protocol_callbacks_set_error";
          __int16 v14 = 2082;
          unint64_t v15 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v3, v4, "%{public}s called with null error, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        if (v2) {
          goto LABEL_34;
        }
        return;
      }
      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        char v13 = "nw_protocol_callbacks_set_error";
        unint64_t v5 = "%{public}s called with null error, no backtrace";
LABEL_32:
        _os_log_impl(&dword_1830D4000, v3, v4, v5, buf, 0xCu);
      }
    }
  }
  else
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v13 = "nw_protocol_callbacks_set_error";
    BOOL v2 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v10 = 0;
    if (!__nwlog_fault(v2, &type, &v10)) {
      goto LABEL_33;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      if (!os_log_type_enabled(v3, type)) {
        goto LABEL_33;
      }
      *(_DWORD *)buf = 136446210;
      char v13 = "nw_protocol_callbacks_set_error";
      unint64_t v5 = "%{public}s called with null callbacks";
      goto LABEL_32;
    }
    if (!v10)
    {
      uint64_t v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      if (!os_log_type_enabled(v3, type)) {
        goto LABEL_33;
      }
      *(_DWORD *)buf = 136446210;
      char v13 = "nw_protocol_callbacks_set_error";
      unint64_t v5 = "%{public}s called with null callbacks, backtrace limit exceeded";
      goto LABEL_32;
    }
    unint64_t v6 = (char *)__nw_create_backtrace_string();
    uint64_t v3 = __nwlog_obj();
    os_log_type_t v4 = type;
    BOOL v7 = os_log_type_enabled(v3, type);
    if (!v6)
    {
      if (!v7) {
        goto LABEL_33;
      }
      *(_DWORD *)buf = 136446210;
      char v13 = "nw_protocol_callbacks_set_error";
      unint64_t v5 = "%{public}s called with null callbacks, no backtrace";
      goto LABEL_32;
    }
    if (v7)
    {
      *(_DWORD *)buf = 136446466;
      char v13 = "nw_protocol_callbacks_set_error";
      __int16 v14 = 2082;
      unint64_t v15 = v6;
      _os_log_impl(&dword_1830D4000, v3, v4, "%{public}s called with null callbacks, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v6);
  }
LABEL_33:
  if (v2) {
LABEL_34:
  }
    free(v2);
}

void nw_protocol_callbacks_set_link_state(uint64_t a1, uint64_t a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (a2)
    {
      *(void *)(a1 + 104) = a2;
      return;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v13 = "nw_protocol_callbacks_set_link_state";
    BOOL v2 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v10 = 0;
    if (__nwlog_fault(v2, &type, &v10))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v3 = __nwlog_obj();
        os_log_type_t v4 = type;
        if (!os_log_type_enabled(v3, type)) {
          goto LABEL_33;
        }
        *(_DWORD *)buf = 136446210;
        char v13 = "nw_protocol_callbacks_set_link_state";
        unint64_t v5 = "%{public}s called with null link_state";
        goto LABEL_32;
      }
      if (!v10)
      {
        uint64_t v3 = __nwlog_obj();
        os_log_type_t v4 = type;
        if (!os_log_type_enabled(v3, type)) {
          goto LABEL_33;
        }
        *(_DWORD *)buf = 136446210;
        char v13 = "nw_protocol_callbacks_set_link_state";
        unint64_t v5 = "%{public}s called with null link_state, backtrace limit exceeded";
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      BOOL v9 = os_log_type_enabled(v3, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          char v13 = "nw_protocol_callbacks_set_link_state";
          __int16 v14 = 2082;
          unint64_t v15 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v3, v4, "%{public}s called with null link_state, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        if (v2) {
          goto LABEL_34;
        }
        return;
      }
      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        char v13 = "nw_protocol_callbacks_set_link_state";
        unint64_t v5 = "%{public}s called with null link_state, no backtrace";
LABEL_32:
        _os_log_impl(&dword_1830D4000, v3, v4, v5, buf, 0xCu);
      }
    }
  }
  else
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v13 = "nw_protocol_callbacks_set_link_state";
    BOOL v2 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v10 = 0;
    if (!__nwlog_fault(v2, &type, &v10)) {
      goto LABEL_33;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      if (!os_log_type_enabled(v3, type)) {
        goto LABEL_33;
      }
      *(_DWORD *)buf = 136446210;
      char v13 = "nw_protocol_callbacks_set_link_state";
      unint64_t v5 = "%{public}s called with null callbacks";
      goto LABEL_32;
    }
    if (!v10)
    {
      uint64_t v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      if (!os_log_type_enabled(v3, type)) {
        goto LABEL_33;
      }
      *(_DWORD *)buf = 136446210;
      char v13 = "nw_protocol_callbacks_set_link_state";
      unint64_t v5 = "%{public}s called with null callbacks, backtrace limit exceeded";
      goto LABEL_32;
    }
    unint64_t v6 = (char *)__nw_create_backtrace_string();
    uint64_t v3 = __nwlog_obj();
    os_log_type_t v4 = type;
    BOOL v7 = os_log_type_enabled(v3, type);
    if (!v6)
    {
      if (!v7) {
        goto LABEL_33;
      }
      *(_DWORD *)buf = 136446210;
      char v13 = "nw_protocol_callbacks_set_link_state";
      unint64_t v5 = "%{public}s called with null callbacks, no backtrace";
      goto LABEL_32;
    }
    if (v7)
    {
      *(_DWORD *)buf = 136446466;
      char v13 = "nw_protocol_callbacks_set_link_state";
      __int16 v14 = 2082;
      unint64_t v15 = v6;
      _os_log_impl(&dword_1830D4000, v3, v4, "%{public}s called with null callbacks, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v6);
  }
LABEL_33:
  if (v2) {
LABEL_34:
  }
    free(v2);
}

void nw_protocol_callbacks_set_waiting_for_output(uint64_t a1, uint64_t a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (a2)
    {
      *(void *)(a1 + 216) = a2;
      return;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v13 = "nw_protocol_callbacks_set_waiting_for_output";
    BOOL v2 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v10 = 0;
    if (__nwlog_fault(v2, &type, &v10))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v3 = __nwlog_obj();
        os_log_type_t v4 = type;
        if (!os_log_type_enabled(v3, type)) {
          goto LABEL_33;
        }
        *(_DWORD *)buf = 136446210;
        char v13 = "nw_protocol_callbacks_set_waiting_for_output";
        unint64_t v5 = "%{public}s called with null waiting_for_output";
        goto LABEL_32;
      }
      if (!v10)
      {
        uint64_t v3 = __nwlog_obj();
        os_log_type_t v4 = type;
        if (!os_log_type_enabled(v3, type)) {
          goto LABEL_33;
        }
        *(_DWORD *)buf = 136446210;
        char v13 = "nw_protocol_callbacks_set_waiting_for_output";
        unint64_t v5 = "%{public}s called with null waiting_for_output, backtrace limit exceeded";
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      BOOL v9 = os_log_type_enabled(v3, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          char v13 = "nw_protocol_callbacks_set_waiting_for_output";
          __int16 v14 = 2082;
          unint64_t v15 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v3, v4, "%{public}s called with null waiting_for_output, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        if (v2) {
          goto LABEL_34;
        }
        return;
      }
      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        char v13 = "nw_protocol_callbacks_set_waiting_for_output";
        unint64_t v5 = "%{public}s called with null waiting_for_output, no backtrace";
LABEL_32:
        _os_log_impl(&dword_1830D4000, v3, v4, v5, buf, 0xCu);
      }
    }
  }
  else
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v13 = "nw_protocol_callbacks_set_waiting_for_output";
    BOOL v2 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v10 = 0;
    if (!__nwlog_fault(v2, &type, &v10)) {
      goto LABEL_33;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      if (!os_log_type_enabled(v3, type)) {
        goto LABEL_33;
      }
      *(_DWORD *)buf = 136446210;
      char v13 = "nw_protocol_callbacks_set_waiting_for_output";
      unint64_t v5 = "%{public}s called with null callbacks";
      goto LABEL_32;
    }
    if (!v10)
    {
      uint64_t v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      if (!os_log_type_enabled(v3, type)) {
        goto LABEL_33;
      }
      *(_DWORD *)buf = 136446210;
      char v13 = "nw_protocol_callbacks_set_waiting_for_output";
      unint64_t v5 = "%{public}s called with null callbacks, backtrace limit exceeded";
      goto LABEL_32;
    }
    unint64_t v6 = (char *)__nw_create_backtrace_string();
    uint64_t v3 = __nwlog_obj();
    os_log_type_t v4 = type;
    BOOL v7 = os_log_type_enabled(v3, type);
    if (!v6)
    {
      if (!v7) {
        goto LABEL_33;
      }
      *(_DWORD *)buf = 136446210;
      char v13 = "nw_protocol_callbacks_set_waiting_for_output";
      unint64_t v5 = "%{public}s called with null callbacks, no backtrace";
      goto LABEL_32;
    }
    if (v7)
    {
      *(_DWORD *)buf = 136446466;
      char v13 = "nw_protocol_callbacks_set_waiting_for_output";
      __int16 v14 = 2082;
      unint64_t v15 = v6;
      _os_log_impl(&dword_1830D4000, v3, v4, "%{public}s called with null callbacks, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v6);
  }
LABEL_33:
  if (v2) {
LABEL_34:
  }
    free(v2);
}

void nw_protocol_callbacks_set_output_finished(uint64_t a1, uint64_t a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (a2)
    {
      *(void *)(a1 + 192) = a2;
      return;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v13 = "nw_protocol_callbacks_set_output_finished";
    BOOL v2 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v10 = 0;
    if (__nwlog_fault(v2, &type, &v10))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v3 = __nwlog_obj();
        os_log_type_t v4 = type;
        if (!os_log_type_enabled(v3, type)) {
          goto LABEL_33;
        }
        *(_DWORD *)buf = 136446210;
        char v13 = "nw_protocol_callbacks_set_output_finished";
        unint64_t v5 = "%{public}s called with null output_finished";
        goto LABEL_32;
      }
      if (!v10)
      {
        uint64_t v3 = __nwlog_obj();
        os_log_type_t v4 = type;
        if (!os_log_type_enabled(v3, type)) {
          goto LABEL_33;
        }
        *(_DWORD *)buf = 136446210;
        char v13 = "nw_protocol_callbacks_set_output_finished";
        unint64_t v5 = "%{public}s called with null output_finished, backtrace limit exceeded";
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      BOOL v9 = os_log_type_enabled(v3, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          char v13 = "nw_protocol_callbacks_set_output_finished";
          __int16 v14 = 2082;
          unint64_t v15 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v3, v4, "%{public}s called with null output_finished, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        if (v2) {
          goto LABEL_34;
        }
        return;
      }
      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        char v13 = "nw_protocol_callbacks_set_output_finished";
        unint64_t v5 = "%{public}s called with null output_finished, no backtrace";
LABEL_32:
        _os_log_impl(&dword_1830D4000, v3, v4, v5, buf, 0xCu);
      }
    }
  }
  else
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v13 = "nw_protocol_callbacks_set_output_finished";
    BOOL v2 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v10 = 0;
    if (!__nwlog_fault(v2, &type, &v10)) {
      goto LABEL_33;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      if (!os_log_type_enabled(v3, type)) {
        goto LABEL_33;
      }
      *(_DWORD *)buf = 136446210;
      char v13 = "nw_protocol_callbacks_set_output_finished";
      unint64_t v5 = "%{public}s called with null callbacks";
      goto LABEL_32;
    }
    if (!v10)
    {
      uint64_t v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      if (!os_log_type_enabled(v3, type)) {
        goto LABEL_33;
      }
      *(_DWORD *)buf = 136446210;
      char v13 = "nw_protocol_callbacks_set_output_finished";
      unint64_t v5 = "%{public}s called with null callbacks, backtrace limit exceeded";
      goto LABEL_32;
    }
    unint64_t v6 = (char *)__nw_create_backtrace_string();
    uint64_t v3 = __nwlog_obj();
    os_log_type_t v4 = type;
    BOOL v7 = os_log_type_enabled(v3, type);
    if (!v6)
    {
      if (!v7) {
        goto LABEL_33;
      }
      *(_DWORD *)buf = 136446210;
      char v13 = "nw_protocol_callbacks_set_output_finished";
      unint64_t v5 = "%{public}s called with null callbacks, no backtrace";
      goto LABEL_32;
    }
    if (v7)
    {
      *(_DWORD *)buf = 136446466;
      char v13 = "nw_protocol_callbacks_set_output_finished";
      __int16 v14 = 2082;
      unint64_t v15 = v6;
      _os_log_impl(&dword_1830D4000, v3, v4, "%{public}s called with null callbacks, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v6);
  }
LABEL_33:
  if (v2) {
LABEL_34:
  }
    free(v2);
}

void nw_protocol_callbacks_set_output_available(uint64_t a1, uint64_t a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (a2)
    {
      *(void *)(a1 + 72) = a2;
      return;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v13 = "nw_protocol_callbacks_set_output_available";
    BOOL v2 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v10 = 0;
    if (__nwlog_fault(v2, &type, &v10))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v3 = __nwlog_obj();
        os_log_type_t v4 = type;
        if (!os_log_type_enabled(v3, type)) {
          goto LABEL_33;
        }
        *(_DWORD *)buf = 136446210;
        char v13 = "nw_protocol_callbacks_set_output_available";
        unint64_t v5 = "%{public}s called with null output_available";
        goto LABEL_32;
      }
      if (!v10)
      {
        uint64_t v3 = __nwlog_obj();
        os_log_type_t v4 = type;
        if (!os_log_type_enabled(v3, type)) {
          goto LABEL_33;
        }
        *(_DWORD *)buf = 136446210;
        char v13 = "nw_protocol_callbacks_set_output_available";
        unint64_t v5 = "%{public}s called with null output_available, backtrace limit exceeded";
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      BOOL v9 = os_log_type_enabled(v3, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          char v13 = "nw_protocol_callbacks_set_output_available";
          __int16 v14 = 2082;
          unint64_t v15 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v3, v4, "%{public}s called with null output_available, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        if (v2) {
          goto LABEL_34;
        }
        return;
      }
      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        char v13 = "nw_protocol_callbacks_set_output_available";
        unint64_t v5 = "%{public}s called with null output_available, no backtrace";
LABEL_32:
        _os_log_impl(&dword_1830D4000, v3, v4, v5, buf, 0xCu);
      }
    }
  }
  else
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v13 = "nw_protocol_callbacks_set_output_available";
    BOOL v2 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v10 = 0;
    if (!__nwlog_fault(v2, &type, &v10)) {
      goto LABEL_33;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      if (!os_log_type_enabled(v3, type)) {
        goto LABEL_33;
      }
      *(_DWORD *)buf = 136446210;
      char v13 = "nw_protocol_callbacks_set_output_available";
      unint64_t v5 = "%{public}s called with null callbacks";
      goto LABEL_32;
    }
    if (!v10)
    {
      uint64_t v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      if (!os_log_type_enabled(v3, type)) {
        goto LABEL_33;
      }
      *(_DWORD *)buf = 136446210;
      char v13 = "nw_protocol_callbacks_set_output_available";
      unint64_t v5 = "%{public}s called with null callbacks, backtrace limit exceeded";
      goto LABEL_32;
    }
    unint64_t v6 = (char *)__nw_create_backtrace_string();
    uint64_t v3 = __nwlog_obj();
    os_log_type_t v4 = type;
    BOOL v7 = os_log_type_enabled(v3, type);
    if (!v6)
    {
      if (!v7) {
        goto LABEL_33;
      }
      *(_DWORD *)buf = 136446210;
      char v13 = "nw_protocol_callbacks_set_output_available";
      unint64_t v5 = "%{public}s called with null callbacks, no backtrace";
      goto LABEL_32;
    }
    if (v7)
    {
      *(_DWORD *)buf = 136446466;
      char v13 = "nw_protocol_callbacks_set_output_available";
      __int16 v14 = 2082;
      unint64_t v15 = v6;
      _os_log_impl(&dword_1830D4000, v3, v4, "%{public}s called with null callbacks, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v6);
  }
LABEL_33:
  if (v2) {
LABEL_34:
  }
    free(v2);
}

void nw_protocol_callbacks_set_input_available(uint64_t a1, uint64_t a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (a2)
    {
      *(void *)(a1 + 64) = a2;
      return;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v13 = "nw_protocol_callbacks_set_input_available";
    BOOL v2 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v10 = 0;
    if (__nwlog_fault(v2, &type, &v10))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v3 = __nwlog_obj();
        os_log_type_t v4 = type;
        if (!os_log_type_enabled(v3, type)) {
          goto LABEL_33;
        }
        *(_DWORD *)buf = 136446210;
        char v13 = "nw_protocol_callbacks_set_input_available";
        unint64_t v5 = "%{public}s called with null input_available";
        goto LABEL_32;
      }
      if (!v10)
      {
        uint64_t v3 = __nwlog_obj();
        os_log_type_t v4 = type;
        if (!os_log_type_enabled(v3, type)) {
          goto LABEL_33;
        }
        *(_DWORD *)buf = 136446210;
        char v13 = "nw_protocol_callbacks_set_input_available";
        unint64_t v5 = "%{public}s called with null input_available, backtrace limit exceeded";
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      BOOL v9 = os_log_type_enabled(v3, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          char v13 = "nw_protocol_callbacks_set_input_available";
          __int16 v14 = 2082;
          unint64_t v15 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v3, v4, "%{public}s called with null input_available, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        if (v2) {
          goto LABEL_34;
        }
        return;
      }
      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        char v13 = "nw_protocol_callbacks_set_input_available";
        unint64_t v5 = "%{public}s called with null input_available, no backtrace";
LABEL_32:
        _os_log_impl(&dword_1830D4000, v3, v4, v5, buf, 0xCu);
      }
    }
  }
  else
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v13 = "nw_protocol_callbacks_set_input_available";
    BOOL v2 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v10 = 0;
    if (!__nwlog_fault(v2, &type, &v10)) {
      goto LABEL_33;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      if (!os_log_type_enabled(v3, type)) {
        goto LABEL_33;
      }
      *(_DWORD *)buf = 136446210;
      char v13 = "nw_protocol_callbacks_set_input_available";
      unint64_t v5 = "%{public}s called with null callbacks";
      goto LABEL_32;
    }
    if (!v10)
    {
      uint64_t v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      if (!os_log_type_enabled(v3, type)) {
        goto LABEL_33;
      }
      *(_DWORD *)buf = 136446210;
      char v13 = "nw_protocol_callbacks_set_input_available";
      unint64_t v5 = "%{public}s called with null callbacks, backtrace limit exceeded";
      goto LABEL_32;
    }
    unint64_t v6 = (char *)__nw_create_backtrace_string();
    uint64_t v3 = __nwlog_obj();
    os_log_type_t v4 = type;
    BOOL v7 = os_log_type_enabled(v3, type);
    if (!v6)
    {
      if (!v7) {
        goto LABEL_33;
      }
      *(_DWORD *)buf = 136446210;
      char v13 = "nw_protocol_callbacks_set_input_available";
      unint64_t v5 = "%{public}s called with null callbacks, no backtrace";
      goto LABEL_32;
    }
    if (v7)
    {
      *(_DWORD *)buf = 136446466;
      char v13 = "nw_protocol_callbacks_set_input_available";
      __int16 v14 = 2082;
      unint64_t v15 = v6;
      _os_log_impl(&dword_1830D4000, v3, v4, "%{public}s called with null callbacks, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v6);
  }
LABEL_33:
  if (v2) {
LABEL_34:
  }
    free(v2);
}

void nw_protocol_callbacks_set_disconnect(uint64_t a1, uint64_t a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (a2)
    {
      *(void *)(a1 + 32) = a2;
      return;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v13 = "nw_protocol_callbacks_set_disconnect";
    BOOL v2 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v10 = 0;
    if (__nwlog_fault(v2, &type, &v10))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v3 = __nwlog_obj();
        os_log_type_t v4 = type;
        if (!os_log_type_enabled(v3, type)) {
          goto LABEL_33;
        }
        *(_DWORD *)buf = 136446210;
        char v13 = "nw_protocol_callbacks_set_disconnect";
        unint64_t v5 = "%{public}s called with null disconnect";
        goto LABEL_32;
      }
      if (!v10)
      {
        uint64_t v3 = __nwlog_obj();
        os_log_type_t v4 = type;
        if (!os_log_type_enabled(v3, type)) {
          goto LABEL_33;
        }
        *(_DWORD *)buf = 136446210;
        char v13 = "nw_protocol_callbacks_set_disconnect";
        unint64_t v5 = "%{public}s called with null disconnect, backtrace limit exceeded";
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      BOOL v9 = os_log_type_enabled(v3, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          char v13 = "nw_protocol_callbacks_set_disconnect";
          __int16 v14 = 2082;
          unint64_t v15 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v3, v4, "%{public}s called with null disconnect, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        if (v2) {
          goto LABEL_34;
        }
        return;
      }
      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        char v13 = "nw_protocol_callbacks_set_disconnect";
        unint64_t v5 = "%{public}s called with null disconnect, no backtrace";
LABEL_32:
        _os_log_impl(&dword_1830D4000, v3, v4, v5, buf, 0xCu);
      }
    }
  }
  else
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v13 = "nw_protocol_callbacks_set_disconnect";
    BOOL v2 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v10 = 0;
    if (!__nwlog_fault(v2, &type, &v10)) {
      goto LABEL_33;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      if (!os_log_type_enabled(v3, type)) {
        goto LABEL_33;
      }
      *(_DWORD *)buf = 136446210;
      char v13 = "nw_protocol_callbacks_set_disconnect";
      unint64_t v5 = "%{public}s called with null callbacks";
      goto LABEL_32;
    }
    if (!v10)
    {
      uint64_t v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      if (!os_log_type_enabled(v3, type)) {
        goto LABEL_33;
      }
      *(_DWORD *)buf = 136446210;
      char v13 = "nw_protocol_callbacks_set_disconnect";
      unint64_t v5 = "%{public}s called with null callbacks, backtrace limit exceeded";
      goto LABEL_32;
    }
    unint64_t v6 = (char *)__nw_create_backtrace_string();
    uint64_t v3 = __nwlog_obj();
    os_log_type_t v4 = type;
    BOOL v7 = os_log_type_enabled(v3, type);
    if (!v6)
    {
      if (!v7) {
        goto LABEL_33;
      }
      *(_DWORD *)buf = 136446210;
      char v13 = "nw_protocol_callbacks_set_disconnect";
      unint64_t v5 = "%{public}s called with null callbacks, no backtrace";
      goto LABEL_32;
    }
    if (v7)
    {
      *(_DWORD *)buf = 136446466;
      char v13 = "nw_protocol_callbacks_set_disconnect";
      __int16 v14 = 2082;
      unint64_t v15 = v6;
      _os_log_impl(&dword_1830D4000, v3, v4, "%{public}s called with null callbacks, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v6);
  }
LABEL_33:
  if (v2) {
LABEL_34:
  }
    free(v2);
}

void nw_protocol_callbacks_set_connect(uint64_t a1, uint64_t a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (a2)
    {
      *(void *)(a1 + 24) = a2;
      return;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v13 = "nw_protocol_callbacks_set_connect";
    BOOL v2 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v10 = 0;
    if (__nwlog_fault(v2, &type, &v10))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v3 = __nwlog_obj();
        os_log_type_t v4 = type;
        if (!os_log_type_enabled(v3, type)) {
          goto LABEL_33;
        }
        *(_DWORD *)buf = 136446210;
        char v13 = "nw_protocol_callbacks_set_connect";
        unint64_t v5 = "%{public}s called with null connect";
        goto LABEL_32;
      }
      if (!v10)
      {
        uint64_t v3 = __nwlog_obj();
        os_log_type_t v4 = type;
        if (!os_log_type_enabled(v3, type)) {
          goto LABEL_33;
        }
        *(_DWORD *)buf = 136446210;
        char v13 = "nw_protocol_callbacks_set_connect";
        unint64_t v5 = "%{public}s called with null connect, backtrace limit exceeded";
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      BOOL v9 = os_log_type_enabled(v3, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          char v13 = "nw_protocol_callbacks_set_connect";
          __int16 v14 = 2082;
          unint64_t v15 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v3, v4, "%{public}s called with null connect, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        if (v2) {
          goto LABEL_34;
        }
        return;
      }
      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        char v13 = "nw_protocol_callbacks_set_connect";
        unint64_t v5 = "%{public}s called with null connect, no backtrace";
LABEL_32:
        _os_log_impl(&dword_1830D4000, v3, v4, v5, buf, 0xCu);
      }
    }
  }
  else
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v13 = "nw_protocol_callbacks_set_connect";
    BOOL v2 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v10 = 0;
    if (!__nwlog_fault(v2, &type, &v10)) {
      goto LABEL_33;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      if (!os_log_type_enabled(v3, type)) {
        goto LABEL_33;
      }
      *(_DWORD *)buf = 136446210;
      char v13 = "nw_protocol_callbacks_set_connect";
      unint64_t v5 = "%{public}s called with null callbacks";
      goto LABEL_32;
    }
    if (!v10)
    {
      uint64_t v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      if (!os_log_type_enabled(v3, type)) {
        goto LABEL_33;
      }
      *(_DWORD *)buf = 136446210;
      char v13 = "nw_protocol_callbacks_set_connect";
      unint64_t v5 = "%{public}s called with null callbacks, backtrace limit exceeded";
      goto LABEL_32;
    }
    unint64_t v6 = (char *)__nw_create_backtrace_string();
    uint64_t v3 = __nwlog_obj();
    os_log_type_t v4 = type;
    BOOL v7 = os_log_type_enabled(v3, type);
    if (!v6)
    {
      if (!v7) {
        goto LABEL_33;
      }
      *(_DWORD *)buf = 136446210;
      char v13 = "nw_protocol_callbacks_set_connect";
      unint64_t v5 = "%{public}s called with null callbacks, no backtrace";
      goto LABEL_32;
    }
    if (v7)
    {
      *(_DWORD *)buf = 136446466;
      char v13 = "nw_protocol_callbacks_set_connect";
      __int16 v14 = 2082;
      unint64_t v15 = v6;
      _os_log_impl(&dword_1830D4000, v3, v4, "%{public}s called with null callbacks, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v6);
  }
LABEL_33:
  if (v2) {
LABEL_34:
  }
    free(v2);
}

void nw_protocol_callbacks_set_input_flush(uint64_t a1, uint64_t a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (a2)
    {
      *(void *)(a1 + 264) = a2;
      return;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v13 = "nw_protocol_callbacks_set_input_flush";
    BOOL v2 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v10 = 0;
    if (__nwlog_fault(v2, &type, &v10))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v3 = __nwlog_obj();
        os_log_type_t v4 = type;
        if (!os_log_type_enabled(v3, type)) {
          goto LABEL_33;
        }
        *(_DWORD *)buf = 136446210;
        char v13 = "nw_protocol_callbacks_set_input_flush";
        unint64_t v5 = "%{public}s called with null input_flush";
        goto LABEL_32;
      }
      if (!v10)
      {
        uint64_t v3 = __nwlog_obj();
        os_log_type_t v4 = type;
        if (!os_log_type_enabled(v3, type)) {
          goto LABEL_33;
        }
        *(_DWORD *)buf = 136446210;
        char v13 = "nw_protocol_callbacks_set_input_flush";
        unint64_t v5 = "%{public}s called with null input_flush, backtrace limit exceeded";
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      BOOL v9 = os_log_type_enabled(v3, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          char v13 = "nw_protocol_callbacks_set_input_flush";
          __int16 v14 = 2082;
          unint64_t v15 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v3, v4, "%{public}s called with null input_flush, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        if (v2) {
          goto LABEL_34;
        }
        return;
      }
      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        char v13 = "nw_protocol_callbacks_set_input_flush";
        unint64_t v5 = "%{public}s called with null input_flush, no backtrace";
LABEL_32:
        _os_log_impl(&dword_1830D4000, v3, v4, v5, buf, 0xCu);
      }
    }
  }
  else
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v13 = "nw_protocol_callbacks_set_input_flush";
    BOOL v2 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v10 = 0;
    if (!__nwlog_fault(v2, &type, &v10)) {
      goto LABEL_33;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      if (!os_log_type_enabled(v3, type)) {
        goto LABEL_33;
      }
      *(_DWORD *)buf = 136446210;
      char v13 = "nw_protocol_callbacks_set_input_flush";
      unint64_t v5 = "%{public}s called with null callbacks";
      goto LABEL_32;
    }
    if (!v10)
    {
      uint64_t v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      if (!os_log_type_enabled(v3, type)) {
        goto LABEL_33;
      }
      *(_DWORD *)buf = 136446210;
      char v13 = "nw_protocol_callbacks_set_input_flush";
      unint64_t v5 = "%{public}s called with null callbacks, backtrace limit exceeded";
      goto LABEL_32;
    }
    unint64_t v6 = (char *)__nw_create_backtrace_string();
    uint64_t v3 = __nwlog_obj();
    os_log_type_t v4 = type;
    BOOL v7 = os_log_type_enabled(v3, type);
    if (!v6)
    {
      if (!v7) {
        goto LABEL_33;
      }
      *(_DWORD *)buf = 136446210;
      char v13 = "nw_protocol_callbacks_set_input_flush";
      unint64_t v5 = "%{public}s called with null callbacks, no backtrace";
      goto LABEL_32;
    }
    if (v7)
    {
      *(_DWORD *)buf = 136446466;
      char v13 = "nw_protocol_callbacks_set_input_flush";
      __int16 v14 = 2082;
      unint64_t v15 = v6;
      _os_log_impl(&dword_1830D4000, v3, v4, "%{public}s called with null callbacks, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v6);
  }
LABEL_33:
  if (v2) {
LABEL_34:
  }
    free(v2);
}

void nw_protocol_callbacks_set_input_finished(uint64_t a1, uint64_t a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (a2)
    {
      *(void *)(a1 + 184) = a2;
      return;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v13 = "nw_protocol_callbacks_set_input_finished";
    BOOL v2 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v10 = 0;
    if (__nwlog_fault(v2, &type, &v10))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v3 = __nwlog_obj();
        os_log_type_t v4 = type;
        if (!os_log_type_enabled(v3, type)) {
          goto LABEL_33;
        }
        *(_DWORD *)buf = 136446210;
        char v13 = "nw_protocol_callbacks_set_input_finished";
        unint64_t v5 = "%{public}s called with null input_finished";
        goto LABEL_32;
      }
      if (!v10)
      {
        uint64_t v3 = __nwlog_obj();
        os_log_type_t v4 = type;
        if (!os_log_type_enabled(v3, type)) {
          goto LABEL_33;
        }
        *(_DWORD *)buf = 136446210;
        char v13 = "nw_protocol_callbacks_set_input_finished";
        unint64_t v5 = "%{public}s called with null input_finished, backtrace limit exceeded";
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      BOOL v9 = os_log_type_enabled(v3, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          char v13 = "nw_protocol_callbacks_set_input_finished";
          __int16 v14 = 2082;
          unint64_t v15 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v3, v4, "%{public}s called with null input_finished, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        if (v2) {
          goto LABEL_34;
        }
        return;
      }
      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        char v13 = "nw_protocol_callbacks_set_input_finished";
        unint64_t v5 = "%{public}s called with null input_finished, no backtrace";
LABEL_32:
        _os_log_impl(&dword_1830D4000, v3, v4, v5, buf, 0xCu);
      }
    }
  }
  else
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v13 = "nw_protocol_callbacks_set_input_finished";
    BOOL v2 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v10 = 0;
    if (!__nwlog_fault(v2, &type, &v10)) {
      goto LABEL_33;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      if (!os_log_type_enabled(v3, type)) {
        goto LABEL_33;
      }
      *(_DWORD *)buf = 136446210;
      char v13 = "nw_protocol_callbacks_set_input_finished";
      unint64_t v5 = "%{public}s called with null callbacks";
      goto LABEL_32;
    }
    if (!v10)
    {
      uint64_t v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      if (!os_log_type_enabled(v3, type)) {
        goto LABEL_33;
      }
      *(_DWORD *)buf = 136446210;
      char v13 = "nw_protocol_callbacks_set_input_finished";
      unint64_t v5 = "%{public}s called with null callbacks, backtrace limit exceeded";
      goto LABEL_32;
    }
    unint64_t v6 = (char *)__nw_create_backtrace_string();
    uint64_t v3 = __nwlog_obj();
    os_log_type_t v4 = type;
    BOOL v7 = os_log_type_enabled(v3, type);
    if (!v6)
    {
      if (!v7) {
        goto LABEL_33;
      }
      *(_DWORD *)buf = 136446210;
      char v13 = "nw_protocol_callbacks_set_input_finished";
      unint64_t v5 = "%{public}s called with null callbacks, no backtrace";
      goto LABEL_32;
    }
    if (v7)
    {
      *(_DWORD *)buf = 136446466;
      char v13 = "nw_protocol_callbacks_set_input_finished";
      __int16 v14 = 2082;
      unint64_t v15 = v6;
      _os_log_impl(&dword_1830D4000, v3, v4, "%{public}s called with null callbacks, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v6);
  }
LABEL_33:
  if (v2) {
LABEL_34:
  }
    free(v2);
}

void nw_protocol_callbacks_set_get_remote_endpoint(uint64_t a1, uint64_t a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (a2)
    {
      *(void *)(a1 + 136) = a2;
      return;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v13 = "nw_protocol_callbacks_set_get_remote_endpoint";
    BOOL v2 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v10 = 0;
    if (__nwlog_fault(v2, &type, &v10))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v3 = __nwlog_obj();
        os_log_type_t v4 = type;
        if (!os_log_type_enabled(v3, type)) {
          goto LABEL_33;
        }
        *(_DWORD *)buf = 136446210;
        char v13 = "nw_protocol_callbacks_set_get_remote_endpoint";
        unint64_t v5 = "%{public}s called with null get_remote_endpoint";
        goto LABEL_32;
      }
      if (!v10)
      {
        uint64_t v3 = __nwlog_obj();
        os_log_type_t v4 = type;
        if (!os_log_type_enabled(v3, type)) {
          goto LABEL_33;
        }
        *(_DWORD *)buf = 136446210;
        char v13 = "nw_protocol_callbacks_set_get_remote_endpoint";
        unint64_t v5 = "%{public}s called with null get_remote_endpoint, backtrace limit exceeded";
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      BOOL v9 = os_log_type_enabled(v3, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          char v13 = "nw_protocol_callbacks_set_get_remote_endpoint";
          __int16 v14 = 2082;
          unint64_t v15 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v3, v4, "%{public}s called with null get_remote_endpoint, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        if (v2) {
          goto LABEL_34;
        }
        return;
      }
      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        char v13 = "nw_protocol_callbacks_set_get_remote_endpoint";
        unint64_t v5 = "%{public}s called with null get_remote_endpoint, no backtrace";
LABEL_32:
        _os_log_impl(&dword_1830D4000, v3, v4, v5, buf, 0xCu);
      }
    }
  }
  else
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v13 = "nw_protocol_callbacks_set_get_remote_endpoint";
    BOOL v2 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v10 = 0;
    if (!__nwlog_fault(v2, &type, &v10)) {
      goto LABEL_33;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      if (!os_log_type_enabled(v3, type)) {
        goto LABEL_33;
      }
      *(_DWORD *)buf = 136446210;
      char v13 = "nw_protocol_callbacks_set_get_remote_endpoint";
      unint64_t v5 = "%{public}s called with null callbacks";
      goto LABEL_32;
    }
    if (!v10)
    {
      uint64_t v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      if (!os_log_type_enabled(v3, type)) {
        goto LABEL_33;
      }
      *(_DWORD *)buf = 136446210;
      char v13 = "nw_protocol_callbacks_set_get_remote_endpoint";
      unint64_t v5 = "%{public}s called with null callbacks, backtrace limit exceeded";
      goto LABEL_32;
    }
    unint64_t v6 = (char *)__nw_create_backtrace_string();
    uint64_t v3 = __nwlog_obj();
    os_log_type_t v4 = type;
    BOOL v7 = os_log_type_enabled(v3, type);
    if (!v6)
    {
      if (!v7) {
        goto LABEL_33;
      }
      *(_DWORD *)buf = 136446210;
      char v13 = "nw_protocol_callbacks_set_get_remote_endpoint";
      unint64_t v5 = "%{public}s called with null callbacks, no backtrace";
      goto LABEL_32;
    }
    if (v7)
    {
      *(_DWORD *)buf = 136446466;
      char v13 = "nw_protocol_callbacks_set_get_remote_endpoint";
      __int16 v14 = 2082;
      unint64_t v15 = v6;
      _os_log_impl(&dword_1830D4000, v3, v4, "%{public}s called with null callbacks, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v6);
  }
LABEL_33:
  if (v2) {
LABEL_34:
  }
    free(v2);
}

void nw_protocol_callbacks_set_get_parameters(uint64_t a1, uint64_t a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (a2)
    {
      *(void *)(a1 + 112) = a2;
      return;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v13 = "nw_protocol_callbacks_set_get_parameters";
    BOOL v2 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v10 = 0;
    if (__nwlog_fault(v2, &type, &v10))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v3 = __nwlog_obj();
        os_log_type_t v4 = type;
        if (!os_log_type_enabled(v3, type)) {
          goto LABEL_33;
        }
        *(_DWORD *)buf = 136446210;
        char v13 = "nw_protocol_callbacks_set_get_parameters";
        unint64_t v5 = "%{public}s called with null get_parameters";
        goto LABEL_32;
      }
      if (!v10)
      {
        uint64_t v3 = __nwlog_obj();
        os_log_type_t v4 = type;
        if (!os_log_type_enabled(v3, type)) {
          goto LABEL_33;
        }
        *(_DWORD *)buf = 136446210;
        char v13 = "nw_protocol_callbacks_set_get_parameters";
        unint64_t v5 = "%{public}s called with null get_parameters, backtrace limit exceeded";
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      BOOL v9 = os_log_type_enabled(v3, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          char v13 = "nw_protocol_callbacks_set_get_parameters";
          __int16 v14 = 2082;
          unint64_t v15 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v3, v4, "%{public}s called with null get_parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        if (v2) {
          goto LABEL_34;
        }
        return;
      }
      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        char v13 = "nw_protocol_callbacks_set_get_parameters";
        unint64_t v5 = "%{public}s called with null get_parameters, no backtrace";
LABEL_32:
        _os_log_impl(&dword_1830D4000, v3, v4, v5, buf, 0xCu);
      }
    }
  }
  else
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v13 = "nw_protocol_callbacks_set_get_parameters";
    BOOL v2 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v10 = 0;
    if (!__nwlog_fault(v2, &type, &v10)) {
      goto LABEL_33;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      if (!os_log_type_enabled(v3, type)) {
        goto LABEL_33;
      }
      *(_DWORD *)buf = 136446210;
      char v13 = "nw_protocol_callbacks_set_get_parameters";
      unint64_t v5 = "%{public}s called with null callbacks";
      goto LABEL_32;
    }
    if (!v10)
    {
      uint64_t v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      if (!os_log_type_enabled(v3, type)) {
        goto LABEL_33;
      }
      *(_DWORD *)buf = 136446210;
      char v13 = "nw_protocol_callbacks_set_get_parameters";
      unint64_t v5 = "%{public}s called with null callbacks, backtrace limit exceeded";
      goto LABEL_32;
    }
    unint64_t v6 = (char *)__nw_create_backtrace_string();
    uint64_t v3 = __nwlog_obj();
    os_log_type_t v4 = type;
    BOOL v7 = os_log_type_enabled(v3, type);
    if (!v6)
    {
      if (!v7) {
        goto LABEL_33;
      }
      *(_DWORD *)buf = 136446210;
      char v13 = "nw_protocol_callbacks_set_get_parameters";
      unint64_t v5 = "%{public}s called with null callbacks, no backtrace";
      goto LABEL_32;
    }
    if (v7)
    {
      *(_DWORD *)buf = 136446466;
      char v13 = "nw_protocol_callbacks_set_get_parameters";
      __int16 v14 = 2082;
      unint64_t v15 = v6;
      _os_log_impl(&dword_1830D4000, v3, v4, "%{public}s called with null callbacks, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v6);
  }
LABEL_33:
  if (v2) {
LABEL_34:
  }
    free(v2);
}

void nw_protocol_callbacks_set_get_local_endpoint(uint64_t a1, uint64_t a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (a2)
    {
      *(void *)(a1 + 128) = a2;
      return;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v13 = "nw_protocol_callbacks_set_get_local_endpoint";
    BOOL v2 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v10 = 0;
    if (__nwlog_fault(v2, &type, &v10))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v3 = __nwlog_obj();
        os_log_type_t v4 = type;
        if (!os_log_type_enabled(v3, type)) {
          goto LABEL_33;
        }
        *(_DWORD *)buf = 136446210;
        char v13 = "nw_protocol_callbacks_set_get_local_endpoint";
        unint64_t v5 = "%{public}s called with null get_local_endpoint";
        goto LABEL_32;
      }
      if (!v10)
      {
        uint64_t v3 = __nwlog_obj();
        os_log_type_t v4 = type;
        if (!os_log_type_enabled(v3, type)) {
          goto LABEL_33;
        }
        *(_DWORD *)buf = 136446210;
        char v13 = "nw_protocol_callbacks_set_get_local_endpoint";
        unint64_t v5 = "%{public}s called with null get_local_endpoint, backtrace limit exceeded";
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      BOOL v9 = os_log_type_enabled(v3, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          char v13 = "nw_protocol_callbacks_set_get_local_endpoint";
          __int16 v14 = 2082;
          unint64_t v15 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v3, v4, "%{public}s called with null get_local_endpoint, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        if (v2) {
          goto LABEL_34;
        }
        return;
      }
      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        char v13 = "nw_protocol_callbacks_set_get_local_endpoint";
        unint64_t v5 = "%{public}s called with null get_local_endpoint, no backtrace";
LABEL_32:
        _os_log_impl(&dword_1830D4000, v3, v4, v5, buf, 0xCu);
      }
    }
  }
  else
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v13 = "nw_protocol_callbacks_set_get_local_endpoint";
    BOOL v2 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v10 = 0;
    if (!__nwlog_fault(v2, &type, &v10)) {
      goto LABEL_33;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      if (!os_log_type_enabled(v3, type)) {
        goto LABEL_33;
      }
      *(_DWORD *)buf = 136446210;
      char v13 = "nw_protocol_callbacks_set_get_local_endpoint";
      unint64_t v5 = "%{public}s called with null callbacks";
      goto LABEL_32;
    }
    if (!v10)
    {
      uint64_t v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      if (!os_log_type_enabled(v3, type)) {
        goto LABEL_33;
      }
      *(_DWORD *)buf = 136446210;
      char v13 = "nw_protocol_callbacks_set_get_local_endpoint";
      unint64_t v5 = "%{public}s called with null callbacks, backtrace limit exceeded";
      goto LABEL_32;
    }
    unint64_t v6 = (char *)__nw_create_backtrace_string();
    uint64_t v3 = __nwlog_obj();
    os_log_type_t v4 = type;
    BOOL v7 = os_log_type_enabled(v3, type);
    if (!v6)
    {
      if (!v7) {
        goto LABEL_33;
      }
      *(_DWORD *)buf = 136446210;
      char v13 = "nw_protocol_callbacks_set_get_local_endpoint";
      unint64_t v5 = "%{public}s called with null callbacks, no backtrace";
      goto LABEL_32;
    }
    if (v7)
    {
      *(_DWORD *)buf = 136446466;
      char v13 = "nw_protocol_callbacks_set_get_local_endpoint";
      __int16 v14 = 2082;
      unint64_t v15 = v6;
      _os_log_impl(&dword_1830D4000, v3, v4, "%{public}s called with null callbacks, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v6);
  }
LABEL_33:
  if (v2) {
LABEL_34:
  }
    free(v2);
}

void nw_protocol_callbacks_set_remove_listen_handler(uint64_t a1, uint64_t a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (a2)
    {
      *(void *)(a1 + 240) = a2;
      return;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v13 = "nw_protocol_callbacks_set_remove_listen_handler";
    BOOL v2 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v10 = 0;
    if (__nwlog_fault(v2, &type, &v10))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v3 = __nwlog_obj();
        os_log_type_t v4 = type;
        if (!os_log_type_enabled(v3, type)) {
          goto LABEL_33;
        }
        *(_DWORD *)buf = 136446210;
        char v13 = "nw_protocol_callbacks_set_remove_listen_handler";
        unint64_t v5 = "%{public}s called with null remove_listen_handler";
        goto LABEL_32;
      }
      if (!v10)
      {
        uint64_t v3 = __nwlog_obj();
        os_log_type_t v4 = type;
        if (!os_log_type_enabled(v3, type)) {
          goto LABEL_33;
        }
        *(_DWORD *)buf = 136446210;
        char v13 = "nw_protocol_callbacks_set_remove_listen_handler";
        unint64_t v5 = "%{public}s called with null remove_listen_handler, backtrace limit exceeded";
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      BOOL v9 = os_log_type_enabled(v3, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          char v13 = "nw_protocol_callbacks_set_remove_listen_handler";
          __int16 v14 = 2082;
          unint64_t v15 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v3, v4, "%{public}s called with null remove_listen_handler, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        if (v2) {
          goto LABEL_34;
        }
        return;
      }
      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        char v13 = "nw_protocol_callbacks_set_remove_listen_handler";
        unint64_t v5 = "%{public}s called with null remove_listen_handler, no backtrace";
LABEL_32:
        _os_log_impl(&dword_1830D4000, v3, v4, v5, buf, 0xCu);
      }
    }
  }
  else
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v13 = "nw_protocol_callbacks_set_remove_listen_handler";
    BOOL v2 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v10 = 0;
    if (!__nwlog_fault(v2, &type, &v10)) {
      goto LABEL_33;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      if (!os_log_type_enabled(v3, type)) {
        goto LABEL_33;
      }
      *(_DWORD *)buf = 136446210;
      char v13 = "nw_protocol_callbacks_set_remove_listen_handler";
      unint64_t v5 = "%{public}s called with null callbacks";
      goto LABEL_32;
    }
    if (!v10)
    {
      uint64_t v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      if (!os_log_type_enabled(v3, type)) {
        goto LABEL_33;
      }
      *(_DWORD *)buf = 136446210;
      char v13 = "nw_protocol_callbacks_set_remove_listen_handler";
      unint64_t v5 = "%{public}s called with null callbacks, backtrace limit exceeded";
      goto LABEL_32;
    }
    unint64_t v6 = (char *)__nw_create_backtrace_string();
    uint64_t v3 = __nwlog_obj();
    os_log_type_t v4 = type;
    BOOL v7 = os_log_type_enabled(v3, type);
    if (!v6)
    {
      if (!v7) {
        goto LABEL_33;
      }
      *(_DWORD *)buf = 136446210;
      char v13 = "nw_protocol_callbacks_set_remove_listen_handler";
      unint64_t v5 = "%{public}s called with null callbacks, no backtrace";
      goto LABEL_32;
    }
    if (v7)
    {
      *(_DWORD *)buf = 136446466;
      char v13 = "nw_protocol_callbacks_set_remove_listen_handler";
      __int16 v14 = 2082;
      unint64_t v15 = v6;
      _os_log_impl(&dword_1830D4000, v3, v4, "%{public}s called with null callbacks, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v6);
  }
LABEL_33:
  if (v2) {
LABEL_34:
  }
    free(v2);
}

void nw_protocol_callbacks_set_add_listen_handler(uint64_t a1, uint64_t a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (a2)
    {
      *(void *)(a1 + 232) = a2;
      return;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v13 = "nw_protocol_callbacks_set_add_listen_handler";
    BOOL v2 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v10 = 0;
    if (__nwlog_fault(v2, &type, &v10))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v3 = __nwlog_obj();
        os_log_type_t v4 = type;
        if (!os_log_type_enabled(v3, type)) {
          goto LABEL_33;
        }
        *(_DWORD *)buf = 136446210;
        char v13 = "nw_protocol_callbacks_set_add_listen_handler";
        unint64_t v5 = "%{public}s called with null add_listen_handler";
        goto LABEL_32;
      }
      if (!v10)
      {
        uint64_t v3 = __nwlog_obj();
        os_log_type_t v4 = type;
        if (!os_log_type_enabled(v3, type)) {
          goto LABEL_33;
        }
        *(_DWORD *)buf = 136446210;
        char v13 = "nw_protocol_callbacks_set_add_listen_handler";
        unint64_t v5 = "%{public}s called with null add_listen_handler, backtrace limit exceeded";
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      BOOL v9 = os_log_type_enabled(v3, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          char v13 = "nw_protocol_callbacks_set_add_listen_handler";
          __int16 v14 = 2082;
          unint64_t v15 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v3, v4, "%{public}s called with null add_listen_handler, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        if (v2) {
          goto LABEL_34;
        }
        return;
      }
      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        char v13 = "nw_protocol_callbacks_set_add_listen_handler";
        unint64_t v5 = "%{public}s called with null add_listen_handler, no backtrace";
LABEL_32:
        _os_log_impl(&dword_1830D4000, v3, v4, v5, buf, 0xCu);
      }
    }
  }
  else
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v13 = "nw_protocol_callbacks_set_add_listen_handler";
    BOOL v2 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v10 = 0;
    if (!__nwlog_fault(v2, &type, &v10)) {
      goto LABEL_33;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      if (!os_log_type_enabled(v3, type)) {
        goto LABEL_33;
      }
      *(_DWORD *)buf = 136446210;
      char v13 = "nw_protocol_callbacks_set_add_listen_handler";
      unint64_t v5 = "%{public}s called with null callbacks";
      goto LABEL_32;
    }
    if (!v10)
    {
      uint64_t v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      if (!os_log_type_enabled(v3, type)) {
        goto LABEL_33;
      }
      *(_DWORD *)buf = 136446210;
      char v13 = "nw_protocol_callbacks_set_add_listen_handler";
      unint64_t v5 = "%{public}s called with null callbacks, backtrace limit exceeded";
      goto LABEL_32;
    }
    unint64_t v6 = (char *)__nw_create_backtrace_string();
    uint64_t v3 = __nwlog_obj();
    os_log_type_t v4 = type;
    BOOL v7 = os_log_type_enabled(v3, type);
    if (!v6)
    {
      if (!v7) {
        goto LABEL_33;
      }
      *(_DWORD *)buf = 136446210;
      char v13 = "nw_protocol_callbacks_set_add_listen_handler";
      unint64_t v5 = "%{public}s called with null callbacks, no backtrace";
      goto LABEL_32;
    }
    if (v7)
    {
      *(_DWORD *)buf = 136446466;
      char v13 = "nw_protocol_callbacks_set_add_listen_handler";
      __int16 v14 = 2082;
      unint64_t v15 = v6;
      _os_log_impl(&dword_1830D4000, v3, v4, "%{public}s called with null callbacks, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v6);
  }
LABEL_33:
  if (v2) {
LABEL_34:
  }
    free(v2);
}

uint64_t ___ZL33nw_protocol_implementation_notifyP11nw_protocolS0_31nw_protocol_notification_type_tPvm_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  object = (void *)nw_hash_node_get_object(a2);
  if (object)
  {
    uint64_t v4 = object[3];
    if (v4)
    {
      uint64_t v5 = *(void *)(a1 + 32);
      if (v5)
      {
        unint64_t v6 = *(void (**)(void))(v4 + 160);
        if (v6)
        {
          int v7 = *(_DWORD *)(a1 + 56);
          os_log_type_t v8 = (void *)object[5];
          if (v8 == &nw_protocol_ref_counted_handle)
          {
            uint64_t v10 = object[11];
            if (v10) {
              object[11] = v10 + 1;
            }
            char v9 = -1;
          }
          else
          {
            char v9 = 0;
          }
          int v29 = object;
          char v30 = v9;
          os_log_type_t v11 = *(void **)(v5 + 40);
          if (v11 == &nw_protocol_ref_counted_handle)
          {
            uint64_t v13 = *(void *)(v5 + 88);
            if (v13) {
              *(void *)(v5 + 88) = v13 + 1;
            }
            char v12 = -1;
          }
          else
          {
            char v12 = 0;
          }
          uint64_t v27 = v5;
          char v28 = v12;
          if (v7)
          {
            v6();
            goto LABEL_17;
          }
          unint64_t v15 = __nwlog_obj();
          *(_DWORD *)buf = 136446210;
          id v32 = "__nw_protocol_notify";
          uint64_t v16 = (char *)_os_log_send_and_compose_impl();

          os_log_type_t type = OS_LOG_TYPE_ERROR;
          char v25 = 0;
          if (__nwlog_fault(v16, &type, &v25))
          {
            if (type == OS_LOG_TYPE_FAULT)
            {
              uint64_t v17 = __nwlog_obj();
              os_log_type_t v18 = type;
              if (os_log_type_enabled(v17, type))
              {
                *(_DWORD *)buf = 136446210;
                id v32 = "__nw_protocol_notify";
                _os_log_impl(&dword_1830D4000, v17, v18, "%{public}s called with null type", buf, 0xCu);
              }
            }
            else
            {
              unint64_t v24 = v8;
              if (v25)
              {
                backtrace_string = (char *)__nw_create_backtrace_string();
                int v20 = __nwlog_obj();
                os_log_type_t v21 = type;
                BOOL v22 = os_log_type_enabled(v20, type);
                if (backtrace_string)
                {
                  if (v22)
                  {
                    *(_DWORD *)buf = 136446466;
                    id v32 = "__nw_protocol_notify";
                    __int16 v33 = 2082;
                    v34 = backtrace_string;
                    _os_log_impl(&dword_1830D4000, v20, v21, "%{public}s called with null type, dumping backtrace:%{public}s", buf, 0x16u);
                  }

                  os_log_type_t v8 = v24;
                  free(backtrace_string);
                  goto LABEL_38;
                }
                if (v22)
                {
                  *(_DWORD *)buf = 136446210;
                  id v32 = "__nw_protocol_notify";
                  _os_log_impl(&dword_1830D4000, v20, v21, "%{public}s called with null type, no backtrace", buf, 0xCu);
                }
              }
              else
              {
                int v20 = __nwlog_obj();
                os_log_type_t v23 = type;
                if (os_log_type_enabled(v20, type))
                {
                  *(_DWORD *)buf = 136446210;
                  id v32 = "__nw_protocol_notify";
                  _os_log_impl(&dword_1830D4000, v20, v23, "%{public}s called with null type, backtrace limit exceeded", buf, 0xCu);
                }
              }

              os_log_type_t v8 = v24;
            }
          }
LABEL_38:
          if (v16) {
            free(v16);
          }
LABEL_17:
          if (v11 == &nw_protocol_ref_counted_handle)
          {
            nw::release_if_needed<nw_protocol *>(&v27);
            if (v8 != &nw_protocol_ref_counted_handle) {
              return 1;
            }
          }
          else if (v8 != &nw_protocol_ref_counted_handle)
          {
            return 1;
          }
          nw::release_if_needed<nw_protocol *>((uint64_t *)&v29);
        }
      }
    }
  }
  return 1;
}

void sub_1833C6510(_Unwind_Exception *exception_object)
{
}

void sub_1833C651C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (v21 == v20) {
    nw::release_if_needed<nw_protocol *>(&a17);
  }
  if (v19 == v20) {
    nw::release_if_needed<nw_protocol *>(&a19);
  }
  _Unwind_Resume(exception_object);
}

void nw_flow_notify(uint64_t a1, uint64_t a2, unsigned int a3, unsigned __int8 *a4, uint64_t a5)
{
  uint64_t v390 = *MEMORY[0x1E4F143B8];
  id v10 = *(id *)(*(void *)(a1 + 40) + 160);
  if (v10)
  {
    id v360 = v10;
    os_log_type_t v11 = (NWConcrete_nw_endpoint_handler *)v10;
    uint64_t mode = v11->mode;

    if (mode != 2)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v13 = (NWConcrete_nw_endpoint_mode_handler *)(id)gLogObj;
      if (os_log_type_enabled((os_log_t)v13, OS_LOG_TYPE_DEFAULT))
      {
        if (mode > 5) {
          __int16 v31 = "unknown-mode";
        }
        else {
          __int16 v31 = off_1E523FB08[mode];
        }
        *(_DWORD *)buf = 136446722;
        v373 = "nw_flow_notify";
        __int16 v374 = 2082;
        v375 = (void *)v31;
        __int16 v376 = 2082;
        v377 = "flow";
        _os_log_impl(&dword_1830D4000, (os_log_t)v13, OS_LOG_TYPE_DEFAULT, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
      }
      goto LABEL_45;
    }
    uint64_t v13 = nw_endpoint_handler_copy_flow(v11);
    __int16 v14 = v11;
    int state = v14->state;

    if (state == 5)
    {
      uint64_t v16 = v14;
      uint64_t v17 = v14;
      char v18 = *((unsigned char *)v17 + 268);

      if ((v18 & 0x20) == 0)
      {
        v359 = v13;
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        uint64_t v19 = v16;
        uint64_t v20 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
        {
          v357 = v11;
          uint64_t v21 = v17;

          BOOL v22 = v21;
          char v23 = *((unsigned char *)v17 + 268);

          if (v23) {
            unint64_t v24 = "dry-run ";
          }
          else {
            unint64_t v24 = "";
          }
          nw_endpoint_t v25 = nw_endpoint_handler_copy_endpoint(v22);
          logging_description = nw_endpoint_get_logging_description(v25);
          nw_endpoint_t v348 = v25;
          uint64_t v27 = v22;
          char v28 = v27;
          uint64_t v29 = v19->state;
          if (v29 > 5) {
            char v30 = "unknown-state";
          }
          else {
            char v30 = off_1E523FB38[v29];
          }
          id_str = v21->id_str;

          unint64_t v45 = v28;
          unsigned int v46 = v45;
          unsigned int v47 = "path";
          switch(v357->mode)
          {
            case 0:
              break;
            case 1:
              unsigned int v47 = "resolver";
              break;
            case 2:
              unsigned int v47 = nw_endpoint_flow_mode_string(v45[31]);
              break;
            case 3:
              unsigned int v47 = "proxy";
              break;
            case 4:
              unsigned int v47 = "fallback";
              break;
            case 5:
              unsigned int v47 = "transform";
              break;
            default:
              unsigned int v47 = "unknown-mode";
              break;
          }

          int v52 = v46;
          os_unfair_lock_lock((os_unfair_lock_t)v52 + 28);
          id v53 = v52[8];
          os_unfair_lock_unlock((os_unfair_lock_t)v52 + 28);

          id v54 = v53;
          v55 = v54;
          if (a3 > 0x1A) {
            uint64_t v56 = "unknown";
          }
          else {
            uint64_t v56 = off_1E5241E58[a3];
          }
          *(_DWORD *)buf = 136448002;
          v373 = "nw_flow_notify";
          __int16 v374 = 2082;
          v375 = id_str;
          __int16 v376 = 2082;
          v377 = v24;
          __int16 v378 = 2082;
          v379 = logging_description;
          __int16 v380 = 2082;
          v381 = v30;
          __int16 v382 = 2082;
          v383 = v47;
          __int16 v384 = 2114;
          id v385 = v54;
          __int16 v386 = 2082;
          v387 = v56;
          _os_log_impl(&dword_1830D4000, v20, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] ignoring notification %{public}s after cancellation", buf, 0x52u);
        }
LABEL_44:
        uint64_t v13 = v359;
      }
LABEL_45:

      id v10 = v360;
      goto LABEL_46;
    }
    if (a3 == 20) {
      goto LABEL_45;
    }
    v358 = v11;
    v359 = v13;
    v356 = (unsigned int *)v14;
    if (nw_endpoint_handler_get_minimize_logging(v14))
    {
      if (nw_endpoint_handler_get_logging_disabled(v14)) {
        goto LABEL_57;
      }
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      v34 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
      {
        id_string = nw_endpoint_handler_get_id_string(v14);
        v347 = nw_endpoint_handler_dry_run_string(v14);
        nw_endpoint_t v312 = nw_endpoint_handler_copy_endpoint(v14);
        v344 = nw_endpoint_get_logging_description(v312);
        loga = nw_endpoint_handler_state_string(v14);
        v313 = nw_endpoint_handler_mode_string(v14);
        id v314 = nw_endpoint_handler_copy_current_path(v14);
        v315 = v314;
        if (a3 > 0x1A) {
          v316 = "unknown";
        }
        else {
          v316 = off_1E5241E58[a3];
        }
        *(_DWORD *)buf = 136448002;
        v373 = "nw_flow_notify";
        __int16 v374 = 2082;
        v375 = (void *)id_string;
        __int16 v376 = 2082;
        v377 = v347;
        __int16 v378 = 2082;
        v379 = v344;
        __int16 v380 = 2082;
        v381 = loga;
        __int16 v382 = 2082;
        v383 = v313;
        __int16 v384 = 2114;
        id v385 = v314;
        __int16 v386 = 2082;
        v387 = v316;
        _os_log_impl(&dword_1830D4000, v34, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] received notification %{public}s", buf, 0x52u);
      }
    }
    else
    {
      id v32 = v14;
      char v33 = *((unsigned char *)v32 + 268);

      if ((v33 & 0x20) != 0)
      {
LABEL_57:
        switch(a3)
        {
          case 0u:
            if (nw_endpoint_handler_get_logging_disabled(v14)) {
              goto LABEL_45;
            }
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
            }
            id v62 = (id)gconnectionLogObj;
            os_log_type_t v63 = nw_endpoint_handler_get_id_string(v14);
            v64 = nw_endpoint_handler_dry_run_string(v14);
            nw_endpoint_t v65 = nw_endpoint_handler_copy_endpoint(v14);
            __int16 v66 = nw_endpoint_get_logging_description(v65);
            v67 = nw_endpoint_handler_state_string(v14);
            __int16 v68 = nw_endpoint_handler_mode_string(v14);
            id v69 = nw_endpoint_handler_copy_current_path(v14);
            *(_DWORD *)buf = 136448002;
            v373 = "nw_flow_notify";
            __int16 v374 = 2082;
            v375 = (void *)v63;
            __int16 v376 = 2082;
            v377 = v64;
            __int16 v378 = 2082;
            v379 = v66;
            __int16 v380 = 2082;
            v381 = v67;
            __int16 v382 = 2082;
            v383 = v68;
            __int16 v384 = 2114;
            id v385 = v69;
            __int16 v386 = 2082;
            v387 = "undefined";
            uint64_t v70 = (const char *)_os_log_send_and_compose_impl();

            os_log_type_t type = OS_LOG_TYPE_ERROR;
            char v364 = 0;
            os_log_type_t v71 = (char *)v70;
            if ((__nwlog_fault(v70, &type, &v364) & 1) == 0) {
              goto LABEL_252;
            }
            if (type == OS_LOG_TYPE_FAULT)
            {
              if (__nwlog_connection_log::onceToken != -1) {
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
              }
              v72 = (id)gconnectionLogObj;
              os_log_type_t v73 = type;
              if (os_log_type_enabled(v72, type))
              {
                BOOL v74 = nw_endpoint_handler_get_id_string(v356);
                v75 = nw_endpoint_handler_dry_run_string(v356);
                nw_endpoint_t v76 = nw_endpoint_handler_copy_endpoint(v356);
                v77 = nw_endpoint_get_logging_description(v76);
                v78 = nw_endpoint_handler_state_string(v356);
                v79 = nw_endpoint_handler_mode_string(v356);
                id v80 = nw_endpoint_handler_copy_current_path(v356);
                *(_DWORD *)buf = 136448002;
                v373 = "nw_flow_notify";
                __int16 v374 = 2082;
                v375 = (void *)v74;
                __int16 v376 = 2082;
                v377 = v75;
                __int16 v378 = 2082;
                v379 = v77;
                __int16 v380 = 2082;
                v381 = v78;
                __int16 v382 = 2082;
                v383 = v79;
                __int16 v384 = 2114;
                id v385 = v80;
                __int16 v386 = 2082;
                v387 = "undefined";
                _os_log_impl(&dword_1830D4000, v72, v73, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] error %{public}s notification", buf, 0x52u);
              }
              goto LABEL_250;
            }
            if (v364)
            {
              backtrace_string = __nw_create_backtrace_string();
              if (backtrace_string)
              {
                v179 = (char *)backtrace_string;
                if (__nwlog_connection_log::onceToken != -1) {
                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
                }
                v180 = (id)gconnectionLogObj;
                os_log_type_t v181 = type;
                if (os_log_type_enabled(v180, type))
                {
                  v182 = nw_endpoint_handler_get_id_string(v356);
                  v183 = nw_endpoint_handler_dry_run_string(v356);
                  nw_endpoint_t v352 = nw_endpoint_handler_copy_endpoint(v356);
                  v184 = nw_endpoint_get_logging_description(v352);
                  v185 = nw_endpoint_handler_state_string(v356);
                  v186 = nw_endpoint_handler_mode_string(v356);
                  id v187 = nw_endpoint_handler_copy_current_path(v356);
                  *(_DWORD *)buf = 136448258;
                  v373 = "nw_flow_notify";
                  __int16 v374 = 2082;
                  v375 = (void *)v182;
                  __int16 v376 = 2082;
                  v377 = v183;
                  __int16 v378 = 2082;
                  v379 = v184;
                  __int16 v380 = 2082;
                  v381 = v185;
                  __int16 v382 = 2082;
                  v383 = v186;
                  __int16 v384 = 2114;
                  id v385 = v187;
                  __int16 v386 = 2082;
                  v387 = "undefined";
                  __int16 v388 = 2082;
                  v389 = v179;
                  _os_log_impl(&dword_1830D4000, v180, v181, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] error %{public}s notification, dumping backtrace:%{public}s", buf, 0x5Cu);
                }
                goto LABEL_175;
              }
              if (__nwlog_connection_log::onceToken != -1) {
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
              }
              v72 = (id)gconnectionLogObj;
              os_log_type_t v256 = type;
              if (os_log_type_enabled(v72, type))
              {
                v257 = nw_endpoint_handler_get_id_string(v356);
                v258 = nw_endpoint_handler_dry_run_string(v356);
                nw_endpoint_t v259 = nw_endpoint_handler_copy_endpoint(v356);
                v260 = nw_endpoint_get_logging_description(v259);
                v261 = nw_endpoint_handler_state_string(v356);
                v262 = nw_endpoint_handler_mode_string(v356);
                id v263 = nw_endpoint_handler_copy_current_path(v356);
                *(_DWORD *)buf = 136448002;
                v373 = "nw_flow_notify";
                __int16 v374 = 2082;
                v375 = (void *)v257;
                __int16 v376 = 2082;
                v377 = v258;
                __int16 v378 = 2082;
                v379 = v260;
                __int16 v380 = 2082;
                v381 = v261;
                __int16 v382 = 2082;
                v383 = v262;
                __int16 v384 = 2114;
                id v385 = v263;
                __int16 v386 = 2082;
                v387 = "undefined";
                _os_log_impl(&dword_1830D4000, v72, v256, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] error %{public}s notification, no backtrace", buf, 0x52u);
              }
            }
            else
            {
              if (__nwlog_connection_log::onceToken != -1) {
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
              }
              v72 = (id)gconnectionLogObj;
              os_log_type_t v218 = type;
              if (os_log_type_enabled(v72, type))
              {
                v219 = nw_endpoint_handler_get_id_string(v356);
                v220 = nw_endpoint_handler_dry_run_string(v356);
                nw_endpoint_t v221 = nw_endpoint_handler_copy_endpoint(v356);
                v222 = nw_endpoint_get_logging_description(v221);
                v223 = nw_endpoint_handler_state_string(v356);
                v224 = nw_endpoint_handler_mode_string(v356);
                id v225 = nw_endpoint_handler_copy_current_path(v356);
                *(_DWORD *)buf = 136448002;
                v373 = "nw_flow_notify";
                __int16 v374 = 2082;
                v375 = (void *)v219;
                __int16 v376 = 2082;
                v377 = v220;
                __int16 v378 = 2082;
                v379 = v222;
                __int16 v380 = 2082;
                v381 = v223;
                __int16 v382 = 2082;
                v383 = v224;
                __int16 v384 = 2114;
                id v385 = v225;
                __int16 v386 = 2082;
                v387 = "undefined";
                _os_log_impl(&dword_1830D4000, v72, v218, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] error %{public}s notification, backtrace limit exceeded", buf, 0x52u);
              }
            }
            goto LABEL_250;
          case 1u:
            nw_endpoint_t v94 = nw_endpoint_handler_copy_endpoint(v14);
            id v95 = nw_endpoint_handler_copy_parameters(v14);
            id v96 = nw_endpoint_flow_copy_path(v14);
            nw_connection_report_symptom_internal_on_nw_queue(421892, v94, v95, v96, 0, 0, 0, 0, 0, 0);

            uint64_t v13 = v359;
            if (!*((void *)v359 + 105)) {
              goto LABEL_45;
            }
            __int16 v97 = (const void *)*((void *)v359 + 127);
            if (!v97) {
              goto LABEL_45;
            }
            v98 = _Block_copy(v97);
            v99 = *((void *)v359 + 105);
            v370[0] = MEMORY[0x1E4F143A8];
            v370[1] = 3221225472;
            v370[2] = ___ZL14nw_flow_notifyP11nw_protocolS0_31nw_protocol_notification_type_tPvm_block_invoke;
            v370[3] = &unk_1E524AFA8;
            id v371 = v98;
            id v100 = v98;
            dispatch_async(v99, v370);

            goto LABEL_44;
          case 2u:
            nw_endpoint_t v87 = nw_endpoint_handler_copy_endpoint(v14);
            id v88 = nw_endpoint_handler_copy_parameters(v14);
            id v89 = nw_endpoint_flow_copy_path(v14);
            nw_connection_report_symptom_internal_on_nw_queue(421891, v87, v88, v89, 0, 0, 0, 0, 0, 0);

            uint64_t v13 = v359;
            if (!*((void *)v359 + 105)) {
              goto LABEL_45;
            }
            os_log_type_t v90 = (const void *)*((void *)v359 + 128);
            if (!v90) {
              goto LABEL_45;
            }
            char v91 = _Block_copy(v90);
            v92 = *((void *)v359 + 105);
            block[0] = MEMORY[0x1E4F143A8];
            block[1] = 3221225472;
            block[2] = ___ZL14nw_flow_notifyP11nw_protocolS0_31nw_protocol_notification_type_tPvm_block_invoke_2;
            block[3] = &unk_1E524AFA8;
            id v369 = v91;
            id v93 = v91;
            dispatch_async(v92, block);

            goto LABEL_44;
          case 3u:
            if (*((void *)v13 + 129))
            {
              if (*((void *)v13 + 123))
              {
                ++*((_DWORD *)v13 + 248);
                if (*((_DWORD *)v13 + 249)) {
                  int int64 = networkd_settings_get_int64((const char *)nw_setting_tcpconn_keepalive_cnt);
                }
                else {
                  int int64 = 0;
                }
                v226 = v14;
                if (*((_DWORD *)v13 + 250)
                  && networkd_settings_get_int64((const char *)nw_setting_tcpconn_keepalive_time))
                {
                  unint64_t v227 = 60000000000;
                }
                else
                {
                  unint64_t v227 = 0;
                }
                if (!int64 || *((_DWORD *)v13 + 248) >= 0xAu)
                {
                  uint64_t v228 = *((void *)v13 + 123);
                  uint64_t v229 = mach_continuous_time();
                  if (v229 <= 1) {
                    uint64_t v230 = 1;
                  }
                  else {
                    uint64_t v230 = v229;
                  }
                  BOOL v231 = nw_delta_nanos(v228, v230) / (unint64_t)*((unsigned int *)v13 + 248) > v227;
                  v232 = v226;
                  if (!v231)
                  {
                    if ((nw_endpoint_handler_get_logging_disabled(v226) & 1) == 0)
                    {
                      if (__nwlog_connection_log::onceToken != -1) {
                        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
                      }
                      v233 = (id)gconnectionLogObj;
                      if (os_log_type_enabled(v233, OS_LOG_TYPE_DEBUG))
                      {
                        v234 = nw_endpoint_handler_get_id_string(v226);
                        v235 = nw_endpoint_handler_dry_run_string(v226);
                        nw_endpoint_t v236 = nw_endpoint_handler_copy_endpoint(v226);
                        v237 = nw_endpoint_get_logging_description(v236);
                        v238 = nw_endpoint_handler_state_string(v226);
                        v239 = nw_endpoint_handler_mode_string(v226);
                        id v240 = nw_endpoint_handler_copy_current_path(v226);
                        int v241 = *((_DWORD *)v359 + 248);
                        *(_DWORD *)buf = 136448002;
                        v373 = "nw_flow_notify";
                        __int16 v374 = 2082;
                        v375 = (void *)v234;
                        __int16 v376 = 2082;
                        v377 = v235;
                        __int16 v378 = 2082;
                        v379 = v237;
                        __int16 v380 = 2082;
                        v381 = v238;
                        __int16 v382 = 2082;
                        v383 = v239;
                        __int16 v384 = 2114;
                        id v385 = v240;
                        __int16 v386 = 1024;
                        LODWORD(v387) = v241;
                        _os_log_impl(&dword_1830D4000, v233, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Keepalive notify (count = %u)", buf, 0x4Eu);
                      }
                      uint64_t v13 = v359;
                      v232 = v226;
                    }
                    if (*((void *)v13 + 105))
                    {
                      v242 = (const void *)*((void *)v13 + 129);
                      if (v242)
                      {
                        v243 = _Block_copy(v242);
                        v244 = *((void *)v13 + 105);
                        v366[0] = MEMORY[0x1E4F143A8];
                        v366[1] = 3221225472;
                        v366[2] = ___ZL14nw_flow_notifyP11nw_protocolS0_31nw_protocol_notification_type_tPvm_block_invoke_94;
                        v366[3] = &unk_1E524AFA8;
                        id v367 = v243;
                        id v245 = v243;
                        dispatch_async(v244, v366);

                        v232 = v226;
                      }
                    }
                  }
                  if ((nw_endpoint_handler_get_logging_disabled(v232) & 1) == 0)
                  {
                    if (__nwlog_connection_log::onceToken != -1) {
                      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
                    }
                    v246 = (id)gconnectionLogObj;
                    if (os_log_type_enabled(v246, OS_LOG_TYPE_DEBUG))
                    {
                      v247 = nw_endpoint_handler_get_id_string(v232);
                      v248 = nw_endpoint_handler_dry_run_string(v232);
                      nw_endpoint_t v249 = nw_endpoint_handler_copy_endpoint(v232);
                      v250 = nw_endpoint_get_logging_description(v249);
                      v251 = v232;
                      v252 = nw_endpoint_handler_state_string(v232);
                      v253 = nw_endpoint_handler_mode_string(v251);
                      id v254 = nw_endpoint_handler_copy_current_path(v251);
                      int v255 = *((_DWORD *)v359 + 248);
                      *(_DWORD *)buf = 136448002;
                      v373 = "nw_flow_notify";
                      __int16 v374 = 2082;
                      v375 = (void *)v247;
                      __int16 v376 = 2082;
                      v377 = v248;
                      __int16 v378 = 2082;
                      v379 = v250;
                      __int16 v380 = 2082;
                      v381 = v252;
                      __int16 v382 = 2082;
                      v383 = v253;
                      __int16 v384 = 2114;
                      id v385 = v254;
                      __int16 v386 = 1024;
                      LODWORD(v387) = v255;
                      _os_log_impl(&dword_1830D4000, v246, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Clear keepalive state (count = %u)", buf, 0x4Eu);
                    }
                    uint64_t v13 = v359;
                  }
                  *((void *)v13 + 123) = 0;
                  *((_DWORD *)v13 + 248) = 0;
                }
              }
              else
              {
                *((_DWORD *)v13 + 248) = 1;
                uint64_t v216 = mach_continuous_time();
                if (v216 <= 1) {
                  uint64_t v217 = 1;
                }
                else {
                  uint64_t v217 = v216;
                }
                *((void *)v13 + 123) = v217;
              }
            }
            goto LABEL_45;
          case 5u:
            if (!*((void *)v13 + 105) || !*((void *)v13 + 130)) {
              goto LABEL_45;
            }
            v81 = nw_protocol_definition_create_with_identifier(*(long long **)(a2 + 16));
            if (v81)
            {
              id v82 = nw_endpoint_flow_copy_protocol_metadata(v14, v13, v81, 1, 0);
              if (v82) {
                (*(void (**)(void))(*((void *)v13 + 130) + 16))();
              }
              v83 = v13;

              goto LABEL_75;
            }
            v83 = v13;
            v332 = __nwlog_obj();
            *(_DWORD *)buf = 136446210;
            v373 = "nw_flow_notify";
            v333 = (char *)_os_log_send_and_compose_impl();

            os_log_type_t type = OS_LOG_TYPE_ERROR;
            char v364 = 0;
            if (!__nwlog_fault(v333, &type, &v364)) {
              goto LABEL_288;
            }
            if (type == OS_LOG_TYPE_FAULT)
            {
              v334 = __nwlog_obj();
              os_log_type_t v335 = type;
              if (os_log_type_enabled(v334, type))
              {
                *(_DWORD *)buf = 136446210;
                v373 = "nw_flow_notify";
                _os_log_impl(&dword_1830D4000, v334, v335, "%{public}s called with null definition", buf, 0xCu);
              }
            }
            else if (v364)
            {
              v336 = (char *)__nw_create_backtrace_string();
              v334 = __nwlog_obj();
              os_log_type_t v337 = type;
              BOOL v338 = os_log_type_enabled(v334, type);
              if (v336)
              {
                if (v338)
                {
                  *(_DWORD *)buf = 136446466;
                  v373 = "nw_flow_notify";
                  __int16 v374 = 2082;
                  v375 = v336;
                  _os_log_impl(&dword_1830D4000, v334, v337, "%{public}s called with null definition, dumping backtrace:%{public}s", buf, 0x16u);
                }

                free(v336);
LABEL_288:
                if (v333) {
                  free(v333);
                }
LABEL_75:

                uint64_t v13 = v83;
                goto LABEL_45;
              }
              if (v338)
              {
                *(_DWORD *)buf = 136446210;
                v373 = "nw_flow_notify";
                _os_log_impl(&dword_1830D4000, v334, v337, "%{public}s called with null definition, no backtrace", buf, 0xCu);
              }
            }
            else
            {
              v334 = __nwlog_obj();
              os_log_type_t v339 = type;
              if (os_log_type_enabled(v334, type))
              {
                *(_DWORD *)buf = 136446210;
                v373 = "nw_flow_notify";
                _os_log_impl(&dword_1830D4000, v334, v339, "%{public}s called with null definition, backtrace limit exceeded", buf, 0xCu);
              }
            }

            goto LABEL_288;
          case 0xCu:
            int v84 = *((char *)v13 + 34);
            if (v84 < 0) {
              goto LABEL_45;
            }
            *((unsigned char *)v13 + 34) = v84 | 0x80;
            __int16 v85 = 8;
            goto LABEL_98;
          case 0x13u:
            nw_endpoint_flow_rebuild_stack(v14, (nw_protocol *)a2);
            goto LABEL_45;
          case 0x16u:
            if (*((_DWORD *)v13 + 251) <= 0x13u)
            {
              int minimize_logging = nw_endpoint_handler_get_minimize_logging(v14);
              char logging_disabled = nw_endpoint_handler_get_logging_disabled(v14);
              if (minimize_logging)
              {
                if (logging_disabled)
                {
LABEL_97:
                  ++*((_DWORD *)v13 + 251);
                  nw_endpoint_flow_rebuild_stack(v14, (nw_protocol *)a1);
                  __int16 v85 = 4;
LABEL_98:
                  v14->event.domain = 3;
                  v14->event.event = v85;
                  nw_endpoint_handler_report(v14, 0, &v14->event.domain, 0);
                  goto LABEL_45;
                }
                if (__nwlog_connection_log::onceToken != -1) {
                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
                }
                v103 = (id)gconnectionLogObj;
                if (os_log_type_enabled(v103, OS_LOG_TYPE_DEBUG))
                {
                  v317 = nw_endpoint_handler_get_id_string(v356);
                  v318 = nw_endpoint_handler_dry_run_string(v356);
                  nw_endpoint_t v319 = nw_endpoint_handler_copy_endpoint(v356);
                  v320 = nw_endpoint_get_logging_description(v319);
                  v321 = nw_endpoint_handler_state_string(v356);
                  v322 = nw_endpoint_handler_mode_string(v356);
                  id v323 = nw_endpoint_handler_copy_current_path(v356);
                  int v324 = *((_DWORD *)v359 + 251);
                  *(_DWORD *)buf = 136448002;
                  v373 = "nw_flow_notify";
                  __int16 v374 = 2082;
                  v375 = (void *)v317;
                  __int16 v376 = 2082;
                  v377 = v318;
                  __int16 v378 = 2082;
                  v379 = v320;
                  __int16 v380 = 2082;
                  v381 = v321;
                  __int16 v382 = 2082;
                  v383 = v322;
                  __int16 v384 = 2114;
                  id v385 = v323;
                  __int16 v386 = 1024;
                  LODWORD(v387) = v324;
                  _os_log_impl(&dword_1830D4000, v103, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] received restart with count %u, rebuilding stack", buf, 0x4Eu);
                }
              }
              else
              {
                if (logging_disabled) {
                  goto LABEL_97;
                }
                if (__nwlog_connection_log::onceToken != -1) {
                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
                }
                v103 = (id)gconnectionLogObj;
                if (os_log_type_enabled(v103, OS_LOG_TYPE_INFO))
                {
                  v104 = nw_endpoint_handler_get_id_string(v14);
                  v105 = nw_endpoint_handler_dry_run_string(v14);
                  nw_endpoint_t v106 = nw_endpoint_handler_copy_endpoint(v14);
                  v107 = nw_endpoint_get_logging_description(v106);
                  v108 = v14;
                  v109 = nw_endpoint_handler_state_string(v14);
                  v110 = nw_endpoint_handler_mode_string(v108);
                  id v111 = nw_endpoint_handler_copy_current_path(v108);
                  int v112 = *((_DWORD *)v359 + 251);
                  *(_DWORD *)buf = 136448002;
                  v373 = "nw_flow_notify";
                  __int16 v374 = 2082;
                  v375 = (void *)v104;
                  __int16 v376 = 2082;
                  v377 = v105;
                  __int16 v378 = 2082;
                  v379 = v107;
                  __int16 v380 = 2082;
                  v381 = v109;
                  __int16 v382 = 2082;
                  v383 = v110;
                  __int16 v384 = 2114;
                  id v385 = v111;
                  __int16 v386 = 1024;
                  LODWORD(v387) = v112;
                  _os_log_impl(&dword_1830D4000, v103, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] received restart with count %u, rebuilding stack", buf, 0x4Eu);
                }
              }

              uint64_t v13 = v359;
              __int16 v14 = (NWConcrete_nw_endpoint_handler *)v356;
              goto LABEL_97;
            }
            if (nw_endpoint_handler_get_logging_disabled(v14)) {
              goto LABEL_240;
            }
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
            }
            id v127 = (id)gconnectionLogObj;
            v128 = nw_endpoint_handler_get_id_string(v14);
            v129 = nw_endpoint_handler_dry_run_string(v14);
            nw_endpoint_t v130 = nw_endpoint_handler_copy_endpoint(v14);
            v131 = nw_endpoint_get_logging_description(v130);
            v132 = v14;
            v133 = nw_endpoint_handler_state_string(v14);
            v134 = nw_endpoint_handler_mode_string(v132);
            id v135 = nw_endpoint_handler_copy_current_path(v132);
            *(_DWORD *)buf = 136447746;
            v373 = "nw_flow_notify";
            __int16 v374 = 2082;
            v375 = (void *)v128;
            __int16 v376 = 2082;
            v377 = v129;
            __int16 v378 = 2082;
            v379 = v131;
            __int16 v380 = 2082;
            v381 = v133;
            __int16 v382 = 2082;
            v383 = v134;
            __int16 v384 = 2114;
            id v385 = v135;
            v351 = (const char *)_os_log_send_and_compose_impl();

            os_log_type_t type = OS_LOG_TYPE_ERROR;
            char v364 = 0;
            v136 = (char *)v351;
            if ((__nwlog_fault(v351, &type, &v364) & 1) == 0) {
              goto LABEL_238;
            }
            if (type == OS_LOG_TYPE_FAULT)
            {
              if (__nwlog_connection_log::onceToken != -1) {
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
              }
              v137 = (id)gconnectionLogObj;
              os_log_type_t v138 = type;
              if (os_log_type_enabled(v137, type))
              {
                v139 = nw_endpoint_handler_get_id_string(v356);
                v140 = nw_endpoint_handler_dry_run_string(v356);
                nw_endpoint_t v141 = nw_endpoint_handler_copy_endpoint(v356);
                v142 = nw_endpoint_get_logging_description(v141);
                v143 = nw_endpoint_handler_state_string(v356);
                v144 = nw_endpoint_handler_mode_string(v356);
                id v145 = nw_endpoint_handler_copy_current_path(v356);
                *(_DWORD *)buf = 136447746;
                v373 = "nw_flow_notify";
                __int16 v374 = 2082;
                v375 = (void *)v139;
                __int16 v376 = 2082;
                v377 = v140;
                __int16 v378 = 2082;
                v379 = v142;
                __int16 v380 = 2082;
                v381 = v143;
                __int16 v382 = 2082;
                v383 = v144;
                __int16 v384 = 2114;
                id v385 = v145;
                _os_log_impl(&dword_1830D4000, v137, v138, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] received restart without connecting too many times, failing flow", buf, 0x48u);
              }
            }
            else if (v364)
            {
              v190 = __nw_create_backtrace_string();
              if (v190)
              {
                v191 = (char *)v190;
                if (__nwlog_connection_log::onceToken != -1) {
                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
                }
                v192 = (id)gconnectionLogObj;
                os_log_type_t v193 = type;
                if (os_log_type_enabled(v192, type))
                {
                  v194 = nw_endpoint_handler_get_id_string(v356);
                  v195 = nw_endpoint_handler_dry_run_string(v356);
                  nw_endpoint_t v346 = nw_endpoint_handler_copy_endpoint(v356);
                  v196 = nw_endpoint_get_logging_description(v346);
                  v197 = nw_endpoint_handler_state_string(v356);
                  v198 = nw_endpoint_handler_mode_string(v356);
                  id v199 = nw_endpoint_handler_copy_current_path(v356);
                  *(_DWORD *)buf = 136448002;
                  v373 = "nw_flow_notify";
                  __int16 v374 = 2082;
                  v375 = (void *)v194;
                  __int16 v376 = 2082;
                  v377 = v195;
                  __int16 v378 = 2082;
                  v379 = v196;
                  __int16 v380 = 2082;
                  v381 = v197;
                  __int16 v382 = 2082;
                  v383 = v198;
                  __int16 v384 = 2114;
                  id v385 = v199;
                  __int16 v386 = 2082;
                  v387 = v191;
                  _os_log_impl(&dword_1830D4000, v192, v193, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] received restart without connecting too many times, failing flow, dumping backtrace:%{public}s", buf, 0x52u);
                }
                free(v191);
                goto LABEL_237;
              }
              if (__nwlog_connection_log::onceToken != -1) {
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
              }
              v137 = (id)gconnectionLogObj;
              os_log_type_t v288 = type;
              if (os_log_type_enabled(v137, type))
              {
                v289 = nw_endpoint_handler_get_id_string(v356);
                v290 = nw_endpoint_handler_dry_run_string(v356);
                nw_endpoint_t v291 = nw_endpoint_handler_copy_endpoint(v356);
                v292 = nw_endpoint_get_logging_description(v291);
                v293 = nw_endpoint_handler_state_string(v356);
                v294 = nw_endpoint_handler_mode_string(v356);
                id v295 = nw_endpoint_handler_copy_current_path(v356);
                *(_DWORD *)buf = 136447746;
                v373 = "nw_flow_notify";
                __int16 v374 = 2082;
                v375 = (void *)v289;
                __int16 v376 = 2082;
                v377 = v290;
                __int16 v378 = 2082;
                v379 = v292;
                __int16 v380 = 2082;
                v381 = v293;
                __int16 v382 = 2082;
                v383 = v294;
                __int16 v384 = 2114;
                id v385 = v295;
                _os_log_impl(&dword_1830D4000, v137, v288, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] received restart without connecting too many times, failing flow, no backtrace", buf, 0x48u);
              }
            }
            else
            {
              if (__nwlog_connection_log::onceToken != -1) {
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
              }
              v137 = (id)gconnectionLogObj;
              os_log_type_t v264 = type;
              if (os_log_type_enabled(v137, type))
              {
                v265 = nw_endpoint_handler_get_id_string(v356);
                v266 = nw_endpoint_handler_dry_run_string(v356);
                nw_endpoint_t v267 = nw_endpoint_handler_copy_endpoint(v356);
                v268 = nw_endpoint_get_logging_description(v267);
                v269 = nw_endpoint_handler_state_string(v356);
                v270 = nw_endpoint_handler_mode_string(v356);
                id v271 = nw_endpoint_handler_copy_current_path(v356);
                *(_DWORD *)buf = 136447746;
                v373 = "nw_flow_notify";
                __int16 v374 = 2082;
                v375 = (void *)v265;
                __int16 v376 = 2082;
                v377 = v266;
                __int16 v378 = 2082;
                v379 = v268;
                __int16 v380 = 2082;
                v381 = v269;
                __int16 v382 = 2082;
                v383 = v270;
                __int16 v384 = 2114;
                id v385 = v271;
                _os_log_impl(&dword_1830D4000, v137, v264, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] received restart without connecting too many times, failing flow, backtrace limit exceeded", buf, 0x48u);
              }
            }

LABEL_237:
            v136 = (char *)v351;
LABEL_238:
            uint64_t v13 = v359;
            if (v136) {
              free(v136);
            }
LABEL_240:
            nw_protocol_disconnected((void *)a1, *(void *)(a1 + 32));
            goto LABEL_45;
          case 0x17u:
            if (a4 && a5 == 1)
            {
              int v125 = *a4;
              char v126 = *((unsigned char *)v13 + 35);
              *((unsigned char *)v13 + 35) = v126 & 0xEF | (16 * v125);
              if (!v125 && (v126 & 8) != 0)
              {
                *((unsigned char *)v13 + 35) = v126 & 0xE7 | (16 * v125);
                nw_endpoint_flow_start_child(v14);
              }
              goto LABEL_45;
            }
            if (nw_endpoint_handler_get_logging_disabled(v14)) {
              goto LABEL_45;
            }
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
            }
            id v162 = (id)gconnectionLogObj;
            v163 = nw_endpoint_handler_get_id_string(v14);
            v164 = nw_endpoint_handler_dry_run_string(v14);
            nw_endpoint_t v165 = nw_endpoint_handler_copy_endpoint(v14);
            v166 = nw_endpoint_get_logging_description(v165);
            v167 = nw_endpoint_handler_state_string(v14);
            v168 = nw_endpoint_handler_mode_string(v14);
            id v169 = nw_endpoint_handler_copy_current_path(v14);
            *(_DWORD *)buf = 136448002;
            v373 = "nw_flow_notify";
            __int16 v374 = 2082;
            v375 = (void *)v163;
            __int16 v376 = 2082;
            v377 = v164;
            __int16 v378 = 2082;
            v379 = v166;
            __int16 v380 = 2082;
            v381 = v167;
            __int16 v382 = 2082;
            v383 = v168;
            __int16 v384 = 2114;
            id v385 = v169;
            __int16 v386 = 2080;
            v387 = "delay_child";
            uint64_t v70 = (const char *)_os_log_send_and_compose_impl();

            os_log_type_t type = OS_LOG_TYPE_ERROR;
            char v364 = 0;
            os_log_type_t v71 = (char *)v70;
            if ((__nwlog_fault(v70, &type, &v364) & 1) == 0) {
              goto LABEL_252;
            }
            if (type == OS_LOG_TYPE_FAULT)
            {
              if (__nwlog_connection_log::onceToken != -1) {
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
              }
              v72 = (id)gconnectionLogObj;
              os_log_type_t v170 = type;
              if (os_log_type_enabled(v72, type))
              {
                v171 = nw_endpoint_handler_get_id_string(v356);
                v172 = nw_endpoint_handler_dry_run_string(v356);
                nw_endpoint_t v173 = nw_endpoint_handler_copy_endpoint(v356);
                v174 = nw_endpoint_get_logging_description(v173);
                v175 = nw_endpoint_handler_state_string(v356);
                v176 = nw_endpoint_handler_mode_string(v356);
                id v177 = nw_endpoint_handler_copy_current_path(v356);
                *(_DWORD *)buf = 136448002;
                v373 = "nw_flow_notify";
                __int16 v374 = 2082;
                v375 = (void *)v171;
                __int16 v376 = 2082;
                v377 = v172;
                __int16 v378 = 2082;
                v379 = v174;
                __int16 v380 = 2082;
                v381 = v175;
                __int16 v382 = 2082;
                v383 = v176;
                __int16 v384 = 2114;
                id v385 = v177;
                __int16 v386 = 2080;
                v387 = "delay_child";
                _os_log_impl(&dword_1830D4000, v72, v170, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Invalid argument passed to %s notification", buf, 0x52u);
              }
              goto LABEL_250;
            }
            if (v364)
            {
              v208 = __nw_create_backtrace_string();
              if (v208)
              {
                v179 = (char *)v208;
                if (__nwlog_connection_log::onceToken != -1) {
                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
                }
                v180 = (id)gconnectionLogObj;
                os_log_type_t v209 = type;
                if (os_log_type_enabled(v180, type))
                {
                  v210 = nw_endpoint_handler_get_id_string(v356);
                  v211 = nw_endpoint_handler_dry_run_string(v356);
                  nw_endpoint_t v354 = nw_endpoint_handler_copy_endpoint(v356);
                  v212 = nw_endpoint_get_logging_description(v354);
                  v213 = nw_endpoint_handler_state_string(v356);
                  v214 = nw_endpoint_handler_mode_string(v356);
                  id v215 = nw_endpoint_handler_copy_current_path(v356);
                  *(_DWORD *)buf = 136448258;
                  v373 = "nw_flow_notify";
                  __int16 v374 = 2082;
                  v375 = (void *)v210;
                  __int16 v376 = 2082;
                  v377 = v211;
                  __int16 v378 = 2082;
                  v379 = v212;
                  __int16 v380 = 2082;
                  v381 = v213;
                  __int16 v382 = 2082;
                  v383 = v214;
                  __int16 v384 = 2114;
                  id v385 = v215;
                  __int16 v386 = 2080;
                  v387 = "delay_child";
                  __int16 v388 = 2082;
                  v389 = v179;
                  _os_log_impl(&dword_1830D4000, v180, v209, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Invalid argument passed to %s notification, dumping backtrace:%{public}s", buf, 0x5Cu);
                }
                goto LABEL_175;
              }
              if (__nwlog_connection_log::onceToken != -1) {
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
              }
              v72 = (id)gconnectionLogObj;
              os_log_type_t v304 = type;
              if (os_log_type_enabled(v72, type))
              {
                v305 = nw_endpoint_handler_get_id_string(v356);
                v306 = nw_endpoint_handler_dry_run_string(v356);
                nw_endpoint_t v307 = nw_endpoint_handler_copy_endpoint(v356);
                v308 = nw_endpoint_get_logging_description(v307);
                v309 = nw_endpoint_handler_state_string(v356);
                v310 = nw_endpoint_handler_mode_string(v356);
                id v311 = nw_endpoint_handler_copy_current_path(v356);
                *(_DWORD *)buf = 136448002;
                v373 = "nw_flow_notify";
                __int16 v374 = 2082;
                v375 = (void *)v305;
                __int16 v376 = 2082;
                v377 = v306;
                __int16 v378 = 2082;
                v379 = v308;
                __int16 v380 = 2082;
                v381 = v309;
                __int16 v382 = 2082;
                v383 = v310;
                __int16 v384 = 2114;
                id v385 = v311;
                __int16 v386 = 2080;
                v387 = "delay_child";
                _os_log_impl(&dword_1830D4000, v72, v304, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Invalid argument passed to %s notification, no backtrace", buf, 0x52u);
              }
            }
            else
            {
              if (__nwlog_connection_log::onceToken != -1) {
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
              }
              v72 = (id)gconnectionLogObj;
              os_log_type_t v280 = type;
              if (os_log_type_enabled(v72, type))
              {
                v281 = nw_endpoint_handler_get_id_string(v356);
                v282 = nw_endpoint_handler_dry_run_string(v356);
                nw_endpoint_t v283 = nw_endpoint_handler_copy_endpoint(v356);
                v284 = nw_endpoint_get_logging_description(v283);
                v285 = nw_endpoint_handler_state_string(v356);
                v286 = nw_endpoint_handler_mode_string(v356);
                id v287 = nw_endpoint_handler_copy_current_path(v356);
                *(_DWORD *)buf = 136448002;
                v373 = "nw_flow_notify";
                __int16 v374 = 2082;
                v375 = (void *)v281;
                __int16 v376 = 2082;
                v377 = v282;
                __int16 v378 = 2082;
                v379 = v284;
                __int16 v380 = 2082;
                v381 = v285;
                __int16 v382 = 2082;
                v383 = v286;
                __int16 v384 = 2114;
                id v385 = v287;
                __int16 v386 = 2080;
                v387 = "delay_child";
                _os_log_impl(&dword_1830D4000, v72, v280, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Invalid argument passed to %s notification, backtrace limit exceeded", buf, 0x52u);
              }
            }
            goto LABEL_250;
          case 0x18u:
            if (a5 == 8)
            {
              v350 = a4;
              int v113 = nw_endpoint_handler_get_minimize_logging(v14);
              char v114 = nw_endpoint_handler_get_logging_disabled(v14);
              if (v113)
              {
                if (v114) {
                  goto LABEL_150;
                }
                v123 = v14;
                if (__nwlog_connection_log::onceToken != -1) {
                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
                }
                v115 = (id)gconnectionLogObj;
                if (os_log_type_enabled(v115, OS_LOG_TYPE_DEBUG))
                {
                  v325 = nw_endpoint_handler_get_id_string(v14);
                  v326 = nw_endpoint_handler_dry_run_string(v14);
                  nw_endpoint_t v327 = nw_endpoint_handler_copy_endpoint(v14);
                  v328 = nw_endpoint_get_logging_description(v327);
                  v329 = nw_endpoint_handler_state_string(v14);
                  v330 = nw_endpoint_handler_mode_string(v123);
                  id v331 = nw_endpoint_handler_copy_current_path(v123);
                  *(_DWORD *)buf = 136448002;
                  v373 = "nw_flow_notify";
                  __int16 v374 = 2082;
                  v375 = (void *)v325;
                  __int16 v376 = 2082;
                  v377 = v326;
                  __int16 v378 = 2082;
                  v379 = v328;
                  __int16 v380 = 2082;
                  v381 = v329;
                  __int16 v382 = 2082;
                  v383 = v330;
                  __int16 v384 = 2114;
                  id v385 = v331;
                  __int16 v386 = 2112;
                  v387 = (const char *)v350;
                  _os_log_impl(&dword_1830D4000, v115, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] received migration interface %@", buf, 0x52u);
                }
              }
              else
              {
                if (v114)
                {
LABEL_150:
                  v188 = (void *)*((void *)v13 + 104);
                  if (v188)
                  {
                    BOOL v189 = nw_path_flow_registration_copy_path(v188);
                    os_unfair_lock_lock((os_unfair_lock_t)v13 + 220);
                    objc_storeStrong((id *)v13 + 2, (id)v189);
                    if ((*((unsigned char *)v13 + 33) & 4) != 0) {
                      objc_storeStrong((id *)v13 + 1, (id)v189);
                    }
                    os_unfair_lock_unlock((os_unfair_lock_t)v13 + 220);
                  }
                  nw_endpoint_handler_migration_callback(v14, v350);

                  goto LABEL_44;
                }
                if (__nwlog_connection_log::onceToken != -1) {
                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
                }
                v115 = (id)gconnectionLogObj;
                if (os_log_type_enabled(v115, OS_LOG_TYPE_INFO))
                {
                  v116 = nw_endpoint_handler_get_id_string(v14);
                  v117 = nw_endpoint_handler_dry_run_string(v14);
                  nw_endpoint_t v118 = nw_endpoint_handler_copy_endpoint(v14);
                  v119 = nw_endpoint_get_logging_description(v118);
                  v120 = v14;
                  v121 = nw_endpoint_handler_state_string(v14);
                  v122 = nw_endpoint_handler_mode_string(v120);
                  v123 = v120;
                  id v124 = nw_endpoint_handler_copy_current_path(v120);
                  *(_DWORD *)buf = 136448002;
                  v373 = "nw_flow_notify";
                  __int16 v374 = 2082;
                  v375 = (void *)v116;
                  __int16 v376 = 2082;
                  v377 = v117;
                  __int16 v378 = 2082;
                  v379 = v119;
                  __int16 v380 = 2082;
                  v381 = v121;
                  __int16 v382 = 2082;
                  v383 = v122;
                  __int16 v384 = 2114;
                  id v385 = v124;
                  __int16 v386 = 2112;
                  v387 = (const char *)v350;
                  _os_log_impl(&dword_1830D4000, v115, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] received migration interface %@", buf, 0x52u);
                }
                else
                {
                  v123 = v14;
                }
              }

              uint64_t v13 = v359;
              __int16 v14 = v123;
              goto LABEL_150;
            }
            if (nw_endpoint_handler_get_logging_disabled(v14)) {
              goto LABEL_45;
            }
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
            }
            id v146 = (id)gconnectionLogObj;
            v147 = nw_endpoint_handler_get_id_string(v14);
            v148 = nw_endpoint_handler_dry_run_string(v14);
            nw_endpoint_t v149 = nw_endpoint_handler_copy_endpoint(v14);
            v150 = nw_endpoint_get_logging_description(v149);
            v151 = nw_endpoint_handler_state_string(v14);
            v152 = nw_endpoint_handler_mode_string(v14);
            id v153 = nw_endpoint_handler_copy_current_path(v14);
            *(_DWORD *)buf = 136448002;
            v373 = "nw_flow_notify";
            __int16 v374 = 2082;
            v375 = (void *)v147;
            __int16 v376 = 2082;
            v377 = v148;
            __int16 v378 = 2082;
            v379 = v150;
            __int16 v380 = 2082;
            v381 = v151;
            __int16 v382 = 2082;
            v383 = v152;
            __int16 v384 = 2114;
            id v385 = v153;
            __int16 v386 = 2080;
            v387 = "migration";
            uint64_t v70 = (const char *)_os_log_send_and_compose_impl();

            os_log_type_t type = OS_LOG_TYPE_ERROR;
            char v364 = 0;
            os_log_type_t v71 = (char *)v70;
            if ((__nwlog_fault(v70, &type, &v364) & 1) == 0) {
              goto LABEL_252;
            }
            if (type == OS_LOG_TYPE_FAULT)
            {
              if (__nwlog_connection_log::onceToken != -1) {
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
              }
              v72 = (id)gconnectionLogObj;
              os_log_type_t v154 = type;
              if (os_log_type_enabled(v72, type))
              {
                v155 = nw_endpoint_handler_get_id_string(v356);
                v156 = nw_endpoint_handler_dry_run_string(v356);
                nw_endpoint_t v157 = nw_endpoint_handler_copy_endpoint(v356);
                v158 = nw_endpoint_get_logging_description(v157);
                v159 = nw_endpoint_handler_state_string(v356);
                v160 = nw_endpoint_handler_mode_string(v356);
                id v161 = nw_endpoint_handler_copy_current_path(v356);
                *(_DWORD *)buf = 136448002;
                v373 = "nw_flow_notify";
                __int16 v374 = 2082;
                v375 = (void *)v155;
                __int16 v376 = 2082;
                v377 = v156;
                __int16 v378 = 2082;
                v379 = v158;
                __int16 v380 = 2082;
                v381 = v159;
                __int16 v382 = 2082;
                v383 = v160;
                __int16 v384 = 2114;
                id v385 = v161;
                __int16 v386 = 2080;
                v387 = "migration";
                _os_log_impl(&dword_1830D4000, v72, v154, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Invalid argument passed to %s notification", buf, 0x52u);
              }
            }
            else if (v364)
            {
              v200 = __nw_create_backtrace_string();
              if (v200)
              {
                v179 = (char *)v200;
                if (__nwlog_connection_log::onceToken != -1) {
                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
                }
                v180 = (id)gconnectionLogObj;
                os_log_type_t v201 = type;
                if (os_log_type_enabled(v180, type))
                {
                  v202 = nw_endpoint_handler_get_id_string(v356);
                  v203 = nw_endpoint_handler_dry_run_string(v356);
                  nw_endpoint_t v353 = nw_endpoint_handler_copy_endpoint(v356);
                  v204 = nw_endpoint_get_logging_description(v353);
                  v205 = nw_endpoint_handler_state_string(v356);
                  v206 = nw_endpoint_handler_mode_string(v356);
                  id v207 = nw_endpoint_handler_copy_current_path(v356);
                  *(_DWORD *)buf = 136448258;
                  v373 = "nw_flow_notify";
                  __int16 v374 = 2082;
                  v375 = (void *)v202;
                  __int16 v376 = 2082;
                  v377 = v203;
                  __int16 v378 = 2082;
                  v379 = v204;
                  __int16 v380 = 2082;
                  v381 = v205;
                  __int16 v382 = 2082;
                  v383 = v206;
                  __int16 v384 = 2114;
                  id v385 = v207;
                  __int16 v386 = 2080;
                  v387 = "migration";
                  __int16 v388 = 2082;
                  v389 = v179;
                  _os_log_impl(&dword_1830D4000, v180, v201, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Invalid argument passed to %s notification, dumping backtrace:%{public}s", buf, 0x5Cu);
                }
LABEL_175:

                free(v179);
                goto LABEL_251;
              }
              if (__nwlog_connection_log::onceToken != -1) {
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
              }
              v72 = (id)gconnectionLogObj;
              os_log_type_t v296 = type;
              if (os_log_type_enabled(v72, type))
              {
                v297 = nw_endpoint_handler_get_id_string(v356);
                v298 = nw_endpoint_handler_dry_run_string(v356);
                nw_endpoint_t v299 = nw_endpoint_handler_copy_endpoint(v356);
                v300 = nw_endpoint_get_logging_description(v299);
                v301 = nw_endpoint_handler_state_string(v356);
                v302 = nw_endpoint_handler_mode_string(v356);
                id v303 = nw_endpoint_handler_copy_current_path(v356);
                *(_DWORD *)buf = 136448002;
                v373 = "nw_flow_notify";
                __int16 v374 = 2082;
                v375 = (void *)v297;
                __int16 v376 = 2082;
                v377 = v298;
                __int16 v378 = 2082;
                v379 = v300;
                __int16 v380 = 2082;
                v381 = v301;
                __int16 v382 = 2082;
                v383 = v302;
                __int16 v384 = 2114;
                id v385 = v303;
                __int16 v386 = 2080;
                v387 = "migration";
                _os_log_impl(&dword_1830D4000, v72, v296, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Invalid argument passed to %s notification, no backtrace", buf, 0x52u);
              }
            }
            else
            {
              if (__nwlog_connection_log::onceToken != -1) {
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
              }
              v72 = (id)gconnectionLogObj;
              os_log_type_t v272 = type;
              if (os_log_type_enabled(v72, type))
              {
                v273 = nw_endpoint_handler_get_id_string(v356);
                v274 = nw_endpoint_handler_dry_run_string(v356);
                nw_endpoint_t v275 = nw_endpoint_handler_copy_endpoint(v356);
                v276 = nw_endpoint_get_logging_description(v275);
                v277 = nw_endpoint_handler_state_string(v356);
                v278 = nw_endpoint_handler_mode_string(v356);
                id v279 = nw_endpoint_handler_copy_current_path(v356);
                *(_DWORD *)buf = 136448002;
                v373 = "nw_flow_notify";
                __int16 v374 = 2082;
                v375 = (void *)v273;
                __int16 v376 = 2082;
                v377 = v274;
                __int16 v378 = 2082;
                v379 = v276;
                __int16 v380 = 2082;
                v381 = v277;
                __int16 v382 = 2082;
                v383 = v278;
                __int16 v384 = 2114;
                id v385 = v279;
                __int16 v386 = 2080;
                v387 = "migration";
                _os_log_impl(&dword_1830D4000, v72, v272, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Invalid argument passed to %s notification, backtrace limit exceeded", buf, 0x52u);
              }
            }
LABEL_250:

LABEL_251:
            os_log_type_t v71 = (char *)v70;
LABEL_252:
            uint64_t v13 = v359;
            if (v71) {
              free(v71);
            }
            goto LABEL_45;
          case 0x19u:
            v361[0] = MEMORY[0x1E4F143A8];
            v361[1] = 3221225472;
            v361[2] = ___ZL14nw_flow_notifyP11nw_protocolS0_31nw_protocol_notification_type_tPvm_block_invoke_95;
            v361[3] = &unk_1E523CBD8;
            uint64_t v363 = a1;
            v362 = v14;
            nw_endpoint_handler_access_parent_flow_handler(v362, v361);

            goto LABEL_44;
          default:
            goto LABEL_45;
        }
      }
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      v34 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
      {
        uint64_t v35 = v32;

        unint64_t v36 = v35;
        char v37 = *((unsigned char *)v32 + 268);

        BOOL v38 = "dry-run ";
        if ((v37 & 1) == 0) {
          BOOL v38 = "";
        }
        v349 = v38;
        nw_endpoint_t v39 = nw_endpoint_handler_copy_endpoint(v36);
        v345 = nw_endpoint_get_logging_description(v39);
        v40 = v36;
        v41 = v40;
        uint64_t v42 = v356[30];
        log = v34;
        if (v42 > 5) {
          int v43 = "unknown-state";
        }
        else {
          int v43 = off_1E523FB38[v42];
        }
        v343 = v43;
        nw_endpoint_t v340 = v39;
        unint64_t v48 = v35->id_str;

        v49 = v41;
        size_t v50 = v49;
        v51 = "path";
        switch(v358->mode)
        {
          case 0:
            break;
          case 1:
            v51 = "resolver";
            break;
          case 2:
            v51 = nw_endpoint_flow_mode_string(v49[31]);
            break;
          case 3:
            v51 = "proxy";
            break;
          case 4:
            v51 = "fallback";
            break;
          case 5:
            v51 = "transform";
            break;
          default:
            v51 = "unknown-mode";
            break;
        }

        v57 = v50;
        os_unfair_lock_lock((os_unfair_lock_t)v57 + 28);
        id v58 = v57[8];
        os_unfair_lock_unlock((os_unfair_lock_t)v57 + 28);

        id v59 = v58;
        v60 = v59;
        if (a3 > 0x1A) {
          BOOL v61 = "unknown";
        }
        else {
          BOOL v61 = off_1E5241E58[a3];
        }
        *(_DWORD *)buf = 136448002;
        v373 = "nw_flow_notify";
        __int16 v374 = 2082;
        v375 = v48;
        __int16 v376 = 2082;
        v377 = v349;
        __int16 v378 = 2082;
        v379 = v345;
        __int16 v380 = 2082;
        v381 = v343;
        __int16 v382 = 2082;
        v383 = v51;
        __int16 v384 = 2114;
        id v385 = v59;
        __int16 v386 = 2082;
        v387 = v61;
        v34 = log;
        _os_log_impl(&dword_1830D4000, log, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] received notification %{public}s", buf, 0x52u);
      }
    }

    uint64_t v13 = v359;
    __int16 v14 = (NWConcrete_nw_endpoint_handler *)v356;
    goto LABEL_57;
  }
LABEL_46:
}

void sub_1833C9698(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,void *a23)
{
  _Unwind_Resume(a1);
}

uint64_t nw_quic_connection_get_stream_path_affinity(void *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (nw_protocol_options_is_quic_connection(v1))
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    int v16 = 0;
    *(void *)&buf[16] = 0x2020000000;
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_quic_connection_get_stream_path_affinity_block_invoke;
    v12[3] = &unk_1E5248E90;
    v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    uint64_t v2 = *(unsigned int *)(*(void *)&buf[8] + 24);
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  uint64_t v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_quic_connection_get_stream_path_affinity";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      unint64_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_stream_path_affinity";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_options_is_quic_connection(options)", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      unint64_t v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_quic_connection_get_stream_path_affinity";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_stream_path_affinity";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      unint64_t v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_stream_path_affinity";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
  uint64_t v2 = 0;
LABEL_3:

  return v2;
}

void sub_1833C9CC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

uint64_t nw_quic_connection_get_max_udp_payload_size(void *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (nw_protocol_options_is_quic_connection(v1))
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000;
    __int16 v16 = 0;
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_quic_connection_get_max_udp_payload_size_block_invoke;
    v12[3] = &unk_1E5248E90;
    v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    uint64_t v2 = *(unsigned __int16 *)(*(void *)&buf[8] + 24);
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  uint64_t v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_quic_connection_get_max_udp_payload_size";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      unint64_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_max_udp_payload_size";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_options_is_quic_connection(options)", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      unint64_t v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_quic_connection_get_max_udp_payload_size";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_max_udp_payload_size";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      unint64_t v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_max_udp_payload_size";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
  uint64_t v2 = 0;
LABEL_3:

  return v2;
}

void sub_1833CA000(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

uint64_t nw_quic_connection_get_max_paths_per_interface(void *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (nw_protocol_options_is_quic_connection(v1))
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000;
    char v16 = 0;
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_quic_connection_get_max_paths_per_interface_block_invoke;
    v12[3] = &unk_1E5248E90;
    v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    uint64_t v2 = *(unsigned __int8 *)(*(void *)&buf[8] + 24);
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  uint64_t v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_quic_connection_get_max_paths_per_interface";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      unint64_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_max_paths_per_interface";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_options_is_quic_connection(options)", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      unint64_t v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_quic_connection_get_max_paths_per_interface";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_max_paths_per_interface";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      unint64_t v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_max_paths_per_interface";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
  uint64_t v2 = 0;
LABEL_3:

  return v2;
}

void sub_1833CA340(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

uint64_t nw_quic_connection_get_max_datagram_frame_size(void *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (nw_protocol_options_is_quic_connection(v1))
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000;
    __int16 v16 = 0;
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_quic_connection_get_max_datagram_frame_size_block_invoke;
    v12[3] = &unk_1E5248E90;
    v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    uint64_t v2 = *(unsigned __int16 *)(*(void *)&buf[8] + 24);
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  uint64_t v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_quic_connection_get_max_datagram_frame_size";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      unint64_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_max_datagram_frame_size";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_options_is_quic_connection(options)", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      unint64_t v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_quic_connection_get_max_datagram_frame_size";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_max_datagram_frame_size";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      unint64_t v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_max_datagram_frame_size";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
  uint64_t v2 = 0;
LABEL_3:

  return v2;
}

void sub_1833CA680(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

uint64_t nw_quic_connection_get_keepalive_count(void *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (nw_protocol_options_is_quic_connection(v1))
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000;
    __int16 v16 = 0;
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_quic_connection_get_keepalive_count_block_invoke;
    v12[3] = &unk_1E5248E90;
    v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    uint64_t v2 = *(unsigned __int16 *)(*(void *)&buf[8] + 24);
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  uint64_t v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_quic_connection_get_keepalive_count";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      unint64_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_keepalive_count";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_options_is_quic_connection(options)", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      unint64_t v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_quic_connection_get_keepalive_count";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_keepalive_count";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      unint64_t v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_keepalive_count";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
  uint64_t v2 = 0;
LABEL_3:

  return v2;
}

void sub_1833CA9C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

uint64_t nw_quic_connection_get_initial_packet_size(void *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (nw_protocol_options_is_quic_connection(v1))
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000;
    __int16 v16 = 0;
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_quic_connection_get_initial_packet_size_block_invoke;
    v12[3] = &unk_1E5248E90;
    v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    uint64_t v2 = *(unsigned __int16 *)(*(void *)&buf[8] + 24);
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  uint64_t v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_quic_connection_get_initial_packet_size";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      unint64_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_initial_packet_size";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_options_is_quic_connection(options)", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      unint64_t v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_quic_connection_get_initial_packet_size";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_initial_packet_size";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      unint64_t v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_initial_packet_size";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
  uint64_t v2 = 0;
LABEL_3:

  return v2;
}

void sub_1833CAD00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

uint64_t nw_quic_connection_get_initial_max_streams_unidirectional(void *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (nw_protocol_options_is_quic_connection(v1))
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000;
    uint64_t v16 = 0;
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_quic_connection_get_initial_max_streams_unidirectional_block_invoke;
    v12[3] = &unk_1E5248E90;
    v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    uint64_t v2 = *(void *)(*(void *)&buf[8] + 24);
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  uint64_t v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_quic_connection_get_initial_max_streams_unidirectional";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      unint64_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_initial_max_streams_unidirectional";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_options_is_quic_connection(options)", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      unint64_t v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_quic_connection_get_initial_max_streams_unidirectional";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_initial_max_streams_unidirectional";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      unint64_t v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_initial_max_streams_unidirectional";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
  uint64_t v2 = 0;
LABEL_3:

  return v2;
}

void sub_1833CB040(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

uint64_t nw_quic_connection_get_initial_max_streams_bidirectional(void *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (nw_protocol_options_is_quic_connection(v1))
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000;
    uint64_t v16 = 0;
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_quic_connection_get_initial_max_streams_bidirectional_block_invoke;
    v12[3] = &unk_1E5248E90;
    v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    uint64_t v2 = *(void *)(*(void *)&buf[8] + 24);
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  uint64_t v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_quic_connection_get_initial_max_streams_bidirectional";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      unint64_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_initial_max_streams_bidirectional";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_options_is_quic_connection(options)", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      unint64_t v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_quic_connection_get_initial_max_streams_bidirectional";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_initial_max_streams_bidirectional";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      unint64_t v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_initial_max_streams_bidirectional";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
  uint64_t v2 = 0;
LABEL_3:

  return v2;
}

void sub_1833CB380(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

uint64_t nw_quic_connection_get_initial_max_stream_data_unidirectional(void *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (nw_protocol_options_is_quic_connection(v1))
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000;
    uint64_t v16 = 0;
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_quic_connection_get_initial_max_stream_data_unidirectional_block_invoke;
    v12[3] = &unk_1E5248E90;
    v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    uint64_t v2 = *(void *)(*(void *)&buf[8] + 24);
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  uint64_t v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_quic_connection_get_initial_max_stream_data_unidirectional";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      unint64_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_initial_max_stream_data_unidirectional";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_options_is_quic_connection(options)", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      unint64_t v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_quic_connection_get_initial_max_stream_data_unidirectional";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_initial_max_stream_data_unidirectional";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      unint64_t v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_initial_max_stream_data_unidirectional";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
  uint64_t v2 = 0;
LABEL_3:

  return v2;
}

void sub_1833CB6C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

uint64_t nw_quic_connection_get_initial_max_stream_data_bidirectional_remote(void *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (nw_protocol_options_is_quic_connection(v1))
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000;
    uint64_t v16 = 0;
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_quic_connection_get_initial_max_stream_data_bidirectional_remote_block_invoke;
    v12[3] = &unk_1E5248E90;
    v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    uint64_t v2 = *(void *)(*(void *)&buf[8] + 24);
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  uint64_t v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_quic_connection_get_initial_max_stream_data_bidirectional_remote";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      unint64_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_initial_max_stream_data_bidirectional_remote";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_options_is_quic_connection(options)", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      unint64_t v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_quic_connection_get_initial_max_stream_data_bidirectional_remote";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_initial_max_stream_data_bidirectional_remote";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      unint64_t v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_initial_max_stream_data_bidirectional_remote";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
  uint64_t v2 = 0;
LABEL_3:

  return v2;
}

void sub_1833CBA00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

uint64_t nw_quic_connection_get_initial_max_stream_data_bidirectional_local(void *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (nw_protocol_options_is_quic_connection(v1))
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000;
    uint64_t v16 = 0;
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_quic_connection_get_initial_max_stream_data_bidirectional_local_block_invoke;
    v12[3] = &unk_1E5248E90;
    v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    uint64_t v2 = *(void *)(*(void *)&buf[8] + 24);
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  uint64_t v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_quic_connection_get_initial_max_stream_data_bidirectional_local";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      unint64_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_initial_max_stream_data_bidirectional_local";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_options_is_quic_connection(options)", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      unint64_t v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_quic_connection_get_initial_max_stream_data_bidirectional_local";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_initial_max_stream_data_bidirectional_local";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      unint64_t v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_initial_max_stream_data_bidirectional_local";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
  uint64_t v2 = 0;
LABEL_3:

  return v2;
}

void sub_1833CBD40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

uint64_t nw_quic_connection_get_initial_max_data(void *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (nw_protocol_options_is_quic_connection(v1))
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000;
    uint64_t v16 = 0;
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_quic_connection_get_initial_max_data_block_invoke;
    v12[3] = &unk_1E5248E90;
    v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    uint64_t v2 = *(void *)(*(void *)&buf[8] + 24);
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  uint64_t v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_quic_connection_get_initial_max_data";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      unint64_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_initial_max_data";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_options_is_quic_connection(options)", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      unint64_t v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_quic_connection_get_initial_max_data";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_initial_max_data";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      unint64_t v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_initial_max_data";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
  uint64_t v2 = 0;
LABEL_3:

  return v2;
}

void sub_1833CC080(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

uint64_t nw_quic_connection_get_idle_timeout(void *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (nw_protocol_options_is_quic_connection(v1))
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    int v16 = 0;
    *(void *)&buf[16] = 0x2020000000;
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_quic_connection_get_idle_timeout_block_invoke;
    v12[3] = &unk_1E5248E90;
    v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    uint64_t v2 = *(unsigned int *)(*(void *)&buf[8] + 24);
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  uint64_t v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_quic_connection_get_idle_timeout";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      unint64_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_idle_timeout";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_options_is_quic_connection(options)", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      unint64_t v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_quic_connection_get_idle_timeout";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_idle_timeout";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      unint64_t v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_idle_timeout";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
  uint64_t v2 = 0;
LABEL_3:

  return v2;
}

void sub_1833CC3C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

uint64_t nw_quic_connection_get_ack_delay_size(void *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (nw_protocol_options_is_quic_connection(v1))
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000;
    char v16 = 0;
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_quic_connection_get_ack_delay_size_block_invoke;
    v12[3] = &unk_1E5248E90;
    v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    uint64_t v2 = *(unsigned __int8 *)(*(void *)&buf[8] + 24);
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  uint64_t v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_quic_connection_get_ack_delay_size";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      unint64_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_ack_delay_size";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_options_is_quic_connection(options)", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      unint64_t v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_quic_connection_get_ack_delay_size";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_ack_delay_size";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      unint64_t v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_ack_delay_size";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
  uint64_t v2 = 0;
LABEL_3:

  return v2;
}

void sub_1833CC700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

void nw_protocol_http2_transport_disconnected(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    handle = a1->handle;
    if (handle)
    {
      if (gLogDatapath)
      {
        char v16 = __nwlog_obj();
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v29 = "nw_protocol_http2_transport_disconnected";
          __int16 v30 = 2082;
          __int16 v31 = (char *)handle + 205;
          _os_log_impl(&dword_1830D4000, v16, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s called", buf, 0x16u);
        }
      }
      nw_protocol_remove_instance((uint64_t)a1);
      uint64_t v4 = handle[13];
      if (!v4) {
        goto LABEL_8;
      }
      if (*(void *)v4)
      {
        uint64_t v5 = *(void (**)(void))(*(void *)v4 + 8);
        if (v5)
        {
          v5();
LABEL_8:
          nw_http2_transport_connection_close((uint64_t)handle);
          return;
        }
      }
      __nwlog_obj();
      unint64_t v6 = (char *)handle[13];
      *(_DWORD *)buf = 136446466;
      uint64_t v29 = "nw_protocol_http2_transport_disconnected";
      __int16 v30 = 2048;
      __int16 v31 = v6;
      os_log_type_t v7 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v26 = 0;
      if (__nwlog_fault(v7, &type, &v26))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          os_log_type_t v8 = __nwlog_obj();
          os_log_type_t v9 = type;
          if (!os_log_type_enabled(v8, type)) {
            goto LABEL_49;
          }
          BOOL v10 = (char *)handle[13];
          *(_DWORD *)buf = 136446466;
          uint64_t v29 = "nw_protocol_http2_transport_disconnected";
          __int16 v30 = 2048;
          __int16 v31 = v10;
          os_log_type_t v11 = "%{public}s listen protocol (%p) has invalid disconnected callback";
          goto LABEL_48;
        }
        if (!v26)
        {
          os_log_type_t v8 = __nwlog_obj();
          os_log_type_t v9 = type;
          if (!os_log_type_enabled(v8, type)) {
            goto LABEL_49;
          }
          unint64_t v24 = (char *)handle[13];
          *(_DWORD *)buf = 136446466;
          uint64_t v29 = "nw_protocol_http2_transport_disconnected";
          __int16 v30 = 2048;
          __int16 v31 = v24;
          os_log_type_t v11 = "%{public}s listen protocol (%p) has invalid disconnected callback, backtrace limit exceeded";
          goto LABEL_48;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v8 = __nwlog_obj();
        os_log_type_t v9 = type;
        BOOL v18 = os_log_type_enabled(v8, type);
        if (backtrace_string)
        {
          if (v18)
          {
            uint64_t v19 = (char *)handle[13];
            *(_DWORD *)buf = 136446722;
            uint64_t v29 = "nw_protocol_http2_transport_disconnected";
            __int16 v30 = 2048;
            __int16 v31 = v19;
            __int16 v32 = 2082;
            char v33 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s listen protocol (%p) has invalid disconnected callback, dumping backtrace:%{public}s", buf, 0x20u);
          }
          free(backtrace_string);
          goto LABEL_49;
        }
        if (v18)
        {
          nw_endpoint_t v25 = (char *)handle[13];
          *(_DWORD *)buf = 136446466;
          uint64_t v29 = "nw_protocol_http2_transport_disconnected";
          __int16 v30 = 2048;
          __int16 v31 = v25;
          os_log_type_t v11 = "%{public}s listen protocol (%p) has invalid disconnected callback, no backtrace";
LABEL_48:
          _os_log_impl(&dword_1830D4000, v8, v9, v11, buf, 0x16u);
        }
      }
LABEL_49:
      if (v7) {
        free(v7);
      }
      goto LABEL_8;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v29 = "nw_protocol_http2_transport_disconnected";
    char v12 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (__nwlog_fault(v12, &type, &v26))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        char v13 = __nwlog_obj();
        os_log_type_t v14 = type;
        if (!os_log_type_enabled(v13, type)) {
          goto LABEL_56;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v29 = "nw_protocol_http2_transport_disconnected";
        unint64_t v15 = "%{public}s called with null http2_transport";
        goto LABEL_55;
      }
      if (!v26)
      {
        char v13 = __nwlog_obj();
        os_log_type_t v14 = type;
        if (!os_log_type_enabled(v13, type)) {
          goto LABEL_56;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v29 = "nw_protocol_http2_transport_disconnected";
        unint64_t v15 = "%{public}s called with null http2_transport, backtrace limit exceeded";
        goto LABEL_55;
      }
      BOOL v22 = (char *)__nw_create_backtrace_string();
      char v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      BOOL v23 = os_log_type_enabled(v13, type);
      if (v22)
      {
        if (v23)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v29 = "nw_protocol_http2_transport_disconnected";
          __int16 v30 = 2082;
          __int16 v31 = v22;
          _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s called with null http2_transport, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v22);
        if (v12) {
          goto LABEL_57;
        }
        return;
      }
      if (v23)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v29 = "nw_protocol_http2_transport_disconnected";
        unint64_t v15 = "%{public}s called with null http2_transport, no backtrace";
LABEL_55:
        _os_log_impl(&dword_1830D4000, v13, v14, v15, buf, 0xCu);
      }
    }
  }
  else
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v29 = "nw_protocol_http2_transport_disconnected";
    char v12 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (!__nwlog_fault(v12, &type, &v26)) {
      goto LABEL_56;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (!os_log_type_enabled(v13, type)) {
        goto LABEL_56;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v29 = "nw_protocol_http2_transport_disconnected";
      unint64_t v15 = "%{public}s called with null protocol";
      goto LABEL_55;
    }
    if (!v26)
    {
      char v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (!os_log_type_enabled(v13, type)) {
        goto LABEL_56;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v29 = "nw_protocol_http2_transport_disconnected";
      unint64_t v15 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_55;
    }
    uint64_t v20 = (char *)__nw_create_backtrace_string();
    char v13 = __nwlog_obj();
    os_log_type_t v14 = type;
    BOOL v21 = os_log_type_enabled(v13, type);
    if (!v20)
    {
      if (!v21) {
        goto LABEL_56;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v29 = "nw_protocol_http2_transport_disconnected";
      unint64_t v15 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_55;
    }
    if (v21)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v29 = "nw_protocol_http2_transport_disconnected";
      __int16 v30 = 2082;
      __int16 v31 = v20;
      _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v20);
  }
LABEL_56:
  if (v12) {
LABEL_57:
  }
    free(v12);
}

void ___ZL45nw_webtransport_session_add_to_http_messagingP23nw_webtransport_sessionP11nw_protocolS2__block_invoke(void *a1, void *a2)
{
  uint64_t v2 = a2;
  if (*(unsigned char *)(*(void *)(a1[4] + 8) + 24))
  {
    if (!*(void *)(*(void *)(a1[5] + 8) + 40) && nw_protocol_options_is_http_messaging(a2))
    {
      if (v2) {
        uint64_t v2 = os_retain(v2);
      }
      uint64_t v4 = *(void *)(a1[5] + 8);
      char v5 = *(unsigned char *)(v4 + 48);
      if (v5)
      {
        unint64_t v6 = *(void **)(v4 + 40);
        if (v6)
        {
          os_release(v6);
          char v5 = *(unsigned char *)(v4 + 48);
        }
      }
      *(void *)(v4 + 40) = v2;
      *(unsigned char *)(v4 + 48) = v5 | 1;
    }
  }
  else if (nw_protocol_options_get_protocol_handle(a2) == a1[6])
  {
    *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = 1;
  }
}

BOOL nw_quic_connection_get_use_swift_tls(void *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (nw_protocol_options_is_quic_connection(v1))
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000;
    char v16 = 0;
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_quic_connection_get_use_swift_tls_block_invoke;
    v12[3] = &unk_1E5248E90;
    v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    BOOL v2 = *(unsigned char *)(*(void *)&buf[8] + 24) != 0;
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  uint64_t v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_quic_connection_get_use_swift_tls";
  char v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      unint64_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_use_swift_tls";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_options_is_quic_connection(options)", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      unint64_t v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_quic_connection_get_use_swift_tls";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_use_swift_tls";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      unint64_t v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_use_swift_tls";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
  BOOL v2 = 0;
LABEL_3:

  return v2;
}

void sub_1833CD160(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

BOOL nw_quic_connection_get_probe_simultaneously(void *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (nw_protocol_options_is_quic_connection(v1))
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000;
    char v16 = 0;
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_quic_connection_get_probe_simultaneously_block_invoke;
    v12[3] = &unk_1E5248E90;
    v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    BOOL v2 = *(unsigned char *)(*(void *)&buf[8] + 24) != 0;
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  uint64_t v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_quic_connection_get_probe_simultaneously";
  char v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      unint64_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_probe_simultaneously";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_options_is_quic_connection(options)", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      unint64_t v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_quic_connection_get_probe_simultaneously";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_probe_simultaneously";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      unint64_t v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_probe_simultaneously";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
  BOOL v2 = 0;
LABEL_3:

  return v2;
}

void sub_1833CD4A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

BOOL nw_quic_connection_get_force_version_negotiation(void *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (nw_protocol_options_is_quic_connection(v1))
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000;
    char v16 = 0;
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_quic_connection_get_force_version_negotiation_block_invoke;
    v12[3] = &unk_1E5248E90;
    v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    BOOL v2 = *(unsigned char *)(*(void *)&buf[8] + 24) != 0;
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  uint64_t v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_quic_connection_get_force_version_negotiation";
  char v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      unint64_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_force_version_negotiation";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_options_is_quic_connection(options)", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      unint64_t v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_quic_connection_get_force_version_negotiation";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_force_version_negotiation";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      unint64_t v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_force_version_negotiation";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
  BOOL v2 = 0;
LABEL_3:

  return v2;
}

void sub_1833CD7F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

BOOL nw_quic_connection_get_enable_multipath(void *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (nw_protocol_options_is_quic_connection(v1))
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000;
    char v16 = 0;
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_quic_connection_get_enable_multipath_block_invoke;
    v12[3] = &unk_1E5248E90;
    v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    BOOL v2 = *(unsigned char *)(*(void *)&buf[8] + 24) != 0;
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  uint64_t v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_quic_connection_get_enable_multipath";
  char v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      unint64_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_enable_multipath";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_options_is_quic_connection(options)", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      unint64_t v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_quic_connection_get_enable_multipath";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_enable_multipath";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      unint64_t v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_enable_multipath";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
  BOOL v2 = 0;
LABEL_3:

  return v2;
}

void sub_1833CDB38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

BOOL nw_quic_connection_get_disable_spin_bit(void *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (nw_protocol_options_is_quic_connection(v1))
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000;
    char v16 = 0;
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_quic_connection_get_disable_spin_bit_block_invoke;
    v12[3] = &unk_1E5248E90;
    v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    BOOL v2 = *(unsigned char *)(*(void *)&buf[8] + 24) != 0;
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  uint64_t v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_quic_connection_get_disable_spin_bit";
  char v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      unint64_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_disable_spin_bit";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_options_is_quic_connection(options)", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      unint64_t v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_quic_connection_get_disable_spin_bit";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_disable_spin_bit";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      unint64_t v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_disable_spin_bit";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
  BOOL v2 = 0;
LABEL_3:

  return v2;
}

void sub_1833CDE80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

BOOL nw_quic_connection_get_disable_ecn_echo(void *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (nw_protocol_options_is_quic_connection(v1))
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000;
    char v16 = 0;
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_quic_connection_get_disable_ecn_echo_block_invoke;
    v12[3] = &unk_1E5248E90;
    v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    BOOL v2 = *(unsigned char *)(*(void *)&buf[8] + 24) != 0;
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  uint64_t v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_quic_connection_get_disable_ecn_echo";
  char v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      unint64_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_disable_ecn_echo";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_options_is_quic_connection(options)", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      unint64_t v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_quic_connection_get_disable_ecn_echo";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_disable_ecn_echo";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      unint64_t v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_disable_ecn_echo";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
  BOOL v2 = 0;
LABEL_3:

  return v2;
}

void sub_1833CE1C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

BOOL nw_quic_connection_get_disable_ecn(void *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (nw_protocol_options_is_quic_connection(v1))
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000;
    char v16 = 0;
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_quic_connection_get_disable_ecn_block_invoke;
    v12[3] = &unk_1E5248E90;
    v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    BOOL v2 = *(unsigned char *)(*(void *)&buf[8] + 24) != 0;
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  uint64_t v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_quic_connection_get_disable_ecn";
  char v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      unint64_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_disable_ecn";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_options_is_quic_connection(options)", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      unint64_t v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_quic_connection_get_disable_ecn";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_disable_ecn";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      unint64_t v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_disable_ecn";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
  BOOL v2 = 0;
LABEL_3:

  return v2;
}

void sub_1833CE510(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

BOOL nw_quic_connection_get_datagram_variant_flow_id_enabled(void *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (nw_protocol_options_is_quic_connection(v1))
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000;
    char v16 = 0;
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_quic_connection_get_datagram_variant_flow_id_enabled_block_invoke;
    v12[3] = &unk_1E5248E90;
    v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    BOOL v2 = *(unsigned char *)(*(void *)&buf[8] + 24) != 0;
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  uint64_t v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_quic_connection_get_datagram_variant_flow_id_enabled";
  char v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      unint64_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_datagram_variant_flow_id_enabled";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_options_is_quic_connection(options)", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      unint64_t v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_quic_connection_get_datagram_variant_flow_id_enabled";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_datagram_variant_flow_id_enabled";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      unint64_t v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_datagram_variant_flow_id_enabled";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
  BOOL v2 = 0;
LABEL_3:

  return v2;
}

void sub_1833CE858(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

BOOL nw_quic_connection_get_datagram_quarter_stream_id(void *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (nw_protocol_options_is_quic_connection(v1))
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000;
    char v16 = 0;
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_quic_connection_get_datagram_quarter_stream_id_block_invoke;
    v12[3] = &unk_1E5248E90;
    v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    BOOL v2 = *(unsigned char *)(*(void *)&buf[8] + 24) != 0;
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  uint64_t v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_quic_connection_get_datagram_quarter_stream_id";
  char v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      unint64_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_datagram_quarter_stream_id";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_options_is_quic_connection(options)", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      unint64_t v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_quic_connection_get_datagram_quarter_stream_id";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_datagram_quarter_stream_id";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      unint64_t v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_datagram_quarter_stream_id";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
  BOOL v2 = 0;
LABEL_3:

  return v2;
}

void sub_1833CEBA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

BOOL nw_quic_connection_get_datagram_context_id(void *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (nw_protocol_options_is_quic_connection(v1))
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000;
    char v16 = 0;
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_quic_connection_get_datagram_context_id_block_invoke;
    v12[3] = &unk_1E5248E90;
    v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    BOOL v2 = *(unsigned char *)(*(void *)&buf[8] + 24) != 0;
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  uint64_t v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_quic_connection_get_datagram_context_id";
  char v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      unint64_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_datagram_context_id";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_options_is_quic_connection(options)", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      unint64_t v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_quic_connection_get_datagram_context_id";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_datagram_context_id";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      unint64_t v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_datagram_context_id";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
  BOOL v2 = 0;
LABEL_3:

  return v2;
}

void sub_1833CEEE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

void nw_protocol_instance_process_external_input(void *a1, void *a2)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1;
  uint64_t v4 = a2;
  char v5 = v4;
  if (!v3)
  {
    char v16 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v33 = "nw_protocol_instance_process_external_input";
    uint64_t v17 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v30 = 0;
    if (!__nwlog_fault(v17, &type, &v30)) {
      goto LABEL_62;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v18 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)buf = 136446210;
        char v33 = "nw_protocol_instance_process_external_input";
        _os_log_impl(&dword_1830D4000, v18, v19, "%{public}s called with null instance", buf, 0xCu);
      }
    }
    else if (v30)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v18 = __nwlog_obj();
      os_log_type_t v23 = type;
      BOOL v24 = os_log_type_enabled(v18, type);
      if (backtrace_string)
      {
        if (v24)
        {
          *(_DWORD *)buf = 136446466;
          char v33 = "nw_protocol_instance_process_external_input";
          __int16 v34 = 2082;
          uint64_t v35 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v18, v23, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_62:
        if (!v17) {
          goto LABEL_28;
        }
LABEL_63:
        free(v17);
        goto LABEL_28;
      }
      if (v24)
      {
        *(_DWORD *)buf = 136446210;
        char v33 = "nw_protocol_instance_process_external_input";
        _os_log_impl(&dword_1830D4000, v18, v23, "%{public}s called with null instance, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v18 = __nwlog_obj();
      os_log_type_t v28 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)buf = 136446210;
        char v33 = "nw_protocol_instance_process_external_input";
        _os_log_impl(&dword_1830D4000, v18, v28, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_61:

    goto LABEL_62;
  }
  if (v4)
  {
    char v6 = v3[403];
    if ((v6 & 0x10) == 0 || (char)v3[405] < 0) {
      goto LABEL_25;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v7 = (id)gLogObj;
    *(_DWORD *)buf = 136446722;
    char v33 = "nw_protocol_instance_process_external_input";
    __int16 v34 = 2082;
    uint64_t v35 = v3 + 407;
    __int16 v36 = 2080;
    char v37 = " ";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v30 = 0;
    if (__nwlog_fault(v8, &type, &v30))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v9 = (id)gLogObj;
        os_log_type_t v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446722;
          char v33 = "nw_protocol_instance_process_external_input";
          __int16 v34 = 2082;
          uint64_t v35 = v3 + 407;
          __int16 v36 = 2080;
          char v37 = " ";
          _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s %{public}s%snested nw_protocol_instance_process_external_input", buf, 0x20u);
        }
      }
      else if (v30)
      {
        os_log_type_t v11 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v9 = (id)gLogObj;
        os_log_type_t v12 = type;
        BOOL v13 = os_log_type_enabled(v9, type);
        if (v11)
        {
          if (v13)
          {
            *(_DWORD *)buf = 136446978;
            char v33 = "nw_protocol_instance_process_external_input";
            __int16 v34 = 2082;
            uint64_t v35 = v3 + 407;
            __int16 v36 = 2080;
            char v37 = " ";
            __int16 v38 = 2082;
            nw_endpoint_t v39 = v11;
            _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s %{public}s%snested nw_protocol_instance_process_external_input, dumping backtrace:%{public}s", buf, 0x2Au);
          }

          free(v11);
          if (!v8) {
            goto LABEL_24;
          }
          goto LABEL_23;
        }
        if (v13)
        {
          *(_DWORD *)buf = 136446722;
          char v33 = "nw_protocol_instance_process_external_input";
          __int16 v34 = 2082;
          uint64_t v35 = v3 + 407;
          __int16 v36 = 2080;
          char v37 = " ";
          _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s %{public}s%snested nw_protocol_instance_process_external_input, no backtrace", buf, 0x20u);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v9 = (id)gLogObj;
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446722;
          char v33 = "nw_protocol_instance_process_external_input";
          __int16 v34 = 2082;
          uint64_t v35 = v3 + 407;
          __int16 v36 = 2080;
          char v37 = " ";
          _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s %{public}s%snested nw_protocol_instance_process_external_input, backtrace limit exceeded", buf, 0x20u);
        }
      }
    }
    if (!v8)
    {
LABEL_24:
      char v6 = v3[403];
LABEL_25:
      v3[403] = v6 | 0x10;
      unint64_t v15 = *(void (**)(unsigned char *))(*(void *)(*((void *)v3 + 1) + 80) + 80);
      if (v15) {
        v15(v3);
      }
      v5[2](v5);
      nw_protocol_instance_flush_batched_input_internal((NWConcrete_nw_protocol_instance *)v3);
      goto LABEL_28;
    }
LABEL_23:
    free(v8);
    goto LABEL_24;
  }
  uint64_t v20 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v33 = "nw_protocol_instance_process_external_input";
  uint64_t v17 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v30 = 0;
  if (!__nwlog_fault(v17, &type, &v30)) {
    goto LABEL_62;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    BOOL v18 = __nwlog_obj();
    os_log_type_t v21 = type;
    if (os_log_type_enabled(v18, type))
    {
      *(_DWORD *)buf = 136446210;
      char v33 = "nw_protocol_instance_process_external_input";
      _os_log_impl(&dword_1830D4000, v18, v21, "%{public}s called with null block", buf, 0xCu);
    }
    goto LABEL_61;
  }
  if (!v30)
  {
    BOOL v18 = __nwlog_obj();
    os_log_type_t v29 = type;
    if (os_log_type_enabled(v18, type))
    {
      *(_DWORD *)buf = 136446210;
      char v33 = "nw_protocol_instance_process_external_input";
      _os_log_impl(&dword_1830D4000, v18, v29, "%{public}s called with null block, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_61;
  }
  nw_endpoint_t v25 = (char *)__nw_create_backtrace_string();
  BOOL v18 = __nwlog_obj();
  os_log_type_t v26 = type;
  BOOL v27 = os_log_type_enabled(v18, type);
  if (!v25)
  {
    if (v27)
    {
      *(_DWORD *)buf = 136446210;
      char v33 = "nw_protocol_instance_process_external_input";
      _os_log_impl(&dword_1830D4000, v18, v26, "%{public}s called with null block, no backtrace", buf, 0xCu);
    }
    goto LABEL_61;
  }
  if (v27)
  {
    *(_DWORD *)buf = 136446466;
    char v33 = "nw_protocol_instance_process_external_input";
    __int16 v34 = 2082;
    uint64_t v35 = v25;
    _os_log_impl(&dword_1830D4000, v18, v26, "%{public}s called with null block, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v25);
  if (v17) {
    goto LABEL_63;
  }
LABEL_28:
}

void sub_1833CF708(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_protocol_instance_ignore_future_path_changes(void *a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  BOOL v2 = v1;
  if (v1)
  {
    char v3 = v1[405];
    if ((v3 & 4) == 0)
    {
      if ((v1[405] & 0x80) == 0)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v4 = (id)gLogObj;
        if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136446722;
          char v16 = "nw_protocol_instance_ignore_future_path_changes";
          __int16 v17 = 2082;
          BOOL v18 = v2 + 407;
          __int16 v19 = 2080;
          uint64_t v20 = " ";
          _os_log_impl(&dword_1830D4000, v4, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}s%sIgnoring future path changes for protocol", buf, 0x20u);
        }

        char v3 = v2[405];
      }
      v2[405] = v3 | 4;
    }
    goto LABEL_8;
  }
  char v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v16 = "nw_protocol_instance_ignore_future_path_changes";
  char v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_protocol_instance_ignore_future_path_changes";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null instance", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          char v16 = "nw_protocol_instance_ignore_future_path_changes";
          __int16 v17 = 2082;
          BOOL v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_25;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_protocol_instance_ignore_future_path_changes";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null instance, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_protocol_instance_ignore_future_path_changes";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_25:
  if (v6) {
    free(v6);
  }
LABEL_8:
}

void nw_parameters_set_source_application(void *a1, long long *a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  char v3 = a1;
  uint64_t v4 = v3;
  if (v3)
  {
    long long v5 = *a2;
    *(_OWORD *)(v3 + 56) = a2[1];
    *(_OWORD *)(v3 + 40) = v5;
    int v6 = *((_DWORD *)a2 + 5);
    *(_DWORD *)(*((void *)v3 + 13) + 64) = v6;
    *(_DWORD *)(*((void *)v3 + 13) + 68) = *((_DWORD *)a2 + 1);
    uint64_t v24 = 0;
    memset(buffer, 0, sizeof(buffer));
    int v7 = proc_pidinfo(v6, 17, 1uLL, buffer, 56);
    uint64_t v8 = v4[12];
    if (v7 == 56)
    {
      v4[12] = v8 & 0xFFFFFFFFFFFFDFFFLL;
      *(_OWORD *)(v4[13] + 24) = buffer[0];
    }
    else
    {
      v4[12] = v8 | 0x2000;
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v9 = (id)gLogObj;
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v20 = "nw_parameters_set_source_application";
        __int16 v21 = 1024;
        int v22 = v6;
        _os_log_impl(&dword_1830D4000, v9, OS_LOG_TYPE_ERROR, "%{public}s Failed to convert from PID (%d) to UUID. This could lead to incorrect policies and accounting.", buf, 0x12u);
      }
    }
    goto LABEL_7;
  }
  os_log_type_t v10 = __nwlog_obj();
  LODWORD(buffer[0]) = 136446210;
  *(void *)((char *)buffer + 4) = "nw_parameters_set_source_application";
  BOOL v11 = (char *)_os_log_send_and_compose_impl();

  buf[0] = 16;
  char v18 = 0;
  if (__nwlog_fault(v11, buf, &v18))
  {
    if (buf[0] == 17)
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v13 = buf[0];
      if (os_log_type_enabled(v12, (os_log_type_t)buf[0]))
      {
        LODWORD(buffer[0]) = 136446210;
        *(void *)((char *)buffer + 4) = "nw_parameters_set_source_application";
        _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s called with null parameters", (uint8_t *)buffer, 0xCu);
      }
    }
    else if (v18)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v15 = buf[0];
      BOOL v16 = os_log_type_enabled(v12, (os_log_type_t)buf[0]);
      if (backtrace_string)
      {
        if (v16)
        {
          LODWORD(buffer[0]) = 136446466;
          *(void *)((char *)buffer + 4) = "nw_parameters_set_source_application";
          WORD6(buffer[0]) = 2082;
          *(void *)((char *)buffer + 14) = backtrace_string;
          _os_log_impl(&dword_1830D4000, v12, v15, "%{public}s called with null parameters, dumping backtrace:%{public}s", (uint8_t *)buffer, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_24;
      }
      if (v16)
      {
        LODWORD(buffer[0]) = 136446210;
        *(void *)((char *)buffer + 4) = "nw_parameters_set_source_application";
        _os_log_impl(&dword_1830D4000, v12, v15, "%{public}s called with null parameters, no backtrace", (uint8_t *)buffer, 0xCu);
      }
    }
    else
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v17 = buf[0];
      if (os_log_type_enabled(v12, (os_log_type_t)buf[0]))
      {
        LODWORD(buffer[0]) = 136446210;
        *(void *)((char *)buffer + 4) = "nw_parameters_set_source_application";
        _os_log_impl(&dword_1830D4000, v12, v17, "%{public}s called with null parameters, backtrace limit exceeded", (uint8_t *)buffer, 0xCu);
      }
    }
  }
LABEL_24:
  if (v11) {
    free(v11);
  }
LABEL_7:
}

void sub_1833CFDF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t on_frame_recv_callback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v76 = *MEMORY[0x1E4F143B8];
  if (!a3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v68 = "on_frame_recv_callback";
    BOOL v27 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v65 = 0;
    if (__nwlog_fault(v27, &type, &v65))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v28 = __nwlog_obj();
        os_log_type_t v29 = type;
        if (os_log_type_enabled(v28, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v68 = "on_frame_recv_callback";
          char v30 = "%{public}s nghttp2 user data is NULL, not http2_transport";
LABEL_65:
          _os_log_impl(&dword_1830D4000, v28, v29, v30, buf, 0xCu);
        }
      }
      else if (v65)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v28 = __nwlog_obj();
        os_log_type_t v29 = type;
        BOOL v33 = os_log_type_enabled(v28, type);
        if (backtrace_string)
        {
          if (v33)
          {
            *(_DWORD *)buf = 136446466;
            __int16 v68 = "on_frame_recv_callback";
            __int16 v69 = 2082;
            uint64_t v70 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v28, v29, "%{public}s nghttp2 user data is NULL, not http2_transport, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(backtrace_string);
          goto LABEL_66;
        }
        if (v33)
        {
          *(_DWORD *)buf = 136446210;
          __int16 v68 = "on_frame_recv_callback";
          char v30 = "%{public}s nghttp2 user data is NULL, not http2_transport, no backtrace";
          goto LABEL_65;
        }
      }
      else
      {
        os_log_type_t v28 = __nwlog_obj();
        os_log_type_t v29 = type;
        if (os_log_type_enabled(v28, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v68 = "on_frame_recv_callback";
          char v30 = "%{public}s nghttp2 user data is NULL, not http2_transport, backtrace limit exceeded";
          goto LABEL_65;
        }
      }
    }
LABEL_66:
    if (v27) {
      free(v27);
    }
    return 4294966394;
  }
  if (gLogDatapath)
  {
    __int16 v31 = __nwlog_obj();
    if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446466;
      __int16 v68 = "on_frame_recv_callback";
      __int16 v69 = 2082;
      uint64_t v70 = (char *)(a3 + 205);
      _os_log_impl(&dword_1830D4000, v31, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s called", buf, 0x16u);
    }
  }
  uint64_t result = 0;
  switch(*(unsigned char *)(a2 + 12))
  {
    case 0:
      if (gLogDatapath)
      {
        uint64_t v42 = __nwlog_obj();
        if (os_log_type_enabled(v42, OS_LOG_TYPE_DEBUG))
        {
          int v43 = *(_DWORD *)(a2 + 8);
          *(_DWORD *)buf = 136446722;
          __int16 v68 = "on_frame_recv_callback";
          __int16 v69 = 2082;
          uint64_t v70 = (char *)(a3 + 205);
          __int16 v71 = 1024;
          *(_DWORD *)v72 = v43;
          _os_log_impl(&dword_1830D4000, v42, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s received a complete DATA frame on stream %d", buf, 0x1Cu);
        }
      }
      if ((*(unsigned char *)(a2 + 13) & 1) == 0) {
        return 0;
      }
      if (gLogDatapath)
      {
        v55 = __nwlog_obj();
        if (os_log_type_enabled(v55, OS_LOG_TYPE_DEBUG))
        {
          int v56 = *(_DWORD *)(a2 + 8);
          *(_DWORD *)buf = 136446722;
          __int16 v68 = "on_frame_recv_callback";
          __int16 v69 = 2082;
          uint64_t v70 = (char *)(a3 + 205);
          __int16 v71 = 1024;
          *(_DWORD *)v72 = v56;
          _os_log_impl(&dword_1830D4000, v55, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s end stream flag detected, delivering input_finished for stream %d", buf, 0x1Cu);
        }
      }
      uint64_t protocol_from_stream_id = nw_http2_transport_get_protocol_from_stream_id(a3, *(_DWORD *)(a2 + 8));
      if (protocol_from_stream_id)
      {
        uint64_t v7 = *(void *)(protocol_from_stream_id + 24);
        if (v7)
        {
          uint64_t v8 = *(void (**)(void))(v7 + 184);
          if (v8) {
            goto LABEL_10;
          }
        }
        uint64_t v47 = protocol_from_stream_id;
        __nwlog_obj();
        uint64_t v48 = a3 + 205;
        int v49 = *(_DWORD *)(a2 + 8);
        *(_DWORD *)buf = 136446978;
        __int16 v68 = "on_frame_recv_callback";
        __int16 v69 = 2082;
        uint64_t v70 = (char *)(a3 + 205);
        __int16 v71 = 2048;
        uint64_t v64 = v47;
        *(void *)v72 = v47;
        *(_WORD *)&v72[8] = 1024;
        int v73 = v49;
        char v37 = (char *)_os_log_send_and_compose_impl();
        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v65 = 0;
        if (!__nwlog_fault(v37, &type, &v65)) {
          goto LABEL_100;
        }
        if (type == OS_LOG_TYPE_FAULT)
        {
          __int16 v38 = __nwlog_obj();
          os_log_type_t v39 = type;
          if (!os_log_type_enabled(v38, type)) {
            goto LABEL_100;
          }
          int v50 = *(_DWORD *)(a2 + 8);
          *(_DWORD *)buf = 136446978;
          __int16 v68 = "on_frame_recv_callback";
          __int16 v69 = 2082;
          uint64_t v70 = (char *)v48;
          __int16 v71 = 2048;
          *(void *)v72 = v64;
          *(_WORD *)&v72[8] = 1024;
          int v73 = v50;
          v41 = "%{public}s %{public}s no input finished callback for protocol %p attached to stream %d";
          goto LABEL_99;
        }
        if (v65)
        {
          v51 = (char *)__nw_create_backtrace_string();
          __int16 v38 = __nwlog_obj();
          os_log_type_t v39 = type;
          BOOL v57 = os_log_type_enabled(v38, type);
          if (v51)
          {
            if (!v57) {
              goto LABEL_90;
            }
            int v58 = *(_DWORD *)(a2 + 8);
            *(_DWORD *)buf = 136447234;
            __int16 v68 = "on_frame_recv_callback";
            __int16 v69 = 2082;
            uint64_t v70 = (char *)v48;
            __int16 v71 = 2048;
            *(void *)v72 = v64;
            *(_WORD *)&v72[8] = 1024;
            int v73 = v58;
            __int16 v74 = 2082;
            v75 = v51;
            id v54 = "%{public}s %{public}s no input finished callback for protocol %p attached to stream %d, dumping backtrace:%{public}s";
            goto LABEL_89;
          }
          if (!v57) {
            goto LABEL_100;
          }
          int v62 = *(_DWORD *)(a2 + 8);
          *(_DWORD *)buf = 136446978;
          __int16 v68 = "on_frame_recv_callback";
          __int16 v69 = 2082;
          uint64_t v70 = (char *)v48;
          __int16 v71 = 2048;
          *(void *)v72 = v64;
          *(_WORD *)&v72[8] = 1024;
          int v73 = v62;
          v41 = "%{public}s %{public}s no input finished callback for protocol %p attached to stream %d, no backtrace";
        }
        else
        {
          __int16 v38 = __nwlog_obj();
          os_log_type_t v39 = type;
          if (!os_log_type_enabled(v38, type)) {
            goto LABEL_100;
          }
          int v61 = *(_DWORD *)(a2 + 8);
          *(_DWORD *)buf = 136446978;
          __int16 v68 = "on_frame_recv_callback";
          __int16 v69 = 2082;
          uint64_t v70 = (char *)v48;
          __int16 v71 = 2048;
          *(void *)v72 = v64;
          *(_WORD *)&v72[8] = 1024;
          int v73 = v61;
          v41 = "%{public}s %{public}s no input finished callback for protocol %p attached to stream %d, backtrace limit exceeded";
        }
        goto LABEL_99;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v18 = gLogObj;
      uint64_t result = os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
      if (result)
      {
        int v26 = *(_DWORD *)(a2 + 8);
        *(_DWORD *)buf = 136446722;
        __int16 v68 = "on_frame_recv_callback";
        __int16 v69 = 2082;
        uint64_t v70 = (char *)(a3 + 205);
        __int16 v71 = 1024;
        *(_DWORD *)v72 = v26;
        BOOL v11 = "%{public}s %{public}s no input handler found for stream %d, dropping DATA";
        goto LABEL_29;
      }
      return result;
    case 1:
      if (*(unsigned char *)(a2 + 13))
      {
        if (!gLogDatapath) {
          return 0;
        }
        os_log_type_t v23 = __nwlog_obj();
        if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136446466;
          __int16 v68 = "on_frame_recv_callback";
          __int16 v69 = 2082;
          uint64_t v70 = (char *)(a3 + 205);
          _os_log_impl(&dword_1830D4000, v23, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s detected end stream on header frame", buf, 0x16u);
        }
      }
      if (!gLogDatapath) {
        return 0;
      }
      os_log_type_t v9 = __nwlog_obj();
      uint64_t result = os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG);
      if (result)
      {
        int v10 = *(_DWORD *)(a2 + 8);
        *(_DWORD *)buf = 136446722;
        __int16 v68 = "on_frame_recv_callback";
        __int16 v69 = 2082;
        uint64_t v70 = (char *)(a3 + 205);
        __int16 v71 = 1024;
        *(_DWORD *)v72 = v10;
        BOOL v11 = "%{public}s %{public}s received incoming HEADERS frame for stream %d";
        os_log_type_t v12 = v9;
        os_log_type_t v13 = OS_LOG_TYPE_DEBUG;
        goto LABEL_40;
      }
      return result;
    case 2:
      if (!gLogDatapath) {
        return 0;
      }
      os_log_type_t v14 = __nwlog_obj();
      uint64_t result = os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG);
      if (result)
      {
        *(_DWORD *)buf = 136446466;
        __int16 v68 = "on_frame_recv_callback";
        __int16 v69 = 2082;
        uint64_t v70 = (char *)(a3 + 205);
        BOOL v11 = "%{public}s %{public}s received complete PRIORITY frame, ignoring";
        goto LABEL_26;
      }
      return result;
    case 3:
      if (gLogDatapath)
      {
        int v44 = __nwlog_obj();
        if (os_log_type_enabled(v44, OS_LOG_TYPE_DEBUG))
        {
          int v45 = *(_DWORD *)(a2 + 8);
          *(_DWORD *)buf = 136446722;
          __int16 v68 = "on_frame_recv_callback";
          __int16 v69 = 2082;
          uint64_t v70 = (char *)(a3 + 205);
          __int16 v71 = 1024;
          *(_DWORD *)v72 = v45;
          _os_log_impl(&dword_1830D4000, v44, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s stream %d received RST_STREAM frame, setting error to ECONNRESET", buf, 0x1Cu);
        }
      }
      uint64_t v15 = nw_http2_transport_get_protocol_from_stream_id(a3, *(_DWORD *)(a2 + 8));
      if (v15)
      {
        uint64_t v16 = *(void *)(v15 + 24);
        if (v16)
        {
          uint64_t v8 = *(void (**)(void))(v16 + 56);
          if (v8)
          {
LABEL_10:
            v8();
            return 0;
          }
        }
        uint64_t v34 = v15;
        __nwlog_obj();
        uint64_t v35 = a3 + 205;
        int v36 = *(_DWORD *)(a2 + 8);
        *(_DWORD *)buf = 136446978;
        __int16 v68 = "on_frame_recv_callback";
        __int16 v69 = 2082;
        uint64_t v70 = (char *)(a3 + 205);
        __int16 v71 = 2048;
        uint64_t v63 = v34;
        *(void *)v72 = v34;
        *(_WORD *)&v72[8] = 1024;
        int v73 = v36;
        char v37 = (char *)_os_log_send_and_compose_impl();
        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v65 = 0;
        if (!__nwlog_fault(v37, &type, &v65)) {
          goto LABEL_100;
        }
        if (type == OS_LOG_TYPE_FAULT)
        {
          __int16 v38 = __nwlog_obj();
          os_log_type_t v39 = type;
          if (os_log_type_enabled(v38, type))
          {
            int v40 = *(_DWORD *)(a2 + 8);
            *(_DWORD *)buf = 136446978;
            __int16 v68 = "on_frame_recv_callback";
            __int16 v69 = 2082;
            uint64_t v70 = (char *)v35;
            __int16 v71 = 2048;
            *(void *)v72 = v63;
            *(_WORD *)&v72[8] = 1024;
            int v73 = v40;
            v41 = "%{public}s %{public}s no error callback for protocol %p attached to stream %d";
LABEL_99:
            _os_log_impl(&dword_1830D4000, v38, v39, v41, buf, 0x26u);
          }
        }
        else if (v65)
        {
          v51 = (char *)__nw_create_backtrace_string();
          __int16 v38 = __nwlog_obj();
          os_log_type_t v39 = type;
          BOOL v52 = os_log_type_enabled(v38, type);
          if (v51)
          {
            if (v52)
            {
              int v53 = *(_DWORD *)(a2 + 8);
              *(_DWORD *)buf = 136447234;
              __int16 v68 = "on_frame_recv_callback";
              __int16 v69 = 2082;
              uint64_t v70 = (char *)v35;
              __int16 v71 = 2048;
              *(void *)v72 = v63;
              *(_WORD *)&v72[8] = 1024;
              int v73 = v53;
              __int16 v74 = 2082;
              v75 = v51;
              id v54 = "%{public}s %{public}s no error callback for protocol %p attached to stream %d, dumping backtrace:%{public}s";
LABEL_89:
              _os_log_impl(&dword_1830D4000, v38, v39, v54, buf, 0x30u);
            }
LABEL_90:
            free(v51);
            goto LABEL_100;
          }
          if (v52)
          {
            int v60 = *(_DWORD *)(a2 + 8);
            *(_DWORD *)buf = 136446978;
            __int16 v68 = "on_frame_recv_callback";
            __int16 v69 = 2082;
            uint64_t v70 = (char *)v35;
            __int16 v71 = 2048;
            *(void *)v72 = v63;
            *(_WORD *)&v72[8] = 1024;
            int v73 = v60;
            v41 = "%{public}s %{public}s no error callback for protocol %p attached to stream %d, no backtrace";
            goto LABEL_99;
          }
        }
        else
        {
          __int16 v38 = __nwlog_obj();
          os_log_type_t v39 = type;
          if (os_log_type_enabled(v38, type))
          {
            int v59 = *(_DWORD *)(a2 + 8);
            *(_DWORD *)buf = 136446978;
            __int16 v68 = "on_frame_recv_callback";
            __int16 v69 = 2082;
            uint64_t v70 = (char *)v35;
            __int16 v71 = 2048;
            *(void *)v72 = v63;
            *(_WORD *)&v72[8] = 1024;
            int v73 = v59;
            v41 = "%{public}s %{public}s no error callback for protocol %p attached to stream %d, backtrace limit exceeded";
            goto LABEL_99;
          }
        }
LABEL_100:
        if (v37) {
          free(v37);
        }
        return 4294966775;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v24 = gLogObj;
      uint64_t result = os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO);
      if (result)
      {
        int v25 = *(_DWORD *)(a2 + 8);
        *(_DWORD *)buf = 136446722;
        __int16 v68 = "on_frame_recv_callback";
        __int16 v69 = 2082;
        uint64_t v70 = (char *)(a3 + 205);
        __int16 v71 = 1024;
        *(_DWORD *)v72 = v25;
        BOOL v11 = "%{public}s %{public}s no input handler found for stream %d, ignoring RST_STREAM";
        os_log_type_t v12 = v24;
        os_log_type_t v13 = OS_LOG_TYPE_INFO;
        goto LABEL_40;
      }
      break;
    case 4:
      if (!gLogDatapath) {
        return 0;
      }
      os_log_type_t v14 = __nwlog_obj();
      uint64_t result = os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG);
      if (result)
      {
        *(_DWORD *)buf = 136446466;
        __int16 v68 = "on_frame_recv_callback";
        __int16 v69 = 2082;
        uint64_t v70 = (char *)(a3 + 205);
        BOOL v11 = "%{public}s %{public}s received complete SETTINGS frame";
LABEL_26:
        os_log_type_t v12 = v14;
        os_log_type_t v13 = OS_LOG_TYPE_DEBUG;
        uint32_t v17 = 22;
        goto LABEL_41;
      }
      return result;
    case 5:
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v18 = gLogObj;
      uint64_t result = os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
      if (result)
      {
        int v19 = *(_DWORD *)(a2 + 8);
        *(_DWORD *)buf = 136446722;
        __int16 v68 = "on_frame_recv_callback";
        __int16 v69 = 2082;
        uint64_t v70 = (char *)(a3 + 205);
        __int16 v71 = 1024;
        *(_DWORD *)v72 = v19;
        BOOL v11 = "%{public}s %{public}s received a complete PUSH_PROMISE frame on stream %d -- currently not supported";
LABEL_29:
        os_log_type_t v12 = v18;
        os_log_type_t v13 = OS_LOG_TYPE_ERROR;
LABEL_40:
        uint32_t v17 = 28;
        goto LABEL_41;
      }
      return result;
    case 7:
      if (gLogDatapath)
      {
        unsigned int v46 = __nwlog_obj();
        if (os_log_type_enabled(v46, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136446466;
          __int16 v68 = "on_frame_recv_callback";
          __int16 v69 = 2082;
          uint64_t v70 = (char *)(a3 + 205);
          _os_log_impl(&dword_1830D4000, v46, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s received complete GOAWAY frame, tearing down tunnel connection", buf, 0x16u);
        }
      }
      nw_http2_transport_connection_close(a3);
      return 0;
    case 8:
      if (!gLogDatapath) {
        return 0;
      }
      uint64_t v20 = __nwlog_obj();
      uint64_t result = os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG);
      if (result)
      {
        int v21 = *(_DWORD *)(a2 + 8);
        int v22 = *(_DWORD *)(a2 + 16);
        *(_DWORD *)buf = 136446978;
        __int16 v68 = "on_frame_recv_callback";
        __int16 v69 = 2082;
        uint64_t v70 = (char *)(a3 + 205);
        __int16 v71 = 1024;
        *(_DWORD *)v72 = v21;
        *(_WORD *)&v72[4] = 1024;
        *(_DWORD *)&v72[6] = v22;
        BOOL v11 = "%{public}s %{public}s received window update frame for stream %d, window size increment %d";
        os_log_type_t v12 = v20;
        os_log_type_t v13 = OS_LOG_TYPE_DEBUG;
        uint32_t v17 = 34;
LABEL_41:
        _os_log_impl(&dword_1830D4000, v12, v13, v11, buf, v17);
        return 0;
      }
      return result;
    default:
      return result;
  }
  return result;
}

BOOL nw_http_fillout_binary_message_inner(nw_protocol_metadata *a1, int a2, const unsigned __int8 *a3, size_t a4, unsigned __int8 *a5, uint64_t a6)
{
  uint64_t v211 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v204 = "nw_http_fillout_binary_message_inner";
    char v65 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(v197) = 16;
    LOBYTE(v193) = 0;
    if (!__nwlog_fault(v65, &v197, &v193)) {
      goto LABEL_353;
    }
    if (v197 != 17)
    {
      if (!(_BYTE)v193)
      {
        __int16 v66 = __nwlog_obj();
        os_log_type_t v67 = v197;
        if (os_log_type_enabled(v66, (os_log_type_t)v197))
        {
          *(_DWORD *)buf = 136446210;
          v204 = "nw_http_fillout_binary_message_inner";
          __int16 v68 = "%{public}s called with null metadata, backtrace limit exceeded";
          goto LABEL_352;
        }
        goto LABEL_353;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __int16 v66 = __nwlog_obj();
      os_log_type_t v67 = v197;
      BOOL v74 = os_log_type_enabled(v66, (os_log_type_t)v197);
      if (!backtrace_string)
      {
        if (v74)
        {
          *(_DWORD *)buf = 136446210;
          v204 = "nw_http_fillout_binary_message_inner";
          __int16 v68 = "%{public}s called with null metadata, no backtrace";
          goto LABEL_352;
        }
        goto LABEL_353;
      }
      if (!v74) {
        goto LABEL_189;
      }
      *(_DWORD *)buf = 136446466;
      v204 = "nw_http_fillout_binary_message_inner";
      __int16 v205 = 2082;
      v206 = backtrace_string;
      v75 = "%{public}s called with null metadata, dumping backtrace:%{public}s";
      goto LABEL_188;
    }
    __int16 v66 = __nwlog_obj();
    os_log_type_t v67 = v197;
    if (!os_log_type_enabled(v66, (os_log_type_t)v197)) {
      goto LABEL_353;
    }
    *(_DWORD *)buf = 136446210;
    v204 = "nw_http_fillout_binary_message_inner";
    __int16 v68 = "%{public}s called with null metadata";
LABEL_352:
    _os_log_impl(&dword_1830D4000, v66, v67, v68, buf, 0xCu);
    goto LABEL_353;
  }
  if (!a5)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v204 = "nw_http_fillout_binary_message_inner";
    char v65 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(v197) = 16;
    LOBYTE(v193) = 0;
    if (!__nwlog_fault(v65, &v197, &v193)) {
      goto LABEL_353;
    }
    if (v197 != 17)
    {
      if (!(_BYTE)v193)
      {
        __int16 v66 = __nwlog_obj();
        os_log_type_t v67 = v197;
        if (os_log_type_enabled(v66, (os_log_type_t)v197))
        {
          *(_DWORD *)buf = 136446210;
          v204 = "nw_http_fillout_binary_message_inner";
          __int16 v68 = "%{public}s called with null buffer, backtrace limit exceeded";
          goto LABEL_352;
        }
        goto LABEL_353;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __int16 v66 = __nwlog_obj();
      os_log_type_t v67 = v197;
      BOOL v76 = os_log_type_enabled(v66, (os_log_type_t)v197);
      if (!backtrace_string)
      {
        if (v76)
        {
          *(_DWORD *)buf = 136446210;
          v204 = "nw_http_fillout_binary_message_inner";
          __int16 v68 = "%{public}s called with null buffer, no backtrace";
          goto LABEL_352;
        }
        goto LABEL_353;
      }
      if (!v76) {
        goto LABEL_189;
      }
      *(_DWORD *)buf = 136446466;
      v204 = "nw_http_fillout_binary_message_inner";
      __int16 v205 = 2082;
      v206 = backtrace_string;
      v75 = "%{public}s called with null buffer, dumping backtrace:%{public}s";
      goto LABEL_188;
    }
    __int16 v66 = __nwlog_obj();
    os_log_type_t v67 = v197;
    if (!os_log_type_enabled(v66, (os_log_type_t)v197)) {
      goto LABEL_353;
    }
    *(_DWORD *)buf = 136446210;
    v204 = "nw_http_fillout_binary_message_inner";
    __int16 v68 = "%{public}s called with null buffer";
    goto LABEL_352;
  }
  if (!a4) {
    goto LABEL_6;
  }
  if (a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v204 = "nw_http_fillout_binary_message_inner";
    char v65 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(v197) = 16;
    LOBYTE(v193) = 0;
    if (!__nwlog_fault(v65, &v197, &v193)) {
      goto LABEL_353;
    }
    if (v197 == 17)
    {
      __int16 v66 = __nwlog_obj();
      os_log_type_t v67 = v197;
      if (!os_log_type_enabled(v66, (os_log_type_t)v197)) {
        goto LABEL_353;
      }
      *(_DWORD *)buf = 136446210;
      v204 = "nw_http_fillout_binary_message_inner";
      __int16 v68 = "%{public}s called with null (!indeterminate)";
      goto LABEL_352;
    }
    if (!(_BYTE)v193)
    {
      __int16 v66 = __nwlog_obj();
      os_log_type_t v67 = v197;
      if (os_log_type_enabled(v66, (os_log_type_t)v197))
      {
        *(_DWORD *)buf = 136446210;
        v204 = "nw_http_fillout_binary_message_inner";
        __int16 v68 = "%{public}s called with null (!indeterminate), backtrace limit exceeded";
        goto LABEL_352;
      }
      goto LABEL_353;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __int16 v66 = __nwlog_obj();
    os_log_type_t v67 = v197;
    BOOL v101 = os_log_type_enabled(v66, (os_log_type_t)v197);
    if (!backtrace_string)
    {
      if (v101)
      {
        *(_DWORD *)buf = 136446210;
        v204 = "nw_http_fillout_binary_message_inner";
        __int16 v68 = "%{public}s called with null (!indeterminate), no backtrace";
        goto LABEL_352;
      }
      goto LABEL_353;
    }
    if (!v101) {
      goto LABEL_189;
    }
    *(_DWORD *)buf = 136446466;
    v204 = "nw_http_fillout_binary_message_inner";
    __int16 v205 = 2082;
    v206 = backtrace_string;
    v75 = "%{public}s called with null (!indeterminate), dumping backtrace:%{public}s";
LABEL_188:
    _os_log_impl(&dword_1830D4000, v66, v67, v75, buf, 0x16u);
    goto LABEL_189;
  }
  if (!a3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v204 = "nw_http_fillout_binary_message_inner";
    char v65 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(v197) = 16;
    LOBYTE(v193) = 0;
    if (!__nwlog_fault(v65, &v197, &v193)) {
      goto LABEL_353;
    }
    if (v197 == 17)
    {
      __int16 v66 = __nwlog_obj();
      os_log_type_t v67 = v197;
      if (os_log_type_enabled(v66, (os_log_type_t)v197))
      {
        *(_DWORD *)buf = 136446210;
        v204 = "nw_http_fillout_binary_message_inner";
        __int16 v68 = "%{public}s called with null body_content";
        goto LABEL_352;
      }
LABEL_353:
      if (v65) {
        free(v65);
      }
      return 0;
    }
    if (!(_BYTE)v193)
    {
      __int16 v66 = __nwlog_obj();
      os_log_type_t v67 = v197;
      if (os_log_type_enabled(v66, (os_log_type_t)v197))
      {
        *(_DWORD *)buf = 136446210;
        v204 = "nw_http_fillout_binary_message_inner";
        __int16 v68 = "%{public}s called with null body_content, backtrace limit exceeded";
        goto LABEL_352;
      }
      goto LABEL_353;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __int16 v66 = __nwlog_obj();
    os_log_type_t v67 = v197;
    BOOL v102 = os_log_type_enabled(v66, (os_log_type_t)v197);
    if (!backtrace_string)
    {
      if (v102)
      {
        *(_DWORD *)buf = 136446210;
        v204 = "nw_http_fillout_binary_message_inner";
        __int16 v68 = "%{public}s called with null body_content, no backtrace";
        goto LABEL_352;
      }
      goto LABEL_353;
    }
    if (v102)
    {
      *(_DWORD *)buf = 136446466;
      v204 = "nw_http_fillout_binary_message_inner";
      __int16 v205 = 2082;
      v206 = backtrace_string;
      v75 = "%{public}s called with null body_content, dumping backtrace:%{public}s";
      goto LABEL_188;
    }
LABEL_189:
    free(backtrace_string);
    goto LABEL_353;
  }
LABEL_6:
  int v12 = nw_http_metadata_get_type(a1);
  uint64_t v197 = 0;
  v198 = &v197;
  uint64_t v199 = 0x2000000000;
  v200 = a5;
  uint64_t v193 = 0;
  v194 = &v193;
  uint64_t v195 = 0x2000000000;
  uint64_t v196 = a6;
  if (!a6)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v204 = "_http_safe_append";
    __int16 v69 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(__src) = 16;
    type[0] = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v69, &__src, type)) {
      goto LABEL_303;
    }
    if (__src == 17)
    {
      uint64_t v70 = __nwlog_obj();
      os_log_type_t v71 = __src;
      if (!os_log_type_enabled(v70, (os_log_type_t)__src)) {
        goto LABEL_303;
      }
      *(_DWORD *)buf = 136446210;
      v204 = "_http_safe_append";
      v72 = "%{public}s called with null (*remaining >= length)";
    }
    else if (type[0])
    {
      __int16 v85 = (char *)__nw_create_backtrace_string();
      uint64_t v70 = __nwlog_obj();
      os_log_type_t v71 = __src;
      BOOL v86 = os_log_type_enabled(v70, (os_log_type_t)__src);
      if (v85)
      {
        if (v86)
        {
          *(_DWORD *)buf = 136446466;
          v204 = "_http_safe_append";
          __int16 v205 = 2082;
          v206 = v85;
          _os_log_impl(&dword_1830D4000, v70, v71, "%{public}s called with null (*remaining >= length), dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v85);
LABEL_303:
        if (v69) {
          free(v69);
        }
        v198[3] = 0;
        __nwlog_obj();
        *(_DWORD *)buf = 136446210;
        v204 = "nw_http_fillout_binary_message_inner";
        v77 = (char *)_os_log_send_and_compose_impl();
        LOBYTE(__src) = 16;
        type[0] = OS_LOG_TYPE_DEFAULT;
        if (!__nwlog_fault(v77, &__src, type)) {
          goto LABEL_363;
        }
        if (__src == 17)
        {
          v78 = __nwlog_obj();
          os_log_type_t v79 = __src;
          if (!os_log_type_enabled(v78, (os_log_type_t)__src)) {
            goto LABEL_363;
          }
          *(_DWORD *)buf = 136446210;
          v204 = "nw_http_fillout_binary_message_inner";
          id v80 = "%{public}s called with null cursor";
          goto LABEL_362;
        }
        if (type[0] == OS_LOG_TYPE_DEFAULT)
        {
          v78 = __nwlog_obj();
          os_log_type_t v79 = __src;
          if (!os_log_type_enabled(v78, (os_log_type_t)__src)) {
            goto LABEL_363;
          }
          *(_DWORD *)buf = 136446210;
          v204 = "nw_http_fillout_binary_message_inner";
          id v80 = "%{public}s called with null cursor, backtrace limit exceeded";
          goto LABEL_362;
        }
        v107 = (char *)__nw_create_backtrace_string();
        v78 = __nwlog_obj();
        os_log_type_t v79 = __src;
        BOOL v147 = os_log_type_enabled(v78, (os_log_type_t)__src);
        if (!v107)
        {
          if (!v147) {
            goto LABEL_363;
          }
          *(_DWORD *)buf = 136446210;
          v204 = "nw_http_fillout_binary_message_inner";
          id v80 = "%{public}s called with null cursor, no backtrace";
          goto LABEL_362;
        }
        if (v147)
        {
          *(_DWORD *)buf = 136446466;
          v204 = "nw_http_fillout_binary_message_inner";
          __int16 v205 = 2082;
          v206 = v107;
          v109 = "%{public}s called with null cursor, dumping backtrace:%{public}s";
          goto LABEL_313;
        }
LABEL_314:
        free(v107);
        goto LABEL_363;
      }
      if (!v86) {
        goto LABEL_303;
      }
      *(_DWORD *)buf = 136446210;
      v204 = "_http_safe_append";
      v72 = "%{public}s called with null (*remaining >= length), no backtrace";
    }
    else
    {
      uint64_t v70 = __nwlog_obj();
      os_log_type_t v71 = __src;
      if (!os_log_type_enabled(v70, (os_log_type_t)__src)) {
        goto LABEL_303;
      }
      *(_DWORD *)buf = 136446210;
      v204 = "_http_safe_append";
      v72 = "%{public}s called with null (*remaining >= length), backtrace limit exceeded";
    }
    _os_log_impl(&dword_1830D4000, v70, v71, v72, buf, 0xCu);
    goto LABEL_303;
  }
  BOOL v13 = v12 != 1;
  if (v12 == 1) {
    char v14 = 2;
  }
  else {
    char v14 = 3;
  }
  if (a2) {
    BOOL v13 = v14;
  }
  *a5 = v13;
  uint64_t v196 = a6 - 1;
  v200 = a5 + 1;
  if (v12 == 1)
  {
    id v18 = nw_http_metadata_copy_request(a1);
    if (v18)
    {
      v192[0] = MEMORY[0x1E4F143A8];
      v192[1] = 0x40000000;
      v192[2] = ___ZL36nw_http_fillout_binary_message_innerP20nw_protocol_metadatabPKhmPhm_block_invoke;
      v192[3] = &unk_1E5242E18;
      v192[4] = &v197;
      v192[5] = &v193;
      id v19 = v18;
      uint64_t v20 = v192;
      _nw_http_request_access_method((uint64_t)v19, v20);

      v191[0] = MEMORY[0x1E4F143A8];
      v191[1] = 0x40000000;
      v191[2] = ___ZL36nw_http_fillout_binary_message_innerP20nw_protocol_metadatabPKhmPhm_block_invoke_16;
      v191[3] = &unk_1E5242E40;
      v191[4] = &v197;
      v191[5] = &v193;
      id v21 = v19;
      int v22 = v191;
      _nw_http_request_access_scheme((uint64_t)v21, v22);

      v190[0] = MEMORY[0x1E4F143A8];
      v190[1] = 0x40000000;
      v190[2] = ___ZL36nw_http_fillout_binary_message_innerP20nw_protocol_metadatabPKhmPhm_block_invoke_18;
      v190[3] = &unk_1E5242E68;
      v190[4] = &v197;
      v190[5] = &v193;
      id v23 = v21;
      uint64_t v24 = v190;
      _nw_http_request_access_authority((uint64_t)v23, v24);

      v189[0] = MEMORY[0x1E4F143A8];
      v189[1] = 0x40000000;
      v189[2] = ___ZL36nw_http_fillout_binary_message_innerP20nw_protocol_metadatabPKhmPhm_block_invoke_20;
      v189[3] = &unk_1E5242E90;
      v189[4] = &v197;
      v189[5] = &v193;
      id v15 = v23;
      int v25 = v189;
      _nw_http_request_access_path((uint64_t)v15, v25);

LABEL_26:
      os_release(v15);
      goto LABEL_27;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v204 = "nw_http_fillout_binary_message_inner";
    v77 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(__src) = 16;
    type[0] = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v77, &__src, type)) {
      goto LABEL_363;
    }
    if (__src == 17)
    {
      v78 = __nwlog_obj();
      os_log_type_t v79 = __src;
      if (!os_log_type_enabled(v78, (os_log_type_t)__src)) {
        goto LABEL_363;
      }
      *(_DWORD *)buf = 136446210;
      v204 = "nw_http_fillout_binary_message_inner";
      id v80 = "%{public}s called with null request";
      goto LABEL_362;
    }
    if (type[0] == OS_LOG_TYPE_DEFAULT)
    {
      v78 = __nwlog_obj();
      os_log_type_t v79 = __src;
      if (!os_log_type_enabled(v78, (os_log_type_t)__src)) {
        goto LABEL_363;
      }
      *(_DWORD *)buf = 136446210;
      v204 = "nw_http_fillout_binary_message_inner";
      id v80 = "%{public}s called with null request, backtrace limit exceeded";
      goto LABEL_362;
    }
    v107 = (char *)__nw_create_backtrace_string();
    v78 = __nwlog_obj();
    os_log_type_t v79 = __src;
    BOOL v108 = os_log_type_enabled(v78, (os_log_type_t)__src);
    if (!v107)
    {
      if (!v108) {
        goto LABEL_363;
      }
      *(_DWORD *)buf = 136446210;
      v204 = "nw_http_fillout_binary_message_inner";
      id v80 = "%{public}s called with null request, no backtrace";
LABEL_362:
      _os_log_impl(&dword_1830D4000, v78, v79, v80, buf, 0xCu);
LABEL_363:
      if (v77) {
        free(v77);
      }
      goto LABEL_390;
    }
    if (v108)
    {
      *(_DWORD *)buf = 136446466;
      v204 = "nw_http_fillout_binary_message_inner";
      __int16 v205 = 2082;
      v206 = v107;
      v109 = "%{public}s called with null request, dumping backtrace:%{public}s";
LABEL_313:
      _os_log_impl(&dword_1830D4000, v78, v79, v109, buf, 0x16u);
      goto LABEL_314;
    }
    goto LABEL_314;
  }
  id v15 = nw_http_metadata_copy_response(a1);
  unsigned int status_code = nw_http_response_get_status_code(v15);
  if (status_code > 0x3F)
  {
    if ((status_code & 0xC000) != 0)
    {
      uint64_t __src = bswap32(status_code | 0x80000000);
      size_t v17 = 4;
    }
    else
    {
      uint64_t __src = __rev16(status_code | 0x4000);
      size_t v17 = 2;
    }
  }
  else
  {
    uint64_t __src = status_code;
    size_t v17 = 1;
  }
  int v26 = (char *)v198[3];
  if (!v26)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v204 = "_http_safe_append";
    v81 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    v177[0] = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v81, type, v177)) {
      goto LABEL_370;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      id v82 = __nwlog_obj();
      os_log_type_t v83 = type[0];
      if (!os_log_type_enabled(v82, type[0])) {
        goto LABEL_370;
      }
      *(_DWORD *)buf = 136446210;
      v204 = "_http_safe_append";
      int v84 = "%{public}s called with null buffer";
      goto LABEL_369;
    }
    if (v177[0] == OS_LOG_TYPE_DEFAULT)
    {
      id v82 = __nwlog_obj();
      os_log_type_t v83 = type[0];
      if (!os_log_type_enabled(v82, type[0])) {
        goto LABEL_370;
      }
      *(_DWORD *)buf = 136446210;
      v204 = "_http_safe_append";
      int v84 = "%{public}s called with null buffer, backtrace limit exceeded";
      goto LABEL_369;
    }
    v110 = (char *)__nw_create_backtrace_string();
    id v82 = __nwlog_obj();
    os_log_type_t v83 = type[0];
    BOOL v111 = os_log_type_enabled(v82, type[0]);
    if (!v110)
    {
      if (!v111) {
        goto LABEL_370;
      }
      *(_DWORD *)buf = 136446210;
      v204 = "_http_safe_append";
      int v84 = "%{public}s called with null buffer, no backtrace";
      goto LABEL_369;
    }
    if (v111)
    {
      *(_DWORD *)buf = 136446466;
      v204 = "_http_safe_append";
      __int16 v205 = 2082;
      v206 = v110;
      _os_log_impl(&dword_1830D4000, v82, v83, "%{public}s called with null buffer, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v110);
LABEL_370:
    if (!v81) {
      goto LABEL_372;
    }
    goto LABEL_371;
  }
  BOOL v27 = v194;
  if (v194[3] < v17)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v204 = "_http_safe_append";
    v81 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    v177[0] = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v81, type, v177)) {
      goto LABEL_370;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      id v82 = __nwlog_obj();
      os_log_type_t v83 = type[0];
      if (!os_log_type_enabled(v82, type[0])) {
        goto LABEL_370;
      }
      *(_DWORD *)buf = 136446210;
      v204 = "_http_safe_append";
      int v84 = "%{public}s called with null (*remaining >= length)";
      goto LABEL_369;
    }
    if (v177[0] == OS_LOG_TYPE_DEFAULT)
    {
      id v82 = __nwlog_obj();
      os_log_type_t v83 = type[0];
      if (!os_log_type_enabled(v82, type[0])) {
        goto LABEL_370;
      }
      *(_DWORD *)buf = 136446210;
      v204 = "_http_safe_append";
      int v84 = "%{public}s called with null (*remaining >= length), backtrace limit exceeded";
      goto LABEL_369;
    }
    int v113 = (char *)__nw_create_backtrace_string();
    id v82 = __nwlog_obj();
    os_log_type_t v83 = type[0];
    BOOL v114 = os_log_type_enabled(v82, type[0]);
    if (v113)
    {
      if (v114)
      {
        *(_DWORD *)buf = 136446466;
        v204 = "_http_safe_append";
        __int16 v205 = 2082;
        v206 = v113;
        _os_log_impl(&dword_1830D4000, v82, v83, "%{public}s called with null (*remaining >= length), dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v113);
      if (!v81)
      {
LABEL_372:
        v198[3] = 0;
        __nwlog_obj();
        *(_DWORD *)buf = 136446210;
        v204 = "nw_http_fillout_binary_message_inner";
        v152 = (char *)_os_log_send_and_compose_impl();
        type[0] = OS_LOG_TYPE_ERROR;
        v177[0] = OS_LOG_TYPE_DEFAULT;
        if (__nwlog_fault(v152, type, v177))
        {
          if (type[0] == OS_LOG_TYPE_FAULT)
          {
            id v153 = __nwlog_obj();
            os_log_type_t v154 = type[0];
            if (os_log_type_enabled(v153, type[0]))
            {
              *(_DWORD *)buf = 136446210;
              v204 = "nw_http_fillout_binary_message_inner";
              v155 = "%{public}s called with null cursor";
LABEL_385:
              _os_log_impl(&dword_1830D4000, v153, v154, v155, buf, 0xCu);
            }
          }
          else if (v177[0])
          {
            v156 = (char *)__nw_create_backtrace_string();
            id v153 = __nwlog_obj();
            os_log_type_t v154 = type[0];
            BOOL v157 = os_log_type_enabled(v153, type[0]);
            if (v156)
            {
              if (v157)
              {
                *(_DWORD *)buf = 136446466;
                v204 = "nw_http_fillout_binary_message_inner";
                __int16 v205 = 2082;
                v206 = v156;
                _os_log_impl(&dword_1830D4000, v153, v154, "%{public}s called with null cursor, dumping backtrace:%{public}s", buf, 0x16u);
              }
              free(v156);
              goto LABEL_386;
            }
            if (v157)
            {
              *(_DWORD *)buf = 136446210;
              v204 = "nw_http_fillout_binary_message_inner";
              v155 = "%{public}s called with null cursor, no backtrace";
              goto LABEL_385;
            }
          }
          else
          {
            id v153 = __nwlog_obj();
            os_log_type_t v154 = type[0];
            if (os_log_type_enabled(v153, type[0]))
            {
              *(_DWORD *)buf = 136446210;
              v204 = "nw_http_fillout_binary_message_inner";
              v155 = "%{public}s called with null cursor, backtrace limit exceeded";
              goto LABEL_385;
            }
          }
        }
LABEL_386:
        if (v152) {
          free(v152);
        }
        if (v15) {
          os_release(v15);
        }
LABEL_390:
        uint64_t v54 = 0;
        goto LABEL_80;
      }
LABEL_371:
      free(v81);
      goto LABEL_372;
    }
    if (v114)
    {
      *(_DWORD *)buf = 136446210;
      v204 = "_http_safe_append";
      int v84 = "%{public}s called with null (*remaining >= length), no backtrace";
LABEL_369:
      _os_log_impl(&dword_1830D4000, v82, v83, v84, buf, 0xCu);
      goto LABEL_370;
    }
    goto LABEL_370;
  }
  memcpy(v26, &__src, v17);
  unint64_t v28 = v27[3];
  v27[3] = v28 - v17;
  if (v28 < v17)
  {
    if (gLogDatapath)
    {
      log = __nwlog_obj();
      if (os_log_type_enabled(log, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v112 = v27[3];
        *(_DWORD *)buf = 136446978;
        v204 = "_http_safe_append";
        __int16 v205 = 2082;
        v206 = "*remaining";
        __int16 v207 = 2048;
        uint64_t v208 = v17;
        __int16 v209 = 2048;
        uint64_t v210 = v112;
        _os_log_impl(&dword_1830D4000, log, OS_LOG_TYPE_DEBUG, "%{public}s Underflow: %{public}s, decrement %llu, result %llu", buf, 0x2Au);
      }
    }
    v27[3] = 0;
  }
  v198[3] = (uint64_t)&v26[v17];
  if (v15) {
    goto LABEL_26;
  }
LABEL_27:
  uint64_t __src = 0;
  p_src = &__src;
  uint64_t v187 = 0x2000000000;
  uint64_t v188 = 0;
  id v29 = nw_http_metadata_copy_header_fields(a1);
  v184[0] = MEMORY[0x1E4F143A8];
  v184[1] = 0x40000000;
  v184[2] = ___ZL36nw_http_fillout_binary_message_innerP20nw_protocol_metadatabPKhmPhm_block_invoke_22;
  v184[3] = &unk_1E5242EB8;
  v184[4] = &__src;
  nw_http_fields_enumerate(v29, v184);
  if (a2) {
    goto LABEL_42;
  }
  unint64_t v30 = p_src[3];
  if (v30 <= 0x3F)
  {
    *(void *)os_log_type_t type = p_src[3];
    size_t v31 = 1;
    goto LABEL_36;
  }
  if (!(v30 >> 14))
  {
    *(void *)os_log_type_t type = bswap32(v30 | 0x4000) >> 16;
    size_t v31 = 2;
    goto LABEL_36;
  }
  if (!(v30 >> 30))
  {
    *(void *)os_log_type_t type = bswap32(v30 | 0x80000000);
    size_t v31 = 4;
    goto LABEL_36;
  }
  if (!(v30 >> 62))
  {
    *(void *)os_log_type_t type = bswap64(v30 | 0xC000000000000000);
    size_t v31 = 8;
LABEL_36:
    __int16 v32 = (char *)v198[3];
    if (v32)
    {
      BOOL v33 = v194;
      if (v194[3] >= v31)
      {
        memcpy(v32, type, v31);
        unint64_t v34 = v33[3];
        v33[3] = v34 - v31;
        if (v34 < v31)
        {
          if (gLogDatapath)
          {
            v123 = __nwlog_obj();
            if (os_log_type_enabled(v123, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v124 = v33[3];
              *(_DWORD *)buf = 136446978;
              v204 = "_http_safe_append";
              __int16 v205 = 2082;
              v206 = "*remaining";
              __int16 v207 = 2048;
              uint64_t v208 = v31;
              __int16 v209 = 2048;
              uint64_t v210 = v124;
              _os_log_impl(&dword_1830D4000, v123, OS_LOG_TYPE_DEBUG, "%{public}s Underflow: %{public}s, decrement %llu, result %llu", buf, 0x2Au);
            }
          }
          v33[3] = 0;
        }
        v198[3] = (uint64_t)&v32[v31];
        goto LABEL_42;
      }
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      v204 = "_http_safe_append";
      nw_endpoint_t v87 = (char *)_os_log_send_and_compose_impl();
      v177[0] = OS_LOG_TYPE_ERROR;
      os_log_type_t v202 = OS_LOG_TYPE_DEFAULT;
      if (__nwlog_fault(v87, v177, &v202))
      {
        if (v177[0] == OS_LOG_TYPE_FAULT)
        {
          id v88 = __nwlog_obj();
          os_log_type_t v89 = v177[0];
          if (!os_log_type_enabled(v88, v177[0])) {
            goto LABEL_417;
          }
          *(_DWORD *)buf = 136446210;
          v204 = "_http_safe_append";
          os_log_type_t v90 = "%{public}s called with null (*remaining >= length)";
          goto LABEL_416;
        }
        if (v202 == OS_LOG_TYPE_DEFAULT)
        {
          id v88 = __nwlog_obj();
          os_log_type_t v89 = v177[0];
          if (!os_log_type_enabled(v88, v177[0])) {
            goto LABEL_417;
          }
          *(_DWORD *)buf = 136446210;
          v204 = "_http_safe_append";
          os_log_type_t v90 = "%{public}s called with null (*remaining >= length), backtrace limit exceeded";
          goto LABEL_416;
        }
        int v125 = (char *)__nw_create_backtrace_string();
        id v88 = __nwlog_obj();
        os_log_type_t v89 = v177[0];
        BOOL v126 = os_log_type_enabled(v88, v177[0]);
        if (v125)
        {
          if (v126)
          {
            *(_DWORD *)buf = 136446466;
            v204 = "_http_safe_append";
            __int16 v205 = 2082;
            v206 = v125;
            _os_log_impl(&dword_1830D4000, v88, v89, "%{public}s called with null (*remaining >= length), dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v125);
          if (!v87) {
            goto LABEL_419;
          }
          goto LABEL_418;
        }
        if (v126)
        {
          *(_DWORD *)buf = 136446210;
          v204 = "_http_safe_append";
          os_log_type_t v90 = "%{public}s called with null (*remaining >= length), no backtrace";
LABEL_416:
          _os_log_impl(&dword_1830D4000, v88, v89, v90, buf, 0xCu);
        }
      }
    }
    else
    {
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      v204 = "_http_safe_append";
      nw_endpoint_t v87 = (char *)_os_log_send_and_compose_impl();
      v177[0] = OS_LOG_TYPE_ERROR;
      os_log_type_t v202 = OS_LOG_TYPE_DEFAULT;
      if (!__nwlog_fault(v87, v177, &v202)) {
        goto LABEL_417;
      }
      if (v177[0] == OS_LOG_TYPE_FAULT)
      {
        id v88 = __nwlog_obj();
        os_log_type_t v89 = v177[0];
        if (!os_log_type_enabled(v88, v177[0])) {
          goto LABEL_417;
        }
        *(_DWORD *)buf = 136446210;
        v204 = "_http_safe_append";
        os_log_type_t v90 = "%{public}s called with null buffer";
        goto LABEL_416;
      }
      if (v202 == OS_LOG_TYPE_DEFAULT)
      {
        id v88 = __nwlog_obj();
        os_log_type_t v89 = v177[0];
        if (!os_log_type_enabled(v88, v177[0])) {
          goto LABEL_417;
        }
        *(_DWORD *)buf = 136446210;
        v204 = "_http_safe_append";
        os_log_type_t v90 = "%{public}s called with null buffer, backtrace limit exceeded";
        goto LABEL_416;
      }
      v119 = (char *)__nw_create_backtrace_string();
      id v88 = __nwlog_obj();
      os_log_type_t v89 = v177[0];
      BOOL v120 = os_log_type_enabled(v88, v177[0]);
      if (!v119)
      {
        if (!v120) {
          goto LABEL_417;
        }
        *(_DWORD *)buf = 136446210;
        v204 = "_http_safe_append";
        os_log_type_t v90 = "%{public}s called with null buffer, no backtrace";
        goto LABEL_416;
      }
      if (v120)
      {
        *(_DWORD *)buf = 136446466;
        v204 = "_http_safe_append";
        __int16 v205 = 2082;
        v206 = v119;
        _os_log_impl(&dword_1830D4000, v88, v89, "%{public}s called with null buffer, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v119);
    }
LABEL_417:
    if (!v87)
    {
LABEL_419:
      v198[3] = 0;
      goto LABEL_420;
    }
LABEL_418:
    free(v87);
    goto LABEL_419;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446466;
  v204 = "_http_vle_encode";
  __int16 v205 = 2048;
  v206 = (const char *)v30;
  int v61 = (void *)_os_log_send_and_compose_impl();
  BOOL result = __nwlog_abort((uint64_t)v61);
  if (result) {
    goto LABEL_529;
  }
  free(v61);
  if (!v198[3])
  {
LABEL_420:
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v204 = "nw_http_fillout_binary_message_inner";
    v158 = (char *)_os_log_send_and_compose_impl();
    v177[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t v202 = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v158, v177, &v202)) {
      goto LABEL_525;
    }
    if (v177[0] == OS_LOG_TYPE_FAULT)
    {
      v159 = __nwlog_obj();
      os_log_type_t v160 = v177[0];
      if (!os_log_type_enabled(v159, v177[0])) {
        goto LABEL_525;
      }
      *(_DWORD *)buf = 136446210;
      v204 = "nw_http_fillout_binary_message_inner";
      id v161 = "%{public}s called with null cursor";
    }
    else if (v202)
    {
      v164 = (char *)__nw_create_backtrace_string();
      v159 = __nwlog_obj();
      os_log_type_t v160 = v177[0];
      BOOL v165 = os_log_type_enabled(v159, v177[0]);
      if (v164)
      {
        if (v165)
        {
          *(_DWORD *)buf = 136446466;
          v204 = "nw_http_fillout_binary_message_inner";
          __int16 v205 = 2082;
          v206 = v164;
          _os_log_impl(&dword_1830D4000, v159, v160, "%{public}s called with null cursor, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v164);
LABEL_525:
        if (!v158) {
          goto LABEL_527;
        }
        goto LABEL_526;
      }
      if (!v165) {
        goto LABEL_525;
      }
      *(_DWORD *)buf = 136446210;
      v204 = "nw_http_fillout_binary_message_inner";
      id v161 = "%{public}s called with null cursor, no backtrace";
    }
    else
    {
      v159 = __nwlog_obj();
      os_log_type_t v160 = v177[0];
      if (!os_log_type_enabled(v159, v177[0])) {
        goto LABEL_525;
      }
      *(_DWORD *)buf = 136446210;
      v204 = "nw_http_fillout_binary_message_inner";
      id v161 = "%{public}s called with null cursor, backtrace limit exceeded";
    }
LABEL_524:
    _os_log_impl(&dword_1830D4000, v159, v160, v161, buf, 0xCu);
    goto LABEL_525;
  }
LABEL_42:
  v183[0] = MEMORY[0x1E4F143A8];
  v183[1] = 0x40000000;
  v183[2] = ___ZL36nw_http_fillout_binary_message_innerP20nw_protocol_metadatabPKhmPhm_block_invoke_24;
  v183[3] = &unk_1E5242F08;
  v183[4] = &v197;
  v183[5] = &v193;
  nw_http_fields_enumerate_const_field(v29, v183);
  if (a2)
  {
    uint64_t v35 = (unsigned char *)v198[3];
    if (!v35)
    {
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      v204 = "_http_safe_append";
      char v37 = (char *)_os_log_send_and_compose_impl();
      type[0] = OS_LOG_TYPE_ERROR;
      v177[0] = OS_LOG_TYPE_DEFAULT;
      if (!__nwlog_fault(v37, type, v177)) {
        goto LABEL_396;
      }
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __int16 v38 = __nwlog_obj();
        os_log_type_t v39 = type[0];
        if (!os_log_type_enabled(v38, type[0])) {
          goto LABEL_396;
        }
        *(_DWORD *)buf = 136446210;
        v204 = "_http_safe_append";
        int v40 = "%{public}s called with null buffer";
        goto LABEL_395;
      }
      if (v177[0] == OS_LOG_TYPE_DEFAULT)
      {
        __int16 v38 = __nwlog_obj();
        os_log_type_t v39 = type[0];
        if (!os_log_type_enabled(v38, type[0])) {
          goto LABEL_396;
        }
        *(_DWORD *)buf = 136446210;
        v204 = "_http_safe_append";
        int v40 = "%{public}s called with null buffer, backtrace limit exceeded";
        goto LABEL_395;
      }
      v115 = (char *)__nw_create_backtrace_string();
      __int16 v38 = __nwlog_obj();
      os_log_type_t v39 = type[0];
      BOOL v116 = os_log_type_enabled(v38, type[0]);
      if (!v115)
      {
        if (!v116) {
          goto LABEL_396;
        }
        *(_DWORD *)buf = 136446210;
        v204 = "_http_safe_append";
        int v40 = "%{public}s called with null buffer, no backtrace";
        goto LABEL_395;
      }
      if (v116)
      {
        *(_DWORD *)buf = 136446466;
        v204 = "_http_safe_append";
        __int16 v205 = 2082;
        v206 = v115;
        _os_log_impl(&dword_1830D4000, v38, v39, "%{public}s called with null buffer, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v115);
      goto LABEL_396;
    }
    int v36 = v194;
    if (!v194[3])
    {
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      v204 = "_http_safe_append";
      char v37 = (char *)_os_log_send_and_compose_impl();
      type[0] = OS_LOG_TYPE_ERROR;
      v177[0] = OS_LOG_TYPE_DEFAULT;
      if (!__nwlog_fault(v37, type, v177)) {
        goto LABEL_396;
      }
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __int16 v38 = __nwlog_obj();
        os_log_type_t v39 = type[0];
        if (!os_log_type_enabled(v38, type[0])) {
          goto LABEL_396;
        }
        *(_DWORD *)buf = 136446210;
        v204 = "_http_safe_append";
        int v40 = "%{public}s called with null (*remaining >= length)";
        goto LABEL_395;
      }
      if (v177[0] == OS_LOG_TYPE_DEFAULT)
      {
        __int16 v38 = __nwlog_obj();
        os_log_type_t v39 = type[0];
        if (!os_log_type_enabled(v38, type[0])) {
          goto LABEL_396;
        }
        *(_DWORD *)buf = 136446210;
        v204 = "_http_safe_append";
        int v40 = "%{public}s called with null (*remaining >= length), backtrace limit exceeded";
        goto LABEL_395;
      }
      v117 = (char *)__nw_create_backtrace_string();
      __int16 v38 = __nwlog_obj();
      os_log_type_t v39 = type[0];
      BOOL v118 = os_log_type_enabled(v38, type[0]);
      if (v117)
      {
        if (v118)
        {
          *(_DWORD *)buf = 136446466;
          v204 = "_http_safe_append";
          __int16 v205 = 2082;
          v206 = v117;
          _os_log_impl(&dword_1830D4000, v38, v39, "%{public}s called with null (*remaining >= length), dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v117);
        if (!v37)
        {
LABEL_398:
          v198[3] = 0;
          __nwlog_obj();
          *(_DWORD *)buf = 136446210;
          v204 = "nw_http_fillout_binary_message_inner";
          v158 = (char *)_os_log_send_and_compose_impl();
          type[0] = OS_LOG_TYPE_ERROR;
          v177[0] = OS_LOG_TYPE_DEFAULT;
          if (!__nwlog_fault(v158, type, v177)) {
            goto LABEL_525;
          }
          if (type[0] == OS_LOG_TYPE_FAULT)
          {
            v159 = __nwlog_obj();
            os_log_type_t v160 = type[0];
            if (!os_log_type_enabled(v159, type[0])) {
              goto LABEL_525;
            }
            *(_DWORD *)buf = 136446210;
            v204 = "nw_http_fillout_binary_message_inner";
            id v161 = "%{public}s called with null cursor";
            goto LABEL_524;
          }
          if (v177[0] == OS_LOG_TYPE_DEFAULT)
          {
            v159 = __nwlog_obj();
            os_log_type_t v160 = type[0];
            if (!os_log_type_enabled(v159, type[0])) {
              goto LABEL_525;
            }
            *(_DWORD *)buf = 136446210;
            v204 = "nw_http_fillout_binary_message_inner";
            id v161 = "%{public}s called with null cursor, backtrace limit exceeded";
            goto LABEL_524;
          }
          id v162 = (char *)__nw_create_backtrace_string();
          v159 = __nwlog_obj();
          os_log_type_t v160 = type[0];
          BOOL v163 = os_log_type_enabled(v159, type[0]);
          if (!v162)
          {
            if (!v163) {
              goto LABEL_525;
            }
            *(_DWORD *)buf = 136446210;
            v204 = "nw_http_fillout_binary_message_inner";
            id v161 = "%{public}s called with null cursor, no backtrace";
            goto LABEL_524;
          }
          if (!v163) {
            goto LABEL_518;
          }
LABEL_517:
          *(_DWORD *)buf = 136446466;
          v204 = "nw_http_fillout_binary_message_inner";
          __int16 v205 = 2082;
          v206 = v162;
          _os_log_impl(&dword_1830D4000, v159, v160, "%{public}s called with null cursor, dumping backtrace:%{public}s", buf, 0x16u);
LABEL_518:
          free(v162);
          if (v158) {
LABEL_526:
          }
            free(v158);
LABEL_527:
          uint64_t v54 = 0;
          if (!v29) {
            goto LABEL_79;
          }
          goto LABEL_78;
        }
LABEL_397:
        free(v37);
        goto LABEL_398;
      }
      if (v118)
      {
        *(_DWORD *)buf = 136446210;
        v204 = "_http_safe_append";
        int v40 = "%{public}s called with null (*remaining >= length), no backtrace";
LABEL_395:
        _os_log_impl(&dword_1830D4000, v38, v39, v40, buf, 0xCu);
      }
LABEL_396:
      if (!v37) {
        goto LABEL_398;
      }
      goto LABEL_397;
    }
LABEL_74:
    *uint64_t v35 = 0;
    uint64_t v53 = v36[3];
    v36[3] = v53 - 1;
    if (!v53)
    {
      if (gLogDatapath)
      {
        id v95 = __nwlog_obj();
        if (os_log_type_enabled(v95, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v96 = v36[3];
          *(_DWORD *)buf = 136446978;
          v204 = "_http_safe_append";
          __int16 v205 = 2082;
          v206 = "*remaining";
          __int16 v207 = 2048;
          uint64_t v208 = 1;
          __int16 v209 = 2048;
          uint64_t v210 = v96;
          _os_log_impl(&dword_1830D4000, v95, OS_LOG_TYPE_DEBUG, "%{public}s Underflow: %{public}s, decrement %llu, result %llu", buf, 0x2Au);
        }
      }
      v36[3] = 0;
    }
    v198[3] = (uint64_t)(v35 + 1);
    uint64_t v54 = 1;
    if (!v29) {
      goto LABEL_79;
    }
LABEL_78:
    os_release(v29);
LABEL_79:
    _Block_object_dispose(&__src, 8);
LABEL_80:
    _Block_object_dispose(&v193, 8);
    _Block_object_dispose(&v197, 8);
    return v54;
  }
  if (a4 > 0x3F)
  {
    if (a4 >> 14)
    {
      if (a4 >> 30)
      {
        if (a4 >> 62)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
          *(_DWORD *)buf = 136446466;
          v204 = "_http_vle_encode";
          __int16 v205 = 2048;
          v206 = (const char *)a4;
          int v62 = (void *)_os_log_send_and_compose_impl();
          BOOL result = __nwlog_abort((uint64_t)v62);
          if (result) {
            goto LABEL_529;
          }
          free(v62);
          int v45 = (char *)v198[3];
          if (v45)
          {
LABEL_63:
            if (a3)
            {
              unsigned int v46 = v194;
              if (v194[3] >= a4)
              {
                memcpy(v45, a3, a4);
                unint64_t v47 = v46[3];
                v46[3] = v47 - a4;
                if (v47 < a4)
                {
                  if (gLogDatapath)
                  {
                    v137 = __nwlog_obj();
                    if (os_log_type_enabled(v137, OS_LOG_TYPE_DEBUG))
                    {
                      uint64_t v138 = v46[3];
                      *(_DWORD *)buf = 136446978;
                      v204 = "_http_safe_append";
                      __int16 v205 = 2082;
                      v206 = "*remaining";
                      __int16 v207 = 2048;
                      uint64_t v208 = a4;
                      __int16 v209 = 2048;
                      uint64_t v210 = v138;
                      _os_log_impl(&dword_1830D4000, v137, OS_LOG_TYPE_DEBUG, "%{public}s Underflow: %{public}s, decrement %llu, result %llu", buf, 0x2Au);
                    }
                  }
                  v46[3] = 0;
                }
                v198[3] = (uint64_t)&v45[a4];
                goto LABEL_69;
              }
              __nwlog_obj();
              *(_DWORD *)buf = 136446210;
              v204 = "_http_safe_append";
              __int16 v97 = (void *)_os_log_send_and_compose_impl();
              type[0] = OS_LOG_TYPE_ERROR;
              v177[0] = OS_LOG_TYPE_DEFAULT;
              if (__nwlog_fault((const char *)v97, type, v177))
              {
                if (type[0] == OS_LOG_TYPE_FAULT)
                {
                  v98 = __nwlog_obj();
                  os_log_type_t v99 = type[0];
                  if (!os_log_type_enabled(v98, type[0])) {
                    goto LABEL_460;
                  }
                  *(_DWORD *)buf = 136446210;
                  v204 = "_http_safe_append";
                  id v100 = "%{public}s called with null (*remaining >= length)";
                  goto LABEL_459;
                }
                if (v177[0] == OS_LOG_TYPE_DEFAULT)
                {
                  v98 = __nwlog_obj();
                  os_log_type_t v99 = type[0];
                  if (!os_log_type_enabled(v98, type[0])) {
                    goto LABEL_460;
                  }
                  *(_DWORD *)buf = 136446210;
                  v204 = "_http_safe_append";
                  id v100 = "%{public}s called with null (*remaining >= length), backtrace limit exceeded";
                  goto LABEL_459;
                }
                v139 = (char *)__nw_create_backtrace_string();
                v98 = __nwlog_obj();
                os_log_type_t v99 = type[0];
                BOOL v140 = os_log_type_enabled(v98, type[0]);
                if (v139)
                {
                  if (v140)
                  {
                    *(_DWORD *)buf = 136446466;
                    v204 = "_http_safe_append";
                    __int16 v205 = 2082;
                    v206 = v139;
                    _os_log_impl(&dword_1830D4000, v98, v99, "%{public}s called with null (*remaining >= length), dumping backtrace:%{public}s", buf, 0x16u);
                  }
                  free(v139);
                  if (!v97)
                  {
LABEL_462:
                    v198[3] = 0;
                    __nwlog_obj();
                    *(_DWORD *)buf = 136446210;
                    v204 = "nw_http_fillout_binary_message_inner";
                    v158 = (char *)_os_log_send_and_compose_impl();
                    type[0] = OS_LOG_TYPE_ERROR;
                    v177[0] = OS_LOG_TYPE_DEFAULT;
                    if ((__nwlog_fault(v158, type, v177) & 1) == 0) {
                      goto LABEL_525;
                    }
                    if (type[0] == OS_LOG_TYPE_FAULT)
                    {
                      v159 = __nwlog_obj();
                      os_log_type_t v160 = type[0];
                      if (!os_log_type_enabled(v159, type[0])) {
                        goto LABEL_525;
                      }
                      *(_DWORD *)buf = 136446210;
                      v204 = "nw_http_fillout_binary_message_inner";
                      id v161 = "%{public}s called with null cursor";
                      goto LABEL_524;
                    }
                    if (v177[0] == OS_LOG_TYPE_DEFAULT)
                    {
                      v159 = __nwlog_obj();
                      os_log_type_t v160 = type[0];
                      if (!os_log_type_enabled(v159, type[0])) {
                        goto LABEL_525;
                      }
                      *(_DWORD *)buf = 136446210;
                      v204 = "nw_http_fillout_binary_message_inner";
                      id v161 = "%{public}s called with null cursor, backtrace limit exceeded";
                      goto LABEL_524;
                    }
                    id v162 = (char *)__nw_create_backtrace_string();
                    v159 = __nwlog_obj();
                    os_log_type_t v160 = type[0];
                    BOOL v167 = os_log_type_enabled(v159, type[0]);
                    if (!v162)
                    {
                      if (!v167) {
                        goto LABEL_525;
                      }
                      *(_DWORD *)buf = 136446210;
                      v204 = "nw_http_fillout_binary_message_inner";
                      id v161 = "%{public}s called with null cursor, no backtrace";
                      goto LABEL_524;
                    }
                    if (!v167) {
                      goto LABEL_518;
                    }
                    goto LABEL_517;
                  }
LABEL_461:
                  free(v97);
                  goto LABEL_462;
                }
                if (v140)
                {
                  *(_DWORD *)buf = 136446210;
                  v204 = "_http_safe_append";
                  id v100 = "%{public}s called with null (*remaining >= length), no backtrace";
LABEL_459:
                  _os_log_impl(&dword_1830D4000, v98, v99, v100, buf, 0xCu);
                }
              }
            }
            else
            {
              __nwlog_obj();
              *(_DWORD *)buf = 136446210;
              v204 = "_http_safe_append";
              __int16 v97 = (void *)_os_log_send_and_compose_impl();
              type[0] = OS_LOG_TYPE_ERROR;
              v177[0] = OS_LOG_TYPE_DEFAULT;
              if (!__nwlog_fault((const char *)v97, type, v177)) {
                goto LABEL_460;
              }
              if (type[0] == OS_LOG_TYPE_FAULT)
              {
                v98 = __nwlog_obj();
                os_log_type_t v99 = type[0];
                if (!os_log_type_enabled(v98, type[0])) {
                  goto LABEL_460;
                }
                *(_DWORD *)buf = 136446210;
                v204 = "_http_safe_append";
                id v100 = "%{public}s called with null data";
                goto LABEL_459;
              }
              if (v177[0] == OS_LOG_TYPE_DEFAULT)
              {
                v98 = __nwlog_obj();
                os_log_type_t v99 = type[0];
                if (!os_log_type_enabled(v98, type[0])) {
                  goto LABEL_460;
                }
                *(_DWORD *)buf = 136446210;
                v204 = "_http_safe_append";
                id v100 = "%{public}s called with null data, backtrace limit exceeded";
                goto LABEL_459;
              }
              id v135 = (char *)__nw_create_backtrace_string();
              v98 = __nwlog_obj();
              os_log_type_t v99 = type[0];
              BOOL v136 = os_log_type_enabled(v98, type[0]);
              if (!v135)
              {
                if (!v136) {
                  goto LABEL_460;
                }
                *(_DWORD *)buf = 136446210;
                v204 = "_http_safe_append";
                id v100 = "%{public}s called with null data, no backtrace";
                goto LABEL_459;
              }
              if (v136)
              {
                *(_DWORD *)buf = 136446466;
                v204 = "_http_safe_append";
                __int16 v205 = 2082;
                v206 = v135;
                _os_log_impl(&dword_1830D4000, v98, v99, "%{public}s called with null data, dumping backtrace:%{public}s", buf, 0x16u);
              }
              free(v135);
            }
LABEL_460:
            if (!v97) {
              goto LABEL_462;
            }
            goto LABEL_461;
          }
LABEL_439:
          __nwlog_obj();
          *(_DWORD *)buf = 136446210;
          v204 = "nw_http_fillout_binary_message_inner";
          v158 = (char *)_os_log_send_and_compose_impl();
          v177[0] = OS_LOG_TYPE_ERROR;
          os_log_type_t v202 = OS_LOG_TYPE_DEFAULT;
          if (!__nwlog_fault(v158, v177, &v202)) {
            goto LABEL_525;
          }
          if (v177[0] == OS_LOG_TYPE_FAULT)
          {
            v159 = __nwlog_obj();
            os_log_type_t v160 = v177[0];
            if (!os_log_type_enabled(v159, v177[0])) {
              goto LABEL_525;
            }
            *(_DWORD *)buf = 136446210;
            v204 = "nw_http_fillout_binary_message_inner";
            id v161 = "%{public}s called with null cursor";
            goto LABEL_524;
          }
          if (v202 == OS_LOG_TYPE_DEFAULT)
          {
            v159 = __nwlog_obj();
            os_log_type_t v160 = v177[0];
            if (!os_log_type_enabled(v159, v177[0])) {
              goto LABEL_525;
            }
            *(_DWORD *)buf = 136446210;
            v204 = "nw_http_fillout_binary_message_inner";
            id v161 = "%{public}s called with null cursor, backtrace limit exceeded";
            goto LABEL_524;
          }
          id v162 = (char *)__nw_create_backtrace_string();
          v159 = __nwlog_obj();
          os_log_type_t v160 = v177[0];
          BOOL v166 = os_log_type_enabled(v159, v177[0]);
          if (!v162)
          {
            if (!v166) {
              goto LABEL_525;
            }
            *(_DWORD *)buf = 136446210;
            v204 = "nw_http_fillout_binary_message_inner";
            id v161 = "%{public}s called with null cursor, no backtrace";
            goto LABEL_524;
          }
          if (!v166) {
            goto LABEL_518;
          }
          goto LABEL_517;
        }
        *(void *)os_log_type_t type = bswap64(a4 | 0xC000000000000000);
        size_t v41 = 8;
      }
      else
      {
        *(void *)os_log_type_t type = bswap32(a4 | 0x80000000);
        size_t v41 = 4;
      }
    }
    else
    {
      *(void *)os_log_type_t type = bswap32(a4 | 0x4000) >> 16;
      size_t v41 = 2;
    }
  }
  else
  {
    *(void *)os_log_type_t type = a4;
    size_t v41 = 1;
  }
  uint64_t v42 = (char *)v198[3];
  if (!v42)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v204 = "_http_safe_append";
    char v91 = (char *)_os_log_send_and_compose_impl();
    v177[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t v202 = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v91, v177, &v202)) {
      goto LABEL_436;
    }
    if (v177[0] == OS_LOG_TYPE_FAULT)
    {
      v92 = __nwlog_obj();
      os_log_type_t v93 = v177[0];
      if (!os_log_type_enabled(v92, v177[0])) {
        goto LABEL_436;
      }
      *(_DWORD *)buf = 136446210;
      v204 = "_http_safe_append";
      nw_endpoint_t v94 = "%{public}s called with null buffer";
      goto LABEL_435;
    }
    if (v202 == OS_LOG_TYPE_DEFAULT)
    {
      v92 = __nwlog_obj();
      os_log_type_t v93 = v177[0];
      if (!os_log_type_enabled(v92, v177[0])) {
        goto LABEL_436;
      }
      *(_DWORD *)buf = 136446210;
      v204 = "_http_safe_append";
      nw_endpoint_t v94 = "%{public}s called with null buffer, backtrace limit exceeded";
      goto LABEL_435;
    }
    v121 = (char *)__nw_create_backtrace_string();
    v92 = __nwlog_obj();
    os_log_type_t v93 = v177[0];
    BOOL v122 = os_log_type_enabled(v92, v177[0]);
    if (!v121)
    {
      if (!v122) {
        goto LABEL_436;
      }
      *(_DWORD *)buf = 136446210;
      v204 = "_http_safe_append";
      nw_endpoint_t v94 = "%{public}s called with null buffer, no backtrace";
      goto LABEL_435;
    }
    if (v122)
    {
      *(_DWORD *)buf = 136446466;
      v204 = "_http_safe_append";
      __int16 v205 = 2082;
      v206 = v121;
      _os_log_impl(&dword_1830D4000, v92, v93, "%{public}s called with null buffer, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v121);
LABEL_436:
    if (!v91)
    {
LABEL_438:
      v198[3] = 0;
      goto LABEL_439;
    }
LABEL_437:
    free(v91);
    goto LABEL_438;
  }
  int v43 = v194;
  if (v194[3] < v41)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v204 = "_http_safe_append";
    char v91 = (char *)_os_log_send_and_compose_impl();
    v177[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t v202 = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v91, v177, &v202)) {
      goto LABEL_436;
    }
    if (v177[0] == OS_LOG_TYPE_FAULT)
    {
      v92 = __nwlog_obj();
      os_log_type_t v93 = v177[0];
      if (!os_log_type_enabled(v92, v177[0])) {
        goto LABEL_436;
      }
      *(_DWORD *)buf = 136446210;
      v204 = "_http_safe_append";
      nw_endpoint_t v94 = "%{public}s called with null (*remaining >= length)";
      goto LABEL_435;
    }
    if (v202 == OS_LOG_TYPE_DEFAULT)
    {
      v92 = __nwlog_obj();
      os_log_type_t v93 = v177[0];
      if (!os_log_type_enabled(v92, v177[0])) {
        goto LABEL_436;
      }
      *(_DWORD *)buf = 136446210;
      v204 = "_http_safe_append";
      nw_endpoint_t v94 = "%{public}s called with null (*remaining >= length), backtrace limit exceeded";
      goto LABEL_435;
    }
    v129 = (char *)__nw_create_backtrace_string();
    v92 = __nwlog_obj();
    os_log_type_t v93 = v177[0];
    BOOL v130 = os_log_type_enabled(v92, v177[0]);
    if (v129)
    {
      if (v130)
      {
        *(_DWORD *)buf = 136446466;
        v204 = "_http_safe_append";
        __int16 v205 = 2082;
        v206 = v129;
        _os_log_impl(&dword_1830D4000, v92, v93, "%{public}s called with null (*remaining >= length), dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v129);
      if (!v91) {
        goto LABEL_438;
      }
      goto LABEL_437;
    }
    if (v130)
    {
      *(_DWORD *)buf = 136446210;
      v204 = "_http_safe_append";
      nw_endpoint_t v94 = "%{public}s called with null (*remaining >= length), no backtrace";
LABEL_435:
      _os_log_impl(&dword_1830D4000, v92, v93, v94, buf, 0xCu);
      goto LABEL_436;
    }
    goto LABEL_436;
  }
  memcpy(v42, type, v41);
  unint64_t v44 = v43[3];
  v43[3] = v44 - v41;
  if (v44 < v41)
  {
    if (gLogDatapath)
    {
      id v127 = __nwlog_obj();
      if (os_log_type_enabled(v127, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v128 = v43[3];
        *(_DWORD *)buf = 136446978;
        v204 = "_http_safe_append";
        __int16 v205 = 2082;
        v206 = "*remaining";
        __int16 v207 = 2048;
        uint64_t v208 = v41;
        __int16 v209 = 2048;
        uint64_t v210 = v128;
        _os_log_impl(&dword_1830D4000, v127, OS_LOG_TYPE_DEBUG, "%{public}s Underflow: %{public}s, decrement %llu, result %llu", buf, 0x2Au);
      }
    }
    v43[3] = 0;
  }
  int v45 = &v42[v41];
  v198[3] = (uint64_t)v45;
  if (a4) {
    goto LABEL_63;
  }
LABEL_69:
  id v48 = nw_http_metadata_copy_trailer_fields(a1);
  if (!v48)
  {
    uint64_t v35 = (unsigned char *)v198[3];
    if (v35)
    {
      int v36 = v194;
      if (v194[3]) {
        goto LABEL_74;
      }
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      v204 = "_http_safe_append";
      v131 = (void *)_os_log_send_and_compose_impl();
      type[0] = OS_LOG_TYPE_ERROR;
      v177[0] = OS_LOG_TYPE_DEFAULT;
      if (__nwlog_fault((const char *)v131, type, v177))
      {
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          v132 = __nwlog_obj();
          os_log_type_t v133 = type[0];
          if (!os_log_type_enabled(v132, type[0])) {
            goto LABEL_508;
          }
          *(_DWORD *)buf = 136446210;
          v204 = "_http_safe_append";
          v134 = "%{public}s called with null (*remaining >= length)";
          goto LABEL_507;
        }
        if (v177[0] == OS_LOG_TYPE_DEFAULT)
        {
          v132 = __nwlog_obj();
          os_log_type_t v133 = type[0];
          if (!os_log_type_enabled(v132, type[0])) {
            goto LABEL_508;
          }
          *(_DWORD *)buf = 136446210;
          v204 = "_http_safe_append";
          v134 = "%{public}s called with null (*remaining >= length), backtrace limit exceeded";
          goto LABEL_507;
        }
        v150 = (char *)__nw_create_backtrace_string();
        v132 = __nwlog_obj();
        os_log_type_t v133 = type[0];
        BOOL v151 = os_log_type_enabled(v132, type[0]);
        if (v150)
        {
          if (v151)
          {
            *(_DWORD *)buf = 136446466;
            v204 = "_http_safe_append";
            __int16 v205 = 2082;
            v206 = v150;
            _os_log_impl(&dword_1830D4000, v132, v133, "%{public}s called with null (*remaining >= length), dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v150);
          if (!v131)
          {
LABEL_510:
            v198[3] = 0;
            __nwlog_obj();
            *(_DWORD *)buf = 136446210;
            v204 = "nw_http_fillout_binary_message_inner";
            v158 = (char *)_os_log_send_and_compose_impl();
            type[0] = OS_LOG_TYPE_ERROR;
            v177[0] = OS_LOG_TYPE_DEFAULT;
            if (!__nwlog_fault(v158, type, v177)) {
              goto LABEL_525;
            }
            if (type[0] == OS_LOG_TYPE_FAULT)
            {
              v159 = __nwlog_obj();
              os_log_type_t v160 = type[0];
              if (!os_log_type_enabled(v159, type[0])) {
                goto LABEL_525;
              }
              *(_DWORD *)buf = 136446210;
              v204 = "nw_http_fillout_binary_message_inner";
              id v161 = "%{public}s called with null cursor";
              goto LABEL_524;
            }
            if (v177[0] == OS_LOG_TYPE_DEFAULT)
            {
              v159 = __nwlog_obj();
              os_log_type_t v160 = type[0];
              if (!os_log_type_enabled(v159, type[0])) {
                goto LABEL_525;
              }
              *(_DWORD *)buf = 136446210;
              v204 = "nw_http_fillout_binary_message_inner";
              id v161 = "%{public}s called with null cursor, backtrace limit exceeded";
              goto LABEL_524;
            }
            id v162 = (char *)__nw_create_backtrace_string();
            v159 = __nwlog_obj();
            os_log_type_t v160 = type[0];
            BOOL v174 = os_log_type_enabled(v159, type[0]);
            if (!v162)
            {
              if (!v174) {
                goto LABEL_525;
              }
              *(_DWORD *)buf = 136446210;
              v204 = "nw_http_fillout_binary_message_inner";
              id v161 = "%{public}s called with null cursor, no backtrace";
              goto LABEL_524;
            }
            if (!v174) {
              goto LABEL_518;
            }
            goto LABEL_517;
          }
LABEL_509:
          free(v131);
          goto LABEL_510;
        }
        if (v151)
        {
          *(_DWORD *)buf = 136446210;
          v204 = "_http_safe_append";
          v134 = "%{public}s called with null (*remaining >= length), no backtrace";
LABEL_507:
          _os_log_impl(&dword_1830D4000, v132, v133, v134, buf, 0xCu);
        }
      }
    }
    else
    {
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      v204 = "_http_safe_append";
      v131 = (void *)_os_log_send_and_compose_impl();
      type[0] = OS_LOG_TYPE_ERROR;
      v177[0] = OS_LOG_TYPE_DEFAULT;
      if (!__nwlog_fault((const char *)v131, type, v177)) {
        goto LABEL_508;
      }
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        v132 = __nwlog_obj();
        os_log_type_t v133 = type[0];
        if (!os_log_type_enabled(v132, type[0])) {
          goto LABEL_508;
        }
        *(_DWORD *)buf = 136446210;
        v204 = "_http_safe_append";
        v134 = "%{public}s called with null buffer";
        goto LABEL_507;
      }
      if (v177[0] == OS_LOG_TYPE_DEFAULT)
      {
        v132 = __nwlog_obj();
        os_log_type_t v133 = type[0];
        if (!os_log_type_enabled(v132, type[0])) {
          goto LABEL_508;
        }
        *(_DWORD *)buf = 136446210;
        v204 = "_http_safe_append";
        v134 = "%{public}s called with null buffer, backtrace limit exceeded";
        goto LABEL_507;
      }
      v148 = (char *)__nw_create_backtrace_string();
      v132 = __nwlog_obj();
      os_log_type_t v133 = type[0];
      BOOL v149 = os_log_type_enabled(v132, type[0]);
      if (!v148)
      {
        if (!v149) {
          goto LABEL_508;
        }
        *(_DWORD *)buf = 136446210;
        v204 = "_http_safe_append";
        v134 = "%{public}s called with null buffer, no backtrace";
        goto LABEL_507;
      }
      if (v149)
      {
        *(_DWORD *)buf = 136446466;
        v204 = "_http_safe_append";
        __int16 v205 = 2082;
        v206 = v148;
        _os_log_impl(&dword_1830D4000, v132, v133, "%{public}s called with null buffer, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v148);
    }
LABEL_508:
    if (!v131) {
      goto LABEL_510;
    }
    goto LABEL_509;
  }
  *(void *)os_log_type_t type = 0;
  v180 = type;
  uint64_t v181 = 0x2000000000;
  uint64_t v182 = 0;
  v178[0] = MEMORY[0x1E4F143A8];
  v178[1] = 0x40000000;
  v178[2] = ___ZL36nw_http_fillout_binary_message_innerP20nw_protocol_metadatabPKhmPhm_block_invoke_27;
  v178[3] = &unk_1E5242F30;
  v178[4] = type;
  id v49 = v48;
  int v50 = v178;
  _nw_http_fields_enumerate((uint64_t)v49, v50);

  unint64_t v51 = *((void *)v180 + 3);
  if (v51 <= 0x3F)
  {
    *(void *)id v177 = *((void *)v180 + 3);
    size_t v52 = 1;
    goto LABEL_88;
  }
  if (!(v51 >> 14))
  {
    *(void *)id v177 = bswap32(v51 | 0x4000) >> 16;
    size_t v52 = 2;
    goto LABEL_88;
  }
  if (!(v51 >> 30))
  {
    *(void *)id v177 = bswap32(v51 | 0x80000000);
    size_t v52 = 4;
    goto LABEL_88;
  }
  if (!(v51 >> 62))
  {
    *(void *)id v177 = bswap64(v51 | 0xC000000000000000);
    size_t v52 = 8;
LABEL_88:
    int v56 = (char *)v198[3];
    if (v56)
    {
      BOOL v57 = v194;
      if (v194[3] >= v52)
      {
        memcpy(v56, v177, v52);
        unint64_t v58 = v57[3];
        v57[3] = v58 - v52;
        if (v58 < v52)
        {
          if (gLogDatapath)
          {
            v143 = __nwlog_obj();
            if (os_log_type_enabled(v143, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v144 = v57[3];
              *(_DWORD *)buf = 136446978;
              v204 = "_http_safe_append";
              __int16 v205 = 2082;
              v206 = "*remaining";
              __int16 v207 = 2048;
              uint64_t v208 = v52;
              __int16 v209 = 2048;
              uint64_t v210 = v144;
              _os_log_impl(&dword_1830D4000, v143, OS_LOG_TYPE_DEBUG, "%{public}s Underflow: %{public}s, decrement %llu, result %llu", buf, 0x2Au);
            }
          }
          v57[3] = 0;
        }
        v198[3] = (uint64_t)&v56[v52];
LABEL_94:
        v176[0] = MEMORY[0x1E4F143A8];
        v176[1] = 0x40000000;
        v176[2] = ___ZL36nw_http_fillout_binary_message_innerP20nw_protocol_metadatabPKhmPhm_block_invoke_29;
        v176[3] = &unk_1E5242F80;
        v176[4] = &v197;
        v176[5] = &v193;
        id v59 = v49;
        int v60 = v176;
        _nw_http_fields_enumerate_const_field((uint64_t)v59, v60);

        _Block_object_dispose(type, 8);
        os_release(v59);
        uint64_t v54 = 1;
        if (!v29) {
          goto LABEL_79;
        }
        goto LABEL_78;
      }
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      v204 = "_http_safe_append";
      v103 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t v202 = OS_LOG_TYPE_ERROR;
      char v201 = 0;
      if (__nwlog_fault(v103, &v202, &v201))
      {
        if (v202 == OS_LOG_TYPE_FAULT)
        {
          v104 = __nwlog_obj();
          os_log_type_t v105 = v202;
          if (!os_log_type_enabled(v104, v202)) {
            goto LABEL_483;
          }
          *(_DWORD *)buf = 136446210;
          v204 = "_http_safe_append";
          nw_endpoint_t v106 = "%{public}s called with null (*remaining >= length)";
          goto LABEL_482;
        }
        if (!v201)
        {
          v104 = __nwlog_obj();
          os_log_type_t v105 = v202;
          if (!os_log_type_enabled(v104, v202)) {
            goto LABEL_483;
          }
          *(_DWORD *)buf = 136446210;
          v204 = "_http_safe_append";
          nw_endpoint_t v106 = "%{public}s called with null (*remaining >= length), backtrace limit exceeded";
          goto LABEL_482;
        }
        id v145 = (char *)__nw_create_backtrace_string();
        v104 = __nwlog_obj();
        os_log_type_t v105 = v202;
        BOOL v146 = os_log_type_enabled(v104, v202);
        if (v145)
        {
          if (v146)
          {
            *(_DWORD *)buf = 136446466;
            v204 = "_http_safe_append";
            __int16 v205 = 2082;
            v206 = v145;
            _os_log_impl(&dword_1830D4000, v104, v105, "%{public}s called with null (*remaining >= length), dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v145);
          if (!v103) {
            goto LABEL_485;
          }
          goto LABEL_484;
        }
        if (v146)
        {
          *(_DWORD *)buf = 136446210;
          v204 = "_http_safe_append";
          nw_endpoint_t v106 = "%{public}s called with null (*remaining >= length), no backtrace";
LABEL_482:
          _os_log_impl(&dword_1830D4000, v104, v105, v106, buf, 0xCu);
        }
      }
    }
    else
    {
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      v204 = "_http_safe_append";
      v103 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t v202 = OS_LOG_TYPE_ERROR;
      char v201 = 0;
      if (!__nwlog_fault(v103, &v202, &v201)) {
        goto LABEL_483;
      }
      if (v202 == OS_LOG_TYPE_FAULT)
      {
        v104 = __nwlog_obj();
        os_log_type_t v105 = v202;
        if (!os_log_type_enabled(v104, v202)) {
          goto LABEL_483;
        }
        *(_DWORD *)buf = 136446210;
        v204 = "_http_safe_append";
        nw_endpoint_t v106 = "%{public}s called with null buffer";
        goto LABEL_482;
      }
      if (!v201)
      {
        v104 = __nwlog_obj();
        os_log_type_t v105 = v202;
        if (!os_log_type_enabled(v104, v202)) {
          goto LABEL_483;
        }
        *(_DWORD *)buf = 136446210;
        v204 = "_http_safe_append";
        nw_endpoint_t v106 = "%{public}s called with null buffer, backtrace limit exceeded";
        goto LABEL_482;
      }
      nw_endpoint_t v141 = (char *)__nw_create_backtrace_string();
      v104 = __nwlog_obj();
      os_log_type_t v105 = v202;
      BOOL v142 = os_log_type_enabled(v104, v202);
      if (!v141)
      {
        if (!v142) {
          goto LABEL_483;
        }
        *(_DWORD *)buf = 136446210;
        v204 = "_http_safe_append";
        nw_endpoint_t v106 = "%{public}s called with null buffer, no backtrace";
        goto LABEL_482;
      }
      if (v142)
      {
        *(_DWORD *)buf = 136446466;
        v204 = "_http_safe_append";
        __int16 v205 = 2082;
        v206 = v141;
        _os_log_impl(&dword_1830D4000, v104, v105, "%{public}s called with null buffer, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v141);
    }
LABEL_483:
    if (!v103)
    {
LABEL_485:
      v198[3] = 0;
      goto LABEL_486;
    }
LABEL_484:
    free(v103);
    goto LABEL_485;
  }
  uint64_t v63 = __nwlog_obj();
  os_log_type_enabled(v63, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446466;
  v204 = "_http_vle_encode";
  __int16 v205 = 2048;
  v206 = (const char *)v51;
  uint64_t v64 = (void *)_os_log_send_and_compose_impl();
  BOOL result = __nwlog_abort((uint64_t)v64);
  if (!result)
  {
    free(v64);
    if (v198[3]) {
      goto LABEL_94;
    }
LABEL_486:
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v204 = "nw_http_fillout_binary_message_inner";
    v168 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v202 = OS_LOG_TYPE_ERROR;
    char v201 = 0;
    if (__nwlog_fault(v168, &v202, &v201))
    {
      if (v202 == OS_LOG_TYPE_FAULT)
      {
        id v169 = __nwlog_obj();
        os_log_type_t v170 = v202;
        if (os_log_type_enabled(v169, v202))
        {
          *(_DWORD *)buf = 136446210;
          v204 = "nw_http_fillout_binary_message_inner";
          v171 = "%{public}s called with null cursor";
LABEL_499:
          _os_log_impl(&dword_1830D4000, v169, v170, v171, buf, 0xCu);
        }
      }
      else if (v201)
      {
        v172 = (char *)__nw_create_backtrace_string();
        id v169 = __nwlog_obj();
        os_log_type_t v170 = v202;
        BOOL v173 = os_log_type_enabled(v169, v202);
        if (v172)
        {
          if (v173)
          {
            *(_DWORD *)buf = 136446466;
            v204 = "nw_http_fillout_binary_message_inner";
            __int16 v205 = 2082;
            v206 = v172;
            _os_log_impl(&dword_1830D4000, v169, v170, "%{public}s called with null cursor, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v172);
          goto LABEL_500;
        }
        if (v173)
        {
          *(_DWORD *)buf = 136446210;
          v204 = "nw_http_fillout_binary_message_inner";
          v171 = "%{public}s called with null cursor, no backtrace";
          goto LABEL_499;
        }
      }
      else
      {
        id v169 = __nwlog_obj();
        os_log_type_t v170 = v202;
        if (os_log_type_enabled(v169, v202))
        {
          *(_DWORD *)buf = 136446210;
          v204 = "nw_http_fillout_binary_message_inner";
          v171 = "%{public}s called with null cursor, backtrace limit exceeded";
          goto LABEL_499;
        }
      }
    }
LABEL_500:
    if (v168) {
      free(v168);
    }
    _Block_object_dispose(type, 8);
    os_release(v49);
    goto LABEL_527;
  }
LABEL_529:
  __break(1u);
  return result;
}

id nw_quic_connection_get_tls_state(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (nw_protocol_options_is_quic_connection(v1))
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x3032000000;
    uint64_t v16 = __Block_byref_object_copy__55989;
    size_t v17 = __Block_byref_object_dispose__55990;
    id v18 = 0;
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_quic_connection_get_tls_state_block_invoke;
    v12[3] = &unk_1E5248E90;
    v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    id v2 = *(id *)(*(void *)&buf[8] + 40);
    _Block_object_dispose(buf, 8);

    goto LABEL_3;
  }
  uint64_t v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_quic_connection_get_tls_state";
  long long v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_tls_state";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_options_is_quic_connection(options)", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_quic_connection_get_tls_state";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_tls_state";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_tls_state";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
  id v2 = 0;
LABEL_3:

  return v2;
}

void sub_1833D4A4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);

  _Unwind_Resume(a1);
}

id nw_quic_connection_get_source_connection_id(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (nw_protocol_options_is_quic_connection(v1))
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x3032000000;
    uint64_t v16 = __Block_byref_object_copy__55989;
    size_t v17 = __Block_byref_object_dispose__55990;
    id v18 = 0;
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_quic_connection_get_source_connection_id_block_invoke;
    v12[3] = &unk_1E5248E90;
    v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    id v2 = *(id *)(*(void *)&buf[8] + 40);
    _Block_object_dispose(buf, 8);

    goto LABEL_3;
  }
  uint64_t v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_quic_connection_get_source_connection_id";
  long long v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_source_connection_id";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_options_is_quic_connection(options)", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_quic_connection_get_source_connection_id";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_source_connection_id";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_source_connection_id";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
  id v2 = 0;
LABEL_3:

  return v2;
}

void sub_1833D4DC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);

  _Unwind_Resume(a1);
}

id nw_quic_connection_get_quic_state(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (nw_protocol_options_is_quic_connection(v1))
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x3032000000;
    uint64_t v16 = __Block_byref_object_copy__55989;
    size_t v17 = __Block_byref_object_dispose__55990;
    id v18 = 0;
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_quic_connection_get_quic_state_block_invoke;
    v12[3] = &unk_1E5248E90;
    v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    id v2 = *(id *)(*(void *)&buf[8] + 40);
    _Block_object_dispose(buf, 8);

    goto LABEL_3;
  }
  uint64_t v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_quic_connection_get_quic_state";
  long long v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_quic_state";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_options_is_quic_connection(options)", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_quic_connection_get_quic_state";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_quic_state";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_quic_state";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
  id v2 = 0;
LABEL_3:

  return v2;
}

void sub_1833D5144(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);

  _Unwind_Resume(a1);
}

void nw_protocol_instance_notify_connection_id_changed(void *a1, uint64_t a2, void *a3)
{
  uint64_t v72 = *MEMORY[0x1E4F143B8];
  long long v5 = a1;
  int v6 = a3;
  size_t size = dispatch_data_get_size(v6);
  if (!size)
  {
    uint64_t v19 = __nwlog_obj();
    os_log_type_enabled(v19, OS_LOG_TYPE_ERROR);
    *(_DWORD *)applier = 136446210;
    *(void *)&applier[4] = "strict_calloc";
    uint64_t v20 = (void *)_os_log_send_and_compose_impl();

    if (__nwlog_abort((uint64_t)v20)) {
      goto LABEL_116;
    }
    free(v20);
  }
  uint64_t v8 = malloc_type_calloc(1uLL, size, 0xEAFB8F1AuLL);
  if (v8) {
    goto LABEL_3;
  }
  id v21 = __nwlog_obj();
  os_log_type_enabled(v21, OS_LOG_TYPE_ERROR);
  *(_DWORD *)applier = 136446722;
  *(void *)&applier[4] = "strict_calloc";
  *(_WORD *)&applier[12] = 2048;
  *(void *)&applier[14] = 1;
  *(_WORD *)&applier[22] = 2048;
  __int16 v69 = (void *)size;
  int v22 = (void *)_os_log_send_and_compose_impl();

  if (__nwlog_abort((uint64_t)v22))
  {
LABEL_116:
    __break(1u);
    JUMPOUT(0x1833D5E1CLL);
  }
  free(v22);
LABEL_3:
  *(void *)uint64_t v64 = 0;
  char v65 = v64;
  uint64_t v66 = 0x2000000000;
  uint64_t v67 = 0;
  int v60 = 0;
  int v61 = (uint64_t *)&v60;
  uint64_t v62 = 0x2000000000;
  uint64_t v63 = v8;
  if (v6)
  {
    *(void *)applier = MEMORY[0x1E4F143A8];
    *(void *)&applier[8] = 0x40000000;
    *(void *)&applier[16] = __nw_dispatch_data_copyout_block_invoke;
    __int16 v69 = &unk_1E5242B60;
    *((void *)&v70 + 1) = &v60;
    size_t v71 = size;
    *(void *)&long long v70 = v64;
    dispatch_data_apply(v6, applier);
    uint64_t v9 = *((void *)v65 + 3);
  }
  else
  {
    uint64_t v9 = 0;
  }
  _Block_object_dispose(&v60, 8);
  _Block_object_dispose(v64, 8);
  if (v9 != size) {
    goto LABEL_28;
  }
  if (!v5)
  {
    id v29 = __nwlog_obj();
    *(_DWORD *)applier = 136446210;
    *(void *)&applier[4] = "__nw_protocol_get_output_handler";
    unint64_t v30 = (char *)_os_log_send_and_compose_impl();

    v64[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v60) = 0;
    if (__nwlog_fault(v30, v64, &v60))
    {
      if (v64[0] == OS_LOG_TYPE_FAULT)
      {
        size_t v31 = __nwlog_obj();
        os_log_type_t v32 = v64[0];
        if (os_log_type_enabled(v31, v64[0]))
        {
          *(_DWORD *)applier = 136446210;
          *(void *)&applier[4] = "__nw_protocol_get_output_handler";
          _os_log_impl(&dword_1830D4000, v31, v32, "%{public}s called with null protocol", applier, 0xCu);
        }
      }
      else if ((_BYTE)v60)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        size_t v31 = __nwlog_obj();
        os_log_type_t v39 = v64[0];
        BOOL v40 = os_log_type_enabled(v31, v64[0]);
        if (backtrace_string)
        {
          if (v40)
          {
            *(_DWORD *)applier = 136446466;
            *(void *)&applier[4] = "__nw_protocol_get_output_handler";
            *(_WORD *)&applier[12] = 2082;
            *(void *)&applier[14] = backtrace_string;
            _os_log_impl(&dword_1830D4000, v31, v39, "%{public}s called with null protocol, dumping backtrace:%{public}s", applier, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_91;
        }
        if (v40)
        {
          *(_DWORD *)applier = 136446210;
          *(void *)&applier[4] = "__nw_protocol_get_output_handler";
          _os_log_impl(&dword_1830D4000, v31, v39, "%{public}s called with null protocol, no backtrace", applier, 0xCu);
        }
      }
      else
      {
        size_t v31 = __nwlog_obj();
        os_log_type_t v47 = v64[0];
        if (os_log_type_enabled(v31, v64[0]))
        {
          *(_DWORD *)applier = 136446210;
          *(void *)&applier[4] = "__nw_protocol_get_output_handler";
          _os_log_impl(&dword_1830D4000, v31, v47, "%{public}s called with null protocol, backtrace limit exceeded", applier, 0xCu);
        }
      }
    }
LABEL_91:
    if (v30) {
      free(v30);
    }
LABEL_93:
    id v49 = __nwlog_obj();
    *(_DWORD *)applier = 136446210;
    *(void *)&applier[4] = "__nw_protocol_notify";
    int v50 = (char *)_os_log_send_and_compose_impl();

    v64[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v60) = 0;
    if (__nwlog_fault(v50, v64, &v60))
    {
      if (v64[0] == OS_LOG_TYPE_FAULT)
      {
        unint64_t v51 = __nwlog_obj();
        os_log_type_t v52 = v64[0];
        if (os_log_type_enabled(v51, v64[0]))
        {
          *(_DWORD *)applier = 136446210;
          *(void *)&applier[4] = "__nw_protocol_notify";
          _os_log_impl(&dword_1830D4000, v51, v52, "%{public}s called with null protocol", applier, 0xCu);
        }
      }
      else if ((_BYTE)v60)
      {
        uint64_t v53 = (char *)__nw_create_backtrace_string();
        unint64_t v51 = __nwlog_obj();
        os_log_type_t v54 = v64[0];
        BOOL v55 = os_log_type_enabled(v51, v64[0]);
        if (v53)
        {
          if (v55)
          {
            *(_DWORD *)applier = 136446466;
            *(void *)&applier[4] = "__nw_protocol_notify";
            *(_WORD *)&applier[12] = 2082;
            *(void *)&applier[14] = v53;
            _os_log_impl(&dword_1830D4000, v51, v54, "%{public}s called with null protocol, dumping backtrace:%{public}s", applier, 0x16u);
          }

          free(v53);
          goto LABEL_109;
        }
        if (v55)
        {
          *(_DWORD *)applier = 136446210;
          *(void *)&applier[4] = "__nw_protocol_notify";
          _os_log_impl(&dword_1830D4000, v51, v54, "%{public}s called with null protocol, no backtrace", applier, 0xCu);
        }
      }
      else
      {
        unint64_t v51 = __nwlog_obj();
        os_log_type_t v56 = v64[0];
        if (os_log_type_enabled(v51, v64[0]))
        {
          *(_DWORD *)applier = 136446210;
          *(void *)&applier[4] = "__nw_protocol_notify";
          _os_log_impl(&dword_1830D4000, v51, v56, "%{public}s called with null protocol, backtrace limit exceeded", applier, 0xCu);
        }
      }
    }
LABEL_109:
    if (v50) {
      free(v50);
    }
    goto LABEL_28;
  }
  BOOL v10 = (void *)*(v5 - 8);
  if (!v10) {
    goto LABEL_93;
  }
  os_log_type_t v11 = (void *)v10[5];
  if (v11 == &nw_protocol_ref_counted_handle)
  {
    uint64_t v13 = v10[11];
    if (v13) {
      v10[11] = v13 + 1;
    }
    char v12 = -1;
  }
  else
  {
    char v12 = 0;
  }
  *(void *)uint64_t v64 = v10;
  LOBYTE(v65) = v12;
  char v14 = (void *)*(v5 - 7);
  if (v14 == &nw_protocol_ref_counted_handle)
  {
    uint64_t v16 = *(v5 - 1);
    if (v16) {
      *(v5 - 1) = v16 + 1;
    }
    char v15 = -1;
  }
  else
  {
    char v15 = 0;
  }
  int v60 = v5 - 12;
  LOBYTE(v61) = v15;
  if (!a2)
  {
    BOOL v33 = __nwlog_obj();
    *(_DWORD *)applier = 136446210;
    *(void *)&applier[4] = "__nw_protocol_notify";
    int v25 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v58 = 0;
    if (!__nwlog_fault(v25, &type, &v58)) {
      goto LABEL_114;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v26 = __nwlog_obj();
      os_log_type_t v34 = type;
      if (os_log_type_enabled(v26, type))
      {
        *(_DWORD *)applier = 136446210;
        *(void *)&applier[4] = "__nw_protocol_notify";
        _os_log_impl(&dword_1830D4000, v26, v34, "%{public}s called with null type", applier, 0xCu);
      }
    }
    else if (v58)
    {
      size_t v41 = (char *)__nw_create_backtrace_string();
      int v26 = __nwlog_obj();
      os_log_type_t v42 = type;
      BOOL v43 = os_log_type_enabled(v26, type);
      if (v41)
      {
        if (v43)
        {
          *(_DWORD *)applier = 136446466;
          *(void *)&applier[4] = "__nw_protocol_notify";
          *(_WORD *)&applier[12] = 2082;
          *(void *)&applier[14] = v41;
          _os_log_impl(&dword_1830D4000, v26, v42, "%{public}s called with null type, dumping backtrace:%{public}s", applier, 0x16u);
        }

        free(v41);
        if (!v25) {
          goto LABEL_23;
        }
        goto LABEL_115;
      }
      if (v43)
      {
        *(_DWORD *)applier = 136446210;
        *(void *)&applier[4] = "__nw_protocol_notify";
        _os_log_impl(&dword_1830D4000, v26, v42, "%{public}s called with null type, no backtrace", applier, 0xCu);
      }
    }
    else
    {
      int v26 = __nwlog_obj();
      os_log_type_t v48 = type;
      if (os_log_type_enabled(v26, type))
      {
        *(_DWORD *)applier = 136446210;
        *(void *)&applier[4] = "__nw_protocol_notify";
        _os_log_impl(&dword_1830D4000, v26, v48, "%{public}s called with null type, backtrace limit exceeded", applier, 0xCu);
      }
    }
    goto LABEL_113;
  }
  uint64_t v17 = v10[3];
  if (!v17 || (id v18 = *(void (**)(void *, void *, uint64_t, void *, size_t))(v17 + 160)) == 0)
  {
    id v23 = __nwlog_obj();
    uint64_t v24 = (const char *)v10[2];
    *(_DWORD *)applier = 136446722;
    *(void *)&applier[4] = "__nw_protocol_notify";
    if (!v24) {
      uint64_t v24 = "invalid";
    }
    *(_WORD *)&applier[12] = 2082;
    *(void *)&applier[14] = v24;
    *(_WORD *)&applier[22] = 2048;
    __int16 v69 = v10;
    int v25 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v58 = 0;
    if (__nwlog_fault(v25, &type, &v58))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        int v26 = __nwlog_obj();
        os_log_type_t v27 = type;
        if (os_log_type_enabled(v26, type))
        {
          unint64_t v28 = (const char *)v10[2];
          if (!v28) {
            unint64_t v28 = "invalid";
          }
          *(_DWORD *)applier = 136446722;
          *(void *)&applier[4] = "__nw_protocol_notify";
          *(_WORD *)&applier[12] = 2082;
          *(void *)&applier[14] = v28;
          *(_WORD *)&applier[22] = 2048;
          __int16 v69 = v10;
          _os_log_impl(&dword_1830D4000, v26, v27, "%{public}s protocol %{public}s (%p) has invalid notify callback", applier, 0x20u);
        }
LABEL_113:

        goto LABEL_114;
      }
      if (!v58)
      {
        int v26 = __nwlog_obj();
        os_log_type_t v44 = type;
        if (os_log_type_enabled(v26, type))
        {
          int v45 = (const char *)v10[2];
          if (!v45) {
            int v45 = "invalid";
          }
          *(_DWORD *)applier = 136446722;
          *(void *)&applier[4] = "__nw_protocol_notify";
          *(_WORD *)&applier[12] = 2082;
          *(void *)&applier[14] = v45;
          *(_WORD *)&applier[22] = 2048;
          __int16 v69 = v10;
          _os_log_impl(&dword_1830D4000, v26, v44, "%{public}s protocol %{public}s (%p) has invalid notify callback, backtrace limit exceeded", applier, 0x20u);
        }
        goto LABEL_113;
      }
      uint64_t v35 = (char *)__nw_create_backtrace_string();
      int v26 = __nwlog_obj();
      os_log_type_t v57 = type;
      BOOL v36 = os_log_type_enabled(v26, type);
      if (!v35)
      {
        if (v36)
        {
          unsigned int v46 = (const char *)v10[2];
          if (!v46) {
            unsigned int v46 = "invalid";
          }
          *(_DWORD *)applier = 136446722;
          *(void *)&applier[4] = "__nw_protocol_notify";
          *(_WORD *)&applier[12] = 2082;
          *(void *)&applier[14] = v46;
          *(_WORD *)&applier[22] = 2048;
          __int16 v69 = v10;
          _os_log_impl(&dword_1830D4000, v26, v57, "%{public}s protocol %{public}s (%p) has invalid notify callback, no backtrace", applier, 0x20u);
        }
        goto LABEL_113;
      }
      if (v36)
      {
        char v37 = (const char *)v10[2];
        if (!v37) {
          char v37 = "invalid";
        }
        *(_DWORD *)applier = 136446978;
        *(void *)&applier[4] = "__nw_protocol_notify";
        *(_WORD *)&applier[12] = 2082;
        *(void *)&applier[14] = v37;
        *(_WORD *)&applier[22] = 2048;
        __int16 v69 = v10;
        LOWORD(v70) = 2082;
        *(void *)((char *)&v70 + 2) = v35;
        _os_log_impl(&dword_1830D4000, v26, v57, "%{public}s protocol %{public}s (%p) has invalid notify callback, dumping backtrace:%{public}s", applier, 0x2Au);
      }

      free(v35);
    }
LABEL_114:
    if (!v25) {
      goto LABEL_23;
    }
LABEL_115:
    free(v25);
    goto LABEL_23;
  }
  v18(v10, v5 - 12, a2, v8, size);
LABEL_23:
  if (v14 == &nw_protocol_ref_counted_handle)
  {
    nw::release_if_needed<nw_protocol *>((uint64_t *)&v60);
    if (v11 != &nw_protocol_ref_counted_handle) {
      goto LABEL_28;
    }
  }
  else if (v11 != &nw_protocol_ref_counted_handle)
  {
    goto LABEL_28;
  }
  nw::release_if_needed<nw_protocol *>((uint64_t *)v64);
LABEL_28:
  if (v8) {
    free(v8);
  }
}

BOOL __nw_dispatch_data_copyout_block_invoke(void *a1, int a2, int a3, void *__src, size_t a5)
{
  unint64_t v5 = a1[6];
  unint64_t v6 = *(void *)(*(void *)(a1[4] + 8) + 24);
  if (v5 - v6 >= a5) {
    size_t v7 = a5;
  }
  else {
    size_t v7 = v5 - v6;
  }
  if (v7)
  {
    memcpy((void *)(*(void *)(*(void *)(a1[5] + 8) + 24) + v6), __src, v7);
    *(void *)(*(void *)(a1[4] + 8) + 24) += v7;
    unint64_t v6 = *(void *)(*(void *)(a1[4] + 8) + 24);
    unint64_t v5 = a1[6];
  }
  return v6 < v5;
}

void nw_protocol_implementation_notify(void *a1, nw_protocol *a2, unsigned int a3, unsigned __int8 *a4, uint64_t a5)
{
  uint64_t v142 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v9 = (void *)a1[5];
    BOOL v10 = a1 + 12;
    if (v9 == &nw_protocol_ref_counted_handle) {
      os_log_type_t v11 = a1 + 12;
    }
    else {
      os_log_type_t v11 = 0;
    }
    char v12 = v11;
    uint64_t v13 = (char *)v12;
    if (v9 == &nw_protocol_ref_counted_handle)
    {
      uint64_t v14 = v12[1];
      if (v14)
      {
        if (*(void *)(v14 + 80))
        {
          if (a2)
          {
            if ((*((char *)v12 + 405) & 0x80000000) == 0)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              char v15 = (id)gLogObj;
              if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
              {
                if (a3 > 0x1A) {
                  uint64_t v16 = "unknown";
                }
                else {
                  uint64_t v16 = off_1E5241E58[a3];
                }
                *(_DWORD *)buf = 136446978;
                *(void *)&uint8_t buf[4] = "nw_protocol_implementation_notify";
                __int16 v136 = 2082;
                v137 = v13 + 407;
                __int16 v138 = 2080;
                v139 = " ";
                __int16 v140 = 2082;
                nw_endpoint_t v141 = v16;
                _os_log_impl(&dword_1830D4000, v15, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sreceived notification %{public}s", buf, 0x2Au);
              }
            }
            switch(a3)
            {
              case 6u:
                int v26 = *(void (**)(char *))(*(void *)(*((void *)v13 + 1) + 80) + 160);
                if (!v26) {
                  goto LABEL_77;
                }
                v26(v13);
                goto LABEL_122;
              case 7u:
                if (*(_DWORD *)(*((void *)v13 + 1) + 64) == 3)
                {
                  BOOL node = nw_hash_table_get_node(*((void *)v13 + 29), (uint64_t)a2, 8);
                  if (node)
                  {
                    callbacks = a2->callbacks;
                    if (callbacks)
                    {
                      supports_external_data = (uint64_t (*)(nw_protocol *))callbacks->supports_external_data;
                      if (supports_external_data)
                      {
                        uint64_t v30 = node;
                        handle = a2->handle;
                        if (handle == &nw_protocol_ref_counted_handle)
                        {
                          int v60 = a2[1].callbacks;
                          if (v60) {
                            a2[1].callbacks = (nw_protocol_callbacks *)((char *)&v60->add_input_handler + 1);
                          }
                          char v32 = -1;
                        }
                        else
                        {
                          char v32 = 0;
                        }
                        *(void *)buf = a2;
                        buf[8] = v32;
                        int v61 = supports_external_data(a2);
                        if (handle == &nw_protocol_ref_counted_handle) {
                          nw::release_if_needed<nw_protocol *>((uint64_t *)buf);
                        }
                        if (v61) {
                          __int16 v62 = 1024;
                        }
                        else {
                          __int16 v62 = 0;
                        }
                        *(_WORD *)(v30 + 84) = *(_WORD *)(v30 + 84) & 0xFBFF | v62;
                      }
                    }
                  }
                }
                else if (*((nw_protocol **)v13 - 6) == a2)
                {
                  unsigned int v46 = a2->callbacks;
                  if (v46)
                  {
                    os_log_type_t v47 = (uint64_t (*)(nw_protocol *))v46->supports_external_data;
                    if (v47)
                    {
                      os_log_type_t v48 = a2->handle;
                      if (v48 == &nw_protocol_ref_counted_handle)
                      {
                        char v65 = a2[1].callbacks;
                        if (v65) {
                          a2[1].callbacks = (nw_protocol_callbacks *)((char *)&v65->add_input_handler + 1);
                        }
                        char v49 = -1;
                      }
                      else
                      {
                        char v49 = 0;
                      }
                      *(void *)buf = a2;
                      buf[8] = v49;
                      int v66 = v47(a2);
                      if (v48 == &nw_protocol_ref_counted_handle) {
                        nw::release_if_needed<nw_protocol *>((uint64_t *)buf);
                      }
                      if (v66) {
                        char v67 = 2;
                      }
                      else {
                        char v67 = 0;
                      }
                      char v64 = v13[403] & 0xFD | v67;
                      goto LABEL_121;
                    }
                  }
                }
                goto LABEL_122;
              case 0xDu:
              case 0xFu:
              case 0x10u:
                uint64_t v17 = (void *)a1[4];
                if (!v17) {
                  goto LABEL_122;
                }
                uint64_t v18 = v17[3];
                if (!v18) {
                  goto LABEL_122;
                }
                uint64_t v19 = *(void (**)(void))(v18 + 160);
                if (!v19) {
                  goto LABEL_122;
                }
                uint64_t v20 = (void *)v17[5];
                if (v20 == &nw_protocol_ref_counted_handle)
                {
                  uint64_t v22 = v17[11];
                  if (v22) {
                    v17[11] = v22 + 1;
                  }
                  char v21 = -1;
                }
                else
                {
                  char v21 = 0;
                }
                *(void *)buf = v17;
                buf[8] = v21;
                id v23 = a2->handle;
                if (v23 == &nw_protocol_ref_counted_handle)
                {
                  int v25 = a2[1].callbacks;
                  if (v25) {
                    a2[1].callbacks = (nw_protocol_callbacks *)((char *)&v25->add_input_handler + 1);
                  }
                  char v24 = -1;
                }
                else
                {
                  char v24 = 0;
                }
                *(void *)os_log_type_t type = a2;
                char v134 = v24;
                v19();
                if (v23 == &nw_protocol_ref_counted_handle)
                {
                  nw::release_if_needed<nw_protocol *>((uint64_t *)type);
                  if (v20 == &nw_protocol_ref_counted_handle) {
LABEL_34:
                  }
                    nw::release_if_needed<nw_protocol *>((uint64_t *)buf);
                }
                else if (v20 == &nw_protocol_ref_counted_handle)
                {
                  goto LABEL_34;
                }
LABEL_122:

                return;
              case 0x15u:
                if (a4 && a5 == 1)
                {
                  int v41 = *a4;
                  if (v41 || (unint64_t)(*((void *)v13 + 48) + 1) < 2)
                  {
                    uint64_t v42 = *((void *)v13 + 1);
                    uint64_t v43 = *(void *)(v42 + 80);
                    if (v43 && *(void *)(v43 + 112))
                    {
                      if ((v13[405] & 0x80000000) == 0)
                      {
                        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                        networkd_settings_init();
                        os_log_type_t v44 = (id)gLogObj;
                        if (os_log_type_enabled(v44, OS_LOG_TYPE_DEBUG))
                        {
                          int v45 = " not";
                          *(_DWORD *)buf = 136446978;
                          *(void *)&uint8_t buf[4] = "nw_protocol_implementation_notify";
                          v137 = v13 + 407;
                          __int16 v138 = 2080;
                          v139 = " ";
                          __int16 v136 = 2082;
                          if (v41) {
                            int v45 = "";
                          }
                          __int16 v140 = 2082;
                          nw_endpoint_t v141 = v45;
                          _os_log_impl(&dword_1830D4000, v44, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sOutbound data is%{public}s pending", buf, 0x2Au);
                        }

                        uint64_t v42 = *((void *)v13 + 1);
                      }
                      v13[403] &= ~0x80u;
                      (*(void (**)(char *, BOOL))(*(void *)(v42 + 80) + 112))(v13, v41 != 0);
                    }
                  }
                  else
                  {
                    if ((v13[405] & 0x80000000) == 0)
                    {
                      uint64_t v63 = __nwlog_obj();
                      if (os_log_type_enabled(v63, OS_LOG_TYPE_DEBUG))
                      {
                        *(_DWORD *)buf = 136446722;
                        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_notify";
                        __int16 v136 = 2082;
                        v137 = v13 + 407;
                        __int16 v138 = 2080;
                        v139 = " ";
                        _os_log_impl(&dword_1830D4000, v63, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sOutbound data is not pending, deferring until current flow is done with connected", buf, 0x20u);
                      }
                    }
                    char v64 = v13[403] | 0x80;
LABEL_121:
                    v13[403] = v64;
                  }
                }
                goto LABEL_122;
              default:
                if (a3 != 20 || !a4 || a5 != 8) {
                  goto LABEL_77;
                }
                BOOL v33 = (void *)a1[5];
                if (v33 == &nw_protocol_ref_counted_handle) {
                  os_log_type_t v34 = v10;
                }
                else {
                  os_log_type_t v34 = 0;
                }
                uint64_t v35 = v34;
                BOOL v36 = v35;
                if (v33 == &nw_protocol_ref_counted_handle)
                {
                  parent_definition = v35->parent_definition;
                  if (parent_definition)
                  {
                    if (parent_definition->extended_state)
                    {
                      *(void *)buf = 0;
                      uint64_t v38 = nw_protocol_implementation_lookup_path_by_protocol(v35, a2, (unint64_t *)buf);
                      var18 = (void (*)(NWConcrete_nw_protocol_instance *, uint64_t, unsigned __int8 *))v36->parent_definition->extended_state->var18;
                      if (v38)
                      {
                        if (var18)
                        {
                          uint64_t v40 = *(void *)buf;
LABEL_75:
                          var18(v36, v40, a4);
                        }
                      }
                      else if (var18)
                      {
                        uint64_t v40 = 0;
                        goto LABEL_75;
                      }
LABEL_76:

LABEL_77:
                      if (*(_DWORD *)(*((void *)v13 + 1) + 64) == 3)
                      {
                        int v50 = (char *)*((void *)v13 + 29);
                        v127[0] = MEMORY[0x1E4F143A8];
                        v127[1] = 3221225472;
                        v127[2] = ___ZL33nw_protocol_implementation_notifyP11nw_protocolS0_31nw_protocol_notification_type_tPvm_block_invoke;
                        v127[3] = &__block_descriptor_60_e23_B16__0__nw_hash_node__8l;
                        unsigned int v128 = a3;
                        v127[4] = a2;
                        v127[5] = a4;
                        v127[6] = a5;
                        nw_hash_table_apply(v50, (uint64_t)v127);
                        goto LABEL_122;
                      }
                      unint64_t v51 = (void *)a1[6];
                      if (!v51) {
                        goto LABEL_122;
                      }
                      uint64_t v52 = v51[3];
                      if (!v52) {
                        goto LABEL_122;
                      }
                      uint64_t v53 = *(void (**)(void *, nw_protocol *))(v52 + 160);
                      if (!v53) {
                        goto LABEL_122;
                      }
                      os_log_type_t v54 = (void *)v51[5];
                      if (v54 == &nw_protocol_ref_counted_handle)
                      {
                        uint64_t v56 = v51[11];
                        if (v56) {
                          v51[11] = v56 + 1;
                        }
                        char v55 = -1;
                      }
                      else
                      {
                        char v55 = 0;
                      }
                      *(void *)os_log_type_t type = v51;
                      char v134 = v55;
                      os_log_type_t v57 = a2->handle;
                      if (v57 == &nw_protocol_ref_counted_handle)
                      {
                        id v59 = a2[1].callbacks;
                        if (v59) {
                          a2[1].callbacks = (nw_protocol_callbacks *)((char *)&v59->add_input_handler + 1);
                        }
                        char v58 = -1;
                      }
                      else
                      {
                        char v58 = 0;
                      }
                      v131 = a2;
                      char v132 = v58;
                      if (a3)
                      {
                        v53(v51, a2);
LABEL_94:
                        if (v57 == &nw_protocol_ref_counted_handle) {
                          nw::release_if_needed<nw_protocol *>((uint64_t *)&v131);
                        }
                        if (v54 == &nw_protocol_ref_counted_handle) {
                          nw::release_if_needed<nw_protocol *>((uint64_t *)type);
                        }
                        goto LABEL_122;
                      }
                      v107 = __nwlog_obj();
                      *(_DWORD *)buf = 136446210;
                      *(void *)&uint8_t buf[4] = "__nw_protocol_notify";
                      BOOL v108 = (char *)_os_log_send_and_compose_impl();

                      os_log_type_t v130 = OS_LOG_TYPE_ERROR;
                      char v129 = 0;
                      if (__nwlog_fault(v108, &v130, &v129))
                      {
                        if (v130 == OS_LOG_TYPE_FAULT)
                        {
                          v109 = __nwlog_obj();
                          os_log_type_t v110 = v130;
                          if (os_log_type_enabled(v109, v130))
                          {
                            *(_DWORD *)buf = 136446210;
                            *(void *)&uint8_t buf[4] = "__nw_protocol_notify";
                            _os_log_impl(&dword_1830D4000, v109, v110, "%{public}s called with null type", buf, 0xCu);
                          }
                        }
                        else if (v129)
                        {
                          backtrace_string = (char *)__nw_create_backtrace_string();
                          v109 = __nwlog_obj();
                          os_log_type_t v116 = v130;
                          BOOL v117 = os_log_type_enabled(v109, v130);
                          if (backtrace_string)
                          {
                            if (v117)
                            {
                              *(_DWORD *)buf = 136446466;
                              *(void *)&uint8_t buf[4] = "__nw_protocol_notify";
                              __int16 v136 = 2082;
                              v137 = backtrace_string;
                              _os_log_impl(&dword_1830D4000, v109, v116, "%{public}s called with null type, dumping backtrace:%{public}s", buf, 0x16u);
                            }

                            free(backtrace_string);
                            goto LABEL_275;
                          }
                          if (v117)
                          {
                            *(_DWORD *)buf = 136446210;
                            *(void *)&uint8_t buf[4] = "__nw_protocol_notify";
                            _os_log_impl(&dword_1830D4000, v109, v116, "%{public}s called with null type, no backtrace", buf, 0xCu);
                          }
                        }
                        else
                        {
                          v109 = __nwlog_obj();
                          os_log_type_t v121 = v130;
                          if (os_log_type_enabled(v109, v130))
                          {
                            *(_DWORD *)buf = 136446210;
                            *(void *)&uint8_t buf[4] = "__nw_protocol_notify";
                            _os_log_impl(&dword_1830D4000, v109, v121, "%{public}s called with null type, backtrace limit exceeded", buf, 0xCu);
                          }
                        }
                      }
LABEL_275:
                      if (v108) {
                        free(v108);
                      }
                      goto LABEL_94;
                    }
                    os_log_type_t v105 = __nwlog_obj();
                    *(_DWORD *)buf = 136446210;
                    *(void *)&uint8_t buf[4] = "nw_protocol_implementation_link_congestion_info";
                    int v125 = (void *)_os_log_send_and_compose_impl();

                    type[0] = OS_LOG_TYPE_ERROR;
                    LOBYTE(v131) = 0;
                    if (!__nwlog_fault((const char *)v125, type, &v131))
                    {
LABEL_270:
                      if (v125) {
                        free(v125);
                      }
                      goto LABEL_76;
                    }
                    if (type[0] == OS_LOG_TYPE_FAULT)
                    {
                      BOOL v101 = __nwlog_obj();
                      os_log_type_t v106 = type[0];
                      if (os_log_type_enabled(v101, type[0]))
                      {
                        *(_DWORD *)buf = 136446210;
                        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_link_congestion_info";
                        _os_log_impl(&dword_1830D4000, v101, v106, "%{public}s called with null instance->parent_definition->extended_state", buf, 0xCu);
                      }
LABEL_269:

                      goto LABEL_270;
                    }
                    if (!(_BYTE)v131)
                    {
                      BOOL v101 = __nwlog_obj();
                      os_log_type_t v120 = type[0];
                      if (os_log_type_enabled(v101, type[0]))
                      {
                        *(_DWORD *)buf = 136446210;
                        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_link_congestion_info";
                        _os_log_impl(&dword_1830D4000, v101, v120, "%{public}s called with null instance->parent_definition->extended_state, backtrace limit exceeded", buf, 0xCu);
                      }
                      goto LABEL_269;
                    }
                    BOOL v111 = (char *)__nw_create_backtrace_string();
                    BOOL v101 = __nwlog_obj();
                    os_log_type_t v124 = type[0];
                    BOOL v114 = os_log_type_enabled(v101, type[0]);
                    if (!v111)
                    {
                      if (v114)
                      {
                        *(_DWORD *)buf = 136446210;
                        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_link_congestion_info";
                        _os_log_impl(&dword_1830D4000, v101, v124, "%{public}s called with null instance->parent_definition->extended_state, no backtrace", buf, 0xCu);
                      }
                      goto LABEL_269;
                    }
                    if (v114)
                    {
                      *(_DWORD *)buf = 136446466;
                      *(void *)&uint8_t buf[4] = "nw_protocol_implementation_link_congestion_info";
                      __int16 v136 = 2082;
                      v137 = v111;
                      _os_log_impl(&dword_1830D4000, v101, v124, "%{public}s called with null instance->parent_definition->extended_state, dumping backtrace:%{public}s", buf, 0x16u);
                    }
                  }
                  else
                  {
                    v103 = __nwlog_obj();
                    *(_DWORD *)buf = 136446210;
                    *(void *)&uint8_t buf[4] = "nw_protocol_implementation_link_congestion_info";
                    int v125 = (void *)_os_log_send_and_compose_impl();

                    type[0] = OS_LOG_TYPE_ERROR;
                    LOBYTE(v131) = 0;
                    if (!__nwlog_fault((const char *)v125, type, &v131)) {
                      goto LABEL_270;
                    }
                    if (type[0] == OS_LOG_TYPE_FAULT)
                    {
                      BOOL v101 = __nwlog_obj();
                      os_log_type_t v104 = type[0];
                      if (os_log_type_enabled(v101, type[0]))
                      {
                        *(_DWORD *)buf = 136446210;
                        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_link_congestion_info";
                        _os_log_impl(&dword_1830D4000, v101, v104, "%{public}s called with null instance->parent_definition", buf, 0xCu);
                      }
                      goto LABEL_269;
                    }
                    if (!(_BYTE)v131)
                    {
                      BOOL v101 = __nwlog_obj();
                      os_log_type_t v119 = type[0];
                      if (os_log_type_enabled(v101, type[0]))
                      {
                        *(_DWORD *)buf = 136446210;
                        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_link_congestion_info";
                        _os_log_impl(&dword_1830D4000, v101, v119, "%{public}s called with null instance->parent_definition, backtrace limit exceeded", buf, 0xCu);
                      }
                      goto LABEL_269;
                    }
                    BOOL v111 = (char *)__nw_create_backtrace_string();
                    BOOL v101 = __nwlog_obj();
                    os_log_type_t v123 = type[0];
                    BOOL v113 = os_log_type_enabled(v101, type[0]);
                    if (!v111)
                    {
                      if (v113)
                      {
                        *(_DWORD *)buf = 136446210;
                        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_link_congestion_info";
                        _os_log_impl(&dword_1830D4000, v101, v123, "%{public}s called with null instance->parent_definition, no backtrace", buf, 0xCu);
                      }
                      goto LABEL_269;
                    }
                    if (v113)
                    {
                      *(_DWORD *)buf = 136446466;
                      *(void *)&uint8_t buf[4] = "nw_protocol_implementation_link_congestion_info";
                      __int16 v136 = 2082;
                      v137 = v111;
                      _os_log_impl(&dword_1830D4000, v101, v123, "%{public}s called with null instance->parent_definition, dumping backtrace:%{public}s", buf, 0x16u);
                    }
                  }
                }
                else
                {
                  id v100 = __nwlog_obj();
                  *(_DWORD *)buf = 136446210;
                  *(void *)&uint8_t buf[4] = "nw_protocol_implementation_link_congestion_info";
                  int v125 = (void *)_os_log_send_and_compose_impl();

                  type[0] = OS_LOG_TYPE_ERROR;
                  LOBYTE(v131) = 0;
                  if (!__nwlog_fault((const char *)v125, type, &v131)) {
                    goto LABEL_270;
                  }
                  if (type[0] == OS_LOG_TYPE_FAULT)
                  {
                    BOOL v101 = __nwlog_obj();
                    os_log_type_t v102 = type[0];
                    if (os_log_type_enabled(v101, type[0]))
                    {
                      *(_DWORD *)buf = 136446210;
                      *(void *)&uint8_t buf[4] = "nw_protocol_implementation_link_congestion_info";
                      _os_log_impl(&dword_1830D4000, v101, v102, "%{public}s called with null instance", buf, 0xCu);
                    }
                    goto LABEL_269;
                  }
                  if (!(_BYTE)v131)
                  {
                    BOOL v101 = __nwlog_obj();
                    os_log_type_t v118 = type[0];
                    if (os_log_type_enabled(v101, type[0]))
                    {
                      *(_DWORD *)buf = 136446210;
                      *(void *)&uint8_t buf[4] = "nw_protocol_implementation_link_congestion_info";
                      _os_log_impl(&dword_1830D4000, v101, v118, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
                    }
                    goto LABEL_269;
                  }
                  BOOL v111 = (char *)__nw_create_backtrace_string();
                  BOOL v101 = __nwlog_obj();
                  os_log_type_t v122 = type[0];
                  BOOL v112 = os_log_type_enabled(v101, type[0]);
                  if (!v111)
                  {
                    if (v112)
                    {
                      *(_DWORD *)buf = 136446210;
                      *(void *)&uint8_t buf[4] = "nw_protocol_implementation_link_congestion_info";
                      _os_log_impl(&dword_1830D4000, v101, v122, "%{public}s called with null instance, no backtrace", buf, 0xCu);
                    }
                    goto LABEL_269;
                  }
                  if (v112)
                  {
                    *(_DWORD *)buf = 136446466;
                    *(void *)&uint8_t buf[4] = "nw_protocol_implementation_link_congestion_info";
                    __int16 v136 = 2082;
                    v137 = v111;
                    _os_log_impl(&dword_1830D4000, v101, v122, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
                  }
                }

                free(v111);
                goto LABEL_270;
            }
          }
          id v80 = __nwlog_obj();
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_implementation_notify";
          int v73 = (char *)_os_log_send_and_compose_impl();

          type[0] = OS_LOG_TYPE_ERROR;
          LOBYTE(v131) = 0;
          if (!__nwlog_fault(v73, type, &v131)) {
            goto LABEL_207;
          }
          if (type[0] == OS_LOG_TYPE_FAULT)
          {
            BOOL v74 = __nwlog_obj();
            os_log_type_t v81 = type[0];
            if (os_log_type_enabled(v74, type[0]))
            {
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_protocol_implementation_notify";
              _os_log_impl(&dword_1830D4000, v74, v81, "%{public}s called with null other_protocol", buf, 0xCu);
            }
            goto LABEL_206;
          }
          if (!(_BYTE)v131)
          {
            BOOL v74 = __nwlog_obj();
            os_log_type_t v99 = type[0];
            if (os_log_type_enabled(v74, type[0]))
            {
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_protocol_implementation_notify";
              _os_log_impl(&dword_1830D4000, v74, v99, "%{public}s called with null other_protocol, backtrace limit exceeded", buf, 0xCu);
            }
            goto LABEL_206;
          }
          id v88 = (char *)__nw_create_backtrace_string();
          BOOL v74 = __nwlog_obj();
          os_log_type_t v93 = type[0];
          BOOL v94 = os_log_type_enabled(v74, type[0]);
          if (!v88)
          {
            if (v94)
            {
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_protocol_implementation_notify";
              _os_log_impl(&dword_1830D4000, v74, v93, "%{public}s called with null other_protocol, no backtrace", buf, 0xCu);
            }
            goto LABEL_206;
          }
          if (v94)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_protocol_implementation_notify";
            __int16 v136 = 2082;
            v137 = v88;
            _os_log_impl(&dword_1830D4000, v74, v93, "%{public}s called with null other_protocol, dumping backtrace:%{public}s", buf, 0x16u);
          }
        }
        else
        {
          v78 = __nwlog_obj();
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_implementation_notify";
          int v73 = (char *)_os_log_send_and_compose_impl();

          type[0] = OS_LOG_TYPE_ERROR;
          LOBYTE(v131) = 0;
          if (!__nwlog_fault(v73, type, &v131)) {
            goto LABEL_207;
          }
          if (type[0] == OS_LOG_TYPE_FAULT)
          {
            BOOL v74 = __nwlog_obj();
            os_log_type_t v79 = type[0];
            if (os_log_type_enabled(v74, type[0]))
            {
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_protocol_implementation_notify";
              _os_log_impl(&dword_1830D4000, v74, v79, "%{public}s called with null instance->parent_definition->extended_state", buf, 0xCu);
            }
            goto LABEL_206;
          }
          if (!(_BYTE)v131)
          {
            BOOL v74 = __nwlog_obj();
            os_log_type_t v98 = type[0];
            if (os_log_type_enabled(v74, type[0]))
            {
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_protocol_implementation_notify";
              _os_log_impl(&dword_1830D4000, v74, v98, "%{public}s called with null instance->parent_definition->extended_state, backtrace limit exceeded", buf, 0xCu);
            }
            goto LABEL_206;
          }
          id v88 = (char *)__nw_create_backtrace_string();
          BOOL v74 = __nwlog_obj();
          os_log_type_t v91 = type[0];
          BOOL v92 = os_log_type_enabled(v74, type[0]);
          if (!v88)
          {
            if (v92)
            {
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_protocol_implementation_notify";
              _os_log_impl(&dword_1830D4000, v74, v91, "%{public}s called with null instance->parent_definition->extended_state, no backtrace", buf, 0xCu);
            }
            goto LABEL_206;
          }
          if (v92)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_protocol_implementation_notify";
            __int16 v136 = 2082;
            v137 = v88;
            _os_log_impl(&dword_1830D4000, v74, v91, "%{public}s called with null instance->parent_definition->extended_state, dumping backtrace:%{public}s", buf, 0x16u);
          }
        }
      }
      else
      {
        BOOL v76 = __nwlog_obj();
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_notify";
        int v73 = (char *)_os_log_send_and_compose_impl();

        type[0] = OS_LOG_TYPE_ERROR;
        LOBYTE(v131) = 0;
        if (!__nwlog_fault(v73, type, &v131)) {
          goto LABEL_207;
        }
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          BOOL v74 = __nwlog_obj();
          os_log_type_t v77 = type[0];
          if (os_log_type_enabled(v74, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_protocol_implementation_notify";
            _os_log_impl(&dword_1830D4000, v74, v77, "%{public}s called with null instance->parent_definition", buf, 0xCu);
          }
          goto LABEL_206;
        }
        if (!(_BYTE)v131)
        {
          BOOL v74 = __nwlog_obj();
          os_log_type_t v97 = type[0];
          if (os_log_type_enabled(v74, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_protocol_implementation_notify";
            _os_log_impl(&dword_1830D4000, v74, v97, "%{public}s called with null instance->parent_definition, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_206;
        }
        id v88 = (char *)__nw_create_backtrace_string();
        BOOL v74 = __nwlog_obj();
        os_log_type_t v89 = type[0];
        BOOL v90 = os_log_type_enabled(v74, type[0]);
        if (!v88)
        {
          if (v90)
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_protocol_implementation_notify";
            _os_log_impl(&dword_1830D4000, v74, v89, "%{public}s called with null instance->parent_definition, no backtrace", buf, 0xCu);
          }
          goto LABEL_206;
        }
        if (v90)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_implementation_notify";
          __int16 v136 = 2082;
          v137 = v88;
          _os_log_impl(&dword_1830D4000, v74, v89, "%{public}s called with null instance->parent_definition, dumping backtrace:%{public}s", buf, 0x16u);
        }
      }

      free(v88);
      if (!v73) {
        goto LABEL_122;
      }
      goto LABEL_208;
    }
    uint64_t v72 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_implementation_notify";
    int v73 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v131) = 0;
    if (!__nwlog_fault(v73, type, &v131)) {
      goto LABEL_207;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      BOOL v74 = __nwlog_obj();
      os_log_type_t v75 = type[0];
      if (os_log_type_enabled(v74, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_notify";
        _os_log_impl(&dword_1830D4000, v74, v75, "%{public}s called with null instance", buf, 0xCu);
      }
    }
    else if ((_BYTE)v131)
    {
      __int16 v85 = (char *)__nw_create_backtrace_string();
      BOOL v74 = __nwlog_obj();
      os_log_type_t v86 = type[0];
      BOOL v87 = os_log_type_enabled(v74, type[0]);
      if (v85)
      {
        if (v87)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_implementation_notify";
          __int16 v136 = 2082;
          v137 = v85;
          _os_log_impl(&dword_1830D4000, v74, v86, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v85);
LABEL_207:
        if (!v73) {
          goto LABEL_122;
        }
LABEL_208:
        free(v73);
        goto LABEL_122;
      }
      if (v87)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_notify";
        _os_log_impl(&dword_1830D4000, v74, v86, "%{public}s called with null instance, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v74 = __nwlog_obj();
      os_log_type_t v96 = type[0];
      if (os_log_type_enabled(v74, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_notify";
        _os_log_impl(&dword_1830D4000, v74, v96, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_206:

    goto LABEL_207;
  }
  __int16 v68 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_protocol_implementation_notify";
  __int16 v69 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  LOBYTE(v131) = 0;
  if (__nwlog_fault(v69, type, &v131))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      long long v70 = __nwlog_obj();
      os_log_type_t v71 = type[0];
      if (os_log_type_enabled(v70, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_notify";
        _os_log_impl(&dword_1830D4000, v70, v71, "%{public}s called with null protocol", buf, 0xCu);
      }
    }
    else if ((_BYTE)v131)
    {
      id v82 = (char *)__nw_create_backtrace_string();
      long long v70 = __nwlog_obj();
      os_log_type_t v83 = type[0];
      BOOL v84 = os_log_type_enabled(v70, type[0]);
      if (v82)
      {
        if (v84)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_implementation_notify";
          __int16 v136 = 2082;
          v137 = v82;
          _os_log_impl(&dword_1830D4000, v70, v83, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v82);
        goto LABEL_193;
      }
      if (v84)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_notify";
        _os_log_impl(&dword_1830D4000, v70, v83, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      long long v70 = __nwlog_obj();
      os_log_type_t v95 = type[0];
      if (os_log_type_enabled(v70, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_notify";
        _os_log_impl(&dword_1830D4000, v70, v95, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_193:
  if (v69) {
    free(v69);
  }
}

void nw_protocol_establishment_report_set_l4s_enabled(void *a1, char a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  uint64_t v4 = v3;
  if (v3)
  {
    *((unsigned char *)v3 + 40) = *((unsigned char *)v3 + 40) & 0xFE | a2;
    goto LABEL_3;
  }
  unint64_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v16 = "nw_protocol_establishment_report_set_l4s_enabled";
  unint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      size_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v16 = "nw_protocol_establishment_report_set_l4s_enabled";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null report", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      size_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v16 = "nw_protocol_establishment_report_set_l4s_enabled";
          __int16 v17 = 2082;
          uint64_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null report, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v16 = "nw_protocol_establishment_report_set_l4s_enabled";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null report, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      size_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v16 = "nw_protocol_establishment_report_set_l4s_enabled";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null report, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
LABEL_3:
}

uint64_t ___ZL34nw_resolver_process_service_resultP22NWConcrete_nw_resolverP30NWConcrete_nw_resolver_servicePU38objcproto27OS_dnssd_getaddrinfo_result8NSObject_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  id v4 = *(id *)(a1 + 32);
  unint64_t v5 = v4;
  if (!v4)
  {
    os_log_type_t v27 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_resolver_copy_protocol_for_alpn";
    unint64_t v28 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(applier[0]) = 16;
    LOBYTE(v41[0]) = 0;
    if (!__nwlog_fault(v28, applier, v41)) {
      goto LABEL_68;
    }
    if (LOBYTE(applier[0]) == 17)
    {
      id v29 = __nwlog_obj();
      os_log_type_t v30 = applier[0];
      if (os_log_type_enabled(v29, applier[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_resolver_copy_protocol_for_alpn";
        _os_log_impl(&dword_1830D4000, v29, v30, "%{public}s called with null resolver", buf, 0xCu);
      }
    }
    else if (LOBYTE(v41[0]))
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v29 = __nwlog_obj();
      os_log_type_t v34 = applier[0];
      BOOL v35 = os_log_type_enabled(v29, applier[0]);
      if (backtrace_string)
      {
        if (v35)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_resolver_copy_protocol_for_alpn";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v29, v34, "%{public}s called with null resolver, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        if (!v28) {
          goto LABEL_70;
        }
        goto LABEL_69;
      }
      if (v35)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_resolver_copy_protocol_for_alpn";
        _os_log_impl(&dword_1830D4000, v29, v34, "%{public}s called with null resolver, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v29 = __nwlog_obj();
      os_log_type_t v39 = applier[0];
      if (os_log_type_enabled(v29, applier[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_resolver_copy_protocol_for_alpn";
        _os_log_impl(&dword_1830D4000, v29, v39, "%{public}s called with null resolver, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_67;
  }
  if (a2)
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x3032000000;
    *(void *)&unsigned char buf[24] = __Block_byref_object_copy__5653;
    *(void *)&buf[32] = __Block_byref_object_dispose__5654;
    *(void *)&buf[40] = 0;
    unint64_t v6 = (void *)*((void *)v4 + 2);
    size_t v7 = (void *)nw_protocol_boringssl_copy_definition();
    os_log_type_t v8 = nw_parameters_copy_protocol_options_for_definition(v6, v7);

    if (v8)
    {
      uint64_t v9 = v8;
      os_log_type_t v10 = (void *)sec_protocol_options_copy_transport_specific_application_protocol();
      BOOL v11 = v10;
      if (v10 && object_getClass(v10) == (Class)MEMORY[0x1E4F14568])
      {
        applier[0] = MEMORY[0x1E4F143A8];
        applier[1] = 3221225472;
        applier[2] = ___ZL34nw_resolver_copy_protocol_for_alpnP22NWConcrete_nw_resolverPKc_block_invoke;
        applier[3] = &unk_1E5248460;
        applier[4] = buf;
        applier[5] = a2;
        xpc_array_apply(v11, applier);
      }
      os_log_type_t v12 = *(void **)(*(void *)&buf[8] + 40);
      if (v12)
      {
        id v13 = v12;

LABEL_16:
        _Block_object_dispose(buf, 8);

        goto LABEL_17;
      }
      uint64_t v14 = (void *)sec_protocol_options_copy_transport_specific_application_protocol();
      char v15 = v14;
      if (v14 && object_getClass(v14) == (Class)MEMORY[0x1E4F14568])
      {
        v41[0] = MEMORY[0x1E4F143A8];
        v41[1] = 3221225472;
        v41[2] = ___ZL34nw_resolver_copy_protocol_for_alpnP22NWConcrete_nw_resolverPKc_block_invoke_2;
        v41[3] = &unk_1E5248460;
        v41[4] = buf;
        v41[5] = a2;
        xpc_array_apply(v15, v41);
      }
      uint64_t v16 = *(void **)(*(void *)&buf[8] + 40);
      if (v16)
      {
        id v13 = v16;

        goto LABEL_16;
      }
    }
    id v13 = *(id *)(*(void *)&buf[8] + 40);
    goto LABEL_16;
  }
  size_t v31 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_resolver_copy_protocol_for_alpn";
  unint64_t v28 = (char *)_os_log_send_and_compose_impl();

  LOBYTE(applier[0]) = 16;
  LOBYTE(v41[0]) = 0;
  if (__nwlog_fault(v28, applier, v41))
  {
    if (LOBYTE(applier[0]) == 17)
    {
      id v29 = __nwlog_obj();
      os_log_type_t v32 = applier[0];
      if (os_log_type_enabled(v29, applier[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_resolver_copy_protocol_for_alpn";
        _os_log_impl(&dword_1830D4000, v29, v32, "%{public}s called with null alpn", buf, 0xCu);
      }
LABEL_67:

      goto LABEL_68;
    }
    if (!LOBYTE(v41[0]))
    {
      id v29 = __nwlog_obj();
      os_log_type_t v40 = applier[0];
      if (os_log_type_enabled(v29, applier[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_resolver_copy_protocol_for_alpn";
        _os_log_impl(&dword_1830D4000, v29, v40, "%{public}s called with null alpn, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_67;
    }
    BOOL v36 = (char *)__nw_create_backtrace_string();
    id v29 = __nwlog_obj();
    os_log_type_t v37 = applier[0];
    BOOL v38 = os_log_type_enabled(v29, applier[0]);
    if (!v36)
    {
      if (v38)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_resolver_copy_protocol_for_alpn";
        _os_log_impl(&dword_1830D4000, v29, v37, "%{public}s called with null alpn, no backtrace", buf, 0xCu);
      }
      goto LABEL_67;
    }
    if (v38)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_resolver_copy_protocol_for_alpn";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = v36;
      _os_log_impl(&dword_1830D4000, v29, v37, "%{public}s called with null alpn, dumping backtrace:%{public}s", buf, 0x16u);
    }

    free(v36);
  }
LABEL_68:
  if (v28) {
LABEL_69:
  }
    free(v28);
LABEL_70:
  id v13 = 0;
LABEL_17:

  uint64_t v17 = *(void *)(a1 + 32);
  if (v17)
  {
    if ((*(unsigned char *)(v17 + 346) & 0x20) != 0) {
      goto LABEL_30;
    }
    if (*(unsigned char *)(v17 + 256))
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      uint64_t v18 = (id)gconnectionLogObj;
      if (!os_log_type_enabled(v18, OS_LOG_TYPE_INFO)) {
        goto LABEL_29;
      }
      uint64_t v19 = *(void *)(a1 + 32) + 256;
      *(_DWORD *)buf = 136446978;
      *(void *)&uint8_t buf[4] = "nw_resolver_process_service_result_block_invoke";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = v19;
      *(_WORD *)&buf[22] = 2082;
      *(void *)&unsigned char buf[24] = a2;
      *(_WORD *)&buf[32] = 2114;
      *(void *)&buf[34] = v13;
      uint64_t v20 = "%{public}s [C%{public}s] ALPN: %{public}s maps to %{public}@";
      char v21 = v18;
      uint32_t v22 = 42;
      goto LABEL_28;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v18 = (id)gLogObj;
    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      int v23 = *(_DWORD *)(*(void *)(a1 + 32) + 340);
      *(_DWORD *)buf = 136446978;
      *(void *)&uint8_t buf[4] = "nw_resolver_process_service_result_block_invoke";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = v23;
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = a2;
      *(_WORD *)&buf[28] = 2114;
      *(void *)&buf[30] = v13;
      uint64_t v20 = "%{public}s [R%u] ALPN: %{public}s maps to %{public}@";
      char v21 = v18;
      uint32_t v22 = 38;
      goto LABEL_28;
    }
  }
  else
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v18 = (id)gLogObj;
    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "nw_resolver_process_service_result_block_invoke";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = a2;
      *(_WORD *)&buf[22] = 2114;
      *(void *)&unsigned char buf[24] = v13;
      uint64_t v20 = "%{public}s ALPN: %{public}s maps to %{public}@";
      char v21 = v18;
      uint32_t v22 = 32;
LABEL_28:
      _os_log_impl(&dword_1830D4000, v21, OS_LOG_TYPE_INFO, v20, buf, v22);
    }
  }
LABEL_29:

LABEL_30:
  if (v13)
  {
    char v24 = *(void **)(a1 + 32);
    int v25 = *(void **)(a1 + 40);
    if (!v25) {
      int v25 = (void *)v24[3];
    }
    nw_resolver_update_client_alternative(v24, v25, v13);
  }

  return 1;
}

void sub_1833D83D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,id a30)
{
  _Block_object_dispose(&a25, 8);
  _Unwind_Resume(a1);
}

atomic_uchar *nw_parameters_copy_protocol_options_for_definition(void *a1, void *a2)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  unint64_t v5 = v4;
  if (v3)
  {
    if (v4)
    {
      unint64_t v6 = (atomic_uchar **)v3[19];
      size_t v7 = v6;
      if (v6)
      {
        os_log_type_t v8 = v6[1];
        if (v8)
        {
          *(void *)buf = 0;
          *(void *)&buf[8] = buf;
          *(void *)&buf[16] = 0x3032000000;
          uint64_t v53 = __Block_byref_object_copy__19403;
          os_log_type_t v54 = __Block_byref_object_dispose__19404;
          id v55 = 0;
          v47[0] = MEMORY[0x1E4F143A8];
          v47[1] = 3221225472;
          v47[2] = __nw_parameters_copy_protocol_options_for_definition_block_invoke;
          v47[3] = &unk_1E524A2E8;
          id v48 = v5;
          char v49 = buf;
          nw_array_apply(v8, (uint64_t)v47);
          uint64_t v9 = *(void **)(*(void *)&buf[8] + 40);
          if (v9)
          {
            os_log_type_t v10 = v9;

            _Block_object_dispose(buf, 8);
LABEL_25:

            goto LABEL_26;
          }

          _Block_object_dispose(buf, 8);
        }
        BOOL v11 = v7[2];
        if (v11)
        {
          *(void *)buf = 0;
          *(void *)&buf[8] = buf;
          *(void *)&buf[16] = 0x3032000000;
          uint64_t v53 = __Block_byref_object_copy__19403;
          os_log_type_t v54 = __Block_byref_object_dispose__19404;
          id v55 = 0;
          v44[0] = MEMORY[0x1E4F143A8];
          v44[1] = 3221225472;
          v44[2] = __nw_parameters_copy_protocol_options_for_definition_block_invoke_2;
          v44[3] = &unk_1E524A2E8;
          id v45 = v5;
          unsigned int v46 = buf;
          nw_array_apply(v11, (uint64_t)v44);
          os_log_type_t v12 = *(void **)(*(void *)&buf[8] + 40);
          if (v12)
          {
            os_log_type_t v10 = v12;

            _Block_object_dispose(buf, 8);
            goto LABEL_25;
          }

          _Block_object_dispose(buf, 8);
        }
        id v13 = v7[3];
        if (v13)
        {
          uint64_t v14 = v13;
          id v15 = v14[1];

          if (nw_protocol_definition_is_equal_unsafe((uint64_t)v5, (uint64_t)v15))
          {
            os_log_type_t v10 = v7[3];

            goto LABEL_25;
          }
        }
        uint64_t v16 = v7[4];
        if (v16)
        {
          uint64_t v17 = v16;
          id v18 = v17[1];

          if (nw_protocol_definition_is_equal_unsafe((uint64_t)v5, (uint64_t)v18))
          {
            os_log_type_t v10 = v7[4];

            goto LABEL_25;
          }
        }
        uint64_t v19 = v7[6];
        if (v19)
        {
          uint64_t v20 = v19;
          id v21 = v20[1];

          if (nw_protocol_definition_is_equal_unsafe((uint64_t)v5, (uint64_t)v21))
          {
            os_log_type_t v10 = v7[6];

            goto LABEL_25;
          }
        }
LABEL_24:
        os_log_type_t v10 = 0;
        goto LABEL_25;
      }
      id v29 = __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_parameters_copy_protocol_options_for_definition";
      os_log_type_t v30 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v50 = 0;
      if (__nwlog_fault(v30, &type, &v50))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          size_t v31 = __nwlog_obj();
          os_log_type_t v32 = type;
          if (os_log_type_enabled(v31, type))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_parameters_copy_protocol_options_for_definition";
            _os_log_impl(&dword_1830D4000, v31, v32, "%{public}s called with null stack", buf, 0xCu);
          }
        }
        else if (v50)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          size_t v31 = __nwlog_obj();
          os_log_type_t v39 = type;
          BOOL v40 = os_log_type_enabled(v31, type);
          if (backtrace_string)
          {
            if (v40)
            {
              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_parameters_copy_protocol_options_for_definition";
              *(_WORD *)&unsigned char buf[12] = 2082;
              *(void *)&buf[14] = backtrace_string;
              _os_log_impl(&dword_1830D4000, v31, v39, "%{public}s called with null stack, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(backtrace_string);
            goto LABEL_78;
          }
          if (v40)
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_parameters_copy_protocol_options_for_definition";
            _os_log_impl(&dword_1830D4000, v31, v39, "%{public}s called with null stack, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          size_t v31 = __nwlog_obj();
          os_log_type_t v43 = type;
          if (os_log_type_enabled(v31, type))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_parameters_copy_protocol_options_for_definition";
            _os_log_impl(&dword_1830D4000, v31, v43, "%{public}s called with null stack, backtrace limit exceeded", buf, 0xCu);
          }
        }
      }
LABEL_78:
      if (v30) {
        free(v30);
      }
      goto LABEL_24;
    }
    os_log_type_t v27 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_parameters_copy_protocol_options_for_definition";
    char v24 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v50 = 0;
    if (__nwlog_fault(v24, &type, &v50))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        int v25 = __nwlog_obj();
        os_log_type_t v28 = type;
        if (os_log_type_enabled(v25, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_parameters_copy_protocol_options_for_definition";
          _os_log_impl(&dword_1830D4000, v25, v28, "%{public}s called with null definition", buf, 0xCu);
        }
LABEL_71:

        goto LABEL_72;
      }
      if (!v50)
      {
        int v25 = __nwlog_obj();
        os_log_type_t v42 = type;
        if (os_log_type_enabled(v25, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_parameters_copy_protocol_options_for_definition";
          _os_log_impl(&dword_1830D4000, v25, v42, "%{public}s called with null definition, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_71;
      }
      BOOL v33 = (char *)__nw_create_backtrace_string();
      int v25 = __nwlog_obj();
      os_log_type_t v36 = type;
      BOOL v37 = os_log_type_enabled(v25, type);
      if (!v33)
      {
        if (v37)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_parameters_copy_protocol_options_for_definition";
          _os_log_impl(&dword_1830D4000, v25, v36, "%{public}s called with null definition, no backtrace", buf, 0xCu);
        }
        goto LABEL_71;
      }
      if (v37)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_parameters_copy_protocol_options_for_definition";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = v33;
        _os_log_impl(&dword_1830D4000, v25, v36, "%{public}s called with null definition, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_51;
    }
  }
  else
  {
    int v23 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_parameters_copy_protocol_options_for_definition";
    char v24 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v50 = 0;
    if (__nwlog_fault(v24, &type, &v50))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        int v25 = __nwlog_obj();
        os_log_type_t v26 = type;
        if (os_log_type_enabled(v25, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_parameters_copy_protocol_options_for_definition";
          _os_log_impl(&dword_1830D4000, v25, v26, "%{public}s called with null parameters", buf, 0xCu);
        }
        goto LABEL_71;
      }
      if (!v50)
      {
        int v25 = __nwlog_obj();
        os_log_type_t v41 = type;
        if (os_log_type_enabled(v25, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_parameters_copy_protocol_options_for_definition";
          _os_log_impl(&dword_1830D4000, v25, v41, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_71;
      }
      BOOL v33 = (char *)__nw_create_backtrace_string();
      int v25 = __nwlog_obj();
      os_log_type_t v34 = type;
      BOOL v35 = os_log_type_enabled(v25, type);
      if (!v33)
      {
        if (v35)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_parameters_copy_protocol_options_for_definition";
          _os_log_impl(&dword_1830D4000, v25, v34, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }
        goto LABEL_71;
      }
      if (v35)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_parameters_copy_protocol_options_for_definition";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = v33;
        _os_log_impl(&dword_1830D4000, v25, v34, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_51:

      free(v33);
    }
  }
LABEL_72:
  if (v24) {
    free(v24);
  }
  os_log_type_t v10 = 0;
LABEL_26:

  return v10;
}

void sub_1833D8DAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_protocol_webtransport_session_listen_protocol_new_flow(nw_listen_protocol *a1, nw_endpoint *a2, nw_parameters *a3)
{
  uint64_t v116 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_session_listen_protocol_new_flow";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v104[0]) = 0;
    if (!__nwlog_fault(v10, type, v104)) {
      goto LABEL_47;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      BOOL v11 = __nwlog_obj();
      os_log_type_t v12 = type[0];
      if (!os_log_type_enabled(v11, type[0])) {
        goto LABEL_47;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_session_listen_protocol_new_flow";
      id v13 = "%{public}s called with null listener";
      goto LABEL_45;
    }
    if (LOBYTE(v104[0]))
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v11 = __nwlog_obj();
      os_log_type_t v12 = type[0];
      BOOL v69 = os_log_type_enabled(v11, type[0]);
      if (backtrace_string)
      {
        if (v69)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_session_listen_protocol_new_flow";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          long long v70 = "%{public}s called with null listener, dumping backtrace:%{public}s";
LABEL_112:
          _os_log_impl(&dword_1830D4000, v11, v12, v70, buf, 0x16u);
        }
LABEL_113:
        free(backtrace_string);
        goto LABEL_47;
      }
      if (!v69) {
        goto LABEL_47;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_session_listen_protocol_new_flow";
      id v13 = "%{public}s called with null listener, no backtrace";
    }
    else
    {
      BOOL v11 = __nwlog_obj();
      os_log_type_t v12 = type[0];
      if (!os_log_type_enabled(v11, type[0])) {
        goto LABEL_47;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_session_listen_protocol_new_flow";
      id v13 = "%{public}s called with null listener, backtrace limit exceeded";
    }
LABEL_45:
    id v45 = v11;
    os_log_type_t v46 = v12;
LABEL_46:
    _os_log_impl(&dword_1830D4000, v45, v46, v13, buf, 0xCu);
    goto LABEL_47;
  }
  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_session_listen_protocol_new_flow";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v104[0]) = 0;
    if (!__nwlog_fault(v10, type, v104)) {
      goto LABEL_47;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      BOOL v11 = __nwlog_obj();
      os_log_type_t v12 = type[0];
      if (!os_log_type_enabled(v11, type[0])) {
        goto LABEL_47;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_session_listen_protocol_new_flow";
      id v13 = "%{public}s called with null webtransport_session";
      goto LABEL_45;
    }
    if (LOBYTE(v104[0]))
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v11 = __nwlog_obj();
      os_log_type_t v12 = type[0];
      BOOL v71 = os_log_type_enabled(v11, type[0]);
      if (backtrace_string)
      {
        if (v71)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_session_listen_protocol_new_flow";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          long long v70 = "%{public}s called with null webtransport_session, dumping backtrace:%{public}s";
          goto LABEL_112;
        }
        goto LABEL_113;
      }
      if (!v71) {
        goto LABEL_47;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_session_listen_protocol_new_flow";
      id v13 = "%{public}s called with null webtransport_session, no backtrace";
    }
    else
    {
      BOOL v11 = __nwlog_obj();
      os_log_type_t v12 = type[0];
      if (!os_log_type_enabled(v11, type[0])) {
        goto LABEL_47;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_session_listen_protocol_new_flow";
      id v13 = "%{public}s called with null webtransport_session, backtrace limit exceeded";
    }
    goto LABEL_45;
  }
  uint64_t v7 = *((void *)handle + 50);
  if ((handle[548] & 2) == 0)
  {
    if (gLogDatapath)
    {
      int v66 = __nwlog_obj();
      if (os_log_type_enabled(v66, OS_LOG_TYPE_DEBUG))
      {
        int v67 = *((_DWORD *)handle + 115);
        *(_DWORD *)buf = 136447234;
        *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_session_listen_protocol_new_flow";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = handle + 464;
        *(_WORD *)&buf[22] = 2080;
        BOOL v111 = (uint64_t (*)(uint64_t, uint64_t))" ";
        LOWORD(v112) = 1024;
        *(_DWORD *)((char *)&v112 + 2) = v67;
        HIWORD(v112) = 2112;
        BOOL v113 = a2;
        _os_log_impl(&dword_1830D4000, v66, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> creating new inbound flow from %@", buf, 0x30u);
      }
    }
  }
  if (!v7)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_session_listen_protocol_new_flow";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v104[0]) = 0;
    if (!__nwlog_fault(v10, type, v104)) {
      goto LABEL_47;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v11 = gLogObj;
      os_log_type_t v12 = type[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, type[0])) {
        goto LABEL_47;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_session_listen_protocol_new_flow";
      id v13 = "%{public}s No listener found for webtransport inbound stream";
      goto LABEL_45;
    }
    if (!LOBYTE(v104[0]))
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v11 = gLogObj;
      os_log_type_t v12 = type[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, type[0])) {
        goto LABEL_47;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_session_listen_protocol_new_flow";
      id v13 = "%{public}s No listener found for webtransport inbound stream, backtrace limit exceeded";
      goto LABEL_45;
    }
    uint64_t v20 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v21 = gLogObj;
    os_log_type_t v22 = type[0];
    BOOL v23 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
    if (v20)
    {
      if (v23)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_session_listen_protocol_new_flow";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = v20;
        _os_log_impl(&dword_1830D4000, v21, v22, "%{public}s No listener found for webtransport inbound stream, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v20);
      goto LABEL_47;
    }
    if (v23)
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_session_listen_protocol_new_flow";
      id v13 = "%{public}s No listener found for webtransport inbound stream, no backtrace";
      id v45 = v21;
      os_log_type_t v46 = v22;
      goto LABEL_46;
    }
LABEL_47:
    if (v10) {
      free(v10);
    }
    return 0;
  }
  unsigned int v8 = *((_DWORD *)handle + 112);
  if (v8 >= 2)
  {
    if (v8 != 2 || (handle[548] & 2) != 0) {
      return 0;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v14 = gLogObj;
    uint64_t result = os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    int v16 = *((_DWORD *)handle + 115);
    *(_DWORD *)buf = 136446978;
    *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_session_listen_protocol_new_flow";
    *(_WORD *)&unsigned char buf[12] = 2082;
    *(void *)&buf[14] = handle + 464;
    *(_WORD *)&buf[22] = 2080;
    BOOL v111 = (uint64_t (*)(uint64_t, uint64_t))" ";
    LOWORD(v112) = 1024;
    *(_DWORD *)((char *)&v112 + 2) = v16;
    uint64_t v17 = "%{public}s %{public}s%s<i%u> Cannot create new inbound flow with unknown transport mode";
    id v18 = v14;
    os_log_type_t v19 = OS_LOG_TYPE_ERROR;
    goto LABEL_19;
  }
  if (*((_DWORD *)handle + 111) != 2)
  {
    char v24 = handle[548] | 0x20;
    handle[548] = v24;
    if (v8 != 1)
    {
LABEL_56:
      uint64_t result = (**(uint64_t (***)(uint64_t, nw_endpoint *, nw_parameters *))v7)(v7, a2, a3);
      handle[548] &= ~0x20u;
      *((void *)handle + 22) = -1;
      return result;
    }
    if (*(void *)(v7 + 8))
    {
      int v25 = (void *)*((void *)handle + 47);
      if (v25)
      {
        uint64_t last_application_stream_id = nw_http_connection_metadata_get_last_application_stream_id(v25);
        if ((handle[548] & 2) != 0) {
          goto LABEL_55;
        }
      }
      else
      {
        uint64_t last_application_stream_id = -1;
        if ((v24 & 2) != 0)
        {
LABEL_55:
          *((void *)handle + 22) = last_application_stream_id;
          goto LABEL_56;
        }
      }
      if (gLogDatapath)
      {
        os_log_type_t v86 = __nwlog_obj();
        if (os_log_type_enabled(v86, OS_LOG_TYPE_DEBUG))
        {
          int v87 = *((_DWORD *)handle + 115);
          *(_DWORD *)buf = 136447490;
          *(void *)&uint8_t buf[4] = "nw_webtransport_http3_get_quic_stream_id";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = handle + 464;
          *(_WORD *)&buf[22] = 2080;
          BOOL v111 = (uint64_t (*)(uint64_t, uint64_t))" ";
          LOWORD(v112) = 1024;
          *(_DWORD *)((char *)&v112 + 2) = v87;
          HIWORD(v112) = 2048;
          BOOL v113 = (void *)last_application_stream_id;
          __int16 v114 = 1024;
          int v115 = 1;
          _os_log_impl(&dword_1830D4000, v86, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> Got stream ID: %llu from session: %u", buf, 0x36u);
        }
      }
      goto LABEL_55;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_webtransport_http3_get_quic_stream_id";
    BOOL v76 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v104[0]) = 0;
    if (__nwlog_fault(v76, type, v104))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v77 = __nwlog_obj();
        os_log_type_t v78 = type[0];
        if (os_log_type_enabled(v77, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_webtransport_http3_get_quic_stream_id";
          os_log_type_t v79 = "%{public}s called with null output_protocol";
LABEL_173:
          _os_log_impl(&dword_1830D4000, v77, v78, v79, buf, 0xCu);
        }
      }
      else if (LOBYTE(v104[0]))
      {
        id v88 = (char *)__nw_create_backtrace_string();
        os_log_type_t v77 = __nwlog_obj();
        os_log_type_t v78 = type[0];
        BOOL v89 = os_log_type_enabled(v77, type[0]);
        if (v88)
        {
          if (v89)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_webtransport_http3_get_quic_stream_id";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = v88;
            _os_log_impl(&dword_1830D4000, v77, v78, "%{public}s called with null output_protocol, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v88);
          goto LABEL_174;
        }
        if (v89)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_webtransport_http3_get_quic_stream_id";
          os_log_type_t v79 = "%{public}s called with null output_protocol, no backtrace";
          goto LABEL_173;
        }
      }
      else
      {
        os_log_type_t v77 = __nwlog_obj();
        os_log_type_t v78 = type[0];
        if (os_log_type_enabled(v77, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_webtransport_http3_get_quic_stream_id";
          os_log_type_t v79 = "%{public}s called with null output_protocol, backtrace limit exceeded";
          goto LABEL_173;
        }
      }
    }
LABEL_174:
    if (v76) {
      free(v76);
    }
    uint64_t last_application_stream_id = -1;
    goto LABEL_55;
  }
  protocol_handler = a1->protocol_handler;
  if (!protocol_handler)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_webtransport_session_add_to_transport";
    uint64_t v72 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v104[0]) = 0;
    if (!__nwlog_fault(v72, type, v104)) {
      goto LABEL_180;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      int v73 = __nwlog_obj();
      os_log_type_t v74 = type[0];
      if (!os_log_type_enabled(v73, type[0])) {
        goto LABEL_180;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_webtransport_session_add_to_transport";
      os_log_type_t v75 = "%{public}s called with null transport_protocol";
    }
    else if (LOBYTE(v104[0]))
    {
      id v80 = (char *)__nw_create_backtrace_string();
      int v73 = __nwlog_obj();
      os_log_type_t v74 = type[0];
      BOOL v81 = os_log_type_enabled(v73, type[0]);
      if (v80)
      {
        if (v81)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_webtransport_session_add_to_transport";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v80;
          _os_log_impl(&dword_1830D4000, v73, v74, "%{public}s called with null transport_protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v80);
LABEL_180:
        if (!v72) {
          goto LABEL_69;
        }
        goto LABEL_181;
      }
      if (!v81) {
        goto LABEL_180;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_webtransport_session_add_to_transport";
      os_log_type_t v75 = "%{public}s called with null transport_protocol, no backtrace";
    }
    else
    {
      int v73 = __nwlog_obj();
      os_log_type_t v74 = type[0];
      if (!os_log_type_enabled(v73, type[0])) {
        goto LABEL_180;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_webtransport_session_add_to_transport";
      os_log_type_t v75 = "%{public}s called with null transport_protocol, backtrace limit exceeded";
    }
LABEL_179:
    _os_log_impl(&dword_1830D4000, v73, v74, v75, buf, 0xCu);
    goto LABEL_180;
  }
  if ((handle[548] & 0x40) == 0)
  {
    nw_protocol_add_input_handler((uint64_t)a1->protocol_handler, (uint64_t)handle);
    goto LABEL_69;
  }
  parameters = (void *)nw_protocol_get_parameters((uint64_t)handle);
  if (parameters)
  {
    os_log_type_t v28 = parameters;
    nw_parameters_log_protocol_instances(parameters);
    id v29 = v28;
    os_log_type_t v30 = v29[19];

    v104[0] = 0;
    v104[1] = v104;
    v104[2] = 0x2000000000;
    char v105 = 0;
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x3802000000;
    BOOL v111 = __Block_byref_object_copy__33867;
    BOOL v112 = __Block_byref_object_dispose__33868;
    BOOL v113 = 0;
    LOBYTE(v114) = v114 | 1;
    *(void *)os_log_type_t type = MEMORY[0x1E4F143A8];
    uint64_t v98 = 0x40000000;
    os_log_type_t v99 = ___ZL45nw_webtransport_session_add_to_http_messagingP23nw_webtransport_sessionP11nw_protocolS2__block_invoke;
    id v100 = &unk_1E5240430;
    BOOL v101 = v104;
    os_log_type_t v102 = buf;
    v103 = handle;
    nw_protocol_stack_iterate_application_protocols(v30, type);
    size_t v31 = *(void **)(*(void *)&buf[8] + 40);
    if (v31)
    {
      if (nw_protocol_copy_http_messaging_definition_onceToken != -1) {
        dispatch_once(&nw_protocol_copy_http_messaging_definition_onceToken, &__block_literal_global_81);
      }
      id v32 = (id)nw_protocol_copy_http_messaging_definition_definition;
      BOOL v33 = v31;
      v33[2] = protocol_handler;

      if (v32) {
        os_release(v32);
      }
      os_log_type_t v34 = (void *)nw_protocol_get_parameters((uint64_t)protocol_handler);
      if (!v34) {
        goto LABEL_63;
      }
      BOOL v35 = v34;
      os_log_type_t v36 = v35[19];

      BOOL v37 = v29;
      BOOL v38 = v29[19];

      os_log_type_t v39 = nw_protocol_stack_copy_transport_protocol(v36);
      nw_protocol_options_t v40 = nw_protocol_stack_copy_transport_protocol(v38);
      nw_protocol_options_t v41 = v40;
      if (v39)
      {
        if (v40)
        {
          nw_protocol_definition_t v42 = nw_protocol_options_copy_definition(v39);
          if (nw_protocol_options_matches_definition(v41, v42))
          {
            uint64_t protocol_handle = nw_protocol_options_get_protocol_handle(v39);
            nw_parameters_set_protocol_instance(v41, v44, protocol_handle);
          }
          os_release(v41);
        }
        nw_protocol_options_t v41 = v39;
      }
      else if (!v40)
      {
LABEL_59:
        if (v38) {
          os_release(v38);
        }
        if (v36) {
          os_release(v36);
        }
LABEL_63:
        nw_protocol_set_output_handler((uint64_t)handle, 0);
        nw_protocol_add_input_handler((uint64_t)protocol_handler, (uint64_t)handle);
LABEL_64:
        _Block_object_dispose(buf, 8);
        if ((v114 & 1) != 0 && v113) {
          os_release(v113);
        }
        _Block_object_dispose(v104, 8);
        if (v30) {
          os_release(v30);
        }
        goto LABEL_69;
      }
      os_release(v41);
      goto LABEL_59;
    }
    __nwlog_obj();
    *(_DWORD *)os_log_type_t v106 = 136446210;
    v107 = "nw_webtransport_session_add_to_http_messaging";
    id v82 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v96 = OS_LOG_TYPE_ERROR;
    char v95 = 0;
    if (__nwlog_fault(v82, &v96, &v95))
    {
      if (v96 == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v83 = __nwlog_obj();
        os_log_type_t v84 = v96;
        if (!os_log_type_enabled(v83, v96)) {
          goto LABEL_185;
        }
        *(_DWORD *)os_log_type_t v106 = 136446210;
        v107 = "nw_webtransport_session_add_to_http_messaging";
        __int16 v85 = "%{public}s called with null options";
        goto LABEL_184;
      }
      if (!v95)
      {
        os_log_type_t v83 = __nwlog_obj();
        os_log_type_t v84 = v96;
        if (!os_log_type_enabled(v83, v96)) {
          goto LABEL_185;
        }
        *(_DWORD *)os_log_type_t v106 = 136446210;
        v107 = "nw_webtransport_session_add_to_http_messaging";
        __int16 v85 = "%{public}s called with null options, backtrace limit exceeded";
        goto LABEL_184;
      }
      BOOL v92 = (char *)__nw_create_backtrace_string();
      os_log_type_t v83 = __nwlog_obj();
      os_log_type_t v84 = v96;
      BOOL v93 = os_log_type_enabled(v83, v96);
      if (v92)
      {
        if (v93)
        {
          *(_DWORD *)os_log_type_t v106 = 136446466;
          v107 = "nw_webtransport_session_add_to_http_messaging";
          __int16 v108 = 2082;
          v109 = v92;
          _os_log_impl(&dword_1830D4000, v83, v84, "%{public}s called with null options, dumping backtrace:%{public}s", v106, 0x16u);
        }
        free(v92);
        goto LABEL_185;
      }
      if (v93)
      {
        *(_DWORD *)os_log_type_t v106 = 136446210;
        v107 = "nw_webtransport_session_add_to_http_messaging";
        __int16 v85 = "%{public}s called with null options, no backtrace";
LABEL_184:
        _os_log_impl(&dword_1830D4000, v83, v84, v85, v106, 0xCu);
      }
    }
LABEL_185:
    if (v82) {
      free(v82);
    }
    goto LABEL_64;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_webtransport_session_add_to_http_messaging";
  uint64_t v72 = (char *)_os_log_send_and_compose_impl();
  type[0] = OS_LOG_TYPE_ERROR;
  LOBYTE(v104[0]) = 0;
  if (!__nwlog_fault(v72, type, v104)) {
    goto LABEL_180;
  }
  if (type[0] == OS_LOG_TYPE_FAULT)
  {
    int v73 = __nwlog_obj();
    os_log_type_t v74 = type[0];
    if (!os_log_type_enabled(v73, type[0])) {
      goto LABEL_180;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_webtransport_session_add_to_http_messaging";
    os_log_type_t v75 = "%{public}s called with null parameters";
    goto LABEL_179;
  }
  if (!LOBYTE(v104[0]))
  {
    int v73 = __nwlog_obj();
    os_log_type_t v74 = type[0];
    if (!os_log_type_enabled(v73, type[0])) {
      goto LABEL_180;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_webtransport_session_add_to_http_messaging";
    os_log_type_t v75 = "%{public}s called with null parameters, backtrace limit exceeded";
    goto LABEL_179;
  }
  BOOL v90 = (char *)__nw_create_backtrace_string();
  int v73 = __nwlog_obj();
  os_log_type_t v74 = type[0];
  BOOL v91 = os_log_type_enabled(v73, type[0]);
  if (!v90)
  {
    if (!v91) {
      goto LABEL_180;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_webtransport_session_add_to_http_messaging";
    os_log_type_t v75 = "%{public}s called with null parameters, no backtrace";
    goto LABEL_179;
  }
  if (v91)
  {
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_webtransport_session_add_to_http_messaging";
    *(_WORD *)&unsigned char buf[12] = 2082;
    *(void *)&buf[14] = v90;
    _os_log_impl(&dword_1830D4000, v73, v74, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v90);
  if (v72) {
LABEL_181:
  }
    free(v72);
LABEL_69:
  if (!*((void *)handle + 4))
  {
    if ((handle[548] & 2) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v52 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        int v53 = *((_DWORD *)handle + 115);
        *(_DWORD *)buf = 136446978;
        *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_session_listen_protocol_new_flow";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = handle + 464;
        *(_WORD *)&buf[22] = 2080;
        BOOL v111 = (uint64_t (*)(uint64_t, uint64_t))" ";
        LOWORD(v112) = 1024;
        *(_DWORD *)((char *)&v112 + 2) = v53;
        _os_log_impl(&dword_1830D4000, v52, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u> failed to get output handler for HTTP/3 CONNECT stream, failing", buf, 0x26u);
      }
    }
    if (*((_DWORD *)handle + 111) != 5)
    {
      if ((handle[548] & 2) == 0)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v56 = gLogObj;
        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
        {
          int v57 = *((_DWORD *)handle + 115);
          *(_DWORD *)buf = 136447234;
          *(void *)&uint8_t buf[4] = "nw_webtransport_session_terminate";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = handle + 464;
          *(_WORD *)&buf[22] = 2080;
          BOOL v111 = (uint64_t (*)(uint64_t, uint64_t))" ";
          LOWORD(v112) = 1024;
          *(_DWORD *)((char *)&v112 + 2) = v57;
          HIWORD(v112) = 1024;
          LODWORD(v113) = 57;
          _os_log_impl(&dword_1830D4000, v56, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s<i%u> Closing webtransport session with error %{darwin.errno}d", buf, 0x2Cu);
        }
      }
      *((_DWORD *)handle + 111) = 5;
      char v58 = (char *)*((void *)handle + 23);
      if (v58)
      {
        *(void *)buf = MEMORY[0x1E4F143A8];
        *(void *)&buf[8] = 0x40000000;
        *(void *)&buf[16] = ___ZL33nw_webtransport_session_terminateP23nw_webtransport_sessioni_block_invoke;
        BOOL v111 = (uint64_t (*)(uint64_t, uint64_t))&__block_descriptor_tmp_26_33833;
        LODWORD(v112) = 57;
        nw_hash_table_apply(v58, (uint64_t)buf);
      }
      uint64_t v59 = *((void *)handle + 53);
      if (v59)
      {
        int v60 = *(void **)(v59 + 48);
        nw_protocol_error(v60, *((void *)handle + 53));
        nw_protocol_disconnected(v60, v59);
      }
      uint64_t v61 = *((void *)handle + 41);
      if (v61)
      {
        do
        {
          uint64_t v62 = *(void *)(v61 + 112);
          uint64_t v63 = *(void **)(v61 + 48);
          nw_protocol_error(v63, v61);
          nw_protocol_disconnected(v63, v61);
          uint64_t v61 = v62;
        }
        while (v62);
      }
      uint64_t v64 = *((void *)handle + 52);
      if (v64)
      {
        char v65 = *(void **)(v64 + 48);
        nw_protocol_error(v65, *((void *)handle + 52));
        nw_protocol_disconnected(v65, v64);
      }
      if (*((void *)handle + 4))
      {
        nw_protocol_remove_instance((uint64_t)handle);
        nw_protocol_disconnect(*((void **)handle + 4), (uint64_t)handle);
      }
      return 0;
    }
    if ((handle[548] & 2) != 0) {
      return 0;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v54 = gLogObj;
    if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO)) {
      return 0;
    }
    int v55 = *((_DWORD *)handle + 115);
    *(_DWORD *)buf = 136446978;
    *(void *)&uint8_t buf[4] = "nw_webtransport_session_terminate";
    *(_WORD *)&unsigned char buf[12] = 2082;
    *(void *)&buf[14] = handle + 464;
    *(_WORD *)&buf[22] = 2080;
    BOOL v111 = (uint64_t (*)(uint64_t, uint64_t))" ";
    LOWORD(v112) = 1024;
    *(_DWORD *)((char *)&v112 + 2) = v55;
    uint64_t v17 = "%{public}s %{public}s%s<i%u> Session already terminated, ignoring";
    id v18 = v54;
    os_log_type_t v19 = OS_LOG_TYPE_INFO;
LABEL_19:
    _os_log_impl(&dword_1830D4000, v18, v19, v17, buf, 0x26u);
    return 0;
  }
  if ((handle[548] & 2) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v47 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
    {
      int v48 = *((_DWORD *)handle + 115);
      char v49 = (void *)*((void *)handle + 4);
      *(_DWORD *)buf = 136447234;
      *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_session_listen_protocol_new_flow";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = handle + 464;
      *(_WORD *)&buf[22] = 2080;
      BOOL v111 = (uint64_t (*)(uint64_t, uint64_t))" ";
      LOWORD(v112) = 1024;
      *(_DWORD *)((char *)&v112 + 2) = v48;
      HIWORD(v112) = 2048;
      BOOL v113 = v49;
      _os_log_impl(&dword_1830D4000, v47, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s<i%u> Got output handler from new_flow %p for CONNECT stream, sending async connect and awaiting input for session", buf, 0x30u);
    }
  }
  *((_DWORD *)handle + 111) = 3;
  uint64_t v50 = *((void *)handle + 54);
  unint64_t v51 = (void *)*((void *)handle + 49);
  v94[0] = MEMORY[0x1E4F143A8];
  v94[1] = 0x40000000;
  v94[2] = ___ZL57nw_protocol_webtransport_session_listen_protocol_new_flowP18nw_listen_protocolP11nw_endpointP13nw_parameters_block_invoke;
  v94[3] = &unk_1E5240588;
  v94[4] = v50;
  nw_queue_context_async(v51, v94);
  return 1;
}

BOOL network_proxy_is_transparent(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    id v1 = a1;
    BOOL v2 = v1[38] != 1 || (v1[39] - 2003) < 0xFFFFFFFE;

    return v2;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  id v13 = "network_proxy_is_transparent";
  id v4 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v10 = 0;
  if (__nwlog_fault(v4, &type, &v10))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      unint64_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        id v13 = "network_proxy_is_transparent";
        uint64_t v7 = "%{public}s called with null proxy";
LABEL_20:
        _os_log_impl(&dword_1830D4000, v5, v6, v7, buf, 0xCu);
      }
    }
    else if (v10)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      unint64_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      BOOL v9 = os_log_type_enabled(v5, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          id v13 = "network_proxy_is_transparent";
          __int16 v14 = 2082;
          id v15 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s called with null proxy, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_21;
      }
      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        id v13 = "network_proxy_is_transparent";
        uint64_t v7 = "%{public}s called with null proxy, no backtrace";
        goto LABEL_20;
      }
    }
    else
    {
      unint64_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        id v13 = "network_proxy_is_transparent";
        uint64_t v7 = "%{public}s called with null proxy, backtrace limit exceeded";
        goto LABEL_20;
      }
    }
  }
LABEL_21:
  if (v4) {
    free(v4);
  }
  return 0;
}

uint64_t nw_protocol_instance_access_globals(void *a1, void *a2)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  unint64_t v5 = (uint64_t (**)(void, void))v4;
  if (!v3)
  {
    BOOL v11 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    nw_protocol_definition_t v42 = "nw_protocol_instance_access_globals";
    os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v39 = 0;
    if (!__nwlog_fault(v12, &type, &v39)) {
      goto LABEL_58;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v13 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        nw_protocol_definition_t v42 = "nw_protocol_instance_access_globals";
        _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s called with null instance", buf, 0xCu);
      }
      goto LABEL_90;
    }
    if (!v39)
    {
      id v13 = __nwlog_obj();
      os_log_type_t v34 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        nw_protocol_definition_t v42 = "nw_protocol_instance_access_globals";
        _os_log_impl(&dword_1830D4000, v13, v34, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_90;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    id v13 = __nwlog_obj();
    os_log_type_t v24 = type;
    BOOL v25 = os_log_type_enabled(v13, type);
    if (!backtrace_string)
    {
      if (v25)
      {
        *(_DWORD *)buf = 136446210;
        nw_protocol_definition_t v42 = "nw_protocol_instance_access_globals";
        _os_log_impl(&dword_1830D4000, v13, v24, "%{public}s called with null instance, no backtrace", buf, 0xCu);
      }
      goto LABEL_90;
    }
    if (v25)
    {
      *(_DWORD *)buf = 136446466;
      nw_protocol_definition_t v42 = "nw_protocol_instance_access_globals";
      __int16 v43 = 2082;
      uint64_t v44 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v13, v24, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_57:

    free(backtrace_string);
    goto LABEL_58;
  }
  if (!v4)
  {
    id v15 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    nw_protocol_definition_t v42 = "nw_protocol_instance_access_globals";
    os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v39 = 0;
    if (!__nwlog_fault(v12, &type, &v39)) {
      goto LABEL_58;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v13 = __nwlog_obj();
      os_log_type_t v16 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        nw_protocol_definition_t v42 = "nw_protocol_instance_access_globals";
        _os_log_impl(&dword_1830D4000, v13, v16, "%{public}s called with null access_block", buf, 0xCu);
      }
      goto LABEL_90;
    }
    if (!v39)
    {
      id v13 = __nwlog_obj();
      os_log_type_t v35 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        nw_protocol_definition_t v42 = "nw_protocol_instance_access_globals";
        _os_log_impl(&dword_1830D4000, v13, v35, "%{public}s called with null access_block, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_90;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    id v13 = __nwlog_obj();
    os_log_type_t v26 = type;
    BOOL v27 = os_log_type_enabled(v13, type);
    if (!backtrace_string)
    {
      if (v27)
      {
        *(_DWORD *)buf = 136446210;
        nw_protocol_definition_t v42 = "nw_protocol_instance_access_globals";
        _os_log_impl(&dword_1830D4000, v13, v26, "%{public}s called with null access_block, no backtrace", buf, 0xCu);
      }
      goto LABEL_90;
    }
    if (v27)
    {
      *(_DWORD *)buf = 136446466;
      nw_protocol_definition_t v42 = "nw_protocol_instance_access_globals";
      __int16 v43 = 2082;
      uint64_t v44 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v13, v26, "%{public}s called with null access_block, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_57;
  }
  os_log_type_t v6 = (void *)v3[1];
  if (!v6)
  {
    uint64_t v17 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    nw_protocol_definition_t v42 = "nw_protocol_instance_access_globals";
    os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v39 = 0;
    if (!__nwlog_fault(v12, &type, &v39)) {
      goto LABEL_58;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v13 = __nwlog_obj();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        nw_protocol_definition_t v42 = "nw_protocol_instance_access_globals";
        _os_log_impl(&dword_1830D4000, v13, v18, "%{public}s called with null instance->parent_definition", buf, 0xCu);
      }
      goto LABEL_90;
    }
    if (!v39)
    {
      id v13 = __nwlog_obj();
      os_log_type_t v36 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        nw_protocol_definition_t v42 = "nw_protocol_instance_access_globals";
        _os_log_impl(&dword_1830D4000, v13, v36, "%{public}s called with null instance->parent_definition, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_90;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    id v13 = __nwlog_obj();
    os_log_type_t v28 = type;
    BOOL v29 = os_log_type_enabled(v13, type);
    if (!backtrace_string)
    {
      if (v29)
      {
        *(_DWORD *)buf = 136446210;
        nw_protocol_definition_t v42 = "nw_protocol_instance_access_globals";
        _os_log_impl(&dword_1830D4000, v13, v28, "%{public}s called with null instance->parent_definition, no backtrace", buf, 0xCu);
      }
      goto LABEL_90;
    }
    if (v29)
    {
      *(_DWORD *)buf = 136446466;
      nw_protocol_definition_t v42 = "nw_protocol_instance_access_globals";
      __int16 v43 = 2082;
      uint64_t v44 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v13, v28, "%{public}s called with null instance->parent_definition, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_57;
  }
  if (!v3[6])
  {
    os_log_type_t v19 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    nw_protocol_definition_t v42 = "nw_protocol_instance_access_globals";
    os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v39 = 0;
    if (!__nwlog_fault(v12, &type, &v39)) {
      goto LABEL_58;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v13 = __nwlog_obj();
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        nw_protocol_definition_t v42 = "nw_protocol_instance_access_globals";
        _os_log_impl(&dword_1830D4000, v13, v20, "%{public}s called with null instance->parameters", buf, 0xCu);
      }
      goto LABEL_90;
    }
    if (!v39)
    {
      id v13 = __nwlog_obj();
      os_log_type_t v37 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        nw_protocol_definition_t v42 = "nw_protocol_instance_access_globals";
        _os_log_impl(&dword_1830D4000, v13, v37, "%{public}s called with null instance->parameters, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_90;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    id v13 = __nwlog_obj();
    os_log_type_t v30 = type;
    BOOL v31 = os_log_type_enabled(v13, type);
    if (!backtrace_string)
    {
      if (v31)
      {
        *(_DWORD *)buf = 136446210;
        nw_protocol_definition_t v42 = "nw_protocol_instance_access_globals";
        _os_log_impl(&dword_1830D4000, v13, v30, "%{public}s called with null instance->parameters, no backtrace", buf, 0xCu);
      }
      goto LABEL_90;
    }
    if (v31)
    {
      *(_DWORD *)buf = 136446466;
      nw_protocol_definition_t v42 = "nw_protocol_instance_access_globals";
      __int16 v43 = 2082;
      uint64_t v44 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v13, v30, "%{public}s called with null instance->parameters, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_57;
  }
  uint64_t v7 = (void *)v3[15];
  if (v7)
  {
    uint64_t globals_for_protocol = nw_context_get_globals_for_protocol(v7, v6);
    uint64_t v9 = v5[2](v5, globals_for_protocol);
    goto LABEL_7;
  }
  id v21 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  nw_protocol_definition_t v42 = "nw_protocol_instance_access_globals";
  os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v39 = 0;
  if (__nwlog_fault(v12, &type, &v39))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v13 = __nwlog_obj();
      os_log_type_t v22 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        nw_protocol_definition_t v42 = "nw_protocol_instance_access_globals";
        _os_log_impl(&dword_1830D4000, v13, v22, "%{public}s called with null instance->context", buf, 0xCu);
      }
LABEL_90:

      goto LABEL_58;
    }
    if (!v39)
    {
      id v13 = __nwlog_obj();
      os_log_type_t v38 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        nw_protocol_definition_t v42 = "nw_protocol_instance_access_globals";
        _os_log_impl(&dword_1830D4000, v13, v38, "%{public}s called with null instance->context, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_90;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    id v13 = __nwlog_obj();
    os_log_type_t v32 = type;
    BOOL v33 = os_log_type_enabled(v13, type);
    if (!backtrace_string)
    {
      if (v33)
      {
        *(_DWORD *)buf = 136446210;
        nw_protocol_definition_t v42 = "nw_protocol_instance_access_globals";
        _os_log_impl(&dword_1830D4000, v13, v32, "%{public}s called with null instance->context, no backtrace", buf, 0xCu);
      }
      goto LABEL_90;
    }
    if (v33)
    {
      *(_DWORD *)buf = 136446466;
      nw_protocol_definition_t v42 = "nw_protocol_instance_access_globals";
      __int16 v43 = 2082;
      uint64_t v44 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v13, v32, "%{public}s called with null instance->context, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_57;
  }
LABEL_58:
  if (v12) {
    free(v12);
  }
  uint64_t v9 = 0;
LABEL_7:

  return v9;
}

void sub_1833DB10C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_context_get_globals_for_protocol(void *a1, void *a2)
{
  uint64_t v94 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  unint64_t v5 = v4;
  if (!v3)
  {
    os_log_type_t v38 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    int v87 = "nw_context_get_globals_for_protocol";
    char v39 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v85 = OS_LOG_TYPE_ERROR;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v39, &v85, &type))
    {
      if (v85 == OS_LOG_TYPE_FAULT)
      {
        nw_protocol_options_t v40 = __nwlog_obj();
        os_log_type_t v41 = v85;
        if (os_log_type_enabled(v40, v85))
        {
          *(_DWORD *)buf = 136446210;
          int v87 = "nw_context_get_globals_for_protocol";
          _os_log_impl(&dword_1830D4000, v40, v41, "%{public}s called with null context", buf, 0xCu);
        }
      }
      else if (type)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        nw_protocol_options_t v40 = __nwlog_obj();
        os_log_type_t v51 = v85;
        BOOL v52 = os_log_type_enabled(v40, v85);
        if (backtrace_string)
        {
          if (v52)
          {
            *(_DWORD *)buf = 136446466;
            int v87 = "nw_context_get_globals_for_protocol";
            __int16 v88 = 2082;
            BOOL v89 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v40, v51, "%{public}s called with null context, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_100;
        }
        if (v52)
        {
          *(_DWORD *)buf = 136446210;
          int v87 = "nw_context_get_globals_for_protocol";
          _os_log_impl(&dword_1830D4000, v40, v51, "%{public}s called with null context, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        nw_protocol_options_t v40 = __nwlog_obj();
        os_log_type_t v63 = v85;
        if (os_log_type_enabled(v40, v85))
        {
          *(_DWORD *)buf = 136446210;
          int v87 = "nw_context_get_globals_for_protocol";
          _os_log_impl(&dword_1830D4000, v40, v63, "%{public}s called with null context, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_100:
    if (v39) {
      free(v39);
    }
    goto LABEL_114;
  }
  if (!v4)
  {
    nw_protocol_definition_t v42 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    int v87 = "nw_context_get_globals_for_protocol";
    __int16 v43 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v85 = OS_LOG_TYPE_ERROR;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v43, &v85, &type))
    {
      if (v85 == OS_LOG_TYPE_FAULT)
      {
        uint64_t v44 = __nwlog_obj();
        os_log_type_t v45 = v85;
        if (os_log_type_enabled(v44, v85))
        {
          *(_DWORD *)buf = 136446210;
          int v87 = "nw_context_get_globals_for_protocol";
          _os_log_impl(&dword_1830D4000, v44, v45, "%{public}s called with null protocol", buf, 0xCu);
        }
      }
      else if (type)
      {
        int v53 = (char *)__nw_create_backtrace_string();
        uint64_t v44 = __nwlog_obj();
        os_log_type_t v54 = v85;
        BOOL v55 = os_log_type_enabled(v44, v85);
        if (v53)
        {
          if (v55)
          {
            *(_DWORD *)buf = 136446466;
            int v87 = "nw_context_get_globals_for_protocol";
            __int16 v88 = 2082;
            BOOL v89 = v53;
            _os_log_impl(&dword_1830D4000, v44, v54, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v53);
          goto LABEL_105;
        }
        if (v55)
        {
          *(_DWORD *)buf = 136446210;
          int v87 = "nw_context_get_globals_for_protocol";
          _os_log_impl(&dword_1830D4000, v44, v54, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        uint64_t v44 = __nwlog_obj();
        os_log_type_t v64 = v85;
        if (os_log_type_enabled(v44, v85))
        {
          *(_DWORD *)buf = 136446210;
          int v87 = "nw_context_get_globals_for_protocol";
          _os_log_impl(&dword_1830D4000, v44, v64, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_105:
    if (v43) {
      free(v43);
    }
    goto LABEL_113;
  }
  os_log_type_t v6 = v3;
  uint64_t v7 = v6;
  if ((*((unsigned char *)v6 + 136) & 8) == 0) {
    dispatch_assert_queue_V2(*((dispatch_queue_t *)v6 + 1));
  }

  id v3 = (os_unfair_lock_s **)nw_context_copy_globals_context(v7);
  unsigned int v8 = v3[4];
  if (v8)
  {
    os_unfair_lock_lock(v8 + 12);
    uint64_t v9 = v3[4];
    if (!v9) {
      goto LABEL_166;
    }
    uint64_t node = nw_hash_table_get_node(*(void *)&v9[13]._os_unfair_lock_opaque, (uint64_t)v5, 0);
    if (node)
    {
      uint64_t v11 = *(void *)(node + 32);
LABEL_167:
      os_unfair_lock_unlock(v3[4] + 12);

      goto LABEL_168;
    }
    os_log_type_t v12 = v5;
    id v13 = v3;
    uint64_t v14 = v12[9];
    if (v14)
    {
      os_log_type_t v16 = *(uint64_t (**)(void *))v14;
      id v15 = *(uint64_t (**)(void *, os_unfair_lock_s **))(v14 + 8);
      if (v16)
      {
        if (!v15)
        {
          uint64_t v17 = v16(v12);
          goto LABEL_15;
        }
LABEL_14:
        uint64_t v17 = v15(v12, v13);
LABEL_15:
        uint64_t v11 = v17;

        if (v11)
        {
          os_log_type_t v85 = OS_LOG_TYPE_DEFAULT;
          uint64_t v18 = *(void *)&v3[4][13]._os_unfair_lock_opaque;
          os_log_type_t v19 = v12;
          BOOL v20 = nw_hash_table_add_object(v18, (uint64_t)v19, (char *)&v85);
          if (v20)
          {
            uint64_t v21 = v20;
            if (v85)
            {
LABEL_52:
              *(void *)(v21 + 32) = v11;
              goto LABEL_167;
            }
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            id v22 = (id)gLogObj;
            *(_DWORD *)buf = 136446722;
            int v87 = "nw_context_get_globals_for_protocol";
            __int16 v88 = 2114;
            BOOL v89 = (char *)v13;
            __int16 v90 = 2048;
            BOOL v91 = v19;
            BOOL v23 = (char *)_os_log_send_and_compose_impl();

            os_log_type_t type = OS_LOG_TYPE_ERROR;
            char v83 = 0;
            if (__nwlog_fault(v23, &type, &v83))
            {
              if (type == OS_LOG_TYPE_FAULT)
              {
                os_log_type_t v24 = __nwlog_obj();
                os_log_type_t v25 = type;
                if (os_log_type_enabled(v24, type))
                {
                  *(_DWORD *)buf = 136446722;
                  int v87 = "nw_context_get_globals_for_protocol";
                  __int16 v88 = 2114;
                  BOOL v89 = (char *)v13;
                  __int16 v90 = 2048;
                  BOOL v91 = v19;
                  _os_log_impl(&dword_1830D4000, v24, v25, "%{public}s %{public}@ failed to add globals for protocol %p", buf, 0x20u);
                }
              }
              else if (v83)
              {
                BOOL v33 = (char *)__nw_create_backtrace_string();
                os_log_type_t v24 = __nwlog_obj();
                os_log_type_t v34 = type;
                BOOL v35 = os_log_type_enabled(v24, type);
                if (v33)
                {
                  if (v35)
                  {
                    *(_DWORD *)buf = 136446978;
                    int v87 = "nw_context_get_globals_for_protocol";
                    __int16 v88 = 2114;
                    BOOL v89 = (char *)v13;
                    __int16 v90 = 2048;
                    BOOL v91 = v19;
                    __int16 v92 = 2082;
                    BOOL v93 = v33;
                    _os_log_impl(&dword_1830D4000, v24, v34, "%{public}s %{public}@ failed to add globals for protocol %p, dumping backtrace:%{public}s", buf, 0x2Au);
                  }

                  free(v33);
                  goto LABEL_50;
                }
                if (v35)
                {
                  *(_DWORD *)buf = 136446722;
                  int v87 = "nw_context_get_globals_for_protocol";
                  __int16 v88 = 2114;
                  BOOL v89 = (char *)v13;
                  __int16 v90 = 2048;
                  BOOL v91 = v19;
                  _os_log_impl(&dword_1830D4000, v24, v34, "%{public}s %{public}@ failed to add globals for protocol %p, no backtrace", buf, 0x20u);
                }
              }
              else
              {
                os_log_type_t v24 = __nwlog_obj();
                os_log_type_t v37 = type;
                if (os_log_type_enabled(v24, type))
                {
                  *(_DWORD *)buf = 136446722;
                  int v87 = "nw_context_get_globals_for_protocol";
                  __int16 v88 = 2114;
                  BOOL v89 = (char *)v13;
                  __int16 v90 = 2048;
                  BOOL v91 = v19;
                  _os_log_impl(&dword_1830D4000, v24, v37, "%{public}s %{public}@ failed to add globals for protocol %p, backtrace limit exceeded", buf, 0x20u);
                }
              }
            }
LABEL_50:
            if (v23) {
              free(v23);
            }
            goto LABEL_52;
          }
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          id v26 = (id)gLogObj;
          *(_DWORD *)buf = 136446210;
          int v87 = "nw_context_get_globals_for_protocol";
          BOOL v27 = (char *)_os_log_send_and_compose_impl();

          os_log_type_t type = OS_LOG_TYPE_ERROR;
          char v83 = 0;
          if (__nwlog_fault(v27, &type, &v83))
          {
            if (type == OS_LOG_TYPE_FAULT)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              os_log_type_t v28 = (id)gLogObj;
              os_log_type_t v29 = type;
              if (os_log_type_enabled(v28, type))
              {
                *(_DWORD *)buf = 136446210;
                int v87 = "nw_context_get_globals_for_protocol";
                _os_log_impl(&dword_1830D4000, v28, v29, "%{public}s nw_hash_table_add_object failed", buf, 0xCu);
              }
LABEL_43:

              goto LABEL_164;
            }
            if (!v83)
            {
              os_log_type_t v28 = __nwlog_obj();
              os_log_type_t v36 = type;
              if (os_log_type_enabled(v28, type))
              {
                *(_DWORD *)buf = 136446210;
                int v87 = "nw_context_get_globals_for_protocol";
                _os_log_impl(&dword_1830D4000, v28, v36, "%{public}s nw_hash_table_add_object failed, backtrace limit exceeded", buf, 0xCu);
              }
              goto LABEL_43;
            }
            os_log_type_t v30 = (char *)__nw_create_backtrace_string();
            os_log_type_t v28 = __nwlog_obj();
            os_log_type_t v31 = type;
            BOOL v32 = os_log_type_enabled(v28, type);
            if (!v30)
            {
              if (v32)
              {
                *(_DWORD *)buf = 136446210;
                int v87 = "nw_context_get_globals_for_protocol";
                _os_log_impl(&dword_1830D4000, v28, v31, "%{public}s nw_hash_table_add_object failed, no backtrace", buf, 0xCu);
              }
              goto LABEL_43;
            }
            if (v32)
            {
              *(_DWORD *)buf = 136446466;
              int v87 = "nw_context_get_globals_for_protocol";
              __int16 v88 = 2082;
              BOOL v89 = v30;
              _os_log_impl(&dword_1830D4000, v28, v31, "%{public}s nw_hash_table_add_object failed, dumping backtrace:%{public}s", buf, 0x16u);
            }

LABEL_156:
            free(v30);
            if (!v27) {
              goto LABEL_166;
            }
            goto LABEL_165;
          }
          goto LABEL_164;
        }
LABEL_146:
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v76 = (id)gLogObj;
        *(_DWORD *)buf = 136446210;
        int v87 = "nw_context_get_globals_for_protocol";
        BOOL v27 = (char *)_os_log_send_and_compose_impl();

        os_log_type_t v85 = OS_LOG_TYPE_ERROR;
        os_log_type_t type = OS_LOG_TYPE_DEFAULT;
        if (__nwlog_fault(v27, &v85, &type))
        {
          if (v85 == OS_LOG_TYPE_FAULT)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            os_log_type_t v77 = (id)gLogObj;
            os_log_type_t v78 = v85;
            if (os_log_type_enabled(v77, v85))
            {
              *(_DWORD *)buf = 136446210;
              int v87 = "nw_context_get_globals_for_protocol";
              _os_log_impl(&dword_1830D4000, v77, v78, "%{public}s nw_protocol_definition_allocate_globals failed", buf, 0xCu);
            }
          }
          else if (type)
          {
            os_log_type_t v30 = (char *)__nw_create_backtrace_string();
            os_log_type_t v77 = __nwlog_obj();
            os_log_type_t v79 = v85;
            BOOL v80 = os_log_type_enabled(v77, v85);
            if (v30)
            {
              if (v80)
              {
                *(_DWORD *)buf = 136446466;
                int v87 = "nw_context_get_globals_for_protocol";
                __int16 v88 = 2082;
                BOOL v89 = v30;
                _os_log_impl(&dword_1830D4000, v77, v79, "%{public}s nw_protocol_definition_allocate_globals failed, dumping backtrace:%{public}s", buf, 0x16u);
              }

              goto LABEL_156;
            }
            if (v80)
            {
              *(_DWORD *)buf = 136446210;
              int v87 = "nw_context_get_globals_for_protocol";
              _os_log_impl(&dword_1830D4000, v77, v79, "%{public}s nw_protocol_definition_allocate_globals failed, no backtrace", buf, 0xCu);
            }
          }
          else
          {
            os_log_type_t v77 = __nwlog_obj();
            os_log_type_t v81 = v85;
            if (os_log_type_enabled(v77, v85))
            {
              *(_DWORD *)buf = 136446210;
              int v87 = "nw_context_get_globals_for_protocol";
              _os_log_impl(&dword_1830D4000, v77, v81, "%{public}s nw_protocol_definition_allocate_globals failed, backtrace limit exceeded", buf, 0xCu);
            }
          }
        }
LABEL_164:
        if (v27) {
LABEL_165:
        }
          free(v27);
LABEL_166:
        uint64_t v11 = 0;
        goto LABEL_167;
      }
      if (v15) {
        goto LABEL_14;
      }
      BOOL v69 = __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      int v87 = "nw_protocol_definition_allocate_globals";
      int v60 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t v85 = OS_LOG_TYPE_ERROR;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      if (__nwlog_fault(v60, &v85, &type))
      {
        if (v85 == OS_LOG_TYPE_FAULT)
        {
          uint64_t v61 = __nwlog_obj();
          os_log_type_t v70 = v85;
          if (os_log_type_enabled(v61, v85))
          {
            *(_DWORD *)buf = 136446210;
            int v87 = "nw_protocol_definition_allocate_globals";
            _os_log_impl(&dword_1830D4000, v61, v70, "%{public}s called with null (definition->common_state->allocate_globals != __null || definition->common_state->allocate_context_globals != __null)", buf, 0xCu);
          }
        }
        else if (type)
        {
          uint64_t v72 = (char *)__nw_create_backtrace_string();
          uint64_t v61 = __nwlog_obj();
          os_log_type_t v73 = v85;
          BOOL v74 = os_log_type_enabled(v61, v85);
          if (v72)
          {
            if (v74)
            {
              *(_DWORD *)buf = 136446466;
              int v87 = "nw_protocol_definition_allocate_globals";
              __int16 v88 = 2082;
              BOOL v89 = v72;
              _os_log_impl(&dword_1830D4000, v61, v73, "%{public}s called with null (definition->common_state->allocate_globals != __null || definition->common_state->allocate_context_globals != __null), dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(v72);
            if (!v60) {
              goto LABEL_145;
            }
            goto LABEL_144;
          }
          if (v74)
          {
            *(_DWORD *)buf = 136446210;
            int v87 = "nw_protocol_definition_allocate_globals";
            _os_log_impl(&dword_1830D4000, v61, v73, "%{public}s called with null (definition->common_state->allocate_globals != __null || definition->common_state->allocate_context_globals != __null), no backtrace", buf, 0xCu);
          }
        }
        else
        {
          uint64_t v61 = __nwlog_obj();
          os_log_type_t v75 = v85;
          if (os_log_type_enabled(v61, v85))
          {
            *(_DWORD *)buf = 136446210;
            int v87 = "nw_protocol_definition_allocate_globals";
            _os_log_impl(&dword_1830D4000, v61, v75, "%{public}s called with null (definition->common_state->allocate_globals != __null || definition->common_state->allocate_context_globals != __null), backtrace limit exceeded", buf, 0xCu);
          }
        }
        goto LABEL_142;
      }
LABEL_143:
      if (!v60)
      {
LABEL_145:

        goto LABEL_146;
      }
LABEL_144:
      free(v60);
      goto LABEL_145;
    }
    uint64_t v59 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    int v87 = "nw_protocol_definition_allocate_globals";
    int v60 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v85 = OS_LOG_TYPE_ERROR;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v60, &v85, &type)) {
      goto LABEL_143;
    }
    if (v85 == OS_LOG_TYPE_FAULT)
    {
      uint64_t v61 = __nwlog_obj();
      os_log_type_t v62 = v85;
      if (os_log_type_enabled(v61, v85))
      {
        *(_DWORD *)buf = 136446210;
        int v87 = "nw_protocol_definition_allocate_globals";
        _os_log_impl(&dword_1830D4000, v61, v62, "%{public}s called with null definition->common_state", buf, 0xCu);
      }
    }
    else if (type)
    {
      int v66 = (char *)__nw_create_backtrace_string();
      uint64_t v61 = __nwlog_obj();
      os_log_type_t v67 = v85;
      BOOL v68 = os_log_type_enabled(v61, v85);
      if (v66)
      {
        if (v68)
        {
          *(_DWORD *)buf = 136446466;
          int v87 = "nw_protocol_definition_allocate_globals";
          __int16 v88 = 2082;
          BOOL v89 = v66;
          _os_log_impl(&dword_1830D4000, v61, v67, "%{public}s called with null definition->common_state, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v66);
        goto LABEL_143;
      }
      if (v68)
      {
        *(_DWORD *)buf = 136446210;
        int v87 = "nw_protocol_definition_allocate_globals";
        _os_log_impl(&dword_1830D4000, v61, v67, "%{public}s called with null definition->common_state, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v61 = __nwlog_obj();
      os_log_type_t v71 = v85;
      if (os_log_type_enabled(v61, v85))
      {
        *(_DWORD *)buf = 136446210;
        int v87 = "nw_protocol_definition_allocate_globals";
        _os_log_impl(&dword_1830D4000, v61, v71, "%{public}s called with null definition->common_state, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_142:

    goto LABEL_143;
  }
  os_log_type_t v46 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  int v87 = "nw_context_get_globals_for_protocol";
  os_log_type_t v47 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t v85 = OS_LOG_TYPE_ERROR;
  os_log_type_t type = OS_LOG_TYPE_DEFAULT;
  if (!__nwlog_fault(v47, &v85, &type)) {
    goto LABEL_111;
  }
  if (v85 == OS_LOG_TYPE_FAULT)
  {
    int v48 = __nwlog_obj();
    os_log_type_t v49 = v85;
    if (os_log_type_enabled(v48, v85))
    {
      *(_DWORD *)buf = 136446210;
      int v87 = "nw_context_get_globals_for_protocol";
      _os_log_impl(&dword_1830D4000, v48, v49, "%{public}s called with null context->globals", buf, 0xCu);
    }
  }
  else if (type)
  {
    uint64_t v56 = (char *)__nw_create_backtrace_string();
    int v48 = __nwlog_obj();
    os_log_type_t v57 = v85;
    BOOL v58 = os_log_type_enabled(v48, v85);
    if (v56)
    {
      if (v58)
      {
        *(_DWORD *)buf = 136446466;
        int v87 = "nw_context_get_globals_for_protocol";
        __int16 v88 = 2082;
        BOOL v89 = v56;
        _os_log_impl(&dword_1830D4000, v48, v57, "%{public}s called with null context->globals, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(v56);
      goto LABEL_111;
    }
    if (v58)
    {
      *(_DWORD *)buf = 136446210;
      int v87 = "nw_context_get_globals_for_protocol";
      _os_log_impl(&dword_1830D4000, v48, v57, "%{public}s called with null context->globals, no backtrace", buf, 0xCu);
    }
  }
  else
  {
    int v48 = __nwlog_obj();
    os_log_type_t v65 = v85;
    if (os_log_type_enabled(v48, v85))
    {
      *(_DWORD *)buf = 136446210;
      int v87 = "nw_context_get_globals_for_protocol";
      _os_log_impl(&dword_1830D4000, v48, v65, "%{public}s called with null context->globals, backtrace limit exceeded", buf, 0xCu);
    }
  }

LABEL_111:
  if (v47) {
    free(v47);
  }
LABEL_113:

LABEL_114:
  uint64_t v11 = 0;
LABEL_168:

  return v11;
}

void sub_1833DC41C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_tcp_allocate_globals(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  unint64_t v5 = malloc_type_calloc(1uLL, 0x14CuLL, 0xEAFB8F1AuLL);
  if (v5) {
    goto LABEL_2;
  }
  uint64_t v7 = __nwlog_obj();
  os_log_type_enabled(v7, OS_LOG_TYPE_ERROR);
  unsigned int v8 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v8);
  if (!result)
  {
    free(v8);
LABEL_2:
    nw_tcp_init_globals();

    return (BOOL)v5;
  }
  __break(1u);
  return result;
}

void sub_1833DC5A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_protocol_instance_get_multipath_service(void *a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  BOOL v2 = v1;
  if (!v1)
  {
    os_log_type_t v6 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v18 = "nw_protocol_instance_get_multipath_service";
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v15 = 0;
    if (__nwlog_fault(v7, &type, &v15))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        unsigned int v8 = __nwlog_obj();
        os_log_type_t v9 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v18 = "nw_protocol_instance_get_multipath_service";
          _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null instance", buf, 0xCu);
        }
      }
      else if (v15)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        unsigned int v8 = __nwlog_obj();
        os_log_type_t v11 = type;
        BOOL v12 = os_log_type_enabled(v8, type);
        if (backtrace_string)
        {
          if (v12)
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v18 = "nw_protocol_instance_get_multipath_service";
            __int16 v19 = 2082;
            BOOL v20 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_20;
        }
        if (v12)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v18 = "nw_protocol_instance_get_multipath_service";
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null instance, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        unsigned int v8 = __nwlog_obj();
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v18 = "nw_protocol_instance_get_multipath_service";
          _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_20:
    if (v7) {
      free(v7);
    }
    goto LABEL_22;
  }
  id v3 = (void *)*((void *)v1 + 6);
  if (!v3)
  {
LABEL_22:
    uint64_t v5 = 0;
    goto LABEL_23;
  }
  id v4 = v3;
  uint64_t v5 = *(unsigned int *)(v4[13] + 103);

LABEL_23:
  return v5;
}

void nw_service_connector_cancel_request_inner(void *a1, void *a2, uint64_t a3, void *a4, int a5)
{
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  os_log_type_t v9 = a1;
  id v10 = a2;
  os_log_type_t v11 = a4;
  BOOL v12 = nw_service_connector_copy_active_outgoing_request(v9, v10, a3);
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_t v13 = (id)gLogObj;
  BOOL v14 = os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
  if (v12)
  {
    if (v14)
    {
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "nw_service_connector_cancel_request_inner";
      *(_WORD *)&unsigned char buf[12] = 2114;
      *(void *)&buf[14] = v9;
      *(_WORD *)&buf[22] = 2114;
      os_log_type_t v63 = (uint64_t (*)(uint64_t, uint64_t))v12;
      _os_log_impl(&dword_1830D4000, v13, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ cancelling active request %{public}@", buf, 0x20u);
    }

    char v15 = *((void *)v12 + 72);
    if (!v15 || v15 == v11) {
      goto LABEL_31;
    }
    if (!v11)
    {
LABEL_30:
      nw_connection_cancel(v15);
      char v15 = *((void *)v12 + 72);
LABEL_31:
      *((void *)v12 + 72) = 0;

      *((unsigned char *)v12 + 616) &= ~0x10u;
      uint64_t v24 = *((void *)v12 + 76);
      if (v24)
      {
        nw_queue_cancel_source(v24);
        *((void *)v12 + 76) = 0;
      }
      nw_service_connector_remove_active_outgoing_request(v9, (NWConcrete_nw_unique_connection_request *)v12);
      goto LABEL_34;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v16 = (id)gLogObj;
    *(_DWORD *)buf = 136446978;
    *(void *)&uint8_t buf[4] = "nw_service_connector_cancel_request_inner";
    *(_WORD *)&unsigned char buf[12] = 2114;
    *(void *)&buf[14] = v9;
    *(_WORD *)&buf[22] = 2114;
    os_log_type_t v63 = (uint64_t (*)(uint64_t, uint64_t))v12;
    *(_WORD *)os_log_type_t v64 = 2114;
    *(void *)&v64[2] = v11;
    uint64_t v17 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t v61 = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v17, type, &v61))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v18 = (id)gLogObj;
        os_log_type_t v19 = type[0];
        if (os_log_type_enabled(v18, type[0]))
        {
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_service_connector_cancel_request_inner";
          *(_WORD *)&unsigned char buf[12] = 2114;
          *(void *)&buf[14] = v9;
          *(_WORD *)&buf[22] = 2114;
          os_log_type_t v63 = (uint64_t (*)(uint64_t, uint64_t))v12;
          *(_WORD *)os_log_type_t v64 = 2114;
          *(void *)&v64[2] = v11;
          _os_log_impl(&dword_1830D4000, v18, v19, "%{public}s %{public}@ trying to cancel mismatched connections %{public}@ %{public}@", buf, 0x2Au);
        }
      }
      else if (v61)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v18 = (id)gLogObj;
        os_log_type_t v21 = type[0];
        BOOL v22 = os_log_type_enabled(v18, type[0]);
        if (backtrace_string)
        {
          if (v22)
          {
            *(_DWORD *)buf = 136447234;
            *(void *)&uint8_t buf[4] = "nw_service_connector_cancel_request_inner";
            *(_WORD *)&unsigned char buf[12] = 2114;
            *(void *)&buf[14] = v9;
            *(_WORD *)&buf[22] = 2114;
            os_log_type_t v63 = (uint64_t (*)(uint64_t, uint64_t))v12;
            *(_WORD *)os_log_type_t v64 = 2114;
            *(void *)&v64[2] = v11;
            *(_WORD *)&v64[10] = 2082;
            *(void *)&v64[12] = backtrace_string;
            _os_log_impl(&dword_1830D4000, v18, v21, "%{public}s %{public}@ trying to cancel mismatched connections %{public}@ %{public}@, dumping backtrace:%{public}s", buf, 0x34u);
          }

          free(backtrace_string);
          if (!v17) {
            goto LABEL_29;
          }
          goto LABEL_28;
        }
        if (v22)
        {
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_service_connector_cancel_request_inner";
          *(_WORD *)&unsigned char buf[12] = 2114;
          *(void *)&buf[14] = v9;
          *(_WORD *)&buf[22] = 2114;
          os_log_type_t v63 = (uint64_t (*)(uint64_t, uint64_t))v12;
          *(_WORD *)os_log_type_t v64 = 2114;
          *(void *)&v64[2] = v11;
          _os_log_impl(&dword_1830D4000, v18, v21, "%{public}s %{public}@ trying to cancel mismatched connections %{public}@ %{public}@, no backtrace", buf, 0x2Au);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v18 = (id)gLogObj;
        os_log_type_t v23 = type[0];
        if (os_log_type_enabled(v18, type[0]))
        {
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_service_connector_cancel_request_inner";
          *(_WORD *)&unsigned char buf[12] = 2114;
          *(void *)&buf[14] = v9;
          *(_WORD *)&buf[22] = 2114;
          os_log_type_t v63 = (uint64_t (*)(uint64_t, uint64_t))v12;
          *(_WORD *)os_log_type_t v64 = 2114;
          *(void *)&v64[2] = v11;
          _os_log_impl(&dword_1830D4000, v18, v23, "%{public}s %{public}@ trying to cancel mismatched connections %{public}@ %{public}@, backtrace limit exceeded", buf, 0x2Au);
        }
      }
    }
    if (!v17)
    {
LABEL_29:
      char v15 = *((void *)v12 + 72);
      goto LABEL_30;
    }
LABEL_28:
    free(v17);
    goto LABEL_29;
  }
  if (v14)
  {
    *(_DWORD *)buf = 136447234;
    *(void *)&uint8_t buf[4] = "nw_service_connector_cancel_request_inner";
    *(_WORD *)&unsigned char buf[12] = 2114;
    *(void *)&buf[14] = v9;
    *(_WORD *)&buf[22] = 2114;
    os_log_type_t v63 = (uint64_t (*)(uint64_t, uint64_t))v10;
    *(_WORD *)os_log_type_t v64 = 2082;
    *(void *)&v64[2] = a3;
    *(_WORD *)&v64[10] = 2114;
    *(void *)&v64[12] = v11;
    _os_log_impl(&dword_1830D4000, v13, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ no active request to cancel for %{public}@ \"%{public}s\" %{public}@", buf, 0x34u);
  }

LABEL_34:
  if (v11)
  {
    os_log_type_t v25 = v9;
    id v26 = v11;
    BOOL v27 = v26;
    if (!v25)
    {
      nw_protocol_options_t v40 = __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_service_connector_copy_active_connection_for_connection";
      os_log_type_t v41 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t v61 = OS_LOG_TYPE_ERROR;
      char v60 = 0;
      if (!__nwlog_fault(v41, &v61, &v60)) {
        goto LABEL_87;
      }
      if (v61 == OS_LOG_TYPE_FAULT)
      {
        nw_protocol_definition_t v42 = __nwlog_obj();
        os_log_type_t v43 = v61;
        if (os_log_type_enabled(v42, v61))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_service_connector_copy_active_connection_for_connection";
          _os_log_impl(&dword_1830D4000, v42, v43, "%{public}s called with null serviceConnector", buf, 0xCu);
        }
      }
      else if (v60)
      {
        os_log_type_t v46 = (char *)__nw_create_backtrace_string();
        nw_protocol_definition_t v42 = __nwlog_obj();
        os_log_type_t v52 = v61;
        BOOL v47 = os_log_type_enabled(v42, v61);
        if (v46)
        {
          if (v47)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_service_connector_copy_active_connection_for_connection";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = v46;
            _os_log_impl(&dword_1830D4000, v42, v52, "%{public}s called with null serviceConnector, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v46);
          if (!v41) {
            goto LABEL_89;
          }
          goto LABEL_88;
        }
        if (v47)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_service_connector_copy_active_connection_for_connection";
          _os_log_impl(&dword_1830D4000, v42, v52, "%{public}s called with null serviceConnector, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        nw_protocol_definition_t v42 = __nwlog_obj();
        os_log_type_t v50 = v61;
        if (os_log_type_enabled(v42, v61))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_service_connector_copy_active_connection_for_connection";
          _os_log_impl(&dword_1830D4000, v42, v50, "%{public}s called with null serviceConnector, backtrace limit exceeded", buf, 0xCu);
        }
      }
      goto LABEL_86;
    }
    uint64_t activeConnections = (uint64_t)v25->activeConnections;
    if (activeConnections)
    {
      *(void *)buf = 0;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x3032000000;
      os_log_type_t v63 = __Block_byref_object_copy__49805;
      *(void *)os_log_type_t v64 = __Block_byref_object_dispose__49806;
      *(void *)&os_log_type_t v64[8] = 0;
      *(void *)os_log_type_t type = MEMORY[0x1E4F143A8];
      uint64_t v55 = 3221225472;
      uint64_t v56 = (uint64_t)___ZL58nw_service_connector_copy_active_connection_for_connectionP31NWConcrete_nw_service_connectorP24NWConcrete_nw_connection_block_invoke;
      os_log_type_t v57 = &unk_1E524A1A8;
      os_log_type_t v29 = v26;
      BOOL v58 = v29;
      uint64_t v59 = buf;
      nw_dictionary_apply(activeConnections, (uint64_t)type);
      os_log_type_t v30 = (NWConcrete_nw_unique_connection *)*(id *)(*(void *)&buf[8] + 40);

      _Block_object_dispose(buf, 8);
      if (v30) {
        nw_service_connector_remove_active_connection(v25, v30);
      }
      goto LABEL_39;
    }
    uint64_t v44 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_service_connector_copy_active_connection_for_connection";
    os_log_type_t v41 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v61 = OS_LOG_TYPE_ERROR;
    char v60 = 0;
    if (__nwlog_fault(v41, &v61, &v60))
    {
      if (v61 == OS_LOG_TYPE_FAULT)
      {
        nw_protocol_definition_t v42 = __nwlog_obj();
        os_log_type_t v45 = v61;
        if (os_log_type_enabled(v42, v61))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_service_connector_copy_active_connection_for_connection";
          _os_log_impl(&dword_1830D4000, v42, v45, "%{public}s called with null serviceConnector->activeConnections", buf, 0xCu);
        }
LABEL_86:

        goto LABEL_87;
      }
      if (!v60)
      {
        nw_protocol_definition_t v42 = __nwlog_obj();
        os_log_type_t v51 = v61;
        if (os_log_type_enabled(v42, v61))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_service_connector_copy_active_connection_for_connection";
          _os_log_impl(&dword_1830D4000, v42, v51, "%{public}s called with null serviceConnector->activeConnections, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_86;
      }
      int v48 = (char *)__nw_create_backtrace_string();
      nw_protocol_definition_t v42 = __nwlog_obj();
      os_log_type_t v53 = v61;
      BOOL v49 = os_log_type_enabled(v42, v61);
      if (!v48)
      {
        if (v49)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_service_connector_copy_active_connection_for_connection";
          _os_log_impl(&dword_1830D4000, v42, v53, "%{public}s called with null serviceConnector->activeConnections, no backtrace", buf, 0xCu);
        }
        goto LABEL_86;
      }
      if (v49)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_service_connector_copy_active_connection_for_connection";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = v48;
        _os_log_impl(&dword_1830D4000, v42, v53, "%{public}s called with null serviceConnector->activeConnections, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(v48);
    }
LABEL_87:
    if (!v41)
    {
LABEL_89:

      os_log_type_t v30 = 0;
LABEL_39:
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v31 = (id)gLogObj;
      if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
      {
        BOOL v32 = "";
        *(_DWORD *)buf = 136447234;
        *(void *)&uint8_t buf[4] = "nw_service_connector_cancel_request_inner";
        *(void *)&buf[14] = v25;
        *(_WORD *)&unsigned char buf[12] = 2114;
        if (a5) {
          BOOL v32 = "force-";
        }
        *(_WORD *)&buf[22] = 2082;
        os_log_type_t v63 = (uint64_t (*)(uint64_t, uint64_t))v32;
        *(_WORD *)os_log_type_t v64 = 2114;
        *(void *)&v64[2] = v27;
        *(_WORD *)&v64[10] = 2114;
        *(void *)&v64[12] = v12;
        _os_log_impl(&dword_1830D4000, v31, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ %{public}scancelling connection %{public}@ for request %{public}@", buf, 0x34u);
      }

      if (a5) {
        nw_connection_cancel_current_endpoint(v27);
      }
      else {
        nw_connection_cancel(v27);
      }
      goto LABEL_53;
    }
LABEL_88:
    free(v41);
    goto LABEL_89;
  }
  BOOL v33 = (NWConcrete_nw_unique_connection *)nw_service_connector_copy_active_connection_with_endpoint_and_service(v9, v10, a3);
  os_log_type_t v30 = v33;
  if (v33)
  {
    connection = v33->connection;
    if (!connection) {
      goto LABEL_50;
    }
    BOOL v35 = connection;
    *(void *)os_log_type_t type = 0;
    uint64_t v55 = (uint64_t)type;
    uint64_t v56 = 0x2020000000;
    LOBYTE(v57) = 0;
    os_log_type_t v36 = v35 + 34;
    *(void *)buf = MEMORY[0x1E4F143A8];
    *(void *)&buf[8] = 3221225472;
    *(void *)&buf[16] = __nw_connection_is_cancelled_or_failed_block_invoke;
    os_log_type_t v63 = (uint64_t (*)(uint64_t, uint64_t))&unk_1E524B978;
    *(void *)&os_log_type_t v64[8] = type;
    os_log_type_t v37 = v35;
    *(void *)os_log_type_t v64 = v37;
    os_unfair_lock_lock(v36);
    (*(void (**)(unsigned char *))&buf[16])(buf);
    os_unfair_lock_unlock(v36);
    LODWORD(v36) = *(unsigned __int8 *)(v55 + 24);

    _Block_object_dispose(type, 8);
    if (v36)
    {
      nw_service_connector_remove_active_connection(v9, v30);
    }
    else
    {
LABEL_50:
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v38 = (id)gLogObj;
      if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
      {
        char v39 = (uint64_t (*)(uint64_t, uint64_t))v30->connection;
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_service_connector_cancel_request_inner";
        *(_WORD *)&unsigned char buf[12] = 2114;
        *(void *)&buf[14] = v9;
        *(_WORD *)&buf[22] = 2114;
        os_log_type_t v63 = v39;
        _os_log_impl(&dword_1830D4000, v38, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ did not remove connection %{public}@ as it is active", buf, 0x20u);
      }
    }
  }
LABEL_53:
}

void sub_1833DD558(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *nw_service_connector_copy_active_outgoing_request(void *a1, void *a2, uint64_t a3)
{
  uint64_t v79 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a1;
  id v6 = a2;
  uint64_t v7 = v6;
  if (!v5)
  {
    os_log_type_t v19 = __nwlog_obj();
    *(_DWORD *)os_log_type_t v52 = 136446210;
    *(void *)&v52[4] = "nw_service_connector_copy_active_outgoing_request";
    BOOL v20 = (const char *)_os_log_send_and_compose_impl();

    buf[0] = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v20, buf, &type)) {
      goto LABEL_69;
    }
    if (buf[0] == 17)
    {
      os_log_type_t v21 = __nwlog_obj();
      os_log_type_t v22 = buf[0];
      if (os_log_type_enabled(v21, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)os_log_type_t v52 = 136446210;
        *(void *)&v52[4] = "nw_service_connector_copy_active_outgoing_request";
        _os_log_impl(&dword_1830D4000, v21, v22, "%{public}s called with null serviceConnector", v52, 0xCu);
      }
      goto LABEL_94;
    }
    if (type == OS_LOG_TYPE_DEFAULT)
    {
      os_log_type_t v21 = __nwlog_obj();
      os_log_type_t v38 = buf[0];
      if (os_log_type_enabled(v21, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)os_log_type_t v52 = 136446210;
        *(void *)&v52[4] = "nw_service_connector_copy_active_outgoing_request";
        _os_log_impl(&dword_1830D4000, v21, v38, "%{public}s called with null serviceConnector, backtrace limit exceeded", v52, 0xCu);
      }
      goto LABEL_94;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v21 = __nwlog_obj();
    os_log_type_t v30 = buf[0];
    BOOL v31 = os_log_type_enabled(v21, (os_log_type_t)buf[0]);
    if (!backtrace_string)
    {
      if (v31)
      {
        *(_DWORD *)os_log_type_t v52 = 136446210;
        *(void *)&v52[4] = "nw_service_connector_copy_active_outgoing_request";
        _os_log_impl(&dword_1830D4000, v21, v30, "%{public}s called with null serviceConnector, no backtrace", v52, 0xCu);
      }
      goto LABEL_94;
    }
    if (v31)
    {
      *(_DWORD *)os_log_type_t v52 = 136446466;
      *(void *)&v52[4] = "nw_service_connector_copy_active_outgoing_request";
      *(_WORD *)&v52[12] = 2082;
      *(void *)&v52[14] = backtrace_string;
      _os_log_impl(&dword_1830D4000, v21, v30, "%{public}s called with null serviceConnector, dumping backtrace:%{public}s", v52, 0x16u);
    }
LABEL_68:

    free(backtrace_string);
    goto LABEL_69;
  }
  if (!v5[12])
  {
    os_log_type_t v23 = __nwlog_obj();
    *(_DWORD *)os_log_type_t v52 = 136446210;
    *(void *)&v52[4] = "nw_service_connector_copy_active_outgoing_request";
    BOOL v20 = (const char *)_os_log_send_and_compose_impl();

    buf[0] = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v20, buf, &type)) {
      goto LABEL_69;
    }
    if (buf[0] == 17)
    {
      os_log_type_t v21 = __nwlog_obj();
      os_log_type_t v24 = buf[0];
      if (os_log_type_enabled(v21, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)os_log_type_t v52 = 136446210;
        *(void *)&v52[4] = "nw_service_connector_copy_active_outgoing_request";
        _os_log_impl(&dword_1830D4000, v21, v24, "%{public}s called with null serviceConnector->activeOutgoingRequests", v52, 0xCu);
      }
      goto LABEL_94;
    }
    if (type == OS_LOG_TYPE_DEFAULT)
    {
      os_log_type_t v21 = __nwlog_obj();
      os_log_type_t v39 = buf[0];
      if (os_log_type_enabled(v21, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)os_log_type_t v52 = 136446210;
        *(void *)&v52[4] = "nw_service_connector_copy_active_outgoing_request";
        _os_log_impl(&dword_1830D4000, v21, v39, "%{public}s called with null serviceConnector->activeOutgoingRequests, backtrace limit exceeded", v52, 0xCu);
      }
      goto LABEL_94;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v21 = __nwlog_obj();
    os_log_type_t v32 = buf[0];
    BOOL v33 = os_log_type_enabled(v21, (os_log_type_t)buf[0]);
    if (!backtrace_string)
    {
      if (v33)
      {
        *(_DWORD *)os_log_type_t v52 = 136446210;
        *(void *)&v52[4] = "nw_service_connector_copy_active_outgoing_request";
        _os_log_impl(&dword_1830D4000, v21, v32, "%{public}s called with null serviceConnector->activeOutgoingRequests, no backtrace", v52, 0xCu);
      }
      goto LABEL_94;
    }
    if (v33)
    {
      *(_DWORD *)os_log_type_t v52 = 136446466;
      *(void *)&v52[4] = "nw_service_connector_copy_active_outgoing_request";
      *(_WORD *)&v52[12] = 2082;
      *(void *)&v52[14] = backtrace_string;
      _os_log_impl(&dword_1830D4000, v21, v32, "%{public}s called with null serviceConnector->activeOutgoingRequests, dumping backtrace:%{public}s", v52, 0x16u);
    }
    goto LABEL_68;
  }
  if (!v6)
  {
    os_log_type_t v25 = __nwlog_obj();
    *(_DWORD *)os_log_type_t v52 = 136446210;
    *(void *)&v52[4] = "nw_service_connector_copy_active_outgoing_request";
    BOOL v20 = (const char *)_os_log_send_and_compose_impl();

    buf[0] = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v20, buf, &type)) {
      goto LABEL_69;
    }
    if (buf[0] == 17)
    {
      os_log_type_t v21 = __nwlog_obj();
      os_log_type_t v26 = buf[0];
      if (os_log_type_enabled(v21, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)os_log_type_t v52 = 136446210;
        *(void *)&v52[4] = "nw_service_connector_copy_active_outgoing_request";
        _os_log_impl(&dword_1830D4000, v21, v26, "%{public}s called with null endpoint", v52, 0xCu);
      }
      goto LABEL_94;
    }
    if (type == OS_LOG_TYPE_DEFAULT)
    {
      os_log_type_t v21 = __nwlog_obj();
      os_log_type_t v40 = buf[0];
      if (os_log_type_enabled(v21, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)os_log_type_t v52 = 136446210;
        *(void *)&v52[4] = "nw_service_connector_copy_active_outgoing_request";
        _os_log_impl(&dword_1830D4000, v21, v40, "%{public}s called with null endpoint, backtrace limit exceeded", v52, 0xCu);
      }
      goto LABEL_94;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v21 = __nwlog_obj();
    os_log_type_t v34 = buf[0];
    BOOL v35 = os_log_type_enabled(v21, (os_log_type_t)buf[0]);
    if (!backtrace_string)
    {
      if (v35)
      {
        *(_DWORD *)os_log_type_t v52 = 136446210;
        *(void *)&v52[4] = "nw_service_connector_copy_active_outgoing_request";
        _os_log_impl(&dword_1830D4000, v21, v34, "%{public}s called with null endpoint, no backtrace", v52, 0xCu);
      }
      goto LABEL_94;
    }
    if (v35)
    {
      *(_DWORD *)os_log_type_t v52 = 136446466;
      *(void *)&v52[4] = "nw_service_connector_copy_active_outgoing_request";
      *(_WORD *)&v52[12] = 2082;
      *(void *)&v52[14] = backtrace_string;
      _os_log_impl(&dword_1830D4000, v21, v34, "%{public}s called with null endpoint, dumping backtrace:%{public}s", v52, 0x16u);
    }
    goto LABEL_68;
  }
  if (!a3)
  {
    BOOL v27 = __nwlog_obj();
    *(_DWORD *)os_log_type_t v52 = 136446210;
    *(void *)&v52[4] = "nw_service_connector_copy_active_outgoing_request";
    BOOL v20 = (const char *)_os_log_send_and_compose_impl();

    buf[0] = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v20, buf, &type))
    {
      if (buf[0] == 17)
      {
        os_log_type_t v21 = __nwlog_obj();
        os_log_type_t v28 = buf[0];
        if (os_log_type_enabled(v21, (os_log_type_t)buf[0]))
        {
          *(_DWORD *)os_log_type_t v52 = 136446210;
          *(void *)&v52[4] = "nw_service_connector_copy_active_outgoing_request";
          _os_log_impl(&dword_1830D4000, v21, v28, "%{public}s called with null service", v52, 0xCu);
        }
LABEL_94:

        goto LABEL_69;
      }
      if (type == OS_LOG_TYPE_DEFAULT)
      {
        os_log_type_t v21 = __nwlog_obj();
        os_log_type_t v41 = buf[0];
        if (os_log_type_enabled(v21, (os_log_type_t)buf[0]))
        {
          *(_DWORD *)os_log_type_t v52 = 136446210;
          *(void *)&v52[4] = "nw_service_connector_copy_active_outgoing_request";
          _os_log_impl(&dword_1830D4000, v21, v41, "%{public}s called with null service, backtrace limit exceeded", v52, 0xCu);
        }
        goto LABEL_94;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v21 = __nwlog_obj();
      os_log_type_t v36 = buf[0];
      BOOL v37 = os_log_type_enabled(v21, (os_log_type_t)buf[0]);
      if (!backtrace_string)
      {
        if (v37)
        {
          *(_DWORD *)os_log_type_t v52 = 136446210;
          *(void *)&v52[4] = "nw_service_connector_copy_active_outgoing_request";
          _os_log_impl(&dword_1830D4000, v21, v36, "%{public}s called with null service, no backtrace", v52, 0xCu);
        }
        goto LABEL_94;
      }
      if (v37)
      {
        *(_DWORD *)os_log_type_t v52 = 136446466;
        *(void *)&v52[4] = "nw_service_connector_copy_active_outgoing_request";
        *(_WORD *)&v52[12] = 2082;
        *(void *)&v52[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v21, v36, "%{public}s called with null service, dumping backtrace:%{public}s", v52, 0x16u);
      }
      goto LABEL_68;
    }
LABEL_69:
    if (!v20) {
      goto LABEL_27;
    }
    uint64_t v17 = (char *)v20;
    goto LABEL_26;
  }
  int v78 = 0;
  long long v76 = 0u;
  long long v77 = 0u;
  long long v74 = 0u;
  long long v75 = 0u;
  long long v72 = 0u;
  long long v73 = 0u;
  long long v70 = 0u;
  long long v71 = 0u;
  long long v68 = 0u;
  long long v69 = 0u;
  long long v66 = 0u;
  long long v67 = 0u;
  long long v64 = 0u;
  long long v65 = 0u;
  long long v62 = 0u;
  long long v63 = 0u;
  long long v60 = 0u;
  long long v61 = 0u;
  long long v58 = 0u;
  long long v59 = 0u;
  long long v56 = 0u;
  long long v57 = 0u;
  long long v54 = 0u;
  long long v55 = 0u;
  long long v53 = 0u;
  memset(v52, 0, sizeof(v52));
  if (!nwsc_get_identifier(v6, a3, v52))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v9 = (id)gLogObj;
    *(_DWORD *)buf = 136446722;
    os_log_type_t v45 = "nw_service_connector_copy_active_outgoing_request";
    __int16 v46 = 2114;
    BOOL v47 = v7;
    __int16 v48 = 2082;
    uint64_t v49 = a3;
    id v10 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v42 = 0;
    if (__nwlog_fault(v10, &type, &v42))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v11 = (id)gLogObj;
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446722;
          os_log_type_t v45 = "nw_service_connector_copy_active_outgoing_request";
          __int16 v46 = 2114;
          BOOL v47 = v7;
          __int16 v48 = 2082;
          uint64_t v49 = a3;
          _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s Could not get identifier for endpoint %{public}@, service %{public}s", buf, 0x20u);
        }
      }
      else if (v42)
      {
        os_log_type_t v13 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v11 = (id)gLogObj;
        os_log_type_t v14 = type;
        BOOL v15 = os_log_type_enabled(v11, type);
        if (v13)
        {
          if (v15)
          {
            *(_DWORD *)buf = 136446978;
            os_log_type_t v45 = "nw_service_connector_copy_active_outgoing_request";
            __int16 v46 = 2114;
            BOOL v47 = v7;
            __int16 v48 = 2082;
            uint64_t v49 = a3;
            __int16 v50 = 2082;
            os_log_type_t v51 = v13;
            _os_log_impl(&dword_1830D4000, v11, v14, "%{public}s Could not get identifier for endpoint %{public}@, service %{public}s, dumping backtrace:%{public}s", buf, 0x2Au);
          }

          free(v13);
          if (!v10) {
            goto LABEL_27;
          }
LABEL_25:
          uint64_t v17 = (char *)v10;
LABEL_26:
          free(v17);
          goto LABEL_27;
        }
        if (v15)
        {
          *(_DWORD *)buf = 136446722;
          os_log_type_t v45 = "nw_service_connector_copy_active_outgoing_request";
          __int16 v46 = 2114;
          BOOL v47 = v7;
          __int16 v48 = 2082;
          uint64_t v49 = a3;
          _os_log_impl(&dword_1830D4000, v11, v14, "%{public}s Could not get identifier for endpoint %{public}@, service %{public}s, no backtrace", buf, 0x20u);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v11 = (id)gLogObj;
        os_log_type_t v16 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446722;
          os_log_type_t v45 = "nw_service_connector_copy_active_outgoing_request";
          __int16 v46 = 2114;
          BOOL v47 = v7;
          __int16 v48 = 2082;
          uint64_t v49 = a3;
          _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s Could not get identifier for endpoint %{public}@, service %{public}s, backtrace limit exceeded", buf, 0x20u);
        }
      }
    }
    if (!v10)
    {
LABEL_27:
      unsigned int v8 = 0;
      goto LABEL_28;
    }
    goto LABEL_25;
  }
  unsigned int v8 = nw_dictionary_copy_value(v5[12], (uint64_t)v52);
LABEL_28:

  return v8;
}

void sub_1833DE194(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __nw_service_connector_start_block_invoke(uint64_t a1)
{
  uint64_t v93 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(_DWORD *)(v2 + 16) != 4)
  {
    int v9 = *(unsigned __int8 *)(v2 + 50);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v10 = (id)gLogObj;
    BOOL v11 = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
    if (v9)
    {
      if (!v11) {
        goto LABEL_19;
      }
      os_log_type_t v12 = *(void **)(a1 + 32);
      *(_DWORD *)buf = 136446466;
      os_log_type_t v86 = "nw_service_connector_start_block_invoke";
      __int16 v87 = 2114;
      __int16 v88 = v12;
      os_log_type_t v13 = "%{public}s %{public}@ restarting";
    }
    else
    {
      if (!v11) {
        goto LABEL_19;
      }
      uint64_t v18 = *(void **)(a1 + 32);
      *(_DWORD *)buf = 136446466;
      os_log_type_t v86 = "nw_service_connector_start_block_invoke";
      __int16 v87 = 2114;
      __int16 v88 = v18;
      os_log_type_t v13 = "%{public}s Client starting %{public}@";
    }
    _os_log_impl(&dword_1830D4000, v10, OS_LOG_TYPE_DEFAULT, v13, buf, 0x16u);
LABEL_19:

    uint64_t v19 = *(void *)(a1 + 32);
    int v20 = *(_DWORD *)(v19 + 16);
    if (v20 != 1)
    {
      if (v20 == 2)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v21 = (id)gLogObj;
        if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
        {
          os_log_type_t v22 = *(void **)(a1 + 32);
          *(_DWORD *)buf = 136446466;
          os_log_type_t v86 = "nw_service_connector_start_block_invoke";
          __int16 v87 = 2114;
          __int16 v88 = v22;
          _os_log_impl(&dword_1830D4000, v21, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ Service connector already started", buf, 0x16u);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v21 = (id)gLogObj;
        if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
        {
          BOOL v27 = *(void **)(a1 + 32);
          *(_DWORD *)buf = 136446466;
          os_log_type_t v86 = "nw_service_connector_start_block_invoke";
          __int16 v87 = 2114;
          __int16 v88 = v27;
          _os_log_impl(&dword_1830D4000, v21, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ Service connector could not be started", buf, 0x16u);
        }
      }

      return;
    }
    *(_WORD *)os_log_type_t type = 7708;
    __int16 v80 = bswap32(*(unsigned __int16 *)(v19 + 48)) >> 16;
    int v81 = 0;
    long long v82 = *MEMORY[0x1E4F148B8];
    int v83 = 0;
    address = nw_endpoint_create_address((const sockaddr *)type);
    if (address)
    {
      os_log_type_t v24 = *(void **)(*(void *)(a1 + 32) + 24);
      if (v24)
      {
        id v25 = v24;
        nw_parameters_set_data_mode(v25, 2u);
        legacy_tcp_socket = v25;
        *((_WORD *)legacy_tcp_socket[13].isa + 50) |= 0x10u;

        nw_parameters_set_tfo(legacy_tcp_socket, 1);
        goto LABEL_44;
      }
      legacy_tcp_socket = nw_parameters_create_legacy_tcp_socket(&__block_literal_global_49778);
      if (legacy_tcp_socket)
      {
LABEL_44:
        nw_parameters_set_local_endpoint(legacy_tcp_socket, address);
        BOOL v35 = legacy_tcp_socket;
        v35[12].uint64_t isa = (Class)((unint64_t)v35[12].isa | 0x8000000);

        os_log_type_t v36 = *(NSObject **)(*(void *)(a1 + 32) + 8);
        if (v36)
        {
          nw_listener_cancel(v36);
          uint64_t v37 = *(void *)(a1 + 32);
          os_log_type_t v38 = *(void **)(v37 + 8);
          *(void *)(v37 + 8) = 0;
        }
        nw_listener_t v39 = nw_listener_create(v35);
        if (v39)
        {
          objc_storeStrong((id *)(*(void *)(a1 + 32) + 8), v39);
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v40 = (id)gLogObj;
          if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
          {
            os_log_type_t v41 = *(void **)(a1 + 32);
            uint64_t v42 = v41[1];
            *(_DWORD *)buf = 136446978;
            os_log_type_t v86 = "nw_service_connector_start_block_invoke";
            __int16 v87 = 2114;
            __int16 v88 = v41;
            __int16 v89 = 2048;
            *(void *)__int16 v90 = v42;
            *(_WORD *)&v90[8] = 2112;
            uint64_t v91 = v42;
            _os_log_impl(&dword_1830D4000, v40, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ Created listener<%p> %@", buf, 0x2Au);
          }

          os_log_type_t v43 = *(void **)(a1 + 32);
          uint64_t v44 = v43[1];
          handler[0] = MEMORY[0x1E4F143A8];
          handler[1] = 3221225472;
          handler[2] = __nw_service_connector_start_block_invoke_102;
          handler[3] = &unk_1E5243228;
          long long v76 = v43;
          os_log_type_t v45 = v39;
          long long v77 = v45;
          nw_listener_set_new_connection_handler(v44, handler);
          __int16 v46 = *(void **)(a1 + 32);
          BOOL v47 = v46[1];
          v72[0] = MEMORY[0x1E4F143A8];
          v72[1] = 3221225472;
          v72[2] = __nw_service_connector_start_block_invoke_104;
          v72[3] = &unk_1E524BB98;
          long long v73 = v46;
          long long v74 = v45;
          nw_listener_set_state_changed_handler(v47, v72);
          nw_listener_set_queue(*(nw_listener_t *)(*(void *)(a1 + 32) + 8), *(dispatch_queue_t *)(*(void *)(a1 + 32) + 32));
          nw_listener_start(*(nw_listener_t *)(*(void *)(a1 + 32) + 8));
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          __int16 v48 = (id)gLogObj;
          if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v49 = *(unsigned __int8 **)(a1 + 32);
            int v50 = v49[120];
            int v51 = v49[121];
            int v52 = v49[122];
            int v53 = v49[123];
            *(_DWORD *)buf = 136447490;
            os_log_type_t v86 = "nw_service_connector_start_block_invoke";
            __int16 v87 = 2114;
            __int16 v88 = v49;
            __int16 v89 = 1024;
            *(_DWORD *)__int16 v90 = v50;
            *(_WORD *)&v90[4] = 1024;
            *(_DWORD *)&v90[6] = v51;
            LOWORD(v91) = 1024;
            *(_DWORD *)((char *)&v91 + 2) = v52;
            HIWORD(v91) = 1024;
            int v92 = v53;
            _os_log_impl(&dword_1830D4000, v48, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ Listener started, localPubKeyStart %02x%02x%02x%02x", buf, 0x2Eu);
          }

LABEL_93:
LABEL_102:

          return;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v54 = (id)gLogObj;
        *(_DWORD *)buf = 136446210;
        os_log_type_t v86 = "nw_service_connector_start_block_invoke";
        long long v55 = (char *)_os_log_send_and_compose_impl();

        os_log_type_t v84 = OS_LOG_TYPE_ERROR;
        char v78 = 0;
        if (__nwlog_fault(v55, &v84, &v78))
        {
          if (v84 == OS_LOG_TYPE_FAULT)
          {
            long long v56 = __nwlog_obj();
            os_log_type_t v57 = v84;
            if (os_log_type_enabled(v56, v84))
            {
              *(_DWORD *)buf = 136446210;
              os_log_type_t v86 = "nw_service_connector_start_block_invoke";
              _os_log_impl(&dword_1830D4000, v56, v57, "%{public}s nw_listener_create failed", buf, 0xCu);
            }
          }
          else if (v78)
          {
            backtrace_string = (char *)__nw_create_backtrace_string();
            long long v56 = __nwlog_obj();
            os_log_type_t v62 = v84;
            BOOL v63 = os_log_type_enabled(v56, v84);
            if (backtrace_string)
            {
              if (v63)
              {
                *(_DWORD *)buf = 136446466;
                os_log_type_t v86 = "nw_service_connector_start_block_invoke";
                __int16 v87 = 2082;
                __int16 v88 = backtrace_string;
                _os_log_impl(&dword_1830D4000, v56, v62, "%{public}s nw_listener_create failed, dumping backtrace:%{public}s", buf, 0x16u);
              }

              free(backtrace_string);
              goto LABEL_91;
            }
            if (v63)
            {
              *(_DWORD *)buf = 136446210;
              os_log_type_t v86 = "nw_service_connector_start_block_invoke";
              _os_log_impl(&dword_1830D4000, v56, v62, "%{public}s nw_listener_create failed, no backtrace", buf, 0xCu);
            }
          }
          else
          {
            long long v56 = __nwlog_obj();
            os_log_type_t v70 = v84;
            if (os_log_type_enabled(v56, v84))
            {
              *(_DWORD *)buf = 136446210;
              os_log_type_t v86 = "nw_service_connector_start_block_invoke";
              _os_log_impl(&dword_1830D4000, v56, v70, "%{public}s nw_listener_create failed, backtrace limit exceeded", buf, 0xCu);
            }
          }
        }
LABEL_91:
        if (v55) {
          free(v55);
        }
        goto LABEL_93;
      }
      long long v64 = __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      os_log_type_t v86 = "nw_service_connector_start_block_invoke_2";
      BOOL v31 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t v84 = OS_LOG_TYPE_ERROR;
      char v78 = 0;
      if (!__nwlog_fault(v31, &v84, &v78)) {
        goto LABEL_100;
      }
      if (v84 == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v32 = __nwlog_obj();
        os_log_type_t v65 = v84;
        if (os_log_type_enabled(v32, v84))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v86 = "nw_service_connector_start_block_invoke";
          _os_log_impl(&dword_1830D4000, v32, v65, "%{public}s nw_parameters_create failed", buf, 0xCu);
        }
      }
      else if (v78)
      {
        long long v67 = (char *)__nw_create_backtrace_string();
        os_log_type_t v32 = __nwlog_obj();
        os_log_type_t v68 = v84;
        BOOL v69 = os_log_type_enabled(v32, v84);
        if (v67)
        {
          if (v69)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v86 = "nw_service_connector_start_block_invoke";
            __int16 v87 = 2082;
            __int16 v88 = v67;
            _os_log_impl(&dword_1830D4000, v32, v68, "%{public}s nw_parameters_create failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v67);
          if (!v31) {
            goto LABEL_102;
          }
          goto LABEL_101;
        }
        if (v69)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v86 = "nw_service_connector_start_block_invoke";
          _os_log_impl(&dword_1830D4000, v32, v68, "%{public}s nw_parameters_create failed, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        os_log_type_t v32 = __nwlog_obj();
        os_log_type_t v71 = v84;
        if (os_log_type_enabled(v32, v84))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v86 = "nw_service_connector_start_block_invoke";
          _os_log_impl(&dword_1830D4000, v32, v71, "%{public}s nw_parameters_create failed, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v30 = (id)gLogObj;
      *(_DWORD *)buf = 136446210;
      os_log_type_t v86 = "nw_service_connector_start_block_invoke";
      BOOL v31 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t v84 = OS_LOG_TYPE_ERROR;
      char v78 = 0;
      if (!__nwlog_fault(v31, &v84, &v78)) {
        goto LABEL_100;
      }
      if (v84 == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v32 = (id)gLogObj;
        os_log_type_t v33 = v84;
        if (os_log_type_enabled(v32, v84))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v86 = "nw_service_connector_start_block_invoke";
          _os_log_impl(&dword_1830D4000, v32, v33, "%{public}s nw_endpoint_create_address failed", buf, 0xCu);
        }
      }
      else if (v78)
      {
        long long v58 = (char *)__nw_create_backtrace_string();
        os_log_type_t v32 = __nwlog_obj();
        os_log_type_t v59 = v84;
        BOOL v60 = os_log_type_enabled(v32, v84);
        if (v58)
        {
          if (v60)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v86 = "nw_service_connector_start_block_invoke";
            __int16 v87 = 2082;
            __int16 v88 = v58;
            _os_log_impl(&dword_1830D4000, v32, v59, "%{public}s nw_endpoint_create_address failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v58);
          if (!v31) {
            goto LABEL_102;
          }
          goto LABEL_101;
        }
        if (v60)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v86 = "nw_service_connector_start_block_invoke";
          _os_log_impl(&dword_1830D4000, v32, v59, "%{public}s nw_endpoint_create_address failed, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        os_log_type_t v32 = __nwlog_obj();
        os_log_type_t v66 = v84;
        if (os_log_type_enabled(v32, v84))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v86 = "nw_service_connector_start_block_invoke";
          _os_log_impl(&dword_1830D4000, v32, v66, "%{public}s nw_endpoint_create_address failed, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }

LABEL_100:
    if (!v31) {
      goto LABEL_102;
    }
LABEL_101:
    free(v31);
    goto LABEL_102;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v3 = (id)gLogObj;
  id v4 = *(void **)(a1 + 32);
  *(_DWORD *)buf = 136446466;
  os_log_type_t v86 = "nw_service_connector_start_block_invoke";
  __int16 v87 = 2114;
  __int16 v88 = v4;
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  os_log_type_t v84 = OS_LOG_TYPE_DEFAULT;
  if (!__nwlog_fault(v5, type, &v84)) {
    goto LABEL_41;
  }
  if (type[0] == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v6 = (id)gLogObj;
    os_log_type_t v7 = type[0];
    if (os_log_type_enabled(v6, type[0]))
    {
      unsigned int v8 = *(void **)(a1 + 32);
      *(_DWORD *)buf = 136446466;
      os_log_type_t v86 = "nw_service_connector_start_block_invoke";
      __int16 v87 = 2114;
      __int16 v88 = v8;
      _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s %{public}@ already cancelled", buf, 0x16u);
    }
LABEL_40:

LABEL_41:
    if (!v5) {
      return;
    }
    goto LABEL_42;
  }
  if (v84 == OS_LOG_TYPE_DEFAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v6 = (id)gLogObj;
    os_log_type_t v28 = type[0];
    if (os_log_type_enabled(v6, type[0]))
    {
      os_log_type_t v29 = *(void **)(a1 + 32);
      *(_DWORD *)buf = 136446466;
      os_log_type_t v86 = "nw_service_connector_start_block_invoke";
      __int16 v87 = 2114;
      __int16 v88 = v29;
      _os_log_impl(&dword_1830D4000, v6, v28, "%{public}s %{public}@ already cancelled, backtrace limit exceeded", buf, 0x16u);
    }
    goto LABEL_40;
  }
  os_log_type_t v14 = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v6 = (id)gLogObj;
  os_log_type_t v15 = type[0];
  BOOL v16 = os_log_type_enabled(v6, type[0]);
  if (!v14)
  {
    if (v16)
    {
      os_log_type_t v34 = *(void **)(a1 + 32);
      *(_DWORD *)buf = 136446466;
      os_log_type_t v86 = "nw_service_connector_start_block_invoke";
      __int16 v87 = 2114;
      __int16 v88 = v34;
      _os_log_impl(&dword_1830D4000, v6, v15, "%{public}s %{public}@ already cancelled, no backtrace", buf, 0x16u);
    }
    goto LABEL_40;
  }
  if (v16)
  {
    uint64_t v17 = *(void **)(a1 + 32);
    *(_DWORD *)buf = 136446722;
    os_log_type_t v86 = "nw_service_connector_start_block_invoke";
    __int16 v87 = 2114;
    __int16 v88 = v17;
    __int16 v89 = 2082;
    *(void *)__int16 v90 = v14;
    _os_log_impl(&dword_1830D4000, v6, v15, "%{public}s %{public}@ already cancelled, dumping backtrace:%{public}s", buf, 0x20u);
  }

  free(v14);
  if (v5) {
LABEL_42:
  }
    free(v5);
}

void sub_1833DF120(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,void *a25)
{
  _Unwind_Resume(a1);
}

id nw_agent_client_copy_path(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    id v3 = v1[6];
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v16 = "nw_agent_client_copy_path";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_agent_client_copy_path";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null client", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v16 = "nw_agent_client_copy_path";
          __int16 v17 = 2082;
          uint64_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null client, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_agent_client_copy_path";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null client, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_agent_client_copy_path";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null client, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  id v3 = 0;
LABEL_3:

  return v3;
}

id nw_agent_client_copy_endpoint(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    id v3 = v1[4];
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v16 = "nw_agent_client_copy_endpoint";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_agent_client_copy_endpoint";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null client", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v16 = "nw_agent_client_copy_endpoint";
          __int16 v17 = 2082;
          uint64_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null client, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_agent_client_copy_endpoint";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null client, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_agent_client_copy_endpoint";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null client, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  id v3 = 0;
LABEL_3:

  return v3;
}

uint64_t __nw_http_metadata_set_path_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a2 + 24);
  if (v2)
  {
    id v3 = v2;
    _nw_http_request_set_path();
  }
  else
  {
    uint64_t v5 = _nw_http_request_create("GET", "https", 0, *(void *)(a1 + 32));
    id v3 = *(id *)(a2 + 24);
    *(void *)(a2 + 24) = v5;
  }

  return 1;
}

uint64_t sub_1833DF9F0(char *a1, char *a2, char *a3, char *a4)
{
  if ("GET" == a1)
  {
    unint64_t v9 = 0xE300000000000000;
    uint64_t v11 = 5522759;
  }
  else if ("HEAD" == a1)
  {
    unint64_t v9 = 0xE400000000000000;
    uint64_t v11 = 1145128264;
  }
  else if ("POST" == a1)
  {
    unint64_t v9 = 0xE400000000000000;
    uint64_t v11 = 1414745936;
  }
  else if ("PUT" == a1)
  {
    unint64_t v9 = 0xE300000000000000;
    uint64_t v11 = 5526864;
  }
  else if ("DELETE" == a1)
  {
    unint64_t v9 = 0xE600000000000000;
    uint64_t v11 = 0x4554454C4544;
  }
  else if ("CONNECT" == a1)
  {
    unint64_t v9 = 0xE700000000000000;
    uint64_t v11 = 0x5443454E4E4F43;
  }
  else if ("OPTIONS" == a1)
  {
    unint64_t v9 = 0xE700000000000000;
    uint64_t v11 = 0x534E4F4954504FLL;
  }
  else if ("TRACE" == a1)
  {
    unint64_t v9 = 0xE500000000000000;
    uint64_t v11 = 0x4543415254;
  }
  else if ("PATCH" == a1)
  {
    unint64_t v9 = 0xE500000000000000;
    uint64_t v11 = 0x4843544150;
  }
  else if ("CONNECT-UDP" == a1)
  {
    unint64_t v9 = 0xEB00000000504455;
    uint64_t v11 = 0x2D5443454E4E4F43;
  }
  else
  {
    unint64_t v7 = sub_183D44C9C();
    unint64_t v9 = v8;
    uint64_t v10 = HIBYTE(v8) & 0xF;
    if ((v8 & 0x2000000000000000) == 0) {
      uint64_t v10 = v7 & 0xFFFFFFFFFFFFLL;
    }
    if (!v10 || (uint64_t v11 = v7, (sub_183529FF8(v7, v8) & 1) == 0))
    {
      swift_bridgeObjectRelease();
LABEL_93:
      uint64_t result = sub_183D456CC();
      __break(1u);
      return result;
    }
  }
  if (!a2)
  {
    uint64_t v15 = 0;
    unint64_t v17 = 0;
    goto LABEL_39;
  }
  size_t v12 = strlen(a2);
  if (!v12) {
    goto LABEL_35;
  }
  if ((*a2 & 0x80000000) == 0)
  {
    if (v12 == 1) {
      goto LABEL_35;
    }
    if ((a2[1] & 0x80000000) == 0)
    {
      size_t v13 = v12 - 2;
      if (v12 != 2)
      {
        os_log_type_t v14 = a2 + 2;
        while ((*v14 & 0x80000000) == 0)
        {
          ++v14;
          if (!--v13) {
            goto LABEL_35;
          }
        }
        goto LABEL_37;
      }
LABEL_35:
      uint64_t v15 = sub_183D44C1C();
      unint64_t v17 = v16;
      goto LABEL_38;
    }
  }
LABEL_37:
  __int16 v46 = a2;
  size_t v47 = v12;
  __int16 v48 = sub_1835A3780;
  uint64_t v49 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F63B78);
  sub_1834FBEF8((unint64_t *)&unk_1E8F63B80, &qword_1E8F63B78);
  sub_183D44C0C();
  uint64_t v15 = 0;
  unint64_t v17 = 0xE000000000000000;
LABEL_38:
  if (!_s7Network9HTTPFieldV12isValidValueySbSSFZ_0(v15, v17)) {
    goto LABEL_93;
  }
LABEL_39:
  if (!a3)
  {
    unint64_t v22 = 0;
    goto LABEL_52;
  }
  size_t v18 = strlen(a3);
  if (!v18) {
    goto LABEL_48;
  }
  if ((*a3 & 0x80000000) == 0)
  {
    if (v18 == 1) {
      goto LABEL_48;
    }
    if ((a3[1] & 0x80000000) == 0)
    {
      size_t v19 = v18 - 2;
      if (v18 != 2)
      {
        int v20 = a3 + 2;
        while ((*v20 & 0x80000000) == 0)
        {
          ++v20;
          if (!--v19) {
            goto LABEL_48;
          }
        }
        goto LABEL_50;
      }
LABEL_48:
      a3 = (char *)sub_183D44C1C();
      unint64_t v22 = v21;
      goto LABEL_51;
    }
  }
LABEL_50:
  __int16 v46 = a3;
  size_t v47 = v18;
  __int16 v48 = sub_1835A3780;
  uint64_t v49 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F63B78);
  sub_1834FBEF8((unint64_t *)&unk_1E8F63B80, &qword_1E8F63B78);
  sub_183D44C0C();
  a3 = 0;
  unint64_t v22 = 0xE000000000000000;
LABEL_51:
  if (!_s7Network9HTTPFieldV12isValidValueySbSSFZ_0((uint64_t)a3, v22)) {
    goto LABEL_93;
  }
LABEL_52:
  uint64_t v44 = v11;
  unint64_t v45 = v9;
  if (!a4)
  {
    unint64_t v27 = 0;
    goto LABEL_65;
  }
  size_t v23 = strlen(a4);
  if (!v23) {
    goto LABEL_61;
  }
  if ((*a4 & 0x80000000) == 0)
  {
    if (v23 == 1) {
      goto LABEL_61;
    }
    if ((a4[1] & 0x80000000) == 0)
    {
      size_t v24 = v23 - 2;
      if (v23 != 2)
      {
        id v25 = a4 + 2;
        while ((*v25 & 0x80000000) == 0)
        {
          ++v25;
          if (!--v24) {
            goto LABEL_61;
          }
        }
        goto LABEL_63;
      }
LABEL_61:
      a4 = (char *)sub_183D44C1C();
      unint64_t v27 = v26;
      goto LABEL_64;
    }
  }
LABEL_63:
  __int16 v46 = a4;
  size_t v47 = v23;
  __int16 v48 = sub_1835A3780;
  uint64_t v49 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E8F63B78);
  sub_1834FBEF8((unint64_t *)&unk_1E8F63B80, &qword_1E8F63B78);
  sub_183D44C0C();
  a4 = 0;
  unint64_t v27 = 0xE000000000000000;
LABEL_64:
  if (!_s7Network9HTTPFieldV12isValidValueySbSSFZ_0((uint64_t)a4, v27)) {
    goto LABEL_93;
  }
LABEL_65:
  if (v17) {
    uint64_t v28 = 0x656D656863733ALL;
  }
  else {
    uint64_t v28 = 0;
  }
  if (v17) {
    unint64_t v29 = 0xE700000000000000;
  }
  else {
    unint64_t v29 = 0;
  }
  if (v17) {
    uint64_t v30 = v15;
  }
  else {
    uint64_t v30 = 0;
  }
  if (v22) {
    uint64_t v31 = 0x69726F687475613ALL;
  }
  else {
    uint64_t v31 = 0;
  }
  unint64_t v32 = v17;
  if (v22) {
    unint64_t v33 = 0xEA00000000007974;
  }
  else {
    unint64_t v33 = 0;
  }
  if (v22) {
    os_log_type_t v34 = a3;
  }
  else {
    os_log_type_t v34 = 0;
  }
  uint64_t v41 = v30;
  uint64_t v42 = v34;
  unint64_t v40 = v22;
  if (v27) {
    uint64_t v35 = 0x687461703ALL;
  }
  else {
    uint64_t v35 = 0;
  }
  if (v27) {
    unint64_t v36 = 0xE500000000000000;
  }
  else {
    unint64_t v36 = 0;
  }
  if (v27) {
    uint64_t v37 = a4;
  }
  else {
    uint64_t v37 = 0;
  }
  os_log_type_t v43 = v37;
  HTTPFields.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860], &v46);
  os_log_type_t v38 = v46;
  type metadata accessor for __NWHTTPRequest();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = 0x646F6874656D3ALL;
  *(void *)(result + 24) = 0xE700000000000000;
  *(void *)(result + 32) = 0x646F6874656D3ALL;
  *(void *)(result + 40) = 0xE700000000000000;
  *(unsigned char *)(result + 48) = 0;
  *(void *)(result + 56) = v44;
  *(void *)(result + 64) = v45;
  *(void *)(result + 72) = v28;
  *(void *)(result + 80) = v29;
  *(void *)(result + 88) = v28;
  *(void *)(result + 96) = v29;
  *(void *)(result + 104) = 0;
  *(void *)(result + 112) = v41;
  *(void *)(result + 120) = v32;
  *(void *)(result + 128) = v31;
  *(void *)(result + 136) = v33;
  *(void *)(result + 144) = v31;
  *(void *)(result + 152) = v33;
  *(void *)(result + 160) = 0;
  *(void *)(result + 168) = v42;
  *(void *)(result + 176) = v40;
  *(void *)(result + 184) = v35;
  *(void *)(result + 192) = v36;
  *(void *)(result + 200) = v35;
  *(void *)(result + 208) = v36;
  *(void *)(result + 216) = 0;
  *(void *)(result + 224) = v43;
  *(void *)(result + 232) = v27;
  *(_OWORD *)(result + 256) = 0u;
  *(_OWORD *)(result + 272) = 0u;
  *(_OWORD *)(result + 240) = 0u;
  *(void *)(result + 288) = 0;
  *(void *)(result + 296) = v38;
  return result;
}

void __nw_http_metadata_get_path_block_invoke_62(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = [NSString stringWithCString:a2 encoding:5];
    uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8);
    uint64_t v5 = *(void **)(v4 + 40);
    *(void *)(v4 + 40) = v3;
  }
}

BOOL nw_quic_connection_get_pmtud_ignore_cost(void *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (nw_protocol_options_is_quic_connection(v1))
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000;
    char v16 = 0;
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_quic_connection_get_pmtud_ignore_cost_block_invoke;
    v12[3] = &unk_1E5248E90;
    v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    BOOL v2 = *(unsigned char *)(*(void *)&buf[8] + 24) != 0;
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  uint64_t v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_quic_connection_get_pmtud_ignore_cost";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_pmtud_ignore_cost";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_options_is_quic_connection(options)", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_quic_connection_get_pmtud_ignore_cost";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_pmtud_ignore_cost";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_pmtud_ignore_cost";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
  BOOL v2 = 0;
LABEL_3:

  return v2;
}

void sub_1833E047C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

BOOL nw_quic_connection_get_pmtud(void *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (nw_protocol_options_is_quic_connection(v1))
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000;
    char v16 = 0;
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_quic_connection_get_pmtud_block_invoke;
    v12[3] = &unk_1E5248E90;
    v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    BOOL v2 = *(unsigned char *)(*(void *)&buf[8] + 24) != 0;
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  uint64_t v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_quic_connection_get_pmtud";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_pmtud";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_options_is_quic_connection(options)", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_quic_connection_get_pmtud";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_pmtud";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_pmtud";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
  BOOL v2 = 0;
LABEL_3:

  return v2;
}

void sub_1833E07C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

void std::__call_once_proxy[abi:nn180100]<std::tuple<nw_protocol_get_zombie_callbacks(void)::$_0 &&>>()
{
  nw_protocol_get_zombie_callbacks(void)::callbacks = (uint64_t)nw_protocol_zombie_add_input_handler;
  qword_1EB266EC8 = (uint64_t)nw_protocol_zombie_replace_input_handler;
  qword_1EB266EC0 = (uint64_t)nw_protocol_zombie_remove_input_handler;
  qword_1EB266EF8 = (uint64_t)nw_protocol_zombie_input_available;
  qword_1EB266F00 = (uint64_t)nw_protocol_zombie_output_available;
  qword_1EB266F70 = (uint64_t)nw_protocol_zombie_input_finished;
  qword_1EB266F78 = (uint64_t)nw_protocol_zombie_output_finished;
  qword_1EB266FC0 = (uint64_t)nw_protocol_zombie_input_flush;
  qword_1EB266F08 = (uint64_t)nw_protocol_zombie_get_input_frames;
  qword_1EB266F10 = (uint64_t)nw_protocol_zombie_get_output_frames;
  qword_1EB266F18 = (uint64_t)nw_protocol_zombie_finalize_output_frames;
  qword_1EB266FB0 = (uint64_t)nw_protocol_zombie_get_message_properties;
  qword_1EB266F20 = (uint64_t)nw_protocol_zombie_link_state;
  qword_1EB266F28 = (uint64_t)nw_protocol_zombie_get_parameters;
  qword_1EB266F38 = (uint64_t)nw_protocol_zombie_get_local_endpoint;
  qword_1EB266F40 = (uint64_t)nw_protocol_zombie_get_remote_endpoint;
  qword_1EB266F30 = (uint64_t)nw_protocol_zombie_get_path;
  qword_1EB266F60 = (uint64_t)nw_protocol_zombie_updated_path;
  qword_1EB266F80 = (uint64_t)nw_protocol_zombie_get_output_local_endpoint;
  qword_1EB266F88 = (uint64_t)nw_protocol_zombie_get_output_interface;
  qword_1EB266ED0 = (uint64_t)nw_protocol_zombie_connect;
  qword_1EB266ED8 = (uint64_t)nw_protocol_zombie_disconnect;
  qword_1EB266EE0 = (uint64_t)nw_protocol_zombie_connected;
  qword_1EB266EE8 = (uint64_t)nw_protocol_zombie_disconnected;
  qword_1EB266EF0 = (uint64_t)nw_protocol_zombie_error;
  qword_1EB266FB8 = (uint64_t)nw_protocol_zombie_reset;
  qword_1EB266F68 = (uint64_t)nw_protocol_zombie_supports_external_data;
  qword_1EB266F90 = (uint64_t)nw_protocol_zombie_waiting_for_output;
  qword_1EB266F98 = (uint64_t)nw_protocol_zombie_copy_info;
  qword_1EB266F48 = (uint64_t)nw_protocol_zombie_register_notification;
  qword_1EB266F50 = (uint64_t)nw_protocol_zombie_unregister_notification;
  qword_1EB266F58 = (uint64_t)nw_protocol_zombie_notify;
  qword_1EB266FA0 = (uint64_t)nw_protocol_zombie_add_listen_handler;
  qword_1EB266FA8 = (uint64_t)nw_protocol_zombie_remove_listen_handler;
}

void nw_protocol_instance_set_wakeup_handler(void *a1, void *a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1;
  id v4 = a2;
  uint64_t v5 = v4;
  if (!v3)
  {
    unint64_t v8 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    id v25 = "nw_protocol_instance_set_wakeup_handler";
    os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (!__nwlog_fault(v9, &type, &v22)) {
      goto LABEL_38;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        id v25 = "nw_protocol_instance_set_wakeup_handler";
        _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null instance", buf, 0xCu);
      }
    }
    else if (v22)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v10 = __nwlog_obj();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          id v25 = "nw_protocol_instance_set_wakeup_handler";
          __int16 v26 = 2082;
          unint64_t v27 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v9) {
          goto LABEL_4;
        }
LABEL_39:
        free(v9);
        goto LABEL_4;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        id v25 = "nw_protocol_instance_set_wakeup_handler";
        _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null instance, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v10 = __nwlog_obj();
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        id v25 = "nw_protocol_instance_set_wakeup_handler";
        _os_log_impl(&dword_1830D4000, v10, v20, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_37:

    goto LABEL_38;
  }
  if (v4)
  {
    id v6 = _Block_copy(v4);
    os_log_type_t v7 = (void *)v3[33];
    v3[33] = v6;

    goto LABEL_4;
  }
  size_t v12 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  id v25 = "nw_protocol_instance_set_wakeup_handler";
  os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v22 = 0;
  if (!__nwlog_fault(v9, &type, &v22)) {
    goto LABEL_38;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    BOOL v10 = __nwlog_obj();
    os_log_type_t v13 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      id v25 = "nw_protocol_instance_set_wakeup_handler";
      _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null wakeup_handler", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (!v22)
  {
    BOOL v10 = __nwlog_obj();
    os_log_type_t v21 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      id v25 = "nw_protocol_instance_set_wakeup_handler";
      _os_log_impl(&dword_1830D4000, v10, v21, "%{public}s called with null wakeup_handler, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_37;
  }
  uint64_t v17 = (char *)__nw_create_backtrace_string();
  BOOL v10 = __nwlog_obj();
  os_log_type_t v18 = type;
  BOOL v19 = os_log_type_enabled(v10, type);
  if (!v17)
  {
    if (v19)
    {
      *(_DWORD *)buf = 136446210;
      id v25 = "nw_protocol_instance_set_wakeup_handler";
      _os_log_impl(&dword_1830D4000, v10, v18, "%{public}s called with null wakeup_handler, no backtrace", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (v19)
  {
    *(_DWORD *)buf = 136446466;
    id v25 = "nw_protocol_instance_set_wakeup_handler";
    __int16 v26 = 2082;
    unint64_t v27 = v17;
    _os_log_impl(&dword_1830D4000, v10, v18, "%{public}s called with null wakeup_handler, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v17);
  if (v9) {
    goto LABEL_39;
  }
LABEL_4:
}

void nw_protocol_definition_set_options_should_serialize(void *a1, uint64_t a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = v3;
  if (!v3)
  {
    uint64_t v5 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v22 = "nw_protocol_definition_set_options_should_serialize";
    id v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (!__nwlog_fault(v6, &type, &v19)) {
      goto LABEL_38;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v22 = "nw_protocol_definition_set_options_should_serialize";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null definition", buf, 0xCu);
      }
    }
    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          char v22 = "nw_protocol_definition_set_options_should_serialize";
          __int16 v23 = 2082;
          size_t v24 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null definition, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v6) {
          goto LABEL_4;
        }
LABEL_39:
        free(v6);
        goto LABEL_4;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        char v22 = "nw_protocol_definition_set_options_should_serialize";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null definition, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v17 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v22 = "nw_protocol_definition_set_options_should_serialize";
        _os_log_impl(&dword_1830D4000, v7, v17, "%{public}s called with null definition, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_37:

    goto LABEL_38;
  }
  if (a2)
  {
    *(void *)(*((void *)v3 + 10) + 248) = a2;
    goto LABEL_4;
  }
  os_log_type_t v9 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v22 = "nw_protocol_definition_set_options_should_serialize";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v19 = 0;
  if (!__nwlog_fault(v6, &type, &v19)) {
    goto LABEL_38;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    os_log_type_t v7 = __nwlog_obj();
    os_log_type_t v10 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446210;
      char v22 = "nw_protocol_definition_set_options_should_serialize";
      _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null should_serialize", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (!v19)
  {
    os_log_type_t v7 = __nwlog_obj();
    os_log_type_t v18 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446210;
      char v22 = "nw_protocol_definition_set_options_should_serialize";
      _os_log_impl(&dword_1830D4000, v7, v18, "%{public}s called with null should_serialize, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_37;
  }
  os_log_type_t v14 = (char *)__nw_create_backtrace_string();
  os_log_type_t v7 = __nwlog_obj();
  os_log_type_t v15 = type;
  BOOL v16 = os_log_type_enabled(v7, type);
  if (!v14)
  {
    if (v16)
    {
      *(_DWORD *)buf = 136446210;
      char v22 = "nw_protocol_definition_set_options_should_serialize";
      _os_log_impl(&dword_1830D4000, v7, v15, "%{public}s called with null should_serialize, no backtrace", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (v16)
  {
    *(_DWORD *)buf = 136446466;
    char v22 = "nw_protocol_definition_set_options_should_serialize";
    __int16 v23 = 2082;
    size_t v24 = v14;
    _os_log_impl(&dword_1830D4000, v7, v15, "%{public}s called with null should_serialize, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v14);
  if (v6) {
    goto LABEL_39;
  }
LABEL_4:
}

nw_path_t nw_connection_copy_current_path(nw_connection_t connection)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v1 = connection;
  BOOL v2 = (os_unfair_lock_s *)v1;
  if (v1)
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x3032000000;
    char v19 = __Block_byref_object_copy__24353;
    os_log_type_t v20 = __Block_byref_object_dispose__24354;
    id v21 = 0;
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 3221225472;
    v13[2] = __nw_connection_copy_current_path_block_invoke;
    v13[3] = &unk_1E524B978;
    os_log_type_t v14 = v1;
    os_log_type_t v15 = buf;
    os_unfair_lock_lock(v2 + 34);
    __nw_connection_copy_current_path_block_invoke((uint64_t)v13);
    os_unfair_lock_unlock(v2 + 34);
    id v3 = *(id *)(*(void *)&buf[8] + 40);

    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_connection_copy_current_path";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (__nwlog_fault(v6, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_copy_current_path";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_connection_copy_current_path";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_copy_current_path";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_copy_current_path";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  id v3 = 0;
LABEL_3:

  return v3;
}

void __nw_connection_copy_current_path_block_invoke(uint64_t a1)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  if ((*(unsigned char *)(v2 + 109) & 0x40) != 0)
  {
    uint64_t v10 = nw_endpoint_handler_copy_connected_path(*(void **)(v2 + 144));
    uint64_t v11 = *(void *)(*(void *)(a1 + 40) + 8);
    os_log_type_t v12 = *(void **)(v11 + 40);
    *(void *)(v11 + 40) = v10;
  }
  else
  {
    id v3 = *(void **)(v2 + 152);
    if (v3)
    {
      id v4 = v3;
      uint64_t v5 = (os_unfair_lock_s *)(v4 + 112);
      os_unfair_lock_lock((os_unfair_lock_t)v4 + 28);
      if (*((_DWORD *)v4 + 29) != 2)
      {
        os_unfair_lock_unlock(v5);
        if ((v4[268] & 0x20) == 0)
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          char v19 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
          {
            if (v4[268]) {
              os_log_type_t v20 = "dry-run ";
            }
            else {
              os_log_type_t v20 = "";
            }
            nw_endpoint_t v21 = nw_endpoint_handler_copy_endpoint(v4);
            logging_description = nw_endpoint_get_logging_description(v21);
            uint64_t v23 = *((unsigned int *)v4 + 30);
            uint64_t v44 = logging_description;
            if (v23 > 5) {
              size_t v24 = "unknown-state";
            }
            else {
              size_t v24 = off_1E523FB38[v23];
            }
            os_log_type_t v43 = v24;
            uint64_t v28 = v4;
            unint64_t v29 = v28;
            uint64_t v30 = "path";
            switch(*((_DWORD *)v4 + 29))
            {
              case 0:
                break;
              case 1:
                uint64_t v30 = "resolver";
                break;
              case 2:
                uint64_t v30 = nw_endpoint_flow_mode_string(v28[31]);
                break;
              case 3:
                uint64_t v30 = "proxy";
                break;
              case 4:
                uint64_t v30 = "fallback";
                break;
              case 5:
                uint64_t v30 = "transform";
                break;
              default:
                uint64_t v30 = "unknown-mode";
                break;
            }

            uint64_t v31 = v29;
            os_unfair_lock_lock(v5);
            id v32 = v31[8];
            os_unfair_lock_unlock(v5);

            *(_DWORD *)buf = 136447746;
            __int16 v48 = "nw_endpoint_handler_copy_flow_path";
            __int16 v49 = 2082;
            int v50 = v4 + 168;
            __int16 v51 = 2082;
            int v52 = v20;
            __int16 v53 = 2082;
            id v54 = v44;
            __int16 v55 = 2082;
            long long v56 = v43;
            __int16 v57 = 2082;
            long long v58 = v30;
            __int16 v59 = 2114;
            id v60 = v32;
            _os_log_impl(&dword_1830D4000, v19, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Endpoint handler is not flow", buf, 0x48u);
          }
        }
        id v9 = 0;
        goto LABEL_41;
      }
      id v6 = (os_unfair_lock_s *)*((id *)v4 + 31);
      if (v6)
      {
        os_log_type_t v7 = (id *)v6;
        os_log_type_t v8 = v6 + 220;
        os_unfair_lock_lock(v6 + 220);
        id v9 = v7[2];
        os_unfair_lock_unlock(v8);

        if (v9)
        {
LABEL_7:
          os_unfair_lock_unlock(v5);
LABEL_41:

          uint64_t v33 = *(void *)(*(void *)(a1 + 40) + 8);
          os_log_type_t v34 = *(void **)(v33 + 40);
          *(void *)(v33 + 40) = v9;

          return;
        }
LABEL_6:
        id v9 = *((id *)v4 + 8);
        goto LABEL_7;
      }
      uint64_t v35 = __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      __int16 v48 = "nw_endpoint_flow_copy_flow_path";
      unint64_t v36 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v45 = 0;
      if (__nwlog_fault(v36, &type, &v45))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          uint64_t v37 = __nwlog_obj();
          os_log_type_t v38 = type;
          if (os_log_type_enabled(v37, type))
          {
            *(_DWORD *)buf = 136446210;
            __int16 v48 = "nw_endpoint_flow_copy_flow_path";
            _os_log_impl(&dword_1830D4000, v37, v38, "%{public}s called with null endpoint_flow", buf, 0xCu);
          }
        }
        else if (v45)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          uint64_t v37 = __nwlog_obj();
          os_log_type_t v40 = type;
          BOOL v41 = os_log_type_enabled(v37, type);
          if (backtrace_string)
          {
            if (v41)
            {
              *(_DWORD *)buf = 136446466;
              __int16 v48 = "nw_endpoint_flow_copy_flow_path";
              __int16 v49 = 2082;
              int v50 = backtrace_string;
              _os_log_impl(&dword_1830D4000, v37, v40, "%{public}s called with null endpoint_flow, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(backtrace_string);
            goto LABEL_60;
          }
          if (v41)
          {
            *(_DWORD *)buf = 136446210;
            __int16 v48 = "nw_endpoint_flow_copy_flow_path";
            _os_log_impl(&dword_1830D4000, v37, v40, "%{public}s called with null endpoint_flow, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          uint64_t v37 = __nwlog_obj();
          os_log_type_t v42 = type;
          if (os_log_type_enabled(v37, type))
          {
            *(_DWORD *)buf = 136446210;
            __int16 v48 = "nw_endpoint_flow_copy_flow_path";
            _os_log_impl(&dword_1830D4000, v37, v42, "%{public}s called with null endpoint_flow, backtrace limit exceeded", buf, 0xCu);
          }
        }
      }
LABEL_60:
      if (v36) {
        free(v36);
      }
      goto LABEL_6;
    }
    id v13 = *(id *)(v2 + 144);
    os_log_type_t v14 = v13;
    if (v13)
    {
      id v15 = v13;
      os_unfair_lock_lock((os_unfair_lock_t)v15 + 28);
      id v16 = *((id *)v15 + 8);
      os_unfair_lock_unlock((os_unfair_lock_t)v15 + 28);

      uint64_t v17 = *(void *)(*(void *)(a1 + 40) + 8);
      os_log_type_t v18 = *(void **)(v17 + 40);
      *(void *)(v17 + 40) = v16;
    }
    else
    {
      uint64_t v25 = *(void *)(*(void *)(a1 + 32) + 16);
      if (v25 && !nw_path_parameters_get_logging_disabled(*(void *)(v25 + 104)))
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        __int16 v26 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
        {
          int v27 = *(_DWORD *)(*(void *)(a1 + 32) + 448);
          *(_DWORD *)buf = 136446466;
          __int16 v48 = "nw_connection_copy_current_path_block_invoke";
          __int16 v49 = 1024;
          LODWORD(v50) = v27;
          _os_log_impl(&dword_1830D4000, v26, OS_LOG_TYPE_ERROR, "%{public}s [C%u] Connection has no endpoint handler", buf, 0x12u);
        }
      }
    }
  }
}

void sub_1833E1DA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_protocol_http2_transport_get_output_frames(nw_protocol *a1, nw_protocol *a2, unsigned int a3, int a4, unsigned int a5, nw_frame_array_s *a6)
{
  uint64_t v94 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_get_output_frames";
    __int16 v51 = (char *)_os_log_send_and_compose_impl();
    v82[0] = 16;
    LOBYTE(v78) = 0;
    if (!__nwlog_fault(v51, v82, &v78)) {
      goto LABEL_164;
    }
    if (v82[0] == 17)
    {
      int v52 = __nwlog_obj();
      os_log_type_t v53 = v82[0];
      if (!os_log_type_enabled(v52, (os_log_type_t)v82[0])) {
        goto LABEL_164;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_get_output_frames";
      id v54 = "%{public}s called with null protocol";
      goto LABEL_163;
    }
    if (!(_BYTE)v78)
    {
      int v52 = __nwlog_obj();
      os_log_type_t v53 = v82[0];
      if (!os_log_type_enabled(v52, (os_log_type_t)v82[0])) {
        goto LABEL_164;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_get_output_frames";
      id v54 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_163;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    int v52 = __nwlog_obj();
    os_log_type_t v53 = v82[0];
    BOOL v64 = os_log_type_enabled(v52, (os_log_type_t)v82[0]);
    if (!backtrace_string)
    {
      if (!v64) {
        goto LABEL_164;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_get_output_frames";
      id v54 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_163;
    }
    if (!v64) {
      goto LABEL_146;
    }
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_get_output_frames";
    *(_WORD *)&unsigned char buf[12] = 2082;
    *(void *)&buf[14] = backtrace_string;
    os_log_type_t v65 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_145:
    _os_log_impl(&dword_1830D4000, v52, v53, v65, buf, 0x16u);
    goto LABEL_146;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_get_output_frames";
    __int16 v51 = (char *)_os_log_send_and_compose_impl();
    v82[0] = 16;
    LOBYTE(v78) = 0;
    if (!__nwlog_fault(v51, v82, &v78)) {
      goto LABEL_164;
    }
    if (v82[0] == 17)
    {
      int v52 = __nwlog_obj();
      os_log_type_t v53 = v82[0];
      if (!os_log_type_enabled(v52, (os_log_type_t)v82[0])) {
        goto LABEL_164;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_get_output_frames";
      id v54 = "%{public}s called with null http2_transport";
      goto LABEL_163;
    }
    if (!(_BYTE)v78)
    {
      int v52 = __nwlog_obj();
      os_log_type_t v53 = v82[0];
      if (!os_log_type_enabled(v52, (os_log_type_t)v82[0])) {
        goto LABEL_164;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_get_output_frames";
      id v54 = "%{public}s called with null http2_transport, backtrace limit exceeded";
      goto LABEL_163;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    int v52 = __nwlog_obj();
    os_log_type_t v53 = v82[0];
    BOOL v66 = os_log_type_enabled(v52, (os_log_type_t)v82[0]);
    if (!backtrace_string)
    {
      if (!v66) {
        goto LABEL_164;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_get_output_frames";
      id v54 = "%{public}s called with null http2_transport, no backtrace";
      goto LABEL_163;
    }
    if (!v66) {
      goto LABEL_146;
    }
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_get_output_frames";
    *(_WORD *)&unsigned char buf[12] = 2082;
    *(void *)&buf[14] = backtrace_string;
    os_log_type_t v65 = "%{public}s called with null http2_transport, dumping backtrace:%{public}s";
    goto LABEL_145;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_get_output_frames";
    __int16 v51 = (char *)_os_log_send_and_compose_impl();
    v82[0] = 16;
    LOBYTE(v78) = 0;
    if (!__nwlog_fault(v51, v82, &v78)) {
      goto LABEL_164;
    }
    if (v82[0] == 17)
    {
      int v52 = __nwlog_obj();
      os_log_type_t v53 = v82[0];
      if (!os_log_type_enabled(v52, (os_log_type_t)v82[0])) {
        goto LABEL_164;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_get_output_frames";
      id v54 = "%{public}s called with null input_protocol";
      goto LABEL_163;
    }
    if (!(_BYTE)v78)
    {
      int v52 = __nwlog_obj();
      os_log_type_t v53 = v82[0];
      if (!os_log_type_enabled(v52, (os_log_type_t)v82[0])) {
        goto LABEL_164;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_get_output_frames";
      id v54 = "%{public}s called with null input_protocol, backtrace limit exceeded";
      goto LABEL_163;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    int v52 = __nwlog_obj();
    os_log_type_t v53 = v82[0];
    BOOL v67 = os_log_type_enabled(v52, (os_log_type_t)v82[0]);
    if (!backtrace_string)
    {
      if (!v67) {
        goto LABEL_164;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_get_output_frames";
      id v54 = "%{public}s called with null input_protocol, no backtrace";
      goto LABEL_163;
    }
    if (!v67) {
      goto LABEL_146;
    }
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_get_output_frames";
    *(_WORD *)&unsigned char buf[12] = 2082;
    *(void *)&buf[14] = backtrace_string;
    os_log_type_t v65 = "%{public}s called with null input_protocol, dumping backtrace:%{public}s";
    goto LABEL_145;
  }
  if (!a6)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_get_output_frames";
    __int16 v51 = (char *)_os_log_send_and_compose_impl();
    v82[0] = 16;
    LOBYTE(v78) = 0;
    if (!__nwlog_fault(v51, v82, &v78)) {
      goto LABEL_164;
    }
    if (v82[0] == 17)
    {
      int v52 = __nwlog_obj();
      os_log_type_t v53 = v82[0];
      if (!os_log_type_enabled(v52, (os_log_type_t)v82[0])) {
        goto LABEL_164;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_get_output_frames";
      id v54 = "%{public}s called with null return_array";
      goto LABEL_163;
    }
    if (!(_BYTE)v78)
    {
      int v52 = __nwlog_obj();
      os_log_type_t v53 = v82[0];
      if (!os_log_type_enabled(v52, (os_log_type_t)v82[0])) {
        goto LABEL_164;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_get_output_frames";
      id v54 = "%{public}s called with null return_array, backtrace limit exceeded";
      goto LABEL_163;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    int v52 = __nwlog_obj();
    os_log_type_t v53 = v82[0];
    BOOL v68 = os_log_type_enabled(v52, (os_log_type_t)v82[0]);
    if (backtrace_string)
    {
      if (v68)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_get_output_frames";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        os_log_type_t v65 = "%{public}s called with null return_array, dumping backtrace:%{public}s";
        goto LABEL_145;
      }
LABEL_146:
      free(backtrace_string);
      goto LABEL_164;
    }
    if (!v68) {
      goto LABEL_164;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_get_output_frames";
    id v54 = "%{public}s called with null return_array, no backtrace";
LABEL_163:
    _os_log_impl(&dword_1830D4000, v52, v53, v54, buf, 0xCu);
LABEL_164:
    if (v51) {
      free(v51);
    }
    return 0;
  }
  LODWORD(v9) = a4;
  if (gLogDatapath)
  {
    __int16 v55 = __nwlog_obj();
    if (os_log_type_enabled(v55, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_get_output_frames";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = (char *)handle + 205;
      _os_log_impl(&dword_1830D4000, v55, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s called", buf, 0x16u);
    }
  }
  a6->tqh_first = 0;
  a6->tqh_last = &a6->tqh_first;
  if (!v9)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v19 = gLogObj;
    BOOL result = os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_get_output_frames";
    *(_WORD *)&unsigned char buf[12] = 2082;
    *(void *)&buf[14] = (char *)handle + 205;
    id v15 = "%{public}s %{public}s get_output_frames called with maximum bytes 0, returning 0 frames";
LABEL_19:
    id v16 = v19;
    os_log_type_t v17 = OS_LOG_TYPE_ERROR;
    uint32_t v18 = 22;
    goto LABEL_24;
  }
  output_handler_context = a2->output_handler_context;
  if (!output_handler_context)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v19 = gLogObj;
    BOOL result = os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_get_output_frames";
    *(_WORD *)&unsigned char buf[12] = 2082;
    *(void *)&buf[14] = (char *)handle + 205;
    id v15 = "%{public}s %{public}s cannot get output frames for protocol without proper output handler context";
    goto LABEL_19;
  }
  uint64_t v11 = output_handler_context[4];
  if (!v11)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v21 = gLogObj;
    BOOL result = os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    *(_DWORD *)buf = 136446978;
    *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_get_output_frames";
    *(_WORD *)&unsigned char buf[12] = 2082;
    *(void *)&buf[14] = (char *)handle + 205;
    *(_WORD *)&buf[22] = 1042;
    *(_DWORD *)uint64_t v91 = 16;
    *(_WORD *)&v91[4] = 2098;
    *(void *)&v91[6] = a2;
    id v15 = "%{public}s %{public}s cannot find hash table entry for %{public,uuid_t}.16P";
    id v16 = v21;
    os_log_type_t v17 = OS_LOG_TYPE_ERROR;
    uint32_t v18 = 38;
    goto LABEL_24;
  }
  if ((*(unsigned char *)(v11 + 36) & 1) == 0 || *(_DWORD *)(v11 + 32) == -1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v20 = gLogObj;
    BOOL result = os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    *(_DWORD *)buf = 136446722;
    *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_get_output_frames";
    *(_WORD *)&unsigned char buf[12] = 2082;
    *(void *)&buf[14] = (char *)handle + 205;
    *(_WORD *)&buf[22] = 2048;
    *(void *)uint64_t v91 = a2;
    id v15 = "%{public}s %{public}s cannot get output frames for stream that is not yet open, protocol (%p)";
    id v16 = v20;
    os_log_type_t v17 = OS_LOG_TYPE_ERROR;
    uint32_t v18 = 32;
    goto LABEL_24;
  }
  if (*(void *)(v11 + 16))
  {
    if (!gLogDatapath) {
      return 0;
    }
    os_log_type_t v12 = __nwlog_obj();
    BOOL result = os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG);
    if (!result) {
      return result;
    }
    int v14 = *(_DWORD *)(v11 + 32);
    *(_DWORD *)buf = 136446722;
    *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_get_output_frames";
    *(_WORD *)&unsigned char buf[12] = 2082;
    *(void *)&buf[14] = (char *)handle + 205;
    *(_WORD *)&buf[22] = 1024;
    *(_DWORD *)uint64_t v91 = v14;
    id v15 = "%{public}s %{public}s stream %d already has pending output frames, cannot get more";
    id v16 = v12;
    os_log_type_t v17 = OS_LOG_TYPE_DEBUG;
    uint32_t v18 = 28;
LABEL_24:
    _os_log_impl(&dword_1830D4000, v16, v17, v15, buf, v18);
    return 0;
  }
  if (v9 >= 0x1000000) {
    size_t v9 = 0x1000000;
  }
  else {
    size_t v9 = v9;
  }
  uint64_t v78 = 0;
  uint64_t v79 = &v78;
  uint64_t v80 = 0x2000000000;
  uint64_t v81 = 0;
  if (gLogDatapath)
  {
    BOOL v69 = __nwlog_obj();
    if (os_log_type_enabled(v69, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long v82 = 136446722;
      int v83 = "http2_transport_create_output_frame";
      __int16 v84 = 2082;
      uint64_t v85 = (uint64_t)handle + 205;
      __int16 v86 = 1024;
      LODWORD(v87) = v9;
      _os_log_impl(&dword_1830D4000, v69, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s requested output frame of length %u", v82, 0x1Cu);
    }
  }
  *(void *)buf = MEMORY[0x1E4F143A8];
  *(void *)&buf[8] = 0x40000000;
  *(void *)&buf[16] = ___ZL35http2_transport_create_output_frameP27nw_protocol_http2_transportP11nw_protocolj_block_invoke;
  *(void *)uint64_t v91 = &unk_1E5240BA8;
  int v93 = v9;
  int v92 = a2;
  *(void *)&v91[8] = &v78;
  *(void *)&v91[16] = handle;
  uint64_t v22 = handle[22];
  do
  {
    if (!v22) {
      break;
    }
    uint64_t v23 = *(void *)(v22 + 16);
    char v24 = (*(uint64_t (**)(unsigned char *))&buf[16])(buf);
    uint64_t v22 = v23;
  }
  while ((v24 & 1) != 0);
  if (v79[3]) {
    goto LABEL_35;
  }
  if (gLogDatapath)
  {
    long long v72 = __nwlog_obj();
    if (os_log_type_enabled(v72, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long v82 = 136446722;
      int v83 = "http2_transport_create_output_frame";
      __int16 v84 = 2082;
      uint64_t v85 = (uint64_t)handle + 205;
      __int16 v86 = 1024;
      LODWORD(v87) = v9;
      _os_log_impl(&dword_1830D4000, v72, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s no output frame to reuse for length %u", v82, 0x1Cu);
    }
  }
  uint64_t v28 = malloc_type_calloc(1uLL, v9, 0xEAFB8F1AuLL);
  if (v28)
  {
    uint64_t v29 = (uint64_t)v28;
  }
  else
  {
    long long v73 = __nwlog_obj();
    os_log_type_enabled(v73, OS_LOG_TYPE_ERROR);
    *(_DWORD *)long long v82 = 136446722;
    int v83 = "strict_calloc";
    __int16 v84 = 2048;
    uint64_t v85 = 1;
    __int16 v86 = 2048;
    size_t v87 = v9;
    long long v74 = (void *)_os_log_send_and_compose_impl();
    BOOL result = __nwlog_abort((uint64_t)v74);
    if (result)
    {
      __break(1u);
      return result;
    }
    free(v74);
    uint64_t v29 = 0;
  }
  uint64_t v30 = nw_frame_create(16, v29, v9, (uint64_t)nw_protocol_http2_transport_frame_output_finalizer, 0);
  v79[3] = v30;
  if (!v30)
  {
    __nwlog_obj();
    *(_DWORD *)long long v82 = 136446210;
    int v83 = "http2_transport_create_output_frame";
    nw_listener_t v39 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v76 = 0;
    if (__nwlog_fault(v39, &type, &v76))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v40 = __nwlog_obj();
        os_log_type_t v41 = type;
        if (os_log_type_enabled(v40, type))
        {
          *(_DWORD *)long long v82 = 136446210;
          int v83 = "http2_transport_create_output_frame";
          os_log_type_t v42 = "%{public}s nw_frame_create output frame failed";
LABEL_107:
          _os_log_impl(&dword_1830D4000, v40, v41, v42, v82, 0xCu);
        }
      }
      else if (v76)
      {
        __int16 v48 = (char *)__nw_create_backtrace_string();
        os_log_type_t v40 = __nwlog_obj();
        os_log_type_t v41 = type;
        BOOL v49 = os_log_type_enabled(v40, type);
        if (v48)
        {
          if (v49)
          {
            *(_DWORD *)long long v82 = 136446466;
            int v83 = "http2_transport_create_output_frame";
            __int16 v84 = 2082;
            uint64_t v85 = (uint64_t)v48;
            _os_log_impl(&dword_1830D4000, v40, v41, "%{public}s nw_frame_create output frame failed, dumping backtrace:%{public}s", v82, 0x16u);
          }
          free(v48);
          goto LABEL_108;
        }
        if (v49)
        {
          *(_DWORD *)long long v82 = 136446210;
          int v83 = "http2_transport_create_output_frame";
          os_log_type_t v42 = "%{public}s nw_frame_create output frame failed, no backtrace";
          goto LABEL_107;
        }
      }
      else
      {
        os_log_type_t v40 = __nwlog_obj();
        os_log_type_t v41 = type;
        if (os_log_type_enabled(v40, type))
        {
          *(_DWORD *)long long v82 = 136446210;
          int v83 = "http2_transport_create_output_frame";
          os_log_type_t v42 = "%{public}s nw_frame_create output frame failed, backtrace limit exceeded";
          goto LABEL_107;
        }
      }
    }
LABEL_108:
    if (v39) {
      free(v39);
    }
    if (v28) {
      free(v28);
    }
    goto LABEL_112;
  }
  if (!http2_transport_output_frame_context_reset(v30, (uint64_t)handle, (uint64_t)a2))
  {
    os_log_type_t v43 = __nwlog_obj();
    if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long v82 = 136446466;
      int v83 = "http2_transport_create_output_frame";
      __int16 v84 = 2082;
      uint64_t v85 = (uint64_t)handle + 205;
      _os_log_impl(&dword_1830D4000, v43, OS_LOG_TYPE_ERROR, "%{public}s %{public}s output frame has no metadata", v82, 0x16u);
    }
    long long buffer = (void *)nw_frame_get_buffer(v79[3], 0);
    if (buffer) {
      free(buffer);
    }
    nw_frame_reset(v79[3], 0, 0, 0, 0);
    char v45 = (void *)v79[3];
    if (v45)
    {
      os_release(v45);
      v79[3] = 0;
    }
LABEL_112:
    _Block_object_dispose(&v78, 8);
LABEL_113:
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    long long v56 = (char *)handle + 205;
    *(_DWORD *)buf = 136446722;
    *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_get_output_frames";
    *(_WORD *)&unsigned char buf[12] = 2082;
    *(void *)&buf[14] = (char *)handle + 205;
    *(_WORD *)&buf[22] = 1024;
    *(_DWORD *)uint64_t v91 = v9;
    __int16 v57 = (char *)_os_log_send_and_compose_impl();
    v82[0] = 16;
    LOBYTE(v78) = 0;
    if (!__nwlog_fault(v57, v82, &v78)) {
      goto LABEL_127;
    }
    if (v82[0] == 17)
    {
      long long v58 = __nwlog_obj();
      os_log_type_t v59 = v82[0];
      if (!os_log_type_enabled(v58, (os_log_type_t)v82[0])) {
        goto LABEL_127;
      }
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_get_output_frames";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = v56;
      *(_WORD *)&buf[22] = 1024;
      *(_DWORD *)uint64_t v91 = v9;
      id v60 = "%{public}s %{public}s failed to create/reuse output frame of length %u";
    }
    else if ((_BYTE)v78)
    {
      uint64_t v61 = (char *)__nw_create_backtrace_string();
      long long v58 = __nwlog_obj();
      os_log_type_t v59 = v82[0];
      BOOL v62 = os_log_type_enabled(v58, (os_log_type_t)v82[0]);
      if (v61)
      {
        if (v62)
        {
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_get_output_frames";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v56;
          *(_WORD *)&buf[22] = 1024;
          *(_DWORD *)uint64_t v91 = v9;
          *(_WORD *)&v91[4] = 2082;
          *(void *)&v91[6] = v61;
          _os_log_impl(&dword_1830D4000, v58, v59, "%{public}s %{public}s failed to create/reuse output frame of length %u, dumping backtrace:%{public}s", buf, 0x26u);
        }
        free(v61);
        goto LABEL_127;
      }
      if (!v62)
      {
LABEL_127:
        if (v57) {
          free(v57);
        }
        return 0;
      }
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_get_output_frames";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = v56;
      *(_WORD *)&buf[22] = 1024;
      *(_DWORD *)uint64_t v91 = v9;
      id v60 = "%{public}s %{public}s failed to create/reuse output frame of length %u, no backtrace";
    }
    else
    {
      long long v58 = __nwlog_obj();
      os_log_type_t v59 = v82[0];
      if (!os_log_type_enabled(v58, (os_log_type_t)v82[0])) {
        goto LABEL_127;
      }
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_get_output_frames";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = v56;
      *(_WORD *)&buf[22] = 1024;
      *(_DWORD *)uint64_t v91 = v9;
      id v60 = "%{public}s %{public}s failed to create/reuse output frame of length %u, backtrace limit exceeded";
    }
    _os_log_impl(&dword_1830D4000, v58, v59, v60, buf, 0x1Cu);
    goto LABEL_127;
  }
  if (!gLogDatapath) {
    goto LABEL_36;
  }
  uint64_t v31 = __nwlog_obj();
  if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long v82 = 136446722;
    int v83 = "http2_transport_create_output_frame";
    __int16 v84 = 2082;
    uint64_t v85 = (uint64_t)handle + 205;
    __int16 v86 = 1024;
    LODWORD(v87) = v9;
    _os_log_impl(&dword_1830D4000, v31, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s allocated new output frame of length %u", v82, 0x1Cu);
  }
LABEL_35:
  if (gLogDatapath)
  {
    os_log_type_t v70 = __nwlog_obj();
    if (os_log_type_enabled(v70, OS_LOG_TYPE_DEBUG))
    {
      size_t v71 = v79[3];
      *(_DWORD *)long long v82 = 136446978;
      int v83 = "http2_transport_create_output_frame";
      __int16 v84 = 2082;
      uint64_t v85 = (uint64_t)handle + 205;
      __int16 v86 = 2048;
      size_t v87 = v71;
      __int16 v88 = 1024;
      int v89 = v9;
      _os_log_impl(&dword_1830D4000, v70, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s output_frame_create returning frame %p for requested length %u", v82, 0x26u);
    }
  }
LABEL_36:
  uint64_t v25 = v79[3];
  _Block_object_dispose(&v78, 8);
  if (!v25) {
    goto LABEL_113;
  }
  int v26 = *(_DWORD *)(v25 + 52);
  if (v26) {
    int v27 = v26 - (*(_DWORD *)(v25 + 56) + *(_DWORD *)(v25 + 60));
  }
  else {
    int v27 = 0;
  }
  if (v27 != v9)
  {
    __nwlog_obj();
    os_log_type_t v34 = (char *)handle + 205;
    *(_DWORD *)buf = 136446978;
    *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_get_output_frames";
    *(_WORD *)&unsigned char buf[12] = 2082;
    *(void *)&buf[14] = (char *)handle + 205;
    *(_WORD *)&buf[22] = 1024;
    *(_DWORD *)uint64_t v91 = v27;
    *(_WORD *)&v91[4] = 1024;
    *(_DWORD *)&v91[6] = v9;
    uint64_t v35 = (char *)_os_log_send_and_compose_impl();
    v82[0] = 16;
    LOBYTE(v78) = 0;
    if (__nwlog_fault(v35, v82, &v78))
    {
      if (v82[0] == 17)
      {
        unint64_t v36 = __nwlog_obj();
        os_log_type_t v37 = v82[0];
        if (os_log_type_enabled(v36, (os_log_type_t)v82[0]))
        {
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_get_output_frames";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v34;
          *(_WORD *)&buf[22] = 1024;
          *(_DWORD *)uint64_t v91 = v27;
          *(_WORD *)&v91[4] = 1024;
          *(_DWORD *)&v91[6] = v9;
          os_log_type_t v38 = "%{public}s %{public}s got output frame with wrong size (got %u != wanted %u) from http2_transport_create_output_frame";
LABEL_79:
          _os_log_impl(&dword_1830D4000, v36, v37, v38, buf, 0x22u);
        }
      }
      else if ((_BYTE)v78)
      {
        __int16 v46 = (char *)__nw_create_backtrace_string();
        unint64_t v36 = __nwlog_obj();
        os_log_type_t v37 = v82[0];
        BOOL v47 = os_log_type_enabled(v36, (os_log_type_t)v82[0]);
        if (v46)
        {
          if (v47)
          {
            *(_DWORD *)buf = 136447234;
            *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_get_output_frames";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = v34;
            *(_WORD *)&buf[22] = 1024;
            *(_DWORD *)uint64_t v91 = v27;
            *(_WORD *)&v91[4] = 1024;
            *(_DWORD *)&v91[6] = v9;
            *(_WORD *)&v91[10] = 2082;
            *(void *)&v91[12] = v46;
            _os_log_impl(&dword_1830D4000, v36, v37, "%{public}s %{public}s got output frame with wrong size (got %u != wanted %u) from http2_transport_create_output_frame, dumping backtrace:%{public}s", buf, 0x2Cu);
          }
          free(v46);
          goto LABEL_80;
        }
        if (v47)
        {
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_get_output_frames";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v34;
          *(_WORD *)&buf[22] = 1024;
          *(_DWORD *)uint64_t v91 = v27;
          *(_WORD *)&v91[4] = 1024;
          *(_DWORD *)&v91[6] = v9;
          os_log_type_t v38 = "%{public}s %{public}s got output frame with wrong size (got %u != wanted %u) from http2_transport_create"
                "_output_frame, no backtrace";
          goto LABEL_79;
        }
      }
      else
      {
        unint64_t v36 = __nwlog_obj();
        os_log_type_t v37 = v82[0];
        if (os_log_type_enabled(v36, (os_log_type_t)v82[0]))
        {
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_get_output_frames";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v34;
          *(_WORD *)&buf[22] = 1024;
          *(_DWORD *)uint64_t v91 = v27;
          *(_WORD *)&v91[4] = 1024;
          *(_DWORD *)&v91[6] = v9;
          os_log_type_t v38 = "%{public}s %{public}s got output frame with wrong size (got %u != wanted %u) from http2_transport_create"
                "_output_frame, backtrace limit exceeded";
          goto LABEL_79;
        }
      }
    }
LABEL_80:
    if (v35) {
      free(v35);
    }
    int v50 = (void *)nw_frame_get_buffer(v25, 0);
    if (v50) {
      free(v50);
    }
    nw_frame_reset(v25, 0, 0, 0, 0);
    os_release((void *)v25);
    return 0;
  }
  if (gLogDatapath)
  {
    long long v75 = __nwlog_obj();
    if (os_log_type_enabled(v75, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_get_output_frames";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = (char *)handle + 205;
      *(_WORD *)&buf[22] = 1024;
      *(_DWORD *)uint64_t v91 = v9;
      _os_log_impl(&dword_1830D4000, v75, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s returning frame of %u bytes", buf, 0x1Cu);
    }
  }
  *(void *)(v25 + 16) = 0;
  id v32 = (uint64_t *)handle[17];
  *(void *)(v25 + 24) = v32;
  *id v32 = v25;
  handle[17] = v25 + 16;
  *(void *)(v25 + 32) = 0;
  tqh_last = a6->tqh_last;
  *(void *)(v25 + 40) = tqh_last;
  *tqh_last = (nw_frame *)v25;
  a6->tqh_last = (nw_frame **)(v25 + 32);
  return 1;
}

uint64_t ___ZL35http2_transport_create_output_frameP27nw_protocol_http2_transportP11nw_protocolj_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v111 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    if ((*(_WORD *)(a2 + 204) & 0x100) != 0
      && g_channel_check_validity
      && !g_channel_check_validity(a2, *(void *)(a2 + 88)))
    {
      unsigned int v4 = 0;
      uint64_t v5 = 0;
    }
    else
    {
      unsigned int v4 = *(_DWORD *)(a2 + 48);
      uint64_t v5 = *(void *)(a2 + 112);
    }
    if (gLogDatapath)
    {
      size_t v87 = __nwlog_obj();
      if (os_log_type_enabled(v87, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v88 = *(void *)(a1 + 40);
        BOOL v89 = v88 == 0;
        *(_DWORD *)buf = 136446978;
        __int16 v90 = (const char *)(v88 + 205);
        char v105 = "http2_transport_create_output_frame_block_invoke";
        if (v89) {
          __int16 v90 = "";
        }
        __int16 v106 = 2082;
        v107 = (void *)v90;
        __int16 v108 = 2048;
        *(void *)v109 = v5;
        *(_WORD *)&v109[8] = 1024;
        unsigned int v110 = v4;
        _os_log_impl(&dword_1830D4000, v87, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s existing frame found, buffer %p, length %u", buf, 0x26u);
      }
    }
    int v6 = *(_DWORD *)(a2 + 52);
    if (v6) {
      v6 -= *(_DWORD *)(a2 + 56) + *(_DWORD *)(a2 + 60);
    }
    if (v6 == v4)
    {
      if (v5 && v4)
      {
        if (http2_transport_candidate_frame_length_is_match(v4, *(_DWORD *)(a1 + 56)))
        {
          uint64_t v8 = *(void *)(a2 + 16);
          size_t v9 = *(void **)(a2 + 24);
          if (v8)
          {
            *(void *)(v8 + 24) = v9;
            size_t v9 = *(void **)(a2 + 24);
          }
          else
          {
            *(void *)(*(void *)(a1 + 40) + 184) = v9;
          }
          void *v9 = v8;
          *(void *)(a2 + 16) = 0;
          *(void *)(a2 + 24) = 0;
          uint64_t v67 = *(void *)(a1 + 40);
          int v68 = *(_DWORD *)(v67 + 196);
          if (v68)
          {
            *(_DWORD *)(v67 + 196) = v68 - 1;
            goto LABEL_175;
          }
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          *(_DWORD *)buf = 136446210;
          char v105 = "http2_transport_create_output_frame_block_invoke";
          BOOL v69 = (char *)_os_log_send_and_compose_impl();
          os_log_type_t type = OS_LOG_TYPE_ERROR;
          char v102 = 0;
          if (__nwlog_fault(v69, &type, &v102))
          {
            if (type == OS_LOG_TYPE_FAULT)
            {
              os_log_type_t v70 = __nwlog_obj();
              os_log_type_t v71 = type;
              if (!os_log_type_enabled(v70, type)) {
                goto LABEL_173;
              }
              *(_DWORD *)buf = 136446210;
              char v105 = "http2_transport_create_output_frame_block_invoke";
              long long v72 = "%{public}s http2_transport count attempted to decrement below zero";
              goto LABEL_172;
            }
            if (!v102)
            {
              os_log_type_t v70 = __nwlog_obj();
              os_log_type_t v71 = type;
              if (!os_log_type_enabled(v70, type)) {
                goto LABEL_173;
              }
              *(_DWORD *)buf = 136446210;
              char v105 = "http2_transport_create_output_frame_block_invoke";
              long long v72 = "%{public}s http2_transport count attempted to decrement below zero, backtrace limit exceeded";
              goto LABEL_172;
            }
            backtrace_string = (char *)__nw_create_backtrace_string();
            os_log_type_t v70 = __nwlog_obj();
            os_log_type_t v71 = type;
            BOOL v82 = os_log_type_enabled(v70, type);
            if (backtrace_string)
            {
              if (v82)
              {
                *(_DWORD *)buf = 136446466;
                char v105 = "http2_transport_create_output_frame_block_invoke";
                __int16 v106 = 2082;
                v107 = backtrace_string;
                _os_log_impl(&dword_1830D4000, v70, v71, "%{public}s http2_transport count attempted to decrement below zero, dumping backtrace:%{public}s", buf, 0x16u);
              }
              free(backtrace_string);
              goto LABEL_173;
            }
            if (v82)
            {
              *(_DWORD *)buf = 136446210;
              char v105 = "http2_transport_create_output_frame_block_invoke";
              long long v72 = "%{public}s http2_transport count attempted to decrement below zero, no backtrace";
LABEL_172:
              _os_log_impl(&dword_1830D4000, v70, v71, v72, buf, 0xCu);
            }
          }
LABEL_173:
          if (v69) {
            free(v69);
          }
LABEL_175:
          if (gLogDatapath)
          {
            uint64_t v91 = __nwlog_obj();
            if (os_log_type_enabled(v91, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v92 = *(void *)(a1 + 40);
              int v93 = "";
              uint64_t v94 = (const char *)(v92 + 205);
              BOOL v89 = v92 == 0;
              int v95 = *(_DWORD *)(a1 + 56);
              if (!v89) {
                int v93 = v94;
              }
              *(_DWORD *)buf = 136446978;
              char v105 = "http2_transport_create_output_frame_block_invoke";
              __int16 v106 = 2082;
              v107 = (void *)v93;
              __int16 v108 = 1024;
              *(_DWORD *)v109 = v4;
              *(_WORD *)&v109[4] = 1024;
              *(_DWORD *)&v109[6] = v95;
              _os_log_impl(&dword_1830D4000, v91, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s reusing output frame of length %u, adjusting to %u", buf, 0x22u);
            }
            int v86 = v4 - *(_DWORD *)(a1 + 56);
            if (!v86)
            {
              if (gLogDatapath)
              {
                os_log_type_t v96 = __nwlog_obj();
                if (os_log_type_enabled(v96, OS_LOG_TYPE_DEBUG))
                {
                  uint64_t v97 = *(void *)(a1 + 40);
                  if (v97) {
                    uint64_t v98 = (const char *)(v97 + 205);
                  }
                  else {
                    uint64_t v98 = "";
                  }
                  *(_DWORD *)buf = 136446466;
                  char v105 = "http2_transport_create_output_frame_block_invoke";
                  __int16 v106 = 2082;
                  v107 = (void *)v98;
                  _os_log_impl(&dword_1830D4000, v96, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s frame was exact match, not modifying", buf, 0x16u);
                }
              }
              goto LABEL_178;
            }
            if (gLogDatapath)
            {
              os_log_type_t v99 = __nwlog_obj();
              if (os_log_type_enabled(v99, OS_LOG_TYPE_DEBUG))
              {
                uint64_t v100 = *(void *)(a1 + 40);
                *(_DWORD *)buf = 136446722;
                char v105 = "http2_transport_create_output_frame_block_invoke";
                if (v100) {
                  BOOL v101 = (const char *)(v100 + 205);
                }
                else {
                  BOOL v101 = "";
                }
                __int16 v106 = 2082;
                v107 = (void *)v101;
                __int16 v108 = 1024;
                *(_DWORD *)v109 = v86;
                _os_log_impl(&dword_1830D4000, v99, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s claiming %u bytes off end of frame", buf, 0x1Cu);
              }
            }
          }
          else
          {
            int v86 = v4 - *(_DWORD *)(a1 + 56);
            if (!v86)
            {
LABEL_178:
              http2_transport_output_frame_context_reset(a2, *(void *)(a1 + 40), *(void *)(a1 + 48));
              uint64_t result = 0;
              *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = a2;
              return result;
            }
          }
          nw_frame_claim(a2, v7, 0, v86);
          goto LABEL_178;
        }
        return 1;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v30 = *(void *)(a1 + 40);
      if (v30) {
        uint64_t v31 = (const char *)(v30 + 205);
      }
      else {
        uint64_t v31 = "";
      }
      *(_DWORD *)buf = 136446466;
      char v105 = "http2_transport_create_output_frame_block_invoke";
      __int16 v106 = 2082;
      v107 = (void *)v31;
      id v32 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v102 = 0;
      if (__nwlog_fault(v32, &type, &v102))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v33 = gLogObj;
          os_log_type_t v34 = type;
          if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
            goto LABEL_129;
          }
          uint64_t v35 = *(void *)(a1 + 40);
          if (v35) {
            unint64_t v36 = (const char *)(v35 + 205);
          }
          else {
            unint64_t v36 = "";
          }
          *(_DWORD *)buf = 136446466;
          char v105 = "http2_transport_create_output_frame_block_invoke";
          __int16 v106 = 2082;
          v107 = (void *)v36;
          os_log_type_t v37 = "%{public}s %{public}s destroying frame with NULL buffer";
LABEL_128:
          _os_log_impl(&dword_1830D4000, v33, v34, v37, buf, 0x16u);
          goto LABEL_129;
        }
        if (!v102)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v33 = gLogObj;
          os_log_type_t v34 = type;
          if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
            goto LABEL_129;
          }
          uint64_t v73 = *(void *)(a1 + 40);
          if (v73) {
            long long v74 = (const char *)(v73 + 205);
          }
          else {
            long long v74 = "";
          }
          *(_DWORD *)buf = 136446466;
          char v105 = "http2_transport_create_output_frame_block_invoke";
          __int16 v106 = 2082;
          v107 = (void *)v74;
          os_log_type_t v37 = "%{public}s %{public}s destroying frame with NULL buffer, backtrace limit exceeded";
          goto LABEL_128;
        }
        os_log_type_t v42 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v33 = gLogObj;
        os_log_type_t v34 = type;
        BOOL v43 = os_log_type_enabled((os_log_t)gLogObj, type);
        if (!v42)
        {
          if (!v43) {
            goto LABEL_129;
          }
          uint64_t v75 = *(void *)(a1 + 40);
          if (v75) {
            char v76 = (const char *)(v75 + 205);
          }
          else {
            char v76 = "";
          }
          *(_DWORD *)buf = 136446466;
          char v105 = "http2_transport_create_output_frame_block_invoke";
          __int16 v106 = 2082;
          v107 = (void *)v76;
          os_log_type_t v37 = "%{public}s %{public}s destroying frame with NULL buffer, no backtrace";
          goto LABEL_128;
        }
        if (v43)
        {
          uint64_t v44 = *(void *)(a1 + 40);
          if (v44) {
            char v45 = (const char *)(v44 + 205);
          }
          else {
            char v45 = "";
          }
          *(_DWORD *)buf = 136446722;
          char v105 = "http2_transport_create_output_frame_block_invoke";
          __int16 v106 = 2082;
          v107 = (void *)v45;
          __int16 v108 = 2082;
          *(void *)v109 = v42;
          _os_log_impl(&dword_1830D4000, v33, v34, "%{public}s %{public}s destroying frame with NULL buffer, dumping backtrace:%{public}s", buf, 0x20u);
        }
        free(v42);
      }
LABEL_129:
      if (v32) {
        free(v32);
      }
      uint64_t v77 = *(void *)(a2 + 16);
      uint64_t v78 = *(void **)(a2 + 24);
      if (v77)
      {
        *(void *)(v77 + 24) = v78;
        uint64_t v78 = *(void **)(a2 + 24);
      }
      else
      {
        *(void *)(*(void *)(a1 + 40) + 184) = v78;
      }
      void *v78 = v77;
      *(void *)(a2 + 16) = 0;
      *(void *)(a2 + 24) = 0;
      uint64_t v57 = *(void *)(a1 + 40);
      int v58 = *(_DWORD *)(v57 + 196);
      if (v58)
      {
LABEL_135:
        *(_DWORD *)(v57 + 196) = v58 - 1;
LABEL_161:
        if ((*(_WORD *)(a2 + 204) & 0x100) == 0
          || !g_channel_check_validity
          || g_channel_check_validity(a2, *(void *)(a2 + 88)))
        {
          uint64_t v85 = *(void **)(a2 + 112);
          if (v85) {
            free(v85);
          }
        }
        nw_frame_reset(a2, 0, 0, 0, 0);
        os_release((void *)a2);
        return 1;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      *(_DWORD *)buf = 136446210;
      char v105 = "http2_transport_create_output_frame_block_invoke";
      os_log_type_t v59 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v102 = 0;
      if (!__nwlog_fault(v59, &type, &v102)) {
        goto LABEL_159;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v60 = gLogObj;
        os_log_type_t v61 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
          goto LABEL_159;
        }
        *(_DWORD *)buf = 136446210;
        char v105 = "http2_transport_create_output_frame_block_invoke";
        BOOL v62 = "%{public}s http2_transport count attempted to decrement below zero";
        goto LABEL_157;
      }
      if (!v102)
      {
        id v60 = __nwlog_obj();
        os_log_type_t v61 = type;
        if (!os_log_type_enabled(v60, type)) {
          goto LABEL_159;
        }
        *(_DWORD *)buf = 136446210;
        char v105 = "http2_transport_create_output_frame_block_invoke";
        BOOL v62 = "%{public}s http2_transport count attempted to decrement below zero, backtrace limit exceeded";
        goto LABEL_157;
      }
      uint64_t v79 = (char *)__nw_create_backtrace_string();
      id v60 = __nwlog_obj();
      os_log_type_t v61 = type;
      BOOL v80 = os_log_type_enabled(v60, type);
      if (v79)
      {
        if (v80)
        {
          *(_DWORD *)buf = 136446466;
          char v105 = "http2_transport_create_output_frame_block_invoke";
          __int16 v106 = 2082;
          v107 = v79;
          _os_log_impl(&dword_1830D4000, v60, v61, "%{public}s http2_transport count attempted to decrement below zero, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v79);
        if (!v59) {
          goto LABEL_161;
        }
        goto LABEL_160;
      }
      if (v80)
      {
        *(_DWORD *)buf = 136446210;
        char v105 = "http2_transport_create_output_frame_block_invoke";
        BOOL v62 = "%{public}s http2_transport count attempted to decrement below zero, no backtrace";
LABEL_157:
        int v83 = v60;
        os_log_type_t v84 = v61;
LABEL_158:
        _os_log_impl(&dword_1830D4000, v83, v84, v62, buf, 0xCu);
        goto LABEL_159;
      }
      goto LABEL_159;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v18 = *(void *)(a1 + 40);
    if (v18) {
      uint64_t v19 = (const char *)(v18 + 205);
    }
    else {
      uint64_t v19 = "";
    }
    *(_DWORD *)buf = 136446466;
    char v105 = "http2_transport_create_output_frame_block_invoke";
    __int16 v106 = 2082;
    v107 = (void *)v19;
    uint64_t v20 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v102 = 0;
    if (__nwlog_fault(v20, &type, &v102))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v21 = gLogObj;
        os_log_type_t v22 = type;
        if (os_log_type_enabled((os_log_t)gLogObj, type))
        {
          uint64_t v23 = *(void *)(a1 + 40);
          if (v23) {
            char v24 = (const char *)(v23 + 205);
          }
          else {
            char v24 = "";
          }
          *(_DWORD *)buf = 136446466;
          char v105 = "http2_transport_create_output_frame_block_invoke";
          __int16 v106 = 2082;
          v107 = (void *)v24;
          uint64_t v25 = "%{public}s %{public}s candidate frame is not fully unclaimed, destroying";
LABEL_93:
          _os_log_impl(&dword_1830D4000, v21, v22, v25, buf, 0x16u);
        }
      }
      else if (v102)
      {
        os_log_type_t v38 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v21 = gLogObj;
        os_log_type_t v22 = type;
        BOOL v39 = os_log_type_enabled((os_log_t)gLogObj, type);
        if (v38)
        {
          if (v39)
          {
            uint64_t v40 = *(void *)(a1 + 40);
            if (v40) {
              os_log_type_t v41 = (const char *)(v40 + 205);
            }
            else {
              os_log_type_t v41 = "";
            }
            *(_DWORD *)buf = 136446722;
            char v105 = "http2_transport_create_output_frame_block_invoke";
            __int16 v106 = 2082;
            v107 = (void *)v41;
            __int16 v108 = 2082;
            *(void *)v109 = v38;
            _os_log_impl(&dword_1830D4000, v21, v22, "%{public}s %{public}s candidate frame is not fully unclaimed, destroying, dumping backtrace:%{public}s", buf, 0x20u);
          }
          free(v38);
          goto LABEL_94;
        }
        if (v39)
        {
          uint64_t v53 = *(void *)(a1 + 40);
          if (v53) {
            id v54 = (const char *)(v53 + 205);
          }
          else {
            id v54 = "";
          }
          *(_DWORD *)buf = 136446466;
          char v105 = "http2_transport_create_output_frame_block_invoke";
          __int16 v106 = 2082;
          v107 = (void *)v54;
          uint64_t v25 = "%{public}s %{public}s candidate frame is not fully unclaimed, destroying, no backtrace";
          goto LABEL_93;
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v21 = gLogObj;
        os_log_type_t v22 = type;
        if (os_log_type_enabled((os_log_t)gLogObj, type))
        {
          uint64_t v48 = *(void *)(a1 + 40);
          if (v48) {
            BOOL v49 = (const char *)(v48 + 205);
          }
          else {
            BOOL v49 = "";
          }
          *(_DWORD *)buf = 136446466;
          char v105 = "http2_transport_create_output_frame_block_invoke";
          __int16 v106 = 2082;
          v107 = (void *)v49;
          uint64_t v25 = "%{public}s %{public}s candidate frame is not fully unclaimed, destroying, backtrace limit exceeded";
          goto LABEL_93;
        }
      }
    }
LABEL_94:
    if (v20) {
      free(v20);
    }
    uint64_t v55 = *(void *)(a2 + 16);
    long long v56 = *(void **)(a2 + 24);
    if (v55)
    {
      *(void *)(v55 + 24) = v56;
      long long v56 = *(void **)(a2 + 24);
    }
    else
    {
      *(void *)(*(void *)(a1 + 40) + 184) = v56;
    }
    *long long v56 = v55;
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    uint64_t v57 = *(void *)(a1 + 40);
    int v58 = *(_DWORD *)(v57 + 196);
    if (v58) {
      goto LABEL_135;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446210;
    char v105 = "http2_transport_create_output_frame_block_invoke";
    os_log_type_t v59 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v102 = 0;
    if (!__nwlog_fault(v59, &type, &v102)) {
      goto LABEL_159;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v60 = gLogObj;
      os_log_type_t v61 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_159;
      }
      *(_DWORD *)buf = 136446210;
      char v105 = "http2_transport_create_output_frame_block_invoke";
      BOOL v62 = "%{public}s http2_transport count attempted to decrement below zero";
      goto LABEL_157;
    }
    if (!v102)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v60 = gLogObj;
      os_log_type_t v61 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_159;
      }
      *(_DWORD *)buf = 136446210;
      char v105 = "http2_transport_create_output_frame_block_invoke";
      BOOL v62 = "%{public}s http2_transport count attempted to decrement below zero, backtrace limit exceeded";
      goto LABEL_157;
    }
    BOOL v63 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v64 = gLogObj;
    os_log_type_t v65 = type;
    BOOL v66 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!v63)
    {
      if (!v66) {
        goto LABEL_159;
      }
      *(_DWORD *)buf = 136446210;
      char v105 = "http2_transport_create_output_frame_block_invoke";
      BOOL v62 = "%{public}s http2_transport count attempted to decrement below zero, no backtrace";
      int v83 = v64;
      os_log_type_t v84 = v65;
      goto LABEL_158;
    }
    if (v66)
    {
      *(_DWORD *)buf = 136446466;
      char v105 = "http2_transport_create_output_frame_block_invoke";
      __int16 v106 = 2082;
      v107 = v63;
      _os_log_impl(&dword_1830D4000, v64, v65, "%{public}s http2_transport count attempted to decrement below zero, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v63);
LABEL_159:
    if (!v59) {
      goto LABEL_161;
    }
LABEL_160:
    free(v59);
    goto LABEL_161;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  uint64_t v10 = *(void *)(a1 + 40);
  if (v10) {
    uint64_t v11 = (const char *)(v10 + 205);
  }
  else {
    uint64_t v11 = "";
  }
  *(_DWORD *)buf = 136446466;
  char v105 = "http2_transport_create_output_frame_block_invoke";
  __int16 v106 = 2082;
  v107 = (void *)v11;
  os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v102 = 0;
  if (__nwlog_fault(v12, &type, &v102))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v13 = gLogObj;
      os_log_type_t v14 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        uint64_t v15 = *(void *)(a1 + 40);
        if (v15) {
          id v16 = (const char *)(v15 + 205);
        }
        else {
          id v16 = "";
        }
        *(_DWORD *)buf = 136446466;
        char v105 = "http2_transport_create_output_frame_block_invoke";
        __int16 v106 = 2082;
        v107 = (void *)v16;
        os_log_type_t v17 = "%{public}s %{public}s foreach gave null candidate_frame";
LABEL_84:
        _os_log_impl(&dword_1830D4000, v13, v14, v17, buf, 0x16u);
      }
    }
    else if (v102)
    {
      int v26 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v13 = gLogObj;
      os_log_type_t v14 = type;
      BOOL v27 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (v26)
      {
        if (v27)
        {
          uint64_t v28 = *(void *)(a1 + 40);
          if (v28) {
            uint64_t v29 = (const char *)(v28 + 205);
          }
          else {
            uint64_t v29 = "";
          }
          *(_DWORD *)buf = 136446722;
          char v105 = "http2_transport_create_output_frame_block_invoke";
          __int16 v106 = 2082;
          v107 = (void *)v29;
          __int16 v108 = 2082;
          *(void *)v109 = v26;
          _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s %{public}s foreach gave null candidate_frame, dumping backtrace:%{public}s", buf, 0x20u);
        }
        free(v26);
        goto LABEL_85;
      }
      if (v27)
      {
        uint64_t v50 = *(void *)(a1 + 40);
        if (v50) {
          __int16 v51 = (const char *)(v50 + 205);
        }
        else {
          __int16 v51 = "";
        }
        *(_DWORD *)buf = 136446466;
        char v105 = "http2_transport_create_output_frame_block_invoke";
        __int16 v106 = 2082;
        v107 = (void *)v51;
        os_log_type_t v17 = "%{public}s %{public}s foreach gave null candidate_frame, no backtrace";
        goto LABEL_84;
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v13 = gLogObj;
      os_log_type_t v14 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        uint64_t v46 = *(void *)(a1 + 40);
        if (v46) {
          BOOL v47 = (const char *)(v46 + 205);
        }
        else {
          BOOL v47 = "";
        }
        *(_DWORD *)buf = 136446466;
        char v105 = "http2_transport_create_output_frame_block_invoke";
        __int16 v106 = 2082;
        v107 = (void *)v47;
        os_log_type_t v17 = "%{public}s %{public}s foreach gave null candidate_frame, backtrace limit exceeded";
        goto LABEL_84;
      }
    }
  }
LABEL_85:
  if (v12) {
    free(v12);
  }
  return 0;
}

nw_endpoint_t *nw_resolver_create_with_path(void *a1)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = [NWConcrete_nw_resolver alloc];
    id v3 = (id *)v1;
    id v4 = v3[3];

    BOOL v5 = nw_path_copy_derived_parameters(v3);
    int v6 = -[NWConcrete_nw_resolver initWithEndpoint:parameters:path:log_str:](v2, v4, (void *)v5, v3, 0);

    goto LABEL_3;
  }
  uint64_t v8 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v19 = "nw_resolver_create_with_path";
  size_t v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (__nwlog_fault(v9, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v19 = "nw_resolver_create_with_path";
        _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null path", buf, 0xCu);
      }
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v10 = __nwlog_obj();
      os_log_type_t v13 = type;
      BOOL v14 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v19 = "nw_resolver_create_with_path";
          __int16 v20 = 2082;
          uint64_t v21 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v19 = "nw_resolver_create_with_path";
        _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v10 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v19 = "nw_resolver_create_with_path";
        _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v9) {
    free(v9);
  }
  int v6 = 0;
LABEL_3:

  return v6;
}

void sub_1833E4910(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_listener_reconcile_inboxes_on_queue(NWConcrete_nw_listener *a1)
{
  uint64_t v112 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  nw_context_assert_queue(*((void **)v1 + 3));
  BOOL v2 = nw_path_copy_derived_parameters(*((void **)v1 + 22));
  id v3 = (void *)*((void *)v1 + 26);
  *((void *)v1 + 26) = v2;

  nw_path_status_t status = nw_path_get_status(*((nw_path_t *)v1 + 22));
  BOOL obj = nw_array_create();
  BOOL v5 = (status == nw_path_status_satisfied
     || nw_parameters_get_always_open_listener_socket(*((void **)v1 + 26)))
    && !nw_path_listener_uses_nexus_only(*((void **)v1 + 22));
  uint64_t v99 = 0;
  uint64_t v100 = &v99;
  uint64_t v101 = 0x3032000000;
  char v102 = __Block_byref_object_copy__18063;
  v103 = __Block_byref_object_dispose__18064;
  id v104 = 0;
  int v6 = (void *)*((void *)v1 + 4);
  if (v6)
  {
    v96[0] = MEMORY[0x1E4F143A8];
    v96[1] = 3221225472;
    v96[2] = ___ZL38nw_listener_reconcile_inboxes_on_queueP22NWConcrete_nw_listener_block_invoke;
    v96[3] = &unk_1E523CFA8;
    uint64_t v97 = v1;
    id v98 = (id)obj;
    nw_listener_enumerate_multicast_parameters_for_descriptor_on_queue(v97, v6, v96);
  }
  else
  {
    id socket_inbox_match_on_queue = nw_listener_find_socket_inbox_match_on_queue(v1, *((void **)v1 + 26));
    uint64_t v8 = (void *)v100[5];
    v100[5] = (uint64_t)socket_inbox_match_on_queue;

    size_t v9 = (void *)v100[5];
    if (v9)
    {
      nw_array_append(obj, v9);
      BOOL v5 = 0;
    }
  }
  id v10 = nw_parameters_copy_custom_proxy_configs(*((void **)v1 + 2));
  os_log_type_t v11 = v10;
  if (!v10 || *((void *)v10 + 2) == *((void *)v10 + 3))
  {
    id v12 = nw_path_copy_proxy_configs(*((void **)v1 + 22));

    os_log_type_t v11 = v12;
  }
  v94[0] = MEMORY[0x1E4F143A8];
  v94[1] = 3221225472;
  v94[2] = ___ZL38nw_listener_reconcile_inboxes_on_queueP22NWConcrete_nw_listener_block_invoke_204;
  v94[3] = &unk_1E524AE18;
  os_log_type_t v13 = v1;
  int v95 = v13;
  nw_array_apply((atomic_uchar *)v11, (uint64_t)v94);
  if (status != nw_path_status_satisfied
    || (nw_parameters_get_allow_socket_access(*((void **)v1 + 26)) & 1) != 0
    || *((void *)v1 + 4))
  {
    BOOL v14 = 0;
  }
  else
  {
    BOOL v37 = nw_array_create();
    os_log_type_t v38 = (void *)*((void *)v1 + 22);
    v92[0] = MEMORY[0x1E4F143A8];
    v92[1] = 3221225472;
    v92[2] = ___ZL38nw_listener_reconcile_inboxes_on_queueP22NWConcrete_nw_listener_block_invoke_208;
    v92[3] = &unk_1E523CFF8;
    BOOL v39 = v13;
    int v93 = v39;
    nw_path_enumerate_interface_options(v38, v92);
    uint64_t v40 = (atomic_uchar *)nw_path_copy_flows(*((void **)v1 + 22));
    v88[0] = MEMORY[0x1E4F143A8];
    v88[1] = 3221225472;
    v88[2] = ___ZL38nw_listener_reconcile_inboxes_on_queueP22NWConcrete_nw_listener_block_invoke_2;
    v88[3] = &unk_1E52497B8;
    BOOL v89 = v39;
    id v90 = (id)obj;
    BOOL v14 = (id)v37;
    id v91 = v14;
    nw_array_apply(v40, (uint64_t)v88);
  }
  os_log_type_t v15 = (uint64_t *)((char *)v13 + 144);
  uint64_t v16 = *((void *)v13 + 18);
  if (v16 && *(void *)(v16 + 24) != *(void *)(v16 + 16))
  {
    v86[0] = MEMORY[0x1E4F143A8];
    v86[1] = 3221225472;
    v86[2] = ___ZL38nw_listener_reconcile_inboxes_on_queueP22NWConcrete_nw_listener_block_invoke_3;
    v86[3] = &unk_1E524AE18;
    id v17 = (id)obj;
    id v87 = v17;
    nw_array_apply((atomic_uchar *)v16, (uint64_t)v86);
    uint64_t v18 = nw_array_create_by_removal(*v15, (uint64_t)v17);
    uint64_t v19 = (atomic_uchar *)v18;
    if (v18 && *(void *)(v18 + 24) != *(void *)(v18 + 16))
    {
      v84[0] = MEMORY[0x1E4F143A8];
      v84[1] = 3221225472;
      v84[2] = ___ZL38nw_listener_reconcile_inboxes_on_queueP22NWConcrete_nw_listener_block_invoke_4;
      v84[3] = &unk_1E524AE18;
      uint64_t v85 = v13;
      nw_array_apply(v19, (uint64_t)v84);
    }
  }
  objc_storeStrong((id *)v13 + 18, (id)obj);
  BOOL v20 = nw_array_create();
  uint64_t v21 = (atomic_uchar *)*((void *)v13 + 19);
  v81[0] = MEMORY[0x1E4F143A8];
  v81[1] = 3221225472;
  v81[2] = ___ZL38nw_listener_reconcile_inboxes_on_queueP22NWConcrete_nw_listener_block_invoke_211;
  v81[3] = &unk_1E5247FB8;
  uint64_t v22 = v13;
  BOOL v82 = v22;
  id v23 = (id)v20;
  id v83 = v23;
  nw_array_apply(v21, (uint64_t)v81);
  v79[0] = MEMORY[0x1E4F143A8];
  v79[1] = 3221225472;
  v79[2] = ___ZL38nw_listener_reconcile_inboxes_on_queueP22NWConcrete_nw_listener_block_invoke_3_213;
  v79[3] = &unk_1E524AE18;
  char v24 = v22;
  BOOL v80 = v24;
  nw_array_apply((atomic_uchar *)v23, (uint64_t)v79);
  uint64_t v73 = 0;
  long long v74 = &v73;
  uint64_t v75 = 0x3032000000;
  char v76 = __Block_byref_object_copy__18063;
  uint64_t v77 = __Block_byref_object_dispose__18064;
  id v78 = 0;
  uint64_t v25 = (void *)*((void *)v1 + 4);
  if (v25)
  {
    v69[0] = MEMORY[0x1E4F143A8];
    v69[1] = 3221225472;
    v69[2] = ___ZL38nw_listener_reconcile_inboxes_on_queueP22NWConcrete_nw_listener_block_invoke_214;
    v69[3] = &unk_1E523D048;
    os_log_type_t v70 = v24;
    os_log_type_t v71 = &v99;
    long long v72 = &v73;
    nw_listener_enumerate_multicast_parameters_for_descriptor_on_queue(v70, v25, v69);

    goto LABEL_52;
  }
  if (v5 && !*((_DWORD *)v24 + 74))
  {
    long long v108 = 0uLL;
    nw_path_get_client_id(*((void **)v1 + 22), &v108);
    int v26 = -[nw_listener_inbox_socket initWithParameters:delegate:necpUUID:]([nw_listener_inbox_socket alloc], *((void **)v1 + 26), v24, &v108);
    BOOL v27 = (void *)v100[5];
    v100[5] = (uint64_t)v26;

    uint64_t v28 = (void *)v100[5];
    if (!v28)
    {
      uint64_t v41 = *((void *)v1 + 2);
      if (v41 && !nw_path_parameters_get_logging_disabled(*(void *)(v41 + 104)))
      {
        if (__nwlog_listener_log::onceToken != -1) {
          dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_40_44887);
        }
        os_log_type_t v42 = (id)glistenerLogObj;
        if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
        {
          id_string = nw_listener_get_id_string(v24);
          uint64_t v44 = (uint64_t (*)(uint64_t, uint64_t))*((void *)v1 + 26);
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = "nw_listener_reconcile_inboxes_on_queue";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = id_string;
          *(_WORD *)&buf[22] = 2114;
          __int16 v106 = v44;
          _os_log_impl(&dword_1830D4000, v42, OS_LOG_TYPE_ERROR, "%{public}s [%{public}s] failed to create listener inbox with parameters %{public}@", buf, 0x20u);
        }
      }
      char v45 = -[NWConcrete_nw_error initWithDomain:code:]([NWConcrete_nw_error alloc], 1, 22);
      id v32 = v74[5];
      v74[5] = (uint64_t)v45;
      goto LABEL_43;
    }
    uint64_t v29 = [v28 start];
    uint64_t v30 = (void *)v74[5];
    v74[5] = v29;

    uint64_t v31 = *((void *)v1 + 2);
    if (v74[5])
    {
      if (v31 && !nw_path_parameters_get_logging_disabled(*(void *)(v31 + 104)))
      {
        if (__nwlog_listener_log::onceToken != -1) {
          dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_40_44887);
        }
        id v32 = (id)glistenerLogObj;
        if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
        {
          uint64_t v33 = nw_listener_get_id_string(v24);
          os_log_type_t v34 = (uint64_t (*)(uint64_t, uint64_t))v74[5];
          uint64_t v35 = v100[5];
          uint64_t v36 = *((void *)v1 + 26);
          *(_DWORD *)buf = 136447234;
          *(void *)&uint8_t buf[4] = "nw_listener_reconcile_inboxes_on_queue";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v33;
          *(_WORD *)&buf[22] = 2114;
          __int16 v106 = v34;
          *(_WORD *)v107 = 2114;
          *(void *)&v107[2] = v35;
          *(_WORD *)&v107[10] = 2114;
          *(void *)&v107[12] = v36;
          _os_log_impl(&dword_1830D4000, v32, OS_LOG_TYPE_ERROR, "%{public}s [%{public}s] Error %{public}@ starting inbox %{public}@. Parameters: %{public}@", buf, 0x34u);
        }
LABEL_43:
      }
    }
    else
    {
      if (v31 && !nw_path_parameters_get_logging_disabled(*(void *)(v31 + 104)))
      {
        if (__nwlog_listener_log::onceToken != -1) {
          dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_40_44887);
        }
        uint64_t v46 = (id)glistenerLogObj;
        if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
        {
          BOOL v47 = nw_listener_get_id_string(v24);
          uint64_t v48 = (uint64_t (*)(uint64_t, uint64_t))v100[5];
          uint64_t v49 = *((void *)v1 + 26);
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_listener_reconcile_inboxes_on_queue";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v47;
          *(_WORD *)&buf[22] = 2114;
          __int16 v106 = v48;
          *(_WORD *)v107 = 2114;
          *(void *)&v107[2] = v49;
          _os_log_impl(&dword_1830D4000, v46, OS_LOG_TYPE_DEFAULT, "%{public}s [%{public}s] Started inbox %{public}@ with parameters %{public}@", buf, 0x2Au);
        }
      }
      nw_array_append(*v15, (void *)v100[5]);
    }
  }
LABEL_52:
  if ((nw_parameters_get_disable_listener_datapath(*((void **)v1 + 26)) & 1) == 0 && !v74[5] && v14 && v14[3] != v14[2])
  {
    v66[0] = MEMORY[0x1E4F143A8];
    v66[1] = 3221225472;
    v66[2] = ___ZL38nw_listener_reconcile_inboxes_on_queueP22NWConcrete_nw_listener_block_invoke_216;
    v66[3] = &unk_1E524A2E8;
    uint64_t v67 = v24;
    int v68 = &v73;
    nw_array_apply((atomic_uchar *)v14, (uint64_t)v66);
  }
  uint64_t v50 = v24;
  nw_context_assert_queue(*((void **)v1 + 3));
  *(void *)buf = 0;
  *(void *)&buf[8] = buf;
  *(void *)&buf[16] = 0x3032000000;
  __int16 v106 = __Block_byref_object_copy__18063;
  *(void *)v107 = __Block_byref_object_dispose__18064;
  *(void *)&v107[8] = 0;
  uint64_t v51 = *v15;
  if (!*v15) {
    goto LABEL_60;
  }
  if (*(void *)(v51 + 24) == *(void *)(v51 + 16)) {
    goto LABEL_60;
  }
  int v52 = nw_array_get_object_at_index(v51, 0);
  uint64_t v53 = objc_msgSend(v52, "local_endpoint");
  id v54 = *(void **)(*(void *)&buf[8] + 40);
  *(void *)(*(void *)&buf[8] + 40) = v53;

  uint64_t v55 = *(void **)(*(void *)&buf[8] + 40);
  if (!v55)
  {
LABEL_60:
    long long v56 = (void *)*((void *)v1 + 22);
    if (v56)
    {
      uint64_t v57 = v56;
      int v58 = (atomic_uchar *)v57[9];

      *(void *)&long long v108 = MEMORY[0x1E4F143A8];
      *((void *)&v108 + 1) = 3221225472;
      v109 = ___ZL40nw_listener_save_local_endpoint_on_queueP22NWConcrete_nw_listener_block_invoke;
      unsigned int v110 = &unk_1E5248058;
      uint64_t v111 = buf;
      nw_array_apply(v58, (uint64_t)&v108);

      uint64_t v55 = *(void **)(*(void *)&buf[8] + 40);
    }
    else
    {
      uint64_t v55 = 0;
    }
  }
  nw_listener_set_local_endpoint_on_queue(v50, v55);
  _Block_object_dispose(buf, 8);

  if (*((_DWORD *)v50 + 32) - 3) < 2 || (*((unsigned char *)v50 + 302))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v64 = (id)gLogObj;
    if (os_log_type_enabled(v64, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_listener_reconcile_inboxes_on_queue";
      _os_log_impl(&dword_1830D4000, v64, OS_LOG_TYPE_DEBUG, "%{public}s Listener already cancelled or failed, not modifying listener state", buf, 0xCu);
    }

    goto LABEL_73;
  }
  id v59 = (id)v74[5];
  if (v59)
  {
    id v60 = v59;
    int v61 = v60[2];

    if (v61 == 1)
    {
      BOOL v62 = v60;
      unsigned int v63 = v62[3];

      if (v63 <= 0x30 && ((1 << v63) & 0x1000000402006) != 0)
      {

        nw_listener_set_state_on_queue(v50, 3, (void *)v74[5]);
LABEL_73:
        nw_listener_stop_advertising_on_queue(v50);
        goto LABEL_74;
      }
    }
  }
  if (!*v15 || *(void *)(*v15 + 24) == *(void *)(*v15 + 16))
  {
    nw_listener_set_state_on_queue(v50, 1, (void *)v74[5]);
  }
  else
  {
    nw_listener_set_state_on_queue(v50, 2, 0);
    nw_listener_start_advertising_on_queue(v50);
  }
LABEL_74:
  _Block_object_dispose(&v73, 8);

  _Block_object_dispose(&v99, 8);
}

void sub_1833E55CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&STACK[0x200], 8);
  _Unwind_Resume(a1);
}

BOOL nw_path_copy_derived_parameters(void *a1)
{
  id v1 = a1;
  BOOL v2 = v1;
  if (v1 && (id v3 = (void *)*((void *)v1 + 2)) != 0)
  {
    id v4 = v3;
    BOOL v5 = -[NWConcrete_nw_parameters initWithParameters:stripConnected:shallowCopy:]((id *)[NWConcrete_nw_parameters alloc], v4, 0, 0);

    if ((nw_path_may_span_multiple_interfaces(v2) & 1) == 0)
    {
      int v6 = nw_path_copy_scoped_interface(v2);
      if (v6) {
        nw_parameters_require_interface((nw_parameters_t)v5, v6);
      }
    }
  }
  else
  {
    BOOL v5 = 0;
  }

  return v5;
}

void sub_1833E5770(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_listener_set_state_on_queue(void *a1, int a2, void *a3)
{
  uint64_t v112 = *MEMORY[0x1E4F143B8];
  BOOL v5 = a1;
  id v6 = a3;
  nw_context_assert_queue(*((void **)v5 + 3));
  unsigned int v7 = v5[32];
  if (v7 < 3 || (v7 == 3 ? (BOOL v13 = a2 == 4) : (BOOL v13 = 0), v13))
  {
    if (v7 == a2)
    {
      uint64_t v8 = *((id *)v5 + 17);
      size_t v9 = v6;
      id v10 = v9;
      if (v8 && v9)
      {
        if (v8[2] != v9[2])
        {

          goto LABEL_49;
        }
        int v11 = v8[3];
        int v12 = v9[3];

        if (v11 != v12) {
          goto LABEL_49;
        }
      }
      else
      {

        if (v8 != v10) {
          goto LABEL_29;
        }
      }
      if ((*((unsigned char *)v5 + 302) & 2) != 0)
      {
        uint64_t v19 = (void *)*((void *)v5 + 2);
        if (!v19) {
          goto LABEL_98;
        }
        BOOL v20 = v19;
        uint64_t v21 = v20[12];

        if ((v21 & 0x4000000) == 0)
        {
          uint64_t v22 = *((void *)v5 + 2);
          if (v22 && !nw_path_parameters_get_logging_disabled(*(void *)(v22 + 104)))
          {
            if (__nwlog_listener_log::onceToken != -1) {
              dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_40_44887);
            }
            id v23 = (id)glistenerLogObj;
            if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
            {
              id_string = nw_listener_get_id_string(v5);
              uint64_t v25 = off_1E523D0E0[a2];
              *(_DWORD *)buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_listener_set_state_on_queue";
              *(_WORD *)&unsigned char buf[12] = 2082;
              *(void *)&buf[14] = id_string;
              *(_WORD *)&buf[22] = 2082;
              long long v108 = (void *(*)(uint64_t, uint64_t))v25;
              *(_WORD *)v109 = 2114;
              *(void *)&v109[2] = v10;
              _os_log_impl(&dword_1830D4000, v23, OS_LOG_TYPE_DEBUG, "%{public}s [%{public}s] Skipping update for identical state and error (state: %{public}s, error: %{public}@)", buf, 0x2Au);
            }
          }
          goto LABEL_98;
        }
      }
    }
LABEL_29:
    if (!v6 && a2 == 1 && !v5[32])
    {
      int v26 = 1;
      goto LABEL_50;
    }
LABEL_49:
    int v26 = 0;
    *((unsigned char *)v5 + 302) |= 2u;
LABEL_50:
    uint64_t v39 = *((void *)v5 + 2);
    if (v39 && !nw_path_parameters_get_logging_disabled(*(void *)(v39 + 104)))
    {
      if (__nwlog_listener_log::onceToken != -1) {
        dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_40_44887);
      }
      uint64_t v40 = (id)glistenerLogObj;
      if (os_log_type_enabled(v40, OS_LOG_TYPE_INFO))
      {
        uint64_t v41 = v5;
        os_log_type_t v42 = v41 + 42;

        uint64_t v43 = v5[32];
        if (v43 > 4) {
          uint64_t v44 = "<unknown>";
        }
        else {
          uint64_t v44 = off_1E523D0E0[v43];
        }
        char v45 = off_1E523D0E0[a2];
        *(_DWORD *)buf = 136447490;
        *(void *)&uint8_t buf[4] = "nw_listener_set_state_on_queue";
        uint64_t v46 = "";
        *(void *)&buf[14] = v42;
        *(_WORD *)&unsigned char buf[12] = 2082;
        if (v26) {
          uint64_t v46 = ", suppressing client notification";
        }
        *(_WORD *)&buf[22] = 2082;
        long long v108 = (void *(*)(uint64_t, uint64_t))v44;
        *(_WORD *)v109 = 2082;
        *(void *)&v109[2] = v45;
        *(_WORD *)&unsigned char v109[10] = 2114;
        *(void *)&v109[12] = v6;
        __int16 v110 = 2082;
        uint64_t v111 = v46;
        _os_log_impl(&dword_1830D4000, v40, OS_LOG_TYPE_INFO, "%{public}s [%{public}s] %{public}s -> %{public}s, error: %{public}@%{public}s", buf, 0x3Eu);
      }
    }
    objc_storeStrong((id *)v5 + 17, a3);
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x3032000000;
    long long v108 = __Block_byref_object_copy__5;
    *(void *)v109 = __Block_byref_object_dispose__6;
    *(void *)&v109[8] = 0;
    *(void *)os_log_type_t type = 0;
    uint64_t v94 = type;
    uint64_t v95 = 0x3032000000;
    os_log_type_t v96 = __Block_byref_object_copy__18063;
    uint64_t v97 = __Block_byref_object_dispose__18064;
    id v98 = 0;
    uint64_t v87 = 0;
    uint64_t v88 = &v87;
    uint64_t v89 = 0x3032000000;
    id v90 = __Block_byref_object_copy__18063;
    id v91 = __Block_byref_object_dispose__18064;
    id v92 = 0;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 3221225472;
    aBlock[2] = ___ZL30nw_listener_set_state_on_queueP22NWConcrete_nw_listener19nw_listener_state_tPU22objcproto11OS_nw_error8NSObject_block_invoke;
    aBlock[3] = &unk_1E523CF58;
    BOOL v47 = v5;
    int v86 = a2;
    BOOL v82 = v47;
    id v83 = buf;
    os_log_type_t v84 = type;
    uint64_t v85 = &v87;
    uint64_t v48 = (void (**)(void))_Block_copy(aBlock);
    os_unfair_lock_lock((os_unfair_lock_t)v5 + 2);
    v48[2](v48);
    os_unfair_lock_unlock((os_unfair_lock_t)v5 + 2);

    if ((a2 - 3) <= 1) {
      nw_listener_teardown_on_queue(v47);
    }
    if (*(void *)(*(void *)&buf[8] + 40)) {
      char v49 = v26;
    }
    else {
      char v49 = 1;
    }
    if ((v49 & 1) == 0)
    {
      v76[0] = MEMORY[0x1E4F143A8];
      v76[1] = 3221225472;
      v76[2] = ___ZL30nw_listener_set_state_on_queueP22NWConcrete_nw_listener19nw_listener_state_tPU22objcproto11OS_nw_error8NSObject_block_invoke_2;
      v76[3] = &unk_1E523CF80;
      uint64_t v79 = buf;
      int v80 = a2;
      id v50 = v6;
      id v77 = v50;
      uint64_t v51 = v47;
      id v78 = v51;
      int v52 = _Block_copy(v76);
      if (*((void *)v94 + 5))
      {
        uint64_t v53 = *((void *)v5 + 2);
        if (v53 && !nw_path_parameters_get_logging_disabled(*(void *)(v53 + 104)))
        {
          if (__nwlog_listener_log::onceToken != -1) {
            dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_40_44887);
          }
          id v54 = (id)glistenerLogObj;
          if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v55 = v51;

            long long v56 = off_1E523D0E0[a2];
            *(_DWORD *)uint64_t v99 = 136446978;
            uint64_t v100 = "nw_listener_set_state_on_queue";
            __int16 v101 = 2082;
            char v102 = (char *)v55 + 42;
            __int16 v103 = 2082;
            id v104 = v56;
            __int16 v105 = 2114;
            id v106 = v50;
            _os_log_impl(&dword_1830D4000, v54, OS_LOG_TYPE_DEFAULT, "%{public}s [%{public}s] reporting state %{public}s (%{public}@)", v99, 0x2Au);
          }
        }
        uint64_t v57 = (void *)*((void *)v94 + 5);
        dispatch_qos_class_t v58 = *((_DWORD *)v51 + 18);
        block[0] = MEMORY[0x1E4F143A8];
        block[1] = 3221225472;
        block[2] = ___ZL30nw_listener_set_state_on_queueP22NWConcrete_nw_listener19nw_listener_state_tPU22objcproto11OS_nw_error8NSObject_block_invoke_202;
        block[3] = &unk_1E5242B38;
        uint64_t v75 = &v87;
        id v74 = v52;
        id v59 = v57;
        dispatch_block_t v60 = dispatch_block_create_with_qos_class((dispatch_block_flags_t)0, v58, 0, block);
        dispatch_async(v59, v60);
      }
      else if (nw_context_is_inline(*((void **)v5 + 3)))
      {
        uint64_t v61 = *((void *)v5 + 2);
        if (v61 && !nw_path_parameters_get_logging_disabled(*(void *)(v61 + 104)))
        {
          if (__nwlog_listener_log::onceToken != -1) {
            dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_40_44887);
          }
          BOOL v62 = (id)glistenerLogObj;
          if (os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
          {
            unsigned int v63 = v51;

            BOOL v64 = off_1E523D0E0[a2];
            *(_DWORD *)uint64_t v99 = 136446978;
            uint64_t v100 = "nw_listener_set_state_on_queue";
            __int16 v101 = 2082;
            char v102 = (char *)v63 + 42;
            __int16 v103 = 2082;
            id v104 = v64;
            __int16 v105 = 2114;
            id v106 = v50;
            _os_log_impl(&dword_1830D4000, v62, OS_LOG_TYPE_DEFAULT, "%{public}s [%{public}s] reporting state %{public}s (%{public}@) inline", v99, 0x2Au);
          }
        }
        nw_utilities_execute_block_as_persona_from_parameters((void *)v88[5], v52);
      }
    }
    _Block_object_dispose(&v87, 8);

    _Block_object_dispose(type, 8);
    _Block_object_dispose(buf, 8);

    goto LABEL_98;
  }
  uint64_t v14 = *((void *)v5 + 2);
  if (!v14 || nw_path_parameters_get_logging_disabled(*(void *)(v14 + 104))) {
    goto LABEL_98;
  }
  if (__nwlog_listener_log::onceToken != -1) {
    dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_40_44887);
  }
  id v15 = (id)glistenerLogObj;
  uint64_t v16 = v5;

  uint64_t v17 = v5[32];
  if (v17 > 4) {
    uint64_t v18 = "<unknown>";
  }
  else {
    uint64_t v18 = off_1E523D0E0[v17];
  }
  BOOL v27 = off_1E523D0E0[a2];
  *(_DWORD *)buf = 136446978;
  *(void *)&uint8_t buf[4] = "nw_listener_set_state_on_queue";
  *(_WORD *)&unsigned char buf[12] = 2082;
  *(void *)&buf[14] = (char *)v16 + 42;
  *(_WORD *)&buf[22] = 2082;
  long long v108 = (void *(*)(uint64_t, uint64_t))v18;
  *(_WORD *)v109 = 2082;
  long long v72 = v27;
  *(void *)&v109[2] = v27;
  uint64_t v28 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  LOBYTE(v87) = 0;
  if (__nwlog_fault(v28, type, &v87))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      if (__nwlog_listener_log::onceToken != -1) {
        dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_40_44887);
      }
      uint64_t v29 = (id)glistenerLogObj;
      os_log_type_t v30 = type[0];
      if (os_log_type_enabled(v29, type[0]))
      {

        uint64_t v31 = v5[32];
        if (v31 > 4) {
          id v32 = "<unknown>";
        }
        else {
          id v32 = off_1E523D0E0[v31];
        }
        *(_DWORD *)buf = 136446978;
        *(void *)&uint8_t buf[4] = "nw_listener_set_state_on_queue";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = (char *)v16 + 42;
        *(_WORD *)&buf[22] = 2082;
        long long v108 = (void *(*)(uint64_t, uint64_t))v32;
        *(_WORD *)v109 = 2082;
        *(void *)&v109[2] = v72;
        _os_log_impl(&dword_1830D4000, v29, v30, "%{public}s [%{public}s] Invalid state transition: %{public}s -> %{public}s", buf, 0x2Au);
      }
    }
    else if ((_BYTE)v87)
    {
      backtrace_string = __nw_create_backtrace_string();
      if (backtrace_string)
      {
        os_log_type_t v34 = (char *)backtrace_string;
        if (__nwlog_listener_log::onceToken != -1) {
          dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_40_44887);
        }
        uint64_t v35 = (id)glistenerLogObj;
        os_log_type_t v36 = type[0];
        if (os_log_type_enabled(v35, type[0]))
        {

          uint64_t v37 = v5[32];
          if (v37 > 4) {
            os_log_type_t v38 = "<unknown>";
          }
          else {
            os_log_type_t v38 = off_1E523D0E0[v37];
          }
          *(_DWORD *)buf = 136447234;
          *(void *)&uint8_t buf[4] = "nw_listener_set_state_on_queue";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = (char *)v16 + 42;
          *(_WORD *)&buf[22] = 2082;
          long long v108 = (void *(*)(uint64_t, uint64_t))v38;
          *(_WORD *)v109 = 2082;
          *(void *)&v109[2] = v72;
          *(_WORD *)&unsigned char v109[10] = 2082;
          *(void *)&v109[12] = v34;
          _os_log_impl(&dword_1830D4000, v35, v36, "%{public}s [%{public}s] Invalid state transition: %{public}s -> %{public}s, dumping backtrace:%{public}s", buf, 0x34u);
        }

        free(v34);
        if (v28) {
          goto LABEL_97;
        }
        goto LABEL_98;
      }
      if (__nwlog_listener_log::onceToken != -1) {
        dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_40_44887);
      }
      uint64_t v29 = (id)glistenerLogObj;
      os_log_type_t v68 = type[0];
      if (os_log_type_enabled(v29, type[0]))
      {
        BOOL v69 = nw_listener_get_id_string(v16);
        uint64_t v70 = v5[32];
        if (v70 > 4) {
          os_log_type_t v71 = "<unknown>";
        }
        else {
          os_log_type_t v71 = off_1E523D0E0[v70];
        }
        *(_DWORD *)buf = 136446978;
        *(void *)&uint8_t buf[4] = "nw_listener_set_state_on_queue";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = v69;
        *(_WORD *)&buf[22] = 2082;
        long long v108 = (void *(*)(uint64_t, uint64_t))v71;
        *(_WORD *)v109 = 2082;
        *(void *)&v109[2] = v72;
        _os_log_impl(&dword_1830D4000, v29, v68, "%{public}s [%{public}s] Invalid state transition: %{public}s -> %{public}s, no backtrace", buf, 0x2Au);
      }
    }
    else
    {
      if (__nwlog_listener_log::onceToken != -1) {
        dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_40_44887);
      }
      uint64_t v29 = (id)glistenerLogObj;
      os_log_type_t v65 = type[0];
      if (os_log_type_enabled(v29, type[0]))
      {

        uint64_t v66 = v5[32];
        if (v66 > 4) {
          uint64_t v67 = "<unknown>";
        }
        else {
          uint64_t v67 = off_1E523D0E0[v66];
        }
        *(_DWORD *)buf = 136446978;
        *(void *)&uint8_t buf[4] = "nw_listener_set_state_on_queue";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = (char *)v16 + 42;
        *(_WORD *)&buf[22] = 2082;
        long long v108 = (void *(*)(uint64_t, uint64_t))v67;
        *(_WORD *)v109 = 2082;
        *(void *)&v109[2] = v72;
        _os_log_impl(&dword_1830D4000, v29, v65, "%{public}s [%{public}s] Invalid state transition: %{public}s -> %{public}s, backtrace limit exceeded", buf, 0x2Au);
      }
    }
  }
  if (v28) {
LABEL_97:
  }
    free(v28);
LABEL_98:
}

void sub_1833E6420(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,id a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,id a48)
{
  _Block_object_dispose(&a37, 8);
  _Block_object_dispose(&a43, 8);

  _Block_object_dispose((const void *)(v51 - 192), 8);
  _Unwind_Resume(a1);
}

BOOL nw_path_listener_uses_nexus_only(void *a1)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  BOOL v2 = v1;
  if (!v1)
  {
    uint64_t v8 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v27 = "nw_path_listener_uses_nexus_only";
    size_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (__nwlog_fault(v9, &type, &v24))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        id v10 = __nwlog_obj();
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v27 = "nw_path_listener_uses_nexus_only";
          _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null path", buf, 0xCu);
        }
      }
      else if (v24)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        id v10 = __nwlog_obj();
        os_log_type_t v13 = type;
        BOOL v14 = os_log_type_enabled(v10, type);
        if (backtrace_string)
        {
          if (v14)
          {
            *(_DWORD *)buf = 136446466;
            BOOL v27 = "nw_path_listener_uses_nexus_only";
            __int16 v28 = 2082;
            uint64_t v29 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_36;
        }
        if (v14)
        {
          *(_DWORD *)buf = 136446210;
          BOOL v27 = "nw_path_listener_uses_nexus_only";
          _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null path, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        id v10 = __nwlog_obj();
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v27 = "nw_path_listener_uses_nexus_only";
          _os_log_impl(&dword_1830D4000, v10, v19, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_36:
    if (v9) {
      free(v9);
    }
    goto LABEL_3;
  }
  if ((*((unsigned char *)v1 + 475) & 1) == 0)
  {
LABEL_3:
    BOOL v3 = 0;
    goto LABEL_12;
  }
  if (*((unsigned char *)v1 + 386)) {
    goto LABEL_11;
  }
  id v4 = v1[2];
  if (v4)
  {
    uint64_t v5 = v4[12];

    if ((v5 & 0x10000000) == 0) {
      goto LABEL_7;
    }
LABEL_11:
    BOOL v3 = 1;
    goto LABEL_12;
  }
  id v15 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v27 = "nw_parameters_get_never_open_listener_socket";
  uint64_t v16 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v24 = 0;
  if (__nwlog_fault(v16, &type, &v24))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v17 = __nwlog_obj();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v17, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v27 = "nw_parameters_get_never_open_listener_socket";
        _os_log_impl(&dword_1830D4000, v17, v18, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v24)
    {
      BOOL v20 = (char *)__nw_create_backtrace_string();
      uint64_t v17 = __nwlog_obj();
      os_log_type_t v21 = type;
      BOOL v22 = os_log_type_enabled(v17, type);
      if (v20)
      {
        if (v22)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v27 = "nw_parameters_get_never_open_listener_socket";
          __int16 v28 = 2082;
          uint64_t v29 = v20;
          _os_log_impl(&dword_1830D4000, v17, v21, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v20);
        goto LABEL_49;
      }
      if (v22)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v27 = "nw_parameters_get_never_open_listener_socket";
        _os_log_impl(&dword_1830D4000, v17, v21, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v17 = __nwlog_obj();
      os_log_type_t v23 = type;
      if (os_log_type_enabled(v17, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v27 = "nw_parameters_get_never_open_listener_socket";
        _os_log_impl(&dword_1830D4000, v17, v23, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_49:
  if (v16) {
    free(v16);
  }
LABEL_7:
  if (*((_DWORD *)v2 + 94) != 1) {
    goto LABEL_3;
  }
  nw_interface_t v6 = nw_parameters_copy_required_interface((nw_parameters_t)v2[2]);
  BOOL v3 = v6 && !*((_DWORD *)v2 + 80) && nw_path_uses_nexus_internal((NWConcrete_nw_path *)v2, 1);

LABEL_12:
  return v3;
}

void sub_1833E69AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id nw_path_copy_proxy_configs(void *a1)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  BOOL v2 = v1;
  if (v1)
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x3032000000;
    BOOL v20 = __Block_byref_object_copy__68682;
    os_log_type_t v21 = __Block_byref_object_dispose__68683;
    id v22 = 0;
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 3221225472;
    v14[2] = __nw_path_copy_proxy_configs_block_invoke;
    v14[3] = &unk_1E524B978;
    id v15 = (os_unfair_lock_s *)v1;
    uint64_t v16 = buf;
    BOOL v3 = v15 + 2;
    os_unfair_lock_lock(v15 + 2);
    __nw_path_copy_proxy_configs_block_invoke((uint64_t)v14);
    os_unfair_lock_unlock(v3);
    id v4 = *(id *)(*(void *)&buf[8] + 40);

    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  nw_interface_t v6 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_path_copy_proxy_configs";
  unsigned int v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v17 = 0;
  if (__nwlog_fault(v7, &type, &v17))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_path_copy_proxy_configs";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null path", buf, 0xCu);
      }
    }
    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v8 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_path_copy_proxy_configs";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_path_copy_proxy_configs";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_path_copy_proxy_configs";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v7) {
    free(v7);
  }
  id v4 = 0;
LABEL_3:

  return v4;
}

void sub_1833E6D30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id a26)
{
  _Block_object_dispose(&a21, 8);
  _Unwind_Resume(a1);
}

uint64_t nw_parameters_get_disable_listener_datapath(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  BOOL v2 = v1;
  if (v1)
  {
    uint64_t v3 = (v1[99] >> 5) & 1;
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v16 = "nw_parameters_get_disable_listener_datapath";
  nw_interface_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      unsigned int v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v16 = "nw_parameters_get_disable_listener_datapath";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      unsigned int v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v16 = "nw_parameters_get_disable_listener_datapath";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v16 = "nw_parameters_get_disable_listener_datapath";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      unsigned int v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v16 = "nw_parameters_get_disable_listener_datapath";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

id nw_parameters_copy_custom_proxy_configs(void *a1)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  BOOL v2 = v1;
  if (v1)
  {
    uint64_t v3 = nw_context_copy_proxy_configs(*(void **)(v1[13] + 136));
    id v4 = v3;
    uint64_t v5 = (void *)v2[22];
    if (v3) {
      id combined_array = nw_array_create_combined_array(v3, v5);
    }
    else {
      id combined_array = v5;
    }
    id v7 = combined_array;

    goto LABEL_6;
  }
  os_log_type_t v9 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v20 = "nw_parameters_copy_custom_proxy_configs";
  os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v17 = 0;
  if (__nwlog_fault(v10, &type, &v17))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v20 = "nw_parameters_copy_custom_proxy_configs";
        _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v11 = __nwlog_obj();
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v20 = "nw_parameters_copy_custom_proxy_configs";
          __int16 v21 = 2082;
          id v22 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v11, v14, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v20 = "nw_parameters_copy_custom_proxy_configs";
        _os_log_impl(&dword_1830D4000, v11, v14, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v11 = __nwlog_obj();
      os_log_type_t v16 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v20 = "nw_parameters_copy_custom_proxy_configs";
        _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_23:
  if (v10) {
    free(v10);
  }
  id v7 = 0;
LABEL_6:

  return v7;
}

void sub_1833E72C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *nw_context_copy_proxy_configs(void *a1)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  BOOL v2 = v1;
  if (v1)
  {
    if ((v1[34]._os_unfair_lock_opaque & 0x48) == 0x40 && !dispatch_workloop_is_current())
    {
      os_unfair_lock_lock(v2 + 20);
      nw_interface_t v6 = *(void **)&v2[14]._os_unfair_lock_opaque;
      if (!v6 || v6[2] == v6[3])
      {
        BOOL v7 = nw_context_copy_globals_context((NWConcrete_nw_context *)v2);
        id v4 = *(id *)(v7 + 56);
      }
      else
      {
        id v4 = v6;
      }
      os_unfair_lock_unlock(v2 + 20);
    }
    else
    {
      uint64_t v3 = *(void **)&v2[14]._os_unfair_lock_opaque;
      if (!v3 || v3[2] == v3[3])
      {
        BOOL v5 = nw_context_copy_globals_context((NWConcrete_nw_context *)v2);
        id v4 = *(id *)(v5 + 56);
      }
      else
      {
        id v4 = v3;
      }
    }
    goto LABEL_13;
  }
  os_log_type_t v9 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v20 = "nw_context_copy_proxy_configs";
  os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v17 = 0;
  if (__nwlog_fault(v10, &type, &v17))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v20 = "nw_context_copy_proxy_configs";
        _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s called with null context", buf, 0xCu);
      }
    }
    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v11 = __nwlog_obj();
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v20 = "nw_context_copy_proxy_configs";
          __int16 v21 = 2082;
          id v22 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v11, v14, "%{public}s called with null context, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_30;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v20 = "nw_context_copy_proxy_configs";
        _os_log_impl(&dword_1830D4000, v11, v14, "%{public}s called with null context, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v11 = __nwlog_obj();
      os_log_type_t v16 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v20 = "nw_context_copy_proxy_configs";
        _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s called with null context, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_30:
  if (v10) {
    free(v10);
  }
  id v4 = 0;
LABEL_13:

  return v4;
}

void sub_1833E7614(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __nw_path_copy_proxy_configs_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(v2 + 232);
  if (v3)
  {
    if ((*(unsigned char *)(v2 + 476) & 4) != 0 || (id v4 = *(void **)(v2 + 240)) == 0)
    {
      objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), v3);
      return;
    }
    id v5 = v4;
  }
  else
  {
    id v5 = *(id *)(v2 + 240);
    if (!v5) {
      return;
    }
  }
  applier[0] = MEMORY[0x1E4F143A8];
  applier[1] = 3221225472;
  applier[2] = __nw_path_copy_proxy_configs_block_invoke_2;
  applier[3] = &unk_1E524B4A0;
  id v7 = *(id *)(a1 + 32);
  xpc_array_apply(v5, applier);
  *(unsigned char *)(*(void *)(a1 + 32) + 476) |= 4u;
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), *(id *)(*(void *)(a1 + 32) + 232));
}

void sub_1833E772C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void ___ZL30nw_listener_set_state_on_queueP22NWConcrete_nw_listener19nw_listener_state_tPU22objcproto11OS_nw_error8NSObject_block_invoke(uint64_t a1)
{
  *(_DWORD *)(*(void *)(a1 + 32) + 128) = *(_DWORD *)(a1 + 64);
  uint64_t v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 80));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), *(id *)(*(void *)(a1 + 32) + 64));
  id v5 = *(id *)(*(void *)(a1 + 32) + 16);
  BOOL v6 = -[NWConcrete_nw_parameters initWithParameters:stripConnected:shallowCopy:]((id *)[NWConcrete_nw_parameters alloc], v5, 0, 0);

  uint64_t v7 = *(void *)(*(void *)(a1 + 56) + 8);
  os_log_type_t v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v6;
}

void sub_1833E7804(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id nw_listener_find_socket_inbox_match_on_queue(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  nw_context_assert_queue(*((void **)v3 + 3));
  uint64_t v13 = 0;
  os_log_type_t v14 = &v13;
  uint64_t v15 = 0x3032000000;
  os_log_type_t v16 = __Block_byref_object_copy__18063;
  char v17 = __Block_byref_object_dispose__18064;
  id v18 = 0;
  id v5 = (atomic_uchar *)*((void *)v3 + 18);
  if (v5)
  {
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 3221225472;
    v9[2] = ___ZL44nw_listener_find_socket_inbox_match_on_queueP22NWConcrete_nw_listenerPU27objcproto16OS_nw_parameters8NSObject_block_invoke;
    v9[3] = &unk_1E5244660;
    id v10 = v4;
    id v11 = v3;
    os_log_type_t v12 = &v13;
    nw_array_apply(v5, (uint64_t)v9);

    BOOL v6 = (void *)v14[5];
  }
  else
  {
    BOOL v6 = 0;
  }
  id v7 = v6;
  _Block_object_dispose(&v13, 8);

  return v7;
}

void sub_1833E7948(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_listener_set_local_endpoint_on_queue(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  nw_context_assert_queue(*((void **)v3 + 3));
  if (v4)
  {
    id v5 = v4;
    __int16 v6 = __rev16([v5 port]);
  }
  else
  {
    __int16 v6 = 0;
  }
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3221225472;
  aBlock[2] = ___ZL39nw_listener_set_local_endpoint_on_queueP22NWConcrete_nw_listenerPU25objcproto14OS_nw_endpoint8NSObject_block_invoke;
  aBlock[3] = &unk_1E523D098;
  id v7 = v3;
  id v11 = v7;
  id v8 = v4;
  id v12 = v8;
  __int16 v13 = v6;
  os_log_type_t v9 = (void (**)(void))_Block_copy(aBlock);
  os_unfair_lock_lock((os_unfair_lock_t)v3 + 2);
  v9[2](v9);
  os_unfair_lock_unlock((os_unfair_lock_t)v3 + 2);
}

void sub_1833E7A78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL39nw_listener_set_local_endpoint_on_queueP22NWConcrete_nw_listenerPU25objcproto14OS_nw_endpoint8NSObject_block_invoke(uint64_t a1)
{
  *(_WORD *)(*(void *)(a1 + 32) + 300) = *(_WORD *)(a1 + 48);
}

void nw_listener_start_advertising_on_queue(NWConcrete_nw_listener *a1)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  nw_context_assert_queue(*((void **)v1 + 3));
  if (*((void *)v1 + 33) && *((_DWORD *)v1 + 32) == 2 && (*((unsigned char *)v1 + 302) & 1) == 0 && !*((void *)v1 + 34))
  {
    uint64_t v2 = -[_NWAdvertiser initFor:descriptor:parent:parameters:]((id *)[_NWAdvertiser alloc], v1, *((void **)v1 + 33), 0, *((void **)v1 + 26));
    if (v2)
    {
      *(void *)buf = 0;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x2020000000;
      LOBYTE(v28) = 1;
      aBlock[0] = MEMORY[0x1E4F143A8];
      aBlock[1] = 3221225472;
      aBlock[2] = ___ZL38nw_listener_start_advertising_on_queueP22NWConcrete_nw_listener_block_invoke;
      aBlock[3] = &unk_1E5242570;
      id v22 = v1;
      id v3 = v2;
      uint64_t v23 = v3;
      char v24 = buf;
      id v4 = (void (**)(void))_Block_copy(aBlock);
      os_unfair_lock_lock((os_unfair_lock_t)v1 + 2);
      v4[2](v4);
      os_unfair_lock_unlock((os_unfair_lock_t)v1 + 2);

      if (*(unsigned char *)(*(void *)&buf[8] + 24)) {
        -[_NWAdvertiser start]((uint64_t)v3);
      }

      _Block_object_dispose(buf, 8);
      goto LABEL_39;
    }
    uint64_t v5 = *((void *)v1 + 2);
    if (!v5 || nw_path_parameters_get_logging_disabled(*(void *)(v5 + 104)))
    {
LABEL_39:

      goto LABEL_40;
    }
    if (__nwlog_listener_log::onceToken != -1) {
      dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_40_44887);
    }
    id v6 = (id)glistenerLogObj;
    id v7 = v1;

    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_listener_start_advertising_on_queue";
    *(_WORD *)&unsigned char buf[12] = 2082;
    *(void *)&buf[14] = (char *)v7 + 42;
    id v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (__nwlog_fault(v8, &type, &v25))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        if (__nwlog_listener_log::onceToken != -1) {
          dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_40_44887);
        }
        os_log_type_t v9 = (id)glistenerLogObj;
        os_log_type_t v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          id_string = nw_listener_get_id_string(v7);
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_listener_start_advertising_on_queue";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = id_string;
          _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s [%{public}s] Failed to create advertiser", buf, 0x16u);
        }
      }
      else if (v25)
      {
        backtrace_string = __nw_create_backtrace_string();
        if (backtrace_string)
        {
          __int16 v13 = (char *)backtrace_string;
          if (__nwlog_listener_log::onceToken != -1) {
            dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_40_44887);
          }
          os_log_type_t v14 = (id)glistenerLogObj;
          os_log_type_t v15 = type;
          if (os_log_type_enabled(v14, type))
          {
            os_log_type_t v16 = nw_listener_get_id_string(v7);
            *(_DWORD *)buf = 136446722;
            *(void *)&uint8_t buf[4] = "nw_listener_start_advertising_on_queue";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = v16;
            *(_WORD *)&buf[22] = 2082;
            __int16 v28 = v13;
            _os_log_impl(&dword_1830D4000, v14, v15, "%{public}s [%{public}s] Failed to create advertiser, dumping backtrace:%{public}s", buf, 0x20u);
          }

          free(v13);
          goto LABEL_37;
        }
        if (__nwlog_listener_log::onceToken != -1) {
          dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_40_44887);
        }
        os_log_type_t v9 = (id)glistenerLogObj;
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v9, type))
        {
          BOOL v20 = nw_listener_get_id_string(v7);
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_listener_start_advertising_on_queue";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v20;
          _os_log_impl(&dword_1830D4000, v9, v19, "%{public}s [%{public}s] Failed to create advertiser, no backtrace", buf, 0x16u);
        }
      }
      else
      {
        if (__nwlog_listener_log::onceToken != -1) {
          dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_40_44887);
        }
        os_log_type_t v9 = (id)glistenerLogObj;
        os_log_type_t v17 = type;
        if (os_log_type_enabled(v9, type))
        {
          id v18 = nw_listener_get_id_string(v7);
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_listener_start_advertising_on_queue";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v18;
          _os_log_impl(&dword_1830D4000, v9, v17, "%{public}s [%{public}s] Failed to create advertiser, backtrace limit exceeded", buf, 0x16u);
        }
      }
    }
LABEL_37:
    if (v8) {
      free(v8);
    }
    goto LABEL_39;
  }
LABEL_40:
}

void sub_1833E7FEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL nw_array_create_by_removal(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v5 = nw_array_create();
    uint64_t v6 = v5;
    if (a2)
    {
      id v8 = *(void ***)(a1 + 16);
      id v7 = *(void ***)(a1 + 24);
      while (v8 != v7)
      {
        os_log_type_t v9 = *v8;
        if (*v8)
        {
          id v11 = *(void ***)(a2 + 16);
          os_log_type_t v10 = *(void ***)(a2 + 24);
          if (v11 != v10)
          {
            while (*v11 != v9)
            {
              if (++v11 == v10)
              {
                id v11 = *(void ***)(a2 + 24);
                break;
              }
            }
          }
          if (v11 == v10) {
            nw_array_append(v6, v9);
          }
        }
        ++v8;
      }
    }
    else if (v5 == a1)
    {
      return a1;
    }
    else
    {
      std::vector<nw_object_wrapper_t>::__assign_with_size[abi:nn180100]<nw_object_wrapper_t*,nw_object_wrapper_t*>(v5 + 16, *(void ***)(a1 + 16), *(void ***)(a1 + 24), (uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 3);
    }
    return v6;
  }
  else
  {
    return nw_array_create();
  }
}

void sub_1833E818C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_quic_access_token_on_queue(void *a1, void *a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  if (v3)
  {
    if (nw_protocol_copy_quic_connection_definition::onceToken != -1) {
      dispatch_once(&nw_protocol_copy_quic_connection_definition::onceToken, &__block_literal_global_55981);
    }
    id v5 = (id)nw_protocol_copy_quic_connection_definition::quic_definition;
    if (v5)
    {
      cached_content_for_protocol = (uint64_t *)nw_association_get_cached_content_for_protocol(v3, v5);
      if (cached_content_for_protocol) {
        uint64_t v7 = *cached_content_for_protocol;
      }
      else {
        uint64_t v7 = 0;
      }
      v4[2](v4, v7);
LABEL_9:

      goto LABEL_10;
    }
    id v12 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v27 = "nw_quic_access_token_on_queue";
    __int16 v13 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (__nwlog_fault(v13, &type, &v24))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v14 = __nwlog_obj();
        os_log_type_t v15 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v27 = "nw_quic_access_token_on_queue";
          _os_log_impl(&dword_1830D4000, v14, v15, "%{public}s called with null definition", buf, 0xCu);
        }
      }
      else if (v24)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v14 = __nwlog_obj();
        os_log_type_t v20 = type;
        BOOL v21 = os_log_type_enabled(v14, type);
        if (backtrace_string)
        {
          if (v21)
          {
            *(_DWORD *)buf = 136446466;
            BOOL v27 = "nw_quic_access_token_on_queue";
            __int16 v28 = 2082;
            uint64_t v29 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v14, v20, "%{public}s called with null definition, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_45;
        }
        if (v21)
        {
          *(_DWORD *)buf = 136446210;
          BOOL v27 = "nw_quic_access_token_on_queue";
          _os_log_impl(&dword_1830D4000, v14, v20, "%{public}s called with null definition, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        os_log_type_t v14 = __nwlog_obj();
        os_log_type_t v23 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v27 = "nw_quic_access_token_on_queue";
          _os_log_impl(&dword_1830D4000, v14, v23, "%{public}s called with null definition, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_45:
    if (v13) {
      free(v13);
    }
    goto LABEL_9;
  }
  id v8 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v27 = "nw_quic_access_token_on_queue";
  os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v24 = 0;
  if (__nwlog_fault(v9, &type, &v24))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v27 = "nw_quic_access_token_on_queue";
        _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null association", buf, 0xCu);
      }
    }
    else if (v24)
    {
      os_log_type_t v16 = (char *)__nw_create_backtrace_string();
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v17 = type;
      BOOL v18 = os_log_type_enabled(v10, type);
      if (v16)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v27 = "nw_quic_access_token_on_queue";
          __int16 v28 = 2082;
          uint64_t v29 = v16;
          _os_log_impl(&dword_1830D4000, v10, v17, "%{public}s called with null association, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v16);
        goto LABEL_40;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v27 = "nw_quic_access_token_on_queue";
        _os_log_impl(&dword_1830D4000, v10, v17, "%{public}s called with null association, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v22 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v27 = "nw_quic_access_token_on_queue";
        _os_log_impl(&dword_1830D4000, v10, v22, "%{public}s called with null association, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_40:
  if (v9) {
    free(v9);
  }
LABEL_10:
}

void sub_1833E86B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_quic_access_0rtt_state_on_queue(void *a1, void *a2)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  if (v3)
  {
    if (nw_protocol_copy_quic_connection_definition::onceToken != -1) {
      dispatch_once(&nw_protocol_copy_quic_connection_definition::onceToken, &__block_literal_global_55981);
    }
    id v5 = (id)nw_protocol_copy_quic_connection_definition::quic_definition;
    if (v5)
    {
      uint64_t cached_content_for_protocol = nw_association_get_cached_content_for_protocol(v3, v5);
      if (cached_content_for_protocol)
      {
        uint64_t v7 = *(void *)(cached_content_for_protocol + 8);
        uint64_t v8 = *(void *)(cached_content_for_protocol + 16);
      }
      else
      {
        uint64_t v7 = 0;
        uint64_t v8 = 0;
      }
      v4[2](v4, v7, v8);
LABEL_9:

      goto LABEL_10;
    }
    __int16 v13 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v28 = "nw_quic_access_0rtt_state_on_queue";
    os_log_type_t v14 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (__nwlog_fault(v14, &type, &v25))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v15 = __nwlog_obj();
        os_log_type_t v16 = type;
        if (os_log_type_enabled(v15, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v28 = "nw_quic_access_0rtt_state_on_queue";
          _os_log_impl(&dword_1830D4000, v15, v16, "%{public}s called with null definition", buf, 0xCu);
        }
      }
      else if (v25)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v15 = __nwlog_obj();
        os_log_type_t v21 = type;
        BOOL v22 = os_log_type_enabled(v15, type);
        if (backtrace_string)
        {
          if (v22)
          {
            *(_DWORD *)buf = 136446466;
            __int16 v28 = "nw_quic_access_0rtt_state_on_queue";
            __int16 v29 = 2082;
            uint64_t v30 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v15, v21, "%{public}s called with null definition, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_45;
        }
        if (v22)
        {
          *(_DWORD *)buf = 136446210;
          __int16 v28 = "nw_quic_access_0rtt_state_on_queue";
          _os_log_impl(&dword_1830D4000, v15, v21, "%{public}s called with null definition, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        os_log_type_t v15 = __nwlog_obj();
        os_log_type_t v24 = type;
        if (os_log_type_enabled(v15, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v28 = "nw_quic_access_0rtt_state_on_queue";
          _os_log_impl(&dword_1830D4000, v15, v24, "%{public}s called with null definition, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_45:
    if (v14) {
      free(v14);
    }
    goto LABEL_9;
  }
  os_log_type_t v9 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v28 = "nw_quic_access_0rtt_state_on_queue";
  os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v25 = 0;
  if (__nwlog_fault(v10, &type, &v25))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v28 = "nw_quic_access_0rtt_state_on_queue";
        _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s called with null association", buf, 0xCu);
      }
    }
    else if (v25)
    {
      os_log_type_t v17 = (char *)__nw_create_backtrace_string();
      os_log_type_t v11 = __nwlog_obj();
      os_log_type_t v18 = type;
      BOOL v19 = os_log_type_enabled(v11, type);
      if (v17)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v28 = "nw_quic_access_0rtt_state_on_queue";
          __int16 v29 = 2082;
          uint64_t v30 = v17;
          _os_log_impl(&dword_1830D4000, v11, v18, "%{public}s called with null association, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v17);
        goto LABEL_40;
      }
      if (v19)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v28 = "nw_quic_access_0rtt_state_on_queue";
        _os_log_impl(&dword_1830D4000, v11, v18, "%{public}s called with null association, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v11 = __nwlog_obj();
      os_log_type_t v23 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v28 = "nw_quic_access_0rtt_state_on_queue";
        _os_log_impl(&dword_1830D4000, v11, v23, "%{public}s called with null association, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_40:
  if (v10) {
    free(v10);
  }
LABEL_10:
}

void sub_1833E8BE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *nw_establishment_report_copy_dictionary(void *a1)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
    id v3 = v2;
    uint64_t v4 = *((void *)v1 + 1);
    if (v4) {
      xpc_dictionary_set_uint64(v2, "attempt_started_after_milliseconds", v4);
    }
    uint64_t v5 = *((void *)v1 + 2);
    if (v5) {
      xpc_dictionary_set_uint64(v3, "duration_milliseconds", v5);
    }
    uint64_t v6 = *((void *)v1 + 3);
    if (v6) {
      xpc_dictionary_set_uint64(v3, "resolution_started_after_milliseconds", v6);
    }
    uint64_t v7 = *((void *)v1 + 4);
    if (v7) {
      xpc_dictionary_set_uint64(v3, "flow_started_after_milliseconds", v7);
    }
    xpc_object_t v8 = xpc_array_create(0, 0);
    os_log_type_t v9 = (atomic_uchar *)*((void *)v1 + 5);
    v37[0] = MEMORY[0x1E4F143A8];
    v37[1] = 3221225472;
    v37[2] = __nw_establishment_report_copy_dictionary_block_invoke;
    v37[3] = &unk_1E524AE18;
    id v10 = v8;
    id v38 = v10;
    nw_array_apply(v9, (uint64_t)v37);
    xpc_dictionary_set_value(v3, "proxy_endpoints", v10);
    xpc_object_t v11 = xpc_array_create(0, 0);
    os_log_type_t v12 = (atomic_uchar *)*((void *)v1 + 6);
    v35[0] = MEMORY[0x1E4F143A8];
    v35[1] = 3221225472;
    v35[2] = __nw_establishment_report_copy_dictionary_block_invoke_2;
    v35[3] = &unk_1E524AE18;
    id v13 = v11;
    id v36 = v13;
    nw_array_apply(v12, (uint64_t)v35);
    xpc_dictionary_set_value(v3, "proxied_next_hop_endpoints", v13);
    uint64_t v14 = v1[20];
    if (v14) {
      xpc_dictionary_set_uint64(v3, "previous_attempt_count", v14);
    }
    char v15 = *((unsigned char *)v1 + 84);
    if (v15)
    {
      xpc_dictionary_set_BOOL(v3, "proxy_configured", 1);
      char v15 = *((unsigned char *)v1 + 84);
    }
    if ((v15 & 2) != 0) {
      xpc_dictionary_set_BOOL(v3, "used_proxy", 1);
    }
    xpc_object_t v16 = xpc_array_create(0, 0);
    os_log_type_t v17 = (atomic_uchar *)*((void *)v1 + 8);
    v33[0] = MEMORY[0x1E4F143A8];
    v33[1] = 3221225472;
    v33[2] = __nw_establishment_report_copy_dictionary_block_invoke_3;
    v33[3] = &unk_1E524AE18;
    id v18 = v16;
    id v34 = v18;
    nw_array_apply(v17, (uint64_t)v33);
    xpc_dictionary_set_value(v3, "protocol_reports", v18);
    xpc_object_t v19 = xpc_array_create(0, 0);
    os_log_type_t v20 = (atomic_uchar *)*((void *)v1 + 9);
    v31[0] = MEMORY[0x1E4F143A8];
    v31[1] = 3221225472;
    v31[2] = __nw_establishment_report_copy_dictionary_block_invoke_4;
    v31[3] = &unk_1E524AE18;
    id v21 = v19;
    id v32 = v21;
    nw_array_apply(v20, (uint64_t)v31);
    xpc_dictionary_set_value(v3, "resolution_reports", v21);

    goto LABEL_17;
  }
  os_log_type_t v23 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v42 = "nw_establishment_report_copy_dictionary";
  os_log_type_t v24 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t v40 = OS_LOG_TYPE_ERROR;
  char v39 = 0;
  if (__nwlog_fault(v24, &v40, &v39))
  {
    if (v40 == OS_LOG_TYPE_FAULT)
    {
      char v25 = __nwlog_obj();
      os_log_type_t v26 = v40;
      if (os_log_type_enabled(v25, v40))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v42 = "nw_establishment_report_copy_dictionary";
        _os_log_impl(&dword_1830D4000, v25, v26, "%{public}s called with null report", buf, 0xCu);
      }
    }
    else if (v39)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      char v25 = __nwlog_obj();
      os_log_type_t v28 = v40;
      BOOL v29 = os_log_type_enabled(v25, v40);
      if (backtrace_string)
      {
        if (v29)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v42 = "nw_establishment_report_copy_dictionary";
          __int16 v43 = 2082;
          uint64_t v44 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v25, v28, "%{public}s called with null report, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_34;
      }
      if (v29)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v42 = "nw_establishment_report_copy_dictionary";
        _os_log_impl(&dword_1830D4000, v25, v28, "%{public}s called with null report, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      char v25 = __nwlog_obj();
      os_log_type_t v30 = v40;
      if (os_log_type_enabled(v25, v40))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v42 = "nw_establishment_report_copy_dictionary";
        _os_log_impl(&dword_1830D4000, v25, v30, "%{public}s called with null report, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_34:
  if (v24) {
    free(v24);
  }
  id v3 = 0;
LABEL_17:

  return v3;
}

void sub_1833E9158(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_utilities_get_self_bundle_id_block_invoke()
{
  uint64_t result = (uint64_t)CFBundleGetMainBundle();
  if (result)
  {
    uint64_t result = (uint64_t)CFBundleGetValueForInfoDictionaryKey((CFBundleRef)result, (CFStringRef)*MEMORY[0x1E4F1CFF8]);
    if (result)
    {
      CFStringRef v1 = (const __CFString *)result;
      uint64_t result = CFStringGetLength((CFStringRef)result);
      if (result >= 1)
      {
        uint64_t result = nw_utilities_create_c_string_from_cfstring(v1);
        nw_utilities_get_self_bundle_id::bundle_identifier_string = result;
      }
    }
  }
  return result;
}

uint64_t nw_utilities_create_c_string_from_cfstring(const __CFString *a1)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    os_log_type_t v26 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    id v32 = "nw_utilities_create_c_string_from_cfstring";
    uint64_t v5 = _os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v29 = 0;
    if (!__nwlog_fault((const char *)v5, &type, &v29))
    {
LABEL_28:
      if (!v5) {
        return 0;
      }
      goto LABEL_40;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (!os_log_type_enabled(v12, type)) {
        goto LABEL_27;
      }
      *(_DWORD *)buf = 136446210;
      id v32 = "nw_utilities_create_c_string_from_cfstring";
      uint64_t v14 = "%{public}s called with null stringRef";
    }
    else if (v29)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v13 = type;
      BOOL v28 = os_log_type_enabled(v12, type);
      if (backtrace_string)
      {
        if (v28)
        {
          *(_DWORD *)buf = 136446466;
          id v32 = "nw_utilities_create_c_string_from_cfstring";
          __int16 v33 = 2082;
          id v34 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s called with null stringRef, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        if (!v5) {
          return 0;
        }
        goto LABEL_40;
      }
      if (!v28) {
        goto LABEL_27;
      }
      *(_DWORD *)buf = 136446210;
      id v32 = "nw_utilities_create_c_string_from_cfstring";
      uint64_t v14 = "%{public}s called with null stringRef, no backtrace";
    }
    else
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (!os_log_type_enabled(v12, type)) {
        goto LABEL_27;
      }
      *(_DWORD *)buf = 136446210;
      id v32 = "nw_utilities_create_c_string_from_cfstring";
      uint64_t v14 = "%{public}s called with null stringRef, backtrace limit exceeded";
    }
    goto LABEL_25;
  }
  CFIndex Length = CFStringGetLength(a1);
  CFIndex MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
  if (MaximumSizeForEncoding == -1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v11 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    id v32 = "nw_utilities_create_c_string_from_cfstring";
    uint64_t v5 = _os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v29 = 0;
    if (!__nwlog_fault((const char *)v5, &type, &v29)) {
      goto LABEL_28;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v12 = (id)gLogObj;
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        id v32 = "nw_utilities_create_c_string_from_cfstring";
        uint64_t v14 = "%{public}s CFStringGetMaximumSizeForEncoding failed";
LABEL_25:
        id v21 = v12;
        os_log_type_t v22 = v13;
LABEL_26:
        _os_log_impl(&dword_1830D4000, v21, v22, v14, buf, 0xCu);
      }
    }
    else
    {
      if (v29)
      {
        char v15 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v12 = (id)gLogObj;
        os_log_type_t v16 = type;
        BOOL v17 = os_log_type_enabled(v12, type);
        if (v15)
        {
          if (v17)
          {
            *(_DWORD *)buf = 136446466;
            id v32 = "nw_utilities_create_c_string_from_cfstring";
            __int16 v33 = 2082;
            id v34 = v15;
            _os_log_impl(&dword_1830D4000, v12, v16, "%{public}s CFStringGetMaximumSizeForEncoding failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v15);
          if (!v5) {
            return 0;
          }
          goto LABEL_40;
        }
        if (!v17) {
          goto LABEL_27;
        }
        *(_DWORD *)buf = 136446210;
        id v32 = "nw_utilities_create_c_string_from_cfstring";
        uint64_t v14 = "%{public}s CFStringGetMaximumSizeForEncoding failed, no backtrace";
        id v21 = v12;
        os_log_type_t v22 = v16;
        goto LABEL_26;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v12 = (id)gLogObj;
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        id v32 = "nw_utilities_create_c_string_from_cfstring";
        uint64_t v14 = "%{public}s CFStringGetMaximumSizeForEncoding failed, backtrace limit exceeded";
        goto LABEL_25;
      }
    }
LABEL_27:

    goto LABEL_28;
  }
  CFIndex v4 = MaximumSizeForEncoding + 1;
  uint64_t v5 = nw_calloc_type<unsigned char>(MaximumSizeForEncoding + 1);
  if (CFStringGetCString(a1, (char *)v5, v4, 0x8000100u)) {
    return v5;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v6 = (id)gLogObj;
  *(_DWORD *)buf = 136446210;
  id v32 = "nw_utilities_create_c_string_from_cfstring";
  uint64_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v29 = 0;
  if (__nwlog_fault(v7, &type, &v29))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      xpc_object_t v8 = (id)gLogObj;
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        id v32 = "nw_utilities_create_c_string_from_cfstring";
        id v10 = "%{public}s CFStringGetCString failed";
LABEL_34:
        os_log_type_t v23 = v8;
        os_log_type_t v24 = v9;
LABEL_35:
        _os_log_impl(&dword_1830D4000, v23, v24, v10, buf, 0xCu);
        goto LABEL_36;
      }
      goto LABEL_36;
    }
    if (!v29)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      xpc_object_t v8 = (id)gLogObj;
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        id v32 = "nw_utilities_create_c_string_from_cfstring";
        id v10 = "%{public}s CFStringGetCString failed, backtrace limit exceeded";
        goto LABEL_34;
      }
LABEL_36:

      goto LABEL_37;
    }
    id v18 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    xpc_object_t v8 = (id)gLogObj;
    os_log_type_t v19 = type;
    BOOL v20 = os_log_type_enabled(v8, type);
    if (!v18)
    {
      if (!v20) {
        goto LABEL_36;
      }
      *(_DWORD *)buf = 136446210;
      id v32 = "nw_utilities_create_c_string_from_cfstring";
      id v10 = "%{public}s CFStringGetCString failed, no backtrace";
      os_log_type_t v23 = v8;
      os_log_type_t v24 = v19;
      goto LABEL_35;
    }
    if (v20)
    {
      *(_DWORD *)buf = 136446466;
      id v32 = "nw_utilities_create_c_string_from_cfstring";
      __int16 v33 = 2082;
      id v34 = v18;
      _os_log_impl(&dword_1830D4000, v8, v19, "%{public}s CFStringGetCString failed, dumping backtrace:%{public}s", buf, 0x16u);
    }

    free(v18);
  }
LABEL_37:
  if (v7) {
    free(v7);
  }
  if (v5)
  {
LABEL_40:
    free((void *)v5);
    return 0;
  }
  return v5;
}

void nw_quic_report_application_result_on_queue(void *a1, int a2)
{
  uint64_t v77 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  if (!v3)
  {
    os_log_type_t v42 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v69 = "nw_quic_report_application_result_on_queue";
    __int16 v43 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v66 = 0;
    if (__nwlog_fault(v43, &type, &v66))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v44 = __nwlog_obj();
        os_log_type_t v45 = type;
        if (os_log_type_enabled(v44, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v69 = "nw_quic_report_application_result_on_queue";
          _os_log_impl(&dword_1830D4000, v44, v45, "%{public}s called with null association", buf, 0xCu);
        }
      }
      else if (v66)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        uint64_t v44 = __nwlog_obj();
        os_log_type_t v51 = type;
        BOOL v52 = os_log_type_enabled(v44, type);
        if (backtrace_string)
        {
          if (v52)
          {
            *(_DWORD *)buf = 136446466;
            BOOL v69 = "nw_quic_report_application_result_on_queue";
            __int16 v70 = 2082;
            os_log_type_t v71 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v44, v51, "%{public}s called with null association, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_100;
        }
        if (v52)
        {
          *(_DWORD *)buf = 136446210;
          BOOL v69 = "nw_quic_report_application_result_on_queue";
          _os_log_impl(&dword_1830D4000, v44, v51, "%{public}s called with null association, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        uint64_t v44 = __nwlog_obj();
        os_log_type_t v60 = type;
        if (os_log_type_enabled(v44, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v69 = "nw_quic_report_application_result_on_queue";
          _os_log_impl(&dword_1830D4000, v44, v60, "%{public}s called with null association, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_100:
    if (v43) {
      free(v43);
    }
    goto LABEL_58;
  }
  if (nw_protocol_copy_quic_connection_definition::onceToken != -1) {
    dispatch_once(&nw_protocol_copy_quic_connection_definition::onceToken, &__block_literal_global_55981);
  }
  id v4 = (id)nw_protocol_copy_quic_connection_definition::quic_definition;
  if (!v4)
  {
    uint64_t v46 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v69 = "nw_quic_report_application_result_on_queue";
    BOOL v47 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v66 = 0;
    if (!__nwlog_fault(v47, &type, &v66)) {
      goto LABEL_111;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v48 = __nwlog_obj();
      os_log_type_t v49 = type;
      if (os_log_type_enabled(v48, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v69 = "nw_quic_report_application_result_on_queue";
        _os_log_impl(&dword_1830D4000, v48, v49, "%{public}s called with null definition", buf, 0xCu);
      }
    }
    else if (v66)
    {
      uint64_t v53 = (char *)__nw_create_backtrace_string();
      uint64_t v48 = __nwlog_obj();
      os_log_type_t v54 = type;
      BOOL v55 = os_log_type_enabled(v48, type);
      if (v53)
      {
        if (v55)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v69 = "nw_quic_report_application_result_on_queue";
          __int16 v70 = 2082;
          os_log_type_t v71 = v53;
          _os_log_impl(&dword_1830D4000, v48, v54, "%{public}s called with null definition, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v53);
LABEL_111:
        if (!v47)
        {
LABEL_57:

LABEL_58:
          return;
        }
LABEL_112:
        free(v47);
        goto LABEL_57;
      }
      if (v55)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v69 = "nw_quic_report_application_result_on_queue";
        _os_log_impl(&dword_1830D4000, v48, v54, "%{public}s called with null definition, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v48 = __nwlog_obj();
      os_log_type_t v61 = type;
      if (os_log_type_enabled(v48, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v69 = "nw_quic_report_application_result_on_queue";
        _os_log_impl(&dword_1830D4000, v48, v61, "%{public}s called with null definition, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_110:

    goto LABEL_111;
  }
  uint64_t cached_content_for_protocol = nw_association_get_cached_content_for_protocol(v3, v4);
  if (cached_content_for_protocol
    || (uint64_t cached_content_for_protocol = (uint64_t)malloc_type_calloc(1uLL, 0x30uLL, 0xEAFB8F1AuLL)) != 0)
  {
    if (a2)
    {
      uint64_t v6 = *(unsigned int *)(cached_content_for_protocol + 36) + 1;
      uint64_t v7 = v6 << 31 >> 31;
      *(_DWORD *)(cached_content_for_protocol + 36) = v6;
      if (v7 == v6 && (v7 & 0x8000000000000000) == 0) {
        goto LABEL_52;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v8 = (id)gLogObj;
      uint64_t v9 = *(unsigned int *)(cached_content_for_protocol + 36);
      *(_DWORD *)buf = 136446978;
      BOOL v69 = "nw_quic_report_application_result_on_queue";
      __int16 v70 = 2082;
      os_log_type_t v71 = "association_cache->application_success_count";
      __int16 v72 = 2048;
      uint64_t v73 = 1;
      __int16 v74 = 2048;
      *(void *)uint64_t v75 = v9;
      id v10 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v66 = 0;
      if (__nwlog_fault(v10, &type, &v66))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          id v11 = (id)gLogObj;
          os_log_type_t v12 = type;
          if (os_log_type_enabled(v11, type))
          {
            uint64_t v13 = *(unsigned int *)(cached_content_for_protocol + 36);
            *(_DWORD *)buf = 136446978;
            BOOL v69 = "nw_quic_report_application_result_on_queue";
            __int16 v70 = 2082;
            os_log_type_t v71 = "association_cache->application_success_count";
            __int16 v72 = 2048;
            uint64_t v73 = 1;
            __int16 v74 = 2048;
            *(void *)uint64_t v75 = v13;
            _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s Overflow: %{public}s, increment %llu, result %llu", buf, 0x2Au);
          }
        }
        else if (v66)
        {
          os_log_type_t v22 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          id v11 = (id)gLogObj;
          os_log_type_t v23 = type;
          BOOL v24 = os_log_type_enabled(v11, type);
          if (v22)
          {
            if (v24)
            {
              uint64_t v25 = *(unsigned int *)(cached_content_for_protocol + 36);
              *(_DWORD *)buf = 136447234;
              BOOL v69 = "nw_quic_report_application_result_on_queue";
              __int16 v70 = 2082;
              os_log_type_t v71 = "association_cache->application_success_count";
              __int16 v72 = 2048;
              uint64_t v73 = 1;
              __int16 v74 = 2048;
              *(void *)uint64_t v75 = v25;
              *(_WORD *)&v75[8] = 2082;
              char v76 = v22;
              _os_log_impl(&dword_1830D4000, v11, v23, "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
            }

            free(v22);
            if (!v10) {
              goto LABEL_45;
            }
            goto LABEL_44;
          }
          if (v24)
          {
            uint64_t v34 = *(unsigned int *)(cached_content_for_protocol + 36);
            *(_DWORD *)buf = 136446978;
            BOOL v69 = "nw_quic_report_application_result_on_queue";
            __int16 v70 = 2082;
            os_log_type_t v71 = "association_cache->application_success_count";
            __int16 v72 = 2048;
            uint64_t v73 = 1;
            __int16 v74 = 2048;
            *(void *)uint64_t v75 = v34;
            _os_log_impl(&dword_1830D4000, v11, v23, "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace", buf, 0x2Au);
          }
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          id v11 = (id)gLogObj;
          os_log_type_t v30 = type;
          if (os_log_type_enabled(v11, type))
          {
            uint64_t v31 = *(unsigned int *)(cached_content_for_protocol + 36);
            *(_DWORD *)buf = 136446978;
            BOOL v69 = "nw_quic_report_application_result_on_queue";
            __int16 v70 = 2082;
            os_log_type_t v71 = "association_cache->application_success_count";
            __int16 v72 = 2048;
            uint64_t v73 = 1;
            __int16 v74 = 2048;
            *(void *)uint64_t v75 = v31;
            _os_log_impl(&dword_1830D4000, v11, v30, "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded", buf, 0x2Au);
          }
        }
      }
      if (!v10)
      {
LABEL_45:
        *(_DWORD *)(cached_content_for_protocol + 36) = -1;
LABEL_52:
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v36 = (id)gLogObj;
        if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v37 = "failure";
          int v38 = *(_DWORD *)(cached_content_for_protocol + 36);
          int v39 = *(_DWORD *)(cached_content_for_protocol + 40);
          if (a2) {
            uint64_t v37 = "success";
          }
          *(_DWORD *)buf = 136447234;
          BOOL v69 = "nw_quic_report_application_result_on_queue";
          __int16 v70 = 2112;
          os_log_type_t v71 = (char *)v3;
          __int16 v72 = 2080;
          uint64_t v73 = (uint64_t)v37;
          __int16 v74 = 1024;
          *(_DWORD *)uint64_t v75 = v38;
          *(_WORD *)&v75[4] = 1024;
          *(_DWORD *)&v75[6] = v39;
          _os_log_impl(&dword_1830D4000, v36, OS_LOG_TYPE_DEBUG, "%{public}s %@ recording %s for QUIC application result, total success: %u, total failure: %u", buf, 0x2Cu);
        }

        int64_t int64_with_default = networkd_settings_get_int64_with_default((const char *)nw_setting_quic_failure_cache_seconds, 1800);
        time_t v41 = time(0);
        nw_association_set_cached_content_for_protocol(v3, v4, cached_content_for_protocol, v41 + int64_with_default);
        goto LABEL_57;
      }
LABEL_44:
      free(v10);
      goto LABEL_45;
    }
    uint64_t v14 = *(unsigned int *)(cached_content_for_protocol + 40) + 1;
    uint64_t v15 = v14 << 31 >> 31;
    *(_DWORD *)(cached_content_for_protocol + 40) = v14;
    if (v15 == v14 && (v15 & 0x8000000000000000) == 0) {
      goto LABEL_52;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v16 = (id)gLogObj;
    uint64_t v17 = *(unsigned int *)(cached_content_for_protocol + 40);
    *(_DWORD *)buf = 136446978;
    BOOL v69 = "nw_quic_report_application_result_on_queue";
    __int16 v70 = 2082;
    os_log_type_t v71 = "association_cache->application_failure_count";
    __int16 v72 = 2048;
    uint64_t v73 = 1;
    __int16 v74 = 2048;
    *(void *)uint64_t v75 = v17;
    id v18 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v66 = 0;
    if (__nwlog_fault(v18, &type, &v66))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v19 = (id)gLogObj;
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v19, type))
        {
          uint64_t v21 = *(unsigned int *)(cached_content_for_protocol + 40);
          *(_DWORD *)buf = 136446978;
          BOOL v69 = "nw_quic_report_application_result_on_queue";
          __int16 v70 = 2082;
          os_log_type_t v71 = "association_cache->application_failure_count";
          __int16 v72 = 2048;
          uint64_t v73 = 1;
          __int16 v74 = 2048;
          *(void *)uint64_t v75 = v21;
          _os_log_impl(&dword_1830D4000, v19, v20, "%{public}s Overflow: %{public}s, increment %llu, result %llu", buf, 0x2Au);
        }
      }
      else if (v66)
      {
        os_log_type_t v26 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v19 = (id)gLogObj;
        os_log_type_t v27 = type;
        BOOL v28 = os_log_type_enabled(v19, type);
        if (v26)
        {
          if (v28)
          {
            uint64_t v29 = *(unsigned int *)(cached_content_for_protocol + 40);
            *(_DWORD *)buf = 136447234;
            BOOL v69 = "nw_quic_report_application_result_on_queue";
            __int16 v70 = 2082;
            os_log_type_t v71 = "association_cache->application_failure_count";
            __int16 v72 = 2048;
            uint64_t v73 = 1;
            __int16 v74 = 2048;
            *(void *)uint64_t v75 = v29;
            *(_WORD *)&v75[8] = 2082;
            char v76 = v26;
            _os_log_impl(&dword_1830D4000, v19, v27, "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
          }

          free(v26);
          if (!v18) {
            goto LABEL_51;
          }
          goto LABEL_50;
        }
        if (v28)
        {
          uint64_t v35 = *(unsigned int *)(cached_content_for_protocol + 40);
          *(_DWORD *)buf = 136446978;
          BOOL v69 = "nw_quic_report_application_result_on_queue";
          __int16 v70 = 2082;
          os_log_type_t v71 = "association_cache->application_failure_count";
          __int16 v72 = 2048;
          uint64_t v73 = 1;
          __int16 v74 = 2048;
          *(void *)uint64_t v75 = v35;
          _os_log_impl(&dword_1830D4000, v19, v27, "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace", buf, 0x2Au);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v19 = (id)gLogObj;
        os_log_type_t v32 = type;
        if (os_log_type_enabled(v19, type))
        {
          uint64_t v33 = *(unsigned int *)(cached_content_for_protocol + 40);
          *(_DWORD *)buf = 136446978;
          BOOL v69 = "nw_quic_report_application_result_on_queue";
          __int16 v70 = 2082;
          os_log_type_t v71 = "association_cache->application_failure_count";
          __int16 v72 = 2048;
          uint64_t v73 = 1;
          __int16 v74 = 2048;
          *(void *)uint64_t v75 = v33;
          _os_log_impl(&dword_1830D4000, v19, v32, "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded", buf, 0x2Au);
        }
      }
    }
    if (!v18)
    {
LABEL_51:
      *(_DWORD *)(cached_content_for_protocol + 40) = -1;
      goto LABEL_52;
    }
LABEL_50:
    free(v18);
    goto LABEL_51;
  }
  long long v56 = __nwlog_obj();
  os_log_type_enabled(v56, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  BOOL v69 = "strict_calloc";
  __int16 v70 = 2048;
  os_log_type_t v71 = (char *)1;
  __int16 v72 = 2048;
  uint64_t v73 = 48;
  uint64_t v57 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v57))
  {
    free(v57);
    dispatch_qos_class_t v58 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v69 = "nw_quic_report_application_result_on_queue";
    BOOL v47 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v66 = 0;
    if (!__nwlog_fault(v47, &type, &v66)) {
      goto LABEL_111;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v48 = __nwlog_obj();
      os_log_type_t v59 = type;
      if (os_log_type_enabled(v48, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v69 = "nw_quic_report_application_result_on_queue";
        _os_log_impl(&dword_1830D4000, v48, v59, "%{public}s called with null association_cache", buf, 0xCu);
      }
    }
    else if (v66)
    {
      BOOL v62 = (char *)__nw_create_backtrace_string();
      uint64_t v48 = __nwlog_obj();
      os_log_type_t v63 = type;
      BOOL v64 = os_log_type_enabled(v48, type);
      if (v62)
      {
        if (v64)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v69 = "nw_quic_report_application_result_on_queue";
          __int16 v70 = 2082;
          os_log_type_t v71 = v62;
          _os_log_impl(&dword_1830D4000, v48, v63, "%{public}s called with null association_cache, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v62);
        if (!v47) {
          goto LABEL_57;
        }
        goto LABEL_112;
      }
      if (v64)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v69 = "nw_quic_report_application_result_on_queue";
        _os_log_impl(&dword_1830D4000, v48, v63, "%{public}s called with null association_cache, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v48 = __nwlog_obj();
      os_log_type_t v65 = type;
      if (os_log_type_enabled(v48, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v69 = "nw_quic_report_application_result_on_queue";
        _os_log_impl(&dword_1830D4000, v48, v65, "%{public}s called with null association_cache, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_110;
  }
  __break(1u);
}

void sub_1833EA92C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_shoes_copy_udp_framer_definition_block_invoke_3(uint64_t a1, void *a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  xpc_object_t v2 = a2;
  uint64_t v3 = MEMORY[0x1E4F143A8];
  uint64_t v4 = 2;
  while (1)
  {
    *(_WORD *)temp_long long buffer = 0;
    uint64_t v11 = 0;
    os_log_type_t v12 = &v11;
    uint64_t v13 = 0x2020000000;
    __int16 v14 = 0;
    parse[0] = v3;
    parse[1] = 3221225472;
    parse[2] = __nw_shoes_copy_udp_framer_definition_block_invoke_4;
    parse[3] = &unk_1E523E230;
    parse[4] = &v11;
    if (!nw_framer_parse_input(v2, 2uLL, 2uLL, temp_buffer, parse)) {
      break;
    }
    if (gLogDatapath)
    {
      uint64_t v7 = __nwlog_obj();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
      {
        int v8 = *((unsigned __int16 *)v12 + 12);
        *(_DWORD *)buf = 136446466;
        uint64_t v17 = "nw_shoes_copy_udp_framer_definition_block_invoke_3";
        __int16 v18 = 1024;
        int v19 = v8;
        _os_log_impl(&dword_1830D4000, v7, OS_LOG_TYPE_DEBUG, "%{public}s Shoes LV: Reading frame of length %u", buf, 0x12u);
      }
    }
    uint64_t v5 = nw_framer_message_create(v2);
    BOOL v6 = nw_framer_deliver_input_no_copy(v2, *((unsigned __int16 *)v12 + 12), v5, 1);

    if (!v6)
    {
      uint64_t v4 = 0;
      break;
    }
    _Block_object_dispose(&v11, 8);
  }
  _Block_object_dispose(&v11, 8);

  return v4;
}

void sub_1833EAB38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL nw_framer_parse_input(nw_framer_t framer, size_t minimum_incomplete_length, size_t maximum_length, uint8_t *temp_buffer, nw_framer_parse_completion_t parse)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  nw_framer_t v9 = framer;
  nw_framer_parse_completion_t v10 = parse;
  if (v9)
  {
    nw_context_assert_queue(v9[46].isa);
    if (v9[63].isa)
    {
      if (gLogDatapath)
      {
        uint64_t v17 = __nwlog_obj();
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v25 = "nw_framer_parse_input";
          __int16 v26 = 2080;
          os_log_type_t v27 = (char *)&v9[76].isa + 1;
          _os_log_impl(&dword_1830D4000, v17, OS_LOG_TYPE_DEBUG, "%{public}s %s Cannot start a new parse with an outstanding parse", buf, 0x16u);
        }
      }
      (*((void (**)(nw_framer_parse_completion_t, void, void, void))v10 + 2))(v10, 0, 0, 0);
      char v11 = 0;
    }
    else
    {
      char v11 = nw_framer_parse_array(v9, &v9[64].isa, 1, (BYTE6(v9[75].isa) & 2) != 0, minimum_incomplete_length, maximum_length, (uint64_t)temp_buffer, v10);
    }
    goto LABEL_6;
  }
  uint64_t v13 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v25 = "nw_framer_parse_input";
  __int16 v14 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v22 = 0;
  if (__nwlog_fault(v14, &type, &v22))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v15 = __nwlog_obj();
      os_log_type_t v16 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v25 = "nw_framer_parse_input";
        _os_log_impl(&dword_1830D4000, v15, v16, "%{public}s called with null framer", buf, 0xCu);
      }
    }
    else if (v22)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v15 = __nwlog_obj();
      os_log_type_t v19 = type;
      BOOL v20 = os_log_type_enabled(v15, type);
      if (backtrace_string)
      {
        if (v20)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v25 = "nw_framer_parse_input";
          __int16 v26 = 2082;
          os_log_type_t v27 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v15, v19, "%{public}s called with null framer, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_26;
      }
      if (v20)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v25 = "nw_framer_parse_input";
        _os_log_impl(&dword_1830D4000, v15, v19, "%{public}s called with null framer, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v15 = __nwlog_obj();
      os_log_type_t v21 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v25 = "nw_framer_parse_input";
        _os_log_impl(&dword_1830D4000, v15, v21, "%{public}s called with null framer, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_26:
  if (v14) {
    free(v14);
  }
  char v11 = 0;
LABEL_6:

  return v11;
}

void sub_1833EAEF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_framer_deliver_input_no_copy(nw_framer_t framer, size_t input_length, nw_framer_message_t message, BOOL is_complete)
{
  BOOL v4 = is_complete;
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  nw_framer_t v7 = framer;
  int v8 = message;
  nw_framer_t v9 = v8;
  if (!v7)
  {
    os_log_type_t v21 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_framer_deliver_input_no_copy";
    char v22 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v47 = 0;
    if (!__nwlog_fault(v22, &type, &v47)) {
      goto LABEL_69;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v23 = __nwlog_obj();
      os_log_type_t v24 = type;
      if (os_log_type_enabled(v23, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_framer_deliver_input_no_copy";
        _os_log_impl(&dword_1830D4000, v23, v24, "%{public}s called with null framer", buf, 0xCu);
      }
      goto LABEL_68;
    }
    if (!v47)
    {
      os_log_type_t v23 = __nwlog_obj();
      os_log_type_t v37 = type;
      if (os_log_type_enabled(v23, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_framer_deliver_input_no_copy";
        _os_log_impl(&dword_1830D4000, v23, v37, "%{public}s called with null framer, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_68;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v23 = __nwlog_obj();
    os_log_type_t v31 = type;
    BOOL v32 = os_log_type_enabled(v23, type);
    if (!backtrace_string)
    {
      if (v32)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_framer_deliver_input_no_copy";
        _os_log_impl(&dword_1830D4000, v23, v31, "%{public}s called with null framer, no backtrace", buf, 0xCu);
      }
      goto LABEL_68;
    }
    if (v32)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_framer_deliver_input_no_copy";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = backtrace_string;
      _os_log_impl(&dword_1830D4000, v23, v31, "%{public}s called with null framer, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_50;
  }
  if (!v8)
  {
    uint64_t v25 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_framer_deliver_input_no_copy";
    char v22 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v47 = 0;
    if (!__nwlog_fault(v22, &type, &v47)) {
      goto LABEL_69;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v23 = __nwlog_obj();
      os_log_type_t v26 = type;
      if (os_log_type_enabled(v23, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_framer_deliver_input_no_copy";
        _os_log_impl(&dword_1830D4000, v23, v26, "%{public}s called with null message", buf, 0xCu);
      }
      goto LABEL_68;
    }
    if (!v47)
    {
      os_log_type_t v23 = __nwlog_obj();
      os_log_type_t v38 = type;
      if (os_log_type_enabled(v23, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_framer_deliver_input_no_copy";
        _os_log_impl(&dword_1830D4000, v23, v38, "%{public}s called with null message, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_68;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v23 = __nwlog_obj();
    os_log_type_t v33 = type;
    BOOL v34 = os_log_type_enabled(v23, type);
    if (!backtrace_string)
    {
      if (v34)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_framer_deliver_input_no_copy";
        _os_log_impl(&dword_1830D4000, v23, v33, "%{public}s called with null message, no backtrace", buf, 0xCu);
      }
      goto LABEL_68;
    }
    if (v34)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_framer_deliver_input_no_copy";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = backtrace_string;
      _os_log_impl(&dword_1830D4000, v23, v33, "%{public}s called with null message, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_50;
  }
  nw_framer_parse_completion_t v10 = v8;
  char v11 = v10[1].isa;

  char is_framer = nw_protocol_definition_is_framer(v11);
  if ((is_framer & 1) == 0)
  {
    os_log_type_t v27 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_framer_deliver_input_no_copy";
    char v22 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v47 = 0;
    if (!__nwlog_fault(v22, &type, &v47)) {
      goto LABEL_69;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v23 = __nwlog_obj();
      os_log_type_t v28 = type;
      if (os_log_type_enabled(v23, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_framer_deliver_input_no_copy";
        _os_log_impl(&dword_1830D4000, v23, v28, "%{public}s called with null nw_protocol_metadata_is_framer_message(message)", buf, 0xCu);
      }
LABEL_68:

LABEL_69:
      if (v22) {
        free(v22);
      }
      goto LABEL_6;
    }
    if (!v47)
    {
      os_log_type_t v23 = __nwlog_obj();
      os_log_type_t v39 = type;
      if (os_log_type_enabled(v23, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_framer_deliver_input_no_copy";
        _os_log_impl(&dword_1830D4000, v23, v39, "%{public}s called with null nw_protocol_metadata_is_framer_message(message), backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_68;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v23 = __nwlog_obj();
    os_log_type_t v35 = type;
    BOOL v36 = os_log_type_enabled(v23, type);
    if (!backtrace_string)
    {
      if (v36)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_framer_deliver_input_no_copy";
        _os_log_impl(&dword_1830D4000, v23, v35, "%{public}s called with null nw_protocol_metadata_is_framer_message(message), no backtrace", buf, 0xCu);
      }
      goto LABEL_68;
    }
    if (v36)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_framer_deliver_input_no_copy";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = backtrace_string;
      _os_log_impl(&dword_1830D4000, v23, v35, "%{public}s called with null nw_protocol_metadata_is_framer_message(message), dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_50:

    free(backtrace_string);
    goto LABEL_69;
  }
  nw_context_assert_queue(v7[46].isa);
  if (v7[63].isa)
  {
    if (gLogDatapath)
    {
      uint64_t v29 = __nwlog_obj();
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_framer_deliver_input_no_copy";
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = (char *)v7 + 609;
        _os_log_impl(&dword_1830D4000, v29, OS_LOG_TYPE_DEBUG, "%{public}s %s Cannot start a new parse with an outstanding parse", buf, 0x16u);
      }
    }
LABEL_6:
    BOOL v13 = 0;
    goto LABEL_17;
  }
  *(void *)buf = 0;
  *(void *)&buf[8] = buf;
  *(void *)&buf[16] = 0x2020000000;
  size_t v50 = input_length;
  if (input_length)
  {
    v7[63].Class isa = (Class)input_length;
    objc_storeStrong((id *)&v7[48].isa, message);
    if (v4) {
      char v14 = 8;
    }
    else {
      char v14 = 0;
    }
    HIBYTE(v7[75].isa) = HIBYTE(v7[75].isa) & 0xF7 | v14;
    v40[0] = MEMORY[0x1E4F143A8];
    v40[1] = 3221225472;
    time_t v41 = __nw_framer_deliver_input_no_copy_block_invoke;
    os_log_type_t v42 = &unk_1E523B0B8;
    os_log_type_t v45 = buf;
    __int16 v43 = v7;
    uint64_t v44 = v10;
    BOOL v46 = v4;
    Class isa = v7[64].isa;
    do
    {
      if (!isa) {
        break;
      }
      os_log_type_t v16 = (objc_class *)*((void *)isa + 4);
      char v17 = ((uint64_t (*)(void *))v41)(v40);
      Class isa = v16;
    }
    while ((v17 & 1) != 0);
    BOOL v13 = v7[63].isa == 0;

    uint64_t frame = (uint64_t)v43;
  }
  else
  {
    uint64_t frame = nw_framer_protocol_create_frame(v7, 0, (uint64_t)nw_framer_protocol_inbound_data_finalizer, (uint64_t)&v7[58], 0);
    BOOL v13 = 1;
    nw_frame_set_metadata(frame, v10, 1, v4);
    *(void *)(frame + 32) = 0;
    os_log_type_t v19 = v7[67].isa;
    *(void *)(frame + 40) = v19;
    void *v19 = frame;
    v7[67].Class isa = (Class)(frame + 32);
    ++LODWORD(v7[68].isa);
  }

  _Block_object_dispose(buf, 8);
LABEL_17:

  return v13;
}

void sub_1833EB7AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

uint64_t nw_protocol_webtransport_http3_stream_get_input_frames(nw_protocol *a1, nw_protocol *a2, uint64_t a3, uint64_t a4, uint64_t a5, nw_frame_array_s *a6)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v31 = "nw_protocol_webtransport_http3_stream_get_input_frames";
    uint64_t v15 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v28 = 0;
    if (!__nwlog_fault(v15, &type, &v28)) {
      goto LABEL_53;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v16 = __nwlog_obj();
      os_log_type_t v17 = type;
      if (!os_log_type_enabled(v16, type)) {
        goto LABEL_53;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v31 = "nw_protocol_webtransport_http3_stream_get_input_frames";
      __int16 v18 = "%{public}s called with null protocol";
LABEL_52:
      _os_log_impl(&dword_1830D4000, v16, v17, v18, buf, 0xCu);
      goto LABEL_53;
    }
    if (!v28)
    {
      os_log_type_t v16 = __nwlog_obj();
      os_log_type_t v17 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v31 = "nw_protocol_webtransport_http3_stream_get_input_frames";
        __int16 v18 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_52;
      }
      goto LABEL_53;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v16 = __nwlog_obj();
    os_log_type_t v17 = type;
    BOOL v23 = os_log_type_enabled(v16, type);
    if (!backtrace_string)
    {
      if (v23)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v31 = "nw_protocol_webtransport_http3_stream_get_input_frames";
        __int16 v18 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_52;
      }
      goto LABEL_53;
    }
    if (!v23) {
      goto LABEL_37;
    }
    *(_DWORD *)buf = 136446466;
    os_log_type_t v31 = "nw_protocol_webtransport_http3_stream_get_input_frames";
    __int16 v32 = 2082;
    os_log_type_t v33 = backtrace_string;
    os_log_type_t v24 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_36:
    _os_log_impl(&dword_1830D4000, v16, v17, v24, buf, 0x16u);
    goto LABEL_37;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v31 = "nw_protocol_webtransport_http3_stream_get_input_frames";
    uint64_t v15 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v28 = 0;
    if (!__nwlog_fault(v15, &type, &v28)) {
      goto LABEL_53;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v16 = __nwlog_obj();
      os_log_type_t v17 = type;
      if (!os_log_type_enabled(v16, type)) {
        goto LABEL_53;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v31 = "nw_protocol_webtransport_http3_stream_get_input_frames";
      __int16 v18 = "%{public}s called with null webtransport_stream";
      goto LABEL_52;
    }
    if (!v28)
    {
      os_log_type_t v16 = __nwlog_obj();
      os_log_type_t v17 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v31 = "nw_protocol_webtransport_http3_stream_get_input_frames";
        __int16 v18 = "%{public}s called with null webtransport_stream, backtrace limit exceeded";
        goto LABEL_52;
      }
      goto LABEL_53;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v16 = __nwlog_obj();
    os_log_type_t v17 = type;
    BOOL v25 = os_log_type_enabled(v16, type);
    if (!backtrace_string)
    {
      if (v25)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v31 = "nw_protocol_webtransport_http3_stream_get_input_frames";
        __int16 v18 = "%{public}s called with null webtransport_stream, no backtrace";
        goto LABEL_52;
      }
      goto LABEL_53;
    }
    if (!v25) {
      goto LABEL_37;
    }
    *(_DWORD *)buf = 136446466;
    os_log_type_t v31 = "nw_protocol_webtransport_http3_stream_get_input_frames";
    __int16 v32 = 2082;
    os_log_type_t v33 = backtrace_string;
    os_log_type_t v24 = "%{public}s called with null webtransport_stream, dumping backtrace:%{public}s";
    goto LABEL_36;
  }
  if (a2)
  {
    if ((*((unsigned char *)handle + 276) & 0x10) == 0)
    {
      if (gLogDatapath)
      {
        os_log_type_t v19 = __nwlog_obj();
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v20 = handle[11];
          if (v20) {
            int v21 = *(_DWORD *)(v20 + 460);
          }
          else {
            int v21 = -1;
          }
          uint64_t v27 = handle[8];
          *(_DWORD *)buf = 136447746;
          os_log_type_t v31 = "nw_protocol_webtransport_http3_stream_get_input_frames";
          __int16 v32 = 2082;
          os_log_type_t v33 = (char *)(handle + 24);
          __int16 v34 = 2080;
          os_log_type_t v35 = " ";
          __int16 v36 = 1024;
          int v37 = v21;
          __int16 v38 = 2048;
          uint64_t v39 = v27;
          __int16 v40 = 2048;
          time_t v41 = a1;
          __int16 v42 = 2048;
          __int16 v43 = a2;
          _os_log_impl(&dword_1830D4000, v19, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%lld> called with protocol %p and input protocol %p", buf, 0x44u);
        }
      }
    }
    uint64_t input_frames = nw_protocol_common_get_input_frames((uint64_t)a1, (uint64_t)a1, a3, a4, a5, (uint64_t)a6);
    if (input_frames) {
      nw_protocol_input_finished(a2, (uint64_t)a1);
    }
    return input_frames;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v31 = "nw_protocol_webtransport_http3_stream_get_input_frames";
  uint64_t v15 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v28 = 0;
  if (!__nwlog_fault(v15, &type, &v28)) {
    goto LABEL_53;
  }
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v28)
    {
      os_log_type_t v16 = __nwlog_obj();
      os_log_type_t v17 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v31 = "nw_protocol_webtransport_http3_stream_get_input_frames";
        __int16 v18 = "%{public}s called with null input_protocol, backtrace limit exceeded";
        goto LABEL_52;
      }
      goto LABEL_53;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v16 = __nwlog_obj();
    os_log_type_t v17 = type;
    BOOL v26 = os_log_type_enabled(v16, type);
    if (!backtrace_string)
    {
      if (v26)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v31 = "nw_protocol_webtransport_http3_stream_get_input_frames";
        __int16 v18 = "%{public}s called with null input_protocol, no backtrace";
        goto LABEL_52;
      }
      goto LABEL_53;
    }
    if (v26)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v31 = "nw_protocol_webtransport_http3_stream_get_input_frames";
      __int16 v32 = 2082;
      os_log_type_t v33 = backtrace_string;
      os_log_type_t v24 = "%{public}s called with null input_protocol, dumping backtrace:%{public}s";
      goto LABEL_36;
    }
LABEL_37:
    free(backtrace_string);
    goto LABEL_53;
  }
  os_log_type_t v16 = __nwlog_obj();
  os_log_type_t v17 = type;
  if (os_log_type_enabled(v16, type))
  {
    *(_DWORD *)buf = 136446210;
    os_log_type_t v31 = "nw_protocol_webtransport_http3_stream_get_input_frames";
    __int16 v18 = "%{public}s called with null input_protocol";
    goto LABEL_52;
  }
LABEL_53:
  if (v15) {
    free(v15);
  }
  return 0;
}

void nw_protocol_input_finished(void *a1, uint64_t a2)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v2 = a2;
    uint64_t v3 = (uint64_t)a1;
    BOOL v4 = (void *)a1[5];
    if (v4 == &nw_protocol_ref_counted_handle)
    {
      uint64_t v5 = a1[11];
      if (v5) {
        a1[11] = v5 + 1;
      }
    }
    if (a2)
    {
      BOOL v6 = *(void **)(a2 + 40);
      if (v6 == &nw_protocol_ref_counted_handle)
      {
        uint64_t v7 = *(void *)(a2 + 88);
        if (v7) {
          *(void *)(a2 + 88) = v7 + 1;
        }
      }
      uint64_t v8 = a1[3];
      if (v8)
      {
        nw_framer_t v9 = *(void (**)(void *, uint64_t))(v8 + 184);
        if (v9)
        {
          v9(a1, a2);
          goto LABEL_12;
        }
      }
      __nwlog_obj();
      __int16 v18 = *(const char **)(v3 + 16);
      *(_DWORD *)buf = 136446722;
      __int16 v42 = "__nw_protocol_input_finished";
      if (!v18) {
        __int16 v18 = "invalid";
      }
      __int16 v43 = 2082;
      uint64_t v44 = (void *)v18;
      __int16 v45 = 2048;
      uint64_t v46 = v3;
      os_log_type_t v19 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v39 = 0;
      if (__nwlog_fault(v19, &type, &v39))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          uint64_t v20 = __nwlog_obj();
          os_log_type_t v21 = type;
          if (!os_log_type_enabled(v20, type)) {
            goto LABEL_77;
          }
          char v22 = *(const char **)(v3 + 16);
          if (!v22) {
            char v22 = "invalid";
          }
          *(_DWORD *)buf = 136446722;
          __int16 v42 = "__nw_protocol_input_finished";
          __int16 v43 = 2082;
          uint64_t v44 = (void *)v22;
          __int16 v45 = 2048;
          uint64_t v46 = v3;
          BOOL v23 = "%{public}s protocol %{public}s (%p) has invalid input_finished callback";
          goto LABEL_76;
        }
        if (!v39)
        {
          uint64_t v20 = __nwlog_obj();
          os_log_type_t v21 = type;
          if (!os_log_type_enabled(v20, type)) {
            goto LABEL_77;
          }
          int v37 = *(const char **)(v3 + 16);
          if (!v37) {
            int v37 = "invalid";
          }
          *(_DWORD *)buf = 136446722;
          __int16 v42 = "__nw_protocol_input_finished";
          __int16 v43 = 2082;
          uint64_t v44 = (void *)v37;
          __int16 v45 = 2048;
          uint64_t v46 = v3;
          BOOL v23 = "%{public}s protocol %{public}s (%p) has invalid input_finished callback, backtrace limit exceeded";
          goto LABEL_76;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        uint64_t v20 = __nwlog_obj();
        os_log_type_t v21 = type;
        BOOL v31 = os_log_type_enabled(v20, type);
        if (backtrace_string)
        {
          if (v31)
          {
            __int16 v32 = *(const char **)(v3 + 16);
            if (!v32) {
              __int16 v32 = "invalid";
            }
            *(_DWORD *)buf = 136446978;
            __int16 v42 = "__nw_protocol_input_finished";
            __int16 v43 = 2082;
            uint64_t v44 = (void *)v32;
            __int16 v45 = 2048;
            uint64_t v46 = v3;
            __int16 v47 = 2082;
            uint64_t v48 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v20, v21, "%{public}s protocol %{public}s (%p) has invalid input_finished callback, dumping backtrace:%{public}s", buf, 0x2Au);
          }
          free(backtrace_string);
          goto LABEL_77;
        }
        if (v31)
        {
          __int16 v38 = *(const char **)(v3 + 16);
          if (!v38) {
            __int16 v38 = "invalid";
          }
          *(_DWORD *)buf = 136446722;
          __int16 v42 = "__nw_protocol_input_finished";
          __int16 v43 = 2082;
          uint64_t v44 = (void *)v38;
          __int16 v45 = 2048;
          uint64_t v46 = v3;
          BOOL v23 = "%{public}s protocol %{public}s (%p) has invalid input_finished callback, no backtrace";
LABEL_76:
          _os_log_impl(&dword_1830D4000, v20, v21, v23, buf, 0x20u);
        }
      }
LABEL_77:
      if (v19) {
        free(v19);
      }
LABEL_12:
      if (v6 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(v2 + 40) == &nw_protocol_ref_counted_handle)
      {
        uint64_t v14 = *(void *)(v2 + 88);
        if (v14)
        {
          uint64_t v15 = v14 - 1;
          *(void *)(v2 + 88) = v15;
          if (!v15)
          {
            os_log_type_t v16 = *(void (***)(void))(v2 + 64);
            if (v16)
            {
              *(void *)(v2 + 64) = 0;
              v16[2](v16);
              _Block_release(v16);
            }
            if (*(unsigned char *)(v2 + 72))
            {
              os_log_type_t v17 = *(const void **)(v2 + 64);
              if (v17) {
                _Block_release(v17);
              }
            }
LABEL_32:
            free((void *)v2);
          }
        }
      }
LABEL_14:
      if (v4 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(v3 + 40) == &nw_protocol_ref_counted_handle)
      {
        uint64_t v10 = *(void *)(v3 + 88);
        if (v10)
        {
          uint64_t v11 = v10 - 1;
          *(void *)(v3 + 88) = v11;
          if (!v11)
          {
            os_log_type_t v12 = *(void (***)(void))(v3 + 64);
            if (v12)
            {
              *(void *)(v3 + 64) = 0;
              v12[2](v12);
              _Block_release(v12);
            }
            if (*(unsigned char *)(v3 + 72))
            {
              BOOL v13 = *(const void **)(v3 + 64);
              if (v13) {
                _Block_release(v13);
              }
            }
            goto LABEL_24;
          }
        }
      }
      return;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v42 = "__nw_protocol_input_finished";
    uint64_t v2 = _os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v39 = 0;
    if (__nwlog_fault((const char *)v2, &type, &v39))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v27 = __nwlog_obj();
        os_log_type_t v28 = type;
        if (!os_log_type_enabled(v27, type)) {
          goto LABEL_91;
        }
        *(_DWORD *)buf = 136446210;
        __int16 v42 = "__nw_protocol_input_finished";
        uint64_t v29 = "%{public}s called with null other_protocol";
        goto LABEL_90;
      }
      if (!v39)
      {
        uint64_t v27 = __nwlog_obj();
        os_log_type_t v28 = type;
        if (!os_log_type_enabled(v27, type)) {
          goto LABEL_91;
        }
        *(_DWORD *)buf = 136446210;
        __int16 v42 = "__nw_protocol_input_finished";
        uint64_t v29 = "%{public}s called with null other_protocol, backtrace limit exceeded";
        goto LABEL_90;
      }
      os_log_type_t v35 = (char *)__nw_create_backtrace_string();
      uint64_t v27 = __nwlog_obj();
      os_log_type_t v28 = type;
      BOOL v36 = os_log_type_enabled(v27, type);
      if (v35)
      {
        if (v36)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v42 = "__nw_protocol_input_finished";
          __int16 v43 = 2082;
          uint64_t v44 = v35;
          _os_log_impl(&dword_1830D4000, v27, v28, "%{public}s called with null other_protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v35);
        if (v2) {
          goto LABEL_32;
        }
        goto LABEL_14;
      }
      if (v36)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v42 = "__nw_protocol_input_finished";
        uint64_t v29 = "%{public}s called with null other_protocol, no backtrace";
LABEL_90:
        _os_log_impl(&dword_1830D4000, v27, v28, v29, buf, 0xCu);
      }
    }
LABEL_91:
    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_32;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v42 = "__nw_protocol_input_finished";
  uint64_t v3 = _os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v39 = 0;
  if (__nwlog_fault((const char *)v3, &type, &v39))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v24 = __nwlog_obj();
      os_log_type_t v25 = type;
      if (!os_log_type_enabled(v24, type)) {
        goto LABEL_86;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v42 = "__nw_protocol_input_finished";
      BOOL v26 = "%{public}s called with null protocol";
    }
    else if (v39)
    {
      os_log_type_t v33 = (char *)__nw_create_backtrace_string();
      os_log_type_t v24 = __nwlog_obj();
      os_log_type_t v25 = type;
      BOOL v34 = os_log_type_enabled(v24, type);
      if (v33)
      {
        if (v34)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v42 = "__nw_protocol_input_finished";
          __int16 v43 = 2082;
          uint64_t v44 = v33;
          _os_log_impl(&dword_1830D4000, v24, v25, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v33);
        if (v3) {
          goto LABEL_24;
        }
        return;
      }
      if (!v34) {
        goto LABEL_86;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v42 = "__nw_protocol_input_finished";
      BOOL v26 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      os_log_type_t v24 = __nwlog_obj();
      os_log_type_t v25 = type;
      if (!os_log_type_enabled(v24, type)) {
        goto LABEL_86;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v42 = "__nw_protocol_input_finished";
      BOOL v26 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    _os_log_impl(&dword_1830D4000, v24, v25, v26, buf, 0xCu);
  }
LABEL_86:
  if (v3) {
LABEL_24:
  }
    free((void *)v3);
}

void nw_framer_message_set_object_value(nw_framer_message_t message, const char *key, id value)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = message;
  id v6 = value;
  if (!v5)
  {
    os_log_type_t v12 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    int v37 = "nw_framer_message_set_object_value";
    BOOL v13 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v35 = OS_LOG_TYPE_ERROR;
    char v34 = 0;
    if (!__nwlog_fault(v13, &v35, &v34)) {
      goto LABEL_57;
    }
    if (v35 == OS_LOG_TYPE_FAULT)
    {
      uint64_t v14 = __nwlog_obj();
      os_log_type_t v15 = v35;
      if (os_log_type_enabled(v14, v35))
      {
        *(_DWORD *)buf = 136446210;
        int v37 = "nw_framer_message_set_object_value";
        _os_log_impl(&dword_1830D4000, v14, v15, "%{public}s called with null message", buf, 0xCu);
      }
    }
    else if (v34)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v14 = __nwlog_obj();
      os_log_type_t v21 = v35;
      BOOL v22 = os_log_type_enabled(v14, v35);
      if (backtrace_string)
      {
        if (v22)
        {
          *(_DWORD *)buf = 136446466;
          int v37 = "nw_framer_message_set_object_value";
          __int16 v38 = 2082;
          char v39 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v14, v21, "%{public}s called with null message, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_57:
        if (!v13) {
          goto LABEL_7;
        }
LABEL_58:
        free(v13);
        goto LABEL_7;
      }
      if (v22)
      {
        *(_DWORD *)buf = 136446210;
        int v37 = "nw_framer_message_set_object_value";
        _os_log_impl(&dword_1830D4000, v14, v21, "%{public}s called with null message, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v14 = __nwlog_obj();
      os_log_type_t v28 = v35;
      if (os_log_type_enabled(v14, v35))
      {
        *(_DWORD *)buf = 136446210;
        int v37 = "nw_framer_message_set_object_value";
        _os_log_impl(&dword_1830D4000, v14, v28, "%{public}s called with null message, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_56:

    goto LABEL_57;
  }
  uint64_t v7 = v5;
  uint64_t v8 = v7[1].isa;

  char is_framer = nw_protocol_definition_is_framer(v8);
  if ((is_framer & 1) == 0)
  {
    os_log_type_t v16 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    int v37 = "nw_framer_message_set_object_value";
    BOOL v13 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v35 = OS_LOG_TYPE_ERROR;
    char v34 = 0;
    if (!__nwlog_fault(v13, &v35, &v34)) {
      goto LABEL_57;
    }
    if (v35 == OS_LOG_TYPE_FAULT)
    {
      uint64_t v14 = __nwlog_obj();
      os_log_type_t v17 = v35;
      if (os_log_type_enabled(v14, v35))
      {
        *(_DWORD *)buf = 136446210;
        int v37 = "nw_framer_message_set_object_value";
        _os_log_impl(&dword_1830D4000, v14, v17, "%{public}s called with null nw_protocol_metadata_is_framer_message(message)", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (!v34)
    {
      uint64_t v14 = __nwlog_obj();
      os_log_type_t v29 = v35;
      if (os_log_type_enabled(v14, v35))
      {
        *(_DWORD *)buf = 136446210;
        int v37 = "nw_framer_message_set_object_value";
        _os_log_impl(&dword_1830D4000, v14, v29, "%{public}s called with null nw_protocol_metadata_is_framer_message(message), backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_56;
    }
    BOOL v23 = (char *)__nw_create_backtrace_string();
    uint64_t v14 = __nwlog_obj();
    os_log_type_t v24 = v35;
    BOOL v25 = os_log_type_enabled(v14, v35);
    if (!v23)
    {
      if (v25)
      {
        *(_DWORD *)buf = 136446210;
        int v37 = "nw_framer_message_set_object_value";
        _os_log_impl(&dword_1830D4000, v14, v24, "%{public}s called with null nw_protocol_metadata_is_framer_message(message), no backtrace", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (v25)
    {
      *(_DWORD *)buf = 136446466;
      int v37 = "nw_framer_message_set_object_value";
      __int16 v38 = 2082;
      char v39 = v23;
      _os_log_impl(&dword_1830D4000, v14, v24, "%{public}s called with null nw_protocol_metadata_is_framer_message(message), dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_37;
  }
  if (!key)
  {
    __int16 v18 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    int v37 = "nw_framer_message_set_object_value";
    BOOL v13 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v35 = OS_LOG_TYPE_ERROR;
    char v34 = 0;
    if (!__nwlog_fault(v13, &v35, &v34)) {
      goto LABEL_57;
    }
    if (v35 == OS_LOG_TYPE_FAULT)
    {
      uint64_t v14 = __nwlog_obj();
      os_log_type_t v19 = v35;
      if (os_log_type_enabled(v14, v35))
      {
        *(_DWORD *)buf = 136446210;
        int v37 = "nw_framer_message_set_object_value";
        _os_log_impl(&dword_1830D4000, v14, v19, "%{public}s called with null key", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (!v34)
    {
      uint64_t v14 = __nwlog_obj();
      os_log_type_t v30 = v35;
      if (os_log_type_enabled(v14, v35))
      {
        *(_DWORD *)buf = 136446210;
        int v37 = "nw_framer_message_set_object_value";
        _os_log_impl(&dword_1830D4000, v14, v30, "%{public}s called with null key, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_56;
    }
    BOOL v23 = (char *)__nw_create_backtrace_string();
    uint64_t v14 = __nwlog_obj();
    os_log_type_t v26 = v35;
    BOOL v27 = os_log_type_enabled(v14, v35);
    if (!v23)
    {
      if (v27)
      {
        *(_DWORD *)buf = 136446210;
        int v37 = "nw_framer_message_set_object_value";
        _os_log_impl(&dword_1830D4000, v14, v26, "%{public}s called with null key, no backtrace", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (v27)
    {
      *(_DWORD *)buf = 136446466;
      int v37 = "nw_framer_message_set_object_value";
      __int16 v38 = 2082;
      char v39 = v23;
      _os_log_impl(&dword_1830D4000, v14, v26, "%{public}s called with null key, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_37:

    free(v23);
    if (!v13) {
      goto LABEL_7;
    }
    goto LABEL_58;
  }
  v31[0] = MEMORY[0x1E4F143A8];
  v31[1] = 3221225472;
  v31[2] = __nw_framer_message_set_object_value_block_invoke;
  v31[3] = &unk_1E5249070;
  os_log_type_t v33 = key;
  id v10 = v6;
  id v32 = v10;
  uint64_t isa = (uint64_t)v7[4].isa;
  if (isa)
  {
    __nw_framer_message_set_object_value_block_invoke((uint64_t)v31, isa);
    id v10 = v32;
  }

LABEL_7:
}

uint64_t nw_protocol_definition_is_framer(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = *((unsigned char *)v1 + 184) & 1;
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_protocol_definition_is_framer";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_protocol_definition_is_framer";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null definition", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_protocol_definition_is_framer";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null definition, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_protocol_definition_is_framer";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null definition, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_protocol_definition_is_framer";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null definition, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

uint64_t __nw_framer_message_set_object_value_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  if (!v3)
  {
    uint64_t v5 = nw_dictionary_create();
    id v6 = *(void **)(a2 + 16);
    *(void *)(a2 + 16) = v5;

    uint64_t v3 = *(void *)(a2 + 16);
  }
  nw_dictionary_set_value(v3, *(const char **)(a1 + 40), *(void **)(a1 + 32));
  return 1;
}

uint64_t nw_endpoint_handler_trigger_agents(void *a1, int a2)
{
  *(void *)((char *)&v128[2] + 6) = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1;
  id v4 = nw_path_copy_inactive_agent_uuids(v3[8], a2);
  uint64_t v5 = v4;
  if (v4 && xpc_array_get_count(v4))
  {
    *((_DWORD *)v3 + 20) = 131073;
    nw_endpoint_handler_report(v3, 0, (_WORD *)v3 + 40, 0);
    xpc_object_t xarray = v5;
    if (v3[13])
    {
LABEL_4:
      id v6 = v3;
      char v7 = *((unsigned char *)v6 + 268);

      if ((v7 & 0x20) != 0)
      {
        uint64_t v20 = 1;
        goto LABEL_101;
      }
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      os_log_type_t v8 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      {
        log = v8;
        nw_framer_t v9 = v6;

        os_log_type_t v10 = v9;
        char v11 = *((unsigned char *)v6 + 268);

        if (v11) {
          os_log_type_t v12 = "dry-run ";
        }
        else {
          os_log_type_t v12 = "";
        }
        nw_endpoint_t v13 = nw_endpoint_handler_copy_endpoint(v10);
        logging_description = nw_endpoint_get_logging_description(v13);
        os_log_type_t v15 = v9 + 168;
        os_log_type_t v16 = v10;
        __int16 v17 = v16;
        uint64_t v18 = v16[30];
        if (v18 > 5) {
          uint64_t v19 = "unknown-state";
        }
        else {
          uint64_t v19 = off_1E523FB38[v18];
        }

        char v39 = v17;
        uint64_t v40 = v39;
        time_t v41 = "path";
        switch(*((_DWORD *)v39 + 29))
        {
          case 0:
            break;
          case 1:
            time_t v41 = "resolver";
            break;
          case 2:
            time_t v41 = nw_endpoint_flow_mode_string(v39[31]);
            break;
          case 3:
            time_t v41 = "proxy";
            break;
          case 4:
            time_t v41 = "fallback";
            break;
          case 5:
            time_t v41 = "transform";
            break;
          default:
            time_t v41 = "unknown-mode";
            break;
        }

        __int16 v72 = v40;
        os_unfair_lock_lock(v72 + 28);
        id v73 = v3[8];
        os_unfair_lock_unlock(v72 + 28);

        *(_DWORD *)buf = 136447746;
        __int16 v114 = "nw_endpoint_handler_trigger_agents";
        __int16 v115 = 2082;
        uint64_t v116 = v15;
        __int16 v117 = 2082;
        os_log_type_t v118 = v12;
        __int16 v119 = 2082;
        os_log_type_t v120 = logging_description;
        __int16 v121 = 2082;
        os_log_type_t v122 = v19;
        __int16 v123 = 2082;
        os_log_type_t v124 = v41;
        __int16 v125 = 2114;
        id v126 = v73;
        _os_log_impl(&dword_1830D4000, log, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Already triggered agents", buf, 0x48u);

LABEL_67:
        uint64_t v20 = 1;
        os_log_type_t v8 = log;
        goto LABEL_100;
      }
      uint64_t v20 = 1;
LABEL_100:

      uint64_t v5 = xarray;
      goto LABEL_101;
    }
    char v34 = v3[11];
    if (v34)
    {
      if (xpc_equal(v34, v5)) {
        goto LABEL_4;
      }
      os_log_type_t v35 = v3[11];
    }
    else
    {
      os_log_type_t v35 = 0;
    }
    *((unsigned char *)v3 + 268) &= ~2u;
    v3[11] = 0;
    __int16 v42 = v3;

    __int16 v43 = v42[12];
    v42[12] = 0;

    uint64_t v44 = v3[13];
    v3[13] = 0;

    xpc_object_t v45 = xpc_array_create(0, 0);
    uint64_t v46 = v45;
    if (v45)
    {
      __int16 v47 = v42[7];
      uint64_t v48 = v45;
      log = v48;
      if (v47)
      {
        uint64_t v49 = v48;
        size_t v50 = (void *)v47[3];
        uint64_t v51 = v49;
        int v52 = nw_path_evaluator_trigger_agents(v50, a2, 0, v49);

        if (v52 == 1)
        {
          BOOL v62 = v42;
          char v63 = *((unsigned char *)v3 + 268);

          if ((v63 & 0x20) == 0)
          {
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
            }
            BOOL v64 = (id)gconnectionLogObj;
            if (os_log_type_enabled(v64, OS_LOG_TYPE_DEBUG))
            {
              id_string = nw_endpoint_handler_get_id_string(v62);
              char v66 = nw_endpoint_handler_dry_run_string(v62);
              nw_endpoint_t v67 = nw_endpoint_handler_copy_endpoint(v62);
              os_log_type_t v68 = nw_endpoint_get_logging_description(v67);
              BOOL v69 = nw_endpoint_handler_state_string(v62);
              __int16 v70 = nw_endpoint_handler_mode_string(v62);
              id v71 = nw_endpoint_handler_copy_current_path(v62);
              *(_DWORD *)buf = 136448258;
              __int16 v114 = "nw_endpoint_handler_trigger_agents";
              __int16 v115 = 2082;
              uint64_t v116 = (void *)id_string;
              __int16 v117 = 2082;
              os_log_type_t v118 = v66;
              __int16 v119 = 2082;
              os_log_type_t v120 = v68;
              __int16 v121 = 2082;
              os_log_type_t v122 = v69;
              __int16 v123 = 2082;
              os_log_type_t v124 = v70;
              __int16 v125 = 2114;
              id v126 = v71;
              __int16 v127 = 1024;
              LODWORD(v128[0]) = 1;
              WORD2(v128[0]) = 2082;
              *(void *)((char *)v128 + 6) = "cannot satisfy";
              _os_log_impl(&dword_1830D4000, v64, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Trigger failed: [%d] %{public}s", buf, 0x58u);
            }
          }
          goto LABEL_54;
        }
        if (v52)
        {
LABEL_84:
          uint64_t v88 = v42;
          BOOL v89 = (*((unsigned char *)v3 + 268) & 0x20) == 0;

          if (v89)
          {
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
            }
            id v90 = (id)gconnectionLogObj;
            if (os_log_type_enabled(v90, OS_LOG_TYPE_ERROR))
            {
              id v91 = nw_endpoint_handler_get_id_string(v88);
              id v92 = nw_endpoint_handler_dry_run_string(v88);
              nw_endpoint_t v93 = nw_endpoint_handler_copy_endpoint(v88);
              uint64_t v94 = nw_endpoint_get_logging_description(v93);
              uint64_t v95 = nw_endpoint_handler_state_string(v88);
              os_log_type_t v96 = nw_endpoint_handler_mode_string(v88);
              id v97 = nw_endpoint_handler_copy_current_path(v88);
              id v98 = off_1E5248590[v52];
              *(_DWORD *)buf = 136448258;
              __int16 v114 = "nw_endpoint_handler_trigger_agents";
              __int16 v115 = 2082;
              uint64_t v116 = (void *)v91;
              __int16 v117 = 2082;
              os_log_type_t v118 = v92;
              __int16 v119 = 2082;
              os_log_type_t v120 = v94;
              __int16 v121 = 2082;
              os_log_type_t v122 = v95;
              __int16 v123 = 2082;
              os_log_type_t v124 = v96;
              __int16 v125 = 2114;
              id v126 = v97;
              __int16 v127 = 1024;
              LODWORD(v128[0]) = v52;
              WORD2(v128[0]) = 2082;
              *(void *)((char *)v128 + 6) = v98;
              _os_log_impl(&dword_1830D4000, v90, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Trigger failed: [%d] %{public}s", buf, 0x58u);
            }
          }
LABEL_54:
          uint64_t v20 = 0;
          os_log_type_t v8 = log;
          goto LABEL_100;
        }
LABEL_39:
        if (xpc_array_get_count(v51))
        {
          objc_storeStrong(v3 + 11, v5);
          uint64_t v53 = v3[8];
          if (v53 && (os_log_type_t v54 = (void *)v53[28]) != 0) {
            id v55 = v54;
          }
          else {
            id v55 = 0;
          }
          uint64_t v77 = v42[12];
          v42[12] = v55;

          objc_storeStrong(v3 + 13, v46);
          if (a2) {
            char v78 = 2;
          }
          else {
            char v78 = 0;
          }
          *((unsigned char *)v3 + 268) = *((unsigned char *)v3 + 268) & 0xFD | v78;
          if ((nw_endpoint_handler_get_logging_disabled(v42) & 1) == 0)
          {
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
            }
            uint64_t v79 = (id)gconnectionLogObj;
            if (os_log_type_enabled(v79, OS_LOG_TYPE_DEBUG))
            {
              int v80 = nw_endpoint_handler_get_id_string(v42);
              uint64_t v81 = nw_endpoint_handler_dry_run_string(v42);
              nw_endpoint_t v82 = nw_endpoint_handler_copy_endpoint(v42);
              id v83 = nw_endpoint_get_logging_description(v82);
              os_log_type_t v84 = nw_endpoint_handler_state_string(v42);
              uint64_t v85 = nw_endpoint_handler_mode_string(v42);
              id v86 = nw_endpoint_handler_copy_current_path(v42);
              size_t count = xpc_array_get_count(xarray);
              *(_DWORD *)buf = 136448002;
              __int16 v114 = "nw_endpoint_handler_trigger_agents";
              __int16 v115 = 2082;
              uint64_t v116 = (void *)v80;
              __int16 v117 = 2082;
              os_log_type_t v118 = v81;
              __int16 v119 = 2082;
              os_log_type_t v120 = v83;
              __int16 v121 = 2082;
              os_log_type_t v122 = v84;
              __int16 v123 = 2082;
              os_log_type_t v124 = v85;
              __int16 v125 = 2114;
              id v126 = v86;
              __int16 v127 = 2048;
              v128[0] = count;
              _os_log_impl(&dword_1830D4000, v79, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Triggered %zu agents", buf, 0x52u);
            }
          }
          goto LABEL_67;
        }
        int v52 = 0;
        goto LABEL_84;
      }
      __int16 v101 = __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      __int16 v114 = "nw_association_trigger_agents";
      long long v108 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v111 = 0;
      if (__nwlog_fault(v108, &type, &v111))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          char v102 = __nwlog_obj();
          os_log_type_t v103 = type;
          if (os_log_type_enabled(v102, type))
          {
            *(_DWORD *)buf = 136446210;
            __int16 v114 = "nw_association_trigger_agents";
            _os_log_impl(&dword_1830D4000, v102, v103, "%{public}s called with null association", buf, 0xCu);
          }
        }
        else if (v111)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          char v102 = __nwlog_obj();
          os_log_type_t v105 = type;
          BOOL v106 = os_log_type_enabled(v102, type);
          if (backtrace_string)
          {
            if (v106)
            {
              *(_DWORD *)buf = 136446466;
              __int16 v114 = "nw_association_trigger_agents";
              __int16 v115 = 2082;
              uint64_t v116 = backtrace_string;
              _os_log_impl(&dword_1830D4000, v102, v105, "%{public}s called with null association, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(backtrace_string);
            goto LABEL_119;
          }
          if (v106)
          {
            *(_DWORD *)buf = 136446210;
            __int16 v114 = "nw_association_trigger_agents";
            _os_log_impl(&dword_1830D4000, v102, v105, "%{public}s called with null association, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          char v102 = __nwlog_obj();
          os_log_type_t v107 = type;
          if (os_log_type_enabled(v102, type))
          {
            *(_DWORD *)buf = 136446210;
            __int16 v114 = "nw_association_trigger_agents";
            _os_log_impl(&dword_1830D4000, v102, v107, "%{public}s called with null association, backtrace limit exceeded", buf, 0xCu);
          }
        }
      }
LABEL_119:
      if (v108) {
        free(v108);
      }

      uint64_t v51 = log;
      goto LABEL_39;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v56 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    __int16 v114 = "nw_endpoint_handler_trigger_agents";
    uint64_t v57 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v111 = 0;
    if (!__nwlog_fault(v57, &type, &v111)) {
      goto LABEL_96;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      dispatch_qos_class_t v58 = __nwlog_obj();
      os_log_type_t v59 = type;
      if (os_log_type_enabled(v58, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v114 = "nw_endpoint_handler_trigger_agents";
        _os_log_impl(&dword_1830D4000, v58, v59, "%{public}s xpc_array_create failed", buf, 0xCu);
      }
    }
    else if (v111)
    {
      __int16 v74 = (char *)__nw_create_backtrace_string();
      dispatch_qos_class_t v58 = __nwlog_obj();
      os_log_type_t v75 = type;
      BOOL v76 = os_log_type_enabled(v58, type);
      if (v74)
      {
        if (v76)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v114 = "nw_endpoint_handler_trigger_agents";
          __int16 v115 = 2082;
          uint64_t v116 = v74;
          _os_log_impl(&dword_1830D4000, v58, v75, "%{public}s xpc_array_create failed, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v74);
        goto LABEL_96;
      }
      if (v76)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v114 = "nw_endpoint_handler_trigger_agents";
        _os_log_impl(&dword_1830D4000, v58, v75, "%{public}s xpc_array_create failed, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      dispatch_qos_class_t v58 = __nwlog_obj();
      os_log_type_t v99 = type;
      if (os_log_type_enabled(v58, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v114 = "nw_endpoint_handler_trigger_agents";
        _os_log_impl(&dword_1830D4000, v58, v99, "%{public}s xpc_array_create failed, backtrace limit exceeded", buf, 0xCu);
      }
    }

LABEL_96:
    if (v57) {
      free(v57);
    }
    os_log_type_t v8 = 0;
    goto LABEL_99;
  }
  if ((a2 & 1) == 0)
  {
    os_log_type_t v21 = v3;
    char v22 = *((unsigned char *)v21 + 268);

    if ((v22 & 0x20) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      xpc_object_t xarray = v5;
      os_log_type_t v8 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        log = v8;
        BOOL v23 = v21;

        os_log_type_t v24 = v23;
        char v25 = *((unsigned char *)v21 + 268);

        if (v25) {
          os_log_type_t v26 = "dry-run ";
        }
        else {
          os_log_type_t v26 = "";
        }
        nw_endpoint_t v27 = nw_endpoint_handler_copy_endpoint(v24);
        os_log_type_t v28 = nw_endpoint_get_logging_description(v27);
        os_log_type_t v29 = v23 + 168;
        os_log_type_t v30 = v24;
        BOOL v31 = v30;
        uint64_t v32 = v30[30];
        if (v32 > 5) {
          os_log_type_t v33 = "unknown-state";
        }
        else {
          os_log_type_t v33 = off_1E523FB38[v32];
        }

        BOOL v36 = v31;
        int v37 = v36;
        __int16 v38 = "path";
        switch(*((_DWORD *)v36 + 29))
        {
          case 0:
            break;
          case 1:
            __int16 v38 = "resolver";
            break;
          case 2:
            __int16 v38 = nw_endpoint_flow_mode_string(v36[31]);
            break;
          case 3:
            __int16 v38 = "proxy";
            break;
          case 4:
            __int16 v38 = "fallback";
            break;
          case 5:
            __int16 v38 = "transform";
            break;
          default:
            __int16 v38 = "unknown-mode";
            break;
        }

        os_log_type_t v60 = v37;
        os_unfair_lock_lock(v60 + 28);
        id v61 = v3[8];
        os_unfair_lock_unlock(v60 + 28);

        *(_DWORD *)buf = 136447746;
        __int16 v114 = "nw_endpoint_handler_trigger_agents";
        __int16 v115 = 2082;
        uint64_t v116 = v29;
        __int16 v117 = 2082;
        os_log_type_t v118 = v26;
        __int16 v119 = 2082;
        os_log_type_t v120 = v28;
        __int16 v121 = 2082;
        os_log_type_t v122 = v33;
        __int16 v123 = 2082;
        os_log_type_t v124 = v38;
        __int16 v125 = 2114;
        id v126 = v61;
        _os_log_impl(&dword_1830D4000, log, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] No inactive agents to trigger", buf, 0x48u);

        goto LABEL_54;
      }
LABEL_99:
      uint64_t v20 = 0;
      goto LABEL_100;
    }
  }
  uint64_t v20 = 0;
LABEL_101:

  return v20;
}

void sub_1833EDE84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

uint64_t nw_path_evaluator_trigger_agents(void *a1, char a2, char a3, void *a4)
{
  char v7 = a1;
  id v8 = a4;
  uint64_t v26 = 0;
  nw_endpoint_t v27 = &v26;
  uint64_t v28 = 0x2020000000;
  char v29 = 0;
  uint64_t v22 = 0;
  BOOL v23 = &v22;
  uint64_t v24 = 0x2020000000;
  char v25 = 0;
  if (v7 && (nw_framer_t v9 = (void *)v7[6]) != 0)
  {
    id v10 = v9;
    char v11 = v10;
    os_log_type_t v12 = (void *)*((void *)v10 + 28);
    if (!v12) {
      goto LABEL_14;
    }
    v15[0] = MEMORY[0x1E4F143A8];
    v15[1] = 3221225472;
    v15[2] = __nw_path_evaluator_trigger_agents_block_invoke;
    v15[3] = &unk_1E5248120;
    char v20 = a2;
    char v21 = a3;
    v15[4] = v10;
    uint64_t v18 = &v26;
    uint64_t v19 = &v22;
    os_log_type_t v16 = v7;
    id v17 = v8;
    xpc_dictionary_apply(v12, v15);

    if (*((unsigned char *)v23 + 24))
    {
      uint64_t v13 = 0;
    }
    else
    {
LABEL_14:
      if (*((unsigned char *)v27 + 24)) {
        uint64_t v13 = 1;
      }
      else {
        uint64_t v13 = 2;
      }
    }
  }
  else
  {
    uint64_t v13 = 0;
  }
  _Block_object_dispose(&v22, 8);
  _Block_object_dispose(&v26, 8);

  return v13;
}

void sub_1833EE0C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, void *a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);

  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v14 - 80), 8);

  _Unwind_Resume(a1);
}

id nw_path_copy_inactive_agent_uuids(void *a1, char a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x3032000000;
    uint64_t v22 = __Block_byref_object_copy__68682;
    BOOL v23 = __Block_byref_object_dispose__68683;
    id v24 = 0;
    uint64_t v5 = (void *)*((void *)v3 + 28);
    if (v5)
    {
      applier[0] = MEMORY[0x1E4F143A8];
      applier[1] = 3221225472;
      applier[2] = __nw_path_copy_inactive_agent_uuids_block_invoke;
      applier[3] = &unk_1E52480F8;
      char v18 = a2;
      void applier[4] = buf;
      xpc_dictionary_apply(v5, applier);
      id v6 = *(void **)(*(void *)&buf[8] + 40);
    }
    else
    {
      id v6 = 0;
    }
    id v7 = v6;
    _Block_object_dispose(buf, 8);

    goto LABEL_6;
  }
  nw_framer_t v9 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_path_copy_inactive_agent_uuids";
  id v10 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v19 = 0;
  if (__nwlog_fault(v10, &type, &v19))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_path_copy_inactive_agent_uuids";
        _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s called with null path", buf, 0xCu);
      }
    }
    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      char v11 = __nwlog_obj();
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_path_copy_inactive_agent_uuids";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v11, v14, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_path_copy_inactive_agent_uuids";
        _os_log_impl(&dword_1830D4000, v11, v14, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      char v11 = __nwlog_obj();
      os_log_type_t v16 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_path_copy_inactive_agent_uuids";
        _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_23:
  if (v10) {
    free(v10);
  }
  id v7 = 0;
LABEL_6:

  return v7;
}

void sub_1833EE458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);

  _Unwind_Resume(a1);
}

void nw_quic_save_0rtt_state_on_queue(void *a1, void *a2, void *a3)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  if (!v5)
  {
    os_log_type_t v12 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v39 = "nw_quic_save_0rtt_state_on_queue";
    uint64_t v13 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v36 = 0;
    if (__nwlog_fault(v13, &type, &v36))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v14 = __nwlog_obj();
        os_log_type_t v15 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)buf = 136446210;
          char v39 = "nw_quic_save_0rtt_state_on_queue";
          _os_log_impl(&dword_1830D4000, v14, v15, "%{public}s called with null association", buf, 0xCu);
        }
      }
      else if (v36)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v14 = __nwlog_obj();
        os_log_type_t v21 = type;
        BOOL v22 = os_log_type_enabled(v14, type);
        if (backtrace_string)
        {
          if (v22)
          {
            *(_DWORD *)buf = 136446466;
            char v39 = "nw_quic_save_0rtt_state_on_queue";
            __int16 v40 = 2082;
            uint64_t v41 = (uint64_t)backtrace_string;
            _os_log_impl(&dword_1830D4000, v14, v21, "%{public}s called with null association, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_51;
        }
        if (v22)
        {
          *(_DWORD *)buf = 136446210;
          char v39 = "nw_quic_save_0rtt_state_on_queue";
          _os_log_impl(&dword_1830D4000, v14, v21, "%{public}s called with null association, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        os_log_type_t v14 = __nwlog_obj();
        os_log_type_t v30 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)buf = 136446210;
          char v39 = "nw_quic_save_0rtt_state_on_queue";
          _os_log_impl(&dword_1830D4000, v14, v30, "%{public}s called with null association, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_51:
    if (v13) {
      free(v13);
    }
    goto LABEL_9;
  }
  if (nw_protocol_copy_quic_connection_definition::onceToken != -1) {
    dispatch_once(&nw_protocol_copy_quic_connection_definition::onceToken, &__block_literal_global_55981);
  }
  id v8 = (id)nw_protocol_copy_quic_connection_definition::quic_definition;
  if (!v8)
  {
    os_log_type_t v16 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v39 = "nw_quic_save_0rtt_state_on_queue";
    id v17 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v36 = 0;
    if (!__nwlog_fault(v17, &type, &v36)) {
      goto LABEL_62;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v18 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)buf = 136446210;
        char v39 = "nw_quic_save_0rtt_state_on_queue";
        _os_log_impl(&dword_1830D4000, v18, v19, "%{public}s called with null definition", buf, 0xCu);
      }
    }
    else if (v36)
    {
      BOOL v23 = (char *)__nw_create_backtrace_string();
      char v18 = __nwlog_obj();
      os_log_type_t v24 = type;
      BOOL v25 = os_log_type_enabled(v18, type);
      if (v23)
      {
        if (v25)
        {
          *(_DWORD *)buf = 136446466;
          char v39 = "nw_quic_save_0rtt_state_on_queue";
          __int16 v40 = 2082;
          uint64_t v41 = (uint64_t)v23;
          _os_log_impl(&dword_1830D4000, v18, v24, "%{public}s called with null definition, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v23);
LABEL_62:
        if (!v17) {
          goto LABEL_8;
        }
LABEL_63:
        free(v17);
        goto LABEL_8;
      }
      if (v25)
      {
        *(_DWORD *)buf = 136446210;
        char v39 = "nw_quic_save_0rtt_state_on_queue";
        _os_log_impl(&dword_1830D4000, v18, v24, "%{public}s called with null definition, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      char v18 = __nwlog_obj();
      os_log_type_t v31 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)buf = 136446210;
        char v39 = "nw_quic_save_0rtt_state_on_queue";
        _os_log_impl(&dword_1830D4000, v18, v31, "%{public}s called with null definition, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_61:

    goto LABEL_62;
  }
  uint64_t cached_content_for_protocol = nw_association_get_cached_content_for_protocol(v5, v8);
  if (cached_content_for_protocol
    || (uint64_t cached_content_for_protocol = (uint64_t)malloc_type_calloc(1uLL, 0x30uLL, 0xEAFB8F1AuLL)) != 0)
  {
    objc_storeStrong((id *)(cached_content_for_protocol + 8), a2);
    objc_storeStrong((id *)(cached_content_for_protocol + 16), a3);
    int64_t int64_with_default = networkd_settings_get_int64_with_default((const char *)nw_setting_quic_failure_cache_seconds, 1800);
    time_t v11 = time(0);
    nw_association_set_cached_content_for_protocol(v5, v8, cached_content_for_protocol, v11 + int64_with_default);
LABEL_8:

LABEL_9:
    return;
  }
  uint64_t v26 = __nwlog_obj();
  os_log_type_enabled(v26, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  char v39 = "strict_calloc";
  __int16 v40 = 2048;
  uint64_t v41 = 1;
  __int16 v42 = 2048;
  uint64_t v43 = 48;
  nw_endpoint_t v27 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v27))
  {
    free(v27);
    uint64_t v28 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v39 = "nw_quic_save_0rtt_state_on_queue";
    id v17 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v36 = 0;
    if (!__nwlog_fault(v17, &type, &v36)) {
      goto LABEL_62;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v18 = __nwlog_obj();
      os_log_type_t v29 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)buf = 136446210;
        char v39 = "nw_quic_save_0rtt_state_on_queue";
        _os_log_impl(&dword_1830D4000, v18, v29, "%{public}s called with null association_cache", buf, 0xCu);
      }
    }
    else if (v36)
    {
      uint64_t v32 = (char *)__nw_create_backtrace_string();
      char v18 = __nwlog_obj();
      os_log_type_t v33 = type;
      BOOL v34 = os_log_type_enabled(v18, type);
      if (v32)
      {
        if (v34)
        {
          *(_DWORD *)buf = 136446466;
          char v39 = "nw_quic_save_0rtt_state_on_queue";
          __int16 v40 = 2082;
          uint64_t v41 = (uint64_t)v32;
          _os_log_impl(&dword_1830D4000, v18, v33, "%{public}s called with null association_cache, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v32);
        if (!v17) {
          goto LABEL_8;
        }
        goto LABEL_63;
      }
      if (v34)
      {
        *(_DWORD *)buf = 136446210;
        char v39 = "nw_quic_save_0rtt_state_on_queue";
        _os_log_impl(&dword_1830D4000, v18, v33, "%{public}s called with null association_cache, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      char v18 = __nwlog_obj();
      os_log_type_t v35 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)buf = 136446210;
        char v39 = "nw_quic_save_0rtt_state_on_queue";
        _os_log_impl(&dword_1830D4000, v18, v35, "%{public}s called with null association_cache, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_61;
  }
  __break(1u);
}

void sub_1833EECB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_listener_inbox_accept_udp(uint64_t a1)
{
  id v1 = (void *)MEMORY[0x1F4188790](a1);
  id v3 = v2;
  id v5 = v4;
  id v7 = v6;
  nw_framer_t v9 = v8;
  time_t v11 = v10;
  int v13 = v12;
  uint64_t v314 = *MEMORY[0x1E4F143B8];
  os_log_type_t v14 = v1;
  object = v3;
  if (!v14)
  {
    id v135 = __nwlog_obj();
    int buffer = 136446210;
    id v311 = "nw_listener_inbox_accept_udp";
    __int16 v47 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(v307[0]) = 16;
    LOBYTE(buf) = 0;
    if (!__nwlog_fault(v47, v307, &buf)) {
      goto LABEL_80;
    }
    if (LOBYTE(v307[0]) == 17)
    {
      __int16 v136 = __nwlog_obj();
      os_log_type_t v137 = v307[0];
      if (os_log_type_enabled(v136, v307[0]))
      {
        int buffer = 136446210;
        id v311 = "nw_listener_inbox_accept_udp";
        _os_log_impl(&dword_1830D4000, v136, v137, "%{public}s called with null inbox", (uint8_t *)&buffer, 0xCu);
      }
    }
    else if ((_BYTE)buf)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __int16 v136 = __nwlog_obj();
      os_log_type_t v143 = v307[0];
      BOOL v144 = os_log_type_enabled(v136, v307[0]);
      if (backtrace_string)
      {
        if (v144)
        {
          int buffer = 136446466;
          id v311 = "nw_listener_inbox_accept_udp";
          __int16 v312 = 2082;
          v313 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v136, v143, "%{public}s called with null inbox, dumping backtrace:%{public}s", (uint8_t *)&buffer, 0x16u);
        }

        free(backtrace_string);
        if (!v47) {
          goto LABEL_82;
        }
        goto LABEL_81;
      }
      if (v144)
      {
        int buffer = 136446210;
        id v311 = "nw_listener_inbox_accept_udp";
        _os_log_impl(&dword_1830D4000, v136, v143, "%{public}s called with null inbox, no backtrace", (uint8_t *)&buffer, 0xCu);
      }
    }
    else
    {
      __int16 v136 = __nwlog_obj();
      os_log_type_t v159 = v307[0];
      if (os_log_type_enabled(v136, v307[0]))
      {
        int buffer = 136446210;
        id v311 = "nw_listener_inbox_accept_udp";
        _os_log_impl(&dword_1830D4000, v136, v159, "%{public}s called with null inbox, backtrace limit exceeded", (uint8_t *)&buffer, 0xCu);
      }
    }
    goto LABEL_299;
  }
  if (v14[88] != 17)
  {
    __int16 v138 = __nwlog_obj();
    int buffer = 136446210;
    id v311 = "nw_listener_inbox_accept_udp";
    __int16 v47 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(v307[0]) = 16;
    LOBYTE(buf) = 0;
    if (!__nwlog_fault(v47, v307, &buf)) {
      goto LABEL_80;
    }
    if (LOBYTE(v307[0]) == 17)
    {
      __int16 v136 = __nwlog_obj();
      os_log_type_t v139 = v307[0];
      if (os_log_type_enabled(v136, v307[0]))
      {
        int buffer = 136446210;
        id v311 = "nw_listener_inbox_accept_udp";
        _os_log_impl(&dword_1830D4000, v136, v139, "%{public}s called with null (inbox->_ipProtocol == 17)", (uint8_t *)&buffer, 0xCu);
      }
    }
    else if ((_BYTE)buf)
    {
      id v145 = (char *)__nw_create_backtrace_string();
      __int16 v136 = __nwlog_obj();
      os_log_type_t v146 = v307[0];
      BOOL v147 = os_log_type_enabled(v136, v307[0]);
      if (v145)
      {
        if (v147)
        {
          int buffer = 136446466;
          id v311 = "nw_listener_inbox_accept_udp";
          __int16 v312 = 2082;
          v313 = v145;
          _os_log_impl(&dword_1830D4000, v136, v146, "%{public}s called with null (inbox->_ipProtocol == 17), dumping backtrace:%{public}s", (uint8_t *)&buffer, 0x16u);
        }

        free(v145);
        goto LABEL_80;
      }
      if (v147)
      {
        int buffer = 136446210;
        id v311 = "nw_listener_inbox_accept_udp";
        _os_log_impl(&dword_1830D4000, v136, v146, "%{public}s called with null (inbox->_ipProtocol == 17), no backtrace", (uint8_t *)&buffer, 0xCu);
      }
    }
    else
    {
      __int16 v136 = __nwlog_obj();
      os_log_type_t v160 = v307[0];
      if (os_log_type_enabled(v136, v307[0]))
      {
        int buffer = 136446210;
        id v311 = "nw_listener_inbox_accept_udp";
        _os_log_impl(&dword_1830D4000, v136, v160, "%{public}s called with null (inbox->_ipProtocol == 17), backtrace limit exceeded", (uint8_t *)&buffer, 0xCu);
      }
    }
LABEL_299:

    goto LABEL_80;
  }
  bzero(&buffer, 0x2400uLL);
  v308[0] = 0;
  v308[1] = 0;
  char v309 = 0;
  *(void *)&v294.msg_iovlen = 1;
  memset(v307, 0, sizeof(v307));
  v294.msg_name = v7;
  *(void *)&v294.msg_namelen = 128;
  v295[0] = &buffer;
  v295[1] = 9216;
  v294.msg_iov = (iovec *)v295;
  v294.msg_control = v307;
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *(void *)&v294.msg_controllen = 0x8000000100;
  while (1)
  {
    ssize_t v16 = recvmsg(v13, &v294, 0);
    if ((v16 & 0x8000000000000000) == 0) {
      break;
    }
    int v17 = **(_DWORD **)(StatusReg + 8);
    if (v17 != 4)
    {
      if (v17 != 35)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        char v18 = (id)gLogObj;
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        {
          int buf = 136446466;
          v297 = "nw_listener_inbox_accept_udp";
          __int16 v298 = 1024;
          *(_DWORD *)nw_endpoint_t v299 = v17;
          _os_log_impl(&dword_1830D4000, v18, OS_LOG_TYPE_ERROR, "%{public}s UDP listen socket recvmsg %{darwin.errno}d", (uint8_t *)&buf, 0x12u);
        }

        os_log_type_t v19 = (void *)*((void *)v14 + 1);
        posix_CFErrorRef error = nw_error_create_posix_error(v17);
        [v19 handleInboxFailed:v14 error:posix_error];
      }
      goto LABEL_82;
    }
  }
  if (v9) {
    unsigned char *v9 = 1;
  }
  unsigned int v293 = 0;
  os_log_type_t v21 = nw_endpoint_get_address(*((nw_endpoint_t *)v14 + 4));
  memset(address, 0, sizeof(address));
  if (v294.msg_controllen < 0xC || (msg_control = (unsigned int *)v294.msg_control) == 0)
  {
LABEL_54:
    if (!if_indextoname(v293, (char *)v308)) {
      LOBYTE(v308[0]) = 0;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v45 = (id)gLogObj;
    int sa_len = v7->sa_len;
    int buf = 136448002;
    v297 = "nw_listener_inbox_accept_udp";
    __int16 v298 = 1024;
    *(_DWORD *)nw_endpoint_t v299 = v13;
    *(_WORD *)&v299[4] = 2048;
    *(void *)&v299[6] = v16;
    *(_WORD *)&v299[14] = 2080;
    *(void *)&v299[16] = v308;
    *(_WORD *)&v299[24] = 1040;
    *(_DWORD *)v300 = sa_len;
    *(_WORD *)&v300[4] = 2098;
    *(void *)&v300[6] = v7;
    __int16 v301 = 1040;
    int v302 = address[0];
    __int16 v303 = 2098;
    os_log_type_t v304 = address;
    __int16 v47 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    v283.int sa_len = 0;
    if (__nwlog_fault(v47, type, &v283))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v48 = (id)gLogObj;
        os_log_type_t v49 = type[0];
        if (os_log_type_enabled(v48, type[0]))
        {
          int v50 = v7->sa_len;
          int buf = 136448002;
          v297 = "nw_listener_inbox_accept_udp";
          __int16 v298 = 1024;
          *(_DWORD *)nw_endpoint_t v299 = v13;
          *(_WORD *)&v299[4] = 2048;
          *(void *)&v299[6] = v16;
          *(_WORD *)&v299[14] = 2080;
          *(void *)&v299[16] = v308;
          *(_WORD *)&v299[24] = 1040;
          *(_DWORD *)v300 = v50;
          *(_WORD *)&v300[4] = 2098;
          *(void *)&v300[6] = v7;
          __int16 v301 = 1040;
          int v302 = address[0];
          __int16 v303 = 2098;
          os_log_type_t v304 = address;
          _os_log_impl(&dword_1830D4000, v48, v49, "%{public}s recvmsg(%d) got %ld bytes on %s from %{public,network:sockaddr}.*P with bad local address %{public,network:sockaddr}.*P", (uint8_t *)&buf, 0x46u);
        }
LABEL_79:

        goto LABEL_80;
      }
      if (!v283.sa_len)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v48 = (id)gLogObj;
        os_log_type_t v55 = type[0];
        if (os_log_type_enabled(v48, type[0]))
        {
          int v56 = v7->sa_len;
          int buf = 136448002;
          v297 = "nw_listener_inbox_accept_udp";
          __int16 v298 = 1024;
          *(_DWORD *)nw_endpoint_t v299 = v13;
          *(_WORD *)&v299[4] = 2048;
          *(void *)&v299[6] = v16;
          *(_WORD *)&v299[14] = 2080;
          *(void *)&v299[16] = v308;
          *(_WORD *)&v299[24] = 1040;
          *(_DWORD *)v300 = v56;
          *(_WORD *)&v300[4] = 2098;
          *(void *)&v300[6] = v7;
          __int16 v301 = 1040;
          int v302 = address[0];
          __int16 v303 = 2098;
          os_log_type_t v304 = address;
          _os_log_impl(&dword_1830D4000, v48, v55, "%{public}s recvmsg(%d) got %ld bytes on %s from %{public,network:sockaddr}.*P with bad local address %{public,network:sockaddr}.*P, backtrace limit exceeded", (uint8_t *)&buf, 0x46u);
        }
        goto LABEL_79;
      }
      uint64_t v51 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v48 = (id)gLogObj;
      os_log_type_t v52 = type[0];
      BOOL v53 = os_log_type_enabled(v48, type[0]);
      if (!v51)
      {
        if (v53)
        {
          int v61 = v7->sa_len;
          int buf = 136448002;
          v297 = "nw_listener_inbox_accept_udp";
          __int16 v298 = 1024;
          *(_DWORD *)nw_endpoint_t v299 = v13;
          *(_WORD *)&v299[4] = 2048;
          *(void *)&v299[6] = v16;
          *(_WORD *)&v299[14] = 2080;
          *(void *)&v299[16] = v308;
          *(_WORD *)&v299[24] = 1040;
          *(_DWORD *)v300 = v61;
          *(_WORD *)&v300[4] = 2098;
          *(void *)&v300[6] = v7;
          __int16 v301 = 1040;
          int v302 = address[0];
          __int16 v303 = 2098;
          os_log_type_t v304 = address;
          _os_log_impl(&dword_1830D4000, v48, v52, "%{public}s recvmsg(%d) got %ld bytes on %s from %{public,network:sockaddr}.*P with bad local address %{public,network:sockaddr}.*P, no backtrace", (uint8_t *)&buf, 0x46u);
        }
        goto LABEL_79;
      }
      if (v53)
      {
        int v54 = v7->sa_len;
        int buf = 136448258;
        v297 = "nw_listener_inbox_accept_udp";
        __int16 v298 = 1024;
        *(_DWORD *)nw_endpoint_t v299 = v13;
        *(_WORD *)&v299[4] = 2048;
        *(void *)&v299[6] = v16;
        *(_WORD *)&v299[14] = 2080;
        *(void *)&v299[16] = v308;
        *(_WORD *)&v299[24] = 1040;
        *(_DWORD *)v300 = v54;
        *(_WORD *)&v300[4] = 2098;
        *(void *)&v300[6] = v7;
        __int16 v301 = 1040;
        int v302 = address[0];
        __int16 v303 = 2098;
        os_log_type_t v304 = address;
        __int16 v305 = 2082;
        v306 = v51;
        _os_log_impl(&dword_1830D4000, v48, v52, "%{public}s recvmsg(%d) got %ld bytes on %s from %{public,network:sockaddr}.*P with bad local address %{public,network:sockaddr}.*P, dumping backtrace:%{public}s", (uint8_t *)&buf, 0x50u);
      }

      free(v51);
      if (!v47) {
        goto LABEL_82;
      }
LABEL_81:
      free(v47);
      goto LABEL_82;
    }
LABEL_80:
    if (!v47) {
      goto LABEL_82;
    }
    goto LABEL_81;
  }
  BOOL v23 = v21;
  int v24 = 0;
  int v25 = 0;
  uint64_t v26 = (unsigned int *)((char *)v294.msg_control + v294.msg_controllen);
  do
  {
    int sa_family = v21->sa_family;
    if (sa_family == 2)
    {
      if (!msg_control[1])
      {
        unsigned int v32 = msg_control[2];
        if (v32 == 20)
        {
          unsigned int v293 = *((unsigned __int16 *)msg_control + 7);
        }
        else if (v32 == 7)
        {
          *(void *)address = 528;
          *(void *)&address[8] = 0;
          *(_DWORD *)&address[4] = msg_control[3];
          *(_WORD *)&address[2] = *(_WORD *)v21->sa_data;
          int v25 = 16;
          int v24 = 2;
        }
      }
    }
    else if (sa_family == 30 && msg_control[1] == 41 && msg_control[2] == 46)
    {
      *(void *)address = 7708;
      memset(&address[8], 0, 20);
      unsigned int v30 = msg_control[7];
      unsigned int v293 = v30;
      *(_OWORD *)&address[8] = *(_OWORD *)(msg_control + 3);
      if (address[8] != 254 || (address[9] & 0xC0) != 0x80) {
        unsigned int v30 = 0;
      }
      *(_DWORD *)&address[24] = v30;
      *(_WORD *)&address[2] = *(_WORD *)v21->sa_data;
      int v25 = 28;
      int v24 = 30;
    }
    if (v5)
    {
      unsigned int v31 = msg_control[1];
      if (v31 != 41)
      {
        if (v31 || msg_control[2] != 27) {
          goto LABEL_16;
        }
LABEL_15:
        _DWORD *v5 = msg_control[3];
        goto LABEL_16;
      }
      if (msg_control[2] == 36) {
        goto LABEL_15;
      }
    }
LABEL_16:
    nw_endpoint_t v27 = (unsigned int *)((char *)msg_control + ((*msg_control + 3) & 0x1FFFFFFFCLL));
    if (v27 + 3 <= v26)
    {
      BOOL v28 = v27 == msg_control;
    }
    else
    {
      nw_endpoint_t v27 = 0;
      BOOL v28 = 1;
    }
    msg_control = v27;
  }
  while (!v28);
  if (!v25 || !v24) {
    goto LABEL_54;
  }
  if (![v14 multicast])
  {
    if (v16)
    {
      os_log_type_t v272 = dispatch_data_create(&buffer, v16, 0, 0);

      if (!v272)
      {
        uint64_t v57 = __nwlog_obj();
        int buf = 136446210;
        v297 = "nw_listener_inbox_accept_udp";
        dispatch_qos_class_t v58 = (char *)_os_log_send_and_compose_impl();

        type[0] = OS_LOG_TYPE_ERROR;
        v283.int sa_len = 0;
        if (__nwlog_fault(v58, type, &v283))
        {
          if (type[0] == OS_LOG_TYPE_FAULT)
          {
            os_log_type_t v59 = __nwlog_obj();
            os_log_type_t v60 = type[0];
            if (os_log_type_enabled(v59, type[0]))
            {
              int buf = 136446210;
              v297 = "nw_listener_inbox_accept_udp";
              _os_log_impl(&dword_1830D4000, v59, v60, "%{public}s dispatch_data_create failed", (uint8_t *)&buf, 0xCu);
            }
          }
          else if (v283.sa_len)
          {
            BOOL v76 = (char *)__nw_create_backtrace_string();
            os_log_type_t v59 = __nwlog_obj();
            os_log_type_t v77 = type[0];
            BOOL v78 = os_log_type_enabled(v59, type[0]);
            if (v76)
            {
              if (v78)
              {
                int buf = 136446466;
                v297 = "nw_listener_inbox_accept_udp";
                __int16 v298 = 2082;
                *(void *)nw_endpoint_t v299 = v76;
                _os_log_impl(&dword_1830D4000, v59, v77, "%{public}s dispatch_data_create failed, dumping backtrace:%{public}s", (uint8_t *)&buf, 0x16u);
              }

              free(v76);
              goto LABEL_200;
            }
            if (v78)
            {
              int buf = 136446210;
              v297 = "nw_listener_inbox_accept_udp";
              _os_log_impl(&dword_1830D4000, v59, v77, "%{public}s dispatch_data_create failed, no backtrace", (uint8_t *)&buf, 0xCu);
            }
          }
          else
          {
            os_log_type_t v59 = __nwlog_obj();
            os_log_type_t v120 = type[0];
            if (os_log_type_enabled(v59, type[0]))
            {
              int buf = 136446210;
              v297 = "nw_listener_inbox_accept_udp";
              _os_log_impl(&dword_1830D4000, v59, v120, "%{public}s dispatch_data_create failed, backtrace limit exceeded", (uint8_t *)&buf, 0xCu);
            }
          }
        }
LABEL_200:
        if (v58) {
          free(v58);
        }
        os_log_type_t v65 = 0;
        goto LABEL_211;
      }
    }
    else
    {
      os_log_type_t v272 = MEMORY[0x1E4F14410];
      id v64 = MEMORY[0x1E4F14410];
    }
    if (object)
    {
      if (*((void *)object + 3) != *((void *)object + 2))
      {
        v287[0] = MEMORY[0x1E4F143A8];
        v287[1] = 3221225472;
        v287[2] = ___ZL28nw_listener_inbox_accept_udpP24nw_listener_inbox_socketiPiPbP8sockaddrjP16nw_ip_ecn_flag_tPU22objcproto11OS_nw_array8NSObject_block_invoke;
        v287[3] = &unk_1E5247F68;
        v289 = v7;
        v291[0] = *(_OWORD *)address;
        *(_OWORD *)((char *)v291 + 12) = *(_OWORD *)&address[12];
        os_log_type_t v65 = v272;
        os_log_type_t v288 = v65;
        v290 = v5;
        BOOL v66 = nw_array_apply(object, (uint64_t)v287);

        if (!v66)
        {
LABEL_211:
          BOOL v62 = 0;
LABEL_530:

          goto LABEL_83;
        }
      }
    }
    if (nw_parameters_get_upper_transport_protocol(*((void **)v14 + 6)) != 253) {
      goto LABEL_146;
    }
    v286 = 0;
    nw_endpoint_t v67 = nw_parameters_get_upper_transport_protocol_options(*((void **)v14 + 6));
    if (nw_protocol_options_is_quic_stream(v67))
    {
      int source_connection_id_length = nw_quic_get_source_connection_id_length(v67);
    }
    else
    {
      if (!nw_protocol_options_is_quic_connection(v67))
      {
        int v75 = 0;
        goto LABEL_126;
      }
      int source_connection_id_length = nw_quic_connection_get_source_connection_id_length(v67);
    }
    int v75 = source_connection_id_length;
LABEL_126:
    nw_endpoint_t v82 = __nwlog_obj();
    if (os_log_type_enabled(v82, OS_LOG_TYPE_DEBUG))
    {
      int buf = 136446466;
      v297 = "nw_listener_inbox_accept_udp";
      __int16 v298 = 1024;
      *(_DWORD *)nw_endpoint_t v299 = v75;
      _os_log_impl(&dword_1830D4000, v82, OS_LOG_TYPE_DEBUG, "%{public}s Using CID length %u", (uint8_t *)&buf, 0x12u);
    }

    if (nw_quic_parse_dispatch(v272, v75, (uint64_t)&v286) && if_indextoname(v293, (char *)v308))
    {
      id v83 = __nwlog_obj();
      if (os_log_type_enabled(v83, OS_LOG_TYPE_DEFAULT))
      {
        int buf = 136446722;
        v297 = "nw_listener_inbox_accept_udp";
        __int16 v298 = 2080;
        *(void *)nw_endpoint_t v299 = v308;
        *(_WORD *)&v299[8] = 2112;
        *(void *)&v299[10] = v286;
        _os_log_impl(&dword_1830D4000, v83, OS_LOG_TYPE_DEFAULT, "%{public}s Received QUIC short header packet on interface %s with CID %@", (uint8_t *)&buf, 0x20u);
      }

      nw_protocol_definition_t v264 = nw_protocol_copy_quic_definition();
      identifier = (long long *)nw_protocol_definition_get_identifier(v264);
      *(void *)&v283.int sa_len = 0;
      *(void *)&v283.sa_data[6] = 0;
      int v285 = 0;
      uint64_t v284 = 0;
      *(_WORD *)v283.sa_data = __rev16(nw_endpoint_get_port(*((nw_endpoint_t *)v14 + 4)));
      *(_WORD *)&v283.int sa_len = 7708;
      id v269 = nw_parameters_copy_context(*((void **)v14 + 6));
      nw_endpoint_t v261 = nw_endpoint_create_address(&v283);
      id v259 = nw_context_copy_registered_endpoint(v269, v261);
      id v85 = nw_endpoint_copy_registrar_for_identifier(v259, identifier, 0);
      id v86 = v85;
      if (v85)
      {
        quic_instance_by_id = (void *)nw_protocol_instance_registrar_find_quic_instance_by_id(v85, v286);
        if (quic_instance_by_id)
        {
          uint64_t v88 = __nwlog_obj();
          if (os_log_type_enabled(v88, OS_LOG_TYPE_INFO))
          {
            int buf = 136446210;
            v297 = "nw_listener_inbox_accept_udp";
            _os_log_impl(&dword_1830D4000, v88, OS_LOG_TYPE_INFO, "%{public}s Found an existing QUIC connection, adding a new path", (uint8_t *)&buf, 0xCu);
          }

          uint64_t v89 = quic_instance_by_id[3];
          if (!v89) {
            goto LABEL_268;
          }
          id v90 = *(void (**)(void *))(v89 + 120);
          if (!v90) {
            goto LABEL_268;
          }
          v258 = v90(quic_instance_by_id);
          id v91 = __nwlog_obj();
          if (os_log_type_enabled(v91, OS_LOG_TYPE_INFO))
          {
            int buf = 136446466;
            v297 = "nw_listener_inbox_accept_udp";
            __int16 v298 = 2112;
            *(void *)nw_endpoint_t v299 = v258;
            _os_log_impl(&dword_1830D4000, v91, OS_LOG_TYPE_INFO, "%{public}s QUIC protocol peer path %@", (uint8_t *)&buf, 0x16u);
          }

          id v92 = nw_interface_create_with_name((char *)v308);
          nw_endpoint_t v257 = nw_endpoint_create_address(v7);
          *(void *)os_log_type_t type = 0;
          os_log_type_t v280 = type;
          uint64_t v281 = 0x2020000000;
          v282 = 0;
          nw_endpoint_t v93 = malloc_type_calloc(1uLL, 0x10uLL, 0xEAFB8F1AuLL);
          if (!v93)
          {
            id v240 = __nwlog_obj();
            os_log_type_enabled(v240, OS_LOG_TYPE_ERROR);
            int buf = 136446722;
            v297 = "strict_calloc";
            __int16 v298 = 2048;
            *(void *)nw_endpoint_t v299 = 1;
            *(_WORD *)&v299[8] = 2048;
            *(void *)&v299[10] = 16;
            int v241 = (void *)_os_log_send_and_compose_impl();

            BOOL result = __nwlog_abort((uint64_t)v241);
            if (result)
            {
              __break(1u);
              return result;
            }
            free(v241);
          }
          v282 = v93;
          v276[0] = MEMORY[0x1E4F143A8];
          v276[1] = 3221225472;
          v276[2] = ___ZL28nw_listener_inbox_accept_udpP24nw_listener_inbox_socketiPiPbP8sockaddrjP16nw_ip_ecn_flag_tPU22objcproto11OS_nw_array8NSObject_block_invoke_95;
          v276[3] = &unk_1E5247F90;
          uint64_t v94 = v92;
          v277 = v94;
          v278 = type;
          nw_path_enumerate_interface_options(v258, v276);
          if (uuid_is_null(*((const unsigned __int8 **)v280 + 3)))
          {
            uint64_t v95 = __nwlog_obj();
            if (os_log_type_enabled(v95, OS_LOG_TYPE_INFO))
            {
              int buf = 136446210;
              v297 = "nw_listener_inbox_accept_udp";
              _os_log_impl(&dword_1830D4000, v95, OS_LOG_TYPE_INFO, "%{public}s Did not find a matching interface", (uint8_t *)&buf, 0xCu);
            }
            goto LABEL_265;
          }
          uint64_t v95 = nw_path_copy_flow_registration(v269, (uint64_t)quic_instance_by_id);
          char v134 = nw_interface_option_details_create(v94, *((_OWORD **)v280 + 3), v257, 0, v272, v13);
          os_log_type_t v256 = v134;
          if (v134)
          {
            nw_path_flow_registration_add_extra_interface_option(v95, v134);
          }
          else
          {
            v148 = __nwlog_obj();
            if (os_log_type_enabled(v148, OS_LOG_TYPE_ERROR))
            {
              uint64_t v149 = *((void *)v280 + 3);
              int buf = 136446978;
              v297 = "nw_listener_inbox_accept_udp";
              __int16 v298 = 2112;
              *(void *)nw_endpoint_t v299 = v94;
              *(_WORD *)&v299[8] = 1042;
              *(_DWORD *)&v299[10] = 16;
              *(_WORD *)&v299[14] = 2098;
              *(void *)&v299[16] = v149;
              _os_log_impl(&dword_1830D4000, v148, OS_LOG_TYPE_ERROR, "%{public}s Unable to create interface option details with %@ [%{public,uuid_t}.16P]", (uint8_t *)&buf, 0x26u);
            }
          }
          BOOL v150 = nw_path_flow_registration_copy_path(v95);
          uint64_t v151 = quic_instance_by_id[3];
          if (v151)
          {
            v152 = *(void (**)(void *, void, BOOL))(v151 + 168);
            if (v152)
            {
              v152(quic_instance_by_id, quic_instance_by_id[6], v150);
LABEL_264:

LABEL_265:
              id v153 = (void *)*((void *)v280 + 3);
              if (v153)
              {
                free(v153);
                *((void *)v280 + 3) = 0;
              }

              _Block_object_dispose(type, 8);
LABEL_268:

LABEL_529:
              BOOL v62 = 0;
              os_log_type_t v65 = v272;
              goto LABEL_530;
            }
          }
          v242 = __nwlog_obj();
          v243 = (const char *)quic_instance_by_id[2];
          if (!v243) {
            v243 = "invalid";
          }
          int buf = 136446466;
          v297 = "nw_listener_inbox_accept_udp";
          __int16 v298 = 2082;
          *(void *)nw_endpoint_t v299 = v243;
          int v255 = (char *)_os_log_send_and_compose_impl();

          os_log_type_t v275 = OS_LOG_TYPE_ERROR;
          char v274 = 0;
          if (__nwlog_fault(v255, &v275, &v274))
          {
            if (v275 == OS_LOG_TYPE_FAULT)
            {
              v244 = __nwlog_obj();
              os_log_type_t v245 = v275;
              if (os_log_type_enabled(v244, v275))
              {
                v246 = (const char *)quic_instance_by_id[2];
                if (!v246) {
                  v246 = "invalid";
                }
                int buf = 136446466;
                v297 = "nw_listener_inbox_accept_udp";
                __int16 v298 = 2082;
                *(void *)nw_endpoint_t v299 = v246;
                _os_log_impl(&dword_1830D4000, v244, v245, "%{public}s protocol %{public}s has invalid updated_path callback", (uint8_t *)&buf, 0x16u);
              }
            }
            else
            {
              if (v274)
              {
                v247 = (char *)__nw_create_backtrace_string();
                v248 = __nwlog_obj();
                os_log_type_t v254 = v275;
                BOOL v249 = os_log_type_enabled(v248, v275);
                if (v247)
                {
                  if (v249)
                  {
                    v250 = (const char *)quic_instance_by_id[2];
                    if (!v250) {
                      v250 = "invalid";
                    }
                    int buf = 136446722;
                    v297 = "nw_listener_inbox_accept_udp";
                    __int16 v298 = 2082;
                    *(void *)nw_endpoint_t v299 = v250;
                    *(_WORD *)&v299[8] = 2082;
                    *(void *)&v299[10] = v247;
                    _os_log_impl(&dword_1830D4000, v248, v254, "%{public}s protocol %{public}s has invalid updated_path callback, dumping backtrace:%{public}s", (uint8_t *)&buf, 0x20u);
                  }

                  free(v247);
                  goto LABEL_579;
                }
                if (v249)
                {
                  v253 = (const char *)quic_instance_by_id[2];
                  if (!v253) {
                    v253 = "invalid";
                  }
                  int buf = 136446466;
                  v297 = "nw_listener_inbox_accept_udp";
                  __int16 v298 = 2082;
                  *(void *)nw_endpoint_t v299 = v253;
                  _os_log_impl(&dword_1830D4000, v248, v254, "%{public}s protocol %{public}s has invalid updated_path callback, no backtrace", (uint8_t *)&buf, 0x16u);
                }
              }
              else
              {
                v248 = __nwlog_obj();
                os_log_type_t v251 = v275;
                if (os_log_type_enabled(v248, v275))
                {
                  v252 = (const char *)quic_instance_by_id[2];
                  if (!v252) {
                    v252 = "invalid";
                  }
                  int buf = 136446466;
                  v297 = "nw_listener_inbox_accept_udp";
                  __int16 v298 = 2082;
                  *(void *)nw_endpoint_t v299 = v252;
                  _os_log_impl(&dword_1830D4000, v248, v251, "%{public}s protocol %{public}s has invalid updated_path callback, backtrace limit exceeded", (uint8_t *)&buf, 0x16u);
                }
              }
            }
          }
LABEL_579:
          if (v255) {
            free(v255);
          }
          goto LABEL_264;
        }
      }
    }
LABEL_146:
    int v96 = socket(v23->sa_family, 2, 0);
    int v97 = v96;
    if ((v96 & 0x80000000) == 0)
    {
      *(_DWORD *)os_log_type_t type = 1;
      if (setsockopt(v96, 0xFFFF, 4, type, 4u))
      {
        int v98 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
        os_log_type_t v99 = __nwlog_obj();
        int buf = 136446466;
        v297 = "nw_listener_inbox_accept_udp";
        __int16 v298 = 1024;
        *(_DWORD *)nw_endpoint_t v299 = v98;
        uint64_t v100 = (char *)_os_log_send_and_compose_impl();

        v283.int sa_len = 16;
        LOBYTE(v286) = 0;
        if (!__nwlog_fault(v100, &v283, &v286)) {
          goto LABEL_526;
        }
        if (v283.sa_len == 17)
        {
          __int16 v101 = __nwlog_obj();
          os_log_type_t v102 = v283.sa_len;
          if (os_log_type_enabled(v101, (os_log_type_t)v283.sa_len))
          {
            int buf = 136446466;
            v297 = "nw_listener_inbox_accept_udp";
            __int16 v298 = 1024;
            *(_DWORD *)nw_endpoint_t v299 = v98;
            _os_log_impl(&dword_1830D4000, v101, v102, "%{public}s SO_REUSEADDR failed %{darwin.errno}d", (uint8_t *)&buf, 0x12u);
          }
          goto LABEL_525;
        }
        if (!(_BYTE)v286)
        {
          __int16 v101 = __nwlog_obj();
          os_log_type_t v121 = v283.sa_len;
          if (os_log_type_enabled(v101, (os_log_type_t)v283.sa_len))
          {
            int buf = 136446466;
            v297 = "nw_listener_inbox_accept_udp";
            __int16 v298 = 1024;
            *(_DWORD *)nw_endpoint_t v299 = v98;
            _os_log_impl(&dword_1830D4000, v101, v121, "%{public}s SO_REUSEADDR failed %{darwin.errno}d, backtrace limit exceeded", (uint8_t *)&buf, 0x12u);
          }
          goto LABEL_525;
        }
        char v111 = (char *)__nw_create_backtrace_string();
        __int16 v101 = __nwlog_obj();
        os_log_type_t v112 = v283.sa_len;
        BOOL v113 = os_log_type_enabled(v101, (os_log_type_t)v283.sa_len);
        if (!v111)
        {
          if (v113)
          {
            int buf = 136446466;
            v297 = "nw_listener_inbox_accept_udp";
            __int16 v298 = 1024;
            *(_DWORD *)nw_endpoint_t v299 = v98;
            _os_log_impl(&dword_1830D4000, v101, v112, "%{public}s SO_REUSEADDR failed %{darwin.errno}d, no backtrace", (uint8_t *)&buf, 0x12u);
          }
          goto LABEL_525;
        }
        if (v113)
        {
          int buf = 136446722;
          v297 = "nw_listener_inbox_accept_udp";
          __int16 v298 = 1024;
          *(_DWORD *)nw_endpoint_t v299 = v98;
          *(_WORD *)&v299[4] = 2082;
          *(void *)&v299[6] = v111;
          _os_log_impl(&dword_1830D4000, v101, v112, "%{public}s SO_REUSEADDR failed %{darwin.errno}d, dumping backtrace:%{public}s", (uint8_t *)&buf, 0x1Cu);
        }
LABEL_192:

        free(v111);
        if (!v100) {
          goto LABEL_528;
        }
        goto LABEL_527;
      }
      if (setsockopt(v97, 0xFFFF, 512, type, 4u))
      {
        int v108 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
        v109 = __nwlog_obj();
        int buf = 136446466;
        v297 = "nw_listener_inbox_accept_udp";
        __int16 v298 = 1024;
        *(_DWORD *)nw_endpoint_t v299 = v108;
        uint64_t v100 = (char *)_os_log_send_and_compose_impl();

        v283.int sa_len = 16;
        LOBYTE(v286) = 0;
        if (!__nwlog_fault(v100, &v283, &v286)) {
          goto LABEL_526;
        }
        if (v283.sa_len == 17)
        {
          __int16 v101 = __nwlog_obj();
          os_log_type_t v110 = v283.sa_len;
          if (os_log_type_enabled(v101, (os_log_type_t)v283.sa_len))
          {
            int buf = 136446466;
            v297 = "nw_listener_inbox_accept_udp";
            __int16 v298 = 1024;
            *(_DWORD *)nw_endpoint_t v299 = v108;
            _os_log_impl(&dword_1830D4000, v101, v110, "%{public}s SO_REUSEPORT failed %{darwin.errno}d", (uint8_t *)&buf, 0x12u);
          }
          goto LABEL_525;
        }
        if (!(_BYTE)v286)
        {
          __int16 v101 = __nwlog_obj();
          os_log_type_t v133 = v283.sa_len;
          if (os_log_type_enabled(v101, (os_log_type_t)v283.sa_len))
          {
            int buf = 136446466;
            v297 = "nw_listener_inbox_accept_udp";
            __int16 v298 = 1024;
            *(_DWORD *)nw_endpoint_t v299 = v108;
            _os_log_impl(&dword_1830D4000, v101, v133, "%{public}s SO_REUSEPORT failed %{darwin.errno}d, backtrace limit exceeded", (uint8_t *)&buf, 0x12u);
          }
          goto LABEL_525;
        }
        char v111 = (char *)__nw_create_backtrace_string();
        __int16 v101 = __nwlog_obj();
        os_log_type_t v122 = v283.sa_len;
        BOOL v123 = os_log_type_enabled(v101, (os_log_type_t)v283.sa_len);
        if (!v111)
        {
          if (v123)
          {
            int buf = 136446466;
            v297 = "nw_listener_inbox_accept_udp";
            __int16 v298 = 1024;
            *(_DWORD *)nw_endpoint_t v299 = v108;
            _os_log_impl(&dword_1830D4000, v101, v122, "%{public}s SO_REUSEPORT failed %{darwin.errno}d, no backtrace", (uint8_t *)&buf, 0x12u);
          }
          goto LABEL_525;
        }
        if (v123)
        {
          int buf = 136446722;
          v297 = "nw_listener_inbox_accept_udp";
          __int16 v298 = 1024;
          *(_DWORD *)nw_endpoint_t v299 = v108;
          *(_WORD *)&v299[4] = 2082;
          *(void *)&v299[6] = v111;
          _os_log_impl(&dword_1830D4000, v101, v122, "%{public}s SO_REUSEPORT failed %{darwin.errno}d, dumping backtrace:%{public}s", (uint8_t *)&buf, 0x1Cu);
        }
        goto LABEL_192;
      }
      if (ioctl(v97, 0x8004667EuLL, type) < 0)
      {
        int v130 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
        v131 = __nwlog_obj();
        int buf = 136446466;
        v297 = "nw_listener_inbox_accept_udp";
        __int16 v298 = 1024;
        *(_DWORD *)nw_endpoint_t v299 = v130;
        uint64_t v100 = (char *)_os_log_send_and_compose_impl();

        v283.int sa_len = 16;
        LOBYTE(v286) = 0;
        if (!__nwlog_fault(v100, &v283, &v286)) {
          goto LABEL_526;
        }
        if (v283.sa_len == 17)
        {
          __int16 v101 = __nwlog_obj();
          os_log_type_t v132 = v283.sa_len;
          if (os_log_type_enabled(v101, (os_log_type_t)v283.sa_len))
          {
            int buf = 136446466;
            v297 = "nw_listener_inbox_accept_udp";
            __int16 v298 = 1024;
            *(_DWORD *)nw_endpoint_t v299 = v130;
            _os_log_impl(&dword_1830D4000, v101, v132, "%{public}s FIONBIO failed %{darwin.errno}d", (uint8_t *)&buf, 0x12u);
          }
          goto LABEL_525;
        }
        if (!(_BYTE)v286)
        {
          __int16 v101 = __nwlog_obj();
          os_log_type_t v156 = v283.sa_len;
          if (os_log_type_enabled(v101, (os_log_type_t)v283.sa_len))
          {
            int buf = 136446466;
            v297 = "nw_listener_inbox_accept_udp";
            __int16 v298 = 1024;
            *(_DWORD *)nw_endpoint_t v299 = v130;
            _os_log_impl(&dword_1830D4000, v101, v156, "%{public}s FIONBIO failed %{darwin.errno}d, backtrace limit exceeded", (uint8_t *)&buf, 0x12u);
          }
          goto LABEL_525;
        }
        char v111 = (char *)__nw_create_backtrace_string();
        __int16 v101 = __nwlog_obj();
        os_log_type_t v140 = v283.sa_len;
        BOOL v141 = os_log_type_enabled(v101, (os_log_type_t)v283.sa_len);
        if (!v111)
        {
          if (v141)
          {
            int buf = 136446466;
            v297 = "nw_listener_inbox_accept_udp";
            __int16 v298 = 1024;
            *(_DWORD *)nw_endpoint_t v299 = v130;
            _os_log_impl(&dword_1830D4000, v101, v140, "%{public}s FIONBIO failed %{darwin.errno}d, no backtrace", (uint8_t *)&buf, 0x12u);
          }
          goto LABEL_525;
        }
        if (v141)
        {
          int buf = 136446722;
          v297 = "nw_listener_inbox_accept_udp";
          __int16 v298 = 1024;
          *(_DWORD *)nw_endpoint_t v299 = v130;
          *(_WORD *)&v299[4] = 2082;
          *(void *)&v299[6] = v111;
          _os_log_impl(&dword_1830D4000, v101, v140, "%{public}s FIONBIO failed %{darwin.errno}d, dumping backtrace:%{public}s", (uint8_t *)&buf, 0x1Cu);
        }
        goto LABEL_192;
      }
      if (nw_parameters_get_use_awdl(*((void **)v14 + 6)) && setsockopt(v97, 0xFFFF, 4356, type, 4u))
      {
        int v117 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
        os_log_type_t v118 = __nwlog_obj();
        int buf = 136446466;
        v297 = "nw_listener_inbox_accept_udp";
        __int16 v298 = 1024;
        *(_DWORD *)nw_endpoint_t v299 = v117;
        uint64_t v100 = (char *)_os_log_send_and_compose_impl();

        v283.int sa_len = 16;
        LOBYTE(v286) = 0;
        if (!__nwlog_fault(v100, &v283, &v286)) {
          goto LABEL_526;
        }
        if (v283.sa_len == 17)
        {
          __int16 v101 = __nwlog_obj();
          os_log_type_t v119 = v283.sa_len;
          if (os_log_type_enabled(v101, (os_log_type_t)v283.sa_len))
          {
            int buf = 136446466;
            v297 = "nw_listener_inbox_accept_udp";
            __int16 v298 = 1024;
            *(_DWORD *)nw_endpoint_t v299 = v117;
            _os_log_impl(&dword_1830D4000, v101, v119, "%{public}s SO_RECV_ANYIF failed %{darwin.errno}d", (uint8_t *)&buf, 0x12u);
          }
          goto LABEL_525;
        }
        if (!(_BYTE)v286)
        {
          __int16 v101 = __nwlog_obj();
          os_log_type_t v161 = v283.sa_len;
          if (os_log_type_enabled(v101, (os_log_type_t)v283.sa_len))
          {
            int buf = 136446466;
            v297 = "nw_listener_inbox_accept_udp";
            __int16 v298 = 1024;
            *(_DWORD *)nw_endpoint_t v299 = v117;
            _os_log_impl(&dword_1830D4000, v101, v161, "%{public}s SO_RECV_ANYIF failed %{darwin.errno}d, backtrace limit exceeded", (uint8_t *)&buf, 0x12u);
          }
          goto LABEL_525;
        }
        char v111 = (char *)__nw_create_backtrace_string();
        __int16 v101 = __nwlog_obj();
        os_log_type_t v154 = v283.sa_len;
        BOOL v155 = os_log_type_enabled(v101, (os_log_type_t)v283.sa_len);
        if (!v111)
        {
          if (v155)
          {
            int buf = 136446466;
            v297 = "nw_listener_inbox_accept_udp";
            __int16 v298 = 1024;
            *(_DWORD *)nw_endpoint_t v299 = v117;
            _os_log_impl(&dword_1830D4000, v101, v154, "%{public}s SO_RECV_ANYIF failed %{darwin.errno}d, no backtrace", (uint8_t *)&buf, 0x12u);
          }
          goto LABEL_525;
        }
        if (v155)
        {
          int buf = 136446722;
          v297 = "nw_listener_inbox_accept_udp";
          __int16 v298 = 1024;
          *(_DWORD *)nw_endpoint_t v299 = v117;
          *(_WORD *)&v299[4] = 2082;
          *(void *)&v299[6] = v111;
          _os_log_impl(&dword_1830D4000, v101, v154, "%{public}s SO_RECV_ANYIF failed %{darwin.errno}d, dumping backtrace:%{public}s", (uint8_t *)&buf, 0x1Cu);
        }
        goto LABEL_192;
      }
      if (!nw_parameters_get_no_wake_from_sleep(*((void **)v14 + 6))
        || !setsockopt(v97, 0xFFFF, 0x10000, type, 4u))
      {
LABEL_311:
        BOOL v163 = (void *)*((void *)v14 + 5);
        if (v163 && nw_interface_get_subtype(v163) == 4001 && setsockopt(v97, 0xFFFF, 4376, type, 4u))
        {
          int v164 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
          BOOL v165 = __nwlog_obj();
          int buf = 136446722;
          v297 = "nw_listener_inbox_accept_udp";
          __int16 v298 = 1024;
          *(_DWORD *)nw_endpoint_t v299 = v97;
          *(_WORD *)&v299[4] = 1024;
          *(_DWORD *)&v299[6] = v164;
          uint64_t v100 = (char *)_os_log_send_and_compose_impl();

          v283.int sa_len = 16;
          LOBYTE(v286) = 0;
          if (!__nwlog_fault(v100, &v283, &v286)) {
            goto LABEL_526;
          }
          if (v283.sa_len == 17)
          {
            __int16 v101 = __nwlog_obj();
            os_log_type_t v166 = v283.sa_len;
            if (os_log_type_enabled(v101, (os_log_type_t)v283.sa_len))
            {
              int buf = 136446722;
              v297 = "nw_listener_inbox_accept_udp";
              __int16 v298 = 1024;
              *(_DWORD *)nw_endpoint_t v299 = v97;
              *(_WORD *)&v299[4] = 1024;
              *(_DWORD *)&v299[6] = v164;
              _os_log_impl(&dword_1830D4000, v101, v166, "%{public}s setsockopt(%d, SO_INTCOPROC_ALLOW, 1) failed %{darwin.errno}d", (uint8_t *)&buf, 0x18u);
            }
            goto LABEL_525;
          }
          if (!(_BYTE)v286)
          {
            __int16 v101 = __nwlog_obj();
            os_log_type_t v189 = v283.sa_len;
            if (os_log_type_enabled(v101, (os_log_type_t)v283.sa_len))
            {
              int buf = 136446722;
              v297 = "nw_listener_inbox_accept_udp";
              __int16 v298 = 1024;
              *(_DWORD *)nw_endpoint_t v299 = v97;
              *(_WORD *)&v299[4] = 1024;
              *(_DWORD *)&v299[6] = v164;
              _os_log_impl(&dword_1830D4000, v101, v189, "%{public}s setsockopt(%d, SO_INTCOPROC_ALLOW, 1) failed %{darwin.errno}d, backtrace limit exceeded", (uint8_t *)&buf, 0x18u);
            }
            goto LABEL_525;
          }
          char v111 = (char *)__nw_create_backtrace_string();
          __int16 v101 = __nwlog_obj();
          os_log_type_t v181 = v283.sa_len;
          BOOL v182 = os_log_type_enabled(v101, (os_log_type_t)v283.sa_len);
          if (!v111)
          {
            if (v182)
            {
              int buf = 136446722;
              v297 = "nw_listener_inbox_accept_udp";
              __int16 v298 = 1024;
              *(_DWORD *)nw_endpoint_t v299 = v97;
              *(_WORD *)&v299[4] = 1024;
              *(_DWORD *)&v299[6] = v164;
              _os_log_impl(&dword_1830D4000, v101, v181, "%{public}s setsockopt(%d, SO_INTCOPROC_ALLOW, 1) failed %{darwin.errno}d, no backtrace", (uint8_t *)&buf, 0x18u);
            }
            goto LABEL_525;
          }
          if (v182)
          {
            int buf = 136446978;
            v297 = "nw_listener_inbox_accept_udp";
            __int16 v298 = 1024;
            *(_DWORD *)nw_endpoint_t v299 = v97;
            *(_WORD *)&v299[4] = 1024;
            *(_DWORD *)&v299[6] = v164;
            *(_WORD *)&v299[10] = 2082;
            *(void *)&v299[12] = v111;
            _os_log_impl(&dword_1830D4000, v101, v181, "%{public}s setsockopt(%d, SO_INTCOPROC_ALLOW, 1) failed %{darwin.errno}d, dumping backtrace:%{public}s", (uint8_t *)&buf, 0x22u);
          }
          goto LABEL_192;
        }
        if (v293)
        {
          int v167 = v23->sa_family;
          if (v167 == 30)
          {
            if (setsockopt(v97, 41, 125, &v293, 4u))
            {
              int v171 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
              v172 = __nwlog_obj();
              os_log_type_t v170 = v172;
              if (v171 != 6)
              {
                int buf = 136446722;
                v297 = "nw_listener_inbox_accept_udp";
                __int16 v298 = 1024;
                *(_DWORD *)nw_endpoint_t v299 = v293;
                *(_WORD *)&v299[4] = 1024;
                *(_DWORD *)&v299[6] = v171;
                uint64_t v100 = (char *)_os_log_send_and_compose_impl();

                v283.int sa_len = 16;
                LOBYTE(v286) = 0;
                if (!__nwlog_fault(v100, &v283, &v286)) {
                  goto LABEL_526;
                }
                if (v283.sa_len == 17)
                {
                  __int16 v101 = __nwlog_obj();
                  os_log_type_t v184 = v283.sa_len;
                  if (os_log_type_enabled(v101, (os_log_type_t)v283.sa_len))
                  {
                    int buf = 136446722;
                    v297 = "nw_listener_inbox_accept_udp";
                    __int16 v298 = 1024;
                    *(_DWORD *)nw_endpoint_t v299 = v293;
                    *(_WORD *)&v299[4] = 1024;
                    *(_DWORD *)&v299[6] = v171;
                    _os_log_impl(&dword_1830D4000, v101, v184, "%{public}s IPV6_BOUND_IF %u failed %{darwin.errno}d", (uint8_t *)&buf, 0x18u);
                  }
                  goto LABEL_525;
                }
                if (!(_BYTE)v286)
                {
                  __int16 v101 = __nwlog_obj();
                  os_log_type_t v205 = v283.sa_len;
                  if (os_log_type_enabled(v101, (os_log_type_t)v283.sa_len))
                  {
                    int buf = 136446722;
                    v297 = "nw_listener_inbox_accept_udp";
                    __int16 v298 = 1024;
                    *(_DWORD *)nw_endpoint_t v299 = v293;
                    *(_WORD *)&v299[4] = 1024;
                    *(_DWORD *)&v299[6] = v171;
                    _os_log_impl(&dword_1830D4000, v101, v205, "%{public}s IPV6_BOUND_IF %u failed %{darwin.errno}d, backtrace limit exceeded", (uint8_t *)&buf, 0x18u);
                  }
                  goto LABEL_525;
                }
                char v111 = (char *)__nw_create_backtrace_string();
                __int16 v101 = __nwlog_obj();
                os_log_type_t v192 = v283.sa_len;
                BOOL v193 = os_log_type_enabled(v101, (os_log_type_t)v283.sa_len);
                if (!v111)
                {
                  if (v193)
                  {
                    int buf = 136446722;
                    v297 = "nw_listener_inbox_accept_udp";
                    __int16 v298 = 1024;
                    *(_DWORD *)nw_endpoint_t v299 = v293;
                    *(_WORD *)&v299[4] = 1024;
                    *(_DWORD *)&v299[6] = v171;
                    _os_log_impl(&dword_1830D4000, v101, v192, "%{public}s IPV6_BOUND_IF %u failed %{darwin.errno}d, no backtrace", (uint8_t *)&buf, 0x18u);
                  }
                  goto LABEL_525;
                }
                if (v193)
                {
                  int buf = 136446978;
                  v297 = "nw_listener_inbox_accept_udp";
                  __int16 v298 = 1024;
                  *(_DWORD *)nw_endpoint_t v299 = v293;
                  *(_WORD *)&v299[4] = 1024;
                  *(_DWORD *)&v299[6] = v171;
                  *(_WORD *)&v299[10] = 2082;
                  *(void *)&v299[12] = v111;
                  _os_log_impl(&dword_1830D4000, v101, v192, "%{public}s IPV6_BOUND_IF %u failed %{darwin.errno}d, dumping backtrace:%{public}s", (uint8_t *)&buf, 0x22u);
                }
                goto LABEL_192;
              }
              if (os_log_type_enabled(v172, OS_LOG_TYPE_ERROR))
              {
                int buf = 136446722;
                v297 = "nw_listener_inbox_accept_udp";
                __int16 v298 = 1024;
                *(_DWORD *)nw_endpoint_t v299 = v293;
                *(_WORD *)&v299[4] = 1024;
                *(_DWORD *)&v299[6] = 6;
                _os_log_impl(&dword_1830D4000, v170, OS_LOG_TYPE_ERROR, "%{public}s IPV6_BOUND_IF %u failed %{darwin.errno}d", (uint8_t *)&buf, 0x18u);
              }
              goto LABEL_326;
            }
          }
          else
          {
            if (v167 != 2) {
              goto LABEL_333;
            }
            if (setsockopt(v97, 0, 25, &v293, 4u))
            {
              int v168 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
              id v169 = __nwlog_obj();
              os_log_type_t v170 = v169;
              if (v168 != 6)
              {
                int buf = 136446722;
                v297 = "nw_listener_inbox_accept_udp";
                __int16 v298 = 1024;
                *(_DWORD *)nw_endpoint_t v299 = v293;
                *(_WORD *)&v299[4] = 1024;
                *(_DWORD *)&v299[6] = v168;
                uint64_t v100 = (char *)_os_log_send_and_compose_impl();

                v283.int sa_len = 16;
                LOBYTE(v286) = 0;
                if (!__nwlog_fault(v100, &v283, &v286)) {
                  goto LABEL_526;
                }
                if (v283.sa_len == 17)
                {
                  __int16 v101 = __nwlog_obj();
                  os_log_type_t v183 = v283.sa_len;
                  if (os_log_type_enabled(v101, (os_log_type_t)v283.sa_len))
                  {
                    int buf = 136446722;
                    v297 = "nw_listener_inbox_accept_udp";
                    __int16 v298 = 1024;
                    *(_DWORD *)nw_endpoint_t v299 = v293;
                    *(_WORD *)&v299[4] = 1024;
                    *(_DWORD *)&v299[6] = v168;
                    _os_log_impl(&dword_1830D4000, v101, v183, "%{public}s IP_BOUND_IF %u failed %{darwin.errno}d", (uint8_t *)&buf, 0x18u);
                  }
                  goto LABEL_525;
                }
                if (!(_BYTE)v286)
                {
                  __int16 v101 = __nwlog_obj();
                  os_log_type_t v204 = v283.sa_len;
                  if (os_log_type_enabled(v101, (os_log_type_t)v283.sa_len))
                  {
                    int buf = 136446722;
                    v297 = "nw_listener_inbox_accept_udp";
                    __int16 v298 = 1024;
                    *(_DWORD *)nw_endpoint_t v299 = v293;
                    *(_WORD *)&v299[4] = 1024;
                    *(_DWORD *)&v299[6] = v168;
                    _os_log_impl(&dword_1830D4000, v101, v204, "%{public}s IP_BOUND_IF %u failed %{darwin.errno}d, backtrace limit exceeded", (uint8_t *)&buf, 0x18u);
                  }
                  goto LABEL_525;
                }
                char v111 = (char *)__nw_create_backtrace_string();
                __int16 v101 = __nwlog_obj();
                os_log_type_t v190 = v283.sa_len;
                BOOL v191 = os_log_type_enabled(v101, (os_log_type_t)v283.sa_len);
                if (!v111)
                {
                  if (v191)
                  {
                    int buf = 136446722;
                    v297 = "nw_listener_inbox_accept_udp";
                    __int16 v298 = 1024;
                    *(_DWORD *)nw_endpoint_t v299 = v293;
                    *(_WORD *)&v299[4] = 1024;
                    *(_DWORD *)&v299[6] = v168;
                    _os_log_impl(&dword_1830D4000, v101, v190, "%{public}s IP_BOUND_IF %u failed %{darwin.errno}d, no backtrace", (uint8_t *)&buf, 0x18u);
                  }
                  goto LABEL_525;
                }
                if (v191)
                {
                  int buf = 136446978;
                  v297 = "nw_listener_inbox_accept_udp";
                  __int16 v298 = 1024;
                  *(_DWORD *)nw_endpoint_t v299 = v293;
                  *(_WORD *)&v299[4] = 1024;
                  *(_DWORD *)&v299[6] = v168;
                  *(_WORD *)&v299[10] = 2082;
                  *(void *)&v299[12] = v111;
                  _os_log_impl(&dword_1830D4000, v101, v190, "%{public}s IP_BOUND_IF %u failed %{darwin.errno}d, dumping backtrace:%{public}s", (uint8_t *)&buf, 0x22u);
                }
                goto LABEL_192;
              }
              if (os_log_type_enabled(v169, OS_LOG_TYPE_ERROR))
              {
                int buf = 136446722;
                v297 = "nw_listener_inbox_accept_udp";
                __int16 v298 = 1024;
                *(_DWORD *)nw_endpoint_t v299 = v293;
                *(_WORD *)&v299[4] = 1024;
                *(_DWORD *)&v299[6] = 6;
                _os_log_impl(&dword_1830D4000, v170, OS_LOG_TYPE_ERROR, "%{public}s IP_BOUND_IF %u failed %{darwin.errno}d", (uint8_t *)&buf, 0x18u);
              }
LABEL_326:

              goto LABEL_528;
            }
          }
        }
        int v167 = v23->sa_family;
LABEL_333:
        if (v167 == 2)
        {
          if ((setsockopt(v97, 0, 27, type, 4u) & 0x80000000) == 0) {
            goto LABEL_424;
          }
          int v178 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
          v179 = __nwlog_obj();
          int buf = 136446466;
          v297 = "nw_listener_inbox_accept_udp";
          __int16 v298 = 1024;
          *(_DWORD *)nw_endpoint_t v299 = v178;
          v175 = (char *)_os_log_send_and_compose_impl();

          v283.int sa_len = 16;
          LOBYTE(v286) = 0;
          if (!__nwlog_fault(v175, &v283, &v286)) {
            goto LABEL_422;
          }
          if (v283.sa_len == 17)
          {
            v176 = __nwlog_obj();
            os_log_type_t v180 = v283.sa_len;
            if (os_log_type_enabled(v176, (os_log_type_t)v283.sa_len))
            {
              int buf = 136446466;
              v297 = "nw_listener_inbox_accept_udp";
              __int16 v298 = 1024;
              *(_DWORD *)nw_endpoint_t v299 = v178;
              _os_log_impl(&dword_1830D4000, v176, v180, "%{public}s IP_RECVTOS failed %{darwin.errno}d", (uint8_t *)&buf, 0x12u);
            }
          }
          else if ((_BYTE)v286)
          {
            uint64_t v187 = (char *)__nw_create_backtrace_string();
            v176 = __nwlog_obj();
            os_log_type_t v266 = v283.sa_len;
            BOOL v188 = os_log_type_enabled(v176, (os_log_type_t)v283.sa_len);
            if (v187)
            {
              if (v188)
              {
                int buf = 136446722;
                v297 = "nw_listener_inbox_accept_udp";
                __int16 v298 = 1024;
                *(_DWORD *)nw_endpoint_t v299 = v178;
                *(_WORD *)&v299[4] = 2082;
                *(void *)&v299[6] = v187;
                _os_log_impl(&dword_1830D4000, v176, v266, "%{public}s IP_RECVTOS failed %{darwin.errno}d, dumping backtrace:%{public}s", (uint8_t *)&buf, 0x1Cu);
              }

              free(v187);
LABEL_422:
              if (v175) {
LABEL_423:
              }
                free(v175);
LABEL_424:
              if (uuid_is_null((const unsigned __int8 *)v14 + 89) || !setsockopt(v97, 0xFFFF, 4384, v14 + 89, 0x10u)) {
                goto LABEL_431;
              }
              unsigned int v206 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
              if (v206 <= 0x2A && ((1 << v206) & 0x40000400004) != 0)
              {
                __int16 v207 = __nwlog_obj();
                if (os_log_type_enabled(v207, OS_LOG_TYPE_ERROR))
                {
                  int buf = 136446466;
                  v297 = "nw_listener_inbox_accept_udp";
                  __int16 v298 = 1024;
                  *(_DWORD *)nw_endpoint_t v299 = v206;
                  _os_log_impl(&dword_1830D4000, v207, OS_LOG_TYPE_ERROR, "%{public}s setsockopt SO_NECP_LISTENUUID failed %{darwin.errno}d", (uint8_t *)&buf, 0x12u);
                }

                goto LABEL_431;
              }
              id v215 = __nwlog_obj();
              int buf = 136446466;
              v297 = "nw_listener_inbox_accept_udp";
              __int16 v298 = 1024;
              *(_DWORD *)nw_endpoint_t v299 = v206;
              uint64_t v216 = (char *)_os_log_send_and_compose_impl();

              v283.int sa_len = 16;
              LOBYTE(v286) = 0;
              if (__nwlog_fault(v216, &v283, &v286))
              {
                if (v283.sa_len == 17)
                {
                  uint64_t v217 = __nwlog_obj();
                  os_log_type_t v218 = v283.sa_len;
                  if (os_log_type_enabled(v217, (os_log_type_t)v283.sa_len))
                  {
                    int buf = 136446466;
                    v297 = "nw_listener_inbox_accept_udp";
                    __int16 v298 = 1024;
                    *(_DWORD *)nw_endpoint_t v299 = v206;
                    _os_log_impl(&dword_1830D4000, v217, v218, "%{public}s setsockopt SO_NECP_LISTENUUID failed %{darwin.errno}d", (uint8_t *)&buf, 0x12u);
                  }
                }
                else if ((_BYTE)v286)
                {
                  nw_endpoint_t v221 = (char *)__nw_create_backtrace_string();
                  uint64_t v217 = __nwlog_obj();
                  os_log_type_t v267 = v283.sa_len;
                  BOOL v222 = os_log_type_enabled(v217, (os_log_type_t)v283.sa_len);
                  if (v221)
                  {
                    if (v222)
                    {
                      int buf = 136446722;
                      v297 = "nw_listener_inbox_accept_udp";
                      __int16 v298 = 1024;
                      *(_DWORD *)nw_endpoint_t v299 = v206;
                      *(_WORD *)&v299[4] = 2082;
                      *(void *)&v299[6] = v221;
                      _os_log_impl(&dword_1830D4000, v217, v267, "%{public}s setsockopt SO_NECP_LISTENUUID failed %{darwin.errno}d, dumping backtrace:%{public}s", (uint8_t *)&buf, 0x1Cu);
                    }

                    free(v221);
                    goto LABEL_521;
                  }
                  if (v222)
                  {
                    int buf = 136446466;
                    v297 = "nw_listener_inbox_accept_udp";
                    __int16 v298 = 1024;
                    *(_DWORD *)nw_endpoint_t v299 = v206;
                    _os_log_impl(&dword_1830D4000, v217, v267, "%{public}s setsockopt SO_NECP_LISTENUUID failed %{darwin.errno}d, no backtrace", (uint8_t *)&buf, 0x12u);
                  }
                }
                else
                {
                  uint64_t v217 = __nwlog_obj();
                  os_log_type_t v235 = v283.sa_len;
                  if (os_log_type_enabled(v217, (os_log_type_t)v283.sa_len))
                  {
                    int buf = 136446466;
                    v297 = "nw_listener_inbox_accept_udp";
                    __int16 v298 = 1024;
                    *(_DWORD *)nw_endpoint_t v299 = v206;
                    _os_log_impl(&dword_1830D4000, v217, v235, "%{public}s setsockopt SO_NECP_LISTENUUID failed %{darwin.errno}d, backtrace limit exceeded", (uint8_t *)&buf, 0x12u);
                  }
                }
              }
LABEL_521:
              if (v216) {
                free(v216);
              }
LABEL_431:
              if (address[1] == 2)
              {
                if ((address[4] & 0xF0) == 0xE0) {
                  goto LABEL_439;
                }
              }
              else if (address[1] == 30 && address[8] == 255)
              {
LABEL_440:
                *(void *)&address[8] = 0;
                *(void *)&address[16] = 0;
LABEL_441:
                if (bind(v97, (const sockaddr *)address, address[0]))
                {
                  unsigned int v208 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
                  if (v208 > 0x31 || ((1 << v208) & 0x3000000002002) == 0)
                  {
                    uint64_t v211 = __nwlog_obj();
                    int buf = 136447234;
                    v297 = "nw_listener_inbox_accept_udp";
                    __int16 v298 = 1024;
                    *(_DWORD *)nw_endpoint_t v299 = v97;
                    *(_WORD *)&v299[4] = 1040;
                    *(_DWORD *)&v299[6] = address[0];
                    *(_WORD *)&v299[10] = 2098;
                    *(void *)&v299[12] = address;
                    *(_WORD *)&v299[20] = 1024;
                    *(_DWORD *)&v299[22] = v208;
                    uint64_t v100 = (char *)_os_log_send_and_compose_impl();

                    v283.int sa_len = 16;
                    LOBYTE(v286) = 0;
                    if (!__nwlog_fault(v100, &v283, &v286)) {
                      goto LABEL_526;
                    }
                    if (v283.sa_len == 17)
                    {
                      __int16 v101 = __nwlog_obj();
                      os_log_type_t v212 = v283.sa_len;
                      if (os_log_type_enabled(v101, (os_log_type_t)v283.sa_len))
                      {
                        int buf = 136447234;
                        v297 = "nw_listener_inbox_accept_udp";
                        __int16 v298 = 1024;
                        *(_DWORD *)nw_endpoint_t v299 = v97;
                        *(_WORD *)&v299[4] = 1040;
                        *(_DWORD *)&v299[6] = address[0];
                        *(_WORD *)&v299[10] = 2098;
                        *(void *)&v299[12] = address;
                        *(_WORD *)&v299[20] = 1024;
                        *(_DWORD *)&v299[22] = v208;
                        _os_log_impl(&dword_1830D4000, v101, v212, "%{public}s bind %d %{public,network:sockaddr}.*P failed %{darwin.errno}d", (uint8_t *)&buf, 0x28u);
                      }
                      goto LABEL_525;
                    }
                    if (!(_BYTE)v286)
                    {
                      __int16 v101 = __nwlog_obj();
                      os_log_type_t v223 = v283.sa_len;
                      if (os_log_type_enabled(v101, (os_log_type_t)v283.sa_len))
                      {
                        int buf = 136447234;
                        v297 = "nw_listener_inbox_accept_udp";
                        __int16 v298 = 1024;
                        *(_DWORD *)nw_endpoint_t v299 = v97;
                        *(_WORD *)&v299[4] = 1040;
                        *(_DWORD *)&v299[6] = address[0];
                        *(_WORD *)&v299[10] = 2098;
                        *(void *)&v299[12] = address;
                        *(_WORD *)&v299[20] = 1024;
                        *(_DWORD *)&v299[22] = v208;
                        _os_log_impl(&dword_1830D4000, v101, v223, "%{public}s bind %d %{public,network:sockaddr}.*P failed %{darwin.errno}d, backtrace limit exceeded", (uint8_t *)&buf, 0x28u);
                      }
                      goto LABEL_525;
                    }
                    char v111 = (char *)__nw_create_backtrace_string();
                    __int16 v101 = __nwlog_obj();
                    os_log_type_t v213 = v283.sa_len;
                    BOOL v214 = os_log_type_enabled(v101, (os_log_type_t)v283.sa_len);
                    if (!v111)
                    {
                      if (v214)
                      {
                        int buf = 136447234;
                        v297 = "nw_listener_inbox_accept_udp";
                        __int16 v298 = 1024;
                        *(_DWORD *)nw_endpoint_t v299 = v97;
                        *(_WORD *)&v299[4] = 1040;
                        *(_DWORD *)&v299[6] = address[0];
                        *(_WORD *)&v299[10] = 2098;
                        *(void *)&v299[12] = address;
                        *(_WORD *)&v299[20] = 1024;
                        *(_DWORD *)&v299[22] = v208;
                        _os_log_impl(&dword_1830D4000, v101, v213, "%{public}s bind %d %{public,network:sockaddr}.*P failed %{darwin.errno}d, no backtrace", (uint8_t *)&buf, 0x28u);
                      }
                      goto LABEL_525;
                    }
                    if (v214)
                    {
                      int buf = 136447490;
                      v297 = "nw_listener_inbox_accept_udp";
                      __int16 v298 = 1024;
                      *(_DWORD *)nw_endpoint_t v299 = v97;
                      *(_WORD *)&v299[4] = 1040;
                      *(_DWORD *)&v299[6] = address[0];
                      *(_WORD *)&v299[10] = 2098;
                      *(void *)&v299[12] = address;
                      *(_WORD *)&v299[20] = 1024;
                      *(_DWORD *)&v299[22] = v208;
                      *(_WORD *)v300 = 2082;
                      *(void *)&v300[2] = v111;
                      _os_log_impl(&dword_1830D4000, v101, v213, "%{public}s bind %d %{public,network:sockaddr}.*P failed %{darwin.errno}d, dumping backtrace:%{public}s", (uint8_t *)&buf, 0x32u);
                    }
                    goto LABEL_192;
                  }
                  __int16 v209 = __nwlog_obj();
                  if (os_log_type_enabled(v209, OS_LOG_TYPE_ERROR))
                  {
                    int buf = 136447234;
                    v297 = "nw_listener_inbox_accept_udp";
                    __int16 v298 = 1024;
                    *(_DWORD *)nw_endpoint_t v299 = v97;
                    *(_WORD *)&v299[4] = 1040;
                    *(_DWORD *)&v299[6] = address[0];
                    *(_WORD *)&v299[10] = 2098;
                    *(void *)&v299[12] = address;
                    *(_WORD *)&v299[20] = 1024;
                    *(_DWORD *)&v299[22] = v208;
                    _os_log_impl(&dword_1830D4000, v209, OS_LOG_TYPE_ERROR, "%{public}s bind %d %{public,network:sockaddr}.*P failed %{darwin.errno}d", (uint8_t *)&buf, 0x28u);
                  }
                }
                else
                {
                  if (!connect(v97, v7, v7->sa_len))
                  {
                    *time_t v11 = v97;
                    os_log_type_t v65 = v272;
                    BOOL v62 = v272;
                    goto LABEL_530;
                  }
                  unsigned int v210 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
                  if (v210 > 0x31 || ((1 << v210) & 0x3000000002002) == 0)
                  {
                    v219 = __nwlog_obj();
                    int buf = 136446466;
                    v297 = "nw_listener_inbox_accept_udp";
                    __int16 v298 = 1024;
                    *(_DWORD *)nw_endpoint_t v299 = v210;
                    uint64_t v100 = (char *)_os_log_send_and_compose_impl();

                    v283.int sa_len = 16;
                    LOBYTE(v286) = 0;
                    if (!__nwlog_fault(v100, &v283, &v286)) {
                      goto LABEL_526;
                    }
                    if (v283.sa_len == 17)
                    {
                      __int16 v101 = __nwlog_obj();
                      os_log_type_t v220 = v283.sa_len;
                      if (os_log_type_enabled(v101, (os_log_type_t)v283.sa_len))
                      {
                        int buf = 136446466;
                        v297 = "nw_listener_inbox_accept_udp";
                        __int16 v298 = 1024;
                        *(_DWORD *)nw_endpoint_t v299 = v210;
                        _os_log_impl(&dword_1830D4000, v101, v220, "%{public}s connect failed %{darwin.errno}d", (uint8_t *)&buf, 0x12u);
                      }
                    }
                    else if ((_BYTE)v286)
                    {
                      v224 = (char *)__nw_create_backtrace_string();
                      __int16 v101 = __nwlog_obj();
                      os_log_type_t v225 = v283.sa_len;
                      BOOL v226 = os_log_type_enabled(v101, (os_log_type_t)v283.sa_len);
                      if (v224)
                      {
                        if (v226)
                        {
                          int buf = 136446722;
                          v297 = "nw_listener_inbox_accept_udp";
                          __int16 v298 = 1024;
                          *(_DWORD *)nw_endpoint_t v299 = v210;
                          *(_WORD *)&v299[4] = 2082;
                          *(void *)&v299[6] = v224;
                          _os_log_impl(&dword_1830D4000, v101, v225, "%{public}s connect failed %{darwin.errno}d, dumping backtrace:%{public}s", (uint8_t *)&buf, 0x1Cu);
                        }

                        free(v224);
LABEL_526:
                        if (v100) {
LABEL_527:
                        }
                          free(v100);
LABEL_528:
                        close(v97);
                        goto LABEL_529;
                      }
                      if (v226)
                      {
                        int buf = 136446466;
                        v297 = "nw_listener_inbox_accept_udp";
                        __int16 v298 = 1024;
                        *(_DWORD *)nw_endpoint_t v299 = v210;
                        _os_log_impl(&dword_1830D4000, v101, v225, "%{public}s connect failed %{darwin.errno}d, no backtrace", (uint8_t *)&buf, 0x12u);
                      }
                    }
                    else
                    {
                      __int16 v101 = __nwlog_obj();
                      os_log_type_t v236 = v283.sa_len;
                      if (os_log_type_enabled(v101, (os_log_type_t)v283.sa_len))
                      {
                        int buf = 136446466;
                        v297 = "nw_listener_inbox_accept_udp";
                        __int16 v298 = 1024;
                        *(_DWORD *)nw_endpoint_t v299 = v210;
                        _os_log_impl(&dword_1830D4000, v101, v236, "%{public}s connect failed %{darwin.errno}d, backtrace limit exceeded", (uint8_t *)&buf, 0x12u);
                      }
                    }
LABEL_525:

                    goto LABEL_526;
                  }
                  __int16 v209 = __nwlog_obj();
                  if (os_log_type_enabled(v209, OS_LOG_TYPE_ERROR))
                  {
                    int buf = 136446466;
                    v297 = "nw_listener_inbox_accept_udp";
                    __int16 v298 = 1024;
                    *(_DWORD *)nw_endpoint_t v299 = v210;
                    _os_log_impl(&dword_1830D4000, v209, OS_LOG_TYPE_ERROR, "%{public}s connect failed %{darwin.errno}d", (uint8_t *)&buf, 0x12u);
                  }
                }

                goto LABEL_528;
              }
              if (!nw_ip_is_broadcast((uint64_t)address, *((void **)v14 + 5))) {
                goto LABEL_441;
              }
              if (address[1] == 30) {
                goto LABEL_440;
              }
              if (address[1] != 2) {
                goto LABEL_441;
              }
LABEL_439:
              *(_DWORD *)&address[4] = 0;
              goto LABEL_441;
            }
            if (v188)
            {
              int buf = 136446466;
              v297 = "nw_listener_inbox_accept_udp";
              __int16 v298 = 1024;
              *(_DWORD *)nw_endpoint_t v299 = v178;
              _os_log_impl(&dword_1830D4000, v176, v266, "%{public}s IP_RECVTOS failed %{darwin.errno}d, no backtrace", (uint8_t *)&buf, 0x12u);
            }
          }
          else
          {
            v176 = __nwlog_obj();
            os_log_type_t v203 = v283.sa_len;
            if (os_log_type_enabled(v176, (os_log_type_t)v283.sa_len))
            {
              int buf = 136446466;
              v297 = "nw_listener_inbox_accept_udp";
              __int16 v298 = 1024;
              *(_DWORD *)nw_endpoint_t v299 = v178;
              _os_log_impl(&dword_1830D4000, v176, v203, "%{public}s IP_RECVTOS failed %{darwin.errno}d, backtrace limit exceeded", (uint8_t *)&buf, 0x12u);
            }
          }
        }
        else
        {
          if (v167 != 30 || (setsockopt(v97, 41, 35, type, 4u) & 0x80000000) == 0) {
            goto LABEL_424;
          }
          int v173 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
          BOOL v174 = __nwlog_obj();
          int buf = 136446466;
          v297 = "nw_listener_inbox_accept_udp";
          __int16 v298 = 1024;
          *(_DWORD *)nw_endpoint_t v299 = v173;
          v175 = (char *)_os_log_send_and_compose_impl();

          v283.int sa_len = 16;
          LOBYTE(v286) = 0;
          if (!__nwlog_fault(v175, &v283, &v286)) {
            goto LABEL_422;
          }
          if (v283.sa_len == 17)
          {
            v176 = __nwlog_obj();
            os_log_type_t v177 = v283.sa_len;
            if (os_log_type_enabled(v176, (os_log_type_t)v283.sa_len))
            {
              int buf = 136446466;
              v297 = "nw_listener_inbox_accept_udp";
              __int16 v298 = 1024;
              *(_DWORD *)nw_endpoint_t v299 = v173;
              _os_log_impl(&dword_1830D4000, v176, v177, "%{public}s IPV6_RECVTCLASS failed %{darwin.errno}d", (uint8_t *)&buf, 0x12u);
            }
          }
          else if ((_BYTE)v286)
          {
            v185 = (char *)__nw_create_backtrace_string();
            v176 = __nwlog_obj();
            os_log_type_t v265 = v283.sa_len;
            BOOL v186 = os_log_type_enabled(v176, (os_log_type_t)v283.sa_len);
            if (v185)
            {
              if (v186)
              {
                int buf = 136446722;
                v297 = "nw_listener_inbox_accept_udp";
                __int16 v298 = 1024;
                *(_DWORD *)nw_endpoint_t v299 = v173;
                *(_WORD *)&v299[4] = 2082;
                *(void *)&v299[6] = v185;
                _os_log_impl(&dword_1830D4000, v176, v265, "%{public}s IPV6_RECVTCLASS failed %{darwin.errno}d, dumping backtrace:%{public}s", (uint8_t *)&buf, 0x1Cu);
              }

              free(v185);
              if (v175) {
                goto LABEL_423;
              }
              goto LABEL_424;
            }
            if (v186)
            {
              int buf = 136446466;
              v297 = "nw_listener_inbox_accept_udp";
              __int16 v298 = 1024;
              *(_DWORD *)nw_endpoint_t v299 = v173;
              _os_log_impl(&dword_1830D4000, v176, v265, "%{public}s IPV6_RECVTCLASS failed %{darwin.errno}d, no backtrace", (uint8_t *)&buf, 0x12u);
            }
          }
          else
          {
            v176 = __nwlog_obj();
            os_log_type_t v202 = v283.sa_len;
            if (os_log_type_enabled(v176, (os_log_type_t)v283.sa_len))
            {
              int buf = 136446466;
              v297 = "nw_listener_inbox_accept_udp";
              __int16 v298 = 1024;
              *(_DWORD *)nw_endpoint_t v299 = v173;
              _os_log_impl(&dword_1830D4000, v176, v202, "%{public}s IPV6_RECVTCLASS failed %{darwin.errno}d, backtrace limit exceeded", (uint8_t *)&buf, 0x12u);
            }
          }
        }

        goto LABEL_422;
      }
      int v125 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
      id v126 = __nwlog_obj();
      int buf = 136446466;
      v297 = "nw_listener_inbox_accept_udp";
      __int16 v298 = 1024;
      int v270 = v125;
      *(_DWORD *)nw_endpoint_t v299 = v125;
      __int16 v127 = (char *)_os_log_send_and_compose_impl();

      v283.int sa_len = 16;
      LOBYTE(v286) = 0;
      if (__nwlog_fault(v127, &v283, &v286))
      {
        if (v283.sa_len == 17)
        {
          unsigned int v128 = __nwlog_obj();
          os_log_type_t v129 = v283.sa_len;
          if (os_log_type_enabled(v128, (os_log_type_t)v283.sa_len))
          {
            int buf = 136446466;
            v297 = "nw_listener_inbox_accept_udp";
            __int16 v298 = 1024;
            *(_DWORD *)nw_endpoint_t v299 = v270;
            _os_log_impl(&dword_1830D4000, v128, v129, "%{public}s SO_NOWAKEFROMSLEEP failed %{darwin.errno}d", (uint8_t *)&buf, 0x12u);
          }
        }
        else if ((_BYTE)v286)
        {
          BOOL v157 = (char *)__nw_create_backtrace_string();
          unsigned int v128 = __nwlog_obj();
          os_log_type_t v262 = v283.sa_len;
          BOOL v158 = os_log_type_enabled(v128, (os_log_type_t)v283.sa_len);
          if (v157)
          {
            if (v158)
            {
              int buf = 136446722;
              v297 = "nw_listener_inbox_accept_udp";
              __int16 v298 = 1024;
              *(_DWORD *)nw_endpoint_t v299 = v270;
              *(_WORD *)&v299[4] = 2082;
              *(void *)&v299[6] = v157;
              _os_log_impl(&dword_1830D4000, v128, v262, "%{public}s SO_NOWAKEFROMSLEEP failed %{darwin.errno}d, dumping backtrace:%{public}s", (uint8_t *)&buf, 0x1Cu);
            }

            free(v157);
            goto LABEL_309;
          }
          if (v158)
          {
            int buf = 136446466;
            v297 = "nw_listener_inbox_accept_udp";
            __int16 v298 = 1024;
            *(_DWORD *)nw_endpoint_t v299 = v270;
            _os_log_impl(&dword_1830D4000, v128, v262, "%{public}s SO_NOWAKEFROMSLEEP failed %{darwin.errno}d, no backtrace", (uint8_t *)&buf, 0x12u);
          }
        }
        else
        {
          unsigned int v128 = __nwlog_obj();
          os_log_type_t v162 = v283.sa_len;
          if (os_log_type_enabled(v128, (os_log_type_t)v283.sa_len))
          {
            int buf = 136446466;
            v297 = "nw_listener_inbox_accept_udp";
            __int16 v298 = 1024;
            *(_DWORD *)nw_endpoint_t v299 = v270;
            _os_log_impl(&dword_1830D4000, v128, v162, "%{public}s SO_NOWAKEFROMSLEEP failed %{darwin.errno}d, backtrace limit exceeded", (uint8_t *)&buf, 0x12u);
          }
        }
      }
LABEL_309:
      if (v127) {
        free(v127);
      }
      goto LABEL_311;
    }
    int v103 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    id v104 = __nwlog_obj();
    int buf = 136446466;
    v297 = "nw_listener_inbox_accept_udp";
    __int16 v298 = 1024;
    *(_DWORD *)nw_endpoint_t v299 = v103;
    os_log_type_t v105 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    v283.int sa_len = 0;
    if (__nwlog_fault(v105, type, &v283))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        BOOL v106 = __nwlog_obj();
        os_log_type_t v107 = type[0];
        if (os_log_type_enabled(v106, type[0]))
        {
          int buf = 136446466;
          v297 = "nw_listener_inbox_accept_udp";
          __int16 v298 = 1024;
          *(_DWORD *)nw_endpoint_t v299 = v103;
          _os_log_impl(&dword_1830D4000, v106, v107, "%{public}s socket() failed %{darwin.errno}d", (uint8_t *)&buf, 0x12u);
        }
      }
      else if (v283.sa_len)
      {
        __int16 v114 = (char *)__nw_create_backtrace_string();
        BOOL v106 = __nwlog_obj();
        os_log_type_t v115 = type[0];
        BOOL v116 = os_log_type_enabled(v106, type[0]);
        if (v114)
        {
          if (v116)
          {
            int buf = 136446722;
            v297 = "nw_listener_inbox_accept_udp";
            __int16 v298 = 1024;
            *(_DWORD *)nw_endpoint_t v299 = v103;
            *(_WORD *)&v299[4] = 2082;
            *(void *)&v299[6] = v114;
            _os_log_impl(&dword_1830D4000, v106, v115, "%{public}s socket() failed %{darwin.errno}d, dumping backtrace:%{public}s", (uint8_t *)&buf, 0x1Cu);
          }

          free(v114);
          goto LABEL_209;
        }
        if (v116)
        {
          int buf = 136446466;
          v297 = "nw_listener_inbox_accept_udp";
          __int16 v298 = 1024;
          *(_DWORD *)nw_endpoint_t v299 = v103;
          _os_log_impl(&dword_1830D4000, v106, v115, "%{public}s socket() failed %{darwin.errno}d, no backtrace", (uint8_t *)&buf, 0x12u);
        }
      }
      else
      {
        BOOL v106 = __nwlog_obj();
        os_log_type_t v124 = type[0];
        if (os_log_type_enabled(v106, type[0]))
        {
          int buf = 136446466;
          v297 = "nw_listener_inbox_accept_udp";
          __int16 v298 = 1024;
          *(_DWORD *)nw_endpoint_t v299 = v103;
          _os_log_impl(&dword_1830D4000, v106, v124, "%{public}s socket() failed %{darwin.errno}d, backtrace limit exceeded", (uint8_t *)&buf, 0x12u);
        }
      }
    }
LABEL_209:
    os_log_type_t v65 = v272;
    if (v105) {
      free(v105);
    }
    goto LABEL_211;
  }
  if (v16 < 1) {
    goto LABEL_82;
  }
  nw_endpoint_t v33 = nw_endpoint_create_address(v7);
  BOOL v34 = nw_interface_create_with_index(v293);
  nw_endpoint_t v35 = nw_endpoint_create_address((const sockaddr *)address);
  id v263 = v14;
  v260 = v35;
  char v36 = v33;
  id v271 = v34;
  v268 = v36;
  if (!(_WORD)v16)
  {
    v194 = __nwlog_obj();
    int buf = 136446210;
    v297 = "nw_listener_inbox_socket_handle_new_packet";
    uint64_t v195 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    v283.int sa_len = 0;
    if (!__nwlog_fault(v195, type, &v283)) {
      goto LABEL_549;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      uint64_t v196 = __nwlog_obj();
      os_log_type_t v197 = type[0];
      if (os_log_type_enabled(v196, type[0]))
      {
        int buf = 136446210;
        v297 = "nw_listener_inbox_socket_handle_new_packet";
        _os_log_impl(&dword_1830D4000, v196, v197, "%{public}s called with null packet_length", (uint8_t *)&buf, 0xCu);
      }
    }
    else if (v283.sa_len)
    {
      unint64_t v227 = (char *)__nw_create_backtrace_string();
      uint64_t v196 = __nwlog_obj();
      os_log_type_t v228 = type[0];
      BOOL v229 = os_log_type_enabled(v196, type[0]);
      if (v227)
      {
        if (v229)
        {
          int buf = 136446466;
          v297 = "nw_listener_inbox_socket_handle_new_packet";
          __int16 v298 = 2082;
          *(void *)nw_endpoint_t v299 = v227;
          _os_log_impl(&dword_1830D4000, v196, v228, "%{public}s called with null packet_length, dumping backtrace:%{public}s", (uint8_t *)&buf, 0x16u);
        }

        free(v227);
LABEL_549:
        if (!v195) {
          goto LABEL_124;
        }
        goto LABEL_550;
      }
      if (v229)
      {
        int buf = 136446210;
        v297 = "nw_listener_inbox_socket_handle_new_packet";
        _os_log_impl(&dword_1830D4000, v196, v228, "%{public}s called with null packet_length, no backtrace", (uint8_t *)&buf, 0xCu);
      }
    }
    else
    {
      uint64_t v196 = __nwlog_obj();
      os_log_type_t v237 = type[0];
      if (os_log_type_enabled(v196, type[0]))
      {
        int buf = 136446210;
        v297 = "nw_listener_inbox_socket_handle_new_packet";
        _os_log_impl(&dword_1830D4000, v196, v237, "%{public}s called with null packet_length, backtrace limit exceeded", (uint8_t *)&buf, 0xCu);
      }
    }
LABEL_548:

    goto LABEL_549;
  }
  if (!v36)
  {
    v198 = __nwlog_obj();
    int buf = 136446210;
    v297 = "nw_listener_inbox_socket_handle_new_packet";
    uint64_t v195 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    v283.int sa_len = 0;
    if (!__nwlog_fault(v195, type, &v283)) {
      goto LABEL_549;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      uint64_t v196 = __nwlog_obj();
      os_log_type_t v199 = type[0];
      if (os_log_type_enabled(v196, type[0]))
      {
        int buf = 136446210;
        v297 = "nw_listener_inbox_socket_handle_new_packet";
        _os_log_impl(&dword_1830D4000, v196, v199, "%{public}s called with null peer", (uint8_t *)&buf, 0xCu);
      }
      goto LABEL_548;
    }
    if (!v283.sa_len)
    {
      uint64_t v196 = __nwlog_obj();
      os_log_type_t v238 = type[0];
      if (os_log_type_enabled(v196, type[0]))
      {
        int buf = 136446210;
        v297 = "nw_listener_inbox_socket_handle_new_packet";
        _os_log_impl(&dword_1830D4000, v196, v238, "%{public}s called with null peer, backtrace limit exceeded", (uint8_t *)&buf, 0xCu);
      }
      goto LABEL_548;
    }
    uint64_t v230 = (char *)__nw_create_backtrace_string();
    uint64_t v196 = __nwlog_obj();
    os_log_type_t v231 = type[0];
    BOOL v232 = os_log_type_enabled(v196, type[0]);
    if (!v230)
    {
      if (v232)
      {
        int buf = 136446210;
        v297 = "nw_listener_inbox_socket_handle_new_packet";
        _os_log_impl(&dword_1830D4000, v196, v231, "%{public}s called with null peer, no backtrace", (uint8_t *)&buf, 0xCu);
      }
      goto LABEL_548;
    }
    if (v232)
    {
      int buf = 136446466;
      v297 = "nw_listener_inbox_socket_handle_new_packet";
      __int16 v298 = 2082;
      *(void *)nw_endpoint_t v299 = v230;
      _os_log_impl(&dword_1830D4000, v196, v231, "%{public}s called with null peer, dumping backtrace:%{public}s", (uint8_t *)&buf, 0x16u);
    }
    goto LABEL_504;
  }
  if (!v271)
  {
    v200 = __nwlog_obj();
    int buf = 136446210;
    v297 = "nw_listener_inbox_socket_handle_new_packet";
    uint64_t v195 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    v283.int sa_len = 0;
    if (!__nwlog_fault(v195, type, &v283)) {
      goto LABEL_549;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      uint64_t v196 = __nwlog_obj();
      os_log_type_t v201 = type[0];
      if (os_log_type_enabled(v196, type[0]))
      {
        int buf = 136446210;
        v297 = "nw_listener_inbox_socket_handle_new_packet";
        _os_log_impl(&dword_1830D4000, v196, v201, "%{public}s called with null interface", (uint8_t *)&buf, 0xCu);
      }
      goto LABEL_548;
    }
    if (!v283.sa_len)
    {
      uint64_t v196 = __nwlog_obj();
      os_log_type_t v239 = type[0];
      if (os_log_type_enabled(v196, type[0]))
      {
        int buf = 136446210;
        v297 = "nw_listener_inbox_socket_handle_new_packet";
        _os_log_impl(&dword_1830D4000, v196, v239, "%{public}s called with null interface, backtrace limit exceeded", (uint8_t *)&buf, 0xCu);
      }
      goto LABEL_548;
    }
    uint64_t v230 = (char *)__nw_create_backtrace_string();
    uint64_t v196 = __nwlog_obj();
    os_log_type_t v233 = type[0];
    BOOL v234 = os_log_type_enabled(v196, type[0]);
    if (!v230)
    {
      if (v234)
      {
        int buf = 136446210;
        v297 = "nw_listener_inbox_socket_handle_new_packet";
        _os_log_impl(&dword_1830D4000, v196, v233, "%{public}s called with null interface, no backtrace", (uint8_t *)&buf, 0xCu);
      }
      goto LABEL_548;
    }
    if (v234)
    {
      int buf = 136446466;
      v297 = "nw_listener_inbox_socket_handle_new_packet";
      __int16 v298 = 2082;
      *(void *)nw_endpoint_t v299 = v230;
      _os_log_impl(&dword_1830D4000, v196, v233, "%{public}s called with null interface, dumping backtrace:%{public}s", (uint8_t *)&buf, 0x16u);
    }
LABEL_504:

    free(v230);
    if (!v195) {
      goto LABEL_124;
    }
LABEL_550:
    free(v195);
    goto LABEL_124;
  }
  if (nw_context_copy_implicit_context::onceToken != -1) {
    dispatch_once(&nw_context_copy_implicit_context::onceToken, &__block_literal_global_18);
  }
  id v37 = (id)nw_context_copy_implicit_context::implicit_context;
  __int16 v38 = nw_context_copy_registered_endpoint(v37, v268);

  id v39 = v263[6];
  __int16 v40 = -[NWConcrete_nw_parameters initWithParameters:stripConnected:shallowCopy:]((id *)[NWConcrete_nw_parameters alloc], v39, 0, 0);

  uint64_t v41 = nw_endpoint_copy_association_with_evaluator(v38, v40, 0);
  __int16 v42 = v41;
  if (!v41)
  {
    if (nw_parameters_get_local_only(v40)) {
      goto LABEL_92;
    }
    uint64_t v44 = 0;
LABEL_116:
    id v79 = v263[1];
    if (v79)
    {
      if (v38) {
        int v80 = v38;
      }
      else {
        int v80 = v268;
      }
      uint64_t v81 = v260;
      if (!v260) {
        uint64_t v81 = *((void *)v14 + 4);
      }
      [v79 handleInboundPacket:&buffer length:(unsigned __int16)v16 from:v80 to:v81 interface:v271 socket:v263[9]];
    }
    goto LABEL_123;
  }
  id v43 = nw_association_copy_current_path(v41, v40);
  if (!nw_parameters_get_local_only(v40))
  {
    uint64_t v44 = v43;
    goto LABEL_116;
  }
  if (!v43)
  {
LABEL_92:
    BOOL v69 = __nwlog_obj();
    if (os_log_type_enabled(v69, OS_LOG_TYPE_ERROR))
    {
      int buf = 136446210;
      v297 = "nw_listener_inbox_socket_handle_new_packet";
      _os_log_impl(&dword_1830D4000, v69, OS_LOG_TYPE_ERROR, "%{public}s nw_association has no path", (uint8_t *)&buf, 0xCu);
    }

    id v43 = 0;
    goto LABEL_95;
  }
  uint64_t v44 = v43;
  if (nw_path_is_direct(v43)) {
    goto LABEL_116;
  }
LABEL_95:
  __int16 v70 = __nwlog_obj();
  BOOL v71 = os_log_type_enabled(v70, OS_LOG_TYPE_DEBUG);
  int v72 = gLogFDOverride != -1 || v71;

  if (v43) {
    int v73 = v72;
  }
  else {
    int v73 = 0;
  }
  if (v73 == 1)
  {
    __int16 v74 = __nwlog_obj();
    if (os_log_type_enabled(v74, OS_LOG_TYPE_DEBUG))
    {
      int buf = 136446466;
      v297 = "nw_listener_inbox_socket_handle_new_packet";
      __int16 v298 = 2114;
      *(void *)nw_endpoint_t v299 = v38;
      _os_log_impl(&dword_1830D4000, v74, OS_LOG_TYPE_DEBUG, "%{public}s Ignoring data from non-local endpoint %{public}@", (uint8_t *)&buf, 0x16u);
    }
  }
  uint64_t v44 = v43;
LABEL_123:

LABEL_124:
LABEL_82:
  BOOL v62 = 0;
LABEL_83:

  return (BOOL)v62;
}

void sub_1833F34EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, void *a18, void *a19, uint64_t a20,uint64_t a21,void *a22,void *a23,uint64_t a24,void *a25,uint64_t a26,void *a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,id a45)
{
  _Block_object_dispose(&a37, 8);
  _Unwind_Resume(a1);
}

BOOL nw_http_fillout_indeterminate_binary_message_body_chunk(const void *a1, size_t a2, int a3, void *a4, char *__dst, unint64_t a6)
{
  uint64_t v98 = *MEMORY[0x1E4F143B8];
  if (!__dst)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    id v91 = "nw_http_fillout_indeterminate_binary_message_body_chunk";
    BOOL v34 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v80) = 0;
    if (!__nwlog_fault(v34, type, &v80)) {
      goto LABEL_177;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      nw_endpoint_t v35 = __nwlog_obj();
      os_log_type_t v36 = type[0];
      if (os_log_type_enabled(v35, type[0]))
      {
        *(_DWORD *)int buf = 136446210;
        id v91 = "nw_http_fillout_indeterminate_binary_message_body_chunk";
        id v37 = "%{public}s called with null buffer";
LABEL_176:
        _os_log_impl(&dword_1830D4000, v35, v36, v37, buf, 0xCu);
      }
LABEL_177:
      if (v34) {
        free(v34);
      }
      return 0;
    }
    if (!(_BYTE)v80)
    {
      nw_endpoint_t v35 = __nwlog_obj();
      os_log_type_t v36 = type[0];
      if (os_log_type_enabled(v35, type[0]))
      {
        *(_DWORD *)int buf = 136446210;
        id v91 = "nw_http_fillout_indeterminate_binary_message_body_chunk";
        id v37 = "%{public}s called with null buffer, backtrace limit exceeded";
        goto LABEL_176;
      }
      goto LABEL_177;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    nw_endpoint_t v35 = __nwlog_obj();
    os_log_type_t v36 = type[0];
    BOOL v39 = os_log_type_enabled(v35, type[0]);
    if (!backtrace_string)
    {
      if (v39)
      {
        *(_DWORD *)int buf = 136446210;
        id v91 = "nw_http_fillout_indeterminate_binary_message_body_chunk";
        id v37 = "%{public}s called with null buffer, no backtrace";
        goto LABEL_176;
      }
      goto LABEL_177;
    }
    if (v39)
    {
      *(_DWORD *)int buf = 136446466;
      id v91 = "nw_http_fillout_indeterminate_binary_message_body_chunk";
      __int16 v92 = 2082;
      nw_endpoint_t v93 = backtrace_string;
      __int16 v40 = "%{public}s called with null buffer, dumping backtrace:%{public}s";
LABEL_97:
      _os_log_impl(&dword_1830D4000, v35, v36, v40, buf, 0x16u);
    }
LABEL_98:
    free(backtrace_string);
    goto LABEL_177;
  }
  id v6 = __dst;
  if (!a1 && a2)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    id v91 = "nw_http_fillout_indeterminate_binary_message_body_chunk";
    BOOL v34 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v80) = 0;
    if (!__nwlog_fault(v34, type, &v80)) {
      goto LABEL_177;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      nw_endpoint_t v35 = __nwlog_obj();
      os_log_type_t v36 = type[0];
      if (os_log_type_enabled(v35, type[0]))
      {
        *(_DWORD *)int buf = 136446210;
        id v91 = "nw_http_fillout_indeterminate_binary_message_body_chunk";
        id v37 = "%{public}s called with null body_content";
        goto LABEL_176;
      }
      goto LABEL_177;
    }
    if (!(_BYTE)v80)
    {
      nw_endpoint_t v35 = __nwlog_obj();
      os_log_type_t v36 = type[0];
      if (os_log_type_enabled(v35, type[0]))
      {
        *(_DWORD *)int buf = 136446210;
        id v91 = "nw_http_fillout_indeterminate_binary_message_body_chunk";
        id v37 = "%{public}s called with null body_content, backtrace limit exceeded";
        goto LABEL_176;
      }
      goto LABEL_177;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    nw_endpoint_t v35 = __nwlog_obj();
    os_log_type_t v36 = type[0];
    BOOL v57 = os_log_type_enabled(v35, type[0]);
    if (!backtrace_string)
    {
      if (v57)
      {
        *(_DWORD *)int buf = 136446210;
        id v91 = "nw_http_fillout_indeterminate_binary_message_body_chunk";
        id v37 = "%{public}s called with null body_content, no backtrace";
        goto LABEL_176;
      }
      goto LABEL_177;
    }
    if (v57)
    {
      *(_DWORD *)int buf = 136446466;
      id v91 = "nw_http_fillout_indeterminate_binary_message_body_chunk";
      __int16 v92 = 2082;
      nw_endpoint_t v93 = backtrace_string;
      __int16 v40 = "%{public}s called with null body_content, dumping backtrace:%{public}s";
      goto LABEL_97;
    }
    goto LABEL_98;
  }
  *(void *)os_log_type_t type = 0;
  id v85 = type;
  uint64_t v86 = 0x2000000000;
  uint64_t v87 = __dst;
  uint64_t v80 = 0;
  uint64_t v81 = &v80;
  uint64_t v82 = 0x2000000000;
  unint64_t v83 = a6;
  if (!a2) {
    goto LABEL_13;
  }
  if (a2 <= 0x3F)
  {
    unint64_t __src = a2;
    size_t v11 = 1;
    unint64_t v12 = a6 - 1;
    if (a6) {
      goto LABEL_7;
    }
LABEL_30:
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    id v91 = "_http_safe_append";
    int v25 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v89 = OS_LOG_TYPE_ERROR;
    char v88 = 0;
    if (__nwlog_fault(v25, &v89, &v88))
    {
      if (v89 == OS_LOG_TYPE_FAULT)
      {
        uint64_t v26 = __nwlog_obj();
        os_log_type_t v27 = v89;
        if (os_log_type_enabled(v26, v89))
        {
          *(_DWORD *)int buf = 136446210;
          id v91 = "_http_safe_append";
          BOOL v28 = "%{public}s called with null (*remaining >= length)";
LABEL_158:
          _os_log_impl(&dword_1830D4000, v26, v27, v28, buf, 0xCu);
        }
      }
      else if (v88)
      {
        os_log_type_t v55 = (char *)__nw_create_backtrace_string();
        uint64_t v26 = __nwlog_obj();
        os_log_type_t v27 = v89;
        BOOL v56 = os_log_type_enabled(v26, v89);
        if (v55)
        {
          if (v56)
          {
            *(_DWORD *)int buf = 136446466;
            id v91 = "_http_safe_append";
            __int16 v92 = 2082;
            nw_endpoint_t v93 = v55;
            _os_log_impl(&dword_1830D4000, v26, v27, "%{public}s called with null (*remaining >= length), dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v55);
          goto LABEL_159;
        }
        if (v56)
        {
          *(_DWORD *)int buf = 136446210;
          id v91 = "_http_safe_append";
          BOOL v28 = "%{public}s called with null (*remaining >= length), no backtrace";
          goto LABEL_158;
        }
      }
      else
      {
        uint64_t v26 = __nwlog_obj();
        os_log_type_t v27 = v89;
        if (os_log_type_enabled(v26, v89))
        {
          *(_DWORD *)int buf = 136446210;
          id v91 = "_http_safe_append";
          BOOL v28 = "%{public}s called with null (*remaining >= length), backtrace limit exceeded";
          goto LABEL_158;
        }
      }
    }
LABEL_159:
    if (v25) {
      free(v25);
    }
    *((void *)v85 + 3) = 0;
    goto LABEL_162;
  }
  if (!(a2 >> 14))
  {
    unint64_t __src = bswap32(a2 | 0x4000) >> 16;
    size_t v11 = 2;
    unint64_t v12 = a6 - 2;
    if (a6 < 2) {
      goto LABEL_30;
    }
    goto LABEL_7;
  }
  if (!(a2 >> 30))
  {
    unint64_t __src = bswap32(a2 | 0x80000000);
    size_t v11 = 4;
    unint64_t v12 = a6 - 4;
    if (a6 < 4) {
      goto LABEL_30;
    }
    goto LABEL_7;
  }
  if (!(a2 >> 62))
  {
    unint64_t __src = bswap64(a2 | 0xC000000000000000);
    size_t v11 = 8;
    unint64_t v12 = a6 - 8;
    if (a6 < 8) {
      goto LABEL_30;
    }
LABEL_7:
    memcpy(__dst, &__src, v11);
    unint64_t v83 = v12;
    int v13 = &v6[v11];
    uint64_t v87 = v13;
    os_log_type_t v14 = &v80;
    if (a1)
    {
LABEL_8:
      if (v14[3] >= a2)
      {
        memcpy(v13, a1, a2);
        unint64_t v15 = v14[3];
        v14[3] = v15 - a2;
        if (v15 < a2)
        {
          if (gLogDatapath)
          {
            uint64_t v51 = __nwlog_obj();
            if (os_log_type_enabled(v51, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v52 = v14[3];
              *(_DWORD *)int buf = 136446978;
              id v91 = "_http_safe_append";
              __int16 v92 = 2082;
              nw_endpoint_t v93 = "*remaining";
              __int16 v94 = 2048;
              uint64_t v95 = a2;
              __int16 v96 = 2048;
              uint64_t v97 = v52;
              _os_log_impl(&dword_1830D4000, v51, OS_LOG_TYPE_DEBUG, "%{public}s Underflow: %{public}s, decrement %llu, result %llu", buf, 0x2Au);
            }
          }
          v14[3] = 0;
        }
        id v6 = &v13[a2];
        *((void *)v85 + 3) = v6;
LABEL_13:
        if (!a3)
        {
LABEL_25:
          uint64_t v23 = 1;
LABEL_26:
          _Block_object_dispose(&v80, 8);
          _Block_object_dispose(type, 8);
          return v23;
        }
        ssize_t v16 = v81;
        if (v81[3])
        {
          char *v6 = 0;
          uint64_t v17 = v16[3];
          v16[3] = v17 - 1;
          if (!v17)
          {
            if (gLogDatapath)
            {
              dispatch_qos_class_t v58 = __nwlog_obj();
              if (os_log_type_enabled(v58, OS_LOG_TYPE_DEBUG))
              {
                uint64_t v59 = v16[3];
                *(_DWORD *)int buf = 136446978;
                id v91 = "_http_safe_append";
                __int16 v92 = 2082;
                nw_endpoint_t v93 = "*remaining";
                __int16 v94 = 2048;
                uint64_t v95 = 1;
                __int16 v96 = 2048;
                uint64_t v97 = v59;
                _os_log_impl(&dword_1830D4000, v58, OS_LOG_TYPE_DEBUG, "%{public}s Underflow: %{public}s, decrement %llu, result %llu", buf, 0x2Au);
              }
            }
            v16[3] = 0;
          }
          char v18 = v6 + 1;
          *((void *)v85 + 3) = v6 + 1;
          if (!a4) {
            goto LABEL_20;
          }
          v78[0] = MEMORY[0x1E4F143A8];
          v78[1] = 0x40000000;
          v78[2] = __nw_http_fillout_indeterminate_binary_message_body_chunk_block_invoke;
          v78[3] = &unk_1E5242D00;
          v78[4] = type;
          v78[5] = &v80;
          id v19 = a4;
          char v20 = v78;
          _nw_http_fields_enumerate_const_field((uint64_t)v19, v20);

          char v18 = (unsigned char *)*((void *)v85 + 3);
          if (!v18)
          {
            __nwlog_obj();
            *(_DWORD *)int buf = 136446210;
            id v91 = "_http_safe_append";
            id v45 = (char *)_os_log_send_and_compose_impl();
            LOBYTE(__src) = 16;
            os_log_type_t v89 = OS_LOG_TYPE_DEFAULT;
            if (!__nwlog_fault(v45, &__src, &v89)) {
              goto LABEL_204;
            }
            if (__src == 17)
            {
              uint64_t v46 = __nwlog_obj();
              os_log_type_t v47 = __src;
              if (!os_log_type_enabled(v46, (os_log_type_t)__src)) {
                goto LABEL_204;
              }
              *(_DWORD *)int buf = 136446210;
              id v91 = "_http_safe_append";
              uint64_t v48 = "%{public}s called with null buffer";
              goto LABEL_203;
            }
            if (v89 == OS_LOG_TYPE_DEFAULT)
            {
              uint64_t v46 = __nwlog_obj();
              os_log_type_t v47 = __src;
              if (!os_log_type_enabled(v46, (os_log_type_t)__src)) {
                goto LABEL_204;
              }
              *(_DWORD *)int buf = 136446210;
              id v91 = "_http_safe_append";
              uint64_t v48 = "%{public}s called with null buffer, backtrace limit exceeded";
              goto LABEL_203;
            }
            BOOL v62 = (char *)__nw_create_backtrace_string();
            uint64_t v46 = __nwlog_obj();
            os_log_type_t v47 = __src;
            BOOL v63 = os_log_type_enabled(v46, (os_log_type_t)__src);
            if (!v62)
            {
              if (!v63) {
                goto LABEL_204;
              }
              *(_DWORD *)int buf = 136446210;
              id v91 = "_http_safe_append";
              uint64_t v48 = "%{public}s called with null buffer, no backtrace";
              goto LABEL_203;
            }
            if (v63)
            {
              *(_DWORD *)int buf = 136446466;
              id v91 = "_http_safe_append";
              __int16 v92 = 2082;
              nw_endpoint_t v93 = v62;
              _os_log_impl(&dword_1830D4000, v46, v47, "%{public}s called with null buffer, dumping backtrace:%{public}s", buf, 0x16u);
            }
            free(v62);
          }
          else
          {
LABEL_20:
            os_log_type_t v21 = v81;
            if (v81[3])
            {
              *char v18 = 0;
              uint64_t v22 = v21[3];
              v21[3] = v22 - 1;
              if (!v22)
              {
                if (gLogDatapath)
                {
                  id v64 = __nwlog_obj();
                  if (os_log_type_enabled(v64, OS_LOG_TYPE_DEBUG))
                  {
                    uint64_t v65 = v21[3];
                    *(_DWORD *)int buf = 136446978;
                    id v91 = "_http_safe_append";
                    __int16 v92 = 2082;
                    nw_endpoint_t v93 = "*remaining";
                    __int16 v94 = 2048;
                    uint64_t v95 = 1;
                    __int16 v96 = 2048;
                    uint64_t v97 = v65;
                    _os_log_impl(&dword_1830D4000, v64, OS_LOG_TYPE_DEBUG, "%{public}s Underflow: %{public}s, decrement %llu, result %llu", buf, 0x2Au);
                  }
                }
                v21[3] = 0;
              }
              *((void *)v85 + 3) = v18 + 1;
              goto LABEL_25;
            }
            __nwlog_obj();
            *(_DWORD *)int buf = 136446210;
            id v91 = "_http_safe_append";
            id v45 = (char *)_os_log_send_and_compose_impl();
            LOBYTE(__src) = 16;
            os_log_type_t v89 = OS_LOG_TYPE_DEFAULT;
            if (__nwlog_fault(v45, &__src, &v89))
            {
              if (__src == 17)
              {
                uint64_t v46 = __nwlog_obj();
                os_log_type_t v47 = __src;
                if (!os_log_type_enabled(v46, (os_log_type_t)__src)) {
                  goto LABEL_204;
                }
                *(_DWORD *)int buf = 136446210;
                id v91 = "_http_safe_append";
                uint64_t v48 = "%{public}s called with null (*remaining >= length)";
                goto LABEL_203;
              }
              if (v89 == OS_LOG_TYPE_DEFAULT)
              {
                uint64_t v46 = __nwlog_obj();
                os_log_type_t v47 = __src;
                if (!os_log_type_enabled(v46, (os_log_type_t)__src)) {
                  goto LABEL_204;
                }
                *(_DWORD *)int buf = 136446210;
                id v91 = "_http_safe_append";
                uint64_t v48 = "%{public}s called with null (*remaining >= length), backtrace limit exceeded";
                goto LABEL_203;
              }
              BOOL v66 = (char *)__nw_create_backtrace_string();
              uint64_t v46 = __nwlog_obj();
              os_log_type_t v47 = __src;
              BOOL v67 = os_log_type_enabled(v46, (os_log_type_t)__src);
              if (v66)
              {
                if (v67)
                {
                  *(_DWORD *)int buf = 136446466;
                  id v91 = "_http_safe_append";
                  __int16 v92 = 2082;
                  nw_endpoint_t v93 = v66;
                  _os_log_impl(&dword_1830D4000, v46, v47, "%{public}s called with null (*remaining >= length), dumping backtrace:%{public}s", buf, 0x16u);
                }
                free(v66);
                if (!v45) {
                  goto LABEL_206;
                }
                goto LABEL_205;
              }
              if (v67)
              {
                *(_DWORD *)int buf = 136446210;
                id v91 = "_http_safe_append";
                uint64_t v48 = "%{public}s called with null (*remaining >= length), no backtrace";
LABEL_203:
                _os_log_impl(&dword_1830D4000, v46, v47, v48, buf, 0xCu);
              }
            }
          }
LABEL_204:
          if (!v45)
          {
LABEL_206:
            *((void *)v85 + 3) = 0;
            __nwlog_obj();
            *(_DWORD *)int buf = 136446210;
            id v91 = "nw_http_fillout_indeterminate_binary_message_body_chunk";
            os_log_type_t v68 = (char *)_os_log_send_and_compose_impl();
            LOBYTE(__src) = 16;
            os_log_type_t v89 = OS_LOG_TYPE_DEFAULT;
            if (!__nwlog_fault(v68, &__src, &v89)) {
              goto LABEL_220;
            }
            if (__src == 17)
            {
              BOOL v69 = __nwlog_obj();
              os_log_type_t v70 = __src;
              if (!os_log_type_enabled(v69, (os_log_type_t)__src)) {
                goto LABEL_220;
              }
              *(_DWORD *)int buf = 136446210;
              id v91 = "nw_http_fillout_indeterminate_binary_message_body_chunk";
              BOOL v71 = "%{public}s called with null cursor";
              goto LABEL_219;
            }
            if (v89 == OS_LOG_TYPE_DEFAULT)
            {
              BOOL v69 = __nwlog_obj();
              os_log_type_t v70 = __src;
              if (!os_log_type_enabled(v69, (os_log_type_t)__src)) {
                goto LABEL_220;
              }
              *(_DWORD *)int buf = 136446210;
              id v91 = "nw_http_fillout_indeterminate_binary_message_body_chunk";
              BOOL v71 = "%{public}s called with null cursor, backtrace limit exceeded";
              goto LABEL_219;
            }
            BOOL v76 = (char *)__nw_create_backtrace_string();
            BOOL v69 = __nwlog_obj();
            os_log_type_t v70 = __src;
            BOOL v77 = os_log_type_enabled(v69, (os_log_type_t)__src);
            if (!v76)
            {
              if (!v77) {
                goto LABEL_220;
              }
              *(_DWORD *)int buf = 136446210;
              id v91 = "nw_http_fillout_indeterminate_binary_message_body_chunk";
              BOOL v71 = "%{public}s called with null cursor, no backtrace";
              goto LABEL_219;
            }
            if (v77)
            {
              *(_DWORD *)int buf = 136446466;
              id v91 = "nw_http_fillout_indeterminate_binary_message_body_chunk";
              __int16 v92 = 2082;
              nw_endpoint_t v93 = v76;
              _os_log_impl(&dword_1830D4000, v69, v70, "%{public}s called with null cursor, dumping backtrace:%{public}s", buf, 0x16u);
            }
            free(v76);
LABEL_220:
            if (!v68)
            {
LABEL_222:
              uint64_t v23 = 0;
              goto LABEL_26;
            }
LABEL_221:
            free(v68);
            goto LABEL_222;
          }
LABEL_205:
          free(v45);
          goto LABEL_206;
        }
        __nwlog_obj();
        *(_DWORD *)int buf = 136446210;
        id v91 = "_http_safe_append";
        uint64_t v41 = (char *)_os_log_send_and_compose_impl();
        LOBYTE(__src) = 16;
        os_log_type_t v89 = OS_LOG_TYPE_DEFAULT;
        if (__nwlog_fault(v41, &__src, &v89))
        {
          if (__src == 17)
          {
            __int16 v42 = __nwlog_obj();
            os_log_type_t v43 = __src;
            if (!os_log_type_enabled(v42, (os_log_type_t)__src)) {
              goto LABEL_183;
            }
            *(_DWORD *)int buf = 136446210;
            id v91 = "_http_safe_append";
            uint64_t v44 = "%{public}s called with null (*remaining >= length)";
LABEL_182:
            _os_log_impl(&dword_1830D4000, v42, v43, v44, buf, 0xCu);
            goto LABEL_183;
          }
          if (v89 == OS_LOG_TYPE_DEFAULT)
          {
            __int16 v42 = __nwlog_obj();
            os_log_type_t v43 = __src;
            if (!os_log_type_enabled(v42, (os_log_type_t)__src)) {
              goto LABEL_183;
            }
            *(_DWORD *)int buf = 136446210;
            id v91 = "_http_safe_append";
            uint64_t v44 = "%{public}s called with null (*remaining >= length), backtrace limit exceeded";
            goto LABEL_182;
          }
          os_log_type_t v60 = (char *)__nw_create_backtrace_string();
          __int16 v42 = __nwlog_obj();
          os_log_type_t v43 = __src;
          BOOL v61 = os_log_type_enabled(v42, (os_log_type_t)__src);
          if (!v60)
          {
            if (!v61) {
              goto LABEL_183;
            }
            *(_DWORD *)int buf = 136446210;
            id v91 = "_http_safe_append";
            uint64_t v44 = "%{public}s called with null (*remaining >= length), no backtrace";
            goto LABEL_182;
          }
          if (v61)
          {
            *(_DWORD *)int buf = 136446466;
            id v91 = "_http_safe_append";
            __int16 v92 = 2082;
            nw_endpoint_t v93 = v60;
            _os_log_impl(&dword_1830D4000, v42, v43, "%{public}s called with null (*remaining >= length), dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v60);
        }
LABEL_183:
        if (v41) {
          free(v41);
        }
        *((void *)v85 + 3) = 0;
        __nwlog_obj();
        *(_DWORD *)int buf = 136446210;
        id v91 = "nw_http_fillout_indeterminate_binary_message_body_chunk";
        os_log_type_t v68 = (char *)_os_log_send_and_compose_impl();
        LOBYTE(__src) = 16;
        os_log_type_t v89 = OS_LOG_TYPE_DEFAULT;
        if (!__nwlog_fault(v68, &__src, &v89)) {
          goto LABEL_220;
        }
        if (__src == 17)
        {
          BOOL v69 = __nwlog_obj();
          os_log_type_t v70 = __src;
          if (!os_log_type_enabled(v69, (os_log_type_t)__src)) {
            goto LABEL_220;
          }
          *(_DWORD *)int buf = 136446210;
          id v91 = "nw_http_fillout_indeterminate_binary_message_body_chunk";
          BOOL v71 = "%{public}s called with null cursor";
          goto LABEL_219;
        }
        if (v89 == OS_LOG_TYPE_DEFAULT)
        {
          BOOL v69 = __nwlog_obj();
          os_log_type_t v70 = __src;
          if (!os_log_type_enabled(v69, (os_log_type_t)__src)) {
            goto LABEL_220;
          }
          *(_DWORD *)int buf = 136446210;
          id v91 = "nw_http_fillout_indeterminate_binary_message_body_chunk";
          BOOL v71 = "%{public}s called with null cursor, backtrace limit exceeded";
          goto LABEL_219;
        }
        int v72 = (char *)__nw_create_backtrace_string();
        BOOL v69 = __nwlog_obj();
        os_log_type_t v70 = __src;
        BOOL v75 = os_log_type_enabled(v69, (os_log_type_t)__src);
        if (!v72)
        {
          if (!v75) {
            goto LABEL_220;
          }
          *(_DWORD *)int buf = 136446210;
          id v91 = "nw_http_fillout_indeterminate_binary_message_body_chunk";
          BOOL v71 = "%{public}s called with null cursor, no backtrace";
          goto LABEL_219;
        }
        if (!v75)
        {
LABEL_193:
          free(v72);
          if (!v68) {
            goto LABEL_222;
          }
          goto LABEL_221;
        }
LABEL_192:
        *(_DWORD *)int buf = 136446466;
        id v91 = "nw_http_fillout_indeterminate_binary_message_body_chunk";
        __int16 v92 = 2082;
        nw_endpoint_t v93 = v72;
        _os_log_impl(&dword_1830D4000, v69, v70, "%{public}s called with null cursor, dumping backtrace:%{public}s", buf, 0x16u);
        goto LABEL_193;
      }
      __nwlog_obj();
      *(_DWORD *)int buf = 136446210;
      id v91 = "_http_safe_append";
      unsigned int v30 = (void *)_os_log_send_and_compose_impl();
      LOBYTE(__src) = 16;
      os_log_type_t v89 = OS_LOG_TYPE_DEFAULT;
      if (__nwlog_fault((const char *)v30, &__src, &v89))
      {
        if (__src == 17)
        {
          unsigned int v31 = __nwlog_obj();
          os_log_type_t v32 = __src;
          if (!os_log_type_enabled(v31, (os_log_type_t)__src)) {
            goto LABEL_142;
          }
          *(_DWORD *)int buf = 136446210;
          id v91 = "_http_safe_append";
          nw_endpoint_t v33 = "%{public}s called with null (*remaining >= length)";
          goto LABEL_141;
        }
        if (v89 == OS_LOG_TYPE_DEFAULT)
        {
          unsigned int v31 = __nwlog_obj();
          os_log_type_t v32 = __src;
          if (!os_log_type_enabled(v31, (os_log_type_t)__src)) {
            goto LABEL_142;
          }
          *(_DWORD *)int buf = 136446210;
          id v91 = "_http_safe_append";
          nw_endpoint_t v33 = "%{public}s called with null (*remaining >= length), backtrace limit exceeded";
          goto LABEL_141;
        }
        BOOL v53 = (char *)__nw_create_backtrace_string();
        unsigned int v31 = __nwlog_obj();
        os_log_type_t v32 = __src;
        BOOL v54 = os_log_type_enabled(v31, (os_log_type_t)__src);
        if (v53)
        {
          if (v54)
          {
            *(_DWORD *)int buf = 136446466;
            id v91 = "_http_safe_append";
            __int16 v92 = 2082;
            nw_endpoint_t v93 = v53;
            _os_log_impl(&dword_1830D4000, v31, v32, "%{public}s called with null (*remaining >= length), dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v53);
          if (!v30)
          {
LABEL_144:
            *((void *)v85 + 3) = 0;
            __nwlog_obj();
            *(_DWORD *)int buf = 136446210;
            id v91 = "nw_http_fillout_indeterminate_binary_message_body_chunk";
            os_log_type_t v68 = (char *)_os_log_send_and_compose_impl();
            LOBYTE(__src) = 16;
            os_log_type_t v89 = OS_LOG_TYPE_DEFAULT;
            if ((__nwlog_fault(v68, &__src, &v89) & 1) == 0) {
              goto LABEL_220;
            }
            if (__src == 17)
            {
              BOOL v69 = __nwlog_obj();
              os_log_type_t v70 = __src;
              if (!os_log_type_enabled(v69, (os_log_type_t)__src)) {
                goto LABEL_220;
              }
              *(_DWORD *)int buf = 136446210;
              id v91 = "nw_http_fillout_indeterminate_binary_message_body_chunk";
              BOOL v71 = "%{public}s called with null cursor";
            }
            else if (v89)
            {
              int v72 = (char *)__nw_create_backtrace_string();
              BOOL v69 = __nwlog_obj();
              os_log_type_t v70 = __src;
              BOOL v73 = os_log_type_enabled(v69, (os_log_type_t)__src);
              if (v72)
              {
                if (!v73) {
                  goto LABEL_193;
                }
                goto LABEL_192;
              }
              if (!v73) {
                goto LABEL_220;
              }
              *(_DWORD *)int buf = 136446210;
              id v91 = "nw_http_fillout_indeterminate_binary_message_body_chunk";
              BOOL v71 = "%{public}s called with null cursor, no backtrace";
            }
            else
            {
              BOOL v69 = __nwlog_obj();
              os_log_type_t v70 = __src;
              if (!os_log_type_enabled(v69, (os_log_type_t)__src)) {
                goto LABEL_220;
              }
              *(_DWORD *)int buf = 136446210;
              id v91 = "nw_http_fillout_indeterminate_binary_message_body_chunk";
              BOOL v71 = "%{public}s called with null cursor, backtrace limit exceeded";
            }
LABEL_219:
            _os_log_impl(&dword_1830D4000, v69, v70, v71, buf, 0xCu);
            goto LABEL_220;
          }
LABEL_143:
          free(v30);
          goto LABEL_144;
        }
        if (v54)
        {
          *(_DWORD *)int buf = 136446210;
          id v91 = "_http_safe_append";
          nw_endpoint_t v33 = "%{public}s called with null (*remaining >= length), no backtrace";
LABEL_141:
          _os_log_impl(&dword_1830D4000, v31, v32, v33, buf, 0xCu);
          goto LABEL_142;
        }
      }
      goto LABEL_142;
    }
LABEL_43:
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    id v91 = "_http_safe_append";
    unsigned int v30 = (void *)_os_log_send_and_compose_impl();
    LOBYTE(__src) = 16;
    os_log_type_t v89 = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault((const char *)v30, &__src, &v89)) {
      goto LABEL_142;
    }
    if (__src == 17)
    {
      unsigned int v31 = __nwlog_obj();
      os_log_type_t v32 = __src;
      if (!os_log_type_enabled(v31, (os_log_type_t)__src)) {
        goto LABEL_142;
      }
      *(_DWORD *)int buf = 136446210;
      id v91 = "_http_safe_append";
      nw_endpoint_t v33 = "%{public}s called with null data";
      goto LABEL_141;
    }
    if (v89 == OS_LOG_TYPE_DEFAULT)
    {
      unsigned int v31 = __nwlog_obj();
      os_log_type_t v32 = __src;
      if (!os_log_type_enabled(v31, (os_log_type_t)__src)) {
        goto LABEL_142;
      }
      *(_DWORD *)int buf = 136446210;
      id v91 = "_http_safe_append";
      nw_endpoint_t v33 = "%{public}s called with null data, backtrace limit exceeded";
      goto LABEL_141;
    }
    os_log_type_t v49 = (char *)__nw_create_backtrace_string();
    unsigned int v31 = __nwlog_obj();
    os_log_type_t v32 = __src;
    BOOL v50 = os_log_type_enabled(v31, (os_log_type_t)__src);
    if (!v49)
    {
      if (!v50) {
        goto LABEL_142;
      }
      *(_DWORD *)int buf = 136446210;
      id v91 = "_http_safe_append";
      nw_endpoint_t v33 = "%{public}s called with null data, no backtrace";
      goto LABEL_141;
    }
    if (v50)
    {
      *(_DWORD *)int buf = 136446466;
      id v91 = "_http_safe_append";
      __int16 v92 = 2082;
      nw_endpoint_t v93 = v49;
      _os_log_impl(&dword_1830D4000, v31, v32, "%{public}s called with null data, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v49);
LABEL_142:
    if (!v30) {
      goto LABEL_144;
    }
    goto LABEL_143;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
  *(_DWORD *)int buf = 136446466;
  id v91 = "_http_vle_encode";
  __int16 v92 = 2048;
  nw_endpoint_t v93 = (const char *)a2;
  os_log_type_t v29 = (void *)_os_log_send_and_compose_impl();
  BOOL result = __nwlog_abort((uint64_t)v29);
  if (!result)
  {
    free(v29);
    int v13 = (char *)*((void *)v85 + 3);
    if (v13)
    {
      os_log_type_t v14 = v81;
      if (a1) {
        goto LABEL_8;
      }
      goto LABEL_43;
    }
LABEL_162:
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    id v91 = "nw_http_fillout_indeterminate_binary_message_body_chunk";
    os_log_type_t v68 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v89 = OS_LOG_TYPE_ERROR;
    char v88 = 0;
    if (!__nwlog_fault(v68, &v89, &v88)) {
      goto LABEL_220;
    }
    if (v89 == OS_LOG_TYPE_FAULT)
    {
      BOOL v69 = __nwlog_obj();
      os_log_type_t v70 = v89;
      if (!os_log_type_enabled(v69, v89)) {
        goto LABEL_220;
      }
      *(_DWORD *)int buf = 136446210;
      id v91 = "nw_http_fillout_indeterminate_binary_message_body_chunk";
      BOOL v71 = "%{public}s called with null cursor";
    }
    else if (v88)
    {
      int v72 = (char *)__nw_create_backtrace_string();
      BOOL v69 = __nwlog_obj();
      os_log_type_t v70 = v89;
      BOOL v74 = os_log_type_enabled(v69, v89);
      if (v72)
      {
        if (!v74) {
          goto LABEL_193;
        }
        goto LABEL_192;
      }
      if (!v74) {
        goto LABEL_220;
      }
      *(_DWORD *)int buf = 136446210;
      id v91 = "nw_http_fillout_indeterminate_binary_message_body_chunk";
      BOOL v71 = "%{public}s called with null cursor, no backtrace";
    }
    else
    {
      BOOL v69 = __nwlog_obj();
      os_log_type_t v70 = v89;
      if (!os_log_type_enabled(v69, v89)) {
        goto LABEL_220;
      }
      *(_DWORD *)int buf = 136446210;
      id v91 = "nw_http_fillout_indeterminate_binary_message_body_chunk";
      BOOL v71 = "%{public}s called with null cursor, backtrace limit exceeded";
    }
    goto LABEL_219;
  }
  __break(1u);
  return result;
}

id *nw_http_copy_metadata_from_binary_message(_DWORD *a1, unint64_t a2, unint64_t *a3, BOOL *a4)
{
  uint64_t v213 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v204 = "nw_http_copy_metadata_from_binary_message";
    os_log_type_t v102 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v201 = 0;
    if (!__nwlog_fault(v102, &type, &v201)) {
      goto LABEL_368;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v201)
      {
        int v103 = __nwlog_obj();
        os_log_type_t v104 = type;
        if (!os_log_type_enabled(v103, type)) {
          goto LABEL_368;
        }
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v204 = "nw_http_copy_metadata_from_binary_message";
        os_log_type_t v105 = "%{public}s called with null buffer, backtrace limit exceeded";
        goto LABEL_367;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v103 = __nwlog_obj();
      os_log_type_t v104 = type;
      BOOL v111 = os_log_type_enabled(v103, type);
      if (!backtrace_string)
      {
        if (!v111) {
          goto LABEL_368;
        }
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v204 = "nw_http_copy_metadata_from_binary_message";
        os_log_type_t v105 = "%{public}s called with null buffer, no backtrace";
        goto LABEL_367;
      }
      if (v111)
      {
        *(_DWORD *)int buf = 136446466;
        os_log_type_t v204 = "nw_http_copy_metadata_from_binary_message";
        __int16 v205 = 2082;
        unsigned int v206 = backtrace_string;
        os_log_type_t v112 = "%{public}s called with null buffer, dumping backtrace:%{public}s";
LABEL_306:
        _os_log_impl(&dword_1830D4000, v103, v104, v112, buf, 0x16u);
      }
LABEL_307:
      free(backtrace_string);
      goto LABEL_368;
    }
    int v103 = __nwlog_obj();
    os_log_type_t v104 = type;
    if (!os_log_type_enabled(v103, type)) {
      goto LABEL_368;
    }
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v204 = "nw_http_copy_metadata_from_binary_message";
    os_log_type_t v105 = "%{public}s called with null buffer";
LABEL_367:
    _os_log_impl(&dword_1830D4000, v103, v104, v105, buf, 0xCu);
LABEL_368:
    if (v102) {
      free(v102);
    }
    return 0;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v204 = "nw_http_copy_metadata_from_binary_message";
    os_log_type_t v102 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v201 = 0;
    if (!__nwlog_fault(v102, &type, &v201)) {
      goto LABEL_368;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v103 = __nwlog_obj();
      os_log_type_t v104 = type;
      if (!os_log_type_enabled(v103, type)) {
        goto LABEL_368;
      }
      *(_DWORD *)int buf = 136446210;
      os_log_type_t v204 = "nw_http_copy_metadata_from_binary_message";
      os_log_type_t v105 = "%{public}s called with null buffer_length";
      goto LABEL_367;
    }
    if (!v201)
    {
      int v103 = __nwlog_obj();
      os_log_type_t v104 = type;
      if (!os_log_type_enabled(v103, type)) {
        goto LABEL_368;
      }
      *(_DWORD *)int buf = 136446210;
      os_log_type_t v204 = "nw_http_copy_metadata_from_binary_message";
      os_log_type_t v105 = "%{public}s called with null buffer_length, backtrace limit exceeded";
      goto LABEL_367;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    int v103 = __nwlog_obj();
    os_log_type_t v104 = type;
    BOOL v113 = os_log_type_enabled(v103, type);
    if (backtrace_string)
    {
      if (v113)
      {
        *(_DWORD *)int buf = 136446466;
        os_log_type_t v204 = "nw_http_copy_metadata_from_binary_message";
        __int16 v205 = 2082;
        unsigned int v206 = backtrace_string;
        os_log_type_t v112 = "%{public}s called with null buffer_length, dumping backtrace:%{public}s";
        goto LABEL_306;
      }
      goto LABEL_307;
    }
    if (!v113) {
      goto LABEL_368;
    }
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v204 = "nw_http_copy_metadata_from_binary_message";
    os_log_type_t v105 = "%{public}s called with null buffer_length, no backtrace";
    goto LABEL_367;
  }
  unint64_t v7 = *(unsigned __int8 *)a1;
  if (v7 <= 0x3F)
  {
    uint64_t v8 = 1;
    goto LABEL_5;
  }
  if (v7 >> 6 == 2)
  {
    if (a2 < 4) {
      goto LABEL_19;
    }
    unint64_t v7 = bswap32(*a1 & 0xFFFFFF7F);
    uint64_t v8 = 4;
  }
  else
  {
    if (v7 >> 6 == 1)
    {
      if (a2 >= 2)
      {
        unint64_t v7 = bswap32(*(_WORD *)a1 & 0xFFBF) >> 16;
        uint64_t v8 = 2;
        goto LABEL_5;
      }
LABEL_19:
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v20 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v204 = "nw_http_copy_metadata_from_binary_message";
        id v10 = "%{public}s Failed to decode integer";
        size_t v11 = v20;
        uint32_t v12 = 12;
        goto LABEL_21;
      }
      return 0;
    }
    if (a2 < 8) {
      goto LABEL_19;
    }
    unint64_t v7 = bswap64(*(void *)a1 & 0xFFFFFFFFFFFFFF3FLL);
    uint64_t v8 = 8;
  }
LABEL_5:
  if (v7 >= 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v9 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136446722;
      os_log_type_t v204 = "nw_http_copy_metadata_from_binary_message";
      __int16 v205 = 2048;
      unsigned int v206 = (const char *)v7;
      __int16 v207 = 2048;
      uint64_t v208 = 3;
      id v10 = "%{public}s _output %llu > _max %llu";
      size_t v11 = v9;
      uint32_t v12 = 32;
LABEL_21:
      _os_log_impl(&dword_1830D4000, v11, OS_LOG_TYPE_ERROR, v10, buf, v12);
      return 0;
    }
    return 0;
  }
  int v13 = (_DWORD *)((char *)a1 + v8);
  unint64_t v14 = a2 - v8;
  unint64_t v15 = v7 & 0xFFFFFFFFFFFFFFFDLL;
  ssize_t v16 = (void *)_nw_http_parsed_fields_create();
  uint64_t v17 = v16;
  if ((v7 & 0xFFFFFFFFFFFFFFFDLL) == 0)
  {
    if (a2 == v8)
    {
LABEL_23:
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      char v18 = gLogObj;
      if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR)) {
        goto LABEL_27;
      }
      *(_DWORD *)int buf = 136446210;
      os_log_type_t v204 = "nw_http_copy_metadata_from_binary_message";
      id v19 = "%{public}s Failed to decode integer";
      goto LABEL_25;
    }
    unint64_t v27 = *(unsigned __int8 *)v13;
    if (v27 <= 0x3F)
    {
      uint64_t v28 = 1;
      goto LABEL_35;
    }
    if (v27 >> 6 == 2)
    {
      if (v14 < 4) {
        goto LABEL_23;
      }
      unint64_t v27 = bswap32(*v13 & 0xFFFFFF7F);
      uint64_t v28 = 4;
    }
    else
    {
      if (v27 >> 6 == 1)
      {
        if (v14 < 2) {
          goto LABEL_23;
        }
        unint64_t v27 = bswap32(*(_WORD *)v13 & 0xFFBF) >> 16;
        uint64_t v28 = 2;
        goto LABEL_35;
      }
      if (v14 < 8) {
        goto LABEL_23;
      }
      unint64_t v27 = bswap64(*(void *)v13 & 0xFFFFFFFFFFFFFF3FLL);
      uint64_t v28 = 8;
    }
    if (v27 >= 0x10000)
    {
      unsigned int v30 = __nwlog_obj();
      if (!os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
        goto LABEL_27;
      }
      goto LABEL_515;
    }
LABEL_35:
    unint64_t v29 = v14 - v28;
    if (v27 > v14 - v28)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      unsigned int v30 = gLogObj;
      if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR)) {
        goto LABEL_27;
      }
      goto LABEL_404;
    }
    os_log_type_t v32 = (char *)v13 + v28;
    if (!nw_http_parsed_fields_add(v16, (unint64_t)":method", -1, v32, v27, 1)) {
      goto LABEL_27;
    }
    BOOL v33 = v29 >= v27;
    unint64_t v34 = v29 - v27;
    if (!v33)
    {
      __nwlog_obj();
      *(_DWORD *)int buf = 136446978;
      os_log_type_t v204 = "nw_http_copy_metadata_from_binary_message";
      __int16 v205 = 2082;
      unsigned int v206 = "remaining";
      __int16 v207 = 2048;
      uint64_t v208 = v27;
      __int16 v209 = 2048;
      unint64_t v210 = v34;
      nw_endpoint_t v35 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v201 = 0;
      if (!__nwlog_fault(v35, &type, &v201)) {
        goto LABEL_216;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v36 = __nwlog_obj();
        os_log_type_t v37 = type;
        if (!os_log_type_enabled(v36, type)) {
          goto LABEL_216;
        }
        *(_DWORD *)int buf = 136446978;
        os_log_type_t v204 = "nw_http_copy_metadata_from_binary_message";
        __int16 v205 = 2082;
        unsigned int v206 = "remaining";
        __int16 v207 = 2048;
        uint64_t v208 = v27;
        __int16 v209 = 2048;
        unint64_t v210 = v34;
        __int16 v38 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu";
      }
      else if (v201)
      {
        int v72 = (char *)__nw_create_backtrace_string();
        os_log_type_t v36 = __nwlog_obj();
        os_log_type_t v37 = type;
        BOOL v73 = os_log_type_enabled(v36, type);
        if (v72)
        {
          if (v73)
          {
            *(_DWORD *)int buf = 136447234;
            os_log_type_t v204 = "nw_http_copy_metadata_from_binary_message";
            __int16 v205 = 2082;
            unsigned int v206 = "remaining";
            __int16 v207 = 2048;
            uint64_t v208 = v27;
            __int16 v209 = 2048;
            unint64_t v210 = v34;
            __int16 v211 = 2082;
            os_log_type_t v212 = v72;
            _os_log_impl(&dword_1830D4000, v36, v37, "%{public}s Underflow: %{public}s, decrement %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
          }
          free(v72);
          goto LABEL_216;
        }
        if (!v73)
        {
LABEL_216:
          if (v35) {
            free(v35);
          }
          goto LABEL_218;
        }
        *(_DWORD *)int buf = 136446978;
        os_log_type_t v204 = "nw_http_copy_metadata_from_binary_message";
        __int16 v205 = 2082;
        unsigned int v206 = "remaining";
        __int16 v207 = 2048;
        uint64_t v208 = v27;
        __int16 v209 = 2048;
        unint64_t v210 = v34;
        __int16 v38 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, no backtrace";
      }
      else
      {
        os_log_type_t v36 = __nwlog_obj();
        os_log_type_t v37 = type;
        if (!os_log_type_enabled(v36, type)) {
          goto LABEL_216;
        }
        *(_DWORD *)int buf = 136446978;
        os_log_type_t v204 = "nw_http_copy_metadata_from_binary_message";
        __int16 v205 = 2082;
        unsigned int v206 = "remaining";
        __int16 v207 = 2048;
        uint64_t v208 = v27;
        __int16 v209 = 2048;
        unint64_t v210 = v34;
        __int16 v38 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, backtrace limit exceeded";
      }
      _os_log_impl(&dword_1830D4000, v36, v37, v38, buf, 0x2Au);
      goto LABEL_216;
    }
    if (!v34) {
      goto LABEL_218;
    }
    dispatch_qos_class_t v58 = &v32[v27];
    unint64_t v27 = v32[v27];
    if (v27 <= 0x3F)
    {
      uint64_t v59 = 1;
      goto LABEL_116;
    }
    if (v27 >> 6 == 2)
    {
      if (v34 < 4) {
        goto LABEL_218;
      }
      unint64_t v27 = bswap32(*(_DWORD *)v58 & 0xFFFFFF7F);
      uint64_t v59 = 4;
    }
    else
    {
      if (v27 >> 6 == 1)
      {
        if (v34 >= 2)
        {
          unint64_t v27 = bswap32(*(_WORD *)v58 & 0xFFBF) >> 16;
          uint64_t v59 = 2;
          goto LABEL_116;
        }
LABEL_218:
        char v18 = __nwlog_obj();
        if (!os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
          goto LABEL_27;
        }
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v204 = "nw_http_copy_metadata_from_binary_message";
        id v19 = "%{public}s Failed to decode integer";
        goto LABEL_25;
      }
      if (v34 < 8) {
        goto LABEL_218;
      }
      unint64_t v27 = bswap64(*(void *)v58 & 0xFFFFFFFFFFFFFF3FLL);
      uint64_t v59 = 8;
    }
    if (v27 >= 0x10000)
    {
      unsigned int v30 = __nwlog_obj();
      if (!os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
        goto LABEL_27;
      }
      goto LABEL_515;
    }
LABEL_116:
    unint64_t v29 = v34 - v59;
    if (v27 > v29)
    {
      unsigned int v30 = __nwlog_obj();
      if (!os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
        goto LABEL_27;
      }
      goto LABEL_404;
    }
    BOOL v76 = &v58[v59];
    if (v27 && !nw_http_parsed_fields_add(v17, (unint64_t)":scheme", -1, &v58[v59], v27, 1)) {
      goto LABEL_27;
    }
    BOOL v33 = v29 >= v27;
    unint64_t v77 = v29 - v27;
    if (!v33)
    {
      __nwlog_obj();
      *(_DWORD *)int buf = 136446978;
      os_log_type_t v204 = "nw_http_copy_metadata_from_binary_message";
      __int16 v205 = 2082;
      unsigned int v206 = "remaining";
      __int16 v207 = 2048;
      uint64_t v208 = v27;
      __int16 v209 = 2048;
      unint64_t v210 = v77;
      BOOL v78 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v201 = 0;
      if (!__nwlog_fault(v78, &type, &v201)) {
        goto LABEL_375;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        id v79 = __nwlog_obj();
        os_log_type_t v80 = type;
        if (!os_log_type_enabled(v79, type)) {
          goto LABEL_375;
        }
        *(_DWORD *)int buf = 136446978;
        os_log_type_t v204 = "nw_http_copy_metadata_from_binary_message";
        __int16 v205 = 2082;
        unsigned int v206 = "remaining";
        __int16 v207 = 2048;
        uint64_t v208 = v27;
        __int16 v209 = 2048;
        unint64_t v210 = v77;
        uint64_t v81 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu";
      }
      else if (v201)
      {
        os_log_type_t v119 = (char *)__nw_create_backtrace_string();
        id v79 = __nwlog_obj();
        os_log_type_t v80 = type;
        BOOL v120 = os_log_type_enabled(v79, type);
        if (v119)
        {
          if (v120)
          {
            *(_DWORD *)int buf = 136447234;
            os_log_type_t v204 = "nw_http_copy_metadata_from_binary_message";
            __int16 v205 = 2082;
            unsigned int v206 = "remaining";
            __int16 v207 = 2048;
            uint64_t v208 = v27;
            __int16 v209 = 2048;
            unint64_t v210 = v77;
            __int16 v211 = 2082;
            os_log_type_t v212 = v119;
            _os_log_impl(&dword_1830D4000, v79, v80, "%{public}s Underflow: %{public}s, decrement %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
          }
          free(v119);
          goto LABEL_375;
        }
        if (!v120)
        {
LABEL_375:
          if (v78) {
            free(v78);
          }
          goto LABEL_377;
        }
        *(_DWORD *)int buf = 136446978;
        os_log_type_t v204 = "nw_http_copy_metadata_from_binary_message";
        __int16 v205 = 2082;
        unsigned int v206 = "remaining";
        __int16 v207 = 2048;
        uint64_t v208 = v27;
        __int16 v209 = 2048;
        unint64_t v210 = v77;
        uint64_t v81 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, no backtrace";
      }
      else
      {
        id v79 = __nwlog_obj();
        os_log_type_t v80 = type;
        if (!os_log_type_enabled(v79, type)) {
          goto LABEL_375;
        }
        *(_DWORD *)int buf = 136446978;
        os_log_type_t v204 = "nw_http_copy_metadata_from_binary_message";
        __int16 v205 = 2082;
        unsigned int v206 = "remaining";
        __int16 v207 = 2048;
        uint64_t v208 = v27;
        __int16 v209 = 2048;
        unint64_t v210 = v77;
        uint64_t v81 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, backtrace limit exceeded";
      }
      _os_log_impl(&dword_1830D4000, v79, v80, v81, buf, 0x2Au);
      goto LABEL_375;
    }
    if (!v77) {
      goto LABEL_377;
    }
    BOOL v106 = &v76[v27];
    unint64_t v27 = v76[v27];
    if (v27 <= 0x3F)
    {
      uint64_t v107 = 1;
      goto LABEL_291;
    }
    if (v27 >> 6 == 2)
    {
      if (v77 < 4) {
        goto LABEL_377;
      }
      unint64_t v27 = bswap32(*(_DWORD *)v106 & 0xFFFFFF7F);
      uint64_t v107 = 4;
    }
    else
    {
      if (v27 >> 6 == 1)
      {
        if (v77 >= 2)
        {
          unint64_t v27 = bswap32(*(_WORD *)v106 & 0xFFBF) >> 16;
          uint64_t v107 = 2;
          goto LABEL_291;
        }
LABEL_377:
        char v18 = __nwlog_obj();
        if (!os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
          goto LABEL_27;
        }
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v204 = "nw_http_copy_metadata_from_binary_message";
        id v19 = "%{public}s Failed to decode integer";
        goto LABEL_25;
      }
      if (v77 < 8) {
        goto LABEL_377;
      }
      unint64_t v27 = bswap64(*(void *)v106 & 0xFFFFFFFFFFFFFF3FLL);
      uint64_t v107 = 8;
    }
    if (v27 >= 0x10000)
    {
      unsigned int v30 = __nwlog_obj();
      if (!os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
        goto LABEL_27;
      }
      goto LABEL_515;
    }
LABEL_291:
    unint64_t v29 = v77 - v107;
    if (v27 > v29)
    {
      unsigned int v30 = __nwlog_obj();
      if (!os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
        goto LABEL_27;
      }
      goto LABEL_404;
    }
    int v125 = &v106[v107];
    if (v27 && !nw_http_parsed_fields_add(v17, (unint64_t)":authority", -1, &v106[v107], v27, 1)) {
      goto LABEL_27;
    }
    BOOL v33 = v29 >= v27;
    unint64_t v126 = v29 - v27;
    if (!v33)
    {
      __nwlog_obj();
      *(_DWORD *)int buf = 136446978;
      os_log_type_t v204 = "nw_http_copy_metadata_from_binary_message";
      __int16 v205 = 2082;
      unsigned int v206 = "remaining";
      __int16 v207 = 2048;
      uint64_t v208 = v27;
      __int16 v209 = 2048;
      unint64_t v210 = v126;
      __int16 v127 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v201 = 0;
      if (!__nwlog_fault(v127, &type, &v201)) {
        goto LABEL_503;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        unsigned int v128 = __nwlog_obj();
        os_log_type_t v129 = type;
        if (!os_log_type_enabled(v128, type)) {
          goto LABEL_503;
        }
        *(_DWORD *)int buf = 136446978;
        os_log_type_t v204 = "nw_http_copy_metadata_from_binary_message";
        __int16 v205 = 2082;
        unsigned int v206 = "remaining";
        __int16 v207 = 2048;
        uint64_t v208 = v27;
        __int16 v209 = 2048;
        unint64_t v210 = v126;
        int v130 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu";
      }
      else if (v201)
      {
        BOOL v155 = (char *)__nw_create_backtrace_string();
        unsigned int v128 = __nwlog_obj();
        os_log_type_t v129 = type;
        BOOL v156 = os_log_type_enabled(v128, type);
        if (v155)
        {
          if (v156)
          {
            *(_DWORD *)int buf = 136447234;
            os_log_type_t v204 = "nw_http_copy_metadata_from_binary_message";
            __int16 v205 = 2082;
            unsigned int v206 = "remaining";
            __int16 v207 = 2048;
            uint64_t v208 = v27;
            __int16 v209 = 2048;
            unint64_t v210 = v126;
            __int16 v211 = 2082;
            os_log_type_t v212 = v155;
            _os_log_impl(&dword_1830D4000, v128, v129, "%{public}s Underflow: %{public}s, decrement %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
          }
          free(v155);
          goto LABEL_503;
        }
        if (!v156)
        {
LABEL_503:
          if (v127) {
            free(v127);
          }
          goto LABEL_505;
        }
        *(_DWORD *)int buf = 136446978;
        os_log_type_t v204 = "nw_http_copy_metadata_from_binary_message";
        __int16 v205 = 2082;
        unsigned int v206 = "remaining";
        __int16 v207 = 2048;
        uint64_t v208 = v27;
        __int16 v209 = 2048;
        unint64_t v210 = v126;
        int v130 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, no backtrace";
      }
      else
      {
        unsigned int v128 = __nwlog_obj();
        os_log_type_t v129 = type;
        if (!os_log_type_enabled(v128, type)) {
          goto LABEL_503;
        }
        *(_DWORD *)int buf = 136446978;
        os_log_type_t v204 = "nw_http_copy_metadata_from_binary_message";
        __int16 v205 = 2082;
        unsigned int v206 = "remaining";
        __int16 v207 = 2048;
        uint64_t v208 = v27;
        __int16 v209 = 2048;
        unint64_t v210 = v126;
        int v130 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, backtrace limit exceeded";
      }
      _os_log_impl(&dword_1830D4000, v128, v129, v130, buf, 0x2Au);
      goto LABEL_503;
    }
    if (!v126) {
      goto LABEL_505;
    }
    __int16 v136 = &v125[v27];
    unint64_t v27 = v125[v27];
    if (v27 <= 0x3F)
    {
      uint64_t v137 = 1;
      goto LABEL_402;
    }
    if (v27 >> 6 == 2)
    {
      if (v126 < 4) {
        goto LABEL_505;
      }
      unint64_t v27 = bswap32(*(_DWORD *)v136 & 0xFFFFFF7F);
      uint64_t v137 = 4;
    }
    else
    {
      if (v27 >> 6 == 1)
      {
        if (v126 >= 2)
        {
          unint64_t v27 = bswap32(*(_WORD *)v136 & 0xFFBF) >> 16;
          uint64_t v137 = 2;
          goto LABEL_402;
        }
LABEL_505:
        char v18 = __nwlog_obj();
        if (!os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
          goto LABEL_27;
        }
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v204 = "nw_http_copy_metadata_from_binary_message";
        id v19 = "%{public}s Failed to decode integer";
        goto LABEL_25;
      }
      if (v126 < 8) {
        goto LABEL_505;
      }
      unint64_t v27 = bswap64(*(void *)v136 & 0xFFFFFFFFFFFFFF3FLL);
      uint64_t v137 = 8;
    }
    if (v27 < 0x10000)
    {
LABEL_402:
      unint64_t v29 = v126 - v137;
      if (v27 > v29)
      {
        unsigned int v30 = __nwlog_obj();
        if (!os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
          goto LABEL_27;
        }
LABEL_404:
        *(_DWORD *)int buf = 136446722;
        os_log_type_t v204 = "nw_http_copy_metadata_from_binary_message";
        __int16 v205 = 2048;
        unsigned int v206 = (const char *)v27;
        __int16 v207 = 2048;
        uint64_t v208 = v29;
        id v19 = "%{public}s _length %llu > remaining %zu";
        goto LABEL_172;
      }
      os_log_type_t v161 = &v136[v137];
      if (v27 && !nw_http_parsed_fields_add(v17, (unint64_t)":path", -1, &v136[v137], v27, 1)) {
        goto LABEL_27;
      }
      v200 = &v161[v27];
      unint64_t v26 = v29 - v27;
      if (v29 >= v27)
      {
        int v25 = &v161[v27];
        goto LABEL_64;
      }
      __nwlog_obj();
      *(_DWORD *)int buf = 136446978;
      os_log_type_t v204 = "nw_http_copy_metadata_from_binary_message";
      __int16 v205 = 2082;
      unsigned int v206 = "remaining";
      __int16 v207 = 2048;
      uint64_t v208 = v27;
      __int16 v209 = 2048;
      unint64_t v210 = v29 - v27;
      os_log_type_t v162 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v201 = 0;
      if (__nwlog_fault(v162, &type, &v201))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          BOOL v163 = __nwlog_obj();
          os_log_type_t v164 = type;
          if (os_log_type_enabled(v163, type))
          {
            *(_DWORD *)int buf = 136446978;
            os_log_type_t v204 = "nw_http_copy_metadata_from_binary_message";
            __int16 v205 = 2082;
            unsigned int v206 = "remaining";
            __int16 v207 = 2048;
            uint64_t v208 = v27;
            __int16 v209 = 2048;
            unint64_t v210 = v26;
            BOOL v165 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu";
LABEL_556:
            v179 = v163;
            os_log_type_t v180 = v164;
LABEL_557:
            _os_log_impl(&dword_1830D4000, v179, v180, v165, buf, 0x2Au);
          }
        }
        else if (v201)
        {
          v176 = (char *)__nw_create_backtrace_string();
          os_log_type_t v177 = __nwlog_obj();
          os_log_type_t v199 = type;
          BOOL v178 = os_log_type_enabled(v177, type);
          if (v176)
          {
            if (v178)
            {
              *(_DWORD *)int buf = 136447234;
              os_log_type_t v204 = "nw_http_copy_metadata_from_binary_message";
              __int16 v205 = 2082;
              unsigned int v206 = "remaining";
              __int16 v207 = 2048;
              uint64_t v208 = v27;
              __int16 v209 = 2048;
              unint64_t v210 = v26;
              __int16 v211 = 2082;
              os_log_type_t v212 = v176;
              _os_log_impl(&dword_1830D4000, v177, v199, "%{public}s Underflow: %{public}s, decrement %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
            }
            free(v176);
            goto LABEL_558;
          }
          if (v178)
          {
            *(_DWORD *)int buf = 136446978;
            os_log_type_t v204 = "nw_http_copy_metadata_from_binary_message";
            __int16 v205 = 2082;
            unsigned int v206 = "remaining";
            __int16 v207 = 2048;
            uint64_t v208 = v27;
            __int16 v209 = 2048;
            unint64_t v210 = v26;
            BOOL v165 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, no backtrace";
            v179 = v177;
            os_log_type_t v180 = v199;
            goto LABEL_557;
          }
        }
        else
        {
          BOOL v163 = __nwlog_obj();
          os_log_type_t v164 = type;
          if (os_log_type_enabled(v163, type))
          {
            *(_DWORD *)int buf = 136446978;
            os_log_type_t v204 = "nw_http_copy_metadata_from_binary_message";
            __int16 v205 = 2082;
            unsigned int v206 = "remaining";
            __int16 v207 = 2048;
            uint64_t v208 = v27;
            __int16 v209 = 2048;
            unint64_t v210 = v26;
            BOOL v165 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, backtrace limit exceeded";
            goto LABEL_556;
          }
        }
      }
LABEL_558:
      if (v162) {
        free(v162);
      }
      unint64_t v26 = 0;
      int v25 = v200;
      goto LABEL_64;
    }
    unsigned int v30 = __nwlog_obj();
    if (!os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
      goto LABEL_27;
    }
LABEL_515:
    *(_DWORD *)int buf = 136446722;
    os_log_type_t v204 = "nw_http_copy_metadata_from_binary_message";
    __int16 v205 = 2048;
    unsigned int v206 = (const char *)v27;
    __int16 v207 = 2048;
    uint64_t v208 = 0xFFFFLL;
    id v19 = "%{public}s _output %llu > _max %llu";
    goto LABEL_172;
  }
  if (a2 == v8)
  {
LABEL_14:
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    char v18 = gLogObj;
    if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR)) {
      goto LABEL_27;
    }
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v204 = "nw_http_copy_metadata_from_binary_message";
    id v19 = "%{public}s Failed to decode integer";
    goto LABEL_25;
  }
  unint64_t v24 = *(unsigned __int8 *)v13;
  if (v24 > 0x3F)
  {
    if (v24 >> 6 == 2)
    {
      if (v14 < 4) {
        goto LABEL_14;
      }
      unint64_t v24 = bswap32(*v13 & 0xFFFFFF7F);
      uint64_t v31 = 4;
    }
    else if (v24 >> 6 == 1)
    {
      if (v14 < 2) {
        goto LABEL_14;
      }
      unint64_t v24 = bswap32(*(_WORD *)v13 & 0xFFBF) >> 16;
      uint64_t v31 = 2;
    }
    else
    {
      if (v14 < 8) {
        goto LABEL_14;
      }
      unint64_t v24 = bswap64(*(void *)v13 & 0xFFFFFFFFFFFFFF3FLL);
      uint64_t v31 = 8;
    }
    if (v24 >= 0x3E9)
    {
      unsigned int v30 = __nwlog_obj();
      if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136446722;
        os_log_type_t v204 = "nw_http_copy_metadata_from_binary_message";
        __int16 v205 = 2048;
        unsigned int v206 = (const char *)v24;
        __int16 v207 = 2048;
        uint64_t v208 = 1000;
        id v19 = "%{public}s _output %llu > _max %llu";
        goto LABEL_172;
      }
      goto LABEL_27;
    }
    int v25 = (char *)v13 + v31;
    unint64_t v26 = v14 - v31;
  }
  else
  {
    int v25 = (char *)v13 + 1;
    unint64_t v26 = v14 - 1;
  }
  if (v24 - 601 <= 0xFFFFFFFFFFFFFE6ELL)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v39 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136446466;
      os_log_type_t v204 = "nw_http_copy_metadata_from_binary_message";
      __int16 v205 = 2048;
      unsigned int v206 = (const char *)v24;
      id v19 = "%{public}s Informational statuses not supported: %llu";
      uint64_t v22 = v39;
      uint32_t v23 = 22;
      goto LABEL_26;
    }
    goto LABEL_27;
  }
  snprintf((char *)buf, 4uLL, "%llu", v24);
  nw_http_parsed_fields_add(v17, (unint64_t)":status", -1, (const char *)buf, -1, 1);
LABEL_64:
  unint64_t v40 = v7 & 2;
  if (a4) {
    *a4 = v40 == 2;
  }
  if (v40 != 2)
  {
    if (v26)
    {
      unint64_t v54 = *(unsigned __int8 *)v25;
      if (v54 <= 0x3F)
      {
        uint64_t v55 = 1;
LABEL_102:
        BOOL v56 = &v25[v55];
LABEL_103:
        unint64_t v57 = v26 - v55;
        if (v54 > v26 - v55)
        {
          unsigned int v30 = __nwlog_obj();
          if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)int buf = 136446722;
            os_log_type_t v204 = "nw_http_copy_metadata_from_binary_message";
            __int16 v205 = 2048;
            unsigned int v206 = (const char *)v54;
            __int16 v207 = 2048;
            uint64_t v208 = v57;
            id v19 = "%{public}s _length %llu > remaining %zu";
            goto LABEL_172;
          }
          goto LABEL_27;
        }
        os_log_type_t v60 = &v56[v54];
        while (1)
        {
          if (v56 >= v60)
          {
            if (v56)
            {
              if (!v57) {
                goto LABEL_361;
              }
              unint64_t v54 = *(unsigned __int8 *)v56;
              if (v54 <= 0x3F)
              {
                uint64_t v85 = 1;
                goto LABEL_231;
              }
              if (v54 >> 6 == 2)
              {
                if (v57 < 4) {
                  goto LABEL_361;
                }
                unint64_t v54 = bswap32(*(_DWORD *)v56 & 0xFFFFFF7F);
                uint64_t v85 = 4;
              }
              else
              {
                if (v54 >> 6 == 1)
                {
                  if (v57 >= 2)
                  {
                    unint64_t v54 = bswap32(*(_WORD *)v56 & 0xFFBF) >> 16;
                    uint64_t v85 = 2;
                    goto LABEL_231;
                  }
LABEL_361:
                  char v18 = __nwlog_obj();
                  if (!os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
                    goto LABEL_27;
                  }
                  *(_DWORD *)int buf = 136446210;
                  os_log_type_t v204 = "nw_http_copy_metadata_from_binary_message";
                  id v19 = "%{public}s Failed to decode integer";
                  goto LABEL_25;
                }
                if (v57 < 8) {
                  goto LABEL_361;
                }
                unint64_t v54 = bswap64(*(void *)v56 & 0xFFFFFFFFFFFFFF3FLL);
                uint64_t v85 = 8;
              }
LABEL_231:
              uint64_t v63 = v57 - v85;
              unint64_t v86 = v57 - v85 - v54;
              if (v57 - v85 < v54)
              {
                unsigned int v30 = __nwlog_obj();
                if (!os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
                  goto LABEL_27;
                }
                goto LABEL_233;
              }
              if (a3) {
                *a3 = v54;
              }
              if (v63 == v54) {
                goto LABEL_167;
              }
              os_log_type_t v121 = &v56[v85 + v54];
              unint64_t v54 = *(unsigned __int8 *)v121;
              if (v54 <= 0x3F)
              {
                uint64_t v122 = 1;
                goto LABEL_331;
              }
              if (v54 >> 6 == 2)
              {
                if (v86 < 4) {
                  goto LABEL_460;
                }
                unint64_t v54 = bswap32(*(_DWORD *)v121 & 0xFFFFFF7F);
                uint64_t v122 = 4;
LABEL_331:
                BOOL v123 = &v121[v122];
              }
              else
              {
                if (v54 >> 6 == 1)
                {
                  if (v86 >= 2)
                  {
                    unint64_t v54 = bswap32(*(_WORD *)v121 & 0xFFBF) >> 16;
                    uint64_t v122 = 2;
                    goto LABEL_331;
                  }
LABEL_460:
                  char v18 = __nwlog_obj();
                  if (!os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
                    goto LABEL_27;
                  }
                  *(_DWORD *)int buf = 136446210;
                  os_log_type_t v204 = "nw_http_copy_metadata_from_binary_message";
                  id v19 = "%{public}s Failed to decode integer";
                  goto LABEL_25;
                }
                if (v86 < 8) {
                  goto LABEL_460;
                }
                uint64_t v166 = *(void *)v121;
                BOOL v123 = v121 + 8;
                unint64_t v54 = bswap64(v166 & 0xFFFFFFFFFFFFFF3FLL);
                if (HIDWORD(v54))
                {
                  unsigned int v30 = __nwlog_obj();
                  if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
                    goto LABEL_481;
                  }
                  goto LABEL_27;
                }
                uint64_t v122 = 8;
              }
              unint64_t v124 = v86 - v122;
              if (v54 > v86 - v122)
              {
                unsigned int v30 = __nwlog_obj();
                if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)int buf = 136446722;
                  os_log_type_t v204 = "nw_http_copy_metadata_from_binary_message";
                  __int16 v205 = 2048;
                  unsigned int v206 = (const char *)v54;
                  __int16 v207 = 2048;
                  uint64_t v208 = v124;
                  id v19 = "%{public}s _length %llu > remaining %zu";
                  goto LABEL_172;
                }
                goto LABEL_27;
              }
              if (!v54) {
                goto LABEL_167;
              }
              char v88 = 0;
              __int16 v138 = &v123[v54];
              while (2)
              {
                if (v123 >= v138)
                {
LABEL_444:
                  metadata_with_parsed_fields = nw_http_create_metadata_with_parsed_fields(v17, v15 == 0);
                  if (!v88) {
                    goto LABEL_28;
                  }
                  BOOL v151 = nw_http_parsed_fields_copy_trailer_fields(v88);
                  if (v151)
                  {
                    v152 = (void *)v151;
                    nw_http_metadata_set_trailer_fields(metadata_with_parsed_fields, (void *)v151);
                    os_release(v152);
                    goto LABEL_553;
                  }
                  __nwlog_obj();
                  *(_DWORD *)int buf = 136446210;
                  os_log_type_t v204 = "nw_http_copy_metadata_from_binary_message";
                  v185 = (char *)_os_log_send_and_compose_impl();
                  os_log_type_t type = OS_LOG_TYPE_ERROR;
                  char v201 = 0;
                  if (!__nwlog_fault(v185, &type, &v201)) {
                    goto LABEL_601;
                  }
                  if (type == OS_LOG_TYPE_FAULT)
                  {
                    BOOL v186 = __nwlog_obj();
                    os_log_type_t v187 = type;
                    if (os_log_type_enabled(v186, type))
                    {
                      *(_DWORD *)int buf = 136446210;
                      os_log_type_t v204 = "nw_http_copy_metadata_from_binary_message";
                      BOOL v188 = "%{public}s called with null extracted_trailer_fields";
                      goto LABEL_600;
                    }
                    goto LABEL_601;
                  }
                  if (v201)
                  {
                    BOOL v191 = (char *)__nw_create_backtrace_string();
                    BOOL v186 = __nwlog_obj();
                    os_log_type_t v187 = type;
                    BOOL v192 = os_log_type_enabled(v186, type);
                    if (v191)
                    {
                      if (v192)
                      {
                        *(_DWORD *)int buf = 136446466;
                        os_log_type_t v204 = "nw_http_copy_metadata_from_binary_message";
                        __int16 v205 = 2082;
                        unsigned int v206 = v191;
                        _os_log_impl(&dword_1830D4000, v186, v187, "%{public}s called with null extracted_trailer_fields, dumping backtrace:%{public}s", buf, 0x16u);
                      }
                      free(v191);
                      goto LABEL_601;
                    }
                    if (!v192)
                    {
LABEL_601:
                      if (v185) {
                        free(v185);
                      }
                      metadata_with_parsed_fields = 0;
                      goto LABEL_553;
                    }
                    *(_DWORD *)int buf = 136446210;
                    os_log_type_t v204 = "nw_http_copy_metadata_from_binary_message";
                    BOOL v188 = "%{public}s called with null extracted_trailer_fields, no backtrace";
                  }
                  else
                  {
                    BOOL v186 = __nwlog_obj();
                    os_log_type_t v187 = type;
                    if (!os_log_type_enabled(v186, type)) {
                      goto LABEL_601;
                    }
                    *(_DWORD *)int buf = 136446210;
                    os_log_type_t v204 = "nw_http_copy_metadata_from_binary_message";
                    BOOL v188 = "%{public}s called with null extracted_trailer_fields, backtrace limit exceeded";
                  }
LABEL_600:
                  _os_log_impl(&dword_1830D4000, v186, v187, v188, buf, 0xCu);
                  goto LABEL_601;
                }
                if (!v88) {
                  char v88 = (void *)_nw_http_parsed_fields_create();
                }
                if (!v123)
                {
                  __nwlog_obj();
                  *(_DWORD *)int buf = 136446210;
                  os_log_type_t v204 = "_http_vle_decode";
                  BOOL v193 = (char *)_os_log_send_and_compose_impl();
                  os_log_type_t type = OS_LOG_TYPE_ERROR;
                  char v201 = 0;
                  if (!__nwlog_fault(v193, &type, &v201)) {
                    goto LABEL_614;
                  }
                  if (type == OS_LOG_TYPE_FAULT)
                  {
                    v194 = __nwlog_obj();
                    os_log_type_t v195 = type;
                    if (os_log_type_enabled(v194, type))
                    {
                      *(_DWORD *)int buf = 136446210;
                      os_log_type_t v204 = "_http_vle_decode";
                      uint64_t v196 = "%{public}s called with null *buffer";
                      goto LABEL_613;
                    }
                    goto LABEL_614;
                  }
                  if (!v201)
                  {
                    v194 = __nwlog_obj();
                    os_log_type_t v195 = type;
                    if (!os_log_type_enabled(v194, type)) {
                      goto LABEL_614;
                    }
                    *(_DWORD *)int buf = 136446210;
                    os_log_type_t v204 = "_http_vle_decode";
                    uint64_t v196 = "%{public}s called with null *buffer, backtrace limit exceeded";
                    goto LABEL_613;
                  }
                  os_log_type_t v197 = (char *)__nw_create_backtrace_string();
                  v194 = __nwlog_obj();
                  os_log_type_t v195 = type;
                  BOOL v198 = os_log_type_enabled(v194, type);
                  if (v197)
                  {
                    if (v198)
                    {
                      *(_DWORD *)int buf = 136446466;
                      os_log_type_t v204 = "_http_vle_decode";
                      __int16 v205 = 2082;
                      unsigned int v206 = v197;
                      _os_log_impl(&dword_1830D4000, v194, v195, "%{public}s called with null *buffer, dumping backtrace:%{public}s", buf, 0x16u);
                    }
                    free(v197);
                    goto LABEL_614;
                  }
                  if (v198)
                  {
                    *(_DWORD *)int buf = 136446210;
                    os_log_type_t v204 = "_http_vle_decode";
                    uint64_t v196 = "%{public}s called with null *buffer, no backtrace";
LABEL_613:
                    _os_log_impl(&dword_1830D4000, v194, v195, v196, buf, 0xCu);
                  }
LABEL_614:
                  if (v193) {
                    free(v193);
                  }
LABEL_616:
                  int v108 = __nwlog_obj();
                  if (!os_log_type_enabled(v108, OS_LOG_TYPE_ERROR)) {
                    goto LABEL_552;
                  }
                  *(_DWORD *)int buf = 136446210;
                  os_log_type_t v204 = "nw_http_copy_metadata_from_binary_message";
                  v109 = "%{public}s Failed to decode integer";
LABEL_550:
                  BOOL v116 = v108;
                  uint32_t v118 = 12;
LABEL_551:
                  _os_log_impl(&dword_1830D4000, v116, OS_LOG_TYPE_ERROR, v109, buf, v118);
                  goto LABEL_552;
                }
                if (!v124) {
                  goto LABEL_616;
                }
                unint64_t v89 = *(unsigned __int8 *)v123;
                if (v89 <= 0x3F)
                {
                  uint64_t v139 = 1;
                  goto LABEL_422;
                }
                if (v89 >> 6 == 2)
                {
                  if (v124 < 4) {
                    goto LABEL_616;
                  }
                  unint64_t v89 = bswap32(*(_DWORD *)v123 & 0xFFFFFF7F);
                  uint64_t v139 = 4;
LABEL_422:
                  unint64_t v140 = (unint64_t)&v123[v139];
                }
                else
                {
                  if (v89 >> 6 == 1)
                  {
                    if (v124 < 2) {
                      goto LABEL_616;
                    }
                    unint64_t v89 = bswap32(*(_WORD *)v123 & 0xFFBF) >> 16;
                    uint64_t v139 = 2;
                    goto LABEL_422;
                  }
                  if (v124 < 8) {
                    goto LABEL_616;
                  }
                  uint64_t v147 = *(void *)v123;
                  os_log_type_t v146 = v123 + 8;
                  unint64_t v89 = bswap64(v147 & 0xFFFFFFFFFFFFFF3FLL);
                  if (HIDWORD(v89))
                  {
                    __int16 v114 = __nwlog_obj();
                    if (os_log_type_enabled(v114, OS_LOG_TYPE_ERROR))
                    {
LABEL_391:
                      *(_DWORD *)int buf = 136446722;
                      os_log_type_t v204 = "nw_http_copy_metadata_from_binary_message";
                      __int16 v205 = 2048;
                      unsigned int v206 = (const char *)v89;
                      __int16 v207 = 2048;
                      uint64_t v208 = 0xFFFFFFFFLL;
                      v109 = "%{public}s _output %llu > _max %llu";
                      goto LABEL_310;
                    }
LABEL_552:
                    metadata_with_parsed_fields = 0;
                    if (!v88) {
                      goto LABEL_28;
                    }
LABEL_553:
                    os_release(v88);
                    goto LABEL_28;
                  }
                  uint64_t v139 = 8;
                  unint64_t v140 = (unint64_t)v146;
                }
                uint64_t v141 = v124 - v139;
                BOOL v33 = v124 - v139 >= v89;
                unint64_t v142 = v124 - v139 - v89;
                if (!v33)
                {
                  __int16 v114 = __nwlog_obj();
                  if (!os_log_type_enabled(v114, OS_LOG_TYPE_ERROR)) {
                    goto LABEL_552;
                  }
                  *(_DWORD *)int buf = 136446722;
                  os_log_type_t v204 = "nw_http_copy_metadata_from_binary_message";
                  __int16 v205 = 2048;
                  unsigned int v206 = (const char *)v89;
                  __int16 v207 = 2048;
                  uint64_t v208 = v141;
                  v109 = "%{public}s _length %llu > remaining %zu";
LABEL_310:
                  BOOL v116 = v114;
LABEL_314:
                  uint32_t v118 = 32;
                  goto LABEL_551;
                }
                if (!v142) {
                  goto LABEL_507;
                }
                os_log_type_t v143 = (_DWORD *)(v140 + v89);
                unint64_t v144 = *(unsigned __int8 *)(v140 + v89);
                if (v144 <= 0x3F)
                {
                  uint64_t v145 = 1;
                  goto LABEL_437;
                }
                if (v144 >> 6 == 2)
                {
                  if (v142 < 4) {
                    goto LABEL_507;
                  }
                  unint64_t v144 = bswap32(*v143 & 0xFFFFFF7F);
                  uint64_t v145 = 4;
LABEL_437:
                  v148 = (char *)v143 + v145;
                }
                else
                {
                  if (v144 >> 6 == 1)
                  {
                    if (v142 < 2) {
                      goto LABEL_507;
                    }
                    unint64_t v144 = bswap32(*(_WORD *)v143 & 0xFFBF) >> 16;
                    uint64_t v145 = 2;
                    goto LABEL_437;
                  }
                  if (v142 < 8)
                  {
LABEL_507:
                    int v108 = __nwlog_obj();
                    if (!os_log_type_enabled(v108, OS_LOG_TYPE_ERROR)) {
                      goto LABEL_552;
                    }
                    *(_DWORD *)int buf = 136446210;
                    os_log_type_t v204 = "nw_http_copy_metadata_from_binary_message";
                    v109 = "%{public}s Failed to decode integer";
                    goto LABEL_550;
                  }
                  uint64_t v150 = *(void *)v143;
                  v148 = (const char *)(v143 + 2);
                  unint64_t v144 = bswap64(v150 & 0xFFFFFFFFFFFFFF3FLL);
                  if (HIDWORD(v144))
                  {
                    int v117 = __nwlog_obj();
                    if (!os_log_type_enabled(v117, OS_LOG_TYPE_ERROR)) {
                      goto LABEL_552;
                    }
                    *(_DWORD *)int buf = 136446722;
                    os_log_type_t v204 = "nw_http_copy_metadata_from_binary_message";
                    __int16 v205 = 2048;
                    unsigned int v206 = (const char *)v144;
                    __int16 v207 = 2048;
                    uint64_t v208 = 0xFFFFFFFFLL;
                    v109 = "%{public}s _output %llu > _max %llu";
                    goto LABEL_313;
                  }
                  uint64_t v145 = 8;
                }
                uint64_t v149 = v142 - v145;
                unint64_t v124 = v142 - v145 - v144;
                if (v142 - v145 < v144)
                {
                  int v117 = __nwlog_obj();
                  if (!os_log_type_enabled(v117, OS_LOG_TYPE_ERROR)) {
                    goto LABEL_552;
                  }
                  *(_DWORD *)int buf = 136446722;
                  os_log_type_t v204 = "nw_http_copy_metadata_from_binary_message";
                  __int16 v205 = 2048;
                  unsigned int v206 = (const char *)v144;
                  __int16 v207 = 2048;
                  uint64_t v208 = v149;
                  v109 = "%{public}s _length %llu > remaining %zu";
LABEL_313:
                  BOOL v116 = v117;
                  goto LABEL_314;
                }
                BOOL v123 = &v148[v144];
                if (!nw_http_parsed_fields_add(v88, v140, v89, v148, v144, 0)) {
                  goto LABEL_552;
                }
                continue;
              }
            }
            __nwlog_obj();
            *(_DWORD *)int buf = 136446210;
            os_log_type_t v204 = "_http_vle_decode";
            os_log_type_t v181 = (char *)_os_log_send_and_compose_impl();
            os_log_type_t type = OS_LOG_TYPE_ERROR;
            char v201 = 0;
            if (!__nwlog_fault(v181, &type, &v201)) {
              goto LABEL_594;
            }
            if (type == OS_LOG_TYPE_FAULT)
            {
              BOOL v182 = __nwlog_obj();
              os_log_type_t v183 = type;
              if (os_log_type_enabled(v182, type))
              {
                *(_DWORD *)int buf = 136446210;
                os_log_type_t v204 = "_http_vle_decode";
                os_log_type_t v184 = "%{public}s called with null *buffer";
                goto LABEL_593;
              }
              goto LABEL_594;
            }
            if (v201)
            {
              os_log_type_t v189 = (char *)__nw_create_backtrace_string();
              BOOL v182 = __nwlog_obj();
              os_log_type_t v183 = type;
              BOOL v190 = os_log_type_enabled(v182, type);
              if (v189)
              {
                if (v190)
                {
                  *(_DWORD *)int buf = 136446466;
                  os_log_type_t v204 = "_http_vle_decode";
                  __int16 v205 = 2082;
                  unsigned int v206 = v189;
                  _os_log_impl(&dword_1830D4000, v182, v183, "%{public}s called with null *buffer, dumping backtrace:%{public}s", buf, 0x16u);
                }
                free(v189);
                goto LABEL_594;
              }
              if (!v190)
              {
LABEL_594:
                if (v181) {
                  free(v181);
                }
                goto LABEL_361;
              }
              *(_DWORD *)int buf = 136446210;
              os_log_type_t v204 = "_http_vle_decode";
              os_log_type_t v184 = "%{public}s called with null *buffer, no backtrace";
            }
            else
            {
              BOOL v182 = __nwlog_obj();
              os_log_type_t v183 = type;
              if (!os_log_type_enabled(v182, type)) {
                goto LABEL_594;
              }
              *(_DWORD *)int buf = 136446210;
              os_log_type_t v204 = "_http_vle_decode";
              os_log_type_t v184 = "%{public}s called with null *buffer, backtrace limit exceeded";
            }
LABEL_593:
            _os_log_impl(&dword_1830D4000, v182, v183, v184, buf, 0xCu);
            goto LABEL_594;
          }
          if (!v56)
          {
            __nwlog_obj();
            *(_DWORD *)int buf = 136446210;
            os_log_type_t v204 = "_http_vle_decode";
            BOOL v157 = (char *)_os_log_send_and_compose_impl();
            os_log_type_t type = OS_LOG_TYPE_ERROR;
            char v201 = 0;
            if (!__nwlog_fault(v157, &type, &v201)) {
              goto LABEL_532;
            }
            if (type == OS_LOG_TYPE_FAULT)
            {
              BOOL v158 = __nwlog_obj();
              os_log_type_t v159 = type;
              if (os_log_type_enabled(v158, type))
              {
                *(_DWORD *)int buf = 136446210;
                os_log_type_t v204 = "_http_vle_decode";
                os_log_type_t v160 = "%{public}s called with null *buffer";
                goto LABEL_531;
              }
              goto LABEL_532;
            }
            if (!v201)
            {
              BOOL v158 = __nwlog_obj();
              os_log_type_t v159 = type;
              if (!os_log_type_enabled(v158, type)) {
                goto LABEL_532;
              }
              *(_DWORD *)int buf = 136446210;
              os_log_type_t v204 = "_http_vle_decode";
              os_log_type_t v160 = "%{public}s called with null *buffer, backtrace limit exceeded";
              goto LABEL_531;
            }
            int v167 = (char *)__nw_create_backtrace_string();
            BOOL v158 = __nwlog_obj();
            os_log_type_t v159 = type;
            BOOL v168 = os_log_type_enabled(v158, type);
            if (v167)
            {
              if (v168)
              {
                *(_DWORD *)int buf = 136446466;
                os_log_type_t v204 = "_http_vle_decode";
                __int16 v205 = 2082;
                unsigned int v206 = v167;
                _os_log_impl(&dword_1830D4000, v158, v159, "%{public}s called with null *buffer, dumping backtrace:%{public}s", buf, 0x16u);
              }
              free(v167);
              goto LABEL_532;
            }
            if (v168)
            {
              *(_DWORD *)int buf = 136446210;
              os_log_type_t v204 = "_http_vle_decode";
              os_log_type_t v160 = "%{public}s called with null *buffer, no backtrace";
LABEL_531:
              _os_log_impl(&dword_1830D4000, v158, v159, v160, buf, 0xCu);
            }
LABEL_532:
            if (v157) {
              free(v157);
            }
LABEL_534:
            char v18 = __nwlog_obj();
            if (!os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
              goto LABEL_27;
            }
            *(_DWORD *)int buf = 136446210;
            os_log_type_t v204 = "nw_http_copy_metadata_from_binary_message";
            id v19 = "%{public}s Failed to decode integer";
LABEL_25:
            uint64_t v22 = v18;
            uint32_t v23 = 12;
            goto LABEL_26;
          }
          if (!v57) {
            goto LABEL_534;
          }
          unint64_t v54 = *(unsigned __int8 *)v56;
          if (v54 <= 0x3F) {
            break;
          }
          if (v54 >> 6 == 2)
          {
            if (v57 < 4) {
              goto LABEL_534;
            }
            unint64_t v54 = bswap32(*(_DWORD *)v56 & 0xFFFFFF7F);
            uint64_t v61 = 4;
            goto LABEL_135;
          }
          if (v54 >> 6 == 1)
          {
            if (v57 < 2) {
              goto LABEL_534;
            }
            unint64_t v54 = bswap32(*(_WORD *)v56 & 0xFFBF) >> 16;
            uint64_t v61 = 2;
            goto LABEL_135;
          }
          if (v57 < 8) {
            goto LABEL_534;
          }
          uint64_t v68 = *(void *)v56;
          BOOL v67 = v56 + 8;
          unint64_t v54 = bswap64(v68 & 0xFFFFFFFFFFFFFF3FLL);
          if (HIDWORD(v54))
          {
            unsigned int v30 = __nwlog_obj();
            if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
              goto LABEL_481;
            }
            goto LABEL_27;
          }
          uint64_t v61 = 8;
          unint64_t v62 = (unint64_t)v67;
LABEL_136:
          uint64_t v63 = v57 - v61;
          BOOL v33 = v57 - v61 >= v54;
          unint64_t v64 = v57 - v61 - v54;
          if (!v33)
          {
            unsigned int v30 = __nwlog_obj();
            if (!os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
              goto LABEL_27;
            }
LABEL_233:
            *(_DWORD *)int buf = 136446722;
            os_log_type_t v204 = "nw_http_copy_metadata_from_binary_message";
            __int16 v205 = 2048;
            unsigned int v206 = (const char *)v54;
            __int16 v207 = 2048;
            uint64_t v208 = v63;
            id v19 = "%{public}s _length %llu > remaining %zu";
            goto LABEL_172;
          }
          if (!v64) {
            goto LABEL_211;
          }
          uint64_t v65 = (_DWORD *)(v62 + v54);
          unint64_t v27 = *(unsigned __int8 *)(v62 + v54);
          if (v27 <= 0x3F)
          {
            uint64_t v66 = 1;
LABEL_150:
            BOOL v69 = (char *)v65 + v66;
            goto LABEL_151;
          }
          if (v27 >> 6 == 2)
          {
            if (v64 < 4) {
              goto LABEL_211;
            }
            unint64_t v27 = bswap32(*v65 & 0xFFFFFF7F);
            uint64_t v66 = 4;
            goto LABEL_150;
          }
          if (v27 >> 6 == 1)
          {
            if (v64 < 2) {
              goto LABEL_211;
            }
            unint64_t v27 = bswap32(*(_WORD *)v65 & 0xFFBF) >> 16;
            uint64_t v66 = 2;
            goto LABEL_150;
          }
          if (v64 < 8)
          {
LABEL_211:
            char v18 = __nwlog_obj();
            if (!os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
              goto LABEL_27;
            }
            *(_DWORD *)int buf = 136446210;
            os_log_type_t v204 = "nw_http_copy_metadata_from_binary_message";
            id v19 = "%{public}s Failed to decode integer";
            goto LABEL_25;
          }
          uint64_t v71 = *(void *)v65;
          BOOL v69 = (const char *)(v65 + 2);
          unint64_t v27 = bswap64(v71 & 0xFFFFFFFFFFFFFF3FLL);
          if (HIDWORD(v27))
          {
            unsigned int v30 = __nwlog_obj();
            if (!os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
              goto LABEL_27;
            }
LABEL_287:
            *(_DWORD *)int buf = 136446722;
            os_log_type_t v204 = "nw_http_copy_metadata_from_binary_message";
            __int16 v205 = 2048;
            unsigned int v206 = (const char *)v27;
            __int16 v207 = 2048;
            uint64_t v208 = 0xFFFFFFFFLL;
            id v19 = "%{public}s _output %llu > _max %llu";
            goto LABEL_172;
          }
          uint64_t v66 = 8;
LABEL_151:
          unint64_t v29 = v64 - v66;
          unint64_t v57 = v64 - v66 - v27;
          if (v64 - v66 < v27)
          {
            unsigned int v30 = __nwlog_obj();
            if (!os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
              goto LABEL_27;
            }
            goto LABEL_404;
          }
          BOOL v56 = &v69[v27];
          BOOL v70 = nw_http_parsed_fields_add(v17, v62, v54, v69, v27, 0);
          metadata_with_parsed_fields = 0;
          if (!v70) {
            goto LABEL_28;
          }
        }
        uint64_t v61 = 1;
LABEL_135:
        unint64_t v62 = (unint64_t)&v56[v61];
        goto LABEL_136;
      }
      if (v54 >> 6 == 2)
      {
        if (v26 >= 4)
        {
          unint64_t v54 = bswap32(*(_DWORD *)v25 & 0xFFFFFF7F);
          uint64_t v55 = 4;
          goto LABEL_102;
        }
      }
      else if (v54 >> 6 == 1)
      {
        if (v26 >= 2)
        {
          unint64_t v54 = bswap32(*(_WORD *)v25 & 0xFFBF) >> 16;
          uint64_t v55 = 2;
          goto LABEL_102;
        }
      }
      else if (v26 >= 8)
      {
        uint64_t v84 = *(void *)v25;
        BOOL v56 = v25 + 8;
        unint64_t v54 = bswap64(v84 & 0xFFFFFFFFFFFFFF3FLL);
        if (HIDWORD(v54))
        {
          unsigned int v30 = __nwlog_obj();
          if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
            goto LABEL_481;
          }
          goto LABEL_27;
        }
        uint64_t v55 = 8;
        goto LABEL_103;
      }
    }
    char v18 = __nwlog_obj();
    if (!os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
      goto LABEL_27;
    }
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v204 = "nw_http_copy_metadata_from_binary_message";
    id v19 = "%{public}s Failed to decode integer";
    goto LABEL_25;
  }
  while (1)
  {
    if (!v26)
    {
      if (a4)
      {
LABEL_167:
        metadata_with_parsed_fields = nw_http_create_metadata_with_parsed_fields(v17, v15 == 0);
        goto LABEL_28;
      }
      unint64_t v74 = 0;
      unint64_t v75 = 0;
      goto LABEL_238;
    }
    if (!v25)
    {
      __nwlog_obj();
      *(_DWORD *)int buf = 136446210;
      os_log_type_t v204 = "_http_vle_decode";
      os_log_type_t v132 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v201 = 0;
      if (__nwlog_fault(v132, &type, &v201))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          os_log_type_t v133 = __nwlog_obj();
          os_log_type_t v134 = type;
          if (os_log_type_enabled(v133, type))
          {
            *(_DWORD *)int buf = 136446210;
            os_log_type_t v204 = "_http_vle_decode";
            id v135 = "%{public}s called with null *buffer";
LABEL_486:
            _os_log_impl(&dword_1830D4000, v133, v134, v135, buf, 0xCu);
          }
        }
        else if (v201)
        {
          id v153 = (char *)__nw_create_backtrace_string();
          os_log_type_t v133 = __nwlog_obj();
          os_log_type_t v134 = type;
          BOOL v154 = os_log_type_enabled(v133, type);
          if (v153)
          {
            if (v154)
            {
              *(_DWORD *)int buf = 136446466;
              os_log_type_t v204 = "_http_vle_decode";
              __int16 v205 = 2082;
              unsigned int v206 = v153;
              _os_log_impl(&dword_1830D4000, v133, v134, "%{public}s called with null *buffer, dumping backtrace:%{public}s", buf, 0x16u);
            }
            free(v153);
          }
          else if (v154)
          {
            *(_DWORD *)int buf = 136446210;
            os_log_type_t v204 = "_http_vle_decode";
            id v135 = "%{public}s called with null *buffer, no backtrace";
            goto LABEL_486;
          }
        }
        else
        {
          os_log_type_t v133 = __nwlog_obj();
          os_log_type_t v134 = type;
          if (os_log_type_enabled(v133, type))
          {
            *(_DWORD *)int buf = 136446210;
            os_log_type_t v204 = "_http_vle_decode";
            id v135 = "%{public}s called with null *buffer, backtrace limit exceeded";
            goto LABEL_486;
          }
        }
      }
      if (v132) {
        free(v132);
      }
LABEL_489:
      char v18 = __nwlog_obj();
      if (!os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
        goto LABEL_27;
      }
      *(_DWORD *)int buf = 136446210;
      os_log_type_t v204 = "nw_http_copy_metadata_from_binary_message";
      id v19 = "%{public}s Failed to decode integer";
      goto LABEL_25;
    }
    unint64_t v27 = *(unsigned __int8 *)v25;
    if (v27 <= 0x3F)
    {
      uint64_t v41 = 1;
      goto LABEL_77;
    }
    if (v27 >> 6 == 2)
    {
      if (v26 < 4) {
        goto LABEL_489;
      }
      unint64_t v27 = bswap32(*(_DWORD *)v25 & 0xFFFFFF7F);
      uint64_t v41 = 4;
LABEL_77:
      __int16 v42 = &v25[v41];
      unint64_t v43 = v26 - v41;
      if (!v27) {
        break;
      }
      goto LABEL_78;
    }
    if (v27 >> 6 == 1)
    {
      if (v26 < 2) {
        goto LABEL_489;
      }
      unint64_t v27 = bswap32(*(_WORD *)v25 & 0xFFBF) >> 16;
      uint64_t v41 = 2;
      goto LABEL_77;
    }
    if (v26 < 8) {
      goto LABEL_489;
    }
    uint64_t v49 = *(void *)v25;
    uint64_t v48 = v25 + 8;
    unint64_t v27 = bswap64(v49 & 0xFFFFFFFFFFFFFF3FLL);
    if (HIDWORD(v27))
    {
      unsigned int v30 = __nwlog_obj();
      if (!os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
        goto LABEL_27;
      }
      goto LABEL_287;
    }
    __int16 v42 = v48;
    unint64_t v43 = v26 - 8;
    if (!v27) {
      break;
    }
LABEL_78:
    unint64_t v44 = v43 - v27;
    if (v43 < v27)
    {
      unsigned int v30 = __nwlog_obj();
      if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136446722;
        os_log_type_t v204 = "nw_http_copy_metadata_from_binary_message";
        __int16 v205 = 2048;
        unsigned int v206 = (const char *)v27;
        __int16 v207 = 2048;
        uint64_t v208 = v43;
        id v19 = "%{public}s _length %llu > remaining %zu";
        goto LABEL_172;
      }
      goto LABEL_27;
    }
    if (v43 == v27)
    {
LABEL_157:
      char v18 = __nwlog_obj();
      if (!os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
        goto LABEL_27;
      }
      *(_DWORD *)int buf = 136446210;
      os_log_type_t v204 = "nw_http_copy_metadata_from_binary_message";
      id v19 = "%{public}s Failed to decode integer";
      goto LABEL_25;
    }
    id v45 = &v42[v27];
    unint64_t v46 = v42[v27];
    if (v46 <= 0x3F)
    {
      uint64_t v47 = 1;
LABEL_92:
      BOOL v50 = &v45[v47];
      goto LABEL_93;
    }
    if (v46 >> 6 == 2)
    {
      if (v44 < 4) {
        goto LABEL_157;
      }
      unint64_t v46 = bswap32(*(_DWORD *)v45 & 0xFFFFFF7F);
      uint64_t v47 = 4;
      goto LABEL_92;
    }
    if (v46 >> 6 == 1)
    {
      if (v44 < 2) {
        goto LABEL_157;
      }
      unint64_t v46 = bswap32(*(_WORD *)v45 & 0xFFBF) >> 16;
      uint64_t v47 = 2;
      goto LABEL_92;
    }
    if (v44 < 8) {
      goto LABEL_157;
    }
    uint64_t v53 = *(void *)v45;
    BOOL v50 = v45 + 8;
    unint64_t v46 = bswap64(v53 & 0xFFFFFFFFFFFFFF3FLL);
    if (HIDWORD(v46))
    {
      unsigned int v30 = __nwlog_obj();
      if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136446722;
        os_log_type_t v204 = "nw_http_copy_metadata_from_binary_message";
        __int16 v205 = 2048;
        unsigned int v206 = (const char *)v46;
        __int16 v207 = 2048;
        uint64_t v208 = 0xFFFFFFFFLL;
        id v19 = "%{public}s _output %llu > _max %llu";
        goto LABEL_172;
      }
      goto LABEL_27;
    }
    uint64_t v47 = 8;
LABEL_93:
    uint64_t v51 = v44 - v47;
    unint64_t v26 = v44 - v47 - v46;
    if (v44 - v47 < v46)
    {
      unsigned int v30 = __nwlog_obj();
      if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136446722;
        os_log_type_t v204 = "nw_http_copy_metadata_from_binary_message";
        __int16 v205 = 2048;
        unsigned int v206 = (const char *)v46;
        __int16 v207 = 2048;
        uint64_t v208 = v51;
        id v19 = "%{public}s _length %llu > remaining %zu";
        goto LABEL_172;
      }
      goto LABEL_27;
    }
    int v25 = &v50[v46];
    BOOL v52 = nw_http_parsed_fields_add(v17, (unint64_t)v42, v27, v50, v46, 0);
    metadata_with_parsed_fields = 0;
    if (!v52) {
      goto LABEL_28;
    }
  }
  if (a4) {
    goto LABEL_167;
  }
  unint64_t v74 = 0;
  if (!v43)
  {
LABEL_236:
    unint64_t v75 = 0;
LABEL_237:
    int v25 = v42;
LABEL_238:
    if (a3) {
      *a3 = v74;
    }
    char v88 = 0;
    while (1)
    {
      if (!v75) {
        goto LABEL_444;
      }
      if (!v25)
      {
        __nwlog_obj();
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v204 = "_http_vle_decode";
        id v169 = (char *)_os_log_send_and_compose_impl();
        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v201 = 0;
        if (!__nwlog_fault(v169, &type, &v201)) {
          goto LABEL_546;
        }
        if (type == OS_LOG_TYPE_FAULT)
        {
          os_log_type_t v170 = __nwlog_obj();
          os_log_type_t v171 = type;
          if (os_log_type_enabled(v170, type))
          {
            *(_DWORD *)int buf = 136446210;
            os_log_type_t v204 = "_http_vle_decode";
            v172 = "%{public}s called with null *buffer";
            goto LABEL_545;
          }
LABEL_546:
          if (v169) {
            free(v169);
          }
LABEL_548:
          int v108 = __nwlog_obj();
          if (!os_log_type_enabled(v108, OS_LOG_TYPE_ERROR)) {
            goto LABEL_552;
          }
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v204 = "nw_http_copy_metadata_from_binary_message";
          v109 = "%{public}s Failed to decode integer";
          goto LABEL_550;
        }
        if (v201)
        {
          BOOL v174 = (char *)__nw_create_backtrace_string();
          os_log_type_t v170 = __nwlog_obj();
          os_log_type_t v171 = type;
          BOOL v175 = os_log_type_enabled(v170, type);
          if (v174)
          {
            if (v175)
            {
              *(_DWORD *)int buf = 136446466;
              os_log_type_t v204 = "_http_vle_decode";
              __int16 v205 = 2082;
              unsigned int v206 = v174;
              _os_log_impl(&dword_1830D4000, v170, v171, "%{public}s called with null *buffer, dumping backtrace:%{public}s", buf, 0x16u);
            }
            free(v174);
            goto LABEL_546;
          }
          if (!v175) {
            goto LABEL_546;
          }
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v204 = "_http_vle_decode";
          v172 = "%{public}s called with null *buffer, no backtrace";
        }
        else
        {
          os_log_type_t v170 = __nwlog_obj();
          os_log_type_t v171 = type;
          if (!os_log_type_enabled(v170, type)) {
            goto LABEL_546;
          }
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v204 = "_http_vle_decode";
          v172 = "%{public}s called with null *buffer, backtrace limit exceeded";
        }
LABEL_545:
        _os_log_impl(&dword_1830D4000, v170, v171, v172, buf, 0xCu);
        goto LABEL_546;
      }
      unint64_t v89 = *(unsigned __int8 *)v25;
      if (v89 <= 0x3F) {
        break;
      }
      if (v89 >> 6 == 2)
      {
        if (v75 < 4) {
          goto LABEL_548;
        }
        unint64_t v89 = bswap32(*(_DWORD *)v25 & 0xFFFFFF7F);
        uint64_t v90 = 4;
        goto LABEL_252;
      }
      if (v89 >> 6 == 1)
      {
        if (v75 < 2) {
          goto LABEL_548;
        }
        unint64_t v89 = bswap32(*(_WORD *)v25 & 0xFFBF) >> 16;
        uint64_t v90 = 2;
        goto LABEL_252;
      }
      if (v75 < 8) {
        goto LABEL_548;
      }
      uint64_t v98 = *(void *)v25;
      uint64_t v97 = v25 + 8;
      unint64_t v89 = bswap64(v98 & 0xFFFFFFFFFFFFFF3FLL);
      if (HIDWORD(v89))
      {
        __int16 v114 = __nwlog_obj();
        if (!os_log_type_enabled(v114, OS_LOG_TYPE_ERROR)) {
          goto LABEL_552;
        }
        goto LABEL_391;
      }
      uint64_t v90 = 8;
      unint64_t v91 = (unint64_t)v97;
      if (!v89) {
        goto LABEL_444;
      }
LABEL_253:
      uint64_t v92 = v75 - v90;
      BOOL v33 = v75 - v90 >= v89;
      unint64_t v93 = v75 - v90 - v89;
      if (!v33)
      {
        __int16 v114 = __nwlog_obj();
        if (os_log_type_enabled(v114, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)int buf = 136446722;
          os_log_type_t v204 = "nw_http_copy_metadata_from_binary_message";
          __int16 v205 = 2048;
          unsigned int v206 = (const char *)v89;
          __int16 v207 = 2048;
          uint64_t v208 = v92;
          v109 = "%{public}s _length %llu > remaining %zu";
          goto LABEL_310;
        }
        goto LABEL_552;
      }
      if (!v93) {
        goto LABEL_296;
      }
      __int16 v94 = (_DWORD *)(v91 + v89);
      unint64_t v95 = *(unsigned __int8 *)(v91 + v89);
      if (v95 <= 0x3F)
      {
        uint64_t v96 = 1;
LABEL_268:
        os_log_type_t v99 = (char *)v94 + v96;
        goto LABEL_269;
      }
      if (v95 >> 6 == 2)
      {
        if (v93 < 4) {
          goto LABEL_296;
        }
        unint64_t v95 = bswap32(*v94 & 0xFFFFFF7F);
        uint64_t v96 = 4;
        goto LABEL_268;
      }
      if (v95 >> 6 == 1)
      {
        if (v93 < 2) {
          goto LABEL_296;
        }
        unint64_t v95 = bswap32(*(_WORD *)v94 & 0xFFBF) >> 16;
        uint64_t v96 = 2;
        goto LABEL_268;
      }
      if (v93 < 8)
      {
LABEL_296:
        int v108 = __nwlog_obj();
        if (!os_log_type_enabled(v108, OS_LOG_TYPE_ERROR)) {
          goto LABEL_552;
        }
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v204 = "nw_http_copy_metadata_from_binary_message";
        v109 = "%{public}s Failed to decode integer";
        goto LABEL_550;
      }
      uint64_t v101 = *(void *)v94;
      os_log_type_t v99 = (const char *)(v94 + 2);
      unint64_t v95 = bswap64(v101 & 0xFFFFFFFFFFFFFF3FLL);
      if (HIDWORD(v95))
      {
        int v117 = __nwlog_obj();
        if (!os_log_type_enabled(v117, OS_LOG_TYPE_ERROR)) {
          goto LABEL_552;
        }
        *(_DWORD *)int buf = 136446722;
        os_log_type_t v204 = "nw_http_copy_metadata_from_binary_message";
        __int16 v205 = 2048;
        unsigned int v206 = (const char *)v95;
        __int16 v207 = 2048;
        uint64_t v208 = 0xFFFFFFFFLL;
        v109 = "%{public}s _output %llu > _max %llu";
        goto LABEL_313;
      }
      uint64_t v96 = 8;
LABEL_269:
      uint64_t v100 = v93 - v96;
      unint64_t v75 = v93 - v96 - v95;
      if (v93 - v96 < v95)
      {
        int v117 = __nwlog_obj();
        if (!os_log_type_enabled(v117, OS_LOG_TYPE_ERROR)) {
          goto LABEL_552;
        }
        *(_DWORD *)int buf = 136446722;
        os_log_type_t v204 = "nw_http_copy_metadata_from_binary_message";
        __int16 v205 = 2048;
        unsigned int v206 = (const char *)v95;
        __int16 v207 = 2048;
        uint64_t v208 = v100;
        v109 = "%{public}s _length %llu > remaining %zu";
        goto LABEL_313;
      }
      if (!v88) {
        char v88 = (void *)_nw_http_parsed_fields_create();
      }
      int v25 = &v99[v95];
      if (!nw_http_parsed_fields_add(v88, v91, v89, v99, v95, 0)) {
        goto LABEL_552;
      }
    }
    uint64_t v90 = 1;
LABEL_252:
    unint64_t v91 = (unint64_t)&v25[v90];
    if (!v89) {
      goto LABEL_444;
    }
    goto LABEL_253;
  }
  while (2)
  {
    unint64_t v54 = *(unsigned __int8 *)v42;
    if (v54 <= 0x3F)
    {
      uint64_t v82 = 1;
LABEL_200:
      v42 += v82;
      unint64_t v75 = v43 - v82;
      if (!v54) {
        goto LABEL_237;
      }
LABEL_201:
      if (v75 < v54)
      {
        unsigned int v30 = __nwlog_obj();
        if (!os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
          goto LABEL_27;
        }
        *(_DWORD *)int buf = 136446722;
        os_log_type_t v204 = "nw_http_copy_metadata_from_binary_message";
        __int16 v205 = 2048;
        unsigned int v206 = (const char *)v54;
        __int16 v207 = 2048;
        uint64_t v208 = v75;
        id v19 = "%{public}s _length %llu > remaining %zu";
        goto LABEL_172;
      }
      v74 += v54;
      v42 += v54;
      unint64_t v43 = v75 - v54;
      if (v75 == v54) {
        goto LABEL_236;
      }
      continue;
    }
    break;
  }
  if (v54 >> 6 == 2)
  {
    if (v43 < 4) {
      goto LABEL_352;
    }
    unint64_t v54 = bswap32(*(_DWORD *)v42 & 0xFFFFFF7F);
    uint64_t v82 = 4;
    goto LABEL_200;
  }
  if (v54 >> 6 == 1)
  {
    if (v43 < 2) {
      goto LABEL_352;
    }
    unint64_t v54 = bswap32(*(_WORD *)v42 & 0xFFBF) >> 16;
    uint64_t v82 = 2;
    goto LABEL_200;
  }
  if (v43 < 8)
  {
LABEL_352:
    char v18 = __nwlog_obj();
    if (!os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
      goto LABEL_27;
    }
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v204 = "nw_http_copy_metadata_from_binary_message";
    id v19 = "%{public}s Failed to decode integer";
    goto LABEL_25;
  }
  uint64_t v83 = *(void *)v42;
  v42 += 8;
  unint64_t v54 = bswap64(v83 & 0xFFFFFFFFFFFFFF3FLL);
  if (!HIDWORD(v54))
  {
    unint64_t v75 = v43 - 8;
    if (!v54) {
      goto LABEL_237;
    }
    goto LABEL_201;
  }
  unsigned int v30 = __nwlog_obj();
  if (!os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
    goto LABEL_27;
  }
LABEL_481:
  *(_DWORD *)int buf = 136446722;
  os_log_type_t v204 = "nw_http_copy_metadata_from_binary_message";
  __int16 v205 = 2048;
  unsigned int v206 = (const char *)v54;
  __int16 v207 = 2048;
  uint64_t v208 = 0xFFFFFFFFLL;
  id v19 = "%{public}s _output %llu > _max %llu";
LABEL_172:
  uint64_t v22 = v30;
  uint32_t v23 = 32;
LABEL_26:
  _os_log_impl(&dword_1830D4000, v22, OS_LOG_TYPE_ERROR, v19, buf, v23);
LABEL_27:
  metadata_with_parsed_fields = 0;
LABEL_28:
  if (v17) {
    os_release(v17);
  }
  return metadata_with_parsed_fields;
}

BOOL nwsc_compare_uuid(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned int v2 = *a1;
  unsigned int v3 = *a2;
  if (v2 != v3) {
    return v2 > v3;
  }
  unsigned int v2 = a1[1];
  unsigned int v3 = a2[1];
  if (v2 != v3) {
    return v2 > v3;
  }
  unsigned int v2 = a1[2];
  unsigned int v3 = a2[2];
  if (v2 != v3) {
    return v2 > v3;
  }
  unsigned int v2 = a1[3];
  unsigned int v3 = a2[3];
  if (v2 != v3) {
    return v2 > v3;
  }
  unsigned int v2 = a1[4];
  unsigned int v3 = a2[4];
  if (v2 != v3) {
    return v2 > v3;
  }
  unsigned int v2 = a1[5];
  unsigned int v3 = a2[5];
  if (v2 != v3) {
    return v2 > v3;
  }
  unsigned int v2 = a1[6];
  unsigned int v3 = a2[6];
  if (v2 != v3) {
    return v2 > v3;
  }
  unsigned int v2 = a1[7];
  unsigned int v3 = a2[7];
  if (v2 != v3) {
    return v2 > v3;
  }
  unsigned int v2 = a1[8];
  unsigned int v3 = a2[8];
  if (v2 != v3) {
    return v2 > v3;
  }
  unsigned int v2 = a1[9];
  unsigned int v3 = a2[9];
  if (v2 != v3) {
    return v2 > v3;
  }
  unsigned int v2 = a1[10];
  unsigned int v3 = a2[10];
  if (v2 != v3) {
    return v2 > v3;
  }
  unsigned int v2 = a1[11];
  unsigned int v3 = a2[11];
  if (v2 != v3) {
    return v2 > v3;
  }
  unsigned int v2 = a1[12];
  unsigned int v3 = a2[12];
  if (v2 != v3) {
    return v2 > v3;
  }
  unsigned int v2 = a1[13];
  unsigned int v3 = a2[13];
  if (v2 == v3 && (unsigned int v2 = a1[14], v3 = a2[14], v2 == v3) && (unsigned int v2 = a1[15], v3 = a2[15], v2 == v3)) {
    return 0;
  }
  else {
    return v2 > v3;
  }
}

void ___ZL35nw_socks5_connection_start_on_queueP31NWConcrete_nw_socks5_connectionPU27objcproto16OS_dispatch_data8NSObject_block_invoke_142(uint64_t a1, unsigned int a2, void *a3)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  if (*(unsigned __int8 *)(*(void *)(a1 + 32) + 56) == 255) {
    goto LABEL_34;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v6 = (id)gLogObj;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    if (a2 > 5) {
      unint64_t v7 = "unknown";
    }
    else {
      unint64_t v7 = off_1E523DF08[a2];
    }
    uint64_t v8 = *(void *)(a1 + 32);
    int v25 = 136446722;
    unint64_t v26 = "nw_socks5_connection_start_on_queue_block_invoke";
    __int16 v27 = 2114;
    uint64_t v28 = v8;
    __int16 v29 = 2082;
    unsigned int v30 = v7;
    _os_log_impl(&dword_1830D4000, v6, OS_LOG_TYPE_INFO, "%{public}s %{public}@ in connection event %{public}s", (uint8_t *)&v25, 0x20u);
  }

  if (a2 == 4)
  {
    nw_socks5_connection_remove_prefer_wifi_request(*(NWConcrete_nw_socks5_connection **)(a1 + 32));
    *(unsigned char *)(*(void *)(a1 + 32) + 160) |= 2u;
    uint64_t v9 = *(unsigned __int8 **)(a1 + 32);
    if ((~v9[160] & 3) == 0)
    {
      nw_socks5_connection_cancel_on_queue(v9, 0);
      goto LABEL_34;
    }
    if (!v5) {
      goto LABEL_34;
    }
    goto LABEL_13;
  }
  if (v5)
  {
    uint64_t v9 = *(unsigned __int8 **)(a1 + 32);
LABEL_13:
    int v10 = v9[56];
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    size_t v11 = (id)gLogObj;
    uint32_t v12 = v11;
    if (v10 == 200)
    {
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        uint64_t v13 = *(void *)(a1 + 32);
        int v25 = 136446722;
        unint64_t v26 = "nw_socks5_connection_start_on_queue_block_invoke";
        __int16 v27 = 2114;
        uint64_t v28 = v13;
        __int16 v29 = 2114;
        unsigned int v30 = v5;
        _os_log_impl(&dword_1830D4000, v12, OS_LOG_TYPE_INFO, "%{public}s %{public}@ ignoring in connection event error %{public}@", (uint8_t *)&v25, 0x20u);
      }
    }
    else
    {
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        uint64_t v14 = *(void *)(a1 + 32);
        int v25 = 136446722;
        unint64_t v26 = "nw_socks5_connection_start_on_queue_block_invoke";
        __int16 v27 = 2114;
        uint64_t v28 = v14;
        __int16 v29 = 2114;
        unsigned int v30 = v5;
        _os_log_impl(&dword_1830D4000, v12, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ in connection event error %{public}@", (uint8_t *)&v25, 0x20u);
      }

      nw_socks5_connection_cancel_on_queue(*(void **)(a1 + 32), v5);
    }
    goto LABEL_34;
  }
  if (a2 != 3) {
    goto LABEL_34;
  }
  uint64_t v15 = *(void *)(a1 + 32);
  int v16 = *(unsigned __int8 *)(v15 + 56);
  if (v16 != 101)
  {
    if (v16 != 1) {
      goto LABEL_34;
    }
    *(unsigned char *)(v15 + 56) = 2;
    uint64_t v17 = __nwlog_obj();
    if (!os_log_type_enabled(v17, OS_LOG_TYPE_INFO)) {
      goto LABEL_28;
    }
    uint64_t v18 = *(void *)(a1 + 32);
    int v25 = 136446466;
    unint64_t v26 = "nw_socks5_connection_start_on_queue_block_invoke";
    __int16 v27 = 2114;
    uint64_t v28 = v18;
    id v19 = "%{public}s %{public}@ connection socks connected";
    goto LABEL_27;
  }
  *(unsigned char *)(v15 + 56) = 102;
  uint64_t v17 = __nwlog_obj();
  if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
  {
    uint64_t v20 = *(void *)(a1 + 32);
    int v25 = 136446466;
    unint64_t v26 = "nw_socks5_connection_start_on_queue_block_invoke";
    __int16 v27 = 2114;
    uint64_t v28 = v20;
    id v19 = "%{public}s %{public}@ connection shoes connected";
LABEL_27:
    _os_log_impl(&dword_1830D4000, v17, OS_LOG_TYPE_INFO, v19, (uint8_t *)&v25, 0x16u);
  }
LABEL_28:

  uint64_t v21 = *(void *)(a1 + 32);
  if (*(char *)(v21 + 160) < 0 && *(void *)(a1 + 40))
  {
    *(unsigned char *)(v21 + 56) = 103;
    *(_WORD *)(*(void *)(a1 + 32) + 104) = dispatch_data_get_size(*(dispatch_data_t *)(a1 + 40));
    uint64_t v22 = __nwlog_obj();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
    {
      uint64_t v23 = *(void *)(a1 + 32);
      int v24 = *(unsigned __int16 *)(v23 + 104);
      int v25 = 136446722;
      unint64_t v26 = "nw_socks5_connection_start_on_queue_block_invoke";
      __int16 v27 = 2114;
      uint64_t v28 = v23;
      __int16 v29 = 1024;
      LODWORD(v30) = v24;
      _os_log_impl(&dword_1830D4000, v22, OS_LOG_TYPE_INFO, "%{public}s %{public}@ connection shoes got length %u", (uint8_t *)&v25, 0x1Cu);
    }

    nw_socks5_connection_inner_connection_read_handler_on_queue(*(void **)(a1 + 32), *(void **)(a1 + 40), 0, 0, *(unsigned __int16 *)(*(void *)(a1 + 32) + 104));
  }
  else
  {
    nw_socks5_connection_inner_connection_read_range_on_queue((NWConcrete_nw_socks5_connection *)v21, 2u, 2u);
  }
LABEL_34:
}

void sub_1833F8B44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_socks5_connection_remove_prefer_wifi_request(NWConcrete_nw_socks5_connection *a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1->sc_prefer_wifi_path_evaluator)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unsigned int v2 = (id)gLogObj;
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = 136446466;
      id v5 = "nw_socks5_connection_remove_prefer_wifi_request";
      __int16 v6 = 2112;
      unint64_t v7 = v1;
      _os_log_impl(&dword_1830D4000, v2, OS_LOG_TYPE_DEFAULT, "%{public}s %@ removing prefer wi-fi request", (uint8_t *)&v4, 0x16u);
    }

    nw_path_evaluator_cancel(v1->sc_prefer_wifi_path_evaluator);
    sc_prefer_wifi_path_evaluator = v1->sc_prefer_wifi_path_evaluator;
    v1->sc_prefer_wifi_path_evaluator = 0;
  }
}

void sub_1833F8C5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL28nw_socket_protocol_callbacksv_block_invoke()
{
  nw_socket_protocol_callbacks(void)::callbacks = nw_protocol_one_to_one_callbacks_new();
  nw_protocol_callbacks_set_add_input_handler((void *)nw_socket_protocol_callbacks(void)::callbacks, (uint64_t)nw_socket_add_input_handler);
  nw_protocol_callbacks_set_replace_input_handler(nw_socket_protocol_callbacks(void)::callbacks, (uint64_t)nw_socket_replace_input_handler);
  nw_protocol_callbacks_set_remove_input_handler(nw_socket_protocol_callbacks(void)::callbacks, (uint64_t)nw_socket_remove_input_handler);
  nw_protocol_callbacks_set_input_available(nw_socket_protocol_callbacks(void)::callbacks, (uint64_t)nw_socket_input_available);
  nw_protocol_callbacks_set_input_finished(nw_socket_protocol_callbacks(void)::callbacks, (uint64_t)nw_socket_input_finished);
  nw_protocol_callbacks_set_output_available(nw_socket_protocol_callbacks(void)::callbacks, (uint64_t)nw_socket_output_available);
  nw_protocol_callbacks_set_output_finished(nw_socket_protocol_callbacks(void)::callbacks, (uint64_t)nw_socket_output_finished);
  nw_protocol_callbacks_set_get_input_frames(nw_socket_protocol_callbacks(void)::callbacks, (uint64_t)nw_socket_get_input_frames);
  nw_protocol_callbacks_set_get_output_frames(nw_socket_protocol_callbacks(void)::callbacks, (uint64_t)nw_socket_get_output_frames);
  nw_protocol_callbacks_set_finalize_output_frames(nw_socket_protocol_callbacks(void)::callbacks, (uint64_t)nw_socket_finalize_output_frames);
  nw_protocol_callbacks_set_get_parameters(nw_socket_protocol_callbacks(void)::callbacks, (uint64_t)nw_socket_get_parameters);
  nw_protocol_callbacks_set_get_path(nw_socket_protocol_callbacks(void)::callbacks, (uint64_t)nw_socket_get_path);
  nw_protocol_callbacks_set_updated_path(nw_socket_protocol_callbacks(void)::callbacks, (uint64_t)nw_socket_updated_path);
  nw_protocol_callbacks_set_get_local_endpoint(nw_socket_protocol_callbacks(void)::callbacks, (uint64_t)nw_socket_get_local);
  nw_protocol_callbacks_set_get_remote_endpoint(nw_socket_protocol_callbacks(void)::callbacks, (uint64_t)nw_socket_get_remote);
  nw_protocol_callbacks_set_get_output_local_endpoint(nw_socket_protocol_callbacks(void)::callbacks, (uint64_t)nw_socket_get_output_local);
  nw_protocol_callbacks_set_get_output_interface(nw_socket_protocol_callbacks(void)::callbacks, (uint64_t)nw_socket_get_output_interface);
  nw_protocol_callbacks_set_waiting_for_output(nw_socket_protocol_callbacks(void)::callbacks, (uint64_t)nw_socket_waiting_for_output);
  nw_protocol_callbacks_set_connect(nw_socket_protocol_callbacks(void)::callbacks, (uint64_t)nw_socket_connect);
  nw_protocol_callbacks_set_disconnect(nw_socket_protocol_callbacks(void)::callbacks, (uint64_t)nw_socket_disconnect);
  nw_protocol_callbacks_set_error(nw_socket_protocol_callbacks(void)::callbacks, (uint64_t)nw_socket_error);
  nw_protocol_callbacks_set_reset(nw_socket_protocol_callbacks(void)::callbacks, (uint64_t)nw_socket_reset);
  nw_protocol_callbacks_set_copy_info(nw_socket_protocol_callbacks(void)::callbacks, (uint64_t)nw_socket_copy_info);
  nw_protocol_callbacks_set_register_notification(nw_socket_protocol_callbacks(void)::callbacks, (uint64_t)nw_socket_register_notification);
  nw_protocol_callbacks_set_unregister_notification(nw_socket_protocol_callbacks(void)::callbacks, (uint64_t)nw_socket_unregister_notification);
  nw_protocol_callbacks_set_notify(nw_socket_protocol_callbacks(void)::callbacks, (uint64_t)nw_protocol_socket_notify);
  uint64_t v0 = nw_socket_protocol_callbacks(void)::callbacks;

  nw_protocol_callbacks_set_get_message_properties(v0, (uint64_t)nw_protocol_socket_get_message_properties);
}

void nw_protocol_callbacks_set_unregister_notification(uint64_t a1, uint64_t a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (a2)
    {
      *(void *)(a1 + 152) = a2;
      return;
    }
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v13 = "nw_protocol_callbacks_set_unregister_notification";
    unsigned int v2 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v10 = 0;
    if (__nwlog_fault(v2, &type, &v10))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        unsigned int v3 = __nwlog_obj();
        os_log_type_t v4 = type;
        if (!os_log_type_enabled(v3, type)) {
          goto LABEL_33;
        }
        *(_DWORD *)int buf = 136446210;
        uint64_t v13 = "nw_protocol_callbacks_set_unregister_notification";
        id v5 = "%{public}s called with null unregister_notification";
        goto LABEL_32;
      }
      if (!v10)
      {
        unsigned int v3 = __nwlog_obj();
        os_log_type_t v4 = type;
        if (!os_log_type_enabled(v3, type)) {
          goto LABEL_33;
        }
        *(_DWORD *)int buf = 136446210;
        uint64_t v13 = "nw_protocol_callbacks_set_unregister_notification";
        id v5 = "%{public}s called with null unregister_notification, backtrace limit exceeded";
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      unsigned int v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      BOOL v9 = os_log_type_enabled(v3, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)int buf = 136446466;
          uint64_t v13 = "nw_protocol_callbacks_set_unregister_notification";
          __int16 v14 = 2082;
          uint64_t v15 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v3, v4, "%{public}s called with null unregister_notification, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        if (v2) {
          goto LABEL_34;
        }
        return;
      }
      if (v9)
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v13 = "nw_protocol_callbacks_set_unregister_notification";
        id v5 = "%{public}s called with null unregister_notification, no backtrace";
LABEL_32:
        _os_log_impl(&dword_1830D4000, v3, v4, v5, buf, 0xCu);
      }
    }
  }
  else
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v13 = "nw_protocol_callbacks_set_unregister_notification";
    unsigned int v2 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v10 = 0;
    if (!__nwlog_fault(v2, &type, &v10)) {
      goto LABEL_33;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      unsigned int v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      if (!os_log_type_enabled(v3, type)) {
        goto LABEL_33;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v13 = "nw_protocol_callbacks_set_unregister_notification";
      id v5 = "%{public}s called with null callbacks";
      goto LABEL_32;
    }
    if (!v10)
    {
      unsigned int v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      if (!os_log_type_enabled(v3, type)) {
        goto LABEL_33;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v13 = "nw_protocol_callbacks_set_unregister_notification";
      id v5 = "%{public}s called with null callbacks, backtrace limit exceeded";
      goto LABEL_32;
    }
    __int16 v6 = (char *)__nw_create_backtrace_string();
    unsigned int v3 = __nwlog_obj();
    os_log_type_t v4 = type;
    BOOL v7 = os_log_type_enabled(v3, type);
    if (!v6)
    {
      if (!v7) {
        goto LABEL_33;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v13 = "nw_protocol_callbacks_set_unregister_notification";
      id v5 = "%{public}s called with null callbacks, no backtrace";
      goto LABEL_32;
    }
    if (v7)
    {
      *(_DWORD *)int buf = 136446466;
      uint64_t v13 = "nw_protocol_callbacks_set_unregister_notification";
      __int16 v14 = 2082;
      uint64_t v15 = v6;
      _os_log_impl(&dword_1830D4000, v3, v4, "%{public}s called with null callbacks, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v6);
  }
LABEL_33:
  if (v2) {
LABEL_34:
  }
    free(v2);
}

void nw_protocol_callbacks_set_reset(uint64_t a1, uint64_t a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (a2)
    {
      *(void *)(a1 + 256) = a2;
      return;
    }
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v13 = "nw_protocol_callbacks_set_reset";
    unsigned int v2 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v10 = 0;
    if (__nwlog_fault(v2, &type, &v10))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        unsigned int v3 = __nwlog_obj();
        os_log_type_t v4 = type;
        if (!os_log_type_enabled(v3, type)) {
          goto LABEL_33;
        }
        *(_DWORD *)int buf = 136446210;
        uint64_t v13 = "nw_protocol_callbacks_set_reset";
        id v5 = "%{public}s called with null reset";
        goto LABEL_32;
      }
      if (!v10)
      {
        unsigned int v3 = __nwlog_obj();
        os_log_type_t v4 = type;
        if (!os_log_type_enabled(v3, type)) {
          goto LABEL_33;
        }
        *(_DWORD *)int buf = 136446210;
        uint64_t v13 = "nw_protocol_callbacks_set_reset";
        id v5 = "%{public}s called with null reset, backtrace limit exceeded";
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      unsigned int v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      BOOL v9 = os_log_type_enabled(v3, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)int buf = 136446466;
          uint64_t v13 = "nw_protocol_callbacks_set_reset";
          __int16 v14 = 2082;
          uint64_t v15 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v3, v4, "%{public}s called with null reset, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        if (v2) {
          goto LABEL_34;
        }
        return;
      }
      if (v9)
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v13 = "nw_protocol_callbacks_set_reset";
        id v5 = "%{public}s called with null reset, no backtrace";
LABEL_32:
        _os_log_impl(&dword_1830D4000, v3, v4, v5, buf, 0xCu);
      }
    }
  }
  else
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v13 = "nw_protocol_callbacks_set_reset";
    unsigned int v2 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v10 = 0;
    if (!__nwlog_fault(v2, &type, &v10)) {
      goto LABEL_33;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      unsigned int v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      if (!os_log_type_enabled(v3, type)) {
        goto LABEL_33;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v13 = "nw_protocol_callbacks_set_reset";
      id v5 = "%{public}s called with null callbacks";
      goto LABEL_32;
    }
    if (!v10)
    {
      unsigned int v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      if (!os_log_type_enabled(v3, type)) {
        goto LABEL_33;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v13 = "nw_protocol_callbacks_set_reset";
      id v5 = "%{public}s called with null callbacks, backtrace limit exceeded";
      goto LABEL_32;
    }
    __int16 v6 = (char *)__nw_create_backtrace_string();
    unsigned int v3 = __nwlog_obj();
    os_log_type_t v4 = type;
    BOOL v7 = os_log_type_enabled(v3, type);
    if (!v6)
    {
      if (!v7) {
        goto LABEL_33;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v13 = "nw_protocol_callbacks_set_reset";
      id v5 = "%{public}s called with null callbacks, no backtrace";
      goto LABEL_32;
    }
    if (v7)
    {
      *(_DWORD *)int buf = 136446466;
      uint64_t v13 = "nw_protocol_callbacks_set_reset";
      __int16 v14 = 2082;
      uint64_t v15 = v6;
      _os_log_impl(&dword_1830D4000, v3, v4, "%{public}s called with null callbacks, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v6);
  }
LABEL_33:
  if (v2) {
LABEL_34:
  }
    free(v2);
}

void nw_protocol_callbacks_set_register_notification(uint64_t a1, uint64_t a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (a2)
    {
      *(void *)(a1 + 144) = a2;
      return;
    }
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v13 = "nw_protocol_callbacks_set_register_notification";
    unsigned int v2 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v10 = 0;
    if (__nwlog_fault(v2, &type, &v10))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        unsigned int v3 = __nwlog_obj();
        os_log_type_t v4 = type;
        if (!os_log_type_enabled(v3, type)) {
          goto LABEL_33;
        }
        *(_DWORD *)int buf = 136446210;
        uint64_t v13 = "nw_protocol_callbacks_set_register_notification";
        id v5 = "%{public}s called with null register_notification";
        goto LABEL_32;
      }
      if (!v10)
      {
        unsigned int v3 = __nwlog_obj();
        os_log_type_t v4 = type;
        if (!os_log_type_enabled(v3, type)) {
          goto LABEL_33;
        }
        *(_DWORD *)int buf = 136446210;
        uint64_t v13 = "nw_protocol_callbacks_set_register_notification";
        id v5 = "%{public}s called with null register_notification, backtrace limit exceeded";
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      unsigned int v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      BOOL v9 = os_log_type_enabled(v3, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)int buf = 136446466;
          uint64_t v13 = "nw_protocol_callbacks_set_register_notification";
          __int16 v14 = 2082;
          uint64_t v15 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v3, v4, "%{public}s called with null register_notification, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        if (v2) {
          goto LABEL_34;
        }
        return;
      }
      if (v9)
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v13 = "nw_protocol_callbacks_set_register_notification";
        id v5 = "%{public}s called with null register_notification, no backtrace";
LABEL_32:
        _os_log_impl(&dword_1830D4000, v3, v4, v5, buf, 0xCu);
      }
    }
  }
  else
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v13 = "nw_protocol_callbacks_set_register_notification";
    unsigned int v2 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v10 = 0;
    if (!__nwlog_fault(v2, &type, &v10)) {
      goto LABEL_33;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      unsigned int v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      if (!os_log_type_enabled(v3, type)) {
        goto LABEL_33;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v13 = "nw_protocol_callbacks_set_register_notification";
      id v5 = "%{public}s called with null callbacks";
      goto LABEL_32;
    }
    if (!v10)
    {
      unsigned int v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      if (!os_log_type_enabled(v3, type)) {
        goto LABEL_33;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v13 = "nw_protocol_callbacks_set_register_notification";
      id v5 = "%{public}s called with null callbacks, backtrace limit exceeded";
      goto LABEL_32;
    }
    __int16 v6 = (char *)__nw_create_backtrace_string();
    unsigned int v3 = __nwlog_obj();
    os_log_type_t v4 = type;
    BOOL v7 = os_log_type_enabled(v3, type);
    if (!v6)
    {
      if (!v7) {
        goto LABEL_33;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v13 = "nw_protocol_callbacks_set_register_notification";
      id v5 = "%{public}s called with null callbacks, no backtrace";
      goto LABEL_32;
    }
    if (v7)
    {
      *(_DWORD *)int buf = 136446466;
      uint64_t v13 = "nw_protocol_callbacks_set_register_notification";
      __int16 v14 = 2082;
      uint64_t v15 = v6;
      _os_log_impl(&dword_1830D4000, v3, v4, "%{public}s called with null callbacks, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v6);
  }
LABEL_33:
  if (v2) {
LABEL_34:
  }
    free(v2);
}

void nw_protocol_callbacks_set_get_path(uint64_t a1, uint64_t a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (a2)
    {
      *(void *)(a1 + 120) = a2;
      return;
    }
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v13 = "nw_protocol_callbacks_set_get_path";
    unsigned int v2 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v10 = 0;
    if (__nwlog_fault(v2, &type, &v10))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        unsigned int v3 = __nwlog_obj();
        os_log_type_t v4 = type;
        if (!os_log_type_enabled(v3, type)) {
          goto LABEL_33;
        }
        *(_DWORD *)int buf = 136446210;
        uint64_t v13 = "nw_protocol_callbacks_set_get_path";
        id v5 = "%{public}s called with null get_path";
        goto LABEL_32;
      }
      if (!v10)
      {
        unsigned int v3 = __nwlog_obj();
        os_log_type_t v4 = type;
        if (!os_log_type_enabled(v3, type)) {
          goto LABEL_33;
        }
        *(_DWORD *)int buf = 136446210;
        uint64_t v13 = "nw_protocol_callbacks_set_get_path";
        id v5 = "%{public}s called with null get_path, backtrace limit exceeded";
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      unsigned int v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      BOOL v9 = os_log_type_enabled(v3, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)int buf = 136446466;
          uint64_t v13 = "nw_protocol_callbacks_set_get_path";
          __int16 v14 = 2082;
          uint64_t v15 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v3, v4, "%{public}s called with null get_path, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        if (v2) {
          goto LABEL_34;
        }
        return;
      }
      if (v9)
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v13 = "nw_protocol_callbacks_set_get_path";
        id v5 = "%{public}s called with null get_path, no backtrace";
LABEL_32:
        _os_log_impl(&dword_1830D4000, v3, v4, v5, buf, 0xCu);
      }
    }
  }
  else
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v13 = "nw_protocol_callbacks_set_get_path";
    unsigned int v2 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v10 = 0;
    if (!__nwlog_fault(v2, &type, &v10)) {
      goto LABEL_33;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      unsigned int v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      if (!os_log_type_enabled(v3, type)) {
        goto LABEL_33;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v13 = "nw_protocol_callbacks_set_get_path";
      id v5 = "%{public}s called with null callbacks";
      goto LABEL_32;
    }
    if (!v10)
    {
      unsigned int v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      if (!os_log_type_enabled(v3, type)) {
        goto LABEL_33;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v13 = "nw_protocol_callbacks_set_get_path";
      id v5 = "%{public}s called with null callbacks, backtrace limit exceeded";
      goto LABEL_32;
    }
    __int16 v6 = (char *)__nw_create_backtrace_string();
    unsigned int v3 = __nwlog_obj();
    os_log_type_t v4 = type;
    BOOL v7 = os_log_type_enabled(v3, type);
    if (!v6)
    {
      if (!v7) {
        goto LABEL_33;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v13 = "nw_protocol_callbacks_set_get_path";
      id v5 = "%{public}s called with null callbacks, no backtrace";
      goto LABEL_32;
    }
    if (v7)
    {
      *(_DWORD *)int buf = 136446466;
      uint64_t v13 = "nw_protocol_callbacks_set_get_path";
      __int16 v14 = 2082;
      uint64_t v15 = v6;
      _os_log_impl(&dword_1830D4000, v3, v4, "%{public}s called with null callbacks, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v6);
  }
LABEL_33:
  if (v2) {
LABEL_34:
  }
    free(v2);
}

void nw_protocol_callbacks_set_get_output_local_endpoint(uint64_t a1, uint64_t a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (a2)
    {
      *(void *)(a1 + 200) = a2;
      return;
    }
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v13 = "nw_protocol_callbacks_set_get_output_local_endpoint";
    unsigned int v2 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v10 = 0;
    if (__nwlog_fault(v2, &type, &v10))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        unsigned int v3 = __nwlog_obj();
        os_log_type_t v4 = type;
        if (!os_log_type_enabled(v3, type)) {
          goto LABEL_33;
        }
        *(_DWORD *)int buf = 136446210;
        uint64_t v13 = "nw_protocol_callbacks_set_get_output_local_endpoint";
        id v5 = "%{public}s called with null get_output_local_endpoint";
        goto LABEL_32;
      }
      if (!v10)
      {
        unsigned int v3 = __nwlog_obj();
        os_log_type_t v4 = type;
        if (!os_log_type_enabled(v3, type)) {
          goto LABEL_33;
        }
        *(_DWORD *)int buf = 136446210;
        uint64_t v13 = "nw_protocol_callbacks_set_get_output_local_endpoint";
        id v5 = "%{public}s called with null get_output_local_endpoint, backtrace limit exceeded";
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      unsigned int v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      BOOL v9 = os_log_type_enabled(v3, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)int buf = 136446466;
          uint64_t v13 = "nw_protocol_callbacks_set_get_output_local_endpoint";
          __int16 v14 = 2082;
          uint64_t v15 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v3, v4, "%{public}s called with null get_output_local_endpoint, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        if (v2) {
          goto LABEL_34;
        }
        return;
      }
      if (v9)
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v13 = "nw_protocol_callbacks_set_get_output_local_endpoint";
        id v5 = "%{public}s called with null get_output_local_endpoint, no backtrace";
LABEL_32:
        _os_log_impl(&dword_1830D4000, v3, v4, v5, buf, 0xCu);
      }
    }
  }
  else
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v13 = "nw_protocol_callbacks_set_get_output_local_endpoint";
    unsigned int v2 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v10 = 0;
    if (!__nwlog_fault(v2, &type, &v10)) {
      goto LABEL_33;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      unsigned int v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      if (!os_log_type_enabled(v3, type)) {
        goto LABEL_33;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v13 = "nw_protocol_callbacks_set_get_output_local_endpoint";
      id v5 = "%{public}s called with null callbacks";
      goto LABEL_32;
    }
    if (!v10)
    {
      unsigned int v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      if (!os_log_type_enabled(v3, type)) {
        goto LABEL_33;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v13 = "nw_protocol_callbacks_set_get_output_local_endpoint";
      id v5 = "%{public}s called with null callbacks, backtrace limit exceeded";
      goto LABEL_32;
    }
    __int16 v6 = (char *)__nw_create_backtrace_string();
    unsigned int v3 = __nwlog_obj();
    os_log_type_t v4 = type;
    BOOL v7 = os_log_type_enabled(v3, type);
    if (!v6)
    {
      if (!v7) {
        goto LABEL_33;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v13 = "nw_protocol_callbacks_set_get_output_local_endpoint";
      id v5 = "%{public}s called with null callbacks, no backtrace";
      goto LABEL_32;
    }
    if (v7)
    {
      *(_DWORD *)int buf = 136446466;
      uint64_t v13 = "nw_protocol_callbacks_set_get_output_local_endpoint";
      __int16 v14 = 2082;
      uint64_t v15 = v6;
      _os_log_impl(&dword_1830D4000, v3, v4, "%{public}s called with null callbacks, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v6);
  }
LABEL_33:
  if (v2) {
LABEL_34:
  }
    free(v2);
}

void nw_protocol_callbacks_set_get_output_interface(uint64_t a1, uint64_t a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (a2)
    {
      *(void *)(a1 + 208) = a2;
      return;
    }
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v13 = "nw_protocol_callbacks_set_get_output_interface";
    unsigned int v2 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v10 = 0;
    if (__nwlog_fault(v2, &type, &v10))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        unsigned int v3 = __nwlog_obj();
        os_log_type_t v4 = type;
        if (!os_log_type_enabled(v3, type)) {
          goto LABEL_33;
        }
        *(_DWORD *)int buf = 136446210;
        uint64_t v13 = "nw_protocol_callbacks_set_get_output_interface";
        id v5 = "%{public}s called with null get_output_interface";
        goto LABEL_32;
      }
      if (!v10)
      {
        unsigned int v3 = __nwlog_obj();
        os_log_type_t v4 = type;
        if (!os_log_type_enabled(v3, type)) {
          goto LABEL_33;
        }
        *(_DWORD *)int buf = 136446210;
        uint64_t v13 = "nw_protocol_callbacks_set_get_output_interface";
        id v5 = "%{public}s called with null get_output_interface, backtrace limit exceeded";
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      unsigned int v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      BOOL v9 = os_log_type_enabled(v3, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)int buf = 136446466;
          uint64_t v13 = "nw_protocol_callbacks_set_get_output_interface";
          __int16 v14 = 2082;
          uint64_t v15 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v3, v4, "%{public}s called with null get_output_interface, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        if (v2) {
          goto LABEL_34;
        }
        return;
      }
      if (v9)
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v13 = "nw_protocol_callbacks_set_get_output_interface";
        id v5 = "%{public}s called with null get_output_interface, no backtrace";
LABEL_32:
        _os_log_impl(&dword_1830D4000, v3, v4, v5, buf, 0xCu);
      }
    }
  }
  else
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v13 = "nw_protocol_callbacks_set_get_output_interface";
    unsigned int v2 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v10 = 0;
    if (!__nwlog_fault(v2, &type, &v10)) {
      goto LABEL_33;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      unsigned int v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      if (!os_log_type_enabled(v3, type)) {
        goto LABEL_33;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v13 = "nw_protocol_callbacks_set_get_output_interface";
      id v5 = "%{public}s called with null callbacks";
      goto LABEL_32;
    }
    if (!v10)
    {
      unsigned int v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      if (!os_log_type_enabled(v3, type)) {
        goto LABEL_33;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v13 = "nw_protocol_callbacks_set_get_output_interface";
      id v5 = "%{public}s called with null callbacks, backtrace limit exceeded";
      goto LABEL_32;
    }
    __int16 v6 = (char *)__nw_create_backtrace_string();
    unsigned int v3 = __nwlog_obj();
    os_log_type_t v4 = type;
    BOOL v7 = os_log_type_enabled(v3, type);
    if (!v6)
    {
      if (!v7) {
        goto LABEL_33;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v13 = "nw_protocol_callbacks_set_get_output_interface";
      id v5 = "%{public}s called with null callbacks, no backtrace";
      goto LABEL_32;
    }
    if (v7)
    {
      *(_DWORD *)int buf = 136446466;
      uint64_t v13 = "nw_protocol_callbacks_set_get_output_interface";
      __int16 v14 = 2082;
      uint64_t v15 = v6;
      _os_log_impl(&dword_1830D4000, v3, v4, "%{public}s called with null callbacks, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v6);
  }
LABEL_33:
  if (v2) {
LABEL_34:
  }
    free(v2);
}

uint64_t nw_protocol_udp_add_input_handler(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v157 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_udp_add_input_handler";
    os_log_type_t v99 = (char *)_os_log_send_and_compose_impl();
    type[0] = 16;
    os_log_type_t v151 = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v99, type, &v151)) {
      goto LABEL_204;
    }
    if (type[0] == 17)
    {
      uint64_t v100 = __nwlog_obj();
      os_log_type_t v101 = type[0];
      if (!os_log_type_enabled(v100, (os_log_type_t)type[0])) {
        goto LABEL_204;
      }
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_udp_add_input_handler";
      os_log_type_t v102 = "%{public}s called with null protocol";
      goto LABEL_203;
    }
    if (v151 == OS_LOG_TYPE_DEFAULT)
    {
      uint64_t v100 = __nwlog_obj();
      os_log_type_t v101 = type[0];
      if (!os_log_type_enabled(v100, (os_log_type_t)type[0])) {
        goto LABEL_204;
      }
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_udp_add_input_handler";
      os_log_type_t v102 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_203;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v100 = __nwlog_obj();
    os_log_type_t v101 = type[0];
    BOOL v134 = os_log_type_enabled(v100, (os_log_type_t)type[0]);
    if (!backtrace_string)
    {
      if (!v134) {
        goto LABEL_204;
      }
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_udp_add_input_handler";
      os_log_type_t v102 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_203;
    }
    if (!v134) {
      goto LABEL_198;
    }
    *(_DWORD *)int buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_protocol_udp_add_input_handler";
    *(_WORD *)&unsigned char buf[12] = 2082;
    *(void *)&buf[14] = backtrace_string;
    os_log_type_t v105 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
    goto LABEL_197;
  }
  if (a1->handle != &nw_protocol_ref_counted_handle)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_udp_add_input_handler";
    os_log_type_t v99 = (char *)_os_log_send_and_compose_impl();
    type[0] = 16;
    os_log_type_t v151 = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v99, type, &v151)) {
      goto LABEL_204;
    }
    if (type[0] == 17)
    {
      uint64_t v100 = __nwlog_obj();
      os_log_type_t v101 = type[0];
      if (!os_log_type_enabled(v100, (os_log_type_t)type[0])) {
        goto LABEL_204;
      }
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_udp_add_input_handler";
      os_log_type_t v102 = "%{public}s called with null udp";
      goto LABEL_203;
    }
    if (v151 == OS_LOG_TYPE_DEFAULT)
    {
      uint64_t v100 = __nwlog_obj();
      os_log_type_t v101 = type[0];
      if (!os_log_type_enabled(v100, (os_log_type_t)type[0])) {
        goto LABEL_204;
      }
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_udp_add_input_handler";
      os_log_type_t v102 = "%{public}s called with null udp, backtrace limit exceeded";
      goto LABEL_203;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v100 = __nwlog_obj();
    os_log_type_t v101 = type[0];
    BOOL v135 = os_log_type_enabled(v100, (os_log_type_t)type[0]);
    if (!backtrace_string)
    {
      if (!v135) {
        goto LABEL_204;
      }
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_udp_add_input_handler";
      os_log_type_t v102 = "%{public}s called with null udp, no backtrace";
      goto LABEL_203;
    }
    if (!v135) {
      goto LABEL_198;
    }
    *(_DWORD *)int buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_protocol_udp_add_input_handler";
    *(_WORD *)&unsigned char buf[12] = 2082;
    *(void *)&buf[14] = backtrace_string;
    os_log_type_t v105 = "%{public}s called with null udp, dumping backtrace:%{public}s";
    goto LABEL_197;
  }
  default_input_handler = a1->default_input_handler;
  if (default_input_handler == a2)
  {
    nw_protocol_set_flow_id_from_protocol(a1, a2);
    if (a2) {
      goto LABEL_12;
    }
LABEL_25:
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "__nw_protocol_get_output_handler";
    uint64_t v13 = (char *)_os_log_send_and_compose_impl();
    type[0] = 16;
    os_log_type_t v151 = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v13, type, &v151)) {
      goto LABEL_139;
    }
    if (type[0] == 17)
    {
      __int16 v14 = __nwlog_obj();
      os_log_type_t v15 = type[0];
      if (!os_log_type_enabled(v14, (os_log_type_t)type[0])) {
        goto LABEL_139;
      }
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "__nw_protocol_get_output_handler";
      uint64_t v16 = "%{public}s called with null protocol";
    }
    else if (v151)
    {
      unint64_t v75 = (char *)__nw_create_backtrace_string();
      __int16 v14 = __nwlog_obj();
      os_log_type_t v15 = type[0];
      BOOL v76 = os_log_type_enabled(v14, (os_log_type_t)type[0]);
      if (v75)
      {
        if (v76)
        {
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "__nw_protocol_get_output_handler";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v75;
          _os_log_impl(&dword_1830D4000, v14, v15, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v75);
LABEL_139:
        if (v13) {
          free(v13);
        }
        __nwlog_obj();
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "__nw_protocol_set_output_handler";
        uint64_t v81 = (char *)_os_log_send_and_compose_impl();
        type[0] = 16;
        os_log_type_t v151 = OS_LOG_TYPE_DEFAULT;
        if (__nwlog_fault(v81, type, &v151))
        {
          if (type[0] == 17)
          {
            uint64_t v82 = __nwlog_obj();
            os_log_type_t v83 = type[0];
            if (!os_log_type_enabled(v82, (os_log_type_t)type[0])) {
              goto LABEL_155;
            }
            *(_DWORD *)int buf = 136446210;
            *(void *)&uint8_t buf[4] = "__nw_protocol_set_output_handler";
            uint64_t v84 = "%{public}s called with null protocol";
LABEL_154:
            _os_log_impl(&dword_1830D4000, v82, v83, v84, buf, 0xCu);
            goto LABEL_155;
          }
          if (v151 == OS_LOG_TYPE_DEFAULT)
          {
            uint64_t v82 = __nwlog_obj();
            os_log_type_t v83 = type[0];
            if (!os_log_type_enabled(v82, (os_log_type_t)type[0])) {
              goto LABEL_155;
            }
            *(_DWORD *)int buf = 136446210;
            *(void *)&uint8_t buf[4] = "__nw_protocol_set_output_handler";
            uint64_t v84 = "%{public}s called with null protocol, backtrace limit exceeded";
            goto LABEL_154;
          }
          uint64_t v85 = (char *)__nw_create_backtrace_string();
          uint64_t v82 = __nwlog_obj();
          os_log_type_t v83 = type[0];
          BOOL v86 = os_log_type_enabled(v82, (os_log_type_t)type[0]);
          if (!v85)
          {
            if (!v86) {
              goto LABEL_155;
            }
            *(_DWORD *)int buf = 136446210;
            *(void *)&uint8_t buf[4] = "__nw_protocol_set_output_handler";
            uint64_t v84 = "%{public}s called with null protocol, no backtrace";
            goto LABEL_154;
          }
          if (v86)
          {
            *(_DWORD *)int buf = 136446466;
            *(void *)&uint8_t buf[4] = "__nw_protocol_set_output_handler";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = v85;
            _os_log_impl(&dword_1830D4000, v82, v83, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v85);
        }
LABEL_155:
        if (v81) {
          free(v81);
        }
        __nwlog_obj();
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "__nw_protocol_get_local_endpoint";
        uint64_t v87 = (char *)_os_log_send_and_compose_impl();
        type[0] = 16;
        os_log_type_t v151 = OS_LOG_TYPE_DEFAULT;
        if (__nwlog_fault(v87, type, &v151))
        {
          if (type[0] == 17)
          {
            char v88 = __nwlog_obj();
            os_log_type_t v89 = type[0];
            if (!os_log_type_enabled(v88, (os_log_type_t)type[0])) {
              goto LABEL_171;
            }
            *(_DWORD *)int buf = 136446210;
            *(void *)&uint8_t buf[4] = "__nw_protocol_get_local_endpoint";
            uint64_t v90 = "%{public}s called with null protocol";
LABEL_170:
            _os_log_impl(&dword_1830D4000, v88, v89, v90, buf, 0xCu);
            goto LABEL_171;
          }
          if (v151 == OS_LOG_TYPE_DEFAULT)
          {
            char v88 = __nwlog_obj();
            os_log_type_t v89 = type[0];
            if (!os_log_type_enabled(v88, (os_log_type_t)type[0])) {
              goto LABEL_171;
            }
            *(_DWORD *)int buf = 136446210;
            *(void *)&uint8_t buf[4] = "__nw_protocol_get_local_endpoint";
            uint64_t v90 = "%{public}s called with null protocol, backtrace limit exceeded";
            goto LABEL_170;
          }
          unint64_t v91 = (char *)__nw_create_backtrace_string();
          char v88 = __nwlog_obj();
          os_log_type_t v89 = type[0];
          BOOL v92 = os_log_type_enabled(v88, (os_log_type_t)type[0]);
          if (!v91)
          {
            if (!v92) {
              goto LABEL_171;
            }
            *(_DWORD *)int buf = 136446210;
            *(void *)&uint8_t buf[4] = "__nw_protocol_get_local_endpoint";
            uint64_t v90 = "%{public}s called with null protocol, no backtrace";
            goto LABEL_170;
          }
          if (v92)
          {
            *(_DWORD *)int buf = 136446466;
            *(void *)&uint8_t buf[4] = "__nw_protocol_get_local_endpoint";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = v91;
            _os_log_impl(&dword_1830D4000, v88, v89, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v91);
        }
LABEL_171:
        if (v87) {
          free(v87);
        }
        __nwlog_obj();
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "__nw_protocol_get_remote_endpoint";
        unint64_t v93 = (char *)_os_log_send_and_compose_impl();
        type[0] = 16;
        os_log_type_t v151 = OS_LOG_TYPE_DEFAULT;
        if (!__nwlog_fault(v93, type, &v151)) {
          goto LABEL_187;
        }
        if (type[0] == 17)
        {
          __int16 v94 = __nwlog_obj();
          os_log_type_t v95 = type[0];
          if (!os_log_type_enabled(v94, (os_log_type_t)type[0])) {
            goto LABEL_187;
          }
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "__nw_protocol_get_remote_endpoint";
          uint64_t v96 = "%{public}s called with null protocol";
        }
        else if (v151)
        {
          uint64_t v97 = (char *)__nw_create_backtrace_string();
          __int16 v94 = __nwlog_obj();
          os_log_type_t v95 = type[0];
          BOOL v98 = os_log_type_enabled(v94, (os_log_type_t)type[0]);
          if (v97)
          {
            if (v98)
            {
              *(_DWORD *)int buf = 136446466;
              *(void *)&uint8_t buf[4] = "__nw_protocol_get_remote_endpoint";
              *(_WORD *)&unsigned char buf[12] = 2082;
              *(void *)&buf[14] = v97;
              _os_log_impl(&dword_1830D4000, v94, v95, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
            }
            free(v97);
            goto LABEL_187;
          }
          if (!v98)
          {
LABEL_187:
            if (v93) {
              free(v93);
            }
            goto LABEL_189;
          }
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "__nw_protocol_get_remote_endpoint";
          uint64_t v96 = "%{public}s called with null protocol, no backtrace";
        }
        else
        {
          __int16 v94 = __nwlog_obj();
          os_log_type_t v95 = type[0];
          if (!os_log_type_enabled(v94, (os_log_type_t)type[0])) {
            goto LABEL_187;
          }
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "__nw_protocol_get_remote_endpoint";
          uint64_t v96 = "%{public}s called with null protocol, backtrace limit exceeded";
        }
        _os_log_impl(&dword_1830D4000, v94, v95, v96, buf, 0xCu);
        goto LABEL_187;
      }
      if (!v76) {
        goto LABEL_139;
      }
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "__nw_protocol_get_output_handler";
      uint64_t v16 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      __int16 v14 = __nwlog_obj();
      os_log_type_t v15 = type[0];
      if (!os_log_type_enabled(v14, (os_log_type_t)type[0])) {
        goto LABEL_139;
      }
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "__nw_protocol_get_output_handler";
      uint64_t v16 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    _os_log_impl(&dword_1830D4000, v14, v15, v16, buf, 0xCu);
    goto LABEL_139;
  }
  if (default_input_handler)
  {
    if (default_input_handler->handle == &nw_protocol_ref_counted_handle)
    {
      callbacks = default_input_handler[1].callbacks;
      if (callbacks)
      {
        uint64_t v18 = (nw_protocol_callbacks *)((char *)callbacks - 1);
        default_input_handler[1].callbacks = v18;
        if (!v18)
        {
          id v19 = *(void (***)(void))default_input_handler[1].flow_id;
          if (v19)
          {
            *(void *)default_input_handler[1].flow_id = 0;
            v19[2](v19);
            _Block_release(v19);
          }
          if (default_input_handler[1].flow_id[8])
          {
            uint64_t v20 = *(const void **)default_input_handler[1].flow_id;
            if (v20) {
              _Block_release(v20);
            }
          }
          free(default_input_handler);
        }
      }
    }
  }
  a1->default_input_handler = a2;
  if (!a2)
  {
    nw_protocol_set_flow_id_from_protocol(a1, 0);
    goto LABEL_25;
  }
  if (a2->handle == &nw_protocol_ref_counted_handle)
  {
    id v5 = a2[1].callbacks;
    if (v5) {
      a2[1].callbacks = (nw_protocol_callbacks *)((char *)&v5->add_input_handler + 1);
    }
  }
  nw_protocol_set_flow_id_from_protocol(a1, a2);
LABEL_12:
  if (!a2->output_handler)
  {
    a2->output_handler = a1;
    if (a1->handle == &nw_protocol_ref_counted_handle)
    {
      __int16 v6 = a1[1].callbacks;
      if (v6) {
        a1[1].callbacks = (nw_protocol_callbacks *)((char *)&v6->add_input_handler + 1);
      }
    }
  }
  handle = a2->handle;
  if (handle == &nw_protocol_ref_counted_handle)
  {
    uint64_t v8 = a2[1].callbacks;
    if (v8) {
      a2[1].callbacks = (nw_protocol_callbacks *)((char *)&v8->add_input_handler + 1);
    }
  }
  BOOL v9 = a2->callbacks;
  if (v9)
  {
    get_local_endpoint = (uint64_t (*)(nw_protocol *))v9->get_local_endpoint;
    if (get_local_endpoint)
    {
      size_t v11 = (void *)get_local_endpoint(a2);
      if (handle != &nw_protocol_ref_counted_handle) {
        goto LABEL_45;
      }
      goto LABEL_22;
    }
  }
  __nwlog_obj();
  identifier = a2->identifier;
  *(_DWORD *)int buf = 136446722;
  *(void *)&uint8_t buf[4] = "__nw_protocol_get_local_endpoint";
  if (!identifier) {
    identifier = (nw_protocol_identifier *)"invalid";
  }
  *(_WORD *)&unsigned char buf[12] = 2082;
  *(void *)&buf[14] = identifier;
  *(_WORD *)&buf[22] = 2048;
  id v153 = a2;
  uint64_t v107 = (char *)_os_log_send_and_compose_impl();
  type[0] = 16;
  os_log_type_t v151 = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v107, type, &v151))
  {
    if (type[0] == 17)
    {
      int v108 = __nwlog_obj();
      os_log_type_t v109 = type[0];
      if (!os_log_type_enabled(v108, (os_log_type_t)type[0])) {
        goto LABEL_309;
      }
      os_log_type_t v110 = a2->identifier;
      if (!v110) {
        os_log_type_t v110 = (nw_protocol_identifier *)"invalid";
      }
      *(_DWORD *)int buf = 136446722;
      *(void *)&uint8_t buf[4] = "__nw_protocol_get_local_endpoint";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = v110;
      *(_WORD *)&buf[22] = 2048;
      id v153 = a2;
      BOOL v111 = "%{public}s protocol %{public}s (%p) has invalid get_local_endpoint callback";
LABEL_308:
      _os_log_impl(&dword_1830D4000, v108, v109, v111, buf, 0x20u);
      goto LABEL_309;
    }
    if (v151 == OS_LOG_TYPE_DEFAULT)
    {
      int v108 = __nwlog_obj();
      os_log_type_t v109 = type[0];
      if (!os_log_type_enabled(v108, (os_log_type_t)type[0])) {
        goto LABEL_309;
      }
      unint64_t v140 = a2->identifier;
      if (!v140) {
        unint64_t v140 = (nw_protocol_identifier *)"invalid";
      }
      *(_DWORD *)int buf = 136446722;
      *(void *)&uint8_t buf[4] = "__nw_protocol_get_local_endpoint";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = v140;
      *(_WORD *)&buf[22] = 2048;
      id v153 = a2;
      BOOL v111 = "%{public}s protocol %{public}s (%p) has invalid get_local_endpoint callback, backtrace limit exceeded";
      goto LABEL_308;
    }
    unint64_t v124 = (char *)__nw_create_backtrace_string();
    int v108 = __nwlog_obj();
    os_log_type_t v109 = type[0];
    BOOL v125 = os_log_type_enabled(v108, (os_log_type_t)type[0]);
    if (!v124)
    {
      if (!v125) {
        goto LABEL_309;
      }
      os_log_type_t v146 = a2->identifier;
      if (!v146) {
        os_log_type_t v146 = (nw_protocol_identifier *)"invalid";
      }
      *(_DWORD *)int buf = 136446722;
      *(void *)&uint8_t buf[4] = "__nw_protocol_get_local_endpoint";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = v146;
      *(_WORD *)&buf[22] = 2048;
      id v153 = a2;
      BOOL v111 = "%{public}s protocol %{public}s (%p) has invalid get_local_endpoint callback, no backtrace";
      goto LABEL_308;
    }
    if (v125)
    {
      unint64_t v126 = a2->identifier;
      if (!v126) {
        unint64_t v126 = (nw_protocol_identifier *)"invalid";
      }
      *(_DWORD *)int buf = 136446978;
      *(void *)&uint8_t buf[4] = "__nw_protocol_get_local_endpoint";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = v126;
      *(_WORD *)&buf[22] = 2048;
      id v153 = a2;
      LOWORD(v154[0]) = 2082;
      *(void *)((char *)v154 + 2) = v124;
      _os_log_impl(&dword_1830D4000, v108, v109, "%{public}s protocol %{public}s (%p) has invalid get_local_endpoint callback, dumping backtrace:%{public}s", buf, 0x2Au);
    }
    free(v124);
  }
LABEL_309:
  if (v107) {
    free(v107);
  }
  size_t v11 = 0;
  if (handle != &nw_protocol_ref_counted_handle) {
    goto LABEL_45;
  }
LABEL_22:
  if (a2->handle != &nw_protocol_ref_counted_handle)
  {
    BOOL v12 = 1;
    goto LABEL_48;
  }
  uint64_t v21 = a2[1].callbacks;
  if (v21)
  {
    uint64_t v22 = (nw_protocol_callbacks *)((char *)v21 - 1);
    a2[1].callbacks = v22;
    if (!v22)
    {
      uint64_t v23 = *(void (***)(void))a2[1].flow_id;
      if (v23)
      {
        *(void *)a2[1].flow_id = 0;
        v23[2](v23);
        _Block_release(v23);
      }
      if (a2[1].flow_id[8])
      {
        int v24 = *(const void **)a2[1].flow_id;
        if (v24) {
          _Block_release(v24);
        }
      }
      free(a2);
    }
  }
LABEL_45:
  int v25 = a2->handle;
  BOOL v12 = v25 != &nw_protocol_ref_counted_handle;
  if (v25 == &nw_protocol_ref_counted_handle)
  {
    unint64_t v26 = a2[1].callbacks;
    if (v26) {
      a2[1].callbacks = (nw_protocol_callbacks *)((char *)&v26->add_input_handler + 1);
    }
  }
LABEL_48:
  __int16 v27 = a2->callbacks;
  if (v27)
  {
    get_remote_endpoint = (uint64_t (*)(nw_protocol *))v27->get_remote_endpoint;
    if (get_remote_endpoint)
    {
      __int16 v29 = (void *)get_remote_endpoint(a2);
      goto LABEL_51;
    }
  }
  __nwlog_obj();
  os_log_type_t v112 = a2->identifier;
  *(_DWORD *)int buf = 136446722;
  *(void *)&uint8_t buf[4] = "__nw_protocol_get_remote_endpoint";
  if (!v112) {
    os_log_type_t v112 = (nw_protocol_identifier *)"invalid";
  }
  *(_WORD *)&unsigned char buf[12] = 2082;
  *(void *)&buf[14] = v112;
  *(_WORD *)&buf[22] = 2048;
  id v153 = a2;
  BOOL v113 = (char *)_os_log_send_and_compose_impl();
  type[0] = 16;
  os_log_type_t v151 = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v113, type, &v151))
  {
    if (type[0] == 17)
    {
      __int16 v114 = __nwlog_obj();
      os_log_type_t v115 = type[0];
      if (os_log_type_enabled(v114, (os_log_type_t)type[0]))
      {
        BOOL v116 = a2->identifier;
        if (!v116) {
          BOOL v116 = (nw_protocol_identifier *)"invalid";
        }
        *(_DWORD *)int buf = 136446722;
        *(void *)&uint8_t buf[4] = "__nw_protocol_get_remote_endpoint";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = v116;
        *(_WORD *)&buf[22] = 2048;
        id v153 = a2;
        int v117 = "%{public}s protocol %{public}s (%p) has invalid get_remote_endpoint callback";
LABEL_317:
        _os_log_impl(&dword_1830D4000, v114, v115, v117, buf, 0x20u);
      }
    }
    else if (v151)
    {
      __int16 v127 = (char *)__nw_create_backtrace_string();
      __int16 v114 = __nwlog_obj();
      os_log_type_t v115 = type[0];
      BOOL v128 = os_log_type_enabled(v114, (os_log_type_t)type[0]);
      if (v127)
      {
        if (v128)
        {
          os_log_type_t v129 = a2->identifier;
          if (!v129) {
            os_log_type_t v129 = (nw_protocol_identifier *)"invalid";
          }
          *(_DWORD *)int buf = 136446978;
          *(void *)&uint8_t buf[4] = "__nw_protocol_get_remote_endpoint";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v129;
          *(_WORD *)&buf[22] = 2048;
          id v153 = a2;
          LOWORD(v154[0]) = 2082;
          *(void *)((char *)v154 + 2) = v127;
          _os_log_impl(&dword_1830D4000, v114, v115, "%{public}s protocol %{public}s (%p) has invalid get_remote_endpoint callback, dumping backtrace:%{public}s", buf, 0x2Au);
        }
        free(v127);
        goto LABEL_318;
      }
      if (v128)
      {
        uint64_t v147 = a2->identifier;
        if (!v147) {
          uint64_t v147 = (nw_protocol_identifier *)"invalid";
        }
        *(_DWORD *)int buf = 136446722;
        *(void *)&uint8_t buf[4] = "__nw_protocol_get_remote_endpoint";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = v147;
        *(_WORD *)&buf[22] = 2048;
        id v153 = a2;
        int v117 = "%{public}s protocol %{public}s (%p) has invalid get_remote_endpoint callback, no backtrace";
        goto LABEL_317;
      }
    }
    else
    {
      __int16 v114 = __nwlog_obj();
      os_log_type_t v115 = type[0];
      if (os_log_type_enabled(v114, (os_log_type_t)type[0]))
      {
        uint64_t v141 = a2->identifier;
        if (!v141) {
          uint64_t v141 = (nw_protocol_identifier *)"invalid";
        }
        *(_DWORD *)int buf = 136446722;
        *(void *)&uint8_t buf[4] = "__nw_protocol_get_remote_endpoint";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = v141;
        *(_WORD *)&buf[22] = 2048;
        id v153 = a2;
        int v117 = "%{public}s protocol %{public}s (%p) has invalid get_remote_endpoint callback, backtrace limit exceeded";
        goto LABEL_317;
      }
    }
  }
LABEL_318:
  if (v113) {
    free(v113);
  }
  __int16 v29 = 0;
LABEL_51:
  if (!v12 && a2->handle == &nw_protocol_ref_counted_handle)
  {
    BOOL v67 = a2[1].callbacks;
    if (v67)
    {
      uint64_t v68 = (nw_protocol_callbacks *)((char *)v67 - 1);
      a2[1].callbacks = v68;
      if (!v68)
      {
        BOOL v69 = *(void (***)(void))a2[1].flow_id;
        if (v69)
        {
          *(void *)a2[1].flow_id = 0;
          v69[2](v69);
          _Block_release(v69);
        }
        if (a2[1].flow_id[8])
        {
          BOOL v70 = *(const void **)a2[1].flow_id;
          if (v70) {
            _Block_release(v70);
          }
        }
        free(a2);
      }
    }
  }
  if (!v11 || (id v30 = v11, v31 = [v30 type], v30, v31 != 1))
  {
LABEL_189:
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_udp_add_input_handler";
    os_log_type_t v99 = (char *)_os_log_send_and_compose_impl();
    type[0] = 16;
    os_log_type_t v151 = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v99, type, &v151)) {
      goto LABEL_204;
    }
    if (type[0] == 17)
    {
      uint64_t v100 = __nwlog_obj();
      os_log_type_t v101 = type[0];
      if (os_log_type_enabled(v100, (os_log_type_t)type[0]))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_udp_add_input_handler";
        os_log_type_t v102 = "%{public}s called with null (local_address && nw_endpoint_get_type(local_address) == nw_endpoint_type_address)";
        goto LABEL_203;
      }
      goto LABEL_204;
    }
    if (v151 == OS_LOG_TYPE_DEFAULT)
    {
      uint64_t v100 = __nwlog_obj();
      os_log_type_t v101 = type[0];
      if (!os_log_type_enabled(v100, (os_log_type_t)type[0])) {
        goto LABEL_204;
      }
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_udp_add_input_handler";
      os_log_type_t v102 = "%{public}s called with null (local_address && nw_endpoint_get_type(local_address) == nw_endpoint_type_addre"
             "ss), backtrace limit exceeded";
      goto LABEL_203;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v100 = __nwlog_obj();
    os_log_type_t v101 = type[0];
    BOOL v104 = os_log_type_enabled(v100, (os_log_type_t)type[0]);
    if (!backtrace_string)
    {
      if (!v104) {
        goto LABEL_204;
      }
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_udp_add_input_handler";
      os_log_type_t v102 = "%{public}s called with null (local_address && nw_endpoint_get_type(local_address) == nw_endpoint_type_addre"
             "ss), no backtrace";
      goto LABEL_203;
    }
    if (!v104)
    {
LABEL_198:
      free(backtrace_string);
      goto LABEL_204;
    }
    *(_DWORD *)int buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_protocol_udp_add_input_handler";
    *(_WORD *)&unsigned char buf[12] = 2082;
    *(void *)&buf[14] = backtrace_string;
    os_log_type_t v105 = "%{public}s called with null (local_address && nw_endpoint_get_type(local_address) == nw_endpoint_type_address"
           "), dumping backtrace:%{public}s";
LABEL_197:
    _os_log_impl(&dword_1830D4000, v100, v101, v105, buf, 0x16u);
    goto LABEL_198;
  }
  if (v29)
  {
    id v32 = v29;
    int v33 = [v32 type];

    if (v33 == 1)
    {
      unint64_t v34 = v30;
      __int16 v35 = [v34 port];

      LOWORD(a1[2].output_handler_context) = v35;
      os_log_type_t v36 = v32;
      __int16 v37 = [v36 port];

      WORD1(a1[2].output_handler_context) = v37;
      int address_family = nw_endpoint_get_address_family(v34);
      HIWORD(a1[2].output_handler_context) = HIWORD(a1[2].output_handler_context) & 0xFFFB | (4 * (address_family == 2));
      address = nw_endpoint_get_address(v34);
      if (address_family == 2)
      {
        *(_DWORD *)a1[2].flow_id = *(_DWORD *)&address->sa_data[2];
        LODWORD(a1[2].identifier) = *(_DWORD *)&nw_endpoint_get_address(v36)->sa_data[2];
      }
      else
      {
        *(sockaddr *)a1[2].flow_id = *(sockaddr *)&address->sa_data[6];
        *(sockaddr *)&a1[2].identifier = *(sockaddr *)&nw_endpoint_get_address(v36)->sa_data[6];
      }
      unint64_t v40 = a2->handle;
      if (v40 == &nw_protocol_ref_counted_handle)
      {
        uint64_t v41 = a2[1].callbacks;
        if (v41) {
          a2[1].callbacks = (nw_protocol_callbacks *)((char *)&v41->add_input_handler + 1);
        }
      }
      __int16 v42 = a2->callbacks;
      if (v42)
      {
        get_parameters = (uint64_t (*)(nw_protocol *))v42->get_parameters;
        if (get_parameters)
        {
          unint64_t v44 = (void *)get_parameters(a2);
          if (v40 != &nw_protocol_ref_counted_handle) {
            goto LABEL_67;
          }
          goto LABEL_66;
        }
      }
      __nwlog_obj();
      uint32_t v118 = a2->identifier;
      *(_DWORD *)int buf = 136446722;
      *(void *)&uint8_t buf[4] = "__nw_protocol_get_parameters";
      if (!v118) {
        uint32_t v118 = (nw_protocol_identifier *)"invalid";
      }
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = v118;
      *(_WORD *)&buf[22] = 2048;
      id v153 = a2;
      os_log_type_t v119 = (char *)_os_log_send_and_compose_impl();
      type[0] = 16;
      os_log_type_t v151 = OS_LOG_TYPE_DEFAULT;
      if (__nwlog_fault(v119, type, &v151))
      {
        if (type[0] == 17)
        {
          BOOL v120 = __nwlog_obj();
          os_log_type_t v121 = type[0];
          if (!os_log_type_enabled(v120, (os_log_type_t)type[0])) {
            goto LABEL_328;
          }
          uint64_t v122 = a2->identifier;
          if (!v122) {
            uint64_t v122 = (nw_protocol_identifier *)"invalid";
          }
          *(_DWORD *)int buf = 136446722;
          *(void *)&uint8_t buf[4] = "__nw_protocol_get_parameters";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v122;
          *(_WORD *)&buf[22] = 2048;
          id v153 = a2;
          BOOL v123 = "%{public}s protocol %{public}s (%p) has invalid get_parameters callback";
LABEL_327:
          _os_log_impl(&dword_1830D4000, v120, v121, v123, buf, 0x20u);
          goto LABEL_328;
        }
        if (v151 == OS_LOG_TYPE_DEFAULT)
        {
          BOOL v120 = __nwlog_obj();
          os_log_type_t v121 = type[0];
          if (!os_log_type_enabled(v120, (os_log_type_t)type[0])) {
            goto LABEL_328;
          }
          unint64_t v142 = a2->identifier;
          if (!v142) {
            unint64_t v142 = (nw_protocol_identifier *)"invalid";
          }
          *(_DWORD *)int buf = 136446722;
          *(void *)&uint8_t buf[4] = "__nw_protocol_get_parameters";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v142;
          *(_WORD *)&buf[22] = 2048;
          id v153 = a2;
          BOOL v123 = "%{public}s protocol %{public}s (%p) has invalid get_parameters callback, backtrace limit exceeded";
          goto LABEL_327;
        }
        v131 = (char *)__nw_create_backtrace_string();
        BOOL v120 = __nwlog_obj();
        os_log_type_t v121 = type[0];
        BOOL v132 = os_log_type_enabled(v120, (os_log_type_t)type[0]);
        if (!v131)
        {
          if (!v132) {
            goto LABEL_328;
          }
          v148 = a2->identifier;
          if (!v148) {
            v148 = (nw_protocol_identifier *)"invalid";
          }
          *(_DWORD *)int buf = 136446722;
          *(void *)&uint8_t buf[4] = "__nw_protocol_get_parameters";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v148;
          *(_WORD *)&buf[22] = 2048;
          id v153 = a2;
          BOOL v123 = "%{public}s protocol %{public}s (%p) has invalid get_parameters callback, no backtrace";
          goto LABEL_327;
        }
        if (v132)
        {
          os_log_type_t v133 = a2->identifier;
          if (!v133) {
            os_log_type_t v133 = (nw_protocol_identifier *)"invalid";
          }
          *(_DWORD *)int buf = 136446978;
          *(void *)&uint8_t buf[4] = "__nw_protocol_get_parameters";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v133;
          *(_WORD *)&buf[22] = 2048;
          id v153 = a2;
          LOWORD(v154[0]) = 2082;
          *(void *)((char *)v154 + 2) = v131;
          _os_log_impl(&dword_1830D4000, v120, v121, "%{public}s protocol %{public}s (%p) has invalid get_parameters callback, dumping backtrace:%{public}s", buf, 0x2Au);
        }
        free(v131);
      }
LABEL_328:
      if (v119) {
        free(v119);
      }
      unint64_t v44 = 0;
      if (v40 != &nw_protocol_ref_counted_handle)
      {
LABEL_67:
        id v45 = nw_parameters_copy_protocol_options_legacy(v44, a1);
        if (!v45)
        {
LABEL_83:
          if (nw_parameters_get_upper_transport_protocol(v44) == 253) {
            HIWORD(a1[2].output_handler_context) |= 0x80u;
          }
          uint64_t v59 = a1->default_input_handler;
          if (v59)
          {
            os_log_type_t v60 = v59->callbacks;
            if (v60)
            {
              get_path = (uint64_t (*)(nw_protocol *))v60->get_path;
              if (get_path)
              {
                if (v59->handle == &nw_protocol_ref_counted_handle)
                {
                  uint64_t v63 = v59[1].callbacks;
                  if (v63) {
                    v59[1].callbacks = (nw_protocol_callbacks *)((char *)&v63->add_input_handler + 1);
                  }
                  unint64_t v62 = (void *)get_path(v59);
                  if (v59->handle == &nw_protocol_ref_counted_handle)
                  {
                    unint64_t v77 = v59[1].callbacks;
                    if (v77)
                    {
                      BOOL v78 = (nw_protocol_callbacks *)((char *)v77 - 1);
                      v59[1].callbacks = v78;
                      if (!v78)
                      {
                        id v79 = *(void (***)(void))v59[1].flow_id;
                        if (v79)
                        {
                          *(void *)v59[1].flow_id = 0;
                          v79[2](v79);
                          _Block_release(v79);
                        }
                        if (v59[1].flow_id[8])
                        {
                          os_log_type_t v80 = *(const void **)v59[1].flow_id;
                          if (v80) {
                            _Block_release(v80);
                          }
                        }
                        free(v59);
                      }
                    }
                  }
                }
                else
                {
                  unint64_t v62 = (void *)get_path(a1->default_input_handler);
                }
                if (v62)
                {
                  unint64_t v64 = v62;
                  if (nw_path_network_is_satisfied_update_reason(v64, 0))
                  {
                    int effective_traffic_class = v64->effective_traffic_class;
                    if (!effective_traffic_class) {
                      int effective_traffic_class = nw_parameters_get_traffic_class(v64->parameters);
                    }
                  }
                  else
                  {
                    int effective_traffic_class = 0;
                  }

                  LODWORD(a1[2].default_input_handler) = effective_traffic_class;
                  HIDWORD(a1[2].default_input_handler) = nw_path_get_maximum_datagram_size(v64);
                }
              }
            }
          }
          if (_nw_signposts_once != -1) {
            dispatch_once(&_nw_signposts_once, &__block_literal_global_17);
          }
          if (_nw_signposts_enabled)
          {
            if (kdebug_is_enabled()) {
              kdebug_trace();
            }
          }
          return 1;
        }
        unint64_t v46 = v45;
        uint64_t v47 = v46;
        uint64_t v48 = 0;
        a1[3].flow_id[0] = 0;
        uint64_t v49 = a1 + 3;
        unint64_t v50 = 84;
        while (1)
        {
          int v51 = v46[v48 + 48];
          v49->flow_id[v48] = v51;
          if (!v51) {
            break;
          }
          --v50;
          ++v48;
          if (v50 <= 1)
          {
            v49->flow_id[v48] = 0;
            break;
          }
        }

        BOOL v52 = v47;
        __int16 v53 = *((_WORD *)v52 + 68);

        WORD2(a1[2].output_handler_context) = v53;
        if (nw_udp_options_get_prefer_no_checksum(v52)) {
          __int16 v54 = 16;
        }
        else {
          __int16 v54 = 0;
        }
        HIWORD(a1[2].output_handler_context) = HIWORD(a1[2].output_handler_context) & 0xFFEF | v54;
        uint64_t v55 = v52;
        if (nw_protocol_options_is_udp(v55))
        {
          *(void *)os_log_type_t type = 0;
          *(void *)&os_log_type_t type[8] = type;
          *(void *)&type[16] = 0x2020000000;
          char v156 = 0;
          *(void *)int buf = MEMORY[0x1E4F143A8];
          *(void *)&buf[8] = 3221225472;
          *(void *)&buf[16] = __nw_udp_options_get_ignore_inbound_checksum_block_invoke;
          id v153 = (nw_protocol *)&unk_1E5248E90;
          v154[0] = type;
          nw_protocol_options_access_handle(v55, buf);
          BOOL v56 = *(unsigned char *)(*(void *)&type[8] + 24) == 0;
          _Block_object_dispose(type, 8);

          if (v56) {
            __int16 v57 = 0;
          }
          else {
            __int16 v57 = 64;
          }
LABEL_79:
          HIWORD(a1[2].output_handler_context) = HIWORD(a1[2].output_handler_context) & 0xFFBF | v57;
          if (nw_udp_options_get_no_metadata(v55)) {
            __int16 v58 = 32;
          }
          else {
            __int16 v58 = 0;
          }
          HIWORD(a1[2].output_handler_context) = HIWORD(a1[2].output_handler_context) & 0xFFDF | v58;
          os_release(v55);
          goto LABEL_83;
        }
        __int16 v136 = __nwlog_obj();
        *(_DWORD *)os_log_type_t type = 136446210;
        *(void *)&type[4] = "nw_udp_options_get_ignore_inbound_checksum";
        uint64_t v137 = (char *)_os_log_send_and_compose_impl();

        os_log_type_t v151 = OS_LOG_TYPE_ERROR;
        char v150 = 0;
        if (__nwlog_fault(v137, &v151, &v150))
        {
          if (v151 == OS_LOG_TYPE_FAULT)
          {
            __int16 v138 = __nwlog_obj();
            os_log_type_t v139 = v151;
            if (os_log_type_enabled(v138, v151))
            {
              *(_DWORD *)os_log_type_t type = 136446210;
              *(void *)&type[4] = "nw_udp_options_get_ignore_inbound_checksum";
              _os_log_impl(&dword_1830D4000, v138, v139, "%{public}s called with null nw_protocol_options_is_udp(options)", type, 0xCu);
            }
          }
          else if (v150)
          {
            os_log_type_t v143 = (char *)__nw_create_backtrace_string();
            __int16 v138 = __nwlog_obj();
            os_log_type_t v144 = v151;
            BOOL v145 = os_log_type_enabled(v138, v151);
            if (v143)
            {
              if (v145)
              {
                *(_DWORD *)os_log_type_t type = 136446466;
                *(void *)&type[4] = "nw_udp_options_get_ignore_inbound_checksum";
                *(_WORD *)&type[12] = 2082;
                *(void *)&type[14] = v143;
                _os_log_impl(&dword_1830D4000, v138, v144, "%{public}s called with null nw_protocol_options_is_udp(options), dumping backtrace:%{public}s", type, 0x16u);
              }

              free(v143);
              goto LABEL_342;
            }
            if (v145)
            {
              *(_DWORD *)os_log_type_t type = 136446210;
              *(void *)&type[4] = "nw_udp_options_get_ignore_inbound_checksum";
              _os_log_impl(&dword_1830D4000, v138, v144, "%{public}s called with null nw_protocol_options_is_udp(options), no backtrace", type, 0xCu);
            }
          }
          else
          {
            __int16 v138 = __nwlog_obj();
            os_log_type_t v149 = v151;
            if (os_log_type_enabled(v138, v151))
            {
              *(_DWORD *)os_log_type_t type = 136446210;
              *(void *)&type[4] = "nw_udp_options_get_ignore_inbound_checksum";
              _os_log_impl(&dword_1830D4000, v138, v149, "%{public}s called with null nw_protocol_options_is_udp(options), backtrace limit exceeded", type, 0xCu);
            }
          }
        }
LABEL_342:
        if (v137) {
          free(v137);
        }

        __int16 v57 = 0;
        goto LABEL_79;
      }
LABEL_66:
      if (a2->handle == &nw_protocol_ref_counted_handle)
      {
        uint64_t v71 = a2[1].callbacks;
        if (v71)
        {
          int v72 = (nw_protocol_callbacks *)((char *)v71 - 1);
          a2[1].callbacks = v72;
          if (!v72)
          {
            BOOL v73 = *(void (***)(void))a2[1].flow_id;
            if (v73)
            {
              *(void *)a2[1].flow_id = 0;
              v73[2](v73);
              _Block_release(v73);
            }
            if (a2[1].flow_id[8])
            {
              unint64_t v74 = *(const void **)a2[1].flow_id;
              if (v74) {
                _Block_release(v74);
              }
            }
            free(a2);
          }
        }
      }
      goto LABEL_67;
    }
  }
  __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_protocol_udp_add_input_handler";
  os_log_type_t v99 = (char *)_os_log_send_and_compose_impl();
  type[0] = 16;
  os_log_type_t v151 = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v99, type, &v151))
  {
    if (type[0] == 17)
    {
      uint64_t v100 = __nwlog_obj();
      os_log_type_t v101 = type[0];
      if (!os_log_type_enabled(v100, (os_log_type_t)type[0])) {
        goto LABEL_204;
      }
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_udp_add_input_handler";
      os_log_type_t v102 = "%{public}s called with null (remote_address && nw_endpoint_get_type(remote_address) == nw_endpoint_type_address)";
      goto LABEL_203;
    }
    if (v151)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v100 = __nwlog_obj();
      os_log_type_t v101 = type[0];
      BOOL v130 = os_log_type_enabled(v100, (os_log_type_t)type[0]);
      if (backtrace_string)
      {
        if (!v130) {
          goto LABEL_198;
        }
        *(_DWORD *)int buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_udp_add_input_handler";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        os_log_type_t v105 = "%{public}s called with null (remote_address && nw_endpoint_get_type(remote_address) == nw_endpoint_type_a"
               "ddress), dumping backtrace:%{public}s";
        goto LABEL_197;
      }
      if (!v130) {
        goto LABEL_204;
      }
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_udp_add_input_handler";
      os_log_type_t v102 = "%{public}s called with null (remote_address && nw_endpoint_get_type(remote_address) == nw_endpoint_type_add"
             "ress), no backtrace";
    }
    else
    {
      uint64_t v100 = __nwlog_obj();
      os_log_type_t v101 = type[0];
      if (!os_log_type_enabled(v100, (os_log_type_t)type[0])) {
        goto LABEL_204;
      }
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_udp_add_input_handler";
      os_log_type_t v102 = "%{public}s called with null (remote_address && nw_endpoint_get_type(remote_address) == nw_endpoint_type_add"
             "ress), backtrace limit exceeded";
    }
LABEL_203:
    _os_log_impl(&dword_1830D4000, v100, v101, v102, buf, 0xCu);
  }
LABEL_204:
  if (v99) {
    free(v99);
  }
  return 0;
}

void sub_1833FC3C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id nw_protocol_implementation_get_path(nw_protocol *a1)
{
  uint64_t v81 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    handle = a1->handle;
    p_output_handler = &a1[1].output_handler;
    if (handle != &nw_protocol_ref_counted_handle) {
      p_output_handler = 0;
    }
    os_log_type_t v4 = p_output_handler;
    id v5 = v4;
    if (handle == &nw_protocol_ref_counted_handle)
    {
      uint64_t v6 = *((void *)v4 + 1);
      if (!v6)
      {
        id v32 = __nwlog_obj();
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_get_path";
        __int16 v29 = (char *)_os_log_send_and_compose_impl();

        type[0] = OS_LOG_TYPE_ERROR;
        os_log_type_t v73 = OS_LOG_TYPE_DEFAULT;
        if (!__nwlog_fault(v29, type, &v73)) {
          goto LABEL_154;
        }
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          id v30 = __nwlog_obj();
          os_log_type_t v33 = type[0];
          if (os_log_type_enabled(v30, type[0]))
          {
            *(_DWORD *)int buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_protocol_implementation_get_path";
            _os_log_impl(&dword_1830D4000, v30, v33, "%{public}s called with null instance->parent_definition", buf, 0xCu);
          }
          goto LABEL_153;
        }
        if (v73 == OS_LOG_TYPE_DEFAULT)
        {
          id v30 = __nwlog_obj();
          os_log_type_t v55 = type[0];
          if (os_log_type_enabled(v30, type[0]))
          {
            *(_DWORD *)int buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_protocol_implementation_get_path";
            _os_log_impl(&dword_1830D4000, v30, v55, "%{public}s called with null instance->parent_definition, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_153;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        id v30 = __nwlog_obj();
        os_log_type_t v43 = type[0];
        BOOL v44 = os_log_type_enabled(v30, type[0]);
        if (!backtrace_string)
        {
          if (v44)
          {
            *(_DWORD *)int buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_protocol_implementation_get_path";
            _os_log_impl(&dword_1830D4000, v30, v43, "%{public}s called with null instance->parent_definition, no backtrace", buf, 0xCu);
          }
          goto LABEL_153;
        }
        if (v44)
        {
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_implementation_get_path";
          __int16 v75 = 2082;
          BOOL v76 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v30, v43, "%{public}s called with null instance->parent_definition, dumping backtrace:%{public}s", buf, 0x16u);
        }
        goto LABEL_79;
      }
      if (!*(void *)(v6 + 80))
      {
        unint64_t v34 = __nwlog_obj();
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_get_path";
        __int16 v29 = (char *)_os_log_send_and_compose_impl();

        type[0] = OS_LOG_TYPE_ERROR;
        os_log_type_t v73 = OS_LOG_TYPE_DEFAULT;
        if (!__nwlog_fault(v29, type, &v73)) {
          goto LABEL_154;
        }
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          id v30 = __nwlog_obj();
          os_log_type_t v35 = type[0];
          if (os_log_type_enabled(v30, type[0]))
          {
            *(_DWORD *)int buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_protocol_implementation_get_path";
            _os_log_impl(&dword_1830D4000, v30, v35, "%{public}s called with null instance->parent_definition->extended_state", buf, 0xCu);
          }
          goto LABEL_153;
        }
        if (v73 == OS_LOG_TYPE_DEFAULT)
        {
          id v30 = __nwlog_obj();
          os_log_type_t v58 = type[0];
          if (os_log_type_enabled(v30, type[0]))
          {
            *(_DWORD *)int buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_protocol_implementation_get_path";
            _os_log_impl(&dword_1830D4000, v30, v58, "%{public}s called with null instance->parent_definition->extended_state, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_153;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        id v30 = __nwlog_obj();
        os_log_type_t v45 = type[0];
        BOOL v46 = os_log_type_enabled(v30, type[0]);
        if (!backtrace_string)
        {
          if (v46)
          {
            *(_DWORD *)int buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_protocol_implementation_get_path";
            _os_log_impl(&dword_1830D4000, v30, v45, "%{public}s called with null instance->parent_definition->extended_state, no backtrace", buf, 0xCu);
          }
          goto LABEL_153;
        }
        if (v46)
        {
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_implementation_get_path";
          __int16 v75 = 2082;
          BOOL v76 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v30, v45, "%{public}s called with null instance->parent_definition->extended_state, dumping backtrace:%{public}s", buf, 0x16u);
        }
        goto LABEL_79;
      }
      BOOL v7 = (void *)*((void *)v4 + 36);
      if (v7)
      {
        id v8 = v7;
LABEL_9:

        goto LABEL_10;
      }
      if (*(_DWORD *)(v6 + 64) == 3)
      {
        some_uint64_t node = nw_hash_table_get_some_node(*((os_unfair_lock_s **)v4 + 29));
        if (some_node)
        {
          size_t v11 = *(void **)(some_node + 16);
          if (v11)
          {
            uint64_t v12 = v11[3];
            if (v12)
            {
              uint64_t v13 = *(void (**)(void))(v12 + 120);
              if (v13)
              {
                __int16 v14 = (void *)v11[5];
                if (v14 == &nw_protocol_ref_counted_handle)
                {
                  uint64_t v23 = v11[11];
                  if (v23) {
                    v11[11] = v23 + 1;
                  }
                  char v15 = -1;
                }
                else
                {
                  char v15 = 0;
                }
                *(void *)int buf = v11;
                buf[8] = v15;
                v13();
                id v8 = (id)objc_claimAutoreleasedReturnValue();
                if (v14 == &nw_protocol_ref_counted_handle) {
                  nw::release_if_needed<nw_protocol *>((uint64_t *)buf);
                }
                goto LABEL_9;
              }
            }
          }
        }
        else if ((v5[405] & 0x80000000) == 0)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          id v19 = (id)gLogObj;
          if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)int buf = 136446722;
            *(void *)&uint8_t buf[4] = "nw_protocol_implementation_get_path";
            __int16 v75 = 2082;
            BOOL v76 = v5 + 407;
            __int16 v77 = 2080;
            BOOL v78 = " ";
            _os_log_impl(&dword_1830D4000, v19, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sFailed to find any flow", buf, 0x20u);
          }
        }
        goto LABEL_27;
      }
      default_input_handler = a1->default_input_handler;
      if (default_input_handler)
      {
        uint64_t v17 = default_input_handler->handle;
        if (v17 == &nw_protocol_ref_counted_handle)
        {
          callbacks = default_input_handler[1].callbacks;
          if (callbacks) {
            default_input_handler[1].callbacks = (nw_protocol_callbacks *)((char *)&callbacks->add_input_handler + 1);
          }
          char v18 = -1;
        }
        else
        {
          char v18 = 0;
        }
        *(void *)os_log_type_t type = default_input_handler;
        char v72 = v18;
        uint64_t v21 = default_input_handler->callbacks;
        if (v21)
        {
          get_path = (void (*)(nw_protocol *))v21->get_path;
          if (get_path)
          {
            get_path(default_input_handler);
            id v8 = (id)objc_claimAutoreleasedReturnValue();
            if (v17 != &nw_protocol_ref_counted_handle) {
              goto LABEL_9;
            }
LABEL_34:
            nw::release_if_needed<nw_protocol *>((uint64_t *)type);
            goto LABEL_9;
          }
        }
        uint64_t v47 = __nwlog_obj();
        name = default_input_handler->identifier->name;
        *(_DWORD *)int buf = 136446722;
        *(void *)&uint8_t buf[4] = "__nw_protocol_get_path";
        if (!name) {
          name = "invalid";
        }
        __int16 v75 = 2082;
        BOOL v76 = (char *)name;
        __int16 v77 = 2048;
        BOOL v69 = default_input_handler;
        BOOL v78 = (const char *)default_input_handler;
        uint64_t v49 = (char *)_os_log_send_and_compose_impl();

        os_log_type_t v73 = OS_LOG_TYPE_ERROR;
        char v70 = 0;
        if (__nwlog_fault(v49, &v73, &v70))
        {
          if (v73 == OS_LOG_TYPE_FAULT)
          {
            unint64_t v50 = __nwlog_obj();
            os_log_type_t v51 = v73;
            if (os_log_type_enabled(v50, v73))
            {
              BOOL v52 = v69->identifier->name;
              if (!v52) {
                BOOL v52 = "invalid";
              }
              *(_DWORD *)int buf = 136446722;
              *(void *)&uint8_t buf[4] = "__nw_protocol_get_path";
              __int16 v75 = 2082;
              BOOL v76 = (char *)v52;
              __int16 v77 = 2048;
              BOOL v78 = (const char *)v69;
              _os_log_impl(&dword_1830D4000, v50, v51, "%{public}s protocol %{public}s (%p) has invalid get_path callback", buf, 0x20u);
            }
LABEL_143:

            goto LABEL_144;
          }
          if (!v70)
          {
            unint64_t v50 = __nwlog_obj();
            os_log_type_t v65 = v73;
            if (os_log_type_enabled(v50, v73))
            {
              uint64_t v66 = v69->identifier->name;
              if (!v66) {
                uint64_t v66 = "invalid";
              }
              *(_DWORD *)int buf = 136446722;
              *(void *)&uint8_t buf[4] = "__nw_protocol_get_path";
              __int16 v75 = 2082;
              BOOL v76 = (char *)v66;
              __int16 v77 = 2048;
              BOOL v78 = (const char *)v69;
              _os_log_impl(&dword_1830D4000, v50, v65, "%{public}s protocol %{public}s (%p) has invalid get_path callback, backtrace limit exceeded", buf, 0x20u);
            }
            goto LABEL_143;
          }
          uint64_t v59 = (char *)__nw_create_backtrace_string();
          unint64_t v50 = __nwlog_obj();
          os_log_type_t v60 = v73;
          BOOL v61 = os_log_type_enabled(v50, v73);
          if (!v59)
          {
            if (v61)
            {
              BOOL v67 = v69->identifier->name;
              if (!v67) {
                BOOL v67 = "invalid";
              }
              *(_DWORD *)int buf = 136446722;
              *(void *)&uint8_t buf[4] = "__nw_protocol_get_path";
              __int16 v75 = 2082;
              BOOL v76 = (char *)v67;
              __int16 v77 = 2048;
              BOOL v78 = (const char *)v69;
              _os_log_impl(&dword_1830D4000, v50, v60, "%{public}s protocol %{public}s (%p) has invalid get_path callback, no backtrace", buf, 0x20u);
            }
            goto LABEL_143;
          }
          if (v61)
          {
            unint64_t v62 = v69->identifier->name;
            if (!v62) {
              unint64_t v62 = "invalid";
            }
            *(_DWORD *)int buf = 136446978;
            *(void *)&uint8_t buf[4] = "__nw_protocol_get_path";
            __int16 v75 = 2082;
            BOOL v76 = (char *)v62;
            __int16 v77 = 2048;
            BOOL v78 = (const char *)v69;
            __int16 v79 = 2082;
            os_log_type_t v80 = v59;
            _os_log_impl(&dword_1830D4000, v50, v60, "%{public}s protocol %{public}s (%p) has invalid get_path callback, dumping backtrace:%{public}s", buf, 0x2Au);
          }

          free(v59);
        }
LABEL_144:
        if (v49) {
          free(v49);
        }
        id v8 = 0;
        if (v17 != &nw_protocol_ref_counted_handle) {
          goto LABEL_9;
        }
        goto LABEL_34;
      }
      BOOL v56 = __nwlog_obj();
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "__nw_protocol_get_path";
      __int16 v29 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      os_log_type_t v73 = OS_LOG_TYPE_DEFAULT;
      if (__nwlog_fault(v29, type, &v73))
      {
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          id v30 = __nwlog_obj();
          os_log_type_t v57 = type[0];
          if (os_log_type_enabled(v30, type[0]))
          {
            *(_DWORD *)int buf = 136446210;
            *(void *)&uint8_t buf[4] = "__nw_protocol_get_path";
            _os_log_impl(&dword_1830D4000, v30, v57, "%{public}s called with null protocol", buf, 0xCu);
          }
LABEL_153:

          goto LABEL_154;
        }
        if (v73 == OS_LOG_TYPE_DEFAULT)
        {
          id v30 = __nwlog_obj();
          os_log_type_t v68 = type[0];
          if (os_log_type_enabled(v30, type[0]))
          {
            *(_DWORD *)int buf = 136446210;
            *(void *)&uint8_t buf[4] = "__nw_protocol_get_path";
            _os_log_impl(&dword_1830D4000, v30, v68, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_153;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        id v30 = __nwlog_obj();
        os_log_type_t v63 = type[0];
        BOOL v64 = os_log_type_enabled(v30, type[0]);
        if (!backtrace_string)
        {
          if (v64)
          {
            *(_DWORD *)int buf = 136446210;
            *(void *)&uint8_t buf[4] = "__nw_protocol_get_path";
            _os_log_impl(&dword_1830D4000, v30, v63, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
          }
          goto LABEL_153;
        }
        if (v64)
        {
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "__nw_protocol_get_path";
          __int16 v75 = 2082;
          BOOL v76 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v30, v63, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
LABEL_79:

        free(backtrace_string);
        if (!v29) {
          goto LABEL_27;
        }
        goto LABEL_155;
      }
    }
    else
    {
      uint64_t v28 = __nwlog_obj();
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_implementation_get_path";
      __int16 v29 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      os_log_type_t v73 = OS_LOG_TYPE_DEFAULT;
      if (!__nwlog_fault(v29, type, &v73)) {
        goto LABEL_154;
      }
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        id v30 = __nwlog_obj();
        os_log_type_t v31 = type[0];
        if (os_log_type_enabled(v30, type[0]))
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_implementation_get_path";
          _os_log_impl(&dword_1830D4000, v30, v31, "%{public}s called with null instance", buf, 0xCu);
        }
        goto LABEL_153;
      }
      if (v73 == OS_LOG_TYPE_DEFAULT)
      {
        id v30 = __nwlog_obj();
        os_log_type_t v54 = type[0];
        if (os_log_type_enabled(v30, type[0]))
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_implementation_get_path";
          _os_log_impl(&dword_1830D4000, v30, v54, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_153;
      }
      uint64_t v39 = (char *)__nw_create_backtrace_string();
      id v30 = __nwlog_obj();
      os_log_type_t v40 = type[0];
      BOOL v41 = os_log_type_enabled(v30, type[0]);
      if (!v39)
      {
        if (v41)
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_implementation_get_path";
          _os_log_impl(&dword_1830D4000, v30, v40, "%{public}s called with null instance, no backtrace", buf, 0xCu);
        }
        goto LABEL_153;
      }
      if (v41)
      {
        *(_DWORD *)int buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_get_path";
        __int16 v75 = 2082;
        BOOL v76 = v39;
        _os_log_impl(&dword_1830D4000, v30, v40, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(v39);
    }
LABEL_154:
    if (!v29)
    {
LABEL_27:
      id v8 = 0;
      goto LABEL_9;
    }
LABEL_155:
    free(v29);
    goto LABEL_27;
  }
  int v24 = __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_protocol_implementation_get_path";
  int v25 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  os_log_type_t v73 = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v25, type, &v73))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      unint64_t v26 = __nwlog_obj();
      os_log_type_t v27 = type[0];
      if (os_log_type_enabled(v26, type[0]))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_get_path";
        _os_log_impl(&dword_1830D4000, v26, v27, "%{public}s called with null protocol", buf, 0xCu);
      }
    }
    else if (v73)
    {
      os_log_type_t v36 = (char *)__nw_create_backtrace_string();
      unint64_t v26 = __nwlog_obj();
      os_log_type_t v37 = type[0];
      BOOL v38 = os_log_type_enabled(v26, type[0]);
      if (v36)
      {
        if (v38)
        {
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_implementation_get_path";
          __int16 v75 = 2082;
          BOOL v76 = v36;
          _os_log_impl(&dword_1830D4000, v26, v37, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v36);
        goto LABEL_117;
      }
      if (v38)
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_get_path";
        _os_log_impl(&dword_1830D4000, v26, v37, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      unint64_t v26 = __nwlog_obj();
      os_log_type_t v53 = type[0];
      if (os_log_type_enabled(v26, type[0]))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_get_path";
        _os_log_impl(&dword_1830D4000, v26, v53, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_117:
  if (v25) {
    free(v25);
  }
  id v8 = 0;
LABEL_10:

  return v8;
}

id nw_protocol_implementation_get_local(nw_protocol *a1)
{
  uint64_t v80 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    handle = a1->handle;
    p_output_handler = &a1[1].output_handler;
    if (handle != &nw_protocol_ref_counted_handle) {
      p_output_handler = 0;
    }
    os_log_type_t v4 = p_output_handler;
    id v5 = v4;
    if (handle == &nw_protocol_ref_counted_handle)
    {
      uint64_t v6 = *((void *)v4 + 1);
      if (!v6)
      {
        os_log_type_t v31 = __nwlog_obj();
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_get_local";
        uint64_t v28 = (char *)_os_log_send_and_compose_impl();

        type[0] = OS_LOG_TYPE_ERROR;
        os_log_type_t v72 = OS_LOG_TYPE_DEFAULT;
        if (!__nwlog_fault(v28, type, &v72)) {
          goto LABEL_154;
        }
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          __int16 v29 = __nwlog_obj();
          os_log_type_t v32 = type[0];
          if (os_log_type_enabled(v29, type[0]))
          {
            *(_DWORD *)int buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_protocol_implementation_get_local";
            _os_log_impl(&dword_1830D4000, v29, v32, "%{public}s called with null instance->parent_definition", buf, 0xCu);
          }
          goto LABEL_153;
        }
        if (v72 == OS_LOG_TYPE_DEFAULT)
        {
          __int16 v29 = __nwlog_obj();
          os_log_type_t v54 = type[0];
          if (os_log_type_enabled(v29, type[0]))
          {
            *(_DWORD *)int buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_protocol_implementation_get_local";
            _os_log_impl(&dword_1830D4000, v29, v54, "%{public}s called with null instance->parent_definition, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_153;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        __int16 v29 = __nwlog_obj();
        os_log_type_t v42 = type[0];
        BOOL v43 = os_log_type_enabled(v29, type[0]);
        if (!backtrace_string)
        {
          if (v43)
          {
            *(_DWORD *)int buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_protocol_implementation_get_local";
            _os_log_impl(&dword_1830D4000, v29, v42, "%{public}s called with null instance->parent_definition, no backtrace", buf, 0xCu);
          }
          goto LABEL_153;
        }
        if (v43)
        {
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_implementation_get_local";
          __int16 v74 = 2082;
          __int16 v75 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v29, v42, "%{public}s called with null instance->parent_definition, dumping backtrace:%{public}s", buf, 0x16u);
        }
        goto LABEL_79;
      }
      if (!*(void *)(v6 + 80))
      {
        os_log_type_t v33 = __nwlog_obj();
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_get_local";
        uint64_t v28 = (char *)_os_log_send_and_compose_impl();

        type[0] = OS_LOG_TYPE_ERROR;
        os_log_type_t v72 = OS_LOG_TYPE_DEFAULT;
        if (!__nwlog_fault(v28, type, &v72)) {
          goto LABEL_154;
        }
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          __int16 v29 = __nwlog_obj();
          os_log_type_t v34 = type[0];
          if (os_log_type_enabled(v29, type[0]))
          {
            *(_DWORD *)int buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_protocol_implementation_get_local";
            _os_log_impl(&dword_1830D4000, v29, v34, "%{public}s called with null instance->parent_definition->extended_state", buf, 0xCu);
          }
          goto LABEL_153;
        }
        if (v72 == OS_LOG_TYPE_DEFAULT)
        {
          __int16 v29 = __nwlog_obj();
          os_log_type_t v57 = type[0];
          if (os_log_type_enabled(v29, type[0]))
          {
            *(_DWORD *)int buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_protocol_implementation_get_local";
            _os_log_impl(&dword_1830D4000, v29, v57, "%{public}s called with null instance->parent_definition->extended_state, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_153;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        __int16 v29 = __nwlog_obj();
        os_log_type_t v44 = type[0];
        BOOL v45 = os_log_type_enabled(v29, type[0]);
        if (!backtrace_string)
        {
          if (v45)
          {
            *(_DWORD *)int buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_protocol_implementation_get_local";
            _os_log_impl(&dword_1830D4000, v29, v44, "%{public}s called with null instance->parent_definition->extended_state, no backtrace", buf, 0xCu);
          }
          goto LABEL_153;
        }
        if (v45)
        {
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_implementation_get_local";
          __int16 v74 = 2082;
          __int16 v75 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v29, v44, "%{public}s called with null instance->parent_definition->extended_state, dumping backtrace:%{public}s", buf, 0x16u);
        }
        goto LABEL_79;
      }
      if (*((void *)v4 + 40))
      {
        id v7 = *((id *)v4 + 42);
LABEL_9:

        goto LABEL_10;
      }
      if (*(_DWORD *)(v6 + 64) == 3)
      {
        some_uint64_t node = nw_hash_table_get_some_node(*((os_unfair_lock_s **)v4 + 29));
        if (some_node)
        {
          char v10 = *(void **)(some_node + 16);
          if (v10)
          {
            uint64_t v11 = v10[3];
            if (v11)
            {
              uint64_t v12 = *(void (**)(void))(v11 + 128);
              if (v12)
              {
                uint64_t v13 = (void *)v10[5];
                if (v13 == &nw_protocol_ref_counted_handle)
                {
                  uint64_t v22 = v10[11];
                  if (v22) {
                    v10[11] = v22 + 1;
                  }
                  char v14 = -1;
                }
                else
                {
                  char v14 = 0;
                }
                *(void *)int buf = v10;
                buf[8] = v14;
                v12();
                id v7 = (id)objc_claimAutoreleasedReturnValue();
                if (v13 == &nw_protocol_ref_counted_handle) {
                  nw::release_if_needed<nw_protocol *>((uint64_t *)buf);
                }
                goto LABEL_9;
              }
            }
          }
        }
        else if ((v5[405] & 0x80000000) == 0)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          char v18 = (id)gLogObj;
          if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)int buf = 136446722;
            *(void *)&uint8_t buf[4] = "nw_protocol_implementation_get_local";
            __int16 v74 = 2082;
            __int16 v75 = v5 + 407;
            __int16 v76 = 2080;
            __int16 v77 = " ";
            _os_log_impl(&dword_1830D4000, v18, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sFailed to find any flow", buf, 0x20u);
          }
        }
        goto LABEL_27;
      }
      default_input_handler = a1->default_input_handler;
      if (default_input_handler)
      {
        uint64_t v16 = default_input_handler->handle;
        if (v16 == &nw_protocol_ref_counted_handle)
        {
          callbacks = default_input_handler[1].callbacks;
          if (callbacks) {
            default_input_handler[1].callbacks = (nw_protocol_callbacks *)((char *)&callbacks->add_input_handler + 1);
          }
          char v17 = -1;
        }
        else
        {
          char v17 = 0;
        }
        *(void *)os_log_type_t type = default_input_handler;
        char v71 = v17;
        uint64_t v20 = default_input_handler->callbacks;
        if (v20)
        {
          get_local_endpoint = (void (*)(nw_protocol *))v20->get_local_endpoint;
          if (get_local_endpoint)
          {
            get_local_endpoint(default_input_handler);
            id v7 = (id)objc_claimAutoreleasedReturnValue();
            if (v16 != &nw_protocol_ref_counted_handle) {
              goto LABEL_9;
            }
LABEL_34:
            nw::release_if_needed<nw_protocol *>((uint64_t *)type);
            goto LABEL_9;
          }
        }
        BOOL v46 = __nwlog_obj();
        name = default_input_handler->identifier->name;
        *(_DWORD *)int buf = 136446722;
        *(void *)&uint8_t buf[4] = "__nw_protocol_get_local_endpoint";
        if (!name) {
          name = "invalid";
        }
        __int16 v74 = 2082;
        __int16 v75 = (char *)name;
        __int16 v76 = 2048;
        os_log_type_t v68 = default_input_handler;
        __int16 v77 = (const char *)default_input_handler;
        uint64_t v48 = (char *)_os_log_send_and_compose_impl();

        os_log_type_t v72 = OS_LOG_TYPE_ERROR;
        char v69 = 0;
        if (__nwlog_fault(v48, &v72, &v69))
        {
          if (v72 == OS_LOG_TYPE_FAULT)
          {
            uint64_t v49 = __nwlog_obj();
            os_log_type_t v50 = v72;
            if (os_log_type_enabled(v49, v72))
            {
              os_log_type_t v51 = v68->identifier->name;
              if (!v51) {
                os_log_type_t v51 = "invalid";
              }
              *(_DWORD *)int buf = 136446722;
              *(void *)&uint8_t buf[4] = "__nw_protocol_get_local_endpoint";
              __int16 v74 = 2082;
              __int16 v75 = (char *)v51;
              __int16 v76 = 2048;
              __int16 v77 = (const char *)v68;
              _os_log_impl(&dword_1830D4000, v49, v50, "%{public}s protocol %{public}s (%p) has invalid get_local_endpoint callback", buf, 0x20u);
            }
LABEL_143:

            goto LABEL_144;
          }
          if (!v69)
          {
            uint64_t v49 = __nwlog_obj();
            os_log_type_t v64 = v72;
            if (os_log_type_enabled(v49, v72))
            {
              os_log_type_t v65 = v68->identifier->name;
              if (!v65) {
                os_log_type_t v65 = "invalid";
              }
              *(_DWORD *)int buf = 136446722;
              *(void *)&uint8_t buf[4] = "__nw_protocol_get_local_endpoint";
              __int16 v74 = 2082;
              __int16 v75 = (char *)v65;
              __int16 v76 = 2048;
              __int16 v77 = (const char *)v68;
              _os_log_impl(&dword_1830D4000, v49, v64, "%{public}s protocol %{public}s (%p) has invalid get_local_endpoint callback, backtrace limit exceeded", buf, 0x20u);
            }
            goto LABEL_143;
          }
          os_log_type_t v58 = (char *)__nw_create_backtrace_string();
          uint64_t v49 = __nwlog_obj();
          os_log_type_t v59 = v72;
          BOOL v60 = os_log_type_enabled(v49, v72);
          if (!v58)
          {
            if (v60)
            {
              uint64_t v66 = v68->identifier->name;
              if (!v66) {
                uint64_t v66 = "invalid";
              }
              *(_DWORD *)int buf = 136446722;
              *(void *)&uint8_t buf[4] = "__nw_protocol_get_local_endpoint";
              __int16 v74 = 2082;
              __int16 v75 = (char *)v66;
              __int16 v76 = 2048;
              __int16 v77 = (const char *)v68;
              _os_log_impl(&dword_1830D4000, v49, v59, "%{public}s protocol %{public}s (%p) has invalid get_local_endpoint callback, no backtrace", buf, 0x20u);
            }
            goto LABEL_143;
          }
          if (v60)
          {
            BOOL v61 = v68->identifier->name;
            if (!v61) {
              BOOL v61 = "invalid";
            }
            *(_DWORD *)int buf = 136446978;
            *(void *)&uint8_t buf[4] = "__nw_protocol_get_local_endpoint";
            __int16 v74 = 2082;
            __int16 v75 = (char *)v61;
            __int16 v76 = 2048;
            __int16 v77 = (const char *)v68;
            __int16 v78 = 2082;
            __int16 v79 = v58;
            _os_log_impl(&dword_1830D4000, v49, v59, "%{public}s protocol %{public}s (%p) has invalid get_local_endpoint callback, dumping backtrace:%{public}s", buf, 0x2Au);
          }

          free(v58);
        }
LABEL_144:
        if (v48) {
          free(v48);
        }
        id v7 = 0;
        if (v16 != &nw_protocol_ref_counted_handle) {
          goto LABEL_9;
        }
        goto LABEL_34;
      }
      os_log_type_t v55 = __nwlog_obj();
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "__nw_protocol_get_local_endpoint";
      uint64_t v28 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      os_log_type_t v72 = OS_LOG_TYPE_DEFAULT;
      if (__nwlog_fault(v28, type, &v72))
      {
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          __int16 v29 = __nwlog_obj();
          os_log_type_t v56 = type[0];
          if (os_log_type_enabled(v29, type[0]))
          {
            *(_DWORD *)int buf = 136446210;
            *(void *)&uint8_t buf[4] = "__nw_protocol_get_local_endpoint";
            _os_log_impl(&dword_1830D4000, v29, v56, "%{public}s called with null protocol", buf, 0xCu);
          }
LABEL_153:

          goto LABEL_154;
        }
        if (v72 == OS_LOG_TYPE_DEFAULT)
        {
          __int16 v29 = __nwlog_obj();
          os_log_type_t v67 = type[0];
          if (os_log_type_enabled(v29, type[0]))
          {
            *(_DWORD *)int buf = 136446210;
            *(void *)&uint8_t buf[4] = "__nw_protocol_get_local_endpoint";
            _os_log_impl(&dword_1830D4000, v29, v67, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_153;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        __int16 v29 = __nwlog_obj();
        os_log_type_t v62 = type[0];
        BOOL v63 = os_log_type_enabled(v29, type[0]);
        if (!backtrace_string)
        {
          if (v63)
          {
            *(_DWORD *)int buf = 136446210;
            *(void *)&uint8_t buf[4] = "__nw_protocol_get_local_endpoint";
            _os_log_impl(&dword_1830D4000, v29, v62, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
          }
          goto LABEL_153;
        }
        if (v63)
        {
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "__nw_protocol_get_local_endpoint";
          __int16 v74 = 2082;
          __int16 v75 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v29, v62, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
LABEL_79:

        free(backtrace_string);
        if (!v28) {
          goto LABEL_27;
        }
        goto LABEL_155;
      }
    }
    else
    {
      os_log_type_t v27 = __nwlog_obj();
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_implementation_get_local";
      uint64_t v28 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      os_log_type_t v72 = OS_LOG_TYPE_DEFAULT;
      if (!__nwlog_fault(v28, type, &v72)) {
        goto LABEL_154;
      }
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __int16 v29 = __nwlog_obj();
        os_log_type_t v30 = type[0];
        if (os_log_type_enabled(v29, type[0]))
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_implementation_get_local";
          _os_log_impl(&dword_1830D4000, v29, v30, "%{public}s called with null instance", buf, 0xCu);
        }
        goto LABEL_153;
      }
      if (v72 == OS_LOG_TYPE_DEFAULT)
      {
        __int16 v29 = __nwlog_obj();
        os_log_type_t v53 = type[0];
        if (os_log_type_enabled(v29, type[0]))
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_implementation_get_local";
          _os_log_impl(&dword_1830D4000, v29, v53, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_153;
      }
      BOOL v38 = (char *)__nw_create_backtrace_string();
      __int16 v29 = __nwlog_obj();
      os_log_type_t v39 = type[0];
      BOOL v40 = os_log_type_enabled(v29, type[0]);
      if (!v38)
      {
        if (v40)
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_implementation_get_local";
          _os_log_impl(&dword_1830D4000, v29, v39, "%{public}s called with null instance, no backtrace", buf, 0xCu);
        }
        goto LABEL_153;
      }
      if (v40)
      {
        *(_DWORD *)int buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_get_local";
        __int16 v74 = 2082;
        __int16 v75 = v38;
        _os_log_impl(&dword_1830D4000, v29, v39, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(v38);
    }
LABEL_154:
    if (!v28)
    {
LABEL_27:
      id v7 = 0;
      goto LABEL_9;
    }
LABEL_155:
    free(v28);
    goto LABEL_27;
  }
  uint64_t v23 = __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_protocol_implementation_get_local";
  int v24 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  os_log_type_t v72 = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v24, type, &v72))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      int v25 = __nwlog_obj();
      os_log_type_t v26 = type[0];
      if (os_log_type_enabled(v25, type[0]))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_get_local";
        _os_log_impl(&dword_1830D4000, v25, v26, "%{public}s called with null protocol", buf, 0xCu);
      }
    }
    else if (v72)
    {
      os_log_type_t v35 = (char *)__nw_create_backtrace_string();
      int v25 = __nwlog_obj();
      os_log_type_t v36 = type[0];
      BOOL v37 = os_log_type_enabled(v25, type[0]);
      if (v35)
      {
        if (v37)
        {
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_implementation_get_local";
          __int16 v74 = 2082;
          __int16 v75 = v35;
          _os_log_impl(&dword_1830D4000, v25, v36, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v35);
        goto LABEL_117;
      }
      if (v37)
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_get_local";
        _os_log_impl(&dword_1830D4000, v25, v36, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int v25 = __nwlog_obj();
      os_log_type_t v52 = type[0];
      if (os_log_type_enabled(v25, type[0]))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_get_local";
        _os_log_impl(&dword_1830D4000, v25, v52, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_117:
  if (v24) {
    free(v24);
  }
  id v7 = 0;
LABEL_10:

  return v7;
}

BOOL nw_udp_options_get_prefer_no_checksum(void *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (nw_protocol_options_is_udp(v1))
  {
    *(void *)int buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000;
    char v16 = 0;
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __nw_udp_options_get_prefer_no_checksum_block_invoke;
    v12[3] = &unk_1E5248E90;
    v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    BOOL v2 = *(unsigned char *)(*(void *)&buf[8] + 24) != 0;
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  os_log_type_t v4 = __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_udp_options_get_prefer_no_checksum";
  id v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_udp_options_get_prefer_no_checksum";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null nw_protocol_options_is_udp(options)", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_udp_options_get_prefer_no_checksum";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_udp(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_udp_options_get_prefer_no_checksum";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null nw_protocol_options_is_udp(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_udp_options_get_prefer_no_checksum";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null nw_protocol_options_is_udp(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
  BOOL v2 = 0;
LABEL_3:

  return v2;
}

void sub_1833FE698(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

void __nw_interface_get_loopback_index_block_invoke()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  nw_interface_get_loopback_index::index = if_nametoindex("lo0");
  if (!nw_interface_get_loopback_index::index)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v0 = (id)gLogObj;
    if (os_log_type_enabled(v0, OS_LOG_TYPE_ERROR))
    {
      int v1 = 136446210;
      BOOL v2 = "nw_interface_get_loopback_index_block_invoke";
      _os_log_impl(&dword_1830D4000, v0, OS_LOG_TYPE_ERROR, "%{public}s Unable to determine interface index for lo0, using 1", (uint8_t *)&v1, 0xCu);
    }

    nw_interface_get_loopback_index::index = 1;
  }
}

uint64_t __nwlog_get_sensitive_redacted_block_invoke()
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  strcpy(__s2, "not redacted");
  char __s1 = 0;
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  int v25 = 136642819;
  os_log_type_t v26 = __s2;
  uint64_t v0 = (char *)_os_log_send_and_compose_impl();
  if (v0 == &__s1)
  {
LABEL_14:
    uint64_t result = strncmp(&__s1, __s2, 0xDuLL);
    nwlog_get_sensitive_redacted::sensitiveRedacted = result != 0;
    return result;
  }
  int v1 = v0;
  if (v0)
  {
LABEL_3:
    int v2 = __s1;
    char *v1 = __s1;
    if (v2)
    {
      int v3 = v15;
      v1[1] = v15;
      if (v3)
      {
        int v4 = v16;
        v1[2] = v16;
        if (v4)
        {
          int v5 = v17;
          v1[3] = v17;
          if (v5)
          {
            int v6 = v18;
            v1[4] = v18;
            if (v6)
            {
              int v7 = v19;
              v1[5] = v19;
              if (v7)
              {
                int v8 = v20;
                v1[6] = v20;
                if (v8)
                {
                  int v9 = v21;
                  v1[7] = v21;
                  if (v9)
                  {
                    int v10 = v22;
                    v1[8] = v22;
                    if (v10) {
                      v1[9] = v23;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    free(v1);
    goto LABEL_14;
  }
  uint64_t v12 = __nwlog_obj();
  os_log_type_enabled(v12, OS_LOG_TYPE_ERROR);
  int v25 = 136446210;
  os_log_type_t v26 = "_strict_strlcpy";
  char v13 = (void *)_os_log_send_and_compose_impl();
  uint64_t result = __nwlog_abort((uint64_t)v13);
  if (!result)
  {
    free(v13);
    goto LABEL_3;
  }
  __break(1u);
  return result;
}

void __nw_mem_buffer_manager_initialize_block_invoke()
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  unsigned int int64_with_default = networkd_settings_get_int64_with_default((const char *)nw_setting_slab_allocator_segment_size, 0x4000);
  if (int64_with_default <= 0x4000) {
    int v1 = 0x4000;
  }
  else {
    int v1 = int64_with_default;
  }
  unsigned int v2 = -v1 & 0xFFFFC000;
  unsigned int v3 = -v2;
  nw_mem_seg_size_t size = -v2;
  if (!v2)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
    *(_DWORD *)int buf = 136446466;
    int v24 = "nw_mem_region_init";
    __int16 v25 = 2082;
    *(void *)os_log_type_t v26 = "VERIFY nw_mem_seg_size != 0 && (nw_mem_seg_size % NW_MEM_PAGE_SIZE) == 0 failed";
    unsigned __int8 v18 = (void *)_os_log_send_and_compose_impl();
    if (__nwlog_abort((uint64_t)v18)) {
      goto LABEL_42;
    }
    free(v18);
    unsigned int v3 = nw_mem_seg_size;
  }
  unsigned int v4 = networkd_settings_get_int64_with_default((const char *)nw_setting_slab_allocator_buffer_segment_size, v3);
  int v5 = nw_mem_seg_size;
  if (nw_mem_seg_size <= v4) {
    int v5 = v4;
  }
  nw_mem_buf_seg_size_t size = -(-v5 & 0xFFFFC000);
  nw_mem_seg_min_buf_cnt = networkd_settings_get_int64_with_default((const char *)nw_setting_slab_allocator_buffer_count, 8);
  nw_mem_batch_seg_size_t count = networkd_settings_get_int64_with_default((const char *)nw_setting_slab_allocator_batch_seg_count, 8);
  if (gLogDatapath)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unsigned __int8 v19 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)int buf = 136447234;
      int v24 = "nw_mem_region_init";
      __int16 v25 = 1024;
      *(_DWORD *)os_log_type_t v26 = nw_mem_seg_size;
      *(_WORD *)&v26[4] = 1024;
      *(_DWORD *)&v26[6] = nw_mem_buf_seg_size;
      *(_WORD *)uint64_t v27 = 1024;
      *(_DWORD *)&v27[2] = nw_mem_seg_min_buf_cnt;
      LOWORD(v28[0]) = 1024;
      *(_DWORD *)((char *)v28 + 2) = nw_mem_batch_seg_count;
      _os_log_impl(&dword_1830D4000, v19, OS_LOG_TYPE_DEBUG, "%{public}s seg_size %u, buf_seg_size %u buf count %u batch seg count %u", buf, 0x24u);
    }
  }
  nw_mem_region_head = 0;
  qword_1EB267348 = (uint64_t)&nw_mem_region_head;
  if (nw_context_copy_implicit_context::onceToken != -1) {
    dispatch_once(&nw_context_copy_implicit_context::onceToken, &__block_literal_global_18);
  }
  BOOL source = nw_queue_context_create_source((id)nw_context_copy_implicit_context::implicit_context, 2, 3, 0, &__block_literal_global_23235, 0);
  nw_mem_region_update_BOOL source = source;
  if (source)
  {
    uint64_t v7 = source;
    dispatch_time_t v8 = dispatch_time(0x8000000000000000, 13000000000);
    if (*(void *)v7)
    {
      dispatch_source_set_timer(*(dispatch_source_t *)v7, v8, 0xFFFFFFFFFFFFFFFFLL, 0xF4240uLL);
    }
    else
    {
      *(void *)(v7 + 32) = v8;
      *(void *)(v7 + 40) = -1;
      if (*(unsigned char *)(v7 + 48) && *(unsigned char *)(v7 + 49)) {
        nw_queue_source_run_timer(v7);
      }
    }
    nw_queue_activate_source(nw_mem_region_update_source);
  }
  else
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
    *(_DWORD *)int buf = 136446210;
    int v24 = "nw_mem_region_init";
    int v9 = (void *)_os_log_send_and_compose_impl();
    if (__nwlog_abort((uint64_t)v9)) {
      goto LABEL_42;
    }
    free(v9);
  }
  LOBYTE(nw_mem_debug) = networkd_settings_get_int64_with_default((const char *)nw_setting_slab_allocator_debug, nw_mem_debug) & 3;
  nw_mem_debug = nw_mem_debug;
  nw_mem_dump_slab_stats = networkd_settings_get_BOOL((const char *)nw_setting_slab_allocator_dump_stats_enable);
  nw_mem_cache_head = 0;
  qword_1EB267328 = (uint64_t)&nw_mem_cache_head;
  if (dword_1EB266C3C < 128
    || (uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)dword_1EB266C3C), v10.i16[0] = vaddlv_u8(v10), v10.i32[0] >= 2u))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
    *(_DWORD *)int buf = 136446466;
    int v24 = "nw_mem_cache_init";
    __int16 v25 = 1024;
    *(_DWORD *)os_log_type_t v26 = dword_1EB266C3C;
    os_log_type_t v11 = (void *)_os_log_send_and_compose_impl();
    if (__nwlog_abort((uint64_t)v11)) {
      goto LABEL_42;
    }
    free(v11);
  }
  snprintf(byte_1EB266C50, 0x40uLL, "%s_mem_mg_%d", "NWSlab", nw_mem_magtype);
  if (nw_mem_magtype > nw_mem_cache_magsize_max) {
    nw_mem_cache_magsize_max = nw_mem_magtype;
  }
  os_unfair_lock_lock((os_unfair_lock_t)&nw_mem_cache_lock);
  uint64_t v13 = nw_mem_cache_head;
  if (nw_mem_cache_head)
  {
    *(void *)&long long v12 = 136446978;
    do
    {
      if ((*(unsigned char *)(v13 + 176) & 1) == 0)
      {
        *(_DWORD *)(v13 + 560) = **(_DWORD **)(v13 + 336);
        if (gLogDatapath)
        {
          long long v22 = v12;
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          log = gLogObj;
          BOOL v14 = os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG);
          long long v12 = v22;
          if (v14)
          {
            uint64_t v15 = *(void *)(v13 + 232);
            int v16 = *(_DWORD *)(v13 + 560);
            *(_DWORD *)int buf = v22;
            int v24 = "nw_mem_cache_magazine_enable";
            __int16 v25 = 2048;
            *(void *)os_log_type_t v26 = v13;
            *(_WORD *)&v26[8] = 1024;
            *(_DWORD *)uint64_t v27 = v15;
            *(_WORD *)&v27[4] = 1024;
            v28[0] = v16;
            _os_log_impl(&dword_1830D4000, log, OS_LOG_TYPE_DEBUG, "%{public}s nwm %p chunksize %u magsize %d", buf, 0x22u);
            long long v12 = v22;
          }
        }
      }
      uint64_t v13 = *(void *)(v13 + 80);
    }
    while (v13);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&nw_mem_cache_lock);
  nw_mem_cache_ready = 1;
  if (nw_mem_dump_slab_stats) {
    atexit(nw_mem_cache_stats_dump);
  }
  zone = malloc_create_zone((((dword_1EB266C3C + 8 * nw_mem_magtype) << 9) + 556288), 0);
  g_slab_zone = (uint64_t)zone;
  if (zone) {
    goto LABEL_32;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
  *(_DWORD *)int buf = 136446210;
  int v24 = "nw_mem_allocate_zone";
  unsigned __int8 v20 = (void *)_os_log_send_and_compose_impl();
  if (!__nwlog_abort((uint64_t)v20))
  {
    free(v20);
    zone = (malloc_zone_t *)g_slab_zone;
LABEL_32:
    malloc_set_zone_name(zone, "NWMallocZone");
    return;
  }
LABEL_42:
  __break(1u);
}

uint64_t nw_settings_get_unified_http_enabled()
{
  uint64_t v0 = (const char *)nw_setting_enable_unified_http;
  networkd_settings_init();
  if (!sCachedSettings) {
    return 1;
  }
  pthread_mutex_lock(&sSettingsMutex);
  int v1 = (void *)sCachedSettings;
  if (!sCachedSettings) {
    goto LABEL_7;
  }
  Class Class = object_getClass((id)sCachedSettings);
  BOOL v3 = 1;
  if (!v0) {
    goto LABEL_8;
  }
  if (Class != (Class)MEMORY[0x1E4F14590]) {
    goto LABEL_8;
  }
  xpc_object_t value = xpc_dictionary_get_value(v1, v0);
  if (!value) {
    goto LABEL_8;
  }
  int v5 = value;
  if (object_getClass(value) == (Class)MEMORY[0x1E4F14570]) {
    BOOL v3 = xpc_BOOL_get_value(v5);
  }
  else {
LABEL_7:
  }
    BOOL v3 = 1;
LABEL_8:
  pthread_mutex_unlock(&sSettingsMutex);
  return v3;
}

void sub_1833FF2A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_link_get_local_congestion_info(_DWORD *a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    BOOL v3 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    unsigned __int8 v19 = "nw_link_get_local_congestion_info";
    unsigned int v4 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v16 = 0;
    if (!__nwlog_fault(v4, &type, &v16)) {
      goto LABEL_48;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v16)
      {
        int v5 = __nwlog_obj();
        os_log_type_t v6 = type;
        if (os_log_type_enabled(v5, type))
        {
          *(_DWORD *)int buf = 136446210;
          unsigned __int8 v19 = "nw_link_get_local_congestion_info";
          uint64_t v7 = "%{public}s called with null link_congestion_info, backtrace limit exceeded";
          goto LABEL_46;
        }
        goto LABEL_47;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      BOOL v11 = os_log_type_enabled(v5, type);
      if (!backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446210;
          unsigned __int8 v19 = "nw_link_get_local_congestion_info";
          uint64_t v7 = "%{public}s called with null link_congestion_info, no backtrace";
          goto LABEL_46;
        }
        goto LABEL_47;
      }
      if (v11)
      {
        *(_DWORD *)int buf = 136446466;
        unsigned __int8 v19 = "nw_link_get_local_congestion_info";
        __int16 v20 = 2082;
        unsigned __int8 v21 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s called with null link_congestion_info, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
      goto LABEL_48;
    }
    int v5 = __nwlog_obj();
    os_log_type_t v6 = type;
    if (!os_log_type_enabled(v5, type)) {
      goto LABEL_47;
    }
    *(_DWORD *)int buf = 136446210;
    unsigned __int8 v19 = "nw_link_get_local_congestion_info";
    uint64_t v7 = "%{public}s called with null link_congestion_info";
LABEL_46:
    _os_log_impl(&dword_1830D4000, v5, v6, v7, buf, 0xCu);
    goto LABEL_47;
  }
  if (a2)
  {
    if (a3)
    {
      *a2 = *a1;
      *a3 = a1[1];
      return;
    }
    int v9 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    unsigned __int8 v19 = "nw_link_get_local_congestion_info";
    unsigned int v4 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v16 = 0;
    if (__nwlog_fault(v4, &type, &v16))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        int v5 = __nwlog_obj();
        os_log_type_t v6 = type;
        if (os_log_type_enabled(v5, type))
        {
          *(_DWORD *)int buf = 136446210;
          unsigned __int8 v19 = "nw_link_get_local_congestion_info";
          uint64_t v7 = "%{public}s called with null pkt_count";
          goto LABEL_46;
        }
LABEL_47:

        goto LABEL_48;
      }
      if (!v16)
      {
        int v5 = __nwlog_obj();
        os_log_type_t v6 = type;
        if (os_log_type_enabled(v5, type))
        {
          *(_DWORD *)int buf = 136446210;
          unsigned __int8 v19 = "nw_link_get_local_congestion_info";
          uint64_t v7 = "%{public}s called with null pkt_count, backtrace limit exceeded";
          goto LABEL_46;
        }
        goto LABEL_47;
      }
      long long v12 = (char *)__nw_create_backtrace_string();
      int v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      BOOL v15 = os_log_type_enabled(v5, type);
      if (!v12)
      {
        if (v15)
        {
          *(_DWORD *)int buf = 136446210;
          unsigned __int8 v19 = "nw_link_get_local_congestion_info";
          uint64_t v7 = "%{public}s called with null pkt_count, no backtrace";
          goto LABEL_46;
        }
        goto LABEL_47;
      }
      if (v15)
      {
        *(_DWORD *)int buf = 136446466;
        unsigned __int8 v19 = "nw_link_get_local_congestion_info";
        __int16 v20 = 2082;
        unsigned __int8 v21 = v12;
        BOOL v14 = "%{public}s called with null pkt_count, dumping backtrace:%{public}s";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
LABEL_48:
    if (v4) {
      goto LABEL_49;
    }
    return;
  }
  dispatch_time_t v8 = __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  unsigned __int8 v19 = "nw_link_get_local_congestion_info";
  unsigned int v4 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (!__nwlog_fault(v4, &type, &v16)) {
    goto LABEL_48;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    int v5 = __nwlog_obj();
    os_log_type_t v6 = type;
    if (!os_log_type_enabled(v5, type)) {
      goto LABEL_47;
    }
    *(_DWORD *)int buf = 136446210;
    unsigned __int8 v19 = "nw_link_get_local_congestion_info";
    uint64_t v7 = "%{public}s called with null ce_count";
    goto LABEL_46;
  }
  if (!v16)
  {
    int v5 = __nwlog_obj();
    os_log_type_t v6 = type;
    if (os_log_type_enabled(v5, type))
    {
      *(_DWORD *)int buf = 136446210;
      unsigned __int8 v19 = "nw_link_get_local_congestion_info";
      uint64_t v7 = "%{public}s called with null ce_count, backtrace limit exceeded";
      goto LABEL_46;
    }
    goto LABEL_47;
  }
  long long v12 = (char *)__nw_create_backtrace_string();
  int v5 = __nwlog_obj();
  os_log_type_t v6 = type;
  BOOL v13 = os_log_type_enabled(v5, type);
  if (!v12)
  {
    if (v13)
    {
      *(_DWORD *)int buf = 136446210;
      unsigned __int8 v19 = "nw_link_get_local_congestion_info";
      uint64_t v7 = "%{public}s called with null ce_count, no backtrace";
      goto LABEL_46;
    }
    goto LABEL_47;
  }
  if (v13)
  {
    *(_DWORD *)int buf = 136446466;
    unsigned __int8 v19 = "nw_link_get_local_congestion_info";
    __int16 v20 = 2082;
    unsigned __int8 v21 = v12;
    BOOL v14 = "%{public}s called with null ce_count, dumping backtrace:%{public}s";
LABEL_31:
    _os_log_impl(&dword_1830D4000, v5, v6, v14, buf, 0x16u);
  }
LABEL_32:

  free(v12);
  if (v4) {
LABEL_49:
  }
    free(v4);
}

void ___ZL36nw_protocol_http1_set_up_associationP19nw_http1_connectionP13nw_parameters_block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v121 = *MEMORY[0x1E4F143B8];
  uint64_t handle = nw_protocol_instance_stub_get_handle(a2);
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http1_get_connection_for_protocol";
    os_log_type_t v67 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t v111 = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v67, type, &v111)) {
      goto LABEL_146;
    }
    if (type[0] != OS_LOG_TYPE_FAULT)
    {
      if (v111 == OS_LOG_TYPE_DEFAULT)
      {
        os_log_type_t v68 = __nwlog_obj();
        os_log_type_t v69 = type[0];
        if (!os_log_type_enabled(v68, type[0])) {
          goto LABEL_146;
        }
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http1_get_connection_for_protocol";
        char v70 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_145;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v68 = __nwlog_obj();
      os_log_type_t v69 = type[0];
      BOOL v77 = os_log_type_enabled(v68, type[0]);
      if (!backtrace_string)
      {
        if (!v77) {
          goto LABEL_146;
        }
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http1_get_connection_for_protocol";
        char v70 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_145;
      }
      if (v77)
      {
        *(_DWORD *)int buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http1_get_connection_for_protocol";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v68, v69, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_146;
    }
    os_log_type_t v68 = __nwlog_obj();
    os_log_type_t v69 = type[0];
    if (!os_log_type_enabled(v68, type[0])) {
      goto LABEL_146;
    }
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http1_get_connection_for_protocol";
    char v70 = "%{public}s called with null protocol";
LABEL_145:
    _os_log_impl(&dword_1830D4000, v68, v69, v70, buf, 0xCu);
    goto LABEL_146;
  }
  uint64_t v5 = *(void *)(handle + 40);
  if (!v5)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http1_get_connection_for_protocol";
    os_log_type_t v67 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t v111 = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v67, type, &v111)) {
      goto LABEL_146;
    }
    if (type[0] != OS_LOG_TYPE_FAULT)
    {
      if (v111 == OS_LOG_TYPE_DEFAULT)
      {
        os_log_type_t v68 = __nwlog_obj();
        os_log_type_t v69 = type[0];
        if (!os_log_type_enabled(v68, type[0])) {
          goto LABEL_146;
        }
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http1_get_connection_for_protocol";
        char v70 = "%{public}s called with null handle, backtrace limit exceeded";
        goto LABEL_145;
      }
      __int16 v78 = (char *)__nw_create_backtrace_string();
      os_log_type_t v68 = __nwlog_obj();
      os_log_type_t v69 = type[0];
      BOOL v79 = os_log_type_enabled(v68, type[0]);
      if (!v78)
      {
        if (!v79) {
          goto LABEL_146;
        }
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http1_get_connection_for_protocol";
        char v70 = "%{public}s called with null handle, no backtrace";
        goto LABEL_145;
      }
      if (v79)
      {
        *(_DWORD *)int buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http1_get_connection_for_protocol";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = v78;
        uint64_t v80 = "%{public}s called with null handle, dumping backtrace:%{public}s";
LABEL_127:
        _os_log_impl(&dword_1830D4000, v68, v69, v80, buf, 0x16u);
      }
LABEL_128:
      free(v78);
      if (!v67)
      {
LABEL_148:
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_http1_set_up_association_block_invoke";
        uint64_t v84 = (char *)_os_log_send_and_compose_impl();
        type[0] = OS_LOG_TYPE_ERROR;
        os_log_type_t v111 = OS_LOG_TYPE_DEFAULT;
        if (!__nwlog_fault(v84, type, &v111)) {
          goto LABEL_161;
        }
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v85 = gLogObj;
          os_log_type_t v86 = type[0];
          if (!os_log_type_enabled((os_log_t)gLogObj, type[0])) {
            goto LABEL_161;
          }
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_http1_set_up_association_block_invoke";
          uint64_t v87 = "%{public}s called with null update_http1_connection";
        }
        else
        {
          if (v111)
          {
            char v88 = (char *)__nw_create_backtrace_string();
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            os_log_type_t v89 = gLogObj;
            os_log_type_t v90 = type[0];
            BOOL v91 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
            if (v88)
            {
              if (v91)
              {
                *(_DWORD *)int buf = 136446466;
                *(void *)&uint8_t buf[4] = "nw_protocol_http1_set_up_association_block_invoke";
                *(_WORD *)&unsigned char buf[12] = 2082;
                *(void *)&buf[14] = v88;
                _os_log_impl(&dword_1830D4000, v89, v90, "%{public}s called with null update_http1_connection, dumping backtrace:%{public}s", buf, 0x16u);
              }
              free(v88);
              goto LABEL_161;
            }
            if (!v91)
            {
LABEL_161:
              if (v84) {
                free(v84);
              }
              return;
            }
            *(_DWORD *)int buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_protocol_http1_set_up_association_block_invoke";
            uint64_t v87 = "%{public}s called with null update_http1_connection, no backtrace";
            BOOL v92 = v89;
            os_log_type_t v93 = v90;
LABEL_160:
            _os_log_impl(&dword_1830D4000, v92, v93, v87, buf, 0xCu);
            goto LABEL_161;
          }
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v85 = gLogObj;
          os_log_type_t v86 = type[0];
          if (!os_log_type_enabled((os_log_t)gLogObj, type[0])) {
            goto LABEL_161;
          }
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_http1_set_up_association_block_invoke";
          uint64_t v87 = "%{public}s called with null update_http1_connection, backtrace limit exceeded";
        }
        BOOL v92 = v85;
        os_log_type_t v93 = v86;
        goto LABEL_160;
      }
LABEL_147:
      free(v67);
      goto LABEL_148;
    }
    os_log_type_t v68 = __nwlog_obj();
    os_log_type_t v69 = type[0];
    if (!os_log_type_enabled(v68, type[0])) {
      goto LABEL_146;
    }
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http1_get_connection_for_protocol";
    char v70 = "%{public}s called with null handle";
    goto LABEL_145;
  }
  int v6 = *(_DWORD *)(v5 + 24);
  if (v6 == 2)
  {
    uint64_t v8 = *(void *)(v5 + 8);
    if (v8)
    {
      uint64_t v7 = (uint64_t *)(v8 + 256);
      goto LABEL_8;
    }
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http1_get_connection_for_protocol";
    os_log_type_t v67 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t v111 = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v67, type, &v111))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v68 = __nwlog_obj();
        os_log_type_t v69 = type[0];
        if (!os_log_type_enabled(v68, type[0])) {
          goto LABEL_146;
        }
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http1_get_connection_for_protocol";
        char v70 = "%{public}s called with null handle->http1_stream";
        goto LABEL_145;
      }
      if (v111 == OS_LOG_TYPE_DEFAULT)
      {
        os_log_type_t v68 = __nwlog_obj();
        os_log_type_t v69 = type[0];
        if (!os_log_type_enabled(v68, type[0])) {
          goto LABEL_146;
        }
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http1_get_connection_for_protocol";
        char v70 = "%{public}s called with null handle->http1_stream, backtrace limit exceeded";
        goto LABEL_145;
      }
      __int16 v78 = (char *)__nw_create_backtrace_string();
      os_log_type_t v68 = __nwlog_obj();
      os_log_type_t v69 = type[0];
      BOOL v81 = os_log_type_enabled(v68, type[0]);
      if (!v78)
      {
        if (!v81) {
          goto LABEL_146;
        }
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http1_get_connection_for_protocol";
        char v70 = "%{public}s called with null handle->http1_stream, no backtrace";
        goto LABEL_145;
      }
      if (v81)
      {
        *(_DWORD *)int buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http1_get_connection_for_protocol";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = v78;
        uint64_t v80 = "%{public}s called with null handle->http1_stream, dumping backtrace:%{public}s";
        goto LABEL_127;
      }
      goto LABEL_128;
    }
LABEL_146:
    if (!v67) {
      goto LABEL_148;
    }
    goto LABEL_147;
  }
  if (v6 != 3) {
    goto LABEL_148;
  }
  uint64_t v7 = (uint64_t *)(v5 + 16);
LABEL_8:
  uint64_t v9 = *v7;
  if (!*v7) {
    goto LABEL_148;
  }
  if ((*(_WORD *)(v9 + 872) & 0x900) == 0)
  {
    uint8x8_t v10 = (void *)nw_path_copy_for_flow_registration(a3, *(void **)(v9 + 560));
    if (v10)
    {
      BOOL v11 = v10;
      if (*(void **)(v9 + 512) != v10)
      {
        long long v12 = os_retain(v10);
        char v13 = *(unsigned char *)(v9 + 520);
        if (v13)
        {
          BOOL v14 = *(void **)(v9 + 512);
          if (v14)
          {
            os_release(v14);
            char v13 = *(unsigned char *)(v9 + 520);
          }
        }
        *(void *)(v9 + 512) = v12;
        *(unsigned char *)(v9 + 520) = v13 | 1;
      }
      BOOL v15 = (unsigned __int16 *)(v9 + 872);
      char v16 = *(void **)(v9 + 576);
      if (v16)
      {
        unsigned __int8 v17 = nw_path_has_proxy_config(v11, v16);
        __int16 v18 = *v15;
        if ((v17 & 1) == 0 && (*v15 & 0x400) == 0)
        {
          if ((*(unsigned char *)(v9 + 158) & 1) == 0)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            unsigned __int8 v19 = gLogObj;
            if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
            {
              uint64_t v20 = *(void *)(v9 + 488);
              int v21 = *(_DWORD *)(*(void *)(v9 + 480) + 372);
              int v22 = *(_DWORD *)(v9 + 860);
              if (v20) {
                LODWORD(v20) = *(_DWORD *)(v20 + 424);
              }
              *(_DWORD *)int buf = 136447490;
              *(void *)&uint8_t buf[4] = "nw_protocol_http1_set_up_association_block_invoke";
              *(_WORD *)&unsigned char buf[12] = 2082;
              *(void *)&buf[14] = v9 + 74;
              *(_WORD *)&buf[22] = 2080;
              uint64_t v113 = (uint64_t)" ";
              *(_WORD *)__int16 v114 = 1024;
              *(_DWORD *)&v114[2] = v21;
              *(_WORD *)&v114[6] = 1024;
              *(_DWORD *)&v114[8] = v22;
              LOWORD(v115) = 1024;
              *(_DWORD *)((char *)&v115 + 2) = v20;
              _os_log_impl(&dword_1830D4000, v19, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u:c%u:s%u> Effective proxy configuration lost, marking do-not-reuse", buf, 0x32u);
            }
          }
          int v23 = *(unsigned __int8 *)(v9 + 874);
          int v24 = *v15;
          *BOOL v15 = v24 | 0x400;
          uint64_t v25 = *(void *)(v9 + 480);
          if (v25)
          {
            int v26 = v24 | (v23 << 16);
            if ((v26 & 0x800) == 0)
            {
              *(unsigned char *)(v9 + 874) = BYTE2(v26);
              *BOOL v15 = v26 | 0xC00;
              uint64_t v27 = *(unsigned int *)(v25 + 368) + 1;
              uint64_t v28 = v27 << 31 >> 31;
              *(_DWORD *)(v25 + 368) = v27;
              if (v28 == v27 && (v28 & 0x8000000000000000) == 0) {
                goto LABEL_76;
              }
              __nwlog_obj();
              uint64_t v29 = *(unsigned int *)(v25 + 368);
              *(_DWORD *)int buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
              *(_WORD *)&unsigned char buf[12] = 2082;
              *(void *)&buf[14] = "http1->nonresuable_connections";
              *(_WORD *)&buf[22] = 2048;
              uint64_t v113 = 1;
              *(_WORD *)__int16 v114 = 2048;
              *(void *)&v114[2] = v29;
              os_log_type_t v30 = (char *)_os_log_send_and_compose_impl();
              type[0] = OS_LOG_TYPE_ERROR;
              os_log_type_t v111 = OS_LOG_TYPE_DEFAULT;
              if (__nwlog_fault(v30, type, &v111))
              {
                if (type[0] == OS_LOG_TYPE_FAULT)
                {
                  os_log_type_t v31 = __nwlog_obj();
                  os_log_type_t v32 = type[0];
                  if (os_log_type_enabled(v31, type[0]))
                  {
                    uint64_t v33 = *(unsigned int *)(v25 + 368);
                    *(_DWORD *)int buf = 136446978;
                    *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
                    *(_WORD *)&unsigned char buf[12] = 2082;
                    *(void *)&buf[14] = "http1->nonresuable_connections";
                    *(_WORD *)&buf[22] = 2048;
                    uint64_t v113 = 1;
                    *(_WORD *)__int16 v114 = 2048;
                    *(void *)&v114[2] = v33;
                    os_log_type_t v34 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_72:
                    _os_log_impl(&dword_1830D4000, v31, v32, v34, buf, 0x2Au);
                  }
                }
                else if (v111)
                {
                  os_log_type_t v55 = (char *)__nw_create_backtrace_string();
                  os_log_type_t v31 = __nwlog_obj();
                  os_log_type_t v32 = type[0];
                  BOOL v56 = os_log_type_enabled(v31, type[0]);
                  if (v55)
                  {
                    if (v56)
                    {
                      uint64_t v57 = *(unsigned int *)(v25 + 368);
                      *(_DWORD *)int buf = 136447234;
                      *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
                      *(_WORD *)&unsigned char buf[12] = 2082;
                      *(void *)&buf[14] = "http1->nonresuable_connections";
                      *(_WORD *)&buf[22] = 2048;
                      uint64_t v113 = 1;
                      *(_WORD *)__int16 v114 = 2048;
                      *(void *)&v114[2] = v57;
                      *(_WORD *)&v114[10] = 2082;
                      os_log_type_t v115 = v55;
                      _os_log_impl(&dword_1830D4000, v31, v32, "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
                    }
                    free(v55);
                    goto LABEL_73;
                  }
                  if (v56)
                  {
                    uint64_t v62 = *(unsigned int *)(v25 + 368);
                    *(_DWORD *)int buf = 136446978;
                    *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
                    *(_WORD *)&unsigned char buf[12] = 2082;
                    *(void *)&buf[14] = "http1->nonresuable_connections";
                    *(_WORD *)&buf[22] = 2048;
                    uint64_t v113 = 1;
                    *(_WORD *)__int16 v114 = 2048;
                    *(void *)&v114[2] = v62;
                    os_log_type_t v34 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
                    goto LABEL_72;
                  }
                }
                else
                {
                  os_log_type_t v31 = __nwlog_obj();
                  os_log_type_t v32 = type[0];
                  if (os_log_type_enabled(v31, type[0]))
                  {
                    uint64_t v58 = *(unsigned int *)(v25 + 368);
                    *(_DWORD *)int buf = 136446978;
                    *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
                    *(_WORD *)&unsigned char buf[12] = 2082;
                    *(void *)&buf[14] = "http1->nonresuable_connections";
                    *(_WORD *)&buf[22] = 2048;
                    uint64_t v113 = 1;
                    *(_WORD *)__int16 v114 = 2048;
                    *(void *)&v114[2] = v58;
                    os_log_type_t v34 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
                    goto LABEL_72;
                  }
                }
              }
LABEL_73:
              if (v30) {
                free(v30);
              }
              *(_DWORD *)(v25 + 368) = -1;
LABEL_76:
              if ((*(unsigned char *)(v9 + 158) & 1) == 0)
              {
                if (gLogDatapath)
                {
                  __int16 v94 = __nwlog_obj();
                  if (os_log_type_enabled(v94, OS_LOG_TYPE_DEBUG))
                  {
                    uint64_t v95 = *(void *)(v9 + 488);
                    int v96 = *(_DWORD *)(*(void *)(v9 + 480) + 372);
                    int v97 = *(_DWORD *)(v9 + 860);
                    if (v95) {
                      LODWORD(v95) = *(_DWORD *)(v95 + 424);
                    }
                    int v98 = *(_DWORD *)(v25 + 368) + *(_DWORD *)(v25 + 364);
                    *(_DWORD *)int buf = 136447746;
                    *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
                    *(_WORD *)&unsigned char buf[12] = 2082;
                    *(void *)&buf[14] = v9 + 74;
                    *(_WORD *)&buf[22] = 2080;
                    uint64_t v113 = (uint64_t)" ";
                    *(_WORD *)__int16 v114 = 1024;
                    *(_DWORD *)&v114[2] = v96;
                    *(_WORD *)&v114[6] = 1024;
                    *(_DWORD *)&v114[8] = v97;
                    LOWORD(v115) = 1024;
                    *(_DWORD *)((char *)&v115 + 2) = v95;
                    HIWORD(v115) = 1024;
                    int v116 = v98;
                    _os_log_impl(&dword_1830D4000, v94, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> connection marked as not-reusable, increased pool width to %u", buf, 0x38u);
                  }
                }
              }
              BOOL v63 = *(void **)(v9 + 496);
              if (v63)
              {
                uint64_t v64 = *(void *)(v9 + 480);
                if (v64)
                {
LABEL_80:
                  uint64_t v65 = *(void *)(v64 + 200);
                  *(void *)int buf = MEMORY[0x1E4F143A8];
                  *(void *)&buf[8] = 0x40000000;
                  *(void *)&buf[16] = ___ZL56nw_http1_match_idle_connection_with_pending_stream_asyncP19nw_http1_connection_block_invoke;
                  uint64_t v113 = (uint64_t)&unk_1E52411C8;
                  *(void *)__int16 v114 = v65;
                  nw_queue_context_async(v63, buf);
LABEL_81:
                  os_release(v11);
                  return;
                }
LABEL_102:
                __nwlog_obj();
                *(_DWORD *)os_log_type_t type = 136446210;
                uint32_t v118 = "nw_http1_match_idle_connection_with_pending_stream_async";
                os_log_type_t v72 = (char *)_os_log_send_and_compose_impl();
                os_log_type_t v111 = OS_LOG_TYPE_ERROR;
                char v110 = 0;
                if (!__nwlog_fault(v72, &v111, &v110)) {
                  goto LABEL_213;
                }
                if (v111 == OS_LOG_TYPE_FAULT)
                {
                  os_log_type_t v73 = __nwlog_obj();
                  os_log_type_t v74 = v111;
                  if (!os_log_type_enabled(v73, v111)) {
                    goto LABEL_213;
                  }
                  *(_DWORD *)os_log_type_t type = 136446210;
                  uint32_t v118 = "nw_http1_match_idle_connection_with_pending_stream_async";
                  __int16 v75 = "%{public}s called with null http1";
LABEL_211:
                  os_log_type_t v109 = (uint8_t *)type;
                  goto LABEL_212;
                }
                if (!v110)
                {
                  os_log_type_t v73 = __nwlog_obj();
                  os_log_type_t v74 = v111;
                  if (!os_log_type_enabled(v73, v111)) {
                    goto LABEL_213;
                  }
                  *(_DWORD *)os_log_type_t type = 136446210;
                  uint32_t v118 = "nw_http1_match_idle_connection_with_pending_stream_async";
                  __int16 v75 = "%{public}s called with null http1, backtrace limit exceeded";
                  goto LABEL_211;
                }
                os_log_type_t v99 = (char *)__nw_create_backtrace_string();
                os_log_type_t v73 = __nwlog_obj();
                os_log_type_t v74 = v111;
                BOOL v100 = os_log_type_enabled(v73, v111);
                if (!v99)
                {
                  if (!v100) {
                    goto LABEL_213;
                  }
                  *(_DWORD *)os_log_type_t type = 136446210;
                  uint32_t v118 = "nw_http1_match_idle_connection_with_pending_stream_async";
                  __int16 v75 = "%{public}s called with null http1, no backtrace";
                  goto LABEL_211;
                }
                if (v100)
                {
                  *(_DWORD *)os_log_type_t type = 136446466;
                  uint32_t v118 = "nw_http1_match_idle_connection_with_pending_stream_async";
                  __int16 v119 = 2082;
                  BOOL v120 = v99;
                  os_log_type_t v101 = "%{public}s called with null http1, dumping backtrace:%{public}s";
LABEL_182:
                  int v103 = (uint8_t *)type;
LABEL_183:
                  _os_log_impl(&dword_1830D4000, v73, v74, v101, v103, 0x16u);
                  goto LABEL_184;
                }
                goto LABEL_184;
              }
              goto LABEL_166;
            }
            if ((*(unsigned char *)(v9 + 158) & 1) != 0 || !gLogDatapath) {
              goto LABEL_81;
            }
LABEL_54:
            os_log_type_t v51 = __nwlog_obj();
            if (os_log_type_enabled(v51, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v52 = *(void *)(v9 + 488);
              int v53 = *(_DWORD *)(*(void *)(v9 + 480) + 372);
              int v54 = *(_DWORD *)(v9 + 860);
              if (v52) {
                LODWORD(v52) = *(_DWORD *)(v52 + 424);
              }
              *(_DWORD *)int buf = 136447490;
              *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
              *(_WORD *)&unsigned char buf[12] = 2082;
              *(void *)&buf[14] = v9 + 74;
              *(_WORD *)&buf[22] = 2080;
              uint64_t v113 = (uint64_t)" ";
              *(_WORD *)__int16 v114 = 1024;
              *(_DWORD *)&v114[2] = v53;
              *(_WORD *)&v114[6] = 1024;
              *(_DWORD *)&v114[8] = v54;
              LOWORD(v115) = 1024;
              *(_DWORD *)((char *)&v115 + 2) = v52;
              _os_log_impl(&dword_1830D4000, v51, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> Connection already marked as not-reusable, ignoring", buf, 0x32u);
            }
            goto LABEL_81;
          }
          __nwlog_obj();
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
          os_log_type_t v72 = (char *)_os_log_send_and_compose_impl();
          type[0] = OS_LOG_TYPE_ERROR;
          os_log_type_t v111 = OS_LOG_TYPE_DEFAULT;
          if (!__nwlog_fault(v72, type, &v111)) {
            goto LABEL_213;
          }
          if (type[0] != OS_LOG_TYPE_FAULT)
          {
            if (v111)
            {
              uint64_t v82 = (char *)__nw_create_backtrace_string();
              os_log_type_t v73 = __nwlog_obj();
              os_log_type_t v74 = type[0];
              BOOL v83 = os_log_type_enabled(v73, type[0]);
              if (v82)
              {
                if (v83)
                {
                  *(_DWORD *)int buf = 136446466;
                  *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
                  *(_WORD *)&unsigned char buf[12] = 2082;
                  *(void *)&buf[14] = v82;
                  _os_log_impl(&dword_1830D4000, v73, v74, "%{public}s called with null http1, dumping backtrace:%{public}s", buf, 0x16u);
                }
                free(v82);
LABEL_213:
                if (!v72) {
                  goto LABEL_81;
                }
LABEL_214:
                free(v72);
                goto LABEL_81;
              }
LABEL_200:
              if (!v83) {
                goto LABEL_213;
              }
              *(_DWORD *)int buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
              __int16 v75 = "%{public}s called with null http1, no backtrace";
              goto LABEL_202;
            }
LABEL_198:
            os_log_type_t v73 = __nwlog_obj();
            os_log_type_t v74 = type[0];
            if (!os_log_type_enabled(v73, type[0])) {
              goto LABEL_213;
            }
            *(_DWORD *)int buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
            __int16 v75 = "%{public}s called with null http1, backtrace limit exceeded";
            goto LABEL_202;
          }
          goto LABEL_188;
        }
      }
      else
      {
        __int16 v18 = *v15;
      }
      if ((v18 & 0x1000) == 0 || nw_path_is_viable(v11) || (*v15 & 0x400) != 0) {
        goto LABEL_81;
      }
      if ((*(unsigned char *)(v9 + 158) & 1) == 0)
      {
        os_log_type_t v35 = __nwlog_obj();
        if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
        {
          uint64_t v36 = *(void *)(v9 + 488);
          int v37 = *(_DWORD *)(*(void *)(v9 + 480) + 372);
          int v38 = *(_DWORD *)(v9 + 860);
          if (v36) {
            LODWORD(v36) = *(_DWORD *)(v36 + 424);
          }
          *(_DWORD *)int buf = 136447490;
          *(void *)&uint8_t buf[4] = "nw_protocol_http1_set_up_association_block_invoke";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v9 + 74;
          *(_WORD *)&buf[22] = 2080;
          uint64_t v113 = (uint64_t)" ";
          *(_WORD *)__int16 v114 = 1024;
          *(_DWORD *)&v114[2] = v37;
          *(_WORD *)&v114[6] = 1024;
          *(_DWORD *)&v114[8] = v38;
          LOWORD(v115) = 1024;
          *(_DWORD *)((char *)&v115 + 2) = v36;
          _os_log_impl(&dword_1830D4000, v35, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s<i%u:c%u:s%u> Path became nonviable, marking do-not-reuse", buf, 0x32u);
        }
      }
      int v39 = *(unsigned __int8 *)(v9 + 874);
      int v40 = *v15;
      *BOOL v15 = v40 | 0x400;
      uint64_t v41 = *(void *)(v9 + 480);
      if (!v41)
      {
        __nwlog_obj();
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
        os_log_type_t v72 = (char *)_os_log_send_and_compose_impl();
        type[0] = OS_LOG_TYPE_ERROR;
        os_log_type_t v111 = OS_LOG_TYPE_DEFAULT;
        if (!__nwlog_fault(v72, type, &v111)) {
          goto LABEL_213;
        }
        if (type[0] != OS_LOG_TYPE_FAULT)
        {
          if (v111)
          {
            os_log_type_t v99 = (char *)__nw_create_backtrace_string();
            os_log_type_t v73 = __nwlog_obj();
            os_log_type_t v74 = type[0];
            BOOL v83 = os_log_type_enabled(v73, type[0]);
            if (v99)
            {
              if (v83)
              {
                *(_DWORD *)int buf = 136446466;
                *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
                *(_WORD *)&unsigned char buf[12] = 2082;
                *(void *)&buf[14] = v99;
                os_log_type_t v101 = "%{public}s called with null http1, dumping backtrace:%{public}s";
                int v103 = buf;
                goto LABEL_183;
              }
              goto LABEL_184;
            }
            goto LABEL_200;
          }
          goto LABEL_198;
        }
LABEL_188:
        os_log_type_t v73 = __nwlog_obj();
        os_log_type_t v74 = type[0];
        if (!os_log_type_enabled(v73, type[0])) {
          goto LABEL_213;
        }
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
        __int16 v75 = "%{public}s called with null http1";
LABEL_202:
        os_log_type_t v109 = buf;
LABEL_212:
        _os_log_impl(&dword_1830D4000, v73, v74, v75, v109, 0xCu);
        goto LABEL_213;
      }
      int v42 = v40 | (v39 << 16);
      if ((v42 & 0x800) != 0)
      {
        if ((*(unsigned char *)(v9 + 158) & 1) != 0 || !gLogDatapath) {
          goto LABEL_81;
        }
        goto LABEL_54;
      }
      *(unsigned char *)(v9 + 874) = BYTE2(v42);
      *BOOL v15 = v42 | 0xC00;
      uint64_t v43 = *(unsigned int *)(v41 + 368) + 1;
      uint64_t v44 = v43 << 31 >> 31;
      *(_DWORD *)(v41 + 368) = v43;
      if (v44 == v43 && (v44 & 0x8000000000000000) == 0)
      {
LABEL_98:
        if ((*(unsigned char *)(v9 + 158) & 1) == 0)
        {
          if (gLogDatapath)
          {
            BOOL v104 = __nwlog_obj();
            if (os_log_type_enabled(v104, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v105 = *(void *)(v9 + 488);
              int v106 = *(_DWORD *)(*(void *)(v9 + 480) + 372);
              int v107 = *(_DWORD *)(v9 + 860);
              if (v105) {
                LODWORD(v105) = *(_DWORD *)(v105 + 424);
              }
              int v108 = *(_DWORD *)(v41 + 368) + *(_DWORD *)(v41 + 364);
              *(_DWORD *)int buf = 136447746;
              *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
              *(_WORD *)&unsigned char buf[12] = 2082;
              *(void *)&buf[14] = v9 + 74;
              *(_WORD *)&buf[22] = 2080;
              uint64_t v113 = (uint64_t)" ";
              *(_WORD *)__int16 v114 = 1024;
              *(_DWORD *)&v114[2] = v106;
              *(_WORD *)&v114[6] = 1024;
              *(_DWORD *)&v114[8] = v107;
              LOWORD(v115) = 1024;
              *(_DWORD *)((char *)&v115 + 2) = v105;
              HIWORD(v115) = 1024;
              int v116 = v108;
              _os_log_impl(&dword_1830D4000, v104, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> connection marked as not-reusable, increased pool width to %u", buf, 0x38u);
            }
          }
        }
        BOOL v63 = *(void **)(v9 + 496);
        if (v63)
        {
          uint64_t v64 = *(void *)(v9 + 480);
          if (v64) {
            goto LABEL_80;
          }
          goto LABEL_102;
        }
LABEL_166:
        __nwlog_obj();
        *(_DWORD *)os_log_type_t type = 136446210;
        uint32_t v118 = "nw_http1_match_idle_connection_with_pending_stream_async";
        os_log_type_t v72 = (char *)_os_log_send_and_compose_impl();
        os_log_type_t v111 = OS_LOG_TYPE_ERROR;
        char v110 = 0;
        if (!__nwlog_fault(v72, &v111, &v110)) {
          goto LABEL_213;
        }
        if (v111 == OS_LOG_TYPE_FAULT)
        {
          os_log_type_t v73 = __nwlog_obj();
          os_log_type_t v74 = v111;
          if (!os_log_type_enabled(v73, v111)) {
            goto LABEL_213;
          }
          *(_DWORD *)os_log_type_t type = 136446210;
          uint32_t v118 = "nw_http1_match_idle_connection_with_pending_stream_async";
          __int16 v75 = "%{public}s called with null http1_connection->context";
          goto LABEL_211;
        }
        if (!v110)
        {
          os_log_type_t v73 = __nwlog_obj();
          os_log_type_t v74 = v111;
          if (!os_log_type_enabled(v73, v111)) {
            goto LABEL_213;
          }
          *(_DWORD *)os_log_type_t type = 136446210;
          uint32_t v118 = "nw_http1_match_idle_connection_with_pending_stream_async";
          __int16 v75 = "%{public}s called with null http1_connection->context, backtrace limit exceeded";
          goto LABEL_211;
        }
        os_log_type_t v99 = (char *)__nw_create_backtrace_string();
        os_log_type_t v73 = __nwlog_obj();
        os_log_type_t v74 = v111;
        BOOL v102 = os_log_type_enabled(v73, v111);
        if (!v99)
        {
          if (!v102) {
            goto LABEL_213;
          }
          *(_DWORD *)os_log_type_t type = 136446210;
          uint32_t v118 = "nw_http1_match_idle_connection_with_pending_stream_async";
          __int16 v75 = "%{public}s called with null http1_connection->context, no backtrace";
          goto LABEL_211;
        }
        if (v102)
        {
          *(_DWORD *)os_log_type_t type = 136446466;
          uint32_t v118 = "nw_http1_match_idle_connection_with_pending_stream_async";
          __int16 v119 = 2082;
          BOOL v120 = v99;
          os_log_type_t v101 = "%{public}s called with null http1_connection->context, dumping backtrace:%{public}s";
          goto LABEL_182;
        }
LABEL_184:
        free(v99);
        if (!v72) {
          goto LABEL_81;
        }
        goto LABEL_214;
      }
      __nwlog_obj();
      uint64_t v45 = *(unsigned int *)(v41 + 368);
      *(_DWORD *)int buf = 136446978;
      *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = "http1->nonresuable_connections";
      *(_WORD *)&buf[22] = 2048;
      uint64_t v113 = 1;
      *(_WORD *)__int16 v114 = 2048;
      *(void *)&v114[2] = v45;
      BOOL v46 = (char *)_os_log_send_and_compose_impl();
      type[0] = OS_LOG_TYPE_ERROR;
      os_log_type_t v111 = OS_LOG_TYPE_DEFAULT;
      if (__nwlog_fault(v46, type, &v111))
      {
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          uint64_t v47 = __nwlog_obj();
          os_log_type_t v48 = type[0];
          if (os_log_type_enabled(v47, type[0]))
          {
            uint64_t v49 = *(unsigned int *)(v41 + 368);
            *(_DWORD *)int buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = "http1->nonresuable_connections";
            *(_WORD *)&buf[22] = 2048;
            uint64_t v113 = 1;
            *(_WORD *)__int16 v114 = 2048;
            *(void *)&v114[2] = v49;
            os_log_type_t v50 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_94:
            _os_log_impl(&dword_1830D4000, v47, v48, v50, buf, 0x2Au);
          }
        }
        else if (v111)
        {
          os_log_type_t v59 = (char *)__nw_create_backtrace_string();
          uint64_t v47 = __nwlog_obj();
          os_log_type_t v48 = type[0];
          BOOL v60 = os_log_type_enabled(v47, type[0]);
          if (v59)
          {
            if (v60)
            {
              uint64_t v61 = *(unsigned int *)(v41 + 368);
              *(_DWORD *)int buf = 136447234;
              *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
              *(_WORD *)&unsigned char buf[12] = 2082;
              *(void *)&buf[14] = "http1->nonresuable_connections";
              *(_WORD *)&buf[22] = 2048;
              uint64_t v113 = 1;
              *(_WORD *)__int16 v114 = 2048;
              *(void *)&v114[2] = v61;
              *(_WORD *)&v114[10] = 2082;
              os_log_type_t v115 = v59;
              _os_log_impl(&dword_1830D4000, v47, v48, "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
            }
            free(v59);
            goto LABEL_95;
          }
          if (v60)
          {
            uint64_t v71 = *(unsigned int *)(v41 + 368);
            *(_DWORD *)int buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = "http1->nonresuable_connections";
            *(_WORD *)&buf[22] = 2048;
            uint64_t v113 = 1;
            *(_WORD *)__int16 v114 = 2048;
            *(void *)&v114[2] = v71;
            os_log_type_t v50 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
            goto LABEL_94;
          }
        }
        else
        {
          uint64_t v47 = __nwlog_obj();
          os_log_type_t v48 = type[0];
          if (os_log_type_enabled(v47, type[0]))
          {
            uint64_t v66 = *(unsigned int *)(v41 + 368);
            *(_DWORD *)int buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = "http1->nonresuable_connections";
            *(_WORD *)&buf[22] = 2048;
            uint64_t v113 = 1;
            *(_WORD *)__int16 v114 = 2048;
            *(void *)&v114[2] = v66;
            os_log_type_t v50 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
            goto LABEL_94;
          }
        }
      }
LABEL_95:
      if (v46) {
        free(v46);
      }
      *(_DWORD *)(v41 + 368) = -1;
      goto LABEL_98;
    }
  }
}

void nw_path_flow_registration_access_interface_stats(void *a1, void *a2)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  BOOL v3 = a1;
  id v4 = a2;
  uint64_t v5 = (void (**)(void, void))v4;
  if (!v3)
  {
    uint64_t v7 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    int v26 = "nw_path_flow_registration_access_interface_stats";
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (!__nwlog_fault(v8, &type, &v23)) {
      goto LABEL_43;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)int buf = 136446210;
        int v26 = "nw_path_flow_registration_access_interface_stats";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null registration", buf, 0xCu);
      }
    }
    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)int buf = 136446466;
          int v26 = "nw_path_flow_registration_access_interface_stats";
          __int16 v27 = 2082;
          uint64_t v28 = (uint64_t)backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null registration, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_43:
        if (!v8) {
          goto LABEL_7;
        }
LABEL_44:
        free(v8);
        goto LABEL_7;
      }
      if (v15)
      {
        *(_DWORD *)int buf = 136446210;
        int v26 = "nw_path_flow_registration_access_interface_stats";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null registration, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v21 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)int buf = 136446210;
        int v26 = "nw_path_flow_registration_access_interface_stats";
        _os_log_impl(&dword_1830D4000, v9, v21, "%{public}s called with null registration, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_42:

    goto LABEL_43;
  }
  if (!v4)
  {
    BOOL v11 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    int v26 = "nw_path_flow_registration_access_interface_stats";
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (!__nwlog_fault(v8, &type, &v23)) {
      goto LABEL_43;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)int buf = 136446210;
        int v26 = "nw_path_flow_registration_access_interface_stats";
        _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null access_block", buf, 0xCu);
      }
    }
    else if (v23)
    {
      char v16 = (char *)__nw_create_backtrace_string();
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v17 = type;
      BOOL v18 = os_log_type_enabled(v9, type);
      if (v16)
      {
        if (v18)
        {
          *(_DWORD *)int buf = 136446466;
          int v26 = "nw_path_flow_registration_access_interface_stats";
          __int16 v27 = 2082;
          uint64_t v28 = (uint64_t)v16;
          _os_log_impl(&dword_1830D4000, v9, v17, "%{public}s called with null access_block, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v16);
        if (!v8) {
          goto LABEL_7;
        }
        goto LABEL_44;
      }
      if (v18)
      {
        *(_DWORD *)int buf = 136446210;
        int v26 = "nw_path_flow_registration_access_interface_stats";
        _os_log_impl(&dword_1830D4000, v9, v17, "%{public}s called with null access_block, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v22 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)int buf = 136446210;
        int v26 = "nw_path_flow_registration_access_interface_stats";
        _os_log_impl(&dword_1830D4000, v9, v22, "%{public}s called with null access_block, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_42;
  }
  int v6 = (void *)v3[9];
  if (v6)
  {
LABEL_6:
    ((void (**)(void, void *))v5)[2](v5, v6);
LABEL_7:

    return;
  }
  int v6 = malloc_type_calloc(1uLL, 0x68uLL, 0xEAFB8F1AuLL);
  if (v6)
  {
LABEL_5:
    v3[9] = v6;
    goto LABEL_6;
  }
  unsigned __int8 v19 = __nwlog_obj();
  os_log_type_enabled(v19, OS_LOG_TYPE_ERROR);
  *(_DWORD *)int buf = 136446722;
  int v26 = "strict_calloc";
  __int16 v27 = 2048;
  uint64_t v28 = 1;
  __int16 v29 = 2048;
  uint64_t v30 = 104;
  uint64_t v20 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v20))
  {
    free(v20);
    goto LABEL_5;
  }
  __break(1u);
}

void sub_18340163C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183401A40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183401D34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_browser_dns_service_query_record_callback(_DNSServiceRef_t *a1, char a2, unsigned int a3, int a4, const char *a5, unsigned __int16 a6, unsigned __int16 a7, unsigned int a8, const uint8_t *a9, unsigned int a10, void *a11)
{
  uint64_t v128 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    BOOL v15 = a11;
    char v16 = v15;
    if (v15)
    {
      os_unfair_lock_lock(v15 + 2);
      if (!nw_browser_fail_on_dns_error_locked((NWConcrete_nw_browser *)v16, a4, "nw_browser_dns_service_query_record_callback")&& v16[18]._os_unfair_lock_opaque == 1)
      {
        char v104 = a2;
        bzero(key, 0x3F1uLL);
        for (size_t i = 0; i < strlen(a5); ++i)
          key[i] = __tolower(a5[i]);
        if (xpc_dictionary_get_uint64(*(xpc_object_t *)&v16[40]._os_unfair_lock_opaque, key))
        {
          uint64_t v105 = v16;
          uint64_t v18 = (uint64_t)nw_dictionary_copy_value(*(void *)&v105[42]._os_unfair_lock_opaque, (uint64_t)key);
          nw_txt_record_t v19 = nw_txt_record_create_with_bytes(a9, a8);
          nw_txt_record_t v20 = v19;
          if (!v19) {
            goto LABEL_53;
          }
          os_log_type_t v21 = v19;
          BOOL v22 = (BYTE4(v21[4].isa) & 1) == 0;

          if (v22)
          {
            int v24 = __nwlog_obj();
            if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)BOOL v123 = 136446210;
              *(void *)&v123[4] = "nw_browser_copy_txt_array_locked";
              _os_log_impl(&dword_1830D4000, v24, OS_LOG_TYPE_ERROR, "%{public}s txt: discovered non-key/value TXT record", v123, 0xCu);
            }
            goto LABEL_52;
          }
          if ((v104 & 2) != 0)
          {
            if (!v18)
            {
              uint64_t v18 = nw_array_create();
              nw_dictionary_set_value(*(void *)&v105[42]._os_unfair_lock_opaque, key, (void *)v18);
              if (!nw_parameters_get_logging_disabled(*(void *)&v105[10]._os_unfair_lock_opaque))
              {
                if (__nwlog_browser_log::onceToken[0] != -1) {
                  dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_20_44865);
                }
                uint64_t v30 = (id)gbrowserLogObj;
                if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
                {
                  uint32_t os_unfair_lock_opaque = v105[48]._os_unfair_lock_opaque;
                  *(_DWORD *)BOOL v123 = 136446722;
                  *(void *)&v123[4] = "nw_browser_copy_txt_array_locked";
                  __int16 v124 = 1024;
                  *(_DWORD *)BOOL v125 = os_unfair_lock_opaque;
                  *(_WORD *)&v125[4] = 2080;
                  *(void *)&v125[6] = key;
                  _os_log_impl(&dword_1830D4000, v30, OS_LOG_TYPE_DEBUG, "%{public}s [B%u] txt: create new txt_array for %s", v123, 0x1Cu);
                }
              }
            }
            v111[0] = MEMORY[0x1E4F143A8];
            v111[1] = 3221225472;
            v111[2] = ___ZL32nw_browser_copy_txt_array_lockedP21NWConcrete_nw_browserPKcPKvtj_block_invoke;
            v111[3] = &unk_1E524AE18;
            os_log_type_t v32 = v21;
            os_log_type_t v112 = v32;
            if (nw_array_apply((atomic_uchar *)v18, (uint64_t)v111))
            {
              nw_array_append(v18, v32);
              if (!nw_parameters_get_logging_disabled(*(void *)&v105[10]._os_unfair_lock_opaque))
              {
                if (__nwlog_browser_log::onceToken[0] != -1) {
                  dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_20_44865);
                }
                uint64_t v33 = (id)gbrowserLogObj;
                if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
                {
                  uint32_t v34 = v105[48]._os_unfair_lock_opaque;
                  *(_DWORD *)BOOL v123 = 136447234;
                  *(void *)&v123[4] = "nw_browser_copy_txt_array_locked";
                  __int16 v124 = 1024;
                  *(_DWORD *)BOOL v125 = v34;
                  *(_WORD *)&v125[4] = 1040;
                  *(_DWORD *)&v125[6] = a8;
                  *(_WORD *)&v125[10] = 2080;
                  *(void *)&v125[12] = a9;
                  __int16 v126 = 2080;
                  __int16 v127 = key;
                  _os_log_impl(&dword_1830D4000, v33, OS_LOG_TYPE_DEBUG, "%{public}s [B%u] txt: add %.*s to %s", v123, 0x2Cu);
                }
              }
            }
            int v24 = v112;
            goto LABEL_52;
          }
          if (v18)
          {
            BOOL v23 = nw_array_create();
            *(void *)os_log_type_t type = 0;
            int v107 = type;
            uint64_t v108 = 0x2020000000;
            char v109 = 0;
            *(void *)int buf = MEMORY[0x1E4F143A8];
            *(void *)&buf[8] = 3221225472;
            *(void *)&buf[16] = ___ZL32nw_browser_copy_txt_array_lockedP21NWConcrete_nw_browserPKcPKvtj_block_invoke_134;
            *(void *)&unsigned char buf[24] = &unk_1E52447C8;
            __int16 v119 = type;
            *(void *)&buf[32] = v21;
            int v24 = (id)v23;
            *(void *)&long long v118 = v24;
            uint64_t v25 = v105;
            int v26 = v105;
            __int16 v122 = a8;
            *((void *)&v118 + 1) = v26;
            BOOL v120 = a9;
            uint64_t v121 = key;
            nw_array_apply((atomic_uchar *)v18, (uint64_t)buf);
            if (v24) {
              uint64_t v27 = (v24[3].isa - v24[2].isa) >> 3;
            }
            else {
              uint64_t v27 = 0;
            }
            if (v27 != ((uint64_t)(*(void *)(v18 + 24) - *(void *)(v18 + 16)) >> 3) - 1
              && !nw_parameters_get_logging_disabled(*(void *)&v26[10]._os_unfair_lock_opaque))
            {
              if (__nwlog_browser_log::onceToken[0] != -1) {
                dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_20_44865);
              }
              os_log_type_t v35 = (id)gbrowserLogObj;
              if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
              {
                uint32_t v36 = v26[48]._os_unfair_lock_opaque;
                *(_DWORD *)BOOL v123 = 136447234;
                *(void *)&v123[4] = "nw_browser_copy_txt_array_locked";
                __int16 v124 = 1024;
                *(_DWORD *)BOOL v125 = v36;
                *(_WORD *)&v125[4] = 1040;
                *(_DWORD *)&v125[6] = a8;
                *(_WORD *)&v125[10] = 2080;
                *(void *)&v125[12] = a9;
                __int16 v126 = 2080;
                __int16 v127 = key;
                _os_log_impl(&dword_1830D4000, v35, OS_LOG_TYPE_ERROR, "%{public}s [B%u] txt: failed to remove %.*s from %s", v123, 0x2Cu);
              }

              uint64_t v25 = v105;
            }
            nw_dictionary_set_value(*(void *)&v25[42]._os_unfair_lock_opaque, key, v24);
            if (!v24 || v24[3].isa == v24[2].isa) {
              int v37 = 0;
            }
            else {
              int v37 = v24;
            }

            _Block_object_dispose(type, 8);
            uint64_t v18 = (uint64_t)v37;
LABEL_52:

LABEL_53:
            if (v18)
            {
              unint64_t v38 = *(void *)(v18 + 24) - *(void *)(v18 + 16);
              if (v38 >= 9)
              {
                os_unfair_lock_unlock(v16 + 2);
LABEL_172:

                goto LABEL_22;
              }
              int v39 = v105;
              if (v38 == 8)
              {
                int v40 = nw_array_get_object_at_index(v18, 0);
              }
              else
              {
                int v40 = 0;
              }
LABEL_117:
              if (!nw_parameters_get_logging_disabled(*(void *)&v39[10]._os_unfair_lock_opaque))
              {
                if (__nwlog_browser_log::onceToken[0] != -1) {
                  dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_20_44865);
                }
                uint64_t v65 = (id)gbrowserLogObj;
                if (os_log_type_enabled(v65, OS_LOG_TYPE_DEBUG))
                {
                  if (v18) {
                    uint64_t v66 = (uint64_t)(*(void *)(v18 + 24) - *(void *)(v18 + 16)) >> 3;
                  }
                  else {
                    uint64_t v66 = 0;
                  }
                  uint32_t v67 = v39[48]._os_unfair_lock_opaque;
                  *(_DWORD *)int buf = 136446978;
                  *(void *)&uint8_t buf[4] = "nw_browser_dns_service_query_record_callback";
                  *(_WORD *)&unsigned char buf[12] = 1024;
                  *(_DWORD *)&buf[14] = v67;
                  *(_WORD *)&buf[18] = 2080;
                  *(void *)&buf[20] = key;
                  *(_WORD *)&buf[28] = 2048;
                  *(void *)&buf[30] = v66;
                  _os_log_impl(&dword_1830D4000, v65, OS_LOG_TYPE_DEBUG, "%{public}s [B%u] txt: %s has count of %zu in txt_array,", buf, 0x26u);
                }

                int v39 = v105;
              }
              id v68 = nw_browser_copy_old_result_locked((NWConcrete_nw_browser *)v39, key);
              os_log_type_t v69 = v68;
              if (v68)
              {
                char v70 = (id *)v68;
                left = v70[3];

                int v39 = v105;
              }
              else
              {
                left = 0;
              }
              uint int64 = xpc_dictionary_get_uint64(*(xpc_object_t *)&v16[40]._os_unfair_lock_opaque, key);
              if ((uint64 & 4) != 0 || nw_txt_record_is_equal(left, v40)) {
                goto LABEL_161;
              }
              BOOL v102 = nw_browser_copy_result_to_modify_locked((NWConcrete_nw_browser *)v39, key, uint64);
              if (!nw_parameters_get_logging_disabled(*(void *)&v39[10]._os_unfair_lock_opaque))
              {
                if (__nwlog_browser_log::onceToken[0] != -1) {
                  dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_20_44865);
                }
                os_log_type_t v72 = (id)gbrowserLogObj;
                if (os_log_type_enabled(v72, OS_LOG_TYPE_DEBUG))
                {
                  os_log_type_t v73 = left;
                  if (left)
                  {
                    int isa = (int)left[2].isa;
                    os_log_type_t v73 = left[1].isa;
                  }
                  else
                  {
                    int isa = 0;
                  }
                  uint32_t v75 = v39[48]._os_unfair_lock_opaque;
                  if (v40)
                  {
                    Class v77 = v40[1].isa;
                    Class v76 = v40[2].isa;
                  }
                  else
                  {
                    LODWORD(v76) = 0;
                    Class v77 = 0;
                  }
                  *(_DWORD *)int buf = 136447490;
                  *(void *)&uint8_t buf[4] = "nw_browser_dns_service_query_record_callback";
                  *(_WORD *)&unsigned char buf[12] = 1024;
                  *(_DWORD *)&buf[14] = v75;
                  *(_WORD *)&buf[18] = 1040;
                  *(_DWORD *)&buf[20] = isa;
                  *(_WORD *)&unsigned char buf[24] = 2096;
                  *(void *)&buf[26] = v73;
                  *(_WORD *)&buf[34] = 1040;
                  *(_DWORD *)&buf[36] = v76;
                  LOWORD(v118) = 2096;
                  *(void *)((char *)&v118 + 2) = v77;
                  _os_log_impl(&dword_1830D4000, v72, OS_LOG_TYPE_DEBUG, "%{public}s [B%u] txt: txt record changed from %{network:data}.*P to %{network:data}.*P", buf, 0x32u);
                }

                int v39 = v105;
              }
              if (uint64)
              {
                if (v40)
                {
                  if (v40[2].isa == (Class)1) {
                    __int16 v78 = 0;
                  }
                  else {
                    __int16 v78 = v40;
                  }
                }
                else
                {
                  __int16 v78 = 0;
                }
                nw_browse_result_set_txt_record_object((void *)v102, v78);
                *(void *)BOOL v123 = 0;
                ValidationData = (const void *)DNSServiceGetValidationData();
                if (ValidationData && *(void *)v123)
                {
                  id endpoint = nw_browse_result_get_endpoint((void *)v102);
                  BOOL v81 = endpoint;
                  if (endpoint) {
                    nw_endpoint_set_signature(endpoint, ValidationData, *(size_t *)v123);
                  }
                }
                uint64_t v82 = uint64 | 0x20;
                xpc_dictionary_set_uint64(*(xpc_object_t *)&v16[40]._os_unfair_lock_opaque, key, v82);
                if (!nw_parameters_get_logging_disabled(*(void *)&v105[10]._os_unfair_lock_opaque))
                {
                  if (__nwlog_browser_log::onceToken[0] != -1) {
                    dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_20_44865);
                  }
                  BOOL v83 = (id)gbrowserLogObj;
                  if (os_log_type_enabled(v83, OS_LOG_TYPE_DEBUG))
                  {
                    uint32_t v84 = v105[48]._os_unfair_lock_opaque;
                    *(_DWORD *)int buf = 136446978;
                    *(void *)&uint8_t buf[4] = "nw_browser_dns_service_query_record_callback";
                    *(_WORD *)&unsigned char buf[12] = 1024;
                    *(_DWORD *)&buf[14] = v84;
                    *(_WORD *)&buf[18] = 2080;
                    *(void *)&buf[20] = key;
                    *(_WORD *)&buf[28] = 2048;
                    *(void *)&buf[30] = v82;
                    _os_log_impl(&dword_1830D4000, v83, OS_LOG_TYPE_DEBUG, "%{public}s [B%u] changes_map: %s |= txt_record_changed(%llu)", buf, 0x26u);
                  }
                }
                int v39 = v105;
LABEL_161:
                if ((v104 & 1) == 0 && (!v18 || *(void *)(v18 + 24) - *(void *)(v18 + 16) <= 0xFuLL))
                {
                  nw_browser_notify_browse_result_changes_locked((NWConcrete_nw_browser *)v39);
                  if (!nw_parameters_get_logging_disabled(*(void *)&v39[10]._os_unfair_lock_opaque))
                  {
                    if (__nwlog_browser_log::onceToken[0] != -1) {
                      dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_20_44865);
                    }
                    uint64_t v85 = (id)gbrowserLogObj;
                    if (os_log_type_enabled(v85, OS_LOG_TYPE_DEBUG))
                    {
                      uint32_t v86 = v39[48]._os_unfair_lock_opaque;
                      *(_DWORD *)int buf = 136446722;
                      *(void *)&uint8_t buf[4] = "nw_browser_dns_service_query_record_callback";
                      *(_WORD *)&unsigned char buf[12] = 1024;
                      *(_DWORD *)&buf[14] = v86;
                      *(_WORD *)&buf[18] = 2080;
                      *(void *)&buf[20] = key;
                      _os_log_impl(&dword_1830D4000, v85, OS_LOG_TYPE_DEBUG, "%{public}s [B%u] txt: notify txt record change for %s", buf, 0x1Cu);
                    }
                  }
                }
                os_unfair_lock_unlock(v16 + 2);
                goto LABEL_171;
              }
              if (nw_parameters_get_logging_disabled(*(void *)&v39[10]._os_unfair_lock_opaque))
              {
LABEL_202:
                os_unfair_lock_unlock(v16 + 2);

LABEL_171:
                goto LABEL_172;
              }
              if (__nwlog_browser_log::onceToken[0] != -1) {
                dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_20_44865);
              }
              id v87 = (id)gbrowserLogObj;
              uint32_t v88 = v105[48]._os_unfair_lock_opaque;
              *(_DWORD *)int buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_browser_dns_service_query_record_callback";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = v88;
              os_log_type_t v89 = (char *)_os_log_send_and_compose_impl();

              v123[0] = 16;
              LOBYTE(v111[0]) = 0;
              if (__nwlog_fault(v89, v123, v111))
              {
                if (v123[0] == 17)
                {
                  if (__nwlog_browser_log::onceToken[0] != -1) {
                    dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_20_44865);
                  }
                  os_log_type_t v90 = (id)gbrowserLogObj;
                  os_log_type_t v91 = v123[0];
                  if (os_log_type_enabled(v90, (os_log_type_t)v123[0]))
                  {
                    uint32_t v92 = v105[48]._os_unfair_lock_opaque;
                    *(_DWORD *)int buf = 136446466;
                    *(void *)&uint8_t buf[4] = "nw_browser_dns_service_query_record_callback";
                    *(_WORD *)&unsigned char buf[12] = 1024;
                    *(_DWORD *)&buf[14] = v92;
                    _os_log_impl(&dword_1830D4000, v90, v91, "%{public}s [B%u] change should not be invalid", buf, 0x12u);
                  }
                }
                else if (LOBYTE(v111[0]))
                {
                  backtrace_string = __nw_create_backtrace_string();
                  if (backtrace_string)
                  {
                    __int16 v94 = (char *)backtrace_string;
                    if (__nwlog_browser_log::onceToken[0] != -1) {
                      dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_20_44865);
                    }
                    uint64_t v95 = (id)gbrowserLogObj;
                    os_log_type_t v96 = v123[0];
                    if (os_log_type_enabled(v95, (os_log_type_t)v123[0]))
                    {
                      uint32_t v97 = v105[48]._os_unfair_lock_opaque;
                      *(_DWORD *)int buf = 136446722;
                      *(void *)&uint8_t buf[4] = "nw_browser_dns_service_query_record_callback";
                      *(_WORD *)&unsigned char buf[12] = 1024;
                      *(_DWORD *)&buf[14] = v97;
                      *(_WORD *)&buf[18] = 2082;
                      *(void *)&buf[20] = v94;
                      _os_log_impl(&dword_1830D4000, v95, v96, "%{public}s [B%u] change should not be invalid, dumping backtrace:%{public}s", buf, 0x1Cu);
                    }

                    free(v94);
                    goto LABEL_200;
                  }
                  if (__nwlog_browser_log::onceToken[0] != -1) {
                    dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_20_44865);
                  }
                  os_log_type_t v90 = (id)gbrowserLogObj;
                  os_log_type_t v100 = v123[0];
                  if (os_log_type_enabled(v90, (os_log_type_t)v123[0]))
                  {
                    uint32_t v101 = v105[48]._os_unfair_lock_opaque;
                    *(_DWORD *)int buf = 136446466;
                    *(void *)&uint8_t buf[4] = "nw_browser_dns_service_query_record_callback";
                    *(_WORD *)&unsigned char buf[12] = 1024;
                    *(_DWORD *)&buf[14] = v101;
                    _os_log_impl(&dword_1830D4000, v90, v100, "%{public}s [B%u] change should not be invalid, no backtrace", buf, 0x12u);
                  }
                }
                else
                {
                  if (__nwlog_browser_log::onceToken[0] != -1) {
                    dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_20_44865);
                  }
                  os_log_type_t v90 = (id)gbrowserLogObj;
                  os_log_type_t v98 = v123[0];
                  if (os_log_type_enabled(v90, (os_log_type_t)v123[0]))
                  {
                    uint32_t v99 = v105[48]._os_unfair_lock_opaque;
                    *(_DWORD *)int buf = 136446466;
                    *(void *)&uint8_t buf[4] = "nw_browser_dns_service_query_record_callback";
                    *(_WORD *)&unsigned char buf[12] = 1024;
                    *(_DWORD *)&buf[14] = v99;
                    _os_log_impl(&dword_1830D4000, v90, v98, "%{public}s [B%u] change should not be invalid, backtrace limit exceeded", buf, 0x12u);
                  }
                }
              }
LABEL_200:
              if (v89) {
                free(v89);
              }
              goto LABEL_202;
            }
LABEL_116:
            int v40 = 0;
            int v39 = v105;
            goto LABEL_117;
          }
          uint64_t v57 = __nwlog_obj();
          *(_DWORD *)BOOL v123 = 136446210;
          *(void *)&v123[4] = "nw_browser_copy_txt_array_locked";
          uint64_t v58 = (char *)_os_log_send_and_compose_impl();

          type[0] = OS_LOG_TYPE_ERROR;
          char v110 = 0;
          if (__nwlog_fault(v58, type, &v110))
          {
            if (type[0] == OS_LOG_TYPE_FAULT)
            {
              os_log_type_t v59 = __nwlog_obj();
              os_log_type_t v60 = type[0];
              if (os_log_type_enabled(v59, type[0]))
              {
                *(_DWORD *)BOOL v123 = 136446210;
                *(void *)&v123[4] = "nw_browser_copy_txt_array_locked";
                _os_log_impl(&dword_1830D4000, v59, v60, "%{public}s txt: got remove event for non-existent txt_array", v123, 0xCu);
              }
            }
            else if (v110)
            {
              uint64_t v61 = (char *)__nw_create_backtrace_string();
              os_log_type_t v59 = __nwlog_obj();
              os_log_type_t v62 = type[0];
              BOOL v63 = os_log_type_enabled(v59, type[0]);
              if (v61)
              {
                if (v63)
                {
                  *(_DWORD *)BOOL v123 = 136446466;
                  *(void *)&v123[4] = "nw_browser_copy_txt_array_locked";
                  __int16 v124 = 2082;
                  *(void *)BOOL v125 = v61;
                  _os_log_impl(&dword_1830D4000, v59, v62, "%{public}s txt: got remove event for non-existent txt_array, dumping backtrace:%{public}s", v123, 0x16u);
                }

                free(v61);
                goto LABEL_113;
              }
              if (v63)
              {
                *(_DWORD *)BOOL v123 = 136446210;
                *(void *)&v123[4] = "nw_browser_copy_txt_array_locked";
                _os_log_impl(&dword_1830D4000, v59, v62, "%{public}s txt: got remove event for non-existent txt_array, no backtrace", v123, 0xCu);
              }
            }
            else
            {
              os_log_type_t v59 = __nwlog_obj();
              os_log_type_t v64 = type[0];
              if (os_log_type_enabled(v59, type[0]))
              {
                *(_DWORD *)BOOL v123 = 136446210;
                *(void *)&v123[4] = "nw_browser_copy_txt_array_locked";
                _os_log_impl(&dword_1830D4000, v59, v64, "%{public}s txt: got remove event for non-existent txt_array, backtrace limit exceeded", v123, 0xCu);
              }
            }
          }
LABEL_113:
          if (v58) {
            free(v58);
          }

          uint64_t v18 = 0;
          goto LABEL_116;
        }
        if (!nw_parameters_get_logging_disabled(*(void *)&v16[10]._os_unfair_lock_opaque))
        {
          if (__nwlog_browser_log::onceToken[0] != -1) {
            dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_20_44865);
          }
          uint64_t v28 = (id)gbrowserLogObj;
          if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
          {
            uint32_t v29 = v16[48]._os_unfair_lock_opaque;
            *(_DWORD *)int buf = 136446722;
            *(void *)&uint8_t buf[4] = "nw_browser_dns_service_query_record_callback";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = v29;
            *(_WORD *)&buf[18] = 2080;
            *(void *)&buf[20] = a5;
            _os_log_impl(&dword_1830D4000, v28, OS_LOG_TYPE_ERROR, "%{public}s [B%u] txt: a TXT record was delivered for an unknown %s", buf, 0x1Cu);
          }
        }
      }
      os_unfair_lock_unlock(v16 + 2);
LABEL_22:

      return;
    }
    uint64_t v45 = __nwlog_obj();
    *(_DWORD *)key = 136446210;
    __int16 v114 = "nw_browser_dns_service_query_record_callback";
    BOOL v46 = (char *)_os_log_send_and_compose_impl();

    buf[0] = 16;
    v123[0] = 0;
    if (__nwlog_fault(v46, buf, v123))
    {
      if (buf[0] == 17)
      {
        uint64_t v47 = __nwlog_obj();
        os_log_type_t v48 = buf[0];
        if (os_log_type_enabled(v47, (os_log_type_t)buf[0]))
        {
          *(_DWORD *)key = 136446210;
          __int16 v114 = "nw_browser_dns_service_query_record_callback";
          _os_log_impl(&dword_1830D4000, v47, v48, "%{public}s called with null browser", (uint8_t *)key, 0xCu);
        }
      }
      else if (v123[0])
      {
        uint64_t v52 = (char *)__nw_create_backtrace_string();
        uint64_t v47 = __nwlog_obj();
        os_log_type_t v53 = buf[0];
        BOOL v54 = os_log_type_enabled(v47, (os_log_type_t)buf[0]);
        if (v52)
        {
          if (v54)
          {
            *(_DWORD *)key = 136446466;
            __int16 v114 = "nw_browser_dns_service_query_record_callback";
            __int16 v115 = 2082;
            int v116 = v52;
            _os_log_impl(&dword_1830D4000, v47, v53, "%{public}s called with null browser, dumping backtrace:%{public}s", (uint8_t *)key, 0x16u);
          }

          free(v52);
          goto LABEL_93;
        }
        if (v54)
        {
          *(_DWORD *)key = 136446210;
          __int16 v114 = "nw_browser_dns_service_query_record_callback";
          _os_log_impl(&dword_1830D4000, v47, v53, "%{public}s called with null browser, no backtrace", (uint8_t *)key, 0xCu);
        }
      }
      else
      {
        uint64_t v47 = __nwlog_obj();
        os_log_type_t v56 = buf[0];
        if (os_log_type_enabled(v47, (os_log_type_t)buf[0]))
        {
          *(_DWORD *)key = 136446210;
          __int16 v114 = "nw_browser_dns_service_query_record_callback";
          _os_log_impl(&dword_1830D4000, v47, v56, "%{public}s called with null browser, backtrace limit exceeded", (uint8_t *)key, 0xCu);
        }
      }
    }
LABEL_93:
    if (v46) {
      free(v46);
    }
    goto LABEL_22;
  }
  uint64_t v41 = __nwlog_obj();
  *(_DWORD *)key = 136446210;
  __int16 v114 = "nw_browser_dns_service_query_record_callback";
  int v42 = (char *)_os_log_send_and_compose_impl();

  buf[0] = 16;
  v123[0] = 0;
  if (__nwlog_fault(v42, buf, v123))
  {
    if (buf[0] == 17)
    {
      uint64_t v43 = __nwlog_obj();
      os_log_type_t v44 = buf[0];
      if (os_log_type_enabled(v43, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)key = 136446210;
        __int16 v114 = "nw_browser_dns_service_query_record_callback";
        _os_log_impl(&dword_1830D4000, v43, v44, "%{public}s called with null dns_service", (uint8_t *)key, 0xCu);
      }
    }
    else if (v123[0])
    {
      uint64_t v49 = (char *)__nw_create_backtrace_string();
      uint64_t v43 = __nwlog_obj();
      os_log_type_t v50 = buf[0];
      BOOL v51 = os_log_type_enabled(v43, (os_log_type_t)buf[0]);
      if (v49)
      {
        if (v51)
        {
          *(_DWORD *)key = 136446466;
          __int16 v114 = "nw_browser_dns_service_query_record_callback";
          __int16 v115 = 2082;
          int v116 = v49;
          _os_log_impl(&dword_1830D4000, v43, v50, "%{public}s called with null dns_service, dumping backtrace:%{public}s", (uint8_t *)key, 0x16u);
        }

        free(v49);
        goto LABEL_88;
      }
      if (v51)
      {
        *(_DWORD *)key = 136446210;
        __int16 v114 = "nw_browser_dns_service_query_record_callback";
        _os_log_impl(&dword_1830D4000, v43, v50, "%{public}s called with null dns_service, no backtrace", (uint8_t *)key, 0xCu);
      }
    }
    else
    {
      uint64_t v43 = __nwlog_obj();
      os_log_type_t v55 = buf[0];
      if (os_log_type_enabled(v43, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)key = 136446210;
        __int16 v114 = "nw_browser_dns_service_query_record_callback";
        _os_log_impl(&dword_1830D4000, v43, v55, "%{public}s called with null dns_service, backtrace limit exceeded", (uint8_t *)key, 0xCu);
      }
    }
  }
LABEL_88:
  if (v42) {
    free(v42);
  }
}

void sub_183403280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13)
{
  _Unwind_Resume(a1);
}

BOOL nw_protocol_options_is_demux(void *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v14 = "nw_protocol_options_is_demux";
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v11 = 0;
    if (__nwlog_fault(v5, &type, &v11))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        int v6 = __nwlog_obj();
        os_log_type_t v7 = type;
        if (os_log_type_enabled(v6, type))
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v14 = "nw_protocol_options_is_demux";
          uint64_t v8 = "%{public}s called with null options";
LABEL_24:
          _os_log_impl(&dword_1830D4000, v6, v7, v8, buf, 0xCu);
        }
      }
      else if (v11)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        int v6 = __nwlog_obj();
        os_log_type_t v7 = type;
        BOOL v10 = os_log_type_enabled(v6, type);
        if (backtrace_string)
        {
          if (v10)
          {
            *(_DWORD *)int buf = 136446466;
            os_log_type_t v14 = "nw_protocol_options_is_demux";
            __int16 v15 = 2082;
            char v16 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(backtrace_string);
          goto LABEL_25;
        }
        if (v10)
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v14 = "nw_protocol_options_is_demux";
          uint64_t v8 = "%{public}s called with null options, no backtrace";
          goto LABEL_24;
        }
      }
      else
      {
        int v6 = __nwlog_obj();
        os_log_type_t v7 = type;
        if (os_log_type_enabled(v6, type))
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v14 = "nw_protocol_options_is_demux";
          uint64_t v8 = "%{public}s called with null options, backtrace limit exceeded";
          goto LABEL_24;
        }
      }
    }
LABEL_25:
    if (v5) {
      free(v5);
    }
    return 0;
  }
  if (nw_protocol_demux_copy_definition::onceToken != -1) {
    dispatch_once(&nw_protocol_demux_copy_definition::onceToken, &__block_literal_global_8_26174);
  }
  if (nw_protocol_demux_copy_definition::definition)
  {
    unsigned int v2 = os_retain((void *)nw_protocol_demux_copy_definition::definition);
    BOOL v3 = nw_protocol_options_matches_definition(a1, v2);
    if (v2) {
      os_release(v2);
    }
    return v3;
  }

  return nw_protocol_options_matches_definition(a1, 0);
}

uint64_t nw_endpoint_proxy_string_matches_pattern(const char *cStr, const char *a2)
{
  uint64_t v91 = *MEMORY[0x1E4F143B8];
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFStringRef v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], cStr, 0x8000100u);
  if (!v5)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v16 = (id)gLogObj;
    *(_DWORD *)int buf = 136446466;
    uint32_t v86 = "nw_endpoint_proxy_string_matches_pattern";
    __int16 v87 = 2082;
    uint32_t v88 = cStr;
    uint64_t v17 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v83 = 0;
    if (__nwlog_fault(v17, &type, &v83))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v18 = (id)gLogObj;
        os_log_type_t v19 = type;
        if (!os_log_type_enabled(v18, type)) {
          goto LABEL_43;
        }
        *(_DWORD *)int buf = 136446466;
        uint32_t v86 = "nw_endpoint_proxy_string_matches_pattern";
        __int16 v87 = 2082;
        uint32_t v88 = cStr;
        nw_txt_record_t v20 = "%{public}s CFStringCreateWithCString(%{public}s) failed";
LABEL_41:
        int v42 = v18;
        os_log_type_t v43 = v19;
        goto LABEL_42;
      }
      if (!v83)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v18 = (id)gLogObj;
        os_log_type_t v19 = type;
        if (!os_log_type_enabled(v18, type)) {
          goto LABEL_43;
        }
        *(_DWORD *)int buf = 136446466;
        uint32_t v86 = "nw_endpoint_proxy_string_matches_pattern";
        __int16 v87 = 2082;
        uint32_t v88 = cStr;
        nw_txt_record_t v20 = "%{public}s CFStringCreateWithCString(%{public}s) failed, backtrace limit exceeded";
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v18 = (id)gLogObj;
      os_log_type_t v27 = type;
      BOOL v28 = os_log_type_enabled(v18, type);
      if (!backtrace_string)
      {
        if (!v28)
        {
LABEL_43:

          if (!v17) {
            return 0;
          }
          goto LABEL_23;
        }
        *(_DWORD *)int buf = 136446466;
        uint32_t v86 = "nw_endpoint_proxy_string_matches_pattern";
        __int16 v87 = 2082;
        uint32_t v88 = cStr;
        nw_txt_record_t v20 = "%{public}s CFStringCreateWithCString(%{public}s) failed, no backtrace";
        int v42 = v18;
        os_log_type_t v43 = v27;
LABEL_42:
        _os_log_impl(&dword_1830D4000, v42, v43, v20, buf, 0x16u);
        goto LABEL_43;
      }
      if (v28)
      {
        *(_DWORD *)int buf = 136446722;
        uint32_t v86 = "nw_endpoint_proxy_string_matches_pattern";
        __int16 v87 = 2082;
        uint32_t v88 = cStr;
        __int16 v89 = 2082;
        os_log_type_t v90 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v18, v27, "%{public}s CFStringCreateWithCString(%{public}s) failed, dumping backtrace:%{public}s", buf, 0x20u);
      }

      free(backtrace_string);
    }
    if (!v17) {
      return 0;
    }
LABEL_23:
    free(v17);
    return 0;
  }
  CFStringRef v6 = v5;
  CFStringRef v7 = CFStringCreateWithCString(v4, a2, 0x8000100u);
  if (!v7)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v21 = (id)gLogObj;
    *(_DWORD *)int buf = 136446466;
    uint32_t v86 = "nw_endpoint_proxy_string_matches_pattern";
    __int16 v87 = 2082;
    uint32_t v88 = a2;
    BOOL v22 = (void *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v83 = 0;
    if (!__nwlog_fault((const char *)v22, &type, &v83))
    {
LABEL_61:
      if (v22) {
        free(v22);
      }
      CFRelease(v6);
      return 0;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v23 = (id)gLogObj;
      os_log_type_t v24 = type;
      if (os_log_type_enabled(v23, type))
      {
        *(_DWORD *)int buf = 136446466;
        uint32_t v86 = "nw_endpoint_proxy_string_matches_pattern";
        __int16 v87 = 2082;
        uint32_t v88 = a2;
        uint64_t v25 = "%{public}s CFStringCreateWithCString(%{public}s) failed";
LABEL_58:
        uint64_t v52 = v23;
        os_log_type_t v53 = v24;
LABEL_59:
        _os_log_impl(&dword_1830D4000, v52, v53, v25, buf, 0x16u);
      }
    }
    else
    {
      if (v83)
      {
        int v39 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v23 = (id)gLogObj;
        os_log_type_t v40 = type;
        BOOL v41 = os_log_type_enabled(v23, type);
        if (v39)
        {
          if (v41)
          {
            *(_DWORD *)int buf = 136446722;
            uint32_t v86 = "nw_endpoint_proxy_string_matches_pattern";
            __int16 v87 = 2082;
            uint32_t v88 = a2;
            __int16 v89 = 2082;
            os_log_type_t v90 = v39;
            _os_log_impl(&dword_1830D4000, v23, v40, "%{public}s CFStringCreateWithCString(%{public}s) failed, dumping backtrace:%{public}s", buf, 0x20u);
          }

          free(v39);
          goto LABEL_61;
        }
        if (!v41) {
          goto LABEL_60;
        }
        *(_DWORD *)int buf = 136446466;
        uint32_t v86 = "nw_endpoint_proxy_string_matches_pattern";
        __int16 v87 = 2082;
        uint32_t v88 = a2;
        uint64_t v25 = "%{public}s CFStringCreateWithCString(%{public}s) failed, no backtrace";
        uint64_t v52 = v23;
        os_log_type_t v53 = v40;
        goto LABEL_59;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v23 = (id)gLogObj;
      os_log_type_t v24 = type;
      if (os_log_type_enabled(v23, type))
      {
        *(_DWORD *)int buf = 136446466;
        uint32_t v86 = "nw_endpoint_proxy_string_matches_pattern";
        __int16 v87 = 2082;
        uint32_t v88 = a2;
        uint64_t v25 = "%{public}s CFStringCreateWithCString(%{public}s) failed, backtrace limit exceeded";
        goto LABEL_58;
      }
    }
LABEL_60:

    goto LABEL_61;
  }
  CFStringRef v8 = v7;
  if (CFStringHasSuffix(v6, @"."))
  {
    v92.length = CFStringGetLength(v6) - 1;
    v92.location = 0;
    CFStringRef v9 = CFStringCreateWithSubstring(v4, v6, v92);
    CFStringRef v10 = v9;
    if (!v9)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v11 = (id)gLogObj;
      *(_DWORD *)int buf = 136446210;
      uint32_t v86 = "nw_endpoint_proxy_string_matches_pattern";
      os_log_type_t v12 = (void *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v83 = 0;
      if (!__nwlog_fault((const char *)v12, &type, &v83))
      {
LABEL_109:
        if (v12) {
          free(v12);
        }
        uint64_t v29 = 0;
        CFStringRef v33 = 0;
        CFStringRef v10 = 0;
        goto LABEL_131;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        char v13 = (id)gLogObj;
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)int buf = 136446210;
          uint32_t v86 = "nw_endpoint_proxy_string_matches_pattern";
          __int16 v15 = "%{public}s CFStringCreateMutableCopy failed";
LABEL_106:
          os_log_type_t v74 = v13;
          os_log_type_t v75 = v14;
LABEL_107:
          _os_log_impl(&dword_1830D4000, v74, v75, v15, buf, 0xCu);
        }
      }
      else
      {
        if (v83)
        {
          uint64_t v49 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          char v13 = (id)gLogObj;
          os_log_type_t v50 = type;
          BOOL v51 = os_log_type_enabled(v13, type);
          if (v49)
          {
            if (v51)
            {
              *(_DWORD *)int buf = 136446466;
              uint32_t v86 = "nw_endpoint_proxy_string_matches_pattern";
              __int16 v87 = 2082;
              uint32_t v88 = v49;
              _os_log_impl(&dword_1830D4000, v13, v50, "%{public}s CFStringCreateMutableCopy failed, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(v49);
            goto LABEL_109;
          }
          if (!v51) {
            goto LABEL_108;
          }
          *(_DWORD *)int buf = 136446210;
          uint32_t v86 = "nw_endpoint_proxy_string_matches_pattern";
          __int16 v15 = "%{public}s CFStringCreateMutableCopy failed, no backtrace";
          os_log_type_t v74 = v13;
          os_log_type_t v75 = v50;
          goto LABEL_107;
        }
        char v13 = __nwlog_obj();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)int buf = 136446210;
          uint32_t v86 = "nw_endpoint_proxy_string_matches_pattern";
          __int16 v15 = "%{public}s CFStringCreateMutableCopy failed, backtrace limit exceeded";
          goto LABEL_106;
        }
      }
LABEL_108:

      goto LABEL_109;
    }
  }
  else
  {
    CFStringRef v10 = 0;
    CFStringRef v9 = v6;
  }
  uint64_t v29 = 1;
  if (CFStringCompare(v9, v8, 1uLL) == kCFCompareEqualTo)
  {
LABEL_130:
    CFStringRef v33 = 0;
LABEL_131:
    CFArrayRef v55 = 0;
    CFArrayRef v31 = (const __CFArray *)v6;
    goto LABEL_157;
  }
  CFArrayRef ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings(v4, v9, @".");
  if (!ArrayBySeparatingStrings)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v44 = (id)gLogObj;
    *(_DWORD *)int buf = 136446210;
    uint32_t v86 = "nw_endpoint_proxy_string_matches_pattern";
    uint64_t v45 = (void *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v83 = 0;
    if (!__nwlog_fault((const char *)v45, &type, &v83))
    {
LABEL_127:
      if (v45) {
        free(v45);
      }
      uint64_t v29 = 0;
      goto LABEL_130;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v46 = (id)gLogObj;
      os_log_type_t v47 = type;
      if (os_log_type_enabled(v46, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint32_t v86 = "nw_endpoint_proxy_string_matches_pattern";
        os_log_type_t v48 = "%{public}s CFStringCreateArrayBySeparatingStrings failed";
LABEL_124:
        uint64_t v80 = v46;
        os_log_type_t v81 = v47;
LABEL_125:
        _os_log_impl(&dword_1830D4000, v80, v81, v48, buf, 0xCu);
      }
    }
    else
    {
      if (v83)
      {
        uint64_t v66 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v46 = (id)gLogObj;
        os_log_type_t v67 = type;
        BOOL v68 = os_log_type_enabled(v46, type);
        if (v66)
        {
          if (v68)
          {
            *(_DWORD *)int buf = 136446466;
            uint32_t v86 = "nw_endpoint_proxy_string_matches_pattern";
            __int16 v87 = 2082;
            uint32_t v88 = v66;
            _os_log_impl(&dword_1830D4000, v46, v67, "%{public}s CFStringCreateArrayBySeparatingStrings failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v66);
          goto LABEL_127;
        }
        if (!v68) {
          goto LABEL_126;
        }
        *(_DWORD *)int buf = 136446210;
        uint32_t v86 = "nw_endpoint_proxy_string_matches_pattern";
        os_log_type_t v48 = "%{public}s CFStringCreateArrayBySeparatingStrings failed, no backtrace";
        uint64_t v80 = v46;
        os_log_type_t v81 = v67;
        goto LABEL_125;
      }
      BOOL v46 = __nwlog_obj();
      os_log_type_t v47 = type;
      if (os_log_type_enabled(v46, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint32_t v86 = "nw_endpoint_proxy_string_matches_pattern";
        os_log_type_t v48 = "%{public}s CFStringCreateArrayBySeparatingStrings failed, backtrace limit exceeded";
        goto LABEL_124;
      }
    }
LABEL_126:

    goto LABEL_127;
  }
  CFArrayRef v31 = ArrayBySeparatingStrings;
  if (CFStringHasSuffix(v8, @"."))
  {
    v93.length = CFStringGetLength(v8) - 1;
    v93.location = 0;
    CFStringRef v32 = CFStringCreateWithSubstring(v4, v8, v93);
    CFStringRef v33 = v32;
    if (!v32)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v34 = (id)gLogObj;
      *(_DWORD *)int buf = 136446210;
      uint32_t v86 = "nw_endpoint_proxy_string_matches_pattern";
      os_log_type_t v35 = (void *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v83 = 0;
      if (!__nwlog_fault((const char *)v35, &type, &v83))
      {
LABEL_153:
        if (v35) {
          free(v35);
        }
        CFArrayRef v55 = 0;
        CFStringRef v33 = 0;
        goto LABEL_156;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint32_t v36 = __nwlog_obj();
        os_log_type_t v37 = type;
        if (os_log_type_enabled(v36, type))
        {
          *(_DWORD *)int buf = 136446210;
          uint32_t v86 = "nw_endpoint_proxy_string_matches_pattern";
          unint64_t v38 = "%{public}s CFStringCreateMutableCopy failed";
LABEL_151:
          _os_log_impl(&dword_1830D4000, v36, v37, v38, buf, 0xCu);
        }
      }
      else
      {
        if (v83)
        {
          __int16 v78 = (char *)__nw_create_backtrace_string();
          uint32_t v36 = __nwlog_obj();
          os_log_type_t v37 = type;
          BOOL v79 = os_log_type_enabled(v36, type);
          if (v78)
          {
            if (v79)
            {
              *(_DWORD *)int buf = 136446466;
              uint32_t v86 = "nw_endpoint_proxy_string_matches_pattern";
              __int16 v87 = 2082;
              uint32_t v88 = v78;
              _os_log_impl(&dword_1830D4000, v36, v37, "%{public}s CFStringCreateMutableCopy failed, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(v78);
            goto LABEL_153;
          }
          if (!v79) {
            goto LABEL_152;
          }
          *(_DWORD *)int buf = 136446210;
          uint32_t v86 = "nw_endpoint_proxy_string_matches_pattern";
          unint64_t v38 = "%{public}s CFStringCreateMutableCopy failed, no backtrace";
          goto LABEL_151;
        }
        uint32_t v36 = __nwlog_obj();
        os_log_type_t v37 = type;
        if (os_log_type_enabled(v36, type))
        {
          *(_DWORD *)int buf = 136446210;
          uint32_t v86 = "nw_endpoint_proxy_string_matches_pattern";
          unint64_t v38 = "%{public}s CFStringCreateMutableCopy failed, backtrace limit exceeded";
          goto LABEL_151;
        }
      }
LABEL_152:

      goto LABEL_153;
    }
  }
  else
  {
    CFStringRef v33 = 0;
    CFStringRef v32 = v8;
  }
  CFArrayRef v54 = CFStringCreateArrayBySeparatingStrings(v4, v32, @".");
  if (!v54)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v69 = (id)gLogObj;
    *(_DWORD *)int buf = 136446210;
    uint32_t v86 = "nw_endpoint_proxy_string_matches_pattern";
    char v70 = (void *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v83 = 0;
    if (!__nwlog_fault((const char *)v70, &type, &v83))
    {
LABEL_144:
      if (v70) {
        free(v70);
      }
      CFArrayRef v55 = 0;
      goto LABEL_156;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v71 = __nwlog_obj();
      os_log_type_t v72 = type;
      if (os_log_type_enabled(v71, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint32_t v86 = "nw_endpoint_proxy_string_matches_pattern";
        os_log_type_t v73 = "%{public}s CFStringCreateArrayBySeparatingStrings failed";
LABEL_142:
        _os_log_impl(&dword_1830D4000, v71, v72, v73, buf, 0xCu);
      }
    }
    else
    {
      if (v83)
      {
        Class v76 = (char *)__nw_create_backtrace_string();
        uint64_t v71 = __nwlog_obj();
        os_log_type_t v72 = type;
        BOOL v77 = os_log_type_enabled(v71, type);
        if (v76)
        {
          if (v77)
          {
            *(_DWORD *)int buf = 136446466;
            uint32_t v86 = "nw_endpoint_proxy_string_matches_pattern";
            __int16 v87 = 2082;
            uint32_t v88 = v76;
            _os_log_impl(&dword_1830D4000, v71, v72, "%{public}s CFStringCreateArrayBySeparatingStrings failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v76);
          goto LABEL_144;
        }
        if (!v77) {
          goto LABEL_143;
        }
        *(_DWORD *)int buf = 136446210;
        uint32_t v86 = "nw_endpoint_proxy_string_matches_pattern";
        os_log_type_t v73 = "%{public}s CFStringCreateArrayBySeparatingStrings failed, no backtrace";
        goto LABEL_142;
      }
      uint64_t v71 = __nwlog_obj();
      os_log_type_t v72 = type;
      if (os_log_type_enabled(v71, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint32_t v86 = "nw_endpoint_proxy_string_matches_pattern";
        os_log_type_t v73 = "%{public}s CFStringCreateArrayBySeparatingStrings failed, backtrace limit exceeded";
        goto LABEL_142;
      }
    }
LABEL_143:

    goto LABEL_144;
  }
  CFArrayRef v55 = v54;
  if (CFArrayGetCount(v54) < 1
    || CFArrayGetCount(v31) < 1
    || (Count = CFArrayGetCount(v31), v57 = CFArrayGetCount(v55), BOOL v58 = Count < 1, v59 = Count - 1, v58)
    || (CFIndex v60 = v57 - 1, v57 < 1))
  {
LABEL_156:
    CFRelease(v6);
    uint64_t v29 = 0;
    goto LABEL_157;
  }
  while (1)
  {
    CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v55, v60);
    CFStringRef v62 = (const __CFString *)CFArrayGetValueAtIndex(v31, v59);
    if (!v60 && (!ValueAtIndex || !CFStringGetLength(ValueAtIndex))) {
      CFStringRef ValueAtIndex = @"*";
    }
    if (CFStringCompare(ValueAtIndex, v62, 1uLL)) {
      break;
    }
    uint64_t v29 = 1;
    if (!v59 || !v60) {
      goto LABEL_148;
    }
    --v59;
    --v60;
LABEL_90:
    uint64_t v29 = 0;
    if (v59 < 0 || v60 < 0) {
      goto LABEL_148;
    }
  }
  if (CFStringCompare(ValueAtIndex, @"*", 1uLL) == kCFCompareEqualTo)
  {
    while (1)
    {
      CFStringRef v63 = (const __CFString *)CFArrayGetValueAtIndex(v55, v60);
      CFStringRef v64 = v63;
      if (!v60 && (!v63 || !CFStringGetLength(v63))) {
        CFStringRef v64 = @"*";
      }
      if (CFStringCompare(v64, @"*", 1uLL)) {
        break;
      }
      BOOL v58 = v60-- <= 0;
      if (v58)
      {
        uint64_t v29 = 1;
        goto LABEL_148;
      }
    }
    do
    {
      CFStringRef v65 = (const __CFString *)CFArrayGetValueAtIndex(v31, v59);
      if (CFStringCompare(v64, v65, 1uLL) == kCFCompareEqualTo) {
        goto LABEL_90;
      }
      BOOL v58 = v59-- <= 0;
    }
    while (!v58);
  }
  uint64_t v29 = 0;
LABEL_148:
  CFRelease(v6);
LABEL_157:
  CFRelease(v31);
  CFRelease(v8);
  if (v55) {
    CFRelease(v55);
  }
  if (v10) {
    CFRelease(v10);
  }
  if (v33) {
    CFRelease(v33);
  }
  return v29;
}

void nw_endpoint_proxy_start_next_child(NWConcrete_nw_endpoint_handler *a1)
{
  uint64_t v174 = *MEMORY[0x1E4F143B8];
  int v1 = a1;
  char v150 = v1;
  if (!v1)
  {
    id v69 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v159 = "nw_endpoint_proxy_start_next_child";
    char v70 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v156 = 0;
    if (__nwlog_fault(v70, &type, &v156))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v71 = __nwlog_obj();
        os_log_type_t v72 = type;
        if (os_log_type_enabled(v71, type))
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v159 = "nw_endpoint_proxy_start_next_child";
          _os_log_impl(&dword_1830D4000, v71, v72, "%{public}s called with null handler", buf, 0xCu);
        }
      }
      else if (v156)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        uint64_t v71 = __nwlog_obj();
        os_log_type_t v74 = type;
        BOOL v75 = os_log_type_enabled(v71, type);
        if (backtrace_string)
        {
          if (v75)
          {
            *(_DWORD *)int buf = 136446466;
            os_log_type_t v159 = "nw_endpoint_proxy_start_next_child";
            __int16 v160 = 2082;
            os_log_type_t v161 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v71, v74, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_159;
        }
        if (v75)
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v159 = "nw_endpoint_proxy_start_next_child";
          _os_log_impl(&dword_1830D4000, v71, v74, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        uint64_t v71 = __nwlog_obj();
        os_log_type_t v87 = type;
        if (os_log_type_enabled(v71, type))
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v159 = "nw_endpoint_proxy_start_next_child";
          _os_log_impl(&dword_1830D4000, v71, v87, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_159:
    if (v70) {
      free(v70);
    }
    goto LABEL_86;
  }
  unsigned int v2 = v1;
  uint64_t v3 = v2[29];

  if (v3 != 3)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    CFStringRef v8 = (id)gLogObj;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      if (v3 > 5) {
        nw_txt_record_t v20 = "unknown-mode";
      }
      else {
        nw_txt_record_t v20 = off_1E523FB08[v3];
      }
      *(_DWORD *)int buf = 136446722;
      os_log_type_t v159 = "nw_endpoint_proxy_start_next_child";
      __int16 v160 = 2082;
      os_log_type_t v161 = (void *)v20;
      __int16 v162 = 2082;
      BOOL v163 = "proxy";
      _os_log_impl(&dword_1830D4000, v8, OS_LOG_TYPE_DEFAULT, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
    }
    goto LABEL_103;
  }
  CFAllocatorRef v4 = v2;
  int state = v4->state;

  if ((state & 0xFFFFFFFE) != 4)
  {
    id v21 = nw_endpoint_handler_copy_proxy(v4);
    BOOL v22 = v21;
    if (v21)
    {
      uint64_t v23 = *((void *)v21 + 1);
      if (!v23 || (uint64_t v24 = *(void *)(v23 + 24) - *(void *)(v23 + 16)) == 0)
      {
        nw_endpoint_handler_handle_failure(v4);
        id v34 = -[NWConcrete_nw_error initWithDomain:code:]([NWConcrete_nw_error alloc], 1, 50);
        v4->event = (nw_endpoint_handler_event_s)327684;
        nw_endpoint_handler_report(v4, 0, &v4->event.domain, v34);

LABEL_85:
        goto LABEL_86;
      }
      unint64_t v25 = *((unsigned int *)v22 + 6);
      int v26 = *((_DWORD *)v22 + 6);
      if (v25 >= v24 >> 3)
      {
        unint64_t v38 = v4;
        char v39 = *((unsigned char *)v38 + 268);

        if ((v39 & 0x20) == 0)
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          os_log_type_t v40 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
          {
            BOOL v41 = v38;

            int v42 = v41;
            char v43 = *((unsigned char *)v38 + 268);

            if (v43) {
              id v44 = "dry-run ";
            }
            else {
              id v44 = "";
            }
            nw_endpoint_t v45 = nw_endpoint_handler_copy_endpoint(v42);
            logging_description = nw_endpoint_get_logging_description(v45);
            os_log_type_t v146 = v44;
            id_str = v41->id_str;
            os_log_type_t v47 = v42;
            os_log_type_t v48 = v47;
            uint64_t v49 = v4->state;
            if (v49 > 5) {
              os_log_type_t v50 = "unknown-state";
            }
            else {
              os_log_type_t v50 = off_1E523FB38[v49];
            }

            CFArrayRef v54 = v48;
            CFArrayRef v55 = v54;
            os_log_type_t v56 = "path";
            switch(v2[29])
            {
              case 0u:
                break;
              case 1u:
                os_log_type_t v56 = "resolver";
                break;
              case 2u:
                os_log_type_t v56 = nw_endpoint_flow_mode_string(v54[31]);
                break;
              case 3u:
                os_log_type_t v56 = "proxy";
                break;
              case 4u:
                os_log_type_t v56 = "fallback";
                break;
              case 5u:
                os_log_type_t v56 = "transform";
                break;
              default:
                os_log_type_t v56 = "unknown-mode";
                break;
            }

            os_log_type_t v67 = v55;
            os_unfair_lock_lock((os_unfair_lock_t)v67 + 28);
            id v68 = v67[8];
            os_unfair_lock_unlock((os_unfair_lock_t)v67 + 28);

            *(_DWORD *)int buf = 136448002;
            os_log_type_t v159 = "nw_endpoint_proxy_start_next_child";
            __int16 v160 = 2082;
            os_log_type_t v161 = id_str;
            __int16 v162 = 2082;
            BOOL v163 = v146;
            __int16 v164 = 2082;
            BOOL v165 = logging_description;
            __int16 v166 = 2082;
            int v167 = v50;
            __int16 v168 = 2082;
            id v169 = v56;
            __int16 v170 = 2114;
            id v171 = v68;
            __int16 v172 = 1024;
            LODWORD(v173) = v26;
            _os_log_impl(&dword_1830D4000, v40, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] no child at index %u", buf, 0x4Eu);
          }
        }
        goto LABEL_85;
      }
      if (*((void *)v22 + 11))
      {
        nw_queue_cancel_source(*((void *)v22 + 11));
        *((void *)v22 + 11) = 0;
        int v26 = *((_DWORD *)v22 + 6);
        uint64_t v23 = *((void *)v22 + 1);
      }
      *((_DWORD *)v22 + 6) = v26 + 1;
      nw_array_get_object_at_index(v23, v25);
      os_log_type_t v27 = (NWConcrete_nw_endpoint_handler *)objc_claimAutoreleasedReturnValue();
      id v28 = nw_endpoint_handler_copy_parameters(v27);
      uint64_t v29 = v28;
      if (v28)
      {
        uint64_t v30 = (id *)v28;
        id v31 = v30[23];

        if (v31)
        {
          int is_privacy_proxy = nw_proxy_config_is_privacy_proxy(v31, 0);
          BOOL v33 = nw_proxy_config_has_fallback_proxy_agent(v31) || nw_proxy_config_has_fallback_proxy_config(v31);
          int v51 = nw_proxy_config_use_fast_fallback(v31);
        }
        else
        {
          int v51 = 0;
          BOOL v33 = 0;
          int is_privacy_proxy = 0;
        }
      }
      else
      {
        int v51 = 0;
        BOOL v33 = 0;
        int is_privacy_proxy = 0;
      }
      if (*((unsigned char *)v22 + 96))
      {
        if (((is_privacy_proxy | ((*((unsigned char *)v22 + 96) & 8) >> 3)) & 1) == 0) {
          goto LABEL_66;
        }
        char v58 = (*((unsigned char *)v22 + 96) & 0x18) != 0 ? is_privacy_proxy : 0;
        if (v58) {
          goto LABEL_66;
        }
      }
      else if ((*((unsigned char *)v22 + 96) & 2) != 0)
      {
        CFIndex v57 = v4;
        v57->privacy_stance = 3;

LABEL_66:
        nw_endpoint_handler_cancel(v27, 0, 1);
LABEL_67:

        goto LABEL_85;
      }
      CFIndex v59 = (void *)*((void *)v22 + 10);
      *((void *)v22 + 10) = 0;

      *((unsigned char *)v22 + 97) &= 0xF3u;
      nw_endpoint_handler_start(v27);
      if (nw_endpoint_handler_get_mode(v4) != 3) {
        goto LABEL_67;
      }
      if (!(v33 | v51)) {
        goto LABEL_67;
      }
      if ((*((unsigned char *)v22 + 97) & 8) != 0) {
        goto LABEL_67;
      }
      if (*((void *)v22 + 4)) {
        goto LABEL_67;
      }
      uint64_t v60 = *((void *)v22 + 1);
      if (!v60) {
        goto LABEL_67;
      }
      unint64_t v61 = *((unsigned int *)v22 + 6);
      if (v61 >= (uint64_t)(*(void *)(v60 + 24) - *(void *)(v60 + 16)) >> 3) {
        goto LABEL_67;
      }
      nw_array_get_object_at_index(v60, v61);
      CFStringRef v62 = (NWConcrete_nw_endpoint_handler *)objc_claimAutoreleasedReturnValue();
      if (!v62)
      {
LABEL_184:

        goto LABEL_67;
      }
      os_log_type_t v149 = v62;
      id v63 = nw_endpoint_handler_copy_parameters(v62);
      uint64_t v147 = v63;
      if (v63)
      {
        id v64 = nw_parameters_copy_effective_proxy_config(v63);
        CFStringRef v65 = v64;
        if (v64) {
          int mode = nw_proxy_config_get_mode(v64);
        }
        else {
          int mode = 4;
        }
      }
      else
      {
        int mode = 0;
      }
      if ((*((unsigned char *)v22 + 97) & 4) == 0)
      {
        uint32_t v88 = &nw_setting_proxy_fast_failure_threshold;
        if (v51)
        {
          int64_t v89 = 2;
        }
        else
        {
          uint32_t v88 = &nw_setting_proxy_failure_threshold;
          int64_t v89 = 5;
        }
        if ((unint64_t int64_with_default = networkd_settings_get_int64_with_default(*v88, v89),
              nw_endpoint_proxy_get_success_count(v149))
          && (!nw_endpoint_proxy_get_success_count(v27)
           || int64_with_default < nw_endpoint_proxy_get_failure_count(v27))
          || (mode == 4 ? (int v91 = v51) : (int v91 = 0),
              v91 == 1 && int64_with_default < nw_endpoint_proxy_get_failure_count(v27)))
        {
          int minimize_logging = nw_endpoint_handler_get_minimize_logging(v4);
          char logging_disabled = nw_endpoint_handler_get_logging_disabled(v4);
          if (minimize_logging)
          {
            if (logging_disabled) {
              goto LABEL_133;
            }
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
            }
            __int16 v94 = (id)gconnectionLogObj;
            if (os_log_type_enabled(v94, OS_LOG_TYPE_DEBUG))
            {
              id_string = nw_endpoint_handler_get_id_string(v4);
              unint64_t v142 = nw_endpoint_handler_dry_run_string(v4);
              nw_endpoint_t deltab = nw_endpoint_handler_copy_endpoint(v4);
              os_log_type_t v133 = nw_endpoint_get_logging_description(deltab);
              BOOL v134 = nw_endpoint_handler_state_string(v4);
              BOOL v135 = nw_endpoint_handler_mode_string(v4);
              id v136 = nw_endpoint_handler_copy_current_path(v4);
              *(_DWORD *)int buf = 136447746;
              os_log_type_t v159 = "nw_endpoint_proxy_start_next_child";
              __int16 v160 = 2082;
              os_log_type_t v161 = (void *)id_string;
              __int16 v162 = 2082;
              BOOL v163 = v142;
              __int16 v164 = 2082;
              BOOL v165 = v133;
              __int16 v166 = 2082;
              int v167 = v134;
              __int16 v168 = 2082;
              id v169 = v135;
              __int16 v170 = 2114;
              id v171 = v136;
              _os_log_impl(&dword_1830D4000, v94, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] starting next child endpoint immediately", buf, 0x48u);
            }
          }
          else
          {
            if (logging_disabled)
            {
LABEL_133:
              id v100 = nw_endpoint_handler_copy_context(v4);
              v154[0] = MEMORY[0x1E4F143A8];
              v154[1] = 3221225472;
              void v154[2] = ___ZL34nw_endpoint_proxy_start_next_childP30NWConcrete_nw_endpoint_handler_block_invoke;
              v154[3] = &unk_1E524BAA8;
              BOOL v155 = v4;
              nw_queue_context_async(v100, v154);
              uint32_t v101 = (id *)&v155;
LABEL_183:

              CFStringRef v62 = v149;
              goto LABEL_184;
            }
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
            }
            __int16 v94 = (id)gconnectionLogObj;
            if (os_log_type_enabled(v94, OS_LOG_TYPE_INFO))
            {
              uint64_t v95 = nw_endpoint_handler_get_id_string(v4);
              os_log_type_t v139 = nw_endpoint_handler_dry_run_string(v4);
              nw_endpoint_t deltaa = nw_endpoint_handler_copy_endpoint(v4);
              os_log_type_t v96 = nw_endpoint_get_logging_description(deltaa);
              uint32_t v97 = nw_endpoint_handler_state_string(v4);
              os_log_type_t v98 = nw_endpoint_handler_mode_string(v4);
              id v99 = nw_endpoint_handler_copy_current_path(v4);
              *(_DWORD *)int buf = 136447746;
              os_log_type_t v159 = "nw_endpoint_proxy_start_next_child";
              __int16 v160 = 2082;
              os_log_type_t v161 = (void *)v95;
              __int16 v162 = 2082;
              BOOL v163 = v139;
              __int16 v164 = 2082;
              BOOL v165 = v96;
              __int16 v166 = 2082;
              int v167 = v97;
              __int16 v168 = 2082;
              id v169 = v98;
              __int16 v170 = 2114;
              id v171 = v99;
              _os_log_impl(&dword_1830D4000, v94, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] starting next child endpoint immediately", buf, 0x48u);
            }
          }

          goto LABEL_133;
        }
      }
      if ((*((unsigned char *)v22 + 97) & 4) != 0) {
        int v102 = 0;
      }
      else {
        int v102 = v51;
      }
      unint64_t delta = nw_endpoint_proxy_get_timeout_nanos(v27, v102);
      int v103 = nw_endpoint_handler_get_minimize_logging(v4);
      char v104 = nw_endpoint_handler_get_logging_disabled(v4);
      if (v103)
      {
        if (v104)
        {
LABEL_144:
          id v111 = nw_endpoint_handler_copy_context(v4);
          v151[0] = MEMORY[0x1E4F143A8];
          v151[1] = 3221225472;
          v151[2] = ___ZL34nw_endpoint_proxy_start_next_childP30NWConcrete_nw_endpoint_handler_block_invoke_166;
          v151[3] = &unk_1E524B9A0;
          v152 = v22;
          id v153 = v4;
          *((void *)v22 + 11) = nw_queue_context_create_source(v111, 2, 3, 0, v151, 0);

          uint64_t v112 = *((void *)v22 + 11);
          if (v112)
          {
            dispatch_time_t v113 = dispatch_time(0x8000000000000000, delta);
            nw_queue_set_timer_values(v112, v113, 0xFFFFFFFFFFFFFFFFLL, 0xF4240uLL);
            nw_queue_activate_source(*((void *)v22 + 11));
LABEL_182:
            uint32_t v101 = (id *)&v152;
            id v100 = v153;
            goto LABEL_183;
          }
          __int16 v114 = __nwlog_obj();
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v159 = "nw_endpoint_proxy_start_next_child";
          __int16 v115 = (char *)_os_log_send_and_compose_impl();

          os_log_type_t type = OS_LOG_TYPE_ERROR;
          char v156 = 0;
          if (__nwlog_fault(v115, &type, &v156))
          {
            if (type == OS_LOG_TYPE_FAULT)
            {
              int v116 = __nwlog_obj();
              os_log_type_t v117 = type;
              if (os_log_type_enabled(v116, type))
              {
                *(_DWORD *)int buf = 136446210;
                os_log_type_t v159 = "nw_endpoint_proxy_start_next_child";
                _os_log_impl(&dword_1830D4000, v116, v117, "%{public}s nw_queue_context_create_source(timer) failed", buf, 0xCu);
              }
            }
            else
            {
              if (v156)
              {
                uint64_t v121 = (char *)__nw_create_backtrace_string();
                __int16 v122 = __nwlog_obj();
                os_log_type_t v123 = type;
                BOOL v124 = os_log_type_enabled(v122, type);
                if (v121)
                {
                  if (v124)
                  {
                    *(_DWORD *)int buf = 136446466;
                    os_log_type_t v159 = "nw_endpoint_proxy_start_next_child";
                    __int16 v160 = 2082;
                    os_log_type_t v161 = v121;
                    _os_log_impl(&dword_1830D4000, v122, v123, "%{public}s nw_queue_context_create_source(timer) failed, dumping backtrace:%{public}s", buf, 0x16u);
                  }

                  free(v121);
                }
                else
                {
                  if (v124)
                  {
                    *(_DWORD *)int buf = 136446210;
                    os_log_type_t v159 = "nw_endpoint_proxy_start_next_child";
                    _os_log_impl(&dword_1830D4000, v122, v123, "%{public}s nw_queue_context_create_source(timer) failed, no backtrace", buf, 0xCu);
                  }
                }
                goto LABEL_180;
              }
              int v116 = __nwlog_obj();
              os_log_type_t v126 = type;
              if (os_log_type_enabled(v116, type))
              {
                *(_DWORD *)int buf = 136446210;
                os_log_type_t v159 = "nw_endpoint_proxy_start_next_child";
                _os_log_impl(&dword_1830D4000, v116, v126, "%{public}s nw_queue_context_create_source(timer) failed, backtrace limit exceeded", buf, 0xCu);
              }
            }
          }
LABEL_180:
          if (v115) {
            free(v115);
          }
          goto LABEL_182;
        }
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        uint64_t v105 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v105, OS_LOG_TYPE_DEBUG))
        {
          __int16 v127 = nw_endpoint_handler_get_id_string(v4);
          __int16 v138 = nw_endpoint_handler_dry_run_string(v4);
          nw_endpoint_t v141 = nw_endpoint_handler_copy_endpoint(v4);
          uint64_t v128 = nw_endpoint_get_logging_description(v141);
          os_log_type_t v129 = nw_endpoint_handler_state_string(v4);
          BOOL v130 = nw_endpoint_handler_mode_string(v4);
          id v131 = nw_endpoint_handler_copy_current_path(v4);
          *(_DWORD *)int buf = 136448002;
          os_log_type_t v159 = "nw_endpoint_proxy_start_next_child";
          __int16 v160 = 2082;
          os_log_type_t v161 = (void *)v127;
          __int16 v162 = 2082;
          BOOL v163 = v138;
          __int16 v164 = 2082;
          BOOL v165 = v128;
          __int16 v166 = 2082;
          int v167 = v129;
          __int16 v168 = 2082;
          id v169 = v130;
          __int16 v170 = 2114;
          id v171 = v131;
          __int16 v172 = 2048;
          unint64_t v173 = delta / 0xF4240;
          _os_log_impl(&dword_1830D4000, v105, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] starting next child endpoint in %llums", buf, 0x52u);
        }
      }
      else
      {
        if (v104) {
          goto LABEL_144;
        }
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        uint64_t v105 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v105, OS_LOG_TYPE_INFO))
        {
          unint64_t v140 = nw_endpoint_handler_get_id_string(v4);
          uint64_t v137 = nw_endpoint_handler_dry_run_string(v4);
          nw_endpoint_t v106 = nw_endpoint_handler_copy_endpoint(v4);
          int v107 = nw_endpoint_get_logging_description(v106);
          uint64_t v108 = nw_endpoint_handler_state_string(v4);
          char v109 = nw_endpoint_handler_mode_string(v4);
          id v110 = nw_endpoint_handler_copy_current_path(v4);
          *(_DWORD *)int buf = 136448002;
          os_log_type_t v159 = "nw_endpoint_proxy_start_next_child";
          __int16 v160 = 2082;
          os_log_type_t v161 = (void *)v140;
          __int16 v162 = 2082;
          BOOL v163 = v137;
          __int16 v164 = 2082;
          BOOL v165 = v107;
          __int16 v166 = 2082;
          int v167 = v108;
          __int16 v168 = 2082;
          id v169 = v109;
          __int16 v170 = 2114;
          id v171 = v110;
          __int16 v172 = 2048;
          unint64_t v173 = delta / 0xF4240;
          _os_log_impl(&dword_1830D4000, v105, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] starting next child endpoint in %llums", buf, 0x52u);
        }
      }

      goto LABEL_144;
    }
    char v83 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v159 = "nw_endpoint_proxy_start_next_child";
    uint32_t v84 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v156 = 0;
    if (__nwlog_fault(v84, &type, &v156))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v85 = __nwlog_obj();
        os_log_type_t v86 = type;
        if (os_log_type_enabled(v85, type))
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v159 = "nw_endpoint_proxy_start_next_child";
          _os_log_impl(&dword_1830D4000, v85, v86, "%{public}s called with null endpoint_proxy", buf, 0xCu);
        }
      }
      else if (v156)
      {
        long long v118 = (char *)__nw_create_backtrace_string();
        uint64_t v85 = __nwlog_obj();
        os_log_type_t v119 = type;
        BOOL v120 = os_log_type_enabled(v85, type);
        if (v118)
        {
          if (v120)
          {
            *(_DWORD *)int buf = 136446466;
            os_log_type_t v159 = "nw_endpoint_proxy_start_next_child";
            __int16 v160 = 2082;
            os_log_type_t v161 = v118;
            _os_log_impl(&dword_1830D4000, v85, v119, "%{public}s called with null endpoint_proxy, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v118);
          goto LABEL_175;
        }
        if (v120)
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v159 = "nw_endpoint_proxy_start_next_child";
          _os_log_impl(&dword_1830D4000, v85, v119, "%{public}s called with null endpoint_proxy, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        uint64_t v85 = __nwlog_obj();
        os_log_type_t v125 = type;
        if (os_log_type_enabled(v85, type))
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v159 = "nw_endpoint_proxy_start_next_child";
          _os_log_impl(&dword_1830D4000, v85, v125, "%{public}s called with null endpoint_proxy, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_175:
    if (v84) {
      free(v84);
    }
    goto LABEL_85;
  }
  if (nw_endpoint_handler_get_minimize_logging(v4))
  {
    if ((nw_endpoint_handler_get_logging_disabled(v4) & 1) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      CFStringRef v8 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      {
        Class v76 = nw_endpoint_handler_get_id_string(v4);
        BOOL v77 = nw_endpoint_handler_dry_run_string(v4);
        nw_endpoint_t v78 = nw_endpoint_handler_copy_endpoint(v4);
        BOOL v79 = nw_endpoint_get_logging_description(v78);
        uint64_t v80 = nw_endpoint_handler_state_string(v4);
        os_log_type_t v81 = nw_endpoint_handler_mode_string(v4);
        id v82 = nw_endpoint_handler_copy_current_path(v4);
        *(_DWORD *)int buf = 136447746;
        os_log_type_t v159 = "nw_endpoint_proxy_start_next_child";
        __int16 v160 = 2082;
        os_log_type_t v161 = (void *)v76;
        __int16 v162 = 2082;
        BOOL v163 = v77;
        __int16 v164 = 2082;
        BOOL v165 = v79;
        __int16 v166 = 2082;
        int v167 = v80;
        __int16 v168 = 2082;
        id v169 = v81;
        __int16 v170 = 2114;
        id v171 = v82;
        _os_log_impl(&dword_1830D4000, v8, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] not starting next child", buf, 0x48u);
      }
      goto LABEL_103;
    }
  }
  else
  {
    CFStringRef v6 = v4;
    char v7 = *((unsigned char *)v6 + 268);

    if ((v7 & 0x20) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      CFStringRef v8 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        CFStringRef v9 = v6;

        CFStringRef v10 = v9;
        char v11 = *((unsigned char *)v6 + 268);

        if (v11) {
          os_log_type_t v12 = "dry-run ";
        }
        else {
          os_log_type_t v12 = "";
        }
        nw_endpoint_t v13 = nw_endpoint_handler_copy_endpoint(v10);
        os_log_type_t v14 = nw_endpoint_get_logging_description(v13);
        __int16 v15 = v9->id_str;
        id v16 = v10;
        uint64_t v17 = v16;
        uint64_t v18 = v4->state;
        if (v18 > 5) {
          os_log_type_t v19 = "unknown-state";
        }
        else {
          os_log_type_t v19 = off_1E523FB38[v18];
        }

        os_log_type_t v35 = v17;
        uint32_t v36 = v35;
        os_log_type_t v37 = "path";
        switch(v2[29])
        {
          case 0u:
            break;
          case 1u:
            os_log_type_t v37 = "resolver";
            break;
          case 2u:
            os_log_type_t v37 = nw_endpoint_flow_mode_string(v35[31]);
            break;
          case 3u:
            os_log_type_t v37 = "proxy";
            break;
          case 4u:
            os_log_type_t v37 = "fallback";
            break;
          case 5u:
            os_log_type_t v37 = "transform";
            break;
          default:
            os_log_type_t v37 = "unknown-mode";
            break;
        }

        uint64_t v52 = v36;
        os_unfair_lock_lock((os_unfair_lock_t)v52 + 28);
        id v53 = v52[8];
        os_unfair_lock_unlock((os_unfair_lock_t)v52 + 28);

        *(_DWORD *)int buf = 136447746;
        os_log_type_t v159 = "nw_endpoint_proxy_start_next_child";
        __int16 v160 = 2082;
        os_log_type_t v161 = v15;
        __int16 v162 = 2082;
        BOOL v163 = v12;
        __int16 v164 = 2082;
        BOOL v165 = v14;
        __int16 v166 = 2082;
        int v167 = v19;
        __int16 v168 = 2082;
        id v169 = v37;
        __int16 v170 = 2114;
        id v171 = v53;
        _os_log_impl(&dword_1830D4000, v8, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] not starting next child", buf, 0x48u);
      }
LABEL_103:
    }
  }
LABEL_86:
}

void sub_183405D4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, void *a17)
{
  _Unwind_Resume(a1);
}

uint64_t nw_endpoint_proxy_match_pattern_to_endpoint(void *a1, const char *a2)
{
  uint64_t v66 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  CFAllocatorRef v4 = v3;
  if (!v3)
  {
    os_log_type_t v37 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_endpoint_proxy_match_pattern_to_endpoint";
    unint64_t v38 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(__dst) = 16;
    LOBYTE(v54) = 0;
    if (!__nwlog_fault(v38, &__dst, &v54)) {
      goto LABEL_105;
    }
    if (__dst == 17)
    {
      char v39 = __nwlog_obj();
      os_log_type_t v40 = __dst;
      if (os_log_type_enabled(v39, (os_log_type_t)__dst))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_endpoint_proxy_match_pattern_to_endpoint";
        _os_log_impl(&dword_1830D4000, v39, v40, "%{public}s called with null endpoint", buf, 0xCu);
      }
      goto LABEL_104;
    }
    if (!(_BYTE)v54)
    {
      char v39 = __nwlog_obj();
      os_log_type_t v51 = __dst;
      if (os_log_type_enabled(v39, (os_log_type_t)__dst))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_endpoint_proxy_match_pattern_to_endpoint";
        _os_log_impl(&dword_1830D4000, v39, v51, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_104;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    char v39 = __nwlog_obj();
    os_log_type_t v44 = __dst;
    BOOL v45 = os_log_type_enabled(v39, (os_log_type_t)__dst);
    if (!backtrace_string)
    {
      if (v45)
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_endpoint_proxy_match_pattern_to_endpoint";
        _os_log_impl(&dword_1830D4000, v39, v44, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
      goto LABEL_104;
    }
    if (v45)
    {
      *(_DWORD *)int buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_endpoint_proxy_match_pattern_to_endpoint";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = backtrace_string;
      _os_log_impl(&dword_1830D4000, v39, v44, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_84;
  }
  if (!a2)
  {
    BOOL v41 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_endpoint_proxy_match_pattern_to_endpoint";
    unint64_t v38 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(__dst) = 16;
    LOBYTE(v54) = 0;
    if (!__nwlog_fault(v38, &__dst, &v54)) {
      goto LABEL_105;
    }
    if (__dst == 17)
    {
      char v39 = __nwlog_obj();
      os_log_type_t v42 = __dst;
      if (os_log_type_enabled(v39, (os_log_type_t)__dst))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_endpoint_proxy_match_pattern_to_endpoint";
        _os_log_impl(&dword_1830D4000, v39, v42, "%{public}s called with null pattern", buf, 0xCu);
      }
LABEL_104:

LABEL_105:
      if (v38) {
        free(v38);
      }
      goto LABEL_16;
    }
    if (!(_BYTE)v54)
    {
      char v39 = __nwlog_obj();
      os_log_type_t v52 = __dst;
      if (os_log_type_enabled(v39, (os_log_type_t)__dst))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_endpoint_proxy_match_pattern_to_endpoint";
        _os_log_impl(&dword_1830D4000, v39, v52, "%{public}s called with null pattern, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_104;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    char v39 = __nwlog_obj();
    os_log_type_t v46 = __dst;
    BOOL v47 = os_log_type_enabled(v39, (os_log_type_t)__dst);
    if (!backtrace_string)
    {
      if (v47)
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_endpoint_proxy_match_pattern_to_endpoint";
        _os_log_impl(&dword_1830D4000, v39, v46, "%{public}s called with null pattern, no backtrace", buf, 0xCu);
      }
      goto LABEL_104;
    }
    if (v47)
    {
      *(_DWORD *)int buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_endpoint_proxy_match_pattern_to_endpoint";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = backtrace_string;
      _os_log_impl(&dword_1830D4000, v39, v46, "%{public}s called with null pattern, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_84:

    free(backtrace_string);
    goto LABEL_105;
  }
  CFStringRef v5 = v3;
  int v6 = [v5 type];

  uint64_t domain_for_policy = nw_endpoint_get_domain_for_policy(v5);
  if (v6 != 2)
  {
    if (v6 == 1)
    {
      address = nw_endpoint_get_address(v5);
      CFStringRef v9 = 0;
      goto LABEL_7;
    }
    if (gLogDatapath)
    {
      os_log_type_t v50 = __nwlog_obj();
      if (os_log_type_enabled(v50, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)int buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_endpoint_proxy_match_pattern_to_endpoint";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = v6;
        _os_log_impl(&dword_1830D4000, v50, OS_LOG_TYPE_DEBUG, "%{public}s Invalid proxy endpoint type %u for matching", buf, 0x12u);
      }
    }
LABEL_16:
    uint64_t domain_for_policy = 0;
    goto LABEL_56;
  }
  CFStringRef v10 = v5;
  CFStringRef v9 = (const char *)[v10 hostname];

  address = 0;
LABEL_7:
  if (strcmp(a2, "*"))
  {
    uint64_t __dst = 0;
    uint64_t v58 = 0;
    int v60 = 0;
    uint64_t v59 = 0;
    uint64_t v54 = 0;
    v55[0] = 0;
    int v56 = 0;
    v55[1] = 0;
    char v53 = 0;
    *(void *)int buf = 0;
    if (getaddrinfo(a2, 0, &nw_string_is_ip_address::hints, (addrinfo **)buf))
    {
      if (!nw_utilities_cidr_string_to_subnet_and_mask(a2, (uint64_t)&__dst, (uint64_t)&v54, &v53))
      {
        if (v9)
        {
          uint64_t v22 = nw_endpoint_proxy_string_matches_pattern(v9, a2);
        }
        else
        {
          if (domain_for_policy) {
            uint64_t domain_for_policy = nw_endpoint_proxy_string_matches_pattern((const char *)domain_for_policy, a2);
          }
          if ((domain_for_policy & 1) != 0 || !address) {
            goto LABEL_55;
          }
          if (address->sa_family != 2) {
            goto LABEL_54;
          }
          *(void *)int buf = 0;
          *(void *)&buf[8] = 0;
          int v26 = inet_ntop(2, &address->sa_data[2], buf, 0x10u);
          if (!v26) {
            goto LABEL_54;
          }
          uint64_t v22 = nw_endpoint_proxy_string_matches_pattern(v26, a2);
        }
        uint64_t domain_for_policy = v22;
        goto LABEL_55;
      }
      if (address)
      {
        int sa_family = address->sa_family;
        if (sa_family == BYTE1(__dst))
        {
          if (sa_family == 30)
          {
            os_log_type_t v12 = &address->sa_data[6];
            nw_endpoint_t v13 = (unsigned __int8 *)&v58;
            os_log_type_t v14 = (unsigned __int8 *)v55;
            uint64_t v15 = 16;
LABEL_58:
            uint64_t v28 = v15 - 1;
            do
            {
              int v30 = *v12++;
              int v29 = v30;
              int v32 = *v14++;
              int v31 = v32;
              int v33 = *v13++;
              int v34 = (v33 ^ v29) & v31;
              uint64_t domain_for_policy = v34 == 0;
              BOOL v36 = v28-- != 0;
            }
            while (!v34 && v36);
            goto LABEL_55;
          }
          if (sa_family == 2)
          {
            os_log_type_t v12 = &address->sa_data[2];
            nw_endpoint_t v13 = (unsigned __int8 *)&__dst + 4;
            os_log_type_t v14 = (unsigned __int8 *)&v54 + 4;
            uint64_t v15 = 4;
            goto LABEL_58;
          }
        }
      }
    }
    else
    {
      uint64_t v17 = *(addrinfo **)buf;
      if (*(void *)buf)
      {
        uint64_t v18 = *(void *)buf;
        while (1)
        {
          os_log_type_t v19 = *(unsigned __int8 **)(v18 + 32);
          int v20 = v19[1];
          if (v20 == 30 || v20 == 2) {
            break;
          }
          uint64_t v18 = *(void *)(v18 + 40);
          if (!v18) {
            goto LABEL_33;
          }
        }
        size_t v23 = *v19;
        if (v23 <= 0x1C) {
          memcpy(&__dst, v19, v23);
        }
LABEL_33:
        freeaddrinfo(v17);
      }
      if (address)
      {
        int v24 = address->sa_family;
        if (v24 == 2 && BYTE1(__dst) == 2)
        {
          uint64_t domain_for_policy = *(_DWORD *)&address->sa_data[2] == HIDWORD(__dst);
          goto LABEL_55;
        }
        uint64_t domain_for_policy = 0;
        if (v24 != 30 || BYTE1(__dst) != 30)
        {
LABEL_55:
          if (gLogDatapath)
          {
            os_log_type_t v48 = __nwlog_obj();
            if (os_log_type_enabled(v48, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v49 = "does not match";
              *(void *)&uint8_t buf[4] = "nw_endpoint_proxy_match_pattern_to_endpoint";
              *(_WORD *)&unsigned char buf[12] = 2114;
              *(_DWORD *)int buf = 136446978;
              *(void *)&buf[14] = v5;
              if (domain_for_policy) {
                uint64_t v49 = "matches";
              }
              __int16 v62 = 2082;
              id v63 = v49;
              __int16 v64 = 2082;
              CFStringRef v65 = a2;
              _os_log_impl(&dword_1830D4000, v48, OS_LOG_TYPE_DEBUG, "%{public}s endpoint \"%{public}@\" %{public}s pattern string \"%{public}s\"", buf, 0x2Au);
            }
          }
          goto LABEL_56;
        }
        if (*(_DWORD *)&address[1].sa_data[6] == v60)
        {
          uint64_t domain_for_policy = *(void *)&address->sa_data[6] == v58 && *(void *)&address[1].sa_len == v59;
          goto LABEL_55;
        }
      }
    }
LABEL_54:
    uint64_t domain_for_policy = 0;
    goto LABEL_55;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v16 = (id)gLogObj;
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)int buf = 136446722;
    *(void *)&uint8_t buf[4] = "nw_endpoint_proxy_match_pattern_to_endpoint";
    *(_WORD *)&unsigned char buf[12] = 2114;
    *(void *)&buf[14] = v5;
    __int16 v62 = 2082;
    id v63 = a2;
    _os_log_impl(&dword_1830D4000, v16, OS_LOG_TYPE_DEBUG, "%{public}s endpoint \"%{public}@\" indeed matches pattern \"%{public}s\"", buf, 0x20u);
  }

  uint64_t domain_for_policy = 1;
LABEL_56:

  return domain_for_policy;
}

void sub_183406734(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_endpoint_proxy_get_success_count(NWConcrete_nw_endpoint_handler *a1)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  int v1 = a1;
  unsigned int v2 = v1;
  if (v1)
  {
    id v3 = v1;
    nw_endpoint_handler_initialize_association(v3);
    id v4 = v3[7];

    if (!v4) {
      goto LABEL_7;
    }
    if (nw_protocol_copy_proxy_definition(void)::onceToken != -1) {
      dispatch_once(&nw_protocol_copy_proxy_definition(void)::onceToken, &__block_literal_global_26625);
    }
    uint64_t cached_content_for_protocol = (unsigned int *)nw_association_get_cached_content_for_protocol(v4, (void *)nw_protocol_copy_proxy_definition(void)::proxy_definition);
    if (cached_content_for_protocol) {
      uint64_t v6 = *cached_content_for_protocol;
    }
    else {
LABEL_7:
    }
      uint64_t v6 = 0;

    goto LABEL_9;
  }
  CFStringRef v8 = __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  os_log_type_t v19 = "nw_endpoint_proxy_get_success_count";
  CFStringRef v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (__nwlog_fault(v9, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      CFStringRef v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v19 = "nw_endpoint_proxy_get_success_count";
        _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null child_handler", buf, 0xCu);
      }
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      CFStringRef v10 = __nwlog_obj();
      os_log_type_t v13 = type;
      BOOL v14 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)int buf = 136446466;
          os_log_type_t v19 = "nw_endpoint_proxy_get_success_count";
          __int16 v20 = 2082;
          id v21 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null child_handler, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_26;
      }
      if (v14)
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v19 = "nw_endpoint_proxy_get_success_count";
        _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null child_handler, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      CFStringRef v10 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v19 = "nw_endpoint_proxy_get_success_count";
        _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null child_handler, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_26:
  if (v9) {
    free(v9);
  }
  uint64_t v6 = 0;
LABEL_9:

  return v6;
}

void sub_183406A68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t *nw_proxy_config_create_with_agent_data_extended(uint64_t a1, unint64_t a2, _OWORD *a3, unsigned char *a4)
{
  uint64_t v257 = *MEMORY[0x1E4F143B8];
  id v4 = &unk_183D5C000;
  if (!a1)
  {
    uint64_t v196 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_proxy_config_create_with_agent_data_extended";
    os_log_type_t v197 = (char *)_os_log_send_and_compose_impl();

    v251[0] = 16;
    uu[0] = 0;
    if (!__nwlog_fault(v197, v251, uu)) {
      goto LABEL_499;
    }
    if (v251[0] == 17)
    {
      BOOL v198 = __nwlog_obj();
      os_log_type_t v199 = v251[0];
      if (os_log_type_enabled(v198, (os_log_type_t)v251[0]))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_proxy_config_create_with_agent_data_extended";
        _os_log_impl(&dword_1830D4000, v198, v199, "%{public}s called with null bytes", buf, 0xCu);
      }
    }
    else if (uu[0])
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v198 = __nwlog_obj();
      os_log_type_t v203 = v251[0];
      BOOL v204 = os_log_type_enabled(v198, (os_log_type_t)v251[0]);
      if (backtrace_string)
      {
        if (v204)
        {
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_proxy_config_create_with_agent_data_extended";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v198, v203, "%{public}s called with null bytes, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        if (!v197) {
          return 0;
        }
        goto LABEL_500;
      }
      if (v204)
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_proxy_config_create_with_agent_data_extended";
        _os_log_impl(&dword_1830D4000, v198, v203, "%{public}s called with null bytes, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v198 = __nwlog_obj();
      os_log_type_t v222 = v251[0];
      if (os_log_type_enabled(v198, (os_log_type_t)v251[0]))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_proxy_config_create_with_agent_data_extended";
        _os_log_impl(&dword_1830D4000, v198, v222, "%{public}s called with null bytes, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_498;
  }
  unint64_t v6 = a2 - 25;
  if (a2 <= 0x19)
  {
    v200 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_proxy_config_create_with_agent_data_extended";
    os_log_type_t v197 = (char *)_os_log_send_and_compose_impl();

    v251[0] = 16;
    uu[0] = 0;
    if (!__nwlog_fault(v197, v251, uu)) {
      goto LABEL_499;
    }
    if (v251[0] == 17)
    {
      BOOL v198 = __nwlog_obj();
      os_log_type_t v201 = v251[0];
      if (os_log_type_enabled(v198, (os_log_type_t)v251[0]))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_proxy_config_create_with_agent_data_extended";
        _os_log_impl(&dword_1830D4000, v198, v201, "%{public}s called with null (length > __builtin_offsetof(struct nw_proxy_config_agent_data, tlv_data))", buf, 0xCu);
      }
    }
    else if (uu[0])
    {
      __int16 v205 = (char *)__nw_create_backtrace_string();
      BOOL v198 = __nwlog_obj();
      os_log_type_t v206 = v251[0];
      BOOL v207 = os_log_type_enabled(v198, (os_log_type_t)v251[0]);
      if (v205)
      {
        if (v207)
        {
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_proxy_config_create_with_agent_data_extended";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v205;
          _os_log_impl(&dword_1830D4000, v198, v206, "%{public}s called with null (length > __builtin_offsetof(struct nw_proxy_config_agent_data, tlv_data)), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v205);
LABEL_499:
        if (!v197) {
          return 0;
        }
LABEL_500:
        free(v197);
        return 0;
      }
      if (v207)
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_proxy_config_create_with_agent_data_extended";
        _os_log_impl(&dword_1830D4000, v198, v206, "%{public}s called with null (length > __builtin_offsetof(struct nw_proxy_config_agent_data, tlv_data)), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v198 = __nwlog_obj();
      os_log_type_t v223 = v251[0];
      if (os_log_type_enabled(v198, (os_log_type_t)v251[0]))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_proxy_config_create_with_agent_data_extended";
        _os_log_impl(&dword_1830D4000, v198, v223, "%{public}s called with null (length > __builtin_offsetof(struct nw_proxy_config_agent_data, tlv_data)), backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_498:

    goto LABEL_499;
  }
  if (a4) {
    *a4 = 1;
  }
  if (nw_proxy_config_initialize_known_protocols(void)::onceToken != -1) {
    dispatch_once(&nw_proxy_config_initialize_known_protocols(void)::onceToken, &__block_literal_global_285);
  }
  *(_OWORD *)uu = *a3;
  if (a2 - 31 > 0xFFFFFFFFFFFFFFF9)
  {
    int v241 = 0;
    keys = 0;
    id v246 = 0;
    stack = 0;
    os_log_type_t v231 = 0;
    id v232 = 0;
    id v238 = 0;
    id v239 = 0;
    id v233 = 0;
    id v234 = 0;
    objects = 0;
    id obj = 0;
    v243 = 0;
    goto LABEL_390;
  }
  os_log_type_t v228 = a4;
  nw_endpoint_t v240 = 0;
  int v241 = 0;
  id v234 = 0;
  char __s1 = 0;
  stack = 0;
  os_log_type_t v231 = 0;
  id v232 = 0;
  char v229 = 0;
  keys = 0;
  v243 = 0;
  xpc_object_t v9 = 0;
  id v238 = 0;
  id v239 = 0;
  id v233 = 0;
  objects = 0;
  id obj = 0;
  unint64_t v10 = 0;
  unint64_t v248 = a2 - 30;
  while (1)
  {
    int v11 = *(unsigned __int8 *)(a1 + 25 + v10);
    size_t v12 = *(unsigned int *)(a1 + 26 + v10);
    if (!v12) {
      goto LABEL_35;
    }
    if (v12 <= 0xFFFFFFF9)
    {
      BOOL v13 = v6 >= v12 + 5 && v6 - (v12 + 5) >= v10;
      if (v13)
      {
        uint64_t v22 = (char *)(a1 + 30 + v10);
        goto LABEL_36;
      }
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v14 = (id)gLogObj;
    *(_DWORD *)int buf = 136446978;
    *(void *)&uint8_t buf[4] = "nw_necp_buffer_get_tlv_value";
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&buf[14] = v10;
    *(_WORD *)&unsigned char buf[22] = 2048;
    *(void *)&unsigned char buf[24] = v6;
    *(_WORD *)&buf[32] = 1024;
    *(_DWORD *)&buf[34] = v12;
    os_log_type_t v15 = (void *)_os_log_send_and_compose_impl();

    v251[0] = 16;
    char v250 = 0;
    if (__nwlog_fault((const char *)v15, v251, &v250))
    {
      if (v251[0] == 17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        char v16 = (id)gLogObj;
        os_log_type_t v17 = v251[0];
        if (os_log_type_enabled(v16, (os_log_type_t)v251[0]))
        {
          *(_DWORD *)int buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_necp_buffer_get_tlv_value";
          *(_WORD *)&unsigned char buf[12] = 2048;
          *(void *)&buf[14] = v10;
          *(_WORD *)&unsigned char buf[22] = 2048;
          *(void *)&unsigned char buf[24] = v6;
          *(_WORD *)&buf[32] = 1024;
          *(_DWORD *)&buf[34] = v12;
          _os_log_impl(&dword_1830D4000, v16, v17, "%{public}s buffer too short tlv_offset=%zu buffer_length=%zu value_length=%u", buf, 0x26u);
        }
      }
      else
      {
        if (v250)
        {
          uint64_t v18 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v19 = (id)gLogObj;
          os_log_type_t v20 = v251[0];
          BOOL v21 = os_log_type_enabled(v19, (os_log_type_t)v251[0]);
          if (v18)
          {
            if (v21)
            {
              *(_DWORD *)int buf = 136447234;
              *(void *)&uint8_t buf[4] = "nw_necp_buffer_get_tlv_value";
              *(_WORD *)&unsigned char buf[12] = 2048;
              *(void *)&buf[14] = v10;
              *(_WORD *)&unsigned char buf[22] = 2048;
              *(void *)&unsigned char buf[24] = v6;
              *(_WORD *)&buf[32] = 1024;
              *(_DWORD *)&buf[34] = v12;
              *(_WORD *)&buf[38] = 2082;
              *(void *)&unsigned char buf[40] = v18;
              _os_log_impl(&dword_1830D4000, v19, v20, "%{public}s buffer too short tlv_offset=%zu buffer_length=%zu value_length=%u, dumping backtrace:%{public}s", buf, 0x30u);
            }

            free(v18);
            if (!v15) {
              goto LABEL_35;
            }
LABEL_34:
            free(v15);
            goto LABEL_35;
          }
          if (v21)
          {
            *(_DWORD *)int buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_necp_buffer_get_tlv_value";
            *(_WORD *)&unsigned char buf[12] = 2048;
            *(void *)&buf[14] = v10;
            *(_WORD *)&unsigned char buf[22] = 2048;
            *(void *)&unsigned char buf[24] = v6;
            *(_WORD *)&buf[32] = 1024;
            *(_DWORD *)&buf[34] = v12;
            _os_log_impl(&dword_1830D4000, v19, v20, "%{public}s buffer too short tlv_offset=%zu buffer_length=%zu value_length=%u, no backtrace", buf, 0x26u);
          }

          goto LABEL_33;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        char v16 = (id)gLogObj;
        os_log_type_t v23 = v251[0];
        if (os_log_type_enabled(v16, (os_log_type_t)v251[0]))
        {
          *(_DWORD *)int buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_necp_buffer_get_tlv_value";
          *(_WORD *)&unsigned char buf[12] = 2048;
          *(void *)&buf[14] = v10;
          *(_WORD *)&unsigned char buf[22] = 2048;
          *(void *)&unsigned char buf[24] = v6;
          *(_WORD *)&buf[32] = 1024;
          *(_DWORD *)&buf[34] = v12;
          _os_log_impl(&dword_1830D4000, v16, v23, "%{public}s buffer too short tlv_offset=%zu buffer_length=%zu value_length=%u, backtrace limit exceeded", buf, 0x26u);
        }
      }
    }
LABEL_33:
    if (v15) {
      goto LABEL_34;
    }
LABEL_35:
    uint64_t v22 = 0;
LABEL_36:
    v10 += v12 + 5;
    if (v10 > v6) {
      break;
    }
    if (v12) {
      BOOL v24 = v22 == 0;
    }
    else {
      BOOL v24 = 1;
    }
    if (!v24)
    {
      switch(v11)
      {
        case 1:
          nw_endpoint_t v45 = nw_path_copy_endpoint_from_tlv(1, v12, v22);

          nw_endpoint_t v240 = v45;
          break;
        case 2:
        case 3:
        case 10:
          if (!__s1) {
            goto LABEL_146;
          }
          if (stack)
          {
            if (v229) {
              goto LABEL_145;
            }
          }
          else
          {
            stack = v231;
            if (v229) {
              goto LABEL_145;
            }
          }
          if (v241) {
            nw_dictionary_set_value(v241[1], __s1, stack);
          }
          else {
            int v241 = nw_proxy_config_create_with_stack_internal(v240, stack, __s1);
          }
          if (nw_proxy_config_default_transport(void)::onceToken[0] != -1) {
            dispatch_once(nw_proxy_config_default_transport(void)::onceToken, &__block_literal_global_265);
          }
          if (!strcmp(__s1, (const char *)nw_proxy_config_default_transport(void)::default_transport_string))
          {
            char v70 = stack;

            os_log_type_t v231 = v70;
          }
LABEL_145:

          char v229 = 0;
          stack = 0;
LABEL_146:
          switch(v11)
          {
            case 10:
              os_log_type_t v73 = keys;
              if (!keys) {
                os_log_type_t v73 = (char **)xpc_dictionary_create(0, 0, 0);
              }
              keys = v73;
              xpc_dictionary_set_uint64(v73, v22, 2uLL);
              break;
            case 3:
              os_log_type_t v72 = keys;
              if (!keys) {
                os_log_type_t v72 = (char **)xpc_dictionary_create(0, 0, 0);
              }
              keys = v72;
              xpc_dictionary_set_uint64(v72, v22, 3uLL);
              break;
            case 2:
              if (nw_proxy_config_default_transport(void)::onceToken[0] != -1) {
                dispatch_once(nw_proxy_config_default_transport(void)::onceToken, &__block_literal_global_265);
              }
              if (strcmp(v22, (const char *)nw_proxy_config_default_transport(void)::default_transport_string))
              {
                uint64_t v71 = keys;
                if (!keys) {
                  uint64_t v71 = (char **)xpc_dictionary_create(0, 0, 0);
                }
                keys = v71;
                xpc_dictionary_set_uint64(v71, v22, 4uLL);
              }
              break;
          }
          char __s1 = v22;
          break;
        case 4:
        case 5:
          if (!stack) {
            stack = objc_alloc_init(NWConcrete_nw_protocol_stack);
          }
          id v244 = v9;
          if (v12 < 0x2A)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            id v50 = (id)gLogObj;
            *(_DWORD *)int buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_proxy_config_create_with_agent_data_extended";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = v12;
            os_log_type_t v51 = (char *)_os_log_send_and_compose_impl();

            v251[0] = 16;
            char v250 = 0;
            if (!__nwlog_fault(v51, v251, &v250)) {
              goto LABEL_308;
            }
            if (v251[0] == 17)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              os_log_type_t v52 = (id)gLogObj;
              os_log_type_t v53 = v251[0];
              if (os_log_type_enabled(v52, (os_log_type_t)v251[0]))
              {
                *(_DWORD *)int buf = 136446466;
                *(void *)&uint8_t buf[4] = "nw_proxy_config_create_with_agent_data_extended";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = v12;
                _os_log_impl(&dword_1830D4000, v52, v53, "%{public}s NW_NECP_CLIENT_PARAMETER_APPLICATION_PROTOCOL has bad length %u", buf, 0x12u);
              }
              goto LABEL_307;
            }
            if (!v250)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              os_log_type_t v52 = (id)gLogObj;
              os_log_type_t v109 = v251[0];
              if (os_log_type_enabled(v52, (os_log_type_t)v251[0]))
              {
                *(_DWORD *)int buf = 136446466;
                *(void *)&uint8_t buf[4] = "nw_proxy_config_create_with_agent_data_extended";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = v12;
                _os_log_impl(&dword_1830D4000, v52, v109, "%{public}s NW_NECP_CLIENT_PARAMETER_APPLICATION_PROTOCOL has bad length %u, backtrace limit exceeded", buf, 0x12u);
              }
LABEL_307:

LABEL_308:
              if (!v51) {
                goto LABEL_310;
              }
LABEL_309:
              free(v51);
              goto LABEL_310;
            }
            uint64_t v66 = (char *)__nw_create_backtrace_string();
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            os_log_type_t v67 = (id)gLogObj;
            os_log_type_t v68 = v251[0];
            BOOL v69 = os_log_type_enabled(v67, (os_log_type_t)v251[0]);
            if (!v66)
            {
              if (v69)
              {
                *(_DWORD *)int buf = 136446466;
                *(void *)&uint8_t buf[4] = "nw_proxy_config_create_with_agent_data_extended";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = v12;
                _os_log_impl(&dword_1830D4000, v67, v68, "%{public}s NW_NECP_CLIENT_PARAMETER_APPLICATION_PROTOCOL has bad length %u, no backtrace", buf, 0x12u);
              }

              goto LABEL_308;
            }
            if (v69)
            {
              *(_DWORD *)int buf = 136446722;
              *(void *)&uint8_t buf[4] = "nw_proxy_config_create_with_agent_data_extended";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = v12;
              *(_WORD *)&buf[18] = 2082;
              *(void *)&buf[20] = v66;
              _os_log_impl(&dword_1830D4000, v67, v68, "%{public}s NW_NECP_CLIENT_PARAMETER_APPLICATION_PROTOCOL has bad length %u, dumping backtrace:%{public}s", buf, 0x1Cu);
            }

            free(v66);
            if (v51) {
              goto LABEL_309;
            }
          }
          else
          {
            uint64_t v25 = *((unsigned __int16 *)v22 + 20);
            if (v25 + 42 == v12)
            {
              long long v26 = *((_OWORD *)v22 + 1);
              *(_OWORD *)int buf = *(_OWORD *)v22;
              *(_OWORD *)&buf[16] = v26;
              *(void *)&buf[32] = *((void *)v22 + 4);
              os_unfair_lock_lock(&nw_protocol_registrar_lock);
              os_log_type_t v27 = &g_registration_list;
              do
              {
                os_log_type_t v27 = (uint64_t *)*v27;
                if (!v27) {
                  goto LABEL_162;
                }
              }
              while (*(void *)buf != v27[4]
                   || *(void *)&buf[8] != v27[5]
                   || *(void *)&buf[16] != v27[6]
                   || *(void *)&buf[24] != v27[7]
                   || *(void *)&buf[32] != v27[8]);
              int v32 = (void *)v27[14];
              if (v32)
              {
                int v33 = os_retain(v32);
                os_unfair_lock_unlock(&nw_protocol_registrar_lock);
                if (v33) {
                  goto LABEL_223;
                }
              }
              else
              {
LABEL_162:
                os_unfair_lock_unlock(&nw_protocol_registrar_lock);
              }
              if (nw_protocol_setup_tcp_definition(void)::onceToken != -1) {
                dispatch_once(&nw_protocol_setup_tcp_definition(void)::onceToken, &__block_literal_global_64304);
              }
              int v33 = (id)g_tcp_definition;
              identifier = nw_protocol_definition_get_identifier(v33);
              if (nw_protocols_are_equal(identifier, buf))
              {
                if (v33) {
                  goto LABEL_223;
                }
              }
              else
              {
              }
              int v33 = nw_protocol_boringssl_copy_definition();
              int v107 = nw_protocol_definition_get_identifier(v33);
              if (nw_protocols_are_equal(v107, buf))
              {
                if (v33)
                {
LABEL_223:
                  if (*((_WORD *)v22 + 20)) {
                    deserialized_options = nw_protocol_create_deserialized_options(v33, (uint64_t)(v22 + 42), *((unsigned __int16 *)v22 + 20));
                  }
                  else {
                    deserialized_options = nw_protocol_create_options(v33);
                  }
                  __int16 v114 = deserialized_options;
                  if (!deserialized_options)
                  {
                    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                    networkd_settings_init();
                    long long v118 = (id)gLogObj;
                    if (os_log_type_enabled(v118, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_DWORD *)os_log_type_t v251 = 136446466;
                      v252 = "nw_proxy_config_create_with_agent_data_extended";
                      __int16 v253 = 2112;
                      os_log_type_t v254 = v33;
                      _os_log_impl(&dword_1830D4000, v118, OS_LOG_TYPE_DEFAULT, "%{public}s Failed to deserialize options for %@", v251, 0x16u);
                    }
                    p_super = 0;
                    char v229 = 1;
                    goto LABEL_328;
                  }
                  if (nw_protocol_options_is_serializable_tls(deserialized_options))
                  {
                    char v250 = 1;
                    __int16 v115 = nw_tls_create_options_from_serializable(v114, (uint64_t)uu, &v250);

                    if (!v250)
                    {
                      int v116 = __nwlog_obj();
                      if (os_log_type_enabled(v116, OS_LOG_TYPE_ERROR))
                      {
                        *(_DWORD *)os_log_type_t v251 = 136446210;
                        v252 = "nw_proxy_config_create_with_agent_data_extended";
                        _os_log_impl(&dword_1830D4000, v116, OS_LOG_TYPE_ERROR, "%{public}s Failed to serialize tls options", v251, 0xCu);
                      }

                      if (v228) {
                        *os_log_type_t v228 = 0;
                      }
                    }
                    p_super = &v115->super;
                    goto LABEL_325;
                  }
                  p_super = v114;
                  if (nw_protocol_options_is_quic_connection(p_super))
                  {
                  }
                  else
                  {
                    BOOL is_quic_stream = nw_protocol_options_is_quic_stream(p_super);

                    if (!is_quic_stream)
                    {
LABEL_325:
                      if (v11 == 5)
                      {
                        nw_protocol_stack_set_transport_protocol(&stack->super, p_super);
LABEL_329:

LABEL_330:
                        goto LABEL_331;
                      }
                      nw_protocol_stack_append_application_protocol(stack, p_super);
                      p_super = p_super;
                      long long v118 = v243;
                      v243 = p_super;
LABEL_328:

                      goto LABEL_329;
                    }
                  }
                  if (!uuid_is_null(uu))
                  {
                    p_super = p_super;
                    id v144 = p_super;
                    if (nw_protocol_options_is_quic_stream(p_super))
                    {
                      id v144 = nw_quic_stream_copy_shared_connection_options(p_super);
                    }
                    if (((*(unsigned __int16 *)(a1 + 22) | (*(unsigned __int8 *)(a1 + 24) << 16)) & 0x10000) != 0) {
                      BOOL v145 = "com.apple.networkrelay";
                    }
                    else {
                      BOOL v145 = 0;
                    }
                    if (!nw_quic_connection_fetch_client_identity_reference(v144, uu, (uint64_t)v145))
                    {
                      if (v228) {
                        *os_log_type_t v228 = 0;
                      }
                      os_log_type_t v146 = __nwlog_obj();
                      if (os_log_type_enabled(v146, OS_LOG_TYPE_ERROR))
                      {
                        *(_DWORD *)os_log_type_t v251 = 136446210;
                        v252 = "nw_proxy_config_create_with_agent_data_extended";
                        _os_log_impl(&dword_1830D4000, v146, OS_LOG_TYPE_ERROR, "%{public}s Failed to fetch quic client identity", v251, 0xCu);
                      }
                    }
                  }
                  goto LABEL_325;
                }
              }
              else
              {
              }
              int v33 = __nwlog_obj();
              if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)os_log_type_t v251 = 136446466;
                v252 = "nw_proxy_config_create_with_agent_data_extended";
                __int16 v253 = 2080;
                os_log_type_t v254 = buf;
                _os_log_impl(&dword_1830D4000, v33, OS_LOG_TYPE_DEFAULT, "%{public}s No protocol definition registered for \"%s\"", v251, 0x16u);
              }
              char v229 = 1;
              goto LABEL_330;
            }
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            id v64 = (id)gLogObj;
            *(_DWORD *)int buf = 136446722;
            *(void *)&uint8_t buf[4] = "nw_proxy_config_create_with_agent_data_extended";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = v25;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = v12;
            os_log_type_t v51 = (char *)_os_log_send_and_compose_impl();

            v251[0] = 16;
            char v250 = 0;
            if (!__nwlog_fault(v51, v251, &v250)) {
              goto LABEL_308;
            }
            if (v251[0] == 17)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              os_log_type_t v52 = (id)gLogObj;
              os_log_type_t v65 = v251[0];
              if (os_log_type_enabled(v52, (os_log_type_t)v251[0]))
              {
                *(_DWORD *)int buf = 136446722;
                *(void *)&uint8_t buf[4] = "nw_proxy_config_create_with_agent_data_extended";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = v25;
                *(_WORD *)&buf[18] = 1024;
                *(_DWORD *)&buf[20] = v12;
                _os_log_impl(&dword_1830D4000, v52, v65, "%{public}s Protocol has bad options length %u (total %u)", buf, 0x18u);
              }
              goto LABEL_307;
            }
            if (!v250)
            {
              os_log_type_t v52 = __nwlog_obj();
              os_log_type_t v131 = v251[0];
              if (os_log_type_enabled(v52, (os_log_type_t)v251[0]))
              {
                *(_DWORD *)int buf = 136446722;
                *(void *)&uint8_t buf[4] = "nw_proxy_config_create_with_agent_data_extended";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = v25;
                *(_WORD *)&buf[18] = 1024;
                *(_DWORD *)&buf[20] = v12;
                _os_log_impl(&dword_1830D4000, v52, v131, "%{public}s Protocol has bad options length %u (total %u), backtrace limit exceeded", buf, 0x18u);
              }
              goto LABEL_307;
            }
            int v103 = __nw_create_backtrace_string();
            if (!v103)
            {
              os_log_type_t v52 = __nwlog_obj();
              os_log_type_t v142 = v251[0];
              if (os_log_type_enabled(v52, (os_log_type_t)v251[0]))
              {
                *(_DWORD *)int buf = 136446722;
                *(void *)&uint8_t buf[4] = "nw_proxy_config_create_with_agent_data_extended";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = v25;
                *(_WORD *)&buf[18] = 1024;
                *(_DWORD *)&buf[20] = v12;
                _os_log_impl(&dword_1830D4000, v52, v142, "%{public}s Protocol has bad options length %u (total %u), no backtrace", buf, 0x18u);
              }
              goto LABEL_307;
            }
            char v104 = (char *)v103;
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            uint64_t v105 = (id)gLogObj;
            os_log_type_t v106 = v251[0];
            if (os_log_type_enabled(v105, (os_log_type_t)v251[0]))
            {
              *(_DWORD *)int buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_proxy_config_create_with_agent_data_extended";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = v25;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v12;
              *(_WORD *)&unsigned char buf[24] = 2082;
              *(void *)&buf[26] = v104;
              _os_log_impl(&dword_1830D4000, v105, v106, "%{public}s Protocol has bad options length %u (total %u), dumping backtrace:%{public}s", buf, 0x22u);
            }

            free(v104);
            if (v51) {
              goto LABEL_309;
            }
          }
LABEL_310:
          char v229 = 1;
          break;
        case 6:
        case 7:
          if (!v243) {
            goto LABEL_83;
          }
          id v244 = v9;
          nw_endpoint_t v34 = nw_path_copy_endpoint_from_tlv(v11, v12, v22);
          os_log_type_t v35 = v243;
          BOOL v36 = v34;
          LOBYTE(v35[19].isa) = v11 == 7;
          v243 = v35;
          objc_storeStrong((id *)&v35[3].isa, v34);

          goto LABEL_331;
        case 8:
          if (!v9) {
            xpc_object_t v9 = xpc_array_create(0, 0);
          }
          xpc_array_set_string(v9, 0xFFFFFFFFFFFFFFFFLL, v22);
          break;
        case 9:
          xpc_object_t v40 = v239;
          if (!v239) {
            xpc_object_t v40 = xpc_array_create(0, 0);
          }
          id v239 = v40;
          xpc_array_set_string(v40, 0xFFFFFFFFFFFFFFFFLL, v22);
          break;
        case 11:
          nw_endpoint_t v48 = nw_path_copy_endpoint_from_tlv(11, v12, v22);
          if (v48)
          {
            BOOL v49 = (BOOL)obj;
            if (!obj) {
              BOOL v49 = nw_array_create();
            }
            id obj = (id)v49;
            nw_array_append(v49, v48);
          }

          break;
        case 12:
          if (v243)
          {
            id v244 = v9;
            nw_endpoint_t v38 = nw_path_copy_endpoint_from_tlv(12, v12, v22);
            nw_protocol_options_add_proxy_next_hop(v243, v38);

LABEL_331:
            xpc_object_t v9 = v244;
          }
          else
          {
LABEL_83:
            v243 = 0;
          }
          break;
        case 13:
          if (!v22[(v12 - 1)])
          {
            xpc_object_t v39 = v232;
            if (!v232) {
              xpc_object_t v39 = xpc_array_create(0, 0);
            }
            id v232 = v39;
            xpc_array_set_string(v39, 0xFFFFFFFFFFFFFFFFLL, v22);
          }
          break;
        case 14:
          if (!v22[(v12 - 1)])
          {
            xpc_object_t v47 = v233;
            if (!v233) {
              xpc_object_t v47 = xpc_array_create(0, 0);
            }
            id v233 = v47;
            xpc_array_set_string(v47, 0xFFFFFFFFFFFFFFFFLL, v22);
          }
          break;
        case 15:
          if (v12 == 16) {
            *(_OWORD *)uu = *(_OWORD *)v22;
          }
          break;
        case 16:
          id v245 = v9;
          if (v12 <= 5)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            id v41 = (id)gLogObj;
            *(_DWORD *)int buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_authentication_credential_create_from_tlv";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = v12;
            os_log_type_t v42 = (const char *)_os_log_send_and_compose_impl();

            v251[0] = 16;
            char v250 = 0;
            if (!__nwlog_fault(v42, v251, &v250)) {
              goto LABEL_303;
            }
            if (v251[0] == 17)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              char v43 = (id)gLogObj;
              os_log_type_t v44 = v251[0];
              if (os_log_type_enabled(v43, (os_log_type_t)v251[0]))
              {
                *(_DWORD *)int buf = 136446466;
                *(void *)&uint8_t buf[4] = "nw_authentication_credential_create_from_tlv";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = v12;
                _os_log_impl(&dword_1830D4000, v43, v44, "%{public}s invalid buffer, underflow %u", buf, 0x12u);
              }
            }
            else
            {
              if (v250)
              {
                id v99 = (char *)__nw_create_backtrace_string();
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                id v100 = (id)gLogObj;
                os_log_type_t v101 = v251[0];
                BOOL v102 = os_log_type_enabled(v100, (os_log_type_t)v251[0]);
                if (v99)
                {
                  if (v102)
                  {
                    *(_DWORD *)int buf = 136446722;
                    *(void *)&uint8_t buf[4] = "nw_authentication_credential_create_from_tlv";
                    *(_WORD *)&unsigned char buf[12] = 1024;
                    *(_DWORD *)&buf[14] = v12;
                    *(_WORD *)&buf[18] = 2082;
                    *(void *)&buf[20] = v99;
                    _os_log_impl(&dword_1830D4000, v100, v101, "%{public}s invalid buffer, underflow %u, dumping backtrace:%{public}s", buf, 0x1Cu);
                  }

                  free(v99);
                  if (!v42) {
                    goto LABEL_387;
                  }
LABEL_304:
                  nw_endpoint_t v141 = (char *)v42;
                  goto LABEL_386;
                }
                if (v102)
                {
                  *(_DWORD *)int buf = 136446466;
                  *(void *)&uint8_t buf[4] = "nw_authentication_credential_create_from_tlv";
                  *(_WORD *)&unsigned char buf[12] = 1024;
                  *(_DWORD *)&buf[14] = v12;
                  _os_log_impl(&dword_1830D4000, v100, v101, "%{public}s invalid buffer, underflow %u, no backtrace", buf, 0x12u);
                }

LABEL_303:
                if (!v42) {
                  goto LABEL_387;
                }
                goto LABEL_304;
              }
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              char v43 = (id)gLogObj;
              os_log_type_t v130 = v251[0];
              if (os_log_type_enabled(v43, (os_log_type_t)v251[0]))
              {
                *(_DWORD *)int buf = 136446466;
                *(void *)&uint8_t buf[4] = "nw_authentication_credential_create_from_tlv";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = v12;
                _os_log_impl(&dword_1830D4000, v43, v130, "%{public}s invalid buffer, underflow %u, backtrace limit exceeded", buf, 0x12u);
              }
            }

            goto LABEL_303;
          }
          int v54 = *v22;
          CFArrayRef v55 = v22 + 2;
          int v56 = v22[1];
          int v57 = v12 - 2;
          if (v54 == 1)
          {
            if (*v55)
            {
              int v58 = 2 - v12;
              uint64_t v59 = (unsigned __int8 *)(v22 + 2);
              do
              {
                int v61 = *++v59;
                int v60 = v61;
                BOOL v62 = v61 != 0;
                int v63 = v58 + 1;
                if (v58 == -1) {
                  break;
                }
                ++v58;
              }
              while (v60);
              int v57 = -v63;
              if (!v63)
              {
LABEL_272:
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                id v128 = (id)gLogObj;
                *(_DWORD *)int buf = 136446466;
                *(void *)&uint8_t buf[4] = "nw_authentication_credential_create_from_tlv";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = v57;
                id v111 = (const char *)_os_log_send_and_compose_impl();

                v251[0] = 16;
                char v250 = 0;
                if (!__nwlog_fault(v111, v251, &v250)) {
                  goto LABEL_361;
                }
                if (v251[0] == 17)
                {
                  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                  networkd_settings_init();
                  uint64_t v112 = (id)gLogObj;
                  os_log_type_t v129 = v251[0];
                  if (os_log_type_enabled(v112, (os_log_type_t)v251[0]))
                  {
                    *(_DWORD *)int buf = 136446466;
                    *(void *)&uint8_t buf[4] = "nw_authentication_credential_create_from_tlv";
                    *(_WORD *)&unsigned char buf[12] = 1024;
                    *(_DWORD *)&buf[14] = v57;
                    _os_log_impl(&dword_1830D4000, v112, v129, "%{public}s invalid buffer, underflow %u", buf, 0x12u);
                  }
LABEL_348:

                  goto LABEL_361;
                }
                if (!v250)
                {
                  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                  networkd_settings_init();
                  uint64_t v112 = (id)gLogObj;
                  os_log_type_t v156 = v251[0];
                  if (os_log_type_enabled(v112, (os_log_type_t)v251[0]))
                  {
                    *(_DWORD *)int buf = 136446466;
                    *(void *)&uint8_t buf[4] = "nw_authentication_credential_create_from_tlv";
                    *(_WORD *)&unsigned char buf[12] = 1024;
                    *(_DWORD *)&buf[14] = v57;
                    _os_log_impl(&dword_1830D4000, v112, v156, "%{public}s invalid buffer, underflow %u, backtrace limit exceeded", buf, 0x12u);
                  }
                  goto LABEL_348;
                }
                __int16 v138 = (char *)__nw_create_backtrace_string();
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                os_log_type_t v133 = (id)gLogObj;
                os_log_type_t v139 = v251[0];
                BOOL v140 = os_log_type_enabled(v133, (os_log_type_t)v251[0]);
                if (v138)
                {
                  if (v140)
                  {
                    *(_DWORD *)int buf = 136446722;
                    *(void *)&uint8_t buf[4] = "nw_authentication_credential_create_from_tlv";
                    *(_WORD *)&unsigned char buf[12] = 1024;
                    *(_DWORD *)&buf[14] = v57;
                    *(_WORD *)&buf[18] = 2082;
                    *(void *)&buf[20] = v138;
                    _os_log_impl(&dword_1830D4000, v133, v139, "%{public}s invalid buffer, underflow %u, dumping backtrace:%{public}s", buf, 0x1Cu);
                  }

                  free(v138);
LABEL_361:
                  if (!v111) {
                    goto LABEL_387;
                  }
                  goto LABEL_362;
                }
                if (v140)
                {
                  *(_DWORD *)int buf = 136446466;
                  *(void *)&uint8_t buf[4] = "nw_authentication_credential_create_from_tlv";
                  *(_WORD *)&unsigned char buf[12] = 1024;
                  *(_DWORD *)&buf[14] = v57;
                  _os_log_impl(&dword_1830D4000, v133, v139, "%{public}s invalid buffer, underflow %u, no backtrace", buf, 0x12u);
                }
LABEL_360:

                goto LABEL_361;
              }
            }
            else
            {
              BOOL v62 = 0;
              uint64_t v59 = (unsigned __int8 *)(v22 + 2);
            }
            if (v62) {
              goto LABEL_272;
            }
            BOOL v77 = (const char *)(v59 + 1);
            nw_endpoint_t v78 = (const char *)(v59 + 1);
            do
            {
              int v119 = v57--;
              int v121 = *(unsigned __int8 *)v78++;
              int v120 = v121;
              if (v121) {
                BOOL v122 = v119 == 1;
              }
              else {
                BOOL v122 = 1;
              }
            }
            while (!v122);
            if (v120) {
              BOOL v123 = 1;
            }
            else {
              BOOL v123 = v57 == 0;
            }
            if (v123)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              id v124 = (id)gLogObj;
              *(_DWORD *)int buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_authentication_credential_create_from_tlv";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = v57;
              os_log_type_t v125 = (const char *)_os_log_send_and_compose_impl();

              v251[0] = 16;
              char v250 = 0;
              if (__nwlog_fault(v125, v251, &v250))
              {
                if (v251[0] == 17)
                {
                  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                  networkd_settings_init();
                  os_log_type_t v126 = (id)gLogObj;
                  os_log_type_t v127 = v251[0];
                  if (os_log_type_enabled(v126, (os_log_type_t)v251[0]))
                  {
                    *(_DWORD *)int buf = 136446466;
                    *(void *)&uint8_t buf[4] = "nw_authentication_credential_create_from_tlv";
                    *(_WORD *)&unsigned char buf[12] = 1024;
                    *(_DWORD *)&buf[14] = v57;
                    _os_log_impl(&dword_1830D4000, v126, v127, "%{public}s invalid buffer, underflow %u", buf, 0x12u);
                  }
                  goto LABEL_380;
                }
                if (v250)
                {
                  uint64_t v147 = (char *)__nw_create_backtrace_string();
                  v148 = __nwlog_obj();
                  os_log_type_t v149 = v251[0];
                  BOOL v150 = os_log_type_enabled(v148, (os_log_type_t)v251[0]);
                  if (v147)
                  {
                    if (v150)
                    {
                      *(_DWORD *)int buf = 136446722;
                      *(void *)&uint8_t buf[4] = "nw_authentication_credential_create_from_tlv";
                      *(_WORD *)&unsigned char buf[12] = 1024;
                      *(_DWORD *)&buf[14] = v57;
                      *(_WORD *)&buf[18] = 2082;
                      *(void *)&buf[20] = v147;
                      _os_log_impl(&dword_1830D4000, v148, v149, "%{public}s invalid buffer, underflow %u, dumping backtrace:%{public}s", buf, 0x1Cu);
                    }

                    free(v147);
                    goto LABEL_384;
                  }
                  if (v150)
                  {
                    *(_DWORD *)int buf = 136446466;
                    *(void *)&uint8_t buf[4] = "nw_authentication_credential_create_from_tlv";
                    *(_WORD *)&unsigned char buf[12] = 1024;
                    *(_DWORD *)&buf[14] = v57;
                    _os_log_impl(&dword_1830D4000, v148, v149, "%{public}s invalid buffer, underflow %u, no backtrace", buf, 0x12u);
                  }
LABEL_383:
                }
                else
                {
                  os_log_type_t v126 = __nwlog_obj();
                  os_log_type_t v160 = v251[0];
                  if (os_log_type_enabled(v126, (os_log_type_t)v251[0]))
                  {
                    *(_DWORD *)int buf = 136446466;
                    *(void *)&uint8_t buf[4] = "nw_authentication_credential_create_from_tlv";
                    *(_WORD *)&unsigned char buf[12] = 1024;
                    *(_DWORD *)&buf[14] = v57;
                    _os_log_impl(&dword_1830D4000, v126, v160, "%{public}s invalid buffer, underflow %u, backtrace limit exceeded", buf, 0x12u);
                  }
LABEL_380:
                }
              }
LABEL_384:
              if (!v125) {
                goto LABEL_387;
              }
LABEL_385:
              nw_endpoint_t v141 = (char *)v125;
LABEL_386:
              free(v141);
              goto LABEL_387;
            }
            int v57 = v119 - 2;
            if ((v119 - 2) <= 3)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              id v136 = (id)gLogObj;
              *(_DWORD *)int buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_authentication_credential_create_from_tlv";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = v57;
              os_log_type_t v125 = (const char *)_os_log_send_and_compose_impl();

              v251[0] = 16;
              char v250 = 0;
              if (!__nwlog_fault(v125, v251, &v250)) {
                goto LABEL_384;
              }
              if (v251[0] == 17)
              {
                os_log_type_t v126 = __nwlog_obj();
                os_log_type_t v137 = v251[0];
                if (os_log_type_enabled(v126, (os_log_type_t)v251[0]))
                {
                  *(_DWORD *)int buf = 136446466;
                  *(void *)&uint8_t buf[4] = "nw_authentication_credential_create_from_tlv";
                  *(_WORD *)&unsigned char buf[12] = 1024;
                  *(_DWORD *)&buf[14] = v57;
                  _os_log_impl(&dword_1830D4000, v126, v137, "%{public}s invalid buffer, underflow %u", buf, 0x12u);
                }
                goto LABEL_380;
              }
              if (!v250)
              {
                os_log_type_t v126 = __nwlog_obj();
                os_log_type_t v162 = v251[0];
                if (os_log_type_enabled(v126, (os_log_type_t)v251[0]))
                {
                  *(_DWORD *)int buf = 136446466;
                  *(void *)&uint8_t buf[4] = "nw_authentication_credential_create_from_tlv";
                  *(_WORD *)&unsigned char buf[12] = 1024;
                  *(_DWORD *)&buf[14] = v57;
                  _os_log_impl(&dword_1830D4000, v126, v162, "%{public}s invalid buffer, underflow %u, backtrace limit exceeded", buf, 0x12u);
                }
                goto LABEL_380;
              }
              uint64_t v157 = (char *)__nw_create_backtrace_string();
              v148 = __nwlog_obj();
              os_log_type_t v158 = v251[0];
              BOOL v159 = os_log_type_enabled(v148, (os_log_type_t)v251[0]);
              if (!v157)
              {
                if (v159)
                {
                  *(_DWORD *)int buf = 136446466;
                  *(void *)&uint8_t buf[4] = "nw_authentication_credential_create_from_tlv";
                  *(_WORD *)&unsigned char buf[12] = 1024;
                  *(_DWORD *)&buf[14] = v57;
                  _os_log_impl(&dword_1830D4000, v148, v158, "%{public}s invalid buffer, underflow %u, no backtrace", buf, 0x12u);
                }
                goto LABEL_383;
              }
              if (v159)
              {
                *(_DWORD *)int buf = 136446722;
                *(void *)&uint8_t buf[4] = "nw_authentication_credential_create_from_tlv";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = v57;
                *(_WORD *)&buf[18] = 2082;
                *(void *)&buf[20] = v157;
                _os_log_impl(&dword_1830D4000, v148, v158, "%{public}s invalid buffer, underflow %u, dumping backtrace:%{public}s", buf, 0x1Cu);
              }

              free(v157);
              if (!v125) {
                goto LABEL_387;
              }
              goto LABEL_385;
            }
            int type = v56;
            int v75 = 1;
          }
          else
          {
            int type = v22[1];
            int v75 = *v22;
            if (v54 == 2)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              Class v76 = (id)gLogObj;
              if (os_log_type_enabled(v76, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)int buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_authentication_credential_create_from_tlv";
                _os_log_impl(&dword_1830D4000, v76, OS_LOG_TYPE_ERROR, "%{public}s Unsupported credential type identity", buf, 0xCu);
              }
            }
            BOOL v77 = 0;
            nw_endpoint_t v78 = v55;
            CFArrayRef v55 = 0;
          }
          int v81 = *(_DWORD *)v78;
          uint64_t v80 = (unsigned __int8 *)(v78 + 4);
          LODWORD(v79) = v81;
          if (v57 - 4 != v81)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            id v110 = (id)gLogObj;
            *(_DWORD *)int buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_authentication_credential_create_from_tlv";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = v57 - 4;
            id v111 = (const char *)_os_log_send_and_compose_impl();

            v251[0] = 16;
            char v250 = 0;
            if (!__nwlog_fault(v111, v251, &v250)) {
              goto LABEL_361;
            }
            if (v251[0] == 17)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              uint64_t v112 = (id)gLogObj;
              os_log_type_t v113 = v251[0];
              if (os_log_type_enabled(v112, (os_log_type_t)v251[0]))
              {
                *(_DWORD *)int buf = 136446466;
                *(void *)&uint8_t buf[4] = "nw_authentication_credential_create_from_tlv";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = v57 - 4;
                _os_log_impl(&dword_1830D4000, v112, v113, "%{public}s invalid buffer, underflow %u", buf, 0x12u);
              }
              goto LABEL_348;
            }
            if (!v250)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              uint64_t v112 = (id)gLogObj;
              os_log_type_t v155 = v251[0];
              if (os_log_type_enabled(v112, (os_log_type_t)v251[0]))
              {
                *(_DWORD *)int buf = 136446466;
                *(void *)&uint8_t buf[4] = "nw_authentication_credential_create_from_tlv";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = v57 - 4;
                _os_log_impl(&dword_1830D4000, v112, v155, "%{public}s invalid buffer, underflow %u, backtrace limit exceeded", buf, 0x12u);
              }
              goto LABEL_348;
            }
            BOOL v132 = (char *)__nw_create_backtrace_string();
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            os_log_type_t v133 = (id)gLogObj;
            os_log_type_t v134 = v251[0];
            BOOL v135 = os_log_type_enabled(v133, (os_log_type_t)v251[0]);
            if (v132)
            {
              if (v135)
              {
                *(_DWORD *)int buf = 136446722;
                *(void *)&uint8_t buf[4] = "nw_authentication_credential_create_from_tlv";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = v57 - 4;
                *(_WORD *)&buf[18] = 2082;
                *(void *)&buf[20] = v132;
                _os_log_impl(&dword_1830D4000, v133, v134, "%{public}s invalid buffer, underflow %u, dumping backtrace:%{public}s", buf, 0x1Cu);
              }

              free(v132);
              if (!v111) {
                goto LABEL_387;
              }
LABEL_362:
              nw_endpoint_t v141 = (char *)v111;
              goto LABEL_386;
            }
            if (v135)
            {
              *(_DWORD *)int buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_authentication_credential_create_from_tlv";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = v57 - 4;
              _os_log_impl(&dword_1830D4000, v133, v134, "%{public}s invalid buffer, underflow %u, no backtrace", buf, 0x12u);
            }
            goto LABEL_360;
          }
          id v82 = -[NWConcrete_nw_authentication_credential initWithType:]([NWConcrete_nw_authentication_credential alloc], v75);
          nw_authentication_credential_set_persistence(v82, type);
          if (v75 == 1)
          {
            nw_authentication_credential_set_username(v82, v55);
            nw_authentication_credential_set_password(v82, v77);
          }
          if (v79)
          {
            int v83 = v79;
            while (2)
            {
              unsigned int v85 = *v80++;
              unsigned int v84 = v85;
              BOOL v13 = v79 != 0;
              unint64_t v79 = v79 - 1;
              if (v13 && !HIDWORD(v79)) {
                goto LABEL_201;
              }
              uint64_t v86 = v79;
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              id v87 = (id)gLogObj;
              *(_DWORD *)int buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_authentication_credential_create_from_tlv";
              *(_WORD *)&unsigned char buf[12] = 2082;
              *(void *)&buf[14] = "result_length";
              *(_WORD *)&unsigned char buf[22] = 2048;
              *(void *)&unsigned char buf[24] = 1;
              *(_WORD *)&buf[32] = 2048;
              *(void *)&buf[34] = v79;
              uint32_t v88 = (void *)_os_log_send_and_compose_impl();

              v251[0] = 16;
              char v250 = 0;
              if (__nwlog_fault((const char *)v88, v251, &v250))
              {
                if (v251[0] == 17)
                {
                  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                  networkd_settings_init();
                  int64_t v89 = (id)gLogObj;
                  os_log_type_t v90 = v251[0];
                  if (os_log_type_enabled(v89, (os_log_type_t)v251[0]))
                  {
                    *(_DWORD *)int buf = 136446978;
                    *(void *)&uint8_t buf[4] = "nw_authentication_credential_create_from_tlv";
                    *(_WORD *)&unsigned char buf[12] = 2082;
                    *(void *)&buf[14] = "result_length";
                    *(_WORD *)&unsigned char buf[22] = 2048;
                    *(void *)&unsigned char buf[24] = 1;
                    *(_WORD *)&buf[32] = 2048;
                    *(void *)&buf[34] = v86;
                    _os_log_impl(&dword_1830D4000, v89, v90, "%{public}s Underflow: %{public}s, decrement %llu, result %llu", buf, 0x2Au);
                  }
                  goto LABEL_185;
                }
                if (v250)
                {
                  int v91 = (char *)__nw_create_backtrace_string();
                  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                  networkd_settings_init();
                  CFRange v92 = (id)gLogObj;
                  os_log_type_t typea = v251[0];
                  BOOL v93 = os_log_type_enabled(v92, (os_log_type_t)v251[0]);
                  if (v91)
                  {
                    if (v93)
                    {
                      *(_DWORD *)int buf = 136447234;
                      *(void *)&uint8_t buf[4] = "nw_authentication_credential_create_from_tlv";
                      *(_WORD *)&unsigned char buf[12] = 2082;
                      *(void *)&buf[14] = "result_length";
                      *(_WORD *)&unsigned char buf[22] = 2048;
                      *(void *)&unsigned char buf[24] = 1;
                      *(_WORD *)&buf[32] = 2048;
                      *(void *)&buf[34] = v86;
                      *(_WORD *)&buf[42] = 2082;
                      *(void *)&buf[44] = v91;
                      _os_log_impl(&dword_1830D4000, v92, typea, "%{public}s Underflow: %{public}s, decrement %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
                    }

                    free(v91);
                    if (!v88)
                    {
LABEL_200:
                      LODWORD(v79) = 0;
LABEL_201:
                      nw_authentication_credential_add_valid_authentication_type(v82, v84);
                      if (!--v83)
                      {
                        if (!v79) {
                          goto LABEL_388;
                        }
                        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                        networkd_settings_init();
                        id v95 = (id)gLogObj;
                        *(_DWORD *)int buf = 136446722;
                        *(void *)&uint8_t buf[4] = "nw_authentication_credential_create_from_tlv";
                        *(_WORD *)&unsigned char buf[12] = 1024;
                        *(_DWORD *)&buf[14] = v79;
                        *(_WORD *)&buf[18] = 1024;
                        *(_DWORD *)&buf[20] = 0;
                        os_log_type_t v96 = (char *)_os_log_send_and_compose_impl();

                        v251[0] = 16;
                        char v250 = 0;
                        if (__nwlog_fault(v96, v251, &v250))
                        {
                          if (v251[0] == 17)
                          {
                            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                            networkd_settings_init();
                            uint32_t v97 = (id)gLogObj;
                            os_log_type_t v98 = v251[0];
                            if (os_log_type_enabled(v97, (os_log_type_t)v251[0]))
                            {
                              *(_DWORD *)int buf = 136446722;
                              *(void *)&uint8_t buf[4] = "nw_authentication_credential_create_from_tlv";
                              *(_WORD *)&unsigned char buf[12] = 1024;
                              *(_DWORD *)&buf[14] = v79;
                              *(_WORD *)&buf[18] = 1024;
                              *(_DWORD *)&buf[20] = 0;
                              _os_log_impl(&dword_1830D4000, v97, v98, "%{public}s invalid result, result_length %u, types_count %u", buf, 0x18u);
                            }
                            goto LABEL_207;
                          }
                          if (v250)
                          {
                            os_log_type_t v151 = (char *)__nw_create_backtrace_string();
                            v152 = __nwlog_obj();
                            os_log_type_t v153 = v251[0];
                            BOOL v154 = os_log_type_enabled(v152, (os_log_type_t)v251[0]);
                            if (v151)
                            {
                              if (v154)
                              {
                                *(_DWORD *)int buf = 136446978;
                                *(void *)&uint8_t buf[4] = "nw_authentication_credential_create_from_tlv";
                                *(_WORD *)&unsigned char buf[12] = 1024;
                                *(_DWORD *)&buf[14] = v79;
                                *(_WORD *)&buf[18] = 1024;
                                *(_DWORD *)&buf[20] = 0;
                                *(_WORD *)&unsigned char buf[24] = 2082;
                                *(void *)&buf[26] = v151;
                                _os_log_impl(&dword_1830D4000, v152, v153, "%{public}s invalid result, result_length %u, types_count %u, dumping backtrace:%{public}s", buf, 0x22u);
                              }

                              free(v151);
                            }
                            else
                            {
                              if (v154)
                              {
                                *(_DWORD *)int buf = 136446722;
                                *(void *)&uint8_t buf[4] = "nw_authentication_credential_create_from_tlv";
                                *(_WORD *)&unsigned char buf[12] = 1024;
                                *(_DWORD *)&buf[14] = v79;
                                *(_WORD *)&buf[18] = 1024;
                                *(_DWORD *)&buf[20] = 0;
                                _os_log_impl(&dword_1830D4000, v152, v153, "%{public}s invalid result, result_length %u, types_count %u, no backtrace", buf, 0x18u);
                              }
                            }
                          }
                          else
                          {
                            uint32_t v97 = __nwlog_obj();
                            os_log_type_t v161 = v251[0];
                            if (os_log_type_enabled(v97, (os_log_type_t)v251[0]))
                            {
                              *(_DWORD *)int buf = 136446722;
                              *(void *)&uint8_t buf[4] = "nw_authentication_credential_create_from_tlv";
                              *(_WORD *)&unsigned char buf[12] = 1024;
                              *(_DWORD *)&buf[14] = v79;
                              *(_WORD *)&buf[18] = 1024;
                              *(_DWORD *)&buf[20] = 0;
                              _os_log_impl(&dword_1830D4000, v97, v161, "%{public}s invalid result, result_length %u, types_count %u, backtrace limit exceeded", buf, 0x18u);
                            }
LABEL_207:
                          }
                        }
                        if (v96) {
                          free(v96);
                        }

LABEL_387:
                        id v82 = 0;
                        goto LABEL_388;
                      }
                      continue;
                    }
LABEL_199:
                    free(v88);
                    goto LABEL_200;
                  }
                  if (v93)
                  {
                    *(_DWORD *)int buf = 136446978;
                    *(void *)&uint8_t buf[4] = "nw_authentication_credential_create_from_tlv";
                    *(_WORD *)&unsigned char buf[12] = 2082;
                    *(void *)&buf[14] = "result_length";
                    *(_WORD *)&unsigned char buf[22] = 2048;
                    *(void *)&unsigned char buf[24] = 1;
                    *(_WORD *)&buf[32] = 2048;
                    *(void *)&buf[34] = v86;
                    _os_log_impl(&dword_1830D4000, v92, typea, "%{public}s Underflow: %{public}s, decrement %llu, result %llu, no backtrace", buf, 0x2Au);
                  }
                }
                else
                {
                  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                  networkd_settings_init();
                  int64_t v89 = (id)gLogObj;
                  os_log_type_t v94 = v251[0];
                  if (os_log_type_enabled(v89, (os_log_type_t)v251[0]))
                  {
                    *(_DWORD *)int buf = 136446978;
                    *(void *)&uint8_t buf[4] = "nw_authentication_credential_create_from_tlv";
                    *(_WORD *)&unsigned char buf[12] = 2082;
                    *(void *)&buf[14] = "result_length";
                    *(_WORD *)&unsigned char buf[22] = 2048;
                    *(void *)&unsigned char buf[24] = 1;
                    *(_WORD *)&buf[32] = 2048;
                    *(void *)&buf[34] = v86;
                    _os_log_impl(&dword_1830D4000, v89, v94, "%{public}s Underflow: %{public}s, decrement %llu, result %llu, backtrace limit exceeded", buf, 0x2Au);
                  }
LABEL_185:
                }
              }
              break;
            }
            if (!v88) {
              goto LABEL_200;
            }
            goto LABEL_199;
          }
LABEL_388:

          id v238 = v82;
          xpc_object_t v9 = v245;
          break;
        case 17:
          if (v12 == 16)
          {
            os_log_type_t v37 = objects;
            if (!objects) {
              os_log_type_t v37 = (xpc_object_t *)xpc_array_create(0, 0);
            }
            objects = v37;
            xpc_array_set_uuid(v37, 0xFFFFFFFFFFFFFFFFLL, (const unsigned __int8 *)v22);
          }
          break;
        case 18:
          if (!v22[(v12 - 1)])
          {
            xpc_object_t v46 = v234;
            if (!v234) {
              xpc_object_t v46 = xpc_array_create(0, 0);
            }
            id v234 = v46;
            xpc_array_set_string(v46, 0xFFFFFFFFFFFFFFFFLL, v22);
          }
          break;
        default:
          break;
      }
    }
    if (v6 < 5 || v10 >= v248) {
      goto LABEL_429;
    }
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v167 = (id)gLogObj;
  *(_DWORD *)int buf = 136446978;
  *(void *)&uint8_t buf[4] = "nw_proxy_config_create_with_agent_data_extended";
  *(_WORD *)&unsigned char buf[12] = 1024;
  *(_DWORD *)&buf[14] = v12;
  *(_WORD *)&buf[18] = 2048;
  *(void *)&buf[20] = v10;
  *(_WORD *)&buf[28] = 2048;
  *(void *)&buf[30] = v6;
  __int16 v168 = (char *)_os_log_send_and_compose_impl();

  v251[0] = 16;
  char v250 = 0;
  if (!__nwlog_fault(v168, v251, &v250)) {
    goto LABEL_427;
  }
  if (v251[0] == 17)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v169 = (id)gLogObj;
    os_log_type_t v170 = v251[0];
    if (os_log_type_enabled(v169, (os_log_type_t)v251[0]))
    {
      *(_DWORD *)int buf = 136446978;
      *(void *)&uint8_t buf[4] = "nw_proxy_config_create_with_agent_data_extended";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = v12;
      *(_WORD *)&buf[18] = 2048;
      *(void *)&buf[20] = v10;
      *(_WORD *)&buf[28] = 2048;
      *(void *)&buf[30] = v6;
      _os_log_impl(&dword_1830D4000, v169, v170, "%{public}s TLV length (%u) at offset %zu goes beyond total length (%zu)", buf, 0x26u);
    }
    goto LABEL_426;
  }
  if (!v250)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v169 = (id)gLogObj;
    os_log_type_t v179 = v251[0];
    if (os_log_type_enabled(v169, (os_log_type_t)v251[0]))
    {
      *(_DWORD *)int buf = 136446978;
      *(void *)&uint8_t buf[4] = "nw_proxy_config_create_with_agent_data_extended";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = v12;
      *(_WORD *)&buf[18] = 2048;
      *(void *)&buf[20] = v10;
      *(_WORD *)&buf[28] = 2048;
      *(void *)&buf[30] = v6;
      _os_log_impl(&dword_1830D4000, v169, v179, "%{public}s TLV length (%u) at offset %zu goes beyond total length (%zu), backtrace limit exceeded", buf, 0x26u);
    }
    goto LABEL_426;
  }
  uint64_t v174 = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v169 = (id)gLogObj;
  os_log_type_t v175 = v251[0];
  BOOL v176 = os_log_type_enabled(v169, (os_log_type_t)v251[0]);
  if (!v174)
  {
    if (v176)
    {
      *(_DWORD *)int buf = 136446978;
      *(void *)&uint8_t buf[4] = "nw_proxy_config_create_with_agent_data_extended";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = v12;
      *(_WORD *)&buf[18] = 2048;
      *(void *)&buf[20] = v10;
      *(_WORD *)&buf[28] = 2048;
      *(void *)&buf[30] = v6;
      _os_log_impl(&dword_1830D4000, v169, v175, "%{public}s TLV length (%u) at offset %zu goes beyond total length (%zu), no backtrace", buf, 0x26u);
    }
LABEL_426:

LABEL_427:
    if (!v168) {
      goto LABEL_429;
    }
    goto LABEL_428;
  }
  if (v176)
  {
    *(_DWORD *)int buf = 136447234;
    *(void *)&uint8_t buf[4] = "nw_proxy_config_create_with_agent_data_extended";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = v12;
    *(_WORD *)&buf[18] = 2048;
    *(void *)&buf[20] = v10;
    *(_WORD *)&buf[28] = 2048;
    *(void *)&buf[30] = v6;
    *(_WORD *)&buf[38] = 2082;
    *(void *)&unsigned char buf[40] = v174;
    _os_log_impl(&dword_1830D4000, v169, v175, "%{public}s TLV length (%u) at offset %zu goes beyond total length (%zu), dumping backtrace:%{public}s", buf, 0x30u);
  }

  free(v174);
  if (v168) {
LABEL_428:
  }
    free(v168);
LABEL_429:
  id v246 = v9;
  if (!v240)
  {
    id v4 = (void *)&unk_183D5C000;
LABEL_390:
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v163 = (id)gLogObj;
    int v249 = v4[312];
    *(_DWORD *)int buf = v249;
    *(void *)&uint8_t buf[4] = "nw_proxy_config_create_with_agent_data_extended";
    __int16 v164 = (char *)_os_log_send_and_compose_impl();

    v251[0] = 16;
    char v250 = 0;
    if (__nwlog_fault(v164, v251, &v250))
    {
      if (v251[0] == 17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v165 = (id)gLogObj;
        os_log_type_t v166 = v251[0];
        if (os_log_type_enabled(v165, (os_log_type_t)v251[0]))
        {
          *(_DWORD *)int buf = v249;
          *(void *)&uint8_t buf[4] = "nw_proxy_config_create_with_agent_data_extended";
          _os_log_impl(&dword_1830D4000, v165, v166, "%{public}s called with null endpoint", buf, 0xCu);
        }
      }
      else if (v250)
      {
        id v171 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v165 = (id)gLogObj;
        os_log_type_t v172 = v251[0];
        BOOL v173 = os_log_type_enabled(v165, (os_log_type_t)v251[0]);
        if (v171)
        {
          if (v173)
          {
            *(_DWORD *)int buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_proxy_config_create_with_agent_data_extended";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = v171;
            _os_log_impl(&dword_1830D4000, v165, v172, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v171);
          if (!v164) {
            goto LABEL_420;
          }
          goto LABEL_419;
        }
        if (v173)
        {
          *(_DWORD *)int buf = v249;
          *(void *)&uint8_t buf[4] = "nw_proxy_config_create_with_agent_data_extended";
          _os_log_impl(&dword_1830D4000, v165, v172, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v165 = (id)gLogObj;
        os_log_type_t v177 = v251[0];
        if (os_log_type_enabled(v165, (os_log_type_t)v251[0]))
        {
          *(_DWORD *)int buf = v249;
          *(void *)&uint8_t buf[4] = "nw_proxy_config_create_with_agent_data_extended";
          _os_log_impl(&dword_1830D4000, v165, v177, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
    if (!v164)
    {
LABEL_420:
      nw_endpoint_t v240 = 0;
      BOOL v178 = 0;
      goto LABEL_444;
    }
LABEL_419:
    free(v164);
    goto LABEL_420;
  }
  if (!stack)
  {
    stack = v231;
    if (!stack)
    {
      uint64_t v208 = __nwlog_obj();
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_proxy_config_create_with_agent_data_extended";
      __int16 v209 = (char *)_os_log_send_and_compose_impl();

      v251[0] = 16;
      char v250 = 0;
      if (__nwlog_fault(v209, v251, &v250))
      {
        if (v251[0] == 17)
        {
          unint64_t v210 = __nwlog_obj();
          os_log_type_t v211 = v251[0];
          if (os_log_type_enabled(v210, (os_log_type_t)v251[0]))
          {
            *(_DWORD *)int buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_proxy_config_create_with_agent_data_extended";
            _os_log_impl(&dword_1830D4000, v210, v211, "%{public}s called with null stack", buf, 0xCu);
          }
        }
        else if (v250)
        {
          uint64_t v216 = (char *)__nw_create_backtrace_string();
          unint64_t v210 = __nwlog_obj();
          os_log_type_t v217 = v251[0];
          BOOL v218 = os_log_type_enabled(v210, (os_log_type_t)v251[0]);
          if (v216)
          {
            if (v218)
            {
              *(_DWORD *)int buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_proxy_config_create_with_agent_data_extended";
              *(_WORD *)&unsigned char buf[12] = 2082;
              *(void *)&buf[14] = v216;
              _os_log_impl(&dword_1830D4000, v210, v217, "%{public}s called with null stack, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(v216);
            goto LABEL_511;
          }
          if (v218)
          {
            *(_DWORD *)int buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_proxy_config_create_with_agent_data_extended";
            _os_log_impl(&dword_1830D4000, v210, v217, "%{public}s called with null stack, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          unint64_t v210 = __nwlog_obj();
          os_log_type_t v224 = v251[0];
          if (os_log_type_enabled(v210, (os_log_type_t)v251[0]))
          {
            *(_DWORD *)int buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_proxy_config_create_with_agent_data_extended";
            _os_log_impl(&dword_1830D4000, v210, v224, "%{public}s called with null stack, backtrace limit exceeded", buf, 0xCu);
          }
        }
      }
LABEL_511:
      if (v209) {
        free(v209);
      }
      os_log_type_t v231 = 0;
      stack = 0;
      BOOL v178 = 0;
      goto LABEL_444;
    }
  }
  os_log_type_t v180 = v241;
  if (v241)
  {
    nw_dictionary_set_value(v241[1], __s1, stack);
    goto LABEL_443;
  }
  if (v229)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v181 = (id)gLogObj;
    if (os_log_type_enabled(v181, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_proxy_config_create_with_agent_data_extended";
      _os_log_impl(&dword_1830D4000, v181, OS_LOG_TYPE_ERROR, "%{public}s Failed to create proxy config, error in deserializing stack", buf, 0xCu);
    }

    goto LABEL_438;
  }
  if (__s1) {
    BOOL v182 = nw_proxy_config_create_with_stack_internal(v240, stack, __s1);
  }
  else {
    BOOL v182 = (uint64_t *)nw_proxy_config_create_with_stack(v240, stack);
  }
  os_log_type_t v180 = v182;
  if (v182)
  {
LABEL_443:
    objc_storeStrong((id *)v180 + 6, obj);
    objc_storeStrong((id *)v180 + 2, keys);
    objc_storeStrong((id *)v180 + 3, v9);
    objc_storeStrong((id *)v180 + 4, v239);
    *((_DWORD *)v180 + 38) = *(unsigned __int8 *)(a1 + 20);
    *((_DWORD *)v180 + 39) = *(unsigned __int16 *)(a1 + 16);
    *((_WORD *)v180 + 84) = *(_WORD *)(a1 + 18);
    *((_DWORD *)v180 + 40) = *(unsigned __int8 *)(a1 + 21);
    int v183 = *((unsigned char *)v180 + 170) & 0xFE | *(unsigned char *)(a1 + 22) & 1;
    *((unsigned char *)v180 + 170) = v183;
    unsigned int v184 = v183 & 0xFFFFFFFD | (2 * ((*(unsigned __int8 *)(a1 + 22) >> 1) & 1));
    *((unsigned char *)v180 + 170) = v184;
    unsigned int v185 = v184 & 0xFFFFFFFB | (4 * ((*(unsigned __int16 *)(a1 + 22) >> 13) & 1));
    *((unsigned char *)v180 + 170) = v185;
    unsigned int v186 = v185 & 0xFFFFFFF7 | (8 * ((*(unsigned __int8 *)(a1 + 22) >> 2) & 1));
    *((unsigned char *)v180 + 170) = v186;
    unsigned int v187 = v186 & 0xFFFFFFEF | (16 * ((*(unsigned __int8 *)(a1 + 22) >> 3) & 1));
    *((unsigned char *)v180 + 170) = v187;
    unsigned int v188 = v187 & 0xFFFFFFDF | (32 * ((*(unsigned __int8 *)(a1 + 22) >> 4) & 1));
    *((unsigned char *)v180 + 170) = v188;
    LOBYTE(v188) = v188 & 0xBF | (((*(unsigned char *)(a1 + 22) & 0x20) != 0) << 6);
    *((unsigned char *)v180 + 170) = v188;
    *((unsigned char *)v180 + 170) = (2 * *(unsigned char *)(a1 + 22)) & 0x80 | v188 & 0x7F;
    int v189 = *((unsigned char *)v180 + 171) & 0xFE | (*(unsigned __int8 *)(a1 + 22) >> 7);
    *((unsigned char *)v180 + 171) = v189;
    unsigned int v190 = v189 & 0xFFFFFFFD | (2 * (HIBYTE(*(unsigned __int16 *)(a1 + 22)) & 1));
    *((unsigned char *)v180 + 171) = v190;
    unsigned int v191 = v190 & 0xFFFFFFFB | (4 * ((*(unsigned __int16 *)(a1 + 22) >> 9) & 1));
    *((unsigned char *)v180 + 171) = v191;
    unsigned int v192 = v191 & 0xFFFFFFF7 | (8 * ((*(unsigned __int16 *)(a1 + 22) >> 10) & 1));
    *((unsigned char *)v180 + 171) = v192;
    unsigned int v193 = v192 & 0xFFFFFFEF | (16 * ((*(unsigned __int16 *)(a1 + 22) >> 11) & 1));
    *((unsigned char *)v180 + 171) = v193;
    LOBYTE(v193) = v193 & 0xBF | (((*(_WORD *)(a1 + 22) & 0x1000) != 0) << 6);
    *((unsigned char *)v180 + 171) = v193;
    *((unsigned char *)v180 + 171) = (*(unsigned __int16 *)(a1 + 22) >> 7) & 0x80 | v193 & 0x7F;
    int v194 = *((unsigned char *)v180 + 172) & 0xFE | (*(unsigned __int16 *)(a1 + 22) >> 15);
    *((unsigned char *)v180 + 172) = v194;
    *((unsigned char *)v180 + 172) = (2 * (*(unsigned char *)(a1 + 24) & 1)) | v194 & 0xFD;
    *(_OWORD *)(v180 + 9) = *(_OWORD *)a1;
    *(_OWORD *)(v180 + 7) = *(_OWORD *)uu;
    objc_storeStrong((id *)v180 + 15, v232);
    objc_storeStrong((id *)v180 + 16, v233);
    objc_storeStrong((id *)v180 + 17, v234);
    objc_storeStrong((id *)v180 + 13, v238);
    objc_storeStrong((id *)v180 + 18, objects);
    BOOL v178 = v180;
    int v241 = v178;
    goto LABEL_444;
  }
  os_log_type_t v212 = __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_proxy_config_create_with_agent_data_extended";
  uint64_t v213 = (char *)_os_log_send_and_compose_impl();

  v251[0] = 16;
  char v250 = 0;
  if (__nwlog_fault(v213, v251, &v250))
  {
    if (v251[0] == 17)
    {
      BOOL v214 = __nwlog_obj();
      os_log_type_t v215 = v251[0];
      if (os_log_type_enabled(v214, (os_log_type_t)v251[0]))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_proxy_config_create_with_agent_data_extended";
        _os_log_impl(&dword_1830D4000, v214, v215, "%{public}s called with null config", buf, 0xCu);
      }
      goto LABEL_516;
    }
    if (v250)
    {
      v219 = (char *)__nw_create_backtrace_string();
      BOOL v214 = __nwlog_obj();
      os_log_type_t v220 = v251[0];
      BOOL v221 = os_log_type_enabled(v214, (os_log_type_t)v251[0]);
      if (v219)
      {
        if (v221)
        {
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_proxy_config_create_with_agent_data_extended";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v219;
          _os_log_impl(&dword_1830D4000, v214, v220, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v219);
        goto LABEL_517;
      }
      if (v221)
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_proxy_config_create_with_agent_data_extended";
        _os_log_impl(&dword_1830D4000, v214, v220, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v214 = __nwlog_obj();
      os_log_type_t v225 = v251[0];
      if (os_log_type_enabled(v214, (os_log_type_t)v251[0]))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_proxy_config_create_with_agent_data_extended";
        _os_log_impl(&dword_1830D4000, v214, v225, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_516:
  }
LABEL_517:
  if (v213) {
    free(v213);
  }
LABEL_438:
  int v241 = 0;
  BOOL v178 = 0;
LABEL_444:

  return v178;
}

void sub_18340A5D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,void *a25,void *a26,void *a27,uint64_t a28,void *a29,void *a30,void *a31,void *a32,void *a33,void *a34,void *a35,void *a36,void *a37,void *a38)
{
  _Unwind_Resume(a1);
}

void nw_service_connector_apply_user_parameters(void *a1, void *a2, void *a3, void *a4)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  char v7 = a1;
  id v8 = a2;
  xpc_object_t v9 = a3;
  id v10 = a4;
  if (!v7)
  {
    uint64_t v18 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v35 = "nw_service_connector_apply_user_parameters";
    os_log_type_t v19 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v32 = 0;
    if (!__nwlog_fault(v19, &type, &v32)) {
      goto LABEL_49;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v20 = __nwlog_obj();
      os_log_type_t v21 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v35 = "nw_service_connector_apply_user_parameters";
        _os_log_impl(&dword_1830D4000, v20, v21, "%{public}s called with null serviceConnector", buf, 0xCu);
      }
    }
    else if (v32)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v20 = __nwlog_obj();
      os_log_type_t v25 = type;
      BOOL v26 = os_log_type_enabled(v20, type);
      if (backtrace_string)
      {
        if (v26)
        {
          *(_DWORD *)int buf = 136446466;
          os_log_type_t v35 = "nw_service_connector_apply_user_parameters";
          __int16 v36 = 2082;
          os_log_type_t v37 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v20, v25, "%{public}s called with null serviceConnector, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_49:
        if (!v19) {
          goto LABEL_15;
        }
LABEL_50:
        free(v19);
        goto LABEL_15;
      }
      if (v26)
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v35 = "nw_service_connector_apply_user_parameters";
        _os_log_impl(&dword_1830D4000, v20, v25, "%{public}s called with null serviceConnector, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v20 = __nwlog_obj();
      os_log_type_t v30 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v35 = "nw_service_connector_apply_user_parameters";
        _os_log_impl(&dword_1830D4000, v20, v30, "%{public}s called with null serviceConnector, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_48:

    goto LABEL_49;
  }
  if (v9)
  {
    nw_path_t v11 = nw_connection_copy_current_path(v9);
    nw_path_t v12 = v11;
    if (v11)
    {
      BOOL v13 = v11;
      if (nw_path_network_is_satisfied_update_reason(v13, 0))
      {
        int effective_traffic_class = v13->effective_traffic_class;
        if (!effective_traffic_class) {
          int effective_traffic_class = nw_parameters_get_traffic_class(v13->parameters);
        }
      }
      else
      {
        int effective_traffic_class = 0;
      }
    }
    else
    {
      int effective_traffic_class = 0;
    }
    int traffic_class = nw_parameters_get_traffic_class(v10);
    if (traffic_class != effective_traffic_class)
    {
      int v16 = traffic_class;
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v17 = (id)gLogObj;
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)int buf = 136447234;
        os_log_type_t v35 = "nw_service_connector_apply_user_parameters";
        __int16 v36 = 2114;
        os_log_type_t v37 = v7;
        __int16 v38 = 1024;
        int v39 = v16;
        __int16 v40 = 2114;
        id v41 = v9;
        __int16 v42 = 2114;
        id v43 = v8;
        _os_log_impl(&dword_1830D4000, v17, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ resetting traffic class to %u for connection %{public}@ for %{public}@", buf, 0x30u);
      }

      nw_connection_reset_traffic_class(v9, v16);
    }

    goto LABEL_15;
  }
  uint64_t v22 = __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  os_log_type_t v35 = "nw_service_connector_apply_user_parameters";
  os_log_type_t v19 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v32 = 0;
  if (!__nwlog_fault(v19, &type, &v32)) {
    goto LABEL_49;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    os_log_type_t v20 = __nwlog_obj();
    os_log_type_t v23 = type;
    if (os_log_type_enabled(v20, type))
    {
      *(_DWORD *)int buf = 136446210;
      os_log_type_t v35 = "nw_service_connector_apply_user_parameters";
      _os_log_impl(&dword_1830D4000, v20, v23, "%{public}s called with null acceptedConnection", buf, 0xCu);
    }
    goto LABEL_48;
  }
  if (!v32)
  {
    os_log_type_t v20 = __nwlog_obj();
    os_log_type_t v31 = type;
    if (os_log_type_enabled(v20, type))
    {
      *(_DWORD *)int buf = 136446210;
      os_log_type_t v35 = "nw_service_connector_apply_user_parameters";
      _os_log_impl(&dword_1830D4000, v20, v31, "%{public}s called with null acceptedConnection, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_48;
  }
  os_log_type_t v27 = (char *)__nw_create_backtrace_string();
  os_log_type_t v20 = __nwlog_obj();
  os_log_type_t v28 = type;
  BOOL v29 = os_log_type_enabled(v20, type);
  if (!v27)
  {
    if (v29)
    {
      *(_DWORD *)int buf = 136446210;
      os_log_type_t v35 = "nw_service_connector_apply_user_parameters";
      _os_log_impl(&dword_1830D4000, v20, v28, "%{public}s called with null acceptedConnection, no backtrace", buf, 0xCu);
    }
    goto LABEL_48;
  }
  if (v29)
  {
    *(_DWORD *)int buf = 136446466;
    os_log_type_t v35 = "nw_service_connector_apply_user_parameters";
    __int16 v36 = 2082;
    os_log_type_t v37 = v27;
    _os_log_impl(&dword_1830D4000, v20, v28, "%{public}s called with null acceptedConnection, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v27);
  if (v19) {
    goto LABEL_50;
  }
LABEL_15:
}

void sub_18340ACA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_http_capsule_framer_get_output_frames(uint64_t a1, uint64_t a2, unint64_t a3, unsigned int a4, unsigned int a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_capsule_framer_get_output_frames";
    BOOL v29 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v45 = 0;
    if (!__nwlog_fault(v29, &type, &v45)) {
      goto LABEL_75;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v45)
      {
        os_log_type_t v30 = __nwlog_obj();
        os_log_type_t v31 = type;
        if (!os_log_type_enabled(v30, type)) {
          goto LABEL_75;
        }
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_capsule_framer_get_output_frames";
        char v32 = "%{public}s called with null framer, backtrace limit exceeded";
        goto LABEL_74;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v30 = __nwlog_obj();
      os_log_type_t v31 = type;
      BOOL v34 = os_log_type_enabled(v30, type);
      if (!backtrace_string)
      {
        if (!v34) {
          goto LABEL_75;
        }
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_capsule_framer_get_output_frames";
        char v32 = "%{public}s called with null framer, no backtrace";
        goto LABEL_74;
      }
      if (v34)
      {
        *(_DWORD *)int buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_capsule_framer_get_output_frames";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        os_log_type_t v35 = "%{public}s called with null framer, dumping backtrace:%{public}s";
LABEL_59:
        _os_log_impl(&dword_1830D4000, v30, v31, v35, buf, 0x16u);
      }
LABEL_60:
      free(backtrace_string);
      goto LABEL_75;
    }
    os_log_type_t v30 = __nwlog_obj();
    os_log_type_t v31 = type;
    if (!os_log_type_enabled(v30, type)) {
      goto LABEL_75;
    }
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_capsule_framer_get_output_frames";
    char v32 = "%{public}s called with null framer";
LABEL_74:
    _os_log_impl(&dword_1830D4000, v30, v31, v32, buf, 0xCu);
LABEL_75:
    if (v29) {
      free(v29);
    }
    return 0;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_capsule_framer_get_output_frames";
    BOOL v29 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v45 = 0;
    if (!__nwlog_fault(v29, &type, &v45)) {
      goto LABEL_75;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v30 = __nwlog_obj();
      os_log_type_t v31 = type;
      if (!os_log_type_enabled(v30, type)) {
        goto LABEL_75;
      }
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http_capsule_framer_get_output_frames";
      char v32 = "%{public}s called with null protocol";
      goto LABEL_74;
    }
    if (!v45)
    {
      os_log_type_t v30 = __nwlog_obj();
      os_log_type_t v31 = type;
      if (!os_log_type_enabled(v30, type)) {
        goto LABEL_75;
      }
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http_capsule_framer_get_output_frames";
      char v32 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_74;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v30 = __nwlog_obj();
    os_log_type_t v31 = type;
    BOOL v36 = os_log_type_enabled(v30, type);
    if (backtrace_string)
    {
      if (v36)
      {
        *(_DWORD *)int buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_capsule_framer_get_output_frames";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        os_log_type_t v35 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
        goto LABEL_59;
      }
      goto LABEL_60;
    }
    if (!v36) {
      goto LABEL_75;
    }
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_capsule_framer_get_output_frames";
    char v32 = "%{public}s called with null protocol, no backtrace";
    goto LABEL_74;
  }
  uint64_t v8 = *(void *)(a2 + 32);
  if (!v8 || (uint64_t v9 = *(void *)(v8 + 24)) == 0 || !*(void *)(v9 + 88))
  {
    os_log_type_t v28 = __nwlog_obj();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_http_capsule_framer_get_output_frames";
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&buf[14] = v8;
      _os_log_impl(&dword_1830D4000, v28, OS_LOG_TYPE_ERROR, "%{public}s Output handler (%p)'s get_output_frames callback is not properly set", buf, 0x16u);
    }
    return 0;
  }
  if (a3 < 0x40)
  {
    int v15 = 1;
LABEL_16:
    if (a4 >> 30) {
      int v18 = 8;
    }
    else {
      int v18 = 4;
    }
    if (a4 < 0x4000) {
      int v18 = 2;
    }
    if (a4 >= 0x40) {
      int v19 = v18;
    }
    else {
      int v19 = 1;
    }
    int v20 = v19 + v15;
    BOOL v21 = __CFADD__(a4, v20);
    uint64_t v22 = a4 + v20;
    if (v21)
    {
      if (gLogDatapath)
      {
        os_log_type_t v37 = __nwlog_obj();
        if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
        {
          if (v22 >= 0x40)
          {
            if (v22 >= 0x4000)
            {
              if (v22 >> 30) {
                int v38 = 8;
              }
              else {
                int v38 = 4;
              }
            }
            else
            {
              int v38 = 2;
            }
          }
          else
          {
            int v38 = 1;
          }
          *(_DWORD *)int buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_http_capsule_framer_get_output_frames";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = "minimum_bytes";
          *(_WORD *)&unsigned char buf[22] = 2048;
          uint64_t v48 = (v38 + v15);
          __int16 v49 = 2048;
          uint64_t v50 = v22;
          _os_log_impl(&dword_1830D4000, v37, OS_LOG_TYPE_DEBUG, "%{public}s Overflow: %{public}s, increment %llu, result %llu", buf, 0x2Au);
        }
      }
      uint64_t v22 = 0xFFFFFFFFLL;
    }
    if (a5 >= 0x4000) {
      int v23 = 4;
    }
    else {
      int v23 = 2;
    }
    if (a5 < 0x40) {
      int v23 = 1;
    }
    *(void *)int buf = 0;
    *(void *)&buf[8] = buf;
    LODWORD(v48) = 0;
    *(void *)&buf[16] = 0x2000000000;
    LODWORD(v48) = nw_protocol_get_output_frames(v8, a2, v22, v23 + v15 + a5, a6, (uint64_t)a7);
    if (*(_DWORD *)(*(void *)&buf[8] + 24))
    {
      v39[0] = MEMORY[0x1E4F143A8];
      v39[1] = 0x40000000;
      __int16 v40 = (uint64_t (*)(void *))__nw_http_capsule_framer_get_output_frames_block_invoke;
      id v41 = &unk_1E5243148;
      int v44 = v15;
      __int16 v42 = buf;
      uint64_t v43 = a2;
      uint64_t v24 = *a7;
      do
      {
        if (!v24) {
          break;
        }
        uint64_t v25 = *(void *)(v24 + 32);
        char v26 = v40(v39);
        uint64_t v24 = v25;
      }
      while ((v26 & 1) != 0);
      uint64_t v27 = *(unsigned int *)(*(void *)&buf[8] + 24);
    }
    else
    {
      uint64_t v27 = 0;
    }
    _Block_object_dispose(buf, 8);
    return v27;
  }
  if (a3 < 0x4000)
  {
    int v15 = 2;
    goto LABEL_16;
  }
  if (!(a3 >> 30))
  {
    int v15 = 4;
    goto LABEL_16;
  }
  if (!(a3 >> 62))
  {
    int v15 = 8;
    goto LABEL_16;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
  *(_DWORD *)int buf = 136446466;
  *(void *)&uint8_t buf[4] = "_http_vle_length";
  *(_WORD *)&unsigned char buf[12] = 2048;
  *(void *)&buf[14] = a3;
  int v16 = (void *)_os_log_send_and_compose_impl();
  BOOL result = __nwlog_abort((uint64_t)v16);
  if (!result)
  {
    free(v16);
    int v15 = 0;
    goto LABEL_16;
  }
  __break(1u);
  return result;
}

uint64_t ___ZL44nw_listener_find_socket_inbox_match_on_queueP22NWConcrete_nw_listenerPU27objcproto16OS_nw_parameters8NSObject_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    unint64_t v6 = (id *)v5;
    id v7 = v6[6];
    int is_equal = nw_parameters_is_equal(v7, *(void **)(a1 + 32));
    if (is_equal)
    {
      objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), a3);
    }
    else
    {
      uint64_t v10 = *(void *)(*(void *)(a1 + 40) + 16);
      if (v10 && !nw_path_parameters_get_logging_disabled(*(void *)(v10 + 104)))
      {
        if (__nwlog_listener_log::onceToken != -1) {
          dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_40_44887);
        }
        nw_path_t v11 = (id)glistenerLogObj;
        if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
        {
          id_string = nw_listener_get_id_string(*(void **)(a1 + 40));
          uint64_t v13 = *(void *)(a1 + 32);
          int v15 = 136447234;
          int v16 = "nw_listener_find_socket_inbox_match_on_queue_block_invoke";
          __int16 v17 = 2082;
          int v18 = id_string;
          __int16 v19 = 2114;
          int v20 = v6;
          __int16 v21 = 2114;
          id v22 = v7;
          __int16 v23 = 2114;
          uint64_t v24 = v13;
          _os_log_impl(&dword_1830D4000, v11, OS_LOG_TYPE_INFO, "%{public}s [%{public}s] Ignoring existing socket listener: %{public}@, inbox parameters: (%{public}@) do not match: (%{public}@)", (uint8_t *)&v15, 0x34u);
        }
      }
    }

    uint64_t v9 = is_equal ^ 1u;
  }
  else
  {
    uint64_t v9 = 1;
  }

  return v9;
}

void sub_18340B5A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_parameters_is_equal(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  uint64_t v6 = v3 == v4;
  if (v3 != v4 && v3 && v4)
  {
    if (memcmp(v3 + 8, v4 + 8, 0x60uLL)) {
      goto LABEL_42;
    }
    id v7 = nw_parameters_copy_path_parameters(v3, 0);
    id v8 = nw_parameters_copy_path_parameters(v5, 0);
    BOOL v9 = nw_path_parameters_are_equal(v7, v8, 0);

    if (!v9) {
      goto LABEL_42;
    }
    uint64_t v10 = (const char *)*((void *)v3 + 14);
    nw_path_t v11 = (const char *)*((void *)v5 + 14);
    if (v10 != v11 && v10 && v11)
    {
      if (strcmp(v10, v11)) {
        goto LABEL_42;
      }
    }
    else if (v10 != v11)
    {
      goto LABEL_42;
    }
    nw_path_t v12 = (const char *)*((void *)v3 + 15);
    uint64_t v13 = (const char *)*((void *)v5 + 15);
    if (v12 != v13 && v12 && v13)
    {
      if (strcmp(v12, v13)) {
        goto LABEL_42;
      }
    }
    else if (v12 != v13)
    {
      goto LABEL_42;
    }
    if (!nw_endpoint_is_equal(*((void **)v3 + 25), *((void **)v5 + 25), 0)
      || !nw_endpoint_is_equal(*((void **)v3 + 26), *((void **)v5 + 26), 0)
      || !nw_xpc_objects_equal(*((void **)v3 + 16), *((void **)v5 + 16))
      || !nw_xpc_objects_equal(*((void **)v3 + 17), *((void **)v5 + 17)))
    {
      goto LABEL_42;
    }
    uint64_t v14 = *((void *)v3 + 20);
    uint64_t v15 = *((void *)v5 + 20);
    if (v14 == v15) {
      goto LABEL_46;
    }
    uint64_t v6 = 0;
    if (v14 && v15)
    {
      if (*(void *)(v14 + 24) - *(void *)(v14 + 16) != *(void *)(v15 + 24) - *(void *)(v15 + 16)) {
        goto LABEL_42;
      }
      uint64_t v34 = 0;
      os_log_type_t v35 = &v34;
      uint64_t v36 = 0x2020000000;
      char v37 = 1;
      v31[0] = MEMORY[0x1E4F143A8];
      v31[1] = 3221225472;
      v31[2] = __nw_parameters_is_equal_block_invoke;
      v31[3] = &unk_1E524A2E8;
      int v16 = (atomic_uchar *)v14;
      id v32 = v5;
      int v33 = &v34;
      nw_array_apply(v16, (uint64_t)v31);
      uint64_t v6 = *((unsigned __int8 *)v35 + 24);

      _Block_object_dispose(&v34, 8);
      if (v6)
      {
LABEL_46:
        uint64_t v17 = *((void *)v3 + 22);
        uint64_t v18 = *((void *)v5 + 22);
        if (v17 == v18) {
          goto LABEL_47;
        }
        uint64_t v6 = 0;
        if (v17 && v18)
        {
          __int16 v19 = (atomic_uchar *)*((void *)v3 + 22);
          if (*(void *)(v17 + 24) - *(void *)(v17 + 16) != *(void *)(v18 + 24) - *(void *)(v18 + 16)) {
            goto LABEL_42;
          }
          uint64_t v34 = 0;
          os_log_type_t v35 = &v34;
          uint64_t v36 = 0x2020000000;
          char v37 = 0;
          v28[0] = MEMORY[0x1E4F143A8];
          v28[1] = 3221225472;
          _DWORD v28[2] = __nw_parameters_is_equal_block_invoke_2;
          v28[3] = &unk_1E524A2E8;
          id v29 = v5;
          os_log_type_t v30 = &v34;
          nw_array_apply(v19, (uint64_t)v28);
          int v20 = *((unsigned __int8 *)v35 + 24);

          _Block_object_dispose(&v34, 8);
          uint64_t v6 = 0;
          if (!v20)
          {
LABEL_47:
            if (!nw_proxy_config_is_equal(*((void **)v3 + 23), *((void **)v5 + 23))
              || !nw_proxy_config_is_equal(*((void **)v3 + 24), *((void **)v5 + 24))
              || !nw_protocol_stack_is_equal(*((void **)v3 + 19), *((void **)v5 + 19), 0))
            {
              goto LABEL_42;
            }
            uint64_t v21 = *((void *)v3 + 21);
            uint64_t v22 = *((void *)v5 + 21);
            if (v21 == v22) {
              goto LABEL_48;
            }
            uint64_t v6 = 0;
            if (v21 && v22)
            {
              if (*(void *)(v21 + 24) - *(void *)(v21 + 16) != *(void *)(v22 + 24) - *(void *)(v22 + 16)) {
                goto LABEL_42;
              }
              uint64_t v34 = 0;
              os_log_type_t v35 = &v34;
              uint64_t v36 = 0x2020000000;
              char v37 = 0;
              v25[0] = MEMORY[0x1E4F143A8];
              v25[1] = 3221225472;
              v25[2] = __nw_parameters_is_equal_block_invoke_3;
              v25[3] = &unk_1E524A2E8;
              id v26 = v5;
              uint64_t v27 = &v34;
              nw_array_apply((atomic_uchar *)v21, (uint64_t)v25);
              int v23 = *((unsigned __int8 *)v35 + 24);

              _Block_object_dispose(&v34, 8);
              uint64_t v6 = 0;
              if (!v23)
              {
LABEL_48:
                if (nw_dispatch_data_is_equal(*((dispatch_data_t *)v3 + 18), *((NSObject **)v5 + 18)))
                {
                  uint64_t v6 = nw_xpc_objects_equal(*((void **)v3 + 27), *((void **)v5 + 27));
                  goto LABEL_43;
                }
LABEL_42:
                uint64_t v6 = 0;
              }
            }
          }
        }
      }
    }
  }
LABEL_43:

  return v6;
}

void sub_18340B9DC(_Unwind_Exception *a1)
{
  id v5 = v4;

  _Unwind_Resume(a1);
}

BOOL nw_xpc_objects_equal(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  BOOL v6 = v3 == v4;
  if (v3 != v4 && v3 && v4) {
    BOOL v6 = xpc_equal(v3, v4);
  }

  return v6;
}

{
  id v3;
  id v4;
  void *v5;
  BOOL v6;

  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  BOOL v6 = v3 == v4;
  if (v3 != v4 && v3 && v4) {
    BOOL v6 = xpc_equal(v3, v4);
  }

  return v6;
}

void sub_18340BA78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_proxy_config_is_equal(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (v3 == v4)
  {
    uint64_t is_equal = 1;
    goto LABEL_29;
  }
  uint64_t is_equal = 0;
  if (v3 && v4)
  {
    uint64_t v7 = *((void *)v3 + 1);
    uint64_t v8 = *((void *)v5 + 1);
    if (v7 == v8) {
      goto LABEL_9;
    }
    uint64_t is_equal = 0;
    if (v7 && v8)
    {
      size_t count = nw_dictionary_get_count(v7);
      if (count != nw_dictionary_get_count(*((void *)v5 + 1))) {
        goto LABEL_27;
      }
      uint64_t v41 = 0;
      __int16 v42 = &v41;
      uint64_t v43 = 0x2020000000;
      char v44 = 0;
      uint64_t v10 = *((void *)v3 + 1);
      v38[0] = MEMORY[0x1E4F143A8];
      v38[1] = 3221225472;
      v38[2] = __nw_proxy_config_is_equal_block_invoke;
      v38[3] = &unk_1E524A1A8;
      int v39 = v5;
      __int16 v40 = &v41;
      nw_dictionary_apply(v10, (uint64_t)v38);
      int v11 = *((unsigned __int8 *)v42 + 24);

      _Block_object_dispose(&v41, 8);
      uint64_t is_equal = 0;
      if (!v11)
      {
LABEL_9:
        uint64_t v12 = *((void *)v3 + 6);
        uint64_t v13 = *((void *)v5 + 6);
        if (v12 == v13) {
          goto LABEL_33;
        }
        uint64_t is_equal = 0;
        if (v12 && v13)
        {
          if (*(void *)(v12 + 24) - *(void *)(v12 + 16) != *(void *)(v13 + 24) - *(void *)(v13 + 16)) {
            goto LABEL_27;
          }
          uint64_t v41 = 0;
          __int16 v42 = &v41;
          uint64_t v43 = 0x2020000000;
          char v44 = 0;
          v35[0] = MEMORY[0x1E4F143A8];
          v35[1] = 3221225472;
          v35[2] = __nw_proxy_config_is_equal_block_invoke_2;
          v35[3] = &unk_1E524A2E8;
          uint64_t v36 = v5;
          char v37 = &v41;
          nw_array_apply((atomic_uchar *)v12, (uint64_t)v35);
          int v14 = *((unsigned __int8 *)v42 + 24);

          _Block_object_dispose(&v41, 8);
          uint64_t is_equal = 0;
          if (!v14)
          {
LABEL_33:
            uint64_t v15 = (void *)*((void *)v5 + 2);
            id v16 = *((id *)v3 + 2);
            id v17 = v15;
            uint64_t v18 = v17;
            BOOL v19 = v16 == v17;
            if (v16 != v17 && v16 && v17) {
              BOOL v19 = xpc_equal(v16, v17);
            }

            if (!v19) {
              goto LABEL_27;
            }
            if (!nw_unordered_xpc_array_is_equal(*((xpc_object_t *)v3 + 3), *((xpc_object_t *)v5 + 3))) {
              goto LABEL_27;
            }
            if (!nw_unordered_xpc_array_is_equal(*((xpc_object_t *)v3 + 4), *((xpc_object_t *)v5 + 4))) {
              goto LABEL_27;
            }
            int v20 = (void *)*((void *)v3 + 13);
            uint64_t v21 = (void *)*((void *)v5 + 13);
            if (v20 != v21 && !nw_authentication_credential_is_equal(v20, v21)) {
              goto LABEL_27;
            }
            if (*((_DWORD *)v3 + 38) != *((_DWORD *)v5 + 38)) {
              goto LABEL_27;
            }
            if (*((_DWORD *)v3 + 39) != *((_DWORD *)v5 + 39)) {
              goto LABEL_27;
            }
            if (v3[84] != v5[84]) {
              goto LABEL_27;
            }
            unsigned int v22 = *((unsigned __int8 *)v5 + 170) ^ *((unsigned __int8 *)v3 + 170);
            if ((v22 & 7) != 0) {
              goto LABEL_27;
            }
            uint64_t is_equal = 0;
            if (v22 <= 0x3F)
            {
              int v24 = *((unsigned __int8 *)v5 + 171) ^ *((unsigned __int8 *)v3 + 171);
              if (!(v24 & 0x20 | v22 & 0x38))
              {
                uint64_t is_equal = 0;
                if ((v24 & 0xFFFFFFDF) == 0 && *((_DWORD *)v3 + 40) == *((_DWORD *)v5 + 40))
                {
                  if (((*((unsigned char *)v5 + 172) ^ *((unsigned char *)v3 + 172)) & 3) != 0
                    || uuid_compare((const unsigned __int8 *)v3 + 56, (const unsigned __int8 *)v5 + 56)
                    || uuid_compare((const unsigned __int8 *)v3 + 72, (const unsigned __int8 *)v5 + 72)
                    || !nw_proxy_config_is_equal(*((void *)v3 + 11), *((void *)v5 + 11)))
                  {
                    goto LABEL_27;
                  }
                  uint64_t v25 = (void *)*((void *)v3 + 15);
                  id v26 = (void *)*((void *)v5 + 15);
                  if (v25 != v26)
                  {
                    uint64_t is_equal = 0;
                    if (!v25 || !v26) {
                      goto LABEL_29;
                    }
                    if (!xpc_equal(v25, v26)) {
                      goto LABEL_27;
                    }
                  }
                  uint64_t v27 = (void *)*((void *)v3 + 16);
                  os_log_type_t v28 = (void *)*((void *)v5 + 16);
                  if (v27 != v28)
                  {
                    uint64_t is_equal = 0;
                    if (!v27 || !v28) {
                      goto LABEL_29;
                    }
                    if (!xpc_equal(v27, v28)) {
                      goto LABEL_27;
                    }
                  }
                  id v29 = (void *)*((void *)v3 + 17);
                  os_log_type_t v30 = (void *)*((void *)v5 + 17);
                  if (v29 != v30)
                  {
                    uint64_t is_equal = 0;
                    if (!v29 || !v30) {
                      goto LABEL_29;
                    }
                    if (!xpc_equal(v29, v30)) {
                      goto LABEL_27;
                    }
                  }
                  os_log_type_t v31 = (void *)*((void *)v3 + 18);
                  id v32 = (void *)*((void *)v5 + 18);
                  if (v31 != v32)
                  {
                    uint64_t is_equal = 0;
                    if (!v31 || !v32) {
                      goto LABEL_29;
                    }
                    if (!xpc_equal(v31, v32)) {
                      goto LABEL_27;
                    }
                  }
                  int v33 = (void *)*((void *)v3 + 14);
                  uint64_t v34 = (void *)*((void *)v5 + 14);
                  if (v33 == v34)
                  {
LABEL_58:
                    uint64_t is_equal = nw_endpoint_is_equal(*((void **)v3 + 5), *((void **)v5 + 5), 0);
                    goto LABEL_29;
                  }
                  uint64_t is_equal = 0;
                  if (v33 && v34)
                  {
                    if (xpc_equal(v33, v34)) {
                      goto LABEL_58;
                    }
LABEL_27:
                    uint64_t is_equal = 0;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_29:

  return is_equal;
}

void sub_18340BEAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_protocol_stack_is_equal(void *a1, void *a2, int a3)
{
  id v5 = a1;
  BOOL v6 = a2;
  uint64_t v7 = v6;
  uint64_t is_equal = v5 == v6;
  if (v5 != v6 && v5 && v6)
  {
    uint64_t v9 = v5[1];
    uint64_t v10 = v6[1];
    if (v9 == v10) {
      goto LABEL_9;
    }
    uint64_t is_equal = 0;
    if (v9 && v10)
    {
      if (*(void *)(v9 + 24) - *(void *)(v9 + 16) != *(void *)(v10 + 24) - *(void *)(v10 + 16)) {
        goto LABEL_17;
      }
      uint64_t v24 = 0;
      uint64_t v25 = &v24;
      uint64_t v26 = 0x2020000000;
      char v27 = 0;
      v20[0] = MEMORY[0x1E4F143A8];
      v20[1] = 3221225472;
      v20[2] = __nw_protocol_stack_is_equal_block_invoke;
      v20[3] = &unk_1E523D200;
      int v23 = a3;
      uint64_t v21 = v6;
      unsigned int v22 = &v24;
      nw_array_apply((atomic_uchar *)v9, (uint64_t)v20);
      int v11 = *((unsigned __int8 *)v25 + 24);

      _Block_object_dispose(&v24, 8);
      uint64_t is_equal = 0;
      if (!v11)
      {
LABEL_9:
        uint64_t v12 = v5[2];
        uint64_t v13 = v7[2];
        if (v12 == v13) {
          goto LABEL_21;
        }
        uint64_t is_equal = 0;
        if (v12 && v13)
        {
          if (*(void *)(v12 + 24) - *(void *)(v12 + 16) != *(void *)(v13 + 24) - *(void *)(v13 + 16)) {
            goto LABEL_17;
          }
          uint64_t v24 = 0;
          uint64_t v25 = &v24;
          uint64_t v26 = 0x2020000000;
          char v27 = 0;
          v16[0] = MEMORY[0x1E4F143A8];
          v16[1] = 3221225472;
          v16[2] = __nw_protocol_stack_is_equal_block_invoke_2;
          v16[3] = &unk_1E523D200;
          int v19 = a3;
          id v17 = v7;
          uint64_t v18 = &v24;
          nw_array_apply((atomic_uchar *)v12, (uint64_t)v16);
          int v14 = *((unsigned __int8 *)v25 + 24);

          _Block_object_dispose(&v24, 8);
          uint64_t is_equal = 0;
          if (!v14)
          {
LABEL_21:
            if (nw_protocol_option_is_equal((void *)v5[3], (void *)v7[3])
              && nw_protocol_option_is_equal((void *)v5[5], (void *)v7[5]))
            {
              uint64_t is_equal = nw_protocol_option_is_equal((void *)v5[6], (void *)v7[6]);
              goto LABEL_18;
            }
LABEL_17:
            uint64_t is_equal = 0;
          }
        }
      }
    }
  }
LABEL_18:

  return is_equal;
}

void sub_18340C118(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_dispatch_data_is_equal(dispatch_data_t data, NSObject *a2)
{
  BOOL v2 = data == a2;
  if (data != a2 && data && a2)
  {
    size_t size = dispatch_data_get_size(data);
    if (size == dispatch_data_get_size(a2))
    {
      uint64_t v8 = 0;
      uint64_t v9 = &v8;
      uint64_t v10 = 0x2000000000;
      char v11 = 1;
      v7[0] = MEMORY[0x1E4F143A8];
      v7[1] = 0x40000000;
      v7[2] = __nw_dispatch_data_is_equal_block_invoke;
      v7[3] = &unk_1E5242BF8;
      v7[4] = &v8;
      v7[5] = a2;
      dispatch_data_apply(data, v7);
      BOOL v2 = *((unsigned char *)v9 + 24) != 0;
      _Block_object_dispose(&v8, 8);
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

void nw_http_connection_metadata_set_connection_closed_handler(void *a1, void *a2, void *a3)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  if (!v5)
  {
    uint64_t v13 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v43 = "nw_http_connection_metadata_set_connection_closed_handler";
    int v14 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v40 = 0;
    if (!__nwlog_fault(v14, &type, &v40)) {
      goto LABEL_76;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v15 = __nwlog_obj();
      os_log_type_t v16 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v43 = "nw_http_connection_metadata_set_connection_closed_handler";
        _os_log_impl(&dword_1830D4000, v15, v16, "%{public}s called with null metadata", buf, 0xCu);
      }
    }
    else if (v40)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v15 = __nwlog_obj();
      os_log_type_t v24 = type;
      BOOL v25 = os_log_type_enabled(v15, type);
      if (backtrace_string)
      {
        if (v25)
        {
          *(_DWORD *)int buf = 136446466;
          uint64_t v43 = "nw_http_connection_metadata_set_connection_closed_handler";
          __int16 v44 = 2082;
          char v45 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v15, v24, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_76:
        if (!v14) {
          goto LABEL_10;
        }
LABEL_77:
        free(v14);
        goto LABEL_10;
      }
      if (v25)
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v43 = "nw_http_connection_metadata_set_connection_closed_handler";
        _os_log_impl(&dword_1830D4000, v15, v24, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v15 = __nwlog_obj();
      os_log_type_t v33 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v43 = "nw_http_connection_metadata_set_connection_closed_handler";
        _os_log_impl(&dword_1830D4000, v15, v33, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_75:

    goto LABEL_76;
  }
  id v8 = v5;
  id v9 = *((id *)v8 + 1);

  if (nw_protocol_copy_http_connection_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_connection_definition_onceToken, &__block_literal_global_89);
  }
  BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v9, nw_protocol_copy_http_connection_definition_definition);

  if (!is_equal_unsafe)
  {
    id v17 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v43 = "nw_http_connection_metadata_set_connection_closed_handler";
    int v14 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v40 = 0;
    if (!__nwlog_fault(v14, &type, &v40)) {
      goto LABEL_76;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v15 = __nwlog_obj();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v43 = "nw_http_connection_metadata_set_connection_closed_handler";
        _os_log_impl(&dword_1830D4000, v15, v18, "%{public}s metadata must be http_connection", buf, 0xCu);
      }
      goto LABEL_75;
    }
    if (!v40)
    {
      uint64_t v15 = __nwlog_obj();
      os_log_type_t v34 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v43 = "nw_http_connection_metadata_set_connection_closed_handler";
        _os_log_impl(&dword_1830D4000, v15, v34, "%{public}s metadata must be http_connection, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_75;
    }
    uint64_t v26 = (char *)__nw_create_backtrace_string();
    uint64_t v15 = __nwlog_obj();
    os_log_type_t v27 = type;
    BOOL v28 = os_log_type_enabled(v15, type);
    if (!v26)
    {
      if (v28)
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v43 = "nw_http_connection_metadata_set_connection_closed_handler";
        _os_log_impl(&dword_1830D4000, v15, v27, "%{public}s metadata must be http_connection, no backtrace", buf, 0xCu);
      }
      goto LABEL_75;
    }
    if (v28)
    {
      *(_DWORD *)int buf = 136446466;
      uint64_t v43 = "nw_http_connection_metadata_set_connection_closed_handler";
      __int16 v44 = 2082;
      char v45 = v26;
      _os_log_impl(&dword_1830D4000, v15, v27, "%{public}s metadata must be http_connection, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_50;
  }
  if (!v6)
  {
    int v19 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v43 = "nw_http_connection_metadata_set_connection_closed_handler";
    int v14 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v40 = 0;
    if (!__nwlog_fault(v14, &type, &v40)) {
      goto LABEL_76;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v15 = __nwlog_obj();
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v43 = "nw_http_connection_metadata_set_connection_closed_handler";
        _os_log_impl(&dword_1830D4000, v15, v20, "%{public}s called with null closed_handler", buf, 0xCu);
      }
      goto LABEL_75;
    }
    if (!v40)
    {
      uint64_t v15 = __nwlog_obj();
      os_log_type_t v35 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v43 = "nw_http_connection_metadata_set_connection_closed_handler";
        _os_log_impl(&dword_1830D4000, v15, v35, "%{public}s called with null closed_handler, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_75;
    }
    uint64_t v26 = (char *)__nw_create_backtrace_string();
    uint64_t v15 = __nwlog_obj();
    os_log_type_t v29 = type;
    BOOL v30 = os_log_type_enabled(v15, type);
    if (!v26)
    {
      if (v30)
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v43 = "nw_http_connection_metadata_set_connection_closed_handler";
        _os_log_impl(&dword_1830D4000, v15, v29, "%{public}s called with null closed_handler, no backtrace", buf, 0xCu);
      }
      goto LABEL_75;
    }
    if (v30)
    {
      *(_DWORD *)int buf = 136446466;
      uint64_t v43 = "nw_http_connection_metadata_set_connection_closed_handler";
      __int16 v44 = 2082;
      char v45 = v26;
      _os_log_impl(&dword_1830D4000, v15, v29, "%{public}s called with null closed_handler, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_50;
  }
  if (!v7)
  {
    uint64_t v21 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v43 = "nw_http_connection_metadata_set_connection_closed_handler";
    int v14 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v40 = 0;
    if (!__nwlog_fault(v14, &type, &v40)) {
      goto LABEL_76;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v15 = __nwlog_obj();
      os_log_type_t v22 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v43 = "nw_http_connection_metadata_set_connection_closed_handler";
        _os_log_impl(&dword_1830D4000, v15, v22, "%{public}s called with null queue", buf, 0xCu);
      }
      goto LABEL_75;
    }
    if (!v40)
    {
      uint64_t v15 = __nwlog_obj();
      os_log_type_t v36 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v43 = "nw_http_connection_metadata_set_connection_closed_handler";
        _os_log_impl(&dword_1830D4000, v15, v36, "%{public}s called with null queue, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_75;
    }
    uint64_t v26 = (char *)__nw_create_backtrace_string();
    uint64_t v15 = __nwlog_obj();
    os_log_type_t v31 = type;
    BOOL v32 = os_log_type_enabled(v15, type);
    if (!v26)
    {
      if (v32)
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v43 = "nw_http_connection_metadata_set_connection_closed_handler";
        _os_log_impl(&dword_1830D4000, v15, v31, "%{public}s called with null queue, no backtrace", buf, 0xCu);
      }
      goto LABEL_75;
    }
    if (v32)
    {
      *(_DWORD *)int buf = 136446466;
      uint64_t v43 = "nw_http_connection_metadata_set_connection_closed_handler";
      __int16 v44 = 2082;
      char v45 = v26;
      _os_log_impl(&dword_1830D4000, v15, v31, "%{public}s called with null queue, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_50:

    free(v26);
    if (!v14) {
      goto LABEL_10;
    }
    goto LABEL_77;
  }
  v37[0] = MEMORY[0x1E4F143A8];
  v37[1] = 3221225472;
  v37[2] = __nw_http_connection_metadata_set_connection_closed_handler_block_invoke;
  v37[3] = &unk_1E52491D8;
  id v39 = v6;
  id v11 = v7;
  id v38 = v11;
  uint64_t v12 = (os_unfair_lock_s *)*((void *)v8 + 4);
  if (v12)
  {
    __nw_http_connection_metadata_set_connection_closed_handler_block_invoke((uint64_t)v37, v12);
    id v11 = v38;
  }

LABEL_10:
}

uint64_t nw_http_transaction_metadata_get_inbound_message_start_time(void *a1)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  int v1 = a1;
  BOOL v2 = v1;
  if (v1)
  {
    id v3 = nw_protocol_metadata_copy_definition(v1);
    if (nw_protocol_copy_http_transaction_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_transaction_definition_onceToken, &__block_literal_global_84_75899);
    }
    BOOL is_equal = nw_protocol_definition_is_equal(v3, (nw_protocol_definition_t)nw_protocol_copy_http_transaction_definition_definition);

    if (is_equal)
    {
      *(void *)int buf = 0;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x2020000000;
      uint64_t v25 = 0;
      v21[0] = MEMORY[0x1E4F143A8];
      v21[1] = 3221225472;
      v21[2] = __nw_http_transaction_metadata_get_inbound_message_start_time_block_invoke;
      v21[3] = &unk_1E5248E90;
      v21[4] = buf;
      uint64_t isa = (uint64_t)v2[4].isa;
      if (isa)
      {
        __nw_http_transaction_metadata_get_inbound_message_start_time_block_invoke((uint64_t)v21, isa);
        uint64_t v6 = *(void *)(*(void *)&buf[8] + 24);
      }
      else
      {
        uint64_t v6 = 0;
      }
      _Block_object_dispose(buf, 8);
      goto LABEL_9;
    }
    uint64_t v12 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_inbound_message_start_time";
    id v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (__nwlog_fault(v9, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v10 = __nwlog_obj();
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_inbound_message_start_time";
          _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s metadata must be http_transaction", buf, 0xCu);
        }
LABEL_41:

        goto LABEL_42;
      }
      if (!v22)
      {
        uint64_t v10 = __nwlog_obj();
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_inbound_message_start_time";
          _os_log_impl(&dword_1830D4000, v10, v20, "%{public}s metadata must be http_transaction, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v10 = __nwlog_obj();
      os_log_type_t v17 = type;
      BOOL v18 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_inbound_message_start_time";
          _os_log_impl(&dword_1830D4000, v10, v17, "%{public}s metadata must be http_transaction, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v18)
      {
        *(_DWORD *)int buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_inbound_message_start_time";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v10, v17, "%{public}s metadata must be http_transaction, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_29;
    }
  }
  else
  {
    id v8 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_inbound_message_start_time";
    id v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (__nwlog_fault(v9, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v10 = __nwlog_obj();
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_inbound_message_start_time";
          _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null metadata", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (!v22)
      {
        uint64_t v10 = __nwlog_obj();
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_inbound_message_start_time";
          _os_log_impl(&dword_1830D4000, v10, v19, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v10 = __nwlog_obj();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_inbound_message_start_time";
          _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v16)
      {
        *(_DWORD *)int buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_get_inbound_message_start_time";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_29:

      free(backtrace_string);
    }
  }
LABEL_42:
  if (v9) {
    free(v9);
  }
  uint64_t v6 = 0;
LABEL_9:

  return v6;
}

uint64_t __nw_http_transaction_metadata_get_inbound_message_end_time_block_invoke(uint64_t a1, uint64_t a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *(void *)(a2 + 88);
  return 1;
}

uint64_t nw_path_is_traffic_mgmt_background(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  int v1 = a1;
  BOOL v2 = v1;
  if (v1)
  {
    uint64_t v3 = (v1[474] >> 1) & 1;
    goto LABEL_3;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  BOOL v16 = "nw_path_is_traffic_mgmt_background";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v16 = "nw_path_is_traffic_mgmt_background";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null path", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          BOOL v16 = "nw_path_is_traffic_mgmt_background";
          __int16 v17 = 2082;
          BOOL v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v16 = "nw_path_is_traffic_mgmt_background";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v16 = "nw_path_is_traffic_mgmt_background";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

uint64_t NWActivity.parentActivity.getter()
{
  uint64_t v1 = (uint64_t)nw_activity_copy_parent_activity(*(void **)(v0 + 16));
  if (v1)
  {
    v3[3] = swift_getObjectType();
    v3[0] = v1;
    uint64_t v1 = swift_allocObject();
    NWActivity.init(_:)((uint64_t)v3);
  }
  return v1;
}

id nw_activity_copy_parent_activity(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = a1;
  BOOL v2 = v1;
  if (v1)
  {
    id v3 = v1[7];
    goto LABEL_3;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  BOOL v16 = "nw_activity_copy_parent_activity";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v16 = "nw_activity_copy_parent_activity";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null activity", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          BOOL v16 = "nw_activity_copy_parent_activity";
          __int16 v17 = 2082;
          BOOL v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null activity, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v16 = "nw_activity_copy_parent_activity";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null activity, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v16 = "nw_activity_copy_parent_activity";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null activity, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  id v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_context_128k_buffer_manager(void *a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = a1;
  if (v1)
  {
    BOOL v2 = v1;
    uint64_t v3 = nw_context_copy_globals_context(v1);

    uint64_t v4 = *(void *)(*(void *)(v3 + 32) + 148);
    if (!v4)
    {
      *(void *)(*(void *)(v3 + 32) + 148) = nw_mem_buffer_manager_initialize(*(NSObject **)(v3 + 8), aNwcontextbuffe_4, dword_1E8F65238, (unsigned __int16)word_1E8F6523C);
      uint64_t v4 = *(void *)(*(void *)(v3 + 32) + 148);
    }
    goto LABEL_4;
  }
  uint64_t v6 = __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  __int16 v17 = "nw_context_128k_buffer_manager";
  id v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v17 = "nw_context_128k_buffer_manager";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null context", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)int buf = 136446466;
          __int16 v17 = "nw_context_128k_buffer_manager";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null context, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_21;
      }
      if (v12)
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v17 = "nw_context_128k_buffer_manager";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null context, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v17 = "nw_context_128k_buffer_manager";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null context, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_21:
  if (v7) {
    free(v7);
  }
  uint64_t v3 = 0;
  uint64_t v4 = 0;
LABEL_4:

  return v4;
}

void sub_18340D9EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_quic_connection_execute_max_streams_update_block(void *a1, int a2, uint64_t a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  if (nw_protocol_options_is_quic_connection(v5))
  {
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 3221225472;
    v14[2] = __nw_quic_connection_execute_max_streams_update_block_block_invoke;
    v14[3] = &__block_descriptor_44_e9_B16__0_v8l;
    int v15 = a2;
    void v14[4] = a3;
    nw_protocol_options_access_handle(v5, v14);
    goto LABEL_3;
  }
  uint64_t v6 = __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  uint64_t v19 = "nw_quic_connection_execute_max_streams_update_block";
  id v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (__nwlog_fault(v7, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v19 = "nw_quic_connection_execute_max_streams_update_block";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null nw_protocol_options_is_quic_connection(options)", buf, 0xCu);
      }
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)int buf = 136446466;
          uint64_t v19 = "nw_quic_connection_execute_max_streams_update_block";
          __int16 v20 = 2082;
          uint64_t v21 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v12)
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v19 = "nw_quic_connection_execute_max_streams_update_block";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v19 = "nw_quic_connection_execute_max_streams_update_block";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v7) {
    free(v7);
  }
LABEL_3:
}

void sub_18340DCEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

NWConcrete_nw_establishment_report *nw_establishment_report_create_from_dictionary(void *a1)
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  BOOL v2 = v1;
  if (!v1)
  {
    uint64_t v26 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v59 = "nw_establishment_report_create_from_dictionary";
    os_log_type_t v27 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v57 = OS_LOG_TYPE_ERROR;
    char v56 = 0;
    if (!__nwlog_fault(v27, &v57, &v56)) {
      goto LABEL_80;
    }
    if (v57 == OS_LOG_TYPE_FAULT)
    {
      BOOL v28 = __nwlog_obj();
      os_log_type_t v29 = v57;
      if (os_log_type_enabled(v28, v57))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v59 = "nw_establishment_report_create_from_dictionary";
        _os_log_impl(&dword_1830D4000, v28, v29, "%{public}s called with null dictionary", buf, 0xCu);
      }
    }
    else if (v56)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v28 = __nwlog_obj();
      os_log_type_t v37 = v57;
      BOOL v38 = os_log_type_enabled(v28, v57);
      if (backtrace_string)
      {
        if (v38)
        {
          *(_DWORD *)int buf = 136446466;
          uint64_t v59 = "nw_establishment_report_create_from_dictionary";
          __int16 v60 = 2082;
          int v61 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v28, v37, "%{public}s called with null dictionary, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        if (!v27) {
          goto LABEL_82;
        }
        goto LABEL_81;
      }
      if (v38)
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v59 = "nw_establishment_report_create_from_dictionary";
        _os_log_impl(&dword_1830D4000, v28, v37, "%{public}s called with null dictionary, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v28 = __nwlog_obj();
      os_log_type_t v45 = v57;
      if (os_log_type_enabled(v28, v57))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v59 = "nw_establishment_report_create_from_dictionary";
        _os_log_impl(&dword_1830D4000, v28, v45, "%{public}s called with null dictionary, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_79;
  }
  Class Class = object_getClass(v1);
  uint64_t v4 = (objc_class *)MEMORY[0x1E4F14590];
  if (Class != (Class)MEMORY[0x1E4F14590])
  {
    BOOL v30 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v59 = "nw_establishment_report_create_from_dictionary";
    os_log_type_t v27 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v57 = OS_LOG_TYPE_ERROR;
    char v56 = 0;
    if (!__nwlog_fault(v27, &v57, &v56)) {
      goto LABEL_80;
    }
    if (v57 == OS_LOG_TYPE_FAULT)
    {
      BOOL v28 = __nwlog_obj();
      os_log_type_t v31 = v57;
      if (os_log_type_enabled(v28, v57))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v59 = "nw_establishment_report_create_from_dictionary";
        _os_log_impl(&dword_1830D4000, v28, v31, "%{public}s called with null (xpc_get_type(dictionary) == (&_xpc_type_dictionary))", buf, 0xCu);
      }
    }
    else if (v56)
    {
      id v39 = (char *)__nw_create_backtrace_string();
      BOOL v28 = __nwlog_obj();
      os_log_type_t v40 = v57;
      BOOL v41 = os_log_type_enabled(v28, v57);
      if (v39)
      {
        if (v41)
        {
          *(_DWORD *)int buf = 136446466;
          uint64_t v59 = "nw_establishment_report_create_from_dictionary";
          __int16 v60 = 2082;
          int v61 = v39;
          _os_log_impl(&dword_1830D4000, v28, v40, "%{public}s called with null (xpc_get_type(dictionary) == (&_xpc_type_dictionary)), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v39);
LABEL_80:
        if (!v27)
        {
LABEL_82:
          id v5 = 0;
          goto LABEL_17;
        }
LABEL_81:
        free(v27);
        goto LABEL_82;
      }
      if (v41)
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v59 = "nw_establishment_report_create_from_dictionary";
        _os_log_impl(&dword_1830D4000, v28, v40, "%{public}s called with null (xpc_get_type(dictionary) == (&_xpc_type_dictionary)), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v28 = __nwlog_obj();
      os_log_type_t v46 = v57;
      if (os_log_type_enabled(v28, v57))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v59 = "nw_establishment_report_create_from_dictionary";
        _os_log_impl(&dword_1830D4000, v28, v46, "%{public}s called with null (xpc_get_type(dictionary) == (&_xpc_type_dictionary)), backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_79:

    goto LABEL_80;
  }
  id v5 = objc_alloc_init(NWConcrete_nw_establishment_report);
  if (!v5)
  {
    BOOL v32 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v59 = "nw_establishment_report_create_from_dictionary";
    os_log_type_t v33 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v57 = OS_LOG_TYPE_ERROR;
    char v56 = 0;
    if (__nwlog_fault(v33, &v57, &v56))
    {
      if (v57 == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v34 = __nwlog_obj();
        os_log_type_t v35 = v57;
        if (os_log_type_enabled(v34, v57))
        {
          *(_DWORD *)int buf = 136446210;
          uint64_t v59 = "nw_establishment_report_create_from_dictionary";
          _os_log_impl(&dword_1830D4000, v34, v35, "%{public}s called with null report", buf, 0xCu);
        }
      }
      else if (v56)
      {
        __int16 v42 = (char *)__nw_create_backtrace_string();
        os_log_type_t v34 = __nwlog_obj();
        os_log_type_t v43 = v57;
        BOOL v44 = os_log_type_enabled(v34, v57);
        if (v42)
        {
          if (v44)
          {
            *(_DWORD *)int buf = 136446466;
            uint64_t v59 = "nw_establishment_report_create_from_dictionary";
            __int16 v60 = 2082;
            int v61 = v42;
            _os_log_impl(&dword_1830D4000, v34, v43, "%{public}s called with null report, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v42);
          goto LABEL_86;
        }
        if (v44)
        {
          *(_DWORD *)int buf = 136446210;
          uint64_t v59 = "nw_establishment_report_create_from_dictionary";
          _os_log_impl(&dword_1830D4000, v34, v43, "%{public}s called with null report, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        os_log_type_t v34 = __nwlog_obj();
        os_log_type_t v47 = v57;
        if (os_log_type_enabled(v34, v57))
        {
          *(_DWORD *)int buf = 136446210;
          uint64_t v59 = "nw_establishment_report_create_from_dictionary";
          _os_log_impl(&dword_1830D4000, v34, v47, "%{public}s called with null report, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_86:
    if (v33) {
      free(v33);
    }
    goto LABEL_16;
  }
  v5->attempt_started_after_milliseconds = xpc_dictionary_get_uint64(v2, "attempt_started_after_milliseconds");
  v5->duration_milliseconds = xpc_dictionary_get_uint64(v2, "duration_milliseconds");
  v5->resolution_started_after_milliseconds = xpc_dictionary_get_uint64(v2, "resolution_started_after_milliseconds");
  v5->flow_started_after_milliseconds = xpc_dictionary_get_uint64(v2, "flow_started_after_milliseconds");
  if (object_getClass(v2) != v4)
  {
LABEL_5:
    xpc_object_t v6 = 0;
    goto LABEL_6;
  }
  xpc_object_t value = xpc_dictionary_get_value(v2, "proxy_endpoints");
  xpc_object_t v6 = value;
  if (value)
  {
    if (object_getClass(value) != (Class)MEMORY[0x1E4F14568]) {
      goto LABEL_5;
    }
    xpc_object_t v6 = xpc_retain(v6);
    if (v6)
    {
      BOOL v14 = nw_array_create();
      proxy_endpoints = v5->proxy_endpoints;
      v5->proxy_endpoints = (OS_nw_array *)v14;

      applier[0] = MEMORY[0x1E4F143A8];
      applier[1] = 3221225472;
      applier[2] = __nw_establishment_report_create_from_dictionary_block_invoke;
      applier[3] = &unk_1E524B4A0;
      CFArrayRef v55 = v5;
      xpc_array_apply(v6, applier);
    }
  }
LABEL_6:
  if (object_getClass(v2) != v4)
  {
LABEL_7:
    xpc_object_t v7 = 0;
    goto LABEL_8;
  }
  xpc_object_t v16 = xpc_dictionary_get_value(v2, "proxied_next_hop_endpoints");
  xpc_object_t v7 = v16;
  if (v16)
  {
    if (object_getClass(v16) != (Class)MEMORY[0x1E4F14568]) {
      goto LABEL_7;
    }
    xpc_object_t v7 = xpc_retain(v7);
    if (v7)
    {
      BOOL v17 = nw_array_create();
      proxied_next_hop_endpoints = v5->proxied_next_hop_endpoints;
      v5->proxied_next_hop_endpoints = (OS_nw_array *)v17;

      v52[0] = MEMORY[0x1E4F143A8];
      v52[1] = 3221225472;
      v52[2] = __nw_establishment_report_create_from_dictionary_block_invoke_2;
      v52[3] = &unk_1E524B4A0;
      os_log_type_t v53 = v5;
      xpc_array_apply(v7, v52);
    }
  }
LABEL_8:
  v5->previous_attempt_size_t count = xpc_dictionary_get_uint64(v2, "previous_attempt_count");
  *((unsigned char *)v5 + 84) = *((unsigned char *)v5 + 84) & 0xFE | xpc_dictionary_get_BOOL(v2, "proxy_configured");
  if (xpc_dictionary_get_BOOL(v2, "used_proxy")) {
    char v8 = 2;
  }
  else {
    char v8 = 0;
  }
  *((unsigned char *)v5 + 84) = *((unsigned char *)v5 + 84) & 0xFD | v8;
  if (object_getClass(v2) != v4)
  {
LABEL_12:
    xpc_object_t v9 = 0;
    goto LABEL_13;
  }
  xpc_object_t v19 = xpc_dictionary_get_value(v2, "protocol_reports");
  xpc_object_t v9 = v19;
  if (v19)
  {
    if (object_getClass(v19) == (Class)MEMORY[0x1E4F14568])
    {
      xpc_object_t v9 = xpc_retain(v9);
      if (v9)
      {
        BOOL v20 = nw_array_create();
        protocol_reports = v5->protocol_reports;
        v5->protocol_reports = (OS_nw_array *)v20;

        v50[0] = MEMORY[0x1E4F143A8];
        v50[1] = 3221225472;
        v50[2] = __nw_establishment_report_create_from_dictionary_block_invoke_3;
        v50[3] = &unk_1E524B4A0;
        uint64_t v51 = v5;
        xpc_array_apply(v9, v50);
      }
      goto LABEL_13;
    }
    goto LABEL_12;
  }
LABEL_13:
  if (object_getClass(v2) == v4
    && (xpc_object_t v22 = xpc_dictionary_get_value(v2, "resolution_reports")) != 0
    && (int v23 = v22, object_getClass(v22) == (Class)MEMORY[0x1E4F14568]))
  {
    xpc_object_t v10 = xpc_retain(v23);
    if (v10)
    {
      BOOL v24 = nw_array_create();
      resolution_reports = v5->resolution_reports;
      v5->resolution_reports = (OS_nw_array *)v24;

      v48[0] = MEMORY[0x1E4F143A8];
      v48[1] = 3221225472;
      v48[2] = __nw_establishment_report_create_from_dictionary_block_invoke_4;
      v48[3] = &unk_1E524B4A0;
      __int16 v49 = v5;
      xpc_array_apply(v10, v48);
    }
  }
  else
  {
    xpc_object_t v10 = 0;
  }
  os_log_type_t v11 = v5;

LABEL_16:
LABEL_17:

  return v5;
}

void sub_18340EFFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void __39__nw_listener_inbox_socket_description__block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(v2 + 24);
  if (!v3)
  {
    description = nw_endpoint_get_description(*(void **)(v2 + 32));
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = *(void *)(v5 + 40);
    if (v6) {
      xpc_object_t v7 = (const char *)(v6 + 104);
    }
    else {
      xpc_object_t v7 = "<NULL>";
    }
    CFStringRef v8 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"socket: %d, endpoint: %s, interface: %s", *(unsigned int *)(v5 + 80), description, v7);
    uint64_t v9 = *(void *)(a1 + 32);
    xpc_object_t v10 = *(void **)(v9 + 24);
    *(void *)(v9 + 24) = v8;

    uint64_t v3 = *(void **)(*(void *)(a1 + 32) + 24);
  }
  os_log_type_t v11 = (id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40);

  objc_storeStrong(v11, v3);
}

uint64_t nw_quic_get_remote_transport_parameters(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  id v13 = a1;
  if (!nw_protocol_options_is_quic_connection(v13))
  {
    xpc_object_t v16 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    int v58 = "nw_quic_get_remote_transport_parameters";
    BOOL v17 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v56 = OS_LOG_TYPE_ERROR;
    char v55 = 0;
    if (!__nwlog_fault(v17, &v56, &v55)) {
      goto LABEL_80;
    }
    if (v56 == OS_LOG_TYPE_FAULT)
    {
      __int16 v18 = __nwlog_obj();
      os_log_type_t v19 = v56;
      if (os_log_type_enabled(v18, v56))
      {
        *(_DWORD *)int buf = 136446210;
        int v58 = "nw_quic_get_remote_transport_parameters";
        _os_log_impl(&dword_1830D4000, v18, v19, "%{public}s called with null nw_protocol_options_is_quic_connection(options)", buf, 0xCu);
      }
      goto LABEL_124;
    }
    if (!v55)
    {
      __int16 v18 = __nwlog_obj();
      os_log_type_t v47 = v56;
      if (os_log_type_enabled(v18, v56))
      {
        *(_DWORD *)int buf = 136446210;
        int v58 = "nw_quic_get_remote_transport_parameters";
        _os_log_impl(&dword_1830D4000, v18, v47, "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_124;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __int16 v18 = __nwlog_obj();
    os_log_type_t v33 = v56;
    BOOL v34 = os_log_type_enabled(v18, v56);
    if (!backtrace_string)
    {
      if (v34)
      {
        *(_DWORD *)int buf = 136446210;
        int v58 = "nw_quic_get_remote_transport_parameters";
        _os_log_impl(&dword_1830D4000, v18, v33, "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace", buf, 0xCu);
      }
      goto LABEL_124;
    }
    if (v34)
    {
      *(_DWORD *)int buf = 136446466;
      int v58 = "nw_quic_get_remote_transport_parameters";
      __int16 v59 = 2082;
      __int16 v60 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v18, v33, "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_79:

    free(backtrace_string);
    goto LABEL_80;
  }
  if (!a2)
  {
    BOOL v20 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    int v58 = "nw_quic_get_remote_transport_parameters";
    BOOL v17 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v56 = OS_LOG_TYPE_ERROR;
    char v55 = 0;
    if (!__nwlog_fault(v17, &v56, &v55)) {
      goto LABEL_80;
    }
    if (v56 == OS_LOG_TYPE_FAULT)
    {
      __int16 v18 = __nwlog_obj();
      os_log_type_t v21 = v56;
      if (os_log_type_enabled(v18, v56))
      {
        *(_DWORD *)int buf = 136446210;
        int v58 = "nw_quic_get_remote_transport_parameters";
        _os_log_impl(&dword_1830D4000, v18, v21, "%{public}s called with null max_stream_data_bidirectional_local", buf, 0xCu);
      }
      goto LABEL_124;
    }
    if (!v55)
    {
      __int16 v18 = __nwlog_obj();
      os_log_type_t v48 = v56;
      if (os_log_type_enabled(v18, v56))
      {
        *(_DWORD *)int buf = 136446210;
        int v58 = "nw_quic_get_remote_transport_parameters";
        _os_log_impl(&dword_1830D4000, v18, v48, "%{public}s called with null max_stream_data_bidirectional_local, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_124;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __int16 v18 = __nwlog_obj();
    os_log_type_t v35 = v56;
    BOOL v36 = os_log_type_enabled(v18, v56);
    if (!backtrace_string)
    {
      if (v36)
      {
        *(_DWORD *)int buf = 136446210;
        int v58 = "nw_quic_get_remote_transport_parameters";
        _os_log_impl(&dword_1830D4000, v18, v35, "%{public}s called with null max_stream_data_bidirectional_local, no backtrace", buf, 0xCu);
      }
      goto LABEL_124;
    }
    if (v36)
    {
      *(_DWORD *)int buf = 136446466;
      int v58 = "nw_quic_get_remote_transport_parameters";
      __int16 v59 = 2082;
      __int16 v60 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v18, v35, "%{public}s called with null max_stream_data_bidirectional_local, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_79;
  }
  if (!a3)
  {
    xpc_object_t v22 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    int v58 = "nw_quic_get_remote_transport_parameters";
    BOOL v17 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v56 = OS_LOG_TYPE_ERROR;
    char v55 = 0;
    if (!__nwlog_fault(v17, &v56, &v55)) {
      goto LABEL_80;
    }
    if (v56 == OS_LOG_TYPE_FAULT)
    {
      __int16 v18 = __nwlog_obj();
      os_log_type_t v23 = v56;
      if (os_log_type_enabled(v18, v56))
      {
        *(_DWORD *)int buf = 136446210;
        int v58 = "nw_quic_get_remote_transport_parameters";
        _os_log_impl(&dword_1830D4000, v18, v23, "%{public}s called with null max_stream_data_bidirectional_remote", buf, 0xCu);
      }
      goto LABEL_124;
    }
    if (!v55)
    {
      __int16 v18 = __nwlog_obj();
      os_log_type_t v49 = v56;
      if (os_log_type_enabled(v18, v56))
      {
        *(_DWORD *)int buf = 136446210;
        int v58 = "nw_quic_get_remote_transport_parameters";
        _os_log_impl(&dword_1830D4000, v18, v49, "%{public}s called with null max_stream_data_bidirectional_remote, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_124;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __int16 v18 = __nwlog_obj();
    os_log_type_t v37 = v56;
    BOOL v38 = os_log_type_enabled(v18, v56);
    if (!backtrace_string)
    {
      if (v38)
      {
        *(_DWORD *)int buf = 136446210;
        int v58 = "nw_quic_get_remote_transport_parameters";
        _os_log_impl(&dword_1830D4000, v18, v37, "%{public}s called with null max_stream_data_bidirectional_remote, no backtrace", buf, 0xCu);
      }
      goto LABEL_124;
    }
    if (v38)
    {
      *(_DWORD *)int buf = 136446466;
      int v58 = "nw_quic_get_remote_transport_parameters";
      __int16 v59 = 2082;
      __int16 v60 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v18, v37, "%{public}s called with null max_stream_data_bidirectional_remote, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_79;
  }
  if (!a4)
  {
    BOOL v24 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    int v58 = "nw_quic_get_remote_transport_parameters";
    BOOL v17 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v56 = OS_LOG_TYPE_ERROR;
    char v55 = 0;
    if (!__nwlog_fault(v17, &v56, &v55)) {
      goto LABEL_80;
    }
    if (v56 == OS_LOG_TYPE_FAULT)
    {
      __int16 v18 = __nwlog_obj();
      os_log_type_t v25 = v56;
      if (os_log_type_enabled(v18, v56))
      {
        *(_DWORD *)int buf = 136446210;
        int v58 = "nw_quic_get_remote_transport_parameters";
        _os_log_impl(&dword_1830D4000, v18, v25, "%{public}s called with null max_data", buf, 0xCu);
      }
      goto LABEL_124;
    }
    if (!v55)
    {
      __int16 v18 = __nwlog_obj();
      os_log_type_t v50 = v56;
      if (os_log_type_enabled(v18, v56))
      {
        *(_DWORD *)int buf = 136446210;
        int v58 = "nw_quic_get_remote_transport_parameters";
        _os_log_impl(&dword_1830D4000, v18, v50, "%{public}s called with null max_data, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_124;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __int16 v18 = __nwlog_obj();
    os_log_type_t v39 = v56;
    BOOL v40 = os_log_type_enabled(v18, v56);
    if (!backtrace_string)
    {
      if (v40)
      {
        *(_DWORD *)int buf = 136446210;
        int v58 = "nw_quic_get_remote_transport_parameters";
        _os_log_impl(&dword_1830D4000, v18, v39, "%{public}s called with null max_data, no backtrace", buf, 0xCu);
      }
      goto LABEL_124;
    }
    if (v40)
    {
      *(_DWORD *)int buf = 136446466;
      int v58 = "nw_quic_get_remote_transport_parameters";
      __int16 v59 = 2082;
      __int16 v60 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v18, v39, "%{public}s called with null max_data, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_79;
  }
  if (!a5)
  {
    uint64_t v26 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    int v58 = "nw_quic_get_remote_transport_parameters";
    BOOL v17 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v56 = OS_LOG_TYPE_ERROR;
    char v55 = 0;
    if (!__nwlog_fault(v17, &v56, &v55)) {
      goto LABEL_80;
    }
    if (v56 == OS_LOG_TYPE_FAULT)
    {
      __int16 v18 = __nwlog_obj();
      os_log_type_t v27 = v56;
      if (os_log_type_enabled(v18, v56))
      {
        *(_DWORD *)int buf = 136446210;
        int v58 = "nw_quic_get_remote_transport_parameters";
        _os_log_impl(&dword_1830D4000, v18, v27, "%{public}s called with null max_data_unidirectional", buf, 0xCu);
      }
      goto LABEL_124;
    }
    if (!v55)
    {
      __int16 v18 = __nwlog_obj();
      os_log_type_t v51 = v56;
      if (os_log_type_enabled(v18, v56))
      {
        *(_DWORD *)int buf = 136446210;
        int v58 = "nw_quic_get_remote_transport_parameters";
        _os_log_impl(&dword_1830D4000, v18, v51, "%{public}s called with null max_data_unidirectional, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_124;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __int16 v18 = __nwlog_obj();
    os_log_type_t v41 = v56;
    BOOL v42 = os_log_type_enabled(v18, v56);
    if (!backtrace_string)
    {
      if (v42)
      {
        *(_DWORD *)int buf = 136446210;
        int v58 = "nw_quic_get_remote_transport_parameters";
        _os_log_impl(&dword_1830D4000, v18, v41, "%{public}s called with null max_data_unidirectional, no backtrace", buf, 0xCu);
      }
      goto LABEL_124;
    }
    if (v42)
    {
      *(_DWORD *)int buf = 136446466;
      int v58 = "nw_quic_get_remote_transport_parameters";
      __int16 v59 = 2082;
      __int16 v60 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v18, v41, "%{public}s called with null max_data_unidirectional, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_79;
  }
  if (!a6)
  {
    BOOL v28 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    int v58 = "nw_quic_get_remote_transport_parameters";
    BOOL v17 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v56 = OS_LOG_TYPE_ERROR;
    char v55 = 0;
    if (!__nwlog_fault(v17, &v56, &v55)) {
      goto LABEL_80;
    }
    if (v56 == OS_LOG_TYPE_FAULT)
    {
      __int16 v18 = __nwlog_obj();
      os_log_type_t v29 = v56;
      if (os_log_type_enabled(v18, v56))
      {
        *(_DWORD *)int buf = 136446210;
        int v58 = "nw_quic_get_remote_transport_parameters";
        _os_log_impl(&dword_1830D4000, v18, v29, "%{public}s called with null max_streams_bidirectional", buf, 0xCu);
      }
      goto LABEL_124;
    }
    if (!v55)
    {
      __int16 v18 = __nwlog_obj();
      os_log_type_t v52 = v56;
      if (os_log_type_enabled(v18, v56))
      {
        *(_DWORD *)int buf = 136446210;
        int v58 = "nw_quic_get_remote_transport_parameters";
        _os_log_impl(&dword_1830D4000, v18, v52, "%{public}s called with null max_streams_bidirectional, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_124;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __int16 v18 = __nwlog_obj();
    os_log_type_t v43 = v56;
    BOOL v44 = os_log_type_enabled(v18, v56);
    if (!backtrace_string)
    {
      if (v44)
      {
        *(_DWORD *)int buf = 136446210;
        int v58 = "nw_quic_get_remote_transport_parameters";
        _os_log_impl(&dword_1830D4000, v18, v43, "%{public}s called with null max_streams_bidirectional, no backtrace", buf, 0xCu);
      }
      goto LABEL_124;
    }
    if (v44)
    {
      *(_DWORD *)int buf = 136446466;
      int v58 = "nw_quic_get_remote_transport_parameters";
      __int16 v59 = 2082;
      __int16 v60 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v18, v43, "%{public}s called with null max_streams_bidirectional, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_79;
  }
  if (a7)
  {
    v54[0] = MEMORY[0x1E4F143A8];
    v54[1] = 3221225472;
    v54[2] = __nw_quic_get_remote_transport_parameters_block_invoke;
    v54[3] = &__block_descriptor_80_e9_B16__0_v8l;
    v54[4] = a2;
    v54[5] = a3;
    v54[6] = a4;
    v54[7] = a5;
    v54[8] = a6;
    v54[9] = a7;
    uint64_t v14 = nw_protocol_options_access_handle(v13, v54);
    goto LABEL_9;
  }
  BOOL v30 = __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  int v58 = "nw_quic_get_remote_transport_parameters";
  BOOL v17 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t v56 = OS_LOG_TYPE_ERROR;
  char v55 = 0;
  if (__nwlog_fault(v17, &v56, &v55))
  {
    if (v56 == OS_LOG_TYPE_FAULT)
    {
      __int16 v18 = __nwlog_obj();
      os_log_type_t v31 = v56;
      if (os_log_type_enabled(v18, v56))
      {
        *(_DWORD *)int buf = 136446210;
        int v58 = "nw_quic_get_remote_transport_parameters";
        _os_log_impl(&dword_1830D4000, v18, v31, "%{public}s called with null max_streams_unidirectional", buf, 0xCu);
      }
LABEL_124:

      goto LABEL_80;
    }
    if (!v55)
    {
      __int16 v18 = __nwlog_obj();
      os_log_type_t v53 = v56;
      if (os_log_type_enabled(v18, v56))
      {
        *(_DWORD *)int buf = 136446210;
        int v58 = "nw_quic_get_remote_transport_parameters";
        _os_log_impl(&dword_1830D4000, v18, v53, "%{public}s called with null max_streams_unidirectional, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_124;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __int16 v18 = __nwlog_obj();
    os_log_type_t v45 = v56;
    BOOL v46 = os_log_type_enabled(v18, v56);
    if (!backtrace_string)
    {
      if (v46)
      {
        *(_DWORD *)int buf = 136446210;
        int v58 = "nw_quic_get_remote_transport_parameters";
        _os_log_impl(&dword_1830D4000, v18, v45, "%{public}s called with null max_streams_unidirectional, no backtrace", buf, 0xCu);
      }
      goto LABEL_124;
    }
    if (v46)
    {
      *(_DWORD *)int buf = 136446466;
      int v58 = "nw_quic_get_remote_transport_parameters";
      __int16 v59 = 2082;
      __int16 v60 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v18, v45, "%{public}s called with null max_streams_unidirectional, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_79;
  }
LABEL_80:
  if (v17) {
    free(v17);
  }
  uint64_t v14 = 0;
LABEL_9:

  return v14;
}

void sub_183410108(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL41nw_resolver_start_delayed_reporting_timerP22NWConcrete_nw_resolverbbb_block_invoke(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 12));
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    if ((*(unsigned char *)(v2 + 346) & 0x20) != 0) {
      goto LABEL_14;
    }
    if (*(unsigned char *)(v2 + 256))
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      uint64_t v3 = (id)gconnectionLogObj;
      if (!os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_13;
      }
      uint64_t v4 = *(void *)(a1 + 32);
      logging_description = nw_endpoint_get_logging_description(*(void **)(v4 + 24));
      int v14 = 136446722;
      int v15 = "nw_resolver_start_delayed_reporting_timer_block_invoke";
      __int16 v16 = 2082;
      *(void *)BOOL v17 = v4 + 256;
      *(_WORD *)&v17[8] = 2082;
      *(void *)&v17[10] = logging_description;
      uint64_t v6 = "%{public}s [C%{public}s] Delayed reporting timer fired: did not receive all results in time, reporting partia"
           "l results for %{public}s";
      xpc_object_t v7 = v3;
      uint32_t v8 = 32;
      goto LABEL_12;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v3 = (id)gLogObj;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v10 = *(void *)(a1 + 32);
      int v11 = *(_DWORD *)(v10 + 340);
      BOOL v12 = nw_endpoint_get_logging_description(*(void **)(v10 + 24));
      int v14 = 136446722;
      int v15 = "nw_resolver_start_delayed_reporting_timer_block_invoke";
      __int16 v16 = 1024;
      *(_DWORD *)BOOL v17 = v11;
      *(_WORD *)&v17[4] = 2082;
      *(void *)&v17[6] = v12;
      uint64_t v6 = "%{public}s [R%u] Delayed reporting timer fired: did not receive all results in time, reporting partial result"
           "s for %{public}s";
      xpc_object_t v7 = v3;
      uint32_t v8 = 28;
      goto LABEL_12;
    }
  }
  else
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v3 = (id)gLogObj;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v9 = nw_endpoint_get_logging_description(*(void **)(*(void *)(a1 + 32) + 24));
      int v14 = 136446466;
      int v15 = "nw_resolver_start_delayed_reporting_timer_block_invoke";
      __int16 v16 = 2082;
      *(void *)BOOL v17 = v9;
      uint64_t v6 = "%{public}s Delayed reporting timer fired: did not receive all results in time, reporting partial results for %{public}s";
      xpc_object_t v7 = v3;
      uint32_t v8 = 22;
LABEL_12:
      _os_log_impl(&dword_1830D4000, v7, OS_LOG_TYPE_DEBUG, v6, (uint8_t *)&v14, v8);
    }
  }
LABEL_13:

  uint64_t v2 = *(void *)(a1 + 32);
LABEL_14:
  nw_resolver_cancel_delayed_reporting_timer((NWConcrete_nw_resolver *)v2);
  uint64_t v13 = *(void *)(a1 + 32);
  if (*(void *)(v13 + 96))
  {
    nw_resolver_update_client((void *)v13, 0);
    uint64_t v13 = *(void *)(a1 + 32);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(v13 + 12));
}

void sub_1834103A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_parameters_set_allow_ultra_constrained(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  uint64_t v4 = v3;
  if (v3)
  {
    if (a2) {
      __int16 v5 = 4;
    }
    else {
      __int16 v5 = 0;
    }
    *(_WORD *)(*((void *)v3 + 13) + 100) = *(_WORD *)(*((void *)v3 + 13) + 100) & 0xFFFB | v5;
    goto LABEL_6;
  }
  uint64_t v6 = __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  BOOL v17 = "nw_parameters_set_allow_ultra_constrained";
  xpc_object_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint32_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v17 = "nw_parameters_set_allow_ultra_constrained";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint32_t v8 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)int buf = 136446466;
          BOOL v17 = "nw_parameters_set_allow_ultra_constrained";
          __int16 v18 = 2082;
          os_log_type_t v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v12)
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v17 = "nw_parameters_set_allow_ultra_constrained";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint32_t v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v17 = "nw_parameters_set_allow_ultra_constrained";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_23:
  if (v7) {
    free(v7);
  }
LABEL_6:
}

uint64_t ___ZL34nw_protocol_demux_get_input_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke_35(uint64_t a1, uint64_t a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if (!*(void *)nw_hash_node_get_extra(a2)) {
    return 1;
  }
  uint64_t object = nw_hash_node_get_object(a2);
  uint64_t v5 = object;
  if (object)
  {
    uint64_t v6 = *(void *)(object + 24);
    if (v6)
    {
      xpc_object_t v7 = *(void (**)(uint64_t, void))(v6 + 64);
      if (v7)
      {
        v7(object, *(void *)(a1 + 32));
        return 1;
      }
    }
    __nwlog_obj();
    os_log_type_t v9 = *(const char **)(v5 + 16);
    if (!v9) {
      os_log_type_t v9 = "invalid";
    }
  }
  else
  {
    __nwlog_obj();
    os_log_type_t v9 = "invalid";
  }
  *(_DWORD *)int buf = 136446466;
  os_log_type_t v23 = "nw_protocol_demux_get_input_frames_block_invoke";
  __int16 v24 = 2082;
  os_log_type_t v25 = v9;
  uint64_t v10 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v20 = 0;
  if (__nwlog_fault(v10, &type, &v20))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (!os_log_type_enabled(v11, type)) {
        goto LABEL_37;
      }
      os_log_type_t v13 = "invalid";
      if (v5 && *(void *)(v5 + 16)) {
        os_log_type_t v13 = *(const char **)(v5 + 16);
      }
      *(_DWORD *)int buf = 136446466;
      os_log_type_t v23 = "nw_protocol_demux_get_input_frames_block_invoke";
      __int16 v24 = 2082;
      os_log_type_t v25 = v13;
      char v14 = "%{public}s protocol %{public}s has invalid input_available callback";
      goto LABEL_36;
    }
    if (!v20)
    {
      os_log_type_t v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (!os_log_type_enabled(v11, type)) {
        goto LABEL_37;
      }
      __int16 v18 = "invalid";
      if (v5 && *(void *)(v5 + 16)) {
        __int16 v18 = *(const char **)(v5 + 16);
      }
      *(_DWORD *)int buf = 136446466;
      os_log_type_t v23 = "nw_protocol_demux_get_input_frames_block_invoke";
      __int16 v24 = 2082;
      os_log_type_t v25 = v18;
      char v14 = "%{public}s protocol %{public}s has invalid input_available callback, backtrace limit exceeded";
      goto LABEL_36;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v11 = __nwlog_obj();
    os_log_type_t v12 = type;
    BOOL v16 = os_log_type_enabled(v11, type);
    if (backtrace_string)
    {
      if (v16)
      {
        BOOL v17 = "invalid";
        if (v5 && *(void *)(v5 + 16)) {
          BOOL v17 = *(const char **)(v5 + 16);
        }
        *(_DWORD *)int buf = 136446722;
        os_log_type_t v23 = "nw_protocol_demux_get_input_frames_block_invoke";
        __int16 v24 = 2082;
        os_log_type_t v25 = v17;
        __int16 v26 = 2082;
        os_log_type_t v27 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s protocol %{public}s has invalid input_available callback, dumping backtrace:%{public}s", buf, 0x20u);
      }
      free(backtrace_string);
      goto LABEL_37;
    }
    if (v16)
    {
      os_log_type_t v19 = "invalid";
      if (v5 && *(void *)(v5 + 16)) {
        os_log_type_t v19 = *(const char **)(v5 + 16);
      }
      *(_DWORD *)int buf = 136446466;
      os_log_type_t v23 = "nw_protocol_demux_get_input_frames_block_invoke";
      __int16 v24 = 2082;
      os_log_type_t v25 = v19;
      char v14 = "%{public}s protocol %{public}s has invalid input_available callback, no backtrace";
LABEL_36:
      _os_log_impl(&dword_1830D4000, v11, v12, v14, buf, 0x16u);
    }
  }
LABEL_37:
  if (v10) {
    free(v10);
  }
  return 1;
}

uint64_t ___ZL32nw_endpoint_proxy_resolve_configP30NWConcrete_nw_endpoint_handler_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v139 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  int mode = nw_proxy_config_get_mode(v4);
  if ((mode & 0xFFFFFFFE) == 2)
  {
    int v6 = mode;
    int v119 = nw_endpoint_handler_copy_context(*(void **)(a1 + 32));
    if (v6 == 2)
    {
      xpc_object_t v7 = nw_proxy_config_copy_endpoint(v4);
      os_log_type_t v117 = v7;
      if (v7)
      {
        uint32_t v8 = v7;
        CFTypeRef v9 = nw_endpoint_copy_cfurl(v7);
        if (v9)
        {
          uint64_t v10 = *(void **)(a1 + 32);
          if (*(void *)(*(void *)(a1 + 40) + 64))
          {
            id v11 = nw_endpoint_handler_copy_parameters(v10);
            memset(bytes, 0, sizeof(bytes));
            int effective_audit_token = nw_parameters_get_effective_audit_token(v11, bytes);
            os_log_type_t v13 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
            if (effective_audit_token) {
              CFDataRef v14 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], bytes, 32);
            }
            else {
              CFDataRef v14 = 0;
            }
            effective_bundle_id = (const char *)nw_parameters_get_effective_bundle_id(v11);
            if (effective_bundle_id) {
              CFStringRef v76 = CFStringCreateWithCString(*v13, effective_bundle_id, 0x8000100u);
            }
            else {
              CFStringRef v76 = 0;
            }
            uint64_t v112 = *(const void **)(*(void *)(a1 + 40) + 64);
            char is_opaque = nw_parameters_get_https_proxy_is_opaque(v11);
            int https_proxy_over_tls = nw_parameters_get_https_proxy_over_tls(v11);
            int should_trust_invalid_certificates = nw_parameters_get_should_trust_invalid_certificates(v11);
            char is_dry_run = nw_endpoint_handler_is_dry_run(*(void **)(a1 + 32));
            id_string = nw_endpoint_handler_get_id_string(*(void **)(a1 + 32));
            v126[0] = MEMORY[0x1E4F143A8];
            v126[1] = 3221225472;
            v126[2] = ___ZL32nw_endpoint_proxy_resolve_configP30NWConcrete_nw_endpoint_handler_block_invoke_153;
            v126[3] = &unk_1E523E198;
            id v127 = *(id *)(a1 + 32);
            id v128 = *(id *)(a1 + 40);
            id v129 = v4;
            os_log_type_t v25 = nw_pac_resolver_create_with_url(v9, v112, v14, v76, v119, is_opaque, https_proxy_over_tls, should_trust_invalid_certificates, is_dry_run, (uint64_t)id_string, v126);
            if (v14) {
              CFRelease(v14);
            }
            if (v76) {
              CFRelease(v76);
            }

LABEL_69:
            os_log_type_t v74 = v117;
            CFRelease(v9);
LABEL_70:

            if (v25)
            {
              uint64_t v84 = *(void *)(*(void *)(a1 + 40) + 72);
              if (v84
                || (BOOL v85 = nw_array_create(),
                    uint64_t v86 = *(void *)(a1 + 40),
                    id v87 = *(void **)(v86 + 72),
                    *(void *)(v86 + 72) = v85,
                    v87,
                    (uint64_t v84 = *(void *)(*(void *)(a1 + 40) + 72)) != 0))
              {
                nw_array_append(v84, v25);
              }
              nw_pac_resolver_start(v25);
              int v15 = v119;
              int v119 = v25;
              goto LABEL_88;
            }
            if (nw_endpoint_handler_get_logging_disabled(*(void **)(a1 + 32)))
            {
LABEL_89:

              goto LABEL_90;
            }
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
            }
            int v15 = (id)gconnectionLogObj;
            if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
            {
              uint32_t v88 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 32));
              int64_t v89 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 32));
              os_log_type_t v117 = v15;
              nw_endpoint_t v90 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 32));
              logging_description = nw_endpoint_get_logging_description(v90);
              CFRange v92 = nw_endpoint_handler_state_string(*(void **)(a1 + 32));
              BOOL v93 = nw_endpoint_handler_mode_string(*(void **)(a1 + 32));
              id v94 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 32));
              *(_DWORD *)bytes = 136447746;
              *(void *)&bytes[4] = "nw_endpoint_proxy_resolve_config_block_invoke";
              *(_WORD *)&bytes[12] = 2082;
              *(void *)&bytes[14] = v88;
              *(_WORD *)&bytes[22] = 2082;
              *(void *)&bytes[24] = v89;
              __int16 v131 = 2082;
              BOOL v132 = logging_description;
              __int16 v133 = 2082;
              os_log_type_t v134 = v92;
              __int16 v135 = 2082;
              id v136 = v93;
              __int16 v137 = 2114;
              id v138 = v94;
              _os_log_impl(&dword_1830D4000, v117, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] nw_pac_resolver_create returned nil", bytes, 0x48u);

              goto LABEL_27;
            }
LABEL_88:

            goto LABEL_89;
          }
          int minimize_logging = nw_endpoint_handler_get_minimize_logging(v10);
          char logging_disabled = nw_endpoint_handler_get_logging_disabled(*(void **)(a1 + 32));
          if (minimize_logging)
          {
            if (logging_disabled) {
              goto LABEL_40;
            }
            CFTypeRef v97 = v9;
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
            }
            os_log_type_t v48 = (id)gconnectionLogObj;
            if (os_log_type_enabled(v48, OS_LOG_TYPE_DEBUG))
            {
              logb = nw_endpoint_handler_get_id_string(*(void **)(a1 + 32));
              os_log_type_t v98 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 32));
              nw_endpoint_t v99 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 32));
              id v100 = nw_endpoint_get_logging_description(v99);
              os_log_type_t v101 = nw_endpoint_handler_state_string(*(void **)(a1 + 32));
              BOOL v102 = nw_endpoint_handler_mode_string(*(void **)(a1 + 32));
              id v103 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 32));
              *(_DWORD *)bytes = 136447746;
              *(void *)&bytes[4] = "nw_endpoint_proxy_resolve_config_block_invoke_3";
              *(_WORD *)&bytes[12] = 2082;
              *(void *)&bytes[14] = logb;
              *(_WORD *)&bytes[22] = 2082;
              *(void *)&bytes[24] = v98;
              __int16 v131 = 2082;
              BOOL v132 = v100;
              __int16 v133 = 2082;
              os_log_type_t v134 = v101;
              __int16 v135 = 2082;
              id v136 = v102;
              __int16 v137 = 2114;
              id v138 = v103;
              _os_log_impl(&dword_1830D4000, v48, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] No URL, treating proxy as resolved", bytes, 0x48u);

              CFTypeRef v9 = v97;
            }
          }
          else
          {
            if (logging_disabled)
            {
LABEL_40:
              uint64_t v56 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
              if (!v56)
              {
                uint64_t v57 = nw_array_copy(*(void *)(*(void *)(a1 + 40) + 56));
                uint64_t v58 = *(void *)(*(void *)(a1 + 48) + 8);
                __int16 v59 = *(void **)(v58 + 40);
                *(void *)(v58 + 40) = v57;

                uint64_t v56 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
              }
              nw_array_remove_object(v56, (uint64_t)v4);
              os_log_type_t v25 = 0;
              *(unsigned char *)(*(void *)(a1 + 40) + 96) |= 0x80u;
              goto LABEL_69;
            }
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
            }
            os_log_type_t v48 = (id)gconnectionLogObj;
            if (os_log_type_enabled(v48, OS_LOG_TYPE_INFO))
            {
              os_log_type_t v49 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 32));
              os_log_type_t v50 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 32));
              nw_endpoint_t v51 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 32));
              CFTypeRef log = v9;
              os_log_type_t v52 = nw_endpoint_get_logging_description(v51);
              os_log_type_t v53 = nw_endpoint_handler_state_string(*(void **)(a1 + 32));
              int v54 = nw_endpoint_handler_mode_string(*(void **)(a1 + 32));
              id v55 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 32));
              *(_DWORD *)bytes = 136447746;
              *(void *)&bytes[4] = "nw_endpoint_proxy_resolve_config_block_invoke";
              *(_WORD *)&bytes[12] = 2082;
              *(void *)&bytes[14] = v49;
              *(_WORD *)&bytes[22] = 2082;
              *(void *)&bytes[24] = v50;
              __int16 v131 = 2082;
              BOOL v132 = v52;
              __int16 v133 = 2082;
              os_log_type_t v134 = v53;
              __int16 v135 = 2082;
              id v136 = v54;
              __int16 v137 = 2114;
              id v138 = v55;
              _os_log_impl(&dword_1830D4000, v48, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] No URL, treating proxy as resolved", bytes, 0x48u);

              CFTypeRef v9 = log;
            }
          }

          goto LABEL_40;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        __int16 v26 = (id)gLogObj;
        if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)bytes = 136446466;
          *(void *)&bytes[4] = "nw_endpoint_proxy_resolve_config_block_invoke";
          *(_WORD *)&bytes[12] = 2112;
          *(void *)&bytes[14] = v8;
          _os_log_impl(&dword_1830D4000, v26, OS_LOG_TYPE_ERROR, "%{public}s nw_endpoint_copy_cfurl(%@) failed", bytes, 0x16u);
        }
LABEL_26:

LABEL_27:
        int v15 = v117;
        goto LABEL_88;
      }
      if ((nw_endpoint_handler_get_logging_disabled(*(void **)(a1 + 32)) & 1) == 0)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        __int16 v26 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
        {
          os_log_type_t v27 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 32));
          uint64_t v28 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 32));
          nw_endpoint_t v29 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 32));
          BOOL v30 = nw_endpoint_get_logging_description(v29);
          os_log_type_t v31 = nw_endpoint_handler_state_string(*(void **)(a1 + 32));
          BOOL v32 = nw_endpoint_handler_mode_string(*(void **)(a1 + 32));
          id v33 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 32));
          *(_DWORD *)bytes = 136447746;
          *(void *)&bytes[4] = "nw_endpoint_proxy_resolve_config_block_invoke";
          *(_WORD *)&bytes[12] = 2082;
          *(void *)&bytes[14] = v27;
          *(_WORD *)&bytes[22] = 2082;
          *(void *)&bytes[24] = v28;
          __int16 v131 = 2082;
          BOOL v132 = v30;
          __int16 v133 = 2082;
          os_log_type_t v134 = v31;
          __int16 v135 = 2082;
          id v136 = v32;
          __int16 v137 = 2114;
          id v138 = v33;
          _os_log_impl(&dword_1830D4000, v26, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] PAC URL missing", bytes, 0x48u);
        }
        goto LABEL_26;
      }
LABEL_23:
      int v15 = 0;
      goto LABEL_88;
    }
    int v15 = nw_proxy_config_copy_pac_script(v4);
    if (!v15)
    {
      if ((nw_endpoint_handler_get_logging_disabled(*(void **)(a1 + 32)) & 1) == 0)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        BOOL v34 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
        {
          os_log_type_t v35 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 32));
          BOOL v36 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 32));
          nw_endpoint_t v37 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 32));
          BOOL v38 = nw_endpoint_get_logging_description(v37);
          os_log_type_t v39 = nw_endpoint_handler_state_string(*(void **)(a1 + 32));
          BOOL v40 = nw_endpoint_handler_mode_string(*(void **)(a1 + 32));
          id v41 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 32));
          *(_DWORD *)bytes = 136447746;
          *(void *)&bytes[4] = "nw_endpoint_proxy_resolve_config_block_invoke";
          *(_WORD *)&bytes[12] = 2082;
          *(void *)&bytes[14] = v35;
          *(_WORD *)&bytes[22] = 2082;
          *(void *)&bytes[24] = v36;
          __int16 v131 = 2082;
          BOOL v132 = v38;
          __int16 v133 = 2082;
          os_log_type_t v134 = v39;
          __int16 v135 = 2082;
          id v136 = v40;
          __int16 v137 = 2114;
          id v138 = v41;
          _os_log_impl(&dword_1830D4000, v34, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] PAC script missing", bytes, 0x48u);
        }
      }
      goto LABEL_23;
    }
    BOOL v16 = (const void *)_CFXPCCreateCFObjectFromXPCObject();
    if (v16)
    {
      BOOL v17 = *(void **)(a1 + 32);
      os_log_t v118 = v15;
      if (*(void *)(*(void *)(a1 + 40) + 64))
      {
        id v18 = nw_endpoint_handler_copy_parameters(v17);
        os_log_type_t v19 = *(const void **)(*(void *)(a1 + 40) + 64);
        char v20 = nw_parameters_get_https_proxy_is_opaque(v18);
        int v21 = nw_parameters_get_https_proxy_over_tls(v18);
        int v22 = nw_parameters_get_should_trust_invalid_certificates(v18);
        int v23 = nw_endpoint_handler_is_dry_run(*(void **)(a1 + 32));
        __int16 v24 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 32));
        v120[0] = MEMORY[0x1E4F143A8];
        v120[1] = 3221225472;
        v120[2] = ___ZL32nw_endpoint_proxy_resolve_configP30NWConcrete_nw_endpoint_handler_block_invoke_157;
        v120[3] = &unk_1E523E198;
        id v121 = *(id *)(a1 + 32);
        id v122 = *(id *)(a1 + 40);
        id v123 = v4;
        os_log_type_t v25 = nw_pac_resolver_create_with_script(v16, v19, v119, v20, v21, v22, v23, (uint64_t)v24, v120);

LABEL_53:
        os_log_type_t v74 = v118;
        CFRelease(v16);
        goto LABEL_70;
      }
      int v60 = nw_endpoint_handler_get_minimize_logging(v17);
      char v61 = nw_endpoint_handler_get_logging_disabled(*(void **)(a1 + 32));
      if (v60)
      {
        if (v61) {
          goto LABEL_50;
        }
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        char v104 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v104, OS_LOG_TYPE_DEBUG))
        {
          logc = nw_endpoint_handler_get_id_string(*(void **)(a1 + 32));
          uint64_t v105 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 32));
          nw_endpoint_t v106 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 32));
          int v107 = nw_endpoint_get_logging_description(v106);
          uint64_t v108 = nw_endpoint_handler_state_string(*(void **)(a1 + 32));
          os_log_type_t v109 = nw_endpoint_handler_mode_string(*(void **)(a1 + 32));
          id v110 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 32));
          *(_DWORD *)bytes = 136447746;
          *(void *)&bytes[4] = "nw_endpoint_proxy_resolve_config_block_invoke_3";
          *(_WORD *)&bytes[12] = 2082;
          *(void *)&bytes[14] = logc;
          *(_WORD *)&bytes[22] = 2082;
          *(void *)&bytes[24] = v105;
          __int16 v131 = 2082;
          BOOL v132 = v107;
          __int16 v133 = 2082;
          os_log_type_t v134 = v108;
          __int16 v135 = 2082;
          id v136 = v109;
          __int16 v137 = 2114;
          id v138 = v110;
          uint64_t v62 = v104;
          _os_log_impl(&dword_1830D4000, v104, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] No URL, treating proxy as resolved", bytes, 0x48u);
        }
        else
        {
          uint64_t v62 = v104;
        }
      }
      else
      {
        if (v61)
        {
LABEL_50:
          uint64_t v70 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
          if (!v70)
          {
            uint64_t v71 = nw_array_copy(*(void *)(*(void *)(a1 + 40) + 56));
            uint64_t v72 = *(void *)(*(void *)(a1 + 48) + 8);
            os_log_type_t v73 = *(void **)(v72 + 40);
            *(void *)(v72 + 40) = v71;

            uint64_t v70 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
          }
          nw_array_remove_object(v70, (uint64_t)v4);
          os_log_type_t v25 = 0;
          *(unsigned char *)(*(void *)(a1 + 40) + 96) |= 0x80u;
          goto LABEL_53;
        }
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        uint64_t v62 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v62, OS_LOG_TYPE_INFO))
        {
          loga = v62;
          int v63 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 32));
          id v64 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 32));
          nw_endpoint_t v65 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 32));
          uint64_t v66 = nw_endpoint_get_logging_description(v65);
          os_log_type_t v67 = nw_endpoint_handler_state_string(*(void **)(a1 + 32));
          os_log_type_t v68 = nw_endpoint_handler_mode_string(*(void **)(a1 + 32));
          id v69 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 32));
          *(_DWORD *)bytes = 136447746;
          *(void *)&bytes[4] = "nw_endpoint_proxy_resolve_config_block_invoke";
          *(_WORD *)&bytes[12] = 2082;
          *(void *)&bytes[14] = v63;
          *(_WORD *)&bytes[22] = 2082;
          *(void *)&bytes[24] = v64;
          __int16 v131 = 2082;
          BOOL v132 = v66;
          __int16 v133 = 2082;
          os_log_type_t v134 = v67;
          __int16 v135 = 2082;
          id v136 = v68;
          __int16 v137 = 2114;
          id v138 = v69;
          uint64_t v62 = loga;
          _os_log_impl(&dword_1830D4000, loga, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] No URL, treating proxy as resolved", bytes, 0x48u);
        }
      }

      goto LABEL_50;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v42 = (id)gLogObj;
    *(_DWORD *)bytes = 136446210;
    *(void *)&bytes[4] = "nw_endpoint_proxy_resolve_config_block_invoke";
    os_log_type_t v43 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v124 = 0;
    if (__nwlog_fault(v43, &type, &v124))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v44 = (id)gLogObj;
        os_log_type_t v45 = type;
        if (os_log_type_enabled(v44, type))
        {
          *(_DWORD *)bytes = 136446210;
          *(void *)&bytes[4] = "nw_endpoint_proxy_resolve_config_block_invoke";
          _os_log_impl(&dword_1830D4000, v44, v45, "%{public}s _CFXPCCreateCFObjectFromXPCObject failed", bytes, 0xCu);
        }
      }
      else if (v124)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        BOOL v44 = __nwlog_obj();
        os_log_type_t v78 = type;
        BOOL v79 = os_log_type_enabled(v44, type);
        if (backtrace_string)
        {
          if (v79)
          {
            *(_DWORD *)bytes = 136446466;
            *(void *)&bytes[4] = "nw_endpoint_proxy_resolve_config_block_invoke";
            *(_WORD *)&bytes[12] = 2082;
            *(void *)&bytes[14] = backtrace_string;
            _os_log_impl(&dword_1830D4000, v44, v78, "%{public}s _CFXPCCreateCFObjectFromXPCObject failed, dumping backtrace:%{public}s", bytes, 0x16u);
          }

          free(backtrace_string);
          if (!v43) {
            goto LABEL_88;
          }
          goto LABEL_87;
        }
        if (v79)
        {
          *(_DWORD *)bytes = 136446210;
          *(void *)&bytes[4] = "nw_endpoint_proxy_resolve_config_block_invoke";
          _os_log_impl(&dword_1830D4000, v44, v78, "%{public}s _CFXPCCreateCFObjectFromXPCObject failed, no backtrace", bytes, 0xCu);
        }
      }
      else
      {
        BOOL v44 = __nwlog_obj();
        os_log_type_t v95 = type;
        if (os_log_type_enabled(v44, type))
        {
          *(_DWORD *)bytes = 136446210;
          *(void *)&bytes[4] = "nw_endpoint_proxy_resolve_config_block_invoke";
          _os_log_impl(&dword_1830D4000, v44, v95, "%{public}s _CFXPCCreateCFObjectFromXPCObject failed, backtrace limit exceeded", bytes, 0xCu);
        }
      }
    }
    if (!v43) {
      goto LABEL_88;
    }
LABEL_87:
    free(v43);
    goto LABEL_88;
  }
LABEL_90:

  return 1;
}

void sub_183411980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  _Unwind_Resume(a1);
}

void nw_resolver_set_cancel_handler(void *a1, void *a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  uint64_t v5 = v4;
  if (!v3)
  {
    uint32_t v8 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v25 = "nw_resolver_set_cancel_handler";
    CFTypeRef v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (!__nwlog_fault(v9, &type, &v22)) {
      goto LABEL_38;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v25 = "nw_resolver_set_cancel_handler";
        _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null resolver", buf, 0xCu);
      }
    }
    else if (v22)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v10 = __nwlog_obj();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)int buf = 136446466;
          os_log_type_t v25 = "nw_resolver_set_cancel_handler";
          __int16 v26 = 2082;
          os_log_type_t v27 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null resolver, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v9) {
          goto LABEL_4;
        }
LABEL_39:
        free(v9);
        goto LABEL_4;
      }
      if (v16)
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v25 = "nw_resolver_set_cancel_handler";
        _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null resolver, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v10 = __nwlog_obj();
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v25 = "nw_resolver_set_cancel_handler";
        _os_log_impl(&dword_1830D4000, v10, v20, "%{public}s called with null resolver, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_37:

    goto LABEL_38;
  }
  if (v4)
  {
    os_unfair_lock_lock(v3 + 3);
    int v6 = _Block_copy(v5);
    xpc_object_t v7 = *(void **)&v3[26]._os_unfair_lock_opaque;
    *(void *)&v3[26]._uint32_t os_unfair_lock_opaque = v6;

    os_unfair_lock_unlock(v3 + 3);
    goto LABEL_4;
  }
  os_log_type_t v12 = __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  os_log_type_t v25 = "nw_resolver_set_cancel_handler";
  CFTypeRef v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v22 = 0;
  if (!__nwlog_fault(v9, &type, &v22)) {
    goto LABEL_38;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    uint64_t v10 = __nwlog_obj();
    os_log_type_t v13 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)int buf = 136446210;
      os_log_type_t v25 = "nw_resolver_set_cancel_handler";
      _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null cancel_handler", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (!v22)
  {
    uint64_t v10 = __nwlog_obj();
    os_log_type_t v21 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)int buf = 136446210;
      os_log_type_t v25 = "nw_resolver_set_cancel_handler";
      _os_log_impl(&dword_1830D4000, v10, v21, "%{public}s called with null cancel_handler, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_37;
  }
  BOOL v17 = (char *)__nw_create_backtrace_string();
  uint64_t v10 = __nwlog_obj();
  os_log_type_t v18 = type;
  BOOL v19 = os_log_type_enabled(v10, type);
  if (!v17)
  {
    if (v19)
    {
      *(_DWORD *)int buf = 136446210;
      os_log_type_t v25 = "nw_resolver_set_cancel_handler";
      _os_log_impl(&dword_1830D4000, v10, v18, "%{public}s called with null cancel_handler, no backtrace", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (v19)
  {
    *(_DWORD *)int buf = 136446466;
    os_log_type_t v25 = "nw_resolver_set_cancel_handler";
    __int16 v26 = 2082;
    os_log_type_t v27 = v17;
    _os_log_impl(&dword_1830D4000, v10, v18, "%{public}s called with null cancel_handler, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v17);
  if (v9) {
    goto LABEL_39;
  }
LABEL_4:
}

id nw_listener_copy_parameters_with_port(void *a1, const char *a2, int a3)
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a1;
  BOOL v6 = -[NWConcrete_nw_parameters initWithParameters:stripConnected:shallowCopy:]((id *)[NWConcrete_nw_parameters alloc], v5, 0, 0);

  nw_endpoint_t v7 = nw_parameters_copy_local_endpoint(v5);
  nw_endpoint_t v8 = v7;
  if (!v7)
  {
    host = nw_endpoint_create_host("::", a2);
    if (host)
    {
LABEL_14:
      nw_parameters_set_local_endpoint((nw_parameters_t)v6, host);

      goto LABEL_49;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v23 = (id)gLogObj;
    *(_DWORD *)int buf = 136446210;
    uint64_t v62 = "nw_listener_copy_parameters_with_port";
    os_log_type_t v15 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v59 = 0;
    if (!__nwlog_fault(v15, &type, &v59)) {
      goto LABEL_105;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      __int16 v24 = (id)gLogObj;
      os_log_type_t v25 = type;
      if (os_log_type_enabled(v24, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v62 = "nw_listener_copy_parameters_with_port";
        _os_log_impl(&dword_1830D4000, v24, v25, "%{public}s nw_endpoint_create_host failed", buf, 0xCu);
      }
    }
    else if (v59)
    {
      backtrace_string = __nw_create_backtrace_string();
      if (backtrace_string)
      {
        BOOL v34 = (char *)backtrace_string;
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v35 = (id)gLogObj;
        os_log_type_t v36 = type;
        if (os_log_type_enabled(v35, type))
        {
          *(_DWORD *)int buf = 136446466;
          uint64_t v62 = "nw_listener_copy_parameters_with_port";
          __int16 v63 = 2082;
          id v64 = v34;
          _os_log_impl(&dword_1830D4000, v35, v36, "%{public}s nw_endpoint_create_host failed, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v34);
        if (!v15) {
          goto LABEL_108;
        }
        goto LABEL_106;
      }
      __int16 v24 = __nwlog_obj();
      os_log_type_t v50 = type;
      if (os_log_type_enabled(v24, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v62 = "nw_listener_copy_parameters_with_port";
        _os_log_impl(&dword_1830D4000, v24, v50, "%{public}s nw_endpoint_create_host failed, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      __int16 v24 = (id)gLogObj;
      os_log_type_t v42 = type;
      if (os_log_type_enabled(v24, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v62 = "nw_listener_copy_parameters_with_port";
        _os_log_impl(&dword_1830D4000, v24, v42, "%{public}s nw_endpoint_create_host failed, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_104:

    goto LABEL_105;
  }
  CFTypeRef v9 = v7;
  int v10 = [v9 type];

  if (v10 != 1)
  {
    if (!a3) {
      goto LABEL_49;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v19 = (id)gLogObj;
    *(_DWORD *)int buf = 136446466;
    uint64_t v62 = "nw_listener_copy_parameters_with_port";
    __int16 v63 = 2114;
    id v64 = (char *)v9;
    os_log_type_t v20 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v59 = 0;
    if (!__nwlog_fault(v20, &type, &v59)) {
      goto LABEL_94;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v21 = (id)gLogObj;
      os_log_type_t v22 = type;
      if (os_log_type_enabled(v21, type))
      {
        *(_DWORD *)int buf = 136446466;
        uint64_t v62 = "nw_listener_copy_parameters_with_port";
        __int16 v63 = 2114;
        id v64 = (char *)v9;
        _os_log_impl(&dword_1830D4000, v21, v22, "%{public}s Local endpoint is not an address: %{public}@", buf, 0x16u);
      }
    }
    else if (v59)
    {
      nw_endpoint_t v29 = __nw_create_backtrace_string();
      if (v29)
      {
        BOOL v30 = (char *)v29;
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v31 = (id)gLogObj;
        os_log_type_t v32 = type;
        if (os_log_type_enabled(v31, type))
        {
          *(_DWORD *)int buf = 136446722;
          uint64_t v62 = "nw_listener_copy_parameters_with_port";
          __int16 v63 = 2114;
          id v64 = (char *)v9;
          __int16 v65 = 2082;
          uint64_t v66 = v30;
          _os_log_impl(&dword_1830D4000, v31, v32, "%{public}s Local endpoint is not an address: %{public}@, dumping backtrace:%{public}s", buf, 0x20u);
        }

        free(v30);
        if (!v20) {
          goto LABEL_108;
        }
        goto LABEL_95;
      }
      os_log_type_t v21 = __nwlog_obj();
      os_log_type_t v49 = type;
      if (os_log_type_enabled(v21, type))
      {
        *(_DWORD *)int buf = 136446466;
        uint64_t v62 = "nw_listener_copy_parameters_with_port";
        __int16 v63 = 2114;
        id v64 = (char *)v9;
        _os_log_impl(&dword_1830D4000, v21, v49, "%{public}s Local endpoint is not an address: %{public}@, no backtrace", buf, 0x16u);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v21 = (id)gLogObj;
      os_log_type_t v41 = type;
      if (os_log_type_enabled(v21, type))
      {
        *(_DWORD *)int buf = 136446466;
        uint64_t v62 = "nw_listener_copy_parameters_with_port";
        __int16 v63 = 2114;
        id v64 = (char *)v9;
        _os_log_impl(&dword_1830D4000, v21, v41, "%{public}s Local endpoint is not an address: %{public}@, backtrace limit exceeded", buf, 0x16u);
      }
    }
    goto LABEL_93;
  }
  int address_family = nw_endpoint_get_address_family(v9);
  if (address_family != 30 && address_family != 2)
  {
    if (!a3) {
      goto LABEL_49;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v26 = (id)gLogObj;
    *(_DWORD *)int buf = 136446466;
    uint64_t v62 = "nw_listener_copy_parameters_with_port";
    __int16 v63 = 2114;
    id v64 = (char *)v9;
    os_log_type_t v20 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v59 = 0;
    if (!__nwlog_fault(v20, &type, &v59)) {
      goto LABEL_94;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v21 = (id)gLogObj;
      os_log_type_t v27 = type;
      if (os_log_type_enabled(v21, type))
      {
        *(_DWORD *)int buf = 136446466;
        uint64_t v62 = "nw_listener_copy_parameters_with_port";
        __int16 v63 = 2114;
        id v64 = (char *)v9;
        _os_log_impl(&dword_1830D4000, v21, v27, "%{public}s Local endpoint has unsupported family: %{public}@", buf, 0x16u);
      }
    }
    else if (v59)
    {
      os_log_type_t v43 = (char *)__nw_create_backtrace_string();
      os_log_type_t v21 = __nwlog_obj();
      os_log_type_t v44 = type;
      BOOL v45 = os_log_type_enabled(v21, type);
      if (v43)
      {
        if (v45)
        {
          *(_DWORD *)int buf = 136446722;
          uint64_t v62 = "nw_listener_copy_parameters_with_port";
          __int16 v63 = 2114;
          id v64 = (char *)v9;
          __int16 v65 = 2082;
          uint64_t v66 = v43;
          _os_log_impl(&dword_1830D4000, v21, v44, "%{public}s Local endpoint has unsupported family: %{public}@, dumping backtrace:%{public}s", buf, 0x20u);
        }

        free(v43);
        if (!v20) {
          goto LABEL_108;
        }
        goto LABEL_95;
      }
      if (v45)
      {
        *(_DWORD *)int buf = 136446466;
        uint64_t v62 = "nw_listener_copy_parameters_with_port";
        __int16 v63 = 2114;
        id v64 = (char *)v9;
        _os_log_impl(&dword_1830D4000, v21, v44, "%{public}s Local endpoint has unsupported family: %{public}@, no backtrace", buf, 0x16u);
      }
    }
    else
    {
      os_log_type_t v21 = __nwlog_obj();
      os_log_type_t v54 = type;
      if (os_log_type_enabled(v21, type))
      {
        *(_DWORD *)int buf = 136446466;
        uint64_t v62 = "nw_listener_copy_parameters_with_port";
        __int16 v63 = 2114;
        id v64 = (char *)v9;
        _os_log_impl(&dword_1830D4000, v21, v54, "%{public}s Local endpoint has unsupported family: %{public}@, backtrace limit exceeded", buf, 0x16u);
      }
    }
LABEL_93:

LABEL_94:
    if (!v20) {
      goto LABEL_108;
    }
LABEL_95:
    uint64_t v56 = (char *)v20;
LABEL_107:
    free(v56);
    goto LABEL_108;
  }
  os_log_type_t v12 = v9;
  int v13 = [v12 port];

  if (!v13)
  {
    address = (sockaddr *)nw_endpoint_get_address(v12);
    host = nw_endpoint_create_address_with_port(&address->sa_len, a2);
    if (host) {
      goto LABEL_14;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v39 = (id)gLogObj;
    *(_DWORD *)int buf = 136446210;
    uint64_t v62 = "nw_listener_copy_parameters_with_port";
    os_log_type_t v15 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v59 = 0;
    if (!__nwlog_fault(v15, &type, &v59)) {
      goto LABEL_105;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int16 v24 = __nwlog_obj();
      os_log_type_t v40 = type;
      if (os_log_type_enabled(v24, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v62 = "nw_listener_copy_parameters_with_port";
        _os_log_impl(&dword_1830D4000, v24, v40, "%{public}s nw_endpoint_create_address_with_port failed", buf, 0xCu);
      }
    }
    else if (v59)
    {
      nw_endpoint_t v51 = (char *)__nw_create_backtrace_string();
      __int16 v24 = __nwlog_obj();
      os_log_type_t v52 = type;
      BOOL v53 = os_log_type_enabled(v24, type);
      if (v51)
      {
        if (v53)
        {
          *(_DWORD *)int buf = 136446466;
          uint64_t v62 = "nw_listener_copy_parameters_with_port";
          __int16 v63 = 2082;
          id v64 = v51;
          _os_log_impl(&dword_1830D4000, v24, v52, "%{public}s nw_endpoint_create_address_with_port failed, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v51);
        if (!v15) {
          goto LABEL_108;
        }
        goto LABEL_106;
      }
      if (v53)
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v62 = "nw_listener_copy_parameters_with_port";
        _os_log_impl(&dword_1830D4000, v24, v52, "%{public}s nw_endpoint_create_address_with_port failed, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __int16 v24 = __nwlog_obj();
      os_log_type_t v57 = type;
      if (os_log_type_enabled(v24, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v62 = "nw_listener_copy_parameters_with_port";
        _os_log_impl(&dword_1830D4000, v24, v57, "%{public}s nw_endpoint_create_address_with_port failed, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_104;
  }
  if (!strncmp(a2, "0", 2uLL))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    nw_endpoint_t v37 = (id)gLogObj;
    if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)int buf = 136446210;
      uint64_t v62 = "nw_listener_copy_parameters_with_port";
      _os_log_impl(&dword_1830D4000, v37, OS_LOG_TYPE_DEBUG, "%{public}s Create with port used port 0, using port from local endpoint", buf, 0xCu);
    }
  }
  else if (a3)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v14 = (id)gLogObj;
    *(_DWORD *)int buf = 136446722;
    uint64_t v62 = "nw_listener_copy_parameters_with_port";
    __int16 v63 = 2082;
    id v64 = (char *)a2;
    __int16 v65 = 2114;
    uint64_t v66 = (char *)v12;
    os_log_type_t v15 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v59 = 0;
    if (__nwlog_fault(v15, &type, &v59))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v16 = (id)gLogObj;
        os_log_type_t v17 = type;
        if (os_log_type_enabled(v16, type))
        {
          *(_DWORD *)int buf = 136446722;
          uint64_t v62 = "nw_listener_copy_parameters_with_port";
          __int16 v63 = 2082;
          id v64 = (char *)a2;
          __int16 v65 = 2114;
          uint64_t v66 = (char *)v12;
          _os_log_impl(&dword_1830D4000, v16, v17, "%{public}s Local endpoint has port set, cannot override to %{public}s: %{public}@", buf, 0x20u);
        }
      }
      else if (v59)
      {
        BOOL v46 = (char *)__nw_create_backtrace_string();
        BOOL v16 = __nwlog_obj();
        os_log_type_t v47 = type;
        BOOL v48 = os_log_type_enabled(v16, type);
        if (v46)
        {
          if (v48)
          {
            *(_DWORD *)int buf = 136446978;
            uint64_t v62 = "nw_listener_copy_parameters_with_port";
            __int16 v63 = 2082;
            id v64 = (char *)a2;
            __int16 v65 = 2114;
            uint64_t v66 = (char *)v12;
            __int16 v67 = 2082;
            os_log_type_t v68 = v46;
            _os_log_impl(&dword_1830D4000, v16, v47, "%{public}s Local endpoint has port set, cannot override to %{public}s: %{public}@, dumping backtrace:%{public}s", buf, 0x2Au);
          }

          free(v46);
          if (!v15) {
            goto LABEL_108;
          }
          goto LABEL_106;
        }
        if (v48)
        {
          *(_DWORD *)int buf = 136446722;
          uint64_t v62 = "nw_listener_copy_parameters_with_port";
          __int16 v63 = 2082;
          id v64 = (char *)a2;
          __int16 v65 = 2114;
          uint64_t v66 = (char *)v12;
          _os_log_impl(&dword_1830D4000, v16, v47, "%{public}s Local endpoint has port set, cannot override to %{public}s: %{public}@, no backtrace", buf, 0x20u);
        }
      }
      else
      {
        BOOL v16 = __nwlog_obj();
        os_log_type_t v55 = type;
        if (os_log_type_enabled(v16, type))
        {
          *(_DWORD *)int buf = 136446722;
          uint64_t v62 = "nw_listener_copy_parameters_with_port";
          __int16 v63 = 2082;
          id v64 = (char *)a2;
          __int16 v65 = 2114;
          uint64_t v66 = (char *)v12;
          _os_log_impl(&dword_1830D4000, v16, v55, "%{public}s Local endpoint has port set, cannot override to %{public}s: %{public}@, backtrace limit exceeded", buf, 0x20u);
        }
      }
    }
LABEL_105:
    if (v15)
    {
LABEL_106:
      uint64_t v56 = (char *)v15;
      goto LABEL_107;
    }
LABEL_108:
    id v38 = 0;
    goto LABEL_109;
  }
LABEL_49:
  id v38 = (id)v6;
LABEL_109:

  return v38;
}

void sub_183412EA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

nw_endpoint_t nw_endpoint_create_host(const char *hostname, const char *port)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (!hostname)
  {
    id v4 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v17 = "nw_endpoint_create_host";
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (!__nwlog_fault(v5, &type, &v14)) {
      goto LABEL_33;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v17 = "nw_endpoint_create_host";
        nw_endpoint_t v8 = "%{public}s called with null hostname";
LABEL_31:
        _os_log_impl(&dword_1830D4000, v6, v7, v8, buf, 0xCu);
      }
LABEL_32:

LABEL_33:
      if (v5) {
        free(v5);
      }
      return 0;
    }
    if (!v14)
    {
      BOOL v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v17 = "nw_endpoint_create_host";
        nw_endpoint_t v8 = "%{public}s called with null hostname, backtrace limit exceeded";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v6 = __nwlog_obj();
    os_log_type_t v7 = type;
    BOOL v11 = os_log_type_enabled(v6, type);
    if (!backtrace_string)
    {
      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v17 = "nw_endpoint_create_host";
        nw_endpoint_t v8 = "%{public}s called with null hostname, no backtrace";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (v11)
    {
      *(_DWORD *)int buf = 136446466;
      os_log_type_t v17 = "nw_endpoint_create_host";
      __int16 v18 = 2082;
      id v19 = backtrace_string;
      os_log_type_t v12 = "%{public}s called with null hostname, dumping backtrace:%{public}s";
LABEL_21:
      _os_log_impl(&dword_1830D4000, v6, v7, v12, buf, 0x16u);
    }
LABEL_22:

    free(backtrace_string);
    goto LABEL_33;
  }
  if (!port)
  {
    CFTypeRef v9 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v17 = "nw_endpoint_create_host";
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (!__nwlog_fault(v5, &type, &v14)) {
      goto LABEL_33;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v17 = "nw_endpoint_create_host";
        nw_endpoint_t v8 = "%{public}s called with null port_string";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (!v14)
    {
      BOOL v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v17 = "nw_endpoint_create_host";
        nw_endpoint_t v8 = "%{public}s called with null port_string, backtrace limit exceeded";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v6 = __nwlog_obj();
    os_log_type_t v7 = type;
    BOOL v13 = os_log_type_enabled(v6, type);
    if (!backtrace_string)
    {
      if (v13)
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v17 = "nw_endpoint_create_host";
        nw_endpoint_t v8 = "%{public}s called with null port_string, no backtrace";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (v13)
    {
      *(_DWORD *)int buf = 136446466;
      os_log_type_t v17 = "nw_endpoint_create_host";
      __int16 v18 = 2082;
      id v19 = backtrace_string;
      os_log_type_t v12 = "%{public}s called with null port_string, dumping backtrace:%{public}s";
      goto LABEL_21;
    }
    goto LABEL_22;
  }
  *(_WORD *)int buf = 0;
  if (nw_utilities_port_for_string(port, buf)) {
    return (nw_endpoint_t)nw_endpoint_create_host_with_numeric_port(hostname, bswap32(*(unsigned __int16 *)buf) >> 16);
  }
  return 0;
}

BOOL nw_connection_used_tls(void *a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    *(void *)int buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000;
    char v19 = 0;
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 3221225472;
    v13[2] = __nw_connection_used_tls_block_invoke;
    v13[3] = &unk_1E524B978;
    char v14 = v1;
    os_log_type_t v15 = buf;
    os_unfair_lock_lock(v2 + 34);
    __nw_connection_used_tls_block_invoke((uint64_t)v13);
    os_unfair_lock_unlock(v2 + 34);
    BOOL v3 = *(unsigned char *)(*(void *)&buf[8] + 24) != 0;

    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_connection_used_tls";
  BOOL v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (__nwlog_fault(v6, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_used_tls";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_connection_used_tls";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_used_tls";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_used_tls";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  BOOL v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_protocol_remove_input_handler(uint64_t a1, uint64_t a2)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    id v4 = *(void **)(a1 + 40);
    if (v4 == &nw_protocol_ref_counted_handle)
    {
      uint64_t v5 = *(void *)(a1 + 88);
      if (v5) {
        *(void *)(a1 + 88) = v5 + 1;
      }
    }
    if (a2)
    {
      BOOL v6 = *(void **)(a2 + 40);
      if (v6 == &nw_protocol_ref_counted_handle)
      {
        uint64_t v7 = *(void *)(a2 + 88);
        if (v7) {
          *(void *)(a2 + 88) = v7 + 1;
        }
      }
      uint64_t v8 = *(void *)(a1 + 24);
      if (v8)
      {
        CFTypeRef v9 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 8);
        if (v9)
        {
          uint64_t v10 = v9(a1, a2);
          if (v6 != &nw_protocol_ref_counted_handle)
          {
LABEL_13:
            if (v4 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
            {
              uint64_t v12 = *(void *)(a1 + 88);
              if (v12)
              {
                uint64_t v13 = v12 - 1;
                *(void *)(a1 + 88) = v13;
                if (!v13)
                {
                  char v14 = *(void (***)(void))(a1 + 64);
                  if (v14)
                  {
                    *(void *)(a1 + 64) = 0;
                    v14[2](v14);
                    _Block_release(v14);
                  }
                  if (*(unsigned char *)(a1 + 72))
                  {
                    os_log_type_t v15 = *(const void **)(a1 + 64);
                    if (v15) {
                      _Block_release(v15);
                    }
                  }
                  free((void *)a1);
                }
              }
            }
            return v10;
          }
LABEL_12:
          if (*(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
          {
            uint64_t v16 = *(void *)(a2 + 88);
            if (v16)
            {
              uint64_t v17 = v16 - 1;
              *(void *)(a2 + 88) = v17;
              if (!v17)
              {
                __int16 v18 = *(void (***)(void))(a2 + 64);
                if (v18)
                {
                  *(void *)(a2 + 64) = 0;
                  v18[2](v18);
                  _Block_release(v18);
                }
                if (*(unsigned char *)(a2 + 72))
                {
                  char v19 = *(const void **)(a2 + 64);
                  if (v19) {
                    _Block_release(v19);
                  }
                }
                free((void *)a2);
              }
            }
          }
          goto LABEL_13;
        }
      }
      __nwlog_obj();
      uint64_t v20 = *(const char **)(a1 + 16);
      *(_DWORD *)int buf = 136446722;
      BOOL v46 = "__nw_protocol_remove_input_handler";
      if (!v20) {
        uint64_t v20 = "invalid";
      }
      __int16 v47 = 2082;
      BOOL v48 = (void *)v20;
      __int16 v49 = 2048;
      uint64_t v50 = a1;
      os_log_type_t v21 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v43 = 0;
      if (__nwlog_fault(v21, &type, &v43))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          os_log_type_t v22 = __nwlog_obj();
          os_log_type_t v23 = type;
          if (!os_log_type_enabled(v22, type)) {
            goto LABEL_74;
          }
          __int16 v24 = *(const char **)(a1 + 16);
          if (!v24) {
            __int16 v24 = "invalid";
          }
          *(_DWORD *)int buf = 136446722;
          BOOL v46 = "__nw_protocol_remove_input_handler";
          __int16 v47 = 2082;
          BOOL v48 = (void *)v24;
          __int16 v49 = 2048;
          uint64_t v50 = a1;
          os_log_type_t v25 = "%{public}s protocol %{public}s (%p) has invalid remove_input_handler callback";
LABEL_73:
          _os_log_impl(&dword_1830D4000, v22, v23, v25, buf, 0x20u);
          goto LABEL_74;
        }
        if (!v43)
        {
          os_log_type_t v22 = __nwlog_obj();
          os_log_type_t v23 = type;
          if (!os_log_type_enabled(v22, type)) {
            goto LABEL_74;
          }
          os_log_type_t v41 = *(const char **)(a1 + 16);
          if (!v41) {
            os_log_type_t v41 = "invalid";
          }
          *(_DWORD *)int buf = 136446722;
          BOOL v46 = "__nw_protocol_remove_input_handler";
          __int16 v47 = 2082;
          BOOL v48 = (void *)v41;
          __int16 v49 = 2048;
          uint64_t v50 = a1;
          os_log_type_t v25 = "%{public}s protocol %{public}s (%p) has invalid remove_input_handler callback, backtrace limit exceeded";
          goto LABEL_73;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v22 = __nwlog_obj();
        os_log_type_t v23 = type;
        BOOL v35 = os_log_type_enabled(v22, type);
        if (!backtrace_string)
        {
          if (!v35) {
            goto LABEL_74;
          }
          os_log_type_t v42 = *(const char **)(a1 + 16);
          if (!v42) {
            os_log_type_t v42 = "invalid";
          }
          *(_DWORD *)int buf = 136446722;
          BOOL v46 = "__nw_protocol_remove_input_handler";
          __int16 v47 = 2082;
          BOOL v48 = (void *)v42;
          __int16 v49 = 2048;
          uint64_t v50 = a1;
          os_log_type_t v25 = "%{public}s protocol %{public}s (%p) has invalid remove_input_handler callback, no backtrace";
          goto LABEL_73;
        }
        if (v35)
        {
          os_log_type_t v36 = *(const char **)(a1 + 16);
          if (!v36) {
            os_log_type_t v36 = "invalid";
          }
          *(_DWORD *)int buf = 136446978;
          BOOL v46 = "__nw_protocol_remove_input_handler";
          __int16 v47 = 2082;
          BOOL v48 = (void *)v36;
          __int16 v49 = 2048;
          uint64_t v50 = a1;
          __int16 v51 = 2082;
          os_log_type_t v52 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v22, v23, "%{public}s protocol %{public}s (%p) has invalid remove_input_handler callback, dumping backtrace:%{public}s", buf, 0x2Au);
        }
        free(backtrace_string);
      }
LABEL_74:
      if (v21) {
        free(v21);
      }
      uint64_t v10 = 0;
      if (v6 != &nw_protocol_ref_counted_handle) {
        goto LABEL_13;
      }
      goto LABEL_12;
    }
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    BOOL v46 = "__nw_protocol_remove_input_handler";
    BOOL v30 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v43 = 0;
    if (__nwlog_fault(v30, &type, &v43))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v31 = __nwlog_obj();
        os_log_type_t v32 = type;
        if (os_log_type_enabled(v31, type))
        {
          *(_DWORD *)int buf = 136446210;
          BOOL v46 = "__nw_protocol_remove_input_handler";
          id v33 = "%{public}s called with null input_protocol";
LABEL_90:
          _os_log_impl(&dword_1830D4000, v31, v32, v33, buf, 0xCu);
        }
      }
      else if (v43)
      {
        id v39 = (char *)__nw_create_backtrace_string();
        os_log_type_t v31 = __nwlog_obj();
        os_log_type_t v32 = type;
        BOOL v40 = os_log_type_enabled(v31, type);
        if (v39)
        {
          if (v40)
          {
            *(_DWORD *)int buf = 136446466;
            BOOL v46 = "__nw_protocol_remove_input_handler";
            __int16 v47 = 2082;
            BOOL v48 = v39;
            _os_log_impl(&dword_1830D4000, v31, v32, "%{public}s called with null input_protocol, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v39);
          goto LABEL_91;
        }
        if (v40)
        {
          *(_DWORD *)int buf = 136446210;
          BOOL v46 = "__nw_protocol_remove_input_handler";
          id v33 = "%{public}s called with null input_protocol, no backtrace";
          goto LABEL_90;
        }
      }
      else
      {
        os_log_type_t v31 = __nwlog_obj();
        os_log_type_t v32 = type;
        if (os_log_type_enabled(v31, type))
        {
          *(_DWORD *)int buf = 136446210;
          BOOL v46 = "__nw_protocol_remove_input_handler";
          id v33 = "%{public}s called with null input_protocol, backtrace limit exceeded";
          goto LABEL_90;
        }
      }
    }
LABEL_91:
    if (v30) {
      free(v30);
    }
    uint64_t v10 = 0;
    goto LABEL_13;
  }
  __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  BOOL v46 = "__nw_protocol_remove_input_handler";
  id v26 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v43 = 0;
  if (__nwlog_fault(v26, &type, &v43))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v27 = __nwlog_obj();
      os_log_type_t v28 = type;
      if (os_log_type_enabled(v27, type))
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v46 = "__nw_protocol_remove_input_handler";
        nw_endpoint_t v29 = "%{public}s called with null protocol";
LABEL_84:
        _os_log_impl(&dword_1830D4000, v27, v28, v29, buf, 0xCu);
      }
    }
    else if (v43)
    {
      nw_endpoint_t v37 = (char *)__nw_create_backtrace_string();
      os_log_type_t v27 = __nwlog_obj();
      os_log_type_t v28 = type;
      BOOL v38 = os_log_type_enabled(v27, type);
      if (v37)
      {
        if (v38)
        {
          *(_DWORD *)int buf = 136446466;
          BOOL v46 = "__nw_protocol_remove_input_handler";
          __int16 v47 = 2082;
          BOOL v48 = v37;
          _os_log_impl(&dword_1830D4000, v27, v28, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v37);
        goto LABEL_85;
      }
      if (v38)
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v46 = "__nw_protocol_remove_input_handler";
        nw_endpoint_t v29 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_84;
      }
    }
    else
    {
      os_log_type_t v27 = __nwlog_obj();
      os_log_type_t v28 = type;
      if (os_log_type_enabled(v27, type))
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v46 = "__nw_protocol_remove_input_handler";
        nw_endpoint_t v29 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_84;
      }
    }
  }
LABEL_85:
  if (v26) {
    free(v26);
  }
  return 0;
}

uint64_t nw_protocol_ipv4_remove_input_handler(nw_protocol *a1, nw_protocol *a2, uint64_t a3)
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    char v59 = "nw_protocol_ipv4_remove_input_handler";
    os_log_type_t v44 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v56 = 0;
    if (!__nwlog_fault(v44, &type, &v56)) {
      goto LABEL_117;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v56)
      {
        os_log_type_t v41 = __nwlog_obj();
        os_log_type_t v42 = type;
        if (!os_log_type_enabled(v41, type)) {
          goto LABEL_117;
        }
        *(_DWORD *)int buf = 136446210;
        char v59 = "nw_protocol_ipv4_remove_input_handler";
        char v43 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_116;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v41 = __nwlog_obj();
      os_log_type_t v42 = type;
      BOOL v51 = os_log_type_enabled(v41, type);
      if (!backtrace_string)
      {
        if (!v51) {
          goto LABEL_117;
        }
        *(_DWORD *)int buf = 136446210;
        char v59 = "nw_protocol_ipv4_remove_input_handler";
        char v43 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_116;
      }
      if (v51)
      {
        *(_DWORD *)int buf = 136446466;
        char v59 = "nw_protocol_ipv4_remove_input_handler";
        __int16 v60 = 2082;
        char v61 = backtrace_string;
        os_log_type_t v52 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_99:
        _os_log_impl(&dword_1830D4000, v41, v42, v52, buf, 0x16u);
      }
LABEL_100:
      free(backtrace_string);
      goto LABEL_117;
    }
    os_log_type_t v41 = __nwlog_obj();
    os_log_type_t v42 = type;
    if (!os_log_type_enabled(v41, type)) {
      goto LABEL_117;
    }
    *(_DWORD *)int buf = 136446210;
    char v59 = "nw_protocol_ipv4_remove_input_handler";
    char v43 = "%{public}s called with null protocol";
LABEL_116:
    _os_log_impl(&dword_1830D4000, v41, v42, v43, buf, 0xCu);
LABEL_117:
    if (v44) {
      free(v44);
    }
    return 0;
  }
  uint64_t handle = a1->handle;
  if (handle == &nw_protocol_ref_counted_handle) {
    p_output_handler = &a1[1].output_handler;
  }
  else {
    p_output_handler = 0;
  }
  if (handle != &nw_protocol_ref_counted_handle)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    char v59 = "nw_protocol_ipv4_remove_input_handler";
    os_log_type_t v44 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v56 = 0;
    if (!__nwlog_fault(v44, &type, &v56)) {
      goto LABEL_117;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v41 = __nwlog_obj();
      os_log_type_t v42 = type;
      if (!os_log_type_enabled(v41, type)) {
        goto LABEL_117;
      }
      *(_DWORD *)int buf = 136446210;
      char v59 = "nw_protocol_ipv4_remove_input_handler";
      char v43 = "%{public}s called with null ipv4";
      goto LABEL_116;
    }
    if (!v56)
    {
      os_log_type_t v41 = __nwlog_obj();
      os_log_type_t v42 = type;
      if (!os_log_type_enabled(v41, type)) {
        goto LABEL_117;
      }
      *(_DWORD *)int buf = 136446210;
      char v59 = "nw_protocol_ipv4_remove_input_handler";
      char v43 = "%{public}s called with null ipv4, backtrace limit exceeded";
      goto LABEL_116;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v41 = __nwlog_obj();
    os_log_type_t v42 = type;
    BOOL v53 = os_log_type_enabled(v41, type);
    if (backtrace_string)
    {
      if (v53)
      {
        *(_DWORD *)int buf = 136446466;
        char v59 = "nw_protocol_ipv4_remove_input_handler";
        __int16 v60 = 2082;
        char v61 = backtrace_string;
        os_log_type_t v52 = "%{public}s called with null ipv4, dumping backtrace:%{public}s";
        goto LABEL_99;
      }
      goto LABEL_100;
    }
    if (!v53) {
      goto LABEL_117;
    }
    *(_DWORD *)int buf = 136446210;
    char v59 = "nw_protocol_ipv4_remove_input_handler";
    char v43 = "%{public}s called with null ipv4, no backtrace";
    goto LABEL_116;
  }
  if (a2)
  {
    if (a2->output_handler == a1)
    {
      callbacks = a1[1].callbacks;
      if (callbacks)
      {
        CFTypeRef v9 = (nw_protocol_callbacks *)((char *)callbacks - 1);
        a1[1].callbacks = v9;
        if (!v9)
        {
          uint64_t v10 = *(void (***)(void))a1[1].flow_id;
          if (v10)
          {
            *(void *)a1[1].flow_id = 0;
            v10[2](v10);
            _Block_release(v10);
          }
          if (a1[1].flow_id[8])
          {
            BOOL v11 = *(const void **)a1[1].flow_id;
            if (v11) {
              _Block_release(v11);
            }
          }
          free(a1);
        }
      }
      a2->output_handler = 0;
    }
    goto LABEL_18;
  }
  __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  char v59 = "__nw_protocol_get_output_handler";
  BOOL v46 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v56 = 0;
  if (__nwlog_fault(v46, &type, &v56))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int16 v47 = __nwlog_obj();
      os_log_type_t v48 = type;
      if (!os_log_type_enabled(v47, type)) {
        goto LABEL_122;
      }
      *(_DWORD *)int buf = 136446210;
      char v59 = "__nw_protocol_get_output_handler";
      __int16 v49 = "%{public}s called with null protocol";
      goto LABEL_121;
    }
    if (!v56)
    {
      __int16 v47 = __nwlog_obj();
      os_log_type_t v48 = type;
      if (!os_log_type_enabled(v47, type)) {
        goto LABEL_122;
      }
      *(_DWORD *)int buf = 136446210;
      char v59 = "__nw_protocol_get_output_handler";
      __int16 v49 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_121;
    }
    os_log_type_t v54 = (char *)__nw_create_backtrace_string();
    __int16 v47 = __nwlog_obj();
    os_log_type_t v48 = type;
    BOOL v55 = os_log_type_enabled(v47, type);
    if (v54)
    {
      if (v55)
      {
        *(_DWORD *)int buf = 136446466;
        char v59 = "__nw_protocol_get_output_handler";
        __int16 v60 = 2082;
        char v61 = v54;
        _os_log_impl(&dword_1830D4000, v47, v48, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v54);
      goto LABEL_122;
    }
    if (v55)
    {
      *(_DWORD *)int buf = 136446210;
      char v59 = "__nw_protocol_get_output_handler";
      __int16 v49 = "%{public}s called with null protocol, no backtrace";
LABEL_121:
      _os_log_impl(&dword_1830D4000, v47, v48, v49, buf, 0xCu);
    }
  }
LABEL_122:
  if (v46) {
    free(v46);
  }
LABEL_18:
  if (a1->default_input_handler != a2) {
    return 0;
  }
  output_handler = a1->output_handler;
  if (output_handler)
  {
    char v14 = output_handler->callbacks;
    if (v14)
    {
      remove_input_handler = (void (*)(nw_protocol *, nw_protocol *, uint64_t))v14->remove_input_handler;
      if (remove_input_handler)
      {
        uint64_t v16 = output_handler->handle;
        if (v16 == &nw_protocol_ref_counted_handle)
        {
          uint64_t v17 = output_handler[1].callbacks;
          if (v17) {
            output_handler[1].callbacks = (nw_protocol_callbacks *)((char *)&v17->add_input_handler + 1);
          }
        }
        if (a1->handle == &nw_protocol_ref_counted_handle)
        {
          __int16 v18 = a1[1].callbacks;
          if (v18) {
            a1[1].callbacks = (nw_protocol_callbacks *)((char *)&v18->add_input_handler + 1);
          }
          remove_input_handler(output_handler, a1, a3);
          if (a1->handle == &nw_protocol_ref_counted_handle)
          {
            id v33 = a1[1].callbacks;
            if (v33)
            {
              BOOL v34 = (nw_protocol_callbacks *)((char *)v33 - 1);
              a1[1].callbacks = v34;
              if (!v34)
              {
                BOOL v35 = *(void (***)(void))a1[1].flow_id;
                if (v35)
                {
                  *(void *)a1[1].flow_id = 0;
                  v35[2](v35);
                  _Block_release(v35);
                }
                if (a1[1].flow_id[8])
                {
                  os_log_type_t v36 = *(const void **)a1[1].flow_id;
                  if (v36) {
                    _Block_release(v36);
                  }
                }
                free(a1);
              }
            }
          }
        }
        else
        {
          remove_input_handler(output_handler, a1, a3);
        }
        if (v16 == &nw_protocol_ref_counted_handle && output_handler->handle == &nw_protocol_ref_counted_handle)
        {
          nw_endpoint_t v37 = output_handler[1].callbacks;
          if (v37)
          {
            BOOL v38 = (nw_protocol_callbacks *)((char *)v37 - 1);
            output_handler[1].callbacks = v38;
            if (!v38)
            {
              id v39 = *(void (***)(void))output_handler[1].flow_id;
              if (v39)
              {
                *(void *)output_handler[1].flow_id = 0;
                v39[2](v39);
                _Block_release(v39);
              }
              if (output_handler[1].flow_id[8])
              {
                BOOL v40 = *(const void **)output_handler[1].flow_id;
                if (v40) {
                  _Block_release(v40);
                }
              }
              free(output_handler);
            }
          }
        }
      }
    }
  }
  nw_protocol_ip_register_segmentation_offload_notification(a1, 0);
  default_input_handler = a1->default_input_handler;
  if (default_input_handler)
  {
    if (default_input_handler->handle == &nw_protocol_ref_counted_handle)
    {
      nw_endpoint_t v29 = default_input_handler[1].callbacks;
      if (v29)
      {
        BOOL v30 = (nw_protocol_callbacks *)((char *)v29 - 1);
        default_input_handler[1].callbacks = v30;
        if (!v30)
        {
          os_log_type_t v31 = *(void (***)(void))default_input_handler[1].flow_id;
          if (v31)
          {
            *(void *)default_input_handler[1].flow_id = 0;
            v31[2](v31);
            _Block_release(v31);
          }
          if (default_input_handler[1].flow_id[8])
          {
            os_log_type_t v32 = *(const void **)default_input_handler[1].flow_id;
            if (v32) {
              _Block_release(v32);
            }
          }
          free(default_input_handler);
        }
      }
    }
    a1->default_input_handler = 0;
  }
  if (a3)
  {
    while (1)
    {
      uint64_t v20 = a1[2].output_handler;
      if (!v20) {
        break;
      }
      os_log_type_t v21 = v20->output_handler;
      os_log_type_t v22 = v20->handle;
      if (v21)
      {
        v21->uint64_t handle = v22;
        os_log_type_t v22 = v20->handle;
      }
      else
      {
        a1[2].uint64_t handle = v22;
      }
      void *v22 = v21;
      v20->output_handler = 0;
      v20->uint64_t handle = 0;
      nw_frame_finalize((uint64_t)v20);
    }
    while (1)
    {
      os_log_type_t v23 = p_output_handler[10];
      if (!v23) {
        break;
      }
      identifier = v23->identifier;
      os_log_type_t v25 = (nw_protocol *)v23->callbacks;
      if (identifier)
      {
        *(void *)&identifier->name[24] = v25;
        os_log_type_t v25 = (nw_protocol *)v23->callbacks;
      }
      else
      {
        p_output_handler[11] = v25;
      }
      *(void *)v25->flow_id = identifier;
      v23->identifier = 0;
      v23->callbacks = 0;
      nw_frame_free_buffer((uint64_t)v23);
      os_release(v23);
    }
    while (1)
    {
      id v26 = p_output_handler[12];
      if (!v26) {
        break;
      }
      os_log_type_t v27 = v26->identifier;
      os_log_type_t v28 = (nw_protocol *)v26->callbacks;
      if (v27)
      {
        *(void *)&v27->name[24] = v28;
        os_log_type_t v28 = (nw_protocol *)v26->callbacks;
      }
      else
      {
        p_output_handler[13] = v28;
      }
      *(void *)v28->flow_id = v27;
      v26->identifier = 0;
      v26->callbacks = 0;
      nw_frame_free_buffer((uint64_t)v26);
      os_release(v26);
    }
    nw_protocol_destroy((uint64_t)p_output_handler, 0);
  }
  return 1;
}

BOOL nw_channel_remove_input_handler(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v84 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_channel_remove_input_handler";
    char v14 = (char *)_os_log_send_and_compose_impl();
    v80[0] = 16;
    os_log_type_t v79 = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v14, v80, &v79)) {
      goto LABEL_66;
    }
    if (v80[0] == 17)
    {
      os_log_type_t v15 = __nwlog_obj();
      os_log_type_t v16 = v80[0];
      if (!os_log_type_enabled(v15, (os_log_type_t)v80[0])) {
        goto LABEL_66;
      }
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_channel_remove_input_handler";
      uint64_t v17 = "%{public}s called with null channel_protocol";
      goto LABEL_64;
    }
    if (v79 == OS_LOG_TYPE_DEFAULT)
    {
      os_log_type_t v15 = __nwlog_obj();
      os_log_type_t v16 = v80[0];
      if (!os_log_type_enabled(v15, (os_log_type_t)v80[0])) {
        goto LABEL_66;
      }
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_channel_remove_input_handler";
      uint64_t v17 = "%{public}s called with null channel_protocol, backtrace limit exceeded";
      goto LABEL_64;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v15 = __nwlog_obj();
    os_log_type_t v16 = v80[0];
    BOOL v70 = os_log_type_enabled(v15, (os_log_type_t)v80[0]);
    if (!backtrace_string)
    {
      if (!v70) {
        goto LABEL_66;
      }
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_channel_remove_input_handler";
      uint64_t v17 = "%{public}s called with null channel_protocol, no backtrace";
      goto LABEL_64;
    }
    if (v70)
    {
      *(_DWORD *)int buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_channel_remove_input_handler";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = backtrace_string;
      uint64_t v71 = "%{public}s called with null channel_protocol, dumping backtrace:%{public}s";
LABEL_142:
      _os_log_impl(&dword_1830D4000, v15, v16, v71, buf, 0x16u);
    }
LABEL_143:
    free(backtrace_string);
    goto LABEL_66;
  }
  uint64_t handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_channel_remove_input_handler";
    char v14 = (char *)_os_log_send_and_compose_impl();
    v80[0] = 16;
    os_log_type_t v79 = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v14, v80, &v79)) {
      goto LABEL_66;
    }
    if (v80[0] == 17)
    {
      os_log_type_t v15 = __nwlog_obj();
      os_log_type_t v16 = v80[0];
      if (!os_log_type_enabled(v15, (os_log_type_t)v80[0])) {
        goto LABEL_66;
      }
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_channel_remove_input_handler";
      uint64_t v17 = "%{public}s called with null channel";
      goto LABEL_64;
    }
    if (v79 == OS_LOG_TYPE_DEFAULT)
    {
      os_log_type_t v15 = __nwlog_obj();
      os_log_type_t v16 = v80[0];
      if (!os_log_type_enabled(v15, (os_log_type_t)v80[0])) {
        goto LABEL_66;
      }
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_channel_remove_input_handler";
      uint64_t v17 = "%{public}s called with null channel, backtrace limit exceeded";
      goto LABEL_64;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v15 = __nwlog_obj();
    os_log_type_t v16 = v80[0];
    BOOL v72 = os_log_type_enabled(v15, (os_log_type_t)v80[0]);
    if (!backtrace_string)
    {
      if (!v72) {
        goto LABEL_66;
      }
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_channel_remove_input_handler";
      uint64_t v17 = "%{public}s called with null channel, no backtrace";
      goto LABEL_64;
    }
    if (v72)
    {
      *(_DWORD *)int buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_channel_remove_input_handler";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = backtrace_string;
      uint64_t v71 = "%{public}s called with null channel, dumping backtrace:%{public}s";
      goto LABEL_142;
    }
    goto LABEL_143;
  }
  if (a2)
  {
    if ((nw_protocol *)handle[34] == a2) {
      handle[34] = 0;
    }
    uint64_t v4 = handle[35];
    if (v4)
    {
      output_handler_context = a2->output_handler_context;
      if (output_handler_context)
      {
        if (*((unsigned char *)output_handler_context + 153))
        {
          uint64_t v18 = output_handler_context[9];
          char v19 = (void *)output_handler_context[10];
          if (v18)
          {
            *(void *)(v18 + 48) = v19;
            char v19 = (void *)output_handler_context[10];
          }
          else
          {
            handle[47] = v19;
          }
          void *v19 = v18;
          char v32 = *((unsigned char *)output_handler_context + 153) & 0xFE;
          *((unsigned char *)output_handler_context + 153) = v32;
          if ((v32 & 2) == 0)
          {
LABEL_10:
            BOOL v6 = (void *)output_handler_context[6];
            if (!v6)
            {
LABEL_12:
              uint64_t v7 = (void *)output_handler_context[13];
              if (v7)
              {
                os_release(v7);
                output_handler_context[13] = 0;
              }
              a2->output_handler_context = 0;
              output_handler = a2->output_handler;
              if (output_handler)
              {
                if (output_handler->handle == &nw_protocol_ref_counted_handle)
                {
                  callbacks = output_handler[1].callbacks;
                  if (callbacks)
                  {
                    os_log_type_t v28 = (nw_protocol_callbacks *)((char *)callbacks - 1);
                    output_handler[1].callbacks = v28;
                    if (!v28)
                    {
                      nw_endpoint_t v29 = *(void (***)(void))output_handler[1].flow_id;
                      if (v29)
                      {
                        *(void *)output_handler[1].flow_id = 0;
                        v29[2](v29);
                        _Block_release(v29);
                      }
                      if (output_handler[1].flow_id[8])
                      {
                        BOOL v30 = *(const void **)output_handler[1].flow_id;
                        if (v30) {
                          _Block_release(v30);
                        }
                      }
                      free(output_handler);
                    }
                  }
                }
                a2->output_handler = 0;
              }
              uint64_t v9 = output_handler_context[4];
              if (v9)
              {
                do
                {
                  if (!v9) {
                    break;
                  }
                  uint64_t v10 = *(void *)(v9 + 32);
                  char v11 = ___ZL20remove_input_handlerP13nw_hash_tableP10nw_channelP11nw_protocol_block_invoke((uint64_t)&__block_literal_global_64_88803, v9);
                  uint64_t v9 = v10;
                }
                while ((v11 & 1) != 0);
              }
              if (output_handler_context[8])
              {
                uint64_t v12 = output_handler_context[7];
                if (v12)
                {
                  if (*(_UNKNOWN **)(v12 + 40) == &nw_protocol_ref_counted_handle)
                  {
                    uint64_t v37 = *(void *)(v12 + 88);
                    if (v37)
                    {
                      uint64_t v38 = v37 - 1;
                      *(void *)(v12 + 88) = v38;
                      if (!v38)
                      {
                        id v39 = *(void (***)(void, void))(v12 + 64);
                        if (v39)
                        {
                          *(void *)(v12 + 64) = 0;
                          v39[2](v39, v9);
                          _Block_release(v39);
                        }
                        if (*(unsigned char *)(v12 + 72))
                        {
                          BOOL v40 = *(const void **)(v12 + 64);
                          if (v40) {
                            _Block_release(v40);
                          }
                        }
                        free((void *)v12);
                      }
                    }
                  }
                }
              }
              *((unsigned char *)output_handler_context + 64) |= 1u;
              output_handler_context[7] = 0;
              if (nw_hash_table_remove_node(v4, (uint64_t)output_handler_context))
              {
                if (handle[17])
                {
                  if (os_channel_packet_pool_purge()) {
                    int v13 = nw_channel_check_defunct((uint64_t)handle);
                  }
                  else {
                    int v13 = 0;
                  }
                }
                else
                {
                  int v13 = 1;
                }
                if ((*((_WORD *)handle + 222) & 0x20) == 0 || nw_hash_table_count(handle[35])) {
                  return 1;
                }
                *(void *)int buf = 0;
                *(void *)&buf[8] = buf;
                *(void *)&buf[16] = 0x2000000000;
                *(void *)&unsigned char buf[24] = 0;
                *(void *)&unsigned char buf[24] = os_retain(handle);
                if (v13)
                {
                  os_log_type_t v31 = (void *)handle[19];
                  v78[0] = MEMORY[0x1E4F143A8];
                  v78[1] = 0x40000000;
                  v78[2] = ___ZL31nw_channel_remove_input_handlerP11nw_protocolS0_b_block_invoke;
                  v78[3] = &unk_1E524B7E8;
                  v78[4] = buf;
                  nw_queue_context_async(v31, v78);
LABEL_107:
                  _Block_object_dispose(buf, 8);
                  return 1;
                }
                if ((*((_WORD *)handle + 222) & 0x40) != 0)
                {
                  __int16 v47 = __nwlog_obj();
                  if (os_log_type_enabled(v47, OS_LOG_TYPE_DEBUG))
                  {
                    *(_DWORD *)uint64_t v80 = 136446210;
                    *(void *)&v80[4] = "nw_channel_remove_input_handler";
                    _os_log_impl(&dword_1830D4000, v47, OS_LOG_TYPE_DEBUG, "%{public}s Tearing down channel immediately", v80, 0xCu);
                  }
                  nw_channel_close(*(void *)(*(void *)&buf[8] + 24));
                  goto LABEL_88;
                }
                os_log_type_t v41 = (void *)handle[19];
                v77[0] = MEMORY[0x1E4F143A8];
                v77[1] = 0x40000000;
                v77[2] = ___ZL31nw_channel_remove_input_handlerP11nw_protocolS0_b_block_invoke_58;
                v77[3] = &unk_1E524B810;
                v77[4] = buf;
                v76[0] = MEMORY[0x1E4F143A8];
                v76[1] = 0x40000000;
                v76[2] = ___ZL31nw_channel_remove_input_handlerP11nw_protocolS0_b_block_invoke_60;
                v76[3] = &unk_1E524B838;
                void v76[4] = buf;
                BOOL source = nw_queue_context_create_source(v41, 2, 3, 0, v77, v76);
                if (source)
                {
                  uint64_t v43 = source;
                  os_log_type_t v44 = a2->callbacks;
                  if (!v44) {
                    goto LABEL_101;
                  }
                  get_parameters = (uint64_t (*)(nw_protocol *))v44->get_parameters;
                  if (!get_parameters) {
                    goto LABEL_101;
                  }
                  if (a2->handle == &nw_protocol_ref_counted_handle)
                  {
                    BOOL v53 = a2[1].callbacks;
                    if (v53) {
                      a2[1].callbacks = (nw_protocol_callbacks *)((char *)&v53->add_input_handler + 1);
                    }
                    *(void *)uint64_t v80 = a2;
                    char v46 = v80[8] | 1;
                  }
                  else
                  {
                    *(void *)uint64_t v80 = a2;
                    char v46 = v80[8] & 0xFE;
                  }
                  v80[8] = v46;
                  os_log_type_t v54 = (void *)get_parameters(a2);
                  nw::retained_ptr<nw_protocol *>::~retained_ptr((uint64_t *)v80);
                  if (v54 && (uint64_t channel_teardown_delay = nw_parameters_get_channel_teardown_delay(v54)) != 0)
                  {
                    int64_t v56 = channel_teardown_delay;
                    os_log_type_t v57 = __nwlog_obj();
                    if (os_log_type_enabled(v57, OS_LOG_TYPE_DEBUG))
                    {
                      *(_DWORD *)uint64_t v80 = 136446466;
                      *(void *)&v80[4] = "nw_channel_remove_input_handler";
                      __int16 v81 = 2048;
                      int64_t v82 = v56;
                      _os_log_impl(&dword_1830D4000, v57, OS_LOG_TYPE_DEBUG, "%{public}s Using overridden channel teardown delay: %llums", v80, 0x16u);
                    }
                  }
                  else
                  {
LABEL_101:
                    int64_t v56 = 1000
                        * networkd_settings_get_int64_with_default((const char *)nw_setting_channel_teardown_delay, 60);
                  }
                  uint64_t v58 = __nwlog_obj();
                  if (os_log_type_enabled(v58, OS_LOG_TYPE_DEBUG))
                  {
                    *(_DWORD *)uint64_t v80 = 136446466;
                    *(void *)&v80[4] = "nw_channel_remove_input_handler";
                    __int16 v81 = 2048;
                    int64_t v82 = v56;
                    _os_log_impl(&dword_1830D4000, v58, OS_LOG_TYPE_DEBUG, "%{public}s Setting timer to tear down channel after %llums", v80, 0x16u);
                  }
                  dispatch_time_t v59 = dispatch_time(0x8000000000000000, 1000000 * v56);
                  nw_queue_set_timer_values(v43, v59, 0xFFFFFFFFFFFFFFFFLL, 0xF4240uLL);
                  uint64_t v60 = *(void *)(*(void *)&buf[8] + 24);
                  uint64_t v61 = *(void *)(v60 + 200);
                  if (v61)
                  {
                    nw_queue_cancel_source(v61);
                    uint64_t v62 = *(void *)&buf[8];
                    *(void *)(*(void *)(*(void *)&buf[8] + 24) + 200) = 0;
                    uint64_t v60 = *(void *)(v62 + 24);
                  }
                  *(void *)(v60 + 200) = v43;
                  nw_queue_activate_source(v43);
                  goto LABEL_107;
                }
                __nwlog_obj();
                *(_DWORD *)uint64_t v80 = 136446210;
                *(void *)&v80[4] = "nw_channel_remove_input_handler";
                __int16 v49 = (char *)_os_log_send_and_compose_impl();
                os_log_type_t v79 = OS_LOG_TYPE_ERROR;
                char v75 = 0;
                if (__nwlog_fault(v49, &v79, &v75))
                {
                  if (v79 == OS_LOG_TYPE_FAULT)
                  {
                    uint64_t v50 = __nwlog_obj();
                    os_log_type_t v51 = v79;
                    if (!os_log_type_enabled(v50, v79)) {
                      goto LABEL_128;
                    }
                    *(_DWORD *)uint64_t v80 = 136446210;
                    *(void *)&v80[4] = "nw_channel_remove_input_handler";
                    os_log_type_t v52 = "%{public}s nw_queue_context_create_source(timer) failed";
                    goto LABEL_127;
                  }
                  if (!v75)
                  {
                    uint64_t v50 = __nwlog_obj();
                    os_log_type_t v51 = v79;
                    if (!os_log_type_enabled(v50, v79)) {
                      goto LABEL_128;
                    }
                    *(_DWORD *)uint64_t v80 = 136446210;
                    *(void *)&v80[4] = "nw_channel_remove_input_handler";
                    os_log_type_t v52 = "%{public}s nw_queue_context_create_source(timer) failed, backtrace limit exceeded";
                    goto LABEL_127;
                  }
                  __int16 v63 = (char *)__nw_create_backtrace_string();
                  uint64_t v50 = __nwlog_obj();
                  os_log_type_t v51 = v79;
                  BOOL v64 = os_log_type_enabled(v50, v79);
                  if (v63)
                  {
                    if (v64)
                    {
                      *(_DWORD *)uint64_t v80 = 136446466;
                      *(void *)&v80[4] = "nw_channel_remove_input_handler";
                      __int16 v81 = 2082;
                      int64_t v82 = (int64_t)v63;
                      _os_log_impl(&dword_1830D4000, v50, v51, "%{public}s nw_queue_context_create_source(timer) failed, dumping backtrace:%{public}s", v80, 0x16u);
                    }
                    free(v63);
                    goto LABEL_128;
                  }
                  if (v64)
                  {
                    *(_DWORD *)uint64_t v80 = 136446210;
                    *(void *)&v80[4] = "nw_channel_remove_input_handler";
                    os_log_type_t v52 = "%{public}s nw_queue_context_create_source(timer) failed, no backtrace";
LABEL_127:
                    _os_log_impl(&dword_1830D4000, v50, v51, v52, v80, 0xCu);
                  }
                }
LABEL_128:
                if (v49) {
                  free(v49);
                }
LABEL_88:
                os_log_type_t v48 = *(void **)(*(void *)&buf[8] + 24);
                if (v48)
                {
                  os_release(v48);
                  *(void *)(*(void *)&buf[8] + 24) = 0;
                }
                goto LABEL_107;
              }
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              uint64_t v20 = gLogObj;
              if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)int buf = 136446210;
                *(void *)&uint8_t buf[4] = "remove_input_handler";
                _os_log_impl(&dword_1830D4000, v20, OS_LOG_TYPE_ERROR, "%{public}s nw_hash_table_remove_node failed", buf, 0xCu);
              }
              goto LABEL_35;
            }
LABEL_11:
            os_release(v6);
            output_handler_context[6] = 0;
            goto LABEL_12;
          }
        }
        else if ((*((unsigned char *)output_handler_context + 153) & 2) == 0)
        {
          goto LABEL_10;
        }
        uint64_t v33 = output_handler_context[11];
        BOOL v34 = (void *)output_handler_context[12];
        if (v33)
        {
          *(void *)(v33 + 64) = v34;
          BOOL v34 = (void *)output_handler_context[12];
        }
        else
        {
          handle[49] = v34;
        }
        void *v34 = v33;
        *((unsigned char *)output_handler_context + 153) &= ~2u;
        BOOL v6 = (void *)output_handler_context[6];
        if (!v6) {
          goto LABEL_12;
        }
        goto LABEL_11;
      }
LABEL_35:
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v21 = gLogObj;
      BOOL result = os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
      if (result)
      {
        *(_DWORD *)int buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_channel_remove_input_handler";
        *(_WORD *)&unsigned char buf[12] = 1042;
        *(_DWORD *)&buf[14] = 16;
        *(_WORD *)&buf[18] = 2098;
        *(void *)&buf[20] = a2;
        _os_log_impl(&dword_1830D4000, v21, OS_LOG_TYPE_ERROR, "%{public}s Channel does not have input handler registered for %{public,uuid_t}.16P", buf, 0x1Cu);
        return 0;
      }
      return result;
    }
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "remove_input_handler";
    __int16 v65 = (char *)_os_log_send_and_compose_impl();
    v80[0] = 16;
    os_log_type_t v79 = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v65, v80, &v79))
    {
      if (v80[0] == 17)
      {
        uint64_t v66 = __nwlog_obj();
        os_log_type_t v67 = v80[0];
        if (!os_log_type_enabled(v66, (os_log_type_t)v80[0])) {
          goto LABEL_163;
        }
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "remove_input_handler";
        os_log_type_t v68 = "%{public}s called with null table";
        goto LABEL_162;
      }
      if (v79 == OS_LOG_TYPE_DEFAULT)
      {
        uint64_t v66 = __nwlog_obj();
        os_log_type_t v67 = v80[0];
        if (!os_log_type_enabled(v66, (os_log_type_t)v80[0])) {
          goto LABEL_163;
        }
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "remove_input_handler";
        os_log_type_t v68 = "%{public}s called with null table, backtrace limit exceeded";
        goto LABEL_162;
      }
      os_log_type_t v73 = (char *)__nw_create_backtrace_string();
      uint64_t v66 = __nwlog_obj();
      os_log_type_t v67 = v80[0];
      BOOL v74 = os_log_type_enabled(v66, (os_log_type_t)v80[0]);
      if (v73)
      {
        if (v74)
        {
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "remove_input_handler";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v73;
          _os_log_impl(&dword_1830D4000, v66, v67, "%{public}s called with null table, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v73);
        goto LABEL_163;
      }
      if (v74)
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "remove_input_handler";
        os_log_type_t v68 = "%{public}s called with null table, no backtrace";
LABEL_162:
        _os_log_impl(&dword_1830D4000, v66, v67, v68, buf, 0xCu);
      }
    }
LABEL_163:
    if (v65) {
      free(v65);
    }
    goto LABEL_35;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)int buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_channel_remove_input_handler";
  char v14 = (char *)_os_log_send_and_compose_impl();
  v80[0] = 16;
  os_log_type_t v79 = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v14, v80, &v79))
  {
    if (v80[0] == 17)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v15 = gLogObj;
      os_log_type_t v16 = v80[0];
      if (os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v80[0]))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_channel_remove_input_handler";
        uint64_t v17 = "%{public}s called with null input_protocol";
LABEL_64:
        BOOL v35 = v15;
        os_log_type_t v36 = v16;
LABEL_65:
        _os_log_impl(&dword_1830D4000, v35, v36, v17, buf, 0xCu);
      }
    }
    else if (v79)
    {
      os_log_type_t v23 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      __int16 v24 = gLogObj;
      os_log_type_t v25 = v80[0];
      BOOL v26 = os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v80[0]);
      if (v23)
      {
        if (v26)
        {
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_channel_remove_input_handler";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v23;
          _os_log_impl(&dword_1830D4000, v24, v25, "%{public}s called with null input_protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v23);
        goto LABEL_66;
      }
      if (v26)
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_channel_remove_input_handler";
        uint64_t v17 = "%{public}s called with null input_protocol, no backtrace";
        BOOL v35 = v24;
        os_log_type_t v36 = v25;
        goto LABEL_65;
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v15 = gLogObj;
      os_log_type_t v16 = v80[0];
      if (os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v80[0]))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_channel_remove_input_handler";
        uint64_t v17 = "%{public}s called with null input_protocol, backtrace limit exceeded";
        goto LABEL_64;
      }
    }
  }
LABEL_66:
  if (v14) {
    free(v14);
  }
  return 0;
}

uint64_t nw_protocol_implementation_updated_path(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v67 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  if (a1)
  {
    BOOL v6 = *(void **)(a1 + 40);
    uint64_t v7 = (void *)(a1 + 96);
    if (v6 != &nw_protocol_ref_counted_handle) {
      uint64_t v7 = 0;
    }
    uint64_t v8 = v7;
    uint64_t v9 = v8;
    if (v6 == &nw_protocol_ref_counted_handle)
    {
      uint64_t v10 = v8[1];
      if (v10)
      {
        if (*(void *)(v10 + 80))
        {
          if (v5)
          {
            if ((*((char *)v8 + 405) & 0x80000000) == 0 && gLogDatapath)
            {
              uint64_t v38 = __nwlog_obj();
              if (os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)int buf = 136446722;
                uint64_t v62 = "nw_protocol_implementation_updated_path";
                __int16 v63 = 2082;
                BOOL v64 = (char *)v9 + 407;
                __int16 v65 = 2080;
                uint64_t v66 = " ";
                _os_log_impl(&dword_1830D4000, v38, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s", buf, 0x20u);
              }
            }
            objc_storeStrong((id *)v9 + 36, a3);
            if (*(void *)(*(void *)(v9[1] + 80) + 224))
            {
              char v11 = (void *)v9[35];
              if (v11)
              {
                *(void *)os_log_type_t type = 0;
                int v59 = 0;
                int ctl_command = nw_path_flow_registration_get_ctl_command(v5, v11, &type[4], type, &v59);
                int v13 = *(_DWORD *)&type[4] == 5 ? ctl_command : 0;
                if (v13 == 1)
                {
                  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                  networkd_settings_init();
                  char v14 = (id)gLogObj;
                  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
                  {
                    *(_DWORD *)int buf = 136446466;
                    uint64_t v62 = "nw_protocol_implementation_updated_path";
                    __int16 v63 = 1024;
                    LODWORD(v64) = *(_DWORD *)type;
                    _os_log_impl(&dword_1830D4000, v14, OS_LOG_TYPE_DEBUG, "%{public}s receive PRC_MSGSIZE %u", buf, 0x12u);
                  }

                  if (v9[37])
                  {
                    v56[0] = MEMORY[0x1E4F143A8];
                    v56[1] = 3221225472;
                    v56[2] = ___ZL39nw_protocol_implementation_updated_pathP11nw_protocolS0_PU21objcproto10OS_nw_path8NSObject_block_invoke;
                    v56[3] = &unk_1E523C050;
                    os_log_type_t v57 = v9;
                    int v58 = *(_DWORD *)type;
                    nw_path_enumerate_interface_options(v5, v56);
                  }
                  else
                  {
                    (*(void (**)(void *, void, void))(*(void *)(v9[1] + 80) + 224))(v9, 0, *(unsigned int *)type);
                  }
                }
              }
            }
            os_log_type_t v15 = (unsigned __int8 *)v5;
            unsigned int v16 = v15[474];

            uint64_t v17 = *(void *)(v9[1] + 80);
            uint64_t v18 = *(void (**)(void *, void))(v17 + 152);
            if (v18)
            {
              v18(v9, (v16 >> 1) & 1);
              uint64_t v17 = *(void *)(v9[1] + 80);
            }
            if (*(void *)(v17 + 168))
            {
              char v19 = v15;
              unsigned int v20 = v15[474];

              char v21 = *((unsigned char *)v9 + 402);
              if (((v20 >> 5) & 1) == ((v21 & 1) == 0))
              {
                *((unsigned char *)v9 + 402) = v21 & 0xFE | ((v20 & 0x20) >> 5);
                (*(void (**)(void *, BOOL))(*(void *)(v9[1] + 80) + 168))(v9, (v20 & 0x20) != 0);
              }
            }
            nw_protocol_instance_update_available_paths((NWConcrete_nw_protocol_instance *)v9);
            uint64_t v22 = 1;
LABEL_27:

            goto LABEL_28;
          }
          os_log_type_t v36 = __nwlog_obj();
          *(_DWORD *)int buf = 136446210;
          uint64_t v62 = "nw_protocol_implementation_updated_path";
          nw_endpoint_t v29 = (char *)_os_log_send_and_compose_impl();

          os_log_type_t type[4] = OS_LOG_TYPE_ERROR;
          type[0] = OS_LOG_TYPE_DEFAULT;
          if (__nwlog_fault(v29, &type[4], type))
          {
            if (type[4] == OS_LOG_TYPE_FAULT)
            {
              BOOL v30 = __nwlog_obj();
              os_log_type_t v37 = type[4];
              if (os_log_type_enabled(v30, type[4]))
              {
                *(_DWORD *)int buf = 136446210;
                uint64_t v62 = "nw_protocol_implementation_updated_path";
                _os_log_impl(&dword_1830D4000, v30, v37, "%{public}s called with null path", buf, 0xCu);
              }
LABEL_117:

              goto LABEL_82;
            }
            if (type[0] == OS_LOG_TYPE_DEFAULT)
            {
              BOOL v30 = __nwlog_obj();
              os_log_type_t v55 = type[4];
              if (os_log_type_enabled(v30, type[4]))
              {
                *(_DWORD *)int buf = 136446210;
                uint64_t v62 = "nw_protocol_implementation_updated_path";
                _os_log_impl(&dword_1830D4000, v30, v55, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
              }
              goto LABEL_117;
            }
            backtrace_string = (char *)__nw_create_backtrace_string();
            BOOL v30 = __nwlog_obj();
            os_log_type_t v49 = type[4];
            BOOL v50 = os_log_type_enabled(v30, type[4]);
            if (!backtrace_string)
            {
              if (v50)
              {
                *(_DWORD *)int buf = 136446210;
                uint64_t v62 = "nw_protocol_implementation_updated_path";
                _os_log_impl(&dword_1830D4000, v30, v49, "%{public}s called with null path, no backtrace", buf, 0xCu);
              }
              goto LABEL_117;
            }
            if (v50)
            {
              *(_DWORD *)int buf = 136446466;
              uint64_t v62 = "nw_protocol_implementation_updated_path";
              __int16 v63 = 2082;
              BOOL v64 = backtrace_string;
              _os_log_impl(&dword_1830D4000, v30, v49, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
            }
            goto LABEL_81;
          }
LABEL_82:
          if (v29) {
            free(v29);
          }
          uint64_t v22 = 0;
          goto LABEL_27;
        }
        BOOL v34 = __nwlog_obj();
        *(_DWORD *)int buf = 136446210;
        uint64_t v62 = "nw_protocol_implementation_updated_path";
        nw_endpoint_t v29 = (char *)_os_log_send_and_compose_impl();

        os_log_type_t type[4] = OS_LOG_TYPE_ERROR;
        type[0] = OS_LOG_TYPE_DEFAULT;
        if (!__nwlog_fault(v29, &type[4], type)) {
          goto LABEL_82;
        }
        if (type[4] == OS_LOG_TYPE_FAULT)
        {
          BOOL v30 = __nwlog_obj();
          os_log_type_t v35 = type[4];
          if (os_log_type_enabled(v30, type[4]))
          {
            *(_DWORD *)int buf = 136446210;
            uint64_t v62 = "nw_protocol_implementation_updated_path";
            _os_log_impl(&dword_1830D4000, v30, v35, "%{public}s called with null instance->parent_definition->extended_state", buf, 0xCu);
          }
          goto LABEL_117;
        }
        if (type[0] == OS_LOG_TYPE_DEFAULT)
        {
          BOOL v30 = __nwlog_obj();
          os_log_type_t v54 = type[4];
          if (os_log_type_enabled(v30, type[4]))
          {
            *(_DWORD *)int buf = 136446210;
            uint64_t v62 = "nw_protocol_implementation_updated_path";
            _os_log_impl(&dword_1830D4000, v30, v54, "%{public}s called with null instance->parent_definition->extended_state, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_117;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        BOOL v30 = __nwlog_obj();
        os_log_type_t v47 = type[4];
        BOOL v48 = os_log_type_enabled(v30, type[4]);
        if (!backtrace_string)
        {
          if (v48)
          {
            *(_DWORD *)int buf = 136446210;
            uint64_t v62 = "nw_protocol_implementation_updated_path";
            _os_log_impl(&dword_1830D4000, v30, v47, "%{public}s called with null instance->parent_definition->extended_state, no backtrace", buf, 0xCu);
          }
          goto LABEL_117;
        }
        if (v48)
        {
          *(_DWORD *)int buf = 136446466;
          uint64_t v62 = "nw_protocol_implementation_updated_path";
          __int16 v63 = 2082;
          BOOL v64 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v30, v47, "%{public}s called with null instance->parent_definition->extended_state, dumping backtrace:%{public}s", buf, 0x16u);
        }
      }
      else
      {
        char v32 = __nwlog_obj();
        *(_DWORD *)int buf = 136446210;
        uint64_t v62 = "nw_protocol_implementation_updated_path";
        nw_endpoint_t v29 = (char *)_os_log_send_and_compose_impl();

        os_log_type_t type[4] = OS_LOG_TYPE_ERROR;
        type[0] = OS_LOG_TYPE_DEFAULT;
        if (!__nwlog_fault(v29, &type[4], type)) {
          goto LABEL_82;
        }
        if (type[4] == OS_LOG_TYPE_FAULT)
        {
          BOOL v30 = __nwlog_obj();
          os_log_type_t v33 = type[4];
          if (os_log_type_enabled(v30, type[4]))
          {
            *(_DWORD *)int buf = 136446210;
            uint64_t v62 = "nw_protocol_implementation_updated_path";
            _os_log_impl(&dword_1830D4000, v30, v33, "%{public}s called with null instance->parent_definition", buf, 0xCu);
          }
          goto LABEL_117;
        }
        if (type[0] == OS_LOG_TYPE_DEFAULT)
        {
          BOOL v30 = __nwlog_obj();
          os_log_type_t v53 = type[4];
          if (os_log_type_enabled(v30, type[4]))
          {
            *(_DWORD *)int buf = 136446210;
            uint64_t v62 = "nw_protocol_implementation_updated_path";
            _os_log_impl(&dword_1830D4000, v30, v53, "%{public}s called with null instance->parent_definition, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_117;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        BOOL v30 = __nwlog_obj();
        os_log_type_t v45 = type[4];
        BOOL v46 = os_log_type_enabled(v30, type[4]);
        if (!backtrace_string)
        {
          if (v46)
          {
            *(_DWORD *)int buf = 136446210;
            uint64_t v62 = "nw_protocol_implementation_updated_path";
            _os_log_impl(&dword_1830D4000, v30, v45, "%{public}s called with null instance->parent_definition, no backtrace", buf, 0xCu);
          }
          goto LABEL_117;
        }
        if (v46)
        {
          *(_DWORD *)int buf = 136446466;
          uint64_t v62 = "nw_protocol_implementation_updated_path";
          __int16 v63 = 2082;
          BOOL v64 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v30, v45, "%{public}s called with null instance->parent_definition, dumping backtrace:%{public}s", buf, 0x16u);
        }
      }
    }
    else
    {
      os_log_type_t v28 = __nwlog_obj();
      *(_DWORD *)int buf = 136446210;
      uint64_t v62 = "nw_protocol_implementation_updated_path";
      nw_endpoint_t v29 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type[4] = OS_LOG_TYPE_ERROR;
      type[0] = OS_LOG_TYPE_DEFAULT;
      if (!__nwlog_fault(v29, &type[4], type)) {
        goto LABEL_82;
      }
      if (type[4] == OS_LOG_TYPE_FAULT)
      {
        BOOL v30 = __nwlog_obj();
        os_log_type_t v31 = type[4];
        if (os_log_type_enabled(v30, type[4]))
        {
          *(_DWORD *)int buf = 136446210;
          uint64_t v62 = "nw_protocol_implementation_updated_path";
          _os_log_impl(&dword_1830D4000, v30, v31, "%{public}s called with null instance", buf, 0xCu);
        }
        goto LABEL_117;
      }
      if (type[0] == OS_LOG_TYPE_DEFAULT)
      {
        BOOL v30 = __nwlog_obj();
        os_log_type_t v52 = type[4];
        if (os_log_type_enabled(v30, type[4]))
        {
          *(_DWORD *)int buf = 136446210;
          uint64_t v62 = "nw_protocol_implementation_updated_path";
          _os_log_impl(&dword_1830D4000, v30, v52, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_117;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v30 = __nwlog_obj();
      os_log_type_t v43 = type[4];
      BOOL v44 = os_log_type_enabled(v30, type[4]);
      if (!backtrace_string)
      {
        if (v44)
        {
          *(_DWORD *)int buf = 136446210;
          uint64_t v62 = "nw_protocol_implementation_updated_path";
          _os_log_impl(&dword_1830D4000, v30, v43, "%{public}s called with null instance, no backtrace", buf, 0xCu);
        }
        goto LABEL_117;
      }
      if (v44)
      {
        *(_DWORD *)int buf = 136446466;
        uint64_t v62 = "nw_protocol_implementation_updated_path";
        __int16 v63 = 2082;
        BOOL v64 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v30, v43, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
      }
    }
LABEL_81:

    free(backtrace_string);
    goto LABEL_82;
  }
  __int16 v24 = __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  uint64_t v62 = "nw_protocol_implementation_updated_path";
  os_log_type_t v25 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type[4] = OS_LOG_TYPE_ERROR;
  type[0] = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v25, &type[4], type))
  {
    if (type[4] == OS_LOG_TYPE_FAULT)
    {
      BOOL v26 = __nwlog_obj();
      os_log_type_t v27 = type[4];
      if (os_log_type_enabled(v26, type[4]))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v62 = "nw_protocol_implementation_updated_path";
        _os_log_impl(&dword_1830D4000, v26, v27, "%{public}s called with null protocol", buf, 0xCu);
      }
    }
    else if (type[0])
    {
      id v39 = (char *)__nw_create_backtrace_string();
      BOOL v26 = __nwlog_obj();
      os_log_type_t v40 = type[4];
      BOOL v41 = os_log_type_enabled(v26, type[4]);
      if (v39)
      {
        if (v41)
        {
          *(_DWORD *)int buf = 136446466;
          uint64_t v62 = "nw_protocol_implementation_updated_path";
          __int16 v63 = 2082;
          BOOL v64 = v39;
          _os_log_impl(&dword_1830D4000, v26, v40, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v39);
        goto LABEL_103;
      }
      if (v41)
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v62 = "nw_protocol_implementation_updated_path";
        _os_log_impl(&dword_1830D4000, v26, v40, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v26 = __nwlog_obj();
      os_log_type_t v51 = type[4];
      if (os_log_type_enabled(v26, type[4]))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v62 = "nw_protocol_implementation_updated_path";
        _os_log_impl(&dword_1830D4000, v26, v51, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_103:
  if (v25) {
    free(v25);
  }
  uint64_t v22 = 0;
LABEL_28:

  return v22;
}

void sub_183416444(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void nw_protocol_instance_update_available_paths(NWConcrete_nw_protocol_instance *a1)
{
  uint64_t v82 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if ((*((unsigned char *)v1->parent_definition + 184) & 0x10) == 0
    || !nw_parameters_get_multipath(v1->destroy_timer)
    || !v2->parent_definition->extended_state->var26)
  {

    goto LABEL_41;
  }
  char v3 = BYTE5(v2->flow_in_connected);

  if ((v3 & 4) == 0)
  {
    if (v2->flow_registration) {
      goto LABEL_6;
    }
    BOOL internal = nw_hash_table_create_internal(5u, 144, (const void *(*)(const void *, unsigned int *))nw_protocol_get_key, (unsigned int (*)(const void *, unsigned int))nw_protocol_key_hash, (BOOL (*)(const void *, const void *, unsigned int))nw_protocol_matches_key, 0);
    if (internal)
    {
      *(_DWORD *)(internal + 48) &= ~2u;
      v2->flow_registration = (OS_nw_path_flow_registration *)internal;
      if (v2->wakeup_block && *(void *)&v2[-1].log_str[25])
      {
        __buf[0] = 0;
        arc4random_buf(__buf, 8uLL);
        LOBYTE(v68[0]) = 0;
        BOOL v31 = nw_hash_table_add_object((uint64_t)v2->flow_registration, __buf[0], (char *)v68);
        if (LOBYTE(v68[0]))
        {
          char v32 = (_OWORD *)v31;
          if (v31)
          {
            *(_OWORD *)(v31 + 144) = 0u;
            *(_OWORD *)(v31 + 160) = 0u;
            *(_OWORD *)(v31 + 112) = 0u;
            *(_OWORD *)(v31 + 128) = 0u;
            *(_OWORD *)(v31 + 80) = 0u;
            *(_OWORD *)(v31 + 96) = 0u;
            *(_OWORD *)(v31 + 48) = 0u;
            *(_OWORD *)(v31 + 64) = 0u;
            *(_OWORD *)(v31 + 32) = 0u;
            id v33 = nw_path_copy_interface(v2->wakeup_block);
            BOOL v34 = (void *)*((void *)v32 + 6);
            *((void *)v32 + 6) = v33;

            *((_DWORD *)v32 + 40) = 3;
            uint64_t v35 = *(void *)&v2[-1].log_str[25];
            if (v35 && *(_UNKNOWN **)(v35 + 40) == &nw_protocol_ref_counted_handle)
            {
              uint64_t v47 = *(void *)(v35 + 88);
              if (v47) {
                *(void *)(v35 + 88) = v47 + 1;
              }
              char v37 = 1;
              char v36 = -1;
            }
            else
            {
              char v36 = 0;
              char v37 = 0;
            }
            *(void *)int buf = v35;
            buf[8] = v36;
            char v48 = *((unsigned char *)v32 + 72);
            if (v48)
            {
              nw::release_if_needed<nw_protocol *>((uint64_t *)v32 + 8);
              char v48 = *((unsigned char *)v32 + 72);
            }
            *((void *)v32 + 8) = v35;
            *((unsigned char *)v32 + 72) = v37 | v48 & 0xFE;
            *((unsigned char *)v32 + 169) &= ~8u;
            if ((SBYTE5(v2->flow_in_connected) & 0x80000000) == 0)
            {
              os_log_type_t v49 = __nwlog_obj();
              if (os_log_type_enabled(v49, OS_LOG_TYPE_DEBUG))
              {
                uint64_t v50 = *((void *)v32 + 6);
                *(_DWORD *)int buf = 136447234;
                *(void *)&uint8_t buf[4] = "nw_protocol_instance_update_available_paths";
                *(_WORD *)&unsigned char buf[12] = 2082;
                *(void *)&buf[14] = (char *)&v2->flow_in_connected + 7;
                *(_WORD *)&unsigned char buf[22] = 2080;
                BOOL v77 = " ";
                __int16 v78 = 2048;
                uint64_t v79 = __buf[0];
                __int16 v80 = 2112;
                uint64_t v81 = v50;
                _os_log_impl(&dword_1830D4000, v49, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sAdded path %lx as primary path over %@", buf, 0x34u);
              }
            }
            uint64_t v4 = __buf[0];
            *((void *)v32 + 17) = 0;
            tqh_last = v2->pending_inbound_frames.tqh_last;
            v2->current_path = (OS_nw_path *)v4;
            v2->paths_table = (nw_hash_table *)v4;
            *((void *)v32 + 18) = (char *)v32 + 136;
            if (tqh_last)
            {
              *((void *)v32 + 17) = tqh_last;
              *((void *)v2->pending_inbound_frames.tqh_last + 5) = (char *)v32 + 136;
              *((void *)v32 + 18) = *(void *)&v2->pending_inbound_frame_count;
              v2->pending_inbound_frames.tqh_last = 0;
              *(void *)&v2->pending_inbound_frame_size_t count = &v2->pending_inbound_frames.tqh_last;
            }
            goto LABEL_7;
          }
        }
        if ((SBYTE5(v2->flow_in_connected) & 0x80000000) == 0)
        {
          os_log_type_t v45 = __nwlog_obj();
          if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)int buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_protocol_instance_update_available_paths";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = (char *)&v2->flow_in_connected + 7;
            *(_WORD *)&unsigned char buf[22] = 2080;
            BOOL v77 = " ";
            __int16 v78 = 2048;
            uint64_t v79 = __buf[0];
            _os_log_impl(&dword_1830D4000, v45, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sFailed to add path %lx to paths table", buf, 0x2Au);
          }
        }
      }
LABEL_6:
      uint64_t v4 = 0;
LABEL_7:
      if ((SBYTE5(v2->flow_in_connected) & 0x80000000) == 0)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v5 = (id)gLogObj;
        if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)int buf = 136446722;
          *(void *)&uint8_t buf[4] = "nw_protocol_instance_update_available_paths";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = (char *)&v2->flow_in_connected + 7;
          *(_WORD *)&unsigned char buf[22] = 2080;
          BOOL v77 = " ";
          _os_log_impl(&dword_1830D4000, v5, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sExisting paths:", buf, 0x20u);
        }
      }
      flow_registration = (char *)v2->flow_registration;
      v74[0] = MEMORY[0x1E4F143A8];
      v74[1] = 3221225472;
      v74[2] = ___ZL43nw_protocol_instance_update_available_pathsP31NWConcrete_nw_protocol_instance_block_invoke;
      v74[3] = &unk_1E524AF58;
      uint64_t v7 = v2;
      char v75 = v7;
      nw_hash_table_apply(flow_registration, (uint64_t)v74);
      uint64_t v8 = v7[36];
      if (v8)
      {
        if ((SBYTE5(v2->flow_in_connected) & 0x80000000) == 0)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v9 = (id)gLogObj;
          if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)int buf = 136446722;
            *(void *)&uint8_t buf[4] = "nw_protocol_instance_update_available_paths";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = (char *)v7 + 407;
            *(_WORD *)&unsigned char buf[22] = 2080;
            BOOL v77 = " ";
            _os_log_impl(&dword_1830D4000, v9, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sInterface options:", buf, 0x20u);
          }

          uint64_t v8 = v7[36];
        }
        v72[0] = MEMORY[0x1E4F143A8];
        v72[1] = 3221225472;
        v72[2] = ___ZL43nw_protocol_instance_update_available_pathsP31NWConcrete_nw_protocol_instance_block_invoke_273;
        v72[3] = &unk_1E523BE98;
        os_log_type_t v73 = v7;
        nw_path_enumerate_interface_options(v8, v72);
      }
      xpc_object_t v10 = xpc_array_create(0, 0);
      char v11 = v7[36];
      if (v11)
      {
        *(void *)int buf = 0;
        *(void *)&buf[8] = buf;
        *(void *)&buf[16] = 0x2020000000;
        BOOL v77 = 0;
        __buf[0] = 0;
        __buf[1] = (uint64_t)__buf;
        __buf[2] = 0x2020000000;
        char v71 = 1;
        v68[0] = 0;
        v68[1] = v68;
        v68[2] = 0x2020000000;
        char v69 = 0;
        uint64_t v12 = v11;
        id v13 = v12[3];

        char v14 = v7[36];
        v61[0] = MEMORY[0x1E4F143A8];
        v61[1] = 3221225472;
        v61[2] = ___ZL43nw_protocol_instance_update_available_pathsP31NWConcrete_nw_protocol_instance_block_invoke_275;
        v61[3] = &unk_1E523BEC0;
        uint64_t v62 = v7;
        id v63 = v13;
        id v64 = v10;
        __int16 v65 = __buf;
        uint64_t v66 = buf;
        uint64_t v67 = v68;
        id v15 = v13;
        nw_path_enumerate_interface_options_with_details(v14, v61);

        _Block_object_dispose(v68, 8);
        _Block_object_dispose(__buf, 8);
        _Block_object_dispose(buf, 8);
      }
      xpc_object_t v16 = xpc_array_create(0, 0);
      if (v7[36])
      {
        uint64_t v17 = (char *)v2->flow_registration;
        v58[0] = MEMORY[0x1E4F143A8];
        v58[1] = 3221225472;
        v58[2] = ___ZL43nw_protocol_instance_update_available_pathsP31NWConcrete_nw_protocol_instance_block_invoke_278;
        v58[3] = &unk_1E523BCE8;
        int v59 = v7;
        id v60 = v16;
        nw_hash_table_apply(v17, (uint64_t)v58);
      }
      if (v4) {
        ((void (*)(void **, uint64_t, uint64_t, BOOL))v2->parent_definition->extended_state->var26)(v7, v4, 3, v4 == (void)v7[39]);
      }
      applier[0] = MEMORY[0x1E4F143A8];
      applier[1] = 3221225472;
      applier[2] = ___ZL43nw_protocol_instance_update_available_pathsP31NWConcrete_nw_protocol_instance_block_invoke_279;
      applier[3] = &unk_1E523BF10;
      uint64_t v57 = v4;
      uint64_t v18 = v7;
      int64_t v56 = v18;
      xpc_array_apply(v10, applier);
      if (xpc_array_get_count(v16))
      {
        v52[0] = MEMORY[0x1E4F143A8];
        v52[1] = 3221225472;
        v52[2] = ___ZL43nw_protocol_instance_update_available_pathsP31NWConcrete_nw_protocol_instance_block_invoke_2_280;
        v52[3] = &unk_1E524B9A0;
        id v53 = v16;
        os_log_type_t v54 = v18;
        nw_protocol_instance_async(v54, v52);
      }
      BOOL should_fallback = nw_path_should_fallback(v7[36], 1);
      uint64_t is_weak = nw_path_fallback_is_weak(v7[36]);
      uint64_t v21 = is_weak;
      char v22 = BYTE5(v2->flow_in_connected);
      if (should_fallback == ((v22 & 0x10) == 0) || ((is_weak ^ ((v22 & 0x20) == 0)) & 1) == 0)
      {
        if (should_fallback) {
          char v23 = 16;
        }
        else {
          char v23 = 0;
        }
        char v24 = v22 & 0xCF;
        if (is_weak) {
          char v25 = 32;
        }
        else {
          char v25 = 0;
        }
        BYTE5(v2->flow_in_connected) = v25 | v23 | v24;
        unsigned int fallback_interface_index = nw_path_get_fallback_interface_index((uint64_t)v7[36]);
        if (nw_context_copy_implicit_context::onceToken != -1) {
          dispatch_once(&nw_context_copy_implicit_context::onceToken, &__block_literal_global_18);
        }
        id v27 = (id)nw_context_copy_implicit_context::implicit_context;
        os_log_type_t v28 = nw_path_copy_interface_with_generation(v27, fallback_interface_index, 0);

        if (v28)
        {
          var27 = (void (*)(void **, NWConcrete_nw_interface *, BOOL, uint64_t))v2->parent_definition->extended_state->var27;
          if (var27) {
            var27(v18, v28, should_fallback, v21);
          }
        }
      }
      goto LABEL_41;
    }
    v2->flow_registration = 0;
    uint64_t v38 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_instance_update_available_paths";
    id v39 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(__buf[0]) = 16;
    LOBYTE(v68[0]) = 0;
    if (!__nwlog_fault(v39, __buf, v68)) {
      goto LABEL_70;
    }
    if (LOBYTE(__buf[0]) == 17)
    {
      os_log_type_t v40 = __nwlog_obj();
      os_log_type_t v41 = __buf[0];
      if (os_log_type_enabled(v40, __buf[0]))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_instance_update_available_paths";
        _os_log_impl(&dword_1830D4000, v40, v41, "%{public}s nw_hash_table_create_no_lock failed", buf, 0xCu);
      }
    }
    else if (LOBYTE(v68[0]))
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v40 = __nwlog_obj();
      os_log_type_t v43 = __buf[0];
      BOOL v44 = os_log_type_enabled(v40, __buf[0]);
      if (backtrace_string)
      {
        if (v44)
        {
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_instance_update_available_paths";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v40, v43, "%{public}s nw_hash_table_create_no_lock failed, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_70;
      }
      if (v44)
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_instance_update_available_paths";
        _os_log_impl(&dword_1830D4000, v40, v43, "%{public}s nw_hash_table_create_no_lock failed, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v40 = __nwlog_obj();
      os_log_type_t v46 = __buf[0];
      if (os_log_type_enabled(v40, __buf[0]))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_instance_update_available_paths";
        _os_log_impl(&dword_1830D4000, v40, v46, "%{public}s nw_hash_table_create_no_lock failed, backtrace limit exceeded", buf, 0xCu);
      }
    }

LABEL_70:
    if (v39) {
      free(v39);
    }
  }
LABEL_41:
}

void sub_183416FC8(_Unwind_Exception *a1)
{
  if ((v2 & 1) == 0) {
    nw::release_if_needed<nw_protocol *>((uint64_t *)(v3 - 160));
  }

  _Unwind_Resume(a1);
}

uint64_t nw_path_flow_registration_get_ctl_command(void *a1, void *a2, _DWORD *a3, _DWORD *a4, _DWORD *a5)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = a1;
  xpc_object_t v10 = a2;
  if (a3)
  {
    if (a4)
    {
      char v11 = nw_path_copy_flow_for_registration(v9, v10);
      if (v11 && (*((unsigned char *)v11 + 186) & 2) != 0)
      {
        *a3 = v11[43];
        *a4 = v11[44];
        if (a5) {
          *a5 = v11[45];
        }
        uint64_t v12 = 1;
      }
      else
      {
        uint64_t v12 = 0;
      }

      goto LABEL_10;
    }
    uint64_t v18 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    BOOL v30 = "nw_path_flow_registration_get_ctl_command";
    id v15 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v27 = 0;
    if (__nwlog_fault(v15, &type, &v27))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        xpc_object_t v16 = __nwlog_obj();
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v16, type))
        {
          *(_DWORD *)int buf = 136446210;
          BOOL v30 = "nw_path_flow_registration_get_ctl_command";
          _os_log_impl(&dword_1830D4000, v16, v19, "%{public}s called with null value", buf, 0xCu);
        }
LABEL_42:

        goto LABEL_43;
      }
      if (!v27)
      {
        xpc_object_t v16 = __nwlog_obj();
        os_log_type_t v26 = type;
        if (os_log_type_enabled(v16, type))
        {
          *(_DWORD *)int buf = 136446210;
          BOOL v30 = "nw_path_flow_registration_get_ctl_command";
          _os_log_impl(&dword_1830D4000, v16, v26, "%{public}s called with null value, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_42;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      xpc_object_t v16 = __nwlog_obj();
      os_log_type_t v23 = type;
      BOOL v24 = os_log_type_enabled(v16, type);
      if (!backtrace_string)
      {
        if (v24)
        {
          *(_DWORD *)int buf = 136446210;
          BOOL v30 = "nw_path_flow_registration_get_ctl_command";
          _os_log_impl(&dword_1830D4000, v16, v23, "%{public}s called with null value, no backtrace", buf, 0xCu);
        }
        goto LABEL_42;
      }
      if (v24)
      {
        *(_DWORD *)int buf = 136446466;
        BOOL v30 = "nw_path_flow_registration_get_ctl_command";
        __int16 v31 = 2082;
        char v32 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v16, v23, "%{public}s called with null value, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_30;
    }
  }
  else
  {
    char v14 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    BOOL v30 = "nw_path_flow_registration_get_ctl_command";
    id v15 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v27 = 0;
    if (__nwlog_fault(v15, &type, &v27))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        xpc_object_t v16 = __nwlog_obj();
        os_log_type_t v17 = type;
        if (os_log_type_enabled(v16, type))
        {
          *(_DWORD *)int buf = 136446210;
          BOOL v30 = "nw_path_flow_registration_get_ctl_command";
          _os_log_impl(&dword_1830D4000, v16, v17, "%{public}s called with null code", buf, 0xCu);
        }
        goto LABEL_42;
      }
      if (!v27)
      {
        xpc_object_t v16 = __nwlog_obj();
        os_log_type_t v25 = type;
        if (os_log_type_enabled(v16, type))
        {
          *(_DWORD *)int buf = 136446210;
          BOOL v30 = "nw_path_flow_registration_get_ctl_command";
          _os_log_impl(&dword_1830D4000, v16, v25, "%{public}s called with null code, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_42;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      xpc_object_t v16 = __nwlog_obj();
      os_log_type_t v21 = type;
      BOOL v22 = os_log_type_enabled(v16, type);
      if (!backtrace_string)
      {
        if (v22)
        {
          *(_DWORD *)int buf = 136446210;
          BOOL v30 = "nw_path_flow_registration_get_ctl_command";
          _os_log_impl(&dword_1830D4000, v16, v21, "%{public}s called with null code, no backtrace", buf, 0xCu);
        }
        goto LABEL_42;
      }
      if (v22)
      {
        *(_DWORD *)int buf = 136446466;
        BOOL v30 = "nw_path_flow_registration_get_ctl_command";
        __int16 v31 = 2082;
        char v32 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v16, v21, "%{public}s called with null code, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_30:

      free(backtrace_string);
    }
  }
LABEL_43:
  if (v15) {
    free(v15);
  }
  uint64_t v12 = 0;
LABEL_10:

  return v12;
}

void nw_endpoint_set_alternate_port(void *a1, __int16 a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  uint64_t v4 = v3;
  if (v3)
  {
    *((_WORD *)v3 + 114) = a2;
    goto LABEL_3;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  xpc_object_t v16 = "nw_endpoint_set_alternate_port";
  BOOL v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        xpc_object_t v16 = "nw_endpoint_set_alternate_port";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null endpoint", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          xpc_object_t v16 = "nw_endpoint_set_alternate_port";
          __int16 v17 = 2082;
          uint64_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        xpc_object_t v16 = "nw_endpoint_set_alternate_port";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        xpc_object_t v16 = "nw_endpoint_set_alternate_port";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
LABEL_3:
}

void nw_quic_save_token_on_queue(void *a1, void *a2)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  if (!v3)
  {
    uint64_t v9 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    char v36 = "nw_quic_save_token_on_queue";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v33 = 0;
    if (__nwlog_fault(v10, &type, &v33))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        BOOL v11 = __nwlog_obj();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)int buf = 136446210;
          char v36 = "nw_quic_save_token_on_queue";
          _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s called with null association", buf, 0xCu);
        }
      }
      else if (v33)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        BOOL v11 = __nwlog_obj();
        os_log_type_t v18 = type;
        BOOL v19 = os_log_type_enabled(v11, type);
        if (backtrace_string)
        {
          if (v19)
          {
            *(_DWORD *)int buf = 136446466;
            char v36 = "nw_quic_save_token_on_queue";
            __int16 v37 = 2082;
            uint64_t v38 = (uint64_t)backtrace_string;
            _os_log_impl(&dword_1830D4000, v11, v18, "%{public}s called with null association, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_51;
        }
        if (v19)
        {
          *(_DWORD *)int buf = 136446210;
          char v36 = "nw_quic_save_token_on_queue";
          _os_log_impl(&dword_1830D4000, v11, v18, "%{public}s called with null association, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        BOOL v11 = __nwlog_obj();
        os_log_type_t v27 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)int buf = 136446210;
          char v36 = "nw_quic_save_token_on_queue";
          _os_log_impl(&dword_1830D4000, v11, v27, "%{public}s called with null association, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_51:
    if (v10) {
      free(v10);
    }
    goto LABEL_9;
  }
  if (nw_protocol_copy_quic_connection_definition::onceToken != -1) {
    dispatch_once(&nw_protocol_copy_quic_connection_definition::onceToken, &__block_literal_global_55981);
  }
  id v5 = (id)nw_protocol_copy_quic_connection_definition::quic_definition;
  if (!v5)
  {
    char v13 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    char v36 = "nw_quic_save_token_on_queue";
    char v14 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v33 = 0;
    if (!__nwlog_fault(v14, &type, &v33)) {
      goto LABEL_62;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v15 = __nwlog_obj();
      os_log_type_t v16 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)int buf = 136446210;
        char v36 = "nw_quic_save_token_on_queue";
        _os_log_impl(&dword_1830D4000, v15, v16, "%{public}s called with null definition", buf, 0xCu);
      }
    }
    else if (v33)
    {
      unsigned int v20 = (char *)__nw_create_backtrace_string();
      id v15 = __nwlog_obj();
      os_log_type_t v21 = type;
      BOOL v22 = os_log_type_enabled(v15, type);
      if (v20)
      {
        if (v22)
        {
          *(_DWORD *)int buf = 136446466;
          char v36 = "nw_quic_save_token_on_queue";
          __int16 v37 = 2082;
          uint64_t v38 = (uint64_t)v20;
          _os_log_impl(&dword_1830D4000, v15, v21, "%{public}s called with null definition, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v20);
LABEL_62:
        if (!v14) {
          goto LABEL_8;
        }
LABEL_63:
        free(v14);
        goto LABEL_8;
      }
      if (v22)
      {
        *(_DWORD *)int buf = 136446210;
        char v36 = "nw_quic_save_token_on_queue";
        _os_log_impl(&dword_1830D4000, v15, v21, "%{public}s called with null definition, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v15 = __nwlog_obj();
      os_log_type_t v28 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)int buf = 136446210;
        char v36 = "nw_quic_save_token_on_queue";
        _os_log_impl(&dword_1830D4000, v15, v28, "%{public}s called with null definition, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_61:

    goto LABEL_62;
  }
  uint64_t cached_content_for_protocol = (id *)nw_association_get_cached_content_for_protocol(v3, v5);
  if (cached_content_for_protocol
    || (uint64_t cached_content_for_protocol = (id *)malloc_type_calloc(1uLL, 0x30uLL, 0xEAFB8F1AuLL)) != 0)
  {
    objc_storeStrong(cached_content_for_protocol, a2);
    int64_t int64_with_default = networkd_settings_get_int64_with_default((const char *)nw_setting_quic_failure_cache_seconds, 1800);
    time_t v8 = time(0);
    nw_association_set_cached_content_for_protocol(v3, v5, (uint64_t)cached_content_for_protocol, v8 + int64_with_default);
LABEL_8:

LABEL_9:
    return;
  }
  os_log_type_t v23 = __nwlog_obj();
  os_log_type_enabled(v23, OS_LOG_TYPE_ERROR);
  *(_DWORD *)int buf = 136446722;
  char v36 = "strict_calloc";
  __int16 v37 = 2048;
  uint64_t v38 = 1;
  __int16 v39 = 2048;
  uint64_t v40 = 48;
  BOOL v24 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v24))
  {
    free(v24);
    os_log_type_t v25 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    char v36 = "nw_quic_save_token_on_queue";
    char v14 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v33 = 0;
    if (!__nwlog_fault(v14, &type, &v33)) {
      goto LABEL_62;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v15 = __nwlog_obj();
      os_log_type_t v26 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)int buf = 136446210;
        char v36 = "nw_quic_save_token_on_queue";
        _os_log_impl(&dword_1830D4000, v15, v26, "%{public}s called with null association_cache", buf, 0xCu);
      }
    }
    else if (v33)
    {
      nw_endpoint_t v29 = (char *)__nw_create_backtrace_string();
      id v15 = __nwlog_obj();
      os_log_type_t v30 = type;
      BOOL v31 = os_log_type_enabled(v15, type);
      if (v29)
      {
        if (v31)
        {
          *(_DWORD *)int buf = 136446466;
          char v36 = "nw_quic_save_token_on_queue";
          __int16 v37 = 2082;
          uint64_t v38 = (uint64_t)v29;
          _os_log_impl(&dword_1830D4000, v15, v30, "%{public}s called with null association_cache, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v29);
        if (!v14) {
          goto LABEL_8;
        }
        goto LABEL_63;
      }
      if (v31)
      {
        *(_DWORD *)int buf = 136446210;
        char v36 = "nw_quic_save_token_on_queue";
        _os_log_impl(&dword_1830D4000, v15, v30, "%{public}s called with null association_cache, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v15 = __nwlog_obj();
      os_log_type_t v32 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)int buf = 136446210;
        char v36 = "nw_quic_save_token_on_queue";
        _os_log_impl(&dword_1830D4000, v15, v32, "%{public}s called with null association_cache, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_61;
  }
  __break(1u);
}

void sub_183418078(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL34nw_protocol_demux_get_input_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "__nw_frame_unclaimed_bytes";
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    char v36 = 0;
    if (!__nwlog_fault(v7, type, &v36)) {
      goto LABEL_23;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      time_t v8 = __nwlog_obj();
      os_log_type_t v9 = type[0];
      if (!os_log_type_enabled(v8, type[0])) {
        goto LABEL_23;
      }
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "__nw_frame_unclaimed_bytes";
      os_log_type_t v10 = "%{public}s called with null frame";
    }
    else if (v36)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      time_t v8 = __nwlog_obj();
      os_log_type_t v9 = type[0];
      BOOL v12 = os_log_type_enabled(v8, type[0]);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "__nw_frame_unclaimed_bytes";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null frame, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_23;
      }
      if (!v12)
      {
LABEL_23:
        if (v7) {
          free(v7);
        }
        goto LABEL_25;
      }
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "__nw_frame_unclaimed_bytes";
      os_log_type_t v10 = "%{public}s called with null frame, no backtrace";
    }
    else
    {
      time_t v8 = __nwlog_obj();
      os_log_type_t v9 = type[0];
      if (!os_log_type_enabled(v8, type[0])) {
        goto LABEL_23;
      }
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "__nw_frame_unclaimed_bytes";
      os_log_type_t v10 = "%{public}s called with null frame, backtrace limit exceeded";
    }
    _os_log_impl(&dword_1830D4000, v8, v9, v10, buf, 0xCu);
    goto LABEL_23;
  }
  uint64_t v4 = *(void *)(a2 + 112);
  if (!v4)
  {
LABEL_26:
    uint64_t v6 = 0;
    goto LABEL_27;
  }
  if ((*(_WORD *)(a2 + 204) & 0x100) != 0
    && g_channel_check_validity
    && !g_channel_check_validity(a2, *(void *)(a2 + 88)))
  {
LABEL_25:
    LODWORD(v4) = 0;
    goto LABEL_26;
  }
  LODWORD(v4) = *(_DWORD *)(a2 + 52);
  uint64_t v5 = *(unsigned int *)(a2 + 56);
  if (v4) {
    LODWORD(v4) = v4 - (v5 + *(_DWORD *)(a2 + 60));
  }
  uint64_t v6 = *(void *)(a2 + 112) + v5;
LABEL_27:
  char v14 = (void *)(a2 + 32);
  uint64_t v13 = *(void *)(a2 + 32);
  if (v13)
  {
    *(void *)(v13 + 40) = *(void *)(a2 + 40);
    id v15 = *(void **)(a2 + 40);
  }
  else
  {
    id v15 = *(void **)(a2 + 40);
    *(void *)(*(void *)(a1 + 56) + 8) = v15;
  }
  *id v15 = v13;
  void *v14 = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)int buf = 0;
  *(void *)&buf[8] = buf;
  *(void *)&buf[16] = 0x2000000000;
  char v42 = 0;
  uint64_t v16 = *(void *)(a1 + 64);
  __int16 v17 = *(char **)(v16 + 80);
  v29[0] = MEMORY[0x1E4F143A8];
  v29[1] = 0x40000000;
  v29[2] = ___ZL34nw_protocol_demux_get_input_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke_2;
  v29[3] = &unk_1E523E090;
  int v35 = v4;
  uint64_t v31 = v6;
  v29[4] = buf;
  long long v32 = *(_OWORD *)(a1 + 72);
  uint64_t v33 = a2;
  uint64_t v34 = v16;
  long long v30 = *(_OWORD *)(a1 + 32);
  nw_hash_table_apply(v17, (uint64_t)v29);
  if (!*(unsigned char *)(*(void *)&buf[8] + 24))
  {
    if (*(void *)(a1 + 88) == *(void *)(*(void *)(a1 + 96) + 48))
    {
      if (gLogDatapath)
      {
        os_log_type_t v26 = __nwlog_obj();
        if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v27 = *(void *)(a1 + 64);
          if (v27) {
            os_log_type_t v28 = (const char *)(v27 + 90);
          }
          else {
            os_log_type_t v28 = "";
          }
          *(_DWORD *)os_log_type_t type = 136446466;
          uint64_t v38 = "nw_protocol_demux_get_input_frames_block_invoke";
          __int16 v39 = 2080;
          uint64_t v40 = v28;
          _os_log_impl(&dword_1830D4000, v26, OS_LOG_TYPE_DEBUG, "%{public}s %s Received frame for default input handler", (uint8_t *)type, 0x16u);
        }
      }
      uint64_t v20 = *(void *)(a1 + 80);
      *(void *)(a2 + 32) = 0;
      os_log_type_t v21 = *(void **)(v20 + 8);
      *(void *)(a2 + 40) = v21;
      *os_log_type_t v21 = a2;
      *(void *)(v20 + 8) = v14;
      ++*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    }
    else
    {
      if (gLogDatapath)
      {
        os_log_type_t v23 = __nwlog_obj();
        if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v24 = *(void *)(a1 + 64);
          if (v24) {
            os_log_type_t v25 = (const char *)(v24 + 90);
          }
          else {
            os_log_type_t v25 = "";
          }
          *(_DWORD *)os_log_type_t type = 136446466;
          uint64_t v38 = "nw_protocol_demux_get_input_frames_block_invoke";
          __int16 v39 = 2080;
          uint64_t v40 = v25;
          _os_log_impl(&dword_1830D4000, v23, OS_LOG_TYPE_DEBUG, "%{public}s %s Received frame for default input handler, pending", (uint8_t *)type, 0x16u);
        }
      }
      uint64_t v18 = *(void *)(a1 + 64);
      *(void *)(a2 + 32) = 0;
      BOOL v19 = *(void **)(v18 + 72);
      *(void *)(a2 + 40) = v19;
      void *v19 = a2;
      *(void *)(v18 + 72) = v14;
      *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
    }
  }
  _Block_object_dispose(buf, 8);
  return 1;
}

void nw_endpoint_proxy_complete_resolve(NWConcrete_nw_endpoint_handler *a1)
{
  uint64_t v214 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  char v2 = v1;
  if (!v1)
  {
    BOOL v145 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_endpoint_proxy_complete_resolve";
    os_log_type_t v146 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    BOOL v206 = 0;
    if (__nwlog_fault(v146, type, &v206))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        uint64_t v147 = __nwlog_obj();
        os_log_type_t v148 = type[0];
        if (os_log_type_enabled(v147, type[0]))
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_proxy_complete_resolve";
          _os_log_impl(&dword_1830D4000, v147, v148, "%{public}s called with null handler", buf, 0xCu);
        }
      }
      else if (v206)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        uint64_t v147 = __nwlog_obj();
        os_log_type_t v150 = type[0];
        BOOL v151 = os_log_type_enabled(v147, type[0]);
        if (backtrace_string)
        {
          if (v151)
          {
            *(_DWORD *)int buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_endpoint_proxy_complete_resolve";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = backtrace_string;
            _os_log_impl(&dword_1830D4000, v147, v150, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_171;
        }
        if (v151)
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_proxy_complete_resolve";
          _os_log_impl(&dword_1830D4000, v147, v150, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        uint64_t v147 = __nwlog_obj();
        os_log_type_t v160 = type[0];
        if (os_log_type_enabled(v147, type[0]))
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_proxy_complete_resolve";
          _os_log_impl(&dword_1830D4000, v147, v160, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_171:
    if (v146) {
      free(v146);
    }
    char v2 = 0;
    goto LABEL_144;
  }
  id v3 = v1;
  uint64_t mode = v3->mode;

  if (mode == 3)
  {
    unsigned int v192 = v3;
    uint64_t v5 = nw_endpoint_handler_copy_proxy(v3);
    BOOL v206 = 0;
    int v189 = v2;
    BOOL has_unresolved_proxies = nw_endpoint_proxy_has_unresolved_proxies(v3, &v206);
    if (!has_unresolved_proxies)
    {
      v3->event = (nw_endpoint_handler_event_s)262148;
      nw_endpoint_handler_report(v3, 0, &v3->event.domain, 0);
      os_log_type_t v23 = v3;
      BOOL v24 = (*((unsigned char *)v23 + 268) & 0x20) == 0;

      if (!v24) {
        goto LABEL_85;
      }
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      parameters = (id)gconnectionLogObj;
      if (os_log_type_enabled(parameters, OS_LOG_TYPE_DEBUG))
      {
        os_log_type_t v25 = v23;

        os_log_type_t v26 = v25;
        BOOL v27 = (*((unsigned char *)v23 + 268) & 1) == 0;

        if (v27) {
          os_log_type_t v28 = "";
        }
        else {
          os_log_type_t v28 = "dry-run ";
        }
        nw_endpoint_t v29 = nw_endpoint_handler_copy_endpoint(v26);
        logging_description = nw_endpoint_get_logging_description(v29);
        uint64_t v31 = v26;
        long long v32 = v31;
        uint64_t v33 = v31[30];
        if (v33 > 5) {
          uint64_t v34 = "unknown-state";
        }
        else {
          uint64_t v34 = off_1E523FB38[v33];
        }

        char v48 = v32;
        os_log_type_t v49 = v48;
        uint64_t v50 = "path";
        switch(v192->mode)
        {
          case 0:
            break;
          case 1:
            uint64_t v50 = "resolver";
            break;
          case 2:
            uint64_t v50 = nw_endpoint_flow_mode_string(v48[31]);
            break;
          case 3:
            uint64_t v50 = "proxy";
            break;
          case 4:
            uint64_t v50 = "fallback";
            break;
          case 5:
            uint64_t v50 = "transform";
            break;
          default:
            uint64_t v50 = "unknown-mode";
            break;
        }

        nw_endpoint_t v68 = v29;
        char v69 = v34;
        BOOL v70 = logging_description;
        char v71 = v5;
        BOOL v72 = v49;
        os_unfair_lock_lock((os_unfair_lock_t)v72 + 28);
        id v73 = v72[8];
        os_unfair_lock_unlock((os_unfair_lock_t)v72 + 28);

        uint64_t v5 = v71;
        *(_DWORD *)int buf = 136447746;
        *(void *)&uint8_t buf[4] = "nw_endpoint_proxy_complete_resolve";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = v25->id_str;
        *(_WORD *)&unsigned char buf[22] = 2082;
        uint64_t v208 = (uint64_t (*)(uint64_t, uint64_t))v28;
        *(_WORD *)__int16 v209 = 2082;
        *(void *)&v209[2] = v70;
        *(_WORD *)&v209[10] = 2082;
        *(void *)&v209[12] = v69;
        __int16 v210 = 2082;
        os_log_type_t v211 = (void *)v50;
        __int16 v212 = 2114;
        id v213 = v73;
        _os_log_impl(&dword_1830D4000, parameters, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] resolved all proxies", buf, 0x48u);
      }
LABEL_84:

LABEL_85:
      if (!v206)
      {
LABEL_109:
        uint64_t v116 = *((void *)v5 + 1);
        if (v116
          && ((uint64_t v118 = v116 + 16,
               uint64_t v116 = *(void *)(v116 + 16),
               uint64_t v117 = *(void *)(v118 + 8),
               BOOL v119 = v117 == v116,
               LOBYTE(v116) = v117 != v116,
               !v119)
            ? (BOOL v120 = has_unresolved_proxies)
            : (BOOL v120 = 0),
              v120))
        {
          if (nw_endpoint_handler_get_minimize_logging(v192))
          {
            if ((nw_endpoint_handler_get_logging_disabled(v192) & 1) == 0)
            {
              __int16 v168 = v5;
              if (__nwlog_connection_log::onceToken != -1) {
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
              }
              id v169 = (id)gconnectionLogObj;
              if (os_log_type_enabled(v169, OS_LOG_TYPE_DEBUG))
              {
                id_string = nw_endpoint_handler_get_id_string(v192);
                id v171 = nw_endpoint_handler_dry_run_string(v192);
                nw_endpoint_t v172 = nw_endpoint_handler_copy_endpoint(v192);
                BOOL v173 = nw_endpoint_get_logging_description(v172);
                uint64_t v174 = nw_endpoint_handler_state_string(v192);
                os_log_type_t v175 = nw_endpoint_handler_mode_string(v192);
                id v176 = nw_endpoint_handler_copy_current_path(v192);
                *(_DWORD *)int buf = 136447746;
                *(void *)&uint8_t buf[4] = "nw_endpoint_proxy_complete_resolve";
                *(_WORD *)&unsigned char buf[12] = 2082;
                *(void *)&buf[14] = id_string;
                *(_WORD *)&unsigned char buf[22] = 2082;
                uint64_t v208 = (uint64_t (*)(uint64_t, uint64_t))v171;
                *(_WORD *)__int16 v209 = 2082;
                *(void *)&v209[2] = v173;
                *(_WORD *)&v209[10] = 2082;
                *(void *)&v209[12] = v174;
                __int16 v210 = 2082;
                os_log_type_t v211 = (void *)v175;
                __int16 v212 = 2114;
                id v213 = v176;
                _os_log_impl(&dword_1830D4000, v169, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] direct already adding, still waiting for proxy resolution", buf, 0x48u);
              }
              uint64_t v5 = v168;
            }
          }
          else
          {
            id v121 = v192;
            BOOL v122 = (*((unsigned char *)v121 + 268) & 0x20) == 0;

            if (v122)
            {
              if (__nwlog_connection_log::onceToken != -1) {
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
              }
              id v123 = (id)gconnectionLogObj;
              if (os_log_type_enabled(v123, OS_LOG_TYPE_INFO))
              {
                char v124 = v121;

                os_log_type_t v125 = v124;
                BOOL v126 = (*((unsigned char *)v121 + 268) & 1) == 0;

                if (v126) {
                  id v127 = "";
                }
                else {
                  id v127 = "dry-run ";
                }
                nw_endpoint_t v128 = nw_endpoint_handler_copy_endpoint(v125);
                id v129 = nw_endpoint_get_logging_description(v128);
                os_log_type_t v130 = v125;
                __int16 v131 = v130;
                uint64_t v132 = v130[30];
                if (v132 > 5) {
                  __int16 v133 = "unknown-state";
                }
                else {
                  __int16 v133 = off_1E523FB38[v132];
                }

                __int16 v137 = v131;
                id v138 = "path";
                switch(v192->mode)
                {
                  case 0:
                    break;
                  case 1:
                    id v138 = "resolver";
                    break;
                  case 2:
                    id v138 = nw_endpoint_flow_mode_string(v137[31]);
                    break;
                  case 3:
                    id v138 = "proxy";
                    break;
                  case 4:
                    id v138 = "fallback";
                    break;
                  case 5:
                    id v138 = "transform";
                    break;
                  default:
                    id v138 = "unknown-mode";
                    break;
                }
                int v194 = v138;

                uint64_t v139 = v5;
                BOOL v140 = v137;
                os_unfair_lock_lock((os_unfair_lock_t)v140 + 28);
                id v141 = v140[8];
                os_unfair_lock_unlock((os_unfair_lock_t)v140 + 28);

                uint64_t v5 = v139;
                *(_DWORD *)int buf = 136447746;
                *(void *)&uint8_t buf[4] = "nw_endpoint_proxy_complete_resolve";
                *(_WORD *)&unsigned char buf[12] = 2082;
                *(void *)&buf[14] = v124->id_str;
                *(_WORD *)&unsigned char buf[22] = 2082;
                uint64_t v208 = (uint64_t (*)(uint64_t, uint64_t))v127;
                *(_WORD *)__int16 v209 = 2082;
                *(void *)&v209[2] = v129;
                *(_WORD *)&v209[10] = 2082;
                *(void *)&v209[12] = v133;
                __int16 v210 = 2082;
                os_log_type_t v211 = (void *)v194;
                __int16 v212 = 2114;
                id v213 = v141;
                _os_log_impl(&dword_1830D4000, v123, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] direct already adding, still waiting for proxy resolution", buf, 0x48u);
              }
            }
          }
        }
        else
        {
          *(void *)os_log_type_t type = 0;
          os_log_type_t v203 = type;
          uint64_t v204 = 0x2020000000;
          char v205 = 0;
          *(void *)int buf = 0;
          *(void *)&buf[8] = buf;
          *(void *)&buf[16] = 0x3032000000;
          uint64_t v208 = __Block_byref_object_copy__26574;
          *(void *)__int16 v209 = __Block_byref_object_dispose__26575;
          *(void *)&v209[8] = 0;
          os_log_type_t v134 = v5;
          __int16 v135 = (atomic_uchar *)*((void *)v5 + 7);
          v195[0] = MEMORY[0x1E4F143A8];
          v195[1] = 3221225472;
          v195[2] = ___ZL34nw_endpoint_proxy_complete_resolveP30NWConcrete_nw_endpoint_handler_block_invoke_160;
          v195[3] = &unk_1E523E1C0;
          char v199 = v116;
          os_log_type_t v197 = type;
          id v136 = v192;
          uint64_t v196 = v136;
          BOOL v198 = buf;
          BOOL v200 = has_unresolved_proxies;
          nw_array_apply(v135, (uint64_t)v195);
          nw_endpoint_proxy_start_next_child(v136);

          uint64_t v5 = v134;
          _Block_object_dispose(buf, 8);

          _Block_object_dispose(type, 8);
        }
        goto LABEL_143;
      }
      if (nw_endpoint_handler_get_minimize_logging(v192))
      {
        if (nw_endpoint_handler_get_logging_disabled(v192)) {
          goto LABEL_106;
        }
        v152 = v5;
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        nw_endpoint_t v99 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v99, OS_LOG_TYPE_DEBUG))
        {
          os_log_type_t v153 = nw_endpoint_handler_get_id_string(v192);
          BOOL v154 = nw_endpoint_handler_dry_run_string(v192);
          nw_endpoint_t v155 = nw_endpoint_handler_copy_endpoint(v192);
          os_log_type_t v156 = nw_endpoint_get_logging_description(v155);
          uint64_t v157 = nw_endpoint_handler_state_string(v192);
          os_log_type_t v158 = nw_endpoint_handler_mode_string(v192);
          id v159 = nw_endpoint_handler_copy_current_path(v192);
          *(_DWORD *)int buf = 136447746;
          *(void *)&uint8_t buf[4] = "nw_endpoint_proxy_complete_resolve";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v153;
          *(_WORD *)&unsigned char buf[22] = 2082;
          uint64_t v208 = (uint64_t (*)(uint64_t, uint64_t))v154;
          *(_WORD *)__int16 v209 = 2082;
          *(void *)&v209[2] = v156;
          *(_WORD *)&v209[10] = 2082;
          *(void *)&v209[12] = v157;
          __int16 v210 = 2082;
          os_log_type_t v211 = (void *)v158;
          __int16 v212 = 2114;
          id v213 = v159;
          _os_log_impl(&dword_1830D4000, v99, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] no resolved proxies, adding direct attempt", buf, 0x48u);

          uint64_t v5 = v152;
        }
      }
      else
      {
        CFTypeRef v97 = v192;
        BOOL v98 = (*((unsigned char *)v97 + 268) & 0x20) == 0;

        if (!v98)
        {
LABEL_106:
          direct = nw_proxy_config_create_direct();
          if (direct) {
            nw_array_append(*((void *)v5 + 7), direct);
          }

          goto LABEL_109;
        }
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        nw_endpoint_t v99 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v99, OS_LOG_TYPE_DEFAULT))
        {
          id v100 = v97;

          os_log_type_t v101 = v100;
          BOOL v102 = (*((unsigned char *)v97 + 268) & 1) == 0;

          if (v102) {
            id v103 = "";
          }
          else {
            id v103 = "dry-run ";
          }
          nw_endpoint_t v104 = nw_endpoint_handler_copy_endpoint(v101);
          uint64_t v105 = nw_endpoint_get_logging_description(v104);
          nw_endpoint_t v106 = v101;
          int v107 = v106;
          uint64_t v108 = v106[30];
          if (v108 > 5) {
            os_log_type_t v109 = "unknown-state";
          }
          else {
            os_log_type_t v109 = off_1E523FB38[v108];
          }

          id v110 = v107;
          id v111 = "path";
          switch(v192->mode)
          {
            case 0:
              break;
            case 1:
              id v111 = "resolver";
              break;
            case 2:
              id v111 = nw_endpoint_flow_mode_string(v110[31]);
              break;
            case 3:
              id v111 = "proxy";
              break;
            case 4:
              id v111 = "fallback";
              break;
            case 5:
              id v111 = "transform";
              break;
            default:
              id v111 = "unknown-mode";
              break;
          }
          nw_parameters_t parametersa = (nw_parameters_t)v111;

          uint64_t v112 = v5;
          os_log_type_t v113 = v110;
          os_unfair_lock_lock((os_unfair_lock_t)v113 + 28);
          id v114 = v113[8];
          os_unfair_lock_unlock((os_unfair_lock_t)v113 + 28);

          uint64_t v5 = v112;
          *(_DWORD *)int buf = 136447746;
          *(void *)&uint8_t buf[4] = "nw_endpoint_proxy_complete_resolve";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v100->id_str;
          *(_WORD *)&unsigned char buf[22] = 2082;
          uint64_t v208 = (uint64_t (*)(uint64_t, uint64_t))v103;
          *(_WORD *)__int16 v209 = 2082;
          *(void *)&v209[2] = v105;
          *(_WORD *)&v209[10] = 2082;
          *(void *)&v209[12] = v109;
          __int16 v210 = 2082;
          os_log_type_t v211 = parametersa;
          __int16 v212 = 2114;
          id v213 = v114;
          _os_log_impl(&dword_1830D4000, v99, OS_LOG_TYPE_DEFAULT, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] no resolved proxies, adding direct attempt", buf, 0x48u);
        }
      }

      goto LABEL_106;
    }
    uint64_t v6 = v3;
    parameters = v6[4];

    if (nw_parameters_get_prefer_no_proxy(parameters))
    {
      *(void *)os_log_type_t type = 0;
      os_log_type_t v203 = type;
      uint64_t v204 = 0x2020000000;
      char v205 = 0;
      uint64_t v7 = (atomic_uchar *)*((void *)v5 + 7);
      v201[0] = MEMORY[0x1E4F143A8];
      v201[1] = 3221225472;
      v201[2] = ___ZL34nw_endpoint_proxy_complete_resolveP30NWConcrete_nw_endpoint_handler_block_invoke;
      v201[3] = &unk_1E5248058;
      v201[4] = type;
      nw_array_apply(v7, (uint64_t)v201);
      if (!*((unsigned char *)v203 + 24))
      {
        os_log_type_t v51 = v6;
        BOOL v52 = (*((unsigned char *)v51 + 268) & 0x20) == 0;

        if (v52)
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          id v53 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
          {
            os_log_type_t v54 = v51;

            os_log_type_t v55 = v54;
            BOOL v56 = (*((unsigned char *)v51 + 268) & 1) == 0;

            if (v56) {
              uint64_t v57 = "";
            }
            else {
              uint64_t v57 = "dry-run ";
            }
            nw_endpoint_t v58 = nw_endpoint_handler_copy_endpoint(v55);
            int v59 = nw_endpoint_get_logging_description(v58);
            id v60 = v55;
            uint64_t v61 = v60;
            uint64_t v62 = v60[30];
            if (v62 > 5) {
              id v63 = "unknown-state";
            }
            else {
              id v63 = off_1E523FB38[v62];
            }
            unsigned int v187 = v63;

            BOOL v74 = v61;
            char v75 = v74;
            CFStringRef v76 = "path";
            switch(v192->mode)
            {
              case 0:
                break;
              case 1:
                CFStringRef v76 = "resolver";
                break;
              case 2:
                CFStringRef v76 = nw_endpoint_flow_mode_string(v74[31]);
                break;
              case 3:
                CFStringRef v76 = "proxy";
                break;
              case 4:
                CFStringRef v76 = "fallback";
                break;
              case 5:
                CFStringRef v76 = "transform";
                break;
              default:
                CFStringRef v76 = "unknown-mode";
                break;
            }

            os_log_type_t v142 = v5;
            os_log_type_t v143 = v75;
            os_unfair_lock_lock((os_unfair_lock_t)v143 + 28);
            id v144 = v143[8];
            os_unfair_lock_unlock((os_unfair_lock_t)v143 + 28);

            uint64_t v5 = v142;
            *(_DWORD *)int buf = 136447746;
            *(void *)&uint8_t buf[4] = "nw_endpoint_proxy_complete_resolve";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = v54 + 21;
            *(_WORD *)&unsigned char buf[22] = 2082;
            uint64_t v208 = (uint64_t (*)(uint64_t, uint64_t))v57;
            *(_WORD *)__int16 v209 = 2082;
            *(void *)&v209[2] = v59;
            *(_WORD *)&v209[10] = 2082;
            *(void *)&v209[12] = v187;
            __int16 v210 = 2082;
            os_log_type_t v211 = (void *)v76;
            __int16 v212 = 2114;
            id v213 = v144;
            _os_log_impl(&dword_1830D4000, v53, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] unresolved proxies and prefer no proxy, but no direct config found", buf, 0x48u);
          }
        }
        _Block_object_dispose(type, 8);

        goto LABEL_143;
      }
      if (nw_endpoint_handler_get_minimize_logging(v6))
      {
        os_log_type_t v177 = v6;
        if (nw_endpoint_handler_get_logging_disabled(v6)) {
          goto LABEL_83;
        }
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        os_log_type_t v10 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
        {
          BOOL v178 = nw_endpoint_handler_get_id_string(v177);
          os_log_type_t v179 = nw_endpoint_handler_dry_run_string(v177);
          nw_endpoint_t v180 = nw_endpoint_handler_copy_endpoint(v177);
          os_log_type_t v181 = nw_endpoint_get_logging_description(v180);
          BOOL v182 = nw_endpoint_handler_state_string(v177);
          int v183 = nw_endpoint_handler_mode_string(v177);
          id v184 = nw_endpoint_handler_copy_current_path(v177);
          *(_DWORD *)int buf = 136447746;
          *(void *)&uint8_t buf[4] = "nw_endpoint_proxy_complete_resolve";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v178;
          *(_WORD *)&unsigned char buf[22] = 2082;
          uint64_t v208 = (uint64_t (*)(uint64_t, uint64_t))v179;
          *(_WORD *)__int16 v209 = 2082;
          *(void *)&v209[2] = v181;
          *(_WORD *)&v209[10] = 2082;
          *(void *)&v209[12] = v182;
          __int16 v210 = 2082;
          os_log_type_t v211 = (void *)v183;
          __int16 v212 = 2114;
          id v213 = v184;
          _os_log_impl(&dword_1830D4000, v10, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] unresolved proxies, but will add direct due to prefer no proxy", buf, 0x48u);
        }
      }
      else
      {
        time_t v8 = v6;
        BOOL v9 = (*((unsigned char *)v8 + 268) & 0x20) == 0;

        if (!v9)
        {
LABEL_83:
          _Block_object_dispose(type, 8);
          goto LABEL_84;
        }
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        os_log_type_t v10 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
        {
          BOOL v11 = v8;

          BOOL v12 = v11;
          BOOL v13 = (*((unsigned char *)v8 + 268) & 1) == 0;

          if (v13) {
            char v14 = "";
          }
          else {
            char v14 = "dry-run ";
          }
          nw_endpoint_t v15 = nw_endpoint_handler_copy_endpoint(v12);
          uint64_t v16 = nw_endpoint_get_logging_description(v15);
          __int16 v17 = v12;
          uint64_t v18 = v17;
          uint64_t v19 = v17[30];
          if (v19 > 5) {
            uint64_t v20 = "unknown-state";
          }
          else {
            uint64_t v20 = off_1E523FB38[v19];
          }

          uint64_t v66 = v18;
          uint64_t v67 = "path";
          switch(v3->mode)
          {
            case 0:
              break;
            case 1:
              uint64_t v67 = "resolver";
              break;
            case 2:
              uint64_t v67 = nw_endpoint_flow_mode_string(v66[31]);
              break;
            case 3:
              uint64_t v67 = "proxy";
              break;
            case 4:
              uint64_t v67 = "fallback";
              break;
            case 5:
              uint64_t v67 = "transform";
              break;
            default:
              uint64_t v67 = "unknown-mode";
              break;
          }
          unsigned int v185 = v67;

          uint64_t v86 = v66;
          id v87 = (uint64_t (*)(uint64_t, uint64_t))v14;
          uint32_t v88 = v10;
          int64_t v89 = v16;
          nw_endpoint_t v90 = v15;
          int v91 = (id *)v86;
          CFRange v92 = v5;
          BOOL v93 = v86 + 28;
          os_unfair_lock_lock(v86 + 28);
          id v94 = v91[8];
          os_log_type_t v95 = v93;
          uint64_t v5 = v92;
          os_unfair_lock_unlock(v95);

          os_log_type_t v96 = v89;
          os_log_type_t v10 = v88;
          *(_DWORD *)int buf = 136447746;
          *(void *)&uint8_t buf[4] = "nw_endpoint_proxy_complete_resolve";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v11 + 21;
          *(_WORD *)&unsigned char buf[22] = 2082;
          uint64_t v208 = v87;
          *(_WORD *)__int16 v209 = 2082;
          *(void *)&v209[2] = v96;
          *(_WORD *)&v209[10] = 2082;
          *(void *)&v209[12] = v20;
          __int16 v210 = 2082;
          os_log_type_t v211 = (void *)v185;
          __int16 v212 = 2114;
          id v213 = v94;
          _os_log_impl(&dword_1830D4000, v88, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] unresolved proxies, but will add direct due to prefer no proxy", buf, 0x48u);
        }
      }

      goto LABEL_83;
    }
    if (nw_endpoint_handler_get_minimize_logging(v6))
    {
      os_log_type_t v161 = v6;
      if (nw_endpoint_handler_get_logging_disabled(v6)) {
        goto LABEL_75;
      }
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      __int16 v37 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
      {
        unsigned int v188 = nw_endpoint_handler_get_id_string(v6);
        os_log_type_t v162 = nw_endpoint_handler_dry_run_string(v6);
        nw_endpoint_t v163 = nw_endpoint_handler_copy_endpoint(v6);
        __int16 v164 = nw_endpoint_get_logging_description(v163);
        BOOL v165 = nw_endpoint_handler_state_string(v161);
        os_log_type_t v166 = nw_endpoint_handler_mode_string(v161);
        id v167 = nw_endpoint_handler_copy_current_path(v161);
        *(_DWORD *)int buf = 136447746;
        *(void *)&uint8_t buf[4] = "nw_endpoint_proxy_complete_resolve";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = v188;
        *(_WORD *)&unsigned char buf[22] = 2082;
        uint64_t v208 = (uint64_t (*)(uint64_t, uint64_t))v162;
        *(_WORD *)__int16 v209 = 2082;
        *(void *)&v209[2] = v164;
        *(_WORD *)&v209[10] = 2082;
        *(void *)&v209[12] = v165;
        __int16 v210 = 2082;
        os_log_type_t v211 = (void *)v166;
        __int16 v212 = 2114;
        id v213 = v167;
        _os_log_impl(&dword_1830D4000, v37, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] unresolved proxies, waiting for resolution", buf, 0x48u);
      }
    }
    else
    {
      int v35 = v6;
      BOOL v36 = (*((unsigned char *)v35 + 268) & 0x20) == 0;

      if (!v36)
      {
LABEL_75:

LABEL_143:
        char v2 = v189;
        goto LABEL_144;
      }
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      __int16 v37 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
      {
        uint64_t v38 = v35;

        __int16 v39 = v38;
        BOOL v40 = (*((unsigned char *)v35 + 268) & 1) == 0;

        if (v40) {
          uint64_t v41 = "";
        }
        else {
          uint64_t v41 = "dry-run ";
        }
        nw_endpoint_t v42 = nw_endpoint_handler_copy_endpoint(v39);
        uint64_t v43 = nw_endpoint_get_logging_description(v42);
        BOOL v44 = v39;
        os_log_type_t v45 = v44;
        uint64_t v46 = v44[30];
        if (v46 > 5) {
          uint64_t v47 = "unknown-state";
        }
        else {
          uint64_t v47 = off_1E523FB38[v46];
        }

        id v64 = v45;
        __int16 v65 = "path";
        switch(v192->mode)
        {
          case 0:
            break;
          case 1:
            __int16 v65 = "resolver";
            break;
          case 2:
            __int16 v65 = nw_endpoint_flow_mode_string(v64[31]);
            break;
          case 3:
            __int16 v65 = "proxy";
            break;
          case 4:
            __int16 v65 = "fallback";
            break;
          case 5:
            __int16 v65 = "transform";
            break;
          default:
            __int16 v65 = "unknown-mode";
            break;
        }
        unsigned int v193 = v65;

        BOOL v77 = v37;
        nw_endpoint_t v78 = v42;
        uint64_t v79 = v47;
        __int16 v80 = v43;
        uint64_t v81 = (uint64_t (*)(uint64_t, uint64_t))v41;
        uint64_t v82 = v5;
        int v83 = v64;
        os_unfair_lock_lock((os_unfair_lock_t)v83 + 28);
        id v84 = v83[8];
        os_unfair_lock_unlock((os_unfair_lock_t)v83 + 28);

        uint64_t v5 = v82;
        nw_endpoint_t v85 = v78;
        __int16 v37 = v77;
        *(_DWORD *)int buf = 136447746;
        *(void *)&uint8_t buf[4] = "nw_endpoint_proxy_complete_resolve";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = v38 + 21;
        *(_WORD *)&unsigned char buf[22] = 2082;
        uint64_t v208 = v81;
        *(_WORD *)__int16 v209 = 2082;
        *(void *)&v209[2] = v80;
        *(_WORD *)&v209[10] = 2082;
        *(void *)&v209[12] = v79;
        __int16 v210 = 2082;
        os_log_type_t v211 = (void *)v193;
        __int16 v212 = 2114;
        id v213 = v84;
        _os_log_impl(&dword_1830D4000, v77, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] unresolved proxies, waiting for resolution", buf, 0x48u);
      }
    }

    goto LABEL_75;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_t v21 = (id)gLogObj;
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    if (mode > 5) {
      BOOL v22 = "unknown-mode";
    }
    else {
      BOOL v22 = off_1E523FB08[mode];
    }
    *(_DWORD *)int buf = 136446722;
    *(void *)&uint8_t buf[4] = "nw_endpoint_proxy_complete_resolve";
    *(_WORD *)&unsigned char buf[12] = 2082;
    *(void *)&buf[14] = v22;
    *(_WORD *)&unsigned char buf[22] = 2082;
    uint64_t v208 = (uint64_t (*)(uint64_t, uint64_t))"proxy";
    _os_log_impl(&dword_1830D4000, v21, OS_LOG_TYPE_DEFAULT, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
  }

LABEL_144:
}

void sub_183419DF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  _Block_object_dispose(&a30, 8);
  _Unwind_Resume(a1);
}

BOOL __nw_socket_protocol_identifier_block_invoke()
{
  unk_1E8F6AD27 = 0;
  unk_1E8F6AD1F = 0;
  byte_1E8F6AD37 = 0;
  unk_1E8F6AD2F = 0;
  strcpy((char *)&nw_socket_protocol_identifier::identifier, "socket");
  qword_1E8F6AD38 = 0x100000003;
  return nw_protocol_register_extended(&nw_socket_protocol_identifier::identifier, (uint64_t)nw_protocol_socket_create);
}

BOOL nw_protocol_data_copy_outbound_subdata(void *a1, void *a2, size_t a3)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = a2;
  uint64_t v7 = v6;
  if (!v6)
  {
    os_log_type_t v23 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    nw_endpoint_t v58 = "nw_protocol_data_copy_outbound_subdata";
    BOOL v24 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type[4] = OS_LOG_TYPE_ERROR;
    type[0] = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v24, &type[4], type))
    {
      if (type[4] == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v25 = __nwlog_obj();
        os_log_type_t v26 = type[4];
        if (os_log_type_enabled(v25, type[4]))
        {
          *(_DWORD *)int buf = 136446210;
          nw_endpoint_t v58 = "nw_protocol_data_copy_outbound_subdata";
          _os_log_impl(&dword_1830D4000, v25, v26, "%{public}s called with null data", buf, 0xCu);
        }
        goto LABEL_80;
      }
      if (type[0] == OS_LOG_TYPE_DEFAULT)
      {
        os_log_type_t v25 = __nwlog_obj();
        os_log_type_t v50 = type[4];
        if (os_log_type_enabled(v25, type[4]))
        {
          *(_DWORD *)int buf = 136446210;
          nw_endpoint_t v58 = "nw_protocol_data_copy_outbound_subdata";
          _os_log_impl(&dword_1830D4000, v25, v50, "%{public}s called with null data, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_80;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v25 = __nwlog_obj();
      os_log_type_t v30 = type[4];
      BOOL v31 = os_log_type_enabled(v25, type[4]);
      if (!backtrace_string)
      {
        if (v31)
        {
          *(_DWORD *)int buf = 136446210;
          nw_endpoint_t v58 = "nw_protocol_data_copy_outbound_subdata";
          _os_log_impl(&dword_1830D4000, v25, v30, "%{public}s called with null data, no backtrace", buf, 0xCu);
        }
        goto LABEL_80;
      }
      if (v31)
      {
        *(_DWORD *)int buf = 136446466;
        nw_endpoint_t v58 = "nw_protocol_data_copy_outbound_subdata";
        __int16 v59 = 2082;
        size_t v60 = (size_t)backtrace_string;
        _os_log_impl(&dword_1830D4000, v25, v30, "%{public}s called with null data, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_56:

      free(backtrace_string);
    }
LABEL_81:
    if (v24) {
      free(v24);
    }
    uint64_t v20 = 0;
    goto LABEL_26;
  }
  if (!*((void *)v5 + 15))
  {
    BOOL v27 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    nw_endpoint_t v58 = "nw_protocol_data_copy_outbound_subdata";
    BOOL v24 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type[4] = OS_LOG_TYPE_ERROR;
    type[0] = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v24, &type[4], type))
    {
      if (type[4] == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v25 = __nwlog_obj();
        os_log_type_t v28 = type[4];
        if (os_log_type_enabled(v25, type[4]))
        {
          *(_DWORD *)int buf = 136446210;
          nw_endpoint_t v58 = "nw_protocol_data_copy_outbound_subdata";
          _os_log_impl(&dword_1830D4000, v25, v28, "%{public}s called with null instance->context", buf, 0xCu);
        }
LABEL_80:

        goto LABEL_81;
      }
      if (type[0] == OS_LOG_TYPE_DEFAULT)
      {
        os_log_type_t v25 = __nwlog_obj();
        os_log_type_t v51 = type[4];
        if (os_log_type_enabled(v25, type[4]))
        {
          *(_DWORD *)int buf = 136446210;
          nw_endpoint_t v58 = "nw_protocol_data_copy_outbound_subdata";
          _os_log_impl(&dword_1830D4000, v25, v51, "%{public}s called with null instance->context, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_80;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v25 = __nwlog_obj();
      os_log_type_t v40 = type[4];
      BOOL v41 = os_log_type_enabled(v25, type[4]);
      if (!backtrace_string)
      {
        if (v41)
        {
          *(_DWORD *)int buf = 136446210;
          nw_endpoint_t v58 = "nw_protocol_data_copy_outbound_subdata";
          _os_log_impl(&dword_1830D4000, v25, v40, "%{public}s called with null instance->context, no backtrace", buf, 0xCu);
        }
        goto LABEL_80;
      }
      if (v41)
      {
        *(_DWORD *)int buf = 136446466;
        nw_endpoint_t v58 = "nw_protocol_data_copy_outbound_subdata";
        __int16 v59 = 2082;
        size_t v60 = (size_t)backtrace_string;
        _os_log_impl(&dword_1830D4000, v25, v40, "%{public}s called with null instance->context, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_56;
    }
    goto LABEL_81;
  }
  time_t v8 = (unsigned int *)v6;
  BOOL v9 = v8;
  if ((v8[51] & 2) != 0)
  {
    *(void *)os_log_type_t type = 0;
    nw_endpoint_t v15 = nw_frame_copy_external_data((uint64_t)v8, &type[4], type);
    uint64_t external = nw_frame_create_external(16, *(_DWORD *)&type[4] + (int)a3, (uint64_t)nw_protocol_outbound_data_finalizer, (uint64_t)v5);
    if (external)
    {
      __int16 v17 = (void *)external;
      nw_frame_set_external_data(external, v15, 0);
      nw_frame_claim((uint64_t)v17, v18, *(int *)&type[4], 0);

LABEL_24:
      uint64_t v20 = v17;
      v20[2] = 0;
      os_log_type_t v21 = (void *)*((void *)v5 + 19);
      v20[3] = v21;
      *os_log_type_t v21 = v20;
      *((void *)v5 + 19) = v20 + 2;
LABEL_25:

LABEL_26:
      return (BOOL)v20;
    }
    long long v32 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    nw_endpoint_t v58 = "nw_protocol_data_copy_outbound_subdata";
    uint64_t v33 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v55 = OS_LOG_TYPE_ERROR;
    char v54 = 0;
    if (!__nwlog_fault(v33, &v55, &v54)) {
      goto LABEL_93;
    }
    if (v55 == OS_LOG_TYPE_FAULT)
    {
      uint64_t v34 = __nwlog_obj();
      os_log_type_t v35 = v55;
      if (os_log_type_enabled(v34, v55))
      {
        *(_DWORD *)int buf = 136446210;
        nw_endpoint_t v58 = "nw_protocol_data_copy_outbound_subdata";
        _os_log_impl(&dword_1830D4000, v34, v35, "%{public}s nw_frame_create_external failed", buf, 0xCu);
      }
    }
    else if (v54)
    {
      nw_endpoint_t v42 = (char *)__nw_create_backtrace_string();
      uint64_t v34 = __nwlog_obj();
      os_log_type_t v43 = v55;
      BOOL v44 = os_log_type_enabled(v34, v55);
      if (v42)
      {
        if (v44)
        {
          *(_DWORD *)int buf = 136446466;
          nw_endpoint_t v58 = "nw_protocol_data_copy_outbound_subdata";
          __int16 v59 = 2082;
          size_t v60 = (size_t)v42;
          _os_log_impl(&dword_1830D4000, v34, v43, "%{public}s nw_frame_create_external failed, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v42);
        goto LABEL_93;
      }
      if (v44)
      {
        *(_DWORD *)int buf = 136446210;
        nw_endpoint_t v58 = "nw_protocol_data_copy_outbound_subdata";
        _os_log_impl(&dword_1830D4000, v34, v43, "%{public}s nw_frame_create_external failed, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v34 = __nwlog_obj();
      os_log_type_t v52 = v55;
      if (os_log_type_enabled(v34, v55))
      {
        *(_DWORD *)int buf = 136446210;
        nw_endpoint_t v58 = "nw_protocol_data_copy_outbound_subdata";
        _os_log_impl(&dword_1830D4000, v34, v52, "%{public}s nw_frame_create_external failed, backtrace limit exceeded", buf, 0xCu);
      }
    }

LABEL_93:
    if (v33) {
      free(v33);
    }

    goto LABEL_101;
  }
  uint64_t v10 = *((void *)v8 + 14);
  if (!v10) {
    goto LABEL_17;
  }
  if ((v8[51] & 0x100) != 0 && g_channel_check_validity)
  {
    if (g_channel_check_validity(v8, *((void *)v8 + 11)))
    {
      uint64_t v10 = *((void *)v9 + 14);
      goto LABEL_9;
    }
LABEL_17:
    BOOL v11 = 0;
    if (a3) {
      goto LABEL_10;
    }
LABEL_18:
    uint64_t v14 = 0;
    uint64_t v13 = 0;
LABEL_19:
    uint64_t v19 = nw_frame_create(16, v14, a3, (uint64_t)nw_protocol_outbound_data_finalizer, (uint64_t)v5);
    if (v19)
    {
      __int16 v17 = (void *)v19;
      if (v13)
      {
        *(void *)(v19 + 104) = v13;
      }
      else if (v14)
      {
        *(_WORD *)(v19 + 204) |= 1u;
      }
      goto LABEL_24;
    }
    BOOL v36 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    nw_endpoint_t v58 = "nw_protocol_data_copy_outbound_subdata";
    __int16 v37 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type[4] = OS_LOG_TYPE_ERROR;
    type[0] = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v37, &type[4], type)) {
      goto LABEL_99;
    }
    if (type[4] == OS_LOG_TYPE_FAULT)
    {
      uint64_t v38 = __nwlog_obj();
      os_log_type_t v39 = type[4];
      if (os_log_type_enabled(v38, type[4]))
      {
        *(_DWORD *)int buf = 136446210;
        nw_endpoint_t v58 = "nw_protocol_data_copy_outbound_subdata";
        _os_log_impl(&dword_1830D4000, v38, v39, "%{public}s nw_frame_create failed", buf, 0xCu);
      }
    }
    else if (type[0])
    {
      os_log_type_t v45 = (char *)__nw_create_backtrace_string();
      uint64_t v38 = __nwlog_obj();
      os_log_type_t v46 = type[4];
      BOOL v47 = os_log_type_enabled(v38, type[4]);
      if (v45)
      {
        if (v47)
        {
          *(_DWORD *)int buf = 136446466;
          nw_endpoint_t v58 = "nw_protocol_data_copy_outbound_subdata";
          __int16 v59 = 2082;
          size_t v60 = (size_t)v45;
          _os_log_impl(&dword_1830D4000, v38, v46, "%{public}s nw_frame_create failed, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v45);
        goto LABEL_99;
      }
      if (v47)
      {
        *(_DWORD *)int buf = 136446210;
        nw_endpoint_t v58 = "nw_protocol_data_copy_outbound_subdata";
        _os_log_impl(&dword_1830D4000, v38, v46, "%{public}s nw_frame_create failed, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v38 = __nwlog_obj();
      os_log_type_t v53 = type[4];
      if (os_log_type_enabled(v38, type[4]))
      {
        *(_DWORD *)int buf = 136446210;
        nw_endpoint_t v58 = "nw_protocol_data_copy_outbound_subdata";
        _os_log_impl(&dword_1830D4000, v38, v53, "%{public}s nw_frame_create failed, backtrace limit exceeded", buf, 0xCu);
      }
    }

LABEL_99:
    if (v37) {
      free(v37);
    }
LABEL_101:
    uint64_t v20 = 0;
    goto LABEL_25;
  }
LABEL_9:
  BOOL v11 = (const void *)(v10 + v9[14]);
  if (!a3) {
    goto LABEL_18;
  }
LABEL_10:
  uint64_t buffer_manager_with_context = nw_frame_get_buffer_manager_with_context(*((void **)v5 + 15), a3);
  if (buffer_manager_with_context)
  {
    uint64_t v13 = buffer_manager_with_context;
    uint64_t v14 = nw_mem_buffer_allocate(buffer_manager_with_context);
    if (v14) {
      goto LABEL_14;
    }
  }
  uint64_t v14 = (uint64_t)malloc_type_malloc(a3, 0xF2B69DE5uLL);
  if (v14)
  {
    uint64_t v13 = 0;
LABEL_14:
    memcpy((void *)v14, v11, a3);
    goto LABEL_19;
  }
  char v48 = __nwlog_obj();
  os_log_type_enabled(v48, OS_LOG_TYPE_ERROR);
  *(_DWORD *)int buf = 136446466;
  nw_endpoint_t v58 = "strict_malloc";
  __int16 v59 = 2048;
  size_t v60 = a3;
  os_log_type_t v49 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v49);
  if (!result)
  {
    free(v49);
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    goto LABEL_14;
  }
  __break(1u);
  return result;
}

void sub_18341AAB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_frame_copy_external_data(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v16 = "__nw_frame_get_external_data";
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v13 = 0;
    if (!__nwlog_fault(v7, &type, &v13)) {
      goto LABEL_29;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      time_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (!os_log_type_enabled(v8, type)) {
        goto LABEL_29;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v16 = "__nw_frame_get_external_data";
      uint64_t v10 = "%{public}s called with null frame";
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      time_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)int buf = 136446466;
          uint64_t v16 = "__nw_frame_get_external_data";
          __int16 v17 = 2082;
          uint64_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null frame, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_29;
      }
      if (!v12)
      {
LABEL_29:
        if (v7) {
          free(v7);
        }
        return 0;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v16 = "__nw_frame_get_external_data";
      uint64_t v10 = "%{public}s called with null frame, no backtrace";
    }
    else
    {
      time_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (!os_log_type_enabled(v8, type)) {
        goto LABEL_29;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v16 = "__nw_frame_get_external_data";
      uint64_t v10 = "%{public}s called with null frame, backtrace limit exceeded";
    }
    _os_log_impl(&dword_1830D4000, v8, v9, v10, buf, 0xCu);
    goto LABEL_29;
  }
  if ((*(_WORD *)(a1 + 204) & 2) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v3 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136446210;
      uint64_t v16 = "__nw_frame_get_external_data";
      _os_log_impl(&dword_1830D4000, v3, OS_LOG_TYPE_ERROR, "%{public}s Frame does not use external data", buf, 0xCu);
    }
    return 0;
  }
  if (a2) {
    *a2 = *(_DWORD *)(a1 + 56);
  }
  if (a3)
  {
    int v5 = *(_DWORD *)(a1 + 52);
    if (v5) {
      v5 -= *(_DWORD *)(a1 + 56) + *(_DWORD *)(a1 + 60);
    }
    *a3 = v5;
  }
  uint64_t v4 = *(void *)(a1 + 96);
  if (v4) {
    dispatch_retain(*(dispatch_object_t *)(a1 + 96));
  }
  return v4;
}

uint64_t nw_link_get_flow_control_status(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  char v2 = v1;
  if (v1)
  {
    uint64_t v3 = v1[2];
    goto LABEL_3;
  }
  int v5 = __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  uint64_t v16 = "nw_link_get_flow_control_status";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v16 = "nw_link_get_flow_control_status";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null link_info", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          uint64_t v16 = "nw_link_get_flow_control_status";
          __int16 v17 = 2082;
          uint64_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null link_info, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v16 = "nw_link_get_flow_control_status";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null link_info, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v16 = "nw_link_get_flow_control_status";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null link_info, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 1;
LABEL_3:

  return v3;
}

uint64_t nw_http1_on_headers_complete(uint64_t a1)
{
  uint64_t v66 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v55 = "nw_http1_on_headers_complete";
    os_log_type_t v39 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v52 = 0;
    if (!__nwlog_fault(v39, &type, &v52)) {
      goto LABEL_122;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v40 = __nwlog_obj();
      os_log_type_t v41 = type;
      if (!os_log_type_enabled(v40, type)) {
        goto LABEL_122;
      }
      *(_DWORD *)int buf = 136446210;
      os_log_type_t v55 = "nw_http1_on_headers_complete";
      nw_endpoint_t v42 = "%{public}s called with null parser";
      goto LABEL_121;
    }
    if (!v52)
    {
      os_log_type_t v40 = __nwlog_obj();
      os_log_type_t v41 = type;
      if (!os_log_type_enabled(v40, type)) {
        goto LABEL_122;
      }
      *(_DWORD *)int buf = 136446210;
      os_log_type_t v55 = "nw_http1_on_headers_complete";
      nw_endpoint_t v42 = "%{public}s called with null parser, backtrace limit exceeded";
      goto LABEL_121;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v40 = __nwlog_obj();
    os_log_type_t v41 = type;
    BOOL v44 = os_log_type_enabled(v40, type);
    if (!backtrace_string)
    {
      if (!v44) {
        goto LABEL_122;
      }
      *(_DWORD *)int buf = 136446210;
      os_log_type_t v55 = "nw_http1_on_headers_complete";
      nw_endpoint_t v42 = "%{public}s called with null parser, no backtrace";
      goto LABEL_121;
    }
    if (!v44) {
      goto LABEL_99;
    }
    *(_DWORD *)int buf = 136446466;
    os_log_type_t v55 = "nw_http1_on_headers_complete";
    __int16 v56 = 2082;
    uint64_t v57 = backtrace_string;
    os_log_type_t v45 = "%{public}s called with null parser, dumping backtrace:%{public}s";
LABEL_98:
    _os_log_impl(&dword_1830D4000, v40, v41, v45, buf, 0x16u);
    goto LABEL_99;
  }
  uint64_t v1 = *(void *)(a1 + 48);
  if (!v1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v55 = "nw_http1_on_headers_complete";
    os_log_type_t v39 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v52 = 0;
    if (!__nwlog_fault(v39, &type, &v52)) {
      goto LABEL_122;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v40 = __nwlog_obj();
      os_log_type_t v41 = type;
      if (!os_log_type_enabled(v40, type)) {
        goto LABEL_122;
      }
      *(_DWORD *)int buf = 136446210;
      os_log_type_t v55 = "nw_http1_on_headers_complete";
      nw_endpoint_t v42 = "%{public}s called with null http1_connection";
      goto LABEL_121;
    }
    if (!v52)
    {
      os_log_type_t v40 = __nwlog_obj();
      os_log_type_t v41 = type;
      if (!os_log_type_enabled(v40, type)) {
        goto LABEL_122;
      }
      *(_DWORD *)int buf = 136446210;
      os_log_type_t v55 = "nw_http1_on_headers_complete";
      nw_endpoint_t v42 = "%{public}s called with null http1_connection, backtrace limit exceeded";
      goto LABEL_121;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v40 = __nwlog_obj();
    os_log_type_t v41 = type;
    BOOL v46 = os_log_type_enabled(v40, type);
    if (!backtrace_string)
    {
      if (!v46) {
        goto LABEL_122;
      }
      *(_DWORD *)int buf = 136446210;
      os_log_type_t v55 = "nw_http1_on_headers_complete";
      nw_endpoint_t v42 = "%{public}s called with null http1_connection, no backtrace";
      goto LABEL_121;
    }
    if (!v46) {
      goto LABEL_99;
    }
    *(_DWORD *)int buf = 136446466;
    os_log_type_t v55 = "nw_http1_on_headers_complete";
    __int16 v56 = 2082;
    uint64_t v57 = backtrace_string;
    os_log_type_t v45 = "%{public}s called with null http1_connection, dumping backtrace:%{public}s";
    goto LABEL_98;
  }
  uint64_t v2 = *(void *)(v1 + 488);
  if (!v2)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v55 = "nw_http1_on_headers_complete";
    os_log_type_t v39 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v52 = 0;
    if (!__nwlog_fault(v39, &type, &v52)) {
      goto LABEL_122;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v40 = __nwlog_obj();
      os_log_type_t v41 = type;
      if (!os_log_type_enabled(v40, type)) {
        goto LABEL_122;
      }
      *(_DWORD *)int buf = 136446210;
      os_log_type_t v55 = "nw_http1_on_headers_complete";
      nw_endpoint_t v42 = "%{public}s called with null http1_stream";
      goto LABEL_121;
    }
    if (!v52)
    {
      os_log_type_t v40 = __nwlog_obj();
      os_log_type_t v41 = type;
      if (!os_log_type_enabled(v40, type)) {
        goto LABEL_122;
      }
      *(_DWORD *)int buf = 136446210;
      os_log_type_t v55 = "nw_http1_on_headers_complete";
      nw_endpoint_t v42 = "%{public}s called with null http1_stream, backtrace limit exceeded";
      goto LABEL_121;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v40 = __nwlog_obj();
    os_log_type_t v41 = type;
    BOOL v47 = os_log_type_enabled(v40, type);
    if (!backtrace_string)
    {
      if (!v47) {
        goto LABEL_122;
      }
      *(_DWORD *)int buf = 136446210;
      os_log_type_t v55 = "nw_http1_on_headers_complete";
      nw_endpoint_t v42 = "%{public}s called with null http1_stream, no backtrace";
      goto LABEL_121;
    }
    if (!v47) {
      goto LABEL_99;
    }
    *(_DWORD *)int buf = 136446466;
    os_log_type_t v55 = "nw_http1_on_headers_complete";
    __int16 v56 = 2082;
    uint64_t v57 = backtrace_string;
    os_log_type_t v45 = "%{public}s called with null http1_stream, dumping backtrace:%{public}s";
    goto LABEL_98;
  }
  uint64_t v3 = *(void **)(v2 + 400);
  if (!v3)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v55 = "nw_http1_on_headers_complete";
    os_log_type_t v39 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v52 = 0;
    if (!__nwlog_fault(v39, &type, &v52)) {
      goto LABEL_122;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v40 = __nwlog_obj();
      os_log_type_t v41 = type;
      if (!os_log_type_enabled(v40, type)) {
        goto LABEL_122;
      }
      *(_DWORD *)int buf = 136446210;
      os_log_type_t v55 = "nw_http1_on_headers_complete";
      nw_endpoint_t v42 = "%{public}s called with null parsed_fields";
      goto LABEL_121;
    }
    if (!v52)
    {
      os_log_type_t v40 = __nwlog_obj();
      os_log_type_t v41 = type;
      if (!os_log_type_enabled(v40, type)) {
        goto LABEL_122;
      }
      *(_DWORD *)int buf = 136446210;
      os_log_type_t v55 = "nw_http1_on_headers_complete";
      nw_endpoint_t v42 = "%{public}s called with null parsed_fields, backtrace limit exceeded";
      goto LABEL_121;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v40 = __nwlog_obj();
    os_log_type_t v41 = type;
    BOOL v48 = os_log_type_enabled(v40, type);
    if (backtrace_string)
    {
      if (v48)
      {
        *(_DWORD *)int buf = 136446466;
        os_log_type_t v55 = "nw_http1_on_headers_complete";
        __int16 v56 = 2082;
        uint64_t v57 = backtrace_string;
        os_log_type_t v45 = "%{public}s called with null parsed_fields, dumping backtrace:%{public}s";
        goto LABEL_98;
      }
LABEL_99:
      free(backtrace_string);
      goto LABEL_122;
    }
    if (!v48) {
      goto LABEL_122;
    }
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v55 = "nw_http1_on_headers_complete";
    nw_endpoint_t v42 = "%{public}s called with null parsed_fields, no backtrace";
LABEL_121:
    _os_log_impl(&dword_1830D4000, v40, v41, v42, buf, 0xCu);
LABEL_122:
    if (v39) {
      free(v39);
    }
    return 0xFFFFFFFFLL;
  }
  if (*(unsigned char *)(a1 + 74) && *(unsigned char *)(a1 + 75))
  {
    __int16 v4 = *(_WORD *)(a1 + 82);
    if ((v4 & 2) == 0) {
      goto LABEL_16;
    }
LABEL_10:
    if (*(unsigned char *)(v1 + 158)) {
      goto LABEL_27;
    }
    goto LABEL_11;
  }
  __int16 v4 = *(_WORD *)(a1 + 82);
  if ((v4 & 1) == 0) {
    goto LABEL_10;
  }
LABEL_16:
  if (*(unsigned char *)(a1 + 72) == 1
    || (int v10 = *(unsigned __int16 *)(a1 + 84), (v10 - 100) < 0x64)
    || v10 == 204
    || v10 == 304
    || (v4 & 0x40) != 0)
  {
    if (*(unsigned char *)(v1 + 158)) {
      goto LABEL_27;
    }
    goto LABEL_26;
  }
  if ((v4 & 0x208) == 0x200) {
    goto LABEL_10;
  }
  if ((v4 & 0x28) != 0)
  {
    if (*(unsigned char *)(v1 + 158)) {
      goto LABEL_27;
    }
LABEL_26:
    if (gLogDatapath)
    {
      int v5 = __nwlog_obj();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v49 = *(void *)(v1 + 488);
        int v50 = *(_DWORD *)(*(void *)(v1 + 480) + 372);
        int v51 = *(_DWORD *)(v1 + 860);
        if (v49) {
          LODWORD(v49) = *(_DWORD *)(v49 + 424);
        }
        *(_DWORD *)int buf = 136447490;
        os_log_type_t v55 = "nw_http1_on_headers_complete";
        __int16 v56 = 2082;
        uint64_t v57 = (char *)(v1 + 74);
        __int16 v58 = 2080;
        __int16 v59 = " ";
        __int16 v60 = 1024;
        int v61 = v50;
        __int16 v62 = 1024;
        int v63 = v51;
        __int16 v64 = 1024;
        int v65 = v49;
        os_log_type_t v9 = "%{public}s %{public}s%s<i%u:c%u:s%u> http (headers) should keep alive";
LABEL_104:
        _os_log_impl(&dword_1830D4000, v5, OS_LOG_TYPE_DEBUG, v9, buf, 0x32u);
        goto LABEL_27;
      }
    }
    goto LABEL_27;
  }
  if (*(unsigned char *)(v1 + 158)) {
    goto LABEL_27;
  }
LABEL_11:
  if (gLogDatapath)
  {
    int v5 = __nwlog_obj();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v6 = *(void *)(v1 + 488);
      int v7 = *(_DWORD *)(*(void *)(v1 + 480) + 372);
      int v8 = *(_DWORD *)(v1 + 860);
      if (v6) {
        LODWORD(v6) = *(_DWORD *)(v6 + 424);
      }
      *(_DWORD *)int buf = 136447490;
      os_log_type_t v55 = "nw_http1_on_headers_complete";
      __int16 v56 = 2082;
      uint64_t v57 = (char *)(v1 + 74);
      __int16 v58 = 2080;
      __int16 v59 = " ";
      __int16 v60 = 1024;
      int v61 = v7;
      __int16 v62 = 1024;
      int v63 = v8;
      __int16 v64 = 1024;
      int v65 = v6;
      os_log_type_t v9 = "%{public}s %{public}s%s<i%u:c%u:s%u> http (headers) should not keep alive";
      goto LABEL_104;
    }
  }
LABEL_27:
  char v11 = *(unsigned char *)(*(void *)(v2 + 248) + 376);
  id v12 = v3;
  if ((v11 & 1) == 0)
  {
    char v13 = (void *)_nw_http_parsed_fields_copy_response();

    if (v13)
    {
      if (*(void *)(v2 + 416))
      {
        id v14 = v13;
        _nw_http_response_set_reason_phrase();

        nw_endpoint_t v15 = *(void **)(v2 + 416);
        if (v15)
        {
          free(v15);
          *(void *)(v2 + 416) = 0;
        }
      }
      metadata_for_response = nw_http_create_metadata_for_response(v13);
      char v17 = *(unsigned char *)(v2 + 376);
      if (v17)
      {
        uint64_t v18 = *(void **)(v2 + 368);
        if (v18)
        {
          os_release(v18);
          char v17 = *(unsigned char *)(v2 + 376);
        }
      }
      *(void *)(v2 + 368) = metadata_for_response;
      *(unsigned char *)(v2 + 376) = v17 | 1;
      id v19 = v13;
      int status_code = _nw_http_response_get_status_code();

      os_release(v19);
      nw_http_metadata_set_version(*(void **)(v2 + 368), 3);
      if ((status_code - 100) <= 0x63 && status_code != 101) {
        goto LABEL_44;
      }
      goto LABEL_43;
    }
    if (*(unsigned char *)(v1 + 158)) {
      return 0xFFFFFFFFLL;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v30 = gLogObj;
    if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR)) {
      return 0xFFFFFFFFLL;
    }
    uint64_t v31 = *(void *)(v1 + 488);
    int v32 = *(_DWORD *)(*(void *)(v1 + 480) + 372);
    int v33 = *(_DWORD *)(v1 + 860);
    if (v31) {
      LODWORD(v31) = *(_DWORD *)(v31 + 424);
    }
    *(_DWORD *)int buf = 136447490;
    os_log_type_t v55 = "nw_http1_on_headers_complete";
    __int16 v56 = 2082;
    uint64_t v57 = (char *)(v1 + 74);
    __int16 v58 = 2080;
    __int16 v59 = " ";
    __int16 v60 = 1024;
    int v61 = v32;
    __int16 v62 = 1024;
    int v63 = v33;
    __int16 v64 = 1024;
    int v65 = v31;
    uint64_t v34 = "%{public}s %{public}s%s<i%u:c%u:s%u> invalid response received";
LABEL_61:
    _os_log_impl(&dword_1830D4000, v30, OS_LOG_TYPE_ERROR, v34, buf, 0x32u);
    return 0xFFFFFFFFLL;
  }
  os_log_type_t v21 = (void *)_nw_http_parsed_fields_copy_request();

  if (!v21)
  {
    if (*(unsigned char *)(v1 + 158)) {
      return 0xFFFFFFFFLL;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v30 = gLogObj;
    if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR)) {
      return 0xFFFFFFFFLL;
    }
    uint64_t v35 = *(void *)(v1 + 488);
    int v36 = *(_DWORD *)(*(void *)(v1 + 480) + 372);
    int v37 = *(_DWORD *)(v1 + 860);
    if (v35) {
      LODWORD(v35) = *(_DWORD *)(v35 + 424);
    }
    *(_DWORD *)int buf = 136447490;
    os_log_type_t v55 = "nw_http1_on_headers_complete";
    __int16 v56 = 2082;
    uint64_t v57 = (char *)(v1 + 74);
    __int16 v58 = 2080;
    __int16 v59 = " ";
    __int16 v60 = 1024;
    int v61 = v36;
    __int16 v62 = 1024;
    int v63 = v37;
    __int16 v64 = 1024;
    int v65 = v35;
    uint64_t v34 = "%{public}s %{public}s%s<i%u:c%u:s%u> invalid request received";
    goto LABEL_61;
  }
  metadata_for_request = nw_http_create_metadata_for_request(v21);
  char v23 = *(unsigned char *)(v2 + 376);
  if (v23)
  {
    BOOL v24 = *(void **)(v2 + 368);
    if (v24)
    {
      os_release(v24);
      char v23 = *(unsigned char *)(v2 + 376);
    }
  }
  *(void *)(v2 + 368) = metadata_for_request;
  *(unsigned char *)(v2 + 376) = v23 | 1;
  os_release(v21);
  nw_http_metadata_set_version(*(void **)(v2 + 368), 3);
LABEL_43:
  *(_WORD *)(v2 + 428) |= 1u;
LABEL_44:
  nw_http_transaction_metadata_set_inbound_message(*(void **)(v2 + 352), *(void **)(v2 + 368));
  if (*(unsigned char *)(*(void *)(v2 + 248) + 376)) {
    return 21;
  }
  os_log_type_t v25 = *(void **)(v2 + 384);
  if (!v25) {
    return 21;
  }
  id v26 = nw_http_metadata_copy_request(v25);
  uint64_t v27 = 21;
  if (v26)
  {
    id v28 = v26;
    int has_method = _nw_http_request_has_method((uint64_t)v28);

    os_release(v28);
    if (has_method) {
      return 1;
    }
    else {
      return 21;
    }
  }
  return v27;
}

uint64_t __swift_instantiateGenericMetadata()
{
  return swift_getGenericMetadata();
}

uint64_t nw_protocol_updated_path(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    int v5 = *(void **)(a1 + 40);
    if (v5 == &nw_protocol_ref_counted_handle)
    {
      uint64_t v6 = *(void *)(a1 + 88);
      if (v6) {
        *(void *)(a1 + 88) = v6 + 1;
      }
    }
    if (a2)
    {
      int v7 = *(void **)(a2 + 40);
      if (v7 == &nw_protocol_ref_counted_handle)
      {
        uint64_t v8 = *(void *)(a2 + 88);
        if (v8) {
          *(void *)(a2 + 88) = v8 + 1;
        }
      }
      if (a3)
      {
        uint64_t v9 = *(void *)(a1 + 24);
        if (v9)
        {
          int v10 = *(uint64_t (**)(uint64_t, uint64_t))(v9 + 168);
          if (v10)
          {
            uint64_t v11 = v10(a1, a2);
            if (v7 == &nw_protocol_ref_counted_handle)
            {
LABEL_13:
              if (*(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
              {
                uint64_t v17 = *(void *)(a2 + 88);
                if (v17)
                {
                  uint64_t v18 = v17 - 1;
                  *(void *)(a2 + 88) = v18;
                  if (!v18)
                  {
                    id v19 = *(void (***)(void))(a2 + 64);
                    if (v19)
                    {
                      *(void *)(a2 + 64) = 0;
                      v19[2](v19);
                      _Block_release(v19);
                    }
                    if (*(unsigned char *)(a2 + 72))
                    {
                      uint64_t v20 = *(const void **)(a2 + 64);
                      if (v20) {
                        _Block_release(v20);
                      }
                    }
                    free((void *)a2);
                  }
                }
              }
            }
LABEL_14:
            if (v5 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
            {
              uint64_t v13 = *(void *)(a1 + 88);
              if (v13)
              {
                uint64_t v14 = v13 - 1;
                *(void *)(a1 + 88) = v14;
                if (!v14)
                {
                  nw_endpoint_t v15 = *(void (***)(void))(a1 + 64);
                  if (v15)
                  {
                    *(void *)(a1 + 64) = 0;
                    v15[2](v15);
                    _Block_release(v15);
                  }
                  if (*(unsigned char *)(a1 + 72))
                  {
                    uint64_t v16 = *(const void **)(a1 + 64);
                    if (v16) {
                      _Block_release(v16);
                    }
                  }
                  free((void *)a1);
                }
              }
            }
            return v11;
          }
        }
        __nwlog_obj();
        os_log_type_t v21 = *(const char **)(a1 + 16);
        *(_DWORD *)int buf = 136446722;
        char v54 = "__nw_protocol_updated_path";
        if (!v21) {
          os_log_type_t v21 = "invalid";
        }
        __int16 v55 = 2082;
        __int16 v56 = (void *)v21;
        __int16 v57 = 2048;
        uint64_t v58 = a1;
        BOOL v22 = (char *)_os_log_send_and_compose_impl();
        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v51 = 0;
        if (__nwlog_fault(v22, &type, &v51))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            char v23 = __nwlog_obj();
            os_log_type_t v24 = type;
            if (!os_log_type_enabled(v23, type)) {
              goto LABEL_107;
            }
            os_log_type_t v25 = *(const char **)(a1 + 16);
            if (!v25) {
              os_log_type_t v25 = "invalid";
            }
            *(_DWORD *)int buf = 136446722;
            char v54 = "__nw_protocol_updated_path";
            __int16 v55 = 2082;
            __int16 v56 = (void *)v25;
            __int16 v57 = 2048;
            uint64_t v58 = a1;
            id v26 = "%{public}s protocol %{public}s (%p) has invalid updated_path callback";
LABEL_84:
            BOOL v48 = v23;
            os_log_type_t v49 = v24;
            uint32_t v50 = 32;
LABEL_106:
            _os_log_impl(&dword_1830D4000, v48, v49, v26, buf, v50);
            goto LABEL_107;
          }
          if (!v51)
          {
            char v23 = __nwlog_obj();
            os_log_type_t v24 = type;
            if (!os_log_type_enabled(v23, type)) {
              goto LABEL_107;
            }
            BOOL v46 = *(const char **)(a1 + 16);
            if (!v46) {
              BOOL v46 = "invalid";
            }
            *(_DWORD *)int buf = 136446722;
            char v54 = "__nw_protocol_updated_path";
            __int16 v55 = 2082;
            __int16 v56 = (void *)v46;
            __int16 v57 = 2048;
            uint64_t v58 = a1;
            id v26 = "%{public}s protocol %{public}s (%p) has invalid updated_path callback, backtrace limit exceeded";
            goto LABEL_84;
          }
          backtrace_string = (char *)__nw_create_backtrace_string();
          char v23 = __nwlog_obj();
          os_log_type_t v24 = type;
          BOOL v38 = os_log_type_enabled(v23, type);
          if (!backtrace_string)
          {
            if (!v38) {
              goto LABEL_107;
            }
            BOOL v47 = *(const char **)(a1 + 16);
            if (!v47) {
              BOOL v47 = "invalid";
            }
            *(_DWORD *)int buf = 136446722;
            char v54 = "__nw_protocol_updated_path";
            __int16 v55 = 2082;
            __int16 v56 = (void *)v47;
            __int16 v57 = 2048;
            uint64_t v58 = a1;
            id v26 = "%{public}s protocol %{public}s (%p) has invalid updated_path callback, no backtrace";
            goto LABEL_84;
          }
          if (v38)
          {
            os_log_type_t v39 = *(const char **)(a1 + 16);
            if (!v39) {
              os_log_type_t v39 = "invalid";
            }
            *(_DWORD *)int buf = 136446978;
            char v54 = "__nw_protocol_updated_path";
            __int16 v55 = 2082;
            __int16 v56 = (void *)v39;
            __int16 v57 = 2048;
            uint64_t v58 = a1;
            __int16 v59 = 2082;
            __int16 v60 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v23, v24, "%{public}s protocol %{public}s (%p) has invalid updated_path callback, dumping backtrace:%{public}s", buf, 0x2Au);
          }
          free(backtrace_string);
        }
LABEL_107:
        if (!v22) {
          goto LABEL_109;
        }
        goto LABEL_108;
      }
      __nwlog_obj();
      *(_DWORD *)int buf = 136446210;
      char v54 = "__nw_protocol_updated_path";
      BOOL v22 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v51 = 0;
      if (!__nwlog_fault(v22, &type, &v51)) {
        goto LABEL_107;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v35 = __nwlog_obj();
        os_log_type_t v36 = type;
        if (!os_log_type_enabled(v35, type)) {
          goto LABEL_107;
        }
        *(_DWORD *)int buf = 136446210;
        char v54 = "__nw_protocol_updated_path";
        id v26 = "%{public}s called with null path";
      }
      else if (v51)
      {
        BOOL v44 = (char *)__nw_create_backtrace_string();
        uint64_t v35 = __nwlog_obj();
        os_log_type_t v36 = type;
        BOOL v45 = os_log_type_enabled(v35, type);
        if (v44)
        {
          if (v45)
          {
            *(_DWORD *)int buf = 136446466;
            char v54 = "__nw_protocol_updated_path";
            __int16 v55 = 2082;
            __int16 v56 = v44;
            _os_log_impl(&dword_1830D4000, v35, v36, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v44);
          if (!v22)
          {
LABEL_109:
            uint64_t v11 = 0;
            if (v7 == &nw_protocol_ref_counted_handle) {
              goto LABEL_13;
            }
            goto LABEL_14;
          }
LABEL_108:
          free(v22);
          goto LABEL_109;
        }
        if (!v45) {
          goto LABEL_107;
        }
        *(_DWORD *)int buf = 136446210;
        char v54 = "__nw_protocol_updated_path";
        id v26 = "%{public}s called with null path, no backtrace";
      }
      else
      {
        uint64_t v35 = __nwlog_obj();
        os_log_type_t v36 = type;
        if (!os_log_type_enabled(v35, type)) {
          goto LABEL_107;
        }
        *(_DWORD *)int buf = 136446210;
        char v54 = "__nw_protocol_updated_path";
        id v26 = "%{public}s called with null path, backtrace limit exceeded";
      }
      BOOL v48 = v35;
      os_log_type_t v49 = v36;
      uint32_t v50 = 12;
      goto LABEL_106;
    }
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    char v54 = "__nw_protocol_updated_path";
    uint64_t v31 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v51 = 0;
    if (__nwlog_fault(v31, &type, &v51))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        int v32 = __nwlog_obj();
        os_log_type_t v33 = type;
        if (os_log_type_enabled(v32, type))
        {
          *(_DWORD *)int buf = 136446210;
          char v54 = "__nw_protocol_updated_path";
          uint64_t v34 = "%{public}s called with null other_protocol";
LABEL_99:
          _os_log_impl(&dword_1830D4000, v32, v33, v34, buf, 0xCu);
        }
      }
      else if (v51)
      {
        nw_endpoint_t v42 = (char *)__nw_create_backtrace_string();
        int v32 = __nwlog_obj();
        os_log_type_t v33 = type;
        BOOL v43 = os_log_type_enabled(v32, type);
        if (v42)
        {
          if (v43)
          {
            *(_DWORD *)int buf = 136446466;
            char v54 = "__nw_protocol_updated_path";
            __int16 v55 = 2082;
            __int16 v56 = v42;
            _os_log_impl(&dword_1830D4000, v32, v33, "%{public}s called with null other_protocol, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v42);
          goto LABEL_100;
        }
        if (v43)
        {
          *(_DWORD *)int buf = 136446210;
          char v54 = "__nw_protocol_updated_path";
          uint64_t v34 = "%{public}s called with null other_protocol, no backtrace";
          goto LABEL_99;
        }
      }
      else
      {
        int v32 = __nwlog_obj();
        os_log_type_t v33 = type;
        if (os_log_type_enabled(v32, type))
        {
          *(_DWORD *)int buf = 136446210;
          char v54 = "__nw_protocol_updated_path";
          uint64_t v34 = "%{public}s called with null other_protocol, backtrace limit exceeded";
          goto LABEL_99;
        }
      }
    }
LABEL_100:
    if (v31) {
      free(v31);
    }
    uint64_t v11 = 0;
    goto LABEL_14;
  }
  __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  char v54 = "__nw_protocol_updated_path";
  uint64_t v27 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v51 = 0;
  if (__nwlog_fault(v27, &type, &v51))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v28 = __nwlog_obj();
      os_log_type_t v29 = type;
      if (os_log_type_enabled(v28, type))
      {
        *(_DWORD *)int buf = 136446210;
        char v54 = "__nw_protocol_updated_path";
        os_log_type_t v30 = "%{public}s called with null protocol";
LABEL_93:
        _os_log_impl(&dword_1830D4000, v28, v29, v30, buf, 0xCu);
      }
    }
    else if (v51)
    {
      os_log_type_t v40 = (char *)__nw_create_backtrace_string();
      id v28 = __nwlog_obj();
      os_log_type_t v29 = type;
      BOOL v41 = os_log_type_enabled(v28, type);
      if (v40)
      {
        if (v41)
        {
          *(_DWORD *)int buf = 136446466;
          char v54 = "__nw_protocol_updated_path";
          __int16 v55 = 2082;
          __int16 v56 = v40;
          _os_log_impl(&dword_1830D4000, v28, v29, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v40);
        goto LABEL_94;
      }
      if (v41)
      {
        *(_DWORD *)int buf = 136446210;
        char v54 = "__nw_protocol_updated_path";
        os_log_type_t v30 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_93;
      }
    }
    else
    {
      id v28 = __nwlog_obj();
      os_log_type_t v29 = type;
      if (os_log_type_enabled(v28, type))
      {
        *(_DWORD *)int buf = 136446210;
        char v54 = "__nw_protocol_updated_path";
        os_log_type_t v30 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_93;
      }
    }
  }
LABEL_94:
  if (v27) {
    free(v27);
  }
  return 0;
}

uint64_t nw_protocol_ipv4_updated_path(nw_protocol *a1, nw_protocol *a2, nw_path *a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v18 = "nw_protocol_ipv4_updated_path";
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v15 = 0;
    if (!__nwlog_fault(v6, &type, &v15)) {
      goto LABEL_45;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_45;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v18 = "nw_protocol_ipv4_updated_path";
      uint64_t v9 = "%{public}s called with null protocol";
LABEL_44:
      _os_log_impl(&dword_1830D4000, v7, v8, v9, buf, 0xCu);
      goto LABEL_45;
    }
    if (!v15)
    {
      int v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v18 = "nw_protocol_ipv4_updated_path";
        uint64_t v9 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_44;
      }
      goto LABEL_45;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    int v7 = __nwlog_obj();
    os_log_type_t v8 = type;
    BOOL v11 = os_log_type_enabled(v7, type);
    if (!backtrace_string)
    {
      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v18 = "nw_protocol_ipv4_updated_path";
        uint64_t v9 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_44;
      }
      goto LABEL_45;
    }
    if (!v11) {
      goto LABEL_31;
    }
    *(_DWORD *)int buf = 136446466;
    uint64_t v18 = "nw_protocol_ipv4_updated_path";
    __int16 v19 = 2082;
    uint64_t v20 = backtrace_string;
    id v12 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_30:
    _os_log_impl(&dword_1830D4000, v7, v8, v12, buf, 0x16u);
    goto LABEL_31;
  }
  if (a1->handle != &nw_protocol_ref_counted_handle)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v18 = "nw_protocol_ipv4_updated_path";
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v15 = 0;
    if (!__nwlog_fault(v6, &type, &v15)) {
      goto LABEL_45;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_45;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v18 = "nw_protocol_ipv4_updated_path";
      uint64_t v9 = "%{public}s called with null ipv4";
      goto LABEL_44;
    }
    if (!v15)
    {
      int v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v18 = "nw_protocol_ipv4_updated_path";
        uint64_t v9 = "%{public}s called with null ipv4, backtrace limit exceeded";
        goto LABEL_44;
      }
      goto LABEL_45;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    int v7 = __nwlog_obj();
    os_log_type_t v8 = type;
    BOOL v13 = os_log_type_enabled(v7, type);
    if (!backtrace_string)
    {
      if (v13)
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v18 = "nw_protocol_ipv4_updated_path";
        uint64_t v9 = "%{public}s called with null ipv4, no backtrace";
        goto LABEL_44;
      }
      goto LABEL_45;
    }
    if (!v13) {
      goto LABEL_31;
    }
    *(_DWORD *)int buf = 136446466;
    uint64_t v18 = "nw_protocol_ipv4_updated_path";
    __int16 v19 = 2082;
    uint64_t v20 = backtrace_string;
    id v12 = "%{public}s called with null ipv4, dumping backtrace:%{public}s";
    goto LABEL_30;
  }
  if (a3)
  {
    LODWORD(a1[3].identifier) = nw_path_get_maximum_packet_size(a3);
    HIDWORD(a1[3].identifier) = nw_path_get_mtu(a3);
    return 1;
  }
  __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  uint64_t v18 = "nw_protocol_ipv4_updated_path";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (!__nwlog_fault(v6, &type, &v15)) {
    goto LABEL_45;
  }
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v15)
    {
      int v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v18 = "nw_protocol_ipv4_updated_path";
        uint64_t v9 = "%{public}s called with null path, backtrace limit exceeded";
        goto LABEL_44;
      }
      goto LABEL_45;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    int v7 = __nwlog_obj();
    os_log_type_t v8 = type;
    BOOL v14 = os_log_type_enabled(v7, type);
    if (!backtrace_string)
    {
      if (v14)
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v18 = "nw_protocol_ipv4_updated_path";
        uint64_t v9 = "%{public}s called with null path, no backtrace";
        goto LABEL_44;
      }
      goto LABEL_45;
    }
    if (v14)
    {
      *(_DWORD *)int buf = 136446466;
      uint64_t v18 = "nw_protocol_ipv4_updated_path";
      __int16 v19 = 2082;
      uint64_t v20 = backtrace_string;
      id v12 = "%{public}s called with null path, dumping backtrace:%{public}s";
      goto LABEL_30;
    }
LABEL_31:
    free(backtrace_string);
    goto LABEL_45;
  }
  int v7 = __nwlog_obj();
  os_log_type_t v8 = type;
  if (os_log_type_enabled(v7, type))
  {
    *(_DWORD *)int buf = 136446210;
    uint64_t v18 = "nw_protocol_ipv4_updated_path";
    uint64_t v9 = "%{public}s called with null path";
    goto LABEL_44;
  }
LABEL_45:
  if (v6) {
    free(v6);
  }
  return 0;
}

uint64_t nw_authentication_challenge_get_ns_protection_space(void *a1)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (!v1)
  {
    uint64_t v20 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v31 = "nw_authentication_challenge_get_ns_protection_space";
    uint64_t v21 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v28 = 0;
    if (__nwlog_fault(v21, &type, &v28))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        BOOL v22 = __nwlog_obj();
        os_log_type_t v23 = type;
        if (os_log_type_enabled(v22, type))
        {
          *(_DWORD *)int buf = 136446210;
          uint64_t v31 = "nw_authentication_challenge_get_ns_protection_space";
          _os_log_impl(&dword_1830D4000, v22, v23, "%{public}s called with null challenge", buf, 0xCu);
        }
      }
      else if (v28)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        BOOL v22 = __nwlog_obj();
        os_log_type_t v25 = type;
        BOOL v26 = os_log_type_enabled(v22, type);
        if (backtrace_string)
        {
          if (v26)
          {
            *(_DWORD *)int buf = 136446466;
            uint64_t v31 = "nw_authentication_challenge_get_ns_protection_space";
            __int16 v32 = 2082;
            os_log_type_t v33 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v22, v25, "%{public}s called with null challenge, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_41;
        }
        if (v26)
        {
          *(_DWORD *)int buf = 136446210;
          uint64_t v31 = "nw_authentication_challenge_get_ns_protection_space";
          _os_log_impl(&dword_1830D4000, v22, v25, "%{public}s called with null challenge, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        BOOL v22 = __nwlog_obj();
        os_log_type_t v27 = type;
        if (os_log_type_enabled(v22, type))
        {
          *(_DWORD *)int buf = 136446210;
          uint64_t v31 = "nw_authentication_challenge_get_ns_protection_space";
          _os_log_impl(&dword_1830D4000, v22, v27, "%{public}s called with null challenge, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_41:
    if (v21) {
      free(v21);
    }
    goto LABEL_4;
  }
  unsigned int v3 = nw_authentication_challenge_get_type(v1) - 1;
  if (v3 > 7 || ((0xBFu >> v3) & 1) == 0)
  {
LABEL_4:
    uint64_t v4 = 0;
    goto LABEL_23;
  }
  int v5 = (void *)nw_authentication_challenge_copy_protection_space(v2);
  uint64_t v6 = v5;
  if (v5)
  {
    int v7 = v5;
    id v8 = v7[1];

    if (v8 && (uint64_t v9 = v8, v10 = [v9 type], v9, v10 == 4))
    {
      uint64_t domain_for_policy = (const char *)nw_endpoint_get_domain_for_policy(v9[14].isa);
      if (!domain_for_policy) {
        uint64_t domain_for_policy = nw_endpoint_get_hostname(v9);
      }
      id v12 = v9;
      [v12 port];

      BOOL v13 = v7;
      char v14 = *((unsigned char *)v13 + 28);

      if (v14)
      {
      }
      else
      {
        url_scheme = (const char *)nw_endpoint_get_url_scheme(v12);
        if (strcasecmp(url_scheme, "https")) {
          strcasecmp(url_scheme, "wss");
        }
      }
      uint64_t v16 = v13;
      id v17 = v16[2];

      if (v17) {
        id v17 = (id)[[NSString alloc] initWithCString:v17 encoding:5];
      }
      [NSString stringWithUTF8String:domain_for_policy];
      uint64_t v18 = (const void *)CFURLProtectionSpaceCreate();
      uint64_t v4 = [objc_alloc(MEMORY[0x1E4F18D98]) _initWithCFURLProtectionSpace:v18];
      if (v18) {
        CFRelease(v18);
      }
    }
    else
    {
      uint64_t v4 = 0;
    }
  }
  else
  {
    uint64_t v4 = 0;
  }

LABEL_23:
  return v4;
}

void sub_18341CF90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_demux_options_add_pattern_data(void *a1, __int16 a2, dispatch_data_t data)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    BOOL v22 = "nw_demux_options_add_pattern_data";
    int v7 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v20 = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (!__nwlog_fault(v7, &v20, &v19)) {
      goto LABEL_47;
    }
    if (v20 != OS_LOG_TYPE_FAULT)
    {
      if (!v19)
      {
        id v8 = __nwlog_obj();
        os_log_type_t v9 = v20;
        if (!os_log_type_enabled(v8, v20)) {
          goto LABEL_47;
        }
        *(_DWORD *)int buf = 136446210;
        BOOL v22 = "nw_demux_options_add_pattern_data";
        int v10 = "%{public}s called with null options, backtrace limit exceeded";
        goto LABEL_46;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v8 = __nwlog_obj();
      os_log_type_t v9 = v20;
      BOOL v12 = os_log_type_enabled(v8, v20);
      if (!backtrace_string)
      {
        if (!v12) {
          goto LABEL_47;
        }
        *(_DWORD *)int buf = 136446210;
        BOOL v22 = "nw_demux_options_add_pattern_data";
        int v10 = "%{public}s called with null options, no backtrace";
        goto LABEL_46;
      }
      if (v12)
      {
        *(_DWORD *)int buf = 136446466;
        BOOL v22 = "nw_demux_options_add_pattern_data";
        __int16 v23 = 2082;
        os_log_type_t v24 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_47;
    }
    id v8 = __nwlog_obj();
    os_log_type_t v9 = v20;
    if (!os_log_type_enabled(v8, v20)) {
      goto LABEL_47;
    }
    *(_DWORD *)int buf = 136446210;
    BOOL v22 = "nw_demux_options_add_pattern_data";
    int v10 = "%{public}s called with null options";
LABEL_46:
    _os_log_impl(&dword_1830D4000, v8, v9, v10, buf, 0xCu);
    goto LABEL_47;
  }
  if (data)
  {
    size_t size = dispatch_data_get_size(data);
    if (size < 0x1F)
    {
      v17[0] = MEMORY[0x1E4F143A8];
      v17[1] = 0x40000000;
      v17[2] = __nw_demux_options_add_pattern_data_block_invoke;
      v17[3] = &__block_descriptor_tmp_11_26236;
      __int16 v18 = a2;
      v17[4] = size;
      v17[5] = data;
      nw_protocol_options_access_handle(a1, v17);
      return;
    }
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    BOOL v22 = "nw_demux_options_add_pattern_data";
    int v7 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v20 = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (__nwlog_fault(v7, &v20, &v19))
    {
      if (v20 == OS_LOG_TYPE_FAULT)
      {
        id v8 = __nwlog_obj();
        os_log_type_t v9 = v20;
        if (!os_log_type_enabled(v8, v20)) {
          goto LABEL_47;
        }
        *(_DWORD *)int buf = 136446210;
        BOOL v22 = "nw_demux_options_add_pattern_data";
        int v10 = "%{public}s called with null (pattern_length <= NW_DEMUX_MAX_PATTERN_LENGTH)";
        goto LABEL_46;
      }
      if (!v19)
      {
        id v8 = __nwlog_obj();
        os_log_type_t v9 = v20;
        if (!os_log_type_enabled(v8, v20)) {
          goto LABEL_47;
        }
        *(_DWORD *)int buf = 136446210;
        BOOL v22 = "nw_demux_options_add_pattern_data";
        int v10 = "%{public}s called with null (pattern_length <= NW_DEMUX_MAX_PATTERN_LENGTH), backtrace limit exceeded";
        goto LABEL_46;
      }
      BOOL v13 = (char *)__nw_create_backtrace_string();
      id v8 = __nwlog_obj();
      os_log_type_t v9 = v20;
      BOOL v16 = os_log_type_enabled(v8, v20);
      if (!v13)
      {
        if (!v16) {
          goto LABEL_47;
        }
        *(_DWORD *)int buf = 136446210;
        BOOL v22 = "nw_demux_options_add_pattern_data";
        int v10 = "%{public}s called with null (pattern_length <= NW_DEMUX_MAX_PATTERN_LENGTH), no backtrace";
        goto LABEL_46;
      }
      if (v16)
      {
        *(_DWORD *)int buf = 136446466;
        BOOL v22 = "nw_demux_options_add_pattern_data";
        __int16 v23 = 2082;
        os_log_type_t v24 = v13;
        char v15 = "%{public}s called with null (pattern_length <= NW_DEMUX_MAX_PATTERN_LENGTH), dumping backtrace:%{public}s";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
LABEL_47:
    if (v7) {
      goto LABEL_48;
    }
    return;
  }
  __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  BOOL v22 = "nw_demux_options_add_pattern_data";
  int v7 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t v20 = OS_LOG_TYPE_ERROR;
  char v19 = 0;
  if (!__nwlog_fault(v7, &v20, &v19)) {
    goto LABEL_47;
  }
  if (v20 == OS_LOG_TYPE_FAULT)
  {
    id v8 = __nwlog_obj();
    os_log_type_t v9 = v20;
    if (!os_log_type_enabled(v8, v20)) {
      goto LABEL_47;
    }
    *(_DWORD *)int buf = 136446210;
    BOOL v22 = "nw_demux_options_add_pattern_data";
    int v10 = "%{public}s called with null pattern";
    goto LABEL_46;
  }
  if (!v19)
  {
    id v8 = __nwlog_obj();
    os_log_type_t v9 = v20;
    if (!os_log_type_enabled(v8, v20)) {
      goto LABEL_47;
    }
    *(_DWORD *)int buf = 136446210;
    BOOL v22 = "nw_demux_options_add_pattern_data";
    int v10 = "%{public}s called with null pattern, backtrace limit exceeded";
    goto LABEL_46;
  }
  BOOL v13 = (char *)__nw_create_backtrace_string();
  id v8 = __nwlog_obj();
  os_log_type_t v9 = v20;
  BOOL v14 = os_log_type_enabled(v8, v20);
  if (!v13)
  {
    if (!v14) {
      goto LABEL_47;
    }
    *(_DWORD *)int buf = 136446210;
    BOOL v22 = "nw_demux_options_add_pattern_data";
    int v10 = "%{public}s called with null pattern, no backtrace";
    goto LABEL_46;
  }
  if (v14)
  {
    *(_DWORD *)int buf = 136446466;
    BOOL v22 = "nw_demux_options_add_pattern_data";
    __int16 v23 = 2082;
    os_log_type_t v24 = v13;
    char v15 = "%{public}s called with null pattern, dumping backtrace:%{public}s";
LABEL_31:
    _os_log_impl(&dword_1830D4000, v8, v9, v15, buf, 0x16u);
  }
LABEL_32:
  free(v13);
  if (v7) {
LABEL_48:
  }
    free(v7);
}

uint64_t nw_protocol_common_supports_external_data(uint64_t a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    id v17 = "nw_protocol_common_supports_external_data";
    id v1 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (!__nwlog_fault(v1, &type, &v14)) {
      goto LABEL_16;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v2 = __nwlog_obj();
      os_log_type_t v3 = type;
      if (!os_log_type_enabled(v2, type)) {
        goto LABEL_16;
      }
      *(_DWORD *)int buf = 136446210;
      id v17 = "nw_protocol_common_supports_external_data";
      uint64_t v4 = "%{public}s called with null protocol";
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v2 = __nwlog_obj();
      os_log_type_t v3 = type;
      BOOL v13 = os_log_type_enabled(v2, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)int buf = 136446466;
          id v17 = "nw_protocol_common_supports_external_data";
          __int16 v18 = 2082;
          char v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v2, v3, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        if (v1) {
          goto LABEL_17;
        }
        return 0;
      }
      if (!v13) {
        goto LABEL_16;
      }
      *(_DWORD *)int buf = 136446210;
      id v17 = "nw_protocol_common_supports_external_data";
      uint64_t v4 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      uint64_t v2 = __nwlog_obj();
      os_log_type_t v3 = type;
      if (!os_log_type_enabled(v2, type)) {
        goto LABEL_16;
      }
      *(_DWORD *)int buf = 136446210;
      id v17 = "nw_protocol_common_supports_external_data";
      uint64_t v4 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
LABEL_14:
    os_log_type_t v9 = v2;
    os_log_type_t v10 = v3;
LABEL_15:
    _os_log_impl(&dword_1830D4000, v9, v10, v4, buf, 0xCu);
    goto LABEL_16;
  }
  if (*(void *)(a1 + 48)) {
    return 0;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)int buf = 136446210;
  id v17 = "nw_protocol_common_supports_external_data";
  id v1 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (!__nwlog_fault(v1, &type, &v14)) {
    goto LABEL_16;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v2 = gLogObj;
    os_log_type_t v3 = type;
    if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
      goto LABEL_16;
    }
    *(_DWORD *)int buf = 136446210;
    id v17 = "nw_protocol_common_supports_external_data";
    uint64_t v4 = "%{public}s supports_external_data requires an input handler";
    goto LABEL_14;
  }
  if (!v14)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v2 = gLogObj;
    os_log_type_t v3 = type;
    if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
      goto LABEL_16;
    }
    *(_DWORD *)int buf = 136446210;
    id v17 = "nw_protocol_common_supports_external_data";
    uint64_t v4 = "%{public}s supports_external_data requires an input handler, backtrace limit exceeded";
    goto LABEL_14;
  }
  int v5 = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  uint64_t v6 = gLogObj;
  os_log_type_t v7 = type;
  BOOL v8 = os_log_type_enabled((os_log_t)gLogObj, type);
  if (v5)
  {
    if (v8)
    {
      *(_DWORD *)int buf = 136446466;
      id v17 = "nw_protocol_common_supports_external_data";
      __int16 v18 = 2082;
      char v19 = v5;
      _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s supports_external_data requires an input handler, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v5);
  }
  else if (v8)
  {
    *(_DWORD *)int buf = 136446210;
    id v17 = "nw_protocol_common_supports_external_data";
    uint64_t v4 = "%{public}s supports_external_data requires an input handler, no backtrace";
    os_log_type_t v9 = v6;
    os_log_type_t v10 = v7;
    goto LABEL_15;
  }
LABEL_16:
  if (v1) {
LABEL_17:
  }
    free(v1);
  return 0;
}

uint64_t nw_protocol_common_unregister_notification(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint32_t v50 = "nw_protocol_common_unregister_notification";
    BOOL v16 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v47 = 0;
    if (!__nwlog_fault(v16, &type, &v47)) {
      goto LABEL_46;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v17 = __nwlog_obj();
      os_log_type_t v18 = type;
      if (!os_log_type_enabled(v17, type)) {
        goto LABEL_46;
      }
      *(_DWORD *)int buf = 136446210;
      uint32_t v50 = "nw_protocol_common_unregister_notification";
      char v19 = "%{public}s called with null protocol";
      goto LABEL_44;
    }
    if (!v47)
    {
      id v17 = __nwlog_obj();
      os_log_type_t v18 = type;
      if (!os_log_type_enabled(v17, type)) {
        goto LABEL_46;
      }
      *(_DWORD *)int buf = 136446210;
      uint32_t v50 = "nw_protocol_common_unregister_notification";
      char v19 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_44;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    id v17 = __nwlog_obj();
    os_log_type_t v18 = type;
    BOOL v41 = os_log_type_enabled(v17, type);
    if (!backtrace_string)
    {
      if (!v41) {
        goto LABEL_46;
      }
      *(_DWORD *)int buf = 136446210;
      uint32_t v50 = "nw_protocol_common_unregister_notification";
      char v19 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_44;
    }
    if (!v41) {
      goto LABEL_92;
    }
    *(_DWORD *)int buf = 136446466;
    uint32_t v50 = "nw_protocol_common_unregister_notification";
    __int16 v51 = 2082;
    char v52 = backtrace_string;
    nw_endpoint_t v42 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
    goto LABEL_91;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint32_t v50 = "nw_protocol_common_unregister_notification";
    BOOL v16 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v47 = 0;
    if (!__nwlog_fault(v16, &type, &v47)) {
      goto LABEL_46;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v17 = __nwlog_obj();
      os_log_type_t v18 = type;
      if (!os_log_type_enabled(v17, type)) {
        goto LABEL_46;
      }
      *(_DWORD *)int buf = 136446210;
      uint32_t v50 = "nw_protocol_common_unregister_notification";
      char v19 = "%{public}s called with null other_protocol";
      goto LABEL_44;
    }
    if (!v47)
    {
      id v17 = __nwlog_obj();
      os_log_type_t v18 = type;
      if (!os_log_type_enabled(v17, type)) {
        goto LABEL_46;
      }
      *(_DWORD *)int buf = 136446210;
      uint32_t v50 = "nw_protocol_common_unregister_notification";
      char v19 = "%{public}s called with null other_protocol, backtrace limit exceeded";
      goto LABEL_44;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    id v17 = __nwlog_obj();
    os_log_type_t v18 = type;
    BOOL v43 = os_log_type_enabled(v17, type);
    if (!backtrace_string)
    {
      if (!v43) {
        goto LABEL_46;
      }
      *(_DWORD *)int buf = 136446210;
      uint32_t v50 = "nw_protocol_common_unregister_notification";
      char v19 = "%{public}s called with null other_protocol, no backtrace";
      goto LABEL_44;
    }
    if (!v43) {
      goto LABEL_92;
    }
    *(_DWORD *)int buf = 136446466;
    uint32_t v50 = "nw_protocol_common_unregister_notification";
    __int16 v51 = 2082;
    char v52 = backtrace_string;
    nw_endpoint_t v42 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
LABEL_91:
    _os_log_impl(&dword_1830D4000, v17, v18, v42, buf, 0x16u);
    goto LABEL_92;
  }
  if (!a3)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint32_t v50 = "nw_protocol_common_unregister_notification";
    BOOL v16 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v47 = 0;
    if (!__nwlog_fault(v16, &type, &v47)) {
      goto LABEL_46;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v17 = __nwlog_obj();
      os_log_type_t v18 = type;
      if (!os_log_type_enabled(v17, type)) {
        goto LABEL_46;
      }
      *(_DWORD *)int buf = 136446210;
      uint32_t v50 = "nw_protocol_common_unregister_notification";
      char v19 = "%{public}s called with null type";
      goto LABEL_44;
    }
    if (!v47)
    {
      id v17 = __nwlog_obj();
      os_log_type_t v18 = type;
      if (!os_log_type_enabled(v17, type)) {
        goto LABEL_46;
      }
      *(_DWORD *)int buf = 136446210;
      uint32_t v50 = "nw_protocol_common_unregister_notification";
      char v19 = "%{public}s called with null type, backtrace limit exceeded";
      goto LABEL_44;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    id v17 = __nwlog_obj();
    os_log_type_t v18 = type;
    BOOL v44 = os_log_type_enabled(v17, type);
    if (!backtrace_string)
    {
      if (!v44) {
        goto LABEL_46;
      }
      *(_DWORD *)int buf = 136446210;
      uint32_t v50 = "nw_protocol_common_unregister_notification";
      char v19 = "%{public}s called with null type, no backtrace";
      goto LABEL_44;
    }
    if (v44)
    {
      *(_DWORD *)int buf = 136446466;
      uint32_t v50 = "nw_protocol_common_unregister_notification";
      __int16 v51 = 2082;
      char v52 = backtrace_string;
      nw_endpoint_t v42 = "%{public}s called with null type, dumping backtrace:%{public}s";
      goto LABEL_91;
    }
LABEL_92:
    free(backtrace_string);
    goto LABEL_46;
  }
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    int v5 = *(void **)(v4 + 40);
    if (v5 == &nw_protocol_ref_counted_handle)
    {
      uint64_t v6 = *(void *)(v4 + 88);
      if (v6) {
        *(void *)(v4 + 88) = v6 + 1;
      }
    }
    os_log_type_t v7 = *(void **)(a2 + 40);
    if (v7 == &nw_protocol_ref_counted_handle)
    {
      uint64_t v8 = *(void *)(a2 + 88);
      if (v8) {
        *(void *)(a2 + 88) = v8 + 1;
      }
    }
    uint64_t v9 = *(void *)(v4 + 24);
    if (v9)
    {
      os_log_type_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(v9 + 152);
      if (v10)
      {
        uint64_t v11 = v10(v4, a2);
        if (v7 != &nw_protocol_ref_counted_handle)
        {
LABEL_15:
          if (v5 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(v4 + 40) == &nw_protocol_ref_counted_handle)
          {
            uint64_t v12 = *(void *)(v4 + 88);
            if (v12)
            {
              uint64_t v13 = v12 - 1;
              *(void *)(v4 + 88) = v13;
              if (!v13)
              {
                char v14 = *(void (***)(void))(v4 + 64);
                if (v14)
                {
                  *(void *)(v4 + 64) = 0;
                  v14[2](v14);
                  _Block_release(v14);
                }
                if (*(unsigned char *)(v4 + 72))
                {
                  char v15 = *(const void **)(v4 + 64);
                  if (v15) {
                    _Block_release(v15);
                  }
                }
                free((void *)v4);
              }
            }
          }
          return v11;
        }
LABEL_14:
        if (*(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
        {
          uint64_t v24 = *(void *)(a2 + 88);
          if (v24)
          {
            uint64_t v25 = v24 - 1;
            *(void *)(a2 + 88) = v25;
            if (!v25)
            {
              BOOL v26 = *(void (***)(void))(a2 + 64);
              if (v26)
              {
                *(void *)(a2 + 64) = 0;
                v26[2](v26);
                _Block_release(v26);
              }
              if (*(unsigned char *)(a2 + 72))
              {
                os_log_type_t v27 = *(const void **)(a2 + 64);
                if (v27) {
                  _Block_release(v27);
                }
              }
              free((void *)a2);
            }
          }
        }
        goto LABEL_15;
      }
    }
    __nwlog_obj();
    uint64_t v31 = *(const char **)(v4 + 16);
    *(_DWORD *)int buf = 136446722;
    uint32_t v50 = "__nw_protocol_unregister_notification";
    if (!v31) {
      uint64_t v31 = "invalid";
    }
    __int16 v51 = 2082;
    char v52 = (void *)v31;
    __int16 v53 = 2048;
    uint64_t v54 = v4;
    __int16 v32 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v47 = 0;
    if (__nwlog_fault(v32, &type, &v47))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v33 = __nwlog_obj();
        os_log_type_t v34 = type;
        if (!os_log_type_enabled(v33, type)) {
          goto LABEL_108;
        }
        uint64_t v35 = *(const char **)(v4 + 16);
        if (!v35) {
          uint64_t v35 = "invalid";
        }
        *(_DWORD *)int buf = 136446722;
        uint32_t v50 = "__nw_protocol_unregister_notification";
        __int16 v51 = 2082;
        char v52 = (void *)v35;
        __int16 v53 = 2048;
        uint64_t v54 = v4;
        os_log_type_t v36 = "%{public}s protocol %{public}s (%p) has invalid unregister_notification callback";
LABEL_107:
        _os_log_impl(&dword_1830D4000, v33, v34, v36, buf, 0x20u);
        goto LABEL_108;
      }
      if (!v47)
      {
        os_log_type_t v33 = __nwlog_obj();
        os_log_type_t v34 = type;
        if (!os_log_type_enabled(v33, type)) {
          goto LABEL_108;
        }
        BOOL v45 = *(const char **)(v4 + 16);
        if (!v45) {
          BOOL v45 = "invalid";
        }
        *(_DWORD *)int buf = 136446722;
        uint32_t v50 = "__nw_protocol_unregister_notification";
        __int16 v51 = 2082;
        char v52 = (void *)v45;
        __int16 v53 = 2048;
        uint64_t v54 = v4;
        os_log_type_t v36 = "%{public}s protocol %{public}s (%p) has invalid unregister_notification callback, backtrace limit exceeded";
        goto LABEL_107;
      }
      int v37 = (char *)__nw_create_backtrace_string();
      os_log_type_t v33 = __nwlog_obj();
      os_log_type_t v34 = type;
      BOOL v38 = os_log_type_enabled(v33, type);
      if (!v37)
      {
        if (!v38) {
          goto LABEL_108;
        }
        BOOL v46 = *(const char **)(v4 + 16);
        if (!v46) {
          BOOL v46 = "invalid";
        }
        *(_DWORD *)int buf = 136446722;
        uint32_t v50 = "__nw_protocol_unregister_notification";
        __int16 v51 = 2082;
        char v52 = (void *)v46;
        __int16 v53 = 2048;
        uint64_t v54 = v4;
        os_log_type_t v36 = "%{public}s protocol %{public}s (%p) has invalid unregister_notification callback, no backtrace";
        goto LABEL_107;
      }
      if (v38)
      {
        os_log_type_t v39 = *(const char **)(v4 + 16);
        if (!v39) {
          os_log_type_t v39 = "invalid";
        }
        *(_DWORD *)int buf = 136446978;
        uint32_t v50 = "__nw_protocol_unregister_notification";
        __int16 v51 = 2082;
        char v52 = (void *)v39;
        __int16 v53 = 2048;
        uint64_t v54 = v4;
        __int16 v55 = 2082;
        __int16 v56 = v37;
        _os_log_impl(&dword_1830D4000, v33, v34, "%{public}s protocol %{public}s (%p) has invalid unregister_notification callback, dumping backtrace:%{public}s", buf, 0x2Au);
      }
      free(v37);
    }
LABEL_108:
    if (v32) {
      free(v32);
    }
    uint64_t v11 = 0;
    if (v7 != &nw_protocol_ref_counted_handle) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)int buf = 136446210;
  uint32_t v50 = "nw_protocol_common_unregister_notification";
  BOOL v16 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v47 = 0;
  if (__nwlog_fault(v16, &type, &v47))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v17 = gLogObj;
      os_log_type_t v18 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint32_t v50 = "nw_protocol_common_unregister_notification";
        char v19 = "%{public}s unregister_notification requires an output handler";
LABEL_44:
        char v28 = v17;
        os_log_type_t v29 = v18;
LABEL_45:
        _os_log_impl(&dword_1830D4000, v28, v29, v19, buf, 0xCu);
      }
    }
    else if (v47)
    {
      uint64_t v20 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v21 = gLogObj;
      os_log_type_t v22 = type;
      BOOL v23 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (v20)
      {
        if (v23)
        {
          *(_DWORD *)int buf = 136446466;
          uint32_t v50 = "nw_protocol_common_unregister_notification";
          __int16 v51 = 2082;
          char v52 = v20;
          _os_log_impl(&dword_1830D4000, v21, v22, "%{public}s unregister_notification requires an output handler, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v20);
        goto LABEL_46;
      }
      if (v23)
      {
        *(_DWORD *)int buf = 136446210;
        uint32_t v50 = "nw_protocol_common_unregister_notification";
        char v19 = "%{public}s unregister_notification requires an output handler, no backtrace";
        char v28 = v21;
        os_log_type_t v29 = v22;
        goto LABEL_45;
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v17 = gLogObj;
      os_log_type_t v18 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint32_t v50 = "nw_protocol_common_unregister_notification";
        char v19 = "%{public}s unregister_notification requires an output handler, backtrace limit exceeded";
        goto LABEL_44;
      }
    }
  }
LABEL_46:
  if (v16) {
    free(v16);
  }
  return 0;
}

uint64_t nw_path_is_listener(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = *((unsigned char *)v1 + 475) & 1;
    goto LABEL_3;
  }
  int v5 = __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  BOOL v16 = "nw_path_is_listener";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v16 = "nw_path_is_listener";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null path", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          BOOL v16 = "nw_path_is_listener";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v16 = "nw_path_is_listener";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v16 = "nw_path_is_listener";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_tls_set_minimum_protocol_version()
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)int buf = 136446210;
  char v14 = "nw_tls_set_minimum_protocol_version";
  uint64_t v0 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (__nwlog_fault(v0, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_14;
      }
      *(_DWORD *)int buf = 136446210;
      char v14 = "nw_tls_set_minimum_protocol_version";
      uint64_t v3 = "%{public}s nw_tls_set_minimum_protocol_version not implemented";
LABEL_12:
      os_log_type_t v8 = v1;
      os_log_type_t v9 = v2;
LABEL_13:
      _os_log_impl(&dword_1830D4000, v8, v9, v3, buf, 0xCu);
      goto LABEL_14;
    }
    if (!v11)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_14;
      }
      *(_DWORD *)int buf = 136446210;
      char v14 = "nw_tls_set_minimum_protocol_version";
      uint64_t v3 = "%{public}s nw_tls_set_minimum_protocol_version not implemented, backtrace limit exceeded";
      goto LABEL_12;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v5 = gLogObj;
    os_log_type_t v6 = type;
    BOOL v7 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (backtrace_string)
    {
      if (v7)
      {
        *(_DWORD *)int buf = 136446466;
        char v14 = "nw_tls_set_minimum_protocol_version";
        __int16 v15 = 2082;
        BOOL v16 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s nw_tls_set_minimum_protocol_version not implemented, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
    }
    else if (v7)
    {
      *(_DWORD *)int buf = 136446210;
      char v14 = "nw_tls_set_minimum_protocol_version";
      uint64_t v3 = "%{public}s nw_tls_set_minimum_protocol_version not implemented, no backtrace";
      os_log_type_t v8 = v5;
      os_log_type_t v9 = v6;
      goto LABEL_13;
    }
  }
LABEL_14:
  if (v0) {
    free(v0);
  }
  return 0;
}

id nw_agent_client_copy_parameters(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = a1;
  os_log_type_t v2 = v1;
  if (v1)
  {
    id v3 = v1[5];
    goto LABEL_3;
  }
  int v5 = __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  BOOL v16 = "nw_agent_client_copy_parameters";
  os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v16 = "nw_agent_client_copy_parameters";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null client", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          BOOL v16 = "nw_agent_client_copy_parameters";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null client, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v16 = "nw_agent_client_copy_parameters";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null client, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v16 = "nw_agent_client_copy_parameters";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null client, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  id v3 = 0;
LABEL_3:

  return v3;
}

void nw_parameters_set_required_netagent_classes(void *a1, void *a2, void *a3)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  int v5 = a1;
  unint64_t v6 = a2;
  unint64_t v7 = a3;
  os_log_type_t v8 = (void *)v7;
  if (!v5)
  {
    BOOL v23 = __nwlog_obj();
    *(_DWORD *)applier = 136446210;
    *(void *)&void applier[4] = "nw_parameters_set_required_netagent_classes";
    uint64_t v24 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v33 = 0;
    if (__nwlog_fault(v24, &type, &v33))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v25 = __nwlog_obj();
        os_log_type_t v26 = type;
        if (os_log_type_enabled(v25, type))
        {
          *(_DWORD *)applier = 136446210;
          *(void *)&void applier[4] = "nw_parameters_set_required_netagent_classes";
          _os_log_impl(&dword_1830D4000, v25, v26, "%{public}s called with null parameters", applier, 0xCu);
        }
      }
      else if (v33)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        uint64_t v25 = __nwlog_obj();
        os_log_type_t v28 = type;
        BOOL v29 = os_log_type_enabled(v25, type);
        if (backtrace_string)
        {
          if (v29)
          {
            *(_DWORD *)applier = 136446466;
            *(void *)&void applier[4] = "nw_parameters_set_required_netagent_classes";
            *(_WORD *)&applier[12] = 2082;
            *(void *)&applier[14] = backtrace_string;
            _os_log_impl(&dword_1830D4000, v25, v28, "%{public}s called with null parameters, dumping backtrace:%{public}s", applier, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_39;
        }
        if (v29)
        {
          *(_DWORD *)applier = 136446210;
          *(void *)&void applier[4] = "nw_parameters_set_required_netagent_classes";
          _os_log_impl(&dword_1830D4000, v25, v28, "%{public}s called with null parameters, no backtrace", applier, 0xCu);
        }
      }
      else
      {
        uint64_t v25 = __nwlog_obj();
        os_log_type_t v32 = type;
        if (os_log_type_enabled(v25, type))
        {
          *(_DWORD *)applier = 136446210;
          *(void *)&void applier[4] = "nw_parameters_set_required_netagent_classes";
          _os_log_impl(&dword_1830D4000, v25, v32, "%{public}s called with null parameters, backtrace limit exceeded", applier, 0xCu);
        }
      }
    }
LABEL_39:
    if (v24) {
      free(v24);
    }
    goto LABEL_20;
  }
  uint64_t v9 = *(void *)(v5[13] + 176);
  if (v9)
  {
LABEL_6:
    BOOL v11 = *(void **)(v9 + 56);
    *(void *)(v9 + 56) = 0;

    uint64_t v12 = *(void *)(v5[13] + 176);
    char v13 = *(void **)(v12 + 64);
    *(void *)(v12 + 64) = 0;

    if (v6)
    {
      Class Class = object_getClass((id)v6);
      if (v8)
      {
        __int16 v15 = (objc_class *)MEMORY[0x1E4F14568];
        if (Class == (Class)MEMORY[0x1E4F14568] && object_getClass(v8) == v15)
        {
          size_t count = xpc_array_get_count((xpc_object_t)v6);
          if (count == xpc_array_get_count(v8))
          {
            if (object_getClass((id)v6) == v15
              && (*(void *)applier = MEMORY[0x1E4F143A8],
                  *(void *)&applier[8] = 0x40000000,
                  *(void *)&applier[16] = __nw_xpc_retain_array_with_validated_types_block_invoke,
                  uint64_t v36 = (uint64_t)&__block_descriptor_tmp_88110,
                  uint64_t v37 = MEMORY[0x1E4F145F0],
                  xpc_array_apply((xpc_object_t)v6, applier)))
            {
              xpc_object_t v17 = xpc_retain((xpc_object_t)v6);
            }
            else
            {
              xpc_object_t v17 = 0;
            }
            uint64_t v18 = *(void *)(v5[13] + 176);
            uint64_t v19 = *(void **)(v18 + 56);
            *(void *)(v18 + 56) = v17;

            if (object_getClass(v8) == v15
              && (*(void *)applier = MEMORY[0x1E4F143A8],
                  *(void *)&applier[8] = 0x40000000,
                  *(void *)&applier[16] = __nw_xpc_retain_array_with_validated_types_block_invoke,
                  uint64_t v36 = (uint64_t)&__block_descriptor_tmp_88110,
                  uint64_t v37 = MEMORY[0x1E4F145F0],
                  xpc_array_apply(v8, applier)))
            {
              xpc_object_t v20 = xpc_retain(v8);
            }
            else
            {
              xpc_object_t v20 = 0;
            }
            uint64_t v21 = *(void *)(v5[13] + 176);
            os_log_type_t v22 = *(void **)(v21 + 64);
            *(void *)(v21 + 64) = v20;
          }
        }
      }
    }
    goto LABEL_20;
  }
  if (!(v6 | v7))
  {
LABEL_20:

    return;
  }
  os_log_type_t v10 = malloc_type_calloc(1uLL, 0x90uLL, 0xEAFB8F1AuLL);
  if (v10)
  {
LABEL_5:
    *(void *)(v5[13] + 176) = v10;
    uint64_t v9 = *(void *)(v5[13] + 176);
    goto LABEL_6;
  }
  os_log_type_t v30 = __nwlog_obj();
  os_log_type_enabled(v30, OS_LOG_TYPE_ERROR);
  *(_DWORD *)applier = 136446722;
  *(void *)&void applier[4] = "strict_calloc";
  *(_WORD *)&applier[12] = 2048;
  *(void *)&applier[14] = 1;
  *(_WORD *)&applier[22] = 2048;
  uint64_t v36 = 144;
  uint64_t v31 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v31))
  {
    free(v31);
    goto LABEL_5;
  }
  __break(1u);
}

void sub_18341F1E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_path_is_per_app_vpn(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = a1;
  os_log_type_t v2 = v1;
  if (v1)
  {
    *(void *)int buf = 0;
    *(void *)&buf[8] = 0;
    BOOL vpn_config_uuid = nw_path_get_vpn_config_uuid(v1, (unsigned __int8 (*)[16])buf, 0, 0, 0);
    goto LABEL_3;
  }
  int v5 = __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_path_is_per_app_vpn";
  unint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      unint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_path_is_per_app_vpn";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null path", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      unint64_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_path_is_per_app_vpn";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_path_is_per_app_vpn";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      unint64_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_path_is_per_app_vpn";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  BOOL vpn_config_uuid = 0;
LABEL_3:

  return vpn_config_uuid;
}

void sub_18341F4B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL __nw_http_metadata_get_path_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  os_log_type_t v2 = *(void **)(a2 + 24);
  if (v2)
  {
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 3221225472;
    v13[2] = __nw_http_metadata_get_path_block_invoke_62;
    v13[3] = &unk_1E5248FD0;
    void v13[4] = *(void *)(a1 + 32);
    id v3 = v2;
    uint64_t v4 = v13;
    _nw_http_request_access_path((uint64_t)v3, v4);

    return v2 != 0;
  }
  unint64_t v6 = __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  xpc_object_t v17 = "nw_http_metadata_get_path_block_invoke";
  unint64_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)int buf = 136446210;
        xpc_object_t v17 = "nw_http_metadata_get_path_block_invoke";
        os_log_type_t v10 = "%{public}s metadata not request";
LABEL_17:
        _os_log_impl(&dword_1830D4000, v8, v9, v10, buf, 0xCu);
      }
    }
    else
    {
      if (v14)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v8 = __nwlog_obj();
        os_log_type_t v9 = type;
        BOOL v12 = os_log_type_enabled(v8, type);
        if (backtrace_string)
        {
          if (v12)
          {
            *(_DWORD *)int buf = 136446466;
            xpc_object_t v17 = "nw_http_metadata_get_path_block_invoke";
            __int16 v18 = 2082;
            uint64_t v19 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s metadata not request, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_19;
        }
        if (!v12) {
          goto LABEL_18;
        }
        *(_DWORD *)int buf = 136446210;
        xpc_object_t v17 = "nw_http_metadata_get_path_block_invoke";
        os_log_type_t v10 = "%{public}s metadata not request, no backtrace";
        goto LABEL_17;
      }
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)int buf = 136446210;
        xpc_object_t v17 = "nw_http_metadata_get_path_block_invoke";
        os_log_type_t v10 = "%{public}s metadata not request, backtrace limit exceeded";
        goto LABEL_17;
      }
    }
LABEL_18:
  }
LABEL_19:
  if (v7) {
    free(v7);
  }
  return v2 != 0;
}

id nw_http_metadata_copy_capsule_data(void *a1)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = a1;
  os_log_type_t v2 = v1;
  if (v1)
  {
    id v3 = nw_protocol_metadata_copy_definition(v1);
    if (nw_protocol_copy_http_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_15_74223);
    }
    BOOL is_equal = nw_protocol_definition_is_equal(v3, (nw_protocol_definition_t)nw_protocol_copy_http_definition_http_definition);

    if (is_equal)
    {
      *(void *)int buf = 0;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x3032000000;
      os_log_type_t v26 = __Block_byref_object_copy__5_73857;
      os_log_type_t v27 = __Block_byref_object_dispose__6_73858;
      id v28 = 0;
      v22[0] = MEMORY[0x1E4F143A8];
      v22[1] = 3221225472;
      v22[2] = __nw_http_metadata_copy_capsule_data_block_invoke;
      v22[3] = &unk_1E5248E90;
      v22[4] = buf;
      uint64_t isa = (uint64_t)v2[4].isa;
      if (isa)
      {
        __nw_http_metadata_copy_capsule_data_block_invoke((uint64_t)v22, isa);
        unint64_t v6 = *(void **)(*(void *)&buf[8] + 40);
      }
      else
      {
        unint64_t v6 = 0;
      }
      id v7 = v6;
      _Block_object_dispose(buf, 8);

      goto LABEL_9;
    }
    char v13 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_metadata_copy_capsule_data";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (__nwlog_fault(v10, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        BOOL v11 = __nwlog_obj();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_metadata_copy_capsule_data";
          _os_log_impl(&dword_1830D4000, v11, v14, "%{public}s metadata must be http", buf, 0xCu);
        }
LABEL_41:

        goto LABEL_42;
      }
      if (!v23)
      {
        BOOL v11 = __nwlog_obj();
        os_log_type_t v21 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_metadata_copy_capsule_data";
          _os_log_impl(&dword_1830D4000, v11, v21, "%{public}s metadata must be http, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v11 = __nwlog_obj();
      os_log_type_t v18 = type;
      BOOL v19 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_metadata_copy_capsule_data";
          _os_log_impl(&dword_1830D4000, v11, v18, "%{public}s metadata must be http, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v19)
      {
        *(_DWORD *)int buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_metadata_copy_capsule_data";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v11, v18, "%{public}s metadata must be http, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_29;
    }
  }
  else
  {
    os_log_type_t v9 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_metadata_copy_capsule_data";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (__nwlog_fault(v10, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        BOOL v11 = __nwlog_obj();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_metadata_copy_capsule_data";
          _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s called with null metadata", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (!v23)
      {
        BOOL v11 = __nwlog_obj();
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_metadata_copy_capsule_data";
          _os_log_impl(&dword_1830D4000, v11, v20, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v11 = __nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_metadata_copy_capsule_data";
          _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v17)
      {
        *(_DWORD *)int buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_metadata_copy_capsule_data";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v11, v16, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_29:

      free(backtrace_string);
    }
  }
LABEL_42:
  if (v10) {
    free(v10);
  }
  id v7 = 0;
LABEL_9:

  return v7;
}

BOOL nw_content_context_get_is_wake_packet(void *a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  os_log_type_t v2 = v1;
  if (v1)
  {
    BOOL v3 = 0;
    if (v1 != &__block_literal_global_10_42276
      && v1 != &__block_literal_global_8_42267
      && v1 != &__block_literal_global_6_42258
      && v1 != &__block_literal_global_42249)
    {
      char v4 = *((unsigned char *)v1 + 118);
      BOOL v3 = v4 < 0;
      *((unsigned char *)v1 + 118) = v4 & 0x7F;
    }
    goto LABEL_7;
  }
  unint64_t v6 = __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  BOOL v17 = "nw_content_context_get_is_wake_packet";
  id v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v17 = "nw_content_context_get_is_wake_packet";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null context", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)int buf = 136446466;
          BOOL v17 = "nw_content_context_get_is_wake_packet";
          __int16 v18 = 2082;
          BOOL v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null context, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_24;
      }
      if (v12)
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v17 = "nw_content_context_get_is_wake_packet";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null context, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v17 = "nw_content_context_get_is_wake_packet";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null context, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_24:
  if (v7) {
    free(v7);
  }
  BOOL v3 = 0;
LABEL_7:

  return v3;
}

void ___ZL56nw_http1_match_idle_connection_with_pending_stream_asyncP19nw_http1_connection_block_invoke(uint64_t a1)
{
  uint64_t v607 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
  if (!v1) {
    return;
  }
  uint64_t v2 = v1;
  p_cache = NWConcrete_nw_resolution_report.cache;
  uint64_t v577 = v1;
  if ((*(unsigned char *)(v1 + 158) & 1) == 0)
  {
    if (gLogDatapath)
    {
      __int16 v253 = __nwlog_obj();
      BOOL v254 = os_log_type_enabled(v253, OS_LOG_TYPE_DEBUG);
      p_cache = NWConcrete_nw_resolution_report.cache;
      uint64_t v2 = v577;
      if (v254)
      {
        int v255 = *(_DWORD *)(v577 + 372);
        *(_DWORD *)int buf = 136446978;
        *(void *)&uint8_t buf[4] = "nw_http1_match_idle_connection_with_pending_stream_async_block_invoke";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = v577 + 74;
        *(_WORD *)&unsigned char buf[22] = 2080;
        uint64_t v605 = (uint64_t)" ";
        *(_WORD *)v606 = 1024;
        *(_DWORD *)&v606[2] = v255;
        _os_log_impl(&dword_1830D4000, v253, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> space opened in connection pool, checking for pending streams", buf, 0x26u);
        p_cache = NWConcrete_nw_resolution_report.cache;
        uint64_t v2 = v577;
      }
    }
  }
  uint64_t v4 = *(void *)(v2 + 248);
  if (v4)
  {
    uint64_t v576 = *(void *)(v2 + 248);
    if ((*(unsigned char *)(v4 + 158) & 1) == 0)
    {
      if (gLogDatapath)
      {
        v372 = __nwlog_obj();
        BOOL v373 = os_log_type_enabled(v372, OS_LOG_TYPE_DEBUG);
        p_cache = NWConcrete_nw_resolution_report.cache;
        uint64_t v2 = v577;
        if (v373)
        {
          uint64_t v374 = v4 + 74;
          uint64_t v375 = *(void *)(v4 + 256);
          int v376 = *(_DWORD *)(*(void *)(v4 + 248) + 372);
          if (v375) {
            LODWORD(v375) = *(_DWORD *)(v375 + 860);
          }
          uint64_t v4 = v576;
          int v377 = *(_DWORD *)(v576 + 424);
          *(_DWORD *)int buf = 136448002;
          *(void *)&uint8_t buf[4] = "nw_http1_get_next_pending_stream";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v374;
          *(_WORD *)&unsigned char buf[22] = 2080;
          uint64_t v605 = (uint64_t)" ";
          *(_WORD *)v606 = 1024;
          *(_DWORD *)&v606[2] = v376;
          *(_WORD *)&v606[6] = 1024;
          *(_DWORD *)&v606[8] = v375;
          *(_WORD *)&v606[12] = 1024;
          *(_DWORD *)&v606[14] = v377;
          *(_WORD *)&v606[18] = 1024;
          *(_DWORD *)&v606[20] = v377;
          *(_WORD *)&v606[24] = 2048;
          *(void *)&v606[26] = v576;
          _os_log_impl(&dword_1830D4000, v372, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> found stream %u (%p)", buf, 0x42u);
          uint64_t v2 = v577;
          p_cache = NWConcrete_nw_resolution_report.cache;
        }
      }
    }
    int v5 = (_OWORD *)(v4 + 64);
    uint64_t v6 = *(void *)(v2 + 208);
    if (v6)
    {
      uint64_t v7 = 0;
      uint64_t v8 = v2 + 74;
      do
      {
        uint64_t v9 = v6;
        uint64_t v6 = *(void *)(v6 + 592);
        if ((*(_WORD *)(v9 + 872) & 0x800) == 0)
        {
          if ((*(unsigned char *)(v2 + 158) & 1) != 0 || !*((unsigned char *)p_cache + 3665))
          {
            uint64_t v7 = v9;
          }
          else
          {
            uint64_t v570 = v8;
            v573 = v5;
            os_log_type_t v10 = __nwlog_obj();
            if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
            {
              int v11 = *(_DWORD *)(v577 + 372);
              *(_DWORD *)int buf = 136447234;
              *(void *)&uint8_t buf[4] = "nw_http1_get_next_idle_connection";
              *(_WORD *)&unsigned char buf[12] = 2082;
              *(void *)&buf[14] = v570;
              *(_WORD *)&unsigned char buf[22] = 2080;
              uint64_t v605 = (uint64_t)" ";
              *(_WORD *)v606 = 1024;
              *(_DWORD *)&v606[2] = v11;
              *(_WORD *)&v606[6] = 2048;
              *(void *)&v606[8] = v9;
              _os_log_impl(&dword_1830D4000, v10, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> found idle connection connection %p", buf, 0x30u);
              uint64_t v8 = v570;
              uint64_t v2 = v577;
              uint64_t v7 = v9;
              int v5 = v573;
              p_cache = (void **)(NWConcrete_nw_resolution_report + 16);
            }
            else
            {
              uint64_t v7 = v9;
              uint64_t v2 = v577;
              int v5 = v573;
              p_cache = (void **)(NWConcrete_nw_resolution_report + 16);
              uint64_t v8 = v570;
            }
          }
        }
      }
      while (v6);
      uint64_t v4 = v576;
      if (v7)
      {
        uint64_t v571 = v8;
        if ((*(unsigned char *)(v7 + 158) & 1) == 0)
        {
          if (*((unsigned char *)p_cache + 3665))
          {
            v387 = v5;
            __int16 v388 = p_cache;
            v389 = __nwlog_obj();
            BOOL v390 = os_log_type_enabled(v389, OS_LOG_TYPE_DEBUG);
            p_cache = v388;
            int v5 = v387;
            uint64_t v2 = v577;
            if (v390)
            {
              uint64_t v391 = *(void *)(v7 + 488);
              int v392 = *(_DWORD *)(*(void *)(v7 + 480) + 372);
              int v393 = *(_DWORD *)(v7 + 860);
              if (v391) {
                LODWORD(v391) = *(_DWORD *)(v391 + 424);
              }
              *(_DWORD *)int buf = 136447746;
              *(void *)&uint8_t buf[4] = "nw_http1_remove_idle_connection";
              *(_WORD *)&unsigned char buf[12] = 2082;
              *(void *)&buf[14] = v7 + 74;
              *(_WORD *)&unsigned char buf[22] = 2080;
              uint64_t v605 = (uint64_t)" ";
              *(_WORD *)v606 = 1024;
              *(_DWORD *)&v606[2] = v392;
              *(_WORD *)&v606[6] = 1024;
              *(_DWORD *)&v606[8] = v393;
              *(_WORD *)&v606[12] = 1024;
              *(_DWORD *)&v606[14] = v391;
              *(_WORD *)&v606[18] = 2048;
              *(void *)&v606[20] = v7;
              _os_log_impl(&dword_1830D4000, v389, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> called for connection %p", buf, 0x3Cu);
              uint64_t v4 = v576;
              uint64_t v2 = v577;
              int v5 = v387;
              p_cache = v388;
            }
          }
        }
        v574 = v5;
        BOOL v12 = (_WORD *)(v7 + 872);
        if (((*(unsigned __int16 *)(v7 + 872) | (*(unsigned __int8 *)(v7 + 874) << 16)) & 0x80000) == 0)
        {
          os_log_type_t v13 = p_cache;
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http1_remove_idle_connection";
          *(_WORD *)&unsigned char buf[12] = 2048;
          *(void *)&buf[14] = v7;
          char v14 = (char *)_os_log_send_and_compose_impl();
          type[0] = OS_LOG_TYPE_ERROR;
          LOBYTE(aBlock) = 0;
          if (__nwlog_fault(v14, type, &aBlock))
          {
            if (type[0] == OS_LOG_TYPE_FAULT)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              __int16 v15 = gLogObj;
              os_log_type_t v16 = type[0];
              if (os_log_type_enabled((os_log_t)gLogObj, type[0]))
              {
                *(_DWORD *)int buf = 136446466;
                *(void *)&uint8_t buf[4] = "nw_http1_remove_idle_connection";
                *(_WORD *)&unsigned char buf[12] = 2048;
                *(void *)&buf[14] = v7;
                BOOL v17 = "%{public}s connection %p not in idle list, cannot remove";
LABEL_150:
                _os_log_impl(&dword_1830D4000, v15, v16, v17, buf, 0x16u);
              }
            }
            else if ((_BYTE)aBlock)
            {
              backtrace_string = (char *)__nw_create_backtrace_string();
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              __int16 v15 = gLogObj;
              os_log_type_t v16 = type[0];
              BOOL v94 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
              if (backtrace_string)
              {
                if (v94)
                {
                  *(_DWORD *)int buf = 136446722;
                  *(void *)&uint8_t buf[4] = "nw_http1_remove_idle_connection";
                  *(_WORD *)&unsigned char buf[12] = 2048;
                  *(void *)&buf[14] = v7;
                  *(_WORD *)&unsigned char buf[22] = 2082;
                  uint64_t v605 = (uint64_t)backtrace_string;
                  _os_log_impl(&dword_1830D4000, v15, v16, "%{public}s connection %p not in idle list, cannot remove, dumping backtrace:%{public}s", buf, 0x20u);
                }
                free(backtrace_string);
                goto LABEL_151;
              }
              if (v94)
              {
                *(_DWORD *)int buf = 136446466;
                *(void *)&uint8_t buf[4] = "nw_http1_remove_idle_connection";
                *(_WORD *)&unsigned char buf[12] = 2048;
                *(void *)&buf[14] = v7;
                BOOL v17 = "%{public}s connection %p not in idle list, cannot remove, no backtrace";
                goto LABEL_150;
              }
            }
            else
            {
              __int16 v15 = __nwlog_obj();
              os_log_type_t v16 = type[0];
              if (os_log_type_enabled(v15, type[0]))
              {
                *(_DWORD *)int buf = 136446466;
                *(void *)&uint8_t buf[4] = "nw_http1_remove_idle_connection";
                *(_WORD *)&unsigned char buf[12] = 2048;
                *(void *)&buf[14] = v7;
                BOOL v17 = "%{public}s connection %p not in idle list, cannot remove, backtrace limit exceeded";
                goto LABEL_150;
              }
            }
          }
LABEL_151:
          uint64_t v4 = v576;
          if (v14) {
            free(v14);
          }
          uint64_t v2 = v577;
          p_cache = v13;
          goto LABEL_175;
        }
        uint64_t v35 = *(void *)(v7 + 592);
        uint64_t v36 = *(void **)(v7 + 600);
        if (v35)
        {
          *(void *)(v35 + 600) = v36;
          uint64_t v36 = *(void **)(v7 + 600);
        }
        else
        {
          *(void *)(v2 + 216) = v36;
        }
        void *v36 = v35;
        *(void *)(v7 + 592) = 0;
        *(void *)(v7 + 600) = 0;
        int v95 = *(_DWORD *)(v2 + 340);
        *(_DWORD *)(v2 + 340) = v95 - 1;
        if (v95)
        {
LABEL_169:
          int v126 = (unsigned __int16)*v12;
          unsigned int v127 = (v126 | (*(unsigned __int8 *)(v7 + 874) << 16)) & 0xFFF7FFFF;
          *BOOL v12 = v126;
          *(unsigned char *)(v7 + 874) = BYTE2(v127);
          if ((*(unsigned char *)(v7 + 158) & 1) == 0)
          {
            if (*((unsigned char *)p_cache + 3665))
            {
              v399 = p_cache;
              v400 = __nwlog_obj();
              BOOL v401 = os_log_type_enabled(v400, OS_LOG_TYPE_DEBUG);
              p_cache = v399;
              uint64_t v2 = v577;
              if (v401)
              {
                uint64_t v402 = *(void *)(v7 + 488);
                int v403 = *(_DWORD *)(*(void *)(v7 + 480) + 372);
                int v404 = *(_DWORD *)(v7 + 860);
                if (v402) {
                  LODWORD(v402) = *(_DWORD *)(v402 + 424);
                }
                int v405 = *(_DWORD *)(v577 + 340);
                *(_DWORD *)int buf = 136448002;
                *(void *)&uint8_t buf[4] = "nw_http1_remove_idle_connection";
                *(_WORD *)&unsigned char buf[12] = 2082;
                *(void *)&buf[14] = v7 + 74;
                *(_WORD *)&unsigned char buf[22] = 2080;
                uint64_t v605 = (uint64_t)" ";
                *(_WORD *)v606 = 1024;
                *(_DWORD *)&v606[2] = v403;
                *(_WORD *)&v606[6] = 1024;
                *(_DWORD *)&v606[8] = v404;
                *(_WORD *)&v606[12] = 1024;
                *(_DWORD *)&v606[14] = v402;
                *(_WORD *)&v606[18] = 2048;
                *(void *)&v606[20] = v7;
                *(_WORD *)&v606[28] = 1024;
                *(_DWORD *)&v606[30] = v405;
                _os_log_impl(&dword_1830D4000, v400, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> removed idle connection %p, now have %u idle connections", buf, 0x42u);
                uint64_t v2 = v577;
                uint64_t v4 = v576;
                p_cache = v399;
              }
            }
          }
          if (*(void *)(v7 + 784))
          {
            if ((*(unsigned char *)(v7 + 158) & 1) == 0)
            {
              if (*((unsigned char *)p_cache + 3665))
              {
                v414 = p_cache;
                v415 = __nwlog_obj();
                BOOL v416 = os_log_type_enabled(v415, OS_LOG_TYPE_DEBUG);
                p_cache = v414;
                if (v416)
                {
                  uint64_t v417 = *(void *)(v7 + 488);
                  int v418 = *(_DWORD *)(*(void *)(v7 + 480) + 372);
                  int v419 = *(_DWORD *)(v7 + 860);
                  if (v417) {
                    LODWORD(v417) = *(_DWORD *)(v417 + 424);
                  }
                  *(_DWORD *)int buf = 136447746;
                  *(void *)&uint8_t buf[4] = "nw_http1_remove_idle_connection";
                  *(_WORD *)&unsigned char buf[12] = 2082;
                  *(void *)&buf[14] = v7 + 74;
                  *(_WORD *)&unsigned char buf[22] = 2080;
                  uint64_t v605 = (uint64_t)" ";
                  *(_WORD *)v606 = 1024;
                  *(_DWORD *)&v606[2] = v418;
                  *(_WORD *)&v606[6] = 1024;
                  *(_DWORD *)&v606[8] = v419;
                  *(_WORD *)&v606[12] = 1024;
                  *(_DWORD *)&v606[14] = v417;
                  *(_WORD *)&v606[18] = 2048;
                  *(void *)&v606[20] = v7;
                  _os_log_impl(&dword_1830D4000, v415, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> deactivating destroy timer for connection %p", buf, 0x3Cu);
                  uint64_t v4 = v576;
                  p_cache = v414;
                }
              }
            }
            nw_endpoint_t v128 = p_cache;
            nw_queue_cancel_source(*(void *)(v7 + 784));
            p_cache = v128;
            *(void *)(v7 + 784) = 0;
            uint64_t v2 = v577;
          }
LABEL_175:
          if ((*(unsigned char *)(v2 + 158) & 1) == 0)
          {
            if (*((unsigned char *)p_cache + 3665))
            {
              v394 = p_cache;
              v395 = __nwlog_obj();
              BOOL v396 = os_log_type_enabled(v395, OS_LOG_TYPE_DEBUG);
              p_cache = v394;
              uint64_t v2 = v577;
              if (v396)
              {
                int v397 = *(_DWORD *)(v577 + 372);
                int v398 = *(_DWORD *)(v4 + 424);
                *(_DWORD *)int buf = 136447490;
                *(void *)&uint8_t buf[4] = "nw_http1_remove_pending_stream";
                *(_WORD *)&unsigned char buf[12] = 2082;
                *(void *)&buf[14] = v571;
                *(_WORD *)&unsigned char buf[22] = 2080;
                uint64_t v605 = (uint64_t)" ";
                *(_WORD *)v606 = 1024;
                *(_DWORD *)&v606[2] = v397;
                *(_WORD *)&v606[6] = 1024;
                *(_DWORD *)&v606[8] = v398;
                *(_WORD *)&v606[12] = 2048;
                *(void *)&v606[14] = v4;
                _os_log_impl(&dword_1830D4000, v395, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> called for stream %u (%p)", buf, 0x36u);
                p_cache = v394;
                uint64_t v2 = v577;
              }
            }
          }
          if ((*(_WORD *)(v4 + 428) & 0x1000) == 0)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            *(_DWORD *)int buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_http1_remove_pending_stream";
            *(_WORD *)&unsigned char buf[12] = 2048;
            *(void *)&buf[14] = v4;
            id v129 = (char *)_os_log_send_and_compose_impl();
            type[0] = OS_LOG_TYPE_ERROR;
            LOBYTE(aBlock) = 0;
            if (!__nwlog_fault(v129, type, &aBlock)) {
              goto LABEL_205;
            }
            if (type[0] == OS_LOG_TYPE_FAULT)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              os_log_type_t v130 = gLogObj;
              os_log_type_t v131 = type[0];
              if (!os_log_type_enabled((os_log_t)gLogObj, type[0])) {
                goto LABEL_205;
              }
              *(_DWORD *)int buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_http1_remove_pending_stream";
              *(_WORD *)&unsigned char buf[12] = 2048;
              *(void *)&buf[14] = v4;
              uint64_t v132 = "%{public}s stream %p not in pending list, cannot remove";
            }
            else if ((_BYTE)aBlock)
            {
              __int16 v135 = (char *)__nw_create_backtrace_string();
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              os_log_type_t v130 = gLogObj;
              os_log_type_t v131 = type[0];
              BOOL v136 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
              if (v135)
              {
                if (v136)
                {
                  *(_DWORD *)int buf = 136446722;
                  *(void *)&uint8_t buf[4] = "nw_http1_remove_pending_stream";
                  *(_WORD *)&unsigned char buf[12] = 2048;
                  *(void *)&buf[14] = v4;
                  *(_WORD *)&unsigned char buf[22] = 2082;
                  uint64_t v605 = (uint64_t)v135;
                  _os_log_impl(&dword_1830D4000, v130, v131, "%{public}s stream %p not in pending list, cannot remove, dumping backtrace:%{public}s", buf, 0x20u);
                }
                free(v135);
                goto LABEL_205;
              }
              if (!v136)
              {
LABEL_205:
                if (v129) {
                  free(v129);
                }
                goto LABEL_217;
              }
              *(_DWORD *)int buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_http1_remove_pending_stream";
              *(_WORD *)&unsigned char buf[12] = 2048;
              *(void *)&buf[14] = v4;
              uint64_t v132 = "%{public}s stream %p not in pending list, cannot remove, no backtrace";
            }
            else
            {
              os_log_type_t v130 = __nwlog_obj();
              os_log_type_t v131 = type[0];
              if (!os_log_type_enabled(v130, type[0])) {
                goto LABEL_205;
              }
              *(_DWORD *)int buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_http1_remove_pending_stream";
              *(_WORD *)&unsigned char buf[12] = 2048;
              *(void *)&buf[14] = v4;
              uint64_t v132 = "%{public}s stream %p not in pending list, cannot remove, backtrace limit exceeded";
            }
            _os_log_impl(&dword_1830D4000, v130, v131, v132, buf, 0x16u);
            goto LABEL_205;
          }
          uint64_t v133 = *(void *)(v4 + 296);
          os_log_type_t v134 = *(void **)(v4 + 304);
          if (v133)
          {
            *(void *)(v133 + 304) = v134;
            os_log_type_t v134 = *(void **)(v4 + 304);
          }
          else
          {
            *(void *)(v2 + 256) = v134;
          }
          void *v134 = v133;
          *(void *)(v4 + 296) = 0;
          *(void *)(v4 + 304) = 0;
          int v137 = *(_DWORD *)(v2 + 348);
          *(_DWORD *)(v2 + 348) = v137 - 1;
          if (v137)
          {
LABEL_215:
            *(_WORD *)(v4 + 428) &= ~0x1000u;
            if ((*(unsigned char *)(v4 + 158) & 1) == 0)
            {
              if (*((unsigned char *)p_cache + 3665))
              {
                v406 = __nwlog_obj();
                if (os_log_type_enabled(v406, OS_LOG_TYPE_DEBUG))
                {
                  uint64_t v407 = v4 + 74;
                  uint64_t v408 = *(void *)(v4 + 256);
                  int v409 = *(_DWORD *)(*(void *)(v4 + 248) + 372);
                  if (v408) {
                    LODWORD(v408) = *(_DWORD *)(v408 + 860);
                  }
                  uint64_t v4 = v576;
                  int v410 = *(_DWORD *)(v576 + 424);
                  int v411 = *(_DWORD *)(v577 + 348);
                  *(_DWORD *)int buf = 136448258;
                  *(void *)&uint8_t buf[4] = "nw_http1_remove_pending_stream";
                  *(_WORD *)&unsigned char buf[12] = 2082;
                  *(void *)&buf[14] = v407;
                  *(_WORD *)&unsigned char buf[22] = 2080;
                  uint64_t v605 = (uint64_t)" ";
                  *(_WORD *)v606 = 1024;
                  *(_DWORD *)&v606[2] = v409;
                  *(_WORD *)&v606[6] = 1024;
                  *(_DWORD *)&v606[8] = v408;
                  *(_WORD *)&v606[12] = 1024;
                  *(_DWORD *)&v606[14] = v410;
                  *(_WORD *)&v606[18] = 1024;
                  *(_DWORD *)&v606[20] = v410;
                  *(_WORD *)&v606[24] = 2048;
                  *(void *)&v606[26] = v576;
                  *(_WORD *)&v606[34] = 1024;
                  *(_DWORD *)&v606[36] = v411;
                  _os_log_impl(&dword_1830D4000, v406, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> removed pending stream %u (%p), now have %u pending streams", buf, 0x48u);
                }
              }
            }
LABEL_217:
            if (*(void *)(v4 + 248))
            {
              if (!*(void *)(v7 + 488))
              {
                *(void *)(v4 + 256) = v7;
                *(void *)(v7 + 488) = v4;
                nw_protocol_set_output_handler(v4, *(void *)(v7 + 32));
                nw_protocol_set_input_handler(v7, *(void *)(v4 + 48));
                *(_OWORD *)uint64_t v4 = *(_OWORD *)v7;
                long long v157 = v574[5];
                long long v159 = v574[2];
                long long v158 = v574[3];
                *(_OWORD *)(v7 + 128) = v574[4];
                *(_OWORD *)(v7 + 144) = v157;
                *(_OWORD *)(v7 + 96) = v159;
                *(_OWORD *)(v7 + 112) = v158;
                long long v160 = v574[1];
                *(_OWORD *)(v7 + 64) = *v574;
                *(_OWORD *)(v7 + 80) = v160;
                nw_http_transaction_metadata_set_connection_metadata(*(void **)(v4 + 352), *(void **)(v7 + 768));
                *v12 &= 0xFFD7u;
                *(_DWORD *)(v7 + 864) = 1;
                if ((*(unsigned char *)(v7 + 158) & 1) == 0)
                {
                  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                  networkd_settings_init();
                  os_log_type_t v161 = gLogObj;
                  if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
                  {
                    uint64_t v162 = *(void *)(v7 + 488);
                    int v163 = *(_DWORD *)(*(void *)(v7 + 480) + 372);
                    int v164 = *(_DWORD *)(v7 + 860);
                    if (v162) {
                      LODWORD(v162) = *(_DWORD *)(v162 + 424);
                    }
                    *(_DWORD *)int buf = 136447490;
                    *(void *)&uint8_t buf[4] = "nw_http1_update_connection_input_state";
                    *(_WORD *)&unsigned char buf[12] = 2082;
                    *(void *)&buf[14] = v7 + 74;
                    *(_WORD *)&unsigned char buf[22] = 2080;
                    uint64_t v605 = (uint64_t)" ";
                    *(_WORD *)v606 = 1024;
                    *(_DWORD *)&v606[2] = v163;
                    *(_WORD *)&v606[6] = 1024;
                    *(_DWORD *)&v606[8] = v164;
                    *(_WORD *)&v606[12] = 1024;
                    *(_DWORD *)&v606[14] = v162;
                    _os_log_impl(&dword_1830D4000, v161, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> connection input state: reading", buf, 0x32u);
                  }
                }
                if ((*(unsigned char *)(v4 + 158) & 1) == 0)
                {
                  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                  networkd_settings_init();
                  BOOL v165 = gLogObj;
                  if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
                  {
                    uint64_t v166 = *(void *)(v4 + 256);
                    int v167 = *(_DWORD *)(*(void *)(v4 + 248) + 372);
                    if (v166) {
                      LODWORD(v166) = *(_DWORD *)(v166 + 860);
                    }
                    int v168 = *(_DWORD *)(v4 + 424);
                    *(_DWORD *)int buf = 136448002;
                    *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                    *(_WORD *)&unsigned char buf[12] = 2082;
                    *(void *)&buf[14] = v4 + 74;
                    *(_WORD *)&unsigned char buf[22] = 2080;
                    uint64_t v605 = (uint64_t)" ";
                    *(_WORD *)v606 = 1024;
                    *(_DWORD *)&v606[2] = v167;
                    *(_WORD *)&v606[6] = 1024;
                    *(_DWORD *)&v606[8] = v166;
                    *(_WORD *)&v606[12] = 1024;
                    *(_DWORD *)&v606[14] = v168;
                    *(_WORD *)&v606[18] = 2048;
                    *(void *)&v606[20] = v4;
                    *(_WORD *)&v606[28] = 2048;
                    *(void *)&v606[30] = v7;
                    _os_log_impl(&dword_1830D4000, v165, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s<i%u:c%u:s%u> stream (%p) now using connection %p", buf, 0x46u);
                  }
                }
                goto LABEL_245;
              }
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              uint64_t v151 = *(void *)(v7 + 488);
              *(_DWORD *)int buf = 136446722;
              *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
              *(_WORD *)&unsigned char buf[12] = 2048;
              *(void *)&buf[14] = v7;
              *(_WORD *)&unsigned char buf[22] = 2048;
              uint64_t v605 = v151;
              v152 = (char *)_os_log_send_and_compose_impl();
              type[0] = OS_LOG_TYPE_ERROR;
              LOBYTE(aBlock) = 0;
              if (__nwlog_fault(v152, type, &aBlock))
              {
                if (type[0] == OS_LOG_TYPE_FAULT)
                {
                  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                  networkd_settings_init();
                  os_log_type_t v153 = gLogObj;
                  os_log_type_t v154 = type[0];
                  if (!os_log_type_enabled((os_log_t)gLogObj, type[0])) {
                    goto LABEL_243;
                  }
                  uint64_t v155 = *(void *)(v7 + 488);
                  *(_DWORD *)int buf = 136446722;
                  *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                  *(_WORD *)&unsigned char buf[12] = 2048;
                  *(void *)&buf[14] = v7;
                  *(_WORD *)&unsigned char buf[22] = 2048;
                  uint64_t v605 = v155;
                  os_log_type_t v156 = "%{public}s Connection %p already has a stream (%p)";
                  goto LABEL_242;
                }
                if (!(_BYTE)aBlock)
                {
                  os_log_type_t v153 = __nwlog_obj();
                  os_log_type_t v154 = type[0];
                  if (!os_log_type_enabled(v153, type[0])) {
                    goto LABEL_243;
                  }
                  uint64_t v172 = *(void *)(v7 + 488);
                  *(_DWORD *)int buf = 136446722;
                  *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                  *(_WORD *)&unsigned char buf[12] = 2048;
                  *(void *)&buf[14] = v7;
                  *(_WORD *)&unsigned char buf[22] = 2048;
                  uint64_t v605 = v172;
                  os_log_type_t v156 = "%{public}s Connection %p already has a stream (%p), backtrace limit exceeded";
                  goto LABEL_242;
                }
                id v169 = (char *)__nw_create_backtrace_string();
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                os_log_type_t v153 = gLogObj;
                os_log_type_t v154 = type[0];
                BOOL v170 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
                if (v169)
                {
                  if (v170)
                  {
                    uint64_t v171 = *(void *)(v7 + 488);
                    *(_DWORD *)int buf = 136446978;
                    *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                    *(_WORD *)&unsigned char buf[12] = 2048;
                    *(void *)&buf[14] = v7;
                    *(_WORD *)&unsigned char buf[22] = 2048;
                    uint64_t v605 = v171;
                    *(_WORD *)v606 = 2082;
                    *(void *)&v606[2] = v169;
                    _os_log_impl(&dword_1830D4000, v153, v154, "%{public}s Connection %p already has a stream (%p), dumping backtrace:%{public}s", buf, 0x2Au);
                  }
                  free(v169);
                  goto LABEL_243;
                }
                if (v170)
                {
                  uint64_t v173 = *(void *)(v7 + 488);
                  *(_DWORD *)int buf = 136446722;
                  *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                  *(_WORD *)&unsigned char buf[12] = 2048;
                  *(void *)&buf[14] = v7;
                  *(_WORD *)&unsigned char buf[22] = 2048;
                  uint64_t v605 = v173;
                  os_log_type_t v156 = "%{public}s Connection %p already has a stream (%p), no backtrace";
LABEL_242:
                  _os_log_impl(&dword_1830D4000, v153, v154, v156, buf, 0x20u);
                }
              }
LABEL_243:
              if (v152) {
                free(v152);
              }
LABEL_245:
              *(_WORD *)(v4 + 428) |= 0x4000u;
              uint64_t v174 = *(void **)(v4 + 352);
              *(void *)int buf = MEMORY[0x1E4F143A8];
              *(void *)&buf[8] = 0x40000000;
              *(void *)&buf[16] = ___ZL50nw_http1_match_idle_connection_with_pending_streamP17nw_protocol_http1_block_invoke;
              uint64_t v605 = (uint64_t)&__block_descriptor_tmp_55_40265;
              *(void *)v606 = v4;
              nw_http_transaction_metadata_set_event_handler(v174, buf);
              nw_protocol_connected(*(void **)(v4 + 48), v4);
              return;
            }
            __nwlog_obj();
            *(_DWORD *)int buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
            v383 = (char *)_os_log_send_and_compose_impl();
            type[0] = OS_LOG_TYPE_ERROR;
            LOBYTE(aBlock) = 0;
            if (__nwlog_fault(v383, type, &aBlock))
            {
              if (type[0] == OS_LOG_TYPE_FAULT)
              {
                __int16 v384 = __nwlog_obj();
                os_log_type_t v385 = type[0];
                if (os_log_type_enabled(v384, type[0]))
                {
                  *(_DWORD *)int buf = 136446210;
                  *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                  __int16 v386 = "%{public}s called with null http1_stream->protocol_http1";
LABEL_625:
                  _os_log_impl(&dword_1830D4000, v384, v385, v386, buf, 0xCu);
                }
              }
              else if ((_BYTE)aBlock)
              {
                v412 = (char *)__nw_create_backtrace_string();
                __int16 v384 = __nwlog_obj();
                os_log_type_t v385 = type[0];
                BOOL v413 = os_log_type_enabled(v384, type[0]);
                if (v412)
                {
                  if (v413)
                  {
                    *(_DWORD *)int buf = 136446466;
                    *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                    *(_WORD *)&unsigned char buf[12] = 2082;
                    *(void *)&buf[14] = v412;
                    _os_log_impl(&dword_1830D4000, v384, v385, "%{public}s called with null http1_stream->protocol_http1, dumping backtrace:%{public}s", buf, 0x16u);
                  }
                  free(v412);
                  goto LABEL_626;
                }
                if (v413)
                {
                  *(_DWORD *)int buf = 136446210;
                  *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                  __int16 v386 = "%{public}s called with null http1_stream->protocol_http1, no backtrace";
                  goto LABEL_625;
                }
              }
              else
              {
                __int16 v384 = __nwlog_obj();
                os_log_type_t v385 = type[0];
                if (os_log_type_enabled(v384, type[0]))
                {
                  *(_DWORD *)int buf = 136446210;
                  *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                  __int16 v386 = "%{public}s called with null http1_stream->protocol_http1, backtrace limit exceeded";
                  goto LABEL_625;
                }
              }
            }
LABEL_626:
            if (v383) {
              free(v383);
            }
            uint64_t v4 = v576;
            goto LABEL_245;
          }
          id v138 = p_cache;
          uint64_t v139 = v2;
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v140 = *(unsigned int *)(v139 + 348);
          *(_DWORD *)int buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_http1_remove_pending_stream";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = "http1->pending_stream_count";
          *(_WORD *)&unsigned char buf[22] = 2048;
          uint64_t v605 = 1;
          *(_WORD *)v606 = 2048;
          *(void *)&v606[2] = v140;
          id v141 = (char *)_os_log_send_and_compose_impl();
          type[0] = OS_LOG_TYPE_ERROR;
          LOBYTE(aBlock) = 0;
          if (__nwlog_fault(v141, type, &aBlock))
          {
            if (type[0] == OS_LOG_TYPE_FAULT)
            {
              os_log_type_t v142 = __nwlog_obj();
              os_log_type_t v143 = type[0];
              if (os_log_type_enabled(v142, type[0]))
              {
                uint64_t v144 = *(unsigned int *)(v577 + 348);
                *(_DWORD *)int buf = 136446978;
                *(void *)&uint8_t buf[4] = "nw_http1_remove_pending_stream";
                *(_WORD *)&unsigned char buf[12] = 2082;
                *(void *)&buf[14] = "http1->pending_stream_count";
                *(_WORD *)&unsigned char buf[22] = 2048;
                uint64_t v605 = 1;
                *(_WORD *)v606 = 2048;
                *(void *)&v606[2] = v144;
                BOOL v145 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu";
LABEL_211:
                _os_log_impl(&dword_1830D4000, v142, v143, v145, buf, 0x2Au);
              }
            }
            else if ((_BYTE)aBlock)
            {
              os_log_type_t v146 = (char *)__nw_create_backtrace_string();
              os_log_type_t v142 = __nwlog_obj();
              os_log_type_t v143 = type[0];
              BOOL v147 = os_log_type_enabled(v142, type[0]);
              if (v146)
              {
                if (v147)
                {
                  uint64_t v148 = *(unsigned int *)(v577 + 348);
                  *(_DWORD *)int buf = 136447234;
                  *(void *)&uint8_t buf[4] = "nw_http1_remove_pending_stream";
                  *(_WORD *)&unsigned char buf[12] = 2082;
                  *(void *)&buf[14] = "http1->pending_stream_count";
                  *(_WORD *)&unsigned char buf[22] = 2048;
                  uint64_t v605 = 1;
                  *(_WORD *)v606 = 2048;
                  *(void *)&v606[2] = v148;
                  *(_WORD *)&v606[10] = 2082;
                  *(void *)&v606[12] = v146;
                  _os_log_impl(&dword_1830D4000, v142, v143, "%{public}s Underflow: %{public}s, decrement %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
                }
                free(v146);
                goto LABEL_212;
              }
              if (v147)
              {
                uint64_t v150 = *(unsigned int *)(v577 + 348);
                *(_DWORD *)int buf = 136446978;
                *(void *)&uint8_t buf[4] = "nw_http1_remove_pending_stream";
                *(_WORD *)&unsigned char buf[12] = 2082;
                *(void *)&buf[14] = "http1->pending_stream_count";
                *(_WORD *)&unsigned char buf[22] = 2048;
                uint64_t v605 = 1;
                *(_WORD *)v606 = 2048;
                *(void *)&v606[2] = v150;
                BOOL v145 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, no backtrace";
                goto LABEL_211;
              }
            }
            else
            {
              os_log_type_t v142 = __nwlog_obj();
              os_log_type_t v143 = type[0];
              if (os_log_type_enabled(v142, type[0]))
              {
                uint64_t v149 = *(unsigned int *)(v577 + 348);
                *(_DWORD *)int buf = 136446978;
                *(void *)&uint8_t buf[4] = "nw_http1_remove_pending_stream";
                *(_WORD *)&unsigned char buf[12] = 2082;
                *(void *)&buf[14] = "http1->pending_stream_count";
                *(_WORD *)&unsigned char buf[22] = 2048;
                uint64_t v605 = 1;
                *(_WORD *)v606 = 2048;
                *(void *)&v606[2] = v149;
                BOOL v145 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, backtrace limit exceeded";
                goto LABEL_211;
              }
            }
          }
LABEL_212:
          if (v141) {
            free(v141);
          }
          *(_DWORD *)(v577 + 348) = 0;
          uint64_t v4 = v576;
          p_cache = v138;
          goto LABEL_215;
        }
        os_log_type_t v96 = p_cache;
        uint64_t v97 = v2;
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v98 = *(unsigned int *)(v97 + 340);
        *(_DWORD *)int buf = 136446978;
        *(void *)&uint8_t buf[4] = "nw_http1_remove_idle_connection";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = "http1->idle_connections_count";
        *(_WORD *)&unsigned char buf[22] = 2048;
        uint64_t v605 = 1;
        *(_WORD *)v606 = 2048;
        *(void *)&v606[2] = v98;
        nw_endpoint_t v99 = (char *)_os_log_send_and_compose_impl();
        type[0] = OS_LOG_TYPE_ERROR;
        LOBYTE(aBlock) = 0;
        if (__nwlog_fault(v99, type, &aBlock))
        {
          if (type[0] == OS_LOG_TYPE_FAULT)
          {
            id v100 = __nwlog_obj();
            os_log_type_t v101 = type[0];
            if (os_log_type_enabled(v100, type[0]))
            {
              uint64_t v102 = *(unsigned int *)(v577 + 340);
              *(_DWORD *)int buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_http1_remove_idle_connection";
              *(_WORD *)&unsigned char buf[12] = 2082;
              *(void *)&buf[14] = "http1->idle_connections_count";
              *(_WORD *)&unsigned char buf[22] = 2048;
              uint64_t v605 = 1;
              *(_WORD *)v606 = 2048;
              *(void *)&v606[2] = v102;
              id v103 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu";
LABEL_165:
              _os_log_impl(&dword_1830D4000, v100, v101, v103, buf, 0x2Au);
            }
          }
          else if ((_BYTE)aBlock)
          {
            __int16 v115 = (char *)__nw_create_backtrace_string();
            id v100 = __nwlog_obj();
            os_log_type_t v101 = type[0];
            BOOL v116 = os_log_type_enabled(v100, type[0]);
            if (v115)
            {
              if (v116)
              {
                uint64_t v117 = *(unsigned int *)(v577 + 340);
                *(_DWORD *)int buf = 136447234;
                *(void *)&uint8_t buf[4] = "nw_http1_remove_idle_connection";
                *(_WORD *)&unsigned char buf[12] = 2082;
                *(void *)&buf[14] = "http1->idle_connections_count";
                *(_WORD *)&unsigned char buf[22] = 2048;
                uint64_t v605 = 1;
                *(_WORD *)v606 = 2048;
                *(void *)&v606[2] = v117;
                *(_WORD *)&v606[10] = 2082;
                *(void *)&v606[12] = v115;
                _os_log_impl(&dword_1830D4000, v100, v101, "%{public}s Underflow: %{public}s, decrement %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
              }
              free(v115);
              goto LABEL_166;
            }
            if (v116)
            {
              uint64_t v125 = *(unsigned int *)(v577 + 340);
              *(_DWORD *)int buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_http1_remove_idle_connection";
              *(_WORD *)&unsigned char buf[12] = 2082;
              *(void *)&buf[14] = "http1->idle_connections_count";
              *(_WORD *)&unsigned char buf[22] = 2048;
              uint64_t v605 = 1;
              *(_WORD *)v606 = 2048;
              *(void *)&v606[2] = v125;
              id v103 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, no backtrace";
              goto LABEL_165;
            }
          }
          else
          {
            id v100 = __nwlog_obj();
            os_log_type_t v101 = type[0];
            if (os_log_type_enabled(v100, type[0]))
            {
              uint64_t v124 = *(unsigned int *)(v577 + 340);
              *(_DWORD *)int buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_http1_remove_idle_connection";
              *(_WORD *)&unsigned char buf[12] = 2082;
              *(void *)&buf[14] = "http1->idle_connections_count";
              *(_WORD *)&unsigned char buf[22] = 2048;
              uint64_t v605 = 1;
              *(_WORD *)v606 = 2048;
              *(void *)&v606[2] = v124;
              id v103 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, backtrace limit exceeded";
              goto LABEL_165;
            }
          }
        }
LABEL_166:
        if (v99) {
          free(v99);
        }
        uint64_t v2 = v577;
        *(_DWORD *)(v577 + 340) = 0;
        uint64_t v4 = v576;
        p_cache = v96;
        goto LABEL_169;
      }
    }
    if ((*(unsigned char *)(v2 + 158) & 1) == 0)
    {
      if (*((unsigned char *)p_cache + 3665))
      {
        __int16 v378 = v5;
        v379 = p_cache;
        __int16 v380 = __nwlog_obj();
        BOOL v381 = os_log_type_enabled(v380, OS_LOG_TYPE_DEBUG);
        p_cache = v379;
        int v5 = v378;
        uint64_t v2 = v577;
        if (v381)
        {
          int v382 = *(_DWORD *)(v577 + 372);
          *(_DWORD *)int buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_http1_get_next_idle_connection";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v577 + 74;
          *(_WORD *)&unsigned char buf[22] = 2080;
          uint64_t v605 = (uint64_t)" ";
          *(_WORD *)v606 = 1024;
          *(_DWORD *)&v606[2] = v382;
          _os_log_impl(&dword_1830D4000, v380, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> no idle connections", buf, 0x26u);
          p_cache = v379;
          int v5 = v378;
          uint64_t v2 = v577;
        }
      }
    }
    if (*(void *)(v4 + 256))
    {
      if ((*(unsigned char *)(v4 + 158) & 1) == 0)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v18 = gLogObj;
        BOOL v19 = os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG);
        uint64_t v2 = v577;
        if (v19)
        {
          uint64_t v20 = *(void *)(v4 + 256);
          int v21 = *(_DWORD *)(*(void *)(v4 + 248) + 372);
          if (v20) {
            LODWORD(v20) = *(_DWORD *)(v20 + 860);
          }
          int v22 = *(_DWORD *)(v4 + 424);
          *(_DWORD *)int buf = 136447490;
          *(void *)&uint8_t buf[4] = "nw_http1_create_connection_for_stream_if_allowed";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v4 + 74;
          *(_WORD *)&unsigned char buf[22] = 2080;
          uint64_t v605 = (uint64_t)" ";
          *(_WORD *)v606 = 1024;
          *(_DWORD *)&v606[2] = v21;
          *(_WORD *)&v606[6] = 1024;
          *(_DWORD *)&v606[8] = v20;
          *(_WORD *)&v606[12] = 1024;
          *(_DWORD *)&v606[14] = v22;
          char v23 = "%{public}s %{public}s%s<i%u:c%u:s%u> stream already has current connection, ignoring";
          uint64_t v24 = v18;
          uint32_t v25 = 50;
LABEL_33:
          _os_log_impl(&dword_1830D4000, v24, OS_LOG_TYPE_DEBUG, v23, buf, v25);
          uint64_t v2 = v577;
          goto LABEL_34;
        }
      }
      goto LABEL_34;
    }
    v575 = v5;
    if ((*(_WORD *)(v4 + 428) & 8) == 0)
    {
      if (*(_DWORD *)(v2 + 336) + *(_DWORD *)(v2 + 352) >= (*(_DWORD *)(v2 + 368) + *(_DWORD *)(v2 + 364)))
      {
        if ((*(unsigned char *)(v4 + 158) & 1) == 0)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v104 = gLogObj;
          BOOL v105 = os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG);
          uint64_t v2 = v577;
          if (v105)
          {
            uint64_t v106 = *(void *)(v4 + 256);
            int v107 = *(_DWORD *)(*(void *)(v4 + 248) + 372);
            if (v106) {
              LODWORD(v106) = *(_DWORD *)(v106 + 860);
            }
            int v108 = *(_DWORD *)(v4 + 424);
            int v109 = *(_DWORD *)(v577 + 364);
            *(_DWORD *)int buf = 136447746;
            *(void *)&uint8_t buf[4] = "nw_http1_create_connection_for_stream_if_allowed";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = v4 + 74;
            *(_WORD *)&unsigned char buf[22] = 2080;
            uint64_t v605 = (uint64_t)" ";
            *(_WORD *)v606 = 1024;
            *(_DWORD *)&v606[2] = v107;
            *(_WORD *)&v606[6] = 1024;
            *(_DWORD *)&v606[8] = v106;
            *(_WORD *)&v606[12] = 1024;
            *(_DWORD *)&v606[14] = v108;
            *(_WORD *)&v606[18] = 1024;
            *(_DWORD *)&v606[20] = v109;
            char v23 = "%{public}s %{public}s%s<i%u:c%u:s%u> already at max connection width %u, cannot create new connection";
            uint64_t v24 = v104;
            uint32_t v25 = 56;
            goto LABEL_33;
          }
        }
LABEL_34:
        if ((*(unsigned char *)(v2 + 158) & 1) == 0)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v26 = gLogObj;
          if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
          {
            int v27 = *(_DWORD *)(v577 + 372);
            *(_DWORD *)int buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_http1_match_idle_connection_with_pending_stream";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = v577 + 74;
            *(_WORD *)&unsigned char buf[22] = 2080;
            uint64_t v605 = (uint64_t)" ";
            *(_WORD *)v606 = 1024;
            *(_DWORD *)&v606[2] = v27;
            id v28 = "%{public}s %{public}s%s<i%u> cannot make new connection, waiting for other requests to finish";
LABEL_40:
            _os_log_impl(&dword_1830D4000, v26, OS_LOG_TYPE_DEBUG, v28, buf, 0x26u);
            return;
          }
        }
        return;
      }
      if ((*(unsigned char *)(v4 + 158) & 1) == 0)
      {
        if (*((unsigned char *)p_cache + 3665))
        {
          v461 = p_cache;
          v462 = __nwlog_obj();
          BOOL v463 = os_log_type_enabled(v462, OS_LOG_TYPE_DEBUG);
          p_cache = v461;
          uint64_t v2 = v577;
          if (v463)
          {
            uint64_t v464 = v4 + 74;
            uint64_t v465 = *(void *)(v4 + 256);
            int v466 = *(_DWORD *)(*(void *)(v4 + 248) + 372);
            if (v465) {
              LODWORD(v465) = *(_DWORD *)(v465 + 860);
            }
            uint64_t v4 = v576;
            int v467 = *(_DWORD *)(v576 + 424);
            *(_DWORD *)int buf = 136447490;
            *(void *)&uint8_t buf[4] = "nw_http1_create_connection_for_stream_if_allowed";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = v464;
            *(_WORD *)&unsigned char buf[22] = 2080;
            uint64_t v605 = (uint64_t)" ";
            *(_WORD *)v606 = 1024;
            *(_DWORD *)&v606[2] = v466;
            *(_WORD *)&v606[6] = 1024;
            *(_DWORD *)&v606[8] = v465;
            *(_WORD *)&v606[12] = 1024;
            *(_DWORD *)&v606[14] = v467;
            _os_log_impl(&dword_1830D4000, v462, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> width allows new connection, creating", buf, 0x32u);
            uint64_t v2 = v577;
            p_cache = v461;
          }
        }
      }
      if ((*(_WORD *)(v4 + 428) & 0x1000) == 0)
      {
LABEL_376:
        if (*(void *)(v4 + 32))
        {
          if ((*(unsigned char *)(v4 + 158) & 1) == 0)
          {
            if (*((unsigned char *)p_cache + 3665))
            {
              v478 = __nwlog_obj();
              if (os_log_type_enabled(v478, OS_LOG_TYPE_DEBUG))
              {
                uint64_t v479 = v4 + 74;
                uint64_t v480 = *(void *)(v4 + 256);
                int v481 = *(_DWORD *)(*(void *)(v4 + 248) + 372);
                if (v480) {
                  LODWORD(v480) = *(_DWORD *)(v480 + 860);
                }
                uint64_t v4 = v576;
                int v482 = *(_DWORD *)(v576 + 424);
                uint64_t v483 = *(void *)(v576 + 32);
                *(_DWORD *)int buf = 136447746;
                *(void *)&uint8_t buf[4] = "nw_http1_establish_new_connection_for_stream";
                *(_WORD *)&unsigned char buf[12] = 2082;
                *(void *)&buf[14] = v479;
                *(_WORD *)&unsigned char buf[22] = 2080;
                uint64_t v605 = (uint64_t)" ";
                *(_WORD *)v606 = 1024;
                *(_DWORD *)&v606[2] = v481;
                *(_WORD *)&v606[6] = 1024;
                *(_DWORD *)&v606[8] = v480;
                *(_WORD *)&v606[12] = 1024;
                *(_DWORD *)&v606[14] = v482;
                *(_WORD *)&v606[18] = 2048;
                *(void *)&v606[20] = v483;
                _os_log_impl(&dword_1830D4000, v478, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> using already established output handler %p", buf, 0x3Cu);
              }
            }
          }
          v572 = *(_OWORD **)(v4 + 32);
          if (v572)
          {
            uint64_t v257 = *(void **)(v4 + 336);
            if (v257)
            {
              v258 = *(void **)(v4 + 320);
              if (v258)
              {
                id v259 = malloc_type_calloc(1uLL, 0x370uLL, 0xEAFB8F1AuLL);
                if (v259) {
                  goto LABEL_383;
                }
                v489 = __nwlog_obj();
                os_log_type_enabled(v489, OS_LOG_TYPE_ERROR);
                *(_DWORD *)int buf = 136446722;
                *(void *)&uint8_t buf[4] = "strict_calloc";
                *(_WORD *)&unsigned char buf[12] = 2048;
                *(void *)&buf[14] = 1;
                *(_WORD *)&unsigned char buf[22] = 2048;
                uint64_t v605 = 880;
                v490 = (void *)_os_log_send_and_compose_impl();
                if (!__nwlog_abort((uint64_t)v490))
                {
                  free(v490);
LABEL_383:
                  bzero(v259, 0x370uLL);
                  if (nw_protocol_http1_identifier::onceToken != -1) {
                    dispatch_once(&nw_protocol_http1_identifier::onceToken, &__block_literal_global_40283);
                  }
                  uint64_t v260 = v577;
                  *((void *)v259 + 2) = &nw_protocol_http1_identifier::http1_protocol_identifier;
                  if (nw_protocol_http1_get_callbacks(void)::onceToken != -1)
                  {
                    dispatch_once(&nw_protocol_http1_get_callbacks(void)::onceToken, &__block_literal_global_20_40084);
                    uint64_t v260 = v577;
                  }
                  *((void *)v259 + 3) = &nw_protocol_http1_get_callbacks(void)::http1_protocol_callbacks;
                  *((_DWORD *)v259 + 46) = 3;
                  *((void *)v259 + 22) = v259;
                  *((void *)v259 + 5) = v259 + 10;
                  *((void *)v259 + 60) = v260;
                  nw_protocol_set_output_handler((uint64_t)v259, (uint64_t)v572);
                  *(void *)int buf = os_retain(v257);
                  nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v259 + 47), buf);
                  *(void *)int buf = os_retain(v258);
                  nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v259 + 46), buf);
                  *(void *)int buf = nw_parameters_copy_context(v258);
                  nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v259 + 31), buf);
                  *((void *)v259 + 24) = *(void *)(v260 + 192);
                  nw_endpoint_t v261 = (void *)*((void *)v259 + 62);
                  *(void *)os_log_type_t type = MEMORY[0x1E4F143A8];
                  uint64_t v589 = 0x40000000;
                  uint64_t v590 = (uint64_t)___ZL26nw_http1_connection_createP11nw_protocolP17nw_protocol_http1P11nw_endpointP13nw_parameters_block_invoke;
                  v591 = (uint64_t (*)(uint64_t, uint64_t))&__block_descriptor_tmp_43_40284;
                  v592 = (void (*)(uint64_t))v259;
                  *(void *)int buf = nw_http_connection_create_metadata(v261, type, 0);
                  nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v259 + 48), buf);
                  nw_http_connection_metadata_set_version(*((void **)v259 + 96), 3);
                  nw_http_connection_metadata_set_shared_connection_pool_metadata(*((void **)v259 + 96), *(void **)(v260 + 312));
                  *((void *)v259 + 77) = 0;
                  *((void *)v259 + 78) = (char *)v259 + 616;
                  *((void *)v259 + 79) = 0;
                  *((void *)v259 + 80) = (char *)v259 + 632;
                  *((void *)v259 + 81) = 0;
                  *((void *)v259 + 82) = (char *)v259 + 648;
                  *((void *)v259 + 83) = 0;
                  *((void *)v259 + 84) = (char *)v259 + 664;
                  *((void *)v259 + 86) = (char *)v259 + 680;
                  *((void *)v259 + 85) = 0;
                  nw_frame_cache_init((uint64_t)v259 + 696, (uint64_t)v259, 256, 0x40000, 16);
                  uint64_t v262 = *((void *)v259 + 60);
                  if (v262)
                  {
                    *(_OWORD *)((char *)v259 + 360) = 0u;
                    *(_OWORD *)((char *)v259 + 376) = 0u;
                    *(_OWORD *)((char *)v259 + 392) = 0u;
                    *(_OWORD *)((char *)v259 + 408) = 0u;
                    *(_OWORD *)((char *)v259 + 424) = 0u;
                    *(_OWORD *)((char *)v259 + 440) = 0u;
                    *(_OWORD *)((char *)v259 + 328) = 0u;
                    *(_OWORD *)((char *)v259 + 344) = 0u;
                    *((void *)v259 + 37) = nw_http1_on_message_begin;
                    *((void *)v259 + 48) = nw_http1_on_message_complete;
                    *((void *)v259 + 46) = nw_http1_on_headers_complete;
                    *((void *)v259 + 59) = nw_http1_on_reset;
                    *((void *)v259 + 40) = nw_http1_on_method;
                    *((void *)v259 + 51) = nw_http1_on_method_complete;
                    *((void *)v259 + 38) = nw_http1_on_url;
                    *((void *)v259 + 49) = nw_http1_on_url_complete;
                    *((void *)v259 + 39) = nw_http1_on_status;
                    *((void *)v259 + 50) = nw_http1_on_status_complete;
                    *((void *)v259 + 42) = nw_http1_on_header_field;
                    *((void *)v259 + 53) = nw_http1_on_header_field_complete;
                    *((void *)v259 + 43) = nw_http1_on_header_value;
                    *((void *)v259 + 54) = nw_http1_on_header_value_complete;
                    *((void *)v259 + 47) = nw_http1_on_body;
                    *((void *)v259 + 57) = nw_http1_on_chunk_header;
                    *((void *)v259 + 58) = nw_http1_on_chunk_complete;
                    char v263 = *(unsigned char *)(v262 + 376);
                    *(_OWORD *)((char *)v259 + 248) = 0u;
                    *(_OWORD *)((char *)v259 + 200) = 0u;
                    *(_OWORD *)((char *)v259 + 264) = 0u;
                    *(_OWORD *)((char *)v259 + 232) = 0u;
                    *(_OWORD *)((char *)v259 + 216) = 0u;
                    if (v263) {
                      char v264 = 1;
                    }
                    else {
                      char v264 = 2;
                    }
                    *((unsigned char *)v259 + 272) = v264;
                    *((void *)v259 + 35) = 0;
                    *((void *)v259 + 36) = (char *)v259 + 296;
                    *((_WORD *)v259 + 139) = 16131;
                    *((void *)v259 + 31) = v259;
                    *((void *)v259 + 32) = 238;
                    uint64_t v265 = v576;
                    if ((*((unsigned char *)v259 + 158) & 1) == 0)
                    {
                      os_log_type_t v266 = __nwlog_obj();
                      if (os_log_type_enabled(v266, OS_LOG_TYPE_DEBUG))
                      {
                        uint64_t v267 = *((void *)v259 + 61);
                        int v268 = *(_DWORD *)(*((void *)v259 + 60) + 372);
                        int v269 = *((_DWORD *)v259 + 215);
                        if (v267) {
                          LODWORD(v267) = *(_DWORD *)(v267 + 424);
                        }
                        *(_DWORD *)int buf = 136448258;
                        *(void *)&uint8_t buf[4] = "nw_http1_connection_log_parser_version";
                        *(_WORD *)&unsigned char buf[12] = 2082;
                        *(void *)&buf[14] = (char *)v259 + 74;
                        *(_WORD *)&unsigned char buf[22] = 2080;
                        uint64_t v605 = (uint64_t)" ";
                        *(_WORD *)v606 = 1024;
                        *(_DWORD *)&v606[2] = v268;
                        *(_WORD *)&v606[6] = 1024;
                        *(_DWORD *)&v606[8] = v269;
                        *(_WORD *)&v606[12] = 1024;
                        *(_DWORD *)&v606[14] = v267;
                        *(_WORD *)&v606[18] = 1024;
                        *(_DWORD *)&v606[20] = 9;
                        *(_WORD *)&v606[24] = 1024;
                        *(_DWORD *)&v606[26] = 2;
                        *(_WORD *)&v606[30] = 1024;
                        *(_DWORD *)&v606[32] = 1;
                        _os_log_impl(&dword_1830D4000, v266, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> using http parser v%u.%u.%u", buf, 0x44u);
                      }
                    }
                    goto LABEL_396;
                  }
                  __nwlog_obj();
                  *(_DWORD *)int buf = 136446210;
                  *(void *)&uint8_t buf[4] = "nw_http1_connection_parser_init";
                  v491 = (char *)_os_log_send_and_compose_impl();
                  v599[0] = 16;
                  LOBYTE(v580[0]) = 0;
                  if (__nwlog_fault(v491, v599, v580))
                  {
                    if (v599[0] == 17)
                    {
                      v492 = __nwlog_obj();
                      os_log_type_t v493 = v599[0];
                      if (os_log_type_enabled(v492, (os_log_type_t)v599[0]))
                      {
                        *(_DWORD *)int buf = 136446210;
                        *(void *)&uint8_t buf[4] = "nw_http1_connection_parser_init";
                        v494 = "%{public}s called with null http1_connection->protocol_http1";
LABEL_899:
                        _os_log_impl(&dword_1830D4000, v492, v493, v494, buf, 0xCu);
                      }
                    }
                    else if (LOBYTE(v580[0]))
                    {
                      v532 = (char *)__nw_create_backtrace_string();
                      v492 = __nwlog_obj();
                      os_log_type_t v493 = v599[0];
                      BOOL v533 = os_log_type_enabled(v492, (os_log_type_t)v599[0]);
                      if (v532)
                      {
                        if (v533)
                        {
                          *(_DWORD *)int buf = 136446466;
                          *(void *)&uint8_t buf[4] = "nw_http1_connection_parser_init";
                          *(_WORD *)&unsigned char buf[12] = 2082;
                          *(void *)&buf[14] = v532;
                          _os_log_impl(&dword_1830D4000, v492, v493, "%{public}s called with null http1_connection->protocol_http1, dumping backtrace:%{public}s", buf, 0x16u);
                        }
                        free(v532);
                        goto LABEL_900;
                      }
                      if (v533)
                      {
                        *(_DWORD *)int buf = 136446210;
                        *(void *)&uint8_t buf[4] = "nw_http1_connection_parser_init";
                        v494 = "%{public}s called with null http1_connection->protocol_http1, no backtrace";
                        goto LABEL_899;
                      }
                    }
                    else
                    {
                      v492 = __nwlog_obj();
                      os_log_type_t v493 = v599[0];
                      if (os_log_type_enabled(v492, (os_log_type_t)v599[0]))
                      {
                        *(_DWORD *)int buf = 136446210;
                        *(void *)&uint8_t buf[4] = "nw_http1_connection_parser_init";
                        v494 = "%{public}s called with null http1_connection->protocol_http1, backtrace limit exceeded";
                        goto LABEL_899;
                      }
                    }
                  }
LABEL_900:
                  if (v491) {
                    free(v491);
                  }
                  uint64_t v265 = v576;
LABEL_396:
                  *(void *)int buf = 0;
                  *(void *)&buf[8] = buf;
                  *(void *)&buf[16] = 0x2000000000;
                  uint64_t v605 = (uint64_t)v259;
                  uint64_t aBlock = MEMORY[0x1E4F143A8];
                  uint64_t v582 = 0x40000000;
                  v583 = ___ZL26nw_http1_connection_createP11nw_protocolP17nw_protocol_http1P11nw_endpointP13nw_parameters_block_invoke_2;
                  v584 = &unk_1E5241178;
                  v585 = (uint64_t *)buf;
                  *((void *)v259 + 76) = _Block_copy(&aBlock);
                  _Block_object_dispose(buf, 8);
                  if ((*((unsigned char *)v259 + 158) & 1) == 0)
                  {
                    if (gLogDatapath)
                    {
                      v504 = __nwlog_obj();
                      if (os_log_type_enabled(v504, OS_LOG_TYPE_DEBUG))
                      {
                        uint64_t v505 = *((void *)v259 + 61);
                        int v506 = *(_DWORD *)(*((void *)v259 + 60) + 372);
                        int v507 = *((_DWORD *)v259 + 215);
                        if (v505) {
                          LODWORD(v505) = *(_DWORD *)(v505 + 424);
                        }
                        *(_DWORD *)int buf = 136447746;
                        *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
                        *(_WORD *)&unsigned char buf[12] = 2082;
                        *(void *)&buf[14] = (char *)v259 + 74;
                        *(_WORD *)&unsigned char buf[22] = 2080;
                        uint64_t v605 = (uint64_t)" ";
                        *(_WORD *)v606 = 1024;
                        *(_DWORD *)&v606[2] = v506;
                        *(_WORD *)&v606[6] = 1024;
                        *(_DWORD *)&v606[8] = v507;
                        *(_WORD *)&v606[12] = 1024;
                        *(_DWORD *)&v606[14] = v505;
                        *(_WORD *)&v606[18] = 2048;
                        *(void *)&v606[20] = v259;
                        _os_log_impl(&dword_1830D4000, v504, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> created %p", buf, 0x3Cu);
                        uint64_t v265 = v576;
                      }
                    }
                  }
                  int v270 = (NSObject **)(v259 + 32);
                  nw_protocol_replace_input_handler((uint64_t)v572, v265, (uint64_t)v259);
                  *id v259 = *v572;
                  id v271 = (void *)*((void *)v259 + 92);
                  if (v271)
                  {
                    uint64_t v272 = v577;
                    v273 = (void **)(NWConcrete_nw_resolution_report + 16);
                    if (!*((void *)v259 + 66))
                    {
                      char v274 = (void **)(v259 + 35);
                      id v275 = nw_parameters_copy_context(*((void **)v259 + 92));
                      *(void *)int buf = nw_path_copy_flow_registration(v275, (uint64_t)v259);
                      nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v259 + 35), buf);
                      v276 = (void *)*((void *)v259 + 70);
                      if (v276)
                      {
                        id v277 = nw_path_flow_registration_copy_endpoint(v276);
                        id v278 = nw_path_flow_registration_copy_parameters(*v274);
                        *(void *)int buf = nw_endpoint_copy_association_with_evaluator(v277, v278, 0);
                        nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v259 + 33), buf);
                        if (*((void *)v259 + 66))
                        {
                          *(void *)int buf = nw_protocol_instance_stub_create((nw_protocol *)v259);
                          nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v259 + 34), buf);
                          nw_association_register_internal(*((void **)v259 + 66), v271, *((void **)v259 + 68), 0, 0, &__block_literal_global_69);
                          id v279 = nw_association_copy_current_path(*((void **)v259 + 66), v278);
                          if (v279)
                          {
                            os_log_type_t v280 = v279;
                            uint64_t v281 = nw_path_copy_for_flow_registration(v279, *v274);
                            if (v281)
                            {
                              v282 = v281;
                              if (*v270 != v281)
                              {
                                *(void *)int buf = os_retain(v281);
                                nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v259 + 32), buf);
                              }
                              if (nw_path_has_flows(v282)) {
                                __int16 v283 = 4096;
                              }
                              else {
                                __int16 v283 = 0;
                              }
                              int v284 = *((_WORD *)v259 + 436) & 0xEFFF | (*((unsigned __int8 *)v259 + 874) << 16);
                              *((_WORD *)v259 + 436) = *((_WORD *)v259 + 436) & 0xEFFF | v283;
                              *((unsigned char *)v259 + 874) = BYTE2(v284);
                              id v285 = nw_parameters_copy_effective_proxy_config(v271);
                              if (v285)
                              {
                                v286 = v285;
                                if (nw_path_has_proxy_config(v280, v285))
                                {
                                  *(void *)int buf = os_retain(v286);
                                  nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v259 + 36), buf);
                                }
                                os_release(v286);
                              }
                              os_release(v282);
                            }
                            os_release(v280);
                          }
                        }
                        if (v278) {
                          os_release(v278);
                        }
                        if (v277) {
                          os_release(v277);
                        }
                      }
                      uint64_t v272 = v577;
                      v273 = (void **)(NWConcrete_nw_resolution_report + 16);
                      if (v275)
                      {
                        os_release(v275);
                        v273 = (void **)(NWConcrete_nw_resolution_report + 16);
                        uint64_t v272 = v577;
                      }
                    }
                    id v287 = *v270;
                    if (*v270)
                    {
LABEL_422:
                      BOOL v288 = nw_path_uses_interface_type(v287, nw_interface_type_cellular);
                      v273 = (void **)(NWConcrete_nw_resolution_report + 16);
                      uint64_t v272 = v577;
                      if (v288) {
                        *((void *)v259 + 24) = 1000;
                      }
                    }
LABEL_424:
                    uint64_t v289 = *(unsigned int *)(v272 + 336) + 1;
                    uint64_t v290 = v289 << 31 >> 31;
                    *(_DWORD *)(v272 + 336) = v289;
                    uint64_t v291 = v576;
                    if (v290 == v289 && (v290 & 0x8000000000000000) == 0) {
                      goto LABEL_462;
                    }
                    uint64_t v292 = v272;
                    __nwlog_obj();
                    uint64_t v293 = *(unsigned int *)(v292 + 336);
                    *(_DWORD *)int buf = 136446978;
                    *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                    *(_WORD *)&unsigned char buf[12] = 2082;
                    *(void *)&buf[14] = "http1->connections_count";
                    *(_WORD *)&unsigned char buf[22] = 2048;
                    uint64_t v605 = 1;
                    *(_WORD *)v606 = 2048;
                    *(void *)&v606[2] = v293;
                    msghdr v294 = (char *)_os_log_send_and_compose_impl();
                    type[0] = OS_LOG_TYPE_ERROR;
                    LOBYTE(aBlock) = 0;
                    if (__nwlog_fault(v294, type, &aBlock))
                    {
                      if (type[0] == OS_LOG_TYPE_FAULT)
                      {
                        id v295 = __nwlog_obj();
                        os_log_type_t v296 = type[0];
                        if (os_log_type_enabled(v295, type[0]))
                        {
                          uint64_t v297 = *(unsigned int *)(v577 + 336);
                          *(_DWORD *)int buf = 136446978;
                          *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                          *(_WORD *)&unsigned char buf[12] = 2082;
                          *(void *)&buf[14] = "http1->connections_count";
                          *(_WORD *)&unsigned char buf[22] = 2048;
                          uint64_t v605 = 1;
                          *(_WORD *)v606 = 2048;
                          *(void *)&v606[2] = v297;
                          __int16 v298 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_458:
                          _os_log_impl(&dword_1830D4000, v295, v296, v298, buf, 0x2Au);
                        }
                      }
                      else if ((_BYTE)aBlock)
                      {
                        uint64_t v314 = (char *)__nw_create_backtrace_string();
                        id v295 = __nwlog_obj();
                        os_log_type_t v296 = type[0];
                        BOOL v315 = os_log_type_enabled(v295, type[0]);
                        if (v314)
                        {
                          if (v315)
                          {
                            uint64_t v316 = *(unsigned int *)(v577 + 336);
                            *(_DWORD *)int buf = 136447234;
                            *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                            *(_WORD *)&unsigned char buf[12] = 2082;
                            *(void *)&buf[14] = "http1->connections_count";
                            *(_WORD *)&unsigned char buf[22] = 2048;
                            uint64_t v605 = 1;
                            *(_WORD *)v606 = 2048;
                            *(void *)&v606[2] = v316;
                            *(_WORD *)&v606[10] = 2082;
                            *(void *)&v606[12] = v314;
                            _os_log_impl(&dword_1830D4000, v295, v296, "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
                          }
                          free(v314);
                          goto LABEL_459;
                        }
                        if (v315)
                        {
                          uint64_t v321 = *(unsigned int *)(v577 + 336);
                          *(_DWORD *)int buf = 136446978;
                          *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                          *(_WORD *)&unsigned char buf[12] = 2082;
                          *(void *)&buf[14] = "http1->connections_count";
                          *(_WORD *)&unsigned char buf[22] = 2048;
                          uint64_t v605 = 1;
                          *(_WORD *)v606 = 2048;
                          *(void *)&v606[2] = v321;
                          __int16 v298 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
                          goto LABEL_458;
                        }
                      }
                      else
                      {
                        id v295 = __nwlog_obj();
                        os_log_type_t v296 = type[0];
                        if (os_log_type_enabled(v295, type[0]))
                        {
                          uint64_t v320 = *(unsigned int *)(v577 + 336);
                          *(_DWORD *)int buf = 136446978;
                          *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                          *(_WORD *)&unsigned char buf[12] = 2082;
                          *(void *)&buf[14] = "http1->connections_count";
                          *(_WORD *)&unsigned char buf[22] = 2048;
                          uint64_t v605 = 1;
                          *(_WORD *)v606 = 2048;
                          *(void *)&v606[2] = v320;
                          __int16 v298 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
                          goto LABEL_458;
                        }
                      }
                    }
LABEL_459:
                    if (v294) {
                      free(v294);
                    }
                    uint64_t v272 = v577;
                    *(_DWORD *)(v577 + 336) = -1;
                    uint64_t v291 = v576;
                    v273 = (void **)(NWConcrete_nw_resolution_report + 16);
LABEL_462:
                    uint64_t v322 = *(unsigned int *)(v272 + 360) + 1;
                    uint64_t v323 = v322 << 31 >> 31;
                    *(_DWORD *)(v272 + 360) = v322;
                    if (v323 == v322 && (v323 & 0x8000000000000000) == 0) {
                      goto LABEL_481;
                    }
                    uint64_t v324 = v272;
                    __nwlog_obj();
                    uint64_t v325 = *(unsigned int *)(v324 + 360);
                    *(_DWORD *)int buf = 136446978;
                    *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                    *(_WORD *)&unsigned char buf[12] = 2082;
                    *(void *)&buf[14] = "http1->next_connection_log_num";
                    *(_WORD *)&unsigned char buf[22] = 2048;
                    uint64_t v605 = 1;
                    *(_WORD *)v606 = 2048;
                    *(void *)&v606[2] = v325;
                    v326 = (char *)_os_log_send_and_compose_impl();
                    type[0] = OS_LOG_TYPE_ERROR;
                    LOBYTE(aBlock) = 0;
                    if (__nwlog_fault(v326, type, &aBlock))
                    {
                      if (type[0] == OS_LOG_TYPE_FAULT)
                      {
                        nw_endpoint_t v327 = __nwlog_obj();
                        os_log_type_t v328 = type[0];
                        if (os_log_type_enabled(v327, type[0]))
                        {
                          uint64_t v329 = *(unsigned int *)(v577 + 360);
                          *(_DWORD *)int buf = 136446978;
                          *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                          *(_WORD *)&unsigned char buf[12] = 2082;
                          *(void *)&buf[14] = "http1->next_connection_log_num";
                          *(_WORD *)&unsigned char buf[22] = 2048;
                          uint64_t v605 = 1;
                          *(_WORD *)v606 = 2048;
                          *(void *)&v606[2] = v329;
                          v330 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_477:
                          _os_log_impl(&dword_1830D4000, v327, v328, v330, buf, 0x2Au);
                        }
                      }
                      else if ((_BYTE)aBlock)
                      {
                        id v331 = (char *)__nw_create_backtrace_string();
                        nw_endpoint_t v327 = __nwlog_obj();
                        os_log_type_t v328 = type[0];
                        BOOL v332 = os_log_type_enabled(v327, type[0]);
                        if (v331)
                        {
                          if (v332)
                          {
                            uint64_t v333 = *(unsigned int *)(v577 + 360);
                            *(_DWORD *)int buf = 136447234;
                            *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                            *(_WORD *)&unsigned char buf[12] = 2082;
                            *(void *)&buf[14] = "http1->next_connection_log_num";
                            *(_WORD *)&unsigned char buf[22] = 2048;
                            uint64_t v605 = 1;
                            *(_WORD *)v606 = 2048;
                            *(void *)&v606[2] = v333;
                            *(_WORD *)&v606[10] = 2082;
                            *(void *)&v606[12] = v331;
                            _os_log_impl(&dword_1830D4000, v327, v328, "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
                          }
                          free(v331);
                          goto LABEL_478;
                        }
                        if (v332)
                        {
                          uint64_t v335 = *(unsigned int *)(v577 + 360);
                          *(_DWORD *)int buf = 136446978;
                          *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                          *(_WORD *)&unsigned char buf[12] = 2082;
                          *(void *)&buf[14] = "http1->next_connection_log_num";
                          *(_WORD *)&unsigned char buf[22] = 2048;
                          uint64_t v605 = 1;
                          *(_WORD *)v606 = 2048;
                          *(void *)&v606[2] = v335;
                          v330 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
                          goto LABEL_477;
                        }
                      }
                      else
                      {
                        nw_endpoint_t v327 = __nwlog_obj();
                        os_log_type_t v328 = type[0];
                        if (os_log_type_enabled(v327, type[0]))
                        {
                          uint64_t v334 = *(unsigned int *)(v577 + 360);
                          *(_DWORD *)int buf = 136446978;
                          *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                          *(_WORD *)&unsigned char buf[12] = 2082;
                          *(void *)&buf[14] = "http1->next_connection_log_num";
                          *(_WORD *)&unsigned char buf[22] = 2048;
                          uint64_t v605 = 1;
                          *(_WORD *)v606 = 2048;
                          *(void *)&v606[2] = v334;
                          v330 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
                          goto LABEL_477;
                        }
                      }
                    }
LABEL_478:
                    if (v326) {
                      free(v326);
                    }
                    LODWORD(v322) = -1;
                    *(_DWORD *)(v577 + 360) = -1;
                    uint64_t v291 = v576;
                    v273 = NWConcrete_nw_resolution_report.cache;
LABEL_481:
                    *((_DWORD *)v259 + 215) = v322;
                    if ((*((unsigned char *)v259 + 158) & 1) == 0)
                    {
                      if (*((unsigned char *)v273 + 3665))
                      {
                        v508 = __nwlog_obj();
                        if (os_log_type_enabled(v508, OS_LOG_TYPE_DEBUG))
                        {
                          uint64_t v509 = *((void *)v259 + 61);
                          int v510 = *(_DWORD *)(*((void *)v259 + 60) + 372);
                          int v511 = *((_DWORD *)v259 + 215);
                          if (v509) {
                            LODWORD(v509) = *(_DWORD *)(v509 + 424);
                          }
                          int v512 = *(_DWORD *)(v577 + 336);
                          *(_DWORD *)int buf = 136448002;
                          *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                          *(_WORD *)&unsigned char buf[12] = 2082;
                          *(void *)&buf[14] = (char *)v259 + 74;
                          *(_WORD *)&unsigned char buf[22] = 2080;
                          uint64_t v605 = (uint64_t)" ";
                          *(_WORD *)v606 = 1024;
                          *(_DWORD *)&v606[2] = v510;
                          *(_WORD *)&v606[6] = 1024;
                          *(_DWORD *)&v606[8] = v511;
                          *(_WORD *)&v606[12] = 1024;
                          *(_DWORD *)&v606[14] = v509;
                          *(_WORD *)&v606[18] = 2048;
                          *(void *)&v606[20] = v259;
                          *(_WORD *)&v606[28] = 1024;
                          *(_DWORD *)&v606[30] = v512;
                          _os_log_impl(&dword_1830D4000, v508, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> added connection %p, now have %u connections", buf, 0x42u);
                          uint64_t v291 = v576;
                        }
                      }
                    }
                    if (*(void *)(v291 + 248))
                    {
                      if (*((void *)v259 + 61))
                      {
                        __nwlog_obj();
                        uint64_t v336 = *((void *)v259 + 61);
                        *(_DWORD *)int buf = 136446722;
                        *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                        *(_WORD *)&unsigned char buf[12] = 2048;
                        *(void *)&buf[14] = v259;
                        *(_WORD *)&unsigned char buf[22] = 2048;
                        uint64_t v605 = v336;
                        os_log_type_t v337 = (char *)_os_log_send_and_compose_impl();
                        type[0] = OS_LOG_TYPE_ERROR;
                        LOBYTE(aBlock) = 0;
                        if (!__nwlog_fault(v337, type, &aBlock)) {
                          goto LABEL_510;
                        }
                        if (type[0] == OS_LOG_TYPE_FAULT)
                        {
                          BOOL v338 = __nwlog_obj();
                          os_log_type_t v339 = type[0];
                          if (!os_log_type_enabled(v338, type[0])) {
                            goto LABEL_510;
                          }
                          uint64_t v340 = *((void *)v259 + 61);
                          *(_DWORD *)int buf = 136446722;
                          *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                          *(_WORD *)&unsigned char buf[12] = 2048;
                          *(void *)&buf[14] = v259;
                          *(_WORD *)&unsigned char buf[22] = 2048;
                          uint64_t v605 = v340;
                          v341 = "%{public}s Connection %p already has a stream (%p)";
                        }
                        else if ((_BYTE)aBlock)
                        {
                          nw_endpoint_t v354 = (char *)__nw_create_backtrace_string();
                          BOOL v338 = __nwlog_obj();
                          os_log_type_t v339 = type[0];
                          BOOL v355 = os_log_type_enabled(v338, type[0]);
                          if (v354)
                          {
                            if (v355)
                            {
                              uint64_t v356 = *((void *)v259 + 61);
                              *(_DWORD *)int buf = 136446978;
                              *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                              *(_WORD *)&unsigned char buf[12] = 2048;
                              *(void *)&buf[14] = v259;
                              *(_WORD *)&unsigned char buf[22] = 2048;
                              uint64_t v605 = v356;
                              *(_WORD *)v606 = 2082;
                              *(void *)&v606[2] = v354;
                              _os_log_impl(&dword_1830D4000, v338, v339, "%{public}s Connection %p already has a stream (%p), dumping backtrace:%{public}s", buf, 0x2Au);
                            }
                            free(v354);
                            goto LABEL_510;
                          }
                          if (!v355)
                          {
LABEL_510:
                            if (v337) {
                              free(v337);
                            }
                            goto LABEL_512;
                          }
                          uint64_t v358 = *((void *)v259 + 61);
                          *(_DWORD *)int buf = 136446722;
                          *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                          *(_WORD *)&unsigned char buf[12] = 2048;
                          *(void *)&buf[14] = v259;
                          *(_WORD *)&unsigned char buf[22] = 2048;
                          uint64_t v605 = v358;
                          v341 = "%{public}s Connection %p already has a stream (%p), no backtrace";
                        }
                        else
                        {
                          BOOL v338 = __nwlog_obj();
                          os_log_type_t v339 = type[0];
                          if (!os_log_type_enabled(v338, type[0])) {
                            goto LABEL_510;
                          }
                          uint64_t v357 = *((void *)v259 + 61);
                          *(_DWORD *)int buf = 136446722;
                          *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                          *(_WORD *)&unsigned char buf[12] = 2048;
                          *(void *)&buf[14] = v259;
                          *(_WORD *)&unsigned char buf[22] = 2048;
                          uint64_t v605 = v357;
                          v341 = "%{public}s Connection %p already has a stream (%p), backtrace limit exceeded";
                        }
                        _os_log_impl(&dword_1830D4000, v338, v339, v341, buf, 0x20u);
                        goto LABEL_510;
                      }
                      *(void *)(v291 + 256) = v259;
                      *((void *)v259 + 61) = v291;
                      nw_protocol_set_output_handler(v291, *((void *)v259 + 4));
                      nw_protocol_set_input_handler((uint64_t)v259, *(void *)(v291 + 48));
                      *(_OWORD *)uint64_t v291 = *v259;
                      long long v342 = v575[5];
                      long long v344 = v575[2];
                      long long v343 = v575[3];
                      v259[8] = v575[4];
                      v259[9] = v342;
                      v259[6] = v344;
                      v259[7] = v343;
                      long long v345 = v575[1];
                      v259[4] = *v575;
                      v259[5] = v345;
                      nw_http_transaction_metadata_set_connection_metadata(*(void **)(v291 + 352), *((void **)v259 + 96));
                      *((_WORD *)v259 + 436) &= 0xFFD7u;
                      *((_DWORD *)v259 + 216) = 1;
                      if ((*((unsigned char *)v259 + 158) & 1) == 0)
                      {
                        nw_endpoint_t v346 = __nwlog_obj();
                        if (os_log_type_enabled(v346, OS_LOG_TYPE_DEBUG))
                        {
                          uint64_t v347 = *((void *)v259 + 61);
                          int v348 = *(_DWORD *)(*((void *)v259 + 60) + 372);
                          int v349 = *((_DWORD *)v259 + 215);
                          if (v347) {
                            LODWORD(v347) = *(_DWORD *)(v347 + 424);
                          }
                          *(_DWORD *)int buf = 136447490;
                          *(void *)&uint8_t buf[4] = "nw_http1_update_connection_input_state";
                          *(_WORD *)&unsigned char buf[12] = 2082;
                          *(void *)&buf[14] = (char *)v259 + 74;
                          *(_WORD *)&unsigned char buf[22] = 2080;
                          uint64_t v605 = (uint64_t)" ";
                          *(_WORD *)v606 = 1024;
                          *(_DWORD *)&v606[2] = v348;
                          *(_WORD *)&v606[6] = 1024;
                          *(_DWORD *)&v606[8] = v349;
                          *(_WORD *)&v606[12] = 1024;
                          *(_DWORD *)&v606[14] = v347;
                          _os_log_impl(&dword_1830D4000, v346, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> connection input state: reading", buf, 0x32u);
                        }
                      }
                      if ((*(unsigned char *)(v291 + 158) & 1) != 0
                        || (v350 = __nwlog_obj(), !os_log_type_enabled(v350, OS_LOG_TYPE_INFO)))
                      {
LABEL_512:
                        if (*(unsigned char *)(v291 + 158)) {
                          goto LABEL_517;
                        }
                        goto LABEL_513;
                      }
                      uint64_t v351 = *(void *)(v291 + 256);
                      int v352 = *(_DWORD *)(*(void *)(v291 + 248) + 372);
                      if (v351) {
                        LODWORD(v351) = *(_DWORD *)(v351 + 860);
                      }
                      int v353 = *(_DWORD *)(v291 + 424);
                      *(_DWORD *)int buf = 136448002;
                      *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                      *(_WORD *)&unsigned char buf[12] = 2082;
                      *(void *)&buf[14] = v291 + 74;
                      *(_WORD *)&unsigned char buf[22] = 2080;
                      uint64_t v605 = (uint64_t)" ";
                      *(_WORD *)v606 = 1024;
                      *(_DWORD *)&v606[2] = v352;
                      *(_WORD *)&v606[6] = 1024;
                      *(_DWORD *)&v606[8] = v351;
                      *(_WORD *)&v606[12] = 1024;
                      *(_DWORD *)&v606[14] = v353;
                      *(_WORD *)&v606[18] = 2048;
                      *(void *)&v606[20] = v291;
                      *(_WORD *)&v606[28] = 2048;
                      *(void *)&v606[30] = v259;
                      _os_log_impl(&dword_1830D4000, v350, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s<i%u:c%u:s%u> stream (%p) now using connection %p", buf, 0x46u);
                      if (*(unsigned char *)(v291 + 158))
                      {
LABEL_517:
                        nw_http_transaction_metadata_set_first_on_connection(*(void **)(v291 + 352));
                        uint64_t v363 = nw_protocol_copy_info((uint64_t)v572, 255);
                        nw_endpoint_t v299 = v363;
                        if (v363
                          && (uint64_t v364 = *(void *)(v363 + 24), *(void *)(v363 + 16) != v364)
                          && (v365 = *(void **)(v364 - 8)) != 0)
                        {
                          v366 = os_retain(v365);
                          id v367 = v366;
                          if (v366 && nw_protocol_metadata_is_tls(v366))
                          {
                            id v367 = v367;
                            nw_http_connection_metadata_set_sec_metadata(*((void **)v259 + 96), v367);
                            os_release(v367);
                            nw_protocol_connect((uint64_t)v572, (uint64_t)v259);
                            goto LABEL_526;
                          }
                        }
                        else
                        {
                          id v367 = 0;
                        }
                        if (v259)
                        {
                          nw_protocol_connect((uint64_t)v572, (uint64_t)v259);
                          if (!v367) {
                            goto LABEL_527;
                          }
                          goto LABEL_526;
                        }
                        __nwlog_obj();
                        *(_DWORD *)int buf = 136446210;
                        *(void *)&uint8_t buf[4] = "nw_http1_get_output_protocol";
                        v468 = (char *)_os_log_send_and_compose_impl();
                        type[0] = OS_LOG_TYPE_ERROR;
                        LOBYTE(aBlock) = 0;
                        if (__nwlog_fault(v468, type, &aBlock))
                        {
                          if (type[0] == OS_LOG_TYPE_FAULT)
                          {
                            v469 = __nwlog_obj();
                            os_log_type_t v470 = type[0];
                            if (!os_log_type_enabled(v469, type[0])) {
                              goto LABEL_849;
                            }
                            *(_DWORD *)int buf = 136446210;
                            *(void *)&uint8_t buf[4] = "nw_http1_get_output_protocol";
                            v471 = "%{public}s called with null connection";
LABEL_848:
                            _os_log_impl(&dword_1830D4000, v469, v470, v471, buf, 0xCu);
                            goto LABEL_849;
                          }
                          if (!(_BYTE)aBlock)
                          {
                            v469 = __nwlog_obj();
                            os_log_type_t v470 = type[0];
                            if (!os_log_type_enabled(v469, type[0])) {
                              goto LABEL_849;
                            }
                            *(_DWORD *)int buf = 136446210;
                            *(void *)&uint8_t buf[4] = "nw_http1_get_output_protocol";
                            v471 = "%{public}s called with null connection, backtrace limit exceeded";
                            goto LABEL_848;
                          }
                          v524 = (char *)__nw_create_backtrace_string();
                          v469 = __nwlog_obj();
                          os_log_type_t v470 = type[0];
                          BOOL v525 = os_log_type_enabled(v469, type[0]);
                          if (!v524)
                          {
                            if (!v525) {
                              goto LABEL_849;
                            }
                            *(_DWORD *)int buf = 136446210;
                            *(void *)&uint8_t buf[4] = "nw_http1_get_output_protocol";
                            v471 = "%{public}s called with null connection, no backtrace";
                            goto LABEL_848;
                          }
                          if (v525)
                          {
                            *(_DWORD *)int buf = 136446466;
                            *(void *)&uint8_t buf[4] = "nw_http1_get_output_protocol";
                            *(_WORD *)&unsigned char buf[12] = 2082;
                            *(void *)&buf[14] = v524;
                            _os_log_impl(&dword_1830D4000, v469, v470, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
                          }
                          free(v524);
                        }
LABEL_849:
                        if (v468) {
                          free(v468);
                        }
                        nw_protocol_connect((uint64_t)v572, 0);
                        if (!v367)
                        {
LABEL_527:
                          if (!v299) {
                            return;
                          }
                          goto LABEL_541;
                        }
LABEL_526:
                        os_release(v367);
                        goto LABEL_527;
                      }
LABEL_513:
                      v359 = __nwlog_obj();
                      if (os_log_type_enabled(v359, OS_LOG_TYPE_DEBUG))
                      {
                        uint64_t v360 = *(void *)(v291 + 256);
                        int v361 = *(_DWORD *)(*(void *)(v291 + 248) + 372);
                        if (v360) {
                          LODWORD(v360) = *(_DWORD *)(v360 + 860);
                        }
                        int v362 = *(_DWORD *)(v291 + 424);
                        *(_DWORD *)int buf = 136448258;
                        *(void *)&uint8_t buf[4] = "nw_http1_start_new_connection_for_stream";
                        *(_WORD *)&unsigned char buf[12] = 2082;
                        *(void *)&buf[14] = v291 + 74;
                        *(_WORD *)&unsigned char buf[22] = 2080;
                        uint64_t v605 = (uint64_t)" ";
                        *(_WORD *)v606 = 1024;
                        *(_DWORD *)&v606[2] = v361;
                        *(_WORD *)&v606[6] = 1024;
                        *(_DWORD *)&v606[8] = v360;
                        *(_WORD *)&v606[12] = 1024;
                        *(_DWORD *)&v606[14] = v362;
                        *(_WORD *)&v606[18] = 2048;
                        *(void *)&v606[20] = v259;
                        *(_WORD *)&v606[28] = 1024;
                        *(_DWORD *)&v606[30] = v362;
                        *(_WORD *)&v606[34] = 2048;
                        *(void *)&v606[36] = v291;
                        _os_log_impl(&dword_1830D4000, v359, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> created new connection %p for stream %u (%p)", buf, 0x4Cu);
                      }
                      goto LABEL_517;
                    }
                    __nwlog_obj();
                    *(_DWORD *)int buf = 136446210;
                    *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                    v499 = (char *)_os_log_send_and_compose_impl();
                    type[0] = OS_LOG_TYPE_ERROR;
                    LOBYTE(aBlock) = 0;
                    if (!__nwlog_fault(v499, type, &aBlock)) {
                      goto LABEL_913;
                    }
                    if (type[0] == OS_LOG_TYPE_FAULT)
                    {
                      v500 = __nwlog_obj();
                      os_log_type_t v501 = type[0];
                      if (!os_log_type_enabled(v500, type[0])) {
                        goto LABEL_913;
                      }
                      *(_DWORD *)int buf = 136446210;
                      *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                      v502 = "%{public}s called with null http1_stream->protocol_http1";
                    }
                    else if ((_BYTE)aBlock)
                    {
                      v536 = (char *)__nw_create_backtrace_string();
                      v500 = __nwlog_obj();
                      os_log_type_t v501 = type[0];
                      BOOL v537 = os_log_type_enabled(v500, type[0]);
                      if (v536)
                      {
                        if (v537)
                        {
                          *(_DWORD *)int buf = 136446466;
                          *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                          *(_WORD *)&unsigned char buf[12] = 2082;
                          *(void *)&buf[14] = v536;
                          _os_log_impl(&dword_1830D4000, v500, v501, "%{public}s called with null http1_stream->protocol_http1, dumping backtrace:%{public}s", buf, 0x16u);
                        }
                        free(v536);
                        goto LABEL_913;
                      }
                      if (!v537)
                      {
LABEL_913:
                        if (v499) {
                          free(v499);
                        }
                        goto LABEL_895;
                      }
                      *(_DWORD *)int buf = 136446210;
                      *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                      v502 = "%{public}s called with null http1_stream->protocol_http1, no backtrace";
                    }
                    else
                    {
                      v500 = __nwlog_obj();
                      os_log_type_t v501 = type[0];
                      if (!os_log_type_enabled(v500, type[0])) {
                        goto LABEL_913;
                      }
                      *(_DWORD *)int buf = 136446210;
                      *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                      v502 = "%{public}s called with null http1_stream->protocol_http1, backtrace limit exceeded";
                    }
                    _os_log_impl(&dword_1830D4000, v500, v501, v502, buf, 0xCu);
                    goto LABEL_913;
                  }
                  __nwlog_obj();
                  *(_DWORD *)int buf = 136446210;
                  *(void *)&uint8_t buf[4] = "nw_protocol_http1_set_up_association";
                  v495 = (char *)_os_log_send_and_compose_impl();
                  type[0] = OS_LOG_TYPE_ERROR;
                  LOBYTE(aBlock) = 0;
                  if (__nwlog_fault(v495, type, &aBlock))
                  {
                    if (type[0] == OS_LOG_TYPE_FAULT)
                    {
                      v496 = __nwlog_obj();
                      os_log_type_t v497 = type[0];
                      if (!os_log_type_enabled(v496, type[0])) {
                        goto LABEL_906;
                      }
                      *(_DWORD *)int buf = 136446210;
                      *(void *)&uint8_t buf[4] = "nw_protocol_http1_set_up_association";
                      v498 = "%{public}s called with null parameters";
LABEL_905:
                      _os_log_impl(&dword_1830D4000, v496, v497, v498, buf, 0xCu);
                      goto LABEL_906;
                    }
                    if (!(_BYTE)aBlock)
                    {
                      v496 = __nwlog_obj();
                      os_log_type_t v497 = type[0];
                      if (!os_log_type_enabled(v496, type[0])) {
                        goto LABEL_906;
                      }
                      *(_DWORD *)int buf = 136446210;
                      *(void *)&uint8_t buf[4] = "nw_protocol_http1_set_up_association";
                      v498 = "%{public}s called with null parameters, backtrace limit exceeded";
                      goto LABEL_905;
                    }
                    v534 = (char *)__nw_create_backtrace_string();
                    v496 = __nwlog_obj();
                    os_log_type_t v497 = type[0];
                    BOOL v535 = os_log_type_enabled(v496, type[0]);
                    if (!v534)
                    {
                      if (!v535) {
                        goto LABEL_906;
                      }
                      *(_DWORD *)int buf = 136446210;
                      *(void *)&uint8_t buf[4] = "nw_protocol_http1_set_up_association";
                      v498 = "%{public}s called with null parameters, no backtrace";
                      goto LABEL_905;
                    }
                    if (v535)
                    {
                      *(_DWORD *)int buf = 136446466;
                      *(void *)&uint8_t buf[4] = "nw_protocol_http1_set_up_association";
                      *(_WORD *)&unsigned char buf[12] = 2082;
                      *(void *)&buf[14] = v534;
                      _os_log_impl(&dword_1830D4000, v496, v497, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
                    }
                    free(v534);
                  }
LABEL_906:
                  if (v495) {
                    free(v495);
                  }
                  uint64_t v272 = v577;
                  v273 = (void **)(NWConcrete_nw_resolution_report + 16);
                  id v287 = *v270;
                  if (*v270) {
                    goto LABEL_422;
                  }
                  goto LABEL_424;
                }
LABEL_915:
                __break(1u);
                return;
              }
              __nwlog_obj();
              *(_DWORD *)int buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
              v474 = (char *)_os_log_send_and_compose_impl();
              v599[0] = 16;
              LOBYTE(v580[0]) = 0;
              if (__nwlog_fault(v474, v599, v580))
              {
                if (v599[0] == 17)
                {
                  v475 = __nwlog_obj();
                  os_log_type_t v476 = v599[0];
                  if (!os_log_type_enabled(v475, (os_log_type_t)v599[0])) {
                    goto LABEL_860;
                  }
                  *(_DWORD *)int buf = 136446210;
                  *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
                  v477 = "%{public}s called with null parameters";
                  goto LABEL_859;
                }
                if (!LOBYTE(v580[0]))
                {
                  v475 = __nwlog_obj();
                  os_log_type_t v476 = v599[0];
                  if (!os_log_type_enabled(v475, (os_log_type_t)v599[0])) {
                    goto LABEL_860;
                  }
                  *(_DWORD *)int buf = 136446210;
                  *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
                  v477 = "%{public}s called with null parameters, backtrace limit exceeded";
                  goto LABEL_859;
                }
                v528 = (char *)__nw_create_backtrace_string();
                v475 = __nwlog_obj();
                os_log_type_t v476 = v599[0];
                BOOL v531 = os_log_type_enabled(v475, (os_log_type_t)v599[0]);
                if (!v528)
                {
                  if (!v531) {
                    goto LABEL_860;
                  }
                  *(_DWORD *)int buf = 136446210;
                  *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
                  v477 = "%{public}s called with null parameters, no backtrace";
                  goto LABEL_859;
                }
                if (v531)
                {
                  *(_DWORD *)int buf = 136446466;
                  *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
                  *(_WORD *)&unsigned char buf[12] = 2082;
                  *(void *)&buf[14] = v528;
                  v530 = "%{public}s called with null parameters, dumping backtrace:%{public}s";
                  goto LABEL_727;
                }
                goto LABEL_728;
              }
LABEL_860:
              if (!v474) {
                goto LABEL_862;
              }
              goto LABEL_861;
            }
            __nwlog_obj();
            *(_DWORD *)int buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
            v474 = (char *)_os_log_send_and_compose_impl();
            v599[0] = 16;
            LOBYTE(v580[0]) = 0;
            if (!__nwlog_fault(v474, v599, v580)) {
              goto LABEL_860;
            }
            if (v599[0] != 17)
            {
              if (!LOBYTE(v580[0]))
              {
                v475 = __nwlog_obj();
                os_log_type_t v476 = v599[0];
                if (!os_log_type_enabled(v475, (os_log_type_t)v599[0])) {
                  goto LABEL_860;
                }
                *(_DWORD *)int buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
                v477 = "%{public}s called with null endpoint, backtrace limit exceeded";
                goto LABEL_859;
              }
              v528 = (char *)__nw_create_backtrace_string();
              v475 = __nwlog_obj();
              os_log_type_t v476 = v599[0];
              BOOL v529 = os_log_type_enabled(v475, (os_log_type_t)v599[0]);
              if (!v528)
              {
                if (!v529) {
                  goto LABEL_860;
                }
                *(_DWORD *)int buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
                v477 = "%{public}s called with null endpoint, no backtrace";
                goto LABEL_859;
              }
              if (v529)
              {
                *(_DWORD *)int buf = 136446466;
                *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
                *(_WORD *)&unsigned char buf[12] = 2082;
                *(void *)&buf[14] = v528;
                v530 = "%{public}s called with null endpoint, dumping backtrace:%{public}s";
LABEL_727:
                _os_log_impl(&dword_1830D4000, v475, v476, v530, buf, 0x16u);
              }
LABEL_728:
              free(v528);
              if (!v474)
              {
LABEL_862:
                __nwlog_obj();
                *(_DWORD *)int buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                v558 = (char *)_os_log_send_and_compose_impl();
                type[0] = OS_LOG_TYPE_ERROR;
                LOBYTE(aBlock) = 0;
                if (!__nwlog_fault(v558, type, &aBlock)) {
                  goto LABEL_876;
                }
                if (type[0] == OS_LOG_TYPE_FAULT)
                {
                  v559 = __nwlog_obj();
                  os_log_type_t v560 = type[0];
                  if (!os_log_type_enabled(v559, type[0])) {
                    goto LABEL_876;
                  }
                  *(_DWORD *)int buf = 136446210;
                  *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                  v561 = "%{public}s called with null http1_connection";
                }
                else if ((_BYTE)aBlock)
                {
                  v562 = (char *)__nw_create_backtrace_string();
                  v559 = __nwlog_obj();
                  os_log_type_t v560 = type[0];
                  BOOL v563 = os_log_type_enabled(v559, type[0]);
                  if (v562)
                  {
                    if (v563)
                    {
                      *(_DWORD *)int buf = 136446466;
                      *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                      *(_WORD *)&unsigned char buf[12] = 2082;
                      *(void *)&buf[14] = v562;
                      _os_log_impl(&dword_1830D4000, v559, v560, "%{public}s called with null http1_connection, dumping backtrace:%{public}s", buf, 0x16u);
                    }
                    free(v562);
LABEL_876:
                    if (v558) {
                      free(v558);
                    }
                    __nwlog_obj();
                    *(_DWORD *)int buf = 136446210;
                    *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                    v564 = (char *)_os_log_send_and_compose_impl();
                    type[0] = OS_LOG_TYPE_ERROR;
                    LOBYTE(aBlock) = 0;
                    if (!__nwlog_fault(v564, type, &aBlock)) {
                      goto LABEL_892;
                    }
                    if (type[0] == OS_LOG_TYPE_FAULT)
                    {
                      v565 = __nwlog_obj();
                      os_log_type_t v566 = type[0];
                      if (os_log_type_enabled(v565, type[0]))
                      {
                        *(_DWORD *)int buf = 136446210;
                        *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                        v567 = "%{public}s called with null http1_connection";
LABEL_891:
                        _os_log_impl(&dword_1830D4000, v565, v566, v567, buf, 0xCu);
                      }
                    }
                    else if ((_BYTE)aBlock)
                    {
                      v568 = (char *)__nw_create_backtrace_string();
                      v565 = __nwlog_obj();
                      os_log_type_t v566 = type[0];
                      BOOL v569 = os_log_type_enabled(v565, type[0]);
                      if (v568)
                      {
                        if (v569)
                        {
                          *(_DWORD *)int buf = 136446466;
                          *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                          *(_WORD *)&unsigned char buf[12] = 2082;
                          *(void *)&buf[14] = v568;
                          _os_log_impl(&dword_1830D4000, v565, v566, "%{public}s called with null http1_connection, dumping backtrace:%{public}s", buf, 0x16u);
                        }
                        free(v568);
                        goto LABEL_892;
                      }
                      if (v569)
                      {
                        *(_DWORD *)int buf = 136446210;
                        *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                        v567 = "%{public}s called with null http1_connection, no backtrace";
                        goto LABEL_891;
                      }
                    }
                    else
                    {
                      v565 = __nwlog_obj();
                      os_log_type_t v566 = type[0];
                      if (os_log_type_enabled(v565, type[0]))
                      {
                        *(_DWORD *)int buf = 136446210;
                        *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                        v567 = "%{public}s called with null http1_connection, backtrace limit exceeded";
                        goto LABEL_891;
                      }
                    }
LABEL_892:
                    if (v564) {
                      free(v564);
                    }
                    id v259 = 0;
LABEL_895:
                    uint64_t v291 = v576;
                    if (*(unsigned char *)(v576 + 158)) {
                      goto LABEL_517;
                    }
                    goto LABEL_513;
                  }
                  if (!v563) {
                    goto LABEL_876;
                  }
                  *(_DWORD *)int buf = 136446210;
                  *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                  v561 = "%{public}s called with null http1_connection, no backtrace";
                }
                else
                {
                  v559 = __nwlog_obj();
                  os_log_type_t v560 = type[0];
                  if (!os_log_type_enabled(v559, type[0])) {
                    goto LABEL_876;
                  }
                  *(_DWORD *)int buf = 136446210;
                  *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                  v561 = "%{public}s called with null http1_connection, backtrace limit exceeded";
                }
                _os_log_impl(&dword_1830D4000, v559, v560, v561, buf, 0xCu);
                goto LABEL_876;
              }
LABEL_861:
              free(v474);
              goto LABEL_862;
            }
            v475 = __nwlog_obj();
            os_log_type_t v476 = v599[0];
            if (!os_log_type_enabled(v475, (os_log_type_t)v599[0])) {
              goto LABEL_860;
            }
            *(_DWORD *)int buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
            v477 = "%{public}s called with null endpoint";
          }
          else
          {
            __nwlog_obj();
            *(_DWORD *)int buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
            v474 = (char *)_os_log_send_and_compose_impl();
            v599[0] = 16;
            LOBYTE(v580[0]) = 0;
            if (!__nwlog_fault(v474, v599, v580)) {
              goto LABEL_860;
            }
            if (v599[0] != 17)
            {
              if (!LOBYTE(v580[0]))
              {
                v475 = __nwlog_obj();
                os_log_type_t v476 = v599[0];
                if (!os_log_type_enabled(v475, (os_log_type_t)v599[0])) {
                  goto LABEL_860;
                }
                *(_DWORD *)int buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
                v477 = "%{public}s called with null output_handler, backtrace limit exceeded";
                goto LABEL_859;
              }
              v526 = (char *)__nw_create_backtrace_string();
              v475 = __nwlog_obj();
              os_log_type_t v476 = v599[0];
              BOOL v527 = os_log_type_enabled(v475, (os_log_type_t)v599[0]);
              if (!v526)
              {
                if (!v527) {
                  goto LABEL_860;
                }
                *(_DWORD *)int buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
                v477 = "%{public}s called with null output_handler, no backtrace";
                goto LABEL_859;
              }
              if (v527)
              {
                *(_DWORD *)int buf = 136446466;
                *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
                *(_WORD *)&unsigned char buf[12] = 2082;
                *(void *)&buf[14] = v526;
                _os_log_impl(&dword_1830D4000, v475, v476, "%{public}s called with null output_handler, dumping backtrace:%{public}s", buf, 0x16u);
              }
              free(v526);
              goto LABEL_860;
            }
            v475 = __nwlog_obj();
            os_log_type_t v476 = v599[0];
            if (!os_log_type_enabled(v475, (os_log_type_t)v599[0])) {
              goto LABEL_860;
            }
            *(_DWORD *)int buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
            v477 = "%{public}s called with null output_handler";
          }
LABEL_859:
          _os_log_impl(&dword_1830D4000, v475, v476, v477, buf, 0xCu);
          goto LABEL_860;
        }
        nw_endpoint_t v299 = nw_parameters_copy_default_protocol_stack(*(nw_parameters_t *)(v4 + 320));
        uint64_t v595 = 0;
        v596 = &v595;
        uint64_t v597 = 0x2000000000;
        char v598 = 0;
        *(void *)os_log_type_t type = 0;
        uint64_t v589 = (uint64_t)type;
        uint64_t v590 = 0x3802000000;
        v591 = __Block_byref_object_copy__40335;
        v592 = __Block_byref_object_dispose__40336;
        v593 = 0;
        v594 |= 1u;
        uint64_t aBlock = MEMORY[0x1E4F143A8];
        uint64_t v582 = 0x40000000;
        v583 = ___ZL44nw_http1_establish_new_connection_for_streamP17nw_protocol_http1P15nw_http1_stream_block_invoke;
        v584 = &unk_1E5241318;
        v585 = &v595;
        v586 = type;
        uint64_t v587 = v4;
        nw_protocol_stack_iterate_application_protocols(v299, &aBlock);
        if (*(void *)(v589 + 40)) {
          goto LABEL_435;
        }
        v300 = nw_protocol_stack_copy_transport_protocol(v299);
        BOOL is_quic = nw_protocol_options_is_quic(v300);
        if (v300) {
          os_release(v300);
        }
        if (!is_quic)
        {
LABEL_435:
          *(void *)int buf = nw_parameters_shallow_copy(*(void **)(v4 + 320));
          nw::retained_ptr<nw_endpoint *>::operator=(v4 + 320, buf);
        }
        else
        {
          int v302 = *(void **)(v4 + 320);
          *(void *)int buf = MEMORY[0x1E4F143A8];
          *(void *)&buf[8] = 0x40000000;
          *(void *)&buf[16] = ___ZL44nw_http1_establish_new_connection_for_streamP17nw_protocol_http1P15nw_http1_stream_block_invoke_2;
          uint64_t v605 = (uint64_t)&unk_1E5241368;
          *(void *)v606 = type;
          *(void *)&v606[8] = &v595;
          *(void *)&v606[16] = v4;
          *(void *)&v606[24] = v577;
          nw_parameters_enumerate_transformed_parameters(v302, buf);
        }
        __int16 v303 = *(void **)(v589 + 40);
        if (v303)
        {
          os_log_type_t v304 = v303;
          sec_protocol_options_clear_tls_application_protocols();
          sec_protocol_options_add_tls_application_protocol(v304, "http/1.1");
          os_release(v304);
        }
        *((unsigned char *)v596 + 24) = 0;
        __int16 v305 = *(void **)(v4 + 320);
        v580[0] = MEMORY[0x1E4F143A8];
        v580[1] = 0x40000000;
        v580[2] = ___ZL44nw_http1_establish_new_connection_for_streamP17nw_protocol_http1P15nw_http1_stream_block_invoke_77;
        v580[3] = &unk_1E5241390;
        v580[4] = &v595;
        v580[5] = v4;
        nw_parameters_remove_application_protocol_options_from_protocol_stack(v305, v580);
        *(_WORD *)(v4 + 428) |= 8u;
        uint64_t v306 = *(unsigned int *)(v577 + 352) + 1;
        uint64_t v307 = v306 << 31 >> 31;
        *(_DWORD *)(v577 + 352) = v306;
        if (v307 == v306 && (v307 & 0x8000000000000000) == 0)
        {
LABEL_537:
          uint64_t v370 = *(void *)(v4 + 312);
          id v371 = *(void **)(v4 + 264);
          *(void *)v599 = MEMORY[0x1E4F143A8];
          *(void *)&v599[8] = 0x40000000;
          *(void *)&v599[16] = ___ZL44nw_http1_establish_new_connection_for_streamP17nw_protocol_http1P15nw_http1_stream_block_invoke_80;
          uint64_t v600 = (uint64_t)&unk_1E52413B8;
          *(void *)v601 = v370;
          nw_queue_context_async(v371, v599);
          _Block_object_dispose(type, 8);
          if ((v594 & 1) != 0 && v593) {
            os_release(v593);
          }
          _Block_object_dispose(&v595, 8);
          if (!v299) {
            return;
          }
LABEL_541:
          os_release(v299);
          return;
        }
        __nwlog_obj();
        uint64_t v308 = *(unsigned int *)(v577 + 352);
        *(_DWORD *)v599 = 136446978;
        *(void *)&v599[4] = "nw_http1_establish_new_connection_for_stream";
        *(_WORD *)&v599[12] = 2082;
        *(void *)&v599[14] = "http1->pending_output_handler_count";
        *(_WORD *)&v599[22] = 2048;
        uint64_t v600 = 1;
        *(_WORD *)v601 = 2048;
        *(void *)&v601[2] = v308;
        char v309 = (char *)_os_log_send_and_compose_impl();
        os_log_type_t v579 = OS_LOG_TYPE_ERROR;
        char v578 = 0;
        if (__nwlog_fault(v309, &v579, &v578))
        {
          if (v579 == OS_LOG_TYPE_FAULT)
          {
            v310 = __nwlog_obj();
            os_log_type_t v311 = v579;
            if (os_log_type_enabled(v310, v579))
            {
              uint64_t v312 = *(unsigned int *)(v577 + 352);
              *(_DWORD *)v599 = 136446978;
              *(void *)&v599[4] = "nw_http1_establish_new_connection_for_stream";
              *(_WORD *)&v599[12] = 2082;
              *(void *)&v599[14] = "http1->pending_output_handler_count";
              *(_WORD *)&v599[22] = 2048;
              uint64_t v600 = 1;
              *(_WORD *)v601 = 2048;
              *(void *)&v601[2] = v312;
              v313 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_533:
              _os_log_impl(&dword_1830D4000, v310, v311, v313, v599, 0x2Au);
            }
          }
          else if (v578)
          {
            v317 = (char *)__nw_create_backtrace_string();
            v310 = __nwlog_obj();
            os_log_type_t v311 = v579;
            BOOL v318 = os_log_type_enabled(v310, v579);
            if (v317)
            {
              if (v318)
              {
                uint64_t v319 = *(unsigned int *)(v577 + 352);
                *(_DWORD *)v599 = 136447234;
                *(void *)&v599[4] = "nw_http1_establish_new_connection_for_stream";
                *(_WORD *)&v599[12] = 2082;
                *(void *)&v599[14] = "http1->pending_output_handler_count";
                *(_WORD *)&v599[22] = 2048;
                uint64_t v600 = 1;
                *(_WORD *)v601 = 2048;
                *(void *)&v601[2] = v319;
                __int16 v602 = 2082;
                v603 = v317;
                _os_log_impl(&dword_1830D4000, v310, v311, "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s", v599, 0x34u);
              }
              free(v317);
              goto LABEL_534;
            }
            if (v318)
            {
              uint64_t v369 = *(unsigned int *)(v577 + 352);
              *(_DWORD *)v599 = 136446978;
              *(void *)&v599[4] = "nw_http1_establish_new_connection_for_stream";
              *(_WORD *)&v599[12] = 2082;
              *(void *)&v599[14] = "http1->pending_output_handler_count";
              *(_WORD *)&v599[22] = 2048;
              uint64_t v600 = 1;
              *(_WORD *)v601 = 2048;
              *(void *)&v601[2] = v369;
              v313 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
              goto LABEL_533;
            }
          }
          else
          {
            v310 = __nwlog_obj();
            os_log_type_t v311 = v579;
            if (os_log_type_enabled(v310, v579))
            {
              uint64_t v368 = *(unsigned int *)(v577 + 352);
              *(_DWORD *)v599 = 136446978;
              *(void *)&v599[4] = "nw_http1_establish_new_connection_for_stream";
              *(_WORD *)&v599[12] = 2082;
              *(void *)&v599[14] = "http1->pending_output_handler_count";
              *(_WORD *)&v599[22] = 2048;
              uint64_t v600 = 1;
              *(_WORD *)v601 = 2048;
              *(void *)&v601[2] = v368;
              v313 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
              goto LABEL_533;
            }
          }
        }
LABEL_534:
        if (v309) {
          free(v309);
        }
        *(_DWORD *)(v577 + 352) = -1;
        uint64_t v4 = v576;
        goto LABEL_537;
      }
      if ((*(unsigned char *)(v2 + 158) & 1) == 0)
      {
        if (*((unsigned char *)p_cache + 3665))
        {
          v519 = p_cache;
          v520 = __nwlog_obj();
          BOOL v521 = os_log_type_enabled(v520, OS_LOG_TYPE_DEBUG);
          p_cache = v519;
          uint64_t v2 = v577;
          if (v521)
          {
            int v522 = *(_DWORD *)(v577 + 372);
            int v523 = *(_DWORD *)(v4 + 424);
            *(_DWORD *)int buf = 136447490;
            *(void *)&uint8_t buf[4] = "nw_http1_remove_pending_stream";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = v577 + 74;
            *(_WORD *)&unsigned char buf[22] = 2080;
            uint64_t v605 = (uint64_t)" ";
            *(_WORD *)v606 = 1024;
            *(_DWORD *)&v606[2] = v522;
            *(_WORD *)&v606[6] = 1024;
            *(_DWORD *)&v606[8] = v523;
            *(_WORD *)&v606[12] = 2048;
            *(void *)&v606[14] = v4;
            _os_log_impl(&dword_1830D4000, v520, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> called for stream %u (%p)", buf, 0x36u);
            p_cache = v519;
            uint64_t v2 = v577;
          }
        }
      }
      if ((*(_WORD *)(v4 + 428) & 0x1000) == 0)
      {
        os_log_type_t v30 = p_cache;
        __nwlog_obj();
        *(_DWORD *)int buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http1_remove_pending_stream";
        *(_WORD *)&unsigned char buf[12] = 2048;
        *(void *)&buf[14] = v4;
        uint64_t v31 = (char *)_os_log_send_and_compose_impl();
        type[0] = OS_LOG_TYPE_ERROR;
        LOBYTE(aBlock) = 0;
        if (__nwlog_fault(v31, type, &aBlock))
        {
          if (type[0] == OS_LOG_TYPE_FAULT)
          {
            os_log_type_t v32 = __nwlog_obj();
            os_log_type_t v33 = type[0];
            if (os_log_type_enabled(v32, type[0]))
            {
              *(_DWORD *)int buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_http1_remove_pending_stream";
              *(_WORD *)&unsigned char buf[12] = 2048;
              *(void *)&buf[14] = v4;
              os_log_type_t v34 = "%{public}s stream %p not in pending list, cannot remove";
LABEL_360:
              _os_log_impl(&dword_1830D4000, v32, v33, v34, buf, 0x16u);
            }
          }
          else if ((_BYTE)aBlock)
          {
            os_log_type_t v175 = (char *)__nw_create_backtrace_string();
            os_log_type_t v32 = __nwlog_obj();
            os_log_type_t v33 = type[0];
            BOOL v176 = os_log_type_enabled(v32, type[0]);
            if (v175)
            {
              if (v176)
              {
                *(_DWORD *)int buf = 136446722;
                *(void *)&uint8_t buf[4] = "nw_http1_remove_pending_stream";
                *(_WORD *)&unsigned char buf[12] = 2048;
                *(void *)&buf[14] = v4;
                *(_WORD *)&unsigned char buf[22] = 2082;
                uint64_t v605 = (uint64_t)v175;
                _os_log_impl(&dword_1830D4000, v32, v33, "%{public}s stream %p not in pending list, cannot remove, dumping backtrace:%{public}s", buf, 0x20u);
              }
              free(v175);
              goto LABEL_361;
            }
            if (v176)
            {
              *(_DWORD *)int buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_http1_remove_pending_stream";
              *(_WORD *)&unsigned char buf[12] = 2048;
              *(void *)&buf[14] = v4;
              os_log_type_t v34 = "%{public}s stream %p not in pending list, cannot remove, no backtrace";
              goto LABEL_360;
            }
          }
          else
          {
            os_log_type_t v32 = __nwlog_obj();
            os_log_type_t v33 = type[0];
            if (os_log_type_enabled(v32, type[0]))
            {
              *(_DWORD *)int buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_http1_remove_pending_stream";
              *(_WORD *)&unsigned char buf[12] = 2048;
              *(void *)&buf[14] = v4;
              os_log_type_t v34 = "%{public}s stream %p not in pending list, cannot remove, backtrace limit exceeded";
              goto LABEL_360;
            }
          }
        }
LABEL_361:
        if (v31) {
          free(v31);
        }
        p_cache = v30;
        goto LABEL_376;
      }
      uint64_t v122 = *(void *)(v4 + 296);
      id v123 = *(void **)(v4 + 304);
      if (v122)
      {
        *(void *)(v122 + 304) = v123;
        id v123 = *(void **)(v4 + 304);
      }
      else
      {
        *(void *)(v2 + 256) = v123;
      }
      void *v123 = v122;
      *(void *)(v4 + 296) = 0;
      *(void *)(v4 + 304) = 0;
      int v178 = *(_DWORD *)(v2 + 348);
      *(_DWORD *)(v2 + 348) = v178 - 1;
      if (v178)
      {
LABEL_374:
        *(_WORD *)(v4 + 428) &= ~0x1000u;
        if ((*(unsigned char *)(v4 + 158) & 1) == 0)
        {
          if (*((unsigned char *)p_cache + 3665))
          {
            v538 = p_cache;
            v539 = __nwlog_obj();
            BOOL v540 = os_log_type_enabled(v539, OS_LOG_TYPE_DEBUG);
            p_cache = v538;
            if (v540)
            {
              uint64_t v541 = v4 + 74;
              uint64_t v542 = *(void *)(v4 + 256);
              int v543 = *(_DWORD *)(*(void *)(v4 + 248) + 372);
              if (v542) {
                LODWORD(v542) = *(_DWORD *)(v542 + 860);
              }
              uint64_t v4 = v576;
              int v544 = *(_DWORD *)(v576 + 424);
              int v545 = *(_DWORD *)(v577 + 348);
              *(_DWORD *)int buf = 136448258;
              *(void *)&uint8_t buf[4] = "nw_http1_remove_pending_stream";
              *(_WORD *)&unsigned char buf[12] = 2082;
              *(void *)&buf[14] = v541;
              *(_WORD *)&unsigned char buf[22] = 2080;
              uint64_t v605 = (uint64_t)" ";
              *(_WORD *)v606 = 1024;
              *(_DWORD *)&v606[2] = v543;
              *(_WORD *)&v606[6] = 1024;
              *(_DWORD *)&v606[8] = v542;
              *(_WORD *)&v606[12] = 1024;
              *(_DWORD *)&v606[14] = v544;
              *(_WORD *)&v606[18] = 1024;
              *(_DWORD *)&v606[20] = v544;
              *(_WORD *)&v606[24] = 2048;
              *(void *)&v606[26] = v576;
              *(_WORD *)&v606[34] = 1024;
              *(_DWORD *)&v606[36] = v545;
              _os_log_impl(&dword_1830D4000, v539, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> removed pending stream %u (%p), now have %u pending streams", buf, 0x48u);
              p_cache = v538;
            }
          }
        }
        goto LABEL_376;
      }
      os_log_type_t v179 = p_cache;
      uint64_t v180 = v2;
      __nwlog_obj();
      uint64_t v181 = *(unsigned int *)(v180 + 348);
      *(_DWORD *)int buf = 136446978;
      *(void *)&uint8_t buf[4] = "nw_http1_remove_pending_stream";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = "http1->pending_stream_count";
      *(_WORD *)&unsigned char buf[22] = 2048;
      uint64_t v605 = 1;
      *(_WORD *)v606 = 2048;
      *(void *)&v606[2] = v181;
      BOOL v182 = (char *)_os_log_send_and_compose_impl();
      type[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(aBlock) = 0;
      if (__nwlog_fault(v182, type, &aBlock))
      {
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          int v183 = __nwlog_obj();
          os_log_type_t v184 = type[0];
          if (os_log_type_enabled(v183, type[0]))
          {
            uint64_t v185 = *(unsigned int *)(v577 + 348);
            *(_DWORD *)int buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_http1_remove_pending_stream";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = "http1->pending_stream_count";
            *(_WORD *)&unsigned char buf[22] = 2048;
            uint64_t v605 = 1;
            *(_WORD *)v606 = 2048;
            *(void *)&v606[2] = v185;
            unsigned int v186 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu";
LABEL_370:
            _os_log_impl(&dword_1830D4000, v183, v184, v186, buf, 0x2Au);
          }
        }
        else if ((_BYTE)aBlock)
        {
          int v249 = (char *)__nw_create_backtrace_string();
          int v183 = __nwlog_obj();
          os_log_type_t v184 = type[0];
          BOOL v250 = os_log_type_enabled(v183, type[0]);
          if (v249)
          {
            if (v250)
            {
              uint64_t v251 = *(unsigned int *)(v577 + 348);
              *(_DWORD *)int buf = 136447234;
              *(void *)&uint8_t buf[4] = "nw_http1_remove_pending_stream";
              *(_WORD *)&unsigned char buf[12] = 2082;
              *(void *)&buf[14] = "http1->pending_stream_count";
              *(_WORD *)&unsigned char buf[22] = 2048;
              uint64_t v605 = 1;
              *(_WORD *)v606 = 2048;
              *(void *)&v606[2] = v251;
              *(_WORD *)&v606[10] = 2082;
              *(void *)&v606[12] = v249;
              _os_log_impl(&dword_1830D4000, v183, v184, "%{public}s Underflow: %{public}s, decrement %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
            }
            free(v249);
            goto LABEL_371;
          }
          if (v250)
          {
            uint64_t v256 = *(unsigned int *)(v577 + 348);
            *(_DWORD *)int buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_http1_remove_pending_stream";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = "http1->pending_stream_count";
            *(_WORD *)&unsigned char buf[22] = 2048;
            uint64_t v605 = 1;
            *(_WORD *)v606 = 2048;
            *(void *)&v606[2] = v256;
            unsigned int v186 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, no backtrace";
            goto LABEL_370;
          }
        }
        else
        {
          int v183 = __nwlog_obj();
          os_log_type_t v184 = type[0];
          if (os_log_type_enabled(v183, type[0]))
          {
            uint64_t v252 = *(unsigned int *)(v577 + 348);
            *(_DWORD *)int buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_http1_remove_pending_stream";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = "http1->pending_stream_count";
            *(_WORD *)&unsigned char buf[22] = 2048;
            uint64_t v605 = 1;
            *(_WORD *)v606 = 2048;
            *(void *)&v606[2] = v252;
            unsigned int v186 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, backtrace limit exceeded";
            goto LABEL_370;
          }
        }
      }
LABEL_371:
      if (v182) {
        free(v182);
      }
      *(_DWORD *)(v577 + 348) = 0;
      uint64_t v4 = v576;
      p_cache = v179;
      goto LABEL_374;
    }
    if (!*(void *)(v4 + 32))
    {
      if (!(*(unsigned char *)(v4 + 158) & 1 | (*((unsigned char *)p_cache + 3665) == 0)))
      {
        id v110 = __nwlog_obj();
        BOOL v111 = os_log_type_enabled(v110, OS_LOG_TYPE_DEBUG);
        uint64_t v2 = v577;
        if (v111)
        {
          uint64_t v112 = *(void *)(v4 + 256);
          int v113 = *(_DWORD *)(*(void *)(v4 + 248) + 372);
          if (v112) {
            LODWORD(v112) = *(_DWORD *)(v112 + 860);
          }
          int v114 = *(_DWORD *)(v576 + 424);
          *(_DWORD *)int buf = 136447746;
          *(void *)&uint8_t buf[4] = "nw_http1_create_connection_for_stream_if_allowed";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v4 + 74;
          *(_WORD *)&unsigned char buf[22] = 2080;
          uint64_t v605 = (uint64_t)" ";
          *(_WORD *)v606 = 1024;
          *(_DWORD *)&v606[2] = v113;
          *(_WORD *)&v606[6] = 1024;
          *(_DWORD *)&v606[8] = v112;
          *(_WORD *)&v606[12] = 1024;
          *(_DWORD *)&v606[14] = v114;
          *(_WORD *)&v606[18] = 2048;
          *(void *)&v606[20] = v576;
          char v23 = "%{public}s %{public}s%s<i%u:c%u:s%u> Stream %p still awaiting new output handler";
          uint64_t v24 = v110;
          uint32_t v25 = 60;
          goto LABEL_33;
        }
      }
      goto LABEL_34;
    }
    if (!(*(unsigned char *)(v4 + 158) & 1 | (*((unsigned char *)p_cache + 3665) == 0)))
    {
      v430 = __nwlog_obj();
      if (os_log_type_enabled(v430, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v431 = v4 + 74;
        uint64_t v432 = *(void *)(v4 + 256);
        int v433 = *(_DWORD *)(*(void *)(v4 + 248) + 372);
        if (v432) {
          LODWORD(v432) = *(_DWORD *)(v432 + 860);
        }
        uint64_t v4 = v576;
        int v434 = *(_DWORD *)(v576 + 424);
        uint64_t v435 = *(void *)(v576 + 32);
        *(_DWORD *)int buf = 136448002;
        *(void *)&uint8_t buf[4] = "nw_http1_create_connection_for_stream_if_allowed";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = v431;
        *(_WORD *)&unsigned char buf[22] = 2080;
        uint64_t v605 = (uint64_t)" ";
        *(_WORD *)v606 = 1024;
        *(_DWORD *)&v606[2] = v433;
        *(_WORD *)&v606[6] = 1024;
        *(_DWORD *)&v606[8] = v432;
        *(_WORD *)&v606[12] = 1024;
        *(_DWORD *)&v606[14] = v434;
        *(_WORD *)&v606[18] = 2048;
        *(void *)&v606[20] = v576;
        *(_WORD *)&v606[28] = 2048;
        *(void *)&v606[30] = v435;
        _os_log_impl(&dword_1830D4000, v430, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> creating connection for stream %p with new output_handler %p", buf, 0x46u);
      }
    }
    uint64_t v37 = *(_OWORD **)(v4 + 32);
    if (v37)
    {
      uint64_t v38 = *(void **)(v4 + 336);
      if (v38)
      {
        os_log_type_t v39 = *(void **)(v4 + 320);
        if (v39)
        {
          os_log_type_t v40 = malloc_type_calloc(1uLL, 0x370uLL, 0xEAFB8F1AuLL);
          if (!v40)
          {
            v436 = __nwlog_obj();
            os_log_type_enabled(v436, OS_LOG_TYPE_ERROR);
            *(_DWORD *)int buf = 136446722;
            *(void *)&uint8_t buf[4] = "strict_calloc";
            *(_WORD *)&unsigned char buf[12] = 2048;
            *(void *)&buf[14] = 1;
            *(_WORD *)&unsigned char buf[22] = 2048;
            uint64_t v605 = 880;
            v437 = (void *)_os_log_send_and_compose_impl();
            if (__nwlog_abort((uint64_t)v437)) {
              goto LABEL_915;
            }
            free(v437);
            uint64_t v4 = v576;
          }
          bzero(v40, 0x370uLL);
          if (nw_protocol_http1_identifier::onceToken != -1) {
            dispatch_once(&nw_protocol_http1_identifier::onceToken, &__block_literal_global_40283);
          }
          uint64_t v41 = v577;
          *((void *)v40 + 2) = &nw_protocol_http1_identifier::http1_protocol_identifier;
          if (nw_protocol_http1_get_callbacks(void)::onceToken != -1)
          {
            dispatch_once(&nw_protocol_http1_get_callbacks(void)::onceToken, &__block_literal_global_20_40084);
            uint64_t v41 = v577;
          }
          *((void *)v40 + 3) = &nw_protocol_http1_get_callbacks(void)::http1_protocol_callbacks;
          *((_DWORD *)v40 + 46) = 3;
          *((void *)v40 + 22) = v40;
          *((void *)v40 + 5) = v40 + 10;
          *((void *)v40 + 60) = v41;
          nw_protocol_set_output_handler((uint64_t)v40, (uint64_t)v37);
          nw_endpoint_t v42 = os_retain(v38);
          char v43 = *((unsigned char *)v40 + 760);
          if (v43)
          {
            BOOL v44 = (void *)*((void *)v40 + 94);
            if (v44)
            {
              os_release(v44);
              char v43 = *((unsigned char *)v40 + 760);
            }
          }
          *((void *)v40 + 94) = v42;
          *((unsigned char *)v40 + 760) = v43 | 1;
          BOOL v45 = os_retain(v39);
          char v46 = *((unsigned char *)v40 + 744);
          if (v46)
          {
            char v47 = (void *)*((void *)v40 + 92);
            if (v47)
            {
              os_release(v47);
              char v46 = *((unsigned char *)v40 + 744);
            }
          }
          *((void *)v40 + 92) = v45;
          *((unsigned char *)v40 + 744) = v46 | 1;
          BOOL v48 = v39;
          id v49 = *(id *)(v48[13] + 136);

          char v50 = *((unsigned char *)v40 + 504);
          uint64_t v51 = v577;
          if (v50)
          {
            char v52 = (void *)*((void *)v40 + 62);
            if (v52)
            {
              os_release(v52);
              uint64_t v51 = v577;
              char v50 = *((unsigned char *)v40 + 504);
            }
          }
          *((void *)v40 + 62) = v49;
          *((unsigned char *)v40 + 504) = v50 | 1;
          *((void *)v40 + 24) = *(void *)(v51 + 192);
          *(void *)os_log_type_t type = MEMORY[0x1E4F143A8];
          uint64_t v589 = 0x40000000;
          uint64_t v590 = (uint64_t)___ZL26nw_http1_connection_createP11nw_protocolP17nw_protocol_http1P11nw_endpointP13nw_parameters_block_invoke;
          v591 = (uint64_t (*)(uint64_t, uint64_t))&__block_descriptor_tmp_43_40284;
          v592 = (void (*)(uint64_t))v40;
          metadata = nw_http_connection_create_metadata(v49, type, 0);
          char v54 = *((unsigned char *)v40 + 776);
          if (v54)
          {
            __int16 v55 = (void *)*((void *)v40 + 96);
            if (v55)
            {
              os_release(v55);
              char v54 = *((unsigned char *)v40 + 776);
            }
          }
          *((void *)v40 + 96) = metadata;
          *((unsigned char *)v40 + 776) = v54 | 1;
          nw_http_connection_metadata_set_version(metadata, 3);
          nw_http_connection_metadata_set_shared_connection_pool_metadata(*((void **)v40 + 96), *(void **)(v577 + 312));
          *((void *)v40 + 77) = 0;
          *((void *)v40 + 78) = (char *)v40 + 616;
          *((void *)v40 + 79) = 0;
          *((void *)v40 + 80) = (char *)v40 + 632;
          *((void *)v40 + 81) = 0;
          *((void *)v40 + 82) = (char *)v40 + 648;
          *((void *)v40 + 83) = 0;
          *((void *)v40 + 84) = (char *)v40 + 664;
          *((void *)v40 + 86) = (char *)v40 + 680;
          *((void *)v40 + 85) = 0;
          nw_frame_cache_init((uint64_t)v40 + 696, (uint64_t)v40, 256, 0x40000, 16);
          uint64_t v56 = *((void *)v40 + 60);
          if (v56)
          {
            *(_OWORD *)((char *)v40 + 360) = 0u;
            *(_OWORD *)((char *)v40 + 376) = 0u;
            *(_OWORD *)((char *)v40 + 392) = 0u;
            *(_OWORD *)((char *)v40 + 408) = 0u;
            *(_OWORD *)((char *)v40 + 424) = 0u;
            *(_OWORD *)((char *)v40 + 440) = 0u;
            *(_OWORD *)((char *)v40 + 328) = 0u;
            *(_OWORD *)((char *)v40 + 344) = 0u;
            *((void *)v40 + 37) = nw_http1_on_message_begin;
            *((void *)v40 + 48) = nw_http1_on_message_complete;
            *((void *)v40 + 46) = nw_http1_on_headers_complete;
            *((void *)v40 + 59) = nw_http1_on_reset;
            *((void *)v40 + 40) = nw_http1_on_method;
            *((void *)v40 + 51) = nw_http1_on_method_complete;
            *((void *)v40 + 38) = nw_http1_on_url;
            *((void *)v40 + 49) = nw_http1_on_url_complete;
            *((void *)v40 + 39) = nw_http1_on_status;
            *((void *)v40 + 50) = nw_http1_on_status_complete;
            *((void *)v40 + 42) = nw_http1_on_header_field;
            *((void *)v40 + 53) = nw_http1_on_header_field_complete;
            *((void *)v40 + 43) = nw_http1_on_header_value;
            *((void *)v40 + 54) = nw_http1_on_header_value_complete;
            *((void *)v40 + 47) = nw_http1_on_body;
            *((void *)v40 + 57) = nw_http1_on_chunk_header;
            *((void *)v40 + 58) = nw_http1_on_chunk_complete;
            char v57 = *(unsigned char *)(v56 + 376);
            *(_OWORD *)((char *)v40 + 248) = 0u;
            *(_OWORD *)((char *)v40 + 200) = 0u;
            *(_OWORD *)((char *)v40 + 264) = 0u;
            *(_OWORD *)((char *)v40 + 232) = 0u;
            *(_OWORD *)((char *)v40 + 216) = 0u;
            if (v57) {
              char v58 = 1;
            }
            else {
              char v58 = 2;
            }
            *((unsigned char *)v40 + 272) = v58;
            *((void *)v40 + 35) = 0;
            *((void *)v40 + 36) = (char *)v40 + 296;
            *((_WORD *)v40 + 139) = 16131;
            *((void *)v40 + 31) = v40;
            *((void *)v40 + 32) = 238;
            if ((*((unsigned char *)v40 + 158) & 1) == 0)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              __int16 v59 = gLogObj;
              if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
              {
                uint64_t v60 = *((void *)v40 + 61);
                int v61 = *(_DWORD *)(*((void *)v40 + 60) + 372);
                int v62 = *((_DWORD *)v40 + 215);
                if (v60) {
                  LODWORD(v60) = *(_DWORD *)(v60 + 424);
                }
                *(_DWORD *)int buf = 136448258;
                *(void *)&uint8_t buf[4] = "nw_http1_connection_log_parser_version";
                *(_WORD *)&unsigned char buf[12] = 2082;
                *(void *)&buf[14] = (char *)v40 + 74;
                *(_WORD *)&unsigned char buf[22] = 2080;
                uint64_t v605 = (uint64_t)" ";
                *(_WORD *)v606 = 1024;
                *(_DWORD *)&v606[2] = v61;
                *(_WORD *)&v606[6] = 1024;
                *(_DWORD *)&v606[8] = v62;
                *(_WORD *)&v606[12] = 1024;
                *(_DWORD *)&v606[14] = v60;
                *(_WORD *)&v606[18] = 1024;
                *(_DWORD *)&v606[20] = 9;
                *(_WORD *)&v606[24] = 1024;
                *(_DWORD *)&v606[26] = 2;
                *(_WORD *)&v606[30] = 1024;
                *(_DWORD *)&v606[32] = 1;
                _os_log_impl(&dword_1830D4000, v59, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> using http parser v%u.%u.%u", buf, 0x44u);
              }
            }
            goto LABEL_86;
          }
          v438 = v37;
          __nwlog_obj();
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http1_connection_parser_init";
          v439 = (char *)_os_log_send_and_compose_impl();
          v599[0] = 16;
          LOBYTE(v580[0]) = 0;
          if (__nwlog_fault(v439, v599, v580))
          {
            if (v599[0] == 17)
            {
              v440 = __nwlog_obj();
              os_log_type_t v441 = v599[0];
              if (os_log_type_enabled(v440, (os_log_type_t)v599[0]))
              {
                *(_DWORD *)int buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_http1_connection_parser_init";
                v442 = "%{public}s called with null http1_connection->protocol_http1";
LABEL_816:
                _os_log_impl(&dword_1830D4000, v440, v441, v442, buf, 0xCu);
              }
            }
            else if (LOBYTE(v580[0]))
            {
              v513 = (char *)__nw_create_backtrace_string();
              v440 = __nwlog_obj();
              os_log_type_t v441 = v599[0];
              BOOL v514 = os_log_type_enabled(v440, (os_log_type_t)v599[0]);
              if (v513)
              {
                if (v514)
                {
                  *(_DWORD *)int buf = 136446466;
                  *(void *)&uint8_t buf[4] = "nw_http1_connection_parser_init";
                  *(_WORD *)&unsigned char buf[12] = 2082;
                  *(void *)&buf[14] = v513;
                  _os_log_impl(&dword_1830D4000, v440, v441, "%{public}s called with null http1_connection->protocol_http1, dumping backtrace:%{public}s", buf, 0x16u);
                }
                free(v513);
                goto LABEL_817;
              }
              if (v514)
              {
                *(_DWORD *)int buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_http1_connection_parser_init";
                v442 = "%{public}s called with null http1_connection->protocol_http1, no backtrace";
                goto LABEL_816;
              }
            }
            else
            {
              v440 = __nwlog_obj();
              os_log_type_t v441 = v599[0];
              if (os_log_type_enabled(v440, (os_log_type_t)v599[0]))
              {
                *(_DWORD *)int buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_http1_connection_parser_init";
                v442 = "%{public}s called with null http1_connection->protocol_http1, backtrace limit exceeded";
                goto LABEL_816;
              }
            }
          }
LABEL_817:
          if (v439) {
            free(v439);
          }
          uint64_t v4 = v576;
          uint64_t v37 = v438;
LABEL_86:
          *(void *)int buf = 0;
          *(void *)&buf[8] = buf;
          *(void *)&buf[16] = 0x2000000000;
          uint64_t v605 = (uint64_t)v40;
          uint64_t aBlock = MEMORY[0x1E4F143A8];
          uint64_t v582 = 0x40000000;
          v583 = ___ZL26nw_http1_connection_createP11nw_protocolP17nw_protocol_http1P11nw_endpointP13nw_parameters_block_invoke_2;
          v584 = &unk_1E5241178;
          v585 = (uint64_t *)buf;
          *((void *)v40 + 76) = _Block_copy(&aBlock);
          _Block_object_dispose(buf, 8);
          if ((*((unsigned char *)v40 + 158) & 1) == 0)
          {
            if (gLogDatapath)
            {
              v452 = __nwlog_obj();
              if (os_log_type_enabled(v452, OS_LOG_TYPE_DEBUG))
              {
                uint64_t v453 = *((void *)v40 + 61);
                int v454 = *(_DWORD *)(*((void *)v40 + 60) + 372);
                int v455 = *((_DWORD *)v40 + 215);
                if (v453) {
                  LODWORD(v453) = *(_DWORD *)(v453 + 424);
                }
                *(_DWORD *)int buf = 136447746;
                *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
                *(_WORD *)&unsigned char buf[12] = 2082;
                *(void *)&buf[14] = (char *)v40 + 74;
                *(_WORD *)&unsigned char buf[22] = 2080;
                uint64_t v605 = (uint64_t)" ";
                *(_WORD *)v606 = 1024;
                *(_DWORD *)&v606[2] = v454;
                *(_WORD *)&v606[6] = 1024;
                *(_DWORD *)&v606[8] = v455;
                *(_WORD *)&v606[12] = 1024;
                *(_DWORD *)&v606[14] = v453;
                *(_WORD *)&v606[18] = 2048;
                *(void *)&v606[20] = v40;
                _os_log_impl(&dword_1830D4000, v452, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> created %p", buf, 0x3Cu);
                uint64_t v4 = v576;
              }
            }
          }
          int v63 = (NSObject **)(v40 + 32);
          nw_protocol_replace_input_handler((uint64_t)v37, v4, (uint64_t)v40);
          _OWORD *v40 = *v37;
          __int16 v64 = (void *)*((void *)v40 + 92);
          if (v64)
          {
            uint64_t v65 = v577;
            uint64_t v66 = (void **)(NWConcrete_nw_resolution_report + 16);
            if (!*((void *)v40 + 66))
            {
              uint64_t v67 = (void **)(v40 + 35);
              id v68 = nw_parameters_copy_context(*((void **)v40 + 92));
              *(void *)int buf = nw_path_copy_flow_registration(v68, (uint64_t)v40);
              nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v40 + 35), buf);
              char v69 = (void *)*((void *)v40 + 70);
              if (v69)
              {
                BOOL v70 = v37;
                id v71 = nw_path_flow_registration_copy_endpoint(v69);
                id v72 = nw_path_flow_registration_copy_parameters(*v67);
                *(void *)int buf = nw_endpoint_copy_association_with_evaluator(v71, v72, 0);
                nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v40 + 33), buf);
                if (*((void *)v40 + 66))
                {
                  *(void *)int buf = nw_protocol_instance_stub_create((nw_protocol *)v40);
                  nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v40 + 34), buf);
                  nw_association_register_internal(*((void **)v40 + 66), v64, *((void **)v40 + 68), 0, 0, &__block_literal_global_69);
                  id v73 = nw_association_copy_current_path(*((void **)v40 + 66), v72);
                  if (v73)
                  {
                    BOOL v74 = v73;
                    char v75 = nw_path_copy_for_flow_registration(v73, *v67);
                    if (v75)
                    {
                      CFStringRef v76 = v75;
                      if (*v63 != v75)
                      {
                        *(void *)int buf = os_retain(v75);
                        nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v40 + 32), buf);
                      }
                      if (nw_path_has_flows(v76)) {
                        __int16 v77 = 4096;
                      }
                      else {
                        __int16 v77 = 0;
                      }
                      int v78 = *((_WORD *)v40 + 436) & 0xEFFF | (*((unsigned __int8 *)v40 + 874) << 16);
                      *((_WORD *)v40 + 436) = *((_WORD *)v40 + 436) & 0xEFFF | v77;
                      *((unsigned char *)v40 + 874) = BYTE2(v78);
                      id v79 = nw_parameters_copy_effective_proxy_config(v64);
                      if (v79)
                      {
                        __int16 v80 = v79;
                        if (nw_path_has_proxy_config(v74, v79))
                        {
                          *(void *)int buf = os_retain(v80);
                          nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v40 + 36), buf);
                        }
                        os_release(v80);
                      }
                      os_release(v76);
                    }
                    os_release(v74);
                  }
                }
                if (v72) {
                  os_release(v72);
                }
                uint64_t v37 = v70;
                if (v71) {
                  os_release(v71);
                }
              }
              uint64_t v65 = v577;
              uint64_t v66 = (void **)(NWConcrete_nw_resolution_report + 16);
              if (v68)
              {
                os_release(v68);
                uint64_t v66 = (void **)(NWConcrete_nw_resolution_report + 16);
                uint64_t v65 = v577;
              }
            }
            uint64_t v81 = *v63;
            if (*v63)
            {
LABEL_112:
              BOOL v82 = nw_path_uses_interface_type(v81, nw_interface_type_cellular);
              uint64_t v66 = (void **)(NWConcrete_nw_resolution_report + 16);
              uint64_t v65 = v577;
              if (v82) {
                *((void *)v40 + 24) = 1000;
              }
            }
LABEL_114:
            uint64_t v83 = *(unsigned int *)(v65 + 336) + 1;
            uint64_t v84 = v83 << 31 >> 31;
            *(_DWORD *)(v65 + 336) = v83;
            uint64_t v85 = v576;
            if (v84 == v83 && (v84 & 0x8000000000000000) == 0) {
              goto LABEL_266;
            }
            uint64_t v86 = v65;
            __nwlog_obj();
            uint64_t v87 = *(unsigned int *)(v86 + 336);
            *(_DWORD *)int buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = "http1->connections_count";
            *(_WORD *)&unsigned char buf[22] = 2048;
            uint64_t v605 = 1;
            *(_WORD *)v606 = 2048;
            *(void *)&v606[2] = v87;
            uint32_t v88 = (char *)_os_log_send_and_compose_impl();
            type[0] = OS_LOG_TYPE_ERROR;
            LOBYTE(aBlock) = 0;
            if (__nwlog_fault(v88, type, &aBlock))
            {
              if (type[0] == OS_LOG_TYPE_FAULT)
              {
                int64_t v89 = __nwlog_obj();
                os_log_type_t v90 = type[0];
                if (os_log_type_enabled(v89, type[0]))
                {
                  uint64_t v91 = *(unsigned int *)(v577 + 336);
                  *(_DWORD *)int buf = 136446978;
                  *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                  *(_WORD *)&unsigned char buf[12] = 2082;
                  *(void *)&buf[14] = "http1->connections_count";
                  *(_WORD *)&unsigned char buf[22] = 2048;
                  uint64_t v605 = 1;
                  *(_WORD *)v606 = 2048;
                  *(void *)&v606[2] = v91;
                  CFRange v92 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_262:
                  _os_log_impl(&dword_1830D4000, v89, v90, v92, buf, 0x2Au);
                }
              }
              else if ((_BYTE)aBlock)
              {
                uint64_t v118 = v37;
                BOOL v119 = (char *)__nw_create_backtrace_string();
                int64_t v89 = __nwlog_obj();
                os_log_type_t v90 = type[0];
                BOOL v120 = os_log_type_enabled(v89, type[0]);
                if (v119)
                {
                  if (v120)
                  {
                    uint64_t v121 = *(unsigned int *)(v577 + 336);
                    *(_DWORD *)int buf = 136447234;
                    *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                    *(_WORD *)&unsigned char buf[12] = 2082;
                    *(void *)&buf[14] = "http1->connections_count";
                    *(_WORD *)&unsigned char buf[22] = 2048;
                    uint64_t v605 = 1;
                    *(_WORD *)v606 = 2048;
                    *(void *)&v606[2] = v121;
                    *(_WORD *)&v606[10] = 2082;
                    *(void *)&v606[12] = v119;
                    _os_log_impl(&dword_1830D4000, v89, v90, "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
                  }
                  free(v119);
                  uint64_t v37 = v118;
                  goto LABEL_263;
                }
                uint64_t v37 = v118;
                if (v120)
                {
                  uint64_t v187 = *(unsigned int *)(v577 + 336);
                  *(_DWORD *)int buf = 136446978;
                  *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                  *(_WORD *)&unsigned char buf[12] = 2082;
                  *(void *)&buf[14] = "http1->connections_count";
                  *(_WORD *)&unsigned char buf[22] = 2048;
                  uint64_t v605 = 1;
                  *(_WORD *)v606 = 2048;
                  *(void *)&v606[2] = v187;
                  CFRange v92 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
                  goto LABEL_262;
                }
              }
              else
              {
                int64_t v89 = __nwlog_obj();
                os_log_type_t v90 = type[0];
                if (os_log_type_enabled(v89, type[0]))
                {
                  uint64_t v177 = *(unsigned int *)(v577 + 336);
                  *(_DWORD *)int buf = 136446978;
                  *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                  *(_WORD *)&unsigned char buf[12] = 2082;
                  *(void *)&buf[14] = "http1->connections_count";
                  *(_WORD *)&unsigned char buf[22] = 2048;
                  uint64_t v605 = 1;
                  *(_WORD *)v606 = 2048;
                  *(void *)&v606[2] = v177;
                  CFRange v92 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
                  goto LABEL_262;
                }
              }
            }
LABEL_263:
            if (v88) {
              free(v88);
            }
            uint64_t v65 = v577;
            *(_DWORD *)(v577 + 336) = -1;
            uint64_t v85 = v576;
            uint64_t v66 = (void **)(NWConcrete_nw_resolution_report + 16);
LABEL_266:
            uint64_t v188 = *(unsigned int *)(v65 + 360) + 1;
            uint64_t v189 = v188 << 31 >> 31;
            *(_DWORD *)(v65 + 360) = v188;
            if (v189 == v188 && (v189 & 0x8000000000000000) == 0) {
              goto LABEL_285;
            }
            uint64_t v190 = v65;
            __nwlog_obj();
            uint64_t v191 = *(unsigned int *)(v190 + 360);
            *(_DWORD *)int buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = "http1->next_connection_log_num";
            *(_WORD *)&unsigned char buf[22] = 2048;
            uint64_t v605 = 1;
            *(_WORD *)v606 = 2048;
            *(void *)&v606[2] = v191;
            unsigned int v192 = (char *)_os_log_send_and_compose_impl();
            type[0] = OS_LOG_TYPE_ERROR;
            LOBYTE(aBlock) = 0;
            if (__nwlog_fault(v192, type, &aBlock))
            {
              if (type[0] == OS_LOG_TYPE_FAULT)
              {
                unsigned int v193 = __nwlog_obj();
                os_log_type_t v194 = type[0];
                if (os_log_type_enabled(v193, type[0]))
                {
                  uint64_t v195 = *(unsigned int *)(v577 + 360);
                  *(_DWORD *)int buf = 136446978;
                  *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                  *(_WORD *)&unsigned char buf[12] = 2082;
                  *(void *)&buf[14] = "http1->next_connection_log_num";
                  *(_WORD *)&unsigned char buf[22] = 2048;
                  uint64_t v605 = 1;
                  *(_WORD *)v606 = 2048;
                  *(void *)&v606[2] = v195;
                  uint64_t v196 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_281:
                  _os_log_impl(&dword_1830D4000, v193, v194, v196, buf, 0x2Au);
                }
              }
              else if ((_BYTE)aBlock)
              {
                os_log_type_t v197 = v37;
                BOOL v198 = (char *)__nw_create_backtrace_string();
                unsigned int v193 = __nwlog_obj();
                os_log_type_t v194 = type[0];
                BOOL v199 = os_log_type_enabled(v193, type[0]);
                if (v198)
                {
                  if (v199)
                  {
                    uint64_t v200 = *(unsigned int *)(v577 + 360);
                    *(_DWORD *)int buf = 136447234;
                    *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                    *(_WORD *)&unsigned char buf[12] = 2082;
                    *(void *)&buf[14] = "http1->next_connection_log_num";
                    *(_WORD *)&unsigned char buf[22] = 2048;
                    uint64_t v605 = 1;
                    *(_WORD *)v606 = 2048;
                    *(void *)&v606[2] = v200;
                    *(_WORD *)&v606[10] = 2082;
                    *(void *)&v606[12] = v198;
                    _os_log_impl(&dword_1830D4000, v193, v194, "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
                  }
                  free(v198);
                  uint64_t v37 = v197;
                  goto LABEL_282;
                }
                uint64_t v37 = v197;
                if (v199)
                {
                  uint64_t v202 = *(unsigned int *)(v577 + 360);
                  *(_DWORD *)int buf = 136446978;
                  *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                  *(_WORD *)&unsigned char buf[12] = 2082;
                  *(void *)&buf[14] = "http1->next_connection_log_num";
                  *(_WORD *)&unsigned char buf[22] = 2048;
                  uint64_t v605 = 1;
                  *(_WORD *)v606 = 2048;
                  *(void *)&v606[2] = v202;
                  uint64_t v196 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
                  goto LABEL_281;
                }
              }
              else
              {
                unsigned int v193 = __nwlog_obj();
                os_log_type_t v194 = type[0];
                if (os_log_type_enabled(v193, type[0]))
                {
                  uint64_t v201 = *(unsigned int *)(v577 + 360);
                  *(_DWORD *)int buf = 136446978;
                  *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                  *(_WORD *)&unsigned char buf[12] = 2082;
                  *(void *)&buf[14] = "http1->next_connection_log_num";
                  *(_WORD *)&unsigned char buf[22] = 2048;
                  uint64_t v605 = 1;
                  *(_WORD *)v606 = 2048;
                  *(void *)&v606[2] = v201;
                  uint64_t v196 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
                  goto LABEL_281;
                }
              }
            }
LABEL_282:
            if (v192) {
              free(v192);
            }
            LODWORD(v188) = -1;
            *(_DWORD *)(v577 + 360) = -1;
            uint64_t v85 = v576;
            uint64_t v66 = NWConcrete_nw_resolution_report.cache;
LABEL_285:
            *((_DWORD *)v40 + 215) = v188;
            if ((*((unsigned char *)v40 + 158) & 1) == 0)
            {
              if (*((unsigned char *)v66 + 3665))
              {
                v456 = __nwlog_obj();
                if (os_log_type_enabled(v456, OS_LOG_TYPE_DEBUG))
                {
                  uint64_t v457 = *((void *)v40 + 61);
                  int v458 = *(_DWORD *)(*((void *)v40 + 60) + 372);
                  int v459 = *((_DWORD *)v40 + 215);
                  if (v457) {
                    LODWORD(v457) = *(_DWORD *)(v457 + 424);
                  }
                  int v460 = *(_DWORD *)(v577 + 336);
                  *(_DWORD *)int buf = 136448002;
                  *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                  *(_WORD *)&unsigned char buf[12] = 2082;
                  *(void *)&buf[14] = (char *)v40 + 74;
                  *(_WORD *)&unsigned char buf[22] = 2080;
                  uint64_t v605 = (uint64_t)" ";
                  *(_WORD *)v606 = 1024;
                  *(_DWORD *)&v606[2] = v458;
                  *(_WORD *)&v606[6] = 1024;
                  *(_DWORD *)&v606[8] = v459;
                  *(_WORD *)&v606[12] = 1024;
                  *(_DWORD *)&v606[14] = v457;
                  *(_WORD *)&v606[18] = 2048;
                  *(void *)&v606[20] = v40;
                  *(_WORD *)&v606[28] = 1024;
                  *(_DWORD *)&v606[30] = v460;
                  _os_log_impl(&dword_1830D4000, v456, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> added connection %p, now have %u connections", buf, 0x42u);
                  uint64_t v85 = v576;
                }
              }
            }
            if (*(void *)(v85 + 248))
            {
              if (*((void *)v40 + 61))
              {
                __nwlog_obj();
                uint64_t v203 = *((void *)v40 + 61);
                *(_DWORD *)int buf = 136446722;
                *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                *(_WORD *)&unsigned char buf[12] = 2048;
                *(void *)&buf[14] = v40;
                *(_WORD *)&unsigned char buf[22] = 2048;
                uint64_t v605 = v203;
                uint64_t v204 = (char *)_os_log_send_and_compose_impl();
                type[0] = OS_LOG_TYPE_ERROR;
                LOBYTE(aBlock) = 0;
                if (!__nwlog_fault(v204, type, &aBlock)) {
                  goto LABEL_314;
                }
                if (type[0] == OS_LOG_TYPE_FAULT)
                {
                  char v205 = __nwlog_obj();
                  os_log_type_t v206 = type[0];
                  if (!os_log_type_enabled(v205, type[0])) {
                    goto LABEL_314;
                  }
                  uint64_t v207 = *((void *)v40 + 61);
                  *(_DWORD *)int buf = 136446722;
                  *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                  *(_WORD *)&unsigned char buf[12] = 2048;
                  *(void *)&buf[14] = v40;
                  *(_WORD *)&unsigned char buf[22] = 2048;
                  uint64_t v605 = v207;
                  uint64_t v208 = "%{public}s Connection %p already has a stream (%p)";
                }
                else if ((_BYTE)aBlock)
                {
                  BOOL v221 = v37;
                  os_log_type_t v222 = (char *)__nw_create_backtrace_string();
                  char v205 = __nwlog_obj();
                  os_log_type_t v206 = type[0];
                  BOOL v223 = os_log_type_enabled(v205, type[0]);
                  if (v222)
                  {
                    if (v223)
                    {
                      uint64_t v224 = *((void *)v40 + 61);
                      *(_DWORD *)int buf = 136446978;
                      *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                      *(_WORD *)&unsigned char buf[12] = 2048;
                      *(void *)&buf[14] = v40;
                      *(_WORD *)&unsigned char buf[22] = 2048;
                      uint64_t v605 = v224;
                      *(_WORD *)v606 = 2082;
                      *(void *)&v606[2] = v222;
                      _os_log_impl(&dword_1830D4000, v205, v206, "%{public}s Connection %p already has a stream (%p), dumping backtrace:%{public}s", buf, 0x2Au);
                    }
                    free(v222);
                    uint64_t v37 = v221;
                    goto LABEL_314;
                  }
                  uint64_t v37 = v221;
                  if (!v223)
                  {
LABEL_314:
                    if (v204) {
                      free(v204);
                    }
                    goto LABEL_316;
                  }
                  uint64_t v226 = *((void *)v40 + 61);
                  *(_DWORD *)int buf = 136446722;
                  *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                  *(_WORD *)&unsigned char buf[12] = 2048;
                  *(void *)&buf[14] = v40;
                  *(_WORD *)&unsigned char buf[22] = 2048;
                  uint64_t v605 = v226;
                  uint64_t v208 = "%{public}s Connection %p already has a stream (%p), no backtrace";
                }
                else
                {
                  char v205 = __nwlog_obj();
                  os_log_type_t v206 = type[0];
                  if (!os_log_type_enabled(v205, type[0])) {
                    goto LABEL_314;
                  }
                  uint64_t v225 = *((void *)v40 + 61);
                  *(_DWORD *)int buf = 136446722;
                  *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                  *(_WORD *)&unsigned char buf[12] = 2048;
                  *(void *)&buf[14] = v40;
                  *(_WORD *)&unsigned char buf[22] = 2048;
                  uint64_t v605 = v225;
                  uint64_t v208 = "%{public}s Connection %p already has a stream (%p), backtrace limit exceeded";
                }
                _os_log_impl(&dword_1830D4000, v205, v206, v208, buf, 0x20u);
                goto LABEL_314;
              }
              *(void *)(v85 + 256) = v40;
              *((void *)v40 + 61) = v85;
              nw_protocol_set_output_handler(v85, *((void *)v40 + 4));
              nw_protocol_set_input_handler((uint64_t)v40, *(void *)(v85 + 48));
              *(_OWORD *)uint64_t v85 = *v40;
              long long v209 = v575[5];
              long long v211 = v575[2];
              long long v210 = v575[3];
              v40[8] = v575[4];
              v40[9] = v209;
              v40[6] = v211;
              v40[7] = v210;
              long long v212 = v575[1];
              v40[4] = *v575;
              v40[5] = v212;
              nw_http_transaction_metadata_set_connection_metadata(*(void **)(v85 + 352), *((void **)v40 + 96));
              *((_WORD *)v40 + 436) &= 0xFFD7u;
              *((_DWORD *)v40 + 216) = 1;
              if ((*((unsigned char *)v40 + 158) & 1) == 0)
              {
                id v213 = __nwlog_obj();
                if (os_log_type_enabled(v213, OS_LOG_TYPE_DEBUG))
                {
                  uint64_t v214 = *((void *)v40 + 61);
                  int v215 = *(_DWORD *)(*((void *)v40 + 60) + 372);
                  int v216 = *((_DWORD *)v40 + 215);
                  if (v214) {
                    LODWORD(v214) = *(_DWORD *)(v214 + 424);
                  }
                  *(_DWORD *)int buf = 136447490;
                  *(void *)&uint8_t buf[4] = "nw_http1_update_connection_input_state";
                  *(_WORD *)&unsigned char buf[12] = 2082;
                  *(void *)&buf[14] = (char *)v40 + 74;
                  *(_WORD *)&unsigned char buf[22] = 2080;
                  uint64_t v605 = (uint64_t)" ";
                  *(_WORD *)v606 = 1024;
                  *(_DWORD *)&v606[2] = v215;
                  *(_WORD *)&v606[6] = 1024;
                  *(_DWORD *)&v606[8] = v216;
                  *(_WORD *)&v606[12] = 1024;
                  *(_DWORD *)&v606[14] = v214;
                  _os_log_impl(&dword_1830D4000, v213, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> connection input state: reading", buf, 0x32u);
                }
              }
              if ((*(unsigned char *)(v85 + 158) & 1) != 0
                || (os_log_type_t v217 = __nwlog_obj(), !os_log_type_enabled(v217, OS_LOG_TYPE_INFO)))
              {
LABEL_316:
                if (*(unsigned char *)(v85 + 158)) {
                  goto LABEL_321;
                }
                goto LABEL_317;
              }
              uint64_t v218 = *(void *)(v85 + 256);
              int v219 = *(_DWORD *)(*(void *)(v85 + 248) + 372);
              if (v218) {
                LODWORD(v218) = *(_DWORD *)(v218 + 860);
              }
              int v220 = *(_DWORD *)(v85 + 424);
              *(_DWORD *)int buf = 136448002;
              *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
              *(_WORD *)&unsigned char buf[12] = 2082;
              *(void *)&buf[14] = v85 + 74;
              *(_WORD *)&unsigned char buf[22] = 2080;
              uint64_t v605 = (uint64_t)" ";
              *(_WORD *)v606 = 1024;
              *(_DWORD *)&v606[2] = v219;
              *(_WORD *)&v606[6] = 1024;
              *(_DWORD *)&v606[8] = v218;
              *(_WORD *)&v606[12] = 1024;
              *(_DWORD *)&v606[14] = v220;
              *(_WORD *)&v606[18] = 2048;
              *(void *)&v606[20] = v85;
              *(_WORD *)&v606[28] = 2048;
              *(void *)&v606[30] = v40;
              _os_log_impl(&dword_1830D4000, v217, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s<i%u:c%u:s%u> stream (%p) now using connection %p", buf, 0x46u);
              if (*(unsigned char *)(v85 + 158))
              {
LABEL_321:
                nw_http_transaction_metadata_set_first_on_connection(*(void **)(v85 + 352));
                uint64_t v231 = nw_protocol_copy_info((uint64_t)v37, 255);
                id v232 = (void *)v231;
                if (v231
                  && (uint64_t v233 = *(void *)(v231 + 24), *(void *)(v231 + 16) != v233)
                  && (id v234 = *(void **)(v233 - 8)) != 0)
                {
                  os_log_type_t v235 = os_retain(v234);
                  os_log_type_t v236 = v235;
                  if (v235 && nw_protocol_metadata_is_tls(v235))
                  {
                    os_log_type_t v236 = v236;
                    nw_http_connection_metadata_set_sec_metadata(*((void **)v40 + 96), v236);
                    os_release(v236);
                    nw_protocol_connect((uint64_t)v37, (uint64_t)v40);
                    goto LABEL_330;
                  }
                }
                else
                {
                  os_log_type_t v236 = 0;
                }
                if (v40)
                {
                  nw_protocol_connect((uint64_t)v37, (uint64_t)v40);
                  if (!v236) {
                    goto LABEL_331;
                  }
                  goto LABEL_330;
                }
                uint64_t v420 = (uint64_t)v37;
                __nwlog_obj();
                *(_DWORD *)int buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_http1_get_output_protocol";
                v421 = (char *)_os_log_send_and_compose_impl();
                type[0] = OS_LOG_TYPE_ERROR;
                LOBYTE(aBlock) = 0;
                if (__nwlog_fault(v421, type, &aBlock))
                {
                  if (type[0] == OS_LOG_TYPE_FAULT)
                  {
                    v422 = __nwlog_obj();
                    os_log_type_t v423 = type[0];
                    if (!os_log_type_enabled(v422, type[0])) {
                      goto LABEL_766;
                    }
                    *(_DWORD *)int buf = 136446210;
                    *(void *)&uint8_t buf[4] = "nw_http1_get_output_protocol";
                    v424 = "%{public}s called with null connection";
LABEL_765:
                    _os_log_impl(&dword_1830D4000, v422, v423, v424, buf, 0xCu);
                    goto LABEL_766;
                  }
                  if (!(_BYTE)aBlock)
                  {
                    v422 = __nwlog_obj();
                    os_log_type_t v423 = type[0];
                    if (!os_log_type_enabled(v422, type[0])) {
                      goto LABEL_766;
                    }
                    *(_DWORD *)int buf = 136446210;
                    *(void *)&uint8_t buf[4] = "nw_http1_get_output_protocol";
                    v424 = "%{public}s called with null connection, backtrace limit exceeded";
                    goto LABEL_765;
                  }
                  v472 = (char *)__nw_create_backtrace_string();
                  v422 = __nwlog_obj();
                  os_log_type_t v423 = type[0];
                  BOOL v473 = os_log_type_enabled(v422, type[0]);
                  if (!v472)
                  {
                    if (!v473) {
                      goto LABEL_766;
                    }
                    *(_DWORD *)int buf = 136446210;
                    *(void *)&uint8_t buf[4] = "nw_http1_get_output_protocol";
                    v424 = "%{public}s called with null connection, no backtrace";
                    goto LABEL_765;
                  }
                  if (v473)
                  {
                    *(_DWORD *)int buf = 136446466;
                    *(void *)&uint8_t buf[4] = "nw_http1_get_output_protocol";
                    *(_WORD *)&unsigned char buf[12] = 2082;
                    *(void *)&buf[14] = v472;
                    _os_log_impl(&dword_1830D4000, v422, v423, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
                  }
                  free(v472);
                }
LABEL_766:
                if (v421) {
                  free(v421);
                }
                nw_protocol_connect(v420, 0);
                uint64_t v85 = v576;
                if (!v236)
                {
LABEL_331:
                  if (v232) {
                    os_release(v232);
                  }
                  nw_protocol_set_output_handler(v577, 0);
                  *(_WORD *)(v85 + 428) &= ~8u;
                  int v237 = *(_DWORD *)(v577 + 352);
                  *(_DWORD *)(v577 + 352) = v237 - 1;
                  if (v237) {
                    return;
                  }
                  __nwlog_obj();
                  uint64_t v238 = *(unsigned int *)(v577 + 352);
                  *(_DWORD *)int buf = 136446978;
                  *(void *)&uint8_t buf[4] = "nw_http1_create_connection_for_stream_if_allowed";
                  *(_WORD *)&unsigned char buf[12] = 2082;
                  *(void *)&buf[14] = "http1->pending_output_handler_count";
                  *(_WORD *)&unsigned char buf[22] = 2048;
                  uint64_t v605 = 1;
                  *(_WORD *)v606 = 2048;
                  *(void *)&v606[2] = v238;
                  id v239 = (char *)_os_log_send_and_compose_impl();
                  type[0] = OS_LOG_TYPE_ERROR;
                  LOBYTE(aBlock) = 0;
                  if (__nwlog_fault(v239, type, &aBlock))
                  {
                    if (type[0] == OS_LOG_TYPE_FAULT)
                    {
                      nw_endpoint_t v240 = __nwlog_obj();
                      os_log_type_t v241 = type[0];
                      if (os_log_type_enabled(v240, type[0]))
                      {
                        uint64_t v242 = *(unsigned int *)(v577 + 352);
                        *(_DWORD *)int buf = 136446978;
                        *(void *)&uint8_t buf[4] = "nw_http1_create_connection_for_stream_if_allowed";
                        *(_WORD *)&unsigned char buf[12] = 2082;
                        *(void *)&buf[14] = "http1->pending_output_handler_count";
                        *(_WORD *)&unsigned char buf[22] = 2048;
                        uint64_t v605 = 1;
                        *(_WORD *)v606 = 2048;
                        *(void *)&v606[2] = v242;
                        v243 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu";
LABEL_347:
                        _os_log_impl(&dword_1830D4000, v240, v241, v243, buf, 0x2Au);
                      }
                    }
                    else if ((_BYTE)aBlock)
                    {
                      id v244 = (char *)__nw_create_backtrace_string();
                      nw_endpoint_t v240 = __nwlog_obj();
                      os_log_type_t v241 = type[0];
                      BOOL v245 = os_log_type_enabled(v240, type[0]);
                      if (v244)
                      {
                        if (v245)
                        {
                          uint64_t v246 = *(unsigned int *)(v577 + 352);
                          *(_DWORD *)int buf = 136447234;
                          *(void *)&uint8_t buf[4] = "nw_http1_create_connection_for_stream_if_allowed";
                          *(_WORD *)&unsigned char buf[12] = 2082;
                          *(void *)&buf[14] = "http1->pending_output_handler_count";
                          *(_WORD *)&unsigned char buf[22] = 2048;
                          uint64_t v605 = 1;
                          *(_WORD *)v606 = 2048;
                          *(void *)&v606[2] = v246;
                          *(_WORD *)&v606[10] = 2082;
                          *(void *)&v606[12] = v244;
                          _os_log_impl(&dword_1830D4000, v240, v241, "%{public}s Underflow: %{public}s, decrement %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
                        }
                        free(v244);
                        goto LABEL_348;
                      }
                      if (v245)
                      {
                        uint64_t v248 = *(unsigned int *)(v577 + 352);
                        *(_DWORD *)int buf = 136446978;
                        *(void *)&uint8_t buf[4] = "nw_http1_create_connection_for_stream_if_allowed";
                        *(_WORD *)&unsigned char buf[12] = 2082;
                        *(void *)&buf[14] = "http1->pending_output_handler_count";
                        *(_WORD *)&unsigned char buf[22] = 2048;
                        uint64_t v605 = 1;
                        *(_WORD *)v606 = 2048;
                        *(void *)&v606[2] = v248;
                        v243 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, no backtrace";
                        goto LABEL_347;
                      }
                    }
                    else
                    {
                      nw_endpoint_t v240 = __nwlog_obj();
                      os_log_type_t v241 = type[0];
                      if (os_log_type_enabled(v240, type[0]))
                      {
                        uint64_t v247 = *(unsigned int *)(v577 + 352);
                        *(_DWORD *)int buf = 136446978;
                        *(void *)&uint8_t buf[4] = "nw_http1_create_connection_for_stream_if_allowed";
                        *(_WORD *)&unsigned char buf[12] = 2082;
                        *(void *)&buf[14] = "http1->pending_output_handler_count";
                        *(_WORD *)&unsigned char buf[22] = 2048;
                        uint64_t v605 = 1;
                        *(_WORD *)v606 = 2048;
                        *(void *)&v606[2] = v247;
                        v243 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, backtrace limit exceeded";
                        goto LABEL_347;
                      }
                    }
                  }
LABEL_348:
                  if (v239) {
                    free(v239);
                  }
                  *(_DWORD *)(v577 + 352) = 0;
                  return;
                }
LABEL_330:
                os_release(v236);
                goto LABEL_331;
              }
LABEL_317:
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              unint64_t v227 = gLogObj;
              if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
              {
                uint64_t v228 = *(void *)(v85 + 256);
                int v229 = *(_DWORD *)(*(void *)(v85 + 248) + 372);
                if (v228) {
                  LODWORD(v228) = *(_DWORD *)(v228 + 860);
                }
                int v230 = *(_DWORD *)(v85 + 424);
                *(_DWORD *)int buf = 136448258;
                *(void *)&uint8_t buf[4] = "nw_http1_start_new_connection_for_stream";
                *(_WORD *)&unsigned char buf[12] = 2082;
                *(void *)&buf[14] = v85 + 74;
                *(_WORD *)&unsigned char buf[22] = 2080;
                uint64_t v605 = (uint64_t)" ";
                *(_WORD *)v606 = 1024;
                *(_DWORD *)&v606[2] = v229;
                *(_WORD *)&v606[6] = 1024;
                *(_DWORD *)&v606[8] = v228;
                *(_WORD *)&v606[12] = 1024;
                *(_DWORD *)&v606[14] = v230;
                *(_WORD *)&v606[18] = 2048;
                *(void *)&v606[20] = v40;
                *(_WORD *)&v606[28] = 1024;
                *(_DWORD *)&v606[30] = v230;
                *(_WORD *)&v606[34] = 2048;
                *(void *)&v606[36] = v85;
                _os_log_impl(&dword_1830D4000, v227, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> created new connection %p for stream %u (%p)", buf, 0x4Cu);
              }
              goto LABEL_321;
            }
            v425 = v37;
            __nwlog_obj();
            *(_DWORD *)int buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
            v448 = (char *)_os_log_send_and_compose_impl();
            type[0] = OS_LOG_TYPE_ERROR;
            LOBYTE(aBlock) = 0;
            if (!__nwlog_fault(v448, type, &aBlock)) {
              goto LABEL_830;
            }
            if (type[0] == OS_LOG_TYPE_FAULT)
            {
              v449 = __nwlog_obj();
              os_log_type_t v450 = type[0];
              if (!os_log_type_enabled(v449, type[0])) {
                goto LABEL_830;
              }
              *(_DWORD *)int buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
              v451 = "%{public}s called with null http1_stream->protocol_http1";
            }
            else if ((_BYTE)aBlock)
            {
              v517 = (char *)__nw_create_backtrace_string();
              v449 = __nwlog_obj();
              os_log_type_t v450 = type[0];
              BOOL v518 = os_log_type_enabled(v449, type[0]);
              if (v517)
              {
                if (v518)
                {
                  *(_DWORD *)int buf = 136446466;
                  *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                  *(_WORD *)&unsigned char buf[12] = 2082;
                  *(void *)&buf[14] = v517;
                  _os_log_impl(&dword_1830D4000, v449, v450, "%{public}s called with null http1_stream->protocol_http1, dumping backtrace:%{public}s", buf, 0x16u);
                }
                free(v517);
                goto LABEL_830;
              }
              if (!v518)
              {
LABEL_830:
                if (v448) {
                  free(v448);
                }
                goto LABEL_812;
              }
              *(_DWORD *)int buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
              v451 = "%{public}s called with null http1_stream->protocol_http1, no backtrace";
            }
            else
            {
              v449 = __nwlog_obj();
              os_log_type_t v450 = type[0];
              if (!os_log_type_enabled(v449, type[0])) {
                goto LABEL_830;
              }
              *(_DWORD *)int buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
              v451 = "%{public}s called with null http1_stream->protocol_http1, backtrace limit exceeded";
            }
            _os_log_impl(&dword_1830D4000, v449, v450, v451, buf, 0xCu);
            goto LABEL_830;
          }
          v443 = v37;
          __nwlog_obj();
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_http1_set_up_association";
          v444 = (char *)_os_log_send_and_compose_impl();
          type[0] = OS_LOG_TYPE_ERROR;
          LOBYTE(aBlock) = 0;
          if (__nwlog_fault(v444, type, &aBlock))
          {
            if (type[0] == OS_LOG_TYPE_FAULT)
            {
              v445 = __nwlog_obj();
              os_log_type_t v446 = type[0];
              if (!os_log_type_enabled(v445, type[0])) {
                goto LABEL_823;
              }
              *(_DWORD *)int buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_protocol_http1_set_up_association";
              v447 = "%{public}s called with null parameters";
LABEL_822:
              _os_log_impl(&dword_1830D4000, v445, v446, v447, buf, 0xCu);
              goto LABEL_823;
            }
            if (!(_BYTE)aBlock)
            {
              v445 = __nwlog_obj();
              os_log_type_t v446 = type[0];
              if (!os_log_type_enabled(v445, type[0])) {
                goto LABEL_823;
              }
              *(_DWORD *)int buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_protocol_http1_set_up_association";
              v447 = "%{public}s called with null parameters, backtrace limit exceeded";
              goto LABEL_822;
            }
            v515 = (char *)__nw_create_backtrace_string();
            v445 = __nwlog_obj();
            os_log_type_t v446 = type[0];
            BOOL v516 = os_log_type_enabled(v445, type[0]);
            if (!v515)
            {
              if (!v516) {
                goto LABEL_823;
              }
              *(_DWORD *)int buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_protocol_http1_set_up_association";
              v447 = "%{public}s called with null parameters, no backtrace";
              goto LABEL_822;
            }
            if (v516)
            {
              *(_DWORD *)int buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_protocol_http1_set_up_association";
              *(_WORD *)&unsigned char buf[12] = 2082;
              *(void *)&buf[14] = v515;
              _os_log_impl(&dword_1830D4000, v445, v446, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
            }
            free(v515);
          }
LABEL_823:
          if (v444) {
            free(v444);
          }
          uint64_t v65 = v577;
          uint64_t v66 = (void **)(NWConcrete_nw_resolution_report + 16);
          uint64_t v37 = v443;
          uint64_t v81 = *v63;
          if (*v63) {
            goto LABEL_112;
          }
          goto LABEL_114;
        }
        v425 = *(_OWORD **)(v4 + 32);
        __nwlog_obj();
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
        v426 = (char *)_os_log_send_and_compose_impl();
        v599[0] = 16;
        LOBYTE(v580[0]) = 0;
        if (__nwlog_fault(v426, v599, v580))
        {
          if (v599[0] == 17)
          {
            v427 = __nwlog_obj();
            os_log_type_t v428 = v599[0];
            if (!os_log_type_enabled(v427, (os_log_type_t)v599[0])) {
              goto LABEL_777;
            }
            *(_DWORD *)int buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
            v429 = "%{public}s called with null parameters";
            goto LABEL_776;
          }
          if (!LOBYTE(v580[0]))
          {
            v427 = __nwlog_obj();
            os_log_type_t v428 = v599[0];
            if (!os_log_type_enabled(v427, (os_log_type_t)v599[0])) {
              goto LABEL_777;
            }
            *(_DWORD *)int buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
            v429 = "%{public}s called with null parameters, backtrace limit exceeded";
            goto LABEL_776;
          }
          v486 = (char *)__nw_create_backtrace_string();
          v427 = __nwlog_obj();
          os_log_type_t v428 = v599[0];
          BOOL v503 = os_log_type_enabled(v427, (os_log_type_t)v599[0]);
          if (!v486)
          {
            if (!v503) {
              goto LABEL_777;
            }
            *(_DWORD *)int buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
            v429 = "%{public}s called with null parameters, no backtrace";
            goto LABEL_776;
          }
          if (v503)
          {
            *(_DWORD *)int buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = v486;
            v488 = "%{public}s called with null parameters, dumping backtrace:%{public}s";
            goto LABEL_681;
          }
          goto LABEL_682;
        }
LABEL_777:
        if (!v426) {
          goto LABEL_779;
        }
        goto LABEL_778;
      }
      v425 = *(_OWORD **)(v4 + 32);
      __nwlog_obj();
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
      v426 = (char *)_os_log_send_and_compose_impl();
      v599[0] = 16;
      LOBYTE(v580[0]) = 0;
      if (!__nwlog_fault(v426, v599, v580)) {
        goto LABEL_777;
      }
      if (v599[0] != 17)
      {
        if (!LOBYTE(v580[0]))
        {
          v427 = __nwlog_obj();
          os_log_type_t v428 = v599[0];
          if (!os_log_type_enabled(v427, (os_log_type_t)v599[0])) {
            goto LABEL_777;
          }
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
          v429 = "%{public}s called with null endpoint, backtrace limit exceeded";
          goto LABEL_776;
        }
        v486 = (char *)__nw_create_backtrace_string();
        v427 = __nwlog_obj();
        os_log_type_t v428 = v599[0];
        BOOL v487 = os_log_type_enabled(v427, (os_log_type_t)v599[0]);
        if (!v486)
        {
          if (!v487) {
            goto LABEL_777;
          }
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
          v429 = "%{public}s called with null endpoint, no backtrace";
          goto LABEL_776;
        }
        if (v487)
        {
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v486;
          v488 = "%{public}s called with null endpoint, dumping backtrace:%{public}s";
LABEL_681:
          _os_log_impl(&dword_1830D4000, v427, v428, v488, buf, 0x16u);
        }
LABEL_682:
        free(v486);
        if (!v426)
        {
LABEL_779:
          __nwlog_obj();
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
          v546 = (char *)_os_log_send_and_compose_impl();
          type[0] = OS_LOG_TYPE_ERROR;
          LOBYTE(aBlock) = 0;
          if (!__nwlog_fault(v546, type, &aBlock)) {
            goto LABEL_793;
          }
          if (type[0] == OS_LOG_TYPE_FAULT)
          {
            v547 = __nwlog_obj();
            os_log_type_t v548 = type[0];
            if (!os_log_type_enabled(v547, type[0])) {
              goto LABEL_793;
            }
            *(_DWORD *)int buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
            v549 = "%{public}s called with null http1_connection";
          }
          else if ((_BYTE)aBlock)
          {
            v550 = (char *)__nw_create_backtrace_string();
            v547 = __nwlog_obj();
            os_log_type_t v548 = type[0];
            BOOL v551 = os_log_type_enabled(v547, type[0]);
            if (v550)
            {
              if (v551)
              {
                *(_DWORD *)int buf = 136446466;
                *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                *(_WORD *)&unsigned char buf[12] = 2082;
                *(void *)&buf[14] = v550;
                _os_log_impl(&dword_1830D4000, v547, v548, "%{public}s called with null http1_connection, dumping backtrace:%{public}s", buf, 0x16u);
              }
              free(v550);
LABEL_793:
              if (v546) {
                free(v546);
              }
              __nwlog_obj();
              *(_DWORD *)int buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
              v552 = (char *)_os_log_send_and_compose_impl();
              type[0] = OS_LOG_TYPE_ERROR;
              LOBYTE(aBlock) = 0;
              if (!__nwlog_fault(v552, type, &aBlock)) {
                goto LABEL_809;
              }
              if (type[0] == OS_LOG_TYPE_FAULT)
              {
                v553 = __nwlog_obj();
                os_log_type_t v554 = type[0];
                if (os_log_type_enabled(v553, type[0]))
                {
                  *(_DWORD *)int buf = 136446210;
                  *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                  v555 = "%{public}s called with null http1_connection";
LABEL_808:
                  _os_log_impl(&dword_1830D4000, v553, v554, v555, buf, 0xCu);
                }
              }
              else if ((_BYTE)aBlock)
              {
                v556 = (char *)__nw_create_backtrace_string();
                v553 = __nwlog_obj();
                os_log_type_t v554 = type[0];
                BOOL v557 = os_log_type_enabled(v553, type[0]);
                if (v556)
                {
                  if (v557)
                  {
                    *(_DWORD *)int buf = 136446466;
                    *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                    *(_WORD *)&unsigned char buf[12] = 2082;
                    *(void *)&buf[14] = v556;
                    _os_log_impl(&dword_1830D4000, v553, v554, "%{public}s called with null http1_connection, dumping backtrace:%{public}s", buf, 0x16u);
                  }
                  free(v556);
                  goto LABEL_809;
                }
                if (v557)
                {
                  *(_DWORD *)int buf = 136446210;
                  *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                  v555 = "%{public}s called with null http1_connection, no backtrace";
                  goto LABEL_808;
                }
              }
              else
              {
                v553 = __nwlog_obj();
                os_log_type_t v554 = type[0];
                if (os_log_type_enabled(v553, type[0]))
                {
                  *(_DWORD *)int buf = 136446210;
                  *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                  v555 = "%{public}s called with null http1_connection, backtrace limit exceeded";
                  goto LABEL_808;
                }
              }
LABEL_809:
              if (v552) {
                free(v552);
              }
              os_log_type_t v40 = 0;
LABEL_812:
              uint64_t v85 = v576;
              uint64_t v37 = v425;
              if (*(unsigned char *)(v576 + 158)) {
                goto LABEL_321;
              }
              goto LABEL_317;
            }
            if (!v551) {
              goto LABEL_793;
            }
            *(_DWORD *)int buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
            v549 = "%{public}s called with null http1_connection, no backtrace";
          }
          else
          {
            v547 = __nwlog_obj();
            os_log_type_t v548 = type[0];
            if (!os_log_type_enabled(v547, type[0])) {
              goto LABEL_793;
            }
            *(_DWORD *)int buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
            v549 = "%{public}s called with null http1_connection, backtrace limit exceeded";
          }
          _os_log_impl(&dword_1830D4000, v547, v548, v549, buf, 0xCu);
          goto LABEL_793;
        }
LABEL_778:
        free(v426);
        goto LABEL_779;
      }
      v427 = __nwlog_obj();
      os_log_type_t v428 = v599[0];
      if (!os_log_type_enabled(v427, (os_log_type_t)v599[0])) {
        goto LABEL_777;
      }
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
      v429 = "%{public}s called with null endpoint";
    }
    else
    {
      v425 = 0;
      __nwlog_obj();
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
      v426 = (char *)_os_log_send_and_compose_impl();
      v599[0] = 16;
      LOBYTE(v580[0]) = 0;
      if (!__nwlog_fault(v426, v599, v580)) {
        goto LABEL_777;
      }
      if (v599[0] != 17)
      {
        if (!LOBYTE(v580[0]))
        {
          v427 = __nwlog_obj();
          os_log_type_t v428 = v599[0];
          if (!os_log_type_enabled(v427, (os_log_type_t)v599[0])) {
            goto LABEL_777;
          }
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
          v429 = "%{public}s called with null output_handler, backtrace limit exceeded";
          goto LABEL_776;
        }
        v484 = (char *)__nw_create_backtrace_string();
        v427 = __nwlog_obj();
        os_log_type_t v428 = v599[0];
        BOOL v485 = os_log_type_enabled(v427, (os_log_type_t)v599[0]);
        if (!v484)
        {
          if (!v485) {
            goto LABEL_777;
          }
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
          v429 = "%{public}s called with null output_handler, no backtrace";
          goto LABEL_776;
        }
        if (v485)
        {
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v484;
          _os_log_impl(&dword_1830D4000, v427, v428, "%{public}s called with null output_handler, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v484);
        goto LABEL_777;
      }
      v427 = __nwlog_obj();
      os_log_type_t v428 = v599[0];
      if (!os_log_type_enabled(v427, (os_log_type_t)v599[0])) {
        goto LABEL_777;
      }
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http1_connection_create";
      v429 = "%{public}s called with null output_handler";
    }
LABEL_776:
    _os_log_impl(&dword_1830D4000, v427, v428, v429, buf, 0xCu);
    goto LABEL_777;
  }
  if ((*(unsigned char *)(v2 + 158) & 1) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v26 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
    {
      int v29 = *(_DWORD *)(v577 + 372);
      *(_DWORD *)int buf = 136446978;
      *(void *)&uint8_t buf[4] = "nw_http1_match_idle_connection_with_pending_stream";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = v577 + 74;
      *(_WORD *)&unsigned char buf[22] = 2080;
      uint64_t v605 = (uint64_t)" ";
      *(_WORD *)v606 = 1024;
      *(_DWORD *)&v606[2] = v29;
      id v28 = "%{public}s %{public}s%s<i%u> no pending streams, nothing to do";
      goto LABEL_40;
    }
  }
}

id nw_endpoint_create_custom(unsigned int a1, void *a2, void *a3)
{
  *(void *)&v64[13] = *MEMORY[0x1E4F143B8];
  id v6 = a2;
  id v7 = a3;
  if (v6)
  {
    uint64_t v8 = [NWConcrete_nw_custom_endpoint alloc];
    id v9 = v7;
    os_log_type_t v10 = v6;
    int v11 = v10;
    if (!v8) {
      goto LABEL_21;
    }
    if (a1 <= 0x3E7)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v12 = (id)gLogObj;
      *(_DWORD *)int buf = 136446466;
      int v62 = "-[NWConcrete_nw_custom_endpoint initWithType:resolver:data:]";
      __int16 v63 = 1024;
      *(_DWORD *)__int16 v64 = 1000;
      os_log_type_t v13 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v59 = 0;
      if (__nwlog_fault(v13, &type, &v59))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          char v14 = (id)gLogObj;
          os_log_type_t v15 = type;
          if (os_log_type_enabled(v14, type))
          {
            *(_DWORD *)int buf = 136446466;
            int v62 = "-[NWConcrete_nw_custom_endpoint initWithType:resolver:data:]";
            __int16 v63 = 1024;
            *(_DWORD *)__int16 v64 = 1000;
            _os_log_impl(&dword_1830D4000, v14, v15, "%{public}s Custom endpoint type values must start at %d", buf, 0x12u);
          }
        }
        else if (v59)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          char v14 = (id)gLogObj;
          os_log_type_t v34 = type;
          BOOL v35 = os_log_type_enabled(v14, type);
          if (backtrace_string)
          {
            if (v35)
            {
              *(_DWORD *)int buf = 136446722;
              int v62 = "-[NWConcrete_nw_custom_endpoint initWithType:resolver:data:]";
              __int16 v63 = 1024;
              *(_DWORD *)__int16 v64 = 1000;
              v64[2] = 2082;
              *(void *)&v64[3] = backtrace_string;
              _os_log_impl(&dword_1830D4000, v14, v34, "%{public}s Custom endpoint type values must start at %d, dumping backtrace:%{public}s", buf, 0x1Cu);
            }

            free(backtrace_string);
            if (!v13) {
              goto LABEL_20;
            }
            goto LABEL_10;
          }
          if (v35)
          {
            *(_DWORD *)int buf = 136446466;
            int v62 = "-[NWConcrete_nw_custom_endpoint initWithType:resolver:data:]";
            __int16 v63 = 1024;
            *(_DWORD *)__int16 v64 = 1000;
            _os_log_impl(&dword_1830D4000, v14, v34, "%{public}s Custom endpoint type values must start at %d, no backtrace", buf, 0x12u);
          }
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          char v14 = (id)gLogObj;
          os_log_type_t v40 = type;
          if (os_log_type_enabled(v14, type))
          {
            *(_DWORD *)int buf = 136446466;
            int v62 = "-[NWConcrete_nw_custom_endpoint initWithType:resolver:data:]";
            __int16 v63 = 1024;
            *(_DWORD *)__int16 v64 = 1000;
            _os_log_impl(&dword_1830D4000, v14, v40, "%{public}s Custom endpoint type values must start at %d, backtrace limit exceeded", buf, 0x12u);
          }
        }
      }
      if (v13) {
LABEL_10:
      }
        free(v13);
LABEL_20:

      goto LABEL_21;
    }
    if (dispatch_data_get_size(v10) >= 0x401)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v16 = (id)gLogObj;
      *(_DWORD *)int buf = 136446466;
      int v62 = "-[NWConcrete_nw_custom_endpoint initWithType:resolver:data:]";
      __int16 v63 = 1024;
      *(_DWORD *)__int16 v64 = 1024;
      BOOL v17 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v59 = 0;
      if (__nwlog_fault(v17, &type, &v59))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v18 = (id)gLogObj;
          os_log_type_t v19 = type;
          if (os_log_type_enabled(v18, type))
          {
            *(_DWORD *)int buf = 136446466;
            int v62 = "-[NWConcrete_nw_custom_endpoint initWithType:resolver:data:]";
            __int16 v63 = 1024;
            *(_DWORD *)__int16 v64 = 1024;
            _os_log_impl(&dword_1830D4000, v18, v19, "%{public}s Custom data size must be no larger than %d", buf, 0x12u);
          }
        }
        else if (v59)
        {
          uint64_t v37 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v18 = (id)gLogObj;
          os_log_type_t v38 = type;
          BOOL v39 = os_log_type_enabled(v18, type);
          if (v37)
          {
            if (v39)
            {
              *(_DWORD *)int buf = 136446722;
              int v62 = "-[NWConcrete_nw_custom_endpoint initWithType:resolver:data:]";
              __int16 v63 = 1024;
              *(_DWORD *)__int16 v64 = 1024;
              v64[2] = 2082;
              *(void *)&v64[3] = v37;
              _os_log_impl(&dword_1830D4000, v18, v38, "%{public}s Custom data size must be no larger than %d, dumping backtrace:%{public}s", buf, 0x1Cu);
            }

            free(v37);
            if (!v17) {
              goto LABEL_20;
            }
            goto LABEL_19;
          }
          if (v39)
          {
            *(_DWORD *)int buf = 136446466;
            int v62 = "-[NWConcrete_nw_custom_endpoint initWithType:resolver:data:]";
            __int16 v63 = 1024;
            *(_DWORD *)__int16 v64 = 1024;
            _os_log_impl(&dword_1830D4000, v18, v38, "%{public}s Custom data size must be no larger than %d, no backtrace", buf, 0x12u);
          }
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v18 = (id)gLogObj;
          os_log_type_t v41 = type;
          if (os_log_type_enabled(v18, type))
          {
            *(_DWORD *)int buf = 136446466;
            int v62 = "-[NWConcrete_nw_custom_endpoint initWithType:resolver:data:]";
            __int16 v63 = 1024;
            *(_DWORD *)__int16 v64 = 1024;
            _os_log_impl(&dword_1830D4000, v18, v41, "%{public}s Custom data size must be no larger than %d, backtrace limit exceeded", buf, 0x12u);
          }
        }
      }
      if (!v17) {
        goto LABEL_20;
      }
LABEL_19:
      free(v17);
      goto LABEL_20;
    }
    v58.os_log_type_t receiver = v8;
    v58.super_class = (Class)NWConcrete_nw_custom_endpoint;
    id v28 = objc_msgSendSuper2(&v58, sel_init);
    id v29 = v28;
    if (v28)
    {
      v28[62] = a1;
      os_log_type_t v30 = _Block_copy(v9);
      uint64_t v31 = (void *)*((void *)v29 + 30);
      *((void *)v29 + 30) = v30;

      objc_storeStrong((id *)v29 + 29, a2);
      id v24 = v29;
      goto LABEL_37;
    }
    id v49 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    int v62 = "-[NWConcrete_nw_custom_endpoint initWithType:resolver:data:]";
    char v50 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v59 = 0;
    if (__nwlog_fault(v50, &type, &v59))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v51 = __nwlog_obj();
        os_log_type_t v52 = type;
        if (os_log_type_enabled(v51, type))
        {
          *(_DWORD *)int buf = 136446210;
          int v62 = "-[NWConcrete_nw_custom_endpoint initWithType:resolver:data:]";
          _os_log_impl(&dword_1830D4000, v51, v52, "%{public}s [super init] failed", buf, 0xCu);
        }
      }
      else if (v59)
      {
        char v54 = (char *)__nw_create_backtrace_string();
        uint64_t v51 = __nwlog_obj();
        os_log_type_t v55 = type;
        BOOL v56 = os_log_type_enabled(v51, type);
        if (v54)
        {
          if (v56)
          {
            *(_DWORD *)int buf = 136446466;
            int v62 = "-[NWConcrete_nw_custom_endpoint initWithType:resolver:data:]";
            __int16 v63 = 2082;
            *(void *)__int16 v64 = v54;
            _os_log_impl(&dword_1830D4000, v51, v55, "%{public}s [super init] failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v54);
          goto LABEL_104;
        }
        if (v56)
        {
          *(_DWORD *)int buf = 136446210;
          int v62 = "-[NWConcrete_nw_custom_endpoint initWithType:resolver:data:]";
          _os_log_impl(&dword_1830D4000, v51, v55, "%{public}s [super init] failed, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        uint64_t v51 = __nwlog_obj();
        os_log_type_t v57 = type;
        if (os_log_type_enabled(v51, type))
        {
          *(_DWORD *)int buf = 136446210;
          int v62 = "-[NWConcrete_nw_custom_endpoint initWithType:resolver:data:]";
          _os_log_impl(&dword_1830D4000, v51, v57, "%{public}s [super init] failed, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_104:
    if (v50) {
      free(v50);
    }
LABEL_21:

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v20 = (id)gLogObj;
    *(_DWORD *)int buf = 136446210;
    int v62 = "nw_endpoint_create_custom";
    int v21 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(v58.receiver) = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v21, &v58, &type))
    {
      if (LOBYTE(v58.receiver) == 17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v22 = (id)gLogObj;
        os_log_type_t receiver = (os_log_type_t)v58.receiver;
        if (os_log_type_enabled(v22, (os_log_type_t)v58.receiver))
        {
          *(_DWORD *)int buf = 136446210;
          int v62 = "nw_endpoint_create_custom";
          _os_log_impl(&dword_1830D4000, v22, receiver, "%{public}s NWOSCustomEndpoint alloc/init failed", buf, 0xCu);
        }
      }
      else if (type)
      {
        uint32_t v25 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v22 = (id)gLogObj;
        os_log_type_t v26 = (os_log_type_t)v58.receiver;
        BOOL v27 = os_log_type_enabled(v22, (os_log_type_t)v58.receiver);
        if (v25)
        {
          if (v27)
          {
            *(_DWORD *)int buf = 136446466;
            int v62 = "nw_endpoint_create_custom";
            __int16 v63 = 2082;
            *(void *)__int16 v64 = v25;
            _os_log_impl(&dword_1830D4000, v22, v26, "%{public}s NWOSCustomEndpoint alloc/init failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v25);
          if (!v21) {
            goto LABEL_28;
          }
          goto LABEL_27;
        }
        if (v27)
        {
          *(_DWORD *)int buf = 136446210;
          int v62 = "nw_endpoint_create_custom";
          _os_log_impl(&dword_1830D4000, v22, v26, "%{public}s NWOSCustomEndpoint alloc/init failed, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v22 = (id)gLogObj;
        os_log_type_t v36 = (os_log_type_t)v58.receiver;
        if (os_log_type_enabled(v22, (os_log_type_t)v58.receiver))
        {
          *(_DWORD *)int buf = 136446210;
          int v62 = "nw_endpoint_create_custom";
          _os_log_impl(&dword_1830D4000, v22, v36, "%{public}s NWOSCustomEndpoint alloc/init failed, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
    if (!v21)
    {
LABEL_28:
      id v24 = 0;
LABEL_37:

      goto LABEL_38;
    }
LABEL_27:
    free(v21);
    goto LABEL_28;
  }
  nw_endpoint_t v42 = __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  int v62 = "nw_endpoint_create_custom";
  char v43 = (char *)_os_log_send_and_compose_impl();

  LOBYTE(v58.receiver) = 16;
  os_log_type_t type = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v43, &v58, &type))
  {
    if (LOBYTE(v58.receiver) == 17)
    {
      BOOL v44 = __nwlog_obj();
      os_log_type_t v45 = (os_log_type_t)v58.receiver;
      if (os_log_type_enabled(v44, (os_log_type_t)v58.receiver))
      {
        *(_DWORD *)int buf = 136446210;
        int v62 = "nw_endpoint_create_custom";
        _os_log_impl(&dword_1830D4000, v44, v45, "%{public}s called with null custom_data", buf, 0xCu);
      }
    }
    else if (type)
    {
      char v46 = (char *)__nw_create_backtrace_string();
      BOOL v44 = __nwlog_obj();
      os_log_type_t v47 = (os_log_type_t)v58.receiver;
      BOOL v48 = os_log_type_enabled(v44, (os_log_type_t)v58.receiver);
      if (v46)
      {
        if (v48)
        {
          *(_DWORD *)int buf = 136446466;
          int v62 = "nw_endpoint_create_custom";
          __int16 v63 = 2082;
          *(void *)__int16 v64 = v46;
          _os_log_impl(&dword_1830D4000, v44, v47, "%{public}s called with null custom_data, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v46);
        goto LABEL_95;
      }
      if (v48)
      {
        *(_DWORD *)int buf = 136446210;
        int v62 = "nw_endpoint_create_custom";
        _os_log_impl(&dword_1830D4000, v44, v47, "%{public}s called with null custom_data, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v44 = __nwlog_obj();
      os_log_type_t v53 = (os_log_type_t)v58.receiver;
      if (os_log_type_enabled(v44, (os_log_type_t)v58.receiver))
      {
        *(_DWORD *)int buf = 136446210;
        int v62 = "nw_endpoint_create_custom";
        _os_log_impl(&dword_1830D4000, v44, v53, "%{public}s called with null custom_data, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_95:
  if (v43) {
    free(v43);
  }
  id v24 = 0;
LABEL_38:

  return v24;
}

void sub_1834286E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

__n128 __swift_memcpy25_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

BOOL nw_http_metadata_is_capsule(void *a1)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (!v1)
  {
    uint64_t v8 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint32_t v25 = "nw_http_metadata_is_capsule";
    id v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (!__nwlog_fault(v9, &type, &v22)) {
      goto LABEL_39;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint32_t v25 = "nw_http_metadata_is_capsule";
        _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null metadata", buf, 0xCu);
      }
      goto LABEL_38;
    }
    if (!v22)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint32_t v25 = "nw_http_metadata_is_capsule";
        _os_log_impl(&dword_1830D4000, v10, v19, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_38;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v10 = __nwlog_obj();
    os_log_type_t v15 = type;
    BOOL v16 = os_log_type_enabled(v10, type);
    if (!backtrace_string)
    {
      if (v16)
      {
        *(_DWORD *)int buf = 136446210;
        uint32_t v25 = "nw_http_metadata_is_capsule";
        _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
      goto LABEL_38;
    }
    if (v16)
    {
      *(_DWORD *)int buf = 136446466;
      uint32_t v25 = "nw_http_metadata_is_capsule";
      __int16 v26 = 2082;
      BOOL v27 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_26;
  }
  id v3 = v1;
  id v4 = *((id *)v3 + 1);

  if (nw_protocol_copy_http_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_15_74223);
  }
  BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v4, nw_protocol_copy_http_definition_http_definition);

  if (!is_equal_unsafe)
  {
    id v12 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint32_t v25 = "nw_http_metadata_is_capsule";
    id v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (!__nwlog_fault(v9, &type, &v22)) {
      goto LABEL_39;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint32_t v25 = "nw_http_metadata_is_capsule";
        _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s metadata must be http", buf, 0xCu);
      }
LABEL_38:

LABEL_39:
      if (v9) {
        free(v9);
      }
      goto LABEL_41;
    }
    if (!v22)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint32_t v25 = "nw_http_metadata_is_capsule";
        _os_log_impl(&dword_1830D4000, v10, v20, "%{public}s metadata must be http, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_38;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v10 = __nwlog_obj();
    os_log_type_t v17 = type;
    BOOL v18 = os_log_type_enabled(v10, type);
    if (!backtrace_string)
    {
      if (v18)
      {
        *(_DWORD *)int buf = 136446210;
        uint32_t v25 = "nw_http_metadata_is_capsule";
        _os_log_impl(&dword_1830D4000, v10, v17, "%{public}s metadata must be http, no backtrace", buf, 0xCu);
      }
      goto LABEL_38;
    }
    if (v18)
    {
      *(_DWORD *)int buf = 136446466;
      uint32_t v25 = "nw_http_metadata_is_capsule";
      __int16 v26 = 2082;
      BOOL v27 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v10, v17, "%{public}s metadata must be http, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_26:

    free(backtrace_string);
    goto LABEL_39;
  }
  uint64_t v6 = *((void *)v3 + 4);
  if (!v6)
  {
LABEL_41:
    BOOL v7 = 0;
    goto LABEL_42;
  }
  BOOL v7 = __nw_http_metadata_is_capsule_block_invoke((uint64_t)&__block_literal_global_70, v6);
LABEL_42:

  return v7;
}

void nw_http_messaging_options_create_transaction_in_parameters(void *a1, uint64_t a2, int a3)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  uint64_t v6 = v5;
  if (v5)
  {
    id http_messaging_options = nw_parameters_find_http_messaging_options(v5, a2);
    uint64_t v8 = http_messaging_options;
    if (http_messaging_options)
    {
      id v9 = nw_http_messaging_options_copy_client_metadata(http_messaging_options);
      nw_http_client_metadata_create_next_transaction(v9, a3);

LABEL_4:
      goto LABEL_5;
    }
    os_log_type_t v15 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    BOOL v27 = "nw_http_messaging_options_create_transaction_in_parameters";
    BOOL v16 = (void *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (!__nwlog_fault((const char *)v16, &type, &v24))
    {
LABEL_38:
      if (v16) {
        free(v16);
      }
      goto LABEL_4;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v17 = __nwlog_obj();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v17, type))
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v27 = "nw_http_messaging_options_create_transaction_in_parameters";
        os_log_type_t v19 = "%{public}s called with null messaging_options";
LABEL_36:
        _os_log_impl(&dword_1830D4000, v17, v18, v19, buf, 0xCu);
      }
    }
    else
    {
      if (v24)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v17 = __nwlog_obj();
        os_log_type_t v18 = type;
        BOOL v23 = os_log_type_enabled(v17, type);
        if (backtrace_string)
        {
          if (v23)
          {
            *(_DWORD *)int buf = 136446466;
            BOOL v27 = "nw_http_messaging_options_create_transaction_in_parameters";
            __int16 v28 = 2082;
            id v29 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v17, v18, "%{public}s called with null messaging_options, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_38;
        }
        if (!v23) {
          goto LABEL_37;
        }
        *(_DWORD *)int buf = 136446210;
        BOOL v27 = "nw_http_messaging_options_create_transaction_in_parameters";
        os_log_type_t v19 = "%{public}s called with null messaging_options, no backtrace";
        goto LABEL_36;
      }
      os_log_type_t v17 = __nwlog_obj();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v17, type))
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v27 = "nw_http_messaging_options_create_transaction_in_parameters";
        os_log_type_t v19 = "%{public}s called with null messaging_options, backtrace limit exceeded";
        goto LABEL_36;
      }
    }
LABEL_37:

    goto LABEL_38;
  }
  os_log_type_t v10 = __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  BOOL v27 = "nw_http_messaging_options_create_transaction_in_parameters";
  os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v24 = 0;
  if (__nwlog_fault(v11, &type, &v24))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v12 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v27 = "nw_http_messaging_options_create_transaction_in_parameters";
        char v14 = "%{public}s called with null parameters";
LABEL_30:
        _os_log_impl(&dword_1830D4000, v12, v13, v14, buf, 0xCu);
      }
    }
    else
    {
      if (v24)
      {
        os_log_type_t v20 = (char *)__nw_create_backtrace_string();
        id v12 = __nwlog_obj();
        os_log_type_t v13 = type;
        BOOL v21 = os_log_type_enabled(v12, type);
        if (v20)
        {
          if (v21)
          {
            *(_DWORD *)int buf = 136446466;
            BOOL v27 = "nw_http_messaging_options_create_transaction_in_parameters";
            __int16 v28 = 2082;
            id v29 = v20;
            _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v20);
          goto LABEL_32;
        }
        if (!v21) {
          goto LABEL_31;
        }
        *(_DWORD *)int buf = 136446210;
        BOOL v27 = "nw_http_messaging_options_create_transaction_in_parameters";
        char v14 = "%{public}s called with null parameters, no backtrace";
        goto LABEL_30;
      }
      id v12 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v27 = "nw_http_messaging_options_create_transaction_in_parameters";
        char v14 = "%{public}s called with null parameters, backtrace limit exceeded";
        goto LABEL_30;
      }
    }
LABEL_31:
  }
LABEL_32:
  if (v11) {
    free(v11);
  }
LABEL_5:
}

void sub_183429794(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL nw_endpoint_proxy_receive_report(void *a1, uint64_t a2, int a3, _WORD *a4, void *a5, void *a6)
{
  uint64_t v500 = *MEMORY[0x1E4F143B8];
  id v9 = a1;
  id v472 = a5;
  id v10 = a6;
  BOOL v473 = v10;
  v474 = v9;
  if (!v10)
  {
    uint64_t v306 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    int v481 = "nw_endpoint_proxy_receive_report";
    uint64_t v307 = (char *)_os_log_send_and_compose_impl();

    uu[0] = 16;
    char v478 = 0;
    if (__nwlog_fault(v307, uu, &v478))
    {
      if (uu[0] == 17)
      {
        uint64_t v308 = __nwlog_obj();
        os_log_type_t v309 = uu[0];
        if (os_log_type_enabled(v308, (os_log_type_t)uu[0]))
        {
          *(_DWORD *)int buf = 136446210;
          int v481 = "nw_endpoint_proxy_receive_report";
          _os_log_impl(&dword_1830D4000, v308, v309, "%{public}s called with null handler", buf, 0xCu);
        }
      }
      else if (v478)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        uint64_t v308 = __nwlog_obj();
        os_log_type_t v313 = uu[0];
        BOOL v314 = os_log_type_enabled(v308, (os_log_type_t)uu[0]);
        if (backtrace_string)
        {
          if (v314)
          {
            *(_DWORD *)int buf = 136446466;
            int v481 = "nw_endpoint_proxy_receive_report";
            __int16 v482 = 2082;
            uint64_t v483 = (uint64_t)backtrace_string;
            _os_log_impl(&dword_1830D4000, v308, v313, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_357;
        }
        if (v314)
        {
          *(_DWORD *)int buf = 136446210;
          int v481 = "nw_endpoint_proxy_receive_report";
          _os_log_impl(&dword_1830D4000, v308, v313, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        uint64_t v308 = __nwlog_obj();
        os_log_type_t v315 = uu[0];
        if (os_log_type_enabled(v308, (os_log_type_t)uu[0]))
        {
          *(_DWORD *)int buf = 136446210;
          int v481 = "nw_endpoint_proxy_receive_report";
          _os_log_impl(&dword_1830D4000, v308, v315, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_357:
    if (v307) {
      free(v307);
    }
    goto LABEL_18;
  }
  os_log_type_t v11 = (unsigned int *)v10;
  uint64_t v12 = v11[29];

  if (v12 != 3)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint32_t v25 = (id)gLogObj;
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      if (v12 > 5) {
        __int16 v26 = "unknown-mode";
      }
      else {
        __int16 v26 = off_1E523FB08[v12];
      }
      *(_DWORD *)int buf = 136446722;
      int v481 = "nw_endpoint_proxy_receive_report";
      __int16 v482 = 2082;
      uint64_t v483 = (uint64_t)v26;
      __int16 v484 = 2082;
      uint64_t v485 = (uint64_t)"proxy";
      _os_log_impl(&dword_1830D4000, v25, OS_LOG_TYPE_DEFAULT, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
    }

LABEL_18:
    uint64_t v27 = 0;
LABEL_221:

    return v27;
  }
  os_log_type_t v13 = v11;
  char v14 = *((unsigned char *)v13 + 268);
  v471 = (NWConcrete_nw_endpoint_handler *)v13;

  int v464 = a3;
  if ((v14 & 0x20) == 0)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
    }
    os_log_type_t v15 = (id)gconnectionLogObj;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
    {
      CFTypeRef log = v15;
      BOOL v16 = v471;

      os_log_type_t v17 = v16;
      char v18 = *((unsigned char *)v471 + 268);

      if (v18) {
        os_log_type_t v19 = "dry-run ";
      }
      else {
        os_log_type_t v19 = "";
      }
      nw_endpoint_t v460 = nw_endpoint_handler_copy_endpoint(v17);
      logging_description = nw_endpoint_get_logging_description(v460);
      BOOL v21 = v17;
      char v22 = v21;
      uint64_t v23 = v21[30];
      if (v23 > 5) {
        char v24 = "unknown-state";
      }
      else {
        char v24 = off_1E523FB38[v23];
      }
      int v455 = v24;

      __int16 v28 = v22;
      uint64_t v457 = logging_description;
      id v29 = "path";
      switch(v11[29])
      {
        case 0u:
          break;
        case 1u:
          id v29 = "resolver";
          break;
        case 2u:
          id v29 = nw_endpoint_flow_mode_string(v28[31]);
          break;
        case 3u:
          id v29 = "proxy";
          break;
        case 4u:
          id v29 = "fallback";
          break;
        case 5u:
          id v29 = "transform";
          break;
        default:
          id v29 = "unknown-mode";
          break;
      }
      v452 = v29;

      uint64_t v30 = v28;
      os_unfair_lock_lock((os_unfair_lock_t)v30 + 28);
      id v31 = v30[8];
      os_unfair_lock_unlock((os_unfair_lock_t)v30 + 28);

      id v32 = v31;
      id_string = nw_endpoint_handler_get_id_string(v9);
      os_log_type_t v34 = nw_endpoint_handler_dry_run_string(v9);
      nw_endpoint_t v35 = nw_endpoint_handler_copy_endpoint(v9);
      os_log_type_t v36 = v19;
      os_log_type_t v450 = a5;
      uint64_t v37 = nw_endpoint_get_logging_description(v35);
      id_str = v16->id_str;
      BOOL v39 = nw_endpoint_handler_state_string(v474);
      os_log_type_t v40 = nw_endpoint_handler_mode_string(v474);
      id v41 = nw_endpoint_handler_copy_current_path(v474);
      *(_DWORD *)int buf = 136449282;
      int v481 = "nw_endpoint_proxy_receive_report";
      __int16 v482 = 2082;
      uint64_t v483 = (uint64_t)id_str;
      __int16 v484 = 2082;
      uint64_t v485 = (uint64_t)v36;
      __int16 v486 = 2082;
      BOOL v487 = v457;
      __int16 v488 = 2082;
      v489 = v455;
      __int16 v490 = 2082;
      v491 = v452;
      __int16 v492 = 2114;
      id v493 = v32;
      __int16 v494 = 2082;
      *(void *)v495 = id_string;
      *(_WORD *)&v495[8] = 2082;
      *(void *)&v495[10] = v34;
      *(_WORD *)&v495[18] = 2082;
      *(void *)&v495[20] = v37;
      *(_WORD *)&v495[28] = 2082;
      *(void *)&v495[30] = v39;
      __int16 v496 = 2082;
      os_log_type_t v497 = v40;
      __int16 v498 = 2114;
      id v499 = v41;
      os_log_type_t v15 = log;
      _os_log_impl(&dword_1830D4000, log, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] received child report: [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] ", buf, 0x84u);

      a5 = v450;
    }

    id v9 = v474;
    a3 = v464;
  }
  nw_endpoint_t v42 = nw_endpoint_handler_copy_proxy(v471);
  char v43 = (id *)((char *)v42 + 32);
  os_log_t loga = (os_log_t)v42;
  if (*((NWConcrete_nw_endpoint_handler **)v42 + 4) == v9)
  {
    nw_endpoint_handler_report(v471, v9, a4, v472);
    char v50 = v471;
    v50->int state = a3;

    nw_endpoint_handler_report(v50, 0, a4, 0);
LABEL_220:

    uint64_t v27 = 1;
    goto LABEL_221;
  }
  if (a4 && v472 && (*a4 & 0xFFFE) == 2)
  {
    BOOL v44 = v472;
    int v45 = v44[2];

    if (v45 == 2)
    {
      id v46 = nw_endpoint_handler_copy_current_path(v474);
      if (v46)
      {
        os_log_type_t v47 = (NWConcrete_nw_path *)v46;
        nw_path_update_dns(v47);
        resolver_configs = v47->resolver_configs;
        if (resolver_configs)
        {
          BOOL v49 = resolver_configs[3].super.super.isa == resolver_configs[2].super.super.isa;

          if (!v49
            && (nw_path_has_ipv4(&v47->super)
             || nw_path_is_eligible_for_CrazyIvan46(v47) && nw_path_has_nat64_prefixes(v47)))
          {
            objc_storeStrong((id *)v42 + 10, a5);
          }
        }
        else
        {
        }
      }
      else
      {
        os_log_type_t v47 = 0;
      }
    }
    else
    {
      uint64_t v51 = v44;
      os_log_type_t v47 = (NWConcrete_nw_path *)*((void *)v42 + 10);
      *((void *)v42 + 10) = v51;
    }

    id v9 = v474;
    a3 = v464;
  }
  memset(uu, 0, sizeof(uu));
  id v52 = nw_endpoint_handler_copy_parameters(v9);
  v456 = v52;
  if (v52)
  {
    os_log_type_t v53 = (id *)v52;
    id v461 = v53[23];

    char v54 = v461;
    if (v461)
    {
      os_log_type_t v55 = (unsigned __int8 *)v461;
      os_log_type_t v57 = v55 + 170;
      unsigned int v56 = v55[170];

      objc_super v58 = v55;
      unsigned int v59 = *v57;

      uint64_t v60 = v58;
      *(_OWORD *)uu = *(_OWORD *)(v60 + 56);

      int v61 = (v56 >> 1) & 1;
      if (v61)
      {
        if ((*((unsigned char *)v42 + 96) & 2) != 0) {
          int v61 = 0;
        }
        LODWORD(v449) = v61;
      }
      else
      {
        LODWORD(v449) = 0;
      }
      id v73 = v60;
      unsigned int v74 = v73[171];

      char v75 = v73;
      int v76 = 1;
      switch(*((_DWORD *)v75 + 38))
      {
        case 1:
          int v76 = *((_DWORD *)v75 + 39);
          break;
        case 2:
          int v76 = 1002;
          break;
        case 3:
          int v76 = 1001;
          break;
        case 4:
          break;
        default:
          int v76 = 0;
          break;
      }

      int v458 = v56 & 1;
      HIDWORD(v449) = (v59 >> 2) & 1;
      int v451 = (v74 >> 6) & 1;
      BOOL v453 = v76 == 1;
      char v54 = v461;
    }
    else
    {
      uint64_t v449 = 0;
      BOOL v453 = 0;
      int v458 = 0;
      int v451 = 0;
    }

    id v9 = v474;
    a3 = v464;
    if (v464 == 3)
    {
LABEL_91:
      if ((v451 | v458) == 1) {
        nw_endpoint_proxy_record_result(v9, 1);
      }
      if (v453)
      {
        if ((*((unsigned char *)v42 + 100) & 2) != 0)
        {
          char v77 = 2;
        }
        else
        {
          if ((*((unsigned char *)v42 + 100) & 1) == 0) {
            goto LABEL_101;
          }
          if ((*((unsigned char *)v42 + 100) & 4) != 0) {
            char v77 = 4;
          }
          else {
            char v77 = 3;
          }
        }
      }
      else
      {
        char v77 = 1;
      }
      *((unsigned char *)v42 + 99) = v77;
LABEL_101:
      if (v458)
      {
        int v78 = v471;
        int privacy_stance = v78->privacy_stance;

        id v9 = v474;
        a3 = v464;
        if (privacy_stance == 2) {
          goto LABEL_165;
        }
        if (nw_endpoint_handler_get_minimize_logging(v78))
        {
          if (nw_endpoint_handler_get_logging_disabled(v78)) {
            goto LABEL_110;
          }
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          BOOL v82 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v82, OS_LOG_TYPE_DEBUG))
          {
            v317 = nw_endpoint_handler_get_id_string(v78);
            BOOL v318 = nw_endpoint_handler_dry_run_string(v78);
            nw_endpoint_t v319 = nw_endpoint_handler_copy_endpoint(v78);
            uint64_t v320 = nw_endpoint_get_logging_description(v319);
            uint64_t v321 = nw_endpoint_handler_state_string(v78);
            uint64_t v322 = nw_endpoint_handler_mode_string(v78);
            id v323 = nw_endpoint_handler_copy_current_path(v78);
            uint64_t v324 = nw_endpoint_handler_get_id_string(v474);
            *(_DWORD *)int buf = 136448258;
            int v481 = "nw_endpoint_proxy_receive_report";
            __int16 v482 = 2082;
            uint64_t v483 = (uint64_t)v317;
            __int16 v484 = 2082;
            uint64_t v485 = (uint64_t)v318;
            __int16 v486 = 2082;
            BOOL v487 = v320;
            __int16 v488 = 2082;
            v489 = v321;
            __int16 v490 = 2082;
            v491 = v322;
            __int16 v492 = 2114;
            id v493 = v323;
            __int16 v494 = 2082;
            *(void *)v495 = v324;
            *(_WORD *)&v495[8] = 2114;
            *(void *)&v495[10] = v461;
            _os_log_impl(&dword_1830D4000, v82, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Privacy proxy used ([C%{public}s] %{public}@)", buf, 0x5Cu);
          }
        }
        else
        {
          __int16 v80 = v78;
          BOOL v81 = (*((unsigned char *)v471 + 268) & 0x20) == 0;

          if (!v81)
          {
LABEL_110:
            if ((v449 & 0x100000000) == 0)
            {
              uint64_t v91 = v78;
              v78->int privacy_stance = 2;
            }
            id v9 = v474;
            nw_endpoint_t v42 = (NWConcrete_nw_endpoint_mode_handler *)loga;
            a3 = v464;
            if (uuid_is_null(uu)) {
              goto LABEL_165;
            }
            id v92 = nw_endpoint_handler_copy_current_path(v78);
            nw_path_report_error_to_agent(v92, uu, 0);

            goto LABEL_164;
          }
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          BOOL v82 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v82, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v83 = nw_endpoint_handler_get_id_string(v80);
            uint64_t v84 = nw_endpoint_handler_dry_run_string(v80);
            nw_endpoint_t v85 = nw_endpoint_handler_copy_endpoint(v80);
            uint64_t v86 = nw_endpoint_get_logging_description(v85);
            uint64_t v87 = nw_endpoint_handler_state_string(v80);
            uint32_t v88 = nw_endpoint_handler_mode_string(v80);
            id v89 = nw_endpoint_handler_copy_current_path(v80);
            os_log_type_t v90 = nw_endpoint_handler_get_id_string(v474);
            *(_DWORD *)int buf = 136448258;
            int v481 = "nw_endpoint_proxy_receive_report";
            __int16 v482 = 2082;
            uint64_t v483 = (uint64_t)v83;
            __int16 v484 = 2082;
            uint64_t v485 = (uint64_t)v84;
            __int16 v486 = 2082;
            BOOL v487 = v86;
            __int16 v488 = 2082;
            v489 = v87;
            __int16 v490 = 2082;
            v491 = v88;
            __int16 v492 = 2114;
            id v493 = v89;
            __int16 v494 = 2082;
            *(void *)v495 = v90;
            *(_WORD *)&v495[8] = 2114;
            *(void *)&v495[10] = v461;
            _os_log_impl(&dword_1830D4000, v82, OS_LOG_TYPE_DEFAULT, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Privacy proxy used ([C%{public}s] %{public}@)", buf, 0x5Cu);
          }
        }

        goto LABEL_110;
      }
      if ((*((unsigned char *)v42 + 96) & 1) == 0)
      {
        a3 = v464;
        if ((v449 & 0x100000000) != 0) {
          goto LABEL_165;
        }
        BOOL v93 = v471;
        v93->int privacy_stance = 1;

        goto LABEL_164;
      }
      BOOL v94 = v471;
      int v95 = v94->privacy_stance;

      id v9 = v474;
      a3 = v464;
      if (v95 == 4) {
        goto LABEL_165;
      }
      int minimize_logging = nw_endpoint_handler_get_minimize_logging(v94);
      char logging_disabled = nw_endpoint_handler_get_logging_disabled(v94);
      if (minimize_logging)
      {
        if (logging_disabled) {
          goto LABEL_125;
        }
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        uint64_t v98 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v98, OS_LOG_TYPE_DEBUG))
        {
          v448 = nw_endpoint_handler_get_id_string(v94);
          uint64_t v325 = nw_endpoint_handler_dry_run_string(v94);
          nw_endpoint_t v326 = nw_endpoint_handler_copy_endpoint(v94);
          nw_endpoint_t v327 = nw_endpoint_get_logging_description(v326);
          os_log_type_t v328 = nw_endpoint_handler_state_string(v94);
          uint64_t v329 = nw_endpoint_handler_mode_string(v94);
          id v330 = nw_endpoint_handler_copy_current_path(v94);
          *(_DWORD *)int buf = 136447746;
          int v481 = "nw_endpoint_proxy_receive_report";
          __int16 v482 = 2082;
          uint64_t v483 = (uint64_t)v448;
          __int16 v484 = 2082;
          uint64_t v485 = (uint64_t)v325;
          __int16 v486 = 2082;
          BOOL v487 = v327;
          __int16 v488 = 2082;
          v489 = v328;
          __int16 v490 = 2082;
          v491 = v329;
          __int16 v492 = 2114;
          id v493 = v330;
          _os_log_impl(&dword_1830D4000, v98, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Privacy proxy not used, connected directly", buf, 0x48u);
        }
      }
      else
      {
        if (logging_disabled)
        {
LABEL_125:
          if ((v449 & 0x100000000) == 0)
          {
            uint64_t v106 = v94;
            v94->int privacy_stance = 4;

            id v9 = v474;
            nw_endpoint_t v42 = (NWConcrete_nw_endpoint_mode_handler *)loga;
          }
          a3 = v464;
          if (uuid_is_null(uu)) {
            goto LABEL_165;
          }
          id v107 = nw_endpoint_handler_copy_current_path(v94);
          nw_path_report_error_to_agent(v107, uu, 1300);

          goto LABEL_164;
        }
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        uint64_t v98 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v98, OS_LOG_TYPE_DEFAULT))
        {
          os_log_type_t v446 = v98;
          nw_endpoint_t v99 = nw_endpoint_handler_get_id_string(v94);
          id v100 = nw_endpoint_handler_dry_run_string(v94);
          nw_endpoint_t v101 = nw_endpoint_handler_copy_endpoint(v94);
          uint64_t v102 = nw_endpoint_get_logging_description(v101);
          id v103 = nw_endpoint_handler_state_string(v94);
          uint64_t v104 = nw_endpoint_handler_mode_string(v94);
          id v105 = nw_endpoint_handler_copy_current_path(v94);
          *(_DWORD *)int buf = 136447746;
          int v481 = "nw_endpoint_proxy_receive_report";
          __int16 v482 = 2082;
          uint64_t v483 = (uint64_t)v99;
          __int16 v484 = 2082;
          uint64_t v485 = (uint64_t)v100;
          __int16 v486 = 2082;
          BOOL v487 = v102;
          __int16 v488 = 2082;
          v489 = v103;
          __int16 v490 = 2082;
          v491 = v104;
          __int16 v492 = 2114;
          id v493 = v105;
          _os_log_impl(&dword_1830D4000, v446, OS_LOG_TYPE_DEFAULT, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Privacy proxy not used, connected directly", buf, 0x48u);

          uint64_t v98 = v446;
        }
      }

      id v9 = v474;
      nw_endpoint_t v42 = (NWConcrete_nw_endpoint_mode_handler *)loga;
      goto LABEL_125;
    }
  }
  else
  {
    uint64_t v449 = 0;
    id v461 = 0;
    BOOL v453 = 0;
    int v458 = 0;
    int v451 = 0;
    if (a3 == 3) {
      goto LABEL_91;
    }
  }
  if (a3 != 2 || !a4 || *a4 != 3) {
    goto LABEL_165;
  }
  int v62 = (unsigned __int16)a4[1];
  if (v62 == 5)
  {
LABEL_57:
    if (!v453) {
      *((unsigned char *)v42 + 100) |= 4u;
    }
    if ((*((unsigned char *)v42 + 97) & 4) != 0) {
      goto LABEL_165;
    }
    *((unsigned char *)v42 + 97) |= 4u;
    int v63 = v451;
    if (!*((void *)v42 + 11)) {
      int v63 = 0;
    }
    if (v63 == 1)
    {
      __int16 v64 = v9;
      uint64_t v65 = v64;
      if (v64)
      {
        uint64_t v66 = v64;
        if (v64 != v471)
        {
          while (1)
          {
            uint64_t v67 = *((void *)v42 + 1);
            BOOL v68 = !v67 || v66 == 0;
            if (!v68)
            {
              BOOL v70 = *(id **)(v67 + 16);
              char v69 = *(id **)(v67 + 24);
              if (v70 != v69)
              {
                while (*v70 != v66)
                {
                  if (++v70 == v69)
                  {
                    BOOL v70 = v69;
                    break;
                  }
                }
              }
              if (v70 != v69) {
                break;
              }
            }
            id v71 = v66;
            uint64_t v66 = (NWConcrete_nw_endpoint_handler *)v71[9];

            if (v66) {
              BOOL v72 = v66 == v471;
            }
            else {
              BOOL v72 = 1;
            }
            nw_endpoint_t v42 = (NWConcrete_nw_endpoint_mode_handler *)loga;
            if (v72) {
              goto LABEL_156;
            }
          }
          uint64_t v66 = v66;

          uint64_t v65 = v66;
          nw_endpoint_t v42 = (NWConcrete_nw_endpoint_mode_handler *)loga;
        }
      }
      else
      {
        uint64_t v66 = 0;
      }
LABEL_156:
      unint64_t timeout_nanos = nw_endpoint_proxy_get_timeout_nanos(v65, 0);
      int v137 = nw_endpoint_handler_get_minimize_logging(v471);
      char v138 = nw_endpoint_handler_get_logging_disabled(v471);
      if (v137)
      {
        if (v138) {
          goto LABEL_163;
        }
        v443 = v65;
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        uint64_t v139 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v139, OS_LOG_TYPE_DEBUG))
        {
          v445 = nw_endpoint_handler_get_id_string(v471);
          v366 = nw_endpoint_handler_dry_run_string(v471);
          nw_endpoint_t v367 = nw_endpoint_handler_copy_endpoint(v471);
          uint64_t v368 = nw_endpoint_get_logging_description(v367);
          uint64_t v369 = nw_endpoint_handler_state_string(v471);
          uint64_t v370 = nw_endpoint_handler_mode_string(v471);
          id v371 = nw_endpoint_handler_copy_current_path(v471);
          *(_DWORD *)int buf = 136448002;
          int v481 = "nw_endpoint_proxy_receive_report";
          __int16 v482 = 2082;
          uint64_t v483 = (uint64_t)v445;
          __int16 v484 = 2082;
          uint64_t v485 = (uint64_t)v366;
          __int16 v486 = 2082;
          BOOL v487 = v368;
          __int16 v488 = 2082;
          v489 = v369;
          __int16 v490 = 2082;
          v491 = v370;
          __int16 v492 = 2114;
          id v493 = v371;
          __int16 v494 = 2048;
          *(void *)v495 = timeout_nanos / 0xF4240;
          _os_log_impl(&dword_1830D4000, v139, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] transport finished, pushing out endpoint race by %llums", buf, 0x52u);

          uint64_t v65 = v443;
        }
      }
      else
      {
        if (v138)
        {
LABEL_163:
          uint64_t v147 = *((void *)v42 + 11);
          dispatch_time_t v148 = dispatch_time(0x8000000000000000, timeout_nanos);
          nw_queue_set_timer_values(v147, v148, 0xFFFFFFFFFFFFFFFFLL, 0xF4240uLL);

LABEL_164:
          id v9 = v474;
          nw_endpoint_t v42 = (NWConcrete_nw_endpoint_mode_handler *)loga;
          a3 = v464;
          goto LABEL_165;
        }
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        uint64_t v139 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v139, OS_LOG_TYPE_INFO))
        {
          v442 = v65;
          v444 = v139;
          uint64_t v140 = nw_endpoint_handler_get_id_string(v471);
          id v141 = nw_endpoint_handler_dry_run_string(v471);
          nw_endpoint_t v142 = nw_endpoint_handler_copy_endpoint(v471);
          os_log_type_t v143 = nw_endpoint_get_logging_description(v142);
          uint64_t v144 = nw_endpoint_handler_state_string(v471);
          BOOL v145 = nw_endpoint_handler_mode_string(v471);
          id v146 = nw_endpoint_handler_copy_current_path(v471);
          *(_DWORD *)int buf = 136448002;
          int v481 = "nw_endpoint_proxy_receive_report";
          __int16 v482 = 2082;
          uint64_t v483 = (uint64_t)v140;
          __int16 v484 = 2082;
          uint64_t v485 = (uint64_t)v141;
          __int16 v486 = 2082;
          BOOL v487 = v143;
          __int16 v488 = 2082;
          v489 = v144;
          __int16 v490 = 2082;
          v491 = v145;
          __int16 v492 = 2114;
          id v493 = v146;
          __int16 v494 = 2048;
          *(void *)v495 = timeout_nanos / 0xF4240;
          _os_log_impl(&dword_1830D4000, v444, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] transport finished, pushing out endpoint race by %llums", buf, 0x52u);

          uint64_t v65 = v442;
          uint64_t v139 = v444;
        }
      }

      nw_endpoint_t v42 = (NWConcrete_nw_endpoint_mode_handler *)loga;
      goto LABEL_163;
    }
    int v120 = nw_endpoint_handler_get_minimize_logging(v471);
    char v121 = nw_endpoint_handler_get_logging_disabled(v471);
    if (!v120)
    {
      if (v121) {
        goto LABEL_165;
      }
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      uint64_t v122 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v122, OS_LOG_TYPE_INFO))
      {
        id v123 = nw_endpoint_handler_get_id_string(v471);
        uint64_t v124 = nw_endpoint_handler_dry_run_string(v471);
        nw_endpoint_t v125 = nw_endpoint_handler_copy_endpoint(v471);
        int v126 = nw_endpoint_get_logging_description(v125);
        unsigned int v127 = nw_endpoint_handler_state_string(v471);
        nw_endpoint_t v128 = nw_endpoint_handler_mode_string(v471);
        id v129 = nw_endpoint_handler_copy_current_path(v471);
        *(_DWORD *)int buf = 136447746;
        int v481 = "nw_endpoint_proxy_receive_report";
        __int16 v482 = 2082;
        uint64_t v483 = (uint64_t)v123;
        __int16 v484 = 2082;
        uint64_t v485 = (uint64_t)v124;
        __int16 v486 = 2082;
        BOOL v487 = v126;
        __int16 v488 = 2082;
        v489 = v127;
        __int16 v490 = 2082;
        v491 = v128;
        __int16 v492 = 2114;
        id v493 = v129;
        _os_log_impl(&dword_1830D4000, v122, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] transport finished", buf, 0x48u);
      }
      goto LABEL_405;
    }
    if ((v121 & 1) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      uint64_t v122 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v122, OS_LOG_TYPE_DEBUG))
      {
        v359 = nw_endpoint_handler_get_id_string(v471);
        uint64_t v360 = nw_endpoint_handler_dry_run_string(v471);
        nw_endpoint_t v361 = nw_endpoint_handler_copy_endpoint(v471);
        int v362 = nw_endpoint_get_logging_description(v361);
        uint64_t v363 = nw_endpoint_handler_state_string(v471);
        uint64_t v364 = nw_endpoint_handler_mode_string(v471);
        id v365 = nw_endpoint_handler_copy_current_path(v471);
        *(_DWORD *)int buf = 136447746;
        int v481 = "nw_endpoint_proxy_receive_report";
        __int16 v482 = 2082;
        uint64_t v483 = (uint64_t)v359;
        __int16 v484 = 2082;
        uint64_t v485 = (uint64_t)v360;
        __int16 v486 = 2082;
        BOOL v487 = v362;
        __int16 v488 = 2082;
        v489 = v363;
        __int16 v490 = 2082;
        v491 = v364;
        __int16 v492 = 2114;
        id v493 = v365;
        _os_log_impl(&dword_1830D4000, v122, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] transport finished", buf, 0x48u);
      }
LABEL_405:

      goto LABEL_164;
    }
    goto LABEL_165;
  }
  if (v62 != 14)
  {
    if (v62 != 13) {
      goto LABEL_165;
    }
    goto LABEL_57;
  }
  *((unsigned char *)v42 + 97) |= 8u;
  uint64_t v108 = *((void *)v42 + 11);
  int v109 = nw_endpoint_handler_get_minimize_logging(v471);
  char v110 = nw_endpoint_handler_get_logging_disabled(v471);
  if (v108)
  {
    if (v109)
    {
      if (v110)
      {
LABEL_137:
        uint64_t v119 = *((void *)v42 + 11);
        if (v119)
        {
          nw_queue_cancel_source(v119);
          *((void *)v42 + 11) = 0;
        }
        goto LABEL_165;
      }
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      BOOL v111 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v111, OS_LOG_TYPE_DEBUG))
      {
        id v331 = nw_endpoint_handler_get_id_string(v471);
        BOOL v332 = nw_endpoint_handler_dry_run_string(v471);
        nw_endpoint_t v333 = nw_endpoint_handler_copy_endpoint(v471);
        uint64_t v334 = nw_endpoint_get_logging_description(v333);
        uint64_t v335 = nw_endpoint_handler_state_string(v471);
        uint64_t v336 = nw_endpoint_handler_mode_string(v471);
        id v337 = nw_endpoint_handler_copy_current_path(v471);
        *(_DWORD *)int buf = 136447746;
        int v481 = "nw_endpoint_proxy_receive_report";
        __int16 v482 = 2082;
        uint64_t v483 = (uint64_t)v331;
        __int16 v484 = 2082;
        uint64_t v485 = (uint64_t)v332;
        __int16 v486 = 2082;
        BOOL v487 = v334;
        __int16 v488 = 2082;
        v489 = v335;
        __int16 v490 = 2082;
        v491 = v336;
        __int16 v492 = 2114;
        id v493 = v337;
        _os_log_impl(&dword_1830D4000, v111, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] proxy flow finished, cancelling timer for fallback attempt", buf, 0x48u);
      }
    }
    else
    {
      if (v110) {
        goto LABEL_137;
      }
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      BOOL v111 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v111, OS_LOG_TYPE_INFO))
      {
        uint64_t v112 = nw_endpoint_handler_get_id_string(v471);
        int v113 = nw_endpoint_handler_dry_run_string(v471);
        nw_endpoint_t v114 = nw_endpoint_handler_copy_endpoint(v471);
        __int16 v115 = nw_endpoint_get_logging_description(v114);
        BOOL v116 = nw_endpoint_handler_state_string(v471);
        uint64_t v117 = nw_endpoint_handler_mode_string(v471);
        id v118 = nw_endpoint_handler_copy_current_path(v471);
        *(_DWORD *)int buf = 136447746;
        int v481 = "nw_endpoint_proxy_receive_report";
        __int16 v482 = 2082;
        uint64_t v483 = (uint64_t)v112;
        __int16 v484 = 2082;
        uint64_t v485 = (uint64_t)v113;
        __int16 v486 = 2082;
        BOOL v487 = v115;
        __int16 v488 = 2082;
        v489 = v116;
        __int16 v490 = 2082;
        v491 = v117;
        __int16 v492 = 2114;
        id v493 = v118;
        _os_log_impl(&dword_1830D4000, v111, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] proxy flow finished, cancelling timer for fallback attempt", buf, 0x48u);
      }
    }

    id v9 = v474;
    nw_endpoint_t v42 = (NWConcrete_nw_endpoint_mode_handler *)loga;
    a3 = v464;
    goto LABEL_137;
  }
  if (!v109)
  {
    if (v110) {
      goto LABEL_165;
    }
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
    }
    uint64_t v122 = (id)gconnectionLogObj;
    if (os_log_type_enabled(v122, OS_LOG_TYPE_INFO))
    {
      os_log_type_t v130 = nw_endpoint_handler_get_id_string(v471);
      os_log_type_t v131 = nw_endpoint_handler_dry_run_string(v471);
      nw_endpoint_t v132 = nw_endpoint_handler_copy_endpoint(v471);
      uint64_t v133 = nw_endpoint_get_logging_description(v132);
      os_log_type_t v134 = nw_endpoint_handler_state_string(v471);
      __int16 v135 = nw_endpoint_handler_mode_string(v471);
      id v136 = nw_endpoint_handler_copy_current_path(v471);
      *(_DWORD *)int buf = 136447746;
      int v481 = "nw_endpoint_proxy_receive_report";
      __int16 v482 = 2082;
      uint64_t v483 = (uint64_t)v130;
      __int16 v484 = 2082;
      uint64_t v485 = (uint64_t)v131;
      __int16 v486 = 2082;
      BOOL v487 = v133;
      __int16 v488 = 2082;
      v489 = v134;
      __int16 v490 = 2082;
      v491 = v135;
      __int16 v492 = 2114;
      id v493 = v136;
      _os_log_impl(&dword_1830D4000, v122, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] proxy flow finished", buf, 0x48u);
    }
    goto LABEL_405;
  }
  if ((v110 & 1) == 0)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
    }
    uint64_t v122 = (id)gconnectionLogObj;
    if (os_log_type_enabled(v122, OS_LOG_TYPE_DEBUG))
    {
      v372 = nw_endpoint_handler_get_id_string(v471);
      BOOL v373 = nw_endpoint_handler_dry_run_string(v471);
      nw_endpoint_t v374 = nw_endpoint_handler_copy_endpoint(v471);
      uint64_t v375 = nw_endpoint_get_logging_description(v374);
      int v376 = nw_endpoint_handler_state_string(v471);
      int v377 = nw_endpoint_handler_mode_string(v471);
      id v378 = nw_endpoint_handler_copy_current_path(v471);
      *(_DWORD *)int buf = 136447746;
      int v481 = "nw_endpoint_proxy_receive_report";
      __int16 v482 = 2082;
      uint64_t v483 = (uint64_t)v372;
      __int16 v484 = 2082;
      uint64_t v485 = (uint64_t)v373;
      __int16 v486 = 2082;
      BOOL v487 = v375;
      __int16 v488 = 2082;
      v489 = v376;
      __int16 v490 = 2082;
      v491 = v377;
      __int16 v492 = 2114;
      id v493 = v378;
      _os_log_impl(&dword_1830D4000, v122, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] proxy flow finished", buf, 0x48u);
    }
    goto LABEL_405;
  }
LABEL_165:
  uint64_t v149 = *((void *)v42 + 1);
  if (!v149 || !v9) {
    goto LABEL_218;
  }
  uint64_t v151 = *(NWConcrete_nw_endpoint_handler ***)(v149 + 16);
  uint64_t v150 = *(NWConcrete_nw_endpoint_handler ***)(v149 + 24);
  if (v151 != v150)
  {
    while (*v151 != v9)
    {
      if (++v151 == v150)
      {
        uint64_t v151 = v150;
        break;
      }
    }
  }
  if (v151 == v150) {
    goto LABEL_218;
  }
  if (a3 != 3)
  {
    if (a3 == 4)
    {
      if ((v458 | v451) == 1) {
        nw_endpoint_proxy_record_result(v9, 0);
      }
      if (!v453) {
        *((unsigned char *)v42 + 100) |= 2u;
      }
      uint64_t v171 = *((void *)v42 + 2);
      if (v171)
      {
        uint64_t v173 = *(NWConcrete_nw_endpoint_handler ***)(v171 + 16);
        uint64_t v172 = *(NWConcrete_nw_endpoint_handler ***)(v171 + 24);
        if (v173 != v172)
        {
          while (*v173 != v9)
          {
            if (++v173 == v172)
            {
              uint64_t v173 = *(NWConcrete_nw_endpoint_handler ***)(v171 + 24);
              break;
            }
          }
        }
        if (v173 != v172) {
          goto LABEL_231;
        }
      }
      else
      {
        BOOL v174 = nw_array_create();
        BOOL v176 = (void *)*((void *)v42 + 2);
        os_log_type_t v175 = (uint64_t *)((char *)v42 + 16);
        uint64_t *v175 = v174;

        uint64_t v171 = *v175;
        id v9 = v474;
        nw_endpoint_t v42 = (NWConcrete_nw_endpoint_mode_handler *)loga;
      }
      nw_array_append(v171, v9);
      if (v458)
      {
        uint64_t v177 = *((void *)v42 + 10);
        if (v177)
        {
          int error_code = nw_error_get_error_code(v177);
          nw_error_domain_t error_domain = nw_error_get_error_domain(*((nw_error_t *)v42 + 10));
          if (error_code == 65) {
            int v180 = (*((unsigned __int8 *)v42 + 97) >> 2) & 1;
          }
          else {
            int v180 = 0;
          }
          if (error_code == 64 || error_domain == nw_error_domain_tls) {
            int v253 = (*((unsigned __int8 *)v42 + 97) >> 2) & 1;
          }
          else {
            int v253 = 0;
          }
          if (v180)
          {
            char v254 = *((unsigned char *)v42 + 96);
            *((unsigned char *)v42 + 96) = v254 | 0x10;
            if (!(*((unsigned char *)v42 + 97) & 0x10 | v254 & 6)) {
              goto LABEL_285;
            }
            BOOL v68 = (v254 & 2) == 0;
            int v255 = HIDWORD(v449);
            if (!v68) {
              int v255 = 0;
            }
            if (v255 == 1)
            {
LABEL_285:
              if (!v449)
              {
                int v256 = nw_endpoint_handler_get_minimize_logging(v471);
                char v257 = nw_endpoint_handler_get_logging_disabled(v471);
                if (v256)
                {
                  if (v257) {
                    goto LABEL_304;
                  }
                  if (__nwlog_connection_log::onceToken != -1) {
                    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
                  }
                  v258 = (id)gconnectionLogObj;
                  if (os_log_type_enabled(v258, OS_LOG_TYPE_DEBUG))
                  {
                    uint64_t v432 = nw_endpoint_handler_get_id_string(v471);
                    int v433 = nw_endpoint_handler_dry_run_string(v471);
                    nw_endpoint_t v434 = nw_endpoint_handler_copy_endpoint(v471);
                    uint64_t v435 = nw_endpoint_get_logging_description(v434);
                    v436 = nw_endpoint_handler_state_string(v471);
                    v437 = nw_endpoint_handler_mode_string(v471);
                    id v438 = nw_endpoint_handler_copy_current_path(v471);
                    char v439 = BYTE1(loga[12].isa);
                    v440 = nw_endpoint_handler_get_id_string(v474);
                    *(_DWORD *)int buf = 136448770;
                    int v481 = "nw_endpoint_proxy_receive_report";
                    os_log_type_t v441 = "";
                    uint64_t v483 = (uint64_t)v432;
                    __int16 v482 = 2082;
                    if ((v439 & 4) == 0) {
                      os_log_type_t v441 = " during establishment";
                    }
                    __int16 v484 = 2082;
                    uint64_t v485 = (uint64_t)v433;
                    __int16 v486 = 2082;
                    BOOL v487 = v435;
                    __int16 v488 = 2082;
                    v489 = v436;
                    __int16 v490 = 2082;
                    v491 = v437;
                    __int16 v492 = 2114;
                    id v493 = v438;
                    __int16 v494 = 1024;
                    *(_DWORD *)v495 = error_code;
                    *(_WORD *)&v495[4] = 2082;
                    *(void *)&v495[6] = v441;
                    *(_WORD *)&v495[14] = 2082;
                    *(void *)&v495[16] = v440;
                    *(_WORD *)&v495[24] = 2114;
                    *(void *)&v495[26] = v461;
                    _os_log_impl(&dword_1830D4000, v258, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Privacy proxy failed with error %d%{public}s, failing open ([C%{public}s] %{public}@)", buf, 0x6Cu);
                  }
                  goto LABEL_303;
                }
                if ((v257 & 1) == 0)
                {
                  if (__nwlog_connection_log::onceToken != -1) {
                    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
                  }
                  v258 = (id)gconnectionLogObj;
                  if (os_log_type_enabled(v258, OS_LOG_TYPE_INFO))
                  {
                    id v259 = nw_endpoint_handler_get_id_string(v471);
                    uint64_t v260 = nw_endpoint_handler_dry_run_string(v471);
                    nw_endpoint_t v261 = nw_endpoint_handler_copy_endpoint(v471);
                    uint64_t v262 = nw_endpoint_get_logging_description(v261);
                    char v263 = nw_endpoint_handler_state_string(v471);
                    char v264 = nw_endpoint_handler_mode_string(v471);
                    id v265 = nw_endpoint_handler_copy_current_path(v471);
                    char v266 = BYTE1(loga[12].isa);
                    uint64_t v267 = nw_endpoint_handler_get_id_string(v474);
                    *(_DWORD *)int buf = 136448770;
                    int v481 = "nw_endpoint_proxy_receive_report";
                    int v268 = "";
                    uint64_t v483 = (uint64_t)v259;
                    __int16 v482 = 2082;
                    if ((v266 & 4) == 0) {
                      int v268 = " during establishment";
                    }
                    __int16 v484 = 2082;
                    uint64_t v485 = (uint64_t)v260;
                    __int16 v486 = 2082;
                    BOOL v487 = v262;
                    __int16 v488 = 2082;
                    v489 = v263;
                    __int16 v490 = 2082;
                    v491 = v264;
                    __int16 v492 = 2114;
                    id v493 = v265;
                    __int16 v494 = 1024;
                    *(_DWORD *)v495 = error_code;
                    *(_WORD *)&v495[4] = 2082;
                    *(void *)&v495[6] = v268;
                    *(_WORD *)&v495[14] = 2082;
                    *(void *)&v495[16] = v267;
                    *(_WORD *)&v495[24] = 2114;
                    *(void *)&v495[26] = v461;
                    _os_log_impl(&dword_1830D4000, v258, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Privacy proxy failed with error %d%{public}s, failing open ([C%{public}s] %{public}@)", buf, 0x6Cu);
                  }
LABEL_303:

                  id v9 = v474;
                  nw_endpoint_t v42 = (NWConcrete_nw_endpoint_mode_handler *)loga;
                  goto LABEL_304;
                }
                goto LABEL_304;
              }
LABEL_295:
              int v269 = nw_endpoint_handler_get_minimize_logging(v471);
              char v270 = nw_endpoint_handler_get_logging_disabled(v471);
              if (v269)
              {
                if (v270) {
                  goto LABEL_304;
                }
                if (__nwlog_connection_log::onceToken != -1) {
                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
                }
                v258 = (id)gconnectionLogObj;
                if (os_log_type_enabled(v258, OS_LOG_TYPE_DEBUG))
                {
                  v394 = nw_endpoint_handler_get_id_string(v471);
                  v395 = nw_endpoint_handler_dry_run_string(v471);
                  nw_endpoint_t v396 = nw_endpoint_handler_copy_endpoint(v471);
                  int v397 = nw_endpoint_get_logging_description(v396);
                  int v398 = nw_endpoint_handler_state_string(v471);
                  v399 = nw_endpoint_handler_mode_string(v471);
                  id v400 = nw_endpoint_handler_copy_current_path(v471);
                  char v401 = BYTE1(loga[12].isa);
                  uint64_t v402 = nw_endpoint_handler_get_id_string(v474);
                  *(_DWORD *)int buf = 136448770;
                  int v481 = "nw_endpoint_proxy_receive_report";
                  int v403 = "";
                  uint64_t v483 = (uint64_t)v394;
                  __int16 v482 = 2082;
                  if ((v401 & 4) == 0) {
                    int v403 = " during establishment";
                  }
                  __int16 v484 = 2082;
                  uint64_t v485 = (uint64_t)v395;
                  __int16 v486 = 2082;
                  BOOL v487 = v397;
                  __int16 v488 = 2082;
                  v489 = v398;
                  __int16 v490 = 2082;
                  v491 = v399;
                  __int16 v492 = 2114;
                  id v493 = v400;
                  __int16 v494 = 1024;
                  *(_DWORD *)v495 = error_code;
                  *(_WORD *)&v495[4] = 2082;
                  *(void *)&v495[6] = v403;
                  *(_WORD *)&v495[14] = 2082;
                  *(void *)&v495[16] = v402;
                  *(_WORD *)&v495[24] = 2114;
                  *(void *)&v495[26] = v461;
                  _os_log_impl(&dword_1830D4000, v258, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Privacy proxy failed with error %d%{public}s, allowed to fail open ([C%{public}s] %{public}@)", buf, 0x6Cu);
                }
                goto LABEL_303;
              }
              if ((v270 & 1) == 0)
              {
                if (__nwlog_connection_log::onceToken != -1) {
                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
                }
                v258 = (id)gconnectionLogObj;
                if (os_log_type_enabled(v258, OS_LOG_TYPE_INFO))
                {
                  id v271 = nw_endpoint_handler_get_id_string(v471);
                  uint64_t v272 = nw_endpoint_handler_dry_run_string(v471);
                  nw_endpoint_t v273 = nw_endpoint_handler_copy_endpoint(v471);
                  char v274 = nw_endpoint_get_logging_description(v273);
                  id v275 = nw_endpoint_handler_state_string(v471);
                  v276 = nw_endpoint_handler_mode_string(v471);
                  id v277 = nw_endpoint_handler_copy_current_path(v471);
                  char v278 = BYTE1(loga[12].isa);
                  id v279 = nw_endpoint_handler_get_id_string(v474);
                  *(_DWORD *)int buf = 136448770;
                  int v481 = "nw_endpoint_proxy_receive_report";
                  os_log_type_t v280 = "";
                  uint64_t v483 = (uint64_t)v271;
                  __int16 v482 = 2082;
                  if ((v278 & 4) == 0) {
                    os_log_type_t v280 = " during establishment";
                  }
                  __int16 v484 = 2082;
                  uint64_t v485 = (uint64_t)v272;
                  __int16 v486 = 2082;
                  BOOL v487 = v274;
                  __int16 v488 = 2082;
                  v489 = v275;
                  __int16 v490 = 2082;
                  v491 = v276;
                  __int16 v492 = 2114;
                  id v493 = v277;
                  __int16 v494 = 1024;
                  *(_DWORD *)v495 = error_code;
                  *(_WORD *)&v495[4] = 2082;
                  *(void *)&v495[6] = v280;
                  *(_WORD *)&v495[14] = 2082;
                  *(void *)&v495[16] = v279;
                  *(_WORD *)&v495[24] = 2114;
                  *(void *)&v495[26] = v461;
                  _os_log_impl(&dword_1830D4000, v258, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Privacy proxy failed with error %d%{public}s, allowed to fail open ([C%{public}s] %{public}@)", buf, 0x6Cu);
                }
                goto LABEL_303;
              }
LABEL_304:
              if ((v449 & 0x100000000) == 0)
              {
                uint64_t v281 = v471;
                v281->int privacy_stance = 4;

                id v9 = v474;
                nw_endpoint_t v42 = (NWConcrete_nw_endpoint_mode_handler *)loga;
              }
              int v204 = 0;
              *((unsigned char *)v42 + 96) |= 8u;
              int v203 = 1;
LABEL_307:
              if (error_code && (*((unsigned char *)v42 + 97) & 4) == 0 && !uuid_is_null(uu))
              {
                os_log_type_t v194 = nw_endpoint_handler_copy_current_path(v471);
                nw_path_report_error_to_agent(v194, uu, error_code);
                goto LABEL_229;
              }
LABEL_232:
              nw_endpoint_handler_report(v471, v9, a4, v472);
              uint64_t v205 = *((void *)v42 + 2);
              if (v205) {
                uint64_t v205 = (uint64_t)(*(void *)(v205 + 24) - *(void *)(v205 + 16)) >> 3;
              }
              uint64_t v206 = *((void *)v42 + 1);
              if (v206) {
                uint64_t v206 = (uint64_t)(*(void *)(v206 + 24) - *(void *)(v206 + 16)) >> 3;
              }
              if (v205 == v206)
              {
                BOOL has_unresolved_proxies = nw_endpoint_proxy_has_unresolved_proxies(v471, 0);
                int v208 = nw_endpoint_handler_get_minimize_logging(v471);
                char v209 = nw_endpoint_handler_get_logging_disabled(v471);
                if (has_unresolved_proxies)
                {
                  if (v208)
                  {
                    if (v209) {
                      goto LABEL_219;
                    }
                    if (__nwlog_connection_log::onceToken != -1) {
                      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
                    }
                    v152 = (id)gconnectionLogObj;
                    if (os_log_type_enabled(v152, OS_LOG_TYPE_DEBUG))
                    {
                      long long v345 = nw_endpoint_handler_get_id_string(v471);
                      nw_endpoint_t v346 = nw_endpoint_handler_dry_run_string(v471);
                      nw_endpoint_t v347 = nw_endpoint_handler_copy_endpoint(v471);
                      int v348 = nw_endpoint_get_logging_description(v347);
                      int v349 = nw_endpoint_handler_state_string(v471);
                      v350 = nw_endpoint_handler_mode_string(v471);
                      id v351 = nw_endpoint_handler_copy_current_path(v471);
                      *(_DWORD *)int buf = 136447746;
                      int v481 = "nw_endpoint_proxy_receive_report";
                      __int16 v482 = 2082;
                      uint64_t v483 = (uint64_t)v345;
                      __int16 v484 = 2082;
                      uint64_t v485 = (uint64_t)v346;
                      __int16 v486 = 2082;
                      BOOL v487 = v348;
                      __int16 v488 = 2082;
                      v489 = v349;
                      __int16 v490 = 2082;
                      v491 = v350;
                      __int16 v492 = 2114;
                      id v493 = v351;
                      _os_log_impl(&dword_1830D4000, v152, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] all children failed, but still waiting on resolution", buf, 0x48u);
                    }
                  }
                  else
                  {
                    if (v209) {
                      goto LABEL_219;
                    }
                    if (__nwlog_connection_log::onceToken != -1) {
                      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
                    }
                    v152 = (id)gconnectionLogObj;
                    if (os_log_type_enabled(v152, OS_LOG_TYPE_INFO))
                    {
                      long long v210 = nw_endpoint_handler_get_id_string(v471);
                      long long v211 = nw_endpoint_handler_dry_run_string(v471);
                      nw_endpoint_t v212 = nw_endpoint_handler_copy_endpoint(v471);
                      id v213 = nw_endpoint_get_logging_description(v212);
                      uint64_t v214 = nw_endpoint_handler_state_string(v471);
                      int v215 = nw_endpoint_handler_mode_string(v471);
                      id v216 = nw_endpoint_handler_copy_current_path(v471);
                      *(_DWORD *)int buf = 136447746;
                      int v481 = "nw_endpoint_proxy_receive_report";
                      __int16 v482 = 2082;
                      uint64_t v483 = (uint64_t)v210;
                      __int16 v484 = 2082;
                      uint64_t v485 = (uint64_t)v211;
                      __int16 v486 = 2082;
                      BOOL v487 = v213;
                      __int16 v488 = 2082;
                      v489 = v214;
                      __int16 v490 = 2082;
                      v491 = v215;
                      __int16 v492 = 2114;
                      id v493 = v216;
                      _os_log_impl(&dword_1830D4000, v152, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] all children failed, but still waiting on resolution", buf, 0x48u);
                    }
                  }
                  goto LABEL_194;
                }
                if (v208)
                {
                  if (v209) {
                    goto LABEL_265;
                  }
                  if (__nwlog_connection_log::onceToken != -1) {
                    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
                  }
                  int v219 = (id)gconnectionLogObj;
                  if (os_log_type_enabled(v219, OS_LOG_TYPE_DEBUG))
                  {
                    int v352 = nw_endpoint_handler_get_id_string(v471);
                    int v353 = nw_endpoint_handler_dry_run_string(v471);
                    nw_endpoint_t v354 = nw_endpoint_handler_copy_endpoint(v471);
                    BOOL v355 = nw_endpoint_get_logging_description(v354);
                    uint64_t v356 = nw_endpoint_handler_state_string(v471);
                    uint64_t v357 = nw_endpoint_handler_mode_string(v471);
                    id v358 = nw_endpoint_handler_copy_current_path(v471);
                    *(_DWORD *)int buf = 136447746;
                    int v481 = "nw_endpoint_proxy_receive_report";
                    __int16 v482 = 2082;
                    uint64_t v483 = (uint64_t)v352;
                    __int16 v484 = 2082;
                    uint64_t v485 = (uint64_t)v353;
                    __int16 v486 = 2082;
                    BOOL v487 = v355;
                    __int16 v488 = 2082;
                    v489 = v356;
                    __int16 v490 = 2082;
                    v491 = v357;
                    __int16 v492 = 2114;
                    id v493 = v358;
                    _os_log_impl(&dword_1830D4000, v219, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] all children failed", buf, 0x48u);
                  }
                  goto LABEL_264;
                }
                if ((v209 & 1) == 0)
                {
                  if (__nwlog_connection_log::onceToken != -1) {
                    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
                  }
                  int v219 = (id)gconnectionLogObj;
                  if (os_log_type_enabled(v219, OS_LOG_TYPE_INFO))
                  {
                    int v237 = nw_endpoint_handler_get_id_string(v471);
                    uint64_t v238 = nw_endpoint_handler_dry_run_string(v471);
                    nw_endpoint_t v239 = nw_endpoint_handler_copy_endpoint(v471);
                    nw_endpoint_t v240 = nw_endpoint_get_logging_description(v239);
                    os_log_type_t v241 = nw_endpoint_handler_state_string(v471);
                    uint64_t v242 = nw_endpoint_handler_mode_string(v471);
                    id v243 = nw_endpoint_handler_copy_current_path(v471);
                    *(_DWORD *)int buf = 136447746;
                    int v481 = "nw_endpoint_proxy_receive_report";
                    __int16 v482 = 2082;
                    uint64_t v483 = (uint64_t)v237;
                    __int16 v484 = 2082;
                    uint64_t v485 = (uint64_t)v238;
                    __int16 v486 = 2082;
                    BOOL v487 = v240;
                    __int16 v488 = 2082;
                    v489 = v241;
                    __int16 v490 = 2082;
                    v491 = v242;
                    __int16 v492 = 2114;
                    id v493 = v243;
                    _os_log_impl(&dword_1830D4000, v219, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] all children failed", buf, 0x48u);
                  }
LABEL_264:

                  goto LABEL_265;
                }
                goto LABEL_265;
              }
              if (v204)
              {
                int v217 = nw_endpoint_handler_get_minimize_logging(v471);
                char v218 = nw_endpoint_handler_get_logging_disabled(v471);
                if (v217)
                {
                  if (v218) {
                    goto LABEL_265;
                  }
                  if (__nwlog_connection_log::onceToken != -1) {
                    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
                  }
                  int v219 = (id)gconnectionLogObj;
                  if (os_log_type_enabled(v219, OS_LOG_TYPE_DEBUG))
                  {
                    BOOL v338 = nw_endpoint_handler_get_id_string(v471);
                    os_log_type_t v339 = nw_endpoint_handler_dry_run_string(v471);
                    nw_endpoint_t v340 = nw_endpoint_handler_copy_endpoint(v471);
                    v341 = nw_endpoint_get_logging_description(v340);
                    long long v342 = nw_endpoint_handler_state_string(v471);
                    long long v343 = nw_endpoint_handler_mode_string(v471);
                    id v344 = nw_endpoint_handler_copy_current_path(v471);
                    *(_DWORD *)int buf = 136447746;
                    int v481 = "nw_endpoint_proxy_receive_report";
                    __int16 v482 = 2082;
                    uint64_t v483 = (uint64_t)v338;
                    __int16 v484 = 2082;
                    uint64_t v485 = (uint64_t)v339;
                    __int16 v486 = 2082;
                    BOOL v487 = v341;
                    __int16 v488 = 2082;
                    v489 = v342;
                    __int16 v490 = 2082;
                    v491 = v343;
                    __int16 v492 = 2114;
                    id v493 = v344;
                    _os_log_impl(&dword_1830D4000, v219, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] children failed, detected origin error", buf, 0x48u);
                  }
                  goto LABEL_264;
                }
                if ((v218 & 1) == 0)
                {
                  if (__nwlog_connection_log::onceToken != -1) {
                    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
                  }
                  int v219 = (id)gconnectionLogObj;
                  if (os_log_type_enabled(v219, OS_LOG_TYPE_INFO))
                  {
                    int v220 = nw_endpoint_handler_get_id_string(v471);
                    BOOL v221 = nw_endpoint_handler_dry_run_string(v471);
                    nw_endpoint_t v222 = nw_endpoint_handler_copy_endpoint(v471);
                    BOOL v223 = nw_endpoint_get_logging_description(v222);
                    uint64_t v224 = nw_endpoint_handler_state_string(v471);
                    uint64_t v225 = nw_endpoint_handler_mode_string(v471);
                    id v226 = nw_endpoint_handler_copy_current_path(v471);
                    *(_DWORD *)int buf = 136447746;
                    int v481 = "nw_endpoint_proxy_receive_report";
                    __int16 v482 = 2082;
                    uint64_t v483 = (uint64_t)v220;
                    __int16 v484 = 2082;
                    uint64_t v485 = (uint64_t)v221;
                    __int16 v486 = 2082;
                    BOOL v487 = v223;
                    __int16 v488 = 2082;
                    v489 = v224;
                    __int16 v490 = 2082;
                    v491 = v225;
                    __int16 v492 = 2114;
                    id v493 = v226;
                    _os_log_impl(&dword_1830D4000, v219, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] children failed, detected origin error", buf, 0x48u);
                  }
                  goto LABEL_264;
                }
LABEL_265:
                nw_endpoint_handler_handle_failure(v471);
                v471->event = (nw_endpoint_handler_event_s)327684;
                nw_endpoint_handler_report(v471, 0, &v471->event.domain, 0);
                goto LABEL_219;
              }
              if (v205 == *((_DWORD *)v42 + 6))
              {
                int v227 = nw_endpoint_handler_get_minimize_logging(v471);
                char v228 = nw_endpoint_handler_get_logging_disabled(v471);
                if (v227)
                {
                  if (v228) {
                    goto LABEL_274;
                  }
                  if (__nwlog_connection_log::onceToken != -1) {
                    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
                  }
                  int v229 = (id)gconnectionLogObj;
                  if (os_log_type_enabled(v229, OS_LOG_TYPE_DEBUG))
                  {
                    v379 = nw_endpoint_handler_get_id_string(v471);
                    __int16 v380 = nw_endpoint_handler_dry_run_string(v471);
                    nw_endpoint_t v381 = nw_endpoint_handler_copy_endpoint(v471);
                    int v382 = nw_endpoint_get_logging_description(v381);
                    v383 = nw_endpoint_handler_state_string(v471);
                    __int16 v384 = nw_endpoint_handler_mode_string(v471);
                    id v385 = nw_endpoint_handler_copy_current_path(v471);
                    *(_DWORD *)int buf = 136447746;
                    int v481 = "nw_endpoint_proxy_receive_report";
                    __int16 v482 = 2082;
                    uint64_t v483 = (uint64_t)v379;
                    __int16 v484 = 2082;
                    uint64_t v485 = (uint64_t)v380;
                    __int16 v486 = 2082;
                    BOOL v487 = v382;
                    __int16 v488 = 2082;
                    v489 = v383;
                    __int16 v490 = 2082;
                    v491 = v384;
                    __int16 v492 = 2114;
                    id v493 = v385;
                    _os_log_impl(&dword_1830D4000, v229, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] all started children failed, start next child.", buf, 0x48u);
                  }
                  goto LABEL_273;
                }
                if ((v228 & 1) == 0)
                {
                  if (__nwlog_connection_log::onceToken != -1) {
                    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
                  }
                  int v229 = (id)gconnectionLogObj;
                  if (os_log_type_enabled(v229, OS_LOG_TYPE_INFO))
                  {
                    int v230 = nw_endpoint_handler_get_id_string(v471);
                    uint64_t v231 = nw_endpoint_handler_dry_run_string(v471);
                    nw_endpoint_t v232 = nw_endpoint_handler_copy_endpoint(v471);
                    uint64_t v233 = nw_endpoint_get_logging_description(v232);
                    id v234 = nw_endpoint_handler_state_string(v471);
                    os_log_type_t v235 = nw_endpoint_handler_mode_string(v471);
                    id v236 = nw_endpoint_handler_copy_current_path(v471);
                    *(_DWORD *)int buf = 136447746;
                    int v481 = "nw_endpoint_proxy_receive_report";
                    __int16 v482 = 2082;
                    uint64_t v483 = (uint64_t)v230;
                    __int16 v484 = 2082;
                    uint64_t v485 = (uint64_t)v231;
                    __int16 v486 = 2082;
                    BOOL v487 = v233;
                    __int16 v488 = 2082;
                    v489 = v234;
                    __int16 v490 = 2082;
                    v491 = v235;
                    __int16 v492 = 2114;
                    id v493 = v236;
                    _os_log_impl(&dword_1830D4000, v229, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] all started children failed, start next child.", buf, 0x48u);
                  }
LABEL_273:
                }
              }
              else
              {
                if (!v203) {
                  goto LABEL_219;
                }
                int v244 = nw_endpoint_handler_get_minimize_logging(v471);
                char v245 = nw_endpoint_handler_get_logging_disabled(v471);
                if (v244)
                {
                  if (v245) {
                    goto LABEL_274;
                  }
                  if (__nwlog_connection_log::onceToken != -1) {
                    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
                  }
                  int v229 = (id)gconnectionLogObj;
                  if (os_log_type_enabled(v229, OS_LOG_TYPE_DEBUG))
                  {
                    int v404 = nw_endpoint_handler_get_id_string(v471);
                    int v405 = nw_endpoint_handler_dry_run_string(v471);
                    nw_endpoint_t v406 = nw_endpoint_handler_copy_endpoint(v471);
                    uint64_t v407 = nw_endpoint_get_logging_description(v406);
                    uint64_t v408 = nw_endpoint_handler_state_string(v471);
                    int v409 = nw_endpoint_handler_mode_string(v471);
                    id v410 = nw_endpoint_handler_copy_current_path(v471);
                    *(_DWORD *)int buf = 136447746;
                    int v481 = "nw_endpoint_proxy_receive_report";
                    __int16 v482 = 2082;
                    uint64_t v483 = (uint64_t)v404;
                    __int16 v484 = 2082;
                    uint64_t v485 = (uint64_t)v405;
                    __int16 v486 = 2082;
                    BOOL v487 = v407;
                    __int16 v488 = 2082;
                    v489 = v408;
                    __int16 v490 = 2082;
                    v491 = v409;
                    __int16 v492 = 2114;
                    id v493 = v410;
                    _os_log_impl(&dword_1830D4000, v229, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] failing open, start next child.", buf, 0x48u);
                  }
                  goto LABEL_273;
                }
                if ((v245 & 1) == 0)
                {
                  if (__nwlog_connection_log::onceToken != -1) {
                    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
                  }
                  int v229 = (id)gconnectionLogObj;
                  if (os_log_type_enabled(v229, OS_LOG_TYPE_INFO))
                  {
                    uint64_t v246 = nw_endpoint_handler_get_id_string(v471);
                    uint64_t v247 = nw_endpoint_handler_dry_run_string(v471);
                    nw_endpoint_t v248 = nw_endpoint_handler_copy_endpoint(v471);
                    int v249 = nw_endpoint_get_logging_description(v248);
                    BOOL v250 = nw_endpoint_handler_state_string(v471);
                    uint64_t v251 = nw_endpoint_handler_mode_string(v471);
                    id v252 = nw_endpoint_handler_copy_current_path(v471);
                    *(_DWORD *)int buf = 136447746;
                    int v481 = "nw_endpoint_proxy_receive_report";
                    __int16 v482 = 2082;
                    uint64_t v483 = (uint64_t)v246;
                    __int16 v484 = 2082;
                    uint64_t v485 = (uint64_t)v247;
                    __int16 v486 = 2082;
                    BOOL v487 = v249;
                    __int16 v488 = 2082;
                    v489 = v250;
                    __int16 v490 = 2082;
                    v491 = v251;
                    __int16 v492 = 2114;
                    id v493 = v252;
                    _os_log_impl(&dword_1830D4000, v229, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] failing open, start next child.", buf, 0x48u);
                  }
                  goto LABEL_273;
                }
              }
LABEL_274:
              nw_endpoint_proxy_start_next_child(v471);
              goto LABEL_219;
            }
          }
          else if (v449)
          {
            goto LABEL_295;
          }
          int v282 = nw_endpoint_handler_get_minimize_logging(v471);
          char v283 = nw_endpoint_handler_get_logging_disabled(v471);
          if (v253)
          {
            if (v282)
            {
              if (v283) {
                goto LABEL_321;
              }
              if (__nwlog_connection_log::onceToken != -1) {
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
              }
              int v284 = (id)gconnectionLogObj;
              if (os_log_type_enabled(v284, OS_LOG_TYPE_DEBUG))
              {
                BOOL v413 = nw_endpoint_handler_get_id_string(v471);
                v414 = nw_endpoint_handler_dry_run_string(v471);
                nw_endpoint_t v415 = nw_endpoint_handler_copy_endpoint(v471);
                BOOL v416 = nw_endpoint_get_logging_description(v415);
                uint64_t v417 = nw_endpoint_handler_state_string(v471);
                int v418 = nw_endpoint_handler_mode_string(v471);
                id v419 = nw_endpoint_handler_copy_current_path(v471);
                char v420 = BYTE1(loga[12].isa);
                v421 = nw_endpoint_handler_get_id_string(v474);
                *(_DWORD *)int buf = 136448770;
                int v481 = "nw_endpoint_proxy_receive_report";
                v422 = "";
                uint64_t v483 = (uint64_t)v413;
                __int16 v482 = 2082;
                if ((v420 & 4) == 0) {
                  v422 = " during establishment";
                }
                __int16 v484 = 2082;
                uint64_t v485 = (uint64_t)v414;
                __int16 v486 = 2082;
                BOOL v487 = v416;
                __int16 v488 = 2082;
                v489 = v417;
                __int16 v490 = 2082;
                v491 = v418;
                __int16 v492 = 2114;
                id v493 = v419;
                __int16 v494 = 1024;
                *(_DWORD *)v495 = error_code;
                *(_WORD *)&v495[4] = 2082;
                *(void *)&v495[6] = v422;
                *(_WORD *)&v495[14] = 2082;
                *(void *)&v495[16] = v421;
                *(_WORD *)&v495[24] = 2114;
                *(void *)&v495[26] = v461;
                _os_log_impl(&dword_1830D4000, v284, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Privacy proxy detected origin server failure with error %d%{public}s ([C%{public}s] %{public}@)", buf, 0x6Cu);
              }
            }
            else
            {
              if (v283)
              {
LABEL_321:
                if ((v449 & 0x100000000) != 0)
                {
                  int v203 = 0;
                  int v204 = 1;
                  goto LABEL_307;
                }
                v310 = v471;
                v310->int privacy_stance = 2;

                int v203 = 0;
                int v204 = 1;
LABEL_353:
                id v9 = v474;
                nw_endpoint_t v42 = (NWConcrete_nw_endpoint_mode_handler *)loga;
                goto LABEL_307;
              }
              if (__nwlog_connection_log::onceToken != -1) {
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
              }
              int v284 = (id)gconnectionLogObj;
              if (os_log_type_enabled(v284, OS_LOG_TYPE_DEFAULT))
              {
                id v285 = nw_endpoint_handler_get_id_string(v471);
                v286 = nw_endpoint_handler_dry_run_string(v471);
                nw_endpoint_t v287 = nw_endpoint_handler_copy_endpoint(v471);
                BOOL v288 = nw_endpoint_get_logging_description(v287);
                uint64_t v289 = nw_endpoint_handler_state_string(v471);
                uint64_t v290 = nw_endpoint_handler_mode_string(v471);
                id v291 = nw_endpoint_handler_copy_current_path(v471);
                char v292 = BYTE1(loga[12].isa);
                uint64_t v293 = nw_endpoint_handler_get_id_string(v474);
                *(_DWORD *)int buf = 136448770;
                int v481 = "nw_endpoint_proxy_receive_report";
                msghdr v294 = "";
                uint64_t v483 = (uint64_t)v285;
                __int16 v482 = 2082;
                if ((v292 & 4) == 0) {
                  msghdr v294 = " during establishment";
                }
                __int16 v484 = 2082;
                uint64_t v485 = (uint64_t)v286;
                __int16 v486 = 2082;
                BOOL v487 = v288;
                __int16 v488 = 2082;
                v489 = v289;
                __int16 v490 = 2082;
                v491 = v290;
                __int16 v492 = 2114;
                id v493 = v291;
                __int16 v494 = 1024;
                *(_DWORD *)v495 = error_code;
                *(_WORD *)&v495[4] = 2082;
                *(void *)&v495[6] = v294;
                *(_WORD *)&v495[14] = 2082;
                *(void *)&v495[16] = v293;
                *(_WORD *)&v495[24] = 2114;
                *(void *)&v495[26] = v461;
                _os_log_impl(&dword_1830D4000, v284, OS_LOG_TYPE_DEFAULT, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Privacy proxy detected origin server failure with error %d%{public}s ([C%{public}s] %{public}@)", buf, 0x6Cu);
              }
            }

            id v9 = v474;
            nw_endpoint_t v42 = (NWConcrete_nw_endpoint_mode_handler *)loga;
            goto LABEL_321;
          }
          if (v282)
          {
            if (v283) {
              goto LABEL_332;
            }
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
            }
            id v295 = (id)gconnectionLogObj;
            if (os_log_type_enabled(v295, OS_LOG_TYPE_DEBUG))
            {
              int v467 = nw_endpoint_handler_get_id_string(v471);
              os_log_type_t v423 = nw_endpoint_handler_dry_run_string(v471);
              nw_endpoint_t v424 = nw_endpoint_handler_copy_endpoint(v471);
              v425 = nw_endpoint_get_logging_description(v424);
              v426 = nw_endpoint_handler_state_string(v471);
              v427 = nw_endpoint_handler_mode_string(v471);
              id v428 = nw_endpoint_handler_copy_current_path(v471);
              char v429 = BYTE1(loga[12].isa);
              v430 = nw_endpoint_handler_get_id_string(v474);
              *(_DWORD *)int buf = 136448770;
              int v481 = "nw_endpoint_proxy_receive_report";
              uint64_t v431 = "";
              uint64_t v483 = (uint64_t)v467;
              __int16 v482 = 2082;
              if ((v429 & 4) == 0) {
                uint64_t v431 = " during establishment";
              }
              __int16 v484 = 2082;
              uint64_t v485 = (uint64_t)v423;
              __int16 v486 = 2082;
              BOOL v487 = v425;
              __int16 v488 = 2082;
              v489 = v426;
              __int16 v490 = 2082;
              v491 = v427;
              __int16 v492 = 2114;
              id v493 = v428;
              __int16 v494 = 1024;
              *(_DWORD *)v495 = error_code;
              *(_WORD *)&v495[4] = 2082;
              *(void *)&v495[6] = v431;
              *(_WORD *)&v495[14] = 2082;
              *(void *)&v495[16] = v430;
              *(_WORD *)&v495[24] = 2114;
              *(void *)&v495[26] = v461;
              _os_log_impl(&dword_1830D4000, v295, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Privacy proxy failed with error %d%{public}s ([C%{public}s] %{public}@)", buf, 0x6Cu);
            }
          }
          else
          {
            if (v283)
            {
LABEL_332:
              if ((v449 & 0x100000000) != 0)
              {
                int v203 = 0;
                int v204 = 0;
                goto LABEL_307;
              }
              if (v180 && (*((unsigned char *)v42 + 96) & 4) != 0) {
                int v311 = 5;
              }
              else {
                int v311 = 3;
              }
              uint64_t v316 = v471;
              v316->int privacy_stance = v311;

              int v203 = 0;
              int v204 = 0;
              goto LABEL_353;
            }
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
            }
            id v295 = (id)gconnectionLogObj;
            if (os_log_type_enabled(v295, OS_LOG_TYPE_DEFAULT))
            {
              int v466 = v295;
              os_log_type_t v296 = nw_endpoint_handler_get_id_string(v471);
              uint64_t v297 = nw_endpoint_handler_dry_run_string(v471);
              nw_endpoint_t v298 = nw_endpoint_handler_copy_endpoint(v471);
              nw_endpoint_t v299 = nw_endpoint_get_logging_description(v298);
              v300 = nw_endpoint_handler_state_string(v471);
              __int16 v301 = nw_endpoint_handler_mode_string(v471);
              id v302 = nw_endpoint_handler_copy_current_path(v471);
              char v303 = BYTE1(loga[12].isa);
              os_log_type_t v304 = nw_endpoint_handler_get_id_string(v474);
              *(_DWORD *)int buf = 136448770;
              int v481 = "nw_endpoint_proxy_receive_report";
              __int16 v305 = "";
              uint64_t v483 = (uint64_t)v296;
              __int16 v482 = 2082;
              if ((v303 & 4) == 0) {
                __int16 v305 = " during establishment";
              }
              __int16 v484 = 2082;
              uint64_t v485 = (uint64_t)v297;
              __int16 v486 = 2082;
              BOOL v487 = v299;
              __int16 v488 = 2082;
              v489 = v300;
              __int16 v490 = 2082;
              v491 = v301;
              __int16 v492 = 2114;
              id v493 = v302;
              __int16 v494 = 1024;
              *(_DWORD *)v495 = error_code;
              *(_WORD *)&v495[4] = 2082;
              *(void *)&v495[6] = v305;
              *(_WORD *)&v495[14] = 2082;
              *(void *)&v495[16] = v304;
              *(_WORD *)&v495[24] = 2114;
              *(void *)&v495[26] = v461;
              _os_log_impl(&dword_1830D4000, v466, OS_LOG_TYPE_DEFAULT, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Privacy proxy failed with error %d%{public}s ([C%{public}s] %{public}@)", buf, 0x6Cu);

              id v295 = v466;
            }
          }

          id v9 = v474;
          nw_endpoint_t v42 = (NWConcrete_nw_endpoint_mode_handler *)loga;
          goto LABEL_332;
        }
        int v192 = nw_endpoint_handler_get_minimize_logging(v471);
        char v193 = nw_endpoint_handler_get_logging_disabled(v471);
        if (v192)
        {
          if (v193)
          {
            int v203 = 0;
            int v204 = 0;
            goto LABEL_230;
          }
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          os_log_type_t v194 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v194, OS_LOG_TYPE_DEBUG))
          {
            __int16 v386 = nw_endpoint_handler_get_id_string(v471);
            v387 = nw_endpoint_handler_dry_run_string(v471);
            nw_endpoint_t v388 = nw_endpoint_handler_copy_endpoint(v471);
            v389 = nw_endpoint_get_logging_description(v388);
            BOOL v390 = nw_endpoint_handler_state_string(v471);
            uint64_t v391 = nw_endpoint_handler_mode_string(v471);
            id v392 = nw_endpoint_handler_copy_current_path(v471);
            int v393 = nw_endpoint_handler_get_id_string(v474);
            *(_DWORD *)int buf = 136448258;
            int v481 = "nw_endpoint_proxy_receive_report";
            __int16 v482 = 2082;
            uint64_t v483 = (uint64_t)v386;
            __int16 v484 = 2082;
            uint64_t v485 = (uint64_t)v387;
            __int16 v486 = 2082;
            BOOL v487 = v389;
            __int16 v488 = 2082;
            v489 = v390;
            __int16 v490 = 2082;
            v491 = v391;
            __int16 v492 = 2114;
            id v493 = v392;
            __int16 v494 = 2082;
            *(void *)v495 = v393;
            *(_WORD *)&v495[8] = 2114;
            *(void *)&v495[10] = v461;
            _os_log_impl(&dword_1830D4000, v194, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Privacy proxy failed, not reporting error ([C%{public}s] %{public}@)", buf, 0x5Cu);
          }
          goto LABEL_228;
        }
        if ((v193 & 1) == 0)
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          os_log_type_t v194 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v194, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v195 = nw_endpoint_handler_get_id_string(v471);
            uint64_t v196 = nw_endpoint_handler_dry_run_string(v471);
            nw_endpoint_t v197 = nw_endpoint_handler_copy_endpoint(v471);
            BOOL v198 = nw_endpoint_get_logging_description(v197);
            BOOL v199 = nw_endpoint_handler_state_string(v471);
            uint64_t v200 = nw_endpoint_handler_mode_string(v471);
            id v201 = nw_endpoint_handler_copy_current_path(v471);
            uint64_t v202 = nw_endpoint_handler_get_id_string(v474);
            *(_DWORD *)int buf = 136448258;
            int v481 = "nw_endpoint_proxy_receive_report";
            __int16 v482 = 2082;
            uint64_t v483 = (uint64_t)v195;
            __int16 v484 = 2082;
            uint64_t v485 = (uint64_t)v196;
            __int16 v486 = 2082;
            BOOL v487 = v198;
            __int16 v488 = 2082;
            v489 = v199;
            __int16 v490 = 2082;
            v491 = v200;
            __int16 v492 = 2114;
            id v493 = v201;
            __int16 v494 = 2082;
            *(void *)v495 = v202;
            *(_WORD *)&v495[8] = 2114;
            *(void *)&v495[10] = v461;
            _os_log_impl(&dword_1830D4000, v194, OS_LOG_TYPE_DEFAULT, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Privacy proxy failed, not reporting error ([C%{public}s] %{public}@)", buf, 0x5Cu);
          }
LABEL_228:
          int v203 = 0;
          int v204 = 0;
LABEL_229:

LABEL_230:
          id v9 = v474;
          nw_endpoint_t v42 = (NWConcrete_nw_endpoint_mode_handler *)loga;
          goto LABEL_232;
        }
      }
LABEL_231:
      int v203 = 0;
      int v204 = 0;
      goto LABEL_232;
    }
    uint64_t v181 = v471;
    BOOL v182 = (*((unsigned char *)v471 + 268) & 0x20) == 0;

    id v9 = v474;
    if (v182)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      int v183 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v183, OS_LOG_TYPE_DEBUG))
      {
        os_log_type_t v184 = nw_endpoint_handler_get_id_string(v181);
        uint64_t v185 = nw_endpoint_handler_dry_run_string(v181);
        nw_endpoint_t v186 = nw_endpoint_handler_copy_endpoint(v181);
        uint64_t v187 = nw_endpoint_get_logging_description(v186);
        uint64_t v188 = nw_endpoint_handler_state_string(v181);
        uint64_t v189 = nw_endpoint_handler_mode_string(v181);
        id v190 = nw_endpoint_handler_copy_current_path(v181);
        *(_DWORD *)int buf = 136447746;
        int v481 = "nw_endpoint_proxy_receive_report";
        __int16 v482 = 2082;
        uint64_t v483 = (uint64_t)v184;
        __int16 v484 = 2082;
        uint64_t v485 = (uint64_t)v185;
        __int16 v486 = 2082;
        BOOL v487 = v187;
        __int16 v488 = 2082;
        v489 = v188;
        __int16 v490 = 2082;
        v491 = v189;
        __int16 v492 = 2114;
        id v493 = v190;
        _os_log_impl(&dword_1830D4000, v183, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Passing up other child report", buf, 0x48u);
      }
      id v9 = v474;
    }
LABEL_218:
    nw_endpoint_handler_report(v471, v9, a4, v472);
    goto LABEL_219;
  }
  objc_storeStrong(v43, a1);
  v152 = nw_endpoint_handler_copy_endpoint(v471);
  if (!v152 || !v461) {
    goto LABEL_191;
  }
  os_log_type_t v153 = v461;
  os_log_type_t v154 = (void *)v153[18];
  if (!v154)
  {
LABEL_190:

    goto LABEL_191;
  }
  BOOL v155 = xpc_array_get_count(v154) == 0;

  if (v155)
  {
LABEL_191:
    nw_endpoint_handler_report(v471, v474, a4, v472);
    int v168 = v471;
    v168->int state = 3;

    uint64_t isa = (uint64_t)loga[11].isa;
    if (isa)
    {
      nw_queue_cancel_source(isa);
      loga[11].uint64_t isa = 0;
    }
    nw_endpoint_handler_report(v168, 0, a4, 0);
    BOOL v170 = (atomic_uchar *)loga[1].isa;
    v475[0] = MEMORY[0x1E4F143A8];
    v475[1] = 3221225472;
    v475[2] = ___ZL32nw_endpoint_proxy_receive_reportP30NWConcrete_nw_endpoint_handler26nw_endpoint_handler_mode_t21nw_connection_state_tP27nw_endpoint_handler_event_sPU22objcproto11OS_nw_error8NSObjectPU23objcproto12OS_nw_objectS5__block_invoke;
    v475[3] = &unk_1E5247FB8;
    os_log_type_t v476 = loga;
    v477 = v474;
    nw_array_apply(v170, (uint64_t)v475);

LABEL_194:
LABEL_219:

    goto LABEL_220;
  }
  os_log_type_t v156 = nw_endpoint_copy_cname_array(v152);
  os_log_type_t v153 = v156;
  if (!v156 || v156[3] == v156[2]) {
    goto LABEL_190;
  }
  long long v157 = nw_endpoint_handler_copy_association(v471, 0);
  if (!v157)
  {
LABEL_189:

    goto LABEL_190;
  }
  id v158 = nw_protocol_copy_proxy_definition();
  os_log_t v465 = v157;
  uint64_t cached_content_for_protocol = nw_association_get_cached_content_for_protocol(v157, v158);

  if (cached_content_for_protocol
    || (uint64_t cached_content_for_protocol = (uint64_t)malloc_type_calloc(1uLL, 8uLL, 0xEAFB8F1AuLL)) != 0)
  {
LABEL_182:
    id obja = (id)(4
              * networkd_settings_get_int64_with_default((const char *)nw_setting_proxy_fallback_cache_seconds, 1800));
    if ((nw_endpoint_handler_get_logging_disabled(v471) & 1) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      long long v160 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v160, OS_LOG_TYPE_DEBUG))
      {
        os_log_type_t v161 = nw_endpoint_handler_get_id_string(v471);
        int v454 = nw_endpoint_handler_dry_run_string(v471);
        nw_endpoint_t v459 = nw_endpoint_handler_copy_endpoint(v471);
        uint64_t v162 = nw_endpoint_get_logging_description(v459);
        int v163 = nw_endpoint_handler_state_string(v471);
        int v164 = nw_endpoint_handler_mode_string(v471);
        id v165 = nw_endpoint_handler_copy_current_path(v471);
        *(_DWORD *)int buf = 136448002;
        int v481 = "nw_endpoint_proxy_receive_report";
        __int16 v482 = 2082;
        uint64_t v483 = (uint64_t)v161;
        __int16 v484 = 2082;
        uint64_t v485 = (uint64_t)v454;
        __int16 v486 = 2082;
        BOOL v487 = v162;
        __int16 v488 = 2082;
        v489 = v163;
        __int16 v490 = 2082;
        v491 = v164;
        __int16 v492 = 2114;
        id v493 = v165;
        __int16 v494 = 2048;
        *(void *)v495 = obja;
        _os_log_impl(&dword_1830D4000, v160, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Endpoint has alias array, extending cache for %lld seconds", buf, 0x52u);
      }
    }
    id v166 = nw_protocol_copy_proxy_definition();
    time_t v167 = time(0);
    nw_association_set_cached_content_for_protocol(v465, v166, cached_content_for_protocol, (uint64_t)obja + v167);

    long long v157 = v465;
    goto LABEL_189;
  }
  int v411 = __nwlog_obj();
  os_log_type_enabled(v411, OS_LOG_TYPE_ERROR);
  *(_DWORD *)int buf = 136446722;
  int v481 = "strict_calloc";
  __int16 v482 = 2048;
  uint64_t v483 = 1;
  __int16 v484 = 2048;
  uint64_t v485 = 8;
  v412 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v412);
  if (!result)
  {
    free(v412);
    uint64_t cached_content_for_protocol = 0;
    goto LABEL_182;
  }
  __break(1u);
  return result;
}

void sub_18342D850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,void *a25,uint64_t a26,void *a27,uint64_t a28,void *a29)
{
  _Unwind_Resume(a1);
}

void nw_parameters_set_prohibited_interface_types(void *a1, void *a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (!v3)
  {
    id v10 = __nwlog_obj();
    *(_DWORD *)applier = 136446210;
    *(void *)&void applier[4] = "nw_parameters_set_prohibited_interface_types";
    os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (__nwlog_fault(v11, &type, &v20))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v12 = __nwlog_obj();
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)applier = 136446210;
          *(void *)&void applier[4] = "nw_parameters_set_prohibited_interface_types";
          _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s called with null parameters", applier, 0xCu);
        }
      }
      else if (v20)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        uint64_t v12 = __nwlog_obj();
        os_log_type_t v15 = type;
        BOOL v16 = os_log_type_enabled(v12, type);
        if (backtrace_string)
        {
          if (v16)
          {
            *(_DWORD *)applier = 136446466;
            *(void *)&void applier[4] = "nw_parameters_set_prohibited_interface_types";
            *(_WORD *)&applier[12] = 2082;
            *(void *)&applier[14] = backtrace_string;
            _os_log_impl(&dword_1830D4000, v12, v15, "%{public}s called with null parameters, dumping backtrace:%{public}s", applier, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_32;
        }
        if (v16)
        {
          *(_DWORD *)applier = 136446210;
          *(void *)&void applier[4] = "nw_parameters_set_prohibited_interface_types";
          _os_log_impl(&dword_1830D4000, v12, v15, "%{public}s called with null parameters, no backtrace", applier, 0xCu);
        }
      }
      else
      {
        uint64_t v12 = __nwlog_obj();
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)applier = 136446210;
          *(void *)&void applier[4] = "nw_parameters_set_prohibited_interface_types";
          _os_log_impl(&dword_1830D4000, v12, v19, "%{public}s called with null parameters, backtrace limit exceeded", applier, 0xCu);
        }
      }
    }
LABEL_32:
    if (v11) {
      free(v11);
    }
    goto LABEL_13;
  }
  if (*(void *)(v3[13] + 176))
  {
    if (!v4) {
      goto LABEL_11;
    }
    goto LABEL_8;
  }
  if (!v4)
  {
LABEL_13:

    return;
  }
  uint64_t v6 = malloc_type_calloc(1uLL, 0x90uLL, 0xEAFB8F1AuLL);
  if (v6)
  {
LABEL_7:
    *(void *)(v3[13] + 176) = v6;
LABEL_8:
    if (object_getClass(v5) == (Class)MEMORY[0x1E4F14568])
    {
      *(void *)applier = MEMORY[0x1E4F143A8];
      *(void *)&applier[8] = 0x40000000;
      *(void *)&applier[16] = __nw_xpc_retain_array_with_validated_types_block_invoke;
      uint64_t v23 = (uint64_t)&__block_descriptor_tmp_88110;
      uint64_t v24 = MEMORY[0x1E4F145F8];
      if (xpc_array_apply(v5, applier))
      {
        xpc_object_t v7 = xpc_retain(v5);
LABEL_12:
        uint64_t v8 = *(void ***)(v3[13] + 176);
        id v9 = *v8;
        *uint64_t v8 = v7;

        goto LABEL_13;
      }
    }
LABEL_11:
    xpc_object_t v7 = 0;
    goto LABEL_12;
  }
  os_log_type_t v17 = __nwlog_obj();
  os_log_type_enabled(v17, OS_LOG_TYPE_ERROR);
  *(_DWORD *)applier = 136446722;
  *(void *)&void applier[4] = "strict_calloc";
  *(_WORD *)&applier[12] = 2048;
  *(void *)&applier[14] = 1;
  *(_WORD *)&applier[22] = 2048;
  uint64_t v23 = 144;
  char v18 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v18))
  {
    free(v18);
    goto LABEL_7;
  }
  __break(1u);
}

void sub_18342E0F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_parameters_set_expired_dns_behavior(nw_parameters_t parameters, nw_parameters_expired_dns_behavior_t expired_dns_behavior)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  nw_parameters_t v3 = parameters;
  nw_parameters_t v4 = v3;
  if (!v3)
  {
    id v5 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    char v22 = "nw_parameters_set_expired_dns_behavior";
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (!__nwlog_fault(v6, &type, &v19)) {
      goto LABEL_38;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      xpc_object_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        char v22 = "nw_parameters_set_expired_dns_behavior";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      xpc_object_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)int buf = 136446466;
          char v22 = "nw_parameters_set_expired_dns_behavior";
          __int16 v23 = 2082;
          uint64_t v24 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v6) {
          goto LABEL_4;
        }
LABEL_39:
        free(v6);
        goto LABEL_4;
      }
      if (v13)
      {
        *(_DWORD *)int buf = 136446210;
        char v22 = "nw_parameters_set_expired_dns_behavior";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      xpc_object_t v7 = __nwlog_obj();
      os_log_type_t v17 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        char v22 = "nw_parameters_set_expired_dns_behavior";
        _os_log_impl(&dword_1830D4000, v7, v17, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_37:

    goto LABEL_38;
  }
  if (expired_dns_behavior < 0xFF)
  {
    HIBYTE(v3[11].isa) = expired_dns_behavior;
    goto LABEL_4;
  }
  id v9 = __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  char v22 = "nw_parameters_set_expired_dns_behavior";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v19 = 0;
  if (!__nwlog_fault(v6, &type, &v19)) {
    goto LABEL_38;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    xpc_object_t v7 = __nwlog_obj();
    os_log_type_t v10 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)int buf = 136446210;
      char v22 = "nw_parameters_set_expired_dns_behavior";
      _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null (static_cast<uint32_t>(expired_dns_behavior) < UINT8_MAX)", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (!v19)
  {
    xpc_object_t v7 = __nwlog_obj();
    os_log_type_t v18 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)int buf = 136446210;
      char v22 = "nw_parameters_set_expired_dns_behavior";
      _os_log_impl(&dword_1830D4000, v7, v18, "%{public}s called with null (static_cast<uint32_t>(expired_dns_behavior) < UINT8_MAX), backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_37;
  }
  char v14 = (char *)__nw_create_backtrace_string();
  xpc_object_t v7 = __nwlog_obj();
  os_log_type_t v15 = type;
  BOOL v16 = os_log_type_enabled(v7, type);
  if (!v14)
  {
    if (v16)
    {
      *(_DWORD *)int buf = 136446210;
      char v22 = "nw_parameters_set_expired_dns_behavior";
      _os_log_impl(&dword_1830D4000, v7, v15, "%{public}s called with null (static_cast<uint32_t>(expired_dns_behavior) < UINT8_MAX), no backtrace", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (v16)
  {
    *(_DWORD *)int buf = 136446466;
    char v22 = "nw_parameters_set_expired_dns_behavior";
    __int16 v23 = 2082;
    uint64_t v24 = v14;
    _os_log_impl(&dword_1830D4000, v7, v15, "%{public}s called with null (static_cast<uint32_t>(expired_dns_behavior) < UINT8_MAX), dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v14);
  if (v6) {
    goto LABEL_39;
  }
LABEL_4:
}

void nw_application_id_get_persona(void *a1, _OWORD *a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  nw_parameters_t v3 = a1;
  nw_parameters_t v4 = v3;
  if (!v3)
  {
    id v5 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    char v22 = "nw_application_id_get_persona";
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (!__nwlog_fault(v6, &type, &v19)) {
      goto LABEL_38;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      xpc_object_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        char v22 = "nw_application_id_get_persona";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null application_id", buf, 0xCu);
      }
    }
    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      xpc_object_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)int buf = 136446466;
          char v22 = "nw_application_id_get_persona";
          __int16 v23 = 2082;
          uint64_t v24 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null application_id, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v6) {
          goto LABEL_4;
        }
LABEL_39:
        free(v6);
        goto LABEL_4;
      }
      if (v13)
      {
        *(_DWORD *)int buf = 136446210;
        char v22 = "nw_application_id_get_persona";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null application_id, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      xpc_object_t v7 = __nwlog_obj();
      os_log_type_t v17 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        char v22 = "nw_application_id_get_persona";
        _os_log_impl(&dword_1830D4000, v7, v17, "%{public}s called with null application_id, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_37:

    goto LABEL_38;
  }
  if (a2)
  {
    *a2 = *(_OWORD *)(v3 + 88);
    goto LABEL_4;
  }
  id v9 = __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  char v22 = "nw_application_id_get_persona";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v19 = 0;
  if (!__nwlog_fault(v6, &type, &v19)) {
    goto LABEL_38;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    xpc_object_t v7 = __nwlog_obj();
    os_log_type_t v10 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)int buf = 136446210;
      char v22 = "nw_application_id_get_persona";
      _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null persona_id", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (!v19)
  {
    xpc_object_t v7 = __nwlog_obj();
    os_log_type_t v18 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)int buf = 136446210;
      char v22 = "nw_application_id_get_persona";
      _os_log_impl(&dword_1830D4000, v7, v18, "%{public}s called with null persona_id, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_37;
  }
  char v14 = (char *)__nw_create_backtrace_string();
  xpc_object_t v7 = __nwlog_obj();
  os_log_type_t v15 = type;
  BOOL v16 = os_log_type_enabled(v7, type);
  if (!v14)
  {
    if (v16)
    {
      *(_DWORD *)int buf = 136446210;
      char v22 = "nw_application_id_get_persona";
      _os_log_impl(&dword_1830D4000, v7, v15, "%{public}s called with null persona_id, no backtrace", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (v16)
  {
    *(_DWORD *)int buf = 136446466;
    char v22 = "nw_application_id_get_persona";
    __int16 v23 = 2082;
    uint64_t v24 = v14;
    _os_log_impl(&dword_1830D4000, v7, v15, "%{public}s called with null persona_id, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v14);
  if (v6) {
    goto LABEL_39;
  }
LABEL_4:
}

uint64_t nw_application_id_set_self(void *a1)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  int v16 = 1;
  int v24 = 0;
  memset(v23, 0, sizeof(v23));
  nw_application_id_get_uuid(v1, v23);
  size_t v2 = v1[8];
  if ((v2 - 1) <= 0x1F)
  {
    LODWORD(v23[1]) = v1[8];
    memcpy((char *)&v23[1] + 4, v1 + 9, v2);
  }
  if (nw_context_copy_implicit_context::onceToken != -1) {
    dispatch_once(&nw_context_copy_implicit_context::onceToken, &__block_literal_global_18);
  }
  id v3 = (id)nw_context_copy_implicit_context::implicit_context;
  nw_path_shared_necp_fd(v3);

  if (!necp_client_action())
  {
    uint64_t v4 = 0;
    goto LABEL_14;
  }
  uint64_t v4 = **(unsigned int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v5 = (id)gLogObj;
  *(_DWORD *)int buf = 136446466;
  os_log_type_t v18 = "nw_application_id_set_self";
  __int16 v19 = 1024;
  int v20 = v4;
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v6, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      xpc_object_t v7 = (id)gLogObj;
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446466;
        os_log_type_t v18 = "nw_application_id_set_self";
        __int16 v19 = 1024;
        int v20 = v4;
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s NECP_CLIENT_ACTION_SET_SIGNED_CLIENT_ID %{darwin.errno}d", buf, 0x12u);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      xpc_object_t v7 = (id)gLogObj;
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)int buf = 136446722;
          os_log_type_t v18 = "nw_application_id_set_self";
          __int16 v19 = 1024;
          int v20 = v4;
          __int16 v21 = 2082;
          char v22 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v11, "%{public}s NECP_CLIENT_ACTION_SET_SIGNED_CLIENT_ID %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x1Cu);
        }

        free(backtrace_string);
        if (v6) {
          goto LABEL_12;
        }
        goto LABEL_14;
      }
      if (v12)
      {
        *(_DWORD *)int buf = 136446466;
        os_log_type_t v18 = "nw_application_id_set_self";
        __int16 v19 = 1024;
        int v20 = v4;
        _os_log_impl(&dword_1830D4000, v7, v11, "%{public}s NECP_CLIENT_ACTION_SET_SIGNED_CLIENT_ID %{darwin.errno}d, no backtrace", buf, 0x12u);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      xpc_object_t v7 = (id)gLogObj;
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446466;
        os_log_type_t v18 = "nw_application_id_set_self";
        __int16 v19 = 1024;
        int v20 = v4;
        _os_log_impl(&dword_1830D4000, v7, v13, "%{public}s NECP_CLIENT_ACTION_SET_SIGNED_CLIENT_ID %{darwin.errno}d, backtrace limit exceeded", buf, 0x12u);
      }
    }
  }
  if (v6) {
LABEL_12:
  }
    free(v6);
LABEL_14:

  return v4;
}

void sub_18342EE64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_application_id_get_uuid(void *a1, _OWORD *a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  uint64_t v4 = (char *)v3;
  if (!v3)
  {
    xpc_object_t v7 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    int v24 = "nw_application_id_get_uuid";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (!__nwlog_fault(v8, &type, &v21)) {
      goto LABEL_42;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)int buf = 136446210;
        int v24 = "nw_application_id_get_uuid";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null application_id", buf, 0xCu);
      }
    }
    else if (v21)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v9 = __nwlog_obj();
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)int buf = 136446466;
          int v24 = "nw_application_id_get_uuid";
          __int16 v25 = 2082;
          __int16 v26 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null application_id, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_42:
        if (!v8) {
          goto LABEL_8;
        }
LABEL_43:
        free(v8);
        goto LABEL_8;
      }
      if (v15)
      {
        *(_DWORD *)int buf = 136446210;
        int v24 = "nw_application_id_get_uuid";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null application_id, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v9 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)int buf = 136446210;
        int v24 = "nw_application_id_get_uuid";
        _os_log_impl(&dword_1830D4000, v9, v19, "%{public}s called with null application_id, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_41:

    goto LABEL_42;
  }
  if (a2)
  {
    id v5 = v3 + 1;
    if (uuid_is_null((const unsigned __int8 *)v3 + 16))
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v6 = (id)gLogObj;
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136446466;
        int v24 = "nw_application_id_get_uuid";
        __int16 v25 = 2112;
        __int16 v26 = v4;
        _os_log_impl(&dword_1830D4000, v6, OS_LOG_TYPE_ERROR, "%{public}s %@ has no uuid", buf, 0x16u);
      }
    }
    else
    {
      *a2 = *v5;
    }
    goto LABEL_8;
  }
  os_log_type_t v11 = __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  int v24 = "nw_application_id_get_uuid";
  os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v21 = 0;
  if (!__nwlog_fault(v8, &type, &v21)) {
    goto LABEL_42;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    id v9 = __nwlog_obj();
    os_log_type_t v12 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)int buf = 136446210;
      int v24 = "nw_application_id_get_uuid";
      _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null out_uuid", buf, 0xCu);
    }
    goto LABEL_41;
  }
  if (!v21)
  {
    id v9 = __nwlog_obj();
    os_log_type_t v20 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)int buf = 136446210;
      int v24 = "nw_application_id_get_uuid";
      _os_log_impl(&dword_1830D4000, v9, v20, "%{public}s called with null out_uuid, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_41;
  }
  int v16 = (char *)__nw_create_backtrace_string();
  id v9 = __nwlog_obj();
  os_log_type_t v17 = type;
  BOOL v18 = os_log_type_enabled(v9, type);
  if (!v16)
  {
    if (v18)
    {
      *(_DWORD *)int buf = 136446210;
      int v24 = "nw_application_id_get_uuid";
      _os_log_impl(&dword_1830D4000, v9, v17, "%{public}s called with null out_uuid, no backtrace", buf, 0xCu);
    }
    goto LABEL_41;
  }
  if (v18)
  {
    *(_DWORD *)int buf = 136446466;
    int v24 = "nw_application_id_get_uuid";
    __int16 v25 = 2082;
    __int16 v26 = v16;
    _os_log_impl(&dword_1830D4000, v9, v17, "%{public}s called with null out_uuid, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v16);
  if (v8) {
    goto LABEL_43;
  }
LABEL_8:
}

void sub_18342F3D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_authentication_credential_create_ns(void *a1)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  size_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = v1[2];

    uint64_t v4 = (void *)*((void *)v2 + 3);
    goto LABEL_3;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v13 = (id)gLogObj;
  *(_DWORD *)int buf = 136446210;
  os_log_type_t v40 = "nw_authentication_credential_get_username";
  os_log_type_t v14 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v37 = 0;
  if (__nwlog_fault(v14, &type, &v37))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v15 = (id)gLogObj;
      os_log_type_t v16 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v40 = "nw_authentication_credential_get_username";
        _os_log_impl(&dword_1830D4000, v15, v16, "%{public}s called with null credential", buf, 0xCu);
      }
LABEL_38:

      goto LABEL_39;
    }
    if (!v37)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v15 = (id)gLogObj;
      os_log_type_t v27 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v40 = "nw_authentication_credential_get_username";
        _os_log_impl(&dword_1830D4000, v15, v27, "%{public}s called with null credential, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_38;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v15 = (id)gLogObj;
    os_log_type_t v22 = type;
    BOOL v23 = os_log_type_enabled(v15, type);
    if (!backtrace_string)
    {
      if (v23)
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v40 = "nw_authentication_credential_get_username";
        _os_log_impl(&dword_1830D4000, v15, v22, "%{public}s called with null credential, no backtrace", buf, 0xCu);
      }
      goto LABEL_38;
    }
    if (v23)
    {
      *(_DWORD *)int buf = 136446466;
      os_log_type_t v40 = "nw_authentication_credential_get_username";
      __int16 v41 = 2082;
      nw_endpoint_t v42 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v15, v22, "%{public}s called with null credential, dumping backtrace:%{public}s", buf, 0x16u);
    }

    free(backtrace_string);
  }
LABEL_39:
  if (v14) {
    free(v14);
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v29 = (id)gLogObj;
  *(_DWORD *)int buf = 136446210;
  os_log_type_t v40 = "nw_authentication_credential_get_password";
  uint64_t v30 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v37 = 0;
  if (!__nwlog_fault(v30, &type, &v37)) {
    goto LABEL_63;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v31 = (id)gLogObj;
    os_log_type_t v32 = type;
    if (os_log_type_enabled(v31, type))
    {
      *(_DWORD *)int buf = 136446210;
      os_log_type_t v40 = "nw_authentication_credential_get_password";
      _os_log_impl(&dword_1830D4000, v31, v32, "%{public}s called with null credential", buf, 0xCu);
    }
  }
  else if (v37)
  {
    os_log_type_t v33 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v31 = (id)gLogObj;
    os_log_type_t v34 = type;
    BOOL v35 = os_log_type_enabled(v31, type);
    if (v33)
    {
      if (v35)
      {
        *(_DWORD *)int buf = 136446466;
        os_log_type_t v40 = "nw_authentication_credential_get_password";
        __int16 v41 = 2082;
        nw_endpoint_t v42 = v33;
        _os_log_impl(&dword_1830D4000, v31, v34, "%{public}s called with null credential, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(v33);
      goto LABEL_63;
    }
    if (v35)
    {
      *(_DWORD *)int buf = 136446210;
      os_log_type_t v40 = "nw_authentication_credential_get_password";
      _os_log_impl(&dword_1830D4000, v31, v34, "%{public}s called with null credential, no backtrace", buf, 0xCu);
    }
  }
  else
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v31 = (id)gLogObj;
    os_log_type_t v36 = type;
    if (os_log_type_enabled(v31, type))
    {
      *(_DWORD *)int buf = 136446210;
      os_log_type_t v40 = "nw_authentication_credential_get_password";
      _os_log_impl(&dword_1830D4000, v31, v36, "%{public}s called with null credential, backtrace limit exceeded", buf, 0xCu);
    }
  }

LABEL_63:
  if (v30) {
    free(v30);
  }
  uint64_t v3 = 0;
  uint64_t v4 = 0;
LABEL_3:

  id v5 = (void *)[[NSString alloc] initWithUTF8String:v3];
  if (v4) {
    uint64_t v4 = (void *)[[NSString alloc] initWithUTF8String:v4];
  }
  uint64_t v6 = v2;
  xpc_object_t v7 = v6;
  if (v2)
  {
    int v8 = v6[3];

    uint64_t v9 = (v8 - 1);
    if (v9 <= 2) {
      uint64_t v10 = v9 + 1;
    }
    else {
      uint64_t v10 = 0;
    }
    goto LABEL_9;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v17 = (id)gLogObj;
  *(_DWORD *)int buf = 136446210;
  os_log_type_t v40 = "nw_authentication_credential_get_persistence";
  BOOL v18 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v37 = 0;
  if (__nwlog_fault(v18, &type, &v37))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v19 = (id)gLogObj;
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v40 = "nw_authentication_credential_get_persistence";
        _os_log_impl(&dword_1830D4000, v19, v20, "%{public}s called with null credential", buf, 0xCu);
      }
    }
    else if (v37)
    {
      int v24 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v19 = (id)gLogObj;
      os_log_type_t v25 = type;
      BOOL v26 = os_log_type_enabled(v19, type);
      if (v24)
      {
        if (v26)
        {
          *(_DWORD *)int buf = 136446466;
          os_log_type_t v40 = "nw_authentication_credential_get_persistence";
          __int16 v41 = 2082;
          nw_endpoint_t v42 = v24;
          _os_log_impl(&dword_1830D4000, v19, v25, "%{public}s called with null credential, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v24);
        goto LABEL_57;
      }
      if (v26)
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v40 = "nw_authentication_credential_get_persistence";
        _os_log_impl(&dword_1830D4000, v19, v25, "%{public}s called with null credential, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v19 = (id)gLogObj;
      os_log_type_t v28 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v40 = "nw_authentication_credential_get_persistence";
        _os_log_impl(&dword_1830D4000, v19, v28, "%{public}s called with null credential, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_57:
  if (v18) {
    free(v18);
  }
  uint64_t v10 = 0;
LABEL_9:
  uint64_t v11 = [objc_alloc(MEMORY[0x1E4F18D88]) initWithUser:v5 password:v4 persistence:v10];

  return v11;
}

void nw_authentication_credential_cache_entry_set_credential(uint64_t a1, void *a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v4 = a2;
  if (a1)
  {
    objc_storeStrong((id *)(a1 + 16), a2);
    goto LABEL_3;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  BOOL v15 = "nw_authentication_credential_cache_entry_set_credential";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (__nwlog_fault(v6, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      xpc_object_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v15 = "nw_authentication_credential_cache_entry_set_credential";
        uint64_t v9 = "%{public}s called with null cache_entry";
LABEL_17:
        _os_log_impl(&dword_1830D4000, v7, v8, v9, buf, 0xCu);
      }
    }
    else
    {
      if (v12)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        xpc_object_t v7 = __nwlog_obj();
        os_log_type_t v8 = type;
        BOOL v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)int buf = 136446466;
            BOOL v15 = "nw_authentication_credential_cache_entry_set_credential";
            __int16 v16 = 2082;
            id v17 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null cache_entry, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_19;
        }
        if (!v11) {
          goto LABEL_18;
        }
        *(_DWORD *)int buf = 136446210;
        BOOL v15 = "nw_authentication_credential_cache_entry_set_credential";
        uint64_t v9 = "%{public}s called with null cache_entry, no backtrace";
        goto LABEL_17;
      }
      xpc_object_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v15 = "nw_authentication_credential_cache_entry_set_credential";
        uint64_t v9 = "%{public}s called with null cache_entry, backtrace limit exceeded";
        goto LABEL_17;
      }
    }
LABEL_18:
  }
LABEL_19:
  if (v6) {
    free(v6);
  }
LABEL_3:
}

void nw_authentication_credential_storage_set_default_credential(void *a1, void *a2, void *a3)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  os_log_type_t v8 = v7;
  if (!v5)
  {
    char v12 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v28 = "nw_authentication_credential_storage_set_default_credential";
    id v13 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (!__nwlog_fault(v13, &type, &v25)) {
      goto LABEL_50;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (v25)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v14 = __nwlog_obj();
        os_log_type_t v15 = type;
        BOOL v20 = os_log_type_enabled(v14, type);
        if (backtrace_string)
        {
          if (v20)
          {
            *(_DWORD *)int buf = 136446466;
            os_log_type_t v28 = "nw_authentication_credential_storage_set_default_credential";
            __int16 v29 = 2082;
            uint64_t v30 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v14, v15, "%{public}s called with null storage, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
LABEL_50:
          if (!v13) {
            goto LABEL_7;
          }
LABEL_51:
          free(v13);
          goto LABEL_7;
        }
        if (v20)
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v28 = "nw_authentication_credential_storage_set_default_credential";
          __int16 v16 = "%{public}s called with null storage, no backtrace";
          goto LABEL_48;
        }
      }
      else
      {
        os_log_type_t v14 = __nwlog_obj();
        os_log_type_t v15 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v28 = "nw_authentication_credential_storage_set_default_credential";
          __int16 v16 = "%{public}s called with null storage, backtrace limit exceeded";
          goto LABEL_48;
        }
      }
      goto LABEL_49;
    }
    os_log_type_t v14 = __nwlog_obj();
    os_log_type_t v15 = type;
    if (!os_log_type_enabled(v14, type)) {
      goto LABEL_49;
    }
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v28 = "nw_authentication_credential_storage_set_default_credential";
    __int16 v16 = "%{public}s called with null storage";
    goto LABEL_48;
  }
  if (!v6)
  {
    id v17 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v28 = "nw_authentication_credential_storage_set_default_credential";
    id v13 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (!__nwlog_fault(v13, &type, &v25)) {
      goto LABEL_50;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v25)
      {
        os_log_type_t v14 = __nwlog_obj();
        os_log_type_t v15 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v28 = "nw_authentication_credential_storage_set_default_credential";
          __int16 v16 = "%{public}s called with null challenge, backtrace limit exceeded";
          goto LABEL_48;
        }
        goto LABEL_49;
      }
      char v21 = (char *)__nw_create_backtrace_string();
      os_log_type_t v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      BOOL v22 = os_log_type_enabled(v14, type);
      if (!v21)
      {
        if (v22)
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v28 = "nw_authentication_credential_storage_set_default_credential";
          __int16 v16 = "%{public}s called with null challenge, no backtrace";
          goto LABEL_48;
        }
        goto LABEL_49;
      }
      if (v22)
      {
        *(_DWORD *)int buf = 136446466;
        os_log_type_t v28 = "nw_authentication_credential_storage_set_default_credential";
        __int16 v29 = 2082;
        uint64_t v30 = v21;
        BOOL v23 = "%{public}s called with null challenge, dumping backtrace:%{public}s";
LABEL_33:
        _os_log_impl(&dword_1830D4000, v14, v15, v23, buf, 0x16u);
      }
LABEL_34:

      free(v21);
      if (!v13) {
        goto LABEL_7;
      }
      goto LABEL_51;
    }
    os_log_type_t v14 = __nwlog_obj();
    os_log_type_t v15 = type;
    if (!os_log_type_enabled(v14, type)) {
      goto LABEL_49;
    }
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v28 = "nw_authentication_credential_storage_set_default_credential";
    __int16 v16 = "%{public}s called with null challenge";
LABEL_48:
    _os_log_impl(&dword_1830D4000, v14, v15, v16, buf, 0xCu);
    goto LABEL_49;
  }
  if (!v7)
  {
    uint64_t v18 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v28 = "nw_authentication_credential_storage_set_default_credential";
    id v13 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (!__nwlog_fault(v13, &type, &v25)) {
      goto LABEL_50;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v28 = "nw_authentication_credential_storage_set_default_credential";
        __int16 v16 = "%{public}s called with null credential";
        goto LABEL_48;
      }
LABEL_49:

      goto LABEL_50;
    }
    if (!v25)
    {
      os_log_type_t v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v28 = "nw_authentication_credential_storage_set_default_credential";
        __int16 v16 = "%{public}s called with null credential, backtrace limit exceeded";
        goto LABEL_48;
      }
      goto LABEL_49;
    }
    char v21 = (char *)__nw_create_backtrace_string();
    os_log_type_t v14 = __nwlog_obj();
    os_log_type_t v15 = type;
    BOOL v24 = os_log_type_enabled(v14, type);
    if (!v21)
    {
      if (v24)
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v28 = "nw_authentication_credential_storage_set_default_credential";
        __int16 v16 = "%{public}s called with null credential, no backtrace";
        goto LABEL_48;
      }
      goto LABEL_49;
    }
    if (v24)
    {
      *(_DWORD *)int buf = 136446466;
      os_log_type_t v28 = "nw_authentication_credential_storage_set_default_credential";
      __int16 v29 = 2082;
      uint64_t v30 = v21;
      BOOL v23 = "%{public}s called with null credential, dumping backtrace:%{public}s";
      goto LABEL_33;
    }
    goto LABEL_34;
  }
  id v9 = v5[1];
  ns_protection_space = (void *)nw_authentication_challenge_get_ns_protection_space(v6);
  if (ns_protection_space)
  {
    ns = (void *)nw_authentication_credential_create_ns(v8);
    [v9 setDefaultCredential:ns forProtectionSpace:ns_protection_space];
  }
LABEL_7:
}

nw_interface_t nw_data_transfer_report_copy_path_interface(nw_data_transfer_report_t report, uint32_t path_index)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = report;
  id v4 = v3;
  if (!v3)
  {
    uint64_t v10 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v34 = "nw_data_transfer_report_copy_path_interface";
    BOOL v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v31 = 0;
    if (!__nwlog_fault(v11, &type, &v31)) {
      goto LABEL_49;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v12 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v34 = "nw_data_transfer_report_copy_path_interface";
        _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s called with null report", buf, 0xCu);
      }
    }
    else if (v31)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      char v12 = __nwlog_obj();
      os_log_type_t v20 = type;
      BOOL v21 = os_log_type_enabled(v12, type);
      if (backtrace_string)
      {
        if (v21)
        {
          *(_DWORD *)int buf = 136446466;
          os_log_type_t v34 = "nw_data_transfer_report_copy_path_interface";
          __int16 v35 = 2082;
          *(void *)os_log_type_t v36 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v12, v20, "%{public}s called with null report, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_49;
      }
      if (v21)
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v34 = "nw_data_transfer_report_copy_path_interface";
        _os_log_impl(&dword_1830D4000, v12, v20, "%{public}s called with null report, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      char v12 = __nwlog_obj();
      os_log_type_t v27 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v34 = "nw_data_transfer_report_copy_path_interface";
        _os_log_impl(&dword_1830D4000, v12, v27, "%{public}s called with null report, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_48;
  }
  if (nw_data_transfer_report_get_state(v3) != nw_data_transfer_report_state_collected)
  {
    os_log_type_t v14 = __nwlog_obj();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136446210;
      os_log_type_t v34 = "nw_data_transfer_report_copy_path_interface";
      _os_log_impl(&dword_1830D4000, v14, OS_LOG_TYPE_ERROR, "%{public}s Cannot retrieve data report values until collected", buf, 0xCu);
    }

    goto LABEL_51;
  }
  if (path_index == -1) {
    uint32_t v5 = 0;
  }
  else {
    uint32_t v5 = path_index;
  }
  if (v5 >= HIDWORD(v4[5].isa))
  {
    os_log_type_t v15 = __nwlog_obj();
    int isa_high = HIDWORD(v4[5].isa);
    *(_DWORD *)int buf = 136446722;
    os_log_type_t v34 = "nw_data_transfer_report_copy_path_interface";
    __int16 v35 = 1024;
    *(_DWORD *)os_log_type_t v36 = v5;
    *(_WORD *)&v36[4] = 1024;
    *(_DWORD *)&v36[6] = isa_high;
    BOOL v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v31 = 0;
    if (!__nwlog_fault(v11, &type, &v31)) {
      goto LABEL_49;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v12 = __nwlog_obj();
      os_log_type_t v17 = type;
      if (os_log_type_enabled(v12, type))
      {
        int v18 = HIDWORD(v4[5].isa);
        *(_DWORD *)int buf = 136446722;
        os_log_type_t v34 = "nw_data_transfer_report_copy_path_interface";
        __int16 v35 = 1024;
        *(_DWORD *)os_log_type_t v36 = v5;
        *(_WORD *)&v36[4] = 1024;
        *(_DWORD *)&v36[6] = v18;
        _os_log_impl(&dword_1830D4000, v12, v17, "%{public}s path_index (%u) >= report->path_count (%u)", buf, 0x18u);
      }
    }
    else if (v31)
    {
      uint32_t v22 = v5;
      BOOL v23 = (char *)__nw_create_backtrace_string();
      char v12 = __nwlog_obj();
      os_log_type_t v24 = type;
      BOOL v25 = os_log_type_enabled(v12, type);
      if (v23)
      {
        if (v25)
        {
          int v26 = HIDWORD(v4[5].isa);
          *(_DWORD *)int buf = 136446978;
          os_log_type_t v34 = "nw_data_transfer_report_copy_path_interface";
          __int16 v35 = 1024;
          *(_DWORD *)os_log_type_t v36 = v22;
          *(_WORD *)&v36[4] = 1024;
          *(_DWORD *)&v36[6] = v26;
          __int16 v37 = 2082;
          os_log_type_t v38 = v23;
          _os_log_impl(&dword_1830D4000, v12, v24, "%{public}s path_index (%u) >= report->path_count (%u), dumping backtrace:%{public}s", buf, 0x22u);
        }

        free(v23);
        goto LABEL_49;
      }
      if (v25)
      {
        int v30 = HIDWORD(v4[5].isa);
        *(_DWORD *)int buf = 136446722;
        os_log_type_t v34 = "nw_data_transfer_report_copy_path_interface";
        __int16 v35 = 1024;
        *(_DWORD *)os_log_type_t v36 = v22;
        *(_WORD *)&v36[4] = 1024;
        *(_DWORD *)&v36[6] = v30;
        _os_log_impl(&dword_1830D4000, v12, v24, "%{public}s path_index (%u) >= report->path_count (%u), no backtrace", buf, 0x18u);
      }
    }
    else
    {
      char v12 = __nwlog_obj();
      os_log_type_t v28 = type;
      if (os_log_type_enabled(v12, type))
      {
        int v29 = HIDWORD(v4[5].isa);
        *(_DWORD *)int buf = 136446722;
        os_log_type_t v34 = "nw_data_transfer_report_copy_path_interface";
        __int16 v35 = 1024;
        *(_DWORD *)os_log_type_t v36 = v5;
        *(_WORD *)&v36[4] = 1024;
        *(_DWORD *)&v36[6] = v29;
        _os_log_impl(&dword_1830D4000, v12, v28, "%{public}s path_index (%u) >= report->path_count (%u), backtrace limit exceeded", buf, 0x18u);
      }
    }
LABEL_48:

LABEL_49:
    if (v11) {
      free(v11);
    }
LABEL_51:
    os_log_type_t v8 = 0;
    goto LABEL_13;
  }
  id v6 = v4;
  if (HIDWORD(v4[5].isa) <= v5)
  {
    uint64_t v7 = 0;
  }
  else if (v5)
  {
    uint64_t v7 = (uint64_t)v6[52].isa + 360 * v5 - 360;
  }
  else
  {
    uint64_t v7 = (uint64_t)&v6[7];
  }

  os_log_type_t v8 = *(id *)(v7 + 352);
LABEL_13:

  return v8;
}

void sub_183430B1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __nw_path_get_sysctls_region_block_invoke()
{
  uint64_t v114 = *MEMORY[0x1E4F143B8];
  if (nw_context_copy_implicit_context::onceToken != -1) {
    dispatch_once(&nw_context_copy_implicit_context::onceToken, &__block_literal_global_18);
  }
  id v0 = (id)nw_context_copy_implicit_context::implicit_context;
  int v1 = nw_path_shared_necp_fd(v0);

  if (v1 < 0) {
    return;
  }
  uint64_t v107 = 0;
  if (!necp_client_action())
  {
    nw_path_get_sysctls_region::sysctls_region = v107;
    goto LABEL_17;
  }
  int v2 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v3 = (id)gLogObj;
  *(_DWORD *)int buf = 136446978;
  int v109 = "nw_path_get_sysctls_region_block_invoke";
  __int16 v110 = 1024;
  *(_DWORD *)BOOL v111 = v1;
  *(_WORD *)&void v111[4] = 2048;
  *(void *)&v111[6] = 8;
  *(_WORD *)&v111[14] = 1024;
  *(_DWORD *)&v111[16] = v2;
  id v4 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  char v106 = 0;
  if (!__nwlog_fault(v4, type, &v106))
  {
LABEL_10:
    if (!v4) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  if (type[0] == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint32_t v5 = (id)gLogObj;
    os_log_type_t v6 = type[0];
    if (os_log_type_enabled(v5, type[0]))
    {
      *(_DWORD *)int buf = 136446978;
      int v109 = "nw_path_get_sysctls_region_block_invoke";
      __int16 v110 = 1024;
      *(_DWORD *)BOOL v111 = v1;
      *(_WORD *)&void v111[4] = 2048;
      *(void *)&v111[6] = 8;
      *(_WORD *)&v111[14] = 1024;
      *(_DWORD *)&v111[16] = v2;
      _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s necp_client_action(%d, NECP_CLIENT_ACTION_MAP_SYSCTLS, NULL, 0, &address, %zu) %{darwin.errno}d", buf, 0x22u);
    }
LABEL_9:

    goto LABEL_10;
  }
  if (!v106)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint32_t v5 = (id)gLogObj;
    os_log_type_t v102 = type[0];
    if (os_log_type_enabled(v5, type[0]))
    {
      *(_DWORD *)int buf = 136446978;
      int v109 = "nw_path_get_sysctls_region_block_invoke";
      __int16 v110 = 1024;
      *(_DWORD *)BOOL v111 = v1;
      *(_WORD *)&void v111[4] = 2048;
      *(void *)&v111[6] = 8;
      *(_WORD *)&v111[14] = 1024;
      *(_DWORD *)&v111[16] = v2;
      _os_log_impl(&dword_1830D4000, v5, v102, "%{public}s necp_client_action(%d, NECP_CLIENT_ACTION_MAP_SYSCTLS, NULL, 0, &address, %zu) %{darwin.errno}d, backtrace limit exceeded", buf, 0x22u);
    }
    goto LABEL_9;
  }
  backtrace_string = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  uint32_t v5 = (id)gLogObj;
  os_log_type_t v100 = type[0];
  BOOL v101 = os_log_type_enabled(v5, type[0]);
  if (!backtrace_string)
  {
    if (v101)
    {
      *(_DWORD *)int buf = 136446978;
      int v109 = "nw_path_get_sysctls_region_block_invoke";
      __int16 v110 = 1024;
      *(_DWORD *)BOOL v111 = v1;
      *(_WORD *)&void v111[4] = 2048;
      *(void *)&v111[6] = 8;
      *(_WORD *)&v111[14] = 1024;
      *(_DWORD *)&v111[16] = v2;
      _os_log_impl(&dword_1830D4000, v5, v100, "%{public}s necp_client_action(%d, NECP_CLIENT_ACTION_MAP_SYSCTLS, NULL, 0, &address, %zu) %{darwin.errno}d, no backtrace", buf, 0x22u);
    }
    goto LABEL_9;
  }
  if (v101)
  {
    *(_DWORD *)int buf = 136447234;
    int v109 = "nw_path_get_sysctls_region_block_invoke";
    __int16 v110 = 1024;
    *(_DWORD *)BOOL v111 = v1;
    *(_WORD *)&void v111[4] = 2048;
    *(void *)&v111[6] = 8;
    *(_WORD *)&v111[14] = 1024;
    *(_DWORD *)&v111[16] = v2;
    __int16 v112 = 2082;
    int v113 = backtrace_string;
    _os_log_impl(&dword_1830D4000, v5, v100, "%{public}s necp_client_action(%d, NECP_CLIENT_ACTION_MAP_SYSCTLS, NULL, 0, &address, %zu) %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x2Cu);
  }

  free(backtrace_string);
  if (v4) {
LABEL_11:
  }
    free(v4);
LABEL_12:
  if (nw_path_get_sysctls_region::sysctls_region)
  {
    if (*(_DWORD *)nw_path_get_sysctls_region::sysctls_region == 3) {
      return;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v7 = (id)gLogObj;
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      goto LABEL_20;
    }
    int v8 = *(_DWORD *)nw_path_get_sysctls_region::sysctls_region;
    *(_DWORD *)int buf = 136446722;
    int v109 = "nw_path_get_sysctls_region_block_invoke";
    __int16 v110 = 1024;
    *(_DWORD *)BOOL v111 = v8;
    *(_WORD *)&void v111[4] = 1024;
    *(_DWORD *)&v111[6] = 3;
    id v9 = "%{public}s sysctls_region version: %u, expected: %u, synthesizing from sysctlbyname";
    uint64_t v10 = v7;
    os_log_type_t v11 = OS_LOG_TYPE_ERROR;
    uint32_t v12 = 24;
    goto LABEL_19;
  }
LABEL_17:
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  uint64_t v7 = (id)gLogObj;
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)int buf = 136446210;
    int v109 = "nw_path_get_sysctls_region_block_invoke";
    id v9 = "%{public}s synthesizing sysctls_region from sysctlbyname";
    uint64_t v10 = v7;
    os_log_type_t v11 = OS_LOG_TYPE_DEBUG;
    uint32_t v12 = 12;
LABEL_19:
    _os_log_impl(&dword_1830D4000, v10, v11, v9, buf, v12);
  }
LABEL_20:

  os_log_type_t v13 = malloc_type_calloc(1uLL, 0x158uLL, 0xEAFB8F1AuLL);
  if (!v13)
  {
    id v103 = __nwlog_obj();
    os_log_type_enabled(v103, OS_LOG_TYPE_ERROR);
    *(_DWORD *)int buf = 136446722;
    int v109 = "strict_calloc";
    __int16 v110 = 2048;
    *(void *)BOOL v111 = 1;
    *(_WORD *)&v111[8] = 2048;
    *(void *)&v111[10] = 344;
    uint64_t v104 = (void *)_os_log_send_and_compose_impl();

    if (__nwlog_abort((uint64_t)v104))
    {
      __break(1u);
      return;
    }
    free(v104);
  }
  nw_path_get_sysctls_region::sysctls_region = (uint64_t)v13;
  _DWORD *v13 = 3;
  *(void *)os_log_type_t type = 4;
  if (sysctlbyname("net.inet.tcp.bg_target_qdelay", v13 + 1, (size_t *)type, 0, 0) || *(void *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v14 = (id)gLogObj;
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446210;
      int v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_1830D4000, v14, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.bg_target_qdelay failed. Using default value: 40", buf, 0xCu);
    }

    v13[1] = 40;
  }
  *(void *)os_log_type_t type = 4;
  if (sysctlbyname("net.inet.tcp.bg_allowed_increase", v13 + 2, (size_t *)type, 0, 0) || *(void *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v15 = (id)gLogObj;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446210;
      int v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_1830D4000, v15, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.bg_allowed_increase failed. Using default value: 8", buf, 0xCu);
    }

    v13[2] = 8;
  }
  *(void *)os_log_type_t type = 4;
  if (sysctlbyname("net.inet.tcp.bg_tether_shift", v13 + 3, (size_t *)type, 0, 0) || *(void *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    __int16 v16 = (id)gLogObj;
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446210;
      int v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_1830D4000, v16, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.bg_tether_shift failed. Using default value: 1", buf, 0xCu);
    }

    v13[3] = 1;
  }
  *(void *)os_log_type_t type = 4;
  if (sysctlbyname("net.inet.tcp.bg_ss_fltsz", v13 + 4, (size_t *)type, 0, 0) || *(void *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v17 = (id)gLogObj;
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446210;
      int v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_1830D4000, v17, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.bg_ss_fltsz failed. Using default value: 2", buf, 0xCu);
    }

    void v13[4] = 2;
  }
  *(void *)os_log_type_t type = 4;
  if (sysctlbyname("net.inet.tcp.use_newreno", v13 + 5, (size_t *)type, 0, 0) || *(void *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v18 = (id)gLogObj;
    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446210;
      int v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_1830D4000, v18, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.use_newreno failed. Using default value: 0", buf, 0xCu);
    }

    void v13[5] = 0;
  }
  *(void *)os_log_type_t type = 4;
  if (sysctlbyname("net.inet.tcp.cubic_tcp_friendliness", v13 + 6, (size_t *)type, 0, 0) || *(void *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v19 = (id)gLogObj;
    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446210;
      int v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_1830D4000, v19, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.cubic_tcp_friendliness failed. Using default value: 0", buf, 0xCu);
    }

    v13[6] = 0;
  }
  *(void *)os_log_type_t type = 4;
  if (sysctlbyname("net.inet.tcp.cubic_fast_convergence", v13 + 7, (size_t *)type, 0, 0) || *(void *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v20 = (id)gLogObj;
    if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446210;
      int v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_1830D4000, v20, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.cubic_fast_convergence failed. Using default value: 0", buf, 0xCu);
    }

    v13[7] = 0;
  }
  *(void *)os_log_type_t type = 4;
  if (sysctlbyname("net.inet.tcp.cubic_use_minrtt", v13 + 8, (size_t *)type, 0, 0) || *(void *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v21 = (id)gLogObj;
    if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446210;
      int v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_1830D4000, v21, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.cubic_use_minrtt failed. Using default value: 0", buf, 0xCu);
    }

    v13[8] = 0;
  }
  *(void *)os_log_type_t type = 4;
  if (sysctlbyname("net.inet.tcp.delayed_ack", v13 + 9, (size_t *)type, 0, 0) || *(void *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint32_t v22 = (id)gLogObj;
    if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446210;
      int v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_1830D4000, v22, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.delayed_ack failed. Using default value: 3", buf, 0xCu);
    }

    v13[9] = 3;
  }
  *(void *)os_log_type_t type = 4;
  if (sysctlbyname("net.inet.tcp.recvbg", v13 + 10, (size_t *)type, 0, 0) || *(void *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v23 = (id)gLogObj;
    if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446210;
      int v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_1830D4000, v23, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.recvbg failed. Using default value: 0", buf, 0xCu);
    }

    v13[10] = 0;
  }
  *(void *)os_log_type_t type = 4;
  if (sysctlbyname("net.inet.tcp.drop_synfin", v13 + 11, (size_t *)type, 0, 0) || *(void *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v24 = (id)gLogObj;
    if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446210;
      int v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_1830D4000, v24, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.drop_synfin failed. Using default value: 1", buf, 0xCu);
    }

    v13[11] = 1;
  }
  *(void *)os_log_type_t type = 4;
  if (sysctlbyname("net.inet.tcp.slowlink_wsize", v13 + 12, (size_t *)type, 0, 0) || *(void *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v25 = (id)gLogObj;
    if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446210;
      int v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_1830D4000, v25, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.slowlink_wsize failed. Using default value: 8192", buf, 0xCu);
    }

    v13[12] = 0x2000;
  }
  *(void *)os_log_type_t type = 4;
  if (sysctlbyname("net.inet.tcp.maxseg_unacked", v13 + 13, (size_t *)type, 0, 0) || *(void *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v26 = (id)gLogObj;
    if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446210;
      int v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_1830D4000, v26, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.maxseg_unacked failed. Using default value: 8", buf, 0xCu);
    }

    v13[13] = 8;
  }
  *(void *)os_log_type_t type = 4;
  if (sysctlbyname("net.inet.tcp.rfc3465", v13 + 14, (size_t *)type, 0, 0) || *(void *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v27 = (id)gLogObj;
    if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446210;
      int v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_1830D4000, v27, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.rfc3465 failed. Using default value: 1", buf, 0xCu);
    }

    v13[14] = 1;
  }
  *(void *)os_log_type_t type = 4;
  if (sysctlbyname("net.inet.tcp.rfc3465_lim2", v13 + 15, (size_t *)type, 0, 0) || *(void *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v28 = (id)gLogObj;
    if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446210;
      int v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_1830D4000, v28, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.rfc3465_lim2 failed. Using default value: 1", buf, 0xCu);
    }

    v13[15] = 1;
  }
  *(void *)os_log_type_t type = 4;
  if (sysctlbyname("net.inet.tcp.recv_allowed_iaj", v13 + 16, (size_t *)type, 0, 0) || *(void *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v29 = (id)gLogObj;
    if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446210;
      int v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_1830D4000, v29, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.recv_allowed_iaj failed. Using default value: 5", buf, 0xCu);
    }

    v13[16] = 5;
  }
  *(void *)os_log_type_t type = 4;
  if (sysctlbyname("net.inet.tcp.doautorcvbuf", v13 + 17, (size_t *)type, 0, 0) || *(void *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v30 = (id)gLogObj;
    if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446210;
      int v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_1830D4000, v30, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.doautorcvbuf failed. Using default value: 1", buf, 0xCu);
    }

    v13[17] = 1;
  }
  *(void *)os_log_type_t type = 4;
  if (sysctlbyname("net.inet.tcp.autorcvbufmax", v13 + 18, (size_t *)type, 0, 0) || *(void *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    char v31 = (id)gLogObj;
    if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446210;
      int v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_1830D4000, v31, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.autorcvbufmax failed. Using default value: 2 * 1024 * 1024", buf, 0xCu);
    }

    v13[18] = 0x200000;
  }
  *(void *)os_log_type_t type = 4;
  if (sysctlbyname("net.inet.tcp.rcvsspktcnt", v13 + 19, (size_t *)type, 0, 0) || *(void *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v32 = (id)gLogObj;
    if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446210;
      int v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_1830D4000, v32, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.rcvsspktcnt failed. Using default value: 512", buf, 0xCu);
    }

    v13[19] = 512;
  }
  *(void *)os_log_type_t type = 4;
  if (sysctlbyname("net.inet.tcp.path_mtu_discovery", v13 + 20, (size_t *)type, 0, 0) || *(void *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v33 = (id)gLogObj;
    if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446210;
      int v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_1830D4000, v33, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.path_mtu_discovery failed. Using default value: 1", buf, 0xCu);
    }

    v13[20] = 1;
  }
  *(void *)os_log_type_t type = 4;
  if (sysctlbyname("net.inet.tcp.local_slowstart_flightsize", v13 + 21, (size_t *)type, 0, 0)
    || *(void *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v34 = (id)gLogObj;
    if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446210;
      int v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_1830D4000, v34, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.local_slowstart_flightsize failed. Using default value: 8", buf, 0xCu);
    }

    v13[21] = 8;
  }
  *(void *)os_log_type_t type = 4;
  if (sysctlbyname("net.inet.tcp.ecn_setup_percentage", v13 + 22, (size_t *)type, 0, 0) || *(void *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    __int16 v35 = (id)gLogObj;
    if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446210;
      int v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_1830D4000, v35, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.ecn_setup_percentage failed. Using default value: 50", buf, 0xCu);
    }

    v13[22] = 50;
  }
  *(void *)os_log_type_t type = 4;
  if (sysctlbyname("net.inet.tcp.ecn_initiate_out", v13 + 23, (size_t *)type, 0, 0) || *(void *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v36 = (id)gLogObj;
    if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446210;
      int v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_1830D4000, v36, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.ecn_initiate_out failed. Using default value: 0", buf, 0xCu);
    }

    v13[23] = 0;
  }
  *(void *)os_log_type_t type = 4;
  if (sysctlbyname("net.inet.tcp.ecn_negotiate_in", v13 + 24, (size_t *)type, 0, 0) || *(void *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    __int16 v37 = (id)gLogObj;
    if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446210;
      int v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_1830D4000, v37, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.ecn_negotiate_in failed. Using default value: 0", buf, 0xCu);
    }

    v13[24] = 0;
  }
  *(void *)os_log_type_t type = 4;
  if (sysctlbyname("net.inet.tcp.packetchain", v13 + 25, (size_t *)type, 0, 0) || *(void *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v38 = (id)gLogObj;
    if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446210;
      int v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_1830D4000, v38, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.packetchain failed. Using default value: 50", buf, 0xCu);
    }

    v13[25] = 50;
  }
  *(void *)os_log_type_t type = 4;
  if (sysctlbyname("net.inet.tcp.socket_unlocked_on_output", v13 + 26, (size_t *)type, 0, 0)
    || *(void *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v39 = (id)gLogObj;
    if (os_log_type_enabled(v39, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446210;
      int v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_1830D4000, v39, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.socket_unlocked_on_output failed. Using default value: 1", buf, 0xCu);
    }

    v13[26] = 1;
  }
  *(void *)os_log_type_t type = 4;
  if (sysctlbyname("net.inet.tcp.min_iaj_win", v13 + 27, (size_t *)type, 0, 0) || *(void *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v40 = (id)gLogObj;
    if (os_log_type_enabled(v40, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446210;
      int v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_1830D4000, v40, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.min_iaj_win failed. Using default value: 16", buf, 0xCu);
    }

    v13[27] = 16;
  }
  *(void *)os_log_type_t type = 4;
  if (sysctlbyname("net.inet.tcp.acc_iaj_react_limit", v13 + 28, (size_t *)type, 0, 0) || *(void *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    __int16 v41 = (id)gLogObj;
    if (os_log_type_enabled(v41, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446210;
      int v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_1830D4000, v41, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.acc_iaj_react_limit failed. Using default value: 200", buf, 0xCu);
    }

    v13[28] = 200;
  }
  *(void *)os_log_type_t type = 4;
  if (sysctlbyname("net.inet.tcp.autosndbufinc", v13 + 29, (size_t *)type, 0, 0) || *(void *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    nw_endpoint_t v42 = (id)gLogObj;
    if (os_log_type_enabled(v42, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446210;
      int v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_1830D4000, v42, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.autosndbufinc failed. Using default value: 8 * 1024", buf, 0xCu);
    }

    v13[29] = 0x2000;
  }
  *(void *)os_log_type_t type = 4;
  if (sysctlbyname("net.inet.tcp.autosndbufmax", v13 + 30, (size_t *)type, 0, 0) || *(void *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v43 = (id)gLogObj;
    if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446210;
      int v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_1830D4000, v43, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.autosndbufmax failed. Using default value: 2 * 1024 * 1024", buf, 0xCu);
    }

    v13[30] = 0x200000;
  }
  *(void *)os_log_type_t type = 4;
  if (sysctlbyname("net.inet.tcp.rtt_recvbg", v13 + 31, (size_t *)type, 0, 0) || *(void *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v44 = (id)gLogObj;
    if (os_log_type_enabled(v44, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446210;
      int v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_1830D4000, v44, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.rtt_recvbg failed. Using default value: 1", buf, 0xCu);
    }

    v13[31] = 1;
  }
  *(void *)os_log_type_t type = 4;
  if (sysctlbyname("net.inet.tcp.recv_throttle_minwin", v13 + 32, (size_t *)type, 0, 0) || *(void *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v45 = (id)gLogObj;
    if (os_log_type_enabled(v45, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446210;
      int v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_1830D4000, v45, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.recv_throttle_minwin failed. Using default value: 16 * 1024", buf, 0xCu);
    }

    v13[32] = 0x4000;
  }
  *(void *)os_log_type_t type = 4;
  if (sysctlbyname("net.inet.tcp.enable_tlp", v13 + 33, (size_t *)type, 0, 0) || *(void *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v46 = (id)gLogObj;
    if (os_log_type_enabled(v46, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446210;
      int v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_1830D4000, v46, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.enable_tlp failed. Using default value: 1", buf, 0xCu);
    }

    v13[33] = 1;
  }
  *(void *)os_log_type_t type = 4;
  if (sysctlbyname("net.inet.tcp.sack", v13 + 34, (size_t *)type, 0, 0) || *(void *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v47 = (id)gLogObj;
    if (os_log_type_enabled(v47, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446210;
      int v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_1830D4000, v47, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.sack failed. Using default value: 1", buf, 0xCu);
    }

    v13[34] = 1;
  }
  *(void *)os_log_type_t type = 4;
  if (sysctlbyname("net.inet.tcp.sack_maxholes", v13 + 35, (size_t *)type, 0, 0) || *(void *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v48 = (id)gLogObj;
    if (os_log_type_enabled(v48, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446210;
      int v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_1830D4000, v48, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.sack_maxholes failed. Using default value: 128", buf, 0xCu);
    }

    v13[35] = 128;
  }
  *(void *)os_log_type_t type = 4;
  if (sysctlbyname("net.inet.tcp.sack_globalmaxholes", v13 + 36, (size_t *)type, 0, 0) || *(void *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v49 = (id)gLogObj;
    if (os_log_type_enabled(v49, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446210;
      int v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_1830D4000, v49, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.sack_globalmaxholes failed. Using default value: 65536", buf, 0xCu);
    }

    v13[36] = 0x10000;
  }
  *(void *)os_log_type_t type = 4;
  if (sysctlbyname("net.inet.tcp.mssdflt", v13 + 37, (size_t *)type, 0, 0) || *(void *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    char v50 = (id)gLogObj;
    if (os_log_type_enabled(v50, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446210;
      int v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_1830D4000, v50, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.mssdflt failed. Using default value: 512", buf, 0xCu);
    }

    v13[37] = 512;
  }
  *(void *)os_log_type_t type = 4;
  if (sysctlbyname("net.inet.tcp.v6mssdflt", v13 + 38, (size_t *)type, 0, 0) || *(void *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v51 = (id)gLogObj;
    if (os_log_type_enabled(v51, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446210;
      int v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_1830D4000, v51, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.v6mssdflt failed. Using default value: 1024", buf, 0xCu);
    }

    v13[38] = 1024;
  }
  *(void *)os_log_type_t type = 4;
  if (sysctlbyname("net.inet.tcp.fastopen_backlog", v13 + 39, (size_t *)type, 0, 0) || *(void *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v52 = (id)gLogObj;
    if (os_log_type_enabled(v52, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446210;
      int v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_1830D4000, v52, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.fastopen_backlog failed. Using default value: 10", buf, 0xCu);
    }

    v13[39] = 10;
  }
  *(void *)os_log_type_t type = 4;
  if (sysctlbyname("net.inet.tcp.fastopen", v13 + 40, (size_t *)type, 0, 0) || *(void *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v53 = (id)gLogObj;
    if (os_log_type_enabled(v53, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446210;
      int v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_1830D4000, v53, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.fastopen failed. Using default value: 0x3", buf, 0xCu);
    }

    v13[40] = 3;
  }
  *(void *)os_log_type_t type = 4;
  if (sysctlbyname("net.inet.tcp.minmss", v13 + 41, (size_t *)type, 0, 0) || *(void *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    char v54 = (id)gLogObj;
    if (os_log_type_enabled(v54, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446210;
      int v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_1830D4000, v54, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.minmss failed. Using default value: 216", buf, 0xCu);
    }

    v13[41] = 216;
  }
  *(void *)os_log_type_t type = 4;
  if (sysctlbyname("net.inet.tcp.icmp_may_rst", v13 + 42, (size_t *)type, 0, 0) || *(void *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v55 = (id)gLogObj;
    if (os_log_type_enabled(v55, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446210;
      int v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_1830D4000, v55, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.icmp_may_rst failed. Using default value: 1", buf, 0xCu);
    }

    v13[42] = 1;
  }
  *(void *)os_log_type_t type = 4;
  if (sysctlbyname("net.inet.tcp.rtt_min", v13 + 43, (size_t *)type, 0, 0) || *(void *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unsigned int v56 = (id)gLogObj;
    if (os_log_type_enabled(v56, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446210;
      int v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_1830D4000, v56, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.rtt_min failed. Using default value: 100", buf, 0xCu);
    }

    v13[43] = 100;
  }
  *(void *)os_log_type_t type = 4;
  if (sysctlbyname("net.inet.tcp.rexmt_slop", v13 + 44, (size_t *)type, 0, 0) || *(void *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v57 = (id)gLogObj;
    if (os_log_type_enabled(v57, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446210;
      int v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_1830D4000, v57, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.rexmt_slop failed. Using default value: 200", buf, 0xCu);
    }

    v13[44] = 200;
  }
  *(void *)os_log_type_t type = 4;
  if (sysctlbyname("net.inet.tcp.randomize_ports", v13 + 45, (size_t *)type, 0, 0) || *(void *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    objc_super v58 = (id)gLogObj;
    if (os_log_type_enabled(v58, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446210;
      int v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_1830D4000, v58, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.randomize_ports failed. Using default value: 0", buf, 0xCu);
    }

    v13[45] = 0;
  }
  *(void *)os_log_type_t type = 4;
  if (sysctlbyname("net.inet.tcp.win_scale_factor", v13 + 46, (size_t *)type, 0, 0) || *(void *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unsigned int v59 = (id)gLogObj;
    if (os_log_type_enabled(v59, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446210;
      int v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_1830D4000, v59, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.win_scale_factor failed. Using default value: 3", buf, 0xCu);
    }

    v13[46] = 3;
  }
  *(void *)os_log_type_t type = 4;
  if (sysctlbyname("net.inet.tcp.keepinit", v13 + 47, (size_t *)type, 0, 0) || *(void *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v60 = (id)gLogObj;
    if (os_log_type_enabled(v60, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446210;
      int v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_1830D4000, v60, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.keepinit failed. Using default value: 75 * 1000", buf, 0xCu);
    }

    v13[47] = 75000;
  }
  *(void *)os_log_type_t type = 4;
  if (sysctlbyname("net.inet.tcp.keepidle", v13 + 48, (size_t *)type, 0, 0) || *(void *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v61 = (id)gLogObj;
    if (os_log_type_enabled(v61, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446210;
      int v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_1830D4000, v61, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.keepidle failed. Using default value: 120 * 60 * 1000", buf, 0xCu);
    }

    v13[48] = 7200000;
  }
  *(void *)os_log_type_t type = 4;
  if (sysctlbyname("net.inet.tcp.keepintvl", v13 + 49, (size_t *)type, 0, 0) || *(void *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v62 = (id)gLogObj;
    if (os_log_type_enabled(v62, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446210;
      int v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_1830D4000, v62, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.keepintvl failed. Using default value: 75 * 1000", buf, 0xCu);
    }

    v13[49] = 75000;
  }
  *(void *)os_log_type_t type = 4;
  if (sysctlbyname("net.inet.tcp.keepcnt", v13 + 50, (size_t *)type, 0, 0) || *(void *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v63 = (id)gLogObj;
    if (os_log_type_enabled(v63, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446210;
      int v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_1830D4000, v63, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.keepcnt failed. Using default value: 8", buf, 0xCu);
    }

    v13[50] = 8;
  }
  *(void *)os_log_type_t type = 4;
  if (sysctlbyname("net.inet.tcp.msl", v13 + 51, (size_t *)type, 0, 0) || *(void *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    __int16 v64 = (id)gLogObj;
    if (os_log_type_enabled(v64, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446210;
      int v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_1830D4000, v64, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.msl failed. Using default value: 15 * 1000", buf, 0xCu);
    }

    v13[51] = 15000;
  }
  *(void *)os_log_type_t type = 4;
  if (sysctlbyname("net.inet.tcp.max_persist_timeout", v13 + 52, (size_t *)type, 0, 0) || *(void *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v65 = (id)gLogObj;
    if (os_log_type_enabled(v65, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446210;
      int v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_1830D4000, v65, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.max_persist_timeout failed. Using default value: 0", buf, 0xCu);
    }

    v13[52] = 0;
  }
  *(void *)os_log_type_t type = 4;
  if (sysctlbyname("net.inet.tcp.always_keepalive", v13 + 53, (size_t *)type, 0, 0) || *(void *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v66 = (id)gLogObj;
    if (os_log_type_enabled(v66, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446210;
      int v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_1830D4000, v66, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.always_keepalive failed. Using default value: 0", buf, 0xCu);
    }

    v13[53] = 0;
  }
  *(void *)os_log_type_t type = 4;
  if (sysctlbyname("net.inet.tcp.timer_fastmode_idlemax", v13 + 54, (size_t *)type, 0, 0) || *(void *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v67 = (id)gLogObj;
    if (os_log_type_enabled(v67, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446210;
      int v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_1830D4000, v67, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.timer_fastmode_idlemax failed. Using default value: 10", buf, 0xCu);
    }

    v13[54] = 10;
  }
  *(void *)os_log_type_t type = 4;
  if (sysctlbyname("net.inet.tcp.broken_peer_syn_rexmit_thres", v13 + 55, (size_t *)type, 0, 0)
    || *(void *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v68 = (id)gLogObj;
    if (os_log_type_enabled(v68, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446210;
      int v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_1830D4000, v68, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.broken_peer_syn_rexmit_thres failed. Using default value: 10", buf, 0xCu);
    }

    v13[55] = 10;
  }
  *(void *)os_log_type_t type = 4;
  if (sysctlbyname("net.inet.tcp.pmtud_blackhole_detection", v13 + 56, (size_t *)type, 0, 0)
    || *(void *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    char v69 = (id)gLogObj;
    if (os_log_type_enabled(v69, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446210;
      int v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_1830D4000, v69, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.pmtud_blackhole_detection failed. Using default value: 1", buf, 0xCu);
    }

    v13[56] = 1;
  }
  *(void *)os_log_type_t type = 4;
  if (sysctlbyname("net.inet.tcp.pmtud_blackhole_mss", v13 + 57, (size_t *)type, 0, 0) || *(void *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v70 = (id)gLogObj;
    if (os_log_type_enabled(v70, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446210;
      int v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_1830D4000, v70, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.pmtud_blackhole_mss failed. Using default value: 1200", buf, 0xCu);
    }

    v13[57] = 1200;
  }
  *(void *)os_log_type_t type = 4;
  if (sysctlbyname("net.inet.tcp.sendspace", v13 + 58, (size_t *)type, 0, 0) || *(void *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v71 = (id)gLogObj;
    if (os_log_type_enabled(v71, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446210;
      int v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_1830D4000, v71, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.sendspace failed. Using default value: 1448*256", buf, 0xCu);
    }

    v13[58] = 370688;
  }
  *(void *)os_log_type_t type = 4;
  if (sysctlbyname("net.inet.tcp.recvspace", v13 + 59, (size_t *)type, 0, 0) || *(void *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v72 = (id)gLogObj;
    if (os_log_type_enabled(v72, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446210;
      int v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_1830D4000, v72, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.recvspace failed. Using default value: 1448*384", buf, 0xCu);
    }

    v13[59] = 556032;
  }
  *(void *)os_log_type_t type = 4;
  if (sysctlbyname("net.inet.tcp.microuptime_init", v13 + 60, (size_t *)type, 0, 0) || *(void *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v73 = (id)gLogObj;
    if (os_log_type_enabled(v73, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446210;
      int v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_1830D4000, v73, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.microuptime_init failed. Using default value: 0", buf, 0xCu);
    }

    v13[60] = 0;
  }
  *(void *)os_log_type_t type = 4;
  if (sysctlbyname("net.inet.tcp.now_init", v13 + 61, (size_t *)type, 0, 0) || *(void *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unsigned int v74 = (id)gLogObj;
    if (os_log_type_enabled(v74, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446210;
      int v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_1830D4000, v74, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.now_init failed. Using default value: 0", buf, 0xCu);
    }

    v13[61] = 0;
  }
  *(void *)os_log_type_t type = 4;
  if (sysctlbyname("net.inet.tcp.challengeack_limit", v13 + 62, (size_t *)type, 0, 0) || *(void *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    char v75 = (id)gLogObj;
    if (os_log_type_enabled(v75, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446210;
      int v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_1830D4000, v75, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.challengeack_limit failed. Using default value: 10", buf, 0xCu);
    }

    v13[62] = 10;
  }
  *(void *)os_log_type_t type = 4;
  if (sysctlbyname("net.inet.tcp.do_rfc5961", v13 + 63, (size_t *)type, 0, 0) || *(void *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v76 = (id)gLogObj;
    if (os_log_type_enabled(v76, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446210;
      int v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_1830D4000, v76, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.do_rfc5961 failed. Using default value: 1", buf, 0xCu);
    }

    v13[63] = 1;
  }
  *(void *)os_log_type_t type = 4;
  if (sysctlbyname("net.inet.tcp.init_rtt_from_cache", v13 + 64, (size_t *)type, 0, 0) || *(void *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    char v77 = (id)gLogObj;
    if (os_log_type_enabled(v77, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446210;
      int v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_1830D4000, v77, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.init_rtt_from_cache failed. Using default value: 1", buf, 0xCu);
    }

    v13[64] = 1;
  }
  *(void *)os_log_type_t type = 4;
  if (sysctlbyname("net.inet.tcp.autotunereorder", v13 + 65, (size_t *)type, 0, 0) || *(void *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v78 = (id)gLogObj;
    if (os_log_type_enabled(v78, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446210;
      int v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_1830D4000, v78, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.autotunereorder failed. Using default value: 1", buf, 0xCu);
    }

    v13[65] = 1;
  }
  *(void *)os_log_type_t type = 4;
  if (sysctlbyname("net.inet.tcp.do_ack_compression", v13 + 66, (size_t *)type, 0, 0) || *(void *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v79 = (id)gLogObj;
    if (os_log_type_enabled(v79, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446210;
      int v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_1830D4000, v79, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.do_ack_compression failed. Using default value: 1", buf, 0xCu);
    }

    v13[66] = 1;
  }
  *(void *)os_log_type_t type = 4;
  if (sysctlbyname("net.inet.tcp.ack_compression_rate", v13 + 67, (size_t *)type, 0, 0) || *(void *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    __int16 v80 = (id)gLogObj;
    if (os_log_type_enabled(v80, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446210;
      int v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_1830D4000, v80, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.ack_compression_rate failed. Using default value: 5", buf, 0xCu);
    }

    v13[67] = 5;
  }
  *(void *)os_log_type_t type = 4;
  if (sysctlbyname("net.inet.tcp.do_better_lr", v13 + 68, (size_t *)type, 0, 0) || *(void *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v81 = (id)gLogObj;
    if (os_log_type_enabled(v81, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446210;
      int v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_1830D4000, v81, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.do_better_lr failed. Using default value: 1", buf, 0xCu);
    }

    v13[68] = 1;
  }
  *(void *)os_log_type_t type = 4;
  if (sysctlbyname("net.inet.tcp.cubic_minor_fixes", v13 + 69, (size_t *)type, 0, 0) || *(void *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v82 = (id)gLogObj;
    if (os_log_type_enabled(v82, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446210;
      int v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_1830D4000, v82, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.cubic_minor_fixes failed. Using default value: 1", buf, 0xCu);
    }

    v13[69] = 1;
  }
  *(void *)os_log_type_t type = 4;
  if (sysctlbyname("net.inet.tcp.cubic_rfc_compliant", v13 + 70, (size_t *)type, 0, 0) || *(void *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v83 = (id)gLogObj;
    if (os_log_type_enabled(v83, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446210;
      int v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_1830D4000, v83, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.cubic_rfc_compliant failed. Using default value: 1", buf, 0xCu);
    }

    v13[70] = 1;
  }
  *(void *)os_log_type_t type = 4;
  if (sysctlbyname("net.inet.tcp.aggressive_rcvwnd_inc", v13 + 71, (size_t *)type, 0, 0) || *(void *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v84 = (id)gLogObj;
    if (os_log_type_enabled(v84, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446210;
      int v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_1830D4000, v84, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.aggressive_rcvwnd_inc failed. Using default value: 1", buf, 0xCu);
    }

    v13[71] = 1;
  }
  *(void *)os_log_type_t type = 4;
  if (sysctlbyname("net.inet.tcp.ack_strategy", v13 + 72, (size_t *)type, 0, 0) || *(void *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    nw_endpoint_t v85 = (id)gLogObj;
    if (os_log_type_enabled(v85, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446210;
      int v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_1830D4000, v85, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.ack_strategy failed. Using default value: 1", buf, 0xCu);
    }

    v13[72] = 1;
  }
  *(void *)os_log_type_t type = 4;
  if (sysctlbyname("net.inet.tcp.flow_control_response", v13 + 73, (size_t *)type, 0, 0) || *(void *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v86 = (id)gLogObj;
    if (os_log_type_enabled(v86, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446210;
      int v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_1830D4000, v86, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.flow_control_response failed. Using default value: 1", buf, 0xCu);
    }

    v13[73] = 1;
  }
  *(void *)os_log_type_t type = 4;
  if (sysctlbyname("net.inet.tcp.randomize_timestamps", v13 + 74, (size_t *)type, 0, 0) || *(void *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v87 = (id)gLogObj;
    if (os_log_type_enabled(v87, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446210;
      int v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_1830D4000, v87, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.randomize_timestamps failed. Using default value: 1", buf, 0xCu);
    }

    v13[74] = 1;
  }
  *(void *)os_log_type_t type = 4;
  if (sysctlbyname("net.inet.tcp.ledbat_plus_plus", v13 + 75, (size_t *)type, 0, 0) || *(void *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint32_t v88 = (id)gLogObj;
    if (os_log_type_enabled(v88, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446210;
      int v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_1830D4000, v88, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.ledbat_plus_plus failed. Using default value: 1", buf, 0xCu);
    }

    v13[75] = 1;
  }
  *(void *)os_log_type_t type = 4;
  if (sysctlbyname("net.inet.tcp.use_ledbat", v13 + 76, (size_t *)type, 0, 0) || *(void *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v89 = (id)gLogObj;
    if (os_log_type_enabled(v89, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446210;
      int v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_1830D4000, v89, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.use_ledbat failed. Using default value: 0", buf, 0xCu);
    }

    v13[76] = 0;
  }
  *(void *)os_log_type_t type = 4;
  if (sysctlbyname("net.inet.tcp.rledbat", v13 + 77, (size_t *)type, 0, 0) || *(void *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v90 = (id)gLogObj;
    if (os_log_type_enabled(v90, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446210;
      int v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_1830D4000, v90, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.rledbat failed. Using default value: 1", buf, 0xCu);
    }

    v13[77] = 1;
  }
  *(void *)os_log_type_t type = 4;
  if (sysctlbyname("net.inet.tcp.use_min_curr_rtt", v13 + 78, (size_t *)type, 0, 0) || *(void *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v91 = (id)gLogObj;
    if (os_log_type_enabled(v91, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446210;
      int v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_1830D4000, v91, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.use_min_curr_rtt failed. Using default value: 1", buf, 0xCu);
    }

    v13[78] = 1;
  }
  *(void *)os_log_type_t type = 4;
  if (sysctlbyname("net.inet.tcp.fin_timeout", v13 + 79, (size_t *)type, 0, 0) || *(void *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v92 = (id)gLogObj;
    if (os_log_type_enabled(v92, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446210;
      int v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_1830D4000, v92, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.fin_timeout failed. Using default value: 30", buf, 0xCu);
    }

    v13[79] = 30;
  }
  *(void *)os_log_type_t type = 4;
  if (sysctlbyname("net.inet.tcp.accurate_ecn", v13 + 80, (size_t *)type, 0, 0) || *(void *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v93 = (id)gLogObj;
    if (os_log_type_enabled(v93, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446210;
      int v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_1830D4000, v93, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.accurate_ecn failed. Using default value: 0", buf, 0xCu);
    }

    v13[80] = 0;
  }
  *(void *)os_log_type_t type = 4;
  if (sysctlbyname("net.inet.tcp.tso", v13 + 81, (size_t *)type, 0, 0) || *(void *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v94 = (id)gLogObj;
    if (os_log_type_enabled(v94, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446210;
      int v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_1830D4000, v94, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.tso failed. Using default value: 1", buf, 0xCu);
    }

    v13[81] = 1;
  }
  *(void *)os_log_type_t type = 4;
  if (sysctlbyname("net.inet.tcp.awdl_rtobase", v13 + 82, (size_t *)type, 0, 0) || *(void *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v95 = (id)gLogObj;
    if (os_log_type_enabled(v95, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446210;
      int v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_1830D4000, v95, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.awdl_rtobase failed. Using default value: 100", buf, 0xCu);
    }

    v13[82] = 100;
  }
  *(void *)os_log_type_t type = 4;
  if (sysctlbyname("net.inet.tcp.rack", v13 + 83, (size_t *)type, 0, 0) || *(void *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v96 = (id)gLogObj;
    if (os_log_type_enabled(v96, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446210;
      int v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_1830D4000, v96, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.rack failed. Using default value: 1", buf, 0xCu);
    }

    v13[83] = 1;
  }
  *(void *)os_log_type_t type = 4;
  if (sysctlbyname("net.inet.tcp.l4s", v13 + 84, (size_t *)type, 0, 0) || *(void *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v97 = (id)gLogObj;
    if (os_log_type_enabled(v97, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446210;
      int v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_1830D4000, v97, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname net.inet.tcp.l4s failed. Using default value: 0", buf, 0xCu);
    }

    v13[84] = 0;
  }
  *(void *)os_log_type_t type = 4;
  if (sysctlbyname("kern.ipc.throttle_best_effort", v13 + 85, (size_t *)type, 0, 0) || *(void *)type != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v98 = (id)gLogObj;
    if (os_log_type_enabled(v98, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446210;
      int v109 = "nw_path_get_sysctls_region_block_invoke";
      _os_log_impl(&dword_1830D4000, v98, OS_LOG_TYPE_INFO, "%{public}s sysctlbyname kern.ipc.throttle_best_effort failed. Using default value: 0", buf, 0xCu);
    }

    v13[85] = 0;
  }
  nw_path_get_sysctls_region::sysctls_region = (uint64_t)v13;
}

void sub_183434FA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL25nw_http1_connection_closeP19nw_http1_connection_block_invoke(uint64_t a1)
{
  uint64_t v140 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
  if (!v1) {
    return;
  }
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)(v1 + 480);
  if (v3)
  {
    nw_http_connection_metadata_closed(*(void **)(v1 + 768));
    if ((*(unsigned char *)(v2 + 158) & 1) == 0)
    {
      if (!gLogDatapath) {
        goto LABEL_5;
      }
      int v78 = __nwlog_obj();
      if (os_log_type_enabled(v78, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v79 = *(void *)(v2 + 488);
        int v80 = *(_DWORD *)(*(void *)(v2 + 480) + 372);
        int v81 = *(_DWORD *)(v2 + 860);
        if (v79) {
          LODWORD(v79) = *(_DWORD *)(v79 + 424);
        }
        *(_DWORD *)int buf = 136447490;
        *(void *)&uint8_t buf[4] = "nw_http1_tear_down_connection";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = v2 + 74;
        *(_WORD *)&unsigned char buf[22] = 2080;
        uint64_t v132 = (uint64_t)" ";
        *(_WORD *)uint64_t v133 = 1024;
        *(_DWORD *)&v133[2] = v80;
        *(_WORD *)&v133[6] = 1024;
        *(_DWORD *)&v133[8] = v81;
        *(_WORD *)&v133[12] = 1024;
        *(_DWORD *)&v133[14] = v79;
        _os_log_impl(&dword_1830D4000, v78, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> finalizing unprocessed_input_frames", buf, 0x32u);
      }
    }
    if (gLogDatapath)
    {
      BOOL v82 = __nwlog_obj();
      if (os_log_type_enabled(v82, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(type) = 136446210;
        *(void *)((char *)&type + 4) = "nw_protocol_finalize_temp_frame_array";
        _os_log_impl(&dword_1830D4000, v82, OS_LOG_TYPE_DEBUG, "%{public}s called", (uint8_t *)&type, 0xCu);
      }
    }
LABEL_5:
    *(void *)int buf = MEMORY[0x1E4F143A8];
    *(void *)&buf[8] = 0x40000000;
    *(void *)&buf[16] = ___ZL37nw_protocol_finalize_temp_frame_arrayP16nw_frame_array_sb_block_invoke_40118;
    uint64_t v132 = (uint64_t)&__block_descriptor_tmp_58_40119;
    *(void *)uint64_t v133 = v2 + 616;
    v133[8] = 0;
    uint64_t v4 = *(void *)(v2 + 616);
    do
    {
      if (!v4) {
        break;
      }
      uint64_t v5 = *(void *)(v4 + 32);
      char v6 = (*(uint64_t (**)(unsigned char *))&buf[16])(buf);
      uint64_t v4 = v5;
    }
    while ((v6 & 1) != 0);
    if ((*(unsigned char *)(v2 + 158) & 1) == 0)
    {
      if (!gLogDatapath) {
        goto LABEL_10;
      }
      uint64_t v83 = __nwlog_obj();
      if (os_log_type_enabled(v83, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v84 = *(void *)(v2 + 488);
        int v85 = *(_DWORD *)(*(void *)(v2 + 480) + 372);
        int v86 = *(_DWORD *)(v2 + 860);
        if (v84) {
          LODWORD(v84) = *(_DWORD *)(v84 + 424);
        }
        *(_DWORD *)int buf = 136447490;
        *(void *)&uint8_t buf[4] = "nw_http1_tear_down_connection";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = v2 + 74;
        *(_WORD *)&unsigned char buf[22] = 2080;
        uint64_t v132 = (uint64_t)" ";
        *(_WORD *)uint64_t v133 = 1024;
        *(_DWORD *)&v133[2] = v85;
        *(_WORD *)&v133[6] = 1024;
        *(_DWORD *)&v133[8] = v86;
        *(_WORD *)&v133[12] = 1024;
        *(_DWORD *)&v133[14] = v84;
        _os_log_impl(&dword_1830D4000, v83, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> finalizing processed_input_frames", buf, 0x32u);
      }
    }
    if (gLogDatapath)
    {
      uint64_t v87 = __nwlog_obj();
      if (os_log_type_enabled(v87, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(type) = 136446210;
        *(void *)((char *)&type + 4) = "nw_protocol_finalize_temp_frame_array";
        _os_log_impl(&dword_1830D4000, v87, OS_LOG_TYPE_DEBUG, "%{public}s called", (uint8_t *)&type, 0xCu);
      }
    }
LABEL_10:
    *(void *)int buf = MEMORY[0x1E4F143A8];
    *(void *)&buf[8] = 0x40000000;
    *(void *)&buf[16] = ___ZL37nw_protocol_finalize_temp_frame_arrayP16nw_frame_array_sb_block_invoke_40118;
    uint64_t v132 = (uint64_t)&__block_descriptor_tmp_58_40119;
    *(void *)uint64_t v133 = v2 + 632;
    v133[8] = 0;
    uint64_t v7 = *(void *)(v2 + 632);
    do
    {
      if (!v7) {
        break;
      }
      uint64_t v8 = *(void *)(v7 + 32);
      char v9 = (*(uint64_t (**)(unsigned char *))&buf[16])(buf);
      uint64_t v7 = v8;
    }
    while ((v9 & 1) != 0);
    if ((*(unsigned char *)(v2 + 158) & 1) == 0)
    {
      if (gLogDatapath)
      {
        uint32_t v88 = __nwlog_obj();
        if (os_log_type_enabled(v88, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v89 = *(void *)(v2 + 488);
          int v90 = *(_DWORD *)(*(void *)(v2 + 480) + 372);
          int v91 = *(_DWORD *)(v2 + 860);
          if (v89) {
            LODWORD(v89) = *(_DWORD *)(v89 + 424);
          }
          *(_DWORD *)int buf = 136447490;
          *(void *)&uint8_t buf[4] = "nw_http1_tear_down_connection";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v2 + 74;
          *(_WORD *)&unsigned char buf[22] = 2080;
          uint64_t v132 = (uint64_t)" ";
          *(_WORD *)uint64_t v133 = 1024;
          *(_DWORD *)&v133[2] = v90;
          *(_WORD *)&v133[6] = 1024;
          *(_DWORD *)&v133[8] = v91;
          *(_WORD *)&v133[12] = 1024;
          *(_DWORD *)&v133[14] = v89;
          _os_log_impl(&dword_1830D4000, v88, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> removing pending_output_frames", buf, 0x32u);
        }
      }
    }
    *(void *)&long long type = MEMORY[0x1E4F143A8];
    *((void *)&type + 1) = 0x40000000;
    nw_endpoint_t v128 = (uint64_t (*)(long long *))___ZL29nw_http1_tear_down_connectionP17nw_protocol_http1P19nw_http1_connection_block_invoke;
    id v129 = &__block_descriptor_tmp_57_40171;
    uint64_t v130 = v2;
    uint64_t v10 = *(void *)(v2 + 648);
    do
    {
      if (!v10) {
        break;
      }
      uint64_t v11 = *(void *)(v10 + 32);
      char v12 = v128(&type);
      uint64_t v10 = v11;
    }
    while ((v12 & 1) != 0);
    os_log_type_t v13 = (uint64_t *)(v2 + 696);
    nw_frame_cache_remove_all((uint64_t *)(v2 + 696));
    if ((*(unsigned char *)(v2 + 158) & 1) == 0)
    {
      if (gLogDatapath)
      {
        id v92 = __nwlog_obj();
        if (os_log_type_enabled(v92, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v93 = *(void *)(v2 + 488);
          int v94 = *(_DWORD *)(*(void *)(v2 + 480) + 372);
          int v95 = *(_DWORD *)(v2 + 860);
          if (v93) {
            LODWORD(v93) = *(_DWORD *)(v93 + 424);
          }
          uint64_t v96 = *(void *)(v2 + 32);
          *(_DWORD *)int buf = 136447746;
          *(void *)&uint8_t buf[4] = "nw_http1_tear_down_connection";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v2 + 74;
          *(_WORD *)&unsigned char buf[22] = 2080;
          uint64_t v132 = (uint64_t)" ";
          *(_WORD *)uint64_t v133 = 1024;
          *(_DWORD *)&v133[2] = v94;
          *(_WORD *)&v133[6] = 1024;
          *(_DWORD *)&v133[8] = v95;
          *(_WORD *)&v133[12] = 1024;
          *(_DWORD *)&v133[14] = v93;
          *(_WORD *)&v133[18] = 2048;
          *(void *)&v133[20] = v96;
          _os_log_impl(&dword_1830D4000, v92, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> calling remove input handler on output handler %p", buf, 0x3Cu);
        }
      }
    }
    int v14 = *(_DWORD *)(v3 + 336);
    *(_DWORD *)(v3 + 336) = v14 - 1;
    if (v14)
    {
      if (*(unsigned char *)(v3 + 158)) {
        goto LABEL_41;
      }
      goto LABEL_40;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v15 = *(unsigned int *)(v3 + 336);
    *(_DWORD *)int buf = 136446978;
    *(void *)&uint8_t buf[4] = "nw_http1_remove_connection";
    *(_WORD *)&unsigned char buf[12] = 2082;
    *(void *)&buf[14] = "http1->connections_count";
    *(_WORD *)&unsigned char buf[22] = 2048;
    uint64_t v132 = 1;
    *(_WORD *)uint64_t v133 = 2048;
    *(void *)&v133[2] = v15;
    __int16 v16 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(v136) = 16;
    os_log_type_t v126 = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v16, &v136, &v126))
    {
      if (v136 == 17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v17 = gLogObj;
        os_log_type_t v18 = v136;
        if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v136)) {
          goto LABEL_37;
        }
        uint64_t v19 = *(unsigned int *)(v3 + 336);
        *(_DWORD *)int buf = 136446978;
        *(void *)&uint8_t buf[4] = "nw_http1_remove_connection";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = "http1->connections_count";
        *(_WORD *)&unsigned char buf[22] = 2048;
        uint64_t v132 = 1;
        *(_WORD *)uint64_t v133 = 2048;
        *(void *)&v133[2] = v19;
        os_log_type_t v20 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu";
LABEL_36:
        _os_log_impl(&dword_1830D4000, v17, v18, v20, buf, 0x2Au);
        goto LABEL_37;
      }
      if (v126 == OS_LOG_TYPE_DEFAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v17 = gLogObj;
        os_log_type_t v18 = v136;
        if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v136)) {
          goto LABEL_37;
        }
        uint64_t v24 = *(unsigned int *)(v3 + 336);
        *(_DWORD *)int buf = 136446978;
        *(void *)&uint8_t buf[4] = "nw_http1_remove_connection";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = "http1->connections_count";
        *(_WORD *)&unsigned char buf[22] = 2048;
        uint64_t v132 = 1;
        *(_WORD *)uint64_t v133 = 2048;
        *(void *)&v133[2] = v24;
        os_log_type_t v20 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, backtrace limit exceeded";
        goto LABEL_36;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v17 = gLogObj;
      os_log_type_t v18 = v136;
      BOOL v22 = os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v136);
      if (!backtrace_string)
      {
        if (!v22) {
          goto LABEL_37;
        }
        uint64_t v25 = *(unsigned int *)(v3 + 336);
        *(_DWORD *)int buf = 136446978;
        *(void *)&uint8_t buf[4] = "nw_http1_remove_connection";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = "http1->connections_count";
        *(_WORD *)&unsigned char buf[22] = 2048;
        uint64_t v132 = 1;
        *(_WORD *)uint64_t v133 = 2048;
        *(void *)&v133[2] = v25;
        os_log_type_t v20 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, no backtrace";
        goto LABEL_36;
      }
      if (v22)
      {
        uint64_t v23 = *(unsigned int *)(v3 + 336);
        *(_DWORD *)int buf = 136447234;
        *(void *)&uint8_t buf[4] = "nw_http1_remove_connection";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = "http1->connections_count";
        *(_WORD *)&unsigned char buf[22] = 2048;
        uint64_t v132 = 1;
        *(_WORD *)uint64_t v133 = 2048;
        *(void *)&v133[2] = v23;
        *(_WORD *)&v133[10] = 2082;
        *(void *)&v133[12] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v17, v18, "%{public}s Underflow: %{public}s, decrement %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
      }
      free(backtrace_string);
    }
LABEL_37:
    if (v16) {
      free(v16);
    }
    *(_DWORD *)(v3 + 336) = 0;
    os_log_type_t v13 = (uint64_t *)(v2 + 696);
    if (*(unsigned char *)(v3 + 158))
    {
LABEL_41:
      if ((*(_WORD *)(v2 + 872) & 0x800) == 0) {
        goto LABEL_62;
      }
      int v26 = *(_DWORD *)(v3 + 368);
      *(_DWORD *)(v3 + 368) = v26 - 1;
      if (v26)
      {
LABEL_60:
        if ((*(unsigned char *)(v3 + 158) & 1) == 0)
        {
          if (gLogDatapath)
          {
            BOOL v111 = __nwlog_obj();
            if (os_log_type_enabled(v111, OS_LOG_TYPE_DEBUG))
            {
              int v112 = *(_DWORD *)(v3 + 372);
              int v113 = *(_DWORD *)(v3 + 368) + *(_DWORD *)(v3 + 364);
              *(_DWORD *)int buf = 136447490;
              *(void *)&uint8_t buf[4] = "nw_http1_remove_connection";
              *(_WORD *)&unsigned char buf[12] = 2082;
              *(void *)&buf[14] = v3 + 74;
              *(_WORD *)&unsigned char buf[22] = 2080;
              uint64_t v132 = (uint64_t)" ";
              *(_WORD *)uint64_t v133 = 1024;
              *(_DWORD *)&v133[2] = v112;
              *(_WORD *)&v133[6] = 1024;
              *(_DWORD *)&v133[8] = v113;
              *(_WORD *)&v133[12] = 2048;
              *(void *)&v133[14] = v2;
              _os_log_impl(&dword_1830D4000, v111, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> decreased connection pool width to %u after removing non-reusable connection %p", buf, 0x36u);
            }
          }
        }
LABEL_62:
        nw_protocol_remove_input_handler(*(void *)(v2 + 32), v2);
        nw_protocol_set_output_handler(v2, 0);
        if ((*(unsigned char *)(v2 + 158) & 1) == 0)
        {
          if (gLogDatapath)
          {
            os_log_type_t v100 = __nwlog_obj();
            if (os_log_type_enabled(v100, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v101 = *(void *)(v2 + 488);
              int v102 = *(_DWORD *)(*(void *)(v2 + 480) + 372);
              int v103 = *(_DWORD *)(v2 + 860);
              if (v101) {
                LODWORD(v101) = *(_DWORD *)(v101 + 424);
              }
              *(_DWORD *)int buf = 136447746;
              *(void *)&uint8_t buf[4] = "nw_http1_connection_destroy";
              *(_WORD *)&unsigned char buf[12] = 2082;
              *(void *)&buf[14] = v2 + 74;
              *(_WORD *)&unsigned char buf[22] = 2080;
              uint64_t v132 = (uint64_t)" ";
              *(_WORD *)uint64_t v133 = 1024;
              *(_DWORD *)&v133[2] = v102;
              *(_WORD *)&v133[6] = 1024;
              *(_DWORD *)&v133[8] = v103;
              *(_WORD *)&v133[12] = 1024;
              *(_DWORD *)&v133[14] = v101;
              *(_WORD *)&v133[18] = 2048;
              *(void *)&v133[20] = v2;
              _os_log_impl(&dword_1830D4000, v100, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> destroying %p", buf, 0x3Cu);
            }
          }
        }
        char v38 = *(unsigned char *)(v2 + 760);
        if (v38)
        {
          uint64_t v39 = *(void **)(v2 + 752);
          if (v39)
          {
            os_release(v39);
            char v38 = *(unsigned char *)(v2 + 760);
          }
        }
        *(void *)(v2 + 752) = 0;
        *(unsigned char *)(v2 + 760) = v38 | 1;
        char v40 = *(unsigned char *)(v2 + 744);
        if (v40)
        {
          __int16 v41 = *(void **)(v2 + 736);
          if (v41)
          {
            os_release(v41);
            char v40 = *(unsigned char *)(v2 + 744);
          }
        }
        *(void *)(v2 + 736) = 0;
        *(unsigned char *)(v2 + 744) = v40 | 1;
        uint64_t v42 = *(void *)(v2 + 488);
        if (!v42 || *(void *)(v42 + 256) != v2)
        {
LABEL_83:
          *(void *)(v2 + 488) = 0;
          if ((*(unsigned char *)(v2 + 158) & 1) == 0)
          {
            if (!gLogDatapath) {
              goto LABEL_85;
            }
            uint64_t v104 = __nwlog_obj();
            if (os_log_type_enabled(v104, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v105 = *(void *)(v2 + 488);
              int v106 = *(_DWORD *)(*(void *)(v2 + 480) + 372);
              int v107 = *(_DWORD *)(v2 + 860);
              if (v105) {
                LODWORD(v105) = *(_DWORD *)(v105 + 424);
              }
              *(_DWORD *)int buf = 136447490;
              *(void *)&uint8_t buf[4] = "nw_http1_connection_destroy";
              *(_WORD *)&unsigned char buf[12] = 2082;
              *(void *)&buf[14] = v2 + 74;
              *(_WORD *)&unsigned char buf[22] = 2080;
              uint64_t v132 = (uint64_t)" ";
              *(_WORD *)uint64_t v133 = 1024;
              *(_DWORD *)&v133[2] = v106;
              *(_WORD *)&v133[6] = 1024;
              *(_DWORD *)&v133[8] = v107;
              *(_WORD *)&v133[12] = 1024;
              *(_DWORD *)&v133[14] = v105;
              _os_log_impl(&dword_1830D4000, v104, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:c%u:s%u> finalizing frame arrays", buf, 0x32u);
            }
          }
          if (gLogDatapath)
          {
            uint64_t v108 = __nwlog_obj();
            if (os_log_type_enabled(v108, OS_LOG_TYPE_DEBUG))
            {
              int v136 = 136446210;
              int v137 = "nw_protocol_finalize_master_frame_array";
              _os_log_impl(&dword_1830D4000, v108, OS_LOG_TYPE_DEBUG, "%{public}s called", (uint8_t *)&v136, 0xCu);
            }
          }
LABEL_85:
          *(void *)int buf = MEMORY[0x1E4F143A8];
          *(void *)&buf[8] = 0x40000000;
          *(void *)&buf[16] = ___ZL39nw_protocol_finalize_master_frame_arrayP16nw_frame_array_sb_block_invoke_40196;
          uint64_t v132 = (uint64_t)&__block_descriptor_tmp_60_40197;
          v133[0] = 0;
          uint64_t v50 = *(void *)(v2 + 680);
          do
          {
            if (!v50) {
              break;
            }
            uint64_t v51 = *(void *)(v50 + 16);
            char v52 = (*(uint64_t (**)(unsigned char *))&buf[16])(buf);
            uint64_t v50 = v51;
          }
          while ((v52 & 1) != 0);
          if (!*(void *)(v2 + 680)) {
            goto LABEL_89;
          }
          __nwlog_obj();
          int v136 = 136446210;
          int v137 = "nw_protocol_finalize_master_frame_array";
          char v69 = (char *)_os_log_send_and_compose_impl();
          os_log_type_t v126 = OS_LOG_TYPE_ERROR;
          char v125 = 0;
          if (__nwlog_fault(v69, &v126, &v125))
          {
            if (v126 == OS_LOG_TYPE_FAULT)
            {
              BOOL v70 = __nwlog_obj();
              os_log_type_t v71 = v126;
              if (!os_log_type_enabled(v70, v126)) {
                goto LABEL_199;
              }
              int v136 = 136446210;
              int v137 = "nw_protocol_finalize_master_frame_array";
              BOOL v72 = "%{public}s frame array is not empty after finalize";
              goto LABEL_198;
            }
            if (!v125)
            {
              BOOL v70 = __nwlog_obj();
              os_log_type_t v71 = v126;
              if (!os_log_type_enabled(v70, v126)) {
                goto LABEL_199;
              }
              int v136 = 136446210;
              int v137 = "nw_protocol_finalize_master_frame_array";
              BOOL v72 = "%{public}s frame array is not empty after finalize, backtrace limit exceeded";
              goto LABEL_198;
            }
            uint64_t v114 = (char *)__nw_create_backtrace_string();
            BOOL v70 = __nwlog_obj();
            os_log_type_t v71 = v126;
            BOOL v115 = os_log_type_enabled(v70, v126);
            if (v114)
            {
              if (v115)
              {
                int v136 = 136446466;
                int v137 = "nw_protocol_finalize_master_frame_array";
                __int16 v138 = 2082;
                uint64_t v139 = v114;
                _os_log_impl(&dword_1830D4000, v70, v71, "%{public}s frame array is not empty after finalize, dumping backtrace:%{public}s", (uint8_t *)&v136, 0x16u);
              }
              free(v114);
              goto LABEL_199;
            }
            if (v115)
            {
              int v136 = 136446210;
              int v137 = "nw_protocol_finalize_master_frame_array";
              BOOL v72 = "%{public}s frame array is not empty after finalize, no backtrace";
LABEL_198:
              _os_log_impl(&dword_1830D4000, v70, v71, v72, (uint8_t *)&v136, 0xCu);
            }
          }
LABEL_199:
          if (v69) {
            free(v69);
          }
LABEL_89:
          if (gLogDatapath)
          {
            id v73 = __nwlog_obj();
            if (os_log_type_enabled(v73, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)int buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_protocol_finalize_master_frame_array";
              _os_log_impl(&dword_1830D4000, v73, OS_LOG_TYPE_DEBUG, "%{public}s called", buf, 0xCu);
            }
          }
          *(void *)int buf = MEMORY[0x1E4F143A8];
          *(void *)&buf[8] = 0x40000000;
          *(void *)&buf[16] = ___ZL39nw_protocol_finalize_master_frame_arrayP16nw_frame_array_sb_block_invoke_40196;
          uint64_t v132 = (uint64_t)&__block_descriptor_tmp_60_40197;
          v133[0] = 0;
          uint64_t v53 = *(void *)(v2 + 664);
          do
          {
            if (!v53) {
              break;
            }
            uint64_t v54 = *(void *)(v53 + 16);
            char v55 = (*(uint64_t (**)(unsigned char *))&buf[16])(buf);
            uint64_t v53 = v54;
          }
          while ((v55 & 1) != 0);
          if (!*(void *)(v2 + 664)) {
            goto LABEL_94;
          }
          __nwlog_obj();
          int v136 = 136446210;
          int v137 = "nw_protocol_finalize_master_frame_array";
          unsigned int v74 = (char *)_os_log_send_and_compose_impl();
          os_log_type_t v126 = OS_LOG_TYPE_ERROR;
          char v125 = 0;
          if (__nwlog_fault(v74, &v126, &v125))
          {
            if (v126 == OS_LOG_TYPE_FAULT)
            {
              char v75 = __nwlog_obj();
              os_log_type_t v76 = v126;
              if (!os_log_type_enabled(v75, v126)) {
                goto LABEL_204;
              }
              int v136 = 136446210;
              int v137 = "nw_protocol_finalize_master_frame_array";
              char v77 = "%{public}s frame array is not empty after finalize";
              goto LABEL_203;
            }
            if (!v125)
            {
              char v75 = __nwlog_obj();
              os_log_type_t v76 = v126;
              if (!os_log_type_enabled(v75, v126)) {
                goto LABEL_204;
              }
              int v136 = 136446210;
              int v137 = "nw_protocol_finalize_master_frame_array";
              char v77 = "%{public}s frame array is not empty after finalize, backtrace limit exceeded";
              goto LABEL_203;
            }
            BOOL v116 = (char *)__nw_create_backtrace_string();
            char v75 = __nwlog_obj();
            os_log_type_t v76 = v126;
            BOOL v117 = os_log_type_enabled(v75, v126);
            if (v116)
            {
              if (v117)
              {
                int v136 = 136446466;
                int v137 = "nw_protocol_finalize_master_frame_array";
                __int16 v138 = 2082;
                uint64_t v139 = v116;
                _os_log_impl(&dword_1830D4000, v75, v76, "%{public}s frame array is not empty after finalize, dumping backtrace:%{public}s", (uint8_t *)&v136, 0x16u);
              }
              free(v116);
              goto LABEL_204;
            }
            if (v117)
            {
              int v136 = 136446210;
              int v137 = "nw_protocol_finalize_master_frame_array";
              char v77 = "%{public}s frame array is not empty after finalize, no backtrace";
LABEL_203:
              _os_log_impl(&dword_1830D4000, v75, v76, v77, (uint8_t *)&v136, 0xCu);
            }
          }
LABEL_204:
          if (v74) {
            free(v74);
          }
LABEL_94:
          nw_frame_cache_destroy(v13);
          unsigned int v56 = *(void **)(v2 + 528);
          if (v56)
          {
            os_log_type_t v57 = *(void **)(v2 + 544);
            if (v57) {
              nw_association_unregister(v56, v57);
            }
          }
          objc_super v58 = *(void **)(v2 + 800);
          if (v58)
          {
            free(v58);
            *(void *)(v2 + 800) = 0;
          }
          *(_DWORD *)(v2 + 840) = 0;
          unsigned int v59 = *(void **)(v2 + 808);
          if (v59)
          {
            free(v59);
            *(void *)(v2 + 808) = 0;
          }
          *(_DWORD *)(v2 + 844) = 0;
          uint64_t v60 = *(void **)(v2 + 816);
          if (v60)
          {
            free(v60);
            *(void *)(v2 + 816) = 0;
          }
          *(_DWORD *)(v2 + 848) = 0;
          int v61 = *(void **)(v2 + 824);
          if (v61)
          {
            free(v61);
            *(void *)(v2 + 824) = 0;
          }
          *(_DWORD *)(v2 + 852) = 0;
          int v62 = *(void **)(v2 + 832);
          if (v62)
          {
            free(v62);
            *(void *)(v2 + 832) = 0;
          }
          *(_DWORD *)(v2 + 856) = 0;
          (*(void (**)(void, void))(*(void *)(v2 + 608) + 16))(*(void *)(v2 + 608), 0);
          int v63 = *(const void **)(v2 + 608);
          if (v63)
          {
            _Block_release(v63);
            *(void *)(v2 + 608) = 0;
          }
          nw_http1_connection::~nw_http1_connection((nw_http1_connection *)v2);
          free(v64);
          if (!*(_DWORD *)(v3 + 336) && !*(_DWORD *)(v3 + 344)) {
            nw_protocol_http1_destroy(v3, v3);
          }
          return;
        }
        if (*(void *)(v42 + 248))
        {
          if ((*(unsigned char *)(v42 + 158) & 1) == 0)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            uint64_t v43 = gLogObj;
            if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
            {
              uint64_t v44 = *(void *)(v42 + 256);
              int v45 = *(_DWORD *)(*(void *)(v42 + 248) + 372);
              if (v44) {
                LODWORD(v44) = *(_DWORD *)(v44 + 860);
              }
              int v46 = *(_DWORD *)(v42 + 424);
              *(_DWORD *)int buf = 136448002;
              *(void *)&uint8_t buf[4] = "nw_http1_stream_disassociate_from_connection";
              *(_WORD *)&unsigned char buf[12] = 2082;
              *(void *)&buf[14] = v42 + 74;
              *(_WORD *)&unsigned char buf[22] = 2080;
              uint64_t v132 = (uint64_t)" ";
              *(_WORD *)uint64_t v133 = 1024;
              *(_DWORD *)&v133[2] = v45;
              *(_WORD *)&v133[6] = 1024;
              *(_DWORD *)&v133[8] = v44;
              *(_WORD *)&v133[12] = 1024;
              *(_DWORD *)&v133[14] = v46;
              *(_WORD *)&v133[18] = 2048;
              *(void *)&v133[20] = v42;
              __int16 v134 = 2048;
              uint64_t v135 = v2;
              _os_log_impl(&dword_1830D4000, v43, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s<i%u:c%u:s%u> stream (%p) finished with connection %p", buf, 0x46u);
            }
          }
          if (gLogDatapath)
          {
            uint64_t v122 = __nwlog_obj();
            if (os_log_type_enabled(v122, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)int buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_protocol_finalize_temp_frame_array";
              _os_log_impl(&dword_1830D4000, v122, OS_LOG_TYPE_DEBUG, "%{public}s called", buf, 0xCu);
            }
          }
          *(void *)int buf = MEMORY[0x1E4F143A8];
          *(void *)&buf[8] = 0x40000000;
          *(void *)&buf[16] = ___ZL37nw_protocol_finalize_temp_frame_arrayP16nw_frame_array_sb_block_invoke_40118;
          uint64_t v132 = (uint64_t)&__block_descriptor_tmp_58_40119;
          *(void *)uint64_t v133 = v2 + 632;
          v133[8] = 0;
          uint64_t v47 = *(void *)(v2 + 632);
          do
          {
            if (!v47) {
              break;
            }
            uint64_t v48 = *(void *)(v47 + 32);
            char v49 = (*(uint64_t (**)(unsigned char *))&buf[16])(buf);
            uint64_t v47 = v48;
          }
          while ((v49 & 1) != 0);
          *(void *)(v42 + 256) = 0;
          *(void *)(v2 + 488) = 0;
          nw_protocol_set_output_handler(v42, 0);
          nw_protocol_set_input_handler(v2, 0);
          goto LABEL_83;
        }
        __nwlog_obj();
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http1_stream_disassociate_from_connection";
        id v118 = (char *)_os_log_send_and_compose_impl();
        LOBYTE(v136) = 16;
        os_log_type_t v126 = OS_LOG_TYPE_DEFAULT;
        if (__nwlog_fault(v118, &v136, &v126))
        {
          if (v136 == 17)
          {
            uint64_t v119 = __nwlog_obj();
            os_log_type_t v120 = v136;
            if (!os_log_type_enabled(v119, (os_log_type_t)v136)) {
              goto LABEL_216;
            }
            *(_DWORD *)int buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_http1_stream_disassociate_from_connection";
            char v121 = "%{public}s called with null http1_stream->protocol_http1";
            goto LABEL_215;
          }
          if (v126 == OS_LOG_TYPE_DEFAULT)
          {
            uint64_t v119 = __nwlog_obj();
            os_log_type_t v120 = v136;
            if (!os_log_type_enabled(v119, (os_log_type_t)v136)) {
              goto LABEL_216;
            }
            *(_DWORD *)int buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_http1_stream_disassociate_from_connection";
            char v121 = "%{public}s called with null http1_stream->protocol_http1, backtrace limit exceeded";
            goto LABEL_215;
          }
          id v123 = (char *)__nw_create_backtrace_string();
          uint64_t v119 = __nwlog_obj();
          os_log_type_t v120 = v136;
          BOOL v124 = os_log_type_enabled(v119, (os_log_type_t)v136);
          if (v123)
          {
            if (v124)
            {
              *(_DWORD *)int buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_http1_stream_disassociate_from_connection";
              *(_WORD *)&unsigned char buf[12] = 2082;
              *(void *)&buf[14] = v123;
              _os_log_impl(&dword_1830D4000, v119, v120, "%{public}s called with null http1_stream->protocol_http1, dumping backtrace:%{public}s", buf, 0x16u);
            }
            free(v123);
            goto LABEL_216;
          }
          if (v124)
          {
            *(_DWORD *)int buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_http1_stream_disassociate_from_connection";
            char v121 = "%{public}s called with null http1_stream->protocol_http1, no backtrace";
LABEL_215:
            _os_log_impl(&dword_1830D4000, v119, v120, v121, buf, 0xCu);
          }
        }
LABEL_216:
        if (v118) {
          free(v118);
        }
        goto LABEL_83;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v27 = *(unsigned int *)(v3 + 368);
      *(_DWORD *)int buf = 136446978;
      *(void *)&uint8_t buf[4] = "nw_http1_remove_connection";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = "http1->nonresuable_connections";
      *(_WORD *)&unsigned char buf[22] = 2048;
      uint64_t v132 = 1;
      *(_WORD *)uint64_t v133 = 2048;
      *(void *)&v133[2] = v27;
      os_log_type_t v28 = (char *)_os_log_send_and_compose_impl();
      LOBYTE(v136) = 16;
      os_log_type_t v126 = OS_LOG_TYPE_DEFAULT;
      if (__nwlog_fault(v28, &v136, &v126))
      {
        if (v136 == 17)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          int v29 = gLogObj;
          os_log_type_t v30 = v136;
          if (os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v136))
          {
            uint64_t v31 = *(unsigned int *)(v3 + 368);
            *(_DWORD *)int buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_http1_remove_connection";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = "http1->nonresuable_connections";
            *(_WORD *)&unsigned char buf[22] = 2048;
            uint64_t v132 = 1;
            *(_WORD *)uint64_t v133 = 2048;
            *(void *)&v133[2] = v31;
            os_log_type_t v32 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu";
LABEL_56:
            _os_log_impl(&dword_1830D4000, v29, v30, v32, buf, 0x2Au);
          }
        }
        else if (v126)
        {
          os_log_type_t v33 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          int v29 = gLogObj;
          os_log_type_t v30 = v136;
          BOOL v34 = os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v136);
          if (v33)
          {
            if (v34)
            {
              uint64_t v35 = *(unsigned int *)(v3 + 368);
              *(_DWORD *)int buf = 136447234;
              *(void *)&uint8_t buf[4] = "nw_http1_remove_connection";
              *(_WORD *)&unsigned char buf[12] = 2082;
              *(void *)&buf[14] = "http1->nonresuable_connections";
              *(_WORD *)&unsigned char buf[22] = 2048;
              uint64_t v132 = 1;
              *(_WORD *)uint64_t v133 = 2048;
              *(void *)&v133[2] = v35;
              *(_WORD *)&v133[10] = 2082;
              *(void *)&v133[12] = v33;
              _os_log_impl(&dword_1830D4000, v29, v30, "%{public}s Underflow: %{public}s, decrement %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
            }
            free(v33);
            goto LABEL_57;
          }
          if (v34)
          {
            uint64_t v37 = *(unsigned int *)(v3 + 368);
            *(_DWORD *)int buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_http1_remove_connection";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = "http1->nonresuable_connections";
            *(_WORD *)&unsigned char buf[22] = 2048;
            uint64_t v132 = 1;
            *(_WORD *)uint64_t v133 = 2048;
            *(void *)&v133[2] = v37;
            os_log_type_t v32 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, no backtrace";
            goto LABEL_56;
          }
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          int v29 = gLogObj;
          os_log_type_t v30 = v136;
          if (os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v136))
          {
            uint64_t v36 = *(unsigned int *)(v3 + 368);
            *(_DWORD *)int buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_http1_remove_connection";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = "http1->nonresuable_connections";
            *(_WORD *)&unsigned char buf[22] = 2048;
            uint64_t v132 = 1;
            *(_WORD *)uint64_t v133 = 2048;
            *(void *)&v133[2] = v36;
            os_log_type_t v32 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, backtrace limit exceeded";
            goto LABEL_56;
          }
        }
      }
LABEL_57:
      if (v28) {
        free(v28);
      }
      *(_DWORD *)(v3 + 368) = 0;
      goto LABEL_60;
    }
LABEL_40:
    if (gLogDatapath)
    {
      uint64_t v97 = __nwlog_obj();
      if (os_log_type_enabled(v97, OS_LOG_TYPE_DEBUG))
      {
        int v98 = *(_DWORD *)(v3 + 372);
        int v99 = *(_DWORD *)(v3 + 336);
        *(_DWORD *)int buf = 136447490;
        *(void *)&uint8_t buf[4] = "nw_http1_remove_connection";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = v3 + 74;
        *(_WORD *)&unsigned char buf[22] = 2080;
        uint64_t v132 = (uint64_t)" ";
        *(_WORD *)uint64_t v133 = 1024;
        *(_DWORD *)&v133[2] = v98;
        *(_WORD *)&v133[6] = 2048;
        *(void *)&v133[8] = v2;
        *(_WORD *)&v133[16] = 1024;
        *(_DWORD *)&v133[18] = v99;
        _os_log_impl(&dword_1830D4000, v97, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> removed connection %p, now have %u connections", buf, 0x36u);
      }
    }
    goto LABEL_41;
  }
  __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_http1_tear_down_connection";
  uint64_t v65 = (char *)_os_log_send_and_compose_impl();
  LOBYTE(type) = 16;
  LOBYTE(v136) = 0;
  if (__nwlog_fault(v65, &type, &v136))
  {
    if (type == 17)
    {
      uint64_t v66 = __nwlog_obj();
      os_log_type_t v67 = type;
      if (!os_log_type_enabled(v66, (os_log_type_t)type)) {
        goto LABEL_194;
      }
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http1_tear_down_connection";
      BOOL v68 = "%{public}s called with null http1";
      goto LABEL_193;
    }
    if (!(_BYTE)v136)
    {
      uint64_t v66 = __nwlog_obj();
      os_log_type_t v67 = type;
      if (!os_log_type_enabled(v66, (os_log_type_t)type)) {
        goto LABEL_194;
      }
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http1_tear_down_connection";
      BOOL v68 = "%{public}s called with null http1, backtrace limit exceeded";
      goto LABEL_193;
    }
    int v109 = (char *)__nw_create_backtrace_string();
    uint64_t v66 = __nwlog_obj();
    os_log_type_t v67 = type;
    BOOL v110 = os_log_type_enabled(v66, (os_log_type_t)type);
    if (v109)
    {
      if (v110)
      {
        *(_DWORD *)int buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http1_tear_down_connection";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = v109;
        _os_log_impl(&dword_1830D4000, v66, v67, "%{public}s called with null http1, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v109);
      goto LABEL_194;
    }
    if (v110)
    {
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http1_tear_down_connection";
      BOOL v68 = "%{public}s called with null http1, no backtrace";
LABEL_193:
      _os_log_impl(&dword_1830D4000, v66, v67, v68, buf, 0xCu);
    }
  }
LABEL_194:
  if (v65) {
    free(v65);
  }
}

void nw_http_connection_metadata_closed(void *a1)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (!v1)
  {
    uint64_t v7 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v24 = "nw_http_connection_metadata_closed";
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (!__nwlog_fault(v8, &type, &v21)) {
      goto LABEL_41;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v24 = "nw_http_connection_metadata_closed";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null metadata", buf, 0xCu);
      }
    }
    else if (v21)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      char v9 = __nwlog_obj();
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)int buf = 136446466;
          uint64_t v24 = "nw_http_connection_metadata_closed";
          __int16 v25 = 2082;
          int v26 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_41:
        if (!v8) {
          goto LABEL_7;
        }
LABEL_42:
        free(v8);
        goto LABEL_7;
      }
      if (v15)
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v24 = "nw_http_connection_metadata_closed";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      char v9 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v24 = "nw_http_connection_metadata_closed";
        _os_log_impl(&dword_1830D4000, v9, v19, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_40:

    goto LABEL_41;
  }
  id v3 = v1;
  id v4 = *((id *)v3 + 1);

  if (nw_protocol_copy_http_connection_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_connection_definition_onceToken, &__block_literal_global_89);
  }
  BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v4, nw_protocol_copy_http_connection_definition_definition);

  if (is_equal_unsafe)
  {
    char v6 = (os_unfair_lock_s *)*((void *)v3 + 4);
    if (v6) {
      __nw_http_connection_metadata_closed_block_invoke((uint64_t)&__block_literal_global_92, v6);
    }
    goto LABEL_7;
  }
  uint64_t v11 = __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  uint64_t v24 = "nw_http_connection_metadata_closed";
  uint64_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v21 = 0;
  if (!__nwlog_fault(v8, &type, &v21)) {
    goto LABEL_41;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    char v9 = __nwlog_obj();
    os_log_type_t v12 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)int buf = 136446210;
      uint64_t v24 = "nw_http_connection_metadata_closed";
      _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s metadata must be http_connection", buf, 0xCu);
    }
    goto LABEL_40;
  }
  if (!v21)
  {
    char v9 = __nwlog_obj();
    os_log_type_t v20 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)int buf = 136446210;
      uint64_t v24 = "nw_http_connection_metadata_closed";
      _os_log_impl(&dword_1830D4000, v9, v20, "%{public}s metadata must be http_connection, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_40;
  }
  __int16 v16 = (char *)__nw_create_backtrace_string();
  char v9 = __nwlog_obj();
  os_log_type_t v17 = type;
  BOOL v18 = os_log_type_enabled(v9, type);
  if (!v16)
  {
    if (v18)
    {
      *(_DWORD *)int buf = 136446210;
      uint64_t v24 = "nw_http_connection_metadata_closed";
      _os_log_impl(&dword_1830D4000, v9, v17, "%{public}s metadata must be http_connection, no backtrace", buf, 0xCu);
    }
    goto LABEL_40;
  }
  if (v18)
  {
    *(_DWORD *)int buf = 136446466;
    uint64_t v24 = "nw_http_connection_metadata_closed";
    __int16 v25 = 2082;
    int v26 = v16;
    _os_log_impl(&dword_1830D4000, v9, v17, "%{public}s metadata must be http_connection, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v16);
  if (v8) {
    goto LABEL_42;
  }
LABEL_7:
}

uint64_t __nw_protocol_tcpconverter_copy_definition_block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  id v3 = malloc_type_calloc(1uLL, 0x58uLL, 0xEAFB8F1AuLL);
  if (v3) {
    goto LABEL_2;
  }
  char v40 = __nwlog_obj();
  os_log_type_enabled(v40, OS_LOG_TYPE_ERROR);
  *(_DWORD *)int buf = 136446722;
  *(void *)&uint8_t buf[4] = "strict_calloc";
  *(_WORD *)&unsigned char buf[12] = 2048;
  *(void *)&buf[14] = 1;
  __int16 v54 = 2048;
  uint64_t v55 = 88;
  __int16 v41 = (void *)_os_log_send_and_compose_impl();
  uint64_t result = __nwlog_abort((uint64_t)v41);
  if (!result)
  {
    free(v41);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_tcpconverter_copy_definition_block_invoke_2";
    uint64_t v42 = (void *)_os_log_send_and_compose_impl();
    uint64_t result = __nwlog_abort((uint64_t)v42);
    if (!result)
    {
      free(v42);
LABEL_2:
      *id v3 = 0;
      id v4 = a2;
      uint64_t v5 = v4;
      unint64_t v6 = 84;
      uint64_t v7 = 609;
      while (1)
      {
        int v8 = *((unsigned __int8 *)&v4->isa + v7);
        *((unsigned char *)v3 + v7 - 605) = v8;
        if (!v8) {
          break;
        }
        --v6;
        ++v7;
        if (v6 <= 1)
        {
          *((unsigned char *)v3 + v7 - 605) = 0;
          break;
        }
      }

      input_handler[0] = MEMORY[0x1E4F143A8];
      input_handler[1] = 0x40000000;
      input_handler[2] = __nw_protocol_tcpconverter_copy_definition_block_invoke_10;
      input_handler[3] = &__block_descriptor_tmp_16_49313;
      input_void handler[4] = v3;
      input_handler[5] = v5;
      nw_framer_set_input_handler(v5, input_handler);
      output_handler[0] = MEMORY[0x1E4F143A8];
      output_handler[1] = 0x40000000;
      output_handler[2] = __nw_protocol_tcpconverter_copy_definition_block_invoke_2_17;
      output_handler[3] = &__block_descriptor_tmp_19_49314;
      output_void handler[4] = v3;
      nw_framer_set_output_handler(v5, output_handler);
      cleanup_handler[0] = MEMORY[0x1E4F143A8];
      cleanup_handler[1] = 0x40000000;
      cleanup_handler[2] = __nw_protocol_tcpconverter_copy_definition_block_invoke_20;
      cleanup_handler[3] = &__block_descriptor_tmp_22_49315;
      cleanup_void handler[4] = v3;
      nw_framer_set_cleanup_handler(v5, cleanup_handler);
      stop_handler[0] = MEMORY[0x1E4F143A8];
      stop_handler[1] = 0x40000000;
      stop_handler[2] = __nw_protocol_tcpconverter_copy_definition_block_invoke_2_23;
      stop_handler[3] = &__block_descriptor_tmp_25_49316;
      stop_void handler[4] = v3;
      nw_framer_set_stop_handler(v5, stop_handler);
      if (v5)
      {
        nw_endpoint_t v9 = nw_framer_copy_remote_endpoint(v5);
        if (nw_endpoint_get_type(v9) == nw_endpoint_type_address)
        {
          BOOL v10 = nw_endpoint_copy_proxy_original_endpoint(v9);
          if (nw_endpoint_get_type((nw_endpoint_t)v10) == nw_endpoint_type_address)
          {
            int v63 = 0;
            *(_DWORD *)output_int buffer = 1663174145;
            __int16 v65 = 1290;
            uint64_t v62 = 0;
            v61[0] = 528;
            v61[1] = __rev16(nw_endpoint_get_port((nw_endpoint_t)v10));
            address = nw_endpoint_get_address((nw_endpoint_t)v10);
            if (address->sa_family == 30)
            {
              os_log_type_t v12 = v5;
              nw_context_assert_queue(v12[46].isa);
              Class isa = v12[42].isa;
              if (isa
                && (uint64_t v15 = *((void *)isa + 3)) != 0
                && (__int16 v16 = *(void (**)(Class, uint64_t))(v15 + 120)) != 0)
              {
                os_log_type_t v17 = v16(isa, v13);
              }
              else
              {
                os_log_type_t v17 = 0;
              }

              if (nw_path_has_nat64_prefixes(v17))
              {
                BOOL v18 = (unsigned int *)nw_path_nat64_prefixes(v17);
                os_log_type_t v19 = v18;
                *(void *)int buf = 0;
                *(void *)&buf[8] = 0;
                size_t v20 = v18[4];
                if (v20)
                {
                  *(_DWORD *)int buf = v18[4];
                  memcpy(&buf[4], v18, v20);
                  if (nw_nat64_extract_v4((unsigned int *)buf, &address->sa_data[6], (uint64_t)&v62)) {
                    goto LABEL_23;
                  }
                }
                size_t v21 = v19[9];
                if (v21)
                {
                  *(_DWORD *)int buf = v19[9];
                  memcpy(&buf[4], v19, v21);
                  if (nw_nat64_extract_v4((unsigned int *)buf, &address->sa_data[6], (uint64_t)&v62)) {
                    goto LABEL_23;
                  }
                }
                if ((size_t v22 = v19[14], v22)
                  && (*(_DWORD *)int buf = v19[14],
                      memcpy(&buf[4], v19, v22),
                      (nw_nat64_extract_v4((unsigned int *)buf, &address->sa_data[6], (uint64_t)&v62) & 1) != 0)
                  || (size_t v23 = v19[19], v23)
                  && (*(_DWORD *)int buf = v19[19],
                      memcpy(&buf[4], v19, v23),
                      (nw_nat64_extract_v4((unsigned int *)buf, &address->sa_data[6], (uint64_t)&v62) & 1) != 0))
                {
LABEL_23:
                  HIBYTE(v61[0]) = 2;
                  address = (const sockaddr *)v61;
                }
              }
            }
            unsigned __int16 v24 = *(_WORD *)address->sa_data;
            if (address->sa_family == 30)
            {
              long long v67 = *(_OWORD *)&address->sa_data[6];
            }
            else
            {
              int v33 = *(_DWORD *)&address->sa_data[2];
              *(void *)&long long v67 = 0;
              DWORD2(v67) = -65536;
              HIDWORD(v67) = v33;
            }
            unsigned __int16 v66 = v24;
            nw_framer_write_output(v5, output_buffer, 0x18uLL);
            inet_ntop(30, &v67, v60, 0x2Eu);
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            BOOL v34 = gLogObj;
            if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)int buf = 136447234;
              *(void *)&uint8_t buf[4] = "nw_tcpconverter_send_connect";
              *(_WORD *)&unsigned char buf[12] = 2080;
              *(void *)&buf[14] = v3 + 1;
              __int16 v54 = 2080;
              uint64_t v55 = (uint64_t)v60;
              __int16 v56 = 1024;
              unsigned int v57 = bswap32(v66) >> 16;
              __int16 v58 = 2112;
              nw_endpoint_t v59 = v9;
              _os_log_impl(&dword_1830D4000, v34, OS_LOG_TYPE_DEBUG, "%{public}s %s Sent TCP-converter connect to IP %s, port %u via proxy %@", buf, 0x30u);
            }
            *id v3 = 1;
            if (v9) {
              os_release(v9);
            }
            if (v10) {
              os_release((void *)v10);
            }
            return 2;
          }
          if (v9) {
            os_release(v9);
          }
          if (v10) {
            os_release((void *)v10);
          }
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_tcpconverter_send_connect";
          *(_WORD *)&unsigned char buf[12] = 2112;
          *(void *)&buf[14] = 0;
          __int16 v25 = (char *)_os_log_send_and_compose_impl();
          v60[0] = 16;
          output_buffer[0] = 0;
          if (__nwlog_fault(v25, v60, output_buffer))
          {
            if (v60[0] == 17)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              int v29 = gLogObj;
              os_log_type_t v30 = v60[0];
              if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v60[0])) {
                goto LABEL_67;
              }
              *(_DWORD *)int buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_tcpconverter_send_connect";
              *(_WORD *)&unsigned char buf[12] = 2112;
              *(void *)&buf[14] = 0;
              os_log_type_t v28 = "%{public}s Received incorrect endpoint-type: %@";
              goto LABEL_65;
            }
            if (!output_buffer[0])
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              int v29 = gLogObj;
              os_log_type_t v30 = v60[0];
              if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v60[0])) {
                goto LABEL_67;
              }
              *(_DWORD *)int buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_tcpconverter_send_connect";
              *(_WORD *)&unsigned char buf[12] = 2112;
              *(void *)&buf[14] = 0;
              os_log_type_t v28 = "%{public}s Received incorrect endpoint-type: %@, backtrace limit exceeded";
              goto LABEL_65;
            }
            backtrace_string = (char *)__nw_create_backtrace_string();
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            int v29 = gLogObj;
            os_log_type_t v30 = v60[0];
            BOOL v36 = os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v60[0]);
            if (backtrace_string)
            {
              if (v36)
              {
                *(_DWORD *)int buf = 136446722;
                *(void *)&uint8_t buf[4] = "nw_tcpconverter_send_connect";
                *(_WORD *)&unsigned char buf[12] = 2112;
                *(void *)&buf[14] = 0;
                __int16 v54 = 2082;
                uint64_t v55 = (uint64_t)backtrace_string;
                _os_log_impl(&dword_1830D4000, v29, v30, "%{public}s Received incorrect endpoint-type: %@, dumping backtrace:%{public}s", buf, 0x20u);
              }
              free(backtrace_string);
              if (!v25) {
                goto LABEL_69;
              }
              goto LABEL_68;
            }
            if (v36)
            {
              *(_DWORD *)int buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_tcpconverter_send_connect";
              *(_WORD *)&unsigned char buf[12] = 2112;
              *(void *)&buf[14] = 0;
              os_log_type_t v28 = "%{public}s Received incorrect endpoint-type: %@, no backtrace";
LABEL_65:
              uint64_t v37 = v29;
              os_log_type_t v38 = v30;
              goto LABEL_66;
            }
          }
LABEL_67:
          if (!v25)
          {
LABEL_69:
            nw_framer_mark_failed_with_error(v5, 22);
            return 2;
          }
LABEL_68:
          free(v25);
          goto LABEL_69;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        *(_DWORD *)int buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_tcpconverter_send_connect";
        *(_WORD *)&unsigned char buf[12] = 2112;
        *(void *)&buf[14] = v9;
        __int16 v25 = (char *)_os_log_send_and_compose_impl();
        v60[0] = 16;
        output_buffer[0] = 0;
        if (!__nwlog_fault(v25, v60, output_buffer)) {
          goto LABEL_67;
        }
        if (v60[0] == 17)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          int v26 = gLogObj;
          os_log_type_t v27 = v60[0];
          if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v60[0])) {
            goto LABEL_67;
          }
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_tcpconverter_send_connect";
          *(_WORD *)&unsigned char buf[12] = 2112;
          *(void *)&buf[14] = v9;
          os_log_type_t v28 = "%{public}s Received incorrect remote-endpoint-type: %@";
        }
        else if (output_buffer[0])
        {
          uint64_t v31 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          int v26 = gLogObj;
          os_log_type_t v27 = v60[0];
          BOOL v32 = os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v60[0]);
          if (v31)
          {
            if (v32)
            {
              *(_DWORD *)int buf = 136446722;
              *(void *)&uint8_t buf[4] = "nw_tcpconverter_send_connect";
              *(_WORD *)&unsigned char buf[12] = 2112;
              *(void *)&buf[14] = v9;
              __int16 v54 = 2082;
              uint64_t v55 = (uint64_t)v31;
              _os_log_impl(&dword_1830D4000, v26, v27, "%{public}s Received incorrect remote-endpoint-type: %@, dumping backtrace:%{public}s", buf, 0x20u);
            }
            free(v31);
            goto LABEL_67;
          }
          if (!v32) {
            goto LABEL_67;
          }
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_tcpconverter_send_connect";
          *(_WORD *)&unsigned char buf[12] = 2112;
          *(void *)&buf[14] = v9;
          os_log_type_t v28 = "%{public}s Received incorrect remote-endpoint-type: %@, no backtrace";
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          int v26 = gLogObj;
          os_log_type_t v27 = v60[0];
          if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v60[0])) {
            goto LABEL_67;
          }
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_tcpconverter_send_connect";
          *(_WORD *)&unsigned char buf[12] = 2112;
          *(void *)&buf[14] = v9;
          os_log_type_t v28 = "%{public}s Received incorrect remote-endpoint-type: %@, backtrace limit exceeded";
        }
        uint64_t v37 = v26;
        os_log_type_t v38 = v27;
LABEL_66:
        _os_log_impl(&dword_1830D4000, v37, v38, v28, buf, 0x16u);
        goto LABEL_67;
      }
      __nwlog_obj();
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_tcpconverter_send_connect";
      uint64_t v43 = (char *)_os_log_send_and_compose_impl();
      v60[0] = 16;
      output_buffer[0] = 0;
      if (__nwlog_fault(v43, v60, output_buffer))
      {
        if (v60[0] == 17)
        {
          uint64_t v44 = __nwlog_obj();
          os_log_type_t v45 = v60[0];
          if (!os_log_type_enabled(v44, (os_log_type_t)v60[0])) {
            goto LABEL_89;
          }
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_tcpconverter_send_connect";
          int v46 = "%{public}s called with null framer";
          goto LABEL_88;
        }
        if (!output_buffer[0])
        {
          uint64_t v44 = __nwlog_obj();
          os_log_type_t v45 = v60[0];
          if (!os_log_type_enabled(v44, (os_log_type_t)v60[0])) {
            goto LABEL_89;
          }
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_tcpconverter_send_connect";
          int v46 = "%{public}s called with null framer, backtrace limit exceeded";
          goto LABEL_88;
        }
        uint64_t v47 = (char *)__nw_create_backtrace_string();
        uint64_t v44 = __nwlog_obj();
        os_log_type_t v45 = v60[0];
        BOOL v48 = os_log_type_enabled(v44, (os_log_type_t)v60[0]);
        if (v47)
        {
          if (v48)
          {
            *(_DWORD *)int buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_tcpconverter_send_connect";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = v47;
            _os_log_impl(&dword_1830D4000, v44, v45, "%{public}s called with null framer, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v47);
          goto LABEL_89;
        }
        if (v48)
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_tcpconverter_send_connect";
          int v46 = "%{public}s called with null framer, no backtrace";
LABEL_88:
          _os_log_impl(&dword_1830D4000, v44, v45, v46, buf, 0xCu);
        }
      }
LABEL_89:
      if (v43) {
        free(v43);
      }
      return 2;
    }
  }
  __break(1u);
  return result;
}

void sub_183437C00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_framer_write_output(nw_framer_t framer, const uint8_t *output_buffer, size_t output_length)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  nw_framer_t v5 = framer;
  unint64_t v6 = v5;
  if (v5)
  {
    nw_context_assert_queue(v5[46].isa);
    uint64_t v7 = dispatch_data_create(output_buffer, output_length, 0, 0);
    nw_framer_write_output_data(v6, v7);

    goto LABEL_3;
  }
  int v8 = __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  os_log_type_t v19 = "nw_framer_write_output";
  nw_endpoint_t v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (__nwlog_fault(v9, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v19 = "nw_framer_write_output";
        _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null framer", buf, 0xCu);
      }
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v10 = __nwlog_obj();
      os_log_type_t v13 = type;
      BOOL v14 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)int buf = 136446466;
          os_log_type_t v19 = "nw_framer_write_output";
          __int16 v20 = 2082;
          size_t v21 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null framer, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v14)
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v19 = "nw_framer_write_output";
        _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null framer, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v10 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v19 = "nw_framer_write_output";
        _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null framer, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v9) {
    free(v9);
  }
LABEL_3:
}

void sub_183437EE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *__swift_project_boxed_opaque_existential_2(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

uint64_t nw_protocol_socket_get_send_buffer_size(_DWORD *a1)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    socklen_t v19 = 4;
    *(_DWORD *)__int16 v20 = 0;
    if (!getsockopt(a1[43], 0xFFFF, 4132, v20, &v19)) {
      return *(unsigned int *)v20;
    }
    int v2 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
    }
    id v3 = gconnectionLogObj;
    if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136446722;
      uint64_t v22 = "nw_protocol_socket_get_send_buffer_size";
      __int16 v23 = 2080;
      *(void *)unsigned __int16 v24 = a1 + 77;
      *(_WORD *)&v24[8] = 1024;
      *(_DWORD *)&v24[10] = v2;
      _os_log_impl(&dword_1830D4000, v3, OS_LOG_TYPE_ERROR, "%{public}s %s getsockopt SO_NWRITE failed %{darwin.errno}d", buf, 0x1Cu);
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)int buf = 136446466;
    uint64_t v22 = "nw_protocol_socket_get_send_buffer_size";
    __int16 v23 = 1024;
    *(_DWORD *)unsigned __int16 v24 = v2;
    id v4 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v17 = 0;
    if (__nwlog_fault(v4, &type, &v17))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        nw_framer_t v5 = gLogObj;
        os_log_type_t v6 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
          goto LABEL_21;
        }
        *(_DWORD *)int buf = 136446466;
        uint64_t v22 = "nw_protocol_socket_get_send_buffer_size";
        __int16 v23 = 1024;
        *(_DWORD *)unsigned __int16 v24 = v2;
        uint64_t v7 = "%{public}s getsockopt SO_NWRITE failed %{darwin.errno}d";
        goto LABEL_20;
      }
      if (!v17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        nw_framer_t v5 = gLogObj;
        os_log_type_t v6 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
          goto LABEL_21;
        }
        *(_DWORD *)int buf = 136446466;
        uint64_t v22 = "nw_protocol_socket_get_send_buffer_size";
        __int16 v23 = 1024;
        *(_DWORD *)unsigned __int16 v24 = v2;
        uint64_t v7 = "%{public}s getsockopt SO_NWRITE failed %{darwin.errno}d, backtrace limit exceeded";
        goto LABEL_20;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      nw_framer_t v5 = gLogObj;
      os_log_type_t v6 = type;
      BOOL v9 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)int buf = 136446722;
          uint64_t v22 = "nw_protocol_socket_get_send_buffer_size";
          __int16 v23 = 1024;
          *(_DWORD *)unsigned __int16 v24 = v2;
          *(_WORD *)&v24[4] = 2082;
          *(void *)&v24[6] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s getsockopt SO_NWRITE failed %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x1Cu);
        }
        free(backtrace_string);
        goto LABEL_21;
      }
      if (v9)
      {
        *(_DWORD *)int buf = 136446466;
        uint64_t v22 = "nw_protocol_socket_get_send_buffer_size";
        __int16 v23 = 1024;
        *(_DWORD *)unsigned __int16 v24 = v2;
        uint64_t v7 = "%{public}s getsockopt SO_NWRITE failed %{darwin.errno}d, no backtrace";
LABEL_20:
        _os_log_impl(&dword_1830D4000, v5, v6, v7, buf, 0x12u);
      }
    }
LABEL_21:
    if (v4) {
      free(v4);
    }
    return *(unsigned int *)v20;
  }
  __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  uint64_t v22 = "nw_protocol_socket_get_send_buffer_size";
  os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();
  v20[0] = OS_LOG_TYPE_ERROR;
  LOBYTE(v19) = 0;
  if (__nwlog_fault(v11, v20, &v19))
  {
    if (v20[0] == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v13 = v20[0];
      if (os_log_type_enabled(v12, v20[0]))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v22 = "nw_protocol_socket_get_send_buffer_size";
        BOOL v14 = "%{public}s called with null handle";
LABEL_37:
        _os_log_impl(&dword_1830D4000, v12, v13, v14, buf, 0xCu);
      }
    }
    else if ((_BYTE)v19)
    {
      os_log_type_t v15 = (char *)__nw_create_backtrace_string();
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v13 = v20[0];
      BOOL v16 = os_log_type_enabled(v12, v20[0]);
      if (v15)
      {
        if (v16)
        {
          *(_DWORD *)int buf = 136446466;
          uint64_t v22 = "nw_protocol_socket_get_send_buffer_size";
          __int16 v23 = 2082;
          *(void *)unsigned __int16 v24 = v15;
          _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s called with null handle, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v15);
        goto LABEL_38;
      }
      if (v16)
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v22 = "nw_protocol_socket_get_send_buffer_size";
        BOOL v14 = "%{public}s called with null handle, no backtrace";
        goto LABEL_37;
      }
    }
    else
    {
      os_log_type_t v12 = __nwlog_obj();
      os_log_type_t v13 = v20[0];
      if (os_log_type_enabled(v12, v20[0]))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v22 = "nw_protocol_socket_get_send_buffer_size";
        BOOL v14 = "%{public}s called with null handle, backtrace limit exceeded";
        goto LABEL_37;
      }
    }
  }
LABEL_38:
  if (v11) {
    free(v11);
  }
  return 0;
}

uint64_t nw_protocol_recorder_get_input_frames(nw_protocol *a1, nw_protocol *a2, unsigned int a3, unsigned int a4, unsigned int a5, nw_frame_array_s *a6)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t handle = a1->handle;
    if (handle)
    {
      uint64_t v8 = (*(uint64_t (**)(void))(*(void *)(handle[4] + 24) + 80))();
      v21[0] = MEMORY[0x1E4F143A8];
      v21[1] = 0x40000000;
      uint64_t v22 = ___ZL37nw_protocol_recorder_get_input_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke;
      __int16 v23 = &__block_descriptor_tmp_14_66572;
      unsigned __int16 v24 = handle;
      tqh_first = a6->tqh_first;
      do
      {
        if (!tqh_first) {
          break;
        }
        BOOL v10 = (nw_frame *)*((void *)tqh_first + 4);
        char v11 = ((uint64_t (*)(void *))v22)(v21);
        tqh_first = v10;
      }
      while ((v11 & 1) != 0);
      return v8;
    }
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v28 = "nw_protocol_recorder_get_input_frames";
    os_log_type_t v13 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v26 = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (!__nwlog_fault(v13, &v26, &v25)) {
      goto LABEL_34;
    }
    if (v26 == OS_LOG_TYPE_FAULT)
    {
      BOOL v14 = __nwlog_obj();
      os_log_type_t v15 = v26;
      if (os_log_type_enabled(v14, v26))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v28 = "nw_protocol_recorder_get_input_frames";
        BOOL v16 = "%{public}s called with null recorder";
        goto LABEL_33;
      }
      goto LABEL_34;
    }
    if (!v25)
    {
      BOOL v14 = __nwlog_obj();
      os_log_type_t v15 = v26;
      if (os_log_type_enabled(v14, v26))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v28 = "nw_protocol_recorder_get_input_frames";
        BOOL v16 = "%{public}s called with null recorder, backtrace limit exceeded";
        goto LABEL_33;
      }
      goto LABEL_34;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v14 = __nwlog_obj();
    os_log_type_t v15 = v26;
    BOOL v20 = os_log_type_enabled(v14, v26);
    if (!backtrace_string)
    {
      if (v20)
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v28 = "nw_protocol_recorder_get_input_frames";
        BOOL v16 = "%{public}s called with null recorder, no backtrace";
        goto LABEL_33;
      }
      goto LABEL_34;
    }
    if (v20)
    {
      *(_DWORD *)int buf = 136446466;
      os_log_type_t v28 = "nw_protocol_recorder_get_input_frames";
      __int16 v29 = 2082;
      os_log_type_t v30 = backtrace_string;
      socklen_t v19 = "%{public}s called with null recorder, dumping backtrace:%{public}s";
      goto LABEL_23;
    }
    goto LABEL_24;
  }
  __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  os_log_type_t v28 = "nw_protocol_recorder_get_input_frames";
  os_log_type_t v13 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t v26 = OS_LOG_TYPE_ERROR;
  char v25 = 0;
  if (!__nwlog_fault(v13, &v26, &v25)) {
    goto LABEL_34;
  }
  if (v26 != OS_LOG_TYPE_FAULT)
  {
    if (!v25)
    {
      BOOL v14 = __nwlog_obj();
      os_log_type_t v15 = v26;
      if (os_log_type_enabled(v14, v26))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v28 = "nw_protocol_recorder_get_input_frames";
        BOOL v16 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_33;
      }
      goto LABEL_34;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v14 = __nwlog_obj();
    os_log_type_t v15 = v26;
    BOOL v18 = os_log_type_enabled(v14, v26);
    if (!backtrace_string)
    {
      if (v18)
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v28 = "nw_protocol_recorder_get_input_frames";
        BOOL v16 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_33;
      }
      goto LABEL_34;
    }
    if (v18)
    {
      *(_DWORD *)int buf = 136446466;
      os_log_type_t v28 = "nw_protocol_recorder_get_input_frames";
      __int16 v29 = 2082;
      os_log_type_t v30 = backtrace_string;
      socklen_t v19 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_23:
      _os_log_impl(&dword_1830D4000, v14, v15, v19, buf, 0x16u);
    }
LABEL_24:
    free(backtrace_string);
    goto LABEL_34;
  }
  BOOL v14 = __nwlog_obj();
  os_log_type_t v15 = v26;
  if (os_log_type_enabled(v14, v26))
  {
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v28 = "nw_protocol_recorder_get_input_frames";
    BOOL v16 = "%{public}s called with null protocol";
LABEL_33:
    _os_log_impl(&dword_1830D4000, v14, v15, v16, buf, 0xCu);
  }
LABEL_34:
  if (v13) {
    free(v13);
  }
  return 0;
}

void ___ZL51nw_socks5_connection_outer_connection_read_on_queueP31NWConcrete_nw_socks5_connection_block_invoke_165(uint64_t a1, void *a2)
{
  v43[2] = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  nw_socks5_connection_decrement_busy_on_queue(*(void **)(a1 + 32), *(void **)(a1 + 40));
  uint64_t v4 = *(void *)(a1 + 32);
  if (*(unsigned __int8 *)(v4 + 56) == 255) {
    goto LABEL_26;
  }
  if (v3)
  {
    nw_framer_t v5 = v3;
    int v6 = v5[3];

    if (*(char *)(*(void *)(a1 + 32) + 160) < 0 && v6 == 55)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v7 = (id)gLogObj;
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v8 = *(void *)(a1 + 32);
        *(_DWORD *)int buf = 136446722;
        uint64_t v39 = "nw_socks5_connection_outer_connection_read_on_queue_block_invoke";
        __int16 v40 = 2114;
        uint64_t v41 = v8;
        __int16 v42 = 2112;
        v43[0] = v5;
        _os_log_impl(&dword_1830D4000, v7, OS_LOG_TYPE_DEBUG, "%{public}s %{public}@ ignoring write in error %@", buf, 0x20u);
      }

      nw_socks5_connection_outer_connection_read_on_queue(*(NWConcrete_nw_socks5_connection **)(a1 + 32));
      goto LABEL_26;
    }
    if ((v6 - 6) <= 0x3B && ((1 << (v6 - 6)) & 0x8C9B80004000001) != 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      socklen_t v19 = (id)gLogObj;
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        uint64_t v20 = *(void *)(a1 + 32);
        *(_DWORD *)int buf = 136446722;
        uint64_t v39 = "nw_socks5_connection_outer_connection_read_on_queue_block_invoke";
        __int16 v40 = 2114;
        uint64_t v41 = v20;
        __int16 v42 = 1024;
        LODWORD(v43[0]) = v6;
        _os_log_impl(&dword_1830D4000, v19, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ write in error %{darwin.errno}d", buf, 0x1Cu);
      }

LABEL_22:
      nw_socks5_connection_cancel_on_queue(*(void **)(a1 + 32), 0);
      goto LABEL_26;
    }
    size_t v21 = __nwlog_obj();
    uint64_t v22 = *(void *)(a1 + 32);
    *(_DWORD *)int buf = 136446722;
    uint64_t v39 = "nw_socks5_connection_outer_connection_read_on_queue_block_invoke";
    __int16 v40 = 2114;
    uint64_t v41 = v22;
    __int16 v42 = 1024;
    LODWORD(v43[0]) = v6;
    __int16 v23 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v36 = 0;
    if (__nwlog_fault(v23, &type, &v36))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        unsigned __int16 v24 = __nwlog_obj();
        os_log_type_t v25 = type;
        if (os_log_type_enabled(v24, type))
        {
          uint64_t v26 = *(void *)(a1 + 32);
          *(_DWORD *)int buf = 136446722;
          uint64_t v39 = "nw_socks5_connection_outer_connection_read_on_queue_block_invoke";
          __int16 v40 = 2114;
          uint64_t v41 = v26;
          __int16 v42 = 1024;
          LODWORD(v43[0]) = v6;
          _os_log_impl(&dword_1830D4000, v24, v25, "%{public}s %{public}@ write in error %{darwin.errno}d", buf, 0x1Cu);
        }
      }
      else if (v36)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        unsigned __int16 v24 = __nwlog_obj();
        os_log_type_t v28 = type;
        BOOL v29 = os_log_type_enabled(v24, type);
        if (backtrace_string)
        {
          if (v29)
          {
            uint64_t v30 = *(void *)(a1 + 32);
            *(_DWORD *)int buf = 136446978;
            uint64_t v39 = "nw_socks5_connection_outer_connection_read_on_queue_block_invoke";
            __int16 v40 = 2114;
            uint64_t v41 = v30;
            __int16 v42 = 1024;
            LODWORD(v43[0]) = v6;
            WORD2(v43[0]) = 2082;
            *(void *)((char *)v43 + 6) = backtrace_string;
            _os_log_impl(&dword_1830D4000, v24, v28, "%{public}s %{public}@ write in error %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x26u);
          }

          free(backtrace_string);
          goto LABEL_43;
        }
        if (v29)
        {
          uint64_t v33 = *(void *)(a1 + 32);
          *(_DWORD *)int buf = 136446722;
          uint64_t v39 = "nw_socks5_connection_outer_connection_read_on_queue_block_invoke";
          __int16 v40 = 2114;
          uint64_t v41 = v33;
          __int16 v42 = 1024;
          LODWORD(v43[0]) = v6;
          _os_log_impl(&dword_1830D4000, v24, v28, "%{public}s %{public}@ write in error %{darwin.errno}d, no backtrace", buf, 0x1Cu);
        }
      }
      else
      {
        unsigned __int16 v24 = __nwlog_obj();
        os_log_type_t v31 = type;
        if (os_log_type_enabled(v24, type))
        {
          uint64_t v32 = *(void *)(a1 + 32);
          *(_DWORD *)int buf = 136446722;
          uint64_t v39 = "nw_socks5_connection_outer_connection_read_on_queue_block_invoke";
          __int16 v40 = 2114;
          uint64_t v41 = v32;
          __int16 v42 = 1024;
          LODWORD(v43[0]) = v6;
          _os_log_impl(&dword_1830D4000, v24, v31, "%{public}s %{public}@ write in error %{darwin.errno}d, backtrace limit exceeded", buf, 0x1Cu);
        }
      }
    }
LABEL_43:
    if (v23) {
      free(v23);
    }
    goto LABEL_22;
  }
  if (*(unsigned char *)(a1 + 56))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v9 = (id)gLogObj;
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_12;
    }
    uint64_t v10 = *(void *)(a1 + 32);
    uint64_t v11 = *(void *)(a1 + 48);
    *(_DWORD *)int buf = 136446722;
    uint64_t v39 = "nw_socks5_connection_outer_connection_read_on_queue_block_invoke";
    __int16 v40 = 2114;
    uint64_t v41 = v10;
    __int16 v42 = 2048;
    v43[0] = v11;
    os_log_type_t v12 = "%{public}s %{public}@ wrote %zu bytes is_complete into inner connection";
    os_log_type_t v13 = v9;
    os_log_type_t v14 = OS_LOG_TYPE_DEFAULT;
    goto LABEL_11;
  }
  if (!gLogDatapath)
  {
    *(void *)(v4 + 208) += *(void *)(a1 + 48);
    uint64_t v16 = *(void *)(a1 + 32);
    goto LABEL_25;
  }
  BOOL v9 = __nwlog_obj();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v34 = *(void *)(a1 + 32);
    uint64_t v35 = *(void *)(a1 + 48);
    *(_DWORD *)int buf = 136446722;
    uint64_t v39 = "nw_socks5_connection_outer_connection_read_on_queue_block_invoke";
    __int16 v40 = 2114;
    uint64_t v41 = v34;
    __int16 v42 = 2048;
    v43[0] = v35;
    os_log_type_t v12 = "%{public}s %{public}@ wrote %zu bytes not_complete into inner connection";
    os_log_type_t v13 = v9;
    os_log_type_t v14 = OS_LOG_TYPE_DEBUG;
LABEL_11:
    _os_log_impl(&dword_1830D4000, v13, v14, v12, buf, 0x20u);
  }
LABEL_12:

  int v15 = *(unsigned __int8 *)(a1 + 56);
  *(void *)(*(void *)(a1 + 32) + 208) += *(void *)(a1 + 48);
  uint64_t v16 = *(void *)(a1 + 32);
  if (!v15)
  {
LABEL_25:
    nw_socks5_connection_outer_connection_read_on_queue((NWConcrete_nw_socks5_connection *)v16);
    goto LABEL_26;
  }
  *(unsigned char *)(v16 + 160) |= 2u;
  char v17 = *(unsigned __int8 **)(a1 + 32);
  if ((~v17[160] & 3) == 0) {
    nw_socks5_connection_cancel_on_queue(v17, 0);
  }
LABEL_26:
}

void sub_183438F1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __nw_agent_create_block_invoke_2(uint64_t a1)
{
  WeakRetained = (NWConcrete_nw_agent *)objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained && *((void *)WeakRetained + 106) == *(void *)(a1 + 32))
  {
    while (nw_agent_read_message_on_queue(WeakRetained))
      ;
  }
}

void sub_1834392F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

BOOL nw_agent_read_message_on_queue(NWConcrete_nw_agent *a1)
{
  uint64_t v432 = *MEMORY[0x1E4F143B8];
  os_log_type_t v313 = a1;
  dispatch_assert_queue_V2(*((dispatch_queue_t *)v313 + 27));
  uint64_t v416 = 0;
  uint64_t v417 = &v416;
  uint64_t v418 = 0x2020000000;
  uint64_t v419 = 0;
  id v1 = (void *)*((void *)v313 + 105);
  v415[0] = MEMORY[0x1E4F143A8];
  v415[1] = 3221225472;
  v415[2] = ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke;
  v415[3] = &unk_1E524A270;
  v415[4] = &v416;
  nw_fd_wrapper_get_fd(v1, v415);
  int v2 = (unsigned char *)v417[3];
  if (!v2)
  {
    BOOL v311 = 0;
    goto LABEL_507;
  }
  if (*v2 == 25)
  {
    *(void *)out = 0;
    *(void *)&out[8] = out;
    *(void *)&out[16] = 0x3032000000;
    *(void *)&out[24] = __Block_byref_object_copy__80774;
    *(void *)&out[32] = __Block_byref_object_dispose__80775;
    *(void *)&out[40] = 0;
    v412[0] = MEMORY[0x1E4F143A8];
    v412[1] = 3221225472;
    v412[2] = ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke_160;
    v412[3] = &unk_1E524B978;
    v414 = out;
    BOOL v413 = v313;
    id v3 = v413 + 2;
    os_unfair_lock_lock(v413 + 2);
    ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke_160((uint64_t)v412);
    os_unfair_lock_unlock(v3);
    uint64_t v4 = *(void *)(*(void *)&out[8] + 40);
    if (v4)
    {
      (*(void (**)(void))(v4 + 16))();
LABEL_170:
      BOOL v82 = (void *)v417[3];
      if (v82)
      {
        free(v82);
        v417[3] = 0;
      }

      _Block_object_dispose(out, 8);
      BOOL v311 = 1;
      goto LABEL_507;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v10 = (id)gLogObj;
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_agent_read_message_on_queue";
    uint64_t v11 = (char *)_os_log_send_and_compose_impl();

    v428[0] = 16;
    LOBYTE(uu) = 0;
    if (__nwlog_fault(v11, v428, &uu))
    {
      if (v428[0] == 17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v12 = (id)gLogObj;
        os_log_type_t v13 = v428[0];
        if (os_log_type_enabled(v12, (os_log_type_t)v428[0]))
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_agent_read_message_on_queue";
          _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s No handler for TOKENS_NEEDED", buf, 0xCu);
        }
      }
      else if ((_BYTE)uu)
      {
        backtrace_string = __nw_create_backtrace_string();
        if (backtrace_string)
        {
          uint64_t v20 = (char *)backtrace_string;
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          size_t v21 = (id)gLogObj;
          os_log_type_t v22 = v428[0];
          if (os_log_type_enabled(v21, (os_log_type_t)v428[0]))
          {
            *(_DWORD *)int buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_agent_read_message_on_queue";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = v20;
            _os_log_impl(&dword_1830D4000, v21, v22, "%{public}s No handler for TOKENS_NEEDED, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v20);
          if (!v11) {
            goto LABEL_170;
          }
          goto LABEL_169;
        }
        os_log_type_t v12 = __nwlog_obj();
        os_log_type_t v81 = v428[0];
        if (os_log_type_enabled(v12, (os_log_type_t)v428[0]))
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_agent_read_message_on_queue";
          _os_log_impl(&dword_1830D4000, v12, v81, "%{public}s No handler for TOKENS_NEEDED, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v12 = (id)gLogObj;
        os_log_type_t v75 = v428[0];
        if (os_log_type_enabled(v12, (os_log_type_t)v428[0]))
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_agent_read_message_on_queue";
          _os_log_impl(&dword_1830D4000, v12, v75, "%{public}s No handler for TOKENS_NEEDED, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
    if (!v11) {
      goto LABEL_170;
    }
LABEL_169:
    free(v11);
    goto LABEL_170;
  }
  *(void *)int buf = 0;
  *(void *)&buf[8] = buf;
  *(void *)&buf[16] = 0x3032000000;
  nw_endpoint_t v424 = __Block_byref_object_copy__161;
  v425 = __Block_byref_object_dispose__162;
  id v426 = 0;
  v407[0] = MEMORY[0x1E4F143A8];
  v407[1] = 3221225472;
  uint64_t v408 = ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke_163;
  int v409 = &unk_1E524B978;
  int v411 = buf;
  id v410 = v313;
  nw_framer_t v5 = v410;
  int v6 = v407;
  uint64_t v312 = v5;
  os_unfair_lock_lock((os_unfair_lock_t)v5 + 2);
  v408((uint64_t)v6);
  lock = (os_unfair_lock_s *)((char *)v5 + 8);
  os_unfair_lock_unlock((os_unfair_lock_t)v5 + 2);

  if (!*(void *)(*(void *)&buf[8] + 40))
  {
    if (nw_context_copy_implicit_context::onceToken != -1) {
      dispatch_once(&nw_context_copy_implicit_context::onceToken, &__block_literal_global_18);
    }
    objc_storeStrong((id *)(*(void *)&buf[8] + 40), (id)nw_context_copy_implicit_context::implicit_context);
  }
  long long uu = 0uLL;
  uint64_t v7 = (unsigned __int8 *)v417[3];
  if (!v7)
  {
    int v90 = __nwlog_obj();
    *(_DWORD *)out = 136446210;
    *(void *)&out[4] = "nw_agent_get_uuid_for_message";
    int v91 = (char *)_os_log_send_and_compose_impl();

    v428[0] = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v91, v428, &type))
    {
      if (v428[0] == 17)
      {
        id v92 = __nwlog_obj();
        os_log_type_t v93 = v428[0];
        if (os_log_type_enabled(v92, (os_log_type_t)v428[0]))
        {
          *(_DWORD *)out = 136446210;
          *(void *)&out[4] = "nw_agent_get_uuid_for_message";
          _os_log_impl(&dword_1830D4000, v92, v93, "%{public}s called with null message", out, 0xCu);
        }
      }
      else if (type)
      {
        int v98 = (char *)__nw_create_backtrace_string();
        id v92 = __nwlog_obj();
        os_log_type_t v99 = v428[0];
        BOOL v100 = os_log_type_enabled(v92, (os_log_type_t)v428[0]);
        if (v98)
        {
          if (v100)
          {
            *(_DWORD *)out = 136446466;
            *(void *)&out[4] = "nw_agent_get_uuid_for_message";
            *(_WORD *)&out[12] = 2082;
            *(void *)&out[14] = v98;
            _os_log_impl(&dword_1830D4000, v92, v99, "%{public}s called with null message, dumping backtrace:%{public}s", out, 0x16u);
          }

          free(v98);
          goto LABEL_230;
        }
        if (v100)
        {
          *(_DWORD *)out = 136446210;
          *(void *)&out[4] = "nw_agent_get_uuid_for_message";
          _os_log_impl(&dword_1830D4000, v92, v99, "%{public}s called with null message, no backtrace", out, 0xCu);
        }
      }
      else
      {
        id v92 = __nwlog_obj();
        os_log_type_t v109 = v428[0];
        if (os_log_type_enabled(v92, (os_log_type_t)v428[0]))
        {
          *(_DWORD *)out = 136446210;
          *(void *)&out[4] = "nw_agent_get_uuid_for_message";
          _os_log_impl(&dword_1830D4000, v92, v109, "%{public}s called with null message, backtrace limit exceeded", out, 0xCu);
        }
      }
    }
LABEL_230:
    if (v91) {
      free(v91);
    }
    goto LABEL_14;
  }
  unsigned int v8 = *v7;
  if (v8 > 0x1A || ((1 << v8) & 0x40CF400) == 0 || (BOOL v9 = (long long *)(v7 + 16), uuid_is_null(v7 + 16)))
  {
LABEL_14:
    v310 = nw_agent_client_create((unsigned __int8 *)v417[3], v5, *(void **)(*(void *)&buf[8] + 40));
    goto LABEL_36;
  }
  long long uu = *v9;
  memset(out, 0, 37);
  uuid_unparse((const unsigned __int8 *)&uu, out);
  os_log_type_t v14 = (NWConcrete_nw_agent_client *)nw_dictionary_copy_value(*((void *)v5 + 92), (uint64_t)out);
  int v15 = (unsigned __int8 *)v417[3];
  v310 = v14;
  if (v14)
  {
    if (v15)
    {
      int v16 = *v15;
      if (v16 == 15 || v16 == 12)
      {
        uint64_t v17 = *((void *)v5 + 92);
        BOOL v18 = 0;
LABEL_35:
        nw_dictionary_set_value(v17, out, v18);
        goto LABEL_36;
      }
      goto LABEL_36;
    }
    uint64_t v105 = __nwlog_obj();
    *(_DWORD *)id v428 = 136446210;
    char v429 = "nw_agent_should_remove_client_for_message";
    int v106 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v420 = 0;
    if (!__nwlog_fault(v106, &type, &v420)) {
      goto LABEL_589;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v107 = __nwlog_obj();
      os_log_type_t v108 = type;
      if (os_log_type_enabled(v107, type))
      {
        *(_DWORD *)id v428 = 136446210;
        char v429 = "nw_agent_should_remove_client_for_message";
        _os_log_impl(&dword_1830D4000, v107, v108, "%{public}s called with null message", v428, 0xCu);
      }
LABEL_341:

      goto LABEL_589;
    }
    if (!v420)
    {
      int v107 = __nwlog_obj();
      os_log_type_t v168 = type;
      if (os_log_type_enabled(v107, type))
      {
        *(_DWORD *)id v428 = 136446210;
        char v429 = "nw_agent_should_remove_client_for_message";
        _os_log_impl(&dword_1830D4000, v107, v168, "%{public}s called with null message, backtrace limit exceeded", v428, 0xCu);
      }
      goto LABEL_341;
    }
    int v113 = (char *)__nw_create_backtrace_string();
    uint64_t v114 = __nwlog_obj();
    os_log_type_t v115 = type;
    BOOL v116 = os_log_type_enabled(v114, type);
    if (v113)
    {
      if (v116)
      {
        *(_DWORD *)id v428 = 136446466;
        char v429 = "nw_agent_should_remove_client_for_message";
        __int16 v430 = 2082;
        uint64_t v431 = v113;
        _os_log_impl(&dword_1830D4000, v114, v115, "%{public}s called with null message, dumping backtrace:%{public}s", v428, 0x16u);
      }

      free(v113);
      if (!v106) {
        goto LABEL_36;
      }
LABEL_590:
      free(v106);
      goto LABEL_36;
    }
    if (v116)
    {
      *(_DWORD *)id v428 = 136446210;
      char v429 = "nw_agent_should_remove_client_for_message";
      _os_log_impl(&dword_1830D4000, v114, v115, "%{public}s called with null message, no backtrace", v428, 0xCu);
    }
    goto LABEL_588;
  }
  v310 = nw_agent_client_create(v15, v5, *(void **)(*(void *)&buf[8] + 40));
  __int16 v23 = (unsigned __int8 *)v417[3];
  if (!v23)
  {
    BOOL v110 = __nwlog_obj();
    *(_DWORD *)id v428 = 136446210;
    char v429 = "nw_agent_should_add_client_for_message";
    int v106 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v420 = 0;
    if (!__nwlog_fault(v106, &type, &v420)) {
      goto LABEL_589;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v107 = __nwlog_obj();
      os_log_type_t v111 = type;
      if (os_log_type_enabled(v107, type))
      {
        *(_DWORD *)id v428 = 136446210;
        char v429 = "nw_agent_should_add_client_for_message";
        _os_log_impl(&dword_1830D4000, v107, v111, "%{public}s called with null message", v428, 0xCu);
      }
      goto LABEL_341;
    }
    if (!v420)
    {
      int v107 = __nwlog_obj();
      os_log_type_t v170 = type;
      if (os_log_type_enabled(v107, type))
      {
        *(_DWORD *)id v428 = 136446210;
        char v429 = "nw_agent_should_add_client_for_message";
        _os_log_impl(&dword_1830D4000, v107, v170, "%{public}s called with null message, backtrace limit exceeded", v428, 0xCu);
      }
      goto LABEL_341;
    }
    id v165 = (char *)__nw_create_backtrace_string();
    uint64_t v114 = __nwlog_obj();
    os_log_type_t v166 = type;
    BOOL v167 = os_log_type_enabled(v114, type);
    if (v165)
    {
      if (v167)
      {
        *(_DWORD *)id v428 = 136446466;
        char v429 = "nw_agent_should_add_client_for_message";
        __int16 v430 = 2082;
        uint64_t v431 = v165;
        _os_log_impl(&dword_1830D4000, v114, v166, "%{public}s called with null message, dumping backtrace:%{public}s", v428, 0x16u);
      }

      free(v165);
LABEL_589:
      if (!v106) {
        goto LABEL_36;
      }
      goto LABEL_590;
    }
    if (v167)
    {
      *(_DWORD *)id v428 = 136446210;
      char v429 = "nw_agent_should_add_client_for_message";
      _os_log_impl(&dword_1830D4000, v114, v166, "%{public}s called with null message, no backtrace", v428, 0xCu);
    }
LABEL_588:

    goto LABEL_589;
  }
  unsigned int v24 = *v23;
  if (v24 <= 0x12 && ((1 << v24) & 0x44400) != 0)
  {
    uint64_t v17 = *((void *)v5 + 92);
    BOOL v18 = v310;
    goto LABEL_35;
  }
LABEL_36:
  BOOL v311 = v310 != 0;
  if (!v310)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v30 = (id)gLogObj;
    *(_DWORD *)out = 136446210;
    *(void *)&out[4] = "nw_agent_read_message_on_queue";
    os_log_type_t v31 = (void *)_os_log_send_and_compose_impl();

    v428[0] = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault((const char *)v31, v428, &type))
    {
      if (v428[0] == 17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v32 = (id)gLogObj;
        os_log_type_t v33 = v428[0];
        if (os_log_type_enabled(v32, (os_log_type_t)v428[0]))
        {
          *(_DWORD *)out = 136446210;
          *(void *)&out[4] = "nw_agent_read_message_on_queue";
          _os_log_impl(&dword_1830D4000, v32, v33, "%{public}s Failed to create agent client", out, 0xCu);
        }
      }
      else if (type)
      {
        os_log_type_t v71 = __nw_create_backtrace_string();
        if (v71)
        {
          BOOL v72 = (char *)v71;
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          id v73 = (id)gLogObj;
          os_log_type_t v74 = v428[0];
          if (os_log_type_enabled(v73, (os_log_type_t)v428[0]))
          {
            *(_DWORD *)out = 136446466;
            *(void *)&out[4] = "nw_agent_read_message_on_queue";
            *(_WORD *)&out[12] = 2082;
            *(void *)&out[14] = v72;
            _os_log_impl(&dword_1830D4000, v73, v74, "%{public}s Failed to create agent client, dumping backtrace:%{public}s", out, 0x16u);
          }

          free(v72);
          if (!v31) {
            goto LABEL_178;
          }
LABEL_177:
          free(v31);
LABEL_178:
          uint64_t v84 = (void *)v417[3];
          if (v84)
          {
            free(v84);
            v417[3] = 0;
          }
          goto LABEL_506;
        }
        uint64_t v32 = __nwlog_obj();
        os_log_type_t v83 = v428[0];
        if (os_log_type_enabled(v32, (os_log_type_t)v428[0]))
        {
          *(_DWORD *)out = 136446210;
          *(void *)&out[4] = "nw_agent_read_message_on_queue";
          _os_log_impl(&dword_1830D4000, v32, v83, "%{public}s Failed to create agent client, no backtrace", out, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v32 = (id)gLogObj;
        os_log_type_t v76 = v428[0];
        if (os_log_type_enabled(v32, (os_log_type_t)v428[0]))
        {
          *(_DWORD *)out = 136446210;
          *(void *)&out[4] = "nw_agent_read_message_on_queue";
          _os_log_impl(&dword_1830D4000, v32, v76, "%{public}s Failed to create agent client, backtrace limit exceeded", out, 0xCu);
        }
      }
    }
    if (!v31) {
      goto LABEL_178;
    }
    goto LABEL_177;
  }
  uint64_t v25 = v417[3];
  if (!v25)
  {
    int v94 = __nwlog_obj();
    *(_DWORD *)out = 136446210;
    *(void *)&out[4] = "nw_agent_copy_group_members_for_message";
    int v95 = (char *)_os_log_send_and_compose_impl();

    v428[0] = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v95, v428, &type))
    {
      if (v428[0] == 17)
      {
        uint64_t v96 = __nwlog_obj();
        os_log_type_t v97 = v428[0];
        if (os_log_type_enabled(v96, (os_log_type_t)v428[0]))
        {
          *(_DWORD *)out = 136446210;
          *(void *)&out[4] = "nw_agent_copy_group_members_for_message";
          _os_log_impl(&dword_1830D4000, v96, v97, "%{public}s called with null message", out, 0xCu);
        }
      }
      else
      {
        if (type)
        {
          uint64_t v101 = (char *)__nw_create_backtrace_string();
          int v102 = __nwlog_obj();
          os_log_type_t v103 = v428[0];
          BOOL v104 = os_log_type_enabled(v102, (os_log_type_t)v428[0]);
          if (v101)
          {
            if (v104)
            {
              *(_DWORD *)out = 136446466;
              *(void *)&out[4] = "nw_agent_copy_group_members_for_message";
              *(_WORD *)&out[12] = 2082;
              *(void *)&out[14] = v101;
              _os_log_impl(&dword_1830D4000, v102, v103, "%{public}s called with null message, dumping backtrace:%{public}s", out, 0x16u);
            }

            free(v101);
          }
          else
          {
            if (v104)
            {
              *(_DWORD *)out = 136446210;
              *(void *)&out[4] = "nw_agent_copy_group_members_for_message";
              _os_log_impl(&dword_1830D4000, v102, v103, "%{public}s called with null message, no backtrace", out, 0xCu);
            }
          }
          goto LABEL_244;
        }
        uint64_t v96 = __nwlog_obj();
        os_log_type_t v112 = v428[0];
        if (os_log_type_enabled(v96, (os_log_type_t)v428[0]))
        {
          *(_DWORD *)out = 136446210;
          *(void *)&out[4] = "nw_agent_copy_group_members_for_message";
          _os_log_impl(&dword_1830D4000, v96, v112, "%{public}s called with null message, backtrace limit exceeded", out, 0xCu);
        }
      }
    }
LABEL_244:
    if (v95) {
      free(v95);
    }
    goto LABEL_246;
  }
  if (*(_DWORD *)(v25 + 12) < 0x13u || (*(unsigned char *)v25 & 0xFE) != 0x12)
  {
LABEL_246:
    BOOL v308 = 0;
    goto LABEL_247;
  }
  BOOL v308 = nw_array_create();
  unint64_t v26 = (*(_DWORD *)(v25 + 12) - 18);
  unint64_t v27 = v26 - 5;
  if (v26 == 5) {
    goto LABEL_247;
  }
  nw_endpoint_t v28 = 0;
  unint64_t v29 = 0;
  uint64_t v306 = v25 + 34;
  uint64_t v305 = v25 + 39;
  uint64_t v307 = v25 + 35;
  while (1)
  {
    if (v26 < 5 || v27 < v29)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v38 = (id)gLogObj;
      *(_DWORD *)out = 136446722;
      *(void *)&out[4] = "nw_necp_buffer_get_tlv_value";
      *(_WORD *)&out[12] = 2048;
      *(void *)&out[14] = v29;
      *(_WORD *)&out[22] = 2048;
      *(void *)&out[24] = v26;
      uint64_t v39 = (char *)_os_log_send_and_compose_impl();

      v428[0] = 16;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      if (!__nwlog_fault(v39, v428, &type)) {
        goto LABEL_81;
      }
      if (v428[0] == 17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        __int16 v40 = (id)gLogObj;
        os_log_type_t v41 = v428[0];
        if (os_log_type_enabled(v40, (os_log_type_t)v428[0]))
        {
          *(_DWORD *)out = 136446722;
          *(void *)&out[4] = "nw_necp_buffer_get_tlv_value";
          *(_WORD *)&out[12] = 2048;
          *(void *)&out[14] = v29;
          *(_WORD *)&out[22] = 2048;
          *(void *)&out[24] = v26;
          _os_log_impl(&dword_1830D4000, v40, v41, "%{public}s buffer too short tlv_offset=%zu buffer_length=%zu", out, 0x20u);
        }
      }
      else
      {
        if (type)
        {
          uint64_t v43 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v44 = (id)gLogObj;
          os_log_type_t v45 = v428[0];
          BOOL v46 = os_log_type_enabled(v44, (os_log_type_t)v428[0]);
          if (v43)
          {
            if (v46)
            {
              *(_DWORD *)out = 136446978;
              *(void *)&out[4] = "nw_necp_buffer_get_tlv_value";
              *(_WORD *)&out[12] = 2048;
              *(void *)&out[14] = v29;
              *(_WORD *)&out[22] = 2048;
              *(void *)&out[24] = v26;
              *(_WORD *)&out[32] = 2082;
              *(void *)&out[34] = v43;
              _os_log_impl(&dword_1830D4000, v44, v45, "%{public}s buffer too short tlv_offset=%zu buffer_length=%zu, dumping backtrace:%{public}s", out, 0x2Au);
            }

            free(v43);
            if (!v39) {
              goto LABEL_83;
            }
            goto LABEL_82;
          }
          if (v46)
          {
            *(_DWORD *)out = 136446722;
            *(void *)&out[4] = "nw_necp_buffer_get_tlv_value";
            *(_WORD *)&out[12] = 2048;
            *(void *)&out[14] = v29;
            *(_WORD *)&out[22] = 2048;
            *(void *)&out[24] = v26;
            _os_log_impl(&dword_1830D4000, v44, v45, "%{public}s buffer too short tlv_offset=%zu buffer_length=%zu, no backtrace", out, 0x20u);
          }

LABEL_81:
          if (!v39)
          {
LABEL_83:
            int v42 = 0;
            size_t v52 = 0;
            uint64_t v53 = 0;
            goto LABEL_120;
          }
LABEL_82:
          free(v39);
          goto LABEL_83;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        __int16 v40 = (id)gLogObj;
        os_log_type_t v51 = v428[0];
        if (os_log_type_enabled(v40, (os_log_type_t)v428[0]))
        {
          *(_DWORD *)out = 136446722;
          *(void *)&out[4] = "nw_necp_buffer_get_tlv_value";
          *(_WORD *)&out[12] = 2048;
          *(void *)&out[14] = v29;
          *(_WORD *)&out[22] = 2048;
          *(void *)&out[24] = v26;
          _os_log_impl(&dword_1830D4000, v40, v51, "%{public}s buffer too short tlv_offset=%zu buffer_length=%zu, backtrace limit exceeded", out, 0x20u);
        }
      }

      goto LABEL_81;
    }
    if (v26 - 1 >= v29)
    {
      int v42 = *(unsigned __int8 *)(v306 + v29);
      goto LABEL_93;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v34 = (id)gLogObj;
    *(_DWORD *)out = 136446722;
    *(void *)&out[4] = "nw_necp_buffer_get_tlv_type";
    *(_WORD *)&out[12] = 2048;
    *(void *)&out[14] = v29;
    *(_WORD *)&out[22] = 2048;
    *(void *)&out[24] = v26;
    uint64_t v35 = (void *)_os_log_send_and_compose_impl();

    v428[0] = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault((const char *)v35, v428, &type))
    {
      if (v428[0] == 17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        char v36 = (id)gLogObj;
        os_log_type_t v37 = v428[0];
        if (os_log_type_enabled(v36, (os_log_type_t)v428[0]))
        {
          *(_DWORD *)out = 136446722;
          *(void *)&out[4] = "nw_necp_buffer_get_tlv_type";
          *(_WORD *)&out[12] = 2048;
          *(void *)&out[14] = v29;
          *(_WORD *)&out[22] = 2048;
          *(void *)&out[24] = v26;
          _os_log_impl(&dword_1830D4000, v36, v37, "%{public}s buffer too short tlv_offset=%zu buffer_length=%zu", out, 0x20u);
        }
      }
      else if (type)
      {
        uint64_t v47 = __nw_create_backtrace_string();
        if (v47)
        {
          BOOL v48 = (char *)v47;
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          char v49 = (id)gLogObj;
          os_log_type_t v50 = v428[0];
          if (os_log_type_enabled(v49, (os_log_type_t)v428[0]))
          {
            *(_DWORD *)out = 136446978;
            *(void *)&out[4] = "nw_necp_buffer_get_tlv_type";
            *(_WORD *)&out[12] = 2048;
            *(void *)&out[14] = v29;
            *(_WORD *)&out[22] = 2048;
            *(void *)&out[24] = v26;
            *(_WORD *)&out[32] = 2082;
            *(void *)&out[34] = v48;
            _os_log_impl(&dword_1830D4000, v49, v50, "%{public}s buffer too short tlv_offset=%zu buffer_length=%zu, dumping backtrace:%{public}s", out, 0x2Au);
          }

          free(v48);
          if (!v35) {
            goto LABEL_92;
          }
LABEL_91:
          free(v35);
          goto LABEL_92;
        }
        char v36 = __nwlog_obj();
        os_log_type_t v55 = v428[0];
        if (os_log_type_enabled(v36, (os_log_type_t)v428[0]))
        {
          *(_DWORD *)out = 136446722;
          *(void *)&out[4] = "nw_necp_buffer_get_tlv_type";
          *(_WORD *)&out[12] = 2048;
          *(void *)&out[14] = v29;
          *(_WORD *)&out[22] = 2048;
          *(void *)&out[24] = v26;
          _os_log_impl(&dword_1830D4000, v36, v55, "%{public}s buffer too short tlv_offset=%zu buffer_length=%zu, no backtrace", out, 0x20u);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        char v36 = (id)gLogObj;
        os_log_type_t v54 = v428[0];
        if (os_log_type_enabled(v36, (os_log_type_t)v428[0]))
        {
          *(_DWORD *)out = 136446722;
          *(void *)&out[4] = "nw_necp_buffer_get_tlv_type";
          *(_WORD *)&out[12] = 2048;
          *(void *)&out[14] = v29;
          *(_WORD *)&out[22] = 2048;
          *(void *)&out[24] = v26;
          _os_log_impl(&dword_1830D4000, v36, v54, "%{public}s buffer too short tlv_offset=%zu buffer_length=%zu, backtrace limit exceeded", out, 0x20u);
        }
      }
    }
    if (v35) {
      goto LABEL_91;
    }
LABEL_92:
    int v42 = 0;
LABEL_93:
    size_t v52 = *(unsigned int *)(v307 + v29);
    if (v52)
    {
      if (v52 <= 0xFFFFFFF9 && v26 >= v52 + 5 && v26 - (v52 + 5) >= v29)
      {
        uint64_t v53 = (char *)(v305 + v29);
        goto LABEL_120;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v57 = (id)gLogObj;
      *(_DWORD *)out = 136446978;
      *(void *)&out[4] = "nw_necp_buffer_get_tlv_value";
      *(_WORD *)&out[12] = 2048;
      *(void *)&out[14] = v29;
      *(_WORD *)&out[22] = 2048;
      *(void *)&out[24] = v26;
      *(_WORD *)&out[32] = 1024;
      *(_DWORD *)&out[34] = v52;
      __int16 v58 = (void *)_os_log_send_and_compose_impl();

      v428[0] = 16;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      if (__nwlog_fault((const char *)v58, v428, &type))
      {
        if (v428[0] == 17)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          nw_endpoint_t v59 = (id)gLogObj;
          os_log_type_t v60 = v428[0];
          if (os_log_type_enabled(v59, (os_log_type_t)v428[0]))
          {
            *(_DWORD *)out = 136446978;
            *(void *)&out[4] = "nw_necp_buffer_get_tlv_value";
            *(_WORD *)&out[12] = 2048;
            *(void *)&out[14] = v29;
            *(_WORD *)&out[22] = 2048;
            *(void *)&out[24] = v26;
            *(_WORD *)&out[32] = 1024;
            *(_DWORD *)&out[34] = v52;
            _os_log_impl(&dword_1830D4000, v59, v60, "%{public}s buffer too short tlv_offset=%zu buffer_length=%zu value_length=%u", out, 0x26u);
          }
        }
        else if (type)
        {
          int v61 = __nw_create_backtrace_string();
          if (v61)
          {
            uint64_t v62 = (char *)v61;
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            int v63 = (id)gLogObj;
            os_log_type_t v64 = v428[0];
            if (os_log_type_enabled(v63, (os_log_type_t)v428[0]))
            {
              *(_DWORD *)out = 136447234;
              *(void *)&out[4] = "nw_necp_buffer_get_tlv_value";
              *(_WORD *)&out[12] = 2048;
              *(void *)&out[14] = v29;
              *(_WORD *)&out[22] = 2048;
              *(void *)&out[24] = v26;
              *(_WORD *)&out[32] = 1024;
              *(_DWORD *)&out[34] = v52;
              *(_WORD *)&out[38] = 2082;
              *(void *)&out[40] = v62;
              _os_log_impl(&dword_1830D4000, v63, v64, "%{public}s buffer too short tlv_offset=%zu buffer_length=%zu value_length=%u, dumping backtrace:%{public}s", out, 0x30u);
            }

            free(v62);
            if (!v58) {
              goto LABEL_119;
            }
LABEL_118:
            free(v58);
            goto LABEL_119;
          }
          nw_endpoint_t v59 = __nwlog_obj();
          os_log_type_t v66 = v428[0];
          if (os_log_type_enabled(v59, (os_log_type_t)v428[0]))
          {
            *(_DWORD *)out = 136446978;
            *(void *)&out[4] = "nw_necp_buffer_get_tlv_value";
            *(_WORD *)&out[12] = 2048;
            *(void *)&out[14] = v29;
            *(_WORD *)&out[22] = 2048;
            *(void *)&out[24] = v26;
            *(_WORD *)&out[32] = 1024;
            *(_DWORD *)&out[34] = v52;
            _os_log_impl(&dword_1830D4000, v59, v66, "%{public}s buffer too short tlv_offset=%zu buffer_length=%zu value_length=%u, no backtrace", out, 0x26u);
          }
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          nw_endpoint_t v59 = (id)gLogObj;
          os_log_type_t v65 = v428[0];
          if (os_log_type_enabled(v59, (os_log_type_t)v428[0]))
          {
            *(_DWORD *)out = 136446978;
            *(void *)&out[4] = "nw_necp_buffer_get_tlv_value";
            *(_WORD *)&out[12] = 2048;
            *(void *)&out[14] = v29;
            *(_WORD *)&out[22] = 2048;
            *(void *)&out[24] = v26;
            *(_WORD *)&out[32] = 1024;
            *(_DWORD *)&out[34] = v52;
            _os_log_impl(&dword_1830D4000, v59, v65, "%{public}s buffer too short tlv_offset=%zu buffer_length=%zu value_length=%u, backtrace limit exceeded", out, 0x26u);
          }
        }
      }
      if (v58) {
        goto LABEL_118;
      }
    }
LABEL_119:
    uint64_t v53 = 0;
LABEL_120:
    v29 += v52 + 5;
    if (v29 > v26) {
      break;
    }
    if (v42 <= 158)
    {
      if (v42 == 156)
      {
        if (v28)
        {
          if (v52 == 16)
          {
            nw_endpoint_t v28 = v28;
            *(_OWORD *)((char *)&v28[3].isa + 4) = *(_OWORD *)v53;
          }
          goto LABEL_48;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v70 = (id)gLogObj;
        if (os_log_type_enabled(v70, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)out = 136446210;
          *(void *)&out[4] = "nw_agent_copy_group_members_for_message";
          _os_log_impl(&dword_1830D4000, v70, OS_LOG_TYPE_ERROR, "%{public}s No previous endpoint to apply endpoint agent to", out, 0xCu);
        }
      }
      else
      {
        if (v42 != 158) {
          goto LABEL_132;
        }
        if (v28)
        {
          *(void *)out = 0;
          asprintf((char **)out, "%.*s", v52, v53);
          nw_endpoint_set_device_id(v28, *(const char **)out);
          if (*(void *)out) {
            free(*(void **)out);
          }
          goto LABEL_48;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v70 = (id)gLogObj;
        if (os_log_type_enabled(v70, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)out = 136446210;
          *(void *)&out[4] = "nw_agent_copy_group_members_for_message";
          _os_log_impl(&dword_1830D4000, v70, OS_LOG_TYPE_ERROR, "%{public}s No previous endpoint to apply endpoint device id to", out, 0xCu);
        }
      }
      goto LABEL_147;
    }
    if (v42 != 159)
    {
      if (v42 == 213)
      {
        nw_endpoint_t v67 = nw_path_copy_endpoint_from_tlv(213, v52, v53);

        nw_endpoint_t v28 = v67;
        if (v28) {
          nw_array_append(v308, v28);
        }

        goto LABEL_48;
      }
LABEL_132:
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v68 = (id)gLogObj;
      if (os_log_type_enabled(v68, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)out = 136446466;
        *(void *)&out[4] = "nw_agent_copy_group_members_for_message";
        *(_WORD *)&out[12] = 1024;
        *(_DWORD *)&out[14] = v42;
        _os_log_impl(&dword_1830D4000, v68, OS_LOG_TYPE_ERROR, "%{public}s Received unknown type %u", out, 0x12u);
      }

      goto LABEL_48;
    }
    if (!v28)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v70 = (id)gLogObj;
      if (os_log_type_enabled(v70, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)out = 136446210;
        *(void *)&out[4] = "nw_agent_copy_group_members_for_message";
        _os_log_impl(&dword_1830D4000, v70, OS_LOG_TYPE_ERROR, "%{public}s No previous endpoint to apply public key to", out, 0xCu);
      }
LABEL_147:

      nw_endpoint_t v28 = 0;
      goto LABEL_48;
    }
    char v69 = objc_msgSend(MEMORY[0x1E4F1C9B8], "dataWithBytes:length:", v53);
    nw_endpoint_append_public_key(v28, v69);

LABEL_48:
    if (v29 >= v27) {
      goto LABEL_193;
    }
  }
  char v77 = __nwlog_obj();
  *(_DWORD *)out = 136446978;
  *(void *)&out[4] = "nw_agent_copy_group_members_for_message";
  *(_WORD *)&out[12] = 1024;
  *(_DWORD *)&out[14] = v52;
  *(_WORD *)&out[18] = 2048;
  *(void *)&out[20] = v29;
  *(_WORD *)&out[28] = 1024;
  *(_DWORD *)&out[30] = v26;
  int v78 = (char *)_os_log_send_and_compose_impl();

  v428[0] = 16;
  os_log_type_t type = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v78, v428, &type))
  {
    if (v428[0] == 17)
    {
      uint64_t v79 = __nwlog_obj();
      os_log_type_t v80 = v428[0];
      if (os_log_type_enabled(v79, (os_log_type_t)v428[0]))
      {
        *(_DWORD *)out = 136446978;
        *(void *)&out[4] = "nw_agent_copy_group_members_for_message";
        *(_WORD *)&out[12] = 1024;
        *(_DWORD *)&out[14] = v52;
        *(_WORD *)&out[18] = 2048;
        *(void *)&out[20] = v29;
        *(_WORD *)&out[28] = 1024;
        *(_DWORD *)&out[30] = v26;
        _os_log_impl(&dword_1830D4000, v79, v80, "%{public}s TLV length (%u) at offset %zu goes beyond total length (%u)", out, 0x22u);
      }
      goto LABEL_164;
    }
    if (type)
    {
      int v85 = (char *)__nw_create_backtrace_string();
      int v86 = __nwlog_obj();
      os_log_type_t v87 = v428[0];
      BOOL v88 = os_log_type_enabled(v86, (os_log_type_t)v428[0]);
      if (v85)
      {
        if (v88)
        {
          *(_DWORD *)out = 136447234;
          *(void *)&out[4] = "nw_agent_copy_group_members_for_message";
          *(_WORD *)&out[12] = 1024;
          *(_DWORD *)&out[14] = v52;
          *(_WORD *)&out[18] = 2048;
          *(void *)&out[20] = v29;
          *(_WORD *)&out[28] = 1024;
          *(_DWORD *)&out[30] = v26;
          *(_WORD *)&out[34] = 2082;
          *(void *)&out[36] = v85;
          _os_log_impl(&dword_1830D4000, v86, v87, "%{public}s TLV length (%u) at offset %zu goes beyond total length (%u), dumping backtrace:%{public}s", out, 0x2Cu);
        }

        free(v85);
      }
      else
      {
        if (v88)
        {
          *(_DWORD *)out = 136446978;
          *(void *)&out[4] = "nw_agent_copy_group_members_for_message";
          *(_WORD *)&out[12] = 1024;
          *(_DWORD *)&out[14] = v52;
          *(_WORD *)&out[18] = 2048;
          *(void *)&out[20] = v29;
          *(_WORD *)&out[28] = 1024;
          *(_DWORD *)&out[30] = v26;
          _os_log_impl(&dword_1830D4000, v86, v87, "%{public}s TLV length (%u) at offset %zu goes beyond total length (%u), no backtrace", out, 0x22u);
        }
      }
    }
    else
    {
      uint64_t v79 = __nwlog_obj();
      os_log_type_t v89 = v428[0];
      if (os_log_type_enabled(v79, (os_log_type_t)v428[0]))
      {
        *(_DWORD *)out = 136446978;
        *(void *)&out[4] = "nw_agent_copy_group_members_for_message";
        *(_WORD *)&out[12] = 1024;
        *(_DWORD *)&out[14] = v52;
        *(_WORD *)&out[18] = 2048;
        *(void *)&out[20] = v29;
        *(_WORD *)&out[28] = 1024;
        *(_DWORD *)&out[30] = v26;
        _os_log_impl(&dword_1830D4000, v79, v89, "%{public}s TLV length (%u) at offset %zu goes beyond total length (%u), backtrace limit exceeded", out, 0x22u);
      }
LABEL_164:
    }
  }
  if (v78) {
    free(v78);
  }
LABEL_193:

LABEL_247:
  BOOL v117 = (unsigned __int8 *)v417[3];
  int v118 = *v117;
  if (v118 == 13)
  {
    *(void *)out = 0;
    *(void *)&out[8] = out;
    *(void *)&out[16] = 0x3032000000;
    *(void *)&out[24] = __Block_byref_object_copy__80774;
    *(void *)&out[32] = __Block_byref_object_dispose__80775;
    *(void *)&out[40] = 0;
    v402[0] = MEMORY[0x1E4F143A8];
    v402[1] = 3221225472;
    int v403 = ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke_164;
    int v404 = &unk_1E524B978;
    nw_endpoint_t v406 = out;
    int v405 = v312;
    uint64_t v119 = v405;
    os_log_type_t v120 = v402;
    os_unfair_lock_lock(lock);
    v403((uint64_t)v120);
    os_unfair_lock_unlock(lock);

    uint64_t v121 = *(void *)(*(void *)&out[8] + 40);
    if (v121)
    {
      v400[0] = MEMORY[0x1E4F143A8];
      v400[1] = 3221225472;
      v400[2] = ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke_2;
      v400[3] = &unk_1E524A0E0;
      char v401 = v119;
      (*(void (**)(uint64_t, NWConcrete_nw_agent_client *, void *))(v121 + 16))(v121, v310, v400);

      goto LABEL_268;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v122 = (id)gLogObj;
    *(_DWORD *)id v428 = 136446210;
    char v429 = "nw_agent_read_message_on_queue";
    id v123 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v420 = 0;
    if (__nwlog_fault(v123, &type, &v420))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        BOOL v124 = __nwlog_obj();
        os_log_type_t v125 = type;
        if (os_log_type_enabled(v124, type))
        {
          *(_DWORD *)id v428 = 136446210;
          char v429 = "nw_agent_read_message_on_queue";
          _os_log_impl(&dword_1830D4000, v124, v125, "%{public}s No handler for CLIENT_TRIGGER", v428, 0xCu);
        }
        goto LABEL_254;
      }
      if (v420)
      {
        os_log_type_t v126 = (char *)__nw_create_backtrace_string();
        unsigned int v127 = __nwlog_obj();
        os_log_type_t v128 = type;
        BOOL v129 = os_log_type_enabled(v127, type);
        if (v126)
        {
          if (v129)
          {
            *(_DWORD *)id v428 = 136446466;
            char v429 = "nw_agent_read_message_on_queue";
            __int16 v430 = 2082;
            uint64_t v431 = v126;
            _os_log_impl(&dword_1830D4000, v127, v128, "%{public}s No handler for CLIENT_TRIGGER, dumping backtrace:%{public}s", v428, 0x16u);
          }

          free(v126);
        }
        else
        {
          if (v129)
          {
            *(_DWORD *)id v428 = 136446210;
            char v429 = "nw_agent_read_message_on_queue";
            _os_log_impl(&dword_1830D4000, v127, v128, "%{public}s No handler for CLIENT_TRIGGER, no backtrace", v428, 0xCu);
          }
        }
      }
      else
      {
        BOOL v124 = __nwlog_obj();
        os_log_type_t v130 = type;
        if (os_log_type_enabled(v124, type))
        {
          *(_DWORD *)id v428 = 136446210;
          char v429 = "nw_agent_read_message_on_queue";
          _os_log_impl(&dword_1830D4000, v124, v130, "%{public}s No handler for CLIENT_TRIGGER, backtrace limit exceeded", v428, 0xCu);
        }
LABEL_254:
      }
    }
    if (v123) {
      free(v123);
    }
LABEL_268:

    _Block_object_dispose(out, 8);
    int v118 = *v117;
  }
  if (v118 == 5)
  {
    *(void *)out = 0;
    *(void *)&out[8] = out;
    *(void *)&out[16] = 0x3032000000;
    *(void *)&out[24] = __Block_byref_object_copy__80774;
    *(void *)&out[32] = __Block_byref_object_dispose__80775;
    *(void *)&out[40] = 0;
    v395[0] = MEMORY[0x1E4F143A8];
    v395[1] = 3221225472;
    nw_endpoint_t v396 = ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke_166;
    int v397 = &unk_1E524B978;
    v399 = out;
    int v398 = v312;
    os_log_type_t v131 = v398;
    uint64_t v132 = v395;
    os_unfair_lock_lock(lock);
    v396((uint64_t)v132);
    os_unfair_lock_unlock(lock);

    uint64_t v133 = *(void *)(*(void *)&out[8] + 40);
    if (v133)
    {
      v393[0] = MEMORY[0x1E4F143A8];
      v393[1] = 3221225472;
      v393[2] = ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke_2_167;
      v393[3] = &unk_1E524A0E0;
      v394 = v131;
      (*(void (**)(uint64_t, NWConcrete_nw_agent_client *, void *))(v133 + 16))(v133, v310, v393);

      goto LABEL_290;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v134 = (id)gLogObj;
    *(_DWORD *)id v428 = 136446210;
    char v429 = "nw_agent_read_message_on_queue";
    uint64_t v135 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v420 = 0;
    if (__nwlog_fault(v135, &type, &v420))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        int v136 = __nwlog_obj();
        os_log_type_t v137 = type;
        if (os_log_type_enabled(v136, type))
        {
          *(_DWORD *)id v428 = 136446210;
          char v429 = "nw_agent_read_message_on_queue";
          _os_log_impl(&dword_1830D4000, v136, v137, "%{public}s No handler for TRIGGER", v428, 0xCu);
        }
        goto LABEL_276;
      }
      if (v420)
      {
        __int16 v138 = (char *)__nw_create_backtrace_string();
        uint64_t v139 = __nwlog_obj();
        os_log_type_t v140 = type;
        BOOL v141 = os_log_type_enabled(v139, type);
        if (v138)
        {
          if (v141)
          {
            *(_DWORD *)id v428 = 136446466;
            char v429 = "nw_agent_read_message_on_queue";
            __int16 v430 = 2082;
            uint64_t v431 = v138;
            _os_log_impl(&dword_1830D4000, v139, v140, "%{public}s No handler for TRIGGER, dumping backtrace:%{public}s", v428, 0x16u);
          }

          free(v138);
        }
        else
        {
          if (v141)
          {
            *(_DWORD *)id v428 = 136446210;
            char v429 = "nw_agent_read_message_on_queue";
            _os_log_impl(&dword_1830D4000, v139, v140, "%{public}s No handler for TRIGGER, no backtrace", v428, 0xCu);
          }
        }
      }
      else
      {
        int v136 = __nwlog_obj();
        os_log_type_t v142 = type;
        if (os_log_type_enabled(v136, type))
        {
          *(_DWORD *)id v428 = 136446210;
          char v429 = "nw_agent_read_message_on_queue";
          _os_log_impl(&dword_1830D4000, v136, v142, "%{public}s No handler for TRIGGER, backtrace limit exceeded", v428, 0xCu);
        }
LABEL_276:
      }
    }
    if (v135) {
      free(v135);
    }
LABEL_290:

    _Block_object_dispose(out, 8);
    int v118 = *v117;
  }
  if (v118 != 26) {
    goto LABEL_350;
  }
  *(void *)out = 0;
  *(void *)&out[8] = out;
  *(void *)&out[16] = 0x3032000000;
  *(void *)&out[24] = __Block_byref_object_copy__80774;
  *(void *)&out[32] = __Block_byref_object_dispose__80775;
  *(void *)&out[40] = 0;
  v388[0] = MEMORY[0x1E4F143A8];
  v388[1] = 3221225472;
  v389 = ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke_168;
  BOOL v390 = &unk_1E524B978;
  id v392 = out;
  uint64_t v391 = v312;
  os_log_type_t v143 = v391;
  uint64_t v144 = v388;
  os_unfair_lock_lock(lock);
  v389((uint64_t)v144);
  os_unfair_lock_unlock(lock);

  uint64_t v145 = *(void *)(*(void *)&out[8] + 40);
  if (!v145)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v148 = (id)gLogObj;
    *(_DWORD *)id v428 = 136446210;
    char v429 = "nw_agent_read_message_on_queue";
    uint64_t v149 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v420 = 0;
    if (__nwlog_fault(v149, &type, &v420))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v150 = __nwlog_obj();
        os_log_type_t v151 = type;
        if (os_log_type_enabled(v150, type))
        {
          *(_DWORD *)id v428 = 136446210;
          char v429 = "nw_agent_read_message_on_queue";
          _os_log_impl(&dword_1830D4000, v150, v151, "%{public}s No handler for CLIENT_ERROR", v428, 0xCu);
        }
      }
      else
      {
        if (v420)
        {
          v152 = (char *)__nw_create_backtrace_string();
          os_log_type_t v153 = __nwlog_obj();
          os_log_type_t v154 = type;
          BOOL v155 = os_log_type_enabled(v153, type);
          if (v152)
          {
            if (v155)
            {
              *(_DWORD *)id v428 = 136446466;
              char v429 = "nw_agent_read_message_on_queue";
              __int16 v430 = 2082;
              uint64_t v431 = v152;
              _os_log_impl(&dword_1830D4000, v153, v154, "%{public}s No handler for CLIENT_ERROR, dumping backtrace:%{public}s", v428, 0x16u);
            }

            free(v152);
          }
          else
          {
            if (v155)
            {
              *(_DWORD *)id v428 = 136446210;
              char v429 = "nw_agent_read_message_on_queue";
              _os_log_impl(&dword_1830D4000, v153, v154, "%{public}s No handler for CLIENT_ERROR, no backtrace", v428, 0xCu);
            }
          }
          goto LABEL_313;
        }
        uint64_t v150 = __nwlog_obj();
        os_log_type_t v156 = type;
        if (os_log_type_enabled(v150, type))
        {
          *(_DWORD *)id v428 = 136446210;
          char v429 = "nw_agent_read_message_on_queue";
          _os_log_impl(&dword_1830D4000, v150, v156, "%{public}s No handler for CLIENT_ERROR, backtrace limit exceeded", v428, 0xCu);
        }
      }
    }
LABEL_313:
    if (v149) {
      free(v149);
    }
    goto LABEL_349;
  }
  uint64_t v146 = v417[3];
  if (!v146)
  {
    long long v157 = __nwlog_obj();
    *(_DWORD *)id v428 = 136446210;
    char v429 = "nw_agent_get_error_for_message";
    id v158 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v420 = 0;
    if (__nwlog_fault(v158, &type, &v420))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        long long v159 = __nwlog_obj();
        os_log_type_t v160 = type;
        if (os_log_type_enabled(v159, type))
        {
          *(_DWORD *)id v428 = 136446210;
          char v429 = "nw_agent_get_error_for_message";
          _os_log_impl(&dword_1830D4000, v159, v160, "%{public}s called with null message", v428, 0xCu);
        }
      }
      else
      {
        if (v420)
        {
          os_log_type_t v161 = (char *)__nw_create_backtrace_string();
          uint64_t v162 = __nwlog_obj();
          os_log_type_t v163 = type;
          BOOL v164 = os_log_type_enabled(v162, type);
          if (v161)
          {
            if (v164)
            {
              *(_DWORD *)id v428 = 136446466;
              char v429 = "nw_agent_get_error_for_message";
              __int16 v430 = 2082;
              uint64_t v431 = v161;
              _os_log_impl(&dword_1830D4000, v162, v163, "%{public}s called with null message, dumping backtrace:%{public}s", v428, 0x16u);
            }

            free(v161);
          }
          else
          {
            if (v164)
            {
              *(_DWORD *)id v428 = 136446210;
              char v429 = "nw_agent_get_error_for_message";
              _os_log_impl(&dword_1830D4000, v162, v163, "%{public}s called with null message, no backtrace", v428, 0xCu);
            }
          }
          goto LABEL_345;
        }
        long long v159 = __nwlog_obj();
        os_log_type_t v169 = type;
        if (os_log_type_enabled(v159, type))
        {
          *(_DWORD *)id v428 = 136446210;
          char v429 = "nw_agent_get_error_for_message";
          _os_log_impl(&dword_1830D4000, v159, v169, "%{public}s called with null message, backtrace limit exceeded", v428, 0xCu);
        }
      }
    }
LABEL_345:
    if (v158) {
      free(v158);
    }
    goto LABEL_347;
  }
  if (*(_DWORD *)(v146 + 12) >= 0x14u && *(unsigned char *)v146 == 26)
  {
    uint64_t v147 = *(unsigned int *)(v146 + 32);
    goto LABEL_348;
  }
LABEL_347:
  uint64_t v147 = 0;
LABEL_348:
  (*(void (**)(uint64_t, NWConcrete_nw_agent_client *, uint64_t))(v145 + 16))(v145, v310, v147);
LABEL_349:

  _Block_object_dispose(out, 8);
LABEL_350:
  if (!v310->browse_descriptor && !v310->advertise_descriptor)
  {
    if ((*((unsigned char *)v312 + 856) & 0x20) == 0)
    {
      int v179 = *v117;
      if (v179 != 14) {
        goto LABEL_527;
      }
      *(void *)out = 0;
      *(void *)&out[8] = out;
      *(void *)&out[16] = 0x3032000000;
      *(void *)&out[24] = __Block_byref_object_copy__80774;
      *(void *)&out[32] = __Block_byref_object_dispose__80775;
      *(void *)&out[40] = 0;
      v355[0] = MEMORY[0x1E4F143A8];
      v355[1] = 3221225472;
      uint64_t v356 = ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke_177;
      uint64_t v357 = &unk_1E524B978;
      v359 = out;
      id v358 = v312;
      int v180 = v358;
      uint64_t v181 = v355;
      os_unfair_lock_lock(lock);
      v356((uint64_t)v181);
      os_unfair_lock_unlock(lock);

      uint64_t v182 = *(void *)(*(void *)&out[8] + 40);
      if (v182)
      {
        v353[0] = MEMORY[0x1E4F143A8];
        v353[1] = 3221225472;
        v353[2] = ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke_2_178;
        v353[3] = &unk_1E524A0E0;
        nw_endpoint_t v354 = v180;
        (*(void (**)(uint64_t, NWConcrete_nw_agent_client *, void *))(v182 + 16))(v182, v310, v353);

LABEL_526:
        _Block_object_dispose(out, 8);

        int v179 = *v117;
LABEL_527:
        if (v179 != 15) {
          goto LABEL_406;
        }
        *(void *)out = 0;
        *(void *)&out[8] = out;
        *(void *)&out[16] = 0x3032000000;
        *(void *)&out[24] = __Block_byref_object_copy__80774;
        *(void *)&out[32] = __Block_byref_object_dispose__80775;
        *(void *)&out[40] = 0;
        v348[0] = MEMORY[0x1E4F143A8];
        v348[1] = 3221225472;
        int v349 = ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke_179;
        v350 = &unk_1E524B978;
        int v352 = out;
        id v351 = v312;
        v276 = v351;
        id v277 = v348;
        os_unfair_lock_lock(lock);
        v349((uint64_t)v277);
        os_unfair_lock_unlock(lock);

        uint64_t v278 = *(void *)(*(void *)&out[8] + 40);
        if (v278)
        {
          (*(void (**)(uint64_t, NWConcrete_nw_agent_client *))(v278 + 16))(v278, v310);
LABEL_548:

          _Block_object_dispose(out, 8);
          goto LABEL_406;
        }
        id v279 = __nwlog_obj();
        *(_DWORD *)id v428 = 136446210;
        char v429 = "nw_agent_read_message_on_queue";
        os_log_type_t v280 = (char *)_os_log_send_and_compose_impl();

        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v420 = 0;
        if (__nwlog_fault(v280, &type, &v420))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            uint64_t v281 = __nwlog_obj();
            os_log_type_t v282 = type;
            if (os_log_type_enabled(v281, type))
            {
              *(_DWORD *)id v428 = 136446210;
              char v429 = "nw_agent_read_message_on_queue";
              _os_log_impl(&dword_1830D4000, v281, v282, "%{public}s No handler for CLIENT_UNASSERT", v428, 0xCu);
            }
          }
          else
          {
            if (v420)
            {
              char v283 = (char *)__nw_create_backtrace_string();
              int v284 = __nwlog_obj();
              os_log_type_t v285 = type;
              BOOL v286 = os_log_type_enabled(v284, type);
              if (v283)
              {
                if (v286)
                {
                  *(_DWORD *)id v428 = 136446466;
                  char v429 = "nw_agent_read_message_on_queue";
                  __int16 v430 = 2082;
                  uint64_t v431 = v283;
                  _os_log_impl(&dword_1830D4000, v284, v285, "%{public}s No handler for CLIENT_UNASSERT, dumping backtrace:%{public}s", v428, 0x16u);
                }

                free(v283);
              }
              else
              {
                if (v286)
                {
                  *(_DWORD *)id v428 = 136446210;
                  char v429 = "nw_agent_read_message_on_queue";
                  _os_log_impl(&dword_1830D4000, v284, v285, "%{public}s No handler for CLIENT_UNASSERT, no backtrace", v428, 0xCu);
                }
              }
              goto LABEL_546;
            }
            uint64_t v281 = __nwlog_obj();
            os_log_type_t v287 = type;
            if (os_log_type_enabled(v281, type))
            {
              *(_DWORD *)id v428 = 136446210;
              char v429 = "nw_agent_read_message_on_queue";
              _os_log_impl(&dword_1830D4000, v281, v287, "%{public}s No handler for CLIENT_UNASSERT, backtrace limit exceeded", v428, 0xCu);
            }
          }
        }
LABEL_546:
        if (v280) {
          free(v280);
        }
        goto LABEL_548;
      }
      int v237 = __nwlog_obj();
      *(_DWORD *)id v428 = 136446210;
      char v429 = "nw_agent_read_message_on_queue";
      uint64_t v238 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v420 = 0;
      if (__nwlog_fault(v238, &type, &v420))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          nw_endpoint_t v239 = __nwlog_obj();
          os_log_type_t v240 = type;
          if (os_log_type_enabled(v239, type))
          {
            *(_DWORD *)id v428 = 136446210;
            char v429 = "nw_agent_read_message_on_queue";
            _os_log_impl(&dword_1830D4000, v239, v240, "%{public}s No handler for CLIENT_ASSERT", v428, 0xCu);
          }
        }
        else
        {
          if (v420)
          {
            uint64_t v267 = (char *)__nw_create_backtrace_string();
            int v268 = __nwlog_obj();
            os_log_type_t v269 = type;
            BOOL v270 = os_log_type_enabled(v268, type);
            if (v267)
            {
              if (v270)
              {
                *(_DWORD *)id v428 = 136446466;
                char v429 = "nw_agent_read_message_on_queue";
                __int16 v430 = 2082;
                uint64_t v431 = v267;
                _os_log_impl(&dword_1830D4000, v268, v269, "%{public}s No handler for CLIENT_ASSERT, dumping backtrace:%{public}s", v428, 0x16u);
              }

              free(v267);
            }
            else
            {
              if (v270)
              {
                *(_DWORD *)id v428 = 136446210;
                char v429 = "nw_agent_read_message_on_queue";
                _os_log_impl(&dword_1830D4000, v268, v269, "%{public}s No handler for CLIENT_ASSERT, no backtrace", v428, 0xCu);
              }
            }
            goto LABEL_524;
          }
          nw_endpoint_t v239 = __nwlog_obj();
          os_log_type_t v275 = type;
          if (os_log_type_enabled(v239, type))
          {
            *(_DWORD *)id v428 = 136446210;
            char v429 = "nw_agent_read_message_on_queue";
            _os_log_impl(&dword_1830D4000, v239, v275, "%{public}s No handler for CLIENT_ASSERT, backtrace limit exceeded", v428, 0xCu);
          }
        }
      }
LABEL_524:
      if (v238) {
        free(v238);
      }
      goto LABEL_526;
    }
    uint64_t v187 = nw_agent_client_copy_endpoint(v310);
    uint64_t v188 = v187;
    if (!v187) {
      goto LABEL_585;
    }
    nw_endpoint_type_t v189 = nw_endpoint_get_type(v187);
    if (!*((unsigned char *)v312 + 712)) {
      goto LABEL_585;
    }
    uint64_t v190 = 0;
    uint64_t v191 = 352;
    while (*(_DWORD *)((char *)v312 + v191) != v189)
    {
      ++v190;
      v191 += 24;
      if (*((unsigned __int8 *)v312 + 712) == v190) {
        goto LABEL_585;
      }
    }
    int v233 = *v117;
    if (v233 != 14)
    {
LABEL_563:
      if (v233 == 15)
      {
        *(void *)out = 0;
        *(void *)&out[8] = out;
        *(void *)&out[16] = 0x3032000000;
        *(void *)&out[24] = __Block_byref_object_copy__80774;
        *(void *)&out[32] = __Block_byref_object_dispose__80775;
        *(void *)&out[40] = 0;
        v360[0] = MEMORY[0x1E4F143A8];
        v360[1] = 3221225472;
        nw_endpoint_t v361 = ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke_176;
        int v362 = &unk_1E524A130;
        uint64_t v364 = out;
        uint64_t v363 = v312;
        char v365 = v190;
        uint64_t v293 = v363;
        msghdr v294 = v360;
        os_unfair_lock_lock(lock);
        v361((uint64_t)v294);
        os_unfair_lock_unlock(lock);

        uint64_t v295 = *(void *)(*(void *)&out[8] + 40);
        if (v295)
        {
          (*(void (**)(uint64_t, NWConcrete_nw_agent_client *))(v295 + 16))(v295, v310);
LABEL_584:

          _Block_object_dispose(out, 8);
          goto LABEL_585;
        }
        os_log_type_t v296 = __nwlog_obj();
        *(_DWORD *)id v428 = 136446210;
        char v429 = "nw_agent_read_message_on_queue";
        uint64_t v297 = (char *)_os_log_send_and_compose_impl();

        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v420 = 0;
        if (__nwlog_fault(v297, &type, &v420))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            nw_endpoint_t v298 = __nwlog_obj();
            os_log_type_t v299 = type;
            if (os_log_type_enabled(v298, type))
            {
              *(_DWORD *)id v428 = 136446210;
              char v429 = "nw_agent_read_message_on_queue";
              _os_log_impl(&dword_1830D4000, v298, v299, "%{public}s No handler for CLIENT_UNASSERT", v428, 0xCu);
            }
          }
          else
          {
            if (v420)
            {
              v300 = (char *)__nw_create_backtrace_string();
              __int16 v301 = __nwlog_obj();
              os_log_type_t v302 = type;
              BOOL v303 = os_log_type_enabled(v301, type);
              if (v300)
              {
                if (v303)
                {
                  *(_DWORD *)id v428 = 136446466;
                  char v429 = "nw_agent_read_message_on_queue";
                  __int16 v430 = 2082;
                  uint64_t v431 = v300;
                  _os_log_impl(&dword_1830D4000, v301, v302, "%{public}s No handler for CLIENT_UNASSERT, dumping backtrace:%{public}s", v428, 0x16u);
                }

                free(v300);
              }
              else
              {
                if (v303)
                {
                  *(_DWORD *)id v428 = 136446210;
                  char v429 = "nw_agent_read_message_on_queue";
                  _os_log_impl(&dword_1830D4000, v301, v302, "%{public}s No handler for CLIENT_UNASSERT, no backtrace", v428, 0xCu);
                }
              }
              goto LABEL_582;
            }
            nw_endpoint_t v298 = __nwlog_obj();
            os_log_type_t v304 = type;
            if (os_log_type_enabled(v298, type))
            {
              *(_DWORD *)id v428 = 136446210;
              char v429 = "nw_agent_read_message_on_queue";
              _os_log_impl(&dword_1830D4000, v298, v304, "%{public}s No handler for CLIENT_UNASSERT, backtrace limit exceeded", v428, 0xCu);
            }
          }
        }
LABEL_582:
        if (v297) {
          free(v297);
        }
        goto LABEL_584;
      }
LABEL_585:

      goto LABEL_406;
    }
    *(void *)out = 0;
    *(void *)&out[8] = out;
    *(void *)&out[16] = 0x3032000000;
    *(void *)&out[24] = __Block_byref_object_copy__80774;
    *(void *)&out[32] = __Block_byref_object_dispose__80775;
    *(void *)&out[40] = 0;
    v369[0] = MEMORY[0x1E4F143A8];
    v369[1] = 3221225472;
    uint64_t v370 = ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke_174;
    id v371 = &unk_1E524A130;
    BOOL v373 = out;
    v372 = v312;
    char v374 = v190;
    id v234 = v372;
    os_log_type_t v235 = v369;
    os_unfair_lock_lock(lock);
    v370((uint64_t)v235);
    os_unfair_lock_unlock(lock);

    uint64_t v236 = *(void *)(*(void *)&out[8] + 40);
    if (v236)
    {
      v366[0] = MEMORY[0x1E4F143A8];
      v366[1] = 3221225472;
      v366[2] = ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke_2_175;
      v366[3] = &unk_1E524A108;
      nw_endpoint_t v367 = v234;
      uint64_t v368 = v310;
      (*(void (**)(uint64_t, NWConcrete_nw_agent_client *, void *))(v236 + 16))(v236, v368, v366);

LABEL_562:
      _Block_object_dispose(out, 8);

      int v233 = *v117;
      goto LABEL_563;
    }
    id v271 = __nwlog_obj();
    *(_DWORD *)id v428 = 136446210;
    char v429 = "nw_agent_read_message_on_queue";
    uint64_t v272 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v420 = 0;
    if (__nwlog_fault(v272, &type, &v420))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        nw_endpoint_t v273 = __nwlog_obj();
        os_log_type_t v274 = type;
        if (os_log_type_enabled(v273, type))
        {
          *(_DWORD *)id v428 = 136446210;
          char v429 = "nw_agent_read_message_on_queue";
          _os_log_impl(&dword_1830D4000, v273, v274, "%{public}s No handler for CLIENT_ASSERT", v428, 0xCu);
        }
      }
      else
      {
        if (v420)
        {
          BOOL v288 = (char *)__nw_create_backtrace_string();
          uint64_t v289 = __nwlog_obj();
          os_log_type_t v290 = type;
          BOOL v291 = os_log_type_enabled(v289, type);
          if (v288)
          {
            if (v291)
            {
              *(_DWORD *)id v428 = 136446466;
              char v429 = "nw_agent_read_message_on_queue";
              __int16 v430 = 2082;
              uint64_t v431 = v288;
              _os_log_impl(&dword_1830D4000, v289, v290, "%{public}s No handler for CLIENT_ASSERT, dumping backtrace:%{public}s", v428, 0x16u);
            }

            free(v288);
          }
          else
          {
            if (v291)
            {
              *(_DWORD *)id v428 = 136446210;
              char v429 = "nw_agent_read_message_on_queue";
              _os_log_impl(&dword_1830D4000, v289, v290, "%{public}s No handler for CLIENT_ASSERT, no backtrace", v428, 0xCu);
            }
          }
          goto LABEL_560;
        }
        nw_endpoint_t v273 = __nwlog_obj();
        os_log_type_t v292 = type;
        if (os_log_type_enabled(v273, type))
        {
          *(_DWORD *)id v428 = 136446210;
          char v429 = "nw_agent_read_message_on_queue";
          _os_log_impl(&dword_1830D4000, v273, v292, "%{public}s No handler for CLIENT_ASSERT, backtrace limit exceeded", v428, 0xCu);
        }
      }
    }
LABEL_560:
    if (v272) {
      free(v272);
    }
    goto LABEL_562;
  }
  int v171 = *v117;
  if (v171 == 14)
  {
    *(void *)out = 0;
    *(void *)&out[8] = out;
    *(void *)&out[16] = 0x3032000000;
    *(void *)&out[24] = __Block_byref_object_copy__80774;
    *(void *)&out[32] = __Block_byref_object_dispose__80775;
    *(void *)&out[40] = 0;
    v383[0] = MEMORY[0x1E4F143A8];
    v383[1] = 3221225472;
    __int16 v384 = ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke_169;
    id v385 = &unk_1E524B978;
    v387 = out;
    __int16 v386 = v312;
    uint64_t v172 = v386;
    uint64_t v173 = v383;
    os_unfair_lock_lock(lock);
    v384((uint64_t)v173);
    os_unfair_lock_unlock(lock);

    uint64_t v174 = *(void *)(*(void *)&out[8] + 40);
    if (v174)
    {
      v380[0] = MEMORY[0x1E4F143A8];
      v380[1] = 3221225472;
      v380[2] = ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke_2_170;
      v380[3] = &unk_1E524A108;
      nw_endpoint_t v381 = v172;
      int v382 = v310;
      (*(void (**)(uint64_t, NWConcrete_nw_agent_client *, void *))(v174 + 16))(v174, v382, v380);

      goto LABEL_383;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v175 = (id)gLogObj;
    *(_DWORD *)id v428 = 136446210;
    char v429 = "nw_agent_read_message_on_queue";
    BOOL v176 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v420 = 0;
    if (__nwlog_fault(v176, &type, &v420))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v177 = __nwlog_obj();
        os_log_type_t v178 = type;
        if (os_log_type_enabled(v177, type))
        {
          *(_DWORD *)id v428 = 136446210;
          char v429 = "nw_agent_read_message_on_queue";
          _os_log_impl(&dword_1830D4000, v177, v178, "%{public}s No handler for CLIENT_ASSERT", v428, 0xCu);
        }
        goto LABEL_359;
      }
      if (v420)
      {
        int v183 = (char *)__nw_create_backtrace_string();
        os_log_type_t v184 = __nwlog_obj();
        os_log_type_t v185 = type;
        BOOL v186 = os_log_type_enabled(v184, type);
        if (v183)
        {
          if (v186)
          {
            *(_DWORD *)id v428 = 136446466;
            char v429 = "nw_agent_read_message_on_queue";
            __int16 v430 = 2082;
            uint64_t v431 = v183;
            _os_log_impl(&dword_1830D4000, v184, v185, "%{public}s No handler for CLIENT_ASSERT, dumping backtrace:%{public}s", v428, 0x16u);
          }

          free(v183);
        }
        else
        {
          if (v186)
          {
            *(_DWORD *)id v428 = 136446210;
            char v429 = "nw_agent_read_message_on_queue";
            _os_log_impl(&dword_1830D4000, v184, v185, "%{public}s No handler for CLIENT_ASSERT, no backtrace", v428, 0xCu);
          }
        }
      }
      else
      {
        uint64_t v177 = __nwlog_obj();
        os_log_type_t v192 = type;
        if (os_log_type_enabled(v177, type))
        {
          *(_DWORD *)id v428 = 136446210;
          char v429 = "nw_agent_read_message_on_queue";
          _os_log_impl(&dword_1830D4000, v177, v192, "%{public}s No handler for CLIENT_ASSERT, backtrace limit exceeded", v428, 0xCu);
        }
LABEL_359:
      }
    }
    if (v176) {
      free(v176);
    }
LABEL_383:

    _Block_object_dispose(out, 8);
    int v171 = *v117;
  }
  if (v171 == 15)
  {
    *(void *)out = 0;
    *(void *)&out[8] = out;
    *(void *)&out[16] = 0x3032000000;
    *(void *)&out[24] = __Block_byref_object_copy__80774;
    *(void *)&out[32] = __Block_byref_object_dispose__80775;
    *(void *)&out[40] = 0;
    v375[0] = MEMORY[0x1E4F143A8];
    v375[1] = 3221225472;
    int v376 = ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke_173;
    int v377 = &unk_1E524B978;
    v379 = out;
    id v378 = v312;
    char v193 = v378;
    os_log_type_t v194 = v375;
    os_unfair_lock_lock(lock);
    v376((uint64_t)v194);
    os_unfair_lock_unlock(lock);

    uint64_t v195 = *(void *)(*(void *)&out[8] + 40);
    if (v195)
    {
      (*(void (**)(uint64_t, NWConcrete_nw_agent_client *))(v195 + 16))(v195, v310);
      goto LABEL_405;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v196 = (id)gLogObj;
    *(_DWORD *)id v428 = 136446210;
    char v429 = "nw_agent_read_message_on_queue";
    nw_endpoint_t v197 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v420 = 0;
    if (__nwlog_fault(v197, &type, &v420))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        BOOL v198 = __nwlog_obj();
        os_log_type_t v199 = type;
        if (os_log_type_enabled(v198, type))
        {
          *(_DWORD *)id v428 = 136446210;
          char v429 = "nw_agent_read_message_on_queue";
          _os_log_impl(&dword_1830D4000, v198, v199, "%{public}s No handler for CLIENT_UNASSERT", v428, 0xCu);
        }
        goto LABEL_391;
      }
      if (v420)
      {
        uint64_t v200 = (char *)__nw_create_backtrace_string();
        id v201 = __nwlog_obj();
        os_log_type_t v202 = type;
        BOOL v203 = os_log_type_enabled(v201, type);
        if (v200)
        {
          if (v203)
          {
            *(_DWORD *)id v428 = 136446466;
            char v429 = "nw_agent_read_message_on_queue";
            __int16 v430 = 2082;
            uint64_t v431 = v200;
            _os_log_impl(&dword_1830D4000, v201, v202, "%{public}s No handler for CLIENT_UNASSERT, dumping backtrace:%{public}s", v428, 0x16u);
          }

          free(v200);
        }
        else
        {
          if (v203)
          {
            *(_DWORD *)id v428 = 136446210;
            char v429 = "nw_agent_read_message_on_queue";
            _os_log_impl(&dword_1830D4000, v201, v202, "%{public}s No handler for CLIENT_UNASSERT, no backtrace", v428, 0xCu);
          }
        }
      }
      else
      {
        BOOL v198 = __nwlog_obj();
        os_log_type_t v204 = type;
        if (os_log_type_enabled(v198, type))
        {
          *(_DWORD *)id v428 = 136446210;
          char v429 = "nw_agent_read_message_on_queue";
          _os_log_impl(&dword_1830D4000, v198, v204, "%{public}s No handler for CLIENT_UNASSERT, backtrace limit exceeded", v428, 0xCu);
        }
LABEL_391:
      }
    }
    if (v197) {
      free(v197);
    }
LABEL_405:

    _Block_object_dispose(out, 8);
  }
LABEL_406:
  int v205 = *v117;
  if (v205 == 10)
  {
    *(void *)out = 0;
    *(void *)&out[8] = out;
    *(void *)&out[16] = 0x3032000000;
    *(void *)&out[24] = __Block_byref_object_copy__80774;
    *(void *)&out[32] = __Block_byref_object_dispose__80775;
    *(void *)&out[40] = 0;
    v343[0] = MEMORY[0x1E4F143A8];
    v343[1] = 3221225472;
    id v344 = ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke_180;
    long long v345 = &unk_1E524B978;
    nw_endpoint_t v347 = out;
    nw_endpoint_t v346 = v312;
    uint64_t v206 = v346;
    uint64_t v207 = v343;
    os_unfair_lock_lock(lock);
    v344((uint64_t)v207);
    os_unfair_lock_unlock(lock);

    uint64_t v208 = *(void *)(*(void *)&out[8] + 40);
    if (v208)
    {
      v340[0] = MEMORY[0x1E4F143A8];
      v340[1] = 3221225472;
      v340[2] = ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke_2_181;
      v340[3] = &unk_1E524A180;
      v341 = v206;
      long long v342 = v310;
      (*(void (**)(uint64_t, NWConcrete_nw_agent_client *, void *))(v208 + 16))(v208, v342, v340);

      goto LABEL_427;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v209 = (id)gLogObj;
    *(_DWORD *)id v428 = 136446210;
    char v429 = "nw_agent_read_message_on_queue";
    long long v210 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v420 = 0;
    if (__nwlog_fault(v210, &type, &v420))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        long long v211 = __nwlog_obj();
        os_log_type_t v212 = type;
        if (os_log_type_enabled(v211, type))
        {
          *(_DWORD *)id v428 = 136446210;
          char v429 = "nw_agent_read_message_on_queue";
          _os_log_impl(&dword_1830D4000, v211, v212, "%{public}s No handler for REQUEST_NEXUS", v428, 0xCu);
        }
        goto LABEL_413;
      }
      if (v420)
      {
        id v213 = (char *)__nw_create_backtrace_string();
        uint64_t v214 = __nwlog_obj();
        os_log_type_t v215 = type;
        BOOL v216 = os_log_type_enabled(v214, type);
        if (v213)
        {
          if (v216)
          {
            *(_DWORD *)id v428 = 136446466;
            char v429 = "nw_agent_read_message_on_queue";
            __int16 v430 = 2082;
            uint64_t v431 = v213;
            _os_log_impl(&dword_1830D4000, v214, v215, "%{public}s No handler for REQUEST_NEXUS, dumping backtrace:%{public}s", v428, 0x16u);
          }

          free(v213);
        }
        else
        {
          if (v216)
          {
            *(_DWORD *)id v428 = 136446210;
            char v429 = "nw_agent_read_message_on_queue";
            _os_log_impl(&dword_1830D4000, v214, v215, "%{public}s No handler for REQUEST_NEXUS, no backtrace", v428, 0xCu);
          }
        }
      }
      else
      {
        long long v211 = __nwlog_obj();
        os_log_type_t v217 = type;
        if (os_log_type_enabled(v211, type))
        {
          *(_DWORD *)id v428 = 136446210;
          char v429 = "nw_agent_read_message_on_queue";
          _os_log_impl(&dword_1830D4000, v211, v217, "%{public}s No handler for REQUEST_NEXUS, backtrace limit exceeded", v428, 0xCu);
        }
LABEL_413:
      }
    }
    if (v210) {
      free(v210);
    }
LABEL_427:

    _Block_object_dispose(out, 8);
    int v205 = *v117;
  }
  if (v205 == 12)
  {
    v335[0] = MEMORY[0x1E4F143A8];
    v335[1] = 3221225472;
    uint64_t v336 = ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke_184;
    id v337 = &unk_1E524B9A0;
    char v218 = v310;
    BOOL v338 = v218;
    os_log_type_t v339 = v312;
    int v219 = v339;
    int v220 = v335;
    os_unfair_lock_lock(lock);
    v336((uint64_t)v220);
    os_unfair_lock_unlock(lock);

    int v205 = *v117;
    if (v205 == 12)
    {
      *(void *)out = 0;
      *(void *)&out[8] = out;
      *(void *)&out[16] = 0x3032000000;
      *(void *)&out[24] = __Block_byref_object_copy__80774;
      *(void *)&out[32] = __Block_byref_object_dispose__80775;
      *(void *)&out[40] = 0;
      v330[0] = MEMORY[0x1E4F143A8];
      v330[1] = 3221225472;
      id v331 = ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke_187;
      BOOL v332 = &unk_1E524B978;
      uint64_t v334 = out;
      nw_endpoint_t v333 = v219;
      BOOL v221 = v333;
      nw_endpoint_t v222 = v330;
      os_unfair_lock_lock(lock);
      v331((uint64_t)v222);
      os_unfair_lock_unlock(lock);

      uint64_t v223 = *(void *)(*(void *)&out[8] + 40);
      if (v223)
      {
        (*(void (**)(uint64_t, NWConcrete_nw_agent_client *))(v223 + 16))(v223, v218);
        goto LABEL_458;
      }
      uint64_t v224 = __nwlog_obj();
      *(_DWORD *)id v428 = 136446210;
      char v429 = "nw_agent_read_message_on_queue";
      uint64_t v225 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v420 = 0;
      if (__nwlog_fault(v225, &type, &v420))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          id v226 = __nwlog_obj();
          os_log_type_t v227 = type;
          if (os_log_type_enabled(v226, type))
          {
            *(_DWORD *)id v428 = 136446210;
            char v429 = "nw_agent_read_message_on_queue";
            _os_log_impl(&dword_1830D4000, v226, v227, "%{public}s No handler for CLOSE_NEXUS", v428, 0xCu);
          }
          goto LABEL_436;
        }
        if (v420)
        {
          char v228 = (char *)__nw_create_backtrace_string();
          int v229 = __nwlog_obj();
          os_log_type_t v230 = type;
          BOOL v231 = os_log_type_enabled(v229, type);
          if (v228)
          {
            if (v231)
            {
              *(_DWORD *)id v428 = 136446466;
              char v429 = "nw_agent_read_message_on_queue";
              __int16 v430 = 2082;
              uint64_t v431 = v228;
              _os_log_impl(&dword_1830D4000, v229, v230, "%{public}s No handler for CLOSE_NEXUS, dumping backtrace:%{public}s", v428, 0x16u);
            }

            free(v228);
          }
          else
          {
            if (v231)
            {
              *(_DWORD *)id v428 = 136446210;
              char v429 = "nw_agent_read_message_on_queue";
              _os_log_impl(&dword_1830D4000, v229, v230, "%{public}s No handler for CLOSE_NEXUS, no backtrace", v428, 0xCu);
            }
          }
        }
        else
        {
          id v226 = __nwlog_obj();
          os_log_type_t v232 = type;
          if (os_log_type_enabled(v226, type))
          {
            *(_DWORD *)id v428 = 136446210;
            char v429 = "nw_agent_read_message_on_queue";
            _os_log_impl(&dword_1830D4000, v226, v232, "%{public}s No handler for CLOSE_NEXUS, backtrace limit exceeded", v428, 0xCu);
          }
LABEL_436:
        }
      }
      if (v225) {
        free(v225);
      }
LABEL_458:

      _Block_object_dispose(out, 8);
      int v205 = *v117;
    }
  }
  if (v205 == 18)
  {
    *(void *)out = 0;
    *(void *)&out[8] = out;
    *(void *)&out[16] = 0x3032000000;
    *(void *)&out[24] = __Block_byref_object_copy__80774;
    *(void *)&out[32] = __Block_byref_object_dispose__80775;
    *(void *)&out[40] = 0;
    v325[0] = MEMORY[0x1E4F143A8];
    v325[1] = 3221225472;
    nw_endpoint_t v326 = ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke_188;
    nw_endpoint_t v327 = &unk_1E524B978;
    uint64_t v329 = out;
    os_log_type_t v328 = v312;
    os_log_type_t v241 = v328;
    uint64_t v242 = v325;
    os_unfair_lock_lock(lock);
    v326((uint64_t)v242);
    os_unfair_lock_unlock(lock);

    uint64_t v243 = *(void *)(*(void *)&out[8] + 40);
    if (v243)
    {
      v322[0] = MEMORY[0x1E4F143A8];
      v322[1] = 3221225472;
      v322[2] = ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke_2_189;
      v322[3] = &unk_1E524A108;
      id v323 = v241;
      uint64_t v324 = v310;
      (*(void (**)(uint64_t, NWConcrete_nw_agent_client *, BOOL, void *))(v243 + 16))(v243, v324, v308, v322);

      goto LABEL_480;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v244 = (id)gLogObj;
    *(_DWORD *)id v428 = 136446210;
    char v429 = "nw_agent_read_message_on_queue";
    char v245 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v420 = 0;
    if (__nwlog_fault(v245, &type, &v420))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v246 = __nwlog_obj();
        os_log_type_t v247 = type;
        if (os_log_type_enabled(v246, type))
        {
          *(_DWORD *)id v428 = 136446210;
          char v429 = "nw_agent_read_message_on_queue";
          _os_log_impl(&dword_1830D4000, v246, v247, "%{public}s No handler for ADD_GROUP_MEMBERS", v428, 0xCu);
        }
        goto LABEL_466;
      }
      if (v420)
      {
        nw_endpoint_t v248 = (char *)__nw_create_backtrace_string();
        int v249 = __nwlog_obj();
        os_log_type_t v250 = type;
        BOOL v251 = os_log_type_enabled(v249, type);
        if (v248)
        {
          if (v251)
          {
            *(_DWORD *)id v428 = 136446466;
            char v429 = "nw_agent_read_message_on_queue";
            __int16 v430 = 2082;
            uint64_t v431 = v248;
            _os_log_impl(&dword_1830D4000, v249, v250, "%{public}s No handler for ADD_GROUP_MEMBERS, dumping backtrace:%{public}s", v428, 0x16u);
          }

          free(v248);
        }
        else
        {
          if (v251)
          {
            *(_DWORD *)id v428 = 136446210;
            char v429 = "nw_agent_read_message_on_queue";
            _os_log_impl(&dword_1830D4000, v249, v250, "%{public}s No handler for ADD_GROUP_MEMBERS, no backtrace", v428, 0xCu);
          }
        }
      }
      else
      {
        uint64_t v246 = __nwlog_obj();
        os_log_type_t v252 = type;
        if (os_log_type_enabled(v246, type))
        {
          *(_DWORD *)id v428 = 136446210;
          char v429 = "nw_agent_read_message_on_queue";
          _os_log_impl(&dword_1830D4000, v246, v252, "%{public}s No handler for ADD_GROUP_MEMBERS, backtrace limit exceeded", v428, 0xCu);
        }
LABEL_466:
      }
    }
    if (v245) {
      free(v245);
    }
LABEL_480:

    _Block_object_dispose(out, 8);
    int v205 = *v117;
  }
  if (v205 == 19)
  {
    *(void *)out = 0;
    *(void *)&out[8] = out;
    *(void *)&out[16] = 0x3032000000;
    *(void *)&out[24] = __Block_byref_object_copy__80774;
    *(void *)&out[32] = __Block_byref_object_dispose__80775;
    *(void *)&out[40] = 0;
    v317[0] = MEMORY[0x1E4F143A8];
    v317[1] = 3221225472;
    BOOL v318 = ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke_190;
    nw_endpoint_t v319 = &unk_1E524B978;
    uint64_t v321 = out;
    uint64_t v320 = v312;
    int v253 = v320;
    char v254 = v317;
    os_unfair_lock_lock(lock);
    v318((uint64_t)v254);
    os_unfair_lock_unlock(lock);

    uint64_t v255 = *(void *)(*(void *)&out[8] + 40);
    if (v255)
    {
      v314[0] = MEMORY[0x1E4F143A8];
      v314[1] = 3221225472;
      v314[2] = ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke_2_191;
      v314[3] = &unk_1E524A108;
      os_log_type_t v315 = v253;
      uint64_t v316 = v310;
      (*(void (**)(uint64_t, NWConcrete_nw_agent_client *, BOOL, void *))(v255 + 16))(v255, v316, v308, v314);

      goto LABEL_502;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v256 = (id)gLogObj;
    *(_DWORD *)id v428 = 136446210;
    char v429 = "nw_agent_read_message_on_queue";
    char v257 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v420 = 0;
    if (__nwlog_fault(v257, &type, &v420))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v258 = __nwlog_obj();
        os_log_type_t v259 = type;
        if (os_log_type_enabled(v258, type))
        {
          *(_DWORD *)id v428 = 136446210;
          char v429 = "nw_agent_read_message_on_queue";
          _os_log_impl(&dword_1830D4000, v258, v259, "%{public}s No handler for REMOVE_GROUP_MEMBERS", v428, 0xCu);
        }
        goto LABEL_488;
      }
      if (v420)
      {
        uint64_t v260 = (char *)__nw_create_backtrace_string();
        nw_endpoint_t v261 = __nwlog_obj();
        os_log_type_t v262 = type;
        BOOL v263 = os_log_type_enabled(v261, type);
        if (v260)
        {
          if (v263)
          {
            *(_DWORD *)id v428 = 136446466;
            char v429 = "nw_agent_read_message_on_queue";
            __int16 v430 = 2082;
            uint64_t v431 = v260;
            _os_log_impl(&dword_1830D4000, v261, v262, "%{public}s No handler for REMOVE_GROUP_MEMBERS, dumping backtrace:%{public}s", v428, 0x16u);
          }

          free(v260);
        }
        else
        {
          if (v263)
          {
            *(_DWORD *)id v428 = 136446210;
            char v429 = "nw_agent_read_message_on_queue";
            _os_log_impl(&dword_1830D4000, v261, v262, "%{public}s No handler for REMOVE_GROUP_MEMBERS, no backtrace", v428, 0xCu);
          }
        }
      }
      else
      {
        v258 = __nwlog_obj();
        os_log_type_t v264 = type;
        if (os_log_type_enabled(v258, type))
        {
          *(_DWORD *)id v428 = 136446210;
          char v429 = "nw_agent_read_message_on_queue";
          _os_log_impl(&dword_1830D4000, v258, v264, "%{public}s No handler for REMOVE_GROUP_MEMBERS, backtrace limit exceeded", v428, 0xCu);
        }
LABEL_488:
      }
    }
    if (v257) {
      free(v257);
    }
LABEL_502:

    _Block_object_dispose(out, 8);
  }
  id v265 = (void *)v417[3];
  if (v265)
  {
    free(v265);
    v417[3] = 0;
  }

LABEL_506:
  _Block_object_dispose(buf, 8);

LABEL_507:
  _Block_object_dispose(&v416, 8);

  return v311;
}

void sub_18343E6F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35)
{
  _Block_object_dispose((const void *)(v36 - 192), 8);
  _Block_object_dispose((const void *)(v36 - 240), 8);

  _Block_object_dispose(&STACK[0x578], 8);
  _Unwind_Resume(a1);
}

void ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke_180(uint64_t a1)
{
  int v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 776));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke_163(uint64_t a1)
{
}

void *__swift_memcpy8_8(void *result, void *a2)
{
  *uint64_t result = *a2;
  return result;
}

void __nw_connection_set_adaptive_write_handler_block_invoke(uint64_t a1)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  id v1 = *(void **)(a1 + 40);
  int v2 = *(_DWORD *)(a1 + 48);
  id v3 = *(id *)(*(void *)(a1 + 32) + 144);
  id v4 = v1;
  if (!v3)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v23 = (id)gLogObj;
    *(_DWORD *)int buf = 136446210;
    uint64_t v32 = "nw_endpoint_handler_set_adaptive_write_handler";
    os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v29 = 0;
    if (__nwlog_fault(v12, &type, &v29))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v13 = (id)gLogObj;
        os_log_type_t v24 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)int buf = 136446210;
          uint64_t v32 = "nw_endpoint_handler_set_adaptive_write_handler";
          _os_log_impl(&dword_1830D4000, v13, v24, "%{public}s called with null handler", buf, 0xCu);
        }
        goto LABEL_37;
      }
      if (!v29)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v13 = (id)gLogObj;
        os_log_type_t v28 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)int buf = 136446210;
          uint64_t v32 = "nw_endpoint_handler_set_adaptive_write_handler";
          _os_log_impl(&dword_1830D4000, v13, v28, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_37;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v13 = (id)gLogObj;
      os_log_type_t v26 = type;
      BOOL v27 = os_log_type_enabled(v13, type);
      if (!backtrace_string)
      {
        if (v27)
        {
          *(_DWORD *)int buf = 136446210;
          uint64_t v32 = "nw_endpoint_handler_set_adaptive_write_handler";
          _os_log_impl(&dword_1830D4000, v13, v26, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
        goto LABEL_37;
      }
      if (v27)
      {
        *(_DWORD *)int buf = 136446466;
        uint64_t v32 = "nw_endpoint_handler_set_adaptive_write_handler";
        __int16 v33 = 2082;
        id v34 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v13, v26, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
LABEL_38:
    if (!v12) {
      goto LABEL_40;
    }
LABEL_39:
    free(v12);
    goto LABEL_40;
  }
  nw_framer_t v5 = (NWConcrete_nw_endpoint_handler *)v3;
  uint64_t mode = v5->mode;

  if (mode == 2)
  {
    uint64_t v7 = nw_endpoint_handler_copy_flow(v5);
    unsigned int v8 = _Block_copy(v4);
    BOOL v9 = (void *)*((void *)v7 + 128);
    *((void *)v7 + 128) = v8;

    *((_DWORD *)v7 + 253) = v2;
    if ((*((unsigned char *)v7 + 33) & 4) != 0) {
      nw_endpoint_handler_register_adaptive_write_handler(v5);
    }

    goto LABEL_40;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v10 = (id)gLogObj;
  if (mode > 5) {
    uint64_t v11 = "unknown-mode";
  }
  else {
    uint64_t v11 = off_1E523FB08[mode];
  }
  *(_DWORD *)int buf = 136446722;
  uint64_t v32 = "nw_endpoint_handler_set_adaptive_write_handler";
  __int16 v33 = 2082;
  id v34 = (void *)v11;
  __int16 v35 = 2082;
  uint64_t v36 = "flow";
  os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v29 = 0;
  if (!__nwlog_fault(v12, &type, &v29)) {
    goto LABEL_38;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v13 = (id)gLogObj;
    os_log_type_t v14 = type;
    if (os_log_type_enabled(v13, type))
    {
      if (mode > 5) {
        int v15 = "unknown-mode";
      }
      else {
        int v15 = off_1E523FB08[mode];
      }
      *(_DWORD *)int buf = 136446722;
      uint64_t v32 = "nw_endpoint_handler_set_adaptive_write_handler";
      __int16 v33 = 2082;
      id v34 = (void *)v15;
      __int16 v35 = 2082;
      uint64_t v36 = "flow";
      _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
    }
LABEL_37:

    goto LABEL_38;
  }
  if (!v29)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v13 = (id)gLogObj;
    os_log_type_t v20 = type;
    if (os_log_type_enabled(v13, type))
    {
      if (mode > 5) {
        size_t v21 = "unknown-mode";
      }
      else {
        size_t v21 = off_1E523FB08[mode];
      }
      *(_DWORD *)int buf = 136446722;
      uint64_t v32 = "nw_endpoint_handler_set_adaptive_write_handler";
      __int16 v33 = 2082;
      id v34 = (void *)v21;
      __int16 v35 = 2082;
      uint64_t v36 = "flow";
      _os_log_impl(&dword_1830D4000, v13, v20, "%{public}s Handler is in mode %{public}s, expected %{public}s, backtrace limit exceeded", buf, 0x20u);
    }
    goto LABEL_37;
  }
  int v16 = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_t v13 = (id)gLogObj;
  os_log_type_t v17 = type;
  BOOL v18 = os_log_type_enabled(v13, type);
  if (!v16)
  {
    if (v18)
    {
      if (mode > 5) {
        os_log_type_t v22 = "unknown-mode";
      }
      else {
        os_log_type_t v22 = off_1E523FB08[mode];
      }
      *(_DWORD *)int buf = 136446722;
      uint64_t v32 = "nw_endpoint_handler_set_adaptive_write_handler";
      __int16 v33 = 2082;
      id v34 = (void *)v22;
      __int16 v35 = 2082;
      uint64_t v36 = "flow";
      _os_log_impl(&dword_1830D4000, v13, v17, "%{public}s Handler is in mode %{public}s, expected %{public}s, no backtrace", buf, 0x20u);
    }
    goto LABEL_37;
  }
  if (v18)
  {
    if (mode > 5) {
      socklen_t v19 = "unknown-mode";
    }
    else {
      socklen_t v19 = off_1E523FB08[mode];
    }
    *(_DWORD *)int buf = 136446978;
    uint64_t v32 = "nw_endpoint_handler_set_adaptive_write_handler";
    __int16 v33 = 2082;
    id v34 = (void *)v19;
    __int16 v35 = 2082;
    uint64_t v36 = "flow";
    __int16 v37 = 2082;
    id v38 = v16;
    _os_log_impl(&dword_1830D4000, v13, v17, "%{public}s Handler is in mode %{public}s, expected %{public}s, dumping backtrace:%{public}s", buf, 0x2Au);
  }

  free(v16);
  if (v12) {
    goto LABEL_39;
  }
LABEL_40:
}

void sub_18343F254(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_protocol_webtransport_session_remove_listen_handler(nw_protocol *a1, nw_listen_protocol *a2)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t handle = (char *)a1->handle;
    if (handle)
    {
      if ((handle[548] & 2) == 0)
      {
        if (gLogDatapath)
        {
          __int16 v33 = __nwlog_obj();
          if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
          {
            int v34 = *((_DWORD *)handle + 115);
            *(_DWORD *)int buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_session_remove_listen_handler";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = handle + 464;
            *(_WORD *)&unsigned char buf[22] = 2080;
            BOOL v46 = " ";
            *(_WORD *)uint64_t v47 = 1024;
            *(_DWORD *)&v47[2] = v34;
            _os_log_impl(&dword_1830D4000, v33, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> called", buf, 0x26u);
          }
        }
      }
      int v4 = (handle[548] >> 1) & 1;
      if (!gLogDatapath) {
        LOBYTE(v4) = 1;
      }
      if (*((nw_listen_protocol **)handle + 50) != a2)
      {
        if (v4) {
          return 1;
        }
        __int16 v35 = __nwlog_obj();
        if (!os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG)) {
          return 1;
        }
        int v36 = *((_DWORD *)handle + 115);
        *(_DWORD *)int buf = 136446978;
        *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_session_remove_listen_handler";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = handle + 464;
        *(_WORD *)&unsigned char buf[22] = 2080;
        BOOL v46 = " ";
        *(_WORD *)uint64_t v47 = 1024;
        *(_DWORD *)&v47[2] = v36;
        unsigned int v8 = "%{public}s %{public}s%s<i%u> ignoring request to remove webtransport listen handler, does not match our handler";
        BOOL v9 = v35;
        os_log_type_t v10 = OS_LOG_TYPE_DEBUG;
LABEL_15:
        _os_log_impl(&dword_1830D4000, v9, v10, v8, buf, 0x26u);
        return 1;
      }
      if ((v4 & 1) == 0)
      {
        os_log_type_t v41 = __nwlog_obj();
        if (os_log_type_enabled(v41, OS_LOG_TYPE_DEBUG))
        {
          int v42 = *((_DWORD *)handle + 115);
          *(_DWORD *)int buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_session_remove_listen_handler";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = handle + 464;
          *(_WORD *)&unsigned char buf[22] = 2080;
          BOOL v46 = " ";
          *(_WORD *)uint64_t v47 = 1024;
          *(_DWORD *)&v47[2] = v42;
          _os_log_impl(&dword_1830D4000, v41, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> removing protocol listen handler", buf, 0x26u);
        }
      }
      handle[548] |= 8u;
      *((void *)handle + 50) = 0;
      a2->protocol_handler = 0;
      if (*((_DWORD *)handle + 111) == 5)
      {
        if ((handle[548] & 2) != 0) {
          return 1;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v6 = gLogObj;
        if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO)) {
          return 1;
        }
        int v7 = *((_DWORD *)handle + 115);
        *(_DWORD *)int buf = 136446978;
        *(void *)&uint8_t buf[4] = "nw_webtransport_session_terminate";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = handle + 464;
        *(_WORD *)&unsigned char buf[22] = 2080;
        BOOL v46 = " ";
        *(_WORD *)uint64_t v47 = 1024;
        *(_DWORD *)&v47[2] = v7;
        unsigned int v8 = "%{public}s %{public}s%s<i%u> Session already terminated, ignoring";
        BOOL v9 = v6;
        os_log_type_t v10 = OS_LOG_TYPE_INFO;
        goto LABEL_15;
      }
      int v11 = *((_DWORD *)handle + 113);
      if (v11)
      {
        if ((handle[548] & 2) != 0) {
          goto LABEL_24;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v12 = gLogObj;
        if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO)) {
          goto LABEL_24;
        }
        int v13 = *((_DWORD *)handle + 115);
        *(_DWORD *)int buf = 136447234;
        *(void *)&uint8_t buf[4] = "nw_webtransport_session_terminate";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = handle + 464;
        *(_WORD *)&unsigned char buf[22] = 2080;
        BOOL v46 = " ";
        *(_WORD *)uint64_t v47 = 1024;
        *(_DWORD *)&v47[2] = v13;
        __int16 v48 = 1024;
        int v49 = v11;
        os_log_type_t v14 = "%{public}s %{public}s%s<i%u> Closing webtransport session with error %{darwin.errno}d";
        int v15 = v12;
        uint32_t v16 = 44;
      }
      else
      {
        if ((handle[548] & 2) != 0) {
          goto LABEL_24;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v17 = gLogObj;
        if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO)) {
          goto LABEL_24;
        }
        int v18 = *((_DWORD *)handle + 115);
        *(_DWORD *)int buf = 136446978;
        *(void *)&uint8_t buf[4] = "nw_webtransport_session_terminate";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = handle + 464;
        *(_WORD *)&unsigned char buf[22] = 2080;
        BOOL v46 = " ";
        *(_WORD *)uint64_t v47 = 1024;
        *(_DWORD *)&v47[2] = v18;
        os_log_type_t v14 = "%{public}s %{public}s%s<i%u> Closing webtransport session without error";
        int v15 = v17;
        uint32_t v16 = 38;
      }
      _os_log_impl(&dword_1830D4000, v15, OS_LOG_TYPE_INFO, v14, buf, v16);
LABEL_24:
      *((_DWORD *)handle + 111) = 5;
      socklen_t v19 = (char *)*((void *)handle + 23);
      if (v19)
      {
        *(void *)int buf = MEMORY[0x1E4F143A8];
        *(void *)&buf[8] = 0x40000000;
        *(void *)&buf[16] = ___ZL33nw_webtransport_session_terminateP23nw_webtransport_sessioni_block_invoke;
        BOOL v46 = (const char *)&__block_descriptor_tmp_26_33833;
        *(_DWORD *)uint64_t v47 = v11;
        nw_hash_table_apply(v19, (uint64_t)buf);
      }
      uint64_t v20 = *((void *)handle + 53);
      if (v20)
      {
        size_t v21 = *(void **)(v20 + 48);
        if (v11) {
          nw_protocol_error(*(void **)(v20 + 48), *((void *)handle + 53));
        }
        nw_protocol_disconnected(v21, v20);
      }
      uint64_t v22 = *((void *)handle + 41);
      if (v22)
      {
        if (v11)
        {
          do
          {
            uint64_t v23 = *(void *)(v22 + 112);
            os_log_type_t v24 = *(void **)(v22 + 48);
            nw_protocol_error(v24, v22);
            uint64_t v25 = v22;
            uint64_t v22 = v23;
            nw_protocol_disconnected(v24, v25);
          }
          while (v23);
        }
        else
        {
          do
          {
            uint64_t v26 = *(void *)(v22 + 112);
            nw_protocol_disconnected(*(void **)(v22 + 48), v22);
            uint64_t v22 = v26;
          }
          while (v26);
        }
      }
      uint64_t v27 = *((void *)handle + 52);
      if (v27)
      {
        os_log_type_t v28 = *(void **)(v27 + 48);
        if (v11) {
          nw_protocol_error(*(void **)(v27 + 48), *((void *)handle + 52));
        }
        nw_protocol_disconnected(v28, v27);
      }
      if (*((void *)handle + 4))
      {
        nw_protocol_remove_instance((uint64_t)handle);
        nw_protocol_disconnect(*((void **)handle + 4), (uint64_t)handle);
      }
      return 1;
    }
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_session_remove_listen_handler";
    char v29 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v43 = 0;
    if (!__nwlog_fault(v29, &type, &v43)) {
      goto LABEL_74;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v30 = __nwlog_obj();
      os_log_type_t v31 = type;
      if (os_log_type_enabled(v30, type))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_session_remove_listen_handler";
        uint64_t v32 = "%{public}s called with null webtransport_session";
        goto LABEL_73;
      }
      goto LABEL_74;
    }
    if (!v43)
    {
      id v30 = __nwlog_obj();
      os_log_type_t v31 = type;
      if (os_log_type_enabled(v30, type))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_session_remove_listen_handler";
        uint64_t v32 = "%{public}s called with null webtransport_session, backtrace limit exceeded";
        goto LABEL_73;
      }
      goto LABEL_74;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    id v30 = __nwlog_obj();
    os_log_type_t v31 = type;
    BOOL v40 = os_log_type_enabled(v30, type);
    if (!backtrace_string)
    {
      if (v40)
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_session_remove_listen_handler";
        uint64_t v32 = "%{public}s called with null webtransport_session, no backtrace";
        goto LABEL_73;
      }
      goto LABEL_74;
    }
    if (v40)
    {
      *(_DWORD *)int buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_session_remove_listen_handler";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = backtrace_string;
      uint64_t v39 = "%{public}s called with null webtransport_session, dumping backtrace:%{public}s";
      goto LABEL_61;
    }
    goto LABEL_62;
  }
  __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_session_remove_listen_handler";
  char v29 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v43 = 0;
  if (!__nwlog_fault(v29, &type, &v43)) {
    goto LABEL_74;
  }
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v43)
    {
      id v30 = __nwlog_obj();
      os_log_type_t v31 = type;
      if (os_log_type_enabled(v30, type))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_session_remove_listen_handler";
        uint64_t v32 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_73;
      }
      goto LABEL_74;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    id v30 = __nwlog_obj();
    os_log_type_t v31 = type;
    BOOL v38 = os_log_type_enabled(v30, type);
    if (!backtrace_string)
    {
      if (v38)
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_session_remove_listen_handler";
        uint64_t v32 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_73;
      }
      goto LABEL_74;
    }
    if (v38)
    {
      *(_DWORD *)int buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_session_remove_listen_handler";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = backtrace_string;
      uint64_t v39 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_61:
      _os_log_impl(&dword_1830D4000, v30, v31, v39, buf, 0x16u);
    }
LABEL_62:
    free(backtrace_string);
    goto LABEL_74;
  }
  id v30 = __nwlog_obj();
  os_log_type_t v31 = type;
  if (os_log_type_enabled(v30, type))
  {
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_session_remove_listen_handler";
    uint64_t v32 = "%{public}s called with null protocol";
LABEL_73:
    _os_log_impl(&dword_1830D4000, v30, v31, v32, buf, 0xCu);
  }
LABEL_74:
  if (v29) {
    free(v29);
  }
  return 0;
}

void ___ZL36nw_masque_connection_pair_read_innerP36NWConcrete_nw_masque_connection_pair_block_invoke(uint64_t a1, void *a2, void *a3, BOOL a4, void *a5)
{
  uint64_t v91 = *MEMORY[0x1E4F143B8];
  BOOL v9 = a2;
  os_log_type_t v10 = a3;
  int v11 = v9;
  uint64_t v12 = v10;
  id v71 = a5;
  nw_content_context_t context = v12;
  if (v11)
  {
    size_t size = dispatch_data_get_size(v11);
    if (!v12 || size) {
      goto LABEL_20;
    }
  }
  else if (!v12)
  {
    goto LABEL_20;
  }
  if (nw_protocol_copy_http_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_15_74223);
  }
  os_log_type_t v14 = (id)nw_protocol_copy_http_definition_http_definition;
  nw_protocol_metadata_t v15 = nw_content_context_copy_protocol_metadata(v12, v14);

  if (v15 && nw_http_metadata_is_capsule(v15))
  {
    capsule_os_log_type_t type = nw_http_metadata_get_capsule_type(v15);
    uint64_t v17 = nw_http_metadata_copy_capsule_data(v15);
    if (gLogDatapath)
    {
      __int16 v56 = __nwlog_obj();
      if (os_log_type_enabled(v56, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v57 = *(void *)(*(void *)(a1 + 32) + 16);
        *(_DWORD *)int buf = 136446978;
        *(void *)&uint8_t buf[4] = "nw_masque_connection_pair_read_inner_block_invoke";
        *(_WORD *)&unsigned char buf[12] = 2114;
        *(void *)&buf[14] = v57;
        *(_WORD *)&unsigned char buf[22] = 2048;
        unint64_t v84 = capsule_type;
        __int16 v85 = 2112;
        int v86 = v17;
        _os_log_impl(&dword_1830D4000, v56, OS_LOG_TYPE_DEBUG, "%{public}s %{public}@ Received capsule type %llx with data %@", buf, 0x2Au);
      }
    }
    if (capsule_type >> 1 == 8385024)
    {
      if (capsule_type == 16770049) {
        uint64_t v18 = 16770051;
      }
      else {
        uint64_t v18 = 16770050;
      }
      LOBYTE(__n) = 0;
      nw_dispatch_data_copyout_from_offset(v17, (uint64_t)&__n, 1, 0);
      memset(__src, 0, 20);
      nw_dispatch_data_copyout_from_offset(v17, (uint64_t)__src, __n, 1);
      id v19 = objc_alloc(MEMORY[0x1E4F1C9B8]);
      uint64_t v20 = (void *)[v19 initWithBytes:__src length:__n];
      uint64_t v69 = v18;
      if (gLogDatapath)
      {
        __int16 v58 = __nwlog_obj();
        if (os_log_type_enabled(v58, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v59 = *(void *)(*(void *)(a1 + 32) + 16);
          os_log_type_t v60 = "target";
          if (capsule_type == 16770048) {
            os_log_type_t v60 = "client";
          }
          *(_DWORD *)int buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_masque_connection_pair_read_inner_block_invoke";
          *(_WORD *)&unsigned char buf[12] = 2114;
          *(void *)&buf[14] = v59;
          *(_WORD *)&unsigned char buf[22] = 2082;
          unint64_t v84 = (unint64_t)v60;
          __int16 v85 = 2112;
          int v86 = v20;
          _os_log_impl(&dword_1830D4000, v58, OS_LOG_TYPE_DEBUG, "%{public}s %{public}@ Received %{public}s CID %@, acking", buf, 0x2Au);
        }
      }
      size_t v21 = __n;
      uint64_t v22 = *(void *)(a1 + 32);
      if (capsule_type == 16770048)
      {
        *(_WORD *)(v22 + 72) = __n;
        memcpy((void *)(*(void *)(a1 + 32) + 74), __src, v21);
        BYTE2(v82) = 0;
        nw_dispatch_data_copyout_from_offset(v17, (uint64_t)&v82 + 2, 1, v21 + 1);
        memset(buf, 0, 20);
        nw_dispatch_data_copyout_from_offset(v17, (uint64_t)buf, BYTE2(v82), __n + 2);
        *(_WORD *)(*(void *)(a1 + 32) + 94) = BYTE2(v82);
        memcpy((void *)(*(void *)(a1 + 32) + 96), buf, *(unsigned __int16 *)(*(void *)(a1 + 32) + 94));
        if (v20) {
          uint64_t v23 = (void *)[v20 _createDispatchData];
        }
        else {
          uint64_t v23 = 0;
        }
      }
      else
      {
        *(_WORD *)(v22 + 136) = __n;
        memcpy((void *)(*(void *)(a1 + 32) + 138), __src, v21);
        if (gLogDatapath)
        {
          int v63 = __nwlog_obj();
          if (os_log_type_enabled(v63, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v64 = *(void *)(*(void *)(a1 + 32) + 16);
            *(_DWORD *)int buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_masque_connection_pair_read_inner_block_invoke";
            *(_WORD *)&unsigned char buf[12] = 2114;
            *(void *)&buf[14] = v64;
            _os_log_impl(&dword_1830D4000, v63, OS_LOG_TYPE_DEBUG, "%{public}s %{public}@ Setting up forwarded mode connections", buf, 0x16u);
          }
        }
        if (nw_protocol_demux_copy_definition::onceToken != -1) {
          dispatch_once(&nw_protocol_demux_copy_definition::onceToken, &__block_literal_global_8_26174);
        }
        if (nw_protocol_demux_copy_definition::definition)
        {
          uint64_t v32 = os_retain((void *)nw_protocol_demux_copy_definition::definition);
          options = nw_protocol_create_options(v32);
          if (v32) {
            os_release(v32);
          }
        }
        else
        {
          options = nw_protocol_create_options(0);
        }
        nw_demux_options_add_pattern(options, 1, *(unsigned __int16 *)(*(void *)(a1 + 32) + 136), *(void *)(a1 + 32) + 138, 0);
        nw_masque_connection_pair_setup_inner_direct_connections(*(void **)(a1 + 32), options);
        id v46 = objc_alloc_init(MEMORY[0x1E4F1CA58]);
        [v46 appendBytes:&__n length:1];
        [v46 appendBytes:__src length:__n];
        [v46 appendBytes:&__n length:1];
        [v46 appendBytes:__src length:__n];
        buf[0] = 0;
        [v46 appendBytes:buf length:1];
        if (v46) {
          uint64_t v23 = (void *)[v46 _createDispatchData];
        }
        else {
          uint64_t v23 = 0;
        }
      }
      if (v23)
      {
        uint64_t v47 = nw_content_context_create("ack cid");
        metadata_for_capsule = nw_http_create_metadata_for_capsule(v69, v23);
        nw_content_context_set_metadata_for_protocol(v47, metadata_for_capsule);
        nw_connection_send(*(nw_connection_t *)(*(void *)(*(void *)(a1 + 32) + 16) + 48), 0, v47, 1, &__block_literal_global_24376);
      }
    }
    else if (capsule_type == 16770304)
    {
      if (nw_protocol_demux_copy_definition::onceToken != -1) {
        dispatch_once(&nw_protocol_demux_copy_definition::onceToken, &__block_literal_global_8_26174);
      }
      if (nw_protocol_demux_copy_definition::definition)
      {
        os_log_type_t v31 = os_retain((void *)nw_protocol_demux_copy_definition::definition);
        BOOL v70 = nw_protocol_create_options(v31);
        if (v31) {
          os_release(v31);
        }
      }
      else
      {
        BOOL v70 = nw_protocol_create_options(0);
      }
      if (!*(void *)(*(void *)(a1 + 32) + 192))
      {
        int v34 = nw_demux_create_options();
        uint64_t v35 = *(void *)(a1 + 32);
        int v36 = *(void **)(v35 + 192);
        *(void *)(v35 + 192) = v34;
      }
      size_t v37 = dispatch_data_get_size(v17);
      *(void *)int buf = 0;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x2020000000;
      unint64_t v84 = 0;
      if (v37)
      {
        size_t v38 = v37;
        for (unint64_t i = 0; i < v38; unint64_t i = *(void *)(*(void *)&buf[8] + 24))
        {
          int v82 = 0;
          nw_dispatch_data_copyout_from_offset(v17, (uint64_t)&v82 + 2, 2, i);
          uint64_t v42 = *(void *)(*(void *)&buf[8] + 24) + 2;
          *(void *)(*(void *)&buf[8] + 24) = v42;
          nw_dispatch_data_copyout_from_offset(v17, (uint64_t)&v82, 2, v42);
          *(void *)(*(void *)&buf[8] + 24) += 2;
          *(void *)unint64_t __src = 0;
          *(void *)&__src[8] = __src;
          *(void *)&__src[16] = 0x2020000000;
          uint64_t v90 = 0;
          v81[0] = MEMORY[0x1E4F143A8];
          v81[1] = 3221225472;
          v81[2] = ___ZL36nw_masque_connection_pair_read_innerP36NWConcrete_nw_masque_connection_pair_block_invoke_339;
          v81[3] = &unk_1E523F780;
          void v81[4] = buf;
          v81[5] = __src;
          dispatch_data_apply(v17, v81);
          uint64_t v43 = *(void *)(*(void *)&buf[8] + 24) + HIWORD(v82);
          *(void *)(*(void *)&buf[8] + 24) = v43;
          char v80 = 0;
          nw_dispatch_data_copyout_from_offset(v17, (uint64_t)&v80, 1, v43);
          ++*(void *)(*(void *)&buf[8] + 24);
          size_t __n = 0;
          p_n = &__n;
          uint64_t v78 = 0x2020000000;
          uint64_t v79 = 0;
          if (v80)
          {
            applier[0] = MEMORY[0x1E4F143A8];
            applier[1] = 3221225472;
            applier[2] = ___ZL36nw_masque_connection_pair_read_innerP36NWConcrete_nw_masque_connection_pair_block_invoke_2;
            applier[3] = &unk_1E523F780;
            void applier[4] = buf;
            void applier[5] = &__n;
            dispatch_data_apply(v17, applier);
            unsigned int v40 = HIWORD(v82);
            *(void *)(*(void *)&buf[8] + 24) += HIWORD(v82);
            uint64_t v41 = p_n[3];
          }
          else
          {
            uint64_t v41 = 0;
            unsigned int v40 = HIWORD(v82);
          }
          nw_demux_options_add_pattern(*(void **)(*(void *)(a1 + 32) + 192), v82, v40, *(void *)(*(void *)&__src[8] + 24), v41);
          nw_demux_options_add_pattern(v70, v82, HIWORD(v82), *(void *)(*(void *)&__src[8] + 24), p_n[3]);
          _Block_object_dispose(&__n, 8);
          _Block_object_dispose(__src, 8);
        }
      }
      if (gLogDatapath)
      {
        os_log_type_t v65 = __nwlog_obj();
        if (os_log_type_enabled(v65, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v66 = *(void *)(*(void *)(a1 + 32) + 16);
          *(_DWORD *)unint64_t __src = 136446466;
          *(void *)&__src[4] = "nw_masque_connection_pair_read_inner_block_invoke_3";
          *(_WORD *)&__src[12] = 2114;
          *(void *)&__src[14] = v66;
          _os_log_impl(&dword_1830D4000, v65, OS_LOG_TYPE_DEBUG, "%{public}s %{public}@ Setting up forwarded mode connections", __src, 0x16u);
        }
      }
      nw_masque_connection_pair_setup_inner_direct_connections(*(void **)(a1 + 32), v70);
      if (gLogDatapath)
      {
        nw_endpoint_t v67 = __nwlog_obj();
        if (os_log_type_enabled(v67, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v68 = *(void *)(*(void *)(a1 + 32) + 16);
          *(_DWORD *)unint64_t __src = 136446466;
          *(void *)&__src[4] = "nw_masque_connection_pair_read_inner_block_invoke";
          *(_WORD *)&__src[12] = 2114;
          *(void *)&__src[14] = v68;
          _os_log_impl(&dword_1830D4000, v67, OS_LOG_TYPE_DEBUG, "%{public}s %{public}@ Received demux patterns, acking", __src, 0x16u);
        }
      }
      uint64_t v44 = nw_content_context_create("ack pattern");
      os_log_type_t v45 = nw_http_create_metadata_for_capsule(16770305, v17);
      nw_content_context_set_metadata_for_protocol(v44, v45);
      nw_connection_send(*(nw_connection_t *)(*(void *)(*(void *)(a1 + 32) + 16) + 48), 0, v44, 1, &__block_literal_global_24376);

      _Block_object_dispose(buf, 8);
    }
    nw_masque_connection_pair_read_inner(*(NWConcrete_nw_masque_connection_pair **)(a1 + 32));

    goto LABEL_76;
  }

LABEL_20:
  if (*(void *)(*(void *)(a1 + 32) + 48))
  {
    if (!v71 || (os_log_type_t v24 = v71, v25 = v24[3], v24, v25 == 40))
    {
      BOOL v26 = 0;
      uint64_t v27 = &__block_literal_global_6_42258;
      if (!context || !a4) {
        goto LABEL_70;
      }
      os_log_type_t v28 = context;
      if (v28 != &__block_literal_global_42249 && v28 != &__block_literal_global_10_42276)
      {
        if (v28 == &__block_literal_global_6_42258 || v28 == &__block_literal_global_8_42267)
        {
        }
        else
        {
          char v29 = BYTE6(v28[14].isa);

          if ((v29 & 1) == 0)
          {
LABEL_30:
            BOOL v26 = 0;
LABEL_70:
            if (gLogDatapath)
            {
              os_log_type_t v51 = __nwlog_obj();
              if (os_log_type_enabled(v51, OS_LOG_TYPE_DEBUG))
              {
                size_t v52 = v11;
                uint64_t v53 = *(void *)(*(void *)(a1 + 32) + 16);
                os_log_type_t v54 = v52;
                if (v52) {
                  size_t v55 = dispatch_data_get_size(v52);
                }
                else {
                  size_t v55 = 0;
                }
                int v61 = "";
                *(_DWORD *)int buf = 136447234;
                uint64_t v62 = ", complete";
                *(void *)&uint8_t buf[4] = "nw_masque_connection_pair_read_inner_block_invoke";
                if (!a4) {
                  uint64_t v62 = "";
                }
                *(_WORD *)&unsigned char buf[12] = 2114;
                *(void *)&buf[14] = v53;
                *(_WORD *)&unsigned char buf[22] = 2048;
                unint64_t v84 = v55;
                __int16 v85 = 2080;
                if (v26) {
                  int v61 = ", final";
                }
                int v86 = (void *)v62;
                __int16 v87 = 2080;
                BOOL v88 = v61;
                _os_log_impl(&dword_1830D4000, v51, OS_LOG_TYPE_DEBUG, "%{public}s %{public}@ Proxying %zu bytes to target%s%s", buf, 0x34u);
                int v11 = v54;
              }
            }
            dispatch_group_enter(*(dispatch_group_t *)(*(void *)(a1 + 32) + 232));
            int v49 = *(void **)(a1 + 32);
            uint64_t v50 = v49[6];
            if (!v26) {
              uint64_t v27 = &__block_literal_global_42249;
            }
            completion[0] = MEMORY[0x1E4F143A8];
            completion[1] = 3221225472;
            completion[2] = ___ZL36nw_masque_connection_pair_read_innerP36NWConcrete_nw_masque_connection_pair_block_invoke_342;
            completion[3] = &unk_1E5248CD0;
            os_log_type_t v74 = v49;
            nw_connection_send(v50, v11, v27, a4, completion);
            if (!v26) {
              nw_masque_connection_pair_read_inner(*(NWConcrete_nw_masque_connection_pair **)(a1 + 32));
            }
            nw_protocol_metadata_t v15 = v74;
            goto LABEL_76;
          }
        }
        BOOL v26 = *(unsigned char *)(*(void *)(a1 + 32) + 219) == 0;
        goto LABEL_70;
      }

      goto LABEL_30;
    }
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  nw_protocol_metadata_t v15 = (nw_protocol_metadata_t)(id)gLogObj;
  if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
  {
    uint64_t v30 = *(void *)(*(void *)(a1 + 32) + 16);
    *(_DWORD *)int buf = 136446722;
    *(void *)&uint8_t buf[4] = "nw_masque_connection_pair_read_inner_block_invoke";
    *(_WORD *)&unsigned char buf[12] = 2114;
    *(void *)&buf[14] = v30;
    *(_WORD *)&unsigned char buf[22] = 2112;
    unint64_t v84 = (unint64_t)v71;
    _os_log_impl(&dword_1830D4000, v15, OS_LOG_TYPE_ERROR, "%{public}s %{public}@ Stopping reading, error %@", buf, 0x20u);
  }
LABEL_76:
}

void sub_183440E54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13)
{
  _Unwind_Resume(a1);
}

void nw_masque_connection_pair_setup_inner_direct_connections(void *a1, void *a2)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  int v4 = a2;
  if (v3)
  {
    nw_parameters_t v5 = nw_connection_copy_parameters(*(nw_connection_t *)(*((void *)v3 + 2) + 48));
    nw_parameters_t v6 = v5;
    if (!*((void *)v3 + 4))
    {
      int v7 = v5;
      BOOL v8 = -[NWConcrete_nw_parameters initWithParameters:stripConnected:shallowCopy:]((id *)[NWConcrete_nw_parameters alloc], v7, 0, 0);

      BOOL v9 = nw_parameters_copy_default_protocol_stack((nw_parameters_t)v8);
      nw_protocol_stack_clear_application_protocols(v9);
      if (nw_protocol_demux_copy_definition::onceToken != -1) {
        dispatch_once(&nw_protocol_demux_copy_definition::onceToken, &__block_literal_global_8_26174);
      }
      if (nw_protocol_demux_copy_definition::definition)
      {
        os_log_type_t v10 = os_retain((void *)nw_protocol_demux_copy_definition::definition);
        options = nw_protocol_create_options(v10);
        if (v10) {
          os_release(v10);
        }
      }
      else
      {
        options = nw_protocol_create_options(0);
      }
      nw_protocol_stack_prepend_application_protocol(v9, &options->super);

      uint64_t v12 = nw_connection_create_with_connection(*(void **)(*((void *)v3 + 2) + 48), (void *)v8);
      int v13 = (void *)*((void *)v3 + 4);
      *((void *)v3 + 4) = v12;

      nw_connection_set_queue(*((nw_connection_t *)v3 + 4), *(dispatch_queue_t *)(*((void *)v3 + 2) + 32));
      os_log_type_t v14 = *((void *)v3 + 4);
      handler[0] = MEMORY[0x1E4F143A8];
      handler[1] = 3221225472;
      handler[2] = ___ZL56nw_masque_connection_pair_setup_inner_direct_connectionsP36NWConcrete_nw_masque_connection_pairPU33objcproto22OS_nw_protocol_options8NSObject_block_invoke;
      handler[3] = &unk_1E524BA60;
      id v36 = v3;
      nw_connection_set_state_changed_handler(v14, handler);
      nw_connection_start(*((nw_connection_t *)v3 + 4));
    }
    nw_protocol_metadata_t v15 = v6;
    BOOL v16 = -[NWConcrete_nw_parameters initWithParameters:stripConnected:shallowCopy:]((id *)[NWConcrete_nw_parameters alloc], v15, 0, 0);

    uint64_t v17 = nw_parameters_copy_default_protocol_stack((nw_parameters_t)v16);
    nw_protocol_stack_clear_application_protocols(v17);
    nw_protocol_stack_prepend_application_protocol(v17, v4);
    uint64_t v18 = nw_connection_create_with_connection(*(void **)(*((void *)v3 + 2) + 48), (void *)v16);
    nw_connection_set_queue(v18, *(dispatch_queue_t *)(*((void *)v3 + 2) + 32));
    v32[0] = MEMORY[0x1E4F143A8];
    v32[1] = 3221225472;
    v32[2] = ___ZL56nw_masque_connection_pair_setup_inner_direct_connectionsP36NWConcrete_nw_masque_connection_pairPU33objcproto22OS_nw_protocol_options8NSObject_block_invoke_361;
    v32[3] = &unk_1E524BB98;
    id v19 = v3;
    id v33 = v19;
    uint64_t v20 = v18;
    int v34 = v20;
    nw_connection_set_state_changed_handler(&v20->super, v32);
    nw_connection_start(&v20->super);
    uint64_t v21 = *((void *)v19 + 5);
    if (!v21)
    {
      BOOL v22 = nw_array_create();
      uint64_t v23 = (void *)*((void *)v19 + 5);
      *((void *)v19 + 5) = v22;

      uint64_t v21 = *((void *)v19 + 5);
    }
    nw_array_append(v21, v20);
    nw_masque_connection_pair_read_inner_direct((NWConcrete_nw_masque_connection_pair *)v19, v20);

    goto LABEL_13;
  }
  os_log_type_t v24 = __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  unsigned int v40 = "nw_masque_connection_pair_setup_inner_direct_connections";
  int v25 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v37 = 0;
  if (__nwlog_fault(v25, &type, &v37))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v26 = __nwlog_obj();
      os_log_type_t v27 = type;
      if (os_log_type_enabled(v26, type))
      {
        *(_DWORD *)int buf = 136446210;
        unsigned int v40 = "nw_masque_connection_pair_setup_inner_direct_connections";
        _os_log_impl(&dword_1830D4000, v26, v27, "%{public}s called with null pair", buf, 0xCu);
      }
    }
    else if (v37)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v26 = __nwlog_obj();
      os_log_type_t v29 = type;
      BOOL v30 = os_log_type_enabled(v26, type);
      if (backtrace_string)
      {
        if (v30)
        {
          *(_DWORD *)int buf = 136446466;
          unsigned int v40 = "nw_masque_connection_pair_setup_inner_direct_connections";
          __int16 v41 = 2082;
          uint64_t v42 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v26, v29, "%{public}s called with null pair, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_30;
      }
      if (v30)
      {
        *(_DWORD *)int buf = 136446210;
        unsigned int v40 = "nw_masque_connection_pair_setup_inner_direct_connections";
        _os_log_impl(&dword_1830D4000, v26, v29, "%{public}s called with null pair, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v26 = __nwlog_obj();
      os_log_type_t v31 = type;
      if (os_log_type_enabled(v26, type))
      {
        *(_DWORD *)int buf = 136446210;
        unsigned int v40 = "nw_masque_connection_pair_setup_inner_direct_connections";
        _os_log_impl(&dword_1830D4000, v26, v31, "%{public}s called with null pair, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_30:
  if (v25) {
    free(v25);
  }
LABEL_13:
}

void sub_18344147C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  _Unwind_Resume(a1);
}

uint64_t nw_protocol_common_updated_path(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v45 = "nw_protocol_common_updated_path";
    os_log_type_t v28 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v42 = 0;
    if (!__nwlog_fault(v28, &type, &v42)) {
      goto LABEL_104;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v29 = __nwlog_obj();
      os_log_type_t v30 = type;
      if (!os_log_type_enabled(v29, type)) {
        goto LABEL_104;
      }
      *(_DWORD *)int buf = 136446210;
      os_log_type_t v45 = "nw_protocol_common_updated_path";
      os_log_type_t v31 = "%{public}s called with null protocol";
      goto LABEL_103;
    }
    if (!v42)
    {
      os_log_type_t v29 = __nwlog_obj();
      os_log_type_t v30 = type;
      if (!os_log_type_enabled(v29, type)) {
        goto LABEL_104;
      }
      *(_DWORD *)int buf = 136446210;
      os_log_type_t v45 = "nw_protocol_common_updated_path";
      os_log_type_t v31 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_103;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v29 = __nwlog_obj();
    os_log_type_t v30 = type;
    BOOL v36 = os_log_type_enabled(v29, type);
    if (!backtrace_string)
    {
      if (!v36) {
        goto LABEL_104;
      }
      *(_DWORD *)int buf = 136446210;
      os_log_type_t v45 = "nw_protocol_common_updated_path";
      os_log_type_t v31 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_103;
    }
    if (!v36) {
      goto LABEL_77;
    }
    *(_DWORD *)int buf = 136446466;
    os_log_type_t v45 = "nw_protocol_common_updated_path";
    __int16 v46 = 2082;
    uint64_t v47 = backtrace_string;
    char v37 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_76:
    _os_log_impl(&dword_1830D4000, v29, v30, v37, buf, 0x16u);
    goto LABEL_77;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v45 = "nw_protocol_common_updated_path";
    os_log_type_t v28 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v42 = 0;
    if (!__nwlog_fault(v28, &type, &v42)) {
      goto LABEL_104;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v29 = __nwlog_obj();
      os_log_type_t v30 = type;
      if (!os_log_type_enabled(v29, type)) {
        goto LABEL_104;
      }
      *(_DWORD *)int buf = 136446210;
      os_log_type_t v45 = "nw_protocol_common_updated_path";
      os_log_type_t v31 = "%{public}s called with null other_protocol";
      goto LABEL_103;
    }
    if (!v42)
    {
      os_log_type_t v29 = __nwlog_obj();
      os_log_type_t v30 = type;
      if (!os_log_type_enabled(v29, type)) {
        goto LABEL_104;
      }
      *(_DWORD *)int buf = 136446210;
      os_log_type_t v45 = "nw_protocol_common_updated_path";
      os_log_type_t v31 = "%{public}s called with null other_protocol, backtrace limit exceeded";
      goto LABEL_103;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v29 = __nwlog_obj();
    os_log_type_t v30 = type;
    BOOL v38 = os_log_type_enabled(v29, type);
    if (!backtrace_string)
    {
      if (!v38) {
        goto LABEL_104;
      }
      *(_DWORD *)int buf = 136446210;
      os_log_type_t v45 = "nw_protocol_common_updated_path";
      os_log_type_t v31 = "%{public}s called with null other_protocol, no backtrace";
      goto LABEL_103;
    }
    if (!v38) {
      goto LABEL_77;
    }
    *(_DWORD *)int buf = 136446466;
    os_log_type_t v45 = "nw_protocol_common_updated_path";
    __int16 v46 = 2082;
    uint64_t v47 = backtrace_string;
    char v37 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
    goto LABEL_76;
  }
  if (!a3)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v45 = "nw_protocol_common_updated_path";
    os_log_type_t v28 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v42 = 0;
    if (!__nwlog_fault(v28, &type, &v42)) {
      goto LABEL_104;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v29 = __nwlog_obj();
      os_log_type_t v30 = type;
      if (!os_log_type_enabled(v29, type)) {
        goto LABEL_104;
      }
      *(_DWORD *)int buf = 136446210;
      os_log_type_t v45 = "nw_protocol_common_updated_path";
      os_log_type_t v31 = "%{public}s called with null path";
      goto LABEL_103;
    }
    if (!v42)
    {
      os_log_type_t v29 = __nwlog_obj();
      os_log_type_t v30 = type;
      if (!os_log_type_enabled(v29, type)) {
        goto LABEL_104;
      }
      *(_DWORD *)int buf = 136446210;
      os_log_type_t v45 = "nw_protocol_common_updated_path";
      os_log_type_t v31 = "%{public}s called with null path, backtrace limit exceeded";
      goto LABEL_103;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v29 = __nwlog_obj();
    os_log_type_t v30 = type;
    BOOL v39 = os_log_type_enabled(v29, type);
    if (backtrace_string)
    {
      if (v39)
      {
        *(_DWORD *)int buf = 136446466;
        os_log_type_t v45 = "nw_protocol_common_updated_path";
        __int16 v46 = 2082;
        uint64_t v47 = backtrace_string;
        char v37 = "%{public}s called with null path, dumping backtrace:%{public}s";
        goto LABEL_76;
      }
LABEL_77:
      free(backtrace_string);
      goto LABEL_104;
    }
    if (!v39) {
      goto LABEL_104;
    }
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v45 = "nw_protocol_common_updated_path";
    os_log_type_t v31 = "%{public}s called with null path, no backtrace";
LABEL_103:
    _os_log_impl(&dword_1830D4000, v29, v30, v31, buf, 0xCu);
LABEL_104:
    if (v28) {
      free(v28);
    }
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 32);
  if (!v4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v16 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446210;
      os_log_type_t v45 = "nw_protocol_common_updated_path";
      _os_log_impl(&dword_1830D4000, v16, OS_LOG_TYPE_INFO, "%{public}s updated_path requires an output handler", buf, 0xCu);
    }
    return 0;
  }
  nw_parameters_t v5 = *(void **)(v4 + 40);
  if (v5 == &nw_protocol_ref_counted_handle)
  {
    uint64_t v6 = *(void *)(v4 + 88);
    if (v6) {
      *(void *)(v4 + 88) = v6 + 1;
    }
  }
  int v7 = *(void **)(a2 + 40);
  if (v7 == &nw_protocol_ref_counted_handle)
  {
    uint64_t v8 = *(void *)(a2 + 88);
    if (v8) {
      *(void *)(a2 + 88) = v8 + 1;
    }
  }
  uint64_t v9 = *(void *)(v4 + 24);
  if (!v9 || (os_log_type_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(v9 + 168)) == 0)
  {
    __nwlog_obj();
    BOOL v22 = *(const char **)(v4 + 16);
    *(_DWORD *)int buf = 136446722;
    os_log_type_t v45 = "__nw_protocol_updated_path";
    if (!v22) {
      BOOL v22 = "invalid";
    }
    __int16 v46 = 2082;
    uint64_t v47 = (void *)v22;
    __int16 v48 = 2048;
    uint64_t v49 = v4;
    uint64_t v23 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v42 = 0;
    if (__nwlog_fault(v23, &type, &v42))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v24 = __nwlog_obj();
        os_log_type_t v25 = type;
        if (!os_log_type_enabled(v24, type)) {
          goto LABEL_93;
        }
        BOOL v26 = *(const char **)(v4 + 16);
        if (!v26) {
          BOOL v26 = "invalid";
        }
        *(_DWORD *)int buf = 136446722;
        os_log_type_t v45 = "__nw_protocol_updated_path";
        __int16 v46 = 2082;
        uint64_t v47 = (void *)v26;
        __int16 v48 = 2048;
        uint64_t v49 = v4;
        os_log_type_t v27 = "%{public}s protocol %{public}s (%p) has invalid updated_path callback";
LABEL_92:
        _os_log_impl(&dword_1830D4000, v24, v25, v27, buf, 0x20u);
        goto LABEL_93;
      }
      if (!v42)
      {
        os_log_type_t v24 = __nwlog_obj();
        os_log_type_t v25 = type;
        if (!os_log_type_enabled(v24, type)) {
          goto LABEL_93;
        }
        unsigned int v40 = *(const char **)(v4 + 16);
        if (!v40) {
          unsigned int v40 = "invalid";
        }
        *(_DWORD *)int buf = 136446722;
        os_log_type_t v45 = "__nw_protocol_updated_path";
        __int16 v46 = 2082;
        uint64_t v47 = (void *)v40;
        __int16 v48 = 2048;
        uint64_t v49 = v4;
        os_log_type_t v27 = "%{public}s protocol %{public}s (%p) has invalid updated_path callback, backtrace limit exceeded";
        goto LABEL_92;
      }
      uint64_t v32 = (char *)__nw_create_backtrace_string();
      os_log_type_t v24 = __nwlog_obj();
      os_log_type_t v25 = type;
      BOOL v33 = os_log_type_enabled(v24, type);
      if (!v32)
      {
        if (!v33) {
          goto LABEL_93;
        }
        __int16 v41 = *(const char **)(v4 + 16);
        if (!v41) {
          __int16 v41 = "invalid";
        }
        *(_DWORD *)int buf = 136446722;
        os_log_type_t v45 = "__nw_protocol_updated_path";
        __int16 v46 = 2082;
        uint64_t v47 = (void *)v41;
        __int16 v48 = 2048;
        uint64_t v49 = v4;
        os_log_type_t v27 = "%{public}s protocol %{public}s (%p) has invalid updated_path callback, no backtrace";
        goto LABEL_92;
      }
      if (v33)
      {
        int v34 = *(const char **)(v4 + 16);
        if (!v34) {
          int v34 = "invalid";
        }
        *(_DWORD *)int buf = 136446978;
        os_log_type_t v45 = "__nw_protocol_updated_path";
        __int16 v46 = 2082;
        uint64_t v47 = (void *)v34;
        __int16 v48 = 2048;
        uint64_t v49 = v4;
        __int16 v50 = 2082;
        os_log_type_t v51 = v32;
        _os_log_impl(&dword_1830D4000, v24, v25, "%{public}s protocol %{public}s (%p) has invalid updated_path callback, dumping backtrace:%{public}s", buf, 0x2Au);
      }
      free(v32);
    }
LABEL_93:
    if (v23) {
      free(v23);
    }
    uint64_t v11 = 0;
    if (v7 != &nw_protocol_ref_counted_handle) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  uint64_t v11 = v10(v4, a2);
  if (v7 == &nw_protocol_ref_counted_handle)
  {
LABEL_14:
    if (*(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
    {
      uint64_t v18 = *(void *)(a2 + 88);
      if (v18)
      {
        uint64_t v19 = v18 - 1;
        *(void *)(a2 + 88) = v19;
        if (!v19)
        {
          uint64_t v20 = *(void (***)(void))(a2 + 64);
          if (v20)
          {
            *(void *)(a2 + 64) = 0;
            v20[2](v20);
            _Block_release(v20);
          }
          if (*(unsigned char *)(a2 + 72))
          {
            uint64_t v21 = *(const void **)(a2 + 64);
            if (v21) {
              _Block_release(v21);
            }
          }
          free((void *)a2);
        }
      }
    }
  }
LABEL_15:
  if (v5 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(v4 + 40) == &nw_protocol_ref_counted_handle)
  {
    uint64_t v12 = *(void *)(v4 + 88);
    if (v12)
    {
      uint64_t v13 = v12 - 1;
      *(void *)(v4 + 88) = v13;
      if (!v13)
      {
        os_log_type_t v14 = *(void (***)(void))(v4 + 64);
        if (v14)
        {
          *(void *)(v4 + 64) = 0;
          v14[2](v14);
          _Block_release(v14);
        }
        if (*(unsigned char *)(v4 + 72))
        {
          nw_protocol_metadata_t v15 = *(const void **)(v4 + 64);
          if (v15) {
            _Block_release(v15);
          }
        }
        free((void *)v4);
      }
    }
  }
  return v11;
}

void nw_protocol_common_link_state(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v47 = "nw_protocol_common_link_state";
    uint64_t v4 = _os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v44 = 0;
    if (!__nwlog_fault((const char *)v4, &type, &v44)) {
      goto LABEL_47;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      nw_protocol_metadata_t v15 = __nwlog_obj();
      os_log_type_t v16 = type;
      if (!os_log_type_enabled(v15, type)) {
        goto LABEL_47;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v47 = "nw_protocol_common_link_state";
      uint64_t v17 = "%{public}s called with null protocol";
      goto LABEL_45;
    }
    if (v44)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      nw_protocol_metadata_t v15 = __nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v38 = os_log_type_enabled(v15, type);
      if (backtrace_string)
      {
        if (!v38) {
          goto LABEL_92;
        }
        *(_DWORD *)int buf = 136446466;
        uint64_t v47 = "nw_protocol_common_link_state";
        __int16 v48 = 2082;
        uint64_t v49 = backtrace_string;
        BOOL v39 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
        goto LABEL_91;
      }
      if (!v38) {
        goto LABEL_47;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v47 = "nw_protocol_common_link_state";
      uint64_t v17 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      nw_protocol_metadata_t v15 = __nwlog_obj();
      os_log_type_t v16 = type;
      if (!os_log_type_enabled(v15, type)) {
        goto LABEL_47;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v47 = "nw_protocol_common_link_state";
      uint64_t v17 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
LABEL_45:
    BOOL v26 = v15;
    os_log_type_t v27 = v16;
LABEL_46:
    _os_log_impl(&dword_1830D4000, v26, v27, v17, buf, 0xCu);
    goto LABEL_47;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v47 = "nw_protocol_common_link_state";
    uint64_t v4 = _os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v44 = 0;
    if (!__nwlog_fault((const char *)v4, &type, &v44)) {
      goto LABEL_47;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      nw_protocol_metadata_t v15 = __nwlog_obj();
      os_log_type_t v16 = type;
      if (!os_log_type_enabled(v15, type)) {
        goto LABEL_47;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v47 = "nw_protocol_common_link_state";
      uint64_t v17 = "%{public}s called with null other_protocol";
      goto LABEL_45;
    }
    if (v44)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      nw_protocol_metadata_t v15 = __nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v40 = os_log_type_enabled(v15, type);
      if (backtrace_string)
      {
        if (!v40) {
          goto LABEL_92;
        }
        *(_DWORD *)int buf = 136446466;
        uint64_t v47 = "nw_protocol_common_link_state";
        __int16 v48 = 2082;
        uint64_t v49 = backtrace_string;
        BOOL v39 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
        goto LABEL_91;
      }
      if (!v40) {
        goto LABEL_47;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v47 = "nw_protocol_common_link_state";
      uint64_t v17 = "%{public}s called with null other_protocol, no backtrace";
    }
    else
    {
      nw_protocol_metadata_t v15 = __nwlog_obj();
      os_log_type_t v16 = type;
      if (!os_log_type_enabled(v15, type)) {
        goto LABEL_47;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v47 = "nw_protocol_common_link_state";
      uint64_t v17 = "%{public}s called with null other_protocol, backtrace limit exceeded";
    }
    goto LABEL_45;
  }
  if (a3)
  {
    uint64_t v4 = *(void *)(a1 + 48);
    if (v4)
    {
      nw_parameters_t v5 = *(void **)(v4 + 40);
      if (v5 == &nw_protocol_ref_counted_handle)
      {
        uint64_t v6 = *(void *)(v4 + 88);
        if (v6) {
          *(void *)(v4 + 88) = v6 + 1;
        }
      }
      int v7 = *(void **)(a2 + 40);
      if (v7 == &nw_protocol_ref_counted_handle)
      {
        uint64_t v8 = *(void *)(a2 + 88);
        if (v8) {
          *(void *)(a2 + 88) = v8 + 1;
        }
      }
      uint64_t v9 = *(void *)(v4 + 24);
      if (v9)
      {
        os_log_type_t v10 = *(void (**)(uint64_t, uint64_t))(v9 + 104);
        if (v10)
        {
          v10(v4, a2);
          goto LABEL_14;
        }
      }
      __nwlog_obj();
      os_log_type_t v28 = *(const char **)(v4 + 16);
      *(_DWORD *)int buf = 136446722;
      uint64_t v47 = "__nw_protocol_link_state";
      if (!v28) {
        os_log_type_t v28 = "invalid";
      }
      __int16 v48 = 2082;
      uint64_t v49 = (void *)v28;
      __int16 v50 = 2048;
      uint64_t v51 = v4;
      os_log_type_t v29 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v44 = 0;
      if (__nwlog_fault(v29, &type, &v44))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          os_log_type_t v30 = __nwlog_obj();
          os_log_type_t v31 = type;
          if (!os_log_type_enabled(v30, type)) {
            goto LABEL_109;
          }
          uint64_t v32 = *(const char **)(v4 + 16);
          if (!v32) {
            uint64_t v32 = "invalid";
          }
          *(_DWORD *)int buf = 136446722;
          uint64_t v47 = "__nw_protocol_link_state";
          __int16 v48 = 2082;
          uint64_t v49 = (void *)v32;
          __int16 v50 = 2048;
          uint64_t v51 = v4;
          BOOL v33 = "%{public}s protocol %{public}s (%p) has invalid link_state callback";
          goto LABEL_108;
        }
        if (!v44)
        {
          os_log_type_t v30 = __nwlog_obj();
          os_log_type_t v31 = type;
          if (!os_log_type_enabled(v30, type)) {
            goto LABEL_109;
          }
          char v42 = *(const char **)(v4 + 16);
          if (!v42) {
            char v42 = "invalid";
          }
          *(_DWORD *)int buf = 136446722;
          uint64_t v47 = "__nw_protocol_link_state";
          __int16 v48 = 2082;
          uint64_t v49 = (void *)v42;
          __int16 v50 = 2048;
          uint64_t v51 = v4;
          BOOL v33 = "%{public}s protocol %{public}s (%p) has invalid link_state callback, backtrace limit exceeded";
          goto LABEL_108;
        }
        int v34 = (char *)__nw_create_backtrace_string();
        os_log_type_t v30 = __nwlog_obj();
        os_log_type_t v31 = type;
        BOOL v35 = os_log_type_enabled(v30, type);
        if (v34)
        {
          if (v35)
          {
            BOOL v36 = *(const char **)(v4 + 16);
            if (!v36) {
              BOOL v36 = "invalid";
            }
            *(_DWORD *)int buf = 136446978;
            uint64_t v47 = "__nw_protocol_link_state";
            __int16 v48 = 2082;
            uint64_t v49 = (void *)v36;
            __int16 v50 = 2048;
            uint64_t v51 = v4;
            __int16 v52 = 2082;
            uint64_t v53 = v34;
            _os_log_impl(&dword_1830D4000, v30, v31, "%{public}s protocol %{public}s (%p) has invalid link_state callback, dumping backtrace:%{public}s", buf, 0x2Au);
          }
          free(v34);
          goto LABEL_109;
        }
        if (v35)
        {
          uint64_t v43 = *(const char **)(v4 + 16);
          if (!v43) {
            uint64_t v43 = "invalid";
          }
          *(_DWORD *)int buf = 136446722;
          uint64_t v47 = "__nw_protocol_link_state";
          __int16 v48 = 2082;
          uint64_t v49 = (void *)v43;
          __int16 v50 = 2048;
          uint64_t v51 = v4;
          BOOL v33 = "%{public}s protocol %{public}s (%p) has invalid link_state callback, no backtrace";
LABEL_108:
          _os_log_impl(&dword_1830D4000, v30, v31, v33, buf, 0x20u);
        }
      }
LABEL_109:
      if (v29) {
        free(v29);
      }
LABEL_14:
      if (v7 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
      {
        uint64_t v22 = *(void *)(a2 + 88);
        if (v22)
        {
          uint64_t v23 = v22 - 1;
          *(void *)(a2 + 88) = v23;
          if (!v23)
          {
            os_log_type_t v24 = *(void (***)(void))(a2 + 64);
            if (v24)
            {
              *(void *)(a2 + 64) = 0;
              v24[2](v24);
              _Block_release(v24);
            }
            if (*(unsigned char *)(a2 + 72))
            {
              os_log_type_t v25 = *(const void **)(a2 + 64);
              if (v25) {
                _Block_release(v25);
              }
            }
            free((void *)a2);
          }
        }
      }
      if (v5 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(v4 + 40) == &nw_protocol_ref_counted_handle)
      {
        uint64_t v11 = *(void *)(v4 + 88);
        if (v11)
        {
          uint64_t v12 = v11 - 1;
          *(void *)(v4 + 88) = v12;
          if (!v12)
          {
            uint64_t v13 = *(void (***)(void))(v4 + 64);
            if (v13)
            {
              *(void *)(v4 + 64) = 0;
              v13[2](v13);
              _Block_release(v13);
            }
            if (*(unsigned char *)(v4 + 72))
            {
              os_log_type_t v14 = *(const void **)(v4 + 64);
              if (v14) {
                _Block_release(v14);
              }
            }
            goto LABEL_48;
          }
        }
      }
      return;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)int buf = 136446210;
    uint64_t v47 = "nw_protocol_common_link_state";
    uint64_t v4 = _os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v44 = 0;
    if (__nwlog_fault((const char *)v4, &type, &v44))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        nw_protocol_metadata_t v15 = gLogObj;
        os_log_type_t v16 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
          goto LABEL_47;
        }
        *(_DWORD *)int buf = 136446210;
        uint64_t v47 = "nw_protocol_common_link_state";
        uint64_t v17 = "%{public}s link_state requires a default input handler";
        goto LABEL_45;
      }
      if (!v44)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        nw_protocol_metadata_t v15 = gLogObj;
        os_log_type_t v16 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
          goto LABEL_47;
        }
        *(_DWORD *)int buf = 136446210;
        uint64_t v47 = "nw_protocol_common_link_state";
        uint64_t v17 = "%{public}s link_state requires a default input handler, backtrace limit exceeded";
        goto LABEL_45;
      }
      uint64_t v18 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v19 = gLogObj;
      os_log_type_t v20 = type;
      BOOL v21 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (v18)
      {
        if (v21)
        {
          *(_DWORD *)int buf = 136446466;
          uint64_t v47 = "nw_protocol_common_link_state";
          __int16 v48 = 2082;
          uint64_t v49 = v18;
          _os_log_impl(&dword_1830D4000, v19, v20, "%{public}s link_state requires a default input handler, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v18);
        if (v4) {
          goto LABEL_48;
        }
        return;
      }
      if (v21)
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v47 = "nw_protocol_common_link_state";
        uint64_t v17 = "%{public}s link_state requires a default input handler, no backtrace";
        BOOL v26 = v19;
        os_log_type_t v27 = v20;
        goto LABEL_46;
      }
    }
LABEL_47:
    if (!v4) {
      return;
    }
    goto LABEL_48;
  }
  __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  uint64_t v47 = "nw_protocol_common_link_state";
  uint64_t v4 = _os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v44 = 0;
  if (!__nwlog_fault((const char *)v4, &type, &v44)) {
    goto LABEL_47;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    nw_protocol_metadata_t v15 = __nwlog_obj();
    os_log_type_t v16 = type;
    if (!os_log_type_enabled(v15, type)) {
      goto LABEL_47;
    }
    *(_DWORD *)int buf = 136446210;
    uint64_t v47 = "nw_protocol_common_link_state";
    uint64_t v17 = "%{public}s called with null link_info";
    goto LABEL_45;
  }
  if (!v44)
  {
    nw_protocol_metadata_t v15 = __nwlog_obj();
    os_log_type_t v16 = type;
    if (!os_log_type_enabled(v15, type)) {
      goto LABEL_47;
    }
    *(_DWORD *)int buf = 136446210;
    uint64_t v47 = "nw_protocol_common_link_state";
    uint64_t v17 = "%{public}s called with null link_info, backtrace limit exceeded";
    goto LABEL_45;
  }
  backtrace_string = (char *)__nw_create_backtrace_string();
  nw_protocol_metadata_t v15 = __nwlog_obj();
  os_log_type_t v16 = type;
  BOOL v41 = os_log_type_enabled(v15, type);
  if (!backtrace_string)
  {
    if (!v41) {
      goto LABEL_47;
    }
    *(_DWORD *)int buf = 136446210;
    uint64_t v47 = "nw_protocol_common_link_state";
    uint64_t v17 = "%{public}s called with null link_info, no backtrace";
    goto LABEL_45;
  }
  if (!v41) {
    goto LABEL_92;
  }
  *(_DWORD *)int buf = 136446466;
  uint64_t v47 = "nw_protocol_common_link_state";
  __int16 v48 = 2082;
  uint64_t v49 = backtrace_string;
  BOOL v39 = "%{public}s called with null link_info, dumping backtrace:%{public}s";
LABEL_91:
  _os_log_impl(&dword_1830D4000, v15, v16, v39, buf, 0x16u);
LABEL_92:
  free(backtrace_string);
  if (v4) {
LABEL_48:
  }
    free((void *)v4);
}

uint64_t nw_path_parse_necp_parameters(void *a1, void **a2, id *a3, id *a4, id *a5, unsigned char *a6, _WORD *a7, char *a8, unsigned char *a9, uint64_t a10, unint64_t a11)
{
  uint64_t v575 = *MEMORY[0x1E4F143B8];
  nw_parameters_t parameters = a1;
  if (!parameters)
  {
    BOOL v521 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
    uint64_t v17 = (char *)_os_log_send_and_compose_impl();

    uu[0] = 16;
    LOBYTE(v566) = 0;
    if (__nwlog_fault(v17, uu, &v566))
    {
      if (uu[0] == 17)
      {
        uint64_t v18 = __nwlog_obj();
        os_log_type_t v522 = uu[0];
        if (os_log_type_enabled(v18, (os_log_type_t)uu[0]))
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
          _os_log_impl(&dword_1830D4000, v18, v522, "%{public}s called with null parameters", buf, 0xCu);
        }
        goto LABEL_24;
      }
      if (!(_BYTE)v566)
      {
        uint64_t v18 = __nwlog_obj();
        os_log_type_t v541 = uu[0];
        if (os_log_type_enabled(v18, (os_log_type_t)uu[0]))
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
          _os_log_impl(&dword_1830D4000, v18, v541, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_24;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v18 = __nwlog_obj();
      os_log_type_t v528 = uu[0];
      BOOL v529 = os_log_type_enabled(v18, (os_log_type_t)uu[0]);
      if (!backtrace_string)
      {
        if (v529)
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
          _os_log_impl(&dword_1830D4000, v18, v528, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }
        goto LABEL_24;
      }
      if (v529)
      {
        *(_DWORD *)int buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v18, v528, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
    goto LABEL_25;
  }
  if (!a10)
  {
    int v523 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
    uint64_t v17 = (char *)_os_log_send_and_compose_impl();

    uu[0] = 16;
    LOBYTE(v566) = 0;
    if (__nwlog_fault(v17, uu, &v566))
    {
      if (uu[0] == 17)
      {
        uint64_t v18 = __nwlog_obj();
        os_log_type_t v524 = uu[0];
        if (os_log_type_enabled(v18, (os_log_type_t)uu[0]))
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
          _os_log_impl(&dword_1830D4000, v18, v524, "%{public}s called with null buffer", buf, 0xCu);
        }
        goto LABEL_24;
      }
      if (!(_BYTE)v566)
      {
        uint64_t v18 = __nwlog_obj();
        os_log_type_t v542 = uu[0];
        if (os_log_type_enabled(v18, (os_log_type_t)uu[0]))
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
          _os_log_impl(&dword_1830D4000, v18, v542, "%{public}s called with null buffer, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_24;
      }
      BOOL v21 = (char *)__nw_create_backtrace_string();
      uint64_t v18 = __nwlog_obj();
      os_log_type_t v530 = uu[0];
      BOOL v531 = os_log_type_enabled(v18, (os_log_type_t)uu[0]);
      if (!v21)
      {
        if (v531)
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
          _os_log_impl(&dword_1830D4000, v18, v530, "%{public}s called with null buffer, no backtrace", buf, 0xCu);
        }
        goto LABEL_24;
      }
      if (v531)
      {
        *(_DWORD *)int buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = v21;
        _os_log_impl(&dword_1830D4000, v18, v530, "%{public}s called with null buffer, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_16;
    }
    goto LABEL_25;
  }
  if (!a11)
  {
    BOOL v525 = __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
    uint64_t v17 = (char *)_os_log_send_and_compose_impl();

    uu[0] = 16;
    LOBYTE(v566) = 0;
    if (__nwlog_fault(v17, uu, &v566))
    {
      if (uu[0] == 17)
      {
        uint64_t v18 = __nwlog_obj();
        os_log_type_t v526 = uu[0];
        if (os_log_type_enabled(v18, (os_log_type_t)uu[0]))
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
          _os_log_impl(&dword_1830D4000, v18, v526, "%{public}s called with null buffer_length", buf, 0xCu);
        }
        goto LABEL_24;
      }
      if (!(_BYTE)v566)
      {
        uint64_t v18 = __nwlog_obj();
        os_log_type_t v543 = uu[0];
        if (os_log_type_enabled(v18, (os_log_type_t)uu[0]))
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
          _os_log_impl(&dword_1830D4000, v18, v543, "%{public}s called with null buffer_length, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_24;
      }
      BOOL v21 = (char *)__nw_create_backtrace_string();
      uint64_t v18 = __nwlog_obj();
      os_log_type_t v532 = uu[0];
      BOOL v533 = os_log_type_enabled(v18, (os_log_type_t)uu[0]);
      if (!v21)
      {
        if (v533)
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
          _os_log_impl(&dword_1830D4000, v18, v532, "%{public}s called with null buffer_length, no backtrace", buf, 0xCu);
        }
        goto LABEL_24;
      }
      if (v533)
      {
        *(_DWORD *)int buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = v21;
        _os_log_impl(&dword_1830D4000, v18, v532, "%{public}s called with null buffer_length, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_16;
    }
LABEL_25:
    if (!v17)
    {
LABEL_27:
      uint64_t v25 = 0;
      goto LABEL_1187;
    }
LABEL_26:
    free(v17);
    goto LABEL_27;
  }
  if (a11 <= 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v16 = (id)gLogObj;
    *(_DWORD *)int buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&buf[14] = a11;
    uint64_t v17 = (char *)_os_log_send_and_compose_impl();

    uu[0] = 16;
    LOBYTE(v566) = 0;
    if (!__nwlog_fault(v17, uu, &v566)) {
      goto LABEL_25;
    }
    if (uu[0] == 17)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v18 = (id)gLogObj;
      os_log_type_t v19 = uu[0];
      if (os_log_type_enabled(v18, (os_log_type_t)uu[0]))
      {
        *(_DWORD *)int buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
        *(_WORD *)&unsigned char buf[12] = 2048;
        *(void *)&buf[14] = a11;
        _os_log_impl(&dword_1830D4000, v18, v19, "%{public}s NECP buffer too short %zu", buf, 0x16u);
      }
LABEL_24:

      goto LABEL_25;
    }
    if (!(_BYTE)v566)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v18 = (id)gLogObj;
      os_log_type_t v24 = uu[0];
      if (os_log_type_enabled(v18, (os_log_type_t)uu[0]))
      {
        *(_DWORD *)int buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
        *(_WORD *)&unsigned char buf[12] = 2048;
        *(void *)&buf[14] = a11;
        _os_log_impl(&dword_1830D4000, v18, v24, "%{public}s NECP buffer too short %zu, backtrace limit exceeded", buf, 0x16u);
      }
      goto LABEL_24;
    }
    BOOL v21 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v18 = (id)gLogObj;
    os_log_type_t v22 = uu[0];
    BOOL v23 = os_log_type_enabled(v18, (os_log_type_t)uu[0]);
    if (!v21)
    {
      if (v23)
      {
        *(_DWORD *)int buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
        *(_WORD *)&unsigned char buf[12] = 2048;
        *(void *)&buf[14] = a11;
        _os_log_impl(&dword_1830D4000, v18, v22, "%{public}s NECP buffer too short %zu, no backtrace", buf, 0x16u);
      }
      goto LABEL_24;
    }
    if (v23)
    {
      *(_DWORD *)int buf = 136446722;
      *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&buf[14] = a11;
      *(_WORD *)&unsigned char buf[22] = 2082;
      *(void *)&unsigned char buf[24] = v21;
      _os_log_impl(&dword_1830D4000, v18, v22, "%{public}s NECP buffer too short %zu, dumping backtrace:%{public}s", buf, 0x20u);
    }
LABEL_16:

    free(v21);
    if (!v17) {
      goto LABEL_27;
    }
    goto LABEL_26;
  }
  v549 = a7;
  v550 = a8;
  v559 = a2;
  __int16 v567 = 0;
  int v566 = 0;
  __int16 v565 = 0;
  int v564 = 0;
  if (a11 == 5)
  {
    uint64_t v555 = 0;
    uint64_t v556 = 0;
    nw_endpoint_t v560 = 0;
    v561 = 0;
    size_t v557 = 0;
    v558 = 0;
    uint64_t v551 = 0;
    char v548 = 0;
    unint64_t v20 = 0;
    goto LABEL_1126;
  }
  v547 = a6;
  uint64_t v555 = 0;
  uint64_t v556 = 0;
  char v548 = 0;
  uint64_t v551 = 0;
  nw_endpoint_t v560 = 0;
  v561 = 0;
  size_t v557 = 0;
  v558 = 0;
  unint64_t v20 = 0;
  while (1)
  {
    int v26 = *(unsigned __int8 *)(a10 + v20);
    size_t v27 = *(unsigned int *)(a10 + 1 + v20);
    if (v27)
    {
      if (v27 <= 0xFFFFFFF9 && a11 >= v27 + 5 && a11 - (v27 + 5) >= v20)
      {
        BOOL v36 = (char *)(a10 + 5 + v20);
        goto LABEL_57;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v29 = (id)gLogObj;
      *(_DWORD *)int buf = 136446978;
      *(void *)&uint8_t buf[4] = "nw_necp_buffer_get_tlv_value";
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&buf[14] = v20;
      *(_WORD *)&unsigned char buf[22] = 2048;
      *(void *)&unsigned char buf[24] = a11;
      *(_WORD *)&buf[32] = 1024;
      *(_DWORD *)&buf[34] = v27;
      os_log_type_t v30 = (void *)_os_log_send_and_compose_impl();

      uu[0] = 16;
      os_log_type_t v568 = OS_LOG_TYPE_DEFAULT;
      if (__nwlog_fault((const char *)v30, uu, &v568))
      {
        if (uu[0] == 17)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v31 = (id)gLogObj;
          os_log_type_t v32 = uu[0];
          if (os_log_type_enabled(v31, (os_log_type_t)uu[0]))
          {
            *(_DWORD *)int buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_necp_buffer_get_tlv_value";
            *(_WORD *)&unsigned char buf[12] = 2048;
            *(void *)&buf[14] = v20;
            *(_WORD *)&unsigned char buf[22] = 2048;
            *(void *)&unsigned char buf[24] = a11;
            *(_WORD *)&buf[32] = 1024;
            *(_DWORD *)&buf[34] = v27;
            _os_log_impl(&dword_1830D4000, v31, v32, "%{public}s buffer too short tlv_offset=%zu buffer_length=%zu value_length=%u", buf, 0x26u);
          }
        }
        else if (v568)
        {
          BOOL v33 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v31 = (id)gLogObj;
          os_log_type_t v34 = uu[0];
          BOOL v35 = os_log_type_enabled(v31, (os_log_type_t)uu[0]);
          if (v33)
          {
            if (v35)
            {
              *(_DWORD *)int buf = 136447234;
              *(void *)&uint8_t buf[4] = "nw_necp_buffer_get_tlv_value";
              *(_WORD *)&unsigned char buf[12] = 2048;
              *(void *)&buf[14] = v20;
              *(_WORD *)&unsigned char buf[22] = 2048;
              *(void *)&unsigned char buf[24] = a11;
              *(_WORD *)&buf[32] = 1024;
              *(_DWORD *)&buf[34] = v27;
              *(_WORD *)&buf[38] = 2082;
              *(void *)&uint8_t buf[40] = v33;
              _os_log_impl(&dword_1830D4000, v31, v34, "%{public}s buffer too short tlv_offset=%zu buffer_length=%zu value_length=%u, dumping backtrace:%{public}s", buf, 0x30u);
            }

            free(v33);
            if (!v30) {
              goto LABEL_56;
            }
LABEL_55:
            free(v30);
            goto LABEL_56;
          }
          if (v35)
          {
            *(_DWORD *)int buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_necp_buffer_get_tlv_value";
            *(_WORD *)&unsigned char buf[12] = 2048;
            *(void *)&buf[14] = v20;
            *(_WORD *)&unsigned char buf[22] = 2048;
            *(void *)&unsigned char buf[24] = a11;
            *(_WORD *)&buf[32] = 1024;
            *(_DWORD *)&buf[34] = v27;
            _os_log_impl(&dword_1830D4000, v31, v34, "%{public}s buffer too short tlv_offset=%zu buffer_length=%zu value_length=%u, no backtrace", buf, 0x26u);
          }
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v31 = (id)gLogObj;
          os_log_type_t v37 = uu[0];
          if (os_log_type_enabled(v31, (os_log_type_t)uu[0]))
          {
            *(_DWORD *)int buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_necp_buffer_get_tlv_value";
            *(_WORD *)&unsigned char buf[12] = 2048;
            *(void *)&buf[14] = v20;
            *(_WORD *)&unsigned char buf[22] = 2048;
            *(void *)&unsigned char buf[24] = a11;
            *(_WORD *)&buf[32] = 1024;
            *(_DWORD *)&buf[34] = v27;
            _os_log_impl(&dword_1830D4000, v31, v37, "%{public}s buffer too short tlv_offset=%zu buffer_length=%zu value_length=%u, backtrace limit exceeded", buf, 0x26u);
          }
        }
      }
      if (v30) {
        goto LABEL_55;
      }
    }
LABEL_56:
    BOOL v36 = 0;
LABEL_57:
    v20 += v27 + 5;
    if (v20 > a11) {
      break;
    }
    if (v27) {
      BOOL v38 = v36 == 0;
    }
    else {
      BOOL v38 = 1;
    }
    if (!v38)
    {
      switch(v26)
      {
        case 1:
          if (v27 == 16) {
            goto LABEL_64;
          }
          if (v27 >= 0x11)
          {
            v440 = __nwlog_obj();
            if (os_log_type_enabled(v440, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)int buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_path_verify_tlv_length";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 1;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v27;
              *(_WORD *)&unsigned char buf[24] = 1024;
              *(_DWORD *)&buf[26] = 16;
              _os_log_impl(&dword_1830D4000, v440, OS_LOG_TYPE_DEBUG, "%{public}s Permitting TLV of type %u with larger length %u, should be %u", buf, 0x1Eu);
            }

LABEL_64:
            BOOL v39 = parameters;
            *(_OWORD *)((char *)parameters[13].isa + 24) = *(_OWORD *)v36;
          }
          break;
        case 2:
          if (v27 == 16) {
            goto LABEL_170;
          }
          if (v27 >= 0x11)
          {
            int v455 = __nwlog_obj();
            if (os_log_type_enabled(v455, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)int buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_path_verify_tlv_length";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 2;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v27;
              *(_WORD *)&unsigned char buf[24] = 1024;
              *(_DWORD *)&buf[26] = 16;
              _os_log_impl(&dword_1830D4000, v455, OS_LOG_TYPE_DEBUG, "%{public}s Permitting TLV of type %u with larger length %u, should be %u", buf, 0x1Eu);
            }

LABEL_170:
            os_log_type_t v89 = parameters;
            *(_OWORD *)((char *)parameters[13].isa + 8) = *(_OWORD *)v36;
          }
          break;
        case 3:
        case 12:
        case 13:
        case 37:
          break;
        case 4:
          if (v36[(v27 - 1)])
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            id v90 = (id)gLogObj;
            *(_DWORD *)int buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = v27;
            uint64_t v91 = (const char *)_os_log_send_and_compose_impl();

            uu[0] = 16;
            os_log_type_t v568 = OS_LOG_TYPE_DEFAULT;
            if (!__nwlog_fault(v91, uu, &v568)) {
              goto LABEL_618;
            }
            if (uu[0] == 17)
            {
              id v92 = __nwlog_obj();
              os_log_type_t v93 = uu[0];
              if (os_log_type_enabled(v92, (os_log_type_t)uu[0]))
              {
                *(_DWORD *)int buf = 136446466;
                *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = v27;
                _os_log_impl(&dword_1830D4000, v92, v93, "%{public}s NECP_CLIENT_PARAMETER_ACCOUNT of length %u not NULL-terminated", buf, 0x12u);
              }
              goto LABEL_617;
            }
            if (v568)
            {
              uint64_t v188 = (char *)__nw_create_backtrace_string();
              id v92 = __nwlog_obj();
              os_log_type_t v189 = uu[0];
              BOOL v190 = os_log_type_enabled(v92, (os_log_type_t)uu[0]);
              if (v188)
              {
                if (v190)
                {
                  *(_DWORD *)int buf = 136446722;
                  *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
                  *(_WORD *)&unsigned char buf[12] = 1024;
                  *(_DWORD *)&buf[14] = v27;
                  *(_WORD *)&buf[18] = 2082;
                  *(void *)&buf[20] = v188;
                  _os_log_impl(&dword_1830D4000, v92, v189, "%{public}s NECP_CLIENT_PARAMETER_ACCOUNT of length %u not NULL-terminated, dumping backtrace:%{public}s", buf, 0x1Cu);
                }

                free(v188);
                goto LABEL_618;
              }
              if (v190)
              {
                *(_DWORD *)int buf = 136446466;
                *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = v27;
                _os_log_impl(&dword_1830D4000, v92, v189, "%{public}s NECP_CLIENT_PARAMETER_ACCOUNT of length %u not NULL-terminated, no backtrace", buf, 0x12u);
              }
            }
            else
            {
              id v92 = __nwlog_obj();
              os_log_type_t v211 = uu[0];
              if (os_log_type_enabled(v92, (os_log_type_t)uu[0]))
              {
                *(_DWORD *)int buf = 136446466;
                *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = v27;
                _os_log_impl(&dword_1830D4000, v92, v211, "%{public}s NECP_CLIENT_PARAMETER_ACCOUNT of length %u not NULL-terminated, backtrace limit exceeded", buf, 0x12u);
              }
            }
            goto LABEL_617;
          }
          nw_parameters_set_account_id(parameters, v36);
          break;
        case 6:
          if (v27 == 4) {
            goto LABEL_98;
          }
          if (v27 >= 5)
          {
            v447 = __nwlog_obj();
            if (os_log_type_enabled(v447, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)int buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_path_verify_tlv_length";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 6;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v27;
              *(_WORD *)&unsigned char buf[24] = 1024;
              *(_DWORD *)&buf[26] = 4;
              _os_log_impl(&dword_1830D4000, v447, OS_LOG_TYPE_DEBUG, "%{public}s Permitting TLV of type %u with larger length %u, should be %u", buf, 0x1Eu);
            }

LABEL_98:
            int v53 = *(_DWORD *)v36;
            uint64_t v54 = parameters;
            *((_DWORD *)parameters[13].isa + 16) = v53;
          }
          break;
        case 7:
          if (v27 == 4) {
            goto LABEL_178;
          }
          if (v27 >= 5)
          {
            v456 = __nwlog_obj();
            if (os_log_type_enabled(v456, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)int buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_path_verify_tlv_length";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 7;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v27;
              *(_WORD *)&unsigned char buf[24] = 1024;
              *(_DWORD *)&buf[26] = 4;
              _os_log_impl(&dword_1830D4000, v456, OS_LOG_TYPE_DEBUG, "%{public}s Permitting TLV of type %u with larger length %u, should be %u", buf, 0x1Eu);
            }

LABEL_178:
            int v94 = *(_DWORD *)v36;
            int v95 = parameters;
            *((_DWORD *)parameters[13].isa + 17) = v94;
          }
          break;
        case 9:
          if (v27 <= 0x18)
          {
            bzero(&buf[v27], 24 - v27);
            memcpy(buf, v36, v27);
            BOOL v40 = nw_interface_create_with_name((char *)buf);
            if (v40) {
              nw_parameters_require_interface(parameters, v40);
            }
            goto LABEL_418;
          }
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          id v154 = (id)gLogObj;
          *(_DWORD *)int buf = 136447234;
          *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 9;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = v27;
          *(_WORD *)&unsigned char buf[24] = 2080;
          *(void *)&buf[26] = "nw_path_parse_necp_parameters";
          *(_WORD *)&buf[34] = 1024;
          *(_DWORD *)&buf[36] = 3032;
          uint64_t v91 = (const char *)_os_log_send_and_compose_impl();

          uu[0] = 16;
          os_log_type_t v568 = OS_LOG_TYPE_DEFAULT;
          if (!__nwlog_fault(v91, uu, &v568)) {
            goto LABEL_618;
          }
          if (uu[0] == 17)
          {
            id v92 = __nwlog_obj();
            os_log_type_t v155 = uu[0];
            if (os_log_type_enabled(v92, (os_log_type_t)uu[0]))
            {
              *(_DWORD *)int buf = 136447234;
              *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 9;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v27;
              *(_WORD *)&unsigned char buf[24] = 2080;
              *(void *)&buf[26] = "nw_path_parse_necp_parameters";
              *(_WORD *)&buf[34] = 1024;
              *(_DWORD *)&buf[36] = 3032;
              _os_log_impl(&dword_1830D4000, v92, v155, "%{public}s TLV of type %d has invalid length %u (%s:%d)", buf, 0x28u);
            }
            goto LABEL_617;
          }
          if (v568 == OS_LOG_TYPE_DEFAULT)
          {
            id v92 = __nwlog_obj();
            os_log_type_t v215 = uu[0];
            if (os_log_type_enabled(v92, (os_log_type_t)uu[0]))
            {
              *(_DWORD *)int buf = 136447234;
              *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 9;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v27;
              *(_WORD *)&unsigned char buf[24] = 2080;
              *(void *)&buf[26] = "nw_path_parse_necp_parameters";
              *(_WORD *)&buf[34] = 1024;
              *(_DWORD *)&buf[36] = 3032;
              _os_log_impl(&dword_1830D4000, v92, v215, "%{public}s TLV of type %d has invalid length %u (%s:%d), backtrace limit exceeded", buf, 0x28u);
            }
            goto LABEL_617;
          }
          uint64_t v200 = (char *)__nw_create_backtrace_string();
          id v201 = __nwlog_obj();
          os_log_type_t v202 = uu[0];
          BOOL v203 = os_log_type_enabled(v201, (os_log_type_t)uu[0]);
          if (v200)
          {
            if (v203)
            {
              *(_DWORD *)int buf = 136447490;
              *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 9;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v27;
              *(_WORD *)&unsigned char buf[24] = 2080;
              *(void *)&buf[26] = "nw_path_parse_necp_parameters";
              *(_WORD *)&buf[34] = 1024;
              *(_DWORD *)&buf[36] = 3032;
              *(_WORD *)&uint8_t buf[40] = 2082;
              *(void *)&buf[42] = v200;
              _os_log_impl(&dword_1830D4000, v201, v202, "%{public}s TLV of type %d has invalid length %u (%s:%d), dumping backtrace:%{public}s", buf, 0x32u);
            }
            goto LABEL_408;
          }
          if (v203)
          {
            *(_DWORD *)int buf = 136447234;
            *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 9;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = v27;
            *(_WORD *)&unsigned char buf[24] = 2080;
            *(void *)&buf[26] = "nw_path_parse_necp_parameters";
            *(_WORD *)&buf[34] = 1024;
            *(_DWORD *)&buf[36] = 3032;
            _os_log_impl(&dword_1830D4000, v201, v202, "%{public}s TLV of type %d has invalid length %u (%s:%d), no backtrace", buf, 0x28u);
          }
          goto LABEL_1106;
        case 10:
          if (v27 == 4) {
            goto LABEL_180;
          }
          if (v27 >= 5)
          {
            uint64_t v457 = __nwlog_obj();
            if (os_log_type_enabled(v457, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)int buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_path_verify_tlv_length";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 10;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v27;
              *(_WORD *)&unsigned char buf[24] = 1024;
              *(_DWORD *)&buf[26] = 4;
              _os_log_impl(&dword_1830D4000, v457, OS_LOG_TYPE_DEBUG, "%{public}s Permitting TLV of type %u with larger length %u, should be %u", buf, 0x1Eu);
            }

LABEL_180:
            int v96 = *(_DWORD *)v36;
            os_log_type_t v97 = parameters;
            *((_DWORD *)parameters[13].isa + 18) = v96;
          }
          break;
        case 11:
          if (v27 != 2 && v27 != 1)
          {
            v471 = __nwlog_obj();
            if (os_log_type_enabled(v471, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)int buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_path_verify_tlv_length";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 11;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v27;
              *(_WORD *)&unsigned char buf[24] = 1024;
              *(_DWORD *)&buf[26] = 1;
              _os_log_impl(&dword_1830D4000, v471, OS_LOG_TYPE_DEBUG, "%{public}s Permitting TLV of type %u with larger length %u, should be %u", buf, 0x1Eu);
            }
          }
          char v98 = *v36;
          if (!*v36) {
            break;
          }
          os_log_type_t v99 = nw_parameters_copy_default_protocol_stack(parameters);
          nw_protocol_options_t v100 = nw_protocol_stack_copy_transport_protocol(v99);
          BOOL v101 = v100 == 0;

          if (!v101) {
            goto LABEL_466;
          }
          if (v98 == 6)
          {
            options = nw_tcp_create_options();
          }
          else
          {
            if (v98 != 17) {
              goto LABEL_466;
            }
            options = nw_udp_create_options();
          }
          uint64_t v224 = options;
          nw_protocol_stack_set_transport_protocol(v99, options);

LABEL_466:
          char v548 = v98;
          break;
        case 33:
          uint64_t v55 = (v27 - 1);
          if (v36[v55])
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            id v56 = (id)gLogObj;
            *(_DWORD *)int buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = v27;
            uint64_t v57 = (char *)_os_log_send_and_compose_impl();

            uu[0] = 16;
            os_log_type_t v568 = OS_LOG_TYPE_DEFAULT;
            if (__nwlog_fault(v57, uu, &v568))
            {
              if (uu[0] == 17)
              {
                __int16 v58 = __nwlog_obj();
                os_log_type_t v59 = uu[0];
                if (os_log_type_enabled(v58, (os_log_type_t)uu[0]))
                {
                  *(_DWORD *)int buf = 136446466;
                  *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
                  *(_WORD *)&unsigned char buf[12] = 1024;
                  *(_DWORD *)&buf[14] = v27;
                  _os_log_impl(&dword_1830D4000, v58, v59, "%{public}s NECP_CLIENT_PARAMETER_DOMAIN_OWNER of length %u not NULL-terminated", buf, 0x12u);
                }
                goto LABEL_469;
              }
              if (v568 == OS_LOG_TYPE_DEFAULT)
              {
                __int16 v58 = __nwlog_obj();
                os_log_type_t v210 = uu[0];
                if (os_log_type_enabled(v58, (os_log_type_t)uu[0]))
                {
                  *(_DWORD *)int buf = 136446466;
                  *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
                  *(_WORD *)&unsigned char buf[12] = 1024;
                  *(_DWORD *)&buf[14] = v27;
                  _os_log_impl(&dword_1830D4000, v58, v210, "%{public}s NECP_CLIENT_PARAMETER_DOMAIN_OWNER of length %u not NULL-terminated, backtrace limit exceeded", buf, 0x12u);
                }
                goto LABEL_469;
              }
              BOOL v186 = (char *)__nw_create_backtrace_string();
              __int16 v58 = __nwlog_obj();
              os_log_type_t type = uu[0];
              BOOL v187 = os_log_type_enabled(v58, (os_log_type_t)uu[0]);
              if (!v186)
              {
                if (v187)
                {
                  *(_DWORD *)int buf = 136446466;
                  *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
                  *(_WORD *)&unsigned char buf[12] = 1024;
                  *(_DWORD *)&buf[14] = v27;
                  _os_log_impl(&dword_1830D4000, v58, type, "%{public}s NECP_CLIENT_PARAMETER_DOMAIN_OWNER of length %u not NULL-terminated, no backtrace", buf, 0x12u);
                }
                goto LABEL_469;
              }
              if (v187)
              {
                *(_DWORD *)int buf = 136446722;
                *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = v27;
                *(_WORD *)&buf[18] = 2082;
                *(void *)&buf[20] = v186;
                _os_log_impl(&dword_1830D4000, v58, type, "%{public}s NECP_CLIENT_PARAMETER_DOMAIN_OWNER of length %u not NULL-terminated, dumping backtrace:%{public}s", buf, 0x1Cu);
              }

              free(v186);
            }
            goto LABEL_470;
          }
          if (!v559) {
            goto LABEL_472;
          }
          if (*v559)
          {
            nw_endpoint_set_tracker_owner(*v559, v36);
            goto LABEL_472;
          }
          char v218 = __nwlog_obj();
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
          uint64_t v57 = (char *)_os_log_send_and_compose_impl();

          uu[0] = 16;
          os_log_type_t v568 = OS_LOG_TYPE_DEFAULT;
          if (!__nwlog_fault(v57, uu, &v568)) {
            goto LABEL_470;
          }
          if (uu[0] == 17)
          {
            __int16 v58 = __nwlog_obj();
            os_log_type_t v219 = uu[0];
            if (os_log_type_enabled(v58, (os_log_type_t)uu[0]))
            {
              *(_DWORD *)int buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
              _os_log_impl(&dword_1830D4000, v58, v219, "%{public}s NECP_CLIENT_PARAMETER_DOMAIN_OWNER came before NECP_CLIENT_PARAMETER_REMOTE_ENDPOINT", buf, 0xCu);
            }
            goto LABEL_469;
          }
          if (v568 == OS_LOG_TYPE_DEFAULT)
          {
            __int16 v58 = __nwlog_obj();
            os_log_type_t v318 = uu[0];
            if (os_log_type_enabled(v58, (os_log_type_t)uu[0]))
            {
              *(_DWORD *)int buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
              _os_log_impl(&dword_1830D4000, v58, v318, "%{public}s NECP_CLIENT_PARAMETER_DOMAIN_OWNER came before NECP_CLIENT_PARAMETER_REMOTE_ENDPOINT, backtrace limit exceeded", buf, 0xCu);
            }
LABEL_469:

LABEL_470:
            if (!v57) {
              goto LABEL_472;
            }
LABEL_471:
            free(v57);
            goto LABEL_472;
          }
          char v283 = (char *)__nw_create_backtrace_string();
          __int16 v58 = __nwlog_obj();
          os_log_type_t v545 = uu[0];
          BOOL v284 = os_log_type_enabled(v58, (os_log_type_t)uu[0]);
          if (!v283)
          {
            if (v284)
            {
              *(_DWORD *)int buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
              _os_log_impl(&dword_1830D4000, v58, v545, "%{public}s NECP_CLIENT_PARAMETER_DOMAIN_OWNER came before NECP_CLIENT_PARAMETER_REMOTE_ENDPOINT, no backtrace", buf, 0xCu);
            }
            goto LABEL_469;
          }
          if (v284)
          {
            *(_DWORD *)int buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = v283;
            _os_log_impl(&dword_1830D4000, v58, v545, "%{public}s NECP_CLIENT_PARAMETER_DOMAIN_OWNER came before NECP_CLIENT_PARAMETER_REMOTE_ENDPOINT, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v283);
          if (v57) {
            goto LABEL_471;
          }
LABEL_472:
          if (!v36[v55])
          {
            nw_parameters_set_attributed_bundle_identifier(parameters, v36);
            goto LABEL_493;
          }
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          id v225 = (id)gLogObj;
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = v27;
          id v226 = (char *)_os_log_send_and_compose_impl();

          uu[0] = 16;
          os_log_type_t v568 = OS_LOG_TYPE_DEFAULT;
          if (!__nwlog_fault(v226, uu, &v568)) {
            goto LABEL_491;
          }
          if (uu[0] == 17)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            os_log_type_t v227 = (id)gLogObj;
            os_log_type_t v228 = uu[0];
            if (os_log_type_enabled(v227, (os_log_type_t)uu[0]))
            {
              *(_DWORD *)int buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = v27;
              _os_log_impl(&dword_1830D4000, v227, v228, "%{public}s NECP_CLIENT_PARAMETER_ATTRIBUTED_BUNDLE_IDENTIFIER of length %u not NULL-terminated", buf, 0x12u);
            }
          }
          else if (v568)
          {
            int v229 = (char *)__nw_create_backtrace_string();
            os_log_type_t v227 = __nwlog_obj();
            os_log_type_t v230 = uu[0];
            BOOL v231 = os_log_type_enabled(v227, (os_log_type_t)uu[0]);
            if (v229)
            {
              if (v231)
              {
                *(_DWORD *)int buf = 136446722;
                *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = v27;
                *(_WORD *)&buf[18] = 2082;
                *(void *)&buf[20] = v229;
                _os_log_impl(&dword_1830D4000, v227, v230, "%{public}s NECP_CLIENT_PARAMETER_ATTRIBUTED_BUNDLE_IDENTIFIER of length %u not NULL-terminated, dumping backtrace:%{public}s", buf, 0x1Cu);
              }

              free(v229);
              if (v226) {
                goto LABEL_492;
              }
              goto LABEL_493;
            }
            if (v231)
            {
              *(_DWORD *)int buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = v27;
              _os_log_impl(&dword_1830D4000, v227, v230, "%{public}s NECP_CLIENT_PARAMETER_ATTRIBUTED_BUNDLE_IDENTIFIER of length %u not NULL-terminated, no backtrace", buf, 0x12u);
            }
          }
          else
          {
            os_log_type_t v227 = __nwlog_obj();
            os_log_type_t v232 = uu[0];
            if (os_log_type_enabled(v227, (os_log_type_t)uu[0]))
            {
              *(_DWORD *)int buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = v27;
              _os_log_impl(&dword_1830D4000, v227, v232, "%{public}s NECP_CLIENT_PARAMETER_ATTRIBUTED_BUNDLE_IDENTIFIER of length %u not NULL-terminated, backtrace limit exceeded", buf, 0x12u);
            }
          }

LABEL_491:
          if (v226) {
LABEL_492:
          }
            free(v226);
LABEL_493:
          if (v560)
          {
            if (v27 != 16)
            {
              if (v27 < 0x11) {
                break;
              }
              char v439 = __nwlog_obj();
              if (os_log_type_enabled(v439, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)int buf = 136446978;
                *(void *)&uint8_t buf[4] = "nw_path_verify_tlv_length";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = v26;
                *(_WORD *)&buf[18] = 1024;
                *(_DWORD *)&buf[20] = v27;
                *(_WORD *)&unsigned char buf[24] = 1024;
                *(_DWORD *)&buf[26] = 16;
                _os_log_impl(&dword_1830D4000, v439, OS_LOG_TYPE_DEBUG, "%{public}s Permitting TLV of type %u with larger length %u, should be %u", buf, 0x1Eu);
              }
            }
            int v233 = v560;
            *(_OWORD *)(v233 + 28) = *(_OWORD *)v36;
            nw_endpoint_t v560 = (nw_endpoint_t)v233;

            id v234 = parameters;
            os_log_type_t v235 = v234;
            uint64_t v236 = *((void *)parameters[13].isa + 22);
            if (v236)
            {
              xpc_object_t v160 = *(id *)(v236 + 72);

              if (v160) {
                goto LABEL_503;
              }
            }
            else
            {
            }
            xpc_object_t v160 = xpc_array_create(0, 0);
            if (v160)
            {
LABEL_503:
              xpc_array_set_uuid(v160, 0xFFFFFFFFFFFFFFFFLL, (const unsigned __int8 *)v36);
              nw_parameters_set_required_netagent_uuids(v235, v160);
              goto LABEL_315;
            }
            int v237 = __nwlog_obj();
            *(_DWORD *)int buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
            uint64_t v238 = (char *)_os_log_send_and_compose_impl();

            uu[0] = 16;
            os_log_type_t v568 = OS_LOG_TYPE_DEFAULT;
            if (!__nwlog_fault(v238, uu, &v568)) {
              goto LABEL_598;
            }
            if (uu[0] == 17)
            {
              nw_endpoint_t v239 = __nwlog_obj();
              os_log_type_t v240 = uu[0];
              if (os_log_type_enabled(v239, (os_log_type_t)uu[0]))
              {
                *(_DWORD *)int buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
                _os_log_impl(&dword_1830D4000, v239, v240, "%{public}s xpc_array_create failed", buf, 0xCu);
              }
              goto LABEL_597;
            }
            if (v568)
            {
              os_log_type_t v241 = (char *)__nw_create_backtrace_string();
              nw_endpoint_t v239 = __nwlog_obj();
              os_log_type_t v242 = uu[0];
              BOOL v243 = os_log_type_enabled(v239, (os_log_type_t)uu[0]);
              if (v241)
              {
                if (v243)
                {
                  *(_DWORD *)int buf = 136446466;
                  *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
                  *(_WORD *)&unsigned char buf[12] = 2082;
                  *(void *)&buf[14] = v241;
                  _os_log_impl(&dword_1830D4000, v239, v242, "%{public}s xpc_array_create failed, dumping backtrace:%{public}s", buf, 0x16u);
                }

                free(v241);
                goto LABEL_598;
              }
              if (v243)
              {
                *(_DWORD *)int buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
                _os_log_impl(&dword_1830D4000, v239, v242, "%{public}s xpc_array_create failed, no backtrace", buf, 0xCu);
              }
            }
            else
            {
              nw_endpoint_t v239 = __nwlog_obj();
              os_log_type_t v244 = uu[0];
              if (os_log_type_enabled(v239, (os_log_type_t)uu[0]))
              {
                *(_DWORD *)int buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
                _os_log_impl(&dword_1830D4000, v239, v244, "%{public}s xpc_array_create failed, backtrace limit exceeded", buf, 0xCu);
              }
            }
LABEL_597:

LABEL_598:
            if (v238) {
              free(v238);
            }
            xpc_object_t v160 = 0;
            goto LABEL_315;
          }
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v173 = (id)gLogObj;
          if (os_log_type_enabled(v173, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)int buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
            _os_log_impl(&dword_1830D4000, v173, OS_LOG_TYPE_ERROR, "%{public}s No previous endpoint to apply endpoint agent to", buf, 0xCu);
          }
LABEL_500:

          nw_endpoint_t v560 = 0;
          break;
        case 34:
          if (!v36[(v27 - 1)])
          {
            nw_parameters_set_attribution_context(parameters, v36);
            break;
          }
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          id v103 = (id)gLogObj;
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = v27;
          uint64_t v91 = (const char *)_os_log_send_and_compose_impl();

          uu[0] = 16;
          os_log_type_t v568 = OS_LOG_TYPE_DEFAULT;
          if (!__nwlog_fault(v91, uu, &v568)) {
            goto LABEL_618;
          }
          if (uu[0] == 17)
          {
            id v92 = __nwlog_obj();
            os_log_type_t v104 = uu[0];
            if (os_log_type_enabled(v92, (os_log_type_t)uu[0]))
            {
              *(_DWORD *)int buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = v27;
              _os_log_impl(&dword_1830D4000, v92, v104, "%{public}s NECP_CLIENT_PARAMETER_DOMAIN_CONTEXT of length %u not NULL-terminated", buf, 0x12u);
            }
            goto LABEL_617;
          }
          if (v568)
          {
            uint64_t v191 = (char *)__nw_create_backtrace_string();
            id v92 = __nwlog_obj();
            os_log_type_t v192 = uu[0];
            BOOL v193 = os_log_type_enabled(v92, (os_log_type_t)uu[0]);
            if (v191)
            {
              if (v193)
              {
                *(_DWORD *)int buf = 136446722;
                *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = v27;
                *(_WORD *)&buf[18] = 2082;
                *(void *)&buf[20] = v191;
                _os_log_impl(&dword_1830D4000, v92, v192, "%{public}s NECP_CLIENT_PARAMETER_DOMAIN_CONTEXT of length %u not NULL-terminated, dumping backtrace:%{public}s", buf, 0x1Cu);
              }
              goto LABEL_423;
            }
            if (v193)
            {
              *(_DWORD *)int buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = v27;
              _os_log_impl(&dword_1830D4000, v92, v192, "%{public}s NECP_CLIENT_PARAMETER_DOMAIN_CONTEXT of length %u not NULL-terminated, no backtrace", buf, 0x12u);
            }
          }
          else
          {
            id v92 = __nwlog_obj();
            os_log_type_t v212 = uu[0];
            if (os_log_type_enabled(v92, (os_log_type_t)uu[0]))
            {
              *(_DWORD *)int buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = v27;
              _os_log_impl(&dword_1830D4000, v92, v212, "%{public}s NECP_CLIENT_PARAMETER_DOMAIN_CONTEXT of length %u not NULL-terminated, backtrace limit exceeded", buf, 0x12u);
            }
          }
          goto LABEL_617;
        case 35:
          if (!v36[(v27 - 1)])
          {
            if (!v559) {
              break;
            }
            if (*v559)
            {
              nw_endpoint_set_known_tracker_name(*v559, v36);
              break;
            }
            int v220 = __nwlog_obj();
            *(_DWORD *)int buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
            BOOL v221 = (const char *)_os_log_send_and_compose_impl();

            uu[0] = 16;
            os_log_type_t v568 = OS_LOG_TYPE_DEFAULT;
            if (!__nwlog_fault(v221, uu, &v568)) {
              goto LABEL_901;
            }
            if (uu[0] == 17)
            {
              nw_endpoint_t v222 = __nwlog_obj();
              os_log_type_t v223 = uu[0];
              if (os_log_type_enabled(v222, (os_log_type_t)uu[0]))
              {
                *(_DWORD *)int buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
                _os_log_impl(&dword_1830D4000, v222, v223, "%{public}s NECP_CLIENT_PARAMETER_TRACKER_DOMAIN came before NECP_CLIENT_PARAMETER_REMOTE_ENDPOINT", buf, 0xCu);
              }
              goto LABEL_900;
            }
            if (v568)
            {
              os_log_type_t v285 = (char *)__nw_create_backtrace_string();
              nw_endpoint_t v222 = __nwlog_obj();
              os_log_type_t v286 = uu[0];
              BOOL v287 = os_log_type_enabled(v222, (os_log_type_t)uu[0]);
              if (v285)
              {
                if (v287)
                {
                  *(_DWORD *)int buf = 136446466;
                  *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
                  *(_WORD *)&unsigned char buf[12] = 2082;
                  *(void *)&buf[14] = v285;
                  _os_log_impl(&dword_1830D4000, v222, v286, "%{public}s NECP_CLIENT_PARAMETER_TRACKER_DOMAIN came before NECP_CLIENT_PARAMETER_REMOTE_ENDPOINT, dumping backtrace:%{public}s", buf, 0x16u);
                }

                free(v285);
                goto LABEL_901;
              }
              if (v287)
              {
                *(_DWORD *)int buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
                _os_log_impl(&dword_1830D4000, v222, v286, "%{public}s NECP_CLIENT_PARAMETER_TRACKER_DOMAIN came before NECP_CLIENT_PARAMETER_REMOTE_ENDPOINT, no backtrace", buf, 0xCu);
              }
            }
            else
            {
              nw_endpoint_t v222 = __nwlog_obj();
              os_log_type_t v319 = uu[0];
              if (os_log_type_enabled(v222, (os_log_type_t)uu[0]))
              {
                *(_DWORD *)int buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
                _os_log_impl(&dword_1830D4000, v222, v319, "%{public}s NECP_CLIENT_PARAMETER_TRACKER_DOMAIN came before NECP_CLIENT_PARAMETER_REMOTE_ENDPOINT, backtrace limit exceeded", buf, 0xCu);
              }
            }
LABEL_900:

LABEL_901:
            if (!v221) {
              break;
            }
            int v82 = (char *)v221;
            goto LABEL_620;
          }
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          id v105 = (id)gLogObj;
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = v27;
          uint64_t v91 = (const char *)_os_log_send_and_compose_impl();

          uu[0] = 16;
          os_log_type_t v568 = OS_LOG_TYPE_DEFAULT;
          if (!__nwlog_fault(v91, uu, &v568)) {
            goto LABEL_618;
          }
          if (uu[0] == 17)
          {
            id v92 = __nwlog_obj();
            os_log_type_t v106 = uu[0];
            if (os_log_type_enabled(v92, (os_log_type_t)uu[0]))
            {
              *(_DWORD *)int buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = v27;
              _os_log_impl(&dword_1830D4000, v92, v106, "%{public}s NECP_CLIENT_PARAMETER_TRACKER_DOMAIN of length %u not NULL-terminated", buf, 0x12u);
            }
            goto LABEL_617;
          }
          if (v568)
          {
            uint64_t v191 = (char *)__nw_create_backtrace_string();
            id v92 = __nwlog_obj();
            os_log_type_t v194 = uu[0];
            BOOL v195 = os_log_type_enabled(v92, (os_log_type_t)uu[0]);
            if (v191)
            {
              if (v195)
              {
                *(_DWORD *)int buf = 136446722;
                *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = v27;
                *(_WORD *)&buf[18] = 2082;
                *(void *)&buf[20] = v191;
                _os_log_impl(&dword_1830D4000, v92, v194, "%{public}s NECP_CLIENT_PARAMETER_TRACKER_DOMAIN of length %u not NULL-terminated, dumping backtrace:%{public}s", buf, 0x1Cu);
              }
              goto LABEL_423;
            }
            if (v195)
            {
              *(_DWORD *)int buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = v27;
              _os_log_impl(&dword_1830D4000, v92, v194, "%{public}s NECP_CLIENT_PARAMETER_TRACKER_DOMAIN of length %u not NULL-terminated, no backtrace", buf, 0x12u);
            }
          }
          else
          {
            id v92 = __nwlog_obj();
            os_log_type_t v213 = uu[0];
            if (os_log_type_enabled(v92, (os_log_type_t)uu[0]))
            {
              *(_DWORD *)int buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = v27;
              _os_log_impl(&dword_1830D4000, v92, v213, "%{public}s NECP_CLIENT_PARAMETER_TRACKER_DOMAIN of length %u not NULL-terminated, backtrace limit exceeded", buf, 0x12u);
            }
          }
          goto LABEL_617;
        case 36:
          uint64_t v55 = (v27 - 1);
          goto LABEL_472;
        case 42:
          if (!v36[(v27 - 1)])
          {
            nw_parameters_set_url(parameters, v36);
            break;
          }
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          id v107 = (id)gLogObj;
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = v27;
          uint64_t v91 = (const char *)_os_log_send_and_compose_impl();

          uu[0] = 16;
          os_log_type_t v568 = OS_LOG_TYPE_DEFAULT;
          if (!__nwlog_fault(v91, uu, &v568)) {
            goto LABEL_618;
          }
          if (uu[0] == 17)
          {
            id v92 = __nwlog_obj();
            os_log_type_t v108 = uu[0];
            if (os_log_type_enabled(v92, (os_log_type_t)uu[0]))
            {
              *(_DWORD *)int buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = v27;
              _os_log_impl(&dword_1830D4000, v92, v108, "%{public}s NECP_CLIENT_PARAMETER_URL of length %u not NULL-terminated", buf, 0x12u);
            }
            goto LABEL_617;
          }
          if (v568)
          {
            uint64_t v191 = (char *)__nw_create_backtrace_string();
            id v92 = __nwlog_obj();
            os_log_type_t v196 = uu[0];
            BOOL v197 = os_log_type_enabled(v92, (os_log_type_t)uu[0]);
            if (v191)
            {
              if (v197)
              {
                *(_DWORD *)int buf = 136446722;
                *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = v27;
                *(_WORD *)&buf[18] = 2082;
                *(void *)&buf[20] = v191;
                _os_log_impl(&dword_1830D4000, v92, v196, "%{public}s NECP_CLIENT_PARAMETER_URL of length %u not NULL-terminated, dumping backtrace:%{public}s", buf, 0x1Cu);
              }
              goto LABEL_423;
            }
            if (v197)
            {
              *(_DWORD *)int buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = v27;
              _os_log_impl(&dword_1830D4000, v92, v196, "%{public}s NECP_CLIENT_PARAMETER_URL of length %u not NULL-terminated, no backtrace", buf, 0x12u);
            }
          }
          else
          {
            id v92 = __nwlog_obj();
            os_log_type_t v214 = uu[0];
            if (os_log_type_enabled(v92, (os_log_type_t)uu[0]))
            {
              *(_DWORD *)int buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = v27;
              _os_log_impl(&dword_1830D4000, v92, v214, "%{public}s NECP_CLIENT_PARAMETER_URL of length %u not NULL-terminated, backtrace limit exceeded", buf, 0x12u);
            }
          }
          goto LABEL_617;
        case 100:
          if (v27 <= 0x18)
          {
            bzero(&buf[v27], 24 - v27);
            memcpy(buf, v36, v27);
            os_log_type_t v60 = nw_interface_create_with_name((char *)buf);
            xpc_object_t v61 = v60;
            if (!v60) {
              goto LABEL_117;
            }
            uint64_t v62 = nw_interface_copy_dictionary(v60);
            if (v62)
            {
              id v63 = nw_parameters_copy_prohibited_interfaces(parameters);
              if (v63 || (id v63 = xpc_array_create(0, 0)) != 0)
              {
                xpc_array_append_value(v63, v62);
                nw_parameters_set_prohibited_interfaces(parameters, v63);
                goto LABEL_115;
              }
              msghdr v294 = __nwlog_obj();
              *(_DWORD *)long long uu = 136446210;
              *(void *)&uu[4] = "nw_path_parse_necp_parameters";
              uint64_t v295 = (char *)_os_log_send_and_compose_impl();

              os_log_type_t v568 = OS_LOG_TYPE_ERROR;
              char v563 = 0;
              if (__nwlog_fault(v295, &v568, &v563))
              {
                if (v568 == OS_LOG_TYPE_FAULT)
                {
                  os_log_type_t v296 = __nwlog_obj();
                  os_log_type_t v297 = v568;
                  if (os_log_type_enabled(v296, v568))
                  {
                    *(_DWORD *)long long uu = 136446210;
                    *(void *)&uu[4] = "nw_path_parse_necp_parameters";
                    _os_log_impl(&dword_1830D4000, v296, v297, "%{public}s xpc_array_create failed", uu, 0xCu);
                  }
                  goto LABEL_959;
                }
                if (v563)
                {
                  v425 = (char *)__nw_create_backtrace_string();
                  os_log_type_t v296 = __nwlog_obj();
                  os_log_type_t v426 = v568;
                  BOOL v427 = os_log_type_enabled(v296, v568);
                  if (v425)
                  {
                    if (v427)
                    {
                      *(_DWORD *)long long uu = 136446466;
                      *(void *)&uu[4] = "nw_path_parse_necp_parameters";
                      *(_WORD *)&uu[12] = 2082;
                      *(void *)&uu[14] = v425;
                      _os_log_impl(&dword_1830D4000, v296, v426, "%{public}s xpc_array_create failed, dumping backtrace:%{public}s", uu, 0x16u);
                    }

                    free(v425);
                    goto LABEL_960;
                  }
                  if (v427)
                  {
                    *(_DWORD *)long long uu = 136446210;
                    *(void *)&uu[4] = "nw_path_parse_necp_parameters";
                    _os_log_impl(&dword_1830D4000, v296, v426, "%{public}s xpc_array_create failed, no backtrace", uu, 0xCu);
                  }
                }
                else
                {
                  os_log_type_t v296 = __nwlog_obj();
                  os_log_type_t v437 = v568;
                  if (os_log_type_enabled(v296, v568))
                  {
                    *(_DWORD *)long long uu = 136446210;
                    *(void *)&uu[4] = "nw_path_parse_necp_parameters";
                    _os_log_impl(&dword_1830D4000, v296, v437, "%{public}s xpc_array_create failed, backtrace limit exceeded", uu, 0xCu);
                  }
                }
LABEL_959:
              }
LABEL_960:
              if (v295) {
                free(v295);
              }
              id v63 = 0;
LABEL_115:
            }
            goto LABEL_117;
          }
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          id v156 = (id)gLogObj;
          *(_DWORD *)int buf = 136447234;
          *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 100;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = v27;
          *(_WORD *)&unsigned char buf[24] = 2080;
          *(void *)&buf[26] = "nw_path_parse_necp_parameters";
          *(_WORD *)&buf[34] = 1024;
          *(_DWORD *)&buf[36] = 3248;
          uint64_t v91 = (const char *)_os_log_send_and_compose_impl();

          uu[0] = 16;
          os_log_type_t v568 = OS_LOG_TYPE_DEFAULT;
          if (!__nwlog_fault(v91, uu, &v568)) {
            goto LABEL_618;
          }
          if (uu[0] == 17)
          {
            id v92 = __nwlog_obj();
            os_log_type_t v157 = uu[0];
            if (os_log_type_enabled(v92, (os_log_type_t)uu[0]))
            {
              *(_DWORD *)int buf = 136447234;
              *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 100;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v27;
              *(_WORD *)&unsigned char buf[24] = 2080;
              *(void *)&buf[26] = "nw_path_parse_necp_parameters";
              *(_WORD *)&buf[34] = 1024;
              *(_DWORD *)&buf[36] = 3248;
              _os_log_impl(&dword_1830D4000, v92, v157, "%{public}s TLV of type %d has invalid length %u (%s:%d)", buf, 0x28u);
            }
            goto LABEL_617;
          }
          if (v568 == OS_LOG_TYPE_DEFAULT)
          {
            id v92 = __nwlog_obj();
            os_log_type_t v216 = uu[0];
            if (os_log_type_enabled(v92, (os_log_type_t)uu[0]))
            {
              *(_DWORD *)int buf = 136447234;
              *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 100;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v27;
              *(_WORD *)&unsigned char buf[24] = 2080;
              *(void *)&buf[26] = "nw_path_parse_necp_parameters";
              *(_WORD *)&buf[34] = 1024;
              *(_DWORD *)&buf[36] = 3248;
              _os_log_impl(&dword_1830D4000, v92, v216, "%{public}s TLV of type %d has invalid length %u (%s:%d), backtrace limit exceeded", buf, 0x28u);
            }
LABEL_617:

LABEL_618:
            if (!v91) {
              break;
            }
LABEL_619:
            int v82 = (char *)v91;
LABEL_620:
            free(v82);
            break;
          }
          uint64_t v200 = (char *)__nw_create_backtrace_string();
          id v201 = __nwlog_obj();
          os_log_type_t v204 = uu[0];
          BOOL v205 = os_log_type_enabled(v201, (os_log_type_t)uu[0]);
          if (!v200)
          {
            if (v205)
            {
              *(_DWORD *)int buf = 136447234;
              *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 100;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v27;
              *(_WORD *)&unsigned char buf[24] = 2080;
              *(void *)&buf[26] = "nw_path_parse_necp_parameters";
              *(_WORD *)&buf[34] = 1024;
              *(_DWORD *)&buf[36] = 3248;
              _os_log_impl(&dword_1830D4000, v201, v204, "%{public}s TLV of type %d has invalid length %u (%s:%d), no backtrace", buf, 0x28u);
            }
LABEL_1106:

            goto LABEL_618;
          }
          if (v205)
          {
            *(_DWORD *)int buf = 136447490;
            *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 100;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = v27;
            *(_WORD *)&unsigned char buf[24] = 2080;
            *(void *)&buf[26] = "nw_path_parse_necp_parameters";
            *(_WORD *)&buf[34] = 1024;
            *(_DWORD *)&buf[36] = 3248;
            *(_WORD *)&uint8_t buf[40] = 2082;
            *(void *)&buf[42] = v200;
            _os_log_impl(&dword_1830D4000, v201, v204, "%{public}s TLV of type %d has invalid length %u (%s:%d), dumping backtrace:%{public}s", buf, 0x32u);
          }
LABEL_408:

          free(v200);
          if (v91) {
            goto LABEL_619;
          }
          break;
        case 101:
          if (v27 != 1)
          {
            int v458 = __nwlog_obj();
            if (os_log_type_enabled(v458, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)int buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_path_verify_tlv_length";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 101;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v27;
              *(_WORD *)&unsigned char buf[24] = 1024;
              *(_DWORD *)&buf[26] = 1;
              _os_log_impl(&dword_1830D4000, v458, OS_LOG_TYPE_DEBUG, "%{public}s Permitting TLV of type %u with larger length %u, should be %u", buf, 0x1Eu);
            }
          }
          int v109 = *v36;
          if ((v109 - 1) > 5) {
            uint64_t v110 = 0;
          }
          else {
            uint64_t v110 = dword_183E234A0[v109 - 1];
          }
          unsigned int v158 = v109 - 3;
          if (v158 <= 4)
          {
            uint64_t v159 = dword_183E234B8[v158];
            if (v159)
            {
              if (v159 == 1002)
              {
                ++HIDWORD(v556);
                break;
              }
              BOOL v40 = nw_parameters_copy_prohibited_interface_subtypes(parameters);
              if (v40 || (BOOL v40 = xpc_array_create(0, 0)) != 0)
              {
                xpc_array_set_uint64(v40, 0xFFFFFFFFFFFFFFFFLL, v159);
                nw_parameters_set_prohibited_interface_subtypes(parameters, v40);
                goto LABEL_418;
              }
              BOOL v314 = __nwlog_obj();
              *(_DWORD *)int buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
              os_log_type_t v315 = (char *)_os_log_send_and_compose_impl();

              uu[0] = 16;
              os_log_type_t v568 = OS_LOG_TYPE_DEFAULT;
              if (!__nwlog_fault(v315, uu, &v568)) {
                goto LABEL_966;
              }
              if (uu[0] == 17)
              {
                uint64_t v316 = __nwlog_obj();
                os_log_type_t v317 = uu[0];
                if (os_log_type_enabled(v316, (os_log_type_t)uu[0]))
                {
                  *(_DWORD *)int buf = 136446210;
                  *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
                  _os_log_impl(&dword_1830D4000, v316, v317, "%{public}s xpc_array_create failed", buf, 0xCu);
                }
                goto LABEL_965;
              }
              if (v568)
              {
                id v428 = (char *)__nw_create_backtrace_string();
                uint64_t v316 = __nwlog_obj();
                os_log_type_t v429 = uu[0];
                BOOL v430 = os_log_type_enabled(v316, (os_log_type_t)uu[0]);
                if (v428)
                {
                  if (v430)
                  {
                    *(_DWORD *)int buf = 136446466;
                    *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
                    *(_WORD *)&unsigned char buf[12] = 2082;
                    *(void *)&buf[14] = v428;
                    _os_log_impl(&dword_1830D4000, v316, v429, "%{public}s xpc_array_create failed, dumping backtrace:%{public}s", buf, 0x16u);
                  }

                  free(v428);
                  goto LABEL_966;
                }
                if (v430)
                {
                  *(_DWORD *)int buf = 136446210;
                  *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
                  _os_log_impl(&dword_1830D4000, v316, v429, "%{public}s xpc_array_create failed, no backtrace", buf, 0xCu);
                }
              }
              else
              {
                uint64_t v316 = __nwlog_obj();
                os_log_type_t v438 = uu[0];
                if (os_log_type_enabled(v316, (os_log_type_t)uu[0]))
                {
                  *(_DWORD *)int buf = 136446210;
                  *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
                  _os_log_impl(&dword_1830D4000, v316, v438, "%{public}s xpc_array_create failed, backtrace limit exceeded", buf, 0xCu);
                }
              }
LABEL_965:

LABEL_966:
              if (v315) {
                free(v315);
              }
              BOOL v40 = 0;
              goto LABEL_418;
            }
          }
          if (!v110) {
            break;
          }
          xpc_object_t v160 = nw_parameters_copy_prohibited_interface_types(parameters);
          if (v160 || (xpc_object_t v160 = xpc_array_create(0, 0)) != 0)
          {
            xpc_array_set_uint64(v160, 0xFFFFFFFFFFFFFFFFLL, v110);
            nw_parameters_set_prohibited_interface_types(parameters, v160);
            goto LABEL_315;
          }
          v258 = __nwlog_obj();
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
          os_log_type_t v259 = (char *)_os_log_send_and_compose_impl();

          uu[0] = 16;
          os_log_type_t v568 = OS_LOG_TYPE_DEFAULT;
          if (!__nwlog_fault(v259, uu, &v568)) {
            goto LABEL_918;
          }
          if (uu[0] == 17)
          {
            uint64_t v260 = __nwlog_obj();
            os_log_type_t v261 = uu[0];
            if (os_log_type_enabled(v260, (os_log_type_t)uu[0]))
            {
              *(_DWORD *)int buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
              _os_log_impl(&dword_1830D4000, v260, v261, "%{public}s xpc_array_create failed", buf, 0xCu);
            }
LABEL_917:

            goto LABEL_918;
          }
          if (v568 == OS_LOG_TYPE_DEFAULT)
          {
            uint64_t v260 = __nwlog_obj();
            os_log_type_t v431 = uu[0];
            if (os_log_type_enabled(v260, (os_log_type_t)uu[0]))
            {
              *(_DWORD *)int buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
              _os_log_impl(&dword_1830D4000, v260, v431, "%{public}s xpc_array_create failed, backtrace limit exceeded", buf, 0xCu);
            }
            goto LABEL_917;
          }
          BOOL v288 = (char *)__nw_create_backtrace_string();
          uint64_t v260 = __nwlog_obj();
          os_log_type_t v289 = uu[0];
          BOOL v290 = os_log_type_enabled(v260, (os_log_type_t)uu[0]);
          if (!v288)
          {
            if (v290)
            {
              *(_DWORD *)int buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
              _os_log_impl(&dword_1830D4000, v260, v289, "%{public}s xpc_array_create failed, no backtrace", buf, 0xCu);
            }
            goto LABEL_917;
          }
          if (v290)
          {
            *(_DWORD *)int buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = v288;
            _os_log_impl(&dword_1830D4000, v260, v289, "%{public}s xpc_array_create failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v288);
LABEL_918:
          if (v259) {
            free(v259);
          }
          xpc_object_t v160 = 0;
LABEL_315:

          break;
        case 102:
          if (v27 == 16) {
            goto LABEL_244;
          }
          if (v27 < 0x11) {
            break;
          }
          int v466 = __nwlog_obj();
          if (os_log_type_enabled(v466, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)int buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_path_verify_tlv_length";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 102;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = v27;
            *(_WORD *)&unsigned char buf[24] = 1024;
            *(_DWORD *)&buf[26] = 16;
            _os_log_impl(&dword_1830D4000, v466, OS_LOG_TYPE_DEBUG, "%{public}s Permitting TLV of type %u with larger length %u, should be %u", buf, 0x1Eu);
          }

LABEL_244:
          *(_OWORD *)long long uu = *(_OWORD *)v36;
          if (uuid_is_null(uu)) {
            break;
          }
          BOOL v40 = nw_parameters_copy_prohibited_netagent_uuids(parameters);
          if (v40 || (BOOL v40 = xpc_array_create(0, 0)) != 0)
          {
            xpc_array_set_uuid(v40, 0xFFFFFFFFFFFFFFFFLL, uu);
            nw_parameters_set_prohibited_netagent_uuids(parameters, v40);
            goto LABEL_418;
          }
          uint64_t v278 = __nwlog_obj();
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
          id v279 = (char *)_os_log_send_and_compose_impl();

          os_log_type_t v568 = OS_LOG_TYPE_ERROR;
          char v563 = 0;
          if (!__nwlog_fault(v279, &v568, &v563)) {
            goto LABEL_948;
          }
          if (v568 == OS_LOG_TYPE_FAULT)
          {
            os_log_type_t v280 = __nwlog_obj();
            os_log_type_t v281 = v568;
            if (os_log_type_enabled(v280, v568))
            {
              *(_DWORD *)int buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
              _os_log_impl(&dword_1830D4000, v280, v281, "%{public}s xpc_array_create failed", buf, 0xCu);
            }
LABEL_947:

            goto LABEL_948;
          }
          if (!v563)
          {
            os_log_type_t v280 = __nwlog_obj();
            os_log_type_t v436 = v568;
            if (os_log_type_enabled(v280, v568))
            {
              *(_DWORD *)int buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
              _os_log_impl(&dword_1830D4000, v280, v436, "%{public}s xpc_array_create failed, backtrace limit exceeded", buf, 0xCu);
            }
            goto LABEL_947;
          }
          uint64_t v307 = (char *)__nw_create_backtrace_string();
          os_log_type_t v280 = __nwlog_obj();
          os_log_type_t v308 = v568;
          BOOL v309 = os_log_type_enabled(v280, v568);
          if (!v307)
          {
            if (v309)
            {
              *(_DWORD *)int buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
              _os_log_impl(&dword_1830D4000, v280, v308, "%{public}s xpc_array_create failed, no backtrace", buf, 0xCu);
            }
            goto LABEL_947;
          }
          if (v309)
          {
            *(_DWORD *)int buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = v307;
            _os_log_impl(&dword_1830D4000, v280, v308, "%{public}s xpc_array_create failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v307);
LABEL_948:
          if (v279) {
            free(v279);
          }
          BOOL v40 = 0;
LABEL_418:

          break;
        case 103:
          memset(buf, 0, sizeof(buf));
          if (v27 == 64) {
            goto LABEL_119;
          }
          if (v27 < 0x41) {
            break;
          }
          v448 = __nwlog_obj();
          if (os_log_type_enabled(v448, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)long long uu = 136446978;
            *(void *)&uu[4] = "nw_path_verify_tlv_length";
            *(_WORD *)&uu[12] = 1024;
            *(_DWORD *)&uu[14] = 103;
            *(_WORD *)&uu[18] = 1024;
            *(_DWORD *)&uu[20] = v27;
            LOWORD(v572) = 1024;
            *(_DWORD *)((char *)&v572 + 2) = 64;
            _os_log_impl(&dword_1830D4000, v448, OS_LOG_TYPE_DEBUG, "%{public}s Permitting TLV of type %u with larger length %u, should be %u", uu, 0x1Eu);
          }

LABEL_119:
          long long v64 = *((_OWORD *)v36 + 1);
          *(_OWORD *)int buf = *(_OWORD *)v36;
          *(_OWORD *)&buf[16] = v64;
          long long v65 = *((_OWORD *)v36 + 3);
          *(_OWORD *)&buf[32] = *((_OWORD *)v36 + 2);
          *(_OWORD *)&unsigned char buf[48] = v65;
          uint64_t v66 = parameters;
          uint64_t v67 = *((void *)parameters[13].isa + 22);
          if (v67) {
            xpc_object_t v68 = *(id *)(v67 + 32);
          }
          else {
            xpc_object_t v68 = 0;
          }

          uint64_t v174 = v66;
          uint64_t v175 = *((void *)parameters[13].isa + 22);
          if (v175) {
            p_super = *(id *)(v175 + 40);
          }
          else {
            p_super = 0;
          }

          if (v68) {
            goto LABEL_771;
          }
          xpc_object_t v68 = xpc_array_create(0, 0);
          if (v68) {
            goto LABEL_771;
          }
          os_log_type_t v178 = __nwlog_obj();
          *(_DWORD *)long long uu = 136446210;
          *(void *)&uu[4] = "nw_path_parse_necp_parameters";
          int v179 = (char *)_os_log_send_and_compose_impl();

          os_log_type_t v568 = OS_LOG_TYPE_ERROR;
          char v563 = 0;
          if (!__nwlog_fault(v179, &v568, &v563)) {
            goto LABEL_768;
          }
          if (v568 == OS_LOG_TYPE_FAULT)
          {
            int v180 = __nwlog_obj();
            os_log_type_t v181 = v568;
            if (os_log_type_enabled(v180, v568))
            {
              *(_DWORD *)long long uu = 136446210;
              *(void *)&uu[4] = "nw_path_parse_necp_parameters";
              _os_log_impl(&dword_1830D4000, v180, v181, "%{public}s xpc_array_create failed", uu, 0xCu);
            }
LABEL_767:

            goto LABEL_768;
          }
          if (!v563)
          {
            int v180 = __nwlog_obj();
            os_log_type_t v312 = v568;
            if (os_log_type_enabled(v180, v568))
            {
              *(_DWORD *)long long uu = 136446210;
              *(void *)&uu[4] = "nw_path_parse_necp_parameters";
              _os_log_impl(&dword_1830D4000, v180, v312, "%{public}s xpc_array_create failed, backtrace limit exceeded", uu, 0xCu);
            }
            goto LABEL_767;
          }
          BOOL v251 = (char *)__nw_create_backtrace_string();
          int v180 = __nwlog_obj();
          os_log_type_t v252 = v568;
          BOOL v253 = os_log_type_enabled(v180, v568);
          if (!v251)
          {
            if (v253)
            {
              *(_DWORD *)long long uu = 136446210;
              *(void *)&uu[4] = "nw_path_parse_necp_parameters";
              _os_log_impl(&dword_1830D4000, v180, v252, "%{public}s xpc_array_create failed, no backtrace", uu, 0xCu);
            }
            goto LABEL_767;
          }
          if (v253)
          {
            *(_DWORD *)long long uu = 136446466;
            *(void *)&uu[4] = "nw_path_parse_necp_parameters";
            *(_WORD *)&uu[12] = 2082;
            *(void *)&uu[14] = v251;
            _os_log_impl(&dword_1830D4000, v180, v252, "%{public}s xpc_array_create failed, dumping backtrace:%{public}s", uu, 0x16u);
          }

          free(v251);
LABEL_768:
          if (v179) {
            free(v179);
          }
          xpc_object_t v68 = 0;
LABEL_771:
          if (!p_super)
          {
            p_super = xpc_array_create(0, 0);
            if (!p_super)
            {
              __int16 v386 = __nwlog_obj();
              *(_DWORD *)long long uu = 136446210;
              *(void *)&uu[4] = "nw_path_parse_necp_parameters";
              v387 = (char *)_os_log_send_and_compose_impl();

              os_log_type_t v568 = OS_LOG_TYPE_ERROR;
              char v563 = 0;
              if (__nwlog_fault(v387, &v568, &v563))
              {
                if (v568 == OS_LOG_TYPE_FAULT)
                {
                  nw_endpoint_t v388 = __nwlog_obj();
                  os_log_type_t v389 = v568;
                  if (os_log_type_enabled(v388, v568))
                  {
                    *(_DWORD *)long long uu = 136446210;
                    *(void *)&uu[4] = "nw_path_parse_necp_parameters";
                    _os_log_impl(&dword_1830D4000, v388, v389, "%{public}s xpc_array_create failed", uu, 0xCu);
                  }
                  goto LABEL_867;
                }
                if (v563)
                {
                  int v393 = (char *)__nw_create_backtrace_string();
                  nw_endpoint_t v388 = __nwlog_obj();
                  os_log_type_t v394 = v568;
                  BOOL v395 = os_log_type_enabled(v388, v568);
                  if (v393)
                  {
                    if (v395)
                    {
                      *(_DWORD *)long long uu = 136446466;
                      *(void *)&uu[4] = "nw_path_parse_necp_parameters";
                      *(_WORD *)&uu[12] = 2082;
                      *(void *)&uu[14] = v393;
                      _os_log_impl(&dword_1830D4000, v388, v394, "%{public}s xpc_array_create failed, dumping backtrace:%{public}s", uu, 0x16u);
                    }

                    free(v393);
                    goto LABEL_868;
                  }
                  if (v395)
                  {
                    *(_DWORD *)long long uu = 136446210;
                    *(void *)&uu[4] = "nw_path_parse_necp_parameters";
                    _os_log_impl(&dword_1830D4000, v388, v394, "%{public}s xpc_array_create failed, no backtrace", uu, 0xCu);
                  }
                }
                else
                {
                  nw_endpoint_t v388 = __nwlog_obj();
                  os_log_type_t v398 = v568;
                  if (os_log_type_enabled(v388, v568))
                  {
                    *(_DWORD *)long long uu = 136446210;
                    *(void *)&uu[4] = "nw_path_parse_necp_parameters";
                    _os_log_impl(&dword_1830D4000, v388, v398, "%{public}s xpc_array_create failed, backtrace limit exceeded", uu, 0xCu);
                  }
                }
LABEL_867:
              }
LABEL_868:
              if (v387) {
                free(v387);
              }
              p_super = 0;
              goto LABEL_878;
            }
          }
          if (!v68) {
            goto LABEL_878;
          }
          if (strnlen((const char *)buf, 0x20uLL) <= 0x1F && strnlen((const char *)&buf[32], 0x20uLL) <= 0x1F)
          {
            xpc_array_set_string(v68, 0xFFFFFFFFFFFFFFFFLL, (const char *)buf);
            xpc_array_set_string(p_super, 0xFFFFFFFFFFFFFFFFLL, (const char *)&buf[32]);
            nw_parameters_set_prohibited_netagent_classes(v174, v68, p_super);
            goto LABEL_878;
          }
          BOOL v373 = __nwlog_obj();
          size_t v374 = strnlen((const char *)buf, 0x20uLL);
          size_t v375 = strnlen((const char *)&buf[32], 0x20uLL);
          *(_DWORD *)long long uu = 136446722;
          *(void *)&uu[4] = "nw_path_parse_necp_parameters";
          *(_WORD *)&uu[12] = 2048;
          *(void *)&uu[14] = v374;
          *(_WORD *)&uu[22] = 2048;
          size_t v572 = v375;
          id v323 = (char *)_os_log_send_and_compose_impl();

          os_log_type_t v568 = OS_LOG_TYPE_ERROR;
          char v563 = 0;
          if (!__nwlog_fault(v323, &v568, &v563)) {
            goto LABEL_803;
          }
          if (v568 == OS_LOG_TYPE_FAULT)
          {
            int v376 = __nwlog_obj();
            os_log_type_t v377 = v568;
            if (os_log_type_enabled(v376, v568))
            {
              size_t v378 = strnlen((const char *)buf, 0x20uLL);
              size_t v379 = strnlen((const char *)&buf[32], 0x20uLL);
              *(_DWORD *)long long uu = 136446722;
              *(void *)&uu[4] = "nw_path_parse_necp_parameters";
              *(_WORD *)&uu[12] = 2048;
              *(void *)&uu[14] = v378;
              *(_WORD *)&uu[22] = 2048;
              size_t v572 = v379;
              _os_log_impl(&dword_1830D4000, v376, v377, "%{public}s invalid prohibited netagent string lengths %zu %zu", uu, 0x20u);
            }
LABEL_781:

            goto LABEL_803;
          }
          if (!v563)
          {
            int v376 = __nwlog_obj();
            os_log_type_t v390 = v568;
            if (os_log_type_enabled(v376, v568))
            {
              size_t v391 = strnlen((const char *)buf, 0x20uLL);
              size_t v392 = strnlen((const char *)&buf[32], 0x20uLL);
              *(_DWORD *)long long uu = 136446722;
              *(void *)&uu[4] = "nw_path_parse_necp_parameters";
              *(_WORD *)&uu[12] = 2048;
              *(void *)&uu[14] = v391;
              *(_WORD *)&uu[22] = 2048;
              size_t v572 = v392;
              _os_log_impl(&dword_1830D4000, v376, v390, "%{public}s invalid prohibited netagent string lengths %zu %zu, backtrace limit exceeded", uu, 0x20u);
            }
            goto LABEL_781;
          }
          __int16 v380 = (char *)__nw_create_backtrace_string();
          nw_endpoint_t v381 = __nwlog_obj();
          os_log_type_t v382 = v568;
          BOOL v383 = os_log_type_enabled(v381, v568);
          if (v380)
          {
            if (v383)
            {
              size_t v384 = strnlen((const char *)buf, 0x20uLL);
              size_t v385 = strnlen((const char *)&buf[32], 0x20uLL);
              *(_DWORD *)long long uu = 136446978;
              *(void *)&uu[4] = "nw_path_parse_necp_parameters";
              *(_WORD *)&uu[12] = 2048;
              *(void *)&uu[14] = v384;
              *(_WORD *)&uu[22] = 2048;
              size_t v572 = v385;
              __int16 v573 = 2082;
              v574 = v380;
              _os_log_impl(&dword_1830D4000, v381, v382, "%{public}s invalid prohibited netagent string lengths %zu %zu, dumping backtrace:%{public}s", uu, 0x2Au);
            }

            free(v380);
          }
          else
          {
            if (v383)
            {
              size_t v396 = strnlen((const char *)buf, 0x20uLL);
              size_t v397 = strnlen((const char *)&buf[32], 0x20uLL);
              *(_DWORD *)long long uu = 136446722;
              *(void *)&uu[4] = "nw_path_parse_necp_parameters";
              *(_WORD *)&uu[12] = 2048;
              *(void *)&uu[14] = v396;
              *(_WORD *)&uu[22] = 2048;
              size_t v572 = v397;
              _os_log_impl(&dword_1830D4000, v381, v382, "%{public}s invalid prohibited netagent string lengths %zu %zu, no backtrace", uu, 0x20u);
            }
          }
LABEL_803:
          if (v323) {
LABEL_847:
          }
            free(v323);
LABEL_878:

          break;
        case 111:
          if (v27 != 1)
          {
            nw_endpoint_t v459 = __nwlog_obj();
            if (os_log_type_enabled(v459, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)int buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_path_verify_tlv_length";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 111;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v27;
              *(_WORD *)&unsigned char buf[24] = 1024;
              *(_DWORD *)&buf[26] = 1;
              _os_log_impl(&dword_1830D4000, v459, OS_LOG_TYPE_DEBUG, "%{public}s Permitting TLV of type %u with larger length %u, should be %u", buf, 0x1Eu);
            }
          }
          unsigned int v111 = *v36 - 1;
          if (v111 > 5) {
            unsigned int v112 = 0;
          }
          else {
            unsigned int v112 = dword_183E234A0[v111];
          }
          os_log_type_t v161 = parameters;
          uint64_t v162 = v161;
          Class isa = parameters[13].isa;
          uint64_t v164 = 92;
          if ((*((_WORD *)isa + 50) & 0x100) == 0) {
            uint64_t v164 = 76;
          }
          *(_DWORD *)((char *)isa + v164) = v112;

          unsigned int v165 = *v36 - 3;
          if (v165 > 4) {
            unsigned int v166 = 0;
          }
          else {
            unsigned int v166 = dword_183E234B8[v165];
          }
          os_log_type_t v170 = v162;
          Class v171 = parameters[13].isa;
          uint64_t v172 = 96;
          if ((*((_WORD *)v171 + 50) & 0x100) == 0) {
            uint64_t v172 = 80;
          }
          *(_DWORD *)((char *)v171 + v172) = v166;

          break;
        case 112:
          if (v27 == 16) {
            goto LABEL_122;
          }
          if (v27 < 0x11) {
            break;
          }
          uint64_t v449 = __nwlog_obj();
          if (os_log_type_enabled(v449, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)int buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_path_verify_tlv_length";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 112;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = v27;
            *(_WORD *)&unsigned char buf[24] = 1024;
            *(_DWORD *)&buf[26] = 16;
            _os_log_impl(&dword_1830D4000, v449, OS_LOG_TYPE_DEBUG, "%{public}s Permitting TLV of type %u with larger length %u, should be %u", buf, 0x1Eu);
          }

LABEL_122:
          *(_OWORD *)long long uu = *(_OWORD *)v36;
          if (uuid_is_null(uu)) {
            break;
          }
          BOOL v40 = nw_parameters_copy_required_netagent_uuids(parameters);
          if (v40 || (BOOL v40 = xpc_array_create(0, 0)) != 0)
          {
            xpc_array_set_uuid(v40, 0xFFFFFFFFFFFFFFFFLL, uu);
            nw_parameters_set_required_netagent_uuids(parameters, v40);
            goto LABEL_418;
          }
          BOOL v270 = __nwlog_obj();
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
          id v271 = (char *)_os_log_send_and_compose_impl();

          os_log_type_t v568 = OS_LOG_TYPE_ERROR;
          char v563 = 0;
          if (!__nwlog_fault(v271, &v568, &v563)) {
            goto LABEL_936;
          }
          if (v568 == OS_LOG_TYPE_FAULT)
          {
            uint64_t v272 = __nwlog_obj();
            os_log_type_t v273 = v568;
            if (os_log_type_enabled(v272, v568))
            {
              *(_DWORD *)int buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
              _os_log_impl(&dword_1830D4000, v272, v273, "%{public}s xpc_array_create failed", buf, 0xCu);
            }
LABEL_935:

            goto LABEL_936;
          }
          if (!v563)
          {
            uint64_t v272 = __nwlog_obj();
            os_log_type_t v434 = v568;
            if (os_log_type_enabled(v272, v568))
            {
              *(_DWORD *)int buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
              _os_log_impl(&dword_1830D4000, v272, v434, "%{public}s xpc_array_create failed, backtrace limit exceeded", buf, 0xCu);
            }
            goto LABEL_935;
          }
          __int16 v301 = (char *)__nw_create_backtrace_string();
          uint64_t v272 = __nwlog_obj();
          os_log_type_t v302 = v568;
          BOOL v303 = os_log_type_enabled(v272, v568);
          if (!v301)
          {
            if (v303)
            {
              *(_DWORD *)int buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
              _os_log_impl(&dword_1830D4000, v272, v302, "%{public}s xpc_array_create failed, no backtrace", buf, 0xCu);
            }
            goto LABEL_935;
          }
          if (v303)
          {
            *(_DWORD *)int buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = v301;
            _os_log_impl(&dword_1830D4000, v272, v302, "%{public}s xpc_array_create failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v301);
LABEL_936:
          if (v271) {
            free(v271);
          }
          BOOL v40 = 0;
          goto LABEL_418;
        case 113:
          memset(buf, 0, sizeof(buf));
          if (v27 == 64) {
            goto LABEL_214;
          }
          if (v27 < 0x41) {
            break;
          }
          nw_endpoint_t v460 = __nwlog_obj();
          if (os_log_type_enabled(v460, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)long long uu = 136446978;
            *(void *)&uu[4] = "nw_path_verify_tlv_length";
            *(_WORD *)&uu[12] = 1024;
            *(_DWORD *)&uu[14] = 113;
            *(_WORD *)&uu[18] = 1024;
            *(_DWORD *)&uu[20] = v27;
            LOWORD(v572) = 1024;
            *(_DWORD *)((char *)&v572 + 2) = 64;
            _os_log_impl(&dword_1830D4000, v460, OS_LOG_TYPE_DEBUG, "%{public}s Permitting TLV of type %u with larger length %u, should be %u", uu, 0x1Eu);
          }

LABEL_214:
          long long v113 = *((_OWORD *)v36 + 1);
          *(_OWORD *)int buf = *(_OWORD *)v36;
          *(_OWORD *)&buf[16] = v113;
          long long v114 = *((_OWORD *)v36 + 3);
          *(_OWORD *)&buf[32] = *((_OWORD *)v36 + 2);
          *(_OWORD *)&unsigned char buf[48] = v114;
          os_log_type_t v115 = parameters;
          uint64_t v116 = *((void *)parameters[13].isa + 22);
          if (v116) {
            xpc_object_t v68 = *(id *)(v116 + 56);
          }
          else {
            xpc_object_t v68 = 0;
          }

          BOOL v176 = v115;
          uint64_t v177 = *((void *)parameters[13].isa + 22);
          if (v177) {
            p_super = *(id *)(v177 + 64);
          }
          else {
            p_super = 0;
          }

          if (v68) {
            goto LABEL_814;
          }
          xpc_object_t v68 = xpc_array_create(0, 0);
          if (v68) {
            goto LABEL_814;
          }
          uint64_t v182 = __nwlog_obj();
          *(_DWORD *)long long uu = 136446210;
          *(void *)&uu[4] = "nw_path_parse_necp_parameters";
          int v183 = (char *)_os_log_send_and_compose_impl();

          os_log_type_t v568 = OS_LOG_TYPE_ERROR;
          char v563 = 0;
          if (!__nwlog_fault(v183, &v568, &v563)) {
            goto LABEL_811;
          }
          if (v568 == OS_LOG_TYPE_FAULT)
          {
            os_log_type_t v184 = __nwlog_obj();
            os_log_type_t v185 = v568;
            if (os_log_type_enabled(v184, v568))
            {
              *(_DWORD *)long long uu = 136446210;
              *(void *)&uu[4] = "nw_path_parse_necp_parameters";
              _os_log_impl(&dword_1830D4000, v184, v185, "%{public}s xpc_array_create failed", uu, 0xCu);
            }
LABEL_810:

            goto LABEL_811;
          }
          if (!v563)
          {
            os_log_type_t v184 = __nwlog_obj();
            os_log_type_t v313 = v568;
            if (os_log_type_enabled(v184, v568))
            {
              *(_DWORD *)long long uu = 136446210;
              *(void *)&uu[4] = "nw_path_parse_necp_parameters";
              _os_log_impl(&dword_1830D4000, v184, v313, "%{public}s xpc_array_create failed, backtrace limit exceeded", uu, 0xCu);
            }
            goto LABEL_810;
          }
          char v254 = (char *)__nw_create_backtrace_string();
          os_log_type_t v184 = __nwlog_obj();
          os_log_type_t v255 = v568;
          BOOL v256 = os_log_type_enabled(v184, v568);
          if (!v254)
          {
            if (v256)
            {
              *(_DWORD *)long long uu = 136446210;
              *(void *)&uu[4] = "nw_path_parse_necp_parameters";
              _os_log_impl(&dword_1830D4000, v184, v255, "%{public}s xpc_array_create failed, no backtrace", uu, 0xCu);
            }
            goto LABEL_810;
          }
          if (v256)
          {
            *(_DWORD *)long long uu = 136446466;
            *(void *)&uu[4] = "nw_path_parse_necp_parameters";
            *(_WORD *)&uu[12] = 2082;
            *(void *)&uu[14] = v254;
            _os_log_impl(&dword_1830D4000, v184, v255, "%{public}s xpc_array_create failed, dumping backtrace:%{public}s", uu, 0x16u);
          }

          free(v254);
LABEL_811:
          if (v183) {
            free(v183);
          }
          xpc_object_t v68 = 0;
LABEL_814:
          if (!p_super)
          {
            p_super = xpc_array_create(0, 0);
            if (!p_super)
            {
              v412 = __nwlog_obj();
              *(_DWORD *)long long uu = 136446210;
              *(void *)&uu[4] = "nw_path_parse_necp_parameters";
              BOOL v413 = (char *)_os_log_send_and_compose_impl();

              os_log_type_t v568 = OS_LOG_TYPE_ERROR;
              char v563 = 0;
              if (__nwlog_fault(v413, &v568, &v563))
              {
                if (v568 == OS_LOG_TYPE_FAULT)
                {
                  v414 = __nwlog_obj();
                  os_log_type_t v415 = v568;
                  if (os_log_type_enabled(v414, v568))
                  {
                    *(_DWORD *)long long uu = 136446210;
                    *(void *)&uu[4] = "nw_path_parse_necp_parameters";
                    _os_log_impl(&dword_1830D4000, v414, v415, "%{public}s xpc_array_create failed", uu, 0xCu);
                  }
                  goto LABEL_874;
                }
                if (v563)
                {
                  uint64_t v419 = (char *)__nw_create_backtrace_string();
                  v414 = __nwlog_obj();
                  os_log_type_t v420 = v568;
                  BOOL v421 = os_log_type_enabled(v414, v568);
                  if (v419)
                  {
                    if (v421)
                    {
                      *(_DWORD *)long long uu = 136446466;
                      *(void *)&uu[4] = "nw_path_parse_necp_parameters";
                      *(_WORD *)&uu[12] = 2082;
                      *(void *)&uu[14] = v419;
                      _os_log_impl(&dword_1830D4000, v414, v420, "%{public}s xpc_array_create failed, dumping backtrace:%{public}s", uu, 0x16u);
                    }

                    free(v419);
                    goto LABEL_875;
                  }
                  if (v421)
                  {
                    *(_DWORD *)long long uu = 136446210;
                    *(void *)&uu[4] = "nw_path_parse_necp_parameters";
                    _os_log_impl(&dword_1830D4000, v414, v420, "%{public}s xpc_array_create failed, no backtrace", uu, 0xCu);
                  }
                }
                else
                {
                  v414 = __nwlog_obj();
                  os_log_type_t v424 = v568;
                  if (os_log_type_enabled(v414, v568))
                  {
                    *(_DWORD *)long long uu = 136446210;
                    *(void *)&uu[4] = "nw_path_parse_necp_parameters";
                    _os_log_impl(&dword_1830D4000, v414, v424, "%{public}s xpc_array_create failed, backtrace limit exceeded", uu, 0xCu);
                  }
                }
LABEL_874:
              }
LABEL_875:
              if (v413) {
                free(v413);
              }
              p_super = 0;
              goto LABEL_878;
            }
          }
          if (!v68) {
            goto LABEL_878;
          }
          if (strnlen((const char *)buf, 0x20uLL) <= 0x1F && strnlen((const char *)&buf[32], 0x20uLL) <= 0x1F)
          {
            xpc_array_set_string(v68, 0xFFFFFFFFFFFFFFFFLL, (const char *)buf);
            xpc_array_set_string(p_super, 0xFFFFFFFFFFFFFFFFLL, (const char *)&buf[32]);
            nw_parameters_set_required_netagent_classes(v176, v68, p_super);
            goto LABEL_878;
          }
          v399 = __nwlog_obj();
          size_t v400 = strnlen((const char *)buf, 0x20uLL);
          size_t v401 = strnlen((const char *)&buf[32], 0x20uLL);
          *(_DWORD *)long long uu = 136446722;
          *(void *)&uu[4] = "nw_path_parse_necp_parameters";
          *(_WORD *)&uu[12] = 2048;
          *(void *)&uu[14] = v400;
          *(_WORD *)&uu[22] = 2048;
          size_t v572 = v401;
          id v323 = (char *)_os_log_send_and_compose_impl();

          os_log_type_t v568 = OS_LOG_TYPE_ERROR;
          char v563 = 0;
          if (!__nwlog_fault(v323, &v568, &v563)) {
            goto LABEL_846;
          }
          if (v568 == OS_LOG_TYPE_FAULT)
          {
            uint64_t v402 = __nwlog_obj();
            os_log_type_t v403 = v568;
            if (os_log_type_enabled(v402, v568))
            {
              size_t v404 = strnlen((const char *)buf, 0x20uLL);
              size_t v405 = strnlen((const char *)&buf[32], 0x20uLL);
              *(_DWORD *)long long uu = 136446722;
              *(void *)&uu[4] = "nw_path_parse_necp_parameters";
              *(_WORD *)&uu[12] = 2048;
              *(void *)&uu[14] = v404;
              *(_WORD *)&uu[22] = 2048;
              size_t v572 = v405;
              _os_log_impl(&dword_1830D4000, v402, v403, "%{public}s invalid required netagent string lengths %zu %zu", uu, 0x20u);
            }
LABEL_824:

            goto LABEL_846;
          }
          if (!v563)
          {
            uint64_t v402 = __nwlog_obj();
            os_log_type_t v416 = v568;
            if (os_log_type_enabled(v402, v568))
            {
              size_t v417 = strnlen((const char *)buf, 0x20uLL);
              size_t v418 = strnlen((const char *)&buf[32], 0x20uLL);
              *(_DWORD *)long long uu = 136446722;
              *(void *)&uu[4] = "nw_path_parse_necp_parameters";
              *(_WORD *)&uu[12] = 2048;
              *(void *)&uu[14] = v417;
              *(_WORD *)&uu[22] = 2048;
              size_t v572 = v418;
              _os_log_impl(&dword_1830D4000, v402, v416, "%{public}s invalid required netagent string lengths %zu %zu, backtrace limit exceeded", uu, 0x20u);
            }
            goto LABEL_824;
          }
          nw_endpoint_t v406 = (char *)__nw_create_backtrace_string();
          uint64_t v407 = __nwlog_obj();
          os_log_type_t v408 = v568;
          BOOL v409 = os_log_type_enabled(v407, v568);
          if (v406)
          {
            if (v409)
            {
              size_t v410 = strnlen((const char *)buf, 0x20uLL);
              size_t v411 = strnlen((const char *)&buf[32], 0x20uLL);
              *(_DWORD *)long long uu = 136446978;
              *(void *)&uu[4] = "nw_path_parse_necp_parameters";
              *(_WORD *)&uu[12] = 2048;
              *(void *)&uu[14] = v410;
              *(_WORD *)&uu[22] = 2048;
              size_t v572 = v411;
              __int16 v573 = 2082;
              v574 = v406;
              _os_log_impl(&dword_1830D4000, v407, v408, "%{public}s invalid required netagent string lengths %zu %zu, dumping backtrace:%{public}s", uu, 0x2Au);
            }

            free(v406);
          }
          else
          {
            if (v409)
            {
              size_t v422 = strnlen((const char *)buf, 0x20uLL);
              size_t v423 = strnlen((const char *)&buf[32], 0x20uLL);
              *(_DWORD *)long long uu = 136446722;
              *(void *)&uu[4] = "nw_path_parse_necp_parameters";
              *(_WORD *)&uu[12] = 2048;
              *(void *)&uu[14] = v422;
              *(_WORD *)&uu[22] = 2048;
              size_t v572 = v423;
              _os_log_impl(&dword_1830D4000, v407, v408, "%{public}s invalid required netagent string lengths %zu %zu, no backtrace", uu, 0x20u);
            }
          }
LABEL_846:
          if (!v323) {
            goto LABEL_878;
          }
          goto LABEL_847;
        case 122:
          if (v27 == 16) {
            goto LABEL_127;
          }
          if (v27 < 0x11) {
            break;
          }
          os_log_type_t v450 = __nwlog_obj();
          if (os_log_type_enabled(v450, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)int buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_path_verify_tlv_length";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 122;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = v27;
            *(_WORD *)&unsigned char buf[24] = 1024;
            *(_DWORD *)&buf[26] = 16;
            _os_log_impl(&dword_1830D4000, v450, OS_LOG_TYPE_DEBUG, "%{public}s Permitting TLV of type %u with larger length %u, should be %u", buf, 0x1Eu);
          }

LABEL_127:
          *(_OWORD *)long long uu = *(_OWORD *)v36;
          if (uuid_is_null(uu)) {
            break;
          }
          BOOL v40 = nw_parameters_copy_preferred_netagent_uuids(parameters);
          if (v40 || (BOOL v40 = xpc_array_create(0, 0)) != 0)
          {
            xpc_array_set_uuid(v40, 0xFFFFFFFFFFFFFFFFLL, uu);
            nw_parameters_set_preferred_netagent_uuids(parameters, v40);
            goto LABEL_418;
          }
          os_log_type_t v274 = __nwlog_obj();
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
          os_log_type_t v275 = (char *)_os_log_send_and_compose_impl();

          os_log_type_t v568 = OS_LOG_TYPE_ERROR;
          char v563 = 0;
          if (!__nwlog_fault(v275, &v568, &v563)) {
            goto LABEL_942;
          }
          if (v568 == OS_LOG_TYPE_FAULT)
          {
            v276 = __nwlog_obj();
            os_log_type_t v277 = v568;
            if (os_log_type_enabled(v276, v568))
            {
              *(_DWORD *)int buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
              _os_log_impl(&dword_1830D4000, v276, v277, "%{public}s xpc_array_create failed", buf, 0xCu);
            }
LABEL_941:

            goto LABEL_942;
          }
          if (!v563)
          {
            v276 = __nwlog_obj();
            os_log_type_t v435 = v568;
            if (os_log_type_enabled(v276, v568))
            {
              *(_DWORD *)int buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
              _os_log_impl(&dword_1830D4000, v276, v435, "%{public}s xpc_array_create failed, backtrace limit exceeded", buf, 0xCu);
            }
            goto LABEL_941;
          }
          os_log_type_t v304 = (char *)__nw_create_backtrace_string();
          v276 = __nwlog_obj();
          os_log_type_t v305 = v568;
          BOOL v306 = os_log_type_enabled(v276, v568);
          if (!v304)
          {
            if (v306)
            {
              *(_DWORD *)int buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
              _os_log_impl(&dword_1830D4000, v276, v305, "%{public}s xpc_array_create failed, no backtrace", buf, 0xCu);
            }
            goto LABEL_941;
          }
          if (v306)
          {
            *(_DWORD *)int buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = v304;
            _os_log_impl(&dword_1830D4000, v276, v305, "%{public}s xpc_array_create failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v304);
LABEL_942:
          if (v275) {
            free(v275);
          }
          BOOL v40 = 0;
          goto LABEL_418;
        case 123:
          memset(buf, 0, sizeof(buf));
          if (v27 == 64) {
            goto LABEL_132;
          }
          if (v27 < 0x41) {
            break;
          }
          int v451 = __nwlog_obj();
          if (os_log_type_enabled(v451, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)long long uu = 136446978;
            *(void *)&uu[4] = "nw_path_verify_tlv_length";
            *(_WORD *)&uu[12] = 1024;
            *(_DWORD *)&uu[14] = 123;
            *(_WORD *)&uu[18] = 1024;
            *(_DWORD *)&uu[20] = v27;
            LOWORD(v572) = 1024;
            *(_DWORD *)((char *)&v572 + 2) = 64;
            _os_log_impl(&dword_1830D4000, v451, OS_LOG_TYPE_DEBUG, "%{public}s Permitting TLV of type %u with larger length %u, should be %u", uu, 0x1Eu);
          }

LABEL_132:
          long long v69 = *((_OWORD *)v36 + 1);
          *(_OWORD *)int buf = *(_OWORD *)v36;
          *(_OWORD *)&buf[16] = v69;
          long long v70 = *((_OWORD *)v36 + 3);
          *(_OWORD *)&buf[32] = *((_OWORD *)v36 + 2);
          *(_OWORD *)&unsigned char buf[48] = v70;
          xpc_object_t v68 = nw_parameters_copy_preferred_netagent_domains(parameters);
          p_super = nw_parameters_copy_preferred_netagent_types(parameters);
          if (v68) {
            goto LABEL_685;
          }
          xpc_object_t v68 = xpc_array_create(0, 0);
          if (v68) {
            goto LABEL_685;
          }
          BOOL v72 = __nwlog_obj();
          *(_DWORD *)long long uu = 136446210;
          *(void *)&uu[4] = "nw_path_parse_necp_parameters";
          id v73 = (char *)_os_log_send_and_compose_impl();

          os_log_type_t v568 = OS_LOG_TYPE_ERROR;
          char v563 = 0;
          if (!__nwlog_fault(v73, &v568, &v563)) {
            goto LABEL_682;
          }
          if (v568 == OS_LOG_TYPE_FAULT)
          {
            os_log_type_t v74 = __nwlog_obj();
            os_log_type_t v75 = v568;
            if (os_log_type_enabled(v74, v568))
            {
              *(_DWORD *)long long uu = 136446210;
              *(void *)&uu[4] = "nw_path_parse_necp_parameters";
              _os_log_impl(&dword_1830D4000, v74, v75, "%{public}s xpc_array_create failed", uu, 0xCu);
            }
LABEL_681:

            goto LABEL_682;
          }
          if (!v563)
          {
            os_log_type_t v74 = __nwlog_obj();
            os_log_type_t v310 = v568;
            if (os_log_type_enabled(v74, v568))
            {
              *(_DWORD *)long long uu = 136446210;
              *(void *)&uu[4] = "nw_path_parse_necp_parameters";
              _os_log_impl(&dword_1830D4000, v74, v310, "%{public}s xpc_array_create failed, backtrace limit exceeded", uu, 0xCu);
            }
            goto LABEL_681;
          }
          char v245 = (char *)__nw_create_backtrace_string();
          os_log_type_t v74 = __nwlog_obj();
          os_log_type_t v246 = v568;
          BOOL v247 = os_log_type_enabled(v74, v568);
          if (!v245)
          {
            if (v247)
            {
              *(_DWORD *)long long uu = 136446210;
              *(void *)&uu[4] = "nw_path_parse_necp_parameters";
              _os_log_impl(&dword_1830D4000, v74, v246, "%{public}s xpc_array_create failed, no backtrace", uu, 0xCu);
            }
            goto LABEL_681;
          }
          if (v247)
          {
            *(_DWORD *)long long uu = 136446466;
            *(void *)&uu[4] = "nw_path_parse_necp_parameters";
            *(_WORD *)&uu[12] = 2082;
            *(void *)&uu[14] = v245;
            _os_log_impl(&dword_1830D4000, v74, v246, "%{public}s xpc_array_create failed, dumping backtrace:%{public}s", uu, 0x16u);
          }

          free(v245);
LABEL_682:
          if (v73) {
            free(v73);
          }
          xpc_object_t v68 = 0;
LABEL_685:
          if (!p_super)
          {
            p_super = xpc_array_create(0, 0);
            if (!p_super)
            {
              uint64_t v334 = __nwlog_obj();
              *(_DWORD *)long long uu = 136446210;
              *(void *)&uu[4] = "nw_path_parse_necp_parameters";
              uint64_t v335 = (char *)_os_log_send_and_compose_impl();

              os_log_type_t v568 = OS_LOG_TYPE_ERROR;
              char v563 = 0;
              if (__nwlog_fault(v335, &v568, &v563))
              {
                if (v568 == OS_LOG_TYPE_FAULT)
                {
                  uint64_t v336 = __nwlog_obj();
                  os_log_type_t v337 = v568;
                  if (os_log_type_enabled(v336, v568))
                  {
                    *(_DWORD *)long long uu = 136446210;
                    *(void *)&uu[4] = "nw_path_parse_necp_parameters";
                    _os_log_impl(&dword_1830D4000, v336, v337, "%{public}s xpc_array_create failed", uu, 0xCu);
                  }
                  goto LABEL_853;
                }
                if (v563)
                {
                  v341 = (char *)__nw_create_backtrace_string();
                  uint64_t v336 = __nwlog_obj();
                  os_log_type_t v342 = v568;
                  BOOL v343 = os_log_type_enabled(v336, v568);
                  if (v341)
                  {
                    if (v343)
                    {
                      *(_DWORD *)long long uu = 136446466;
                      *(void *)&uu[4] = "nw_path_parse_necp_parameters";
                      *(_WORD *)&uu[12] = 2082;
                      *(void *)&uu[14] = v341;
                      _os_log_impl(&dword_1830D4000, v336, v342, "%{public}s xpc_array_create failed, dumping backtrace:%{public}s", uu, 0x16u);
                    }

                    free(v341);
                    goto LABEL_854;
                  }
                  if (v343)
                  {
                    *(_DWORD *)long long uu = 136446210;
                    *(void *)&uu[4] = "nw_path_parse_necp_parameters";
                    _os_log_impl(&dword_1830D4000, v336, v342, "%{public}s xpc_array_create failed, no backtrace", uu, 0xCu);
                  }
                }
                else
                {
                  uint64_t v336 = __nwlog_obj();
                  os_log_type_t v346 = v568;
                  if (os_log_type_enabled(v336, v568))
                  {
                    *(_DWORD *)long long uu = 136446210;
                    *(void *)&uu[4] = "nw_path_parse_necp_parameters";
                    _os_log_impl(&dword_1830D4000, v336, v346, "%{public}s xpc_array_create failed, backtrace limit exceeded", uu, 0xCu);
                  }
                }
LABEL_853:
              }
LABEL_854:
              if (v335) {
                free(v335);
              }
              p_super = 0;
              goto LABEL_878;
            }
          }
          if (!v68) {
            goto LABEL_878;
          }
          if (strnlen((const char *)buf, 0x20uLL) <= 0x1F && strnlen((const char *)&buf[32], 0x20uLL) <= 0x1F)
          {
            xpc_array_set_string(v68, 0xFFFFFFFFFFFFFFFFLL, (const char *)buf);
            xpc_array_set_string(p_super, 0xFFFFFFFFFFFFFFFFLL, (const char *)&buf[32]);
            nw_parameters_set_preferred_netagent_classes(parameters, v68, p_super);
            goto LABEL_878;
          }
          uint64_t v320 = __nwlog_obj();
          size_t v321 = strnlen((const char *)buf, 0x20uLL);
          size_t v322 = strnlen((const char *)&buf[32], 0x20uLL);
          *(_DWORD *)long long uu = 136446722;
          *(void *)&uu[4] = "nw_path_parse_necp_parameters";
          *(_WORD *)&uu[12] = 2048;
          *(void *)&uu[14] = v321;
          *(_WORD *)&uu[22] = 2048;
          size_t v572 = v322;
          id v323 = (char *)_os_log_send_and_compose_impl();

          os_log_type_t v568 = OS_LOG_TYPE_ERROR;
          char v563 = 0;
          if (!__nwlog_fault(v323, &v568, &v563)) {
            goto LABEL_717;
          }
          if (v568 == OS_LOG_TYPE_FAULT)
          {
            uint64_t v324 = __nwlog_obj();
            os_log_type_t v325 = v568;
            if (os_log_type_enabled(v324, v568))
            {
              size_t v326 = strnlen((const char *)buf, 0x20uLL);
              size_t v327 = strnlen((const char *)&buf[32], 0x20uLL);
              *(_DWORD *)long long uu = 136446722;
              *(void *)&uu[4] = "nw_path_parse_necp_parameters";
              *(_WORD *)&uu[12] = 2048;
              *(void *)&uu[14] = v326;
              *(_WORD *)&uu[22] = 2048;
              size_t v572 = v327;
              _os_log_impl(&dword_1830D4000, v324, v325, "%{public}s invalid preferred netagent string lengths %zu %zu", uu, 0x20u);
            }
LABEL_695:

            goto LABEL_717;
          }
          if (!v563)
          {
            uint64_t v324 = __nwlog_obj();
            os_log_type_t v338 = v568;
            if (os_log_type_enabled(v324, v568))
            {
              size_t v339 = strnlen((const char *)buf, 0x20uLL);
              size_t v340 = strnlen((const char *)&buf[32], 0x20uLL);
              *(_DWORD *)long long uu = 136446722;
              *(void *)&uu[4] = "nw_path_parse_necp_parameters";
              *(_WORD *)&uu[12] = 2048;
              *(void *)&uu[14] = v339;
              *(_WORD *)&uu[22] = 2048;
              size_t v572 = v340;
              _os_log_impl(&dword_1830D4000, v324, v338, "%{public}s invalid preferred netagent string lengths %zu %zu, backtrace limit exceeded", uu, 0x20u);
            }
            goto LABEL_695;
          }
          os_log_type_t v328 = (char *)__nw_create_backtrace_string();
          uint64_t v329 = __nwlog_obj();
          os_log_type_t v330 = v568;
          BOOL v331 = os_log_type_enabled(v329, v568);
          if (v328)
          {
            if (v331)
            {
              size_t v332 = strnlen((const char *)buf, 0x20uLL);
              size_t v333 = strnlen((const char *)&buf[32], 0x20uLL);
              *(_DWORD *)long long uu = 136446978;
              *(void *)&uu[4] = "nw_path_parse_necp_parameters";
              *(_WORD *)&uu[12] = 2048;
              *(void *)&uu[14] = v332;
              *(_WORD *)&uu[22] = 2048;
              size_t v572 = v333;
              __int16 v573 = 2082;
              v574 = v328;
              _os_log_impl(&dword_1830D4000, v329, v330, "%{public}s invalid preferred netagent string lengths %zu %zu, dumping backtrace:%{public}s", uu, 0x2Au);
            }

            free(v328);
          }
          else
          {
            if (v331)
            {
              size_t v344 = strnlen((const char *)buf, 0x20uLL);
              size_t v345 = strnlen((const char *)&buf[32], 0x20uLL);
              *(_DWORD *)long long uu = 136446722;
              *(void *)&uu[4] = "nw_path_parse_necp_parameters";
              *(_WORD *)&uu[12] = 2048;
              *(void *)&uu[14] = v344;
              *(_WORD *)&uu[22] = 2048;
              size_t v572 = v345;
              _os_log_impl(&dword_1830D4000, v329, v330, "%{public}s invalid preferred netagent string lengths %zu %zu, no backtrace", uu, 0x20u);
            }
          }
LABEL_717:
          if (!v323) {
            goto LABEL_878;
          }
          goto LABEL_847;
        case 124:
          if (v27 == 16) {
            goto LABEL_66;
          }
          if (v27 < 0x11) {
            break;
          }
          os_log_type_t v441 = __nwlog_obj();
          if (os_log_type_enabled(v441, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)int buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_path_verify_tlv_length";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 124;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = v27;
            *(_WORD *)&unsigned char buf[24] = 1024;
            *(_DWORD *)&buf[26] = 16;
            _os_log_impl(&dword_1830D4000, v441, OS_LOG_TYPE_DEBUG, "%{public}s Permitting TLV of type %u with larger length %u, should be %u", buf, 0x1Eu);
          }

LABEL_66:
          *(_OWORD *)long long uu = *(_OWORD *)v36;
          if (uuid_is_null(uu)) {
            break;
          }
          BOOL v40 = nw_parameters_copy_avoided_netagent_uuids(parameters);
          if (v40 || (BOOL v40 = xpc_array_create(0, 0)) != 0)
          {
            xpc_array_set_uuid(v40, 0xFFFFFFFFFFFFFFFFLL, uu);
            nw_parameters_set_avoided_netagent_uuids(parameters, v40);
            goto LABEL_418;
          }
          char v266 = __nwlog_obj();
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
          uint64_t v267 = (char *)_os_log_send_and_compose_impl();

          os_log_type_t v568 = OS_LOG_TYPE_ERROR;
          char v563 = 0;
          if (!__nwlog_fault(v267, &v568, &v563)) {
            goto LABEL_930;
          }
          if (v568 == OS_LOG_TYPE_FAULT)
          {
            int v268 = __nwlog_obj();
            os_log_type_t v269 = v568;
            if (os_log_type_enabled(v268, v568))
            {
              *(_DWORD *)int buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
              _os_log_impl(&dword_1830D4000, v268, v269, "%{public}s xpc_array_create failed", buf, 0xCu);
            }
LABEL_929:

            goto LABEL_930;
          }
          if (!v563)
          {
            int v268 = __nwlog_obj();
            os_log_type_t v433 = v568;
            if (os_log_type_enabled(v268, v568))
            {
              *(_DWORD *)int buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
              _os_log_impl(&dword_1830D4000, v268, v433, "%{public}s xpc_array_create failed, backtrace limit exceeded", buf, 0xCu);
            }
            goto LABEL_929;
          }
          nw_endpoint_t v298 = (char *)__nw_create_backtrace_string();
          int v268 = __nwlog_obj();
          os_log_type_t v299 = v568;
          BOOL v300 = os_log_type_enabled(v268, v568);
          if (!v298)
          {
            if (v300)
            {
              *(_DWORD *)int buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
              _os_log_impl(&dword_1830D4000, v268, v299, "%{public}s xpc_array_create failed, no backtrace", buf, 0xCu);
            }
            goto LABEL_929;
          }
          if (v300)
          {
            *(_DWORD *)int buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = v298;
            _os_log_impl(&dword_1830D4000, v268, v299, "%{public}s xpc_array_create failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v298);
LABEL_930:
          if (v267) {
            free(v267);
          }
          BOOL v40 = 0;
          goto LABEL_418;
        case 125:
          memset(buf, 0, sizeof(buf));
          if (v27 == 64) {
            goto LABEL_140;
          }
          if (v27 < 0x41) {
            break;
          }
          v452 = __nwlog_obj();
          if (os_log_type_enabled(v452, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)long long uu = 136446978;
            *(void *)&uu[4] = "nw_path_verify_tlv_length";
            *(_WORD *)&uu[12] = 1024;
            *(_DWORD *)&uu[14] = 125;
            *(_WORD *)&uu[18] = 1024;
            *(_DWORD *)&uu[20] = v27;
            LOWORD(v572) = 1024;
            *(_DWORD *)((char *)&v572 + 2) = 64;
            _os_log_impl(&dword_1830D4000, v452, OS_LOG_TYPE_DEBUG, "%{public}s Permitting TLV of type %u with larger length %u, should be %u", uu, 0x1Eu);
          }

LABEL_140:
          long long v76 = *((_OWORD *)v36 + 1);
          *(_OWORD *)int buf = *(_OWORD *)v36;
          *(_OWORD *)&buf[16] = v76;
          long long v77 = *((_OWORD *)v36 + 3);
          *(_OWORD *)&buf[32] = *((_OWORD *)v36 + 2);
          *(_OWORD *)&unsigned char buf[48] = v77;
          xpc_object_t v68 = nw_parameters_copy_avoided_netagent_domains(parameters);
          p_super = nw_parameters_copy_avoided_netagent_types(parameters);
          if (v68) {
            goto LABEL_728;
          }
          xpc_object_t v68 = xpc_array_create(0, 0);
          if (v68) {
            goto LABEL_728;
          }
          uint64_t v78 = __nwlog_obj();
          *(_DWORD *)long long uu = 136446210;
          *(void *)&uu[4] = "nw_path_parse_necp_parameters";
          uint64_t v79 = (char *)_os_log_send_and_compose_impl();

          os_log_type_t v568 = OS_LOG_TYPE_ERROR;
          char v563 = 0;
          if (!__nwlog_fault(v79, &v568, &v563)) {
            goto LABEL_725;
          }
          if (v568 == OS_LOG_TYPE_FAULT)
          {
            char v80 = __nwlog_obj();
            os_log_type_t v81 = v568;
            if (os_log_type_enabled(v80, v568))
            {
              *(_DWORD *)long long uu = 136446210;
              *(void *)&uu[4] = "nw_path_parse_necp_parameters";
              _os_log_impl(&dword_1830D4000, v80, v81, "%{public}s xpc_array_create failed", uu, 0xCu);
            }
LABEL_724:

            goto LABEL_725;
          }
          if (!v563)
          {
            char v80 = __nwlog_obj();
            os_log_type_t v311 = v568;
            if (os_log_type_enabled(v80, v568))
            {
              *(_DWORD *)long long uu = 136446210;
              *(void *)&uu[4] = "nw_path_parse_necp_parameters";
              _os_log_impl(&dword_1830D4000, v80, v311, "%{public}s xpc_array_create failed, backtrace limit exceeded", uu, 0xCu);
            }
            goto LABEL_724;
          }
          nw_endpoint_t v248 = (char *)__nw_create_backtrace_string();
          char v80 = __nwlog_obj();
          os_log_type_t v249 = v568;
          BOOL v250 = os_log_type_enabled(v80, v568);
          if (!v248)
          {
            if (v250)
            {
              *(_DWORD *)long long uu = 136446210;
              *(void *)&uu[4] = "nw_path_parse_necp_parameters";
              _os_log_impl(&dword_1830D4000, v80, v249, "%{public}s xpc_array_create failed, no backtrace", uu, 0xCu);
            }
            goto LABEL_724;
          }
          if (v250)
          {
            *(_DWORD *)long long uu = 136446466;
            *(void *)&uu[4] = "nw_path_parse_necp_parameters";
            *(_WORD *)&uu[12] = 2082;
            *(void *)&uu[14] = v248;
            _os_log_impl(&dword_1830D4000, v80, v249, "%{public}s xpc_array_create failed, dumping backtrace:%{public}s", uu, 0x16u);
          }

          free(v248);
LABEL_725:
          if (v79) {
            free(v79);
          }
          xpc_object_t v68 = 0;
LABEL_728:
          if (!p_super)
          {
            p_super = xpc_array_create(0, 0);
            if (!p_super)
            {
              uint64_t v360 = __nwlog_obj();
              *(_DWORD *)long long uu = 136446210;
              *(void *)&uu[4] = "nw_path_parse_necp_parameters";
              nw_endpoint_t v361 = (char *)_os_log_send_and_compose_impl();

              os_log_type_t v568 = OS_LOG_TYPE_ERROR;
              char v563 = 0;
              if (__nwlog_fault(v361, &v568, &v563))
              {
                if (v568 == OS_LOG_TYPE_FAULT)
                {
                  int v362 = __nwlog_obj();
                  os_log_type_t v363 = v568;
                  if (os_log_type_enabled(v362, v568))
                  {
                    *(_DWORD *)long long uu = 136446210;
                    *(void *)&uu[4] = "nw_path_parse_necp_parameters";
                    _os_log_impl(&dword_1830D4000, v362, v363, "%{public}s xpc_array_create failed", uu, 0xCu);
                  }
                  goto LABEL_860;
                }
                if (v563)
                {
                  nw_endpoint_t v367 = (char *)__nw_create_backtrace_string();
                  int v362 = __nwlog_obj();
                  os_log_type_t v368 = v568;
                  BOOL v369 = os_log_type_enabled(v362, v568);
                  if (v367)
                  {
                    if (v369)
                    {
                      *(_DWORD *)long long uu = 136446466;
                      *(void *)&uu[4] = "nw_path_parse_necp_parameters";
                      *(_WORD *)&uu[12] = 2082;
                      *(void *)&uu[14] = v367;
                      _os_log_impl(&dword_1830D4000, v362, v368, "%{public}s xpc_array_create failed, dumping backtrace:%{public}s", uu, 0x16u);
                    }

                    free(v367);
                    goto LABEL_861;
                  }
                  if (v369)
                  {
                    *(_DWORD *)long long uu = 136446210;
                    *(void *)&uu[4] = "nw_path_parse_necp_parameters";
                    _os_log_impl(&dword_1830D4000, v362, v368, "%{public}s xpc_array_create failed, no backtrace", uu, 0xCu);
                  }
                }
                else
                {
                  int v362 = __nwlog_obj();
                  os_log_type_t v372 = v568;
                  if (os_log_type_enabled(v362, v568))
                  {
                    *(_DWORD *)long long uu = 136446210;
                    *(void *)&uu[4] = "nw_path_parse_necp_parameters";
                    _os_log_impl(&dword_1830D4000, v362, v372, "%{public}s xpc_array_create failed, backtrace limit exceeded", uu, 0xCu);
                  }
                }
LABEL_860:
              }
LABEL_861:
              if (v361) {
                free(v361);
              }
              p_super = 0;
              goto LABEL_878;
            }
          }
          if (!v68) {
            goto LABEL_878;
          }
          if (strnlen((const char *)buf, 0x20uLL) <= 0x1F && strnlen((const char *)&buf[32], 0x20uLL) <= 0x1F)
          {
            xpc_array_set_string(v68, 0xFFFFFFFFFFFFFFFFLL, (const char *)buf);
            xpc_array_set_string(p_super, 0xFFFFFFFFFFFFFFFFLL, (const char *)&buf[32]);
            nw_parameters_set_avoided_netagent_classes(parameters, v68, p_super);
            goto LABEL_878;
          }
          nw_endpoint_t v347 = __nwlog_obj();
          size_t v348 = strnlen((const char *)buf, 0x20uLL);
          size_t v349 = strnlen((const char *)&buf[32], 0x20uLL);
          *(_DWORD *)long long uu = 136446722;
          *(void *)&uu[4] = "nw_path_parse_necp_parameters";
          *(_WORD *)&uu[12] = 2048;
          *(void *)&uu[14] = v348;
          *(_WORD *)&uu[22] = 2048;
          size_t v572 = v349;
          id v323 = (char *)_os_log_send_and_compose_impl();

          os_log_type_t v568 = OS_LOG_TYPE_ERROR;
          char v563 = 0;
          if (!__nwlog_fault(v323, &v568, &v563)) {
            goto LABEL_760;
          }
          if (v568 == OS_LOG_TYPE_FAULT)
          {
            v350 = __nwlog_obj();
            os_log_type_t v351 = v568;
            if (os_log_type_enabled(v350, v568))
            {
              size_t v352 = strnlen((const char *)buf, 0x20uLL);
              size_t v353 = strnlen((const char *)&buf[32], 0x20uLL);
              *(_DWORD *)long long uu = 136446722;
              *(void *)&uu[4] = "nw_path_parse_necp_parameters";
              *(_WORD *)&uu[12] = 2048;
              *(void *)&uu[14] = v352;
              *(_WORD *)&uu[22] = 2048;
              size_t v572 = v353;
              _os_log_impl(&dword_1830D4000, v350, v351, "%{public}s invalid avoided netagent string lengths %zu %zu", uu, 0x20u);
            }
LABEL_738:

            goto LABEL_760;
          }
          if (!v563)
          {
            v350 = __nwlog_obj();
            os_log_type_t v364 = v568;
            if (os_log_type_enabled(v350, v568))
            {
              size_t v365 = strnlen((const char *)buf, 0x20uLL);
              size_t v366 = strnlen((const char *)&buf[32], 0x20uLL);
              *(_DWORD *)long long uu = 136446722;
              *(void *)&uu[4] = "nw_path_parse_necp_parameters";
              *(_WORD *)&uu[12] = 2048;
              *(void *)&uu[14] = v365;
              *(_WORD *)&uu[22] = 2048;
              size_t v572 = v366;
              _os_log_impl(&dword_1830D4000, v350, v364, "%{public}s invalid avoided netagent string lengths %zu %zu, backtrace limit exceeded", uu, 0x20u);
            }
            goto LABEL_738;
          }
          nw_endpoint_t v354 = (char *)__nw_create_backtrace_string();
          BOOL v355 = __nwlog_obj();
          os_log_type_t v356 = v568;
          BOOL v357 = os_log_type_enabled(v355, v568);
          if (v354)
          {
            if (v357)
            {
              size_t v358 = strnlen((const char *)buf, 0x20uLL);
              size_t v359 = strnlen((const char *)&buf[32], 0x20uLL);
              *(_DWORD *)long long uu = 136446978;
              *(void *)&uu[4] = "nw_path_parse_necp_parameters";
              *(_WORD *)&uu[12] = 2048;
              *(void *)&uu[14] = v358;
              *(_WORD *)&uu[22] = 2048;
              size_t v572 = v359;
              __int16 v573 = 2082;
              v574 = v354;
              _os_log_impl(&dword_1830D4000, v355, v356, "%{public}s invalid avoided netagent string lengths %zu %zu, dumping backtrace:%{public}s", uu, 0x2Au);
            }

            free(v354);
          }
          else
          {
            if (v357)
            {
              size_t v370 = strnlen((const char *)buf, 0x20uLL);
              size_t v371 = strnlen((const char *)&buf[32], 0x20uLL);
              *(_DWORD *)long long uu = 136446722;
              *(void *)&uu[4] = "nw_path_parse_necp_parameters";
              *(_WORD *)&uu[12] = 2048;
              *(void *)&uu[14] = v370;
              *(_WORD *)&uu[22] = 2048;
              size_t v572 = v371;
              _os_log_impl(&dword_1830D4000, v355, v356, "%{public}s invalid avoided netagent string lengths %zu %zu, no backtrace", uu, 0x20u);
            }
          }
LABEL_760:
          if (!v323) {
            goto LABEL_878;
          }
          goto LABEL_847;
        case 140:
          if (v27 != 1)
          {
            id v461 = __nwlog_obj();
            if (os_log_type_enabled(v461, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)int buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_path_verify_tlv_length";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 140;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v27;
              *(_WORD *)&unsigned char buf[24] = 1024;
              *(_DWORD *)&buf[26] = 1;
              _os_log_impl(&dword_1830D4000, v461, OS_LOG_TYPE_DEBUG, "%{public}s Permitting TLV of type %u with larger length %u, should be %u", buf, 0x1Eu);
            }
          }
          char v117 = *v36;
          int v118 = parameters;
          *((unsigned char *)parameters[13].isa + 107) = v117;

          break;
        case 150:
          if (v27 == 16) {
            goto LABEL_219;
          }
          if (v27 >= 0x11)
          {
            v462 = __nwlog_obj();
            if (os_log_type_enabled(v462, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)int buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_path_verify_tlv_length";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 150;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v27;
              *(_WORD *)&unsigned char buf[24] = 1024;
              *(_DWORD *)&buf[26] = 16;
              _os_log_impl(&dword_1830D4000, v462, OS_LOG_TYPE_DEBUG, "%{public}s Permitting TLV of type %u with larger length %u, should be %u", buf, 0x1Eu);
            }

LABEL_219:
            nw_parameters_add_parent_id(parameters, (const unsigned __int8 *)v36);
          }
          break;
        case 151:
          if (v27 != 1)
          {
            BOOL v463 = __nwlog_obj();
            if (os_log_type_enabled(v463, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)int buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_path_verify_tlv_length";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 151;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v27;
              *(_WORD *)&unsigned char buf[24] = 1024;
              *(_DWORD *)&buf[26] = 1;
              _os_log_impl(&dword_1830D4000, v463, OS_LOG_TYPE_DEBUG, "%{public}s Permitting TLV of type %u with larger length %u, should be %u", buf, 0x1Eu);
            }
          }
          nw_parameters_set_data_mode(parameters, *v36);
          break;
        case 152:
          if (v27 == 4) {
            goto LABEL_71;
          }
          if (v27 < 5)
          {
            int v41 = 0;
          }
          else
          {
            v442 = __nwlog_obj();
            if (os_log_type_enabled(v442, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)int buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_path_verify_tlv_length";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 152;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v27;
              *(_WORD *)&unsigned char buf[24] = 1024;
              *(_DWORD *)&buf[26] = 4;
              _os_log_impl(&dword_1830D4000, v442, OS_LOG_TYPE_DEBUG, "%{public}s Permitting TLV of type %u with larger length %u, should be %u", buf, 0x1Eu);
            }

LABEL_71:
            int v41 = *(_DWORD *)v36;
            if (*(_DWORD *)v36)
            {
              char v42 = parameters;
              parameters[12].Class isa = (Class)((unint64_t)parameters[12].isa | 1);
            }
            if ((v41 & 2) != 0)
            {
              uint64_t v43 = parameters;
              *((_WORD *)parameters[13].isa + 54) |= 8u;
            }
            if ((v41 & 4) != 0)
            {
              char v44 = parameters;
              *((_WORD *)parameters[13].isa + 54) |= 0x10u;
            }
            if ((v41 & 0x10) != 0)
            {
              os_log_type_t v45 = parameters;
              parameters[12].Class isa = (Class)((unint64_t)parameters[12].isa | 0x800000000);
            }
          }
          HIDWORD(v556) += v41 << 28 >> 31;
          LODWORD(v555) = v555 | ((v41 & 0x40) >> 6);
          if ((v41 & 0x20) != 0)
          {
            __int16 v46 = parameters;
            parameters[12].Class isa = (Class)((unint64_t)parameters[12].isa | 0x1000000000);
          }
          break;
        case 154:
          if (v27 == 6) {
            goto LABEL_148;
          }
          if (v27 >= 7)
          {
            BOOL v453 = __nwlog_obj();
            if (os_log_type_enabled(v453, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)int buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_path_verify_tlv_length";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 154;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v27;
              *(_WORD *)&unsigned char buf[24] = 1024;
              *(_DWORD *)&buf[26] = 6;
              _os_log_impl(&dword_1830D4000, v453, OS_LOG_TYPE_DEBUG, "%{public}s Permitting TLV of type %u with larger length %u, should be %u", buf, 0x1Eu);
            }

LABEL_148:
            int v566 = *(_DWORD *)v36;
            __int16 v567 = *((_WORD *)v36 + 2);
          }
          BYTE4(v551) = 1;
          break;
        case 155:
          if (v27 == 6) {
            goto LABEL_223;
          }
          if (v27 >= 7)
          {
            int v464 = __nwlog_obj();
            if (os_log_type_enabled(v464, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)int buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_path_verify_tlv_length";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 155;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v27;
              *(_WORD *)&unsigned char buf[24] = 1024;
              *(_DWORD *)&buf[26] = 6;
              _os_log_impl(&dword_1830D4000, v464, OS_LOG_TYPE_DEBUG, "%{public}s Permitting TLV of type %u with larger length %u, should be %u", buf, 0x1Eu);
            }

LABEL_223:
            int v564 = *(_DWORD *)v36;
            __int16 v565 = *((_WORD *)v36 + 2);
          }
          LOBYTE(v551) = 1;
          break;
        case 156:
          goto LABEL_493;
        case 157:
          if (v27 != 1)
          {
            int v467 = __nwlog_obj();
            if (os_log_type_enabled(v467, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)int buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_path_verify_tlv_length";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 157;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v27;
              *(_WORD *)&unsigned char buf[24] = 1024;
              *(_DWORD *)&buf[26] = 1;
              _os_log_impl(&dword_1830D4000, v467, OS_LOG_TYPE_DEBUG, "%{public}s Permitting TLV of type %u with larger length %u, should be %u", buf, 0x1Eu);
            }
          }
          unsigned int v126 = *v36 - 1;
          if (v126 > 5) {
            unsigned int v127 = 0;
          }
          else {
            unsigned int v127 = dword_183E234A0[v126];
          }
          os_log_type_t v169 = parameters;
          *((_DWORD *)parameters[13].isa + 23) = v127;

          break;
        case 158:
          if (!v560)
          {
            uint64_t v173 = __nwlog_obj();
            if (os_log_type_enabled(v173, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)int buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
              _os_log_impl(&dword_1830D4000, v173, OS_LOG_TYPE_ERROR, "%{public}s No previous endpoint to apply endpoint device id to", buf, 0xCu);
            }
            goto LABEL_500;
          }
          *(void *)int buf = 0;
          asprintf((char **)buf, "%.*s", v27, v36);
          nw_endpoint_set_device_id(v560, *(const char **)buf);
          int v82 = *(char **)buf;
          if (*(void *)buf) {
            goto LABEL_620;
          }
          break;
        case 159:
          if (v560)
          {
            uint64_t v119 = [MEMORY[0x1E4F1C9B8] dataWithBytes:v36 length:v27];
            nw_endpoint_append_public_key(v560, v119);

            break;
          }
          uint64_t v173 = __nwlog_obj();
          if (os_log_type_enabled(v173, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)int buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
            _os_log_impl(&dword_1830D4000, v173, OS_LOG_TYPE_ERROR, "%{public}s No previous endpoint to apply public key to", buf, 0xCu);
          }
          goto LABEL_500;
        case 160:
          if (v27 != 1)
          {
            int v454 = __nwlog_obj();
            if (os_log_type_enabled(v454, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)int buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_path_verify_tlv_length";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 160;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v27;
              *(_WORD *)&unsigned char buf[24] = 1024;
              *(_DWORD *)&buf[26] = 1;
              _os_log_impl(&dword_1830D4000, v454, OS_LOG_TYPE_DEBUG, "%{public}s Permitting TLV of type %u with larger length %u, should be %u", buf, 0x1Eu);
            }
          }
          unsigned int v83 = *v36 - 3;
          if (v83 > 4 || *v36 == 5) {
            break;
          }
          uint64_t v84 = dword_183E234B8[v83];
          __int16 v85 = parameters;
          int v86 = v85;
          uint64_t v87 = *((void *)parameters[13].isa + 22);
          if (v87)
          {
            xpc_object_t v61 = *(id *)(v87 + 16);

            if (v61) {
              goto LABEL_442;
            }
          }
          else
          {
          }
          xpc_object_t v61 = xpc_array_create(0, 0);
          if (v61)
          {
LABEL_442:
            xpc_array_set_uint64(v61, 0xFFFFFFFFFFFFFFFFLL, v84);
            nw_parameters_set_preferred_interface_subtypes(v86, v61);
            goto LABEL_117;
          }
          os_log_type_t v262 = __nwlog_obj();
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
          BOOL v263 = (char *)_os_log_send_and_compose_impl();

          uu[0] = 16;
          os_log_type_t v568 = OS_LOG_TYPE_DEFAULT;
          if (!__nwlog_fault(v263, uu, &v568)) {
            goto LABEL_924;
          }
          if (uu[0] == 17)
          {
            os_log_type_t v264 = __nwlog_obj();
            os_log_type_t v265 = uu[0];
            if (os_log_type_enabled(v264, (os_log_type_t)uu[0]))
            {
              *(_DWORD *)int buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
              _os_log_impl(&dword_1830D4000, v264, v265, "%{public}s xpc_array_create failed", buf, 0xCu);
            }
LABEL_923:

            goto LABEL_924;
          }
          if (v568 == OS_LOG_TYPE_DEFAULT)
          {
            os_log_type_t v264 = __nwlog_obj();
            os_log_type_t v432 = uu[0];
            if (os_log_type_enabled(v264, (os_log_type_t)uu[0]))
            {
              *(_DWORD *)int buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
              _os_log_impl(&dword_1830D4000, v264, v432, "%{public}s xpc_array_create failed, backtrace limit exceeded", buf, 0xCu);
            }
            goto LABEL_923;
          }
          BOOL v291 = (char *)__nw_create_backtrace_string();
          os_log_type_t v264 = __nwlog_obj();
          os_log_type_t v292 = uu[0];
          BOOL v293 = os_log_type_enabled(v264, (os_log_type_t)uu[0]);
          if (!v291)
          {
            if (v293)
            {
              *(_DWORD *)int buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
              _os_log_impl(&dword_1830D4000, v264, v292, "%{public}s xpc_array_create failed, no backtrace", buf, 0xCu);
            }
            goto LABEL_923;
          }
          if (v293)
          {
            *(_DWORD *)int buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = v291;
            _os_log_impl(&dword_1830D4000, v264, v292, "%{public}s xpc_array_create failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v291);
LABEL_924:
          if (v263) {
            free(v263);
          }
          xpc_object_t v61 = 0;
LABEL_117:

          break;
        case 200:
          nw_endpoint_t v47 = nw_path_copy_endpoint_from_tlv(200, v27, v36);

          __int16 v48 = v47;
          nw_endpoint_t v560 = v48;
          if (v48) {
            nw_parameters_set_local_endpoint(parameters, v48);
          }

          break;
        case 201:
          if (v559 && !*v559)
          {
            nw_endpoint_t v88 = nw_path_copy_endpoint_from_tlv(201, v27, v36);

            nw_endpoint_t v560 = v88;
            if (v560) {
              objc_storeStrong(v559, v88);
            }
          }
          break;
        case 202:
          if (!a4 || *a4) {
            break;
          }
          BOOL v40 = nw_path_copy_browse_descriptor_from_tlv(v27, (unsigned __int8 *)v36, v15);
          if (v40) {
            objc_storeStrong(a4, v40);
          }
          goto LABEL_418;
        case 203:
          size_t v557 = v27;
          v558 = v36;
          break;
        case 204:
          if (!a5 || *a5) {
            break;
          }
          BOOL v40 = nw_path_copy_advertise_descriptor_from_tlv(v27, (uint64_t)v36, v15);
          if (v40) {
            objc_storeStrong(a5, v40);
          }
          goto LABEL_418;
        case 205:
          if (!a3 || *a3) {
            break;
          }
          BOOL v40 = nw_path_copy_group_descriptor_from_tlv(v27, (uint64_t)v36, v15);
          if (v40) {
            objc_storeStrong(a3, v40);
          }
          goto LABEL_418;
        case 210:
          if (v27 == 8) {
            goto LABEL_233;
          }
          if (v27 >= 9)
          {
            os_log_t v465 = __nwlog_obj();
            if (os_log_type_enabled(v465, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)int buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_path_verify_tlv_length";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 210;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v27;
              *(_WORD *)&unsigned char buf[24] = 1024;
              *(_DWORD *)&buf[26] = 8;
              _os_log_impl(&dword_1830D4000, v465, OS_LOG_TYPE_DEBUG, "%{public}s Permitting TLV of type %u with larger length %u, should be %u", buf, 0x1Eu);
            }

LABEL_233:
            uint64_t v120 = *(void *)v36;
            uint64_t v121 = parameters;
            *((void *)parameters[13].isa + 7) = v120;
          }
          break;
        case 220:
          if (v27 <= 2) {
            break;
          }
          BOOL v40 = __nwlog_obj();
          if (os_log_type_enabled(v40, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)int buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_path_verify_tlv_length";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 220;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = v27;
            *(_WORD *)&unsigned char buf[24] = 1024;
            *(_DWORD *)&buf[26] = 2;
            _os_log_impl(&dword_1830D4000, v40, OS_LOG_TYPE_DEBUG, "%{public}s Permitting TLV of type %u with larger length %u, should be %u", buf, 0x1Eu);
          }
          goto LABEL_418;
        case 221:
          if (v27 != 1)
          {
            v468 = __nwlog_obj();
            if (os_log_type_enabled(v468, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)int buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_path_verify_tlv_length";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 221;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v27;
              *(_WORD *)&unsigned char buf[24] = 1024;
              *(_DWORD *)&buf[26] = 1;
              _os_log_impl(&dword_1830D4000, v468, OS_LOG_TYPE_DEBUG, "%{public}s Permitting TLV of type %u with larger length %u, should be %u", buf, 0x1Eu);
            }
          }
          if (*v36 == 253)
          {
            os_log_type_t v128 = parameters;
            BOOL v129 = parameters[19].isa;

            if (nw_protocol_copy_quic_stream_definition::onceToken != -1) {
              dispatch_once(&nw_protocol_copy_quic_stream_definition::onceToken, &__block_literal_global_15_56153);
            }
            os_log_type_t v130 = nw_protocol_create_options((void *)nw_protocol_copy_quic_stream_definition::quic_definition);
            nw_protocol_stack_set_transport_protocol(v129, &v130->super);
          }
          break;
        case 222:
          if (v27 < 0x2A)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            id v167 = (id)gLogObj;
            *(_DWORD *)int buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = v27;
            uint64_t v91 = (const char *)_os_log_send_and_compose_impl();

            uu[0] = 16;
            os_log_type_t v568 = OS_LOG_TYPE_DEFAULT;
            if (!__nwlog_fault(v91, uu, &v568)) {
              goto LABEL_618;
            }
            if (uu[0] == 17)
            {
              id v92 = __nwlog_obj();
              os_log_type_t v168 = uu[0];
              if (os_log_type_enabled(v92, (os_log_type_t)uu[0]))
              {
                *(_DWORD *)int buf = 136446466;
                *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = v27;
                _os_log_impl(&dword_1830D4000, v92, v168, "%{public}s NW_NECP_CLIENT_PARAMETER_APPLICATION_PROTOCOL has bad length %u", buf, 0x12u);
              }
              goto LABEL_617;
            }
            if (v568 == OS_LOG_TYPE_DEFAULT)
            {
              id v92 = __nwlog_obj();
              os_log_type_t v217 = uu[0];
              if (os_log_type_enabled(v92, (os_log_type_t)uu[0]))
              {
                *(_DWORD *)int buf = 136446466;
                *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = v27;
                _os_log_impl(&dword_1830D4000, v92, v217, "%{public}s NW_NECP_CLIENT_PARAMETER_APPLICATION_PROTOCOL has bad length %u, backtrace limit exceeded", buf, 0x12u);
              }
              goto LABEL_617;
            }
            uint64_t v191 = (char *)__nw_create_backtrace_string();
            id v92 = __nwlog_obj();
            os_log_type_t v206 = uu[0];
            BOOL v207 = os_log_type_enabled(v92, (os_log_type_t)uu[0]);
            if (!v191)
            {
              if (v207)
              {
                *(_DWORD *)int buf = 136446466;
                *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = v27;
                _os_log_impl(&dword_1830D4000, v92, v206, "%{public}s NW_NECP_CLIENT_PARAMETER_APPLICATION_PROTOCOL has bad length %u, no backtrace", buf, 0x12u);
              }
              goto LABEL_617;
            }
            if (v207)
            {
              *(_DWORD *)int buf = 136446722;
              *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = v27;
              *(_WORD *)&buf[18] = 2082;
              *(void *)&buf[20] = v191;
              _os_log_impl(&dword_1830D4000, v92, v206, "%{public}s NW_NECP_CLIENT_PARAMETER_APPLICATION_PROTOCOL has bad length %u, dumping backtrace:%{public}s", buf, 0x1Cu);
            }
          }
          else
          {
            uint64_t v122 = *((unsigned __int16 *)v36 + 20);
            if (v122 + 42 == v27)
            {
              long long v123 = *((_OWORD *)v36 + 1);
              *(_OWORD *)int buf = *(_OWORD *)v36;
              *(_OWORD *)&buf[16] = v123;
              *(void *)&buf[32] = *((void *)v36 + 4);
              BOOL v124 = nw_protocol_copy_definition_for_identifier(buf);
              xpc_object_t v68 = v124;
              if (v124)
              {
                if (*((_WORD *)v36 + 20)) {
                  deserialized_options = nw_protocol_create_deserialized_options(v124, (uint64_t)(v36 + 42), *((unsigned __int16 *)v36 + 20));
                }
                else {
                  deserialized_options = nw_protocol_create_options(v124);
                }
                p_super = &deserialized_options->super;
                if (deserialized_options)
                {
                  char v257 = nw_parameters_copy_default_protocol_stack(parameters);
                  nw_protocol_stack_append_application_protocol(v257, p_super);
                }
                else
                {
                  char v257 = __nwlog_obj();
                  if (os_log_type_enabled(v257, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)long long uu = 136446466;
                    *(void *)&uu[4] = "nw_path_parse_necp_parameters";
                    *(_WORD *)&uu[12] = 2112;
                    *(void *)&uu[14] = v68;
                    _os_log_impl(&dword_1830D4000, v257, OS_LOG_TYPE_DEFAULT, "%{public}s Failed to deserialize options for %@", uu, 0x16u);
                  }
                }
              }
              else
              {
                p_super = __nwlog_obj();
                if (os_log_type_enabled(p_super, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)long long uu = 136446466;
                  *(void *)&uu[4] = "nw_path_parse_necp_parameters";
                  *(_WORD *)&uu[12] = 2080;
                  *(void *)&uu[14] = buf;
                  _os_log_impl(&dword_1830D4000, p_super, OS_LOG_TYPE_DEFAULT, "%{public}s No protocol definition registered for \"%s\"", uu, 0x16u);
                }
              }
              goto LABEL_878;
            }
            BOOL v198 = __nwlog_obj();
            *(_DWORD *)int buf = 136446722;
            *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = v122;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = v27;
            uint64_t v91 = (const char *)_os_log_send_and_compose_impl();

            uu[0] = 16;
            os_log_type_t v568 = OS_LOG_TYPE_DEFAULT;
            if (!__nwlog_fault(v91, uu, &v568)) {
              goto LABEL_618;
            }
            if (uu[0] == 17)
            {
              id v92 = __nwlog_obj();
              os_log_type_t v199 = uu[0];
              if (os_log_type_enabled(v92, (os_log_type_t)uu[0]))
              {
                *(_DWORD *)int buf = 136446722;
                *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = v122;
                *(_WORD *)&buf[18] = 1024;
                *(_DWORD *)&buf[20] = v27;
                _os_log_impl(&dword_1830D4000, v92, v199, "%{public}s NW_NECP_CLIENT_PARAMETER_APPLICATION_PROTOCOL has bad options length %u (total %u)", buf, 0x18u);
              }
              goto LABEL_617;
            }
            if (v568 == OS_LOG_TYPE_DEFAULT)
            {
              id v92 = __nwlog_obj();
              os_log_type_t v282 = uu[0];
              if (os_log_type_enabled(v92, (os_log_type_t)uu[0]))
              {
                *(_DWORD *)int buf = 136446722;
                *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = v122;
                *(_WORD *)&buf[18] = 1024;
                *(_DWORD *)&buf[20] = v27;
                _os_log_impl(&dword_1830D4000, v92, v282, "%{public}s NW_NECP_CLIENT_PARAMETER_APPLICATION_PROTOCOL has bad options length %u (total %u), backtrace limit exceeded", buf, 0x18u);
              }
              goto LABEL_617;
            }
            uint64_t v191 = (char *)__nw_create_backtrace_string();
            id v92 = __nwlog_obj();
            os_log_type_t v208 = uu[0];
            BOOL v209 = os_log_type_enabled(v92, (os_log_type_t)uu[0]);
            if (!v191)
            {
              if (v209)
              {
                *(_DWORD *)int buf = 136446722;
                *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = v122;
                *(_WORD *)&buf[18] = 1024;
                *(_DWORD *)&buf[20] = v27;
                _os_log_impl(&dword_1830D4000, v92, v208, "%{public}s NW_NECP_CLIENT_PARAMETER_APPLICATION_PROTOCOL has bad options length %u (total %u), no backtrace", buf, 0x18u);
              }
              goto LABEL_617;
            }
            if (v209)
            {
              *(_DWORD *)int buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = v122;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v27;
              *(_WORD *)&unsigned char buf[24] = 2082;
              *(void *)&buf[26] = v191;
              _os_log_impl(&dword_1830D4000, v92, v208, "%{public}s NW_NECP_CLIENT_PARAMETER_APPLICATION_PROTOCOL has bad options length %u (total %u), dumping backtrace:%{public}s", buf, 0x22u);
            }
          }
LABEL_423:

          free(v191);
          if (v91) {
            goto LABEL_619;
          }
          break;
        case 230:
          if (v27 != 1)
          {
            v443 = __nwlog_obj();
            if (os_log_type_enabled(v443, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)int buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_path_verify_tlv_length";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 230;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v27;
              *(_WORD *)&unsigned char buf[24] = 1024;
              *(_DWORD *)&buf[26] = 1;
              _os_log_impl(&dword_1830D4000, v443, OS_LOG_TYPE_DEBUG, "%{public}s Permitting TLV of type %u with larger length %u, should be %u", buf, 0x1Eu);
            }
          }
          nw_parameters_set_local_address_preference(parameters, (nw_ip_local_address_preference_t)*v36);
          break;
        case 231:
          if (v27 == 16) {
            goto LABEL_92;
          }
          v444 = __nwlog_obj();
          v445 = v444;
          if (v27 >= 0x11)
          {
            if (os_log_type_enabled(v444, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)int buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_path_verify_tlv_length";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 231;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v27;
              *(_WORD *)&unsigned char buf[24] = 1024;
              *(_DWORD *)&buf[26] = 16;
              _os_log_impl(&dword_1830D4000, v445, OS_LOG_TYPE_DEBUG, "%{public}s Permitting TLV of type %u with larger length %u, should be %u", buf, 0x1Eu);
            }

LABEL_92:
            uint64_t v49 = parameters;
            *(_OWORD *)((char *)parameters[13].isa + 40) = *(_OWORD *)v36;

            break;
          }
          *(_DWORD *)int buf = 136447234;
          *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 231;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = v27;
          *(_WORD *)&unsigned char buf[24] = 2080;
          *(void *)&buf[26] = "nw_path_parse_necp_parameters";
          *(_WORD *)&buf[34] = 1024;
          *(_DWORD *)&buf[36] = 3800;
          uint64_t v91 = (const char *)_os_log_send_and_compose_impl();

          uu[0] = 16;
          os_log_type_t v568 = OS_LOG_TYPE_DEFAULT;
          if (!__nwlog_fault(v91, uu, &v568)) {
            goto LABEL_618;
          }
          if (uu[0] == 17)
          {
            id v92 = __nwlog_obj();
            os_log_type_t v472 = uu[0];
            if (os_log_type_enabled(v92, (os_log_type_t)uu[0]))
            {
              *(_DWORD *)int buf = 136447234;
              *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 231;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v27;
              *(_WORD *)&unsigned char buf[24] = 2080;
              *(void *)&buf[26] = "nw_path_parse_necp_parameters";
              *(_WORD *)&buf[34] = 1024;
              *(_DWORD *)&buf[36] = 3800;
              _os_log_impl(&dword_1830D4000, v92, v472, "%{public}s TLV of type %d has invalid length %u (%s:%d)", buf, 0x28u);
            }
            goto LABEL_617;
          }
          if (v568 == OS_LOG_TYPE_DEFAULT)
          {
            id v92 = __nwlog_obj();
            os_log_type_t v475 = uu[0];
            if (os_log_type_enabled(v92, (os_log_type_t)uu[0]))
            {
              *(_DWORD *)int buf = 136447234;
              *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 231;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v27;
              *(_WORD *)&unsigned char buf[24] = 2080;
              *(void *)&buf[26] = "nw_path_parse_necp_parameters";
              *(_WORD *)&buf[34] = 1024;
              *(_DWORD *)&buf[36] = 3800;
              _os_log_impl(&dword_1830D4000, v92, v475, "%{public}s TLV of type %d has invalid length %u (%s:%d), backtrace limit exceeded", buf, 0x28u);
            }
            goto LABEL_617;
          }
          uint64_t v200 = (char *)__nw_create_backtrace_string();
          id v201 = __nwlog_obj();
          os_log_type_t v473 = uu[0];
          BOOL v474 = os_log_type_enabled(v201, (os_log_type_t)uu[0]);
          if (v200)
          {
            if (v474)
            {
              *(_DWORD *)int buf = 136447490;
              *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 231;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v27;
              *(_WORD *)&unsigned char buf[24] = 2080;
              *(void *)&buf[26] = "nw_path_parse_necp_parameters";
              *(_WORD *)&buf[34] = 1024;
              *(_DWORD *)&buf[36] = 3800;
              *(_WORD *)&uint8_t buf[40] = 2082;
              *(void *)&buf[42] = v200;
              _os_log_impl(&dword_1830D4000, v201, v473, "%{public}s TLV of type %d has invalid length %u (%s:%d), dumping backtrace:%{public}s", buf, 0x32u);
            }
            goto LABEL_408;
          }
          if (v474)
          {
            *(_DWORD *)int buf = 136447234;
            *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 231;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = v27;
            *(_WORD *)&unsigned char buf[24] = 2080;
            *(void *)&buf[26] = "nw_path_parse_necp_parameters";
            *(_WORD *)&buf[34] = 1024;
            *(_DWORD *)&buf[36] = 3800;
            _os_log_impl(&dword_1830D4000, v201, v473, "%{public}s TLV of type %d has invalid length %u (%s:%d), no backtrace", buf, 0x28u);
          }
          goto LABEL_1106;
        case 233:
          if (v27 == 2) {
            goto LABEL_292;
          }
          if (v27 >= 3)
          {
            os_log_type_t v470 = __nwlog_obj();
            if (os_log_type_enabled(v470, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)int buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_path_verify_tlv_length";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 233;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v27;
              *(_WORD *)&unsigned char buf[24] = 1024;
              *(_DWORD *)&buf[26] = 2;
              _os_log_impl(&dword_1830D4000, v470, OS_LOG_TYPE_DEBUG, "%{public}s Permitting TLV of type %u with larger length %u, should be %u", buf, 0x1Eu);
            }

LABEL_292:
            int v152 = *(unsigned __int16 *)v36;
            os_log_type_t v153 = parameters;
            *((_DWORD *)parameters[13].isa + 24) = v152;
          }
          break;
        case 250:
          if (v27 == 4) {
            goto LABEL_257;
          }
          if (v27 < 5)
          {
            int v131 = 0;
            if (!a9) {
              goto LABEL_267;
            }
LABEL_265:
            if ((v131 & 0x800) != 0) {
              *a9 = 1;
            }
            goto LABEL_267;
          }
          v469 = __nwlog_obj();
          if (os_log_type_enabled(v469, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)int buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_path_verify_tlv_length";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 250;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = v27;
            *(_WORD *)&unsigned char buf[24] = 1024;
            *(_DWORD *)&buf[26] = 4;
            _os_log_impl(&dword_1830D4000, v469, OS_LOG_TYPE_DEBUG, "%{public}s Permitting TLV of type %u with larger length %u, should be %u", buf, 0x1Eu);
          }

LABEL_257:
          int v131 = *(_DWORD *)v36;
          if (*(_DWORD *)v36)
          {
            uint64_t v132 = parameters;
            *(_DWORD *)((char *)parameters[13].isa + 103) = 2;
          }
          if ((v131 & 0x100) != 0)
          {
            uint64_t v133 = parameters;
            *((_WORD *)parameters[13].isa + 50) |= 0x20u;
          }
          if (v547 && (v131 & 8) != 0) {
            unsigned char *v547 = 1;
          }
          if (a9) {
            goto LABEL_265;
          }
LABEL_267:
          if ((v131 & 4) != 0)
          {
            id v134 = parameters;
            *((_WORD *)parameters[13].isa + 50) |= 1u;
          }
          if ((v131 & 0x1000) != 0)
          {
            uint64_t v135 = parameters;
            *((_WORD *)parameters[13].isa + 50) |= 2u;
          }
          if ((v131 & 0x4000000) != 0)
          {
            int v136 = parameters;
            *((_WORD *)parameters[13].isa + 50) |= 4u;
          }
          if ((v131 & 0x20000) != 0)
          {
            os_log_type_t v137 = parameters;
            *((_WORD *)parameters[13].isa + 50) |= 0x10u;
          }
          if ((v131 & 0x10000) != 0)
          {
            __int16 v138 = parameters;
            *((_WORD *)parameters[13].isa + 54) |= 0x4000u;
          }
          if ((v131 & 0x40000) != 0)
          {
            uint64_t v139 = parameters;
            *((unsigned char *)parameters[13].isa + 102) = 2;
          }
          if ((v131 & 0x80000) != 0)
          {
            os_log_type_t v140 = parameters;
            *((_WORD *)parameters[13].isa + 54) |= 0x8000u;
          }
          if ((v131 & 0x200000) != 0)
          {
            BOOL v141 = parameters;
            Class v142 = parameters[13].isa;
            __int16 v143 = *((_WORD *)v142 + 54);
            Class v142 = (Class)((char *)v142 + 108);
            *((unsigned char *)v142 + 2) |= 1u;
            *(_WORD *)Class v142 = v143;
          }
          if ((v131 & 0x800000) != 0)
          {
            uint64_t v144 = parameters;
            parameters[12].Class isa = (Class)((unint64_t)parameters[12].isa | 0x100);
          }
          if ((v131 & 0x1000000) != 0)
          {
            uint64_t v145 = parameters;
            Class v146 = parameters[13].isa;
            __int16 v147 = *((_WORD *)v146 + 54);
            Class v146 = (Class)((char *)v146 + 108);
            *((unsigned char *)v146 + 2) |= 2u;
            *(_WORD *)Class v146 = v147;
          }
          if ((v131 & 0x2000000) != 0)
          {
            id v148 = parameters;
            Class v149 = parameters[13].isa;
            __int16 v150 = *((_WORD *)v149 + 54);
            Class v149 = (Class)((char *)v149 + 108);
            *((unsigned char *)v149 + 2) |= 4u;
            *(_WORD *)Class v149 = v150;
          }
          HIDWORD(v555) |= (unsigned __int16)(v131 & 0x200) >> 9;
          LODWORD(v556) = v556 | ((unsigned __int16)(v131 & 0x400) >> 10);
          if ((v131 & 0x4000) != 0)
          {
            os_log_type_t v151 = parameters;
            *((_DWORD *)parameters[13].isa + 21) = 0;
            parameters[12].Class isa = (Class)((unint64_t)parameters[12].isa & 0xFFFFFFFFFFFF7F3FLL | 0x8080);
          }
          break;
        case 251:
          int v570 = 0;
          memset(buf, 0, sizeof(buf));
          if (v27 == 68) {
            goto LABEL_94;
          }
          if (v27 >= 0x45)
          {
            os_log_type_t v446 = __nwlog_obj();
            if (os_log_type_enabled(v446, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)long long uu = 136446978;
              *(void *)&uu[4] = "nw_path_verify_tlv_length";
              *(_WORD *)&uu[12] = 1024;
              *(_DWORD *)&uu[14] = 251;
              *(_WORD *)&uu[18] = 1024;
              *(_DWORD *)&uu[20] = v27;
              LOWORD(v572) = 1024;
              *(_DWORD *)((char *)&v572 + 2) = 68;
              _os_log_impl(&dword_1830D4000, v446, OS_LOG_TYPE_DEBUG, "%{public}s Permitting TLV of type %u with larger length %u, should be %u", uu, 0x1Eu);
            }

LABEL_94:
            long long v50 = *((_OWORD *)v36 + 3);
            *(_OWORD *)&buf[32] = *((_OWORD *)v36 + 2);
            *(_OWORD *)&unsigned char buf[48] = v50;
            int v570 = *((_DWORD *)v36 + 16);
            long long v51 = *((_OWORD *)v36 + 1);
            *(_OWORD *)int buf = *(_OWORD *)v36;
            *(_OWORD *)&buf[16] = v51;
            __int16 v52 = v561;
            if (!v561) {
              __int16 v52 = nw_demux_create_options();
            }
            v561 = v52;
            nw_demux_options_add_pattern(v52, *(__int16 *)buf, *(unsigned __int16 *)&buf[2], (uint64_t)&buf[36], (uint64_t)&buf[4]);
          }
          break;
        default:
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          BOOL v40 = (id)gLogObj;
          if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)int buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = v26;
            _os_log_impl(&dword_1830D4000, v40, OS_LOG_TYPE_ERROR, "%{public}s Received unknown client parameter TLV (type %d)", buf, 0x12u);
          }
          goto LABEL_418;
      }
    }
    if (v20 >= a11 - 5) {
      goto LABEL_1126;
    }
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v476 = (id)gLogObj;
  *(_DWORD *)int buf = 136446978;
  *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
  *(_WORD *)&unsigned char buf[12] = 1024;
  *(_DWORD *)&buf[14] = v27;
  *(_WORD *)&buf[18] = 2048;
  *(void *)&buf[20] = v20;
  *(_WORD *)&buf[28] = 2048;
  *(void *)&buf[30] = a11;
  v477 = (char *)_os_log_send_and_compose_impl();

  uu[0] = 16;
  os_log_type_t v568 = OS_LOG_TYPE_DEFAULT;
  if (!__nwlog_fault(v477, uu, &v568)) {
    goto LABEL_1124;
  }
  if (uu[0] == 17)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    char v478 = (id)gLogObj;
    os_log_type_t v479 = uu[0];
    if (os_log_type_enabled(v478, (os_log_type_t)uu[0]))
    {
      *(_DWORD *)int buf = 136446978;
      *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = v27;
      *(_WORD *)&buf[18] = 2048;
      *(void *)&buf[20] = v20;
      *(_WORD *)&buf[28] = 2048;
      *(void *)&buf[30] = a11;
      _os_log_impl(&dword_1830D4000, v478, v479, "%{public}s TLV length (%u) at offset %zu goes beyond total length (%zu)", buf, 0x26u);
    }
    goto LABEL_1123;
  }
  if (v568 == OS_LOG_TYPE_DEFAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    char v478 = (id)gLogObj;
    os_log_type_t v484 = uu[0];
    if (os_log_type_enabled(v478, (os_log_type_t)uu[0]))
    {
      *(_DWORD *)int buf = 136446978;
      *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = v27;
      *(_WORD *)&buf[18] = 2048;
      *(void *)&buf[20] = v20;
      *(_WORD *)&buf[28] = 2048;
      *(void *)&buf[30] = a11;
      _os_log_impl(&dword_1830D4000, v478, v484, "%{public}s TLV length (%u) at offset %zu goes beyond total length (%zu), backtrace limit exceeded", buf, 0x26u);
    }
    goto LABEL_1123;
  }
  uint64_t v480 = __nw_create_backtrace_string();
  if (!v480)
  {
    char v478 = __nwlog_obj();
    os_log_type_t v485 = uu[0];
    if (os_log_type_enabled(v478, (os_log_type_t)uu[0]))
    {
      *(_DWORD *)int buf = 136446978;
      *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = v27;
      *(_WORD *)&buf[18] = 2048;
      *(void *)&buf[20] = v20;
      *(_WORD *)&buf[28] = 2048;
      *(void *)&buf[30] = a11;
      _os_log_impl(&dword_1830D4000, v478, v485, "%{public}s TLV length (%u) at offset %zu goes beyond total length (%zu), no backtrace", buf, 0x26u);
    }
LABEL_1123:

LABEL_1124:
    if (!v477) {
      goto LABEL_1126;
    }
    goto LABEL_1125;
  }
  int v481 = (char *)v480;
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  __int16 v482 = (id)gLogObj;
  os_log_type_t v483 = uu[0];
  if (os_log_type_enabled(v482, (os_log_type_t)uu[0]))
  {
    *(_DWORD *)int buf = 136447234;
    *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = v27;
    *(_WORD *)&buf[18] = 2048;
    *(void *)&buf[20] = v20;
    *(_WORD *)&buf[28] = 2048;
    *(void *)&buf[30] = a11;
    *(_WORD *)&buf[38] = 2082;
    *(void *)&uint8_t buf[40] = v481;
    _os_log_impl(&dword_1830D4000, v482, v483, "%{public}s TLV length (%u) at offset %zu goes beyond total length (%zu), dumping backtrace:%{public}s", buf, 0x30u);
  }

  free(v481);
  if (v477) {
LABEL_1125:
  }
    free(v477);
LABEL_1126:
  if (v20 == a11) {
    goto LABEL_1127;
  }
  v534 = __nwlog_obj();
  *(_DWORD *)int buf = 136446722;
  *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
  *(_WORD *)&unsigned char buf[12] = 2048;
  *(void *)&buf[14] = v20;
  *(_WORD *)&unsigned char buf[22] = 2048;
  *(void *)&unsigned char buf[24] = a11;
  BOOL v535 = (char *)_os_log_send_and_compose_impl();

  uu[0] = 16;
  os_log_type_t v568 = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v535, uu, &v568))
  {
    if (uu[0] == 17)
    {
      v536 = __nwlog_obj();
      os_log_type_t v537 = uu[0];
      if (os_log_type_enabled(v536, (os_log_type_t)uu[0]))
      {
        *(_DWORD *)int buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
        *(_WORD *)&unsigned char buf[12] = 2048;
        *(void *)&buf[14] = v20;
        *(_WORD *)&unsigned char buf[22] = 2048;
        *(void *)&unsigned char buf[24] = a11;
        _os_log_impl(&dword_1830D4000, v536, v537, "%{public}s cursor has unexpected value %zu != %zu", buf, 0x20u);
      }
      goto LABEL_1251;
    }
    if (v568)
    {
      v538 = (char *)__nw_create_backtrace_string();
      v536 = __nwlog_obj();
      os_log_type_t v539 = uu[0];
      BOOL v540 = os_log_type_enabled(v536, (os_log_type_t)uu[0]);
      if (v538)
      {
        if (v540)
        {
          *(_DWORD *)int buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
          *(_WORD *)&unsigned char buf[12] = 2048;
          *(void *)&buf[14] = v20;
          *(_WORD *)&unsigned char buf[22] = 2048;
          *(void *)&unsigned char buf[24] = a11;
          *(_WORD *)&buf[32] = 2082;
          *(void *)&buf[34] = v538;
          _os_log_impl(&dword_1830D4000, v536, v539, "%{public}s cursor has unexpected value %zu != %zu, dumping backtrace:%{public}s", buf, 0x2Au);
        }

        free(v538);
        goto LABEL_1252;
      }
      if (v540)
      {
        *(_DWORD *)int buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
        *(_WORD *)&unsigned char buf[12] = 2048;
        *(void *)&buf[14] = v20;
        *(_WORD *)&unsigned char buf[22] = 2048;
        *(void *)&unsigned char buf[24] = a11;
        _os_log_impl(&dword_1830D4000, v536, v539, "%{public}s cursor has unexpected value %zu != %zu, no backtrace", buf, 0x20u);
      }
    }
    else
    {
      v536 = __nwlog_obj();
      os_log_type_t v544 = uu[0];
      if (os_log_type_enabled(v536, (os_log_type_t)uu[0]))
      {
        *(_DWORD *)int buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
        *(_WORD *)&unsigned char buf[12] = 2048;
        *(void *)&buf[14] = v20;
        *(_WORD *)&unsigned char buf[22] = 2048;
        *(void *)&unsigned char buf[24] = a11;
        _os_log_impl(&dword_1830D4000, v536, v544, "%{public}s cursor has unexpected value %zu != %zu, backtrace limit exceeded", buf, 0x20u);
      }
    }
LABEL_1251:
  }
LABEL_1252:
  if (v535) {
    free(v535);
  }
LABEL_1127:
  nw_parameters_t v486 = parameters;
  if (((v549 != 0) & BYTE4(v555)) == 1) {
    _WORD *v549 = 0;
  }
  if (v556)
  {
    if (v550) {
      char *v550 = v548;
    }
    BOOL v487 = parameters;
    __int16 v488 = v487[19];

    v489 = nw_custom_ip_create_options(v548);
    nw_protocol_stack_set_transport_protocol(v488, &v489->super);

    nw_parameters_t v486 = parameters;
  }
  if (v555)
  {
    __int16 v490 = v486;
    id v491 = v490[19];

    if (v491)
    {
      __int16 v492 = (id *)v491;
      id v493 = v492[3];

      if (v493)
      {
        id v494 = v493;
        if (nw_protocol_setup_udp_definition(void)::onceToken[0] != -1) {
          dispatch_once(nw_protocol_setup_udp_definition(void)::onceToken, &__block_literal_global_45806);
        }
        BOOL v495 = nw_protocol_options_matches_definition(v494, (void *)g_udp_definition);

        if (v495) {
          nw_udp_options_set_no_metadata(v494, 1);
        }
      }
    }
    nw_parameters_t v486 = parameters;
  }
  if ((v551 & 0x100000000) != 0)
  {
    __int16 v496 = v486;
    id v497 = *((id *)v496[13].isa + 20);

    if (v497)
    {
      __int16 v498 = v497;
      int v499 = [v498 type];

      if (v499 == 1)
      {
        address = nw_endpoint_get_address(v498);
        os_log_type_t v501 = nw_endpoint_create_address_with_ethernet(address, &v566);

        __int16 v498 = v501;
        nw_parameters_set_local_endpoint(v496, v501);
      }
    }
    else
    {
      __int16 v498 = 0;
    }

    nw_parameters_t v486 = parameters;
  }
  v502 = v559;
  if (v559 != 0 && (v551 & 1) != 0)
  {
    if (*v559)
    {
      id v503 = *v559;
      int v504 = [v503 type];

      nw_parameters_t v486 = parameters;
      v502 = v559;
      if (v504 == 1)
      {
        uint64_t v505 = nw_endpoint_get_address((nw_endpoint_t)*v559);
        nw_endpoint_t v506 = nw_endpoint_create_address_with_ethernet(v505, &v564);
        int v507 = *v559;
        NSObject *v559 = v506;

        nw_parameters_t v486 = parameters;
        v502 = v559;
      }
    }
  }
  if (v502 && v558 && v557) {
    nw_endpoint_set_signature(*v502, v558, v557);
  }
  if (SHIDWORD(v556) < 1) {
    goto LABEL_1184;
  }
  v508 = v486;
  uint64_t v509 = v508;
  uint64_t v510 = *((void *)v508[13].isa + 22);
  if (!v510)
  {

    goto LABEL_1161;
  }
  xpc_object_t v511 = *(id *)(v510 + 8);

  if (v511)
  {
LABEL_1162:
    xpc_array_set_uint64(v511, 0xFFFFFFFFFFFFFFFFLL, 0x3EAuLL);
    nw_parameters_set_prohibited_interface_subtypes(v509, v511);
    goto LABEL_1183;
  }
LABEL_1161:
  xpc_object_t v511 = xpc_array_create(0, 0);
  if (v511) {
    goto LABEL_1162;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v512 = (id)gLogObj;
  *(_DWORD *)int buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
  v513 = (char *)_os_log_send_and_compose_impl();

  uu[0] = 16;
  os_log_type_t v568 = OS_LOG_TYPE_DEFAULT;
  if (!__nwlog_fault(v513, uu, &v568)) {
    goto LABEL_1180;
  }
  if (uu[0] == 17)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v514 = (id)gLogObj;
    os_log_type_t v515 = uu[0];
    if (os_log_type_enabled(v514, (os_log_type_t)uu[0]))
    {
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
      _os_log_impl(&dword_1830D4000, v514, v515, "%{public}s xpc_array_create failed", buf, 0xCu);
    }
    goto LABEL_1179;
  }
  if (v568 == OS_LOG_TYPE_DEFAULT)
  {
    BOOL v514 = __nwlog_obj();
    os_log_type_t v519 = uu[0];
    if (os_log_type_enabled(v514, (os_log_type_t)uu[0]))
    {
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
      _os_log_impl(&dword_1830D4000, v514, v519, "%{public}s xpc_array_create failed, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_1179;
  }
  BOOL v516 = (char *)__nw_create_backtrace_string();
  BOOL v514 = __nwlog_obj();
  os_log_type_t v517 = uu[0];
  BOOL v518 = os_log_type_enabled(v514, (os_log_type_t)uu[0]);
  if (!v516)
  {
    if (v518)
    {
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
      _os_log_impl(&dword_1830D4000, v514, v517, "%{public}s xpc_array_create failed, no backtrace", buf, 0xCu);
    }
LABEL_1179:

LABEL_1180:
    if (!v513) {
      goto LABEL_1182;
    }
    goto LABEL_1181;
  }
  if (v518)
  {
    *(_DWORD *)int buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
    *(_WORD *)&unsigned char buf[12] = 2082;
    *(void *)&buf[14] = v516;
    _os_log_impl(&dword_1830D4000, v514, v517, "%{public}s xpc_array_create failed, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v516);
  if (v513) {
LABEL_1181:
  }
    free(v513);
LABEL_1182:
  xpc_object_t v511 = 0;
LABEL_1183:

  nw_parameters_t v486 = parameters;
LABEL_1184:
  if (v561) {
    nw_parameters_set_channel_demux_options(v486, v561);
  }

  uint64_t v25 = 1;
LABEL_1187:

  return v25;
}